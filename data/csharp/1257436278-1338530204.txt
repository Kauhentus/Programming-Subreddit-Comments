There's a bit of traffic on dotnet and aspnet. I suspect this space is a bit redundant.
As far as I'm aware, const fields are stored in a separate part of memory and their values are written into the program compilation. Readonly fields are normal variables with the instruction for the compiler to give an error if anyone tries to write to it outside of the constructor of the class, but is otherwise just a normal variable. You could test this by getting a pointer to 2 fields of type readonly and const, and then change their values, you should see that you can write to the readonly variable, but trying to write to the const variable should be denied by a security exception.
Looks like a good wealth of knowledge, however, I'd clean up the grammar and the general style and bias of the introduction. Some of it comes off as very naive... &gt; Microsoft Windows is by large the most popular and used operating system around the globe Things like that are unnecessary and have irritated and alienated people I've linked to it. &gt; "compiled into an intermediate format which contains a special type of pseudocode" Bytecode isn't really pseudocode. You can explain things to people who know little without using terminology as if you were talking to a child.
About damn time we got default parameters. Named arguments are nice too. Browsing around I ended up at a demo of the new "box selection" features in VS2010, [and I started drooling all over my keyboard](http://blogs.msdn.com/vseditor/archive/2009/05/25/the-new-box-selection-now-with-multi-line-editing.aspx). PS. If there are any students here, you can get VS2010 and many other programs for free from Microsoft through [Dreamspark](http://www.dreamspark.com).
&gt;Browsing around I ended up at a demo of the new "box selection" features in VS2010, and I started drooling all over my keyboard. Anyone who has ever used VIM will be unimpressed by this. VS really needs to implement vim as an editor or at least allow the use of sed/awk/regex to edit text. I'm sick of having to open vim externally to perform any major edits.
Oh man, TextMate has this, and it was one of my favourite features.
just 3 things i noticed after a quick glance: * use System.DateTime when fiddling with dates and times * use System.IO.Path.Combine when fiddling with paths instead of combining strings * it might not be necessary for your app, but you should add exception handling where appropriate.
Thank you very much!
Double.TryParse isn't a great way to check if something is a year. uint is a better choice, but DateTimeOffset is a better choice still. Path.Combine has been mentioned as a safer way of appending to paths. For other purposes, String.Format can be a clearer way of assembling strings. String literals can be assigned to const variables. If you really need to use an immutable static variable of some other reference type, though, you can mark it readonly so that it will only be assigned to on initialization. Commenting the ends of blocks is a matter of taste, but I'm not a fan. Any sane text editor can show you the extent of a block. Weirdly enough, there's a pretty complete CSV parser in [a VB.Net assembly](http://msdn.microsoft.com/en-us/library/microsoft.visualbasic.fileio.textfieldparser.aspx). I don't know what differences of opinion left that stuck there, but you can reference the assembly in C#. Your parsing likely isn't complex enough to merit switching, but it's good to know that it's there.
Just my $0.02, don't take it as anything definitive: * You should specify the visibility (public, protected, private, etc) of your classes/methods, even if they are not required. * Any utility methods used only by that class should be private (encapsulation) * Commenting the closing braces causes more clutter and confusion than it solves, excepting in the case of VERY large blocks that span several pages. But in a modern IDE is still unnecessary. * I prefer not to use using statements in the manner that you have, as it creates a deep hierarchy of scope brackets that is not needed. * Just a matter of style, but your mixing of if...else statements with and without brackets in the same statement is somewhat confusing * More comments! Describe what is going on, and what methods do. Really, those are just causual observations, nothing major or critical here. Very good code, fairly clean. The biggest thing is just better use of whitespace and more comments.
Thanks for the response! &gt;I prefer not to use using statements in the manner that you have, as it creates a deep hierarchy of scope brackets that is not needed. I'd never really used StreamWriter before and that was how the MSDN page I saw has it laid out. It didn't make much sense to me, I'd only seen the using keyword with namespaces. I'm glad you said this though, I didn't like setting it up like that either. I'll research some more and rewrite that method. 
I appreciate the reply, this is great info. I didn't know a Path class existed, that would have made this a lot easier, hehe. Thanks again!
Main comments: 1. Use better Comments: Comments (if used, will elaborate later) should explain the logic of the program. A "//end of using" doesn't help. 2. User interaction especially user input for a smallish program should be isolated to a single method and not distributed throughout the code. 3. Methods should not output to user to display their status (Logging to console is fine for simple programs) but Main should be the one doing this work Additional stuff: 1. Try to write unit tests for your methods. 2. Try to make method/variable names explanatory enough so you can avoid using comments :) ... BDD (Behavioral driven development)
Despite those great advices, you should know about [/r/reviewmycode](http://www.reddit.com/r/reviewmycode) 
Ditto on the closing comments. If you're writing blocks that are long enough that those comments clarify things, then you REALLY need to break things up.
The jist I get from it, is that the using statement automatically calls dispose() on the object when it gets to the closing bracket. So you should be able to ditch the using statement and just add myStreamReader.dispose(); where the closing bracket would be. I believe thats how it works, I haven't used a stream reader in awhile.
Thanks! Can you elaborate on #3 above please?
Frontpaged, thanks!
I typically don't use closing comments, I just seemed to have a ton of closing braces in this code and was trying this to see if it improved readability, which it didn't.
--- In GetYear() while (!ValidateSearchYear(searchYear)); In ValidateYear() Console.WriteLine("Invalid year"); return false; -- As your code grows and you have n number of lines on your Console you'll have a hard time locating all the Console.Writeline embedded across your util functions. Try to move all the Console.Writeline closer to parent functions (if not Main) So say do while (!ValidateSearchYear(searchYear)) { WriteLine("Invalid Year"); } in GetYear() 
Not programming style as such, but I think it would be far more useful to have the month/year as command line options. It would simplify the code somewhat and also allow the program to be run on a schedule. A couple of other issues: * The check for an existing directory is performed per-file in that directory, not once per directory. Move the check outside the loop. * You're opening and closing the combined CSV many times, which will be fairly slow - try to open it once and keep it open.
Thanks for going over it, I'll fix these and add command line arguments. This would be a great thing to schedule now that you mention it.
"Back" of the list? List.Append?
Okay, I'm not getting this. The Add() method appends to the end of the list collection. Iterating the list with a for/foreach, will show you this. Insert(0, obj) adds to the front and Add() will append to the back, right? 
Did you read http://code.reddit.com/wiki/API#LoggingIn ? You'll probably want a JSON deserialiser to make things a little more simple, first. 
Question, why is a JSON deserialiser required? Is there a way to just transfer the data to a string and parse out the bit required from the string itself? Does JSON have some sort of encoding which might explain why we can't see the modhash in plain text?
&gt;we So this account represents more than one person? JSON is just a Javascript-friendly way of encoding objects. The modhash is only available when you do the first request for a page, it seems. Log in using something like http://stackoverflow.com/questions/571964/automatic-cookie-handling-c-net-httpwebrequesthttpwebresponse, then see if the pages you request contain the modhash. 
Generally it is nicer to pull the JSON into a native datatype as opposed to pissing around parsing the string yourself.
&gt; So this account represents more than one person? Didn't mean to post "we". Up on a late night tinkering with C#. I posted this thread around 2-3 AM and the last comment 4 hours ago around 5 AM so I'm a little bit affected from fatigue lol. Will post back results with the cookiecontainer.
This isn't really new. Its basic C like semantics when an assignment operation is evaluated.
About #1, the best advice I've heard about that is "explain *why* you do things and not *what* your are doing". How you structure you code into methods and good variable naming should explain what you are doing. The better the code, the less comments it needs.
I disagree on removing the "using" blocks. They guarantee that the stream is closed no matter what happens in your code (exception or code path that doesn't calls the Dispose()/Close() method explicitly). 
Thats what I said in Additional stuff, but that's a bit advanced for a beginner programmer coz naming is a hard problem but good thing to keep in mind
For starters I try to tell people to cut out using acronyms in variable and method names. Who cares how long it is, with intellisense you'll never type the whole thing anyway but at least other people will know what it means. I've worked in a place where they used the same damn 3-letter acronym for several completely different business things, it was horrible. I will make exceptions for *very* common things like DB, or tech-related acronyms like WPF, WCF...
This is in eclipse and was incredibly useful when constructing long string segments.
&gt; Microsoft Windows is by large the most popular and used operating system around the globe Its arrogant but its accurate isn't it? Do you know any source that has reasonably uptodate stats on the subject? I'd like to know myself.
A large amount of users use linux, why make them feel small? Even if it is the most used *desktop* operating system, popularity is subjective.
Yeah, I'm still looking for hard stats to get a more accurate picture.
Think about the selection bias on any way of getting those stats. The best thing would probably be if google did a breakdown of requests by user agent (as google.com is used across the board by people of many different technical abilities). &amp;&amp; on the basis of by IP, not by request, perhaps.
I don't think just putting a lock in the property get/set will do what you think it does, if you want to manipulate the array, you need to put the lock around the block of code you want to do the modification, not just in a property get/set. If it's something simple you're trying to do, have you considered the BackgroundWorker? Edit: Although I've just noticed that you're actually just replacing the array wholesale, so the bit about locking might be moot. Although you do want to be careful that the array doesn't get swapped out mid loop (of course wouldn't be a problem if the loop works off a local reference to the array (i.e. don't use the 'property' version of the bool array, take the reference before entering the loop and use that reference) (such as you already are doing in the Update function!) Edit2: In your SynchedUpdateBooleanValues, you do realise that you're taking a reference to the real array and manipulating it? You call the variable tempArray, but it's not a copy, so there's no point setting it back to the property as you are doing in the last line of code. I personally think you should create a new array and swap it out so that the rendering thread doesn't get interfered with. In which case you won't need the locking code, as it won't be possible to read the pointer to the array while that pointer is in the process of being redirected to the new array.
Hmm, I guess it slipped my mind that I was getting a reference to the array and not a copy. I had intended to lock, get a copy and then release, and then do the same when updating the value later. What about the code that appears in the UpdateBooleanValues method. Is this going to lead to lead to nastiness later? I'm not really sure what happens to a thread after it's run it's delegate method, is it unloaded automatically?
Well if you abort a thread I'd imagine you could end up with a partial update (assuming you don't go down the "create a new array" route), but other than that it's fine to just create another and let the other one disappear (at least that's what I've done in one of my projects!!)
Excellent, thanks for you help!
Brief recommendations: Use the ThreadPool. Spinning up a real thread per game object is likely more expensive than you're expecting. Use the Interlocked class to safely record if the background thread is running, so you don't run it twice. Make a private int field, and atomically update it from 0 to 1 and look at the results of the update to determine if it was already 1. Common technique. Copying small arrays isn't expensive, but don't do it often or on long arrays. If there are common operations on that results array, then expose those methods, not the array. You can lock far more intelligently if the array stays private.
I've noticed that there appears to be a connection between dynamic typing and Test Driving Development. For example, Ruby/Python enthusiasts are always TDD enthusiasts. It appears to me that dynamic typing makes it more fun to write tests. Does that mean the new "dynamic" keyword will make Test Driving Development more attractive in C# now?
There is a vim plugin(probably emulation and not actual vim) but its expensive.
I believe Java has a pretty strong TDD spirit as well. I don't particularly think dynamic types will help testing c#. I believe it was mainly introduced to simplify hooking c# upto dynamic languages running on .net and various things such as com that better fit dynamic type system.
I'd probably do it in a similar way (with a ThreadPool), but using a wait handle instead of an atomically updated int field. It just feels like less could go wrong.
Well, they're synchronization primitives with different purposes. Atomic flags make sense if you never plan on blocking, and in general it is better if you can express your synchronization correctly without locks or waits. For everything else, there are monitors and wait handles.
I'm a lone developer in a tech company, and I'm getting myself up to date/speed with 3.5/4.0. I need tips regarding books/websites/tutorials, best practices and how-tos. I'm fairly confident with 2.0, but I haven't used it for a while, so I'm getting a bit rusty. This might even help others. 
Off the top of my head, I'd recommend looking up lambdas ( the =&gt; symbol) and LINQ as it'll save you plenty of typing. Also, take a look at the new Tuple type and the dynamic keyword.
To extend what maskaler suggested, learn about lambda functions. Read about functional programming, anonymous methods, anonymous delegates. All these things lead to LINQ. I'm sorry I don't have specific links right now but if you know what to search for, you'll find plenty of good blogs.
1. Pro C# 2008 (Apress) has a chapter dedicated to the new features of C# 3.0 and it is easy to understand; of course the Pro C# 2010 will have new stuff in .NET 4.0 2. For a deeper look at C#, you can look at C# in Depth 2nd Edition by Jon Skeet - I have gone through the first few chapters and I enjoyed it so far 3. LINQ as mentioned before (plus Pro C# books has a chapter on linq as well or you can get the Pro LINQ book). You may not even need a book for LINQ as MS has some decent sample code out (search for 101 Linq Examples)
I do a lot of multi threaded progamming and one of the things I hated the Begin/End patterns is how unreadable my code became. After a while it becomes really hard to follow a program's logic with all the jumps to different places. 
I like it a lot, but possibly for a completely narcissistic reason. I wrote a set of libraries to handle async multithreading for a corner of the application that I wrote that worked like a (way uglier, invariably less performant) version of what they came up with once upon a time so... a) the concept/execution makes sense to me b) the fact that super-smarties like Mr. Lippert did the same thing that I did (OK, way better than I did) makes me feel borderline smart
Do you have some sample code? Interested in seeing how "ugly" your implementation was. I know some other person tried to do the something similar using *yield*.
What pattern would you use? I'm having that issue right now with code readability in a very threaded app.
Wish I could help you there but I stuck with the Begin/End pattern because that's currently the most accepted pattern. I could have come up with something clever but ironically that would have made me code harder to maintain. Most people are use to the Begin/End paridigm.
Huzaah! I have been working hard with ansync, and some of the confusion that comes to play. I is nice to see something other than my hack-up of a delegate thread creator
[here's](http://twoguysfromkc.com/?p=5) a good short example i wrote of using a delegate to access a control from another thread.
[Codeproject](http://www.codeproject.com/KB/cs/delegates-part1.aspx) is a great resource for .net code examples.
Learn the fundamentals rather than examples. A delegate is two references: one to a method, and one to the context in which that method is executed. The typical execution context is the "this" reference of an instance method, or null for a static method. A delegate is invoked by passing in parameters like a normal method. An event is just (bad) compiler sugar around a multicast delegate, which lets you add and remove handlers, or invoke all handlers.
If you are using .net 3.5 or later you should consider using Action&lt;&gt;, Func&lt;&gt; and Expression&lt;&gt; along with the lambda syntax unless you really feel the need to create events and event handlers. It is arguable that C# events with delegates are a bit of a poor abstraction for eventing. Depending on the context of your situation you may want to look at patterns like Event Aggregator, or Event Bus to communicate events between parts of your system.
I almost cried while watching the PDC video where Anders Hejlsberg presented this. Almost as much as I almost cry while debugging async application built using current methods :) 
hm... reverse engineering to avoid IntelliSense? 
How do you mean? Intellisense only tells you what events can occur, it doesn't tell you when the event is raised or what state the arguments had at that time
well, the description says "it's a massive pain to trawl through documentation to work out what events are available". I usually use IntelliSense to lookup what is available. To lookup what event was raised, I use "debugging". I'm pretty sure there are some cases where it can be usefull, but I don't know any. Would it be possible to tell me an example where this tool is better than IntelliSense + Debugging in VS?
No you're correct. There's nothing here that you can't do with Visual Studio. It's just a tool to make life a bit easier. Essentially this is equivalent to going through each event in interllisense, writing an event handler, with a dummy line of code and a breakpoint, and then hooking them all up manually. Where it really comes in handy is with user controls, you don't have to set a breakpoint and interrupt execution whilst you're working out what's being fired and with what values - you can carry on playing with the control and then go back at a later point to see what got fired. I'm also very new to WPF (as in have a few weeks experience), and have to use it for work now. So it's been a handy learning aid - with complex controls like infragistics xamDataGrid the event model is non trivial 
hm... just looked up what "infragistics xamDataGrid " is.. hm... never ever bought a controll... always build on my own.
Without looking into locking and mutexes and that stuff, one suggestion I have might be to have an 'Add' function, that will add an amount to your number within the class itself. That way you can do all the locking in the owner class, if you have multi-threading issues.
Good point. The actual code is different though, there is no currentNumber +=2. The currentNumber changes according to logic found in the presentation layer and not in the provider class which is a layer much higher.
Tell us something about your thread structure. * How many threads run concurrently? * Which types of different threads are there - what do they do? * How long does each of the threads execute before being terminated?
Look at the Interlocked class. Specifically, Interlocked.Increment can be used to atomically add to a value, or Interlocked.Exchange can be used to atomically switch a value. Interlocked.CompareExchange is the prototypical atomic compare-and-swap. However, your question indicates a few troubling things. First, plan your threading better, so that threads only communicate and synchronize when it is absolutely essential. If your threads have to talk a lot, then you've probably done a bad job parallelizing the work, and should consider a model which better encapsulates the computation in a single thread. Second, you're probably making determinations about performance without measuring anything. That's probably driving you to parallelize something that doesn't need it, and making you afraid of synchronization when you shouldn't be. Come up with actual performance requirements and measure against them. You'll probably find that a naive implementation is plenty fast, and save a bunch of time and headache. You usually only need to resort to hardware threads in two scenarios: distributing a very expensive computation across multiple cores, and receiving IO callbacks. I've seen several sorta-smart developers absolutely destroy their code with unnecessary threading and the resulting synchronization nightmare, all because they blindly accepted that it was "faster". It wasn't. If everything takes a trivial amount of time or is bound by memory-access, then multithreading really won't help you much. And if you don't know if you're memory-access-bound, IO-bound, or CPU-bound, then find out through testing before ruining your project with premature optimizations.
http://stackoverflow.com/questions/687626/the-purpose-of-delegates
Ok I have to be honest, I'm drunk right now but I will try to address your questions. I don't really need to add to currentNumber, the code above is just an example i.e. currentNumber +=2. I have a thread writing and reading from a serial port that controls line passing from an electronic device. I have events that change the currentNumber as well as threads that update the UI. I understand that this may be too many threads but I'm not really doing it for performance gains, it's a necessity. Anyways my question isn't really concerning the code I have now, I'm not looking for a solution that'll fix my problem without me gaining an overall understanding of how threading works. I read somewhere that any write method that alters a variable which is shared between threads should be locked. The problem is that if one thread gains a lock, changes the value and then releases it, another thread can access and change it without the first function knowing. The only way around this according to my limited understanding is to lock the entire function but this would be devastating to performance.
If your provider class is not thread safe to begin with, anything you do to prevent issues in your user class will only be half reliable. Better to make a SetNumber implementation in provider that locks while in use. That being said, you can use a function in your user class like: static int lockvar = 0; public static void setNumberSafely(int numberToSet) { lock(lockvar) { provider.SetNumber(numberToSet); } } 
The problem with that is after setnumber is finished the thread releases the lock and and it can be called by another thread. So for example if I have a long function and in the beginning and then end provider.SetNumber is called. In the beginning I call setNumber, it is locked but then I release the lock, by the time I get to the second call of setNumber, currentNumber could have been altered without me knowing by another thread. 
Yeah, there are multiple ways around that, but in this case you may just want to put a lock around the entire functions you're writing - this way neither can execute while the other is running...
Well, you don't have to lock an entire method. Just carefully define your shared state, and use the C# lock statement around access to that shared state. If all you're doing in the lock is changing variable references or some light arithmetic, the overhead is quite minimal. Since you're writing a windows app, a reasonable suggestion would be to send the serial port data to the UI thread using Control.BeginInvoke calls, and then performing all of the updates to shared state and the UI from that thread. Test it for yourself, but I'd wager that your UI will remain perfectly responsive. But again, never just assume you know what will be good or bad for performance, when it's a simple thing to measure. Most programmers don't have an intuitive sense of the relative cost of operations (CPU instruction, memory access, system calls, disk or port IO) 
I think the bool is fine... you may also consider creating a static form, but hide it until the button is clicked. Then, either change the closing behavior of that form to hide, or recreate the form (only if isdisposed()) if necessary.
Why don't you disable the button when it's clicked and enable it back when the second form closes? Or just make the second form Modal.
A new instance of form2 each time the button is clicked is fine except if you want to keep its state when it reopens. In that case, you should keep an instance of form2 somewhere and call Show() (*or ShowDialog(form1Instance) if you want it modal*) when your button is clicked &amp; Hide() when the Closing/Closed event of form2 is raised.
Assuming the second window isn't modal, one problem is that if the user "loses" the window they'll think your application is borked. Better to let them click it again and just have that focus your secondary window.
Have the button event handler call ShowDialog() instead of Show(). ShowDialog causes the newly opened form to occur on top of the parent form and not allow the user to take any action on the parent form. A second more complicated action would be to have a variable bool on the first form that you mark as true when the form is open. And then pass the second form a [FormClosing](http://msdn.microsoft.com/en-us/library/system.windows.forms.form.formclosing.aspx) event handler. Kind of like this: public class Form1 : Form { // Variable to mark if Form2 is open private bool _form2_open; public void btnShowForm2_Click(object sender, EventArgs e) { // Only open Form2 if it isn't currently open if (!_form2_open) { // Mark the form as open _form2_open = true; // Pass Form2 the FormClosing event handler Form2 f2 = new Form2(new FormClosingEventHandler(FormClosing)); // Show the form f2.Show(); } } public void FormClosing(object sender, FormClosingEventArgs e) { // Mark form2 as closed _form2_open = false; } } public class Form2 : Form { public Form2(FormClosingEventHandler fceh) { // Add the passed in event handler to the FormClosing of Form2 this.FormClosing += fceh; } }
house the form as a field on the calling form YourForm yourForm = null; Then when you want to show it, if(yourForm==null) { yourForm=new YourForm(controller); yourForm.ShowDialog(); }
The quickest way to Outsource and Hire skilled Csharp developers.Csharp development service avalible for hiring affordable price.For the first time,new breakthrough system, ExpertsFromIndia reveals how to outsource Csharp developers at a reasonable price.Double your money back if you don't outsource with our amazing system
You know the name of the form. Use reflection to see whether there are any instances of that form currently loaded. You save the global. I can, if asked, provide code. (in transit, no dev environment)
Or ctrl+m ctrl+o, depends on your environment.
Just an aside but if you are resorting to heavy use of regions and/or need to collapse methods to keep the code organized and readable you may just have classes and methods that are way too large. See [Clean Code](http://www.amazon.ca/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) if that is the case.
Ctrl + M,L will *toggle* collapse on *everything* (including namespaces and classes), whereas Ctrl + M,O will only collapse (not toggle), and only on regions, methods, properties and documentation comments.
I would need to see an example of their methods to want to buy a book on this.
It's a pretty well reputed book, and I'm sure you can find samples from it. Feel free to google it.
In decades of development, I've never heard of this book. My code is pretty clean IMO. Still, I'm interested, which is why I was hoping to see an example of what this book suggests.
Ah. That's good to know :)
I would tend to disagree. In the 'modern' C# paradigms (wpf, silverlight etc.) there can be a lot of extra code - even one 'simple' dependency property can have 4 or 5 blocks. Liberal use of regions and collapse become a necessity for code readability. At the same time, writing clean code becomes even more important, so the other half of your point is still valid.
By no means is this complete, it would be nice to get a little critique, so as if i'm going down the wrong patch with this to stop. 
Hmm, nice skeleton, but seriously empty... You should post once you have some actual original content... :)
My only concern is what do you plan to offer than is better then the tutorials and help provided on the proper XNA site?
I like the skeleton, I'd put a margin around the text though. It looks crammed against the border.
Never post a website for review until it's actually done. It won't represent your best work and might even hurt your reputation a little. Don't add links to a production site until they link to something, even if that something is a "Coming Soon" page, it's better than just linking to #. Clicking a link to have nothing happen frustrates users. There is a *lot* of wasted space in this design. only about 1/6 of the screen is usable space. I took a [screenshot and added the rest of my critiques](http://i.imgur.com/m2Sp5.png)... I hope it helps.
that's brilliant, it's all dynamically updated via a control panel I made so the divs automatically resize up to full capacity thus negating the 20% margins but i'll have a play and reduce the space. The link issue, I would never have thought of so will definately fix this.
Not a lot except I intend to provide more basic introductions, ie aimed at completely new users and some shader tutorials of which there is not a lot of info on the net currently.
Not a lot except I intend to provide more basic introductions, ie aimed at completely new users and some shader tutorials of which there is not a lot of info on the net currently.
Thanks, I'll do that.
I will do, I have got some useful feedback so will be following it and then posting again when I'm at a point where it can be considered complete :)
Well how basic to you plan on going? Microsoft already does from rendering cornflower blue all the way to lighting and shadows, however the higher end is a little sparse. People can find 100's of early starting things on the internet, [even Microsoft have some basic video tutorials that guide you from cornflower blue to a entire 2d spaceship game...](http://create.msdn.com/en-US/education/tutorial/2dgame/getting_started) Personally I would focus mainly (if not totally) on high end stuff like shaders and more advanced effects... Everything else has pretty much been done, there are sooooooooo many basic introduction tutorials since the windows 7 phone came out. So basicly I don't really think that there is much point in doing anything very basic as it will be a drop in a massive lake. Some shader and more advanced things and you may actually get many people coming to your site. Also all these new WP7 and other developers using all these new newbie tutorials are going to want something more soon, I would cater for that growing croud rather than the crowd that will be very focused on going though the official tutorials anyways...
Makes total sense, One thing I did notice a gap for was decent 2d tile engine tutorials from start to finish for true isometric engines, I'm currently working on an in-depth tutorial for this now unless you know of a website which has this currently then may abandon this and start the more advanced stuff. Thanks.
Upvoted because it takes balls to put your work up for critique. Good luck, I think you're off to an okay start.
Actually I agree, I have never seen a tutorial on an isometric tile engine. Sounds good.
Recursion is not needed and this can be solved simply with a for loop.
pseudocode it then. please? Im not getting how to handle the generation of the sequence. I can do the evaluting the even numbers and summation myself. 
Hiya. See below for pseudo code. fib1 = 1 fib2 = 2 fib = 3 tally = 2 while fib &lt; 4000000 if fib is even tally = tally + fib fib1 = fib2 fib2 = fib fib = fib1 + fib2 print tally
Thanks. Ill report back. For a sense of closure
&gt; 9 days ago Thanks. Ill report back. For a sense of closure
I prefer messaged based concurrency (retlang) it's simpler to understand and debug.
I used Ionic.Zlib library - it's fully managed.
By sheer coincidence I was about to sit down and work my way through some problems. Including this one. Coding isnt my job you'll be glad to hear its a hobby. 
Thanks for the heads-up! In the meantime, I managed to use [DeflateStream](http://pastebin.com/62JCDHS9) to do what I wanted. Memory streams and stream readers look a bit clunky to me, so I may have to revisit the code soon. In which case, I'll try zlib1.dll again (for learning purposes) or use Ionic. Cheers!
I did this problem in C, and finishing it was a very rewarding feeling ^^ Lemme know if you need help, or want to look at my source.
Style: * Avoid unnecessary instances. A class that doesn't contain any meaningful state or inheritance, but rather is just a collection of methods should probably be made static. * C# typically CamelCases identifiers, with classes and methods starting with a capital letter. Parameters and local variables typically start with a lower case letter, and member variables usually start with an underscore. Plenty of wiggle room, but that's a pretty normal starting spot. Functionality: * The FileStream constructor has options for letting you specify a variety of modes. Limiting the file to read access and adding the sequential-scan flag would seem appropriate. * You don't need to get the file length from FileInfo. A FileStream can tell you the length. * Seeking the filestream to the position you want (2 bytes ahead) is a more "normal" approach, and could have a tiny performance benefit. * When doing stream I/O, it is often desirable to hand off a stream whenever possible. This method is fine for small files, but inappropriate for anything large, since everything gets read and copied a few times. Streams let the receiver choose how to read/buffer things, pick character encodings, etc. * I'm pretty sure that StreamReader would happily work on the DeflateStream, without the need to copy it to a MemoryStream. So if all you want is a string version, I think you could skip that step. Hope that helps. If the first code I'd written worked that well, I'd be a way better dude.
Wow, that's really cool, thanks for taking the time! I'm going to clean my code and see what happens. You're right about the 2 ReadByte(), seeking to a new position would've been cleaner. Reason it was in there was to remind me to do this: inFile.Read(Header,0,6); if (!Header.SequenceEqual(MagicArray)) { Console.WriteLine("Not a valid file"); return null; } (read the header, and compare to a magic array to identify valid image files), although... I don't like having multiple return points in a method, so maybe use some goto (coming from a heavy C background)? I'll worry about it later, I need to read all the info I need first :-) **Edit** &gt; I'm pretty sure that StreamReader would happily work on the DeflateStream, without the need to copy it to a MemoryStream. So if all you want is a string version, I think you could skip that step. Done! using (DeflateStream Decompress = new DeflateStream(inFile, CompressionMode.Decompress)) { var sr = new StreamReader(Decompress); output = sr.ReadToEnd(); } return output; 
Sorry for the delay guys. Had real work to do (not to say programming isnt real work but I mean work to get paid work rather than work I do for fun). Got it in one try. Thanks for the help. 
Sorry for the delay guys. Had real work to do (not to say programming isnt real work but I mean work to get paid work rather than work I do for fun). Got it in one try. Thanks for the help. 
And special thanks for the guy with the pseudo code. Helped me alot. 
I haven't run into this issue, but what happens when you try return COMClass.Func(ref StringArray as object); ? I'm not sure if you can combine a ref and a type change like that, though.
You can't: [WebMethod(EnableSession=true)] public int WSFunc(string[] StringArray){ return COMClass.Func(ref (object)StringArr); } ... Build error: A ref or out argument must be an assignable variable (CS1510) I did give this a try before I posted, just forgot that I tried it already. Thanks for helping out.
Figured that might be the case. Not sure if this'll work either (such a kludge): object o = StringArray as object; COMClass.Func(ref o); StringArray = o as string[]; It compiles, but I'm not sure what'll happen when you try to actually run it...
Sadly, that's the same as the second error: object StringArr = (object)StringArr; //returns error 87 in webpage log Also, this produces the same result (error 87 - parameter incorrect): [WebMethod(EnableSession=true)] public string WSFunc(string[] StringArray){ object[] StringObj = new object[StringArray.Length]; for(int i = 0; i &lt; StringArray.Length; i++){ StringObj[i] = StringArray[i]; } object MyString = (object)StringObj; return ComClass.Func(ref MyString); }
Why not ask on stackoverflow.com?
I'll ask there since you mentioned it, but I like Reddit users.
Do you have ComClass.Func and ComClass.IFunc?
ComClass.Func is an example function name. I don't control the code for it. I'm finding out that it may have something to do with Interop Marshalling, meaning I'm attempting to make a cross-apartment COM call by passing in unmarshalled variables. This website explains the idea, but I haven't gotten to a solution yet. http://msdn.microsoft.com/en-us/library/aa720205\(v=vs.71\).aspx
There is a fair amount of crossover :-)
Your COM method might not be automation compatible. Meaning it's signature contains a parameter it can't account for properly. This is usually because the COM layer doesn't know what size to make a buffer. Managed code like C# has all sorts of niceties to manage buffering strings and the like. In native languages, the code generally needs to know how "large" you're going to make an object like an array. Since we can't really see the C++ code or whatever you're calling, I'm purely speculating, but generally when you see this behavior, that's what is going on. EDIT: I butchered that explanation, but hopefully you catch my meaning.
Thanks. I think I understand your meaning. The COM object is currently in use with an ASP classic website that I'm converting to ASP.Net C#. I'm aware of the whole apartment format, but I'm not aware of all of the limitations and workarounds that I need to perform. I'll be looking into it today.
Unfortunately most people don't understand that clean code is really about design. I am not a fan of regions. I have a macro to remove them from code I work on. If the block is too big the it needs to be refactored.
Hey man, I've done something similar, which you can look at [here](http://pastebin.com/CitCEHbX). Make sure you have the ACE OLEDB engine installed, which you should have if you have Office 2010 installed on your machine. That myDataTable is a DataTable that will be populated with all the stuff from the Excel file. Hope this helps.
Can't give you any help with some look at your code. How are you tying to read the cell value? [You would do it generally something like this.](http://www.codeproject.com/KB/miscctrl/Excel_data_access.aspx) [Maybe you're having an issue that needs some registry tweaks?](http://www.revenmerchantservices.com/post/2009/08/08/c-read-excel-xlsx-2007.aspx) [You could try this free library to read XLS and XLSX files from .net.](http://sourceforge.net/projects/koogra/)
http://pastebin.com/ddGKvtv0
Feel free to make use of this helper class I wrote. http://pastebin.com/UW6L1hdx
Working with creating office documents from scratch, why not un-archive the thing and read XML straight up? If you unzip it, head to archive/xl/sharedStrings.xml and read values from there. Look in the worksheet directory to get the sheets themselves. 
Probably already moved on, but [this](http://scottonwriting.net/sowblog/default.aspx) was posted recently, talking about [NPOI](http://npoi.codeplex.com/)
Ctrl-L eats lines. wtf? why can't this be a single key combo instead of a-&gt;b. eh, I'll just use the mouse. ...waiting for damnation...
As a matter of productivity if I have the option to replace a default/built-in diff tool, I replace it with WinMerge Christ..that kinda sounded like the Dos Equis guy.
I've found in the last few weeks that VS2010's default diff/merge tool isn't fantastic when it comes to merging, WinMerge just feels 'right' now and anything else doesn't seem up to scratch.
I use p4merge myself with ankhsvn or visualhg. For TFS I found this old blog post, maybe you'll like it too: http://blogs.infosupport.com/blogs/waldom/archive/2009/11/30/merging-comparing-in-visual-studio-2008-and-tfs-with-p4merge.aspx
I'm setting this up at work. Thanks!
I prefer [Beyond Compare](http://www.scootersoftware.com/index.php) for merging myself, so I haven't really seen the one in VS much. Is it really that bad?
Upvote for p4merge.
It's usable. I use TortoiseSVN/TortoiseHg a lot with other projects and have both set up to use WinMerge, so it keeps things a bit more consistent for me.
p4merge looks sweet, I'm liking the image diffing features.
go singleton.
My advice is to pick some sort of advanced project you'd be interested in writing yourself, something above your level but understandable. Then use a mix of google and books to push through it. If you do prefer books, I think C# in a nutshell, published by Oreilly is an excellent reference. It's more solid code and examples than walkthroughs though.
Probably a good shout! I do have a couple of projects in mind, things that would even possibly be useful to me/others. It's just kinda daunting to go from full walkthroughs which require basically no ability whatsoever (though I do always go back through without the walkthrough the next day to check it went in) to doing something where I have to make all the decisions myself, for better or worse!
Oh wow... 10 years on the internet and I have never seen that website before. I'm terrible. Thanks! :)
Start with a console app to learn the basic language features. That way you don't get bogged down with a bunch of complicated UI libraries. Then move on to WPF/Silverlight and/or XNA if you're so inclined to make a 'real' app. I highly recommend making a game, since this will keep you interested and you'll touch on a lot of useful language features (iterators, generics, lambdas, etc).
What I found though, is your first, second and maybe all your jobs will throw you into this situation. You flounder and try to catch up, and you'll learn more than you will in any job where you're comfortable. It's a preference as well.
You love problem solving, you've some experience with c++ and you've already installed c# express. I can suggest you http://langref.org/ and http://rosettacode.org/wiki/Main_Page Enjoy :)
C# is a fucking huge language, feature wise. It's easier to answer questions in a 'how do i' format.
HTMLAgilityPack should help you: http://htmlagilitypack.codeplex.com/ Gives you a LINQ-like interface to query elements in HTML.
Write code and read other peoples code.
Bullshit. C# is fairly simple feature wise. Are you talking about the supporting libraries/frameworks?
delegates, properties, LINQ, partial classes, lambda expressions, dynamic keyword, in addition to the standard library. 
Since C# is inescapably linked to .net, learning C# as a language is more about learning the .net landscape and all of the various frameworks that go hand-in-hand with it. If you already know C++, then the basics of the language syntax will be pretty familiar. As someone else mentioned, I would decide on a project first and then try to implement it. Stackoverflow is the best place to search for question specific info, but a book will often walk you through a simple project step-by-step.
Check out [this](http://www.reddit.com/r/learnprogramming/comments/isyjc/new_to_c/), [this](http://www.reddit.com/r/learnprogramming/comments/irdfd/learning_c_and_aspnet_where_to_start/), and [this](http://www.reddit.com/r/learnprogramming/comments/iqjll/i_need_to_relearn_c_as_quickly_as_possible_can/). There's tons of books on C#. I personally like [Introducing Visual C# 2010](http://www.amazon.com/Introducing-Visual-2010-Experts-Voice/dp/1430231718/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1312381021&amp;sr=1-1) from Apress and [C# 4.0 in a Nutshell](http://www.amazon.com/C-4-0-Nutshell-Definitive-Reference/dp/0596800959/ref=sr_1_4?s=books&amp;ie=UTF8&amp;qid=1312380999&amp;sr=1-4) from O'Reilly. The former does a nice job covering both the C# language and the most important parts of the .NET framework, then gives a brief intro on the different UI options available. The latter skips the UI stuff, but covers some advanced topics a bit more in-depth. A lot of people seem to like Apress's [Pro C#](http://www.amazon.com/2010-NET-Platform-Andrew-Troelsen/dp/1430225491/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1312380999&amp;sr=1-1), but I didn't care for it. Also, check out the tutorials on [BlackWasp](http://www.blackwasp.co.uk/). After covering all of that stuff, figure out what you want to do and go from there. For Windows development, learn Win Forms and WPF. For web development, look into Web Forms, MVC, and Silverlight. For web services, learn WCF. Then take on a project or two, read articles, etc.
I'd like to point out my favorite book. I dont have alot of time to go into detail right now, but check out the reviews on amazon. They say pretty much everything im thinking of. http://www.amazon.com/Applied-Microsoft-NET-Framework-Programming/dp/0735614229 
I think more C# programmers would prefer the code to look more like this. [Reformatted](http://pastebin.com/BtUxgHWR)
Wow, thanks mate! I haven't studied C# as hard as I should have, so seeing your response is a welcome kick in the butt. Have a nice week-end!
Oh no it's fine, just preference. There's many ways to format code; some people just prefer certain formatting styles.; to certain degrees. For instance, most people would agree it's better to make that method static (it doesn't really fit as an instance method; what state does MyReader hold / manipulate?), although the changes to var aren't as accepted (I don't see the point in X foo = new X(...), especially if X is widely-used).
Thanks, all taken on board, I really need to look into that little project again. All part of my grand master plan to learning "marketable skills" :-)
This is... eccentric as hell. I kinda dig it. It's like Aphex Twin or David Lynch drawing comics about a particular framework.
The 8/8/11 one cracked me up.
Check out these (same series) for good explanations of some of the more complicated language features :) **Demystifying C#** [Implicity typed local variables](http://blah.winsmarts.com/2006/05/17/demystifying-c-30--part-1-implicitly-typed-local-variables-var.aspx) [Anonymous types](http://blah.winsmarts.com/2006/05/17/demystifying-c-30--part-2-anonymous-types.aspx) [Extension methods](http://blah.winsmarts.com/2006/05/18/demystifying-c-30--part-3-extension-methods.aspx) [Lambda expressions](http://blah.winsmarts.com/2006/05/19/demystifying-c-30--part-4-lambda-expressions.aspx) [Object and collection initializers](http://blah.winsmarts.com/2006/05/21/demystifying-c-30--part-5-object-and-collection-initializers.aspx) [LINQ query expression translation](http://blah.winsmarts.com/2006/05/21/demystifying-c-30--part-6-linq-query-expression-translation-to-c-30.aspx)
This might help: http://pastebin.com/sgrCBhhB I've used this solution many times and it gets the job done. It uses the WinAPI for everything. 
It's things like this that I'm glad I went the C# route. Outside of MS Office interops and the random callback function, I've had little use for the raw guts of C#, it's been mainly business logic. But to know that this level of control is possible without entering unsafe space is awesome.
Just out of curiosity, how come when you do: if (typeof(TA) == typeof(int) &amp;&amp; typeof(TB) == typeof(int)) You don't do: if (TA is int &amp;&amp; TB is int) Is this typically frowned upon, for better code readability, preference...? 
The 'typeof' operator and 'is' do different things. The 'is' operator will return true if the left operand can be cast to the type of the right operand. The 'typeof' operator returns the declared type of the variable. For example, suppose I have two classes: 'Person' and 'Employee'. 'Employee' is derived from 'Person'. Now lets say I have an appropriately named variable of each type: 'person' and 'employee'. Comparing these variables with 'typeof' will return false, while using 'is' will return true: (typeof(employee) == typeof(person)) == false (employee is person) == true
I have a text box which contains some information such as the handle of a window. I need to parse that text to get the handle and then use the SetWindowPos API. I guess that's not possible so I'll just have to think of some other way to do it..
Unless I'm misunderstanding, you'll need to convert the string to an int and cast to an IntPtr IE: IntPtr handle = (IntPtr) Convert.ToInt32(strHandle); Edit for the example: [DllImport("user32.dll", EntryPoint = "SetWindowPos")] public static extern IntPtr SetWindowPos(IntPtr hWnd, int hWndInsertAfter, int x, int Y, int cx, int cy, int wFlags); const short NOSIZE = 1; const short NOZORDER = 0X4; const int SHOWWINDOW = 0x0040; string strHandle = "920448"; int intHandle = Convert.ToInt32(strHandle); IntPtr handle = (IntPtr)intHandle; if (handle != IntPtr.Zero) SetWindowPos(handle, 0, 500, 200, 0, 0, NOZORDER | NOSIZE | SHOWWINDOW); 
This is just what I was looking for, thank you.
Huh, I didn't know that. Thanks for the clarification!
You will learn the syntax and the tool and those are specific to C# (with lots in common to C++ and Java) but don't forget what you should aim to master is good programming. Good programming is a bit of an art but good object oriented skills will go a long way making you code clear, maintainable and less error-prone. Plus it will be a skill you can take to other languages and tools if/when you need to. So my advise is: learn OOP. Afterwards, start reading about functional programming and you'll be ahead of the curve for the more advanced C# features (think LINQ and the like) plus it will help you in other languages like Javascript. As a more general tip, try to understand what's going on under the hood. Visual Studio is a great tool that does a good work at hiding some complexities.
I can't top ours' comment, but I'd like to stress that you write lots and lots of code. None of my eureka moments came from a book or a tutorial, but rather when I was doing my own projects and solving my own problems.
Thank you, I didn't understand much of what you said (hence completely new to C#) but I'll google it and find out what most of it mean and start coding, finding errors and solving them. =) thanks!
http://csharp.net-tutorials.com/basics/introduction/ You can start by following these, there are other tutorials all over the internet if this is going too fast or too slow for you. 
Oups sorry, I was 10 when I learned Basic with a book so I forget the challenges of starting from scratch. Learn about variables, loops, conditions. Don't forget you are not *just* learning C#, you are learning algorithmics with C#'s syntax. When I went to study computing, the first year they didn't even let us touch a compiler and we learned pseudo-language (basically a programming language that doesn't have a compiler) and wrote algos on paper or on Word to force us to think about the logic we are writting instead of learning a language and doing trial and error with a compiler/debugger. That came later. I work with tools (C# + VS) that didn't even exist when I graduated but when you can write algorithms and do OOP, you then just have to get used to the new tools and syntaxes. Good luck and don't forget: the learning never stops and never will. If you don't like that aspect, there are niches I guess. This is an scientist-artisan's work.
Nice website, just wondering if Express is any different from Visual Studios 2010? Will be using this thread a lot as I go through my course, any help is always appreciated :)
Express is essentially just a stripped-down version of VS. If you're using Ultimate you shouldn't have any problems following an Express tutorial. One of the things included in full versions of VS is a fuller suite of refactor tools. Use them! For instance, hold Ctrl and press R+E while your cursor is on a field to encapsulate it in a public property with premade get and set accessors. Before I learned about this I would always encapsulate manually, it was lame.
Loving that website! Would love more websites where they give you the full code and then explain what each line means/does
That's pretty standard in the beginning of the tutorials, here are some other links from my C# bookmarks. http://www.csharp-station.com/Tutorial.aspx http://www.homeandlearn.co.uk/csharp/csharp.html http://www.functionx.com/csharp/ You can also find videos on Youtube you can follow along with. I did better from the written tutorials though. 
Why not have an singleton variable that is of the type YourForm, then when the button is clicked you either instantiate the form and bring the form to the foreground or just bring it to the foreground.
Totally up to the programmer, both examples get compiled into the same IL code. Personally I like to add all namespaces I use at the top.
If its a one time usage i won't bother referencing the namespace, otherwise yes. It keeps your code nice and clean.
There's no difference. The ONLY thing that I have found different is say you just changed the way you did something or no longer have a dependency on a dll and remove it from the references in the project, you may have to go through a bunch of files and delete the using statement at the top. I find this better than typing it out everywhere though.
There's a handy context menu option in VS 2010. Right click in your using section, and you can sort and refactor usings, which will alphabetize them by top level namespace and prune out any that aren't called in the module. I usually invoke it before I save a file I've been working on, but I think that's more OCD than anything else. I'm guessing the CLR ignores any orphan usings anyway, I could be wrong though, I've never run into it.
It ignores them, unless it's not a valid namespace, which can be caused by old using statements referencing namespaces in a referenced dll that is no longer referenced.
Fuck me, what database are you connecting to? I didn't know oledb data sources were in existence?
Agreed. As an added point, tools like Re# automatically push namespaces up top via using.
Yea....using an access database. It's brutal sometimes.
You poor thing! haha But yeah using the simple namespace declaration is better.
Hey guys, anyone who can help me with this? using System; using System.Collections.Generic; using System.Linq; using System.Text; namespace ConsoleApplication2 { class Program { static void Main(string[] args) { using System; namespace Energiåtgång { class Program { static void main( string[] args ) double kWhPrice, time, effect; string priceString, timeString, effectString, energy, totalCost; Console.write("Hur många watt förbrukar appareten? "); effectString = Console.Readline(); effect = double.Parse(effectString); Console.write("Hur många timmar använda appareten? "); timeString = Console.readline(); time = double.Parse(timeString); Console.Write("Vad är priset per kWh? "); priceString = Console.Readline(); kWhPrice = double.Parse(priceString); energy = time * effect /1000; totalCost = energy * kWhPrice; Console.Writeline("Apparaten förbrukar " + Energy + " kWh"); Console.Writeline() "Kostnaden för användandet blir " + totalCost + " kronor" ); Console.Writeline("Avsluta med Enter"); Console.Readline(); } } } What's wrong?
I don't quite understand your question, but I can tell you this: You can pass the ArrayList to Form2 through an overloaded constructor. That way you can read and write data to it, and still have control over it when you return back to Form1.
Sorry I guess I wasnt be very clear. My two questons are, 1.)how to add data collectd from form1 and pass it to form 2 and 2.) how to start a new thread to open a new form. I'll give the overloaded constructor a try. Thanks for the help.
&gt; 1.)how to add data collectd from form1 and pass it to form 2 How I just showed you! &gt; 2.) how to start a new thread to open a new form. You're doing it correctly. You can also invoke the form in different ways so that it is not a child of the calling form.
I recently did something requiring data being passed between forms and I did most of it with overloaded constructors. However, I used a static/singleton class for data I needed access to across all forms. As to your other question, I used Thread.Start('method_name_here'). Thread.Start('method_name_here'); // Yea, a string and no parens private void method_name_here() { Form myForm = new Form(yourvars, here); myForm.Show(); myForm.BringToFront(); } I was doing a .NET 1.1/.NET CF 1.0 project though so things (syntax/best practices) may have changed.
Sweet. I added another constructor that takes the data that I wanted to send and it worked. It was felt great seeing my list open in a new window. Thanks.
No problem. Are you displaying the data using a GridView?
That is how I wanted to display the data. You just made my google search easier. I wanted a grid view with check boxes next to each item, boxes checked off get copied to new directory.
Yup, thats basically what I did to bring up a new form and it worked like a charm. 
You can easily use an ArrayList as the data source for a GridView. All you have to do is: 1. Have an ArrayList that holds a struct 2. The struct held by the ArrayList should have public members with get and set methods 3. In your form with the GridView, in the constructor, set the ArrayList you passed, and set: GridView.DataSource = someArrayList;
You are saving me so much time. Thanks a lot for the help.
So here's a related question, to anyone who's still reading the thread... What's the best way to open a new form *and* close the form that opened it? i.e.: switch between two forms on button-click? I was playing with this earlier today, and I hid Form1... but when Form2 is closed, Form1 is still running in the background but has no visible window. I can kill Form1 after I call Form2, but then Form2 dies right along with it. Both of these scenarios make sense, but I wanna figure out the best way around this. Thx:)
FUCK YEA downvoted
Ill agree with everyone else that commented. I moved from VB.Net and C++ to c# about 5 years ago. It only took me about 1-2 weeks to fully pick it up. All you have to do is find something that interests you on codeproject. I started off by writing a simple command line program to change file attributes. 
I don't think there is any difference in terms of memory footprint as it will get compiled the same. Personally I only insert a using statement if I'm using that library more than 3 times.
You can have a method in 1 namespace that is named the same as a method in another with the same signature. If that happens you should use the full name in order to avoid the confusion of which method you are accessing.
Why put it in a subreddit? It is not that there is too much traffic on r/csharp ... The top 3 things I see were posted 10/12/17 days ago ...
nope.
I liked it :)
I have been using Murach's C# book and it has been great for me. Comes with all lesson files and everything to get you going. Really has been a GREAT resource for me. Usually I can turn to google for almost anything, but the books structure really did it for me and the explanations they give are great. Highly recommended. PS.. GREAT!
Yo dawg, I heard you like DenialLines, so we put a List&lt;DenialLine&gt; in yo List so you can Denial while you List.
looks like a bug waiting to happen... 
C#? .NET? Yeah, learn about ILSpy and you'll learn to not care about what you distribute due to how transparent everything is (as in, you can't worry about it, it can be very easily obtained). Even hard coded becomes painfully easy (let alone string decompiles work good for that too). I'm assuming it's a MySQL database that gets distributed with the application? I'd generate a unique password on install so that if you do crack the internal password you only have access to your own box anyway instead of a static password across all systems.
C# .NET yes. Every client will connect to the same external MySQL server
&gt;Every client will connect to the same external MySQL server Welp, expect the password to be cracked quickly then (if anyone knows what they're doing), hope they have read only access (and even with that I can DoS your MySQL server no problem). Otherwise I'd write an API front end and make them connect to that with unique credentials. If it's in-house you're ok, if it's a product you sell or give out to multiple clients outside of the business, step back and redesign your security from the ground up, this method is going to leave you wide open for a lot of hurt.
Okay, thank you! :)
Do you have any sort of guides to writing an API front end?
What I would do is keep the client credentials and connection string server side and serve data to the clients via a WCF service, then the clients won't have the credentials on their machine. Plus, you can easily use role based security this way if you needed to. This is super easy in c#, just create the wcf service in the server project, and define all of the needed data retrieval functions and contracts. Then create a client project, right click on "references", select "add service reference" and click discover in the window that comes up. The service in your server project is then added to your client project, all interface and data classes are generated automatically. This is extremely powerful when used with the Entity Framework which works with MySql now.
Wauw thank you! :D I´ll try that out :)
Off the top of my head, nope, but do look up SOAP support in .NET, it's great. If I come up with something after work I'll get you it. :) Edit: WCF services == Microsoft's SOAP, you'll love it. ;)
Thanks :)
[here](http://www.codeproject.com/KB/WCF/WCFandEF.aspx) is a good tutorial on WCF and Entity Framework. I don't think that the data contract stuff is necessary, as I never have done that and it works fine. One thing that took way more time to figure out than it should have, is that if you have relations in your datamodel, you are going to want to turn lazy loading off in your .edmx file. What I found out was, since an object references all of it children (category.products for example) and each child object also references its parent (product.category). It gets stuck in an infinite loop when it tries to serialize the data object. turning lazy loading off and using the .Include() function to get related objects you need fixes this problem (ie. db.categories.Include("products").Where(c=&gt;c.catID == categoryID); works just fine). 
Great, I read it very quickly and will definitely try that out tomorrow! :D
You should be able to use a [CBT hook](http://msdn.microsoft.com/en-us/magazine/cc188966.aspx). You can also use Spy++ to work out which messages you are interested in.
So I've been browsing through various programming subreddits and I came across your puzzle and decided to give a crack at it. So basically, start by making a new Windows Forms Application in Visual Studio. You know the drill. When Visual Studio creates the project, it opens up the designer window for Form1. In the Solution Explorer you can see the Form1.cs files as well as another file 'Program.cs'. Program.cs is pretty basic: using System; using System.Collections.Generic; using System.Linq; using System.Windows.Forms; namespace WindowsFormsApplication1 { static class Program { /// &lt;summary&gt; /// The main entry point for the application. /// &lt;/summary&gt; [STAThread] static void Main() { Application.EnableVisualStyles(); Application.SetCompatibleTextRenderingDefault(false); Application.Run(new Form1()); } } } The line of code I want to draw to your attention is: Application.Run(new Form1()); The Application.Run() function takes a Windows Form (or a class that is derived from a Windows Form) and it opens and executes that particular form. The flow of execution of the Main() function effectively stops while Application.Run() is running. Application.Run() returns when the Form closes. Once that happens, Main() is finished executing and your entire program exits. Simple enough. Now take a look at how I modified Program.cs: using System; using System.Collections.Generic; using System.Linq; using System.Windows.Forms; namespace WindowsFormsApplication1 { static class Program { public static Form NextFormToRun { get; set; } /// &lt;summary&gt; /// The main entry point for the application. /// &lt;/summary&gt; [STAThread] static void Main() { NextFormToRun = null; Application.EnableVisualStyles(); Application.SetCompatibleTextRenderingDefault(false); Application.Run(new Form1()); while (NextFormToRun != null) { Form temp = NextFormToRun; NextFormToRun = null; Application.Run(temp); } } } } I added the public static property Form NextFormToRun. This property serves as a means of letting Main() know which Form to send to Application.Run() once Application.Run() returns. If NextFormToRun is never set to anything but null, when the first call to Application.Run() returns, flow of control simply falls through the loop and the program exits like normal. However, if NextFormToRun is somehow set by another class, that form is passed to a new call to Application.Run() which again doesn't exit until *that* form closes or exits or what have you. That is all well and good, but you are probably wondering how/where to set NextFormToRun. Go ahead and open up the design mode for Form1.cs and add a button to the form. Double click the button to add a callback. Modify Form1.cs in the following way: using System; using System.Collections.Generic; using System.ComponentModel; using System.Data; using System.Drawing; using System.Linq; using System.Text; using System.Windows.Forms; namespace WindowsFormsApplication1 { public partial class Form1 : Form { public Form1() { InitializeComponent(); Text = "ID: = " + this.GetHashCode(); } private void button1_Click(object sender, EventArgs e) { Program.NextFormToRun = new Form1(); this.Close(); } } } Run the program and see what you get. When you click the button the Form closes and a new one pops up. If you click the close button, the form closes a new one does NOT pop up and the program exits. Effectively, when you click the button you are telling Main() 'hey this is a new form to run after I close' and then you close the form. Basically, it's handing flow of control from one form to the next. You can verify that each form is different from the one before it by monitoring the Form1.Text property. Note: In Program.cs, transfering NextFormToRun into the temp variable followed by setting NextFormToRun null is very important in monitoring whether NextFormToRun was set while Application.Run() was executing. If we don't set it to null prior to calling Application.Run(), there will be no way of knowing for sure if NextFormToRun was updated while Application.Run() was running or if NextFormToRun contains old data (ie, the form that just finished running in Application.Run()). 
http://stackoverflow.com/questions/1434524/how-do-i-find-the-position-location-of-a-window-given-a-hwnd-without-nativemeth see the first answer. That will let you get the dimensions of any window. How you acquire the window handle.. http://pinvoke.net/default.aspx/user32/FindWindowEx.html here's some code to find the window you want to track? 
var is for lazy coders and does not help readability.
I think var is an iffy subject. Personally I wouldn't use var when storing the result of a method call, but a straight assignment like the above code sample is ok because you know what the implicit type is by just looking to the right.
Very educative, well-written tutorial for anyone new to interface design (as opposed to command line only).
For a simple app without a structured UI design, the file writing code would go in the window's code behind. This will probably be done in response to a UI event (like clicking a button). The same code will work as in the console app, as the executable type has nothing to do with its capacity to write to files.
The actual functions should work the same but just called differently. If you have (pseudocode) main() { writefile(); } you should be able to use it after adding a button to your form, double clicking it, and doing this: button1_Click() { writefile() } Forms work pretty much the same as console applications when it comes to calling functions. If you don't have the code in its own function then it will still work. Just replace writefile() with your file writing code. Also, I recommend learning how events work if you don't already. Winforms uses them extensively and it will really help you in the long run to have them figured out. 
This is the CSHARP article that finally makes it to my front page?! Goodbye. Sorry for the off-topic response...
Hmm.
Doesn't always help readability, but it's a great tool in refactoring.
http://www.aforgenet.com/
[http://www.heatonresearch.com/encog](http://www.heatonresearch.com/encog)
This is basically the documentation for the c# language, doesn't every .NET programmer already know about this?
Thanks for posting this, it helped me anyway. I came here to browse reddit and did some learning instead!
"Oh interesting, maybe a blog with some less known tips" &gt; Entire MSDN doc &amp;#3232;\_&amp;#3232; 
Do you really need neural networks, or will other kinds of machine learning/data mining techniques also do the job? Other than that, this Encog thing mentioned by mb75 looks quite good - judging from the features listed on the homepage - I did not try it out.
I disagree. var in this code example would be much cleaner. And it has nothing to do with lazy or not. It has a use.
Thanks, I got it working pretty quickly once I realised where the code had to go.
Would be cool, I guess.
Sounds very interesting!
Tutorials would be good. Video tutorials for code? Not so much. Programmers hit tutorials hard and fast. We can pick up what we need from the code examples without even reading the content most of the time. Videos just get in the way of that. I would like to see some tutorials on getting started with XNA though.
I've been meaning to learn XNA, I think it would be very cool to have some videos about leaning it from a beginners perspective.
I concur. I'm currently watching the Flex video tutorials from Adobe, and boy is it annoying. The speaker is so full of details and explanations I'm fast forwarding and skip most of the content. 
By HMI I assume you mean a Human-Machine Interface. I'm not sure how you're using the term, but to my knowledge it is an antiquated term for the more common [GUI](http://en.wikipedia.org/wiki/Graphical_user_interface). If that's what you're asking there are hundreds--if not thousands--of [tutorials](http://www.google.com/search?q=c%23+gui+tutorial) on the internet about building your first GUI application is C#. Also, if you run in to any issues, you might consider posting to [r/learnprogramming](http://www.reddit.com/r/learnprogramming/). As the community is a little more active than this one.
I meant something along the lines of what you would use with a touch interface on a plc
&gt;I meant something along the lines of what you would use with a touch interface on a plc Add this to your post, I don't think "HMI" is as common as you think it is. I just got done doing something like this (not PLC though). Each machine has a 17" elo touchscreen and a thinclient running xp embedded (windows CE gave us major problems with wireless connectivity). I made sure all the buttons were really big and consistently color coded. Beyond that I don't know what advice to give you without the specifics of what you're trying to achieve. 
Try using the Windows 8 Dev release [here](http://msdn.microsoft.com/en-us/windows/apps/)(Don't forget to get one with the dev tools). Only problem they will be 'metro' styled applications. 
I see. Sorry if my comment was condescending, it's just that your questions is somewhat vague. 
&gt;Only problem they will be 'metro' styled applications. No, he has the choice whether to do them metro-style or the old-fashioned way. He would be better off picking up some Visual Studio Express C# and learning about WPF.
This is pretty cool, thanks! I just submitted there.
If you're running the app on the SP server then you can work with the SharePoint Object Model directly: * http://msdn.microsoft.com/en-us/library/microsoft.sharepoint.administration.spwebapplication.aspx * http://msdn.microsoft.com/en-us/library/ms460897.aspx Otherwise, you'll have to connect to it via Web Services: * http://msdn.microsoft.com/en-us/library/ee705814.aspx
Hi, First of all let me pre-face this with the fact that I’m a C# noob. I do however know a little bit about SCADA/HMI. I’m not really sure what you are after as there are a lot of commercial SCADA/HMI apps that already do this but this is how I would approach the problem: 1) PLC drivers: for the plc do you have drivers? Are you using a common protocol such as modnet / DNPR/ IEC 104? Are you using someone else’s drivers or your own? Does your device have any quirks with its implementation? Do you have alternate protocols such as OPC? 2) Drivers are typically written in C++ so you will need to create a wrapper. You will also need to figure out stuff like poll periods, load, timeouts and max inbound connections 3) Presuming you get all of this working you will need to build up the GUI. Where you will find there are a lot of info/tutorials on this. 4) Touch screen stuff http://bytes.com/topic/c-sharp/answers/246840-touch-screen-net and http://bytes.com/topic/c-sharp/answers/249089-touch-screen-buttons-completion-comboboxes (my google results) Again sorry if this isn’t what you are after but this how I interpreted the question. 
Wow...that couldn't have been a better answer. Thank you. Everyone else's was good as well; and I know my request was poorly described. Thanks to all who answered.
r/clop clop will help you
Closing IO streams always shows up in examples of use for finally in c# and java tutorials.
Somewhat subjective but beyond this - are there other things were it's not necessarily required but would be deemed good practice (primarily from a code visibility point of view - e.g. as you provided being closing io streams)?
Imo, its best practice to write code that doesn't need try catch statements, by working out how and what might fail, and then handling that appropriately. That said, sometimes you can't control what might fail, and a try catch is the way to go. In that case, I feel that you should try to catch specific exceptions, and handle them appropriately, either by logging, and/or appropriate error messages depending on the severity of the error. Don't forget that you can have multiple catches for one try, which can help too! Finally (pun intended), you should use finally when you need to ensure something is disposed/closed in the event of an error, such as a sql connection or similar. There are many many articles on the use of try catch statements, and how they should and shouldn't be used, and if I remember I'll link to a few good ones on Monday :)
Could you provide an example of using catch a catch block twice for one try statement? Struggling to visualize how that would be implemented. And I agree, good code shouldn't need try however I'm using a lot of system.IO for a project and I believe when using that namespace that it has a lot of utility. edit: Also thanks a heap for mentioning the finally block being used to closed SQL connections - had an epiphany moment from that :)
Try { //do stuff } Catch (Nullreferenceeexception nre) { // handle nre } Catch (Notimplementedexception nie) { // handle nie } finally { // dispose of something } I'd give an actual code example, but I'm on my tablet (hence the incorrect camelcasing too!)
Much appreciated!
If you are using anything that implements IDisposable, you should (generally) be using a using(){} statement instead of try{} finally{}. You can put a using statement inside of a try{} catch(){} if you do need to catch the error.
Anytime you need to make sure something happens at the end of a chunk of code, that's when you should use a finally clause. The only time I ever use them is when I have something that needs to be closed, and it doesn't implement IDisposable (thats what the using() statement is for). 
That's true. I only tend to use finally to close sql connections and the like.
Makes sense - thank-you!
There are a ton of best practices. If you make a try without a finally you may as well use: using(var io = new MyIOClass()) { *your code goes here* } *your io is disposed once you get here, even in the event of an exception*
&gt; but won't continuing my method after the catch block do the same thing? The finally block runs regardless of whether or not your try block crashes. Why would you want to code your ending stuff twice? It's a nice little feature IMO, but not necessarily used all the time.
You would do well to invest in a copy a copy of [CLR via C#](http://www.amazon.com/CLR-via-C-Jeffrey-Richter/dp/0735627045/ref=sr_1_1?ie=UTF8&amp;qid=1319315794&amp;sr=8-1) by Jeffrey Richter. It's a great book that will answer this question, and a tonne of others in great detail.
I see you're using finally blocks to dispose IO streams. Using blocks would be much cleaner. 
Yes, good point. Thank-you.
Unfortunately don't have the money to pick it up at the moment (scraping back from a very unfortunate year) but soon as I do, I will. Appreciated.
I like this. [Linq Pocket Reference](http://www.amazon.com/Linq-Pocket-Reference-OReilly/dp/0596519249/ref=sr_1_20?ie=UTF8&amp;qid=1319341519&amp;sr=8-20) by the same guy who wrote [linqpad](http://www.linqpad.net) which you should also get to know
just use it. you'll learn more in an hour than a month with book.
That was sheepdog's point. Using is a shortcut for try-finally-dispose, and prevents "I forgot" errors.
Finally will also run if you: • rethrow the exception with "throw" • break • continue • return
I rarely find a need for finally, preferring "using-IDisposable" in most cases where try-finally would apply. Occasionally, though it is useful, for example when there are multiple catches on a try and you want to log the result of the try/catches in a single place.
[101 Linq samples](http://msdn.microsoft.com/en-us/vcsharp/aa336746)
This is not at all a good practice, as you're risking the stability of your application on private implementation details of the methods you're calling. An unhandled exception on certain threads will kill your whole process. This surprises most developers (it is a behavioral change of the runtime from .NET 1.1), and they usually blame the code they were calling for throwing unexpected or undocumented exceptions. This isn't responsible behavior, but rather a legacy of Java-style coding practices in the .NET world. It is typically correct to try and deal with specific exception conditions when doing IO (socket, file, SQL, etc). Those are unavoidable consequences of the external environment. They often shouldn't really be exceptions, but that's another topic. Things like null references or index-out-of-range, though, should never be "expected". If you're catching and handling those specifically, you are writing a hack. Sometimes you're forced to do this, but it certainly isn't recommended behavior. A simple example is Parse versus TryParse on value types. Calling Parse and catching exceptions is gross; a string being in an incorrect format isn't an "exceptional" event, it has performance implications, and it can make debugging harder if a large number of trivial exceptions are being thrown. Worse, it implies that developers should just assume parse success, and treat the other branch as an afterthought. TryParse is a better design, as it treats parse failures as a normal part of the API, which has to be checked before the value can be used. A method which only handles a few expected types of exception will almost certainly leak other exceptions to its caller. This is a bad practice that masquerades as responsible coding (what looks more enterprisey than pages of redundant exception handlers?). The better solution is to catch broadly and return meaningful responses which signal overall success or failure whenever you're coding at a component boundary. An example could be a library which acts as a facade to a web service. There are lots of forms of failure here; timeouts, address errors, service errors, parameter validation. All of these represent a single thing to the caller: the service request couldn't be fulfilled. If the facade's caller is having to deal with all of the potential web/service/timeout/network exceptions, then the facade is leaking details about its internal implementation of the service request. This breaks the abstraction and runs the risk of passing surprising exceptions to the facade's caller. And of course, if the facade is coded to specifically handle all the exceptions that the remote service might throw internally, then the service is leaking details about *its* implementation. So if the service keeps the same API but changes its backend from SQL Server (which might throw SqlExceptions) to Oracle over ODBC (which might throw OdbcExceptions), then suddenly these "responsible" callers have exceptions which slide right past their SqlException handlers and thus alter the behavior of the client code, potentially killing the whole app. The better behavior is for the facade's API to handle service failure in all forms, and return the details of that failure to the caller as part of the response. The flip side of the coin is not to catch all exceptions and implicitly signal fake success to callers. That's an obvious mistake with obvious implications, and is easy for everyone to understand and avoid. Catching only the exceptions you expect is, as demonstrated, a non-obvious mistake with non-obvious implications, and thus in practical terms is far scarier.
Once you think you understanding LINQ, watch this :) http://channel9.msdn.com/Events/DevDays/DevDays-2011-Netherlands/Devdays097 
Readability is for lazy readers and does not help coding.
I agree with this. I have also loaded html as XML and used Linq2XML to do my searching, but it was a P.I.T.A.
http://netduino.com/
It seems to be cool. I try it in my next SL/WPF project!
Sql connections can be put in using statements as well.
In addition to this, look here: http://stackoverflow.com/questions/22623/net-throwing-exceptions-best-practices *DO NOT* use Try/Catch for "safe" casting or flow control. That makes things a pain to debug and also ruins data integrity.
Video tutorials are good. See the ones on umbraco.com for some good examples.
The guy who teaches C# programming at Hull University makes his and materials he writes available for free: http://www.robmiles.com/c-yellow-book/
...for those of you who haven't read up on Design Patterns, this man is correct, if obscure. Google "Singleton Pattern".
 try{ //connect to sql } catch(Exception ex){ MessageBox.Show(ex.Message.ToString()); } finally{ //close sql connection }
hey, was just skimming the comments and this one stood out as its a ground-up approach which I like! I'm using this tut http://msdn.microsoft.com/en-us/library/0wc2kk78%28v=vs.90%29.aspx thanks for the tip :)
I think it would be great. This was the exact scenario was I thinking of, when writing up this blog post: http://blog.ninlabs.com/2011/11/auto-blogging-publishing-a-coding-task-to-wordpress It's not quite a video, but more for automated generation of a tutorial for doing a programming task. Ultimately, I think a mixture of tutorials and videos could be used.
Generally you use the using for ease, but when there are possible naming collisions for types you need to address this in some way. Fully qualifying removes the possibility for the collision, but another less known option is to alias the namespace in the using with the following syntax: using Ole = System.Data.OleDb; Which then allows you to use the alias to fully qualify the type: Ole.OleDbDtaaAdapter da = new Ole.OleDbDtaaAdapter.... 
Might go download LinqPad at http://www.linqpad.net/ It comes with a bunch of examples.
So you want a list that contains objects that all implement an interface? Yes, you can do that, for example if your interface is named ISelectable: List&lt;ISelectable&gt; selected You can check the type of any object by using 'is': if (object is ISelectable) EDIT: Reread it, not completely sure what you are trying to do, but if you just want a field to hold an object that implements the interface, just make an object: ISelectable selectable; It's as simple as that, really.
Well not a list but an object that contains the current selected object in the game, be it a building or a unit. That way when a user selects a cave the selected object is changed to a reference to that cave object, then calls that cave objects update button method. Honestly I'm starting to think this is a really bad design and I should come up with something new. I'm thinking about adding an interface called IActionListener that has a method called actionPerform (similar to how Java responds to actions in Swing) and having any class that uses buttons implement it, that way each button can have it's own action. Then when the user selects a different object I just have to test if that objects class implements IActionListener and if it does just update the buttons that way...Sounds pretty bad too, I might have to draw this one out actually...
Can we maybe get a summarized code sample?
interface ISelectable { void Update(); } then ISelectable selectedObject; and if (clickedObject is ISelectable) Something like this?
The code problem is easy to solve. Your game entities should probably share an abstract base class. This costs you nothing and will probably help solve similar problems in the future, as they likely share a lot of common functionality (drawing, updating, user control, etc.). Your design problem is that you're sticking a bunch of UI-related functionality onto the game entities themselves. This will probably turn your main entity classes into god classes over time. See if you can break out the button-creation logic, as it really shouldn't be part of your building or unit class.
Are you looking for [where](http://msdn.microsoft.com/en-us/library/bb384067.aspx)? It's preferable to have your interfaces define their behavior rather than deciding outside of the interfaces what behavior they define based on their type.
1000x this.
You create a MyBitmapSize object then use MyBitmap which isn't initialized. What is MyBitmap, where is it defined, and where is it initialized? 
by the way stackoverflow.com is awesome for programming questions such as this. 
MyBitmap is not defined. The best way to avoid that exception would be to change the if line to this: if (MyBitmap != null &amp;&amp; MyBitmap.Width &gt;= this.Width || MyBitmap.Height &gt; this.Height) That way you're checking if the MyBitmap object does not equals null, but doesn't actually solve the problem I imagine - MyBitmap needs to be set elsewhere in the same class, as it's not a static function you're dealing with.
Probably better to say: if (MyBitmap != null &amp;&amp; (MyBitmap.Width &gt;= this.Width || MyBitmap.Height &gt; this.Height))
The interfaces as mentioned in other posts act very similar to the interfaces in java and im pretty sure they are what you are looking for. Using the "is" keyword is fantastic to differentiate between class types at runtime. Using something like List&lt;INTERFACE&gt; will allow you to have a list of all the interfaced objects and then you can use LINQ to call .TypeOf&lt;CLASS&gt; to get all objects of that class. its worth looking into =)
Sorry for the late response, I was working on it last night and got very frustrated, ended up QQing for the night. I think you're right, an abstract class would be best in this situation. I need to diagram a few classes like Button, UI and Building and how I should go about these class designs. The thing that is really tripping me up on this is the fact that it's a group project and I'm working with a kid that likes to jump into coding without thinking about it first. Now I have to go through his haggard code, clean it, redesign it and make it efficient while adding functionality to the parts I'm responsible for like the UI.
What you should do is sit down and figure out the behaviors in your program. You have buttons, buildings, units, etc. Can they all be selected? ISelectable. Can they be clicked? IClickable. Button is probably solely a user interface item, but what is a unit or building? Are they solely user interface items? Probably not, so you have your unit and building, and then you have your visual representations. So perhaps you have something in between such as DrawableUnit which implements ISelectable, which performs actions against a logical unit when selected, and updates it's visual information using the new current state of the logical unit. So lets take a look at what we have here UI -&gt; ? &lt;- Logical State It would seem that we have a good fit for the Model-View-Controller pattern here. UI is your view, Model is your units and buildings, and Controller is where you delegate the behaviors between the two. As you start looking at how different parts of your program behave and interact with each other, you can start simplifying your design, and you'll start to see simpler behaviors and find easier ways to leverage polymorphism, and hopefully arrive at a manageable design (even though since it's just a school project it probably doesn't matter). **TL;DR Go through and think about how things should interact, and you'll probably see you have more than a single class for things like unit and building**
As is stated elsewhere, what you want is an ISelectable interface and a selectedObject variable of type ISelectable. Your ISelectable interface would have to have a List&lt;HUDButtons&gt; or something similar.
Doh, yeah, that's the way it should be done. Otherwise you'll still be hitting a NullReferenceException if you check MyBitmap.Height.
That is ... not a good example. The real reason reflection is awesome is to easily allow things like PropertyGrid and serialization code. That's the point of it.
I think you missed the MSDN documentation that explains dynamic invocation of methods, but more clearly. This is blogspam.
Adding junk to an inactive subreddit doesn't help the subreddit. Let me say however that the OTHER reflection examples, like http://blog.filipekberg.se/2011/10/09/using-reflection-to-get-information-about-attributes-on-your-class-and-properties/ , have at least some value.
*You're* a towel. no but seriously, although I actually found this post quite helpful I agree this subreddit needs to die and is better with no content whatsoever so I am also going to shit on it for no reason. THIS POST IS BAD. IT'S BAD AND YOU SHOULD FEEL BAD FOR POSTING IT. **BLOGSPAM**
This is not at all why reflection is useful. The article is crazy.
Care to elaborate?
I think that you made some decent explanations for someone that has not had an introduction to reflection. I find that one of the best explanations of a benefit of reflection is how well it integrates into the [factory pattern](http://en.wikipedia.org/wiki/Factory_%28software_concept%29) Using reflection, runtime type activation, and some form of lookup data (xml, sql, etc.) you can create a fairly powerful factory for introducing or processing new types in a system, even during runtime.
TL,DR: it's a REPL for C#
&gt;I would like to see some tutorials on getting started with XNA though. http://create.msdn.com/en-us/education/gamedevelopment
But is not just that
Would've been more useful to point to the MSFT blog page itself but I can't complain too much as I had no idea of this release. This is really cool, thanks for posting!
What MSFT blog page did you have in mind?
It can be very useful in lots of situations, but making toy imperative languages isn't one of them. Fun, yes, but not productive.
Your variable scoping seems correct. If those variables are only getting accessed in that function then that is where you should declare them. There are no real performance implications here. You want to pay more attention to the computations you are doing rather than how many temp variables you are using. Don't overthink things. Code away and post back if your program is actually running too slowly :)
Blogspam is usually considered to be when a blog post merely contains a brief summary of a link, and then posts the link, adding no valuable content. This is just a blog post, whether you enjoy it or not doesn't make it spam. Yes, this reply is 9 days after your comment, but that's how slow subreddits tend to work :)
OK, I concur that maybe the "blogspam" category does not apply here. I should have just said the following: "This is a poor quality blog post that is devoid of good content, and in fact its presence on the internet cannot serve to help anyone or anything except fekberg's inflated ego. He should have just linked the MSDN article on C# reflection."
In that case, I believe we agree on these amendments.
Wow, neat. ExpandoObject sounds pretty corny though, I couldn't believe it until I saw it in the MSDN docs.
I've never attempted this before, but I found some info here: http://stackoverflow.com/questions/4788863/how-to-send-series-of-commands-to-a-command-window-process
For your bonus question, the simplest answer is: System.IO.Directory.SetCurrentDirectory("C:/"); System.Diagnostics.Process.Start("cmd.exe"); Alternatively, you could use a ProcessStartInfo object to start the process, which leaves the application working directory untoched: System.Diagnostics.ProcessStartInfo psi = new System.Diagnostics.ProcessStartInfo("cmd.exe"); psi.WorkingDirectory = "C:/"; System.Diagnostics.Process.Start(psi);
Could you write a .bat file with your commands and then execute that?
Wouldn't SendKeys work?
When you start a process in c# you can retrieve a instance of the Process class associated with that process(Process.Start returns one). The Process instance contains streams for input and output of that process, you can use the input stream to send commands.
I do not think that is possible and I am curious why do you need it :)
My company has a need to submit our source code to a third party regulator for inspection. We submit both our source code and compiled binaries. The regulator would like to be able to compile our source themselves and then compare they hashes of the binaries they compiled to the original binaries that we gave them.
There is a way to compare them, C# is byte code and can be easily disassembled and compare the disassembled code. See this for start http://www.codingsanity.com/diff.htm 
Thanks for the reply! I will definitely look into this. Happy Holidays!
Thanks, Happy Holidays to you too.
Although anonymous functions can be good for certain things, I really don't think it's good practice to apply them directly to an event. In some cases, you may want multiple button clicks going to the same code, and this is best done by using multiple methods. It could be useful if you wish to only use one method for an event, but use common sense.
I've seen a few posts of yours now and think they are fantastic and informative and I can't wait to see a few more.
I can see that this is useful for quick code, and if you really wanted, you could use actions and tasks if you wish to use the same event code over multiple events. In the end, the functional lambda-like declarations is just another style of programming and comes in very handy with agile-development approaches to programming.
Of course, and in the case that you really want to use an anonymous function, you could do something like: Action&lt;object,EventArgs&gt; onClick = (object sender, EventArgs e) =&gt; { //Insert code here }; button1.Click += onClick; button2.Click += onClick;
Indeed
Did you register the DLL with regsvr32?
I tried to, but it wouldn't register with regsvr32. It did register with regasm, however. Thanks for the tip though!
&gt;In some cases, you may want multiple button clicks going to the same code, and this is best done by using multiple methods. Wouldn't this do exactly that? I often have a bunch of events that call another method for validation, toggling of other options, etc. In this case you get a simple one-liner that calls ValidateInput() to do the heavy lifting. As a matter of fact, I almost never put any kind of complex logic *in* the event method. If it's more than a few lines, I extract it to a properly named method.
Could you perhaps show me what you mean?
[This](http://pastebin.com/YfV2qzZD) is not the best example--because the events check for the KeyChar before calling the method--but it was the quickest thing I could think of. Still, this type of thing I was was implying. (If you want me to find a better example, I'm know I have one.)
You have two methods that essentially do the same thing, so why not have one method? private void textBox_KeyPress(object sender, KeyPressEventArgs e) { // char 13 is the enter key. if (e.KeyChar == (char)13) { AddItemOrCoupon(); } }
I suppose you have a good point... that is a product of just letting VS assign the method calls. Like I said, it not the best example. But, what I meant is that I prefer each event have a distinct method. You're right, you could just map all the similar events to a more generic event method. But, IMHO that is more upkeep than it needs to be. I guess it's a 'more than one way to skin a cat' kind of thing.
It all depends on whether or not you want to reserve memory. I also noticed that you checked a string like string != "", it is best to do "!string.IsNullOrEmpty(str)". There's no point creating a new string just to check if a string is empty.
Hrm... I was under the impression that you only use String.IsNullOrEmpty() if there is a chance the result could be null, so as to avoid exceptions. (Where as with a textbox, it is never null.) I never realized it could save memory. [The more you know.]
Every string that you use is going to be put in the memory somewhere. If you use an empty string, it's still going to take up a certain number of bytes simply for the fact that it's there. That's the reason you should always use the StringBuilder class if you are concatenating strings. You shouldn't do something like: string str = "This" + " " + "is" + " " + "a" + " " + "waste.";
I would also disagree with this point. StringBuilder is, no doubt, a better use of memory... but, there are cases where it can actually reduce readability in code. Keep in mind, we're talking about a managed language. If one needs their code to be so optimized as to reduce understanding, it's likely .Net is not their best choice of development platforms. The overhead of creating unneeded stings is negligible, at best, in comparison to the overhead introduced by using a managed language/framework/platform in the first place. Sure, assembly is is much faster than Python; that does not mean it's the best choice for the task at hand.
Sure, .Net languages are great if you want to make something quick, but if you want it to be fast, you need to write the code right. Readability is not important, usability is important. The user of your programs are not likely to be reading the code. I don't understand why so many people stress on code readability, and throw out optimization just to have readable code.
&gt;I don't understand why so many people stress on code readability, and throw out optimization just to have readable code. I, personally, think that there is a middle-ground, here. Sure, I'd prefer all of my code perform a best as possible. But, I also want a developer looking at it be able to infer my intentions without necessarily spelling-out the reasoning of every line. I strongly feel that there is a balance between self-documenting code, and code that is so optimized that every line of code requires two-lines of documentation.
I don't usually share my code with other people, so I don't worry about whether or not they can understand it. Sometimes I go back and look at my own code and can't understand it, but it still works, and that's all that matters to me.
&gt;I don't usually share my code with other people, so I don't worry about whether or not they can understand it. I'm sorry, but, doesn't that preclude you from a conversation about code readability?
Not necessarily. I still believe readability isn't as important as usability.
That assumes that code-readability sacrifices usability. usability != performance. Sure, in something like a game engine performance can be directly associated with usability... but, again, no one should write a high-performance game/game-engine in C#/.Net. I guess I just fail to understand your perspective. I'm sure the misunderstanding is on my end.
It's all a matter of speed. You can write something that works, but has no optimization, and could take several seconds to complete a task. OR you could optimize, and increase speed ten fold.
Are you getting that error when attempting to add a reference to the COM component? Also as ccb621 said if it is a true COM object you should be able to register it using regsvr32 although make sure you are running your cmd console with elevated privileges.
resolved. i set the object to new instances of a class, but that class was inherited from another class. thanks to both of you!!
Could you possibly iterate a bit more on how to accomplish this, I have tried poking through the class and found no glaring way to do what I have tried. I have also tried what everybody else has been saying to no avail. Thanks again, and sorry for the late response, been working 14hr shifts, just now got some time to sit down with my code.
worked like a charm, thank you very much.
This link contains all the info you need: http://msdn.microsoft.com/en-us/library/system.diagnostics.process.standardinput.aspx
Where are you finding difficulties? is it remembering the sintaxis, understanding OO, getting to know the libraries that are available?
Its not really difficulty with the language, OO concepts, libraries and syntax I can handle. I just can't find a resource that is as equivalent to other programming texts I've read like "Learn Python the Hard Way" or "Dive into Python". 
Channel 9 - Lots of stuff there. http://channel9.msdn.com/Series/C-Sharp-Fundamentals-Development-for-Absolute-Beginners Good info about advanced / new stuff. http://channel9.msdn.com/Shows/Going+Deep pluralsight cources. Paid. Good. http://www.pluralsight-training.net/microsoft/Courses/TableOfContents?courseName=csharp-fundamentals Newer more advanced stuff (not really tutorial) but can pick up a heap of knowledge. http://channel9.msdn.com/Events/MIX http://channel9.msdn.com/Events/PDC http://channel9.msdn.com/Events/Build/Build2011 
If you've got the syntax down, I'd suggest building an app. People always told me the best way to learn programming was to write code and I didn't believe till I did it myself. I'd suggest build a WinForms crud app. Just drag and drop some controls onto the form and hook up the events. Folks don't recommend WinForms nowadays but I suggest WinForms because it's the simplest way to write some minimal code and get a pretty decent useful app. Download and install Visual C# Express Edition and if you're not sure where to begin, pm me. P.S. If you're not entirely familiar with the basics of programming or C# syntax, I'd suggest sticking with console apps.
Yep, this would be my advice too, if you are interested in web / asp.net, do a clone of a site (reddit could be a good example) just to trigger doubts or be more secure about what you can do. Every time something seems fishy try to google a different way of doing it. Really c# or any language are not hard once you get the sintaxis, the problem/doubts come when you need to model or abstract what you want to do
I liked this book a lot, is kind of outdated on the language side, but it has some examples and simple ways of resolving them. http://www.amazon.com/Applying-Domain-Driven-Design-Patterns-ebook/dp/B0054KOKQQ/ref=sr_1_2?ie=UTF8&amp;qid=1322572512&amp;sr=8-2
people actually remember syntax? I've been programming in sharp for 5 years and I *constantly* have to look things up.
I always forget where the brackets go in switch statements, but other than that, there is not much to remember. What is that you have to lookup the most?
As recommended, build an app! If you're a python developer, redo an app you've already built. Also, have a look through this list... it won't really "teach" you C#, but there are a lot of nice little nuggets of information: [Hidden Features of C#](http://stackoverflow.com/questions/9033/hidden-features-of-c)
reflection I have to look up quite a bit, configuring wcf services, names of properties for .NET objects, delegates, multithreading, where to find persistant security information. Especially when configuring and working with .NET framework objects, sometimes the properties I'm looking for are buried so far that I just can't find them. Also, naming conventions between .NET framework objects is not always consistent, it is most of the time, but not always.
I wouldn't consider that sintaxis (maybe only the delegates), rather than how to use the libraries/configuration. And I agree, for things I don't use frequently I just go and google them, but that is not a problem, it is enough to know that they exist
[Essentials of C#](http://www.amazon.com/Essential-4-0-Microsoft-NET-Development/dp/0321694694) is a great book for beginners. It's clear, concise and covers a wide range of topics. After that, practice practice practice.
"Pro C# 2010 And The .NET 4.0 Platform" by Troelsen. £27.23 on amazon. http://www.amazon.co.uk/Pro-2010-NET-4-0-Platform/dp/1430225491 Very thorough, in-depth, aimed at experienced programmers. Covers C# and .NET, including CLI, CLR, and an overview of .NET libraries. 
Any suggestions on where to learn about asp?
That's pretty cool! Thoguh I am wondering if that interactive window can be used to try XAML. That would be especially cool :)
no actually i didnt
You are looking at quite an undertaking if it is even possible. If you want to do some task that happens in adobe, you have to work with adobe. There may be some sort of library out there for reading and printing PDF files, and that is your only hope really. It doesn't matter what language you want to do this in, accessing the PDF data is your lowest common denominator. If you get that figured out, there are jquery plugins for printing things. jquery cant open the file menu in reader and click print though. Thats the issue.
http://stackoverflow.com/questions/273675/print-existing-pdf-or-other-files-in-c-sharp Maybe this can help you
or this http://www.daniweb.com/software-development/csharp/threads/34107
Please don't use this method. Acrobat can do strange things and is not reliable.
the pdfs being printed aren't "adobe pdfs" ... the pdfs are being generated with Fpdf, a php library. You don't have to use adobe for all your PDF needs.
this looks like it could work, thank you :)
Generally speaking you cannot mix languages in the same project. I have seen a trick before though in using sub directories for each language in app_code and referencing them in web.config by calling &lt;codeSubDirectory="xxx"/&gt; EDIT: I got curious so I looked it up. &lt;codeSubDirectories&gt; &lt;add directoryName="xxx"/&gt; &lt;/codeSubDirectories&gt;
This isn't a true ASP.NET app, not using app_code or any of that (porting things over from classic ASP).. but, I just noticed that I was wrong. I wasn't getting autocomplete in the .vb file either. I was just wanting to mess around with the C#. I'm getting into these files from the Source Control Explorer, since we're using TFS, if that matters.
I'm horrible at clarifications. Okay, here's the problem, it seems. When I'm writing VB/C# on an ASPX page, IntelliSense works fine. If I write in a standalone .vb or .cs file, no IntelliSense.
Are you creating the standalone file? If so are you adding the appropriate using statements? Have you tried typing something that is in the global namespace like "System." to see if you get any intellisense? 
Yes, and yes, and no intellisense.
You may be able to do it by making it print from the server side code instead, then you can have the server kick off a printing program each time the user submits a job. I did something a little like this in one job years ago. The printing process was already set up though, so all I had to do was have the server side code add the job to a sql database. Another process regularly checked the table to see if anything needed to be printed. 
So you have db-connect.aspx, db-connect.aspx.vb and db-connect.aspx.cs? Your db-connect.aspx is only going to be able to reference one code behind file. Are both the .cs and .vb classes partial and do they extend Page?
Do you have experience with other languages? If you know c++, then it's probably mostly the library calls and not so much the language. I just started learning c# myself. I've always had the most trouble with using the IDE to autobuild code but recently had a mental breakthrough past my problem. For me, I find that the MSDN site just doesn't work to teach me anything. Either I just can't find the right sample code I need, or the sample code they provide is way overkill. I have to actually just bull my way through by trying to write code and googling how to do something. I just finished a decent little program using multithreading and delegates (aka callbacks) to compare a folder on my backup drive to my main drive. Anything not on the main drive would then get deleted. Then it would prune empty folders. My backup software never removed anything even if I deleted it from my main drive. I was doing it manually for a while but it was a pita. Wrote this and cleared out 288 gig in 2 minutes. Now I'm looking for another project to work on.
Yeah, it's only referencing one. I was just messing with the differences between VB and C#. They're not really code behind, so much as just a wrapper class for a database connection. Which isn't my problem, anyhow. The problem is I'm not getting intellisense in the .vb or .cs files.
Sometimes, you can hose a project up so much that Visual Studio gives up. One of the first symptoms of this is Intellisense dying. Try doing a clean and then rebuild. Failing that, exclude your web.config file and rebuild again. If i think of anything else, I'll post.
Yeah, so, this isn't a .NET web app that we build and deploy. TFS is set to "build" to a directory that IIS points to for the website.
i did some research and i was able to do what I wanted, but not with a c# program. I am using a URI handler that passes to a vbscript. The vbscript downloads the file locally, and uses [SumatraPDF](http://blog.kowalczyk.info/software/sumatrapdf/free-pdf-reader.html) to print it silently. The problem is that each workstation has 3 printers, plus 1 additional network printer. 3 things get printed locally and there is a communal printer. Each printer has a different application (1 shipping, 1 label, 1 normal). Since I am using VBscript I was able to make a crude install script and was able to make it so that my URI print://printer1,blah.com/file.pdf "printer1" actually refers to an installed printer on the computer, whether it is local or network is irrelevant. It saves this to an ini file and when the handler is called, it references and prints it to the desired printer. If there's anyone who could use it let me know and i'll host it somewhere :)
Very nice.
So it is neither a project or a solution but the result of a build? That would explain why you don't have Intellisense. Intellisense only works within the context of a Solution or Project. One way to demonstrate this is to open a Solution. You'll have IS. Now open an unrelated cs or vb file. You'll notice that on that newly opened file, you don't have IS.
Yeah, it's not even a build I'm using. It's just a .vb or .cs file. I have IntelliSense just fine when it comes to ASPX pages using either C# or VB, but not on those standalone files.
Sounds like you have absolutely no idea what you're doing, so I would suggest you start with python instead of c#. Python has far, far more introductory material and tutorials than c# and you'll be able to learn much faster. After a while of learning and absorbing basic programming concepts, then come back to c#.
I'll have to be honest and say the last thing the world needs is another crappy coder. You may want to find something else that you actually have an aptitude for and pursue that.
Learning programming by starting with C# can be difficult because there are at least two separate things that go into a working C# program. First, there's the linear flow of the program. If you think of your program as a huge flow-chart, with one starting point and possibly many stopping points, the "linear flow" is my term for describing how the program steps through that flow chart. It describes the actions that the program performs as well as the choices it makes along the way. Second, there's the structure (which C# is rather heavy on). The structure is how you take that linear flow arrange it into chunks of C# code. In C#, you as the programmer make such choices as "public vs private method" or "should I use a class instance or a static class?". These are not easy questions to understand if you are still learning the linear flow. In short, if a C# program were a piece of music, the linear flow would be the melody whereas the structure is the harmony. Two related, but largely separate "dimensions" to think about. Personally, I'd start with a language that lets you focus on the flow without having to worry much about the structure. Try a "scripting" language like Python or Ruby. I hear that this book is good (http://pine.fm/LearnToProgram/). Or, if you really want to start simple, try playing with Logo until you get bored (http://www.mathsnet.net/logo/turtlelogo/index.html). Good luck! Learning programming is really about getting your brain to think like a computer and that's not something that happens over night.
This is more for personal reasons, I have always wanted to just learn coding for my own benefit to just have the knowledge of being able to. Very unlikely I would pursue a career into it.
Yeah I am thinking that too. It's just I want really explained programming concepts. Which explain why you do this and that. Many just say You put this here and this happens. Then moves on straight away.Thanks though!
Thank you! I'll most likely start with python! 
Sure thing. Feel free to hit me up if you get stuck on some tricky concept or unclear explanation.
Everyone starts knowing nothing. We were all crappy once, and we can all be better. 
There are many reasons knowing something about programming can help you. If you're working with programmers, the more you know, the easier it will be to communicate with them. Also, it's fun. Keep at it.
Well, for concepts I would go to the Carlh programming class subreddit: http://www.reddit.com/r/carlhprogramming/ He explains from the ground up what's happening in a clear, interesting way. After that, I'd check out the python subreddit, although you are of course free to pick whatever language you want. If you really want to learn C# immediately, which I understand, it's a cool language, I would download Charles Petzold's [.Net Book Zero](http://www.charlespetzold.com/dotnet/). It's free and by far my favorite C# resource. EDIT: I just checked that .Net book out again, and I forgot that it's kind of advanced. Regardless, it's still a great resource I would save to come back to once you get the hang of programming and want to learn C# in depth
Dig out and re-type the crappy "Guess the number" console application. again and again and again until you can do it without referring back to the original code. Think of it like piano practice. IMPORTANT: If this doesn't appeal, revert to spending your spare time consuming things that other people create. Like shitty TV shows.
Although there is nothing more dangerous than somebody with a little knowledge. But since he said he is just doing it for fun, I'm assuming there is little risk.
Agreed. Worst case scenario is becoming a programmer manager, thinking you know about programming, when you know nothing. A manager who knows the basic lingo and concepts but understands he doesnt know enough to argue technical concepts, on the other hand, is the best kind. I'm working with the sales dept now, and if those guys knew the first fucking thing, it would help.
Yea, it can be a bit much at times. I started with VB, it seems to have given some good background.
What a shit attitude. Why are you even on here?
It's a realistic attitude. There are some things some people just can't do. The Participation Trophy Generation isn't really used to being told that they can't do something when sometimes that is the best thing they can hear. I was initially concerned that he was attempting to do it for a living, but he clarified that he was doing it for fun. Were he trying this in a professional environment, I would still advise him to concentrate on the areas where he has an aptitude as it would be better for himself and the people he has to work with.
http://www.youtube.com/playlist?list=PL590DAD73FF2CA46D&amp;feature=plcp
Amazing response. I would also add that you're learning an entirely new concept as well as the language when starting out ... Object Oriented ; Which can be very difficult to grasp as well. 
Sounds like you had a terrible time in a programming class once.
Nope. I'm a professional software developer and achieved this without attending CS class (I'm a UK physics and business major) by practicing, reading and learning from example. Mostly though I did it through repetition and hard work. People want to win X-Factor without putting in the effort. People want to be superstar coders without putting in the effort. The rewards are great (creating &gt; consuming). I wasn't being sarcastic about the repetition.
I don't think there is any argument to be made for one vs. the other in terms of basic learning but I'll say this. Windows GUI software design (or any GUI software design) is more than just attaching handlers to UI events, and if that is all you are doing you are "going to have a bad time". You actually, should (probably must unlike the author suggests) know how to use MVP when using WinForms. Code-behind + UI event driven application design will eventually bury you and leads to what is often referred to coding by coincidence (add a line, add another, add another, does what you want? ok stop). WPF has much, much, much better support for data-binding. This makes the MVVM pattern relatively easy to understand and use. However, again without more decent application design understanding, the MVVM pattern can quickly turn into little more than code-behind v2.0. I'd highly recommend WPF over WinForms if just because you can do a lot more with the GUI with a lot less effort. Simply put you can make things look much better. However, I wouldn't travel too far down that path without learning to use at least one of the composite application frameworks like Caliburn Micro or MVVM light (I would avoid Prism though, it isn't a real framework, and is more of an example/experiment from P&amp;P). Anyways I could go on about this for pages. The author is right, the answer is neither and both. Neither because from a code-behind UI event standpoint there isn't a whole lot of difference. Both because to develop any relatively complex GUI application for the desktop you are going to need some design patterns.
&gt; I'd highly recommend WPF over WinForms if just because you can do a lot more with the GUI with a lot less effort. Can't agree more! At first I really did not like WPF, because it seemed a little bit martian, but after some exploring I like it. Then about a year passed, and I needed to remake a quite complex interface. Although it wasn't commercial job and was targeted for my inner purposes I wanted it to make it fast and good looking as if it is some top notch app. So it took me a day to make quick photoshop design and only 1-2 days to implement it in WPF! Expression Blend is just awesome tool. The thing I want to add is that this article doesn't mention how it easy to change control element look on different control styles. I really amazed by elegance of control editing in Expression Blend.
I'm not sure I have one. I was hoping someone could look it over, see if I'm on the right track, and help me fill in the missing blanks. 
Put it in visual studio and see what comes out.
Think of arrays as a drawer. You declare a drawer that can contain elements of a certain type and you specify how many separate spaces this drawer will have (the * length* of the array). Once the array is created, you can access the data in each of its spaces by their index number using the array*[x]* syntax (where *x* is 0 to length - 1).
&gt; Or I should say; I understand arrays, I don't understand the syntax. Arrays are a fixed length sequence of places to store objects, identified by number. *var arr = new string[20];* Declares the array, giving the type of object and number of spaces. By default object arrays will initialize each element to null; struct arrays will run the default constructor. Each individual slot 0 to 19 (in this case) can then be addressed individually. The number can be supplied directly or via a variable. *arr[0] = "the first element";* *int i = 1;* *arr[i] = "the second element";* *i++;* *arr[i] = "the third element";* *string s = arr[2]; // s = "the third element"* Given you haven't tried to fill in the for or while loop, I'm guessing your problems extend beyond array syntax. 
See how payArray[count] is set? You're accessing the element in *payArray* at index *count*. That's basically all you have to use to fill in the blanks. payArray[count] = hoursArray[count] * RATE; //determines pay without overtime Also, keep in mind that arrays are 0 based, so your for loop should look like: for (count = 0; count &lt; numEmployees; count++) { // do stuff } By the way, Since your array is set to 20 items, numEmployees should be &lt;= 20. All that said, this is pretty basic and integral stuff; you should probably stop skipping classes.
Syntactically, square brackets can appear in a couple of places. When defining a variable, the square brackets are part of the type, indicating an array type: int[] someInts; So this is an int array, not an int. They can also occur after a variable name to retrieve elements of an array: someInts[5] = 30; When used in this way, the number in the brackets tells the compiler to go that many ints past the start of the array. someInts is a location in memory, and 5 is the number of spaces to skip past that location. Let's look at some of your code: &gt;numEmployees = _________ (Console.Readline()); //20 Would that make a valid statement? &gt; numEmployees = 20(Console.Readline()); That's not valid. Think about what you're trying to do with this line of code. numEmployees is an int, but Console.Readline() returns a string. You need to convert from a string to an int somehow, and that's what goes there. &gt; for (count = ___; count __ ____________; count++) For loops and arrays go very well together. Think about what value you want to start with. Array indexes (the part in the square brackets) go from zero to (size of array - 1) or in this case, 0 to 19. However, we just read in something called numEmployees, so it makes sense that we only want to read it that many employees. So we're only going to loop numEmployees times: for(count = 0 ; count &lt; numEmployees ; count++) &gt; _________ = Convert.ToString(Console.Readline()); //namesArray Now we're inside the loop, and **count** is going from zero to numEmployees, which makes it good to use as an array index value. We've read in a string that we want to store in namesArray. So we've got our array name, we've got an index into that array, put those together and we end up with namesArray[count] = Convert.ToString(Console.Readline()); &gt; Console.Writeline("Enter hours worked"); //prompts for employees hours worked &gt; _________ = __________ (Console.Readline()); //hrs 60 Now we're doing the exact same thing, except we're storing a double instead of a string. Double arrays work exactly the same as string arrays or int arrays or anything. Just remember to convert from a string to a double before you store it! &gt; if (_________ &gt; 40.0) //60 -determines possibility of overtime What's the goal here? We want to check if the number of hours worked is over our overtime threshold of 40.0. We just stored the number of hours worked in the array. How would you reference the value we just stored? &gt; payArray[count] = (___________ - 40.0) * RATE * 1.5 + _______ * ________; //hrs 14.25 40 -determines how much overtime This one looks more confusing because of how many blanks there are, but really it's just simple math. If you're struggling, write out a formula on paper for pay calculation and plug in the numbers to this statement. &gt; count = ______; &gt; while (count _ ______) { Just like for loops fit well with arrays, so do while loops. In this case, you're going to loop through every element in the arrays just as you did before, with count being your index value. You can see that inside the loop, count is being incremented: &gt; count++; So you'll want to start at zero and work your way up to the last element (numEmployees - 1). Here's what that looks like: count = 0; while(count &lt; numEmployees) { Does that make sense?
I'm am using visual studio. This is just from a print out that I typed up. I thought I could figure it out using visual studio, which is why I typed it up. I got way too many errors, even on the parts which I knew where right so I thought I'd ask here. Thanks for the reply though.
I understand your skepticism, I actually did fill in the FOR and WHILE loops, but figured that (incase they were incorrect) that it would be easier for someone to just look at the blanks than to also have to correct mistakes. Thank you for the help.
Very helpful thank you! I acually haven't skipped that many classes I think 3 the whole semester and two were for quite serious reasons only 1 for actual sickness. I just have trouble with programming and we're learning for the world's shittiest book. The whole class agrees.
Well then, here's working code for reference. int numEmployees; int count; const double RATE = 14.25; //establishes variables string[] namesArray = new String[20]; double[] hoursArray = new double[20]; double[] payArray = new double [20]; //establishes arrays Console.WriteLine("Enter number of Employee's to process"); //prompts for number of employees numEmployees = Convert.ToInt32(Console.ReadLine()); //20 is the maximum if(numEmployees &gt; 20) { numEmployees = 20; } for (count = 0; count &lt; numEmployees; count++) { Console.WriteLine("Enter Employee name"); //prompts for employees names namesArray[count] = Convert.ToString(Console.ReadLine()); //namesArray Console.WriteLine("Enter hours worked"); //prompts for employees hours worked hoursArray[count] = Convert.ToDouble(Console.ReadLine()); //hrs 60 if (hoursArray[count] &gt; 40.0) //60 -determines possibility of overtime { payArray[count] = (hoursArray[count] - 40.0) * RATE * 1.5 + hoursArray[count] * RATE; //hrs 14.25 40 -determines how much overtime } else { payArray[count] = hoursArray[count] * RATE; //determines pay without overtime //hrs RATE } } count = 0; while (count &lt; numEmployees) { Console.WriteLine("Name: " + namesArray[count] + " pay: " + payArray[count]); //prints names with proper pay amounts //prints: proper names with proper pay amounts count++; } Console.ReadLine(); //keeps console open
I'm sure you mean well, but offering someone a full solution to what has clearly been labelled as classwork does no-one any good. The student doesn't work through the problem and learn from it; even if they do and come to the answer on their own, having been given a solution could be considered cheating if it were to come to light.
I didn't post the full code originally because of that, but I figured 1. he'd had time to reflect on the advice given already, 2. the best way to learn code is to read code, 3. if the book is that bad, maybe it would be irresponsible to NOT give him the answer, and 4. I really don't care if he cheats on his homework.
&gt;By the way, Since your array is set to 20 items, numEmployees should be &lt;= 20. Not necessarily. Unless arrays don't start from element 0. 
numEmployees is set by the user. It's the user's indication of how many employees there are to input. The arrays have already been set to 20 elements. Therefore, the largest valid value (as the code is written) for numEmployees is 20. The largest valid index for the arrays is 19. The for loop continues while the index is less than numEmployees. 
My bad. For some reason, I read your post as &lt; 20 rather than &lt;= 20. I can only blame it on it being late at the time. My apologies.
If you have never programmed before I would recommend you read this book first. it will make OOP easier to digest when learning c# http://www.amazon.com/Object-Oriented-Thought-Process-Matt-Weisfeld/dp/0672318539
There's another way if you're calling from managed code via P/Invoke: Compile for "x86" instead of "any" or "x64" -- this forces the JIT to do its thing in 32bit mode. 
Three things: - Get an IDE that doesn't give you help. SharpDevelop is good for this. - Get the book "Pro C# and the .NET framework" from Troelsen: http://www.amazon.com/2010-NET-Platform-Andrew-Troelsen/dp/1430225491 - Learn from production code and someone else's failures. I learned most of what I know today by writing VB apps and having the IDE convert them to C# (I stared with SharpDevelop) 
You're missing something here. Let's look at the members of the Process class: * [StandardOutput](http://msdn.microsoft.com/en-us/library/system.diagnostics.process.standardoutput.aspx) -- Allows you to read standard output. * [StandardInput](http://msdn.microsoft.com/en-us/library/system.diagnostics.process.standardinput.aspx) -- Allows you to write to standard input. The only problem here is that these require the bool RedirectStandardOUtput and RedirectStandardInput set to true. I dont know how well this will work, but it does do what you want.
Bad idea. Don't drop the table. Learn SQL. Edit: Let me expand on this. Any handled or unhandled exception that you encounter while you're creating the new table and can't fix while in the debugger in that session (assuming you're running this from VS and it's not the boss) will mean loss of data that you had no intention of losing. It's never a good idea to drop a table that contains data that you intend to keep. SQL was developed to serve many functions, and deleting rows was one of them. Access supports its own version of SQL that's slightly different than MSSQL but overall very much alike. You'll learn something new and won't screw yourself in the process. Trust me, if you go for your proposed solution, it may not screw up now...it may not screw up in a month, but it will screw up at the worst possible time.
SQL is not really an option, I'm adding functionality to an already in-place application that uses an Access database (albeit with a changed file extension) as the primary database. If I shouldn't drop the table, do you have any ideas on how to selectively remove rows from the database based on whether the data in two datatables matches?
I'm confused. If you can interact with the database enough to drop a table, how can you not issue SQL commands on the table?
I'm an idiot. I misunderstood your post and figured it out when I wasn't able to edit my post. Sorry.
you could also look at nHibernate. it's an ORM framework that works with access and LINQ. It can ease a lot of headaches if you need to do a lot of data manipulation. if it's just deleting a few rows, I'd just use SQL.
A lot of *try { } finally { }* can be eliminated through the use of *using () { }*, but there's still the matter of objects that you must leave in a consistent state regardless of what happens. This is most obvious with [monitors](http://msdn.microsoft.com/en-us/library/system.threading.monitor.aspx) and other synchronization mechanisms.
This was a lot of fun to dive into back when Amazon's mechanical turk service was profitable via script and MS's Live Arcade thingy gave out points that you could use to "buy" tangible goods. (Anybody else remember automating album cover verifications at a nickel a pop? Jesus that was easy money.) It kind of lost its magic when it boiled down to grinding Farmville for you. Are there interesting applications for this type of coding these days? In any case, this is really good information for people looking at web scraping or other such solutions.
Testing. Been trying to figure out an efficient (on both sides) model for storing this data. If I scrolled down there are like 500 lines of the same functions written different ways, commented out.
What IDE do you use? The readability seems ok. There are a few things I personally don't like: * New-lining every section of all the constructors which are passed as method arguments. If the constructors have multiple parameters, this helps readability, but I think you could just condense the short ones to one line. * This probably isn't 'standard' coding practice, but when I decide a bit of code is too long for one line, I newline after operators or commas, but not parenthesis. * Not putting spaces between variables and operators. If you use Visual Studio, it will correct this automatically as you type. I recommend it. * Extra whitespace on methods which contain only one line-- I don't think this helps readability particularly, and it makes your code take up more space. In general, I think this code seems to take up a lot of lines for what it is. This is just my preference (and lack of desire to scroll), but you could do with using new lines less liberally.
Started coding in C# around a month ago, grade 10 computer science. I know this is most likely the basics for most of you, but I'd like to get criticized.
Could most of the phrase.Replace be ditched and just use a phrase.ToLower() ? Looks good though.
Or even better call String.Compare with 3 arguments: (A, B, true) to have it ignore the case for you. No need to go to all the trouble when microsoft has already done it for you. I'd also recommend a simple regex to replace unwanted characters from the string before reversing it. [this](http://msdn.microsoft.com/en-us/library/az24scfc.aspx) should get you started. If you were getting rid of, for example, [?&lt;&gt;.!] and you suddenly decided you also wanted to get rid of &amp;,* and $ you would just append them into the regex: [?&lt;&gt;.!&amp;*$]. No need to copy and paste a whole new line to deal with 1 additional character. It also gives you the flexibility to take ignored characters as input or a runtime argument or read them in from a config file without crazy code generation.
This would be pretty simple to implement in constant space. As it is, each call to Replace could allocate a new string of size similar to the source string, which means you could end up producing more than 40 temporary copies with this method. As a side note, string.Equals has a version which can accept a StringComparison. OrdinalIgnoreCase would cause cause it to ignore differences in letter case, which means you could avoid all the changes of case. So, the constant-space comparison would involve the following sequence: * Get the first character (using an explicit index and the "char c = text[i];" method of reading characters). If it is not a letter (determined by char.IsLetter), keep moving forward. * Get the last letter character, using a similar method. * Compare the first and last letter, ignoring case. If they're not equal, it isn't a palindrome. If they are equal, move on to the second letter and the second letter from the end, and so forth. * Stop comparing letters when the two indexes match. If you made it this far, you've got a palindrome. Other general points: If you're making big lists of characters, you're probably doing something wrong. Static methods of the char type (IsLetter, IsNumeric) are typically a better way of determining the category of a character. It takes time and experience, but it helps to learn the side-effects of methods. Avoiding unnecessary memory allocations will help your efficiency and scalability. This obviously doesn't matter for simple cases, but it is good to know how to get the performance when you need it. If you're willing to take a small performance hit but write this example in a more elegant fashion, you can use LINQ and express this comparison in terms of two expressions (this is off the dome, so forgive me if it doesn't actually work): public static bool IsPalindrome(this string s) { return (from c in s where char.IsLetter(c) select c) .SequenceEqual(from c in s.Reverse() where char.IsLetter(c) select c); } I hope this was helpful. You're definitely doing very well for a month of programming, keep it up! 
You're doing great for a month of programming. Some things I noticed: 1) Static fields are global when they are only used in one method, Main. I would move them to Main (and take away static). 2) Use while loop instead of hardcoding iterations in a for loop for user input. 3) Try to modularize code more (separation of concerns). One example would be to move the replace code into its own method. See code link below for more examples. 4) Use StringBuilder when doing a lot of string manipulation. [Working Code Example](http://codepad.org/1t6s2oCp) 
It looks alright, although primitive. I'm not going to criticize you on your lack of optimization, but your way of doing it is not a good way. What you're essentially doing is creating many different and unnecessary strings that will need to be collected by the garbage collector. If you optimize a little bit, your program could run much faster. I would rewrite it for you so you would be able to see a better way to do it, but I need some sleep right now. Feel free to message me if you need any help.
&gt;What IDE do you use? Notepad++. It's the only one that I can stand. &gt;Not putting spaces between variables and operators. If you use Visual Studio, it will correct this automatically as you type. I recommend it. Yeah the VS thought police changing my formatting is why I stopped using VS 5 minutes after first opening it.
Again, VERY good for 1 month's learning - keep it up! Stylistic things that others haven't yet mentioned... Comment your code using // As a rule of thumb, aim for one comment sentence every 3 or 4 lines. Always comment loops, method and variable definitions Eliminate your output variable. Instead use: if(IsSentencePalindrome(sentence)) { // code here } else { // code here } Also, your for loop would be better as: while(sentence.ToLower()!="quit") { // code here } ... With appropriate indication to the user how to quit
This. Learn regular expressions by c# examples. Also, learn how to use string.Format() Example: string.Format("Hello {0}. Your hair is {1}.", name, hairColor)
Your method works, and your desire for learning more from us experts (cough, cough) is admirable. I'd use a method more like this for the comparison. Also, if removing unwanted characters is needed, use regex as someone else mentioned. static private bool IsSentencePalindrome(string phrase) { if (phrase.Length == 0) return true; int midPoint = (int)Math.Round((float)phrase.Length / 2F, MidpointRounding.AwayFromZero); string firstHalf = phrase.Substring(0, midPoint); string secondHalf = phrase.Substring(midPoint - 1); // subtract 1 due to 0 base secondHalf = new string(secondHalf.Reverse().ToArray()); return String.Compare(firstHalf, secondHalf, true) == 0; } I'd also add that this has no error checking. It's expected by the caller to catch any Exceptions. If you need help understanding any of it, I'm happy to explain! FYI, this has been tested.
Thanks for the reply, I'll try to lower the amount of strings I use next time. Could you rewrite this program in a form that uses less strings though? I'm not really sure on how I could personally do it.
I knew my huge list of of characters would most likely be idiotic in the point of view of some other coders, though considering how I'm only in an applied grade ten class I've decided to go with it anyways. I like the idea of constant-space comparison, but doesn't it basically have the same result as : length = phrase.Length; char[] reversedPhrase = phrase.ToCharArray(); Array.Reverse(reversedPhrase); Sorry if my question is stupid, but I would rather make sure that I'm wrong/correct. 
I like the way you've made the code, looks so organized compared to mine. Also, I've checked some tutorials on StringBuilder, I'm not fully sure how could it benefit me in the program I'm making &gt;&lt;.
Will get rid of the output variable, thanks for advice on that. Also I do use // comments, it's just that I usually insert them once I'm done with most of the fixing / editing to the script. Is there a specific reason why that loop would be better than the one I'm currently using? Don't they basically do the same task? I'm yet to learn how to loop properly. :/
Error checking.. That actually gave me a few ideas, thanks. ^^ Also, I highly doubt removing any characters is needed, though I'm interested in the script you posted. Will try it out. 
What are the main benefits of using string.Format ? to save space? I'd just like to hear your opinion.
Will check that out, didn't know I could do that.. knowing that would've saved some of my time. Thanks for all of the help.
People are amazingly nice here :O
Advice from the pros: comment BEFORE you code. Seems weird at first but you will find that you end up writing code you meant to write first time, instead of spending ages in debug mode. The for loop will loop 1000 times and the user has no way of quitting until then (always think of the user). The while loop will finish when they decide they want to quit. It's not a 100% rule, but I avoid for and do-while loops wherever possible. Instead, I use foreach and while loops. Spend 5 minutes googling C# loops - time well spent...
Your attitude towards learning is great - we are responding to that :-)
I'll start commenting more often when I'm typing a script then, every 2~4 lines is good I guess? also could you explain what the debug mode is? Heard my teacher say that a few times. And for what situation would you use the "for" loop if the "while" loop seems to be more beneficial? Time to google some stuff x_x
Well usually I'm lazy and give up really fast, but I find C# quite fun. 
Code readability for one. It helps when laying out decimals and dates. Also (later) you will need to use this approach for internationalisation (google i18n).
Finished googling i18n, doesn't seem like something I'll be learning any time soon, literally. Though I understand the basic idea behind it, I guess.
The way that I would do it is I would use a stringbuilder, and I would loop through the starting string picking out whatever characters were valid to check(I'm guessing letters), then I would make it into a string, loop forwards while decrementing another parameter backwards. Make sure each character matches. I can write it when I have time, so just PM me, and I'll give you my email.
You can also configure the Thought Police to enforce your own formatting.
Strings are immutable, meaning after they are created they cannot change. Anytime you do a string.Replace you are really creating a new string object which will need to be garbage collected. StringBuilder on the other hand can be used to freely make changes to a string without this drawback. It's recommended that you use a StringBuilder when you plan to do a lot of string manipulations. It's just overall more efficient.
I could never get VS to let me use OTBS in the way that I wanted to.
Yes, all these approaches should give the same result, and all of them are no doubt appropriate for what you're currently working on. But if you ask a bunch of programmers about the "right" way to do something, you're certainly going to get a complex and pedantic answer (or, more often, twenty contradictory answers). It is part of our charm. string.ToCharArray will make a copy of the contents of the string. In .NET, strings are immutable, and any method which manipulates them (or returns their data in a form which could be manipulated, like a char array) will produce a copy of the string in question. This isn't necessarily a bad thing, and you'd never notice the difference unless you were calling such a method millions of times. Array.Reverse, on the other hand, alters the array in place and thus produces no copies. It was a very good question, hope that helped.
Thanks for the explanation. I'll stick to what I know for now though, too many things to learn at the moment. Your idea is really good though, I'll say that. ^^
If you are willing to put the time in, using visual studio 2010/11 developer preview and resharper is a nice combination when set up correctly, plus, if you are working to a certain style guide in a team, you can distribute the settings between the team so everybody adheres to the same style.
There isn't much specific to internet games, but rather these techniques can be used for any website you would like to automate communication with. I really like the Cookied-WebClient hack though. I've seen it implemented elsewhere and it is a fantastic little workaround to use cookies with the WebClient class.
Ah, damn it. I got all the way through that article thinking "yeah this looks useful, might give this a shot at work". Then realised it's not free :-(
Resharper does this too.
For posts like this one that are in a series, a link to a list of all articles in the series would be helpful so that I could start at the beginning (apologies if there is one and I just didn't see it!) Interesting topic.
Certainly a good point, I'll do it right the next time! This is the first article that talks about IL and reflection in this way: http://blog.filipekberg.se/2011/10/11/creating-static-methods-at-runtime/ FYI these topics will be covered a bit more in depth in an upcoming book.
Is there any performance increase using IL vs ASM?
Cool, thanks!
Two options from the top of my head: * .NET variant of Arduino with an IR blaster Be careful of a couple of resellers of these that hate open source while making most of their money from it. Use a netduino instead * Arduino with IR shield Write to the (virtual) serial port with the .NET SerialPort class - http://msdn.microsoft.com/en-us/library/system.io.ports.serialport.aspx 
Why not a merge instead of the : ?. ??ಠ_ಠ
Pretty easy, here's an example with a collection of strings... var list = new List&lt;String&gt; { "One", "Two", "Three" }; comboBox1.DataSource = list;
Or if you're not using data binding just want to get your list of strings into the listbox: foreach(string s in collection) listbox.Items.Add(new ListItem(s)); I prefer this because it more directly conforms to what you'd be doing if you actually wrote the html yourself (assuming asp.net and not webforms)
You can use the ComboBox.DisplayMember property to specify which property of the bound objects to display. For example, when binding to a collection of this class: public class ComboItemExample { public double Value; public ComboItemExample() { Value = new Random().NextDouble(); } public string ItemDisplayName { get { return "ItemExample: " + Value.ToString(); } } } After setting ComboBox.DataSource to the desired ComboItemExample collection, set comboBox1.DisplayMember = "ItemDisplayName"; To show the values of that property in the ComboBox EDIT: At runtime, the ComboBox.SelectedItem property will return the ComboItemExample corresponding to the current selection
I'd replace bool result; if(string.Compare(reversedString, phrase) == 0) { result = true; } else { result = false; } return result; with: return string.Compare(reversedString, phrase) == 0; Other than that, what everyone else has said really: use a regex with ToLower Also with the code: if (output == true) { Console.WriteLine("Your phrase is a Palindrome, press enter to continue."); Console.ReadLine(); Console.Clear(); } if (output == false) { Console.WriteLine("Your phrase is not a Palindrome, press enter to continue."); Console.ReadLine(); Console.Clear(); } the only difference is the word 'not', so think about a way to trim that code down. Also, you do not need to use if (output == true) you can you if (output) and if (!output) for a negative check
They are 2 very different languages used for 2 very different purposes. Best bet I think is just learn C# from the basics and then let yourself naturally bridge the concepts once you learn them. Things in PS that are stupidly easy will turn out much more difficult and visa versa so its best to start with a clean slate. Here is a really easy hand holding start. http://channel9.msdn.com/Series/C-Sharp-Fundamentals-Development-for-Absolute-Beginners I think once you get use to the no dynamic scripting type way of life you will find it a whole lot easier than PS. Coming from a more structured view of the world C# into the super loose PS world can be mind boggling, coming from the other direction most concepts in C# are in PS but stricter and more protected so should be easy (the basics at least). PS has some very strange twists and turns with scoping and contexts and the way collections are treated if there is one element etc. On the flip side C#/.Net stack these days is huge so its a long road ahead, but well well worth it. Also posting what you want to use it for may help people point you in a better direction. EDIT: Look at the roslyn CTP too. It provides a REPL shell in VS that will provide a nice transition if you are use to playing in a shell. http://blogs.msdn.com/b/visualstudio/archive/2011/10/19/introducing-the-microsoft-roslyn-ctp.aspx
Lolwut?
I actually thought powershell just provided a dynamic runtime for .NET based languages. I see it has it's own dynamic language! My bad.
Automatic driver installation failed for me, but they're readily available on his site. Took all of 2 minutes to get it to be usable. Should have also mentioned, there is also "helper" apps that (I'm guessing he wrote)... the one I primarily used was to an app that captures the IR signals from my tv remotes and gives you a plain text value... very handy.
A few minor complaints about the post: &gt; we have to use generic type parameters to specify the type of each value in our tuple... Not really. One can do Tuple.Create(1,2,3,4,5) &gt; What about iteration? How can we iterate through the values that we've specified in our tuples? I'm not sure why one would want to iterate over the values of a tuple. A tuple is not a list. The positions in a tuple are significant, unlike a list. IMHO, it's a good thing that it's not IEnumerable. &gt; The System.Tuple class implements the IComparable interface which means that it shouldn't be too big a deal comparing these things as long as we do it correctly. &gt; ... &gt; Console.WriteLine(tuple.Equals(second_tuple)); I'm assuming that this means that the values have to be compared using .Equals, which is not the case. One can just as easily do Console.WriteLine(tuple == second_tuple)
What is a Tuple? Why would I use one? The article is written at too low a level to assume the reader doesn't care about this information. If the author assumes the reader already understands what tuples are and why he would need them, then why make an article with such a basic introduction?
I looked at Tuples when 4.0 was released and thought "ooh - nice!" Now when I see Tuples in use I think "can't... leave... code... as... is... must... refactor...". For example, I feel bankAccount.Item1 * bankAccount.Item2 makes for unreadable code. Why not just create a class or struct?
Ive used it a couple times to return sets of data from a function. I didn't create an object because this was the only place I needed to return this grouping of objects. Although when I used it it was only for 3 object. Any more then 3 and I think it starts to get messy. This isn't a object type you would use often, its mostly special cases. Edit: I would like to also note the [Pair Class](http://msdn.microsoft.com/en-us/library/system.web.ui.pair.aspx) It like the truple class but only can hold 2 objects. I would use this over the truple if you have only 2 items.
I only do web, so I guess the Client Profile part never occurred to me. Youre right about the truple being better because it is generic. I didnt check the param types in a pair. Its been awhile since I've needed it. 
I came here to ask these exact questions. Why would someone use a tuple over any other type of ordered list? EDIT: bad example.
Yes, python tuples are clearly easier to define and declare. However, since python is weakly typed, it can become very hard to determine what exactly is in a tuple. While weakly typed languages are clearly easier to write in, they are often harder to maintain and bug trace.
Enumerable instances on tuples aren't crazy, nor is an indexing property. It costs nothing, and simply serves to simplify code which receives a tuple but expects an array or list. Simple data access code, for example, is a nice place for some tuples, but any IDataRecord-based interface gives people easy options for treating the record like an indexed list. Why make a trade-off when you can write something that suits every occasion? Due to stuff like this and the aforementioned lack of structural equality, I'm probably sticking with my own tuple implementation for the time being.
It's not free but TekPub has a "Mastering C# 4.0" series that is presented by Jon Skeet. I've seen a couple of "episodes" and it's pretty solid. It will lead you through the basics to the more advanced stuff. [TekPub - Mastering C# 4.0](http://tekpub.com/productions/csharp4) **Disclaimer:** I do not work for TekPub.
I like Tuples, but typically when I use them I feel like I'm being needlessly lazy and should be defining a strongly typed object or something to better describe what I'm doing. Of course I guess there are mathematical programming situations where Tuples make a ton more sense, but in terms of general data processing it seems to just make things less defined for the next programmer to come along and see a Tuple&lt;string, string, string&gt;.
I guess what I like about powershell that's driving me nuts about C# is hard to pin down- but here goes: in powershell, you can always pipe a given object to Get-Member and get some visibility of the object's methods and properties very quickly. This is absolutely awesome, and speeds up your learning exponentially. So I have two questions: does C# use any of the pipeline concept, and does C# have a get member equivalent? For what it's worth, if you're reading this as a powershell guy, be sure and check out the Add-Type cmdlet. It allows you to include C# in your powershell scripts.
I've already handed in my project so no point in making it better anymore, though I'm still working on it actually. Though I don't understand how: return string.Compare(reversedString, phrase) == 0; still works instead of : if(string.Compare(reversedString, phrase) == 0) { result = true; } else { result = false; } return result;
Well then [KeyValuePair&lt;TKey, TValue&gt;](http://msdn.microsoft.com/en-us/library/5tbh8a42.aspx) in [System.Collections.Generic](http://msdn.microsoft.com/en-us/library/0sbxh9x2.aspx) would be an even better choice, since it's generic, an doesn't depend on System.Web.
Only if all the objects you are returning are of the same type. The truple handles multiple object types.
Yes, out would always work and is nice because you have your don't have to split out your variables like you would with the truple. But is it neater? I dont know about that. I dont use them often because I like to keep the output and input separate. The input are params the output is the return. Using them to often I think can lead to confusing code because you have to be more mindful that some of your functions take special params. It really depends on the context of the function though.
&gt; Only if all the objects you are returning are of the same type. The truple handles multiple object types. No, that is the case with the System.Tuple&lt;T1, [...]&gt; also, since the Tuple class is generic and strongly typed like KeyValuePair&lt;TKey, TValue&gt;. The System.Web.UI.Pair class on the other hand would support any mix of types, since it is non-generic and therefore uses System.Object. But then, both Tuple and KeyValuePair could be used with System.Object as type parameter(s), thus behaving like System.Web.UI.Pair.
[Here is my version on an iterable Tuple that includes an indexer](http://dontbreakthebuild.com/2012/01/10/in-response-to-iterating-over-a-tuple/)
One thing I must note is that the structure is semi-jacked up. It was my first commit after using Visual Studio. Upcoming Plans: - Fix directory structure - Create a Mono branch so that the project can be easily used in MonoDevelop - Of course, add more combinators - Unit tests? 
I don't know...for a library it would require more work on your end user as they have to declare everything first and then pass it in. 
Agreed. I came in to plug them. I have a project where my predecessor loaded HTML as XML but had all sorts of scrub methods to make the HTML XML compatible. I switched over to HTMLAgilityPack and it made things far easier. I wish something like HTMLAgilityPack had a native equivalent so I didn't have to go 3rd party.
I'm confused about this patterns that appears in each of the combinator implementations: &gt; public static T K&lt;T&gt;(this T me, Action&lt;T&gt; action) &gt; { &gt; if (me is IEnumerable&lt;T&gt;) &gt; { Is it possible for T to ever be an IEnumerable&lt;T&gt;?
Yes, the type that's supplied may be an enumerable type.
Is that a typo in the K combinator? You're enumerating each of the values that me contains and then calling an action on me (rather than the contained values). I know it's arguing about the choice of color for your dog shed at this point, but I might consider refactoring your methods to account for the different use cases (single objects vs. lists of objects). To use the K combinator as an example... public static IEnumerable&lt;T&gt; K&lt;T&gt;(this IEnumerable&lt;T&gt; me, Action&lt;T&gt; action) { foreach (var it in me) { it.K(action); } return me; } public static T K&lt;T&gt;(this T me, Action&lt;T&gt; action) { action(me); return me; }
&gt; Using an Object type in a generic type defeats the purpose.You use generics so you don't have to do type casting. Yes, but it isn't in any way worse than the System.Web.UI.Pair, because you have to cast in both cases. &gt; Tuple is not the same as KeyValuePair. No, but Tuple with two type parameters (System.Tuple&lt;T1, T2&gt;) is very similar. Tuple&lt;string, int&gt; t = new Tuple&lt;string, int&gt;("string", 1); KeyValuePair&lt;string, int&gt; p = new KeyValuePair&lt;string, int&gt;("string", 1); // t.Item1 == p.Key // t.Item1 is string // p.Key is string // t.Item2 == p.Value // t.Item2 is int // p.Value is int 
Nope- this is my first compiled "proper" language. I've done a little work with other object-oriented scripting languages, built a few CRUD web-apps, etc. So far the challenges with C# have been managing complexity and Non-linear thought in general. But I'll get there, thanks for the discouragement. :)
I appreciate your feedback. I misunderstood the stackoverflow post and tried that when I got in and realized the error. I believe I have a new solution to the problem but I will thoroughly test it before commit it. 
WinForms isn't fully supported on Mono.
I also misread the free/open-source bit. Though it still looks very good.
I've programmed for quite a while in both. I started with WinForms and moved on to WPF. I struggled a little bit at first, trying to grasp the way WPF works as a whole. Once I got past that, all I can say is, I'd never go back to WinForms. If you like Drag and Drop, WinForms is for you. If you like something more structured, with more control, especially for resizing, detail,themes, etc..., WPF is the way to go. In performance, it's definitely the winner in almost all cases (since it's pretty much GPU driven). Do not try to use Drag/Drop with WPF, it's quite Aweful, even in Expression. It's mostly good for a view of what you're trying to code.
That is awesome. Trying this out as well! 
For Science!
It's returning the first result of the Invoke call cast as a GetResponse object, actually. What I'm trying to figure out is what in the hell the Invoke call does. The documentation is horrid: http://msdn.microsoft.com/en-us/library/system.web.services.protocols.soaphttpclientprotocol.invoke.aspx
This looks like generated wrapper code for calling a SOAP web service. Usually this is created by something like Wsdl.exe. The code shouldn't actually call itself (otherwise you'll have an infinite loop and StackOverflowException!). The .Invoke wraps up the request and passes it off to a proxy class that returns the results from the web service. This might be helpful; http://msdn.microsoft.com/en-us/library/system.web.services.protocols.soaphttpclientprotocol.invoke.aspx
That's exactly what it is. I just didn't get how it actually worked. I've already been reading through that exact link, but I'm a little unfamiliar with web services and such.
The .Invoke "calls an XML Web service method synchronously using SOAP". So in your case it should return the next parcel based upon the input parameters (SessionId/TaskId/QueueNumber).
Hm, that makes sense. How would I go about figuring out what webservice this is calling, then? For reference, this is a business app with little-to-no documentation.
This should hopefully explain in a bit more detail, the anatomy and 'Order SOAP Extensions Methods are Invoked' sections in particular: http://msdn.microsoft.com/en-us/library/esw638yk%28vs.71%29.aspx
AHA! Yes there is! Thanks so much! :D
This makes sense. It sucks that people might have to go back and refactor old code, but it's the obvious choice moving forward with IEnemurable and lambdas. E: and it's not like we don't already have a thousand other reasons for tweaking old code. 
Personally I would look at MVC.Net and start learning the web stack and understanding how that hangs together. Alternatively, take a look at WPF and try converting one of your Winforms apps into a WPF app. You know the domain, so it will be about learning WPF and little else. Try coding it using modern, up-to-date patterns (I'm thinking MVVM here) and see how you get on.
Move from Forms to WPF and from WPF to silverlight (an asynchronous version of WPF that's closer to the XAML Windows 8 will use); then you'll be ready to start writing casual games for Windows 8.
I used to be a windows-forms exclusive developer until I started looking for a new job and saw that there are very few jobs like that. Most are ASP.NET (and a LOT are MVC). I learned webforms (easy, easy transition - designed to be very similar to winforms) and my new job gave me some time to learn MVC which really isn't too bad. Also, if you want to try a game out take a look at the XNA framework. It's very nice and easy to use, and there are a ton of great examples for it.
Agreed with the two posters - professionally, you pretty much have to chose between MVC and WPF (or both) if you are going to do anything with an interface. WinForms is becoming more and more obsolete and plain old ASP.NET is going the same way. MVVM ftw.
Yup, look into impersonation. Here's a code project class. http://www.codeproject.com/KB/cs/zetaimpersonator.aspx I've only used this in asp.net but I think it should work for WinForms. 
perfect, thanks!
I think running it as a scheduled task would work.
Basically we have a custom configuration for VNC on client machines that prevent logins without the client being prompted first. Situations arise where the VNC client crashes while connected and the person is not available to accept the incoming connection again. The app makes the registry changes, restarts the service then sleeps for 30 minutes before reverting the settings back to allow time to reconnect (there's some additional logging for security but not really relevant). If it wasn't for the "as-needed" nature of the app I think the Scheduled Task would be the way to go. 
I agree with the other comments here that you should consider looking at WPF (for desktop apps) or MVC (for web apps). However, those frameworks are a little daunting to just jump into. It's best to get a decent grasp on OO development before you take that step. WinFoms is a quick and easy way to learn some of the basics. Even after all this time, I still find myself falling back on whipping up a quick WinForms all to work out some kinks in a code block, or just to do a little performance testing. If you wanted to work on a little game, XNA is a good framework to look at, but again you can work through the fundamentals of game development in a WinForms app. In this case you want to use this as a way to 1) figure out what the basic moving parts of a game are, and 2) learn OO programming concepts. You need to be aware of which pieces you are building are independent of the presentation layer (WinForms); those code blocks are what you would be able to take with you when you then move to a more robust framework like XNA. Source: I'm a developer, C++ (20 years), C# (10 years).
This is incredible. 
Fixed in current version.
For C#, a guy I know made a *lot* of tutorials for TheNewBoston on YouTube. You can watch them [here](http://www.youtube.com/playlist?list=PL428E3E1A12DDED68). As for C++, [learncpp](http://www.learncpp.com/) is an excellent resource, but doesn't cover the basic basics (e.g. what the difference is between a short and an int). If you need basic basic help, or are having an issue with anything I suggest asking over in [/r/learnprogramming](/r/learnprogramming) since it has more readers and you're almost guaranteed help.
I've been using [3DBuzz](http://www.3dbuzz.com/vbforum/sv_home.php) they have alot of tutorials for c#, tho they are using Microsoft Visual C# 2005, I haven't had any trouble yet. they also teach from a you want to be a game programmer type of view rather then just a programmer.
[Rob Miles' C# Yellow Book.](http://www.csharpcourse.com/) It's a really great introduction to programming and teaches it in C#. It's great.
[This](http://www.csharp-station.com/Tutorial/CSharp).
Oops! I posted the YouTube video series too. The series is so clear and informative.
Which library are you referring to?
http://code.google.com/p/mvc-mini-profiler/
Oh, I you mean that. I guess I got thrown off when you described it as an ajax library. If I'm not mistaken, it doesn't have any ajax involved. It just shows the results after each request and doesn't go back to the server.
I know you! You're *that guy*.
&gt;Many people say “but it’s interpreted”... Who? I have never heard some one claim this. If I did, I'd likely just stop talking to them about programming, as it would be clear they have no idea what they are talking about.
It does, to get and display results it calls fetchresults in Includes.js, which makes a jquery ajax call: $.ajax({ url: options.path + 'mini-profiler-results', data: { id: id, clientPerformance: clientPerformance, popup: 1 }, dataType: 'json', type: 'POST', success: function (json) { fetchedIds.push(id); buttonShow(json); }, complete: function () { fetchingIds.splice(idx, 1); } }); I have funny bugs where the in-memory state is reset but the ajax request hasn't fired yet, resulting in a 500 when debugging.
In quickly analyzing the situation there a couple of quick options I would consider. 1. Create a control container class that builds and registers the event handling logic for each control added to the container. 2. Put the event handling logic in a base class then use controls that derive from both the base class and the original control class. Either option will obscure out the event handling logic so its not coupled to each control object instance, which will definitely become a huge maintenance nightmare.
If I've understood this correctly:- Fact1: DrawingPanel contains a number of low level event handlers. Fact2: There are currently several of these low level event handlers subscribing to the same low level event. Fact3: Currently each low level event handler wraps selected components and signals a higher level event to a control layer. Fact4: Currently the wrapping uses code duplication. Based on this I would: 1. Have a single low level event handler per low level event. 2. The low level event handler wraps selected components, and signals to a control layer event handler. 3. The control layer event handler calls the relevent use case functions, so that behavioural code is confined to the control layer. 4. If multiple low level handlers are doing the same work (wrapping) then factor out the common work to a separate function. 
The problem is, I fail at removing duplication in the wrapping at the level I want to remove it at. The low level handlers look like this: // called by WinForms.ToolStripItem.Clicl private void copyInComponentSetMenu(object sender, EventArgs e) { if (CopyRequest == null) return; ComponentSetEventArgument e = new ComponentsetEventArgument(this.selectedComponents); CopyRequest(this, e); } private void cutInComponentSetMenu(object sender, EventArgs e) { if (CutRequest == null) return; ComponentSetEventArgument e = new ComponentsetEventArgument(this.selectedComponents); CutRequest(this, e); } As you can see, the mere difference between the two methods is the event that is checked for null and signalled. However, if I try to introduce a higher order function or a class or anything that uses "CutRequest" (or any multiway delegate, for that matter) as a parameter, this fails as soon as an additional delegate is added, because this creates a new delegate. 
Maybe wrapping the handler in a class:- public class LowLevelHandler { public delegate void HighLevelHandler(object obj, ComponentSetEventArgument e); HighLevelHandler highLevelHandler; public LowLevelHandler(HighLevelHandler highLevelHandler) { this.highLevelHandler = highLevelHandler; } public void opInComponentSetMenu(object sender, EventArgs e) { if (highLevelHandler == null) return; ComponentSetEventArgument args = new ComponentSetEventArgument(); highLevelHandler(this, args); } } public class ComponentSetEventArgument: EventArgs { public ComponentSetEventArgument() { } } private void highLevelHandler1(object obj, ComponentSetEventArgument args) { } private void copyHandler1(object obj, ComponentSetEventArgument args) { } private void cutHandler1(object obj, ComponentSetEventArgument args) { } void test() { LowLevelHandler highLevelHandler = new LowLevelHandler(highLevelHandler1); LowLevelHandler copyHandler = new LowLevelHandler(copyHandler1); LowLevelHandler cutHandler = new LowLevelHandler(cutHandler1); }
1) I'm pretty sure I have code that will be affected by this change 2) I'm still all in favor of the change. I'll scour ever last foreach if I have to, so that I might never have to scour them for again!
Leading four spaces _and_ a newline separating it from the previous paragraph.
If you are looking for hard copies, take a look at [Head First](http://www.amazon.com/s/ref=nb_sb_ss_c_1_8?url=search-alias%3Dstripbooks&amp;field-keywords=head+first&amp;x=0&amp;y=0&amp;sprefix=head+fir%2Caps%2C147), these books present all types programming in an easy to learn way. 
What you want is a List. [Here](http://stackoverflow.com/questions/8494077/adding-members-to-c-sharp-list-using-indexes)'s a quasi-relevant stackoverflow that might point you in the right direction.
Like someone else here mentioned, you want a List. That being said, I don't know if there is a way to resize an array in C#, but I would be inclined to say no. You'd have to copy the elements of the array to a new array with the new size. But again, no reason to not use a List here, as it handles all of that for you as you add and remove elements from it.
Will this Array.Resize reset whats already been set ?:)
Just curious, why not take a list?
I want to be able to make an array from a struct and assign its variables in a for loop, not sure if can do in list. (and i'm a bit afraid of generics)
No it will not reset. http://en.wikipedia.org/wiki/C_Sharp_(programming_language)#Generics its not that scary, I promise. Take a look. When you have questions, post them. 
I will definitely give them a look over. But for now I just used the array.resize, and with one or two changes to the code worked perfectly! Thanks you!
For loops are nice and all. But what you want is a **foreach** loop. var myList = new List&lt;T&gt;(); ...code to add items to the list ... foreach(var thingy in myList) { .. code to deal with thingy. } Don't be afraid. Never be afraid. Except when rolling code to prod when your QA people suck.
I like how you put it, thanks man! Will definitely use when the code permits it!
That's why I was asking why OP needs to have arrays. If you really need that type of performance, arrays might give you an edge. On the other hand you can initiate the list with the proper (starting-) size if you know it. That should help if those cases where you have a bunch of stuff that you want to throw in it as there is less guess work by the CLR to be done.
Why are you flattening a struct down to an array? You lose the semantic information that the property names provide by doing this.
&gt; There's also ArrayList I thought we weren't to never speak of that class ever again?!
Ugh. No. Use a generic.
I don't think there is much. The problem is that ArrayList isn't generic. And .NET has really, really good generic support compared to Java, so List&lt;T&gt; is preferred basically always.
The ArrayList class in C# is not generic so stores items within it as objects which means you'll need to cast items back to their types when you want to use them. I don't know much about Java's ArrayList but if the above explanation doesn't show any difference, then the two are probably the same. EDIT: Changed 'elements' to 'objects'.
If you use an array list to store value types it will box them, reducing in poor performance (i.e: convert them to reference types). If you use a generic collection to store value types it will not box them, resulting in much better performance. 
Here is his original list on stack overflow: http://stackoverflow.com/questions/411906/c-sharp-net-design-flaws/1181366#1181366 I'm a c# noob, so I don't really understand a lot of his complaints, but why the hell does he want #2 ? &gt;2. allow overriding a struct's empty constructor, Can someone show an example of where this would be used?
I haven't written csharp in a while but couldnt you do Struct sample { Int sample = 3 } Now in the default constructor sample =3
No, you can't; that would be a compile time error. Even if it compiled, that assignment would be parsed before entering the constructor IIRC, and since all constructors must initialize all fields, it would get overwritten.
Thanks for the heads up on /r/dotnet! Membership, though, is still very low even given separation. For example /r/Python is huge, and Django, a single Python framework, has as many subscribers as /r/dotnet has. 
Maybe we're misunderstanding each other. For example: public class StructTest { public int a; public int b = 4; public StructTest() { a = 3; } } So this compiles and runs completely fine i.e new StructTest().b == 4; As long as your assigning a compile time constant you can initialize whatever you want. Anything that's a runtime thing has to be done in the constructor. Also now that I think about it, I already knew you could override the default constructor you just have to initialize all fields so why is this even on the list of flaws or am I missing the point? 
Err... that works because you are creating a *class*, not a struct. public struct StructTest { public int a; public int b = 4; public StructTest() { a = 3; } } Generates the following compile time errors: 'StructTest.b': cannot have instance field initializers in structs Structs cannot contain explicit parameterless constructors
Forgive me...what is entity spaces?
Googling EntitySpaces yields marvellous results.. The first hit is their main page, with an explanation of their product(s). Second hit is Wikipedia. These wonderful times we live in.
It's also worth noting the fact that it's for Windows Forms.
Windows Forms controls can be hosted in WPF.
I don't see how this is making it much better for WPF. You would just be missing out on a lot of WPF features.
I write all my comments in wingdings. Seriously tho - the color coding is there - it would be nice to do things like color FIX NOW comments in red, INFO comments in green, TODO comments in blue - scans well. 
really? i just write out the swear word instead of the symbols.
There is the Task List feature in Visual Studio. Have you seen that? It doesn't do highlighting, but at least gives you a list of all the TODO comments in your project. You can add your own keywords like FIXME or HACK to it as well.
[VSCommands](http://visualstudiogallery.msdn.microsoft.com/d491911d-97f3-4cf6-87b0-6a2882120acf?SRC=Home) already has this functionality, I believe. Not quite as elaborate (no varying sizes), but enough: color and styling on TODO and other specially-tagged comments is sufficient for me.
I'm not entirely sure why anyone would choose this product over existing free solutions like: nHibernate, Entity Framework, or iBatis? It must be quite amazing to enter the ORM space with a price tag. 
I've used at work, it's not.
I would search http://stackoverflow.com/ for specifics of the API you want to use. Some of the APIs (like Twitter's) have library you can plug into to save even more time. StackOverflow is my goto place for questions like yours. (Sorry for the delay, been a crazy weekend)
Nullable types are not reference types, [they are structs](http://msdn.microsoft.com/en-us/library/b3h38hb0.aspx). The struct just has a boolean field indicating whether the value has been set. #18 is actually a pretty annoying problem: void Foo&lt;T&gt;(T x) where T : class void Foo&lt;T&gt;(T? x) where T : struct C# can't resolve this overload, even though every instance is completely obvious because you either have a struct or a class. It seems the type constraints aren't used at all in overload resolution. Every point in that list is still perfectly valid as far as I can see. If you have another example of a "gap" in my understanding, I'd be happy to explain why I'm right. ;-)
Any way to spin off the treeview population into a separate thread?
the treeview is in the UI thread, so i don't think it is possible 
It is not an option , becausse if i check a treenode, the subnodes need to be loaded and checked as well, and that is really slow; By the way, that was my initial approach
That's not a line, that's the border of your outset toolbar. I'm pretty sure you can change that to flat somewhere, but you'll also lose something on the bottom.
You're right, my mistake, and thanks for being civil about it. I'll review the list later today and see if I have any significant disagreements.
use a background worker that sends updates (via an event) as it progresses. Then display a progress bar, and hook into the progress updates and call application.doevents after each progress update to keep the UI updating.
Cross-threading might help here... you can use a backgroundworker to do this..
1. Use a different thread (instead of main thread) to add the items or call Application.DoEvents each time you add an item. 2. Use the .BeginUpdate() method before adding million items. This will stop redrawing of ListView until you call .EndUpdate() thus will shorten the duration of adding all. Example for second: ListView1.BeginUpdate(); // for loop code (adding items) here ListView1.EndUpdate();
Is there a reason you need a million entries in a UI item? What's its purpose? (If all else fails, throw up a dialog box to let the user know some serious processing is going on.)
Thank you, i will check that approach tomorrow!
Set the border style of the control to 'Flat'.
What technology are you using? I have used a wpf TreeView VirtualizingStackPanel.IsVirtualizing to get good performance http://msdn.microsoft.com/en-us/library/cc716882.aspx
Correct! As long as you evaluate the loop variable before the next iteration, you'll get the "expected" value.
Here's some interesting trivia for you. As a side-effect of the current behavior, referencing the loop variable within the loop allows the runtime to create just one delegate instance no matter how many times you loop: // One instance of the delegate PERIOD foreach( var id in myIds ) { query = query.Where( n =&gt; n.Id == id ); } Whereas: // An instance of the delegate PER ITERATION OF THE LOOP foreach( var id in myIds ) { var loopId = id; query = query.Where( n =&gt; n.Id == loopId ); } So if you want to minimize object creation (**though generally, you really shouldn't care**), use the first version (that gives you a warning) and be sure you evaluate the delegate at each iteration (this is a bad example, actually, because ToList() will create a List at each iteration, but you get the point...). When they fix this to be more intuitive, you'll have no control over this object creation UNLESS you create a special extension method: public static class IEnumerableExtensions { public static IEnumerable&lt;TSource&gt; WhereWith&lt;TSource,TWith&gt;( this IEnumerable&lt;TSource&gt; enumerable, TWith with, Func&lt;TSource,TWith,bool&gt; predicate ) { foreach( var item in enumerable ) { if( predicate( item, with ) ) { yield return item; } } } } Which you'd invoke like so: // One iteration of the delegate PERIOD foreach( var id in myIds ) { query = query.WhereWith( with: id, predicate: ( n, i ) =&gt; n.Id == i ); } Can you see why? This is all very esoteric, of course, but I think it's interesting and it can matter in the right application. :)
You're welcome, just remember to pass it forward. It wasn't too long ago when I was in the same position as you were. [3 years and 14 days ago](http://www.reddit.com/r/programming/comments/7wa4l/suggest_a_programming_language_for_a_newbie_to/) wasn't too long ago was it?
The &lt;Serializable()&gt; [attribute](http://blog.kowalczyk.info/article/Serialization-in-C.html) might work.
It does work! I'm not sure it's the best solution in this particular set of circumstances (I have some other requirements that make it impractical), but it is a fantastic way to solve the problem. I'm definitely filing that away. I'm also now looking into how the serializer works, and maybe using SerializationInfo to solve flexibility issues with passing a hard-coded interface.
Can you clarify things a bit? What exactly are you trying to 'flatten' it into? A decorator maintains a reference to the decorated component. Component defines a specific interface that the decorator also implements, typically in order to add additional functionality to the class. I'm guessing that's GetWhereClause() in this case? What do you want GetWhereClause() to return? Is the second block of code the implementation of your GetWhereClause() method? So it looks to me like you also need to be able to create a SavedSearch via a similar mechanism. Why not add a new method (for lack of a better term, GetSavedSearch) that constructs your saved search, sets the properties the decorator cares about, and returns it? public SavedSearch GetSavedSearch() { var result = baseComponent.GetSavedSearch(); /* Set the decorator-specific data */ return result; } 
The Head-First series is well liked. I know engineers with decades of experience who are new to C# and found the series valuable. It targets the novice, so there's likely to be information you're already familiar with, but the presentation is enjoyable so I don't think you'll mind much. You may want to move quickly through the first few chapters though. I'd recommend their C#, OOA&amp;D, and Design Patterns books. The OOA&amp;D book is in Java, but as long as you've done a few small projects, you should be able to follow along. Despite their target audience, I think you'll end up with at least two of these books on your shelf for many years to come. ISBN#s follow: [0596008678](http://www.amazon.com/s?field-keywords=0596008678) , [0596007124](http://www.amazon.com/s?field-keywords=0596007124) , [1449380344](http://www.amazon.com/s?field-keywords=1449380344). They're available for kindle as well. The other series I recommend to everyone is the Effective C# series. It focuses on best practices and the sort of tidbits you'd glean from months of code review with experts: [0321658701](http://www.amazon.com/s?field-keywords=0321658701) and [0321485890](http://www.amazon.com/s?field-keywords=0321485890). They're also available for kindle. It's not the high-level information you're asking for, but if you're serious about C#, these will prove invaluable.
Thanks, I was confusing the two, procedural programming is what I meant. That was probably preventing me finding information as I was searching for things like functional vs OO.
I found the [C# Yellow Book](http://www.csharpcourse.com/) useful and [this site](http://en.csharp-online.net/Visual_CSharp_Certification%2C_Development%2C_Studio%2C_Training%2C_Tutorials) has quite a few useful tutorials and guides.
Google. Seriously. Most books I read are just full of stuff that's either explained a way over complicated manner, or are just full of code examples I could have got off dreamincode, code project, git hub etc. Look up the stuff you want to learn, hit up MSDN (and the forums). Everyone's different though I guess, especially when it comes to learning.
&gt;`1.` non-nullable reference types as a complement to nullable value types, This is the reverse problem of adding Nullable&lt;T&gt; to the BCL. If you make a Nullable&lt;int&gt; into int you'll get compile time errors to fix if there are any. If you change an int to an int? you're going to have to look carefully at your code path. The same would apply to changing a property/parameter NonNullable reference type back to the regular type. What I'm saying is I think mixing the two concepts would be a mess. Structs which are passed by reference would make a lot more sense. &gt;`2.` allow overriding a struct's empty constructor, I agree here. I've seen the arguments against it and I just don't buy it. &gt;`3.` allow generic type constraints to specify sealed classes, Assume I have `sealed class foo { }` and I have some method I want to write `bar&lt;T&gt;(T baz) where T : foo`, there's nothing you can add in the where clause that wouldn't be accomplished by writing your method `bar(foo baz)`. Calls to other generic methods with constraints you would have added to this method would have their constraints satisfied. &gt;`4.` I agree with another poster here that requested arbitrary constructor signatures when used as constraints, ie. where T : new(string), or where T : new(string, int), I sort of agree. Remember the language is designed to not frustrate the consumer, it says nothing about not frustrating the library designer. &gt;`5.` I also agree with another poster here about fixing events, both for empty event lists and in the concurrent setting (though the latter is tricky), I assume you mean this scenario: `var handler = PropertyChanged; if (handler != null) handler(this, ...);` It seems perfectly reasonable that you'd pull a property or event into a local variable before using it in thread safe code. I have the feeling there's more to this complaint that I'm not getting. &gt;`6.` operators should be defined as extension methods, and not as static methods of the class (or not just as static methods at least), Extension methods are much newer than operator overloading, your suggestion breaks backward compatibility. I also don't see what this buys you. &gt;`7.` allow static properties and methods for interfaces (Java has this, but C# does not), I've occasionally run into this, but I just remember C# is telling me to not bake in bad design. Interfaces are meant to be instance contracts. &gt;`8.` allow event initialization in object initializers (only fields and properties are currently allowed), Agreed. &gt;`9.` why is the "object initializer" syntax only usable when creating an object? Why not make it available at any time, ie. var e = new Foo(); e { Bar = baz }; Agreed. &gt;`10.` fix quadratic enumerable behaviour, Got me here. &gt;`11.` all collections should have immutable snapshots for iteration (ie. mutating the collection should not invalidate the iterator), Do you think this is good idea? What if I remove a big chunk of items, resort, or anything else? If you want complete control there's still `for`, and if you want to change a collection while you're iterating without using `for` you can `foreach (var item in new List&lt;T&gt;(items))` &gt;`12.` tuples are easy to add, but an efficient closed algebraic type like "Either" is not, so I'd love some way to declare a closed algebraic type and enforce exhaustive pattern matching on it (basically first-class support for the visitor pattern, but far more efficient); so just take enums, extend them with exhaustive pattern matching support, and don't allow invalid cases, You know more math than I do. &gt;`13.` I'd love support for pattern matching in general, but at the very least for object type testing; I also kinda like the switch syntax proposed in another post here, See above. &gt;`14.` I agree with another post that the System.IO classes, like Stream, are somewhat poorly designed; any interface that requires some implementations to throw NotSupportException is a bad design, I agree that any interface (or base implementation) that requires an exception be thrown is bad design. I haven't done enough inheriting from Stream to know exactly what you're talking about. &gt;`15.` IList should be much simpler than it is; in fact, this may be true for many of the concrete collection interfaces, like ICollection, `ICollection` is about as simple as you can get. Is your complaint the `SyncRoot`? &gt;`16.` too many methods throw exceptions, like IDictionary for instance, I assume you mean `dict[key]` where key isn't in the dictionary doesn't just return null. How would you differentiate between a null value and a value that doesn't exist? You'd have to use ContainsKey, and that's no less code than TryGetValue, both of which are a lot more intuitive than the indexer silently returning null. &gt;`17.` I would prefer a form of checked exceptions better than that available in Java (see the research on type and effect systems for how this can be done), The potential for misusing this system is too great to make it useful in practice. See WarningException for an example of a class that shouldn't exist. Validation is best left out of exceptions, and exceptions should truly be "exceptional". This is why IDataErrorInfo and the like exist. &gt;`18.` fix various annoying corner cases in generic method overload resolution; for instance, try providing two overloaded extension methods, one that operates on reference types, and the other on nullable struct types, and see how your type inference likes that, I actually tried your example from the other post and it worked as expected. Do you have another example? `static void Main(string[] args) { A((int?)1); A("hello"); }` `static void A&lt;T&gt;(T a) where T : class { Console.WriteLine("class"); }` `static void A&lt;T&gt;(T? a) where T : struct { Console.WriteLine("struct"); }` I assume this works because T? is Nullable&lt;T&gt;. But yeah, you're right, constraints are not part of the method signature. I'd argue this is good design, not that there aren't already bad things that can happen with type inference. &gt;`19.` provide a way to safely reflect on field and member names for interfaces like INotifyPropertyChanged, that take the field name as a string; you can do this by using an extension method that takes a lambda with a MemberExpression, ie. () =&gt; Foo, but that's not very efficient, 100% agree. Currently I raise a TypedPropertyChanged event which has a method in the event args called IsProperty which takes a LambdaExpression. It uses ToString() so the expression never gets compiled but it still just seems wrong. OldValue and NewValue would be appreciated too, mainly for event unsubscription/subscription. &gt;`20.` allow operators in interfaces, and make all core number types implement IArithmetic; other useful shared operator interfaces are possible as well, What would you gain by having operators in interfaces? IArithmetic, yes. &gt;`21.` make it harder to mutate object fields/properties, or at the very least, allow annotating immutable fields and make the type checker enforce it (just treat it as getter-only property fer chrissakes, it's not hard!); in fact, unify fields and properties in a more sensible way since there's no point in having both; C# 3.0's automatic properties are a first step in this direction, but they don't go far enough, If you get rid of fields you necessarily add methods for every piece of private data you wish to store at the class level. &gt;`22.` simplify declaring constructors; I like F#'s approach, but the other post here that requires simply "new" instead of the class name is better at least, It doesn't solve any problem, it's just different, not better.
Absolutely! This is the best programming book I have ever read.
That's what I usually do too, msdn, stack overflow etc., if I want to know how to do something or how a function works. But I'm kind of looking more for OO design principles, when to use classes and methods and things like that. 
&gt; But yeah, you're right, constraints are not part of the method signature. I'd argue this is good design, not that there aren't already bad things that can happen with type inference. I just now ran into another example of this problem. I have an IEnumerable&lt;TStruct&gt; and I want to call SingleOrDefault. But of course, for default to be meaningful, it has to be a nullable type, which structs are not. I then can't use coalescing operators or other null checks for the results: var x = list.SingleOrDefault(z =&gt; z.Foo == 1) ?? list.SingleOrDefault(z =&gt; z.Foo == 3); If overloads used type constraints, they could have defined the following two overloads of SingleOrDefault, and the above code would have worked perfectly for structs too: IEnumerable&lt;T?&gt; SingleOrDefault&lt;T&gt;(this IEnumerable&lt;T&gt; ie, Func&lt;T, bool&gt; func) where T : struct IEnumerable&lt;T&gt; SingleOrDefault&lt;T&gt;(this IEnumerable&lt;T&gt; ie, Func&lt;T, bool&gt; func) where T : class
What environment are you using? I don't believe you'd be able to in a winforms application, perhaps wpf though.
Do you create the main form on your login screen? If so, you can create an overload for your main forms constructor like so: public Form1(string sServerAddress, string sDBName, string sUserName, string sPassword) { } Then pass your variables when you create it: Form1 myMainForm = new Form1(sServerAddress, sDBName, sUserName, sPassword); You could also create properties on your main form that you set from your login screen.
Windows or Web? I will assume windows. I guess it's a question about style but Iwould have a class that handled server config, lets just call it ServerConfig. 1) In my main method i would create an object of this class 2) The create an instance of login form. 3) you can either pass in the object to the form or make the login properties public and access them from main to populate ServerConfig 4) pass ServerConfig to main form you don't want copies of this information in every class.
If you're only going to need them on your main page, I'd probably just pass them to the form via its constructor. Just replace the default constructor with one that sets the variables. However, for a database access, I'd be more inclined to either use App.config, or make a static class. App.config has plenty of resources. To make a static class - just create a class in your project, make it public static, make sure its in an accessible namespace, and set the variables that way. For example. say you create public static class DBAccess with the properties sServerAddress, sDBName, sUserName, and sPassword, then you would access them via DBAccess.sServerAddress = ...; etc. Handy when you need to have a set of data or functions needed throughout an application. However, a lot of people hold the opinion that any variables in a static class should be const. Not having them as const can mess up things if the values will be changed and multiple threads may be accessing them asynchronously. However, I would think your db values will not change. Honestly, though -- an App.config is probably the most ideal way to go. 
If this is WinForms there are a couple of options: * Overload (or change) your main form's constructor to accept those variables and handle them accordingly from there (I'd recommend this one). * Create public properties to store those variables and set the values to the instance of your form Also, speaking from experience, loading your main form from your login form can cause problems (in my case, this would lead to the login form not properly hiding sometimes). The cleanest way for me was to create a boolean on my login form for whether or not authentication was successful. So I'd have something similar to this: static void Main() { Application.EnableVisualStyles(); Application.SetCompatibleTextRenderingDefault(false); frmLogin login = new frmLogin(); login.ShowDialog(); if (login.Authenticated) { Application.Run(new frmMain(login.sServerAddress, login.sDBName, login.sUserName, login.sPassword)); } } On an unrelated note, I hate your variable naming convention ;)
For the properties, you'd do: public string ServerAddress { get; set; } public string DBName { get; set; } public string UserName { get; set; } public string Password { get; set; } I'd suggest using a struct though, for instance, struct SQLServer { public string ServerAddress, DBName, UserName, Password; } then on your form: public SQLServer { get; set; }
umm.. me.visible = false me.dispose()
Ah yes, that was one of the alternative methods I tried when I was having the issue. It didn't solve my issue of the login form still showing up. It's one of the strangest issues I've seen, almost like it just ignored the line that said to hide it because it was hung up. I have no idea what was going on behind the scenes. Your method may be fine for OP though. Just out of curiosity, why were you calling Dispose() on that form rather than Close()? I'm not questioning it, I'm really just curious.
Well [this](http://msdn.microsoft.com/en-us/library/ms173143.aspx) helps a bit, but its really nowhere in VS itself?
&gt; do you guys know all these statements by heart? Where can I see what the statements are and what they do? I think he's referring to all the colored words.
There are a lot of objects in there but you're not expected to memorize them all. Or any of them, really. It all comes naturally. And a "real" programmer may cringe but would much rather actually teach someone how to go about something rather than snicker at them. And I was a hobbyist, then a network admin that made trivial apps to help people around the office and got better at it over time... then a developer friend of mine friend told me I was qualified to be a developer (I didn't believe him) and encouraged me to apply for real dev jobs. A few months later I was hired at my current job. So the line that separates a "real" developer from a hobbyist can get blurry ;)
Do yourself a favor and buy a good book; I'd recommend "Head First C#".
C# coding is kinda like scavenging. You need to solve a task, you nose around the examples you find (MSDN and Stackoverflow are good sites), use the object browser, sometimes reflect somebody elses code. You then take all those bits and pieces and apply a huge load of duct tape and you have a program.. No seriously, there is no way you memorize any of this. I do it for a living and I still can't recall the string manipulation functions by heart - and I use them every day. It is all about understanding the syntax and let Visual Studio (assuming you are on a windows environment) do the work for you. There is only one way to learn to code in any language, and that is to code :)
Sorry for taking a million years to reply, but I wanted to play with my code a bit before shooting my mouth off. I tried this method, and I still appear to have problems. I'm beginning to think I should move away from sendkeys altogether and use only the system.Windows.automation library for controlling my test applications. 
[](/a01) I find [these tutorials](http://www.csharp-station.com/Tutorial.aspx) are extremely helpful for beginner programmers. They are pretty straight forward. 
Or use a linq query and the count method...
[http://msdn.microsoft.com/en-us/library/k1sx6ed2.aspx](http://msdn.microsoft.com/en-us/library/k1sx6ed2.aspx)
Lol I love the scavenging part!
dObj starts off as a "placeholder" for an array, set to the value null. The array is created and assigned to dObj, but each "slot" is an empty placeholder (null) Only after creating an instance of a shapey thing and assigning it to an array element does it contain (reference, really) and object. Note that this is different from structs; with a struct array, the values are stored "inside" the array, and so creating the array also creates the elements.
So, what you're saying is, creating the array the first time is like, creating a reference, and then the second initialization is creating the instance(s) that the reference points to?
Pretty much, yes. It's not helped by using "initialization" with two slightly different meanings. We speak of object initialization when a constructor runs at object creation to set up an object for use; but arrays don't have constructors in that sense; their creation mostly just sets aside the memory for holding references to objects. Filling the array with data (which is what the for loop is doing) is also termed "initialization".
I think it's a poorly worded explanation. In the: DrawingObject[] dObj = new DrawingObject[4]; line, you are *instantiating* or creating an instance of the DrawingObject object as an array with a capacity of 4. Next, you are *initializing* the array with values. Here, initializing just means to setup the data for the first time. In the foreach loop, you are going through each member of the array and doing something with it, in this case, calling the Draw method.
The answer has already been said, but heres my pitch: In C# every object needs both instantiating and initialising. &gt; DrawingObject[] dObj = new DrawingObject[4]; Here dObj is both instantiated and initialised. But what of the 4 objects that dObj holds? They are declared, but not initialised. Right now, dObj[0] points to uninitialised memory, as does the rest of the array. dObj points to a valid array, just nothing in the array is initialised. &gt; dObj[0] = new Line(); In each of these, we now initialise the array index with some object. And yes, the wording from the tutorial you posted is a bit off, if I were writing it, it would read like this: &gt; An array dObj is instantiated and initialised to hold 4 objects of type DrawingObject. &gt; Next, we initialise each of the objects in dObj. You just need to remember that the array and the contents of the array are separate things and both need to be instantiated and initialised.
Another way to think about it is that the array is an instance of a class with 4 fields, like so: public class Foo { public string Bar1, Bar2, Bar3, Bar4; } There's an implicit public constructor that doesn't do anything. You can create an instance of this class but the fields will still have their default values of null until you set them to something: Foo foo = new Foo(); if (foo.Bar1 == null) Console.WriteLine("Bar1 = null"); Output: Bar1 = null This is conceptually similar to: string[] foo = new string[4]; if (foo[0] == null) Console.WriteLine("foo[0] = null"); Output: foo[0] = null When you declare the array, your telling the CLR that you want to make a space to store some data. The same thing happens when you declare an instance of a class with the major difference being that the class construct gives you a built mechanism to initialize the memory space you've requested with values of your choosing (i.e. the constructor). In practice, it gets a bit more complicated under the hood because you don't necessarily know in advance how much space you need to allocate. This is obvious with strings. You can declare a string variable and assign 5 characters or 5000 characters to that variable but the compiler doesn't know your plans at the time of the declaration. For now though, suffice it to say that declaring a new class variable or a new array variable are essentially telling the CLR to simply make some room where appropriate to hold a certain kind of data. The CLR doesn't actually put anything there until you tell it to.
Try moving InitializeComponent up, it has the job of instantiating and configuring things you created in either the Windows Forms or WPF designers.
I am guessing this is a constructor for a form named "Main". This will work, but it's not the approach I'd tend to take. You'd probably be better off moving the initialization code out of the constructor and into a OnLoad method (double click on the OnLoad event in the form properties in the designer). You'll need to store the connection string you pass into the constructor in a variable so you can use it in OnLoad.
Without calling InitializeComponent() first, dgvPlaylists is null.
data adapters, yucky. 
'InitializeComponent()' needs to be invoked before any custom code. In your sample your failure to do this means the 'dgvPlaylists' UI component hasn't been initialised yet when you attempt to assign the data source. You can confirm this is the case by setting a breakpoint on the 'dgvPlaylists.DataSource = dTableShows;' line and checking the value of 'dgvPlaylists' in the 'Locals' window when the breakpoint is hit.
This is the problem, doing what this man says *will* fix the problem. You cannot refer to a property of a null object.
Why is there even a VB subreddit? :P
Thanks everyone, it makes a bit more sense now, but I don't think I would ever over-complicate my code with something like this, but who knows, maybe I'm saying the programming equivalent of "This math stuff is useless, I'll never use this". :\
cmdAddRTPop.ToString() just converts the MySqlcommand object to its string form. You need to actually run the command against your database connection: string mySelectQuery = "SELECT * FROM Test.Dept"; MySqlConnection myConnection = new MySqlConnection(myConnString); MySqlCommand myCommand = new MySqlCommand(mySelectQuery,myConnection); myConnection.Open(); MySqlDataReader myReader = myCommand.ExecuteReader(); try { while (myReader.Read()) { Console.WriteLine(myReader.GetInt32(0) + ", " + myReader.GetString(1)); } } finally { // always call Close when done reading. myReader.Close(); // always call Close when done reading. myConnection.Close(); http://www.devart.com/dotconnect/mysql/docs/Devart.Data.MySql~Devart.Data.MySql.MySqlCommand.html 
This is somthing I've been planning to learn. Thanks for the starting point.
&gt; but I don't think I would ever over-complicate my code with something like this This is pretty standard stuff. If you don't get a handle on it, you're going to have problems with working with C#. Mind if I take a crack at answering your question? &gt; `DrawingObject[] dObj = new DrawingObject[4];` There are two things happening in the above statement. Let's separate it to two statements to make it more clear: &gt; `DrawingObject[] dObj;` &gt; `dObj = new DrawingObject[4];` The first line *declares* a variable *named* `dObj` which will be a DrawingObject array. The second line *initializes* the previously mentioned variable to a new DrawingObject array of size 4.
&gt;This is pretty standard stuff. If you don't get a handle on it, you're going to have problems with working with C#. That's what upsets me. Normally I have no problem grasping concepts and learning how to do things like math and whatnot, but I'm trying to learn OOP with C# and it's just so fucking convoluted that I'm ready to give up on it. I don't know how people are able to learn this stuff as teenagers and become programming geniuses by their early 20's. Programming logic, I can do. I can handle things like setting up loops, if/switch statements, and basically the important things that make the program *work*. But for the life of me, this OOP just will not sit in my mind. I've been through 4 or 5 different tutorials and none of them are able to explain it in simple english. They speak advanced programmer to teach advanced programming, and it's driving me insane. Either that, or I'm just stupid. I get basic things like classes, inheritance, methods, okay. But this "declaring an array of classes which holds different classes that what the fuck even" seems twisted in so many knots. /endrant And I don't think I fully understand the answer, let me try to simplify it: We create a variable of type DrawingObject array in the first line, and then in the second line, we create a new instance of a DrawingObject array and assign it to the variable. Is that right?
&gt; Is that right? 100% correct. Maybe the problem is the material you are using. The first time I was introduced to OOP was in college and I didn't understand any of it (still not sure how I passed the class though). My 'aha' moment for OOP came from reading a book called [Why's (Poignant) Guide to Ruby](http://mislav.uniqpath.com/poignant-guide/). That book was an introduction to the ruby programming language and covers some OOP concepts along the way. The book was designed for beginners but the author was quite *different* in his approach to teach programming than most others so it may not be your cup of tea. A more C# specific book is [Rob Miles' C# Yellow Book](http://www.csharpcourse.com/). That book is in use in the Univeristy of Hull in the UK and is also a gentle introduction to C# from the basic constructs all the way to OOP. Different people get an understand a concept in different ways so sometimes the best thing is to look for a variety of different explanations to find the one that connects with you. I suspect the problem your having is a misunderstanding of how variables work and going back to the basics might do you more good than you think. My first attempt at this comment, I took the liberty of explaining variables and what it means to declare and assign values to it. I was planning to then explain arrays and finally get to OOP and the specific problem you were having. I decided to delete it since I thought you might find it condescending. If however you wouldn't mind a refresher, I wouldn't mind writing it up. The good thing about this approach is you can directly ask me about specific bits of my explanation you find confusing. With tutorials on the net or ebooks, that's a lot harder to do. Let me know what you think about the refresher idea.
I always appreciate when someone takes the time to comment in-depth. The more detailed the response, the more I appreciate it. Before you type up a long explanation of variables, however, let me try to explain it without looking it up so you know whether it's necessary or not. A variable, in programming logic, is a value with a set type, such as an int or bool, that can be changed at run time. In the programming mechanics, it is a location in memory whose size is determined by the type. The kind of data held is also determined by the type. An array is a collection of variables, organized for the programmer's sake, but mechanically, it is no different than just that: a group of variables. It provides some extra functionality though for the compiler, such as using loops to cycle through arrays. I know that's a really simple summary, but I can't think of anything else to add, so if there's more, feel free to expound upon it. I'm all eyes. :P
Let's say you have the instance method, and you've used it a bunch of times in your code. Then, you add the static method. Code (instance method calls) unconnected with your change would break. And it could be hard to foresee if you didn't realize there was already an instance method with that signature. 
 myObj.GetType().GetProperties() Any use to you?
Do you really mean attribute (as in a class derived from Attribute that appears in the metadata) or do you mean a field (as in a member variable of a class)? Sifting through attributes is a bit verbose but getting the "value" of that attribute depends on your attribute implementation but can be as simple as reading the value of a property on the attribute instance you get back from reflection. Now assuming you meant field instead of attribute, you'll have two collections to look at, Type.GetProperty(template.VariableName) and Type.GetField(template.VariableName). These return a PropertyInfo and FieldInfo object respectively (if a match is found anyway). You can then use the appropriate method on the return object to pull the value from your target object. I've written a lot of framework code that uses reflection trickery to dynamically do stuff so the developer doesn't have to. One thing that I've learned to avoid is magic that depends on the way things are named. This rigid naming requirement tends to tie the developers hands when it comes to naming things in a way that makes sense to them. You end up being obligated to use the terrible nonsensical names that some external moron crapped out. After years of this problem compounding itself through many iterations you end up with code that just hurts to read because things are named so stupidly. Do yourself a favor and do this mapping via metadata by using attributes. This decouples the naming of your properties from things you can't control. Maybe you make a TemplateMappingAttribute class that you apply to a property which explicitly states all the information needed to map back to the template source. It could be as simple as: [TemplateMapping(Source = "templateVariableName")] public string SomeProperty { get; set; } If you're feeling ambitious you might be able to slap together a utility to read the template and spit out an appropriately attributed class or interface to model the data requirements of the template. If there are going to be more than a few templates, the up front work you do on these tools can pay off pretty quickly. There are a couple little things like this that I wrote years ago and are still heavily utilized today. Those tools have probably saved hundreds of developer hours by now.
Thanks very much! No, none of it was confusing really, and it definitely wasn't too long, lol. I'm not about to try to learn programming and at the same time declare "TL;DR!" on a tutorial. There is one other thing I'd like to ask you. The reason I'm learning C# is so I can program games with XNA. There's something the tutorial glossed over, saying that I should figure it out, and of course, I'm having serious problems. Basically, two sprites collide with each other. You must find a way to determine which side of the sprite was hit. Each sprite uses a rectangle to determine its location, really basic. I know you can find if twp rectangles intersect like this: (firstRectangle.Intersects(secondRectangle)) which returns true if it does and false if it doesn't. But this doesn't determine which side they intersect on. The tutorial in question is for a ball and paddle game with bricks that the ball has to break, while you keep the ball from going off the bottom of the screen with your paddle. The tutorial gives a hint, saying: &gt;I will tell you that the best way to do it is the following. If the ball intersects with a brick you find where the ball will be in the next frame and construct a line segment. You then create line segments for each of the sides of the brick the ball is colliding with. Depending which line segments the ball line segment the intersects tells you how to deflect the ball. I sort of understand the concept, but first of all, I don't know how to make line segments in C#. Is it just a flat rectangle, or is there a way to use two Vector2 variables to do it? And second of all, what does he mean when he says "you find where the ball will be in the next frame and construct a line segment"? Construct a line segment where? From the ball's old position to its new position? That's the only thing that would make sense, but he doesn't specify and I'm not entirely sure how to determine where it will be in the next frame anyway. Would you just apply the math used to move the ball in an Update() method, and then use that data? Or what? And finally, I've looked up how to determine if two lines are intersecting, but I'm uncertain how to translate the long mathematical equations into optimized code. If it's long and grueling, and there's a ready link that you can link to to help alleviate some of your typing burden, feel free. But yeah, it's kind of important in games, so I need to know how to do this. :|
And if you don't have an instance of an object to reference, use typeof(MyClass).GetProperties()
Ok, so I first noticed your reply 4 hours ago. Wasn't really sure how to respond. I don't do XNA programming and have no idea what a line segment is. However, you described the problem pretty clearly and I get what you're trying to accomplish. Actually, it seems like that there are 3 separate things you're trying to figure out? 1. How to determine which side two rectangles intersect on. 2. What are line segments. 3. What the author means by "find where the ball will be in the next frame and construct a line segment". As for number 2 or 3, well, I'll need to see the tutorial myself as I'm not even sure what he is referring to as a line segment. What took me four hours to reply (including an hour break for breakfast) was the I was sure I could at least answer the first question. A `Rectangle` is a class found in the `System.Drawing` namespace so that means I don't need to have any XNA knowledge to work with it. So I tried to visualize the problem more easily by making a GUI application where I had two rectangles I could drag around and a button that would then run some code and tell me if the two rectangles intersect and if they do, which sides they intersect on. All the logic for telling me where the rectangles intersected was in button's click event handler (i.e. the function that runs when the button is clicked). Here's the code... private void button1_Click(object sender, EventArgs e) { var firstRectangle = new Rectangle(firstRectanglePanel.Location, firstRectanglePanel.Size); var secondRectangle = new Rectangle(secondRectanglePanel.Location, secondRectanglePanel.Size); if (firstRectangle.IntersectsWith(secondRectangle)) { // TODO: figure out which sides the rectangles intersect on } else { EvaluationResultsLabel.Text = "Does not intersect"; } } First thing I did was convert the Windows Forms controls I was using to represent my rectangles to actual `Rectangle` types. Next, I called the the `IntersectsWith` function which returns `true` if the two rectangles intersect. If it returns `false`, I just show a result on the screen that says the rectangles don't intersect. All that's left is to implement the logic to figure out which sides the rectangles intersected on. The way I went about doing this is the most simplest and direct approach I could think of. I decided to avoid all the mathematics you'd find if you googled 'how to determine if two lines intersect' and do it on my own. This was my plan; 1. Each rectangle is made up of four sides. I need to figure out if each side of each rectangle intersects with each side of the other rectangle. 2. This means for each side of the first rectangle, I need to compare it with the 4 sides of the second rectangle. This will result in 16 comparisons in total. 3. During each comparison of the two sides of the rectangles, I need to determine if the two sides intersect. Ok, here's [my implementation for the above](https://gist.github.com/2005558). I placed it in the link so you get some syntax highlighting. Essentially, what I did was create my own class called `Side` to represent a side of the rectangle. Then I made an instance of my `Side` class for each side for each rectangle (so I made 8 `Side` instances in total). When creating each `Side` instance, I passed in some information: * The name of the side * The location of the first point side * The location of the second point in the side Then I placed all the sides into two lists. One list contains all the sides of the first rectangle and the other list contains all the sides of the second rectangle. *NOTE: If you're not following 100% I suggest you stop reading and perhaps ask me for clarification before moving on. The fun/confusing part where we figure out where the two rectangles intersect begins below. Do not continue reading beyond this point if you're not 100% clear on everything we've done so far because it'll just add to your confusion.* Ok, now the we have a variable called `rect1Sides` which is a list of all the `Side` instances of the first rectangle and we have a variable called `rect2Sides` which is a list of all the `Side` instances of the second rectangle. Now I loop through the `rect1Sides` using a `foreach` loop within this loop I loop through the `rect2Sides`. So in the middle of the two loops I make the following call: if (r1Side.Intersects(r2Side)) { // r1Side intersects with r2Side!!! Do something with this newly acquired knowledge here } I call a method called `Intersects` on `r1Side` and pass it `r2Side`. Basically, I'm asking `r1Side` to tell me if it intersects with `r2Side`. If it returns true, then I know that the two sides intersect and I should do something with this knowledge. If you're making [Breakout clone](http://en.wikipedia.org/wiki/Breakout_\(video_game\)) this is the point you tell the ball to bounce off whatever it collided with and go in another direction. Now, here's the tricky part. I called the function called `Intersects` to determine if my sides intersect with one another. But this isn't the same `intersect` function that you used. Your intersects functions only works with rectangles. Mine works with instance of the `Side` class which I just made up. All that's left is to write the implementation for my `Intersects` function and we're done. The following bit of code is where the math comes into play. It's not much but depending on your familiarity with the way I wrote my code it could look simple or perhaps a bit confusing. // This function goes with the Side class public bool Intersects(Side otherSide) { var x1Range = Enumerable.Range(this.X.X, Math.Abs(this.X.X - this.Y.X)); var y1Range = Enumerable.Range(this.X.Y, Math.Abs(this.X.Y - this.Y.Y)); var x2Range = Enumerable.Range(otherSide.X.X, Math.Abs(otherSide.X.X - otherSide.Y.X)); var y2Range = Enumerable.Range(otherSide.X.Y, Math.Abs(otherSide.X.Y - otherSide.Y.Y)); return ((x1Range.Contains(otherSide.X.X) || x1Range.Contains(otherSide.Y.X)) || (x2Range.Contains(this.X.X) || x2Range.Contains(this.Y.X))) &amp;&amp; ((y1Range.Contains(otherSide.X.Y) || y1Range.Contains(otherSide.Y.Y)) || (y2Range.Contains(this.X.Y) || y2Range.Contains(this.Y.Y))); } So the above seems pretty self-explanatory right? Just kidding. It's a mess and I know it. I'm going to try to clean up the code and explain it then. For now how about you try the code out. [Here it is](http://minus.com/mmlt7l6Rw). It's a Visual Studio 2010 solution. If you can't get it to run for some reason, try running the exe file in the bin\Debug folder to run the application itself. If you can't get it to work let me know. If you didn't get most of the stuff here no worries. It isn't easy stuff to a beginner programmer. I remember being frustrated with creating game when I first started programming. The hard part are *little* things like figuring out if two lines intersect. Luckily, there are libraries that probably do collision detection and other math or physics related stuff for you. But kinda defeats the purpose to use a library when you're trying to learn. Let me know if you need more help (although I'm not really sure how helpful I'll be explaining complicated topics like this).
Thanks again, lol. I hope you enjoy doing these, I feel like I'm employing you (but without the paycheck), with the amount of work you're putting into these replies. I understood all of it except parts of the Intersects method, but that's mostly because I don't know what things like "Enumerable.Range()" and "Math.Abs()" and "variable.Contains()" do, exactly. I can guess Math.Abs is used for absolute values, to get the positive distance. But the "this.X.X" and "this.Y.X" confuses me as well. But I'm pretty sure that it does SOMETHING useful! I understand the logical statement of "return (this || that || otherthing)", what you're probably doing is checking if each one of the four sides of the first rectangle "Contains" a side of the second rectangle, and if any of them do, it returns true, else false. I don't know exactly how the ".Contains()" method works, but, again, I can guess. That's the problem I have though. I can look at quite a bit of code and sort of be able to figure out what it probably does. But that kind of ability does not allow me to WRITE my own code, which requires a thorough understanding of all the tools at your disposal and how to use them. I guess I just have to keep trying to do just that, understand C# tool by tool. But it's dreadfully slow. I'm not used to any one thing taking this long to learn the basics, let alone mastering it. I'm beginning to understand that programming is one of the more complex hobbies I could have picked up. Thanks again for writing so many lengthy responses, you did help me understand most of what I was having problems with. I could probably keep you here forever asking help on learning C#, but obviously, I'm not going to do that, or you might as well just write your own tutorial. I'll probably just hop into some XNA tutorials, and hope I understand enough of the basics to manage. Somehow I doubt that though. But I have to draw the line somewhere.
For attributes, you'd want to use the `GetCustomAttributes()` method.
Sounds good to me! Just message me whenever you want to start :P
That looks good and is clean and simple. Thanks!
Thanks for that. Yeah some of them look a bit basic but I'll definitely bookmark and watch most of them.
[.Net Book Zero](http://www.charlespetzold.com/dotnet/) is great and free.
Thanks, I just grabbed that.
Go to [C Sharp Course](http://www.csharpcourse.com/) and get this book: [Rob Miles CSharp Yellow Book 2011.pdf (1.8M)](http://www.robmiles.com/c-yellow-book/Rob%20Miles%20CSharp%20Yellow%20Book%202011.pdf) 
Seriously, Just Write Code. Get almost any of these starter books and use google when you're stuck. Take your LP to Barnes and Noble, buy a latte and use every book they have there for $3.29. 
A lecturer of Hull University called Rob Miles wrote a book called the Yellow Book (or something) which is free to download. http://www.csharpcourse.com/
Fascinating. Thanks.
So much info to get through. Thanks for posting this.
This is not possible in C#. You will get the following error message: &gt; Member 'Namespace.SomeThing2.Load(string)' cannot be accessed with an instance reference; qualify it with a type name instead
Guessing this might be a bit to basic for you, but hey who knows: http://www.amazon.com/C-Students-Douglas-Bell/dp/0273728202 Our first introduction to c# in my uni was through this book.
Thanks. Just tell me what language you would like to see and I can add it.
Oh actually that is a misspelling my site is codetique not codei-tique So I'm good.
Yeah I created an account there too and verified the site. Whatever that joewein link is that they all reference doesn't work. It all seems really suspicious like maybe this stuff is really out dated or something. I messaged all the folks who gave it a bad rating hopefully they are still around and will change their mind. I appreciate your help.
The site is pretty much alpha right now. I just finished a sprint dealing mostly with commenting and now my focus is going to be on displaying more reviews and letting you filter those reviews. The goal being exactly as you described where you can filter to see only the languages you want to see. I am also going to add a following mechanic so that you can get updates on reviews that people you want to follow have created. Sorry I should have made it clear that this is by no means a finished product, hell I wouldn't even say this is a beta product yet. Just trying to get the word out as I complete each code sprint.
Gonna leave this here for people that don't know about it. http://codereview.stackexchange.com/
That's all well and good but its basically a rebranded stackoverflow which is great for questions but pretty terrible for any code beyond 20 or so lines. I mean they don't even do syntax highlighting. 
Honestly, I don't have a use for the site yet (but will definitely keep it in mind) so you can take this with a grain of a salt. But, I would definitely say the following would be nice to have there: Scala, ML, Lisp, Scheme, CIL (that would actually be my use). Also, it would be nice to be able to have some sort of API so that one could embed this in their blog and then maybe have a link to the site to add comments (but show comments on the blog). Just a thought. 
They do syntax highlighting: http://codereview.stackexchange.com/questions/10042/analysis-this-producer-consumer-queue-for-potential-threading-issues
My apologize my browser was blocking their static site so the syntax highlighting script was never being executed. Regardless though without line numbers and comments in line I still think it would be easier to use a tool similar to mine than there. 
I will get those added. I do plan on having an API and embeddable review elements. They are just a ways off as I am trying to the main site up and running first. Thanks for the input.
Awesome. You've got a great product so far. Keep up the good work!
Awesome! Thanks! Just registered and bookmarked!
Never heard of it before, but it sounds awesome. I'm going to try to play with it when I have some free time.
I'm somewhere between beginner and intermediate as far as programming. I started out learning c++ before deciding it wasn't the right language for me. I did pick up a book on c# from Amazon, but I don't really like the way the information is presented. I learn best when there's a structure and time frame, as well as questions at the end to see what I really picked up and didn't. 
I'm willing to bet you will find more learning resources for free, on youtube.
Yeah, I've found with most tech books, they tend to do that a lot. I think most programming books I've looked at had that style of teaching, where it's "don't worry about this now, just do it, and we'll get into it later". It's setting up a huge commitment in the first chapter or two to say "if you want to get anything out of this book, you have to read the whole thing". Sorta like asking for marriage on a first date. It can be annoying, but sometimes necessary. The MSDN documentation is great for learning specific pieces of the .net framework. It's useful as a guide if you know what you're looking for. It's terrible as a step-by-step learning tool, but if you know what you're after, it's best to go there for knowing what each method does, what exceptions it will throw, what is returned, and examples of how to use it. Think of it more as an outstanding reference rather than a tutorial.
[Here are some good free videos on YouTube](http://www.intelligentedu.com/blogs/post/best_new_training_sites/3710/top-19-c-tutorial-videos-on-youtube) [Stack overflow discussion of free C# video turorials](http://stackoverflow.com/questions/856375/list-some-sites-for-free-c-sharp-video-podcasts) 
My favorite site is [Safari Books Online](http://www.safaribooksonline.com/), try it out. I love to dive into three or four books at a time to figure out which one is the best fit.
Yeah I've found some pretty good tutorials on YouTube.
Hahaha, yeah, and I'm new to the EF so I keep finding little things that bother me that I never thought of. Like the fact that I had a column in one table that shared a name with a table I'm using. It put a 1 at the end of the column name and I HATE that! Luckily I do most of my own database stuff and it's early in the project so it's easy to just change names to make EF do what I want.
Learn the easy stuff on your own. It's much more satisfying. I would suggest that you: 1) Hello World! 2) Loops 'n' shit 3) Arrays 4) How to connect to db.
[Nope.](http://www.englishforums.com/English/TheProperPluralFormStatusStati-StatiiStatuses/jwvp/post.htm)
It's kind of odd that EF decided that you'd given a table a pluralized name, but I think there's some conventions you can set to tell it that you did the right thing? It inferring that RequisitionStatus is the plural of RequisitionStatu is surprising not because [stemming is hard](http://en.wikipedia.org/wiki/Stemming) but because a status lookup table is not an exotic creature in database land and that should have been baked in to an exclusion list from the jump.
Within the context of MVC, you could do something as simple as PageController.cs :: View() ViewBag.PagerPages = new List&lt;string&gt;() { "1", "2", "...", "7", "8", "9" }; Page.cshtml &lt;ol class="pager"&gt; @foreach (string page in ViewBag.PagerPages) { &lt;li&gt;@page&lt;/li&gt; } &lt;/ol&gt; There are also more elegant ways, but, really, html in your controller/code-behind is dumb (and totally against the MVC abstraction).
Seriously. All that *null* checking is completely unnecessary as it's impossible for any of the conditions to actually fail. It's a fairly good example of how *not* to program. 
Other problems: * Wrapping StreamReader/StreamWriter in their own methods for no particular reason * XslCompiledTransform can load directly from disk - http://msdn.microsoft.com/en-us/library/system.xml.xsl.xslcompiledtransform.aspx * Calling Dispose vs Using blocks
By the way, how *bad* do you say using `Dispose` is rather than using a `using` block? The worry is that you could forget to call `Dispose` right? As long as you don't forget than are you okay with the use of `Dispose`?
I looked at that site because I am interested in something like that and I would be willing to pay $40 a year, but its actually $40 a month... cheapest I could find was their current special limited to 10 books a month (which in reality is plenty) for "only" $20 a month (first 6 months then goes up to $28). Maybe its a better deal for companies that get volume subscriptions, but its a little on the steep side for individuals. EDIT: I'm apparently stupid... I looked at the link to the comment above for Safari books online -- that is $40 a month. Learndevnow looks much more reasonable, i'll check it out
Is mono written in C#?
[Umbraco](http://www.umbraco.com) is an open-source content management system built in ASP.Net/C#, and is in its first version of MVC. I still haven't created a new Umbraco v5 site yet, so I'm not sure if there are any bugs to look out for, but since it's the first MVC version, I'm sure there will be, and I'm sure we could use your help. I'm a user that likes to extend it and make my own packages for things, but when at work, when I build something for it, it belongs to my company. At home in my spare time, I make extensions and release them into the wild. The Umbraco community is really friendly and helpful, and it would be great to have more contributors.
Yes, a large part of it. [Here](https://github.com/mono/mono/tree/master/mcs/class/System.Net.Http/System.Net.Http) is the Mono source code for *System.Net.Http* just to give an example.
Interesting, I didn't realize that. I'll have to take a look at it.
You need to add http:// to the beginning of your URL.
&gt; The main purpose of using-blocks is to ensure that disposal is invoked *even if the block exits by exception*. That's a good point. I've gotta keep that in mind more often when deciding whether or not to use a `using` block. Is it a good idea to have a `try-finally` block inside a `using` block? If you need to write some code in your `finally` block and you have it nested within a `using` block, what will the resulting ILCode look like? Will it be a `try-finally` nested in a `try-finally`? Is that bad from a performance perspective? Or is the compiler smart enough to figure it out?
Hah, that's why. Thanks!
I would love to see some kind of (functional) .Net library to interact with Reddit. I have found a few things online, but nothing seems to work anymore...
Hey, Google channel9, msdn. You'll find an EXCELLENT video tutorial series by a guy named Bob Tabor on the official Microsoft website! Seriously, it's an excellent series.
The best way to learn is by doing. Now that Visual Studio and SQL Server Express editions are available for free, learning has never been easier. Tutorials are available right in the express edition plus there are millions of websites and videos. And if you're really serious about learning buy a book and work through the chapters.
Head first C# is awesome, good luck :)
That's true, but it wouldn't have the automatic "smart" pagination features of the control in the example, which was the main focal point in writing the article. The embedded HTML in the code-behind could easily be moved out into a partial view, that would be trivial. The more interesting point is the algorithm used for determining when to draw which page indexes, when to draw the ellipsis, and when to shift.
Also, buy Code Complete - an awesome read (reads like a novel and is difficult to put down). This will give you good practice right out of the starting gate.
[C# Station](http://www.csharp-station.com/Tutorial/CSharp).
What sort of interactions would you be interested in?
do you have to have your computer by you to follow along, or can you read through it without? would be nice to have one where you don't have to have a computer with you at all times. thanks for the suggestion. by the way, i'm working through "beginning asp.net 4.0 in c# and vb" by Imar Spaanjaars. so far, so good. it shows c# alongside vb, so you can choose to use either or both throughout. i'm using only c#.
Care to share your solution?
If you are interested in learning how to use it, I found [this](http://stackoverflow.com/questions/2058375/c-sharp-bitblit-from-bitmap-to-control-compact-framework) SO discussion very useful. And [this](http://msdn.microsoft.com/en-us/library/dd183370(v=vs.85).aspx) MSDN documentation. And for an overview of whats going on, [this](http://en.wikipedia.org/wiki/Bit_blit) Wikipedia article. I was intrigued, as I am still using the regular unsafe Bitmap Lock Bits to do all my work, and figured I would share relevant ifo that helped me figure out what was going on. I have some work to do on my image libs . . . since speed is AWESOME.
Check Mail, see comments, karma, etc.
The sample in the code I sent is managed. The sample in the first link you gave is unmanaged because of unsafe keyword and use of pointers. Inside unsafe statement you can have code that can crash your application because the CLR is not able to verify it and ensure it is safe.
I had a closer look at that example, and I see what you meant. I wasn't aware of that when I wrote my program.
That unsafe code is also faster since it will not copy the image data two times, it just updates it in place ...
You can do this in winforms as well, but its not as easy as you will like. You can inherit from the control and override OnPaint. Use the Graphics object provided by the paint event args to call DrawString where you can specify font and color for the string. The downside here is that you will need to calculate pixels of where each character should lie (you can use MeasureString from the same graphics object), and you will need a call to DrawString (and MeasureString) for each color change. Note: I'm not suggesting that this is better than the wpf approach, simply that it is possible. I would code this for you, but I'm posting from my phone :(
Silverlight/WPF, xaml is awesome. It would suck to learn on the fly (mostly because you'll be learning about cool shortcuts after you've spent time on a clunkier old school implementation) but you can do really simple animations and such in literally no time at all. Fade ins, outs, scaling, rotation, all of it can be done in pure xaml, leaving your business logic untouched.
Apologies in advance. WPF is like skiing. The first couple of times is frustrating, but then you can't understand anyone not wanting to use it all the time.
Correct you are, I've been doing too much c++ of late
KnockoutJS FTW
Fo' sho.
lol I actually Im a graphics designer as well as a programmer xD so dont worry Im good at it
Good point I will put some kind of loading graphic in there to give better feedback.
What version did you choose? I noticed that you get multiple licenses with you purchase. Is it possible the I buy one license from you so I can develop apps and you get some of your money back that you payed for it. 
I don't have the money to buy a windows phone. I bought a HTC Flyer tablet for 220 euro and I still have an iPhone4 (iOS dev program is too expensive at 99$ per year). Android sounds the best for me to develop for at 25$ once and much less restrictions.
&gt; Java is almost exactly the same as C# No, C#/.NET isn't that like Java anymore. A lot has happened since .NET 2.0. (Not against using Java instead of C# for Android development, but that doesn't make your statement more true).
I'll try it, installing the SDK atm. Now I only need to find a way to open and Google Wallet account without and credid card and with 25$ on it to register...
I thought it said that the first version is up to 10 people, it's possible that I have it wrong there. I'm going to try out Java and when that plan fails I'll go back and find a way to use C#.
Student? [They have a student license for $79](http://support.xamarin.com/customer/portal/articles/177042-do-you-have-any-student-or-academic-discounts-). &gt; Student Discount &gt; Students currently enrolled at an accredited institution can purchase a full MonoTouch Professional or Mono for Android Professional license for $79. Use your license to write great apps and games for iOS and Android, and deploy them to your friend's devices, or even publish to Apple's App Store or the Android Market.
No, the licenses are per user (Professional) or per seat (Enterprise). The Enterprise license is required for companies with *10 or more employees*, but still only covers one seat.
No problem, I really hope you are eligible.
Yes I know it said employees, but it doesn't say that you can't use different Android dev accounts so it sounded easy to work around :D
It blew my mind when I finally realized exactly what LINQ does, and the power of using SQL like queries on objects.
Java has been catching up with a lot of C# features like anonymous functions and generics. C# took a lot of cues from javascript, and those advancements in language design are trickling back up to java. C# is still more streamlined to write, and requires fewer LOC to implement equivalent functionality, but Java is getting there. It's funny that C# only exists at all because sun sued MS over writing their own java implementation (which you can do, look at OpenJDK, you just can't name it "java" if you deviate from spec, and MS called it MS-java or something like that)
It's far more *like* it than *not like it*
&gt;Also, if you live near an MS Store, go trade your phone for a WP7 device for free if you like. They're running a promotion. Any proof of this? I couldn't find anything by quickly googling.
[Smoked by Windows Phone](http://www.microsoft.com/windowsphone/en-us/cmpn/smoked-by-windows-phone.aspx). It's billed as a "contest" where you pit your non-WP7 smartphone against a WP7 handset in a 'challenge' (essentially rigged, really). If you fail the challenge you have the option of trading in your phone right there for a new WP7 device, no contract required. I wouldn't call it a contest as much as an outright giveaway once you get past the surface of it. You lose the challenge, you get a new phone for free. Sweet deal. Of course, store stock may vary. [Here's a list of Microsoft Store locations](http://content.microsoftstore.com/home.aspx?WT.mc_id=onlinestore_footertray).
Why must it be c#? 
Ah very cool. I definitely want to do this but it ends today and I have a class that is 'til 9 and won't be home 'til around 10 (when the contest ends) :(
To which point you can talk about reified generics, type erasure, lambdas/anonymous functions, closures, properties, delegates... C# started with many similarities to Java, but has grown on it's own. Now Java is starting to catch up a bit. Now, I'm not interested in a language debate, I'm only trying to point out that saying that they are 'almost exactly' alike is just wrong, and was probably said because the guys an intern, as a developer I say the same thing to non-devs; they're "basically similar". They're not though, when you get into the technicalities :)
I don't disagree. The language (C#) has certainly evolved. Some developers utilize the newer features more than others, and the tools themselves certainly use things like partial classes heavily. I think a fair statement is to say that Java and the JVM are similar conceptually to C# and the CLR. The comparison is far better than say C# and Perl, or C# and C, or C# and JavaScript.
Sure it is. It's the C#/.NET compiler generating expression trees instead of code. Something Java does not have. 
I'm learning C# atm in school so I thought it would be a nice side prject to work on. 
&gt; I think a fair statement is to say that Java and the JVM are similar conceptually to C# and the CLR. The comparison is far better than say C# and Perl, or C# and C, or C# and JavaScript. Sure it is. There is no doubt that the .NET platform and C# more or less started as a "clone" of Java. It has simply overtaken Java in so many ways now though.
Actually it's more of a .NET feature that C# has language level support for.
Yep. I was coding Java back when MS had J++ out. Interesting history is that the J++ IDE became the foundation of Visual Studio and the language (VM) based turned into their next gen platform (.NET) although obviously they raised the bar by having a language independent VM - Sun bit off more than they could chew with their lawsuits and anti-trust influence
This site provides help to people in terms for sharepoint development with c#.NET. I try to post new article once in 2days. Hope it can help you guys. Thanks! Avi 
I live in Holland so no MS Stores for me, but I did grab the free Unity licence (Android and iOS because they're both free) even while I'm not really interested in game development atm (you never know about the future).
Make a static class? or a Singleton?
So you're basically just asking how to pass data from one page to another? Class instances don't persist across different pages so you'll need to pick a method of simulating persistence. You can use a database, saving the class to the DB before leaving the first page and loading from the DB when you arrive at the second page. You can also store serializable classes in the viewstate but this is considered a bad practice as far as I know. What else... you could store the data in cookie values (but this doesn't sound like the best method for what you're trying to do) or in session state (this would be a quick and dirty solution...). Another option would be to set the values to hidden form elements and post to the next page... this is obviously a work-around type of fix but it would work. Here's an article on various ways to execute persistence: http://msdn.microsoft.com/en-us/library/6c3yckfw.aspx Each has its pros and cons for different situations. If you need to re-use this data down the road or if there are a lot of values to set I'd use a database. If you can throw the data away as soon as the user leaves the site you could use session or context... but read up on the pros/cons.
fwoty's reply misinterpreted your question to think you were writing web pages using ASP.NET rather than a desktop application using WPF. I'd use blackmars0's suggestion of a static class or a singleton, or possibly a member of your App derived class of Application, which you can access from any page using the static Application.Current.
I actually use that in most of the code, this is some legacy code I imported. But that's good advice.
ah, yeah that makes a little more sense. I actually managed to solve it by just instantiating the class again and passing in all the data a second time. It's not the most elegant solution, but I have a 3 drink limit before I say "fuck elegant". Thanks though - I will look into this for next time.
I never knew about this and thank you so much, good sir.
Awesome, thanks. This is exactly what i was missing.
This ^. I'm reading this very book at the moment. I should have read it five years back.
Imar wrote [this article on n-layered web apps](http://imar.spaanjaars.com/476/n-layered-web-applications-with-aspnet-35-part-1-general-introduction) and I think it's excellent. My team has written several web apps based on (t)his pattern. The validation framework side of things really simplifies input validation.
In visual studio. You learn by doing, not reading.
Are you sure the exception is on the WebRequest.Create line? According to [MSDN](http://msdn.microsoft.com/en-us/library/0aa3d588.aspx), invalid URI is not one of the exceptions WebRequest.Create produces. I would suggest placing a breakpoint on the "WebRequest response..." line and ensure iconurl is what it should be, and you may want to add more exception handling in general, depending on when and how this method is actually called. Regardless though, for this type of question you'll probably get a faster answer on Stackoverflow... Good luck! 
I got it off Amazon(59.99), uber cheap if you ask me. I just got it tonight, so I haven't had a chance to really play with it. Right now im installing the .NET Micro Framework and the NetDuino SDK. I'm going to try and get some lights LEDs flashing before I got to bed. Ultimately I plan on using it for brewing beer, I'll use a thermistor for temperature input and a 24v Honeywell propane valve for output(i.e. controll the gas burners) Long in short I have planned to control the whole setup from Win7 Phone, you know, Since it has Ethernet. EEEEEEEK 
That sounds pretty interesting actually. I'm not a professional coder or anything, I only know the basics of C# sadly :(. But could you tell me more about chips like that?
you could shorten the code a bit with: var led = new OutputPort(Pins.ONBOARD_LED, false); for (bool on; ; on=!on) { led.Write(on); Thread.Sleep(250); }
Have you done anything with Arduino? Do you know if there are many peripherals for it? I've been wanting to get an Arduino kit (the cheapest one processor is about $30) but I just haven't had time and haven't gotten around to it. Plus my C is rusty (though I'm working on it). Netduino would allow me to use my current skills, but I worry that it would cost much more for parts. Does that seem accurate from what you've seen so far?
Do you have the link from Amazon? Can't find it. Also, will it work with Visual Studio Express? Currently studying C# thanks
i got my netduino and bought a distance sensor, lot more work then buisness apps.
I see (no pun intended). Well that is both a pro and a con. I wanted to use C in a hardware application. I'm definitely going to ask for the starter kit (SparkFun Inventor's Kit, I believe) for my b-day.
The best way to learn is by making some fun stuff. I have Head First C# and it's great, and honestly as I expand myself to other languages I may start with those books first, I own like 5 different books on C# alone and Head First has helped me more than anything. Have you also considered doing XNA? As someone who has been coding professionally for just over a year (associate software engineer) I found that XNA is a great way to work your mind and much more exciting and beginner friendly than a lot of the stuff you find in books. The best way to learn is just to code though! 
use backticks (\`inline code\`) for code like `inline code` to appear in the format use four spaces ahead of the line in order to get code formatted like this (Any additional spaces after four count as indents, btw) This is the same across all of Reddit
I own a netduino myself. It was useful in learning how the porting kit worked for an upcoming product we're building around .NETMF. It's a pretty awesome platform.
How did you get a return?
You type the word "return." There is no syntax highlighting here. //Seriously, code and comments just work string s = "hello world!"; return s; Bam! done.
I meant newline. 
...Visual Studio 2010 or MonoDevelop?
C# is an ISO standardized language, not just a Windows language.
 You need four spaces before every single line of code. Each line needs to be indented this much Check out the formatting help link in the bottom right corner of your comment edit box.
C# is a language. If there is a compiler it will run anywhere. There is a linux compiler for C# (which targets Mono), hence C# will run on linux.
***whoosh***
I was being sarcastic because numerous attempts at explaining this to the op were failing, so I injected some silly nonsense, C# related, to your attempts to explain. I was being a douche. 
Shit, man. I thought you *were* OP. I kept wondering why a 3-year member was asking for formatting help....
Thanks for the patience!
I imagine there arent any internal libraries that smack uses (network stuff) that c# doesnt support in some way, so basically I just need the manpower to convert each file from java to c# (import to using, package to namespace, getFoobar() to Foobar{get;set}). Sharpen looks like it might resolve a bit of that for us. I will setup a github with what Sharpen outputs tonight, and then we can start from there.
Adding the indented code usually isn't an issue since you're copying from an editor and it's already indented. In the rare case you're copying a namespace or something at the "root", just highlight it in VS, press tab, then copy it. 
I figured as much. Too bad no one actually answered the op's question. I was going to use a throwaway and point him to Thread.Abort(), then troll my way through that flame war suggesting further ideas such as starting extra processes to do the query and recording the pid and canceling it if needed (an arguable idea actually). I could have just answered his Q I suppose, but he seems to be on the right track anyhow. 
Would it be better to start with something like Jabber.NET that just needs a cleanup and an update?
The reason I would like to use smack is to interact with OpenFire, so my best bet is to imitate the smack library as much as possible.
Surely it can't be that simple? Can it? Have you actually tried converting a significant java application before by translating it line-by-line? I guess it would be possible provided Smack doesn't use any library that doesn't have a .net equivalent. Good luck.
It should be required reading for anyone that even USES a computer (not just coders)
 using System.Threading; using System.Threading.Tasks; So after much soul searching I've come across crappy solutions, neither particularly favorable to asking the Task object for it's inaccessible CancellationToken parameter. Global variables aren't an option, because references to a tokenSource of the past are not equivalent to reference to a tokenSource in the present- unless you want to wait for all tasks to complete before resetting a global tokenSource variable, which is stupid. Method 1 "Lazy Passing" 1. Define every action in scope of the token, the token will be passed in if accessed. 2. If we have a method defined elsewhere, add a CancellationToken parameter and handle it internally. Sample: var tokenSource = new CancellationTokenSource(); Action button1action = () =&gt; { BlockingMethod(tokenSource.Token); }; var myTF = new TaskFactory(tokenSource.Token); myTF.startnew(button1action); Method 2 "Parameter Hell" 1. Pass the token into actions manually like we would a method/Function 2. Pass the token into methods too, remember that Actions can't handle boxing so we must cast them upon receiving. Sample: var tokenSource = new CancellationTokenSource(); Action&lt;object&gt; button1action = (_atoken) =&gt; { BlockingMethod( (CancellationToken)_atoken ); }; var myTF = new TaskFactory(tokenSource.Token); myTF.startnew(button1action, tokenSource.Token); *Written mostly from memory.
Why bother writing a C# operating system when you can code against the bare metal with the micro framework? http://en.wikipedia.org/wiki/.NET_Micro_Framework &gt; The .NET Micro Framework (NETMF) is an Open Source .NET platform for resource-constrained devices with at least **256 KBytes of flash and 64 KBytes of RAM.** It includes a small version of the .NET CLR and supports development in C#, Visual Basic .NET, and debugging (in an emulator or on hardware) using Microsoft Visual Studio. It also features a subset of the .NET base class libraries (about 70 classes with about 420 methods), a GUI framework loosely based on Windows Presentation Foundation (WPF), and additional libraries specific to embedded applications. It doesn't make sense to write an OS inside C# when the run-time is going to be bootstrapping it anyways. A much better use for C# is writing a new user-land with it. (display server, sound system, command line interface, daemons, services, etc.)
&gt;It doesn't make sense to write an OS inside C# when the run-time is going to be bootstrapping it anyways. That's the beauty of fun and open source. It doesn't have to make sense because it is fun!
Interesting, but there's no way they were dumb enough to initially think .NET was capable. 
Don't put any "using" statements at the top. Then you don't link to anything. Of course, you also lose the ability to *do* anything...
Then you would like most of my projects! :)
Link me!
* [C# Combinator Extension Method](https://github.com/jhartwell/Combinators) * [ADQL](https://github.com/jhartwell/ADQL) I must give warning that they are in their infancy and not polished but still.
Yes it's just a reference to a method that you can pass as an argument. Try this tutorial here: http://www.codeproject.com/Articles/71154/C-Delegates-101-A-Practical-Example
What's the problem you're trying to solve? Which aspect of structs do you "want to exploit"?
First of; is there a reason other than "I only like linux"? If not, then use Windows, just because of Visual Studio. In my opinion, programming is not writing code, remembering semicolons and all that stuff. It's solving problems, through code. Meaning that the more help I get writing code, the better I can work. Visual Studio + Resharper works really well together and does all the repetitive work for you, giving you more time to work on the really hard problems. I really cannot imagine going back to a non IDE editor.
&gt; First of; is there a reason other than "I only like linux"? I have no experience maintaining and administering a windows box. As you said, my job is to solve problems, not the minutia of coding and I don't want the barrier of both language and system at the same time. I'd rather work in a familiar environment that I know how to work in, customize, and make the most of. &gt; I really cannot imagine going back to a non IDE editor. Then you're not trying hard enough;) I like working in a tiling WM, vim, and the shell. I write my code efficiently and well. I can't imagine having to use any other editor. I've tried using IDEs for java and php (eclipse and netbeans) and always felt like they got in my way more than they helped.
Structs are value types, so they live on the stack rather than the heap. Once the stack frame the struct was created on is popped off, the struct now is gone. If you assign a struct or pass a struct as a parameter, you are working with a copy of the struct, not the original struct. Passing large structs as parameters is slow since the whole struct is copied. If you put a struct into a List, it becomes immutable, to change the value of the struct in the list, you need to overwrite it. This is because when you pull a value out of list, you are invoking a method which returns a copy of the value. If you want to do object pooling, you will need to use classes, not structs.
What happens if you define a struct as a member of a class? Presumably the struct size is a part of the class allocation? &gt; f you want to do object pooling, you will need to use classes, not structs. Ya, I suppose I have a bad mental model for structs but C# structs seem really limited in capability.
It would live in the heap, but it would act like it does if you have List of Structs. If you return it from any method, it will get copied. Structs are really for small pieces of data that aren't meant to exist for a long time and aren't going to be passed around a lot. Ideally the struct doesn't should leave the stack frame it was created on.
The first line is just declaring a variable. A place you're going to store stuff later. The next three lines basically just say grab the XML file, and read it. Within the "try" block, this is your code flow: * 1. Start at the beginning of the XML file. * 2. Read and merge the contents of the XML file into the "c" variable * 3. When at the end of the file close the connection. The following line: &gt;_toys = c.toys != null ? c.toys.ToList() : new List&lt;ProductsToy&gt;(); is called a ternary if. It can also be said that it is using the conditional ?: operator. Basically you can translate it into an if statement like this. if(c.toys != null){ c.toys.ToList(); } else { new List&lt;ProductsToy&gt;(); } In other words, check to see if there is something in c.toys. If there is convert it to a list. If there isn't, create an empty generic list with the same properties as ProductsToy. This makes sure that _toys will always have something set instead of being null. Edit: For Formatting
Since you're new to OOP, now is the perfect time to develop good variable naming practices. For a simple method like this your single letter / abbreviated variable names are relatively harmless but in general it's more accepted to spell the names out. It makes things easier on the reader (which is often you a few weeks into the future). Good luck with your learning!
This is a basic deserialization function. Check out what object serialization is. The ternary operator acts like a shorthand for a basic function that can return a value based on an if conditional statement. If the conditional statement evaluates to true, then **return** the value of the first expression, otherwise **return** the second. That's why you can start it with an assignment to the _toys variable. _toys variable will contain what the ternary operator returns, either an empty list or a list of toys that had been serialized to the file. _toys = c.toys != null ? c.toys.ToList() : new List&lt;ProductsToy&gt;(); would work just like: _toys = Ternary(c); ... List&lt;ProductsToy&gt; Ternary(Products _c){ if( _c.toys != null) return _c.toys.ToList() else return new List&lt;ProductsToy&gt;() }
I got the 2nd edition and will go with the latest shit thanks
I can't fucking stand it. VS has absolute certainty in what the statement means, so there's little reason why it shouldn't be all like "hey this is shorthand for if/then/else, and here's an option to auto-expand this to sane people format &lt;le button&gt;"
You should get these to a point where they can run before asking specific questions. Your program is an infinite loop, with a function returning nowhere. You also aren't saving the totals to even attempt a calculation off of. I'd recommend using a custom class combined with a dictionary object in your main class to make this more dynamic, but I'm not sure if you're familiar. You could just create decimal AndreaTotal, BrittanyTotal, EricTotal as well and return the function to those. Edit* I did notice you said you're fairly sure you got the input correct. If that's true, let me know and I can explain how it's not setup right.
This is moving so fast. &amp;#3232;\_&amp;#3232; Thank you everyone for your suggestions. I am working through a few of these right now. Thank you!
Probably not cool, but I was bored. Please use this as a little guide, not a cut-n-paste. There are hundreds of other ways to go about this, make yours unique. [Pastebin](http://pastebin.com/cauiPjWT)
Sweet Jesus, not at all what I expected. I don't want to cut and paste it. Really, I want to make this shit work. Thanks, fine sir.
&gt;I'm looking for a few pointers Pointers are considered unsafe in c#. You should stay away from them.
&gt;This makes sure that _toys will always have something set instead of being null. It's also to avoid a null exception. If you try to call the ToList() function of a null object, your program will crash.
I'm guessing you work or have worked on financial software. Most people would use a double or float to represent a dollar value. Have an upvote for using a decimal correctly
you and me both.
Obviously a dictionary would make it so much easier, but I doubt he's learned generics yet. He probably needs to use an array of floats.
I think your code is too far gone to talk you back down from wherever you were climbing :) I created a sample with less advanced concepts than the other samples have. Beware I included a bug. http://pastebin.com/bzGBHxBw Edit: I also have no idea if this actually satisfies the assignment. So you better make sure you understand everything and it's doing what it's supposed to.
New college student here. CS1400 (my first programming course) didn't. CS1410 will. The starting language was C#.
Glad you like it :) And by all means report any issues or snags, all inputs are very valuable.
I think I may convert [this](https://github.com/jhartwell/ADQL) from my finite state machine parser to using your generator. I'll definitely report whatever issues I encounter.
WaitHandle.WaitAll is the synchronization method you're looking for, for that exact scenario. See [this example](http://msdn.microsoft.com/en-us/library/system.threading.waithandle.waitall%28v=vs.71%29.aspx). However, blocking until all 5 finish probably isn't going to be optimal. Look into a processing queue, or just let the ThreadPool manage the details. One thing to note is that if you're sending these requests to the same web server, the default limit is 2 actual HTTP connections per remote host. You can change this limit using the ServicePointManger class. Hope this helps.
I made it a bottom up style parser mainly for the ease of constructing grammars for these styles of parsers. While Lalr certainly is a bit old school I think it makes up for it by not requiring you to left factor your grammar. That being said, it has also been a pet project of mine to make a yacc style tool for c#. And I myself have always disliked the idea of pre-generating code instead of doing it runtime. Also, I'm not really familiar with parsing techniques other than LL and LR. Might be something to investigate
You're pretty much right. Using a generated parser in this manner will get you very good linear O(1) performance. In fact, one of the cool things about structured parsing this way is that a character will be read from the input string only *once* which at least to me is pretty awesome. Opinions on syntax are probably about as diverse as there are programmers. I tried to make it as self explanatory as I could, and avoided the mathy comp-sci terms as much as possible in an attempt to lower the treshold for structured parsing. The syntax for other comparable tools are in my opinion way way worse, and assumes that you know quite a lot of parsing theory to be able to use it.
Haven't seen that, looks pretty interesting! I'd have to learn the packrat algorithm though :) I think that probably next on the list of major functionality upgrades to the library would be to implement the GLR algorithm to essentially handle unlimited lookahead which should be achievable using a modified version of the existing engine.
I assume that may be possible but I am not really sure. Blocks of memory allocated on heap have length blocks associated to them and probably CRT will check that(not really sure about this). However since the access to unmanaged memory is done in two calls to Marshal.Copy function that have quite a simple syntax the possibility of errors is greatly reduced.
&gt; and probably CRT will check that It doesn't. Plus, if the memory has been freed, those heap blocks may no longer exist, or have been reused for other purposes. 
Yet the app does not crash, it throws and exception that you can catch and handle, but it will not crash :)
I'm actually a big fan of "automagically," too.
&gt; Nice, but I wanted an example in C# - I believe you cannot crash an application by accessing bitmap bytes in a safe context. The following does not crash, ever ... This example crashes (AccessViolationException) in a safe context by accessing the bitmap data buffer after it's been freed: \[[codepad](http://codepad.org/DmPyhV8F)\]
ANother thing to keep in mind is that two pictures may have the same file name under your new naming convention. Don't forget to code for that case!
As it's been stated: you'll want to see if it has exif data. You're correct that creationDate does not return the day the image was taken but rather the day the file was added to the file system. Also make sure you handle the case when 2 files have the same file name. A simple increment at the end of the file name would serve well. Looking at your code: you also want something to make sure it's an image. If you're looking for exif data, it'll probably break if there's any other files. Chances are there'll be a thumbnail file (thumbs.db) in the directory.
Cool, thanks.
Yes, the Bitmap class is generally safe, but BitmapData is not. That's why most Bitmap class methods can be called from partial trust code, but Bitmap.LockBits cannot, annotated with a SecurityPermissionAttribute requiring "UnmanagedCode" permissions. You'll note that Marshal.Copy carries the SecurityCritical attribute, for similar reasons. As for the implementation of copy -- I believe the retail CLR might use word copies rather than byte copies, but the idea is the same.
No. I need an alternative. 
Why? If you tell us why you need the alternative maybe we can help you. Bottom line is it all boils down to javascript. So something like jQuery may be what you want.
Howcome?
You should learn about data structures if you want to progress any further.
Thanks, kind of just wanted to segment it out so he could understand a bit at a time
*Ed Note: you appear to be using VB and c# syntax interchangeably, I'm a c# guy but I'm going to try to answer in VB, but I'll switch it back upon request.* Okay, so the Session object is like a dictionary that you can store whatever values you like in. A dictionary holds key value pairs and is somewhat similar to an array, but more powerful. So...when your app initially fires up, every instance of that application that's served by your webserver gets its own Session. If you haven't stored anything in there it will be empty. &gt;EX: Session["Cart"] = cart; What's going on here is that the value of the object "cart" is being stored into the session dictionary under the key "Cart". I probably would have written out the example like: Session["SavedCartData"] = cart. ~~This method for saving value into the session (I believe) will fail if no item with the key "Cart" has already been added to Session (hopefully someone will correct me if I'm wrong, but it's easy enough to test.~~ *Updated with correction from jhartwell* If we have Session["Cart"] = cart; and then we do Session["Cart"] = cart2; It won't fail, the contents of Session["Cart"] will be cart2. &gt;EX: Session.Add("Cart", cart); This is just another way of doing the exact same thing as before, only now we're using the Add function to add the key/value pair to our Session dictionary. I believe if you try to do this one twice in a row you'll get some sort of "Key already exists" exception thrown at you. Most people tend to use one method or the other. So, last question. &gt;If the page is not being posted back, this event handler should get a Customer object from session state and store it in a variable that's declared outside the method. You got the right start I think, you want to follow that up with. If(!IsPostBack) Then 'Does a customer object exist in session? 'Not the only way to do this, can also check to see if a given key exists. If(Session["Cart"] IsNot Nothing) Then myCartObjectThatIDeclaredOutsideOfPageLoad = Session["Cart"] End If End If Keep practicing and eventually it'll start to make sense, I apologize in advance for any errors, I didn't double check any of my reply in my compiler.
&gt;What's going on here is that the value of the object "cart" is being stored into the session dictionary under the key "Cart". I probably would have written out the example like: Session["SavedCartData"] = cart. This method for saving value into the session (I believe) will fail if no item with the key "Cart" has already been added to Session (hopefully someone will correct me if I'm wrong, but it's easy enough to test. If we have Session["Cart"] = cart; and then we do Session["Cart"] = cart2; It won't fail, the contents of `Session["Cart"]` will be `cart2`. 
Alright, so you helped me immensely....now she's just being picky, I've got 4 errors left to fix from the 19 I started with...so again THANK YOU! I've gotten GREAT help so far, so I'm going to keep going. I'm slowly adjusting to the case sensitive nature of the language, but what the hell is up with 'If' statements? She doesn't like mine unless I case one of my 'if' statements with a 'I' instead of 'i' but then that breaks other things. My boss is out with a client so I can't poke his brain over the trivial stuff, but here's the most up to date version of what I have: public partial class CheckOut : System.Web.UI.Page private Customer customer; protected void Page_Load(object sender, EventArgs e) { if (!IsPostBack); Session["Customer"] = customer; End If; If (Session["Customer"] = "null"); TextBox1.Text = customer.FirstName; TextBox2.Text = customer.LastName; TextBox3.Text = customer.Email; } } protected void btnCancel_Click(object sender, EventArgs e) { Session.Remove("Customer"); Session.Remove("Cart"); Response.Redirect("Order.aspx"); } protected void btnContinue_Click(object sender, EventArgs e) { If customer="null"; customer = New Customer End If; customer.FirstName = TextBox1.Text; customer.LastName = TextBox2.Text; customer.Email = TextBox3.Text; Session("Customer") = customer; Response.Redirect("Order.aspx"); } The errors are on line(s): 11, 33, 40, 19. I miss .Net, but am slowly growing to like the real world applications of asp.net with C#. Anyway, enough with the soap box, I need help!!! Thanks IMMENSELY guys! I was stuck for a solid hour or two on this, and you made me realize I was thinking way too hard about it. 
SHE LIVES!!!!!!!! BIG THANK YOU TO FAINT DECEPTION! public partial class CheckOut : System.Web.UI.Page { Customer customer = new Customer(); protected void Page_Load(object sender, EventArgs e) { if (!IsPostBack) { Session["Customer"] = customer; ViewState.Add("Customer", customer.ToString()); } if (Session["Customer"] == null) { TextBox1.Text = customer.FirstName.ToString(); TextBox2.Text = customer.LastName.ToString(); TextBox3.Text = customer.Email.ToString(); } } protected void btnCancel_Click(object sender, EventArgs e) { Session.Remove("Customer"); Session.Remove("Cart"); Response.Redirect("Order.aspx"); } protected void btnContinue_Click(object sender, EventArgs e) { } } 
Cool! Looks like it's coming along great! One suggestion though, see how reddit is real messing with your codes alignment and font? Next time you share code, a good site to put it up on is pastebin.com. It will also let someone make an edit and send it back to you. In this case it's not very much code and it's fairly easy to make out, but I just wanted to share that with you.
Nothing really seems wrong with what I'm seeing, personally I'd prefer using DirectoryInfo and FileSystemInfo, but I have no good reason to give you. **Edit:** Directory.GetFiles doesn't return folders, so you will only be deleting files in the root of your directory. public static void deleteFilesInDirectory(string folderPath) { try { DirectoryInfo di = new DirectoryInfo(folderPath); FileSystemInfo[] fsi = di.GetFileSystemInfos(); foreach (FileSystemInfo f in fsi) { if (f.Attributes == System.IO.FileAttributes.Directory) { try { Directory.Delete(f.FullName); } catch (Exception e1) { } } else { try { File.Delete(f.FullName); } catch (Exception e2) { } } } MessageBox.Show(folderPath + " has been cleaned."); } catch (System.IO.IOException ex) { MessageBox.Show(ex.Message); return; } } Really though I guess it depends on how robust this program will need to be. As long as you're hardcoding calls to the deleteFilesInDirectory function you probably won't need much in the way of error checking unless someone has changed their temp directory to the root of * C:/ (less likely, but devastating) * D:/ (more likely, mixed results) The catch is in that adding the ability to delete subfolders means you should have some fail-safe/error checking bits in place. 
In general cases that may perhaps be true, but in this case the empty catch statement (and catching Exception) is clearly to ensure that if there's any error attempting to delete a single file the program still continues attempting to delete any other files it can. Having said that some logging inside that empty catch would be good, then at least the OP can report back to the user that some files couldn't be deleted.
With this I would say either use di.Delete(true) on the top-level directory or recurse over the child directories calling deleteFilesInDirectory on each before deleting the contents of that folder. That way you get the same behaviour at each level of the directory structure, rather than attempting to delete files individually at the top-level and whole folder structures at lower levels.
Check out [this](http://pastebin.com/6FzyahYb) it's mostly just style changes to conform to the de-facto standards, but I've also added in the deleting of sub-folders and a TODO because you should really do something with that empty catch. The only other thing I'd say is drop the MessageBox calls for something friendlier, maybe a single message or file output at the end. There's nothing worse than having to click through MessageBoxes when everything's working correctly.
It's not actually mine, but I dont disagree with your first statement. Personally I too would rather log the individual files that failed and present that to the user *somehow* rather than just having the information lost. I do disagree that DeleteFilesInDirectory should throw an Exception if it fails. The caller *in this case* doesn't need to know that something had failed beyond the logging that's already in place. For what he's doing, I think the behaviour is correct. I semi-agree with your last paragraph. Ideally the method would be in a separate class, there'd be an event (or events) you could subscribe to for when something happens and then the caller should decide in their event handlers what they want to do. However, that's massively over-engineering the solution to his problem. Again, for this specific example I think what the OP is doing is fine.
if you are storing dictionaries inside of dictionaries i have to wonder if you are doing something wrong.
I'm in the process of writing something bigger. 
The ones that failed were files on use such as Outlook data file. I was told there was no way to skip in use files so it was a feeble attempt to do so. 
I tried this at first but wasn't sure how to handle temp files that were in use. 
Will do! Thanks for the heads up, I suspect I will become an regular member of this sub and this knowledge will help facilitate things more smoothly. Also, I'd like to thank you guys for not being assholes. I try to stay away from coding forums because the members tend to make me feel unwanted and idiotic! I'm starting Chapter 4 today, wish me luck!
Yes. It is so freaking helpful. It really helps you grasp programming conceptually which for me was and is kind of still the hardest part of programming. I will recommend that if you ever need to learn Python you should check out [Zed Shaw's book.](http://learnpythonthehardway.org/) While I haven't read it yet it is recommended almost unanimously by everyone I know who uses Python. 
Using "1" would too work as expected. (Return 1.)
And, just for completeness, [here](http://www.asciitable.com/) is a link to the ASCII table, which shows why you got 49 for character value '1'. You may be aware of that of course, but it could be helpful to someone.
Oh that is awsome.... I upvoted it~ Redditors, Attack!
Why does every freaking ascii table on the web suck? 
Good question. I suppose it's probably not worth putting in much effort.
&gt; You're converting the char '1', which has the ASCII value 49 Technically, char is stored as unicode. It just so happens that the ASCII value and the unicode value are the same in this case. 
Well you learn something new every day :).
Hehe don't worry about it mate. The tutorials on the ASP.NET website have gotten much better over the years, I'd recommend setting aside some time to read through them http://www.asp.net/web-forms Also, somebody else mentioned that learning to program in a .NET language (VB or C#) is really a pre-requisite to learning ASP.NET and I would agree. A great first step would probably be to look up some VB or C# tutorials and familiarise yourself with the language you're going to be using. This example of yours touches on a few very core programming concepts such as variables, operators (+, =, ==), events (Page_Load is an event *handler*) and conditional statements (if). A few hours sunk into learning your chosen .NET language will be an enormous help in getting your head around these core ideas. The nice thing about these early concepts is that they translate, in one way or another, to virtually every other programming language you're likely to encounter. Good luck! Let us know if you have any more questions.
Actually that is [by design](http://en.wikipedia.org/wiki/ASCII#Unicode).
Just for reference, W3Schools is *not* W3C. They've been making money from misusing the similarity for years.
characters 0-127 are the same in ASCII and unicode.
"int" = Int32 not Int16, unless I'm mistaken. "short" is an Int16.
Hahaha yeah I've read one other Head First book and I really liked how it delivered information. Just made it all a bit more interesting. Walls of text can be super daunting and developers get enough of that as it is :)
Because ASCII sucks, we should all be using a charset that handles international characters. 
What's the error message you're getting?
I am working in Unity3d. Mono gives me no errors. When I run unity I get NullReferenceException: Object reference not set to an instance of an object randomBattleGen.fillEnemeyArray () (at Assets/CustomScripts/CombatSystem/randomBattleGen.cs:75) randomBattleGen.generateEnemies () (at Assets/CustomScripts/CombatSystem/randomBattleGen.cs:69) randomBattleGen.Start () (at Assets/CustomScripts/CombatSystem/randomBattleGen.cs:26) When it gets to the function call
Use a foreach, that is a primitive style of modifying a object in an array
Any idea why this wont push to an int? percentageOfPlayer1Hp = new int (((persistence.characterList[persistence.equipedTeam[0]].currentHp)/(persistence.characterList[persistence.equipedTeam[0]].maxHP))*100);
Any idea why this wont push to an int? percentageOfPlayer1Hp = new int (((persistence.characterList[persistence.equipedTeam[0]].currentHp)/(persistence.characterList[persistence.equipedTeam[0]].maxHP))*100);
Why are you creating a int object? Remove the constructor and then try again. 
What's the actual URL in 'gettoken' when you pass it in? Is TXTServer a textbox? If so, you'll need to use TXTServer.Text 
I'm embarrassed to even call myself a programmer I don't know how I missed that.
What you are asking is a big concept. Too big to explain here. You will find a lot by just seaching for [ms sql stored procedure.](http://lmgtfy.com/?q=ms+sql+stored+procedure) But from what you are writing you understand a little. It is finished SQL-code that you can call whenever you want. It may return something. And it may not. I can use two examples: 1. You find yourself using the same sql-query often in your application. Lets say all active customers. Exit date is null or in the future.You could just write that query as a stored procedure called GetActiveCustomers and call that whenever you want. It will return the columns that you have defined in the SELECT in the stored procedure. It will reduce code and overhead on the client-side. 2. You have some logic in your application that lets a customer quit being your customer. So the exit date get set. Instead if writing the UPDATE statement in your application. you write the UPDATE statemenet as a stored procedure that takes the exit data as parameter. You can then call the procedure at any time and passing the exit date as a parameter. Like this. CancelCustomer(exitDate). There will off course be more code than that. The database connection and the data reader, but I hope it helped you a little. 
you should check this out: [link](http://www.sqlservercentral.com/stairway/72400/) The why, is because the good practice is to have the database engine running on a different computer and that is one of the many advantages. 
I'm an aspiriing .Net web-developer....my problem is coming from a .Net Windows Forms background....having a 4-5 year break, and diving right into ASP.NET with C# development for web pages. Any other resources you think would be helpful, tips, tricks or the like? Also; Thanks for that link, will be touching base there when I'm done with the others I got.
I don't have any good tutorials on stored procedures but you should think of it as a function rather than a class and also think of it separate from C# and .NET. It is just a function that is written in SQL and executed on the server. You might use these for performance reasons or to create automated scripts for database maintenance. If you are programming ASP.NET though, all of the data manipulation is done server side anyway, whether it is done in C# or SQL. If you are looking at integrating SQL Server with .NET, you should really be looking at the [Entity Framework](http://www.asp.net/mvc/tutorials/older-versions/models-\(data\)/creating-model-classes-with-the-entity-framework-cs) though. What it does is create c# object representations of your database objects (tables, views and stored procedures) so you can access them like this: var db = new YourDataBaseEntities(); var Toys = db.Products.Where(p=&gt;p.Type=="Toys").OrderBy(p=&gt;p.Name).ToList(); string FirstToyName = Toys.First().Name; The generated class objects match exactly your SQL objects including relations. It makes database integration relatively painless. 
By "users" I mean DB users. So one web application would be running as one DB user. Or perhaps your Windows client app uses one DB client and another Windows client app is used for admin and runs different credentials that can run some administrative SPs. For the rights, check out "Grant Execute". You can also grant rights to insert/select/delete on tables for extra security. Or even not allow a user to see the tables at all and only let him access data via SPs (extreme but doable for those super delicate tables).
Try surrounding the file with ' OleDbCommand cmd = new OleDbCommand("SELECT * FROM '" + csvDir + "'"); Check out this article: http://www.codeproject.com/Articles/290242/Import-Data-from-a-Text-or-CSV-file-into-SQL-Serve
This is almost unquestionably the answer (for those of you in a [DenverCoder9-situation](http://imgs.xkcd.com/comics/wisdom_of_the_ancients.png)).
Try hard coding the path. Make it a simple path without spaces. Make sure what you're doing is working in general. Once that works, print out the value of csvDir...there may be things that aren't properly escaped.
I like codeeval better. www.codeeval.com
Thanks for looking, out of interest is there any particular reason you say that?
I'm a little biased. I like these test sites because I like to just write some fun code during the exercises. CodeEval lets me do that, and build up a library of solutions. I can then attach a link to my public profile on my resume/LinkedIn/whatever and show people ahead of time. This site seems to be further down the process, and used more by hiring managers. Not any worse, just CodeEval fits my niche (the programmer) better than this. I'm sure managers would give you better input than me. EDIT: However, I would absolutely put this on /r/dotnet 
Ah thanks, yeah I've been thinking about the programmer side but I'm not sure if working as effectively a recruiter is the direction I want to take. As a developer myself I want to find a way to make my site interesting to developers, but there are so many coding competition websites that it just doesn't feel original enough. But if that's what people want I guess I should listen :)
Never love the code -- Code follows function.
I think if you're focusing on recruiters, this is definitely a great first step. it's just a question of your audience. 
Hi, thanks for the suggestion. Unfortunilty I already had it hard coded, this is an exercise to try and make the app more dynamic. I know that the CSV file is valid. 
Sorry, that was a typo when formatting. I've corrected the sample Above ^
So is the only change you made is changing the hard-coded path to `Path.Combine`? Did everything else work when you had it hard-coded?
&gt; It's whenever the directory has a space, things start to break... Two questions: 1. What's the hard-coded string that you use? 2. What does the call to `Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)` return for you? On my PC, it's `"C:\Users\xtrumanx\AppData\Roaming"` (let's say xtrumanx is my Windows user name.) 
The only way I got it to work was to only refer to the filename in the query and move the rest of the path into the connection string. // C:\Documents and Settings\jasonf\Application Data on your machine string csvDir = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData); // Notice the string concatenation OleDbConnection cn = new OleDbConnection(@"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + csvDir + @";Extended Properties=""Text;HDR=Nomps;FMT=Delimited"""); OleDbCommand cmd = new OleDbCommand("SELECT * FROM recs.csv", cn); Hope that helps.
Stored procedures are like anything else, they can range from simple to complex depending on what you are trying to accomplish. On the simple side they may just perform a query, on the complex side they may use temporary tables, transactions, perform business logic or calculations, perform updates, etc. I suggest you google the crud out of it or hit up amazon for a book. You can always start with a hello world procedure and proceed from there. Even if you're not a sql guy knowing how to write simple SPs and queries is a valuable skill.
I've since learned to take it piece by piece and see what each bit of code does to the next. It's a lot to digest, but I've gotten the basics down. My employer just threw me into a live site and I'm designing an offshoot of one of the admin pages in which I 'add representatives' and the like. It's simple to more experienced guys, it's challenging but it's slowly coming to me!
I'll take a look at the web requests. Thanks man.
I checked the Color class, but it doesn't seem to be specific enough. How do I use Bitmap to analyze pixels?
What kind of "more specific info" are you looking for?
Check out Color.GetHue() and Color.GetSaturation(). http://msdn.microsoft.com/en-us/library/ed705s37
Cool, I think that's what I'm looking for. It's late and tomorrow I have a test, so mate tomorrow I'll try to implement that. How did you find that anyway? I looked Color in msdn, but it just appeared as the class with the different color statics. 
Err, HSL is just another way of representing RGB. It should be pretty simple to write an HslColor struct that converts from RGB color to HSL. RGB is literally all the data a pixel has. A pixel is physically made up of red, green, and blue sub-pixels that each have a brightness. There is no other data to be had.