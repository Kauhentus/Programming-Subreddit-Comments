interesting! thank you for your input. I will try to implement this solution as well.
im not sure if I'm supposed to use linq for this assignment but i did look up the 'take' method and its really interesting. Makes sense as well
Many answers about short circuit here, but no warnings to not call methods in you if that could be short circuited, if you are relying on the method to change the state of something. 
:) He could be a jerk, but if he were right, I'd still have tolerated him. The problem is that this solution relies on the consumers of the interface to create their properties correctly. This all started with my trying to create an interface that would *guarantee* I didn't receive any null objects so as to avoid dozens of (and possibly missed) != null checks in the CommandFactory (or any other consumer of an interface.) The thing is that as other programmers use the class, and create their own ICommand (or any other interface) objects, I have little to no control over how they create those objects. Without being able to specifically say, "DO NOT SET THIS THING TO NULL EVER" I'm stuck in my OWN code, having to constantly check that each and every property used in each and every method is checked, checked, and rechecked to verify that it's not null. If you check again, I've updated the main post a second time. I'm now using reflection when the factory instantiates to check all of the properties to ensure that, at the very least, when a command object is created, it won't have any null values at *that* time. Since most of my properties are read-only after creation, this gives me the 90% solution, though does nothing to prevent the user from *later* setting a variable to null. I believe that a full solution *may* be in a combination of the two (verifying that newly created objects are not set to null through reflection at the beginning, then using a struct on all non-read-only objects that prevents objects from later being set to null manually). At least in the case of factory patterns, I think this would ensure the elimination of any null values at any point, but now the question becomes one of whether the juice is worth the squeeze.
Probably. Look up how to spawn background threads. (Threading is different than multitasking, it can be done on the operating system level.) Beyond that, I probably can't help too much as I haven't had the pleasure of working with an Arduino.
Removed: Rule 6.
&gt;I would think that in this case items and userList would be the same, but they are not. The same in what way?
You can subclass observable collection and implement item property changed event handling. I read somewhere BindingList has memory problems or something. Also implement INotifyPropertyChanged in a baseclass and inhherit from it. You can also use [CallerMemberName].
The same in the way that when i do an .Add(...) on them i should get the same result out of it. I was trying to use the Class list, or userList as my item source for lvDataBinding.ItemsSource, but that does not work with userList.
Yeah, I went with that originally, but didn't feel like writing that much. Will give it a try though
I'll assume your breakpoint is at the end of the MainWindow() body. If this is the case, then your locals see: items = a List&lt;User&gt; with 3 items userList = a class of type TestDataBindingWPFExample.MainWindow.UserList Inside that class the debugger see's the 'private List&lt;User&gt; userList' and you can step into it. You can't however access this list from code outside of the UserList class because the list is a private member. You either need to make it public, or provide a public method to get the private list. In the event the list were just public then at your breakpoint: items = list of 3 users userList.userList = list of 3 users As you can see, at the breakpoint userList is a local variable of type UserList, and inside the UserList class is a field called userList.
From the readme: This project is intended to support running .NET code as an Electron Plugin, running code using the Mono runtime, side-by-side the V8 engine and to provide both C# API bindings to Electron's plugin API as well as the Web browser API. This will be made up of a few components: * The plugin that launches the Mono process and runs code on behalf of the user. * The `Xamarin.PepperSharp.dll` API bindings that will provide access to the APIs surfaced to Chromium plugins to C# code. * `Xamarin.W3C.dll` API bindings that will provide access to the browser APIs, built on top of `Xamarin.PepperSharp.dll` For the `Xamarin.W3C` APIs, we intend to use the TypeScript type definitions to generate a strongly typed .NET API. # Future Work We hope that the `Xamarin.W3C` API would be used in the future when we compile .NET code to [WebAssembly](https://webassembly.github.io/). 
&gt;var result = source.OrderBy(item =&gt; rnd.Next()); Please don't do this. Stick to the [Fisher-Yates Shuffle algorithm](http://www.dotnetperls.com/fisher-yates-shuffle).
`UserList` is not a list, it is a class that happens to contain a list in one of its fields. The framework won't just guess that you want to access the private list that it contains and then access it with reflection or something, because there are countless scenarios where that might not be the case. To be recognized as a collection, usually a type must implement one of the interfaces `IEnumerable&lt;T&gt;`, `ICollection&lt;T&gt;`, `IList&lt;T&gt;` or even `IBindingList&lt;T&gt;` (or their non-generic variants) depending on the level of functionality required. To make this easier you can inherit an existing class such as `Collection&lt;T&gt;`.
I'd considered this. I could do a lot of "fixes" with an abstract class (eg, other validation), but I don't remember what my reasoning was behind avoiding using one (whether it was our unit testing with Moq, or some other reason). I do remember a couple days back I abandoned using an Abstract Class, but I'll have to dig into again to figure out my reasoning for it.
Did you look at the original post? He's subclassing `List&lt;T&gt;` (which is perfectly legitimate). He can't replace the actual list. He's explicitly asking to randomize a list. Not to create a **new** randomized list.
&gt; Did you look at the original post? I did. I was responding to you and newoodworker, not OP.
Here's an implementation of the Fischer-Yates algorithm that works on any IList&lt;T&gt;: /// &lt;summary&gt; /// Shuffle the list. /// &lt;/summary&gt; public static void Shuffle&lt;T&gt;(this IList&lt;T&gt; list, Random random) { int n = list.Count; for (int i = 0; i &lt; n; i++) { int r = i + (int)(random.NextDouble() * (n - i)); T t = list[r]; list[r] = list[i]; list[i] = t; } } EDIT: /u/DeathTBO apparently posted the same thing. My bad.
Or he's just new and asking for help. 
If it's solely a testing issue, you might be able to work around it with the shimming features in the Microsoft.Fakes framework. It's kind of gross and clunky, but it's pretty much that or TypeMock for stubbing up non-virtual behavior.
We're limited to Moq with the client, but I'm not familiar enough with it yet to know its limitations.
Cool. It was really just a curiosity on my part.
Refuse to use var? There's no benefit to using it or not; personal preference really. I personally like to be consistent and always use explicit declarations; just makes the code more readable to me. Couldn't care less when I see someone using var all the time though. 
[LINQ-to-Objects](https://msdn.microsoft.com/en-us/library/mt693052.aspx) is very useful to perform maintainable, readable queries on content or your game state. For example, say you have a laser that hits all enemies in a line: var hitEnemies = GetObjectsHitByRaycast(myLaser) .OfType&lt;Enemy&gt;() .Where(enemy =&gt; !enemy.IsInvincible) .ToList(); (EDIT: This is just a very basic query. You could also easily group them by priority, sort them by distance to the laser source, create dictionary lookups based on their faction/team, etc.) You can also still use local databases (say, SQLite) in your game and LINQ query against that. Finally, if you're working with XML content (say, game saving/loading) you can use LINQ-to-XML there too (although there are many XML I/O alternatives: choose what's best for you). Like all things, LINQ queries can be _abused_ resulting in poor performance. Do some research and gain an understanding on closures, anonymous types, and deferred execution and their potential impact on performance. I would say, yes, LINQ can and should be used for game developing given the correct context/usage. Beyond that, LINQ is a pretty standard/expected/useful skill for any C# development in general. Definitely worth your time to gain an understanding of. If you want to dive deep, you can see how the basic LINQ-to-Objects fundamentally operates by going over [Jon Skeet's Edulinq series](https://codeblog.jonskeet.uk/category/edulinq/) where he basically re-implements the LINQ operations. That too should help enhance your understanding of iterators, generics, and lambda expressions/delegates.
Just to clarify what I meant, this is extremely easy to read: var strings = new List&lt;string&gt;(); And this is redundant and makes me think you copy paste your code from SO: List&lt;string&gt;() strings = new List&lt;string&gt;();
Looks like running C# code, the whole mono runtime, in a browser process as an Electron plugin. So Electron will run the web tech while mono allows the C# side of things to work. 
You should learn about [WebAssembly](https://en.wikipedia.org/wiki/WebAssembly).
At the very least, every LINQ to object method has to allocate an object for the source enumerator, and then usually one or two for the returned enumerable and enumerator. Depending on the method and context there's additional allocations for the closure/delegate, internal buffers etc. Usually this is not a concern, but in performance critical code as is common to games, a few objects allocated in a tight loop quickly add up to thousands of objects for the garbage collector to clean up every few frames, which may then cause undesirable stutter due to GC pauses. There's also some minor penalty for delegate invocations. This isn't to say that LINQ is some ultra slow performance killer that should never be used, but in performance critical code it is a good idea to be mindful how and where you do it.
Thank you for the information/examples. 
Holy shit. Thank you So I should use observableList and wire the events by hand? 
Ive always been fascinated with FileSystemWatcher, but it can be flakey from time to time. For me, being able to kick off some code almost immediately after FSW raises the event is a godsend. http://stackoverflow.com/questions/239988/filesystemwatcher-vs-polling-to-watch-for-file-changes
That really depends on what you are using the list for: If you just want notification that some item in a list had an internal change in order to react to that change by calling some method, consider dispatching a custom event closer to whatever is actually causing these properties to change and react to those events instead. You'll likely find that these properties are getting changed in batches and/or because of some external event and it makes more sense execute code elsewhere which aligns to these batches of changes. If your list or particular items within it are being displayed via a WPF or UWP control then rely on the internal databinding and ItemSource properties of those controls to update your UI. Don't forget than you can use XAML's [MultiDataTrigger](https://msdn.microsoft.com/en-us/library/system.windows.multidatatrigger) to react to any number of properties changing in the same manner. Consider using [Fody's PropertyChanged library](https://github.com/Fody/PropertyChanged) to reduce the amount of boilerplate INotifyPropertyChanged code that you'd otherwise have to write. The library also provides the means to dispatch events based on property dependencies. Also, use a [CollectionView](https://msdn.microsoft.com/en-us/library/system.windows.data.collectionview) to wrap your ObservableCollections in order provide sorting, filtering, and navigation without changing the original collection at all.
&gt; Electron Plugin So, is this not for web pages?
oh you mean WebSharp is client side ?
I like Pluralsight
Go with MVC, WebForms is dead. There are a few tutorials on the [Asp.Net site](http://www.asp.net/mvc/overview/getting-started/introduction/getting-started)
It works, the compiler just can't automatically infer the type parameters from the nested generic classes. You can call it by specifying the type parameters manually: map2map2set.Add2SndInnerSet&lt;SortedDictionary&lt;string, Dictionary&lt;string, List&lt;string&gt;&gt;&gt;, Dictionary&lt;string, List&lt;string&gt;&gt;, List&lt;string&gt;, string, string, string&gt;("this", "should", "work?"); but of course that kinda defeats the purpose of an extension method.
Why do you need the `new T()`? You just overwrite the value anyway. Without that you can get rid of the `new()` constraint so it works for types without parameterless constructors as well. Also, why return `IConvertible` instead of `T`? Why does `T` even have to be an `IConvertible` at all, you're converting *to* `T` and not *from* `T`.
I actually just got it to work. I was attempting to write a generic method so that a caller could read in a keypair value as any type, as long as that type implemented IConvertible. I'm fairly new to a lot of this, but here's what I did: public static IConvertible GetKeyPairValue&lt;T&gt;(string keyPairName) where T : IConvertible { foreach (KeyPair keyPair in PublicKeyPairList) { if (keyPair.Name == keyPairName) { return convertToType&lt;T&gt;(value, typeof(T)); } } return null; } private static IConvertible convertToType&lt;T&gt;(IConvertible value, Type type) where T : IConvertible { return (T)value.ToType(typeof(T), null); } private object mySetting; public bool mySettingAsBool = (bool)GetKeyPairValue&lt;bool&gt;(namof(mySetting)); public string mySettingAsString = (string)GetKeyPairValue&lt;string&gt;(nameof(mySetting)); public string mySettingAsDouble = (double)GetKeyPairValue&lt;double&gt;(nameof(mySetting)); 
There is no webforms in .net core. Webforms suck. Learn mvc.
A couple notes: * Instead of the whole convertToType method you can just use 'return (T)Convert.ChangeType(keypair.Value, typeof(T));' in the GetKeyPairValue method * You appear to be doing a lot of implicit casting on these values and will likely run into many exceptions down the road since they are being stored as simple strings * Consider using a Dictionary instead of what appears to be a List&lt;KeyPair&gt; for PublicKeyPairList. A Dictionary&lt;string,string&gt; seems to be what you want anyways, and it has the built in KeyValuePair type to represent members. Dictionaries also allow for access via PublicKeyPairList[mySetting] instead of having to iterate through the list. * Furthermore, you seem to be creating some sort of custom configuration file management solution, so depending on your platform consider using the built in .NET or ASP.NET configuration systems, or even a 3rd party configuration lib instead of rolling your own -&gt; it could save you a lot of time
Gotta up vote this. 
I meant the cell value, sorry. I'm keen on that specifically since I can usually be pretty sure I've got the actual cells spawned by the time some other code is trying to look at them, but the user can delete a value at any time which will make the value null.
The title is misleading...
&gt; It's far from efficient For many use cases it's more than enough. 
reactiveui supports this behavior with reactivelist. It is a huge library though so it is not a perfect solution. http://docs.reactiveui.net/en/user-guide/lists/index.html#using-change-tracking
YAY! That did it! Thank you for the explanation (extension method). I've amended the original post to reflect the updated working code.
I made the choice to not edit the description of the repo. For now, it is a plugin for electron but the project says that it may be a base for a C# support of WebAssembly.
Could you explain the benefit of passing in the random there for your example vs. not?
Hmm. Why? 
It aggravates me how some apps like Notepad++ can cause the ModifiedEvent to trigger multiple times on a file.
&gt; NotifyPropertyChanged That's basically the stone on which WPF builds on. Opposite of underused! :P
I appreciate MemoryMappedFiles a lot. Don't often have a use for them, but they are very nice for large files (like reading assets from packed game files). Besides that, async/await is something that helps a ton but I don't use it very often.
Like a free version of LINQPad? Of course LINQPad is by now very mature and featurefull.
Lack of perfect inference is hardly breaking the type system. That aside, you should really prefix all your type variables with T, as per convention (so TOuterDict, TInnerDict etc.).
English reading wise, empty is easier to quickly understand perusing code. However, thats really minor. I don't know someone who doesn't understand array instantiating haha
IMO, LINQ-to-Objects is a stupid marketing name for what is simply a bunch of collection manipulation methods. The name should be reserved for the "query syntax" (which I personally never use).
Thanks for the paper. I'll have a read. Joe Duffy's blog is a treasure trove of good stuff too. Really enjoying his articles on Midori, and hoping there are more to come.
Any particular reason not to use arrays? I tend to use it whenever the result is not meant to be changed. Which is probably the majority of uses for me.
I think this is exactly why MemoryMappedFiles are handy. You can destroy caches so that memory is never clogging up and still manage the file like you have it entirely in-memory.
Oh, I was hoping for WebAssembly.
Because they're in System.Linq
I selected it by accident, retyped code over it....sorry. I know this because I just pressed Ctrl+Z a couple of times and that code reappeared. I apoligize.
Another way would be to hit F12 in chrome, then go to the network tab and look at the post data
No clue what you're saying. I don't need arithmetic algorithm... I already have one that works fine, except I wasn't 100% sure what 1e308 ^ 3 is. Now I know, it's 1e924. However, I found another solution to the problem I'm having for using large numbers (1e10000 +) and calculating within 10-15 digits of precision. Which I'm placed in question already.
No compilation to executables just yet. I'll look into it. Reference (#r) directives can contain full paths to DLLs, or to GAC assemblies. If you save the .csx file, you can also use relative paths. BTW you can also run .csx files using the command line 'csi' which ships with VS and .NET Core.
Looks brilliant. Linqpad needs an alternative. Something I noticed: * my work laptop may not be the best, but this seems sort of slow. * Typical avalonedit bugs; hint windows staying open despite no longer being relevant (cursor moved), Intellisense-style window staying open despite having nothing to display, etc.
Get ready to make workaround hacks so shitty you want to cry. :p Source: have written some stuff with AvalonEdit
Oh, so you decided to make a BigFloat. Good luck with that.
Yah, English is or my first language Thanks
Fantastic! I am really happy this exists. I'm a die hard LINQPad fan, but I have been wanting an open source variant for a long time. I'm glad it's in WPF as well.
This boggles my mind. Will have to check out the source on how this is even implemented. Great stuff OP
This app is already awsome, thank you for this. What I don't like but is probably a matter of getting used to it is the HOME and END keys behavior when you have intellisense dropdown open. I think HOME and END should navigate in the next, not on the intellisense dropdown. But this is just a nitpick.
I use [Jot](https://www.reddit.com/r/csharp/comments/4i1taq/jot_net_library_a_better_alternative_to_settings/) for a week. So far it's easy and it works. Check out the source for customizations/ideas or ask the [author](/u/anakic).
AvalonEdit - means no Linux or Mac support, a bit dissapointing, but I really love projects like these.
It's on my list https://github.com/aelij/RoslynPad/issues/21
Look into xip.io for setting up the hostnames without requiring config. e.g. you can have seperate sites set up under {projectname}.{branchname}.127.0.0.1.xip.io Just push to test branch when you want to make a test environment I personally wouldn't use octopus as it's not branch aware, and the config has to live inside octopuses ui. I'd use App
I'm thinking about an [Avalonia](https://github.com/AvaloniaUI/Avalonia) port, but that's in the far future. Unless someone else ports AvalonEdit :)
For creating an instance of the random class you need a seed. If you don't provide one the constructor of Random will use the current time to generate one. When you call Shuffle mutliple times in a small timespan the time will not have changed between each call to shuffle and random will be initialized with the same seed and will generate the same random numbers. Passing an instance avoids that.
Ok, thank you gonna try that. What do you mean by where you are in class? Also do you have any good recomendetions as to where to learn arrays for c#?
Yes we have already been taught about classes and objects.
&gt; [methods] are functions that do a specific job. I feel like that explanation may be missing something, conceptually. I'm not familiar with the course, though. A function is a method is a procedure, for the most part. There are some distinctions to be made (functions return values, hopefully in a deterministic fashion and without creating side-effects; methods belong to objects; procedures coordinate calls between other functions, methods, and procedures), but there's a lot of overlap, and the verbiage is often used interchangeably. &gt; how often do you use methods, classes, and objects in your everyday software development job? Constantly. C#'s a language where almost everything's an object, even most of the things that aren't. As far as learning more about methods, have you tried checking in with r/learnprogramming and/or r/learncsharp?
thanks, didn't know those subs existed. Post removed from /r/csharp and reposted in r/cscareerquestions
Methods, classes, and objects are literally the foundation of nearly each and every C# application that has ever been written. Without methods, if you were writing a console application for instance, every single line of code would go into one giant Main (which is a method itself). It sounds like you are a beginner to programming in general and would be best served to read up on a the basics of programming object oriented languages. I'm not sure who 'Bob Tabors C#' course(s) is tailored to, but you need material for absolute beginners as you are questioning the basics of the language such as methods, classes, and objects.
&gt; cliconfig.exe where would that be located? Edit: Found it: C:\windows\system32\cliconfg.exe
That was my point. Just make sure you only use methods that don't change anything (change state) in an if statement that can short circuit and you'll be fine. 
it's not editing alias' that's blank. 
Weakly and dynamically typed languages are tools which simplify programming by assuming the code is too complex for the computer, but the human can fit everything that's going on in their head.
Excuse me if this is insanely idiotic, but isn't JavaScript more of a front end kind of language and c# is more of a backend kind of language? Edit: I guess I sorta meant not including WPF, ASP, Razor, etc... like pure C# from a .cs file, but also, it doesn't matter. I think I just didn't really think about how big the C# world is, and how much it can encompass. Thanks for slapping some reality in my face guys.
It's a Windows forms application, written in Visual COBOL. I can write this all in c# though and call it from cobol. WPF looks promising assuming it can be used in Windows Forms projects 
There's a reason why there's a thousand projects like CoffeScript, TypeScript, GWT and so on to write JS without actually having to touch JS.
Unless somethings changed, working directly with a data source seems to be really difficult using UWP. All the resources I have found have required REST services or an Azure Database.
I have a coworker who *claims* he wrote ERP software using only PHP. *If* that's true, I feel bad for the poor sod who replaced him and had to make heads or tails of that mess.
Both languages can be used for both front end and back end.
I suspect he may regard some C#'s features as negatives, rather than positive (like strong, static typing). C# probably is *not* as portable, given the thin-to-nonexistent support outside of Windows, and the inability to run it in practically any browser on the planet. OTOH, there's basically one C# platform, while JavaScript is a little different in each browser and has about a million frameworks with lifespans like mayflies. Mostly, I'd wager that he's mistaking familiarity for superiority: unless/until WebAssembly wipes it out, JavaScript has a clear niche in the browser and isn't going away, but I sure as hell wouldn't want to maintain anything much in it.
If one tool isn't objectively better than another, then they are by definition equally the right tool.
You're missing the "for the right job" qualifier
&gt; But for anything outside of that domain, I don't really see what JS offers. The big feature of JavaScript outside of the browser is that, if you're already doing web development, you already *know* JavaScript-the-language. JavaScript's *really* not my cup of tea, but a monoglot programming environment, back to front, *is* an advantage, and one that basically no other language really seems to offer, right now. On the other hand, JavaScript: duck typing and prototyping and bizarre scoping rules and all. I really hope WebAssembly works out/takes off.
Which, as code base grows, becomes an increasing issue.
I think he specifically mentioned he doesn't have to care what a type is. He just assigns it &amp; he's good to go, which to him is obviously better than strong typing.
I argued that it was a pain in the ass to figure out &amp; hunt down all the frameworks, modules, &amp; flavors of JavaScript to get things done.
I haven't used dynamic; I'm a programmer writer &amp; usually work on SDK reference, but have been sucked into developing internal tools. There are a lot of C# features I've never had the opportunity to use. Forgive my ignorance, but what benefits does using dynamic offer over var? I know that var is strongly typed at compile-time, but I hate seeing it lazily used all over the place.
From [MSDN](https://msdn.microsoft.com/en-us/library/dd264736.aspx): &gt;Visual C# 2010 introduces a new type, dynamic. The type is a static type, but an object of type dynamic bypasses static type checking. In most cases, it functions like it has type object. At compile time, an element that is typed as dynamic is assumed to support any operation. Therefore, you do not have to be concerned about whether the object gets its value from a COM API, from a dynamic language such as IronPython, from the HTML Document Object Model (DOM), from reflection, or from somewhere else in the program. However, if the code is not valid, errors are caught at run time. Basically, you can use any operators or . accessors that you want on a dynamic member without the compiler caring if those operators or . accessed members are actually available or will work. Errors will be thrown at run time whenever you actually try to do something invalid. This is essentially how Javascript works 24/7 -&gt; you can do whatever you want with your code and the javascript compiler couldn't care less if it will actually work. Furthermore, the dynamic keyword functions because the [Dynamic Language Runtime](https://msdn.microsoft.com/en-us/library/dd233052.aspx) was added to the language, which allows for a whole host of interesting things to be done.
Not 100% sure on what exactly it is you're asking but could you not use the key up event instead to see when the key is released and you can hook into that.
If you're talking about how often the `KeyDown` event is raised while a key is held pressed, that's a user-specific Windows setting (repeat rate and delay in the keyboard control panel).
As I said, it's a user-wide setting, so you shouldn't mess with it. It's meant for text input and not game controls anyway. If you need custom intervals, you can manually track the key state (set a flag on the first `KeyDown`, unset on `KeyUp`) and check that in your game loop, or start and stop a timer.
Thanks for the feedback! We haven't finished our perf work on the LINQ feature yet, but our plan is to make most of your interactions with it non-dependent on the size of the collection. If you ever see OzCode responding slowly again or find a bug, please do consider us sending us a performance profiler snapshot or a bug report to support@oz-code,com - we'd really love to figure out what went wrong and fix it. As for release cadence, now that the EAP is out, we plan to release updates pretty quickly and push more improvements out the door quickly.
&gt; This is essentially how Javascript works 24/7 -&gt; you can do whatever you want with your code and the javascript compiler couldn't care less if it will actually work. How does error handling work? :\ I used to script in Lua &amp; it didn't care if you sent something to few parameters, too many, misspelled a variable name, etc. Weird things would start happening client-side though.
You can wrap Javascript in try/catch/throw statements. But in general, it is more about the inevitable VOLUME of errors that come pouring out of your code at run time since the compiler never corrected you in the first place - let alone the silent bugs which never throw any errors because you didn't technically break anything, but the code is doing things you never intended it to.
Sweet, I'll keep that in mind next time, thanks!
He does have to care about what a type is, if he wants to write working programs. It just means his program will fail at run time instead of at compile time.
You declare bytesSent inside a Lambda/anonymous function, therefore it is not accessible by any outside code. Look at it this way, a Lambda function is merely an inline version of a normal method. If you called SomeMethod() which is declared outside of ArtnetByteArray, then you'd have no reason to expect to be able to access a variable (bytesSent) declared in that method either.
Wow, a stack overflow post that is actually interesting. It's been awhile.
I should probably also mention that this is way advanced for me and i haven't a clue on how to make this work this is rather new functionality to me and rather advanced. I've been wracking my brain on this for far to long trying to get this to work.
Because this is reddit.
As opposed to Windows Forms? There is not even a question you should be doing new development with WPF, if you're targeting Windows Desktop. You can do anything with it. I only wish we had some official, lightweight MVVM framework from Microsoft (instead of just Prism). As it is, you need to depend on 3rd party solutions (like Caliburn.Micro, or MVVM Light), and the documentation is not always the greatest. But overall, if you put in the time to learn those, you'll benefit.
So, one of the problems here is that `bytesSent` isn't even declared in this snippet, I assume that's from your attempt to use a "global" variable. If you declare `bytesSent` in the method (not in the lambda), the compiler will generate a closure so that the variable available in both the method and the lambda. That brings you back to the "use of unassigned local variable ..." problem, because `bytesSent` isn't actually assigned a value in the method, but in the lambda which isn't run in this method. You can fix that specific error by initializing it with a default value (or making it a "global" field), but by itself that will just hide the underlying problem and doesn't solve anything. You're setting up a callback method to be executed at a later time (from the context I'm guessing when a packet/message arrives), but you attempt to return the value immediately which just isn't possible. The ideal solution is to just make the calling code asynchronous as well, but of course that's sort of a chain of dominoes because then the calling method needs to be called asynchronously too and so on. It seems you want to execute an asynchronous operation in a synchronous manner, which can be quite difficult to do right. One solution could be to use a `ManualResetEvent` to block the method from continuing until the callback has been executed. That *might* work, or it might deadlock your application, depends on how the `artnetReceiver` stuff works.
I've found myself down a rabbits hole lol this is just way over me unfortunately.
JIT learning seems to work well. Its just when you have to implement something big you sometimes have to stop writing code for a while to properly investigate the framework(s) you are considering using so you don't get 60% down the project just to discover it either cant do what you want or you implemented it badly. Then again you usually don't know all the details ahead of time either. ;) Right now building the deploy chain for a new project on Visual Studio team services on Azure. Not much coding but still lots to learn quickly!
It's not very clear to me what you mean by "sending a request to the webserver". Since you have Page_Load() I am assuming you can just request the aspx page and the email would get sent. I think you need to communicate the requirement/problem better. 
Ok, you are getting a bit confused regarding the control flow involved in asynchronous programming and how threads can get created on the fly to handle asynchronous requests. To make it short, you are expecting to re-enter execution of the ArtnetByteArray method via a callback method after the NewPacket event, however your program has long since continued on executing and already tried to return bytesSent awhile ago. When you call artnetReceiver you are merely assigning some code (another lambda function) to act as the NewPacket event receiver, returning to ArtnetByteArray, and returning whatever is in bytesSent (which the method can't access because it was declared inside an anonymous lambda function). The thread which is executing your program has not been instructed to wait on anything and is just going on about it's business. Again, without the rest of your code it is difficult to tell how things are working behind the scenes, but this 'artnet' instance is either sending out some type of webrequest via your main thread, or a background thread, and so it is difficult to tell what thread the NewPacket event handler is getting executed on, if at all. If you can set a breakpoint inside the NewPacket event handler and actually hit it then you've gotten somewhere at least. If you declare bytesSent as a static member of whatever class contains ArtnetByteArray() then it will probably get set to the processed version of that dataout string via some processing thread, just not the main one on which your application is executing. In order to test this theory (assuming the NewPacket event handler is getting hit), do whatever needs to be done to make 'artnet' send out a remote request, Thread.Sleep(1000) or whatever amount of time it takes to get a response, set a breakpoint after the sleep, and then inspect the Static bytesSent member -&gt; it should in theory be set to what you want it at that point. You'd need to oviously set the ArtnetByteArray return type to void, in order to set up the event handler and callback (although the callback is irrelevant at this point since you aren't using aync/await anyways -&gt; the callback code might as well be a part of the event handler).
Which brackets do you mean? Curly brackets `{}` surround objects, square brackets `[]` surround arrays (in the case of JSON.NET basically any collection type). In cases where you can't figure out a convenient object model to serialize to a specific format, you can also directly build the JSON out of `JObject` and `JArray` objects.
Square brackets, before I left for the day I thought I was going to have to do something with a jarray, but my mind was turning into mush, so I just have to come back to it.
Never heard about this tool before. Looks awesome! Shame the company I work for develops in VB.NET.
Great question/topic! I'd be willing to bet JIT is the most common way for working developers to learn new techniques/technologies. Notice I said *most common*.
some notes: * The JSON you posted is valid (I like to validate everything with [jsonlint](http://jsonlint.com/) just to be sure) * There's a really good [JSON C# class generator](https://jsonclassgenerator.codeplex.com/) that you might try to use. It will generate the correct C# code that's needed when deserializing the JSON. In addition to the above, I think this is the kind of structure you're going to want to create for the class representing your JSON data. I can't compile it right now, so it might not be 100%, but it should give you an idea. You should double-check this with the class generator I linked above. public class Entity{ public string internalId { get; set; } public string type { get; set; } } public class Suppression { public string externalId { get; set; } public string type { get; set; } public Entity baseEntity { get; set; } } public class SuppressionSubItem { public string externalId { get; set; } public List&lt;SuppressionSubItem&gt; devices { get; set; } public string attributes { get; set; } } public class SuppressionSubList { public List&lt;SuppressionSubItem&gt; items { get; set; } } public class SuppressionMasterItem { public Suppression suppression_items { get; set; } public List&lt;SuppressionSubItem&gt; suppression_sublist_items { get; set; } } Then you would use the `SuppressionMasterItem` class to deserialize the incoming object. ## **edit** After thinking about your data structure last night, if I could change how it's structured, I would do this: { "suppression": { "externalId": "nameOfList", "type": "Suppression", "baseEntity": { "internalId": "JENNY", "type": "Account" } }, "externals": [ { "externalId": "867 5309", "devices": [], "attributes": [] }, { "externalId": "867 5309", "devices": [ { "externalId": "867 5309" } ], "attributes": [] } ] } The main change here is modifying the whole structure from an array to an object, and then giving names to each of the base elements within the object. Doing this would make it easier to access the specific portions of the data.
Most things I learn as I need. Occasionally I'll hear of something interesting that I don't have the opportunity to apply to work, which I'll dive into on my own time
Yes, do you refert to this section? &gt;&gt; We hope that the Xamarin.W3C API would be used in the future when we compile .NET code to WebAssembly. How do you read from this any WebAssemly support? They're **hoping** that the **API** will be used in the **future** ...
It depends I go through phases where I'll be super interested in independently learning and other times where I'll only learn as I need it. I've noticed that the independent learning is a double edged sword, on the one hand it reminds you of new ways to solve problems, on the other hand you might find yourself looking for a problem to solve with your newly acquired skill and try to solve one that isn't quite right.
&gt; There's a really good JSON C# class generator that you might try to use. It will generate the correct C# code that's needed when deserializing the JSON. Yoink, another great tool to download, thanks!
The real problem seems to be that Char is a leaky abstraction because of which you get the counter-intuitive (and arguably nonsensical) idea that Char(acter) does not always encodes a real character. This is probably for historical reasons, but still the design is at fault. One of the more simple solutions would have been to rename it as CodeUnit, so at least people would be a bit more aware they are not the same as an actual character. 
Unicode isn't variable, but the concepts of grapheme cluster and extended grapheme cluster are, in the sense that they can consist of multiple Unicode code points. In addition to that, most Unicode encodings are variable length for a single code point. It's a bit of a mess :p
CodeUnit won't even cut it, since `char` only represents a UTF-16 entry. It can be half of a surrogate pair and thus half of a code unit. 
&gt; It can be half of a surrogate pair and thus half of a code unit. Well yes, but unless I have my UTF-16 wrong, in their parlance surrogate pairs are actually two code units, perhaps you're thinking about code points, which is an encoded character iirc. I googled a bit and wikipedia seems to agree, see the 2nd sentence there: https://en.wikipedia.org/wiki/UTF-16 What I propose is that in a Unicode UTF-16 context, `char` would have to be variable length, not just a 16bit "word" that sometimes doesn't fully encode an actual character, that's just basically naming things wrong.
Depends on how you look at it. I was in fact thinking about Grapheme clusters when I wrote that statement. In my perspective the variable width nature of Grapheme clusters pretty much makes all of unicode variable width, at least for full support. But yeah, code points aren't variable width.
I had Properties.Settings.Default.s_ip=textbox1.text; Properties.Settings.Default.s_var=textbox2.text; Properties.Settings.Default.Save(); I highlighted the first two lines and deleted them by accident. I hit Ctrl+Z, they reappeared and then it worked.
Just thought of something else....since the person doesnt NEED to know how much rows they are, Im adding a "M". This will go from whatever number is first to the máximum number of rows. 1 2 3 4 5 Putting 2-M would include 2,3,4,5 Same thing as putting 2-5 but without knowing the end.... 
I think the most important thing in programming (especially in C#) is knowing what already exists. The .NET library is full of things, some obscure, and not often used, some new for me. No sense in re-inventing the wheel if someone else (especially Microsoft) has already implemented it for me. So usually, I read /r/programming, or /r/csharp and skim it for the interesting bits. That and 15 minute reading per day (an actual book), I slowly gain more knowledge about programming and C#. Not the nitty gritty per se, but enough to have context. And that context is usually the most important thing. It doesn't matter if you don't remember the details, you can always look it up. So for me, I think a mix of JIT learning, and a bit of contextual learning on the side, is a good way forward. That way the JIT learning curve/time becomes smaller, since you remembered there is a class/NuGet package you might be able to use in that particular case. To give an example, just in this thread I learned that C# 4.0 has a Lazy&lt;T&gt; class for lazy instantiation!
No half of a surrogate pair is half a code **point** but is one code **unit**. A code unit is the smallest block upon which an encoding operates. 16 bits for UTF-16.
You used a crappy trace, then. All good traces based on files would flush after each trace call, so the data is off-process. Or simply make sure to open the file without buffering (if such a thing is possible on Windows).
Thank you for your reply. In a nut shell, my intention is to create application which retrieves reports based on services between (1 OR 2) from a system. Once a report is marked as (Not completed or Completed) then the report needs to be emailed to the customer, the email address depends on its report. These reports will be emailed every night by 12 morning. 
Rhino Mocks is dead since years! You should probably inform about this fact (as it is still found when you are searching around mocking in C#), but you should imho not *test* it anymore, as it is not a suitable choice for starting mocking.
xUnit is not simple. And the documentation is horrible and nearly non-existent.
AvalonEdit is a great framework, one downside is that it depends on WPF, there are people who tried to port it, but no good luck. Thanks for pointing to Avalonia ;) I will need to check it out.
I see the simplicity complaint a lot. I don't get it. What are people doing in their testing frameworks?
&gt;When I was working So what are you doing now? Retired at 22 or retired at 65? :)
[removed]
I like **yield return**, it converts imperative code to state machines on the fly for you: public static IEnumerable&lt;int&gt; GetPrimes(int maxExclusive) { for (int i = 0; i &lt; maxExclusive; i++) if (IsPrime(i)) yield return i; } Yes I know in this example it can be simplified with LINQ, there are cases where it can't be.
I recently watched a relevant talk by John Sonmez at Xamarin Evolve: https://www.youtube.com/watch?v=cVC3DQvAAIA (starting at about 10:00). John leans towards the JIT learning in terms of "doing" what you want to learn and I agree. For me, I like to choose what I want to learn and see where I can apply it for something that I'm working on. An example is my [blog](http://buildplease.com). When I dive into a topic, most of the time I come into it without a lot of experience or complete knowledge with it. After doing as much research and coding in the subject as I can, I will feel ready to teach it. Then, by teaching it - I feel like I've learned it pretty well. As far as choosing what to learn at work, I always make sure I have control over that. If something at work doesn't support the things I want to learn, I make sure I don't let it take up more space than is necessary. I have an essentialist attitude when it comes to topics to learn. Ultimately, learning is essential to me. Providing value to the business is second to that, but also essential. Learning will always be my focus as long as I can still provide value and keep my job. If I were to treat myself as a business that my work pays for services from, my value increases when my demand increases. My demand increases when I learn more. Anyway, I guess I learn JIT, but I also make sure I have a good handle on what those topics are and adjust accordingly. Mainly because I've spread myself too thinly across topics in the past, which caused a treading water effect and slowed my progress.
Neither, laid off because our company's president is a barely-functioning moron and hired VPs for fucking everything instead of engineers who actually do shit.
https://ayende.com/blog/161826/the-state-of-rhino-mocks
But the **required** tooling won't be RTM on June 27.
Use a HeaderedItemsControl and define the HeaderTemplate. Also the default style doesn't actually display the header so you need to do provide a style that is header then itemscontrol.
I didn't even know this product existed and holy cow this is awesome.
I doubt that the tooling will be RTM this year. (If you count RTM as being done fucking around with the project file formats.)
I'm not familiar with what's possible in COBOL and I don't think you can mix and match different windows forms technologies in one app. You can certainly have your editor as a WPF app and then your cobol app could read the data. If this is a time or budget constrained requirement you might be better off going with a third party as [jogai-san](https://www.reddit.com/r/csharp/comments/4mxvlh/creating_a_wysiwg_editor/d3z84ta) recommended.
Actually I believe you are in the sweet spot for learning WPF, as you don't have to worry about *un*learning winforms. It's such a steep curve for learning WPF in the first place that it's better if you're going in with a clean slate. Find yourself a good WPF book to work through the samples and you'll be fine. (I suggest any other book than WPF 4.5 unleashed as it didn't really help me any... anyone else care to recommend a book for this guy?)
I really like Lazy to establish a connection to services on the network on demand, such as obtaining the cloud queue references for Azure storage queues just before a message needs to be dropped in or read out. 
I agree with /u/AberrantCheese, people who previously know winforms often have a hard time transitioning. Writing WPF often does cross over into C# especially when it comes to a writing custom converters and markup extensions. My advice to people learning WPF is always: Always hand write as much as possible. Do not use the WPF designer. XAML is convoluted and has messy syntax, but you will not get clean results by using designer. Make sure to fully understand things like binding, templates, and WPF layout panels. The various layout panels are very important to understand to make it so you dont have to set arbitary margins, widths, and heights. By the way, namespaces are completely different (and considerably more awful) in XAML/WPF.
Right now I am debating whether to get [Windows Presentation Foundations Unleashed](http://www.amazon.com/Windows-Presentation-Foundation-Unleashed-WPF/dp/0672328917?ie=UTF8&amp;keywords=wpf&amp;qid=1465500382&amp;ref_=sr_1_7&amp;sr=8-7) or [Programming WPF](http://www.amazon.com/Programming-WPF-Chris-Sells/dp/0596510373/ref=pd_bxgy_14_img_2?ie=UTF8&amp;refRID=1QJNYAXWKRZ5PYVB2103) I guess I just want the one that is less complex since I am a beginner. On a side note, do I need to understand WPF and XAML before I proceed to MVVM?
I guess the reason I ask is because I was taking a beginner class in pluralsight that talked about MVVM and the guy said that if I didnt understand WPF, XAML, data binding, etc , then that I would need to understand that first before understanding MVVM. Would you agree with that sentiment? 
Namespaces are simple. Theyre like compile time folders for code files. |TheRootNamespace | NamespaceA | - Class1 | NamespaceB | - Class2 | - Class3 Class2 can see Class3, since theyre defined in the same namespace. But in order for class2 or class3 to see class1, the code file they are in will need to include the namespace at the top like this using TheRootNamespace.NamespaceA; Generics can get a little complicated but they are often not used in WPF because XAML's generic support is garbage. Collections are pretty much a wide spectrum of classes that handle variable length arrays. They are much easier to use than arrays. You can also write custom collection classes to add all sorts of custom relational logic and shit. You have to know inheritance. It can get complicated, but trust me its extremely important. Good luck man! Any questions or if you need any help feel free to comment/PM. 
Structs, like classes/structs in C++, are fixed-size. So if you declare a struct like so: public struct A { public readonly int Q; public readonly int Y; public readonly long Z; public A(int q, int y) : this(q, y, 0L) { } public A(int q, int y, long z) { Q = q; Y = y; Z = z; } } ...Then `sizeof(A)` will *always* (speaking practically) be **16**. Notice also that you can not in fact write a C# struct whose constructor does not initialize all the struct's fields.
the tooling can be used at the moment, it will just change and be improved. Most importantly a full release of the framework itself means package maintainers can port without worrying about the framework changing.
For anything games that aren't big (or you want to Do It Yourself): MonoGame. For anything bigger or you want to skip doing lots of stuff yourself (physics, UI, networking, etc etc): Unity. MonoGame is like XNA and has mostly the same API as XNA. Unity is a full engine with an implemented UI system for you (grid layouts, horizontal, vertical, content size fitters and the like). [Hearthstone is also made with Unity for example.](http://forum.unity3d.com/threads/blizzards-hearthstone-made-with-unity.175107/)
I didn't mean to say you can't do something another way. You can certainly create a game that looks good in a forms-like application. I just wanted you to know that there are other tools that might make things easier for you. If you want to use forms-like application then ofc you can do that.
This is for in-house solution with a small user base that needs to be light and flexible, maybe even portable. The service can even be run temporarily on a user's workstation... So a bit unusual in that sense. 
What would you do personal? I just see gtk/forms being a lot easier and more efficient to use. I was also thinking on using Xamarin. Having the option to bring my card game to mobile would be really nice. If not Xamarin, maybe unity would be the better choice for the cross platform option. I just don't really enjoy working with Unity.
Do you want to make a Console, Windows Forms (please no), WPF, or UWP application? Or library?
I don't know what happened to it, but somebody made a post about a free and open source monitoring tool on here no long before your post. Here is the link to it: https://getwarden.net/
Neat little service. My biggest suggestion is perhaps a bit "too late" now but when writing windows services, TopShelf makes your life a lot easier: http://topshelf-project.com/
Hey thanks for commenting. So you are familiar with both books or just unleashed?
I suspect you've never written a larger project in PHP, and if you did, you're terribly unqualified, since (because you're saying statements like this) you couldn't even figure out how to install Symfony. I'm not saying there aren't better languages. But PHP is not that bad, it's not 2004 (when PHP5 was released) anymore.
Console, WPF, or a library would be fine. 
&gt; I suspect you've never written a larger project in PHP Worked with Drupal, currently operating an eCommerce site I didn't write and pharmacy software. My main problem isn't the language directly. It's the sloppy, uneven nature of the people (my coworker especially) who tend to write in it and the horrors I'm forced to deal with because of them. I'm not going to say that you are that way, but I work day-in day-out with one, and because he produces code by the bucketloads the boss ignores my warnings. Also, if you're writing an ERP software in PHP, please stop. PHP is great for dynamic content and data delivered over the web that can be built fast when you don't need to worry about performance or pesky datatypes. It's super easy to version and test, so at least it has that going for it.
I'm not using PHP myself, but have you seen PHP7? Most of the things you're saying aren't true even for PHP5.x - and I really don't like the language, I just don't like people telling untrue things as well. PHP is one of the most used languages, of course tons of people will produce bad code - but that's not a problem of the language. BTW, PHP7 has better perfomance than Node.js, Python and Ruby, has static type checking etc., you should check it out; if you need perfomance with PHP5.X, use HHVM.
I think this is the correct answer. You should give the user access to the 6 basic enums, and allow them to construct their own variables with those enums. Maybe set a restriction that any variable being used with those enums must have 2 flags set.
OP, dotnetfoundation.org supports https https://www.dotnetfoundation.org/blog/cake-welcome 
Neat http://i.imgur.com/OIc8DRk.gif
Sorry, I don't have time to provide a ton of feedback, but LaunchDependentApplications() has a running time of O(n * m), where n is the number of entries in app_list and m is running_processes - on bigger machines this may prove to be a noticeable cost. Consider preprocessing either of the collections so you can do fast lookups as to whether any of the elements in the other are contained in it.
This is a good video tutorial of Joe Rock, explains everything very well imo. https://www.youtube.com/playlist?list=PLCuRg51-gw5VqYchUekCqxUS9hEZkDf6l
Unity has a bunch of videos teaching a lot of features. They're a bit boring but pretty good on info. I picked up Unity about a month and a half ago and already have figured out all the foundations for building the game I'm creating and even got procedural level generation running. It was insanely frustrating to start but you get better really fast. I've just used Youtube whenever a problem arises. I find it works a lot better than courses since it lets you problem solve yourself and go for help when needed instead of just riding the coattails of a course. But maybe that's just my own methods.
Are you trying to use xamarin "classic" or xamarin.forms? I have found that the info for xamarin.forms is lacking, but there is a free ebook available through xamarin themselves https://developer.xamarin.com/guides/xamarin-forms/creating-mobile-apps-xamarin-forms/ 
This is what I am going to do I think, make a simple watchdog service myself, then have it send heartbeats to a number of processes, and it will then restart the service if heartbeats miss a timout, and if the watchdog is unable to restart it then it sends an email. Each process then needs to implement a simple an instance of a "watchdog reply class" to receive and reply to these heartbeats. I am already using websockets, so it is easy enough to use ws for this as well, then the heartbeats are event-based and should not make a noticable dent in process performance (i hope). I am sure this has been done before, but this is pretty simple stuff, so the benefits of re-using code must be weighed against the cost of having an external dependency that does not quite fit with my needs and with code that I do not understand in-and-out like I would my own code. 
Nothing really that special about it, just a way to say that the static members of a particular class are accessible without repeating the class name: using static System.Console; using static System.Math; class Program { static void Main() { WriteLine(Min(1, 2)); } } This was one of the features that came with C#6: http://developer.telerik.com/featured/essential-c-6-features-you-need-to-know/
If it was setup properly it would redirect. Why you would even need HTTPS for a site where you don't login, I have no idea.
Well, you're testing that you're correctly putting information into a document, right? If that's what you're testing, then your test would be that you are correctly doing that bit of functionality. If you were making a unit test that wasn't using a document, then you're not testing whether you put something into a document or not; you're testing something else. Hope that makes sense.
Isn't the default packing 8 bytes?
Oh, gotcha. So you're just using a static enum, without the class name, and then using a regular enum with the same name?
Sorry, it is a desktop application. Thank you for the quick reply!
Are you using the full .NET Framework, .NET Core, or something else?
For a large shop, I still have c# workflows to monitor complex tasks external to our monitoring tools... although they still trigger alerts in said tools to notify our noc to take action
Full .Net 4.0
Depends on the amount of data you are storing. Yes the TEMP folder is available to "everyone" If the data is small, maybe the registry. Though that has become bad form. There are options to store the data in the application's settings in UWP or WPF applications, but more complex data may need to be stored within the application's folder, which if you are using Program Files/App, then that too is bad. Some apps use the ProgramData folder. So... lots of options, depending on your specific needs. I'll check back tomorrow if you have questions
If you are building Windows services, [Topshelf](http://topshelf-project.com/) should be the first thing you should start with. It takes a lot of the overhead away. But beyond that use a tool like [NSSM](http://nssm.cc/) or the previously mentioned [Warden](https://getwarden.net/) to add additional monitoring.
This is a joke right? * unpaid (period, let alone for a game) * hotmail * "revenue sharing" * "we have everything except the one thing that is actually **required** man this has to be a joke $20 says this is one of those things were some sucker programmer agrees and then finds out the proposed game would be impossible to build.
Sorry but I am not familiar with it either! :(
SoloLearn has some nice lessons for the basics of c# , after knowing c# , unity will be much easier to learn 
I don't know, having a dependency on a third party library that you don't have control over, or simply implementing a BCL class. There are additional complications introduced to a project for every additional external library referenced to a project, such a comment simply dismisses those. Another issue I see is the license itself, some companies have issues implementing Apache licenses... 
This argument can be made for literally any library you use, but I don't think that means you should never use libraries. The worst-case scenario is that an update to Topshelf means you can't use a later version but you're still free to use the existing one if that works for you. Worse comes to worse, you just end up implementing your own anyway but right now there's no reason to, you get no benefit from it other than this "what if" scenario. Regarding the license, if you're just pulling it in via Nuget or whatever, the license of the source code doesn't matter because you're not changing it. If you needed to fork it, then that would be different, but I don't see anything in the above that would require such a thing. Besides, the project relies on log4net, which also uses the Apache license, so......
&gt; You implied that the framework isn't usable. I did not. I just said the tooling is having a lot of issues, and the tooling is required in order to get the system running. &gt; And having NREs vs meaningful error messages isn't that huge of an issue. It is a **huge** issue. You're stuck, something is wrong.. but what? No information. Just a pointless error message. Heck, at least if they provide the stack trace you could hunt it down.
Is it not a big issue or is it a huge issue?! It doesn't affect the stability of your code or limit functionality. You can google the error message and get the github report. People use software with bigger issues than that in production systems all the time.
I always turn off the integrated Git client. I've heard the 3rd party Git plugins in VS15 are way better than the default though.
CoreCLR ARM related [Issues](https://github.com/dotnet/coreclr/issues?utf8=%E2%9C%93&amp;q=is%3Aissue+ARM+in%3Atitle) and [Pull Requests](https://github.com/dotnet/coreclr/pulls?q=is%3Apr+ARM+in%3Atitle). The short answer is no-ish, not in the release builds anyways as far as i can tell. However, many people are working on it for various platforms. Some might already be functioning under certain builds/branches. You'd have to go through some of the issue's/PR's to really find out in relation to your specific needs.
You can always just make a class with this signature: public static class GlobalVars { public static string SomeString = "Hello World!"; } You can then access these static fields (probably want to make them auto properties) from anywhere, even other threads, by going: GlobalVars.SomeString The key here is that you are declaring the class and fields as 'static' - which means you access one 'GlobalVars' class (instead of an instance of it), and that class only has the static fields (instead of fields which you would access on an instance of a class). *Just a note, global vars aren't really a great practice, but whatever, do whatever you want until you have a reason to change it out with something like Dependency Injection.
Don't remember it being slow, but I switched to cli and sourceTree pretty quickly. I also hear 2015 is much better, if that's an option
linux Operating systems have mono which is like .net just for linux , try using it
For what you need these variables?
My intention is to run a Web server wit asp.net, so I don't know if windows IoT is compatible with it 
Amazing, but expensive for Russia :(
Don't go backwards, Global variables are a short cut but generally considered an anti-pattern (There are good use cases for them, though). Learn DI if you can, it's a mindfuck at first but it's probably the best way to handle a lot of different scenarios, it'll make testing your code easier and generally is one of the most useful tools you can know.
The most basic alternative to a multi-dimensional array would be what's called a "jagged" array, which is an array of arrays (e.g. `string[][]` instead of `string[,]`). 
Look into app.config files. Simple for simple stuff, and not too terribly complicated for less simple stuff. It's also the place to keep things like connection strings and such like. So &lt;configuration&gt; &lt;appSettings&gt; &lt;add key="NumberOfButtons" value="4"/&gt; &lt;/appSettings&gt; &lt;/configuration&gt; Then, in your code: // ConfigurationManager.AppSettings["NumberOfButtons"] is a *string*, // and may be null if you mangle the setting name or something. So, while // you can do this exactly like this, consider some more robust error-handling. var numButtons = int.Parse(ConfigurationManager.AppSettings["NumberOfButtons"]); As a recommendation, though, load up your config settings into some variables or an object in a single place in your application and pass around the resulting values, instead of reading the config all over.
if you were able to get that variable '4' from your WPF/XAML, how would you create the 'x' number of buttons? An easy way to do it would be read the value out of the text file using a FileStream from your MainWindow codebehind, and add the buttons OnLoad() dynamically with a loop. A better way to do it would be in your MainWindow codebehind (or ViewModel if MVVM) have a ObservableCollection&lt;&gt; property that is populated with 'x' (4) data objects. Then you can use ItemsControl in your WPF and bind the data source to your ObservableCollection&lt;&gt; property. Then create a DataTemplate for the ItemsControl that dynamically creates a buttons for each data object in the ObservableCollection, resulting in the correct number of buttons.
enums can contain Description attributes. you could mark your public enums with a description, public enum AnchorType { Top = 1, Left = 2, Bottom = 4, Right = 8, Middle = 16, Center = 32, [Description("TopKeft")] TopLeft = Top+Left, [Description("MiddleLeft")] MiddleLeft = Middle+Left, [Description("BottomLeft")] BottomLeft = Bottom+Left, [Description("TopCenter")] TopCenter = Top+Center, etc. } See this link for example: https://github.com/jcanady20/HL7Parser/blob/master/Helpers/EnumHelper'.cs 
Not yet, use Mono. IIRC the version in Raspbian is pretty old, you may want to see if the mono project has newer builds available. 
Thank you.
Notice that you do `_food = food`. A deep copy would do `_food = food.Copy()` or similar. You'd need a Copy method in food as well. Also, you,forgot to return anything, so your code above doesn't compile. Also, methods should be cased `LikeThis`, not `likeThis`.
There is no such thing as a static enum.
Ok thank you! public Cat DeepCopy(){ Cat catcopy = new Cat(_name,_age,_food); catcopy._name = _name; catcopy._age =_age; catcopy._food = new food(); return catcopy; } Right? 
Thank you for all the answers, as it seems i need to step back a few steps as i barely have any idea what most of you are talking about.. I'll just start reading some basic tutorials again i guess.
- Licensing: yeah, you'll have to have a license for the OS. That's if you're running the application on your own hardware, on your own network. - Hosting: you'll more than likely get charged more if you're on a Windows host at a data enter, because of OS licensing. - Development Environment: While Visual Studio Community is a great product and does not cost money (it's not free as in freedom) you'll also need a Windows license for your development machine. - Reliability: This one could potentially start some sort of holy war, but in my opinion... Really it depends on who is managing the box, the security controls put in place, maintenance schedules, and probably a multitude of other factors, but I wouldn't say Linux is anymore reliable than Windows. I have old boxes running Linux and I have old boxes running Windows (RHEL 4 and Windows Server 2003). I take care of them, they've been rock solid for years. While the security is a nightmare, and I want to throw them in the trash and get them replaced, unfortunately, people way above my pay grade make those decisions. - Hardware: Hardware is hardware, you can install whatever OS you want in YOUR hardware. I'm not experienced with VPSs so, hopefully someone else can answer that. You can pay a premium for Dell, or you can find one of those Super Micro type servers. We used to shop around on pogolinux.com for servers. I'm trying to give you an unbiased answer, but please realize your target audience on this board. This question could probably be posed on another sub if you feel as though the answers are a tad bit in favor of Microsoft. You're essentially asking a bunch of Coke guys, which is better? Coke or Pepsi? In the end though, ASP.NET rules and PHP drools. PHP guys, your time is over, we taking over. Also, one more thing, ASP.NET Core is coming to Linux. It's in RC2 right now, so you're probably safe to look at that as a possible path to go down...
I think you were trying to make this ¯\\\_(ツ)\_/¯! Type it like this ¯\\\\\\\_(ツ)\_/¯ ^^I ^^am ^^a ^^bot, ^^visit ^^/r/ArmFixerBot ^^for ^^more ^^info!
You could have a look at [RedditSharp](https://github.com/SirCmpwn/RedditSharp).
&gt; think you were trying to make this ¯\_(ツ)_/¯! &gt; That's what I found , and as you can see It's "Unmaintained"
Usually after showing the user "&lt;Press any key to close&gt;" I like to use **Console.ReadKey** as it does exactly that. Read line works as well but will force your user to hit enter to actually exit. Also, I don't think you need to use Conver.ToString on Console.ReadLine() as it already returns a string.
Thanks guys , I suppose I will go just with RedditSharp then.
Fact.
In my opinion pluralsight courses are currently the best option here. There is a guy called Jesse Liberty (sorry if I misspelled the name). His videos are short and informative. Pluralsight courses are paid but only in definition. Look for some codes on Google (Microsoft was giving codes for six free months, that will be enough for you to learn it). There is often some way to create account without paying.
Sure, the parameters need to be stored someone and take up memory. They're just temporary stack allocations though, so the overall impact should be insignificant. Edit: Maybe you got the number "4" from the fact that there are 4 IL opcodes for loading an argument on the evaluation stack with a predefined index (`ldarg0-3`), and loading more arguments than that requires using `ldarg` plus an index. Not sure what the 7 is about, though.
You could use regex...I think this will match it "^\d{10}$"
Console.ReadKey(true) specifically. Hides the char from appearing in console before it closes.
When using enough stack arguments and locals you can inadvertently cause something called [Register Spilling](https://en.m.wikipedia.org/wiki/Register_allocation#Spilling) which is where you have too many local operands to be fit directly in the CPU registers, but this really is the mother of all micro-optimisations and shouldn't really concern you unless you're targeting a micro arch or something.
If you already googled and couldn't find one, that's a sign that maybe you should make one! It's not hard at all, let me know if you have any questions. 
RAM is reasonable, but SQL Express is heavily constrained in terms of CPU. My laptop has more cores than it is allowed to use.
Not sure I understand what you are asking. WebBrowser understands http - so to use a local proxy, your url domain is http://localhost:port or http://127.0.0.1:port . If your proxy is setup correctly it should connect. You should be able to test with a standard browser as well.
It's a *really* common problem
Microsoft Certified Developer is a thing. 
I've used [NCalc](https://ncalc.codeplex.com) in the past for expression evaluation. It's MIT licensed and also handles things like custom functions and variables within an expression.
&gt; RAM is reasonable, but SQL Express is heavily constrained in terms of CPU Express Edition is limited to 1GB RAM (4GB for Reporting Services). That's not even remotely enough for a production workload.
Yeah but this is quite a reasonable amount of DB power. If your product outgrows that you probably have the funds to buy more powerful edition.
Thanks. So that's just in specific cases then, so no need to worry about it.
Thanks for sharing.
Porting the app will cost a lot of development time proportional to the size of the app.
You might want to check this thread: https://www.reddit.com/r/csharp/comments/4npq1j/couple_questions_regarding_aspnet_development/ Also unless your app is relatively simple I'd recommend not using ASP.NET Core in the coming year. It is immature and lacks a lot of features. If your app is simple enough you can use it for the performance benefits.
Core is the future for cross platform web dev with .Net. The full framework will still be moved foward for desktop and windows only targeted apps.
If all else fails you could use a wonderful library called [RestSharp](http://restsharp.org) , and then just implement that into your app by using the [reddit api documentation](https://www.reddit.com/dev/api) ? At least thats how I'd do it, that way you can just maintain it yourself.
True enough some parts are definitely missing, System.Drawing being one of them, but alternatives are [on the way](https://github.com/JimBobSquarePants/ImageProcessor). I agree if this is important for your app then you might want to hold off (though you can use the full .net framework with aspnet core as well) but by and large, it's pretty complete for most use cases.
Strg is ctrl on german keyboards
Why do you even need a C# library when it's a REST API?
Haha thanks, learn something new every day!
Yeah basically that's what I want to do. Just having troubles looking for that nicer method. But loking into this item array, this looks a lot like something I might want to use. So thanks a lot! 
As near as I can tell, it's because the SendKeys API in .NET doesn't deal with Scan Codes correctly. Ages ago, I wrote my own replacement for SendKeys that does scan codes, and has a bunch of other features that I wanted (mostly some mouse "keyboard" codes). You can grab a copy from my [GitHub page](https://github.com/seligman/WindowsMacro). I will warn you, this is old code. It might be hard to follow, since I wasn't a smart person when I wrote this. The little test form in the project should show you how to use it. I also make no promises that it'll work for you, it just works for me in those cases where .NET's SendKeys doesn't. 
There are a heap of Xamarin recipes with sample code for Android, iOS and cross-platform apps on GitHub - https://github.com/xamarin/recipes
The IL doesn't really show much useful information, since there is a lot going on in the JIT compile stage.
Hi, thank you, I just tried it with your Example and Hello World appeared in the program that before didn't let me input anything. What would I have to use as String with the PressSendKeys for it to hold down ctrl and then press s? I'm pretty new to programming and so your program is still a bit hard for me to understand completly, besides I'm at work at the moment, but I will definitely look into it more when I'm home, so that I can shorten it down to only the stuff that I really need and I guess it's also not bad for learning something, so thank you!
Oh I'm sorry, of course I meant ctrl + s, I forgot that most might not know what I mean with strg. Thanks for your suggestion, I used AutoIT years ago to make a little makro script that repeated one button press. I just started programming though so I'm not quite sure how I do the referencing of the AutoIT.Assembly.dll correctly also never used NuGet before, actually I just now learned that it exists, but hey I'll bet there are lots of tutorials for this so thank you, this was really helpful, learned something new again!
Hi, You could have find something in about 5 seconds. Google -&gt; c# excel -&gt; http://csharp.net-informations.com/excel/csharp-excel-tutorial.htm
More specifically, there's a certification called [Exam 70-483: Programming in C#](https://www.microsoft.com/en-us/learning/exam-70-483.aspx) issued by Microsoft which focuses mainly on C# as a programming language.
I record changing your validation example to return string.empty instead of "" on mobile it looks like there is a space in the empty error message.
Thanks, I've updated it.
I found it a lot more difficult than I thought it would be. If your end-goal is just to dump a 2D excel spreadsheet into a two-dimensional array, and converting the Excel spreadsheet to a CSV is an option, I would highly recommend doing that and then processing the .CSV file. If you *must* start with an Excel file, then you're probably going to need to use Microsoft's Excel Interop Library, which is *not* a simple library to use. It took me quite a long time to wrap my head around.
I think this would be fun: https://codingjourneyman.com/2015/08/24/switching-the-behavior-of-an-akka-net-actor/
To be honest I didn't really read the blog since it didn't format well on my phone but all there is to do is to do operator overload on the FullName == and you get exactly what your title says.
`line` doesn't get reassigned between the two `if` conditions, so it still contains `"Button"`. You could get where you want to go like this (probably; I haven't tested this): string currentLine = null; string previousLine = Source.ReadLine(); while ((currentLine = Source.ReadLine()) != null) { if ( previousLine.TrimStart().StartsWith("Button") &amp;&amp; currentLine.TrimStart().StartsWith("title")) { textBox.Text = "Hello"; } previousLine = currentLine; }
Best guess is you're trying to access something with lazy loading. Lazy loading in EF is enabled by default. But when you try to access a property you haven't loaded (like ScoreData in this case) EF will try to lazy load it, but if the context is out of scope (which seems to be the case here), you get this kind of exception. Did you include the ScoreData (.Include(sc =&gt; sc.ScoreData)) when you retrieved it from the database? EF will throw an ObjectDisposedException otherwise. So you have 2 options to fix it: * Include the ScoreData when retrieving SampleClass objects from the database * Disable lazy loading on your DataContext that retrieves the SampleClass objects: db.LazyLoadingEnabled = false, if I'm not mistaken Also, why are you passing in the List by reference in CalculatesubSectionScores? It doesn't look like you need it, in this case. Also, is there a reason why the method isn't public on SampleClass itself (for one SampleClass)?
That might just work. Thank you!
Indeed. It is not a huge issue.
Would probably be easier to cast them all to `Delegate` and use `DynamicInvoke` instead of changing all the method signatures.
I would set the divs ID to its position on the board and keep the Xs and Os position on the back end to prevent cheating. When the 5 div is clicked on Xs turn, add that to Xs list on the back end and set the image in the back end on click as well.
Why not just use the Roslyn interactive APIs?
Yeah, it should still work. EF proxy just tries to lazy load it, but fails, since the DataContext is no longer available. That's because EF generates classes based on your class, that act as a proxy. EF doesn't actually return SampleClass, it returns a subclass of SampleClass which has the plumbing to Lazy load the references to other objects, such as your Collection of ScoreData. If you .Include it, or turn Lazy Loading off, you should be set. Are you doing EF Database first, or Code first? Looks like you're doing Code first, since I don't see a partial keyword.
For some reason I can't use linq. I am getting the error "cannot convert lamba to string because it is not a delegate type." I looked up the error and I do have System.linq and System.Data.Entity namespaces included. 
This seems to work. using ( var context = new FormDataContext()) { var data = context.SampleClassDBSet.Where(x =&gt; x.TestID == testID).Include(a =&gt; a.TestPerformance).ToList(); return data; } 
The easiest way to do this is to use the built in configuration system for your platform. * Full .NET Framework - use System.Configuration - configuration files have a section specifically for connection strings, and there are built in encryption providers for these strings such as [this](https://msdn.microsoft.com/en-us/library/system.configuration.rsaprotectedconfigurationprovider). Read about ApplicationSettingsBase [here](https://msdn.microsoft.com/en-us/library/8eyb2ct1). * .NET Core - has the same System.Configuration namespace but a slightly different API * ASP.NET Core - has its own configuration file system * Mono - has a System.Configuration namespace, but slightly different api again since it branched from .NET a while ago
If you want to return a data row, you'd have to make a new data table and create the columns, then create a new row and fill it with data. If all you want is the data, you could return an object[] of the data.
What do you mean by "securely"? If you mean encryption then it is impossible to do. Your application need the password to decrypt the file, and the .net source code if laughingly easy to decompile, and find the password inside the code. If you want to store database on a safe place, you must use a web service for this. If you mean by storing the file, you can always use a SQL database (SQLite), or plain file somewhere in the folder, or inside the appData (for example, use the settings file).
&gt; Full .NET Framework - use System.Configuration - configuration files have a section specifically for connection strings, and there are built in encrypting these strings such as this. Read about ApplicationSettingsBase here. Just to make sure I understand this, as it's quite a bit above my skill level. I configure my app to use "ApplicationSettingsBase" to store my config (literally only 4 strings), and then I can use RsaProtectedConfigurationProvider to encrypt that settings file? The only thing I am failing to see is where the key is coming from.
I am sure you know what you're doing, but the usual place to keep the connstring is in the web.config file - and there are classes built-in for encrypting sections of web.config. Making it writable is usually a no-no , as an incorrect or accidental save process takes the entire system offline with no possibility of recovery without manually dialing in to the server, encrypting the connstring manually , and replacing the setting The DB should only be moved rarely, and only by somebody who knows what they're doing, and to PROVE that person knows what they're doing, they should change the connstring!
Long story short, this is an inventory system. I'm just using the DB because there's a lot of items.
For just learning, I'd probably go with the preview release of ASP.NET MVC 6 (I think it's official name is now ASP.NET Core) although you can't go wrong with MVC 5 (the current stable release). Here's a good place to start for ASP.NET Core https://docs.asp.net/en/latest/tutorials/first-web-api.html
It's been a lot of fun figuring out RC2 - I love it so far. Started a new project this Friday and I am 30 commits in!
You can do anything with custom controls. You can create visual objects and shapes and lines from the OnRender method/DrawingContext but id advise against that heavily. A timeline editor control like that will be extremely involved and very time consuming for your first attempt at a custom control. Id definitely start with the basics and build on it 
I just started a new project on .Net core... On Linux. Wish me luck.
decent
Use a udl file it was designed for this https://support.microsoft.com/en-us/kb/308426
Username checks out.
I know you got a lot of suggestions for ASP.NET Core but I would actually recommend against that. There is a lot of churn with how things are currently and unless you are willing to keep track of things on Twitter, GitHub, etc., it's kind of hard to keep up-to-date with things. I would wait until things settle a bit before delving into it. For someone new, I would recommend sticking with ASP.NET MVC 5 or ASP.NET Web API 2. 
ASP.NET MVC 5 and ASP.NET Web API 2. There are no Core projects to work on today and it will not be ready for production in next couple years. 
Yep like a win form application, have been searching from midnight on how to make a tic tac toe with pictures of X and O's when clicked using Direct X but I couldn't find anything even without Direct X. So now I'm thinking that I'll just use buttons if I won't be able to find anything
Like the others said, at this time you're better off using Mono. Now, the versions of mono that come with Raspbian are rather outdated. One option is to compile it yourself from source: http://www.mono-project.com/docs/compiling-mono/compiling-from-tarball/ This will take about 9 hours on a Pi 2 After that you can use `checkinstall` to make a .deb package so you don't have to do it again the next time. What we do instead is run `Docker` on the Pi together with https://hub.docker.com/r/niip/rpi-mono/ In order to run Docker on the Pi you can use HypriotOS: http://blog.hypriot.com/downloads/ (hypriotos-rpi-v0.8.0.img.zip) This saves you the trouble of having to compile everything yourself and keeps everything clean inside of containers. 
Agreed. It's not very old and getting it going would give someone just getting into c# a panic attack. Prior versions are solid and more easily learned. RC2 makes me hate puppies sometimes. 
+1 for Nancy.
lol
Then you could use SQLite with user password, if that acceptable. That still can be broken without much sweat, but most of the users won't be able to fiddle with it :)
You absolutely can..just use the [] the same way you would with a string array. If you need arguments for the constructors I'd recommend initializing the declared array members in a loop though.
Or Action&lt;string[]&gt; since the input is probably going to be text.
Try to send them a message, I heard good things about their user support. ;)
It seems like a bad name. I expected it to be Apple's backup software made available for the .NET Framework. I am, nonetheless, excited to see what it is actually about.
/thread
Wasn't IntelliTrace supposed to do this? I've hardly ever used it, except for the new VS. 2015 diagnostics view that looks like it's using it. 
Since you are loading Page1 into a frame on the MainWindow (or so it seems) you will have to deal with the zIndex of the controls. I guess it would be more helpful if we knew more about what you were trying to do? If you want Page1 to be completely separate, then try: Page1 page = new Page1(); page.ShowDialog;
Removed: Rule 6. The submitted article reads very much like an advertisement.
Have you tried changing the timeout in the connection string?
Put in a breakpoint at that line in VS and see what your objects are showing.
If **ping** is enabled on the sql server computer, try to ping it to make sure you can actually reach the server. Your connection string is using **Trusted_Connection=True;**, make sure your account (or the account your running your application under) has access to the sql server. Since your not showing how your specifying the **Data Source**, if your connecting via **IP** or **Named Pipes**, make sure that *that* capability is enabled on the sql server.
Throw it in a try/catch and let us know what exception gets thrown. Usually there's a good amount of detail when a SqlConnection (I assume this is a typo in your post and not your code, as I doubt it'd compile, but you have "SqlConneciton") fails to open. It should point you towards the specific element in the connection string that failed. Assuming that's the issue, which I would bet on.
Total guess here, but does anything on your network change over night? Thinks like your IT department has DHCP leases set to less than a day and force a new IP address on each client? Is there an on-demand VPN connection (such as DirectAccess)? Items such as this can cause connection problems with a new connection. No matter the actual problem, placing the open call in a try catch and attempting to handle those exceptions you know how to handle would make the program more resiliant.
Records are less comparable to structs than they are to an immutable class. ```type Person = {FirstName:string;LastName:string}``` would be similar to ```class Person { internal Person(string firstName, string lastName) { FirstName= firstName; LastName=lastName; } public string FirstName {get;} public string LastName {get;} }``` The big difference would be that the record type automatically implements IEquatable&lt;T&gt;, IComparable&lt;T&gt;, IComparable, IStructuralEquatable, and IStructuralComparable. Not bad for such a terse statement. 
This was more a place to collect recommended books and resources, then users in the discord channel helped by adding to it. Hopefully it helps anyone just beginning Suggestions and corrections welcome
SQL DBA Here. We need the full and exact error it is throwing to diagnose this properly. Post it, and you will have better success. Also, there is likely an entry in the SQL Server Logs that details what happened with your connection attempt. That info would be helpful as well.
I would keep the main page blank and put what is now on the main page, in a seperate page and then load it on start of the program.
Why confuse yourself by learning two different languages at this early stage; especially considering that C# is arguably the canonical language for .NET and is also much more syntactically similar to other popular languages than VB.NET? In my opinion, you should ignore your friend's advice here.
This is excellent, and hopefully should be added to the sidebar. The only thing I'd like to see is perhaps "resources for intermediate/experienced programmers"- there's a wealth of newbie materials out there (which is great, of course) but it seems like a common problem that people get past the basics and then get lost on where to keep learning (or, dangerously, they think there's no more learning to be done). For me, I'd add some blogs like [Eric Lippert's](https://ericlippert.com/), [Ayende](https://ayende.com/blog/), [Coverity's C# Tag](https://ayende.com/blog/), [Jon Skeet's blog](https://codeblog.jonskeet.uk/), and maybe even [Old New Thing](https://blogs.msdn.microsoft.com/oldnewthing/) for those in to general windows development. But it doesn't just have to be blogs; I'd like to see what ideas others might have.
One thing you can do to help track down the issue is to put the connection string in a configuration file and let the application pull it from that. Also, you might want to catch database connection errors and show an appropriate message which will come in handy if something else goes wrong. 
Depending on how long ago it was that you used it, I'd revisit Prism. We are using it on two very large projects right now, and it is working great. We are using the latest Prism framework from NuGet with the latest Unity dependency injection framework, and have been very happy with it. We haven't had any issues with enabling and disabling buttons.
I was just looking through that tutorial. No luck there but thanks. Still getting the same error. 
Best readme I've read in a long time! Really informative and inspiring.
Fixed my problem after reading that additional error message. I had to manually assign the TestPerformance SampleFormid to the SampleFormId.
you're going to quickly find that everyone learned how to program differently. everyone has a book, technique, tutorial, or even a college program they swear by.
I'm a huge fan of (and contributor to) [ReactiveUI](https://github.com/reactiveui/reactiveui/). I honestly don't know how I would write a responsive mobile application without Rx.
Use the Windows Credential Locker https://code.msdn.microsoft.com/windowsapps/passwordvault-f01be74a
not sure you want to be embedding cmd into your app https://powershellstation.com/category/writing-a-host/ it might help if you tell us what it is you want to achieve in the long run 
I'd also recommend a 2nd look at Prism.
[Maybe this?](https://www.nuget.org/packages/Microsoft.Windows.Ocr/) Should be the same one MS uses.
Thanks for the link - but is this not only for mobile and store apps?
They appear to upload their videos to [Vimeo](https://vimeo.com/ndcconferences/videos/sort:date/format:detail), however, I don't see that the one you are looking for is there quite yet.
We are developing this multiplatform UI library which kind of follows MVVM conventions: https://github.com/okhosting/OKHOSTING.UI Pretty easy, simple, small and the only one that can run on ASP.NET, Android, iOS, WIndows, Linux, Mac and UWP. On top of it you can add multiplatform ORM and CRUD UI out of the box using: https://github.com/okhosting/OKHOSTING.ORM Let me know if you have questions.
You can register both sync and async functions. Async functions will be correctly awaited. 
Tell him he's an idiot. VB.net is the black sheep of .net. C# and Java are arguably the best "first languages" that still teach all the OOP concepts.
&gt; What's wrong with async/ await? *intensifies* seriously, async await sucks for nearly anything. What you want is a system the manages what are, or would be effectively, threads. You don't want to be trying to turn things upside down to change your threading model, which is pretty much a requirement for using async / wait. A declarative model always wins out, bonus from being highly cohesive code that is meaningful. Async await leads to tons of wrangling and hand holding to manage threading at every single location you want to parallelize. Great I have a giant lambda statement with 8 funcs, that's maintainable and readable 
Using [this article](https://blogs.msdn.microsoft.com/cdndevs/2013/10/02/using-windows-8-winrt-apis-in-net-desktop-applications/) you can reference RT libraries in other framework projects, should work with the OCR API as well.
If you program web pages in C#, you'll end up learning both anyway..
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/programming] [Wrote a binary schema library for a project of mine and thought I'd share it (x-post from \/r\/csharp)](https://np.reddit.com/r/programming/comments/4o4qlq/wrote_a_binary_schema_library_for_a_project_of/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
Why would you want to implement it yourself with strings when it's already done for you with proper typing?
You can also try this https://www.microsoft.com/cognitive-services/en-us/computer-vision-api which is just a rest endpoint. 
What do you want from your MVVM Framework? If you just want property change notifications, they all do that. If you want support for IChangeTracking and/or IEditableObject, then you want Tortuga Anchor. As far as I know, its the only one that supports those interfaces along object graphs.
Maybe try [NPOI](http://npoi.codeplex.com/). I haven't touched it so I don't know. If you have Microsoft Excel installed on the machines running your program, you can also use Office Interop and have Excel do the work for you: http://www.dotnetperls.com/excel
the Microsoft cognitive services voice API is good. I use it for all my voice apps (e.g. voice activated lights, computer commands) There's samples online. Search Microsoft cognitive services
Maybe this is relevant: https://channel9.msdn.com/events/Xamarin-Evolve/2016/The-Future-of-CSharp
Did you try? Why not?
OK
I've seen a lot of talk about these MVVM frameworks lately. I've never used one, but done lots of WPF development, what exactly am I missing out on here? I use the standard "xaml databinding to viewmodel property" pattern and it seems to do everything I need it to. What is the merit in adding a framework? I'm not against using these frameworks, I'm genuinely curious as to what I'm missing out on.
Xamarin is included in visual studio 2015, thus autocompletion will work. Plus xaml is awesome.
I don't have a particular goal to achieve with embedding a cmd into my app, but I thought it could be a cool addition since my app is gonna be a http web server with a GUI. I actually removed the hang by adding p.Flush(); and p.Close(); after sw.WriteLine(textBox1.Text); but after I run a second command it crashes and gives me this error: An unhandled exception of type 'System.InvalidOperationException' occurred in System.dll Additional information: StandardIn has not been redirected.
Sadly I don't. Thanks for the suggestion though.
Huge up-vote. Would up-vote again and again.
The official MS tutorials on MVC + Entity Framework are excellent. If you are already familiar with development in general, that's a solid place to start with .NET. https://www.asp.net/mvc/overview/getting-started/getting-started-with-ef-using-mvc/creating-an-entity-framework-data-model-for-an-asp-net-mvc-application https://www.asp.net/mvc/overview/getting-started/database-first-development/setting-up-database
But I need Windows for Visual Studio, and I cant compile iOS on Windows, I will need a Mac server just to compile, I never tried that but must be a slow procedure
XAML **is** attributes written in a text file. The only thing that the XAML does is instruct the application how to build your form. You can do the same thing by creating controls dynamically with form and control methods i.e. panel.Children.Add(new Label { Text = "Hello" });
Thanks a lot. This is a tremendous help :-)
I would not take this friend's advice, and in the future you should probably discount further advice. I started my career in VB .NET in 2003. That was a co-op position that lasted 3 semesters. I later got a summer internship that used C#, it only took a couple of weeks to adjust. Over those 13 years, I've participated on the same VB .NET forums (though one is so infested with ads I quit a couple of years ago.) I like to try and help people get better. But a VB .NET forum is a very bad place for that. The VB community as a whole is sort of stuck in 1999. The language itself hasn't had significant new features in a few versions, and they like it that way. When the forum recently polled, "What's an important topic in VB we don't cover?", I pointed out there were no articles about unit testing. This is a practice so common in modern development it's taught in almost every language tutorial. The response was, "Yeah, that's just too fancy for most people." Ultimately, it was decided that adding a 12th tutorial about file I/O would be appropriate. That community is like a bunch of punchcard developers who decided they like punchcards and don't feel like changing. They've specifically found companies that are too afraid to port their punchcard systems to something modern and spent decades keeping those systems alive. They are a massive burden on Microsoft in terms of compatibility hacks and part of why it takes so long for us to get nice things. I spent more than 5 years of my life upset at the *stereotype* that VB developers were this way. But the more I speak with VB developers, the more I think the community has decided to embrace that image. This is why I'd be nervous about taking your friend's advice. It is far less likely he's one of the good VB developers than another "expert beginner". You can find a scant handful of people who care about their craft in VB .NET and are interested in listening, but the ones that actually care end up taking C# jobs. It takes a community to raise a programmer, and the VB one stinks. Flip side: you know your local job market better than I do. If your listings are 90% VB .NET and 10% C#, that can change the course. But I promise, if you are proficient with either VB .NET or C#, then the other should only take 1-2 weeks of practice before you feel comfortable with it. Considering C# is the de facto .NET language, it makes more sense to learn it first.
Perhaps it will, but I'm using it as a learning experience. Really, Commands are about all I'm likely to use, but this is an opportunity for me to see what the big deal is about MVVM frameworks in general. In the past when I've done MVVM, I've used no framework at all, instead writing all the plumbing I needed myself. I'm curious how a framework will make it easier. As for speed of implementation, that's the one thing I'm not worried about. Time is on my side here. :)
It need some config but it's doable and far better than using this laggy and buggy xamarin studio shit
Depending on what you're doing, maybe consider also having a peek at Python or Ruby. https://www.codecademy.com has some in-browser tutorials where you read lessons, then type in code it verifies. Why? Well, C# is a little cumbersome in that it always requires a .csproj, and always requires VS, and if you happen to need to write a tool to run on a Linux machine you have to jump through the hoops to get Mono up and running. In addition to my 'real' projects, I have a lot of one-off things that need tools and sometimes those have to run on a Mac or Linux machine as well as Windows. Ruby/Python do all of those things pretty well. I can hack out a log file parser in Python a lot faster than I can in C#, and it's just a text file I'm shoving around. When I need a UI or something that's going to need maintenance for a long time, I want C#. I think being a little dangerous in both has a lot of value.
Upvote because I agree
Yep, I believe that too, I am just telling my experience, but for everybody that is happy with Xamarin: go on, good for you :)
I appreciate you valid points, i'll try to avoid it in the future.. for your points: - The code is screenshot just to make the blog consistent, and i always provide it as a source under each image to make the reader life easier... - For the naming issue, i got it - will edit it and consider that in future blogs. - The QueryAsync name is pointing to querying the url.. don't you think? - In the HTTPClient call, in this particular scenario i don't care about the http error code, the whole idea is just to try ans test the Bot Framework so i thought i don't have to follow the best practices.. but will consider this in future blogs.. And it's open source project not to use in your production environment, its just to test the Bot Framework and focusing on it.. Thank you for your points.. i really like it and will consider all of it in future blogs :).. 
I think "C# in a nutshell" should be recommended too.
Yes, 10x better! Didnt try the integration with an iOS compiler, but it sure worked well with Android ans w10 mobile
They make it easier to end up with zero code behind. With Caliburn.Micro you can just delete the backing cs file completely (the framework will call InitializeComponent() for you). All View logic is contained in ViewModel file. Sure, binding to properties is easy, but try binding to methods, and you'll find yourself writing lots of boilerplate code. Do it once, to understand the process, but once you do let the framework handle it for you.
I said use them together. That's when the wrangling occurs with shifting things between various WhenAll buckets 
you need to still have a Mac in the office to do the compilation. Visual Studio handles the situation well though. there is a couple things you install and then the build happens more or less seemlessly. Visual Studio will push it to the server and handle all the magic for you
I've used Tesseract and it is pretty fantastic if you preprocess the input a bit. Try adding a greyscale filter and making sure that your text is sized appropriately. If you want to get fancy, you can apply some other filter's as well. OCR is one of those areas that you may not want a play'n'play solution, the problem you are solving can likely be defined more specifically than "read the text on any picture".
Thanks for the suggestion. I'll see if I can apply filters.
Thanks man, I will also be looking into this!
It's for myself and a few friends really, nothing commercial, so I can't spend on it unfortunately.
thats happening because you have closed of p.close()
that does look right. This link on StackOverflow has a pretty good example http://stackoverflow.com/questions/16558317/how-to-download-memorystream-to-a-file
If you need to have a guarantee that the number is unique I would use the database id (or something derived from it) and then just create the EAN-13 code from that. Artikel record 1 -&gt; "000000000001" etc
Well yeah but I don't see how OP would ever do what OP wants. GUID is the only solution.
Well, if you're starting to write native code, it's definitely an upgrade. Good job and good luck!
The problem is an outside constraint of this barcode printer that prints 12 numbers (UPC standard I think), that's it.
Wait, do you mean reading the barcode produces the string?
Here I made a little linqpad program for you: void Main() { string deviceName = "My Device Name"; string description = "Yams Yams Yams Yams"; Fnv1.CreateHash(deviceName, description).Dump(); } // https://en.wikipedia.org/wiki/Fowler-Noll-Vo_hash_function public static class Fnv1 { public static readonly int OffsetBasis = unchecked((int)2166136261); public static readonly int Prime = 16777619; public static uint CreateHash(params object[] objs) { return (uint) objs.Aggregate(OffsetBasis, (r, o) =&gt; (r ^ o.GetHashCode()) * Prime); } } That will be 10 digits, so you can concatenate a couple zeros if you want (but not in a simple uint)
No. Someone enters things like "dell vostro floater" with a description "1 of 5", using those strings, they generate a serial to stick onto the device. It's not the best, but it's what is wanted /shrug
If you're looking for scalable and efficient, it takes a bit of understanding but it's quite nice. socket async event args https://msdn.microsoft.com/en-us/library/system.net.sockets.socketasynceventargs(v=vs.110).aspx [example](http://www.codeproject.com/KB/IP/socketasynceventargssampl.aspx?display=Print) Might be overkill for simple apps.
I decided to switch from Icollection to Ilist. So far I don't see any differences except that I can now do what I wanted in the first place.
Simplified, there are basically three stages of collection interfaces: 1. `IEnumerable` only supports enumerating an unknown number of items (e.g. with `foreach`) 2. `ICollection` is `IEnumerable` + the `Count` property 3. `IList` is `ICollection` + accessing items by index
How about you start coding and just ask questions then?
Im somewhat new to it and to me xamarin forms seems to be doing everything I need it to. But im constantly seeing people bash it so id like to ask why? what issues did you have with it? I haven't made anything extremely complex but I get the idea that if you have complicated UI you go with xamarin.ios and xamarin.android seperately?
You don't *really* need a cryptographic hash, MD5 would be fine. It's easy enough to find a collision through brute force, but the probability of finding one with two "normal" device names and descriptions is still tiny. As long as you don't allow your users to name your products you'll be fine.
LINQ has a better method: var item = collection.ElementAt(i);
Oh sorry i have started doing it, where should i post my code ?
I'll give it a try. Thanks for the help either way, I appreciate it! I really didn't think 1 paragraph about the purpose of my program was too much, but I guess I was wrong. Also, I didn't know what was causing the problem, so I included anything I thought may be of some help trying to solve the problem. Most of the time the responses to questions are "Not enough information" as opposed to "Too much information." But this is my first time in this sub, I'll just have to get used to how things are done around here I suppose!
Here's something ridiculously daft that I don't recommend anyone use outside of a silly experiment, that I didn't give much more than 5mins thought to. You'll need to add a check for collisions and prolly do something like shift it once more or something. Maybe change the condition of the for loop to something like `Math.Floor(Math.Log10(number) + 1) &lt; 13` to prevent overflowing the 12 digits, too. Starting from the back of the string may also be more "random" than starting from the front. +/u/CompileBot c# using System; public class Test { public static void Main() { const string sample = "An arbitrary string"; long number = 0; for (var i = 0; i &lt; 12; i++) { number = number &lt;&lt; 2; number += sample[i]; } Console.WriteLine($"{number:000000000000}"); } }
Output: 000405134545 [^source](http://ideone.com/lZErFF) ^| [^info](http://www.reddit.com/r/CompileBot/wiki) ^| [^git](https://github.com/renfredxh/compilebot) ^| [^report](http://www.reddit.com/message/compose?to=compilebot&amp;subject=Report%20Abuse&amp;message=--report%20https%3A//www.reddit.com/r/csharp/comments/4o9bi6/turning_strings_into_a_12_digit_serial/d4b2399%20Include%20your%20reason%20for%20reporting%20here.) 
I was a bit too harsh since it was your first post here. Have you tried Entity Framework (I prefer the code-first approach)? Take a look at this: https://msdn.microsoft.com/en-us/data/jj193542.aspx
Incremental numbers is a bad thing in terms of security, especially if they're exposed (even in a barcode). All an attacker has to do is "-1" and now they can see someone else's order or personal information.
If they are not static how else can i use them in other classes ? I have a Bank, Chequing and Savings class which inherit from Account class. Should i post them as well ?
The user you're using has no access to write to Program Files. Click Once works, because it's not installing into Program Files, but into the user directory. The solution is simple: Don't install the database file to Program Files. Place it in a folder that's writable by the user.
Spent 8 months from late september to about the end of may working on an expression parser in C# that be taught formulas and learn them sort of like an AI system, also lets you add variables at will. Has full access to all math functions with endless additional variables to solve with or for. Also has memory like a calculator, a converter for DEG/RAD/GRAD, a programming calculator, and a built in console to load a formula by its name rather than searching for it in the list.
Another reason to use GetPin instead of PinNumber is if bring the pin has side effects such as auditing. Most getters should not affect state. 
I used this one: https://www.microsoftpressstore.com/store/windows-runtime-via-c-sharp-9780735679276 But bare in mind that it is still about Windows 8.1. While Windows 8.1 introduced the concept of universal apps, it is not the same as UWP. In 8.1, you still need separate projects for the views while Windows 10 UWP finally merged back all types of deployments into a single project type. 
Try [TuesPechkin](https://github.com/tuespetre/TuesPechkin). It's a wrapper around [wkhtmltopdf](http://wkhtmltopdf.org/) for .NET. If you're used to working with HTML, you can make some darn pretty documents with this. 
im aware of that but i cant find an alternative
Just a tip: if you're asking a question, use a question in the title. This sounds like you've found a tutorial and want to share it or something. :p
It's not particularly complex. Download it and step through it until you understand it. Anybody can do it, it'll just take a little longer depending on your experience.
Did you release your code as OSS? Did you release I library on NuGet?
Removed: Rule 3, Rule 7. /u/oftheterra already went over [some good points](https://www.reddit.com/r/csharp/comments/4obtu5/math_ai_mockup_expression_parser_that_you_teach/d4bf2j3). While it looks like you put a lot of work into your application, the submission as it is, doesn't benefit the readership of /r/csharp in any way. Perhaps make a writeup of how you went about the expression parsing/evaluation (in a way that's relevant to C#), maybe consider posting it on GitHub (or other open source repository).
Generally speaking you should use strongly named collection (e.g. CustomerCollection) for properties and return values. This gives you full access to the public interface and allows you to add new methods later as your needs change. The abstract interfaces such as ICollection are meant to be used by frameworks where being more specific isn't possible. (e.g. LINQ queries).
ICollection and IList.
Which is why I wrote &gt;Even if you don't really need the security aspect, you still want to minimize the chance of collisions Yes, I'm aware OP's not trying to defend against an attacker intentionally causing collisions, but accidental collisions caused by some half baked custom hash function will screw up the unique barcodes all the same. You can't fit arbitrary strings into a ~40 bit serial number, so a reversible encoding isn't gonna work either.
OP's doing about 100 devices. A dictionary or hashset in memory is all he needs to protect against collisions.
It's a poxy barcode. Randomise 12 digits, check they haven't been used before, move on with your life. Why cause arguments in the work place for something so insignificant in life?
Can't argue with that. :)
Why downvote for suchs an insignificant post? Edit: This isn't about just this barcode problem. It's about knowing your customer. Seriously though. If you want a better workplace you gotta invest in it properly. Customers want a product ASAP but don't want a product that isn't going to be easy to use or w/e their requirements are. It's better to take a step back. evaluate what they actually want. And then start developing. If you don't see this, you're just a workhorse in the workplace. If you're fine with that then I don't have anything more to say.
[Weren't me, guv](http://i.imgur.com/yCNI6dq.png) If you want a better workplace you stop giving a shit about insignificant things like how to perfectly and randomly generate 12 digits for ~100 barcodes, and just get on with whatever works. 
No, I call trying to identify problems in someone else's workplace from the anecdotal evidence of a really insignificant task, and encouraging them to "fight back," a waste of time.
This is a strong argument and I agree. Probably was a bit optimistic with trying to solve stuff.
In either example, you've made your method [Impure](https://blogs.msdn.microsoft.com/ericwhite/2006/10/03/pure-functions/) for no reason, which is evidence of bad design. The `ScoreForm()` method should be calculating the current score on request and returning that. It looks like there's no need for a `Score` property at all. If the calculation is liable to take a long time, rename it to something like `CalculateScore()`. When these principles are applied, it should become more evident that these functions/properties *probably* belong as instance members. Objects are meant to be the owners of their own data- iterating through another object's `Items` when not necessary, for example, is to be cautioned against in object-oriented-programming. Using these principles you will be better able to manage the state and data manipulation of your application by not writing spaghetti-code functions everywhere that treat objects as nothing more than names for grouped state (which is more akin to using `structs` and classical C-style programming).
Thanks for the input guys. Where would you put this if you were dealing with MVC? It sounds like it belongs in the controller from reading this. 
Here it is, my new way of doing it. I added a business layer and made this class. Is this good? public class Form { public string CalculateScore(string items, string answerKey) { var score = 0; for (var i = 0; i &lt; answerKey.Length; i++) { if (i &lt; items.Length &amp;&amp; items[i] == answerKey[i]) { score++; } } return score.ToString(); } } There will be more methods inside it but this is the first.
 public static int ScoreAnswers(IEnumerable&lt;char&gt; items, IEnumerable&lt;char&gt; answerKey) { int count = 0; for (int i = 0; i &lt; items.Length &amp;&amp; i &lt; answerKey.Length; i++) { if (items[i] == answerKey[i]) { count++; } } return count; } * Pass in the data, not the containing structures. * The function works the same whether static or not, place it where it makes the most sense to you. * Don't ever return a string, return the true data type (integer) and push any data type conversions further up the call stack. * I don't recommend storing answers as a string - this is making a string act "magically". It's better to pass in something like IEnumerable&lt;Answer&gt; or at very, very least IEnumerable&lt;char&gt;
Actually it's a very common choice for games, at least for indie games where teams don't have time to hand roll their own networking stack. The MQ in its name is misleading. Basically it's a socket library that's actually friendly and deals with all sorts of gory boring details for you.
Thanks ShadwChsr all good suggestions. I think the reason I have the answers as a string is because char wouldn't store a space or an empty answer. And I don't know why I haven't changed the score to a string I'm going to change that to an int. 
Well in any case thanks for the explanation and example.
My main criticisms of that code are: - if score is an int, why return it as a string? If the UI (or whatever) needs it as a string, that's where the conversion should go, not in a method that calculates a numerical score. - the class name ("Form") doesn't seem to be a good choice for a business layer class. 
A string is a sequence of chars - you can definitely store a space as a char. char c = ' ';
You use abstraction when you have a set of properties or functionality that are very general and should apply to a wide range of objects which are not necessarily the same type. An abstract type will not be very useful on it's own, but will provide a solid basis for other classes. Let's take a simple example: you want to store polygons of all kinds. Every polygon has the same basic stuff: it has a bunch of sides, there's a way to calculate it's area and it's circumference, you can apply linear transformations on them. So you'd have an abstract class called *Shape* and you would derive other classes from that: Triangle(), Square(), Hexagon(), etc. They would inherit these basic properties and build upon them.
Good advice. `IEnumerable` isn't indexable though (and doesn't have a Length property). You'd want to use `IList` and `Count`. Also, if the lengths of `items` and `answerKey` are different, you've got other problems ;) Better to verify they're the same length before iterating and then just check one of the lengths in the loop.
Let's say I have an abstract Server class public abstract class Server { public string Name {get;set;} public string OperatingSystem {get;set;} public void Reboot() { // Add your really cool code here.... } } And then I want something with more specificity, so I create WebServer and SqlServer classes: public class WebServer : Server { public IISSettings Settings {get;set;} public void RestartIIS() { // Add your really cool code here.... } } public class SqlServer : Server { public SqlSettings Settings {get;set;} public void RestartSql() { // Add your really cool code here.... } } With this, I can group my SQL and Web servers together in a list: List&lt;Server&gt; Servers = new List&lt;Server&gt;(); foreach(var server in Servers) { Console.WriteLine(string.Format("Server name: {0} - Operating System: {1}", server.Name, server.OperatingSystem)); if (server.GetType() == typeof(WebServer)) { // So now, I can cast the server variable to the WebServer type and interact with the more specific information ((WebServer)server).RestartIIS(); } // But I can also still use what's available from the abstract class server.Reboot(); } Now, I can write code in a single place instead of having to duplicate it across all of my more specific server classes, which makes my life easier (and my code easier to read and understand). Hope that helps.
Think of it this way. You're going to make a few classes: a Car, a Bus, and a Chariot. They're different things with different uses, but they share a lot similarities. So you decide to put the similarities in a base class called "Vehicle". Vehicle: * Turn() * Accelerate() * Stop() * Explode() Now all of your classes inherit from Vehicle and you only have to write the methods once. But you only want people to use either a Car, Bus, or Chariot, so you make the Vehicle class "abstract" so nobody can instantiate the Vehicle directly; they can only inherit from Vehicle or interact with something that is a Vehicle. That lets you do cool stuff like make methods and classes which are able to interact with the abstract idea of a "Vehicle", without having to know about all the various kinds of vehicles you've decided to implement, e.g.: public void RunIntoABrickWall(Vehicle theVictim) { theVictim.Stop(); theVictim.Explode(); } Pretty cool, huh? You don't need to make an overload of that method for each vehicle class. TL;DR: Abstract classes are like Interfaces, except you get to put shared code into the class. The downside of Abstract classes compared to Interfaces is that you can apply multiple interfaces to a class, but a class can only directly inherit from one abstract class. 
Do you understand the purpose of base classes? If so, abstract classes are just base classes where creating a new instance of the base would be pointless or broken. Shape is a good example.
Well, `IEnumerable&lt;T&gt;` has a "Length" property in the LINQ method `Count()`, and you can replace the `for` loop with something like this: `foreach (var item in items) { // Do some more comparing here }` But frankly, you'd need to manage two iterators (one for each IEnumerable&lt;T&gt;) and it would just sort of be a pain in the ass in general. So yeah, you're right that IList&lt;T&gt; would be a much better fit here, but I wanted to throw this out because it's *technically* possible.
You can draw a square. You can draw an equilateral triangle. You cannot draw a "shape". Shape is abstract. Square is a shape. Equilateral triangle is a shape. Not a perfect analogy, but it's a starting point!
Right; I meant to use lync the first time around but kept things simpler in the end.
Back in the autumn we learnt to do this for a university assignment, but the machine had to load instructions using reflection, had to also be able to load additional instruction sets from external .NET assemblies at runtime. Was very fun, and the knowledge of Reflection I learnt from that assignment was insanely useful for my work.
I don't have any specific experience here but it sounds like you may want to have a look at events in this case. It sounds like it may lead you to what you're after :). Hope that helps!
WPF makes use of [Data Binding](https://msdn.microsoft.com/en-us/library/ms752347) to simplify the process of updating the UI with changing data. If you are unfamiliar with this system then you need to read up on it as it is a core part of how WPF operates. If you are familiar with it and it is not meeting your needs then you need to more thoroughly explain what your specific challenges are. For example, "dynamic property grid" and "at run-time" (vs?) are not well defined here.
I agree. Calling `Count()` or `ElementAt()` can cause the `IEnumerable` to get calculated each time. In this case it is possible to use `Zip()` to get items from both IEnumerables efficiently. public static int ScoreAnswers(IEnumerable&lt;char&gt; items, IEnumerable&lt;char&gt; answerKey) =&gt; items.Zip(answerKey, (x, y) =&gt; x == y).Count(x =&gt; x); 
`GetHashCode` isn't the only hash algorithm, you know. And a GUID isn't guaranteed to be all that unique either if you truncate it to the 12 digit number the OP needs.
Yeah, I'm looking at if there's any PropertyGrid Event Handlers I can use. 
Really? I use abstract classes quite a lot for the reason you describe &amp; for implementing template method design patterns.
Hi! public static int ScoreAnswers(IEnumerable&lt;char&gt; items, IEnumerable&lt;char&gt; answerKey) { return items.Zip(answerKey, (i,a) =&gt; i == a).Count(x =&gt; x); } Edit: Didn't see /u/NovelSpinGames answer below, which is basically the same, except for the fancy C# 6 expression body syntax.
Removed: Rule 4. Perhaps rule 3. Have you tried contacting the author?
what is "VIC" ? (i'm not english)
No, i doubt that he will reply
Any time!
[**Single Responsibility Principle**](https://en.wikipedia.org/wiki/Single_responsibility_principle)
Don't worry about it. Is your code it maintainable? Testable? Easily understood? If so, it's the best code you can have. Are you perhaps saving a few lines of code by not taking advantage of a certain language feature? Sure. Probably. Does it matter? Probably not. At the end of the day, the best code is the code that meets the spec and doesn't fall over when you look at it. In my experience, good Domain Driven Design doesn't call for a lot of what you call "normal" inheritance. You have your domain models, you have your interfaces and that's all you need for the most part. Most of the time you're probably just pulling data from a DB and displaying it in some way, with some CRUD operations to go with it. Not a lot of call for it there, beyond maybe defining your DbContext if that's your thing. Some libraries and such work well with inheriting from a base object but if you don't see a need for it in your applications, don't use it. Better to use what you understand than try to use something for the sake of it. 
I would say its not 'bad' that you haven't. I would also say it is less common than creating abstract classes. It can be rare for a class to be both functional when stand alone and extensible. Subjectively, I feel well written code often sticks to small, single purpose classes whose complexity is so minute that extension would be best served as a new class implementing a shared interface--so replacement instead of extension.
Thank you, i have used what you said like this can you please tell me if i did it right ? class ATMManager { public string bank { get; set; } public string customers { get; set; } public string chequingAccount { get; set; } public string savingsAccount { get; set; } public double currentAccountBalance { get; set; } public string dailyBalances { get; set; } List&lt;Savings&gt; savingAccounts = new List&lt;Savings&gt;(); public void AddSavingsAcc(string accountNum, double accountbalance, double _interestRate) { Savings mySavings = new Savings(accountNum,accountbalance,_interestRate); savingAccounts.Add(mySavings); } List&lt;Chequing&gt; chequingAccounts = new List&lt;Chequing&gt;(); public void AddChequingsAcc(double M_BilluserAmount, double _BillFee, string accountNum, double accountbalance) { Chequing myChequing = new Chequing(M_BilluserAmount,_BillFee,accountNum,accountbalance); chequingAccounts.Add(myChequing); } List&lt;DailyBalance&gt; DailyBalances = new List&lt;DailyBalance&gt;(); public void AddDailyBalance(string date, double dailybalance) { DailyBalance myDailyBalance = new DailyBalance(date, dailybalance); DailyBalances.Add(myDailyBalance); } List&lt;Customer&gt; Customers = new List&lt;Customer&gt;(); public void AddCustomer(string name, string PiNNumber) { Customer myCustomer = new Customer(name,PiNNumber); Customers.Add(myCustomer); } public bool ValidateUser(string userName, string userPin) { bool validate = false; for (int v = 0; v &lt; Customers.Count; v++) { if (userName== Customers[v].Name &amp;&amp; userPin==Customers[v].PinNumber) { validate = true; } } return validate; } public bool WithdrawChequing(string userPin, double userAmount) { bool withdrawcheq = false; for (int c = 0; c &lt; chequingAccounts.Count; c++) { if (userPin == chequingAccounts[c].PinNumber) { if (userAmount &lt;= chequingAccounts[c].MaximumWithDrawal) { var acct = new Account(); acct.Withdraw(userAmount); withdrawcheq = true; } } } return withdrawcheq; } public bool WithdarwSavings(string userPin, double userAmount) { bool withdrawsave = false; var acct = new Account(); for (int s = 0; s &lt; savingAccounts.Count; s++) { if (userPin == savingAccounts[s].PinNumber) { if (userAmount &lt;= savingAccounts[s].MaximumWithDrawal) { acct.Withdraw(userAmount); withdrawsave = true; } } } return withdrawsave; } public bool DepositChequing(string userPin, double userAmount) { bool depositcheq = false; var acct = new Account(); for (int d = 0; d &lt;chequingAccounts.Count; d++) { if (userPin == chequingAccounts[d].PinNumber) { acct.Deposit(userAmount); depositcheq = true; } } return depositcheq; } public bool DepositSavings(string userPin, double userAmount) { bool depositsave = false; var acct = new Account(); for (int ds = 0; ds &lt; savingAccounts.Count; ds++) { if (userPin == savingAccounts[ds].PinNumber) { acct.Deposit(userAmount); depositsave = true; } } return depositsave; } public bool PayBillPayment(string userPin, double userAmount) { bool paybill = false; var cheq = new Chequing(); for (int p = 0; p &lt; chequingAccounts.Count; p++) { if (userPin == chequingAccounts[p].PinNumber) { cheq.PayBill(userAmount); paybill = true; } } return paybill; } public bool TransferFunds(string userPin, double userAmount, char accountType) { bool transfer = false; for (int t = 0; t &lt; Customers.Count; t++) { var cheq = new Chequing(); var save = new Chequing(); if (userPin == chequingAccounts[t].PinNumber) { if (userAmount &lt;= chequingAccounts[t].MaximumTransferAmount) { if (accountType == 'C') // if user choose C then transfer { // amount from savings to chequing. save.TransferOut(userAmount); cheq.TransferIn(userAmount); if (accountType == 'S') { // if user choose S then transfer // amount from chequing to saving. cheq.TransferOut(userAmount); save.TransferIn(userAmount); transfer = true; } } } } } return transfer; } public double DisplayAccountBalance(double currentAccountBalance) { var acctbalance = new Account(); currentAccountBalance = acctbalance.AccountBalance; return currentAccountBalance; } 
I've been doing this professionally for about as long as you and I'm in the same boat. Although I'm not doing super complex programming, just crud apps and dB synchronization with apis
&gt; Composition over inheritance. Always! Not always! It (the GoF doctrine/manifesto you are quoting) says to *~~prefer~~ favour* composition over inheritance, not to outlaw one in favour of the other. e: correction
Thanks, that's good to know! :) Glad it's not just me.
It's been a very long time since I derived from a class for anything other than a test fixture. Even then I prefer to compose "drivers" but with the existing stuff I've got inheritance is difficult to dodge. Last time I did anything with it in system code it was also due to external factors such as WCF, and even *then* it was a purely utilitarian factor for passing commands that are cast at runtime with something like: [DataContract] public abstract class ServiceCommand { [Ignore] public void ExecuteOn(IService service) { // ExecuteCommand&lt;T&gt; - the generic needs to be of the implementor class, not ServiceCommand. service.ExecuteCommand(this); } } e: remembered some stuff like making my own implementation of a DependencyResolver and chums, or Conventions for automapping, OWIN middleware overrides etc. but not sure if those count as I am overriding/deriving from someone else's classes and not making my own (abstract or not) classes and inheriting those.
When you're designing methods that require an object as an argument, you want to work with the least specific object. This way, your method can be reused with more specific objects from that same family. However, this is basic inheritance and doesn't necessarily limit that class to an abstract class. This is my take on the subject: First, look at Interfaces. Interfaces are purely abstract. They're like... a wireframe. You know where everything is and what they're called, but you don't know any other details about them because they haven't been implemented yet. You can code to an interface without ever implementing them which is super useful and leads to some super decoupled code. Interfaces don't *do* anything at all. They simply define what can be done by any class that implements them. So what's the difference between that and an abstract class? Well an abstract class has the option of having implementations of things. So for instance, a method could be on the class and thus all of it's children and it cannot be changed. It will always be there. Or if you mark it virtual, then it can have a default implementation with the option of being overriden. Or it can be marked abstract which means it has no default implementation and it *must* be implemented by the child class. When you write your methods and have a parameter be of the the interface type (e.g. IList&lt;int&gt;) then you're saying that this method can work with *anything* that implements that interface because that method only relies on the members of that interface. However, if you make the parameter of the abstract/base type (e.g. List&lt;int&gt;) , then you are saying that you can only work with objects that are children of List&lt;int&gt;. In other words, you're accepting or requiring ALL of the behavior of that base class vs. the Interface where you don't really care. I often use abstract classes to implement interfaces. It sounds pointless, but it's not. Since I can have implementations in abstract classes, I can actually do something like this: public interface IMyInterface { int DoThing1(); int DoThing2(); int DoTheMainThing(); } public abstract class MyBaseClass : IMyInterface { public abstract int DoThing1(); public abstract DoThing2(); public int DoTheMainThing() { var x = DoThing1() * DoThing1(); return x * DoThing2(); } } I used the abstract class to control the interaction between two other members of the interface. Now, children of the class only need implement the abstract members, but the base will control how they work together. Any method that takes IMyInterface can take children of this class or any other implementation (like if I don't want the behavior that's forced in this base class) but if for some reason I require that the logic work like this for this method, then maybe I would require the base class instead. While choosing between the two, my personal rule of thumb is to prefer interfaces over abstract classes unless there is some sort of functionality that I need in the children as interfaces as far more flexible in that are much less specific.
The two have a lot of correlation, but you just don't see it. Feel free to look up my post history, it's what it's there for. Which topic would you like me to stick to? You evidently deleted the aformentioned comment due to shame, but I can give you some C# advice if you'd like.
Some times you gotta cut out all the nuance so that the beginner can get the idea. 
You can't put functionality in an abstract method.
Others have had said all these things I would say except you should probably use decimals rather than doubles. Doubles are intended for working with things like irrational numbers decimals are better when you know n advance that you aren't going to be changing precision a whole bunch. Like when dealing with money. Further a decimal will never have the .5 + .5 = .9999999 problem 
You can use char if you want to store empty answers. If you put a question mark at the end of the type specifier then it can be nullable... char? answer = null; // For illustrative purposes
&gt; So you could define a method and put some functionality in it then decide whether or not to change that functionality in each class that derives from it. He is talking about a virtual method, not an abstract one here.
Put your code in a method in a class (an instance method) if the method needs to take into account configuration, manage complicated state, or coordinate with other objects in complicated ways. Static methods are mostly useful for pure functionality where the inputs are relatively simple and will always return the same results for a given input (outside of maybe passive context parameters like the current date/time). Some exceptions for throwaway code, extension methods, and some other reasons, but you'll figure those out as you go. The best reason to prefer instance methods when you need to interact with configuration, state or other objects has to do with implementing dependency injection to make working with dependencies more maintainable in mid or larger sized projects, but that isn't an easy concept to talk about in a short comment.
I've been coding since about 1983 and I use them often. It really depends on your needs, I happen to get value out of base classes that are both usable and sometimes need to be extended. A common application for me would be a response class. I write a lot of APIs and I have BaseResponse which has a Success bool and a result Message. Then I have instance specific Response classes that inherit from it when I need to provide more data. I also add an Exception parsing function to it for when errors occur. Sometimes I just have simple calls that are success/fail, sometimes I have complex results that have arrays of data in them. I would say the only issue with you not using inheritance is that your not keeping the skills sharp on it for when you might need it.
Thank you but my project wants me to use doubles.
A really good use for abstract classes and/or methods is something called *polymorphism*. Using an abstract base class, you can define what amounts to a skeleton for other classes to derive from that you can, albeit indirectly, use for certain things. Let me give you an example from something of my own: public abstract class ItemBase { public abstract string ID(); public abstract string DisplayName(); public abstract string Description(); } Using this class, I can define something along the lines of: public class ChewingGum : ItemBase { public override string ID() { return "ChewingGum"; } public override string DisplayName() { return "Gum"; } public override string Description() { return "A pack of mint-flavoured chewing gum."; } } That's all well and good, and it looks quite interesting, but you're not really seeing it in action, or how its useful. Now, let's say our little game has a whole host of these item classes, each with their own IDs and so on, and we want to store them in a Dictionary&lt;K, V&gt;, relating the ID strings to instances of each item class? Now, if these were just regular (non-child) classes, we'd have to use something like: Dictionary&lt;string, object&gt; Items = new Dictionary&lt;string, object&gt;(); This is less than helpful and can actually cause problems since you'd need to do runtime type checking every time you add an object to that dictionary. Quite painful. Why do that when you can use the base class of all items, instead? Dictionary&lt;string, ItemBase&gt; Items = new Dictionary&lt;string, ItemBase&gt;(); Much clearer *and* any additions to that that *aren't* items (child classes of ItemBase) will throw an exception during runtime! This makes debugging easier in the long run and also gives you the power to do the following *without* casting: txtItemDescription.Text = Items["ChewingGum"].Description(); See? Very easy, very straightforward, and its all thanks to our friend, the abstract base class!
Would need to see the whole class to tell you why you are out of context with expenseDataset1. Your git hub seems to be missing any real code.
Great article raising a interesting discussion. Thank you for sharing it. I think this [comment](http://byterot.blogspot.fr/2016/06/after-all-it-might-not-matter-commentary-status-of-dotnet-dotnetcore-csharp-oss-fsharp-dnx.html?showComment=1465976594155#c4259175862391957077) is quite true.
A lot of people (myself included) [hate inheritance and prefer composition](https://en.wikipedia.org/wiki/Composition_over_inheritance). So I'd say you've done well by not using it.
It depends. Usually, you'll store them in some sort of store and pull them out and dispose them as needed. However, there are special scenarios where you need to use the same objects across many processes, in which case you could look into a flyweight pattern or something. However, Keeping collections in memory for access when the app might need can also just be an in-memory store. If you're gonna go that route, look into the caching namespace instead. If you're really just trying to put your data access logic into an easy to use class so that you can pull data out, modify and save it, then look into repository pattern, or more generically, facade. Again... it really depends on what you're trying to accomplish and why.
looks like they've got an updated version of this book coming out in Octobor, too bad it's not out now
OP, pretty much everything he said rings true for me, and I'm around 7.5 years. I almost never use inheritance. Interfaces are more common, but still rare-ish.
No, shallow inheritance is much more useful than deep inheritance. You are following this KISS principle and this means you have mastered C# structures.
Sure, that's a possible way to think about them, but remember that F# records can have mutable fields as well, while having automatic structural equality is a must have (as for .NET structs by default). 
This sounds like a common misuse of inheritance, actually. You shouldn't use inheritance just as a way to reuse code. You should use it only if the domain objects you're modeling truly fit as a hierarchy of objects. That's what GoF means when they say prefer composition.
You're missing out on some extremely slow and cumbersome debugging sessions! PS: I avoid inheritance like the plague, but somehow when programming UI systems, they are really handy. Oh, check this out at 27:06, really nice considerations about inheritance (by a guy who also avoids it) https://hero.handmade.network/episode/game-architecture/day277#
Seems like the class 'Release' isn't going to be used multiple times and thus you might consider making it a static class. A bit nitpicking but you might also consider using async/await to not block your application when it is downloading the file.
There's a number of different ways to do this. Since this is your first WPF application I will assume you're not using a framework (like MVVM Light, Caliburn of PRISM - if you are using a framework, refer to their documentation on how best to achieve this; PRISM for example offers regions and navigation). One way would be to open a new window, this is the "old way" and you can just display a new window (offer it a reference to your previous window to allow communication between the two) by calling Window.Show(). The more modern way of doing things is to have a "Main view" with a "Main viewmodel" that has a "Current viewmodel" property. This property is bound to a ContentControl and you can define several DataTemplates to display different views for different viewmodels. Please refer to this stack overflow answer with more information: http://stackoverflow.com/a/19654812
Do some research, look up some tutorials, just try out something that reports the progress (maybe just with plain text without a GUI progress bar), make an attempt. Don't give up because you "have no clue how to do that". Make your attempt and if you still can't get it working, make another post detailing what you wanted to do, _what you tried_ and the code you used for your attempt, and why it didn't work.
Removed: Rule 4. There are plenty of existing tutorials/questions/answers out there on how "switch screens". Try googling for it and make an attempt. If you still can't get something working, feel free to make a new post detailing exactly what you attempted and why it didn't work.
This is just me having a crack, but I think you would do something like this with dependency injection: class KungFuFighter { ILogger _logger; // to be injected IKungFuRepository _kungFuRepository; // to be injected public KungFuFighter(ILogger logger, IKungFuRepository kungFuRepository) { // Dependency injection gives us the objects we need, plug them into the class _logger = logger; _kungFuRepository = kungFuRepository; } public void YellBattleCry() { string battleCry = _kungFuRepository.GetBattleCry(); Console.Log(battleCry+"!"); _logger.Log("Kung Fu Fighter yelled battle cry "+battleCry); } } Did I do it right?
Dependency Injection isn't quite so explicitly related to composition - although it's a very natural fit - but yes, delegating specific tasks instead of extending is the very gist of it.
&gt; Only if you're following a functional paradigm. Would you mind elaborating on this point? 
What keeps you using ResponseBase instead of IResponse?
I was thinking static too. It will grow but I think you're right it will just be used once. I'll look into async/wait. Thanks.
I'm not sure how I'm supposed to start , Should I start by reading documentations ? go with Tutorialspoint.com ? or simply enroll into courses ?
Are you completely new? This short series is a fantastic start: https://www.google.com/url?sa=t&amp;source=web&amp;rct=j&amp;url=https://channel9.msdn.com/Series/C-Sharp-Fundamentals-Development-for-Absolute-Beginners&amp;ved=0ahUKEwiz-Y7j9a7NAhUL_mMKHS4rBpAQFggbMAA&amp;usg=AFQjCNEP2y0Rt7drRCJwjujSkaLpv_tOXg&amp;sig2=8mWrjCdFDap5Ue_ciO-7pA From there, I enjoyed working with the book head first c#. Finally, I spent a lot of time solving problems on projecteuler.net and /r/dailyprogrammer type places
My understanding is, instead of inheriting to provide different behaviour, you move that behaviour to a new class which the original holds an instance of as a property.
It's done already , I know I should do all that but which one comes first ?
Get a book, read it, practice. Head First c# is generally recommended for programming beginners.
It depends on your knowledge and your intellectual capabilities (probably also related to your age)! Would C# be your first programming language? Then you ***definitly*** should invest into a book for absolutly beginners ("head first C#" - which I didn't like at all, as it was far too basic for me, or the [yellow book](http://www.robmiles.com/c-yellow-book/)). If you know allready some language with almost equivalent main paradigms (OO, static typed), then you could invest into a more advanced book like "C# in depth" or similar. Perhaps MS offersd something similar to the well known Java tutorials? If so, you could also try that, as they hopefully teach idiomatic C# there.
I would recommend bobtabor YouTube channel. I think he's great at explaining shit. And also you can try yellow book, like Bolitho recommends
Get a job that uses C# and do the work with the MSDN website on another monitor and access to other coder's code, to see how they do it. Basically I've found the best way is once you know the basics of programming, the best way to learn how to do something is to find yourself in a situation where you need to do it, and do it. Don't learn C# to know it, Build something that needs C#.
I would definitely recommend the Yellow Book. It's free and linked in the sidebar. If you've got any programming knowledge at all, it will be an easy read for you. I thought Head First C# was interesting. It doesn't read like most programming books. Whatever book you choose, follow up by practicing. It will all make much more sense by doing it yourself. Good Luck!
This comment thread sums up the reasons you would use an abstract class &gt; interface nicely.
What I am trying to do is similar to having a windows form with a previous and next 'thing' button. The animals, cars, and houses all will derive from the same base class (I should have used a better example) I'm going to try and follow the observer or mediator pattern that keeps track of what type of item--animal, car, house--that I am on in the list to pop up the right set of buttons for that item and fill some text fields with values from those properties. If I understand that pattern correctly, I will have a GUI mediator class that will be coupled somewhat to each derived class. That way it knows when item is an animal show the food box, when item is a car, show the tires box, etc. It will be responsible for unhooking from the Inotify properties of the last item and hooking up to the correct Inotify properties of the current item based on what type of item in the current one. I just don't understand where the list of items should live in that scenario. Thank you very much. 
Why are I interfaces so rare for you? No DI?
HttpClient works just fine in Xamarin, zero issues.
&gt; There are only two hard things in Computer Science: cache invalidation and naming things. &gt; &gt; -- Phil Karlton If the class only parses command's names as you mentioned why not just `CommandParser`? If does more than that with your commands use a name that gives that idea, such as `CommandManager` or `CommandSystem`. Beware of too many `SomethingManager` in your code base. It may be a sign of a bad design. Also, here's other suggestions when naming things: * If other people are going to use such class (and they are sitting next to you) share with them the burden of naming (they can't complain later) * Don't get too attached to design patterns. Thinking everything as a pattern by the book isn't a health approach to naming/designing concerns.
Because I tend to work on web apps that weren't so much engineered as they were thrown together years ago. At my last job, where I did some architecting, we used a lot of interfaces. We were trying to build a modular event processing system, so we had input and output adapter and event brokerage interfaces
How are many *Manager classes bad design? Just curious. 
I could see if you have a manager for every little thing, it being bad. "MainWindowPictureBoxEventManager" etc. Like most things with programming (can we say "inheritance") it could get ugly if overused.
Thanks again for your input RavynousHunter. I think I get it now. 
And yet you now seem to have deleted it, shock. Do us all a favour and keep your sick thoughts to yourself in the future.
I'm curious how you came to that conclusion based on the example they used. Considering the GetArea() method only an interface and an abstract class are effectively the same. In both cases an implementation has to be provided.
Any time, friend.
Generally speaking, *Manager classes does two things: hold a mutable state and have more than one responsibility. Those make a code harder to test and to reason about. It's not inherently bad. Sometimes is necessary and sometimes is not but gives you valuable leverage nonetheless. Just use with care.
Good point, I added the link to the post. Thanks!
Oh man
Assuming you're new (and haven't developed anything beyond simple console programs), don't focus so much on learning a particular language. It's a really common mistake for new programmers and even if they make it far, they get themselves into the mindset that they are only good at one particular syntax/library. You don't want to be a 'C# developer', that's foolish. It's like trying to learn a new language by replicating sentences and not what they mean and why they go together the way they do. Learn computer science principles with some language basics, and work your way into OOP. Use the language you like as a tool to get there. All C-inspired languages that also use the OOP paradigm share useful similarities, Java and C++ being the closest to C#. Learn the fundamentals and you'll be able to learn the languages very easily. Look for real resources, honestly. Books and accredited courses are your best bet. Most online 'free course' websites (Codeacademy, Treehouse, etc) focus way too much on particular languages and churning out replication, and given how popular they are nowadays, it's no wonder there are so many lost and confused new guys. Combine these resources with some of your own curious hands-on programming. Test out the things you learn yourself in your own IDE rather than just filling in blanks like a lot of courses will try to have you do. When I was really young, my parents would bring me to Borders/Barnes N' Noble and I would just read the 'For Dummies' books for a few hours, while tinkering at home with computers. I'd get more and more curious and apply what I learned as I went along. Yellow Book by Robert Miles: It's free online, and it's one of the most comprehensive C# resource books for beginners you'll find. It covers all the basics very well and will teach you the fundamentals of C#, OOP programming, and real-world examples. Saylor Academy's CS courses with accreditation: Free online courses with the ability to take a final exam for certification (not extremely weighty in employment, but definitely not a bad thing to have and be proud of), and even the possibility to earn college credit on certain courses at certain schools (limited school choice and only really applies to the first two intro courses I think). Everything is taught similar to an online college course but at your own pace, where you'll take a CS101 course with quizzes and a final exam, then move on to CS102. Lots and lots of long documents to read but everything is done very well, the available info is comprehensive, and the consistent assessments are a nice way of ensuring you're keeping up. You'll learn nice bits of languages like Java and C++ but primarily the concepts like computer mechanics and binary, OOP, algorithms, big data, data structures, etc. Lynda: Paid (I think like 35/month?), but they are extremely comprehensive and offer specific courses in basic CS concepts, languages, and frameworks (even some of the less popular stuff). It's all video-taught. Only thing I really don't like is their use of BlueJ for the intro Java courses. I've seen way too many people get hung up on it and it's a really shitty way to learn. Either way, the courses are taught pretty well, better than how most either teach you as if you're a 3 year old (simplified and useless explanations) or a philosopher (overly-complicated for no reason and also useless explanations). Udacity is a good alternative that I believe is free or at least offers some free courses.
Actually this is why I'm learning C#. I was hired for a job that requires C#... and I'm just now learning C#.
I don't use inheritance much. I'll do it occasionally for similar objects that share common functionality, but most business software doesn't need it. If you're building APIs it can be handy, but don't think you need to use it.
Hey, I've been working through this material for the past 4 months. Here is my [gist](https://gist.github.com/wendydra/6a6743845174c8ae9195d6f06d0d268e) containing links to books, tutorials, and references. Definitely concur you should spend more time DOING than just reading. I find the 70/30 split to work well for me. So if you're going to dive for 1 hour, then spend 70% of that hour coding with 30% on reading. Cheers.
I'd recommend reading a book to learn some of the language basics, then work on a project that needs C# (I'd recommend a small XNA game). As mentioned somewhere else. Dot Net Pearls is an excellent website of C# code samples. Look for a resource that gives you full code examples, nut just one or two line snippets.
I was looking at some of their implementations, like this: https://github.com/RolandPheasant/TailBlazer/blob/master/Source/TailBlazer/Controls/HighlightTextControl.cs But as **oftheterra** said, if I'm not familiar with WPF either, so that could be the issue, maybe OP is facing the same problem as I am.
It's not particularly more verbose compared to say Windows Forms or a JAVA-based UI considering how powerful it is and what all is being done behind the scenes. It can be a bit complex if you aren't quite familiar with what is going on with a couple key systems such as these big two - XAML for UI building, and the Model-View-ViewModel application structure you see here. MVVM isn't even a WPF feature, it is just a practice for building well-organized applications. Once you have a grasp on those two things and familiarize yourself with a typical folder structure for WPF applications then it is super easy to get to know how one is working whenever you come across one in the wild.
I have actually been using [this book](https://smile.amazon.com/Microsoft-Visual-Step-Developer-Reference/dp/1509301046/ref=sr_1_1?ie=UTF8&amp;qid=1466192856&amp;sr=8-1&amp;keywords=microsoft+c%23) to learn C# and it has been helping immensely. It even tells you where in the book to begin based on your programming experience. Big book, but it really breaks everything down and lets you know how everything works.
Dependency property definitions are unfortunately stupidly verbose, nothing you can do about it when you want to write WPF controls. But it's really just a class with 5 properties and two straightforward methods.
Which one, Python or C#? Either way, the answer is yes- both languages support networking in many different forms.
https://developers.google.com/google-apps/calendar/ You might like to use the API to enforce your custom logic, thus letting the company users stick with the software they are used to
Yes, `StreamReader` will dispose the underlying stream unless you use the [`leaveOpen`](https://msdn.microsoft.com/en-us/library/gg712952.aspx#Anchor_0) constructor parameter. 
Thanks! i made it in switch case in for loop, i don't know if it is "proper programming solution" but it forks tho =D http://pastebin.com/G5wyg5ht
After looking at that I don't think it would work for what I'm trying to do but thanks for the response!!
If you open a new repl.it tab it looks like this: using System; class MainClass { public static void Main (string[] args) { Console.WriteLine ("Hello World"); } } You need the `using` (namespace imports) and the `class` definition for it be working C# code. Alternatively, [csharppad.com](http://csharppad.com/) may be easier to work with as it can execute commands directly without a method/class definition and has code completion.
This is really simple general purpose computing, literally anything is viable. Of course we'd recommend c#
&gt; request" the named event either by **string** name [...] &gt; that you poll the command by **string** name Sorry if it's completely unrelated, but please, avoid using strings to alter the behaviour of methods. It's just horrible. For example I'd argue that in the first case, the event object should be passed to the object that needs to subscribe (a getter can also work if you have an instance of an other object who can provide the it), or the subscription should be done by a mediator. var publisher; //This variable will be assigned somewhere [....] var subscriber = new DummySubscriber(publisher); or var publisher; //This variable will be assigned somewhere var subscriber; //This variable will be assigned somewhere [....] //Whenever it is needed publisher.AddObserver(subscriber); In the second case, using the new keyword seems like a much better option than just a string name: your IDE will be able help you (and whoever uses your code) a lot more this way, Also, you don't wanna have to alter that class every time you create a new type of command, to account for the new string that can be passed. Alternatively, you could use a factory with clearly named methods. public class myCommandFactory{ public Command1 CreateCommand1(...); public Command2 CreateCommand2(...); } I like this solution in case you have different factories that alllow creation of different sets of command methods, which promotes incapsulation in some way. Otherwise it doesn't make too much sense, and feels like a bit of over-engineering 
FYI, your request is a bit... big. You're basically saying "i'm brand new to using tools, will a hammer help me build a house?" A language is a tool to accomplish building a piece of software, and there are many tools you may need to complete what you're asking (HTML, Javascript, C#, MVC or MVVM concepts, SQL). If you're brand new to coding in general C# is a good strongly typed language with many examples to help you create something. However, I would start with something simple to help you learn before jumping into your ultimate project. Practice by building a shed before building your house.
You really should check out Python3 and Tkinter module to learn how to build a GUI with this functionality. What you're doing isn't that intense that you'd need to utilize the benefits of C# from a learning perspective. If you just want to learn C# then by all means, you can absolutely achieve this in C#. If you're asking if you should as a novice programmer, I'd argue no. I'm sure others might disagree though
Missing a semicolon on the second call to `Console.WriteLine` (line 9). `Console.WriteLine (result)` should be `Console.WriteLine (result);` Other than that, do you want to print the value of `result` inside the loop? I'm guessing not, based on your earlier code and the indentation of this code, but you have it inside the loop (and the if-statement) because it's inside the braces for both of them. If you only want it to print out the final answer, then you want to move it two lines down so that it's outside the braces for the loop but still inside the braces for the function. Or you might want it to print out each step as it goes, in which case ignore me. :)
Honestly, as you are brand new to programming, none of these solutions are practical. The kind of application you want to build is quite complex and could be a large project for a veteran programmer. You want this application to be: 1. Easy to use like Google Cander is. 2. Relatively bug-free. 3. Fulfilling all the scheduling features you want. That is not that easy. Find some software that fulfills the task as best as possible and move on. If you want to pursue programming, start with the basics and then learn data structures and algorithms.
You need to reference System.Linq in a using statement (think of them like import in python), here is working code: using System; using System.Linq; class MainClass { public static void Main (string[] args) { var total = Enumerable.Range(0,1000) .Where(counter =&gt; (counter%3 == 0) || (counter%5 == 0)) .Sum(); Console.WriteLine(total); Console.ReadKey(); } } 
Since your questions are answered I will instead make a recommendation. Install visual studio community edition. (It's free and equivalent to the professional edition) Visual studio in my opinion is hands down the best IDE ever, no exceptions. It will help you immensely while starting out, creating a new project gives you the boilerplate you can then direct to understand what it all needs . The auto completion and inline resource documentation reduce the need to Google everything, you can often times 'feel' your way through using framework components. It even works as a python IDE
Seeing as you were hired for a job, I'm assuming you're not a complete newbie when it comes to code and can, at least, solve most problems that come your way, even if you need a little bit of research to do so. Again, assuming that's the case, I would recommend starting with simple projects like: * A guessing game where you try to guess what a die (d6, d20, doesn't matter) rolled. Console, WinForms, and WPF can all be used for this, though console would probably be a decent starting point to get familiar with the syntax. * A program that reads an arbitrary directory (either supplied by the user or as an in-program variable, your choice) and gets various statistics for it like how much space it uses, what the biggest file is, and so on. I'm sure there's plenty more, I just made those two up off the top of my head. Once you get familiar with how the language itself operates, how various features function and what you can do with them, you can move on to bigger things, like maybe something that polls NOAA's weather API for XML weather data and parses it into something nicer for users to read.
My comment is more directed at the first comment in the thread. &gt;Square is a shape. Equilateral triangle is a shape. My understanding is whenever you want something as an "is a", you use abstract class. When you want something as a "can do", you use an interfaces. You are correct in saying GetArea() is essentially the same whether it be an interface or abstract class. I'd prefer to use an interface in that instance. 
To be a bit repetitive and non-original: This. A thousand times this. A project like this might be fun, but a mere mortal who's new to programming is not going to create one in a short amount of time. Or even a long amount of time.
I agree that OP is going to struggle to produce a product that is as easy to use a Google Calander is, but I think there's a lot of merit to just diving into a problem and having a crack. I've always found that I have learned the most and been the most motivated when working on a problem I was interested in. I learned my first language (Python) while trying to solve the [Knapsack Problem](https://en.wikipedia.org/wiki/Knapsack_problem) with depth-first search. My solution was convoluted and sucked and was slow (and didn't use recursion &gt;.&lt;) but I had a lot of fun and learned a lot from it. Without any external motivation, data structures and algorithms can be really *boring*. Personally I enjoy the maths, but you couldn't get me to learn about WCF with a gun to my head unless I was working on a WCF project. [Relevant article](http://prog21.dadgum.com/190.html) &gt; Every so often I see someone attempting to learn a skill (e.g., web design, game development, songwriting), by finishing a project every day/week/month. I love these! They're exciting and inspirational and immediate. What a great way to learn! The first projects are all about getting something--anything--working. That's followed by re-engineering familiar designs. How to implement Snake, for example. Or Tetris.
Are you being tested on MVC? It doesn't sound like it based on your description, so I wouldn't worry about it until you get a better command on the language as a whole. For that, I would say work through the problems on [Project Euler](https://projecteuler.net/archives) or on [Code Golf](https://codegolf.stackexchange.com/) and see you how you do. [C# In Depth by Jon Skeet] and [Head First C# by O'Reilly] are also good books to read through to get more comfortable with the language. 
Honestly, look for something that's already built, given your skill level. It'll be 1000 tonnes better than anything someone new to coding can build.
I'm targeting .Net 4.5 for the library these two are contained in (they're separate files, but I put them together for brevity's sake), and am wondering if there's some way I can make these easier to use and/or more performant. Not that I'm having issues with them *at the moment*, but all I'm using them with are relatively small classes with little data. Should I use these with larger classes with lots of data, I'm concerned that I *might* not have the speed I need to do things efficiently. Anyone have any suggestions?
There's sooo many scheduling programs out there. They should invest in one. If you still tried this as a hobby, good for you, but I wouldn't risk their business due to you having a bug in code. 
Based on not much, I'd say this would be a good case for a web application.
Try and find something off the shelf. Depending on the type of business / industry, something specific might exist to serve that. Otherwise, look at something generic like Calendly.
Consider using an existing logging implementation (say, Log4Net) that handles the file I/O, dating files, rolling log files for you. They should be robust and give you a good feature set to work with and expand with as you further develop. I think they'll probably also reduce the amount of file I/O going on and they would be threadsafe. When logging out exception details, consider using the [`Exception.ToString`](https://msdn.microsoft.com/en-us/library/system.exception.tostring%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396) method instead of grabbing the `.Message` and `.StackTrace` properties manually. The `.ToString()` implementation will also log out any inner exceptions (including their message and stack trace) Any reason why you're passing the stream objects with `ref`? If you're doing it for performance reasons, it's not going to have an impact, especially while it's doing serialization and file I/O at the same time. In general, I prefer my serialization methods to _fail_ (say, with an exception) rather than return true/false. 100% of the time, objects _should be serializable_ at compile time, and if at runtime I pass a non-serializable object, that's a bug. Similarly, in your `DeserializeObjectFromFile` method, you return a `default(T)`. This can be a problem because the callee can't tell the difference between a deserialization/file-read failure, and a successful deserialization of an object in its default state. (for example, you can't tell the difference between a failed integer deserialization and a successful deserialization of the value `0`) Good that you moved your serialization methods to a single point passing in a stream. That's useful for maintenance. However, consider using the standard `using` pattern on your streams. If the serialization/deserialization process fails, you don't close/dispose your streams.
I'm currently using [this](https://www.amazon.com/C-Players-Guide-RB-Whitaker/dp/0985580100) or you can go [here](http://rbwhitaker.wikidot.com/c-sharp-tutorials). I've tried Head C# but sadly instead of starting to learn how to do some basic code I got some problems because I'm using windows 7 OS and you can't use UWP (Universal Windows Platform) on windows 7 and instead you will need to go through WPF tutorial which will take a while before getting to the basics that's why i recommend the "A C# - Players Guide" book. Also I'm doing this on Sharp Develop and no problems so far :)
[removed]
Aah, didn't know the ToString() for Exception did all that, t'would make things simpler. As for Log4Net, I've...had *problems* with that. Company I worked at used it and it was about the most ornery library with which I'd ever dealt. The ref thing is an old C++ habit I'm trying to break; I honestly forget that C# handles all objects as references by its nature. The deafult ( T ) thing was to keep VS from bitching at me in the catch blocks. I suppose when it comes to serialization, if it fails, you really *do* want the thing to toss an exception outward because that's kind of a serious thing to have blow up on you. Lastly, the using thing is still something to which I'm getting used; again, hold-over from C++ where such things didn't exist. I'll amend those classes, since they're the ones I use *everywhere*, and thankee for all the advice!
Do you know any other OOP languages..? If so you're probably not gonna write a very good project without a lot of practice tbh. Just the ability to identify edge cases that comes with experience would be super necessary for something like this.
If you don't have braces after an `if`, `else`, `for`, etc., *only the next* line of code is part of the statement. So your first example is equivalent to this: if (playerScore &gt;= playerScoreToPass) { leveltoComplete = true; Console.WriteLine("Mission Accomplished."); } else { leveltoComplete = false; } Console.WriteLine("Try Again."); Which is not the logic you want. If you leave the braces off the `if` as well the code acts like this if (playerScore &gt;= playerScoreToPass) { leveltoComplete = true; } Console.WriteLine("Mission Accomplished."); else { leveltoComplete = false; } Console.WriteLine("Try Again."); Which doesn't compile because now the `else` doesn't directly follow the `if` anymore. Leaving the braces off single line statements makes the code a bit shorter, but it can lead to logical errors like this which is why some people recommend to *always* use braces.
A few random thoughts - Please don't use ```ref``` - Suggest using ```static``` everywhere. e.g. In case of logger it's better to have an interface ```ILogger``` with an implementation. - Instead of calling ```Close``` on streams, switch to ```using``` statements - Feel free to use extension methods where it makes sense. It makes calling code cleaner. e.g. ```DeserializeObjectFromZipEntry``` can be re-written as an extension method so that it's usage will be ```zipEntry.DeserializeXml&lt;T&gt;()``` - Instead of ```File.Open``` use ```FileStream``` - Calling ```Flush``` on each write will be expensive - Avoid complicated getter/ setter i.e. ```Logger.LogWriter``` - Start local variables &amp; function argument names with lower case 
I would probably recommend using python for something like this. C# is great but if you're a complete beginner python is both very easy to pick up, has a lot of resources to learn from and a lot of community packages that can help you get most of the way there. 
Given you are just a beginner programmer, by your own words, I would highly recommend *your parents own company* purchase some ready software that handles resource scheduling: With quick googling some tools like https://hubplanner.com/ are available for 7$/month. No, I havent tried hubplanner so I dont know what its like You have plenty of time to learn and even build this type of software on your own, but until you have it "polished" its pretty good ROI to just put in 7$/month etc vs spending weeks/months creating your own... Im sure you dont consider your time "free", right?
You shouldn't use language specific or pattern specific names since it implies certain logic or code specific things. I know this sounds vague, so I'll clarify with an example. For instance, if you have a list of employees, you could name it employeeList. But that would indicate it's of type List&lt;T&gt;. You don't need to know that while reading code, and it only becomes confusing when you change the datatype later. Instead just name it Employees. Same goes for classes or constructs using patterns. Try to avoid it, if possible to reference to the pattern. The pattern is an implementation detail you should keep hidden, in case you change it later. As with many things in life, sometimes using Xfactory makes sense, instead of some other vague name. So in general, stick to names from your application domain that don't reveal implementation details. But don't go overboard when you can't find a good name that hides it. You can always refactor later. 
By "forks" do you mean "works" (unless you mean like git-esque "fork")? Is this slang I don't know of?
I agree that you should always use curly braces. It doesn't look as nice but I like the consistency and as others have said prevents stupid mistakes in the future.
I recommend the full version of LinqPad as it's awesome, but if that's not an option, use RoslynPad as you get Nuget/Intellisense for free.
But if he wants to tackle this problem as an "excuse" to learn programming, I say go for it.
I would use composition. It is cleaner, safer and more modern (I feel). public class Character { private Collection&lt;Class&gt; Classes { get; set; } public AddClass(Class class) { Classes.Add(class); } } There is a implementation of some generator for DnD on [GitHub](https://github.com/DnDGen). You may find some inspirations here.
That's out of question - but please describe, how tight coupling appears ***because of*** using abstract classes? (Remember you have said that!)
Actually tried switching to using statements. I can't pass what I create there as an argument to another method. Is there an actual performance difference between File.Open() and FileStream, or is it a stylistic thing? Might comment out the Flush() call and see if it still works...I remember having issues where streams wouldn't write properly unless I explicitly called Flush(), but that might've just been a quirk of .Net 3.5. Avoiding extension methods is a personal thing: I prefer having my stuff contained in its own units only ever touching what it needs and nothing else. Its hard to explain, I'm just...kinda anal. That, and I don't have much experience doing such a thing and don't want to end up buggering things. Is there any reason to avoid what I've done with Logger.LogWriter other than style? I'm using those because it makes operating on them a lot simpler than if I made a (as I feel, unnecessary) pair of explicit get/set methods.
Well, if the intent is Windows exclusively, you may want to change your newline character to `"\r\n"` then because Windows as standard uses carriage return + line feed.
*Technically* you can skip the braces if you just have one statement after the conditional. *In practice* you want to always use braces. If you come back and want to add a line, if you forget to add the braces then you just wrote a bug. 
Figured to drop AddClass() into the MyCharacter class would be a better bet indeed. Does mean I do need to go through all the code and use a similar thing for the other stuff I'll add. Perhaps I'll just use the original code and call that from MyCharacter.AddClass() (I'm pretty lazy...) Thanks for pointing out those codes for D&amp;D3.x, but I'm using d20 Modern. While in the bare basics they're based on the same system, d20 Modern does have some distinct (and some even fundamental) differences from d20 Fantasy/D&amp;D3.x
&gt; Does mean I do need to go through all the code and use a similar thing for the other stuff I'll add. Just use inheritance for this. Looks for abstract class :)
So let's say op creates a web app for this and it's working great. Let's say he leaves a security hole (such as too high of perms for the application, sql injection, etc) and someone decides it'd be fun to go in and delete all their data or encrypt all their drives or something. All things I could see easily happening to a beginner. That could really disrupt their business
Disclaimer: Although I'm quite familiar with DnD, I am still something of a noob with C# and OOP. That said... Would you ever add a Characters Class (Rogue for example) to anything other than a MyCharacter? I think not...and so my two cents is, it should be a method of MyCharacter because you wouldn't use it elsewhere.
He would learn a lesson the hard way but I guess I never imagined he would put his first program straight out into the Internet. I figured he would make a little Windows thing to use internally.
I'm afraid the only way I see to do this with this format is to create a list of known publishers, MARVEL, IDW, DC and check if the category contains them. You could put these in a settings file that users can change. For a short word like DC you could split the title with ' ' and '/' and check for individual words that match DC exactly. Because it's not in a defined protocol you can't expect it to work all the time, you just have to mitigate false positives as best you can. If you are worried about your software breaking, make sure that any parsing errors let the user know where he can download a newer version of the software.
&gt; I'm afraid the only way I see to do this with this format is to create a list of known publishers, MARVEL, IDW, DC and check if the category contains them. I'm thinking you're right here. There is not apparent delineation showing where publisher stops being defined, except after "Marvel Comics". Thanks 
You could always ask the guys to provide their info in a different format, if they don't mind you parsing it ;)
Why not? And how did you make that determination?
If I learn F#, will that translate nicely.to C#?
Better late than never... Overall * It would be worth reading over [RFC2368](https://tools.ietf.org/html/rfc2368) and [RFC6068](https://tools.ietf.org/html/rfc6068) - there are some great examples that you can use to test and verify your code. * Which also requires a mention, I don't see any unit tests and only remember seeing one triple-slash documentation comment. In MailToUrl.cs * The convention for naming classes is PascalCasing, "MailToUrl". * The strings defined lines 16-28 could [and should] all be marked "const". I don't like that "_toField" contains a "?" but "_ccField" and "_bccField" do not - adds additional thinking required when maintaining. * BodyText (which I would name "_bodyText") could be declared as a StringBuilder instead. All you do is append to it and later concatenate it. But you oddly didn't use a StringBuilder in BodyTextString although you do in getMailToUrl. * In RecipientString, it looks like the bits handling To will blow away the value of recipientString when there are multiple To recipients given. * Also in RecipientString, you are iterating the Recipients collection [at worst] six times or [at best] four times. A quick glance at RFC2368 and RFC6068 didn't mention a required order, so you could iterate once and switch on the RecipientType to determine what prefix string to use. At a minimum, eliminate the uses of Any() here - the for-each with Where will return an empty collection if nothing matches. * In getMailToUrl, you are assuming that a Subject is always specified. Which may be true for your usage. * There are a lot of places doing string replacements and poor-man's URL encoding. You might just want to use [System.Web.HttpUtility.UrlEncode](https://msdn.microsoft.com/en-us/library/system.web.httputility.urlencode.aspx) instead. * Also with getMailToUrl, it doesn't return a Uri (which would be expected from the name) - it returns a string that contains the uri. 
F# and C# both compile into CIL code which is executed by CLR. You can even try IronPython, which is also compiled into CIL code. It's not C#, but because they are sharing "base" language (CIL) you can, for example, write function/class in IronPython and call it directly from C#. It's just different approach from learning C# directly.
One important thing no one in the comments is telling you is that, in your sample above the following line: &gt; Console.WriteLine("Try Again."); Is **not** part of the else block. It will be executed in both cases, when the player score is high enough and otherwise. When you do not add the braces only the first line after that is part the expression. So if you removed this line: &gt; Console.WriteLine("Mission Accomplished."); from the if part and remove the bracers it would work. The error you're receiving when you remove the if bracers is that you have a *floating* else. Since only one statement after if is counted, the compiler cannot find to which *if* that else belongs to. Indentation (tab or spaces) that you used to align your code make it seems to you like they belong together, but the compiler fully ignores those, you could write all your code in a single line and it would still behave the same. Hope this actually answers the question on why is it happening. The other answers saying that you should always use bracers and all may be correct (I agree with that) but they did not answer the question.
I use Windows 7 in Parallels, I find it's a bit faster than VMware Fusion. 
I think that's true. I'm able to develop .NET apps with Visual Studio Code and there's some things that i needed to install for .NET but I just wanted to make sure I wouldn't run into problems later. I could dual boot but I'd rather not do that because I don't have a huge hard drive
- You can definitely pass an object created with ```using``` as a argument to another method. This ensures that ```Dispose``` is always called, even in case of exceptions which may not always be true otherwise. - It's just a style. Btw, you can get rid of the ```File.Exists``` check by just using ```FileMode.Create``` which overwrites existing file or creates if necessary. - Streams are automatically flushed when the buffer is full or it's being closed. Explicitly calling ```Flush()``` definitely affects perf. - I understand, not many people like extension methods. In other words: - using them makes calling code easier to read, avoiding makes it slightly easier to write. - Having all that logic in the getter bundled with static members just makes it difficult to extend the code in future (or unit test effectively) e.g. - Separate log files for different components - Include console logging or log to database - A long running service: all logs end up in single file - Log levels (i.e. include verbose or error) 
Look into iTextSharp: https://sourceforge.net/projects/itextsharp/
It will certainly help. They have many differences but also many similarities. Both are .NET languages, and C# is looking to [add a lot of functional features](http://blog.ploeh.dk/2015/04/15/c-will-eventually-get-all-f-features-right/). In both languages I favor expressions over statements and try to reduce mutation and side effects. The difference is that F# has more features for this and makes it tough not to while C# allows it. Some types in F# are common in C#, like Array. The popular collections in both languages implement IEnumerable (which is what you used in your sample code). In fact, a `seq` in F# is just a type alias for `IEnumerable`.
I'd say the best option for that is using HTML and Javascript. Neither are very hard to learn, and there are a ton of frameworks out there to help out. jQuery will be your best friend when working with Javascript. 
Try [**SuppressInitialDiagnosticInformation**](http://seleniumhq.github.io/selenium/docs/api/dotnet/html/P_OpenQA_Selenium_DriverService_SuppressInitialDiagnosticInformation.htm) maybe?
Off the top of my head, looks like you are missing a reference to `System.Linq` you need to add that reference so that you can use `Enumerable`. I would echo the reply by /u/tyreck/. Install Visual Studio - it's completely free, it is the best IDE out there for C# and compared to all IDEs it is fucking amazing. Try this in REPL.it:- using System; using System.Linq; public class Test { public static void Main() { var total = Enumerable.Range(0,1000) .Where(counter =&gt; (counter%3 == 0) || (counter%5 == 0)) .Sum(); Console.WriteLine(total); } }
I've seen this before, however, in my circumstance I want to only check 3 or 4 of the 8 properties, but this seems like it would check all. Also, I have around 1500 elements in each list so efficiency is important and some have said that using list.except may not be very efficient. 
This is from Microsoft [Quick Dev: Developing on a Mac for C# Developers](https://channel9.msdn.com/Blogs/DevRadio/DR1659)
looked promising, but no dice. also tried phantomJSOptions.AddAdditionalCapability ("phantomjs.cli.args", "--webdriver-loglevel=NONE");
All values will be checked or at least iterated when performing LINQ queries regardless. If there are any unique value states associated with the 3 or 4 of the properties in your lists, you could use **Where** to produce new lists and compare the two after? List1.Where(x =&gt; x.MyProperty == 5).ToList() The above would create a new list of items from the items stored in List1 which only contain the value 5 assigned to MyProperty. Or even: List1.Where(x =&gt; x.MyProperty == 5).Except(List2.Where(x =&gt; x.MyProperty == 5)) Might work? I'm not at a computer with Visual Studio installed at the moment other wise I'd check! :)
hmmm, so to clarify what you are saying, is that it would check to make sure that for an element in list 1 there will be an element in list 2 with the same 8 properties and if even one is different it will pull it out, and there is no way to just specify the 3 or 4 properties i want it to check?
Windows 10 in VirtualBox for me.
Well you can specify multiple properties using &amp;&amp; during the **Where** query: List1.Where(x =&gt; x.PropertyA == 2 &amp;&amp; x.PropertyB == 10 &amp;&amp; x.Name == "throwaway38495032").ToList() But if I understand your problem correctly now, I suspect the reason your usage of **Except** isn't working is due to the differences in how equality works between standard data types like strings and ints versus objects. ObjectA != ObjectB just because its properties may have identical values (as you may of course know), but LINQ compares the objects themselves when using Except, not their properties. So the way I see it is you have two options. You can either utilize a fun combination of LINQ statements such as Except and Join as shown [here](https://stackoverflow.com/questions/1647698/using-linq-to-objects-to-find-items-in-one-collection-that-do-not-match-another), or you can override the GetHashCode and Equals methods for the Object type being held by your lists, as one of the suggestions [shown here](https://stackoverflow.com/questions/693324/linq-except-operator-and-object-equality) demonstrates (I think its the third one down), so LINQ's Except method will work when comparing them.
NAT Punching, 100%
SocketAsyncEventArgs and a decent example of designing and implementing a custom message framing protocol.
WCF Soap 1.1 vs 1.2 (basic vs ws) and how to create an application with out using the App.config. Also how to create a messaging event to log information. I would also include a REST vs SOAP analysis.
How about making a tutorial on how to use UDP broadcast on a lan in order to find a server on the same lan? I had to do this recently and it could make a nice little tutorial. 
How about including the error?
An overview of serialization techniques. Detailing the trade-offs between speed, size, ease of use, portability, etc. Info on tweaking ACK settings in TCP 
Async IO, and proper async design and implementation.
There's 3 kinds of windows apps now: Winforms (the classic gui), WPF and universal. For Winforms, nothing much has changed since way back when, only the new technologies that support the code behind the form. If you want to build a gui app, look for Winforms development articles, there will likely not be books on them since it's not a very big subject nowadays.
Thanks, that fixed it for me!
I just did
I have no experience with them so I'm not sure how to use them. If you could let me know of a suitable replacement for `SynchronizedCollection` I will research it and replace `SynchronizedCollection` with it in my application.
If you want to build apps with a nice modern GUI, then I would strongly recommend learning XAML - you then have a strong foundation to build apps for desktop with WPF - and cross-platform mobile apps with Xamarin. The caveat is that XAML / WPF have a pretty steep learning curve - I never thought I'd get my head round it until one day it clicked. What helped to make it click for me was the PRISM MVVM framework guidelines (other MVVM implementations are available - I just like PRISM because it was the first one I learned, it's open source and there's loads of learning resource available). Pluralsight has been a god send for me, in particular the videos from Brian Lagunas, who also just happens to be one of the developers of the PRISM framework. [Here's his blog](http://brianlagunas.com/) MVVM is just a pattern (Model, View, View Model) - a way to structure your projects in a nice decoupled way. You will learn to love interfaces which you will hate at first but the long term benefits (testing, versioning, de-coupled code) far outway the short term pain of learning it.
https://github.com/Microsoft/VisualStudioUninstaller
I'm got some Async stuff in the queue. I guess I could include some sort of "stress test," example which spawns up one server, but a few hundred clients. Does that sound good?
i thought about doing `HttpClient` just as a short, gentle intro to the networking stuff. I'm planning on the TCP and UDP ones. First I'll cover the `Client/Lisenter` classes, then do the lower socket ones.
Any "downsides" would most likely be subjective. In short, LINQ has become the standard for working with collections in C#
I don't use VS myself and am fairly new to C#, but if you just want to get going, you don't even need to use VS to compile your code. The dot net frameworks ship with a command-line compiler. 64-bit: c:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe hello_world.cs 32-bit: c:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe hello_world.cs Either one should produce a hello_world.exe for you. Also, for this program you only need: Using system; and not all of the other ones. 
Ah...
Ok, well, I fixed my code... except when I ran it a second time now I'm getting build errors. Where is all the error reporting? Why doesn't it tell me what line of my code was broken? Here's my code for reference. using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace ConsoleApplication2 { class Program { static void Main(string[] args) { Console.WriteLine("Press any key to continue. . ."); Console.ReadKey(); } } } 
What error? 
ok cool, so in my case for this example I would want the second property to be the same and if it was different then i would just print out the element that has the different property. in that case i would print out "b","f" and "z","z". If all i cared about was that the first property matched i would only print out "z","z". So ya, it essentially the same thing on a bigger scale, about 8 properties and i only care about 4 of them and i want them to be the same and if they are not i would want to print out the second element (i said bool in my original question but doesn't make a big difference since i was going to have the true bools print out the element.) Let me know if you still don't understand what I am asking.
There are a few more cases I'm wondering about. I'll add two items to the end of each list: List1 = "a","a"; "b","b"; "c","c"; "g","g"; "h","h" List2 = "a","a"; "b","f"; "z","z"; "h","h"; "g","g" What do you want the result to be if you were to compare both properties?
Super low level networking with proper concurrency and async I/O. Maybe an implementation example with reverse connections and NAT punching?
ok so slight update. Ive tried changing what i had earlier instead of having not equals to equals like: var result = List1.Where(x =&gt; List2.Exists(y =&gt; x.prop1 == y.prop1 &amp;&amp; x.prop2 == y.prop2 &amp;&amp; x.prop3 == y.prop3 &amp;&amp; x.prop4 == y.prop4 )).ToList(); and got a list with the correct number of elements that were actually the same and it essentially left out the exact opposite of the elements that I was looking for. However if i keep it like i did earlier with the !=, i get a list with all of the elements generated. It seems as though != does not do what I am trying to get it to do. Now i probably could just use the == and get the difference in the both lists then output that but, that's bad coding and "cheating", I really want to figure this out the "right" way. 
Ok I misspoke earlier and you make a valid point (this output even confuses me, so I'm sorry about that) I would like to output the element from list 1 if the element from list one is not in list 2. so the output would be "c","c";"g","g" Again I'm sorry for saying that I would output elements from list 2 as that would make no sense. I would output the elements from list 1
If you get the opposite of what you want, you can apply the `!` operator in the predicate. So `x =&gt; !List2.Exists(y =&gt; x.prop1 == y.prop1...`. Edit: This will get you the items in List1 that don't match any items in List2. If you want the items in List2 that don't match the items in List1, you'll have to change a few more things.
`this` isn't required like `self` is in Python. If the name is in scope, you can refer to it directly. When you need to use `this` are times like having a parameter named the same as a property. It's common to see constructors or functions with parameters named the same. So you use this.property to refer to the property instead of the parameter. Also, `this` is a keyword while `self` is a convention. You can name `self` anything. E: small typo 
Yes. That kinda threw me off trying to instance stuff in python
Other than the extraneous List construction in the first one, there should be no appreciable difference. I wouldn't be surprised if they would result in the same IL. 
That already was kinda my thought as well, meaning that the 2nd option is the better one when it comes to memory efficiency...
SomeMethodCall() could be async with the 'yield' keyword avoiding creating the list in the first place.
Thanks for the heads up on that problem. Guess that for safe usage the 1st option would be the only one then. And I'm happy with that, because I don't have to recode my project(s) at all then :D
Why are you even trying to micro-optimise this? Did you notice slowdowns caused by this? Just choose the most readable option.
No, that's not what /u/bluenigma said. First, the list construction is pointless. You construct a new list, but then throw it away: List&lt;SomeList&gt; myList=new List&lt;SomeList&gt;(); //this is pointless because... myList=SomeMethodCall(); //here you just assign a different list I would consider this code to be a **bug**. If you _fix the mistake_, your code will look like this: List&lt;SomeList&gt; myList; myList=SomeMethodCall(); At which point, both code examples are pretty much identical and might even compile to the same IL. Meaning the same memory efficiency. At this point, you choose the _style_ that you prefer favouring your ease of use, readability, and maintainability. Finally, to answer your second question, _no_, in the second example `SomeMethodCall()` is only called once. The statement/expression within the `foreach(...)` parentheses is only executed once. EDIT: Also, in practice, what you're talking about here would be considered such a micro-optimization as to be a wasted endeavour. Indeed, it should be very well something you should ignore (other than the _bug_ which you need to fix; avoid the extraneous list construction). Most developers would consider this not only premature optimization, but _pointless_ optimization. Code your program for correctness, readability, and maintainability, then find actual, measurable bottlenecks _that matter_ and optimize those.
Thanks for explaining that. While I've been programming for 3 decades, OOP is still pretty new for me and I was still not sure when to construct something and when not. And actually you're the 1st to explain it in a non-abstract way, which most explanations on OOP are (to me). ...does mean though that I have to go through the whole project again to correct this 'bug' :s
You may want to brush up then on the distinction between variable _declaration_ versus variable _assignment_ (and _initialization_). Variable declarations are free. They are merely language placeholders for use by the _programmer_ at _compile time_. They are basically just the `List&lt;SomeList&gt; myList` part of the line and it doesn't matter if they appear on their own or have an assignment as well on the same line. Variable _assignment_ is when you "fill" that variable placeholder with _actual content_ (which can be an instantiated object or `null`). This is the right side of the code line that appears with the equal sign (e.g., `= new List&lt;SomeList&gt;()` or `= SomeMethodCall()`) This actually _does work_ in your program. The amount of work can vary (or might ultimately get optimized away by the compilers) but ultimately this is the part that matters when it comes to execution performance. _Initialization_ is simply the _first time_ an assignment occurs. This can be on the same line as the _declaration_: List&lt;SomeList&gt; myList = SomeMethodCall(); or it can be on a different line as the declaration: List&lt;SomeList&gt; myList; myList = SomeMethodCall(); These two code snippets are functionally identical and will compile to the same IL code for execution. EDIT: Also, something about your type naming is awkward. `List&lt;SomeList&gt;` implies that you are creating a list of lists. While not impossible to have, typically one creates `List&lt;SomeSingleObject&gt;`. It could just be an artifact of the question your posting though, but perhaps it's a reflection of the naming in your code base as well.
Multicast and UPnP would be interesting. 
&gt; You may want to brush up then on the distinction between variable declaration versus variable assignment (and initialization). I do know the difference between those. Sadly though, Unity engine works in odd ways at times when it comes to variables. Just look at the example below: string mystring; if (true) then mystring="It's true!"; would end up in an error telling me I haven't assigned the variable mystring, while string mystring; mystring="Not sure if it's true"; does not give this error. It's because of this odd behavior that I've been assigning a lot of variables in the declaration automatically (that and not being too sure when to declare lists in general as I said before). &gt; EDIT: Also, something about your type naming is awkward. List&lt;SomeList&gt; implies that you are creating a list of lists. While not impossible to have, typically one creates List&lt;SomeSingleObject&gt;. Think there the difference of an auto-dedact (being me) bumps in. I've never been told how to words stuff like that (and you prolly would not want to look at my code either). The *SomeList* I was referring to was just a name for the list, not a list of lists ;) But indeed, the way you (and prolly a 100s of other people) look at it, it might seem to be a bit odd :p [EDIT] And while I just explained the odd behavior of Unity, I started to change my code on list declaration and I immediately get one such error &gt;:( Guess I'll just keep on assigning them as empty in my declaration...
Maybe ask your employer for a real (small) project that allows you to display your knowledge but still provides a benefit to the company. Build an application based on those specifications. I've been writing software for more than 30 years. I see no point in writing something without a purpose. When learning new languages/platforms - I first find something that I want/need to build using that platform. If I cannot find a purpose, I've got better things to spend my time on.
You also need to use "this" when referring to parameters in the class scope and your inside a closure. 
i think this refers to the current class , let's say you have class A and class B , if you want to reference A from B , you do A.method / variable ... if you want to reference A from A , you do this.method / variable ...
Great point about keyword vs convention. JavaScript needs this type of convention.
For my needs inheritance works very well. Every child object needs what is in the parent. The child just extends it for special circumstances (More data generally). 
http://www.asp.net/mvc/overview/getting-started/aspnet-mvc-facebook-birthday-app 
 var mystring; if (true) { mystring = "it's true!"; } // accessing mystring here is an error This is because the language definition -- not the compiler -- says a variable must be initialized in all code paths. var mystring; if (true) { mystring = "it's true!"; } else { mystring = "this is nonsense"; } // now safe to use
I'd like to see someone explore BitTorrent style peer-to-peer.
Thank you so much for your great feedback. I will adjust appropriately. To my chagrin, someone over at Stack Overflow/Code Review rewrote it using in part the builtin .Net classes for messaging. http://codereview.stackexchange.com/a/129600/106620 That looks like a much better way of doing it than I was, even if my code was more up to snuff. Thanks
That is not a Unity quirk, that is part of the C# specification. Variables must be assigned a value before they are accessed, and if the assignment is conditional then the compiler can't guarantee that the assignment always happens before they are accessed at runtime. Usually that error is a sign that your logic is faulty and you're not covering all possible conditions (even if those are never meant to be true in your application). An obvious solution would be to move the code using the list into the `if` as well so the access depends on the same condition as the assignment, then your code will compile. In cases where you are absolutely sure that the variable is only accessed when the condition is true but the compiler still complains, you can initialize the variable with `null` instead of a new list instance, although that may lead to null reference exceptions if your assumptions were wrong.
Oh, interesting.
Self....is a convention... What?
Everything is hard, if you don't learn the basics. Do yourself a favor and grab a good book. They teach this stuff in a structured manner and are aimed at language beginners.
Thank you. My gripe with this is "why would I need to import basic functionality...."
Oh my god, ok... I see that now...
I am not familiar with repl.it, I do all my coding in Visual Studio, where basic system functionality are imported by default. Maybe you should opt for a different IDE.
I think it is, because I don't know of another way. I don't think you can truly learn everything theoretically and fully understand it without actually using the language because real world usage is why we're learning the language in the first place. Very good question. 
Sure. Just trying to think outside the box a bit and wonder at other possibilities of ramping up fluency sooner rather than later, while keeping in mind the need to know the basics.
That's what I say when talking about c/c++. Truth is, generics are not really basic functionality 
There's no requirement for it to be called self is all I meant. It's just a standard practice. You can name it this or bubblegum if you wanted. It's kind of a weird thing that Python has that languages like Java and C# don't. Sorry if that wasn't a great explanation.
I have no idea what I'm doing until I understand the common overarching architecture and patterns. It's fine to know words and how to construct a sentence, but if you don't know how to write a book, a chapter, and a paragraph, you can't do anything worth while. I'm speaking fairly metaphorically about programming here, of course.
Indeed, why do you need to import basic functionality? Visual Studio imports it by default when you create a class.
&gt; As others have pointed out, this isn't a Unity bug but a language feature. C# is making sure that you can't accidentally use a variable before it's been initialized. Thanks for pointing out it's a '*feature* instead of a bug. Still feels odd that it's only in C# that I bump into this for the first time though. In the past I've coded in BASIC, Pascal, C, PHP and a couple of smaller (scripting) languages, and none of them had this (for me) odd behavior. And for that I've resorted into assigning each and every variable I declare. About the naming guidelines, I know most of them and use some of them (even while being auto-dedact, I do try to conform to some standards :p), but most of all, I'm consistent in the naming of stuff in all of my code. So even if you or anyone else would be reading it, you'd see my naming method quickly enough (using other coding guidelines like remarking and such is a different thing though :s)
Ok, the first thing to consider while writing a recursive function is the base case, i.e., what input should stop further recursion? In this case, that would be an empty list, as the reverse of an empty list is just an empty list and nothing else needs to be done. You said that you only wanted a hint, so I'll write in pseudo code: ReverseList(myList) if myList.empty? return myList newList = ReverseList(myList.tail) newList.Add(myList.head) return newList Where .tail represents some way of getting all elements but the first, and .head represents some way of getting the first element. Generally, I'd avoid recursive functions (in C#), they add unnecessary cognitive load and increase the risk of mistakes. Though, I will say that having an understanding of functional programming is very useful, even when writing C#.
Latest visual studio automatically added generics since they are so widely used. Do yourself a favor and install visual studio with its awesome intellisense
The reverse of an empty or single-item list is the list itself (it's its own reverse). If the length of the list is less than 2, you don't have to do anything. Check for that at the start of your recursive routine (this is what will end the recursion). For every other list, make a new list by taking the first item off the list (the resulting list will be one item shorter), reverse that shorter list (that's the recursion) then stick the first item that you removed previously onto the *end* of the reversed list. You now have the original list, but reversed.
Generics haven't always been there and it's nice to have such things sorted under good namespaces. Looking forward at the direction MS is going, a lot of this will be split into separate assemblies, not just namespaces. Gone are the days of the System.Web style monoliths. 
We will use [anonymous types](https://msdn.microsoft.com/en-us/library/bb397696.aspx) a lot. They are nice for when you want to group by multiple properties and for creating types that you only use in one place. Properties should be UpperCamelCase, but I won't change them so they are consistent with previous code. var grouped1 = list1 .GroupBy(x =&gt; new { x.prop1, x.prop2 }) // Group by prop1 and prop2 using an anonymous type. .Select(g =&gt; new { g.Key.prop1, g.Key.prop2, sum = g.Sum(x =&gt; x.prop3) }); // Get the sum of prop3 for each group. // Do the same thing for list2. var grouped2 = list2 .GroupBy(x =&gt; new { x.prop1, x.prop2 }) .Select(g =&gt; new { g.Key.prop1, g.Key.prop2, sum = g.Sum(x =&gt; x.prop3) }); // Join the two collections of groups together, similar to a join in SQL. var combined = grouped1 .Join(grouped2, x =&gt; new { x.prop1, x.prop2 }, // The key to join the first collection on y =&gt; new { y.prop1, y.prop2 }, // The key to join the second collection on // The result selector (x, y) =&gt; new { x.prop1, x.prop2, sum1 = x.sum, sum2 = y.sum, difference = x.sum - y.sum }) .Where(x =&gt; x.difference != 0); // Get rid of the combinations where the sum was the same. foreach (var x in combined) { Console.WriteLine($"prop1: {x.prop1}, prop2: {x.prop2}, sum1: {x.sum1}, sum2: {x.sum2}, difference: {x.difference}"); } Anonymous objects are very convenient in this case, but you can't return them from a method. If you want to return your data from a method, you'll have to make a class or struct to store it in.
Going to echo that, if your lists are going to be large, you likely want a for instead of a foreach. A foreach creates an iterator which, for a large list, can take a while whereas for does not. Another optimization that you should look into would be [Parallel.For()](https://msdn.microsoft.com/en-us/library/dd460713%28v=vs.110%29.aspx), so you can take advantage of multithreading and multi-core CPUs.
Because it's not "basic functionality". The core generic collections are optional and not appropriate for every use case.
Wow this is amazing, I can't thank you enough. Just a quick question, if instead of writing to the console i wanted to add these into a new list (i am going to be exporting to excel, and i think that will make it easier), what command in the foreach would i add? 
Good job getting this far, I see two problems with your code, one minor and one major: Firstly, and this is mostly a question of performance / tidiness: When you execute newList.Count() you force the computer to iterate through every element of the list and count them, which, if the list is huge, is an unnecessary performance hit. In this case, you don't really care how many items are in the list, just whether or not there are 0 or more items. As such, it is much better to use the LINQ extension method .Any() to check if a list contains items, thus: if(!myList.Any()) Secondly, and more important: Null is not an empty list, and attempting to access any member on a null object will always result in null reference error. Instead, you should return an empty list, which myList is assuming that myList.Any() returns false, so: if(!myList.Any()) { return myList; } .Any() will immediately return true if the list contains anything, and false if it doesn't. ~~I ran a quick test, and compared .Count() and .Count on a list and I'm fairly certain that .Count() has a time complexity of O(n) (where n is the number of elements in the list) while .Count (and .Any()) is O(1) (constant time).~~ Another commenter mentioned that the reverse of a list with single element is also the same as the original list, so why not use that as a base case? Well, in my opinion, it's better to keep the base case as generic as possible, and if you use a list with a single item as a base case, you'll run into a corner case if someone were to call the method with an empty list. Edit: For collections that implement ICollection&lt;T&gt; (Like List&lt;T&gt; or ICollection), .Count() is just a wrapper for .Count, and is as such O(1).
You could add `ToList()` at the end of the expression for assigning to `combined`. Or you could write `var result = combined.ToList();`. But you still won't be able to return an anonymous type from a method. You would have to create a class or struct to store the data, let's say, `Difference`, and assign it like this: var result = combined .Select(x =&gt; new Difference(x.prop1, x.prop2, x.sum1, x.sum2, x.difference)) .ToList();
If you're new to C#, then I'd recommend learning how to use Entity Framework as a way to interface with the database.
Oh good its not just me then. When i set out to learn a new language i get stuck on coming up with ideas for products to create because ultimately, any non-useful software i develop will have been for wasted time. I've been toying with the idea of setting up such a website where people (non technical) could request software to be made and developers eager to learn are able to develop pieces of software which are genuinely useful to someone. Ninja edit: words
Ended up just simply doing var result = combined.ToList();. You are truly an awesome person and I feel bad that you won't let me give you a thank you donation. I have one more piece that i may want to add at some point in the next month that if I'm having trouble with, and you don't mind, I may come ask you. Out of curiosity if you don't mind me asking, are you a full time DE, you seem to really know VS.
I'm glad I could help. I'll be happy to answer any further questions. I'm a part time C# software developer. I have a BS in Computer Science. I've developed a few small video games using C# in Unity. I've been using C# for about seven years now. Learning functional programming has helped me become a better C# programmer (using LINQ, reducing side effects, etc.). If you want, you can check out [my arcadey game](http://www.kongregate.com/games/novelspingames/dodge-drop) and let me know what you think.
No, that's a great explanation. My mind is just blown, that's all
You're quite right, I've edited my post to reflect. I was lazy and only looked at the IL emitted from the two calls.
You probably don't want to return the list that is passed in. It could lead to a case where you have two references to the same list and modifying one will unintentionally modify the other. It also would be inconsistent with passing in a non-empty list, where a new list is returned.
Thats quite context specific, do you mean using UDP as a drop-in replacement (if so its pretty much identical, just drop anything regarding connection state and maintain a variable with the destination address) or do you mean reliable comms over UDP (which is a lot more complicated and youd probably want to design/implement something like ENet)
C# 6.0 in a nutshell 
Write an app to store/display CD info. Artists, titles, tracks, etc. Titles have one or more artists (Any mix album ever). Tracks have one or more artists ("We are the world"). Tracks can be on one or more titles ("best-of" releases). 
Have you checked you devu.com?
There are a couple of courses on edX and Coursera that might be relevant: https://prod-edx-mktg-edit.edx.org/course/programming-c-microsoft-dev204x-2 https://www.coursera.org/learn/game-programming https://www.coursera.org/learn/game-development https://www.youtube.com/playlist?list=PLadYLGMfR6Lpvh3xX3a7LXbqJqY_WjIk7 But beyond that, I don't that you will find many courses that are structured like a college courses. Most of the stuff you will find online and on sites like Pluralsight or Lynda.com will be focused on specific subjects/topics. You might have better luck if you try to find some college courses that are offered online (or locally, if you have a college nearby). I found a few by searching here: https://courses.flvc.org/Courses/Search/#/?keywords=%22C%23%20Programming%22&amp;registrationOnly=true
That's very easy to do. It will probably be part of my first TCP tutorial.
&gt; After reading the article my question is, should functions with a void return type typically be avoided? Well, ultimately I don't know if I'd go that far. There are 'pure FP' languages out there that attempt to model applications with pretty much no mutation of state (state is instead copied implicitly through lambdas and as function parameters). But those languages are unwieldy, inefficient, and imho best left to niche/academic pursuits. So, what I'm trying to say is that everything should be taken in moderation. If you spot an impure function that can easily be made pure, you should 100% go for it. But don't take any 'rule' or paradigm too far. Ultimately if your program has any external input (so, any useful program ever), it's impossible to build it entirely pure anyway.
The easiest way to learn natural or programming languages is not to learn lists of stuff that are only relevant later but to start using the language in the most basic way that is still useful. That's why hello world is still so ubiquitous - in both versions. Simple output that works. Stage 2 is accepting input. Stage 3 is doing something with that input and replying. After that you increase complexity and keep going until you feel comfortable, or "fluent".
Thanks for clarifying. :)
Hi! sorry for the late reply.. anyway thanks for all the comments. Appreciated :)
Once the readers understand the basics of TPC/UDP/... they could then move on to ZeroMQ/NetMQ. 
I've used Pluralsight and [Black Wasp]( http://www.blackwasp.co.uk/Tutorials.aspx). Good luck!
How do you want to get prop3? If you group by and join on prop1 and prop2, there could be multiple values for prop3 for each pair of prop1 and prop2. FYI, I might not respond for a while, depending on how much of an insomniac I am.
Will try this tom. Thanks!
I always use curly brackets. And a good practice is to minimize the repetition of the code you'll have to type over and over again. You can do: //Pseudo C# code. :) char gradeLetter; string message = "Your grade is "; if (grade == 100){ gradeLetter = "A"; } else if (grade .....){ } . . . . //And then after the if-else block.. you can now write your console write statement //just once. Console.WriteLine(message + gradeLetter); 
That's not true that Linux is more reliable that windows. Many users use Linux because their cost lower than Windows. With windows, the hosting provider must purchase Windows license. That's one factor that make huge different. The other factor is Windows support both ASP.NET and also PHP. If you register for windows hosting provider, you can run both ASP.NET and PHP site. With Linux, you can only run PHP site. As I know .net Core can run on Linux, it is on development progress. But I always use Windows, it is quite difficult for me to change to Linux. Windows is more familiar for me and it is easy to use. If you are using shared hosting, you dont need to purchase the license. So, you just need to find windows hosting provider, for example asphostportal and then you can host your site with them.
Not just latest, it's been doing that for several versions. 
It's not related to generics. Non-generic collections are in a name space as well. Everything is. 
You have been programming for three decades but you write code that constructs something and then immediately overwrite it?
This "odd" behavior helps guarantee that your code is correct. The other languages you mention don't do much for you in that respect.
&gt; Abstract class can have one or more methods which can be abstract(only signature) An abstract class can have **zero** or more methods, properties or events (that's right, events can be abstract or virtual) that are abstract. Fields cannot be abstract.
I'm not sure exactly what you're asking. Could you re-phrase your question? Some constructive criticism of what you've already got; having duplicated lines of code (as you have for your "Left"/"left" and "Right"/"right" options) is usually a bad thing - for example if you wanted to change the description of the hole you fell down, you'd have to do it in 2 places, instead of just 1. You can usually re-factor your code to remove this code duplication. For example: if (direction == "Left" || direction == "left") { Console.WriteLine("You have fallen down a hole you did not see, and died."); Console.ReadLine(); } else if (direction == "Right" || direction == "right") { Console.WriteLine("You continue down the path..."); Console.ReadLine(); } Also, you have `Console.Readline()` at the end of each block - if you're going to do that regardless, put it later in the code, like this: if (direction == "Left" || direction == "left") { Console.WriteLine("You have fallen down a hole you did not see, and died."); } else if (direction == "Right" || direction == "right") { Console.WriteLine("You continue down the path..."); } Console.ReadLine(); There - we're now down to 5 lines of code (ignoring the braces) instead of 12 - less than half the code to do the same thing. Now, what if the user enters, for example, "LEFT" ? Ideally you'd need some way of accepting that input too. But you obviously don't want to check individually for "LEft", "LeFt", "leFt" and all the other combinations, do you? Way too much work! But how about just turning the whole of the user's input into upper (or lower) case before doing the comparison? Like this: direction = direction.ToUpper(); // convert user string to UPPER CASE // e.g. if they entered "Left", "LefT", or "left", direction is now "LEFT" // Now you only need to check for the upper case variants. if (direction == "LEFT") { // So now we get here no matter if the user enters "LEft", "LeFt", "leFt", "left" or any variation on the word Console.WriteLine("You have fallen down a hole you did not see, and died."); } else if (direction == "RIGHT"); { Console.WriteLine("You continue down the path..."); } Console.ReadLine(); And what if the user enters something other than left/right? You probably want to detect that and respond appropriately: direction = direction.ToUpper(); if (direction == "LEFT") { Console.WriteLine("You have fallen down a hole you did not see, and died."); } else if (direction == "RIGHT"); { Console.WriteLine("You continue down the path..."); } else { Console.WriteLine("I'm sorry - I don't understand what that means!"); } Console.ReadLine(); Whilst this is a great learning exercise, writing anything other than a really simple text adventure this way will quickly become quite cumbersome, as I'm sure you'll discover soon (although I encourage you to continue with it and keep learning!). To expand it much further you'll want to have data structures (or objects) that contain room descriptions and connections, and have your code operate on those data structures. But that just gives you an opportunity to learn more C#. Good luck! 
 Parallel.ForEach(collectonA, currentA =&gt; Parallel.ForEach(collectionB, currentB =&gt; { // Do something with currentA and currentB } ));
I don't really see an answer to the question in the title. Also, a rather important difference between abstract classes and interfaces is that you can only derive from one abstract class, but implement multiple interfaces.
[removed]
Uhm... The other languages set the default of the variables by default to 0 or "" (or whatever null value you can imagine :p). But I understand by now that with OOP the values can't be defaulted to null values because of the differences in possible uses. And that shows that the major difference between OOP and linear programming I think ;)
If you really want to get into good habits OP. If you want to compare strings without case then call the .Equals() method and pass in a parameter of StringComparison.OrdinalIgnoreCase: var myStr = "AbCd"; if (myStr.Equals("abcd",StringComparison.OrdinalIgnoreCase)) { } Edit: StringComparison.InvariantCultureIgnoreCase &gt; StringComparison.OrdinalIgnoreCase.
I assume you are asking this in comparison to interfaces. On the surface they do appear to serve the same purpose so it is natural to ask a question like this. There are several reasons to use abstract classes. The simplest use of an abstract class instead of an interface would be to provide inheritable functionality. Unlike interfaces, which only create a contract that the instantiated class is required to adhere to (either by implementation or inheritance), an abstract class can provide implementation details that every inheriting class will have access to. There are caveats but you can explore those later.
If you are looking to fill in gaps, in other words stuff you don't know, I would recommend getting the C# language specification at the version you commonly use and go through that. https://msdn.microsoft.com/en-us/library/ms228593.aspx Version 5 Otherwise, if you're interested, [I made some videos](https://www.youtube.com/c/CraigHinrichs) of me taking a simple Console game and refactoring it from a straight forward procedural code base to OOP and leveraging C# features as I go. 
Ok, thanks!
Thanks for the warning, and saving me a few minutes :)
&gt;public This method or function or class or whatever you'd call it in python, is public and can be seen by others to use. Though this is where the app will always start, so that's kind of useless. &gt;static An object cannot be instantiated from this class and can only be used from the class. Again, kind of useless because this is the method the app looks for in order to start up. &gt;void The method doesn't return anything. Instead you could have 'int' or 'string' or whatever to replace void and that would be the type for whatever this had to return. (Useful if another system is calling this program) &gt;Main The name of the method, 'Main' is the name for the beginning of the code execution method. &gt;string[] args 'args' is the name of the parameter, 'string[]' means the parameter is of type string array, meaning a series of strings with no defined length currently. Whatever program calls this app to start or even yourself when you are debugging, you could pass in parameters to the program at the beginning of the execution. 
This was immensely helpful, and exactly what I was asking (plus a lot more). Thank you for taking the time to write all that. I likely wont continue with this particular project for too long, however it is indeed a good way to learn, thank you for expanding on that.
Wonderful, thank you! 
http://up-for-grabs.net/#/
There is also r/learncsharp, which may be a better place for questions like this. It isn't as busy, but it's also targeted at this sort of thing, so it is less likely to stir up ire or cost you Internet points (if you care about such things).
and to give you the python analogon import sys def main(args): pass if __name__ == "__main__": main(sys.argv)
Removed: Rule 6.
Removed: Rule 4. Make an attempt, check their documentation, maybe check some of the controls listed [here](http://mahapps.com/about/) and see how they do it. If it's still basically a skinned WPF app, perhaps you can just add your control like any other WPF control. If, after making a concerted effort, you are still unsuccessful, feel free to post again describing what you tried and how exactly it didn't work.
Perhaps an abstract class `Socket` with an event `SocketReady` that can be used when, say, a client connects.
Gives an indicator that they probably worked on desktop applications i suppose.
I believe there is a "ignore case" method you could you. Or just force the direction variable to be one case or another. For Example: direction.toLowerCase(); Something like that
A piece of advice for you, use the hell out of Intellisense, that thing is amazing. Most of the time if this happens the List will have a red squiggly line under it, hover and it will tell you what's wrong.
Will work pay for any training? You can enter your location on Microsoft's learning portal and find an MS certified training company. https://www.microsoft.com/en-ca/learning/find-partner.aspx They offer a variety of courses that are 3-5 days in length. Example of one offered by a training partner in my city: https://www.globalknowledge.com/us-en/course/87526/programming-in-c/ I've been to a few of these and they have been great. My work will send us on training a couple times a year to keep up to date, but there is a lot of people in your situation and they cover a lot of the basic stuff. It's great for helping you "understand" the why behind something, rather than just plugging in a solution you found on StackOverflow. If you go this route find a course that is part of the MS curriculum, rather than from an independent training company. I have done both and found that the textbooks and course material is a lot higher quality coming directly from the source. Hopefully your supervisor can support you in this manner regarding your career development
It seems like someone has already done that. http://www.codeproject.com/Articles/17031/A-Network-Sniffer-in-C I'll see if I can put my own spin on it though, but it's not a high priority tutorial for me.
Visual Studio 2015 is RTM now so you should try upgrading that to Update 2 first I think - no reason to still be using the preview.
I've only been developing professionally for a few years now (since I graduated college), so you've been at this for longer than I. Thus, I wouldn't presume to give you actual advice. I will say, however - they way you use the word 'hacker' is probably not quite what most people imagine when they see the word. So, just be careful - if anyone (younger people in particular) give you a strange look upon describing yourself as a 'hacker', that's probably why.
I did the same thing as you, and came from the same position. Now I work as a lead dev for a large tech company. Build a toolkit for your tech floor and other tools that may help optimize workflow. As a supervisor, I'm sure that you can come up with several processes that could be made much simpler. Just practice, start by building a temp file cleaner or something else easy, then work your way towards more tools from there. Also, it REALLY helps to have someone that you can ping quickly to get answers. A mentor in office would be the best case scenario. PM me if you want more specific help, I'd be happy to share what I can. 
[There are documents with full examples](https://msdn.microsoft.com/en-us/library/system.windows.forms.picturebox.image\(v=vs.110\).aspx) [for those who google such things.](https://msdn.microsoft.com/en-us/library/system.windows.forms.picturebox\(v=vs.110\).aspx) You could also do: pictureBox.Image = Image.FromFile(@"imageName.png"); rather than doing what you're doing up there. Little more inline. [You can view usage of the Image.FromFile method here](https://msdn.microsoft.com/en-us/library/stf701f5\(v=vs.110\).aspx) My suggestion is the Image.FromFile, which it looks like you're using. NullReference isn't one of it's native exceptions so you have to debug what the null reference refers to. Try the one line method I posted above, rather than making an Image object and assigning it like you are.
Removed: Rule 4. It's already been answered, but this is an example of a post that is a little too basic and a little too easy to figure out yourself with a bit of effort and self-learning. If after doing that you still had a question about a specific aspect, I think that's OK to ask. But as it stands now, it just shows that one didn't put _any_ effort in whatsoever.
Its the entry point into the program. Its automatically called at start up
The `Main` method is the entry point into your application, it's a special case that gets executed when the program starts. Other methods are only executed when they are called (except static constructors and arguably field initializers I suppose). The order in which methods appear in the code is irrelevant.
So you have a list of numbers all as strings: List&lt;string&gt; s = new List&lt;string&gt;{"1","2","3"}; //to 50 then to filter out the ones that are the number 30 or higher: List&lt;string&gt; over30 = s.FindAll(x =&gt; int.Parse(x) &gt;= 30); This will give you a new list with only the numbers 30 or above I hope that's what you're asking because I'm not too sure what you mean by &gt; turn each of the items into the numbers 30-50
Just to expand on this, you can set what the entry point is in the project properties in Visual Studio (or as an argument provided to the compiler). EDIT: Here's some info on MSDN about the Main method in a C# program: https://msdn.microsoft.com/en-us/library/acy3edy3.aspx
Visual Studio 15 != Visual Studio 2015 https://blogs.msdn.microsoft.com/visualstudio/2016/05/10/visual-studio-15-preview-2/
If I'm understanding you: you want to take a list&lt;string&gt; of the strings 1 to 50. I.e. s[0] = "1"; s[1] = "2"; //... s[48] = "49"; s[49] = "50"; and you want to turn it into s[0] = "30"; s[49] = "80"? So you can do a for loop but I'm not following your code as that will take the 20 letters after the 29th letter in the string (without any checks for length so well definitely throw errors. Correctly is for(int i = 0; i &lt; s.Count; i++) { try { s[i] = (Convert.ToInt32(s[i]) + 30).ToString(); } catch {} } OR you can use Linq: try { s = s.Select(x =&gt; ( (Convert.ToInt32(x) + 30).ToString()).ToList(); } catch {} The first will attempt each entry and will keep going if there is an error. The second will error out if there is any error at all. 
No, he's using [Visual Studio 15](https://www.visualstudio.com/en-us/downloads/visual-studio-next-downloads-vs.aspx) (What will become Visual Studio 2016 or Visual Studio 2017), not Visual studio 2015. Don't ask, blame Microsoft for the confusing naming.
Well, since you already have a Pluralsight account... https://app.pluralsight.com/paths/skill/csharp
To be clear, there can only be *one* entry point. The exact requirements from the [MSDN](https://msdn.microsoft.com/en-us/library/acy3edy3.aspx): &gt;- The Main method is the entry point of an .exe program; it is where the program control starts and ends. &gt;- Main is declared inside a class or struct. Main must be static and it should not be public. (In the earlier example, it receives the default access of private.) The enclosing class or struct is not required to be static. &gt;- Main can either have a void or int return type. &gt;- The Main method can be declared with or without a string[] parameter that contains command-line arguments. When using Visual Studio to create Windows Forms applications, you can add the parameter manually or else use the Environment class to obtain the command-line arguments. Parameters are read as zero-indexed command-line arguments. Unlike C and C++, the name of the program is not treated as the first command-line argument.
I've seen a few issues over on github about Roslyn and/or MsBuild holding on to references to the built files longer than they should; perhaps the issues you are having are reported bugs? I'm assuming you are doing something in asp.net core. The tooling is known to have a few issues at the moment.
It's hard to tell without seeing how you are doing it but my first impression is that you aren't handling the array. Check out this link: http://stackoverflow.com/questions/24757179/parse-json-array-objects-using-newtonsoft-json Hope it helps...
&gt;The path seems like an array within an array with no name so I'm not sure how to model my classes to map those. Well, yeah, array elements have no name, and arrays can contain any JSON values including other arrays. It's an array containing an array containing arrays containing doubles. You can map this to a `List&lt;List&lt;List&lt;double&gt;&gt;&gt;`, though for working with it it's probably better to turn those into specialized `Point` and possibly `Path` classes.
Thank you, that is exactly what I was looking for!!!
Thanks to Everyone for your suggestions. I have added a good half a dozen sites to my education shortcuts and [Kminardo!](https://www.reddit.com/user/Kminardo) has pointed me to exactly what I was looking for at a site I already subscribe to. Pluralsight needs to make their learning paths more discoverable I think (That or I am blind)
I've updated what I'm trying to do. Hopefully it's more clear. 
 s.Select(x =&gt; x.SubString(29, 20));
So, yeah. The alternative is that last snip of code I gave you: &gt; s = s.Select(x =&gt; x.Substring(29, 20)).ToList(); which could also be written s = (from x in s select x.Substring(29, 20)).ToList(); and is more-or-less equivalent to var tmp = new List&lt;string&gt;(); foreach (var x in s) { tmp.Add(x.Substring(29,20)); } s = tmp; What you've already got is probably about as efficient as it's going to get, but you may find that the alternatives offer greater readability or less chance of errors.
Thanks Canthros. I'm going for greater readability here. The first one you list should be enough for me. 
You can use a tool like this site to autogenerate a data model from the JSON string: http://json2csharp.com/
&gt; you might actually be pleasantly surprised about how well your abilities stack up against those of a freshly graduated CS major. Your experience is probably more valuable than you think. I'd like to second this statement. The more I meet fresh CS majors the more I notice they don't actually have a lot of the skills I have being in the industry for 8 years, they just have a degree that potential employers can use as some metric for their level of skill. To be fair 8 years is a long time, but a lot of them have no idea how to do things that I would expect a computer nerd high school kid to know. I never went to college, and didn't graduate high school. It's actually quite irksome. :P
Self-Educated Programmer might be nicer on the resume/cv? :) 
Thanks!
Really you should be learning ASP.NET MVC 5 (or even ASP.NET Core) and a front end framework like Angular or React. ASP.NET, and I think we are talking about web forms here, is basically outdated. But there is still value in learning it, as there are many sites out there still running on it. If you specifically want to learn webforms, there are plenty of free resources out there to take you through it. Or maybe you simply mean .NET framework? In practice, that's essentially saying you want to learn C#, and that's where you should start. I really hate Microsoft's naming conventions.
Asp.net is outdated, does that just mean the older ones? Is also.net core the new one that people should be learning ? I ask this as I'm starting some asp.net and wanted to make sure I spend my time wisely.
This is the kind of advice I was looking for. Thank you. My C#.NET abilities far supersede my ASP ones. I was expecting an answer like ASP.NET MVC 5, or ASP.NET Web Services (to be consumed in the front-end with Angular or React). Thank you for your response.
ASP.NET is like a codeword for "Microsoft technology websites" and in a way .NET framework is codeword for "Microsoft technology platform" They have a number of different tools you can use to make a website. ASP was the first, and I think it was VB, I never really used it. ASP.NET came along with webforms, which is that stuff with postbacks and datagrids and whatnot. That is still in use, but getting dated. Then there was ASP.NET MVC which uses razor templates and API controllers and stuff. It's good to know. ASP.NET Core is like a rewritten .NET framework, and will be integrated into MVC 6. You will want to learn either ASP.NET MVC 5 or MVC 6 at this point, and that should include a healthy amount of C# which is very good to know. But front end frameworks seem to be where the action is right now. Because they are all using the same underlying language, Javascript, they are more interchangeable for use with different tasks (from a corporate perspective) than different back end technologies. You can host React or Angular apps from MVC or from PHP, or from Java. I personally like a C# backend, but most of what I do at work now is javascript, CSS, and HTML.
https://www.manning.com/books/the-art-of-unit-testing-second-edition I really like this one. It's not a huge tome, so it doesn't take that long to get through, and the information is excellent.
But as Roy mentions in the book hisself, the book is not about TDD, but about unit testing. Of course the ability of knowing how to write unit test a a big building block of TDD, but it is not the same.
Ah, got it working (Google is normally not my friend :D) &gt; static public dynamic GetProperties(this myEnym input) { &gt; if(input&lt;=100) return myClass1; &gt; else return myClass2; &gt; } And when calling the GetProperties() extension I need to cast it to the right class first. Working in the test already on my code ;)
I know I could, but in this particular case the classes that I'm using are completely different. The only thing they have in common is that the enum value is used int he list of an other class (and that's why I need to get their properties). The inheritance of classes I've used elsewhere in the code where one class is somewhat an 'expansion' on an other one and in certain cases I just need the basic properties and then I just cast the inherited class down to the parent.
If you are going to cast the result then you could use object instead of dynamic. Dynamic is usually used when you want to use the members of the result directly without having to cast. Here is some info on the difference between dynamic and object. https://blogs.msdn.microsoft.com/csharpfaq/2010/01/25/what-is-the-difference-between-dynamic-and-object-keywords/
[removed]
Create another table of purchases that link to the Batch. Instead of storing the quantity, you can calculate it from the number of purchases for a given Batch.
"Just my code" is currently enabled.
Your situation is a little unclear to me because you are using myClass1 and myClass2 as both class names and variable names. I am going to assume that the class names are MyClass1 and MyClass2 and the variable names are myClass1 and myClass2. It sounds like you are doing something like this MyClass myClass = myEnym.GetProperties(); This fails because the return value is type object and not type MyClass. You could get rid of the error by using this MyClass myClass = (MyClass)myEnym.GetProperties(); but I don't know if this is what you want to accomplish. It will cause a run-time error if the return value cannot be converted to type MyClass. You might want to do something like this instead object myObject = myEnym.GetProperties(); if (myObject is MyClass1) { MyClass1 myClass1 = (MyClass1)myObject; // Do something with myClass1 } else if (myObject is MyClass2) { MyClass2 myClass2 = (MyClass2)myObject; // Do something with myClass2 } 
&gt; Note that this is probably very bad code. Ideally MyClass1 and MyClass2 would have the same base class or share an interface. That way you could use something like this I wish I could make it like that, but sadly it's not the case... Let me show the 2 classes I'm using: public class d20OccupationProperties { private int myMinimumAge, myNumberOfSkills, myNumberOfFeats=0, myReputationBonus=0, myWealthBonus; private List&lt;d20CharacterSkills&gt; myOccupationSkills = new List&lt;d20CharacterSkills&gt;(); private List&lt;d20CharacterFeats&gt; myOccupationFeats = new List&lt;d20CharacterFeats&gt;(); public int MinimumAge { get { return myMinimumAge; } set { myMinimumAge=value; } } public int NumberOfSkills { get { return myNumberOfSkills; } set { myNumberOfSkills=value; } } public List&lt;d20CharacterSkills&gt; OccupationSkills { get { return myOccupationSkills; } set { myOccupationSkills=value; } } public int NumberOfFeats { get { return myNumberOfFeats; } set { myNumberOfFeats=value; } } public List&lt;d20CharacterFeats&gt; OccupationFeats { get { return myOccupationFeats; } set { myOccupationFeats=value; } } public int ReputationBonus { get { return myReputationBonus; } set { myReputationBonus=value; } } public int WealthBonus { get { return myWealthBonus; } set { myWealthBonus=value; } } } and public class d20ClassProperties { private d20Ability myAbility=d20Ability.NONE; private string myHitDie; private int myActionPoints, mySkillPointsPerLevel, myBonusFeatLevels; private List&lt;d20CharacterSkills&gt; myClassSkills = new List&lt;d20CharacterSkills&gt;(); private List&lt;d20ClassFeats&gt; myClassFeats=new List&lt;d20ClassFeats&gt;(); private d20Quality mySaveFortitude, mySaveReflex, mySaveWill, myBaseAttack; private byte[] myDefenseBonus = new byte[10]; private byte[] myReputationBonus = new byte[10]; private List&lt;d20TalentTree&gt; myTalentTree = new List&lt;d20TalentTree&gt;(); public d20Ability Ability { get { return myAbility; } set { myAbility=value; } } public string HitDie { get { return myHitDie; } set { myHitDie=value; } } public int ActionPoints { get { return myActionPoints; } set { myActionPoints=value; } } public int SkillPointsPerLevel { get { return mySkillPointsPerLevel; } set { mySkillPointsPerLevel=value; } } public List&lt;d20CharacterSkills&gt; ClassSkills { get { return myClassSkills; } set { myClassSkills=value; } } public d20Quality BaseAttackBonus { get { return myBaseAttack; } set {myBaseAttack=value; } } public d20Quality SaveFortitude { get { return mySaveFortitude; } set { mySaveFortitude=value; } } public d20Quality SaveReflex { get { return mySaveReflex; } set { mySaveReflex=value; } } public d20Quality SaveWill { get { return mySaveWill; } set { mySaveWill=value; } } public int BonusFeatLevels { get { return myBonusFeatLevels; } set { myBonusFeatLevels=value; } } public List&lt;d20ClassFeats&gt; ClassFeats { get { return myClassFeats; } set { myClassFeats=value; } } public List&lt;d20TalentTree&gt; ClassTalentTree { get { return myTalentTree; } set { myTalentTree=value; } } public byte[] DefenseBonus { get { return myDefenseBonus; } set { myDefenseBonus=value; } } public byte[] ReputationBonus { get { return myReputationBonus; } set { myReputationBonus=value; } } } ...yeah I'm coding the d20 Modern RPG system... To some extend in the game the occupation (being an optional rule) is a character class much like the basic class is (advanced classes are inherited from basic classes BTW) with the exception that you can have only 1 and they do not gain XP. With Occupations being optional I can't include these into the character data (yet an other class I'm using, one of many), but instead I've dropped them in the list where the character class also resides (characters can get multiple classes through the game). Yet the problem here with the 2 of them having a different C# class definition and here and there the need to get the properties of the actual (inherited) character class/occupation to determine a lot of rules surrounding them.
I replaced the message you replied to because I had gotten confused about the direction of the error. Something like this from my (new) message might be what you want. object myObject = myEnym.GetProperties(); if (myObject is MyClass1) { MyClass1 myClass1 = (MyClass1)myObject; // Do something with myClass1 } else if (myObject is MyClass2) { MyClass2 myClass2 = (MyClass2)myObject; // Do something with myClass2 }
You should use `Task.Run` instead of `Task.Factory.StartNew`. The latter is older API than should not be used unless you have some pretty specific use cases in mind. You should in general always return tasks that are already started. It's not good practice to return unstarted tasks that you then start.
A few points 1. Don't prefix your class names with "d20"; use namespaces. It also doesn't comply with CamelCasingStandards. 2. All your properties can be converted to auto-properties (or fields) avoiding tons of boiler plate code. `public int WealthBonus { get; set; }` etc. 3. (minor) Avoid arrays. Use other data structures (lists, collections) instead. 
It sounds like a violation of the Single Responsibility Principal. Read up on it and refactor. 
Did I miss the link you posted? The one that was about TDD specifically and therefore a better option? Or were you just being contrary? OP is looking to learn C# and TDD. This book goes a long way towards achieving that goal. 
http://storyteller.github.io/
If you're using two different classes to store different categories of property, the problem may be that your data modeling is wrong. You might be able to solve this by splitting each distinct property into a separate instance of a common class, and store the category classification as a member of the instance: public class Property { public bool IsPrimaryCategory { get; set; } public string Name { get; set; } public object Value { get; set; } } This produces some messiness with the property values, but could be disposed of by subclassing and safe casting. public class DictionaryProperty : Property { public new Dictionary&lt;string, string&gt; Value { get { return base.Value as Dictionary&lt;string, string&gt;; } set { base.Value = value; } } } var dictProp = prop as DictionaryProperty; if (dictProp == null) { /* handle error/alternate code path */ } // do things with dictionary values foreach (var key in dictProp.Value.Keys) { // etc Having to do that much type-sniffing is less than ideal, but it may be preferable to returning raw objects. Depending on how your system works, it *may* even be sensible to derive separate classes for each property name, so that (based on your code, below) you have something like public abstract class PropertyBase { public bool IsClassProperty { get; private set; } public object Value { get; } protected PropertyBase(bool isClassProp) { IsClassProperty = isClassProp; } } public abstract class Property&lt;T&gt; : PropertyBase { public new T Value { get { return (T) base.Value; } set { base.Value = value; } } } public class AbilityProperty : Property&lt;d20Ability&gt; { public AbilityProperty(d20Ability ability) : base(true) { Value = ability; } } public class OccupationSkillsProperty : Property&lt;List&lt;d20CharacterSkills&gt;&gt; { public OccupationSkillsProperty(IEnumerable&lt;d20CharacterSkills&gt; skills) : base(false) { Value = skills.ToList(); } } This is going to create a *lot* of classes, which may make for a monstrously large data model, but may be sensible if each of them has a different set of constraints, validations, etc.
Oh, good to know
I've thought a lot about how to implement the Occupations when I started on them, and what I'm using now looks like the best way to implement it. It's sad that both Occupation and Basic Class are a character class in some sort, but that their prerequisites and specifications differ too much, while Advanced Class is almost the same as Basic Class aside from missing 1 field and having a couple of prerequisites. The Advanced Class therefor is inherited from Basic Class. I will take a 2nd look to the major differences between Occupation and Basic Class tomorrow and hope I can find some way to make Occupation an inheritance of Basic Class as well. If I could, then the problem of my return for GetProperties() might become extremely easy all of a sudden. I fear though that it's practically impossible though...
Glad I could help :) A while back pluralsight was discussing integrating the learning paths directly into their class pages (the one I linked is just a blog post) but that they had to focus on the redesign first. Now that the redesign is out (and has been for a while) hopefully they'll get around to it. I think the learning paths are excellent.
No, I've definitely heard that term elsewhere. It's also the official name for the operator in [Groovy](http://docs.groovy-lang.org/latest/html/documentation/index.html#_elvis_operator).
I agree. I think I've referred to it as "null attribute check" or something similar...
In general I think that you should avoid null checks by making sure that there aren't nulls around in most of your data. However, often the ship of null has already sailed by the time you get there and you're stuck dealing with an API that is chock full of null return values (and property values). In those cases, `?.` can simplify your job considerably. I find that `?.` is extremely useful when dealing with object representations of JSON objects, because you constantly need to handle the case where a value is missing. It's very nice to be able to ~~null-coalesce~~ [edit: null-propagate] a whole chain of properties (e.g. `myAppointment?.Doctor?.Address?.ZipCode`), and then just check the final result to see if it's null. 
Clicked through plenty of classes - did not find a single documentation.
Yes, I did, and it gives a brief introduction and example. But honestly, if a library is not well documented, then I'll never use it. I spent too much time already figuring out stuff that could easily have been resolved with proper documentation. Documentation should not be an addition or an afterthought - it should be a core part. And next: There is not a single automated test.
Thank you, thank you, thank you. I've used AngularJS, EntityFramework, and Bootstrap before, so I was already hoping to build on that existing knowledge. This stack looks good to me, and I think it will let me focus on the area I really need to play catch-up in (ASP.NET). I really appreciate the response.
I'm not that experienced programmer too, but I would recommend the online book [Game Programming Patterns](http://gameprogrammingpatterns.com), though I'm pretty sure you already read parts of it. Since it's more related to Unity3D way of do things, I would post on /r/gamedev too. And remember that things don't need to be perfect (:
Now I have no idea if this will work for you but Microsoft put out a great library for working with Observable and Collections called Reactive Extensions. It's worth a look https://msdn.microsoft.com/en-ca/data/gg577609 
&gt; That's a problem of its own and a consequence of some poor descisions. I take it that you've never had to process JSON or XML data that as materialized into an object graph. 
Maybe you should edit https://en.wikipedia.org/wiki/Elvis_operator#C.23 and reach out to the blog author as well. Or just tell them to stop calling it that.
Seems to me that you may not be following the principles of the ECS architecture closely enough. A Component should be purely data, and ideally not do anything but hold that data. An Entity should be a container for Components, thus being an object of composited data. A System should operate on Entities that qualify for its behavior, based on the Components of said Entities. With that in mind, the implementations of ECS that I have done execute Systems procedurally, not as the result of events. These were done in an Unity Update function (I noticed the MonoBehaviour in your code, so it is likely you are using Unity). When a System was executed, it would find all Entities that met its conditions and perform its operations upon their data. Applying this to your specific example, you could have a data-less Component (known as a tag) called 'Selected' that is added to an Entity that has become selected. The tag is removed when the Entity is un-selected. Your System(s) that need selected Entities could collect these Entities upon each execution, perhaps through an application function such as Entity.GetEntitiesWithComponent&lt;Selected&gt;(), where Selected is the Type parameter of your Selected Component. Once collected, the System(s) perform their operations on the data of those Entities. You can optimize the retrieval by organizing Entities by their Components in a dictionary too. Hope that helps :)
Thanks for the tip! I have no particular goal regarding my effort to embed a cmd into my app.
I generally agree, I think whether this operator's a blessing or a smell varies wildly based on your project and dependencies. I like to write code that doesn't use null. I follow rules like "a method should do what it says or throw". Sometimes, there's a domain reason for null. On large-scale projects, it can make sense to adopt patterns like Null Object to deal with this. But when I'm writing a quick log file parser for CSV or JSON, and not every property is fully populated, .? is a godsend. I'm interested in finishing my parser fast, because it's a means to an end. The thing where I'm worried about software engineering is the thing I'm parsing the logs to examine. There's some other patterns where this operator comes in handy. For example, I've got a view that hosts many subviews. Some of those subviews have special layout logic. I represent this via interfaces. Before C#6, that meant a lot of: var specialLayout = _subview as specialLayout; if (specialLayout != null) { specialLayout.Layout(); } Now, I write: (_subview as specialLayout)?.Layout(); Or, more common, there's the event handler pattern: protected void OnSomeEvent(EventArgs e) { var handler = SomeEvent; if (handler != null) { handler(this, e); } } I saw some people go so far as to inline-initialize events with do-nothing handlers so they could skip this null check. now that questionable practice can be replaced with this syntax sugar: protected void OnSomeEvent(EventArgs e) { SomeEvent?.Invoke(this, e); } I don't think any project should shy away from uses like that. But if you're just trying to get around Law of Demeter, you should ask yourself if this is a burden you really want to take on. 
Well, that's not what I'm contesting. Not that part of the post at least. They do get it right in the end but their justification in the overview section sounds wrong to me. &gt; Instead of checking if a received object is null and returning, the code can be simplified using ?. like this. Which is neither simplification nor readability improvement but some different code altogether.
WinForms can be a little tricky when it comes to managing multiple forms. One trick that I started using was relying on BeginInvoke to queue Asynchronous tasks so that the GUI can complete whatever updates were pending first, before making new changes: private void button1_Click(object sender, EventArgs e) { DialogResult res = MessageBox.Show( "bla blah bla. new form?", "new form?", MessageBoxButtons.YesNo, MessageBoxIcon.Question); if (res == DialogResult.Yes) { this.Hide(); // Create Form Asynchonously, allowing the GUI to complete any pending tasks first. this.BeginInvoke(new Action(CreateNewForm)); } } private void CreateNewForm() { var c = new Form2(); c.Show(); c.Left = Left; c.Top = Top; c.Size = Size; } There may be a more "correct" way to do this, but this has worked well for me. Keep in mind the current form can't unload if it holds a reference to the new form. The example you gave, and the update that I posted, will only hide the old form, but it is still active. If that is what you are trying to do, then you will want to have some other static entity hold the new form reference, so that you can call OldForm.Dispose() to unload it. If you try to call OldForm.Hide() and then OldForm.Dispose() in the above examples, both forms will dispose and the program will terminate since all form references will go out of scope. 
Imagine if every method was called. It would be mental how would it know what arguments to pass
Strategy + Decorator seems like a good solution to managing weapon damage, actually. Sword, say, becomes a basic attack strategy, which could be decorated with things like Fiery, Keen, etc which would modify the type and/or amount of damage caused.
Exactly! There is a nice site explaining most of the design patterns using RPG elements - the code is for Java, though (still it should be relatively easy to understand for a C# programmer): http://java-design-patterns.com/
That's because a lot just get the degree and some definitely do not challenge their students enough, too much hand holding.
Oh I know, I was just trying to figure out how one was called automatically, now I know.
As others have said. Missing Linq var result = int.Parse(new string(numberToFlip.ToString().Reverse().ToArray())); 
A few things from what I can see. For reference I'll post what I was able to make: using System.Linq; static int flip(int arg) { return int.Parse(string.Join("", arg.ToString().Reverse())); } Lets look at this from inner most going out, starting with the second argument of string.Join. * First, make the arg a string. * Second take that result and call the extension method Enumerable.Reverse. This works because string is IEnumerable&lt;char&gt;. * Third, now join the reversed characters together and make it a string using string.join passing "" as the separator (aka empty string separator). * Finally, parse the result of the above and return its result as the result of our function. Your code is definitely more portable between versions of C#, however most systems today are able to run at least C# 3 code which introduces extension methods. 
Alright, I'll bite....... why? 
I'm not surprised. Mutable structs are incredibly hard to get right and I've never heard of a serialization framework that even tries. I have to wonder why you are using structs in the first place. `Rental` is well past the 16-byte recommended size, so performance is probably going to suck compared to using normal classes. And the use of fields instead of properties, which I assume is because you are using mutable structs, will prevent you from using many common frameworks. 
Hopefully this will get you somewhere.. (been a long day) you have: Using statements/import statements Class names (program/console) and types. What their names are going to be in your editor options will vary from editor to editor i would think but hopefully the above will help you figure it out :).
http://studiostyl.es/schemes/create That link will open a sample class. Click on any text, and you'll see what the name of that element is. You can also download ready made themes from that site too. A while ago I painstakingly changed all my colours without knowing what was what. I eventually ended up with a great colour scheme, so it was worth it.
&gt;Serialization will fail on the rental struct. Fails in what way? Works fine for me with the `XmlSerializer`. I don't see why either of those need or even should be a struct, though.
You'll probably have better luck in iOS forums. Most of the Xamarin APIs are direct passthroughs to native code, so you'll generally have good luck just pretending you were using the native libraries.
Same here. Following code works fine in LINQPad: void Main() { var hardware = new Hardware(4, "asdf", "zxcv"); var rental = new Rental(hardware, "rentee", DateTime.Now); XmlSerializer serializer = new XmlSerializer(typeof(Rental)); StringWriter writer = new StringWriter(); serializer.Serialize(writer, rental); var xml = writer.ToString().Dump(); StringReader reader = new StringReader(xml); var deserializedRental = (Rental)serializer.Deserialize(reader); deserializedRental.Dump(); } [XmlRoot("hardware")] public struct Hardware { [XmlElement("serial")] public long id; [XmlElement("name")] public string name; [XmlElement("description")] public string desc; public Hardware(long id, string name, string desc) { this.id = id; this.name = name; this.desc = desc; } public override string ToString() { return String.Format("{0},{1},{2}", id, name, desc); } } [XmlRoot("rental")] public struct Rental { [XmlElement("hardware")] public Hardware hw; [XmlElement("rentee")] public string rentee; [XmlElement("date")] public DateTime date; [XmlElement("returned")] public bool returned; public Rental(Hardware hw, string rentee, DateTime date) { this.hw = hw; this.rentee = rentee; this.date = date; this.returned = false; } public override string ToString() { return String.Format("{0},{1},{2},{3}", hw.id, rentee, date.ToString("yyyy/MM/dd"), (returned ? "Yes" : "No")); } } (`.Dump()` methods are just text output methods for LINQPad) /u/AttackOfTheThumbs, you need to give us the exact exception message/stacktrace (including inner exceptions), or at least much more context and/or actual code you are using.
Good luck :)
[removed]
I see. My mistake. I interpreted "hides away" as "stashes", much like a proactive squirrel would do before winter.
&gt; I've only had a cursory look, but it looks like it would be mostly solved by casting the result in ConstructObject() after the call to PopulateComplexObject instead of before. Temporal coupling. Just food for thought.
Different strokes for different folks, but if you're going to work in a team you're probably just going to confuse the rest of the team if your colour scheme is wildly different from the default. 
A constructor for every class in the inheritance chain _must_ be called. When you have: public class BaseClass { public BaseClass() { Console.WriteLine("BaseClass constructor called!"); } } public class DerivedClass : BaseClass { public DerivedClass() { Console.WriteLine("DerivedClass constructor called!"); } } var myObj = new DerivedClass(); //BaseClass constructor called! //DerivedClass constructor called Even though you didn't explicitly specify it, the `DerivedClass` constructor is making a call to the `BaseClass` constructor. The equivalent code is: public class DerivedClass : BaseClass { public DerivedClass() : base() { Console.WriteLine("DerivedClass constructor called!"); } } EDIT: Reddit is bugging out on my submission here, so I had to split it up into multiple posts. ¯\\\_(ツ)_/¯
Now, in your base `Pharmaceutical` class, since you provided your own parameterized constructor, the default parameterless constructor is no longer automatically included. Your signature however on the `PrescriptionMedication` constructor though implicitly specifies a call to a parameterless base class constructor. Remember this: public PrescriptionMedication(Guid patientId, string prescriberComments, IPharmaceutical pharmaceutical) { this._id = pharmaceutical.Id; this._nonProprietaryname = pharmaceutical.NonProprietaryName; this._patientId = patientId; this._prescriberComments = prescriberComments; } is the same as: public PrescriptionMedication(Guid patientId, string prescriberComments, IPharmaceutical pharmaceutical) : base() { this._id = pharmaceutical.Id; this._nonProprietaryname = pharmaceutical.NonProprietaryName; this._patientId = patientId; this._prescriberComments = prescriberComments; } 
More information on the `base` calling here: https://msdn.microsoft.com/en-us/library/hfw7t1ce.aspx More information on the use of constructors with derived/base classes (see section "Selecting Constructors"): https://msdn.microsoft.com/en-us/library/ms228387(v=vs.90).aspx
It sounds like you used to be able to create a Pharmaceutical object with no parameters, then you added a constructor that does take parameters and the compiler is freaking out. If that's the case, this is happening because when there are no constructors defined, there is actually still a hidden empty constructor. When you create a constructor, the hidden empty constructor goes away and you can no longer create a Pharmaceutical object without using the constructor(s) you created. You will now need to explicitly define an empty constructor to make up for this. The reason for this is because sometimes you will want to force the caller to supply parameters and not have the ability to use the blank constructor anymore.
How can you populate them earlier than in the constructor?
Thank you!
Project Euler
Instead of creating an array, `String.Concat(intstring.Reverse())` is a good way to turn an `IEnumerable&lt;char&gt;` into a string.
I've edited the OP. Things are the way they are because of what I know.
Have you looked in to the DownloadFileCompleted event to launch your message box? You can disable controls and what not and then re-enable them in that event. Note: I don't have any experience with the web client, but it sounds similar to a backgroundworker in terms of events
You must've seen it before I posted it.
It would still continue the program after the download async In the real program, I need to install the Downloaded exe, so need to wait for download finish
Jesus, how about the actual exception messages and stack traces? You're asking for help, why do you need to be prodded for every little bit of information relevant to helping you? But if it's an `IOException` it probably has nothing to do with structs or XML serialization, it just can't write to the file for whatever reason. Don't know about the `InvalidOperationException` because my crystal ball is broken.
Familiar with async/await? You can't have an async constructor unfortunately, but there are other ways to do it. You could also use ContinueWith. webClient.DownloadFileAsync(URL, localFile) .ContinueWith(t =&gt; MessageBox.Show("Download completed.");
I second your take on it. Serializing to a file (I assume), probably failing due to some I/O issue. /u/AttackOfTheThumbs, likely the serialization itself is fine, it's your stream writing that's the problem. To confirm, try writing your own content to the stream. Or better yet, serialize to a plain string first ([see my comment on how to do this](https://www.reddit.com/r/csharp/comments/4p6wyx/xmlserialize_a_struct_that_contains_a_struct/d4illug)), _then_ write that string data to your file. I'll bet the first exception happens because of _some_ I/O exception (like security, file locked, opened with the wrong read/write privileges, or whatever random thing), then the subsequent attempts are failing because the stream is closed/disposed/borked due to the previous failed write. EDIT: /u/AttackOfTheThumbs: to give us the full exception information, just `catch` the exception then write out the result of `exception.ToString()`. That will give you the full message, stack trace, and information about all inner exceptions. Then copy/paste it _verbatim_ for us here.
Thanks this was really helpful. You make good points about the components. One thing I've learnt is from looking at other implementations is it seems to be okay to have a component with functionality (like this object has been clicked) as long as it doesn't have any logic. I'm sure this isn't pure ECS but its pretty close. I'm not sure I like this procedural systems idea for my purposes though. So to check if an object has been clicked, I would have to have all my relevant systems call GetComponent&lt;Clickable&gt;() and then check each and every one, every frame? Since Unity has built in message sending for this kind of thing I assumed it would be more efficient. I think I'm going to have a look at having a mediator class for each type of event I want to send. That way the components will know which one to publish to, and the systems will know what to subscribe to. 
Secret answer 5: it probably doesn't matter, and who cares? And stack/heap questions in C# are (mostly) pointless. (EDIT: Personally, I find it's far more worthwhile people properly understand value type's copy behaviour and other nuances rather than this stack/heap nonsense which almost always doesn't matter, and it certainly doesn't matter to people learning about value types early on.) The correct answers (for those who are wondering since the website doesn't tell you even when you guess wrong) are: * The int member c.mi, and all items of List&lt; S &gt; ls ( ls[0] and ls[1] ) are allocated on managed heap * s1 and s2 are allocated on c.Foo's stack frame, whereas ls[0] and ls[1] are allocated on managed heap When I answered those, and scrolled down further, I was disappointed to find out that the blog entry didn't explain _why_ those answers were the correct ones. For those wanting a bit more understanding about C# use of the stack and heap, and when and why they're used, Eric Lippert wrote a couple good blog entries on the subject: * [The Stack Is An Implementation Detail](https://blogs.msdn.microsoft.com/ericlippert/2009/04/27/the-stack-is-an-implementation-detail-part-one/) * [The Truth About Value Types](https://blogs.msdn.microsoft.com/ericlippert/2010/09/30/the-truth-about-value-types/)
&gt;However, GetField(einfo.Name) returns null because there are no fields with that name - there are only events. An event is really just a pair of automatically implemented add and remove methods backed by a field, similar to properties. `GetField()` will only return public members by default, you need to specify `BindingFlags.NonPublic | BindingFlags.Static` to get the private field. Also, you don't need to invoke all the delegates individually, just use `eventDelegate.DynamicInvoke()` and it'll automatically invoke every delegate in its invocation list. 
That did it! Thank you very much! &gt; An event is really just a pair of automatically implemented add and remove methods backed by a field, similar to properties. I did not know that, and it makes a lot of sense. That explains the issues I was having.
Awesome site! This should be super handy for both novices and experienced devs. 
Thank you all for commenting on this problem. I've taken another (and fresh) look at the project's [data flowchart](http://i1274.photobucket.com/albums/y436/Reizla/Unity3D%20development/d20SRD_Modern_zps9joche4r.png) now that my headache is over, and I think it indeed is best if I'd take out the occupations completely from the character classes list and move it directly into the *d20Character* class. Also because part of the occupation data already is stored there (the image linked is an older version of the flowchart and does not show the newly included data).
Ugh.
That page has been broken by a merge that probably shouldn't have happened. It's discussed in the talk page. No one has bothered to fix it.
Attach an event handler to the completed event, and do whatever you need to do in the event handler.
The main thing to remember here is that all classes are created with an implicit parameter less constructor. You don't have to declare it but when you say new MyObject() that's what you're calling. And when MyObject inherits from BaseObject calling my MyObjects constructor will implicitly call BaseObjects parameter less constructor. When you add a constructor the implicit parameter less one goes away until you explicitly add it to the class again. So there are two ways to solve the problem: 1. Explicitly add a parameter less constructor to the base 2. Have the object call the correct constructor in the base with the correct parameters
Also, you can use a theme builder to generate your style. I recommend [base16-builder](https://github.com/base16-builder/base16-builder). I use it personally (and I am involved in the project). 
Sorry, don't get me wrong. It is useful to understand these things if you're knee deep in some heavy optimization or a particularly complex and performance critical application. I just criticize sometimes the usefulness of focusing on _that_ aspect of value types, and how common it is to teach that aspect to people learning C# early on. I think there is a good amount of material and nuances and implications of how value types, and stack/heap memory is used. But I also think blog entries like the one here does a disservice to those nuances and implications; it misses the important parts and encourages novices to think about the (usually) unimportant things.
Both are nice: [Designing Evolvable Web APIs with ASP.NET](http://shop.oreilly.com/product/0636920026617.do) [RESTful Web APIs](http://shop.oreilly.com/product/0636920028468.do) Also this thread in [r/dotnet](https://www.reddit.com/r/dotnet/comments/4p9aii/learing_resources_for_developing_dotnet_core_rest/) could provide some info
Some of those operations can be performed implicitly, but the biggest differences are that C# doesn't have Python's array slice notation for arrays and you're less familiar with C#. The operations involved aren't dramatically different in the following implementation, they're just more implicit in the python example (I used `uint` because I'm not sure this makes sense with negative numbers): uint FlipStr(uint arg) { var strArg = arg.ToString(); // str(arg) strArg = new string(strArg.Reverse().ToArray()); // arg[::-1] return uint.Parse(strArg); // return int(arg) } Although I'd probably write that like this, instead: uint FlipStr(uint n) =&gt; uint.Parse(new string(n.ToString().Reverse().ToArray())); But, really, an arithmetic implementation is probably preferable in most situations: uint FlipInt(uint n) { var result = 0u; while (n &gt; 0) { result *= 10; result += n % 10; n /= 10; } return result; }
I've been looking pretty closely at decorators today. They seem most useful when you have a base and things that attach to it. So a unit could be *decorated* with a shield, or a sword, or both. My first question is what would be the advantage over an object with components of Unit, Sword, Shield? One that I can see is it doesn't allow you to have swords without units, so it is more robust. But what if I wanted to have a store that sells swords. Would I decorate the store with it? Would weapons have to implement both UnitDecorator and StoreDecorator? Seems like components would be an advantage here. 
Ah, you might well be right. I had a colleauge who was fiddling was VS settings to set which "test scenario" in a single project file was being run - my memory was he was setting the startup function but it could easily have been the type. I still hated him doing it.
Yeah did, and it blocks the main GUI
Bearing in mind that I'm not a games programmer, I don't know if I would necessarily manage a store's inventory by decorating it with items to be sold. A store might be a component that has a list of inventory. A store decorator might add items or types of item to the store's inventory: class AbstractStore { public List&lt;ItemDescriptor&gt; GetInventory(); // sell an item: allows the store to remove the item from inventory or whatever public Item SellItem(ItemDescriptor i); } class MagicStoreDecorator : AbstractStore { private readonly List&lt;ItemDescriptor&gt; _inventory = new List&lt;ItemDescriptor&gt; { Fire.Descriptor, Ice.Descriptor, Lightning.Descriptor, Cure.Descriptor, }; private readonly AbstractStore _baseStore; public MagicStoreDecorator(AbstractStore store) { _baseStore = store; } public List&lt;Item&gt; GetInventory() { var result = _baseStore.GetInventory(); result.AddRange(_inventory); return result; } public Item SellItem(ItemDescriptor i) { if (_inventory.Contains(i)) { return CreateItemFromDescriptor(i); } return _baseStory.SellItem(i); } } class LimitedItemStoreDecorator : AbstractStore { private readonly ItemDescriptor _item; private int _amount; private readonly AbstractStore _baseStore; public MagicStoreDecorator(AbstractStore store, ItemDescriptor i, int quantity) { _baseStore = store; _item = i; _amount = quantity; } public List&lt;Item&gt; GetInventory() { var result = _baseStore.GetInventory(); if (_amount &gt; 0) { result.Add(_item); } return result; } public Item SellItem(ItemDescriptor i) { if (_item == i) { if (_amount &lt; 0) { /* handle error condition -- might be as simple as returning null */ } else { _amount--; return CreateItemFromDescriptor(i); } } return _baseStory.SellItem(i); } } But I don't think the item itself would be the decorator. Decorators are also going to be a problem if you have lots of levels of decoration possible, because the typical implementation creates a long call chain. My gut says that making items simple state objects (possibly structs) and stores a wrapper for lists of items and quantities is probably more sensible. Your mileage is likely to vary, though. I also don't know if I'd use this pattern to deal with equipping items on the character, but it probably depends a lot on the sort of game you're making.
I like these two plus the [ASP.NET Web API 2 recipes](http://www.apress.com/9781430259800) book by Filip Wojcieszyn. Especially recommend the RESTful Web API book, it's a quick read and sets you on a path of consistency for your API. I normally don't like the recipes book, but Filip is the man when it comes to Web API and it seems that anytime I ran into something that stumped me either that book or his blog got me out of that pickle.
Hi, here is an example to declare a trigger in XAML. &lt;Button.Style&gt; &lt;Style TargetType="Button"&gt; &lt;Style.Triggers&gt; &lt;Trigger Property="IsMouseOver" Value="True"&gt; &lt;Setter Property="Content" Value="Insert" /&gt; &lt;/Trigger&gt; &lt;/Style.Triggers&gt; &lt;/Style&gt; &lt;/Button.Style&gt; This comes in the Button Control. I didnt test the code.I just wrote it out of my head ,how it should work. 
Hmmm, I cant seem to get the PRIMARY group...
OK, got a method to get it working but sadly it is saying my user/pass is incorrect; Testing with ValidateCredentials Works.
Firstly, thanks a lot for the code. Always nice when people give help using examples. &gt;Decorators are also going to be a problem if you have lots of levels of decoration possible This is my main concern and the reason I never really took the decorator pattern seriously for this project. 
I'm not really understanding what you mean by compile a dll. Are you saying like you want to run a cs forms or web application? If so, I'm pretty sure you just need to get the .net environment running on linux, and then it would be no different. I've never actually worked with Mono though, just read about it. 
This is a religion thing, it really doesn't matter how you store your constants. For me: if a const is only used internally by a single class then make it a private const within that class. Global const should be in their own dedicated static class like you currently have. You can use partial classes to break them out if you find yourself having trouble navigating that file.
A common pattern I've seen is to have a constants namespace and have a Constants class for smaller project(s), or multiple classes for larger projects, grouping each constant type (e.g. a class called PropertyTypeGuids)
All the security groups to be more specific.
Got it. Yeah, you can do that by setting IsSecurityGroup=true to the "query by example" GroupPrincipal you pass into the Principal searcher. This SO post has sample code: http://stackoverflow.com/questions/7317205/active-directory-get-all-security-group 
That won't work cause I need to continue the program after, not just react once and be done with it. The program still needs to download more files and install more files
Can you give an example of some of these constants? I'm having a hard time figuring out what sort would make sense in a global scope.
This is from Microsoft on using C# on OS X. https://channel9.msdn.com/Blogs/DevRadio/DR1659 
Thank you very much, you were a great help. Now to fix the syntax errors.
I'm with you. We do something similar in our project. We have multiple constants classes that we keep in our common layer in a constants folder and name them DescriptiveNameConstants.cs
I would rather use an enum for error codes, that makes it more explicit.
If I'm getting a book, I prefer higher level books that discuss overall design and architecture because those concepts don't get outdated when a new version comes out. Then adopt my chosen tech to work with that. As such I'd like to recommend Rest In Practice: Hypermedia Systems and Architecture by Ian Robinson, Jim Webber, and Savas Parastatidis. It is excellent.
Whew! Sitting in C# language design meeting, ignore quality discussions about language features you care about, and instead took this quiz. Nailed it! 
Most often it's the key names for various common configuration settings. Like connection strings, timeouts, certificate thumbprints, and etc.
I use all of those things but have never needed them available globally. That stuff can go in an internal class in the assembly that needs it, and it's only needed at the time the object graph is constructed. 
Keep in mind that you can also use the Table Search Functions as well https://msdn.microsoft.com/en-us/library/det4aw50(v=vs.110).aspx 
1.0 will be "officially released" then though. Wether you think it's actually production ready is another matter! :)
I only see 1 HTML tag/node in that page. Are you talking about the fact that the URL you linked is using frames? If so, maybe try parsing the page in the frame that you care about. Specifically, this URL: http://bcres.paragonrels.com/publink/Report.aspx?outputtype=HTML&amp;GUID=5e859125-8e98-455b-9bc9-2d1be5cbc271&amp;ListingID=262103807:0&amp;Report=Yes&amp;view=29&amp;layout_id=63 If you need to do it dynamically, maybe you'll have to use HTMLAgilityPack to parse out the frameset/frames to extract the URL you care about, then do a second query/parse on that page.
Thank you for the excellent reply. I'll give this a shot. :)
Well, it is called the kissing disease, so not very. 
And, which EF7 no longer supports.
A general rule of thumb is that everything should be in the smallest scope that makes sense for it. Along with that the smaller the scope, the smaller the name. 
sorry I am an idiot and am trying to learn C# and am probably in way over my head. Where did you get that link? Yes if I could parse that out then go to there to parse the data that would be awesome. I just don't see it within the original html stuff. Also is it possible to just get the string data from the top box where it has the price LP and SP?
test
thanks for the help, I really appreciate it. 
I can't think of a single scenario in which you need a global constants file... maybe if you're implementing a math library for fun or something and you need to keep things like pi and e around. 
&gt;I'm a very OS X programmer, but I have a use case for a small application on Windows only, using forms and some file system operations. &gt; I downloaded VS and was able to do something, but I hated every single minute of that. VS is 'a bit overkill' if you only want make a small application for Windows. Not to mention, VS is such a beast and installs so much bloatware alongside it's core features (like 2 different instances of MSSQL, SilverLight, W8.1/10 API and half a dozen VC++ libraries you most likely never use), that it's not worth the trouble for something small... I'm using the Unity engine myself and while VS is 'recommended' to use I've completely removed it from my system and instead am using the MonoDevelop editor that comes with Unity. Mono compared to VS is a lot faster in startup and use in general, and the build in help functions are very good. The only downside I've found so far about Mono is that when a project grows too much and you open too much code at once (talking about Mbs of raw code here) it does tend to crash from time to time. Not sure if that's something specific for the Unity version of Mono, or that it's Mono in general.
Actually, the GUI is limited to a fullscreen window with a single button, I guess I could do that in GTK+. Is file system supported? I thinks it's System.IO?
I have a very specific task to be done, which is a GUI application that runs in Windows, and I want to avoid using Windows to achieve that. Learning anything as big as .net core seems a too big task for me for now.
Was thinking about releasing it as open source. Just wanna clean some things up before anyone delves into my mess of thousands of lines of code I barely remember writing yknow?
.net core isn't going to give you much that you can't get from mono - right now, it's a new runtime, toolset, and project system for most developers' use cases. Also, you can reference System.Windows.Forms in a .net core project.json file.
Non-nullable reference types would be awesome! Really would of liked to hear what they have to say on immutable data types to.
This doesnt solve my issue. In the popup Windows Form, I have two textboxes user and pass. Once those are filled out, I have ONE validate button. I click on that button and it validates. It can either go OK (user and pass is correct) and goes back to the original form and continues code on the original form or go wrong and user retries (network fail, incorrect user/pass, etc.)
So I have the Windows Form popup. I enter user and pass and it validate. If I click on OK, it just goes back to the Windows Form popup. It needs to close also that Windows Form popup and go back to the original one.
&gt;Honestly mate, I don't even know how to get that shit, so chill out. It's literally the actual error message displayed when said exception appears. There can be literally thousands of reasons a given type of exception is thrown, so while the type is certainly a clue, it's generally a vague one at best. In this case, you're fortunate that the exception type tells us enough to rule things out, but often that's not the case. &gt;If it isn't painfully fucking obvious I'm a fucking noob. Then don't be a dick. Most of the people who post here are new, and folks are happy to help. We were all new once, no one judges for that. &gt; No need to be a cunt about it, just fucking chill out. Pot, kettle, etc. &gt;Anyways, I fixed it, so whatever. Despite your vague information and nasty attitude, people made a real effort to help you, even running your code themselves and giving detailed results. So I'd tell you the same thing: no need to be a jerk about it, chill out. 
Main form: Validationpoup v=new Validationpoup(); v.ShowDialog(); if (Globalc.res == DialogResult.OK) { MessageBox.Show("Correct", "", MessageBoxButtons.OK, MessageBoxIcon.Information); } else { MessageBox.Show("Incorrect", "", MessageBoxButtons.OK, MessageBoxIcon.Error); } v.Dispose(); Now onto "v". This has a textbox to fill in user and a textbox to fill pass and a button to validate it: ADMethodsAccountManagement ad = new ADMethodsAccountManagement(); if (ad.ValidateCredentials(textBoxuser.Text, textBoxpass.Text)) { MessageBox.Show("OK", "", MessageBoxButtons.OK, MessageBoxIcon.Information); Globalc.res = DialogResult.OK; Close(); } else { if ( MessageBox.Show("Wrong", "", MessageBoxButtons.RetryCancel, MessageBoxIcon.Error) == DialogResult.Cancel) { Close(); } } 
Validation is the name of the form. I create the object and use showdialog to show it a modal popup window Your code is the same one I have in the main form.
There are [records](https://github.com/dotnet/roslyn/blob/features/records/docs/features/records.md), which will make creating and using immutable types easier. They're currently planned for C# 8.0.
If you want to use WPF cross platform there is always https://github.com/AvaloniaUI/Avalonia
The runtime has been considered production ready by Microsoft since the last RC I think, meaning that they will support it in production. That said, generally the reason to wait on such things is because the conventions for a new platform tend to thrash a lot in the first year, and you don't want to have a project written in a transitionary style that was later known to be inferior.
I think the example above makes it pretty clear why the extension exist for &lt;string, object&gt; dictionary instances only. Naming 'AddItem' is a personal choice, as it accepts any object as an item to be added it makes it clear to me it is different from the normal Add method. You could of course just use something like this instead public class GenericDictionary { private Dictionary&lt;string, object&gt; _dict = new Dictionary&lt;string, object&gt;(); public void Add&lt;T&gt;(string key, T value) { _dict.Add(key, value); } public T GetValue&lt;T&gt;(string key) { return _dict[key] as T; } } If naming bothers you, then it could just be; public static void Add&lt;T&gt;(this Dictionary&lt;string, object&gt; dictionary, string key, T value) { dictionary[key] = value; } public static T Get&lt;T&gt;(this Dictionary&lt;string, object&gt; dictionary, string key) { return dictionary[key] as T; }
Ahh, I get why it's only for `Dictionary&lt;string, object&gt;` now, that makes sense. But why does the extension method exist at all? Couldn't your `Write` method just use the standard `Dictionary.Add` call and have the same behaviour? public void Write&lt;T&gt;(string section, string key, T value) { if (!_sections.ContainsKey(section)) { _sections.Add(section, new Dictionary&lt;string, object&gt;()); } _sections[section].Add(key, value); } 
It is mostly preference, but I prefer extension methods with different naming conventions and sanity checks myself. I have the same extension with a where T : class and cast check that looks like this (Add/Get value is the ext method). I suppose as-in this topic the extension is not all that valuable besides naming purposes. public class MyClass { } private Dictionary&lt;string, object&gt; _dict = new Dictionary&lt;string, object&gt;(); _dict.AddValue("Something", new MyClass()); _dict.GetValue&lt;MyClass&gt;("Something"); 
Removed: Rule 2, Rule 3. While you might be sincere in your request, this sounds suspiciously like a man-in-the-middle attack for monitoring all phone conversations and/or all internet traffic. I'm not too sure I buy the cost factor either (coming from working at a telecom). Regardless, I'm not sure if /r/csharp is the place to be asking this anyway. Also for Linux, you'll have to look into mono or .NET Core compatible libraries/methods.
Sorry, I don't have an answer for you. But maybe you can try over in /r/WPDev.
I recently upgraded from VS 2010 to VS 2015 and became very disappointed with startup. VS 2010 was really fast however 2015 is really really slow.
Learning .Net so that you could use Mono or .Net core would be the same effort. It's just two separate libraries and runtimes that accomplish the same thing. .Net core does not include a GUI framework at this point so you're right to choose Mono. 
You're already basically using the chain of responsibility pattern. To achieve the the interface you want, you can do public class ResolverCollection { private readonly IList&lt;IResolver&gt; _resolvers; public ResolverCollection(IEnumerable&lt;IResolver&gt; resolvers) { _resolvers = resolvers.ToList(); } public Uri Pass(Uri uri) { return _resolvers.FirstOrDefault(r =&gt; r.CanResolve(uri)).Resolve(uri); } } I'm not familiar with structure map, but a quick search suggests that if you have all your IResolvers registered with the container, then they will all get injected into the ResolverCollection constructor. Additional notes - your code and my implementation of it has a potential null reference exception when there's no resolver capable of handling your request. How would you deal with that? Furthermore, in the chain of responsibility pattern, you want to be able to control the order in which handlers have a chance to handle the request. You could add an Order property to your Resolver base class and then do _resolvers = resolvers.OrderBy(x =&gt; x.Order); in the ResolverCollection constructor, but that seems to put the responsibility in the wrong place. A better solution might be to define the order in the collection class: public class ResolverCollection { private readonly IList&lt;IResolver&gt; _resolvers; private readonly Dictionary&lt;Type, int&gt; _resolverOrder = new Dictionary&lt;Type, int&gt;{ {ConcreteResolver1, 2}, {ConcreteResolver2, 1}, {ConcreteResolver3, 4}}; public ResolverCollection(IEnumerable&lt;IResolver&gt; resolvers) { _resolvers = resolvers.OrderBy(x =&gt; GetOrder(x)).ToList(); } public Uri Pass(Uri uri) { return _resolvers.FirstOrDefault(r =&gt; r.CanResolve(uri)).Resolve(uri); } private int GetOrder(IResolver resolver) { if(_resolverOrder.ContainsKey(resolver.GetType())) return _resolverOrder[resolver.GetType()]; return int.MaxValue; } }
Seriously! I've used XCode as well, and it felt like garbage compared to VS.
Thank you codegork. I like your solution! Setting the order is kind of important, because not all resolvers are equally fast, so the fastest has to "win" the selection. Returning null if none can resolve the requested uri is ok, kind of a "not valid / does not exist" response. 
Thank you powlette. I like the plugin idea. Can you tell me more about your IsConvertableTo method? Seems to be a custom made extension. 
What you show in the code above, in your first code blocks OP, looks just about right. In your Main form I think you should be checking for `v.DialogResult == DialogResult.OK` instead of `Globalc.res == DialogResult.OK`. Also, in your Validationpoup form you shouldn't need to `Close();` the form, just setting `this.DialogResult = DialogResult.OK` or whatever you need to set it to should close the form and return that result. **EDIT:** Re-phrased first line to specify where I was talking about.
Potentially quite a bit, The sql databases aren't huge but I'm curious if the data inside of them might be to cumbersome for the application. Might have to scrap the search feature. 
Normally you would want to develop in something as close to the production environment as possible to shake out any oddities as early as you can. Not doing that because "I don't like VS" sounds like you're just getting ready to shoot yourself in the foot. Not to mention that Mono will always lag behind the actual framework, so you can't take advantage of new features as early
Thank you so much for putting it into emphasis for me. It's beginning to make sense given the syntax. 
The only extension installed by me was AnkhSVN. Then there's a bunch of Microsoft ones by default. You think these are what is slowing startup?
Definitely don't use the decorator pattern in the context you are describing. A unit having components like a shield, sword or both should just have a list of these components. Decorator is more about extending the properties or characteristics of a particular class. I would even say you should not have a class called "shield" or "sword". Instead you might have a class called DefensiveItem with properties like 'Name', 'DefenseRating' etc. Then a Unit can have a list of DefensiveItems with those properties filled in. I.e.: 1 Name - Shield of Lightning DefenseRating - 12 2 Name - Aura of Protection DefenseRating - 4 To get the overall defensive rating of a unit you just add up the defense rating for all the defense items. This isn't really a design pattern. Just using composition and normalized data structures. Obviously more properties are needed based on the rules. If a unit can't have more than two shields then you could have a "class" property and create a rule dictating that a unit can't have more than one item of a particular class etc. Overall the system you are trying to design is not trivial. It's really hard to just come up with an overall answer for what you are asking. There are so many possible approaches which are also dependent on the requirements of the game you are making. Before delving into design patterns, which are more about how components interact, maybe you should define all the various data structures first. This would be based on the requirements which are easy to write out: A unit can have defensive items as well as offensive items. Offensive items have an attack rating which determine the damage they do. Then take the requirements and separate out all the data structures from their properties. I.e. Unit, DefensiveItem, and OffensiveItem are data structures, AttackRating is a property of OffensiveItem, one unit can have many DefensiveItems etc. After this is all defined the work on how the rules will be implemented and how the structures will interact can begin. 
I'm still kind of learning also, would you mind commenting or messaging me what you did to make it work? What I posted was what I did in my project so I'm interested to see if you did it differently and it works.
I did the full install option when I installed VS so it's got every default extension you can get. One thing I should mention is that I always spec my development boxes with a ton of RAM. VS does tend to take quite a bit of memory, especially if you've got a large solution loaded (I have 3 instances running right now, each using a bit less than 2 GB) so if your system doesn't have a lot of memory headroom, you're going to end up page swapping quite a lot. Memory is comically cheap anymore so it's a really good bang for your buck to cram as much as you can get in there. 
Will C# 7.0 be available for Visual Studio 2015, or only with Visual Studio 15?
Well the reason I'm asking is because if it's a lot, you'll more than likely want to implement paging. However, if there's a big likelihood that it will never exceed a few 1000 records, you might get by with just caching the data, to make the search super fast. 
I run SSD and 8Gb RAM, it should be pretty fast on startup, but it's not. It takes a good 8 seconds. VS 2010 would take like 2 seconds. Is there a way to profile the startup?
Holy fuck that will be insanely useful
I think the plan is with Visual Studio 15, but they are looking at perhaps doing an earlier update to Visual Studio 2015 so people can start using it earlier.
I'm no worried **when** it will release, just **if** they will bring support to VS2015. C#6 can't be used with VS2013.
I imagine it won't be the same situation, there's no reason not to allow subbing in the newer version. The switch to C# 6 in VS2015 was mostly about the new compiler. Since they re-engineered the whole build/intellisense process, retrofitting it to work with 2013 would've created headaches for everyone. In moving forward, the Roslyn architecture is already in place- and already we've seen the inbuilt compiler version get updated without major overhaul to the IDE.
Ahh, my mistake. Yeah, that would be nice to have, especially if VS15 is only a minor/incremental update to C# development. Feels like Visual Studio 2015 just came out. Probably just one more way to make us buy upgrades year over year. EDIT: Also, I double checked the source where I thought I read about the 2015 release and I think I misread it. I think the context was releasing C# 7 language features in parts as minor Visual Studio updates as they're ready. No mention of it being added to Visual Studio 2015. :(
That's what I'm trying to do, but I can't seem to wrap my head around how that will help me fire off a thread that can receive a variable by ref. Would you mind giving me an illustration? 
Thanks
You can *kind of* do this with a lambda, although technically that just generates a closure for you: void Foo(ref bool stop) { // ... } bool stop = false; var thread = new Thread(() =&gt; Foo(ref stop)); I'm not sure why you are opposed to using a wrapper class (or just using `CancellationToken`), though, 
I'm not opposed to using a wrapper class or using CancellationToken, I just hadn't figured out how to use the WrapperClass to do it (I still have no way to create local ref variables) and I'd not heard of a CancellationToken. Looking into that now. When I attempted to use a ref within a lambda I specifically got an error stating that I "can't use reference variables within anonymous functions" but now it's not throwing the error. O.o No idea what that's all about. But that seems to work now. 
Ahh, found it. So yeah, that doesn't work. So say you have a "wrapper" class: class FooClass { public void CreateThread(ref bool monitorVar) { new Thread(() =&gt; { DoThreadStuff(ref monitorVar); }).Start(); } } This will not work. You get: Cannot use ref or out parameter 'monitorVar' inside an anonymous method, lambda expression, or query expression. 
Yeah, passing on method parameters that way doesn't work because they can't be moved into the closure. But all you really need is a class like class Cancellation { public volatile bool Cancel; } And pass that instead of the `monitorVar`. That way you're not passing *by* reference, but you're passing *a* reference so the same value is visible in all methods. Or use `CancellationToken(Source)` which implements all this plus some extra stuff.
That is awesome, I was going crazy reviewing the beginner stuff. The addition of a pretest was desperately needed.
Yeah, I'm doing that at the moment - passing a class that just wraps a boolean, but didn't know if there was a better way to go about it. Thanks! I'll look into Cancellation tokens, though they seem like slightly more overhead for the same result.
Well, I do mostly JVM in IntelliJ (Eclipse until recently) and feel that VS has way fewer refactoring options, like it's something that you are not supposed to do. Also, I'm pretty confused with the whole building process and project organization. What is the point of solution? Why do I need a separate project to write unit tests? Why building tool is a part of IDE? Where do my libraries live? Lots of questions, probably will find answers to at least some of them later. Performance was never an issue for me.
I also feel that it has a very weird syntax. It feels extremely verbose considering what other languages offer on that front. 
Ahh most people see resharper as a fairly integral part of VS if you want more refactoring options. A solution holds all of your projects, for instance the solution for my latest game has 29 projects within it, the projects are different parts of the engine and game. So HazzahEngine.Math is one project for instance. You don't need a separate project for unit tests, that's just how it is done for larger projects. What do you mean by "why building tool part of ide?" ?
Weird thing is that i actually found an app that does show processes, so it must be possible. (Device Diagnostics HUB)
What is logged is generally up to you. Whatever kind of information that you want to know about the user and how they're interacting with your app. Exceptions are probably always a must, as you're going to want to know if users are encountering errors of which you haven't accounted for or even seen for yourself. The application methods in Global.asax will serve you well, and are a good starting point for logging global events.
The most interesting part for me is what options will they provide for legacy code for non-nullable reference types.
Return by reference also opens a gate into pointer hell. Would be interested to know what people think they would use it for.
Tuples is the default term in a lot of functional languages, if anything, it would be confusing to call it something different.
Agreed. It worries me that someone says "This is a religion thing, it really doesn't matter how you store your constants." I thought we were way past that stage. "Global const should be in their own dedicated static class like you currently have. You can use partial classes to break them out if you find yourself having trouble navigating that file." just goes to show one of the many problems with globals.
There's a tuple class in the base library, similar to one you could make yourself. But the language itself doesn't do anything special regarding them currently. They will have some convenience syntax added so that using them becomes much more practical, like a method returning (T1, T2) instead of Tuple&lt;T1, T2&gt;, and presumably the ability to destructure them into values more easily.
Removed: Rule 4. Make an attempt first then if you're still having issues you can ask a specific question about what you tried and how it's not working. To get the parent directory, use [`DirectoryInfo.Parent`](https://msdn.microsoft.com/en-us/library/system.io.directoryinfo.parent%28v=vs.110%29.aspx). To get the root drives, use [`DriveInfo.GetDrives`](https://msdn.microsoft.com/en-us/library/system.io.driveinfo.getdrives%28v=vs.110%29.aspx).
It seems like you can write your own with method.
Tasks have pretty much the same guarantees as threads when used correctly, the reason being that they are (in console programs) simply dispatched on threads from a thread pool. Note that starting a thread doesn't guarantee anything either, in terms of when it will run. That said, you are probably doing something wrong here. 
As big of a nerd I am about naming things, I think in the end its best to just name things for what they do and not to worry about convention too much. Never once have I seen a method with abnormally long (or short) names or even with totally unconventional styles such as methods with under scores etc that was accuratly named to represent what it is doing and thought "man, this guy needs to follow some standards". On the other hand, I've seen plenty of standard naming conventions attempts be terribly bad. I'd rather see: EMAIL_FORM_DONOR_GROUP(string email) than SendMessage(); lol.
Put them as members where they are used or similar. It's not good design to just stick them in a constant God-class. 
Return by reference is for high performance low allocation applications so you can do less trickery to pass around structs without copying them 
 &gt; C#6 can't be used with VS2013. False. You install the compilers nuget package. I used c# 6 on 2013 more than I have on 2015. 
Tuples are awful to deal with. Records should not suck 
I agree. Something like this is what I think I use more often. public static void AddValue&lt;T&gt;(this Dictionary&lt;string, object&gt; dictionary, string key, T value) where T : class { dictionary.Add(key, value); } public static T GetValue&lt;T&gt;(this Dictionary&lt;string, object&gt; dictionary, string key, T value) where T : class { return dictionary[key] as T; }
&gt;The problem with such a change is that it breaks existing code: it is assumed that all variables from before the change are non-nullable. To cope with that, static analysis for null safety can be disabled at the project level. The developer can decide when he/she wants to opt-in for nullability checking.
C# has been a multiparadigm language for a while now.
You can only return references to the same "ref paramName" parameters that were passed in. And you won't be able to create "ref" fields. You're not going to be able to do interesting/obtuse pointer code with this even if you really want to.
You can ask the dev on [his website](http://pasquiindustry.altervista.org/device-diagnostics-hub-2-0-now-available-with-lot-of-new-features/).
Can you reference a `ref` local variable from a closure?
I'll just second in that Visual Studio Code is a pretty nice IDE. Not just for C#. I do primarily node/js development, and it's my preferred editor for that purpose. It's very nice to be able to use it across platforms. I mean, if I jump back to C#, I still use Windows/Visual Studio 2015, because that's my preferred OS, and I have VS2015, but Code can totally get the job done.
Ah nice! Not what I was expecting from reading about the 'immutable' keyword feature https://github.com/dotnet/roslyn/issues/159 All the examples in the records look immutable but I can't tell if theirs anything in their that actually stops someone from adding a non-const or readonly field/property?
Ha close to what I did.. I like your implementation better.. public static IEnumerable&lt;T&gt; GetValues&lt;T&gt;(params IEnumerable&lt;T&gt;[] vals) { int idx = -1; List&lt;int&gt; finishedIdx = new List&lt;int&gt;(); IEnumerator&lt;T&gt;[] enumerators = vals.Select(v =&gt; v.GetEnumerator()).ToArray(); do { idx++; if (finishedIdx.Count == enumerators.Length) break; if (idx &gt;= enumerators.Length) idx = 0; if (finishedIdx.Contains(idx)) continue; if (!enumerators[idx].MoveNext()) { finishedIdx.Add(idx); continue; } yield return enumerators[idx].Current; } while (true); }
Assuming you just skip those entries for shorter lists, first find the longest list and loop to its length, then in the inner loop, check if the `ptr` index is within the range of that list. int ptr = 0; int maxLength = Lists.Max(l =&gt; l.Count); while (ptr &lt; maxLength) { for (int i = 0; i &lt; Lists.Count(); i++) { if (Lists[i].Count &gt; ptr) yield return Lists[i][ptr]; } ptr++; }
The Item1, Item2, etc. variable names is the most annoying thing about tuples. I can deal with the generic method syntax.
 public static IEnumerable&lt;T&gt; Zip&lt;T&gt;(IEnumerable&lt;IEnumerable&lt;T&gt;&gt; enumerables) { List&lt;IEnumerator&lt;T&gt;&gt; enumerators = null; try { enumerators = enumerables.Select(enumerable =&gt; enumerable.GetEnumerator()).ToList(); while (enumerators.Count &gt; 0) { for (int i = 0; i &lt; enumerators.Count;) { var enumerator = enumerators[i]; if (enumerator.MoveNext()) { yield return enumerator.Current; i++; } else { enumerators.RemoveAt(i); enumerator.Dispose(); } } } } finally { if (enumerators != null) foreach (var enumerator in enumerators) enumerator.Dispose(); } } public static IEnumerable&lt;T&gt; Zip&lt;T&gt;(params IEnumerable&lt;T&gt;[] enumerables) { return Zip((IEnumerable&lt;IEnumerable&lt;T&gt;&gt;)enumerables); }
¯\\\_(ツ)_/¯ Hard to say with absolutes. I would argue there can always be benefits given the right context. Might be harder to justify if you have only one implementation of that interface and no immediate plans to supply a different implementation though (but still possible to justify). And interfaces with just properties (no methods) are completely valid and useful if the use of that interface is useful. I know, it's kind of a non-answer "It's useful when it's useful". I think having the vision for how to design your code and abstractions will come with time and experience.
I'd investigate svn could be scanning files for changes or whatnot.
I usually have like 3 or 4 instances of VS2015 open, they open in a few seconds tops... time to get new hardware :-) 
&gt;if (weapon is Sword sword) Woo! is may finally be less clunky and stop polluting scope! Poor as will die a fiery death... and we shall laugh.
And you get the whole time errors in the error list and intellisense errors. That's not what I call "can be used".
Compile errors are slightly obnoxious but I use ReSharper, I generally never compile with errors ReSharper also does c#6 intellisense correctly 
less constructors = more fun! You still have to create the equality, i don't mind that, it helps you define what the object really is, for instance maybe the id isn't the key but everything else is. It's the constructors with the nonstop mapping... finally! 
This app is a pretty basic task tracking app that i wrote to track the work that is being done on the production line by our technicians and operators. Everything with the UI is written from scratch (No external UI libraries) aside from the clock control which can be found in the Material Design in XAML toolkit on github. Ive deployed this app on a few MS Surface Pro 4 tablets and hope to add new features like attaching pictures and video with an embedded camera feed to the rear camera on the surface pro. Unfortunately i can't open source the whole app, but id be happy to provide code snippets for specific elements you see, controls, xaml styles, control templates, etc. I definitely want to open source my system for Hierarchical/Staggered/Generative Animations when i get around to cleaning it up a bit. I also want to open source my CachedLinqProperty&lt;T,O&gt;/CachedLinqCollection&lt;T&gt;&lt;ExtendedLinqEntity&gt; data system that allows for DependencyProperty-like extension properties for LinqToSql data classes. I wanted to have things like deferred relationship querying, dependent/forwarded property values, and local collection caching/flushing. But I am relatively new when it comes to LinqToSql and database stuff in general, so i could easily be going the complete wrong way with it.
Thanks! There are often no great answers, but the discussion was informative and thought provoking nonetheless. 
&gt; Pattern matching for example, which I love when doing Erlang, Elixir and Rust looks pretty verbose and unappealing in those examples, and it's such a backwards syntax (variable is type new_variable) that it is making my brain have to read that if statement multiple times, all to save a scoped cast inside the statement. You save quite a lot of code actually. Ever tried to make a tree visitor before? &gt; The pattern matching in case statements is not much better, and if you have an enumeration that you are casing through and accidentally put a space instead of a period (e.g. case MyEnum Value5: instead of case MyEnum.Value5: you now have an accidental catch-all instead of what you intended. That is pretty contrived though since auto-complete won't complete Value5 without the period, so you have to go out of your way to make that mistake. &gt; The With statement looks like the IClonable fiasco all over again. It's either a shallow clone, in which case bugs are almost certainly going to pop up when editing reference properties down the road, or it's a deep clone which will have huge performance ramifications. Hopefully it's a shallow copy. It's an immutable type right? So why bother with a deep copy?
*EDIT I was using the wrong string for the link! I'm dumb. It works!! thank you!! 
&gt; Return by reference also opens a gate into pointer hell. It's really not. You can only return `ref` of fields or `ref` arguments. &gt; Would be interested to know what people think they would use it for. You can return `ref` of a array element. A vertex in a regular 3D application can take 56-bytes for each vertex (position (12), normal (12), texture coordinates (8), tangent (12), bi-tangent(12)) When you update the normals of the vertex buffer you would like to not have to replace the entire vertex just because of that single element. If you have the ref of that vertex you can operate on it without copy or exposing the vertex array itself. Some buffers may have more complicated lookup rules as well. For example in a terrain you coluld have ref Vertex GetVertex(int x, int y) { return ref buffer[y * rows + x]; } And now you can edit just the normals of that single element wityhout copying the entire structure twice (once for read, and once for write).
As far as I understand this is about the style tools. This decision on a compiler level is more damaging. - Legacy codebases throw a million warnings and the nullability tracking is turned off forever in these codebases. - Best practices and conventions are divided on pre C# 7 and post C# 7 - Training materials and books accumulated in the past 15 years are obsolete and outright damaging.
I'm sorry, but relying on a quite expensive and resource hungry third party tool, or otherwise getting non-stop errors (except during compilation), does not count as "usable" to me.
One other argument for interfaces is that most unit testing libraries work best with interfaces. So if you want to unit test, it can be useful. On the other hand, going overboard and writing code that is easily testable but way more complex for the actual use case might be a bit smelly too.
The default implementation is good for most cases if you want more advanced implementation (like /u/TheAnimus suggested) you implement your own method.
I imagine that static analysis warnings would not get thrown for code created outside of projects which have nullability checking turned on. Otherwise the entire .NET Framework would be throwing warnings - so I really doubt that is how it would get implemented. Similar to every other new feature added to the language, they just introduce more straightforward ways to do things. By introducing language level support for tuples we wouldn't be invalidating 'training materials and books', you'd just have another great C# feature to take advantage of if you are using C# 7/8. Working on C# code written before version 7 you'd have to rely on older ways of coming up with solutions to problems where tuples just make life easier, just like all the features added with C#6, 5, 4, 3... Whatever solution they come up with is better than the current mix of manual null checks, annotations, guard methods, Code Contracts, and runtime failures. How would you envision a more optimal implementation of this feature?
You are comparing apples and oranges. By introducing Tuples you don't make the old code generate warnings all over the place. Sadly I don't see anything more optimal. The suggestion to declare non-nullable types as string! works but the syntax is just too heavy. No good way out.
Once authenticated, this will generate a script with the parameters he inputted. That script is **NOT** ran. Credentials could only be stolen by a keylogger I believe.