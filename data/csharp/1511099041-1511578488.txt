Hey man, sorry for the delayed response. Sadly, that didn't do anything for me :( I am using v1.5 too
Whats the different between ```HamburgerMenuGlyphItem``` (mine) and ```HamburgerMenuIconItem``` (yours)? Where are you binding stuff within the different content views?
Happy 10th anniversary "manually implementing INotifyPropertyChanged, what the hell does a guy have to do for some syntax sugar"
https://github.com/Fody/PropertyChanged
Try combining both our answers. -&gt; DataContext.MyTitle
my first thought too. public type name { get; set; notify; }
Can you provide a single link about "Web Pages"?
From 2012: https://www.nuget.org/packages/Microsoft.AspNet.WebPages/1.0.20105.408
I'm aware "there's a package for anything (and sometimes they work in Xamarin)" and that there are a handful of other ways to handle this. I want it to be part of the language. I don't want C# to be like JavaScript, where every project starts with "import these 12 packages to get the programming language you want". I want C# to be a language that supports application development with presentation model patterns out of the box. 
The best you could do at that point in Java development was use compile-time AspectJ to add getters/setters to your class. Which wasn't horrible, but not as nice as C#.
You could do this in C# using MVC, but it's probably overkill. If the total size of all the files will be under 1GB, rarely changing / mostly addititive and you don't really need dynamic things like comments / voting buttons or things like that than consider a static site generator. Something like Jekyll and Github pages could be a good fit. Advantages: - Speed (plain old static HTML files) - Cost (GitHub pages is free, or you could host just about anywhere) - Security (no code on the server to get hacked, the credentials to upload files are the primary risk) - Low effort (once configured) - Easy to update (authors use the markdown syntax and plain text files)
The main draws of C# (and the .NET platform) are IMO, in that order : - The quality of the tooling and toolchain, everything from the IDE to the build system and the compiler. This is the main reason why the people that use C# are so damn happy with the language. There isn't a single other language that does this better. - The fact that it balances both low- and high-level concepts, making it a good fit for most applications. Both game and web development are huge in C# and they are on opposite sides of the low-high level debate. The language caters equally to both and you still can use a feature from the "other side" if it's best solution to your problem. - It is actively worked on, being backed by one of the biggest tech company of the world *and* at the center of most of their developer work. The language is being updated several times a year now, the frameworks and runtimes too. That rapid pace of development helps keeping C# modern and ahead of its direct competition. There a ton of other things that C# does right (see : the other comments), but so do a lot of other languages. These 3 points are things that no other language can touch.
I get the feeling that's never gonna happen. They'd have to pick one implementation pattern to work with, and then only the people that follow that pattern already would really get anything out of it. Everyone else would still have to manually implement it. However, wasn't one of the focuses for Roslyn to allow anyone to create their own syntactic sugar and compile it? 
Removed: Rule 4.
i don't usually comment but i do like to see the issues people have and how people either help them solve it or help them figure it out, helps me out with my own without asking questions (when i do decide to program). But then again i usually go out and extensively search my problem before coming to reddit 
Check out custom event syntax. They’ve already worked around “what if people want to customize instead?” If you want special INFP, you implement it. If you want the built-in, you use it. 
relevant [msdn blog post](https://blogs.msdn.microsoft.com/dotnet/2017/11/15/welcome-to-c-7-2-and-span/) and [decent clip from Connect event](https://channel9.msdn.com/Events/Connect/2017/T125)
It would be nice to have this for example with an annotation or whatever. But to be fair not every kind of c# program even needs this functionality. This is mostly only relevant for Desktop applications but not for Web or Console, so I think there isn't enough to justify this functionality with syntax sugar on a language level.
Sounds like a content management system.... perhaps look into an open source .NET CMS like Umbraco? https://umbraco.com/
public object MyObject { get; notify set; } If the compiler sees the notify keyword, the class will automatically be given boiler plate code for INotifyPropertyChanged. That's my ideal solution.
Completely disagree. Family members are the perfect test bed, and this wouldn't be learning in prod
Very interesting video, thanks
Again it's not justified to implement this on a language level. This would be like introducing the keyword "resource" for retrieving values from a resource dictionary. It would make things a bit shorter for some applications but doesn't add anything for the language as a whole. This is clearly should be a framework feature and as PropertyChanged.Fody shows it can be easily implemented with annotations. The .NET framework is open source you can always make a PR to get such a feature into the framework. But since the addition of new features nowadays seems to be restricted to those .NET Core also profits from and Console and Web Applications don't have the need for this at all, your best bet still is just using an external library for the foreseeable future.
This is a great addition for sure. It can't represent non-contiguous memory though, right?
poor guy in that video :l
That's really cool, good luck!
/r/learnprogramming*
Go with the flow. Figure out the entry point to the application at the point you're trying to work with: in MVC, look for the controller action+view; in web forms, find the aspx. Then follow the flow of the code. Dont try to grasp everything at once. A bird's-eye view of the system is ok, but don't worry about how everything connects just yet. You'll get it in time. 
It took me a couple months to learn the language...I'm still learning the libraries, frameworks, and tools.
I have no idea, first I heard about was when I read this article a few hours ago. Hopefully a more knowledgable soul will pop up
I jumped into a monolith as a junior almost three years ago. For me, I’ve always started by debugging all the way through from page load to page reload. Putting watchers on the variables you care about helps too. There could be some weird logic tucked into a method you would never think to be there that someone wrote 10 years ago. And definitely ask questions, you won’t be able to grow technically or in your general knowledge of the ecosystem if you are too scared to ask your new peers.
Would the compiler just emit(?) an implementation of `INotifyPropertyChanged`? What about `INotifyPropertyChanging`?
Not really. Though you can slice a large span so that it maps to the parts of memory you're interested in. &gt;When wrapping an array, Span&lt;T&gt; is not limited to pointing to the first element of the array. It can point to any sub-range. In other words, it supports slicing. var array = new byte[] { 1, 2, 3 }; var slice = new Span&lt;byte&gt;(array, start:1, length:2); Console.WriteLine(slice[0]); // prints 2 Or use 2+ spans to get to all the parts.
&gt; There could be some weird logic tucked into a method you would never think to be there that someone wrote 10 years ago. So much this. So much shit code no one can be bothered to fix everywhere.
Please don't use code regions, they were a mistake and anyone using them is a mistake too.
It’s easy to complain about but hard to fix because, hey it’s a monolith and it’ll take a lot of testing to ensure you aren’t breaking some seemingly unrelated part of the system.
Yeah. But if the code wasnt written in such a shitty strongly-coupled fashion without any tests in the first place things would be better.
char[] charArray; means char[] charArray = null; I would recommend familiarizing yourself with Visual Studio's Debugger. If you step through the lines it shows you the variables and their values.
&gt; PropertyChanged.Fody shows it can be easily implemented with annotations. That's not true, though. Fody itself isn't just a simple nuget package, it effectively mangles the IL at compile time to achieve its results. It's neat, but it's also a whole different class of dependency. There's no way to do this with "just" do it via annotations which is perhaps the real issue. 
&gt; char[] charArray; &gt; means &gt; char[] charArray = null; Pedantic clarifications ahead: This is only true for static and instance fields. Locals must be initialized (i. e. assigned a value) before they can be used, so `char[] charArray;` just means "here is a name, 'charArray', which can be associated with a value that is an array of char values." At that stage, charArray has no value, at all, and much be assigned one before it can be used.
No more auto properties....
https://www.reddit.com/r/csharp/comments/7ds4dw/this_subreddit_seems_to_consist_solely_of_people/ ¯\\\_(ツ)_/¯
Thanks, I'll try that one. They keep telling me I'll get it in a year or so
I'll definitely try this tomorrow morning 
Don't stress out. It's going to be overwhelming at first, but gradually you will learn more and more about the codebase until you start to feel more comfortable. For now, do the best you can to fix the specific problem you have been assigned. Persevere.
Also, add comments as you go and start to understand what the system is doing. Don't be afraid to commit them so the next guy can learn faster.
There is some experimentation in corefxlab with some data structures in [`Sequences`](https://github.com/dotnet/corefxlab/tree/master/src/System.Buffers.Experimental/System/Buffers/Sequences) to represent chained chunks of contiguous memory (e.g. non-contiguous) from which you can get `Span`s from the chunks
I wasn't aware of that, out of interest do you happen to know the reason for not assigning default(T) on local declaration? I'd imagine it's to reduce additional instructions or something like that?
...except that I've already been using C# for over 10 years and my question specifically concerns .NET core. But whatever.
Only tip I can give is to thoroughly trace what side effects your changes will have and try and understand the area of code you're working on without making assumptions - never assume the previous developers followed even the bare minimum of best practices. The first commercial project I worked on was the most horrendously designed crap I have ever seen (and hopefully I'll never see worse). One of the first bugs I tried to fix was an issue where closing a data entry form caused the form to open again (had to cancel twice to actually cancel the operation). After a brief bit of hunting I found a bool variable that was getting set late (or so I thought) causing the issue. After fixing this, I committed the code and moved onto the next issue. A week later the side effects became apparent. A part of the application related to graphical annotations in an image viewer (completely unrelated to the previous data entry form) had totally broken, with the annotation toolbar not becoming visible at all. Because of the severe level of indirection (crappy UI platform built on top of WinForms along with a weird semi-working plugin architecture), there was absolutely no way for me to foresee that bug happening without a full understanding of that sub-system.
Then don't use it. Pick a tool based on your need. No one can ever tell you if it will work for you because we don't know you or what you do. If you need convincing it's a sign you probably don't need it. It works for my work's use case, so we are using it going forward. That said, we built our own ORM to give us the features we wanted back before EF existed. We just upgrade it as we go. So EF Core doesn't bug us.
How do you go about tracing the side effects?
Ideal solution will be to add Decorators via attributes, that will allow you to run custom code on property access, or add some metaprogramming (with attributes) that will allow you to apply code transforms on compile time (Roslyn-powered "C++ Metaclasses")
Haven't the foggiest.
The program is too simple to give any architectural advice and it looks pretty good and straightforward and without issues for now. But here is something I spotted. It is not related to C# but mostly to stuff that good programmer should be aware of DateTime firstDay = DateTime.Parse("30/10/17"); The line above uses absolutely unreadable date format that is culture-dependent and can yield different result in different countries. TimeSpan toDay = DateTime.Now.Subtract(firstDay); And here you're using DateTime.Now which depends on the current timezone and Daylight Saving Time. You should do your time calculations in UTC. 
I think they were getting at it being the same principle
Just looked it up, someone else asked the same thing on SO. :P https://stackoverflow.com/questions/30816496/why-do-local-variables-require-initialization-but-fields-do-not
Which new docs? When did it change
JavaFX?
Well, its not like learning it is a huge investment of time and afford. You said you do csharp for 10 years and know asp.net, so giving it a kick wont be that hard imo. All that asp.core is, is a stripped down version of asp.net, a console app actually, you just gradually add blocks on it and make it adapt to your needs. 
If you don't see any benefit then don't use it. I agree with /u/JaCraig there. Still I want to provide my impressions of what the background for .Net Core is. Maybe it helps you understand better, what value other people see in it: The reason why many people (me included) like dotnet core is because it is cross platform. We really like .Net and the tools around it but also use/develop for non-Microsoft platforms. In the past Microsoft did not officially support platforms like Mac, Linux, Android, iOS and basically anything else they didn't make. In recent years this changed and .Net Core is a big part of that change. Now we finally have an official, open-source runtime that we can use. Many recent, hyped tools (e.g. docker) came out of a world filled with Mac and Linux building SaaS. They are the modern evolution of the world you left 10 years ago. Now many are using technologies like Node.js, Python, NoSQL, docker, kubernetes, prometheus, git and many others. Many .Net developers want to use these tools (I'm in love with docker). With .Net Core Microsoft has accepted that this other world filled with *nixes exists. They released a product that allows us to join this world more easily. That is what people are exited about: The prospect of getting to be a part of this cool new shiny hyped stuff. Microsoft basically had to react to the hype that drew people away from the .Net platform. Another thing is that there are good reasons why open source software is a good idea. Microsoft has a history of not liking open source much. So them suddently making so many open source things and promoting them so much - that's sure to draw eyes. Suddently .Net as a platform can benefit from all the advantages open source development brings to the table: * Ports to more OSes * Bugfixes delivered faster because the community can help * The community building new features - thus getting what they want sooner * The code beeing analysed by many people - uncovering lots of imprevements to security and performance * A deeper understanding of how the framework works. Will every single part of that really unfold to all its protential? Probably not all of it. However Mac support and many performance improvements were developed with a lot of work from the community involved. Then there are need for cross platform .Net beyond the web. Look at smartphones: Microsofts attempt at joining the market is a pretty clear failure. *nix systems (Android and iOS) rule that world. While there was a way to do .Net on Android before it wasn't official. Having Microsoft officialy support that is great news for all those .Net developers involved in that world. Then there are Linux users. Many hope that with .Net now having official Linux support and a cross platform UI Toolkit on the way, better Linux support may finaly come to popular desktop applications. In the past they often ignored Linux and Linux users had to use unofficial things, like mono, to get stuff working. If everyone switches to .Net Core and builds truly cross platform applications on it that will make so many more applications available. This is great news for all people who do not want to use Windows - a group that seriously grew when Windows 10 was released. You are absolutely right though: Not everything is perfect though with .Net Core. There are some striking problems still: * .Net Core has all the issues one can expect from such a young platform. .Net Core 1.x had a completely crippled standrad library. The tooling wasn't any better. It was a mess for a long time. With .Net Core 2.0 everything is supposed to be much better now. But when since we're talking about such a young platform that doesn't mean much. It's just to young to be as solid as the .Net Framework. * For smartphone apps you need Xamarin. From what I've head about it there are a lot bugs, missing features and other issues in it. As I've never used it I'm not qualified to go into much detail though. * There is no cross platform GUI for .Net Core. This especially silences the point about better Linux support in applications for now. Xamarin is supposedly going to release Xamarin Forms for Linux at some point. But if what I mentioned in above is true then it probably won't be a nice experience to use. There is also another project making a cross platform GUI toolkit. But the last time I had a look at them they were in alpha and still had a very long way to go. There are some frameworks like GTK# and other things that maybe work with .Net Core but they all have their own issues aswell. There were multiple attempts to make bindings for C# to a GUI framework for C++ - all of which failed. So we're basically left without a GUI framework on .Net Core sofar. **tl;dr** .Net Core get so much attention because it sets the path for so much aweseome stuff to be done. Mostly awesome stuff that involves hype.
Perfect question on time, i have a lot to say here, I'm developer for about 15 years and all this time with Microsoft.. Im angryy as hell now, i always followed new things "hype". For example moving from ASP.NET forms to MVC increased my productive, code cleaness , have good impact on collaboration with FrontEnd developers etc... Obviously i've tried with .net Core that was disaster, Ok i understand no problem it's not mature, waited some time for 1 version disaster again... now CORE 2.0 and disaster, everthing that ive learned using core 1 pased away! I'm feeling lost.. i cannot understand lot's dependency injection , new ways of doing everything, let's start with basic things try with authetication try to implement some tokens search in web core 1 have different implementeation and aproach than 2. Im lost in this naming tutorials are completly different between numbers... F... thi... Shi... my job is to deliver mainly SaaS complex application i don't se any values here (off course you can run on linux) but that's only hype everything is about optimization an understanding technology.You can run ultra responsive business app ofor thousands of people but there is a catch to understand entire stack from db to frontend.... I don't understant Core i feel like it is completly new language, enabling logging request in API takes ages here .... when you see this on tutorials this is ultra simple but in real life this is disaster. All of this lead me to try vue.js and node.js as a backend .... Why i can switch faster to completly different stack with 15 years .net background.... 
Another general tip: If you are taking user input, put some validation or error handling around it. You have this line: Console.WriteLine("Enter Elec: "); newElec = Convert.ToInt32(Console.ReadLine()); If the user input anything that wasn't a number your program would crash. A better method here would be: Int.TryParse(Console.ReadLine(), out newElec);
I've edited it to make my stance clearer.
&gt;coulden't you just type the value into the code to keep it immutable? Sure if it isn't stateful, but if in order to get that value you need to do something awfully long like, this.someLongField.anEvenLongerMethod(this.longFieldNumber2, this.longFieldNumber3, this.longFieldNumber4.longMethodAsWell(this.longFieldNumber3)) And need to include that variable a few times, when it's potentially stateful? You don't have much choice other then storing in a variable. So say this is declared at the start of a rather complex algorithm for lets say, determining whether a data point is inside a fairly complex polygon with some other magic thrown in you don't exactly understand what it does because it's your first week on the job. What is easier to reason about? a variable that could be changed at multiple places or a readonly variable that can never change value? One's caching / a shortcut, the other is mental drain.
`Memory&lt;T&gt;` looks pretty sweet as well. I'm really liking the design of this.
You could also use var instead of TimeSpan. 
In the grossest possible way with extra overhead, yes.
Given the purpose of the application, and that it is you that will be using it, it has no more or less complexity than it needs, and the layout is fine if it is readable by you. You have the right level of commenting and you would be able to maintain the code if you came back to it in a few months. Other comments relate to things that we would be doing on a larger project, but given where you are... Nice work :-)
I want to both vote and don't vote you.
Just make sure you’re commenting intelligently. Don’t comment what the code does or how it does it; that should be obvious from looking at it. If it isn’t, clean it up. Rename variables/methods. Refactor boilerplate into separate methods, mark fields readonly or const if they’re never changed, etc. Your comments should be why the code is doing something. As an example, say the GUI is in WPF and follows the MVVM design pattern. While looking through the code, you find an event handler in a view’s code-behind. Since every other event is handled in a viewmodel, you’re perplexed. A simple comment like // KeyUp can’t be passed to an ICommand in XAML until .NET 4.5 // TODO: Get rid of if we ever switch the target framework to &gt;= 4.5
Don't tell /r/java they don't take criticism well
Meh, call me when Niger works half as good as Maven. 
I should watch this later.
If they expect it to take a year for you to understand their application, it sounds like they have a seriously messed up system.
Disagree. A junior dev jumping into their first major enterprise application or applications could take a year to fully onboard to where they need no handholding. I was put in charge of applications/systems at my current job I didn't fully understand for months and was hired as a senior dev. 
[graphviz is a widely used tool.](http://graphviz.org/Download.php) A quick search gives: a) [A \(10-year-old\) sample project](https://www.codeproject.com/articles/5603/quickgraph-a-100-c-graph-library-with-graphviz-sup) b) [A library that does the heavy lifting](https://github.com/JamieDixon/GraphViz-C-Sharp-Wrapper) c) [A .NET visualisation library from MS research](https://www.microsoft.com/en-us/research/project/microsoft-automatic-graph-layout) 
1. Is it in source control? 1. When you check it out of source control, does it build? 1. Do you have access to ReSharper? If so, run it and see where the biggest problems are 1. Get a C# extension called Code Maid and run it to give all the horrible some decent formatting 1. Does it have unit tests? Run them and figure out what they are testing. 1. Debug through the app from end to end to see how the code flows (inheritance, dependency injection, etc)
&gt; c) A .NET visualisation library from MS research Interesting that this is FOSS now. Microsoft used to charge $1500 for it.
Was there any documentation? Design diagrams? Training exercises? Engineers available to answer questions? I've been mentoring fresh grads for ten years on some very complex production systems and I think if it takes a year for them to come up to speed, that's a failing of the company in a very fundamental way. 
Is there a tldr on what span&lt;t&gt; is
It's an efficient abstraction over contiguous memory, including managed arrays, unmanaged memory, strings, and other types. Previously to deal with all these different types of memory, you'd have to write many different APIs to accept them - now you can just write one for Span. Span also allows memory to be handled and sliced in a safe and efficient manner, without resorting to unsafe code. this means that if you're dealing with unsafe memory, you can wrap it with Span and use it from safe code, and pass it to other safe functions. No need for raw pointer arithmetic, or anything like that. 
Use DateTimeOffset in lieu of DateTime. DateTimeOffset does the same thing as DateTime (despite having a name that sounds like it does something totally different than what it does) *and* enforces time zones by default. DateTimeOffset helps prevent weird bugs that pop up from users in different time zones and/or forgetting to convert DateTime to UTC. 
Early in my career when I was struggling with the complexity of software development and improving my code quality I came across (this article)[https://www.bennadel.com/resources/uploads/2012/ObjectCalisthenics.pdf] ((alternate link if you're on a phone)[http://williamdurand.fr/2013/06/03/object-calisthenics/]). C# is an object oriented language at it's heart and this is the the best starting point for it I have found. Alikont and vog1443 make good points but knowing how to write object oriented code well is far more important and valuable than details like those. I would recommend focusing on high priority things and letting other stuff slide at first, it's too easy to get overwhelmed otherwise. I would say that less than half of the developers I've known in my career know how to write OO decently, if you follow the rules in that article farily strictly you will have a big head start over most other junior C# devs. 
I thought the same thing. I looked at the start and thought it was crap. I then decided to wait until a 2.0 came out because I figured a lot would change. I was right. 😀 But now we can write libraries in .Net Standard that lets you use that code on new or old platform which is cool. .Net Core runs quite a bit faster than the old version, even on windows. Also we kind of have to learn it since most of the general community is moving to it. Thus I feel like all the older stuff will be abandoned and new developments for old will slow down or stop in time. to me core is a branch to the non-microsoft devs or non-windows machines. However, microsoft is supporting a lot of this chaotic 3rd party open source "crap" that seems to be created by masochists. So a lot of this stuff is to appease those guys even though Microsoft's way is far more simplistic and straightforward. Though, web front end land is a far more brutal place where you need to deal with new stuff almost monthly, so just try to keep an open mind and try coding as much as you can in .Net Standard to be more safe. 😀
I agree, it's a tool that you either need or don't. 
How much personal time the git integration gives you. Open a large project, switch branches, and BOOM. You now have legitimate time to get coffee, take a walk, serf the web, anything you want.
So I was thinking that it's mostly restricted to its own grid path when drawing the lines back and forth right: https://github.com/rainzhao2000/autodrawer/blob/master/pathguide.jpg So what if it didn't have a grid but instead drew lines where edges are detected? Or basically just "drawing" the edges....is there a way I can do that? 
Pasting JSON and XML to trigger class creation. So. Nice. 
Edit and Continue. Also, SSDT. Dunno how well known they are, but they sure are useful to me.
I like the article except for number 9. I don't think of it asking the class to do something rather than the class has been given instructions with how to deal with someone asking it to do something. I think properties are one of the most powerful parts of the language so maybe I'm biased...
I'm not sure what it's called but there's a C# interpreter window that you can open and it's really nice for testing snippets 
At least they gave you a year. Feel like every job I’ve had they ask how long do you think it will take even though you know little about the application. When you push back they say, “What about 2 months?”. Lol count yourself lucky that you are given guaranteed work and time to put something together. Spend the time to grasp what it’s doing. Map it out, and build it. There will ALWAYS be something you should have or could have done better when you get to the end so don’t worry about it. 
Cross-platform aspect is probably the most important. Some shops are very allergic to anything from MS but they have no defense against open-source software that runs on Linux. People promoting .net core could be ones who were stuck with Java or stuck on Windows. Java is not pleasant. Windows is not fun when building cloud services. .net core on Linux solves both problems. It is now possible to develop with Visual Studio on windows and run on Linux. It is awesome. Very hard not to hype. 
Most people in here probably already know this. But you can comment out large sections of coding by highlighting the desired code and entering "ctrl" + "k" + "c" this will comment the selected code. To uncomment your code you do the same thing by hitting "ctrl"+"k"+"u" This is very useful if you want to remove a bunch of code and test a few lines. Comment everything that is not relevant, once you're ready to integrate the whole thing you can uncomment your code. 
Ctrl K + Ctrl D to auto indent multiple selected lines of code 
For some reason this is Ctrl-E + Ctrl-D for me, and I've seen it Ctrl K + Ctrl D for others. Do you happen to know how the initial keyboard chords/combos are set up, and why it's different on some installs?
By any chance are you using resharper (or have used it/a different plugin in the past)? It can remap some shortcuts and IIRC VS can persist preferences between installs.
Is this the immediate window or is there are larger tool similar to LINQ pad built in?
Oh yeah. I come from a vb6 background so my keyboard layout is vb6. Bet that's the difference!
Might be due to localization and or keyboard layout.
E&amp;C is so damned inconsistent to me. I'd like to be able to edit the code in the window regardless of whether it can hot reload or not. Instead, due to our project setups, I'm forced to have it disabled if I want to be able to edit in a window of a project that can't support E&amp;C. Not being able to hot reload drives me mad. I wonder if that's something we can change after our migration from nuget to git sub modules for internal solutions.
Yeah, tell the lost junior to start refactoring code. That'll be popular.
I think it's called "C# interactive". If i remember correctly there's also "F# interactive". On mobile now, can't verify properly. 
reading msdn now &gt;&lt;
This is Tools-&gt;Options-&gt;Environment-&gt;Keyboard and is then the "Apply the following additional keyboard mapping scheme:" On the first load of VS it'll ask you for your preferred keyboard scheme. As /u/ChekuDotCoDotUK implied there's a VB6 option but there's also C# and C++ and a VS6 option as well. I always choose C# but both K/D and E/D work under that configuration. Which leads me to one of my favorites: The keyboard/menu/commands are all completely configurable. Tools-&gt;Options-&gt;Environment-&gt;Keyboard lets you type in keys and see what they're bound to and bind whatever commands to whatever keys you want. Tools-&gt;Customize lets you change all of the menus, what tool bars are visible, and what's on them. There's even commands that are available but not enabled by default like "Go to Find Combo" which is like an ancient precursor to navigate to.
ok, i'm starting to see the implications. gonna stop while i'm ahead and my head isn't exploded yet. thank's for your patience :)
Can confirm that it is C# interactive. And yes there is a F# and also a Node.js. View -&gt; Other windows -&gt; C# Interactive
The whole functionality of using commands (copy, paste Ctrl+K-commands) on a single line by only having the cursor there without the need of selecting the whole line.
Those extra lines of info that relate to your code butaren't your code? That is called CodeLens, and it can be turned off.
The ability to have the same file open in two windows so you can look at different methods in the same file simultaneously. I rarely remember to do this though. 
Can you explain? Do you really just paste in some json and it'll do that? As that sounds like it's going to be a huge time saver for DTOs
So webstorm has a similar feature, but it just annotate method augments with the name. So you would get something like string.Replace(*searchString* "hello", *replaceString* "World") And that's really quite useful sometimes and way less intrusive harm adding whole extra lines
If memory serves, under Edit -&gt; Paste Special, there's "paste Json/XML as class"
I don't think the expectations for juniors are that high. I would say start applying. You may not get any interviews and they may go badly. But you've got more of a chance then if you don't. Chances are you will learn what they are looking for as you go and then you can brush up on those areas. You likely know more than someone straight put of university. And you have professional experience that is relevant. Bottom line is you 100% won't get a job of you don't apply. 
Shift+alt+L syncs the Solution Explorer with the current document. I use that a lot.
thank you, i needed some positive feedback.
I see that you are already in your current job working with ERP systems, and if you have any interest in keeping working with ERP systems, i would suggest that you have a look at Dynamics AX / Dynamics 365 for Operations. (ERP system from Microsoft) (Its a good field to work in as a developer and i am sure depending on the marked in your country it would be easy to find a Junior job)
Seems like this would be pretty useful to making the data-oriented programming Unity wants to move towards a little easier on end-users. https://www.youtube.com/watch?v=tGmnZdY5Y-E
A session is server-sided so you cannot get it from a C# program that is connected to a website. If you want help, please put more effort into explaining your situation.
Is this what you meant? https://stackoverflow.com/questions/1887096/getting-php-session-using-c-sharp If you need more help, please put more effort in explaining the issue.
Something like it yeah . But it don't have any cookie 
What have you tried so far? Got any code to share on what you tried?
We’ve just been hiring for my team at all levels and the knowledge that you have described would have definitely got you a coding test and likely an interview. Juniors are all about wanting to learn and develop your skills. If people are expecting juniors and grads to come fully loaded then they’ll just get crap people and you don’t want to work there. Start applying! What’s the worst that can happen!
Maybe you're being downvoted because you can't understand fairly clear English and then making it out to be the other guy's fault.
I'm not sure I'd consider learning PHP an encouraging experience.
This is a conventions thing and isnt helpful for a beginner. IMO beginners should learn good practices before comitting to conventions, since they wont necessarily understand why those conventions are being used.
Especially with ReSharper installed! Time to get your house refinanced.
No, I said I didn’t understand the poor English and I got downvoted. I said sorry too. What do you cucks want exactly? Leave me alone
Well I assume his changes are being reviewed before they hit production
Depends if you're tasked with refactoring it out of a monolith, and also, what type of monolith it is. If it is one large class, or whether it is just not built with interfaces. If its built with interfaces, but not IOC. Ultimately, ask lots of questions, get clarity where needed. But if you have a rockstar above you, who would rather do it themselves than train someone, you may have larger problems on the horizon.. 
It is a conventions thing, but I see little reason to avoid using var. It’s not like someone new is going to to instinctively know that DateTime.Subtract returns TimeSpan. Also, unless this is the guy’s first language, i.e. he’s literally learning to program for the first time, he should start learning the proper conventions. I see way too much .Net code written in whatever convention the user was familiar with before. This is fine by itself, but it will creep into production code, and that’s a nightmare. Imagine a 100,000+ line library that throws no exceptions. Instead, all methods return bool and have an out string errorMessage on them. It works, but it makes for some odd-looking C#.
No problem bro. I know job interviews suck and it can be embarrassing if it goes wrong, but just got to keep at it. As long as you know what you're talking about and show passion there's always a chance. Try not to get too down if rejected. I've been there myself and it's not fun. Remember most of the time it's not because you suck just that someone else was slightly better. It takes luck as well as skill. So the more jobs you apply for the better your chances. Best of luck dude.
He says hes pretty new to programming, and it seems like he is from his code. At the very least, explain why he should use var and what it does instead of just saying he should use var. 
I can agree with this. I’ll edit my original post.
&lt;3
This is from over a decade ago, so it's clearly been put on Youtube now just to waste everyone's time. It's awful in almost every way. I skipped through from beginning to end. There's about 2 minutes of information in the 45 minute video and some of that is dubious. The delegate section is ridiculously long and still manages to miss lots. He doesn't cover any of the important bits of delegate addition and subtraction, ranging from their immutability to thread safety concerns during addition or removal. I can't actually remember the last time I created an actual delegate with the delegate keyword either... The event section is shorter and a disaster. There's no explanation of how the event works under the covers, how you can override the add/remove methods of an event. Given the age of the video there's no warning of the thread safety or exception handling issues with events. Because it's from the past, there's no discussion of anything added in the last decade. No EventHandler&lt;T&gt;, no Action or Func, no lambdas/ arrow functions. Nothing you would actually use. tl;dr - just avoid. 
Removed: Rule 4.
IMO if you use any kind of syntax sugar, you should absolutely understand what it does on a lower level, basically you should be able to rewrite it into underlying code at will. OP needs to know why he even writes type to the left of the variable, and how exactly var is being replaced by the compiler. 
You don’t need to know this. Do beginning JavaScript programmers have to understand dynamic typing to use var? Or JavaScript at all? The logic is simple. Use var by default. If you find that it gave the “wrong” answer, then specify the type. Perfect example of this is trying something like foreach (var r in dataTable.Rows). You don’t need to necessarily know _why_ r is object instead of DataRow. You just need to know that you can replace var with DataRow and get the proper behavior.
Refactor it into microservices /s
You made me disable subreddit styles just so I could downvote you.
What's the best way to do this? If I try to open more than one window on a single file it refuses to do it. I know it can be done - I've occasionally seen two tabs with the same source file..
How?
There's a little divider at the top right of the tab above the scroll bar. Drag it down
I think the point is its not hard to research. It's a simple as if you don't need any of its features then don't use it.
I know about that, and it's handy in some situations. But I'd like to have two separate windows open. I have a wide screen (16:9) and it's a very comfortable way to work.
There is no how. Just stand on a line and try one of the usual commands. It will affect the whole line as long as you only have the cursor there and don't have anything selected.
Absolutely knew it was going to be a shit show just from the poor title before I even clicked. I’m glad you called it out, these poor and shitty “tutorial” videos get spammed on here all the time.
You can also use this from the command line! Open up 'Developer Command Prompt for VS201X' and type 'csi' :)
I use this all the time while debugging to try out snippets and see what kind of output I can get, so useful
ctrl-alt-e and click the 2nd checkbox. You will now break on every exception in the debugger whether there is a catch or not. This is great when some exception ends up swallowed or rethrown weirdly and you can also see the full call stack and variables.
Thank you!!! I cringe to say I've actually opened the same solution in two different instances of VS to do this before..
I’ve used both extensively. What you say is exactly accurate. Personally, I don’t have a preference between them. Where I see people draw the line is that someone that likes to control their result set in SQL will tend to prefer Report Viewer/SSRS and someone that just wants to drag and drop to get the logic they want will prefer Crystal. I’d say, if the budget is a concern then go with Report Viewer/SSRS. I have always been able to make reports work with SSRS, even the super complicated ones.
Works in SQL Server Management Studio as well. Very handy when you're screwing around with some queries trying to get them just right.
So? It's not a particularly great feature. 
Thank you! I was trying to turn on the map for some time. 
Nice... but sounds pretty unsafe (in the sense that the compiler and runtime will do less to ensure you're not messing up, compared to "regular" C#).
So it doesn’t require a recompile just to use like the immediate window? Color me happy to learn of that feature!
"ctrl + - " and "ctrl + shif + -) for previous and next navigation, I don't know other way to jump to declaration and come back
Yes, builds all the classes for you
Ah yes! That works. Thanks!
C++ is a good continuation from C to demonstrate OOP, exceptions and templates/generics.
In my case, it's a small shop and I'm one of three devs in charge of various systems that are comprised of a few dozen subsystems/applications that support them. The code is straight forward, and there is documentation in a wiki for an overall understanding of what each thing is for (in addition to general informational pages on the website and such), but the breadth of subsystems is enough that I hadn't even looked at everything I was responsible for in the first 6 months of my time here, much less had a chance to learn them. For example, I'm in charge of an invoicing system that rarely ever needs any work or support, and I didn't even get to where it lived for the first year I was at my job when something went wrong with a disbursement one day. Having said that, I do realize that my situation is a bit unusual. I'm in charge of more systems by myself than many businesses have teams working on. Still nothing compared to my first job where I was hired and the entire department quit 4 months later, leaving me as a junior dev in charge of everything by myself, though!
I'm always in two minds about it as I don't like to discourage people who have passion and are working hard even if the results aren't so good. This one however has zero redeeming features :/
ahahhaha, thanks nerd. 
Ctrl-q starts searching all commands and menus, similar to the command pallet of sublime or VS code. Also ctrl-w for semantically expand selection is very useful. 
On a selected post, press Z to downvote
You can't create an instance of DevPerson ( new DevPerson()) without knowing it's Type (DevPerson).
Ah shit, thanks
https://github.com/JoeMayo/LinqToTwitter/wiki/Retweeting-a-Status
There is a little symbol at the top of the scroll bar that looks like two lines with an arrow pointing up and down on either side of it. If you click and drag that you can split your code window into two. It's very handy if you need to see two parts of the same file at the same time.
This is black magic. No more touchpad follies on a plane for this guy! 
Tried using tweet.ID but when I print out, they are all printed as 0 so can't then use that in the above link.
And if you have a corporate mandated virus scanner...it is like your computer is having a 3 way with itself.
They're probably not retweets then.
https://gyazo.com/93d64e1f4d7ab72b286d3725aa07b0f9 The tweet in question
Hi, I'm a bot that links Gyazo images directly to save bandwidth. Direct link: https://i.gyazo.com/93d64e1f4d7ab72b286d3725aa07b0f9.png Imgur mirror: https://i.imgur.com/suqOk22.png ^^[Sourcev2](https://github.com/Ptomerty/GyazoBot) ^^| ^^[Why?](https://github.com/Ptomerty/GyazoBot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/u/derpherp128) ^^| ^^[leavemealone](https://np.reddit.com/message/compose/?to=Gyazo_Bot&amp;subject=ignoreme&amp;message=ignoreme)
Dates are hard. Like mind-bendingly hard. Date math is even trickier. If you are doing date arithmetic, NodaTime's `LocalDate` is the correct type to use. You can get away with using `DateTime` with a kind of `Unspecified`, but it doesn't work as well as NodaTime's `LocalDate`. The NodaTime package is designed to keep you from shooting yourself in the foot.
You can look at DevExpress too. I believe their report engine has a free trial period.
For a junior developer: - Knowledge of `git` or at least some recent experience with version control systems. Even if it is just you doing hobby projects, use a version control system (git, svn, bazaar, mercurial). The concept of commit history and how to diff files should not be uncharted waters. - Basic skills in the language being used (C#, C++). - Some knowledge of design patterns and application structure. - Understanding how you learn (books? videos? examples? demos?). - GitHub knowledge (for us) is a plus, but can be taught. - Personal skills (how well do you play with others). For a senior developer, we'd want more knowledge of the MVC and other frameworks. The ability to troubleshoot. Broader skill set.
C# Interactive Window Live compiling and executing c# command line. Very useful for quickly testing something you suddenly forgot, like what happens if you try to console.writeline a string that == null or something else you are unsure about
Whaaaaaaat i always used external services for this
I've worked with Crystal reports and Stimulsoft reports. Crystal reports is free but a bit ugly and micro-intensive with designer. But it gets the job done. Stimulsoft is fancy and good looking, easier to work with, lots of tutorial samples - probably easier to start with, but you need to buy license. You can google stimulsoft to see how it looks. It still has its own painful buggy issues if you try to use complex features.. crosstab eegh. Whatever you decide to use, keep the reports as simple as possible.
I just always use SSRS reports.
In the immediate window you are in the context of where your breakpoint is. And C# interactive you are not. You can load your assemblies in using #r "{path to dll}" if you want to reuse/test some vode you have allready made.
I use DevExpress for reporting and have been super happy with it compared to a number of other reporting tools that we've used over the last 15 years. 
If you don't have any code selected, it will auto indent the whole file. No need to select anything!
Just an FYI if you didn't know: SSMS is nothing but the VS editor shell with some custom plugins for dealing with SQL. Not sure what version they're using now, but with 2014 they were using the VS2010 shell.
I use this feature all the time too. Prop and Propfull snippets always speed up the coding process.
Nothing is in it. It's either null or empty. You should always at least set the array or collection up like this: char[] chararray = new char[] { };
It's useful for cross-platform development. If you're not trying to do something like UWP, Android, and iOS for example, then you probably shouldn't be using it.
Since when is Crystal reports free? When we used to use Crystal, we had to purchase licenses.
The main question is why do you want to instantiate them via DevEntity? That approach is not architecturally correct. 
Using Teamcity installed on my dev machine to run a CI based on the package repo. Tests are run, nupkg is created, and Teamcity has a built-in nuget (and symbol) server that sucks up these pre-release packages. Then a build step pushes master-branch changes to a shared nuget server (after pre-release iteration is done), so it doesn't get polluted by a bunch of test builds. Using gitversion to assign any and all package version information, with version numbers stripped out of the projects. Push 'testing' branch to the repo and a '1.3.6-testing' nupkg shows up. Merge to master and it turns into '1.3.6'. Other devs can target my machine's nuget server to test pre-release packages. Using .NET Standard 1.3 in as many parts as possible, while other parts use Framework or Core as needed. Would recommend using a local build/serve process for development, especially if pushing to a widely used nuget server. [Nuget doesn't support .NET standard cleanly yet](https://github.com/dotnet/standard/issues/481), so you have to use a MSBuild task for those parts and 'nuget pack' the csproj for Framework parts.
Using Sql Reports Server at work, from business reports to shipment labels. If you already using SQLServer you can't go wrong with it.
I think there used to be a free cut down version you got with ... possibly a Visual Studio license. The normal software is 400quid or per seat.
What's the SSRS? MEAN!
Sequel Server Reporting Services
Do they happen to offer form creation (think mail merging marketing material) or is it just standard reporting? We use Crystal currently for forms and it’s not as good as we’d like. 
It’s the services that are sometimes installed with SQL server that generates the reports. SQL Server Reporting Services is what it stands for, as someone has already pointed out. 
I don't understand what C# being cross platform has to do with using a VM?
I'll have to wait till I get home to post a snippet, but the exact same code works just fine on a laptop, but throws errors on a VM. I suspect OpenGL is attempting to access a non-existent GPU and doesn't know what to do with itself. Is there some way to force a "software mode" on it?
Any advice on using report viewer in MVC? Or is it the old standby still with using aspx pages?
hey! if you don't want something complicated just try this open source library: https://github.com/matthidinger/DoddleReport 
+1 for DevExpress.
Thanks. Among all the great answers here, this is what I was really after. I have not tried it yet, but it seems exactly what I wanted.
Do not use Crystal Reports whatever you do. Its old as hell and clunky and has a million little stupid quirks. 
There is an option in VS to always keep them sync'd. It should be enabled by default IMO but is not.
I really haven't noticed this, is it a massive project or do you have addins?
Resharper is my only add on. The solution is big, but probably not huge. But switching branches will lock up VS for 5 to 10 minutes. VS 2015 is worse than BS 2017.
&gt;Resharper is my only add on Do you disable R# before changing branches?
Could be, or could just be big. Or old. Truth be told, the older it is, the bigger the mess, normally. I have a junior second year in now. I am still amazed how completely out of whack his understanding of this or that part of the system can be (and he worked in the area previously). It's about the accumulated historical decisions ans what they mean, largely. A codebase of 10 years has seen its fair share of functional requests that didn't fit the original ideas of what it should do or what it will need to do :-).
That seems worse that the disease.
I don't think that's a good idea generally. Comments are *hard* and hinge on a good understanding of the subject being commented, which he will not have. Make personal notes, perhaps?
You can re-enable the R# slowdown after you've changed branches.
I need to do that. The problem is, the new guy is likely to produce either irrelevant, or wrong, stuff. (In my experience). It's a waste of time, or a hit and (largely) miss. A better idea are a small, sometimes mundane, well defined and well encircled changes. So that the guy gets to work the codebase for something useful, not wander around at random.
I can also disable git integration...which is useless to me anyway (really, I use the command line every time, I will never trust the integration anyway). But I use resharper constantly. Plus, that will make me wait for resharper to reinitialize when I enable it again, so I’m doubtful there will be any time saving. Plus it saves me the unwanted aggravation of wondering why my shortcuts aren’t working, then have to slap myself because I forgot to re-enable resharper.
I strongly endorse SSRS. If you choose something else, you would be wise to avoid Telerik.
The other answers here are dismissive and only talking about the cross platform aspect. There are other reasons to use .NET Core. * It has better performance, and ASP.NET Core on .NET Core has better performance as well * It can be installed side-by-side with different versions (you aren't forced to choose between 4.6 and 4.7, for example). * It works better with containers * You will eventually have to be experienced with it for job relevance anyways, so you might as well use it where appropriate
Same for switching build configs when you have any more than a handful of projects in a solution.
They support mail merge, but I've honestly never used it. 
Yeah, but doing code review on a guy who keeps changing stuff without realizing that he's making the code-base inconsistent.. well, it's not ideal. I'm not arguing against change, not by a longshot, but if you change something once, you may need to change it 30 other places as well, in order to ensure the code base is consistent in how things are being done. At the end of the day, I'd rather accept some minor code smell, as long as its consistent, rather than things being done differently in every part of the application. If it's a larger/systematic issue, then the junior dev is most likely not yet competent enough to solve it.
If you want another window you can drag to another screen, select Window -&gt; New Window. You now have two tabs for the same file, and you can drag them around as you need.
1. Create stored procedure for report data 2. Create report template using SSRS/Visual Studio 3. Deploy file to report server 4. Call report service from C# project to display report 
Do not use Crystal. There is no reason to do that. They are awful to use. I personally prefer using SQL Reporting Services for everything.
If you are using 2016 or better (I think it was 2016 anyway). They switched to an HTML viewer. No more wrapper for the Web Forms controller to make it work in MVC. It is much clearner IMO.
yup sorry "free" meaning it comes with visual studio license
I use some Microsoft Mouse driver that allows program specific settings. I've got the back button on the mouse setup to navigate back, forward does "go to declaration" and middle click closes tab.
Oh man crystal reports was the worst, a year ago I was working on a project to rewrite the interface for the document printing service and we still had to generate them in crystal, at the same time we were updating the reports from 2010 to crystal reports 2015 conversions were a pain and some weird scaling issues from the conversions were causing some bizarre text kerning 
Macros. They were under-appreciated and they don't exist any more. Change text casing: ctrl+shift+U shift+U
We only did a small project (barcodes on labels, running in web browser) with Telerik but we didn't encounter any problem so far. What's hiding in the shadows?
Thank you! Ctrl + [, s. for me though.
Correct, Windows 8 (WinRT/Metro) apps can run on Windows 10 (UWP), but not vice versa. WinRT/Metro is dead. If you want to write apps for the app store, you have 2 choices really. Legacy API bridged with Centennial. So this is writing a Win32 based application using Win32 directly or WinForms or WPF. The benefit to this approach is that your application will run on ALL version of windows that run on x86/x64 hardware. For non-windows 10 versions, you can't distribute your application via the App Store (since it doesn't exist), but you can still provide it to users through other distribution channels. Using Centennial, you can "bridge" your app into the App Store for windows 10, the downside is that your app will only install on x86/x64 windows 10 machines, so that means no ARM based computers like Windows 10 Mobile or Hololens. I don't know if XBox can run Centennial apps or not. Your next choice in UWP. UWP apps will only run on Windows 10 based computers. So that means Windows 10, Windows 10 mobile (the few of us there are) XBox and Hololens. --Personal Opinion starting here-- I'm a LOB windows developer. I've dabbled with UWP, but my bread and butter is Win32/WPF/WinForms programming. If you want to write a UWP as a learning exercise, go for it. If you want to write an application for money, I wouldn't do it yet. I would write the application using WPF. UWP really doesn't have much going for it economically. There isn't a large enough installed base to offset customers you will be giving up by using it (since UWP can only run on Windows 10, but the majority of PCs aren't Windows 10 yet). WPF was the precursor to UWP. The design patterns in UWP were pioneered in WPF (MVVM, XAML, etc). If you follow good design principles, migrating a WPF app to UWP shouldn't be too hard. A lot of your code from WPF should be able to be reused. You can still offer app to Windows 10 user by using Centennial. Windows 10 Mobile users and Hololens will be left out, but Windows 10 Mobile is officially dead and Hololens isn't a consumer product yet. 
Bro it sounds like you have some impostor syndrome going on. It sounds like you're killing it. I think that yes you absolutely have your proficiency sky rocket when you're living and breathing systems every day. You should get out there and interview as much as you can ASAP. And don't worry about the non-hires, you'll get something. I have a question though - why did you start doing that kind of work instead of actual programming work with a CS degree?
CTRL + K, then CTRL+K again to set a bookmark then CTRL+K, CTRL+N to navigate to the next bookmarks REALLY HANDY i hate seeing people use visual studio clicking and scrolling around between 3-4 tabs while doing paired programming
No I think you are right, the way Yuuki is talking about is more the right way. 
Ok I will have a look at that way instead.
&gt; There’s lots of interesting articles by, for example, Scott Hanselman and Jon Skeet (of course many others too these are just off the top of my head). However these are almost never posted at all on here for some reason. Be the change you'd like to see in the subreddit. You can post these articles; many of us would be happy to upvote them.
You are already ready. 
Sounds like you have the experience to back you up. Go for it.
Good to know, at work we have a 140+ project solution. Takes about a minute to open in 15.4.
&gt; I also have this idea that your proficiency skyrockets up after you get actual job because you are forced to "deal it" and you actualy learn from real life sutiations instead of trying to simulate and learn stuff yourself. Is that true? I would say that yes, this has been my experience.
triple click works too
I've stopped using git integration in any ide. They are all terrible except in the most happy path work flow. They have also tended to cause confusion in newbies to git. Using dedicated tools for git (sourcetree/git extensions/gitkraken//smartgit/whatever) has made things much smoother.
&gt;If you have ever used an MVC framework before, you have likely seen some huge controller classes that are filled with many different actions. I saw this for the first time recently, 30+ dependencies injected, lots of unrelated action methods Edit: Oops, reply to this: https://www.reddit.com/r/csharp/comments/7dsmdb/net_core_mvc_vs_razor_pages/dq05999/
Alright, the update went through, and now I've gotta add this optional property stuff. [Here's an example .json.](https://pastebin.com/Bm6KTxmc) Took a look at that thread, and uh, it's too abstract for me, and doesn't deal with the same sorta scenario. There's a .json file, with records inside a container. Some properties of the records are optional, with those properties not being present in some of the records. I need to just change one property, that will always be present, for a large number of the records. Same as before, but now I have to manage these optional properties. [Source code's here if it's of any use.](https://github.com/MajinCry/Fallout-4---TSB-Item-Havok-Disabler/blob/master/Fallout%204%20-%20TSB%20Item%20Havok%20Disabler/MainCode.cs)
Interesting that solution loading didn't use multiple cores until now. And by interesting I mean unbelievable.
&gt; smart variable naming suggestions This makes me irrationally excited.
Crystal Reports is shit. It is not "the shit" it is simply shit. You'll spend more time scraping it off of your shoe than you'll ever save by using it. I quit one job because of their refusal to consider alternatives to Shit Reports and once turned down a pretty good job offer because they were looking for someone to help them start using it. Try to get someone to justify the up front and continuing costs of using that turd-burger of a product. Go ahead, try. The only reason anyone uses it is because it was what the company was using when they started working there. The person who made the decision to start using it (circa 1989) has long since died from a painful STD infection that led to a poorly attended funeral.
just do it dude! You just gotta put yourself out there and start interviewing. Don't cry and worry over companies that pass you by as it wasn't meant to be and trust me you don't want to force fate - that never works out. Put your resume out there, start interviewing and what's meant for you will come your way - good luck!
Thank god for this thread. This is something I do all the time in Vim, and it always frustrated me trying to figure it out in VS.
Thank you so much for your feedback! Will amend to use UTC
Thanks yes will amend to use DateTimeOffset. I can see it has the timezone on the end which works well.
Thanks to you and /u/phxvyper for taking the time to comment and also explain some new concepts that I'll likely come across down the road.
What the hell...!? Why so freaking huge?
Thanks a lot, I agree and was thinking of how to solve this problem. Will try to implement this!
This is really encouraging to hear, thanks so much for taking the time to review it and provide feedback.
This is great, will have a look at this to get a better understanding of OO code and try to implement it when writing code. Thanks
Nice will look into NodaTime as I can see working with dates can cause some issues. Thanks a lot
Huh...TIL. Thanks!
https://docs.microsoft.com/en-us/aspnet/core/index
Not uncommon. Our monolith solution has 376 projects. 
Enterprise™
How many lines of code? 
Are you using resharper too? I get the impression that it struggles with larger number of projects.
I use the command line. Bonus is the command line is pretty darn consistent for Windows, mac, and Linux.
More importantly is Local variable type inference `var` and generics done right.
No, we don't use resharper anymore. It does have issues with large projects, it's constantly reindexing and locking the UI. We do have a tool to make subsolutions, which we use a lot, since usually any team will be using 20-30% of the monolith solution. Sometimes it's possible to use R# with those subsolutions.
I work on cad software that has 6 million lines of code spread for 55 solutions. On solution takes a full minute to load in VS 2015. This will be great. 
Column-based copypasta. Want to add (or remove) “this.” to the beginning of a series of lines? 
Wait, they discontinued lightweight solution load? Didn't they just spend heaps of effort to get that into 15?
I've never used Foxit's API, but if you're looking for something that has lots of examples and is free, check out iTextsharp. https://github.com/itext/itextsharp
I deal with this problem by having a powershell script in the project that that creates a deployment directory, copies the required files to it and calls mage (the command line clickonce utility) to create the manifest and application files. 
I'd love to see the ability to just load VS minimized instead of taking over the screen on load. 
Welp, I guess it's time to publish a Dumb Variable Naming Suggestions ext. `MsgQueueRequest whyTheFuckDidYouUseThisClassYouMoron;`
It depends. If you are building a service layer to be used internally, most people go strongly-typed since you have control over the contracts, the underlying implementation and the application using it. If you are building something for generic use, then returning JSON/XML is standard practice which requires some query operations. 
Just jump in man you've got more than enough. Honestly what I'm looking for is someone motivated to learn on their own, is easy to get along with, and takes pride in their work. Everything else is gravy
It probably provided the foundation for this feature. I tried lightweight solution load a couple of times (all small solutions though), and after a while it would just crash during solution load until i turned it off. So my guess is they ripped it out, and replace it with this instead.
Try CodeRush. It piggybacks on the Roslyn compiler so it shouldn't bog down as much as Resharper. (Not a shill, honest. I've just been using CodeRush forever.)
Same here. Even on small solutions lightweight solution load didn't really work for me.
Old code. Really, really old code.
Yep. Including tests, the one I'm working on now has more projects than it does controllers. They want to go to "microservices". If they keep the same breakdown, there could be 8 to 10 projects per microservice/controller. 
I got in to my current position after dropping out of uni, having regular professional work under my belt, and having made some minecraft plugins / personal projects in a completely different language. It's all going to differ based on who you know, your area, and current demands, but the most important thing in job interviews is having a sense of confidence. It took me doing some online commissions for pennys and wanting out to get that confidence though.
I have 170+ over here in one part of the codebase. This stuff ships together, there's an installation for it etc, so whoever did it, did it. They even went from multiple solutions to one at the time. Same discussion as multi-repo vs. monorepo, really. It definitely can be split into parts, in fact they already exist in the solution itself. What I do is: when working on something, I unload other parts. So I work with, say, 20 projects at a time (prod code + test code). The thing is, between spending time to split or spending time waiting for the solution to load, it's marginal, even if I accumulate the time until retirement :-).
I just go to another window.
&gt; On average, 50 percent of all solutions opened by Visual Studio users open in ten seconds or less. This isn't very clear. Does that mean that 50% of **all** projects take more than 10 seconds and in addition, assuming average is the mean, then 25% more still take more than 10 seconds. It's good to see progress but that's seems like really damning with faint praise. 
10+ years of legacy, no knowledge of microservices or best practices when they started out, lots of coupling. Oh, the coupling. The idea was that we need a solution that contains everything so that when it’s rebuild there are no issues with dependencies. I spend 15-30 minutes at the start of my day just getting the latest version, clearing all bon/proj folders, and rebuilding.
I need to find a persistent way of storing unique data without any collision and use it to store information about a Person in a local database. Is this the best way to do that?
I started working as IT Specialist because at my CS Degree courses there were only basics of programming and in my mind i never went above basics, and i always had in my mind an image of this "great smart programmer" who is just killing it and is very passionate and knowledgable and i just didint fit that image, so i was afraid im not going to make it. I thought i need to do some beginners work first. I always wanted to be a programmer and i was dabbling in it outside of school/uni for fun, i started from programming simple trojan horses in middleschool and uploading them to school computers and i would remotely open other people cdroms and they would freak out. Later i felt i lacked motivation because i didint had good access to computers and so my learning was prolonged in time.
I used it and it works quite well. The only bad thing i can mention is, that they changed the name of the api in one update. They deleted or added a space to the name. That was the only issue i ran in into 2 years. 
I know GitHub but i learned it just recently while i was learning about MvC model. I have basic skill in c# and by basic i mean knowledge about most language features like delegates, events, lambda, linq, extension methods, dynamics, object oriented stuff like inheritance, interfaces, indexers, abstractions, async and await, exception handling, nullables and other stuff. I also use Resharper. I have basic knowledge of MvC and MvP models, i never worked on a real MvC project and all my knowledge is from onliny courses. But i know basics of routing, authentication, authorisation, validation, web api, controllers and models, entity framework. I have very little front end knowledge, as for javascript, i played screeps for 100 hours. I learned from books and video courses, but i also learned alot from trying to write something and then googling the problems that were emerging (thank you stack overflow). My personal skills are bad, i mean im clean and ironed and i present myself well but im an introvert and in teenage years i was struggling with social phobia. But i can cooperate with people in work enviornment, social interactions are just draining for me.
Doing the same thing doesn't mean doing the same thing the same easy/good way. 
Im not using ReSharper at all and I love vs. 
Sequential Guids probably
&gt; Sequential Guids So what I am doing is wrong?
What you are doing works too. Guids are guaranteed to be unique on the same system, and across systems a collision is astronomically unlikely.
Thanks! I think the max number of Person I am going to store would be around 500-2000 anyway.
I have changed my question try to better explain what i am trying to do, hope someone will help.
I've never understood the interest in splitting stuff into as many dlls as possible. We had one "library" that in effect had only a couple of functions per dll (this is even still C++ times when dll setup wasn't quite as throwaway) and the fuckers even got into interdependency so they had to be compiled in two stages. Then there are the "localization" dll's where we have a single form that is just a bit adjusted per different country. Made so because "we might need to update only one form in production" after a decree that "we don't to hotfixes anymore". ffs. Luckily the newer generation mostly did away with that and we have mostly DA/BL/API division with a testproject per layer and an integration test project. and the web stuff that is another brainfuck altogether.
I've been pushing from multisolution into single solution. For build only. I use a separate "company.project.dev.sln" for development work and add needed projects as needed. There are issues with project/dll references with that, but mostly things work out ok.
People read that abstractoion is good and then take it way, way too far. 
Do you really have that much churn that you really need to rebuild it all? We have ~350 projects for the top-level framework, and in day-to-day work I don't update it completely even monthly.
I think I know what you meant because I wrote an abstraction over a DB layer not so long ago and was wondering the same question. I came to the conclusion that returning IEnumerables is more efficient in the long run.
This is what I was looking for! Thank you.
It is currently in the Highlights. Big discount :)
Depends what you are doing. If you're writing an abstraction over an ORM (like Entity Framework) returning an IQueryable is leaking implementation details, and a big no-no - you're exposing the internal workings of your service layer, which may change over time. For example if you moved to another ORM, which doesn't use IQueryable, any client which uses your service will have to re-write, and may depend upon IQueryable behaviour. Personally I return IEnumerables, which forces me to iterate the query before returning..
I'm working on 3 monitors so I may open VS preemptively knowing I'm going to need it after I finish what I'm working on or I'll need the code in another project for reference so I open another VS instance and then go back to what I was working on. You have no idea what monitor VS is going to open on but it will usually pop up on the monitor I'm working on taking focus of what I'm typing. So now you have to wait for VS to load enough so you can minimize it and then figure out where the typing stopped.
IReadOnlyCollection is what you should be returning if possible. The next best is IEnumerable. IReadOnlyCollection is 1 level higher giving you access to the Count property. 
I don't think this is how it works. You need to render the file first in a format the printer can understand and then you send that. RawPrinterHelper just sends raw data to the printer without doing anything to it. There's a PrintDocument class in System.Drawing.Printing which might help? I'm not an expert at getting stuff to the printer, so hopefully someone else can fill in the details :) 
below is an example of what gets outputted with an example &gt;/* FECCG shortcode[fancyEnum,these,values,are,examples,]*/ &gt;using System; &gt;public struct fancyEnum { &gt; public const int error = -1; &gt; public const int min = 0; &gt; public const int these = 0; &gt; public const int values = 1; &gt; public const int are = 2; &gt; public const int examples = 3; &gt; public const int max = 3; &gt; &gt; private int value; &gt; &gt; private fancyEnum(int value) { &gt; this.value = value; &gt; if(this.value &gt; max) this.value = error; &gt; if(this.value &lt; min) this.value = error; &gt; } &gt; &gt; public static implicit operator fancyEnum(int value) { &gt; return new fancyEnum(value); &gt; } &gt; &gt; public static implicit operator int (fancyEnum record) { &gt; if(record.value &gt; max) return error; &gt; if(record.value &lt; min) return error; &gt; return record.value; &gt; } &gt; &gt; public static implicit operator fancyEnum(string value) { &gt; switch(value.ToUpper()) { &gt; case "THESE": &gt; return 0; &gt; case "VALUES": &gt; return 1; &gt; case "ARE": &gt; return 2; &gt; case "EXAMPLES": &gt; return 3; &gt; } &gt; return -1; &gt; } &gt; &gt; public static implicit operator string (fancyEnum record) { &gt; switch(record.value) { &gt; case 0: &gt; return "THESE"; &gt; case 1: &gt; return "VALUES"; &gt; case 2: &gt; return "ARE"; &gt; case 3: &gt; return "EXAMPLES"; &gt; } &gt; return "ERROR"; &gt; } &gt; &gt;/* &gt; any code placed after this &gt;*/ &gt; &gt; &gt;/* &gt; and before this will be preserved when using FECCG to edit an enum that was previously created in FECCG &gt;*/ &gt; &gt;} 
You should say something a bit more to make us all feel comfortable, otherwise - despite it having a cool acronym name, people will (stupidly) think downloading a random executable from the internet is somehow dangerous or a really, really fucking stupid way of introducing viruses or botnets and totally compromising your computer.
Is it really worth code generation? Checking whether value is invalid can be done with Enum.IsDefined(Type, Object) - so you don't need that "magic" error, min and max. Implicit conversion operators are probably just evil, but anyway there is no need to generate them - Enum.Parse(Type, String) and Enum.ToString() are just enough. You could write all this as set of extension methods if you really need, but I would definitely avoid having such amounts of boilerplate generated by some closed-source exe.
VS is a pile of shit. They are scared to even attempt to recompile it into 64-bit... they'd rather make excuses about how bad 64-bit is... that's how sad their development team is.
You can also view the code [here](https://github.com/judilsteve/fastmusic/blob/master/Utils/IEnumerableExtensions.cs) (with bonus optimised versions specific to the List class): 
Two points. * What is the point in generic, If you have to send type? * What is the point in .net if you duplicating type info?
1. The behavior of Current is undefined when the previous call to MoveNext() returned false. It may throw an exception or just return the last element forever. 2. You should check the return value of MoveNext() to determine the end of the enumeration, not the value of Current. If T is a value type, it will never be null; if T is a reference type, null may be a valid element of the collection. 3. GetSlices() may be returning an infinite collection because the slices are generated lazily. I'll take another look in an hour or so. 4. From past experience, this kind of thing is a real pain in the butt vs building a yielding a list for each chunk. Is this something you're doing for fun, or is there an actual problem you're attempting to solve?
A struct would probably be faster, since it's not a large object (unless T is, itself, a pretty large struct, but T looks like it's probably an object reference). It's probably not a significant performance issue versus the time spent at the DB or on wire time between the DB, host, and client. Have you tried profiling your system?
I could as well have used the new pattern matching feature and make a class for every result to achieve the same behaviour, but I haven't made so because I'm lazy. I don't get the second point.
Yeah, I was using IEnumerator wrong. I assumed by convention that MoveNext had return type void and so was null-checking current. I've now changed the code to use IEnumerator properly and everything is working nicely.
Yes, T is a reference type. I have not tried profiling it yet. Thanks a lot, tho
This made me realize; despite over 10 years of professional experience in C#, I have never once tried to print something with it
If you have a high end printer you may just be able to copy files to it like it’s a network share and have it print them
People think microservices are a structural pattern and not a design pattern 
I️ may be misunderstanding but it sounds like EF would do this for you 
I would like to avoid using Entity Framework for now if i can.
* A fickle "designer" view (some report customizations break it) * Poor support for scenarios with complex parameters * Worst: poor documentation Whenever we wanted to do something "weird" in SSRS, we could use a combination of the primary documentation and SO answers to figure it out -- I can recall only one case where a compromise on acceptance criteria was required. Our track record with Telerik has not been so good.
You probably should split the method in two GetDevTaskList()
Well the thing is that is what i have right now x number of GetDevTaskList methods, but all the code in them are the same except the List's they use, I am trying to refraktor my code away from that.
GetDataFromSql() is very ambiguous and could work only if you implemented overrides for each repository by using either Interface or base/derived classes. You would have to implement repositories, but in the end it would look something like this devTaskList = devTaskRepository.GetDataFromSQL(); devPersonList = devPersonRepository.GetDataFromSQL();
What's your problem currently? Connecting with the rest API? parsing json? evaluate data? 
Sometimes it's deployment issues, where you need domain objects on both sides of the network connection. So you end up with a minimum of: Domain (DTO) shared assembly Domain Tests Client Client Tests Server Server Tests And that's even before the architect gets involved. 
Removed: Rule 4. You'll have to make an attempt, show some code, or at least get into more specifics about what you need help with. Break the problem down into its parts and focus on solving each one individually.
I really wouldn't worry about the performance impact of a single class allocation in a Web API, the object is going to be serialized and copied across buffers and compressed and so on anyway before it reaches the client. 
Try out other IDEs and then come back and say how shitty VS is.
Thanks. I know iTextsharp but I am working in a commercial app and I can’t disclose the source (to comply with the AGPL license). The commercial licensing of iText for my usecase is expensive (starts at 12¢ per document!)
Why not use Skip and Take?
FYI, you should convert your javadoc comments into XML comments.
For getting a bunch of consecutive slices, skip and take requires starting from the beginning for every slice. Plus I just wanted to get my head around yield return and IEnumerable.
I have to say that I like Rider a lot more. That said, I don’t think VS is shitty. 
&gt; AGPL There are older versions, which if they work for your needs might be more compatible with your licensing requirements. IIRC it was licensed as LGPL / MPL.
Yay, implemented a few more features from ReSharper. Now if only they could get the rest of them so I can finally uninstall it.
https://www.nuget.org/packages/iTextSharp-LGPL
Nah, I can't do that. I don't know what kind of printer the program could end up being used on.
Awesome. Thanks!
Removed: Rule 4. There are actually [quite a few resources](https://www.google.ca/search?ei=dEIUWtzXCsrPjwTnxK-ICA&amp;q=WPF+interview+questions&amp;oq=WPF+interview+questions&amp;gs_l=psy-ab.3..0j0i20i263k1j0l8.5967.7806.0.7973.19.7.0.10.10.0.180.658.0j4.4.0....0...1c.1.64.psy-ab..5.14.802....0.cZdljCW-_fA) on WPF interview questions. Brush up on your XAML and databinding. Maybe a bit of Entity Framework (or at least understand how to access data sources). Basic ins and outs of user controls, styling, MVVM.
So maybe go for generics and create GetDataFromSQL&lt;T&gt;() ?
Excellent. Thanks. 
Does this work with winforms?
I think the most important element of WPF windows development is understanding the benefit of the MVVM pattern and how it's utilized in WPF. If you know the MVVM design pattern, then picking up WPF is pretty easy. What other web technologies are you familiar with? Most javascript frameworks nowadays use very similar patterns in terms of how they bind up view elements to properties on a model. If you've used observables in angular and 2-way binding then you'll understand the concept. The js framework most analogous to WPF I've used though is KnockoutJS, the way the binding syntax works in the DOM is very similar to binding VM properties in XAML. It's also worth knowing about DI, and the various IOC containers out there, as WPF apps inevitably end up with quite a lot of services building viewmodels. There are also a few MVVM frameworks that some WPF developers use, the most popular of which is probably Prism. I've never used any of these, so I can't really comment on their usefulness, but their aim is to componentise your app and de-couple your code. I'd say have a go at building a quick hello world style app, it's the best way to learn. Something simple like a window with a textbox that accepts input, sets a property on your viewmodel, and a label that updates when the property updates. Look into the `INotifyPropertyChanged` interface, and practice implementing it, and look into implementing the `IValueConverter` interface and using a value converter in some XAML. Probably worth understanding about just how extensible XAML is for customising UI components. Pretty much any standard UI element can be extended and modified without limit in XAML. Have a go at building an app that takes, say, a `IList&lt;string&gt;` as a property and binds it to a `ListBox`'s ItemsSource, and give it a custom `DataTemplate` that prints out each value. The tutorial I used to get started was this, but it's a bit old now: https://www.codeproject.com/Articles/140611/WPF-Tutorial-Beginning But to be honest I just skimmed it, I always enjoy just getting my hands dirty and diving right in!
Could you post what you use? I'm not that adept at PowerShell.
the issue here is one of saving time with boilerplate/making your code more readable by removing function calls. it makes sense, for a project like a game, to skip all that due to just how many enums a game will want to use. making a handy generator that lets you import and re-export the changes lets you dynamically handle huge bundles of data and lists of resources and types in a game-program situation much more powerfully than a few extension methods would (also making you not need to remake extension methods for every new enum)
Isn't this the use case for the new Span&lt;T&gt; feature?
Hello m8s, im learning c# and sql for my final project of OOP classes, and i want to know, is it possible to populate buttons according to the selected item of a treeview/combobox? See the image for a better understanding: the buttons inside the black square will be present on all forms, while inside the red square i want to change. thanks in advance
simple solution, Tab control with borders / header hidden. Change the tab page when treeView/Comboboxes are updated.
I️ would use buttons with a visibility of collapsed 
This feels overly complex - for example, this Chunk function would do what it sounds like you're planning on doing: public static IEnumerable&lt;IEnumerable&lt;T&gt;&gt; Chunk&lt;T&gt;(this IEnumerable&lt;T&gt; source, int chunkSize) { var chunkItemsFound = 0; var chunk = new List&lt;T&gt;(chunkSize); foreach(var item in source) { chunk.Add(item); if(chunk.Count == chunkSize) { yield return chunk; chunk = new List&lt;T&gt;(chunkSize); } } if(chunk.Count &gt; 0) yield return chunk; }
`System.Object` is the actual type as defined by the CLR. `object` is a C# alias for `System.Object`. Why does C# has aliases? Probably because the authors wanted to have usage of primitives a bit nicer to read, but did not want to artificially wrongify the names in the .NET framework. `int` is definitely nicer to read than `System.Int32`, but the latter is more correct.
Yep, that's what I'm seeing in this project.
That's reasonable. Unfortunately my current project isn't like that.
Depends on your chosen technology. If it were WPF, I would bind the SelectedItem/Index of the TreeView/ComboBox to a property in a ViewModel. When that property is set, fire methods or events that modify other properties. At that point you could work towards what /u/Dusterthefirst said by having a Boolean and a Converter to change the Visibility state, or what /u/darkspy13 said and modify the state of the TabControl Headers. But I'll suggest two additional alternatives: * Use an ItemsControl, and bind its contents to a collection that contains the Buttons. Change the collection to change the buttons that appear on screen. * Add multiple DataTemplates to the container control (Window or UserControl) that change the resulting child control (set of buttons in a WrapPanel or something) based on a SelectedViewModel. Then use a ContentControl to bind against the SelectedViewModel, and the correct buttons will be automatically shown.
Usually I have three projects: pure models, services (business logic/data access), and API (REST or WS-*). Plus tests of course. Each layer indicates what dependencies I want to allow such as "models can't access the database". **** My current project, DTOs are considered an "implementation detail" so the services project can't use them. Instead it uses a project containing interfaces that mirror the DTOs. I'm learning all about the fun bugs that can cause with serialization engines.
It's called [duck typing](https://en.wikipedia.org/wiki/Duck_typing)
Also, the aliases are more familiar to people coming from C-style languages (e.g. `float` vs `Single`).
No, it's not. This is completely unrelated to duck typing.
Both Forms and WPF supports binding attributes to variables. Just add a on selection change which changes those variables.
Ah, I see. Yeah, ok. Note that this is about losing focus, not a big window. Note also that you can go to your original window right after the one that popped up stole focus (no need to wait "to load enough"). Finally, I think that taking focus is not VS particularity - when I start program X, I expect it to get focus, normal behaviour.
1. The more you mess around, the more you learn. Do the tutorials, yes, but more importantly try and do something new with them. 2. Don't stop learning. Don't be the smartest person in the room. 3. If you can't explain in detail best practices and why to use them, you need to. For example: REST, OO, DDD, TDD, BDD, SOLID, IOC, modern frameworks/architectures, cloud services (Azure, AWS) 4. Take time to learn social skills and politics in the business. Be visible. 5. Learn to balance code quality and speed of results. Being on either side is okay, but delivering bad code slowly is really bad. 6. Become a domain expert in your business/company. The more you understand the business needs the better you can design your code and sound intelligible in meetings. 7. Understand the Agile vs Waterfall debate and when and how to successfully be a part a methodology. Now, for specific C# items: 1. Learn an ORM like EF or DAPPER. Understand the benefits and limits. 2. 
why arent you using /// to make auto docs in visual studio above a class variable or method name?
 using Object = System.Dynamic.ExpandoObject; What could go wrong?
GUI = Graphical User Interface GUI Interface = Graphical User Interface Interface :)
What is your use case for this? The only time i specifically used IEnumerable is when I always need to traverse every item. Like if I was building a table or needed a count of specific items. Is the source data type always an IEnumerable?
Maybe even write a converter from bool to Visibility bound to a property in the viewmodel.
Don't worry, I'll just make a GUI Interface using Visual Basic!
Are you trying to track an IP address? 
We have quite a large service that processes messages in less than milliseconds. Most of the stacktrace appears to happen instantly, according to the logs. This is not counting the time we wait for webrequests, of course. We use this implementation of the result class: http://enterprisecraftsmanship.com/2015/03/20/functional-c-handling-failures-input-errors/
Everything
This says he's at 354.-1.4.000!
Lots of good answers already. In your viewmodel have a collection to bind the treeview to, and properties for the visibility of the buttons (that raise the property-changed event). Binding your treeview to the collection of objects that include properties for the visibility of the buttons (or button collections) that you want to show/hide. OnItemSelected event of the Treeview handled in the viewmodel, and then set the appropriate properties for the visibility of the buttons (or button collections).
No, `Span&lt;T&gt;` only works on contiguous memory, while this works on any `IEnumerable&lt;T&gt;`.
[False.](http://s2.quickmeme.com/img/22/22bad6f6c8addfc3841edbc436b7d4773e036ea52f4d7694265a78ea3bd89ff0.jpg) using Object = System.Dynamic.ExpandoObject; using Duck = System.Collections.Generic.IDictionary&lt;string, object&gt;; Duck what = new Object(); var everything = new Object(); what["CouldGoWrong"] = everything; Compiles and no runtime errors. [Nothing went wrong.](https://i.giphy.com/media/Pn9AIstfAM9QA/giphy-facebook_s.jpg)
I've never been able to print anything I didn't first have to format with code. If the document is loading in your program you might be able to take a screen shot. Take a look at http://www.developerfusion.com/code/4630/capture-a-screen-shot/ and see if it helps you out.
 Or it can be kept on and give you tons of useful info :) (also, free version doesn't have this)
This is amazing. No. YOU are amazing.
 I'm not sure what you're referring to, but that's not what codelens does. CodeLens adds source control and reference information to the top of methods / properties, it won't do anything inside of your actual code, nor tell you what the properties are.
But wait! You need a GUI interface to track it across the screen!
Using struct has benefits of not dealing with null value as well as making Result type immutable. F# has Option type which is immutable and allows to check if underlying value is valid before accessing it. There are several implementations of functional types for C#. For example here: https://github.com/louthy/language-ext/blob/master/README.md
Morelinq provides a [Slice](https://morelinq.github.io/2.8/ref/api/html/M_MoreLinq_MoreEnumerable_Slice__1.htm) extension method that seems to do your job. 
Please see: https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/types/boxing-and-unboxing
Span&lt;T&gt; and the cast are available in .NET Core, .NET Framework (through System.Memory portable NuGet package), through .NET Standard. I am not sure why you are not seeing the cast, as you did not provide source code nor the project file. But what you can do is try using System.Memory preview1, not preview2 packages. "Preview1" is actually a newer package that "preview2". 
Removed: Rule 4. There are resources in the sidebar. You can also check out the learning resources at /r/learnprogramming and at https://unity3d.com/learn.
I'm going to need way more alcohol
Those are just aliases. For example `object` is an alias for `global::System.Object`. The latter looks like that because .NET uses a type hierarchy. 
While you're absolutely correct, it's not like any of the high level concepts these languages are used for are particularly difficult from one language to the next.
According to this page this is planned for C# 7.3: https://github.com/dotnet/roslyn/blob/master/docs/Language%20Feature%20Status.md
Anything is possible :D *Some things require more effort than others.
All those enumerators. I don't see much value over existing structures.
&gt; var r = (0..100).Step(2); I don't like it at all...
Not at all related. `Int32` is not a boxed version of `int`, like it is in Java. 
https://stackoverflow.com/a/14092982
Explain to me how this question has anything to do with boxing conversions and/or methods on value types?
 no, it's still no. In no way does this deal with boxing or unboxing.
Sounds about right. From the print driver page on MSDN: &gt; If you want to print from a Windows Forms application, see the [System.Drawing.Printing](https://msdn.microsoft.com/en-us/library/system.drawing.printing(v=vs.110\).aspx) namespace. 
Also while we're on the speculation train, it's possible they wanted to make it easier to port Java code to C#, where Java actually has a difference between `int` and `java.lang.Integer`.
When you say 'print it exactly as it was', does that mean you want to print it as text (e.g. unicode or ansi or hex (i.e. 2 chars per byte)) or some other simple transformation of the file bytes or are you expecting a .NET application to be able to take a Maya 3D Model file (for example) and render it for you? I suspect you want the latter, in which case it's simply not going to work - most document formats cannot be dumped straight to a print driver (there are a few exceptions) and need to be rendered into an image format that the print driver can understand. There are thousands upon thousands of document formats out there (most of them proprietary and heavily copyrighted) which you're not going to be able to handle unless, maybe, there is software on the machine which can be called upon to render and/or print the document. If you had a list of the document formats you were interested in, or if it was a case of being able to print any format for which there was already an application installed to handle it then people might be able to give you some specific help.
[Nice](https://i.imgur.com/NmHlGiZ.png)
Not sure how this is relevant either. `int` and `Int32` compile to the exact same code - there is *no* difference other than needing the `System` namespace imported to use `Int32`.
 using Int32 = System.Object; What could go wrong? int notBoxed = 1; Int32 boxed = notBoxed;
You could just call `Guid.NewGuid()` to get a unique value. Guid's already define Equals() and GetHashCode(), so you don't need to create your own class.
depends on on how you use it, boxing will happen is what that says. 
It would be nice if they supported oob a way to intersect, union, complement, contains, is contained both for items and other ranges. Something like `[1..10] contains [3..5] =&gt; true`
Ranges will implement `IEnumerable&lt;int&gt;` so you could use Intersect, Union, etc. on them, it seems like.
That’s not boxing and unboxing (well, a little bit), that’s called shooting yourself in the foot. Still, this has nothing to do with OP’s question. 
Isn't Intersect defined on `ISet&lt;T&gt;`
[Nope, it's an extension method for IEnumerable](https://msdn.microsoft.com/en-us/library/bb460136%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396)
Ok, right!
Google is your friend. https://msdn.microsoft.com/en-us/library/6sh2ey19%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396
Collections in general are your friend. The above URL refers to Lists which are perfect for this use, but you should learn about all of the types of collection because you will use them a LOT. Especially once you learn LINQ (which will rock your world).
In my experience, a service layer output should be strongly-typed. IEnumerable&lt;&gt;, specific objects (not entity), etc. are fine. Internally, in the service layer, you will want to keep things as IQueryable as much as possible to maximize the filtering done on the data before fetching from the DB.
I use ExpandoObject for all of my data IO. It's amazing how hard it is to debug when it breaks.
I wouldn’t exactly call that a “detailed design”, but ok, it’s a start. 
I see that you also enjoy debugging ExpandoObjects on large scale applications.
I don't know why you need to store the numbers, but as others have mentioned, you can add them to a list. Beyond that though, you're assigning the "sum" to the wrong variable in your loop. You `ReadLine` and assign it to iHeltall, then immediately overwrite that with `totalSum` Something like this would suffice: var number = int.Parse(Console.ReadLine()); var totalSum = 0; while (number != 0) { if (number % 3 == 0) { totalSum += number; } number = int.Parse(Console.ReadLine()); }
 Console.WriteLine("Skriv in ett heltal!"); //Uppgift 35. Är på standby till senare. int iHeltal1 = int.Parse(Console.ReadLine()); List&lt;int&gt; list = new List&lt;int&gt;(new int[iHeltal1]); while (iHeltal1 != 0) { if (iHeltal1 % 3 == 0) { Console.WriteLine("Ditt tal är går att dela på tre."); iHeltal1 = int.Parse(Console.ReadLine()); Console.WriteLine(list); } else { Console.WriteLine("Ditt tal går inte att dela på tre!."); Console.WriteLine("Skriv in ett till tal!"); iHeltal1 = int.Parse(Console.ReadLine()); list.Add(iHeltal1); } I tried solving it like this, but it only says "System.Collections.Generic.List`1[System.Int32]"
Hi there, I'm a C# developer who has worked with printers professionally. I can tell you right now that you have to convert your document sources into a printer friendly format. You should probably convert them into either PDF or Postscript depending on how old the printer is. If it's a printer from the past ~10 years then just use PDF. If it's a legacy industrial printer then you should consider Postscript. Once you have it in a printer-friendly format, then you need to send that document to the printer's document store. This varies from printer to printer and there are a variety of techniques. TL;DR: Convert the file to a printer format. Find out how the printer receives files. Not all printers work the same.
Ok, I haven't been a fan of several of the changes lately (I think they make the language too hard to understand for a beginner) BUT I like this one. I can't tell you how many times I've had to write: Case 0: Case 1: Case 2:
I won't like, seeing this: foreach (var i in 0..10) { Console.WriteLine(i); // 0, 1, 2, 3... } hurts me.
It's not clear to me from the proposal whether `foreach (var i in 0..10)` would go from 0 to 10 or 0 to 9, like Python. One one hand, I'm for consistency across languages for a given piece of similar syntax. On the other, I always thought 0..10 producing 0 to 9 was not intuitive.
Haven't you heard? SWITCHES ARE BAD!!!!!!!!!?!0
See [here](https://github.com/dotnet/roslyn/blob/features/range/docs/features/range.md#inclusive-and-exclusive-ranges). The proposal mentions it could be exclusive on both ends, or inclusive, or either with different syntax for each.
switching on an int in 2017 noooo
just some more syntactic sugar... i think this is relatively useless tbh, maybe i just need to see the use cases in other languages that use it
Anything is possible if you believe in Jesus
Rider - superior VS Code - superior VS - shitty Case closed.
Thanks for the link. Of those, I like the Rust syntax (.. and ..=).
Nice, this is something I've wanted for a while, even just replace the need for calling Enumerable.Range() when creating a list of numbers. 
see https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/ado-net-overview
whoops i mean see this - ADO.NET https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/ado-net-code-examples
This works for me. ... $mage="C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.6.2 Tools\mage.exe" $ver=(get-date -Format yy.MM.dd.HHmm) $temp=$env:TEMP $x="$temp\DEPLOYDIR$ver" New-Item $x\AppFiles -ItemType Directory Copy-Item bin\Debug\* $x\AppFiles Remove-Item $x\AppFiles\*.pdb &amp; $mage -n Application -fd $x\AppFiles -t $x\AppFiles\YOURApplication.manifest -v $ver -p msil &amp; $mage -sign $x\AppFiles\YOURApplication.manifest -certfile "F:\MATE_TFS\MATE_SCM\BuildAndDeploy\StaticConfigFiles\YOURCertificate.pfx" -password YOURCertificatePassword &amp; $mage -n Deployment -AppManifest $x\AppFiles\YOURApplication.manifest -v $ver -t $x\YOURApplication.application -i false -n "YOURApplication" -p msil &amp; $mage -sign $x\YOURApplication.application -certfile "F:\MATE_TFS\MATE_SCM\BuildAndDeploy\StaticConfigFiles\YOURCertificate.pfx" -password YOURCertificatePassword start $x
Other than foreach (var i in 0 .. 9) { /* blah */ } being less efficient than for (var i = 0; i &lt; 10; i++) { /* blah */ } I guess this is nice. It's not quite pointless, I don't really think it's going to excite me unless there are some interesting applications for overloading the .. operator.
make an extension method that has your ADO.NET inside? `public static void GetDataFromSQL(this List&lt;class&gt; stuff)` then youd use it like devTaskList.GetDataFromSQL() although id suggest /u/Edziss101 repo pattern instead.
`case int x when x &lt;= 2 &amp;&amp; x&gt;= 0`
And the fourth circle is explaining to managers who think they are cleverer than you why it is difficult. 
Couldn't you do either of the following? new List&lt;int&gt; { 0, 1, 2 }.ForEach( i =&gt; System.Console.WriteLine(i) ); or foreach(int i in new int[] { 0, 1, 2 }) { System.Console.WriteLine(i); }
Oh, you're in for a treat! &lt;3 /u/Enlogen got it right. I'd just extend it to this 2 websites, you can do your research on which one suits you best (though, if you're still not sure after looking into it, go with .NET Core): 1. [docs.microsoft.com: ASP.NET - Core](https://docs.microsoft.com/en-us/aspnet/index#pivot=core) 2. [docs.microsoft.com : ASP.NET (.NET Framework)](https://docs.microsoft.com/en-us/aspnet/index#pivot=aspnet)
Wrong. Switches are the best. They have Breath of the Wild.
GNU's not Unix?'
If the main purpose for these ranges is enumeration, I don't see the point in having open ranges.
I don't really think they are mainly for enumeration. They seem to be more for specifying the idea of... well, a range, useful for defining things like Spans. Open-ended ranges could allow for easily grabbing all elements "up to the end" of an array, without manually calling `array.Length` all the time. Also, with some extra open-ended range aware LINQ extensions, you could do things like `[1..5].Intersect([3..])` and have it return 3, 4, 5. Open ended spans would probably need to be yet another Type though, to make non-open ended things easier to implement, and avoid dangerous things like accidentally creating an infinite loop by trying to enumerate to infinity.
do a `foreach (var i in list)` `{` `console.writeline(i)` `}`
Cool. Thanks.
Hey, this is awesome! I feel you could add the extension methods implementations for completeness
I look forward to their use with spans. For example: string_view(buffer[str_offset:str_offset+len]) to have a zero-copy view of a string contained withing a byte buffer.
The marks in the scroolbar.
`switch/case` and looping aren't the same construct at all.
Sure does!
int remainder = 0; int total = 0; do { Console.WriteLine("Please enter a number:"); var input = int.Parse(Console.ReadLine()); total += input; remainder = input % 3; } while (remainder != 0); Console.WriteLine("Thanks for your numbers!"); Console.WriteLine($"The total is {total}");
 int remainder = 0; int total = 0; do { Console.WriteLine("Please enter a number:"); var input = int.Parse(Console.ReadLine()); total += input; remainder = input % 3; } while (remainder != 0); Console.WriteLine("Thanks for your numbers!"); Console.WriteLine($"The total is {total}"); I had to guess at the translations.
I'm a little confused by the 8.0 feature "Default Interface Methods" and how it's different from just using base classes.
For fun, I added what open ended ranges might look like: https://github.com/crozone/roslyn/blob/features/range/docs/features/range.md
I missed the part where ranges can be used in patterns.
You can use `Enumerable.SequenceEquals` and LINQ with ordered enumerables. `Enumerable.SequenceEqual(enumerable1.OrderBy(o =&gt; o), enumerable2.OrderBy(o =&gt; o));` That said, what are you trying to accomplish here?
You could also get used to LINQ and use the Aggregate method. [This post](https://stackoverflow.com/questions/7105505/linq-aggregate-algorithm-explained) has a good explanation. You've already got all your numbers added to the list with your code above. When you break out of the loop you can do this: var sum = list.Aggregate( (a,b) =&gt; a + b); Console.WriteLine(sum); In laymen terms, the aggregate method performs the same operation over and over on an enumerable (in this case, `list`) and aggregates, or adds, it to the running total. The aggregate takes 2 parameters, the running total and the new value. So in this case `a` would be the running total, which starts at 0, and you add `b` to it. It will go through your whole list in this fashion and spit out the sum at the end. LINQ is a little more advanced, but you're going to run into eventually. It's great for working with collections.
My guess is that since you can only inherit from a single base class, this gives you a way to implement multiple concrete implements of an interface without having to override it. Seems nice in therory because I hate having to implement an interface in a class just to duplicate the code for it and using an abstract base class just doesn't cut my use cases.
Oh boy. You could fill encyclopedic volumes with everything that's been discussed about this feature, the questions for its existence, and the _strong_ opinions one way or the other.
&gt; Why would they do this? I just can't see a reason. Consider this block of code in today (`SortDirection` is an enum with 2 defined values: `Ascending` and `Descending`), without the proposed change to reference types and nullability: SortDirection direction = ComputeSortDirection(); string arrowText; switch (direction) { case SortDirection.Ascending: arrowText = "UpArrow"; break; case SortDirection.Descending: arrowText = "DownArrow"; break; } WriteArrowText(arrowText); This looks like valid C#, but it's not: there are at least 254 legal cases that are unhandled by the above switch statement. Therefore, as far as the compiler is concerned, the `arrowText` variable might still be uninitialized when passed to `WriteArrowText`, so this is considered to be a syntax error. Even if we "know" that `SortDirection` will never be directly assigned to something like `(SortDirection)42` or come from an invalid stream, either the language or the runtime (you decide which one) is getting in our way a little bit here. There are three obvious ways I can think of to resolve this: 1. Add a `default:` case handler that either replaces or covers one of the existing two cases, 2. Add a `default:` case handler that does something exceptional if this does happen, or 3. Initialize `arrowText` to null before the `switch` I don't really like #1, because it invites confusion for the reader... "what do you mean, 'default'? There are just two possibilities!". A former version of myself would have favored #2, because it explicitly documents the assumption in code... today, I almost always favor #3 over #2, because it avoids introducing code that's almost provably never going to get run. So let's look at my favorite solution... it's the same as the above, just with `arrowText` initialized to `null` and two lines called out as "interesting". SortDirection direction = ComputeSortDirection(); string arrowText = null; // Interesting Line 1 switch (direction) { case SortDirection.Ascending: arrowText = "UpArrow"; break; case SortDirection.Descending: arrowText = "DownArrow"; break; } WriteArrowText(arrowText); // Interesting Line 2 Now let's consider what happens after I turn on this new feature, but before I make any changes to the code. I expect this block to start generating a compiler warning / error / whatever, on at least one of these two "interesting lines". In fact, I **really hope** that it will, to the point where I would not respect the feature if it didn't, because these are exactly the kinds of situations I want to know about. I also **really don't want** to have to resort to adding a `default:` case to this switch block or surrounding something with `#pragma warning disable 42069` or something along those lines, just because the compiler doesn't want to (or can't) prove that `ComputeSortDirection()` can only return one of those two values. I just want the compiler to know what I know: I've evaluated the situation, and I've concluded that `WriteArrowText` will never receive a `null` reference, [damnit](https://github.com/dotnet/csharplang/issues/556)!
I think I'd rather have multiple base classes.
Why would anyone want that feature? It does nothing but dirty the line between interfaces and abstract classes.
Well, you can't use object inheritance with structs.
It's an abstract class that can't have real fields (but can simulate them using the same trick DLR uses).
I have to disagree. I see it as one more piece of poorly designed C style syntax dying.
my code makes images like: https://imgur.com/rxLiK6k
This is a new dev here, likely in school still, or learning on how own. They shouldn't touch linq until they know how to do things the hard way, otherwise they won't really understand what they are doing. 
When you call Last(), you're using the extension method Enumerable.Last&lt;T&gt;( this IEnumerable&lt;T&gt; source ). This method doesn't know that what's passed to it is a LinkList&lt;T&gt;, only that it can be enumerated. So, it has to go all the way though to find the end.
This is really cool, good job MS.
live and learn! wow!
Wow, that's really cool
using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace Kenneth_ForquerENG_115 { class Program { static void Main(string[] args) { Console.WriteLine("Kenneth Forquer ENG 115"); List&lt;Question&gt; question = new List&lt;Question&gt; { new Question("What stage bleed air is used to start the engine?", new string[] { "8th", "9th", "1st", "13th" }, Question.multipleChoice, 2), new Question("Igniters spark to combust the fuel.", new string[] { "true", "false" }, Question.trueAndFalse, 0), new Question("What is the 1st stage in the cycle of the Gas turbine?", new string[] { "Intake", "Exhaust", "Power", "Combustion" }, Question.multipleChoice, 0), new Question("What is the 3rd stage in the cycle of the Gas turbine?", new string[] { "Compression", "Combustion", "Intake", "Exhaust" }, Question.multipleChoice, 1), new Question(" What is the last stage in the cycle of the Gas turbine?", new string[] { "Compression", "Power", "Intake", "Exhaust" }, Question.multipleChoice, 3), new Question("Ngg refers to speed.", new string[] { "true", "false" }, Question.trueAndFalse, 0), new Question("Npt refers to torque", new string[] { "true", "false" }, Question.trueAndFalse, 1), new Question("What are the LM2500 metering points?", new string[] { "3", "2", "5.4", "All of the above" }, Question.multipleChoice, 3), new Question("Which of these are a component of the compressor?", new string[] { "Inlet Plenum", "Gearbox", "Stator", "All of the above" }, Question.multipleChoice, 2), new Question("What company manufactures the LM2500?", new string[] { "GM", "Ford", "Toyota", "Rolls Royce" }, Question.multipleChoice, 3) }; for (int i = 0; i &lt; question.Count; i++) { Console.WriteLine("--------------------------------"); Console.WriteLine("Question #" + (1 + i).ToString()); if (question[i].Ask()) { Results.AddResult(question[i]); Console.WriteLine("Press any key to continue to the next question."); //Console.WriteLine("--------------------------------"); } else { Results.AddResult(question[i]); } Console.Clear(); } Console.WriteLine("--------------------------------"); Console.WriteLine("End of the first attempt."); int tempScore = 0; for (int i = 0; i &lt; Results.firstResults.Count; i++) { if (Results.firstResults[i].isCorrect) { tempScore++; } } Console.WriteLine("Your current mark is: " + tempScore + "/" + Results.firstResults.Count.ToString()); Console.WriteLine("--------------------------------"); Console.WriteLine("Press any key to continue..."); Console.ReadKey(); Results.RunSecondAttemp(); Console.WriteLine("--------------------------------"); Console.WriteLine("End of the Quiz!"); int tempFinalScore = 0; for (int i = 0; i &lt; Results.finalResults.Count; i++) { if (Results.finalResults[i].isCorrect) { tempFinalScore++; } } Console.WriteLine("Your final mark is: "); Console.WriteLine(tempFinalScore + "/" + Results.finalResults.Count.ToString()); if (tempFinalScore &gt; 5) { Console.WriteLine("Good Job!"); } else { Console.WriteLine("Better luck next time..."); } Console.WriteLine("--------------------------------"); Console.WriteLine("Press any key to exit the console..."); Console.ReadKey(); } } } namespace Kenneth_ForquerENG_115 { class Question { public string question; public string[] answers; public bool isCorrect; public string inputAnswer; private int correctIndex; private string questionType; public static string trueAndFalse = "TF"; public static string multipleChoice = "MC"; public Question(string q, string[] answersList, string typeOfQuestion, int correctAnswer) { question = q; questionType = typeOfQuestion; if (questionType == multipleChoice) answers = new string[4]; else if (questionType == trueAndFalse) answers = new string[2]; for (int i = 0; i &lt; answersList.Length; i++) { this.answers[i] = answersList[i]; } correctIndex = correctAnswer; } public bool Ask() { Console.WriteLine(question); if (questionType == multipleChoice) { Console.WriteLine("Input an answer from the following possibilities..."); } else { Console.WriteLine("Please input 'true' or 'false'... "); } for (int i = 0; i &lt; answers.Length; i++) { Console.WriteLine(answers[i]); } Console.WriteLine("--------------------------------"); inputAnswer = Console.ReadLine(); if (inputAnswer == answers[correctIndex]) { Console.Clear(); Console.WriteLine("Correct!"); isCorrect = true; Console.WriteLine("Press any key to continue to the next question."); Console.ReadKey(); } else { Console.Clear(); Console.WriteLine("Incorrect."); isCorrect = false; Console.WriteLine("Press any key to continue to the next question."); Console.ReadKey(); } return isCorrect; } public void PrintQuestion() { Console.WriteLine(question); if (questionType == multipleChoice) { Console.WriteLine("Input an answer from the following possibilities..."); } else { Console.WriteLine("Please input 'true' or 'false'... "); } for (int i = 0; i &lt; answers.Length; i++) { Console.WriteLine(answers[i]); } } } } namespace Kenneth_ForquerENG_115 { static class Results { public static List&lt;Question&gt; firstResults = new List&lt;Question&gt;(); public static List&lt;Question&gt; finalResults = new List&lt;Question&gt;(); public static void AddResult(Question questionResult) { firstResults.Add(questionResult); } public static void AddFinalResult(Question question) { finalResults.Add(question); } public static void RunSecondAttemp() { Console.Clear(); Console.WriteLine("Attempt #2:"); for (int i = 0; i &lt; firstResults.Count; i++) { Console.WriteLine("\n--------------------------------"); Console.WriteLine("\nQuestion " + (1 + i).ToString()); if (firstResults[i].isCorrect) { Console.WriteLine("\nThis one was correct!"); firstResults[i].PrintQuestion(); Console.WriteLine("Your answer: " + firstResults[i].inputAnswer); AddFinalResult(firstResults[i]); Console.WriteLine("Press any key to continue to the next question."); Console.ReadKey(); } else { Console.WriteLine("This one was wrong on the first attempt! Please try again."); if (firstResults[i].Ask()) { AddFinalResult(firstResults[i]); Console.WriteLine("Press any key to continue to the next question."); } else { AddFinalResult(firstResults[i]); } Console.WriteLine("\n--------------------------------"); } Console.Clear(); } } } } This is the code if anyone wants to see. 
Yeah, I'm not going to run some random program someone posted on the interwebs. Source or redo it as a web app if you want anyone to try it out.
I hope they make ranges inclusive like Fortran and not Python. Or make a separate offset and count type of operator. Like `12:3 = 12,13,14`
That would be horrendously inefficient though, since the extension method would enumerate the range to a buffer and compare every element in them, rather than just comparing the boundaries.
If could be very useful of they allow auto implemented operators. If an operator is defined for a type to automatically define it for an `IEnumerable` of that type. Now you can only fly manipulate collections in predefined ways (like negating all numbers) without having to explicitly write out `.Select()` or `.Zip()` every time.
I think I'd rpefer writing extension methods for those use cases rather than clutter up the language.
Unless the compiler optimizes that down to a `for` loop under the hood, isn't it far less efficient? It has to create an enumerator, and return an int for every iteration. Probably not a massive issue, but... it just seems dirty.
Disclosure: I'm not a proponent or opponent; more of an optimistic skeptic. I don't think abstract classes cover the same use cases, from reading about its development. I feel like the primary importance regards solutions for multiple inheritance. In fact, the Motivation section in OP's link provides some succinct use cases for this. ###API change security I'm not 100% clear on why this is desirable. Generally, if an API changes, _and the consumers want to update_, the consumers update their code and move on. However, I can envisage scenarios that offer a safer upgrade path, or perhaps ease the burden of back-porting bug fixes or security updates. This also sounds like a lazy solution looking for a problem that can be resolved other ways, _but_ programming is often about the path of least resistance anyway. ###Interoperability I have not had to work in this realm, so I can't really picture the scenario. That said, who can argue with interoperability? ###Traits Combined with the requirement to provide explicit implementations when there is ambiguity, this sounds like a nice solution to the diamond problem. Composability is a good thing, and this allows classes, rather than methods, to be composed. I wonder how this will play with DI.
Looking forward to use this. Also would like to have a for each with the index included. Something like `foreach(var row, i in rows)`. I could still do `foreach(var i in 0..rows.Count())` but it's not as nice. 
I suffer from a rare disease in which one of the symptoms is to repeat words
You should consider not using the IEnumerable&lt;T&gt;.ForEach method. It's a kludge and the .Net folks consider it a mistake.
I guess I never thought about it, but I had always assumed it'd be inclusive. Why would it be anything else? The whole point is to use the values that are shown. It doesn't surprise me that python excludes the tail, though, they've always made strange language decisions.
is called "im dumb" haha, but seriously, i meant "gui project", not "gui interface " :x
I'm just giving you guff. Don't worry. :)
ha - I found a second place where I used LinkedList.Last(). Another nice speedup! Now I can watch my process run up to about 7.9 GB - task manager shows like 90% of memory used... and the thing still runs fast, like a minute or two. I'm making an image with about 23M pixels... good enough!
Yep, it's hard to explain to somebody how big a building is when they can't even imagine how tall it is.
Roslyn can optimize a foreach for certain types and enumeration strategies, including creating a for loop or unrolling the loop entirely. I couldn't tell you if that applies to this feature that doesn't yet exist- however writing a parser for ``foreach (var i in 0..10)`` isn't that much harder than ``for(var i = 0; i &lt; 10; i++)``, as they have the exact same information, and could thus be constructed into an AST identically. 
One very big omission (that I'm sure will be fixed): Is it possible to have a range where `Start` &gt; `End`? For example, is `[8..2]` a valid range representing all the values from 8 down to 2? 
Switching on enums is super sexy though
&gt; they've always made strange language decisions. "strange" is one word for it...
Yep, there would need to be optimised extensions for `Range` that do this more efficiently. It could get interesting if ranges are allowed to be negative (like `[8..2]`). It could also get interesting and really cool if they implement an `OpenEndedRange` or `UnboundRange` that can have infinite lower and/or upper bounds, like `[x..]`, `[..y]`, or `[..]`. 
I agree with you. I was hoping for methods on the range class. 
Ah, I did that because I knew it existed...I haven't touched .NET in a while. Thanks!
Excuse my ignorance but why is switching on an int bad?
Excuse my ignorance but why is switching on an int bad?
This “I” bug was fixed. Update your OS.
It feels kind of like a mistake.
meh might as well make an enum for better readability and maintainability.
If you've ever googled "C# mixins", you know.
I hope he's just kidding. But seriously, enum or string (const) is usually better for code readability and there is no "performance hit" because they're int switches internally.
this is pretty advanced. its like your teaching someone new to javascript how to use smart pointers in C++
I like the idea of ".." as a shortcut to Range object but other things are not that great: 1. There should be int range only or some kind of generic range. Not int range and long range. Why no char and short or unsigned ranges then? It should be either one simple int tuple or generic class. 2. Range with step should not be present. It should be in a separate library if needed. I have found need for steps only in a very few very specific scenarios. It just overloads language/standard library with niche functionality. 3. There should be no exclusive ranges. Just use -1 if end value should not be included. Keep it simple. 4. Open-ended ranges. This looks like alternative version of Linq. Kill it now. Keep feature simple. 
tl;dr: enables performance enhancements and solves some pretty hard problems down the line.
C++ has abstract virtual methods with default implementation. Looks very similar. In C# that could be kind of nice and it should not affect language too much. 
&gt; It could get interesting if ranges are allowed to be negative (like [8..2]). That is a tricky one. In the proposed design, this should probably be a `RangeWithStep` with a negative step. Forcing APIs to handle negative `Range`s would be problematic, since for example the given use case of array slicing couldn't just use normal `Span` slicing for that. However, there isn't any way for an operator to return different struct types based on the values of the operands, and I can't think of any good solution for this. For constants the compiler could give the `..` operator special treatment and select `Range`/`RangeWithStep` depending, but for variable operands you'd have to box the returned range structs into an interface, and then you either need to constantly cast to `Range` or are back to the problem of all consumers having to handle both types of ranges.
And I think I'd rather see that attached to multiple base classes, honestly. Interfaces don't seem like the most appropriate place for such since they're API declarations.
Others have made suggestions which are a little advanced for your level, or outside the scope of your problem. Your implementation is fine, if a little clunky, there's just one problem: `iHeltal1 += Math.Abs(totalSum);` This adds the absolute value of totalSum to the `iHeltal1` which just got assigned a new value in the line above. += adds the right hand side to the left hand side, so you end up with `iHeltal1` being the initial value of `iHeltal`, plus the new value, which isn't what you want. My guess is that what you meant to do here is : `totalSum += Math.Abs(iHeltal1);` so that `totalSum`, which lives outside the `while`loop, will always have the sum of all the values `iHeltal1` has had. Then you can print your `totalSum` in your `else` block.
VS Code is not an IDE, it's a code editor. That's like comparing Notepad and Word
a do while loop? yuck. regular while is fine.
Why store the numbers in a list when he could just store the sum in an int?
Probably. But the for-each loop used to be slower than a for loop and they eventually optimized it to the point where for-each is now faster in some circumstances. 
&gt; Generally, if an API changes, and the consumers want to update, the consumers update their code and move on. That's not a reasonable request when talking about the base class library. 
I maintain that argument is bullshit. You can do the same thing with extension methods and helper interfaces (e.g. `.Count()` and `ICollection`).
What if the value can go out of range of the enum? 
Can you have a Step value that is negative? 
There is a long running meme that switch is evil and you should instead use inheritance or the *visitor pattern* whenever you would otherwise use a switch-like construct. Of course when asked to demonstrate what this looks like it becomes clear that the proposed alternatives to switch are slow to run and cumbersome to write. (Which shouldn't be surprising because when that's not the case, we don't reach for switch in the first place.)
he wanted to know how to write all numbers from a list....
It behaves correctly. This is more of a matter of philosophy, with the argument that you don't want code that alters data mixed in with code that performs list comprehension. Personally I always use a for-each loop to make it easier to see where the data altering code is, but I'm not going to complain if you use `.ForEach`.
I assume you can, however the standard `Range` type doesn't contain a step value so it would be up to the enumerator implementation to decide that.
&gt; Range with step should not be present. It should be in a separate library if needed. I have found need for steps only in a very few very specific scenarios. It just overloads language/standard library with niche functionality. Any time you're generating a report or working with UI, there is reason to apply a style to alternating rows.
I think negative ranges should be allowed, but the method should throw `InvalidOperationException` if it doesn't make sense for its use case. A descending `Range` doesn't necessarily imply there should be a step, so I don't think `RangeWithStep` is the right solution.
Then you're probably doing something wrong
In a 0 indexed system it seems reasonable to make it exclusive as not to explicitly have to account for lists going out of range
I am wondering if we need to have separate classes for Range and RangeWithStep, since Range kind of has an implicit step of 1. In what kind of collections supporting Range makes sense but supporting RangeWithStep doesn't? Also, step syntax seems to be more verbose than in something like python. It even requires enclosing the "range expression" with parentheses while in python it is something like start:end:step. 
Call the non async version or call .Result on it
Doing either will block.
His point is that using generic extension methods you write a single method that works across all enums. We've done the same in our (game) codebase. 
Basically it boils down to the fact that C# doesn't allow multiple inheritance and it's easier to do this than allow it. The line between interfaces and abstract classes is pretty dirty anyway. Interfaces have historically been implemented with pure abstract classes in languages that don't have a keyword. 
Piggy backing on how to move around files... Ctrl tab will swap files like alt tab does programs. Ctrl+T will let you type file names or methods to navigate to them as well.
Right... You have to if your calling method doesn't support async. What do you want it to do?
What is the bool return type used for? Do you need to wait on the async code to figure out what to return? Assuming the bool return value can be determined without waiting for the async code then you can just use something like `Task.Run` to do your async work and not wait for it. Doing that over and over in fast succession is a bad idea, though, so if this method is called very often in rapid succession then you would want to use some kind of batching strategy. I don’t know enough about your situation to give good advice about the best way to do that. If in fact the return value does depend on the async result then you have no choice but to block. There’s no way around that. 
Int sum, a; When a val is entered set as (a). Sum += a; Then just divide (a) by 3. If it can be, spit out the sum.
There is no magic that could make external synchronous code support awaiting your async code. It's just not possible without changing the rest of the code. If you cannot modify the code calling the callback, you have two options: 1. Don't use async and live with blocking the thread. 2. Start the async operation and return from the callback without awaiting the result. This is only possible if the callback doesn't need to return the async result, of course. You may also need to add additional error management since exceptions won't bubble up from the callback.
Definition of imposter syndrome man, look it up. It sounds like your honestly on the more advanced side of things work experience aside. Sell your self high and shoot for the moon, and you get a high paying job for sure. 
How is preview1 newer than preview2? Preview 1 was last updated 6 months ago, while preview 2 was last updated 5 months ago. And there are just those two versions on NuGet.
Arguably every range has a step, it's just implicitly 1 for `Range`.
&gt;I also have this idea that your proficiency skyrockets up after you get actual job because you are forced to "deal it" and you actualy learn from real life sutiations instead of trying to simulate and learn stuff yourself. Is that true? Yes, this is true, but you can find many of these real life scenarios online. I always recommend [Destroy All Software](https://www.destroyallsoftware.com/screencasts). He uses languages that you might not be familiar with but don't let that scare you. These concepts apply to every programming language. Computation is basically universal.
I'd rather proper Higher-Kinded Types or at least more expressive extensions (eg. Extension Properties) and the ability to specify operators or static methods in generic constraints. Usually Composition Over Inheritance solves the problems that I'd want to use multiple inheritance for, but sometimes I still run into problems with generic constraints.
 B = A[0..9].Select(x =&gt; -x) or B = A[0..9].Times(-1) is far clearer than B = -A[0..9]
structs are a bit different as they're a fixed size on the stack. If struct B inherits from struct A, but struct A is 20 bytes and struct B is 32 bytes, you cannot pass struct B to a method that accepts struct A without losing the extra fields (eliminating the benefits of inheritance).
You could put it in a background worker and cause it to not lock up the UI?
No, because those can’t be overridden and don’t have polymorphism. Default methods effectively emulate traits and mixins - those are very useful features that many OO languages lack due to their single inheritance. 
I believe that they are included in the link at the bottom of the article. If not, just get his nugget package. They hold all the extension methods he has created
It’s a perfectly reasonable decision (like many of Python‘s „strange“ decisions). You easily use those ranges for indexing arrays and likewise `for i in range(10)` works exactly like `for(int i = 0; i &lt; 10; i++)`. It’s rather common to have an exclusive tail as it’s fairly often an upper bound above the actual values. And if you need it inclusive, you just subtract one. 
&gt; There should be no exclusive ranges. Just use -1 if end value should not be included. Keep it simple. Inclusive ranges are so unintuitive. Almost every language I know uses exclusive ranges (so 0..10 has 10 elements and iterating over it does what expected).
I found .. and ... to be the most intuitive. Because, if you already know .. then ... is clearly "one more"; inclusive. Whereas ..= and ..&lt; introduce some new sign of which the meaning is not clear without further knowledge.
And yet it's still superior to VS. Come to think of it, Notepad is superior to VS.
No you don't get it. Adding more interfaces like that only makes the problem worse. Please read the full idea and the problems it is supposed to tackle (and please don't take this as an attack, try putting in some effort to understand) Extension methods are not useful at all here as each collection (if we use collections and linq as an example here) would need its own method. There are a lot of examples listed in the corrosponding github issues that make it clear why neither extension methods, nor additional interfaces will help. Now that that's out of the way consider this: - do I think they should give it another name? Yes definitely! - is the concept itself any good? Yes it's awesome - did they do a poor job educating people, and did they confuse everyone by "corrupting" an existing concept that we hold dear (interfaces and their intentional limitation)? Yeah totally. - is the concept still worth implementing? Yes, and if we have to change the meaning of some preexisting and well defined concept, then that is a price I would be willing to pay (even though it could have been solved more nicely by giving the thing a different name and its own syntax etc...) Side note: I hated the idea in the past as well, but once I saw what other stuff can be elegantly solved by it (that would be otherwise intractable issues) I came around to seeing that it isn't all that bad (still bad, but in the end it will be a net-positive for the language) 
Get whatever it is out of CVS and into something less shit?
You're most likely getting an exception and don't have a middleware configured that handles the exception and returns a sane notification to the caller. Add a `.ToList()` call in your query to enforce the call to the database to happen within the method, and not within the serialization layer. My guess would be that you use some feature that can't be translated by EF Core.
Only administrators are allowed to modify the program files directory by default. You have different options: - (Worst option) If your program is installed by an installer, you could configure it to set the access rights for the configuration folder to write for everyone, so your program can just update the setting. - (Best option) Store the setting in the user specific folder, not next to your executable. That means the setting will be user specific, but the user can modify it at any time. - (Second to best option) You can trigger a UAC prompt from within your application, which elevates your application to administrator level. This would allow you to store the configuration change in the program files folder. If the user does not has administrator rights, he will not be able to fulfill the prompt and you won't be able to change the settings.
What's DLR and what's the trick?
Spin up your own thread to do the uploading and pass data from the callback to your thread via a queue. 
How can you possibly say that? There are so many reasons why a value may go out of bounds on an enum. The most obvious being whenever you have to deal with external data.
Seems similar to this https://codegolf.stackexchange.com/a/22326
I did that and found that _context.Banktransactions.AsEnumerable() was giving an error. I removed that and right now it says "nullable object must have a value". I've added testrecords to my DB with all the correct values that should be returned when calling the "api/Factuurhistories" route, but it's still giving that error. Even if my query gives back 0 items it should return 0 items, not an error?
https://www.youtube.com/watch?v=4pXfHLUlZf4
&gt; I'm not 100% clear on why this is desirable. Generally, if an API changes, and the consumers want to update, the consumers update their code and move on. Heh. In a perfect world. In reality you get consumers who are screaming at you "We need feature A but don't have time to change all our code for feature B! We demand you remove B from the interface!" And this is sadly all within my company. 
Problem is you won't be able to reason about the developer's intention if it's `..` and `...`, because now you're left wondering if they accidentally forgot or added a dot. The other signs make the intention clearer.
Then it shouldn't be an enum, or you should be validating it as soon as it comes in to make sure it's constrained to the valid values of the enum.
I can't say that [this implementation](http://referencesource.microsoft.com/#System.Core/System/Linq/Enumerable.cs,41ef9e39e54d0d0b) is ok. It's very hacky way of doing polymorphism. 
The installer actually uses node.js, you can reuse the html+js in projects of your own. C:\Program Files (x86)\Microsoft Visual Studio\Installer\resources\app\renderer 
The spec doesn't mention anything about generators, but I'm hoping the IEnumerable&lt;&gt; implementation uses `yield return`. You addition for open ended ranges seems like the perfect demonstration for why I think that.
I don't understand why they need both `Range` and `RangeWithStep`. I feel they are the same. Range just has an implicit step of 1. Along that line, I don't see a need for `RangeLong` either. Just make `Range&lt;T&gt;`.
If you're intersecting two ranges with different steps, I don't think you can represent the output set as a `Range` anymore... you would have to enumerate them and store them. (1..10).Step(2) =&gt; [1, 3, 5, 7, 9] (11..30).Step(3) =&gt; [11, 14, 17, 20, 23, 26, 29] The union can no longer be represented by a single range.
Why less efficient? I presume the compiler will recognize the pattern and optimize it.
It should be possible to have the compiler recognize the pattern and optimize it to a conventional for() loop, but I didn't see that anywhere in the proposal: just IEnumerables as far as the eye can see.
Right, it's not a full spec. The C# team is going to think about it though. They spent a lot of time optimizing roslyn to handle stuff like this.
It's so much of a mistake that it doesn't even exist. (The mistake that exists is `List&lt;T&gt;.ForEach`.)
GitHub has a bunch of projects that might be helpful: https://github.com/topics/wpf?o=desc&amp;s=stars
old_trees !!!!!!!!!!!!!!11111111111111
I don't want to assume that sort of optimization would be in the initial release of this feature. I hope it's something they can put in for statically computable ranges, but I'm not going to hold my breath on it in the first release, either.
Your C# code looks ok. I would double-check your CVS command. Try running it from the command prompt first, maybe. 
the command seems to be the only problem. I was hoping someone could help me with that.
This is the answer. It's like people don't know how to solve these types of problems because async has existed their entire life.
Yeah, this really isn't the subreddit for help with CVS. Sorry. 
This is a good chat application, and the developer has a full series of YouTube videos to accompany the development. https://github.com/angelsix/fasetto-word/tree/47cffef752d5608be94154f78e6c5746aa28967b
I know. But there seems to be no CVS subreddit. /r/CVS is some kind of pharma company
Arguably, but a range doesn't necessarily imply a sequence - it's just a range. That's the reason why there are two types for stepped and un-stepped ranges proposed. A stepped range is only relevant for ranges that actually need to represent or be converted into a sequence, an un-stepped range is just a start and an end, with the context in which it's the used determining what it actually means. When an un-stepped range is being enumerated, it makes sense to imply the step is 1 (and -1 for descending), but for other situations like span, step isn't applicable. 
Check out this article. [.NET Equality](http://www.aaronstannard.com/overriding-equality-in-dotnet/)
The case matching seems nice, but it could probably be implemented separately from the rest. (I've never needed a case like that)
 for (var i = 0; i &lt; rows.Count(); i++) { var row = rows[i]; or, if rows isn't an indexed collection int i = 0; for (var row in rows) { i++; Or you could just use the Select or SelectMany overloads that provide indexes rows.Select((row, i) =&gt; I don't know how many different ways we need to do this sort of thing, really. Plus, is that syntax something that should be enabled for any collection that's indexed on int? If so, how do we handle something like a Dictionary or SortedList keyed on int?
DRY - don't repeat yourself
Try Stackoverflow. 
It seems like the compiler is already going to recognize `Range` as a special case, if you can use them in a `switch`.
The `...` operator is the first thing that occurred to me. And I immediately disliked it, because of similarity to `==` and `===` in JS, which causes no end of headaches. IMO, `0..10` without any prior knowledge looks like it's supposed to include 10. So I would prefer the `..&lt;` operator for the exclusive case, to make it more obvious.
do you enum, bro? you should be setting the enum on whatever object or property you are dealing with before it hits the switch statement.
Exactly. Would be great for [this](https://github.com/Entroper/FF1Randomizer/blob/master/FF1Lib/Treasure.cs#L34) to look a little nicer.
Yes-this was my fallback. Thanks
I feel that's the most intuitive as the 'base' use of the operator, you look at '0..10' it and you'll quickly think "Ahh, that goes from 0 to 10".
Or perhaps you lack imagination. :-) Think that I want do do something different when a value is 1, another thing when it is 2, 4, 8, and for all other values do something else. That something else being something that uses that value. 
&gt; Then it shouldn't be an enum Which is why I questioned why should an enum be always preferable. Sometimes it is not. 
Read this page in its entirety, it shows how to store settings that might need to change at runtime, without requiring admin privileges: https://docs.microsoft.com/en-gb/visualstudio/ide/managing-application-settings-dotnet 
k
yes the concept is quite similar! my approach has three phases: 1. trace out some random walks 2. stitch these together to make one big tree that covers the plane 3. color the tree The coloring sounds just like the code you referenced. But since my tree construction is more balanced, the tree is not so radial.
Can you please report back once you have the 15.5 update and tell us how long the new load time is?
Can you please report back once you have the 15.5 update and tell us how long the new load time is? 
Yup. &gt; Then you're probably doing something wrong Doesn't make this statement correct. 
In addition to those saying ForEach should be avoided, this also allocates a new array on each run. Be nice to avoid that too with this syntax. 
Take a look at TPL dataflow. It does this for you.
He said it was one possibility. There are things like the duff's device, or basically it's not worth it in any other situation in which either you don't have a semantic attached to the integer values, or the number of possible values is large enough. You will end up creating an enumeration that covers a whole bunch of the integer range, basically creating enum values names like `ONE_HUNDRED_AND_FIFTY_ONE` without gaining readability, and actually losing maintainability. Without saying there is also the possibility for typos. All that for not much gain.
/u/FizixMan, /u/thestamp, any of you wizards :(?
Yeah.... You should probably be putting some code blocks in your post so it's not such a mess.
Ah you're right. Sometimes its easy to confuse them.
How do I do that? Is it the same as using 4 spaces indents? 
Quick and dirty... I'd make the collection being looped against a constant if this was production code.
In addition to the (Best Option), you can save in a machine wide setting by using "all users app data". 
Your CVS command line is slightly wrong. I think you want something like: info.Arguments = "cvs -d :sspi:$Server:/$Company/Libs/dotnet/Framework checkout But also, the $Server and $Company need to be filled in with actual values...
Try reducing/simplifying the query. Start with a basic one and add one bit at a time. It's really hard to parse what you have there and what the various types are. If I had to hazard a guess, you're reusing `TLeft`, `TResult`, `TKey` in multiple inputs to your `FullOuterJoin` method. It's possible you're feeding in two different compile-time types for them. If C# can't determine what shared type they should be treated as, it can result in this error. You can also try replacing your anonymous types with explicit equivalent POCO classes. That might help you determine what generic argument of the function can't be inferred.
I would still disagree - it's excusing a weird design with another weird design: &gt; `for i in range(10)` works exactly like `for(int i = 0; i &lt; 10; i++)`. Which could just as easily be written `for(int i =0; i &lt;= 9: i++)` and `for i in 0..9`. It seems that we all forgot the reason why for loops exist, and have been poisoned by the very outdated thinking that drove the design of C. Even worse, what is `range(10)` supposed to do by intuition? Return `[1,10]`? `[0,9]`? Why bother using it if you can be explicit and just say `0..9` to get `[0,9]`? 
this is a massive query by any stabdard. Is it necessary? can you break it down into its parts, and optimize from there? whats the intended output? Is this better suited for a reporting tool like crystal or ssrs?
I don't understand that. Could you elaborate?
[Nothing](https://github.com/ufcpp/GraphemeSplitter/blob/8f8e445d16bbccc7fe26070376fd905f63ff2483/GraphemeSplitter/Character.GetGraphemeBreakPropertyV9.cs) wrong with switching on an int. I don't think I'd do it by hand though.
somone is at their desk haha
Commonly in Python you need to loop through a list but have the index as well. So you take the `len(A)` of list `A`, say it equals 5. Then `for i in range(len(A))` is a for loop where each iteration has i as 0, then 1, 2, 3 and 4. So `i`does not exceed the length of the array when used to index `A`.
go for it! theres a reason why the title "junior" exists: its so that you dont have to be stressed that you have to know everything. 
can't make it a constant - that's an object. Best you'd be able to do is a static readonly class level variable which is never pleasant to deal with.
Is this Forms? Is your issue alignment? Make a panel there, and add these Controls to the panel docked DockStyle.Left. Show/hide based on your selection criteria with Visible.
Work is overrated. Reddit is far better.
So why exclude only the last element? Why not the first? Pascal used to have inclusive ranges. This syntax also looks very similar to the list. 1,2,3 vs 1..3 Why anyone would think that 1..3 does not include 3 is beyond me. 
I remember being impressed with this project once. Related to a game, so unless you play it, it probably isn't interesting. However, the WPF-Fu is strong with this one. https://github.com/gibbed/Gibbed.Borderlands2
There were 4.5.0-preview2* packages uploaded by mistake. They are removed now. Could you update to the latest package, try the cast, and if it still does not work, please post the code.
Yeah, I tried that but it's mostly components or framework. I'm looking for full applications.
That looks nice, thanks!
I think I'll have to compile it to understand. Borderlands and WPF? wtf :D
I would use % operator for that. If I remember correctly WPF even had some simple way to apply alternating styles to the rows of the grid. 
It doesn't take any parameters? Maybe make it a view or stored procedure and then make a class that maps to it. That way you can use the SQL, and your LINQ query goes away...you'd just being selecting directly from the DbSet. Entity framework is best for modeling CRUD operations for entities. Sometimes it isn't the best tool for one-off DTOs.
We've asked at the other team as well, but I may not change the database so views/stored procedures are out of the question I believe. How else could I do this? Would it be easier with LINQ/Lambda stuff?
if you are making enums to represent numbers, you are doing it wrong.
The resulting projections are so far removed from the underlying tables. Maybe you'd be better off using Dapper with the SQL. Is there a reason you can't use ADO.NET or micro ORMS instead of entity framework?
Why not use Sum()?
It's true that there are a lot of libraries and frameworks but if you look through the list, there are a bunch of actual applications: https://github.com/NickeManarin/ScreenToGif https://github.com/bbougot/Popcorn https://github.com/bricelam/ImageResizer https://github.com/Code52/DownmarkerWPF https://github.com/AdaptiveConsulting/ReactiveTrader https://github.com/chenguanzhou/MarkDownEditor
They are different names for the same thing. The reason we have 2 different names is interesting! ".NET" as we know it is defined by a specification. That specification includes a list of features a language must support in order to be "a .NET language". One of those features is, "You must support a 32-bit signed integer type as defined by the type System.Int32". The idea behind this was Microsoft didn't want to make .NET be a platform with only ONE language, and they immediately had a use case: both VB .NET and C# were the "first-class" languages in the first releases. (There is/was a J#, but I don't know if I've ever met anyone who used J#.) Even in the early days, there were people who worked to make interesting esoteric other .NET languages: I've seen a FORTRAN .NET and RPG .NET, believe it or not! If you're a VB developer, you're used to type names like Byte, Short, Integer, and Long. If you're a Java/C developer, you're used to the type names byte, short, int, and long. So the respective languages "alias" those keywords to the correct .NET types. That lets you write VB .NET code that looks like VB and C# code that looks like Java (which is clearly the ship C# was designed to torpedo.) Without that feature, instead of this: for (int i = 0; i &lt; 10; i++) { ... } You would always have to write this: for (Int32 i = 0; i &lt; 10; i ++) { ... } Which doesn't seem like a big deal, but I promise back in the early 2000s when MS had to *sell* .NET to people, any little bit of friction they could reduce was important. They are the same, and most .NET developers agree you should use your language-specific keywords 99% of the time. The most common deviation from that I've seen is, "If you are writing P\Invoke code, use CLR types like System.Int32". It's not actually necessary, because I *think* it's a guarantee C# will never make "int" alias to Int64. I think the source of this practice is, "When you write P\Invoke code, it's nice to use a different practice to help you remember to think harder about type-matching." 
I wasn't the guy that said to use enums. It helps if you keep track of what you're replying to.
 I know you did it for fun, but I highly disagree with an open-ended range. What is the least value? int.MinValue? If not, does it keep going? will going left eventually go to the positive spectrum? We don't have "infinity" in programming, what would (..) equal, a buffer overflow? If your purpose is ONLY returning items from an array, I like the syntax, but believe it should be a part of the original Span&lt;T&gt; syntax, not a new class that would have to have a different Roslyn interpretation. 
That query is crazy. You don't need a mixture of joints any more. Rewrite that first. Start with the joins. I'd be surprised if it didn't work by just making them all just 'JOIN' 
I suggest looking at Dapper. I haven't used it in a web API call before but this is a situation where I would use it. You already have the query and it is a more complex query. Off the top.of my head this is what it would look like: string value = "myValue"; string sql = "SELECT * FROM ... WHERE field = @paramName"; var data = conn.Query&lt;MyObject&gt;(sql, new { paramName = value }); You can look up more in the documentation. 
Why not just use System.Data.SqlClient? After connecting, just an exec on the original sql, then read the results with a datareader? The only thing you need to worry about is sql injection on the @orderni param, and if the people in charge of the database refuse to add stored procedures, you’re kinda SOL anyways. 
You override extension methods by implementing the correct interface. Again, look at the Count() extension method.
Dynamic Language Runtime. Used by languages such as Ruby and Python when running on .NET. By using a ConditionalWeakTable you can add fields to any object. They are slower than real fields, but otherwise equivalent.
Eh, guess I should look harder. Thanks!
The LING join clause is an inner join. To do a left outer join you need to use a from clause with a sub query that ends in .SingleOrDefault(). For example: from o in orders from s in suppliers.Where(x =&gt; x.Id == o.SupplierId).SingleOrDefault() select ...; So now there will only be at most on supplier that corresponds to an order. If there is no supplier then s will be null. 
It's a very C# way of doing things. Clean from the front, messy in the back. Have you seen how they implement for-each loops? They look for matching methods' first, with IEnumerable&lt;T&gt; being the second choice.
Well, TIL. Don't do much mathing on the job, so never had any use for it. Aggregating, on the other hand, I have used.
If the callback doesn't has to live in your calling thread context you can use .ConfigureAwait(false) so you won't deadlock.
 [Flags] MyEnum...
Just dont. That query is large and complex, you gain absolutely zero value from translating it to linq. You actually _lose_ value from translating it to linq, since then you can no longer be certain of exactly what query is being executed at the database level and thus its harder to ensure that your indexes etc are correct even after you update frameworks etc. Linq-based frameworks for sql is useful for simple small queries, when you need to do something advanced then use the right tool for the job, and the right tool is almost always plain sql. That way it is also simpler for maximize the value you can gain from consulting with your DBAs if you have performance problems.
yes... this looks more like a use statement suited well for it but if you just have 3 cases of case 0, 1, 2 ? pretty bad imo
 switch (foo) { case EnumType.A: case EnumType.B: DoAThing(); break; default: DoADifferentThing((int)foo); break; } I probably don't understand the case you're attempting to make.
HTTPS://Gist.github.com is much better for this stuff and you don't need a github account. 
Oh man look at this mess.
Linq is terrible at queries that complex. Stick to an SP or similar
But that means that basically the class library must provide interfaces for all methods that are used in extensions? E.g. for linked lists there can be a very efficient realization of First and Last, but otherwise it makes no sense to implement IList over LinkedList to allow indexed access. 
I love C# as my day job but I'm starting to branch out. Python has been a bit hard to grasp with how fast-and-loose it is, and I'm starting to doubt how much real-world career use it has outside of web or data stuff. Is there another language you'd recommend that has some good job prospects other than python? I'm avoiding java and C++ until I absolutely have to use them just because I've used so much better languages beforehand.
The only use case I've seen that makes sense follows a narrow, but useful pattern. INotifyPropertyChanged is implemented pretty much the same way on every class that implements it. Everyone's project has some class equivalent to a "ViewModelBase" that has helper methods to support it. It makes sense that "every ViewModel in my system derives from a ViewModelBase type" so this isn't much of a burden (other than the need for boilerplate.) Then one day you need to implement INotifyPropertyChanged on something that's NOT a ViewModel. Maybe it's for a plugin into another system. It demands you derive from a particular abstract class that doesn't provide helpers for INPC. Now you can't derive from ViewModelBase, so you can't use your utility code to help out. But if INotifyPropertyChanged came with default, protected utility methods like the de facto SetProperty() helper, you'd get that for free, and a million projects would need fewer lines of boilerplate in ViewModelBase. That's the pattern: "I have a generic algorithm that works if a class has properties/methods defined by this interface, but the set of types that need this algorithm do not/cannot derive from a common type." I think it's an "advanced" feature in that the 90% usages we'll see are "bad" cases where composition would've been a better choice. But in the 10% usages where it's being used to fill in this particular hole, it's a very elegant fit. It's going to be a long time before I say "this is the right solution to my problem" on the first try. For the time being I figure it'll be my 3rd or 4th refactor before I say, "Oh, what if I had an interface with default implementations?" 
Man they are really going at it with the fast lane/paid prioritization 
Do you use Dapper at all? curious because thinking of using it
This is a great app and well organized: https://github.com/RolandPheasant/TailBlazer
LinkedList is such an outlier that you're probably not going to be using it in a polymorphic scenario anyways. And if you know the type at compile time, you can always make a more specific extension method. **** Conversely, what if they decide that `IEnumerable&lt;T&gt;` should have a `Count` property added to the interface? Not all IEnumerable's are countable, and certainly they are not all quickly countable. But that's the actual example given by Microsoft for justifying this feature. 
I've had linq behave strangely with joins which have no values (when compared to the SQL query) as other have said go grab a decent ORM like dapper and keep it as raw sql if you can
That'll work, but I would use Chain or Dapper over the top of it to make converting the results into objects easier.
Dapper is awesome. Chain is even better. https://github.com/docevaad/Chain/wiki/A-Chain-comparison-to-Dapper
FOR FUCKS SAKE, SHUT UP.
Yeah, I've used it a lot for one of my projects. I enjoy using it for a quick data to object mapping. Even great for just getting the database value as your .Net type. It has some other fun features, but it is not a full blown ORM (Dapper calls itself a micro ORM). So you do have to handle things like transactions and larger object mapping would take time. However being a micro ORM it has some good performance over using something like Entity Framework. I also have lots of experience going SQL queries, so Dapper is a good match for me.
Was it BNF or Pascal that specified inclusive vs exclusive ends to ranges using parenthesis and square brackets? (1..10) - Exclusive - has values 2 thru 9 [1..10] - Inclusive - has values 1 thru 10 And you could mix/match them, which let you do things like this: (1..10] - Exclusive on the lower bound, inclusive on the upper - has the values 2 thru 10 [1..10) - Inclusive on the lower bound, exclusive on the upper - has the values 1 thru 9 
I hope not. Having the rule of "`n+1..n` is empty" is really useful in range supporting languages. Id rather have it explicit for when you want it: `(8..2).Descend()` or the like.
Thanks for all the answers! I really appreciate all the great and helpful comments! learnt a lot of new stuff! int remainder = 0; int total = 0; do { Console.WriteLine("Please enter a number:"); var input = int.Parse(Console.ReadLine()); total += input; remainder = input % 3; } while (remainder != 0); Console.WriteLine("Thanks for your numbers!"); Console.WriteLine($"The total is {total}"); mordenstein wrote this code, and it did the job, and i understood how it works, maybe it isn't the best way, but hey. It works! Thanks again!
GrapeCity ActiveReports are awesome. Reports are just c# classes - infinitely customizable.
i was unaware you could make extension methods for All Enums in one go feel kinda silly / stupid now
C# is a statically typed language. It's multi-paradigm, but primarily Object Oriented. Python is dynamically typed and is also multi-paradigm, but does very well as a functional language (as well as OO.) I would embrace Python because it's pretty much the most popular language (aside from Javascript) and is rising in popularity. Python3.6 is a really mature language. And it has started to embrace a lot of really great ideas. (It adopted async/await directly from C#.) And C# is adopting Python ideas as well. (Tuples, Ranges, etc.) Java is just a lesser version of C# so Java wouldn't be hard for you to pick up. But there are 2 new languages that work with the Java Virtual Machine that are worth learning: * Scala * Kotlin I've done a little reading about both. Scala is a FP language and does a great job at taking care of a lot of boilerplate code that Java always seems to require. Kotlin could be summarized as a better form of Java. Probably on par with C#. I hear that a lot of Java programmers are switching to Kotlin. As for C++, a friend of mine has recently started using the language Rust. He says it's much better than C and C++. TL;DR: Embrace Python, it's a good language. Look into Scala and Kotlin if you're working in the JVM space. Try Rust instead of C or C++. 
&gt; On the other, I always thought 0..10 producing 0 to 9 was not intuitive. I'm fairly certain they'll make it intuitive to use based on array/list access. It'd be way too annoying to do 0..(arr.Length-1) for valid range of indexes. It's about as inconvenient as getting used to array indexes in the first place, so not too difficult if you already know that.
The exception is telling you the problem: the token you are passing in is invalid. I'm not too familiar with this particular library, but I imagine there is a property called 'SecurityKey' on one of the classes you are using. 
What is this doing that regular ADO.NET doesn't do?
but when I think of "goes to" I'm so accustomed to thinking automatically of "right-exclusive" because of arrays[size] being past the end of the array.
Karma does literally nothing
Thanks for the reply, the security token is by default off when I go through the debugging portion. And normally I thought all we need was an access key and secure id because it does work when i run the code but not when I do the unittest portion. I did try going through the classes, i couldnt find anything related to the token or the key :'(
when you use numbers directly yeah it looks silly but most of the time the length of a list won't be a constant so what you'll do is for i in range(len(list)) or for(int i=0; i&lt;len(list); i++) which could be written for(int i=0; i&lt;=len(list)-1; i++) but the extra -1 and the = are weird ugly potentially confusing and a great way to get off-by-one errors in the most common for loop situation
It's main purpose is to automatically maps the resultset to a collection of objects.
You can actually find out why by going to https://referencesource.microsoft.com to see the actual source code. [Here's what tree.Last does](https://referencesource.microsoft.com/#System/compmod/system/collections/generic/linkedlist.cs,4b27871fcf47d19c) [Here's Enumerable.Last()](https://referencesource.microsoft.com/#System.Core/System/Linq/Enumerable.cs,75722fd194dc2e0e), as /u/Cats_and_Shit pointed out
I'm the only one on my team, but I would go with GetWidgetsById.
Should definitely be GetWidgets because you are literally getting widgets - an IEnumerable of them. The latter I could go either way, but I lean a little more towards ById, since something like "Organize users by email" wouldn't use the plural. It's a one-to-one relationship.
- use whatever object you need to get data out (both typed &amp; dynamic) - automatic parametrization (including multiparametrization) - minimal performance hit for above (vs. handcrafted readers)
Aye, but this can be used for more than that (e.g. just creating a range of integers), so it's better thought of as 'this is the range of numbers I'm passing into this method/index operator'
What. No, you don't. Count() has a fixed implementation with a hardcoded special case for collections. That's not polymorphism, that's a hack. And it's decided at compile-time, not at runtime.
We just tell them no. ;)
The benefits of traits/mixins are an established fact. No matter how Microsoft justifies the feature, default methods are comparable to those and hence have the same benefits.
EF can do this as well, no need for additional frameworks if he's already using EF in his project.
There is an extension for macros. VCmd. Very useful.
&gt; VCmd Thanks, I'll try to remember that if I want to make some macros. I think one part of the problem that lead to removing macros is that the windows they added for TFS were opaque to macros, if you tried to record, it simply didn't record while TFS modal windows were open. 
&gt;I would still disagree - it's excusing a weird design with another weird design What weird design are you talking about? Do you consider 0-based indexing weird?! &gt;Which could just as easily be written for(int i =0; i &lt;= 9: i++) and for i in 0..9. It would. But if the boundary is an array length, you now have to subtract one. &gt;It seems that we all forgot the reason why for loops exist, and have been poisoned by the very outdated thinking that drove the design of C. Not sure what you mean by that. Why do they exist, if not for doing a specific amount of iterations? &gt;Even worse, what is range(10) supposed to do by intuition? Return [1,10]? [0,9]? Why bother using it if you can be explicit and just say 0..9 to get [0,9]? Intuition is highly subjective. Coming from C++ and C# I never had a problem with Python's range function. Also, if we start being subjective now: I don't like the `0..9` syntax, I'd really appreciate an *explicit* keyword (i.e. `range`). Be it with a default lower boundary of 0 or with both boundaries required.
Polymorphism occurs though the optional interface. Which is, by the way, the primary purpose of interfaces.
maybe there is a good reason why LinkedList doesn't override that. Thanks for the link though. I should get into the habit of checking... what other strange surprises are lurking underfoot?!
The extension method doesn't get the polymorphism though, because it is static. And you were suggesting that those are equivalent to mixins. They are not.
Sure, but you take the performance hit from using EF without any of the benefits. 
Come on now let's be nice, no developer should ever encourage another developer to use EF.
&gt;It's bad english Get all widgets. Get widgets by id The English seems fine. I often put the word "All", sometimes I put "ById" however: * GetWidgets() without parameters can imply all. * GetWidgets(params int[] ids) with list of ids implies "by id"
It works fine. Our website and mobile apps make calls to asp.net web API, which uses dapper.
&gt; API change security I *think* the goal is to maintain binary(dll) compatibility with applications that haven't been compiled against the new interface. You could swap out the dll with one containing an updated interface + default methods, add the necessary binding redirects, and start up without needing to recompile.
Yeah in very simple cases like this one the english is fine but when we add more parameters it starts getting weird.
You can still use one off 'views' in your query afaik. That would at least make the SQL query itself easier to read and understand. Maar veel succes met deze query. :P
So what would it look then? I don't know what plain sql is in C#
If the project already uses EF, I see absolutely no reason to introduce another framework for the sake of executing some SQL and projecting it into an object.
&gt; for i in range(len(list)) Whatever you do, do *not* use this in Python. At best just loop through the iterable directly, ignoring the index, but if you really need it use the lazy alternative: `for i, _ in enumerate(list)`
I'll bite, what kind of performance hit are we talking about? I know EF is not cool, but we're probably talking milliseconds here at best.
literally just stick your SQL into a string and pass it into a SQL client
I would recommend you read the [.NET framework design guidelines](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/). Specifically, the naming guidelines section "[for type members](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/names-of-type-members)": &gt; DO name collection properties with a plural phrase describing the items in the collection instead of using a singular phrase followed by "List" or "Collection." Which would lean towards `GetWidgetsById`, `GetWidgetsByIds`, `GetWidgets` (remove 'Id' from method), etc..
Jesus christ
Generally, I use the repository pattern, which means I have a "service" for each type. For example, you'd have a `WidgetService : IWidgetService, EntityBaseService&lt;Widget&gt;` that is responsible for getting/saving instances of `Widget` from/to the database. The basic get methods are defined in the base service as `GetAll&lt;T&gt;`, `GetById&lt;T&gt;(int Id)`, etc. This works pretty well, and only seems to get confusing when a given service (for some reason) has to interact with multiple types -- then the simple `GetAll` naming doesn't work so well.
Actually, there is a reason. Here's another component of c#that you may like:http://www.c-sharpcorner.com/uploadfile/puranindia/extension-methods-in-C-Sharp-3-0/
Never do! I think the fact that you got experience in writing this app and were kind enough to share your work is more than valuable in and off itself. At the very least you now learned this :) 
GetWidgetById - takes one id and returns 0-one widget GetWidgetsById - takes one id and may return 0-many widgets GetWidgetsByIds - takes one-many ids and may return 0-many widgets. GetAllWidgets - returns all widgets which may be 0-many 
Google "how to run raw sql entity framework"
You could also put it in a stored proc, then you can change the query if needed in the future without having to recompile the C# code. 
Don't Google that classes. That's very inefficient and there's probably a class you are missing. I'd Google "how to authenticate .net sdk"
its also funny that they dont get it. congress delegated authority to FCC years ago they can request public comment, but say fuck yall dumb people, im doing shit my way, and remove title 2 even IF the public is 80% or whatever more against it.
I imagine you've set up AWS credentials (for the IAM user with permissions to programmatically access Cognito) in your web.config, It sounds like you'll want/need to add these to an app.config within your unit test project too.
This kind of issue is exactly why ef is outlawed at my work. Had you been able to do this (which is technically possible) and not asked about it some poor soul would have later had to deal with this monster in linq
This sounds like it. Your config settings are sourced differently in the unit test.
You can store settings in common application data folder - that should be accessible and writable for all users. See https://msdn.microsoft.com/en-us/library/14tx8hby(v=vs.110).aspx
In my experience, queries like this are created by T-SQL jockeys in SSMS who then tweak the results until they get what they want in Grid results. I'd parameterize this gnarly query and pass it to SqlClient. EF is just an abstraction layer over ADO.NET anyway. 
you can change arr[lineToChange] = "\t" + label + formText.Trim(); to arr[lineToChange] = string.Format("\t{0}{1}", label, formText.Trim()); and then the lines that update arrays differ only by a format string that you can pass as parameter. 
There's nothing technically wrong with your approach, but which do you think would be more *readable*?
AHHHHHHHHHHHHHH
Is this EF? If so, you'll want to look at using `ExecuteSqlCommandAsync` or a related method. Here's a [.NET core example](https://docs.microsoft.com/en-us/aspnet/core/data/ef-mvc/advanced). Here are [EF docs](https://msdn.microsoft.com/en-us/library/jj592907(v=vs.113).aspx).
If you "fire and forget" the Task, your application will not catch exceptions, and you will not be able to determine if it completes. Unless you are absolutely certain this is what you need, it's not a good idea. For batching, [this](https://stackoverflow.com/a/35023796) looks like a good solution. To clarify terminology, a method designated as "async" is not supposed to block. "Block" means the executing thread cannot continue after kicking off some unit of work. With truly async code, threads are released back to the thread pool [in most cases].
Do not call `.Result`, `.GetAwaiter().GetResult()`, or `.Wait()`. This is likely to introduce a deadlock.
FYI: https://blog.stephencleary.com/2012/07/dont-block-on-async-code.html &gt; Using ConfigureAwait(false) to avoid deadlocks is a dangerous practice. You would have to use ConfigureAwait(false) for every await in the transitive closure of all methods called by the blocking code, including all third- and second-party code. Using ConfigureAwait(false) to avoid deadlock is at best just a hack). As the title of this post points out, the better solution is “Don’t block on async code”.
Of course it would be a better solution, but since he can't change the library code and needs to use it in a synchronous function it's at least a valid workaround if it applies to his use-case.
Eh, I think occupying a thread with Task.Run is a better solution. It lets you parallize the synchronous work without introducing the async/await state machine.
Oh I see! I do something similar with `IdentityHashmap` sometimes in Java, but obviously it doesn't give you syntax.
Here are some timings I did for an article. Each represents a series of common CRUD operations on a record. * Chain: 3.4160 ms (0.2764 ms StdDev) * Chain w/ Compiled Materializers: 3.0955 ms (0.1391 ms StdDev) * Dapper: 2.7250 ms (0.1840 ms StdDev) * Entity Framework, Novice: 13.1078 ms (0.4649 ms StdDev) * Entity Framework, Intermediate: 10.1149 ms (0.1952 ms StdDev) * Entity Framework, Intermediate w/AsNoTracking: 9.7290 ms (0.3281 ms StdDev) https://www.infoq.com/articles/repository-implementation-strategies In this test, EF spends more time being CPU bound than it does waiting for the database. Even if you do everything right (which involves a lot of extra boilerplate code) you're still talking worse than 3X compared to Dapper. If we restrict it just to materializing records (i.e. only reads), EF looks even worse. https://weblogs.asp.net/fbouma/fetch-performance-of-various-net-orm-data-access-frameworks-part-2
Is there a unique column in the above query? EF Core requires one even for views. And if you lie and just mark a random column as `Key`, then it will silently discard rows from the result. (It does this in a way to keeps the object count correct, making debugging particularly tricky.) The work-around is to use `.AsNoTracking`, but you damn well better remember to use it on **every** query against views/inline SQL or you'll have bad data leaking through your application. And that's just one of the many, many edge cases in EF. 
&gt; It'd be way too annoying to do `0..(arr.Length-1)` Agreed. I like the Rust syntax (`..` and `..=`) for this reason.
Again, because you seem to be having trouble with this concept. It is the combination of a extension method, and optional interface, that allows for overriding the extension method's behavior. 
That depends on the situation.
Don't get me wrong, I would love to have traits/mixins. I just don't want them slammed into the Interface construct.
Make it [first, last) please!
&gt; I hope they make ranges inclusive like Fortran and not Python. https://www.youtube.com/watch?v=xoMgnJDXd3k
I'll reiterate what other people have said... this is really not something you want to have in linq. It will be difficult to maintain, and very complicated (probably more complicated in linq than in sql), and it will most likely result in a much less efficient sql query which ultimately gets run against the database. You've said you can't modify the db, but I would double check on that constraint with the folks maintaining it. Many times, they just don't want schema changes made to tables. Adding a stored procedure may not be a problem for them, since all you're doing is adding it, and not modifying anything existing. If possible, that is truly the best option. You can create a stored procedure from this, and add the stored procedure to entity framework, and that way you get the best of both worlds. The resulting object is strongly typed, and you can use it in your c# code, and you still have direct control over the sql, meaning you can keep it as simple and efficient as possible, and by extension as easy to maintain.
Basically you're saying GetOutput(s)ByInput(s). If you provide multiple inputs and expect multiple outputs (hence IEnumerable) it would seem clear to me that it should be plural / plural.
GetWidgetsById
Not to mention the random ass bugs. Just found a new one in EF Core where it attempts to null out a required FK when I tell it to delete a child record.
Not to mention the random ass bugs. Just found a new one in EF Core where it attempts to null out a required FK when I tell it to delete a child record.
Cool coincidence.I had never tried Docker with .NET until yesterday and was wondering about the big image size. Yay for 2.1 
The stored proc is better long term than putting it in the code. At least the db will complain when you run some ddl that breaks the query. Also it protects against sql injection if you add parameters. 
A work-in-progress, but ... [Source Generators](https://github.com/dotnet/roslyn/blob/features/range/docs/features/generators.md): &gt; Source generators provide a mechanism through which source code can be generated at compile time and added to the compilation. The additional source can be based on the content of the compilation, enabling some meta-programming scenarios.
1) Do you like to use the Word Wrap feature? I do not use the word wrap feature. I think manually formatted code is easier to read. 2) Do you have a self enforced preference for line length? Having code on multiple lines makes debugging easier. I aim for a half a screen width at a maximum (about 50-100 characters), but most lines are much much shorter. 3) Would you prefer one of these as a team rule? Word wrap off. Write for legibility, not to minimize LOC. 4) Have you worked on a team with one of these rules in place? What was your experience and did other devs gripe/agree? I have not worked on a team with either rule in place. 
It's context sensitive on wherever that range is used, but it would generally represent the bottom-most and top-most element. It doesn't make sense to enumerate over such a range, doing so would probably default to starting at zero, or throw an invalid operation exception. The reason it should be a different type is that it greatly eases implementation complexity. Many methods do not want or need to accept an open-ended span, so rather than forcing them to do runtime checks, we can leverage the power of static type checking to prevent this.
This! A billion times this! Do not use inline SQL please, I beg of you. (thanks for mentioning this)
Doing arithmetic operations with a number value that is null results in null
The arguments on your team must be horrible
The short answer is no, extensions define their own icons from their own resource files. You will have to get very creative to replace them.
True but often I have functions that represent some calculation taking in doubles and outputting a double, and these calculations are often chained together. I don't want to have all these calculation functions to implement null propogation, I'd rather have the caller handle nullables when needed.
Why can't the caller just handle a null value once after the calculation?
Well, that's a real shame. Thanks anyway.
I totally want to disagree with you. Stored procedures suck. Inline SQL is just fine.
If you're not being funny/sarcastic/troll.... then you don't know what you are talking about. The benefits of SP are huge on so many levels... which is why there are used. * While at one company that had inline SQL I found the error which was fixed by an ORDER statement. I could have fixed and deployed that issue to production in 15 minutes. But because it was within the application code it had to wait months while other issues were handled. * stored procedures scale, where inline does not. Those two issues alone are a reason to use stored procedures. But feel free to inform me why they suck? Just saying "they suck" is not much of an argument.
Not a big fan of the "ByInputs" part. That's visible in the parameter list. Any further confusion, if any, can be clarified by the documentation.
If you love recomputing execution plans at ever call and having performance bottle necks then don't use SPs.
My guess about your problem is: well-behaved programs do not attempt to save settings for all users, only for the user running the program. Administrator, however, should be able to modify settings for everybody. 
I haven't lost one yet.
Or a simple DB view in this case
Correct me if Im wrong but cant this be done like this... a?.Bind(x =&gt; b?.Bind(y =&gt; f(x,y)) ?? null) ?? null Or do you want to do something else?
I don't know that there's anything built into the language, but it's pretty easy to implement as an extension method, provided you don't need to mix reference and value types. static TResult? Bind&lt;TParam, TResult&gt;(this TParam? param, Func&lt;TParam, TResult?&gt; func) where TParam : struct where TResult : struct { return param.HasValue ? func(param.Value) : default(TResult?); } 
GetWiggy
You can also lift methods to work on nullable values instead, though you will need an override for every number of parameters you use. static Func&lt;T?, T2?, TResult?&gt; LiftNullable&lt;T, T2, TResult&gt;(Func&lt;T, T2, TResult&gt; func) where T : struct where T2 : struct where TResult : struct { return (param1, param2) =&gt; param1.HasValue &amp;&amp; param2.HasValue ? func(param1.Value, param2.Value) : default(TResult); }
So you picked a system with no SDLC because it was too hard?
This hasnt been the case since at least SQL 2005. SPs run through the same execution cache as anything else
Word wrap on is going to get messy depending on the resolution of your screen, visual studio setup, and random things you have no fine control over. Keep it off and instead use a character limit for consistency across any machine, regardless of the other settings. In order: No. 80 characters, visual studios default. I'd prefer not having standards unrelated to code qualities. Issue is, readability is a metric. Since word wrap being enabled leads to arbitrary line limitations, it doesn't make sense to mandate you have it on. If there is a mandate, line length should be the metric. Yes. It made code easier to read, follow, merge, and write when everyone had the same line lengths configured.
Cool, that's what I'm looking for! Was hoping to find something built in the language since you already get this behavior with operators, but not seeing anything.
Isn't that just equivalent to a.HasValue &amp;&amp; b.HasValue ? f(a, b) : null;
GetWiggyWitId
 double? F( double? a, double? b) { if(a == null || b == null) return null; return a * b; } Don't overcomplicate it. 
The problem is, the DB is from an external/third party program called Exact software (Synergy). They tell me no changes can or may be made to the DB. A solution could be to create a secondary DB with only a few stored procedures that query on the second DB (the one from Exact Synergy).
Nice, thanks!
Which is the same as just `a * b`.
For that specific example you you could just do `a * b`, since a null in either operand will propagate to the result.
I did a small test, as far as I know you can use multiple Skip:s and Take:s, it will not need to restart enumerating the IEnumerable, but totally understand the value of it for learning.
Can you elaborate on this? I work for a 5-man shop, and have started to feel so pigeon holed recently. I'm getting further away from asp.net and c#, I spend about 80% of my time doing HTML/CSS, and I feel like I'm not becoming a better dev. I wanna get out, but am stuck on how to improve in asp.net/c# so that I can interview.
We're talking about a read. You can scale that every which way, shard it, subscriber read dbs, always on grouping, etc. As long as they aren't crazy high transactional it'll be fine. 
I keep seeing people do this : = context.Database.SqlQuery&lt;string&gt;( or use .FromSql, but I can't call either of those, they don't seem to exist in my context.Database...
As those operators are lifted, yes. In a more non-nullable future, I’d almost say that this is a bit unfortunate. 
Yeah, write an extension method: public static TResult SelectMany&lt;T, TResult&gt;(this T? a, Func&lt;T, T?&gt; getB, Func&lt;T, T, TResult&gt; selector) where T : struct =&gt; a is T x &amp;&amp; getB(x) is T y ? selector(x, y) : default(TResult); And then you can write: var result = from x in a from y in b select f(x, y); 
Ik breek er mijn hoofd aan pff!
Depending on the implementation of IEnumerable you may or may not have to scan from the beginning every time. Skip is probably smart enough to avoid such inefficiency for List&lt;T&gt;, but it would not be possible with something like a singly linked list.
As programmer you're learning all the time - we have to deal with it :) All enums inherit from System.Enum just like objects inherit System.Object and structs from System.ValueType. Thanks to that, you can make universal extension methods also for all enums/structs. On the other hand, I would still advice against creating such implicit two-way conversion operators.
When I install Dapper in my solution via Nuget Packages (like it said on their site), when I try using (var connection = My.ConnectionFactory()) It can't find the "My"-class, what do you have to do after installing Dapper to be able to use it?
How do I use plain SQL? I've tried multiple things to get to work, but usually I don't have the correct .FromSql or .SqlQuery or other methods ... Like I do exactly as the examples but I cannot call the methods needed so I'm stuck.
How do I use that SqlClient with a connection string located in my StartUp class (under ConfigureServices) ?
If you implement SelectMany as an extension method on nullables, you can use linq notation (like Haskell's do-notation). A bit prettier than calling bind yourself.
What would you have to use if I query to DB from 2 objects (cicntp &amp; cicmpy) and the resulting object will contain data from both? Right now MyObject is my own object but an error is thrown (&lt;script src="https://gist.github.com/tempuslight/e668d3e7cb0d2a552f01f89727a4f714.js"&gt;&lt;/script&gt;) What then?
Create a view and then Query against that
&gt; &gt; &gt; Name the part of your architecture that is the hardest to scale. The one part that you can't scale horizontally. Oh, you mean my crappy ass website that misuses caching state so I can't run more than one instance? 
I think `.FromSql` is from EF Core. 
&gt; stored procedures scale, where inline does not. Uh, what? Don't get me wrong, I do think that stored procedures are far superior to cramming SQL into an application. Separation of concerns, encapsulation, security, etc. But scalability? I just don't see that being a concern.
What is docker, exactly? A VM?
It’s not the same as mixins. 
Fair enough. 
Sorry, you are correct. Extracting multiple slices with Skip and Take will restart the enumeration once for every slice. I tested your code but I did not get the result I expected, am I using it wrong? var enumerable = Enumerable.Range(1, 4).Dump(); var firstHalf = enumerable.GetSlice(0, 2); // Contains 1,2 - OK var secondHalf = firstHalf.GetSlice(0, 2); // Contains 1,3 - Expected 3,4
Use GetSlices(2)
Why let them pass in a null at all then? What is the reason for supporting a nullable double in this case? Is some other team consuming the library and insisting on it or are you using null to represent an operation that should be skipped or something else?
It really depends on the query and the way the application is set up. inline queries keep application logic in the source code and under version control. though this is mitigated if you use migrations. 
I did that in another comment below. Not sure I'd use this in production code but hey.
https://www.docker.com/what-container
This seems easier and shorter: old_trees.Last.Value Unless the list can be empty, of course.
I don't know if it would still be relevant, but you could take a look at what was done in the VS Icon Patcher for VS 2012. https://vsip.codeplex.com/
Yeah I'm running on .NET Core 2.0 and it isn't implented in the 2.0, only in Core 1.0 it would seem. I'm using Dapper now btw 
Thanks, yeah, that's what I should have done. 
Why not just set the capacity on a list? What could be cool is if you could specify the size and generate a class that handled that many.
That's called array.
+1 to Rambalac's "That's called an array" flippant comment ;) You can also pass the capacity to a List on allocation. But that's not the problem I'm trying to solve - I'm trying to make a lightweight heap-allocation-free mini collection to avoid garbage churn.
First of all, your code seems to have issues. Just for example (and I can name a few more just looking at this code), what would the result of the following be? var list = new MiniList&lt;int&gt;(); list.Add(1); Console.WriteLine(list[0]); Second of all - what's the purpose here? I'm assuming you're using it to store structs (because if you're storing objects that end up being allocated on the heap - what's the point of this exercise?) and only a couple of them? What's the advantage over, say, an array? Finally - you mention you never did any performance/memory verification if it's even remotely worth it. I dare say - do run this against new List&lt;T&gt;(8). I wouldn't be surprised it there's really no benefit.
In general, don't start any performance improvements until you prove using a profiler that that particular place is a performance problem. After changing anything do profiling again. See if just converting standard List to a struct will suit your needs better. You might want to create more constructor overloads with empty arguments list, one argument, two, three, and a params array. Also for this particular list implementation boxing is undesired, so it's probably for the better to remove IList implementation altogether. GetEnumerator can be implemented without allocations.
First of all, your code seems to have issues. For example - once you start using the 'fulllist', 'Insert' will no longer work correctly. Second of all - what's the purpose here? I'm assuming you're using it to store structs (because if you're storing objects that end up being allocated on the heap - what's the point of this exercise?) and only a couple of them? What's the advantage over, say, an array? Finally - you mention you never did any performance/memory verification if it's even remotely worth it. I dare say - do run this against new List&lt;T&gt;(8). I wouldn't be surprised it there's really no benefit.
Would be interested to know more about any bugs you find! Can you explain further on the `Insert` issue? The purpose is definitely not to be storing these structs, but to be used for local stack allocation only - to avoid "death by a thousand cuts" garbage from lots of little List allocations. Wouldn't be *surprised* if there's no benefit either, but would be interested to hear what peoples theories about it are nonetheless. I'm sure performance would be worse than a native list/array, but I think garbage churn issues are harder to measure since they're so context dependent.
Lurking over from /r/cpp, so not a C# specialist by any means. A couple of thoughts: - Your implementation most likely has better cache locality than traditional list - the lookup time is O(n^2), because of the switch — Maybe could use unsafe code (interop services?) to somehow take a Pointer to your list, find the offset of T member and then return that. - you could make your impl generic using tuples and therefore allow more than 10 Ts
Completely fair statement about not optimising too early. But at the same time, if it's a robust class and it's just the difference between typing `MiniList` and `List` depending on the scenario, I don't see much harm in it? I like the peace of mind of avoiding heap allocations where possible. Interesting idea to add more constructor overloads when you have a set of elements up front! I can see how that might be convenient. Good point to remove the IList implementation to avoid accidental boxing! Instinctively I like knowing that it conforms to IList but it's true I can't think of any other benefits off the top of my head... Would love to know how to implement `GetEnumerator` without allocations? By not using `yield` and instead doing things more manually?
Yes, stupid idea. (;
Isn’t there a stackalloc keyword that can be used for this kind of stuff?
Thanks - I had similar thoughts about cache locality. I also had similar thoughts about the switch statement... in fact it made me wonder whether C# had any optimisations which automatically converted a set of consecutive integer based case statements into some kind of instruction offset but couldn't find anything about this.
Yeah, but apparently only in an unsafe context. I've never used it myself but it feels a bit wrong to be casually doing that kind of low level hackery too frequently?
The second you actually use it as an `IList&lt;T&gt;` (e.g. by calling a LINQ extension method on it) it's going to be boxed. It might actually create *more* heap allocations this way because the boxing isn't cached. Of course it's also much larger than an equivalent array. However, it might be useful in very specific situations, as long as you are mindful about how you use it. As usual, only proper benchmarking can really tell. I've done something similar with a struct that would hold either 0, 1 or N elements in a single reference field, in an application where I had huge amounts of properties/instances that were either empty or held a single item 99.9% of the time, but still needed to handle arbitrary amount of items transparently. My implementation was immutable, though, to avoid value type copy issues. If you really are in a high-performance situation and need to minimize allocations, may also want to look into writing a custom struct enumerator.
My bad. I thought List&lt;T&gt; is a linked list. Cache locality is probably equally good, assuming C# stores array sequentially in memory
&gt; Can you explain further on the Insert issue? var list = new MiniList&lt;int&gt;(); foreach (var i in Enumerable.Range(1, 20) list.Add(i); list.Insert(11, 15); //will throw IndexOutOfRangeException &gt; to avoid "death by a thousand cuts" garbage from lots of little List allocations. Again, what will you typically hold in these lists? &gt; but would be interested to hear what peoples theories about it are nonetheless So you want people to do their homework for you? There's no good alternative to doing tests - unless you expect us to do them instead. &gt; I think garbage churn issues are harder to measure since they're so context dependent Which is doubly why you should actually test this in your environment, rather than expecting static code analysis by random Internet dudes to be better. 
He has a field for each item. So not the same. He could however just use an array and switch to list instead. The idea is optimising around the GC. I'm not sure this would actually give any performance benefit over using an array though.
Not sure, I’ve never used it either. It’s just one of those things I always wondered about and it sounds like you’re trending toward low level hackery as it is ;)
Yeah. At least you can fix that.
Oops, thanks - insert bug now fixed, gist updated.
I understand. I was suggesting that way you could change the count at which it changes to a List. So if you know you need 9 items you could generate one with 9 fields instead.
For more context on what this is about, see https://github.com/dotnet/corefx/issues/14354 Today, users have to write a lot of messy code to generate good hash codes. For example, the top answer [here](https://stackoverflow.com/a/263416/4077294) suggests ``` public override int GetHashCode() { unchecked // Overflow is fine, just wrap { int hash = 17; // Suitable nullity checks etc, of course :) hash = hash * 23 + field1.GetHashCode(); hash = hash * 23 + field2.GetHashCode(); hash = hash * 23 + field3.GetHashCode(); return hash; } } ``` with the new API addition, this will become as simple as ```cs public override int GetHashCode() =&gt; HashCode.Combine(field1, field2, field3); ```
`stackalloc` only works with non-generic value types, so it's not as general-purpose as OPs solution.
Really good point on boxing - as someone else suggested, might be a good idea to remove that interface altogether to remove the temptation and to give the hint to convert back to a normal List if that's how you want to use it. Cool to hear you've done something similar! Thanks for the great insight! :)
Doesn't hovering over the class name tell you the namespace? It seems like using the IDEs feature would be cleaner than cluttering the class with namespaces.
Yep, fair point ;)
Ah, interesting, I didn't know that!
Array implements IList
Nice. One step closer to record types?
Not much point doing `foo ?? null` since that's equivalent to just `foo`.
Sorry, I should've made this more explicit, f takes in doubles rather than nullables. The idea is the innermost lambda can work with regular doubles instead of nullables. Often there are library functions that take in and output regular doubles, and I want to call these only if all the inputs I have are not null, else return null. Rather than create wrappers taking in nullables for every function and repeat this null propagation logic, something like this bind function can be used.
Yes, but the boxing (and the indirect calls through the interface*) can be avoided by declaring a consumer method like this: &gt; void Foo&lt;TList, T&gt;(TList list) where TList : IList&lt;T&gt; Unfortunately, this breaks type inference (you have to spell out both type parameters every time), so this might be preferrable: &gt; void Foo&lt;TList, T&gt;(TList list, T unusedDummy) where TList : IList&lt;T&gt; Usage: &gt; MiniList&lt;Something&gt; ml = ... &gt; &gt; Foo(ml, default(Something)) Still a bit awkward to use; would be nice if they fixed the type inference (or even better, add `MethodImplOptions` that allow us to declare `Foo` the normal way, but get specialized compilation in case the type of the argument is statically known). \* Only for value-type `TList` - generic methods get a specialized compilation for every different instantiation of a type parameter with a value type, but only one shared compilation for all reference types, I think. This can be a big deal because specialization doesn't just eliminate the indirect call itself, it also enables inlining of the interface method, which can enable further optimizations.
You can use version control for anything, so that point is not of value... and as for keeping logic in the app, SQL is not application logic. Sorry, I have to say, kindly, that you are 100% wrong here. The values of using stored procedures VERY much outweighs your points. 
I believe there is already a C# language proposal open for record types. The proposed syntax is this: public Person(string FirstName, string LastName, int Age); If the compiler natively supported record types like that, it could probably auto-generate all of the hashing logic, so in theory, there would be no need for `HashCode`. I expect the compiler team will still use this new API in practice, however, so that i.e. if a security flaw is discovered in the current hashing algo, they can easily change it to another one. So yes, this may help out the implementation of records.
This is very cool! I've read about the equivalence of SelectMany with IEnumerable and Monad but didn't know you can use other types with query expressions. 
WHAT? Scalability in db apps is very important. Hell, most databases can automatically manage and improve SP performance, and a db-manager can improve the performance of procs as needed (hello Oracle) Seriously, you need to do some reading on the value of stored procedures vs inline. I say this NOT being condescending or rude to you, but in this case you are 100% wrong. In any case, have a wonderful weekend and if you're in the US enjoy your turkey day. (cooking now myself)
Completely depends on how you work really. The solution I work in is pretty big and explicitly qualifying namespaces does make our code more readable. Say you’ve got the type `AddressViewModel` for handling postal addresses when displaying on a webpage, but there’s another `AddressResponseModel` that’s used as a DTO for API calls. Both have similar but subtly different data structures, both can be mapped from our `Address` entity (we have a pretty dope generic mapping system but that’s another story). If both are used in the same method, or class, the code is a hell of a lot clearer if they’re written as `ViewModels.AddressViewModel` and `Responses.AddressResponseModel`. This way a developer will know immediately that the response model will be serialisable, and the viewmodel will implement a particular interface. This is just our convention, it works for us. So yeah. If I’ve qualified a type with a namespace, it’s for a reason ... it would be handy if ReSharper kept that namespace when it inserts the field corresponding to it. Just a minor annoyance I’ve been having.
Sorry if my english is bad, I am not a naitve speaker.
It's not as good as on Windows, but doable. Just stick to Window if you're used to that and don't have a big reason to use Linux.
Of course you can version control anything, but having it in code ensures that there's never a discrepancy between the code version and db version when deploying. of course this can be mitigated with some automatic db update code. And I didn't say SQL was application logic, but people can and do put code that I'd classify as application/business logic in stored procedures and triggers, and debugging an application like that can be a nightmare, even if it makes sense from a performance standpoint. I'm not saying "Never use SP's", I'm saying that it depends on the circumstances. If a software I'm working on uses EF for everything, but if there's a single complicated query that icbt performance critical that can't easily be modeled in EF, with everything else being in EF, if rather use a prepared statement than use a stored procedure, to keep things more consistent and reduce confusion. I'm all for stored procedures if they make sense for the use case, but I've worked with enough legacy applications that overly relied on SP's to know that they can be hell to work with and a consistent separation of concerns between DB and code can be worth its weight in gold. Also, I didn't mean to imply that SP's shouldn't be used in the case of the OP, i was talking more generally. SP's are just another tool for a software developer and should be used with care and consideration, like anything else. 
You could try using an object pool. Here is a good lock free implementation: https://github.com/dotnet/roslyn/blob/master/src/Dependencies/PooledObjects/ObjectPool%601.cs Also FrugalList and FrugalMap might be of interest to you: http://referencesource.microsoft.com/#WindowsBase/Shared/MS/Utility/FrugalList.cs http://referencesource.microsoft.com/#WindowsBase/Shared/MS/Utility/FrugalMap.cs
Thanks for the clarifications. However, again, there are SO many reasons to use them and you have not given me any logical reason that outweighs the values of using them. * Security: user logins that only have access to running procs cannot screw up the db * Performance: stored procedures are always faster than inline. * Separation of the different components/layers gives the developers more control. Your statement is akin to having CSS within the HTML (which also is not a good idea) &gt;&gt; that overly relied on SP's to know that they can be hell to work Sorry, but that makes no sense. The SQL can be debugged in the same manner regardless if it is inline or proc. &gt;&gt;Also, I didn't mean to imply that SP's shouldn't be used in the case of the OP, i was talking more generally. SP's are just another tool for a software developer and should be used with care and consideration Again, thank you for the clarification. However, I have not seen an actual logical reason that would make not using a proc a better decision. That's the info I am looking for, a reason that inline would be better. 
Sorry, why does the switch statement cause O(n**2) complexity on get? Also, since the collection is actually a list of references to objects (rather than a list of objects), isn't cache coherency a lost battle, anyway? 
Not all heroes wear capes
You are right. The switch statement runs in O(1). So it’s also O(n). Sorry. Yeah. Since that was just a blind guess on my end. I guess you can’t really reason about these things without knowing underlying implementation details of the .NET runtime.
In your example the name of the class is `Rextester.Calc` so equivalent code would be var Calc = new Rextester.Calc(); You can see that the variable and the class don't have the same name.
How does it run on Xamarin.iOS ? It has no Reflection.Emit?
Similar to what you are doing now calling the windows API u can also use the send/post message With the following https://msdn.microsoft.com/en-us/library/windows/desktop/ms645607(v=vs.85).aspx 
ok that makes sense, but how about here? https://dotnetfiddle.net/OrI9Vt
Of course scalability is important, but using a stored proc doesn't give you that. It just puts a name on the query.
Search for information about Span&lt;T&gt;. Span’s buffer can be allocated on the stack, and does not require unsafe code. 
https://github.com/annymsMthd/small-docker-test here's an example of a self contained app with ILLink.Tasks for tree shaking. Image comes out to around 49.8MB
This is covered by section [3.7.1 of the C# Language Specification.](https://download.microsoft.com/download/a/9/e/a9e229b9-fee5-4c3e-8476-917dee385062/CSharp%20Language%20Specification%20v1.0.doc) In general, most hiding is permitted to avoid brittle class inheritance. The language designers didn't want subclasses breaking because a new member was added to a base class. From the specification: &gt; Hiding an inherited name is specifically not an error, since that would preclude separate evolution of base classes. For example, the above situation might have come about because a later version of Base introduced an F method that wasn’t present in an earlier version of the class. Had the above situation been an error, then any change made to a base class in a separately versioned class library could potentially cause derived classes to become invalid. Although that particular section is about hiding through inheritance, I think the same logic applies to hiding through local variables. Wouldn't want change in type names or member names to adversely affect unrelated local variables. Some schools of thought feel that hiding should not be permitted; it should be treated as a bug because of ambiguity for the developers. (There is rarely any or no ambiguity for the compiler though.) In the end, the language designers chose to permit it because they felt that the alternative for disallowing it altogether was worse.
Your usage of TryParse is incorrect https://msdn.microsoft.com/en-us/library/f02979c7(v=vs.110).aspx should be bool convertedSuccessfully = int.TryParse(apgādātoDaudzumsString, out var convertedVar); iirc, I'm doing this off my brain
&gt; Nor does it improve performance, ahahahah! Good one, that's funny. Cause, you are joking right? If not, well... you're 100% wrong and if you were working for me you'd be fired for being just that stupid. I'm sorry that sounds mean, but DAMN your arguments are without merit, example or value. Have a great weekend
Because the spec says so.
The List implementation is _technically_ just a wrapper [around an array](https://referencesource.microsoft.com/#mscorlib/system/collections/generic/list.cs,36).
In this new case the class name is `global::Calc`. https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/namespaces/how-to-use-the-global-namespace-alias
Hey there... Sorry for the delayed reply - busy these days... There probably is, but unfortunately I'm not too familiar with it since I've never used edge detection before. That said, now you've got me curious... The question here is : Are you looking specifically for sort of animation where the image is drawn frame by frame (as the examples show) or are you looking for a complete image, and the process of how it's made isn't important (e.g. you don't care if people see the pen tracing the image, you just want the end image itself to display). I think each of those would end up requiring different solutions. The one where you just display a final outline is probably easier to do than the animated tracing of the outline bit by bit(or pixel by pixel, as it were). So I'll probably learn about edge detection today :) and let you know any more info that might be usefule. I'm sure there's a way to draw the edges. The pathguide/grid that you mention I think might be what the edge detection site calls a kernal. But I'm not sure, both are clearly matrices. http://homepages.inf.ed.ac.uk/rbf/HIPR2/kernel.htm But I'm not sure if what a kernal does is different than what this pathguide is doing. I'll see what I find, and if you have any updates, please let us know, I'm curious. Best luck and if you're in the states, happy tday. 
First, Please try to have at least the variable names in English! Bad English is better than Good Latvian (for most of us anyway). As already pointed out your using TryParse incorrectly. But since you also get errors with Parse (The actual error would be good). What culture does the program run in? Is the decimal point a point (.) or is it a comma (,) Being from Sweden this has bitten me many times.... 
Just fire up ilspy and check out how they do it in .NET, they use struct enumerators for performance in a bunch of places. Or look [here!](https://referencesource.microsoft.com/#mscorlib/system/collections/generic/list.cs,1140)
You don't need that. You can use dotnet core cross platform. I develop with .net on an Ubuntu platform with .net core 2.0 and vscode.
/u/kiwidog is correct, in that TryParse returns a boolean indicating success and you gotta use an output parameter to get the actual value. Assuming that 0 is not a valid response, I would do something like this: var brutoAlga = 0m; while (brutoAlga &lt;= 0m) { Console.WriteLine("Cik liela ir Bruto alga? (Alga uz papīra)"); var brutoAlgaString = Console.ReadLine(); if (!decimal.TryParse(brutoAlgaString, out brutoAlga)) Console.WriteLine("Atbilde bija nederīga"); } 
No worries! Nice to get a reply...kinda stuck on this at the moment to be honest. Frame by frame...im thinking where you could pick the duration for when the mouse is held down...so for example, if your duration was 1 second you'd have long strokes, 0.1 seconds, super short strokes. Im inspired by the look of blind contour drawing, so im trying to get it as close to that as possible. Just super basic lines, but still defined. Either strokes or a continous line, a continous line might end up being alot easier to implement. It looks fairly similar in style to a blind contour, just not as disproportional: https://i.pinimg.com/originals/3b/67/a5/3b67a56d43809fe3cc5aa12c8ad5ca44.jpg The goal would be to load this program overtop another paint program and have it draw out the input image automatically (animated) with just basic lines, that way you could pick your own brush style...try fancy stuff, if youre in photoshop or really any paint program for that matter. Im in Canada, so thanksgiving was a while back ;) Happy T day ! I found https://github.com/LingDong-/linedraw but this is python, and I tried it but the contour lines are kinda hard to make out. 
&gt; Maybe could use unsafe code (interop services?) to somehow take a Pointer to your list, find the offset of T member and then return that. C# does support unsafe pointer arithmetic, but it really doesn't like giving out pointers to reference types or types that (could) contain references, because that would allow you to create invalid references that would really mess with the GC. It's still possible using the `CompilerServices.Unsafe` helper however: [StructLayout(LayoutKind.Sequential, Pack = 1)] public struct UnsafeList&lt;T&gt; { private T _0; private T _1; private T _2; private T _3; public T this[int index] { get { if ((uint)index &gt; 3) throw new ArgumentOutOfRangeException(); return Unsafe.Add(ref _0, index); } set { if ((uint)index &gt; 3) throw new ArgumentOutOfRangeException(); Unsafe.Add(ref _0, index) = value; } } } But I'm not really sure if this works reliably on platforms that can't perform unaligned memory access.
How do you imagine that it improves performance? The same query gets executed either way, which means it is going to get the same execution plan, which in turn takes the same amount of effort on behalf of the server. Some older databases wouldn't cache the execution plan. And that can be relatively expensive to generate for fast queries. But no modern database should omit this obvious feature. I guess if you have particularly long SQL statement you could require an extra packet or two to send the request. But that's hardly crippling. And it's a performance concern, not a scalability concern 
Sorry about the formatting I inserted some new-lines but I dont know what happened. About ubuntu, Do you develop Desktop programs or just ASP.NET ?
What is the, the 1990's? All of my schema has been in source control for decades.
&gt; Of course you can version control anything, but having it in code ensures that there's never a discrepancy between the code version and db version when deploying. of course this can be mitigated with some automatic db update code. Again, the 90's? Before the invention of developer testing? If you are on my team you damn better run your integration tests before checking in database changes. 
Ah yes, could definitely optimise IndexOf to be O(n). Good spot!
 ... ... ... all this...motherfucking time... I was writing 35.5, for example, instead of 35,5 (comma instead of point). Holy fuck I'm tilted.
dotnet core runs without any problems on arch. Ti use VSCodes' debugger, you need ti tell omnisharp to use the binary compatible ubuntu package somewhere in the user settings
Ne careful with too much unrolling though. I am not sure to what extent this affects C#, but excessive unrolling in C++ causes code bloat and instruction Cache misses... But as I mentioned you can’t really reason about „low-level“ details suche as Cache Misses, branch prediction failures, etc. in C#, because that requires extensive knowledge about the .NET runtime.
I put the word “unrolling” in quotes initially because it’s achieving more than a simple unroll - it’s fixing the fact that the this accessor has a switch that’s necessarily O(N) so an outer loop becomes O(N^2). Rewritten it’s possible to make it O(N).
Windows is great for development and Linux is great running stuff cheaply in the cloud. Stick to Windows for development and deploy to Linux. 
I'm a newbie in dotnet. What's the purpose of this? Any pro's, con's and useful implementations? :)
I see a lot of "yeah, this could be better, but maybe not, and you should profile it first" answers. I suggest going to http://benchmarkdotnet.org/ and running a few tests to find out! (Report back, too. I'm pretty interested in your findings.)
C# 7.3 Span&lt;T&gt; ?
Debian + .NET Core + git + JetBrains Rider here. Sometimes use VS Code. Haven't had any problems at all so far! Rider compared to Visual Studio I find it has almost all of the features I want and the ones which aren't there I can deal with easily. Arch and Core may be tricky for a while yet as Core is still relatively new compared to so many other packages. Things like OpenSSL 1.x support weren't going to be prioritised over getting all of the other juicy Core 2.0 features out. I can see it becoming closer to Arch's bleeding edge in the future.
Visual Studio Code and .NET Core.
dotnet core totally works in Arch, I use it quite often with Jetbrains Rider. Just go to the arch wiki page and install the 2 packages from Pacman.
https://www.nuget.org/packages/System.Reflection.Emit.Lightweight/
Avoiding the boxing also means you’re copying the entire list everywhere. This is also likely to be undesirable. So you’d have to pass the list by ref ideally or pass a Span&lt;T&gt;.
The last two variants are the only options. It's effectively no noise words. Alternatively in this context there should be a third option being talked. The nature of giving multiple IDs as parameters to return the relating object makes me question if the method is meant to return silently even if not all IDs are valid or if it should throw an exception when one is cannot be traversed to an object. With the first you are creating Nullpointer weaknesses ahead of you. They latter implies that the user should be vary with the return value of the method.
If your parameter names cannot propagate the usage by themselves there's a strong indicator for code smell. Documentation should only be required where the business domain requires further expansion on complex types and used context.
I work full time on a aspnet core project on my Linux machine, the server is on windows. Thanks to vs code the experience is very similar (at least for the thing I do) to visual studio. Intellisense, debugging, it is all very similar, not as fast or bug free, but It's very good, more than enough to be productive. And vs code loads faster. I don't have intellisense on razor (cshtml files) as in visual studio, but I managed to not use it. Don't be scared to at least try. I was surprised that the experience was far better than I expected, and I used Visual Studio all the time. For an easy distro , I very much recommend Ubuntu or Elementary, very new user friendly. I switched 6 months and feel I can do a lot more easier with linux. 
Sometimes it's better if you can look at things and it being unambiguous without having to hover over and investigate. 
Measure it. That switch can trivially be turned into a jump table by the JIT compiler and then it would be O(1). And if you're worried about the case when there is no JIT compiler just make sure it compiles to the `switch` CIL instruction.
&gt;return silently even if not all IDs are valid The behavior of the method is very dependent on what sort of context it is used in. If a user is entering numbers (product ids) in a ui to find something, then it makes sense to return what is found without complaint.
Why not just: var code = new { field1, field2, field3 }.GetHashCode();
Arrays are heap allocated.
Calls using `FromSql` still benefit greatly from using `AsNoTracking`. I learned this the hard way when it started discarding rows because my view didn't have a primary key.
How does that solve the problem? It'll still have the object.GetHashCode implementation, which is just based on the object Id, not the values in the object. Also, it performs a heap allocation every time it's invoked.
It allocates, and people don't think of using anonymous types right off the bat. Having a type dedicated to generating hash codes increases awareness.
Exactly. In which case it makes sense to differentiate. I personally call them getX when it returns either the desired result or throws a notfoundexception... And query/fetch if the result is meant to be 0 to many.
I can see it being used in scenarios where you want to create unit tests, but cannot mock particular dependencies for one reason or another. Microsoft Fakes is an alternative that is currently used for this. 
Woohoo! I always used the implementation from the Tuple reference source. Hopefully this will finally put SA questions like [this](https://stackoverflow.com/questions/18065251/concise-way-to-combine-field-hashcodes/37449594#37449594) to rest.
That's an additional GC allocation. Hascode.Combine with good implementation can be inlined and have 0 overhead.
[one of the first results in google gives you this](https://stackoverflow.com/a/31912684)
[Try using the Project menu item at the top of the screen instead.](https://stackoverflow.com/a/31912684)
Actually this isn't true, C# overrides `.Equals()` and `.GetHashCode()` for anonymous types with some magic method that takes into account all of the properties. The anonymous type will actually work, just with an inefficient, unnecessary allocation. What `HashCode.Combine()` does is expose the magic under that calculation, so it can be done in an allocation free manner.
Random question, how does your `HashCode.Combine()` compare to the magic compiler generated `.GetHashCode()` for anonymous types? Are they totally different?
call the LeftMouseClick method from a Button [Click](https://msdn.microsoft.com/en-us/library/system.windows.forms.control.click\(v=vs.110\).aspx) event.
Brilliant video, really enjoyed it. Learned a lot about memory.
https://answers.unity.com/questions/1140063/cant-open-project-property-in-visual-studio-2015-w.html &lt;- this was the problem. Thanks. Man what a ****ing pain. ;)
I do this as well, but it would be awesome to be able to get the same dev experience on a Linux distro as you can on Windows. I don't really like running VMs to test things.
Sure - if you're doing something super-performance critical... but in such a case there's plenty of hash functions around. Seems a bit edge-case to add this in.
OK, that's helpful to know. Thanks for the links and wellwishes. Same back to my friend up north ;) I sort of looked into this today, going to continue to look, because you piqued my curiosity. Can't say I'll have any answers since it's all new to me, too. But maybe we can find a good direction to go. Do you have any coding experience? I've mostly worked in Unity &amp; C#. So most of my experience is limited to Unity's framework. I have experience w/Pascal &amp; Python &amp; C/C++, so I'm not a total noob. But I'm sure there's a way to do this... I'll try to take this to pm if i can find more info to share w/you...
Ah, TIL.
.Net Core 2.0 IS available on Arch Linux. It's in the Arch User Repository - AUR. You can also get Visual Studio Code from there as well. Don't let "AUR" scare you off, once you get how it works it's simple and good. Creating a new project you use the Core command "dotnet new &lt;template&gt;" which will create a skeleton project in a folder you choose. Then you point VS Code at that folder and you're pretty well good to go.
God I wish I just knew all this stuff. How did you learn so much?
Of course, given the nature of .Net development and considering that the type is part of mscorlib, "here" means: 1. You can use it right now, if you're on .Net Core nightly builds. 2. You will be able to use it in a stable release of .Net Core in a couple months, when .Net Core 2.1 is released. 3. You will be able to use it in .Net Framework and .Net Standard … well, who knows. Probably in about a year?
It's not a stupid idea. I have struct arrays in my project and it's not uncommon to see something similar in projects focused on high performance in tight loops. Physics engines, for example. Generally they're named base on their max size. Like FixedArray8&lt;T&gt;, FixedArray16&lt;T&gt;, FixedArray32&lt;T&gt;, etc. They're useful when you need an array or a list in a no allocation code path.
Every time I find myself wondering how something works under the hood, or see a slightly interesting method, or a method that doesn't quite have as much documentation as I would like, I google it and spend the next half-hour digging down through the implementation. More often than not, this takes me down a rabbit hole through the .NET reference source :D So I attribute half of what I know to curiosity, and the other half to not trusting anything.
Yep, that's what I would do. Though my first choice would be a read-only copy of Exact to act as a reporting database.
Cool, im pretty much a noob at coding...i've done some java in Processing + a little bit of python as well, I learn pretty quick though when I have a certain goal in mind, just fit the pieces of the puzzle together to make it. Yeah, more or less just need to get https://github.com/rainzhao2000/autodrawer to draw line art using the mouse instead of the grid kernel thing its doing now. I didnt think it would be this hard to convert an image into simple line art....im surprised it hasnt been done really! Cool, ill stay tuned :) 
What is the purpose of a hash code?
The compiler generated `GetHashCode` is the has for the specific reference while `System.HashCode` is used to generate hash codes for the value. The difference is that while two instances may contain the same data the compiler generated `GetHashCode` should generate different values for them, while `System.HashCode` will not.
This is how you should do anything in performance critical paths. I work on a distributed computing platform with billions (literally) of events per second, I know a lot of the .NET code at a lower level than I wish I needed to. We even had to implement a custom string object... fun stuff.
Two objects with different hash codes are supposed to be guaranteed to be different. This is important for Dictionary collections where key clashes aren't allowed. Doing a quick calculation to prove that two items are different is critical to a well performing Dictionary class.
I tried to do this. I prefer Linux and wanted to get back into it. The problem was that our apps require https and jetbrains doesn’t have a way to publish using https. I had to publish behind nginx with proxy pass and it sucked. I’m back on windows until he rains fixes this or “dotnet run” let’s me use a certificate. 
Windows is a god awful development experience once you have learned to use Linux properly.
I do all .net core development on Ubuntu 16.04 with no problems. Mainly doing ASP.NET Core apps. You don’t need mono. Just stick to the dotnet cli with netcore2. 
Not so sure. Linux turns smugness to 11 though. Had that feeling myself. Not much efficiency gain but it is so cool to know how to fiddle with init.d or run chmod. 
I'd submit a request to JetBrains. It may be under a feature that is not obvious on the UI that you need to disable or change.
There are plenty of good reasons to save settings for all users (that's why there's an "all users app data"). There however is no good reason to try to save those settings in Program Files. 
I'm a .net developer through and through, using Windows servers to host, but I recently installed a Linux box next to the server that performs back-ups and maintenance. Long story short: It's a joy to use for reliable, regular tasks. I think it's because the command line is still so fundamental to it, it feels so much more powerful than Windows - knocking up a script to say "step through these zip files, inflate each one, encrypt each inner file then zip 'em up again" is a matter of a bash script rather than a full piece of code. I'm aware everything's possible on every format, but with Linux, there seem to be many more tools available from the command line. Ì doubt I'll move away from Win/VS for my desktop, and Win/IIS for my target, but it's been a joy having Debian in the corner beavering away. I'll admit, I edit scripts using Notepad++ via SFTP from Win, but you dilute to taste, right?
Or you could just stick to this API And not have to worry about using something that isn't as conventionally clear + no GC allocation. 
&gt; I have a developer here that claims that all events should fire into the main thread because that is the way it's supposed to be in C#. Only WinForms and WPF even have the concept of a "main thread" (and old ASP.NET has a thread-agnostic synchronization context). So it's definitely not the way it can or should *always* be in C#, it depends on the usage. Firing events on the UI thread may even be undesired in some cases because it'll slow things down. &gt;Should I force my devs to specify the thread? Allowing consumers to specify a `SynchronizationContext` is the preferrable solution for a general purpose library, in my opinion. Either that or just not performing synchronization and letting the consumer take care of that. I'm not sure what the expected alternative would be. If the subscription is created without a valid synchronization context, that's the problem of the subscriber. I don't think there even is a universal way to obtain the synchronization context from the 'outside', at least not without taking on dependencies to WinForms and WPF and trying to hackily figure out which environment your library is being used in.
You learn what you need to know. Don't worry about keeping up with the Jones's, there's way too much for a single brain to handle, so it's fine to rely on u/crazone and u/Kamilon to do the digging and we can just steal their insights ;) 
This is one of the reasons hashcodes should be immutable, which isn't always the case when the implementation recalculates the hashcode if the object's fields change. 
Allow users of your library to specify `SynchronizationContext`. For WPF/UWP applications SynchronizationContext.Current on main thread is basically a Dispatcher for UI thread. If specified context is null - just fire an event. The default SynchronizationContext will schedule work on ThreadPool (if that's what you want in default behavior).
Yes, I poorly expressed myself. I meant "non-admin user should not do it for others", which kinda follows from the second part of that phrase of mine 😁.
This has gotten quite a few reports. I've removed it for now, but feel free to repost the sale/link in [this Black Friday thread](https://www.reddit.com/r/csharp/comments/7f716a/black_fridaycyber_monday_sales_on_tools_utilities/) instead.
No, I don't think that's right. GetHashCode is overriden in anonymous classes so their properties are used to calculate the hash code. In other words, `new { a, b }.GetHashCode() == new { a, b}.GetHashCode()`, even though you just created two different objects.
OK I'll byte :) OzCode (C# Debugging tool, see [full list of features](https://www.oz-code.com/main#/features) or my [Channel9 interview in On .NET](https://channel9.msdn.com/Shows/On-NET/Omer-Raviv-OzCode) is doing a Black Friday sale :) It is 75% OFF (for the first year) on corporate subscription, so $43.75 instead of $175, and you +1 extra license free for a colleague/friend. Claim link: https://www.oz-code.com/purchase/#/corporate?couponCode=BlackFriday2017
The same notation has been used in mathematics for decades. I do like it, although I've heard concerns it's really hard to parse efficiently without a lot of lookahead. 
Only for redditors 30% off for our BI components: * [PivotData Toolkit for .NET](https://www.nrecosite.com/pivot_data_library_net.aspx) for embedding pivot tables and pivot charts into ASP.NET apps * [PivotData Microservice](https://www.nrecosite.com/pivotdata_service.aspx) (.NET Core ROLAP engine) can be integrated with any web app To get your personal discount code please contact info@nrecosite.com with phrase "REDDIT CYBER MONDAY" before Nov 26 23:59:59.
Just a note, though. Entity Framework Core does not support Views. (if you're using core, that is)
Really? Wow, that's extremely stupid
I've recently started using EF Core, too. Awesome. Can't wait to encounter that bug, myself.
I always use Task.Run(async() =&gt; await AsyncMethod()).Result; But I dont know if this is actually a good solution.. someone please correct me or teach me the good/bad things about my solution! 
&gt; Only WinForms and WPF (and UWP?) even have the concept of a "main thread" ...a main thread is a generic programming concept. Any program has a main process/thread and may or may not have child processes/threads that said main process/thread spins off.
you don't need to apologize for that mate, I'm not a native speaker either but I was able to understand you.
Tell me about it. I may just use something like Dapper in the meantime to make up for it.
As far as the CLR is concerned, an application has an arbitrary amount of threads which are interchangeable. An application needs at least one foreground thread to remain running, but it doesn't need to be a single continuous thread. Even if you consider a thread to be the logical "main" thread in a console application (e.g. the thread executing the entry point), there is no generic way to invoke a method on that specific thread because it's not running a message loop like the WinForms UI thread is.
To expand on the winforms wpf thing; even in those types of applications not every event needed to fire on the "main" thread, only ones which directly affected the UI. This was because UI elements were not thread safe so .net forced any changes to the UI to be on the same thread. Everything else could execute in its own thread just fine. 
How long is this deal good for? Just today? I can't ask my boss til Monday!
I love Visual Studio, but I gotta say, I use VS2008 over the newer ones. I find myself constantly fighting with the IDE in later versions. Given I spent so many years in VC++ ver 6.0, I'm surely biased. But jeez, I have two huge monitors, I dont need one window of code open that is maximized on the entire screen. I'm almost always working across multiple files, that tabbed crap just doesnt cut it for me. And macros, they decide we dont need rec/playback macros, really?
The old codger is talking about UI thread affinity and/or EBAP (Event Based Async Pattern). Code which interacts directly with certain UI entities usually has to occur on the thread associated with the UI. EBAP was a nice refinement of asynchrony after APM which came before it. The AsyncOperationManger is used with [EBAP](https://docs.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview) which is one of the older but not the oldest .NET async patterns. You can make your library work with a synchronization context and marshal all its events back to the right thread, you can pass in SynchronizationContext.Current from your WPF application start up code to a StartUp method on your API for example. Current in this case will be a DispatcherSynchronizationContext, it will be different in Winforms. Just be explicit about setting up the correct context. If there isn't one set, have the code use the current context. There's no rule about making events fire on a specific thread, it's really up to you. The EBAP included support for it because it's the basis of lots of things, BackgroundWorker, one of the Timer classes, etc, so if you're using EBAP it is important. So old codger is correct, but has either forgotten why he was doing what he was doing or not great at telling you. Either way it's worth looking at how async is done in a post post-modern world and leaving EBAP as a peculiar historical stepping stone that it was.
That's not quite right. Here's a bit of [history](https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/wpf-architecture#System_Threading_DispatcherObject) about it.
Thanks for your input. I think this is going to be the way to go. I'll give the devs the opportunity to set their own context and if no is provided, it will provide its own context. I highly doubt that my coworker is familiar with EBAP. Dude is an electronics engineer from when tubes were still a thing and self-taught himself first BASIC then delphi 5, and is only now making the transition to C#.
Been deploying .NET apps on Linux for years without issues. I don't see why some people immediatly declare you shouldn't mono and just use dotnet core instead. It all depends on what you're building. If you're just building ASP.NET apps, sure do dotnetcore, but there are quite a few things that are (currently) not supported by dotnet core and a large number of libraries that have not been been ported yet. Get the know the differences between the platforms then decide whatever is best for you for that specific project. Also look into Docker since that'll give you the option of simply starting new containers with mono or dotnetcore support as required by your project. As far as UI projects are concerned, obviously you can't run WPF apps on Linux, but you separated the logic from the UI you can use another UI toolkit on Linux. (Your success with Winforms may vary) If you have some time to wait, Xamarin.Forms is officially coming to sometime early next year. That gives you a cross platform UI framework with (almost) all the benefits of WPF. You can even start building your UI apps today, target UWP, MacOS, iOS, Android, etc... and then have it run (with some modifications) on Linux when it's officially released. In short, never dismiss a technology just because other say so. Know the frameworks, understand your problem, then decide whatever will suit you best at that time. 
You can use `Assembly.Load` (or a similar method) to explicitly load an assembly. Once loaded in an AppDomain it will not (and can't) be unloaded. So you could wrap multiple calls to `Assembly.Load` in a utility method in your own assembly and just call that method.
Depends if he wants gui. There's Avalonia, but I guess GTK + Mono would be better for now, at least?
&gt; I found .. and ... to be the most intuitive. Because, if you already know .. then ... is clearly "one more"; inclusive. In ruby, `..` is inclusive and `…` exclusive. In Perl, both ".." and "…" are inclusive. In Haskell, `..` is inclusive and there is no `…` (by default anyway it may be possible to create your own). &gt; Whereas ..= and ..&lt; introduce some new sign of which the meaning is not clear without further knowledge. The `=` and `&lt;` hint very strongly at the behaviour of the upper bound, much more so than "you've added a dot, now guess".
Yes, this can make sense in some situations, but there's . As others have hinted, pooling shared objects is probably going to be good enough, especially if you're just looking to minimize GC activity inside of real-time areas of your application, and it might even beat what you have here in most cases. Although I believe that the "right" answer has already been stated (use measurements, not guesses, to find your answer), given the way you phrased your post, I think you (and maybe others?) may find some value in a serious discussion about this one, even if it's just to get a better appreciation for the kind of work that went into the design of `List&lt;T&gt;` and the kinds of considerations that you sign up for when you go off the beaten path. I'm also doing a lot of boring stuff at work these days, so I appreciate the opportunity to seriously consider a challenge like this to keep my brain from rotting... 1. 8 items per list, plus an object reference for the residue, plus a count, feels like it can be a **lot**. If each item in the list costs 8 bytes, then the struct cannot fit into a single cache line on most CPUs even if you have just one or two elements. Depending on the exact scenario, it seems possible that this might possibly (maybe [who knows?*]) impact the cache coherence enough to hurt more than the incremental amount of gen-0 allocations that you pay as part of the cost of using `List&lt;T&gt;`. 1. *no clue (MEASURE!) 2. Especially if you're already at a point where a short-lived temporary allocation is (treated as) expensive, then you probably want to reimplement more parts of `List&lt;T&gt;`, to optimize even further for your use cases: 1. `List&lt;T&gt;` has its own count, but you can infer that from `count - kMaxMiniCount` as long as you keep `count` up-to-date. 2. `List&lt;T&gt;` has a field to make sure you don't try to modify the list while iterating over it, which you may not need. If you do need it, then you'd have to reimplement it anyway. 3. `List&lt;T&gt;` has a field for its implementation of [`ICollection.SyncRoot`](https://docs.microsoft.com/en-us/dotnet/api/system.collections.icollection.syncroot?view=netframework-4.7#System_Collections_ICollection_SyncRoot). You don't pay the allocation unless you use it, but the instance is still fatter because of it. 4. Do you have a statically known "maximum" amount of elements, and is it relatively small ("relatively small" = definitely [&lt; 85000 bytes](https://stackoverflow.com/q/8951836/1083771), and hopefully much smaller than that)? If so, maybe you just want to allocate the whole residual array all at once with the "worst-case" size, to minimize the number of objects that you have to . If not, then it still may make sense to adjust the reallocation strategy (maybe slow down / speed up the geometric progression, or even something other than a geometric progression, depending on your special circumstances). 3. As long as you're paying the memory cost for your own fields anyway, it's possible that you can still benefit from keeping the data in those "special" fields even after the `List&lt;T&gt;` is allocated. Again, it depends on your specific use cases, but if you regularly find yourself only scanning the first N items, then you don't have to pay the costs (pointer indirection, bounds checking) of going through the `List&lt;T&gt;` to get the data. 1. Thinking about how `Shift` would look after doing this is what prompted this next one: 4. There is a **lot** of code here. Are you sure you need all of it? Your description makes it sound like it's *possible* that you might be able to get away with just a few of these methods, possibly just `Add` and `GetEnumerator` (maybe also the indexer, maybe also `CopyTo` depending on how serious you are about this). If so, then you can focus on just those methods instead of forcing yourself to do everything that's on `IList&lt;T&gt;`. 5. [Calling `Equals` like this](https://gist.github.com/joethephish/9f486de25f5e7d6b3b2182eb2fd6a565#file-minilist-cs-L112) will box the parameter if `T` is a value type. Instead, fetch `EqualityComparer&lt;T&gt;.Default` before the loop and use its `Equals(T, T)` method. 6. This has been mentioned elsewhere, but if you ever have to hit that `GetMiniEnumerator()` path, then you're still allocating on the GC heap. 7. This has also been mentioned elsewhere, but you can use some tricks to eliminate the `switch` block... just exploit the sequential layout of the "special" fields and use managed pointer tricks to address them within the struct. You do have to be mindful of alignment if you're planning to have your code run on ARMv6 or below (or some other platform that doesn't guarantee that unaligned accesses will do what you expect... x86 / x64 do this). Here's [my take](https://gist.github.com/airbreather/8a87e30aaf46ade5ceae5f2b904b3f7e) on this idea. Some odd things to point out: 1. Requires [`System.Runtime.CompilerServices.Unsafe`](https://www.nuget.org/packages/System.Runtime.CompilerServices.Unsafe). 2. I've only barely tested this for correctness, and I also haven't benchmarked a single thing. 3. You can still `foreach` over this even though it doesn't implement `IEnumerable` or `IEnumerable&lt;T&gt;`. 4. The residue is backed by a `T[]`, with helper code inspired by `List&lt;T&gt;`, to enable: 5. Pretty much everything goes back to a single method with a return type of `ref T`, which points either to one of the "special" fields or to a slot in the `T[]` (which this helper method is responsible for creating / resizing as necessary). 6. Because this type is so fat, pretty much every "helper" method is static with a `ref` parameter so we don't have to keep copying the whole thing around. Without measurements, I don't want to claim that this is optimal, or even that it's better than what you've got (or better than anything in particular, at performing any task at all). I just wanted to share this because it's got some odd ideas in there that you might find interesting.
&gt; It even requires enclosing the "range expression" with parentheses while in python it is something like `start:end:step`. Technically that's not a range that's a *slice*, in Python ranges are created with the `range([from, ]to[, step])` builtin function.
You could already use static imports to make it look significantly better.
Yea, that was a real head scratcher. The database had the correct FK relationships and I didn't see anything wrong with the fluid configuration in the data context. By the I, I'm really starting to hate fluid configuration. Sure the XML was no picnic. but this crams way too much into one multi-thousand line method.
You can fake it by pretending your view is really a table if: 1. You don't mind writing raw SQL 2. Your view has a unique column you can mark as a primary key And yes, that means you can't use EF Core to read from heaps that don't have a primary key.
Task.Result always blocks, so you don't gain anything here.
I will keep using windows until I find a decent UI toolkit for linux.
But then the edit and continue breaks when using Fody. I know with some projects this doesn't matter, but I work with robots and restarting can take 5 minutes - edit and continue is a life saver!
The campaign is up till today, but the coupon is good until the 4th of Dec. BTW, the coupon code is: BlackFriday2017 
On the other hand, `Delegate.CreateDelegate` can [destroy the fabric of C# reality.](https://stackoverflow.com/q/17675720/1269654)
Oh that's fun.
Oh yes, my bad. The anonymous types do override it. I was thinking of `object.GetHashCode`.
How is it smug to make an opposite assertion? Windows dev in a nutshell: - I need elevated permissions? Better right click an icon, start up a new shell as administrator, click Yes, then navigate to the directory I was working in to try again. - Speaking of which, PowerShell is clunky as hell and good luck getting it set up to do some basic dev tasks without jumping through a million hoops just to be able to grep a directory. - Filesystem is garbage. Limited to a number of drives based on the alphabet. Having a network of drives mounted is out of the question. - Docker for Windows won’t reflect changes of host system files to clients because of aforementioned file system. So that takes out automated local build processes.
Pluralsight, not C# specific but 33% off.
In addition to what /u/AngularBeginner said, Microsoft have something called MEF which is designed for this sort of scenario. It's designed to make plug ins simple to build. It takes care of all the assembly resolution and handles assembly dependencies and other things. CurrentDomain.AssemblyResolve is ok but there are a whole host of gotchas when you do it all manually. MAF might actually help you with your host stuff separately query. You can build your own AppDomain and load stuff into it, but that too is fraught with complexities. You can very easily accidentally load the DLL multiple times just by squinting at it wrong. [This is some more info about MEF and MAF](https://docs.microsoft.com/en-us/dotnet/framework/add-ins/index) 
Haha, I'm sure we could get it to work if we just use a really robust version of null :)
I'm shopping for a new ORM. I was considering Dapper as it's simple and reasonably fast. Yours looks nice though so I might compare a select few rather than go with the one who's name I like :)
What database? Chain, like Dapper, works with any database in raw SQL mode. But it only really shines when it knows how to read the database metadata. So that's mostly SQL Server and PostgreSQL. (I'm slowly working on MySQL and my roommate is tackling Oracle.) 
LiveXAML for Xamarin Forms is 25% off [www.livexaml.com](https://www.livexaml.com/)
I keep forgetting that this is an option and always do it the hard way.
Any advantage using CreateDelegate over generating and caching expression trees?
Don't know. Honestly, I didn't know anything about CreateDelegate before now. Most of my research has been on efficient SQL generation, which mostly involves researching database specific features.
Right now, if you use anonymous types and decompile the output, you get something like this: [DebuggerHidden] public override int GetHashCode() { return (1655539742 * -1521134295 + EqualityComparer&lt;&lt;A&gt;j__TPar&gt;.Default.GetHashCode(this.&lt;A&gt;i__Field)) * -1521134295 + EqualityComparer&lt;&lt;B&gt;j__TPar&gt;.Default.GetHashCode(this.&lt;B&gt;i__Field); } To answer your question, yes, they use a different algorithm right now. However, one of the C# compiler's authors has mentioned he'd like to switch them to use `HashCode` as soon as possible. So in the future, when you write `new { a, b }.GetHashCode()`, you'll just be calling `HashCode.Combine(a, b)` under the covers.
Yes, that's possible. However, people don't see tuples and automatically go "hey! maybe I can use this to help me generate hash codes". We are putting out a type with the words "hash code" in its name for better discoverability.
Wow, a custom string object? What was the scenario for that / how did that turn out?
I'm not exactly sure about the performance characteristics of CreateDelegate, but with expression trees you can generate code dynamically that once compiled and cached basically run without performance hit, in ways that are a lot more flexible than CreateDelegate. For example I used expression trees to come with with a better version of MethodInfo.Invoke([]). Given an array of arguments dynamically invoking the method with the arguments every call would take too much of a performance hit. With ExpTrees I generate a new function for every method I want to call that given an array, calls the function with the objects in the array, casting each as they go. Once compiled, performance is on par with a normal method call.
The scenario was 15+ billion events per second. We needed to consume strings of arbitrary length in realtime. Strings are immutable in .Net. We needed minimal allocations. We did this by making our strings single alloc and if you wanted a substring for example you'd point to the old string with different start and ends. It works really really well. Strings can be made and chopped, concated etc without allocating another string. Nothing gets past Gen0.
Catching requires making assumptions. There's only so far you can go with that before you should just give up and go with full code generation. That's how Chain Compiled gets it's insanely good performance. But it can't handle tricky things like stored procs that return a variable number of columns. I'm not saying that I can't go father with Chain non-compiled, just that I need to be cautious.