In an ideal world yeah
The JavaScript engine has to read and understand your code. This transformation from plain text to a semantic tree is called ‚Äúparsing.‚Äù If there are fewer characters, the parser can do less work.
It sounds like a lost cause now, but if it had been kept reasonably up to date along the way it might not be.
&gt; It will work. If your project is little more than a .Net Core ASP.Net app, a console app, and a dll - then sure. Real world applications that weren't greenfielded in 2018? Not so much.
Lol I felt like a 5th grader reading that. I understand what a parser is. I feel like we are talking milliseconds in difference
Woof. I used to work somewhere we used Windows Server 2003 VMs with VS2010 to develop the whole stack. That was in 2012 or so. I can't fathom that shit nowadays.
For my team, i provide a supported tooling. They are welcome to use whatever else, provided the license permits such use; but if their tooling slows them down or causes issues for others, i will ask them to switch to supported setup.
Several years later? Really? That's not a \_good\_ excuse anymore
Yeah a full replacement has been started so not worth major overhauls.
If they can afford a developer, they can afford MSDN or visual studio... seriously. Unless it's like a startup company with 2 people who haven't actually made any sales yet.
Easy. Incompetence.
1.1 works with 2015. 2.0 does not. 
@PerfectByte Feel free to use anything from mine.. https://github.com/lolp1/Process.NET I also find https://github.com/aevitas/bluerain particularly well done. 
Can you not ship it as a nuget package to your repo and get them to use vscode to modify it ? That's what I do at my office as some people refuse to get of vs 2013 or 2008 
The memory management book sounds promising. Ordered! What other deep tech books can teach me heavy runtime internals? For example, I'm interested in what optimizations JIT performs and when, memory barriers, reflection internals, etc. Deeply understanding TPL would be cool too.
Probably so they don't have to go on Reddit asking why their different tool doesn't work. Just spitballin, though.
The point I was trying to make is that this is an unsolvable problem, and not just in C#. There is no language on earth where this works. 
The point is that the level of deterrent is so mild that it's not at all worth it. Basically even if you're using the free one in Visual Studio, it's going to cost you more than it's worth. Unless there's some legal thing I don't know about where obfuscated code is better protected, then you should just never do it. 
I'm in a department of 2 developers for the entire company. We have MSDN.
You can write a script for a batch file to delete everything in that folder before publishing. You can even have a call from the build
What does Microsoft certified entail?
Upgrade cost?
You have like 2 or 3 people pass the test and you apply for a partner level. I forget the details, but I know we do little for it. We get a lot of stuff cheap that way. We get VS Pro that way. They also have monthly payment plans now that are very affordable.
CLR via C#? 
CLR via C# always felt short and high-level to me... It covers the CLR as best as it can in 800 pages, while in contrast the memory management book is 1000 pages focused on JUST memory management. I guess I'm hoping for more books like the memory management book that can give me far more depth in other topics.
And pretty soon 2019 is going to arrive. Then again, we're still having several ancient projects that are in VS2013 which still occasionally need maintenance. Those are not fun jobs.
We had this problem with team city and octopus deploy. They got so out of date that we missed out on a lot of useful stuff and our upgrade path was difficult. Once we did that we had monthly upgrades if appropriate. 
Dude in a commercial environment? You're the sort of dev that increases thr workload for everyone without thinking. 
Do you think you should be? You added a feature that broke the workflow for many others... Don't commit code that uses C# 8.0.
In an ideal world neither the team nor a 'senior' on the team is making the call about what IDE is to be used. Not for an IDE as sophisticated as VS ffs, not for a project that wrestles multiple teams. That dictate is being made by a project manager or the scrum master, depending on the level of role authority they have in the scheme of the project. If its not that, if its a situation where developer 'seniors' can make their own decisions at their own personal level.. dont expect slowdowns... expect chaos.
I have to maintain a Silverlight application, which isn't supported in 2017. I do all the new work in 2017 of course and am using dotnet core as much as possible, but legacy support is important.
&gt; But I think what many of them would prefer even more is not for Oxymoron290 to break their build in the first place‚Ä¶ Eh, if you don't like change then software is not the right career for you.
**Better write a program in such a way that no one understands your code, including yourself** **:)** BTW Yes sometimes I do obfuscate my code just to protect my hard worked intellectual lines. Sure it does decrease first time execution performance slightly but hey no worries, nowadays people have more than dual core CPUs. I use [ConfuserEx](https://yck1509.github.io/ConfuserEx/) tool from *GitHub* &amp; it has satisfied my requirements till now. 
I would create a class called Weapon then extend off for all of your types of weapon. You can then populate a List&lt;Weapon&gt; with all of your types. When you are printing the menu I would iterate over the list to say your choices, eg $‚Äù{Index + 1}: {CurrentWep.name}‚Äù then when they choose a number, just subtract 1 and access that index from your list to get the weapon details.
r/programminghorror
You will need a list or an array of values that you can pick from based on the user's input. So prepopulate your collections, iterate through them to display the values, then read the index the user inputs. Also, keep in mind collections are zero-index based. 
Hey man. Looks like it‚Äôs going to be a fun game! I have a few suggestions. I wouldn‚Äôt name that variable ‚Äúname‚Äù, I would name it ‚Äúchoice‚Äù or ‚Äúselection‚Äù or something. Also instead of string Name = ‚Äú ‚Äú; I would do var selection = console.read(); which returns an int. Local variable should always be lowercase but that‚Äôs a style thing. Change your switch case from ‚Äú1‚Äù to 1. At the end of your switch statement you need a default section which should be 0. If the user inputs anything besides an int you will get 0 so design your code that way. Also I wouldn‚Äôt put all of those console.writes into each case. Just have a case call a method like PrintWeaponSeletion(); that will make awhole lot more sense to you in a few weeks then reading all the text again.
there are lists for names, weapons and so on i just need to be able to take what number they pick and make it so what ever they pick goes into a string to be able to print out later &amp;#x200B;
C# in Depth by Jon Sleet.
For a undergraduate C# introduction course? I'm wondering why this book is always named first, if anyone is asking for a literature advice in C#. Don't get me wrong, it's a good book, but not the holy grail in C#. Especially not for a starter.
often mentioned, pretty good and for free: [C# Yellow Book](http://www.csharpcourse.com/)
If this needs real characters(I mean drawing and all) then this will be a real pain in ass. Just 3 days ago, I wanted to move an ASCII character(loaded from a file) in console, it took me a long of time just to do that while I think that I would do it in a minute if It had a GUI. Just saying.
not its just like picking a name one weapon one skill one utility iteam then having designated points to each and at the end display it back to the user what hey have in there bag and how much points they have, then just saying yea you dont have enough points to go onto the next level noting major i just have no clue what to do 
As a student, I second this. 
What a ridiculous recommendation for an introductory course.
Either "C# For Programmers" or "Visual C# How to Program, both by Paul Deital. The second one is an actual college text book with a lot of exercises at the end of each chapter. 
Did you even read the post?? They've got c and java experience...
They said they'd got c and java experience... so yeah, a c# book written by a java guru sounds perfect imho
Yeah I read it. If OP wanted a non-introductory book then the OP wouldn't have made it a point to say it was an introductory class.
I always hear people naming all sorts of C# books but does anyone know of any good dot net? 
It costs dramatically more money to not upgrade.
I switched to SQLite and it's working just fine. Weird!
Why?
That is what he is saying. You basically want a map from the number they type in and the string that corresponds to that number. This can be done with an array. So like if your case it would be like string weapon = weaponNames[selectedIndex - 1], where selected index is the number they typed in parsed into an int. The other option is to directly map the number string to the name with a Dictionary.
[removed]
Design Pattern by Gang of Four. You don‚Äôt understand how many interviews I fucked up because I never read it. Plus it really helps write good code ü§ì
Not trying to sound judgemental, I actually have to use VB.NET with some legacy applications, but why would anyone choose to learn VB? It's a pretty non standard syntax and it doesn't provide anything novel.
Because legacy ~~applications~~ developers. Typically gov‚Äôt shops where MS pushed a culture of VB6 back in the late 90‚Äôs and early 2000‚Äôs. Government jobs don‚Äôt have the churn that the private sector does. 
Yeah, if you're a pro dev this book should be yours.
For starters, don‚Äòt use inheritance just yet. If you have two types of cards, use an enum to distinguish between them and let every card have this ‚Äûtype‚Äú attribute. Once you have a working solution, you can refactor to use the type system to your advantage and also make your code more efficient.
honestly, i know Java, C# and vb net. I think its because it almost seems really linear to understand. if i am thinking of writing something i usually think of it in terms in vb net then i translate it to whatever language is more conducive to what my client wants to accomplish. But aside vb.net, i'd say that python is really easy to grasp because its identical to pseudo code. But maybe i have a bias because i started writing code with macros so that's why maybe its easier for me to grasp stuff in terms of vb. 
No, I would not make a class for each individual card. That sounds like a nightmare. I think it's fine to start with a base class for each type of card. Only if a particular card or group of cards becomes from very different from its base class would I want to add a new type. I'm a magic player so I'll put it in those terms. Almost all creatures (minions) in magic are basically the same. They have color, type/subtype, attack, toughness, casting cost. This covers a large percentage of creatures in the game. Some creatures have some ability text associated with them. Some don't. Maybe a list of abilities in your creature class would cover that. Structuring it this way, you could cover thousands of creatures in a very complicated game like magic with just one type for your creatures. Good luck. Modeling this type of setup can get complicated.
[Pro.NET Memory Managment](https://www.amazon.com/Pro-NET-Memory-Management-Performance/dp/148424026X) \- So far best book about .NET memory. If u wanna general overview about C# and .NET - [Pro C# 7](https://www.amazon.com/Pro-NET-Core-Andrew-Troelsen/dp/1484230175)
I totally agree with this. If op has previous experience, this is by far the most efficient way to learn just the additional stuff.
This has nothing to do with C# though and not for an intro course
Have you read this book? It just came out... price just dropped though. Definitely not for an intro course though
For starters? C# player's guide by RB Whitaker was the one I read when I switched from PHO to C# a couple of years back
There are many patterns you can use, but you must never forget to use Unity's architecture as well. Default stats that may exist in lots of different cards should be put in a ScriptableObject and created by you or the designers via the editor. Your in-game cards should then use that ScriptableObject to create new instances of the cards at runtime. The rest can be done in any way you like. Before doing anything more, you should understand the way your game works completely. Then you can start making base classes that help you, both for creating simple or more complex cards. 
I have read [Pro C# 7](https://www.amazon.com/Pro-NET-Core-Andrew-Troelsen/dp/1484230175), can definitely recommend it for an intro course about C# and .NET. About .NET Memory Managment, Absolutely this book its not for beginners, only if u wanna extend knowledge about .NET (I bought ebook for 7$) &amp;#x200B;
Your cards should all implement an interface with two methods, and you should use as few concrete classes as possible. The first method outputs actions (things the card can do). The output should be pure information about the actions, not instructions on how they should look in the UI. The second method takes an action as input and executes it. Execution of an action should be asynchronous, and you should have some way of sending events (pass in a callback if you have to) to the UI to let the user know if/when something happens.
thing is magic an minions are severly different from eachother. Magic cards dont have attacks, health, attackpoints, and should look completely different. Interface is perfect here, i think
Use components for everything you can.
the thing is, i REALLY want a card interface and magic und minion cards to implent it, can they impelent the interface AND still be a scriptabel object? &amp;#x200B;
Yeah i wanted to get it right this time, because these things can get so complicated. The thing is, i just dont want ONLY ability text, but "actual programmed logic" for each ability.
Make an abstract base class that implements the boilerplate of your interface. Extend that. Do not create a class for each card unless that card actually has distinct behavior (a distinct code path). Most of these cards will be a difference of parameters not a distinct code path. Re: attack. You could do an IAttack component interface, but if you‚Äôre thinking of doing a MTG-like attack system I think that‚Äôll become a pain. It may be better just to have a set of flags (flying, etc) and one big attack code block that handles all the common cases. Also this system has probably already been implemented a dozen times. Take a look at what‚Äôs already out there. Search on github. Buy stuff on the asset store. You‚Äôre not going to get it right on your first go but doing some research will help you do it less wrong from the get go. Good luck and enjoy!
Gj embarrassing yourself
The `foreach` statement is duck-typed, i.e. it looks for methods with the right names and return types even if they don't implement the `IEnumerable`/`IEnumerable&lt;T&gt;` interfaces. The reason the `List&lt;T&gt;` enumerator (as well as a few other ones) is implemented the way it is is to avoid heap allocations by making the enumerator a struct. A `foreach` statement on a `List&lt;T&gt;` will call `List&lt;T&gt;.GetEnumerator()` directly, which returns a `List&lt;T&gt;.Enumerator` struct. On the other hand, `IEnumerable&lt;T&gt;.GetEnumerator()` must return an `IEnumerator&lt;T&gt;`, which requires a heap allocation (boxing a struct, in this case).
I find that I code better particularly with craft brewery. 
I've thought about this problem before. I mostly work in Ruby, but I think the solution could work in C# too. (I only mention that in case my suggestion sounds odd). If any of this is bad practice, experienced devs please let me know! Consider having a type that lives within the cards themselves; say `CardAbility`. Each of your cards could have a `List&lt;CardAbility&gt;` that gets called when the card is played/activated. This would allow you to share a set of card abilities across multiple card types. The `CardAbility` objects wouldn't be the *whole* card's ability, only a building block of it. For example, let's make a card with the Magic type called "Collateral Damage". When you play it, it destroys a target minion, then deals 2 damage to everything else. The first `CardAbility` would have the effect "Destroy Minion," and a scope of "One target." The second `CardAbility` would have the effect "Damage Minion," a scope of "All objects", and a parameter representing damage that would be set to "2". So our card ends up with a `List&lt;CardAbility&gt;` of two elements that tells our card what to do when it's played.
ScriptableObjects and MonoBehaviours are almost just like any other class in C#, save the contstructors. You can implement anything you like in a ScriptableObject, even save logic. Check out some of the talks on ScriptableObject architecture in YouTube, it might help you on how to use them as delegates.
Just because I was curious, I'm pretty sure [this](https://scriptarts.jp/csharp-discordbot/) is the code from the screenshot with a few minor changes.
epic programmer moment (not clickbait) (gone sexual) #victoryroyale
I typically don't. Most of my professional work has been at businesses where everything is internal and code theft is not considered a serious issue, or has been related to open source projects (where obfuscation typically makes no sense.) The only time I've *seen* obfuscated .NET code in my travels has been when it involved a licensed package that fills a niche market. Most recent example would be Devart DotConnect. Their Oracle provder is better than what Oracle gives you, but even in some of the stack traces you can see the obfuscated code (Often the first trace of an exception would be a class/method like `b.a()` or `b.c()`) If you've done a lot of work on making a *very* special algorithm, or putting together a driver for a special system, that's probably a good example threshold. BUT, it's worth considering the side effects of obfuscation in the case of the former. Often, obfuscation results in things like : - Control flow changes (Loop Rewriting, splitting up methods, etc.) - Proxy Generation - String obfuscation If your very special algorithm is something that is special because of performance, obfuscation *could* eliminate the whole point of the exercise.
What does "impossible to beat javascript in the near future" mean? Beat it at doing what? 
Thanks for sharing!
Here's a good question for you to think about: Are minion abilities and magic cards really different? Could they not both be the same thing? Could a minion simply have a magic card attached as it's ability? So now that you've answered that, you take a look at the abstractions: You have the basic Card. It has a cost, type, etc. You can then attach stats to it to be a minion, and abilities. What if you just called summoning a minion an ability? Could that not be a spell? So why not get rid of minion cards altogether, and instead have all of them be a summoned ability from a magic card? You have some obvious display differences. Now you could argue under the hood that a minion card is no different from a magic card that summons an identical minion. But now you may want to add modifiers to the stats of the minion while in hand: so now there's a large difference to just a minion card, and a magic card that summons that identical minion. So now there's a new distinction: Minion cards can affect the stats of the minion summoned, while magic cards can't. 
It looked really dirty to me to display a variable, which was only declared withing a method. 
Are you nuts. This is in programming 101 in open university. Get a grips. 
If it supports the USB OEM/OPOS mode you can use it via Microsoft POS for .NET. I use it on quite a few machines and it works pretty well. Don't think it's HID anymore at that point though.
Thanks! This did the trick!
Can't believe you have an Albert Einstein poster. Is this post supposed to be cringy or ironical? Cause I really can't tell.
I also had experience in java and C++, what I did was watch an introductory course in YouTube (really basic no more than an hour) and after that started to read C# in a nutshell. I also used LINQPad to check the generated IL. 
oh yeah I was referring to Pro .NET Mem Mgmt. $7 or $70? The ebook is $50+
I have to give my 2 cents worth here. Now I am in my late 40s and am a CIO now, but still tinker with Development (at home) and I am exacerbated at the way IT has evolved and continues to evolve. When I learnt to program there was a fundamental aim, all code should be maintainable. This meant minimalizing the options available to the programmer, forcing them into a "standard" or uniform way of doing things, which made it much easier for everyone to understand and therefore maintain. C# and other languages has thrown this idea in the bin, costing fortunes to businesses. Adding totally unnecessary options such as Lambda and LINQ. It worked before! Having verbose, English looking code, made it easier to understand, changing this to tiny, incomprehensible new expressions, might be leaner, but again, goes away from makes a language fundamentally business friendly and useful. The compiler should do the work, not the programmer. If LINQ is more efficient that shows poor interpretation of the original code into machine code, not the text code you type. You had ASP.NET Webforms, which were great, but MS didn't evolve them to become responsive or integrate them into JQuery, CSS and Bootstrap, which would have been wonderful, instead they pretty much abandoned them and are now pushing MVC and Razor with code-behind. A whole new way of working, yet again! Instead of learning one language (C#) I now need to understand Razor, JQuery, Javascript, JSON, CSS and Bootstrap just to make a bloody basic form appear on a web page! The bottom line, is have one way of doing something and even if its not the most efficient or elegant, it works, its maintainable and understandable to everyone. You can evolve a language, but add new things, but not another way of doing the same thing. At least remove the old option, so everyone moves to the new way of working over time. Flexibility is NOT a good thing! &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B;
7$ but that was black friday deal.
Being so prominent. There is a saying, if it can be done in JavaScript, it will be done in JavaScript.
Just a note on abstract classes and interfaces I‚Äôve heard in C# tutorials and my CS prof among others that interfaces are usually better than abstract classes. I‚Äôm not saying that you need to use an interface instead of an abstract class, but you should at least consider that since you‚Äôre clearly interested in OOP. To be clear, this may be one of the cases where an abstract class is better than an interface since you likely will have multiple classes with method implementations that are the same. This is just something to think about because code organization and reusability is important. You need to understand the implications of the software design decisions you make. 
Can you list out the requirements (and or differences) of the Magic and Minion Cards? My first thought was a couple of enums (CardClass, such as MinionClass/MagicClass, and CardType, such as IceMagic/FireMagic, StrongMinion/WeakMinion) and have logic be executed based on those and other factors. I think we all could assist a bit better if we knew what the Magic/Minion Cards were and could do (maybe a few different examples of different cards within these types). Also maybe some game rules of how a round is played out
"The C# Players Guide" by RB Whitaker. I agree that "C# in Depth" by Jon Skeet is a great book and is a fixture on my bookshelf, but it can get a little deep into the finer points and that might be more than you're looking for at this point. "C# The Players Guide" more or less assumes that you have no programming experience and walk you through some sample programs. Disclaimer: I'm a little biased because RB is a classmate of mine from Computer Science 15 years ago, but I think he really explains things well. I would recommend getting both books and go back-and-fourth between them. If you're looking for "introductory" level stuff, I would recommend getting used older versions to save money. You won't miss out on anything. Right now on Amazon: - C# Players Guide 2nd edition: $5 used - C# In Depth 3rd eidition: $18 used
RB and I went to college together several years ago. We took a few computer science classes together and even had a few group projects. I always thought he was the better programmer. Just curious: what did you think of his book? Given that it's self-published on Amazon and not widely known, how'd you find it? 
IBM seemed impossible to beat in the 1980s, and Microsoft in the 1990s. Never say never. JS isn't _that_ great a language. Regardless, though, I don't think Blazor's goal is to "beat" anything. If you watch the early parts of the video, it's being positioned as a competitor to Angular, React and Vue that happens to offer a different language and ecosystem. None of those three had to beat one of the other two in order to be relevant.
Comparing tech 20-30 years ago is not really that relevant. The speed tech moved back then is not the same as today. Innovation these days are short lived hyped, crazes and the 748th JavaScript framework ;).
The Deitel "How to Program" books series are really great for all levels in your coding journey. It has a massive amount of information, examples and concepts to learn from. http://deitel.com/Books/C/VisualCHowtoProgram6e/tabid/3680/Default.aspx
I'm pretty sure that should work just fine, actually, as long as you're okay with whatever the type has overloaded object.Equals() to do. If you need something more specific, you can add a constraint for IEquatable&lt;T&gt;, or ask for an IEqualityComparer&lt;T&gt; to get a custom comparison.
So a List&lt;t&gt; implementation of GetEnumerator is preferable because it doesn‚Äôt require boxing since structs are value types and don‚Äôt have to go on the heap? Also when does the non-generic version of IEnumerable.GetEnumerator() get called? I understand that if you have a List&lt;t&gt; myList and do a GetEnumerator you will get your first example and if you create your list as an IEnumerable&lt;t&gt; myOtherList you will get your other example. But I‚Äôm trying to think of a reason why anyone would create a non-generic IEnumerable myObject where IEnumerable.GetEnumerator would get called.
Its a shame they are locking you into whats effectively razor as was used in [asp.net](https://asp.net) mvc. Want to use something else or just put some webassembly along side your current js? Good luck with that :/
What if my List actually looks like this: `List&lt;Edge&lt;T&gt;&gt;` and class Edge has two fields: `T Ngram; int Prob;` And how to proceed in situation when I want to check (maybe with lamba expression?) if this list contains Edge which Ngram field is equal to my T object?
I'd like to thank everybody for the encouragement and help. It has been very beneficial. The biggest thing right now is the logic / problem solving part. I'm getting there slowly but surely. Grades are A's still and always have been. I'm also setting things up to pursue my associates. All in all things are well and I will be continuing to view this thread for a long time to come. Keep in touch! &amp;#x200B; \-Dustin
&gt;Comparing tech 20-30 years ago is not really that relevant. It's relevant because such predictions have turned out to be wrong before.
What you want really isn't Blazor at all, then. It heavily uses Razor by design. However, one of the _other_ components it sits on is Mono-WASM. &gt; Want to use something else or just put some webassembly along side your current js? You'd have to derive your own little framework from Mono. What you're describing sounds very different from Blazor. (You might also get lucky mixing in some Blazor with your existing code. But it isn't really intended for that.) Note that there are a lot of considerations, such as WebAssembly not being able to directly interop with DOM. You'd have to make interop affordances for that.
&gt;So a List&lt;t&gt; implementation of GetEnumerator is preferable because it doesn‚Äôt require boxing since structs are value types and don‚Äôt have to go on the heap? Yes. It is a micro-optimization and relies on a mutable struct which is generally not recommended, but presumably because `List&lt;T&gt;` is such a foundational type MS thought it was worth it. The non-generic `IEnumerable` together with types like `ArrayList` and `Hashtable` are a relic from the C#1 era when generics didn't exist yet. There is no good reason to use it, it's just there for backward-compatibility with old code written before `IEnumerable&lt;T&gt;` was a thing.
The thing is blazor doesn't need to beat JavaScript - web assembly does. Blazor is a fairly small part of that puzzle. I'll not source this, because frankly it's highly dependent on what metric you use, but C, C++, ruby, python, PHP and java are all similarly popular to, or much more popular than, C#. JavaScript may be the mostly popular language about right now, but if all of those languages have stable and well supported (by browsers) front end frameworks, then developers will be much less likely to turn to JavaScript. Basically web assembly is currently the only piece of tech that could make that happen, as far as I know
So, at this point, I have to ask: what have you *tried*? What code do you actually have?
Got it. Thanks!
The prediction JS will not be beaten in the near future is nothing like the predictions of IBM/Microsoft for many reasons. But believe as you wish to.
Just for further clarity, could you give an example of how the non-generic IEnumerable would actually work in the context of IEnumerable.GetEnumerator()? 
I've tried: `if(list.Any(x =&gt; x.Ngram.Equals(obj)))` `Comparer&lt;T&gt; comparer = Comparer&lt;T&gt;.Default; if(Comparer&lt;T&gt;.Default.Compare(obj, e.Trigram) == 0)` `if(list.Find(x =&gt; x.Trigram.Equals(obj)) != null)` `if(EqualityComparer&lt;T&gt;.Default.Equals(e.Ngram, obj))` in this I'm going through list with `foreach(Edge&lt;T&gt; e in list)` and obviously: `if(e.Ngram.Equals(obj))` &amp;#x200B;
Hey there, your help really got me through the worst part. I am now able to set the volume for each individual endpoint, and I am able to control the volume for one endpoint through serial communication with an arduino. The arduino sends a single byte containing an int [0-100], and setting the volume with this line: "deviceDefault.AudioEndpointVolume.MasterVolumeLevelScalar = (float)com3.ReadByte() / 100;" However, the reason for making the program is to control two endpoints individually. The arduino does this by sending one serial.write statement with the byte for the first endpoint, and then another serial.write statement for the second endpoint. Do you have any advice on how I can make C# differentiate between the two bytes, so that each byte always changes the right endpoint volume?
Never mind my last reply, there was no need for a tricky way to do this, the ReadByte()-method does this automaticly :)
You can still see the non-generic IEnumerable in effect in some classes. For example: var table = new DataTable(); foreach (var row in table.Rows) { var items = row.ItemArray; // does not compile } foreach (DataRow row in table.Rows) { var items = row.ItemArray; // does } What's going on here? Because `Rows` is a `DataRowCollection`, which only implements `IEnumerable`, not `IEnumerable&lt;DataRow&gt;`, the C# compiler has to fall back to inferring that `row` is an `object`. Only when you explicitly specify `DataRow` does it let you access its properties and methods.
Do you have a solution that works when it isn't generic? That should provide some help for building one that is. A significant obstacle, though, is that T and Edge&lt;T&gt; aren't same thing, right?
Perfect, this is exactly what I was looking for! Thanks!
Exactly. But I‚Äôve found mistake. Equals works just fine but I was doing all this comparison in dictionary and I was selecting value instead of key in the first run. My algorithm has to do that and that was all my mistake. Thank you for your time and help. :)
How would you have an implementation with generic list though? List generic implements non-generic IEnumerable and that doesn‚Äôt make any sense to me. IEnumerable obj = new List&lt;int&gt;() What would be the point of this and I don‚Äôt even know if that would work. You‚Äôd have boxing on the heap unnecessarily. It seems to me that List&lt;t&gt; should not implement IEnumerable non generic.
Preferably, I would like a /f sort of thing where I can just say forcefully do this
&gt; List generic implements non-generic IEnumerable Not quite. [System.Serializable] public class List&lt;T&gt; : System.Collections.Generic.ICollection&lt;T&gt;, System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IList&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.Generic.IReadOnlyList&lt;T&gt;, System.Collections.IList Notice this doesn't mention `IEnumerable`. But! `IEnumerable&lt;T&gt;` _inherits from_ `IEnumerable`: public interface IEnumerable&lt;out T&gt; : System.Collections.IEnumerable Therefore, indirectly, you can also use `List&lt;T&gt;` wherever `IEnumerable` is expected.
The "script", your c# code, is what creates objects (and instance of a class). The only interaction a user is really going to have with your console app is by passing in arguments at the command line. Either in the beginning, something like this: `mycoolapp.exe -mycoolargument "ILikeCake"` Or by you monitoring any input that comes in from Console.ReadKey(), Console.Read(), or Console.ReadLine(). &amp;#x200B; &amp;#x200B; &amp;#x200B;
Ahh, I get it now. The implementation is there because of it having a derived interface, so it‚Äôs possible but there is no actual reason to do it. I saw the implementation and assumed it was explicit and that made no sense to me. I tested it out and you can definitely return a list to an ‚Äòobject‚Äô IEnumerable but it makes no sense to do so. Thanks for the help!!
There's a couple possibilities. Grab the windows sysinternals package and specifically look for "handle": https://docs.microsoft.com/en-us/sysinternals/downloads/handle This will allow you to determine what process, if any, has a lock on the file. It's possible that a prior instance of your own application (possibly one implemented with a different means of writing) has not been killed and you need to kill it before you can write to that particular file. It's also possible if you have this chunk of code in a multi threaded app that your own app is trying to do this write multiple times simultaneously and one of the threads is failing while the other succeeds. I'd start with checking handles.
[File.Create](https://docs.microsoft.com/en-us/dotnet/api/system.io.file.create?view=netframework-4.7.2) returns a FileStream object that takes a handle on the newly created file. Either write to the FileStream or do File.Create(filePath).Dispose(); to close the handle as soon as the file is created.
&gt; I don't think Blazor's goal is to "beat" anything I don't know about that. I mean if I was on the ASP.NET team and my goal was to beat JS I wouldn't be going around with a "Let's beat JS t-shirt"
I am sure once it is mature and production ready people will start producing a lot of things on top of that.
Thank you u/Enlogen, very cool!
Password protect the computer. If you attempt to circumvent normal system operation, it's possible the program will be identified as malware - making an executable hard to kill is a classic hallmark of malware. If you keep your password secure, they will not be able to circumvent windows security. You are wildly over engineering this problem.
If you can't trust windows account security, there is not really a practical way to do this.
I dunno where you're going with this but I just want to point out that your proposed solution doesn't add any value... using your method would be like if(doesContain(x, y)){ ... } but since your method doesnt really do anything i could just do if(y.contains(x)){ ... }
It was kind of my way of killing two birds with one stone. That‚Äôs actually where I got the idea from. I decided I wanted to try to learn how Malware is able to do so and maybe try learning how to use it and figuring out in general how windows operates and I really felt like experimenting with it and learning more about it within‚Äô that Program. I kind of approached it in a somewhat peculiar way.
&gt; Also when does the non-generic version of IEnumerable.GetEnumerator() get called? I read this question out of context and misunderstood it, but thought you might find this interesting nonetheless. SharpLab has a feature that [shows how you'd write equivalent code with simpler language primitives](https://sharplab.io/#v2:EYLgHgbALAPgAgBgARwIwG4CwAoRLVRbY5wDMKATEgCoCmAzgC4DCANgIb304DeOSAlOThQaDRgFlajABYB7ACYAKADIBLJgB41AO0YA+JDoCuAW2C0ATvQCU/QX2yDnSAGZzLtdgGMZSJbqMRmYWlki6weZWtvYuSI5xggCQaACcSiZRljZEiUgAvrEFOPlAA==). (So for example, in this one you can see which overload is being called and how a `foreach` loop becomes a `while` loop wrapped by a `try`-`finally`.) It's nice for learning about this sort of stuff through experimentation. For instance, you can see that the generic `IEnumerator&lt;int&gt;` type is used instead if you [change `numbers` to `IList&lt;int&gt;`](https://sharplab.io/#v2:EYLgHgbALAPgAgBgARwIwG4CwAoRLVRbY5wDMKATEgCoCmAzgC4DCANgIb304DeOSAlOThQaDRgFlajABYB7ACYAKAJIAZAJZMAPBoB2jAHxI9AVwC2wWgCd6ASn6C+2Qa6QAzOddrsAxjKQlfUYTCytrJH1Qyxt7RzckZwTBAEg0AE4lMxjrOyJkpABfeKKcQqA). (Since `List&lt;int&gt;.Enumerator` is not always what will be used anymore.) And the similar changes [if you use the non-generic `IList`](https://sharplab.io/#v2:EYLgHgbALAPgAgBgARwIwG4CwAoRLUB0AwgPYA2ZApgMYAuAliQHYDOW2OcAzCgExIAVSi1pEyAQxYscAbxxIFKHnCiDhtALKVaACxIATABQBJADL0RSJgFcAtsEoAnFgEp5iudkXekAMxKOlOLUOkiG9Ey0VnYOjkgR0fZOru4+SJ5pigCQaACchjZJji7smUgAvqkVOOVAA===). ------ I will warn you though, some of the higher-level language features [look a little funky](https://sharplab.io/#v2:EYLgHgbALAPgAgBgARwIwG4CwAoOBmFAJiQBUBTAZwBcBhAGwEMKKcBvHJTlAgSwDsqSALIBPAHIBXALbAyAJyzYuSDl3wooSAKoVKAZQD2UsmkIAKU0gYBjKjwN8AlKs4BIALwA+K7ft8zjorKLtwapJRUQmRUABYGACZm/IJgzkpcHt46+kYmqOYBSF4oqACcZmBIANTC4tKyco6BOAC+OEA==) when you [look under the hood](https://sharplab.io/#v2:EYLgHgbALAPgAgBgARwIxQNwFgBQu4DMKqEKATEgCoCmAzgC4DCANgIa224DeuSfKRNKTQEAPAEsAdvQB8SAGLjgAe0msAxuvEAKAJS9+PHPxNIp9JKyQBeJKmzHTfc0mA27Dp3zSoUAdktPLx9/VyCnAycAdwALcWZqJG16ACcAV2p9RycjL1MXSWowC1srAGowyLzLd2Bw6rdbQuL6vJC4AOb6Vv4AXyr+nF6gA===). (Although you'll appreciate these features a lot more after seeing all of the boilerplate they eliminate.)
Pro webdev here. Javascript is a bloated, overextended mess which is no fun to work with. We are basically moving to use it as a compiler target (CoffeeScript, TypeScript) at this point. Which sucks, because JS is an interpreted language. WASM will be transformative and I am super excited to use C# (best ecosystem and dev experience hands down) full stack.
Personally I look forward to the real endgame: Mi-chelle, Fitness Consigliere of the web languages.
Feeding two birds with one scone...
What is the actual problem your console application is meant to solve? What is its ultimate purpose from the user's perspective?
This seems like a shameless plug for someone's "next big" Xamarin supplement. And yet the upvotes suggest it is not... but I did read the article, and it *is*.. 
Show us your code. What part of this are you struggling with
I'm just spit balling here, but are you able to tell if any files go missing or get corrupted between the time you deploy and the time it stops working? If a redeploy is the only thing that fixes the issue it seems like that might be the cause. I'm not sure of the best way to do it but maybe you can take a snapshot of the directory right after deployment and diff that against the directory after the site fails.
You don't have to use Create when using WriteAllLines, it can create the file for you.
Even more helpful. Gtg to sleep not, but I'll do that later, thank you!
r/SQL
Since you're talking unity I hope this at least somewhat applies to what you're looking to do. Unity has something called "Scriptable Objects" that may fit your needs. You can thank /u/brackeys for this: https://youtu.be/aPXvoWVabPY Hopefully this helps you on your journey! Good luck!
Override Equals and return x.Selelct(x =&gt; x.Equals(obj)).Any();
If you know the fully qualified type, Activator.CreateInstance should do the trick. https://docs.microsoft.com/en-us/dotnet/api/system.activator.createinstance?view=netframework-4.7.2
Use the Windows security login, Create a guest acct, protect your data, etc. - use the windows subsystem. If you are really adamant to use a username/pwd that you want to control, use Win 10 IoT Enterprise in Kiosk mode with a UWP app as the launcher. 
&gt; The speed tech moved back then is not the same as today. Really was. You had Perl, PHP, HTML. '93 with Mosaic saw the interest of the WWW. Then '95 comes along and within months we had HTML2.0 with tables, then image maps, etc, that led to an explosion of websites each dancing to their own drummer. Each passing month saw back 'n' forth with ideas, specs, madness. This whole "748 JS frameworks" thing is definitely a pain-point, the JS ecosystem is fickle and JavaScript has one little to support an ecosystem with it's minute standard library. But at least it's all vaguely similar and JS-like. Plus browsers now are way more standardised than ever before. The speed tech moved 20 years ago was hilariously fucking chaotic, browsers weren't adding experimental support for things as they do today, they were bullheadedly wandering off down their own paths. Devs would come up with all kinds of hacks/shims/shivs/"fixes". Before jQuery there were new dark arts uncovered weekly. Although I will concede this proliferation and speed was largely as a result of it being more difficult to disseminate/share these ideas, so it's less speed more chaos I suppose. Today you can create 3 JS frameworks in a week and push them onto a pile that is accessible (and known) by countless numbers of developers. I don't think the speed tech moves has sped up nor slowed down, it's just the signal-to-noise ratio has skewed a little. Attempting to learn/use every new GitHub Repo offering would be insane, as would've attempting to view all the mailing-lists, forums, etc of the late 90's early 00's. Innovation has always been vapouresque in nature, the sharing of ideas, FOSS, Open Source movements, they all add to the chaos of innovation. We like to impart superhero-like qualities onto inventors, Dennis Ritchie, Linus Torvalds, Larry Wall, Guido van Rossum, Brendan Eich, etc. The truth is all of these creations came from a collation of that innovative chaos and the incredible minds around them. That's not to diminish their work in the slightest, they just don't happen in a vacuum and never have. One man's vapid vapour-ware/JS Framework/Toy Language is another man's inspiration.
There could be several things in play. Are you using ARR? Hitting endpoints that don‚Äôt exist? Code dedicating to an unknown protected/endpoint? Try attaching the debugger to troubleshoot. 
Good thought, one I had as well. Full directory listing shows everything remains unchanged. The application pool recycling triggers the failure, but only when the C# MVC application is published as precompiled. If the site is published and not precompiled, everything works fine. So it seems to be an interaction between IIS and the precompiled web application.
I agree. First part of article is about history/terminology. Second part is trying to sell idea (huge device support, skillset and why this is better than Xamarin). Last part, PowerPoint slides have few good slides that are actually going inside Uno platform. Not much bones in this.
Sorry, going to admit ignorance on ARR so can't say on that. No, not hitting endpoints that don't exist. The latest results show that the site ceases to function once the application pool recycles (so it's easy to trigger with IIS by forcing a recycle). This *only* occurs when the MVC web application is precompiled. If it's published without precompiliation, the known good routes continue to behave properly after the recycle.
Xamarin.Forms has lots of optimizations to render the native Android and iOS UI as good as possible. If you're coming from Android/iOS, then its API feels more natural than the UWP API. This post seems to ignore that all that XAML still has to rendered to native views in Xamarin.
 int I = 1; int j = 1; i == j //yields true Does it, though?
Exactly same feel for it. On top of it one of my big hates is the loose typed feeling of it. I love the fact in C# i know what is expected of a method or an object. While in JS its just all over the place, then you add in things like state managers like in vue and suddenly you're using strings to dispatch methods. Before long I feel it just become a mess of code and you suddenly have to remember all this or constantly go back to these other files to make sure you typed it right or remembered it correctly. I understand why js is so popular and what it allows us to do on the web. I just think there is a better way and see blazor as a step in the right direction.
the official name for blazor is **Razor Components**
Wait, wut? Ruby, C, C++ are similarly popular to C# or more popular?
Just for server-side blazor. The client side is still being called Blazor and won't be shipping with ASP yet.
It's not about how great the language is. I mean JS is pretty shit but even then, it will be kinda hard to replace it. It's all about the ecosystem, JS right now has the biggest ecosystem NPM(Yeah I know, it's pretty garbage but still) and just let it all go for a more younger alternative doesn't seem right. 
I'm not so knowledgeable on this stuff, but is it comparable to Blazor in any way? 
Wat
Wow nashtecher :))
Change `File.Create()` to `File.Create().Close()` &amp;#x200B;
Override the `Equals` operator. using System; using System.Collections.Generic; public class Program { public static void Main() { var list = new List&lt;object&gt;(); list.Add(new Edge&lt;int&gt; { Value = 1234, Weight = 5678 }); list.Add(new Edge&lt;int&gt; { Value = 2345, Weight = 1234 }); // FALSE Console.WriteLine(list.Contains(new Edge&lt;int&gt; { Value = 1234, Weight = 5678 })); var list2 = new List&lt;object&gt;(); list2.Add(new EdgeEx&lt;int&gt; { Value = 1234, Weight = 5678 }); list2.Add(new EdgeEx&lt;int&gt; { Value = 2345, Weight = 1234 }); // TRUE Console.WriteLine(list2.Contains(new EdgeEx&lt;int&gt; { Value = 1234, Weight = 5678 })); } public class Edge&lt;TValue&gt; { public TValue Value { get; set; } public int Weight { get; set; } } public class EdgeEx&lt;TValue&gt; : Edge&lt;TValue&gt; { public override bool Equals(object val) { var valAsEdge = val as EdgeEx&lt;TValue&gt;; if(valAsEdge == null) { return false; } return valAsEdge.Value.Equals(Value) &amp;&amp; valAsEdge.Weight == Weight; } public override int GetHashCode() { return base.GetHashCode(); } } }
JS hasn't been interpreted on the web for 10+ years...
Interfaces must be on another project. Then , models and mvc project must reference this Interfaces project. Internet is full of project templates 
From GitHub's analysis of the year (https://octoverse.github.com/projects). This puts the top 10 as: 1. JavaScript 2. Java 3. Python 4. PHP 5. C++ 6. C# 7. Typescript 8. Shell 9. C 10. Ruby I'm not sure of the methodology used (if it takes into account new projects, all projects, just active projects) and clearly this has a heavy bias towards open source projects. It also doesn't account for how many of these projects are web related. You're being na√Øve if you don't think there's a mountain of actively developed PHP code out there. It also seems like scripting languages are particularly appealing to beginners (which would explain JavaScript's dominance) so those are the languages which most need a viable webasm target most, if you're hoping to break JavaScript's momentum.
Stackoverflow(which seems much more right) says otherwise.
Thanks - but the interface defines methods that returns instances of classes. Where do I define those classes? If the classes are defined in Models, then Models needs a reference to the interface project so it can implement the repository interface, and the interface project needs a reference to Models so it can see the return types for the interface methods. And if the classes are defined in the MVC project, the same problem occurs, where the MVC project needs a reference to the interfaces project, but the interfaces project also needs to reference the classes in the MVC project. So either way, I've still got a circular reference, just somewhere else.
Then do that Interfaces project reference to models project
Models project must be thr Top projetc, without references to other projects. Models - Customer, Etc Interfaces - ICustomerService ....references to Models... MVC referenced to models and interfaces
Will be better that you look for some of example project. Is full of them... Best regards
I first started with programming in c# by Douglas Bell &amp; Mike Parr.. it's very basic. For my training in c# i had to read and learn 'programming in c#' the examref 70-483 of Microsoft by Rob Miles. That one is in my opinion awsome but more advanced.
Are you talking about https://insights.stackoverflow.com/survey/2018/. ? 1.JavaScript (69.8%) 2. HTML (68.5%) 3. CSS (65.1%) 4. SQL (57.0%) 5. Java (45.3%) 6. Bash/Shell (39.8%) 7. Python (38.8%) 8. C# (34.4%) 9. PHP (30.7%) 10. C++ (25.4%) 11. C (23.0%) 12. Typescript (17.4%) 13. Ruby (10.1%) Obviously this is likely to have its own biases, so should probably be considered in parallel with other sources, but I would say this puts C# on a similar level of popularity as PHP, C and C++
Does anyone know of any good books on Blazor? I appreciate that it's still a little early for this.
To expand on DanielDubeSp solution - think about your projects in terms of separation of concerns. Your MVC project is concerned with Web related stuff, your Model project is concerned with database related stuff. These are both specific implementations. What you are missing is a project which doesn't care about how you are implementing your front-end or your data access. So non-implementation specific concerns should be moved into a third project, one which includes your Models, your repository interfaces. Your MVC project should then reference your new project (lets call that Business from now on), as should your existing Models project (rename it to Database or similat). MVC should also reference your Database project so that Unity can inject the correct Repository implementations. That would probably be fine for simple CRUD, however, if your application is going to include any logic then I would recommend creating Services which are invoked from your MVC project and which then call into your Repositories. Service interfaces and implementations can both sit in your Business Project. That way, if you do ever implement the desktop project you only need to swap out your MVC application. Likewise, if you ever need to change the data access implementation you only need to swap out your Database project. 
Yes. My point is that "Blazor" technically refers to something rather high-level, when Kayomani wants to use some lower-level portions of it, such as Mono-WASM and Blazor's JS interop stuff.
&gt; It's all about the ecosystem, JS right now has the biggest ecosystem NPM I don't know how you're going to count "biggest" or why that would be relevant. Neither Java nor .NET lack breadth of available third-party libraries.
I really recommend C# in a Nutshell. It has everything to learn about C#, from basics to advanced features of the language and fundamental features of .net such as parallelization and asynchronous programming. But it only just touches things as ADO.NET, Entity framework, ASP.NET. I did have some programming experience (no work experience) in C and C++. So not sure if this book is for programming starters, but I had no experience in Java or C# at all and this book got me into my company as a .net software engineer.
That makes perfect sense. Thanks for taking the time to explain so clearly.
No, it's not "biased" It asked actual people. So it's in no way biased. If you removed SQL, HTML, CSS, Bash. Then it's totally correct and viable, it's much better than just counting some old abandoned C/C++ projects. You're nuts if you think C++ or C is as popular as C#, heck even PHP is unlikely for that.
Not sure, but could this be what you are looking for? I'm learning .net core and we are using the entity framework. https://docs.microsoft.com/en-us/ef/core/get-started/aspnetcore/existing-db
https://forums.asp.net/t/1406427.aspx?403+Forbidden+Compiled+ASP+NET+Web+Application
yeah it's the same idea but not for oracle unfortunately, Scaffolding the Microsoft way to do so also some others use some clients to generate classes too
It's biased because it's a survey from a single websitse, based on who wanted to answer said survey. Unfortunately your feelings on whether or not it's correct aren't really relevant. For what it's worth, I don't imagine C and C++ are overly popular as website backends, but you can't just make up conclusions based on which languages you like better
I've seen your post history. We're not going to teach you how to build malware. 
The other problem with JavaScript as a compiler target is that it encourages library development in JavaScript, since that's the platform everyone is eventually targeting. If typescript shipped with a standard library of the same quality as C#, I could see it being very appealing. As it stands it inherits too many of JavaScript's quirks for my liking. (I'm fully aware that's deliberate, and a selling point in itself for some)
Thanks for the reply. I think the difference here is that I my case, the precompiled application (via Publish) runs perfectly, right up until there‚Äôs an application pool recycle. Once the application pool recycles, IIS completely ignores the deployed code and falls back to attempting to serve non-MVC. That‚Äôs really what‚Äôs so baffling about all of this. I could understand if the web application didn‚Äôt work at all on initial deploy...I would have a bunch of options to fix.
Could be the same issue manifesting in a different way? Did you check the iis logs? Curious, I created a simple asp.net app on Win2K12 and don‚Äôt see this issue.
Could be the same issue manifesting in a different way? Did you check the iis logs? Curious, I created a simple asp.net app on Win2K12 and don‚Äôt see this issue.
I haven't found a good solution I'm completely happy with yet myself. :/ My current solution uses a generic Repository abstract class and an interface IUnitOfWork that basically just contains SaveChanges and SaveChangesAsync. Repository takes a UnitOfWork in it's constructor. In my concrete implementations of the repository, I fill this in with an actual DbContext instance that is obviously an instance of my interface too. This may or may not be right according to others. DI just clicked not too long ago when I was working on a side project and this fell into place. --- To address the later half of your post, my generic repository classes and UoW interfaces are in a common/shared library. My concrete implementations are in my web project because that's where the DI container is. No sense in requiring EF be referenced by every future library that touches that shared lib.
I think anything is possible here. In my 2012 R2 QA box, I started fresh with a cleared event log and no IIS log files. Once deployed, the app works and I see typical MVC routing in the IIS logs. When I force the application pool recycle, no new entries in the various logs. Browsing to the site generates normal, non-MVC IIS log entries. Zero error messages in Windows Event Viewer (under any section), IIS logs, or the internal application error log (there was an interesting theory that the global.asax was bombing on Application_Start, so I made sure there was a try/catch pairing just in case). Personally, I‚Äôm leaning toward an issue where Application_Start isn‚Äôt being triggered. This would potentially explain why none of the MVC routing works post-recycle. I‚Äôm going to throw some debug logging into global.asax to see if it reveals anything further. I‚Äôll also pull the logging again to ensure I didn‚Äôt miss anything obvious.
I‚Äôm unsure as to what ‚Äúpost history‚Äù you are referring to since the majority of it is about forensics and Soldering. I‚Äôm unsure as to what makes you think I have malicious intent and are going to be creating malware. This is explicitly for educational purposes and expanding my overall knowledge in C#. I can assure you that there‚Äôs no ill intent involved. I understand how it may sound like so, but I‚Äôm just trying to learn everything I can about the language. This program that I was talking about is for my own personal use and learning. That‚Äôs why I‚Äôm making it. It‚Äôs not to create Malware. The functions I am trying to figure out how to add in may sound like I am attempting to build Malware but I‚Äôm not.
nope, it is called "Razor Components" and it can work client-side and server side: "it adds support for building client-side Web applications with C# using Razor Components (formerly known as Blazor)"[1] ------ [1] https://msdn.microsoft.com/en-us/magazine/mt848631
Oh yeah, of course. My feelings aren't relevant, but your feelings that the website is biased just because you like some languages aren't used much are relevant? Sounds like a great logic you have there.
I didn't say that, what I said was that both sources are biased based on the demographics they report on. I also said in my original reply that your stack overflow source supported my conclusion that each of the languages had similar popularity, so arguing about which source is your favourite is even more pointless than the original discussion
Ah so Resharper then.
PM me your discord tag and I can give you a hand. 
this is why they invented programming
typically in .NET we do multi-tier/onion architecture: data access layer, domain layer, service/application layer, presentation layer. the DAL gets and persists data, DL does core business logic (think of it as logic not in stored procs) by getting/saving data from DAL, SL layer does the application logic using the DL, and the PL is the final layer available to the user (CLI, API, WPF, WinForms, etc). Example project layout with a domain layer for a CRUD API (DL is not really needed). - Data Access Layer - Acme.Data.Contracts - Models and Interfaces for getting data from db. - These models/classes model the database data. - Acme.Data.EntityFramework - Implementation of interfaces using entity framework - Service/Application Layer - Acme.Services (maybe also split into separate contracts lib if they are used outside of this solution) - Implementation of services/classes that do the application logic. - Also using interfaces and implementations for IoC/DI/UnitTesting. - Use Data contracts lib - Get repositories injected by interfaces into their classes - Doesn't reference entity framework at all - Presentation Layer - Acme.Api - Sets up the container linking interfaces to implementations. - Controllers get injected the services by interface. - Controller api endpoint methods simply delegate the work to the services. The api/controller/methods *should* do validation in that a call to the api method returns the proper result/error code. - Typically the API layer has its own data models (DTO = data transfer object) which are serializable and would contain validation attributes and so on..
Entity Framework already implements the Repository and Unit of Work patterns, you don't gain anything other than decoupling EF by implementing your own. If this was your goal then by all means, but most of the time when you see a Repository over EF someone added it because they read somewhere that you should.
Since webassembly doesnt have DOM access it has to be a frankenstein which generares needed JS bits to do that and call it from webassembly... No thanks native is always better.
[removed]
"notification using only everything"
Thats not how this works. How about you read the post before sounding like an absolute idiot. Honestly it looks pretty elegant
I pretty much just do ctrl+,
Azure offers some free tiers. I think your app could work on that. 
&gt; After installing the .NET and Blazor binaries and creating a new project using the Blazor template, it really _is_ just that easy! 
Honestly, it's a webapp - split it into namespaces and you'll be fine. "What changes together, stays together" is a good principle to follow when dividing up assemblies - nothing worse than a whole bunch of files that you just move and modify as a set, that increases build times and complexity for no value. Namespaces are a perfectly fine way to split up things inside an application when you're not concerned with reuse. Re: "may be a desktop application" - err away from sharing data access components, build an API in the webapp, and build your desktop app against that API. Database level integration, even if through a managed component, will rapidly drift out of control. You don't want to get to a place where you can't upgrade your web app because a desktop app exists - at least with HTTP as an interface you can gracefully manage backwards compatibility. (I mean, you could have a "Contracts" assembly, but again, think "what benefit do I get from having this additional moving part" before you introduce one).
Fixes the issue but not correct. Use File.WriteAllLines or `using (var fs = File.Create(...) { // Do whatever with file stream here}`
The handle is the non disposed File.Create file stream.
(If you really want to do something interesting, split your assembly by feature and make it easier to reason and navigate through - MVC obscures application intent by squishing everything into it's "Models, Views and Controllers" pattern - google around "Feature organisation", "The obvious architecture", "screaming architecture")
To tag along with the azure free tiers, AWS also has free tiers of servers you can use.
Which driver are you using?
Okay, serverside Blazor used CSS for that. Still ugly hacks and tons of boilerplate where everything you need is to have something like toast.show();.
Make it require machine learning somehow. Or just write it in Brainfuck.
Ok. Cool ... ? I suppose this is great base for other things to come ü§©
Wait can you create a discord bot using C#? evil\_laugh.mp3
Following up on this, I've confirmed via my debug logging that once the application pool recycles, Application\_Start is not firing. It fires on initial call of the site on initial deployment, but not on any follow up calls after recycle. Since MVC wires up all of the routing functionality in Application\_Start, the lack of proper routing makes sense as a symptom. So now the question is why Application\_Start is not firing in the global.asax for a precompiled application after the application pool recycles.
Write it out in 1 big line like this Console.WriteLine("1, 2, Fizz, 4, Buzz, Fizz, 7, 8, Fizz, Buzz, 11, Fizz, 13, 14, Fizz Buzz, 16, 17, Fizz, 19, Buzz, Fizz");
Build it using micro services, a database, a messaging buss, a web api, a website, a load balancer, a cache, and a log server. Make sure you can start it all up with docker-compose, you have everything in git, and it‚Äôs 100% unit tested.
Or Ctrl+T if you use C# development settings. It is called the "Go To" and it supports files, types, members, symbols and more. It's great! 
Not a fan
Removed: Rule 4. You'll have to at least include code of what you're currently doing and of your attempt, and a better description of what you're trying to do. It's difficult to understand as-is.
you forgot the single sign on server and slack integration, but otherwise pretty good.
This is in Java, but [FizzBuzz: Enterprise Edition](https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition).
the depency can be one: from MVC to Models. In MVC you can create implementations of your interfaces (you can call them "Adapters", to give an idea of what they are) that are wrappers of the Models repositories. I don't think you gain anything adding more complexity than this. The interfaces belong to the client that use them, so they have to stay in the MVC. The Model cannot depend on the MVC project, why would a persistence project depends on an exposing mechanism? it's insane. A third project is meh, why add another assembly? That's useless complexity. So go write your wrappers, for god sake.
The CSS is doing a lot of the heavy lifting which is cool. I like how Blazor brings modern component practices to c#
Yes, add single sign on to get an API token, then we let people use it with rate limiting for free 10,000 times a month up to 3 digits, but premium costs 15 dollars a month for 100,000 requests with access to up to a 10 digits. You have to call for enterprise edition to get a quote for higher limits.
OK
Ehhhhhhhhhhhhh That's the client side. It's not like you hit the server just to determine what CSS class you need to render. Honestly, it kinda sounds like you don't really understand blazor, I would maybe consider starting there before trying to throw it away.
Well, the interesting part is that it's *not* using JS
&gt;cause C# is really powerful Laughs in \[Python\]([https://xkcd.com/353/](https://xkcd.com/353/))
The models project has the models and repo interfaces. A separate data project has the entity framework code with a reference to models. The mvc project has a reference to models but not the data/mvc project. The interface implementations from the data project are injected at runtime. It's called the onion architecture because the references all face into the middle/models layer instead of web to business to data layer like traditional 3 tier architecture. 
Yes you do, it's really powerful and easy to do, but many bots are hosted in js, not C#..
Unfortunately I spent hours on AWS without getting my app working
I'll try on that, I though Azure was only a team-git-like
&gt;java gay Microsoft when they're making C#
Worse yet; make it interact with a calculator in Minecraft. People have built those and they take ages to resolve anything. 
Just for the record I tried odp and connected to dp successfully and read some data from it , devart I'm giving it a try now, but in all cases which driver to use is not the big deal I want to generate classes based on dp and use these with anything
I saw a solution that actually used genetic learning to get the proper output string. My favorite was one that worked by seeding the RNG with some magic number, then something like `for ii from 1 to 100 print ["Fizz", "Buzz", "Fizzbuzz", ii][Rand.next() % 4]`.
Create a code generator that writes out the above program 
 &lt;img src="toast.gif"/&gt; No javascript! 
You can probably install .net core on Heroku or glitch.com &gt;discord libraries Discord doesn't have any libraries. All unofficial libraries are wrappers for its REST and WebSocket apis.
You need a service layer not a repository.
I did that for a problem in assembly class. The teacher was not amused.
To expand on some of the other answers suggested: Lately, my projects are more oriented towards a front-end framework (e.g. Angular) and a Web API, and I would organize the projects within the solution in the following way: * BusinessLogic * BusinessLogic.Implementation * Data * Data.Models * WebApi * WebUi **BusinessLogic**: This project contains all the interfaces for my business logic. For example, if there is some logic to calculate prices of something, I would have a IPriceCalculationService in there. I would also have a models folder if I need to that would contain more streamlined models. For example, let's say we had localization information in the database, where each Key has an EnglishValue, FrenchValue, SpanishValue. There would be an ILocalizationService and the model returned by the WebApi to the user would only consist of the Key and the values in the user's language because there is no point in returning all 3 languages. **BusinessLogic.Implementation**: This projects contains the implementation of the interfaces declared in the BusinessLogic project. **Data**: This project would usually have my EF context. Work-wise, we end up very often with a database-first approach and the use of an edmx. So I would put the edmx here, but then separate the generated models into the Data.Models project. You would also put any other data access logic here. **Data.Models**: This would contain the EF .tt file that generates the data models. I find separating the data models from the dbcontext a cleaner approach. I believe you can find instructions to do this here: http://nullablecode.com/2013/09/splitting-entity-framework-model-classes-separate-projects/ **WebApi**: The WebAPI project. Required services from the BLL would be injected here and the controllers are responsible for calling the required methods. **WebUI**: the front-end part of my application. This doesn't reference any of the other projects but calls the WebApi controllers. I find this a pretty clean way of doing things and I believe it mirrors the answers from toasties1000 and DanielDubeSp.
You're going to have to do some digging to see the current status of this feature. Start here and let us know what you find out. https://github.com/aspnet/EntityFrameworkCore/issues/1100
Make a look up table for all the values to 1000000 then just query it. I‚Äôd be like I‚Äôm not even mad I‚Äôm impressed 
Just did some digging -- looks like Oracle does not support code-first reverse engineering. It seems the way they want people to operate is with a PL-SQL package containing your stored procedures and views.
I sucked at java and was decent at rube I wrote a ruby program to convert what I was writing to java almost worked till it didn‚Äôt 
I have been wondering what companies even use C++ and for what projects to make the language have such a big market share still. Heavy desktop applications like Cad software, games but I can't come up with anything else. And I have never heard of anyone using a C++ web backend.
The only viable use for C++ right now is Desktop Applications. Games too, but C# takes half of that with Unity. That's the reason why I completely got surprised why the heck C++ is as popular as C#. That doesn't make any sense. 
Me too, but had to deal with oracle for this task. I was digging for a week and the last thing I found was that oracle is developing it's provider for ef core which is good but it's hard to believe that there is no other thing can do this for the last 2 years
I just finished a big oracle integration project -- we ended up creating our database queries as PL-SQL embedded resources, parameterizing using the bind parameter API (actually surprisingly fast) and manually mapping our data readers to a denormalized DTO model exposed by a REST API. Pain in the fucking ass. 
This is over-engineering at its finest. I can think of more than one "architect" at my company that would cream their shorts over this.
I read through that. I see they added support and some very light documentation on using social types, but unfortunately it didn't answer my question.
The link you shows doesn't actually match up with Microsoft source code. There is no 'Enumerator' property in the List&lt;T&gt; class. So this line does not make sense: List&lt;int&gt;.Enumerator enumerator = numbers.GetEnumerator(); I don't think this is a correct representation of what the compiler is doing. 
That's what I meant in a shorter way
Simple instructions, but I much prefer to use closedxml for dealing with excel. It provides a nice set of query functions. 
This is now my dream too. Amazing idea.
Uno Platform wasm uses Blazor to render the UI from UWP Xaml.
You‚Äôre maybe thinking of azure devops? It‚Äôs actually got a whole plethora of cloud based and hosting solutions 
‚ÄúNotification using web assembly, instead of ascii JavaScript; and if you have a non-comparable browser, install blazor.‚Äù Anyone smell the days of flash returning?
Bitmap.SetPixel() simple enough? You can do pretty much any graphics task with it.
List&lt;T&gt;.Enumerator is a nested type, rather than a property
Are there any tutorials on how to get a basic window open with this stuff?
I'm a huge fan of the [Vertical Slice Architecture](https://jimmybogard.com/vertical-slice-architecture/), whatever name you want to give it. 
GDI graphics, used in WinForms. Create a bitmap, the create a Graphic object that draws on the bitmap. The API is pretty straightforward, similar to Canvas. Draw circles, Lines, text, etc. You can show the bitmap in a Form to see what is happening.
 using System; public class Program { public static void Main() { Console.Write("Console.WriteLine(\" "); for (int i = 1; i&lt;= 1000; i++) { if (i % 3 == 0) { Console.Write("Fizz"); if (i%5 == 0) Console.Write("Buzz"); } else if (i%5 == 0) Console.Write("Buzz"); else Console.Write(i); Console.Write(", "); } Console.WriteLine("\""); } }
It's the new C# 8.0 case-insensitive feature inspired by Visual Basic. Finally no errors due to accidental casing anymore!
OpenTK?
Thanks, this was just what I needed!
I just felt sad when reading what you had to do, hope this getting better after releasing ef core provider. and in opinion I think the big problem is oracle itself 
Don't forget to include some blockchain for that extra startup flavor
There's nothing to install, webassemby *is* the "plugin" and very widely implemented: https://caniuse.com/#search=webassembly for browsers that do not support webassembly it falls back on mono.asm.js
Yep, slicing by bounded context. Which was really what microservice architecture was originally all about before it got utterly bastardised.
I know it's client side. And that's why it calls JS to modify DOM.
Got it. Yeah, that makes sense then. 
This guy enterprises.
This exists http://joelgrus.com/2016/05/23/fizz-buzz-in-tensorflow/ That story is probably made up, but the code golf community actually started doing it 
From the link... there is another link going to https://codedaze.io/what-is-blazor-and-why-is-it-so-exciting/ ‚ÄúBut what about legacy browsers? I hear you cry. No problem WebAssembly has you covered, it will gracefully fall back to JavaScript on older browsers and run as normal. The reason I wanted to make you aware of WebAssembly is because this amazing piece of work is what makes the Blazor project possible.‚Äù
I also attempted this some time ago, with [FizzbuzzOO](https://github.com/nilllzz/FizzbuzzOO). If a company asks whether you are able to write object oriented code, show them this.
you could just use sdl there is a c# binding for it. [https://github.com/flibitijibibo/SDL2-CS](https://github.com/flibitijibibo/SDL2-CS)
Not sure that will help with this particular question, but it's something I'll take a look into after Christmas anyway - it sounds like an interesting way of doing things! Thanks!
This is server-side Blazor. WebAssembly doesn‚Äôt apply; the components are streamed using SignalR (Web Sockets) in JS.
I'm not seeing what flash-smell you're pointing out. One's a proprietary plugin, the other a built-in open source web standard. But maybe i misunderstand and you're not referring to the need to install a plugin ?
You could use pinvoke with NtSetInformationProcess to make your application a critical process. When someone tries to kill your process, it would cause a BSOD.
Oh yeah it looks like it, I really don't have a clue about what Azure is and how it works
Not sure if it was poor wording on the author's part or if he is genuinely mistaken, but it is indeed doing things client side wasm-style: https://i.imgur.com/kOUd1pL.png That said, there's nothing to install in either scenario, so that's cool :) 
I once had an in-person interview that was 2.5 hours of pair-programming a TDD solution to fizz buzz. They were super proud of their interview process, as TDD is the ‚ÄúOne True Way.‚Äù That was my first mutual ‚ÄúNo thanks‚Äù interview.
Create a raspberry pi calculator and use serial ports over Bluetooth to an iPhone app which sends it over SMS. 
Huh. That looks like client-side Blazor to me, which is contrary to what the author is discussing.
The article mentions .xls files in the beginning, but epplus as great as it is imho can't read them. It only supports the post 2007 xml file formats. 
Host each possible answer on an azure VM, with 2 nodes. Write a machine learning program to watch youtube videos on 'how to solve fizzbuzz' to understand what to do. Write out the program that would solve the fizz buzz into a single string, using the answers on the VM's as tokens. serialize into JSON, deserialize from the JSON to print into a powerpoint. And then include notes on the powerpoint to explain why some fizz's and buzz's are wrong. 
I'm so sad this ain't even a joke
Dude, don't remove questions when you got the answer! Contribute to the internet's know-how 
TDD is a tool just like anything else, yeah I would also shy away from a company that says ‚ÄúTDD or the highway‚Äù.
// good enough for the hackathon
Yep. Sometimes I write tests first, sometimes I don‚Äôt. It was the dogma that sent me running.
God.Please.No
https://www.sfml-dev.org/
Also forgot 2-factor authentication.
I lost it at the code map.
Then make another program to seed the lookup table, but refuse to let them judge that as your finished product, only the app the reads from the table 
The problem with using github as a metric is that most enterprise doesn‚Äôt use github for their code - I‚Äôve never worked at, or with, an enterprise organisation that uses GitHub. Of course, I‚Äôm sure there are some... but that‚Äôs a lot of code not being covered by GitHub statistics 
Ah! Sorry. My original question was whether I should try to force the data type to be a geometry type instead of geography type since it is just a Point type. The answer ended up being... depends. Geometry type is less accurate for geography related things over long distances... but is more performant than geography type. I am trying to calculate miles between points on a globe... Accuracy isn't super important for what I am doing... so I may switch it over to geometry, but for now I have geography until i notice performance problems.
Code golf it: Console.Write($"{(++i%3*i%5&lt;1?0:i):#}{i%3:;;Fizz}{i%5:;;Buzz}\n");
So not only you wrote Skynet, you allow it to watch YouTube.
Output table to Json and this site will create your model http://json2csharp.com/
Output table to csv and convert to json https://www.csvjson.com/csv2json
Do you know what Web Assembly is?
 import requests print requests.get("https://s3.amazonaws.com/fizzbuzz/output").content 
Bad advice. A service layer is crucial. I've had apps migrate from MVC to WebAPI SPA to ASP.NET Core SPA with minimal changes to the business layer because I had an abstraction between the web and business layers.
Do you inject DbContext directly into your service layer and couple business logic to entity framework? What if you want to change a backing store from a SQL server table to DynamoDb without changing the business code? What interface do you inject to the service layer without a repository?
In which project do you configure your IoC container?
Nah - "Service layers" lead to anaemic domain models. Application services that enhance some kind of downstream rich model? Possibly so - but those are just your features. What's the difference between your "service layer" and "your domain"? I presume when you say "business layer" (again, not really a thing) you're referring to a richer domain model? These kind of layered designs mostly lead to horrid over-abstraction and the tedious anti-pattern of having to change "a model, a mapper, a domain model, an application service, a business service" for the smallest of changes. I know they were very popular for a time, but lots of waste for minimal value. I'm not advocating keeping all of your features in controllers or anything - but you don't need to split it all out until you need to. Namespaces give you that.
Whatever you call it your web layer must be separated. This is the one layer separation that has actual benefits (unlike the braindead repository over EF layer) and the million other separations.
While I kind-of agree in principal, it depends on what your application is. If it fundamentally *is* a website, I'd not split the two. If it was something more sophisticated, I might. I don't think there's one rule here - splitting everything is just traditional n-tier architecture, and that's difficult to change vs. vertical feature slices.
I personally go with a command query separation approach to this (not to be confused with CQRS). Keep every interaction with the database encapsulated in commands or queries. For example; public Interface IAddCustomerCommandHandler{ Task Execute(AddCustomerCommand command); //where command is just a container for params. } public AddCustomerCommandHandler : IAddCustomerCommandHandler { private readonly CustomerContext _context; public AddCustomerCommandHandler(CustomerContext context){ context = context; } public async Task Execute(AddCustomerCommand command){ // Do stuff } } } This abstracts the DB context from your business logic so you can swap over to dapper for a single query or even switch DB completely with no downstream effect.
 public static string FizzBuzz(int num) { return (new [] { (3, "Fizz"), (5, "Buzz") }) .Where(x =&gt; num % x.Item1 == 0) .Select(x =&gt; x.Item2) .DefaultIfEmpty(num.ToString()) .Aggregate((x, y) =&gt; x + y); } 
Above Code the user references only goes to 21 for starters. Also seems to have some code redundancy, but without feedback... one may never really know. Other then, somebody didn't care much for this example.
All major browsers support web assembly. It isn‚Äôt like flash or silverlight at all. 
Read the article. 
Oh damn. We aren't at /r/shittyprogramming here. My bad.
Here's a sneak peek of /r/shittyprogramming using the [top posts](https://np.reddit.com/r/shittyprogramming/top/?sort=top&amp;t=year) of the year! \#1: [Change upvotes and downvotes to -=-1 and +=-1](https://i.imgur.com/BbcYpLI.jpg) | [25 comments](https://np.reddit.com/r/shittyprogramming/comments/8nsxi6/change_upvotes_and_downvotes_to_1_and_1/) \#2: [What a fantastic textbook](https://i.redd.it/fbnf8tf69vy11.jpg) | [68 comments](https://np.reddit.com/r/shittyprogramming/comments/9xvchp/what_a_fantastic_textbook/) \#3: [The 'W' is uppercase.](https://i.redd.it/bhx43yn8f1521.jpg) | [69 comments](https://np.reddit.com/r/shittyprogramming/comments/a7b0x9/the_w_is_uppercase/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
Linq buzz, love it!
Vertical feature slices are great... but I'll still split them along the web boundary.
I will say that SDL is technically even more barebones than GDI. GDI is much simpler because it abstracts away the graphics API, so you don't have to learn how it actually works under the hood.
System.Drawing
It depends on your goals and what is _reasonably_ on your horizon. Millions (billions? trillions?) of lines of useless code have been written trying to anticipate future needs that never materialize. In the past I've skipped the service layer and used DbContext inside of a controller and didn't lose any sleep over it, but again, _it depends_ on many factors that will be specific to your project and your organization. Regarding a migration to DynamoDb I have a hard time imagining a non-trivial schema that could be ported from SQL to a document database simply by swapping out repository implementations.
Removed: Rule 3.
I bet you don't use try catch blocks.
The point isn't to install Blazor to get toasts, obviously this is for people who've already installed it. How are people struggling with this concept? 
I get the point of the post. What I'm struggling with is the amount of setup and boilerplate required to do something that you can do in less than 10 lines of JavaScript and a plain text editor.
Nope. Blazor and Razor Components are different things, not a rename. The official source code is authoritative, not some random MSDN release note comment. https://github.com/aspnet/AspNetCore/tree/master/src/Components &gt; This repo contains the underlying components programming model that powers both server-side Razor Components and client-side Blazor applications. ... ## Razor Components Razor Components is a built-in feature of ASP.NET Core 3.0. It provides a convenient and powerful way to create sophisticated UIs that update in real-time, while keeping all your code in .NET running on the server. ## Blazor Blazor is a **project to run Razor Components truly client-side**, in any browser, on WebAssembly. It's a full single-page application (SPA) framework inspired by the latest JavaScript SPA frameworks, featuring support for offline/PWA applications, app size trimming, and browser-based debugging. (^ emphasis added to clarify the difference. Blazer **is** the client side version)
if you're ok with UWP, you can check out Win2D: https://github.com/Microsoft/Win2D , but if you just want something super simple then winforms is probably correct.
Yes! The more separation, yet sharing through a centralized layer makes things down the road so much easier! I would also look at making separate databases and sharing your EntityFramwork as minimally as possibly, if you are going to a share that code with another ‚Äúapp‚Äù it really won‚Äôt be acting as a separate app as marrying those two pieces together can lead to a rocky divorce down the road if you find one is needed. In the time I have spent refactoring an app following a similar design most of our common day problems would have been quickly resolved with many smaller DBs and smaller simpler apps.
[FizzBuzz without multiplication or division](https://jacob.jkrall.net/fizzbuzz-without-multiplication-or-division-p)
[removed]
You crazy bastard.
This guy productions 
Do it using "the blockchain"
This is what I would suggest. I would break this solution into three projects. The first project is the database. This will consist of the database, models, and a web API for accessing the database. The second project is the web UI. This is basically the MVC project, and it uses the web API to access the data. The third project is your potential desktop admin UI. Like the MVC project it will access the database through the web API. I don't think this answers your question directly, but I do think doing it this way makes your question irrelevant. I think this structure balances the difference between designing for future considerations, and not doing premature work. It achieves this by completely separating your frontend from your backend. With this setup you probably won't even want to have a model project that all projects reference. While the backend database project will want models that directly correlate to the database. The frontend will most likely have some data that is derived from, but not actually in the database. So both projects will most likely want to use different models, all either one would care about is if valid json data is sent.
God this makes me irrationally angry and happy at the same time.
FizzBuzzEnterpriseEdition. Sure it's a joke but humor company's code base is similar. https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition
This is along the lines of my thinking. if(input == 1) Console.Writeline("1"); else if(input == 2) Console.Writeline("2"); else if(input == 3) Console.Writeline("Fizz"); ....
I know you're kidding, bit unless you're not. Unless you're a coding GOD, don't test your interviewers patience. Get it done efficiently, so that the interviewer can move to harder questions. Humor always has a chance to be poorly received. When in doubt, abstain. 
Where's the toast part?
It's called malicious ignorance.
Web Assembly is a web standard.
One, that's not how this works. Two, Web Assembly will be the new native.
Good advice, I‚Äôm partly joking, I detest these kinds of challenges. Most of the ones I‚Äôve taken the logic puzzles weren‚Äôt really interesting or just confusing. The logic in them beyond just being basics anymore should know have next to no code I use in my daily work. No offense to those that feel these things are important. Just wish there were a more interesting way of being tested.
This reminds me of a tutorial I saw for animating a cube to move in a straight path. Under the hood, the cube had an internal combustion engine, gears and everything. Quite funny.
Implement it on an FPGA: http://www.righto.com/2018/03/implementing-fizzbuzz-on-fpga.html
Not going to comment on the logic puzzles, but fizzbuzz and the like are absolutely useful interview questions. You'd be amazed at how many people go to interviews and know the theory behind programming or can answer design questions, but can't actually write a line of code. A good interviewer won't nitpick specific implementations of something like fizzbuzz (to a reasonable extent -- if someone wrote 20 Console.WriteLines instead of a loop, that would be pretty disqualifying), but it's definitely useful as a quick 5-minute "prove that you can write literally any code" before moving on to more difficult questions that may be framed at a level where the actual amount of code to write is minimal (e.g. systems/service architecture, data structures, algorithms, etc.) without wasting either person's time.
There is a lot of irrelevant stuff. I would throw away CSS, minimize code to a bare minimum without any DI, no disposables and no enums. Overloaded examples drive me crazy. 
Makes Visual Studio incredible slow.
man you could at least warn me , then i can edit the post !!! also the post already got some upvotes ... we should be helping each other :/
That redundancy is surprising hard to eliminate. Each line has four possible outputs, so three if statements and an else is the common solution. Most people make the third if re-check both conditons at once instead of nesting it. I'd argue the nested if actually has less redundancy though, but it does look a little funny.
So you start by defining each as a string, individually... var one = "1"; var two = "2"; Then use an if statement, on each individually 
You are an absolute madman.
You might enjoy these stories: https://docs.google.com/spreadsheets/u/1/d/e/2PACX-1vRPiprOaC3HsCf5Tuum8bRfzYUiKLRqJmbOoC-32JorNdfyTiRRsR7Ea5eWtvsWzuxo8bjOxCG84dAg/pubhtml &gt; Creatures bred for speed grow really tall and generate high velocities by falling over
If DX9 is fine for you, then MonoGame or XNA. They are basic, but working fantastically.
It launches a program by compiling from source then running the executable? 
thanks for the clarification, and giving their recent history in naming I won't be surprised if they named it something totally different before the official release ;-)
&gt; I get the point of the post. You obviously didn't.
Alright I will try this tomorrow and catch up with you
It uses web sockets so you‚Äôll need a VM and not something like an app service or azure function. If you make it with .net core you could host on a Linux VM basically anywhere but that‚Äôll be a bit of a learning curve for you. Cheap option is to do it on a raspberry pi as .net core console app.
U can simply do &amp;#x200B; `Request.AddJsonBody(body);` `var response = Client.Execute(Request);` &amp;#x200B; No need to serialize it manually, AddJsonBody() method will do it for you...
@Kriola thank you very much . am very very new to c# . so am wondering if i want to write this body in code , i will not send it in postman . how can i create such object i mean its not like simply saying body = {name: "ali",age: 22} .. cauz am getting errors from doing so . can u help me on that , cauz Am going to take data from Database then send it to the api .
`body = new { name: "ali, age: 22 };` More on [Anonymous Types](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/anonymous-types)
ok thanks bro i can send object now . but now its not working because of the return type is not xml not json ?
put a breakpoint after you've received response - view it's content and based on that do the parsing... [Docs](https://docs.microsoft.com/en-us/visualstudio/debugger/using-breakpoints?view=vs-2017)
@Kriola how can i parse xml to json bro ? :) and thank you for all the help .
where are you getting xml from?
This is the correct question here. OP's question sounds like XY problem. http://xyproblem.info/
Yes! Conduct a seance and channel Ada Lovelace.
&gt;It's biased because it's a survey from a single websitse that is used by probably every dev dev in age range 0-35?
&gt;The thing is blazor doesn't need to beat JavaScript - web assembly does. Blazor is a fairly small part of that puzzle. Yea, people struggle to realize that Blazor is an implementation of webassembly in .NET
&gt; I can assure you that there‚Äôs no ill intent involved. That doesn't matter.
&gt;WinForms &amp;#x200B; &gt; lightweight and responsive Something's not right over here... &amp;#x200B; &amp;#x200B;
Haha. Yeah, compared to Electron apps, WinForms apps are.
Visual Studio Code is an Electron app and I'd say it's pretty snappy
VS Code is a pleasant exception. Many other apps, such as Slack and Discord, hog a huge chunk of RAM very quickly.
I usually configure it in the BusinessLogic.Implementation project.
Qt
I would like to use C# as the language for development. Do you suggest QML or QtSharp?
To be honest I think you already know the two best ones: Avalonia and Eto. Sadly I haven't used either (yet) but I also have a few WinForms apps I maintain at my job. Eventually, I'm probably going to have to make a cross platform version and if I had to do that today... Eto currently has better documentation so I'd probably go with that for now.
Kind of like .NET guys that refuse to learn JavaScript?
Electron ASP net mvc based? You mean it queries API?
Xamarin now supports Linux and Mac desktop too. 
I mean that it's essentially an ASP.NET MVC app. Take a look: https://github.com/ElectronNET/Electron.NET
QT5 or JavaFX, but if you have experience on win form then JavaFX should be your option 
I didn't know Xamarin supports Linux. Are you sure?
I like this bit: Protest I = new Object(); Protest j = new Object(); I == j/yields false Not sure what's going on there...
I have used JavaFX for an undergrad course project. It's a very unfortunately underrated framework. I was hoping there was something like this for C#. 
https://docs.microsoft.com/en-us/xamarin/xamarin-forms/platform/gtk?tabs=windows It`s rather new but you could give it a go.
C# 9.0 will also bring in a version of "On Error Resume Next". No more having to manually wrap each statement in a *try{ ... } catch {}*!
proton native
I recenty tried Avalonia and it worked great. (In fact I am going to build my side project using it after validation all other options) they relead version 0.7 which is in their opinion stable enough for production apps (but you have ti expect some small breaking changes) Visual Studio tooling is also good.
This is very cool. Nice job!
OKHOSTING.UI 
To do it on a raspberry pi, I need firstly one, and then it have to run it at home 24h/24 with my connection and I don't want that. Then do you have any tutorial to host it clearly on a Linux VM? Can it really run since it's mostly a Windows application ?
Thanks!
Now we just need to slap some AI on this baby and I‚Äôll have my Big Chungus meme generator in no time!
Wow you've put a lot of work in there :) There were two things that leapt out at me that I didn't like, and at least one of those is personal preference. You're using Json.NET in there and using the Json.NET attributes to decorate data. This works fine but I've seen a lot of problems with trying to use n different libraries that all require a slightly different version of it. MS are building their own small 'n' fast JSON parser for .NET Core for this exact reason. I'm not sure it needs "fixing", but it's worth being aware that it's a problem for people. The second one was ref parameters in ctors. private Account GetAccount() { Account = new Account(ref Models); return Account; } So this just feels hinky. There are loads of constructors which do this, none of which seem to need a ref parameter at all. There may be a reason for it, I didn't dig too deep :) Anyway, it's just two things that popped out at me without actually putting any real effort in ;)
Thank you, I got everything working! I had to change a few things up a bit for the program. I‚Äôve decided to set Both a new Password and Pin for my Windows account and also set up the group policies to display the previous login attempts when I sign in. I set the program to run when I login. Are there any other ways you would suggest I go about this? I tried doing my own way and got jumped on for ‚ÄúCreating Malware‚Äù even though I wasn‚Äôt actually Creating Malware.
I‚Äôve been using Avalonia for a couple weeks now and it‚Äôs a really good replacement for WPF if you want cross platform support, as long as you‚Äôre okay with literally 0 documentation. 
Hey man! First of all, awesome job completing a project enough to be able to show it off. I can't tell you the number of half-finished projects I have because I get passed the fun stuff and hate polishing. Here are my critiques :) * The base README doesn't really contain any information that is pertinent to someone coming into this library. Ideally, this thing is built every commit to master with either Travis or Appveyor (free for open source projects, both of them) and then pushed to NuGet, and then your base readme should contain basic information like a link to the full docs of how to use each individual endpoint, how to install it via NuGet, and one or two very simple examples (Like, how to login and get subreddit posts, and how to login and post a comment). * You actually have zero unit tests, but 327 integration tests. That's fine, but that means that if something happens to the reddit API during a time you want to test, you're kind of SOL on knowing if you broke something. The testing pyramid dictates that you should have mostly unit tests, some integration tests, and a few end to end tests. Ideally you'd use something like `FakeItEasy` to fake the calls to `ExecuteRequest` for each of the models. I say this because I tried to run all the tests but all of them failed because I got the `You broke reddit` error for all of them, maybe the API is down? Or maybe your token is over its limit. Also, just as an aside, MsTest is generally pretty out of favor-- XUnit and NUnit are more common. * I'm not personally a fan of the way you modeled your models, specifically I think any method (including constructors) that take more than one parameter can be refactored to something more readable. Like... quick quiz, don't look at your code, what are these parameters, in order? var subreddit = new Subreddits(...); var about = subreddit.About("wikibanned", "ic2737", "eu4831", "jj3817", true, "pics", 23, 50, "", true); It's really impossible to read that later on. For these types of problems, I almost always recommend a builder pattern: var about = new AboutBuilder("SubredditName") .Where(AboutWhere.WikiBanned) // enum here .After("ic3847") .Before("ue8474") .User("someUsername") .IncludeCatrgories() // Not doing this keeps at the default of false .Count(25) .Limit(50) .ShowAll() .ExpandSubredditDetails() .Build(); Here, you can actually read what each parameter does without having to dig into the code; this is especially true when using a library where your users might not necessarily have "decompile sources" turned on, so the dev experience of digging in isn't great. There are some preeeeetty egregious examples of this, like in `AccountPrefsBase` where the constructor takes in what looks to be 30 or 40 parameters long, almost all of them being bools. You have some other interface problems like accepting raw JSON in your controllers for patch requests instead of something more statically typed. * I'd recommend, in general, using async and exposing `Task`s instead of using the sync version of `RestSharp`. I see you expose some `Async` methods in the controllers, but just wrapping a sync IO method with `Task.Run` won't yield control back in the way that it could if you were using async all the way. I have a few other things, but these are the things I would personally kick back if this were a code review I was doing at work :) 
Agreed. Slack can be quite sluggish and take up huge ram, especially with multiple workspaces 
I know, and probably more than you, because you can think it can replace JS. Its not intended to do that even from their creators. You can do that by making frankenstein and monkey patching but while that's acceptable in things like Flutter because it gives cross platform support, JS is already cross platform natively. There is zero benefit, only that you can write in your favourite language (hint, youre lazy). 
I think read somewhere that .NET Core 3 will have something like this.
No wonder its slow. Why using two languages when Electron apps are native to one language... There is nothing from stopping you writing app like VS Code. Source code is public and you can copy their patterns.
This really needs to be a sticky at the top of this forum. WPF and WinForms in .NET Core are Windows only.
An alternative to the builder pattern that requires less wiring up is the humble strongly typed configuration object passed to a constructor. Simple, effective, and very easy to use in tests with a minimum of verbosity and added error surface. 
Definitely an alternative to consider! If every configuration value is valid with all other combinations of other configuration values, then that's certainly preferred. I'd recommend the builder if some values need validation or if setting one value might set or unset another, as each method can have comments about this and also throw the exception if necessary at the right place.
Nice, I was just thinking to myself 'You know what Reddit needs? More bots. We need to make it easier for more people to make more bots on Reddit' Merry fucking Christmas
When I'm ready to start beta testing this, I plan to use this with an ELIZA library I wrote earlier. Does that count? ;)
That thought did occur to me. Everyone, please use this library responsibly.
&gt; I'd recommend the builder if some values need validation or if setting one value might set or unset another, as each method can have comments about this and also throw the exception if necessary at the right place. Definitely this. I do advise once that need is there to create interfaces representing the different valid stage groups to help the consuming developer "fall into the pit of success". For example, if you must set an authentication method via some `WithAuthMethod` before you can set a `WithThrottleLimit` then only `WithAuthMethod` and valid options after it return an interface representing the builder object containing `WithThrottleLimit`. That's hard to explain and sometimes even harder to implement depending on how complex your validation rules get. 
Snark aside, excellent work my dude, I'll be using this for sure.
Thanks!
Wouldn't named parameters be a nice solution?
I've only used the C++ interface which is what Qt has always supported. Don't know much about qml or anything about qtsharp
I'm a script kiddie, is there any reason this wouldn't work in Unity?
No. Partial classes exist primarily to support tooling for code generation. There is almost no good reason to use them yourself.
Offtopic but is there any good sample on handling messages missed during reconnect. For example if you are building a chat and want to show persistent history. How do you load the history initially and how do you retrieve the messages potentially missed during reconnect?
I noticed another C# framework for desktop apps, called Uno Platform. Is it worth a shot?
I tried them on a project several years ago as an organizational tool. I found that it didn't work as well as abstract classes. The problem with partials for organizing code is a lack of control and direction over organizing code. If you aren't careful you can end up with a class spread out over several files and you end up with poorer structured and redundant code. 
I would avoid the use of the name `Controller`. That name has been so thoroughly owned by MVC and WebAPI to mean "a class used to accept incoming requests" that your use of it here is incredibly confusing. Your usage of `Task.Run` which attempts to wrap a synchronous implementation of an asynchronous operation for async consumers is a performance disaster for a library. Trivial use (i.e. console app bot) probably won't have issues but this implementation should come with a "Don't even think of using this in an ASP.Net application" disclaimer. If the idea was to create a Reddit Bot Framework for console applications the your name should reflect that so you don't confuse people and you're probably on the right track. If you call a library Reddit.NET but it's really only good for building console bots that is incredibly misleading. If your goal is to actually provide a .NET SDK for the Reddit API then drop all the polling, event handlers, encapsulated caching, and synchronous implementations for what should essentially be an API definition and wrapper around an HttpClientFactory. 
What about gtk#? https://www.mono-project.com/docs/gui/gtksharp/
Electron is always slow, even its best uses (Discord and VS Code) are still VISIBLY slow compared to native apps and would have been faster if written in Win Forms with the same amount of effort. Of course they wouldn't be cross platform in this case.
But Sublime is faster isn't it? :)
OK, I am only talking like 5 or 6 files at most. \[folder structure\] &amp;#x200B; Presentations\\Documents\\PowerPoint\\ &amp;#x200B; \[files\] &amp;#x200B; Slides.cs &amp;#x200B; IO.cs &amp;#x200B; eventsHandlers.cs &amp;#x200B; properties.cs &amp;#x200B; initialize.cs &amp;#x200B; &amp;#x200B;
I really wish that someone writes a non-trivial Avalonia apps and writes a detailed post-mortem.
Or use EF6 to get infinitely better queries and arguably better APIs. (Assuming you want to use an ORM with LINQ)
"non-trivial" meaning?
It solves the "what is this for" problem, at least if you are good at naming things. It doesn't solve the verbosity problem or the likely separation of concerns problem which is suggested by the smell of that many parameters in the constructor. If you have 4 parameters for Auth, 3 for network settings, and another 5 for convenient preferences, you can break that out into `AuthConfig`, `NetworkConfig`, and `Preferences` all which have their own validation. Much cleaner right? It also suggests that you probably shouldn't do that, but rather that you should be injecting your `IAuthenticator`, `IRedditHttpClient`, and a `Preferences` configuration object so that the concerns of authentication and network communication are not owned by your logic class. 
Can it download pics from i.reddit or vids from v.reddit?
If you grab it as a link post and copy the URL, yes.
Thanks!
Unfortunately, I have zero experience with Unity so I honestly don't know. Perhaps someone else here can answer?
Real product that goes to customers (even if limited number of customers) and is not a tool for use by devs/support. At least 1 manyear put into it
I think I agree. I say "think" because I found myself breaking up a large class into 3 partials because I had to implement a large interface and I don't like using regions if I can avoid it. I am still roughly designing the code so I am assuming that the large class will ultimately get broken up into smaller components anyway but I am dead set on it having a certain API to consumers so I am not sure a large class is avoidable, even if it just contains methods that simply call into the same methods for private components. It isn't too big of a deal to merge the partials later if I don't like it and it isn't a breaking change doing it. Hell, from the consumer's perspective, it isn't a change at all. I should note that this is the only time I've ever used a partial that wasn't in some associated with code generation (like with Winforms designer files). I am not sure if I'll keep it but it does make the class in question a bit more organized. I suppose I could just use inheritance instead now that I think about it.
Pretty neat! I do ask, why not just call your Models.Structures RedditThings in the first place? using RedditThings = Reddit.NET.Models.Structures;
Nice. Looking forward to checking this out. 
It should be faster as it's not compiled at runtime. Pretty big benefit if you ask me.
Well.. Notepad is also faster... 
If your class is that big, it's probably doing too much and needs to be broken down into multiple classes with fewer responsibilities.
No, this is bad. Don't do it.
Gtk3 bindings: https://github.com/GtkSharp/GtkSharp I've been using them, they're not bad.
Personally, I'd *love* a proper Qt5 binding (as it's my favorite framework), I haven't had much luck with QtSharp. I'd recommend these Gtk3 bindings: https://github.com/GtkSharp/GtkSharp They've been working very well for me right now and in my endeavors.
This guy code reviews 
Hey Awesome work buddy. Just wanted to say I will be playing with this in the new year! Thanks for all your effort!
If it targets netstandard2.0, it will work
Really stoked you did this, looks great. Some good feedback from people as well, hopefully they'll hop on the project and start making pull requests. Basic question from me, why would I use this versus just binding to the api itself? I don't mean that in an atagonistic way, I really don't know the native api. Do you have any guidance for when it would be easier/faster to just make http calls to reddit's rest api vs using the reddit.net libraries? Is there any reason to skip this and roll my own for connecting to reddit?
I know JS, it's just an awful language that needs to die.
It would've been better to name this RedditNET instead of [Reddit.NET](https://Reddit.NET). Or at the very least fix the namespaces, because it looks like everything is under the NET namespace, which feels off: \&gt; Reddit.NET.Controllers Are these network controllers? lol Also, I agree with the other guy on Controllers. People are going to get confused, thinking these are MVC controllers.
I'm curious about your motivation for this over a bit more mature library like [RedditSharp](https://github.com/CrustyJew/RedditSharp). Granted, RedditSharp has become bloated and a bit rough to use for even simple things.
Yes it will. 
&gt; and yes, it did take fucking forever to write them all There are plugins to generate c# from Json. 
You can have C# .net core console apps run on Linux. Try it out using WSL first. 
Uh, wut? Electron is garbage for almost everything. It literally takes you 500MB just to run a small chat app. And like the other one said, Discord is very slow, and VSCode is okay but still consumes a lot compared to other NATIVE programs instead of fucking downloading whole Chrome with you just to use a garbage language like JS to make a small chat app.
Stay away from Electron. It's really only going to bring you problems.
You can create a generic builder pattern. I set one up for my current project, and it actually works faster than the non generic version. On phone so excuse issues but here is an example: Build.Account.With(x =&gt; x.Name = "Home"). Build (); Also setup an extended way of using defaults, which you can pass into a UseDefaults() method or register them beforehand and pass them into the builder constructors.
Or Linq2Db if you don't need thinks like change-tracking.
Yeah this was really excellent feedback. 
My WF applications are responsives.
Were you able to find any?
Yeah, I've done something similar! :). Usually I take in parameters of an expression tree from TEntity to TProperty, and then a "value" parameter of TProperty (usually with an overload of `Func&lt;TEntity, TProperty&gt;` so that you can use the currently-bound model to determine the value of the property at runtime) instead of taking in an `Action`, but it's pretty similar either way!
No. There are a couple on Amazon, but i don't know how good they are. 
there is a somewhat clunky but nevertheless working blueprint Identity solution integrated into asp.net core. its classes are IdentityUser, UserManager, SigninManager and there is an own Dbcontext implementation for the identity objects. Search for the keywords to get a baseline implementation template based on Aspnetcore framework provided elements. only use recent templates as there has been a redesign between recent aspnetcore versions It has little use to build your own greenfield implementation for something trivial. 
I tried expression trees, but the performance was absolutely abysmal. For 100k iterations (on my laptop), calling a method that sets a property takes ~28ms total. The actions take 8ms, and two variants of expression trees take 80k-150kms...
Sounds like malware with extra steps
Wut
you need 300 IQ to get it
you need 301 IQ to get it
Use Windows authentication methods and make sure, they have no physical access to the PC and can not boot from usb/cdrom. So you also have to pw protect the bios/UEFI
I'm reading through the PDF from this site now. http://www.csharpcourse.com
True. It is not written in JS
There is really only one valid user for partial classes. That is when you are creating a cross-platform app where you need platform specific implementation. Otherwise there are better ways to organize your code, such as breaking it down into smaller classes, or using regions to group highly related methods 
Discord is slow but still impressively fast compared to electron based competition like slack and skype
Uno is bases on UWP. Think if it makes sense for you.
For sure, there's a performance tradeoff. Always good to remember :) 
12 years professional programming and I've yet to see any real world use of separating data access and business logic and also separating implementation from interfaces. Also the most damaging thing to a project is an ASP.net web layer talking to the BL via a web service.
Putting a web API between your business logic and your ASP.net web project is pure and utter bullshit that is only practiced in the .net community and has caused insane damage to .net projects over the past decades with no actual benefit.
For starters you can delete the repository and UoW to make your life much easier. EF already implements these
We can't downvote anymore :(
70-483 got refreshed fairly recently so it‚Äôs up to date with c# 6.0 from what I remember? The exam itself is multiple choice based on standard ‚ÄúChoose something from A-D‚Äù as well as some scenario based questions where you drag and drop lines of code or individual statements to fill in templates code. To complete your MCSD you‚Äôll have to finish three exams in total, 70-483 is a good start. I then did the Web Applications one which was MVC 4 based, before doing 70-535 which is an Architecting Azure Applications exam. If you‚Äôre a .NET Developer it‚Äôs definitely worth doing, and TBH with 15 years of experience you should breeze the exam, since the recommendation is about 2-3 years of production experience. I bought and read through the official exam guide from MS which covers all of the materials on the exam. If you don‚Äôt want to buy a book then there are plenty of free resources on the MS Certifications site as well as paid material on Udemy and Pluralsight etc. 
Areas covered: http://download.microsoft.com/download/A/D/F/ADF027D4-0541-4CFB-9202-3C48571ABB54/483_OD_Changes.pdf
It sounds to me like you need a base abstract class rather than partial classes. 
I have been using Solo Learn but I have previous experience in other languages.
If you can already write programs in other languages, I highly recommend "Hidden Features of C#?" on Stack Overflow: [https://stackoverflow.com/questions/9033/hidden-features-of-c](https://stackoverflow.com/questions/9033/hidden-features-of-c) It may be useful even you're just starting out with programming, but I make no promises. :)
What do you mean by real world use? Separating the business layer from actual data access is a good idea when you have a good amount of business logic in your application. It's separation of concerns 101. What do you mean by an asp.net web layer talking to the BL via a web service? Are you talking about the UI communicating with the web API which on itself communicates with the BL? 
&gt; RedditSharp has become bloated and a bit rough to use for even simple things.
Maybe you just haven't seen a good implementation of it. The OP mentioned that there is a likely chance of having two different applications wanting to access the same data. Assuming these programs will not be run on the same device as the database it makes a lot of sense to separate the frontend from the backend. 
Pluralsight has a lot of highly rated C# video courses, ranging from beginner to advanced. Something that helped me learn C# is an application called LinqPad. The creator of LinqPad is the coauthor of C# in a Nutshell, which is a fantastic C# reference book. 
What's with the down-votes? He's not wrong, EF6 offers a lot more than EF Core.
 &gt; We now have a way to create a pool of DBContext types at the start of our web application. These pooled types will still be placed in the DI container for use in our application, but we will no longer be creating a new instance of the DBContext for each call. The new DBContext pooling just needs AddDBContextPool instead of AddDBContext at the time of registering the service. Why? Database connections are already pooled. You shouldn't need to layer your own pool on top of the connection pool. WTF is going on inside EF core that makes a DBContext do expensive that you need to wrap the connection pool with another pool?
&gt; If you are an ASP.NET Core developer, the following feature for EF Core will sure to be a powerful tool in your toolbelt in the future. By default, our ASP.NET Core applications will register the DBContext into the dependency injection (DI) container so that we can obtain instances of the type for use. What we get with this method is a new instance of our DBContext for each request. What if we could have a better way of handling our DBContext? That's a really bad idea. First of all, it makes your code much harder to understand. A DBContext includes its own cache. Which means that DB calls early in the web request can change the behavior of later calls. I discovered this when we started leaking private data that got attached to the public data we were returning. We couldn't catch this with unit tests because it only occurred when the DBContext was reused and the private data happened to be cached. ***** Now lets say you always use `.AsNoTracking` and separate view-models so you don't have to worry about caching effects. Your application is still going to be inefficient when it comes to using the database. While you are busy serializing objects into JSON or building HTML, that DBContext is still holding onto a database connection. Which means you have one less connection in the pool for use by other web requests. (Or more likely, you are just opening excess connections on the database server.) A DBContext should be created when needed and immediately disposed afterwards in order to release the DB connection back to the pool.
* One project called Models, contains ** Model classes Entity Framework context, which includes a DbSet&lt;&gt; of each model class A repository interface An implementation of the repository, using Entity Framework The MVC project This project has a reference to the Models project Controllers in this project use the repository to get their data Unity injects the repository implementation into the controller 
Three layers, not two. * One project called Models, contains * * Model classes * * **This layer is unit tested** * One project called Data Access Layer, contains * * This project has a reference to the Models projects * * Entity Framework context, which includes a DbSet&lt;&gt; of each model class * * ~~A repository interface~~ You don't need this. * * An implementation of the repository, using Entity Framework * * **This layer is tested against a database** * The MVC project * * This project has a reference to the Models and DAL projects * * Controllers in this project use the repository to get their data * * Unity injects the repository implementation into the controller * * **This layer is tested through the UI** 
There has been a full functional C# reddit library for years now.
Have you used the library? I'm curious because your other comments suggest you didn't know it existed. It's a *bit* bloated, but it's fully functional and has been around for years. I'm not knocking wanting to create your own library. But it seems it might've been better to contribute to a well known and mature library, than roll your own.
It's concerning that OP is not replying to any of the very valid feedback.
I got into this with MVC so maybe I‚Äôm wrong, but you‚Äôre using the term ‚Äúuser control‚Äù and ‚Äúview‚Äù and AFAIK the former is a web forms thing while the latter is an MVC thing. So are you webforms or MVC?
user control and view are WPF terms too.
Fair.
I don't think this isn't a use case for partial class. After all if you need multiple implementations you should do multiple classes with a base class/interface. Partial classes should be used when a part of the class is generated using code generation tools
Separating business layer from data layer in separate projects is in practice useless. Your queries are part of the business logic anyway so the code is cleaner if they are not separated but even if they are separating them in a project rather than a folder/namespace is still useless. It might be a good idea if you are not using an ORM. By web layer talking to a web service I mean an ASP.NET project which instead of referencing whatever classes the BL is put into calls a web api
If there are two different applications then merge the MVC app is better off using the BL instead of the web API. You can even put the web API in the same project as the web app
I think it is very minor optimization that removes some amount of setup work and some allocations. Nothing significant but it comes for free so why not take it?
Omg This is a cute
Is the position still available? I am an experienced Xamarin dev.
I am Consultant based out of Bangalore India. Looking for remote job. My skills: 1. C# .net - Full stack mobile and web based development. 2. Domain driven design and Test Driven Development 3. Distributed software development Microservices/CQRS Apart from technical skills have trained junior resources also. Please message me if you have a opportunity. &amp;#x200B; &amp;#x200B;
See my other comment about not holding onto a DBContext longer than necessary to start. Also, what does this mean for the data cache between requests? There's also the cache for things like queries definitions, but that should be shareable without having to pool the DBContext. Is there really a user care for this? Or did someone just happen across a book on design patterns?
When I need to throw together a quick GUI app, WinForms is always my first choice. Incredibly programmer-first and good for simple UI at the tradeoff of terrible for complex UI. Probably the lowest level you can get via C#, and if used right incredibly responsive (though limited). Certainly lightweight and responsive!
Yeah I'm aware of RedditSharp/PRAW/JRAW/etc. I considered using RedditSharp in a bot project I was working on but for various reasons it proved inadequate, so I decided to write my own. It was originally just going to be a simple thing for myself only, but as I went, I decided to be a bit more ambitious with it. It is certainly not my intention to in any way belittle or diminish RedditSharp. Rather, I saw a gap that existing options didn't fill so I decided to do it myself.
&gt; I basically want the html5 canvas but not in garbage JavaScript. Well, Chrome's HTML5 Canvas implementation is backed by the Skia Graphics Library. Consider SkiaSharp :) https://github.com/mono/SkiaSharp I wanted this so badly when I was a kid...
&gt; why would I use this versus just binding to the api itself? The Reddit API is not the most intuitive. It took me well over a month just to incorporate all the basic endpoints. There's also a lot of inconsistency in the JSON returns of various endpoints, which can further add challenges. Reddit.NET handles all this boilerplate stuff for you, as well as ratelimit handling/etc. You could call the endpoints directly, but it'll take a lot more code and hassle to get it done, plus it probably wouldn't be as stable. Besides, if you just want to hit the endpoints and parse the return data without any additional abstractions, Reddit.NET can still accommodate you. I didn't include any examples in this post, but you can call the models directly, and you'll notice that the models correspond to the endpoints in the API documentation pretty much 1:1. There really isn't any notable performance gain by calling the models directly, but it does require a bit less memory if that's a concern for you. Unless you're just throwing something quick together that'll handle a small handful of endpoints, I would definitely recommend against trying to just hit the endpoints manually. And there's really no tangible benefit to doing so that I can think of.
@Kriola am getting it from var response = Client.Execute(Request); 
Thanks!
Thanks!
Originally, there were just going to be a few of them for deserializing JSON return data. At the time, putting it under the Models namespace seemed the most logical approach. You think I should just rename it to RedditThings? And while you're here, I have a bonus question for you: Do you think I should rename the Reddit.NET namespace to just Reddit? Some people have commented that the ".NET" part is confusing, particularly with the controllers class being there, so I'm thinking of changing that. I thought about doing it that way initially but I was concerned that a "Reddit" namespace might not be unique enough, and I just don't like how "RedditNET" looks, though that is also an option. Any thoughts?
Are you trolling? I've already responded to a number of comments. The more comprehensive feedback comments will take me more time to evaluate before I'll be ready to post a thoughtful response. I will say that I am very impressed/pleased with the feedback I've seen so far. Also, please keep in mind that it is Kristmas. I just got back from opening presents with the girls at my brother's house, ffs. I promise I will respond to all the feedback here over the next week or so. In the meantime, keep 'em coming! =)
At the time of this comment, you had only responded to the ‚Äúgreat job‚Äù comments. I haven‚Äôt checked to see if you replied to the actual feedback since then.
Thanks for the feedback! I won't be able to get to this right away, but I'll reply in more detail later when I've had time to give your comment the time it deserves. =)
Thanks for the feedback! I won't be able to get to this right away, but I'll reply in more detail later when I've had time to give your comment the time it deserves. =) 
Agreed.
Then you didn't look very closely, because I responded to more than just that like 12 hours before you made your comment even. Here are a few examples (the first one was a reply to your own comment 3 hours before you accused me of not replying to any valid feedback): https://www.reddit.com/r/csharp/comments/a952u3/introducing_redditnet_an_oauthbased_fullfeatured/echt4cn/ https://www.reddit.com/r/csharp/comments/a952u3/introducing_redditnet_an_oauthbased_fullfeatured/ecgns7t/ https://www.reddit.com/r/csharp/comments/a952u3/introducing_redditnet_an_oauthbased_fullfeatured/ecgnyg8/ Please be more careful before making accusations like that. Not only is it unprofessional, but it's also a distraction. I put a lot of time and work into this project and it's very important that I be able to rely on this thread for feedback to fill in any remaining gaps. The last thing I need is somebody hijacking the thread and trying to turn it into some kind of flame war. If you wish to continue this conversation further, please do so via private message. I don't want this thread to get off-track.
Those are all softball questions. My concern was that you weren‚Äôt replying to the actual design feedback, including my own. If you‚Äôre going to reply later, that‚Äôs fine. It just felt weird that you weren‚Äôt replying to the questions that actually challenged your work.
&gt; Those are all softball questions. I'm not sure what you mean by "softball" in this context. This is a programming forum, not a political talk show. I came here to get help with my project and that's exactly what this thread has produced. A code review is not about "defending" your work. It's about getting a fresh pair of eyes to help you find anything that can be improved upon, so you'll rarely see me respond quickly to the more comprehensive feedback comments on this or any other project. If by "softball" you just meant easier to respond to, then yes, that was deliberate. I was lying in bed doing this on my phone, so I just tackled the quick/easy ones and went to sleep. I see nothing wrong with that. In any case, misunderstandings happen and all that. Just please try to be more careful next time is all I'm saying. Try to remember that there are all kinds of valid reasons why someone might wait before responding to certain feedback, especially if that person would like to take some time to think about it carefully. There are no deadlines here so I can afford to take my time with these. Besides, I've been working on this every night for the last 3 months, so I could use a short break without being made to look like an asshole for doing so. =)
I just meant that you weren't answering questions that actually we're critical of your work. You said you'll answer them later. So I'm not worried about that anymore. But it was a valid concern. There was nothing for me to be careful about.
&gt; There was nothing for me to be careful about. I disagree, but that's ok.
When someone posts their work and they answer *no* questions about the actual important bits, it's concerning. It makes people believe that they aren't receptive to feedback. That's a valid concern and no one should be afraid to voice those concerns. If the reason is, "I haven't had time." Then that's a valid response. And that's all that was really required in this case. But you decided to drag it out because you feel personally slighted for some reason.
&gt; If the reason is, "I haven't had time." Then that's a valid response. And that's all that was really required in this case. What you don't seem to be getting is that the "I didn't have time" explanation is far, FAR more likely than the one you had assumed, especially given what day this is and the fact that this feedback covers a lot of ground. Given that you had absolutely no reason other than the fact that I didn't reply fast enough to some of the feedback for your taste, I do not believe your concern had any validity and, if you did have that concern, the appropriate thing to do would have been to express that concern to me via private message before crapping on my thread. If you don't agree, fine, but I don't think there's any point in continuing to plead your case. Let's just drop it and focus on stuff that actually matters, ok? The less time I have to spend dealing with drama like this, the more I'll have to evaluate and (when I'm damn good and ready) respond to the larger feedback comments. 
I can second that C# in a Nutshell is an excellent reference book. It is one of my favorite go to location if i want to look up something.
It didn't occur to me that you hadn't had time because there were a few comments that were critical that could be easily replied to. All that being said, I stand by my concern being valid. If you want to end the discussion, feel free to do so. But feel free to keep replying.
I have used that book and while it is excellent as a beginners course book with hands on exercises and explanations. it is a bit dated now and would need an update to newest language and fw features. Also the XNA game example was hard to bring to life since that framework is deprecated.
Coding books have gone out of fashion, but still I'd recommend having a decent C# book available to read in your spare time. It doesn't have to be aimed at beginners. I recommend C# In Depth by Jon Skeet. If something in the book you choose is too advanced, research that topic until it's not, or skip it for now. &amp;#x200B; Meanwhile, think up coding projects - ideally ones that could actually be useful - and get coding. &amp;#x200B;
&gt;You think I should just rename it to RedditThings? I'm not ekinnee, but I don't see why this would be a problem. At least not at a cursory view. You would probably even be fine at just calling it \`Things\` since it's not reserved and that's what Reddit themselves call it. RedditSharp does this for the most part: [https://github.com/CrustyJew/RedditSharp/tree/2.0-.Net-Core/RedditSharp/Things](https://github.com/CrustyJew/RedditSharp/tree/2.0-.Net-Core/RedditSharp/Things) \`Thing\` is their base class and all Things inherit from it. &gt; Do you think I should rename the Reddit.NET namespace to just Reddit? I think \`Reddit\` as a default namespace would probably be okay. It's descriptive, as all things under it are a part of Reddit. I'm trying to think of a reason why this couldn't work, but can't think of *good* one. The only thing I could think of was if someone was using your library with RedditSharp. In RedditSharp, their API class is called Reddit. So it would conflict. But I really don't think that's a good reason. When I'm struggling with stuff like this, I try to find similar projects to see how they've done it. MS is my go to, but that won't really fit here. [Json.NET](https://Json.NET) is a good one, as the name is exactly like yours. They solved the problem by making the namespace \`Newtonsoft.Json.\` So maybe you could prefix \`.Reddit\` with something else? Or heck, just make it \`Reddit\` as you suggested. I really don't think that will be that big of an issue.
I think the cache and all the other things that a context visibly holds to is reset. Basically the only way this makes a difference is if you keep a reference to the context somewhere and dispose it. The DI will reset it and it will be a valid context again that belongs to a different request so things can fail.
&gt; I say this because I tried to run all the tests but all of them failed because I got the You broke reddit error for all of them, maybe the API is down? Or maybe your token is over its limit. Did you remember to add your app ID and refresh tokens to Reddit.NETTestsData.xml before you ran the tests?
so - like Go(lang)s proposed err-handling where you do something like public void MyMethod() { On Err =&gt; { Console.WriteLine("Oh Noes. {0}", Err); return null; } var val1 DoSafeMethod(); // if it throws, further code down below would not be executed. var saveReturnVal = check DoThrowingMethod(); return $"Value is: {val1+saveReturnVal}"; } This would be *kinda* ok tho, but too much brain-context-switching while coding, especially on *legacy* code or just plain old bad code that is 123192 LOC in a single Method.
&gt; A DBContext should be created when needed and immediately disposed afterwards in order to release the DB connection back to the pool. This. Don‚Äôt leave connections open unnecessarily.
The hardest part of being a developer isnt architecture or writing testable code, it's all about naming things. Hardest part.
Would it be possible to embed Xenko in a wpf or winforms window and control stuff in the game from outside?
I've always thought that I am alone in this and blamed English being my second language...
Are there any particular names in this project you think should be changed, or were you just speaking in general?
Link to one?
I remember there was some discussion about doing that a while back. I don't think there's an out-of-the-box option to do that yet (unless they added it with 3.1) but the engine is open source... If I had to guess I'd say someone could hack together a way to do that in under a week with a more robust solution that might be accepted in a PR being more like a couple weeks of work. It seems like initialization is one of the areas that isn't very customizable right now. For instance, if you wanted to ship one executable that worked either as a VR app or non-VR it would be pretty tricky right now as there aren't really high-level programmatic switches and knobs that you can simply change at runtime and re-initialize the engine.
https://www.google.com/search?q=vscode+json+paste+extension+generate+c%23&amp;
That's basically what the editor is doing. There are a few tricks to make it work but it's feasible.
Well there's this phenomenon I'm seeing where JavaScript is becoming more like C# and C# is becoming more like JavaScript. Each new revision of each language gives it things the other has. It's possible the "battle" will become more like C# vs Java. Think- why do we choose C# over Java? Those will be the reasons we choose C# over JavaScript... not the reasons we currently use C# over JavaScript. We'll do it for Visual Studio and the other developer tools, we'll do it for the libraries available, and perhaps because one is clearly updated more often than the other. 
I like the Models namespace personally, I know what to expect in there. The .net seems appropriate, maybe call it Reddit.NET but spell it Redditdotnet in your namespace. I'm rather lazy sometimes and would personally call it RDN maybe.
Everyone finally does that, net core also has a very good option shipping entire framework and runtime with app, so you arent at mercy of what is installed on client computer (those were truly dark days). So shipping chromium and node is reasonable, nobody cares about 100mb on HDD. And you can think that JS is garbage, but its the most loved language on stack overflow survey (biggest data I have by far) for few years now.
What's the reason of this being a netcoreapp ? Should have been netstandard instead ?
Have you read this? [Read this before posting](https://www.reddit.com/r/csharp/comments/3xn6sm/welcome_to_rcsharp_read_this_post_before/) You need show that you've made an attempt to code your solution, and go from there. The problem you describe isn't a Chapter 1 problem, and so I suspect you've done some work prior to being presented with this assignment. Briefly: You are going to want a class and method that accepts a base salary value, years of experience and which returns or assigns to a property an updated annual salary.
Seems like the pattern chain of responsibility could help you there. Take a look at my example here: [https://github.com/Finickyflame/DesignPatterns/blob/master/DesignPatterns/Behavioral/ChainOfResponsibility.cs](https://github.com/Finickyflame/DesignPatterns/blob/master/DesignPatterns/Behavioral/ChainOfResponsibility.cs) In my example, I use tech supports to check whatever they can handle the problem, but you could easily replace that with each experience tiers. Each tier look at the experience they can handle and returns the salary appropriately. Do you think this can help you or you think the example is too advanced?
JIT are faster because they know more about execution contexts etc. That's why C# compiles to IL and then its being executed by JIT.
Now let's see: someone who doesn't know fuck he is talking about. I won't even waste my time arguing with someone who thinks that 100mb is reasonable for a chat app, and 500MB from RAM is good for a chat app, just to create it with a garbage and the biggest mess in the history of programming(Javascript, and it's not the most "loved") Just fuck off.
Hi, thanks for replying. It's a webform. At least, that's what I create when I add a new item. I use a multiview with views in it. I cant recall exactly how I made the usdrcontrol. Ill follow up on that It doesn't have to be a user control. Just something that I can instantiate dynamically for however made duplicates of the form should be on the page. I thought maybe views themselves could be made a customized class and plugged into my view. This is all really about avoiding duplicate code. So that I can say, currentView = view1. String s = currentView.tb1.text. Then repeat currentView = view2; String s = currentView.tb1.text. So i can use the same load and save finctions, but only switch which view, and its controls, I'm targetting
Sorry but 10 years experience with native non trivial desktop apps are that they are hanging all the time. Most of those who worked on windows remember white screens on unresponsive app and things like smearing windows on entire desktop by moving them.
I wanted it to be platform-agnostic. Also I thought I read somewhere that netcore will ultimately be replacing netstandard altogether.
One quick comment about something that sticks out: Exceptions have a very specific meaning and purpose in .NET; they are intended to be thrown (not returned) for exceptional, unexpected cases and they are supposed to be very light-weight, metadata structures derived from `System.Exception`. Throwing an exception is a last resource, something your code does when it does not make sense to continue execution and it is better to halt and highlight that something bad happened right away, as it is better to fix it than to attempt to continue execution under those circumstances. So, it seems to me that ShapeException is not an exception and it should not be called that way. It is more than metadata (it has functionality, in the form of methods, which an exception is not expected to have), it does not derive from `System.Exception`, and it is not thrown. Calling it ShapeException is therefore misleading and confusing. So, as a start, maybe you should rename it ShapeInputValidation, however, after doing this, there is the fact that this class is in Shapes.dll, which is intended to be a re-usable library, and therefore, not expected to have any input validation, as input is something that is handled by the layer that is closer to the user, in this case, the API itself, so you should probably move it to the API; and after doing that, you should explore some of the the standard ways to do input validation in ASP.NET WebAPI (like [Filters](https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/filters?view=aspnetcore-2.2))
So is only one view going to be visible at a time?
This is not entirely true and besides, 99.9% of class libraries target netstandard making your library impossible to be linked with [1]. [1] https://stackoverflow.com/a/51836433
Something about the actual design of the REST API: URIs in a REST API are expected to be as much self-explanatory and readable as possible. This means that when you see a URI pointing to a REST API, you should be able to have a rough idea of what it does just by looking at it, without any further documentation. This is intended to avoid confusion and misuses. If we see an example of the Shapely API: `curl -X GET "`[`http://shapely.azurewebsites.net/api/Rectangle/PerfectSquare/test035698513666/2/Area`](http://shapely.azurewebsites.net/api/Rectangle/PerfectSquare/test035698513666/2/Area)`" -H "accept: text/plain"` Here, there is really no way to know what "test035698513666" and "2" mean. Things would be much clearer if the URL was: `http://shapely.azurewebsites.net/api/Square?name=test035698513666&amp;area=2` &amp;#x200B;
I have a hard time thinking about an example where I don't prefer the native app when available. Hell, skype is literally the same app rewritten from Delphi into Electron and the Delphi version was infinitely better. Can there be any more of a direct comparison?
Hello! This seems like a cool project to learn with. I love working with RESTful APIs, so I took a look at what you posted. There were two related things I noticed right away. The first was your URL structure and the second was your use of HTTP verbs. 1) As for URLs, the typical REST endpoint is going to be simpler than what you have so far. For example, when you‚Äôre working with a circle, your endpoint should look something like this: /api/v1/circles There shouldn‚Äôt be anything else encoded on the path like radius or circumference. I added a ‚Äúv1‚Äù to signify this is ‚ÄúVersion 1‚Äù of the API. There are alternative ways of versioning, but I find this simple and straightforward. Also, note that I used the plural form of ‚Äúcircles‚Äù which is fairly standard practice. The reason behind this is that the endpoint represents access to the whole collection of circles. To specify a specific circle, you‚Äôd just append it‚Äôs ID to the path /api/v1/circles/78 This path points to the circle with ID 78. 2) The other thing I noticed was your use of HTTP verbs. So far, it looks like you‚Äôre using GET to do everything, such as creating new shapes. A very important part of the RESTful philosophy is that it embraces using verbs in a very clear and consistent manner. For example, this is a pretty typical use of verbs: POST - Used to create a new resource. In your case, the resource would be a shape. GET - Used to retrieve a resource or list of resources. GET should never modify a resource. PUT - Used to update/replace an existing resource, such as changing the radius. DELETE - Used to delete an existing resource. So if you combine the endpoint pattern from point 1) above with the verb usage of point 2), your API starts to take on a very straightforward shape. For example, when creating a shape, you would do something like this: POST /api/v1/circles POST /api/v1/rectangles The body of the POST request would contain the information you currently pass in the path, such as radius or side length. This is typically encoded as a JSON object, but could also be XML. Retrieving your resources could be done as such: GET /api/v1/circles This would return a list of every circle in your system, again likely encoded as JSON. GET /api/v1/circles/78 This would return the circle with ID 78 as a JSON object. PUT /api/v1/circles/78 This would replace the existing circle with ID 78 with a new circle. The body of this request would be similar to the POST request. For more information, I find this site to be a decent reference: https://www.restapitutorial.com Well, I hope this helps. Good luck, have fun, and keep learning! 
Thank you sir. I was giving thought to renaming it using 'validation', as you suggest. All the same, as I stated, I plan on writing a REACT app to consume the API, which of course is off-topic for this subreddit. That said, it appears your suggesting or recommending I do that validation either in the UI itself or at the controller level?
Thank you. I'm still digesting your reply...but something occurs to me reading it. You suggest that an existing shape can be retrieved using an Id. Such functionality goes beyond the scope of my app. The only purpose is to retrieve a new shape given the supplied parameters. What you're suggesting, I think, are ways to expand on what I've already done. Which is fine :) The version though is a point well taken.
Just as a side note, I noticed that you are performing a lot of rounding when doing calculations using `Math.Round`, Is there any reason for this? Effectively speaking, rounding means that most answers will be, well, wrong. So, unless there is a specific reason why rounding is desired, it is something you should not do, especially when this is not clear anywhere and it is not specified as a parameter of the API, etc.
1) Not if it isn't self describing. Probably. No one cares really, we've moved on from that era. 2) Why doesn't ShapeException inherit Exception? It's not an exception. It's validation. Move the validation into the shapes so you don't have 8 different validations in this one class. Change ShapeException to be an exception, or just throw a generic exception. Again, this is a "stuff has moved on" type of thing. Specific exceptions are valuable, but keep it light. 3) IShape has no value. SerializeShape does nothing you'd want to mock in a test and as only Shape implements it, doesn't achieve anything. All the shapes have an Area I guess, so that would be a better inclusion as an example. See below for more. In program.cs you have a bunch of IShapes. Again, this serves no purpose here. Once a circle is an IShape you can't read its circumference for example. So if the only goal is to serialise something, just pass Circle or Rectangle to Json.Net and you get the same result. The serialise method adds no value. Square is not a specialisation of a rectangle as it violates Liskov's substitution rule. It is literally the most common example of something violating it ;) I'm not keen on embedded types, so I'd move the enums out of rectangle. You probably don't need them anyway as it leads to fake subclassing using enums. On enums, I always start them with "None". This is its default value and if you've not actively set it, that should be a warning that perhaps there's a bug. Your unit tests are a nightmare. Sorry to be so harsh, but I can't reiterate this enough. Do not copy and paste your unit tests. You have a bunch of identical methods. Remember DRY. Unit tests are hard to write, just as hard as the application code, probably harder. Anything true of "real" code, e.g. DRY is true of test code. You could probably do with a factory of some sort. Add a class that can make any of the shapes. Use that to simplify the tests. Perhaps add an IOval and IRectangle (Yes I know what I said about Squares ;) ) so that at least you've got two surfaces against which you can test. In this case I'd probably add a GeometryMaths class which encapsulated geometry maths. This is not how OO stuff is taught, but it flattens the object hierarchy significantly. Just add a static class called GeometryMaths and add methods like AreaOfACircle. The point here is that, like with the actual Maths class in the framework, these calculations are not specific to your classes. They're universal truths. If later you need to know the area of a circle, you don't need to instantiate a circle to figure out its diameter. Merry Christmas :)
That's fair. I struggled a bit early on which data type to use (decimal or double)? And so I may have ended up leaving behind some unnecessary operations. That said, like the Google search function that does a similar operation, it too returns only an approximate answer using ~ and must too be rounding the final answer.
Even if you have validation in the UI, there should be some validation at the controller level, just to avoid invalid cases when the API is called using means other than the UI (which, unless you have a specific way to prevent, will inevitably happen). I understand there is no database behind this API, but usually, validation is intended to preserve data consistency and filter out invalid or undesirable input as well as bad values being injected into the database.
Thanks. I'll take your suggestions to heart. The best thing for me to do may be to apply them to future projects. I don't want to get bogged down in one app. I need to keep moving forward. This was really my first 'serious' attempt at unit testing, and so your criticisms are likely valid. You're right, I left behind some code in Program.cs. I need to yank that out.
That is fair, just make sure your API documentation mentions the fact that all your calculations will be rounded for brevity and that should take care of it. Decimal is usually a data type intended for handling money, although, not exclusively (it is just a convention). In this case, probably double is the best data type to use.
Really there are only two instances the API would send back and invalid value if no validation took place: 1. A zero parameter was supplied 2. Providing rectangle's perimeter that is equal to or less than a side (in which case you have a line, not rectangle) Really, those were the only two cases I came across that needed validation. As an API can be consumed by any theoretical UI, I feel like validation should happen just prior to being sent to the API, such as in the controller.
Well, the controller is the API. (maybe you mean the React controller?) Those two cases that you mention should return HTTP 400 (BAD REQUEST) and not even reach the controller, actually. They should be handled in a filter before-hand and that way your controllers can assume that the data that reaches them is already filtered to be good.
How did you generate the swagger documentation (and more specifically the dropdown menu on the right?)
Its Electron or no app at all from a lot of companies. You dont have a choice. And there arent a lot to miss from native apps.
This is probably using something like [Swashbuckle](https://github.com/domaindrivendev/Swashbuckle.AspNetCore)
The link you provided appears to return a valid shape, just with a name In Chinese? How is this unintended functionality? I was under the impression that using URL parameters (?name=name) is not particularly RESTful? It is true to say that as is, it isn't *self* documenting, I agree.
yea he's talking CRUD stuff where you Create, Read, Update, Delete resources using an API. your API is for calculating. the way you did it is fine. i don't know why you need a shape name but overall the API is fine. i would just shorten the params to /name/length/width, etc.. didn't look into the C# stuff
This is true but it is not like I should be happy about the falling quality especially when a native app is being replaced by electron.
&gt; its the most loved language on stack overflow survey That's not even true. I checked and the Stockholm syndrome only managed to push it to position 7.
The only reason why I think is unintended is because a lot of data is sent to the server and then simply echoed back to the user, without performing any real operation in the API with it; additionally, all this data that is sent to the server and sent back has no limit, you could send megabytes of information on that parameter without any validation or limitation (the only limit is the size of the URL), making the job of a DDoS attacker much easier. In general, it is not a good idea to receive user-generated data without setting some limits on the size and type of data that is sent and it is not a good idea to simply echo back this data unless this serves a very specific purpose.
Sorry I forgot .NET Standard and .NET Framework aren't the same thing. What do you recommend?
Also, there is nothing "unRESTful" about URL parameters, you just need to make sure to use URLs the way they are intended to be used. URLs are intended to identify resources and resources are intended to be unique, which means that the same URL should always access the exact same resource. For more information on what a valid URL is, this is the documentation for a URL template: https://tools.ietf.org/html/rfc6570 Everything that is documented there, is, therefore RESTful, since it follows the specification on how URLs are supposed to work.
That's a fair point and I can certainly look into a hard upper limit on the values sent and returned.
Who calls it C hashtag?
It was indeed. Found simple instructions, was relatively pain and hassle free.
In England we call it C number. 
Satan. 
That's Funny üòÇüòÇüòÇ
Yeah, each project gets better, you learn a bit each time. Nothing you did was awful, but it can be better. The fact you asked for a review is huge and should propel you forward quicker. Seriously, it's a brave move and I respect that enough to take some time to critique. 
Yes that's correct
Checkout fluent validations FluentValidation.AspNetCore it will clean up those data annotations in your controllers. also look at Mediatr, i use it in a project to cleanly separate Domain/Application layer and other layers like persistance, presentation, and infrastructure layers. 
Since I plan on writing a REACT UI to consume the API, you seem to be suggesting I handle the validation there, and take out any suggestion of validation in my C# code? As I had planned to use REACT from the start, my [ASP.NET](https://ASP.NET) MVC project is really only a controller. There is no view or model. I did this intentionally. So I understand, where precisely does the validation code belong?
I'd recommend going back and implementing some of the feedback. It's useful to go through refactoring exercises, because it will help cement the ideas. 
Yes its fine. Phones are starting getting 12gb of RAM (new Lenovo, after Oppo 10gb) and you cry about 500mb. Hello world is 50. You know who needs to fuck off? Microsoft with broken ideas like UWP or pushing wpf and winforms on net core and rejecting any pull requests to make them cross platform. In order to survive Electron they had to bring cross UI years ago, and they preferred to do failures like UWP. Maybe they saw that desktop isn't worth fightning for because everyone moved to web and mobile? Electron is saving your precious desktop apps from extinction and youre just ungrateful. And dont get me started on Avalonia, this project will spend decades before releasing 1.0 and will never see big production usage. 
I usually wouldn‚Äôt go that route in web development. IMO it‚Äôs best to only load what the client can see at any given moment. Otherwise you end up with potentially longer load times for data that the client may not ever see before they navigate away. Is the query so slow that it is an issue loading the data when the user navigates between profiles? Maybe consider reviewing the query, rather than trying to account for that slowness client-side?
C plus plus plus plus
Canada checking in. "C Pound" here.
Removed: Rule 4. Try breaking the problem down into smaller parts. You can dive into help resources in the sticky, sidebar, /r/learncsharp, and /r/learnprogramming.
Removed: Rule 4.
I had an electrical engineering professor call it "c pound" way back in the day.
Removed: Rule 7.
Ok sorry
This is a great motivational post for those of us that are skill building in a sea of talented experts. Thanks for sharing!
Are you implying that one of those two people pronounce "C#" as "C Hashtag"? Because that would be hilariously false. 
D flat 
I like C octothorpe
I'm calling it D flat from now on.
Only a fool would call c-pound-symbol 'c-hashtag'.
Learning how to learn programming is itself a hurdle :) My [2019 Learning Plan](https://github.com/Zamdrist/learning-plan/blob/master/plan.md) (I hope) features some hard learned lessons.
Is there a public API for this reset? I would love to be able to call it when idiots insist on one DBContext per web request.
&gt; Is this a proper RESTful API? Doesn't matter. Seriously, that doesn't matter in the slightest. What we define as a "REST" doesn't actually work. There's no HTTP Verb for "search" or "submit order" so we have to (badly) repurpose GET and POST. When you do an update, does the ID column go in the URL (REST standard) or the body (where your ORM needs it)? Or both, making you check the duplicate data to see if it matches? As long as you can generate a Swagger contract, don't worry about REST and focus on useable/understandable. 
epic
You should target netstandard üòâ
My *we* you mean *you* right? Never heard a Brit call it that
that's actually one of the reasons they named it C#
Idiots.
By my you mean by, right?
I don't know what you're talking about
SQL
Meme format
... Do we ?
In England we use we to mean I. So I don't mean you, but we.
The form is made up of about 6 or 7 different sections that each needs a separate query to fill. I suppose to could do a huge join query. But I prefer keeping all of my code organized. It's easier to find out which query went wrong instead of which *part* of a singular convoluted one. 
Since the data is sequential and if it‚Äôs used that way (meaning no random access etc) CSV would work. But if you want to do any querying using a database would be a lot better. You can go for SQLite if you want just something small inside your application and don‚Äôt need to set up a database server. You‚Äôll just tell it to create a file, add the table definition and index(es) and off you go. If you want to go for something larger and learn more about databases, go for PostgreSQL. It‚Äôll force you to learn things properly, is probably the most standards compliant and handles everything you throw at it. 
Didn‚Äôt read it all, but why use this instead of hosted services in asp.net core?
During our c++ class. Our c teacher started pronouncing cout as "Kout". The expression we're priceless when a student corrected, "sir on page x it says it is pronounced as see out". I was that student.lollz
Thanks for the reply. This is great. I did another project with sql and learned all about it. Had no idea sqlite was a thing. I'll check it out!
It's pronounced cash-tag.
Programmers should call it C plus plus plus plus, because thats what it is
In this instance you want "Do I". The rules are complex. Be careful though. If you mess it up and say "I do" that's a contract between you and someone you may not wish to spend the rest of your life with. [..](https://en.wikipedia.org/wiki/Number_sign)
I don't know. I never cared enough to check how they do it or the actual performance gain. I read it in a blog post about new features in EF Core. They didn't go into details. I saw minor performance improvement for free and believed them that they would reset properly as long as I don't hold an instance or maintain my own state in the context.
That's actually why I said it
Ah I see what you mean. Separating the BL from the DAL is a matter of preference TBH. IMO you will not see much benefit when the project is small. On the other hand, when a project starts growing, it's cleaner to me when they are separated, especially if your BL and/or DAL get more and more complicated. The web ui project I mentioned is essentially just a front-end framework app (e.g. angular) and not an asp.net webapp. It also depends if your ui and/or api have different addresses or not.
Front-end devs just love it when the front-end project is just static files but in practice it is very beneficial to merge the two. You can have a couple of server driven pages like login which do not benefit from being a SPA and will result in reduced bundle size and also you can render a bunch of common things on the page in advance like the current user info and avoid some API calls
I see. I thought you meant like an indeterminate number of profiles that the user can navigate through and you were pre loading. It seems like you‚Äôve got the right idea conceptually with shared code via a user control. Sounds like they‚Äôre not initializing correctly for some reason caused your null reference errors. It‚Äôs hard to say why that might with just what you‚Äôve said
Interestingly enough, I‚Äôm both. 
Build a world and then say hello.
r/technically the truth
No there is only 3 or 4 profiles at once per page. It's very limited. Its good to know I have the right idea. Do you mind if I share my code? It's a super basic thing just to test this approach. 
*C numbour
(c++)++
Sure, send a link. Though I can‚Äôt promise that I will look at it today as it‚Äôs a holiday :)
Cis
A recruiter once asked if I knew C-pound.
C addition operator addition operator thank you.
Definitely need to test. Both for caching effects and whether or not it actually improves performance. I remember with EF6 the performance degrades rapidly the longer a DBContext is used. 
As a developer and musician, this has been my go-to joke for years.
The classic: http://www.charlespetzold.com/blog/2014/12/The-Infamous-Windows-Hello-World-Program.html?1
The blogpost had some tests but they felt artificial. I mean I don't see how creating dbcontext can turn into any form of bottleneck.
Well looks like meme gone viral! 
I think you might be overdoing it a bit. Read the book quickly doing the exercises. Then find a pet project and work on implementing it. As you get stuck go back to the book and reread the applicable sections to get yourself unstuck. The examples in the book are great but they are no substitute for applying what you‚Äôre learning to your own work. 
Millenials
Absolutely. Ill get back to you about it. You're awesome
That's actually why he actuallied.
This is great
Increment operator* 
Lol, that's a real subreddit :) Well that's the next hour gone :D
Actually...
No m8 thats what the french call it
I will call it this, forever! 
How many clients do you have? How much customization are you willing to support?
What about separating clients by schema? Is this viable?
Nope, it‚Äôs c-hash ;-) seriously though, it irritates me when I see # referred to as hashtag. It is called a hash-tag because it has the hash symbol, it isn‚Äôt a hashtag symbol. Rant over, C-sharp rocks! :-)
Coctothorpe
This would be way funnier if I had ever heard of anyone calling it C hashtag. (OTOH, I‚Äôve never seen Germans call it [Cis](https://de.m.wikipedia.org/wiki/Cis-Dur) either, when they probably should.) That said, because we‚Äôre still in the medieval times when it comes to keyboard input, C# is almost invariably spelled with the wrong character. [It should be C‚ôØ:](https://web.archive.org/web/20060214002638/http://msdn.microsoft.com/vcsharp/previous/2002/FAQ/default.aspx) &gt; The ‚Äú#‚Äù is not the ‚Äúhash‚Äù (or pound) symbol as most people believe. Rather, it is actually supposed to be the musical sharp symbol. However, the sharp symbol is not present on the standard keyboard, so it‚Äôs easier to use the hash (‚Äú#‚Äù) symbol. The name of the language is, of course, pronounced ‚Äúsee sharp.‚Äù
That switch expression syntax is a little over my head
Came here to say this in alarm. Thank you. &amp;#x200B; I feel like "C Hashtag" is something brogrammers would say.
This was a major problem/consideration at my prior workplace. We didn't plan ahead for this issue and it bit us in the butt in a major way. We started out with our research database and the proof of concept sprang out of that. Our software grew up out of a single database and since our original research didn't concern itself with dilineating between clients or locations or organizations, so it just never got baked into the architecture. Fast forward a few years of presentations and sales pitches. We have some clients signing on. Questions about if we just "copy the whole thing" and wipe out the ephemeral transaction-oriented data (my suggestion, quickest route) or walk back through the tables, adding an organization identifier for everything they want custom per-client. The owners did want to be able to query across all clients for aggregate data trends, so if we were per-database, there would need to be distributed query support. My initial attempts to solve this problem involved "shipping" event data back and forth between a master reporting instance and individual client transaction instances. This involved some strange overhead tooling, so it wasn't super... clean. I since left that company but they've asked me.to do some consulting about a year later. Wouldn't you know it? They merged the client instances and added an organization id everywhere. TL;DR: tradeoffs. Tradeoffs everywhere.
I currently maintain the single schema/db/tennantId model and it is really easy to make updates. I dont have to be afraid that some users have old schema while others are already migrated. On the other side it is a pain when users call support and ask to restore data they accidentally deleted. If you are hosting on Azure try googling for sql elasticpool. It is a combination of both techniques, altough limited. There might be other similar alternatives but I never researched it.
"If you call it Cool, you're an old school". - Said me, like *ms* ago.
I'm puzzled why do programmers use musical notes
C pound bro!
The specific concept in question is similar to that of Discord and Slack in terms of working with users and groups. 1 user can be part of multiple groups. In theory we need to be able to handle millions of users and perhaps 1/10 of our users in groups. Our main concern is scalability, development complexity/time and performance in terms of query times. Customisation is a nice to have that we would like to be able to support within reason down the line, but it isn't of major importance to the core concept.
It might be because there's no control named "Tablet" + i.ToString(); I can't say because I don't know what controls your form has.
C plus plus plus plus 
Really appreciate the write-up! If you could go back and re-do everything from scratch, which architecture would you go for and why? How many users/clients was the system handling/supposed to be able handle? Do you know why they changed back to a single database? Did they find the "database per tenant" architecture too complex?
Jesus, yes
No one wants a 4 hour live talk. It's like being the +1 who doesn't know any of the people at the table, or the language they're using. Find your own path, base it on what you want out of life and understand that the sooner you start on that path the easier it will be later. My shortlist would be to challenge yourself mentally, immerse yourself sexually and be kind to everyone who isn't trying to hurt you. Start planning a path through your next five years. It's tough. Really really tough to do which is why few do it. Start now.
&gt; 1 user can be part of multiple groups. That's the easy part. Have a separate "login" database that just handles user profiles and passwords. You can replicate that to your messages database or databases as needed. 
How many groups? And are people paying for them? This is important because you have to pay for each database. That won't scale to thousands or millions without a lot of effort and a corresponding amount of hardware. 
It‚Äôs a joke about the language name. C# and Db are the same note, the name changes depending on the key you are in. 
&gt;If you could go back and re-do everything from scratch, which architecture would you go for and why? I'd definitely do single database for simplicity. &gt;How many users/clients was the system handling/supposed to be able handle? This was a highly-specialized system with no more than a handful of administrative users and a handful of data entry techs concurrently. The largest aspect of scale was mostly post-entry, the relationships between data points. &gt;Do you know why they changed back to a single database? Did they find the "database per tenant" architecture too complex? That was really it. The "database per tenant" model seemed like a simpler implementation path in the short run but having to bubble out schema changes to all the instances (and match code changes to whatever version of schema the database was on) was a headache and the setup of separating the "common data" from the "specialized data" was, in retrospect, more time consuming than just adding a foreign key to 50ish% percent of our tables.
Postfix increment operator*
&gt; we‚Äôre still in the medieval times when it comes to keyboard input, The compose key was invented in 1987 and is perfect for this task.
And yet almost no computer you‚Äôd run a C# compiler on has that key. 
&gt; How many groups? And are people paying for them? It's a freemium model with subscription based payment for additional features inside the groups, which means people will be able to create groups free of charge initially. In theory we would like to be able to support hundred of thousands of groups internationally, maybe even millions in the future. &gt; This is important because you have to pay for each database. That won't scale to thousands or millions without a lot of effort and a corresponding amount of hardware. With Azure elastic pools the costs of "database per tenant" should be manageable, but the development complexity higher and still more costly than a single database, but one of our concerns is that a single database architecture will hurt scalability and performance in the future if we end up with millions of users, millions of groups and billions of rows, but we don't know for sure if that would be a problem with a single database structure. &gt; Have a separate "login" database that just handles user profiles and passwords. This is what we did for our sketch of "database per tenant". We basically had a catalog database which kept track of all the users and which groups they were part of and then each group was their own database.
Immersing sexually is probably the one thing I'm doing right. Lol I'm thinking on getting a MS certification. Is that something worth of it? I know for sure .NET (Core) is the framework I should be using in the long run, so it seems the next step. 
I think Hangfire.Io may be helpful for you. 
That gets me in trouble when I say allow #metoo. For me, "pound" was always said in the ye olde phone phreaking world of party lines 
Not by default, but WinCompose exists (and is always installed on anything I use for more than ten minutes because not having something like that would be like living in the medieval times of keyboard input)
**AKCHUALLY** 
**MILLENIALS ARE KILLING PROGRAMMING**
**MILLENIALS ARE KILLING PROGRAMMING**
Scaling across more than one machine. This is where message brokers like RabbitMQ or Kafka come in.
Ironically, the first person I heard calling it C# was a musician trying to get into programming. I think his confusion was that the actual sharp symbol‚ôØis skewed differently from an octothorpe #
RedditSharp has a lot of issues. One of the biggest (for me) was that it's impossible to iterate through the comments of a post if there are more than 500. 
Good point. 
r/keming
Actually...
The original specification does use the sharp symbol.
Yeah, but he had no way of knowing that. 
Before I learned how to code in college I thought it was C pound
Some other reasons, not all of these will apply to all use cases. * Persistent, If you need to say schedule something in a few hours time for example it's not sitting in memory. * Logging with dashboard built in allowing you to see failed jobs. * Retry functionality built in. It's also a much more convenient library to use as you can just call Schedule/Enqueue with whatever you want. That being said you could easily shoot yourself in the foot in a micro service architecture or even having hangfire on another server if you're not careful. I've experimented with a simple extension of MediatR allowing me to send any command in the background which is extremely convenient and powerful.
Awesome, I will stop taking notes then, I didn‚Äôt know if it was the right thing to do.
I vote for SQLite for speed, but that is not just my opinion But this article contradicts for this author's tests https://www.researchgate.net/publication/316132763_BENCHMARKING_POPULAR_OPEN_SOURCE_RDBMS_A_PERFORMANCE_EVALUATION_FOR_IT_PROFESSIONALS_BENCHMARKING_POPULAR_OPEN_SOURCE_RDBMS_A_PERFORMANCE_EVALUATION_FOR_IT_PROFESSIONALS/download
Use a phone camera to read the text, in French, using machine learning for OCR and translation. Write to a text file on a hard drive and order an AWS Snowmobile semi to transport the file to an AWS data center. Store the file into a load balanced Oracle data center spread out over three regions with multimaster replication. Write a second phone app in C#, deployed to iOS using Xamarin, that reads the value from Oracle via a Lambda backed with an API Gateway and then writes it to a Blockchain. Once the Blockchakn network achieves consensus, write it out using the camera flash in Morse code.
If it works for you then it‚Äôs the right thing to do. I‚Äôve just found that for me to really understand something I need to apply it to a problem that is relevant to me, not just a contrived example. The Gang of Four Design Patterns are a perfect example. The patterns in their book are powerful but often the examples are thin. However, once you find a problem in your own project that is solved by a design pattern it just clicks and makes sense. The same thing is true for language features like Linq/Lambdas, anonymous types, etc. Reading about them is a good introduction but actually using them is when they start to ‚Äògel‚Äô. 
If it works for you then it‚Äôs the right thing to do. I‚Äôve just found that for me to really understand something I need to apply it to a problem that is relevant to me, not just a contrived example. The Gang of Four Design Patterns are a perfect example. The patterns in their book are powerful but often the examples are thin. However, once you find a problem in your own project that is solved by a design pattern it just clicks and makes sense. The same thing is true for language features like Linq/Lambdas, anonymous types, etc. Reading about them is a good introduction but actually using them is when they start to ‚Äògel‚Äô. 
Nobody
Sure it's not chashtag?
You mean the royal ‚Äòwe‚Äô. On the contrary, one should not call it C number, unless one is a baguette.
Yeah, I‚Äôve been meaning to give that a try.
Its c-pound actually
I've always been of the opinion that the *character* of the music changes depending on which key you use, even when the keys are enharmonic equivalents. Although "identical", C# and Db *can sound different* to the ear. They shouldn't. Their scales, when played in isolation, *don't* sound different. These two *are* enharmonically equivalent: C#, D#, E#, F#, G#, A#, B#, C# is the same thing as D‚ô≠, E‚ô≠, F, G‚ô≠, A‚ô≠, B‚ô≠, C, D‚ô≠. This is the answer you should give on your theory test, so... what gives? A performers' perception of the key informs their performance; what they read on the page does *not* occur in a vacuum, isolated from the performance they give. This isn't to say that "sharp" keys are usually performed "higher" and "flat" keys are performed "lower", because the instruments are (presumably) in tune. What I mean is much more subtle and almost unconscious; the *perception* of the key leaks into the *performance*, at least on instruments that are subject to microtuning at the time the performance is given (winds, strings, and brass). Instrumental performers playing instruments in those three families can't escape that. Vocalists (and especially opera singers!^*), on the other hand, *don't even have to know how to read music* and are thus probably immune, and pianos, harps, percussion, and electronics are by definition *completely* immune from that influence. That's not the only reason you'll see D‚ô≠ major instead of C# major, of course. Depending on the instrumentation, some keys are easier to deal with than others. I wouldn't want to play a piece in, say, A# minor, but I might not quibble with something in B‚ô≠ minor. There are technical reasons for this, too; it helps to use only one accidental (an *accidental* is a sharp or a flat not in the key signature) in compositions. For example, you don't want a bunch of flats appearing in a sharp key, or vice-versa. Note that *none* of this is "bad". ^*I ^have ^it ^on ^very ^good ^authority ^from ^a ^D.Mus ^that ^until ^very ^recently, ^within ^the ^past ^fifteen ^years, ^opera ^students ^(specifically ^at ^Indiana ^University) ^were ^*not* ^required ^to ^be ^able ^to ^read ^sheet ^music.
Why does /r/chashtag not exist?
Not really what I meant. I was referring more to the rule of thumb of not using the same letter twice in a scale. 
Octothorpe is not what it‚Äôs actually called. That was a joke made up by people at Bell Labs. It‚Äôs basically the pound symbol or hashtag these days.
I just prefer the word when talking about the symbol itself. I think Pound is the most accurate because of it's history but goes get confusing for people used to ¬£. I'm also uncomfortable with hashtag because I feel like I need to refer to it as the hashtag *symbol*. It's the same reason I avoid calling it the "number sign"
Do you have any example of that MediatR code? I love that little library and what you are describing sounds incredibly useful to have in the toolbelt.
This hits way too close to home.
Is there ever a case where netcore is preferable to netstandard? 
Actually...
I'm a musician and I hear the young ones are starting to call it hashtag instead of sharp :/.
Something like fizzbuzz enterprise edition. (look at it on github)
I thought I was the only one annoyed by this !
take [this](http://asiajin.com/blog/2009/09/22/uroboros-programming-with-11-programming-languages/) and make the last step "generates a C# program that outputs hello world"
There are some good ones here... http://helloworldcollection.de/
I think there is a difference between being "dedicated" and being "obsessed", and it seems like perhaps you see people who are obsessed and are mistaking it for dedication, and wondering if you lack it. 
:) Seriously having a partner is a huge benefit to your state of mind :) The certifications are a bit weird, but they do provide a path through the material. It's possibly useful for the first or second job, but I don't know anyone that has an current MS certifications. Good luck :)
C octothorpe
I used to call it C Hash when I was in college. Had only seen it being mentioned online and didn't know it was called Sharp until later. 
I don't think that's the same thing man. It's not one letter looking like something else. It's just combined words. 
It should definitely be c octothorpe
Hello, I am quite new to Reddit Community. Hope you like above Memes please do follow I am sure I will bring you more lucrative posts.
I'm just starting out with Xamarin, and I haven't coded for a while, but certainly for me learning MVVM while I learned Xamarin made me want to tear my eyes out. Personally I think MVC makes more sense. 
I tried changing the target in the csproj files to netstandard2.0 and I ended up getting a ton of compile errors throughout the models. It could take awhile to sift through all that so I'm just gonna set this one aside for now in the interest of time. If you or anyone else would like to take a stab at it in the meantime and do a pull request, that works, too. =);
Looked up in Form1.designer and the buttons are named "Tablet" + i.ToString()
Have you tried placing several breakpoints? Can be useful for narrowing down to the actual problem.
I have red 70-80 and did percent of the examples in C# in a Nutshell. one thing you have to keep in mind that it is a reference book, albeit one with good examples. It doesn't intend to be a course or learning book trying to teach programming. So the first thing to evaluate is whether the thing you need is to sequentially read c# in a Nutshell. I don't think you need that. Inspect the chapter structure to get an idea about the most important topics you lack knowledge in and focus on those. Dont take txt notes. If i take notes than i do it inline in pdf. The notes you take should be in your head by knowing about the existence tbc from desktop.
&gt; Also snippets like this don't really give me faith in it. In Reddit.NET, handling of REST non-success returns and JSON errors occur in different layers. The model layer handles the REST stuff. Here's a relevant snippet: if (res == null) { throw new RedditException("Reddit API returned null response."); } else if (!res.IsSuccessful) { switch (res.StatusCode) { default: throw (RedditException)BuildException(new RedditException("Reddit API returned non-success (" + res.StatusCode.ToString() + ") response."), res); case 0: throw (RedditException)BuildException(new RedditException("Reddit API failed to return a response."), res); case HttpStatusCode.BadRequest: throw (RedditBadRequestException)BuildException(new RedditBadRequestException("Reddit API returned Bad Request (400) response."), res); case HttpStatusCode.Unauthorized: throw (RedditUnauthorizedException)BuildException(new RedditUnauthorizedException("Reddit API returned Unauthorized (401) response."), res); case HttpStatusCode.Forbidden: throw (RedditForbiddenException)BuildException(new RedditForbiddenException("Reddit API returned Forbidden (403) response."), res); case HttpStatusCode.NotFound: throw (RedditNotFoundException)BuildException(new RedditNotFoundException("Reddit API returned Not Found (404) response."), res); case HttpStatusCode.Conflict: throw (RedditConflictException)BuildException(new RedditConflictException("Reddit API returned Conflict (409) response."), res); case HttpStatusCode.UnprocessableEntity: throw (RedditUnprocessableEntityException)BuildException(new RedditUnprocessableEntityException("Reddit API returned Unprocessable Entity (422) response."), res); case HttpStatusCode.InternalServerError: throw (RedditInternalServerErrorException)BuildException( new RedditInternalServerErrorException("Reddit API returned Internal Server Error (500) response."), res); case HttpStatusCode.BadGateway: throw (RedditBadGatewayException)BuildException(new RedditBadGatewayException("Reddit API returned Bad Gateway (502) response."), res); case HttpStatusCode.ServiceUnavailable: throw (RedditServiceUnavailableException)BuildException( new RedditServiceUnavailableException("Reddit API returned Service Unavailable (503) response."), res); case HttpStatusCode.GatewayTimeout: throw (RedditGatewayTimeoutException)BuildException(new RedditGatewayTimeoutException("Reddit API returned Gateway Timeout (504) response."), res); } } else { return res.Content; } Any JSON errors are parsed via the validators in the controller layer. Here's a snip: public GenericContainer Validate(GenericContainer genericContainer) { CheckNull(genericContainer); Validate(genericContainer.JSON); return genericContainer; } public Generic Validate(Generic generic) { CheckNull(generic, "Reddit API returned empty response container."); CheckErrors(generic.Errors); return generic; } // Exception thrown will be on the first error in the list. --Kris protected void CheckErrors(List&lt;string&gt; errors) { if (errors != null) { foreach (string error in errors) { switch (error) { default: throw (RedditControllerException)BuildException(new RedditControllerException("Reddit API returned errors."), new List&lt;List&lt;string&gt;&gt; { errors }); case "RATELIMIT": throw (RedditRateLimitException)BuildException(new RedditRateLimitException("Reddit ratelimit exceeded."), new List&lt;List&lt;string&gt;&gt; { errors }); case "SUBREDDIT_EXISTS": throw (RedditSubredditExistsException)BuildException(new RedditSubredditExistsException("That subreddit already exists."), new List&lt;List&lt;string&gt;&gt; { errors }); case "INVALID_PERMISSION_TYPE": throw (RedditInvalidPermissionTypeException)BuildException(new RedditInvalidPermissionTypeException(errors[1]), new List&lt;List&lt;string&gt;&gt; { errors }); } } } } One practice I wanted to get away from in Reddit.NET is the kind of manual JSON parsing that occurs throughout RedditSharp. All the JSON returns are mapped to custom serializable types in RDN.
Not for class libraries for sure.
for all values of i? set breakpoint on that line as [u/Testosternus](https://www.reddit.com/user/Testosternus) said &amp;#x200B;
Ahh ok, that makes sense. As I mentioned in my other comment, it blew up in my face when I tried to rebuild the solution after retargetting it to netstandard. I didn't look closely at the specific compile errors being thrown, but there were a lot of them. Do you know of any .NET Core to .NET Standard migration guide I could reference? It looks like I may have to at least partially refactor the code to do this, but you have convinced me that it needs to be done. I just need to figure out how. =)
To be honest you shouldn't do any migration but just change in cs proj from netcoreapp2.1 to netstandard2.0. If this goes wrong another trick might be to remeber that the new csprojs don't have any reference to files anymore as they basically perform a recursive list files and directories underneath. With this in mind, try to create new project in the same directory as the other one and see if that helps. 
If you don't need persistence and want to run a simple periodic job "inprocess", here is the working example with Tasks: public async Task Run(Action&lt;CancellationToken&gt; work, TimeSpan period, CancellationToken cancellationToken) { await Task.Run(() =&gt; work(cancellationToken), cancellationToken).ConfigureAwait(false); do { await Task.Delay(period, cancellationToken).ConfigureAwait(false); cancellationToken.ThrowIfCancellationRequested(); work(cancellationToken); } while (true); } &amp;#x200B;
Dont know why but my Buttons were in a panel and this was the problem. 
Its works without panel
but Thank you for your help :D
Just fyi the next Windows 10 update (1903) will have that functionality built in
What have you tried?
Xamarin uses XAML, which encourages heavy use of data binding, which fits the MVVM pattern better (by binding to properties on the ViewModel).
see #
Next someone will say C pound sign.
If you're doing xamarin.forms then MVVM is the way to go. It is extremely similar to WPF in how it's structured, and xaml binding are a lot easier with MVVM.
I just realized Right Triangle is flawed. Perimeter must be &gt; 2 times any one leg. :(
I don‚Äôt think it adds dead keys?
I always split classes with more than a few hundred lines of code total into multiple files. It makes navigating the code and getting to the part you want much simpler. Of course you would ideally use something like regions instead, but region support in C# IDEs is unfortunately very basic.
HTTP specifies a way to handle errors - response codes. So far your server always returns 200 OK code, which is confusing. You should consider using at least - 200 - operation successful, here is the result - 400 - operation unsuccessful, here is the error - 500 - something failed on server side, my bad, here might be some info
Visual Studio -&gt; Edit -&gt; Paste Special -&gt; Paste JSON as Classes
I started programming when I was 10 years old, grew up very poor and used to walk to the local library daily and I that is where I learned (C at the time); wont say I was a good programmer but it at least exposed me to it. When I was 14 I got access to my own computer where I self taught myself HTML, CSS, JS then PHP, then web server stuff, followed by networking... yada yada yada. The reason I mention all of that is this, you don't need school to teach you things. Just personal projects, which it seems like you have. You're on the right path, Unity + C# is amazing and very simple. Look into pluralsight.com for tutorials, other then that just keep working at it. Google every question and build your knowledge! 
netcore is implementation, so only if you target specific features of .net core. you should target netstandard by default. It allows you to use library on .net core, .net framework, UWP, mono and other implementations
&gt; But the problem is I want the app to switch proxies after a certain amount of time. Why?
What would a strongly typed config obj look like in C#? Are these just standard classes with properties or something else? Know where I could find an example?
Part of me hopes this is the start of this subreddit becoming a meme subreddit. 
Mvvm
Use a timer with a 30 second interval. Start the timer when the user clicks Start button. Stop the timer when the user clicks Stop button. Switch proxies inside timer's tick handler. See this for details: https://docs.microsoft.com/en-us/dotnet/framework/winforms/controls/run-procedures-at-set-intervals-with-wf-timer-component
They already are
I have a bot with around 1k servers in .NET, it used to be hosted on Vultr. They have cheap windows hosting, I think the cheapest tier was like $5 / month. Right now I'm hosting it on my home server but I'm planning on migrating it to Core and hosting it on a Pi, and getting some kind of deploy pipeline running.
C plus plus Cr/Lf Tab plus plus
If you want to make games using C# then you should start using Unity. It'll allow you to code in C# without building your own game engine from scratch. Look up Brackeys on YouTube. He is one of the big Unity YouTube channels and has some good videos for beginners. I think Skyoo would be a helpful channel too, although maybe less beginner-oriented as Brackeys.
MVC? why? 
My personal experience is with a shipping company that provides large-volume service to many clients, and every transaction is identifiable to the client it belongs to, and many of the processes are customized per client. At first, they wanted to keep their clients from knowing the other clients existed. They wanted 100% fool-proof separation of clients' data, so that a report for one client never showed data from another client. So we built onto that system for the better part of 7 years. And gradually, they stopped caring about the separation of client data and would rather have company-wide metrics. We ended up having to re-make a completely new design. But then they didn't want to cut-over to the new system, but instead, phase the old one out slowly. So we had to write *tons* of glue code and support both systems. 3 years later, we're *starting* to phase out the smaller single-client databases. (Their client count has doubled in those 3 years, though, so there are quite a few that never even had a database of their own.) I would 100% recommend an all-in-one-bucket database design with an ID to separate the data. And if the stakeholders are as paranoid about crossover-data contamination like the ones I work with were, I would recommend you just present them with one option: trust your client ID values. Databases don't make mistakes, and you're a professional developer and quite capable of handling clean separation on an ID value. There's no need to make an unholy clusterfuck out of it just because of a non-technical manager's gut feeling or nightmare scenario.
TIL!
I'll start calling it "Dee Bee".
It's called a [portmanteau](https://en.wikipedia.org/wiki/Portmanteau) or [blend word](https://en.wikipedia.org/wiki/Blend_word), depending on the use. Definitely not a kerning issue.
[5 years C-pound experience](https://thedailywtf.com/articles/5_years_C-pound_experience)
In german, we disagree... programmers don‚Äôt say ‚Äûcis‚Äú.
&gt; I've always been of the opinion that the character of the music changes depending on which key you use, even when the keys are enharmonic equivalents. Although "identical", C# and D‚ô≠ can sound different to the ear. You'd be wrong. As you alluded, they are identical in theory; in practice, performers don't have consistent reactions to keys--in fact, a seasoned performer's reaction to a key is usually limited to relief, annoyance, or indifference--and so there is no opportunity for a "character" to be developed for a key. So, while an individual performer may, for whatever arbitrary reason, perform a piece differently in Db than C#, that does not represent an aggregate character to the key.
Really appreciate you sharing your experiences! Very useful! So the main reason you guys made the switch to a single database was because development complexity? Has scaling been a problem with the single database setup? Do you know the ball park of how many clients and rows you were dealing with using a single database? One of our concerns is that a single database architecture will cripple performance if we get millions of users and/or clients and billions of rows, but we don't know if that will actually be a problem with a single database system or not as we don't have experience with such a system. We're running a freemium model so we have to anticipate viral growth for it to be a successful and sustainable business.
C octothorp
Bro you should have seen this class I instantiated it was totally gnarly man they had like 18 dependencies. Totes cray life in chashtag bro!
Dang it, that are bad news....
Scaling was a problem at first. The old one-per-client database setup required few if any indexes, while the all-in-one database required *a ton* of tuning to get it right. But once that was out of the way, it's been working fine. The client count was around 20 when we stopped making new client databases, and now it's around 40. That doesn't sound like much, but the daily transactional data can be anywhere from 50k to 1.5m rows for each client. Each client has anywhere from 50 to 3000 locations that receive freight on a daily basis, and each of those locations can receive up to hundreds of packages per day. Most of the database load comes from improperly filtered lookups, mostly bad date ranges, and from the stupidly overcomplicated configurations and business rules that some of the clients have. If you can enforce a common set of rules and have each client be just another record in a table in your system, you won't have the kind of performance issues we ran into, and you *definitely* don't need to split your system into multiple databases.
If this is a 2017 version project, the app.config is generated during build, and does not need to exist in your project anymore. Binding redirects are added automatically in the output. If it's an old style project, you have to enable binding redirect regeneration. And yes, these are probably needed.
The biggest concern when writing games in C# is the graphics solution. From my perspective there is no single 'defacto' graphics solution. For example, in WinForms you can take over all the rendering of a control (basically turn a panel into a canvas) by overriding the OnPaint Method and using GDI+ draw commands... but this is software rendered and has to use WinForms MessagePump (which is fine for GUIs but not so good for games). To spawn a window that gives you more control over the graphics requires that you use either DirectX or OpenGL.. which will in turn require that you know a minimum of either DirectX or OpenGL... but this will be 3d Accellerated and you will have full control of the graphics context. So... when I started programming I was able to use Basic which had native direct drawing routines... I mean... drawing a line was nearly as simple as drawing text. But for c#... to simply draw a line in a graphical window requires that you create a graphics context, define the geometry of a quad, use a Software rendering library to create an in-memory image, upload the image to the graphics device as a texture, then write, compile, execute a shader. So... the first thing I recommend is becoming proficient in general c# syntax and programming... Then goto: https://learnopengl.com/ You can keep the 3D graphics issues to a minimum by only drawing a single full screen quad with a strait passthrough Position/UV shader. Then you just need to use either GDI+ or some other Image lib like ImageSharp to draw the image and then refresh the texture. Once you've done that you'll be able to produce simple games... you'll eventually need to learn more 3d graphics... but you should be able to get some good experience before hitting a wall due to software rendering limitations. If you use Veldrid for the hardware excelleration and ImageSharp for the software rendering you can use .net core which will be cross platform compatible. (When using Veldrid you can force the use of OpenGL or DirectX backend instead of needing to learn both). https://github.com/mellinoe/veldrid Unfortunately there is no simple direct solution in c# to access graphics capabilities. Obviously there exists Unity, and xaramin and other tools... but technically these use c# syntax not strait up Microsoft Implemented C#... 
On Twitter $ is the cash tag for stock symbols
If you run the following command it will update the NuGet packages versions properly: Update-package -reinstall Update-package -reinstall &lt;package-name&gt;
If going with a single database, include the tenant id in every table and make it part of the primary key (composite primary key). That way when a foreign key value is inserted, the database will only allow it if the related record belongs to the same tenant (assuming you create foreign key constraints).
This is false. There exist bindings for OpenGL (OpenTK) and DirectX (SharpDX) which allow you to render just like you would in C++. Also MonoGame and similar frameworks like SDL and SFML (as bindings) are great for rendering. GDI+ is bad and should not be used in any new applications.
That makes a lot of sense, I actually decided to buy this book because I do have a good experience in C#, I just wanted to see if I was missing any small tips or tricks in the basic areas also, that‚Äôs why I wanted to read every chapter. Thanks a lot for the comment, I‚Äôm just gonna scam over the pages that I already know about and focus more in the ones that I have problems. 
I think you're going to hear plenty of stories like /u/lnkgeekdad and /u/TNMattH and not so many that praise individual databases. A single database is simpler to develop and maintain and cheaper to host. It's also easier to move from a single, shared database to individual databases than the other way around.
xamarin was **the worst** application development experience in my 15 years of development [here's a great thread you should read up on](https://forums.xamarin.com/discussion/89286/xamarin-sucks-lessons-learned-from-weeks-wasted) my experience with xamarin is that the brochure is great "write less code! cross platform! yay!" but as soon as you start building anything it falls apart quick.
.ToList()
If I'm following correctly, "parties" is an array. You need to specify the ordinal/index of the array first. parties\[0\].someproperty for the first, parties\[1\] for the second, etc.
You will need it iterate over the IEnumerable, or enumerate it into an array or list.
You are deserializing the json to Object. Object only had those methods that you mentioned. If you deserialize it to an object of a specific type you‚Äôll be able to access the properties and methods provided by that method. 
You're deserializing to Object which is less than optimal. You should create POCOs to represent your structure, then you can access properties via strong typing after deserializing. 
I‚Äôd create a type ‚ÄúParty‚Äù and write a conversion method which takes the item at index x and puts this as a value for the corresponding property on the Party type. This is of course if the item at a given index always maps to the same property.
There's no array or ienumerable on Object.
What is false? I did mention the ability to access OpenGL and/Or DirectX. I simply said that there was no simple native direct drawing that allows you to draw directly to the video memory like mode seven. SDL, SFML allow users to use directX and OpenGL more easily but it still requires knowledge of 3d rendering techniques. Stuff like Model, View, and Projection matrices, view frustrums, cameras... etc... stuff that you probably don't want to get bogged down researching when you are still just getting used to generic programming. There are still tasks that require software based rendering. And while GDI+ shouldn't be used because it is limited to windows, the other library I mentioned ImageSharp is purposefully extremely similar so it'll be easy to transfer to when moving to .net core. &gt;There exist bindings for OpenGL (OpenTK) and DirectX (SharpDX) which allow you to render just like you would in C++. Obviously because your are simply wrapping C/C++ functionality... I was comparing it to the ease of drawing in Basic with mode. What I was saying was that with some other languages you can have extreamly simple graphics interface... for SCREEN 13 LINE (16, 24) - (40, 30), 1 BF That is seriously all it takes to draw a line on the monitor using Basic... in c/c++ c# using whatever library you want to communicate with the graphics device is going to require much more boiler plate and prep.
The issue is that I have an entire database filled with "JSON"s that are not properly typed. They are just arrays of 0 and 1. If I could figure out how to access the values of the indices, that would solve my entire problem. I don't understand why I'm able to view the values in the properties of the object, but I cannot access them. I may not understand IEnumerable
Are the elements within the arrays at least the same type? If so you can just casts your json to a List or Array of that type. 
Are the elements within the arrays at least the same type? If so you can just casts your json to a List or Array of that type. 
Download the ASP.NET functionality using the VS installer. Copy the json you're deserializing. Edit &gt; Paste Special &gt; Json. This should paste your json strings as classes. Jason.Deserialize&lt;ClassRootObject&gt;(jsonstring);
Yes, just a standard class with properties. Very straightforward. 
Meanwhile over in the UK, c-pound would be written C¬£ üòâ
You can force a binding redirect update based on the packages you have using the command `Add-BindingRedirect` in the Package Manager Console. You can do so for the entire solution via piping like so `Get-Project -All | Add-BindingRedirect`. Keep in mind that you may still need binding redirects if one of your dependencies has a dependency on a different version of an assembly than your code does, and since we're among friends here we can just say it, it's probably `Newtonsoft.Json`. 
You likely wont have experience in every single framework/technology a job lists. This is true even for very experienced programmers. Just apply anyway. If you can show you have strong skills and the ability to learn that will make up for lack of experience in certain technologies. Also, many candidates do list technologies/frameworks on their resume when in reality they worked with it very briefly on one project and are by no means an expert.. but it gets their resume past the filtering stage. If you are seeing certain things pop up over and over you may want to familiarize yourself with it somewhat.
Public githubs are a good way to show experience. It does a couple of things: * Shows you have the ability to work within a project, using git, and understand how to scope your work and handle pull requests / merges. * You can show employers what you've done, which is actually hard to do when you work for someone who owns your intellectual property (the typical arrangement when you're an employee or contractor). * Shows that you actually care about writing software more than just making some bucks. As others said, don't worry about having experience with every framework, although some core ones are important. A good UI framework (React, Angular, etc), a good ORM (Entity Framework), and a good JSON handler (newtonsoft) as examples you'll probably work wherever you go. But being a good developer who has good practices and knows how investigate and understand new frameworks is super useful. Again, things you can demonstrate by your github work.
Bruh it was mad #recursive . Debugger was flipping out!
That doesn't really matter. You can still deserialize to List or IEnumerable or whatever.
What are you looking to learn to do? Build web applications? I‚Äôd look at tutorials for the .NET framework, follow them and build a basic site in it. If you do web apps you need at least passable knowledge in html, css, JavaScript. WPF is less common nowadays. Don‚Äôt worry about Angular/React/Vue.js unless you think they sound interesting but my guess is you‚Äôre very comfortable with c# already so .NET core or .NET MVC should be good enough to get your foot in the door as an experienced junior.
Well I figured out a way, which is probably completely idiotic, but it works. Thanks for all your help. object parties = JsonConvert.DeserializeObject(partyJson); Newtonsoft.Json.Linq.JEnumerable&lt;Newtonsoft.Json.Linq.JToken&gt; values = ((Newtonsoft.Json.Linq.JArray)parties).Children(); foreach(var val in values) { //do work } 
Just use JsonConvert.DeserializeObject, OP doesn't need JsonSerializer.
Without a formal CS degree, you most likely lack the fundamental knowledge that engineers will have about the field. I am self taught. I have been conducting technical interviews for 3 years now as a lead. Here's some topics I cover in interviews that are language agnostic: * The 4 fundamentals of OOP (and getting in depth on each one). * The Gang of Four's original design patterns (I usually leave out the obsolete ones). * Architecture patterns. This can be as simple as "tell me a stack you've worked with" or as complex as getting into microservice strategies (we're a microservice shop, it's it's apropos). * SQL, typically surface level just to demonstrate understanding of normalization but to sr devs I also will include the CAP theorem and ACID stuff. * SOLID principles \*\*\* I ADORE the SOLID principles and I typically write off any engineer who doesn't know these. * O notation and some basic questions on it. * version control (git) [The Imposter's Handbook](https://bigmachine.io/products/the-imposters-handbook/) is a great way to start to fill the gap. From there, you can look into some Uncle Bob books like [Clean Code](https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882). I would suggest reading a book like Imposters Handbook then diving into the subjects he touches on in depth if you want to learn more. Many of those topics you'll find information on for free, like algorithm history and building. I've been in interviews that go both ways: very broad and very specific to a framework you're being hired for. It really depends, but getting the basics down is so very fundamental to this career. With the understanding of those things above, you can learn a new language very quickly. You can write clean, maintainable code that employers will value. I hire based on SOLID and design patterns because I want PRs that have clean code in them. I don't want the next person to inherit a mess like I tend to inherit. Without a BS on your resume, the red flag is in these areas. Anyone can follow a tutorial and write code. Coding for companies is a different game because there are many people working on the same thing at once. This cooperation and common vision and insight is the hardest quality to find in a programmer.
Good shout. I probably use JsonConvert myself. I just set up a serialization wrapper class for JSON and XML so I don't really remember the actual code. The main concept I was trying to cover was being able to paste JSON as classes. That little technique is a lifesaver.
Deserialize directly to your desired type, skip the cast. var myValues = Jsonconvert.DeseriliazeObject&lt;List&lt;string&gt;&gt;(serializedThing);
You might try plural sight, it's got tons of c# courses. It's paid, but you get a free week (remember to cancel). Can't remember if they offer discounts for students but you can always email them and ask. https://www.pluralsight.com/
Nice, thank you.
Is working on other open source projects a good idea? Will that have any impact
Thank you, very informative. Yes its true that I dont have a degree, I hope that I might be able to get one in the future but Im short on time. I have been practicing using the SOLID principles for a bit, Ill try to read up on the other things you mentioned
Ive worked in Web Development and SQL but Im no expert so there is no mention of that in my resume. Should I add that?
I have experience with web development but as a personal preference I dont want to pursue that path
Without a doubt, the Hello World of the Shakespeare programming language.
Nice Job dude.
Signing up [here](https://visualstudio.microsoft.com/dev-essentials/) includes three months of pluralsight (free).
So are you looking more into game development? You probably need to be a bit more specific for genuine advice rather than guidelines.
It sure will, it's a public way of building experience and showing your work.
Nice find!
Another way to do this sort of thing is to use generic methods to parameterize the implementation, then use adapter structs that provide the sync and async semantics. This is what the .NET Core SslStream implementation does. See here: [https://github.com/dotnet/corefx/blob/a10890f4ffe0fadf090c922578ba0e606ebdd16c/src/System.Net.Security/src/System/Net/Security/SslStreamInternal.Adapters.cs#L18](https://github.com/dotnet/corefx/blob/a10890f4ffe0fadf090c922578ba0e606ebdd16c/src/System.Net.Security/src/System/Net/Security/SslStreamInternal.Adapters.cs#L18) Note that the "adapter" types are structs, thus (a) no heap allocation and (b) the JIT will provide different concrete instantiations of the generic methods for each struct type (sync and async), so no virtual dispatch at runtime.
The usage of that code is written as necessary for the async pattern and thus the blocking code will suffer the performance penalty that is the async overhead. https://github.com/dotnet/corefx/blob/a10890f4ffe0fadf090c922578ba0e606ebdd16c/src/System.Net.Security/src/System/Net/Security/SslStreamInternal.cs#L226 Note that what the SslStream implementation is doing is the lowered version of what the [Shapes proposal](https://github.com/dotnet/csharplang/issues/164) seeks to support in a future version of the language. The Sync versions can fulfill the pattern expected of Async by providing no-ops for the additional calls (`return Task.CompletedTask` will make `.ConfigureAwait(false)` basically do nothing). In all this is great for new code. It doesn't really help an existing old codebase though. 
If you're using Xamarin Forms, MBC makes no sense because XAML supports View Model binding. This has been a thing since WPF, when Microsoft "invented" MVVM, more than 10 years ago. If you're doing Xamarin Native, check out [MVVMCross](https://mvvmcross), it makes using MVVM a breeze with all the helpers and, maximize code reuse via ViewModels. Even Native Android and iOS developers are starting to use MVVM. For me using MVC in Xamarin is like fighting the Xamarin framework. 
Everything in Xamarin is like fighting the Xamarin framework :) I was using the other mvvm framework, it's name escapes me at the moment, but with the lacking of documentation I found of 'do it like this' figuring out how to do simple things across boundaries was just excess learning. I'm not saying MVC is more 'right', but am relaying the experience I had trying to fight both Xamarin and MVVM - jesus, just picking a framework to layer on top of a framework which allegedly supports MVVM is a bit silly. 
While this is a nice exercise to use Roslyn to transform code, I am not sure if there real world applications would be that easy. Usually just changing existing method signatures and calls to those methods to async ones will do nothing since none of that modified code would yield the call. So your execution would still be synchronous. The minute you call some true async methods that actually yields, the flow of your program completely changes thus requiring a good amount of testing to ensure there is no reentrancy issues, deadlocks etc. This is especially true if your program has some UI. At that point overhead of code changes would be smaller I suppose.
I should have posted this in my initial reply, because today (literally 5 hours ago) I converted my non-mvvm experiment to MVVM. The master branch is the non-MVVM "as compact as possible" version, the one and only feature branch is the MVVM version. See the Core [FormsTinyCalculator project on Github](https://github.com/rogerwcpt/FormTinyCalculator/tree/feature/mvvm). Adding a ViewModel meant I could separate behaviour and business logic from my view very easily. View is just for presentation markup.
I'm currently building a blog where i would like to explain in detail primarily because a lot of Hangfire related posts/documentation are very much /r/restofthefuckingowl material. in the meantime: public interface IBackgroundMediator : IMediator { void Enqueue(IRequest request); void Schedule(IRequest request, TimeSpan delay); void Schedule(IRequest request, DateTime time); void Schedule(IRequest request, DateTimeOffset time); } public class BackgroundMediator : IBackgroundMediator { private readonly IMediator _mediator; private readonly IBackgroundJobClient _backgroundJobClient; public BackgroundMediator(IMediator mediator, IBackgroundJobClient backgroundJobClient) { _mediator = mediator; _backgroundJobClient = backgroundJobClient; } // Delegating members public void Enqueue(IRequest request) { _backgroundJobClient.Enqueue&lt;IMediator&gt;(m =&gt; m.Send(request, CancellationToken.None)); } public void Schedule(IRequest request, TimeSpan delay) { _backgroundJobClient.Schedule&lt;IMediator&gt;(m =&gt; m.Send(request, CancellationToken.None), delay); } public void Schedule(IRequest request, DateTime time) { _backgroundJobClient.Schedule&lt;IMediator&gt;(m =&gt; m.Send(request, CancellationToken.None), time); } public void Schedule(IRequest request, DateTimeOffset time) { _backgroundJobClient.Schedule&lt;IMediator&gt;(m =&gt; m.Send(request, CancellationToken.None), time); } } You don't need to extend IMediator, that's just for convenience so i don't have to inject 2 mediators. This requires the `services.AddHangfire()` extension method to work(as it sets up the JobActivator), there's a nuget package doing similar for most containers it seems. the generic Enqueue/Schedule method tells hangfire to resolve IMediator from the JobActivator/DI Container.
Here's a sneak peek of /r/restofthefuckingowl using the [top posts](https://np.reddit.com/r/restofthefuckingowl/top/?sort=top&amp;t=year) of the year! \#1: [Rest of the fucking doggo](https://i.imgur.com/rRmGHCe.gifv) | [92 comments](https://np.reddit.com/r/restofthefuckingowl/comments/7n2muf/rest_of_the_fucking_doggo/) \#2: [Draw the rest of the fucking rose.](https://imgur.com/vngvAOm) | [76 comments](https://np.reddit.com/r/restofthefuckingowl/comments/8o3vei/draw_the_rest_of_the_fucking_rose/) \#3: [‚ÄúNow add bits to the bird‚Äù - from my 5 year old‚Äôs school book](https://i.redd.it/16dvt7k170u01.jpg) | [168 comments](https://np.reddit.com/r/restofthefuckingowl/comments/8ermit/now_add_bits_to_the_bird_from_my_5_year_olds/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
That's entirely the point of MVC as well, they are just two tools to do the same job. MVVM just makes it much harder to break the pattern. My point was more about the way MVVM is wedged badly into Xamarin, even forms, which has a very lite framework. The navigation with a DI container? Ungh. Let's do a string dictionary, grrrreat pattern. 
This, this this. Don't reinvent the wheel, especially when you are new.
I sent a message but is there a better place, like a snippet site, to show my code?
Hey man. I can look at it tomorrow. If you have a github account you can make a private Github Gist and use the share link. I‚Äôm sure there‚Äôs similar things on other sites but that‚Äôs what I usually use.
No problem. Sure I'll do that. I'm sure it'll be easier to look at. 
Alright, all set here. No rush. Just let me know what you think when you're able. https://gist.github.com/Amish-Jukebox/2cb42eb09fbc2b427b2648470f6976ad
Ok but how do I pass the parameters to *that* class without the same verbosity we have now? Seems like I'd just be moving them from one ctor to another. What am I missing?
you want to be using \`dynamic\` keyword and \`ExpandoObject\` type from reference DLL \`System.Dynamic\`. i don't have a copy of VS open, but something like \`var parties = JsonConvert.DeserializeObject&lt;List&lt;dynamic&gt;&gt;(partyJson);\` Then you can \`foreach (dynamic p in parties) { ... }\` ... though honestly from your specific example, it's only making an array of arrays of strings inside the JSON, not an array of objects... you might be able to get away without dynamics... \`var parties = JsonConvert.DeserializeObject&lt;List&lt;List&lt;String&gt;&gt;&gt;(partyJson);\` is perfectly cromulent and should be handled fine if it matches the underlying data.
Man I‚Äôm terrible at interviews like that. I forget everything the second I‚Äôm in one, or I always get stuff mixed up. I definitely prefer a code challenge style interview where you provide a code example and then go over it with someone rather than essentially an oral college exam. But I think both have their places. 
Removed: Rule 4.
Hey would you say you'd look down on someone with a degree in Software Development instead of CS? Currently majoring in S.D, and I know it's not gonna be an issue for most employers, but interested in your take on it.
Post it on /r/coolgithubprojects too if you like. that sub really needs more c# projects. 
A week ago a guy in my class called it "C Raute" (rhombus) üôà
Thanks!
Will look into it
i think making the graphics is not the hard part for me, from what i understand, basiclly you need a texture, which you place and give it colliders, physics and all sort of other things, and i have good knowledge in photoshop, so making the textures will be no hard task (at least that's what i hope)
Companies do not hire based off the tittle of a degree (up to a point... a degree in archaeology... no) Reality is that CS degrees can have course content that is very code 'lite' or have way too many ICT components. If they know the institution the degree comes from, they may presuppose things. The quality of graduates is all over the place, the course content of a degrees can be all over the place. No company will get choosy of a degree tittle.
I would recommend [Pro .NET Performance](https://www.amazon.com/Pro-NET-Performance-Optimize-Applications-dp-1430244585/dp/1430244585) and [Writing High-Performance .NET Code](https://www.amazon.com/Writing-High-Performance-NET-Code-Watson/dp/0990583457). You could also find great resources from [https://github.com/adamsitnik/awesome-dot-net-performance](https://github.com/adamsitnik/awesome-dot-net-performance). I hope this helps. 
&gt; Adding a ViewModel meant I could separate behaviour and business logic from my view very easily. View is just for presentation markup. That's true of all the MV* paradigms ‚Äî MVC, MVP, MVVM, VIPER, ‚Ä¶ They all agree that a scalable GUI app architecture strongly benefits from separating the view and model. The disagreements lie on: * what _mediates_ between view and model? * where does code for 'everything else' go? In MVC, the answer to both of those is "the _Controller_". Depending on your concrete framework (ASP.NET MVC, Cocoa, ‚Ä¶), the actual responsibilities and capabilities of the controller may differ a fair bit. In MVVM, the answers are: 1. explicit mediation is avoided as much as possible in favor of binding portions of the view to properties in the _ViewModel_, which in turn provides a representation of the model that is suitable for the view. 2. code for everything else is supposed to be entirely separate from any of the three. For example, where in MVC a controller could directly communicate with a database, that sort of code doesn't belong in a view model.
So you want c# to be go...
Would these books be interesting for someone with intermediate programming but minimal security experience?
Not going to lie, these types of interviews are insanely boring and easy; you just memorize a bunch of acronyms and regurgitate them at the interviewer. It's why most successful tech companies have coding and design interviews.
What is this? Never heard of this stuff before. Got any links?
https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/how-to-enable-and-disable-automatic-binding-redirection
It's not limited to 2017, it's been a thing for a while. But you are correct that if you have an "old" project, you will need to turn on automatic binding redirections on the csproj. You should be able to do that in Visual Studio (2017) by looking at the projects properties (literally the properties pane, not the Right Click &gt; Properties document)
Could you send one 32 bit value at once? This would need a bit of bit shifting to get everything in, and some shifting and XOR tricks to get out but would mean you just send one value. I'm on mobile app can't really check out right now, but if I'm correct you'd shift the value in line `someInt = someInt &lt;&lt; value`. Getting it out would be something like XORing with a bitmask that matched the value you want, for example 0xFF000000 for the first byte and then shifting it to the right by 24 bits. 
The people I knew who actually called it that were really nice and reserved people. I think they called it that because you understand how its written when spoken that way. They also were less familiar with C#, which I think factors in.
Very long yield return method.
A resume is not the place to undersell yourself. Sounds like a good way to fail an interview by not even getting one. Don't lie, but don't omit. 
In a rpg/mmo everything happens in the world or relative to the world (aoe weapon effects, player/npc location, etc) So it‚Äôs not a god object if you truly need it. 
If you are trying to have the application in system tray, a WinForms application would likely be the easiest.
Perhaps the most important principle in software development is the 'single responsibility principle'. Every class should have one responsibility and do it well. This also applies to larger and smaller concepts too, functions, variables, and web services. &amp;#x200B; You can detect that you are violating this principle and may need to consider refactoring, when you class requires too many different dependencies, your method is very long, your method is multiple levels of nested code blocks (multiple loops, if-statements, try-catch). Does the class have to reach inside another class, get a property of that class, then reach inside that object and manipulate something? If so, you've probably just violated SRP. someObject.GetProperty().GetSomething().SetSomething() // reaching into an object this deep most likely violates SRP &amp;#x200B; I don't think there is anything necessarily wrong with every object in your simulation having a dependency on the world. But, I think when those objects have to reach into other objects through the world object, then it sounds like you may want to consider how to pass those dependencies directly to their corresponding objects, or publish and subscribe to various simulation events to decouple. 
I hold interview differently, first is a chat not a test really then if they are capable on the cv and can communicate well with us, a practical test the next day which they are given time in advance to prep for. Make something straightforward from a requirements doc. Should take an hour or two but from those two meetings I've always found good devs. They haven't always had college degrees either but they work well and question everything from the basic principals up which is great.
Use dependency injection and the "World" object goes away.
How to send message to all objects? If it's game: how to send message to all soldiers/armies? Should be some general dispatcher: World, Environment... /never coded games
If I were in your shoes, I would split this "world" into zones. Each zone can have an ID that you can use to look up in a database things like, "what is the atmosphere like", "what kind of monsters spawn in this area", "what does the map look like", "where is the terrain asset file for this coordinate". The "world" should simply be an adjacency matrix of each zone. You could have a method that says that says, "ZoneDetail GetZoneDetail(int zoneId)" and another that says, "NonPlayerCharacter[] GetNpcsInZone(int zoneId)". The NonPlayerCharacter class would contain their coordinates. &gt; World implementation is not huge or complex, mostly references and very little functionality. I'm passing it as reference for convenience as it's references are valuable for other classes. No project has ever started out as a complex monstrosity. Managing your complexity with early design is how you prevent that. &gt; Is this one form of God object syndrome, where in the end basically everyone is referring to world object? Application state is normal, but hardcoding it into your source is bad.
Yes!
In one of my projects I use what I call a "context" object and I pass it around literally everywhere. There are maybe 50 classes in this project that perform evaluation operations. Each one is some type of operator. They all have an evaluate() method accepts the context. The context describe, in your words, the current world under which the evaluate() operation is taking place. It always has a reference to the top level world object. It has some information about the person doing the thing. And sometimes it has information about the direct parent. When one evaluate() calls another evaluate(), it lets it know via the context that there is something extra to do. In this case I am building an html representation of the evaluate flow.
&gt;/never coded games Give it a try. I keep meaning to throw together a little dungeon type game in my free time, just to explore various things &amp; patterns, and to break out of the monotony of 15 years of enterprise application dev.
Sounds like the observer pattern. You could have the classes subscribe to the dispatcher and the dispatcher would be responsible for sending messages to the observers.
If you use the [Actor Pattern](https://www.developer.com/design/down-and-dirty-understanding-the-actor-model.html) then you can send messages to all of the actors. It is a model which fits nicely in games.
"World" implies it does more than message dispatching. Why not pass in an `IMessageService` instead?
Well, you could use something like a message bus that allows objects to subscribe to message types they're interested in, or provide a way to search/query the objects you want to send a message to.
Thanks! This is question I'd have asked next as well and messaging between classes is big reason for world class being referenced all around
That sounds like a nightmare to maintain to be honest.
&gt; 7. Doing away with try catch I haven't heard anything that sounds like that. Do you have a citation or something to explain what you're talking about? I don't expect they'll add any variety of implicit interface implementation, though I suppose it's possible they could add a way to simplify building small adapter types for such a purpose (it might be a reasonable extension of the shapes/extension anywhere stuff). Would be more practical to get something like the explicit member and constructor constraints from F#, I think.
if to remember about Erlang or Go - actor model can help a lot here, I suppose.
I love go and c# was my first language. So I'm not saying it's a bad thing. If anything it's wonderful. But it's weird... Well they are not getting rid of try catch but they implemented a new way of doing it and well you know that's gonna be the new way. I didn't mean to say all these are unique to Go cause they are not and Go doesn't own Tony but.... Kinda convenient of them now to presume all this.
I'm currently try to implement different algorithms of maze generating (as home/hobby project to learn C#, because I'm not C# dev). It's funny and I did a lot of errors. I think today it's very difficult to create a game. I have not experience with Unity, Unreal and IMHO it's not easy to create all of this art (maps, characters, landscapes, etc).
I'm not even planning on using Unity. Just a simple console app in C#. I'm actually planning on doing it in .NET Core so I can start to pick up some of the things in that. Things I'm interesting in implementing are: * Rooms * Items in the rooms that the player can collect into an inventory * NPCs that exist in rooms, and later challenges you can do with the NPCs * The items might even have attributes that are useful later * Some way of navigating between rooms (so a Room class has a collection of Door classes? And a Door class has references to the Room classes that it connects? And then some way of allowing the Player to use the Door class to transition their current Room) * Menu system for launching the game * Building out a "level" and serializing it to JSON or something, so the game can hydrate it's World with a pre-loaded level
it's very good idea: to involve limited number of recipients in message sending. For example, collection of targets (eg, characters) can be sorted by distance to event origin and message will be sent only to close characters, that saves resources.
This fits well as it's more abstract simulation I am going for (think football manager). World object is basically a communication hub now when I think about it bit further. 
Thanks for concrete example. I'm certainly walking the line in this case and am afraid it will bite me in long run. 
Is it going to be a game built on pseudo-graphics (like ncurses) or something like MUD? If first, then why do you avoid to use some graphic? May be something simple, 2D/sprites only? Today there are a lot of interesting and beauty pixel-art Indie games.
No mention of Async streams? Recursive patterns? Switch expressions? Target-typed expressions? It sounds to me like you need to read up on what C# 8.0 has to offer.
It sounds like it fits your implementation quite well then. In the Actor model it's common to pass a reference to the "Communication Hub" into each Actor when they are loaded. The Actor uses that reference to call SendMessage(). The Hub object also keeps a reference to each Actor so that it can call their ReceiveMessage() function.
I believe most of the inspiration for C# 8.0 features came from F# and Python (Mads has mentioned Python conventions for slicing)...not from Go. The warnings about null references have been available to ReSharper users for years.
I don't mean to be disrespectful, but that sounds like a really bad design. You're passing around the entire state of your program, but each of your evaluators probably don't use the entire context. This means that if you wanted to change the context object, you'll have to look at all 50 classes to ensure that it didn't break any of them. Additionally, there's no guarantee that any of those 50 classes didn't have an unintended side effects on downstream evaluators. For example, does passing the context from evaluator1 to evaluator2 all the way to evaluator 30 actually work? Have you written any tests for this project? It sounds really challenging to get decent code coverage on this. 
Yes. And web apps behave even differently since web.config is run from it's location during development. So, for THAT to work, the redirects have to be added to it directly. They cannot be generated in output during build. Funny enough though, it actually can be configured to generate the redirects anyways during build. They just end up in the bin/ directory, which is useless for the running app. &amp;#x200B; I ended up with post-build steps to incorporate those auto changes into my main web.config project on build.
All that will come later I guess. At first it'll just be pure text, like MUD. All I want to get down to begin with are just the underlying parts of the engine, keeping in mind that later on I might change the interface. Speaking of pixel art Indie games, I've recently seen Return of the Obra Dinn, that looks amazing for such simplicity.
No
&gt; Well they are not getting rid of try catch but they implemented a new way of doing it and well you know that's gonna be the new way Which one? 
Nulls *are* problematic, even for inexperienced programmers. If we can ease the path for ‚Äúincompetent‚Äù programmers (that might know more about programming as in it rather than dealing with inconveniences in languages), we can eliminate a whole class of errors and allow them to reason on the real problem to be solved rather than littering the code with null-checks. And, come on, would you like if your program blows up in your *customer*‚Äôs face because a `NullReferenceException`? The more we can prevent this, the better.
The fact that C accepted null as a valid pointer value was one of the reasons C++ added reference types to it.
Unless you are deadset on a console app, you should use MonoGame. Or, at the very least, use Winforms to create a console-like UI. The native console window is very difficult to work with, especially when resizing the window. This is alleviated by creating a form that looks and feels like a console window by using a fill-docked rich text box control with `Consolas` font. You can easily prevent resizing the window as well. MonoGame on the other hand is a framework for developing games. Note that MonoGame is **not an engine** like Unity/Unreal/etc -- it wraps a lot of the lower-level rendering logic and provides a simple architecture out of the box (like game loop, service locator, components, etc), all wrapped up in a convenient consumable API. I usually ignore the "service locator" and "component" features the API provides and roll my own, though.
If you want responsive apps, learn reactive programming and ReactiveUI, it is a great MVVM framework. 
&gt; Do you have a citation or something to explain what you're talking about? Seriously: I have heard *nothing* about a 'new way' of doing exception handling. What are you referring to?
Thanks! Do you have any experience with the SerialPort class? I still can't figure out how to set the individual byte to change each corresponding value.
Today it's easier than ever to create a game, since the technology keeps getting more convenient. Just don't set your sights too high at first. Stick to 2D and use simple art. Try PyGame Zero or L√ñVE.
I'll keep MonoGame in mind - all I'm after is a dead simple engineering exercise at this stage. Think of it as someone wanting to build a compiler, or a CPU emulator with it's own machine language for shits and giggles. As I get into it and find out the bits I'm finding difficult to implement, I'll have a greater appreciation for the features that MonoGame no doubt provides. Hell, I don't even have a story at this point :D
This is very exaggerated if OP is looking into getting his first developer job. IT'S NOT HARD. MVC pattern, C\# itself, Asp.NET, basic frontend and sql is what you need to know to get a job. None of our senior developers could tell you about the Gang of Four patterns or solid principles without refreshing their brain by googling them. Sure some fresh out of uni grad will have everything memorized for no reason other to tell the one interviewing them. 
its*
If I were you, I'd just keep using the "world" object for now. Avoid adding new functionality to it, though. Take your time to understand why you are using it. After a while you may see a better way of handling it, that's the time to change things. The risk of changing things prematurely is that you might waste a lot of your time and energy overarchitecting, i.e. adding abstraction that doesn't end up improving the project or even gets in your way. If your modules are pretty much just reading static data from the "world", that's usually very safe. Shared static data is fine, and it has to be kept somewhere. What I would watch out for is if you have different modules of the simulation making changes in the world object. Changing shared state creates a lot of complexity. You want to avoid this. [Game Programming Patterns](http://gameprogrammingpatterns.com/contents.html) is a pretty good resource, check it out. In particular, for your needs see the chapter called "Decoupling Patterns". I also like the book Game Coding Complete by Mike McShaffry, which describes how to implement a message-passing architecture. (I know you said you're doing a simulation, not a game, but simulations are very much like games except for their purpose.) 
nice troll
This sounds not very different from using global variables.
I agree with this, I'm currently in the process of ripping out a context object from a large project that I own, as it's caused a lot of issues and made maintaince difficult. It's annoying to have to pipe information to where you need it all the time, but a context object is not the solution.
Sorry, I should have been clearer, these are just language agnostic questions. Of course I do coding/design portions. My interviews last about an hour, only 15-20 minutes of which are these kinds of questions.
Try unit testing your classes and see if you hit any problems. Often a good trigger for improving the design of your code, is when you find that your code becomes hard to test. Often when you violate Single Responsibility, you'll find that you need to inject more moqs into your code and that some logic which you want to test is 'too deep' and difficult to test edge cases. If you refactor to fix these kinds of problems, then you'll find that your code design will automatically start becoming more modular, self contained and maintainable. Hey, and you might even find bugs in the process :p 
I made an edit. I think coding exercises are great. I have solutions I give the interviewee and we complete them together. For example, one is "build a crud restful api for this class", another is bug finding. Another is code cleanup (more for Sr level). My point in this post was to highlight what a self-taught person is probably lacking. Anyone can code. There are a million tutorials to write a few hundred lines of something to solve for x. Fundamentals help you go so much farther than different incantations of fizzbuzz.
&gt; (I usually leave out the obsolete ones). Care to share?
I wouldn't either, I hold those synonymous. Perhaps the robots that scan resumes before humans do might have a particular bias, but if you put enough targeted words in your resume that were from the job posting, you'll blow through those stupid robots.
Yeah I feel you. I do the same thing. This is why I use MonoGame and not Unity when I want to have a little fun developing a game instead of enterprise apps. MG basically abstracts what I consider the "not-so-fun" parts like having to write custom shaders using HLSL (though MG supports it) or making calls directly to DirectX or OpenGL. MG doesn't give you most of the fancy tools Unity provides -- for example, you'll have to write up your own collision detection system. Even MG is overkill for a text-based game, though I'd still suggest going with the Winforms + console-like form for text-based games.
There are extensive tests as well as external test tools to test the correctness of the entire application using thousands of randomized data sets. Firstly, you are *not* passing around the state of the program. The state of the evaluator is determined by the instantiation process, not the evaluation of a thing. Additionally, the context isn't as big as you think it is. The context only holds what is needed for evaluation - the thing being evaluated. Besides, C# uses references. But yes, one evaluator calling another can use the context to pass required information. Operators need operands after all and there is only one method signature for all of the evaluators. That's what makes this elegant.
As far as I know this tool "Armdot" is able to verify the keys?
You can use websockets on app service, they are just disabled by default 
see reply https://www.reddit.com/r/csharp/comments/a9z8wb/god_object_or_not/eco2yk8/
Except global variables have side effects. Context does not.
Ah that makes sense! I misread your original comment it seems. I‚Äôm also self taught but it seems I would need to prepare specifically for an interview since aside from design patterns usually no one ever talks about high level CS degree stuff except in high level architecture meetings unfortunately so I never hear about it. That‚Äôs one of the crappy things is when people ask you about it you need to go furiously research it and hope you found good resources lol. 
If typeof (context) is the same for all evaluators, I'm having trouble seeing the perfect situation where an evaluator doesn't have too much information. Additionally, if the goal is for each evaluator to mutate the state of the context, I would still insist that is a bad design. No matter what, you have to question every evaluator if there is a bug where something is getting mutated every single time. I'm guessing those external tests are pretty expensive and harder to design. I've done stochastic testing before and it is a great way to say, "Well, this will eventually find an error", but once you put that test suite on a build server, someone will just call that test failure a flaky test and you won't see any value from it. Because you have 50 evaluators and they mutate the same context, that's a permutation problem. 50! / (50-50)! = 50! actual tests are required before you can be confident of all possible evaluator orders. Your thousands of randomized tests won't find a bug before the heat death of the universe. Even if only 5 evaluators are allowed at a time, that's still 50!/(50-5)! = 254,251,200 tests to know that there isn't a bug. Assuming you have 10,000 tests running and the full external test suite executes in 3 minutes, you'll need 522 YEARS of constant test suite execution before you would know if there were bugs involving the order of execution. 
They don't mutate the context in the sense that they change anything "world" or "thing". They can only alter what is required for evaluation by something else, and provide results. So that's not really a concern. Nor do I think it's a concern for OP.
The .NET Core source code disagrees with you. [NamedPipeServerStream.Unix.cs](https://github.com/dotnet/corefx/blob/master/src/System.IO.Pipes/src/System/IO/Pipes/NamedPipeServerStream.Unix.cs) [NamedPipeServerStream.Windows.cs](https://github.com/dotnet/corefx/blob/master/src/System.IO.Pipes/src/System/IO/Pipes/NamedPipeServerStream.Windows.cs) 
There's an important term in dependency injection that far too many people have forgotten: "Composite Root". Mark Seemann writes, Mark Seemann: In my opinion, the most important attribute of a DI Container is the composition aspect. A DI Container should be able to compose even complex object graphs based on auto-wiring. Contrast this with the (false) meme of 'building a container in 15 lines of code". That has nothing to do with composition, but rather the idea that a DI Container is a sort of dictionary of services, which again leads to the Service Locator anti-pattern. This is why the composition aspect is so important. Fortunately, all DI Containers I've ever seen (apart from Ayende's 15 LoC 'container') support auto-wiring. 
In my game I have a global GameState and I also have SceneStates. The GameState holds data that relates to the game overall. The character that the player is playing as, the location the player is at, score. The SceneState contains the information that is only required for the current scene. Player Health, local position, enemy mobs, local terrain etc. You don't want a single monolithic God Object... but you do want a single source of truth. So, it wouldn't be bad to have a single object that you query for state information... but you would want that object to reference game specific data stores. For example my gamestate object contains a IDictionary from string to object. This way any game can populate and query any type of data from the gamestate which is available to access from anywhere in a Game, GameScene or System.
Looks elegant, very much looking forward to the blogpost. I will definitely play around with this.
Cheers, I think is great piece of advice. It's still just a hobby project I dedicate occasionally some time for, so what I ended up doing is drawing information from all the posts, implementing some quicker approaches mentioned here and seeing how it evolves. I feel I understand my own architecture better now, and have more tools to steer it to right direction. Lots of great stuff in this thread. Oh and it is actually a game I am working with, or if you consider something like football manager a game is a personal opinion. Familiar with gpp from past, will reread what you linked in my current context! 
Good stuff! Core logic is quite testable, but I do see more edge cases creeping in that are requiring extensive mocks.
That‚Äôs all the convincing I need ;)
Listen to the Cancel-key-press and then just stop your service. https://docs.microsoft.com/en-us/dotnet/api/system.console.cancelkeypress?view=netcore-2.2
How would this work in a docker container? Ultimately this process will be deployed through that method, but you can't really interact w/ the docker console.
Inject a `IApplicationLifetime`, e.g. https://github.com/meanin/dotnetcore-service-sample/blob/master/src/Core.Service.Sample/ServiceHost.cs
In Docker it should work already. Docker will send a SIGTERM signal, which should be handled.
Sure, for C# I would probably only include Singleton in this category. Others might disagree, but I think with dependency injection being defacto, singletons aren't created on the class-level anymore but via the IOC container. 
you can have a communication hub, to send messages around. It has nothing to do with the world. Get rid of the world while you still can! use an IOC framework to help you manage references.
I doesn't call the StopAsync or anything. I tried adding: AppDomain.CurrentDomain.ProcessExit += HandleExit; But that event fires right away, resulting in the app stopping right after being started. I'm not really sure what to do differently here. The docker container stop method always hits the timeout mark, so it's not correctly stopping the process.
Agreed.
Android app development is like this. Basically, to do anything with the API, you need a 'Context' reference.
Your site looks awesome. Who designed it?
I'm guessing OP might mean exception filters from C# 6.
That seems likely. I was really hoping they'd explain, though.
but exception filters are the same try/catch blocks, not "a new way". 
I‚Äôm curious why this one is never in the running. Is there a limitation on the db with respect to scaling? This sounds like a balance of security and cost since cross Schema is unlikely and you‚Äôre not creating a new dB.
Thanks!
Yea not enough buzz words for me to throw on a resume yet. Thanks for the response !
 Cursor newCursor = new Cursor(myCursorResource); You can lookup online all the different ways to make those! So you could make a transparent one and just setup a custom cursor for yourself with that. 
Minor (well actually major criticism). Hope you read through this, internalize what I'm saying, and change the way you interview. /cc /u/throwaway-8088 Please take this is constructive feedback with regards to your interview process (I hope you'll rethink how you conduct them after reading this unsolicited rant as opposed to digging your heels in and defending your position). I'd be happy to continue the conversation over DM if that's something you are open to (but again, it'll take a bit of humility/self-reflection on the fact that you are really really off base with regards to the advice you've given... I'm also fine with an "agree to disagree" stance). &gt; Without a formal CS degree, you most likely lack the fundamental knowledge that engineers will have about the field. Realistically, most C# gigs (line of business applications) are pretty much CRUD applications with validation rules and data processing. This stuff really doesn't need the level of CS knowledge that (for example) is required to build a compiler or operating system. Emphasizing things such as Big O notation or really anything from Gang of Four is well... pretty unnecessary. &gt; SOLID principles *** I ADORE the SOLID principles. Again, please please take all of this as a means to give you some constructive criticism. SOLID really is a broken approach and isn't ubiquitous. Specifically, the language you use frames what one considers "valid" SOLID and "invalid" SOLID. For example: - If I were using F#, a class with a getter _and_ a setter would be a violation of SRP (mutation is a responsibility that is elevated in functional languages). - If I were using Ruby, ISP is a complete non-sequitur since it's a dynamic language (the same issue exists with DIP... the concepts simply don't translate and aren't as highly lauded as in C# because these techniques are provided implicitly/naturally by the language). - Even within C#, LSP is violated in every C# ORM I've ever used (especially Entity Framework) and is further exacerbated with the abuse of mocking frameworks for the sake of "unit vs integration test". The criticisms of SOLID go on and on really... &gt; complex as getting into microservice strategies There are so many nuances to this. Again (generally speaking with very broad brush strokes), in the context of CRUD + validation LOB, developers have a horrible horrible tendency to complicate and gold plate solutions without understanding the fundamentals of these architectures themselves. The reality is that we're bored, and want to learn something on the job to pad our resumes. I understand this is more of an emotional response, and I'm more than happy to go into the more objective aspects of microservices over DM if you'd like. Using microservices, containers, the next new hottest framework JS framework is more so dictated by rhetoric over logic. &gt; We whiteboard pseudo code We work on a computer and in an IDE. The environment is usually highly optimized/tuned. We have access to Stack Overflow, Google, and aren't being watched by a group of devs judgingly from the other side of a table. This just doesn't reflect anything real world. &gt; version control (GIT) The most senior devs stop at `git pull`, `git add -A`, `git commit -m` and are not in a position to facilitate any kind of verification of competency. &gt; very specific to a framework you're being hired for Emphasizing vocational skills keeps this cycle of resume padding going among developers. IMHO, interviews should be about the character of the person. Are they sane and do they historically shown a propensity to learn and grow? Once that is verified, send them home with a coding problem _within_ their wheelhouse, and analyze the results of the exercise to see if they fit the level of developer you need. Anyways, just my two cents on this whole thing. Whenever I walk into an interview with this format, it's a huge red flag and I end up challenging their vetting approach altogether. Sorry again if I offended you in any way. I just feel it's really really important that /u/throwaway-8088 sees that everything you've in an interview process should be taken with huge grains of salt. Aside: There's always some form of posturing that occurs with this kind of criticism (usually with a "who's this guy think he is" sort of reaction). My username is the same across the internet. Google me if you need an appeal to authority. TLDR: Your interview practices are not great. Please stop putting people through this type of theater.
I've replied higher up in this thread. Don't worry so much about SOLID (imho).
https://docs.microsoft.com/en-us/dotnet/api/system.string.-ctor?view=netframework-4.7.2#System_String__ctor_System_Char___
 var newString = new string(answerArray); or var newString = string.Join("", answerArray); or var sb = new System.Text.StringBuilder(); foreach (var c in answerArray) { sb.Append(c); } var newString = sb.ToString(); or the same thing (ab)using LINQ: var newString = answerArray.Aggregate(new System.Text.StringBuilder(), (sb, c) =&gt; sb.Append(c), sb =&gt; sb.ToString()); And there are probably other ways to skin that metaphorical cat.
I'm guessing they meant exception expressions from C# 7.
I have a VR desktop app (Virtual Desktop) where Windows acts as if I was using a touch screen. And when Windows receives touch input, it hides the cursor. I would assume (without having seen it in action) thats what "Project IRIS" does too. So if the hidden cursor overlay doesn't work out, you could look into [how to simulate touch when you don't have a touch screen](https://www.telerik.com/forums/testing-without-touchscreen).
The link is broken again.
If you used Write instead of Writeline, then the foreach loop would have worked, but yeah, just use new string(array)
Newbie question - what's an old-style project, exactly? 
New 2017 based project files are incredibly short. They're really called "SDK projects". The `&lt;Project&gt;` node at the top specifies an SDK package which brings in bunches of defaults. Basically, you can have a working .csproj file with one `&lt;Project/&gt;` line. "Old style" just means everything before that. Where .csproj files were long. Recorded every file. The assembly names, namespace names, all of it. Huge.
Just remember your classes should be depending on the specific objects they need. While you can get at them through the world, you should have them explicitly passed in. If you end up doing world.bar.baz, that means you should probably be getting bar or baz passed in as a parameter. You can look up the Law of Demeter. World isn't necessarily a God object, but it can become one if everything depends on that rather than the specific objects from World that they need.
Just typed your exact title into google with " C#" on the end and the first result had the answer complete with an example console app showing it. Nothing against you at all- I was a beginner to and am still learning all the time but you'll be much more efficient if reddit posts aren't your go-to.
It almost sounds to me like your world object should be dependecy injecting dependencies into the lesser objects
https://discord.gg/98bqPuq try this one 
Provide sane defaults for all parameters not strictly required and accept an instance from the consumer of your library. 
Do you know any other languages? SoloLearn is great for learning the basics. And of course personal projects once you get through the material... 
Get one of the MS c# step-by-step books and go through it cover to cover. Whatever you do not understand, keep re-reading and doing until you get it. Download Visual Studio, it's free for like 90(?) days. Yes, a Microsoft book. Keep doing. Do until you understand.
Signing up [here](https://visualstudio.microsoft.com/dev-essentials/) (free) gives you a month of access to [pluralsight](https://www.pluralsight.com/paths/csharp) which has a ton of quality tutorials. udemy.com is good as well - but not free, so maybe take advantage of that free month of pluralsight, get as much out of it as you can and hop on udemy on that if you need/want to. Edx.org has some general C#/.NET introductory material, free as well, although i'm not sure how up to date it is.
VS Community Edition ([download here](https://visualstudio.microsoft.com/vs/)) is: always free for: opensource, VS extensions, windows drivers, education, or individual developers (including for-profit) free for five people if: more than 250 employees or more than $1million/year revenue 
Also gives you a 90-day Pluralsight trial, unless they stopped doing that in the last year or so. 
Hey. I‚Äôve recently found out about this uno framework. It basically is a set of tools that automate the conversion from uwp (Xaml frontend with C# as code behind) to either android or iOS or even WASM (web assembly which can later be deployed by a server, thus hosting your application online and running it in the browser). It‚Äôs still early in development but I‚Äôve used it a bit and haven‚Äôt encountered major problems and whenever would come up, the devs would respond to my questions in maximum a few hours. Overall, I think it‚Äôs a great framework and community and if you‚Äôre willing to learn (or have previously worked with uwp or wpf), you shouldn‚Äôt have much trouble.
ok thanks, how do i find it to have a look?
Yeah, they switched it at some point, it's only a month now, unless you're paying for VS Pro/similar :[ https://docs.microsoft.com/en-us/visualstudio/subscriptions/vs-pluralsight#eligibility
I just started picking up C# about a year ago. Prior to that I was hooked on Python. My best advice is find a good book that you can take cover to cover. From there I dove into just trying to solve problems for myself. I use Python for more behind the scenes scripting. With C# I developed a program (Windows Forms) that allows me to see projected start dates and other information of jobs in the CNC machine shop I work in. I‚Äôve learned way more way faster doing my own projects while using books and tutorials for reference to solve my problems. The most important thing is having a solid understanding of the basics and fundamentals. Make sure you understand the basics before trying to move ahead too quickly.
You can just google it. I‚Äôd give you the link but I‚Äôm on my phone. You‚Äôll find their website with examples and stuff. If you want more info you can check their GitHub page. They have there all the source code of both the framework and of the example apps plus a lot of documentation. As a last resort you could go to gitter.com and search for their lobby and ask questions directly there (usually you should have something concrete to ask). Also, you could look into Xamarin. Uno is based on Xamarin and it automates stuff even further. But if you want something more close to each platform you want to deploy on, maybe Xamarin would be a better fit.
Didn't know UNO, seems amazing.
amazing i will have a look into it now! thank you!!
[https://en.wikipedia.org/wiki/Law\_of\_Demeter](https://en.wikipedia.org/wiki/Law_of_Demeter)
Checkout Programming with Mosh, found some of his videos on YouTube to brush up for an interview and ended up purchasing the whole course. My company has a Pluralsight subscription and his course was much more straightforward, though not as in depth as a C# or ASP.Net Pluralsight track. But a great way to get your feet wet, while having fun building something cool from the first video. 
for what i want to do would i have to use SQL couldn't i link it to a offline spreadsheet to hold all of his data? its a basic customer card containing all the work they have had done to their car and how much they have paid etc? at the moment it's all in a Excel SS anyway ATM, but i just wanted to make it so he can give everyone a Customer ID number and link all their work to that number, thus giving him the ability to see what customers work not scroll through a list of all his customers etc seems i might be a bit in over my head haha!! hope that makes sense 
Honestly I couldn‚Äôt believe it either. It just seemed too good to be true. But after working with it, I gotta say it‚Äôs quite a pleasure. And the devs are one of the friendliest and most helpful people I‚Äôve ever met. They take hours of their days to help people even with trivial stuff and never talk down to others. 
What kind of app are you making?
Honestly this might be an unpopular opinion but as long as the data you wanna save is not huge (more than a few gigabytes of information), you could always save it in a file. This should be the completely easy way. Another very easy alternative is SQLite which is really simple to set up, but it still requires you to know sql. Ultimately, I don‚Äôt think you‚Äôre way over your head. It can be done with effort and patience. Also, you know the requirements and you can start implementing parts of the application and then you can decide if you made the right choice or not regarding the technology cause, as you said, this sounds more like a project than an actual work with a deadline so you can just use it to learn and explore.
I am not sure exactly what you mean. Is JWT java web tokens or something else? Are you referring to Azure AD for Identity?
Have you read this http://docs.identityserver.io/en/latest/topics/apis.html