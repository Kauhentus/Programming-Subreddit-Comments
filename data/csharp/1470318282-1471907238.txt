The price is high way robbery, I got it for $10 awhile ago on their frequent sales, I think udemy changed its pricing structure though so i'm not sure how much it goes for on sale now.
11/3 is not equal to 3.66666, it's equal to 3.6666666...
The quality is not very consistent IMO, Brice's videos are just not as nice to watch and listen to as Ben's, and I wouldn't of paid full price for it knowing the overall quality going in.
&gt; A bit more verbose with classes etc Until you need a class structure in C, at which point C# suddenly becomes a lot *less* verbose. :)
My suggestion is quite different than most of these replies. Web development has nothing at all to do with Microsoft or any of its tech stacks. For many good reasons. If you want to develop for web [which is a great path], forget vendor-based tools for a while. Download Github's [free] Atom editor, and start familiarizing yourself with the client side. Sure, HTML / CSS are very important, and having a good handle on JS is pretty much a must-have. But being able to rapidly develop rich, responsive pages is a massive uplift; not only for your own knowledge, but as a confidence thing. So take a batch of time and learn Bootstrap fundamentals. You'll be amazed how quickly you can whip together pretty impressive-looking stuff. Then work with a client-based MVC framework (Angular, Ember, etc.) and learn how to consume and manipulate data on the client, and lay it out nicely. That's not a recommendation to become a SPA (single page app) developer. It's about learning "the other half", that -- frankly -- most C# / ASP devs suck at. Once you have a solid grasp of how to create a nice looking, responsive client that works on PC, tab, and mobile, the sky's the limit.
For portable coding devices i use a Surface Pro 4 with VS2015 + R#, which is a full fledged Windows 10 PC. I cant imagine that an android tablet could ever be a usable coding device for C#, what IDE would you use?
I think there are some important questions: 1. What platform/hardware do you intend to use? Is there any flexibility in that regard? 2. Do you plan on it being like Pokemon GO (looking through a window) or a more VR-like experience (camera passthrough, Hololens)? 3. Does it need to be "native"? That might be a lot of work reinventing the wheel. I think if you're looking to just do some proof of concept, perhaps you can consider Unity since it'll do a lot of the backend plumbing for you. I'm pretty sure you can hookup the camera feed to a texture/background, then you can tie in the camera orientation to the device's gyroscope (or orientation APIs), then it should be relatively simple to place an object in the 3D space and move/animate it. If you have the resources for it, perhaps consider looking into Hololens. The development for it can be done in C# (and in Unity I believe too) and the SDKs pretty much do all the AR heavy lifting (compositing, 3D positioning/orientation) for you.
Next you're going to tell me that 2/3 doesn't equal 0.66667.
Can you share some of your code that you're using? From what I can infer, it might just be an issue with port numbers. Each Socket/UdpClient instance should be unique.
I appreciate the input!
I recommend the book "Working Effectively with Legacy Code", by Michael C. Feathers. A rough summary is to first define "good code" as something approaching the SOLID principles. By that definition, good code is composed of small, single-purpose units that explicitly declare their dependencies and, when they have dependencies, it's on abstractions instead of concrete classes. This kind of code is easier to unit test. You keep this in mind as your ideal state. (You don't have to agree with this as "good code", but this is what the book uses and I'm not here to argue.) "Legacy code" is anything that's not there, primarily "code without unit tests". It's tough to work with, because it's hard to understand the impact of any change when dependencies are tangled and you don't have a good suite of automated tests. The rest of the book discusses strategies for identifying segments of code you can "fix". You do this by first coming up with a test plan for the current behavior. Then you start isolating the code behind abstractions. At each turn, you repeat your test plan to verify you haven't changed behavior. When the code is isolated, you convert your test plan to automated tests. Now everything "inside" the abstraction can be refactored to your heart's content, and the automated tests will tell you if you break something. Repeat a few thousand times and your project's code quality improves. If you don't want to read the book, that's more or less the strategy. First, you have to create SOME test plan to verify what behaviors exist and that they are behaving properly. Only then can you start to make changes. It doesn't matter if they're unit tests or manual tests, you have to be able to answer, "Did I break anything?" in order to safely make changes.
Exceptions are great for finding bugs, but a bad user experience when those bugs crop up during real use (crashing is no fun). You should always catch bugs at the level where you interact with the user, and decide what to do at that point, be it show the error to the user, log it somewhere or ignore it and plug along. 
Wouldn't that make them backwarders?
Or just "Reversers" maybe. But yeah, someone could have thought of a better name.
You're not accounting for the GC. LINQ causes a significant amount of allocation. Allocation causes the GC to do work. The GC uses memory, CPU time, and it can suspend threads.
Git?
Use git.
All hail Git the mighty
So yeah, as others have pointed out you can't re-use the same socket. However taking a step back - UDP means you get a packet storm of unordered and unguaranteed packets. They could come from anywhere and any client. So why do you need more than one reader? Just have a single inbound server queue that *all* your clients throw packets at. Then you use the data you have to build into each packet anyway for UDP to work out which client sent it. 
You'll probably be best off remoting into a windows machine and using visual studio
As other have mentioned Git is a great choice. You have offline repos in your workstation. Then you can pair it with something like GitLab to host your remotes. With GitLab (free!) you can use their hosted environment, or download it and run it on your own server. 
The bits of it I've gone through have been great. I know c# well so it's just the unity bits I was interested in. I also love Dave Mitchell, having one of the guys sound just like him makes it really enjoyable.
This won't execute anything in the background, though. If IsCompleted returns true right away, it will just execute synchronously. If if returns false, it will never execute. 
The real price was way more than 50$, but they made sales all the time. "High way robbery" is a bit extreme. They were the first to make a dev game course in that format. 50€ instead of a 7500€ tuition is more than fair.
Prerequisites Robocode and Java must be installed on your system Documentation Currently, the .NET feature of Robocode is totally new, and hence there is no documentation available for how to develop robots specific to .NET. 
I've done AR/VR in Unity professionally for a couple years, and there are a few options available. Basically all of the work is done for you. 
I guess it depends on how your project is structured. You'll commonly see people using view models and DTOs to display data to the user. That way you keep the domain models closest to the database. Then you have various view models you can use that only display the data needed for a particular controller. You may not want to display the entirety of a domain model. 
this is pretty fucking cool man. I love fucking with stuff like this. 
Lookup asynchronous void.
Was going to be my exact reply. Just get Teamviewer(Remote Control) on the play store. It works fantastic.
With TCP generally you have a TCPListener (server) which accepts incoming clients. Under the hood there is a callback with a new socket, this new socket has been offloaded onto some port that the TCP/IP stack has negotiated with the incoming connection. When you get it at the .NET level, you're getting a TCPClient abstraction which does all the communication over the new port. So for TCP/IP you have a listening port (port 80 for HTTP say) and then when a client connects, the stack agrees on some other port say (54321) and then your client will send packets to this port. When you do UDP/IP you still have the address and port pair, but the server always listens on the same port, and the client, well it does too. This is because UDP doesn't really have a server concept, you just bind and listen on a port on both ends. So you could say have your "server" listening on port 3333 and your client on 3333 as well, assuming their on different machines (or NICs). You're running into problems because you're trying to have two things bind to the same local port (3333) on the same machine (NIC). The .NET UDPClient abstraction is a bit confusing, AFAIR there is a "local" and "remote" IPEndpoint. The remote address is where the data gets sent to. The local address is where the data is read from. So if your udp "server" is listening on 3333 and you have 2 clients on the same machine, then they'll need to bind to 4444 and 5555. When you do a UDPClient.Receive(ref IPEndpoint), the IPEndpoint object will contain the return address information you'll need to send your response to. With UDP, you're guaranteed when you get a message it's correct. That's about it. Packet ordering and whether or not you actually get the thing is left up to you. Which means your datagrams should carry full state about the message. This really boils down to UDP being a message based protocol and TCP being a stream protocol. Consider a text message conversation (UDP) vs. phone conversation (TCP). You can fire a bunch of text messages, you don't really know if they get there, maybe you don't care. You can duplicate them. However on the phone these things would be weird. With TCP/IP all of these headaches are removed -- the only complexity you have to worry about in in your protocol is to ensure you've received the whole message. With TCP you're guaranteed to get the message, but it doesn't guarantee it won't be fragmented. All the low level addressing and port stuff is done for you, along with ensuring your data is getting to the end in the correct order, correctly. In summary, UDP and TCP are not just drag and drop replacements of each other. You have to choose the underlying protocol based on your needs. UDP is generally faster, however it requires more thought and craft to use. TCP is easier to use and generally more robust, but if you have time sensitivities it might not be best. I hope this helped a bit and wasn't too confusing! 
It's a beautiful irony, and yet another reason why I respect the hell out of the .NET teams at Microsoft. 
Besides that, people always talk about making stuff work, then making it fast, but if your initial design has to be completely torn apart because it's too slow and can't be optimized that's not gonna cut it.
Inheritance is OK in small and practical doses. In today's development landscape I am more inclined to steer more towards composition over complex/fragile inheritance models.
Many performance critical projects aim for no allocation. Go ahead and show everyone how to use LINQ without allocating. Go ahead and show everyone how using a for loop instead of LINQ is a "massive security hole". I'll wait. 
Exactly. This is what happens when people follow dogma instead of thinking for themselves and understanding what is actually happening when they write code. 
Check out Telerik, DevExpress or Infragistik, if your budget allows you to use a commercial WPF control library. I've used Telerik and it was overall very helpful. Some annoyances, especially if you try to achieve something they've not covered, but for basic needs and getting started very helpful. I like the predefined styles (e.g. Office2013). In any way you can check out the examples of these companies for inspiration: https://www.devexpress.com/Products/NET/Controls/WPF http://www.infragistics.com/products/wpf http://www.telerik.com/products/wpf/overview.aspx For great style libraries, also check out http://mahapps.com/ http://materialdesigninxaml.net/ And general guidelines from Microsoft: https://developer.microsoft.com/en-us/windows/desktop/design 
Dont argue with me. I copied those lines straight from the wiki
Can you show me what allocations you're talking about? I mean... LINQ doesn't do much internally and it certainly doesn't do anything out of the ordinary. Everything performs an "allocation" so I'm curious to know precisely what you're referring to.
In details that is not correct but you got the main idea. Just couple mins of debugging will clear everything out. Actually GetResult() is called inside continuation Action passed to you via OnCompleted, so you need to run your work inside OnCompleted and when result is ready call continuation() either on ui or the worker. So in other words continuation consists of GetResult() call and the rest of your code below await.
This was really helpful, thanks a lot. I realized the TcpListener must have been doing some stuff under the hood since all of my clients were connecting to a given port but when they showed up in the console when testing ("Client number XX on address X.X.X.X:XX says XXX") their port would be different from where they connected. This definitely explains why it works over TCP and not over UDP. One thing I'm still not clear about: I have only one TcpListener, but I have one stream per client, and I write and read from those streams. In UDP, should I have one UdpClient that does everything or should I have one per client? One last question, I'm using the Begin... End... versions of everything to send and receive messages, but can I call UdpClient.BeginSend() twice without waiting for the first one to finish or will it stop sending the first message?
Yeah, something like that. The system checks for IsCompleted first, and if true just calls GetResult. Otherwise, it hooks up a continuation on OnCompleted which then calls GetResult.
Never use it again :)
What you did was a perhaps a little bit careless. Doing professional WPF application, if you never did it a proper way, will need time. You need to learn a lot on how WPF internals work regarding, xaml, data binding and MVVM pattern. All this takes a little bit of time to get used to if you never did it before, especially if you previously only did winforms or old MFC style applications. I'm sure you can do it, but if you want to do it properly and professionaly you need someone with the experience. Now you’ll ask yourself why I'm telling you this instead of giving you links. It's because I've gone through all this and the information is scattered all over the net. You best bet would be to start from a good book. There are many books but not many are good especially for the beginners. To start with I would recommend: Sams teach yourself WPF in 24 hours by Robert Eisenberg. This smart guy later write MVVM framework Caliburn.Micro. Then you know the drill. For all the things that are not clear there is StackOverflow and others. Others sent you links to nice frameworks but honestly you shouldn't start from there. Edit: Can someone explain why the downvotes? I'm genuinely trying to help. Maybe I didn't understand the question right? 
As others have suggested there are some great control libraries out there that help to make your UI look good. As far as the user experience goes (what controls to use when and how to layout the UI) I would recommend checking out [http://ux.stackexchange.com/](http://ux.stackexchange.com/)
Thats really annoying, a couple of days ago I had a single combobox that I couldn't change the anchor of. UI would show the anchor as changed, but looking at the designer.cs showed different values. (Just changed it there, no idea if the issue persists)
It's just for demo purposes 
Yes. You're welcome.
What are the differents between Rx and await? And when is it advisible to use Rx?
What's your tools budget? Others have mentioned DevExpress and I would vouch for that package if you can. It comes with a nice demo application that shows all of the controls in action (with source code) so you can essentially pick from a gallery if you're not exactly sure what you want. It's also themeable and ships with a few presets. For general feel, I would pick an application that is close to what you want and try to emulate it the best you can. For example if your application is very data grid heavy, emulate Excel. 
App is not compatible with your device :( IPad 3 16gb IOS 9.3.3
Are there any build errors? Your coworkers could be playing a trick on you where they set VS to "build failed, run last success" automatically (or you could have checked it on accident when it popped up several builds back). Then it won't matter what changes you make so long as an error exists somewhere in your project.
you can take a look at Syncfusion, they offer a community version, free, and they have plenty of controls https://www.syncfusion.com/products/communitylicense
Check out [Clean Code](https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/ref=sr_1_1?ie=UTF8&amp;qid=1470407048&amp;sr=8-1&amp;keywords=clean+code). There is also a video series that accompanies the book at https://cleancoders.com/ which is pretty entertaining and informative.
I would gladly pay for it if there was an Android version.
[removed]
Yes, I find this indicative of code smell. To be fair, anytime I find myself using 3 or more generic arguments, it's a clue that I need to evaluate my usage carefully, because now you've likely gone past the area where generic type inference will work in your favor (not impossible, but unlikely). The problem I see here is that you've just pushed a lot of this code into other files and munged together associations via the generic arguments, all because you want to avoid writing code in an event handler (or so it seems). Just looking at the one liner in your event handler has me somewhat confused on the application of HandleEvent. At minimum, you can probably avoid specifying ChannelDeletedEventArgs / MessageCreatedEventArgs as an argument, since that can probably be determined with a better selector on your DomainObject&lt;T&gt; argument. What this looks like is that you want to deserialize jsonObject as Channel, and then invoke OnChannelCreated (which looks like you have a bug in the code posted?) That shouldn't require a mess of code. I'd simply add a constructor to your EventArgs class that takes an instance of your object and initializes itself. Then you'd have code like so: var channel = new Channel(jsonObject); // alternatively, ChannelFactory.FromJson(jsonObject); var eventArgs = new ChannelDeletedEventArgs(channel); var handlers = OnChannelDeleted; if(handlers != null) handlers(this, eventArgs); 
Of course you can, and I totally agree that you can see that their designs not only extended but simplified and refined previous approaches. They had interop from day 1 as I recall, put the GAC in play because DLL hell was a problem for years. Worth mentioning also is how they also addressed a lot of the issues that Java had with things like type erasure for generics and the lack of lambdas in Java. I was describing it as ironic, since the BCL is Object Oriented. I didn't even consider the influence of COM, and I now totally see it. I am even more impressed with how they have seen the value of functional approaches.
Check out: http://stackoverflow.com/questions/17082255/when-to-use-ienumerable-vs-iobservable https://hendryluk.wordpress.com/2012/02/28/reactive-extensions-and-asyncawait/ Rx (IObservable) is good to use if you are trying to do an await IEnumerable.
This makes a lot more sense now that I understand what's happening under the hood. I used to have problems with clients sending messages and the server thinking the messages were from different clients, but it would make sense since I started a BeginReceive() every time a new client connected. I'm still not sure how to make it actually work though. I just realized the reason UdpClient.EndReceive's IPEndPoint argument is passed with ref is because it's populated by EndReceive, NOT by me, so I need to experiment with this. For now the way it should work is: Server starts listening on both UDP and TCP. Client connects on TCP. Server sends a clientID through TCP. Client responds on UDP with the message they just got. Server now knows both the TCP stream and the UDP endpoint and can now send stuff to client. What I'm struggling with is, how do I know a certain UDP message is from a certain client? Do I just keep a dictionary of IPEndPoints and their associated clients and look through that each message? That sounds like a lot of work for the server, especially with high number of clients.
I would gladly pay for a windows version, looks neat. But I don't own an iPad.
 var eventArgs = EventArgsDictionary.FirstOrDefault(x =&gt; x.Key == typeof(T)).Value; Why
Just a heads up. Don't ever ever EVER create threads on a constructor that use methods of the object being contructed! You are leaking the "this" reference and using a partially initialized object wich can (and will) cause all sorts of troubles. In your case just leave your constructor empty (aside from this.UserCursor = new Cursor(5, 5);) and create a method StartGame() that will launch both threads. :)
I highly recommend you read any book by Charles Petzold on the subject. He gives amazing insight into the inner workings of WPF.
Another reason to buy myself an iPad Pro
&gt; Working Effectively with Legacy Code Someone else suggested this book also. I just ordered it.
Well, I can't replace that with something like "new TEventArgs(instance)". I wanted to have the option to get the appropriate eventArgs class from all of the possible eventArgs classes the domainObject supports. Is it doable in some other way? Thanks
Very cool tools there. Material design in particular looks like something I could get quite some mileage out of. I haven't yet had an opportunity to really delve into the links you provided, but I wasn't really aware that anything like them existed. Also, going to read over those MS guidelines.
Lambdas are classes. Passing the predicate is an allocation. My example was also assuming you would care about the results at some point. I probably should have shown that. :P
You're right, the explanation could be more concise. I wanted to have a single class, which would be able to instantiate all the needed data to handle an event. Tha data consists of an instance of some object, which is a simply DTO object made by deserializing a json input (which is passed by an event my parent class is subscribed to). This DTO class instance is then used for creating a specific EventArgs class (for example MessageCreatedEventArgs). Since the DTO class doesn't contain all the information I'd like to push to the client which will use my code, I'll be creating new types of data in the EventArgs class. I should probably specify the broader scope the code runs in so you'll get a better idea, so here it goes. 1. I recieve json data through a websocket connection. 2. I parse the json data (only a portion of it) and based on the type of event I call an event handler 3. The event handler: a) parses the needed remaining json data (payload) and deserializes it to an instance of a DTO object (Message, Server, User, Channel, ...) -&gt; var message = Deserialize&lt;Message&gt;(jsonData); b) creates an appropriate instance of an EventArgs class (ServerCreatedEA, MessageDeletedEA, UserEditedEA, ...) and passes the DTO object to its constructor -&gt; var ea = new MessageCreatedEventArgs(message); 4. In the EventArgs constructor, I'll get additional data (this is not yet implemented as I would need to pass more stuff into it). For example I would like to include a Channel object when I dispatch a MessageCreatedEventArgs object so the user can directly work with the channel in which the message was created in. The json I get for this event only contains the channel ID so I have to get the channel myself. 5. After I got my EventArgs object, I can invoke my own events, to which the client code can subscribe. 6. In some cases, I also want to invoke my other, internal events which handle caching (so I cache objects like Servers and Channels when they are created so I don't have to make a httpGet request to the external API each time a client requests a channel) I hope this clears it up a bit.
I saw this. I was hopeful. I tried it. Still alternating back and forth. Why does it hate ~~me~~ us /u/Noiselexer? 
&gt; Robocode Not arguing with you either. http://robowiki.net/wiki/Robocode/.NET/Create_a_.NET_robot_with_Visual_Studio
OK, firstly I think `GetPayloadFromJson` should not be an extension method. Make a static class to put it in, or just inline it. (The `FromJson` is redundant too if it's an extension method). If you're using `Convert.ChangeType`, you're pretty much losing any type safety the generics were meant to give you. At that point, you may as well use `EventArgs` everywhere and an unsafe cast in the right place. At least it'll be explicit that way.
Yeah, I thought about making the method reside in a static class but I find extensions easier to use. I probably should value my preferences less and value logic a little bit more. Well, this makes a lot of sense. I guess I just wanted to make this whole generic method hack work and didn't think about what I'm doing. Time to refactor and redesign. Thanks
Do it by hand first, so you internalize what's being done behind covers. Stay away from Prism, until you try MVVM Light, or Caliburn.Micro first, as they are less complicated.
&gt; Your app probably just needs to operate like a modern web app, using async calls to populate individual controls rather than halting the entire app to wait for a response. So for example, say I want to populate a long list of large objects to display to the user, and that operation would take 30-120 seconds (or whatever). You're saying to stream in the data to the display as it is created instead of using a loading bar and showing all the data at once? My main background is in back end work, so I'm pretty familiar with stuff like multi threading, lambdas, LINQ, closures, asynchronous calls and other fun stuff. But, yeah, I have no clue on how to best use those things to make the user enjoy using what I've made. I usually leave that to the web developers. &gt; Assuming that you have security nailed down (which is a huge task with more complications than on a website) This has me intrigued. I haven't given any thoughts to security. What is an example of a security issue that I could introduce with a WPF application?
Dealing with the GAC can still sometimes be problematic. You're right, the C# team learned a lot from Java. And in C# 2.0, they took those lessons and extended on them. Generics, lambdas, etc. It's unfortunate that Java suffered from being the first out the gate. I really need to immerse myself in F# for a while, I just haven't had time. C# isn't really a functional language. From what I've read, it seems like F# would be a better language for most tasks, but C# has momentum in the business world. (This is kind of the story behind Java...) 
I think it would be as good of a choice as any. They have demo applications that provide the code for the basic shell of the UI, for example there is one that's a clone of Outlook, and another for a docking-style UI such as Visual Studio. Their controls are pretty good for validation and input masking as well. There's a good selection of searchable dropdown controls, filtering, etc. as well. If I were you I'd get the free 30 day demo and play around. If you have some sort of UI mockup you're willing and able to share, I can take a look as well.
Improve by learning not only how to improve upon some of the things you think he is doing sub-optimally, but also by learning how to communicate this to him, and win him over. Or conversely, learn how to communicate with him and find out what he is doing is good for the problem you are trying to solve after all. 
Plus, doing x.Key == typeof(T) skips the hash check which is kind of the entire purpose
Heya, That really isnt easy. He has an inherent hatred of objects and classes. He is constrained by "time" and "will return later" and never does. His idea of passing data is like by using pipes to seperate data items. Ive already told him its not okay, his reasoning was, "well it works, if you can find something better then do so yourself". As for me learning from him, well I really dont see how though? I mean he asks me stuff! :D 
I'm just spot-checking here, but here's something I saw: * You set the label text. * You clear the response, to make way for a file attachment. I'm not an expert with ASPX (I've since moved on to MVC a long time ago), but I think you're clearing out your page data, including your label change, when you clear your response and return the ZIP file. I don't think your problem is just code, I think it's an architecture issue. Here's how I would do it. * Client pushes a button that says 'zip up images'. * Client-side AJAX sends the request off. * Server zips up the images, returns a response that says "Success, here's the # of images and an ID" * Client-side Javascript updates anything they want with that data, and shows a 'download' link. * User pushes the download link. * Client-Size AJAX sends the request to the server to download the ZIP file based on the ID sent back from the previous request. Just some thoughts. I think you're trying to do a few things at once when they should probably be broken up.
https://csharp.2000things.com/ was a good tool for me.
Agree about the ease of jumping from vb.net to C#. I worked almost exclusively with VB.NET for about 9 years, when I started working for a C# shop the move was pretty much effortless. 
That does sound good, to learn how to help others. Any advice? 
That actually never occured to me... damn... Thanks a lot
I guess it's true that the implementation isn't wrong per se, but as I mentioned in the post and as well as others pointed out, due to other reasons it is better to implement it in a more simple fashion. Thanks for the positive feedback though, I really appreciate it
He means "ASP.NET MVC," and not just MVC. Yes, MS are idiots for hijacking an existing name (in common use since the 70s no less!) for themselves. 
It's almost the preferred way. Look up wpf localization guides on msdn to see how to do it with even less code :)
If you're writing a library that consumes an API, and you try to eliminate duplicate code, you're going to have a *terrible* time. Using a library like RestSharp that will handle a lot of the REST calls for you will definitely reduce the amount of duplicate you write, but the very essence of the architecture relies on this repetition. I've been working on a PCL for using the Subsonic API and nearly fell down this rabbit hole myself. The cleanest you'll get it is to define your return types and deserialization rules, and compose those types as needed for each API method. If you go too far with generics, you may create a trivial decrease in LoC within your API call methods, but your tradeoff will be creating more complex type hierarchies and/or more confusing, indirect code to keep track of while you try to implement internal features.
[When in doubt](http://bigocheatsheet.com/)
How many pages will these drop down values be used in? Do they need to be configurable at runtime? Do any of the pages need to understand the values or only allow subsets of those values?
Sorry for the late reply. Basically there are 3rd party libraries that are very robust. There is no built in AR support, although there is built in VR support. I think there might be some Hololens support at some point. Not sure about that though. Anyways, probably the best library is the vuforia one developed by Qualcomm. Although it's not free any more. In fact, I haven't done AR in a couple years, lots might have changed. I think there is another free option out there that people are using now, though I cant remember the name. 
As of now they'll be used in 2 pages. Maybe more as the app grows bigger. They don't need to be configurable at runtime. The pages don't need to do anything special with the values, just show the drop downs, always using all the values (no subsets).
You are aware that C# and C are completely different languages right?
I know this is a little late to the game, but I just came across this post. As it turns out, I recently used quartz.net and did not like some of its shortcomings either. It inspired me to write my own library which is now out there available as open source http://Chroniton.net I specifically wrote it with a few things in mind. One of them you already pointed out. It does not have any dependency to any logging framework. At the moment, it's only dependency is .NET Also, the context in your job is 100% strongly typed. You don't need a magic string to pull some property out of the context in the job.
I have two pet programs I tend to write in each new language. Conway's "life". Lunar Lander. These may not be yours, but use the idea... some problem you understand how to 'correctly' solve. Now solve it with the new tool.
This is great, thanks!
After some thought it indeed seems that the way to go is to have simple class hierarchies in an API. My implementation also broke a few (a lot?) of good design principles like SRP which would probably cause some isues later.
You could also try an enum with the [Description] attribute: public enum MyPriorities { [Description("Low priority")] non_urgent = 1, [Description("Normal")] normal = 2, [Description("High priority")] urgent = 3 } example question here with methods to get the description from the enum value: http://stackoverflow.com/questions/2650080/how-to-get-c-sharp-enum-description-from-value
For me personally, having more than two generic parameters feels wrong. And it feels like you have fallen into the trap of designing something from the *inside-out*. Instead of *outside-in*. If pretend that whatever API you are trying to create already exists. Use it like it exists, and then implement it. And your code isn't clear at all. I should be able to read your code, and I can't. I'm not even sure what it is you are trying to do.
Ideally you create POCO/DTO classes and a service. That service is registered as a singleton in your IoC-Container and containts the setting classes. Now you can simply inject the service into your desired classes. However having a simply static class called "Global" is fine too.
Phew! There's quite a list! Here are some of the bigger ones: - We currently repaint the whole window on every frame. This is obviously not ideal - we should just repaint the dirty regions. - Proper touch support - .NET Core - Drag and drop support There's a *lot* more though - take a look at our (vaguely categorized) milestones for the whole list: https://github.com/AvaloniaUI/Avalonia/milestones (all subject to change depending on contributors!)
By using Topshelf, and not this shit.
That's a shitfest when you end up needing to localize that.
Normally I'd agree, but the "basics" of Windows Service management are such a clusterfuck that I'd jump at any chance of not having to deal with it.
This is really an awesome project. Great work.
Umm.. c# is a c-based language
Oh FFS what a bunch of pendants. Yes is has fucking semicolons and curly braces. Whoop de fucking do.
&gt; There are absolutely times when it makes sense That quote directly follows the one ypu quoted. A dictionary is definitely one of those times that make sense.
Buy VPS with Windows Server and use remote desktop.
Yea I had already bought the app, but wasn't on wifi yet to download. After loading it up, I saw that was the case. However, it is by far the best IDE(ish) tool I have seen on a mobile device. I grew up programming all day on my TI-83, so this is awesome for killing some free time.
Thank you! I'll try that. 
Thanks! I'll try it out. 
I think I'll make a touch interface app for Raspberry pi with this :D
I write a one line .bat file using installutil.exe Seems easy.
Aside from the obvious fluent syntax (personal opinion: I rarely like fluent syntax), the implementation in FluentScheduler obscures how schedules operate. I'm not sure if extending it's functionality for custom schedules can be done easily. Internally the algorithms for how/when jobs execute are very different and worth investigating.
Doesn't really matter. Create whatever extension you want.
Hmm interesting, thanks. Do you have a link to the files in github for the algorithms you use?
That sounds interesting, I have to watch that.
It doesn't matter. 
something shorter, simpler.
Removed: Rule 4. Try reposting the topic but include more relevant pieces of code, including but not limited to: how you populate the list data, how you filter the data, and other solutions you tried beside calling `Clear`.
Why not use the linq method: OderBy it implements quick sort 
There are max of 300 items that need to be sorted. I don't own the data, and therefore manipulating the data requires service calls with up to 1 second cooldowns between each. I can sort my version of the data with linq, but I want to sort the source data too, which is the real goal.
And the only functions you have at your disposal to manipulate the source data is to remove an item out of the collection and push it onto the end?
Just what we need, another UI framework. Lol
Hooooo boy. My first thought would be to scan the collection, left to right, and note which items are less than the subsequent ones (and thus need to be extracted/pushed), then extract/push those items in ascending order.
That's where I am at too. The problem comes in that I would be needlessly moving item '1' in this collection then, because it is less than 4. Same issue with 2. (4,1,3,2) 
I think the key is that I know what the final sort will be, so I think I have to iterate through the items in that collection and match to the initial collection...
No, you scan left-to-right. EDIT: from the item you are checking. * Start with 4, check 1, 1 is less than 3, mark for extraction. * ~~Next is 1, check 3, 3 is greater than 1. Check 2, 2 is greater than 1. End of Collection. Leave item.~~ * EDIT: Fix: Next is 1. Check against extracted items: 4. 4 is greater than 1. No more extracted items to check. Check against rest of source. Check 3, 3 is greater than 1. Check 2, 2 is greater than 1. End of Collection. Leave item. * ~~Next is 3, check 2, 2 is less than 3, mark for extraction.~~ * EDIT: Fix: Next is 3. Check against extracted items: 4. 4 is greater than 3. No more extracted items to check. Check against rest of source. Check 2, 2 is less than 3, mark for extraction. * Next is 2, end of collection. Leave item. * Extracting 4 and 3. * Sort to: 3, 4 * Extract 3. Source is now {4, 1, 2 }. * Push 3 onto end. Source is now {4, 1, 2, 3} * Extract 4. Source is now {1, 2, 3} * Push 4 onto end. Source is now {1, 2, 3, 4} ------------- Here's a very basic implementation. You may need to tweak the removal methods to work with indexes (and thus, also account for shifted indexes as you extract items), but I don't know your API and frankly, I'm too lazy to handle _that_ at the moment. :P List&lt;int&gt; source = new List&lt;int&gt;(){4, 1, 3, 2}; private void RemoveValueFromSource(int value) { source.Remove(value); } private void PushValueToSource(int value) { source.Add(value); } void Main() { List&lt;int&gt; valuesToExtract = new List&lt;int&gt;(); for (int i = 0; i &lt; source.Count; i++) { var value = source[i]; bool shouldExtract = false; if (valuesToExtract.Any(v =&gt; v &lt; value)) { shouldExtract = true; } else { for (int j = i + 1; j &lt; source.Count; j++) { if (source[j] &lt; value) { shouldExtract = true; break; } } } if (shouldExtract) { valuesToExtract.Add(value); } } valuesToExtract.Sort(); foreach(var value in valuesToExtract) { RemoveValueFromSource(value); PushValueToSource(value); } foreach(var sourceValue in source) Console.WriteLine(sourceValue); //outputs 1, 2, 3, 4 } EDIT: Bug fixes. Including bug fix in code. Now works against more complicated set {4, 1, 7, 3, 5, 2, 6}.
That sounds like a variant of "Selection sort". If you want to assume 1 and 2 "fall into place" you'll need to track that all elements on the left side are steadily increasing. Otherwise you won't know for certain when to stop. In worst case scenarios this will double the number of comparisons you make, which isn't too bad, considering the operation is already O(N^2 ) anyways.
That's what I am looking for! I couldn't get the concept straight in my head. Have you run across this problem before, or did you just think of that on the spot. Impressive either way.
http://robwillis.info/2016/05/installing-elasticsearch-logstash-and-kibana-elk-on-windows-server-2012-r2/
I worked on a team of 6 at a bank doing a calc engine in F#, and I very quickly missed C#. Don't get me wrong, there's a ton of stuff in F# that's super cool. It definitely changed the way I write code all code for the better. Unfortunately, the lack of implicit interfaces, non-interoperable delegates, and not exposing operators that the compiler itself uses, ultimately made F# not ready for primetime. Really, it's simply a case where the designers (Rhymes with Son Dyme) decided to push their own "functionally-pure" idea of what programming should be rather than fit the language into the the .NET ecosystem. The upside is that the greatness that does indeed exist in parts of F# have been steadily brought into C#. I really do hope that F# 8.73 finally gets it right.
Okay so what doesn't work? You need to add break; after fromUnit = 0;
I get the error "cannot implicitly convert int to string". 
Ah, I see. fromUnit is also the variable in the switch. You need another variable. int bla = 0; switch (fromUnit) { case "...": bla = 0; break; } I have to go I am too drunk sorry :D
I am almost where you are hahaha this class is kicking my ass
&gt; "it's bad just because" will not win many arguments. I have explained the benefits of OOP. We dont do any testing but thats a different topic. As for the "learn independently", I have started the Clean Code book, that does sound awesome! :D Any other resources you might know? 
Sorry, I don't understand?
Yep! That should actually be pretty easy if someone wants to take a stab. We've already got a D2D renderer so we'd just need a windowing subsystem for UWP to be implemented.
https://www.edx.org/course/programming-c-microsoft-dev204x-2
This should definitely work... Did bot emu work before publishing? I think after I registered with bot framework and published to azure I had to put the app id and key into bot emu, but it worked fine.
It's pretty similar to the use with inheritance. When you have `base` after the colon, it calls the superclass constructor before running any of the code in the braces. Using `this` is pretty much the same, except, instead of calling a constructor from the superclass, it calls a constructor from the same class. 
https://msdn.microsoft.com/en-us/library/ms173115.aspx
Thanks! I'm in love with it too. ;)
So it's like a SQL foreign key? You can compose the objects in a variety of ways. If the book is your main focus put Book as your parent object and put Author and Publisher as member objects. Alternatively you can maintain them separately and enforce the foreign key programmatically.
In this case you can do that, yes. But this syntax is not only for setting default values. Example: public class Point { public double X {get; private set;} public double Y {get; private set;} public Point(double x, double y) { X = x; Y = y; } public Point(Point other) : this(other.X, other.Y) {} } And this is just the most basic example. Another use would be a complicated class with, say, many collections that you want to initialize in every constructor. Then you just initialize them in the parameterless constructor, and call `: this()` (or the appropriate constructor, which will ultimately call it) at the beginning of every constructor.
What advantages does it have over Moq? 
I have a hunch OP doesn't know what that means. Go read a book on basic programming, OP.
I was sharing that you can also utilize another feature of the language. Since the OP was ignorant of "this", he may not know that "base" is also available. Nowhere in my post did I claim that it was a replacement, just that you can also do this other cool thing if you need to. It would follow that with both of these tools in your tool belt, you could chain constructors using a combination of base and this to minimize the amount of repetitive code.
Constructor daisy-chaining. Lets you offer multiple constructors, some of which have default arguments. 
In addition to the other answers, I strongly recommend you check out /r/cscareerquestions and consider x-posting this there, checking out their resources, and the related subreddits listed in their sidebar. Best of luck!
0kb seems like the file could be in use when you copy. Are you closing and disposing the connection/dataadapters when you are done modifying the db?
Try wrapping the sqlconnection and command in using statements. Try copying the file on the device to a new name and see if it is 0kb too. You don't have a file-sync'd partnership right?
Oke i wrapped them into using statements. and changed the location to put it back somewhere else from where it grabs it. still returns as 0bytes. Or did you mean actualy changing the name of the file? Also for there is no file synced partnerships. the only partnership there is is between the device and Windows Mobile Sync Center. So it only connects and nothing else. Also quick question, would you prefere [Rapi](https://rapi2.codeplex.com/) or [OpenNETCF](http://rapi.codeplex.com/)
Sorry for the lack of documentation. I've tried to make it so that it's easy enough to track through. I started C# about 7 months ago and posted my chat server/client here and you lot gave me amazing feedback. Hopefully you're able to do the same again! Currently you can send data between client/server (as seen in the test projects within the solution). This is maybe my 8th serious C# project (I've spent ~2-4 hours on this so far accumulative).
Build a calculator that passes on a string. Handles parans, multiplication, addition, and does powers. Also your parans have to work in the power.
Its 2:40 now i should really be heading to bed. Tomorrow i switch Rapi2 for open net cf, and try that out. And yes i had a feeling that it wouldnt be a smart idea. and its actualy how i did the sync before i decided to code it myself (worst idea i ever had, didnt work at all). But i have a feeling that something with the CopyFileToDevice is wrong. Just gotta find a nice doc of the open net cf, beccause it seems that codeplex doesnt have any documentation of it. Wil report tomorrow how it goes
That is correct. So did you use POST?
OP is using POST
`async void` is not really what should be used [NetworkManager.cs#L15](https://github.com/SysVoid/Clover/blob/master/Clover/Net/NetworkManager.cs#L15) Notes: [Async/Await - Best Practices in Asynchronous Programming](https://msdn.microsoft.com/en-us/magazine/jj991977.aspx) You probably should not be making your own threads if you want to use async/await here: [NetworkManager.cs#L29](https://github.com/SysVoid/Clover/blob/master/Clover/Net/NetworkManager.cs#L29) Starting the function as a non-waited task would be better as it means the TPL will control how threads get spun up. Think of it like Tasks are sugar for Threading. Though do note that a Task does not have to be on a separate thread. I would also be careful about context switching with lines like: [NetworkManager.cs#L60](https://github.com/SysVoid/Clover/blob/master/Clover/Net/NetworkManager.cs#L60). Throwing or catching System.Exception or System.ApplicationException is a BIG nono [NetworkManager.cs#L62](https://github.com/SysVoid/Clover/blob/master/Clover/Net/NetworkManager.cs#L62) [Using Standard Exception Types](https://msdn.microsoft.com/en-us/library/ms229007.aspx). Also on that if you are just going to throw away your exception then I'd consider just using return types and then handling the return type. Throwing Exceptions is costly and there is no point throwing them needlessly. (Though I would would probably instead go for actually doing something with your exception here [NetworkManager.cs#L66](https://github.com/SysVoid/Clover/blob/master/Clover/Net/NetworkManager.cs#L66) like logging it, throwing it away means you're going to have a hard time tracking what went wrong.) More of a performance note I would be careful about compressing small data. If you are looking to get the most performance I would do some testing to see if you really get any performance out of compressing your data. Hopefully that helps and feel free to correct me if I'm wrong. I only really looked at that one file since I decided to have a nosy during my lunch break. async/await isn't easy to wrap your head around. You've done pretty well for so few months of programming though so keep up the good work! EDIT: I just want to add with the note on compression, especially for test projects I think it is perfectly fine, and I'd encourage playing with ideas that are not the best of the best. Sure I might not think compression is needed in your application but now you've done it you have some experience in it which is worth it. I made all kinds of ridiculous programs when I was starting out just so I could try new ideas.
I don't understand some of the naming conventions. Why does each packet need to be registered and deregistered with a packet manager? Is a packet more like a packet handler or a class of packet? I notice when a packet comes in that you ensure that packet id is already registered. Also, in the packet manager, you should probably use a concurrent dictionary instead of a dictionary and doing the locking yourself. 
I am extremely sorry for not reading it completely. Make the API end point to accept the data from the request body rather than url.
Or just StringContent
You should also check out https://msdn.microsoft.com/en-us/library/system.net.sockets.socketasynceventargs(v=vs.110).aspx For high performance async socket code.
Why is this wrong?
What is the boundary string parameter in the MultiPartFormDataContent constructor? I see it has a 70 character limit, so a large json string throws an exception.
Since you are building a networking framework which requires both the client and server to implement it anyway, you might want to look at existing solutions, such as NetMQ for example (https://github.com/zeromq/netmq/). Implementing your own as an exercise isn't a bad idea, and I applaud it. For production use however, I'd go with something that has been tested and proven again and again 
At the application level, you have tools like [Glimpse](http://getglimpse.com/) and [MiniProfiler](http://miniprofiler.com/) that are designed to give you an insight into the inner workings of your apps. On the other end of the spectrum, you have things like [Bosun](http://bosun.org/), [Opserver](https://github.com/opserver/Opserver) and [Warden](https://getwarden.net) that are designed to give you a bigger picture view of your infrastructure. And this doesn't even include any of the non-Windows specific tools that exist out there.
/u/kilsekddd's post is not wrong. I didn't mean to imply that. I was elaborating further. Using "base." or ":base()" when there is an *exact match* for the same method overload in "this" scope is usually wrong. First, here's the case where it's always right: In an override that is doing the base classes's functionality for that same method, plus more. e.g. class Animal { public virtual void SleepStuff() { this.Snore(); } // more methods } class Dog : Animal { public override void SleepStuff() { base.SleepStuff(); // Correct usage of base. this.RunInSleep(); // Doing Animal stuff *and* Dog-specific stuff } } Here's a case where using "base" is usually (but not always) not what you actually intended: The method or property exists in "this" scope, but you call "base" instead. class Person { public virtual string DisplayName { get; set; } // other methods and stuff public override string ToString() { return this.DisplayName; } } class CorporateCustomer : Person { public virtual string CompanyName { get; set; } public override string ToString() { return "[" + this.CompanyName + "] " + base.DisplayName; // Hidden bug! // Just because there isn't currently an override of DisplayName in CorporateCustomer // doesn't mean you can't use "this.DisplayName". In the future, if CorporateCustomer // does override DisplayName, ToString() will still be using the implementation from Person } } TL;DR: You use "base" when you want to explicitly use the inherited behavior and *not* the current class's method, *not just because the current class is inheriting that method rather than overriding it*.
All of this!
Seconded.
Interesting! I forgot that existed because I only came across it once. Thank you very much!
Each packet has a (unique) packet ID. These packets must be put into the packet manager in order to be executed when an incoming connection uses the packet ID. It's there mostly to keep track of the packets that should be used in the application. I will be switching to ConcurrentDictionary too.
Transpile
Yes why not? There are many libraries that achieve such task, and this one below is very good to use. https://github.com/praeclarum/Netjs
So does NetMQ. If you're interested in networking is worth reading about ZeroMQ as it has some great ideas and is very powerful/convenient compared to raw socket programming.
Just like any job you start acquiring qualifications, work examples and experience... And then just apply to every software job in your area that sounds good! If you are willing and passionate then that will all come out during interviews :)
All I learned in all these years of coding is that the best option is always the languages provided out of the box for a given platform. Anything else just introduces extra layers to debug and extra time writing FFI wrappers. So while it might seem appealing at first, it doesn't look so nice when something explodes in production code and one needs to fix the bug ASAP while trying to understand how language X interfaces with the platform and its tooling.
I started as an Engineering major in college, but I liked the "college" part more than the "student" part, so I graduated in 6 years with a business degree. I kept programming though, mostly building scripts and minor tools to make my life easier at whatever my current role was. Eventually, I fell into a role where I develop internal software for my company. While I've worked hard, I'll be the first to admit my path has required a lot of luck. I'd echo /u/Billibon here. Keep programming. Make work that is publicly visible (e.g. put your personal projects on GitHub except ones you're gonna monetize), contribute to online knowledge bases like Stack Overflow, and apply to jobs in your area. You'll find a job. Also, if your interest is in solving interesting problems rather than just writing code, make sure you're up on some of the science part of computer science. Knowing (and being able to explain) specific algorithms, common implementations, and major design patterns will definitely help.
can you make a pool of arrays that you grab and put back? that is the normal pattern. keep a stack of arrays, if you request more than it has, double its size. when done with the array put it back on the stack. stackalloc would be a great idea but they are too big for that. The arrays can be bigger than you need for any given instance, just keep track of the size separately. 
He is a new developer looking for criticism. Your comment comes across as condescending, but not critical.
Right, after trying to get Open Net CF to work (problems with reading assembly) i went yet again back to Rapi2 and implemented the using statements also there. I dont know why or how, but it seems to work now. Code Snip: private void OnConnection() { using (RemoteDevice getDevice = remoteDeviceManager.Devices.FirstConnectedDevice) { if (getDevice == null) { return; } else { string destFolder = getDevice.GetFolderPath(SpecialFolder.ProgramFiles); string destFile = destFolder + @"\PPPM\SQL_PPPM.s3db"; string localFolder = Path.GetDirectoryName(Assembly.GetExecutingAssembly().GetName().CodeBase).Substring(6); string localFile = localFolder + @"\SQL_PPPM.s3db"; RemoteFile.CopyFileFromDevice(getDevice, destFile, localFile, true); } try { BaHandHeld handHeld = new BaHandHeld(); } catch (Exception ex) { MessageBox.Show("Failed to Sync Data: " + ex.Message); } using (RemoteDevice setDevice = remoteDeviceManager.Devices.FirstConnectedDevice) { string destFolder = getDevice.GetFolderPath(SpecialFolder.ProgramFiles); string destFile = destFolder + @"\SQL_PPPM.s3db"; string localFolder = Path.GetDirectoryName(Assembly.GetExecutingAssembly().GetName().CodeBase).Substring(6); string localFile = localFolder + @"\SQL_PPPM.s3db"; RemoteFile.CopyFileToDevice(setDevice, localFile, destFile, true); } } Its a mess now, and should fix my variables, cuzz it doesnt have to be duplicated. Running it like this it seems to work fine. I dont know why, and if you do please let me know. For now tho thanks alot for the help, really helped me out! Lotus~ 
Object pooling, as /u/jackmott suggested, is a good idea. I'm surprised though that this is resulting in an access violation. It might be to do with Mono but on up-to-date .NET that should result in a StackOverflowException. Are you aware that stackalloc'd memory is only de-allocated at the end of the method, and not the end of the scope?
https://rapi.codeplex.com/ edit: congrats on it working! See my comment below. This will cut your compile times way down: https://social.msdn.microsoft.com/Forums/vstudio/en-US/ae1be8b3-1143-4dcc-9fa3-0f5b7bd2f0bb/compact-framework-build-takes-long-time?forum=msbuild I strongly recommend AGAINST pursuing .NET CF development in general. It's a huge pain in the butt and a decade out of date. In my case I work in industrial environments where they still have to use them.
No
Look for some development companies in your area. Some of them may allow for internships or shadowing for a day or so. Also there are generally quite a few places that would allow outsiders to attend lunch and learn type of events. Look on meetup or google your area for user groups. In the DC area where I live there are quite a few groups that meet in the evenings. Some even have a intro program that they run. From those groups its way more important to network with the participants then the presented info. Presented as a entry software dev with a documented passion for the field will set you far apart. It would be even better if you knew half the devs working for the company that you are applying for. If you are just looking for a coding project to cut your teeth on. I recommend that you use one of your hobbies as a theme. Some examples that i have help young devs do in the past: * Love movies -&gt; DVD database * Love board games -&gt; scoring calculator (bonus points of you go mobile) * Love hikeing / walking -&gt; build a simple geocache game
Maybe. I think it depends on the project and the skills on the team. Say for instance that the project is not going to require and very complicated javascript, where performance is critical. Maybe you only work with very small data sets on the client side, or aren't targeting mobile, etc. Further, maybe you don't have any javascript gurus on your team. Then if you want to compile C# or F# or something down to javascript, you save yourself the pain of having to context switch between languages. On the other hand, you do risk eventually coming upon cases where you can't get your transpiled workflow to interact with something else well, or the transpiled code has problems and then it is hard to fix it. Or perhaps you do have a javascript guru on the team who could be working just as fast in the 'native' language of the browser. So I vote, maybe. 
DuoCode 
Thanks, Well im in the same ship as you, not that great with C# yet, but got a job for a company, and they threw me on devolopment for the workaboutpro 4. so stuck with this untill finished i guess =P
Please use properties instead of public fields. Didn't look any further than that.
I found this solution on StackOverflow which seems most appropriate to my problem. This seems to say that StringContent() is the best way: https://stackoverflow.com/questions/23703735/how-to-set-large-string-inside-httpcontent-when-using-httpclient But this and all the other examples I've found are just posting string key/values. I'm still confused on how I can post both the simple string parameters and the long json string. Can I serialize my Dictionary&lt;string, string&gt; object into a json string for StringContent() if one of the values in the Dictionary object is a json string? I tried the example in the above link, but I'm getting "Forbidden" errors from the remote server indicating a malformed url. var gcParams = new Dictionary&lt;string, string&gt; { {"token", token}, {"forStorage", "true"}, {"MaxBatchSize", "1000"}, {"outFields", "*"}, {"f", "json"}, {"addresses", inputJson} //long json string containing an array of a complex type }; var gcParamsJson = JsonConvert.SerializeObject(gcParams); //... var content = new StringContent(gcParamsJson, Encoding.UTF8, "application/json"); var response = await client.PostAsync(url, content); //response from server indicates wrong url
Unity uses an old version of Mono with a compiler that has a number of memory issues. Merely doing a foreach loop creates a heap allocation for each iteration. In this case, the scope of the memory is precisely the scope of the method, so that's not the issue. 
I see you are using Foody/Costura, too. Any problems with false Virus alerts? (I had none so far)
Project looks really nice, but seems to be inactive...
Yeah you make a point, with last updated files going back to 2 years go it does raise a red flag. I found another lib that is a lot more active, so you may find it useful: https://github.com/sq/JSIL
Windows 10 for IoT does not support the full .NET framework.
jeeeesus hahaha, I found this in python, I'll take a look, https://pypi.python.org/pypi/SpeechRecognition 
I found a better comparison here http://weareadaptive.com/2014/09/30/why-nsubstitute/
Thanks for the link. NSubstitute looks great! 
Each call to Where() will allocate a new lambda. Thus: if (whereCache.ContainsKey(func)) will always return false. There are ways to cache the results of LINQ queries: https://petemontgomery.wordpress.com/2008/08/07/caching-the-results-of-linq-queries/ However, each call to Where() will still allocate a new lambda and the cached list will still allocate on enumeration. You can amortize allocations from GetEnumerator() by creating your own collection with an Enumerator pool. You can eliminate repeated lambda allocations by keeping a reference to the lambda: this.predicate = item =&gt; item &gt; 50; But at this point it's generally easier to write your own loop. Fortunately, none of this matters for most projects.
I've been working on learning js, but continually feel overwhelmed by the complexity of setting up the environment. I'm still new to c#, but resharper and visual studio are super helpful at helping me figure out what I am doing wrong. 
Does typescript make it any easier to deal with the DOM? 
This is a great book that will teach you a lot: https://www.amazon.com/Professional-ASP-NET-MVC-Jon-Galloway/dp/1118794753/ref=sr_1_3?ie=UTF8&amp;qid=1470689018&amp;sr=8-3&amp;keywords=asp.net+mvc+6
If you don't already *know* Javascript, then you *really* shouldn't use a tool like a C#-&gt;Javascript transpiler. These growing pains you're going through are, unfortunately, necessary, and trying to find hacky workarounds is just going to hurt you in the long run. So don't do it. Just learn Javascript (preferably Typescript).
That really depends on the problem you're having with the DOM. You need to be more specific. And I can tell you that trying to use C# instead of Javascript, just because you don't like the standard DOM interface, is a *really* bad idea.
You can get the latest build in: https://github.com/chrissimpkins/Hack/tree/master/build/ttf
What happens when you try this? var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10)); var response = await client.PostAsync(url, content, cts.Token); Also, is PostAsync completing and *then* the app seems to hang? Try checking response.IsSuccessStatusCode before trying to read the content. Edit: Also, what sort of app are you executing the client from? WinForms? Console? ASP.NET?
which visual studio are you using? The JS support has gotten much better over time and is quite good in 2015
This is being called in my ASP.NET web app. A user supplies some input data from the ui, then within a method on my home controller I am calling the method containing PostAsync(). Adding the CancellationTokenSource var exhibited the same behavior - the unit test works OK, but PostAsync() fails or is never called when debugging my application. In Fiddler, I never see the request to the API created. 
I think by async he meant not to block the ui thread. In WinForms/WPF you have a main UI thread which basically controls the app. If something is going to take awhile to load we want to do it async so it doesn't look like your app froze. Some security examples: - Deploying database connection string. EF makes it so much easier to skip the web service layer, but you need it if this is external. - How are you locking down the api so that only your application can call it. - You need to sign your code so that your customers know someone hasn't modified it - Don't let the client handle objects that you someone hacking your app might modify to your detriment. They will be in memory and available to be played around with. Same goes with incoming/outgoing like json - If you have sensitive data, don't like a someone change an ID number in the web request to bring back a different records data 
Thanks for that stackoverflow link - I will have to read up a bit more on asynchronous programming a bit more to make sure I'm understanding everything correctly. I came across this article and found a solution: http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html Adding ".ConfigureAwait(false);" to the line in question allows me to make the API call and return the data to the UI. var response = await client.PostAsync(url, content).ConfigureAwait(false);
Aha, I see. Most of those are taken care of because of the web service API that I've already made to handle how communications will exist. About your fourth point, you mean don't just accept any network communication and assume it is with us? Be skeptical of spoofing? Also, I'll look into signing. I wouldn't want any shenanigans going on with modifications.
Probably not finding it because it's the wrong approach. Mobile apps consume web services in order to get to remote resources. Expose your data with a web service of some sort like WebAPI. Then it's just an HTTP call to the service to get your data.
I'd say your main problem is your ability to formulate questions.. But you essentially have two ComboBox(es) with overlapping content? Store the items in a List(or other ICollection) and update on SelectionChanged. Eg, if unitCombo changed, clear convertCombo and add all except the selected one. And vice versa.
Let me guess, you've run into Avast's war on C#?
Ah, OK, treat the Android app like a web app and send the queries through a "get" or "post"? 
have you tried using vs2015 community ed and implementing the templates there? They have been updating those with the latest bits if you're trying to implement something ootb.
I mean the simple answer is not use nuget in this solution, right? No reason you can't build a nuget package for deployment but not use it for dev. If that's not an option I think you have larger architectural issues beyond trying to work around this behavior
That's right, GetHashCode() on Delegate returns this.GetType().GetHashCode(), which makes delegates almost useless as dictionary keys. This GC isn't being called in this situation because you're returning the concrete type List&lt;T&gt; and foreach will bind to List&lt;T&gt;.Enumerator GetEnumerator() instead of IEnumerable&lt;T&gt;.GetEnumerator(). 
I used several Pluralsight videos to get me up and running (see below). If you use these videos, see the "discussion" areas for help when you get to bugs. There are a few times in some of these videos where there are bugs in the example code. The videos were mostly good and I was proud of my progress. The discouraging part for me was the limitations on what you can do without a paid Apple developer account. You can do everything for free including putting it on your own device BUT it expires after only a few days. This was intensely frustrating to the point of offensive: hours and hours of *MY* time spent learning and making apps and putting it on a device that *I* own. Even if you're coding on Visual Studio on Windows, you need a Mac to build, which I also own. But despite all of this, I can't use my app on my iPhone for more than a few days because I don't pay Apple even more money. That killed my passion for it. Greedy jerks. * [Building Cross-Platform iOS/Android Apps with Xamarin, Visual Studio, and C# - Part 1](https://www.pluralsight.com/courses/cross-platform-ios-android-visual-studio-csharp) * [Building Cross-Platform iOS/Android Apps with Xamarin, Visual Studio and C# - Part 2](https://www.pluralsight.com/courses/cross-platform-ios-android-visual-studio-csharp-pt2) * [Building Your First Xamarin.iOS App from Start to Store](https://www.pluralsight.com/courses/ios-xamarin-from-start-to-store) * [Introduction to Xamarin.Forms](https://www.pluralsight.com/courses/xamarin-forms-introduction)
Why mix imports techniques? import React = require("react") import ReactDOM = require("react-dom") import {RootRouter} from "./component" import {IndexRoute, Router, Route, Link} from 'react-router' ... I love this project!
Try configureawait(false) synchronization contexts are different in unit test vs asp.net app most likely 
I've built an app with Xamarin Forms for iOS and Android. I agree it is a little tough to get started with Xamarin. Some of the documentation is not that great and a lot of the samples they provide are really incomplete and don't seem to follow the MVVM pattern they often recommend. As a result, I feel like I don't truly understand how I'm supposed to build an app with Xamarin. Anyway, I'm a beginner with programming and what I have is the first app I've actually made, but you're welcome to look at it or ask me questions. I definitely know a lot of my code is not done how it's supposed to be done, but it works so right now I'm happy. I'm sure by the morning you'll find people who have a lot more experience. [Here's my repo on GitHub](https://github.com/kjhinds/ClassManagement)
Nah, actually I just read about it in some GitHub issues. For example: https://github.com/Fody/Costura/issues/160
This has some custom license. I'd stay away.
Thanks for posting this. Going to give this a whirl tomorrow.
https://github.com/toddams/RazorLight#parse-strings I don't see how this is parsing anything. This is **rendering** the template using Razor. Sure, parsing happens behind the scenes in Razor, but that's only one part of what happens - and definitely not the main point of this API. And if you cache it (and I think you do) the parsing only happens **once** - the rendering happens every time. I've pointed this out to you already before. Please get your terminology right.
use your windows password 
This is bothering you so much, that you decided to write it twice?) End user will get parsed and rendered result, even if parsing is performed behind the scenes, it is still happening. 
And is this parsing happening every time you call the method? I was having faith in your competency and hoped you'd have learned it by now. And frankly, yes, it irks me when someone is using established terminology so blatantly wrong.
It's the GitHub icon in the site's footer
Hm? I've provisioned apps on my own iPhone without them expiring, granted it was from Xcode. Weird. Also, seriously, it's $99 for a year, it's not like it's insanely expensive.
Edit: you have to restart your editor after installation of the font. Even though it gets listed in the font selection it still uses a default font if you select it. -&gt; after a editor restart everything works fine... ~~(I am always open to test new monospace fonts against Consolas with cleartype on windows. My results for "Hack": )~~ ~~(a random Code snipped in each font: http://imgur.com/a/L82wr)~~ ~~( * font is very wide (15 % wider than consolas) --&gt; longer lines * weirdly uppercase glyphs are smaller than lower case glyps ( i is taller than T for example ) * Serifs all over the place. (Consolas only has serifs were they help to distinguish similar looking glyphs like upper case I and l ). If you pinch the eye it gets unreadable faster than Consolas because everything is cluttered with serifs. * font is very small (wide and small) -&gt; again less readable than Consolas * It isn't optimized for ClearType. Font sizes smaller than 11 look blured * ( and { look very similar )~~ ~~(Conclusion: Not my cup of glyphs...)~~
How does this handle dual screen and 4k?
Currently only uses your primary monitor, but will do the 4k part just fine. 
The other day I wanted to display a toast pop notification in my Winforms app. Some kind of On-Screen-Display that notifies the user when an event happens in the app. The only thing was I coudn't find anything out there that suited my needs. This is the result. It builds on some code I found on codeproject.com. It can display any HTML at any location on the screen. It can also display images aswell. The link to the code can be found here: https://github.com/OceanAirdrop/WinformsHTMLToastNotification
I feel your pain. I wish I was able to say we have this or that awesome technique that we use but I cannot, our background processes that require user input are huge clusterfucks, still to be refactored. What I can share with you is some experience into common pitfalls and obstacles. The most prominent is not, as you are describing, prompting the user for input, but rather taking that input and having your process "continue". Ideally, your process code would look something like this: ... some code ... var userInput = await UserInput.GetSpecialUserInput(parameters); ... continue with code ... To create an awaitable user-input method would be a challenge in and of itself, combining features such as messaging, locking and signaling. I can go into more detail if you want, but I don't have any demo code or fallback knowledge, so I would be theorizing too much to be comfortable.
+1 for Consolas, the font that just keeps delivering!
The server binds its web server to 22006, it should be accessible by any device on your network. It also supports UPNP so you can access it from your public facing ip as well over net. All you need to do is install it and run it. 
I usually pass a reference to the UI thread to the background task for UI updates. Hasn't failed me yet. 
This is really neat! I like it. What license are you releasing it under?
http://www.mantratocode.com/c-sharp/create-window-service-using-topshelf/ 
Does Avast have a war against everything? I have three different commercial software products at work that Avast Endpoint *really* likes to shit on for some reason.
I'll start with my usual MVVM plug for Caliburn Micro being the best framework I've ever used. To take an idea from them, it seems like you need something like an [IWindowManager](http://www.mindscapehq.com/blog/index.php/2012/03/13/caliburn-micro-part-5-the-window-manager/) that you can inject into your ViewModels. ***Note***: That article is a bit old, but seems to still be accurate from what I see.
You haven't installed Hack properly and it uses some other fallback font. Just compare how 'T' looks on github and in your image.
Damn, You are right. I installed it correctly but didn't know that VisualStudio needs to be restarted to properly use it (now that i have i see a much different Font). I'll update my findings 
I haven't because I'm limited on data right now so downloading and installing would not likely be possible at this point. There has to be a worthwhile tutorial somewhere though?
Yes, but it totally depends on the context. For example say you were building a game that has an in-game currency. You might have a check when they go to buy something that is like if (myInventory.Gold &gt;= item.Cost) If this check only happens client side, then someone looking to take advantage of your system can find the pointer for myInventory.Gold in RAM and adjust it. In this example this logic should likely also be mirrored behind the web api. If however you are building an application that a customer has requested and will only be used in their orgnaization, and is specific to their organizational needs, then it is reasonable to expect that they will be using it in the prescribed manner.
Linq does not think the query will benefit from being parallelized because it is only running a simple comparison operator on each element, so it runs the query sequentially. The times you see are there the sequential time, plus the overhead of converting it to a ParallelEnumerable and other implementation details. If you use this query instead: return (from num in Rolls.AsParallel().WithExecutionMode(ParallelExecutionMode.ForceParallelism) where num &gt;= Target select num).ToList(); You force Linq to perform the query in parallel, which gives you lower performance with a smaller array than sequential because the time spent spinning up and managing the threads outweighs the minuscule parallel gains. However, you will see slightly higher performance with a larger array. The general rule of thumb is that if an operation doesn't take much time to execute (in your case, a comparison, which is extremely quick) it's not worth parallelizing. Reference: https://msdn.microsoft.com/en-us/library/dd997399(v=vs.110).aspx
When working with MVVM view models I like to draw my separation by looking at the view model and deciding can I swap out my user interface for the command prompt. Having the view model touch anything UI specific doesn't make sense to me. Confirming if a user actually want's to save or delete something isn't the view models problem. Because of this anything involving showing a new window or dialog box gets placed in the view code. 
It's in the test projects within the solution.
I'll share something I had issues with when copying DLL's from one machine to another. Windows has a feature to block harmful files from being opened. The way it does this is transparent to the user (us) by blocking it at the driver level. You can see the files in file explorer but if you try to load the DLL you'll get a file not found exception. If your transmission relies on loading anything right click those files and make sure they are not blocked. The biggest issue I have is it also does this to Excel files downloaded from microsoft partner sites and Excel doesn't handle the issue very well. If you try to open a blocked excel file it will launch excel and then just sit there doing nothing. No errors thrown or anything, just doesn't open the file. 
I see! This is a business workflow application. I don't think I need to worry about the clients doing anything malicious. Your points are still helpful, though, and give me somethings to think about during design.
Post your code please.
I did some testing. Looks like things have changed in MVC/WebApi 5. Install the WebApi template from vs2013, choose organizational accounts and hook the project into AAD. Run the project in Chrome, in the console run this command fetch('/api/values') You should get a 401 and **NO** 302 back to a login page. Previously we would get the same behavior as WebForms and MVC where if not authenticated we would get the identity provider login page. No more with webapi. &lt;Error&gt;&lt;Message&gt;Authorization has been denied for this request.&lt;/Message&gt;&lt;/Error&gt; So it doesn't look like it works anymore out of the box but *it does*; it just isn't giving the behavior we're used to in previous versions of webapi. The 401 is the proof. Install another template, webforms or mvc and also click the webapi checkbox. You can add [authorize] to those controllers and get the behavior a cookie authentication middleware provides in owin. http://stackoverflow.com/a/20151805/112397 https://brockallen.com/2013/10/27/using-cookie-authentication-middleware-with-web-api-and-401-response-codes/
I have not messed with the app but the site is very pretty :).
Almost true, but PLINQ doesn't (and really can't) look what your delegate (in this case `num &gt;= Target`) is doing, which is also stated in the article. 
Unless this is a homework assignment that requires StreamReader: &gt; string[] lines = File.ReadAllLines(mainMenu.deckFile); &gt; for (int i = 0; i &lt; lines.Length; i++) { // Not foreach, since were modifying it &gt; if (lines[i].Equals("magic text")) { &gt; lines[i] = "changed text"; &gt; } &gt; } &gt; &gt; File.WriteAllLines(mainMenu.deckFile);
`int number = -1` is superfluous (the `= -1` part), since `TryParse` will always assign the variable. You'll never end up with -1. If the parse fails, you'll end up with 0.
Fixed the typo, still not working. http://imgur.com/a/wtbS8
What exactly are you trying to unit test? Is it some functionality that is dependent on the `Get_Entity()` method and you just want a mock that returns a specific `T` without making a database round trip? If so, and you don't have this designed to an interface, make the method also `virtual`. You can then mock this class and substitute a mock implementation of it with pretty much any proxy based mocking framework. If you need to test business logic that exists in the Get_Entity() method unrelated to the query, then what you need is a context factory as a class member. Then instead of `using(var context = new DbContext())` you do `using(var context = _dbContextFactory.Create())`. You can find plenty of examples on how to implement the `IDbContextFactory&lt;TContext&gt;` interface. Then in your testing scenario you inject a second implementation of that same interface which returns a mocked `DbContext` instead of one that needs a database. 
So looks like I was a total moron and forgot to bundle the client into the installer. Redownload the installer and it should be fixed.
That went over my head, eli5?
I agree with you, but unfortunately this type of thinking will just get the MVVM purists into a frazzle.
Quite possibly. I struggle with Avast blocking my C# projects, **without** notifying the user that it does it. Took ages to narrow it down to Avast the first time around.
Ive seen that issue, I wish that was it. I'm compiling the code on this machine using vs 2013 and 2015 both give no warnings or obsolete code. I was able to test it today at work on a 8.1 system and it also works flawlessly on that, just not 10 with updates. So the code runs perfect on 7, 8, 2008 server, and mono without issue just not 10. Its a real pain trying to debug code that works....
People who complain about that don't understand what the "view" part of MVVM is. Far from being a purist, they usually end up dumping far too much view-specific logic into the view-model when they should be writing custom controls.
eh, why the downvote? Does someone need a cookie or a nap?
I really enjoyed the book Clean Code: A Handbook of Agile Software Craftsmanship.
https://msdn.microsoft.com/en-us/windows/uwp/monetize/launch-feedback-hub-from-your-app
I worked on something a bit similar, but the trouble is that youtube keeps changing something or other, and thus requires constant updating of any library which hopes to track it. Good luck with yours, though.
https://www.youtube.com/watch?v=aWiwDdx_rdo This is well worth the time, They also make the same recommendation at the end as /u/rockstarcoder makes and I am reading it myself Clean Code: A Handbook of Agile Software Craftsmanship. After 8 years working as a coder in C, C++ and C# and 20 years as a hobby coder that one video alone changed the way I work on legacy code for the better, The book is making an impact too.
I would recommend a few things: 1) Check out the book "Code Complete - 2ed Edition" by Steve McConnell. I have been in this business a long time and i use this book religiously. NOTE: This is not to downplay the quality of Clean Code. I liked both the books. 2) Check out books on quality design and code in other languages. For instance, i really liked the book eloquent ruby - though it's aimed at ruby programmers, i just feel that many patterns and suggestions apply across languages but your mileage may vary. 3) Religiously spend some time checking out various code repositories in places like Github. For instance, one very good source of quality C# code is the source for dotnet core. check out the library source and use that as a template. 4) Seriously consider TDD, and though you may not strictly adhere to it, always write tests - both unit and functional/integration - as these are the hallmarks of a professional coder. 5) Turn your compiler warnings to the max and lint your code. There are also many static software analysis tool which offers suggestions on improving your codebase. 6) Try to get your code reviewed as often as possible by people who's coding skills you admire. 7) Participate in open source projects. You get a chance to hang out with your peers in the industry and get active help from them towards improving your coding skills. 
While what you are suggesting about "further generation" is valid, suggestion that one should not care about how their code is written is a very bad advice. Pursuing a good code is a goal in itself, and there is a chasm between a good code and spaghetti-but-works code.
I bet you anything that: var results = new List&lt;int&gt;(); for(int i=0; i&lt;rolls; ++i) { var roll = RollDice( sides, modifier ); if( roll &gt;= target ) { results.Add( roll ); } } runs faster than either, in addition to being much less code and easier to understand.
If the API has a .wsdl available, you can[ add a service reference](https://msdn.microsoft.com/en-us/library/bb628652.aspx). This will generate a bunch of code for you, including a service class and an interface version of the service class.
- Effective Java by Josh Bloch - Clean Code / Clean Coder by Robert C Martin - Continuous Delivery by Jez Humble - Release It! Design and Deploy Production-ready Software by Michael T Nygard They're all very easy to read and, for me, made me think about my code differently than I did before I read them. Edit: Just read your self text. If you're truly looking to make your code better, it most likely won't come from a book. Books / sites / tutorials do a good job of introducing concepts you hadn't thought about before, but what you need is not knowledge - it's experience. I would suggest that you browse open source repositories and find a repo that has the kind of code you want to write in it. Start by understanding the choices those developers made and why. Pull the code down and work with it. If the project needs help and you can contribute, do it. You get better by doing and a lot of projects need your contribution. Expect and welcome criticism. That's how you get better. Lastly, if you work at a corporate entity (e.g. in "the enterprise"), realize that the code you write from day to day is going to look shitty sometimes and that's okay. Sometimes that's even a [design choice](https://www.youtube.com/watch?v=USc-yLHXNUg&amp;index=4&amp;list=PLEx5khR4g7PIBIQHkNnOyRy2kclkq25Bh).
Download the trial of resharper and run inspect code will bring plenty of points back 
If you are doing plain C# stuff it is better to stay with the System.Net.Sockets as the API is more user friendly and requires less switches between the .NET runtime and COM. You might also find this interesting, in case you haven't seen it already, https://msdn.microsoft.com/en-us/library/windows/apps/xaml/hh452976.aspx 
Then what is the use of Windows.Networking.Sockets? The linked article talks about permissions and manifests, but doesn't really help select which api to use.
Mostly to be used by C++/CX and JavaScript, because WinRT is the replacement of Win32 going forward. .NET already has its own sockets API. Using Windows.Networking.Sockets from .NET is only required if there is any feature currently not exposed to .NET, like sockets over Bluetooth (just an example, not checked if this is the case). Think of it like using .NET sockets or doing P/Invoke to Win32 sockets.
Been looking for a tutorial like this. Thanks! I'll check it out.
Some feedback on your site: [I would change the navigation buttons on the top/bottom to say next/previous or something.](http://imgur.com/a/I9xGV) Including the current page title isn't very intuitive/it's a bit confusing.
That makes a lot more sense. Thanks.
You could use a List of a custom class instead of a Struct. There is a very simple example [here](http://www.wpf-tutorial.com/datagrid-control/introduction/)
Yeah... I've still been working a bit on the layout/look &amp; feel of my website. I'd prefer to use icons instead of text that says "next," and "prev,". Before I used "&lt;&lt;" and "&gt;&gt;". Do you have any suggestions for possible icons?
I typically create a class that matches the structure of the incoming data. Usually the data is either XML or JSON format. From there it is easy to deserialize the data into a List&lt;YourClassHere&gt; collection. Then bind the ItemsSource property of the DataGrid to the list.
Our new .NET course will build on the basics of MVC - we'll be setting up Entity Framework to read/write from the database, show how to get data onto the screen, make views easier to maintain, create 'cleaner' URLs, and validate user input. Hope that helps!
A child page of this has some sample code, which is very strange. Nowhere in the code do I see the use of socket.ReceiveAsync() or SendAsync(). https://msdn.microsoft.com/en-us/library/windows/apps/xaml/jj150599.aspx Very confusing as to what tools to use for what purpose. Microsoft needs to stop with the pain. http://stackoverflow.com/questions/9733292/replacing-socket-receiveasync-with-networkstream-readasync-awaitable
I'm not creating no. Not sure to be honest. All I know is its queried using parameters in a URL and returns an XML file
Which course is that? If you wouldn't mind -- could I get a link?
Mnemonics won't help your students. Mnemonics are tools for memorization, but you need to build *understanding*. I think that if you probe a bit deeper, you'll see that the struggle is with *when* and *why* methods/objects/classes should be used. You won't find many mnemonics for learning to program because it's not an effective teaching tool. I think you'll have a better time teaching with analogies - e.g. a class is like a job (e.g. PoliceOfficer) and the instances are individuals with that job. This will clarify the when and why - e.g. create a new class to fit a specialized task, create new workers whenever that task needs to be performed. If the student has just forgotten the syntax for something, make sure you teach them good information literacy skills so they can just look it up in 30 seconds.
Just because the stack trace is the same, does not mean it's the same bug.
Is there a command line version?
Can you provide some examples of code that is tripping you? VS Community is almost feature complete. Some things like UI Unit tests are missing .. but it has plugins and NuGet and all the language features you'd expect. It's free. What do you have to lose from downloading it?
Regarding importing classes with the `using` directive, in Visual Studio if you type the class name that you want then press `ctrl+.` it'll give you a context menu with an option to automatically add the necessary `using` line. There's also a way to change the default C# code file template so you can add some additional `using` lines that you frequently use. (Don't know how to do this off the top of my head though, sorry.) 
That wasn't the point of the experiment, though. I'm not a novice, even I know that way is likely better, or at least cleaner. This was pretty much the first thing that came to mind to give me practice using LINQ.
Well I'm uncertain but it seems like you're trying to store a single student in a variable expecting to store en enumerable. If you're trying to get a list of students that have a score greater than 90 then you'll need to encapsulate the LINQ query in parentheses and use .ToList(); So (from student in studentList where student.grade &gt; 90 select student).ToList();
Thanks but I tried that, didn't work.
We released an intro course called "Try .NET MVC" that covers the basics of MVC. Towards the end of the month we'll be releasing "Forging Ahead with .NET MVC" which contains the above content
These are not really "imports", these are declaring the namespaces that you don't want to have to fully qualify. I have a feeling this is just new to you. I don't know how VB.net did this, but you'll get used to it quickly and it's not any sort of barrier in general. 
I think you want Student.students - students is a static member of the Student class, presumably the query is outside the class's code. Edit: and you need to make students public
Are you assigning studentQuery outside of the Student class? If so, it looks like your student list is private and wouldn't be accessible. 
Thanks, tried that, still not working.
I would guess because the students member doesn't have a "public" access modifier, and the default is private.
Yeah, tried changing it to public, still not working.
Boom, that worked, thanks alot!
I understand that it just allows you to access more of the programming language, I'm just familiar with how Java and C++ use `import` (and also `include` for C++, which, as I understand it, can be used interchangeably with `import`), and VB uses `Imports`, to allow you to access those parts of the language. I don't have extensive use with Java and C++ like I do VB, and VB doesn't have much in the way of "importing" in my experience, it's almost all just there when I need it, so that's what's mostly been bothering me, alongside the default "imports" not including what I consider to be basic requirements. I think I may have come off wrong in the OP explaining how this bothered me. Just going from no "imports" to having several defaults included, and still needing several on top of that for the same function of the code is jarring.
What error are you getting exactly? 
If you're using MessageBox outside of forms that is probably code smell. A message box is an implementation detail and belongs with UI code. When other layers need to display a message, you should have an abstraction over it. So the exception would be the abstraction implementation in the case that it isn't a form. This makes the code read cleaner and makes it easy to port your code to a different UI platform such as WPF or UWP. You could be totally doing this already, obviously I have no idea. It just seems that if you're manually having to add the necessary using directive, it tends to point that way, since visual studio does a pretty good job at automatically giving you relevant using directives when you add a new class file. Either way, this is just a helpful tip for you or anybody else reading this comment.
&gt; basic things like ArrayLists I haven't seen anyone use an ArrayList in years. You should be using a generic List&lt;T&gt; instead unless you really need ArrayList. 
uh, why the downvote again? 
At https://github.com/TortegaFR/2048/blob/master/02048/Game.cs#L160 a do..while(this.map[randCol, randRow] != 0) will be more succinct.
There are a lot of "magic numbers" scattered throughout the code. You might want to replace them with well defined constants.. it will also make it easier to refactor your code in the future.
&gt; VB made some algorithms a whole lot easier to write, and that's mostly what's tripping me up. Generally I think the opposite. Most of what trims away code in VB is bad patterns anyway such as implicit conversions and late binding. &gt; I never had to import other classes in VB like I do in C# No, but that's because the default Visual Basic Forms template has a lot of predefined namespace imports. You can see these in Project-&gt;Properties-&gt;References under "Imported namespaces". You'll see most of those that are listed in the C# code and some more. Visual Studio, as already mentioned, can suggests `using` statements for you with `Ctrl + .`. &gt; Anyway, I was wondering if there are any more common stumbles that some of you made when transitioning from VB to C# * VB uses late binding unless you specify otherwise. C# uses static binding unless you specify that the compiler should use late binding on a variable. * C# is more strongly typed * VB function parameters unless prefixed with `ByVal` are passed by reference. In C# they are passed by value unless either `out` or `ref` is used.
hey, that's a nice collection of tutorials there. Great work!
Wow. My council would be "go read a book" and do tutorials. For your healthStat, indeed, you create it in the while loop, but it should be global if you want to use it elsewhere. But mostly, C# is an OO language, meaning you'd better create classes that you might reuse in your code, instead of creating random var "à la volée" when you need them. Basing the effectiveness of akStat? On what? Add a heal mechanic? That's very easy, you just have to increment the health on some events, now figure the gameplay for it so it's interesting. Many people begin with small games, it's a good exercise, but doing it as a console app as if it was procedural isn't a good way. Try n find other projects (type "rpg c# demo" in google, that should help) that you could use as a basis/example on how to articulate it. Good luck
You should add some comments.
Being natively a French speaker, it was easier for me and I didn't know the English expression. Thanks for this information.
You don't need to create a Random instance every time you want a number, just use the same one. For writing text, look into string.format (already built into WriteLine) &gt; Console.WriteLine("\nYou Have Entered &lt;" + atkStat + "&gt; For Your Health Stat. Are You Sure?"); // Yours &gt; Console.WriteLine("\nYou Have Entered &lt;{0}&gt; For Your Health Stat. Are You Sure?", atkStat); // New &gt; string x = String.format("\nYou Have Entered &lt;{0}&gt; For Your Health Stat. Are You Sure?", atkStat); // For vars Beyond that, look up OO.
Nice, I was unaware of that one. But then I target .Net 4.0, just too much of a hassle for me to go around pushing people to upgrade their Net Framework. Especially on pirated copies of windows, installing a new net framework can be a real pain.
I think even undertaking this experiment on this example betrays a gross understanding of how your computer works. The work you're trying to parallalise is literally a single "&gt;=" operation.. almost certainly a single instruction on your CPU which will take less than a nanosecond to execute. Hypothetically, a quad core CPU could execute 4 of these at once (if you had 4 tight loops, running in kernel space, one per core), but you're massively naive if you don't think the overheads of LINQ, task creation, context switching, scheduling etc isn't going to dwarf this tiny ammount of work by hundreds of times.
You don't need a new version of .Net, just a new version of the compiler. You can still target .Net 4.0 using C# 6.0.
Ah. alright, thanks. Also IMO OO is very advanced for me to learn, and would take a long time anyways to change my code. I'm still really learning the basics.
Hum.. Remember I ran into some issues when trying to use [CallerMemberName] with 4.0, but seems that's usable as well.. Great! =)
Don't be silly, start small. Just make a small Player/Unit class, and move stuff like stats into it. https://ideone.com/uEZoyK Now you can create one for the player, and one for the monster, instead of having 6 variables for it, you just have the two. Then you can add something like: &gt; public void TakeDamage(int amount) { HealthStat = Math.Max(0, HealthStat - Amount); } For taking damage. The Math.Max isn't really required, but it keeps health from going below zero, if that matters. Don't worry too much about it, just think, "hey, grouping these variables together makes sense!", and it'll come naturally ;)
I've been using ArrayLists for so long that I haven't moved over to List yet, but I probably should. I always store objects (always of the same type) in an ArrayList, not primitive types who need to be converted to objects to be placed into the ArrayList, so it's served me well in the past, but I suppose it's time to move on to something better designed to handle keeping objects of a single type. That SO says generics came out with VB.NET 2.0, which would be VB 2005, which is when I really started using .NET after VB6. I jumped from VB6 to VB.NET 2003, but quickly moved to 2005, and never looked into what had changed. As long as what I was trying to do worked, I didn't care. I'll definitely start changing to use `List&lt;T&gt;` now since I'm apparently over a decade behind the times. As for namespaces, I know what it's doing but couldn't seem to express what I meant to say. You got it right, I just don't have to call its full namespace, just the shorter part.
So many people in here are telling me that ArrayLists are deprecated. I'm apparently way behind the times in moving on to `List&lt;T&gt;`. As for TPL, I'll have to look into that. That definitely seems more efficient than what I've been doing. Thanks!
You're not the only one telling me that ArrayLists are deprecated. Apparently I'm off to convert them all to `List&lt;T&gt;`!
`Option Strict On` and `Option Explicit On` were one of the first things I put in all applications I wrote in VB. Early binding is a mandatory coding practice in my book because I don't want a runtime error because I didn't declare and bind something to a type and the compiler didn't catch it. I also hate implicit conversion issues, hence `Option Explicit On`, which catches all that. Someone else did mention that I can view and change default namespaces, and I am definitely going to look into that. In VB, I typically always found a way to make functions pass by value, and always explicitly said `ByVal`, unless I was writing a recursive function and needed a `ByRef` (I also occasionally used it in other functions, but mostly recursives). However elegant recursive functions are, I get lost in them sometimes, so I always do my best to avoid them.
You're correct about the less typing. I couldn't seem to express myself correctly on that. Same access, less typing. I didn't do a lot of C++ coding, more Java than C++, and it appears that `#include` in C++ was for including custom files and not namespaces. You're also correct on that.
The OOP recommendations aside, the reason healthStat is undefined is because it is created inside the while that runs from Line 31 to Line 117. That means on line 118, healthStat is out of scope and no longer exists. While making a class to hold some of these values would be best, if you simply move the declaration to outside of the while loop starting on line 31, you will have access to it on line 158. Looking at the code in VS, pointed out to some odd spacing, which I think is contributing to misunderstanding of what loop in which the variable has been declared. Some of the while loops have the contents tabbed in 1 tab (4 spaces) while others have 2 tabs (8 spaces). Also, some of the while loops have the brackets at the same indent of the while, whereas others have the brackets indented from the while. If you clean up the spacing and line up the brackets properly, where the loops close should be easier to spot. One last note, even if not doing OOP, or if the concept of OOP is intimidating, at least through in few methods into logically break up some of the code. That will make it easier to digest for everyone.
Great work.
Code in your view models is business logic, while code in the views themselves tends to be UI and usability logic. I wouldn't worry about it, just because it is a "view" doesn't mean it doesn't have logic that runs it.
&gt; and you'll be making 6 figures in your 20's. Not guaranteed. If you have the drive, know the right people, and push yourself to always do better work, then probably. But 6 figures is not a given for all programmers. 
Think about something you do a lot, and automate it! You now have the tools and enough experience to begin solving real world problems. Don't worry about if there is already something that solves the problem, make something that you could use. As for myself, I needed an application to find the biggest files in a certain folder and all sub folders. You can find something that you will use too.
What's the benefit of a Struct over a Class in this case?
See also CallerMemberName to avoid this class of bugs. http://grenangen.se/node/75
I think UWP requires you to request permissions for such tasks. Check the manifest settings.
Cost and platform support. 
I couldn't agree more. MSSQL is nice and all in most situations, but sometimes it would be much easier and more lightweight to just deploy a Postgresql-db or MariaDB instead. If I'm not mistaken MS are in works of making MSSQL work on multiple platforms, however I don't know the current status of this
oh wow...well I sure do feel dumb haha. Thanks!
yea your code is fine but just as a sidenote: on later versions of .net you could call characters.First() and maybe that's what they were looking for but it doesn't show in the intellisense which leads me to believe it's set on a lower version of .net but the validation is for a higher version. /shrug
at least now I know I'm not crazy.
[Here is an current list of providers for EF Core (newest)](http://ef.readthedocs.io/en/latest/providers/) [Here is a list of providers for EF6](https://msdn.microsoft.com/en-us/data/jj730568#providers)
`lineC.ToString("0.000");`
I think it's odd that you did a game tutorial with TCP, and a file transfer tutorial with UDP. With games, dropping and losing packets is often fine. With files, losing packets is absolutely unacceptable, which makes the whole process of transferring a file much less efficient. Any particular reason you went this route?
Wow. I have been stuck on this for hours. I was pretty sure I tried that but apparently not. I can't thank you enough.
Also `nameof(PropertyName)` when you want to reference another property or are working with a legacy framework and can't easily add `CallerMemberName` support. [nameof](https://msdn.microsoft.com/en-us/library/dn986596.aspx) requires C# 6.0 though.
I use code first with migrations on PostgresSQL (npgsql), works great.
I think I'll try this first
Welcome to UWP, it's sorta sandboxed. To get to files you have a few option: You have to include the permission to the "Videos", "Music", and/or "Documents" folders. Then your app can browse through those files using the StorageFolder and StorageFile objects. Other folders and files can be accessed **IF** the user uses a FolderPicker to select that folder. The good news is that once a folder has been selected you can remember it's location via the FutureAccessList object. Sub folders and files are accessable, so if the user selects "d:\" you will be able to navigate through all sub folders and files on that drive. 
Agree with the other answers. If you had to do it manually, you could have also multiplied by 1000 (or 10,000), performed the rounding as you would an integer, and then divide back to your result.
wat?! Um, that sounds like some sort of issue regarding your work's proxy and SSL connections (my site tries to use SSL in all places). If you want to, I can send you the HTML of the tutorials. 
Yeah it's weird. They just installed a new proxy that is a lot stricter, and it doesn't even let me request an exclusion for it. Says the domain name has to contain a period, which it obviously does. I can get it from home, so I'm good.
One other option is to us Math.Round. http://stackoverflow.com/questions/257005/how-do-you-round-a-number-to-two-decimal-places-in-c
One reason is that Select is lazily evaluated and can have additional extension methods after it until it is evaluated such as by a loop, ToList, or ToDictionary. Being lazily evaluated can provide benefits like lower memory usage, processing streams or when you dont know the size of a collection
`ForEach()` is only defined for `List&lt;T&gt;`, by default. In addition to being usable on anything that implements `IEnumerable&lt;T&gt;`, though, `Select()` is *functional* and *lazily evaluated*. Practically speaking, `ForEach()` also takes an `Action`, while `Select` takes a `Func`. That it's functional mainly makes for cleaner code. That it is lazily evaluated is a bit of a double-edged sword, but can be a lifesaver in a number of situations. That it works for anything implementing `IEnumerable&lt;T&gt;` is nice, because the same approach can be made to work for lists, arrays, enumerations implemented with `yield`, etc.
Never be embarrassed to ask why. I mentor newer developers and I like it when they ask why. I still ask why. You definitely hot some good answers here. List vs. Enum: enums give you compile time membership checking which gives you intellisense when using visual studio, but they are not good if you need run time configuration of members. Use them for static lists that control your program or when you want to define all the legal choices in a interface contract. 
just encapsulate this data in a class. public class Contestant { public string Name; public string TalentCode; } normally you'd make these properties but im trying to keep it as simple as possible since you're new. now you can do: Contestant[] myContestants = new Contestant[totalContestantsCurYear];
Thank you for the reply, Sadly we haven't touched classes just yet.. So when I do this, would I create one for loop like... for(int i = 0; i &lt; myContestants.GetUpperBound(0); i++) ... Then within it have the user type in a name, store that like myContestants[i].Name = Convert.ToString(Console.ReadLine()); Just double checking if my guessing for a class is correct. Thank you
Both .Select and ForEach have a fatal flaw - you cannot alter the number of items in the list while in the loop. Old school for(;;) loops for the win. Also, the for loop has a lower memory impact. No need for intermediate variables (enumerators) or objects (dynamically created classes) to be created. That being said, I like ForEach because it looks cleaner.
So far, the most I've been able to do is load a single image from the file picker and put it in an image control. What I really would like to do is open an archive of images and load them all into image controls.
there are peformance implications with all of these choices, it is good to spend some time experimenting and testing so you have a good intuition for it. sometimes as far as convenience and clarity goes, a for loop might nice be just as nice as foreach might be just as nice as select. In those cases it is good not to throw cycles away.
How is that a fatal flaw of .Select()? What have you tried to do with it that you couldn't because of that?
&gt; Object.forEach( x =&gt; x.HTMLrequest) Am I missing something here? What is this line supposed to even do? There's no forEach method on Object. If Object is supposed to be a List&lt;T&gt;, ok, but then what does x.HTMLrequest do? It looks like just a property getter, which should make this line essentially a no-op unless calling the getter has some side effects, but how gross would that be? Why not either just tell us what you're trying to accomplish or show us real code? I'm guessing your senior told you to use enumerables, not enums. 
Need to be careful with this function. May not operate quite as you think. http://stackoverflow.com/questions/977796/why-does-math-round2-5-return-2-instead-of-3
&gt; That it's functional mainly makes for cleaner code. That doesn't make any sense. You can't say "A is cleaner then B" when A and B don't do the same thing. 
Its actually a good change. What will happen is rather than you having to right click on the project and Add Reference VS15 will search NuGet to see if it knows about the type you want. If it does, you will be prompted to add the NuGet package. Pretty awesome, right? If NuGet has no idea what SsfcUltrasSuperAwesomeWidget is then you can still add the reference the old way. The idea behind this is they are completely changing from packages being included by default to matching the open source stack where libraries are added explicitly as you use them.
&gt; That it is lazily evaluated is a bit of a double-edged sword, but can be a lifesaver in a number of situations. I've seen so many people shoot themselves in the foot because of this. General rule of thumb, never iterate over an IQueryable. 
I don't understand why so many books and courses insist on teaching how to use arrays. They are a pretty bad datatype that should rarely be used. 
I think you actually mean to truncate to 3 decimal places. "Round down" makes no sense in itself. Rounding is either up or down, depending on the next digit.
It might be not showing because there's no `using System.Linq;` at the top.
Your post lacks information. Object doesn't have a forEach method and the naming goes against C# conventions so this code is probably not real. We also don't know what enums you are talking about. Are you talking about IEnumerables which is something totally different from enums?
Yes. You can also specify the rounding method. That question was asked because the default behaviour was not what the user expected.
&gt; intCollection.Select(i =&gt; i.ToString()) I wouldn't put the example like that as it doesn't do anything. Rather, this does something: `var someStrings = intCollection.Select(i =&gt; i.ToString())` That lack of side-effect is important for the difference between `Select` and `ForEach`.
I managed to get what I wanted out of it. Here's my working code: // MainViewModel.cs private async void OpenFolder() { var settings = new FolderPickerSettings { SuggestedStartLocation = PickerLocationId.DocumentsLibrary, FileTypeFilter = new List&lt;string&gt; { ".rar" } }; StorageFolder folder = await dialogService.PickSingleFolderAsync(settings); if (folder != null) { var files = await folder.GetFilesAsync(); } else { Debug.WriteLine("Operation cancelled."); } } // ArchiveService.cs var image = new BitmapImage(); try { using (var stream = await file.OpenAsync(FileAccessMode.Read)) { var archive = RarArchive.Open(stream.AsStreamForRead()); foreach (var entry in archive.Entries) { if (!entry.IsDirectory) { var entryStream = entry.OpenEntryStream(); var memStream = new MemoryStream(); await entryStream.CopyToAsync(memStream); memStream.Position = 0; image.SetSource(memStream.AsRandomAccessStream()); break; } } } } catch (Exception ex) { Debug.WriteLine(ex); } return image; } This worked. Instead of using ArchiveFactory, the `RarArchive` class worked. I'll need to accommodate for zip files in the future too. This class only handles rars.
You should though; procedural will lead you nowhere. Your code works as long as you use it as you should but that's not what your users will do. You have a "int.parse" for the healthstat, but what if your user inputs AZERTY ? That's a breaking point. You place the confirmation of the user in a string, and you read it to check if he said yes. What if he said no? There's no point in your code where you deal with that. while (healthStatBool == false) { do { if (healthStatConfirm.ToLower() == "yes" || healthStatConfirm.ToLower() == "y") { healthStatBool = true; } } while (healthStatBool == false); } This is AWFUL. You have a while, then a do while uncorrectly written that checks the same boolean? What's the intpoints var you declared at the beginning for? You use it in a weird verification at the end, but what did you expect? Writing in the console "Please redo" won't restart your program, and as you don't have methods, you can't re-call any of them. An example to help you understand : You prompt the user asking if he wants to fight monster, then you check if is answer is yes. Good start. What happens if his answer IS yes? You write "Ok suit up" then you launch the fight. But what happens if his answer is different than yes? You DON'T write "ok suit up" and you still launch the fight. 
Congrats on working it out.
Yep ... even as a VB developer I dumped ArrayList as soon as List arrived in 2.0. 
Well, they're the fundamental building blocks of pretty much every collection and are still quite important...
I always use Math.Round
If you're using Linq to Objects, your example doesn't really do anything either, other than wrapping the original collection. `Select` is lazily evaluated, so nothing happens until you enumerate it.
I'd just like to add that using this to prefix local variables in a class is the expected practice (by default anyways) when using Stylecop which many companies including my own use for our coding style. 
I actually added: else { return; } I added more things in the else, but I'm too lazy to add them now.
I second this opinion. I love an API that gives me the option to omit parameters if I'm happy with the default values.
It is micro-optimization, yes. The resulting IL, when not passing any argument to `b`, will pass the result of `Array.Empty&lt;Object&gt;`, which will always be the same instance. Remember: The size of arrays can't be changed, so it's safe to re-use the same empty array instance. Instead you now have a method that also can accept `null`. Commonly you would throw a `ArgumentNullException` if someone passed `null` to argument `b`. Now it's suddenly a valid value - a huge difference in semantics.
It's a `params` argument. That already says it can be omitted.
Get a book on C# and read it. Check the side-bar.
Thank you. i currently have the C# 4.0 Pocket Reference and Simple Program design 4th edition http://pictures.abebooks.com/isbn/9780619160463-us-300.jpg 
Don't worry about it so much. Be prepared to struggle and suck at it for a bit. It's like any skill in that practice makes perfect, or better at least. The point of classes is to suck at something at the beginning and suck somewhat less at the end. If you do your best and have even the smallest bit of aptitude i'm sure you'll do just fine.
Ok, thanks! I guess i just needed some more encouragement. My best friend has been hounding me forever to take these classes (hes been programming for 10 years). I promised myself i would dedicate my time to learning this, i guess i just lack the confidence in my mental wattage! Thank you all. Will post the results of this class in December when i finish.
Thank you all for the advice. I am focusing on this, Death or glory style.
You don't *need* the { get; set; }, you could just as easily place a ";" there. Look up 'variable vs properties'. It doesn't ask anything, its just a small container so that you can group your variables together. Instead of having "int HealthPlayer1; int healthMonster1; int healthMonster2; int attackPlayer1;" etc, you just make one class which contains health, stats, etc.. and then you make an instance of that class, for each player/monster in your game. Logically placing them together makes for cleaner code, and makes it easier for you to make a new monster, without having to create 4 new ints. I'd say thats useful. Player newMonster = new Player { Health = 100, Damage = 50 };
 var waveList = new List&lt;wave&gt; { method0, method1, methodx }; Using the collection initializer syntax, and the fact that method groups can be casted implicit to matching delegates.
Don't fret over the syntax as much as you may think. It's easy to get overwhelmed by too much information. Focus more on the logic. You get to sit and do puzzles and problem solving! Think it out as you normally would in your head. "That can't be automated! You have to do it manually because you need to recognize key details and do different things in different situations!" Not as accurate as many people think. What is going through my head at that moment? Break it down and look for patterns. The skill is not about how amazing you are with a hammer or how you can use it in a game of baseball rather than a bat. It is about identifying your need and then picking the right tool for the job! Also, pull up some nice hour (or more) remixes on YouTube. Headset, blast that shit, escape into your own mind and it's just you and the task in front of you. I recommend some chillstep mixes, vocal trance, etc, because it didn't keep you focused on lyrics but you find yourself just bobbing your head and staying in the zone. But whatever works for you! =D
You'll be fine. If I can self-teach myself this you can do well in a beginner's class. Don't sweat it man. You'll do fine.
Sounds like you need "using System.Collections.Generic;" at the top of your file.
what is it you are trying to acomplish? why do you need an array of delegates?
Oh, believe me i will. You have all been warned.
Laziness is mentioned elsewhere in the thread, but I think deserves more attention. ForEach is eager, so it'll do all it's work upfront, even if later on not all the work was required. Linq methods that don't buffer, like select and where are lazy and only do work when asked. This can help performance by cutting out extra work, or it can hurt by doing extra work when used incorrectly. Linq also makes you think about which transforms to do to a set of data, instead of on how to do the transforms. It's subtle, but an effective measure to make code more readable and understandable. 
Indeed! People at work don't understand how I can work with headphones on but some good electro music really gets you into the zone :D 
This seems better suited for /r/learnprogramming , but honestly even then it's a almost 17 minute long video on creating a variable...
large peformance hit there, in case that matters for your use case.
learn programming not allow video 
Another option is to use an interface, e.g. IProduct instead of Product which only exposes what you want to expose.
Didn't think of that. That might be a good option. But is there a better solution? To completely decouple Product and ProductBuilder? if I have more builders in the future, that will make the class bigger and bigger.
How would that help? I would still have to expose the setters? 
ProductBuilder can create a Product instance which has the setters but returns an interface IProduct without the setters. Consumers of the builder then get back a reference that is seemingly immutable.
Fair point, but luckily I do have that luxury so I'm excited!
Thanks! Will be looking into EF.
You could use reflection. With reflection you can get private instance fields and set them. Example: https://gist.github.com/nitz/9b29f4b8f47052c60938cf36aadc389f 
Mmmm that's really similar to what I did before I started trying out delegates for my problem. It gets lengthy, especially atm where I have 30 methods and still growing. I can't seem to find a better alternative to the way I'm currently doing it in terms of having the 30+ methods. The only other way I can think of is having all my codes in one method, and based on an integer value it'll run a certain piece of code. Same kind of deal though, and I could also use a switch.
Yep. It's pretty simple, especially in the simple method call case. Check this out https://msdn.microsoft.com/en-us/library/bb349020(v=vs.110).aspx
TBH, that's what I'd do as well, but even without seeing your code exactly, there's probably a somewhat better way to architect your situation. But as they say, "first, make it work. then, make it pretty. finally, make it fast".
How would that work in Java however?
Exactly the same?
If you aren't needing any methods or anything, struct is fine. Edit: Also, why I gave my own response is this example really breaks MVVM which you really should be doing in WPF. It works but it's really easy to keep business logic out of your view and you should do it if you can.
Simple example and here is the output: [Imgur](http://i.imgur.com/jqaGLM3.png) [PasteBin](http://pastebin.com/9peQQzhX) Hopefully this makes sense. For your view model just model your struct after your data (what it sounds like you're already doing and you should probably put it in its own model struct by itself). Put it in a type of collection (I use ObservableCollection a lot because it really helps with the INotifyChagned stuff and UI refresing). Set your property after you deserialize all your data into whatever collection. For the view just set the data context to that view model (which will call the default constructor when the view is created.) Set the ItemSource binding on your data grid to your MyDatas property and bingo.
I'm still relatively new to this but do you have any locking involved? I ran into a case similar to this a few months back and it turned out to be dead locking
I might be getting the wrong end of the stick here but why can't you do something like this private void MyMethod(int waveValue) { switch(waveValue) }
What is your source on `Array.Empty&lt;T&gt;` being a 4.6 optimization only?
What about each of these failed for you? How do you know they failed? What research have you done? etc.
Then user Dapper instead. Seriously, working with DataSets DataTables is a massive PITA especially in comparison with a "micro ORM" like Dapper, which doesn't generate any SQL for you. It just maps the results directly to a POCO object, eliminating lots of code and potential for bugs. Seriously, DataTables and DataSets are the reason my hair line has receded as far as it has after ~12 years industry experience with C#. :D EF isn't the bees knees for all scenarios, granted, you've got to use the right tool for the right job. The best approach IMHO is to use EF for most queries and data manipulation because the productivity boost over DataSets/DataTables is enormous, but where heavy optimization is needed then stored procedures invoked by Dapper or the like is preferred. There's no one tool that works for all jobs and if you're doing a hugely complex query over massive amounts of data with EF you're doing something wrong. Hell, I'd prefer to just use plain a plan old SqlDataReader and map the result columns directly to my own POCO objects with hand written code than I would to use DataTables/DataSets. They are just massively awful, especially when so much better alternatives exist...
Expose some or all of your properties as `internal`, and then give them smart defaults (or have your constructor take 10 default-value arguments). Then create some extension methods that are allowed to update those internal properties. The Serilog `LogConfiguration` class does things this way, and I've copied it in several projects for my own use. public class ProductBuilder { public ProductBuilder(int id = 0, WidgetStyle style = WidgetStyle.Enormous) { Id = id; Style = style; } internal int Id { get; set; } internal WidgetStyle Style { get; set; } public Product Build() { return new Product { Id = Id, Style = Style }; } } public static class ProductBuilderExtensions { public static ProductBuilder WithId(this ProductBuilder pb, int id) { pb.Id = id; return pb; } public static ProductBuilder WithWidgetStyle(WidgetStyle style) { pb.Style = style; return pb; } } // usage: var product = new ProductBuilder(style: WidgetStyle.Petite) .WithId(10) .Build();
Check out c# repos on github. Don't have to get involved but just read code - see how popular libraries are being coded...best way to see principles and patterns working in the real world. Don't get too hung up on syntactical sugars out there - focus on the fundamentals of oop ( it will extend far beyond c# and you'll find Java and most other oop languages to be very easy to learn). Don't be afraid to use plugins in visual studio like stylecop or resharper is you don't mind dropping a little( might have a student discount). They let you program naturally and then you see suggestions to best practice - you'll find yourself learning a ton from that. 
Looks very much like a code smell in that that one function is don't way too much. Routing can get really complicated and bloated and I personally wouldn't mix optional parameters into the mix. Instead, I would create overloads that take in exactly what is expected. 
This is the best solution. 
This seems like an awful recommendation - exactly the kind of thing that introduces API bloat and confusion to a codebase. It's also the exact kind of weird optimisation that iterative changes to a compiler will make null and void and end up passed down as folklaw. Like, why stop at 3, what about 4! etc? Memory allocations and the GC are often cited as the biggest drag on performance, but also cripplingly misunderstood - it's so rare to see code where dancing around the GC is a sensible decision - loads of good information on this in http://www.writinghighperf.net/ - which has some wonderful deep dives into GC behaviours.
The question is *why don't you want them public* ? If you're afraid of external calls/apps calling the constructor or properties, make them "internal" instead of public (you can have an internal constructor as well). It's best practice to have on the constructor those external values that are necessary for the class to operate. If there are too many of them, think about breaking your class up. Also, look up the Abstract Factory Pattern. 
Then why do you care? I'm having trouble imagining a situation where having the Builder return an Interface is overkill, as you stated above, but "internal" is too wide of a scope. Or why you need a Builder *at all* for a class that's never going to be used in any other project.
I think I'll need a healthy dose of JS/HTML/CSS, though I know the latter two reasonably well.
This code is for a game I'm making right now, and each wave represents scripted information. It's "content", for a lack of a better word. Like a page in a book. Each wave has specific instructions, and the game progressively moves forward on its own as I code somewhere else a trigger to increment an int waveValue by 1. when the waveValue moves up, a piece of code realizes this and stops calling (for example waveValue changing from 3 to 4) wave3(), and starts calling wave4() Oh, and when I said above cases 1 to 50 will have similar code, I mean like case1: wave1(); break; case2: wave2(); break;
I think Pluralsight is great. Imo, go with Angular or React with WebApi.
Yeah the utility class makes sense, as long as it's in the same assembly as all of the UI components. Also if the four functions in the class are unrelated they really should be in different classes, to maintain the Single Responsibility principle. But that's not as important as keeping them with UI code. If your business domain logic needs to display an error, you would want to use some sort of propagation technique to get the error back up to the UI layer to display it. This way, your business logic doesn't care HOW the error is shown to the user, or even if it IS shown. For all it cares is that it can't complete some operation because of invalid data, so it throws an error, and the caller is responsible for handling the error accordingly, however it sees fit. I hope this makes somewhat sense to you, I'm on mobile so it's hard to articulate what I'm trying to explain, and I'm sure as hell not going to attempt to write example code on my phone.
How does it behave without debugging?
An immediate "{Name of Program} has stopped working."
Passing `new_settings` in as both out and ref?
Can you post some code? You might just want to floor it to remove the decimal, then cast it to an int. Your position from your expression may be like 816.27, and that can't be implicitly concerted. 
Yeah, it's odd... I'm parachuting in to upgrade the capture device from 1080 to 4k. Though, I have ruled that out as a possible cause. Was thinking it was looping there. 
2015, and I hadn't used that feature before (I'm used to vs2013), looks really useful. Thank you... I'll play with it. 
&gt; and 1/8th of the way from the bottom of the screen so 7/8th of the height of the screen? i.e. (WindowHeigth*7)/8 
You can't divide by 8? That is: var yOffset = WindowHeight / 8;
Two things come to mind: 1. ReleaseHandleFailed is not something that should be ignored. Double freeing a windows handle can cause all kinds of subtle havoc. 2. The visual studio debugger may be getting in your way. I'd be willing to bet the problem is reproducing consistently when you aren't debugging it. (What I'm saying is: This isn't isn't really a hang but a hard access violation or other win32 problem that the debugger is masking.) Your best bet is try to reproduce the problem under Debugging Tools for Windows (windbg). "Windbg.exe -g [program]" and use it to debug with SOS instead (.loadby sos clr, !clrstack, !pe, etc). If you reply back with details after trying that out I can try to help.
I'm happy you liked it! I started my programming career exactly when typed DataSets were all the rage, and I got to experience their rise and fall first hand. I still have a 950-odd-page ADO.NET book from that time, because that's what you did before StackOverflow. Between this and WinForms data binding (which I still don't fully understand), I'd guess it took me about 5 years to connect all the pieces together.
I see you've got an answer. The error code about conversion comes because of lost information when going from double to int, so the conversion must be made explicitly (just FWIW/future reference). A simple cast is all that's necessary: var intValue = (int) doubleValue; Which will truncate the floating point value. (I'm not 100% certain this is identical to Math.Floor(), but mostly because I'm too lazy to pull up dotPeek and check on the contents of System.Math.)
Late to the party but this is what I would do: using System; namespace ArrayOfDelegates { class Program { static void Main(string[] args) { Action&lt;string&gt;[] actions = new Action&lt;string&gt;[] { (text) =&gt; { Console.WriteLine(string.Format("I don't like to {0}.", text)); }, (text) =&gt; { Console.WriteLine(string.Format("I like to {0}.", text)); } }; Func&lt;string&gt;[] funcs = new Func&lt;string&gt;[] { () =&gt; { return "foo"; }, () =&gt; { return "bar"; } }; for (int i = 0; i &lt; funcs.Length &amp;&amp; i &lt; actions.Length; i++) { actions[i](funcs[i].Invoke()); } } } } There are two things going on here that make it concise. The collection initializer and the lambda expressions.
Haha I get that. I have a VBA reference manual sitting around just so I can lookup functions I want to call in C# through some bindings. Even now it's sometimes a pain to find things. Or if I need to write VBA...shudder...
I always keep all my classes for an assembly together, rarely linking anything from another project. Typically when I call a `MessageBox.Show()` in my utility, it's typically showing an Exception, which I know can be handled in the Form (UI), but it's ridiculous to keep copying and pasting Utility util = new Utility(); try { util.whatever(); } catch ( ThisTypeException exThis ) { MessageBox.Show("Whatever"); } catch ( ThatTypeException exThat ) { MessageBox.Show("What?!"); } ... finally { doThis(); } every single time I want to call it. Most of my projects require databases access, so I'm constantly watching out for all sorts of Exceptions. I could use a catch-all and just use `catch ( Exception ex ) { ... }`, but there's a reason there are multiple Exception types, so I can handle each one individually. I could handle it this way doing that, but it's still more copy and paste coding: if ( ex.GetType() == typeof(ThisTypeException ) { // do something } else if ( ex.GetType() == typeof(ThatTypeException ) { // do something else } ... I greatly prefer strict encapsulation, which coincides with SRP, but sometimes to make less clutter in code, I would rather write once, use dozens. I save hundreds of lines of code per program, even if it is code smell.
but its for who wants to learn
if debuging hlep I wanting then this vidoe wathc but more hlep needing me wanting wiht splelchekcing and grmmar
Also, as someone who has to review code, PLEASE install a spellchecker. They are free and will put squiggles under misspelled variable names like word processors do.
Don't be terrified. We all get built up to believe that computer science is hard, but it's actually very logical (crazy, right?) And even easy once you've dived in
if you need more help you can subscribe my channel i will upload all programming videos https://www.youtube.com/channel/UCu3KF8yt2djW8iRNU8JCfWw 
Former systems engineer gone software engineer - trust me when I say the knowledge you get from the former helps tremendously when writing code given the understanding of how code is actually implemented. I started with writing tools to monitor installations, perform new installs/updates, and for troubleshooting/debugging live code. Going with .net core is a smart move and will allow more flexibility in testing/deployments using containers for your code. Don't forget Mvc core has been released and is making good reaction - should cover you from the api side down. Learning JavaScript will be a must and can make things odd when learning an oop language like c# - functional programming can be strange coming from a strongly typed language. Definitely check out type script - there is very good juju between it and c#, and brings the oop goodness that we're used to in to our JavaScript sections of apps. And definitely don't be afraid to google - hardest part in the beginning is knowing what to google, but that's usually a quick collection of best practices for the current problem you're trying to solve. One more thing to check out and understand - the SOLID principles. Especially if you are starting on a new project - will make sure you get off on the right foot and allow your code base to grow correctly. 
Haha, this is exactly what I do - have a small utility class that will just get me a dataset back from procs, use convention naming on my column names that map to the model (with the ability to pass in alias mappings), and pass each row into a mapper to create the model for me. Think the point is to abstract that crap away from engineers so they can be productive writing business code for features/requirements and not have to worry about iterating datasets/tables/ lower level representations of data. 
Not a random blog, the author of book built high performance things for bing at Microsoft. Lots of the old advice like that is so totally out of date, and half of it is actually wrong. In the battle of maintainability vs. micro optimisations, maintainability should win in the vast majority of cases.
take a look at the [BitArray](http://www.dotnetperls.com/bitarray) class
It really depends. My first solution would be a regular, byte-by-byte for loop, since that's the simplest method. Given the size (1.049E+6 or 1,000,000, depending on your definition), you would likely do well by using Parallel.For like: Parallel.For( 0, ArrayOne.Length, i =&gt; { XORArray[i] = ArrayOne[i] ^ ArrayTwo[i]; } ); That way, if you're using a multi-core processor (which I'm assuming you are, since they're pretty much ubiquitous, nowadays), it'll break the chunks up into separate threads and make the overall loop take less time, generally speaking. I'm thinking you *might* be overthinking this a little too much. Converting all the bytes to a BigInt or a UInt64 array would require more casting and looping (or LINQing, if you know how) than the method above. In my experience, the simplest solutions often work the best *and* the most reliably. Helps that they also tend to be the easiest to debug, too!
This, so much this. When I started thinking about code as disparate parts combining to make a more useful whole, learning became a *lot* easier. A good analogy would be building reactor: you've got fuel rods, coolant tanks, pressure relief valves, turbines, fluid condensators, steam lines, heat exchangers, induction generators, and so on. On their own, they're not terribly useful, but if you put them together properly, you not only end up with plenty of power, but you also end up with a well-oiled (literally and metaphorically) machine that *doesn't* end up going Chernobyl on you. ...Especially if you end up playing with C++, lol.
If you learn best by example, I suggest looking at some example code either in Github or by using something like ILSpy to peek into installed .Net applications and/or libraries. C# was my...second language, technically, but I only really understood it after taking a VB6 class in high school. My advice: learn the syntax and constructs first. Start with if statements and simple loops (whiles and fors), since you'll be using those a *lot*. Once you have the basics of the logic down, learning the rest comes a lot more easily. Getting the logic down pat is especially useful if you need/want to move on to another language since many of those fundamentals almost never change; their presentation might vary a bit, but an if is an if no matter if you're using C# or Python.
Oh, right you are. I was thinking of `Enumerable.Empty&lt;T&gt;`.
.Select() to iterate is amateur hour as well, as it's a projection, not an iteration. Enums aren't without their problems either, so don't introduce them if you don't need them. I don't see why the single line of code would need an enum so more info is needed. Btw, it's often way more clearer to write an iteration as a foreach() loop: foreach(var x in SomeList) { // Do Something with x } Also, be aware that OOP is about "Tell, don't ask". This means that if you have to apply an operation on elements inside an object X, it's preferable to write the operation on the elements as a method of X's class. This way X won't leak objects and won't go against the open/close principle. So in this case, the operation containing the foreach should move to a method of what you refer to as 'Object'. And as others have stated as well: ask your mentor why, never be embarrassed because you think you made a mistake. If your mentor gives you the feeling you need to be embarrassed s/he's not worth to be a mentor. 
Very correct that the cost of converting to some other structure is likely to be more than the performance improvements that structure allows.unless you are going to need to process it multiple times. I'd go even further though and say unless this is in a game loop or some other performance critical section, this is a micro optimization, and you should be more worried about readability than efficiency.
Aah, yeah, true. Keep forgetting about that. :P
Yup, learned that one the hard way. I've come back to some of my old stuff and I'm just sitting here going "WTF did I even make?" Try to do too much at once, and your code can end up an unreadable mess.
A few complex answers and suggestions, however, I would suggest first and foremost just using a basic for loop. It doesn't need to be unsafe, because the JIT/compiler should be able to prove the bounds. You don't need to specifically invoke special simd instructions, because this is a trivial optimization for a JIT. You don't need threading, because the overhead of threadpool maintenance will outweigh this very basic operation. Write the most simple code first and profile/benchmark from there. Also, make sure you benchmark the right thing. Compilers are tricky beasts. You should read several posts about micro benchmarks before attempting it. The simplest solution for benchmarking is likely wrong.
This does seem to be the best answer from what I can tell. The issue is that I don't have very much experience in unsafe code, or C++. 
This is the correct anwser. Regarding benchmarking. BenchmarkDotNet is a great framework. Helps avoid common mistakes. https://github.com/PerfDotNet/BenchmarkDotNet
Have you watched the presentations on Bing? Half the time they are talking about ways to reduce memory allocation. 
They're not that slow, sure, but it isn't either 1000000 delegate invocations or 1000000 regular invocations, it's a choice between 1000000 delegate invocations and 0 regular invocations.
I have a 2014 15" rMBP with the dedicated graphics card. I always used Bootcamp until a few months ago that I was playing with Xamarin development. I used Parallels until my trial expired. I vastly prefer running Bootcamp. It seems to run a little smoother. I never really had performance issues. CPU seems strong enough to handle stuff, and the SSD keeps IO operations quick. Truthfully, the real reason I went with a MacBook is because it's a helluva lot easier to run to an Apple store and say "it broke" rather than shipping it off to who knows where for Dell to fix it. That being said, the Surface Book is fire. And it might be next laptop when this MBP dies.
Look up Xamarin. They have two options: - Either use Xamarin Forms, which is unified cross-platform GUI library. You'll just have basic elements that are available on all platforms, and won't be able to use any special features. - Or just share the business code in C# one project, and write a native GUI for each system.
&gt; It dose not has a delete key fn+delete does the same thing as delete on standard keyboards. &gt; it has no page up/down keys fn+up and fn+down
&gt;It doesn't need to be unsafe, because the JIT/compiler should be able to prove the bounds. &gt;You don't need to specifically invoke special simd instructions, because this is a trivial optimization for a JIT. This does not appear to be the case according to my tests: Method | Median | StdDev | Op/s | -------------------- |-------------- |----------- |--------- | ByteWiseXor | 1,396.8458 us | 10.1082 us | 714.02 | VectorizedXor | 120.4530 us | 1.1608 us | 8299.21 | VectorizedUnsafeXor | 95.7960 us | 0.3328 us | 10446.31 | UnsafeLongXor | 137.0936 us | 1.1538 us | 7306.19 |
great time to learn, it isn't hard. start googling! 
no it isn't, you can unroll it. pretty sure. experimenting now. EDIT: Can confirm, you can unroll it, to good effect, using Parallel.for. I got twice as fast on a core I7 with just a random guess at the unrolling factor. Could probably tune it. Tested with BenchMarkDotNet which does jit warmup and many trials and so on Might be other reasons not to Parallelize it, like if your application is already saturating other cores and so on, but you can definitely speed this up with it. an unsafe SIMD parallel one would scream =) 
BenchmarkDotNet using [this code](http://pastebin.com/b4LpcY2C) (compiled as x64 Release, for x86 the unsafe long variant is fastest since the vectors aren't HW accelerated).
Are you referring to XCode or Xamarin? XCode is Apple's development environment, so it would run in OS X (Boot Camp is Apple's term for old school dual-booting into Windows).
I would agree. Using Visual Studio inside of a VM is usable but Boot Camp *always* performs better.
Xamarin Forms if the app is simple. Kivy is also pretty good. You could also use JavaScript and CSS/HTML then make an Android app to display your pages / Electron app for desktop OS.
Does Xamarin actually support desktop app development? I was not able to find any info about that.
Don't trust compilers and JITs. They do all kinds of stuff you don't expect. Sometimes good, sometimes bad. 
Try making the arrays size constant by taking a function reference copy public void ByteWiseXor() { var first = _first; var second = _second; var result = _result; for (int i = 0; i &lt; result.Length; i++) result[i] = (byte)(first[i] ^ second[i]); } } The class level reference could change at any time on a different thread; so the array could change size etc so the Jit can make less optimisations as it needs to check for out of bounds on each loop iter for each array. Different effects of looping strategies https://gist.github.com/benaadams/11123e9785481e07d8ca483bef798689
Also no longer checked at compile time. I'd recommend against this. 
From just your title, I initially thought it was an array of length 2, so I was thinking "Can't you just XOR element 0, then element 1?" I'm having a dumb day.
Of course parallelism can help, but not the way described by the comment I responded to. But I got curious and added benchmarks for sensible partitioning as well (on a 6-core with HT): Method | Median | StdDev | Op/s | ------------------------------ |-------------- |---------- |--------- | ByteWiseXor | 1,001.3358 us | 8.6284 us | 995.85 | VectorizedXor | 100.7568 us | 0.7546 us | 9968.34 | VectorizedUnsafeXor | 96.0142 us | 0.9016 us | 10384.43 | UnsafeLongXor | 136.6242 us | 1.7038 us | 7285.78 | ParallelVectorizedUnsafeXor4 | 51.4377 us | 1.1960 us | 19369.58 | ParallelVectorizedUnsafeXor6 | 52.2016 us | 0.2880 us | 19152.73 | ParallelVectorizedUnsafeXor8 | 42.6590 us | 0.2652 us | 23413.33 | ParallelVectorizedUnsafeXor12 | 40.7902 us | 0.1552 us | 24499.03 |
The new models are expected to be announced next month and, based on rumors, sound pretty cool. I would definitely wait.
As a practical matter, [floor and its counterpart, ceiling](https://en.wikipedia.org/wiki/Floor_and_ceiling_functions) is a mathematical thing, before it's a comp. sci./programming thing. Basically, floor(x) returns the largest whole number less than x. ceiling(x) returns the smallest whole number greater than x. Casting double to int should perform truncation, which drops all the fractional parts (i. e. everything after the decimal point). (This is different than floor() for numbers that are less than zero, incidentally, so I wasn't quite right, earlier.) If you like, floor() always rounds down, ceiling() always rounds up. Truncating always rounds *towards zero*. The System.Math class has functions for all of these.
You are encountering [arithmetic overflow](https://en.wikipedia.org/wiki/Integer_overflow).
Unless you want to start developing for iOS.. Don't... Just don't... The keyboard is a freaking nightmare, even more so in a VM.
Ah, then yes, that's right. To use the same machine you'd have to run Visual Studio inside of a VM like in Parallels or VMWare Fusion. 
As a c# developer assigned a mac book pro for work, I wouldn't switch if I were you. VMs necessarily have a performance hit, bootcamp works great in my experience but why pay more for hardware to run windows. It just isn't worth it.
It's a multi-University dining options app that shows all the different dining locations at a given university campus with hours of operation and menu items for a given day. The user can enter allergens and preferences as a one-time configuration and the menu indicates items that meet those criteria. Our next release will include push notifications and redeemable coupons plus some other cool features. Nothing crazy but it did take me a month or so to architect and complete the solution as a beginner mobile dev (typically do .NET web apps).
Make a task list.
Your friend is right. Get the basics down of an OOP - data types, classes, methods, how to instantiate objects, polymorphism (this word isn't as scary as it seems), encapsulation, inheritance, etc. You need to understand these concepts to do well. Then learn C# syntax. Check out some simple code examples and then try stuff yourself. Watch tutorials on YouTube. 
Would a surface pro 4 be good for C# development?
Thank you, how can that be avoided? Is there a way I can store the value and display it?
I just got me some great knowledge, thanks man. I love it when it's explained in lay terms. 
I would think so. If you were planning in getting one, I would recommend the upgraded keyboard for it instead of the type cover or whatever they're called. 
What do you mean by "gain ground"? Are there things that are planned to be supported, but not yet available (other than the obvious lack of integrated compilation and debugging)?
.NET Core is still in its infancy so it isn't as complete or as well supported as its older brother, the .NET we're all used to seeing and using. I think the command line tools are still in beta 2 even though .NET Core is at 1.0. There is a lot planned for it in the near future too. 
I have a 2015 Macbook Pro that I dual boot Windows on, I tried the VM approach but it seemed stupid to only use a fraction of my hardware. I also use Visual Studio Code when I'm in OS X. It's really great for front-end development! I do most of my development on two other Windows computers that I have though.
Yes. Those things are phenomenal. Alternatively, hp makes an excellent ultra book with similar specs for much cheaper. My boss and CO use the surfacebook. They love it. Avoid the tablet though. My neighbor uses the surface pro and is always having issues with his dock. We do asp.net mvc.
Will be interesting to see if they come with Kaby Lake.
Also if you need CRUD out of the box, you can use it in conjuction with: https://github.com/okhosting/OKHOSTING.ORM https://github.com/okhosting/OKHOSTING.ORM/tree/master/src/PCL/OKHOSTING.ORM.UI 
Works great for me... its generally an all around fantastic machine after its kinks have been ironed out with updates. I would reccomend a usb hub at home to plug a nicer keyboard and mouse into (or a dock if you want to splurge.)
yes. I have seen quite a few people go from pc -&gt; mac. I was the main reason behind the first [Microsoft Evangelist getting a mac](https://blogs.msdn.microsoft.com/socaldevgal/2011/01/17/a-macbook-airfor-a-microsoft-evangelist/) Here the general path I see: 1) get Mac 2) Enjoy hardware but take 1-4 months to 'understand' it. This is a combination learning pieces of mac ecosystem + just being use to pc 3) Spending a lot of time in the vm/parallel/bootcamp 4) Moving to most things on the mac side, going over to windows when needed 5) *loving* their macbook It's a journey, but it's worth it. More than 90% of the people I've seen get a macbook don't switch back. For me, I tend to pay attention to devices that people **love**. It fairly easy to get people to like something, remarkably hard to get them to love something. The part about moving to the mac side for things also seems important. For example, many developers I know use vm's in a pattern closer to docker (one vm per application ecosystem). Most of there stuff is on the mac side. Just looking at my dock right now, terminal, vlc, office, chrome, camtasia, photoshop, skype, remote desktop, slack, github &amp; steam are all mac side, I jump into windows often but only for Visual Studio &amp; Sqlserver. My quick guide to 'getting the mac' 1) fn+delete is the delete key 2) 2 finger click is the right click 3) command+space to find and start things 4) make a shortuct to 'activity monitor' and name it 'task manager' so you can search and find it when you need it. 5) 2 fingers up/down to scroll 6) allow yourself the 2 days to get use to the reverse scrolling. it's quick because now it will match what you do 500+ times a day on your phone. 7) turn your function 1-12 keys on by default, programmer use these alot 8) pay attention to your terminal. upgrade to [zsh](https://github.com/robbyrussell/oh-my-zsh), use [brew](http://brew.sh/) Edit: formatting 
I am in the same situation as you. I am considering a MBP in the fall when they refresh. However -- there is one key thing for me -- I am looking at getting into Xamarin development -- and to target iOS you need the Mac. So that might be a consideration for you. I do all of my development in a VM now anyway; so the host OS doesn't matter too much.
I have a Precision Mobile M4700 and it's fantastic. Totally upgradable (not cpu) but I can add an MSATA card as a main drive and have a big SSD as my 2nd and 32gb ram. The 15" wuxga screen is awesome too. 
Absolutely it would. I am a professional developer and I use a Surface Pro 3 as my main workhorse. Its fucking phenomenal. I've had *four* distinct copies of Visual Studio 2015 running simultaneously, along with MS SQL server, IIS, apache, MySQL, photoshop, and some other stuff. I can do all dev work, and then easily shut it all off and goof off in tablet mode watching netflix or sitting on the couch reading the web or whatever. I'm going to use a Surface Pro form factor for the foreseeable future. I can do anything with this. Its powerful and yet light and very portable. PLUS the best part is the touch screen. It comes in far more handy than I even thought it would. For example, I'm going to finish writing this sentence, and then I am going to click "save" on the webpage.
It's right above the backspace key. I wanted to delete a bunch of character, so you'd hold the backspace key.
I use a Macbook Pro and I love it - especially now that they've implemented .NET Core and Visual Studio Code it's kind of fun to run the programs natively on a Mac - but I also have a Windows 7 Virtual Machine I do my programming on too for VS2015. With that said, it's better to wait right now on the Macbook Pros. They're getting ready to announce the new ones next month. With that said, it's the best laptop I have ever owned. I even got rid of my Surfacebook because the Macbook Pro is far superior to it.
Do you really want your app to look and function exactly the same on Android and desktop? 99% of that functionality doesn't translate back-and-forth well, unless it's extremely simplistic. 
regardless of what you decide, don't buy a new macbook until they release a new version. the current version is pretty outdated.
&gt; That said, a good practice, I've found is to put my dev environment on a VM This has been working really well for me and I have (to date) just been Windows on Windows.
I had a MacBook. It was cool. I ran Windows in VMWare and once I got the key mappings figured out everything was okay. Currently, I'm using a Dell Precision 3510. I have to say it's pretty nice.
I'll give you 5 billion dollars for this idea.
Perhaps you could create an app for a website you visit often but that doesn't have a mobile version of their site 
May you add how I would base the health on the tier? Would I just determine: var monster = new Monster(200, 2) For example? Or would I need to add something in the class?
You should add a screenshot to the readme on github
This is great news, may I ask. Do I need the i7 version with 16GB ram to achieve this performance? I currently use an old desktop setup for development and I struggle to run duel monitors with all my tools open. 
Microsoft Engineer from the WCF team here. We are also eagerly awaiting a full port to .NET Core. The talks around the office have basically been "Who the hell is going to use this while you can only build clients?"
Dell XPS 15 Fantastic build quality, and the best keyboard I've used for coding.
4K version is actually worth it I've found. Text is readable at smaller sizes, albeit you only want to go so small.
You have the internet wish list: https://www.instagram.com/theinternetwishlist/ Maybe the ideas are too big, but If you simplify them it's an idea to begin.
Get a refurb thinkpad. Save 800 dollars and get hardware that isn't 4 years old. Plus you can get parts easily from ebay instead of sending it to apple for hundreds of dollars.
[request] don't rant about Mac vs PC and answer the question. As a pc user I'm interested in hearing more about what the OP asked, but people seem to be ignoring the question. How's the development experience on that platform?
Gosh, I dunno.. Perhaps he could ask beforehand..?
[This is the latest version of the benchmarking code I wrote](http://pastebin.com/Aca8bH6g). For the vectorized methods you need the `System.Numerics.Vectors` Nuget package, which contains special types that get compiled into CPU instructions that perform multiple calculations at once ("SIMD"). Each `Vector&lt;byte&gt;` contains 32 bytes, all of which get XORed at once. Then you need to XOR the last few bytes as usual in case the byte array isn't evenly divisible into 32 byte chunks. The vector instructions are only available on a subset of x64 CPUs, so if your application needs to run on older CPUs or in 32bit mode it might be a good idea to dynamically choose between multiple methods [as mentioned here](https://www.reddit.com/r/csharp/comments/4xiqul/xoring_two_byte_arrays_efficiently/d6g2xck). The benchmarking code uses static arrays to reduce the impact of memory management on the benchmark results, obviously you'd want to change that for normal use. To run the code as-is you would also need the `BenchmarkDotNet` and `System.Runtime.CompilerServices.Unsafe` packages. If you believe all this is too complicated for your current skill level, you might also consider whether a simple byte-by-byte approach is sufficient. Even the slowest benchmark still XORed 1MB nearly 700 times per second (on my PC).
Oh my god this things are sick. Wicked sick. My mom's boss bought her one. I really wanted one before I went off to college, but it didn't happen. I wish. 
So I have this: https://ideone.com/9JpNhl And now I don't know where to go from here, who knows, the current code I have now probably sucks as well and there are things that I did wrong/can improve here. The thing with my old messy code is that I know where to proceed from, even though it sometimes didn't work or confused me.
I can't thank you enough for such a helpful and obviously well executed answer. I hadn't encountered a lot of this code prior to the last 24 hours. I hope to work at my c# skills to a point where I can provide these kind of answers to other people who are stuck in a rut. I quite liked the idea of using unsafe code as I could overwrite one of the arrays in memory as the calculations are done on each byte to avoid using too much memory with extremely large arrays; either that or stream the result straight into a file.
I feel your pain, I wish too. ;(
If you want to make it a bit faster, you can disable the proxy (or else ie will spend some time searching for it). WebClient wc = new WebClient{ Proxy = Null }; Alternatively just change the property after initialising it, instead of using an object initialiser.
Windows scaling doesn't work with GTK+ programs so my 1080p screen was a little difficult to use with them. 4k is going to be a nightmare. Personally I don't see much benefit to the 4k monitor on a 13 inch screen.
If you want to handle almost any numbers then you should use [BigInteger](https://msdn.microsoft.com/en-us/library/system.numerics.biginteger.aspx)
You can actually remove the constructor if you'd like, and instead use: &gt; var player = new Player { HealthStat = healthStat, AttackStat = atkStat, DefenseStat = defStat }; - &gt; May you add how I would base the health on the tier? Would I just determine: &gt; var monster = new Monster(200, 2) &gt; For example? Or would I need to add something in the class? This is where properties become interesting! &gt; private int _healthStat; &gt; public int HealthStat { &gt; get { return _healthStat * MonsterTier; } &gt; set { _healthStat = value; } &gt;} But as to where you go from there, well.. that depends on how you want the game to be ;)
First off, you used to have 4+ instances of Random: Don't. &gt;Random random = new Random(); // You can use this one for ALL your future numbers. For player damage, you could do something like.. random.next(AttackStat , AttackStat * 2); Assuming an attack stat of 5, that would do 5-9 damage. For defensive, you first have to decide how you want it to work. If we say that each point in defensive gives you 1% chance to fully block an attack, and 2% chance to partially block it *(eg, 10 defense is 10% chance to blow, 20% to glance)*: &gt;int block = random.next(1, 100); &gt;if (block &lt;= player.BlockChance) { /* fully block damage */ } &gt; else if (block &lt;= player.GlanceChance) { /* partially block damage */ } &gt; else { /* Do full damage */ } This works by generating a random number from 1-100 (which is a very nice scale for percentages). If your DefensiveStat is 5, then it has a 5% chance to be [1,2,3,4,5], thus &lt;= BlockChance) Then adding this to your Player class: &gt; public int GlanceChance { get { return DefenseStat * 2; } } That way you can easily scale how well blocking/etc works in a single place, without having to go dig trough the code, and duplicating the same algorithm/calculation.
I was just thinking about what my monthly project was... and now I feel obligated...
Is it worth it? I use a Surface Pro 3, and I never use it without a keyboard, so in that case wouldn't I have gotten a better machine for the same money if I bought an ultrabook?
Add some gifs!
I can't see myself ever actually buying a "laptop" form factor for myself. I've become quite the fan of the Surface Pro form factor. I find myself switching it a lot. I've got to read something? I rip the keyboard off, lean back in a barkalounger and read. Right now I'm about to work on a coding project so I am going to use it like a laptop. The pen is fantastic too. I've had people email me .pdfs. I can write on them with the pen, save the new pdf and email it back to them. Its pretty slick.
Help out on existing apps. I've a fair few that are open source and I'm always open to taking a PR if you've any ideas. Check out my GitHub account: MikeCodesDotNET. 
http://codepad.org/CqH8rCxL See if this tiny sample gives you an idea of how classes can be useful :) &gt;You find yourself in an empty room &gt;You can move to the: East, North &gt;&lt;move north &gt;You move north &gt;You enter a dark room &gt;You can move to the: East, South &gt;&lt;move north &gt;You find no path to the north &gt;&lt;move south &gt;You move south &gt;You enter an empty room &gt;You can move to the: East, North &gt;&lt;move east &gt;You move east &gt;You enter a brightly lit room &gt;You see a a rusty sword &gt;You can move to the: West 
File an issue. That's a bug on Xamarins side. You likely could modify the csproj file by hand to reference the correct assembly.
Ok. I'll file a bug with them when I get a chance. I ended up modifying the csproj manually, and then forcing the packages.config to target net451 instead on monoandroid. That seemed to work well.
To this day, WPF Unleashed (WROX) still remains one of my favorites when it comes down to WPF. It's old but good!
Wouldn't matter if it's done at initialisation. He could decide on a naming convention for his delegates and it would accommodate any further extensions.
Of course - static where it makes sense, that much is valid and obvious - but "static methods as all your code" will likely lead to static shared state, and static state in a multiuser-per-request application begets complexity and bugs. Smart and tactical for SO, but certainly not "generally good advice" to bite the potential pitfalls in everyone's random web code, the path safer travelled being more sensible. But I suppose that's just the argument for pure functional languages with immutability by design really.
Head First C# is fantastic for that. Tons of exercises and practice assignments in each chapter.
For programmers at least, Microsoft's got their own special way to document code, as per their [Recommended Tags for Documentation Comments](https://msdn.microsoft.com/en-us/library/2d6dt3kf.aspx). It's similar in other languages, as well. As for documenting it for end users, that's up to you. You could create a Wiki for the program. You could write large text Help files like they did back in the day. You could make a PDF with pictures of the program and simple explanations as to what each part of the program does, which I believe is the current most common way. I don't write large, expansive programs. I write a program for a purpose, and don't provide end user documentation because I'm there to explain it to whoever needs it when they first use it. I've made a time clock for work which stores everyone's times in and out in a database. Simple to use: just log in, push time in/out with an option to view your previous time punches. I've made a Form program which mirrors one hard drive onto another so we don't lose data using Robocopy as a Process. Simple to use: pick source drive, pick destination drive, click backup, sit back while it picks the differences and copies them. I've written a few minor mostly text-based games that you navigate using Forms, and it's simple: login, play. For the nitty-gritty mechanics of the game, I sometimes give a small game mechanic tip with a question mark button which displays a MessageBox or another Form, but nothing too greatly detailed. Your sword does up to 25 damage + 10% of your Strength stat type of thing. Almost never any documentation outside the program because it's so obvious and anyone who uses it is usually pretty intelligent and knows how to reach me if they need me. But as I said, it's up to you. If you feel your program needs documentation, I suggested a few ways to take care of it. I recommend a PDF with simple explanations and pictures. If you're publishing a program where idiots may be using it, the simpler the better.
thanks
OP, I replied to another comment on this thread, but for the sake of making sure you see, [WPF Unleashed](https://www.amazon.com/Windows-Presentation-Foundation-Unleashed-WPF/dp/0672328917) is the book you want to get for WPF. For general C#, I would recommend the Wrox Programmer 2 Programmer series.
for code developers. First and foremost - standard things like function names/variable names should all make sense and your code should just read naturally like a book to a seasoned developer... code review helps with this if you have some one who can review your code (like an editor does for a writer before publishing). As far as good comments - If an algorithm is complex enough that it wasn't obvious why you did something one way versus another - or you did something convoluted to get around a problem explain why, and assume the next person reading has no idea what you are talking about. As far as user documentation and technical documentation its really up to you... do what you need, do what you want, and err on the side of more documentation if you can. I personally like searchable wikis for SOPs, user manuals, and how tos... and write more technical specs, and flowcharty type things... I try to do this earlier in projects instead of after the fact since they are your design documents - but once you have them keeping them updated is pretty straight forward.. how detailed you go should just depend on how big your project really is - a flowchar for every major system is probably a good enough starting point, but if you have a massive project you might need to get more detailed... same with the user side.
csharp rocks yal
C# in Depth by John Skeet is a must read. https://www.amazon.com/C-Depth-3rd-Jon-Skeet/dp/161729134X CLR via C# is another great one. https://www.amazon.com/CLR-via-4th-Developer-Reference/dp/0735667454/ref=pd_sim_14_1?ie=UTF8&amp;dpID=41zZ5aN3ypL&amp;dpSrc=sims&amp;preST=_AC_UL160_SR131%2C160_&amp;psc=1&amp;refRID=6393Y0QM1NEFGP31WFX8
Is your goal to just complete this task or to learn?
So Atom is the class that Hydrogen inherits from, so that's your 'base' class. When a concrete class (Hydrogen) gets instantiated so does it's base (Atom). If you look in the signature of the Atom constructor you will see it takes 2no parameters (int protons, int electrons) but you are passing it a single string. So you will need to change base("Atom") to pass two ints. Something like this will allow it to compile and run: public Hydrogen() : base(1,1) { }
The call to base is just like calling the Atom constructor. you need to pass parameters into base just as if you were creating a new Atom through its constructor. Instead of base("Atom"), you should be passing in the arguments to base, like base(0, 1)
Thanks, this works perfectly. With you and /u/WellKemptNerfHerder, I think I get it now. 
Here is a free download for [WPF Prism](https://www.microsoft.com/en-us/download/details.aspx?id=42572).
You could just use an ORM like Entity Framework.
ASP.Net Identity Framework, use the RoleManager to keep track of group membership.
Well, first of all, I don't think you should try to write one document that works as a manual for end users and documentation for developers at the same time. They are different things. One of the best resources, IMO, is to look at some popular open source projects on GitHub. Look at the ReadMe file, the code comments, the wikis, and see what you like yourself, as a user and developer. Clone some of them and try to get them to build in Visual Studio - was it easy or hard, did the documentation help? Do you understand how they work? Now imagine yourself in the situation of a developer who's just downloaded your code and needs to make a change. The best documentation is when it's not needed though. When the method and variable names are self explanatory, the structure is following established conventions and the architecture is consistent. Same thing with user interfaces, make them simple enough that no manual is needed. Not always possible of course, but it's something to strive for. Personally I've found that this process of documentation often end up causing a whole bunch of great changes in the code and configuration instead of actual documentation. I don't want to be that guy that hands over a list of 100 steps to get my code to build and deploy. 
Definitely go MVC over WebForms. The online support is huge, any problems you run into will probably have plenty of answers just a quick google search away. I would recommend making this with straight MVC first, full page post backs for every request and using EF as your DAL. This will get your task completed quickly based on the requirements your provided. But don't stop there, this is a great sample app to learn all about different technologies. Once you get the first part working, try implementing a few WebApi controllers and use jQuery Ajax posts for something simple, (like getting details of an employee). Once you are comfortable with how the WebApi controllers work, you could start looking into AngularJS (this will be a lot of changes from what you would have already implemented, but this is a great technology to learn). Taking this incremental approach will not only teach you about MVC, WebApi, and AngularJS; it will also teach you differences between the technologies. You will learn pros and cons of each along the way. Another thing you could do to expand on your knowledge is to implement the repository pattern over your DAL, as /u/CptCreosote suggested. Build it on top of EF, then swap it out to use ADO.NET without changing anything in your MVC/WebApi projects.
Off-topic, but i have to say that it is a real pleasure to see what some developers would call "newbie questions" getting a useful answer and not just 8 posts of "Omg, try to google!". Just wanted to say that! :) 
Seconding. Particularly when the first thing everyone tries is probably googling anyway (I know I do.) Really nice to see useful, productive answers rather than snide comments.
Exactly! There are so many dev-forums out there (It has become alot better the last years though) where you get talked down to if you ask a question that someone else think is stupid. That's what i really like about this sub!
Sounds like [Dapper](https://github.com/StackExchange/dapper-dot-net) could be a good fit. 
I appreciate the help. I've made my way through the MS MVC tutorial, but I think I have a misconception. Would you mind if I asked some specific questions?
we have Precision Mobile M4700 and M6700s with SSDs and they are powerful machines but have given us a lot of heat issues
It's the difference between doing this a dozen times (once per column): MyObj.FirstName = Convert.ToString(reader["FirstName"]); and having it all happen automatically because the property name matches the column name. 
But you don't have to do anything like that with LinqToSql, if your names match everything will map automatically too? 
I maintain a library for doing datatables in asp.net, the demo isn't far off what you're trying to achieve: http://aspdatatables.azurewebsites.net/ Any questions, just ask!
Exactly. Some people have a hard time putting themselves in other peoples situations. But atleast it's become much better as software development has become more accessible and "understood" in the general public.
Even if it does, create your own. It doesn't need to be perfect, just to answer your needs, you will learn a lot doing it. Don't try to invent the wheel, if you want to learn - build anything you can come up with.
By the way, your Atom class should be abstract. Probably wouldn't want the user ever making an "Atom" but instead something that is an Atom.
Never had that problem(s). Weird.
That's a rather large question. I'd recommend that you check out the [ASP.NET Website](http://www.asp.net/learn)
I am starting to use Dapper, but was looking for some simple SQL Server ADO wrappers for a project that literally just loads records from a flat file and inserts them into a load table in a database and executes a handful of stored procs to process that table for a simple report. Basically insert, select, delete using stored procs. EF seems ridiculous given the requirements and how seldom it's run. Can Dapper function as a dumb DAL in this case? I should have posted a description of the application earlier, but in my ignorance I assumed the request would naturally result in a reference to a static DAL utility class. Guess I'm living in the past! 
What is Siren Hypermedia? What should I be doing in my Xamarin app? Thanks! 
Anyone ones in particular I should look at? Thanks! 
That makes sense looking at it now. 
Ah ok I'm with you now, thanks for the explanation :) All of my C# experience has come from one big project at work that's been in use for almost 10 years, so my exposure to things that seem to have become popular more recently like micro-ORMs are still pretty new to me! 
This is literally a 10 minute project if you found a pdf -&gt; img conversion tool. go for it :)
Ugh! Don't taunt me! Seriously though, I'm pretty stoked to try it.
Yes, there are tools that will do this, but you can easily do it yourself. I wouldn't use FileSystemWatcher unless the folder contains lots of files. It's super-chatty and will probably only cause you headaches. If you're doing something simple, just use a timer and poll the folder periodically and grab files that were created or updated since the last time you checked. You can use iTextSharp or PDFSharp. Search a bit there are examples on how to export the pages as images. Here's an example of how you might poll for files. https://dotnetfiddle.net/P6tTSV 
This. Just make sure you don't lose the generated key, otherwise the value on those cards is *gone* EDIT: Some more info about why I said this. Once you transfer value to a gift card, you create an accounting transaction that says "Take some of our cash balance, and move it over to the account associated with pending gift card redemptions". If you lose the key to the stored gift card table, the money associated with those cards is gone, just as if you took a stack of 50's and set them on fire. UNLESS - you enter a reversing transaction in the accounting system. And this will raise all sorts of red flags with your auditors, as one reason this can happen is by someone attempting to double-spend that money. If that gets proven, it's what's known as "fraud" and you can go to jail for it. So try VERY HARD not to lose that key. Or have some proof that you really did lose it (affidavits from 3rd party forensic IT investigators, etc). 
What does js have to do with the topic? Or gulp?
...what?
/r/learnprogramming
As long as you ask properly at least, /u/phoenixinthaw. A **proper** [MCVE](http://stackoverflow.com/help/mcve) (preferably with a link to an online compiler when possible) will make your question much better nearly all of the time. If the question doesn't actually have anything to do with jpegs or PDFs, no need to include them apart from a short prose line of context. Apart from that, make the title an actual question that's detailed enough for people with the same problem to find. Oh, and SO likes seeing effort put into questions. Show that you've tried to solve it. Making a good MCVE goes a long way toward that.
So ASP.Net isn't a language like classic ASP was?
Yeah, I think its a personal preference thing. That's one of the things I love about the Surface Pro form factor - the options. Its in laptop mode when I'm at a desk or table. I even use a bluetooth mouse. I much prefer it in portrait mode when I hold it like a tablet. I've gotten really good typing the onscreen keyboard with my thumbs while holding it. And for Netflix/recipes in the kitchen, I have it in landscape without the keyboard. Damn thing is great. I pretty much never use my Macbook or iPads anymore.
1. i was using discord.net 2. The problem was fixed, an update changing multiple extensions was released 
Dependency Injection in .NET by Mark Seemann - Changed my life. Clean Code by Robert Martin - Changed my life again. Finally, https://lostechies.com/
Why would someone model Atoms in this manner when the number of protons and electrons are always exactly the same? Wouldn't a better model just include mass number, atomic number and charge with a constraint that atomic number is always greater than the mass number? By doing so you can have a pure function that returns the number of protons electrons and neutrons.
highly recommend a Domain Driven Design book, concepts presented in DDD provide a good base for making good design decisions across many architectures.. this one is the one I would recommend: https://vaughnvernon.co/?page_id=168#iddd
You could stream the video and then save it, but honestly, you're not likely to get an API key if you tell them "discord bot to download videos"
yeah you're probably right @Shaken_U 
Because they are teaching about inheritance not atoms.
+1 for python scripts when dealing with file conversion
So can c sharp very easily
This forum is also for beginners. Don't be shy asking questions! We are here to help.. Well some of us are! 
OP literally asks if there is someth ok ng which does this already. Googling "gulp PDF to jpg' yields https://www.npmjs.com/package/gulp-pdftocairo
I've done windows/Android development with Cordova and both flavors of Angular. This works particularly well when you use SPA client/server architectures but windows emulation requires a WinJS-Cordova plugin which has to be installed from a git repository. I've used bootstrap and onsenui and found that I liked onsenui because it felt more native on each platform but bootstrap had more support and was consistent in look and feel across platforms. Be warned, if you're a straight Visual Studio guy, you may be in over your head. However, if you're used to using node, bower and gulp from the command line, you can have them do some heavy lifting in conjunction with the intelligence of Visual Studio. For quick emulation, I used a node-static plugging to host the index.html, I've also used concurrently. 
Just use a WebClient and use a web request that you can sniff out from one of those youtubetomp3 sites.
As an enterprise dev, I really think you'll do you students better justice by teaching SOLID principles, maybe some basic TDD, basic GoF implementations and the like using C# code. Having a good understanding of writing well structured code is just as important as the language itself. It will expose the student to the best parts of C# such as multiple inheritance, interfaces, lambdas, generics and async/await. All of which are incredibly important in everything from game dev and mobile to desktop applications and server solutions.
Or I'm that guy that can do it in 10 minutes
So give him c sharp related answers. FilesystemWatcher and PDF to image converter they're are plenty of them
youtube-dl is such a sweet script.
Have a look to the static class "Clipboard". Most specifically "Clipboard.SetText(string)" (Please note that it requires you to add a reference to System.Windows.Forms to use it)
I crash in in far less... It'll be better, just need more time ;) And that goto was temporarily I really need to replace it with while loop I just never get around to it...
What do you currently understand about them?
xkevin - about 15K scanned images put into single PDF causes my lovely 10GB problem. I'm debating about chopping it into 5K page chunks, but was actually hoping I was just missing something, little frazzled after 3 days of struggling on this!
Thanks, Jak - I looked into the templating, but this file is really a ton of scanned images put into a single PDF, so the template doesn't really help me out that much. Appreciate the insight though. I'll remember that for a possible follow up project!
Also, one of the major things I see forgotten is that even if you do include an online compiler, also paste the code into the actual question. StackOverflow relies on archiving their questions, and URLs may become inaccessible over time, which renders your question useless from then on if the code wasn't in the question.
not much...im new to this topic
i will have a go at this - thank you
The reference-value made sense for me by this example: Imagine you are a painter, who paints houses. When you get the address, you go there, paint the house. The address is a reference. You can give this reference to your other friends (the carpenter and the stonemason) so they can go there, and do their work as well - only the address (the Reference) will be passed between you - a piece of paper, while the house stay where it was. Imagine a value as your car, which is always get broken. When you want to get it repaired, you have to bring your ACTUAL car to the serviceman who will repair your engine. Your car papers won't be enough, and the service shop won't come to your house. Basically, reference mean you passing data as an ADDRESS (piece of paper - everybody go to the address, do what they want to do), while the value is an actual THING which will be moved when you want to do something with it.
thanks I will give it a go
I'm with the other two comments about compressing the images before hand. .net has a great image library. 
That link is not even correct. See here: https://www.reddit.com/r/csharp/comments/4xz4k0/stack_and_heap_memory_as_well_as_passing_by_ref/d6jou50
Stack refers to a literal stack that all programs have. Stack memory is limited in size. Only new things can be removed from the stack, however, removal is very fast. Allocation is also very fast as the stack exists at program startup. GCed languages tend to put very little on the stack. Heap is a little more ambiguous in definition. It is the wild west of memory. There are few rules associated with it. In nongced languages, memory is specifically added to and removed from the heap (in c++, new/delete. In c, malloc/free). In these languages, putting stuff on the heap is expensive as it can often result in asking the os for more memory. In gced languages, most stuff commonly goes on the heap. The heap is usually oversized for current needs and the GC running will maintain the current heap allocation by removing and moving values around. This prevents the application from making many requests to the os for more memory. Stack allocation/deallocation speed is 1 cycle (very fast). Heap allocation in gced languages can be in the low 10s of cycles. Heap allocation in non gced languages can easily be in the 1000s or even 10000 range.
It was an online compiler that was widely used by SO C++, but the domain is lost now. You can probably find a ton of broken links in Q&amp;As if you look. That's why it's important to put enough code in a Q or A.
I'm not to lazy to be helped, I'm just too lazy to add them, the reason being is I just came home, after a long day, and was extremely tired. else { Console.WriteLine("Your Too Scared. Aren't You?!"); Console.WriteLine("Maybe Next Time You Wont Chicken Out!"); Console.ReadKey(); return; }
I'm sorry, but the quality of the post is really bad. You give almost no relevant information for people to be able to say anything.
When creating console applications it's best to focus them on a specific purpose. If you want to put output on clipboard just run myapplication.exe | clip If you really want to do it through C# , look at [Clipboard](http://stackoverflow.com/a/3546026/619960)
I would also recommend this book [WPF 4.5 Unleashed](https://www.amazon.com/WPF-4-5-Unleashed-Adam-Nathan/dp/0672336979)
Use winforms, load text into browser component, and print it from there.
If you want to print out rendered HTML (not the code), you'll have to write the code to render it and then print the render, or use some tool capable of rendering the HTML like a browser control, and print from that control.
Thanks! I'll go find a copy and give it a try.
I had been debating on whether or not to pick up Clean Code. I'll be grabbing it soon. Thanks for the 2 book suggestions, looks like I'll definitely need Dependency Injection too!
&gt; If you want to print out rendered HTML (not the code), you'll have to write the code to render it and then print the render Well thats what Im looking on how to do.
Um, it actually is. His answer is the easiest way to accomplish what you are asking. 
You're most welcome and good luck! :)
Take a look to new [NReco.Data](https://github.com/nreco/data) - lightweight schema-less DAL that supports both full .NET Framework and .NET Core. Unlike Dapper, it allows you to use abstract queries instead of composing SQL in your C# code.
Render with RazorEngine http://github.com/Antaris/RazorEngine or with the real ViewEngine if it is an Mvc.Net app. Generate PDF with NReco PDFGenerator. Create a print dialog.
You can convert it to a pdf (You're going to need a 3rd party library) and send that to your printer. Question though, why do you need to print this from a variable, why not return it to the browser and let the user use the print button in the browser?
Also, I realized that I didn't need to use return; but I can just use the Readkey method
You need to set an explicit size to check for when you check for bytes. Essentially Microsoft made a change where if you were transferring 40 bytes it would send 1 byte then the other 39 bytes.
Do you really need lossless compression for the images? Going lossy would make them much smaller still, with (in many cases) neglible quality loss.
That's not HTML, that's XHTML, an outdated standard that shouldn't be used.
Thought I'd mention I started making styles for WPF toolkit so that it integrates with ModernUI a little nicer. Haven't got all the controls done, but I'm getting there: https://github.com/samoatesgames/mui.extended.toolkit
[removed]
&gt; why not return it to the browser and let the user use the print button in the browser? Automation and a user shouldnt print this out.
&gt; lets not get picky; Lets say it is valid and works 
No print dialog. It should do it automatically.
It's almost completely replicated in Mono, so it works cross platforms. WPF is the bastard child.
Would like to see how this performs against the [**ServiceStack one**](http://mono.servicestack.net/benchmarks/)
Sweet, I would prioritize DI .NET. Probably skip the last 4th of the book; It's on how to use specific containers- I would just use Autofac after trying out some "poor man's DI".
Why not use cefsharp and render it in an offscreen browser?
## Stack and heap This article should explain the difference in far more detail: http://www.c-sharpcorner.com/article/C-Sharp-heaping-vs-stacking-in-net-part-i/ The basics are that they refer to different locations in memory that a program uses. For the most part, you don't really have to worry about this in managed languages like C#. It's still a good idea for programmers to be familiar with, though. As you make function calls, items are added to the stack. Stack memory only exists during the scope of the function. So once you exit the function, its part of the stack is popped. Heap memory is longer lasting. Items added to the heap can be accessed from anywhere in the code as long as you have the address to the memory. In C#, there are two types: value and reference. Value types go to the stack, while reference types go to the heap. The reference (otherwise known as a pointer) itself goes on the stack. When dealing with reference types, the variable actually contains the value of an address in memory on the heap (pointer). So doing something like `someObjectA = someObjectB` doesn't copy the values of someObjectB, it copies the address of someObjectB to someObjectA. Side note: generally when you hear of "memory leaks", it's because an object was added to the heap and the memory isn't cleared after it's used. Memory leaks get bad because the offending function can be called repeatedly which results in constantly utilizing memory. This is what garbage collection is meant to take care of: .NET will remove items from the heap when they're no longer needed. In a language like C, you have to explicitly put something onto the heap and then remember to free that memory when you're done with it. Garbage collection will generally keep something on the heap until it realizes there's no reference to it anywhere on the stack. ## Pass by value/reference When you pass by value, you're allocating new memory to store the contents of an item. For example, if you have `int x=5` and you pass that to a function by value, a new allocation of memory (on the stack) is created to store the value '5". When you pass by reference, no new memory is allocated. You end up passing the reference (address) to the location in memory. So if you have `int x = 5`, it's address of memory is simply sent to whatever you're calling. Inside the callee, any changes to x will persist when it returns. The big difference here is side effects. It's a lot easier to show this with an example. C# *is* pass by value, but it gets kind of complicated. There are such a thing as "reference types" which are pretty much anything other than the primitives. In a lot of ways, this acts as pass by reference with a few key differences. The important thing to keep in mind here is that the reference (location in memory) to the object is still passed by value. This is best shown: void functionA() { int x = 5; someObject y = new someObject(); y.someInt = 15; int result = functionB(x, y); Console.WriteLine("result: " + result); Console.WriteLine("x: " + x); Console.WriteLine("y.someInt: " + y.someInt); } int functionB(int A, someObject B) { A = 10; B.someInt = 20; B = new someObject(); B.someInt = 30; Console.WriteLine("B.someInt in functionB: " + B.someInt); return A; } You can run this simple example here: http://ideone.com/F3Xvz5 The output looks like: B.someInt in functionB: 30 result: 10 x: 5 y.someInt: 20 As you can see, the modifications to x within functionB don't persist. However, the modifications to y.someInt *do*. What makes it confusing is that modifications to y itself also don't persist. This is because y in functionB is actually passing the value of the reference. If C# were pass by reference, then y.someInt would print 30 in functionA. If you take what we learned about stack and heap, we might be able to better understand why C# behaves this way. If you look at functionB, the variables A and B are both on the stack. B, in this case, is a pointer to memory in the heap that contains the values for that instance of someObject. The line `B = new someObject();` changes the pointer to a new location in the heap, however this is only stored in the stack for functionB. When we return from functionB, this part of the stack is popped and we're back to functionA's portion of the stack. Here, y still holds the pointer to the original instance of someObject. Many (most popular ones) languages actually work like this. I've heard some people describe it as "pass reference by value" to better illustrate the idea.
I recently received a ZenBook Pro UX501V2, and have found it to be great for development.
Check the output for exceptions.
Does it work on multiplatforms? 
Which one are we talking about ServiceStack.Text? or do they have something else that is faster?
thank you i will have a go at this
I will practice this later today - cheers
I do not believe so. Cefsharp certainly does not but cefglue used to. 
Im trying out the webbrowser control some of you mentioned but I have a issue where I cannot select the printer I want it to print out of (it will print out of default). This is a bit of a issue.
&gt; Unfortunately, we now have fragmented memory. C# uses a compacting garbage collector. It will move memory about as it sees fit, so fragmentation should be less of an issue. This is why you need to "pin" arrays (or similar GC-ed objects) if you want to lend it to a native process. The GC may move the contents while the other process is using it otherwise.
I've added ServiceStack.Text and NFX.Slim to the benchmark. Smaller numbers are better. Round tripping the serializers 1 mil times: Wire - preregister types Serialize 318 ms Deserialize 290 ms Size 38 bytes Total 608 ms ServiceStack Serialize 3609 ms Deserialize 3726 ms Size 112 bytes Total 7335 ms NFX.Slim Serialize 1896 ms Deserialize 2001 ms Size 47 bytes Total 3897 ms So SS.Text seems to be 10+ times slower, and NFX.Slim, 6+ times slower. (With the obvious possibility that I'm doing something completely incorrect with their apis)
I place public first and private last. When I look at a class what initially matters to be is the public API - since that's the location where everything starts. Every private method will be called within a public one (generally).
I'd love to know how this compares with OCaml. I never managed to write serialization code on .NET that runs anywhere near as fast as OCaml's built in `Marshal` module...
Printers know how to print PDFs. You should be able to send a pdf directly to a printer and the printer should have no problem printing it out
The user never see's this page before it is printed out? Most of the time when I am having a user print something out I display it for them in the browser without a bunch of bs headers and then in javascript do something like this window.load = function() { window.print(); } Which will open the print dialog window for the user as soon as the page loads
Cool, I didn't know how C#'s GC worked. I come mainly from C++.
Any idea why?
To everyone who jumped on this thread 1. Thank you guys/girls for giving me a hand on this. This was one of those problems that even after 18+ years of having my head buried in code, it was getting to me. 2. See above I owe you one. 3. So, since I can't by everyone a beer, wish I could, but hey nothing in life is perfect, but instead here is the solution.... Believe it or not, it was in front of me the whole time, GhostScript to the rescue! Basically, after you finish the file, whatever method you use, apply GhostScript to it and shrink that file down to about 1/3rd of the original size (18MB file becomes 5MB in testing). Below is the code for anyone who may ever need it. Again, thank you everyone!!! string inputFileName = lOutputDirectory + lOutputFilename.Replace(".pdf", "_cmp.pdf"); string outputFileName = lOutputDirectory + lOutputFilename.Replace(".pdf", "_cmp_withgs.pdf"); Process p = new Process(); ProcessStartInfo info = new ProcessStartInfo(); info.FileName = @"C:\Program Files (x86)\gs\gs9.19\bin\gswin32c.exe"; info.UseShellExecute = false; info.RedirectStandardError = true; info.RedirectStandardOutput = true; info.WindowStyle = ProcessWindowStyle.Hidden; info.CreateNoWindow = true; info.Arguments = " -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dNOPAUSE -dQUIET -dBATCH -sOutputFile=" + '"' + outputFileName + '"' + " " + '"' + inputFileName + '"'; p.StartInfo = info; try { p.Start(); p.WaitForExit(); } catch (Exception x) { Debug.WriteLine(x.Message); throw x; } GC.Collect(); GC.WaitForPendingFinalizers();
It's a brave new world... or if anything intriguing... I would like to do more with my iPad than just read 
&gt; With a serializer geared for native code you can sometimes just blit the bytes right out of memory. You can do the same thing with structs in C#, but it is very rare.
BTW, you can get the Shoulduous source here: https://github.com/benbishop/Shoulduous
Doesn't MS's Orleans project have a pretty good serializer?
I don't think many of the techniques in the source project would translate to JS.
On related note, there's a really cool trick you can play with the GC to take your process out of your server pool while it does GC, so API users/ASP users don't get lagged by your service running the GC while responding to a request. The page for [GC.RegisterForFullGCNotification\(\)][1] has the details. You register with the GC, telling it thresholds to be notified at (give thresholds that are larger than your usual mem usage during a request). When the GC notices there's less than that amount of memory left before it'll perform a collection, it'll notify you, you take yourself out of the pool, and then wait for the GC to run, then put yourself back in the pool. Neat trick. This is obviously geared for scale-out environments, whereas TryStartNoGCRegion is for single-computer circumstances - such as preventing a GC while rendering a frame in a game loop. [1]: https://msdn.microsoft.com/en-us/library/system.gc.registerforfullgcnotification(v=vs.110).aspx
That's generally handled with headers, where you'd take in an account or username, and then usually a key or token. Are you just wanting to use the built in authentication handing, or something custom. If it's just the built in stuff, you just define what roles/users can access a specific endpoint like so [Authorize(Roles="Administrators")] public class SomeController : ApiController { } And don't forget to add the authorization thing in your global register function config.Filters.Add(new AuthorizeAttribute());
I think you do not understand my point. I am trying to implement the whole authentication process (AspNetUsers, Roles) and other tables.
And then are you using asp.net webforms or mvc?
Well, what's the error you get? Check your output.
Not everything, just reference types. Value types, a.k.a. structs, lack any additional type information in .NET. This is important because stucts are often marshaled to native code (e.g. C functions in Win32 DLLs). *** Fun fact: When you create a struct in C# the CLR actually sees two types. The normal value type we expect and a second reference type used for boxing operations. I don't know if this actually affects compiler writers or if it is just trivia that only CLR implementers care about.
What's the **error** you get? **Check your output.** You're getting an exception. Knowing what error you got is helpful in fixing it.
I do not get any error while debugging. I just get Server Error in '/' Application. The resource cannot be found. On the localhost screen.
You do get an error. Did you actually look at the output window of Visual Studio? You should also turn on "Break on throw" in the exception settings.
Asp web api.
Application Insights Telemetry (unconfigured). That is what I get.
&gt; Asp web api. You're not answering my question. Where does your user system sit? Is it built yet?
This is a awesome step by step guide! Thank you for writing it. I learned these patterns about 2 years ago and it has become my bread and butter. Highly recommend following these instructions.
Microsoft.OData stack? http://odata.github.io/
That looks promising. I'll have to figure out exactly which part is the parser.
The Orleans serializer is about 10x slower than Wire. We have had some casual chats about if it would be possible to use Wire in Orleans, but nothing more than chats so far.
Another class owns the blocking collection. Please explain the solution. I am not sure what do u mean. 
Probably the Roslyn Scripting API.
I use `System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile()`, and then use reflection / interfaces to build a scripting environment.
It is working now. I just checked. Thank you so much. :) 
I've been working on a micro orm to use at work and started with pretty much what you've done (takes in a dataset or table and does property matching on column names) - looks very clean and organized. Something that I found to be a bit quicker was to start the mapping by creating an index based mapping of what columns actually map to a property of the object. This way, the loop over the data table will already know the what column index maps to what property (along with what the type conversion is), and you don't have to check for each row. Here's what I found that I needed to work into my orm: cache the property info mappings for each unique object type in a static mapper class, allow the ability to pass in alias mappings for unconventional column names, parsing of enum data types, and had to expand the type conversion piece to cover all the data types we work with (like your massager). Some other pieces evolved into it such as logging and timers but I wanted to accomplish what libraries like dapper and mapper provide without the bloat. A cool feature that I thought might be interesting would be to hash column names to an object to cache the mappings so it could skip the index mapping portion. End of the day, 100 different ways to skin a cat and I found it very useful to understand different approaches to doing this stuff. Might not be as robust as bigger libraries but it's very targeted for our domain so performs well/if not better, and if nothin else was a great learning experience. Good job!!
Very high level feedback: * use .gitignore to not commit .vs, bin and obj folders * remove .Console and migrate code to unit tests * regions are awful * abstract your data store out to use providers, then create a SqlProvider and an InMemoryProvider, that way you can create unit tests that don't have a dependency on sql (you may want to look into the repository pattern https://msdn.microsoft.com/en-us/library/ff649690.aspx) * tuples are the devil, create types * why .Core and .Library? * Your string extention method is probably better served in an object called parameterParser or similar. * Core.Context - your disposing and suppressing finalize but then declaring a finalizer... You may want to look into the disposer pattern https://msdn.microsoft.com/en-us/library/b1yfkh5e(v=vs.110).aspx * static classes don't scale (from a coding and refactoring perspective) Some of my comments (see regions are awful) can draw religious disputes, some also may be outright wrong as I wasn't able to drain the code, just gave it a high level once over. Feel free to ask any questions you might have :)
I'm curious - what are some examples that implement this? I read up on Roslyn and seems like a cool tool to understand but I'm struggling thinking of how I could use it. 
I agree with most of the points except * The whole point of the ORM is to be a generic one. It supports all .NET ADO providers. Creating a SqlProvider and so on will complicate stuff. * I use static class to map the datatable to a specific type. **Clarification** * .Core is for data handling. * .Library is for common stuff I might be incorrect in few of my assumptions. I would like to discuss in much more detail. Thanks again for your suggestions.
Never mind; u/cryo is absolutely correct and I am confused.
But...I have to add another library which I would have liked to avoid. So I need to convert the HTML to PDF, temp save the PDF, print the PDF and then erase it...
You're the one that said " I perfer to use strictly C# code". Strictly C# code can't do anything, it's what CLR you use that determines what c# can do.
And Winforms is not in its complete state in the CLR in Mono correct? Well anyways, you win I win, it is irrelevant right now. Using winforms is not a option.
If you're in an environment where roslyn is not yet available. Plenty of folks are behind the times.
Fixed that for you: namespace ConsoleApplication { using System.IO; using System.Reflection; using Microsoft.CodeAnalysis.CSharp.Scripting; using Microsoft.CodeAnalysis.Scripting.Hosting; public class Program { public static void Main(string[] args) { var scriptText = File.ReadAllText(args[0]); using (var interactiveLoader = new InteractiveAssemblyLoader()) { interactiveLoader.RegisterDependency(typeof(Program).GetTypeInfo().Assembly); var script = CSharpScript.Create(scriptText); script.RunAsync().Wait(); } } } }
The use of region is generally indicative of code smell.
Thank you for taking time out. Will implement all your suggestions
Something to note is this whole function (MassageValue) in [Mapper.cs](https://github.com/learncode/Sublime/blob/master/SublimeDal/SublimeDal.Core/Mapper/Mapper.cs#L25-L47) isn't needed and isn't very future proof. Instead you can drop that whole function and just do the following on L17: `propertyInfo.SetValue(obj, row[column.Name] != DBNull.Value ? row[column.Name] : null);` See the first line in the reference section of this [MSDN Article](https://msdn.microsoft.com/en-us/library/xb5dd1f1.aspx#Anchor_2) about `PropertyInfo.SetValue`
That's the crux of the argument against them. 
You are half write about List&lt;T&gt;. Yes it shouldn't be exposed, but returning IList&lt;T&gt; is not the recommended alternative. In the Framework Design Guidelines they tell us to return a concrete class such as CustomerCollection so that you can add functionality layer without breaking backwards compatibility. While accepting IList&lt;T&gt; is a good idea, it is almost never appropriate to return it.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/cowsay] [CowsaySharp - A C# Port](https://np.reddit.com/r/cowsay/comments/4y94es/cowsaysharp_a_c_port/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
I wound up creating a custom [IQueryable Provider](https://msdn.microsoft.com/en-us/library/bb546158.aspx) to compose the syntax for a custom data source. OData didn't know the difference.
Take a look at [Dynamic.cs](http://referencesource.microsoft.com/#System.Web.Extensions/UI/WebControls/Dynamic.cs).. we use something similar to enable .net-like expressions in [Cognito Forms](https://www.cognitoforms.com).. I've seen other products using variations on the same code base..
thanks, that was alot simpler than I expected
As others have mentioned, the Roslyn Scripting API seems best in this case. What others don't seem to have provided is their examples page. It has examples for just about everything I think you'd need. https://github.com/dotnet/roslyn/wiki/Scripting-API-Samples
Just tweeted a bunch of this so have links handy: http://www.hanselman.com/blog/VisualStudiosMostUsefulAndUnderusedTips.aspx https://jackmott.github.io/programming/tools/editor/ide/visual/studio/2016/07/01/marginal-gains.html https://jackmott.github.io/programming/tools/editor/ide/visual/studio/2016/07/11/decruft-visual-studio.html 
Three stand out above all others (going by memory here -- everything seems more intuitive when the window is open...): 1. `CTRL + ,` - It opens a little box where you can type a class, enum, file, etc name. Basically a really general search system. 2. `CTRL + .` - Use it to automatically add references and using statements. Eg, if you just typed some class name and you know the reference hasn't been added yet, you can instinctively tap `CTRL + .` to quickly add that. IIRC, this is actually the general "resolve issues" hotkey, but I mostly use it for quickly adding references/usings. 3. `CTRL + SHIFT + SPACE` - Use inside the parenthesis of a method call to get details of the parameters. If the method is overloaded, use the up and down keys to switch between the overloads. As an aside, bookmarks are a feature that are very useful and not immediately obvious to exist. Use `CTRL + K, CTRL + K` to add/remove a bookmark. You'll probably need to add the bookmarks window to your view (`CTRL + K, CTRL + W`) to make good use of this. In that window, you can name bookmarks and easily switch between them. Super handy when you are constantly switching between multiple areas in the code (especially if they're in the same large file).
Good to hear. Passing by reference is generally rarely needed.
I use cowsay more than a significant amount of unix tools. This is pretty great.
Combined with figlet, it's amazing.
Since git I use the "panic save" (Ctrl + Shift + S) a lot to ensure all files are saved. 
Ctrl+K, R is a common one for me, Find All References. It will show you every pave a specific identifier is referenced. If you're maintaining someone else's code, it's a life saver. Ctrl+R, V and Ctrl+R, M are also useful: Introduce Variable and Convert to Method, respectively. Introduce Variable replaces the selection with a variable, moving the selection to its definition, and will also check for other local uses of the same expression to replace too. Concert To Method works similarly, but creates a new method and inserts a call, instead of a variable.
`CTRL + K then C` to comment out your current selection. `CTRL + K then U` to uncomment the selection.
Start by cleaning up that code. You have poor meaningless variable names and a very deep indentation. Split it up into multiple methods, give meaningful names that actually indicate what you refer to.
Use Dapper, then Slapper.AutoMapper to map the 1:M relationship. The only requirement is that in the SQL you prefix the return columns to your object name. I can give you an example later when not on mobile. [Example.](http://stackoverflow.com/a/30080951/3516555) [Example of how it's used in code.](http://pastebin.com/70dFnSwY) [Example of SQL](http://pastebin.com/74mFRsmp)
Would that approach also work with many-many relationships?
Sorry I mean admin scale I want to make an array of (person, ip) and have the program handle adding a lable and testing of the guy is in the office The other portion I don't think I explained well is this is a continuous loop once it gets going keep checking all day unless I turn you off
Yeah I was aware of that trick although it always seemed overkill to me. To prevents GC pauses, you need to take an entire machine out of rotation, what about if GC happen once every 30 secs!! So I'm glad they added TryStartNoGCRegion() as another option
Deleted 
Regions are often used in other circumstances, though. At least in my experience. I never use them myself.
It's somewhat of a matter of taste. I personally don't like returning interfaces like `IList&lt;T&gt;`.
the old one is so parse like coffeescript
Ctrl-K-D, to auto format a document according to your settings. Also, line numbers can be turned on for all document types, not just code. 
This. I don't know why it's not the same combo for both, like a toggle.
Honestly, I'm not too sure. Most of my issues were with handling 1:M relationships, and since I haven't encountered the need for M:M mapping I don't know.
There already was one :P It's linked in the sidebar :)
```CTRL + W CTRL + S``` to open Solution Explorer. I always have it on Auto Hide to have more space for the code. ```CTRL + R CTRL + M``` to extract the selected code into a separate method. ```CTRL + .``` for quick actions. This an obvious one. ```CTRL + K CTRL + S``` to quickly wrap my code into try-catch blocks for example. ```CTRL + K CTRL + D``` to format my code. ```CTRL + R CTRL + U``` to quickly sort and remove unneeded usings. (I don't remember if it's a custom one but very useful). ```Alt + Shift + C``` to open the Add Item dialog in Solution Explorer.
CTRL + K + C (press K then C) to rapidly comment that line or lines. CTRL + K + U to uncomment. 
Agreed.
Hence the word "may". It is correct to say "That's a code smell, we should look into it." One should never say, "That's a code smell, it must be changed." *** As for regions, these days anything that I personally used them for has been replaced by partial classes.
CTRL + [ CTRL + s, locate current file in solution explorer.
This may not be the best answer, but the easiest way I would have to deal with this, is to have a master list. That is added/removed from. Then at the beginning of your loop where you are checking grab a copy of the list. You can do this easily and reasonably light weight with ToList(). If you are looping over the same list that you are adding/removing from, you'll get an exception that the list was modified in the for loop when you try to add or remove someone. You'll then have to deal with reconciliation afterwards to handle getting the status back from someone who was removed from the list, but that should be trivial. Trying to over engineer it now with what happens if all of a sudden you have 10k people in the list is out of scope for the current problem. If it ever grew that large, you're going to have many other things to deal with. So key requirement here is supporting 10-30. When you test, test with 60. A 6-12s update period seems reasonable for my understanding of what you want to do. 
I've been in business for some years already, and I have never even heard of CODE framework or have seen it mentioned anywhere.
It needs to display on a win form program so..... C#
F12 and Alt + F12, go to the definition of the method/class/interface/field.
Power shell scripts probably are the best choice. The program could read in a text file with raw output from the shell commands and parse the data into a nice dashboard 
today
Thanks but no thanks! I am happy with ZSH
Is this built on .Net Core?
Seems to be https://github.com/PowerShell/PowerShell/blob/master/src/powershell-unix/project.json "frameworks": { "netcoreapp1.0": {
Official: https://azure.microsoft.com/en-us/blog/powershell-is-open-sourced-and-is-available-on-linux/
holy shit
I thin I remember reading about it at some point in the past but I can't remember where. 
It looks real to me. It's on the Microsoft Powershell page. https://msdn.microsoft.com/powershell
/u/tweq gives the actual answer. I wanted to chime in to say I love this pattern and have used it for years. It's a lot more code than enums but also a lot more power. Jimmy Bogard shows a more mature version of the pattern here: https://lostechies.com/jimmybogard/2008/08/12/enumeration-classes/ At my last job there was a tiny corner of the app that used hardcoded strings. I turned them into enums. A bit later I used this pattern. After a year of refactoring, it turned out to be where a lot of logic relied upon and it evolved into a state machine which ran a good portion of our flagship program.
There was a vote for it at https://windowsserver.uservoice.com/forums/301869-powershell/suggestions/11689284-powershell-core-for-linux?tracking_code=65154afcdfbe46a4d3bf2ff1a2ecf5f0 
This doesn't feel right. I feel strange after reading this...can't explain it. Something just feels off.
It doesn't say "Powershell is the best, use powershell!", it's giving you the source code for very commonly used product. Whether you use powershell or not is pretty irrelevant here, hence the down votes.. 
In 2013, it's different. WHY is it changed in 2015. :*(
Why? They've been open-sourcing a ton of stuff, particularly tools related to .NET. Open-sourcing Powershell is a natural consequence of that.
[This says](http://visualstudioshortcuts.com/2013/) otherwise. KC/KU works also. ETA: Launched 2015 on this same computer and the keystrokes are the same EC/EU. I guess it was another computer that was KC/KU.
Replace /u/tweq 's extension method with the following FieldInfo fi = value.GetType().GetField(value.ToString()); DescriptionAttribute[] attributes = (DescriptionAttribute[])fi.GetCustomAttributes( typeof(DescriptionAttribute), false); if( attributes != null &amp;&amp; attributes.Length &gt; 0 ) return attributes[0].Description; else return value.ToString(); 
In order for a client application to access SQL Server, it does have to have a client-side application of some SQL Server components. So depending on your SQL Server license, it's possible that those components are licensed on a per-CPU basis.
Ya but it does say "Powershell is cool again", which it is not. Believe me I've been using it on my Job, hence your down votes don't change my mind.
Can you give me more info on this, please?
Did you even read the article... Literally the first paragraph. 
Why not? At any rate, MS has been porting quite a lot of things to Linux. It makes sense that they'd want the various scripts they've written for Windows to be able to run on Linux, too. I wouldn't really expect most Linux users to use it. Most likely it'd be used solely for stuff related to C# development and for interoperability with other MS programs.
That's exactly what I thought. Reading the faq makes it look like using something like SMSS or some other SQL query application might require CALs, or anything that's not a web client, or anything that's not AD Authenticated. However, free clients like Heidi SQL, how could that even have a CAL? Even if I had to have one, how could I add CAL management to a winform? MS Licensing is confusing. 
I think you are overestimating my testing skills lol. I just feel like a few tests should exist to make sure I'm doing the right configurations and resolves...I wasn't going to be testing Autofac but only my own container having the right configuration to ensure conventions are being followed. Is that a no-no? I've never really finished any big projects or any small ones either. So this is only my first time trying to use DI but there is so much more that I also have to learn/remember/figure out.
You are being down voted for being a neck beard about it, not because you don't like powershell.
It really depends how your IT department licensed the SQL Server. In very basic terms there are three ways you license a SQL Server. Per User, per device, or SQL Server CPU cores. The first two are you buy a set number of licenses and that many users and/or devices can access the SQL Server. The latter is unlimited users and devices, instead you buy a licenses based on how many CPU cores are in use on the SQL Server server. Your initial post leads me to believe they use user/device CALs and they have detected 40 devices they don't have licenses for. There is nothing you can do about it, it is up to your IT department/CTO/CIO to get their Microsoft licensing in order. There is no license for you to buy and install in your software.
With ReSharper I've configured: * Switch to left tab: Shift + Alt + [ * Switch to right tab: Shift + Alt + ] * Locate in solution explorer: Shift + Alt + L * Navigate to previous cursor position: Alt + [ * Navigate to next cursor position: Alt + ] * Navigate to all: Ctrl + N * Navigate to implementation(s): ctrl + b These operations pretty much drive all my coding.
But the row could already exist, I just want to put text inside a specific row in a specific column. 
I'm using 2015 enterprise (fresh install) and it's KU/KC like the others... Maybe it's another config changing that? 
That'd be kinda cool.
That's why Vulcan will be better than dx12.
CTRL-TAB, SHIFT to cycle through open docs. ALT-TAB, SHIFT to cycle through open apps, SHIFT reverses the direction ( I may have them docs and apps backwards). CTRL-G go to specific line. CTRL-SHFT-F, H global search H is replace. F6 Used to be build, now I use ALT-B-U F5 run ALT drag mouse down/up for column edit. This one always wows other devs lol. I'll paste formatted text for editing in a vs doc cause this is such a handy feature. 
When you put "add a row" in your post, it insinuates that you want to...add a row. 90% of my post still applies, you just have to search the table for your row after you know which column you need to look in.
Removed: Rule 4, Rule 5.
Or worse. It cuts both ways and opengl is a project that allowed way too many people in on the design. 
Yea, but it's annoying that try the CLR doesn't just do that for you. I hear the JVM is likewise bad a reflection.
I am not gonna waste my time with Fanboys, but if you read my first comment I was just being specific about my preference, and if being the one to mention opinion is neck beard, so be it, give me thousand more dislikes, doesn't effect me!
 Sure Fanboys.ps1 can never understand the metaphors, and I would rather not waste my time with them. 
mount /dev/sdc2 /mnt/tmp *permission denied* *Do you have problems getting things to do what you say? Well, for 10 easy installments of $39.99 you can get access to our special program "supersudo". Which has the ability to execute programs with privileges that far exceed root!*
Maybe. 
The only fanboy here is you.
Spam. Poor quality stuff.
Exactly this. You need to thing of methods as little black boxes, that take input and return output based on the input - on the whole they shouldn't operate on global variables or values within a form. Your `encodeBtn_Click` method should read a value from the form and pass it to `Encode`as a parameter. `Encode` then transforms the input and returns the encoded value. `encodeBtn_Click` can then take the encoded value and display it in the form. This way all the form interaction is in one place (`encodeBtn_Click`), and `Encode` is a simple black box that can easily be tested. You also seem to have 2 methods, `Encode` and `upperEncoded`, that don't seem to be connected in any way; I suspect you want `encodeBtn_Click` to call `upperEncoded`, and `upperEncoded` to call `Encode`. 
If you then want to convert back from a string to an enum here's a helper class that I use. Again it uses reflection but it covers edge cases well. using System; using System.Collections.Generic; using System.ComponentModel; using System.Reflection; namespace Helpers { public static class EnumHelper&lt;T&gt; { public static IDictionary&lt;string, T&gt; GetValues(bool ignoreCase) { var enumValues = new Dictionary&lt;string, T&gt;(); foreach (var fi in typeof(T).GetFields(BindingFlags.Static | BindingFlags.Public)) { var key = fi.Name; var display = fi.GetCustomAttributes(typeof(DescriptionAttribute), false) as DescriptionAttribute[]; if (display != null) key = (display.Length &gt; 0) ? display[0].Description : fi.Name; if (ignoreCase) key = key.ToLower(); if (!enumValues.ContainsKey(key)) enumValues[key] = (T)fi.GetRawConstantValue(); } return enumValues; } public static T Parse(string value) { T result; try { result = (T)Enum.Parse(typeof(T), value, true); } catch (Exception) { try { result = ParseDisplayValues(value, true); } catch (Exception) { return default(T); } } return result; } private static T ParseDisplayValues(string value, bool ignoreCase) { var values = GetValues(ignoreCase); var key = ignoreCase ? value.ToLower() : value; if (values.ContainsKey(key)) return values[key]; throw new ArgumentException(value); } } } Example Enum public enum ContactInformationType { Unknown = 0, Personal = 1, Company = 2, [Description("Third Party")] ThirdParty = 3 } Example Parsing EnumHelper&lt;ContactInformationType&gt;.Parse("Third Party") returns ContactInformationType.ThirdParty 
For C# default settings it's Ctrl-E-D I think.
You should consider looking at learning WPF rather than WinForms since Win Forms although not officially deprecated is not really a technology you want to use for new applications. It's vastly inferior to WPF, although WPF does have somewhat of a higher learning curve if you want to do it properly, which involves learning the MVVM pattern and how to apply it. WPF's data binding and advanced layout engine are reasons alone to not use WinForms imo.
While you're receiving mostly yeses, I tend toward no. My reasoning is that if a user wants to extend my classes, and it isn't going to break the base functionality I've provided, then they should not be arbitrarily restricted. In other words, trust the consumer to do the right thing (but in this case, I don't care what the consumer does; it's up to them). Sealed classes can also make certain approaches to automated testing difficult.
Only way I can think of is that 'update' with lower case u is also defined as a valid function and you mistakenly called that one. Maybe from the base class your class is inheriting? Otherwise the compiler would yell at you and not work.
Your switch statement can be replaced with something like this: encodeArray[i] = Encode(letter); char Encode(char letter) { int ival = (int)Char.ToLower(letter); return (char)(ival &gt;= 104 ? ival - 7 : ival + 19); }
Yes. Marking classes as sealed communicates information to the maintaining developer. As soon as I see that "sealed" keyword, I know that the implications of modifying that class are limited to that class itself.
This would be my guess. Easy way to find out would be to change it back to `update`, put the cursor on it and hit F12 to see where it's declared.
This is actually a constructive answer
I agree with XVar that you should try and learn WPF over WinForms. I've been using C#/WPF at work for just over a year now, so I'm still pretty new at it as well. Some basic stuff that I've definitely used a lot are: 1) MVVM Model 2) Building a basic UI (Grid, StackPanel, DataGrid, Label, TextBlock, Button, etc.) 3) Properties, Data-Binding, Events, Commands 4) Multi-Threading between the UI thread/background threads, synchronization (Threading.Tasks, dispatcher, locks, await/async, ResetEvents) 5) If things look ugly at first, start with MahApps.Metro, and then learn how to style with resource dictionaries 
If that is what made the most sense then it would be default. That's what classes do in object oriented programming, the inherit from other classes. Inheritance is one of [the pillars of object oriented programming](http://cs.smu.ca/~porter/csc/common_341_342/notes/oop_3pillars.html). Why are you afraid of someone inheriting from your class?
If it's code only you use, flag it as internal. Sealing classes that only you use is not generally a helpful thing to do, IMO. 
But first shouldn't we ask if anyone cares? No one in those communities is likely to use PowerShell. The only ones who will will be people who are already stuck with Windows for one reason or another (poor souls).
I suspect you're developing with Unity. Unity has a scripting model whereby function names are called _by convention_ and they have no strict _compile time enforcement_ for those functions. The place that this naming is defined/expressed is in _documentation_, rather than being expressed as a C# language feature or contract (say as an `interface`). Thus, there's no real way for the C# language or compiler or Visual Studio to know about what the _documentation_ says is required. So this really isn't an issue with C# or Visual Studio or the compiler, this is an issue with the way Unity developers chose to express the naming requirements. Because function names in C# are case sensitive, naming your method `update` is just as bad as a typo like `Udate` or `Update2` or `Uupdate`. For the future, perhaps you can save yourself headache by making the interfaces yourself. For example: public interface IUpdate { void Update(); } Then you can implement it on your component scripts: public class MyComponent : MonoBehaviour, IUpdate { } This would throw a compiler error because you're missing the `Update` method. public class MyComponent : MonoBehaviour, IUpdate { public void update() { } } This would throw a compiler error because you typo'd the method name (lower case `update`). (Well really, the error would be because you're missing `Update`. The compiler is quite happy for you to have both an `update` and an `Update` method simultaneously.) public class MyComponent : MonoBehaviour, IUpdate { public void Update() { } } This would compile just fine and Unity will execute the `Update` function just fine. Other benefit of making these interfaces is you don't have to remember any of the method signatures, and you can also auto-implement them by right-clicking (or `ctrl+.`) the `IUpdate` and choosing to implement the interface. You can also combine the interfaces or make a typical interface if you find yourself using the same methods over and over again. --------------- EDIT: I don't know _why_ the Unity developers chose to do things this way. Could be an old legacy issue with how their engine was first developed, or allowing flexibility with using multiple languages (UnityScript, Boo, C#), or how they do some of their message passing, or just keeping things as simple as possible (don't have to teach newbie programmers with zero experience what a concept of an `interface` is).
that is free. if your SQL Server is per core licensed you can connect with as many clients as you want. 
It can help with optimization. 
Imagine a Windows admin that has a few Linux servers they need to maintain .... and schools. I can see MS pushing for this to be taught as the one shell to rule them all. 
Really? I'd like to read the documentation on this (for curiosity, not because I'm asking you to prove it).
Do press "formatting help" and read the part about code next time :)
Can u highlight the part that seems smelly so i can fix it. Also can u explain the solution a little bit more. 
Where do you think I can learn WPF? Is this a good source?: https://www.youtube.com/watch?v=8UtfG-paldA&amp;list=PL8m4NUhTQU48LI4hMrzdiLxfSY4-QcJ3l&amp;index=1
If you're a library author and have a business requirement for backwards compatibility, even though you want to enable overriding everywhere doing so really limits your ability to adapt in the future without breaking ABI/API. It is easily the hardest thing I struggle with almost every day.
I was speaking specifically about library classes. I'm **ok** that whatever thing I overrode to fix whatever assumption library writer had and made it unusable enough to go overriding class functionality blows up. 10:1 cases I have it's about specific circumstances and not doing something to avoid nullrefs anyway. Having that class sealed and functions non-virtual hoses me to no end.
So long as your sealed class implements an interface and all of your libraries accept interfaces rather than concrete instances, I don't see how it could do any harm. If you don't use interfaces though, you're making things a pain for your end user when you seal a class.
Good job! 
Honestly, no, that looks like garbage. Pluralsight is hands down the best place to learn C# topics these days, you can get a free 3 month subscription from the Dev Essentials program here: https://www.visualstudio.com/en-us/products/visual-studio-dev-essentials-vs.aspx Examples of the WPF content available there: https://i.imgur.com/JvtP7Gq.png https://i.imgur.com/FOKQU4Q.png 
Thank you. Noted everything. I dont want to start the task at the time of creation. That's why i am using new. Is there any alternative way to start a completed task. I didn't understand the task. FromResult solution. 
&gt; `Task.FromResult(await otherTask)` Likely you know this, but for completeness sake, **if the `otherTask` is _guaranteed_ to be complete** by this point, it is safe to use `otherTask.Result` and other **blocking** members. It will save your code from requiring an `async` method signature and all the IL and other run-time fun that generates. 
&gt; a few hundred terabytes On an ordinary PC? Most enclosures can only hold 6-8 drives, at 8TB each that's a long way from that figure. 
It does give different exception behaviour, unfortunately, although `.GetAwaiter().GetResult()` can remedy that.
Even if you move your player to make it overlap a trigger, Unity won't call the OnTriggerEnter or OnTriggerExit functions unless one of the objects involved in the overlap has a RigidBody or CharacterController component/script. If you're moving your player manually through your own script (and you're not using a CharacterController component already), you should be able to add a RigidBody component to the player and check the box that makes it kinematic. That way, you can move it around freely but Unity will still trigger collision and overlap events.
Check your web config and make sure it didn't leave behind an assembly redirect for newtonsoft. I'd uninstall newtonsoft from nuget and make sure my web config had no references to it before reinstalling. 
No problem. I've never heard of UWP before, so TIL.
Most games do that by blinking the icon when the game is minimized nowadays tho.
For a specific case like this I would almost be tempted to say that making one yourself would be the best choice, maybe by using some compressing library to help on the storage.
&gt; It's the only option if you want to make a decent app Only as long as Windows 7 stays relevant in terms of marketshare. Windows 7 should become irrelevant faster than Windows XP did, but it still probably takes a good while to happen. But that still does not make WPF any less abandoned by MS.
 I use style cop. It helps enforce these. Usually fields, constructors, properties, public, protect the and then private methods...but whatever suits!
Start with aspect oriented programming and IL...
What about `ReceiveActor.ReceiveAsync`? The documentation says that the actor is suspended until the `Task` completes.
Thanks, I wasn't aware of that based on any of the resources I had seen so far. I'll try it out.
It works wonderfully. I'll update the article.
The answers on both *"Why can't you use async and await inside the actor's OnReceive methods"* and *"What are those TaskContinuationOptions.AttachedToParent &amp; TaskContinuationOptions.ExecuteSynchronously flags you keep using on ContinueWith inside an actor?"* are unconvincing. You can still have a single actor handle a single message at a time if you just return a `Task` and await it. There would be no concurrency, and no interleaving whatsoever. And I have no idea how `TaskContinuationOptions.AttachedToParent` is relevant at all here. There doesn't seem to be a parent task to begin with (the antecedent task is not the parent task)
Does Akka.NET do not offer a task based API? Is there no `ReceiveAsync&lt;TaskMessage&gt;(..)` method that can use a handle method that returns a task? I mean it's obvious that you shouldn't be using context related information when you're within an `async void` method (aka fire-and-forget-method).
&gt; However Console.ReadLine() isn't a string it's a command holding an integer, so I'm stumped. `Console.ReadLine` is a method that returns a `string`, it returns a whole line read from the console (hence the name ReadLine). You're trying to store this in an `int` variable, which does not work. You can attempt to **parse** an integer from the string using `int.TryParse`. You should also check out /r/learnprogramming, which is a sub-reddit more related to your level of experience.
May sound harsh but... Continue to learn on your own. This is so extremely basic, you have to figure stuff like this out yourself or you won't reach any level of programming knowledge whatsoever. 
Console.ReadLine() returns a String. That's what the error message tells you. If you want an integer, you have to parse the string. Look into e.g. the Int32.TryParse or Int32.Parse methods.
[`Console.ReadLine()`](https://msdn.microsoft.com/en-us/library/system.console.readline%28v=vs.110%29.aspx) returns a `string`. Even if you input a number in the console, it will still consider that a string. Just in the same way that: string s = "3"; int i = 3; Are both "three", but are incompatible with each other. If you want to convert your text `ReadLine` input into an integer, use the [`Int32.Parse`](https://msdn.microsoft.com/en-us/library/b3h1hf19%28v=vs.110%29.aspx) method.
I'm amazed at how many people (across various posts) recommends Parse without ever mentioning TryParse
I created the async await support for Akka.NET &gt;"Why is it such a problem to have elegant asynchrony in our actors," There is no problem, `ReceiveAsync` does exactly this. (that being said, the implementation is somewhat iffy due to the way the internals of actors was designed on the JVM.. but that is offtopic) ## But: ### Overhead There is some slight overhead of using this approach as we need to flow the current context across async steps. Which is what Orleans do too. But compared to the sync pipeline, the sync approach is a lot faster (30+ mil messages per sec on a laptop) The `ContinueWith` or `PipeTo` approach is also faster than the `ReceiveAsync` as those do not carry around the current context. ### Design Now to the real reason: Using async await tends to make you design your actors in a request response fashion. e.g. you might have a sequence of `Ask` calls in your actor, and that works fine with async await, but it is not reactive, it is request reponse. If you instead shift your mindset to think of how data can flow in a different direction, you will get a much better system. For more info see my blog post on this topic http://blog.nethouse.se/2015/10/04/designing-reactive-actors-akka-net/ ### Deadlocks You can also end up with deadlocks if and actor ask's itself directly or indirectly via other actors. e.g. `var x = await self.Ask&lt;Foo&gt;(msg)` As that would suspend the mailbox processor and the "msg" would never be processed and the task never completed. This is however not unique to async await, the same issue will occur sync if you do: `var x = self.Ask&lt;Foo&gt;(msg).Result` Using `PipeTo` prevents this as there is no suspension of the mailbox. /Roger 
There is, and we have an `ActorTaskScheduler` which takes care of flowing the actor context between async continuations. see my response below.
Yes, `TryParse` is preferable when you can have input that can fail. But I recommend `Parse` for individuals who are still very early on learning about programming. /u/ru5t3dcl0ckw0rk is having issues understanding return values from methods, incompatibility of types, understanding error messages, and thinking that the string "3" is an integer. I'm not going to toss them a function where they're going to have to deal with `out` parameters, passing by reference, and its associated `if` check pattern. They have to start with the basics then move from there.
I should have said 'upto', but yes, you're on the right track, it's something which could possibly require us to manage multiple PCs.
As always... "the best way to get the right answer on the Internet is not to ask a question, it's to post the wrong answer".
Typically, for that quantity of data, you're looking at a SAN being run over iSCSI. It'll take up most of a rack, and you'll probably want a tape library to manage backups. Talk to Dell/EMC. Back when I wrote code to manage large numbers of (relatively) small files, the one thing that allowed it to scale was to create a nested set of folders, so that each folder didn't have a gazillion files in it (NTFS has limits on this). If you look at how a GUID is constructed: 57ee0a6f-c76e-417d-b75f-13b2275ee7e1 You're tempted to nest folders by the dashed divisions. That won't get you far enough. Break it up by pairs of digits. So your top level folder has 00 thru ff, and this file would be in the 57 folder. Under that is also 256 folders labeled 00-ff, and this file would be in the ee folder. And so on. The last folder would have the photo file named with the full GUID name, and a matching file (xml, maybe) with the metadata. More on that in a moment. You'd have a database to map file metadata (name, photographer, subject(s), date taken, f-stop, etc) to this guid. With indexes, searches in the database will be pretty quick. And file access would require a consistent 15 folder traversal. If you run into capacity issues, you can turn the top level folder into network shares to send searches to multiple SANs or just do the mapping in code. An advantage of using two-letter directory names, is that even with the deeply nested folders, you're still under the 250 character MAX_PATH limit. Why the metadata file sitting next to each photo? If the database ever gets corrupted, you could have a process walk the files and recreate it. It'd take a long time and your SAN would be hammered with disk I/O, but you wouldn't be totally screwed. If there are updates to the metadata (corrections, etc) the file is your source-of-truth -- update the database, but the file is #1. Hope this helps. 
Good questions! Currently we had images stored in our database, so we do need to think about migration. But the current collection would be a lot smaller (maybe a couple of TB max). Fast write is important, reads less so. We currently deal with indexing by saving multiple images in one file (per day/camera/etc) and saving the start and end position for that file in our DB. Once the image is retrieved our system will deal with distributing them remotely if needed. Creation and retrieval are mutually exclusive. Deletion is dealt with by deleting all files after a given number of days. Additionally, saving encrypted images is something which would also be important. &gt; just saving them to disk, would just thrash the filesystem. That was a quote from one of my coworkers, but I think he meant that the index file for that folder will get fragmented. Maybe there was more to it than that since he also said his whole computer slowed down after that. 
Thanks for the insight; however I disagree about the connection between async/await and request/response. This may be true in some cases, but there are very valid reasons to use async/await within the context of processing a single message (for example, retrieving data via I/O - database, REST, etc - but needing to preserve message order).
That is not what I said at all, there are valid reasons for async wait, and we support async await, is there something you find unclear here? But for interaction between actors, over using Ask (and thus async await) _can_ be a code smell.
Perhaps I am missing something, but I do believe PipeTo() is a workaround for the limitation of not being able to use async/await. Given ReceiveAsync(), I find absolutely no reason to use PipeTo() (I would just await any I/O operations, and if I need to pipe the result somewhere, I would just use Tell()). Also I find it very odd that ReceiveAsync() does not seem to be documented in either the bootcamp or the blog, which evidently condemn use of async/await and promote PipeTo() instead. Had I known ReceiveAsync() was available, I probably wouldn't have taken the effort to write the article. As for the discussion, what I gathered is that there was a continuous misunderstanding about the nature of asynchronous non-blocking operations that were requested to be supported. For the SO answer I'll edit it out of the article. Thanks for the feedback; I'm more than happy to discuss and learn more.
The argument is that you can avoid certain vtable lookups etc in theory. E.g. if you have abstract class A { abstract void F(); }, sealed class B : A { override void F() { } }, you know that B a; a.F() invokes B.F, and not potentially some overridden C.F.
This is true. It is also a good reason to design around interfaces.
You aren't stumped. You encountered your first hurdle, and you want someone to solve it for you. This is a very basic problem, you need to sharpen your Google Fu skills and attempt to solve it yourself.
«and my humble coding skills» e.g I code as I can, sorry if it has hurted your eyes my dear, don't hesitate to give piece of advices or to help on the code
You would want one Random instance per thread. That gives the best distribution of random numbers the Random class can provide. The `Random` class is using the current time as it's seed. If you create two instances in fast time, they will both always generate the same "random" numbers. That's often undesired behavior.
As everyone else is pointing out, the code is quite messy. Also, since nobody else has said it yet, I recommend naming the components of your GUI. Although it's not needed by any means, it makes it easier to read the source without actually seeing the user interface. Either way, cool project, thanks for releasing it :) 
You could also take a look at Project Rider. I'm not sure if it has a gui designer though.
Why would I need to get rid of static states ? (legit question)
When you start unit testing your code you will see. They're a cheap hack to avoid proper management of your instances.
Ok now I see, crystal clear my dear :) Noisette does not provide multi-threading operations for logic purposes, still, would it be nice to have only one Random instance ? 
U.T are done while coding, I run an hard-coded obfuscated assembly and then I copy some of its MSIL code onto the target assembly. I don't see how would I legitly do U.T in this case, it's an obfuscator, not a "look my first app a calculator". I have dnSpy opened to constantly check the result etc. I'm opened to suggestions
I don't see how you couldn't do unit testing. Your methods perform operations. Write tests that perform that this operations were performed correctly.
I was talking about naming the items, not making it look nice.
I agree that uwp is definitely won't replace wpf, but Microsoft do abandon it for a while now, and I'm not really sure if they going to do anything with it, because seemingly they are focusing on .net core now, and I doubt they ever going to port wpf to core. I know it's not by MS but Qt is a decent choice for desktop application development - or at least a more realistic alternative of wpf than uwp.
I taught a course at one point. It was a hundred hours. It included a team Windows Forms project with source control ranging from network chat to hangman game depending on the level of each student. That is barely enough for beginners and only the best are good enough to get an intern position. I simply don't understand the point of these 10 hour courses unless you already have experience with other languages and you want to learn C#.
Your _anti temper logic_ is a MD5 hash?
Aha! I had a feeling there'd be something standard for this. One thing though, I notice this method is defined in System.Linq. I normally stay away from Linq-related constructs since I work on games, where performance is critical. Are you aware of any performance-related issues with SequenceEquals?
They're lists of structs, so I should be fine I think. They automatically compare by values, right?
Removed: Rule 5.
[It's a pretty simple method](http://referencesource.microsoft.com/#System.Core/System/Linq/Enumerable.cs,63644a881e976b52). A custom implementation for lists could have slightly better performance by exiting early if the lengths are different and avoiding the two enumerator allocations by using `for` loops instead, I suppose.
LINQ is pretty performant, it's just easy to abuse and make something that's very underperforming. You can actually check the [source code for `SequenceEqual`](http://referencesource.microsoft.com/#System.Core/System/Linq/Enumerable.cs,63644a881e976b52,references) and see that it should be pretty efficient. (It has a single iterator for each list and aborts as soon as an item doesn't match.) That said, `SequenceEqual` will also check for order as well. So if you have sets `{Jill, Tim, Bob}` and `{Bob, Jill, Tim}`, it won't evaluate as equal. (A quick way of avoiding this is to order both sets before running `SequenceEqual`) Also, it wasn't clear from your question, but it won't check subsets. So checking `{Jill, Tim, Bob}` against `{Jill, Tim, Bob, John}` won't be equal. Perhaps you can provide some context as to how often you'll be running this kind of check (per second) and how many items are in both collections?
Ah, good to know. Yeah, I already had the check for length in my custom implementation. But avoiding any allocations is even more important to me. Garbage collection doesn't mix well with keeping a smooth frame-rate. Anyway, still good to know about the standard method for non-runtime stuff. Thanks!
Not exactly sure yet how often this will get called, but the LINQ version's allocations of Enumerators already make that a dead end for me. So, I'll just stick with my custom method for now. Still, good to know about SequenceEqual for more general stuff.
If you need better/more secure randomness just use [RNGCryptoServiceProvider](https://msdn.microsoft.com/en-us/library/system.security.cryptography.rngcryptoserviceprovider(v=vs.110\).aspx) which will provide cryptographically secure random numbers from the OS, don't try to do your own thing.
I'm using Unity3D, which does use a pretty ancient version of Mono. But also, it doesn't really matter how long it takes for garbage collection to kick in. Unless it can wait until the next level loading screen, careless allocations will eventually cause a stutter.
Hmm. Interesting concept. If I get some time to dive into this further, I'll look into that.
You don't want to use Random at all. It's not actually random 
WPF does have quite a learning curve. But you sound like you're struggling with OOP. That's kind of a prerequisite. I suggest getting your core C# in shape. After that, there are two ways of using WPF. One is WinForms style. The other is MVVM. Do them in that order. There are some pretty good tutorials online, such as wpftutorial.net . I've also found the free ebook "WPF Succinctly" (by Syncfusion) to be a pretty decent (and brief) crash course on WPF.
Why it isn't ? Mind explain ?
I calculate the future MD5 hash at both runtime and analyze phase time and add it to the EOF to retrieve it with ease.
Also the Linq method is pretty good, just reimplment it swapping `IEnumerator` for your strongly typed struct enumerator and drop the `using`so something like: var e1 = list1.GetEnumerator(); var e2 = list2.GetEnumerator(); while (e1.MoveNext()) { if (!(e2.MoveNext() &amp;&amp; e1.Current.Equals(e2.Current))) { return false; } } if (e2.MoveNext()) return false; return true; For zero allocations. Just ensure you have defined the method `Equals` directly on your struct; else that call will box - as it will make a virtual call to `Object.Equals`
The random class simulates random. It is not truly random. Given your software is code protection, you need strong cryptographic random number generation. I'm not a cracker but using Random I'm sure makes this protection entirely worthless 
Hi! I kept reading a bit and found the proper name is actually a TURN server https://en.wikipedia.org/wiki/Traversal_Using_Relays_around_NAT Thanks for taking the time to understand what I meant. I'm going to search for an implementation, found a few, got to see which works, thanks!
The protected file does not have any Random() reference ;) I'm using random to force-diversify the protection pattern, using switch(Random.Next(0,2)) { case0: //run pattern 1 break; case1: //run pattern 2 break; } on the contrary, it makes it more difficult to make a static decryptor
As a guy trying to learn C# I agree completely. I finished an 8 hour course and a 5 hour course and I'm nowhere near creating an actually useful complex program. Of course I'm not delusional like I can learn C# in a week and get a job but still, I kinda hoped I'd learn enough to actually get some small pieces done and do something by myself, bad or good.
oh! okay! I have that already. Do you want me to make a gist of it and put the link here in a comment? My player as a playerController script and a rigid body component.
If someone could explain the db pricing to me that would be great. I think I have a static site running on it at no cost, but I have no idea if I can even use an mssql instance for free 
Winhost
If you want something light weight but free. Look at appharbor. Free mssql and other goodies for free. 
Are they any good these days? I remember a couple of years ago I subscribed, but their cheap host was cheap for a reason, couldn't cancel my sub fast enough.
This would only work if you can build a perfect hash function which, in this case, seems a bit iffy. Otherwise there's always the possibility of a collision.
I did not know that was a thing. I'm off to rewrite some programs 
Yep, I have that, but my sense of aesthetics prevents me from waiting after I slaughter the screen with my typing. 
I've had decent luck with Arvixe and SmarterASP
If it's a serious site that needs high uptime you will be looking at different hosting providers. What are you hosting?
Why for not critical only? Is there something they're lacking?
Don't tie yourself to end to end tests that can be covered by unit tests cheaper and faster. The organisations I've worked with don't run system level tests for every integrate as they are slow usually.
With core out, I'd look at grabbing a cheap VPS and just using that. Digital Ocean, RamNode, Linode, and Vultr are good starting points.
Actually no, it's a great service for the cost. They recently had some network issues on a few of their servers/clusters, and probably bad timing on my part - emergency HDD issues on mine. 😩 Also, for the extremely low-cost shared hosting- it's a little slow at times. Not bad, just not as fast as you'd like for a critical application in your business. 
I've implemented something like this in the past. Client App &lt;--&gt; VPS &lt;--&gt; Server The client used standard TCP client libraries and connected to the VPS. The server used a standard TCP listener and proxied requests to the appropriate services. The VPS server was running Linux and had IP forwarding on and iptables were configured to redirect all traffic from one port to a port on another host (ie server). This allowed us to host services on non-standard ports yet the client count connect to the VPS on the service default ports. e.g. Client connects to the.vps.com:80 and VPS forwards all traffic to secret.server.com:55221 and vice versa. Let me know if you'd like to know more; I'll try digging up the project information.
I've used SmarterASP and really enjoyed it. It was a bit confusing to set up web publish when using the Cloud Flare CDN service, but their customer service is very good and fast and efficient so I would definitely recommend them.
Yes all links are going to https://go.microsoft.com/fwlink/?LinkId=780617 and it is a bad link
Pluralsight has the most comprehensive and indepth courses on C# and .NET. It's worth the $299 yearly fee.
FYI - when a method is called it uses a bit of memory called the stack to store the arguments and the return location. The stack is small and so after calling recursively the constructor about 40 times it runs out of stack space.
Service Fabric &amp; MVC.
MVC is amazing. I love it compared to Webform.
Which courses do you recommend, in which order?
I'll reply on this gist :) !
There isn't a lot that I don't love more than web forms. Is it just me or is web forms not real fun to work with? I think it's probably just me. 
As a desktop developer: "What the hell?" Web development seems more about choosing the right tools / frameworks than writing code itself.
AutoMapper is one of the strangest things for me. I evaluated it for a couple of projects and rejected it based on gut feeling. In the past two months I am working on a project where other people picked the architecture and it is using AutoMapper heavily. Interestingly this project validates all my concerns with AutoMapper. I can sum up the problem to this: Mapping one type of DTO to another is a lot of typing but not a lot of actual work. Most of the time spent in development is not typing but figuring out why something doesn't work. With AutoMapper you are trading the non-existent problem of typing for the problem of figuring out how something works. When AM doesn't map as you expect you end up digging around and waste so much time that you can probably type all the mappings in the project by hand faster.
1) I have RSS feeds (in Feedly) with pretty much the same blogs you listed. 2) and 3) Honestly, I wouldn't be interested in a news letter. I just don't find the format compelling.
I use AutoMapper because my entities tend to have business logic in them, private setters, and not always a default constructor. Making them unsuitable for serialization. Not to mention it makes building a RESTful API terribly difficult. AutoMapper is a great tool to bridge this gap. But like any framework, you gotta know how to use it. You should always have unit tests for your mappings. If you don't even at least have one test that calls AssertConfigurationIsValid() you're gonna have a bad time. But beyond that you should have tests that check any trickier parts of any particular mapping. Also, you should use profiles as necessary. I find AutoMapper's error messages are usually detailed enough to tell me what's broken and how to fix it. Don't give up on it yet. It's a fantastic tool. 
I am not saying that you should expose your entities. I am saying that it is more practical to do the copying by hand. Just type product.Name = productDto.Name; product.Number = productDto.Number ... And so on. We've done this in 6-7 projects and it was never ever the bottleneck. On the other hand AutoMapper has given us a lot of trouble and practically every non-trivial mapping (like list of child objects or a many to many relation) ends up with a complex mapping with a lot of lambdas or a lot of Ignores which takes us 15 minutes to half an hour to figure out even after 2 months of using it.
With ASP.NET Core, Web API isn't a separate thing any more. MVC and WebAPI use exactly the same base controller class now. Unless you need to deal with legacy ASP.NET libraries, I'd suggest starting directly with ASP.NET Core. You can use ASP.NET Core on both the "full" .NET Framework 4.5 as well as the newer .NET Core. I use it on the classic .NET Framework as I'm still using some of the stuff that hasn't been ported over to .NET Core. 
Why don't you use an actual database? SQLite can run in embedded, so no need to install DB server or configure anything. But don't just convert to DB because you have to, if the textfile fulfill your need and you have a strict deadline, stick to it. And... that's it. Your description is too vague, might wanna follow [this series on specification](http://www.joelonsoftware.com/articles/fog0000000036.html) so you can tell us what you actually need.
When you say MVC, are you including Web API. When looking into something to learn, it seemed like a lot of people were leaning toward something like Angular + Web API. 
Yep, given the complexity and refactoring involved with it unless you've got some serious business rules processing I haven't found it to be worth it as of yet.
Additionally, I recently had a similar revelation with WebAPI and Angular and while I still really appreciate MVC, I'm really enjoying all the client side power a framework like angular gives you and how easy it is.
I wouldn't be so frustrated if AutoMapper was solving something that I felt was a real issue. For example I tolerate EF migrations because they solve a hard problem and as frustrating as they are other options seem even more frustrating. With this type of mapping there is simply no issue with typing a bunch of code.
One of the ways I keep up to date is receiving C# Digests on Sundays :) Otherwise I mostly read links people post here on Reddit.
&gt; finally hop on board and now everyone's shifting to WebAPI WebAPI serves a different function... It is interrelated with MVC but not a competitor. What you should worry about is ASP.NET Core. It's intended to completely replace MVC in the coming years.
I'm familiar with them all, more specially webapi+a JavaScript ui/MVC framework basically relegating asp.net to shuttling data back and forth, ironically the same design from a decade ago
Yes, but even so : your console.readkey will only wait for the user to press any key , then process the rest of your program (and by rest, I mean "go to next line", not "repeat that part until condition is met".) you should have something like var userConfirmation = prompt "do you want to keep that character" while (userConfirmation != "yes") console.writeline("You coward, are you sure?"); userConfirmation = Console.readline(); that's still far from good, but already better than your version, since it will ask the user if he is sure he doesn't agree with his character until he does. Better would be to have an int that you increment each time user answers, then after a maximum you stop asking, for instance, even better would be to allow user to change his character if he refuses to keep it. To do that, the easier would be to have one method doing the character creation, that you would call whenever user refuses to validate his character. Even better would be to be able to call that method on an existing character so you can modify it instead of beginning a whole new one each time. This is why we use OO : to have small packages of code that you use by typing a few keywords. 
This + EntityFramework and you're pretty much set. Also, looking towards the future MVC 6 + ASP.NET Core is probably good to learn on the side, since it's very attractive for businesses running Linux servers. Not mainstream yet though.
dot Net, Telerik, nHibernate, Spring
[r/ProgrammerTIL](https://www.reddit.com/r/ProgrammerTIL/) FTFY
alright thanks.
I believe there is a checkbox when updating your database reference: "Use Plural Names".
WebAPI with angular is slick.
Not mentioned yet... Channel 9
Do you have any recommended resources for learning this? A lot of the tutorials I've checked into online are very simple and don't get into any of the stuff you mentioned.
Can you provide a sample of this? I was just looking into this for a project
Well 3 out of the last 3 companies I worked for were running mvc. We also use web API for certain projects at my current job but we were still primarily MVC using Sitecore CMS. 
While it's useful to learn the state of the art, .NET Core has been changing quite drastically throughout its development, and will take some time to pick up. I would recommend learning the current stable technologies such as Web API, MVC, etc.
Hi! it is beacuse you are trying to create a local var "authResponse" and trying to cast it as an AuthenticationRequest. Requests and responses are handled separatly on the Gs Platform. void TestAuth () { Debug.LogWarning("Authentication attempt"); new GameSparks.Api.Requests.AuthenticationRequest() .SetUserName("Tp9") .SetPassword("Tp9") .Send(authResp =&gt; { if (!authResp.HasErrors) { Debug.Log("Authentication Successful"); } else { Debug.Log("Error Authenticating: " + authResp.Errors.JSON); } }); } Hope this helps =D 
It does move fast forward indeed, but you should point out that desktop development is still way ahead.
this is mime from a multipart form. try https://msdn.microsoft.com/en-us/library/system.net.http.httpcontentmultipartextensions(v=vs.118).aspx 
..way ahead of what? 
You're guessing around. Don't do that. It's not even clear what that method is supposed to do and if you can benefit from multi-threading.
MS Dev show is great if you like podcasts: http://msdevshow.com/
Won't there be an issue with closure around the `i` for loop counter? If the action `() =&gt; GetNodeInfo(allWindowsDesktops[i])` is executed asynchronously, then only when its _executed_ will the value for `i` be _evaluated_. If the loop executes out of sync from the tasks (which is likely, and apparently, more likely in debug mode with more operations going on), then your tasks will get the same value for `i` (if more than one execute during the same loop iteration) or skip values (if the loop iterates more than once before a task executes) Maybe try: for (int i = 0; i &lt; allWindowsDesktops.Count; i++) { while (inventoryThreads &gt; 4) { Thread.Sleep(10); } int iCopy = i; Task.Factory.StartNew(() =&gt; GetNodeInfo(allWindowsDesktops[iCopy]), TaskCreationOptions.LongRunning); } EDIT: This way, each task will use its own variable `iCopy` (one for each loop iteration) where its value is copied/evaluated immediately during the loop, rather than all sharing the same `int i` variable and evaluating its value later upon execution.
+1 for Web API, as it will give your web apps a restful endpoint to work with.
&gt; Ah, i think the roundabout was the way to solve the problem of PropertyMetadata.PropertyChangedCallback delegate only accepts static method. I need the handler to access non-static variable within the control. So that was the way that i did it. Understood. You don't need the handler though -- you can just cast the sender to the type of your control and set whatever instance vars you need to there like so: private static void OnVersionPropertyChanged(object sender, string arg) { BandControl bandControl = (BandControl)sender; // Now you can access any instance vars (even private ones) bandControl.Foo = "Bar"; } &gt; I have a View Model for the Control , named BandControlViewModel and I assign that thing in XAML under the Page Datacontext, which could possibly override the Data Context that the control would inherit from the page that it is being used in. That's what I was thinking too asking about DataContext. Although if the XAML is like what you posted in the question, you would still be in the context of the parent control when you create that binding. If you run this from Visual Studio, you can check the Output tab to see binding errors that might give you a hint as to why it's not liking the syntax.
I'm currently hosting on both azure and smarterasp.net. For a small simple sites smarterasp is my go to, it's cheap, simple and gets the job done. For large sites that are under heavy load, require scaling, database replication, web jobs etc azure is pricey (and has complex pricing) but makes things pretty easy. 
Sure Here is code from a DTO: public class OfficeDto : BaseDto&lt;Office&gt; { public OfficeDto() { } public OfficeDto(Office office) { CopyEntityData(office); } internal override void CopyEntityData(Office office) { this.ID = office.OfficeID; this.CompanyID = office.CompanyID; this.CompanyName = office.Company.Name; this.Name = office.Name; this.Address = office.Address; this.LocationID = office.LocationID; this.LocationName = office.Location.Name; } public int ID { get; set; } public int CompanyID { get; set; } public string CompanyName { get; set; } [StringLength(100)] public string Name { get; set; } [StringLength(100)] public string Address { get; set; } public int LocationID { get; set; } public string LocationName { get; set; } public override void UpdateEntity(Office officeEntity) { officeEntity.CompanyID = this.CompanyID; officeEntity.Name = this.Name; officeEntity.Address = this.Address; officeEntity.LocationID = this.LocationID; } } Note how we retain control over the mapping on update and do not map the CompanyName and LocationName properties because we don't want to. BaseDto looks like this public abstract class BaseDto&lt;T&gt; { public abstract void UpdateEntity(T entity); internal abstract void CopyEntityData(T entity); } BaseDto is not strictly needed but we use it for some generic methods that abstract common create/edit logic When loading an entity we use the constructor to create the DTO from the entity. Example: public async Task&lt;OfficeDto&gt; Get(int id) { Office officeEntity = await Offices.SingleAsync(o =&gt; o.OfficeID == id); if (officeEntity == null) { throw new HttpResponseException(HttpStatusCode.NotFound); } else { return new OfficeDto(officeEntity); } } When we create or update the entity we use the UpdateEntity method. In some projects we had a method to return the entity rather than get it as a parameter but I cannot remember what made us switch. The CopyEntityData method is needed because the generic methods cannot have a constraint on constructors other than default constructors. Therefore we create an empty DTO and then use the CopyEntityData method instead of the constructor to copy the data (this is why it is internal). Example: protected async Task&lt;U&gt; AddEntityAsync&lt;T, U&gt;(U dto, DbSet&lt;T&gt; dbSet, Expression&lt;Func&lt;T, bool&gt;&gt; conflictPredicate, string conflictMessage) where T : class where U : BaseDto&lt;T&gt;, new() { ThrowBadRequestIfModelStateInvalid(); T entity = dbSet.Create(); dto.UpdateEntity(entity); if (conflictPredicate != null) { await CheckAndThrowConflictAsync(dbSet.AnyAsync(conflictPredicate), conflictMessage); } dbSet.Add(entity); await DataContext.SaveChangesAsync(); U resultDto = new U(); resultDto.CopyEntityData(entity); return resultDto; } This is our method to save to the database and return the result back to the caller. We call it like this: [Authorize(Roles = Roles.OfficesEdit)] public Task&lt;OfficeDto&gt; Post([FromBody]OfficeDto office) { return AddEntityAsync( dto: office, dbSet: DataContext.Offices, conflictPredicate: o =&gt; o.Name == office.Name &amp;&amp; o.CompanyID == office.CompanyID, conflictMessage: String.Format("Office with name {0} already exists", office.Name)); } Please note that all generic stuff is just because we abstracted away a lot of logic.
Absolutely, I really enjoyed Jeff Richter's CLR via C#. It's extremely thorough. Here's a link on Amazon https://www.amazon.com/CLR-via-4th-Developer-Reference/dp/0735667454.
If you don't have experience with an object oriented programming language I'd recommend you study the fundamentals of C# programming first. I'd recommend that you first study the language and simple algorithms via console applications and then build a small Windows Forms application (as strange as it sounds Windows Forms is better option if you want to learn OOP than things like WPF). Then move to web development. Seeing that you do not have experience in application programming I would advise that you take it slow rather than jump on the project directly. My conclusions are based on a course I used to teach (100 hours in class + 200 hours expected spent on projects). The goal was to take students from 0 to someone that could be hired as a junior dev/intern but only the best (1/10) achieved that level based on the course alone. Here is the plan for the course 1. Working with the console. What is a compiler? What is the .NET framework? Built-in types, operators, if/else statement. 2. Loops. 3. Arrays. Memory layout of different types. 4. Simple sorting algorithms (Bubble Sort, Selection Sort). Exercises on loops and arrays. 5. Strings, reference types (classes), value types (structs), fields and methods. 6. Methods and constructors. 7. Access modifiers, properties, encapsulation, readonly fields and constants. 8. Exercises on object oriented programming. 9. Inheritance, the object type, overriding methods. 10. Interfaces, abstract classes, delegates, polymorphism. 11. Exercises on object oriented programming and polymorphism. 12. Exceptions. try/catch/finally. Creating custom exceptions. The switch statement. 13. Indexers. Implementing an ArrayList from scratch. Advanced sorting algorithms (Merge Sort, Quicksort). 14. Test. 15. Introduction to GUI programming with Windows Forms. Buttons, Message Boxes, Forms, painting shapes with the Graphics object. 16. GUI programming. Events, Anonymous methods and Lambda expressions. 17. Enums, attributes, using enums with the switch statement. Exercise - building a GUI calculator. 18. Generics. Building a Stack data structure. 19. IEnumerable&lt;T&gt;, iterator blocks, foreach loop. Using the different .NET Framework collections (List&lt;T&gt;, Stack&lt;T&gt;, Dictionary&lt;TKey, TValue&gt;, LinkedList&lt;T&gt;, Queue&lt;T&gt;, HashSet&lt;T&gt;, SortedList&lt;T&gt;, SortedDictionary&lt;T&gt;, SortedSet&lt;T&gt;) - how to choose. 20. Working with streams and files. 21. Threads and Tasks. Locking and deadlocks. Using asynchronous code to prevent blocking UI. 22. Overview of things not covered by the course - literal strings, nullable value types, property initializers, collection initializers, type inference with var, array type inference, anonymous types, extension methods, LINQ, variable number of parameters with params, out/ref arguments, named method arguments and default argument values, operator overloading, autoboxing, dynamic typing, async/await. 23-26 - Project.
For back-end development you should learn (in decreasing order of importance) EF, xUnit, LINQ, CSLA, WCF, and the new async features. The WinForms library will suit your GUI needs just fine while you learn - no need to complicate things further with MVC/WPF.
PluralSight is a great start! I too came from a 10 year IT background and found myself doing one off app projects to improve various parts of my role. Then i decided I wanted a change and did the same as you're doing now. * 1.) Download the latest VS IDE (community edition is fine) * 2.) Intro to Object Oriented Programming (reddit right bar) * 3.) C# Programming Concepts (reddit right bar) * 4.) Data Structures C# 2.0 (reddit right bar) * 5.) Read the Reddit's related to C# and programming in general to understand the concepts faced by devs. * 6.) (On PluralSight) Look at the C# path (under dev tab) I would also look into Web API, MVC, etc as stated previously. Very powerful and easily understandable conceptually.
I suppose everyone has their own learning preferences, and if your just having fun, then why not. In reality though, as a lead Dev interviewing a candidate, I'm not going to bother getting to interview questions regarding popular frameworks unless I can see they have a mastery of the fundamentals. I can't tell you how many devs we have sent away for not knowing the basics of .Net and the CLR. 
Code and error are now updated, but still I can't make it work
many thanks bro. If I can't solve it, just answer in SO and I give you points.
Likely can be done like this: static IEnumerable&lt;T&gt; EnumerateComposite&lt;T&gt;(IEnumerable&lt;T&gt; enumeration) { var stack = new Stack&lt;IEnumerable&lt;T&gt;&gt;(); stack.push(enumeration); while (stack.Any()) { var current = stack.Pop(); foreach (var x in current) { var tmp = x as IEnumerable&lt;T&gt;; if (tmp != null) { stack.Push(tmp); } yield return x; } } } (I haven't tested or even built that code, so YMMV.) Doesn't really involve composition, but you don't really need it to solve this problem in C#. If it must be an object dealing with iterator objects, I'd guess you get something like so: public sealed class CompositeIterator&lt;T&gt; : IEnumerator&lt;T&gt; { private readonly Stack&lt;IEnumerator&lt;T&gt;&gt; _stack = new Stack&lt;IEnumerator&lt;T&gt;&gt;(); public CompositeIterator(IEnumerator&lt;T&gt; initial) { _stack.Push(initial); } public bool MoveNext() { while (_stack.Any()) { if (!_stack.Peek().MoveNext()) { _stack.Pop().Dispose(); continue; } var tmp = Current as IEnumerable&lt;T&gt;; if (tmp != null) { _stack.Push(tmp.GetEnumerator()); } } return false; } public void Reset() { throw new NotSupportedException(); } public T Current =&gt; _stack.Peek() != null ? _stack.Peek().Current : default(T); object IEnumerator.Current =&gt; Current; public void Dispose() { if (!_stack.Any()) { return; } try { foreach (var x in _stack) { x.Dispose(); } } catch { } } } (Likewise, haven't tested/compiled) I think you could even do this with a recursive function and some LINQ static IEnumerable&lt;T&gt; Flatten(IEnumerable&lt;T&gt; collection) { return collection.SelectMany(x =&gt; { var tmp = x as IEnumerable&lt;T&gt;; return new T[]{x} .Concat(tmp == null ? Enumerable.Empty&lt;T&gt;() : Flatten(tmp)); }); } but that's probably not a great solution.
I understand the logic, but I'm not looking to get a job doing this... I am looking to build a next generation app using the latest and greatest technologies I can. We'll see how it goes :)
Out of curiosity, where do you draw the line for deciding what "basics" entails? 
That is great to hear, I'm happy that it brings some value to the community :)
For some reason I can't keep attention for video content, but lots of other people recommended me Channel 9 as well.
Can you publish the benchmarking source code? I'm a bit surprised actually that the `foreach` code runs faster than the `for` code. IIRC, .NET JIT compiles the `for` source code (especially that standard `for (int i = 0; i &lt; rawArray.Length;i++)` pattern) to some fairly high performing array iteration. It might do the same for the `foreach` as well. In fact, I just quickly checked the IL, and of course, the `RawArrayFor` method is performing a `ldfld` operation on each iteration (which makes complete sense). Whereas the `RawArrayForEach` hits the `ldfld` only once (to grab the iterator). A really quick/dirty benchmarking test myself with the `RawArrayFor` using a local variable (to avoid the field lookup) shows those two methods to be operating at almost the same speed (less than 1% difference) with the `for` version consistently running slightly faster. EDIT: Yeah, here's an article discussing array optimizations: https://blogs.msdn.microsoft.com/clrcodegeneration/2009/08/13/array-bounds-check-elimination-in-the-clr/ Basically, because you keep querying the array field in your benchmark code, the `RawArrayFor` has to keep doing a bounds check each iteration and loading the field (twice) each iteration. But change it to a local array reference and the JIT compiler will ditch any array bounds checking for the duration of the loop and only do the field lookup once. EDITx2: I also expect similar impacts in the other benchmark codes, but it might not be as noticeable compared to the other general enumeration and bounds checking. (you could also try simplifying the bounds checking by summing the numbers in reverse order, or evaluating `Count` once rather than every iteration)
Well your code is confusing as I don't even see what awaFGA and homeFGA are. But, this seems a little complicated to me, and as long as you want it truely random, it's not too tough. Just create a list of ints, and randomly add 1-4 to them in a foor loop for however many shots you want to give a team. pesudo would look something like this //this would be where you determine how many attemps they get int shotAttempts = 80 for int i = 0; i &lt; shotAttempts; i++ { listOfAttempts.Add(Random.Range(0,3)); } Then you can just process list of attempts and see how many of each item is in there uniquely. However, if it were me, a shot attempt would probably be it's own little class with properties like made, points, player number, time, etc. You never know how much you want to know about a shot attempt. Then just list a list of randomly added shot attempts, as opposed to radomly added ints
Good catch on the local array reference, I'll update with that. Doing reverse loops causes the .NET JIT to miss array abounds elision, so we don't want to that. Same with trying to evaluate Count once, rather than every iteration. 
Sorry, I meant the reverse loops for the `List&lt;T&gt;` iterations to avoid hitting `.Count` more than once, not for the `Array` iterations because, as indicated, then it doesn't JIT out the bounds check. I'd also like to point out that sometimes you don't really have a choice as to what collection you're using. It's easy to tout arrays over other collections for iteration, but that doesn't help you if you're building up some variable-sized collection. I'm of the opinion that you should choose the data structure that best matches your problem/solution and only optimize away from that data structure when _measured_ bottlenecks appear. I was also surprised though that the `LinkedListLinq` has such a big difference than `LinkedListForEach` since I was sure that the methods are fairly similar or identical. The [reference source](http://referencesource.microsoft.com/#System.Core/System/Linq/Enumerable.cs,17ae8142727f08ee,references) lists it as: if (source == null) throw Error.ArgumentNull("source"); int sum = 0; checked { foreach (int v in source) sum += v; } return sum; However, I didn't realize that `Sum` executes in a `checked` context (learn something new every day!) and I guess that's enough to blow out the performance. So `.Sum()` will throw an integer overflow exception, whereas `LinkedListForEach` will let the integer sum overflow unchecked. Perhaps it's worth noting that the benchmarking methods, while on the surface look similar, are doing things every so slightly differently with potentially different results.
Too bad my VS2015 Update 3 Pro (that's a mouthful) still asks me to login to xamarin account and buy an account...
&gt; but that doesn't help you if you're building up some variable-sized collection. List&lt;T&gt; grows automatically when you Add &gt; only optimize away from that data structure when measured bottlenecks appear. Pointer hopping/cache thrashing and GC pressure can cause general application slowness that will not show up as a bottleneck in a particular function. So, when there is no semantic or code quality penalty, it is best to avoid them, I think. &gt; Perhaps it's worth noting that the benchmarking methods, while on the surface look similar, are doing things every so slightly differently with potentially different results. good point. I'll update with checked addition in all cases to normalize.
Removed: Rule 3 and baiting ($50/month == "spending thousands of dollars"?) Looks like there's a 30 day trial and you can [download the SDK](https://www.microsoft.com/en-us/download/details.aspx?id=50032). Regardless, maybe you can try asking this in /r/microsoft, /r/dotnet, /r/WPDev.
Hi mate, Just copy paste your code on my stackoverflow question and I will give you the points. Your code works! Many thanks.
Yes, absolutely I wouldn't advocate cranking out pages of code to squeeze your problem into a raw array for the small iteration advantage you get over List&lt;T&gt; unless the situation is extreme. I think a reasonable default is 'just use List&lt;T&gt;' and think hard before you touch LINQ. 
I refactored / cleaned some part of the code
By [Perfect Hash Function](https://en.m.wikipedia.org/wiki/Perfect_hash_function) I meant that you would have to make sure that the function that calculates the hash based on the list elements does not produce collisions, otherwise you might end up with two lists with different elements having the same hash. Writing a hash function like that is not so simple if the lists can contain arbitrary items. The solution is obviously to fall back to comparing item by item if the hash for the two lists is the same in order to make sure that the lists are actually equal (this is how implementations of IEqualityComparer&lt;T&gt; are used). This can be acceptable or not depending if you expect to be comparing unequal lists most of the times vs expecting most lists to be the same (in which case item by item comparison will have to be used most of the time - basically defeating using hashes in the first place).
The account has always been free, the licenses were not. You have always been able to build the example apps without paying anything. Also update Visual Studio.
By the way, your update is still a bit off, at least with regards to the `RawArrayFor`, `ArrayListFor`, and `LinkedListFor` methods. By having the `checked` context wrapping the entire loop, it's also applying a checked addition on the `i++` iteration. You can safely place the `checked { }` block around solely the `sum += value` line. All it does is change the emitted IL code from `add` to `add.ovf` for those benchmarking methods in particular. I think it's safe to let the `i++` run in an unchecked context. You might also indicate _why_ you're adding the `checked` context here. That is, I assume because you want to mimic the LINQ `.Sum()` behaviour? I don't know whether or not this is relevant to this usage. If anything, it's a good example of your assertion _"make sure the abstraction is worth it"_. Sure it's easy to just throw in a `.Sum()` call and be done with it, but know that when you do so, you're incrementing in a checked context with all the performance and exception handling implications that come with it. (Although in this case, likely the `checked` context isn't the big culprit) I was initially surprised as to the big jump (especially with `checked` being added) between `RawArrayLinq` and `RawArrayForEach` since they're basically the same thing now. I guess calling `rawArray.Sum()` really throws out all the potential array optimizations during JIT compilation. Comparing those two benchmarks/methods in-depth would probably provide you good ammunition as to why minor differences in code can yield huge performance impacts even if they seemingly execute more-or-less the exact same C# code.
I don't think it's so much about moving away from MVC as it is about moving away from Razor. 
lol if by refactor you mean "slap a legacy label on what you have and start over." I have rarely seen a project that was salvageable during a that crossover. They're out there, but man... that pure domain concept throws a wrench in most peoples' projects. Not bad if you're already in an onion architecture, but otherwise LOL
Thanks for affirming that. I wanted to make sure I wasn't crazy. It's possible that the underlying hardware can change the asymptotic behavior so I wanted to make sure something like that wasn't happening.
imo the service locator pattern is bad news 4/5 times, but it still has it's place.
That sounds like a great course to start out making a next-gen WebApp. Just follow along with the course, and when you don't understand some syntax, pattern, or class then pause your progress and go looking for an explanation. After 15+ years of being a developer at Microsoft; I've found the easiest way to learn a language and framework is to get a foothold by writing a (barely) functional app, and then expand your understanding and technique as you move on to add features or refactor your more painful mistakes. 
It's only better if you write better SQL than the EF provider. You're bad at SQL, then EF will probably be "better". It used to be that text queries were always slower than stored procedures, but I've been told that SQL server has been optimized to close that gap and caches the execution plans after first run. I don't know how true that is. If it is true, then performance just comes down to the final query, and I promise you, LINQ doesn't always write the most efficient queries. So in that sense, they're not simply a different tool. I mean, they are different tools, but IME, EF has always been inferior in terms of performance and maintainability for even remotely large systems. I think it would be more fair to say they are different tools for different jobs more than they are alternatives to each other in all cases.