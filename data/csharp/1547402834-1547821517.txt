Yes use Dapper, t4 scripts generation based on your sqlserver db project for your dtos, dal and crud and even more.. (ex: selectbyuniquekeyconstrain is created via t4 too). And you can manage complex data access via stored proc and dal extension. After that, put all your efforts on your core. At the end, you don t have useless pattern etc but only a f... Good backend that you can extend and control. Yes it's not code first sexy etc but it s quick to dev and fast to run... Put sexy dockerizable net core api in front of that and you can go everywhere and serve everything ;-) 
I want to move to EF when we move to core in the coming months, we currently use sqlmetal to manually generate a class for our db and our repos have methods similar to what you describe but they may get used a couple of times here and there. This is what I was taught and it's all I know. You're saying when I swap to EF to dump the repo pattern all together and new up a context or inject the context and call it directly in the controller with my requirements? Is there a "standard" mvc ef-included .net core project out there I can reference? I've searched around before but I always see the repo pattern used and thought it was standard, I didn't realize ef already does this for you. Now I'm confused... 
You don't need to adapt anything when writing a brand new app, free of any older dependency. But when working on several-year-old systems (industrial, banking, government or military systems), you often need to merge different systems and adapt older solutions to newer standards. In that case, the adapter pattern is the one that's gonna show up the most often. 
can you confirm that it's trivial/easy going on Linux or Mac for C# Development? I mean no drawbacks of ditching Windows as Dev platform. noob here. 
good to know. Does dotnet core have first class support on Linux and Mac?
What exactly does that mean?
Yes.
Like 2 years old.
I thought you meant developing *for* Mac or Linux since you mentioned Mono. If you’re developing *on* a Mac or Linux then VS Code is fine, not as good as Visual Studio but usable, and you can always run a VM or dual boot with Windows to use Visual Studio anyway
Roslyn is great, but the entire C# language may be a bigger dependency than you want and allows more kinds of expressions than you want used in your rules. There is no dynamic expression evaluator in .Net, so you have to build your own or use someone else's. You can use the reflection API to build up the body of a method using IL instructions and have the API give you a delegate that will run the code you made, or you can build a interpreter that handles just enough of your own mini expression language. You can use this dynamic LINQ example that was released when LINQ first came out, and now someone hosts it on github: [https://github.com/kahanu/System.Linq.Dynamic](https://github.com/kahanu/System.Linq.Dynamic). It will parse a mini c# like expression language into LINQ expression trees. However, its really meant as a tool to build LINQ queries, so it doesn't surface the expression language directly except as arguments to string based Where and Select API's. However, you can get the source and pull out the internal expression parser and use it. If you have a LINQ expression tree for your expression, you can invoke it by it making it the body of a LambdaExpression/Expression&lt;T&gt; tree node, which has a Compile method that will return a delegate.
yeah, SendKeys is unreliable at best. using AutoHotKey might work better. ..but now that I'm thinking about it, maybe just creating a client-side Minecraft mod that you uninstall without him knowing would be best? you'd have way more control over what you could do to him. bonus points if you hook it up to a Discord chat channel so you can make his game do stuff with chat messages ;)
I do all development on macOS. For editors you've got Visual Studio for Mac, VS Code, or my preference JetBrains Rider (but it's not free). Mind you, you won't be able to develop for Windows desktop easily, no WPF, UWP or WinForms. If you're doing CLI or ASP.NET your good to go
What exactly do you mean with Enterprise development?
&gt; the entire C# language may be a bigger dependency than you want Well said. It may be a bit overkill for what I'm trying to do. Thank you for the reference to Dynamic Linq, I'll take a look at that.
I thought the same as you. I'll be fine as long as I use EF. Then EF Core came a long and I cannot use Standard 2.0 with old EF 6 either. I am now faced with having to change a ton of my service layer because it depend on EF6 and we want to upgrade to .net core to run on Linux.
I didn't post as a precursor to teach service-oriented architecture. Just pointing out that the title is over exaggerated in a world where OOP is losing popularity.
Visual Studio for Mac works great.
Are we just playing buzzword bingo or do you intend to say that anytime you need the concept of an Adapter you move that out of process behind an HTTP API?
Yea, you switch runtimes, you need to change ORM. But switching runtimes won't be easy, Microsoft already did what it could with Net Standard. We work at my job at improving old legacy app on net framework and one of the things we do is introducing ORM, thankfully EF Core works on framework so we use that. It's not a reason to use repositories, Microsoft created new runtime for the first time in entire history of C# and it's unlikely that we will see such change again.
Yes, use dbcontext in controller, and get what you want directly. An excellent read why is here. https://mehdi.me/ambient-dbcontext-in-ef6/ . The only argument for repositories is testing, but that's the way of the past. Nowadays with EF Core you use provider with in-memory database and test against that. It creates database from migrations and execute any query you want in your tests and provides the results.
If you switch ORM's (why would you that, other than moving from EF6 to Core, and it's one time only for likely entire lifetime of C#), then you have a lot more work than "changing stuff in repository" anyway.
I would say that I depends of your goal. Try executing queries in one place without Repository wrapper. Without it, you will probably end up in executing queries allover the codebase (especially if you have lazy load on). The benefit of Repository pattern is to have controlled environment of executing queries.
You control them, not loosing them.
That is not an upgrade and you should not hope that things will go smoothly. You change technologies, not upgrading version.
Yes, I develop in C# for .NET Core services at my work. But many older parts of our system are still on .NET "classic" framework and I am forced to boot up Windows to work with them. So the short answer is that *it depends*.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/latexandloaf] [The Adapter design pattern is one of the most common, and most useful patterns available to us as software developers. This post explains the Adapter design pattern using C# language.](https://www.reddit.com/r/LatexAndLoaf/comments/afneut/the_adapter_design_pattern_is_one_of_the_most/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
great, thank you.
with an adapter function? lmao
The only time I've used this pattern is in native Android development.
Why not use replace? Or some regex?
Its homework and were not allowed, its dumb I know. 
This isn’t “Dependency” in “Dependency Injection”. This is “Dependency” as in an assembly Dependency, such as a nuget package.
You are sharing an incrementer with input and arr. Create an int (j) for figuring out where to place it in arr. Only increment "j" when the input isn't a backspace.
The correct word is sorter, friend. 
I think I have it tho, I could just add to a string in the first loop like this for(int i=0; i&lt;input.Length;i++){ if(!(input==blankSpace)){ string test=test+input[i]; } } Well damn
Nobody said HTTP. Bunch of OOP people in here getting their panties in a twist because they don't understand anything other than OOP and need instant gratification of me teaching them a better paradigm.
That's one way to do it. This way will work, but you're really missing out on the reason why it was wrong, and it's usually good to learn debugging skills. I would test with a simple string "asdf" and note what happens for each step. Then try "as f" and note the value of (i) your incrementer when you decide to add in "f". Your solution works because you were adding to an array out of bounds. I think in general, it's good practice to avoid "It doesn't work" and provide the error message you're getting. Programming is a skill just like learning how to get help and how to debug. They're all useful.
It absolutely depends on what you're needing to develop. If you need to develop and target .NET framework anyway, then NO, it's not going to be a pleasant experience.
Queries will be tied to features. Features shouldnt be all over the codebase.
 public static void IsValid(string input) { //variable blankSpace char blankSpace = ' '; //counter variable for blank spaces int counter = 0; //for loop that counts the number of empty spaces in string for (int i = 0; i &lt; input.Length; i++) { char testChar = input[i];//compare chars not string == char if (testChar == blankSpace) { counter++; } } //char array size of input - blank spaces char[] arr = new char[input.Length - counter]; int j = 0;//declare j so there is no out of range i exception if a space exists //loop for removing blank space for (int i = 0; i &lt; input.Length; i++) { char testChar = input[i];//compare chars not string == char if (!(testChar == blankSpace)) { arr[j] = testChar; j++;// incerment j only if not a space //string constructor string s = new string(arr); Console.WriteLine(s);//only output the string when not a space to avouid duplicate lines } } }
&gt; works because you were adding to an array out of bounds. I think in general, it's good practice to avoid "It doesn't work" and provide the error message you're gettin Yeah, you are right, sorry for not including the error message. I think my first idea was a bit of an overkill for what I needed. Also, it's funny how I didn't see the simpler solution earlier
While I guess it might have an educational purpose, in the real world, not using built-in functions is a good way to get a bad code review.
Why is he being down-voted? I'm a newbie and his answer made sense to me.
VS Code or Visual Studio for Mac will do most of what you want, but you won't have access to some things like SSDT. 
&gt; not as good as visual studio Going to have to stop you right there. 
Likely used often without knowing it
It's probably not relevant for the assignment, but it's inefficient to use the + operator to repeatedly concatenate strings. In C#, strings are immutable (barring some corner cases that you really have to provoke), so each time you "change" the string, it actually copies the whole string, plus what you want to add, and creates a new string from the result. Over time, this copying adds up to a possibly significant performance-hit. A better way would be to use the StringBuilder-class, which is backed by an array internally and which can perform efficient changes. Because string implements `IEnumerable&lt;char&gt;`, you can also use a foreach-loop, obviating the need for the loop-variable i. Furthermore - and this is a small thing -, you can use the != operator instead of == and !: var sb = new StringBuilder(); foreach (var c in input) if (c != ' ') sb.Append(c); var filteredInput = sb.ToString(); //This returns the string-contents of the StringBuilder I don't know whether using a StringBuilder counts as using "built-in methods", though.
Bigger seats, better food, etc
It's just .net framework. No need for classic.
Well, I wouldn't use EF directly in a controller for purism reasons (your controllers probably shouldn't be handling any logic outside of 'get data' and 'display view'), but yes you should be implementing EF directly into your service layer instead of using a repo. Honestly though, if you find it confusing, I wouldn't worry too much about it, writing a repo layer won't make anything actively suck, it's just needless repetition. If you're finding it hard to reason about where you should be using EF, using a repo layer will at least make it obvious to any other developer who looks at your code understand what's happening, even if they then send you an article afterwords about how repos in EF are bad. 
My manager don't want to have linux dependiency. It would add a skill to a team, which is not in his interest to be worry about. How to convince him otherwise? No idea... 
I guess I don't see a difference between a service layer and a repo layer... I got some reading to do this evening, thanks for the info. It's probably pretty easy to grasp I just have never known anything but how we do it now, so it's all new conceptually to me. 
It means is everything up to date, performs well, has no missing features, ecosystem pieces all work etc. Before .NET core it would be incorrect to say that C# had first class support on Linux and Mac, for instance. Though mono was still very good for many applications. &amp;#x200B;
I do .NET Core development at work on a Mac (that's all I have access to), and the biggest pain in the ass is not being able to test against IIS (which is what we deploy to) locally. If there was a way to work with that it wouldn't be so bad. The next largest pain in the ass is how shitty VS for Mac is compared to regular VS. As others said, .NET core is only for CLI programs and ASP.NET applications, so you can only develop on those two.
Visual studio code is just a code editor. If you do a lot of enterprise work then you miss some cool features a full blown ide has. Testing features, azure features to name two. 
I would vote for the StringBuilder solution by [**u/ForTheFunctionGod**](https://www.reddit.com/user/ForTheFunctionGod/) as the cleanest .NET solution. Just for fun and for the sake of completeness, here's yet another way that's handy when you're doing something more complex than just replacing spaces. var output = new Regex(@"(\s)+").Replace("this is a test string", ""); &amp;#x200B;
Lies. It means punch and pie at every developers conference...
Years ago (2010) I developed enterprise-level web services on Mono. You'd use .NET Core these days for the same task, though.
One of the .NET books seems to have been compiled almost exclusively from the [Stack Overflow Documentation](https://stackoverflow.blog/2016/07/21/introducing-stack-overflow-documentation-beta/) archive. Which is the author's right, considering the questions and answers are available under a permissive license. But that's how he amassed such a large amount of content for "free"
Suck an often cited and overblown excuse to overengineer an application. The likelihood of 99.9% of code vases which start using EF moving off of it is about zero. 
I think the only downside is not having visual studio. However JetBrains has [Rider](https://www.jetbrains.com/rider/) which is a fantastic IDE. I have noticed a few inconsistencies between the Linux and Windows implementations, but otherwise for the vast majority of cases, everything works great. &amp;#x200B; Note that .net does not support GUI development on non-windows platforms. However for server applications it works exceptionally well.
I think the more experience you get you start to face similar problems to those you have previously faced and so that can help you arrive at the conclusion faster. In general when I get stuck now it does not last nearly as long and I get more and more used to solving the types of problems that I used to get stuck on. I think it's really just about how you evolve in your problem solving and a part of that problem solving is recognizing problems you've seen before and remembering those solutions. Over time you'll get better and faster at solving difficult problems. Not that it's always the case because sometimes problems are just a different breed and you can't necessarily approach them the same way. However, getting familiar with different API designs, etc, will help when approaching a new APIs or systems you don't understand. One thing that I've found helps with algorithmic problems is doing code challenges like on https://projecteuler.net/ and learning from that.
Wow, you're so edgy. Let's take a look at real data: https://insights.stackoverflow.com/survey/2018/#most-popular-technologies https://www.eetimes.com/document.asp?doc_id=1333572 https://www.tiobe.com/tiobe-index/ Not a single functionality language in the top ten. Not a single pure functional language on any list. Modern languages have integrated many functional concepts into them, and that's awesome (I love functional), but the implication that OOP and imperitive is dying is simply not supported by any evidence. It's wishful thinking on your part and I have a feeling you just enjoy telling people you "only do functional". Maybe while you tell them about your keto diet and cross fit routine. 
Hey! How dare you! If nobody uses that falacy, how will my shares in "Over Engineering Co." I in value?!
I'm the same when even I have to learn someone else's API's. Nothing ever makes sense, until suddenly it does. Or maybe never does. I try to make the best effort designing things so they are as easy to grasp as they can be. Analyzers and CodeFixers went though about 7 major revisions, each one making the API simpler than the last. So, it could have been worse. Sorry to cause you so much pain. I hope it all makes sense now.
I develop in C# on Arch Linux using .NET Core and VS Code. It works beautifully. Please let Mono die.
No need to worry; middle managers and 'architects' will always find a way to justify their existence. 
That is quite true 
We do not currently use ef and repository together, but my team is about to start a much larger scope project and we just wrapped up our architectural design meeting and are planning to implement it now for this exact reason. We have a team of 6 devs with vastly different skill levels, so SRP and defining what belongs where really helps our juniors keep their code from trying to do too much. We need to do better grooming and actually do code reviews, but reality and management are not quite in line with our final vision yet.
Debugging injected processes is a two click process with VS, which I like. Not sure about Linux because I haven’t found an injection use case so far but GCCD is a lot less friendly/more time consuming to work with I have found.
I see you doing this `if (juisteOpsomming[i] == uitkomsten[i])` But you never set the value of `juisteOpsomming[i]` So it's always going to be incorrect since it is 0. Unless by chance it is a perfect match I guess :) `-80 + 80`
I see you doing this `if (juisteOpsomming[i] == uitkomsten[i])` But you never set the value of `juisteOpsomming[i]` So it's always going to be incorrect since it is 0. Unless by chance it is a perfect match I guess :) `-80 + 80`
I don't use this myself, but I saw on a video somewhere, if you use Visual Studio and Blend, having the empty constructor makes things a lot better in Blend, as it will actually let you use wizards without having to look for things. Don't know if this still the case, that was like a video from 2012 or something like that.
Enterprise development is working on tools/solutions that large corporations can use that isn't a high risk of becoming unsupported in 5+ years. This mainly means no beta or alpha release technologies but there are exceptions, especially in Linux.
I'm not an expert in EF or the repository patten and I'd like to better understand your advice to not mix them. I understand that EF handles a lot of the findById-like cases, but what about more business-centric queries? For example, if I have multiple places in code that need to get "all non-voided contracts", how would you recommend that query (or LINQ query) be centralized to avoid duplication? Where would that data access logic live? Thanks. 
I am a C# developer. So I'm not sure where your comment is coming from. You obviously don't understand programming paradigms. I'll say this again: I didn't post as a precursor to teach service-oriented architecture. Just pointing out that the title is over exaggerated in a world where OOP is losing popularity.
Yes but you did so by saying that 12 years ago you dropped OOP and switched to functional, as did 'very many others'; yet 12 years on and OOP is still the biggest paradigm by far with functional sat at the bottom of the tree still. This wouldn't be an issue had you not portrayed OOP as 'dead' and this common pattern 'from the graveyard'. You also didn't explain how the adaptor pattern isn't relevant in FP. How do you achieve this in FP? That would be more useful than trying to belittle OOP.
.NET Core 3.0 baby! Future's looking bright!
You still won't be able to run WPF or Winforms apps on Mac though which is a bummer. I would love to see a cross platform WPF implementation. 
With WPF so closely tied to GDI+ on Windows, that'd be very difficult to do. I think the closes you'll get is something like [Avalonia](http://avaloniaui.net/)
I do my pet projects net core services via VSCode. But i think it works well only for small projects, it will be hard to navigate and refactor in big projects
Frontend should be designed to not duplicate features. If it does, shared endpoint in API. Ideally, GraphQL so you have generic way to query. Otherwise, a set of extension functions which extends Iqueryable&lt;yourType&gt; so you can do something like var example =dbcontext.yourType.nonVoided() and operate further on that Iqueryable as needed.
Actually this is as functional as yours but a lot more idiomatic public static string TheName { get; set; } 
MSDN has a bunch of tutorials for C#. Might want to take a look there. They're pretty good. 
Thank you very much! Ill take a look.
What are you talking about, you can almost totally have the same code bar (datetime timezone) quirks.
I am talking about system administration. We have Windows servers and nobody who would manage linux. I mean, even if somebody would love to do it, our manager do not wish to expand skill pool needed. 
OK, so now we unwittingly know a lot about what you *don’t* do, but oddly you’re not willing to divulge what you *do* do.
&gt; So I’m not sure where your comment is coming from. It’s coming from you being contrarian.
There many kinds of the Adapter pattern though. The article describes only one of them: an object adapter.
Functional may be the neckbeards favourite, but there is still 90% OOP out there. Hell, there is probably 90% Java out there. OOP is not going anywhere. Functional cannot replace it.
u/Pycorax mentioned MSDN and I would add that MSDN is dead and basically everything moved over to [docs.microsoft.com](https://docs.microsoft.com). I like to also reference [referencesource.microsoft.com](https://referencesource.microsoft.com) (see what I did there?) because this is usually the place I visit when the docs aren't detailed enough. Unity has something similar on GitHub where you can study their C# source code as a reference. I also suggest that you should learn at least the basics of C# seperately before diving into the engine. The engine has a lot of bad habits that may corrupt your way of programming to a degree that you will have trouble to write code normally in this language, but the other way around is far more adaptable. I am not the guy for great resources on the topic of "learning by a book" or "tutorial", but at least I can give you this: Always stick to the official documentation. In case of both Unity and C# it will probably complete enough to answer all questions that arise. Other than that, some C# devs (and I mean the creators of the language) have blogs where they go into detail about topics that aren't discussed in the docs, same goes for Unity. Also note that game engines are highly specific in the way they want you to work and you should probably take a look into the sidebar here and over at r/unity3d and r/unity2d to get some more resources to lern from.
I guess that makes sense, but the cost justification of zero web server licences and honestly a more stable platform should be a good draw, though depends on how many servers you guys have. I have limited Linux experience but I run all my .net core applications on them.
Unity developer here: I strongly suggest this page https://unity3d.com/learn/tutorials It’s an entire collection of C# based Unity tutorials of increasing complexity. You will understand C# syntax and see the direct effects in Unity. Plus, you familiarize with Unity’s custom classes.
I just wanted to note that if your school project isn't specifically coding related, you can pretty much get away with creating a game in Unity without writing any C# at all. There is a tonne of resources on creating a Unity game without coding, and some visual scripting systems for Unity that allow you to program more complex behaviours without writing scripts yourself. &amp;#x200B; That being said, I would only recommend that route if its a one-off school project. If you're actually interested in Unity development, learn C#!
Thank you kind sir, will definitely take a look there. Have a nice day :) 
Ok that seems pretty useful! Thank you for taking your time
I am actually considering studying CS or IT at a uni so ill try to learn it... If i do too bad ill just do the easy way. Thank you kind stranger!
It at comes to a budget you have. Personally I tried many laptop and stick with surface book (have both). But they are very very very expensive. Dell Inspiron are ok, but not amazing. Also you should mention what are you planning to develop as well how much are you going to carry it (weight plays for me personally very important role since I travel with my surface daily for 2-6 hours)
I know. It’s been a problem since .NET always. Assembly redirection bollocks. 
That's really helpful, thank you.
Hey! I got the same issue a couple of days ago. Rather use the powershell variation like this (type into package manager console): add-migration -Name Fuck -Project "[Project Name]" "[Project Name]" refers to the project containing the EF Core db. 
Try to avoid static at the beginning. I know it's tempting, but you're using it basically to make stuff global, which is bad.
You mean Direct3D, not GDI+. System.Drawing uses GDI+.
Mono won't die until they have a replacement for Mono on phones (Xamarin), Unity3d is on .NET Core (I think they have plans for this), and .NET Core runs on WASM (currently only Mono does).
Hero! You don't know how much time I've wasted on this...
Wut!
Someone better sit down and tell all those anemic entities that they are OOP, they will be so thrilled.
Yes. I'm going to blame this on not having had my morning coffee 😛
Do you have a link to part 1?
Granted but that didn't stop the Mono guys from giving Windows.Forms a bash and it is just a closely tied to GDI. While Avalonia is great, there are other options which are cross platform compatible using XAML or straight code such as [XWT](https://github.com/mono/xwt) and [picoe/eto] (https://github.com/picoe/Eto) . I would honestly prefer something that sticks to the WPF xaml standard though.
I'm working on a pricing/risk calculation framework/engine for financial markets: [abacus](https://github.com/ckarcz/abacus). It's in its very early stages, but I'd love any feedback regarding architecture/design. Any improvements and such. For me it will learning exercise with the hopes of maybe becoming something bigger one day. The goal is to create an extensible (plugin-like) risk and pricing framework that runs on calculator containers/agents in a distributed fashion, incorporating the latest .net development technologies and practices (.net core, asp.net core, docker/kubernetes, DDD, possibly orleans, etc). It's still in early staging...figuring out core parts but the a have a basic plugin-approach measure calculations "working" (with maybe implementation stubs).
In your MySql db add a row to the table, make it a primary key. Make it auto increment. It will always then add 1 to the next row, or *n* to the next row as you set it, it will be unique as it is the primary key. https://dev.mysql.com/doc/refman/8.0/en/example-auto-increment.html
PM me if you have questions!
&gt;I am a C# developer. So I'm not sure where your comment is coming from From this: &gt;I moved from OOP to the Functional-esque world (SOP) in 2007, and many many others before and after me have dropped OOP completely or mostly for more functional leaning paradigms. So this article really is a huge over exaggeration and pulling death from the graveyard. And now we have: &gt;Just pointing out that the title is over exaggerated in a world where OOP is losing popularity. Yet that's not supported by any data I can find. Do you have some to show, or are we to take your anecdote as gospel? I can just imagine you doing your best to write Haskell in C# all day and thinking you're doing a good thing. &gt;You obviously don't understand programming paradigms. Yeah... I see you have the title "architect". So many places I could go from there. Sounds like you've already reached the point at which you're completely detached from reality and think that your flow charts and UML are actually useful to people.
There are a few options 1 - reading, as most other replies to your post suggest. there are a ton of good books listed here and I recommend you check them out. 2 - get into some other project's source code. in particular, check out ASP.NET Core, Entity Framework Core, and for lower level stuff, the .NET Core CLR itself, Roslyn, and the framework libraries (corefx). I also got into Ninject and NuGet. I know these are huge projects with massive amounts of code, but I have learned a ton of software engineering practices from looking at how they have structured things and approached specific problems. if you want industry standard best practices, Microsoft is it. 3 - work experience. this one is harder to come by, but the best way to learn. if your current job is not advancing your career or thirst, find something else. I spent way too many years at a shit job doing WebForms. fortunately they made a bunch of bad decisions that all but forced me out, and now I am swimming in fun stuff. 
You can count on that. Have a great day!
Restful api, with strong auth and tokenisation. Log user access and their IPs hold for a year, log access requests etc, you'll want them if there's ever a breach. Have it behind a firewall and expose it only to approved static IP addresses on a white list. Don't expose an app with a direct DB connection as apps can be decompiled https://stackoverflow.com/questions/4132759/how-is-restful-web-services-better-than-soap-based-webservices 
blasphemy ! Every piece of Code needs to be hand written, using nothing more than old C-Style coding var input = "Hello World!"; char[] chars = new char[input.Length]; int counter = 0; for (int i = 0; i&lt; input.Length; i++) { if (input[i] != ' ') { chars[counter] = input[i]; counter++; } } string spaceFreeString = new string(chars, 0, counter); This way, you can ensure everything and even print out the exact column where a space was found - This is very important &amp;#x200B; **/S**
Removed: Rule 4.
Not to mention functional proramming doesn't replace OOP, they work fine alongside each other
WCF, so I assume this is for work? If this is a personal project, then I question the usage of both MySQL and WCF... You should ask someone with more experience, where you work. They should be aware of what you're doing here, and should help you. This is entering data modeling territory.
Problem on that : I'm the only developper.
Looks like this functionality is coming to all Layout&lt;T&gt; classes: https://blog.xamarin.com/xamarin-forms-3-5-a-little-bindable-love/
Some APIs are complex and the tutorials only cover very basic scenarios. On top of that if I am impatient on getting the implementation to work, I miss out the important lines from the documentation. All together it becomes a very bumpy and at times frustrating ride. Until finally some point comes that the pieces get together and I have a better coherent grasp on the topic and the API implementation. Roslyn APIs were certainly in this category for me as well. I started using them three years ago for master graduation project to detect some anti-patterns in C# code. After that I used it for other ideas as well. Still today I struggle a lot with finding the right way to use the APIs for many scenarios. The books I could find about Roslyn also were too basic, not helpful in complex situations. I cloned the repository and tried finding my way in there. Not an easy way either. There are other APIs or concepts that can be hard to grasp. But I haven't had such difficulty with any of them. I think we can use a book that has more in depth documentation of the APIs. It should cover examples that require usage of multiple APIs together.
In this context vscode + dotnetcore + linux can be used for Enterprise development. Reasons: * Vscode is widely used and community supported * Dotnetcore is here to stay 'forever' * Linux support of dotnetcore for several reasons incl. cloud scenarios
The issue is not disposition of the byte array itself- it's clearing of the data in that byte array. The array may sit on the heap awaiting garbage collection for an indeterminate amount of time. To minimize the risk of the key being read (through a heap dump or something like Specter), the framework writes zeroes to the contents of the array after using it (Array.Clear() sets the contents to the default value for the array type- for bytes this is zero). Then it can safely sit on the heap awaiting GC without potentially leaking sensitive information. 
Thanks, after looking at your approach. I was able to understand what actually goes under the hood when a viewmodel implements INotifyPropertyChanged. I was able to get it done using the Reactive way by reading your code.
Yep. We use it. What we can't use yet is dotnetcore 3.0. really looking forward to that one for the UI. We can use 2.2 for console and web. But solutions like Avalonia UI are a no go as it's still in early stages and it's future longevity is uncertain. So for desktop apps, dotnetcore isn't really an option until 3.0 hits release.
I already have a table in the document, I just wan to know how to add rows to the existing table programatically.
I'm so sorry then, I would find a new job if I were you. These things need to be learned, it would be a lot easier there was someone to learn from. Your career growth sounds like it will be stunted where you work now. They don't seem to understand software development.
It's normal. It's part of my studies, so I can't find a new job as simple as that. Plus the project is very interesting and the place and people are great.
Do you have any article that helps with understanding databinding against an Image View or VideoView that is dynamically created?
Yeah, they'd have to switch to Interlocked.Increment
Not off hand, but it'd be the same process. Once a property change is detected in your class that implements INotifyPropertyChanged, you update the ImageView or VideoView source. &amp;#x200B; Let me know if that's not what you meant.
check the sidebar
what are the values of startIndex and stopIndex?
 static string GetBetween(string message, string start, string end) { int startIndex = message.IndexOf(start) + start.Length; int stopIndex = message.IndexOf(end); return message.Substring(startIndex, stopIndex - startIndex); } Do you mean this?
i wanna know the actual integers stored in the startIndex and stopIndex variables at the time of the error 
Oh yeah, dumb of me! startIndex = "96528" stopIndex = "3221" &amp;#x200B;
And the HTML line: &lt;input type="hidden" name="csrfToken" value="84d4b7047760593ee4163e82f1c77ba3b640d645-1547485526351-34762738e80d50156f857eab"/&gt; &amp;#x200B;
Removed: Rule 4. There are help resources in the sidebar, and you can check out /r/learncsharp and /r/learnprogramming.
your start/stopIndex ints probably aren't matching up with the string you're trying to get a substring from. you're asking the substring method to give you 3221 characters, starting at the 96528th character of the string. is your string really that long?
You could expose a delegate in the interface, and let each class set it to whatever method they want invoked?
yay more syntactic sugar. with var it took the need for this away imho. one or the other but I could see where devs dont want to use var and use this side of the sugar instead.
That's what I though too until I saw this example, XmlReader.Create(reader, new XmlReaderSettings() { IgnoreWhitespace = true }); XmlReader.Create(reader, new() { IgnoreWhitespace = true }) 
Im normally not inlining things like that. use the following form: &gt; var woot = new settings{x=y}; &gt; var somethingUseful = new something(woot); But i did see that. 
overall if the app and db are on seperate networks (and especially if over the internet) you want some kind of api with authentication. Requiring vpn access is a valid idea but adding an API will give flexibility in the future if you ever want a mobile app or other services want to consume your data. As for how to do it the main decision is if you want a Remote Procedure Call type interface (use soap or post only web api 2 controller) or if you want a resource based api ("true" rest). As for what I would build, I would go asp.net web api 2 or .net core web api (build what you already have infrastructure for and avoid bringing another version of the framework into your tech stack) and either resource or rpc api. For authentication i would suggest not trying to roll your own and use something off the shelf (and if enterprise level oath or saml sso). I would also log everything coming across the api but as for a whitelist you need to look at who your clients are. if these are work from home users on consumer service lines (IE: no static ip's) then a whitelist will be terrible from a maintenance side of things.
You don't really lose anything by doing Repostitory pattern with EF... it's just usually considered bad practice, as EF is already the UoW and implements the pattern. &amp;#x200B; The same queries you write using EF you could write with normal SQL, you're not losing anything by adding another layer on top, it's just doing something again on top of it already doing it.
Thanks for the complete answer. If there is no infrastructure at all for now, should I go with Web API 2 or .Net Core web API? I expect low traffic (4-5 users, working from home offices), but performance of each call to the back-end is a priority. I have no experience with both technology. &amp;#x200B;
I code on a MacBook Pro with Visual Studio for Mac and everything works fine 😁
I very much prefer this to var. While var is handy for super long names, most of the time it doesn't actually reduce typing and reading time. With var all you are doing is replacing a redundancy with a keyword marker that in most cases doesn't actually reduce the amount of typing you have to do with intellisense, and doesn't reduce the amount of reading (if anything it increases the amount of reading). All it really does is look nicer to some people, or makes Javascript people feel more comfortable. In the end var really is just a keyword that is meant to be ignored. This on the otherhand just removes the redundancy altogether. You only type the type once, and no need to type a meaningless var keyword. Then the type and name are right next to each other. This both reduces the amount of time it takes you to type, and reduces the amount of time it takes you to read. 
Since there is nothing now, use the latest and greatest long term support (.net core 2.1 at time of writing) for the server side. as of .net core 3.0 there will be desktop packs that will allow the building of the wpf ui in .net core instead of the classic .net framework. At 4-5 users working from home it may not need all of that though. if they are already on a vpn, go the vpn route. if you would need to set up a vpn for them to use go the public api route.
The advantage of car isn't typing less, it's refactoring. With var, I often find I can change the return type of a function without modifying the code that calls it.
Of the ones you presented the last one definitely the looks the best to me. It's a little tough to tell if this is the best option without knowing how else these are being used to know, for example, if an abstract class is actually needed.
I haven't tried myself, but the documentation appears to show you can: https://docs.microsoft.com/en-us/uwp/api/windows.applicationmodel.fulltrustprocesslauncher.launchfulltrustprocessforcurrentappasync If you look, you'll see that there are two versions of LaunchFullTrustProcessForCurrentAppAsync() One takes no arguments and the other takes a string, which is used as arguments. As a result, you should be able to do something like this: await FullTrustProcessLauncher.LaunchFullTrustProcessForCurrentAppAsync(@"Argument1 Argument2 etc");
of the options the second is the one I would go to. the other option would be to add an abstract void func on message and have ProcessMessage take a Message. Its two slightly different ways to skin the same cat and use inheritance to create a standard interface.
&gt; Interface types: this is a niche feature and it should be preferable to explicitly mention the type. Would it even be possible to use? Unless I'm misunderstanding: IMyInterface obj = new(); You can't `new` up an `IMyInterface` object that way anyway (that is, can't call `new IMyInterface()`). Or is that some special scenario with the default interface implementation feature?
We Javascript now. 
&gt;await FullTrustProcessLauncher.LaunchFullTrustProcessForCurrentAppAsync(@"Argument1 Argument2 etc"); So that's pretty much what I've been doing. However, an error is generated when it hits that saying 'the parameter is incorrect'. This goes for any argument I put in there. So looking a bit further, I found that UWP has something called ParameterGroups. So essentially you don't pass arguments as strings, you pass the Parametergroup name which is something you **hard code** into your package.appxmanifest. So this will be in your manifest: `&lt;desktop:ParameterGroup GroupId="Background" Parameters="/background" /&gt;` and this will be the code you use to call it: `ApplicationData.Current.LocalSettings.Values["Background"] = tbBackground.Text;` `await FullTrustProcessLauncher.LaunchFullTrustProcessForCurrentAppAsync("Background");` So my problem is, I can't have a hard coded parameter in my manifest and pass it, I need to be able to generate a parameter and pass it. 
Yes, but not for this reason. C# has had the option for JavaScript style dynamic typing for a very long time now.
&gt; You can't new up an IMyInterface object that way anyway (that is, can't call new IMyInterface()) They *could* be referring to COM-supported interface newing (i.e. `CoClass` attribute), especially as they mention it's a niche feature. ---- (For those who don't know:) [CoClass(typeof(FooImpl))] public interface IFoo { void Bar(); } public class FooImpl : IFoo { public void Bar() { /* ... */ } } // ...... public static void Main() { var foo = new IFoo(); // works just fine foo.Bar(); }
&gt; Any reason why the extra restriction here? Maybe. Consider these lines: myStruct a = default; myStruct b = new myStruct(); myStruct c = new(); Variable `a` just has the value of the struct with all of the fields zeroed out. Variable `b` runs the constructor for the struct, if it exists. (Last I checked, C# cannot define parameterless constructors on structs be it can consume them.) What does variable `c` have? 
Wow. I consider myself a connoisseur of weird and legacy .NET code, but clearly I'm an amateur. 
While I think this is a very neat feature, I just hope the tooling is updated to keep this in mind as well.... I use Find All References in VS for types and certain constructor overloads pretty frequently. If a line of code does not show up in the references list for a type when you use this syntax vs listing the type by name, that is reason enough for me to avoid using it. I’m assuming they’ve considered this though...
this will be nice when it comes to initializing fields, where var isn't an option
Currently there is no built in ListView for anything other than a vertical list. As u/Lam2349 said using a FLexLayout and implementing a ListView yourself is the best option currently. Otherwise you are going to have to wait for Xamarin.Forms 4.0 to release which will include a CollectionView which will be a more flexible ListView that should allow you to display things as a grid.
F#
I would venture to guess that, as far as Roslyn is concerned, the implicitly-typed new expression is going to a subclass or sub-expression of some generalized constructor expression that Roslyn tools are already looking at.
Sigh... Just use F# for green field projects. More and more features that are suboptimal is what will eventually make C# C++
I'll add that var makes reading code a pain in the ass without an IDE. var x = SomeFunctionIveNeverSeenDefinedGodKnowsWhere(); WTF is x?
Nulling out the reference that way *may* get the array collected slightly sooner, by reducing the ref count for the array.
I dislike this, it's a gimmick that brings the language down and makes code unreadable. You can arrive at a point where **you don't know what type you're creating in a static language!** class A{ public A(int x, int y){...} } class B{ public B(int x){...} } ... public void foo(A a){...} // overload I public void foo(B b){...} // overload II .... foo(new(1)); Obviously, overload II will be called. But if you now want to change A's signature so that y has a default value, suddenly the call is ambiguous, and the compilation fails. To reiterate: *by adding an overload to A's constructor, you can break code that has nothing to do with A.* It's exactly the kind of C++ shit C# was meant to leave behind. We already have a mechanic for creating object of an unspecified type- It's called factory methods.
I too like to hammer my nails with a screwdriver like VSCode rather than a hammer like Visual Studio. The full blown IDE will always be leagues ahead of VSCode for C# and .NET related development (WPF, WinForms, ASP, ASP MVC, etc)
Not stupid at all - keep it up! &amp;#x200B; Usually what you'd do may seem a little dirty: You'd create two sets of classes. One to mirror the database, typically called the data model; and one to represent the data contracts (API interface), typically called DTOs (Data Transfer Objects). The data model is basically the POCO-version of your database schema, while the DTOs are whatever the input to your API methods accept and output they return. &amp;#x200B; Since DTOs represent your API endpoint, you can have multiple DTOs for the same data model, i.e. one for create with lots of \[Required\] and one for update with few constraints (like mandatory Id field). Your controller would then manipulate the data model based on the DTO provided. public TodoItemGetResult(long id) { var todoItem = db.TodoItems.FirstOrDefault(t =&gt; t.Id == id); return todoItem.ToDTO(); } public TodoItemCreateResult(TodoItemCreateCommand command) { var todoItem = TodoItem.FromDTO(command); db.TodoItems.Add(todoItem); db.SaveChanges(); return new TodoItemCreateResult { Success = true, Id = todoItem.Id }; } public TodoItemUpdateResult(TodoItemUpdateCommand command) { var todoItem = db.TodoItems.FirstOrDefault(t =&gt; t.Id == command.Id); todoItem.ReplaceWith(command); db.SaveChanges(); return new TodoItemUpdateResult { Success = true }; } Here I've created distinct input and output classes for each API method even though they operate on the same entity. Implicit here are helper methods to convert DTOs to data model classes (ToDTO, FromDTO, ReplaceWith). Whether you place them on the DTOs, on the data classes, or in static helper classes are up to you - if your DTOs are in a shared library used with a client application, you probably shouldn't put them there. Here, I've placed them on the data model classes. &amp;#x200B; This approach is more work and more code, but it prevents a lot of mistakes. It you use it for API results as well (and you should) it forces you to be explicit about what data to return. No accidental leakage of sensitive information. &amp;#x200B; Aside: If your business logic is complex, you may introduce a third set of classes, called the domain layer. This usually only makes sense if you're doing a lot of operations on them and they have a lot of behavior. You're often fine without it, particularly in relatively simple REST APIs.
That's a very good point.
In your contrived example, * you _shouldn't_ use `var` * `SomeFunctionIveNeverSeenDefinedGodKnowsWhere()` sucks. If you wrote that method, you should strongly consider redesigning it to make more sense.
What do you mean injected processes? Regardless, vsdbg is the tool used for debuggers that you can create a Task in VSCode to run just the same as visual studio does it. And what is GCCD?
x is a Whatchamcallit. Does that help? No, not at all. You gotta look up the definition of SomeFunctionIveNeverSeenDefinedGodKnowsWhere to see what's actually going on.
One, people use var like this all the time, and some tools will even automatically replace the type with var. Two, if I'm reading the code without an IDE, I'm probably not the one who wrote it.
That's not necessarily a great idea. There's a movement right now to add C# only features to .NET standard such as default interface methods. If this passes, they will be free to make changes to libraries that are source-code breaking for non-C# compilers.
I don't understand your point though, you can write everything in linux then just build it on windows, or write it on linux, build with docker, then docker host it on windows. Nothing stops development from happening on linux, they work almost the exact same.
Your architecture dilemma is exactly what [AdaptiveClient](https://github.com/leaderanalytics/AdaptiveClient) was made for. You can have SOAP, Rest, AND in-process connectivity to your database. In fewest words, AdaptiveClient determines how the user is connected (LAN/Internet/WCF) and injects the correct client for you. You just design your app how you normally would using dependency injection and n-tier and AdaptiveClient will do the heavy lifting for you. [WPF/Web working demo here](https://github.com/leaderanalytics/AdaptiveClient.EntityFramework.Zamagon). Let me know if you have any questions. I wrote AdaptiveClient and I maintain a couple of large apps that use it extensively. 
You can either use models for specific use cases or patch it. You can patch it by using jsonpatch. You load the object, apply the patch and then validate the model state.
&gt; Have the WPF application connects directly to the SQL server remotely, exposing it publicly. Looks like he is going to have a desktop app with API exposed over WCF/Rest. For LAN desktop users you want direct in-process connections to the database. This is ten to hundreds of times faster than serialization and http connectivity. The best option is to determine if the user is on the LAN/VPN and if so, inject a service client that talks directly to the db. If the user is remote inject a client that wraps the service layer in WCF/REST/Whatever calls. See my post related to AdaptiveClient below.
They are properties that allow you to perform some form of validation on the data coming through. imagine a variable that can only be written to or read from via a function. public int Age { get; set; } expands to private int _age; public int Age { get { return _age; } set { _age = value; } } or a more verbose example would be private int _age; public void SetAge(int value) { _age = value; } public int GetAge() { return _age; } this allows you to set some constraints such as maybe you only want to update _age if the value is between 1 and 100 and you can do that with the following private int _age; public int Age { get { return _age; } set { if(value &gt; 0 &amp;&amp; value &lt; 101) { _age = value; } } } 
F# has type inference since day 1 and zero issues.
What do you mean 0 issues? YOU had 0 issues with it or the whole F# had 0 issues? Now what about we take the very narrow F# community and expend it to the C# popularity with all its range of good to bad programmer. Do you still have 0 issues?
I understand. Thank you. I will bother you in a PM later. 
Thanks!
Thanks!
0 issues means 0 issues, it is part of the language, that's how F# works.
For better understanding you can also play around with reflection. It helps to understand how certain things work
Not zero issues for me. It fails at some really basic casting.
I second this. The JSON Patch spec is great. There are a few libraries available, check out [http://jsonpatch.com/](http://jsonpatch.com/) for more info.
&gt;Do you realize the JIT compiler has nothing to do with the C# compiler? \*Sigh\* The C# compiler compiles C# to IL, which the JIT compiler then compiles to platform-dependent assembly or 1s and 0s. That's a pedantic argument. Now, back to the actual argument. In psuedocode, a null check on a method call (in .Net) looks something like this (in effect): `If NotNull(obj) Then` `obj.CallMethod()` `Else` `ThrowNullException()` `EndIf` You need a null check on a method call because otherwise, you may attempt to call a method on a null pointer. A CPU can handle throwing null-call exceptions for you; but that involves an interrupt-call. As .Net is a platform-independent language, this is also beyond the scope of the general case. If you know an object is not null, then you can skip that null check. An If statement is implemented, on basically any platform, through a CPU instruction commonly called something like a "Jump if equal" or a "Jump if not equal". Any time you have a jump-if statement, the CPU has to stop, calculate the input of that jump-if statement, then jump to the next line of code (or not). Out of Order processing does not work, or slows down, past a jump-if call. This is because, typically, some or all of the instructions that were being processed out of order now have to finish processing so the input to the jump-if statement can be known. This is not a law; just how programs are typically written. This slows things down. The new instruction pointer has to be validated, at minimum. Our old frenemy, Speculative Execution, is an attempt to get around this, by speculatively processing both results of a jump-if call or similar instruction, and then using the "correct" result. It does not help that one branch of this jump-if instruction is a call instruction, and the other is a throw-exception instruction - Exceptions are, by definition, an exception to the normal flow, and calls have all the baggage of a jump statement, and their own requirements, like opening up a new context and stack operations. And that is why knowing that an object cannot be null when you make a method call on it, can speed things up. Apologies, but I am frustrated with this entire conversation. And myself, for being frustrated.
https://en.m.wikipedia.org/wiki/DLL_injection GCCD-&gt; gcc debugger, didn’t want to write it all out.
Don't know if you're still interested, but I managed to get my solution working. It turned out that it was a compound issue. The first was the issue you were describing (which is solved by the rebuild and VS restart). The second issue was that the base form had references to some of the other projects, some of which were being targeted at the x64 platform, while others were set to "AnyCPU". Once I set all the project containing the base class as well as all the dependency projects to "AnyCPU" the designer started working. Going off of [this thread](https://stackoverflow.com/questions/516730/what-does-the-visual-studio-any-cpu-target-mean) gives some insight, but I haven't figured out exactly why it was crashing in my case, since I am on an x64 machine and didn't have ANY projects targeted at x86. I can only assume there are some 32bit 3rd party libraries somewhere in the dependencies.
I'm not a fan here... Suppose I use this somewhere in one of the examples others have given about using it for a temporary parameter... Public void Foo(SomeSettings s); Now I add a reference to another project/assembly that that defines a subtype of SomeSettings. Suddenly there are two possible types that can be generated and compilation fails here in an unrelated place. 
I don't think that's the case. It should always choose `SomeSettings` and never `SomeSettingsBase`. Same as it won't support infering the correct type from an abstract base classes. 
I would agree that they shouldn't allow this kind of implementation. It should only be allowed when declaring a variable where the type is on the left side.
It's not like F# is *less* implicit about types. 
It is incredibly difficult or downright impossible to even guess the function signature a lot of the time. It is a little bit confusing that this is being presented as *better* than the coming type inference for new() 
If you need to do error checking or validation on the incoming parameter value then do a set. By using a set you can check the variable for issues or do other work. Example would be an integer parameter that has to be between 0 and 5. Use an if statement to test the incoming value of the integer. If your incoming value is outside of these values then throw an exception. You could create a read only property by using just a get. An example of this might be returning a count of a list when the list itself is not exposed as a property (private). Sorry for no example code , I am on my mobile.
Sometimes finding the right thing for inspiration just requires the right word, and what you're trying to do looks a lot like the _mediator pattern_. There are some really good articles and libraries (a library is probably unnecessary for this particular case) for decoupling with the mediator pattern. I'm on mobile, so forgive the vagueness of my comment :D
I haven't used uwp much, but could you use a third exe to pass the arguments to the second exe, communicating with the original uwp program over pipes, stdin, or sockets? If you control the second exe, you could add this functionality directly. 
Example? I've never heard of this but I'd like to read more. 
So, from what I can tell looking at the documentation, all this facial detection does is say "hey, there's a face here within this box.". You will need to go figure out some way to do edge detection on it to crop out just the face alone. 
As a side note, there are a bunch of exceptions mainly for use in property set statements, with the two most common being `ArgumentOutOfRangeException` and `ArgumentNullException`.
So... this makes var unusable? Seems to make things more difficult to read and harder to understand. Especially for people new to the language. 
The active contour model (also know as "snake detection") might be the easiest detection for your case. Assuming you have sufficient contrast between the background and the face. See https://en.wikipedia.org/wiki/Active_contour_model Note that it will probably miss the chin, in which case you probably need to tweak the algorithm (or do it in two passes).
&gt; where you don't know what type you're creating in a static language! So, what type are your **Nulls**?
Honestly I just want what Java has; Dictionary&lt;X, Y&gt; = new Dictionary&lt;&gt;(); I don’t really care about losing the whole type - I’d rather not, since I prefer the explicitness to a degree, it just gets out of hand with nested generics.
Are you seriously going to compare F#'s type inference with C#'s?
Man I really hope you finish this series. There arent many good start to finishes resources on microservices yet. 
C# includes a lot of cruft from back in the day. It is too easy for beginners to write crap code in C#
I third this. We use HTTP PATCH along with the JSONpatch library. Works like a charm and is the appropriate use of the HTTP verb.
Actually, it is even worse. He is asking to get -93,307 characters starting at the 96,528th character.
True, but that doesn't address the F# compatibility problem they are creating. 
https://www.infoq.com/news/2018/09/default-interface-methods-core Nothing is certain, but people are concerned. 
It's valuable comparison because they have such a different design and philosophy. 
I tested the code myself and got the correct answer, so I am pretty confused as to why it doesn't work for you. My code: ```cs static string GetBetween(string message, string start, string end) { int startIndex = message.IndexOf(start) + start.Length; int stopIndex = message.IndexOf(end); return message.Substring(startIndex, stopIndex - startIndex); } static void Main(string[] args) { string test = "&lt;input type=\"hidden\" name=\"csrfToken\" value=\"84d4b7047760593ee4163e82f1c77ba3b640d645 - 1547485526351 - 34762738e80d50156f857eab\"/&gt;"; Console.WriteLine(GetBetween(test, "name=\"csrfToken\" value=\"", "\"/&gt;")); Console.Read(); } ```
I would only use it where var isn't an option. 
In your view, which type system is better designed?
My objections to F# are: They could have solved the nullable types problem, but choose not to and in fact made it worse. For example, an `Option&lt;String` can be `None`, `Some(null)`, or `Some(string)`. So now I have to make twice as many checks. WTF is `Some(null)` a thing? Also `Option&lt;int&gt;` is incompatible with `Nullable&lt;int&gt;`. The compiler should have made them the same thing, or at least implicitly castable in both directions. Speaking of which, why do I have to give up all implicit casts? In my experiments, the time I saved not putting types on private functions was lost by putting in casts everywhere. (Type inference shouldn't be used on public functions because the types act as documentation.) The type system also means that I have to carefully organize my classes so that they are loaded in a specific order. Which means I have to program without circular references, which is the kind of limitation we haven't had since the VB/COM era. At the end of the day F# wasn't compelling to me. It didn't solve my problems with VB or C# and it added new problems. So it isn't the language for me. 
There's UCMA. What are you trying to do?
Just wanting to show username and presence in my WPF starting simple to understand it all
The null issue is a pet peeve of mine. But I'm sure they did it to remain compatible with .NET. That requirement is what is pushing me away to Haskell and other typed functional languages
Thanks to such comments we have even more motivation! :)
Wow, TIL. I don't think it's something I'd ever actually use, but TIL.
This series look very promising as I'm looking into learning more about microservices. Please keep them coming, sir.
There's Lync Client SDK for WPF applications, I don't think it's been updated for a couple of years, could be wrong though. There's also UCWA for web apps
Quite a shame they just straight up remove it. A lot of hard work went into the docs for various languages.
[Microsoft released Visual Studio for OS X a wee while ago.](https://visualstudio.microsoft.com/vs/mac/) ^(It's more or less a reskinned and updated version of Xamarin Studio, but it's something I guess.)
Looks really good, looking forward to it!
Roslyn will likely actually throw an ambiguity warning or error here; a self respecting IDE or codestyle plugin would do the same. I don't see a problem with this new syntax as long as either the compiler throws a style/ambiguity warning or error, or the developer is just smart enough to not do something like this. 
Yep, I wrote a few of the SQL documents and edited a fair few. A lot of work did go in them.
Setting the field to null is beneficial, because if you didn't, broken code (maybe one that uses weak references, gc handles or reflection) would be able to access it without any warning.
Considering that nullability is at best controversial and that C# 8 is moving away from nulls through the nullable reference types, I'm not sure that's a great argument for why we should introduce more ambiguity.
Very interesting, I'll make sure to follow development on this series. 
Looking forward to reading the whole series!
I think those exceptions are primarily meant for methods, not properties. Properties should avoid throwing exceptions. 
AFAIK Find All References will already be using Roslyn at some level. 
in fsharp it's common to explicitly type public api at least
The community has 0 issues, but type inference in f# is not the same as new() and it requires files and projects to be ordered because the are compiled in order. 
Are they not backed up somewhere?
thats an example where you should be explicit but that doesnt really make it a gimmick. using it like the dictionary example in the link is cool with me
var myVariable = new(); 
Oh hey! Fancy seeing you here, fellow transcriber. 
It looks like there's a download link right there.
I don't believe that can possibly work: can't infer a type when there's nothing to infer it from.
You can download the whole documentary on the archiev.org link and maybe someone will bring it back (a first attemp was already made https://riptutorial.com) 
an easy fix for this would be to save the last generated random number into a class variable. By doing so you can check if the next number you generate is the same as the last played - if it is, generate again, if its not, play the sound and save the new last generated random number to the variable
The correct, but useless answer is that you can't. Either you generate random numbers, or you prevent getting the same number twice in a row. The usefull answer has already been given by, /u/timpi. Remember the last generated number, and try again if you get repeats.
I ended up creating another int variable named lastPlayedSound and came up with this: https://i.imgur.com/sdNFxBc.png It seems to work, is that basically what you were talking about? Is there a cleaner way to do it?
But you already got that, the other way around atleas var dict = new Dictionary&lt;X, Y&gt;(); This is as much explicit as Dictionary&lt;X, Y&gt; dict = new(); // Or more verbose, but syntactically incorrect (not more explicit.) Dictionary&lt;X, Y&gt; dict = new Dictionary&lt;&gt;(); // Same but correct syntax Dictionary&lt;X, Y&gt; dict = new Dictionary&lt;,&gt;(); &amp;#x200B;
yes that is what I was talking about. The only change you could argue that is 'cleaner' would be to use do-while instead of while and only call Random.range() once inside the loop instead of using it to initialize and call it again in the loop. But that would be nitpicking to say the least. Your solution is fine.
Downloadable as a free C# PDF [https://books.goalkicker.com/CSharpBook/](https://books.goalkicker.com/CSharpBook/)
is that post missing a /s or are there places where you cannot use `var` but the `new()` syntax would work? Both rely on type inference, so if var can not find out the type, why should new do? &amp;#x200B; I just realized the opportunities with generics public TResult CreateValue&lt;TResult&gt;() where TResult : new() =&gt; return new();
Create a circular buffer length N, generate random numbers from 1..N-1 Add generated random number to previous one for next number (wrapping if current + next &gt; N)
Thank you! I'll have a look at it today.
Shit programmers can already write shit code. A contrived example doesn't invalidate a concept that isn't meant to be used in that way.
I owe you a debt of gratitude, thanks for helping me, it worked as intended. 
What is "a Server" - is it a HTTP Server, a WebAPI, a Database or a custom protocol server? &amp;#x200B; You could set up your own "server" (eg. using `HttpListener` for a HTTP-server, or TcpListener for a raw communication) and communicate through HTTP-Requests with your process
Writing F# feels like you're in an endless wrestling match against the type inference algorithm, I wouldn't call it zero issues.
Download IIS. Create simple server side application - web services or similar. Deploy website to IIS and fire it up. Write code in visual studio to use the web services. Run code then profit??? Google will give you step by step on each of these.
Generate a GUID (globally unique identifier) - public string Id = Guid.NewGuid().ToString(); [https://techterms.com/definition/guid](https://techterms.com/definition/guid)
That’s true — good point! I’ve been wanting the &lt;&gt; syntax for ages and I guess it never clicked that var was an alternative. That said, this still doesn’t help when you want to initialise fields and properties inline, and I expect complicated generics to be more common as fields than variables.
Not sure how the Mediator pattern can fit with the original code.
a server is just a program. a web server is a program that accepts http requests and returns images/html etc a database is a server that stores and retrieves data in some way. So, yes you can install any kind of server you want, and work with it, or make your own server! What kind of server are you thinking of? &amp;#x200B;
Ummmm I’m interested in knowing what any of these things really mean?? Basically I have programmed a Twitter bot, can handle the getting setting authorizing basic header stuff, basic response parsing. But when I think of the more real uses, it’s like tracking inventories, updating prices, separating user/“admin” privileges between the person using the website and the person using the website to sell things. And maybe this is more in scripting territory but there are tons of websites, okay i can f with the html, but the basics of the USER asks the website for INFO which it turns into a request from a SERVER and then processes and displays the response; the specifics of this process doesn’t make sense to me. There are lots of $ signs involved? 
A GUID is not a number.
i ran into this recently. my solution is to split the string i'm working on, using space as the split argument, and then iterate through and stitch them all back together with stringbuilder (can also stitch with reassignment, but i like stringbuilder)
Can I use IIS to set up files locally on my hard drive and have my program talk to it as if it were a server? I don’t really have the tools to turn it into a real, accessible server that lives on a network. The stuff I can find about IIS all talks about the related internet protocols, etc. and it’s hard for me to decipher if it will actually need to exist on the web.
I guess I want to make a local database on the hard drive that would be good practice for later setting up something accessible within a network/online, or give me the tools to work with a client’s existing system. Like am I making too big a deal out of this lol? For example I have existing programs that ping XML in locally stored files to read/write/edit/delete in the context of a “news feed.” Like journal entries that the program squirrels away and can later retrieve in separate circumstances. Is this “using a database,” the rest is just dealing with specific headers and authorizations and file structures based on the context/product?
Set up xampp. It's a local apache web server with mysql and php includes. You can then practice interfacing your c# to the sql server or with a web application that you run in your local environment. There's a ton of great guides but feel free to hit me up with questions. 
I’m only a C# noob, but would it not be possible to write and wire an event handler that changes the color of the combo boxes text when the user selects a certain option from the drop down list?
Yes even on a proper server you can still reach a website via localhost. 
Unless you have a static IP you wont be able to reach any type of server you set up. Even if you get it to work the moment your ISP gives you another IP, your server will become once again unreachable. &amp;#x200B; If you want a local server that you can make request to in your local intranet then IIS would be perfect. IIS is already installed in your machine. It's just turned off to avoid having extra work running in the background you might not need. &amp;#x200B; If you follow the guide below, it should end right were you can take over and implement what you would like to do. [https://docs.microsoft.com/en-us/visualstudio/ide/quickstart-aspnet-core?view=vs-2017](https://docs.microsoft.com/en-us/visualstudio/ide/quickstart-aspnet-core?view=vs-2017)
If you just want to do some rest queries then use one of the dummy API services, like this one: https://jsonplaceholder.typicode.com/ There's also a way to set up a mock API server using [Postman](https://learning.getpostman.com/docs/postman/mock_servers/setting_up_mock/).
A language will put \_some\_ effort into preventing people from writing bad code, but they're mostly on your own. If your team sucks, C# ain't to blame.
Thanks sounds cool!
Like the others said, use your computer. A server is just a bigger, hopefully faster computer with more memory and a slightly different OS. Of course, the cloud skews all that, in general...
You need to override your custom object's ToString() method. The ComboBox will automatically call the ToString() method, and since yours isn't overridden, the default ToString() is just the type of the object casted. The SO post is a great example of how to achieve the desired effect. &amp;#x200B; Here is an example of how to override the ToString() method: [https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/how-to-override-the-tostring-method](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/how-to-override-the-tostring-method)
Thanks! I’ll take a look!
so give them rubbish
Also very useful. Thanks.
You could use a ComboBox.ItemTemplate to change the color. &lt;ComboBox.ItemTemplate&gt; &lt;DataTemplate&gt; &lt;TextBlock Text="{Binding Name}" Foreground="DarkOrange"/&gt; &lt;/DataTemplate&gt; &lt;/ComboBox.ItemTemplate&gt;
And learning how to do some cloud based stuff would be relevant, too..... after reviewing many responses i think the heart of my question was “how do I get experience handling PHP and SQL (and similar) when I don’t have access to things utilizing PHP and SQL.” Thanks.
Thank you 🙏! Will take a look at all. 
So what? The GUID value(s) can still be used to accomplish what OP wants. Heck, if only numbers are desired, use the ASCII values or HEX values for them instead. I gathered that the most important factor in OP's request was the uniqueness and randomness of the numbers. If I misunderstood, then I apologize.
[removed]
That's essentially the route i'm trying currently. Basically, I have the 2 exe's in my assets folder currently. One of them is the one I want to be able to launch, called the launcher. And one is a console app that receives the arguments, and its job is to move the launcher to the Apps 'local folder' so it can have all of the permissions it needs to do its job. I've taken to building a config file manually in code for this exe, and output the file in the local folder. That way, by the time the launcher is moved to the local folder, it should run fine with it's newly tailored config file. However, **moving** it is the issue, and why I need to be able to pass through custom arguments. See, on my machine the UWP app is fine, and knows where the local folder is. However, if I installed this on another machine, used by a different user, x versions later, the path of the local folder would now be completely different. So I need to pass the local folder path across as an argument to future proof it. &amp;#x200B; I *do* have access to azure table storage, perhaps I can pass a variable to there, as UWP does have access to do that I think, and my console app can just read it from there. The only problem there is how I reserve each entry for each session, as again, I can't pass anything to my console app to tell it what to look for, so incorrect data could get read, which is a big no-no. If 10 people are using my app at once it could get fucky. Perhaps I could research some ways to do this. 
Look at this guy, he doesn't like free stuff
His code sample use the random number as an index to an array. A GUID is useless here, converted or not. This is why we read before we post.
You can always install php under a web server on your machine. As for a database, there is MariaDB, postgreSQL, and even MS SQL Server developer edition... all free. I’d recommend starting with XAMPP. It has everything you will need and is preconfigured. https://www.apachefriends.org/download.html
No, not when it's offered on barbed hooks. 
Like what? It's not like something changed to the worst, is it? Yeah, there are limitations to "free plan" but better some free plan then no free plan, no?
&gt; is that post missing a /s or are there places where you cannot use var but the new() syntax would work? They have an example in the article: &gt; Superficially, this feature looks like the reverse of the var keyword. But instead of inferring the variables type from an expression, it infers the expression’s type from a variable [...] With local variables this isn’t too interesting, but where it can come in handy is short-lived arguments. XmlReader.Create(reader, new XmlReaderSettings() { IgnoreWhitespace = true }); XmlReader.Create(reader, new() { IgnoreWhitespace = true });
&gt; Unless you have a static IP you wont be able to reach any type of server you set up. Even if you get it to work, the moment your ISP gives you another IP your server will become once again unreachable. [Dynamic DNS](https://en.wikipedia.org/wiki/Dynamic_DNS) mitigates this.
A good strategy for this is to treat your array of sounds like a play list. Instead of generating a random number and picking one from your array (excluding the last played), create a random sorting of the array of sounds. That way the sounds will appear in a random order, but won't repeat back-to-back. In fact, your players will hear all of them before hearing a repeat. You will have to regenerate the play list after each play through. Just make sure the last sound from the previous playlist isn't the first sound in the next by removing it from the list of candidates for the new playlist.
Have you never heard of Microsoft before today? This is another attack vector to claim a greater enterprise marketshare and drive down use of competing products. These moves often drive more people to recommend the enterprise counterparts in their workplace because it's what they're used to working with. I am happy for folks that get to use this nice new free stuff. I have my reservations about further encouraging potential monopolies, though. 
Your computer lives on the network (assuming it’s connected) just the same as any server... You decide if it responds to requests of any kind!
You should not be using IIS until you need IIS. It can be a pain to configure, and it's hella overkill for local development. Use kestrel. Learn .Net Core and move out from there *if needed.* [https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/?view=aspnetcore-2.2&amp;tabs=windows](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/?view=aspnetcore-2.2&amp;tabs=windows)
Very interesting. I had no idea; but it certainly seems like a great way to further fragment the ecosystem without a much of benefit.
Makes sense! Some of the other suggestions were for smaller/more straightforward configurations as well. Will look into more about .Net Core.
I like this answer.
Actually a cleaner way to do it would be to move the selected sound to the last position in the array. Then when getting the next random number, use Random.Range (0, clips.Length - 1). Doesn't require you to track a variable for the last sound played, and no chance of having to regenerate the random number.
this makes it impossible to play a specific sound in the array somewhere else in the code or have any form of controlled access to a soundfile, granted that accessing a specific sound by knowing its exact place in an array and not by named identifier is not great to start with. I don't think shuffling the content of the sound array around randomly would be a very clean solution either way.
I like the technique, but the reshuffling after every iteration still comes with the same "don't play a sound twice in a row" problem, right?
All we know is they're accessing the array elements randomly, so the order of the elements is irrelevant in this script. If this array is accessed by many scripts and other scripts are storing indices for the array, then its already messy anyway. But there's no point us speculating about all those factors unless OP shares the rest of their codebase. 
ManualResetEvent maybe?
You can also spin up a server on your local machine, and then interact with it with other programs on your machine without needing to host it elsewhere
I'm really excited about learning all the ins and out with Ocelot for security and how you handle HTTPS.
Based on this, maybe you should just have a look at developing an [asp.net](https://asp.net) mvc application to start off with. VS will run the webserver without you having to fiddle with anything.
Can you post the code someplace where we can review it? Github, for example, or pastebin, or something similar?
Hi! :)
I had a terrible time updating my ComboBoxes when they changed how they worked going from Windows 7 to Windows 10. I read all the tutorials online about setting up a custom ControlTemplate in xaml and followed the instructions exactly, I tried asking for help online, and it seemed like no matter what i did it would work in the Visual Studio designer but not when i ran the app. In the end I got it working by setting up the custom control in each xaml file that used it. I never was able to get it to work when it was defined once for the entire app in the way that it should be done. But by that point i had spent so much time on getting such a small part of the UI to look right that i just gave up and moved on to more important things. Admittedly I didn't try doing it in c# instead of in the xaml though. Seems like this is a case where MS really did a good job of taking something that was simple in earlier versions and making it a real pain to work with. 
Not necessarily. You're chaining lists that have been re-arranged randomly. When creating a follow on list, just make sure the first sound isn't the same as the previous lists's last sound. One strategy would be to shift the list (move first to last). If you choose randomly each time, and simply disallow repeats, you can still get chains of ABABABAB which can become just as annoying. If you do play lists: ABCDEFG followed by FDACEBG and then BECADFG you get a solid mix without repeats, but the user hears all sounds before hearing a sound a second time. It will make your sound array appear bigger.
Does the app have a result label or something that says when done? You can read from the window with win32 also. You may also be able to check for a wait cursor if that is occurring 
good suggestions but no, in this particular case it may or may not open a popup window. But overall I wouldnt want my code to continue until I know those msgs have been processed
Yeah, I'd be willing to take a quick look at a repo.
What kind of file? Does it read in exclusive mode? You could attempt a read and see if the file is still in use. The only other thing coming to mind right this second might be to at how much ram is being allocated by the app. Most likely it grows and shrinks drastically with a big file. 
I think you may have replied to the wrong thread, there is no file
Just create your own server and host it on the machine. No reason to create a "dummy" service if you think you have to just to learn how to design and develop a remote service. The only thing you have to consider is exactly what *kind* of remote service you want to make. There are web services, database servers, WCF services, etc. Do you want to communicate via http requests? Create a web app and/or WebAPI with ASP.NET Core. Want to communicate with it via remote procedure calls (RPC)? Use WCF. Do you just want to play with sending data over a socket to some endpoint? Well, you can use the socket class but you really should use existing technologies that abstract all of that away from you. You could create a virtual machine and host your service there so that you aren't just sendng things to a localhost endpoint and it will be a more accurate representation of a live environment anyway. I usually write a WCF service (that isn't using an http/s binding) as a windows service. If it is using an http/s binding, I use IIS. For web apps/webAPI, I use IIS to host the services.
No I’m just silly. No idea why my brain injected a file being processed from the button click. The brain is a strange thing :) GL 
Throw it onto github, I'll take a look
Yes, you should be able to use ILMerge https://www.microsoft.com/en-us/download/details.aspx?id=17630
It's been awhile, but I've used [ILMerge](https://github.com/dotnet/ILMerge) for this.
Costura Fody also works well. &amp;#x200B;
[https://github.com/typicode/json-server](https://github.com/typicode/json-server) &amp;#x200B; Get a full fake REST API with **zero coding** in **less than 30 seconds** (seriously) 
Github also has a very good public REST and GraphQL endpoints with public data. [https://developer.github.com/v3/](https://developer.github.com/v3/reactions/)
There is some open weather apis etc, out there you can consume.
I often have 2 instances of Visual Studio running, one for the server and one for the client. Yes i could attach the process but when i'm editing both i just find it easier that way.
I agree with generating a random number of 0 to clips.Length -1, but I wouldn't shuffle the array. Instead, you could skip the lastplayed song by counting past it in the list: If the random number is equal or higher than the [int lastplayedsong], add 1.
That brings back memories. When you discover that the library contains an ILmerged copy if `NewtonSoft.Json` version 7.0, you know that you are not going to have a good time.
Then why doesn't this proposal work for you? It's actually less typing than the Java solution with zero loss of readability (in the same situation) Dictionary&lt;X, Y&gt; dict = new() { { new X(), new Y() } };
My router even integrates with several dynamic DNS providers, so if my IP does change my domain gets updated automatically.
This makes it better... public Dictionary&lt;string, List&lt;int&gt;&gt; field = new (); 
I can vouch for [Costura.Fody](https://github.com/Fody/Costura)
Unless it just defaults to System.Object. It would be silly, but could work if they make a special case for it.
I've put it into a private github (it's not sensitive but I don't want my Company's name and code available publicly). It's here, if you send me your github info or username I can add you to look at it [https://github.com/meistaiwan/EBGProcessing](https://github.com/meistaiwan/EBGProcessing)
I've put it into a private github (it's not sensitive but I don't want my Company's name and code available publicly). It's here, if you send me your github info or username I can add you to look at it [https://github.com/meistaiwan/EBGProcessing](https://github.com/meistaiwan/EBGProcessing)
I've put it into a private github (it's not sensitive but I don't want my Company's name and code available publicly). It's here, if you send me your github info or username I can add you to look at it [https://github.com/meistaiwan/EBGProcessing](https://github.com/meistaiwan/EBGProcessing)
I would use this over ILMerge. Works pretty much out of the box.
You should join sdf.org and maybe at some point become a MetaARPA member. You can take advantage of the MetaArray for compute resources and to run your programs on. 
The example you link to is how you should do it, assuming you're using Windows Forms and not WPF. You create a new user control inheriting from ComboBox and tell it you want to draw the items yourself (the "DrawMode" property). In the "OnDrawItem" method, you can draw the items in whatever way you want. One thing about the example is that you should (still?) be using TextRenderer, not Graphics.DrawString, otherwise the fonts will look weird due to the way that GDI+ renders strings on-screen. Do you have any code you can share? If you're getting the class name and not the text, then it looks like you're not using user-drawn items at all.
This is the last of the C# 8 features. Let me know if you want to hear about the C# futures proposals.
I've used costura fody it's super straight forward
I'm referring to code on GitHub. The introduction of var made open source C# projects much harder to read.
I know you mentioned it but just play around with the timing. Thread.Sleep(50) isn't gonna kill anyone.
Sorry - I didn't mean to imply this proposal doesn't work for me; I'm largely indifferent, but I'll appreciate not needing to be specific for generics. &amp;#x200B; I was directing my initial comment more towards the fact that it seems a lot of people are very unhappy with the idea of being able to omit types entirely (which I can sympathise with, since even though it will be an option, most of us don't have control over the style guides we're being bound by during work hours). I don't have a strong opinion in this respect, but I just believe that Java's new X&lt;&gt;() is a nice middle ground. &amp;#x200B; If we just get new() instead, as per the proposal then I'm not particularly bothered; in my own time I'd probably use it in the same situations I'd use new X&lt;&gt;() anyway.
First off, if you want to work with databases you're going to have to learn SQL which is completely different from C#. You also have to learn the specific C# components for connecting to the database, sending queries, and retrieving and processing results. If you want to work with what you'd see in a "professional" environment, then you should download a developer copy of SQL Server which can be run on your local machine. Alternatively if you want to take the more "beginner friendly" approach, I'd suggest downloading SQLite Browser and searching for the appropriate SQLite NuGet packages in visual studio. Compared to SQL Server, SQLite is primitive but it works as a great starting point. 
SmartAssembly does amazing job with that. But of course , it’s not free.
If your number are contiguous (like 1-500, for example). Make a List&lt;int&gt; of 1 - 500 in order. Select a random number from the list based on the remaining length of the list, and take the number from the list as your random number then REMOVE it from the list. Each time you want a number, access the list but with a random range of 1 less. Once the list is empty, refill it: (NOTE: did not check code for correctness of have using statements for List&lt;T&gt; or the built in Random class) ``` public class RandomNumbers { private int _maxNumbers; private List&lt;int&gt; _numbers = new List&lt;int&gt;(); private Random _rnd = new Random(); public RandomNumbers(int max) { _maxNumbers = max; } private int GetUniqueRandomNumber() { // if empty, fill it up if (_numbers.Count == 0) { _numbers = Enumerable.Range(1, 500).ToList(); } var idx = _rnd.Next(_numbers.Count); var ret = _numbers[idx]; _numbers.RemoveAt(idx); return ret; } public int GetNextUnique() { return GetUniqueRandomNumber; } } // usage var r = new RandomNumbers(500); for (var i = 0; i &lt; 1000; i++) { Console.WriteLine(r.GetNextUnique()); // hopefully first 500 are unique // next 500 will be unique also } ```
i already had a sleep(500) which is terrible and that didnt work. I dropped it to 100 and added this code i slapped together public static Boolean IsWindowReady(IntPtr hwnd) { Boolean retval = false; try { Int32 pid = 0; Int32 threadID = GetWindowThreadProcessId(hwnd, out pid); if (pid &gt; 0) { using (Process process = Process.GetProcessById(pid)) { AutomationElement element = AutomationElement.FromHandle(hwnd); var pattern = element.GetCurrentPattern(WindowPattern.Pattern) as WindowPattern; if (pattern != null) { retval = pattern.WaitForInputIdle(10000) &amp;&amp; process.Responding &amp;&amp; pattern.Current.WindowInteractionState == WindowInteractionState.ReadyForUserInteraction; } } } } catch(Exception ex) { Logging.Instance.WriteLog(Logging.MessageType.Error, ex.ToString()); } return retval; }
Can’t believe No one has brought up Docker yet. Went to experiment with Redis, MongoDB, Microservices, API Gateways, ....... ? USE DOCKER!
fody is godsent
Might be worth mentioning that Simon changed [Fody's licensing](https://github.com/Fody/Home/blob/master/pages/licensing-patron-faq.md) a bit: &gt; It is expected that all developers using Fody become a Patron on OpenCollective. &gt; &gt; Q: Do I need to be a Patron to contribute a Pull Request? &gt; A: Yes. You must be a Patron to be a user of Fody. Contributing Pull Requests does not cancel this out. &gt; &gt; Q: Do I need to be a Patron to raise an issue? &gt; A: Yes. You must be a Patron to be a user of Fody. As such if you are raising an issue (question, bug or feature request) and you are not a Patron, the issue may not be actively triaged, and eventually closed as stale.
I think you have a typo there: *Assert.IsTrue(y - 3 &gt; 0, "x - 7 &gt; 0");* 
VS2017 is written in WPF. VS code is JavaScript. Different ways of specifying colours.
If you are going to learn, use the jsonplaceholder site as mentioned by TheEternal21. If you want to make your own 'services' then I would recommend getting into Docker. You can run it on your own system, and if you are happy with it and it will sell you can easily send it to an Amazon Web Service for hosting. With Docker you can run any .NET Core program in it since it is Linux, so you could have an [ASP.NET](https://ASP.NET) Website service or even just a WebAPI with GET/PUT etc. commands to maintain it if need be. Depending on your needs. My API is get only, there is no modifications done on the user end. It is simply a retrieval mediator, with Authentication via Tokens.
Is the Dark theme not enough? You can modify the theme to match manually.
&gt;But seriously - why do you have to have one theme over another? I'll try to get some screenshots later when I get home, but VS code differentiates the code more than 2017 seem to with colors. I am very new to this, and that differentiation makes it much easier for me to understand what I'm doing. A hypothetical example would be method arguments and method names and/or variables being the same color &gt;Nobody cares, as long as it's color highlighted it's just code. This is for personal use, no one to look over my shoulder. 
Another good source for .NET best practices for performance is the book called Writing High-Performance .NET Code.
It really works well. Once I made a stand-alone support app build with caliburn micro and including dozens of extra assemblies. Ran it through fody costura and it merged everything into one binary. Just amazing. Only tricky stuff was the correct inclusion of satellite assemblies for multi language support. Had to modify the build steps in msbuild.
No, it's not enough because 2017 doesnt differentiate code as much as VS Code. E.g., method arguments/names and local variables are the same color in 2017. I'll upload a pic example when I get home later. I'm very new to c# and coding generally, so the added differentiation in VS code really helps. The names of each item in 2017 's font selection screen isn't searchable and I dont know what VS2017 calls each c# object name.
Looks like this was asked before here: https://www.reddit.com/r/VisualStudio/comments/a5z03x/how_to_get_vs_code_dark_color_theme_in_full/ 
I also back Costura. I have used it on multiple projects without issue. Also this feature is coming with .NET Core 3.0 for WinForms and WPF projects. https://msdn.microsoft.com/en-us/magazine/mt848631.aspx 
I don't know of anything that will replicate the VS Code theme exactly, but there is a theme editor extension for VS2017 that might be worth a shot. https://marketplace.visualstudio.com/items?itemName=VisualStudioPlatformTeam.VisualStudio2017ColorThemeEditor I've been using it since its release and I love it. It comes with a handful of pre-defined themes you can copy and edit. One catch is that occasionally it can crash the IDE (unless that bug's been fixed). It's a particular order of operations that can put the extension in an unhappy state. Once you run into it a couple times you figure out how to get around it. Good luck! I hope you find something that works for you.
Thank you. I will take a look later to see if this solves my issue.
No one is gonna do your homework. 
Lots of extensions out there too solve this. My code is extremely colorful in VS2017. On the bus now but will send some names later. Pretty easy to find though
I didnt even understand the question
Removed: Rule 4.
The license is still MIT so you can legally ignore that if you don't mind being ignored.
One of the tips is to avoid Linq, I have a library that helps you do that while keeping the convenience in some cases: [https://github.com/jackmott/LinqFaster](https://github.com/jackmott/LinqFaster)
Just run a virtual machine via virtual box running Linux on your main computer and voila, an entirely separate computer to be your server with its own IP address and OS. 
Yessssss This also makes some code contract style guard clauses a little nicer too: public void MySuperImportantMethod(List&lt;int&gt; someNumbers) { GuardClause.Check(someNumbers != null); GuardClause.Check(someNumbers.Count &gt; 3); GuardClause.Check(someNumbers[0] &gt; 0); } Which can now throw an exception including the expression checked rather than formatting some string literal somewhere as to what the problem was. Or a null check you might currently have: `GuardClause.NotNull(someNumbers, nameof(someNumbers))` can be replaced with just `GuardClause.NotNull(someNumbers)`.
I do! 
Thank you. I've corrected the error.
Yes, it is. Dainty for Visual Studio is a color theme generator that has Dark+ among its presets. See https://dainty.site/vs However, for better or worse – or both; the way Visual Studio tokenizes the code differs somewhat from Visual Studio Code. Don’t expect to get it 100% identical between the two applications.
I feel like you're missing some detail here, but Ctrl-Z still sends the EOF back to stdin, if that's what you're after.
Shunned? If the author expects financial compensation for their software, then it shouldn't be licensed as open source. We should shun this weird stipulation as a requirement for using the software that isn't part of the license. It's nonsense and just puts up a roadblock to adoption and easy legal interpretation.
Sorry, I don't really know the language well. So, you don't have to write any condition like EOF? 
It's been posted before, but I have been using ILMerge at work for almost a decade. Sometimes a bit tricky and weird to handle (especially if you need to screw around with assembly level attributes and version differences), but it always works eventually.
You can add all dlls as embedded resources and load them in your assemblyresolve
Iirc `Console.ReadLine` returns null if you reach EOF. If you don’t want to read lines then you probably want to take the `Console.In` stream and do peek or read or whatever on that.
The first book is in my office and it's on my reading todo list. 
An incredibly detailed post. Some great advice. I have to read it again in more detail because I'm pretty sure that there are things that could be used even if you're not writing code that has to be super performance and lightning fast. 
From his licensing faq: &gt; **But it is MIT, can't I use it for free?** &gt; Yes all projects are under MIT and you can ignore the community backing honesty system and use Fody for free. But, it means he doesn't have to provide support, which is also allowed by the MIT license.
Post your csproj file. Especially the project references.
&gt; I’m sure you’re well aware how the null value is responsible for loads of extra, uninspiring code... I wish I’d thought of describing some code as uninspiring! Great read, thanks. 
[Console.KeyAvailable](https://docs.microsoft.com/en-us/dotnet/api/system.console.keyavailable?view=netframework-4.7.2) and [Console.ReadKey](https://docs.microsoft.com/en-us/dotnet/api/system.console.readkey?view=netframework-4.7.2) and something like this var key = default(ConsoleKeyInfo); do { while (!Console.KeyAvailable) { // Do stuff } key = Console.ReadKey(); } while (key.Key != ConsoleKey.Z || key.Modifiers != ConsoleModifiers.Control); 
I was joking 
Try looking at the project.assets.json file located in the obj folder of your main project after a build. It lists all of the dependencies for the entire solution and may give a clue on which component is dragging in that assembly version.
To clarify the tip - my post is aimed specifically at optimizing code for high performance. Many of those tips will reduce readability of the code, which may make it harder to determine its correctness. I'm a big fan of LINQ and I use it in my own code, just not in the high-perf bits. LINQ is great for writing code which has "obviously no deficiencies" in terms of correctness. Without it your code may end up having "no obvious deficiencies". I also like LinqFaster, LinqAF and these other libraries/tools which can make LINQ usable in more domains.
I'm asking this as an amateur programmer with a couple year's experience. Do you actually run into null reference exceptions? Are they still a problem for developers today? I'm as excited about non-nullable reference types as anyone, if only so I don't feel bad neglecting to put null checks throughout my code. I don't check for null because I never return it, and thus never run into it. If a method might return nothing, I return an optional/maybe type instead. I can certainly get behind making the language more explicit, but avoiding the problem has not been difficult for me. Do NREs become a problem at larger scales of software, or working with older code, or working with teams of developers? What goes wrong that you can get nothing where you meant to have something?
Use ILSpy to decompile all the dlls and paste the reversed source files into your vs project. 
The latest episode of [Dot Net Rocks](https://www.dotnetrocks.com/?show=1615) includes an interesting discussion on writing high performance code. 
&gt; Do you actually run into null reference exceptions? Are they still a problem for developers today? Yes, definitely. Whether you're writing new enterprise software or maintaining legacy projects, they will rear their head. Tooling such as unit tests and resharper help mitigate many but often when encountered it's as simply as throwing a ? at it and moving on. 
No one needs to provide support for open source software; he's stating the obvious. Worse, stating "It is expected that all developers using Fody become a Patron" then following that up with "you can ignore [this]" is just confounding the issue. Remember when Facebook had language around patent law and lawsuit rights when using their open source software? It just makes the question of "can I use this and expect the rights this license grants" less clear.
Not too much, but i prefer explicitly saying what can be null, and what not
Yes, especially today.
&gt; Do you actually run into null reference exceptions? Are they still a problem for developers today? I had to fix one about two hours ago. It happens. 
Rarely works for anything non-trivial.
All of the above together. If optional/maybe were more common (I haven't seen it in the wild, but I'm not that experienced a developer) I guess it would be less of a deal. 
Sometimes I want something to be null...and am used to coding with that paradigm. I don’t see myself using this unless forced...
&gt; What is "a Server" A miserable little pile of programs! ...sorry, I couldn't resist.
It does. It’s called fusion log. It’s disabled by default as it slows down compiling significantly but once enabled you can see exactly how assemblies are loaded and quite easily figure out problems.
I guess that does fit in with everything else having the type on the left hand side. Problem is the language encourages var on the left hand side where the type is explicit - not saying either is better/worse than the other but these two do conflict which isn't great for the language's consistency.
very rarely, but it puts a load on the programmer to keep in mind if a null can be returned from a function or not. so explicitly specifying when a null can be returned helps with that
Yes. It’s not common and is rarely a complicated issue where I work. Most common situation is when something is sent between client and server or server and database. Most of the time, they are error scenarios people forgot to deal with. Sometimes they are concurrency related, like multiple users making API calls regarding the same resource. Sometimes it’s just a silly mistake, like not knowing some library returns null in a certain situation. Ideally these are caught by code reviews or tests, but of course that’s not always the case. 
The setting where I encounter it most often is when deserializing to objects or doing entity framework. Data about an object can be trasmitted with incomplete properties that lead to a null value.
I couldn't disagree with this more, null types might required that you add 'uninspiring' checks, but sometimes null values are just more verbose and more meaningful. Retrieving an object from a repository by id where it doesn't exist? Null. Want properties with no set value to be explicit? Null. Want to avoid the chaos of typed but invalid default values like empty strings and 0 value IDs? Null. I prefer nulls over valid types with bad defaults any day, it forces you to be careful and will give you useful exceptions rather than silent but deadly type valid junk data.
People keep talking about null reference exceptions but i feel this aspect is by far more important. now if you see `public Foo? Bar()` you know that the method can and will return null just from the signature rather than having to make a assumptions or have knowledge of the implementation. 99% of my null reference exceptions are a matter of a "shit, i forgot that can return null"
Am i just misunderstanding what your trying to say? It seems you've missed the point entirely. Nullable reference types allow you to differentiate between what returns null and what doesn't, null still exists. For your repository example you could have 2 versions of a function; * One that returns `Foo` and throws an exception if an id isn't found, will be used when we know an id exists and not finding one is an exceptional circumstance (i.e. there's a bug somewhere) * Another that returns `Foo?` that could be for user input, in which case an ID not existing is an expected scenario and we know to handle that situation if it arises. Currently you will just have `public Foo Bar()`, does that return null, throw an exception or return a default value? Just from the signature we have no idea.
&gt; I don't check for null because I never return it, and thus never run into it. If a method might return nothing, I return an optional/maybe type instead. This is the core of the issue. Nullable type ARE option types, but people are lazy and don't bother to check. The same people that complain about NREs are the ones who use optional incorrectly or don't understand the point. That being said, I like having the option of non-nullable references. One thing I love in C++ about references compared to pointers is that you know it "points" to a valid, existing, correctly typed, object, so you can drop the null check and save a cycle here and here for tight loops or other high performance code.
It also helps if the team has or had different opinions about null over time. I personally hate null values for the majority of things and try to limit it to as narrow a scope as possible, but I'm one of the few on my team that feels that way. 
The Mac version doesn't even come close to the Windows version. I'd still recommend Rider on any non-windows platform
It may require some more changes than your IProcessableMessage suggestion (which sort of already is a variation of the same pattern), but one way would be to flip things around: simplify the message objects to only hold data and move the business code into handler classes that implement a type strong interface for each message type, e.g. IMessageHandler&lt;MessageA&gt;. That would allow your ioc container to do the construction of the right handler for any message type. I can't know what is most convenient for you because I don't know what the rest of your code base and architecture looks like.
Thanks again for the suggestion - I ended up using it and it works perfectly!
Very nice! I really enjoyed the reading. Thanks for this.
Thanks again for this suggestion. I ended up implementing it with this library and it worked perfectly. I decided on Dynamic Linq in the end, since it was a more concise (and Microsoft-licensed) library, but this was my backup. Very straightforward.
Optional (and the Result&lt;T&gt;) are great. 
&gt; Retrieving an object from a repository by id where it doesn't exist? Null What if an exception happen? will you return null? What if you (or a co-worker) forgot to check for null? 
"Pick either True or False - Leaving blank is also an option" 
Not having to add IsRequired() in most of my EntityConfiguration string properties for EF Core is enough for me to love this.
No
They are if you don't do correct checking yes. 
A good optional type doesn't give you the choice to forget that there couldn't be a value. When we decided (at the outset of a new project) to ban nullable return types and require Optional&lt;T&gt;, we had to write our own because so many of the implementations we found allowed users to just get the value--which either returned nonsense or threw an NRE.
When an exception happens the exception is thrown and no return value matters. Reprimand the employee.
Another thought is null data. When counting sheep: Null means you did not count them. Ergo there are an unknown number of sheep. If you are averaging the sheep, you skip this proposed number of sheep. 
If getting an object by ID, I have it throw an exception, it should have been validated by then.
`null` is inevitable for optional method arguments so it happens a lot.
This is why I really like the CanBeNull and NotNull annotations, like Jetbrains has and Microsoft has started to adopt as well. Let’s you know exactly if something should ever be expected to be null. 
Also C# 8 helps improve in some areas on this: https://blogs.msdn.microsoft.com/dotnet/2018/11/12/building-c-8-0/
&gt; No one needs to provide support for open source software Non sense. Also the main issue currently with open source software is that people take it for granted and believe they can ask for bug fix or new features without participating financially. Guess what, writing software uses money, even if it's open-source. Maintaining it uses money as well. 
I agree with you. Let me rephrase: open source project maintainers are not required to provide support.
If you edit your post to reflect that meaning, I'll update mine as well ;)
Do explain.
I'm guessing you are looking for something like [C# Loop until EOF](https://stackoverflow.com/questions/40924183/c-sharp-loop-input-until-eof) // Loop until Input is Null or Empty while ( !string.IsNullOrEmpty( input = Console.ReadLine()) ){ s.Add(input); }
As an SRE working on a platform that released within the past two years on a contemporary stack: Yep. Unhandled, dirty bastards. 
You can maintain a small list to avoid repeats. A simple list might work well, so you can easily remove or add possibilities as needed. Then just use while( played.contains(rng) ) { rng = rng(); } Otherwise, it gets a bit trickier. You can use hacks like only getting rng values above, or below, your value. This works fine in many places, but isn't truly random. You can also use something like MOD to simply repeat your possibilities and avoid your last pick easily. Other options are to build a shuffle list enforcing your specific requirements, and a bonus might be easily adjusting rules later.
That's been pretty much worthless imo. So many operations are missing. It doesn't have native support for doubles. And if you create a Vector&lt;T&gt; for things like double, you have to first allocate an array to unit the Vector, which negates ant performance gain. 
That's just plain bad. Not only is an exception unnecessarily expensive in that case, but you're also now requiring two operations in place of one, checking that it exists and then retrieving it. A single operation to return an object or a null if it doesn't exist is more efficient, and it's also far more standard, for example the Linq Where operation returns a null if the item doesn't exist in the collection, it doesn't throw an exception. Furthermore, if your repository classes throw exceptions for all these cases then you need to define new exceptions to be able to distinguish them, in the case of accessing an entity from a repository class you're now dealing with argument exceptions, sql exceptions and your custom NotFoundException type, so you have 3 catch blocks instead of two AND you have to define another exception type AND you have to perform two operations to verify and retrieve. &amp;#x200B;
Yep, I take this approach quite often. If I have an optional property on a model I make it nullable to distinguish without question that it was never set, rather than being set to a valid but useless default.
Both these points are made in the article?
Whats the downsides of using something like LinqFaster? I'm seeing a lot operations I use day to day. Could I replace them with no ill effects? 
Forgetting to check for a null will give you good data when it happens, forgetting to check that the correctly typed but ultimately useless default value was valid will mean it passes through your program unimpeded, resulting in consequences like an empty string or 0 ID being stored in your database, being pulled out by a completely different method and then causing havoc somewhere completely different in your code, making it much harder to determine what exactly caused the problem to begin with. The consequences of an operation failing are much less severe than an operation storing bad data in your database.
Let's look at a more specific example. &gt;Foo foo = repository.GetFooByID(id) If there was no Foo with that ID I would expect a null, I would throw an exception from that method if there was a problem getting foo, for example an ArgumentException if 'id' is &lt;= 0, or an SqlException if it was a data access issue. If this was being called in a WebApi controller I would return a NotFound response if Foo was null, an OK if it came back as expected, a BadRequest if it was an ArgumentException and an InternalServerError if it was an SqlException. To me there is absolutely nothing 'exceptional' about a method accessing an object from some collection or data store returning a null - that would be like IEnumerable.Where throwing an exception. &amp;#x200B;
If you use optional or a maybe then you are fighting against the language as it currently stands. In larger projects it becomes annoying, does each package reimplement them or all share a dependency on an agreed implementation? How does it work for packages you don’t control, now you need to unwrap to and from maybes to nullable types. While the new non nullable isn’t quite as good as optional/maybe imo, it’s a massive step in the right direction. 
Absolutely. I work on a huge WPF/C# front end. It's all event driven, so weird things can occur. The very rare null reference exceptions are usually caused by a race condition: you check for null on entry to a function, *then the variable gets set to null by another thread*, then you use it without checking for null *again*, exception thrown. So more common in an event driven system such as a WPF front end. I think the new nullable intent variable will make things much safer, as it enforces methematically provable null checking. But I doubt it will pick up the race condition I described above.
&gt; null is inevitable for optional method arguments This is nonsense. Optional method arguments do not require you to use `null`. You can still use smarter patterns like optionals/maybe.
Make it public on GitHub.
A dictionary + polymorphism maybe?
https://github.com/nlkl/Optional in case anyone wants to use `Option&lt;T&gt;`
While I like F#, I think "business class application with GUI" is a task better suited for an OOP language than a functional language.
Reprimand myself, I've forgotten to do that so many times I can't even give you an estimate on the total. I'm proud of my global error handling though ;)
I don’t like how OO is one thing with F# and functional programming is another. Languages like Swift and Kotlin show that you can strike a way more elegant balance between the two. The biggest value of F# to me is paving the way for more functional programming related concepts in C#.
whats F#
For one thing, you won't be able to upgrade the JSON library without rebuilding the dependent lib yourself. The merged assembly has precedence over external ones.
I believe having Options in the standard library would alleviate most issues. It's become invaluable to be in Scala and I assume it's very helpful to F# users.
That I understand. It's the same as static vs. dynamic linking in C. I was wondering if there's a reason to include that specific version number. Like maybe it was an especially bug-ridden version or something.
Google it.
If they're actually managed assemblies, you can use ILMerge. For native DLLs, you'll have a bit more work to do.
I'm starting to Learn F# I really like it.. Seems scary at times... But it seems to lead to much less verbosity and I like that it has functions like map and other things like better piping and immutability out of the box.. typeproviders seem awesome too... The fact that you can get equatable out of the box is awesome as well.. Early scary days but I'm hopeful and believe this will lead to more productivity .. clearer code and less error prone code(.
 **Data type mismatch in criteria expression** You're doing a date query using strings.
"business class application" actually works very well in F#
What are we arguing about? I don't know if your for or against nullable types and i think we're both off on different tangents or in agreement. `Foo foo = repository.GetFooByID(id)` always returns a Foo, past that i can't know without reading the documentation or implementation. I agree with your thought process but someone else could decide to throw an exception or who knows what. `Foo? foo = repository.GetFooByID(id)` That's a method that takes an id and returns a Nullable&lt;Foo&gt;. It returns an ID if found and null if (presumably) no Foo of that id exists, there's little ambiguity here like there is in the previous example as the nullablity is explicitly defined. I believe that's the argument the article was making, that you can use nullable reference types to better understand where things definitely exist and where they don't rather than having to do pointless checks to keep your analyzer happy or having an error reach production because you and your tests missed a single question mark, it's another tool to create a pit of success...
It's a nice attempt and I don't want to denigrate it, but my problem is that F# is hamstrung by the CLR's limitations. It has a Haskell/ML-like syntax, but it can't do significantly more than C# does. You do have custom operators and let, but you can't exploit the real power of functional programming like higher-order generics and type classes (interfaces with a type-level this, basically), so it feels to me like a syntactically sugared C#.
1. Depends on the context - does the "note" need context (e.g. active document, active window/page/usercontrol). Are you fine just opening a separate Window to write stuff in and save it, so whenever you open the window it always shows this information (unless edited obviously) 2. A System.Threading.Timer would be one way to do it (This example is NOT what you usually do in a WPF application though) &amp;#8203; public class MainWindow { private System.Threading.Timer timer; public MainWindow() { timer = new System.Threading.Timer(state =&gt; { var currentDateTime = DateTime.Now.ToString("HH:mm:ss dd/MM/yyyy"); App.Current.Dispatcher.Invoke(() =&gt; textBox1.Text = currentDateTime); }, state: null, dueTime: 0, period: 1_000); } } &amp;#x200B;
Actually, it's any kind of hardware that "serves" information to clients technically a wrist-watch is a server, if you look at yourself as the client that receives the periodically pushed data from the watch.
Hey buddy, 1) no AD required, merely just a text box that has save button (maybe new as well). So if the applications closed, when they reopen it’s there and away they go. My brain can’t figure out how to even start! 2) I remember years ago there use to be a timer in visual studio, but in 2017 com. I can’t see it at all, even when I’ve added it to the toolbox. Has it gone? Also, that starting point you attached, if that’s not what you would do in a WPF, what would I? Sorry for the spamerino
I don't think you know what you are talking about. Optional arguments for object type can only be `null` (the only exception being the `string` type, since it does have compile-time constant literals).
Most anything that can be written in C# can be done much more succinctly in F#. I use it for class libraries. If I want a WPF app, I’ll do all of that in C#, and write all of the logic in F#. It has made my code much more maintainable. I do a lot of high-level image processing, and have yet to find any shortcomings with F#. If F# had a WPF designer, I’d never use C# again.
But optional arguments don't have to be classes. They can be structs as well, and then you can make use of the optional/maybe monad.
You can't do that if you are writing a library: or every library will have it's own implementation of a value type monad which becomes a nightmare. Plus it is inefficient since it adds an indirection and it doesn't solve the null-issue: your monad could still contain a null-value.
&gt; every library will have it's own implementation of a value type monad which becomes a nightmare That is unfortunately true. I still wish the .NET / .NET Core team would finally add it. &gt; Plus it is inefficient since it adds an indirection Whether that is inefficient or not depends on the use case. Blindly screaming "inefficient" just because it adds a small indirection is mindless. On the positive side the maybe monad will hugely improve type safety because it can't be `null` and forces you to handle the missing case. &gt; your monad could still contain a null-value. Uhhm... structs can't be null.
No worries.
I love it, I wish it would take over as the primary .net language and that Microsoft would put more resources into the ecosystem. 
F# has pop as well so if you want to do the GUI that way you can
1) you could just create a new Window (let's call it `NoteWindow`) Add the TextBox, Save and Load Buttons (design is up to you/the customer) and provide a way to open a specific Note on creation (e.g. using the Constructor, or a `public static int? NoteWindow.Show(int? noteId = null)`-Static function) an example invokation would be void MainWindow_ButtonNote_Clicked(object sender, ClickEventArgs args) { // Shows a new and empty NoteWindow if this.lastNoteId is null, preferably in Editing-Mode // Else opens the Note in Read-Mode this.lastNoteId = NoteWindow.Show(this.lastNoteId); } Storing a note could be as simple as just a `.txt`-File somewhere on the PC, maybe name it `note-1.txt` and increment the number each time a new node is saved. Using `Directory.GetFiles("Folder/With/Note-X.txt/")` you can enumerate all current nodes. There is a lot that could be done. 2) I would probably use the MVVM-Pattern combined with Data-Binding. I would still rely on a Timer though, but hide the implementation details
&gt; This is under the assumption that you’re working on application code where you can enable C# 8 everywhere. If you’re building a library and expect some clients to use older versions of C#, or to simply ignore the new compile warnings, you need to consider adding the extra null checking as before. So can we expect it to ever be used in anything other than in-house software?
this will fail if \`end\` is before \`start\` &lt;div id="1" /&gt; &lt;div id="2" secret="abc" /&gt; using that function `GetBetween(input, "secret\"", "\"");` results in `start=36` and `end=9` end IndexOf must be offset by atleast startIndex &amp;#x200B;
Looks like an abstract message class with a common function that implementations override. Only take in a basic message. System.Text.Encoding is an example of this, all the functions are declared on the base class and the API doesn't interface with the actual types. By the way there's already a message class in WCF. If you add a reference to System.ServiceModel, it's in System.ServiceModel.Channels.Message. It also uses an abstract model, where the message class has a factory pattern to create an instance of an implementation type, but you don't have to know about those. &amp;#x200B;
* What is the purpose and scope of this "config manager"? I don't know if I can assume its functionality and purpose -- "configuration management" could have different purposes in different contexts. * "...different pieces of a list box..." What "pieces" are you referring to? The elements of a list box? * "...variable editor..." By this, do you mean having a different editor be shown to the user based on the value they've selected in the list box? Also, is this "editor" a GUI element or some logical object or both? I am assuming GUI. * "...route it to a setting manager class function..." What is "it" here? The selected value from the list box? * "...which opens an editor with a ref to the variable..." So you want this setting manager function to display the appropriate (config?) editor to the user based on the list box's selected value? I am trying to get a clearer picture of the problem domain. Perhaps you are communicating it fine but I am just not able to read between the lines here. Once I get a clearer picture, I can probably help further. Also, is this a Winforms, WPF, ASP.NET web app or something else?
I had this problem just a couple of days ago. Try these things 1. Add this package (https://www.nuget.org/packages/Microsoft.EntityFrameworkCore/) 2. Import the namespace Microsoft.EntityFrameworkCore into the file where you need to use FromSql 3. Change DbSet&lt;CodeProc&gt; to DbQuery&lt;CodeProc. Step 1 and 2 should fix the "can't find FromSql" problem, 3 should make it actually work.
F# is like a functional language wannabe. Syntax can be beyond terse and plain cryptic. Declaration/file order issues. Circular dependencies issues. Nominative not structural, what's the point? Immutable in a mutable world (.NET), what's the point? No lazy evaluation. There's no amount of syntactic sugar that can make me accept these issues.
how long is this bus ride? :D
I have a few thoughts. The computer sciencey part of me is excited about F#. I like the idea of learning a new paradigm and it seems like it handles a lot of things well that are clunky in C#. But another part of me works on a team and has to advocate for and fight to adopt new things. The odds of me being able to use F# on something work-related at this time are slim to none. As a language, F# is kind of weird. I did read one book about it and I'm in the middle of another. The best book was divided into 3 parts: FP with F#, .NET with F#, and Windows Forms with F#. Or, as I call them: "fascinating", "a pain", "Who the Hell would do this?" The main problem I think it faces is it feels like nobody teaches FP right. FP is a paradigm and it solves some problems better than OO. I don't see a lot of discussion about those problems, instead I see people focus on language features and rushing to wrote Yet Another Factorial Tutorial. YAFT is tired. It's easy to write Factorial in *every* paradigm. Despite spending the past couple of years casually browsing articles about F#, I still feel like I can't answer the question, "What kind of project should start with F# instead of C#?" If I knew that, I'd know when to really dive deep and learn the language. Until then, I'm implementing Project Euler challenges with it and that doesn't always make F# endearing to me. I'm also frustrated every time C# defers a feature I'd really like (record types, any kind of syntax sugar for INotifyPropertyChanged) and implements some kind of irrelevant syntax change to make F# developers more comfy like expression-bodied members. I don't want C# to feel like F#. I want C# to feel like C#. Swift is an interesting language that seems to try and meld functional and OO patterns. I think if MS wants to make a hybrid like that, they should make a new language instead of trying to make C# do two things. No programming language that does two things is good.
What can you do with type classes that can't be done with interfaces?
I like your idea of using it in class libraries for business logic.
I think it's the best use of F#. Obviously UI is going to be much more OOP, but implementing your logic in F# is as simple as including an F# project in your solution, and just adding a reference to your C# project.
F# has lazy evaluation. Sequences are lazy, and you can use the \`lazy\` keyword to delay evaluation. Dependencies are only circular if you make them circular. File order is only an issue if you make it an issue.
Doesn't have to be the case. I have an enormous line of business app written in clojure that powers a react front end client. I'd prefer f# to clojure any day of the week but the project was already well underway when I got hired. 
That's my greatest fear. I'll look into it.
You can also use System.Lazy in C#, but the idea of lazy evaluation being integrated into a language is that you don't use or see a wrapper type.
I haven’t even looked at F# yet for some reason I have a bad memory of functional languages from college. That said 99% of my work load is in ASP.NET and I also thought that F# was just not applicable. But I might look into it now some if it can make my business logic code more readable / less verbose.
I don't believe there's any way to get from a Type *object* to a statically typed reference of the type contained in the object. You could create a new dictionary-style object that takes the type as a generic type parameter, but you'd need to define accessors, etc to encapsulate casting to/from the expected type. Like: public class TypeDictionary { private readonly Dictionary&lt;Type, object&gt; _backingStore = new Dictionary&lt;Type, object&gt;(); public IEnumerable&lt;T&gt; Get&lt;T&gt;() =&gt; (IEnumerable&lt;T&gt;) _backingStore[typeof(T)]; public void Add&lt;T&gt;(IEnumerable&lt;T&gt; x) =&gt; _backingStore[typeof(T)] = x; }
Wpf, basically it's polymorphism. The listbox is a menu for what to edit (a bunch of integer variables for the main program). So you click on a item in the listbox and it opens a editor dialogue (you type in the new value and hit enter). The problem is that I have to put values in the text box item collection. Then check the name of it on selection changed. Depending on the name I run a function in another class. When that function runs it opens a editor window. The issues I deal with from here, there are way to many functions that do the same thing with tiny differences, it's convoluted and slow, and it requires changing variables in multiple places to work. What I would like is to be able to say { "Box":boxFunc(), "Egg":eggFunc() } and then when you click on a member of the listbox it would look through the dictionary and run it's associated function. To populate the listbox I could just loop through the keys and add them to the item collection. Sorry for formatting, I am on mobile.
I'm actually trying to learn ASP.NET now, and my F# libraries work perfectly. I would definitely give it a try. Life without curly braces is a much more enjoyable life.
Haha noted. Will do. Thank you!
What's wrong with it if it works?
You could use a container type that implements the visitor pattern as the value, but then you'd need a method for each type.
Uh... you're sure this isn't an [xy problem](http://xyproblem.info/)? Sounds strange that you'd want to have a unknown variable type index combined with statically typed logic. If you have an IEnumerable&lt;object&gt; you could skip the dictionary entire and go `var ints = items.OfType&lt;int&gt;();` Or you could have the dictionary like Dictionary&lt;Type, IEnumerable&lt;object&gt;&gt; and look it up like `var ints = dict[typeof(int)].OfType&lt;int&gt;();`
I have used c# professional since before it was released. I have used it extensively since then. I think in c#. but I am not a c# developer, I am a developer who uses c# and loves it. I also like f#. Why am I making a very nitpicky point? because languages should be tools. I have used c, c++, c#, javascript, and f# to name a few. Always be comfortable with different tools. &amp;#x200B; that being said, it's very beneficial to learn c#. You can do functional programming I C#, you HAVE to do functional programming in F# (if oyu get my meaning). C# is more versatile. &amp;#x200B; Very short answer: learn both
How old are you? I’m just curious how long I have to wait before I can do cool stuff like this
Stuff like what exactly? Using F# lol?
We constantly run into them over here. And this article is correct, we have so much defensive code to combat against this it's sickening. 
I would suggest in 2019 you want to write [UWP apps](https://github.com/jbe2277/waf/wiki/UWP-vs.-WPF). You should first try some simple app from the sample code and understand how they works. You can download sample app from [https://github.com/Microsoft/Windows-universal-samples](https://github.com/Microsoft/Windows-universal-samples). If you are new to this you want to do following 1) Write a console app to read/write text files. You might want to explore different way how to perform[IO on file system](https://docs.microsoft.com/en-us/dotnet/standard/io/). 2) Write a WPF or UWP app that allow user to input some text. &amp;#x200B; 3) Write a simple app to display system time or/and counters. &amp;#x200B; 4) Take above 4 app put all together. &amp;#x200B; This should get you started. The first complete app might be not your best work but it's a good start. The entire app could be single threaded using UI thread. Don't worry about performance yet. As you develop each stage commit them to github or local repo. Now implement some IO exception handling. What to do if you can't open a file / write to a file or file not found? Try to use async for IO operation, so GUI is active while background task is completed. Take that timer and allow it to update every second on it's own while user is taking notes / saving notes etc. This might not be the correct answer to your question. But this is how I would achieve. &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B;
Mainly I’m referring to his obvious comfort with the domain. High level image processing sounds cool too. It just sounds like he’s found his niche and I’m wondering how long that took. 
F♯ (F-sharp; also known as fa dièse or fi) is the seventh semitone of the solfège. It lies a chromatic semitone above F and a diatonic semitone below G, thus being enharmonic to sol bémol or G♭ (G-flat). 
I'm a physicist in my very late 20s. You pick up a lot of what you need in school, depending on your discipline. Most of my comfort is due to accelerated learning out of sheer desperation and developing a tough skin from having my stupid questions laughed at and eventually answered by the hobgoblins on Stack Overflow.
&gt; any kind of syntax sugar for INotifyPropertyChanged I hope you're using Fody in the mean time. It can abstract away all the hassles with INotifyPropertyChanged.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/fsharp] [What's your opinion on F# as a C# developer?](https://www.reddit.com/r/fsharp/comments/aglpuj/whats_your_opinion_on_f_as_a_c_developer/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
There is such a lack of tooling in F#compared to C# that, unless you don't use any tooling in C#, I honestly struggle to find this believable. I'm referring to refactoring tools, mostly.
I add a global error handler that logs the error and allows the app to crash. I get email notifications for each and every crash. Which is annoying, but that is the point.
You might have some parent class with an OpenEditor function and you subclass it per item in the list and override it to open said editor. You then manually fill in the dictionary, matching each list item string with the corresponding subclass object (Dictionary&lt;string, ParentClass&gt; for the dictionary, then manually with like initializer syntax \["item1"\] = new Item1Subclass()). You can automatically populate the list from the keys of the dictionary, so you never have to worry about having the two out of sync or misspelling something.
&gt; developing a tough skin from having my stupid questions laughed at and eventually answered by the hobgoblins on Stack Overflow. Nice. :)
I'd learn both. If you're looking at a career in programming, leaning a new language every 2 years is pretty normal. Learning how to learn a new language is a life skill in the profession. Language is irrelevant, actually. Succinctness is fine, as long as it produces easily readable code. The length of time you spend typing your initial code is irrelevant. Most of your time will be spent modifying and extending it. If you can't read it, it's do-over time and that's not a time savings in the end. If you revisit code you wrote month ago, it might as well have been written by someone else. There are many times then I avoid brevity in favor of readable. Functional vs. Object Oriented is irrelevant. They're just two different ways to organize your code. What's more important is short, tight development loops. You want to write-test-write-test in very small increments. You can do that with either OO or functional. Just as important is you want to adhere to good principles. Minimize dependencies. Minimize side effects. You can drink too much Kool-aide in either paradigm.
It definitely is a downside, but Visual Studio has come a long way in the past year or so. Most of the things people expect are there - jump to definition, find all references, rename identifier etc. Some of the bigger refactoring tools from C# aren't necessary because you never have to create all that boilerplate to begin with. &amp;#x200B; But I do wish Microsoft would make F# tooling more a priority. I think the world would be a better place if it was first class like C# is. &amp;#x200B;
Absolutely. I'm chomping at the bit to introduce F# to my everyday working (beyond what I already do with it) but I just will not win over the team(s) if there isn't supporting tooling. I think JetBrains announced they are going to adapt their ReSharper suite to F# some time ago, which would be awesome.
Yes, but people have already done that work: &amp;#x200B; [https://github.com/discosultan/VulkanCore](https://github.com/discosultan/VulkanCore) &amp;#x200B; [https://github.com/mono/VulkanSharp](https://github.com/mono/VulkanSharp)
I have never actually had a problem with this. I honestly find that the F# tooling is highly comparable to C# tooling, and Microsoft has a similar opinion with respect to Visual Studio's tooling capabilities for either language. Do you have some anecdotal experience with the tooling, just out of curiosity?
Thanks, will definitely take a look at it!
I like it. I approve of it in a distant sense. I never use it, or have any opportunity to use it. CSharp does most of the same stuff in a way that's easier and more familiar for everyone else.
F# has many nice features, but like many complex languages it's gotten to a point where it becomes difficult to actually use the right feature in the right situation. When you program in C, you use pointers and functions. When you program Java, everything is a class to an excess. C# strikes a very good balance at the moment with classes, lambda etc. while maintaining reasonable complexity. The only thing it is severely lacking in my every day life is a sane concept of immutability -- I still live it by convention, mostly. Having used F# in a professional environment, admittedly not for too long, but still, my impression is that it is an incubator for language concepts in the .NET environment. In both a good and bad sense. My problem with pure functional programming is that the paradigm does not integrate well with the existing world which is predominantly imperative. And while many functional features have been integrated over time in traditionally imperative languages (C#, Java) or multi-paradigm languages such as C++, the other way round proved to be far more difficult. F# is nice when you use it in a purely functional way. Now show me a non-academic project that can be implemented using functional programming. And this is where the problem starts. Non-idiomatic F# code (actually goes for any functional language) is a horrible mess. I had a mandate to help rebuild large parts of a startup's F# based tool chain in C++ and C# simply because the mostly non-functional F# code proved to be more of a hassle up to a point where it was severely hurting their business. It unified the worst of imperative and functional programming. Meanwhile, re-implementing the core features, including a redesign of the exposed functional features, in C++ almost felt like a very natural thing (and as an experienced C++ developer, that is not something you usually expect from C++). In summary: Functional programming is nice, but it's not a holy grale. Functional features in traditionally imperative languages have been adopted very well to the benefit of everybody. The other way round hasn't been smooth, and this is a problem because we live in an imperative world. I suggest you learn both and take the best parts of each language and use whatever is best for a problem.
Safe delete, move (folder/project/namespace), rename a la ReSharper (which IME is a lot more robust and comprehensive than native VS), extract class/method/variable/parameter, transform parameters, inline, convert to/from static, and probably a lot more.
Thanks for your reply! I truly appreciate the explanation, it helped a lot! I spoke with my (senior) teammates, and they did not like the idea of having more than one DTO for each data model (we do have at the moment one DTO for each data model). Regardless, thanks again!
&gt; Declaration/file order issues. Circular dependencies issues. My understanding was that F# makes it more difficult to have circular dependency issues *because* of the strict file order rules. https://fsharpforfunandprofit.com/posts/cyclic-dependencies/
The answer long ago was "Fody doesn't work with Xamarin". The answer a short time ago was "my team is very resistant to adding new items to our build chain because we have had so many problems with Xamarin". The answer now is "I write ASP .NET Core so I don't give a flip about INPC anymore other than lingering bitterness. And I'd rather restart my career as a Java dev than take another C# client gig, whether it's WinForms/WPF/whatever XAML framework is the current big thing." I don't like Fody as an answer. I want to use a language that's designed for the use cases I'm using it for. Objective-C and Swift both have built-in property change notification because they were designed to work with a UI framework that requires MVC. C# decided to omit that aspect of "being designed for WinForms". I have never thought that was wise. But now that I'm writing ASP .NET Core, I don't have to spend every day wondering why the tool I'm using requires me to bolt-on third-party solutions to implement a fundamental feature. The truth is C# is a pretty bad language for GUI based on that last paragraph. With each new iteration, the language is more friendly to POCOs or record types, though it still can't bring itself to actually *implement* syntax for record types. I think this reflects an acknowledgement that C# for desktop UI is a declining case, but now we're standing in the context of a different reddit post.
I've done a little reading about functional programming (Wikipedia, mostly), and haven't quite been able to wrap my head around it (and therefore haven't touched F#). Can you give an example of a problem that is better solved with FP than OOP, and a brief comparison of how the problem would be solved in each language? (Sorry, I don't mean to give you an essay assignment, but I'm eager to talk to someone who understands the concepts and can convey them to me.)
The purpose would be that I can learn a bit more about how these APIs adds up. And since DirectX uses C++ APIs, that C# only partially supports (Visual C++) I chosen to use Vulkan or OpenGL. However OpenGL has some bad words on it in the past years, so I would go with a modern and well structured library, thus Vulkan.
No worries. How to design RESTful APIs are as much religion as anything else. The point of the many different DTOs is that they allow you to vary the shape and constraints *on the model* as opposed to *in the controller*. Either way works, so do what makes your colleagues happy. 
I think the main idea is to not have to write null checks
Maybe /u/jackmott2 can speak to that. I don't really see downsides to it. Just be aware that it wont remove all of the costs of the LINQ-style API, such as closure allocations. You can often pre-cache your closures in a `static readonly` field, though. It's a solid choice either way. There are other techniques for reducing the performance hit of LINQ-style code. Eg, [roslyn-linq-rewriter](https://github.com/antiufo/roslyn-linq-rewrite) will rewrite your code into for-loops, etc.
&gt;I'm asking this as an amateur programmer with a couple year's experience. Do you actually run into null reference exceptions? Are they still a problem for developers today? No, not past the initial testing phase. If you test thoroughly, it's really a non-issue. And I don't mean just automated testing, either. Automation can catch many things, but SUT can't be automated. (SUT = Stupid User Testing.) Put the software in the hands of a user and *watch them use it*. They'll break it in ways you never contemplated, and because of that, there will be things that you and your automated testing couldn't have covered. NRE's tell you where they were thrown from, which you can completely mess up if you have bad habits. If you `catch(Exception ex){/*do stuff*/ throw ex;}`, you just broke your stack trace and the NRE is now hidden. Don't do that. If you absolutely must re-throw, use `catch(Exception ex){/*do stuff*/ throw;}` instead. If you have a 500-line method, the NRE came from somewhere inside that method, and you have a lot of code to desk-check to find it. Don't do that. Break your code up into smaller pieces. If your methods are 10 lines long, and you get an NRE from inside of that method, you can spot the NRE quickly. Basically, NRE's aren't hard to fix if you don't suck at programming. But, apparently, being competent is a tall order these days. It hurts the feelings of snowflakes when they find out they're not special and they're not as perfect as they think they are. &gt;Do NREs become a problem at larger scales of software, or working with older code, or working with teams of developers? What goes wrong that you can get nothing where you meant to have something? Mostly it comes down to bad developers being cheaper to hire than good ones. Businesses cut costs and get "good enough" software. It has always been thus. But then those same businesses expect perfection from that shoestring budget, but the original, cheap, newbie/amateur developer is long gone, and the system is failing. So they hire a veteran/professional developer to fix the garbage code. So a lot of professional devs really want newbies to be forced to do things the right way in the first place. This is short-sighted and won't actually work, since "building a better idiot" is a long-standing tradition among humankind. Mark my words: In no more than 5 years, there will be a new "biggest mistake all new developers make", and someone will be howling for changes to the dev toolchain to automatically prevent it, even though it nerfs the toolchain's usefulness for veteran developers. But for now, they've only *optionally* screwed up the C# language with this null-hating nonsense. Let's hope it stays optional. I, personally, fully intend to do the opposite of the OP article's title.
I would have been much happier if they would've left it as it is, but added a `NonNullable&lt;T&gt;` and some accompanying syntactic sugar for it. If your method signature is `void DoSomething(int blah, string whatever, string! guaranteedWhatever)`, it's pretty obvious that the "guaranteedWhatever" parameter is a `NonNullable&lt;string&gt;`. Then you can have *language-level* enforcement of the non-nullability of that string, rather than simple compile-time checking. Alas, they went with the "derp" option instead.
Guys, please can we not downvote this comment? The post is asking for opinions, and this is an opinion.... don't downvote it just because you disagree with it. I get that Reddit's "only downvote if the comment doesn't add to the discussion" is mostly ignored, but this is literally about opinions, downvoting because you disagree is just silly in this context
Check out Code Maid and Visual Assist
Step 3 might cause a compiler error
&gt; VS2017 is written in WPF. Got a source for that? I'm really interested to read about it.
Are list box items names of config settings, as if they were key/value pairs?
DirectX is actually a set of COM APIs, and they are very usable from C#. \[SharpDX\]([https://github.com/sharpdx/SharpDX](https://github.com/sharpdx/SharpDX)) is the de-facto wrapper for all of the DirectX libraries, including Direct3D 11 / 12. The story for Vulkan is actually a little different from D3D, because the way it treats function pointers is a little more complicated. In theory, you are supposed to load function pointers manually, using special functions defined by the Vulkan API (vkGetInstanceProcAddr, vkGetDeviceProcAddr). Most functions are not guaranteed to be "statically exported" by the Vulkan shared library, which would prevent them from being discovered successfully by the PInvoke system. In practice, however, most Vulkan wrappers in C# do not worry about this, and since most common Vulkan drivers DO statically export non-extension functions (that's a different story), things work out okay. I've written my own Vulkan bindings in \[this repo\]([https://github.com/mellinoe/vk/](https://github.com/mellinoe/vk/)). Unlike other bindings, they don't attempt to pretty up the API -- it's just the raw function imports. I would stay away from Mono's Vulkan bindings, they have a bad design and are pretty fundamentally broken (IMO) in some areas of marshalling. Other libs like these are good: [https://github.com/discosultan/VulkanCore](https://github.com/discosultan/VulkanCore) [https://github.com/FacticiusVir/SharpVk](https://github.com/FacticiusVir/SharpVk) As an aside, I maintain an open source graphics library which wraps Vulkan, Direct3D, Metal (for macOS and iOS), and OpenGL/ES: [https://github.com/mellinoe/Veldrid](https://github.com/mellinoe/Veldrid). It could be a decent learning tool to see how the API's relate to each other and how they are used from C#. &amp;#x200B; 
Use `lock`. That's what it's for. You put both the null-check and the use of the variable into the same `lock` block, and then only one thread at a time can be in that critical section using that variable. The non-nullable-intent stuff will make it so that you'll never get an NRE from something like you describe, but it *will not* fix threads getting exclusive access to variables. Basically, the compiler enforces the rule that any portion of code (regardless of which thread runs it) that assigns to that variable would not be able to assign a null into it. But that doesn't mean that it would be assigning a *useful* non-null value into it. You still need the critical section (the `lock`) to prevent one thread from stomping on another thread's work-in-progress.
LinqFaster isn't lazy evaluation, so if you have something that chains together a lot of operations it will probably not be more efficient, since it will traverse the array multiple times, allocate new results each time, etc. But I include some workarounds for that like "WhereSelect" and "SelectWhere" so that those typical patterns can be done efficiently. &amp;#x200B; You might also look at LinqAF which reduces overhead but is still lazy
&gt; Can you give an example of a problem that is better solved with FP than OOP, and a brief comparison of how the problem would be solved in each language? Not with a lot of authority. Part of why I'm frustrated with C# is I feel FP in general doesn't make a good case for itself. I once saw an FP blogger write more eloquently on that topic, and he is where my hate for the "factorial tutorial" comes from. Sadly, after stating the problem "nobody describes the FP problem domain well", he never went about solving it. Or, I missed it, because after Google Reader collapsed it was a lot harder to follow blogs. But I will take a shot. "Pretending you know what you're doing is almost the same as knowing what you are doing, so just accept that you know what you're doing even if you don't and do it." If I am wrong, it is certain someone on the internet will correct me. Also it's long, and winding, and a lot of ideas that I'm still not settled on. --- Your biggest difference between an FP and OO paradigm is whether you are "function oriented" or "object oriented". Ha ha, obvious, right? This is actually easy to explain but important to wrapping your mind around it, thus very complex in terms of intuitive grasp. When we sit down to describe a problem with OO, we think *both* in terms of our data and what we can do with it. The natural OO tutorials mix data and logic. A `Sparrow` isn't just a `Bird` with a specific Wingspan and Weight, it can also `Fly()` and `Chirp()` in a unique way. If it has to interact with, say, a `Birdhouse`, it does so by either calling a method or setting a property. That changes the state of either object: the `Birdhouse` has to know it has a bird inside, and the `Bird` might change some property to indicate it's roosting. What's important here is when I describe these objects, we naturally understand that an object is both "a thing with properties" and "the actions that can be performed". So what's it mean to be "function-oriented"? It's weird. FP talks about the operations we perform on data, and wants our program to be expressed strictly as a set of inputs, the operations we will perform on them, and a set of outputs. So while we might organize a collection of properties that defines "a bird", we won't describe it the same way: this object will be immutable. Same with "a birdhouse". State is problematic in FP. Remember earlier when I talked about "putting a bird in a birdhouse"? We can't change a property on the bird or birdhouse directly anymore (or we shouldn't, really). Instead, we might write a function that takes a bird and a birdhouse and returns a new data object that represents the concept that the bird is in the birdhouse. That usually means "create a new birdhouse with identical properties other than now it reflects that the bird is inside it." --- That tells us some things about where FP can be stronger than OO, and where OO can be stronger than FP. OO is stronger in heavily state-based systems. GUI programming is a great example. A GUI is constantly waiting on user input, and when that input happens dozens if not hundreds of objects might have to change state in response. A weakness in this design is if you want to parallelize operations, having so much mutable state everywhere means you have to deal with lots of synchronization code to ensure state can't change while something relies on it. FP is stronger when you have a calculation-oriented system. Since it prefers mutable state, and state can only change via returns from functions, it turns out it's a lot easier to visualize how parallelized processes interact. Basically everything gets a local copy of its data and you have to do strange things to create synchronization issues. But this also means it's best suited for systems with small, tightly-coupled states. If we imagine a UI with hundreds of controls, our state has hundreds of objects and each individual state change means completely rebuilding the application's immutable state! So it turns out FP is better in situations where you need to do highly parallelized calculations on cohesive data sets, and OO is better in situations where you need to make dramatic updates to decoupled data sets. --- OO also tends to fit static typing more readily than FP. Since a big part of OO is defining an object as a specific set of data and the operations that can apply to it, we really want to be able to say "this is a bird" and let that be the final answer. That way, if some other application defines a slightly different bird, our compiler stops us from getting confused without writing a translation layer. FP fits dynamic typing more readily than OO. When you write a function "to put a bird in a birdhouse", there's a strong preference to generalize it on top of a method "to put a thing in another thing". FP would rather define "a bird" as "a wingspan and a weight" instead of "a specific type that was created by a constructor". That means you can do things that seem "goofy" like putting a flying fish in a birdhouse. OO might say, "That doesn't work, this is a birdhouse and it only accepts birds!" But let's be realistic. You can put a lot of things that are not birds inside a birdhouse, and describing how that works is analagous to describing why you can put a human in a doghouse, or a pencil in a briefcase, etc. In short: OO says "birdhouses hold birds" and FP is more apt to say, "I know how to put a thing in another thing, and I have a function that can put a thing with a wingspan and size inside of something else that cares about those two properties." --- So, in conclusion: We *can* write highly parallelized C#, but to do so we have to write C# using practices that F# requires. If we prefer mutable state, separate data and logic, and define our operations as chains of functions that take decoupled inputs and return decoupled outputs, we get a C# program that can do parallelized tasks without much synchronization code. But that's very clunky, even with features like `ValueTuple`, because C#'s paradigm is not designed to support this approach. If you're trying to write functional code, F# is just better at doing that. We *can* write highly stateful F#, but to do so we have to write layers to manage that state and separate it from parts of the code that are more elegant if we pretend they're stateless. So we end up with an ugly layer of code to interface with the "not functional" parts, and those look prettier in C# than they do in F#. --- Here's a good way to model that, because I just realized we tend to use both contexts already. Think about a UI using MVVM. We do this in C#, in an OO fashion. Our Page has a ViewModel with properties that represent our data and Commands that represent actions that can be taken. If you click a button, it calls a Command, that Command executes, that causes state changes, that causes data binding to update the UI. Neat. This is an "OO context" and it works fine in OO. Now imagine you need to do something long-running, like fetching data from a device then displaying a complex waveform diagram based upon it. How do we do that? Well, we copy what we need from the form's controls, build our REST payload, then execute that request and asynchronously wait. When it completes, we get the data back and we do our analysis on a worker thread. When all of the data analysis is complete, we notify the UI thread. It updates its state with all of the information and we get a display. That is functional! We actually did something very functional with C#! We gathered inputs, called a function, then used the outputs as a representation of state. It turns out server-based web applications are basically little FP programs. Your input is an HTML form. It does processing and responds with an HTML page. There is no state to update, because once the HTML is served it represents the immutable result! I hope this helped, haha.
Agreed. The number of times I have some terribad DBA tell me that "NULL is bad, you should always have a default value" is staggering. NULL is "I don't know", while any non-null value (like zero) means that value is known and verified. Hearing "NULL is bad" tells me in an instant that I'm talking to a fool who doesn't value correct data, but only values hiding error messages. I have the same distaste for developers that shun nulls in code, and for the same reasons.
I'd love to see what qualifies as "inspiring". Code is just code. It's not supposed to be inspiring, it's supposed to *work*. Sometimes you write code that (figuratively) shovels crap. There's nothing inspiring about it, but if it stopped working, you'd be knee-deep in (figurative) crap.
I'm already useing ef core 2.2.1 and the problem is not with it can't find fromsql, please read my problem again. And for dbquery I tried this before posting and it didn't work too
why not read both?
This is an excellent, easy to understand explanation. Thank you very much. I'm now inspired to give it a try. I think I have more than one potential usage for this paradigm.
This is very similar to what dependency injection containers do, by the way. While it is common for people to treat DI containers as singletons, you don't *have* to. You may be able to just use another instance of your DI container to fulfill the job you would have used this dictionary for. If you don't want to use a DI container in this way, you can write your own class as /u/Canthros suggests.
It’s not just an opinion. He’s making false statements that are misleading and therefore unproductive.
Oh you
I'd imagine yes, but the little bit of P/Invoke that I've done was not much fun.
Ill be honest I have no idea what you are doing with this call, but what i know is that every other arg after the first one will replace {n} in the original string
Fine if you don’t like the language, but don’t be making false claims either * the syntax is only cryptic to the unfamiliar * declaration order dependency is a feature that enforces good layered architecture and makes circular dependencies nearly impossible to create by accident. * circular dependencies aren’t even a thing * immutability by default = thread safe by default and requires far less cognitive load because you never have to worry some other code out of scope will reach in and change your state * false. Not only are sequences lazy, there is a lazy keyword as well. If you’re talking about Haskell style laziness, that’s not a magic advantage; it comes with its own set of trade offs.
You'll need to use `Console.ForegroundColor` and break up your outputs to multiple lines. See: https://www.dotnetperls.com/console-color For example: Console.Foreground = ConsoleColor.Blue; Console.Write("Do you want to use: HTTP("); Console.Foreground = ConsoleColor.White; Console.Write("0"); Console.Foreground = ConsoleColor.Blue; Console.Write(") | SOCKS4("); Console.Foreground = ConsoleColor.White; Console.Write("1"); Console.Foreground = ConsoleColor.Blue; Console.Write(") | SOCKS5("); and so on.
Try to think of the way you would use this afterwards and you'll realize it wouldn't work. You'll need to cast the items manually
Man, what you say about Fody/INPC/F#/yadda rings true in my soul. C# is a bad language for GUI, and echoes the sentiment of other ex-Xamarin/ex-WPF devs. Or maybe all those people are you, because I remember your name. To add to "C# is a bad language for GUI", trying to add simple UX improvements in Xamarin just exposes how limiting/buggy Xaml is. Other than very specific simple use-cases, Xaml breaks. The UI might *technically* be extensible, but it requires so much code in a huge number of places it might as well *not* be extensible. For example, [responsive layout grid](https://material.io/design/layout/responsive-layout-grid.html), *might* be possible in Xamarin. Recreating the AppStore (with expand-into-view frames) is doable, but requires so many custom parts. Making the [keyboard show controls below the focused entry](https://xamgirl.com/adjusting-elements-when-keyboard-shows-in-xamarin-forms/) is a hack and requires more hacks to make it 'nice'.
I'm with the other guy where I don't understand what you're arguing. Making your project non-nullable doesn't mean you can't create objects that contain null, it just means that you have to add the ? identifier to make the nullability explicit. The examples you keep providing such as retrieving from a database can behave exactly as you're describing by sticking a ? on them. But there are plenty of other situations where a null value should never be an option. All turning on non-nullability does is force you to be explicit between those two situations. That's it.
If you're on .net core, definitely check out [Giraffe](https://github.com/giraffe-fsharp/Giraffe), a really clean functional web framework sitting on asp.net core.
I like C# as an overall methodology, but I like particular features and practices traditionally associated with functional programming.
How complete is Veldrid? Would you recommend porting a game's rendering layer to it?
[It's really a matter of preference.](https://stackoverflow.com/a/175543) I don't have to have many types of exceptions, since the data layer throws them for me. I let it bubble to the top and the system automatically rolls state back (via the unit of work pattern), logs the call stack and notifies the user. If I'm expecting that there could be no results, I'd lean on TryGetById() for a single record, or GetRecords() for a list (returning an empty list if no results).
I like the language, but the tooling for GUI development, database modelling, IoT and UWP really sucks, versus what C#, VB.NET and C++ have at their disposal on .NET There is this latent feeling that the F# team is never present when critical decisions for .NET are taken.
calling a bug a feature is really funny. circular dependencies exist in nature, life, C#, the CLR, sadly not in Visual Studio.
Lack of exposure to FP is pretty much why F# feels unintuitive. It comes to a circular argument where everybody uses OOP languages because everybody uses OOP Languages. There are examples of full F# companies out there, the most well-known being Jet.com. They've created a full e-commerce system in F# and are strong advocates of the language.
I wanted to focus on just one book first, then the other one.
just pick either one, then google anything you still don’t understand
 It seems I have a different view than most others. I learnt F# after this sub always hypes it up, and even though I do agree it has several cool features... over all, I find C# to still be much better. Is there bloat that comes with C#? Yes, there is, but most things such as semi-colons, brackets, etc, are there to make the code more readable. It takes a single character to type either of those, yet offer high amounts of readability. &amp;#x200B; I already don't program in a high OOP way. I have a more functional way of writing code as is, so I get the readability of C# without the pain points that we learned from OOP over the years. When libraries get bigger and bigger, I always find C# libraries much easier to understand and navigate, and because of its syntax, you can scan over it much faster than you can with F#. &amp;#x200B; But hey, that's just my opinion.
Because P/Invoke in general isn't or because the API is bad?
So to you, a "real" functional language is lazy by default, structurally typed, and encourages mutability? Is there even such a language in existence? 
Are you saying you actually use KVO? I think I used it once ever, it's necessary for only a handful of APIs and I don't remember the last time I ran across any code that uses it. I much prefer to use something like ReactiveCocoa and a more MVVM-like architecture than MVC too. Even though Swift is a far more elegant language overall, I'd say C# has been better than most for GUI development because it has good built in support for asynchronous workflows. I can't wait for the day when Swift introduces some kind of async/await or coroutines feature. Xamarin is a huge pain in the ass but its problems have little to do with C# as a language.
Trends in the web front-end world (Elm architecture, React/Redux, etc.) cast some doubt on this.
My guess is that he's confusing it with another programming language that allows you to change the foreground color by passing in a second parameter.
Just general dislike for P/Invoke. Whenever I've used it, it's always been a last ditch effort to shoehorn in some functionality that I couldn't do with C#.
Fair enough, art is definitely subjective.
I am on Core, I’ll look at it! Thank you!
I really like F# for what I use it for (parsing and transforming documents) and would like to try it in other contexts. The conventional wisdom is that GUI applications would be awkward with F#, but I still want to try it out. FRP may make it viable.
Yeah, something like this.
Exactly lol
It doesn't feel production-ready, but I've really enjoyed [Elmish.WPF](https://github.com/elmish/Elmish.WPF), which brings the Elm Architecture (React/Redux is a well-known example) to WPF. OO patterns like MVVM feel antiquated in comparison.
Ideally, I wouldn't start with something like Unity or any other complex framework/engine as it requires some degree of OOP knowledge. If you're completely new to programming, I strongly recommend you to read a book about computer science in general, as often times language-specific books take foundational concepts for granted (not all). For instance, debugging can become really low-level, threading can become really nasty if you're not familiar with their inner mechanics etc. Hence it's always good to at least be informed about the basics of a computer system. Of course C# and interpreted languages such as Python have developed to be very high-level/abstract languages. But there's more to programming: efficiency, performance and so forth. Applying both strategies (abstraction + lower level fine tuning) is what I would call real programming. So back to your question I would definitely read up about some general CS stuff and platform-related ideas WHILE trying to understand how C# implements these. Some books have nice little exercises at the end of each chapter so there's no way to copy paste. Then you work your way up, think about problems your computer could solve for you like filtering email addresses or domain names, eventually arriving at the point where you can maintain your own projects. In the end the learning process is individual and addresses your interests. Resources - in my opinion - are solely there for having a foundation and reference while writing real applications is another topic building upon those things but requires a different strategy of thinking and design
A good first step is to build something you want to build. Force yourself to type everything out instead of copying and pasting. And try to understand what the code is actually doing instead of just accepting it for what it is. Oh, and the first thing you build will probably suck. This is expected. Try to figure out why it sucks, and see if you can make it suck less. This is an iterative process, and it takes time.
You're overthinking it. Just have a Dictionary&lt;Type, IEnum&lt;object&gt;&gt;, make it the member of a class, make it private, and then just use the methods of that class to hide the casting.
Yes. Lock will fix it. It will also make things run like a tub of molasses. So sometimes the decision is made to let things run freely and program to avoid the locks.
c# for presentation layer, F# for the rest
C# is an immortal vampire and F# is the humans it locks in the basement to serve as feed. Fans of C# should naturally appreciate the existence of F#. 
C# has been doing more than two things for a very long time. Do you think it would be a better language if it didn't have lambdas? And what makes the changes that were made "doing two things", but adding the functional concept of record types not? Also, C# is not trying to make F# developers more comfy. It's trying to make C# developers more comfy. Doing that sometimes involves taking an F# feature and adopting it for C#, but I don't see anything wrong with that.
I'm really surprised at some of the design decisions in Mono's bindings; there's certainly a few places in SharpVk where I've designed to ensure technical correctness on marshalling but I need come back and optimise, but VulkanSharp has fundamental issues (CreateInfos as reference types that require disposing, or they'll leak memory?) that I can't follow. As an aside, have you been looking at the new ref structs/Span&lt;T&gt; types for Vk? If I can work out some of the use cases (Spans with single items are strangely difficult to create) that would seem a great way to reduce heap churn while marshalling from not-unsafe types.
No, I like immutability. But when your "home" (BCL) is filled with mutable things, it feels weird.
LINQ allows a bit of functional-style programming in C#. Definitely useful for processing collections.
&gt; I use [F#] for class libraries. Are there no issues with bridging F# types and .Net types? E.g. F# functions, lists, records and discriminated unions are not well usable from C#, AFAIK.
How many different types are you working with? May be quickest (computationally also) to create an ISortable interface with an ObjectType enum prop. Implement the interface in each class you want to sort and use ObjectType as the dictionary key. Then it would be dict[obj.ObjectType] = new []{ obj }, for example.
You can do functional programming with any language that has high order functions and functions as first class citizens like kotlin and swift. But they're far from functional programming languages. 
Thank you for your answer! As for general CS knowledge I have good ground in it, however I am type of person to chase rabbit hole instead of investing time into being productive with creation and learning from mistakes. I have solid knowledge in Web based languages, however interest in them was soloely to have bigger picture. Even though I have mentioned that my CS knowledge stands good, maybe some refresher finds me good use to reconsider what I have learned and what I need to learn. "But there's more to programming: efficiency, performance and so forth. Applying both strategies (abstraction + lower level fine tuning) is what I would call real programming." - this is what is my "end" goal. Being able to stand firm on knowledge when dealing with stuff that isn't clicks away. Anyway, thanks again for good and helpful post!
There is no problem with functions (assuming you mean let-bound functions, not the FSharpFunc type), except that you can’t use curried application I believe - all parameters need to be supplied. The issue with lists is that F# lists are immutable singly-linked lists that are specific to F#, whereas ResizeArray exists in F# for interoperability with C# lists. That’s a consideration you just have to take into account when writing interop code, but it’s simple enough to just cast a list to an array, which is the exact same between F# and C#. Records are exposed to C# as classes with all of their properties in the constructor, so no problems there. DUs are plenty usable from C#; F# enums = C# enums, and F# DUs with types are exposed as a giant class with a ton of overrides, as well as your cases as properties and an enum. It works well enough and I’ve had no problems. I think the only real problem is that unit and void are not equivalent.
Really? In what sense?
This is what I was doing, however it becomes hard to keep yourself in check to see if you are on good path. 
Copy and pasting is a big thing of being a developer :p that said you also need to understand what you copied does. Make some small projects to learn the data types. Eg. Making a program that list all your favourite movies. This will learn you about lists. Then make your program sort them by release date? Or sort by IMDb score? Find some small projects like this and use the things you learn for your game
I know that C++ APIs can be used with a wrapper, but it adds a plus layer in your code, which can slow things down.
 ColoredConsoleWrite(ConsoleColor.Green, "HTTP\n"); ColoredConsoleWrite(ConsoleColor.Yellow, "Socks4\n"); ColoredConsoleWrite(ConsoleColor.Cyan, "Socks5\n"); ColoredConsoleWrite(ConsoleColor.Red, "Red Sox\n"); ColoredConsoleWrite(ConsoleColor.White, "White Sox\n"); ColoredConsoleWrite(ConsoleColor.Blue, "Blue Jays"); // Pause screen Console.ReadKey(); } public static void ColoredConsoleWrite(ConsoleColor c, string consoleOutput) { ConsoleColor originalForeground = Console.ForegroundColor; if (c != ConsoleColor.Blue) { Console.ForegroundColor = c; Console.Write(consoleOutput); } else { Console.ForegroundColor = c; Console.BackgroundColor = ConsoleColor.White; Console.Write(consoleOutput); } Console.ForegroundColor = originalForeground; } &amp;#x200B;
I have a similar impression. The code written in F# seems pulled in two directions - in one direction is the purity of the functional language and the object oriented BCL and the library ecosystem is on the other, which is disappointing, because cross-compatibility is one of the language's main selling points. Sadly that cross-compatibility always feels awkward. The language reminds me of C++/CLI a bit in that regard.
I feel like backend code would be much more succint and I am sure not one at work will want to learn it.
Not that it would be an issue, but be aware that your software will fail to run on anything older than 2012, I guess.
Well, there are multiple axes where C# can do two things. The first is they originally wanted it to do *three* things well: Windows Forms, CLI, and ASP. The hope was to make a language that was good at all three by not making it focus overly much on the details of those use cases. (This goal is why syntax sugar for INPC is a hard sell: the functionality is not as useful for CLI or ASP apps.) Another is what I'm arguing in the context of: OO concerns vs. FP concerns. This is trickier and a lot less objective than the previous tradeoff. C# is a strongly typed OO language. You can do a lot of functional things with a strongly-typed language, and C# is better for bringing them in. But what I see now in a lot of the features is an attempt to start trying to bring in F# features that rely more heavily on dynamic typing. C# is *bad* at that, by definition. I was excited for ValueTuple support, but so far every instance where I've started with one it hasn't taken longer than 30 minutes for me to decide it made more sense to define a class instead of a tuple. I don't want demonstrations here, I'm not looking to argue it. I'd love to see "shapes" in C#, where I can cast objects around so long as they meet some on-the-fly defined interface. That makes more advanced pattern matching possible and allows for very flexible code. *It's also a feature of just about every dynamic language*. So I worry, as we continue to try and bring more powerful pattern matching to C#, that we're creating a language that can write great OO code and really clunky FP code. I'd rather have a really good OO language and a really good FP language that interoperate. And I work on the assumption that all effort spent on very difficult FP features for C# might be instead spent on creating better OO features for C#. I also am comfortable that if we've decided OO is just "wrong" enough that we need a language that is better at FP than C# but better at OO than F#, we should bite the bullet and design a new language rather than try to morph one into the other. I feel like that will have a better result.
I decided to write my own for the same reason. One Nuget package allowed you to wrap null as a legitimate value, and another let you access the wrapped value directly. The optional type is supposed to protect you from accessing null pointers, not facilitate it.
r/TIL about xy problem.
I agree with pretty much everyone here when saying build something. I use v.s. for building business apps with some animation. It took me a while to get used to C# syntax but learning the basics and knowing that the info from the internet can be extensive, you don't need half the long code found on most forums to produce something. Good luck and keep at it!!!
&gt; "Pretending you know what you're doing is almost the same as knowing what you are doing, so just accept that you know what you're doing even if you don't and do it." That's the verbose C# way of expressing it. In F# it's "fake it til you make it."
Your best bet is playing around in open source software to see "how it works in the real world". You learn so fast by picking up techniques and patterns that copy/pasting does not exposes you to. Understanding the language is easy, especialy if you already "know programming". But getting the hang of the control structures, framework utilities, etc.; that comes with problems solving that you only face in at least moderately complexe software. Having to pickup an open source software and bulding uppon it is eye opening. It's like traveling!
When I have a use case where FP makes sense, I'll use F#? When I have a use case where OOP makes sense, I'll use C#? I don't have opinions about either of them in context of the other. They're tools in my chest. That's it. Learn both. From my point of view, a lot of the hype around F# is simply from people who are new and find it easier to learn, or people who've come from other stacks to .NET Core and are used to purely functional paradigms. That's not to say it's a bad language at all. I just think people align with what they already know or find easy to understand instead of objectively evaluating the technology on an individual use case basis. 
This is neither but I really like Head First C#, even if it is slightly outdated now. 
I just want to add two small things to your otherwise excellent summary: 1. Functional programming *can* be quite suitable for GUIs (take a look at Functional Reactive Programming, for example Elm or Elmish for F#), but admittedly, it requires some infrastructure to be present to make it usable and convenient. 2. Functional Programming Languages often have static type systems that are much more sophisticated than those found in OOP languages. F# is on the lower end of this spectrum. FP languages like Standard ML or Haskell have type systems that are much more expressive and safe than those of any OOP language I know of.
Eh no, I just picked `6.0.3` as a common but definitely very outdated version of `Newtonsoft.Json`. 
As to your second question, have a look at the `Convert` class. I think the method you want is `Convert.ToType` but it has been awhile since I needed that so I could be wrong about the method name. As to your first question, what you are trying to do resembles what many IoC containers do. You can do something like this, though: public class TypeContainer { private Dictionary&lt;Type, object&gt; Instances { get; } = new Dictionary&lt;Type, object&gt;(); public IEnumerable&lt;T&gt; ResolveMany&lt;T&gt;() { if (Instances.TryGetValue(typeof(T), out var result) { return (IEnumerable&lt;T&gt;)result; } return Enumerable.Empty&lt;T&gt;(); } public void Add&lt;T&gt;(T value) { //omitted } } Example usage: var container = new TypeContainer(); //add objects IEnumerable&lt;FooBar&gt; result = container.ResolveMany&lt;FooBar&gt;(); foreach (var value in result) { //do stuff } The above isn't thread-safe and I am not sure I like storing all objects in a collection for a dict's value. Hope this helps.
&gt;ColoredConsoleWrite What are you using? &amp;#x200B;
I was using ColorfulConsole, with [Color.Red](https://Color.Red); etc
I tested it, but it doesn't change the colors.
Oh, well you really should have mentioned that in the original question.
&gt; public static void ColoredConsoleWrite( The method *public static void ColoredConsoleWrite( ) to pass both color and text to output*
&gt; Uhhm... structs can't be null. Structs can contain null properties, though, which is what he said.
Best book I've found is Essential C# by Mark Michealis.
No.
Jokes on you. Our legacy codebase just uses Exception for everything!
That sounds lovely. Ours wrong an object extension method called "WithDefault" that catches the exceptions and returns default values, so we don't even necessarily know an exception ever happened.
I really liked "C# in Depth" by Jon Skeet. It's really going deep and helps to understand the language. If you buy the 4th edition (no final rls yet) at manning.com you automatically get a copy of the 3rd edition for free.
SELECT ... WHERE fieldName BETWEEN DateValue('19/12/2007') AND DateValue('19/02/2008') 
C#'s tooling is light-years ahead. However, I'd argue that there isn't as much of a need for an R# equivalent in F# because there's far less boiler-plate. For example, it's common in C# to create one file per class. F# is typically organized into modules (ie. static classes) that can contain many type definitions. So there isn't as much of a need for file-management tooling to keep everything organized. Most files just sit in the root of the project, and this is usually OK because there are maybe only a dozen to keep track of. Refactoring F# code without R#-caliber tooling is also less painful than you would expect. The type inference takes care of having to rewrite a lot of function signatures. Also, since it's much more common to create small wrapper types for things like IDs or specially formatted strings (like emails or phone numbers), so the compiler can be quite helpful. Secondly, there isn't as much of a need to "extract classes" or "interfaces" from F# code because F# code is a bunch of static functions and classes (aka modules) by default. Function signatures are also the primarily used "interface" if that makes sense, and this reduces the need to define many custom ones. Also, when you do need an interface, you don't need to explicitly define a class (and create another file) to implement it. You can plug in ad-hoc functions instead. Eg. let takeOutTheTrash() = // some function that frees resources let disposableResource = { new IDisposable with _.Dispose() = takeOutTheTrash() } Thirdly with respect to classes and code organization, it's typical to separate data from behavior in F#. Code is organized more like "extension method" classes in C#. F#'s pipe operator enables the "fluent" style that you get from chaining method calls in C#. The great thing about organizing code this way by default is that you're not constantly forced to make decisions about whether a method belongs on class A or class B (unless it's actually necessary). You just put them in a new module that contains behaviors related to *both* class A and class B. This reduces the need for tooling to move methods around from class to class to account for the dumb organizational decisions you made during prototyping. It's also simpler to transplant functions since they aren't implicitly coupled to an instance of `this`; all parameters are defined in the function signature. And finally, F# code typically has a lot less "syntax", meaning there are fewer line-breaks, curly braces, explicitly specified types in variable/function declarations. There's lightweight syntax for record types (which generally substitute for POCOs in C#), tuples, arrays, lists, dictionaries, etc... even classes. You don't really need to lean as hard on the IDE to "hide" things like `regions` or xml documentation. So, anyway. There are certainly clunky things about F# that I wish I had an IDE to smooth over, but the apprehension people have about not having R#/C# level of tooling available is unjustified IMO. The lightweight nature of the language makes it easier to get by. VSCode has full intellisense, goto definition, and a built-in REPL. That's all I really felt I needed.
Well swift is a lot closer than kotlin but it still doesn't force you to think functionally. You can however, just like you can in any modern language these days. F# doesn't force you as much as Haskell and swift doesn't force you as much as F#. 
I would say start with some reading o SOLID principles for oop (just Google that and you'll find stuff). Read some of Kent Becks stuff, it is java based but the same principles apply. See if you can get a pluralsite or Lynda.com account, they have tons on there. Also one really big thing is don't write giant blocks of code and pick good descriptive variable names. Have fun and Google is your best friend.
&gt; Mono's Vulkan bindings, they have a bad design and are pretty fundamentally broken Why am I not surprised.
Yes, like \[BoxSizeX\] \[BoxSizeY\]
There's [Dragablz](https://dragablz.net/).
I like it in theory but not having been able to write a lot of it for work I'm struggling to transition between the two. The .NET library support is not as simple to actually implement as it seems so you end up finding alternatives anyway. I think it's great for class libraries but I would struggle to recommend it for windows forms. Definitely worth learning both though, if just for the two different perspectives on how to solve problems. Functional and Object Oriented. 
I am aswell interested in this as the library Dragablz, which might be interesting for you though, is not mature enough for my purposes. 
The only thing I can think of is to have two programs where one launches the other. But there should be a better way, right?
Good book, bad introduction. OP: It's worth looking at eventually, but probably won't be useful until you are able to translate your ideas into code. If you're an experienced programmer, but are new to C# it will probably be helpful much sooner.
Why do you need an exe? Why can't you just execute the .ps1 file in powershell?
The .exe will be run by another application that can't run .ps1 files only executables. 
Pro C# 7 is what I bought based on your advice.
&gt; But what I see now in a lot of the features is an attempt to start trying to bring in F# features that rely more heavily on dynamic typing. C# is bad at that, by definition. I was excited for ValueTuple support […] What's the relationship between tuples and dynamic typing? Those two are completely different things. Are you perhaps talking about the distinction between nominal and structural typing? &gt; But it subverts the type system in such a way that we end up with two types of C# code: stuff that can be verified by the compiler and stuff that has to be verified at runtime. Shapes are a compile-time feature. I don't think there's anything about shapes that would require runtime verification. &gt; we're creating a language that can write great OO code and really clunky FP code Do you have an example of that "clunky FP code" that you think is coming to C#? Because I don't see that in what's being worked on in C# or in what you've said.
Can the applicatoon not run powershell.exe path\blabla.ps1 ?
It would be a learning project, not production. Also I don't care, who the hell would use a PC older than 2012 to anything that requires 3D rendering?
The yellow book was written by my old lecturer, which means I’m slightly bias, but Rob has a great way of teaching, which shines through his book, keeping the topic fun and light hearted during even the most tedious sections.
SHOUT OUT OFH
Do you mean UOH ? 
I'm dyslexic. Yes I do hahah
Wooo!
Saturn as well. Sits on top of Giraffe
Can't you change the window icon? you can have different icons for exe and windows. 
Unfortunately missed getting taught by him which is a shame because I hear he was the best there. But still a decent uni! 
You can run the PowerShell exe and call the script as an argument.
Pro tip: if you’re offered an internship at VISR, decline at all cost, you don’t want to learn anything from them. 
Nice. This looks promising.
Sounds like a nice little project to get started with! If you are on Windows 10, I agree with the other poster, try starting with UWP. If you do this, you can get the framework of an app easily by using Windows Template Studio. https://github.com/Microsoft/WindowsTemplateStudio This will give you the guts of an app and you can try to add your features without worrying about plumbing. Now, the the specifics, try using the MVVM (model view view-model) paradigm. Eg Your model is a Note class you creat that contains info about a note, eg text, date, time. Your view model contains an instance of the Note to be displayed, along with methods to save and open a note. Your view is the xaml. It has the view model as it’s datacontext and binds to the Note’s properties. The note could be saved to disk using xmlserializer 
its like making exe out of java files ..its just a fake
I've used [AvalonDock](https://archive.codeplex.com/?p=avalondock) on several projects. I don't think it's maintained anymore but it's free, has decent documentation and is really stable and easy to use.
Just following up on this, i did find a nuget package to handle similar operations called RateGate
I did not find that in documentation. Thank you!
Dude, you're in college. You presumably should know how to do some of these things by now and if not, you should either be asking for help in specific areas (e.g. how do i interface with a database) or if you have no idea what you're doing you should be talking to your instructor or a TA to get extra lessons . &amp;#x200B; There may be a language barrier that I'm not aware of but from the way you've worded this request, it looks like you want people to do the work for you and that will only screw you over in the long run
Nope the software I use only accepts .exe/.bat/.vbs input and within them we cannot refference the powershell.exe at all. I am an application packager and the software I am working with and our end users just don't allow powershell exe to be accessed direcrly. Hence why I am asking for a library to compile the script my application generates. 
I am a Service-Oriented programmer which, to me, means most of my code is Functional/Procedural. I program in C# and separate my functional-paradigm'd code from the boundaries of the application which consume it. I use LINQ, other .NET Constructs like Func() delegates, and a few custom functions that fill the holes in functional construct availability. These allow me to follow the functional paradigm in C# What that buys me is the ability to hire other C# developers who know LINQ, which is easier to hire for than F# developers. Otherwise I would take my isolated "Functional" code from C# and just straight up port it into F#. But at this point in my code base there's not much of a difference other than syntactical sugar and enforcement. So I love F# and Functional in general. But until as many people understand and adopt Functional Programming like we have, it isn't something I can move to. 
PC Cafes in Southeast Asia
PowerShell.exe and its core dependent dlls are less than 1MB together - can you bundle them up with your program and extract them to an accessible location?
Good article, thanks :)
Yes, ~~but~~ **and** people have already done that work Same message, a little more positive :P
Well, powershell scripts are just that, scripts... which are interpreted by powershell ... There is no binary equivalent, or compiled version of it, because it isn't source code. If you find a "converter", it's likely just gonna package the script inside an .exe, which then calls on powershell. Unless the script is really complicated, I'd suggest maybe porting it to C#, then compile it, and there you have your .exe
And even then I'd rather some kind of `Option` or `Either` type that *actually* forces you to handle the "null case" rather than allowing the jr dev to forget to null check somewhere simply because the ID wasn't found.
&gt; ColorfulConsole Probably would have helped if you mentioned that. Looking at their GitHub source, it's pretty similar. You'll need to break up each coloured portion to their own `Console.Write` call: Console.Write("Do you want to use: HTTP(", Color.Blue); Console.Write("0", Color.White); And so on.
My previous boss spent a considerable amount of time trying to teach us how to attack problems, but never taught this specific method. I'm surprised. It makes so much sense. 
I don't know if you are familiar at all with PowerGUI thats what I normally use to create .exes fron my .ps1 files. My application that i am working on provides ends users with a simple GUI which they must fill out with various details which my application then outputs a .ps1 file for. Currently the end user has to take this .ps1 file and compile it to an .exe or wrap it in an .exe using powerGUI. I have been asked if I can cut this step out and essentially get my app to output an .exe opposed to the .ps1 file. As for porting it to C# I wish I could! My manager wants all our scripts to be in PS saddly. 
VSCode and the Ionide extension are great!
you will 100% on the wrong path but it doesnt matter tbh. first goal should be to get into a "i can do x with doing y"... just general problem solving. with time you will add more and more skills. just focus on doing something. you will always learn something
Just call your powershell from a C# application.
OfType&lt;T&gt; is the golden goose function as you can safely use it in a foreach loop; if there are no objects of the specified type you just get an empty IEnumerable&lt;T&gt; back, so no crash. Very useful for things that only implement IEnumerable, to turn them into IEnumerable&lt;T&gt;.
Oh, I was referring to the xy problem and how to recognize and attack it.
Maybe you could write a minimal wrapper application that runs the actual powershell script? If so, maybe [this could work](https://blogs.msdn.microsoft.com/kebab/2014/04/28/executing-powershell-scripts-from-c/)? Disclaimer: I've never tried this, nor worked with PS through C#
But you want to use Vulkan APIs? SharpDX has no more overhead than whatever wrapper you'll come up with for Vulkan.
So used as intended then
I still do...
Too bad windows don't support shebangs, or does it? In that case you could just put shebang on beginning of script and rename it so it ends with .exe. But I don't think that's possible. One other option, however crazy, might be to write simple C# program that just calls powershell executable and gives it specific script to execute. That should be pretty easy. Then you have to write program to write this program. Nothing complicated, but it feels "hacky" and I wonder if there's better way. In fact, there is no reason why powershell code couldn't be actually compiled - don't trust people who say "powershell isn't source code". It absolutely is. There is no such thing as "interpreted" and "compiled" languages, there are just some languages for which there are interpreters, some for which there are compilers, and some for which there is both. But if someone bothered to write powershell compiler is entirely different question.
Why not just put the execution inside a bat file then point your application to that? @echo off Powershell.exe set-executionpolicy remotesigned -File C:\Users\SE\Desktop\ps.ps1
If you're brand new a game might be a tough obstacle to tackle out of the gate. It would be like someone who's never hammered a nail asking how to build a house. If you've got your basics down, honestly for me the best thing was to do a project. It doesn't have to be anything new or innovative, just pick a problem and solve it. One of my very first "on my own" things I did was a simple interest calculator. Yes there are tons online and you don't really need to build it, but it taught me a lot going through the process of actually building it. The next thing I built was a simple site to track movies I would see trailers of, and want to see them eventually. It had a login system, users, and then you could add delete or mark as watched the movies. That in turn made me learn about authentication and databases, etc. I just did larger and large projects from there until I got a junior dev position. 
They're both written by him, but thanks for the comment!
That's if it's WPF. If it's WinForms, he'll probably have to override OnPaint.
I'll look it up, thanks!
Thank you, I'll look it up too
Oh shite, so they are! Hmm well the yellow book was used as the main reading material. The other one was published after I left uni, so I don’t know it’s content, that’s why I didn’t comment on it. Maybe the begin to code with c# is more up to date. But the yellow book is definitely great.
I'll look it up, thanks for the suggestion!
I'll look it up! Thanks!
Awesome, at least I know both would be a great choice.
You actually want to add a column to a DataTable that exists within that DataSet. [See this](https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/dataset-datatable-dataview/adding-columns-to-a-datatable).
Start with hello world
I got my students to work from Https://www.mooict.com to work small 2d arcade games for their units it helps build competency by competing small projects that can built upon slowly by adding more elements that you want to. Don't rush it because just like learning anything you have to leave room for errors and have patience to problem solve as you go long. Good on you for trying tho. 
[This](https://www.amazon.com/Pro-NET-Core-Andrew-Troelsen/dp/1484230175/ref=dp_ob_title_bk) book should be good if you already have some programming knowledge. I have the 7th edition and it doesn’t cover anything about Unity but it’s got good examples and covers a lot of the language and .NET (its really thick by the way). There are also a whole lot of good YouTube channels/tutorials that focus on Unity such as Brackeys that provide code you can copy, experiment with, and adapt in your games. Also check out the Unity forums forums if you get stumped on specific things. Microsoft and Unity also have programming guides that you’ll find useful [c#](https://docs.microsoft.com/en-us/dotnet/csharp/) and [Unity](https://docs.unity3d.com/Manual/index.html). When learning Unity start with simple things that are rewarding like basic movement, then work your way up to complicated projects or parts of your game.
I am a long time C# dev, and I recently gave an overview presentation to my team of fellow C# devs. Here is the slide deck, which was targeted specifically for people like me who have spent so much time in the C#/OOP world: [https://onedrive.live.com/view.aspx?resid=27A6504DB3E5D878!2856&amp;ithint=file%2cpptx&amp;app=PowerPoint&amp;authkey=!AIHXqJm-OK9LjKo](https://onedrive.live.com/view.aspx?resid=27A6504DB3E5D878!2856&amp;ithint=file%2cpptx&amp;app=PowerPoint&amp;authkey=!AIHXqJm-OK9LjKo) &amp;#x200B; There is a really good example near the end that compares C# OOP to F# OOP to F# FP solutions. (Be sure to turn the notes on in the bottom right corner for more context.) &amp;#x200B; Since giving the presentation, I have used F# on a few real projects, and it's been a game changer. For creating LoB apps, F# "algebraic data types" provide very powerful domain modeling features that eliminate null reference exceptions by making the compiler work on your behalf. The most recent application I did involved mapping complex C# object graphs into a new system based off of a large set of mappings and business rules. Not only was the project finished ahead of schedule, but there were zero bugs found in the mappings. (All bugs were cosmetic). The previous updates to the system were very painful, and tended to run over schedule with run-time errors being caught for months after deployment, usually due to the C# compiler giving a big thumbs up even when a class property was not initialized. Once you get used to modelling with algebraic data types and exhaustive pattern matching, it becomes very troubling when you can add a property to an OOP class and not immediately get a compiler error. I used to hate compiler errors, but with F# I have learned to love them; because when your F# app compiles, it is usually works the first time. &amp;#x200B; The other thing i really love about F# is the freedom from the ceremony of classes. In C#, objects are your basic unit of development. So almost everything has a class, and usually a new file to go with it. Or even worse, everything has a class and an interface. OTOH, in F#, functions are the basic unit of development. Most of the time you can create a file with a module, and all your types and related functions go in one file. Cognitively, it becomes much easier to grok code when all the pieces are together. In C#, much time is spent traversing back and forth between 5-10 relevant files for any given problem. Even worse, OOP tends to disperse logic throughout a hierarchy, so the final concrete logic bits may be dispersed in several places, whereas in F# the handler logic tends to be all in the same module. &amp;#x200B; With all that said, I will keep this down to earth and give my own criticisms as a newcomer to the language: * At the this moment, I still prefer UI design in C#. I like WPF/MVVM. It works well, and C# has ~~better~~ tooling ATM for this kind of stuff. With that said, F# does have a *really cool* UI design pattern called Elmish / MVU (model view update). I think FP is probably the future of UI as demonstrated by ReactJS, but if you're on the ball, you can be doing it now. * One of the strengths of F# is that it merges FP with OOP. However, one small criticism I have here is that it can be daunting for a newcomer to learn best practices because there are many in the community who like to downplay the OOP aspects, even though this actually goes against the spirit of the language (IMO) as laid out by the designers of the language who tout it as a positive. As a long time C# / OOP enthusiast, I agree with the designers point of view that the OOP + FP is a winning combination! I celebrate the ability to use OOP concepts: things like using dependency injection to inject my bulletproof F# business logic into my C# WPF/MVVM view model! * I agree that refactoring tools for F# are not as good as C#. Also, "Go To Definition" between C# and F# projects in the same sln is still dodgy. * There could be / should be more real-life LoB examples out there for experienced C# developers to grab hold of. C# devs have been at it long enough that we are going to outpace toy examples rather quickly. I am currently reading "Stylish F#" by Kit Eason, and this has a lot of real world examples in it. Highly recommended. Also, Scott Wlaschin's book, "Domain Modeling Made Functional". &amp;#x200B; Overall, the strengths of F# make me more than willing to put up with these small issues. Plus, I'm pretty sure that the refactoring / tooling improvements will continually be addressed over time. If you still think that F# doesn't have anything to offer you over C#, then you really owe it to yourself (and your team) to dig a little deeper.
Could you not make your known a read only or constant variable? Instead of looping through your known types you could just take a copy of it, then add your discovered types to it
It is actually possible to convert powershell into bat. Triggering the powershell executable to run the ps1 file is one but if u r doing it in your company, you will usually run into execution of script is disabled error as companies would set executing ps1 file to disabled via global policy. Alternately, u can write the code from your ps1 file to the bat file and trigger powershell to run the code, just need to do some formatting on the code for bat file to be able to interpret it to send to powershell to execute. I wrote a [blog post](https://yarnthen.github.io/yarnthencohosking/tutorials/2017/07/01/powershell-to-command-prompt-conversion.html) sometime ago on how to do it. You can check it if required. 
yes 2! I am a huge fan of Elm's type system - [understanding-the-elm-type-system](https://www.adamwaselnuk.com/elm/2016/05/27/understanding-the-elm-type-system.html)
Isn't DirectX COM based? If so it should in theory work fine with C#....
I don't mean to be rude or to discourage you, but your question boils down to "how should I learn to program in this language", which is probably the single most common question related to programming that people ask on the internet. There's so much research you can do about this subject, even considering your main interests. There are endless recommendations about good books too. Once you have found a book or another way of learning, the key is to just keep practicing. Programming is something that will eventually click and you'll only get there by writing a lot of code. It's easy to get stuck in this loop of researching the best way to learn, so just look for some book recommendations online, pick one that matches your interest and see how it goes. Even if it doesn't work out, you'll have new knowledge that will help you in your next attempt.
I think that happens with vanilla C++. Not with COM. COM is built around the fact that stuff can be used in any language. In theory.
Why not create a Hello World exe in PowerGUI and then use DotPeek to decompile it? I honestly wouldn't be surprised if the exe just creates a new PS object and feeds your script into it, hardcoded. https://blogs.msdn.microsoft.com/kebab/2014/04/28/executing-powershell-scripts-from-c/
Thats the issue the scripts are not tmaimed for use within our company its for iur end users. Who are universities and universities always disable PS script execution. But thanks I'll have a read of your blog tonight. :) 
KnownTypes is a collection of Types the user provides that they consider "common", so it has to be a collection the user can modify. At least in the beginning, after the serializer instance is created the collection cannot be modified anymore. Is that what you meant? Not sure if I fully understand your idea. I'd have to make a new TypeCache and then add the known types every time I do a new serialization (which is essentially what I'm already doing, I clear the old TypeCache and then only add the KnownTypes back so everything is ready for the next time) But this "taking a copy" (or clear+ adding the KnownTypes back again) is what I want to somehow avoid in the first place. Hope that makes sense
I have a license i'm not using for PowerShell Studio 2017 which can do this
Thanks dude I've never heard of DotPeak before I'll give it go!
I have not profiled it myself, but according to your post, there are some basic things I have noticed. One thing that I notice is, your enumerator for KnownTypesCollection is not efficient. For one thing, you have `ICollection&lt;Type&gt; _collection = new HashSet&lt;Type&gt;();` If you were exposing \_collection to other objects (i.e., if it were public), then I would say that this is fine. However, you are not. Do you plan to ever have it as another type? This will allow easier refactoring, but it does have a performance cost. RyuJIT/the CLR cannot inline the `GetEnumerator()` method for this member, because it is an interface i.e. it is virtual. It \*might\* inline it, but that is no guarantee. Second, there is the actual enumerator function itself: `public IEnumerator&lt;Type&gt; GetEnumerator()` `{` `return _collection.GetEnumerator();` `}` [The enumerator for HashSet(T) is a struct](https://referencesource.microsoft.com/#System.Core/System/Collections/Generic/HashSet.cs,926a6f5fbf7cfa18), which is a good thing because that will reduce allocations (especially if you are calling it a lot). However, in this case, when the return type is an interface, then the struct is boxed, which means an object is allocated on the heap when `_collection.GetEnumerator()` is called, and then possibly GC'd (when the GC gets around to it). If you change \_collection from ICollection(T) to HashSet(T), you could do something like this: &amp;#x200B; `public HashSet&lt;T&gt;.Enumerator GetEnumerator()` `{` `// HashSet(T).Enumerator's constructor is internal, so we cannot call it.` `return _collection.GetEnumerator();` `}` &amp;#x200B; `IEnumerator&lt;T&gt; ICollection&lt;T&gt;.GetEnumerator()` `{` `// Cast to ICollection(T) if you change _collection from ICollection(T) to HashSet(T)` `return ((ICollection&lt;T&gt;)_collection).GetEnumerator();` `}` Or, if you don't want to expose HashSet(T).Enumerator, you could define your known enumerator that basically copies HashSet(T).Enumerator. For for InstanceData... no idea if this will make a difference, but try change `foreach (var t in Config.KnownTypes)` `InstanceData.TypeCache.RegisterObject(t);` into `var typeCache = InstanceData.TypeCache;` `foreach (var t in Config.KnownTypes)` `typeCache.RegisterObject(t);` See if that makes a difference.
Yeah this is just about the only real world use that makes sense
If the var is in JavaScript, you might be missing the “” around the @Model.foo.bar - remember it needs to parse as JavaScript 
Agreed. Your project will turn out like shit the first time. But you should know exactly what could be improved. Then start another project and work on those improvements. Rinse and repeat until you get a solid grasp on best practices.
Hey, thanks for the detailed post! Good observation, there is actually no reason why I use KnownTypes like that. In fact it would be MUCH better if I would simply call \`.ToArray()\` once in the constructor of the serializer. The KnownTypes collection can not be changed after that point anyway! The fact that it is an HashSet in the first place is just to ensure no duplicates, so turning the HashSet into a simple \`Type\[\]\` would be perfect. I didn't think of that, but I'll add it to my todo list, easy to do and instant benefits! &amp;#x200B; As for your edits at the end: Maybe the comments there are a little out of date. I'll take a close look at them and update them as soon as I implement the optimization above. The whole point of KnownTypes is to let the user provide a Set (as in no duplicates) of Types that they know will be used often and for which the serializer should never emit the type-name as a string, but write a very short ID instead. &amp;#x200B; Which reminds me of something... The order you mentioned is actually needed, the plan was to sort the types by Name or something (internally) but that is way to brittle anyway! Simply turning KnownTypes itself into a List is the way to go. And once the user is done modifying it (and passes the SerializerConfig that contains the KnownTypes to the serializer-constructor) the list can be turned into an array for maximum performance. At that point checking for duplicates can be done as well (and instead of ensuring no duplicates through a HashSet&lt;&gt; I can simply check it manually and throw an exception if there are any duplicates). &amp;#x200B; Thanks for your post, I don't think the optimization (using an array copy of KnownTypes) itself will have a ton of an impact, but it will be positive nonetheless and you also helped me find a potential bug (order of the hashset being random, where as a List the user can fill maintains its order).
Oh, you're very welcome! For ClearSerializationCache(), maybe instead of calling _serializationCache.Clear(), you could possibly just create a new object and let the GC figure out when to free the old object. That way, you aren't having to clear the memory yourself (the GC might decide to keep it around). And, of course, when you create the dictionary, you would specify a size to minimize resizing.
And as far as I know, DX mainly uses Vanilla C++. Or at a minimum, it's callbacks require some hacky structures in C#
Would creating a new dictionary be faster than clearing an existing one? One thing to keep in mind here is that I'm using this project (or planning to) in Unity (the game engine), which is an environment that is extremely sensitive to allocations. It uses an old garbage collector and... well explaining would probably go too far; but anyway, for a variety of reasons everyone using Unity tries their very best to minimize any garbage collection pressure. They're updating it to a newer version at some point in the future (or enabling time-slicing for the GC, which comes with its own batch of problems though), but reducing allocations where ever possible is still a high priority. &amp;#x200B; On desktop platforms it's not too much of an issue, but garbage-collections on slower devices (smartphones) are very noticeable (in terms of super long lags, tens, sometimes up to hundreds of milliseconds) &amp;#x200B;
What conference are you talking about exactly? Have you checked the internet archive?
ps1 file are interpreted by the powershell, so they cannot be "compiled" and executed by themselve. They will always rely on the powershell core to run. [https://blogs.msdn.microsoft.com/kebab/2014/04/28/executing-powershell-scripts-from-c/](https://blogs.msdn.microsoft.com/kebab/2014/04/28/executing-powershell-scripts-from-c/) From what I understand, it is possible to write an application that act as a poweshell "host" and execute script in there. Maybe with that, it would be possible to "encapsulate" a ps1 file through that utility. Just thinking aloud here.
It really depends. You would have to test it. I would imagine that it would depend on the amount of memory being cleared. Honestly, when it comes to performance, sometimes the only way to be sure is to test it. Easily testable code can not only make it easier to find bugs, but also easier to optimize. Performance involves a lot of experimentation and a lot of testing. So, I have no clear idea if it'll work.
Then lets say I won't target those.
As I wrote in another comments, its not about creating an API, its about learning how it works.
&gt; It would be a learning project I would be surprised if my random triangle rendering project would end up in Asia.
The official .NET microsoft conference - https://www.dotnetconf.net/
I don't think anyone wants to approach learning the ideal way as it is not fun, nor is any ideal situation real world. 
We've used Avalon Dock for a few years and it works pretty well. No complaints. 👌👍
You understand right. The joker you're responding to understands nothing.
Self flagellation and chanting C# code while clanging a large bell at sun rise. I went to a really catholic college but it worked.
F# doesn’t force you to do FP style development, it just gets out of your way so you can. Trying to make use of functional abstractions in C# gets really painful sometimes. 
Write code for the sake of writing code. Have a group of files that need to be renamed (those old digital camera pictures that are named DC485539)? Write a tool to change the file names to a date/time stamp. Could you do it quicker by hand? Write a tool anyway. When you find a solution on a website, type the code by hand. Oftentimes, the solution will look confusing and seem out of your abilities so the temptation to copy/paste is great. Don’t. Do. That. Type it out. This will break the code down into bite sized chunks that will help you digest how it works better — not to mention the hints that you get from VS while you’re typing. If you know another language already, you can find a simple C# program and write it in a language you’re proficient in. That will force you to pick it apart line by line and really understand how it works with a language you already understand. That’s one of the same theories applied when learning another spoken language. I’m not a dev by profession... yet. But I work closely with the dev team at work. One day I asked the manager of development for advice on becoming a developer. He says the single best piece of advice he could give me is to just write code. Program a vending machine, improve it, rewrite it, keep iterating until you have such an impressive implementation of a vending machine that you just have to show it to me. I had a big wall of text written up, decided that it wasn’t what you asked for, set out to give you the gist of it, and it turned into another big wall of text. Sorry about that. 
There are project templates for creating aspnet apps using pure F#. Dotnetcore has leveled the playing field between the two languages significantly. 
When’s the last time you checked? It has gotten so much better over the last year or so. 
Most of which present a much lower value proposition when building F# code. Probably why they aren’t as well integrated into the tool chain. One of the strongest parts of F# is getting to do away with all the ceremony C# requires. 
Since both are fairly high level languages, you will run into lots of the same thinking and modeling when working in c# that you know form python. That said, the syntax is different (classic C-like syntax) and can be overwhelming when you are familiar with python. One of the best things I can recommend to get used to it is to rebuild a project you built in python. This way you can really see and understand what is going on when using c#. Good luck!
The community at large has been trying to solve the problem with OOP by making it into FP for awhile it seems. If you write SOLID code you’re basically writing in an FP style. 
There are a couple of things. For one, you can use methods that don't have the instance as a input, e.g. interface CreatableFromEnumerable&lt;T&gt; where T : CreatableFromEnumerable&lt;T&gt; { T Create&lt;TElem&gt;(IEnumerable&lt;TElem&gt; elems); } (This would also require highker-kinded types if T is to be generic over TElem.) Then you can have covariance in a generic type (a type-level this): interface Num&lt;T&gt; where T : Num&lt;T&gt; { //Zero should be a static method, since it doesn't use the object implementing Num T Zero(); T Add(T x); } class Real : Num&lt;Real&gt; { public double Value { get; set; } public Real(double value) { Value = value; } Real Add(Real x) =&gt; new Real(Value + x.Value); } //A slightly contrived example //Complex's implementation overrides the implementation of Real and returns are more specific class in Add. class Complex : Real { public Imaginary { get; set; } public Complex(double real, double imaginary) : base(real) { Imaginary = imaginary; } public Complex Add(Complex c) =&gt; new Complex(Value + c.Value, Imaginary + c.Imaginary); } Then you can have interface implementations depending on the type of the generic argument: interface Summable&lt;T&gt; { T Sum(); } class MyList&lt;T&gt; : ISummable&lt;T&gt; if T : Num { private readonly List&lt;T&gt; list = new List&lt;T&gt;(); ... T Sum() =&gt; list.Aggregate(Zero(), (acc, x) =&gt; acc.Add(x)); } You can create MyList with any type in this example, but Sum is only supported if T is an instance of Num. There's also more exotic things you can do, like data families (where the type of some member depends on the instance, e.g. having a HashSet&lt;T&gt; in general, but a specialized IntSet T = int).
Removed: Rule 3, Rule 4.
.NET Conf is an online-only "conference". It's streamed live over a few days and then archived on youtube/[channel9](https://channel9.msdn.com/Events/dotnetConf/2018) So, it's pretty cheap :) 
Try and get a job using C#. If this isn't possible, try to join a project with friends, a start up, or some community project. If you find an application that really interests you and forces you to focus on an end goal, you can really accelerate your learning. Finding someone with more experience than you can be really helpful. If there is some way that you can help them write code for their work/project, they could give you guidance on how to improve your coding. My C# learning started when I took a new job 3 months ago. I had only working knowledge of C++ and OOP and managed to pass the interview, but I've been learning all the C# as I go. My manager sets work goals, and then I'm forced to find a solution. I use their existing code base as a starting point to see the code patterns and then do a ton of googling stack overflow to solve my issues as I go. I know the feeling about the copy/paste trap. While I really like learning from books and online courses, I feel that I lacked the creativity to pick up C# in my own learning and reading. Joining a job with discrete goals and timelines really forced me to pick up the language, and I've been very grateful. &amp;#x200B; Good luck!
Again, Direct3D is a COM API, not a C++ API. It's usable from a variety of languages because of that. It's also not generally viable to use a C++ library from another language. Libraries written in C++ that want to be usable from other languages do so by providing a "C API" with un-mangled names, interop-friendly structures, etc. There is no standardized "C++ ABI" that could be used across compilers that would enable something like PInvoke to work with C++ libraries.
\&gt; As an aside, have you been looking at the new ref structs/Span&lt;T&gt; types for Vk? If I can work out some of the use cases (Spans with single items are strangely difficult to create) that would seem a great way to reduce heap churn while marshalling from not-unsafe types. I've given it quite a lot of thought, but never written anything or updated my bindings to leverage them in any way. I think in my ideal bindings, every pair of (uint length, T\* data) parameters or struct fields would turn into a Span&lt;T&gt;. Very light-weight marshalling would take place behind the scenes to turn the Span&lt;T&gt; back into a (uint, T\*) pair. Combined with the new \`stackalloc Span\` stuff, it would make a lot of things significantly easier and more safe, without much overhead.
&gt; But after a quick investigation I found that the default Dictionary that comes with .NET is already pretty optimized A sure sign that one is on the path to true optimization enlightenment is when one regards the standard Dictionary&lt;,&gt; to be pretty inefficient, rather than pretty optimized. It has a few non-trivial inefficiencies (virtual dispatch for IEqualityComparer, redundant equality comparison for both hash value and key, modulo prime indexing - the integer divide can cost **dozens** of cycles!!!!) that can have a big impact in tight loops. You could give https://github.com/benaadams/Ben.TypeDictionary a shot - it's been optimized for the .NET Core JIT rather than the Mono JIT, but it will still probably be better than a stock dictionary. Other than that, it should definitely be possible to build a checkpointed dictionary that can be rolled back (particularly if you're never removing/replacing the original set of values) and otherwise avoid the cost of resetting or double lookups
Just keep on learning, does not matter if you copy/paste as long as you learn something. If you want to learn more, try to identify each method call and understand what it does exactly, so you could replicate the code you just pasted from zero, just from the understanding of the methods. &amp;#x200B; You have a long way to go, just keep on learning, it never stops, and after a few years you will be just fine. After a decade or two, you will be an expert and a master.
It's very complete -- it has just about everything that modern graphics API's expose, including things like tessellation and compute shaders, read-write buffers/textures, multi-threaded submission, cross-platform support (desktop+mobile), VR support, etc. to name a few things. A better list is probably [here](https://mellinoe.github.io/veldrid-docs/articles/intro.html). A number of people and groups are building game engines and other stuff in it, including some folks who have ported over their games from older libraries. Depending on how well you've separated out your rendering layer, it could be easier or harder to port over. Feel free to pop into the gitter channel or post on the GitHub page if you are interested.
Have you got any friends who are C# developers already? Sharing your code with other developers is extremely important for improvement.
Hey there - I was in the pretty much the exact position you are. Not related to Unity, but the whole copy and paste process. To add to it, it was really a side project since my current job isn't really focused on programming as much as it is the technical/clinical aspects of a Healthcare IT job. SO, it boiled down to me taking a step back and coming to terms with the fact that I need to stop running and walk. I've worked with C++ many moons ago, but I was really a newbie for all intent and purpose. I started with two things: I watched this ALL the way through: [LINK] (https://www.youtube.com/watch?v=nRjHGKaJY8M) and wrote out every line of code so it stuck into memory. next, I did the same for this: [LINK](https://www.udemy.com/learn-csharp-by-building-applications/) I'm by no means an expert, and really not even an intermediate programmer, but those two links, along with the code mirroring I did, got me to a point where I could look at a snippet of code from the web/video/friend/docs, and get a far better understanding of what it does, rather than just copying and pasting, and then hitting F5. hope this helps. PS: use this sub as much as you need, or a similar discord channel. you're not alone and if you *learn* to ask your questions correctly, you'll find a new list&lt;string&gt; of answers to help you out. ;) good luck! 
What do you mean not mature enough? What does it not do for you? We have used it in our Enterprise for a LONG time now.
Oh, man. You've asked for a world of hurt. I once worked for Adobe and the (somewhat related) job involved decoding PDF files and figuring out text ordering. The PDF spec is freely available online and it's not too bad, but the issue is that PDF files are a print image representation and data in the file are in the order that the software decided to add them. That can mean the entry fields first then the text fields, and then you have to correlate field and description by x,y coord on the page. &amp;#x200B; C# would do, as would C++, even Python. Any language that can read files. Adobe has software that lets users enter info into fields. They charge money. 
I'd say that you should first of all avoid designs where type names in serialized data are used to construct objects. That's often a giant security hole, in many different languages and runtimes. Unless there's zero chance you'll get this data over the network or from some other source that doesn't have full trust, you might have a fundamental issue with this approach. Second, it is usually a safe bet that a program won't keep on getting data about new types. Usually there's going to be a fixed set of types, and your best bet to avoid allocations is to keep a complete mapping that you create once and use for the whole life of the program. You could still track what's "known" vs discovered in a number of ways, you just wouldn't forget about discovered types after you've seen them once. This would let you have a single dictionary and potentially save a lot of redundant work in other places. I might not fully get your use case, so sorry if these are off-base.
How long would something like that take to create. Mainly by a novice?
Cheat sheets aren't going to cover architecture. A good cheat sheet is designed to help with syntax. I rarely code in Javascript. Javascript was not covered in any of my university courses. This sheet was all I needed to accomplish a simple task. The idea is not one page to learn a course, it is just a reminder about syntax and available calls. How does one get the size of an array? .length, .count, .size ? Capitalization? These types of things are easy to get at a glance from one sheet that I left open on a secondary monitor. 
Look at ByteScout's PDF Extractor library. I use it professionally with very good results.
The grammar from the specification isnt all on one page I can leave up on my second monitor. Syntax doesn't come as naturally to me as others. I understand good coding principle, and I can write algorythms well, but I often trip up on syntax. Maybe it is because I am dyslexic. Many people find cheat sheets helpful. In grade school I used one from my Language Arts textbook!
I wouldn't recommend it for a novice, I've done a project where we just pulled text out of a PDF and I wouldn't recommend a novice try that
I see, you are totally right. I guess I still have a ton to learn! The dictionary you linked seems to be incredible. I'll definitely try it! Implementing some sort of "checkpointing" mechanism in the dictionary directly seems like a good idea as well, I'll try to come up with something like that (or maybe someone else has already implemented something similar that I can get inspired by :) ) 
When I see questions like this, I don't bother answering =\\ That's just a whole new can of worms.
Begin to Code with C# might be good for a reference point. If you have written any other projects in another language, I recommend you re-create that project in C#. Use the book as a reference. If you have never programmed before, go through the book(s) that you have and/or the ones people recommend :) I personally always learn better through trial and error learning new languages and comparing how to make what I already did, work in a new syntax environment :)
Your objections are totally right in the general case. Giving an attacker a way to construct whatever they want is not a good idea. &amp;#x200B; However, even though one of the major use-cases for my serializer is networking, most users will most likely keep \`SealTypesWhenUsingKnownTypes\` at the default (true). That makes it so only the KnownTypes can be used at all. If there's any object that needs to have its type written (because it is contained in an \`object\` variable, or some other base-type), the serializer will throw an exception (also prevents reading new type-names from data). &amp;#x200B; If anyone deliberately sets that setting to false they probably know what they're doing and can somehow trust the data they're receiving. (The dangers of turning it off are mentioned in the XML documentation as well) &amp;#x200B; &amp;#x200B;
Just wondering is there any books you would personally recommend or ones you found helpful when first starting out?
I like having a "pure" functional option for .NET, but I don't find myself using it a lot, unfortunately. I work for a smaller sized company, so adding an F# project on for business logic like I would like raises maintainability concerns. I've tried using it in personal projects, but I usually find myself doing projects with a user interface, and if my WPF backend is C#, why not just do the whole thing in C#? I'd like to use it more frequently, and like I said I love having the option.
You should have a look at iTextSharp: https://github.com/itext/itextsharp I don't know whether it will do what you want, but it will probably be your best bet from C#. Here's some sample code that shows how to read a PDF: https://stackoverflow.com/questions/2550796/reading-pdf-content-with-itextsharp-dll-in-vb-net-or-c-sharp
Just to add to the encouragement. This looks like a great series. 
&gt; For example, it's common in C# to create one file per class. F# is typically organized into modules (ie. static classes) that can contain many type definitions. If you want to shove all of your C# classes into one file, go right ahead. Just don't do it on one of my projects because that makes merging code a lot harder. One file per class is a benefit that F# lacks.
I'm curious what you mean by Kotlin striking a balance. I switched from f# to Kotlin a while back. But never heard a similar sentiment.
Classes are generally heavier weight than other sorts of types, so it makes sense to put them in separate files as they may contain many method implementations. When it comes to record and DU types, however, putting each of them into their own 1-5 line file would make me absolutely mental. If you can fit half a dozen related types on the screen at the same time, it's a readability win in my book.
A year? I'd want a month, maybe two, for myself.
It's useful for novices to get some idea of how big a job software can be. Useful for experienced people too, to justify those wages
* optionals * immutability * closures * coroutines * records * sealed classes to substitute for algebraic data types (could be better obviously) * when-expressions for basic pattern matching (could also be better, no destructuring) * there’s an extensive library of built in higher order functions 
I mean, sure? I did say the languages strike a balance between FP and OO, not that either of them is a functional programming language like Haskell.
As a learning exercise this isnt a bad idea, but if you are looking to make production, enterprise ready code, you should take a step back. As others had said iTextSharp is probably the place to start, but here is an example of reading the contents of a simple text file , as an example [https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/file-system/how-to-read-from-a-text-file](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/file-system/how-to-read-from-a-text-file) &amp;#x200B; &amp;#x200B;
That's an incorrect generalization. A class can vary from a simple DTO without any logic to a multi-thousand line rules engine.
How does sealed classes represent algabraic data types? That's a first for me. 
We currently experience crashes when dragging out Tabs. We recently switched to ReactiveUI and DynamicData for ViewModels and collections and Dragablz seems to have problems with those when you're not using ObservableCollection. Also one of our requirements is to keep order persistant, meaing the order on view needs to be exact the same like the order in the ViewModel. You have some tips how to achieve that? We tried some Behavior based approach, but this didn't work well.
TIL about xy problem, but that's not it i've got a method that serializes and deserializes JSON into objects i'm going to use later, but there are more then one type of objects i need to handle and there may be additional types added through time i was only trying to come up with a generalized way of handling it, instead of adding another set of overloaded methods for each new type...
I think they will delay C# 8 release until Core 3.0 release since C# 8 partially uses runtime types for features like async streams, indexers and range. Other C# 8 features not runtime dependant. More info at [https://blogs.msdn.microsoft.com/dotnet/2018/11/12/building-c-8-0/](https://blogs.msdn.microsoft.com/dotnet/2018/11/12/building-c-8-0/)
&gt; Most of which present a much lower value proposition when building F# code. Nonsense.
&lt;5mins
It's obviously not as elegant as built in support for algebraic data types but you can use them similarly as in the example here: https://kotlinlang.org/docs/reference/sealed-classes.html
Me either. I'll share the downvotes. Basic research FIRST, then make a post. I don't think that's expecting too much.
At least in theory, if you had access to the internals of the dictionary (i.e. by using a modified implementation) I can think of a couple of ways to speed up the reset process: - Store a flag for known types in the hash table entry and do a selective clear. If the known types are always added first this shouldn't be too hard (otherwise the linking between colliding entries would need to be adjusted as well) - Keep a copy of the hash table containing only the known types, and clone its internals into the main hash table. This only works if they have the same capacity, so the first hash table needs to be resized if the second hash table grows - Store a version number in the hash table entries, increment the version number when "clearing" the dictionary, and simply ignore all entries that don't have the current version number or are a known type in the hash table implementation. This would make the "clearing" effectively instant, but would prevent previous entries from being GC'ed until they are either randomly overwritten or the entire array is GC'ed, and somewhat increase the memory footprint of the hash table. No clue what the real world performance of any of these approaches would look like in comparison to the current implementation or simply using two dictionaries, though.
Maybe it would be easier to make an empty list of selsctlistitem, then do a for each on the date items you get from the db. Var list = new List of selectlistitem Foreach date in followupreviewdates Var text = string.empty switch case, text = result Var newdate = new {text, value} List.add newdate I'm on my phone so sorry for the crude psuedocode
I'm also interested in what books or resources you (or someone) would recommend for learning basic/useful computer science. 
There definitely is support for Docker containers in Visual Studio. At least in the recent versions you can, for example, create a ASP.NET core project running in a Docker container. It makes it possible to even debug inside of the container. Perhaps you need to check the options of your VS installation to see if you meet all the requirements. I think there even is an option in the right-click menu on the project item in the solution explorer, relating to docker stuff. I don't know if this answers your specific question, because I don't really understand it. I don't know what 'build a project from a container' means, but you can definitely build a project **to** a container and run it. So there's that.
 [ign1fy](https://www.reddit.com/user/ign1fy), may I ask, do you use a company written obfuscator or use ready-made obfuscator? &amp;#x200B;
You'll need some information about OOP in C#, that can be interesting for you. I learnt C# making console apps, so [this can be useful](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/hello-world-your-first-program) too. If you know some programming already, you can start following Unity3D tutorials.
You say, that locking is expensive in terms of performance. As you can see here =&gt; [http://www.albahari.com/threading/part2.aspx](http://www.albahari.com/threading/part2.aspx) a lock has an overhead of 20ns ... unless you are locking like crazy this shouldn't be a problem. &amp;#x200B; Also isn't it bad practice to use a Task synchronously, they are by design asynchronously 
Why are you creating an xml document? Looks like you can give them what they want by just returning the header element so not sure why you added more than that. If there is some reason for it, you could try converting the Document to a string and then replace the bits they don’t like. 
Error establishing a database connection
there is a lot more to this code. So I am pretty much running a query on an oracle db then creating a xml file with the query results. The beginning of the file needs to have that convention.
This blog is misinforming. As someone already mentioned. A lock take 20ns so there is very little performance hit. You should never use “this” as a lock. use an object and never ever create a lock from a Boolean check. You also shouldn’t be messing with the internals of a lock yourself if you are using locks correctly. A double lock pattern is pretty common as a highly multithreaded app can have two threads make it through a single lock and a second lock is set up to make sure that the critical code is absolutely accessed by a single thread. Sorry on mobile or would give examples. 
Hi, Well, about performance I meant that it can hurt if you're locking a "bottleneck" piece of code. Something that is called many times in a loop, or on each request (say if you have thousands of requests a second). A Task is a unit of work. It's quite alright to run it in a ThreadPool with [Task.Run](https://Task.Run)().
Yeah this post is all wrong about locking. 
This is working so far, I just had to tweak the switch a bit, about to do one last test, then I'll confirm either way. In the meantime, thanks a bunch! :)
The dictionary you linked appears to just use an array until it gets past a certain size. It seems it would always perform slightly worse than a regular dictionary when you have more than 28 items in it. 
Just... remove the `ROI` Element? And rename `headerversion` to `version`.
they need the ROI element. It is part of their scheme. :( But..... yeah renaming headerversion to version.
you sick genius... Omg I was over thinking, Im a dumb dumb. Thank you! that worked!
Solved! thanks guys 
Because arrays are reference types, `buffer` already contains a reference to the array it was assigned, rather than the array, itself. I don't know of an overload to `System.Random.Next()` that takes a byte array, though--you probably mean `NextBytes()`.
buffer is handed to the Next method byValue. But since an array is something like an object, byValue only means the reference was copied but the object the reference points at is still the same. What the Next method can't do, is to change the value of the reference of the buffer-variable.
Depending on where you are, 'That Conference' might be worth looking into.
Yes, I just wrote the code on the fly. I did mean Random.NextBytes();
Removed: Rule 4.
You posted yourself that you do not want the `&lt;ROI&gt;` element, now you say they need it. Wtf
Haha no i do. Just renaming the headerversion to header solved everything. Thanks. I was reading the line the wrong way. My first time dealing with xml. 
The first example with a singleton is wrong, the lock should be on the lock object, not "this". For anyone who needs this sort of singleton have a look at this to see what approach is best for your situation: http://csharpindepth.com/Articles/General/Singleton.aspx
I wasn’t asking for help I was asking for advice?
r/everyfuckingthread Reddit Cliches have been observed by this bot 138143 times. To give feedback or opt out, check out r/EFTBot. Do not send hate to r/everyfuckingthread, I'm not them. What triggered the bot? i wasn’t asking for help i was **asking for a**dvice?
That actually answered my question perfectly. Thanks!
1. Just write code. Write a to-do app. Then work out how to host it with ASP.net . Then cry. 2. As for books, A programmer once shared with me, I'll now share with you: [every book you could ever need.](https://goalkicker.com/)
As a developer once shared with me when I was learning, I now share with you. [Every book you'll need for free.](https://goalkicker.com/)
Try "\r new txt..."
Hi, Thanks for the feedback and tips. I removed the comment about the performance so as not to raise controversy (we can talk about it more privately). Please note that the article has a lot of content, and the performance bit, in the end, is really 1% of the information included. Please take care and note that your comments are inclusive and can prevent people from gaining useful information from the post.
you need to set the cursor position to the beginning of the line and then write again to "overwrite" the line
\\r\*
Thinking on how I'd do a checkpointed dictionary.... I'd start with [DictionarySlim](https://github.com/dotnet/corefxlab/blob/master/src/Microsoft.Experimental.Collections/Microsoft/Collections/Extensions/DictionarySlim.cs), it's a reasonable starting point that addresses the biggest performance flaws with the standard Dictionary (and isn't loaded with a bunch of cruft you don't care about). Then, I'd keep three different buckets arrays. One that's a pristine of the checkpoint - it's never written to. One that's a working copy of the checkpoint array, so the same size as it, and one that's a working copy for larger resizes. When you reset the dictionary to the checkpoint, you Array.Copy the pristine buckets onto the same size working buckets, adjust the count, and that's it - you've restored the buckets array without any rehashing or needing to touch the entries array at all. When you need to resize to a larger buckets array, you can just write the rehashes over the dirty array, without needing to clear/reallocate at all - stale bucket values will just give you some false hash collisions but it doesn't seem like your access patterns would have much slowdown from that.
&gt; As you can see here =&gt; http://www.albahari.com/threading/part2.aspx a lock has an overhead of 20ns ... unless you are locking like crazy this shouldn't be a problem. Keep in mind, that's an *uncontented* lock.
Using /r works good in only one line, but it doesn’t work when you use multiple lines...
Indeed it would appear that way at a high level, but it's following patterns that the JIT (Core CLR's RyuJit, at least) can generate meaningfully more efficient code for.
The very first example uses `lock (this)` which should be strictly avoided. (The code also contains a perfectly good lock object, and should be `lock (_lock)` instead.)
&gt;Using /r works good in only one line, but it doesn’t work when you use multiple lines... I have multiple lines.
I have multiple lines.
Then you have to play with console cursor.
Hi, Thanks for the feedback. The lock(this) is a mistake, as you probably guessed from the private _lock object I added. Fixed now, Thanks The double-check if lock is needed is a good optimization for Singleton, which I didn't include on purpose to better explain locks.
Looked up B. Adams statements on it. Looks like it can avoid generating some branches in cases where they key is a struct, so he is wrapping the type reference in a struct as an optimization. He said .NET core 2.1 can take advantage of this optimization.
Split up your lines into separate statements, and use /r. Or set the cursor position and overwrite (there are multiple functions that do this so take your pick for your need). https://stackoverflow.com/questions/888533/how-can-i-update-the-current-line-in-a-c-sharp-windows-console-app 
Any number of languages should do. E.g. C, C++, Java, C#, Python, etc. If you use a PDF reading/extraction? that will work. You can get the basic information you need to write your own from Adobe's website but it will be a lot of work to get something usable put together. 
What a unhelpful comment, at least give some examples! 
I hope you are kidding if 2 threads can access a lock at the same time, then locks are pointless?
[ImageMagick] (https://www.imagemagick.org/) should be able to handle those. While there is a .NET wrapper for it (Magick.NET), you can just shell to it passing commands to work with images (honestly after doing both I'd probably just process.start it rather than messing with Magick.NET).
This is easier to understand in languages like C that don't abstract pointers. Think of a reference variable like an address written on a piece of paper. That address tells you how to get to a house. So when you pass a reference by value, internally a new piece of paper is found, the address is copied onto it, and that piece of paper is passed into the method. But since all it does is tell the code where to find the array, it's still able to change the array. Thus, any method that takes a reference-type variable can always modify the object that is referenced, whether `ref` or `out` are used. It's polite to use `ref` or `out` when you intend to do so. Though I imagine it wasn't used here "because it's obvious that is the purpose of the method".
So if I understand correctly what you are trying to say, one can replace their code: ``` If NotNull(obj) Then obj.CallMethod() Else ThrowNullException() EndIf ``` with ``` obj.CallMethod() ``` because the compiler guarantees that `obj` isn't null? If that's what you are saying, then yes of course, but that has nothing to do with the compiler not having to "add default null checks" (which it doesn't do).
with \\r it only checks the first line, not all the lines in one.
It wont make a compile error but a runtime will certainly happen 
It sets the cursor to the start of the current line, not the first line of the console. Your snippet can be altered to split out only the text you want to change into a separate line to do this. Regardless, CursorLeft will allow you to place the cursor wherever you like and start writing, but you'll need to zero out all of the trailing characters of the new text is shorter than the previous. Or Console.Clear. https://docs.microsoft.com/en-us/dotnet/api/system.console.clear?view=netframework-4.7.2
If you have influence to the process of generating the image, or just for curiosity, you could search for “image atlas” or “mega texture”. 
Have you tried this: [https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/file-schema/runtime/gcallowverylargeobjects-element](https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/file-schema/runtime/gcallowverylargeobjects-element) &amp;#x200B;
If you are using Visual Studio, I would set a Break-point a the start of this block and step though the code checking every called object for null. The fact that the compiler thows an NullReferece tells you that an object from which you get the data is null, not the value. Or, check the documentations for the methods you use on objects and see if any of those might be null. I don't know how helpful this is for you, I'm on my phone right now so if you still can't figure it out I might be able to help you in an hour or so.
Using a lock can cause a context switch to the kernel which will most likely clear your processors cache. There is a reason a lot of high performance code is lockless.
Also, I just thought of this, if you print the stack trace in the catch you can see the exact line where the exception is thrown, I think...
Sounds like you're a bit confused: F# is strongly statically typed. In fact, it's type system is both *stronger* than C#'s (no implicit conversions, reference types aren't nullable by default, union types...) and *more static* (no dynamic keyword).
Have you tried /n (newline )? /r is return 
&gt; There is a reason a lot of high performance code is lockless. Contended lockless data structure has the same performance penalty as a lock. Also from people who know what they're talking about (read about them at the bottom of the link) [1]: "wait- and lock-free data structures are to be avoided as their failure modes are brutal (livelock is much nastier to debug than deadlock), their effect on complexity and the maintenance burden is significant, and their benefit in terms of performance is usually nil." [1] https://queue.acm.org/detail.cfm?id=1454462
I'm sorry, are trying to make a game with Windows forms?
Yeah , we have to make an app in Windows Forms and I want to make a game, I've made one before , I just want to make sure the base of my project doesn't ruin the rest of it.
Strictly speaking, shouldn't `_instance` be volatile here, due to the `if` outside of a lock?
&gt; F# is on the lower end of this spectrum. Yes, but to be clear, it's still sits way higher than C#. I *suspect* that going from a language with no sum types to one with is a bigger boost to everyday programming than going from one without HKTs to one with.
Why so complicated? Just configure your debugger to break upon the exception.
It doesn't do that when it is cought though
If you really intend to use Winforms, do the rendering yourself, i.e. don't use separate controls. Set the UserPaint, OptimizedDoubleBuffering, and AllPaintingInWndPaint control flags of a control/form and do all the painting in the Paint event.
Thanks. I am building this in Visual Studio, however the code compiles just fine. It's when the DLL it compiles to is in use that the problem occurs. Unfortunately the code has to be called by MS Exchange so there isn't really a good way to attach a debugger that I can think of. I'll try adding a logging statement to the top to record e.MailItem.Message.MessageId as it should never be possible for that to be null and hopefully that will at least tell me what messages are causing this.
I am printing the stack trace in the catch. Unfortunately it only narrows it down to the enclosing function.
You also still have the option to print every line ( just add console.log(LINE_NR) on all lines and then you see the line where the program throws the error :)
Good point, that is exactly what I'd do in Unix shell script which is what I'm usually working in. Sometimes the simplest solutions are the best :)
From [Eric Lippert](https://blogs.msdn.microsoft.com/ericlippert/2011/06/16/atomicity-volatility-and-immutability-are-different-part-three/): &gt; Frankly, **I discourage you from ever making a volatile field**. Volatile fields are a sign that you are doing something downright *crazy*: you're attempting to read and write the same value on two different threads without putting a lock in place. Since writing is controlled by a lock, reading a null value results in waiting for the lock, and reading a non-null value is "safe" from the standpoint that it's a singleton so once initialized it should always return the same instance, it should be fine without `volatile`.
It does when you configure it so. First-chance exceptions.
Ah TIL. But OP said he cannot debug in VS so, yeah...
&gt; A class can vary from a simple DTO Of course, which is why I stuff several related DTO classes into the same C# file.
Take a look at your Step 3 very carefully.....
You can check out what's going on yourself, and the code isn't too complicated. It's just casting an integer into a byte and ensuring the integer isn't over the max byte size by modding it. [https://referencesource.microsoft.com/#mscorlib/system/random.cs,dec894a7e816e665](https://referencesource.microsoft.com/#mscorlib/system/random.cs,dec894a7e816e665) Oh in reading comments it seems you were confused about this being a value type vs a reference type. Well at least now you can see how it's done ;)
I went ahead and made it public, I'll delete it later so it's not just 'out there' [https://github.com/meistaiwan/EBGProcessing](https://github.com/meistaiwan/EBGProcessing)
It's public on a repository now: [https://github.com/meistaiwan/EBGProcessing](https://github.com/meistaiwan/EBGProcessing)
I'm going to fork it in a few minutes.
Thanks for taking a look!
While we're going at it, you've mixed Task usage with a Thread.Sleep. It works, but it's bad to mix them together.
The form/control almost definitely won't be your performance bottleneck in a map style app- it will be how you paint/draw the map contents. 
oh now I got you :D :D 
Thank you for sharing
&gt;image atlas gcAllowVeryLargeObjects - I added it to my app.config but it didn't allow me to create a huge image. The docs only mention huge arrays, so probably not intended for images. Thanks for the suggestion though
[You mean like this?](https://www.youtube.com/watch?v=z8DY5DndmxI) Albahari so a good watch.
&gt; reference types aren't nullable by default That's not true. No only can they be null, you can put nulls in unexpected places. For example, an `Option&lt;string&gt;` may contain... * `null` * `Some(string)` * `Some(null)` This fact, and the lack of implicit conversions, is what caused me to lose interest in F#.
&gt; . Or, I missed it, because after Google Reader collapsed it was a lot harder to follow blogs. Feedly seems to be a decent replacement for Google Reader. NextGen Reader is a good feedly client for Windows users.
Considering that SOLID means whatever the hell the person wants it to mean at that moment, sure.
You can [attach to any process](https://docs.microsoft.com/en-us/visualstudio/debugger/attach-to-running-processes-with-the-visual-studio-debugger?view=vs-2017) using Visual Studio’s debugger, and as long as you include the current PDB along with the DLL in the directory from which it’s being read, you can debug the DLL with breakpoints and all.
yeah, the image is probably failing because some array is getting too big. But very large objects doesn't increase the number of elements allowed in the array (uint32 max) only the total size of the array. Assuming image keeps an array of bytes rather than an array of a color structs, you would be above the element max still :( 
&gt; Yes, there is, but most things such as semi-colons, brackets, etc, are there to make the code more readable (and I also despise indentation based languages). I have to disagree with that claim. They are there to make C compilers easier to write. While I agree that whitespace sensitive languages are a worse design, a new language based on modern language design wouldn't have line terminators or C's excessive use of parenthesis. 
But without volatile, what is to stop the compiler from caching the value of the first read, and decide in the 2nd if that `_instance == null` (just previously read and cached in a register) even though it has been set by another thread in between the 1st if and the lock? So you end up with two instances of the singleton, one of which is gone. Does `lock` block force the compiler to always go to memory for every reference to a memory location within the lock block?
The same should be said of VB. A lot of good stuff in C# wouldn't exist if not for the former's example.
Yes he does. Many FP fanboys, especially those rooting for Haskell, have fallen in love with the idea that everything should be lazy by default.
Lock itself doesn't, but when thread A has the lock and updates the value, this also invalidates the cache. So when thread B was waiting for the lock and eventually acquires it, the cache has been invalidated so it will get the value that A just updated.
 How would it make C compilers easier to write? I've honestly never written any form of a compiler, but as long as you clearly define the rules of what it would mean, what does it matter? Languages like JavaScript and Kotlin do just fine without semi-colons, and even the language we're talking about, F#, doesn't need brackets everywhere and it uses the same compiler [VB.Net](https://VB.Net) does, which also does not use braces nor spacing nor semi colons (unless you're just arguing they could have other semantics). &amp;#x200B; If anything, I feel like it makes it even more complex because of scope. You can have multiple scopes all for the same function, something you can't do with the other languages that don't support it. &amp;#x200B; But again, I've never written a compiler so I may be ignorant about something :)
Is your phrasing inaccurate? You said you need to create a browser...that's a multiyear project that takes a large team...I think a calculator and and equation editor is the least of your problems. In the case that you meant you needed to show an equation editor and a calculator on a web application or website, then the easiest way would be to grab some libraries that do these functions. A full featured calculator and equation editor is not worth creating by yourself unless it is the primary function of your application. Otherwise, if this is homework, then good luck.
I am glad to hear that :) No problem.
You might be to the point where you should look at [Terminal.Gui](https://github.com/migueldeicaza/gui.cs)
JavaScript actually has some weird inconsistencies when it comes to omitting the semi-colons. Unlike VB, it can't always correctly determine when two lines should be treated as a single statement or as two separate statements with an implied semi-colon. But as to you general question, C was created in an era where computers had a tiny amount of memory. So you had to give it as much help as possible. One way was to use line terminators so it always knew where a statement ended without having to backtrack.
That's what I was thinking you meant. I thought there may have been something I missed with object oriented items. But honestly I really only use data classes, and sealed classes. Adding ArrowKt to the mix it gives me a majority of the functional features with great tooling. Then add in the multiplatform support.
Also, u/ericlippert, the link to Joe Duffy's blog from this article is now a host infested with malware. Looks like the correct URL is [http://joeduffyblog.com/2010/12/04/sayonara-volatile/](http://joeduffyblog.com/2010/12/04/sayonara-volatile/)
Yes
An example: &lt;Window x:Class="WindowSample.MainWindow" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Title="WPF Window Sample" Height="350" Width="525" Name="FirstWindow" Icon="Icon1.ico" &gt; &lt;/Window&gt;
Repost: https://old.reddit.com/r/csharp/comments/agvkqy/c_fixing_net_middleage_crisis_with_java/
Why do you feel F# is so bad at OO? I thought it was only missing a few very minor features, like protected access.
How about using Console.Clear() and re-output your multiple lines every time?
Wow, I didn't know I had been missing this in my life until now. I finally understood the chain rule!
Do you have a sample image? I'd like to experiment.
\*Sigh\* No. I'm telling you how your method call get translated into CPU instructions, using psuedocode as an example; in those cases where the compiler cannot guarantee that the object is not null; once the JIT compiler gets done with it. Unless it simply leaves it for a CPU null call interrupt, which would be even slower.
Ready-made. A combination of Sentinel HASP Envelope and SmartAssembly. There's also a guy in the office who writes pre-obfuscated code.
To play well with an ORM, you want to use a Table Per Hierarchy model. Table Per Type can work depending on ORM support, but I've always found TPT to be more trouble than it's worth compared to TPH. Entity-Attribute-Value model is a common way of storing varying attributes. ORM support for modelling EAV as a more standard, column-based entity is pretty much non-existent, though EAV is fairly straightforward and usually not too difficult to work with - especially if these are little more than displayed attributes and not needed for aggregate querying (even then, it's not too bad to drop into SQL for EAV queries). Document based features are also common in major database engines these days. You can have a column that itself is a schema-less or dynamic schema document. ORM support for this is even more non-existent than EAV.
Wait, if it's open source, why not just post the source instead of taking the conversation offline through DMs? Open source discussions happen asynchronously and in full view via wikis, issues, pull requests, and comments. I'd try to setup that infrastructure first if you want to solicit community feedback and contributions
Ok, this is what you're getting wrong: the C# compiler can never guarantee to the JIT compiler that a reference is not null. It's very easy to handcraft IL code with incorrect annotations (or even using C#, make a non-nullable reference null), which is why the JIT compiler can't and won't rely on them. And the JIT compiler will **always** have a null check when dereferencing a pointer.
&gt; two threads make it through a single lock Please explain? 
I've watched it once and it's not my domain really, but he seemed to do a great job and I could follow. Glad you found it helpful.
Does swift have some sort of do-notation or computation expression to simplify monadic code? Even C# has that in the form of LINQ query syntax.
Are you compiling for x64? 
Let me see if I can release it. Some are still under investigation. &amp;#x200B;
yes
Ok, you got me. Reference types are technically nullable to maintain compatibility with .Net, but the language itself does everything it can *within the language* to enforce non-nullability. In particular, you should never worry about an `Option&lt;T&gt;` being null because: * you can't treat `null` as an `Option&lt;T&gt;` in F# code without invoking black magic * C# libraries you may be using don't know about `Option&lt;T&gt;` * authors of F# libraries that would give you a `null` `Option&lt;T&gt;` would be drawn and quartered
Not entirely true. Here it's the only way as you can't await inside a lock.
[https://we.tl/t-yiv9o5dpFW](https://we.tl/t-yiv9o5dpFW) It's a jpg of a stretch of highway. Usually it's of an accident. This one looks like test data. Have fun and thanks! :)
I'm actually interested in this problem as well. Keep us posted on progress!
&gt; but the language itself does everything it can within the language to enforce non-nullability No it's not. I again refer you to `Some(null)` as proof that they could have done more. Beyond that it could have represented all reference types as `Option&lt;T&gt;` unless proven to be non-null. (Which is essentially what C# 8 is doing.) When it comes to nulls, F# is a kludge. It didn't have to be, but that's what they gave us.
I've never been asked anything super language specific. The emphasis is usually leetcode-style problems, atleast for tech companies in NYC.
Design patterns 
It depends. A lot of interviewers take the easy way out and Google “c# interview questions”. You can find these too. I would start with these. You’d be surprised how many times you’ll be asked about interfaces vs abstract classes. Or some will hammer on syntax or on knowing SOLID inside and out. The overall problem is, the uses for C# are so many it’s possible to not use a lot of the language, especially if you specialize in one area. Unless you know someone who’s interviewed where you’re looking, it’s a crapshoot.
Of technical questions I would think you would get more questions about the dotnet platform more than the language C# itself. Like do you know the different data types available in the library and how to implement a variety of design patterns. When developing in C# it's also often very close connected to user interfaces so knowledge of WPF, WinForms, MVC and their implementation would be useful, dependant on what they use at the place you interview at. I personally had not used C# before I got my first job with dotnet. I had only used VB.Net that I could easily translate to C# with short practice.
You need to use p/Invoke... something along the lines of [https://www.reddit.com/r/dotnetcore/comments/8ukl9x/maclinux\_equivalent\_of\_kernel32dll/](https://www.reddit.com/r/dotnetcore/comments/8ukl9x/maclinux_equivalent_of_kernel32dll/) &amp;#x200B; C# doesn't have any better access to the console than the Console object so you'll have to resort to c++ system libs. This doesn't translate well to .net core, but it's still the same basic idea except this class is replaced with a platform specific class for each platform. &amp;#x200B;
Design patterns, collections, generics, LINQ, tasks and parallelism, REST, MVVM, and MVC.
Design patterns, definitely! Knowing how easy singleton is to integrate when using a container with DI ;) Make sure you're confident with OOP, SOLID, n-tier architecture. Testing, mocking data. Don't neglect LINQ either! Manipulating data whether you're calling stored procedures with Dapper or using a full-blown ORM like Entity Framework, it's super handy being strong with LINQ. However don't have much experience with interviews, so just some of my own thoughts on what I'd like from a developer colleague.
In regards to design patterns and collection, it’s not only just knowing how to use them, but when they are appropriate. 
And then the tools, EF, ninject, automapper etc. (and/or their current replacements)
&gt; you’ll be asked about interfaces vs abstract classes. Every. Goddamned. Interview. What's worse is that a ton of these questions don't have anything to do with anything I've ever had to write. Granted, I've found myself in a weird little niche where 99% of my work is pulling apart overly-complicated XMLs that are supposedly standardized (but with a non-standard definition for "standardized"). This means I'm stuck in XmlDocument with Linq world, with the occasional need to build helper functions for common things (checking for Element (erm.. node) existence, some File System access, and accessing middleware for handling of the object outputs (csv, less-complicated xml, database insertion, etc). 
Woah! Extremely ambitious series that I'm eager to read and code along!
Be able to write various syntax-valid sorts on a whiteboard with a whiteboard market. Sure - This is a completely useless skill.... But it's something you often need in an interview.
I don't understand how the change in solution #1, Transfer() prevents the deadlock. If the first call of Transfer is Transfer(acc1, acc2, 500) and the second is Transfer(acc2, acc1, 600), how is the first lock always going to be the same? In the first call, lock 1 would be acc1 because [acc1.id](https://acc1.id) &lt; [acc2.id](https://acc2.id). In the second lock, [acc1.id](https://acc1.id) is &gt; [acc2.id](https://acc2.id), since acc2 was passed as the acc1 parameter. This would be the exact same as the unchanged Transfer (with deadlock) method, wouldn't it? &amp;#x200B; Also, if the first lock is always the same, this example wouldn't be the greatest because you wouldn't always lock the same "account" when transferring. You would lock the account you are withdrawing from first.
Add unit testing, but in the context of dependency injection and inversion if control. And if you are going to deep dive, SOLID and DRY, cyclomatic complexity and devoos pipelines for delivery. That should keep you busy for five or so years.
If you want to get all nitty gritty, there is a difference in performance for lock statements depending on the locked objects object header. Under certain conditions a thin lock can be used to synchronise access, and once this no longer suffices the lock is converted to an actual os lock structure. If you want to read up on the details I recommend reading https://blogs.msdn.microsoft.com/seteplia/2017/09/06/managed-object-internals-part-2-object-header-layout-and-the-cost-of-locking/
first, to answer your overload problem, the call is ambiguous because both methods have the same required signature (string, string, bool) and only differ on optional parameters. the compiler has no idea which one you intend to use. second, i think you need to clearly define requirements here. there's no shame in asking for clarification. in fact, it's foolish not to. third, I can't help but wonder why this method even exists when string.Equals replaces literally all of this, and comes with the language itself, lol
For whatever it's worth, I'm a development director (team of ~50). There are a couple of interview questions our programmers get which I think are silly. And interestingly enough you're free to use Google/so, but to date not a single candidate has asked if they can. Some of the questions really build on each other so if you (as an example) don't remember on memory how to put a comma delimited list of strings into an array, you're not getting past step 1. I'm a pretty good developer (even though I'm in management now) and can do parallel)async stuff. But sure, I forget string.split . We need standards, but every developer not lying can tell you they've forgotten something obvious, probably within the last week or day.
Learn the C# spec here https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/. It has everything to learn listed on the left pane. Take it one bite at a time. Look at examples and practice. 
That would be a relevant answer if my original post were not a reply on the subject of the new "nullable references" feature, which (theoretically) can enable the compiler to know whether or not an object is null.
Man, unit testing is where I'm most weak. I have *no idea* where to even begin with that on either my WPF app or my ASP.NET Core app. Unit Testing and MVVM are my main two largest weaknesses right now but finding anything practical that teaches those is... brutal.
This guy fucks!
It might surprise you how many people can't answer that or even simpler questions. Even people who claim to have 5+ years experience in C#.
I would focus on more intermediate concepts like SOLID, DI, OO, REST API, unit and integration testing, and design patterns moving from junior to mid level. Knowing I can hand a job to an intermediate dev who will use DI and unit test stuff is a big step. It means you can probably work effectively on your own for a few days or a week without much hand holding or check-ins helps a lot. They're not as language specific topics, but very important for handing a mid level engineer a problem where they can do intermediate design work and work outside just adding methods to existing classes. Once you have a handle on these topics you can make easier transitions to other languages as well. You might also want to get good with a few common nuget packages. Newtonsoft.JSON (I guess inside .Net now, but often important), xUnit, Moq, or whatever your company's favorite solutions are. Understanding of some other styles like fluent, good understanding of Task, Func, and Action types, when and how to use them to make code more reusable and abstract which starts to expose you to functional programming ideas. RDBMS optimization can become a nice side track. Normalization and design, awareness of ACID principle, update anomalies, indexing, specifics of index types and some gut feel for execution paths your SQL server will likely choose at run time, how to analyze execution/explain plans, etc. SQL/RDBMS is just very common, though not completely ubiquitous, so it can be important knowledge and experience. Or later into the concepts of eventing, messaging, queues, parallelization and concurrency. Build some understanding of distributed systems. 
&gt;if (actualValue == expectedValue) You have to use String.Equals. The comparison above only compares the references and not the actual values.
RemindMe! 4 days
I will be messaging you on [**2019-01-22 03:19:24 UTC**](http://www.wolframalpha.com/input/?i=2019-01-22 03:19:24 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/csharp/comments/ah42u8/i_feel_like_i_have_a_good_grasp_with_c_in_the/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/csharp/comments/ah42u8/i_feel_like_i_have_a_good_grasp_with_c_in_the/]%0A%0ARemindMe! 4 days) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Start with learning to write testable code. Then add tests. Otherwise, you'll be pushing on the pull door.
I would add concurrency.
IMHO to "Nail" an interview: * If you don't know something, admit you dont. Then ask them to explain it. * Demonstrate that you've learned a lot and continue to learn The .Net framework is HUGE. Additionally the advances in the language are pretty significant over the past few years. 
With the exception of LINQ, none of these mentioned are c# specific. Those are all architectural/design patterns. 
(Not true in C#)[https://coding.abel.nu/2014/09/net-and-equals/]
Thanks for giving me a lot of good info! Would the performance be acceptable using document storage on 1 M person's * 20 attributes for query/filtering persons?
Probably - 1M rows isn't really that much - but I haven't used Doc DB features in relational DB's much, and tend not to use specific Doc DB engines much either. I also should've mentioned that TPT/TPH works if you can define your attributes before hand, during development, but isn't usually viable if you allow customers to define their own attributes.
Test Driven Development. When done right you have air tight code that you can refractor with impunity 
Test driven development is actually a lot easier than it seems. The trick is to write very small amounts of code at a time. Let’s say you want to write a class that parses a string containing one phone number per line and returns a list of phone numbers in a consistent format. You start by writing the simplest possible failing test - assert that an input with one line will return one phone number. This immediately fails, right? You haven’t even started writing the parsing code. So go to your parser and write some code to split by new lines and build a list of phone numbers, one per line. Test passes! Next add a new assertion to the test to assert that the number is correct. Test fails. So write a parser for that number format. Then just repeat this loop. It’s a game of leap frog. If you have a failing test, write just enough code to pass. If you have no failing tests, write just enough code to get one to fail. The novice mistake is to write too much of either at once.
Good gravy man, consider using String.Equals or String.Compare. Both can specify a comparison type (ignore case, culture) and will accept nulls without throwing an exception. At least refactor to a point where you don't have 5 parameters 
Question everything. You know the syntax now but learn how and why does it work that way. For example what's under the hood of the List&lt;T&gt; class? It's essentially an array right? But if an arrays size cannot change once instantiated how can the lists size change without having to declare a new instance of it? Doing this will give you a better understanding of the language and make you a better programmer as a whole. Design patterns for sure. Concepts. Not only knowing them but also knowing how they are applied. Like "are you familiar with the SOLID principals? Can you give me an example of how you would implement the single responsibility?" or "what's the difference between functional and imperative programming and how do you decide when to use each one?". Learn how to whiteboard an API design. I've conducted several software engineer interviews and I look for a mindset rather than a skill set. Any monkey can learn syntax. 
Solid reference
&gt; It’s a hell of a lot better at FP than F# is at OO. But F# is the same at OO as C# except `protected` keyword. Like literally everything else is there, inheritance, abstract classes, interfaces, multiple constructors, auto-properties and much more lile object expressions, primary constructors etc.
I highly doubt there is any roadmap on this. There will first need to be a need for it on a multiplatform environment. I'd guestimate, if Microsoft doesn't make any changes to the current path, that they'd consider a CRM support structure like that in 2+ years. And even there it may not be road mapped.
There is no special syntax, you just use `map`, `flatMap` and friends.
And none of it is cleanly integrated with the FP core of the language
Assuming you know programming concepts and just looking for c# advice. I can tell someones experience right away with how well they know system.collection.generic. know them all and how to use them. LINQ is great so it's a bonus if they use it in interview questions but there are reasons you wouldn't know LINQ.
I feel like he's asking what he needs to know about c# to nail an interview. Also there's a thing about people who over design code, we often ask the question "what design patterns do you hate?" in interviews, I'm in games though. It's good to know it's just not a interview trump card is all. 
Just want to add a lot of developers hate Singletons. Make sure you using it correctly.
Since it's a Console App, you'll find it easier to just make a printscreen method, and rewrite everything, or use the setcursor command to write changes as needed. Think my github has examples of both somewhere... I suggest using a GUI for updating your screen smoothly with colors, or anything fancier than top down work.
Thanks for the info. So I guess we won’t be expecting it for quite a while.
One of my interview questions was this: "What is time complexity of the Dictionary class and why?" If you can answer/discuss that question you know both computer science theory and a good bit about .NET.
Just go do an interview or three. Failing an interview costs you nothing. And you will quickly get a feel for the things they are looking for. 
I was thinking something like this: Task.Delay(TimeSpan.FromSeconds(2)).Wait(); It just discourages the use of ```Thread``` in code that uses ```Task``` 
IMHO unit testing is hard for people to grok. Ive been teaching it to a junior for 6 months and they still need to learn the finer details of TDD. Sure its simple in theory, but applying it to an enterprise system is a shift in thinking.
It’s overloaded for strings. But it’s a bit complicated in C# with all the different equalities. 
I recommend the YellowBook by Rob as a free easy introduction into C#. Head First makes it fun to learn, but I'm going to throw out my University's book as a good resource. *Microsoft Visual C# 2012 an introduction to object oriented programming by joyce farrell* Provides a pretty solid introduction, quizzes, challenges, and projects to cover all the basics in C#.
And the garbage collection system. Many questions about the GC. 
This accomplishes exactly the same as a sleep, while being more expensive. If Thread.Sleep shouldn’t be used, neither should Wait. 
&gt; A lock take 20ns If no one else is holding it and the sync block for the object is simple. 
Good grief I foobarred that. You're right. I must have mixed it up with another language.
Are you able to use examples from http://colorfulconsole.com
It looks like you are using [String Interpolated](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated) incorrectly. I'm also going to say, it probably works better to keep with the expected format. 'Console.Write( *message*, *color* );'
Seriously as a software tester the revelations about unit-testing in this thread are horrifying me. First of all - if you can't write a unit test for your code without using DI and/or mock-objects - there is a high chance that your code is tight coupled and in dire need of refactoring. Remember that every mock that you are using drags you tests farther and farther in the fairytale world that is barely connected with how your real application is working. Second. You always write your tests based on the given software requirements. I understand that outside of the world of safety-critical systems requirements are always lacking, but they are never absent. Main source of them are usually tasks in JIRA, but they can also be in the heads of analysts or lead programmers or software testers or even users, also in meeting protocols or in the industry standards and what sucks - they often contradict each-other. When you starting to write your code - you usually only have some vague description of your task, and you can't possibly know how it affects the whole system and what questions you should find answers for before concluding that you made it right. But that's what unit tests are for! I tell you from a software tester perspective unit tests are almost useless for asserting an application' quality but they are good for programmers as a form of self-control. For that unit tests should be written with some method in mind - you can't just squeeze some test cases from your task description, made your code passing them and call it a day. First of all you should determine the critical level of your code. By the book it should be determined by a customer, but because you write your tests for self-control you can deduce it yourself. Let's say there are three critical levels from A to C. C - is the lowest of them. If you let a bug slip in there and it would be found in production environment - you would be scolded at most. For a bug in level B code you would lost some of your salary. If you fuck up in level A you would be fired. In avionics these levels are described like that (but stakes are much higher there): * C - Major – Failure is significant, but has a lesser impact than a Hazardous failure (for example, leads to passenger discomfort rather than injuries) or significantly increases crew workload (safety related) * B - Hazardous – Failure has a large negative impact on safety or performance, or reduces the ability of the crew to operate the aircraft due to physical distress or a higher workload, or causes serious or fatal injuries among the passengers. (Safety-significant) * A - Catastrophic – Failure may cause a crash. Error or loss of critical function required to safely fly and land aircraft. By a critical level you can determine what code coverage algorithm you should keep in mind when writing your tests: * C - Statement Coverage (SC) * B - Decision Coverage (DC) * A - Modified Condition/Decision Coverage (MC/DC) Let's say we have a function with the following body: [statements] if (A &amp; B) { [statements] } [statements] To completely cover it by SC - every statement in the function must be executed at least once. So we should write only one test-case: * A = true, B = true. This coverage is usually inadvertently used by the most of programmers who try to write unit-tests. But you would do yourself a huge favour by choosing one of the next. To cover it by DC, all decisions in the function should take all possible outcomes. The "decision" here refers to boolean expression (A &amp; B) - the decisions are everywhere in code: if-then-(else) statements, case and switch statements, loops, even a value of every catch in try block can be viewed as decision. A boolean expression can take only two possible outcomes - true or false. So two test cases would be enough: * A = true, B = true; * A = true, B = false. Notice that I changed only one input in the decision. It's must be done when covering code by MC/DC, but it's a good practice to always write your tests like that so every test would have another that is different only by one input (Pairwise Testing). For MC/DC coverage all decisions in the function should take all possible outcomes, and every condition in these decisions should take all possible outcomes while visibly affecting the decision outcome. The conditions there refer to sub-expressions (A, B) of the decision i.e. the boolean expression (A &amp; B). Therefore (A &amp; B) should take true and false values, A should take true and false values and B should take true and false values: * A = true, B = true; * A = true, B = false; * A = false, B = true. Notice that 2nd and 3rd test-cases are paired with the first - it's like we are taking the decision and flipping a switch on the first input, and then on the second, by that we are showing that each condition is affecting the decision outcome independently. Also notice that the following test-case is useless for MC/DC coverage: * A = false, B = false. Logical AND is like a multiplication - if one of its multipliers is 0 than values of the others are irrelevant. In software testing it's called "masking". If you set B to 0 and then start changing the A input - it wouldn't affect the decision outcome. Of course I can't describe all software testing theory in one post, and even if I can - my language barrier wouldn't let me. My point is - you shouldn't take the software testing lightly. There much to learn and you should at least read "Software Testing Foundations" by Andreas Spillner - it would improve the quality of your unit-tests and by that would improve your code. 
i'm in a bit of a similar boat. i'm not yet at the point where i know everything about c#, but there was challenge for me to create multi dimensional arrays from 1 to 9 and make it as tic tac toe game. i was struggling to find solution to it. but after i did watch how to solve it, it wasn't that hard. my thing at the moment i don't get how to implement stuff what i know now. so i just keep trying to do more stuff so at the end i can do it myself..
I assume you mean Dynamics CRM? There are essentially two driving factors of moving to .NET Core: * it could theoretically open up multiple platforms. However, Dynamics CRM itself to my knowledge is Windows-only anyway, so this doesn't really apply. * some runtime features that .NET Core already has aren't planned for .NET Framework. This already has performance implications, and in C# 8 means some major new features are missing altogether. So the latter applies, but there's probably a _lot_ of legacy dependencies to work out. I'm guessing you'll eventually see, similar to WinForms/WPF, some Windows-specific wrapper to make Dynamics CRM work in .NET Core. I'm guessing you will _not_ see the SDK actually working on other platforms.
goddamned algorithms, even if you never will need one.
From ["The Early History of F# "](https://fsharp.org/history/): &gt;The author summarizes this today by stating that “F# embraces ‘object’ programming and de-emphasizes ‘object-*oriented*’ programming, especially implementation inheritance”.42 For example, the “protected” accessibility modifier is not supported even to this day in F#, since it is perceived to encourage implementation inheritance. &amp;#x200B;
Obviously, based on his comment, he is not very familiar with F#, he makes false claims and thus the comment is not very objective.
When I interview candidates, I always ask them about how garbage collection works. Most of them are clueless about it, unfortunately. I wouldn't say you need to master it, but you should have at least a sense of how it works! 
OOP For example, creating the Model class, the dal (dao or repo) class, service class (creating a service class, a web service is trivial), interface (when and I we should use it and when don't!), the factory class (it is more a factory method) and you are ready to go. Let's say the next phrase **"Don't put the application logic inside the controller class."** * If you understand and you don't do that, then you are over the average (but you are not expert) * If you understand it but you put your logic anyways, then you are the average. * If you don't understand it, then you are John Snow. Coding is easy, to know how, when and where to put the code is not trivial. 
I think F# tries to bring some extremely valuable functional features to an approachable general-use programming language. Functional features like Curry-Howard isomorphism (in layman's terms that is matematically proovable code if written with proper algebraic data-types) and Hindley-Milner type system. From a programmer's perspective, this is really a HUGE productivity benefit - and only a handful of languages provide that. The benefits of these features are (in my personal opinion after writing F# for several years) that writing code in F#'s functional style turns to be about 2-3 times more productive than C#. By productive I mean amount of functionality delivered in given amount of time. This productivity difference is mostly due to more errors being detected in compile time (i.e. less time spent on debugging or writing tests) and much easier refactoring (smaller number of lines of code is not that important, although welcomed). However you'd only notice this after a while and the effect tends to be more profound on larger projects. Unfortunately, the price you have to pay for that is that Hindley-Milner type-system is by definition not compatible with parametric isomorphism as known in OOP languages like C#, so from the distance it often feels that functional and OOP code in F# don't work together as nicely. At points where you call into OOP code from F#, you lose some of the safety of Curry-Howard/Hindley-Milner and make the code a bit more open to bugs (albeit in practice still much safer than C#). So you tend to write 90% of functional code and use OOP only when really necessary. There are some mentions of Kotlin, Scala, Swift, etc in this thread. As far as I know, none of these languages support any of the Curry-Howard/Hindley-Milner stuff. They do support Algebraic types (albeit in a bit more clumsy syntax compared to F#/Haskell/Ocaml/...). But in the land of F#, algebraic types are only a stepping stones needed to get to CH/HM which is what the language is all about. If on the other side, you enjoy your OOP programming style and feel that OOP is the right tool for any problem, then you'd probably be better off with C#.
&gt; MVVM Why? Enterprise programming is mostly web and, when we need to do an executable, then it is usually a script/ console/ service to do an ETL or something like that. 
its impossible to say without seeing how many resources each application takes up and what the state of the machine is in (how much of the cpu is being used? How much of the memory? etc)
From working with IIS for a while what I've seen is: * Apps from different pools can interfere with each other: if you check the worker processes of IIS it can take all the RAM of your server and basically slow down all your environment affecting, of course, others sites as well. So if you have a lot of different web sites, that each use a bit of resources you could end up depleting those resources. * Apps from different pools have each their own number of tasks available: this mean that eahc site has it's tasks and having multiple sites does not diminish the number of total available tasks that you can have Hope that helps.
As I've written in another comment, the big thing that F# brings to the table are Hindley-Milner type system and Curry-Howard correspondence. These are not part of Kotlin. Unfortunately these features are not compatible with parametric polymorphism of OOP languages, so at the border of these two programming styles, you pay a small price of having to be somewhat more explicit and that things don't quite feel very nice. There's not much that can be done about that -- it is impossible to create a programming language that supports both of these disjunctive models. I personally think the trade-off made by F# in this regard is acceptable (especially when taking into consideration that a proper solution to this problem doesn't really exist so either you're locked into just a single paradigm like in Haskell, or you have to cope with annoyances like F#, or you loose these features altogether like Kotlin).
Can you explain what the practical benefits of CH are? Also, does HM add any other benefit than type inference? Because Swift and Kotlin go pretty far with type inference already, obviously not as far as HM types but then again you do get things like function overloading which imo is *way more useful* because it allows you to actually cleanly name your functions, good naming being literally the most important thing in software engineering in my opinion.
In our company, we run many web apps on "one" server. The Server itself is managed by a hosting company. There we have Hyper-V machines (Web, Database) the Hypervisor is replicated if there is a hardware failure the standby server takes the load. &amp;#x200B; Our web-apps compose of three projects: \- [ASP.Net](https://ASP.Net) Core MVC \- [ASP.NEt](https://ASP.NEt) Web-Forms \- ASMX WebServices \- [Asp.NET](https://Asp.NET) MVC5 \- [Asp.NET](https://Asp.NET) WebApi2 &amp;#x200B; Statistics: \- 60 sites \- 128 application pools \- CPU: Xeon E5-2650 v4 (\~ 20-30% utilization) \- Ram: 60 GB (\~ 80% utilization) &amp;#x200B; But like always: It depends. &amp;#x200B; &amp;#x200B;
It all depends on websites themselves. Compare 30 small static sites vs 30 CRUD sites with heavy load. The best way to know for sure is to deploy these apps on test environment to monitor the system resources consumption and sites performance.
I'd say SharpDX would have far less overhead, the author used some very advanced techniques to cut that overhead down as much as possible.
I found [the art of unit testing](https://www.oreilly.com/library/view/the-art-of/9781617290893/) very help full learning unit testing. The key idea here is write maintainable code and code is easily maintainable when it's de-coupled. After that you should give glance to [Growing Object-Oriented Software, Guided by Tests](https://www.amazon.ca/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627) that should help you. You can also find some good courses at [https://www.pluralsight.com/search?q=TDD](https://www.pluralsight.com/search?q=TDD) . The key is to invest in the skills for next one month or so and rip rewards after wards. &amp;#x200B;
First you are probably far more prepared for an interview than you think. I've been where you are, and it is easy to feel that way but you just need to have confidence in your abilities. Talking about your programming skills in itself is a skill, and until you start interviewing you won't get better at it. Going through actual or mock interviews is the only real way to improve that skill. Other than that all you really need to do is admit when you don't know something, show you care about clean code, and at least a basic understanding of the SOLID principles. 
That is a horrible question to ask. 
You would be surprised how many people don't know the difference between an interface and an abstract class
With the new platform intrinsics maybe you could: [https://mijailovic.net/2018/06/06/sha256-armv8/](https://mijailovic.net/2018/06/06/sha256-armv8/) &amp;#x200B;
I have had over 70 sites on one IIS server before with no issues. It depends on the server specs and how demanding the apps are. If many have very low traffic then they won’t cause much of a performance hit.
Taking the ViewModel and Model and putting them in a different project (or vice versa) doesn't mean it's not still MVVM. The biggest learning there is the responsibilities of each "component" so that you can write clear, concise code that is easily testable.
You may easily know the differences, but it's an incredibly good level-setting question. 
Related, many interviews I've been to in the IT/Games industry always come up with some silly algorithm exercise that is the worst way to test people. Like "You have 5 minutes to write a program that writes all possible plays in a game of connect 4, with one player switching to a 3rd colour every 5th play". &amp;#x200B; If the candidate achieves that it's impressive, but does fuck all to test the other 99% of skills used in the job and ends up throwing out very good developers.
Can't you use decimal? [http://csharpindepth.com/Articles/General/Decimal.aspx](http://csharpindepth.com/Articles/General/Decimal.aspx)
Correct!
Do you have a source for this?