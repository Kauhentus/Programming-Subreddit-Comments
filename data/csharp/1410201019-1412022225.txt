I see you wrote this article. I do like this but for making an actual console application with commands and such, this is a nice way to lay it out. I have one I wrote that I am not too fond of how I have it written, so I might actually refactor it to something very similar. When I am testing, the main function simply spits out whatever I am testing, lol
Yup, that's better than the recursion I have in there. I knew I was missing something really rudimentary. Of course, I program - therefore I can complicate the shit out of a ball-bearing ...
Like the original commenter I don't know if the c# compiler understands this form of recursion but my assumption is this would fail as a long running process as it would continually balloon in memory but not fit the definition of memory leak, IIRC.
Yup, I think so too, now. Re-working this as we speak....
FWIW I have the same sort of setup but for WPF applications. Just has a basic setup for mvvm and I setup a default background worker to submit work to and a timer that does dispatching to the background workers. Similar to what you've got going on but for MVVM WPF applications.
I don't have any experiences with Xamarin to develop 'big' projects, but for some small projects, it really works very well, and the memory usage is ok.
Ok, so there are multiple way to achieve your goal, the real question here is what have you learned so far in your class. Because the shortest and easiest way to get the result would be something like this: List&lt;int&gt; numberList = new List&lt;int&gt;() { number1, number2, number3, number4, number5 }; int max = numberList.Max(); Console.WriteLine("Greater : {0}", max); Or even a shorter way, yet more complicated: Console.WriteLine("Greater : {0}", new [] { number1, number2, number3, number4, number5 }.Max()); But if you've never used list and this homework is to practice something like if and else then you should probably stick to a "more complicated" way like you were doing. As to why your code isn't working consistently, seeing only this part of the code I don't see no huge mistake but maybe doing something like using &gt;= and &lt;= would change the result when using equal values. Also instead of if{...} { Console.WriteLine(...); } if{...} { Console.WriteLine(...); } if{...} { Console.WriteLine(...); } You should be doing something like this: if{...} { Console.WriteLine(...); } else if{...} { Console.WriteLine(...); } else if{...} { Console.WriteLine(...); } else if{...} { Console.WriteLine(...); } To prevent writing duplicate message (when having same values as input)
Do you have any recommendations that don't require lists? We haven't learned them yet :/
Is there a site where I can upload my code in its entirety, to give you a better idea of how it works? Github? 
As other have stated there are a lot of ways to find this answer, but some are more verbose than others. Without using lists, I might use this method; // Set starting value to be the lowest int value possible int highestNumber = int.MinValue; if (number1 &gt; highestNumber) highestNumber = number1; if (number2 &gt; highestNumber) highestNumber = number2; if (number3 &gt; highestNumber) highestNumber = number3; if (number4 &gt; highestNumber) highestNumber = number4; if (number5 &gt; highestNumber) highestNumber = number5; Console.WriteLine("Highest Number = " + highestNumber); You can use the same idea with finding the lowest number too. Hope this helps :) Good luck!
&gt; We haven't learned them yet Does that mean you aren't allowed to use them? Or do you not want to use them because your instructor hasn't mentioned them yet?
You can use a github gist https://gist.github.com If you can't use linq then you will have to loop through your array at least one time (especially if your array is unsorted) a simple for loop will do. O(N) is as fast as linq int? maxVal = null int index = -1; for (int i = 0; i &lt; anArray.Length; i++) { int thisNum = anArray[i]; if (!maxVal.HasValue || thisNum &gt; maxVal.Value) { maxVal = thisNum; index = i; } } 
On my mobile, so short response. The usual answer is COM. Alternatively, you could try running a clr host directly, but this a lot of work. 
Microsoft provides a technology called C++/CLI which allows the use of the managed runtime in a C++ dialect. Using some acrobatics, you can call managed code from native C++. All that would be left would be to wrap your native C++ in a C API. Some marshalling of certain data types would be required, though.
Not what he wants. It is exactly this http://msdn.microsoft.com/en-us/magazine/cc163567.aspx 
You need to host the CLR via COM in your native code Here is a great article on it http://msdn.microsoft.com/en-us/magazine/cc163567.aspx You can call methods etc, but you had better get used to the intricacies of COM and safearrays, etc. I'm sure if you do enough web searching on any of those interfaces you'll find working code samples that get you going. 
Well, it seems by the hosting interfaces defined you can only execute methods that are defined as static int M(string arg).. which doesn't help much.
Sure it does. Expose static methods that interact with your managed code. Eg. class NativeInterop { public static object IAmCalledFromNativeCode() { return new SomeManagedCodeObject(); } } Iirc the returned object is IDispatch and you can just call Invoke on it to your hearts intent. 
Sorry for formatting. On mobile. 
You can't modify the C# code but you can always write your own C# code that accesses your outside code. Write this in the style suggested by the other guy. But I feel like it's easier to do it my way. We've done it in my shop for C++. The extra step to C shouldn't be too much harder. 
For reference, here is my code: https://gist.github.com/anonymous/b85d2ff8ae5583f5e9b9
Two ways: [DllExport ](https://sites.google.com/site/robertgiesecke/)(managed exports) or COM. Knowing COM a fair bit, I'd **always** pick it, as COM is tailor-made integration technology for cross-language interoperability (among other things). If you will, it's a "pro" way of doing things. I suspect, however, that COM is not your cup of tea, so DllExport might be easier for you. It requires knowing .NET marshalling for all but simplest things though.
Yes you can. You just need to think of this in two ways 1 - you want to write wrapper functions to return Objects. C/C++ and COM do not know what System.String is. It is an IDispatch object. So you'll need to call into the static method to get System.String, then call GetIdsOfNames to get the 'Concat' method name, and call IDispatch-&gt;Invoke(id, blah blah blah) Take this managed code for example class NativeInterop { private NativeInterop _Instance = new NativeInterop(); private SomeRandomObjectICannotModify stuff; public object GetInstance() { return _Instance; } public NativeInterop() { stuff = new SomeRandomObjectICannotModify(); } public static void DoStuff() { stuff.DoStuff(); } public static object CreateType(string type) { // some fancy C# stuff to create a type based off a string return type; } } I can load the CLR, create an instance of the NativeInterop type, call IUnknown-&gt;QueryInteface(__uuidof(IDispatch)), then call IDispatch-&gt;GetIdsOfNames("get_Instance"), then IDispatch-&gt;Invoke(id, blah blah blah) -&gt; this will call the get_Instance member (I now have a Singleton holding state of my code) and then get rinse, watch and repeat when you call instances CreateType. Alternately you can use this as a singleton that sets up your code to the state you want it in an initialize method and then just party off properties, methods, etc. You will need to do work. C# isn't designed to be called this way easily, of code I cannot modify to call methods on. You put 'nativeinterop' class in your own NEW assembly that YOU write, it references the code you cannot modify. If you need to set state, you can use 'nativeinterop' to do that. If the code needs to be initialized in a certain manner you could write an initialize function and call that too 
The problem with Managed C/C++ is that it always takes the hit of the CLR (You have another thread running in your app to do GC, managed types get JIT compiled, etc... it's gnarly stuff you don't want in a C/C++ app... which is why no one in their right mind every uses it that is serious...) Managed C/C++ gets thunked to IL and Jitted just like any other .NET language. It's no longer simple machine code. You are losing the benefits of native code by going that route. This is why I said he probably doesn't want it. For most people it doesn't matter because milliseconds of performance don't matter but if your writing a high performance pieceof code, every millisecond counts. Once Managed C/C++ is compiled, it is all IL, just like a C/C++ app, right? You can reflector a managed c/c++ binary and see the IL. I'm not wrong here I don't think. And it takes dependancies, static ones, on the CLR. What if it isn't there? Or the wrong version is there? App doesn't run? Talk about craziness! His solution should be to host the CLR, get cozy with IUnkown and IDispatch, write his own wrapper to setup/ teardown and expose whatever functionality he wants. He/She can load and unload the CLR at their own whim and not have to be taxed with the downsides. The functionality can be written to not be present if the wrong version of the CLR is there. Existing native code runs just as good as it did before. I've done this a few times with projects in the past, it's a bit of groundwork, but not too terribly hard once you have things working properly, and the plus - it won't tank existing performance. 
Thanks everyone. We are considering to use Xamarin
Almost the right idea, but you want the starting number to be a number that is ALWAYS going to be replaced by the first comparison. Since you're looking for the highest number, // Provides the lowest number an integer can be. int highestNumber = int.MinValue; If you haven't learned about int.MinValue &amp; int.MaxValue, then just use the first number (e.g.; number1). So... int highestNumber = number1; Here is a complete example; int highestNumber = number1; if (number2 &gt; highestNumber) highestNumber = number2; if (number3 &gt; highestNumber) highestNumber = number3; if (number4 &gt; highestNumber) highestNumber = number4; if (number5 &gt; highestNumber) highestNumber = number5; Console.WriteLine("Highest Number = " + highestNumber); Do you understand why this works?
Also for the love of Christ use smart pointers, they won't guarantee you wont leak but will hopefully eliminate most of them void main(int argc, char** argv) { CoInitializeEx(NULL, COINIT_MULTITHREADED); // do setup as per article CComPtr&lt;WhateverClrInterfaceTheySayToUseIForgot&gt; Foo CComPtr&lt;IUnknown&gt; NativeInterop; Foo-&gt;CreateTypeWhateverIt'sCalled("MyNamespace.NativeInterop", ..., &amp;NativeInterop); CComPtr&lt;IDispatch&gt; NativeInteropDispatch; NativeInterop-&gt;QueryInterface(__uuidof(IUnknown), (void**)&amp;NativeInteropDispatch); NativeInteropDispatch-&gt;GetIdsOfNames(_T("get_Instance"), &amp;id); CComPtr&lt;IUnknown&gt; Instance; NativeInteropDispatch-&gt;Invoke(id, blah, &amp;Instance); CComPtr&lt;IDispatch&gt; InstanceDispatch; Instance-&gt;QueryInterace(__uuidof(_IUnknown), (void**)&amp;InstanceDispatch); InstanceDispatch-&gt;GetIdsOfNames(_T("DoStuff"), id); InstanceDispatch-&gt;Invoke(id, ...); I think ATL now allows you to cast IDispatch as IUnknown so you don't have to always call QueryInteface but I may be wrong. I haven't done COM in 5 years. 
We all love Linq, and in a real world scenario I may well do it in this way, but as an assignment your prof is probably looking to see if you're able to code the logic behind such calculations yourself. Also, insignificant things like looping the array more than once may in fact count against you.
Actually, you can enable/disable the compilation to IL in bits of the code with the [relevant #pragmas](http://msdn.microsoft.com/en-gb/library/0adb9zxe.aspx). Then, the boundaries become the slowdown, but creating a less chatty interface is not too hard. Of course, for general interop I much prefer exporting the methods in the native side using dllexport; because you can easier control that interface.
&gt; Managed C/C++ gets thunked to IL and Jitted just like any other .NET language. The compiler will issue a warning if code is compiled to native since calling unmanaged code is expensive. Any use of __asm will obviously produce native code. You can force the compiler to only produce CIL by using [/clr:pure](http://msdn.microsoft.com/en-us/library/k8d11d4s.aspx).
Your smallest number logic looks wrong. You start it at Min Value - nothing will ever be smaller than that.
I would say what you are doing wrong is that you are not generalizing. Here is a generic and general Max() function: public static T Max&lt;T&gt;(T value, params T[] values) where T : IComparable&lt;T&gt; { T max = value; foreach(var t in values) if (max.CompareTo(t) &lt; 0) max = t; return highest; } You can call it like this: var largest = Max(number1, number2, number3, number4)
I've used Robert's solution. No mucking around, you just get a dll that can used with a C app.
How does this method avoid the performance hit of the CLR? Doesn't it have to be hosted one way or the other?
While I think it's a good thing you learned how to use a while loop: Who exactly is the target audience of such a blog post?
Yeah, it is easy to get stuck in the new shiny way. A coworker recently was trying to figure out how to determine if a string is inside another string using LINQ. I suggested Contains().
Bad programmers who only communicate in meme form.
It depends who is using it. I have only ever used Attach to process to attach to IIS, and I've used it a lot.
How is this different from this code? public class AdministrationView : CompanyView `CompanyView` is a base class. Would you be surprised if `AdministrationView` implemented `IView`? It seems that you might. But I wouldn't. &gt; if you wanted to use the ICustomerView for something that was NOT an IView, you simply couldn't. That's probably the intention of the author. That's like saying "If you wanted to access an object's private fields, you simply couldn't." Everyone knows that, and that is exactly the point.
Tailrec would have saved your bacon.
This is what the instructor is expecting. It is general without using lists or other libs. Loop through all the number and check if it against your current largest number. Current largest starts as the first number. Reverse it for smallest. 
I strongly suspect I am being daft.. but string.Contains(anotherString) is real, though obviously not LINQ.
The point isn't that I "learned to use a while loop." The point is simply sharing a moment of my own idiocy. The mistake/omission whatever was so dumb I just could't contain myself. I suppose the target of a post like this is other programmers who might recognize that this sort of stupidity happens to us all from time to time, and may recognize the humor in it. The target is NOT folks who take themselves so seriously they think they never do dumb shit, and/or who can't see the value in a little self-examination. 
How would you do it?
thatsthejoke.jpg
[thatsthejoke.jpg](http://i.imgur.com/tEjeMu8.jpg) --- ^(*Feedback welcome at /r/image_linker_bot*) 
Just why are the quotes so horribly small? Edit: I'm talking about [this](http://imgur.com/bhYK4PV)
I love this bot :D
and there was me thinking it was supposed to be a self deprecating joke.
This applies to the entire post, actually...
Personally, I would move the concept of how/where you read the command from, validation, execution/print out from the main loop. Then all you're really concerned about with managing your main loop are the _high level concerns of that loop_. This is doubly-important with an `while(true)` loop so you can make sure you don't accidentally introduce infinite looping: you can easily see what your exit conditions are (or, in your original posting, recognize that you're doing the infinite recursion) For example: static void Run() { while (true) { var command = ReadCommand(); if (command.IsValid) Execute(command); } } private static Command ReadCommand() { var consoleInput = ReadFromConsole(); return new Command(consoleInput); } private static void Execute(Command command) { try { string result = ExecuteCommand(command); WriteResult(result); } catch (Exception ex) { WriteError(ex); } } public class Command { public string Input { get; private set; } public bool IsValid { get { return !String.IsNullOrWhiteSpace(Input); } } public Command(string input) { this.Input = input; } } Of course, one might argue that validation is not the job of the loop, and one should move the validation check within the execution which trivializes the loop: static void Run() { while (true) { var command = ReadCommand(); ExecuteIfValid(command); } } private static void ExecuteIfValid(Command command) { if (command.IsValid) { try { string result = ExecuteCommand(command); WriteResult(result); } catch (Exception ex) { WriteError(ex); } } } But that's up to you. EDIT: Then of course, you can toss an "exit" command: static void Run() { while (true) { var command = ReadCommand(); if (command == EXIT_COMMAND) break; Execute(command); } } And you can clearly see the conditions by which your interactive shell program terminates. EDITx2: I updated a couple method call names. I think it's a bit more self-documenting/understandable. Especially when compared to the _original_ `Run()` code, and even your updated code.
Love this. Thanks for the thoughtful feedback!
Not sure if this is facetious/sarcasm or not...? 
If you're going to make a Command class, why not put everything in there? Command.Read() could be static and return a Command. Then each Command could execute itself with Command.Execute().
Easy fix :)
In this particular case, I was more concerned with simplifying the outer loop logic than specific details of the `Command` class. Going into it though, I still would _not_ associate command _reading_ and _high-level execution_ (that is, the valid check and `try/catch/report`) with the `Command` class itself. I'd keep `Command` (or plausibly, change to be `CommandInput`) mostly about state and leave details for managing the reading and execution/reporting to separate methods/classes dedicated to that. It might be overkill for a project like this, but that nicely puts specific concerns in singular places and provides mechanisms by which commands could come from multiple areas, or new commands injected (say via plugins or external assemblies), and allow for aspects of the system to be unit tested. Just to be clear, I'd rather there be a dedicated `CommandReader` and `CommandExecutor` classes than to overload the `Command` class with these concerns. EDIT: To go further, if you really wanted a fully functional shell, I might separate concerns of: * _input sources_ (so for example, `ConsoleCommandInputReader` for the console and a `FileCommandInputReader` to read a macro/set of commands from a file), * command _parsing_; separating tokens to their logical parts as needed for later type and parameter resolution and type coercion * _command resolution_ (associating those command inputs to the specific runtime `Type`), * the command implementations themselves (e.g., the `DoSomethingCommand`, `DoSomethingElseCommand`, etc.), * the management of a command execution (this is the `try/catch` error handling, outputting of information), * and a command output destination (say, the `Console`) And again, some of this might be over engineering depending on the intended use of the shell application (is it short term? Do you intend to add these other sources?) but some are trivial enough (say, the main loop aspects) that they may as well be implemented.
[This](http://imgur.com/bhYK4PV)
You can load and unload it on demand and as necessary 
Weird. OK, I guess I need to look at how I am handling block quotes and additional header tags in the blog! Thanks for pointing that out. In my [browser they look much larger](http://i.imgur.com/bqrWBGU.png). I'll have to fix that. 
FWIW, this is how I did it too. The command in mine takes the string input and parses it, providing the command and arguments to be used by some external execution mechanism. 
And while commenting code is nice and all, the way it's done doesn't really help the impression that much,
Its not possible, well it might be in F#, /u/PasswordIsntHAMSTER was just saying that if the call was written slightly differently, then it would work in a language that supported tail recursion.
Telerik is VERY customizable. I guess some license include source code too. Here where I work, there's now way for us to spend time developing something that already exists and it's good. We try to focus on our code and not spend time reinventing the wheel.
This is a very, very bad idea for someone starting to learn C#. The guy doesn't event know how to use lists and you want him to use generics, foreach and params?
Browse through Microsoft Virtual Academy. There are a lot of webcasts that explain a lot of basic stuff. Also check Channel 9 at MSDN. But most of the resources are already mentioned in the sidebar of this subreddit.
The code is commented because it comes from a tutorial/blog post I did. While I don't make those types of comments in my regular production-type code, I tend to include them in tuts and blogs, where you never know the experience level of the reader. 
Finished Season 5 yesterday, ending was well done.
I enjoyed a lot reading your post, thank you!
Thanks for reading! The dumb things we do make for entertaining content! :-)
Oh, good lord. The Wire is the best series EVAR! "You gots the briefcase, I gots the shotgun..."
tl;dr; KISS
I like the O'Reilly [C# Pocket Reference](http://shop.oreilly.com/product/0636920023975.do). Very little fat, gets right to the point. Caveats: Assumes familiarity with OO concepts and doesn't really cover .NET, just the language itself.
I would argue that using (classic?) inheritance in this case would help you achieve the desired outcome with far less effort. Of course, nothing prevents you from defining an an interface but usually this implies some sort of enforcement of methods across types/classes which are unrelated. The rule of thumb I use is that an interface name follows a verb-to-adjective pattern like `I(do_something)able` i.e. any class implementing that specific interface is *able* to do something In this case, an abstract class Attachment would be better suited than IAttachable because IAttachable is enforcing a constraint that anything with a Name and Description is attachable. Attachable to what? How? Immediately you'd expect signature for a method Attach() which it lacks (because that is not its purpose from what I gather). From there, it follows form me that you can have property of type AttachementMechanics and VisualImpact and TurnOnAndOff methods such that: public abstract class Attachment { public string Name { get; set; } public string Description { get; set; } public AttachmentMechanics Mechanics { get; set; } public void VisualImpact() { } public void TurnOnAndOff() { } } public class AttachmentMechanics { public int Damage; public int Accuracy; public int MagazineCount; public int FireRate; public int Crit; } Just my 2c.
Become an expert at async/await operations. Many would say these are the highlight of the C# language. Here is a very good video from channel9. http://channel9.msdn.com/Events/Build/2012/3-011
Frankly, I didn't read everything you wrote. But it seems you basically know what your snippets should do. Why don't you set breakpoints and just step through them? You probably will find out that you haven't reinitialize a variable or something like that.
I came up with a similar concept a couple of years back. I wanted to be able to reference an assembly and walk through the assembly and execute methods from it. While it didn't pan out completely, its served its purpose for quite a while. the main entry allows for console commands to be used at runtime, and it also allows it to be used as a Service Base. Notice the really bad command line parser, sorry, that's been a pain point for a long time, I always wanted to go back and change that, but it would always add more complications that I wanted to deal with. protected static string m_consoleName = "TestBench"; protected static Type m_type = typeof(Program); protected static List&lt;MethodInfo&gt; m_methods = null; [STAThread] static void Main(string[] args) { if (Environment.UserInteractive == false) { StartService(); } else { CreateMethodCache(); AddTraceListeners(); Console.Clear(); Console.ForegroundColor = ConsoleColor.White; Console.BufferHeight = 300; Console.BufferWidth = 100; Console.Title = m_consoleName; if (args.Length &gt; 0) { RunCommand(args); return; } bool pContinue = true; while (pContinue) { Console.Write(":&gt;"); string[] Coms = Console.ReadLine().Split(new char[] { ' ' }); if (Coms.Length == 0) continue; switch (Coms[0].ToLower()) { case "exit": case "quit": pContinue = false; break; default: RunCommand(Coms); break; } Console.WriteLine(""); } } } Now the interesting part. The RunCommandMethod: static void RunCommand(string[] args) { string CallingMethod = args[0]; object[] param = new object[] { }; if (args.Length &gt; 1) { //Remove the First Param which should be the calling Method param = new object[args.Length - 1]; for (int i = 0; i &lt; param.Length; i++) { int j = i; param[i] = args[++j]; } } foreach (MethodInfo mi in m_methods) { if ( // Validate the File Name String.Compare(mi.Name.ToLower(), CallingMethod.ToLower(), true) != 0 // Validate the Parameter Count || mi.GetParameters().Length != param.Length ) { continue; } try { object prog = System.Activator.CreateInstance(m_type); m_type.InvokeMember(mi.Name, BindingFlags.Default | BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.InvokeMethod, null, prog, param); return; } catch (Exception e) { if (e.InnerException != null) { Console.WriteLine(); WriteExceptions(e.InnerException); } return; } } // If we fell out of the loop and didn't find a Matching Method, then Call Help. Console.WriteLine("Unknown Command"); Program.Help(); } Again the pain point here is that the methods don't understand proper types, so all your entry methods have to handle strings. its not as bad as it sounds though. I like to use this to force me to separate my test code form my classes/methods being tested And lastly I'll show you the Help method. static void Help() { Console.WriteLine("Valid Commands"); foreach (MethodInfo m in m_methods) { DescriptionAttribute[] attribs = (DescriptionAttribute[])m.GetCustomAttributes(typeof(DescriptionAttribute), false); if (attribs != null &amp;&amp; attribs.Length &gt; 0) { Console.ForegroundColor = ConsoleColor.Green; Console.Write(m.Name); ParameterInfo[] parm = m.GetParameters(); Console.ForegroundColor = ConsoleColor.Cyan; Console.Write("("); for (int i = 0; i &lt; parm.Length; i++) { if (i &gt; 0) Console.Write(", "); Console.Write("({0}){1}", parm[i].ParameterType.Name, parm[i].Name); } Console.Write(")"); Console.ForegroundColor = ConsoleColor.White; Console.WriteLine("\n\t{0}", attribs[0].Description); } } } Using System.ComponentModel.DescriptionAttribute you can decorate your methods and expose a simple help system. 
Can you post more of your source code (preferably as a [gist](https://gist.github.com/))? It appears to me that we are missing information here that could be useful in helping you solve your issue. For example, in `checkItemsAdd`, it looks like you are just looping over a collection of items and assigning to a `string` object declared elsewhere (instance var?), which has the effect of only saving the last entry assigned to it. As for your duplicate entries, this is the nature of a list collection type...if you want unique values, you might want to look into a `HashSet` or similar -&gt; http://msdn.microsoft.com/en-us/library/bb359438(v=vs.110).aspx As an aside, depending on your situation you may find it easier to work with an OR/M, such as [Entity Framework](http://msdn.microsoft.com/en-ca/data/ef.aspx), which will expose your database in terms of objects. Some people may criticize it as a bit of overkill, but I prefer my code to be readable and elegant first before I consider the possible performance hits.
Sounds like you're on the right path. MVVM is just a particular way structuring your code with a focus on splitting the concerns of data manipulation/storage, logic and UI. Your view model classes are where the meat of you programming is going to live. EF is your model layer and the xaml is your view. Probably the most confusing part your going to run into is connecting your xaml to your view model via bindings. That stuff can quickly grow pretty complex. Just keep in mind that your view model should never need to know anything about the view. It's basically a state machine with the properties indicating the state and the methods the means to change states. As far as resources, there ain't none better than [pluralsight](http://pluralsight.com/) for general stuff. Once you have more specific questions, just start googling (which will probably lead you stackoverflow) or ask here.
It looks like RandomNumber and myMsg are not defined anywhere. Also myMsg is not used anywhere so that line seems to be entirely unnecessary. So maybe remove the line "myMsg = getMessage();" and define RandomNumber like you do in method getMessage() as a new Random.
You're writing a Windows Service. That's not a simple .exe file.
Ok. I am going to recommend a slightly different path for you. First, read through this tutorial: http://www.asp.net/mvc/tutorials/mvc-music-store Then consider doing your project as an MVC web app with Entity Framework. I think you might find it a lot easier, and you'll end up with an application that isn't tied to the desktop.
I'd suggest that you break it into two or more projects. First, move the database out of access into a real database platform. SQL Server Express is free and far more robust than Access. You can connect your existing Access forms to SQL Server without much trouble (it may be a bit of a hassle, but if you encounter problems then they are likely problems that you would encounter eventually anyhow). After you get the database migrated, start replacing the access forms one at a time. WPF is nice because you don't have to worry about data binding. Someone above suggested building a web interface. That'd be a nice way to go, but don't burden yourself with learning that now if you are not already comfortable with it. Consider putting a layer boundary between your data access code and your interface code, even if the boundary only exists in your mind for right now. Keeping the data code and interface code in separate classes may make your life easier in the future.
I agree that this is probably what the instructor is looking for, but it should be noted that Linq is not a separate library. It is "Language Integrated Query" after all.
I was a TA for a class where the professor explicitly didn't allow use of things outside of the scope of the class. It helped reduce cheating by students that just googled answers. I actually rather enjoyed the restriction, it took mundane challenges and turned them into brain teasers.
Bootstrap is a good place to start for easy styling and pleasing layouts.
In my opinion you need to learn by doing it a ton. For practice try cutting up really nice UI's into html/css. It will give you a fell for some of the things you can do. Take a look here for inpration: http://www.dribbble.com http://www.deviantart.com/designs/web/ Also learn CSS3/HTML5, javascript so you know whats possible. Try to get all the UI work you can. UI is an art, Things are going to be crappy for a long while but you'll get better at it if you keep working on it. Good Luck! Edit: Or cheat by buying templates or using bootstrap
Thanks. I'm decent with javascript... when it comes to data. I'll start taking a look around!
Thanks!
I too would suggest starting with modeling your database. The reporting solution becomes a lot easier with a solid database schema to work with.
Not to hijack, but I'm looking at doing something similar.. does anybody have any thoughts on using Sharepoint?
I have a similar program that uses IsFileLocked and I think I encountered the same problem. Instead of triggering on the OnChange event, it uses a Timer and BackgroundWorker to periodically re-check if locked files are still locked until they aren't.
Do you have an option of sending two files? Send the main file, say filename.mp3, then once the file is done sending, send a blank text file called "filename.mp3.txt". This way you can just monitor the txt files; if there's a txt file, you know you need to process a file. After you've finished processing the file, delete the txt file.
mysql/mariadb and mysql connector for .net
The issue with that is, there will be times there are a ton of files needed to be transcoded, like 50+, so if its an individual file yes, Im not sure how it would work with that many files
Check out hackdesign, they do a series of "design for developers" tutorials
We've done quite a bit of systems analysis before hand. For example we have the database schema designed, including all fields, key, types etc. When I looked at entity framework I was quite excited that I could just use the database design first model, but then it seems ridiculous to have to drop the database for every schema change unless you are using the entity framework code first? I already know what I need to achieve from the application in a broader sense. The application won't serve a lot of people (think 20 people or under) and it doesn't need to be web based as we are on all Windows machines and will be for the foreseeable future. Primarily the use cases for the application 60% of its usage will be finding data pertaining to something (think customer address/customer contract number etc) around 20% of its usage will be adding data or modifying it, and around 20% on generating reports (PDF preferably) that aggregates content in the database and generates it in a way we can send to clients. I happy to be broader or answer in further detail if it will help me find a way forward with this!
Maybe try checking the file size in a timed loop and if it hasn't changed in say 10 seconds or something then check for lock? Just a thought. No idea if it's practical or reliable.
I liked when Wes wrote this article http://blogs.msdn.com/b/wesdyer/archive/2007/02/02/anonymous-recursion-in-c.aspx in 2007. 
Get used to available bootstrap components: http://getbootstrap.com/components/ Then integrate a theme into a visual studio project and play around: https://wrapbootstrap.com/
If you are going to continue down the MVVM route (or any really). Start simple. Put a single control in your app and get a collection of objects and bind the collection to the control. Have the control output just a single property from an object. Once that is working add another property. Once you get that down you can move to nested databinding if needed or to two-way databinding. It is really easy to get into the weeds trying to perfect everything before hitting build and run. You will get much more done taking a bunch of small steps than a giant leap.
Thanks. I'm trying it out right now. 
If you have to ask if Sharepoint is an option, I don't think you understand the problem. IOW no, Sharepoint probably can't replace any application you already have.
hm, it may be worth a try. So far everything else hasnt been to reliable either. Ill try it and let you know
I can give it a shot, though given my IsFileLocked code, it sometimes returns a false positive, and says its complete a few times.
It would work by having a txt file for each... That doesn't really take up space or anything.
Firstly, great to hear you've done the thinking up front! Secondly, I'd say that if you are building something that has a good match to something perfected elsewhere (CRM / Groupware / Wiki) then go and pick up someone else's open source and start there. It is often easier to embrace and extend than start from scratch. Of course if it is for learning purposes, fair enough! I'm no expert, but I am coming to the end of my first EF/MVC project and it has been a pretty good experience. With EF Database First, you don't have to drop and recreate the database all the time, you can 'refresh' and 'add' objects from the database into the model later on. In my project the database was very well established, and it was the web app that was being re-invented. A few DB changes were needed and these were added and fetched into the project. It can be a little bit of a pain sometimes, and there are a couple of right-click options to get familiar with, like the 'Transform all T4 templates' to make sure everything is refreshed/regenerated after any change. What I thought was especially neat is that for any given table, you can 'map' a stored procedure for INSERT,UPDATE, DELETE rather than doing the same with a trigger. You will still be left with a front-end choice... winforms, MVC/RAZOR, or other framework. I plumped for Jquery and Easyui in the end - this worked well for me but I'm missing out on a lot of the auto-magical (and time saving) coding that you get using MVC (Add &gt; New &gt; Scaffolded Item &gt; Profit). If you are picking SQL Server for your DB backend, then stick Reporting Services in there too. Any data retrieval can be performed over there instead of coding screens for it, that will save time, even when it's an day-to-day/detail/internal requirement not a aggregated/periodic/customer facing requirement. Also look into the filestream / filestore stuff in sql server then you can be stashing documents and attachements for your technical dictionary. All I would say with the Microsoft stuff is make sure you have the LATEST version of everything starting from Visual Studio, then the Project templates, which in turn gives you the NuGet packages. Get SQL 2014 if you can as there is little point adopting anything older than 2012. I say this from experience having started once with WebAPI 1, then moving to 2, and ending in dependency hell with various EF versions before I discovered there were a bunch of updates needed for Visual Studio 2012 :( Of course the Microsoft route isn't the only one, but it sounds like there is already a preference. All the same you might look into Java, Spring, Mysql, Progress, mariadb, BIRT (for reporting) etc. I'd also recommend Lightray, OpenBravo or OpenERP or any number of Wikis as a good starting point if you want to borrow rather than build. Database wise, a lot of the new nosql kind of DB provides a programatic interface anyway rather than SQL, saving you the EF step. Finally, good luck and hope you enjoy the project! 
Sharepoint does everything, but not well. It can suck up a huge amount of time in setup and design, only to give you basic functionality you can find elsewhere. Unless you are doing some enterprise wide workflow/document/bi stuff I would steer clear.
Personally I would say if there is no requirement to go to web, then why bother? WPF seems a good choice given your scenario. I have generally Googled my way around what I needed to learn. MSDN as ever is the primary resource. This one looks roughly aligned to what you're doing: http://msdn.microsoft.com/en-us/data/jj682076.aspx The T4 templates are the auto-magic bit of EF. Scaffolding is when Visual Studio generates code for you for MVC controllers. I think you will be doing the former, but the View and Controller stuff might be specific to MVC project template (whether you stick to an MVC pattern or not with WinForms, I do not know). I've seen some amusing arguments around FILESTREAM, usually along the lines of, "Just make a table with a URI in it instead, allocate an area of disk, share it between client and server, etc." A lot of them seem to miss the point of this being what FILESTREAM does, but with more elegance than your average potato coder can accomplish. I'd take a look into it and try it out rather than listen to naysayers. Look for genuine warstories instead and form your own opinion from testing.
I've signed up. Looking forward to playing around with a tutorial this weekend!
This article is a confusing mess. If I didn't already know what you are talking about, I would be hopelessly lost trying to follow this.
Just letting you know /r/readablecode exists
Or you could send the files over as one extension (like .blah) and have the process that sends them over rename them to their correct extension upon completion.
well, we are looking at doing exactly what OP said... "looking to replace our internal technical database with something written in C#.NET with an SQL back end" and alongside that, add in invoice and order management, phone logging, office wide chat, file sharing, document management, and im sure im forgetting something
Thank you for your time. We believe, you have gone through the entire article, and it would be nice if you could tell us, which part is confusing you. It’s a request. Thank you again. 
interesting, it was recommended to me by someone else who uses it at their company for exactly this scenario. they didnt build it tho.. so i can only get her opinion from a user perspective. 
https://www.odoo.com 
I did my own data model. Way easier than people say. Helps if you have some SQL background, and reflection is amazing. To me learning database 'stuff' and SQL is as important as your programming skill. Spend some time with that before making your final decision. 
You've got your starting values wrong. Biggest number should start at int.min and smallest should start at int.max other wise nothing can replace them e.g. there is no int bigger than int.max.
New features are awesome! I like the direction Microsoft is going right now. Making all the things they can possibly do open-source. By the way can we port Roslyn to Linux and if we can, does it mean mono is obsolete now?
&gt;Roslyn to Linux and if we can, does it mean mono is obsolete now? No. Roslyn runs on Mono (on Linux). It just runs much better since it's open source and it is much easier for Mono guys to implement the features. For example `System.Web` is closed and this is why it's riddled with bugs and works horribly on Mono.
Finally we get Exception filters. 
Did he say something about release date?
Why not use lucene.NET? At least it's an active if infrequently updated project, and it's run by Apache.
Planned this year, with the release of VS2014.
Knowing Microsoft, VS2014 will probably come out in November 2015
You obviously don't know the dev div team. There has been a visual studio release a year the last 2 years, and several updates between releases. They are on a very aggressive release cycle - Visual studio online is released even more often.. 
There are combinatorics NuGet packages. Don't reinvent the wheel. https://www.nuget.org/packages?q=Combinatorics
Visual Studio release/naming as been on the [mark](http://en.wikipedia.org/wiki/Microsoft_Visual_Studio#History) except for VS 2008 which was released in 2007
OWIN to the rescue?
i don't think that you are "Fucking Idiot" , otherwise if you are you will not be able to do anything useful with any programming language. take my advice and read this book : http://www.amazon.com/gp/product/0133129454/ref=pd_lpo_sbs_dp_ss_1/190-8777985-0518127?pf_rd_m=ATVPDKIKX0DER&amp;pf_rd_s=lpo-top-stripe-1&amp;pf_rd_r=13B4ABTHCD1RC273YHQ0&amp;pf_rd_t=201&amp;pf_rd_p=1535523722&amp;pf_rd_i=0132165457
No need. With release of VS2014 comes Roslyn and MVC6. MVC6 has removed everything that is closed-source (including `System.Web`) so it is not a problem anymore. I also think that MVC6 is built on OWIN principle by default. Not sure about that though.
MVC6 uses OWIN, yup :) To run on linux, just swap out the .NET dependencies with Mono, and boom
It's not possible to convert a base class to a derived class. What exactly are you trying to do? There may be a better way to approach this problem.
Cuts down on boilerplate what's not to love?
I did not and I'm surprised no one in the audience asked for that, but as I was showing off Visual Studio 14 and mentioned that it will probably be released in 2015, I think that indicated to them that this is when we'll see these language features as a part of the language.
But why?
Looks great. I'm excited. Disappointed in the mic quality though. 
You can create the base class as a generic type, with type constraints to require a no-param constructor as well as require that the type parameter in question is a subclass. Then the subclass can derive from Entity&lt;Prop&gt;: public class Entity&lt;T&gt; where T:Entity&lt;T&gt;,new() { protected Entity() { } public int EntityVar; public Entity&lt;T&gt; Duplicate() { T r = new T(); r.EntityVar = EntityVar; return r; } } public class Prop : Entity&lt;Prop&gt; { public Prop() { } public int PropVar; public Prop Duplicate() { Prop r = (Prop)base.Duplicate(); r.PropVar = PropVar; return r; } } I'm not certain if this is the sort of behaviour you are looking for, but it allows the base class to define methods that end up returning the derived type. 
No problem, glad you liked it! All these changes are language changes, the code will still compile down to IL that the CLR understands.
Nice explanations on features that didn't make much sense to me before. Also first time I've actually seen the "foo?.bar?.baz ?? alice" example (the ?? part) which should've been obvious.. 
Yeah I see a lot of people ranting about it. It's like they actually want boilerplate code or something.
It certainly will, it's not required to use the primary constructor to use the auto-property initializer. However, they're pretty much tied together in the sense that it's a expected feature that comes together with primary constructors. With that said, it also works with the setter only, which lets you set the backing field without having a setter or a constructor! class Reddit { public int Potatoes { get; } = 10; }
Message to the author (who I am presuming is OP): I personally find the layout / 'press left / right to continue' incredibly gimmicky and aggravating. I just want to read the site, but for some reason, the author decided I would be better off needing to keep navigating after every paragraph or screenshot. My suggestion would be, if you want someone to be able to read this, to either change it to a [normal website](http://motherfuckingwebsite.com/), or give the reader the option to turn it into a traditional, readable piece of media. To top it off: 'Failed to load resource: the server responded with a status of 404 (Not Found) http://carlo-kok.com/tutorial/lib/js/head.min.js'
Thanks for the comments! Fixed the missing file and added a single page version linked from the first one.
&gt;How are they keeping the console window open and navigating the cursor around? The simplest way would be a while loop that reads an input key on each iteration of the loop. &gt;How do they get the cursor to display as it is ? Not sure what you mean exactly. You just write a character to a place on the screen. &gt;What do they use to display the hearts? It's just a Unicode character
 How do they get the cursor to display as it is ? Not sure what you mean exactly. You just write a character to a place on the screen The cursor is displayed as a large + sign in green and he is able to move it all around the grid( from both of your answers, it appears after each key press a new while loop would cause it to repopulate again )
Once again, very similar to [this question](http://www.reddit.com/r/csharp/comments/2ec8wz/console_application_staticnot_scrollable_lines/), this really isn't hard if you just look at the documentation for the C# [Console](http://msdn.microsoft.com/en-us/library/system.console.aspx) Here's a sample program which lets you use the arrow keys to move around the visible console area and draws alternating hearts and x's of alternating colour. You should be able to figure out the rest from here. class Program { static void Main(string[] args) { Point currentCursorLocation = new Point(); int consoleWidth = Console.BufferWidth; int windowHeight = Console.WindowHeight; for (int counter = 0; ; counter++) { var keyPress = Console.ReadKey(true); // Read the next key and don't display it. switch (keyPress.Key) { case ConsoleKey.DownArrow: currentCursorLocation.Y += 1; // Up and down is inverted in the console. break; case ConsoleKey.UpArrow: currentCursorLocation.Y -= 1; break; case ConsoleKey.RightArrow: currentCursorLocation.X += 1; break; case ConsoleKey.LeftArrow: currentCursorLocation.X -= 1; break; default: continue; // Don't redraw if the position hasn't changed. } currentCursorLocation.SnapToBounds( // Make sure we're not out of bounds. new Point(), new Point( consoleWidth - 1, windowHeight - 1)); bool isEvenMovement = (counter % 2) == 0; char desiredCharacter = isEvenMovement ? '\u2665' // The unicode code point for the heart. : 'x'; Console.ForegroundColor = isEvenMovement ? ConsoleColor.Blue : ConsoleColor.Red; Console.SetCursorPosition( currentCursorLocation.X, currentCursorLocation.Y); Console.Write(desiredCharacter); } } } struct Point { public int X; public int Y; public Point(int x, int y) { X = x; Y = y; } public void SnapToBounds(Point lowerBounds, Point upperBounds) { if (X &lt; lowerBounds.X) { X = lowerBounds.X; } if (Y &lt; lowerBounds.Y) { Y = lowerBounds.Y; } if (X &gt; upperBounds.X) { X = upperBounds.X; } if (Y &gt; upperBounds.Y) { Y = upperBounds.Y; } } }
Very cool. I'm curious what was the inspiration for this project if you're willing to share?
That sounds really useful!! Could you expand the readme on how do I install it and use it? For example, that the nuget command is &gt; Install-Package tdg I've sent you a PM! 
Yea i need to add some more information to the readme around installation. I was adding releases to the github repo until i added nuget packaging. &gt;Install-Package tdg Will install the tool for you. 
I'm sensing a theme today with this project and Processus/Manbox: http://www.reddit.com/r/csharp/comments/2g94q0/i_developed_a_templating_language_manhood_for/
Doesn't Visual Studio have this built in? e: Looks like they may have taken it out after VS 2010...weird.
I love C#, but I'm not a big Windows fan. If it were not for Mono, I would be coding in Java :-(
You are absolutely right! That completely slipped my mind, however, looking at the code that is generated by the compiler, using the Dictionary Initializer will generate this code: Dictionary&lt;string, string&gt; dictionary2 = new Dictionary&lt;string, string&gt;(); dictionary2["Name"] = "Doe"; Dictionary&lt;string, string&gt; dictionary = dictionary2; While doing what you said will generate this: Dictionary&lt;string, string&gt; dictionary2 = new Dictionary&lt;string, string&gt;(); dictionary2.Add("John", "Doe"); Dictionary&lt;string, string&gt; dictionary = dictionary2; So you're absolutely right, looks like it's mainly a syntax difference, I'd have to check the design notes on codeplex to understand their reasoning better than. Thanks for spotting this, I'll keep it in mind the next time I do this talk!
Not that i know of. It certainly wont have support for the named patterns in any case. 
Since you already know Java and a few other languages I recommend diving straight into writing code. Java and C# are similar in many ways. You can skim through this wikipedia article [about C# syntax](http://en.wikipedia.org/wiki/C_Sharp_syntax), and use Google when you run into trouble. [The C# Reference from Microsoft](http://msdn.microsoft.com/en-us/library/618ayhy6.aspx ) is useful as well.
I'd start by Googling [C# for Java Developers](https://www.google.co.uk/search?site=&amp;source=hp&amp;q=c%23+for+java+developers) - one of the first results - [MSDN: C# for Java Developers](http://msdn.microsoft.com/en-gb/library/ms228358%28v=vs.90%29.aspx) Google usually helps when you know what you want to do but not in C# (e.g. "c# equivalent of java map" is Dictionary) The other thing I found useful is [Resharper](http://www.jetbrains.com/resharper/) (work paid though) to help with things like LINQ as will suggest alternatives using LINQ when appropriate 
Obviously the other answers are good too, but here's an incomplete list off the top of my head of stuff that's different. * Value types (structs) * Generics can use value types (IList&lt;int&gt; etc), and there's no type erasure (i.e. you can do Type type = typeof(T)) * As a result C# doesn't have boxed alternatives to the primitive types (as there's no need), (though autoboxing still occurs in some situations). * C# supports method/function pointers. Java 8 just introduced this in a shoddy way with functional interfaces, but C# takes it further. See: [Delegates](http://msdn.microsoft.com/en-GB/library/ms173171.aspx) and [lambdas](http://msdn.microsoft.com/en-gb/library/bb397687.aspx). (P.S. don't use 'anonymous methods', use lambdas, they're more recent) * C# also uses [events](http://msdn.microsoft.com/en-us/library/aa645739%28v=vs.71%29.aspx) rather than callbacks. Java does this pattern by adding anonymous overrides of classes or interfaces to some internal list (e.g. .addActionListener(new AbstractAction() { ... });), the C# paradigm is events and delegates/lambdas. * Check out the typical way to structure projects in C#. Namespaces instead of packages (no more com.reddit.etc crap), assemblies instead of JARs. It's a lot better. Relatedly, there's no package-level access. Instead we have *internal*, which is visible to the whole assembly (and potentially friend assemblies) but nothing more. * You've maybe heard of it already, but LINQ is the combination of [extension methods](http://msdn.microsoft.com/en-GB/library/bb383977.aspx) and lambdas. Really powerful for manipulating collections. Here's a very thorough list of all the the things LINQ can do: http://linq101.nilzorblog.com/linq101-lambda.php * People tend to declare everything with **var** in C#. I hate it, but most people don't, so you'll have to get used to it. Don't be fooled in to thinking it's dynamic typing (like Ruby), it's just getting the compiler to infer the type, e.g. var myList = new List&lt;int&gt;(); // Clearly myList is a List&lt;int&gt;(). * On that note, C# supports dynamic too w.r.t. late binding: http://msdn.microsoft.com/en-gb/library/dd264741.aspx * Oh, how could I forget this for so long: Properties. You don't usually write getters and setters in C#, use properties: http://msdn.microsoft.com/en-gb/library/x9fsa0sw.aspx . C# even lets you write the general boilerplate case with a shorthand: **public string Name { get; private set; }** etc * C# lets you overload operators, and also supply new casts (implicit or explicit), as well as your own indexers (e.g. array syntax) * Methods and properties in C# are 'final' by default, declare them with the **virtual** keyword to make them, well, virtual * instanceof == is * Null coalescence: string name = user.FullName ?? user.Username; // Picks first non-null value, can chain it multiple times * verbatim strings, e.g. string path = @"C:\Windows\System32\"; // No backslash escaping required * Exceptions are never checked * Nullable types, if you want a potentially null int: int? maybeNull = null; * Finally when you're bored and wanna go investigating, you could look in to expression trees, pointers, yield, using, Flags on enums, generic constraints (new()), checked/unchecked contexts (not to do with exceptions), partial, object initializers, and the much better reflection API Probably forgot loads, but that should get you started! :D
&gt;Null coalescence Not op but this intrigued me. Could you expand on your statement a little?
Pat on the back for you mate. Appreciate this, seems to be pretty much what I need! I have seen that most people prefer using 'var' - I remember reading something about it being better or something arather. Thanks anyway :) /u/changetip 
/u/EscapeLizard, rappelle wants to send you a Bitcoin tip for 1 Pat on the back (1.041 mBTC/$0.50). Follow me to **[collect it](https://www.changetip.com/collect/39864).** [ChangeTip info](https://www.changetip.com/tip-online/reddit) | [ChangeTip video](https://www.youtube.com/watch?v=_AnfKpypMNw) | /r/Bitcoin
The null coalescing operator is syntactic sugar that takes the right hand side of the operator, if the left hand side evaluates to null. eg: string name = user.FullName ?? user.UserName; could be written as: string name; if (user.FullName != null) { name = user.FullName; } else { name = user.UserName; } You can chain multiple of these together, so: string name = user.FullName ?? user.UserName ?? "(no name or username)" There is another operator called the Ternary operator, which is a simplistic if-then-else: string name = user.FullName == null ? user.UserName : user.FullName; this is the same thing as above... usually it's used in things like: int score = user.Score &lt; 0 ? 0 : user.Score; This means "If the Score property is less than 0, use 0. Else use the user's score" ...and just to confuse people more, in C# 6, there's a new operator coming called Null Propagation. In all of the above examples, if user had been null, I'd have caused a NullPointerException to be thrown. in C# 6, the Null Propagation will allow you to do things like: string address = user?.Address?.AddressLine1; This little bit of syntactic sugar is the same as checking if User is null or Address is null then setting string address = null, otherwise setting it to AddressLine1. You could combine it with the null coalescing operator too: string address = user?.Address?.AddressLine1 ?? "(no address"); Fun, no?
Yes?
Thanks =) I've heard really great things about Resharper. It's rather expensive, though :(
Cheers. I think I'll just have to think of some sort of simple project to learn on :)
Hey, thanks for the tip, but I don't use bitcoin. Just glad I could help you get started.
Which Java IDE have you been using? Resharper basically adds all the best bits from IDEA in to Visual Studio.
I generally use Eclipse for Java, and Vim for everything else.
I wouldn't want to start in OSS, but it looks like they have a student offer too, so I'll be taking that given I finish in a few weeks :P
There's arguments for and against. Personally I'll use it whenever it makes sense and it's obvious what type things are. There's cases where it's not possible though, eg for out parameters. Though, that may change in C#6! They're thinking of allowing you to declare out parameters inline. Changing this syntax: int value; int.TryParse("1", out value); to int.TryParse("1", out var value); (though this might screw up readability)
&gt;Fun, no? Definitely! I appreciate your feedback, you've clearly and concisely conveyed a new syntax I can use! Thanks for all your help!
I would stick to the "use it where it makes sense". For me, this means I would rather type 'int count = 0;', but 'var GetDictionary()'. When it comes to long types with generics, I'd always use 'var'. I wouldn't stick to strict rules with this, because this is mostly opinion. If you feel var makes it more readable (or it doesn't affect its readability at all), then feel free to use it.
At the same time, I have looked into Lucene. Net. I am reviewing the design of text search engine in .net.
MSDN has a great section titled 'C# for Java Developers' http://msdn.microsoft.com/en-gb/library/ms228358%28v=vs.90%29.aspx
Piggybacking off your great list. I would include yield further up. One of the issues I find when working with *java guys doing c sharp* is they often just use the subset of functionality, as that subset is very much like java. The yield keyword is such an effortless way of doing itterator pattern work, it's so simple, it's incredibly easy to debug, and often has massive performance benefits as making large contiguous blocks of memory is expensive afterall. This is often completely ignored by people who haven't learned the language features. As a result we see much uglier code. This has been a real pain for me in the past!
I also prefer using **var** over having to see a huge nasty type signature twice.
The reference source reveals that there is absolutely zero difference in those two lines of code: public TValue this[TKey key] { get { int i = FindEntry(key); if (i &gt;= 0) return entries[i].value; ThrowHelper.ThrowKeyNotFoundException(); return default(TValue); } set { Insert(key, value, false); // Insert is called on setting an Index value } } public void Add(TKey key, TValue value) { Insert(key, value, true); // Insert is called on Add() } Not going to paste insert. Lots of fun code in there, but the two blocks of code generated by the compiler boil down to identical code paths. EDIT: I guess where I'm going with this is it doesn't matter in this case. It's an implementation detail that appears to produce identical results anyway. I wouldn't fret too much about the minute difference.
Get a copy of the Framework Design Guidelines book. This will help you think in terms of .NET patterns. Don't just use the online summary, as it misses many of the important discussions.
No. This is a bone of contention for developers. i believe var should be used for the problems it was designed to solve and not be used to be lazy.
I highly recommend [C# in Depth](http://www.manning.com/skeet3/) by [Jon Skeet](http://stackoverflow.com/users/22656/jon-skeet). It assumes you know C# 1.0 and goes into pretty advanced details of the language such as the stuff mentioned in the comments here up to C# 5.0
Thanks! And yes, *how could I forget the lack of unsigned types*!? I lament their absence every day, doing something very similar to yourself (e.g. C originated network stuff). Haha. :)
Sorry I was just trying to throw out some recognition because initially it got downvoted for no apparent reason.
Thanks for all the PMs and replies!! I posted this late last night from my phone so I haven't been able to reply as much as I should have. There were a few questions in PMs about installation and usage. I have just pushed a new version with some minor features, an updated README and some general cleanup so hopefully that will help people to get started with tdg. I intend to add an examples section to the repo with some ideas on how the tool could be used in interesting ways. One immediate item I want to improve on is the Named Parameters feature e.g. you can run: &gt; tdg -p "@misc_ssn@" -c 1000 to generate 1000 ssn like values. The current list of Named Patterns is: * address_country * address_county * address_eu_city * address_eu_country * address_eu_type1 * address_street_name * address_street_suffix * address_street_suffix_abbr * address_us_city * address_us_state * address_us_type1 * address_us_zip * date_month_abbr * date_month_name * date_week_day * misc_company_name * misc_compass_point * misc_credit_card_number * misc_rainbow_colour * misc_ssn * name_firstname * name_firstname_female * name_firstname_male * name_surname * name_title_female * name_title_female_all * name_title_male * name_title_male_all but I want to expand that over time with other useful data items. As a silly example of some of the types of things you can produce using very simple patterns try creating a file called colortest.txt containing the following text: &lt;html&gt; &lt;head&gt; &lt;style&gt; .coloritem{ float:left;padding:1px; margin:0; } &lt;/style&gt; &lt;/head&gt; &lt;body style="margin:0; padding:0;&gt; &lt;div style="width:800px; margin:0; padding:0;font-size:2px&gt; &lt;&lt;(&lt;span class="coloritem" style="background-color: rgb\([0-255],[0-255],[0-255]\)"&gt;&amp;nbsp;&lt;/span&gt;){10000}&gt;&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; and then run the following command in a terminal (you need to have tdg.exe in your path or have navigated to where it is downloaded) &gt; tdg -i c:\colortest.txt -o c:\colortest.html Try opening colortest.html in a browser to view your new random mosaic!
you'll love C# and visual studio.
One good approach is to take some Java code you've written and rewrite it in C#. You'll get a good feel for the differences in the language if you keep Googling "how do I do X in C#".
Link to actual project: https://github.com/aliostad/RandomGen
I think that it's only 'controversial' for people who never actually went in-depth with a strongly typed language with advanced type inference. For example, when I write in F#, I only put type annotations: * on top-level APIs * when needed (i.e. when type inference fails) And I can't say that it somehow detracts from the value of the source code; just the opposite - mental burden is *lower*, especially if you have a full IDE at hand. I understand though that if you only have a *text editor* then yes, it might be a slight drawback.
Yeah, I have that installed. It's nice having the basic functionality, but a shame it's not compatible with all the vim plugins =P
Cannot wait for C#6 for this one language feature alone.
Yeah, I didn't mean they're not doing the same thing, just looks different, but really aren't. Using the curly-bracket initializes completely slipped my mind, thanks again for spotting it and correcting it!
I understand. :) Just pointing out for those that may not be aware~ Still, good stuff.
That would have been the elegant way. ;-)
I've made some minor changes.. added some thread safetyness. https://github.com/AIBrain/RandomGen Btw, I had no idea you could embed resources, and then pull a stream from them. Thank you for teaching me that!
out of sheer interest: what are you working on? i know the wpf 3d is pretty limited in function and performance. also i couldnt find any real world application in our domain.. thus my interest :)
Be careful. Note that, because each of these helper methods creates a new Random each time, you are very very likely to get duplicate sequences in your code. Static / thread-local instances of System.Random would help in this regard. Of course, if you need cryptographically strong unique numbers/sequences, use RNGCryptoProvider.
What you're looking for is probably best accomplished through a [Regular Expression](http://msdn.microsoft.com/en-us/library/twcw2f1c\(v=vs.110\).aspx).
You would need to use RegEx.
You want to use Regular expresions. "_[0-9]{4}\.tif" should do the trick;
Excellent, this worked for me. Thanks for the help. if (Regex.IsMatch(tif, @"_[0-9]{4}\.tif")) { } 
Read this book. http://www.amazon.com/C-Depth-3rd-Jon-Skeet/dp/161729134X/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1410810230&amp;sr=1-1&amp;keywords=jon+skeet
var is simply syntactic sugar for when you don't want to type Dictionary&lt;string,List&lt;int&gt;&gt; twice.
RegEx.. 
Use Azure Mobile Services to create a thin backend (you can do it in NodeJS or .NET), and use the libraries available for WP to manage registration, authentication and querying the service.
Sounds really good! I'm definitely going to sign up on your website, unfortunately for you as a mentee.. At the moment I'm working in a book called "Visual C# 2005 in 24 hours", there's no reason behind the 2005, just because someone had this book for me.
The actual answer to your question is no, nicely answered by others to implement using RegEx.
Thanks! This is great, we want to help mentees too. 
Read up on WCF, REST, and entity framework 
Use Node.js to do a comparison for each combination using non-blocking threading.
Do you want to learn the language together and help each other? Lol I just really need someone to work with. SOS.
What.
Is your nick a reference to *Death likes me*? Edit: Disregard, I was thinking of *Dead like me*
I thought it was being called twice
It's being called twice from AddEnemy
Thank you! Welcome! :)
It is a reference, but to the track "Witness" made by a band Mindless Self Indulgence. I was having trouble coming up with a unique reddit username, so I decided to use lyrics of the band I was listening at the moment of registering. It is an awesome band, but YMMV, of course. PS: are you interested in learning C# or teaching C#?
How do you do non-blocking threading with C#? It is too hard.
What. Threads are, by default, non-blocking.
It's not a bad book to learn from, I thought it was a fun book because it pushes you to learn in a way that is actually useful. It puts the building blocks that you've learned previously to use instead of other books that just teach you something and then move on to something else.
Within the context of a class' (non-static) method, the "this" keyword is a reference to the object the method was called on. Suppose you have this code: ... A a = new A(); a.MyMethod(); // when this line is called... ... class A { public void MyMethod() { this.OtherMethod(); // ... "this" refers to "a". } } 
That's just a way to reference back to a method or property of a class that was instantiated. So if I have a class of something like **car** and I want it to lock the doors when I put it into drive, I could do something like the line below in a *running* loop for **car** if (gear == 'drive') { this.lockDoors(); } Hope that analogy helps!
Another way to do this without generics magic: public class Entity { public Entity() { } public int EntityVar; public virtual Entity Duplicate() { Entity r = new Entity(); copyEntityFields(r); return r; } protected void copyEntityFields(Entity entity) { entity.EntityVar = EntityVar; } } public class Prop : Entity { public Prop() { } public int PropVar; public override Entity Duplicate() { Prop r = new Prop(); copyPropFields(r); return r; } protected void copyPropFields(Prop prop) { copyEntityFields(r); r.PropVar = PropVar; } }
Firstly, hi Reddit and my English sucks :) Well there is **more than one** usage for **'this'**. [Click me MSDN](http://msdn.microsoft.com/en-GB/library/dk1507sz.aspx) --- I think the most common for you would be: * To qualify members hidden by similar names. One basic rule of OOP is to keep fields ("variables of methods") private. Your code should be as easy to read as possible. Therefore constructor params + field names are almost always equal. To differ them you can use the 'this.'-keyword. class Penis { private string name; private float length; public Penis(string name, float length) { this.name = name; this.length = length; } } class Programm { var myPenis = new Penis(@"Johnny", 18); } --- **However** I prefer the common convention to use '_' for private members: class Penis { private string _name; private float _length; public Penis(string name, float length) { _name = name; _length = length; } } class Programm { var _myPenis = new Penis(@"Johnny", 18); } ---
Most object-oriented languages reserve "this" as a keyword-variable, which is always a reference to the instantiation of the object currently in scope. If you think about programming like a written language (and the two are similar in many ways), then you can consider yourself an implementation of "Person", and the parallel of "this" would be words like "I" or "My". Just like you need a way to refer to yourself, so to is it useful for an object to refer to its self.
Note that, because 'this' refers to the object context, you can pass the object to another method from itself. public void registerWithGlobalClass() { //pass self-reference to another class' method globalClassInstance.registerObject(this); } Besides the otherwise mentioned duplicate variable names in parameters, that's about the only other time I can think of where you really need to use 'this' (and even so, it's usually not necessary unless your design necessitates it, which is probably rare).
It's actually in Microsoft's style guide to use the "this." notation for class members (I forget whether member functions are included in this). I don't like that style, but it's in there. The other use would be to pass a reference to the current object into a function as a parameter. 
Yeah they do they block the IO and that's the reason why .NET can't mapreduce HTTP requests.
An instance of 'A' could call A.Othermerhod() for itself, but what if it wanted to call it for another instance of 'A'? So 'this' method works around that, you call memberfunctions always with instance information, and for "current" instance it's 'this'.
Try adding your enemy control to the play area before adding animations to the storyboard. private void AddEnemy() { var enemy = new ContentControl {Template = Resources["EnemyTemplate"] as ControlTemplate}; playArea.Children.Add(enemy); AnimateEnemy(enemy, 0, playArea.ActualWidth - 100, "(Canvas.Left)"); AnimateEnemy(enemy, random.Next((int)playArea.ActualHeight - 100), random.Next((int)playArea.ActualHeight - 100), "(Canvas.Top)"); }
thank you, this was very informative for me.
This is what I've most practically used it for. In one of my programs I needed to pass a reference to the object I was instantiating, from the object itself. I simply passed (this). 
Or "myself". After all "this" is all about the object being able to know it's own identity. If there is no "this" the object can't determine its identity and thus not being able to reference its own methods or attributs unles given a reference.
Same as "Self" in Pascal. Same as "Me" in VB. 😉
If youre talking about Android Dot42 is free. However I haven't tried it yet. https://www.dot42.com There also is RemObjects Oxygene. http://www.remobjects.com/elements/oxygene/
Or, instead of wcf, webapi. Both have pros and cons.
Well then, I don't see AddEnemy being called either.
Sheesh, these explanations are so complicated. There really is no such thing as a "method". A method is a function that has an extra parameter that is passed to the method for you automatically (something like this). In the case of C#, it is called "this". You could write your own function with "this": // my bad pseudo-code class Car { float wight; string type; }; void function printCar ( Car this ) { // you explicitly passed Car to the function print (this.weight.toString() + " " + this.type ); } OR the "object-oriented" way: // my bad pseudo-code class Car { float wight; string type; void function printCar () { // it is implied here and the compiler will add it for you print (this.weight.toString() + " " + this.type ); }; }; So, when you call a method on an object like: Car theCar = new Car(); theCar.printCar(); Well, the compiler goes: Oh, theCar is the "this" and I will pass it to the function I created. Just like you did in your printCar function. theCar.printCar() is turned into printCar (theCar); There is also an implied parameter value in calculated properties like: class FooBaBa { ... protected int p_x = 0; public int x { get { return p_x; } set { p_x = value; } } } See, the set scope of the calculated property x is also gets compiled into a function using name-mangling magical stuff: FooBaBa_x_set ( FooBaBa this, int value ) { this.p_x = value; } 
Sure I want to, but at the moment I'm waiting on a job application as dynamics NAV developer. If they'll employ me I'll have to learn NAV development, if they won't, I'll be spending all my free time on C#. What is your C# knowledgde at the moment? I was getting comfortable with C# but it kinda sunk away because of doing it on my own.
Then you still have the evenings!
I've signed up aswell! http://www.perunity.com/user/richardcsharp
Welcome! 
I'm a new programmer just getting started with C#, let's just assume I have no knowledge about it at all. Because that would not be an inaccurate thing to say. I just got the book "Head First C#" and have been working through that.
Sounds good, I'm checking the pdf version of that book atm. Looks kinda different than the book I'm working through. 
AddEnemy is called from startButton_Click
One example why you need this: private int a; void Foo(int a) { this.a = a; }
Does the requirement specifically state it *has* to be an external database server? If not, just use SQL Server CE... [SQL Server Compact](http://en.wikipedia.org/wiki/SQL_Server_Compact)
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**SQL Server Compact**](https://en.wikipedia.org/wiki/SQL%20Server%20Compact): [](#sfw) --- &gt;__Microsoft SQL Server Compact__ (__SQL CE__) is a compact [relational database](https://en.wikipedia.org/wiki/Relational_database) produced by [Microsoft](https://en.wikipedia.org/wiki/Microsoft) for applications that run on mobile devices and desktops. Prior to the introduction of the desktop platform, it was known as *SQL Server for Windows CE* and *SQL Server Mobile Edition*. The latest release is the SQL Server Compact 4.0 supporting [.NET Framework 4.0](https://en.wikipedia.org/wiki/.NET_Framework), and dropping support for [Windows Mobile](https://en.wikipedia.org/wiki/Windows_Mobile) in this release. It includes both 32-bit and 64-bit native support. SQL CE targets occasionally connected applications and applications with an embedded database. It is free to download and redistribute. An [ODBC](https://en.wikipedia.org/wiki/Open_Database_Connectivity) driver for SQL CE does not exist, nor is one planned. Native applications may use SQL CE via [OLE DB](https://en.wikipedia.org/wiki/OLE_DB). &gt;==== &gt;[**Image**](https://i.imgur.com/6zcoSne.png) [^(i)](https://commons.wikimedia.org/wiki/File:Sql-server-ce-4-logo.png) - *SQL Server Compact 4.0 Logo* --- ^Interesting: [^Microsoft ^SQL ^Server](https://en.wikipedia.org/wiki/Microsoft_SQL_Server) ^| [^SQLite](https://en.wikipedia.org/wiki/SQLite) ^| [^Comparison ^of ^relational ^database ^management ^systems](https://en.wikipedia.org/wiki/Comparison_of_relational_database_management_systems) ^| [^SQL ^Server ^Express](https://en.wikipedia.org/wiki/SQL_Server_Express) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ckjv01n) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ckjv01n)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
I don't have any advice for courses specifically. I would recommend that you consider asking in /r/cscareerquestions (check our their readme/FAQ first).
haha, hilarious.
I'm not against type inference. I just don't like wanton var usage everywhere. 
This. Protip: Depending on browser requirements, v3.0 has a number of issues with IE8 and 9 when they implemented media queries heavily. Assuming its relevant since you are a corporate dev. URL to the legacy docs and library: getbootstrap.com/2.3.2/ 
http://www.pluralsight.com/training/Courses/TableOfContents/build-application-framework-aspdotnet-mvc-5 this might be useful. Pluralsight is quite cheap and worth having especially if your focus area is .net
Security training? The pluralsight course [Hack Yourself First](http://pluralsight.com/training/Courses/TableOfContents/hack-yourself-first) is pretty good.
this = the current object instance. class Thing { int Num { get; set; } Thing() { Num = 2; } void Foo() { Thing2 thing2 = new Thing2(); thing2.DoStuff(this); } void Bar() { this.Foo(); // does the same as the line below Foo(); // does the same as the line above } } class Thing2 { void DoStuff(Thing thing) { int x = thing.Num; // x = 2 } }
Definitely 2nd the pluralsight recommendations, includes MVC, security, and a lot of other really good videos.
The type of authentication you're talking about is called "federated identity". WS-Federation is one method of achieving this, and is supported in the .NET framework. Based on the information you've provided, I'd suggest setting up a single Identity Provider, and have all of your applications set up as Relying Parties. I'd recommend looking at Thinktecture's offerings to supplement the built-in .NET capabilities. Hope that points you in the right direction.
Appreciate the thought -- but I've attempted UIAutomation already. The data from the control just doesn't appear to be available via UIAutomation. I can get the class name, hwnd, control ID, etc, but the data from the control itself just doesn't seem to be accessible. It's really strange.
Hrm, this sounds messy. If that and the WM_GETTEXT don't work I would probably start to wonder if that control is a regular textbox. I don't suppose that UIspy or whatever the newer one is called shows you anything else you can use to get there? Like it is an embedded control or similar?
The fact that you have to defend your choice to investors and your peers just shows how fucking rotten the whole Silicon Valley and San Fran culture is. If you're not using the latest, Spacker-News-approved bullshit (RoR, node.js, webscale sharding, bootstrap go haskell blah blah blah) then automatically you and your product are on the back foot. They claim to be innovators, and I do think some real innovation comes from that area, but more than anything they're all about image. Almost everything I hear from 'that side' of programming is a whole lot of hype and little substance. And all I can think of when I listen to them talk is [this guy](https://www.youtube.com/watch?v=4YGDnfIytKI). 
The HBO show Silicon Valley made fun of the stupid buzzwords so well.
honestly 90% of tutorials for c# are in windows forms. Don't worry about finding new tutorials because basically nothing has changed in windows forms since vs 2005 or maybe 2008. 
pluralsight.com is the go to place for top quality .net tutorials. Unless you have some compelling reason, I would suggest you look to WPF for desktop UI rather than winforms.
 var urlPath = "http://media.blizzard.com/wow/icons/56/{0}.jpg"; picHead.ImageLocation = urlPath.format(equipment.items.head.icon); picNeck.ImageLocation = urlPath.format(equipment.items.neck.icon); picShoulder.ImageLocation = urlPath.format(equipment.items.shoulder.icon); picBack.ImageLocation = urlPath.format(equipment.items.back.icon); picChest.ImageLocation = urlPath.format(equipment.items.chest.icon); picWrists.ImageLocation = urlPath.format(equipment.items.wrist.icon); [String.format](http://stackoverflow.com/questions/1038746/equivalent-of-string-format-in-jquery)
Try creating a constant like: "http://media.blizzard.com/wow/icons/56/{0}.jpg" and use: picItem.ImageLocation = String.Format(yourConstant, equipment.items.ITEM.icon);
Well you could use a formated string but i'm not sure if it will look prettier (Notice the "{0}"): String url = "http://media.blizzard.com/wow/icons/56/{0}.jpg"; picHead.ImageLocation = String.Format(url, equipment.items.head.icon); picNeck.ImageLocation = String.Format(url, equipment.items.head.icon); picShoulder.ImageLocation = String.Format(url, equipment.items.shoulder.icon); picBack.ImageLocation = String.Format(url, equipment.items.back.icon); picChest.ImageLocation = String.Format(url, equipment.items.chest.icon); picWrists.ImageLocation = String.Format(url, equipment.items.wrist.icon); Unfortunately the only similar lines are the first two so you can´t really delete any of them.
Watching that show and Betas on Amazon made me happy I've never worked in the Valley.
Any plans to share this? Good error handling is hard to come by.
I'll be writing a blog entry on my website later in the week. Will post the link here when its done. Glad you like it.
Yeah showing stack traces to normal users isn't a good idea.
I know. Now it makes it even more cringey when I hear people using those made up words, or when start ups talking about making the world a better place with their product that has no way of making the world a better place.
This is a ridiculous statement. What's the difference? He actually will get better answers asking here. If you don't want to answer then don't.
I like it. May I suggest that you reformat the 'more detail' info? If you add line returns before each ' at ', it would make the stack trace much easier to read at a glance.
You might consider learning WPF instead. It has replaced WinForms the same way WinForms replaced MFC. Assuming you're using Visual Studio, the designer will feel basically the same as it has for years, but the XAML underneath is clearer and more concise (particularly if you are familiar with HTML). Here's a good resource to get you going: http://www.wpftutorial.net/HelloWPF.html
Thank you for your reply! I meant to get back to everyone earlier but it has been a crazy week. :)
Yes sir! Thanks for the reply I really appreciate it.
Yea it's pretty nasty. It's just weird. I don't understand how those UIPath tools are able to get it with their "native" tools. Any idea what they may be doing?
This is *always* a terrible idea. There's many ways to get the same benefit without giving attackers a handy tool.
Yea, innovative ways to repackage 30 year old ideas as cutting edge technology. 
Generally I prefer to record the stack to a database, along with other useful information, and give the user an ID if anything. They can report the ID and I can look it up in the database or, preferably, through an admin site connected to the database and see what really happened without risking a leak of important information. 
No clue. Now you have me curious too. 
Not a good idea to show that kind of errors to the end-user. If you want a painless log information for MVC, look up for Serilog.
Look up for Troy Hunt courses on Pluralsight, also his blog. http://www.troyhunt.com/
&gt; Spacker-News-approved bullshit There aren't many MS-world posts on HN, but when there are, there are rarely negative comments that aren't downvoted. RoR is out though, I see hate for it when it shows up anywhere ;)
If the methods are 300 lines long, then refactor. They are too long and almost certainly trying to do too much.
I don't mind validation checks that returns or throws early in the method. If you think they're hard to see, you need to write shorter methods or fix your syntax highlighting.
There is a golden rule of thumb that every developer should follow: If a method does not fit in one screen, then it is ripe for refactoring. 300 lines/method is just waaaaaaaaaaaaaaay too long. You could probably start by creating a ValidationCheck call and put all those there. I can only imagine one case when a goto is a nicer way to use than workarounds, and that is when you have to get out of some deeply nested loops, e.g.: for (...) { for (...) { for (...) { if (...) { goto fuck_this_im_leaving; } } } } fuck_this_im_leaving: ...
Are you trying to eliminate multiple returns? Don't. They're not all bad in modern languages like c#, and even if they *were* bad, a goto would be worse. Factor up your 300 line method like everyone else is saying. You have to find logical parts of the long method - and a "ValidationCheck" method is an obvious choice. If you do this a lot as you say, then you might look at helper libraries like [fluent validation](https://fluentvalidation.codeplex.com/). You don't say what kind of code this is, but for web work it's great for validating incoming DTOs. Validation code with fluent validation can be compact, readable, isolated and testable. 
Also, returns are actually telling you that the method ends when that particular validation occurs, whereas goto just signals a jump.
&gt;RoR is out though, I see hate for it when it shows up anywhere ;) About 1-2 years ago I saw many posts that titled something like "Did you already rewrote your RoR apps to Node.JS?". More like HipsterNews.
&gt;This is not well written code I think everyone can agree on that*. That is beside the point, what I was wondering is how my fellow reditors would react if they saw this instead: Goto statements !? in c# !? &gt;*The methods above are about 300 lines long. You need to refactor... [long methods are where classes go to hide](http://tech.pro/blog/1835/clean-code-function-length-and-hidden-classes) 
&gt; This is not well written code I think everyone can agree on that*. That is beside the point, what I was wondering is /.../ &gt; Edit: *The methods above are about 300 lines long. Is it not clear from the original entry that this detail was beside the point?
This is a valid point, you loose information by using the `goto`approach. 
Consider watching some of these videos: https://www.youtube.com/playlist?list=PLE783AE5991B563FA
Ignoring the fact that the discussion clearly was not meant to be about method length. I agree with using `goto` to escape deep nesting. Another use case is tear down that has to happen before the method returns. In that case "my" construct can be useful. You often see this in for example C code where you have to release memory and what not. 
Correct, but beside the point. The discussion was meant to focus on forward jumps using `goto`s. 
The point was not to eliminate multiple returns but rather to eliminate multiple calls to `this.ProcessResult`.
Dude, beat the dead horse some more. I clearly write in the text you quoted: &gt; That is beside the point I even admit that it's **not** good code: &gt; This is not well written code The post was meant to discuss `goto`-s not code length. 
You're forgetting that users will close the window before calling support anyways ;)
&gt; The post was meant to discuss goto-s not code length. Indeed... refactor the code, get rid of [gotos.](http://xkcd.com/292/) Easy as pie.
It sort of becomes the point just because not writing the code in such a rushed manner resolves your problem in a "better" way. Your question is really: "In what I fully accept is already rough code, can I use a technique that most would normally argue leads to code readability/maintainability/separation of concern problems?". Well, if it needs refactoring, doing that instead will solve your current problem more elegantly and make your and everyone else's life easier going forward.
Like everyone is saying, goto doesn't improve anything here. Give it up and stop being so defensive about what is clearly a bad idea. 
I am just trying to discuss **why** it so *clearly* is a bad idea.
I figured it would be useful for support... Clients using the software can call me and read it out and I can fix it live while I'm on the phone with them... Alternatively I want to set up a support dashboard and allow the user to submit this information as a bug that the system will email to me. In any case, it should go without saying that the user should never see this stuff anyway.
nice idea, thanks :)
Lets not forget that end users should **never** see this stuff... In any case, I'm thinking of setting up a support dashboard where the exceptions will be logged as they happen. I just know that, for me, I hate getting an error message "something bad happened" and nothing else. Its completely useless to me. I get what you guys mean about the stack trace, but I can also limit that to prevent its appearance to anything but an admin user. Loving the feedback in any case... learning a lot here.
You can do this instead of using *goto* if the issue is with changing ProcessResult in a single place: var result = new SomeResultType(); Func&lt;int&gt; returnFunction = ()=&gt;this.ProcessResult(result); if (/* validation fails */) { return returnFunction(); } // More code.. if ( /* Another validation fails */) { return returnFunction(); } // More code.. return returnFunction(); 
I would be very cautious in exposing stack traces to the user, this provides an insight in to the code that will be of interest to anyone looking to compromise your system. It will tell them about libraries you are using (so they can use known vulnerabilities) or provide a way to look at the structure of your own code.
Since you have little to no experience with web development I would start there. Get some books, write some small web apps and then have someone experienced review your code (if possible). Next, decide if you want to write it in ASP.net or MVC. MVC is the *buzz word* right now... If this is going to be an external facing site (open to the world), make sure you research security and OWASP. Next, have a plan of how you're going to tackle the project. Finally implement your plan.
Yeah, so then you want to reduce this to: if (InvalidForAnyReason()) { return this.ProcessResult(); } 
I think that's been adequately answered as well. It's decreasing maintainability and readability for no real gain. By going down this road you're building the foundation to a house of cards. You've already got a bad structure and if you're going to make changes anyway, why do you want to make changes that, at best, are a sideways move?
I think I might be missing the point but it seems like the entire block in both cases could be replaced with: return this.processResult(result) That is- the actual validation blocks aren't doing anything special (likely oversimplification making the example). Usually the validation logic I've written consists of a single method that is used to test validity, which returns an bitmask/enum flags indicating the failed sections. Since in the cases I've dealt with the validation is not computationally intensive, I test everything and return what isn't valid, or that everything is good to go. Each section |= with the value to return and then that value is returned at the end. I find the implementation illustrated hard to understand as a proxy example of what you actually are dealing with because it is redundant and both examples are logically equivalent to return new ProcessResult(new SomeResultType()); At any rate, IMO, goto has it's place but generally speaking, in terms of C#, the only application for it I can think of that cannot be written in a cleaner, more structural way would be breaking out from multiple control blocks. (The alternative is to use a flag which is a bit messy).
&gt; More like HipsterNews. That's the same bullshit that get's thrown at Reddit and just as wrong.
Why not look on eBay - or Gumtree? Pity you can't use [ebooks](https://archive.org/search.php?query=csharp%20AND%20mediatype%3Atexts)
If you're starting a new ASP.NET project I'll strongly recommend a combination of ASP.NET MVC and Web API. vNext is just the code name of the next version but there will always be a next version so just start with what's available now. http://www.asp.net/mvc Check out the videos on the right. MVC and Web API will be merged in vNext because after all, the only significant difference between the two of them is that one returns rendered templates and the other one returns JSON data. Single Page Apps are what you create when you don't want your web pages to refresh every time that you click on a button. (Think of Gmail.) In the .NET world they're usually comprised of Web API controllers that work in conjunction with JavaScript, presumably with the help of client side frameworks like AngularJS. Worry about Single Page Apps after you've learned ASP.NET MVC because even though SPAs are great they're not essential and because working with them involves mastering JavaScript and at least one client side JavaScript framework. Web Forms I can't recommend unless you'd like to mimic the drag and drop style of development of WinForms. Yes, it's very easy to get started with Web Forms but your development process will only grow increasingly complex as you try to implement more complicated things because you can only stretch the heavy Web Forms abstraction so far before it starts to break. Web Pages you don't have to worry about. It's a minimalist framework that's not meant to be used professionally even though some great technologies like Razor views were born out of it.
&gt; Next, decide if you want to write it in ASP.net or MVC. When talking about the specific framework and not about the concept MVC **is** ASP.NET. The choice is between ASP.NET WebForms and ASP.NET MVC. I'm sorry if I'm being pedantic but this is a source of confusion for newcomers.
While I appreciate your passion for C#, I would recommend you post your "we're hiring" blurb on a more appropriate subreddit; perhaps at /r/Jobopenings.
Sadly, there are no good automated tools for going from one to the other. You might be able to preserve some of the code if the desktop application has some wicked encapsulation in its architecture but in the real world this is seldom the case. However, you will have some useful tools at your disposal. The standard ASP.NET MVC templates use [Bootstrap](http://getbootstrap.com/), which will save you some time and effort. Bootstrap uses predefined styles that will allow you to concentrate on your application instead of having to worry about floating columns, different screen sizes, etc. And don't worry about downloading it, preparing it, or compiling it, because Visual Studio will take care of that for you. And Bootstrap is not a Microsoft technology. ASP.NET MVC was designed to work with the web so it is very common to use it with regular CSS and JavaScript components. Web Forms is quite the opposite. To save you from writing too much redundant code you will have scaffolding available to you. You write your data models as objects and the scaffolding will take care of reading those and writing basic controllers that take care of your CRUD options. If you want they'll even create your database and its tables and relationships for you. ASP.NET MVC is database agnostic but the built in tools work best with SQL Server. I'll recommend sticking to that database at least until you've become proficient with ASP.NET MVC. The Express version is free and quite capable.
If you want us to help you we need *details*. Specifically: * A snippet of the relevant code * What you expect to happen when the code runs * What actually happens when the code runs At the moment we can only guess at what you're trying to achieve and why it's not working for you and we *hate* guessing.
I apologize, here is a snippet of the code for problem A... &lt;Form 2&gt; namespace WindowsFormsApplication3 { public partial class Form2 : Form { public Form2() { InitializeComponent(); Pin_Num.PasswordChar='*'; Pin_Num.MaxLength = 4; } private void label1_Click(object sender, EventArgs e) { } private void button1_Click(object sender, EventArgs e) { try { String myConnection = "datasource=localhost;port=3306;username=root;password=Random"; MySqlConnection myConn = new MySqlConnection(myConnection); MySqlCommand SelectCommand = new MySqlCommand("SELECT * FROM bankdatabase.userinfo where Card_Num = '" + this.Card_Num.Text + "' and Pin_Num ='" + this.Pin_Num.Text + "';", myConn); MySqlDataReader myReader; myConn.Open(); myReader = SelectCommand.ExecuteReader(); int count = 0; while (myReader.Read()) { count = count + 1; } if (count == 1) { MessageBox.Show("Username and Password are Correct"); } else if (count &gt; 1) { MessageBox.Show("Duplicate Card Number and Pin Number ...Access Denied"); } else MessageBox.Show("Card Number or Pin are Incorrect ...Please try again"); myConn.Close(); } catch (Exception ex) { MessageBox.Show(ex.Message); } Form2 f2 = new Form2(); this.Hide(); Form3 form3 = new Form3(); form3.holdvalue = Card_Num.Text; form3.Show(); } &lt;Form 4&gt; namespace WindowsFormsApplication3 { public partial class Form4 : Form { private string Nm; public string Passvalue { get { return Nm; } set { Nm = value; } } int newBal; public Form4() { InitializeComponent(); String constring = "datasource=localhost;port=3306;username=root;password=Random"; string Query = "SELECT * FROM bankdatabase.userinfo where Card_Num='" + Nm + "' ;"; MySqlConnection conDataBase = new MySqlConnection(constring); MySqlCommand cmdDataBase = new MySqlCommand(Query, conDataBase); MySqlDataReader myReader; try { conDataBase.Open(); myReader = cmdDataBase.ExecuteReader(); while (myReader.Read()) { string fName = myReader.GetString("First_Name"); string sName = myReader.GetString("Last_Name"); int Bal = myReader.GetInt32("Balance"); Name_F.Text = fName; Name_L.Text = sName; Bal_txt.Text = Bal.ToString(); } What I want to happen is when I do the click button event on Form 2, I want the users card number to be saved so that I can move it to form 4 and use it to search my database and provide the information for the user that has logged in. The What isn't is it's not giving me the information even tho the card number is saved in the Nm variable and I have it searching the database. It's coming back with nothing to the program. I can not figure out why that is.
Looks like a Unix timestamp in milliseconds. var dt = (new DateTime(1970, 1, 1)).AddMilliseconds(1410970437344); Debug.Print("{0:s}", dt); // 2014-09-17T16:13:57 Debug.Print("{0:s}", dt.ToLocalTime()); // 2014-09-17T18:13:57 (in my case)
Oh shit. I am stupid. I didn't think about that. Thanks!
I've removed everything I had before because I'm almost certain you are doing everything in the constructor after re-reading what you posted. Either don't perform all your database operations in the constructor ("public Form4() {}") or overload the constructor to take the credit number (especially if it's necessary to ever use Form4). So instead of: public Form4() { InitializeComponent(); String constring = "datasource=localhost;port=3306;username=root;password=Random"; string Query = "SELECT * FROM bankdatabase.userinfo where Card_Num='" + Nm + "' ;"; MySqlConnection conDataBase = new MySqlConnection(constring); MySqlCommand cmdDataBase = new MySqlCommand(Query, conDataBase); MySqlDataReader myReader; try { conDataBase.Open(); myReader = cmdDataBase.ExecuteReader(); while (myReader.Read()) { string fName = myReader.GetString("First_Name"); string sName = myReader.GetString("Last_Name"); int Bal = myReader.GetInt32("Balance"); Name_F.Text = fName; Name_L.Text = sName; Bal_txt.Text = Bal.ToString(); } You would have: public Form4() { InitializeComponent(); } public Form4(string creditCardNumber) { InitializeComponent(); String constring = "datasource=localhost;port=3306;username=root;password=Random"; string Query = "SELECT * FROM bankdatabase.userinfo where Card_Num='" + creditCardNumber+ "' ;"; MySqlConnection conDataBase = new MySqlConnection(constring); MySqlCommand cmdDataBase = new MySqlCommand(Query, conDataBase); MySqlDataReader myReader; try { conDataBase.Open(); myReader = cmdDataBase.ExecuteReader(); while (myReader.Read()) { string fName = myReader.GetString("First_Name"); string sName = myReader.GetString("Last_Name"); int Bal = myReader.GetInt32("Balance"); Name_F.Text = fName; Name_L.Text = sName; Bal_txt.Text = Bal.ToString(); } }
You can get that also without any end-user interaction. https://raygun.io/ For me, it's a expensive solution, so I have to build my own using Serilog and Azure services. 
Thank you very much, while what you did didn't help exactly it showed me where my error was and I was able to fix it, thanks again! 
Name each CB with a name like this CB_5 or CB_10 and create a Dictionary where CB name was the Key and the amount you want it to be worth is the value. Or split on _ and take the second value. This is probably bad practice, but it'll work... 
http://www.microsoftvirtualacademy.com/training-courses/introduction-to-asp-net-mvc
This looks like it would be best approached using recursion. I've never played with the registry, but something along these lines could get the job done. Since the target could be in multiple keys, you could pass in a list which you append to, then filter it once the call is finished - if you don't want to add duplicates, you'd probably have to have a but more involved recursive case. **Edit**: Formatting and fixed dumb recursion which wouldn't compile RegistryKey SearchKey(RegistryKey root, List&lt;RegistryKey&gt; keysWhichMatch, string target) { // Better base case maybe? if (rootKey == null) { return null; } else if (rootKey.Value == target) { return rootKey; } else { foreach (subkey in rootKey.SubKeys) { RegistryKey key = SearchKey(subkey, keysWhichMatch, target); if (key != null) { keysWhichMatch.Add(keys); } } } return keysWhichMatch.First(); }
Maybe use the .tag property?
I think I see what you're saying. If it works the way I'm thinking, that should be the answer. I'll try to do something like this. Thanks! 
You could create a class that extends the checkbox class and adds the "value" functionality you describe like this: public partial class Form1 : Form { public Form1() { InitializeComponent(); checkBox1.CheckedValue = 10; checkBox1.UncheckedValue = 20; } private void checkBox1_CheckedChanged(object sender, EventArgs e) { MessageBox.Show(checkBox1.Value.ToString()); } } public class ValuedCheckBox : CheckBox { private double _checkedValue; public double CheckedValue { set { _checkedValue = value; } } private double _uncheckedValue; public double UncheckedValue { set { _uncheckedValue = value; } } public double Value { get { if (this.Checked) return _checkedValue; else return _uncheckedValue; } } }
That's the easiest way as long as it's a simple relationship. For more complex scenarios the suggestion for custom checkboxes is the right approach.
This is pretty slick. Not gonna lie.
Gotta bunch of stuff in the V3 branch for the next version which ill publish soon. I have it to the point now where i can start doing some interesting things beyond simple data production. 
What if it's a large switch that handles strings returned by an interface of another program to fire the right event?
/u/davybrion points out rightly that returning early is a good pattern for ensuring correct operation of your code. As for specifically discussing the use of GOTO, I'm sure that there is some valid use for it - MS do use it in the internals of some of the numerics parsing code iirc. In this particular case, regardless of the method length, it indicates that perhaps you need to consider refactoring the validation steps out. An argument could be made that in terms of SOLID principles, determining whether something is valid is separate from how you actually deal with what to do with the message/file/request you're processing. Indiscriminate use of GOTO when returning early would've been much more appropriate, has been the cause of actual real-world security issues. See https://www.imperialviolet.org/2014/02/22/applebug.html for the most recent and prominent one. In the linked case, returning false early on an internal method and leaving the caller to do the cleanup if failed would've been best - and would've ensured a much more visible error where SSL always failed to work on that path. Effectively you're asking "Is it okay to use Goto in this scenario"... well, the community is clearly telling you that a) no, it's not and b) jebus, refactor that SOB. Even a very small amount of refactoring would get you what you want - not having to have the this.ProcessResult call everywhere. Take this public SomeResultType Validate(InputType input) { var result = new SomeResultType(); if (/* validation fails */) { return this.ProcessResult(result); } // More code.. if ( /* Another validation fails */) { return this.ProcessResult(result); } // More code.. return this.ProcessResult(result); } and do this: public SomeResultType Validate(InputType input) { var result = new SomeResultType(); if (ValidateInt(input, result)) { // do valid path } else { return this.ProcessResult(result); } } private bool ValidateInt(InptutType input, SomeResultType result) { if (/* validation fails */) { return false; } // More code.. if ( /* Another validation fails */) { return false; } // More code.. return true; }
No problem! It sounds like a legitimately interesting problem. I'm curious about ways to optimize it further, since C# doesn't implement tail-call recursion.
Don't do this.
I don't see you executing Query_new anywhere, just creating the command. Also, don't concatenate strings to create sql queries, you are just begging for Sql injection. Use parameterized queries.
This really isn't a C# question. At the risk of doing your homework: The problem, put another way, is you have two parallel lines (the top and bottom of the trapezoid), and you need to figure out the distance between them. That should be enough to set you on the right path.
no I get that I can use a right angle triangle to figure it out, but I need to figure out a way to find the interception point of the right triangle.
No, I didn't suggest to use a right angle triangle. [Calculate the four lines of your trapezoid](http://www.mathsisfun.com/algebra/line-equation-2points.html). Figure out which two share the same slope, and for those two lines, [calculate the distance](http://en.wikipedia.org/wiki/Distance_between_two_straight_lines) between them. And if that's not enough, maybe check out /r/cheatatmathhomework/ or some other math-specific area.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Distance between two straight lines**](https://en.wikipedia.org/wiki/Distance%20between%20two%20straight%20lines): [](#sfw) --- &gt; &gt;The __[distance](https://en.wikipedia.org/wiki/Distance) between two [straight lines](https://en.wikipedia.org/wiki/Line_(geometry\))__ in the plane is the minimum distance between any two points lying on the lines. In case of intersecting lines, the distance between them is zero, because the minimum distance between them is zero (at the point of intersection); whereas in case of two [parallel](https://en.wikipedia.org/wiki/Parallel_(geometry\)) lines, it is the perpendicular distance from a [point](https://en.wikipedia.org/wiki/Point_(geometry\)) on one line to the other line. &gt; --- ^Interesting: [^Great ^circle](https://en.wikipedia.org/wiki/Great_circle) ^| [^Cartesian ^coordinate ^system](https://en.wikipedia.org/wiki/Cartesian_coordinate_system) ^| [^Composition ^\(visual ^arts)](https://en.wikipedia.org/wiki/Composition_\(visual_arts\)) ^| [^Great-circle ^distance](https://en.wikipedia.org/wiki/Great-circle_distance) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ckld7n9) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ckld7n9)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
http://msdn.microsoft.com/en-us/library/5011f09h.aspx
The USPS has a web api for doing this. Not sure if it costs money or not. https://www.usps.com/business/web-tools-apis/address-information.htm 
This will work just fine but you will hate yourself the next time it comes to maintaining the code.
If you have such deeply nested loops, then it's better time for refactoring instead of goto-hackescapes.
Fundamentals of programming in C#
I think what you're looking for is geocoding. Google has an [API](https://developers.google.com/maps/documentation/geocoding/) for this that is free if you use it publicly.
All you've done is rename the return statement. You still have an early return.
Is this any different to writing: public class ValuedCheckBox : CheckBox { public double CheckedValue { set; } public double UncheckedValue { set; } public double Value { get { if (this.Checked) return CheckedValue; else return UncheckedValue; } } } if so, why? I've never really grasped when to use the shorthand declaration and when not to.
Consider using a service such as MelissaData (http://www.melissadata.com/dqt/api-web-services.htm)
Thank you for clarifying
I should note that there is one difference: in dregan's version the properties are write-only, while auto properties have to be read-write (because you can't access the automatically generated backing field, so if you couldn't either read or write to the property it would be useless). What you can do however to achieve basically the same effect is set different access levels for the getter and setter, e.g. public string Foo { get; private set; } // can only be set by the containing class itself In this case however I see no practical reason for that, though. It will only lead to issues when editing the control in the Forms designer.
I just experimented some with this and it looks like simply leaving the get; out achieves the same functionality as dregans code. I get the same error when trying to get the property: &gt; The property or indexer cannot be used in this context because it lacks the get accessor The best way would be as you wrote above, with a private set.
PAF files are good but like most things in life, they cost.
I was under the impression that auto properties without both getter and setter wouldn't even compile, but I could be mistaken.
Also, please mark your cross-posts as such.
It's mostly force of habit. I like to separate the internal properties of my classes from the external ones to give the class more control over how the properties behave. If there needed to be validation to make sure that the values were non negative (for example) or verify format if they were strings, or if you later find that you need to implement INotifyPropertyChanged, for data binding purposes, this functionality could be easily added. Doing it the way you describe is perfectly acceptable.
It also dramatically increases the probability of a [Velociraptor attack](http://xkcd.com/292/).
Just remember that the token will be sent in each request to the same domain, what implies an overhead. Tokens can get huge, and cookies... as far as I remember are limited to 4kB? You may store the token in local storage, send it to the server the first time and return a smaller cookie valid for some time.
Sorry; didn't realise this was normal; will remember this in future!
This is explicitly mentioned in the post. "get; private set" is "Observational immutability:" as at http://blogs.msdn.com/b/ericlippert/archive/2007/11/13/immutability-in-c-part-one-kinds-of-immutability.aspx but readonly properties could be used too but you need a backing field which makes the class definition longer (until readonly auto properties come along in the next C#)
Can you give some topics of interest under OWASP to help point us in the right direction?
I confirmed that it does compile with one or both of them.
Thanks for clarifying. Is there any shortcut to write the getters and setters like you did? I know of prop and propg but there is already so little work behind writing them the shorthand way so I barely use it.
Please, nix the image spam. The mass of images breaks the article's train of though so, so effectively. edit: there are 22 irrelevant images over 2300 words - the ~100 word/junk-image ratio is just silly.
I concur. Can't really focus on what's being said when there's DBZ photos everywhere.
&gt; In my opinion, the best option is the third one where you use an interface type [...] In brief, you will be able to assign any other type which implements IList to list3 – for example your own type. When using the 1st – such a possibility does not exist. Yea... I would say You shouldn't really assign a new object to it anyways.
you can use propfull to auto-generate the get and set functions.
Furthermore, there is a minor `foreach` optimization when you use `List&lt;T&gt;` over `IList&lt;T&gt;`. The call to `GetEnumerator` for `List` will be non-virtual and it will return a concrete `struct` enumerator which reduces heap and the subsequent calls to `Current` and `MoveNext` will be non-virtual. When you type it as `IList&lt;T&gt;`, the call will be virtual and return a boxed `IEnumerator&lt;T&gt;`, and in turn its calls to `Current` and `MoveNext` will be virtual as well. Really though, unless you've got a tonne of iterations and _actually measured_ a performance bottleneck from it, it isn't something you should normally concern yourself with. Like OP said, it's a topic all onto itself with varying opinions one way or the other. _Personally_, my mutable collections are either private class implementation details, used temporarily as local variables in a method, or intended to be one-off standalone collections of data that aren't shared or used anywhere else. In practice, the idea of being able to assign a different implementation of `IList&lt;T&gt;` has never happened for me. For method return values and input parameters, I do frequently use `IEnumerable&lt;T&gt;` instead of a `List&lt;T&gt;` (or `IList&lt;T&gt;`). This is usually in the context of nobody should know or even care that this is a sized collection that I can access the size of or arbitrarily access elements of. All I need to do is _iterate_ on it; don't care about _anything_ else. Ultimately, I use whatever I feel communicates my _intent_ the most and provides the most flexibility/simplicity/readability for the _callers_. * Does my underlying method only need to iterate on the input parameter? Then use `IEnumerable&lt;T&gt;`. * This allows callers to pass in almost _anything_ to my API. * Am I returning an independent, standalone collection and I don't care what the calling code does with it (that is, it could assign it, add to it, remove from it, iterate it, LINQ query it) and it's not using deferred execution? Then I typically toss back a `List&lt;T&gt;`. * This allows callers to easily do what they wish with my API; be it query then add stuff, concat stuff, check the count of objects return, they _know_ that execution is _not_ deferred, easily turn it into a read-only collection (via `.AsReadOnly()`), assign it to a private `List&lt;T&gt;` field. And nothing stops the calling API from treating it as `IList&lt;T&gt;` anyway by implicitly upcasting it to a variable typed as such. * Am I providing some deferred execution set of data, or the calling code is likely to make a LINQ query or just iterate on it or communicate that it should be some sort of "read-only" set*? Return an `IEnumerable&lt;T&gt;`. * This is a bit more tricky; there is nothing explicit about `IEnumerable&lt;T&gt;` that indicates that it's deferred or the concrete type is immutable. _By convention_, most/all of my API assumes that if it's returning `IEnumerable&lt;T&gt;`, it's deferred and read-only. \* Note that if I am intending to return a read-only set, I do truly return a read-only collection/enumerable of some sort. I don't simply upcast some private stateful dataset to `IEnumerable&lt;T&gt;` and hope the calling API doesn't downcast it and start modifying my internal private state.
Well, a `private set` is about as close you can get. You can set to either.
Great points. tl;dr Code first for maintainability and sanity, performance optimize only after you validate an actual performance issue. Otherwise you spend lots of time developing for problems that do not exist. 
C#5: class C { private readonly int i; public int I { get { return i; } } public C(int i) { this.i = i; } } C#6/experimental: class C(int i) { public int I { get; } = i; }
[OWASP Top 10](https://www.owasp.org/index.php/Top_10_2013-Top_10)
As above: Not immutable. If you *want* you can mutate the state.
Well, I think if You want to do immutability correctly, You have to be able to *completely* disable write Access...
You mean completely as in even preventing reflection _abuse_? Short of life-critical applications, I disagree. You don't have control over third parties abusing it. And if they do, the onus isn't on you to make a failsafe system. And where do you draw the line? What about external memory manipulation? I think it's reasonable to consider an completely immutable _API_ layer as "correct". EDIT: Just to clarify, I mean private as well as public facing API. So, if I have fields intended to be immutable, I mark them as `readonly` just to make sure **I** don't do something boneheaded _and_ to declare my intent that it _is_ immutable.
Well, I was thinking of when you're loading third-party dlls as plugins... don't neccessarily let those tinker with your internal state without you specifically allowing it... I think you can set security stuff when loading assemblies at runtime...
It's not, he is just being an ass. Reddit automatically marks cross-posts as such by creating a "other discussions" tab at the top of the page. 
This isn't a newsgroup from the 1990's. There is no reason to clutter up the headline with metadata, especially since it will invariably be out of date.
This is unreadable with the pictures.
The readonly modifier isn't enforced by the CLR. When faced with reflection, it is no different than using a private setter that isn't called outside of the constructor. (That said, I feel that readonly makes the intent more clear.)
Thanks, a very good reply. I did not know of that security issue. Thanks for the link!
Awesome, thanks! 
Sounds like you experienced an ID ten T error code.
I have indeed experienced an ID10T error code :D I was too quick on the trigger. 
Yeah, that's the point. Not showing to the end user what really causes the error. You always have to show a more friendly version of that exception. However, for developers it is critical to what caused it. If you don't want to implement it, you always can pay for a 3rd party service (like Raygun).
System is the top level namespace in the mscorlib library.
The images are also indecipherable at 4k... 
What's a common cause? Quite a few things I mentioned. Immutability? Deferred execution? Struct iterators?
goto used in a very restricted way with informatively named labels can be the right tool for the job. to dogmatically insist otherwise is ridiculous
Huh, that's actually really helpful. I'd always just assumed it was for legacy reasons, and I consider myself a seasoned C# user! 
Yeah, I've been pretty surprised (read: disappointed) by the general post quality in this subreddit since I subscribed a few weeks ago.
CellBeginEdit and CellEndEdit. Does sort really fire before the cell is validated? Why do you need to bypass the event? The usual way is to set a boolean variable on the form to indicate it is initializing which you can check in any event handlers that you don't want to run during load.
The boxing of the enumerators in a for each loop where an interface hides the actual generic type. Doing these kinds of loops in an update game loop causes lots of garbage which leads to pauses on Xbox due to the way the hardware handles garbage collection.
Okay, so, by default classes are *internal* and members (fields, methods) are *private*. What does this mean? It means that, for example, your MySQLConnectionHandler was *internal*. *internal* accessibility means that class can only be seen/used from inside your own code, e.g. inside the assembly (and, sometimes, others too, but ignore this for now). However, what you probably did was try to have a *public* or *protected* MySQLConnectionHandler as a field in a *public* class. Now, this means that the compiler has a problem. Because, you have a public field in a public class, that means everyone should be able to see it. But the field type is an internal class, so that means only your code should be able to see it. Clearly, those can't both be true at the same time, so, you get a compiler error: **Inconsistent accessibility**. Hope that helps. 
Why would you...what?...that doesn't make any sense. It would be difficult to do, and not gain you anything and might easily crash. No matter what you compile against, the system provided mscorlib is used runtime. Also, trust me, you cannot hope to improve performance or size by cleaning up mscorlib with resharper :p
&gt; Okay, so, by default classes are internal and members (fields, methods) are private. Also events, properties and inner classes count as members here.
Actually there are quite alot of unused usings, redundancies and some "optimizations" suggested by resharper, but that is besides the point if it will crash at runtime
I am on different computer now so I can't see my whole code now but I think I tried to send my MySQLConnectionHandler as parameter to other class and I guess it is like you said and it was internal and therefore didn't work but when I made MySQLConnectionHandler public it started working. I have strong java background and there it would have worked straight away so that's what confused me. Thanks for your answer it was really helpful.
&gt; The target is NOT folks who take themselves so seriously they think they never do dumb shit This is not a stupid mistake like confusing == and =. You were confusing calling a function with a goto. That's not idiocy, that's simply not knowing very much about programming yet. 
I find this _really_ confusing. In several instances, you're mixing dollars and cents. For example: Money money1 = new Money(20m); //twenty dollars Money money2 = new Money(20); //twenty cents decimal value1 = money1; //value1 is assigned 20 long value2 = (long)money1; //value2 is assigned 2000 If it were up to me, I'd ditch the public constructors and make explicitly named static factory methods (and ones that don't care too much about type inputs) similar to the `TimeSpan` methods (like [`FromDays`](http://msdn.microsoft.com/en-us/library/system.timespan.fromdays%28v=vs.110%29.aspx), [`FromSeconds`](http://msdn.microsoft.com/en-us/library/system.timespan.fromseconds%28v=vs.110%29.aspx), [`FromMilliseconds`](http://msdn.microsoft.com/en-us/library/system.timespan.frommilliseconds%28v=vs.110%29.aspx)) . For example: Money money1 = Money.FromDollars(20); Money money2 = Money.FromCents(20); Money money3 = Money.FromDollarsAndCents(20, 57); //$20.57 Honestly not sure how I'd name the last one, but I like the idea of providing an integral number for both components rather than passing in a floating point number, especially for currency. (and of course, you have other caveats like, what if you say `FromDollarsAndCents(20, 350)`? Would that result in $23.50 or throw an `ArgumentOutOfRangeException`?) Similarly, getting output, consolidate it. I'd say _only_ implicitly/explicitly convert to `decimal` (_maybe_ `double`), ditch the other conversions altogether, and if you want to get the cents, like TimeSpan's [`Milliseconds`](http://msdn.microsoft.com/en-us/library/system.timespan.milliseconds%28v=vs.110%29.aspx) and [`TotalMilliseconds`](http://msdn.microsoft.com/en-us/library/system.timespan.totalmilliseconds%28v=vs.110%29.aspx) properties, provide `TotalCents` and `Cents` properties: Money money = Money.FromDollarsAndCents(20, 57); //$20.57 int totalCents = money.TotalCents; //2057 int centsComponent = money.Cents; //57 And naturally, have a `Dollars` property. The `Round` property isn't really rounding, it's truncating. If your intent is to supply the dollars component of the money, then it should be named `Dollars` (or some equivalent). Calling it `Round` implies that it will round to the nearest dollar (or cent? Again, the naming is _not_ clear on what it's providing). So: Money money = Money.FromDollarsAndCents(20, 99); //$20.99 long rounded = money.Round; //should this be 21 or 20? Right now returns 20 If you want to replace the built-in types for handling money, I might also suggest you implement the various arithmetic operators (`+, -, *, /`) so that you can work with the `Money` objects directly without converting two `Money` objects to `decimal`, just to add the values, then convert that result back to `Money`. Finally, since it's immutable and only wrapping a single underlying value, and for most intents and purposes, it's probably treated _like_ a value-type, consider declaring it as a `struct` instead of a `class`.
CellBeginEdit is exactly what I was looking for.. I was needing to bypass events because the way I was trying to do it was wrong hah. CellBeginEdit works like a charm.. I had been working on this thing for too long when I was trying to figure it out.. my brain was scrambled. Thanks a ton!!
From my perspective, the whole `Money` class as presented in the article does not really provide any significant value over just using `decimal`. I don't know, maybe I'm missing something here...
I wish it was as popular as the other subreddits.
This code adds a "flame" effect to a rendered image (which is simply hello world in the example) by using bit manipulation. It creates two buffers, and copies one buffer over the other and adds a blur effect to it. The copy also has a y offset of one resulting in the "scrolling" effect. When it is done, it swaps the two buffers. It uses one thread, but could be improved by more threads (since one buffer is always read only and the other is write-only) This code is written to show that you can actually get decent frame-rates in C#, even with GDI+. In order to compile the code unsafe must be enabled on the compiler.
Beautiful reply and echoes my thoughts and then some. I wish I could afford to give you gold. :(
Wow, way to open yourself up to hackers. My favourite error handler is ELMAH.
very cool thanks for sharing!
&gt; “not measuring, what you think you are measuring“ Benchmarking article from Captain Kirk. Interesting.
Not to mention this is only applicable for USD, which means calling it 'Money' is really not reflective of what it does. But then again I write code for Forex applications, so I'm a little too familiar with the issue. :)
It looks like when clicking the search button, you have some code that registers this javascript on the page: script type="text/javascript"&gt; //&lt;![CDATA[ showMessage(ex);//]]&gt; &lt;/script&gt; But ex is undefined, so it causes a javascript error - I'm guessing it's the caught exception variable in your try/catch, but there's nothing like that in the code you linked.
Have you checked your query against your database to ensure the values you're expecting are being returned? Are the variables you're passing to that database populated? The code appeard readable. Id take the conditional checks out of the reader but thats just me. 
I don't see the try/catch in your C# code. All I see is the "using" block. Does your try/catch block just wrap your using block? If so, I would guess it looks something like this: try { using (OdbcConnection ...) { ... your code here... } } catch(Exception ex) { Page.ClientScript.RegisterStartupScript(Page.GetType(), "error", "showMessage(ex);", true); } That is my guess, because your javascript call to the 'showMessage' method assumes a variable named 'ex' exists. It doesn't in this context. The variable 'ex' exists only in the scope of the catch block, in the server code. Once the server creates the HTML of the page and sends it down to the client, 'ex' is gone. You need to grab the string message of the exception while you're processing the request on the server, and dump the message itself into your call to 'showMessage', which will be executed on the browser. Your resulting javascript snippet that gets rendered to your page's HTML should look something like this: showMessage('Error, could not open the database connection because blah blah blah'); Not like this: showMessage(ex); To accomplish this, you probably want to do something like in your catch block: Page.ClientScript.RegisterStartupScript(Page.GetType(), "error", "showMessage('" + ex.ToString() +"');", true); That should get your exception message displayed in the browser. With respect to the actual exception that is being thrown on the server, my guess would be that your SQL statement is invalid because you are using a reserved keyword (Count) as an alias for a result column. You might try wrapping your column alias in brackets, like this: string queryString = "SELECT COUNT(1) AS [COUNT] FROM T_HOME WHERE table LIKE '%param%'"; For that matter, I'd be surprised if "table" isn't a reserved keyword too. Just what exactly are you trying to query from the database. What is the table name and column that you are trying to filter on?
That's in the master page
Yes I have. 
&gt; That is my guess, because your javascript call to the 'showMessage' method assumes a variable named 'ex' exists. It doesn't in this context. The variable 'ex' exists only in the scope of the catch block, in the server code. Once the server creates the HTML of the page and sends it down to the client, 'ex' is gone. This was the issue. 
I like the way you think. I work on .NET (in particular, my team owns mscorlib), and am constantly thinking about things like that. :) First of all, it is possible to *build* your own mscorlib. Try it, call csc.exe and pass /nostdlib. You'll notice that the compiler complains about a bunch of missing types - define them all, and you'll have your own mscorlib! Unfortunately, you will not be able to use that mscorlib as a replacement for .NET Framework's version. The runtime and mscorlib are extremely tied to each - change the runtime, you need to ship a new mscorlib. Change mscorlib, you need to ship a new runtime. Even if you could replace it with a slimmed down version, you might even performance worse: First of all, we run a process over all of our binaries before we release where we reorder sections within it based on commonly used scenarios ("IBC training"). We put code/data that is commonly used together, for example, the startup of a WPF app, in close proximity of each other. Then secondly, we run a process called NGEN over the assemblies, which pre-compiles the IL assembly into native format so that it doesn't have to be "JITTED" (Just-In-Time Compiled) at runtime. You can find more about NGEN here: http://msdn.microsoft.com/en-us/library/6t9t5wcf(v=vs.110).aspx.
Now say thank you. ;)
So, did you find a set of requirements? Or did you already finish your project?
First of all: To format your code in reddit properly, you need to have 4 spaces in front of each code line and you need an empty line before and after your code. Formatted it would look like this: Console.WriteLine("Hi What is your age?"); string userValue = Console.ReadLine(); if (userValue == "1") { Console.Writeline("Your young"); Console.ReadLine(); } The problem here is that you are reading in a `string` and want to compare to a numeric range (1 to 13). You can't do this, you can only compare numeric values to numeric values. But you can't read in a numeric value.. But you can parse a numeric value from a string using `int.Parse()`! Using this your code would look like this: Console.WriteLine("Hi What is your age?"); string userValue = Console.ReadLine(); int userAge = int.Parse(userValue); if (userAge == 1) { Console.Writeline("Your young"); Console.ReadLine(); } Now you have an `int`, a numeric value. Note that it's comparing to the number `1` now, not the string `"1"` anymore. And now you can compare it to a range: Console.WriteLine("Hi What is your age?"); string userValue = Console.ReadLine(); int userAge = int.Parse(userValue); if (userAge &gt;= 1 &amp;&amp; userAge &lt;= 13) { Console.Writeline("Your young"); Console.ReadLine(); } Here we see if the `userAge` is *larger or equal* than 1 **and** *less or equal* than 13. A tricky part about parsing numeric values from strings is that the user can just type in whatever he wants. If he's not typing in a number, but e.g. a name or just crap? Then `int.Parse()` will throw an exception, an error, and your program will crash. But for this we have `int.TryParse()` which will try to parse the string, returns whether it succeeded or not and writes the result to another variable. Console.WriteLine("Hi What is your age?"); string userValue = Console.ReadLine(); int userAge; if (!int.TryParse(userValue, out userAge)) { Console.WriteLine("You did not enter a valid age."); } else if (userAge &gt;= 1 &amp;&amp; userAge &lt;= 13) { Console.Writeline("Your young"); } Console.ReadLine(); **And last but most important:** It's fucking *you're young*, not *your young*. "You're" stands for "You are". Before continuing with C# you should read and learn this: http://www.wikihow.com/Use-You're-and-Your
Ah I see what you did wrong. It's actually a you're syntax error.
My thoughts aswell. If you are using money, then you use decimal. Then formatting is just a simple ToString("c"). If anything the terminology used is more indicative of USD, making it less useful than decimal. If someone could make a Money class that would handle non-decimal based currencies as well as decimal ones, that would be useful.
I agree with everything but the end. Just say it in a nicer fasion because context is everything. I would actually do this to piss off my friends. He also could be second language. so yeah maybe he got it wrong or maybe he did it on purpose, moral is don't be an asshat.
You must be new here... Angular doesn't really do "nice".
How are you running the program?
Hmm, I just tried it out in Xamarin Studio and didn't have any issues. Have you tried running the executable directly?
forgot to mention i am on mac. maybe its how i set up the program. i did new solution -&gt; c# -&gt; blank
thanks anyway man! 
Try navigating to the project's output directory and running the executable from Terminal. You'll have to find your mono binary, which will be somewhere inside Xamarin Studio.app.
No, XNA (or MonoGame for that matter) is an excellent framework for 2D games and also 3D games if you put some more effort in. XNA may require some boilerplate because it doesn't have things like GameObjects built in, but it can do everything Unity can while being significantly faster.
made a new project. this time as a 'c# console' type. Now it works fine. 
Microsoft setup a MSDN page that might help: [C# for C++ Developers](http://msdn.microsoft.com/en-us/library/yyaad03b%28v=vs.90%29.aspx)
Great reference, thanks! I'll get reading. Is there anything even more comprehensive?
It's not the only choice but it is the best one. 
C++ is so big it's hard to come up with an exhaustive list. Plus it's a real paradigm-shift in certian places. Anything in particular you need help with? The two big ones I guess are: Don't do RAII, use IDisposable, and don't try to manage memory. 
This is so confusing to someone who's new to programming. xD So basically I should be able to create games using only MonoGame? Will I have to do a lot more work to get everything working with MonoGame than if I used Unity3D? A lot of people seem to be talking about Xamarin over at MogoGame, is that something you need or is it simply for making games accessible across different platforms? It has quite a hefty price as well.
Its not the only road, but its the only sensible one You can do a lot with the free version of unity I ranted until my fingers bled about MS retiring XNA. They were trying to build a new platform and then killed off the best and most learned dev toolset, that worked across devices, a year or so into the journey. Don't discount monogame etc. Just because MS have stopped further development of XNA doesn't mean you probably still cant do everything you need to. It was a solid platform and when they "killed" it - that didn't mean that devices would stop responding to it - it just means they're not building anything else into it or developing it any further. What it is, is what it is, and its pretty good. I asked a LOT of questions to MS folk when they first announced xna end-of-life about "so what do we use now? Because retiring your primary game dev toolset with no replacement when you just released WP7.5 is pretty moronic, right?" and the only replies I ever got were to learn DX or Unity etc. 
Definitely don't try managing memory. Or do your own locking, or manage your own connection pool. We have a bunch of code written in C# that looks like the guy was trying to do assembly code. It's so terrible barely anyone can figure out how it works and it causes problems every other month when we try to use some of his classes for purposes other than originally designed.
As /u/EscapeLizard mentioned, C++ and C# are pretty extensive. Moreover there are likely functions/concepts in C# that aren't in C++ (for example [Extension Methods](http://msdn.microsoft.com/en-CA/library/bb383977.aspx), or the [Dynamic Language Runtime](http://msdn.microsoft.com/en-us/library/dd233052%28v=vs.110%29.aspx).) Probably best is to look over these resources and use some google-fu to find out how to do it otherwise. If you find you can't find out how to do some specific thing in C# that you could do in C++, you could try searching on [StackOverflow](http://stackoverflow.com/questions/tagged/c%23?sort=newest&amp;pagesize=15) or even posting a question there. I would say, generally speaking (since I don't know the details of your new job), getting into the C# mindset from C++, try to think about the _public facing API_, class design, and programming for your requirements/intent rather than thinking about manipulating low-level concepts like memory or pointers. Program _what_ you want it to do, rather than _how_ you want to do it; the more declarative and self-descriptive the better.
&gt; Anything in particular you need help with? Probably a "In STL/boost there's this, with .NET use this instead, here's a quick example of how it works" would be nice!
Xamarin is the company that develops Mono and Mono-derived .NET runtimes for Android and iOS. They release a version of MonoDevelop called Xamarin Studio, which is just an open-source IDE (like Visual Studio). Xamarin Studio itself is free, but if you want Android and iOS support you have to pay pretty hefty license fees. And no, you don't need it, unless you're developing directly on a non-Windows operating system. As for your first question, yes, you can develop games with JUST MonoGame, but you will have a lot more work to do than if you start with Unity. I would also look at Duality, like /u/NotTheBus suggested. Since you're new to programming, I honestly suggest making some text-based games first. They're complicated enough without having graphics and physics on top of game-specific logic.
[Xamarin forums to the rescue](http://forums.xamarin.com/discussion/5438/can-put-nothing-on-input) Brendan says: "By default, "C# -&gt; Mac -&gt; Xamarin.Mac" projects don't use an interactive console. Try creating a new solution, and pick "C# -&gt; Console Project" in the New Solution window."
Thanks for the long answer, it really means a lot that you and others here are so helpful. I understand that I will have to do a lot of different smaller projects before I will be able to create something like a graphical 2D game. It's just so hard to pick a programming language when I have a clear vision of an end product, without knowing the ins and outs of all languages from the start. Time is something I have very little of, so I got to chose as wisely as I can. :P
Ah, well, unfortunately I don't use boost. But in STL you have the collections (vector/map), and in .NET we have [collections](http://msdn.microsoft.com/en-us/library/ybcx56wz.aspx) too, such as List and Dictionary; as well as the less common types that you have, like stacks, queues, etc; as well as thread-safe variants. std:: tends to expose algorithms for sorting etc, .NET doesn't have that approach so much. Collections do expose a .OrderBy() and .ThenBy() method, that's part of [LINQ](http://code.msdn.microsoft.com/101-LINQ-Samples-3fb9811b). Anything that represents a collection of items in .NET implements IEnumerable&lt;T&gt; (even arrays), so often when the type of collection is unimportant, people pass parameters and members as IEnumerable&lt;T&gt;. As for the threading stuff in std:: like atomics and the like, C# instead prefers to annotate access to sensitive locations rather than the locations themselves. So there's no AtomicInt or anything, but instead you can use the Interlocked class for atomic access, or just the Volatile class if you know how to use membars. We also have Mutexes, and various semaphore and notification constructs, as well as usage of the Monitor class if you prefer manual locking. There's even language support for Monitor entry/exit; see the lock keyword, it wraps it in try/finally etc. Exceptions are used more in C#. All exceptions (these days) derive from System.Exception. Whatever you can think of in C++, it's usually there in .NET, usually on MSDN. So you can usually google it. Did I miss anything important? :)
Just pick one language and stick with it (C# is a good one). They all basically do the same thing, just with slight differences. There is no bigger barrier to learning than jumping around and not actually writing a substantial amount of code. I've learned this the hard way.
I think I've written the Modules correctly below... Maybe? namespace CH3._5 { class Program { static void Main(string[] args) {//Main double actualPrice; double assessmentValue = showOutputValue(); Console.WriteLine("Please enter the actual value of the property:"); Console.Write("\n$"); while (!double.TryParse(Console.ReadLine(), out actualPrice)) Console.WriteLine("Error: You must enter a valid number!"); }//End Main static double showOutputValue() { } static double showOutputTax() { } } }
Sorry. Thank You very much. =) Seriously, I do appreciate it.
Thanks so much for that. A lot of my work in C++ deals with heavily multi-threaded stuff, but frankly nothing at the new job is going to involve that anyway (at least with their current code). We're mostly just talking about a shoddily developed ASP.NET website written mostly in C#. Also, other posters have mentioned memory management, etc. - modern C++ doesn't involve too much of that - at least not on a daily basis, and not in the way a career C# programmer with no modern C++ experience might envision it. Not that that's you. (Disclaimer: sure, there's a bunch of `new` thrown around, but it's not like I'm manually invoking `delete` on a daily basis). But point being, none of that is any big deal. I understand I now have garbage collection etc. Would you say, knowing C++ syntax and modern best practices, I'll be pretty comfortable poking around in existing source? There isn't going to be much new C# written in the long-term. I'll use C++ where it makes sense, but new things are likely going to be Python. Also, why avoid RAII? Thanks again! 
Unity is more featureful than some lower-level libraries, but you get what you pay for I suppose? I think there's C# bindings for Ogre, if you don't need the features that Unity provides.
It's also horrible advice for most people and certainly anyone new to programming.
It's not C#, but if you're new to programming and want to start by tinkering around, something like Scirra's Construct2 allows you to build some fairly sophisticated games without having to know too much about programming. It has great support for sprite-based 2d games, and even has multiplayer support (recent feature addition). I'd start here because you can create games while you learn about different programming concepts. You can then take this knowledge and jump up to a Unity3D or other ecosystem when you're ready.
Who really cares but thanks for the code helped me alot for a begginer
If you have a clear vision of an end product you are actually very well off. There are plenty of resources to learn to program. It's much harder to know how to program and not have a clear vision, because that's something you can't find. As far as your question, Unity is easier for 3D stuff. The Unity 2D stuff is new and not all the tools are mature. The biggest hurdle with Unity is that you have a spend a ton of time learning Unity before you get anywhere. XNA is much more bare-bone so it's easier to jump into but it doesn't have all the stuff that Unity will do automatically for you (not a problem if you're making a basic 2D game, but harder if you're making a 3D FPS with cameras, lighting, and physics for example) The fact that both run on C# is good because there is a lot of knowledge that you can take with you either way. The most difficult thing about making a game isn't adapting to the engine, anyway; it's the game logic which is independent of engine.
This is more for new developers, but you should be able to read through quickly and make connections. http://www.robmiles.com/c-yellow-book/
Don't agonize so much over which to choose. Pick one and start making simple stuff. You can always switch later if you don't like it and a lot of the things you learnt will translate to the next. I'd recommend sticking with free tools to start with though (e.g. Monogame or the free version of Unity, etc.) You won't need all the paid for stuff right from the start and it will give you chance to see if you like it.
Did you work this out yet?
Why not just use the free version of unity? I've been using it for quite a while now and haven't hit a point where I feel like I need to upgrade to the full version. Also they have a monthly payment system to do so if you decide to go that way.
This is not an easy task, especially not for someone with limited C# knowledge. You perhaps should look for an easier task. For this you'd need to develop a custom network driver and go deep into Windows internals. This is by far no basic task.
You can use Unity3D for free. The paid version provides some benefits, but most people don't really need them. Learning Unity takes a bit of time, but out of the things I have used, it is by far the easiest (without dumbing it down) and at the same time, it provides a lot of features. 
Is there a place that teaches the opposite? "C++ for C# programmers"?
&gt; Have you even tried to run it for a non-numerical value? You got an infinite loop there. I didn't see anything wrong with it, so I built it and ran it myself (with `return 0.0;` for both `showOutputValue` and `showOutputTax`, of course) and I still don't see what's wrong with it. Indeed, it will keep prompting you "Error: You must enter a valid number!" infinitely until you enter in a numeric value (and then the program will continue successfully), but there's nothing wrong with that approach. Putting `Console.WriteLine("Success!");` as the last line in the function results in this sort of execution (where lines starting with `&gt;` are user input): Please enter the actual value of the property: $ &gt; asdf Error: You must enter a valid number! &gt; asdf Error: You must enter a valid number! &gt; 30 Success! I think that's fine.
Still not an easy task.
Both methods that make calculations you need to accept a parameter type of double (like *static double AssessmentValue(double price)*) In your main method, after you have the *actualPrice* from the user, you assign two new variables, first the assessment value (like *var av = AssessmentValue(actualPrice);*) and then the tax, which takes the assessment if I'm reading it correctly.
It appears I have overlooked the Console.ReadLine in the TryParse; I thought he was doing that once and then just giving it the variable... To my defense: It was like 1:30am
Language differences are the smallest of problems. Libraries are the killer, they are huge.
It's totally understandable. I'm currently struggling with staying up too late myself :) I have a love/hate relationship with caffeine and it's currently on the hate side.
Hey, sorry for the late reply. I went to bed. :) RAII tends to rely on deterministic destruction of objects or items on the stack, which is something you don't have with C# (because items on the heap are GC'd, and most stuff goes on the heap). C++ best practices are usually in alignment with C#. We tend to be super explicit in naming conventions, which is a good thing. So instead of copy_str_buf() (which admittedly looks a little more C than C++) we'd have CopyStringBuffer(). But I think what FizixMan said is probably the biggest difference: We tend to get all excited about OO design and architecture rather than internal details. :) And don't sweat all the people banging on about memory management. I think a lot of us here have seen the stereotypical "Too smart for a GC" C++ guy write abominations in C#; so we're quick to get that in! But clearly that's not you. :)
You are right. It's actually more to do with the fact that I store money in a SQL db as cents and the field type is an int so that the field name is something like AmountInCents. This is because I perform all arithmetic in C# and only use SQL for storage and retrieval. I found that using decimal precision types in SQL lead to too many errors and when it comes to money those kinds of bugs were far too costly so it was better to store as int in cents. This lead to the development of this helper class to bind input and display to UI element controls with culture display issues. Having said all this I think you are not missing anything - `decimal` will take care of all currency conversion and arithmetic but I found this approach worked for me slightly better and made things more clear. Obviously this is purely subjective.
&gt; I've heard something about XNA not being worked on anymore, is it worth using? It's true that Microsoft is no longer investing in XNA, but they will continue to maintain it for some time. That being said, if you want the XNA experience, use Monogame. Here's part of a statement from Microsoft (you should read it all [here](http://www.pivotpointresearch.com/microsoft-exec-addresses-strategy-topic-frustrating-nearly-40-software-developers/)): &gt; This leads to the XNA question. It is indeed not the focus of our future investments because today’s technology has outpaced the capabilities of what XNA could ever expose. Today’s games are more complex than what the XNA APIs were designed for (e.g. advanced shaders). Direct3D and Direct2D have all the required capabilities – which is why we are investing so much into offering a rich XAML UI platform for controls, and seamless integration with DirectX in the same projects. While we are not investing actively on XNA, the evangelism team does work with Monogame (the cross-platform, OSS implementation of XNA ), which itself leverages the seamless integration of the UI platform referred to above. For people that prefer to still use the XNA APIs, they can do so using Monogame.
Here's part of a statement from Microsoft (you should read it all [here](http://www.pivotpointresearch.com/microsoft-exec-addresses-strategy-topic-frustrating-nearly-40-software-developers/)): &gt; This leads to the XNA question. It is indeed not the focus of our future investments because today’s technology has outpaced the capabilities of what XNA could ever expose. Today’s games are more complex than what the XNA APIs were designed for (e.g. advanced shaders). Direct3D and Direct2D have all the required capabilities – which is why we are investing so much into offering a rich XAML UI platform for controls, and seamless integration with DirectX in the same projects. While we are not investing actively on XNA, the evangelism team does work with Monogame (the cross-platform, OSS implementation of XNA ), which itself leverages the seamless integration of the UI platform referred to above. For people that prefer to still use the XNA APIs, they can do so using Monogame.
Going to have to agree with AngularBeginner on this one. Even using an existing library, I would strongly recommend against a beginner taking on this task.
That makes sense, although I can't help but ask: what errors did you encounter when using [`decimal` in SQL](http://msdn.microsoft.com/en-ca/library/ms187746.aspx)? I'd think that with proper precision and scale you'd get really good handling of numbers in decimal base even with fractional cents...
Interesting, thank you for your reply. I'll talk to my professor about adjusting my project, perhaps I can save this as a later personal challenge. :)
As a whole, don't try to figure out how to do what you did before in c++ with c# but really make it an effort to understand the "c# way".
Why cant you sort through it with jquery?
Heh, I don't know really. I usually recommend [Accelerated C++](http://www.amazon.com/Accelerated-C-Practical-Programming-Example/dp/020170353X/), but it's a bit dated now with C++11. Perhaps we can help each other? :)
Definitely. I write a lot of Python too, and believe me I'm not doing C++-isms there. :) Always trying to be as idiomatic as possible.
Awesome, I just know from myself how hard it is NOT to do the familiar thing. Took me a while to learn that.
Perhaps coming from the C++ world it's easier because C++ is very multi-paradigm anyway? I dunno. Either way, I guess it can be difficult. Luckily for me, it isn't likely anybody but me will ever have to work on the C# I'm going to be working on (we'll be moving away from it in time, and for now, it's just going to be me).
No problem! I hadn't thought about RAII not being used much because objects are going to be created on the heap and not the stack. Makes total sense. Thanks for that!
I'll be working on this later this morning - I appreciate the feedback, especially from /u/romeozor - you guys are awesome. 
Glad I could help :)
Thank you, much appreciated!
But of course experienced people can easily access those files.
I didn't go through your code with a fine-tooth comb, but it may be that the Parallel class thinks that instantiating four threads for what it expects to be a simple four operations has too high an overhead over running them in serial. Excluding any access to shared state (which you don't seem to have?), I would try maybe submitting the four calls as separate Tasks to the TPL (e.g. Task.Run()) and then joining them (e.g Task.Wait()) and see if that helps. Edit: After re-reading your question: Are you implying that you're updating contiguous addresses in memory? Because if that's the case, you'll be thrashing the CPU caches (e.g. false sharing).
No homo. I'll show myself out... 
I think this is a neat idea (I'll certainly be playing around with this a bit on my own), but I think this is kind of stretching what it means to be homoiconic. In Lisp the distinction between code and data is non-existent. Is `(+ 1 2)` code that adds 1 and 2 or a list containing the symbols `+`, `1`, `2`? The answer is that it is both at the same time. Whereas the data structure definition in the article itself is clearly code defining a data structure (the code itself isn't a data structure) that has links to the code that executes it. But it definitely is getting closer to the benefits of a true homoiconic language and offers an incredible amount of flexibility. I'd be really interested in seeing what kinds of things can get made with this idea.
Why do you say your threads aren't running in parallel?
I've done a lot of work with this to build a generalized Inverse of Control generator where you write C# classes to provide additional functionality (modules) that implement interfaces. Then each module can also ask for additional sub modules, in the end building a tree that can be executed. I highly recommend trying to play with this type of idea as I've seen the way I program greatly improve by forcing myself to use proper object orientation.
Do C# expression trees accomplish basically the same thing, or am I missing something?
Well strings are already char array's internally so i don´t see why you would want to split them into arrays. What you could do is, first see if their sizes match. If true then proceed by comparing each caracter of each string. If you reached the end of one string and no characters differ then they are equal. If you find one character mismatch then they are diferent. If the string sizes don´t match then they are diferent. BUT string1.Equals(string2) (you can also use == since this is csharp) already does all this for you. Maybe i'm not understanding what you are trying to achieve? :s
Yes, more into detecting typos.
Thank you for your answer. Fonts are scaled fine, without any problems. Also standard controls seems to be scaled fine (didn't use them many yet). But, for example if I have property: public int HeaderHeight { get; set; } and then I use this property to draw Rectangle inside control. Now, if I set properties such as Width, Height etc. that are standard and I run application on machine with different Dpi scaling controls are occupying same logical size on form. Like that property values are pre-multiplyed with Dpi value and then used. But, properties of my control are not scaled. If I set HeaderHeight to be 100 , it will be used as 100 on any Dpi. Application is set to be Dpi aware. I am still learning about this (heavy) topic, so sorry if I write something stupid :)
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Metaphone**](https://en.wikipedia.org/wiki/Metaphone): [](#sfw) --- &gt; &gt;&gt;*Lawrence Philips redirects here. For the football player, see [Lawrence Phillips](https://en.wikipedia.org/wiki/Lawrence_Phillips).* &gt;__Metaphone__ is a [phonetic algorithm](https://en.wikipedia.org/wiki/Phonetic_algorithm), published by Lawrence Philips in 1990, for indexing words by their English pronunciation. It fundamentally improves on the [Soundex](https://en.wikipedia.org/wiki/Soundex) algorithm by using information about variations and inconsistencies in English spelling and pronunciation to produce a more accurate encoding, which does a better job of matching words and names which sound similar. As with Soundex, similar sounding words should share the same keys. Metaphone is available as a built-in operator in a number of systems, including later versions of [PHP](https://en.wikipedia.org/wiki/PHP). &gt;The original author later produced a new version of the algorithm, which he named Double Metaphone. Contrary to the original algorithm whose application is limited to English only, this version takes into account spelling peculiarities of a number of other languages. In 2009 Lawrence Philips released a third version, called Metaphone 3, which achieves an accuracy of approximately 99% for English words, non-English words familiar to Americans, and first names and family names commonly found in the United States, having been developed according to modern engineering standards against a test harness of prepared correct encodings. &gt; --- ^Interesting: [^Soundex](https://en.wikipedia.org/wiki/Soundex) ^| [^Phonetic ^algorithm](https://en.wikipedia.org/wiki/Phonetic_algorithm) ^| [^Ht-//Dig](https://en.wikipedia.org/wiki/Ht-//Dig) ^| [^Letter ^bank](https://en.wikipedia.org/wiki/Letter_bank) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ckp0ih7) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ckp0ih7)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
I may finally do it with this, but hopping that there is some more automatic way, like it is used for standard control properties.
I may be mistaken, but I believe that Parallel.For isn't going to bother trying to parallelize a list of four elements. It is going to assume that it takes longer to spin-up and join four tasks than it would take to simply run them on a single thread.
Yes, this already exists, and it's called `Expression&lt;T&gt;`.
Welcome to my own personal hell. DPI has been a thorn in my side for most of my win forms career.
PS. Here is the article I am using for learning: http://blogs.telerik.com/winformsteam/posts/14-02-11/winforms-scaling-at-large-dpi-settings-is-it-even-possible- It seems that I will need to multiplications by myself...
Parallel.For uses a ThreadPool, so it'll have a fairly large number of threads to play with by default. Certainly for a small number, it should spin up a small number of threads: Stopwatch sw = new Stopwatch(); sw.Start(); Parallel.For(0, 4, (x) =&gt; { Thread.Sleep(5000); }); sw.Stop(); Debug.WriteLine(sw.ElapsedMilliseconds); // Outputs about 5,000 ms 
There are a number of algorithms to do fuzzy string matching. I'd start with [Damerau-Levenshtein](http://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance)
Similar in concept. Yes. Implementation and purpose are different. **Purpose** The purpose of a mechanism is to provide the exact same behavioral interface for every mechanism (iMech). There is no specialization or complex API. It's like playing dominos where every domino has a face of * | *. So, you can plug any mechanism into the property of any other mechanism. This is also why they only need to be compiled once and can be hooked up without the need to recompile: even during runtime. **A Few Implementation Differences** * Mechanisms are compiled once upfront. They don't generate or emit any type of code. Expressions are compiled. * Mechanisms have no API to speak of. The interface to a mechanism is the same for all mechanisms (iMech). Even primitive data-types are treated as mechanisms (basically, a form of boxing). So, a Mechanism is simply a class without any specialized framework. Expressions have an API giving them different interfaces adding, in my opinion, unnecessary complexity. * A single mechanism operates on multiple primitive data-types. Once you define your policy (built out of mechanisms), you can run the policy as a float, a long, an integer or even a string. Again, without requiring any type of recompile. * Policies (the composition of mechanisms) are not inherently immutable. You can alter the behavior of your policy (the composition of the mechanisms) in real time without the need to compile. In fact, when a mechanism runs there is no compilation, interpretation or code generation going on. You are simply running natively compiled code. Expressions are immutable (you can change them and then recompile them though). * Edit: Mechanisms are framework and language agnostic.
https://github.com/tylerjensen/duovia-fuzzystrings
At the moment I am on WinForms. I know that this topic will be easier on WPF...
Right you are, and I learned a bit about how Parallel.For works. At least on my machine, for such a small number of CPU bound tasks, it only spins up two worker threads. That's odd behavior, to me, since ThreadPool defaults to 8 threads to match the number of cores I have. Clearly I don't understand some motive behind Parallel.For, I need to read up on it: static void Tester() { Stopwatch sw = new Stopwatch(); sw.Start(); ThatWhichTakesTime(); sw.Stop(); Console.WriteLine("Single takes: " + sw.ElapsedMilliseconds); // About 1 second sw = new Stopwatch(); sw.Start(); ThatWhichTakesTime(); Parallel.For(0, 4, (x) =&gt; ThatWhichTakesTime()); sw.Stop(); Debug.WriteLine("Parallel takes: " + sw.ElapsedMilliseconds); // About 2 seconds } static int ThatWhichTakesTime() { DateTime bailAt = DateTime.Now.AddMilliseconds(1000); int x = 0; for (int i = 0; ; i++) { x *= i; x %= 123456789; if (DateTime.Now &gt;= bailAt) { break; } } return x; } 
That's probably not how you want to do it but it is a relatively simple iterative algorithm anyway.
**PURE SPECULATION** As I understand it Parallel.For is meant to be self-tuning. As it works through your collection it will adjust the batch sizes accordingly (batch == Task). With only a handful of iterations, it can't figure out what the optimal batch size is and so falls on a default. This is great when you don't know how many cores or the size of the collection. **** In a case like this you know exactly what you want in terms of both, explicitly kicking off tasks makes a lot more sense.
&gt; It is important to note I am limited to .Net 2.0/ I maybe able to go to 3.5 but only if there is some massive improvement. Uh, .NET 3.5 and 4.5 are leaps and bounds better than 2.0.
I'll try it now!
1 thread 1 processChannel = 20FPS. 3 threads 3 processChannels = 6FPS. I was expecting it to be around 15FPS. 
&gt;Excluding any access to shared state (which you don't seem to have?), I would try maybe submitting the four calls as separate Tasks to the TPL (e.g. Task.Run()) and then joining them (e.g Task.Wait()) and see if that helps. It did! Thanks! public unsafe void processGraphicsTest()//uint p, uint width, uint height, uint stride, uint bytesPerPixel) { byte* source = (byte*)windowBitmapAddressStart; byte* destination = (byte*)windowBufferAddressStart; using (bufferBitmap.GetBitmapContext()) { using (windowBitmap.GetBitmapContext()) { for (uint offset = 40 + (windowBitmapStride * 300); offset &lt; windowBitmapStride * 300 + 200; offset += windowBitmapBytesPerPixel) { *(source + offset) = 255; //B *(source + offset + 1) = 255; //G *(source + offset + 2) = 255; //R *(source + offset + 3) = 255; //A } //Slow //System.Threading.Tasks.Parallel.For(0, 4, delegate(int i) { processChannel(source, destination, (uint)i); }); //Slow //for (uint i = 0; i &lt; 4; i++) //{ // uint idx = i; // taskList.Add(Task.Factory.StartNew(() =&gt; processChannel(source, destination, (uint)idx))); //} //Task.WaitAll(taskList.ToArray()); //Fast taskList.Add(Task.Factory.StartNew(() =&gt; processChannel(source, destination, (uint)0))); taskList.Add(Task.Factory.StartNew(() =&gt; processChannel(source, destination, (uint)1))); taskList.Add(Task.Factory.StartNew(() =&gt; processChannel(source, destination, (uint)2))); Task.WaitAll(taskList.ToArray()); } _tick += 2; NativeMethods.CopyUnmanagedMemory((byte*)windowBufferAddressStart, 0, (byte*)windowBitmapAddressStart, 0, (int)(windowBitmapLengthBytes - 1)); } } &gt;After re-reading your question: Are you implying that you're updating contiguous addresses in memory? Because if that's the case, you'll be thrashing the CPU caches (e.g. false sharing). I don't know! I'm updating every 4th byte, starting at an offset between 0 and 3 with each call to processChannel(source, destination, 0 /* or 1 or 2 etc...*/) I knew writing to a contiguous block on each thread was impossible efficiently, but for a while, I wondered if the .Net thread handling code considered byte, byte+4, byte+8.... to be a contiguous memory area... and that byte+1, byte+5, byte+9 wouldn't be able to access it while the other thread was running... But it can! Yay! It's gone from 21FPS, to 19FPS with 3 times the floating point processing. Ace! I guess now I turn it into bit shifts, I can't split it into further threads because each row is dependent on the one below it. =( 
It's working, thanks to EscapeLizard. http://www.reddit.com/r/csharp/comments/2h1pev/helpparallel_my_for_threads_arent_running_in/ckp4u25
It's working, thanks to EscapeLizard. Also - despite the proof of concepts below, you appear to be right! http://www.reddit.com/r/csharp/comments/2h1pev/helpparallel_my_for_threads_arent_running_in/ckp4u25
It's working, thanks to EscapeLizard. http://www.reddit.com/r/csharp/comments/2h1pev/helpparallel_my_for_threads_arent_running_in/ckp4u25
Being able to serialize functions from one language and using them in another is an interesting concept, but I think that you sacrifice too much functionality when you abstract it down too far. What happens when you want to do math in double precision? What if you want to use class or struct values, do you serialize them to string and back at every step? One could argue that being able to plug any piece into any other piece, regardless of whether it makes sense to do so, is bad. IE: adding floats and ints is fine, but adding 5 to a banana isn't. I am a big fan of C#'s strong typing and generics, they make it very hard to connect incompatible pieces together. Compiling only needs to happen once, during start-up or first use, so I wouldn't expect much of an overall performance hit. 
I Don't see compelling value in the minor language features. Primary constructors, meh. Expression-bodied members, hm, a cool small feature. It seems that Rosyln is the big headline feature in this release, and that's fine, making a new compiler underneath the existing platform is no small feat. But ... there are no doubt benefits to us c# coders to Rosyln, but compared to generics, LINQ or even async/await, the benefits are not right under our noses. Unless I'm missing something?
No, you are right. Most changes in C#6 are syntactic sugar. They allow more compact and readable code, especially for immutable data structures (which are used a lot in Roslyn). Just compare these two classes for a simple immutable data structure. The first one is C#5, the second C#6. // C#5 public class Name { private readonly string _firstName; private readonly string _lastName; public Name(string firstName, string lastName) { _firstName = firstName; _lastName = lastName; } public string FirstName { get { return _firstName; } } public string LastName { get{ return _lastName; } } } // C#6 public class name(string firstName, string lastName) { public string FirstName { get; } = firstName; public string LastName { get; } = lastName; } As you can see, it can easily be written in C#5. But it's a **lot** more verbose than the C#6 example, which has a lot of reduced boilerplate code.
I was also going to suggest something like this. Levenshtein was a topic of my year 2 uni coursework where we had to implement a basic spell checker. You could use it here to compare the input against your records and if the "distance" value is &lt; 5 (or whatever) then accept.
Did you also see the record class specification? public record class Name(string FirstName, string LastName); I don't think it's planned for C# 6 though.
Why didn't they go all the way to the Scala-like version? public class Name(public string FirstName, public string LastName) { } Or is that planned for C# 7? :)
They were talking about this feature, as it is also already present in TypeScript (I wonder where it was first), but I don't see it in the plans for C#6 anymore. So I guess they scrapped that.
No, I did not see this. I also never heard of this being an option for C#6.
It was part of a draft specification for pattern matching in C#. https://roslyn.codeplex.com/discussions/560339
I don't knock syntactic sugar. For instance try doing this in C# 1.0: var evenInts = lotsOfInts.Where(i =&gt; i % 2 == 0).ToList(); You'd use a `foreach` or need a delegate instead of a lamdba, with the whole `private static bool Filter(int i)` declaration. I just don't see that many drastic reductions in lines of code in going from c# v5 to v6. Encouraging immutable data structures is a good thing though!.
 static void main(string[] args) { /*var actualPrice = read in the actual price from the user */ var assesmentValue = AssessmentValue(actualPrice); var tax = Tax(assesmentValue); Console.Writeline("Price: $" + actualPrice + ", Assessment: $" + assessmentValue + ", Tax: $" + tax); } static double AssessmentValue(double price) { // calculate the AV } static double Tax(double assesment) { // calculate the tax from the AV } You should first read some basic tutorials and examples, I'm sensing a lot of confusion. Until you have at least a very rudimentary understanding of functions, control flow and a general execution flow, I don't think you're ready for a whole course of C#. Classes, types, references, visibility and object oriented programming in general will mess your head up and take any joy out of programming. And programming is fun.
It is to reduce boilerplate code, to make the code more expressive and less verbose. Is it needed? No way, absolutely not. We have been fine before these changes. But that doesn't mean it isn't nice to have, that we can't appreciate it and just welcome it. The C# language designer are putting a hell lot of thought into the design and development of the language.
Sounds like commercial uses, right?
I would Love to be but the software I am supposed to work with only supports .Net 2.0.
Believe I know, I would rather use 3.5 but the software I am supposed to work with supports 2.0.
The C# language designers are doing an amazing job, but ... they have already got most of the low-hanging fruit. `async..await` is fiendishly complex under the hood, much more so than its predecessor `yield return`. I worry about from the tradeoff between the complexity of the new syntax added to the ever-larger language and the smaller benefits of the new features. 
&gt; Retlang Unfortunately he's limited to .NET 2.0 while Retlang requires 4.0+
I wouldn't recommend Retlang, just because it hasn't been updated in three years.
My current favourite 2D framework is [Otter2D](http://otter2d.com/). It's kinda inspired by the structure of FlashPunk, I found it really easy to get to grips with. The only catch is that it's still a beta and can be buggy at times, but it's going to hit 1.0 pretty soon.
I think C# is not about reduction, F# is.
F# is about being a functional programming language, not code reduction.
I'm a lover of more terse C# code, so while it isn't a big thing in terms of direct features, it's still awesome. What I'm really intrigued by is how the compiler can be used in the workplace to enforce certain things, such as failing to compile when not checking for null after a service call. Not that things like that are difficult, but the fact that a lot of developers suck at testing their own code would make it that much less of a problem.
How much of an influence do you have on changing that? Draft up a document detailing the monetary gains of upgrading versus staying with .NET 2.0. "Staying with .NET 2.0 - Death By a Thousand Papercuts" A little overdramatic, but completely reflective of the situation.
You can write F# in OO style as well, since it is a mixed paradigm beast. Anyway I was talking about the OCaml syntax F# utilise.
are you using visual studio visual Basic or c#? If so then you can use string1.contains(string2) 
&gt; C# 6 is focused entirely on upgrading the back-end compiler stack so that it will support more agile changes in the future. They don't need to release a new C# version for this.
Why? What is this useful for?
&gt; so forgive me and thank you for your understanding No need to apologize for what you don't know. What we don't know is what brings us all here.
&gt; Being able to serialize functions from one language and using them in another is an interesting concept Mechanisms (functions in your question) are tightly coupled to the language. We don't serialize mechanisms to other languages (I'm sure there are people who would like this feature but we don't do it. It's a hard problem to solve too.). What we do allow is the serialization of policy: the "what is done". Policy **is** your program defined by the composition of mechanism (how it is done). A black and white decision making process which could allow for 100% decoupling of mechanism from policy, in my opinion, is a **huge** win for software engineers ([Separation of Mechanism and Policy](https://en.wikipedia.org/wiki/Separation_of_mechanism_and_policy)). &gt; What if you want to use class or struct values, do you serialize them to string and back at every step? What happens when you want to do math in double precision? You use or build out mechanisms to manipulate them as you see fit. &gt; regardless of whether it makes sense to do so, is bad. IE: adding floats and ints is fine, but adding 5 to a banana isn't. I am a big fan of C#'s strong typing. This is going into the realm of the strongly-vs-loosely typed language discussion. Just for the record, I grew up using strongly typed languages so I totally understand where you are coming from. But, we feel, mechanisms work very will in both strongly and loosely typed languages. There are languages that go even further than C# in typing having syntax which supports [units of measure](https://research.microsoft.com/en-us/um/people/akenn/units/intro.html)/Quantity types. I would be more worried about 5 kilometers being added to 20 miles than 5 added to banana (though I get your point). In C#, we would use classes and generics to support strong typing. Let's see how it is done using mechanisms: // mechanism public class add : iMech { public iMech left { get; set; } public iMech right { get; set; } public iMech go { get { // exception if left.type != right.type. So we can just use left.type. return new qtyNum { val = asNum, type = left.type }; } } public float asNum { get { if ( left.type != right.type ) { // throw "Non matching unit types: {0} {1}", left.type, right.type } return left.go.asNum + right.go.asNum; } } } // policy new add { left = new qtyNum { val = 4, type = "miles" }, right = new qtyNum { val = 5, type = "kilometers" }, }.go; 
Microsoft has a great (but not well known) tool for this - called LogParser It uses a SQL engine to query all kind of text based data like the Registry, the Filesystem, the eventlog, AD etc... To be usable from C#, you need to build an Interop Assembly from the Logparser.dll COM server using following (adjust LogParser.dll path) command. tlbimp "C:\Program Files\Log Parser 2.2\LogParser.dll" /out:Interop.MSUtil.dll Following is a small sample, that illustrates how to query for the Value 'VisualStudio' in the \HKLM\SOFTWARE\Microsoft tree. ``` csharp using System; using System.Runtime.InteropServices; using LogQuery = Interop.MSUtil.LogQueryClass; using RegistryInputFormat = Interop.MSUtil.COMRegistryInputContextClass; using RegRecordSet = Interop.MSUtil.ILogRecordset; class Program { public static void Main() { RegRecordSet rs = null; try { LogQuery qry = new LogQuery(); RegistryInputFormat registryFormat = new RegistryInputFormat(); string query = @"SELECT Path from \HKLM\SOFTWARE\Microsoft where Value='VisualStudio'"; rs = qry.Execute(query, registryFormat); for(; !rs.atEnd(); rs.moveNext()) Console.WriteLine(rs.getRecord().toNativeString(",")); } finally { rs.close(); } } } ``` Source: http://stackoverflow.com/questions/295257/how-to-search-for-specific-value-in-registry-keys
Have you looked at [Code Contracts for .NET](http://visualstudiogallery.msdn.microsoft.com/1ec7db13-3363-46c9-851f-1ce455f66970) yet?
&gt; yield return. Ahh, the coroutine approach to multitasking.
I want to see F# type providers for C#
record feels like the wrong name. Reminds me of struct but in Pascal. why not use the word "pattern" 
You can do a ton with the free version of Unity3D. Also, Unity3D has a monthly plan that is pretty cheap. If you aren't scared of C++, consider Unreal Engine 4. Its source costs $19 for a snapshot (or $19/mo if you want to keep up to date).
But that requires extra typing :P
I'll just stick to LinqPad... Don't do C# dev on Linux anyways.
Don't use linked lists; use a Queue for this.
First one is way more readable, imo.
I don't see how you can justify that aside from "that's the syntax I'm used to". In what way is the meaning of the more concise C# 6 example not clear?
I'm just saying that not all the time those syntactic sugars are needed. This is a simple code, and even with or without those 10 lines the size of the file wouldn't be improved. If they're trying to do something else other than improving the size of source files (?), I just don't see it. Also, the syntax is weird, like you put parameters to the class, you remove the constructor and that just to have getters and setters for 2 strings. What if the class has 100 primitive types, do you put 100 parameters to your class?
It's not a huge thing, but for some reason, being able to do a TryParse and declare the variable in one line makes me happy. (I write a *lot* of text parsing functions interfacing with embedded electronics)
You should probably just look at a general-purpose C# guide; those "X for Y developers" kind of books are rarely very good and honestly you can just skim the obvious stuff. The Griffiths Programming C# 5.0 book is good, especially for someone who already knows how to program.
Problem is most of the "guides" I've found entail things like "here's how to do a for loop", which is something immediately obvious to me upon lookng at like 3 lines of code. Even after this post I still haven't come across a "C# for C++ programmers" guide. I'm already quite familiar with "bad books" - I find that anything promising you teach you "X in Y hours/days" is bad by default. I started C++ more than a decade ago with one of those - big mistake. They aren't meant for people like you and I. Also, to you and everbody else, is there a "ASP.NET for people who are used to manually writing HTML in vim and doing the back-end all custom-like from scratch in the language of their choice"? Are there any standard tools/SOP I should be learning? This is all just temporary, mind you.
An addendum to this comment: The pro version has some tools for the camera, deployment, FPS increasers, and compatibility. It also takes away the Unity splash screen in the intro when you build the app. Basically when you're ready to say "I'm going to put this into the app store as a serious product" then that's when you should put down the $3k for the pro + related support packages (ios, android, DX13). That said, if you just want a personal flappybird clone that has your face instead of a bird and want to make it into an apk, there are free tutorials which you can google for. The Free version has "mobile support" built in already. 
You want to be using ASP.NET MVC, and I'd recommend you look at Freeman's Pro ASP.NET MVC 5. It's not the best technical book I've ever read but it's totally serviceable and it was enough for me to go from not knowing anything about the topic to greenfield production application. To your point about guides: don't waste your time with online tutorials; just buy a good book. I like Griffiths but other people might recommend others.
It's only more readable to you because you're not used to the new syntax.
Big annoying fancy hipster words, little unite worthy hipster code, 
Wouldn't you risk maxing out your hard drive if you open a thread for every single folder?
oh... duh x)
Is Async what your looking for? http://blogs.msdn.com/b/dotnet/archive/2012/06/06/async-in-4-5-enabling-progress-and-cancellation-in-async-apis.aspx
A few things I can think of: you're going to need to know all of the directories up front to make an effective progress bar, so won't it pretty much defeat the purpose. Also, make sure you're updating the progress bar on the UI thread.
Relevant: http://superuser.com/questions/43562/windows-file-copy-dialog-why-is-the-estimation-so-bad
&gt; Also, make sure you're updating the progress bar on the UI thread. I agree, this is the first problem the author should address. Removing worker.ReportProgress(progress, (sum[0] / 1024 / 1024) + " MB") from the worker thread will increase the speed of one of my dircetories (460GB) from 4min24sec to 14sec.
What were *you* thinking of? :P
This smells an awful lot like homework/class assignment to me. What have you tried so far? Have you implemented the classed that you've designed? 
Hopefully this little extension method might help you with the whole async/winforms coding: http://carpegalactica.wordpress.com/2013/09/15/invokeaction-a-simple-and-convenient-extension-to-control-for-multi-threaded-apps/
Start off simple and add to it. Example: 1. Add a "ball" to the screen 2. Have it move every tick of some clock in a direction. 3. Have it bounce off walls 4. ... See where this is going? Part of being a good software developer is being able to take a big set of requirements like you have there and breaking them down into manageable steps. Don't freak out, took me a while to get there, and even then I still get overwhelmed every now and then.
You can simulate the repeated key-presses by doing the following (I'm on a phone so I cant really type in the code to do this but it would be easy to do in a while loop): -Send a KeyDown message. -Send a KeyUp message -Wait 30 ms (This is the default key repeat speed in Windows but you can decrease or increase it as needed) If you repeat that in a loop for the desired period of time, 5 seconds in this case, then it should do what you want it to. There might be a better way to do it, but I haven't done too much with keyboard inputs in my work and only had to simulate a held down key once, but this is a simple method that should achieve what you need.
I'd recommend the book [Effective C#](http://www.amazon.com/Effective-Covers-4-0-Specific-Development/dp/0321658701). It's a lot like the Effective C++ books. It gets into the potential pitfalls and nuances of using the language. Since C# is similar enough to C++, learning about its quirks should get you most of the way there.
Are you mixing up 0-index and 1-index? That is, the top-left button will be at position `[0, 0]`. The button at `[1, 1]` will actually be the _second_ button diagonally from the top-left corner.
No no no, I have that correctly. Actually I've been using the [0,0] position in my tests, but now I just felt like choosing [1,1].
Your code is doing exactly 1 key press. If you want it to do more you need to add a loop of some sort like for(int=0;i&gt;500;i++){ InputSimulator.Keyboard.KeyDown(keyCode); // Hold the key down Thread.Sleep(100); // Hold key down for 100ms. InputSimulator.Keyboard.KeyUp(keyCode); // Release the key } to do 500 keypresses
Problem solved!! Sent the array as a parameter! /thread
don't worry about the game engine as much yet. Just focus on building incrementally towards the end goal in small steps. Eventually you will have a somewhat cludgy mess inside event handlers that you realize can be moved to a game engine. For now just do things in a somewhat global state inside the timer.tick (? not sure of exact name) event handler.
It always hurts me to see how much object oriented effort goes into making pong. As a game with predetermined rules and little expandability the whole game could be done much more simply than this example. 3 rectangles. Or 6 points. -2 for paddle A ((x,y),(w,h)) -2 for paddle B -2 for ball One method for game loop (while or recursive) - separate loop into update and render if you want, but in the end your only rendering 4 things. Paddle, paddle, ball, score. One method for hit detection (google AABB hit detection) Maybe a method for key input. A reset method. Game starts&gt; game loop is all like: -move all DAT shit around -ball moves -paddles move if theyre within screen borders. -is the ball colliding with a ceiling or floor? If so turn that bitch around. (On The y axis) -is the ball colliding with a paddle or some shit? If so turn that bitch around (on the x axis) - is the ball colliding with the left or right wall? If so reset the match and give a nigga a straight up point. Real talk. Shit doesn't need to be complex and shit. Source: wrote pong in c, is, c#. In c I also wrote it without debugging until I thought I was done. Worked 1st try. 
No, just had one instance of the object. What I did to solve it was send the array as a parameter to the method where I needed it.
Pluralsight actually has a lot of good videos to offer in a ton of different areas. I don't use it too often because I find that I am better at learning from reading as I tend to lose focus while watching videos. But they are quality videos and literally have dozens of videos on the fundamentals of C#. 
I've had a Pluralsight subscription a few times. The quality of content on there is excellent. I haven't personally watched any of their intermediate C# videos but their advanced ones have all been very good. It really boils down to whether or not you like learning from videos (I personally prefer learning from text) because if you do, then, like I said, the quality of the videos on there is top-level so you might as well give it a shot. They have a 10 day free trial or if you're a student and can sign up for Dreamspark or a startup and can sign up for Bizspark, they give you a 90 day free subscription with those. 
I find I'm the same way as you, preferring reading over videos. Are there any particular learning services or sites you like given that? Besides good old-fashioned books
Yes it is. They've got very in depth courses on c# I highly recommend them.
For performance of Java Vs. C# [this is a good site](http://benchmarksgame.alioth.debian.org/u32/csharp.php) for reference. I've been coding in C# since .Net 1.0, so it's my default language for development. I switched over from Java in the early 00's. I've some experience of porting small scale utilities across to Mono for deployment on Linux systems, mainly apps that were intended originally to run as Windows Services. The porting process is straightforward, basically ensuring you use the Environment class and Path.Combine when handling files. Performance depends on a number of issues : 1) What version of the Mono CLR you're targeting. Older versions are slower in general. 2) Some of the Mono implementation of parts the BCL are not optimised too well, though this has been improving overtime. 3) Whether your app needs to be backwards compatible with Windows. There are a number of Mono-specific class libraries which can speed things up, but assume the app is on a *nix platform. As a quick illustration of performance, I've ported some .Net 3.5 LINQ heavy apps across to Mono and had them successfully running on a 256MB Raspberry Pi ! But as a rule of thumb you'll take a 30-50% performance hit running under Mono. Deployment has normally been via a tar file containing the executables/assemblies, plus any configuration files and bash scripts. N.B. I prefer .INI files over XML configuration files, you might want to look at [Nini](http://nini.sourceforge.net/) for this.
I will tell you first, I am not an expert on this topic. But I did develop a Web Service that ran on a raspberry pi and communicated with another device using serial comms. I built it using the [Nancy framework](http://nancyfx.org/) and the only time I experienced performance issues was when I started using Razor Template engine, and I feel it was more a limitation of the 700Mhz I was working with than mono. I never got the chance to fully diagnose the issue as the plug got pulled on the project (a month away from production). For some reason, the first time it built the view, the page would take 10-15 seconds to load (cpu was maxed out during this time). After that it would take milliseconds to load. We went with C# because the software was being designed to run on multiple platforms, and I honestly just don't like Java. C# is what I am most comfortable in and it provides me with the tools I need to get the job done. I like Mono but it isn't without a few quirks. For some reason, I could never get the OnSerialDataRecievedHandler to work so I had to resort to polling for data rather than using a handler when data was received. You aren't likely to need serial communication for what you are doing so that doesn't matter.
The first time that the view is rendered, Razor parses it, generates a class from it, and compiles that. After that it uses the already compiled class. :)
Rule 0 of storing Passwords: *don't* Rule 1 of storing Passwords: Really, don't do it if you can use third party auth (e.g. Microsoft account, Facebook, Google, etc.)
Yes, the videos are fantastic!
[BlackWasp](http://www.blackwasp.co.uk/Tutorials.aspx) is pretty good for some basic C# things; not so much for more advanced features, though.
Not only are the videos excellent - as everyone here has already said - they also have pre- and post-session evaluations so that you not only know up front what areas you need to learn more about, you also know how much you got out of the video you just watched.
I thought that *not storing them as plain text* goes without saying by now :)
I'm not sure if this will be particularly helpful, but last year I wrote a post on the subject of asynchronous file iteration. It uses a queue-based approach and has multiple threads that populate a queue with results, and results are returned by the function by effectively draining the queue until it is empty and all spun threads have exited. Here is the post I made on the subject: http://bc-programming.com/blogs/2013/06/asynchronous-queue-based-file-iterators/ Looking at it the code is messier than I remember... The threading works recursively, but will only use up to a specified maximum number of threads. My main goal was to effectively replace the built-in Library methods, in particular "GetFiles()" with something both more flexible and reactive; GetFiles returns all the Files in one swoop, so if you are searching for a single file, it won't stop if it finds it. Additionally, you cannot really cancel a long GetFiles() call mid-operation without aborting the thread. Additionally, fast hard drives usually spend a lot of time idle as you process the results from a single GetFiles() call, so threading can keep the overhead where your program waits for I/O down by effectively doing all I/O on separate threads and allowing your program logic dealing with the results of that I/O to run unblocked (unless it runs out of data). (For those that may wonder: it doesn't use async features because I intended to use it for work projects, and we are currently using 4.0- I have a version using async but it seems I wrote it some time after that post). It doesn't really solve the "progress" problem. As others have mentioned in order to really have a % progress bar of any sort you would need to have a way to determine how long the full operation will take, which itself, in this case, would require enumerating everything- determining how long the operation will take could take a significant amount of time. Instead what you could do is show a Marquee style progressbar which can be updated when directories begin enumeration and stop enumeration, or possibly list files as they are found, or even the running total. (Also: Not sure if this would count as 'blogspam' possibly, if so I apologize) 
Yes, then just google it. :)
Most videos on pluralsight have accompanying slides that are a little faster to go through.
There are some precompiler packages out there. I've never tried them with Nancy but I assume they would work. Might not be a bad idea on a rasberry pi. It looks like you wouldn't have to deploy all the .cshtml files.
Thanks for the very complete coverage of my questions, and for a link to a cool library. Thanks!
PluralSight is how I learned MVC. I've never had a subscription with them so I can't speak for any of their videos outside of the MVC ones they had for free. I would imagine they're pretty great for pointing you in the right direction.
Pluralsight is awesome, I totally recommend it.
Is there a tutorial for this? How would the listeners affect other things happening on the thread? button presses? What are Cross thread boundaries. Like I said I am very new to this and all the info I can get would be amazing. Your suggestions seems perfect so I will definitely look into it more.
&gt; Some people dislike C# for whatever reason. That reason is never Language Integrated Query (LINQ), which is arguably C#'s best feature. Using LINQ makes me feel excited in many inappropriate ways &gt;_&gt;
I'm giving an F# talk on Thursday in Chicago. That's LINQ on steroids!
I used Lynda.com when I first started to learn. Writing mobile apps was where I really learned the cool C# tricks and object-oriented design, so be sure to look at those videos too, whichever site you choose to watch.
Just some notes. * You don't need to use parentheses when using the [object initialization](http://msdn.microsoft.com/en-us/library/bb384062.aspx) syntax. `new Object {}` is just as valid. * I think beginners may miss this, and it's not mentioned (or used!) in the article: [Implicitly typed local variables](http://msdn.microsoft.com/en-us/library/bb384061.aspx). - var aspirin = new Drug { Dosage = 81, Name = "Aspirin" }; * "Getters and Setters" are called ["properties" or "accessors"](http://msdn.microsoft.com/en-us/library/x9fsa0sw.aspx), while their couter-parts are called ["fields."](http://msdn.microsoft.com/en-US/library/ms173118\(v=vs.80\).aspx) * The non-expanded version of the authors example are called [auto properties](http://msdn.microsoft.com/en-us/library/bb384054.aspx). The title is strange. Is English the author's first language?
OK, my main gripe with the article is the use of a non-monospaced font for the code. I feel like that's something that you need to use when getting started with any type of programming.
i was debating on whether to include the implicitly typed local variables, but didn't. also, you're not the first person to comment on the title...yes english is my first language. what's strange about it?
I don't really think these are *pitfalls*..
#0: Not reading the .NET Framework Design Guidelines. http://msdn.microsoft.com/en-us/library/ms229042(v=vs.110).aspx You can avoid a lot of BS advice if you have even a basic grasp of that manual. 
The code sections are using a monospaced font. It's [Consolas](http://en.wikipedia.org/wiki/Consolas). Fallbacks are [Menlo](http://en.wikipedia.org/wiki/Menlo_\(typeface\)), [Monaco](http://en.wikipedia.org/wiki/Monaco_\(typeface\)), and [Courier](http://en.wikipedia.org/wiki/Courier_\(typeface\)).
Google defines "pitfall" as "a hidden or unsuspected danger or difficulty," and your subject is "C# beginners." I don't think these are addressing pitfalls that someone may encounter from working with a C# beginner. Rather, these are perhaps "C# features overlooked by newcomers," or "Fundamental C# concepts." Regarding the implicitly typed local variables, I think it's worth pointing out. I work with some folks who have used C# as long as I have, and don't know it's possible.
Perhaps, but they still aren't pitfalls.
There's that too.
I was always interested in F# as it seemed like an interesting way to code but never took some time to actually learn it. Also LINQ is a feature which I abuse at every occasion.
Second that :D
Check out Elmah and do show a friendly error page. When the user calls you, log into Elmah and find all the error details (including what user, what page, when, what, stack trace and all) safely unavailable to users and potential attackers. Of course, don't forget to limit access to the Elmah module to people who actually do the support.
I couldn't look at the link, but if it's an event, the first parameter should be an `object sender`.
Thanks tsukinoki and job_test the loop did the trick. Well actually it turned out that my original code did work in Minecraft, it just did not work in Notepad. So it seems that the KeyDown actually does what i want :-) The reason i do not use AutoIt or AutoHotKey, is that i have some other functionality in my program that i also need. And its always more fun to make your own :-D
~~Problem: the font-family list is `Consolas, "Courier New", Courier, Monospace` – you gotta use `monospace` (small M) when you want to use the system's monospaced font~~ EDIT: Wow, the W3C's CSS validator found 37 problems and 167 warnings in the CSS. EDIT 2: Okay, the problem was that every pre block had inline styling, with Consolas always overriding the font specified in CSS.
I've used proportional fonts for years to reduce eye strain and make it easier to catch typos. Just have to look around for one that was designed for programming (wide spaces, clear distinction between I, 1, l, O and 0). ["Trim" and "Untyped"](https://code.google.com/p/i3project/downloads/detail?name=all_fonts_01102011.zip) are both nice IMHO.
One pitfall for a blogger writing about pitfalls. 1. Know what pitfall means
Can you explain here a little about F# in terms of what it is, what advantages it gives you, and how to implement it. I find online tutorials are mostly, "its a scripting language and here's an a sample" which leaves me confused. 
object sender for me is the viewport, which starts the whole hit test process. I use visualtreehelper.hittest , and then get a rayhittestresult . 
I imagine this came after your recent discussion with /u//Sarcastinator :p. It's worth pointing out, however, that MS don't follow their own practices. For instance: &gt; X DO NOT implement both IEnumerator&lt;T&gt; and IEnumerable&lt;T&gt; on the same type. The same applies to the nongeneric interfaces IEnumerator and IEnumerable. yield-return generated iterators do just that :p. Also, these guidelines don't take into account recent development such as the IReadOnlyX group of interfaces.
Ahh ok, I was able to look at the link now (was on mobile before). Seems like the identity should be in the returned `HitTestResult`
The author's code is prone to mistakes - duplicate numbers, deleted numbers, et cetera. Unless you have to specify every single number for a reason, it's probably better to use a method that can generate the numbers because it is testable.
I really hate that object initialization syntax (especially on domain classes). Please, for the love of god, use constructors!
I kid you not, I spent the last two years learning C# at a reputable Alberta institution, and they never once discussed LINQ. When I finally came upon it myself I felt so betrayed. 
LINQ is amazing; clever use can make C# as terse and expressive as R or Python whilst maintaining everything else to love about .NET. That said, I've seen a lot of horribly performing code which was traced back to developers not fully understanding what actually happens in these calls. Not LINQ's fault by any means, but that is one of the actual pitfalls - ease of use enables use without understanding.
&gt; The purpose of these methods is for better encapsulation of your values, a prime object-oriented concept. This has always been a sore point for me, in that I could never understand the point of this. For Android development, they even recommend ignoring it altogether since it just adds needless overhead. Unless there's: (a) logic which *needs* to be done internally on a value that the caller cannot control, such as a Singleton (and when do people actually use *those* properly?) (b) logic which needs to be done when getting or setting the value I see no point in encapsulating values like this. It's a useless concept and I'm glad more advanced languages that are rising in popularity aren't attempting to replicate what Java brought into popularity.
Well for starters, it's not a scripting language - if you were to rewrite much of your C# code into F#, you'd find a performance increase, particularly when number-crunching is concerned. It's a functional programming language which also supports the Object-Oriented paradigm, and even enhances it with record types and discriminated unions. It is based on the ML family of languages, which spawned off from type theory and lambda calculus, and centers around a type inference algorithm. This algorithm can be used to mathematically prove that a well-typed program will never have a runtime error. In short, if you center your code around types (impossible to do this 100% for large systems), when it compiles, it will likely not contain any runtime errors. This isn't voodoo magic, either - it is based on mathematics, just as SQL is. The best site to go as a C# programmer is [FSharpForFunAndPractice](http://fsharpforfunandprofit.com/series/why-use-fsharp.html). It goes through some basics of the language, contrasts them with C# (and LINQ), and covers a few, often non-simple examples of how to use F# for business-programming tasks.
It seems like a lot of this article is *really* about interface-based programming, and that I definitely agree with. Testability shoots through the roof when you code around interfaces, and while it's certainly possible to over-mock, increasing code coverage is never a bad thing.
**Yes! Exactly! I totally agree with you on this.** I'd actually go so far as to call the object initialization feature one of C#'s largest design flaws (another one being the enum support). While it is nice and cool, it encourages the programmer to "omit" making proper constructors. And constructors is good for you because they give you a basic safety net when you write your methods. For example, if we take the drug example public class Drug { public string Name {get;set;} public int Dosage {get;set;} } What we are saying here is actually that a drug without either a name or a dosage is a perfectly ok object. Also, it's ok to change the name of the drug after object creation. That's probably not correct domain logic, and by not creating a constructor here and instead relying on the object intialization syntax we fail to communicate this to anyone else reading your code or using your class. If instead you'd done this: public class Drug { public Drug(string name) { Name = name; } public string Name {get; private set;} public int Dosage { get; set; } } Then you'd communicate in a much clearer way that it's ok to change the dosage, but you can't change the name of a drug after its creation. This is totally clear to anyone using your class and you can feel safe when writing methods that operates on your drugs that the name will not change (and if you do name validation in the constructor you never have to worry about the name being something weird - so all those string.IsNullOrEmpty checks everywhere goes away!). This is a *huge* boon when you have more complex domain models. Never underestimate the number of lines of code that you save and the number of bugs that you simply can't get by making sure to actually create proper constructors for your objects. Yes. I hate writing constructors as much as anyone else, but if 5 minutes extra per class saves me several hours or days of debugging strange things and littering my application with defensive code every time I want to use these classes....well, I know what I choose. I mainly blame frameworks (especially ORM's) for requiring objects to have a parameterless constructor and then properties with getters and setters for this trend. It is a bad trend, and one that should only be followed when the framework you are using requires it and you actually *gain* something significant by using the framework.
I would much prefer to learn the right way first rather than picking up a bad habit - even if that means learning is a little bit harder..
I came here to post pretty much what you did. A little while ago I started designing all my classes to be "correct upon construction"; whatever state they require is provided in the constructor and all state validation (including null checks) are checked there. It's so absolutely freeing to just _know_ that wherever these objects are used, it's _safe_. To simply _not care_ about correct state. I still use object initialization syntax for larger objects with variable state (for example, GUI objects) but 99% of my custom classes are small enough that this doesn't apply for. &gt; I mainly blame frameworks (especially ORM's) for requiring objects to have a parameterless constructor and then properties with getters and setters for this trend. It is a bad trend, and one that should only be followed when the framework you are using requires it and you actually gain something significant by using the framework. There might be some truth to this. But likely this is trend is also perpetuated by people not separating their database access layers or serialization layers (that is, the layers that have these parameterless constructors and mutable states due to technical restrictions) from their application code. Once you do that and there's only the "last mile" bits of code that convert to/from these design-compromised classes there's no issue. It's a shame that these compromises are a necessary evil, but it's an understandable one as well. In today's day and age, unless it's for the most trivial hello-world-esque hack utility, especially when you have tools like [AutoMapper](http://automapper.codeplex.com/), there really is no excuse not to be separating these concerns.
Thanks for the tip, this site looks really useful. I'll get on reading that. One quick question, is F# designed to replace to C# or work with it?
Honestly, both. Interop between C# and F# is cake - give an F# file a namespace, compile the project, and include a reference to your C# project - now you can call the F# code as if it were a library. XML documentation even works, too! It also works the other way with consuming C# stuff from your F# code. When I use F# I try to isolate it as much as possible. My C# code ends up typically being more of a client than anything else, sending data off to F# modules and getting data back to throw up onto a screen somewhere.
Thats great to hear, that was exactly my thought process in how I could use it. Thanks for the advice
Does anyone else intentionally NOT use var? I've been programming for about 1.5 years (C# my first non-HTML/CSS language) and I hate seeing var all over the place. ClassB classBinstance = ClassA.CreateClassB(); looks much better than var classBinstance = ClassA.CreateClassB();
Installed resharper and stylecop yesterday and it got mad at me for not using var. I don't get it.
That is unforgivable! We need to air a PSA with some Sarah McLachlan music and the sad faces of C# devs who haven't been told about LINQ...
There's a benefit to **not** using ReSharper actually. I agree that it's an amazing tool, and I use it a lot. However, when starting out there's some benefits to knowing why and how things should be done. ReSharper tends to automate those decisions, leaving you less able as a coder. Once you get comfortable with C#, people should absolutely give it a try.
&gt; When I use F# I try to isolate it as much as possible. My C# code ends up typically being more of a client than anything else, sending data off to F# modules and getting data back to throw up onto a screen somewhere. I really like that idea. Particularly for someone like myself coming from C# and feeling a little intimidated by F# and getting my head around functional programming to begin with.
I very much disagree. One of the best uses of constructor parameters are providing dependencies. Beyond that, it's mostly a convenience feature. One that can easily be abused. No one wants to have a constructor with 20 different parameters (with or without defaults). EDIT: Seeing some of the other comments, I think people misunderstand the purpose of object initializers. I don't think anyone is suggesting to use them instead of the constructor for required dependencies.
Although LINQ is great, I (currently) dislike the syntax shown by the author. I much prefer the method style over the query style. I find it easier to quickly understand due to its sequential nature.
The problem is that people **do** use them to construct objects without their required dependencies.
But why teach them something that should never make it into production?
C# events are a bit different from event systems, so be careful not to confuse them. C# events implement the observer pattern, and are essentially just a shorthand for multicast delegates. Firing an event just means you are calling the set of registered delegates in some sequence. This makes it *synchronous*. An event system (for example the Windows message pump) is asynchronous. You post messages to a queue and they are handled when the pump comes around. In a game you might have several queues on several threads. This doesn't mean you can't use C# events as part of an event system. You just need to make sure that the event handler posts to your message queue unless you're really sure you want it to be synchronous. 
Maybe you should stop being a little bitch and just use constructors.;
Because it's still a useful skill. You can't use Enumerable.Range with strings, for example. If you specifically put that into the article and they didn't know both ways, then it can lead to a road block. Besides, they're both simply tools. While that example might not be good for production, if this were strings and not ints that's a better use for the example. Teach people how to use all the tools available to them, not just the ones they'll use more often.
I use it when specifying the type is redundant. eg: var ReservationInvoiceLookup = new Dictionary&lt;KeyValuePair&lt;int,String&gt;,Reservation&gt;(); as opposed to Dictionary&lt;KeyValuePair&lt;int,String&gt;,Reservation&gt; ReservationInvoiceLookup = new Dictionary&lt;KeyValuePair&lt;int,String&gt;,Reservation&gt;(); And I use it to declare the variables used to hold linq results, particularly enumerations.
It was a trivial example, perhaps poorly chosen. static List&lt;int&gt; numbers = new List&lt;int&gt;(){1,2,3,4,5,6,7,8,9,10}; can be replaced by a call to Enumerable.Range- that is true. But you cannot do the same with: static List&lt;String&gt; Fruits = new List&lt;String&gt;() {"Apple","Orange","Banana","Strawberry"}; The example is intended to demonstrate collection initializers. That the specific implementation used for that demonstration has a simpler implementation doesn't really help when that simpler implementation doesn't demonstrate the feature the example was intended for. 
In other words, language constructs can be misused? Not exactly news. Doesn't really support removal of those constructs. 
The author should have used the dose as an example to change it, that is true.
Hey Veggie, thanks for replying. &gt; C# events implement the observer pattern, and are essentially just a shorthand for multicast delegates. Firing an event just means you are calling the set of registered delegates in some sequence. This makes it synchronous. I've 'studied' the observer pattern, and I'm aware of the fact that events are just multicast delegates. I was pretty sure it was synchronous, but its nice to see my guess confirmed. &gt; An event system (for example the Windows message pump) is asynchronous. You post messages to a queue and they are handled when the pump comes around. In a game you might have several queues on several threads. I've only lightly covered multi-threading and while its application in this instance is obvious, I think I'll save that challenge for another time. In regards to asychronous event-queues in games; I can imagine that this would be a nightmare to code when you consider locking, and network delay. &gt; This doesn't mean you can't use C# events as part of an event system. You just need to make sure that the event handler posts to your message queue unless you're really sure you want it to be synchronous. So, if I understand this correctly, you seem to be suggesting that one centralized message queue would/could handle all of the events in my console-based game, synchronously. Correct?
I just realised that in my first year (last year) of C# in college we NEVER ever used {} for the initialization of an object, it was always this: Drug aspirin = new Drug (81,"Aspirin"); And within the class aspirin there were properties for each element. I guess they taught me well, or not? And 1-3 were all covered extensively during the looong classes. LINQ is probably for this year, and well the ?? thingy is just helpful but didn't know of it yet. Please answer if you can!
God.. I'm writing PHP at work now, which requires me to read PHPDocs. Every time I think of MSDN, I start to get emotional..
"5 Features C# Beginners Should Know" would be a bit more appropriate.
wow. I've been programming in C# for 4 years now and I didn't know that. Good looking out. 
Not a fan of making namespace-level changes for relatively short-term instances. It also has the very same problem people are trying to "solve" by avoiding var- that is, you have no clue, at a glance, what type it is. Eg: var ReservationInvoiceLookup = new Dictionary&lt;KeyValuePair&lt;int,String&gt;,Reservation&gt;() You know exactly what type this variable is, just by reading the code. the issue with var is when you use it for type inference from say a method return call who's return type isn't obvious. Then you have to go looking for it. in contrast: ArbitraryReservationLookupType ReservationInvoiceLookup = new ArbitraryReservationLookupType(); tells you very little. It looks like it's own type, but it's really another type, and if you want to know what type it really is, you'll need to find the using statement. (Arguably, any IDE is going to show that definition by hovering, but IDEs aren't always available). The idea of avoiding var at all costs seems to be seated in the idea that because it is a language feature that can be misused in such a way that it makes things less readable, it should be avoided entirely.
Probably, but removing a useful feature because it gets used wrong isn't really a good design.
`new Drug (81,"Aspirin")` is using a constructor to do initialization. When that's available, it's probably better than using the field initializer syntax. But if `Drug` doesn't have a constructor that takes arguments, you can use the initializer syntax instead. Keep in mind that the person that writes a class isn't always the same person that's using it, so you might not get to decide what constructor parameters are available.
Glad to help :) [As has been pointed out](http://www.reddit.com/r/csharp/comments/2hajaq/5_pitfalls_of_c_beginners/ckra3z5), `Enumerable.Range` is worse if you want to introduce the topic of collection initialisers, but [better if you want a range of ints correctly generated](http://www.reddit.com/r/csharp/comments/2hajaq/5_pitfalls_of_c_beginners/ckr5428). 
Basically, I agree. But there's another reason. Private setters.
Well we are taught to ALWAYS use that, have never used {} as I've said so they're doing a good job! But it is true not everyone learns how to code well, and knowing both comes as a plus then. Did you hear about the website that can teach you coding well enough that you can get a job as a coder? Such bullshit.
Add-in Express is nice (I use it), but you can create add-ins without it. See this walkthrough on MSDN to get an idea: http://msdn.microsoft.com/en-us/library/jj620922.aspx If you are using Visual Studio Express, then I don't think the Office development tools are included. If that's the case, you would either need to use VBA or create a separate (standalone) application in C# that launches Excel and interacts with a workbook.
Sometimes constructor parameters aren't available, so you don't have the ability to use them. In those cases, there's nothing wrong with using the `{}` initializer syntax. The website you're talking about is http://exercism.io/. I started using it. It's kind of cool. But it never advertised itself as "teaching coding well enough to get a job". That was other third parties. It is actually just a place to share code reviews on simple exercises. I find that it is actually pretty good at doing that. But no one's going to get a job after learning programming from that site.
If you have Excel, check out PowerQuery, it's an addon from MS to gather data and do pretty crazy stuff with it from all kinds of sources, including SQL Server.
**Generic constraints** Generic constraints are cool. They let you require your generic parameters to be subtypes of a given type. class MyGenericClass&lt;T&gt; where T: IDisposable { /*something*/ } They can also do other wacky stuff like require the generic type parameter to be a class or struct or have a default constructor. **Iterators** Certain methods that return some `IEnumerable&lt;T&gt;` can benefit from being implemented as iterator blocks. IEnumerable&lt;int&gt; MyIterator() { yield return DoSomeExpensiveComputation(); yield return DoSomeExpensiveComputation2(); yield return DoSomeExpensiveComputation3(); } In this iterator the expensive calculations are done lazily and you can iterate to the first value before the second is calculated, and the second before the third, and so on. **Anonymous types** If you have a type that only need to use locally in a single method, you don't have to declare it elsewhere. This should definitely be used with care. If there's a chance the values will ever escape the local scope of a single method, you should not use this. var myReports = new [] { new { Id = 1, Name = "Widgets" }, new { Id = 2, Name = "Minor widgets" }, new { Id = 3, Name = "Reclarbulation" }, }; int minorWidgetsId = myReports[1].Id; 
Ah, yes - forgot about those. I want to have control over a project and adjust the Roslyn compiler to fail to compile on any get/set pattern unless it's used for certain cases.
Hey thanks for the info! Saved the info for later use! On my final I had to use the Dictionary thingy, but I couldn't figure out how to search on the key. I think it was my class that was a bit off.
Consolas is a monospaced font, so I'm not sure I understand what problem you're describing. In your struck-out comment, "monospace" as a font-family will use the system's default monospaced font, but the previous 3 are all classified as monospace. You don't *have* to specify it to use other monospaced fonts.
WOAH I just now noticed your username and that is just fucking awesome! [–]shitwhore 1 point 1 minute ago WOAH I just now noticed your username and that is just fucking awesome! [–]shitwhore 1 point 1 minute ago WOAH I just now noticed your username and that is just fucking awesome! [–]shitwhore 1 point 1 minute ago WOAH I just now noticed your username and that is just fucking awesome! 
If you have `IDictionary&lt;string, MyClass&gt; myDictionary`, that means your keys are strings. You can retrieve the value for the key "abc123" like this: `myDictionary["abc123"]`. This will throw an exception if that key does not exist. If you're not sure whether the key exists, you can use `myDictionary.TryGetValue("abc123", out result)`.
That sounds too easy, my error must have been somewhere else then? I'm pretty sure I tried that! Or didn't I... Anyhow, there is no way to check because I can't look at the code from my exam anymore. By the way nice website! Can I come to you when I need advice, Tom? My name is Tommy. 
Thanks. You can always ask. No promises about whether I can help.
I'm coming up on a decade of programming professionally, and in my opinion, the less verbose code is, the easier it is to read (within limits - I dislike Lisp-style languages). I use explicit type declarations when needed, eg, MyType myVar; if (myList.TryGetValue("key", out myVar)) { /*...*/ } IMO explicitly typing a variable when you don't have to just adds noise to the source code. That said, if I have some complex type creation happening through, eg, a LINQ statement, I will use the explicit type. MyType myVar = myList .Where(/*...*/) .Select(new MyType{/*...*/}); I feel this adds clarity by not requiring a developer to read the full LINQ query to see the return type. Granted, your IDE will tell you, but it's nice to have clarity without requiring an IDE.
&gt; `new Drug (81,"Aspirin")` is using a constructor to do initialization. Just for clarity, the object initialization syntax calls a parameter-less constructor.
Well, it will probably be minor nooby questions so I think I'm at the right address. My professors either take a week to answer or don't answer at all, which is pretty sad.
Great reply, thanks! &gt; because it's impossible to change the value of immutable data in a well-typed program The immutability of much of the data in F# is part of what makes it so compelling to me. It seems like it could help solve a good number of asynchronous development issues as well!
I don't think you were either taught incorrectly or correctly. The use of *only* a constructor, in your class, was likely a [lie-to-children](http://en.wikipedia.org/wiki/Lie-to-children), and is a good way to teach it. There's no need to introduce the object initialization syntax at the beginning, because it might teach you to avoid constructors. Constructors are important, and being able to define useful constructors is a good thing to practice. They are, essentially, the entry-point [interface](http://en.wikipedia.org/wiki/Application_programming_interface) to your code. So with all that said, I tend to use constructors for classes that have complex operations (in which case I've usually made properties and fields private and/or [readonly](http://msdn.microsoft.com/en-us/library/acdd6hb7.aspx)), and I tend to use parameter-less constructors and the object initialization syntax for classes that either 1) extend classes with complex operations or 2) are simply data structures.
The crossed out text was plain wrong, my fault. I thought you had to write `monospace` in lowercase, which is not the case, because browsers are pretty clever. Instead, the problem was that every code section overrode the site's stylesheet with its own font-family list (consisting of Consolas only), which made all code non-monospaced for everyone without Consolas.
He shows both! I also prefer the method syntax. ;)
Yes, but it doesn't demonstrate the concept of collection initialization.
&gt; Also, these guidelines don't take into account recent development such as the IReadOnlyX group of interfaces. Agreed. These shouldn't be treated as holy scripture, but you do need to know why they exist before you start doing something different.
One obvious case when this returns 0 is when amount is not greater than zero (0 or negative integer, or some value &gt; 2147483647, which gets casted to a negative integer). Another case is that the total integer overflowed, but you would get many more negative results for each zero result... BTW, I see one problem with the algorithm. The Random.Next(int,int) method returns number that is less than the second argument (only exception is when the first and second argument matches, then the value of first (also second) argument is returned). Therefore if you call Roll(1, 6), you can never get result of 6 - which seems like a mistake to me. The line should imho be: total += r.Next(0, sides) + 1;
&gt;C# unlike other languages has really sweet object initialization syntax. Hmm, I think you'll find this exists in a number of languages, like Go for example. http://play.golang.org/p/qd5buKpYC8
You should consider reading something about [Reactive Extensions (Rx)](http://msdn.microsoft.com/en-us/data/gg577609.aspx), it has potential to greatly influence architecture design you will create. One of many awesome things it can do is to allow you to manipulate events as "channels" and provides easy way to select, modify, merge these channels, subscribe to them, observe them using different schedulers and so on. This one-sentence description is in no way full and due to my lack of english skills even not accurate. What I know is, that since our team discovered Rx, our designing style changed significantly and the result is (subjectively) much better code.
Basically, the first is inclusive and the second is exclusive. It's pretty common with random number generators to do that since they use mod. randomNumber= (something between 0 and MaxInt); results = (randomNumber - arg0) % (arg1 - arg0) + arg0; The result is: arg0 &lt;= x &lt; arg1.
Honestly, I've found if you learn best by reading, good old fashioned books are the way to go. Head First C# if you're a beginner, then C# in a Nutshell and then C# In Depth by Jon Skeet. These are people who get paid to write, who have editors and so on. You should read blogs too (Eric Lippert and Jon Skeet again!) but books, man. Books!
http://imgur.com/1dOq8Bn
From what i can see i assume that you always create a new PictureBox. Why? Can't u reuse the already existing one? If you actually do create a new PictureBox every time you call the stated code what happens to the old PictureBoxes? If you don't remove the old PictureBoxes from the Controls of your Form you just stack up a pile of PictureBoxes. So you get many layers [msdn](http://msdn.microsoft.com/en-us/library/aa984382%28v=vs.71%29.aspx) and just one PictureBox (propably the first one) is on the top layer and all other PictureBoxes are hidden by it. This would lead to the behaviour that seemingly nothing changes. If my assumptions are right i would propose that you use only one PictureBox to show your plots and just change the .Image property to your newly created bitmap. EDIT: I also noticed, that you initialize some variables with the same value as an already exisiting one e.g. float xplus1 = x - 3; and float xminus = x - 3;. Does this have any special purpose? 
 public static readonly ThreadLocal&lt;RandomNumberGenerator&gt; RNG = new ThreadLocal&lt;RandomNumberGenerator&gt;( () =&gt; new RNGCryptoServiceProvider() ); public static Int32 Next( this RandomNumberGenerator rng ) { var data = new byte[ sizeof( Int32 ) ]; rng.GetNonZeroBytes( data ); return BitConverter.ToInt32( data, 0 ); } 
I looked over it briefly, and I can see why you might like it. Additionally, it seems to be really well organized and structured. However, it gets into asynchronous programming, which I can't get into yet. I'm still working on simpler design patterns (like this event system for the console-based game). 
&gt;I also noticed, that you initialize some variables with the same value as an already exisiting one e.g. float xplus1 = x - 3; and float xminus = x - 3;. Does this have any special purpose? Looks like those are the corners of the rects he's drawing I also think the issue is that he's laying too many PictureBoxes. Just create one in your OnLoad and have a reference to it.
any advise what to watch out for when writing linq? so far my little experience LINQ performs slightly slower than normal C# and i want to write better. thanks.
You're right, I totally skimmed over that. I guess I saw the query syntax and immediately zoned out.
Overkill
You say that utilizing multi-threading for this game is obvious, but honestly, I'm not seeing that you'd need any sort of multithreaded architecture. The fact that you can define the actions your program will take in a logical sequence screams out, "DON'T MULTITHREAD ME BRO!" Add to that the fact that turn based games are inherently synchronous and the explicit use of multiple threads becomes more and more questionable. If, when describing your program, every step is separated by, "and then," and you never say, "and while that's happening...," you don't need multiple threads.
Yeah I see your point. However, when I said "in this instance", I was referring to my current challenge of creating an event system for 'a game'. I know that's a little confusing, but I was trying to refer to "how obvious the application of multitasking is to large-scale/possibly multiplayer games". So many events... Sorry for the confusion lol. 
I avoid using var
I'm a bit confused about "number of sides on the die plus one", but this will sum 10 flips of a coin with 1 for heads and 2 for tails. You can change the call of DiceRoll to DiceRoll(10,6) to roll a dice 6 times and sum the result. LINQ is your friend. You just may not know it yet. Look up how to use Enumerable.Range and avoid loops. using System; using System.Diagnostics; using System.Linq; namespace DiceNamespace { class Program { static readonly Random TheRandom = new Random(Guid.NewGuid().GetHashCode()); static void Main() { Debug.WriteLine(DiceRoll(10, 2)); } static int DiceRoll(int amount, int sides) { return Enumerable.Range(0, amount).Sum(i =&gt; TheRandom.Next(1, sides+1)); } } } 
I'm going to go one further and say hes doing all this once on form load and not hooked up to any events or know how to utilize them.
*In the arms of a query...*
But auto-properties generally don't add overhead since they LOOK just like fields. And as the [StyleCop](http://www.stylecop.com/docs/SA1401.html) description points out: &gt; This allows the internal implementation of the property to change over time without changing the interface of the class.
&gt; so far my little experience LINQ performs slightly slower than normal C# and i want to write better What specifically is slower? If you decompile the assemblies, you'll find that they're all lazy collections - and you won't really find anything faster unless you're using an array. This is assuming you're using the proper calls, however. Incorrect use of LINQ calls will always be less efficient.
Like these coding techniques, ReSharper is simply a tool. If you just let it change everything, you'll be worse off for it. But if you use it to get suggestions, and then understand those suggestions, you may find that you're learning new/better approaches, LINQ tricks, etc.
What's wrong with enums?
I avoid using var unless it is really, really obvious what the variable is.
I don't code for C# on Linux but in my experience setting up Java on Linux is a pain in the ass
a covered pit for use as a trap. easy 
Soooo... this an ASP project or winforms or WPF?
~~Incorrect use of LINQ calls will always be less efficient.~~ thats my question, what is incorrect use of LINQ ?
&gt; but sometimes it returns a 0.
Well, I should say it's more about incorrect data structures and program design more than anything else. A good example which comes to mind would be a call to *SelectMany()* on a hug lists with huge inner lists. Flattening all those sequences is technically O(n^2), so the program design puts you in a position where that call will be inefficient. Then there's simple object creation to be concerned with. A call such as this: var stuff = myItems.Select(item =&gt; new { item.A, item.B, item.C }); will instantiate a sequence of brand-new, anonymous objects - do that on a big list, and bottlenecking via object creation will be a problem. And speaking of object creation, each call creates a new object. That may not necessarily be a bad thing, so long as the data in those objects isn't too complicated. If you've got classes which have instances of classes, which also have instances of classes ... LINQ won't be doing you any favors, that's for sure.
To any haters on Random, read up.. speed is not paramount here.. Bias may be predicted on the rolls.. http://stackoverflow.com/questions/1257299/why-use-the-c-sharp-class-system-random-at-all-instead-of-system-security-crypto
&gt; Overkill Nah, this is overkill. :P public static readonly ThreadLocal&lt;Random&gt; ThreadSafeRandom = new ThreadLocal&lt;Random&gt;( valueFactory: () =&gt; { var hash = ThreadingExtensions.ThreadLocalSHA256Managed.Value.ComputeHash( Guid.NewGuid().ToByteArray() ); var seed = BitConverter.ToInt32( value: hash, startIndex: 0 ); return new Random( seed.GetHashMerge( Thread.CurrentThread.ManagedThreadId ) ); }, trackAllValues: false ); 
&gt; I am using Entity Framework 6 for a primarily data driven winform application 
I think what you're talking about is variable scope. It's difficult to tell you exactly how to do this without seeing all of your code but essentially you need to create your sites variable in a higher scope and pass it in to the constructor of your tabs. For example, create it at form load then pass it into the constructor for each tab control.
Put a breakpoint in the method then watch the changes in the variables as the code is executed. 
I've been a professional developer for close to a decade now and I've never once found a need to use a goto statement that some OO pattern didn't solve in a much cleaner way. I'm sure there may be some case where it's the best choice but I've yet to see it. Perhaps on some really memory constrained device or something. If you have an example, I'd like to see it. Note: I'm not being facetious or sarcastic, I'm genuinely interested in where goto would be the best choice.
Not a direct answer, but when doing a lot of graphics on Winforms I found Bob Powell's GDI+ articles really helpful: http://bobpowell.net/faqmain.aspx 
There's nothing *wrong* with enums, it's just that the C# enum support is woefully weak in comparison to Java for example. In order to get enums with the power that they have in java in c# you have to resort to tricks like putting attributes on them, adding extension methods or not using enums at all and instead replacing them with private classes (and thus more or less having to re-implement enums altogether). Enums in C# is little more than named constants and they have several gotchas in them when it comes to converting to and from them and so on. Sometimes named constants is all you need and then they're perfectly fine, but if you've gotten used to a more rich and powerful enum concept from some other language (like java) then you'll most likely be in for a cold shower when trying to use enums in C#.
Ok. I only ask because persistence in this context is a bit different than it would be in a web setting.
Besides all the other things that have been said in the responses, I would like to add that supplying such an extra "random" seed is quite pointless. Unless you have very specific requirements (eg creating a lot of instances of the Random class) using the default constructor (which in itself uses a time-dependant seed) is more than enough. Also, it is usually best to create only one instance of the Random class, and keep reusing it. One more note on the Random class: it is not really random, but pseudo-random, meaning that the same seed will yield the same sequence of numbers. I have changed your class to this: (putting opening brackets on the next line is .NET standard, a class with only static members can be created as a static class) public static class Dice { private static Random _random = new Random(); public static int Roll(int amount, int sides) { int total = 0; while (amount &gt; 0) { total += _random.Next(1, sides + 1); amount --; } return total; } }
Thats okay but it needs to be automated because we need to avoid user interaction. That is why I needed to make an Add-In :)
I will check it. Thanks! :)
Is the need for the plugin because you need user input on what query to run? If not, then have Excel connect to a SPROC on sql server and return then data. You can open the spreadsheet and simply refresh the data.
This is indeed a good way to work, I will remember it!
Yes we are going to have a query criteria.. but still it is not quite sure if it is going to be an Add-in or workbook programming i just need the idea how to query sql data from excel :D
I've written some code since my original post, and this is the naming convention I've use thus far. Just to clarify though, OnDealDamage is the function that actually handles the subtraction of health, and whatnot, correct? (along with null checking)
Here's what I'd do, then, create an interface IGameEvent that defines a single method called Process(), then implement that interface as a series of classes, MoveEvent, DamageEvent, HealEvent, etc. The program itself should have a static Queue&lt;IGameEvent&gt; of events to process (FIFO queue). Every turn, the first event that you'll push into your queue is a move event to handle the keypress. The main loop will basically pop and call process on an event from the queue until it is empty, which will be the signal that a turn has ended. The processing of an event may add more events to the queue.
Wow this makes so much sense. Let me make sure I understand correctly though. Meta code: while(game not over) { fetch user input; add 'starting event' to queue; while(queue not empty) { process queue; } //end of turn }
:P Obviously, I didn't compile my work. I'll fix it.
Yep, that's about what i was thinking.
Hmm. Well then, I obviously have more learning to do. Is there any way I could get you to look at these two images? I hate submitting code this way, but its quick, and we don't lose the color formatting. [UI / Creature / Game classes.](http://i.imgur.com/R3vpXTY.png) [Events \(manager\) class.](http://i.imgur.com/QROFCOH.png) I wrote the above code, because its modeled after [this](http://www.willrmiller.com/?p=87), which seemed to be the only piece of code that looked like it might meet my needs. Obviously my code does NOT follow your naming conventions, and obviously I'm missing anything that specifically used the keyword 'event'. I've been thinking about how to change this, since last night, and I'm still trying to wrap my head around it. Any help would be appreciated. 
You've helped me tremendously. Thanks!
Once you set it up, it just needs to be refreshed. You could have it refresh whenever it opens.
All software based random number generators are pseudorandom. The Random class is distinguished by being fast and easily predictable. Whether [this](http://en.wikipedia.org/wiki/Lavarand) is a true random number generator is something philosophers and physicist can have fun arguing. 
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Lavarand**](https://en.wikipedia.org/wiki/Lavarand): [](#sfw) --- &gt;__Lavarand__ was a [hardware random number generator](https://en.wikipedia.org/wiki/Hardware_random_number_generator) designed by [Silicon Graphics](https://en.wikipedia.org/wiki/Silicon_Graphics) that worked by taking pictures of the patterns made by the floating material in [lava lamps](https://en.wikipedia.org/wiki/Lava_lamp), extracting random data from the pictures, and using the result to seed a [pseudo-random number generator](https://en.wikipedia.org/wiki/Pseudo-random_number_generator). Although the secondary part of the random number generation uses a pseudo-random number generator, the full process essentially qualifies as a "true" random number generator due to the random seed that is used. Its applicability however is limited by its low bandwidth. &gt; --- ^Interesting: [^Lava ^lamp](https://en.wikipedia.org/wiki/Lava_lamp) ^| [^List ^of ^random ^number ^generators](https://en.wikipedia.org/wiki/List_of_random_number_generators) ^| [^Random ^number ^generation](https://en.wikipedia.org/wiki/Random_number_generation) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cks429m) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cks429m)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
I understand it's simply a tool, but it actually does more more than most tools (even than Visual Studio). Try coding a week without it to see the difference it makes.
[MonoDevelop](http://monodevelop.com/) is the only one I know about.
There is [MonoDevelop](http://monodevelop.com/). It's quite good for standard C# development, but in my time using it, I can't think of any functionality it posessed that Visual Studio didn't. I used it just because it was Open Source and functioned for my purposes. If your development needs rely really heavily on Microsoft stack/technologies, you won't find anything with better integration than Visual Studio. That said, if you really want customizability, you can actually get a lot of IDE functionality using [OmniSharp](https://github.com/nosami/Omnisharp) in conjunction with a text editor like Vim, Emacs or Sublime Text. OmniSharp does intellisense, static code analysis, standard refactoring ops like renaming, type information lookup, jump to derived types, and so on. I've used it and had good experiences.
&gt; •Mediocre code completion (w/o resharper) Wuh? Are you running vs2003 or something?
I found monodevelop pretty terrible when I used it with MonoGame / Unity. OmniSharp looks interesting. Is it more powerful than VS2013s code analysis / completion ? I will have a look at it when I come home. It's mono compatible right ?
I think MonoDevelop is your only choice right now that's feasible LinqPad - I haven't seen it mentioned, it's not an IDE per se, but you can write C# in it OS Independent will be hard pressed aside from MonoDevelop I think with Roslyn, there will be a little more movement in that space I am also very surprised by your bullets against VS, I find it one of the top 2 IDEs I've ever used, the other being IntelliJ Idea which I use for everything but C#/C++. Although I do use ReSharper and a few other extensions so that may alter my experience
People have been wishing that JetBrains would roll their own C# IDE, but I've never heard anything even remotely official from them saying that they plan to move from R# to a full-on competitor.
VS2013 - Have you used resharper ?
 Have a look at tomato visual assist. 
vi, or even better, a magnetic needle and a steady hand.
SharpDevelop used to be good - haven't looked back since switching to VS though.
There are *so* many approaches to this. Building a plug-in would work, but is also perhaps overkill. In the spreadsheet, you can bind cells to a table in SQL server. Example: On Sheet 1, you have all your input parameters / settings that users can change. It pulls these from the DB. When they set their settings, those settings are used and passed to a SPROC that populates data on sheet 2. 
* MS Dependency Uh, you're working with C#... you can only get so far from MS and still be using C#/.Net. Roslyn is still an MS project, and Mono can only follow MS, since they set the spec. C# will always be 'MS dependent'. ^^^Edit: ^^^typos.
"Mediocre code completion" doesn't seem to be particularly true. You would need to be more specific about what you mean. Same for mediocre customizability. What exactly do you mean by that? all keyboard shortcuts can be customized and you can develop your own plugins if you really want to customize it further (free plugins/extensions notwithstanding, of course). I could possibly see what you mean if you were actually referring to Visual Studio and C++, since C++'s code completion and IDE features are not nearly as sophisticated as either C# or VB.NET's, bu for C# that simply isn't the case. Of any IDE I have ever used, Visual Studio is simply the best. If you want to see a terrible, overpriced and underfunctioning IDE, refer to Embarcerdero's various IDE toolsets- Great language (Delphi), terrible IDE. Half of the features people purport to make Resharper "Required" for them are implemented in Visual Studio. They continue to use Resharper because those features used to be added by Resharper a decade ago. Otherwise, OS dependency and I suppose vendor dependency could be considered also; but truly if you want to eliminate any ties to Microsoft or Windows you will have to switch to another language. Roslyn can compile on other Operating Systems but you still need an alternative framework implementation, and while Mono is pretty good you aren't going to be running WPF applications on Ubuntu or MVC Projects on Apache anytime soon (if ever).
[SharpDevelop!](http://www.icsharpcode.net/opensource/sd/)
I don't NEED completion at all, I WANT it.
You want the [Contains](http://msdn.microsoft.com/en-us/library/gg509017.aspx#BKMK_UsingContainsOperator) method. Here it is in Lambda syntax: var onlyListA = listOfTransactionsA.Where(a =&gt; !listOfTransactionsB.Contains(b =&gt; b.invTransId == a.invTransId)); I would recommend reading through the list of [101 LINQ Exampels](http://code.msdn.microsoft.com/101-LINQ-Samples-3fb9811b) for anyone looking to up their LINQ game. Edit: I had previously had a very incomplete idea of except here. You could also use except, but you'd have to implement your own equality comparer for your class. It looks like Except can only use the default equality comparer, too, so I would not recommend going that route.
 listOfTransactionsA .Where(a =&gt; !listOfTransactionsB.Any(b =&gt; b.invTransId == a.invTransId)) .ToList(); Or alternatively if it's more readable/understandable: listOfTransactionsA .Where(a =&gt; listOfTransactionsB.All(b =&gt; b.invTransId != a.invTransId)) .ToList(); Not necessarily ideal. This means for every "A" transaction, it's going to check every single "B" for a match. Depending on how many transactions you have, this could be pretty slow. If so, you can build a hashtable lookup of all the invTransIds in the "B" list first which should be much faster for larger sets: var transactionBIDs = new HashSet&lt;int&gt;(listOfTransactionsB.Select(b =&gt; b.invTransId)); listOfTransactionsA .Where(a =&gt; !transactionBIDs.Contains(a.invTransId)) .ToList(); EDIT: If you want to use the `Except` LINQ method, you'll have to provide an implementation of `IEqualityComparer&lt;SalesTransaction&gt;` to tell it how to determine equality (since in you're case, you're not using object reference equality, and I'm not sure if you want your `SalesTransaction` object to override its `Equals` method to simply check for the `invTransId` for equality.) In this case, you would use this [`Except` overload](http://msdn.microsoft.com/en-us/library/vstudio/bb336390%28v=vs.100%29.aspx). public class SalesTransactionComparer : IEqualityComparer&lt;SalesTransaction&gt; { public bool Equals(SalesTransaction x, SalesTransaction y) { return x.invTransId == y.invTransId; } public int GetHashCode(SalesTransaction obj) { return 0; } } listOfTransactionsA.Except(listOfTransactionsB, new SalesTransactionComparer()); Not sure on performance; since we're returning a constant `0` value for the `GetHashCode`, I suspect it's construction and lookup of the hashtables it internally uses won't be terribly efficient.
I solved the problem. In the end it wasn't the code above that was the problem, it was the code calling for it. I had placed the call in the wrong part of a while block, and so the call wasn't being executed sometimes. It works now.
Upvote. I've recently gone from VS2012 w/ReSharper to VS2013 without it, and find myself missing a lot of stuff that I didn't even realize I used.
Or butterflies
if you are looking for a match on the transactions, you could overwrite the Equals and GetHashCode methods on your class then call either .Contains or .Except example class SalesTransaction() { public int invTransID {get;set;} public DateTime transDate {get;set;} public string transType {get;set;} public override bool Equals (object o) { if (GetType() == typeof(SalesTransaction)) { var trans = (SalesTransaction)o; if (trans.invTransID == invTransID &amp;&amp; trans.transDate == transDate &amp;&amp; trans.transType == transType) return true; } return base.Equals(o); } public override int GetHashCode() { return invTransID.GetHashCode() ^ transDate.GetHashCode() ^ transType.GetHashCode(); } }
I haven't used it extensively in a long time, but it seems like they've done a really good job at keeping up to date with new framework versions and features.
They won't even move resharper over to roslyn :P
So your using an up to date, expensive piece of software but are complaining about an extra $100 for a re-sharper license? I'm not sure I follow this line of thinking.
TL;DR; you don't want to develop C#
Well, use VS then.
&gt;I've used Sublime. I think I'm missing something because I don't see what the big deal is. It's Hipster Certified™
Thanks for that MSDN link. I've bookmarked it. Still getting my head around lambdas, so I appreciate the nudge in the right direction.
Your goal is to output "1 foot, 1 inch" or you want to output the decimal foot value of "1.083" ? Think about how you'd calculate it on paper if someone gave you 13 inches. What steps would you take?
Great advice. Your first example did the trick. But you're right that performance isn't great. Once I start dealing with lists of more than a few hundred thousand, it really bogs down. I'll try implementing the Comparer class or the hashtable to see how they stack up. I'll report back with what I find.
Good call. My bad; I typed it up before leaving for lunch. I should have paid more attention.
You can divide inches by 12 to get feet and then modulus divide by 12 to get the remaining inches. int feet = height_in_inches / 12 int inches = height_in_inches % 12 then output to console.
Eh? What's your argument? That because Resharper is cheaper than VS then the weak support for refactoring from the later is suddenly cool?
JetBrains utilizes the same core IDE for their various targeted environments. IntelliJ is the primary one, though, and includes free plugins for the others (e.g. php, python). Before I knew that I picked up a few of them in their end-of-the-world 2012 sale and overall I like their IDE's. I still prefer VS in general, but I wouldn't scream at using theirs on a daily basis.
Returning the same hash code will result in hash-set and hash-table lookups having `O(n)` complexity instead of `O(1)`, which degrades performance of your final approach to your very first solution (`O(n^2)`, or rather `O(n*m)` in general). [EDIT] If the `invTransId` is really an identifier, you should just return `obj.invTransId.GetHashCode()` as the hash-code for the whole `SalesTransaction` instance.
I figured it would be something like that. Perhaps returning the `obj.invTransId.GetHashCode()` would be correct enough in _this specific_ context.
If that one property is indeed an *identifier* of the whole instance then yes, it should be a perfect fix :)
MATH!
The only reason I am considering using it at all is to work on PHP projects. As you probably know, Visual Studio is less-than-stellar for php. In fact, out of the box, it doesn't even recognize .php files as text files. It requires a plugin just to do that. There are three of them that I am aware of. One is free, and works pretty basic. The other two are $100 each, and seem to do the same thing as each other. One is newer than the other. What IDE do you use for .php projects?
MATH.. As said before. [Here is a start](http://msdn.microsoft.com/en-us/library/0w4e0fzs.aspx)
we're everywhere OO
&gt; "Mediocre code completion" doesn't seem to be particularly true. Yeah, I'm not getting it either. The Code Completion in VS is an order of magnitude better than anything I've seen elsewhere. Granted I haven't looked at everything... But I've seen a lot. With VS I can practically code with my fucking elbows. 
NetBeans, IDEA... Of course, assuming you were talking about IDEs with support for C# only.
What is VS not doing (or not doing well enough) specifically? 
To take this a step further you could also include: if feet &gt; 0 print feet + " ft and " + inches + " in" else print inches + " in"
Sublime is an awesome text editor, so when you're doing work where the most convenient set of tools revolves around just a text editor, it's awesome. IDE-driven development using Sublime is like using a hammer when you need a sledgehammer.
I'm using SharpDevelop and Visual Studio in my job. I have to say that for GUI-Designing and GUI-Programming, I most likely prefer VS (in combination with Blend). For usual programm logic I prefer SharpDevelop. For ASP.NET both IDEs are shit - in comparison to e.g. WPF/Winforms programming. If you are using "new" .NET features like Entity Framework, etc. VS has better support on these topics, yet as a pure programming IDE I always prefer SharpDevelop. And it's free. So give it a try.
maybe this is a bit much for a beginner but maybe you could try something like this: static Func&lt;decimal, decimal&gt; FeetToInches = f =&gt; { return f * 12; }; static Func&lt;decimal, decimal&gt; InchesToFeet = i =&gt; { return i / 12; }; static void Main(string[] args) { var inches = 16.5m; var feet = 2.5m; Console.WriteLine(InchesToFeet(inches) + " Feet"); Console.WriteLine(FeetToInches(feet) + " Inches"); Console.ReadLine(); }
The latest TFS has git source control as one of the built-in options. VS2013 has a git client built-in. If you use those things, there's no need to use a separate solution.
I would agree with you if you wanted to start your journey using DVCS the way you used TFS CVS. This approach misses the whole point of DVCS though. The Visual Studio built in Git support gives no team based direction on feature branching, pull requests, GitFlow or anything else other than "commit, push, pull". It actually makes these approaches harder than it should be in order to over-simplify Git - it puts an artificial ceiling on how you understand and use Git to be productive. If you read the blog series you'll see why I suggest SourceTree instead of Visual Studio. It allows you to keep an easy to understand UI abstraction over the top of Git while also supporting team workflows like GitFlow, native pull requests to Github and Bitbucket and much more. It's also cross platform for mixed dev teams, and its free. As far as installing and managing a local TFS environment, its a pretty big investment that I used to be 100% behind, but now think they've jumped the shark in favor of a cloud service that costs the price of a couple of coffees per head per month.
We recently (last year) switched from VSS/ClearCase to Git. It was a hard transition, mainly for learning, but after seeing a dozen developers go through it, it seems to take about 3-4 months to "get it." We ended up using Git Extensions though for our front-end instead of VS2010 (then VS2012).
I've used this one http://www.aforgenet.com/ Just for some basic image processing, but it was also helpful for looking at how they did some things to learn how to efficiently process image data.
Git Extensions is definitely a stable piece of tooling these days (it wasn't always). I usually had this installed on my dev's desktops for File Explorer contextual menu support (right-click, clone etc). I recommend Source Tree so strongly because of it's support for GitFlow, feature branching and pull requests. If your team is at a stage where they understand Git, part 4 of my blog series will put your team on steroids!
Yes! I dislike when I open someone's code and var is all over the place. It just feels lazy to me. And even worse, it feels a lot of times that the coder doesn't really understand it's still strongly typed. Personally my use of var is restricted to anonymous types. 
It's not bad in this trivial example. But many times, the right-hand side is being set from elsewhere (say, the result of a method call). Now you have to do a little digging to see what that method is returning. That's why I prefer to avoid var except for anonymous types.
A video game released by Activision for the Atari 2600 in 1982, written by David Crane. 
The Visual Studio client does also support branching and merging. And if you're already an MS shop, TFS is probably not an additional cost. I do have Source Tree installed also for more advanced scenarios, but for the most part, VS has the most frequent operations, "commit, push, and pull" as you said.
While I do love constructors and am a big fan of constructor chaining, there are places where initializers are very useful too. As others have said, C# is a big toolbox, and it's up to us to select the appropriate tool for the task at hand. That's part of what makes you a better programmer!
I agree wholeheartedly with this comment. If we remove every feature of C# that people abuse, we will be left with no language at all. :)
"Checkout Windows-style, commit Unix-style line endings" aka autocrlf=true is the WORST setting to ever be invented for Git. It can arbitrarily fuck with files if it detects they're text, and will replace crlf with lf, which can break cryptographically signed stuff. Plus at times during merges you can be dumped into a mixed lf mode which it'll have problems with. The third option ("Checkout as-is, commit as-is") aka autocrlf=false is far safer. 
I work in a shop of 80 devs and 2 remote offices. We use TFS locally, and have remote TFS servers that sync so those users can commit locally. It works amazingly well. There are some "advanced" users who use power shell to manage their checkins, etc. All in all, it works quite well for everyone involved: from the junior developer to platform architect. Not that I'm against it, but what would be the benefit of retraining an entire shop to use GIT? To me, it appears to be a cumbersome command line version of doing something that TFS does really well through an easy GUI. So, sell it to me. What are the benefits? The features you cannot live without? 
There are alternatives, but I think you will find nearly all professional C# developers will tell you VS is their preferred IDE hands down. Quite frankly, judging by some of your comments, I'm not sure anything would make you happy, but you still haven't clarified on specific issues - for example, in what way is the code completion mediocre?
I don't think there is a way around the html login popup. That's just how oAuth 2.0 works. I'd be delighted to hear there is a way... but I'm pretty sure that's just how it works for security reasons. 
When you say that you're not a fan of Microsoft's videos, have you looked at the Microsoft Virtual Academy videos [1]? I can't vouch for the game development videos, but some of their other ones are pretty good. [1] http://www.microsoftvirtualacademy.com/
The price tag is a very attractive feature.
Fair warning - the merge resolution tools in VS2013 can be pretty shocking. Everyone on our dev team moved away from using them within days of switching to git because of this.
Since half of our heavy lifters came from ClearCase where they already did feature branches, we started that from day one. Our approach was based on GitFlow, but they wanted a slightly different approach for managing it because of how I develop. The main reason is I do a local commit about every 1-15 minutes. Finish a train of thought, commit. For me, it works out perfectly because I work with such small units of code at a time but I make sweeping changes to the system. However, most other developers still only check in once or twice per feature. When they saw everything together, the noise of my commits made it difficult to focus (yeah, there are tools that help it, but they have drawbacks themselves). Because of this, we decided that the noise wasn't helpful after a few weeks, so we end up doing squash commits to the release branch with a long commit message to explain everything that's done. It keeps the main history clean for a project that will be running for 10 years and avoids the noise like "committing because I'm going to lunch" or "switching to a new task." Also, they were bringing the history of their VSS/ClearCase management where (at the time), I've been working on Git for five years. Much different beasts, but we had to find a compromise. In the end, we have a release branch (release_X.X.X, they also had a thing against dashes). Developers check into the release branch and we use continuous deployment until we're happy. When the next release comes out, we just branch off release_X.X.X and make release_X.X.Y. That approach worked out pretty well with our CI system because we have up to three simo releases being tested at a time. We use CruiseControl.NET, so I just have a template file for a release. With a new release, we just copy the last release's project XML, do a search and replace, and include it into ccnet.config. Everything else lines up and we've added a new release into our process. When we finalize a release, we tag is and remove the CC.net projects.
The code will work if you modify your `ISomeInterface&lt;T&gt;` to be an [`out` covariant generic type](http://msdn.microsoft.com/en-us/library/dd469487.aspx). That is: interface ISomeInterface&lt;out T&gt; { } Not sure what implications this has for your classes/application structure though as it means that any members on `ISomeInterface&lt;out T&gt;` can only return/output `T` values (that is, no inputs). That is, this is allowed: interface ISomeInterface&lt;out T&gt; { T GetSomething { get; } T ReturnSomething(); } But these members would not be allowed (that is, would not compile): interface ISomeInterface&lt;out T&gt; { T GetOrSetSomething { get; set; } void DoSomething(T obj); }
This worked exactly as I needed it to - thanks! Fortunately my interface does not need to operate on objects of T, just return them. I will have to be vigilant to use this feature sparsely :)
Lynda looks like a really useful resource. It has a lot of videos and isn't as expensive as PluralSight. I'll look more into it! Thanks!
I'll check it out, thanks!
I'm also getting to the same point where I'm a getting a little annoyed with Visual Studio. Unfortunately though its an uphill battle to try to get out of VS, so if you think you're going to find something that will outright replace it, then you are definitely going to be out of luck. What I'd encourage you to do is be comfortable with trying to find a "text editor on steroids". My main suggestion is to look at Sublime with a plugin called ScriptCS. There are two write ups on it [here](http://www.hanselman.com/blog/ProjectlessScriptedCWithScriptCSAndRoslyn.aspx) and [here](http://codebetter.com/glennblock/2013/02/28/scriptcs-living-on-the-edge-in-c-without-a-project-on-the-wings-of-roslyn-and-nuget/). If you're willing to truly go to the darkside, then I'd encourage you to look at vim. Just understand that using something else other than VS is going to leave you with a number of "gaps" to fill, and its up to you how you fill them or whether they need filling at all. Builds will probably be one of the first things you need to sort out, and I'm not sure if you'll get much support in the way of debugging.
I guess I let my IDE do the digging (mouse over var).
can't agree more. TFS is awesome and very well integrated into VS -- git not so much (pre 2013). 
Free branching and local commits. When I use git, I can create a branch locally and commit to it without ever having to push it out. This lets me stash some changes that are works in progress (with the history to tell me what I am doing and why when I come back!) in order to work on some high priority item. TFVC is nice, especially the integration with VS, but git makes me happier and more productive.
It is pseudocode
Most larger shops end up being certified partners and get access to TFS without having to pay for it (directly). Hell, even our 5 man team has this.
We get TFS for free, given that we are an MSDN shop and such. I know that that is not the case for everyone. But, if TFS would cost you money, then one cannot argue with free.
Thank you for the reply! This was the kind of info I was looking for. TFS has something comparable with shelf-sets and the like. I can shelve code with comments without committing it. Other developers can pull my shelf sets which makes it easy to collaborate on a project long before it is ready for the QA bug cycle.
I have no doubts that Micro$oft will continue to provide better Git integration in the future. And, in the mean time, I agree. TFS is pretty damn cool. 
If you code by passing shelvesets around, don't you lose the ability to tell who authored what lines of code? Since you're not checking in with a shelveset, if you accidentally mess up you'll have to go find the original shelveset and check it out again (or revert back to it). With git's branches, it's *cheap* to have someone check out someone else's branch, write some code, and check in their changes in a way that maintains the *history* of modifications, just like normal development.
JetBrains PHPStorm. I can't speak for working on teams as all my projects using it were solo (Wordpress, OpenCart), but I have no complaints. It has solid git integration (I prefer its implementation to VS) and overall I like the editor. They have a 30 day trial (and it's now free if you happen to be a student).
I'm referring specifically to "collaboration via shelveset" that you mentioned in your post. If you're just passing modified shelvesets around until you're ready to check in code, there will be no easy way to track the history of development.
You mean if an interface only had "outputs" for its members, it would automatically be covariant, and if it only had "inputs" for its members, it would automatically be contravariant without the developer explicitly marking it as such? (that is, omit the `in` or `out` keyword)
To add to this, depending on how the log file works you may be able to also keep track of the last read position and use that to know where to start instead of having to parse an entire file. I had to do that on an application where I was monitoring a log that was just appended to by a third party program and got rather large. I could not just grab all data in it and clean it out as the other program locked it at all times, but I could do a FileStream.Seek on it to start right where I last left off. Saved me a ton of processing time. 
The good news about it is once it's logged in it's permanent until you change domains. I did this recently with the youtube API and it just keeps uploading to the same account.
I like the Java approach of use-site variance. Shame about the erasure of course.
Yeah, but in my case, I would need every visitor to logon as me to get access to my photos :) But I've changed the plan. I'm logging in now. But now I can't get a list of picasa albums :( I get a http 403 forbidden
`varchar` is a Sql Server type, not a .net type. The simplest way to convert a `DateTime` to a string is using `.ToString()`. DateTime.Now.ToString()
You don't. The underlying type of DateTime is an integer, so forcing it to string would be funky. You're probably looking for the overload of Object.ToString, which turns the data into a readable date. http://msdn.microsoft.com/en-us/library/system.datetime(v=vs.110).aspx
Then you need to pass it char/nchar data type in the parameter. 
The function is simple, and is below with the msdn link. More to the point, why are you storing a datetime in a string field. http://msdn.microsoft.com/en-us/library/ms187928.aspx CAST([NAME of COL] as nvarchar) eg: SELECT CAST(getdate() as nvarchar) You can also do a try cast if you are unsure of the type. SELECT TRY_CAST(getdate() as nvarchar)
&gt;Error converting data type nvarchar to numeric You're sending a varchar data type instead of a numerical type. Smaller edge case, the proc or statements you're executing have the data type mismatch within, or your table has a row with a value that can't be coerced.
Other way 'round.
Depending on the length of the nchar field, you could grab your DateTime var's Ticks property and ToString() it. It depends what you're trying to store and why. SQL Server has date field types if you want direct conversion. If you want human readable, DateTime has ToString() with different formatting possible. If you can't change the database schema and you want exact storage, Ticks.ToString() is how I'd do it, depending on the size of the nchar field. Otherwise DateTime.ToString in some unambigous format. 
It is very similar, but not the same because shelfsets don't create version history within the shelfset. It creates a snapshot of the local copy of the branch at a given time. With git, I can **commit** locally. It looks just like commit history on the server, but I have it locally. That means I can revert to a previous version of my changes instead of reverting to what is in the server. When I am working in git, I am committing every 15 minutes or so. I am just committing locally. And the branch thing is incredibly powerful. I can checkout the same file and edit it in two different local branches to work on two things in parallel, and all it costs me to switch between the two, or create a third branch is a single command. In git repositories, good practice is to have a branch per commit. That would kill your TFS server. I generally have more in order to experiment with things. Note that none of this is to say that TFS is bad. It's just different.
You're all over the map with this - datetime, string, and an err msg that refers to numberic . Post the relevant code.
As an addendum, you can do custom formatting with this as well, which I found helpful at times. [http://msdn.microsoft.com/en-us/library/8kb3ddd4%28v=vs.110%29.aspx](http://msdn.microsoft.com/en-us/library/8kb3ddd4%28v=vs.110%29.aspx)
SQL queries expect datetime fields to be formatted as strings. You should be able to put your myDateVariable.ToString() into the query, just make sure that you wrap it with single quotes. INSERT INTO Table (dateField) VALUES ('2/1/2015 2:00 pm') Though a better practice than this is to use parameterized SQL. It handles the formatting for you, and can help prevent SQL injection attacks.
Let me remind you that I'm on my phone so my examples will all be in plaintext. You could use all if statements or use a switch statement. For the input from the user, you should do (if you want to use if statements) If(userNumber == "1") { .... } else if(userNumber == "2") { ..... } else if(userNumber == "3") { .... } Or you could use a switch: switch(userNumber) { case "1": //user picked rock break; case "2": //picked paper break; } For the logic, just use a simple if statement. if(userNumber == "1" &amp;&amp; number == "2") { //computer wins with paper over rock } Let me know if you need anything else. 
DateTime also has a few custom "ToString" methods, including .ToLongDateString(), .ToLongTimeString(), ToShortDateString(), and .ToShortTimeString(). And if any of those don't fit the format you want, /u/jermany755 has the link to all the other ways to format DateTime.
What I saw: * Use switch-case instead of many if * Your random is wrong, it is 0 OR 1 BUT NOT 2. * Use while() to play more than one game. * You have some redundant imports and your bool is not needed. You can simply check if the user OR comp got 2 points in the argument section of your while-construct * enums for the Choice **Look at it here:** https://gist.github.com/anonymous/afcf56fc9c6fb2191c13 Note: You have to do your assignment yourself, so I left out any further logic. You just have to check who won with some simple "if" in the "else" area of your draw-logic and add this to each counter. Instead of the while(true) use this number (counter) as the argument.
Try laying it out in a flowchart/logic map. Once it makes sense to you, use it as a "bible" of sorts for your code. Also, as others have said, a switch/case method can be helpful.
I don't know why you're being down voted. Datetime's base data is 3 integers (days, minutes and seconds [from epoch] I believe). You wouldn't cast a datetime, you would use the ToString() or the custom ToString() methods as mentioned above. Am I missing something down voters?
If there are 3 choices for the user and 3 possibilities for the computer, then there are 9 (3x3) potential outcomes for the game. You could write an if test for each of these situations, but your intuition is correct that you do not need to. Try seeing how the numbers you pick for rock, paper, scissors relate to each other and looking for a pattern or relationship between the numbers and how they relate to the winner of each match. For instance, maybe the larger number wins every time. You can easily prove that this is not true, but it should get you thinking about other patterns. Try drawing a diagram that shows all the possible results and each player's number instead of symbol. If you can find a general rule for determining the winner, you can really reduce the number of checks you need to make instead of 9 separate ifs. Good luck!
Spoilers hide "answers." Try to figure the answers out yourself before revealing so you can truly understand why they are the way they are. Consider this: 1 &gt; 0 2 &gt; 1 0 &gt; 2 1 &gt; 0 2 &gt; 1 0 &gt; 2 1 &gt; 0 2 &gt; 1 0 &gt; 2 See the pattern? The left side [Spoiler](/s "alternates 1, 2, 0, 1, 2, 0, ... and so on"). The right, [Spoiler](/s "0, 1, 2, 0, 1, 2"). They are [Spoiler](/s "the same sequence shifted one on the right side"). You could use a set of nested if statements or a switch statement with an if in each. Or, we could use some arithmetic to solve this problem. Because there are a finite number of inputs and the number of inputs is fairly small, this will be a fairly simple algorithm. Consider the [modulo operation](http://en.wikipedia.org/wiki/Modulo_operation) (a very useful operation!). There are 3 choices, so the obvious choice would be to mod by [Spoiler](/s "3"). Well, if [Spoiler](/s "-1 &gt; n &lt; 3") then [Spoiler](/s "n % 3") yields [Spoiler](/s "n in all cases"). Consider [Spoiler](/s "adding 1 to the player choice"). Let's say player chooses Rock, or 0 (which, by the way, your prompt says 1, 2, 3 when the choices really are 0, 1, 2). [Spoiler](/s "(0 + 1) % 3 = 1, which is Paper.") [Spoiler](/s "(1 + 1) % 3 = 2, which is Scissors.") [Spoiler](/s "(2 + 1) % 3 = 0, which is Rock.") As you can see, the algorithm [Spoiler](/s "(n + 1) % 3") yields [Spoiler](/s "the winning number"). From there, you compare it to the randomly generated computer number. [Spoiler](/s "If (n + 1) % 3 == number") { computer win } else { player win }. This doesn't check for draws, but you already do that. The next challenge would be to condense your already written code. You can write it in as few as like 40 lines with this solution implemented. The condensed solution includes [Spoiler](/s "an array or an enum") [Spoiler](/s "that has [0] = "Rock", [1] = "Paper", and [2] = "Scissors"").
Thank you... your last sentence is *very* important. I wish more people would utilize parametrization for security reasons.
We use HG. I prefer it, personally, to Git, which I have to use to contribute to OS on GitHub. I just find it's easier to use and get people up to speed on, and keeps people from keeping a bunch of uncommitted code locally, which Git seems to see as a feature.
Search for the Singleton pattern. You want a public static class that is instantiated once that will be accessible everywhere in your solution, you could also create a class in your main form, with a property containing the current selected site. When you create a new form, you can pass this property in the constructor, or if you created a static class you can just reference it. If you are binding you can reference the property with a new property in your form. When you do this, all your forms will reference the same object. Any changes to this property will propagate to all the forms referencing it. Other things you might search for is MVVM and Inversion of Control.
Thank you so much, this is very helpful!
Good luck! I forgot to mention the Repository Pattern and Unit of Control. These are patterns used for data access when using Entity Framework.
You're asking for all sorts of problems formatting the string as you have. Is it the US format (1st Feb) or the format used by the rest of the world (2nd Jan). The preferred format when you must use a string is ISO 8601, as that avoids any ambiguity. However, +1 for suggesting parameterised is the way to go, as that removes any formatting issues, and is a much better solution.
Getting hit testing to work with 3D models was a small nightmare. I wish I had found out about ModelUIElement3D sooner. 
You don't state whether the game is supposed to be rigged or not, so I'll assume not. There are actually only three test conditions that can result in a "win" for either side. With that in mind, a simple switch statement is probably the easiest to code, or even something like : bool winOutcomeTestA = (usernumber == 0) &amp;&amp; (number ==1); ...etc... bool userWins == winOutcomeTestA || winOutcomeTestB || winOutcomeTestC; There are more elegant ways of handling things, but as there are a VERY limited number of "win" conditions it's probably faster to write a simple catch for each possibility and then test if any of them passed. Incidentally, this would have been a perfect time to have used an enum
That was my favorite method for doing college assignments, I would make a flow chart then write that up into pseudo code then write the actual code. It was also a great help for learning what segments to create separate functions for.
God MVC makes me miss WPF and winforms.
ASP.net identity 2.0 sample projects are a decent springboard. http://www.asp.net/identity
What you mean with advancing into Java, C++? C# is good for 95% of the stuff. And yeah that is normal. Not only for programming. You will know that stuff soon, just keep doing projects and read, read, read, .... 
Don't worry about trying to be super capable in the very near future. Just work on some interesting projects, talk to other C# devs, find some good C# blogs, and you'll learn a lot.
 I know Java and C# share 90% of their syntax, but C++ just seems like the current industry standard to stay. Of course that's a little bit down the line. I feel like a working knowledge of it just opens opportunities and makes you marketable.
I wish it was. But the in reality it isn't anymore.. for quite some time. Dat Web and JS got 2 big 2 fast (or too slow for some guys^^). **Even if i hate Java and refuse to use it in my projects:** Java, JS, C++, C#, HTML5/CSS3, PHP, Python, Ruby and one iOS language because Xamarin costs a lot^^ 
Do yourself a favour and skip Java. It's become an unsightly mess in the last couple of versions. Just write stuff for the fun of it, even if there are already 500 million bitmap editors and download managers out there. I started my current job with almost no knowledge of WPF, and now I can sometimes help others out with their WPF problems. It will all come with time and practice.
You know, "tool" mentality kills productivity. Rather do things, set a goal and achieve it with what you know. Only when you can't seem to get a thing done, research how it's done. When one of your projects is done, read some about how they're usually done and you will easily learn how that (maybe feature, maybe technique) is applied; just because you already did it in a potentially more difficult way. My main point is that don't fret over knowing everything, just do it. Most of the popular game code is absolute clusterfuck; commercial software even more so. Getting things done, doing things, is much more important than knowing things.
First, don't worry too much about 'what you want to do with your life.' It may change during college, which is fine. But, if you want to learn programming now, that's awesome. My best advice is to learn how to learn. The first step with that is to not be afraid to make mistakes, and to not worry about writing some crappy code along the way. We've all done it, and so will you. Even after 15 years, I still write some bad code when I'm learning something new. The next advice I would give would be to try to create a personal project that you can use as a learning test bed. It would also be best if this some how ties into another interest of yours so that you have further interest in working on it. For example, you might be into Pokemon cards (or whatever, I don't know). You might create a website to organise your cards, or something. The trick is to keep pushing yourself to add features to it - can you do image uploads? Perhaps you could resize the images into a standard size so that they look good when they are displayed. Or maybe you want different ways to sort - by name, or rank (or whatever they have). Actually, I just found this list, which should help get you started: http://adriann.github.io/programming_problems.html Just work on those and ask questions when you get stuck. The main thing is to learn how to deal with feeling helpless and overwhelmed. Once you get to that point, push past and figure out how to solve the problem, it becomes easier the next time you have to do it.
We had a ms tech evangelist on campus a few months ago, and basically the answer to this question is 'no'. They dont support development in a VM and they require you to use 8.* natively to install the VS Tools that are required to build apps, because that way the emulation for testing purposes is easier for them internally. I'm pretty sad about this, because compared to stuff like the ADT from google, the tools microsoft provides for app development are pretty rad and feel a lot less clunky. But with these constraints i won't bother to try anymore i guess.
Aw, a sad fact. I hate it, why do people even bother to dev on windows phone if they don't support things like these. It's market is relatively smaller compared to iOS and Android. Do you have idea if they allow development in a linux operating system?
Not that i know of. The only IDE for C# under linux that I know is Mono Develop and it's shaky for anything else than CLI development, at least compared to the entirity of VS. What I did was use a VM with Visual Studio installed, but for Mobile it's just not an option right now I guess, as they dont really allow virtualization in a virtualized machine. But maybe there are workarounds for that. Edit: But there might be possibilities to develop Windows Phone Apps in Javascript. That should also be possible under Linux, but I'm not certain if there is any toolkit or IDE that would help you in that regard.
There is no way to develop for Windows Phone 8 or Windows Store without Windows 8 or higher. It's that simple. It may be possible to use Unity or similar SDK to output a Windows Phone app from Widows 7,, but at some point you'd still need Visual Studio 2013 (which needs Windows 8+). You can develop for Windows Phone 7 on Windows 7 (and the resulting application will work on any version of Windows Phone). The easiest option is to simply upgrade your Windows 7 system to Windows 8.1. 8.1 is a better OS overall anyway. Another option is to dual boot rather than try to use a VM. The WP8 emulator is a VM, so I think it is unlikely that it would work inside a VM anyway (I don't know much about VMs, but running a VM inside a VM sounds like it would not be a good idea).
You're still in highschool, and you're already well ahead of the game! Just keep coding and learning, you'll get to where you want to go soon enough.
Learning one language with aspirations of moving on to another is in itself a rookie mistake, languages are just tools, pick them up as you need them. Your priority should lay with learning to program effectively and not how to use the deepest most obscure facets of the language up front. Once you can think like a computer the rest will come on its own.
C# is a great language. It's easy to find work developing enterprise software or old brick and mortar institutions that have in house development. Moving to Java is a simple transition, really the hard part of the transition is relearning tooling and libraries (which shouldn't be underestimated, this takes a lot of time). I've personally gone through the .NET to JVM transition and my own experience is there are a lot more interesting career options to knowing Java (or Clojure, Scala) than there were for me in .NET.
WPF is another microsoft framework dead end. Knowing Java, the JVM is invaluable. A developer is not doing themselves a favour by avoiding it.
Just a minor correction: VS2013 runs fine (and is supported on) Win7. The rest of your post is great!
The internet is a tremendous resource for learning. It's something that didn't exist when I started (Apple ][+, 48k RAM). Right now, focus on the "what", and let the internet tell you "how" You wont do it the "right way" but that doesn't matter yet. Just get it working. Working beats correct, at least for now. Pick a project to start. I usually go with a music library. You have a limited number of entities to worry about (song, artist, title) and a limited number of relations between them (artist has songs, title has songs), so you're not overwhelmed. Don't add a database at first - just hard-code some arrays. 
I just took a quick look at it. Coarse grained locks in DefaultQueue, and blocking calls. That means contention and context switches, which means it's hopeless for anything high performance. Avoid. 
What is your definition of 'good performance'? What happens when you use this lib to process, say, 100k operations/sec through a single work queue with any number of fibers consuming the queue and processing the work? I'm pretty sure it'd grind to a halt as the CPU spends all its time swapping threads when they hit that big fat Enqueue lock. 
The more I learn about computer science and programming the less I feel like I actually do know. Stick with C# for more than 2 years to learn about the actual science and theory behind programming. C# will be your tool to making those things come to life. That will carry on between any language you decide to use. You are luckily at an early age to start though. Just keep practicing, ignore the other languages (and the wars that start between their fanboys), and build stuff you want to build. Practice really does help. Get some books and if you can afford college, go. You will learn some really great stuff there even if you only take a few classes with no degree.
The WP SDK requires some things that are only available in Windows 8+. It's not that they don't want to, it's that it doesn't work in other versions. Same can be said about Apple not allowing you to develop iOS apps without Mac OSX(which is even worse because technically, I have to buy a new PC for that), but no one complains about that.
Senior in college working on a CS degree. Last year at this time I didn't know the basics/foundations of programming, let alone the differences between certain languages (or even a single language, for that matter). Now I've got a general grasp of how Java/C# work and can generally figure out what a bit of code in either language does given a bit of time to look at it. I'm nowhere near mastering either language, but I know vastly more now than I thought I would have a year ago. My advice? Don't worry about it. If you get to college and you stick with CS, good on ya. You'll learn everything you need to there. But don't feel overwhelmed when you try to learn from the ground up on your own. There's a reason there are Intro to Programming courses taught - as you've found out on your own, there's quite a bit to programming languages. You'll learn it all one day (or at least as much as you want), don't sweat it.
Start small. I mean very small. A button that has some function. Then add a textbox and manipulate some data, etc. etc. &gt; google each step that gives you trouble Why not?:P For me it was usually the most efficient way to do it. +1-2 hours reading new things /per day. &gt; google each step that you've wrote and always see yourself as a bad coder, always improve. That was the next step :/
C++ has a very specific place for high performance applications but almost every software company I've been with has used C# because performance is usually never that important especially with cheap hardware costs. I'd still say it's at least worthwhile to learn C++ to further your understanding as you move down in abstraction layers getting closer to the hardware. Java though? Honestly unless you have a good reason (ie - a specific job offering), stick with C#. IMO C# is much better and can do anything Java can do and seems to be much better for finding work due to the amount of compilers for C# and the awesome Microsoft support. I'd master C# first and move into C++ and maybe a bit of Java for fun. It's good to master a language though and you should keep at it with C#.
Make sure to get win 8 pro to use the emulator... The fuckers at Acer put the normal win 8 on my 1k € laptop &gt;.&lt;
And actually, I just made a second module whose purpose was to calculate the discount total and bring it back up. Now it looks like this... using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace Ch._4_Project { class Program { static void Main(string[] args) {//Declaring variables int units; double retailCost; double totalCost; double discountTotal; double discount_T1; double discount_T2; double discount_T3; double discount_T4; //initializing variables retailCost = 99; discount_T1 = .8; discount_T2 = .7; discount_T3 = .6; discount_T4 = .5; //creating modules to run tasks units = getUnits(); discountTotal = getDiscount(units, retailCost, discount_T1, discount_T2, discount_T3, discount_T4); totalCost = getTotalCost(units, discountTotal, retailCost, discount_T1, discount_T2, discount_T3, discount_T4); if (units &lt;= 9) { Console.WriteLine("You have completed your purchase!\nThe total for this transaction is {0:C}.", totalCost); } if (units &lt;=19 &amp;&amp; units &gt;=10) { Console.WriteLine("Congratulations, you were eligible for a 20% discount!\nYour total comes to: {0:C}.\nYour total savings was {1:C}.", totalCost, discountTotal); } if (units &lt;= 49 &amp;&amp; units &gt;= 20) { Console.WriteLine("Congratulations, you were eligible for a 30% discount!\nYour total comes to: {0:C}.\nYour total savings was {1:C}.", totalCost, discountTotal); } if (units &lt;= 99 &amp;&amp; units &gt;= 50) { Console.WriteLine("Congratulations, you were eligible for a 40% discount!\nYour total comes to: {0:C}.\nYour total savings was {1:C}.", totalCost, discountTotal); } if (units &gt;= 100) { Console.WriteLine("You were eligible for our best discount of 50%!\nYour total purchase comes to: {0:C}.\nYour total savings was {1:C}.", totalCost, discountTotal); } }//end Main //next we're going to get the number of units the customer would like to purchase. static int getUnits() { int valueEntered; Console.WriteLine("Please enter the number of copies of our life-changing and super-inexpensive\nsoftware you would like to purchase:"); while (!int.TryParse(Console.ReadLine(), out valueEntered)) ; return valueEntered; } //We're going to have our number of copies wanted by the user now. //Following their entry, we now need to see if they're eligible for a discount. static double getTotalCost(int units, double discountTotal, double retailCost, double discount_T1, double discount_T2, double discount_T3, double discount_T4) { double cost; cost = 0; if (units &lt;= 9)//Here is where we calculate the cost when the units are less than 10, so there is no discount applied. { cost = units * retailCost; } if (units &lt;=19 &amp;&amp; units &gt;= 10)//Calculate first tier discount @ 20% for unit quantity 10-19 { cost = (units * retailCost) * discount_T1; } if (units &lt;= 49 &amp;&amp; units &gt;= 20)//Calculate first tier discount @ 30% for unit quantity 20-49 { cost = (units * retailCost) * discount_T2; } if (units &lt;= 99 &amp;&amp; units &gt;= 50)//Calculate first tier discount @ 40% for unit quantity 50-99 { cost = (units * retailCost) * discount_T3; } if (units &gt;= 100)//Calculate first tier discount @ 50% for unit quantity higher than 100 { cost = (units * retailCost) * discount_T4; } return cost;//return the cost dependent on which tier the user was qualified for. } static double getDiscount(int units, double retailCost, double discount_T1, double discount_T2, double discount_T3, double discount_T4) { double discount; discount = 0; if (units &lt;= 19 &amp;&amp; units &gt;= 10)//Calculate first tier discount @ 20% for unit quantity 10-19 { discount = (units * retailCost) * .2; } if (units &lt;= 49 &amp;&amp; units &gt;= 20)//Calculate first tier discount @ 30% for unit quantity 20-49 { discount = (units * retailCost) * .3; } if (units &lt;= 99 &amp;&amp; units &gt;= 50)//Calculate first tier discount @ 40% for unit quantity 50-99 { discount = (units * retailCost) * .4; } if (units &gt;= 100)//Calculate first tier discount @ 50% for unit quantity higher than 100 { discount = (units * retailCost) * .5; } return discount;//return the cost dependent on which tier the user was qualified for. } } } 
For one, I would declare and initialize the variables in one line.
I don't know what jobs are in your area, or what you're looking to do, but I'm working on my degree while being employed and I use C#, not Java or C++. I wouldn't considering it an advancement to move to either of those languages, but that's a personal opinion. Additionally, pick something you want to do and do it. Don't worry about proper programming technique, just create! Your first projects are going to suck but that's okay, you're learning the concepts!
Is it then: double retailCost = 99; ? And follow suit for the rest?
Those things you're calling "module" are functions or methods, btw. Edit: Module, not model xD
Not trying to be a dick, but have you checked the official documentation at xamarin.com? The getting started stuff takes you through creating a very simple multi-activity android app. http://developer.xamarin.com/guides/android/getting_started/ It's not a video, but it has dozens of pictures of every step and you can download the project code. I think it's as easy to follow as anything you're likely to find.
THIS is exactly what I was looking for. I had just typed else (units &lt;=49) and was getting errors. I'll try entering it like you've done here to see how that works. As for the casing - the teacher said he wanted us using camel casing. I'll ask him about that and see if I can get away with doing it the way that article states, I'd rather learn everything the right way first! Thanks for the heads up!
I'm going to give you some slightly different advice than most of the people in this thread. Don't worry too much about the language. It's really not that important. If you learn to program correctly, you can switch syntax pretty quickly. C# is very popular for business applications as well as mobile and games. Like others have said on here, do code katas. Do as many as you can. Build your own projects then go back and redo your katas better than before. Figure out what you need as you go as trying to learn too much at once is daunting and can be discouraging. What is really important is learning how to program and then those concepts can be applied to other object oriented languages. When you look at that stuff and it seems so far beyond you, don't worry about it just keep learning and you will get there. Also understand it's a life long journey. Talk to most professional developers and they'll tell you that you never stop learning new techniques and tools. They'll tell you that looking back on your own code that is even a year old is tough because every year you get better. That's what makes it an interesting and rewarding career choice. There is no best language or best technique and even the really good techniques can be refined and made better. If you really want to super charge your learning subject yourself to peer review. Have someone with more experience critique your code, use a site like exercism.io and constantly iterate and improve based on constructive criticism. Get involved in open source projects. Do these things and your skills will improve quickly. Stick with it and you'll do great. Good luck. 
That's a really well written summary.
I love that warning, but I've foudn it necessary to add an extension method on task called RunConcurrently specifically to suppress it. 
I wouldn't bother asking about the casing. You might as well learn to be flexible about styling conventions - especially with a professor whose ego might get bruised.
The article author is correct and you are not. The async keyword causes the compiler to generate a state machine and convert all locals to fields on a generated struct. When an await is hit, a continuation is scheduled on the completion of the awaited operation if the operation did not complete synchronously. An async method will always start on the callers thread at least until the first await. If there are no awaits, then the entire method is completed on the callers thread.
Async != multi threaded. When issuing a request for file I/O, all that happens when you await is that the current thread of execution yields back to the caller, but will later be delegated a new work item when the task completes. Async/await is basically a form of cooperative multiprocessing. A Task CAN represent a process happening on another thread, but it doesn't have to be.
This is exactly it. Asynchronous simply means I've started the work but I need to wait for something so I'll return to the caller and let you know when I'm done. The traditional way was with callback and state objects and hideous spaghetti code. Async/await is simply a way to do this with easier to follow code. The letting you know when it's done is where there is potential to hop threads. The compiler warning about not awaiting is to let you know that you might have made a mistake as you aren't picking up the result, which also means having any exceptions thrown even if there is no return value.
While nothing you said is incorrect, it is true that if you forget the 'await' keyword you may effectively cause the task to run concurrently rather than asynchronously. Whether or not this will actually happen depends on the context of the calling method (i.e. in a GUI thread) and whether or not ConfigureAwait(false) was used.
He is talking about cases where you omit the `await` keyword in an `async` method.
That's such a buzzfeed title. Nothing is actually debunked. Also, some concepts are overly simplified, like SynchronizationContext vs threads or nested tasks. Other than that... pretty good.
Very true. It's funny how the async-await examples always heavily focus on GUI event handlers while it's such a small fraction of most .Net code.
When you say that it works correctly when not in a loop, do you literally mean that you can comment out the `while(isGameRunning) {` line and the matching close-brace? Basic troubleshooting would be to step through the code and make sure that the flow is proceeding as you expect. As a trivial example, is `isGameRunning` initialized to `true` anywhere? It may also help to print to the debug log along the way.
Yes. I remove the while loop with brackets and leave the rest so it only runs once, and the WriteAt function writes out the text where I want it. add the loop back in and the text flashes for one frame perhaps, and disappears again.
Thanks! &gt; That's such a buzzfeed title. Nothing is actually debunked. [I seem to have a thing for those](https://www.reddit.com/r/programming/comments/2gux1j/12_java_snippets_you_wont_believe_actually_compile/) - just trying to make the topic more interesting :-)
&gt; I've started with C# with high hopes of advancing to Java and C++ in a couple years. More like degrading. About the only advantages I see with the two latter languages (and that may be a big one) is their wider platform support. C# is generally much better, though.
Varchar? This is a C# subreddit, not SQL. Also, include a bit more description next time, seriously.
It's good. Of course a few things are slightly simplified, because the internal details can get very hairy, frustrating and even disheartening (due to a lot of stuff Microsoft regrets).
&gt; The async keyword causes the compiler to generate a state machine and convert all locals to fields on a generated struct. ...unless there is no await keyword in which case the compiler does nothing except issue a warning.
What does MS regret in this case?
&gt; Lastly, there can/should be a function onDealDamage OnDealDamage
&gt; C# events implement the observer pattern, and are essentially just a shorthand for multicast delegates. C# events (really .NET events) are pretty close to properties: A way to bundle up two methods with a nice syntax. For properties, those methods are get and set, for events they are add and remove. Add and remove are normally, contrary to properties, implemented for you (and use multicast delegates as mentioned), and the syntax to call them is then += and -=. You can, however, implement them manually, although this is rarely needed.
It's not a public function.
does the loop exit? Edit: If it does thry adding a pause where you want your info to be read. Thread.sleep() or console.read() work console.read pauses until user input and thread.sleep pause for an amount of time. The reason you need this is the while loop goes at insane speeds you would never be able to see what its doing with pausing the program. *I would use readline but what ever works for you
You're calling "getPlayerAgeGroup" before ever calling "setPlayerAgeGroup". This results in a NullReferenceException. Try setting the player age group before entering the loop.
First the code you uploaded to github is not setting the players age group before entering the loop, so it's erroring on a null exception. Easy enough to fix. The reason it appears to be "blinking" is that you have nothing to stop the loop, so it just loops until it hits the end condition, but each time it loops it writes things out again. You have the input commented out, which woud stop the loop. When we you have it in the application you get the appearance that it is blank and did not output what you asked. This is not really the case. Look at the window, it has a scrollbar... The text is there, but it is out of view of the current console window, so scroll up. I haven't ever really done anything with the console like this, so I can't say why it would focus down further than you expected, but you may just try doing a step through to see when the focus goes down and research that bit. 
yes the loop exits when the age gets to 110
My WriteAt function makes it write at the top of the window, and there is no scrolling up in the window... so I can't see that it does that. It should be writing at the same place. unless there is something wrong in that function. (also added a setPlayerAgeGroup before running the loop now, it didn't cause an error or warning in the log though)
Oh I agree it should be writing to the same place, but I suspect something with writing over and over again is making the window bigger than you expect. So you are writing at line 1, but line 1 is off screen. With just a Console.Read() at the end of the loop, the text stayed in the correct location for at least 15 loop cycles. I didn't keep debugging after that. My point being, I don't think it's the loop. Also, if I only use Console.Read and not your input function, which does the clear and such, it stayed the whole time. So, it does seem to be something with how you are writing that is making things go bigger than you expect.
alright.. cool. I'll need to rewrite how I put the text up then. Thank you. :)
Sorry I made that mistake when I typed that. I'll post more of a description when I have time.
hmm... in my full program here I do a: static int windowWidth = 160; static int windowHeigth = 50; Console.SetWindowSize(Program.windowWidth, Program.windowHeigth); so for me it should be in range, or?...
But that's setting the width, and you are writing at height. So you are writing at line 157 not column 157, so it is off screen. 
damn... /insert blushing and feeling stupid here/ :P ah well.. live and learn lol
try &gt; while(true){} If it still exit, then you have your "bug" :)
Yep.
The writer forgot (and broke) a very important rule: - You should never use async in a void method, except for event handlers. Async methods should always return Task or Task&lt;T&gt;.
I might be misunderstanding, but why can't you just use a table? 
I upvoted your reply. Thanks for your attention. Our team wants to create something that looks like this: http://bit.ly/1uW1j0B In the grid we would have two colors, something like purple showing occupied and clear would be vacant. 
Instead of having the timer1 as a control you could use this : System.Windows.Forms.Timer timer1 = new System.Windows.Forms.Timer(); timer1.Interval = 5000; timer1.Tick += (sender, e) =&gt; timer1.Stop(); and then have Test() called from a button click, doing timer1.Start(); That would do it, but the big question (as /u/EscapeLizard put it) *why* are you doing this?
Task.Run schedules the supplied function to run on a thread in the ThreadPool. Not awaiting does not do this at all - all that happens if you don't await a Task after its creation is that the statements following will execute before the Task completes and not after. Moreover, if you were to loop indefinitely on a thread following the creation of a Task without awaiting it, it would likely never be completed because the current Thread would never become available to complete it. If you schedule the same operation with Task.Run, however, the resulting Task would likely complete because it is scheduled on another thread of execution. If you want an asynchronous function to be able to resume execution on a different Thread you HAVE to call .ConfigureAwait(false) on the task you're awaiting. Otherwise the Task will be required to resume on the creating Thread. Going back to your original incorrect statement: &gt; I think his statement that making a method async doesn't cause it to run in a different thread is technically untrue. I believe that if you call an async method without using await This is just completely wrong. It does not matter what you believe, not-awaiting does not cause the Task to be resumed on a different Thread. It will not be resumed at all if the current Thread is busy. This is why if you try to call .Wait() on a Task created by an async method in almost all synchronization contexts, your code will deadlock - because the Thread is blocking waiting for the Task to complete, but the Task can't complete without the Thread becoming unblocked.
SVG is modern. The alternative is Canvas. Canvas will require much more Javascript out of you, while SVG is just a XML syntax. You can look at wrappers like D3 as well. 
While definitely a mistake, I wouldn't call it a pitfall. The worst thing that can happen is you try to await the result and can't because of a compiler error.
I'm probably also misunderstanding the task, but a grid of boxes on the screen can be done easily using CSS. This gives you the ability to move/size/color the boxes based on your criteria.
- When having a variable `MyStruct myStruct;`, will the instance be on the stack or heap? - Can you have partial methods? - Can you `new` interfaces, e.g. `new IMyInterface()`? - Do arrays start at index 0? - Can you modify `readonly` fields outside of the constructor? Admittedly they're not strictly related to C#, but still good questions. Try to answer them yourself. Then I'll edit my post and give you the answers.
I found my brief use with canvas super painful. I probably need something that has a minimalist learning curve for rapid demo/deployment purposes. Would you recommend I try something like CSS just to have a grid like rfinger1337 suggested and then move on to something like D3 and/or SVG in a future iteration? 
This might be a good place to start for rapid demo/deployment? I didn't mention it, but we have a MS SQL 12 database. So I would like to develop a rapid prototype. Do you know of any good tutorials online where someone has done something similar. I am fine with inventing the wheel if I have to, but hate to reinvent the wheel. 
That would block the UI thread for 5 seconds though, so it's not really a good solution.
Canvas is based off of the ObjectiveC drawing library. I actually thought it was similar to GDI and GDI.Net, but you have to be prepared to go all in with Javascript to accomplish that. But, I really like D3 as well.
You are in a web page, which means you are not directly connecting to the database in the first place, so where your data comes from is irrelevant. You are either going to embed all of your data into a JSON dataset, which can be requested from the page, or you are going to embed the full SVG into the page and send that to the browser. But, it really sounds like you are getting confused by the fundamentals here. You have to remember, web development is HARD. If you thought webforms was complicated, this is a full step more complicated. You need to really learn JavaScript, which is completely unlike C# or any other C language. Really, it honestly is not a C language at all. Plus dive into CSS or you will be really lost. Also, find a good book on MVC. I suggest Pro Asp.net MVC 3 Framework. 
This is for you. Check the thread IDs. http://cl.ly/image/31162W1X2c3b Or you could read the MSDN documentation here: http://msdn.microsoft.com/en-us/library/hh873131.aspx "The current method calls an async method that returns a Task or a Task&lt;TResult&gt; and doesn’t apply the await operator to the result. **The call to the async method starts an asynchronous task.** However, because no await operator is applied, the program continues without waiting for the task to complete." I'm not sure what else I can do to explain to you that you're wrong. MSDN link with sample code that specifically describes that it spawns an asynchronous task, and provide you sample code, with a screen shot, in the debugger, showing you that the continuations of the async method will run in a different thread than the calling thread, and don't wait for the calling thread to enter an alertable sleep or any other thread message pump state. You're wrong. Try it yourself. Look at the material. 
 Check the thread IDs. http://cl.ly/image/31162W1X2c3b Or you could read the MSDN documentation here: http://msdn.microsoft.com/en-us/library/hh873131.aspx "The current method calls an async method that returns a Task or a Task&lt;TResult&gt; and doesn’t apply the await operator to the result. **The call to the async method starts an asynchronous task.** However, because no await operator is applied, the program continues without waiting for the task to complete."
Hey it happens to the best of us, glad I could help!
I guess we are talking about two different issues here: Simply calling an async method won't suddenly spawn a thread out of nowhere ([Image](http://i.imgur.com/rh5DDGC.png)): private void ButtonBase_OnClick(object sender, RoutedEventArgs e) { Debug.Print(Thread.CurrentThread.ManagedThreadId.ToString()); this.MyMethod(); Debug.Print(Thread.CurrentThread.ManagedThreadId.ToString()); } private async void MyMethod() { Debug.Print(Thread.CurrentThread.ManagedThreadId.ToString()); } What you are talking about is that a Task will be created. And if you don't await it, the calling method will still continue (but not really asynchronous as in "in a different Thread"): private void ButtonBase_OnClick(object sender, RoutedEventArgs e) { Debug.Print("A" + Thread.CurrentThread.ManagedThreadId.ToString()); this.MyMethod(); Debug.Print("D" + Thread.CurrentThread.ManagedThreadId.ToString()); } private async void MyMethod() { Debug.Print("B" + Thread.CurrentThread.ManagedThreadId.ToString()); await Task.Delay(1000); Debug.Print("C" + Thread.CurrentThread.ManagedThreadId.ToString()); } The thread is the same, but the output will be A, B, D, C [Image](http://i.imgur.com/DTfq6xr.png) )
[Same response here](https://www.reddit.com/r/csharp/comments/2hpuz8/will_it_block_debunking_asyncawait_pitfalls_for_a/ckvq9bn)
Gave you rep for keeping it real. Definitely looks like web development is not trivial. I have ordered a book on MVC. Do you have any book recommendations for JavaScript and CSS for a .NET minded developer? SVG or D3 resources as well? I know I can google these (and have), but I really prefer word of mouth on good resources. Thanks. 
You're running in the UI synchronization context. Thus the continuation of Task.Delay is bound to the UI thread. As I keep saying over and over again, this is not the behavior of the default synchronization context. Can you please retry your demo *not* in an OnClick event or other UI context? Try it from a thread pool thread, or from a new thread you create yourself. Or actually look at my screen shot where I show you the debugger break, where there are two separate threads.
A rapid demo is a red flag. What you end up with is a non-functioning website and a client who is super happy because its "almost done." Then, a month later the client will be very unhappy because there is "no progress." It's a lot better to give them story boards and color schemes so they can make decisions and get the ball rolling but still understand that nothing is built. 
Unfortunately, you have deleted your original comment, so I can only answer based on what I remember. If I remember correctly, you originally stated that simply calling an async method (even if it doesn't contain any await) will result in parallel execution. That is not the case. Your example is a bit different: Your async method does contain an await. Thus, it returns at the first await (meaning the original thread will resume to execute the calling method.). And that's exactly what I described at [Calling an async method without await](http://www.journeyofcode.com/will-block-debunking-asyncawait-pitfalls/#Calling_an_async_method_without_await) (only that in the case of the "default synchronisation context" as you call it, this will indeed cause both methods to run in parallel as the continuation of the called method can occur in a different thread. But only after the first await in the called method.). In my opinion, you should stay away from this construct as asyc / await it is not intended to be used that way. It only leads to confusion.
I would do this with css and/or tables. Get your data in the controller with entity framework. Turn the data into JSON and pass it to your view. Also if you are going to do more web development in the future I would look at things like AngularJS, bootstrap, and other jquery libraries. Generally my builds consist of MVC applications connected to databases with the entity framework. I JSON my data objects and pass them to my view. On my view AngularJS deals with the json objects and lets me manipulate the page. I use bootstrap for easy look and feel as well as easy objects like date drop down boxes and the other widgets it provides. https://angularjs.org/ http://getbootstrap.com/
You are specifying your control sizes as absolute values, and aren't taking into account that the border itself takes one pixel (or whatever value it has). Try setting their horizontal/vertical alignment to Stretch.
Your border has a constant width of 285, and a border of thickness 1, which leaves you with content width of 283. Inside, you have a button with a constant width of 285. It's being left-aligned by default and the overflowing 2 pixels are cut off.
Thanks! I didn't think of that!
If you need a responsive UI on a single thread app the simple method is to have a while loop with a DoEvents inside it. DateTime RestartTime = DateTime.Now.AddSeconds(5); while (DateTime.Now &lt; RestartTime) { Application.DoEvents(); } That is an ugly way to do it (and uses CPU while it loops) but it gets that part done. Something tells me there is more to this though. A better method would be to have test do whatever it needs to do before enabling the timer and then enable the time, then have the timer click event trigger the rest of the things that need to happen. 
[Unity hosts a bunch of tutorials](http://unity3d.com/learn/tutorials/modules) [This C# one is for people new to programming](http://csharp.net-tutorials.com/) [If you have never programmed before, this python tutorial will help you understand the basics (and python)](http://www.codecademy.com/) Once your more advanced in a specific language, the [MSDN](http://msdn.microsoft.com/en-us/) is really powerful. I can keep going if you would like. 
In the only async method (AwaitTest.TestMethod), I'm seeing an await on testFile.WriteAsync. As you are using QueueUserWorkItem to post ThreadPoolContextProc to the threadpool, you will be using the default ThreadPool SynchronizationContext (although that's what the default is in a Console app anyway). This means ThreadPoolContextProc will be run on a different thread than the Main method anyway. When an operation goes async, the continuation is posted to the current TaskScheduler (which if not overridden is the default TaskScheduler which uses the current SynchronizationContext). This means the continuation will be posted to the worker thread pool. If the prior thread hasn't unwound and ready for new work, the ThreadPool will start a new thread for the continuation, otherwise it will use the available preexisting thread. But I fail to see how your code or your posting of some msdn documentation contradicts anything said prior. An asynchronous method initially starts on the same thread as the caller. If an awaitable method call inside of the asynchronous method doesn't complete synchronously, then the continuation is posted to the TaskScheduler which may or may not end up being run on the same thread depending on how the continuation is scheduled.
You are mostly right. The continuation gets scheduled by the current TaskScheduler, which the default is to use the current SynchronizationContext. In a gui environment, there is a single threaded synchronization context so the continuation will need to run on the same thread as the caller. .ConfigureAwait(false) says to run the continuation on the thread pool. But that only affects where the current method is continuing. If the calling method is also async, then the continuation for that method will be posted back to the original synchronization context.
Why do that? All you need to do is remove the async keyword from the method and the point where you return a value, do: Task.FromResult(myresult); 
Right, and what I'm saying is that in pretty much any context other than the UI synchronization thread context, from your main thread in a console app, NT service, etc, or from any thread that you create independently, or from a QueueUserWorkItem, in all of these scenarios other than from the UI thread, the result is that the continuations run in a different thread from the thread pool. I agree, the method runs up to the point of the first await in the caller's thread, so it's not exactly as I described originally as a Task.Run(() =&gt; YourAsyncMethod()); But at the first await, the remainder of the function runs in a thread pool thread by default unless you're operating in a synchronization context that handles things differently like the UI context. My point is, as a rule unless the synchronization context is the UI context or something with similar behavior, an async function runs async in another thread after the first await. This is the default synchronization context behavior.
That doesn't remove the compiler warning for not awaiting an async operation.
Ah, yes, it's a good idea for internal users! Good luck!
I presume you have a method which completes synchronously but is expected to return a Task because of some outside requirement (e.g. implementing an interface or overriding an virtual/abstract method). The async keyword is not a part of the method signature, it's simply a directive to the compiler to generate the code a particular way. In my reply, I said to remove the async keyword. There's absolutely no need for it as you don't await anything so don't need the compiler to generate any special code on your behalf. Returning Task.FromResult(myresult) gives you a precompleted Task with the result set for you. This gives the added benefit that any exceptions don't need to be wrapped in a Task as exceptions don't care about what the intended return type was at all. The caller (whether awaiting or not) will simply be thrown the exception and will actually be faster to handle. Using the compiler generated code would require the exception be thrown and caught twice. First throw is your method code, first catch is the compiler generated code which stuffs the exception into the Task. Second throw would be when the calling code calls Task.GetAwaiter().GetResult() (that's what the compiler generates when you await method and it has completed) to return the exception to the awaiting calling code. Second catch then is the original catch.