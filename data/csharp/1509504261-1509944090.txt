It is true. Check the chart.
C# is amazing; It has been available on non-Windows platforms for a long time and .NET Core is only going to increase that. Sure .NET Core 1.1 was pretty light; but Core 2.0 just released not that long ago and is MUCH better. Lots of things are happening in the real world with C# and .NET. I and many others have built careers on it. Unity is cross platform. Xamarin started out totally independent from MS. Learn it or don't; but it is absolutely wrong to think it is not a great and powerful language with wide accessibility (that is only increasing).
Ditto; I've never heard that argument ever.
* C# is a great language. There is nothing wrong in learning it. * You need not host them in Azure. You can host in any Windows VM and now with .NET Core, you can host in linux too. * .NET Core is still barebones, yes. Lots of libraries are not available to use in .NET Core. However, this will only improve, and should not prevent you from learning C#.
What do you think of VS for Mac? I've used it a little bit and other than having all of my Windows VS and Resharper commands in muscle memory fscking me up; It is pretty not bad! I think I'd like it more if I was a bigger mac user honestly.
Hey just wanted to say thank you, after trying multiple solutions this was the one that got things working perfectly. I used .Copy() instead of .Move(), as some references/data was broken during the move for some reason. I'll post the important bits of my code in here later for people.
I tried the EPPlus approach a few times, but I couldn't get it to copy sheet references, ex: [Sheet1] cell 5 referencing data in [Sheet2] cell 1. It would copy literally everything else, but [Sheet1] cell 5 would wind up with #REF as it's value. This task uses a lot of references, I couldn't find a way around this. Almost perfect :(
Not just Java, VB was the same way. But yes, I agree that it was a mistake.
Thanks for the input, after some thought the Workbooks have many sheets that reference data in other sheets within the workbook, it would break those links upon deleting the others unfortunately 
Well said. I ended up going with a different approach that's more direct in it's design and much faster, they'll be happy with the performance increase as we're dealing with 6gb worth of Excel data.
Are you kidding? The list of VB inspired features is long. * value types vs reference types * events * properties * indexers * static classes (eventually) * by-ref parameters * optional parameters * optional static typing (C# does it better though) * for-each loops 
It seems that if you use a lambda and the code throws exception you wrap it in a method to turn it into checked exception. I'm not quite sure either.
I know it is true. I said that. It is still unexplainable. I don't know why destroying the consumer business is deemed good by investors.
I still can't get it to capture Debug.WriteLine calls in the test runner. But at least Console.WL works.
The only thing stopping us from going to core is the lack of support from shibboleth sp. Since kestrel runs out of process.
Yeah.. I heard that back in 2002 during the early days of .NET whoever said that needs to take that tired old argument back to slashdot.......
You're reassigning textline before you parse it.. A string can only ever hold one value. Move your first parse above the second ReadLine and you should be fine. 
You are overwriting `textline` with the new input. Either use a separate variable or move your `Parse` to immediately after you read the Console input.
I usually have better luck with Trace.WriteLine
Thanks so much!
Thanks a bunch!
No problem. :) 
I've been happily using Rider for my c# work for the past six months and have not looked back.
Because the mission has changed. Satya realized that the impact they directly have on consumer is considerably less compared to the indirect impact that they have via their enterprise users. Microsoft has become an empowering company. If you are an organization or individual entity that provides value, in any form, to the consumers, we are making tools, processes and intelligence to help you do it better. Agreed that it means making Microsoft a little leaner but it also makes us a little more focused.
Thanks, I'll try that.
.NET Core is a serious game changer. C# is way better designed than Java, but its lack of portability is what kept me from truly adopting it into my projects. Well, with .NET Core, all that has changed. I hope to never touch Java again. I will be using C# for my various projects, and it's great.
Seconded -- very few people make that argument because it is untenable. If anything the opposite is the case. C# came after Java and was an opportunity to fix Java's mistakes, and so it did. C#'s generics for instance are much better than Java's. C# is a better Java than Java. C# was designed by Anders Heljsberg, who created Turbo C and Delphi. I came to it from the Unix world, and I think C# is a pleasure to program in. The only issues I have with C# is lack of true cross-platform compatibility (Mono wasn't that great of an implementation, and .NET core is still maturing) and vendor lock-in. 
&gt; However no matter what the C# fanboys tell you, C# isn't nearly as usable in a cross-platform environment as it is in Windows. Its getting there but not quite. How do you figure? .NET Core 2.0 is freaking amazing, and it works in Linux and macOS natively.
Questions like this drive me nuts! You have used both python and Java, it is not as if looking at another language is going to take you steps backward or anything. It's a great language, but if you don't like it when you try it out, you are still only better off than you were before from learning and growing.
One note about Azure, you can get much cheaper ASP.NET hosting elsewhere. Azure is totally different from traditional web hosting, and it comes at a premium because it has features that will save you time/$ on administration. Whether it is worth it to you depends on what you want to do. **Dislike of C#** Certainly anyone who is able to accomplish everything they need or want in language X, is going to see no need for language Y. Here's some data based on the StackOverflow career site. C# is right there with Java and C++. They are the core application development languages in my opinion, and if you know one, you're probably going to put the other two as languages you aren't interested in using. Things like javascript are way down the list because anyone who wants to get a job in web development, isn't going to put on their resume that they don't like using javascript. https://stackoverflow.blog/2017/10/31/disliked-programming-languages/ **What's Missing in .NET Core** I'll use ".NET Core" as a broad reference to ASP.NET Core. Since you mentioned a web stack we'll assume web development. I wouldn't call it barebones, but .NET Core is stripped down for three reasons: - 1) On purpose for portability. A massive amount of stuff in .NET was specific to Windows, such as WPF, and thus has been removed in favor of portability. (However, you can access alot of Windows specific components of .NET through shims.) - 2) Missing legacy technology that has better replacements - 3) To-be-implemented. For your non-Windows team, #1 obviously is no concern. WebForms is an example of a legacy technology that AFAIK will not ever be in .NET Core. MVC and WebAPI serve its purpose much better. I have done multiple years of development in both WebForms and MVC, and I can say the majority of C# web developers would prefer not to deal with WebForms. Legacy technologies have better replacements, so are no loss. So we're really only concerned with #3 **Notable missing features of .NET Core** https://docs.microsoft.com/en-us/dotnet/standard/choosing-core-framework-server#when-to-choose-net-framework WCF: This was the major way to create and call SOAP based services in .NET. It was capable of alot more like RESTful services which were superceeded with WebAPI. These days I only see WCF used for SOAP. .NET Core has SOAP client capability. For creating .NET Core SOAP services, there are libraries to help with this, but I don't know what they are like in practice. SignalR: Scheduled for 2.1, so probably not far off. Beyond that I'd say alot of what is remaining is stuff that is no longer needed. Most of what I see devs complain about is missing are things that only existing C# developers would miss. For example, distributed 2 phase commits are not implemented because they require Microsoft's distributed transaction coordinator. That will be supported with a library. A web dev team doesn't really need System.Drawing. Here's current open port-to-core features. Most of this is of no use to me as a web developer, or is a Microsoft specific technology which I'd expect to be implemented as a library rather than in .NET Core. https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aport-to-core 
But VS Code isn't written on .NET Core. It's built with JavaScript and Electron.
This is bullshit. If you lose the consumer you lose the enterprise. Apple proved that if consumers kick you out the enterprise will kick you out too. Now of course you can keep the cloud and even Office but Windows is out.
Yep. If you had nginx in there on its own serving plain text responses, it'd probably be order of magnitude beyond the others as well. Of course it wasn't included because it is not a framework. But just saying, **I agree** it's not that unrealistic.
If you need your app to run cross-platform with AD connection, currently you [cannot](https://github.com/dotnet/corefx/issues/2089)
So lets make a distinction when talking about jobs. .NET Core is very specific, and you won't see alot of jobs listing it specifically. You want to look more generally at .NET web development, AKA ASP.NET jobs (but not WebForms). You will see these listed differently, depending on the knowledge of the HR/recruiter. - MVC ASP.NET Developer - C# MVC Developer - C# Web Developer - ASP.NET Developer - Various combos of the above since often HR/recruiters put the title together The last two I'd look at the description to clarify whether it is older WebForms or MVC/WebAPI. If I am going to build a .NET Core application, and I'm building a team of skilled full stack .NET web developers, I don't really care if they have experience with .NET Core specifically. If they know MVC/WebAPI, and have solid C#/ASP.NET skills, then 99% of what they know is transferable to .NET Core. The only time .NET Core comes up as a topic of conversation, is when a team or an architect is making the decisions of what .NET versions/platforms they want to target. So if we are talking employability, you just need to be concerned with C#/.NET web stack skills in general. If you look at the second graph here, you'll see C# is up there on daytime/business hours visits to stackoverflow: https://stackoverflow.blog/2017/04/19/programming-languages-used-late-night/ There's lots of other trends that will show you there's demand for C#. The hardest thing will be getting your foot in the door, because entry level is sometimes harder to come by.
Just want to support your opinions on Python and JS. 
There are things that are not framework and are included. The link provided here has filters enabled to show only frameworks.
Enterprise has always been Microsoft's primary target, and Apple, a company that survived almost exclusively on individual consumers, is hardly a valid candidate for comparison here. But you don't have to take my word for it, checkout Microsoft's reported earnings for the past few quarters, though declining in consumer business, they have reported an overall increase in revenue. Having said that, Microsoft is not doing away with its direct consumers. There has been an increase in investment in XBox, Surface and even game streaming (apart from the obvious Windows) platforms indicating a commitment to not only continue providing the existing products but also to roll out new stuff for direct consumers. 
&gt; MVC5 expert, but also an AngularJS You seem to know what you're talking about. I was surprised it seemed you implied this combo is the result of the move to cross platform, and that the MVC view engine is akin to AngularJS view engine? Even in a Windows based world, this combo is becoming alot more common. The view engine in MVC is a server side HTML rendering engine akin to Ruby or Liquid. It doesn't give you a client side view engine. It is certainly confusing as an MVC developer to be introduced to AngularJS for the first time, given the common terminology, but eventually you realize they are totally different things. For client side interactivity you still have to write javascript/ajax to accomplish. So on the client side you either end up with a bunch of jquery/ajax hitting MVC Actions that return partial HTML fragments, or you can use Angular to keep the javascript from getting disaorganized. One of these javascript approaches is necessary if you want highly interactive pages, regardless of the backend platform. https://stackoverflow.com/a/36320388/84206 **Otherwise I agree in every other regard.**
Hatred is a good way to make one technology look much worse without making another one better. 
Was a Java guy in college. Then PHP right out of college. Moved over to Javascript for a few years. And now do a mix of JS with .NET. Have to say that C# is my favorite language so far.
Apple is slowly but surely eating Microsoft's enterprise share (Google too). Of course it won't happen overnight but in 10 years Windows will be something that runs in a VM on a Mac for that one legacy app the business depends on and when it is gone... Surface will die and Xbox will die because there will be no apps for Surface (UWP being effectively killed by liquidating the phone) and the Xbox strategy is outright retarded. Who the hell decided that it was a good idea NOT to have exclusives?
Line 20 and 23. You're using the same variable.
There are frameworks using nginx as the FE server, but there's no standalone nginx without a framework. The fastest being ngx_mruby. They probably should have a static file option for the framework filters which would be a good reference for FE server standalone.
Would appreciate if you could share the source on which you are basing these findings. A simple web search and you will find nearly hundreds of enterprise services and products that Microsoft offers and is damn good at, which Apple would not even have heard of. So you will forgive me if I take your premonition of Apple eating into Microsoft's enterprise shares with A little bit of salt. Coming to XBox, it is still on the rise so I don't really see how it could die all of a sudden given that it is one of the primary gaming consoles. Surface might be a failure so I am with you on this one.
&gt; However, I was told my many people and many users on reddit that C# isn't that great of a language (compared to Java or other OOP) and it is strictly restricted within Microsoft's Windows ecosystem. I'm primarily a Linux guy and all, but I have to say that C# is a solid language. I strongly prefer it over Java, especially with the addition of LINQ, (which you should definitely use the functional syntax of). The one thing that I know it's still tied to Windows in .NET core is the GUI, but with me being almost exclusively a back-end guy, this never became a problem for me. YMMV. What isn't great, on the other hand, is Visual Studio, but there is a strong, cross-platform alternative available from Jetbrains. Source: I'm an IT consultant, and I recently did a combined four years of C# in two assignments.
If you're big on open source, they may have even made sense as little as 5 years ago.
I love named tuples so much. It, among a number of other features (such as all variables being non-nullable by default unless explicitly made nullable whether it be a value-type or reference-type, extension classes, and custom operators) drove me towards Swift when it first came out, despite the back-arseward syntax. It's such a simple thing, but it really does simplify things so much. I no longer have to choose between littering my code base with single-use classes or return classes that *roughly* represent the kinda of data I want to return. I can structure argument lists in the unfortunate moments where an argument list has to be long enough that structuring it would help.
"embracing of Linux system (recent Windows update implied this)" - what was this? Details?
IDK. Docker in Visual Studio 2017 is pretty hit or miss. Half the time it doesn't even know what IP my containers are running on.
More like what job websites do you look at. I find it entirely believable that someone could have the perception that there are way more Node jobs than C#. ...but quantity of public job postings is not an accurate representation of what long-lasting jobs are actually available. For instance, how many of those Node jobs are at a startup that will offer equity instead of pay, and fold in a year? 
That sinking feeling when you get a Java job and learn that they don't pay for decent dev tools... IntelliJ is pretty good (I prefer VS, but that may be due to familiarity), but not cheap, and a lot of places won't spring for it.
Well apple had 0 share in the enterprise now there are people with macs in the enterprise. If they moved from 0 to non-zero they are eating someone elses share. Xbox did not grow last quarter. But even if it did it is still trailing the growth of the console market. Soon people will realize there are 0 incentives to own an Xbox. No Kinect, all games available on the PC why would I buy an Xbox over PS? If I want to have access to all games I can do that with a PC and a PS but not with an Xbox and a PC. Also because of the ill-fated idea to block reselling of games and the inferior hardware Xbox is now behind PS which means that people play on the PS and their friends buy PS. This is of course a problem that can be solved with time but the Indian has no intention to invest in anything where MS does not immediately profit so he will kill it.
You can submit a test if you think it's missing. In any case I don't see what is so interesting about it. I doubt it will beat those other barebones HTTP libraries on the top
That's on the roadmap for C# 8 last I heard. 
Console.Readline () is actually a value returning function so it can be directly parsed into a variable, therefore making the ambiguous "textline" variable not needed. I know this is a tiny program and we all know what it's referring to, but as applications get larger, it's better practice to give input specific names right away, just to keep data where it's supposed to be. By doing that, this problem would not have existed. Just some advice from someone who has done the same thing a time or two or ten.
Your dividing a number by itself because you are assigning all your inputs one variable. Move Traveled = float.Parse(textline) to just after your first Console.ReadLine() so the flow should be Print "how many miles traveled" Get user input Assign input into Traveled variable Repeat with "gallons used" Then do your calculations. Alternatively you can cut some lines of code out by casting through the ReadLine method. Traveled = float.Parse(Console.ReadLine()); is the same as textline = Console.ReadLine(); traveled = float.Parse(textline); However, neither of these are checking for numeric input so if someone types in cat, it cause an exception. The better method is the TryParse method, which will attempt to parse to a float, and if it can will return true as well as the float, and if it can't cast it it will return false. So you can check for invalid input: float traveled; bool res = int.TryParse(Console.ReadLine(), out traveled); if (res == false) { Console.WriteLine("Invalid input") } The above will attempt to parse traveled into a float, if it fails (user entered a word for example) it return false. You can then use if to inform user of an invalid input. If the parse is successful, it will assign the float to traveled and return true. Sorry about the crap formatting, using the mobile app. 
.NET Core 2.0 and ASP.NET Core 2.0 are here *now*. They're already production ready on Linux, it's pretty great.
In my experience, C#/ASP.NET jobs are higher paid than Java, but I have no idea if that's industry wide.
&gt; Python is (in my opinion) the language of the future I have to disagree, the language is still fractured between 2 and 3, and it's completely unsuitable for any kind of large project. I've written Python and C# for the web extensively, and the overhead of Python's ducktyping and scripting roots makes it completely non-cost effective for any sort of serious web app. The overhead of hunting down Python specific bugs, even with all the IDE help you can get, is painful and costly. The language is almost dangerous. Python is growing because it's an easy beginners language, and it's good for scripting and scientific applications. The same goes for Javascript, who's popularity stems from its abundance in browsers, and not from any sort of technical or productivity standpoint. I very much doubt either will be a serious contender for mainline applications the future, especially with declarative programming languages starting to pull through with productivity gains. In the modern world, we increasingly need code that we can make guarantees about, and that is guaranteed to work. Python and JS don't fit that bill.
https://www.pcworld.com/article/3196367/windows/the-windows-10-fall-creators-updates-best-new-features.html#slide9
You can never learn too much. Unless the language is outdated and not being used anymore there is no reason not to learn it. C# is also growing as a language and I can see it being used more and more.
I'm just starting out but I love C#. Will take it any day over java. C# can be used in other platforms too but it's hard to implement outside Microsoft platforms (Windows environment/azure) though not impossible. That situation will only improve. If you want to target Windows desktop or even apps (with xamarin) then C# is a nice option.
&gt; Node.JS and Java have strikingly more availability than .NET, at least in my area Non-major tech areas tend to have more buzzier sounding languages like Node.JS. 
I strongly dislike Microsoft *and* I'm a C++ coder as well, and C# is my absolute favorite bytecode garbage-collected language. While the standard .NET library / api can be quite spotty in places, the C# language itself is incredibly well designed. Far better than Java.
The reddit/hackernews/slashdot crowds in my experience have a lot of people that for one reason or another don't like Microsoft. Usually referring to things that happened a quarter of a century or more ago. .NET and C# has been a solid since the release of .NET 2.0. A lot of the time you can take a library that is .NET 2.0 and run it on top of the latest framework with no problem whatsoever. It's been cross platform since the early days (Mono framework / Xamarin) tooling. I personally don't like .NET Core as I think it simply isn't mature enough. As for job possibilities, I have worked in 3 different countries knowing C# and ASP.NET skills and have earned a good living.
I don't see much benefit of C# over Java or C++. It's a high level, statically typed, compiled, imperative language with widespread usage, support, and tools. Like Java, it's backed by a large company--but that is mostly irrelevant to how it can be a great language for certain applications. Namely a native Windows application that is less boiler plate than Java and easier to manage memory than C++. It may be lacking good development tools, compile and runtime support, and native GTK/Qt support on Linux, but that's not what puts me off. What keeps me from wanting to learn C# is I have no use for its greatest strength (native Windows graphical applications) and the language idioms are too similar to Java to make it worth my time learning over a functional language like Scala or F#. That said, if I had a reason to learn C# for a job or some software library, I wouldn't mind learning it.
Is this not the difference of having to initialize/boot the framework for every request versus .NET Core where it would be loaded into memory? 
And another: in New Zealand there is a lot of .NET jobs. 
I'm a C#/.Net Dev and I Love it!
If you are trying to add it as a reference to a project, you can click on the project, select Add Reference and search for this dll in Assembly References. If you don't find it there, you can add it as a Nuget package via the Nuget package manager.
I'm curious what makes you dislike Microsoft?
&gt; drove me towards Swift when it first came out, despite the back-arseward syntax. The what? Swift’s syntax is pretty standard. 
Cool, I thought I'd ask. I keep buying devices with stylus support and never use the stylus, so perhaps someone would learn from my mistakes :) 
Typescript, C# and F#. All of these MS languages are incredibly well thought out, awesome to use and keep getting better! Java is not even close to any of these languages 
Now we have Google doing the same with Java on Android, but the anti-MS crowd seems to be ok with Google doing it. Just try to port plain JavaSE code into Android, and have fun handling the missing libraries or the JVM bytecodes introduced in 7 and 8 versions. They finally released proper Java 8 language support (not libraries or new opcodes) with AS 3.0, with restrictions about target devices. Yet the most recent version is Java 9, which will probably never be supported and they might focus on Kotlin instead.
All those features were in Object Pascal and Delphi with exception of optional static typing, guess where Anders got his inspiration from?
Fully agree with you. For the type of projects that I do, until we get a mature WPF like framework on .NET Core and EF Core matches EF 6, there is no reason to push it to our customers.
How come Java is on its way out, just because of Kotlin?! I had to check if that article was published in April. It is like saying C is on its way out on UNIX, or JavaScript is on its way out on the browser. You cannot take the systems language of the platform out, without rebuilding the platform from ground up. As Java, .NET and C++ consultant, I have seen **zero** requests for Kotlin projects. Now with Kotlin being adopted on Android, and the Java fork done by Google, I do see Kotlin growing on Android, but not on the typical Spring and JEE shops.
Depends on how you work. We do consulting across mainly Java, C# and C++, so the salary doesn't change just because the customer project changes.
&gt; Python is (in my opinion) the language of the future. Only when they bother to make AOT/JIT compilation a standard feature of the language, and not of partially compliant 3rd party implementations.
Try to write a WPF application on .NET Core 2.0. Or better yet using database first visual designer for EF with EF Core.
Cannot for the life of me get this to work. If you would be willing can you please tell me what to download and how to add it ? How do I add it via NuGet ? edit: I just figured out that it is because the program I am working on is using a very old version of .NET, when I add SqlServeCe in a fresh project, there is no problme. 
Why is this a discussion we are always having, is programming language A better than language B? I mean how meany times have you heard someone ask, is a Hammer a better tool than a screwdriver? Programming languages are tools, choose the best tool for the job! 
Is it proper etiquette to eat pineapple pizza while coding in C#?
I've encountered this at work. Java has a built-in functional interface (the thing you need for lambdas to work) `Supplier&lt;T&gt;`, which is equivalent to `Func&lt;T&gt;` in C#. @FunctionalInterface interface Supplier&lt;T&gt; { T get(); } You can't make `Supplier&lt;T&gt;` point to a method which throws a checked exception, you must wrap it: // Compiler error; "Exception must caught, blah blah" Supplier&lt;Integer&gt; s0 = () -&gt; methodThrowsCheckedException(); // Instead... Supplier&lt;Integer&gt; s1 = () -&gt; { try { methodThrowsCheckedException(); } catch (Exception e) { throw new RuntimeException(e); } }; However, you can make your own functional interface: @FunctionalInterface interface Lazy&lt;T&gt; { T get() throws Exception; } Then this works: Lazy&lt;Integer&gt; l = () -&gt; methodThrowsCheckedException(); Invoking `get()` on `Lazy&lt;T&gt;` then becomes the checked exception which must be caught or declared as thrown. try { Integer i = l.get(); catch (Exception e) { throw new RuntimeException(e); }
That sounds very uninformed. Specially for large companies the Microsoft stack is very common. And as others have noted, it's there because Java couldn't keep up. 
&gt; Nadella is terrible CEO. That's objectively false. MS is doing better now than it has since the Gates era. You haven't provided anything to support this assertion.
as a starter would this be worth it?
The death of existing products and the lack of any new products under Nadella is the argument. Unless of course you believe Skype chatbots are the future.
I might buy one just to try it.
My entire career has basically been C# in enterprises. There's an enormous amount of opportunity for work if that's what you're looking for
Bullshit. I'm a hardcore Linux user who also is a .NET dev by day. .NET Core is the fucking dream. I can now (and have) write and deploy full fledged web applications written in C# without relying upon any sort of proprietary Microsoft components. Java is a good choice of something to learn to and use too especially if you are interested in coding for a living. But don't lie to yourself: Working with tech whose direction is heavily influenced by the likes of Oracle is not going to be a step up from working with tech whose direction is heavily influenced by the likes of Microsoft. When it comes to Java versus C#, you gotta pick your poison. Personally I don't care much for either company, but Java has been a far bigger shitshow over the last decade than C#. Though to be fair, that's probably going to change soon as Oracle appears to be washing their hands of Java now. I'll spare you my rant on Python. Needless to say, they fucked up division and had to revisit their implementation in a subsequent version.
Point taken. That is more and more irrelevant each year and as Microsoft moves over to open source and supporting open source projects and standards. Nuget vs Maven comes to mind. Nuget was good, but it lacked a lot of the build capabilities that Maven had. Keep in mind I last used Nuget maybe 3 years ago. 
AFAIK, Excel doesn't have that feature. You can use a VBA routine to add one and add that VBA routine with EPPlus.
So as a Linux user and .NET dev, I can probably help with this. For some it is largely based on impressions of MS they got decades ago. Like a bad taste in their mouths, it isn't going away. The real issue is that almost every positive change MS seems to make nowadays seems to also fuck with the user on some level. Is Windows 10 a vast improvement over Windows 8? In a lot of ways, yes. But Windows 10 is a buggy product and this is primarily because MS fired a huge portion of their testers. Windows 10 also snoops on user activities and MS refuses to allow users to turn this off. It also forces a variety of preferences and behaviors onto the users that may or may not be desirable over a variety of cases. Like it or not, but ever since Windows 8 came out, Windows as a product has been more a vehicle for addressing MS' problems rather than a vehicle for addressing user problems. What's really interesting about MS is that while this has been happening on the Windows side of the fence, other parts of the company have been free to handle ecosystem pressures completely independent of what the Windows team decides. The teams responsible for .NET Core and its associated tooling are doing some really great work and blazing brave new trails that I hope will pay off for MS in the long run. So yeah I'm a Linux user. I despise Windows. But I love .NET Core. My primary goal at this point is to stay away from proprietary MS software and I'm managing to do that quite well nowadays.
&gt;Quite frankly I think the best part of C# is the fact that it works with visual studio. Without Visual Studio, writing C# would be nowhere near as efficient and enjoyable. This guy gets it. I did work over the summer doing web dev as an intern using a whole new Microsoft stack of TFS, Visual Studio, ASP.NET, Teams, Azure, Skype for Business, Outlook etc and all of it worked fantastically together. Arguably too many separate products but I found them all really easy to use. Visual Studio is great.
&gt;I was told my many people and many users on reddit that C# isn't that great of a language That's definitely not true. &gt;it is strictly restricted within Microsoft's Windows ecosystem This has been somewhat true, although the Mono project has been around practically forever now, and allows running .NET software on non-Windows platforms as long as it doesn't use any unsupported parts of the .NET Framework. (such as WPF) It's also become much less true as Microsoft has fully open-sourced .NET Core (which presumably at some point will replace the legacy .NET Framework, even if that won't happen in many years still) and its related projects, as well as the .NET compiler. Unless something changes, it's likely only get better and better supported on non-Windows platforms. There are already commercial games written in C# (using frameworks such as MonoGame) that have been published on PS4, which does not run Windows. "Salt and Sanctuary" is one.
VSCode is great. When I first heard of it, I thought it was just an Atom-ripoff, but in my experience it's been superior to Atom in pretty much every way. Significantly better performance, better intellisense, more and better plugins, language support, etc. I now use it instead of Atom for pretty much everything I used to use Atom for.
Visual Studio Code? As a text editor, I'm fairly pleased with it and use it in macOS and Linux. I have not tried to use it as an IDE yet because of deadline pressures over the last six months (staying with the tried and true VS 2015 + Resharper). The smarter folks on the team have been the ones experimenting with .NET Core and whether the tooling is good enough that we want to actually do a project in it. The head developer has also been experimenting with JetBrains Rider IDE. Our development schedule gets quiet in the December-January time frame, so that's when I think we'll look at .NET Core again.
The Swift syntax makes sense, because it makes Generics a lot less messy.
Hey this works even after the edited question. 
No actual Visual Studio for Mac. https://www.visualstudio.com/vs/visual-studio-mac/
You're not doing anything wrong, you're just working for Volkswagen now.
Novell Remembers. I was the top programmer at my company because I had 2 IBM XTs. I was living the dream until the guy who knew Lisp got a 386. I remember refusing to use MFC and eventually switching to Java/VisualAge because MS ripped the heart out of Borland. Borland's tools were better and OWL was cleaner, but MS had the cash. Now I happy mash C#, JS, and Node where I need them - screw the language and framework wars I fought in those trenches enough to recognize the futility.
Oh man, I'd forgotten about slashdot and the Bill Gates Borg icon for Microsoft stories. Just went to check it out, no more Borg and saw an office 365 ad. Nothing is the same anymore.
Yes. That is the "Theory". The fact is that it *Since* _NOW_ relative with all the experience from any other programming ecosystem in the Unix World.
C# or Microsoft aside, Visual Studio is THE standard for IDE's. Nothing comes close to it's awesomeness. 
Please see this Cluster Diagram of programming ecosystems[1]. You'll be stable if you work with clustered technologies and would be facing problems typical of unstable software (dev, beta, prototyping, etc.) if you experiment outside the clusters. Not necessarily bad, but inevitable more difficult. Source [2] [1] https://zgab33vy595fw5zq-zippykid.netdna-ssl.com/wp-content/uploads/2017/10/network_liked_disliked-1-675x675.png [2] https://stackoverflow.blog/2017/10/31/disliked-programming-languages/
May want to handle the crash events if someone types 'one' instead of 1 and you try to parse that as a float. Or some cultures use '0,10' instead of '0.10' as their decimal character so handling for cultural variants is good there too. But that's probably more that you need to handle for right now. float f = 0; float.TryParse("0.58", NumberStyles.Any, CultureInfo.InvariantCulture, out f); 
Might be 2013 specific because 2017 does not exhibit the problem for me.
same here. That said, 2017 is the most niggle infested VS release I have seen to date. 
What literally everyone else is saying. If you don't mind me asking, what is your area? 
I've been using Rider because I've changed to Linux, however I think you still can't compare it to Visual Studio, whenever I have to deploy to Azure I still miss VS a lot.
Well.. AD is not actually a linux thing! But I se it done in .NET Core running on Windows
This also serves as a nice filter. Anyone hating things just because they were made by MS is likely to be a very biased in his other judgements and opinions too. Now back to the point, C# is generally considered a better Java. It's probably thanks to C# and its constant evolution, that Java picked up on some of its nice perks. However, the ecosystem surrounding the language is mainly MS-centric, although thnigs have been opening up in the past few years. The language itself is constantly evolving and getting new things. It's very pleasant to write in, almost everyone who tried it ended up liking it.
However, there is nothing wrong with saying, "Oh, you want to save battery life, ok". How would prioritize this feature against all the others? They can ask for anything and you can offer anything, but everything has a priority and only so many things can be done.
If you're young enough to not remember, you should read up on the history of Microsoft. They've used some absolutely horrible practices to push their substandard, crashy software on the populace and were very much regarded as The Evil Empire before they came up with two things: the XBox, and a much better marketing campaign to try to clean up their image. They're not quite as evil as they used to be, but Windows is still a freakin' disaster. I only keep it around for games and VR. But I judge things by what they are and C# + Visual Studio is one of the best dev experiences you can have. It's the one thing they've done right. *Edit: Downvotes don't change history, kids. Go read about it, it's quite interesting.*
Sorry, maybe I phrased that poorly. I meant that at the time, I was so used to the syntaxes of C++, C#, Java, Python, etc. that everything in swift felt either back-to-front or awkward. Things like: - Sticking the return type at the end of the method declaration instead of the start. - Forcing you to use argument names when passing parameters into a function (but only for the second parameter onward, except sometimes not). - The packaging/namespacing system that forces you to create separate projects to use different namespaces. - The clunky way explicitly typed variables are declared ("var MyVariable: MyType = MyValue;" vs "MyType MyVariable = MyValue") (It seems to be pushing writers away from explicitly declaring types when, to make for quickly readable and maintainable code, you want to push writers towards doing so) Swift is functionally brilliant, it has so many features I've been itching for in other languages. But at the same time, lots of things (mostly little things) build up to make code written in Swift feel like a bit of a dredge to read and write. At least to me.
This. And the Visual Studio line of dev environments are very good.
Sure the deploy story of Rider isn't good, but since we have implemented CI at work I haven't been using that feature of VS in a long while.
Yeah I think for most production stuff that wouldn't be a problem. The thing is that as someone who is learning .NET Core I'm constantly deploying new stuff to the Azure App Services, and given that the FTPS client of Rider it's kind of broken right now I have to deal with FileZilla for each deploy. In VS that would be a 'one click' process.
If Microsoft hired you to make the next version of Windows what would you add?
If you want a look into the guts, the deepest dive I've ever seen is Charles Petzold's *Applications = Code + Markup*. It's a full WPF book that is so code-focused it has zero screenshots. The state of WPF tutorials is a mess. There was an initial passionate crowd, then MS went through a phase where they went Jason Vorhees on UI frameworks. I saw so many people announce a book deal with excitement just in time for MS to say, "Oh look, shiny! Don't do Silverlight anymore, uh... do HTML5! No, Metro! No, Modern Windows Application! No, UWP!" So they went to write Swift, Ruby and Obj-C tutorials instead. What's left behind is a sad mishmash of obsolete WPF tutorials and a VB-like graveyard of good ideas from all five versions of Silverlight.
I agree. Please God, make the electron apps stop!
It has its quirks, especially the older versions. But now, yeah, it's proper.
Best of luck in your upcoming copyright infringement suit.
Thank you all for your suggestions! I’ll dive into them and see what I’ll come up with.
You are doinging this... textline=""; how many miles have you traveled? textline="5" How many gallons of gas have you used? textline="10" Traveled=float.parse("10") Used=float.parse("10") Mileage=10/10;
The ability to elevate to administrator privileges a program that's already open. I hate trying to save file or running a command line just to get blind sided by UAC/privileges that I can't fix without closing and reopening the program running as administrator.
Microsoft knows all about us and they like the name. They aren't going to sue us over it.
Been a looooonnng time since I needed to do web based SSO using AD by scratch. IIRC (from a very rough memory) first you are going to need the user principal instance you want to respond with. Then you need to hand it along of course. I cannot remember if you do that with the HTTPClient API by a property or if you pass it as a parameter during the request. It might be that you need to use another API rather than HTTPClient though I think you can use it. Hope that helps some. Hopefully someone comes along with a more recent memory on that one. 
If you already know some c#, you'll definitely learn something. He doesn't go over the basic syntax, but he does talk about common web technologies like JavaScript, jquery, bootstrap, then goes into ASP.NET. If you are totally brand new to web, I would recommend Rob Percival's web course on Udemy first.
Yep I feel your pain. To be honest before we had CI setup I had a windows VM in Azure that I would spin up just for doing one click deployments (though to be fair, it cut down deployment time by a ton depending on what building I was working out of at that moment).
Care to give an overview of your macro architecture? I've built similar features in the past with dynamic linq and/or expression trees. It's an interesting problem to solve. 
I only get annoyed at how often they push minor updates and then I get that ugly yellow icon at the top until I either update or dismiss it.
This was a perfect answer! I just implemented this, and it works flawlessly.
C# and Java target pretty similar uses, market segments, and have some pretty similar design choices. This is less about using a hammer or a screwdriver in a particular and more about which screw drive to use in a general one.
I just wish the tuples where part of visual studio on its own as opposed to installing a Nuget Package. I know it took me a bit of time to figure out how to do the new tuples because the majority of websites forgot to include you needed the nuget package first.
I wish VS 2017 would estimate how long update may take. Most of the time their updates take about a minute but I had one update that took about an hour. In the middle of the work day. That was terrible.
&gt; I had to check if that article was published in April The article was published on October 11, 2017. &gt;As Java, .NET and C++ consultant, I have seen zero requests for Kotlin projects. Read my original post again, I specifically said this time next year - not right now. &gt;I do see Kotlin growing on Android, but not on the typical Spring and JEE shops. Kotlin can also be used on the backend with traditional Java frameworks and I've read plenty of posts of shops that are already starting to use it on the server-side. Again, in time you will start to see Kotlin on the server more and more.
Im a high school vocational student and all we learn is C#. (Well, its the biggest language we hit on.) If you already know Java, C# will be a breeze. People hate it because Microsoft is a corporation and its cool to hate big corporations for no reason. There are way more reasons to not like Microsoft than C# and .NET, lol. 
That is pretty sad, they pay top dollar for the programmer, but not the tools for him to use lol. Wow...
&gt;I was told my many people and many users on reddit that C# isn't that great of a language (compared to Java or other OOP) This is a complete and utter bullshit. Possibly said by someone with a bias
Ehm, you [can](https://github.com/dsbenghe/Novell.Directory.Ldap.NETStandard)
Indeed, but this is a price for an ability to target lower framework versions. If you target 4.7 or use .net core projects everything works out of the box.
Have you seen this post? https://stackoverflow.com/a/12675503/344638
I'm not saying Pascal wasnt also influencial, but don't forget the CLR was first designed to be the next runtime for VB.
I generally don't use microsoft products in general, *with the exception of* their programming tools - their languages and IDEs, which I find on par with none.
C# is optionally statically typed, which is a huge benefit when dealing with some problems. LINQ expressions can be compiled, or they can be interpreted as expression trees at runtime. (Which gives us stuff like LINQ to SQL.) A lot of C# programming is declarative (validation, serialization) or functional (again, LINQ). If you want to drop lower and use raw pointers you can. You're just looking at the subset of C# that it shares with Java/C++.
AD supports LDAP, and LDAP should be available on linux.
Happy to hear your problem resolved. Out of curiosity, which version of .NET was your program referring?
I'm rewriting every project I've got when that happens. I'm so excited to finally get rid of nulls.
It was a bad way of stating it; I was in a bit of a hurry when I posted that, so it should have been either a separate paragraph on its own or I should have used a different example. I was trying to convey two points: 1. A developer will see non-Microsoft/.NET things pop up more and more on jobs because people are moving away from the straight .NET solutions, especially as new synergies emerge from the move to cross-platform. For example, at some point someone will come up with a good set of working GUI tools for Linux desktop development. That will likely use C/C++, so there will be jobs that pop up looking for .NET people with relevant experience in C/C++. Angular isn't a cross platform thing, but it's an example of a non-MS framework being leveraged. 2. A lot of companies will string together all the hottest buzzwords in job postings in an attempt to jump on the hottest thing going around, with little regard to what's actually necessary or possible for them. The good news is that they're usually spitballing on their requirements, so many times they'll settle for a lot less. The bad news is, they're often unstable places to work.
Former developer, now development manager, here. I've worked in the .NET stack since it was released. I've written code in C, Pascal, C++, Clipper, VB, C#, ruby, perl, Java, Javascript, and probably several other languages I've forgotten about. C# is my favorite language. To me, it's cleaner than Java. But that's my opinion based on my experience. You need to make the same decision for yourself, don't just listen to strangers on the internet. Unfortunately, the only coding I get to do now days is the occasional Powershell script. 
This is exactly right. And it’s unfortunate because almost anyone I know who has done both strongly prefers .net. 
I learned java in last year in 10th grade. It took me about 2 days to switch to c#. It’s sooooooo much better lol. And ASP.Net core is amazing. Use c#. It’s great
Also, people that refuse c# because it’s Microsoft also don’t seem to realize that Microsoft owns windows.
You can use signalr core at the moment on 2.0. It’s prerelease, but it seems to work pretty well!
That's an incredibly specific case. If your world is desktop applications, I wouldn't be using C# or Java. I'd be using C/C++ and Qt or possibly even GTK. However, when it comes to services, CL tools, web, etc. .NET Core is ready.
Implicit dynamic dispatch? Implicit covariance and contravariance? Yeah, that's about all I've got off the top of my head. Those are objectively better in c#, but really both of which are so niche that they're nothing next to true generics. 
I work pretty much exclusively in C#. I love it. Java was a nightmare by comparison. C# makes it a lot more difficult to have those weird meta errors that you have to search hours to find because it's very strictly typed. Additionally, the UI tools in Visual Studio make creating GUI components a cake walk. Please, give it a shot. If you hate it, whatever you do you, but I can't get enough of C#.
&gt; Programming languages are tools, choose the best tool for the job! C# and Java are essentially competing tools. They solve the same problems. I'm honestly at a loss at how anyone, after having used both languages, would consider Java just as good or even remotely competitive. C# is just better in every conceivable way now.
You install updates during the day on a weekday? Look at the cojones on this guy...
Poor Novell :) all I can remember is some command to fix stuff that took a parameter /xcd or /xkd (not xkcd obviously). SCO sent me a tshirt once. I emailed SCO, Novell and Microsoft asking for freebees as I worked with their tech and clearly deserved some form of remuneration. Only SCO sent me anything :) I participate in the odd battle still, mostly to help break out of the cyclical nature of the industry but I can't say it helps :)
&gt;However, I was told my many people and many users on reddit that C# isn't that great of a language (compared to Java or other OOP) I would strongly disagree with the Java comparison. Java's strengths compared to C# were basically nullified once dotnet core 2.0 came out as dotnet core is now as fast or faster than Java in many performance benchmarks. It is also just as portable as Java. &gt;They said that .NET Core is still barebone so it will take ages before getting anything done with C#/.NET on a non-Microsoft environment. That was true as of earlier this year, but no longer true now. Dotnet core 2.0 has nearly all of the functionality .net framework has, and compiles to mac, linux, and windows. It can be used for IoT, android and iPhone (through xamarin), and more. You will be able to run it wherever you need it As for pricing, you can run ASP.NET Core on a linux server using Apache if you want. In fact, the day dotnet core 2.0 was announced Amazon [posted this](https://aws.amazon.com/blogs/developer/aws-and-net-core-2-0/): &gt;Yesterday, .NET Core 2.0 was released, and at AWS we’re very excited about the new features and maturity added to the .NET Core platform. In the coming months, we’ll be updating AWS services to have first-class support for .NET Core 2.0. You can get started using .NET Core 2.0 on AWS right away Anyone telling you Java is better than C# hasn't kept up with the times, and probably suffers from stockholm syndrome from using Java for so long
Are you giving arguments in favor of Java or in favor of C#?
Not at all, CLR was supposed to be the next COM, basically what was reborn as WinRT/UWP. It was known as Ext-VOS, or COM runtime, until Microsoft influenced by Java decided to use a VM approach instead. Don Syme has a few blog entries about it.
Fortune 500 are mostly WPF shops in what concerns desktop apps, not Qt ones. They have moved away from C++ long time ago, before C++11 was even a thing. Most healthcare monitoring devices use WPF interfaces.
This is my go to site for regex: https://www.regular-expressions.info/ How you define your regex depends on your rules and you really need to consider your edge cases. What you have up there for your value part only lets you type in A through Z and quote + dash characters. No punctuation, spaces or numbers. Consider using something like `[\w\d\s]$` instead. The `(Name|Surname|Address)` bit is fine if it literally is only those three strings, but quickly gets out of hand if you need/want to define more. It might be better doing a match group on that side of things and then doing some post-regex checking that the value makes sense. As for how you specify that you must have a `:` in there... you put a `:` in your regex. :D A couple of other points: * Strongly consider using a compiled expression. This dramatically improves regex performance in C# * Likewise you may want to use a case-insensitive flag if you don't care about `A` vs `a` rather than specifying both everywhere. There are many sites available for helping you test your regular expression against input. If you're going to be doing a lot of Regex work I suggest investing in a program like Regex Buddy.
I gave two things Java does objectively better than c#. Then turned around and agreed that c# more than makes up for those shortcomings. So both. But then I like to play the "find the trade off game". Helps to keep an open mind.
Does the 401 contain the Interface name defined, or does it contain the IP address of the LAN? How are you handling the Logon? I dont see any authenticate code here. You might find this useful: https://blogs.msdn.microsoft.com/chiranth/2013/09/20/ntlm-want-to-know-how-it-works/ 
If I had to make this decision again, after 16 years experience in .net work, I would look at it differently. Look at the type of work you want to base your career around and look at the technologies people are using to build things in these places. There is no one stack to rule them all; they all have pros and cons. Do you want to build technology, perhaps look towards the JVM, enterprise apps, choose .net or java, web applications choose what feels right as this will change more than anything else. Choose a community and immerse yourself in whatever makes you happy. Keep learning and you will be portable. Hope this helps.
2017 is a fucking hot garbage fire... hey ima do exclusively C++ development (VS 2017 starts up a node.js instance to help with POTENTIAL javascript development... yeah no .js files will ever be added)
It's not just the base64 string, you are creating at least 5 copies of the password, and only one of them is actually zeroed by you. You can pass a `SecureString` as part of a `NetworkCredential` to a `HttpClientHandler`, but ultimately that too is going to encoded, concatenated and copied into various unencrypted buffers outside of your control while performing the request. I don't think there is anything you can do to truly prevent that. &gt;Does Marshal.SecureStringToGlobalAllocUnicode ensure that it's pinned or do I need to do something extra "Pinning" only concerns managed objects handled by the GC. `Marshal.SecureStringToGlobalAllocUnicode` allocates unmanaged memory that can't (and doesn't need to) be pinned. All the managed strings created afterwards are not automatically pinned and could be moved by the GC, although technically you could never 100% prevent that because the GC could kick in after the framework method created the string but before you pin it. You'd have to write your own methods that allocate and pin the string first and then fill it with sensitive data using `unsafe` code to prevent that from happening (not that I seriously advocate doing this).
You need to set UseDefaultNetworkCredentials, don’t you? Are you expecting the exe’s user to persist to the web server?
I always use the second style when I can.
Thank you for this, I'm currently installing 2015 on a VM because I thought something local was causing 2013 to crash. I will test your fix soon. Edit: Just got done testing this fix, yep worked great. Thanks again!
why? Discord and slack are pretty cool.
&gt;Bar foo = new Bar(); &gt;foo = Request.CreateBar(x, y, z); you're just re-assigning the foo variable to use a new Bar instance... the first line is pointless. therefore, use the second style
to paste put 4 spaces before posting a line of code to make reddit markdown style it as code. easiest way is to highlight code from Visual Studio, paste into notepad, then ctrl+a and press tab
to master regex - learn what a state machine is. after that, regex's are trivial. 
yes it is. 
The latter. What's the point of the first?
I am confused because you say &gt; Those are objectively better in c# What do you mean by "Implicit dynamic dispatch"? As for the covariance and contravariance while the Java approach is more powerful I am not sure it is better in practice. It shifts the burden of covariance and contravariance from the designer of the interface to the user. The designer probably spent time thinking about this and many users don't even know what covariance and contravariance is. The C# approach allows users to take advantage of the feature without even knowing it is there while Java burdens everyone with the complexity. That being said Java has this for classes while C# is limited to interfaces and delegates.
read up on clean coding it really does make things easier to follow 
So is my line supposed to be \b(Name|Surname|Address)\b: [/w/d/s]$" then? Because the whole if (System.Text.RegularExpressions.Regex.IsMatch(search, "\b(Name|Surname|Address)\b: [/w/d/s]$")) doesn't seem to do anything. 
Got it, thanks. How do you do it within a sentence though? Like the comment above did. 
I recently had a similar issue of VS 2017 freezing on me and crashing when I wasn't connected to the tubes. I assumed it was the GitHub extension. Solution was give it some tubes. They must have developed VS 2017 with VS 2013. 
by using the \` character likes this \` `var me = new Person();` \`
Try `^\b*(Name|Surname|Address)\b*: [\w\d\s]?$` The ^ means (roughly) start of line and $ means end of line (Watch the \ vs /. Apparently I wasn't too careful in my initial reply.)
Why would you assign a `new Bar()` to `foo` if you're assigning something else to it immediately? I would've understood despite being a waste of two lines instead of one the following construct Bar foo; foo = Request.CreateBar(x, y, z); but creating a `new Bar()` for no reason isn't a matter of style anymore. The question of style would be whether you get to use Bar foo = Request.CreateBar(x, y, z); or var foo = Request.CreateBar(x, y, z); but that is still debated and it highly depends on how obvious it is, from naming or context, that `Request.CreateBar(...)` returns a `Bar`. I think I personally almost always use `var`. 
Alternatively you can try something like `\s*(?[^:]?)\s:\s*[^:]?\s*$`which will allow anything on either side that's not a colon to be entered. You may need to play around with the greediness of the expression though. The `\s*` are there to eat up white space, but not strictly necessary.
`thank you`
&gt; creating at least 5 copies of the password really? That sounds like a challenge :) This one is the first "copy" because it's a pointing to an existing string which gets zeroed: string password = Marshal.PtrToStringUni(valuePtr); This I can see as problematic: string computedAuthToken = $"{username}:{password}"; This is one I missed completely when I created this post: encoding.GetBytes(computedAuthToken) This is the one I was asking about: Convert.ToBase64String(encoding.GetBytes(computedAuthToken)); That leaves one I don't see.. &gt; You can pass a SecureString as part of a NetworkCredential to a HttpClientHandler Thanks I'll take a look at that. At the very least it's a lot cleaner than all this marshaling stuff I'm doing. &gt; But ultimately that too is going to encoded, concatenated and copied into various unencrypted buffers outside of your control while performing the request. I don't think there is anything you can do to truly prevent that. I was afraid of that.. Should we really bother using a secure string at all in that case? I was kind of hoping that if it takes a Network Credential then the HttpClientHandler would ensure that the lifetime of the buffers is limited to either its lifetime or that of the request (I still need to figure out how this works btw). 
&gt;Watch the \ vs / [\w\d\s] gives me 'unrecognized escape sequence' if written like that ? 
Depending on your string format in C# (regular, starting with @ or starting with $) changes how you escape things. You may need to write it as `[\\w\\d\\s]`
&gt;That leaves one I don't see.. `Marshal.PtrToStringUni` copies the bytes at the pointer into a new managed string, it doesn't just cast the pointer to a string reference. `String.Format` (`$""`) might also create additional copies in an internal buffer, concatenation would probably be better in this case. &gt;Should we really bother using a secure string at all in that case? Depends on how much it impacts the rest of your code. While it's not perfect, it can at least reduce the time where the password is in memory unprotected.
Check out the wordpress-theme-installers and node-fanboys on webdev
The apps are great, other than the fact that they require a full-blown chrome process with a ton of memory to host them.
They did nothing back then that apple and google aren't doing right now, except that they weren't also selling your data to everybody at the same time. Yes, I'm old enough to remember. Windows has been solid since win7.
Alright so that fixes the error. Still however, if (System.Text.RegularExpressions.Regex.IsMatch(search, "^/b*(Name|Surname|Address)/b*: [\\w\\d\\s]?$")) { Console.WriteLine("error"); } else { Console.WriteLine("sdsad"); } no matter what I write in the console, I always get the 'else' returned to me. What exactly am I doing wrong here? 
I just read up on HttpClientHandler and realized that it's passed to the HttpClient via it's constructor. What I didn't mention earlier is that I can connect to multiple (read hundreds) of services (running on different devices) using this one HttpClient object. So the credentials will be different for each of them. I could technically create one HttpClient for each call but I read somewhere that the consensus is to try not to dispose of the HttpClient (I'm not sure why though, resource reasons?). Any thoughts?
&gt; Marshal.PtrToStringUni copies the bytes at the pointer into a new managed string, it doesn't just cast the pointer to a string reference. oh! &gt; Depends on how much it impacts the rest of your code. While it's not perfect, it can at least reduce the time where the password is in memory unprotected. Thanks!
What's the best program you ever took part in writing?
'\\\\b' not '/b'
&gt; Bar foo; &gt; foo = Request.CreateBar(x, y, z); Is this legal in C#?
Great question. I happened to be looking through some code, and they use the first version all over the place. I immediately thought it was stupid, but then I thought to ask here, since I've never used C# and might have missed something.
Dynamic dispatch is explicit in c#. You have to use the dynamic keyword in place of a type. In Java, it just happens. So you need to know what dynamic dispatch is, how to use it, and when to use it. More significant than that, I think that the behavior of dynamic dispatch is more apparent. If I don't catch getting boned by compile time dispatch before it happens, I'm horribly confused until I decide in and realize my error. As for type variance, I see your point of shifted burden, but can you give an example where that burden is counter-intuitive? I I'll start the discussion with the idea that overloading a method to return a more specific type than it's base class is more intuitive than having to make a new method or playing type system games. I'm not sure that argument works for contravariance, but it's a start.
Yes.
But it was fun. I don't know if it is just my age or the nature of this time period, but I remember it being more fun to sit around chat groups or bars and disagree about tech.
Gotcha, still nothing. To be sure, is *should* give me the "error" if I were to type in `Name: anything` right? 
This: Bar foo = Request.CreateBar(x, y, z); Or better yet: var foo = Request.CreateBar(x, y, z); Though this one seems to differ by person and is the source of many a religious coding wars :)
Yes! Note however that local variables are not initialized like class members are. So if you try using `foo` before assigning something to it, you would get an _Use of unassigned local variable foo_ error. Sometimes it gets tricked and thinks it is unassigned if you assign it in some weird scenarios, like an if or a switch, but you can fix that by saying `Bar foo = null;` which is still better than `Bar foo = new Bar();` if don't intend to use that `new Bar()` anyway.
Age/experience, the arguments aren't novel any more and because we've lived through it there's no naive optimism :)
Should, but unfortunately I don't really have time to keep helping you debug it. I suggest finding a website that deals with C# regular expressions to help you do that.
It's stupid. ~~On the upside, I think the compiler or JIT *ought* to optimize the extra object away.~~ Or not. See u/seizer's reply. There are some situations that may require or encourage assigning a default value that way, but there are usually better ways to handle those, too.
&gt; Windows has been solid since win7 AHAHAHAHAHAAA!!! My Windows 10 install forgets what time it is constantly (while the linux install on the same machine never has any issues). And I've tried both manual time setting and non-manual always-pull-from-the-internet-mode. Windows likes to suddenly start upgrading without me having a say in the matter (like if I'd like to update when I'm not actively wanting to use the computer). Older versions like to FUCKING UPDATE AND REBOOT ALL BY ITSELF which made it useless for long-term computation tasks. Windows has settings in a zillion different places. If I want to find a setting, I have to fucking google it just to find out where they stuffed it. By default it will SHOW GODDAMNED ADVERTS IN THE START MENU (thankfully shut-offable, but *still*). Apple used to be a little better but they've been sliding downhill for the past several years. After being a solid mac user for 16 years, I switched back to dual-boot Windows / Linux because of Apple's non-support of Vulkan and other issues (like useless Mac OS changes for just the sake of changing things w/out improvement), with Linux being my primary OS now. And finally: bad / evil actions by Apple / Google don't make it right when Microsoft does it. I've never understood the "but Other Big Evil Company does it!" argument. That's just lazy.
Huh, well I'll ask the teacher tomorrow what's up. It is but a part of a program for class. Just wanted to finish it today. Thanks for the help though!
Edited
The compiler / JIT wouldn't touch it. The Bar constructor may have side effects, or there may be static field initialization, etc. To remove the call would be a change to program behaviour.
It's not an issue at all, but I do continuously find myself wondering why open source devs in particular seem to have a hard on for moving as much to the client as possible. Perhaps it's that they don't understand how powerful the Razor view engine is with what it does?
I learned something today. Thanks!
Not unless the constructor is initializing static fields, kicking off tasks, or something similar.
Can't remember any worthwhile off the top of my head, sorry.
We have a stylecop rule so that non-obvious return types require a typed name. So: var myInt = 0; But: int anotherInt = FunctionThatReturnsAnInt(); 
&gt; What I didn't mention earlier is that I can connect to multiple (read hundreds) of services (running on different devices) using this one HttpClient object. So the credentials will be different for each of them. You could use a concurrent dictionary and have a separate HttpClient instance for each service.
You're missing a * after your character class to repeat it
Try AutoHotkey. It's pretty much the spiritual successor to AutoIT. You can also get it as a .Dll and integrate it into a C# project.
Usually use this site to play with the pattern until I get it right. I then include a comment with a link. https://regex101.com/ Edit: Example https://regex101.com/r/qLKm8m/2
If the services are differentiated by host/request URI, you can use a `CredentialCache`.
Why do you say the second is better?
Something like this? The Regex reads Capture one of 'Address' or 'Surname' or 'Name' end Capture. Match one ':'. Match one space ```\s```. Capture any character ```.``` until the end of the string ```*```. End Capture. I then grab the 2 Capture Group values and put them in a dictionary (as I imagine you'd want to do something with the values provided). string search = Console.ReadLine(); var matches = Regex.Matches(search, @"(Address|Surname|Name):\s(.*)", RegexOptions.Singleline); Dictionary&lt;string, string&gt; parameters = new Dictionary&lt;string, string&gt;(); foreach(Match match in matches) { parameters.Add(match.Groups[0].Value, match.Groups[1].Value); } Why did I choose the greedy ```(.*)``` Capture Group? Because you mentioned Address. Addresses tend to have numbers and spaces in them. I went for single line. If you choose multiline, the ```.*``` would capture \n (newline). But you'd likely never see a multiline input as you specified ```Console.ReadLine()```.
&gt; after your character class Sorry, where is that exactly? 
Let' say you changed your CreateBar method and now it returns Bar2. If you were using `var` then you wouldn't need to do anything, since the type of `foo` is inferred at compile time. But if you had the explicitly defined `Bar foo` then you would need to change each and every instance of it to `Bar2 foo`.
He also says the second one is the source of many religious coding wars. I think /u/kaz3work summaries the situation well enough. Using var is fine if you can be sure of the type by looking at the right-end of your statement. If you can't, use the type name. Redundancy can be eliminated by var and your code can be read more easily. But if using var makes everyone confused about which type it is, then it's a bad use case for var.
This is great career advice in general. It's all music. Don't focus on the equipment, just be a versatile player.
Bother. Thanks for the correction.
I mean, yeah it could... but still is ultimately pointless.
That looks very useful. Also thanks for the example! Actually works. Only now I wonder if I'm supposed to add anything so you aren't able to input `Name: something: somethingelse` as I want to split at ":". Is there an easy way to allow only one ":" in the input? 
I'm sorry for your career... ;)
It clearly says it returns an int in the name!! ;) 
lol reddit search shows no results found for previous threads
Yup there is. Just added a `$` to the end of the Regex pattern so that it must match this thing as one line or not at all. https://regex101.com/r/qLKm8m/3
If that is the case you have bigger problems than some random irrelevant constructor
x / x =1 Mileage = x /x; 
Razor is a view engine while ASP.NET MVC is an entire framework. They're not really comparable, and often Razor is the "View" part of MVC. A very basic overview: Views are essentially what the user sees. While using MVC + Razor, these will be .cshtml files which are compiled and returned to the user per request. Controllers contain, among other things, the methods which handle web requests and route the user around the web application. Models are typically broken up into View Models, which are passed from the controller to the view, and Domain Models, which is a domain object (such as a table from a database).
What *can't* you do with Linq? (The above is both my question and the flair I want)
Well I can't help you, but this isn't C#, right?
Not much!
its C did i put this in the wrong forum? 
This is the Csharp subreddit sorry ^-^
Thank you for this. Just to add this was happening in VS 2012 for me the same way you described. I thought there was something that was changed in my environment. But it seems to be older versions. Meanwhile, VS 2017 didn't seem to have this issue. 
Isn't it likely that Request.CreateBar(x, y, z) needs to create a new object and calls the constructor there anyway? I mean I guess it's likely calling a parameterized constructor vs the default constructor, but still. At any rate I agree not changing is the safest route as we don't have enough context.
IMO, that's a bug, not a feature. If the return type of a function changes, I'd rather any callers be forced to see that and update their code, rather than hoping "var" makes everything magically still work.
I'm not that familiar with C. But in C++/ # Just make: int Multipleof3 = 3; For (int I = 0; i &lt;= 30; i++) { if(i == multleof3) { cout &lt;&lt; multipleof3 &lt;&lt; endl; I++; } }
Hi, I am expecting it to pass the credentials used in the windows service so thats why I used UsedDefaultCredentials
Hi, I am expecting it to pass the credentials used in the windows service so thats why I used UsedDefaultCredentials
There's certainly two ways to look at this, and both methods have their pros and cons. So it's usually down to personal preference on which is the better method. For me, I wouldn't call that a bug at all, but I understand why someone would.
What do you think VB 6 ran on? Tears and broken dreams?
See that is where I am stuck i have tried everything getting nowhere. Coding can be so painful sometimes LOL.
What's the program supposed to do? Is the user meant to enter numbers? Or random numbers? And then you run through the array finding the values?
lets say the user enters "abcdefghij" the ouput should look like this "adgj"
This is correct... I'd venture to say that most ASP.NET MVC apps out there use razor for the view pages. 
What does the program output? From what I see your program would be printing every fourth character. The modulus operator (%) returns the remainder of a division operation, so if you want to check for something being a multiple of 3 you would need to mod it by 3 and check for a zero result.
Have you ever seen it implemented? I would be interested in this.
Sorry I was on the train. "^/b*(Name|Surname|Address)/b*: [\\w\\d\\s]*$"
https://www.linux.com/learn/managing-ldap-command-line-linux Nope, but this looks interesting.
Got the result thank you all
I didn't say anything was interesting about it. I was just mentioning it as another example, of a case one would expect certain stacks to perform orders of magnitude beyond the others. **It was intended to SUPPORT your post stating that it isn't that unexpected that some stacks would perform orders of magnitude beyond the others.**
The data type still changes. Var is not like defining the return type of object. If the return type changed to something that is not compatible with the caller code the compiler will force you to see it. 
If it causes issues your unit tests will catch it. You are using proper unit tests right?
Not a fan of adding ambiguity to code
Nooooooooooooo. What in the fucking hell? 
I get it, but the issue is discoverability. The compiler error in this situation is non-obvious, and first appears like the new class is missing a member, rather than the return type having changed. The code is inherently less readable for a similar reason; without stepping into the dependent method you can't actually know the type of a local variable. For large codebases with many moving parts and potential NuGet dependencies to components built elsewhere, using var in this way can really cause a lot of avoidable headaches.
I put comments where there were issues. This will turn the input string 'abcdefghij' into 'cfi'. #include &lt;stdio.h&gt; #include &lt;string.h&gt; main() { char ch[30]; int i; printf("enter string\n"); // Your scanf needs to take a string not a char. scanf("%s", &amp;ch); for(i = 1;i &lt;= 30; i++) { // If you want every third character you'd want to mod 3 instead of 4. if(i % 3 == 0) { // You never used 'i' to get the element you're after from the string. char aChar = ch[i - 1]; printf("%c", aChar); } } return 0; }
A lot of code writing is subjective, may be equally functional a variety of ways, or may have different ways of expressing intent. But to me there's no obvious justification for the first way. Even if it's trivial or has no impact on performance - why do it?
I think this article does a good job of breaking it down: https://www.codeproject.com/Articles/24376/LINQ-to-XML Linq is much easier if you think about things in 'sets' instead of individual objects. Select nodes from a set, then from the result select some more nodes. Xml is a hierarchy, so you are continually drilling down into the children elements, building upon the previous select. 
thank you 
Basically, “What is the difference between a BLT, and Lettuce?”
Possibly unrelated in this case, but I'd also try resetting your settings and disable synchronizing them across machines when I get issues like this. In Visual Studio 2017 (that's all I have installed right now): Tools -&gt; Options -&gt; Accounts -&gt; Synchronize settings across devices when signed into Visual Studio (uncheck it) Tools -&gt; Import and Export Settings -&gt; Reset all settings For other Visual Studio versions they're likely in roughly the same place.
As the exclusion of slashes indicates, `GetInvalidPathChars` is about entire path expressions and not just directory names (which have the same rules as file names). `:` is of course valid in drive names as well as specifying ADS names, and the others are wildcard characters (`?` is additionally valid in extended length paths). [Apparently `&lt;&gt;"` are also obscure but valid wildcard characters](https://github.com/dotnet/coreclr/pull/3942) and their exclusion in the Core implementation is intentional.
`Bar foo = new Bar(); try { foo = Request.CreateBar(x, y, z); } catch (Exception ex) { // handle exceptions } // go along with life knowing that foo has a value `
Yes I have a wide stance :) I update my Visual studio during lunch break. So far only one surprise.
Yes I think that is prerelease for what will be officially released in 2.1.
What number do arrays start at?
I believe ClickOnce is what you are looking for. There are other options also but this is a quick and easy mostly 
A BLT is a parent object made of three child components; Bacon, Lettuce and Tomato; seasoned with additional metadata such as Salt or Pepper, stored between a "Crown" (BLT[0]) and "Heel" (BLT[BLT.Length -1]) Bun. Lettuce is an independent component, often coloured #753932 and labelled "Healthy", which is used in many food objects including the BLT. It has an automatic garbage disposal system that will destroy the object within a few days if not consumed. 
The other comments pretty much sum up what Razor is to MVC. However, if you mean Razor Pages, that is akin to MVC. Razor Pages puts all of the controller logic and models within the view. I have read that Razor Pages can allow you to quickly prototype. I suggest you take a look at [sites](https://stackify.com/asp-net-razor-pages-vs-mvc/) [like](https://msdn.microsoft.com/en-us/magazine/mt842512.aspx) [these](https://andrewlock.net/using-razorpages-to-simplify-basic-actions-in-asp-net-core-2-0-preview-1/) and make your own choice. Just know that you can use what you learn from Razor Pages and apply them to MVC. The major difference being the structure/architecture of the application. Razor Pages are a lot like Web Forms/Pages (which I really do not like, but that's besides the point).
There are also other situation which follow the same pattern as this where the variable is declared before hand because different conditional branching will set different values. var foo = new Bar(); if(expression) { foo = Request.CreateBar(1, 1, 1) } else { foo = Request.CreateBar(2, 2, 2) } return foo; This is usually only used when you need to keep the variable to use afterwards. I can't really tell if that's the case with what OP was seeing. If its exactly like OP laid out, then see the other comments.
Uh, are you sure you want Windows Forms? Sounds like you're writing a Windows service. That has support for things like auto-restart.
Won't solve "keep it running if it crashes". The user could just close the program or logout.
Happened to me on VS2013 this afternoon, repairing did not help, resetting the user profile allowed it to run, but I had to log in every time I opened it.
Wildcard characters are not valid path characters, tho. 
Just launch it from a simple launcher app and if it crashes open the other exe again ... did you want me to build it for him ? I offered had the solution in 2 sentence .. you wrote more and contributed less. 
&gt;The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names. The full set of invalid characters can vary by file system. For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote ("), less than (&lt;), greater than (&gt;), pipe (|), backspace (\b), null (\0) and tab (\t). You can use this method to do some pre filtering, but to be sure if a path is valid or not there’s no other way than to try using it as a path.
SecureString is not very useful. If the device you're running on is compromised, and it needs to read encrypted data, there are zero ways that you can protect that encrypted data when on that device. If the device isn't compromised, then why bother with SecureString? Looks like you are connecting to an API with Basic Authentication. You just need to send your credentials and it's up to your users to ensure that they haven't installed malicious software on their machines, and it's up to the API provider to ensure they have a good SSL certificate to protect data sent over the network.
Very likely yes. Although it may be written to use a non default constructor of course. I was purely being pedantic about what could be optimised away (or not!). 😀
On the same thing that C++ and Delphi ran. No where here states what you imply. https://blogs.msdn.microsoft.com/dsyme/2012/07/05/more-c-net-generics-research-project-history-the-msr-white-paper-from-mid-1999/ https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Components.PostAttachments/00/10/32/72/38/Ext-VOS.pdf
https://msdn.microsoft.com/de-de/library/system.xml.linq.xelement(v=vs.110).aspx https://msdn.microsoft.com/de-de/library/system.xml.linq.xdocument(v=vs.110).aspx The XElement and XDocument examples where huge for me. If you have a set of nested objects and yopu want to traverse them and get them into the shape of XML you can use that. 
How do you do dynamic dispatch in Java at all? Yes the covariant return types in Java are better but the client side declarations in generics with all the stars extends and so on that I already forgot are quite a burden
&gt;Bar foo = new Bar(); &gt;foo = Request.CreateBar(x, y, z); This doesn't really make any sense, as you're just creating a new bar and then immediately reassigning the variable to another, which means it's unnecessarily creating an object that will just immediately be thrown away anyway. If you drop the "= new Bar()" of the first line, then it will be equivalent to the second one, but in 2 lines instead of 1. The only time it makes sense to do this is if you need to declare the variable in an outer scope in order to be able to access it in that scope, when it is being assigned in an inner scope. If you are using the variable in the same scope it's being assigned in, then you should just use the &gt;Bar foo = Request.CreateBar(x, y, z); approach. However, unless it's non-obvious what's being assigned to the variable (which in this example it isn't), you should probably just use the "var" keyword instead of specifying the type name. Typing out the full type name for every variable being created and assigned on the same line will just result in overly long lines of code, reducing readability, and likely also make it harder to refactor (though I haven't tested how well ReSharper or VS deals with this in its automatic refactoring functions, so I could be wrong on that one).
&gt; Sometimes it gets tricked and thinks it is unassigned if you assign it in some weird scenarios, like an if or a switch Specifically, it will complain if the variable isn't being assigned in every possible code path.
&gt; and they use the first version all over the place In that case, it sounds like it was either written by someone who didn't know C# very well, or they're doing something "clever" in the object's constructor that's altering state outside the object itself. Either way, it's bad.
Maybe it's a full-screen GUI app that should always be running? But yeah, in all honesty, Forms is probably not a good idea regardless. While not formally deprecated, it's outdated technology, and you're probably better off using WPF or some HTML5-based GUI. Or possibly Xamarin.Forms - I have no personal experience with this one, so I can't say exactly how it compares to the others, but from what I've seen it's similar to WPF. The only reason I can think of to use Windows Forms would be if you require it to be able to run in Mono, which AFAIK doesn't support WPF.
Do u like to cook a meal, and throw it out so you can cook another meal. Neither do I. Don't do the first method.
You'll need a windows service running in the background as well. It could listen for connections for updates etc and relaunch the exe if it closes.
Have you had a look at azure functions? https://azure.microsoft.com/en-us/services/functions/
My DreamSpark subscription will end in a few weeks, and I'd rather not rely on Azure too much.
If you don't expect much traffic, AWS EC2 (server) and RDS (database) is free. However, costs can stack if you happen to experience high traffic. Note that if you don't intend to make it a server, but just be able to start an application, any EC2 instance will do. You don't need a .NET server, if you just install build tools and mono.
This method is not even that useful for deciding whether a filename is valid or not. For example, on Windows, these are all invalid filenames: ... nul con.txt prn\file.txt 
: is a valid path character, Example c:\ Try GetInvalidFilenameCharacters() 
Zero.
Apologies for my slow reply, thank you all for your input. I am wondering how I would go about using the algorithms already set up and converting that to C# or would that already compile in C#? And how would I then display the result in a Picture Box? I have been using Windows Forms programs for a few days and I believe I would need the paint method? Is that correct?
 Bar foo; if (expression) { foo = Request.CreateBar(1, 1, 1); } else { foo = Request.CreateBar(2, 2, 2); } return foo; Alternately, you could return early and omit the variable entirely, or use the ternary operator to condense the if to a one-liner or something. You should only need to assign foo a value in situations where the static analysis cannot verify that it would be otherwise initialized before first use. In most cases, that's a sign that you ought to consider refactoring or restructuring your code.
AppHarbor supports console apps (they call it background workers I think) and has a free tier.
Ah, so I tried that, but then my issue is that it prevents you from typing .- as well, which I might need in the input. 
One solution might be to use [Kiosk mode (PDF)](http://www.limnor.com/support/kiosksetup.pdf). This will have Windows boot directly to your app and prevent any other interactions with the OS. Automatic updates can be more problematic, depending on what access the clients have and how many there are. 
$5 linode subscription will give you a Linux box you can run .net core console apps or website as on.
Unless you're running the command/function **a lot***, as I understand it Azure Functions are free. &gt;\* The first 400,000 GB/s of execution and 1,000,000 executions are free.
This is not a question of style, the first version creates an instance of Bar that never gets used. 
The only time I've seen this is VB programmers shifting to C#
Forgot to link the code, apologies. https://pastebin.com/0KYaNEZY
You may be looking at information regarding ASP.NET Core which gives you the option of using MVC Views and/or Razor Pages. Both use the Razor view engine but whereas MVC uses the Model-View-Controller paradigm, Razor Pages use a code-behind file very much like classic ASP.NET Web Forms which is more page-centric. If this is indeed what you are talking about, here's one guy's opinion comparing the two: https://stackify.com/asp-net-razor-pages-vs-mvc/
I like to use verbatim strings when dealing with things like regex. Just add '@' before your string, so that it looks like `@"my_regular_expression"`, and you won't have to escape special characters except the double quotes, which need to be written twice to not be confused with the end of the string. Your regex would then look like this @"^\b*(Name|Surname|Address)\b*: [\w\d\s]*?$"
Mvc IMO
Also, learn asp.net core. It’s the future of asp 
Is there a specific reason you need it to be a cloud solution? A raspberry pi can run .net core very easily.
You already posted about this on this same subreddit [3 days ago](https://www.reddit.com/r/csharp/comments/79nkor/converting_fractal_image_generator_from_java_to_c/).
Personally I'd go with a ResultObject type solution. The benefit here is that consumers don't have to separate their code into two paths because you've defined some responses as errors. For example, if you try to start a service that's already running would you consider that an exception worthy error? I'd rather get that information back in the ResultObject so I don't have to have my Exception handler decide it's that it needs to extract the result and pass it on as a "non error" I'd reserve the exceptions for truly exceptional stuff. If WMI is on fire and not returning anything except the screams of its instruments that would be worthy of an exception. Also think about what your API is doing and how it exposes its functionality. Avoid broad general purpose methods, consider what the API consumer really wants. If they have to wrap your API in an API of their own just to get meaningful results, that code should probably be in your API. Don't take this pseudo example too literally. I don't know your project and it doesn't necessarily fit. The three key take aways are that YourApi is doing something specific (StartAService) not generalised. Second, the exception is exceptional, WMI is dead. Third, the result has translated the specific results into useful information. If StartAService couldn't start a service because "access is denied" this can all go in the result. ServiceControlResultObject result=ServiceControlResultObject.Empty; try { result=YourApi.StartAService(...); } catch(Exception e) { ... Wmi is broken, this program isn't going anywhere now } if(result.ServiceRunning) { // yay! } As a counter argument, you could have StartAService throw specific exceptions if it can't start, is already running, perhaps ServiceException and have a separate WmiOnFireException for system failure cases). The specificity of the API methods is the key here. StartAService good, GeneralisedWMIProxyMethod bad.
&gt; as long as they don't cause too much trouble. Oh, wouldn't want to make life too hard on ya would ya? Here is a solution. Don't use C#, you aint never gonna touch the dang ceiling let along the clouds in that tech graveyard. smh.... FP, ever heard of it. [Some Help](https://en.wikipedia.org/wiki/Functional_programming) 
Heroku with .net core 
Check out GCP's [free tier](https://cloud.google.com/free/). You get an [f1-micro](https://cloud.google.com/compute/docs/machine-types#sharedcore) VM for free each month.
 I was in the room when they unveiled beta 2 of VB.NET. Microsoft paid for my trip. You never even used it. One of us has more information about what was going on at the time.
i think you need to start i at 0, and make a special case for the first character to be shown (not sure how %-division handles a zero-division, but it might always return 0? you could easily test this though and build a special case for i == 0 in your loop, or better yet, make the special case outside the loop so it doesn't get checked.) however this might sort it. that, and changing the "i % 4 == 0" to "i % 3 == 0". i've just a little skill in C#, and basically none in C/C++ though, so i could be all wrong :)
I have seen other application have a secondary application and it's job is to only ensure the primary application (Windows Service) stays up and running. It also installs updates when necessary. The secondary application should be extremely stable and have minimal functions. As others have stated, you should not use Winforms it's out dated. Someone mentioned windows service as the primary application, i have never seen this and googling, this is not possible. https://msdn.microsoft.com/en-us/library/windows/desktop/ms683502%28v=vs.85%29.aspx?f=255&amp;MSPPError=-2147217396
Sign up for visual studio dev essentials, which is free. It includes $25 per month azure credit for a year. I've been using it for past that time to host some personal projects and databases and I have yet to be charged for anything. I guess whatever I'm doing on there is either included in Dev Essentials or costs nothing for some reason
In the usual .net guidelines, you will find a (sound IMO) advice: if a function can't do what it was asked to do, it should throw. The reality is: in a **vast** majority of cases, when I am calling X other functions to do something, if any of them fails, I can't do my something either. He who calls me is in the same boat. If that is so, throwing an exception is expedient, incessant asking "did this work?" is not.
https://i.imgur.com/jjdqSsb.mp4
brilliant
my answer still stands, PictureBox, Bitmap, Graphics. those are the classes you need to display stuff
Honest question because I'm not sure if you are trolling or really believe that, where did you learn that or what are your sources? 
&gt; Razor Pages puts all of the controller logic and models within the view. You still have the option to separate your business logic out into an independent tier and only have UI framework logic in the razor page's code behind. MVC's framework structure does a better job at strictly enforcing this whereas with Razor pages the dev needs to be more self-disciplined and enforce Separation of Concerns on his own.
I would think in that case that the Request.CreateBar() method is still going to make use of the Bar constructor, meaning those static field initializations, tasks etc... will still be performed.
You just add the characters you want to the group that captures the input. So `([\w\d\s]+)` becomes `([\w\d\s\.\-]+)`. Note that we escape (aka `\`) the characters `.` and `-` because they have special meaning in Regex. But we just want them to be taken *literal*.
Don't if you need core windows api functions in your application as you will be SOL.
What Corey said. If you can, use core though. It’s faster and more modern (And easier to use)
SecureString is a bit of a disappointment. I get the idea, but I can never use it where I think I should. Maybe it's still a work in progress.
Sounds like you need to deploy it as a ClickOnce application, or other third party installer/license managers. Otherwise you create your app as two separate applications, one a boot loader and the other an executable, then the bootloader just needs to pull down a version if it exists somewhere on an accessible FTP site. You could implement it as a service instead, which periodically checks a FTP site and similarly downloads the latest (antivirus may not like this). Instead of checking a folder for a higher version, you could have it triggered by a webservice call. These all can get quite complex, so its probably worth investing in the time to get the hang of ClickOnce or a third Party Alternative (squirrel, SimpleUpdater, etc) 
 char ch; int counter=0; printf("Enter some text and I will shorten it for you. \n"); printf("Enter a %c to stop.\n\n", STOP); ch = getchar(); while (ch != STOP) { if (counter % 3 ==0) { putchar(ch); } counter++; ch = getchar();
got it to work here's the format thank for the help.
&gt; Private Protected C# 7.2 https://i.imgur.com/QONVIyz.gif
 ref var r = ref (arr != null ? ref arr[0]: ref otherArr[0]); Really? There's a need for this?? Oh Dear God.
I try to stay impartial, but yea, I was thinking the same thing when I saw that.
That was awesome. 
Web Forms is awful..
Seems like the people here know more about it than me. It just looks strange to me that multiple frameworks designed for the same purpose have a huge performance difference. If sending plain text is so simple than why is the difference in performance so massive?
If that's true than the benchmark is comparing eggs to lemons imo.
As mentioned, the default keyword is currently broken, so it shouldn't be used. &gt; public Task&lt;Order&gt; GetOrders(int? limit = default) Its always safe to use an explicit null instead of default(typeThatCanbeNull) or just "default"
Checked that one a few days ago. It seemed *nteresting, but it quickly turned out that in my country it's only available for companies.
I already have a VPS where I'm hosting my web apps, but that's not what I'm looking for. I don't need a fully-functional OS for this; just something that I can execute some code on.
That's the problem with Azure. Their plans and subscriptions are too complex for just *playing around with the service*. 
Checking out now. Looks to be somewhat limited, but then again, I don't need that much features anyway. Thanks a lot!
&gt; something I can execute **.net** code on. Right, so you need a fully functional OS. 
I generally use the `Process` class instantiated. Maybe try working with that. https://msdn.microsoft.com/en-us/library/system.diagnostics.process%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396
I'm not saying it's good, I'm saying it's possible. We have no idea what the constructor is doing.
I happened to work for a Portuguese Microsoft Partner company, invited by Microsoft Portugal to be a .NET alpha tester. Their invite was critical for us to pivot from porting our home built application server into J2EE, to .NET instead. The people behind that project were the founders of OutSystems. We had .NET CDs before they started to distribute .NET out in the open. The MSDN Hypertext help was full of missing documentation or partial information written in red stating which parts were bound to change until the beta or official release. I still might have a few of those CDs in some box lost in the basement. From my side no one from MSFT ever issued such statement.
Eh, EC2 isn't free?
There's a free tier that gives you a certain allowance per month
You need it if you want to conditionally initialize a ref local variable like shown. Currently, you cannot reassign a ref local variable, so you have to be able to specify it in one expression.
The name is weird, but the better name already had a meaning. You use it when you want to enable inheritance, but not outside your library.
Because the request still has to go through the full framework pipeline (I mean this is what testing a framework means). Then a runtime and language like JS lacks tools to optimize certain operations. For example you might want to inspect the bytes in the input directly but JS doesn't have the concept of a byte array until recently so maybe the framework does not use it. Compiled languages also get an advantage from additional compile time information while dynamic languages must check the type of the arguments and so on.
For a year...?
Yeah forgot to mention that bit but if the costs are a real issue you could just keep signing up with new accounts every year
Well, what framework are you using? What is `ctv`? What is `combatDrillsTable` and `DeleleteDrillAsync`? Likely that framework is throwing the exception you get because it can't find a matching id to delete.
Came here to mention this as well, appears it's the "author:" part that's throwing it off, if you just search titles they'll come up - [See here](https://www.reddit.com/r/csharp/search?q=title%3A%28%22Come+discuss+your+side+projects%21%22+OR+%22Come+share+your+side+projects%21%22%29&amp;restrict_sr=on&amp;sort=new&amp;t=all). Also appears to work with the author portion if you split it into author:x OR author:y - [See here](https://www.reddit.com/r/csharp/search?q=title%3A%28%22Come+discuss+your+side+projects%21%22+OR+%22Come+share+your+side+projects%21%22%29+author%3AItzWarty+OR+author%3AAutoModerator&amp;restrict_sr=on&amp;sort=new&amp;t=all). 
I remember Mafia Wars, there was a similar Vampire Wars one and so on. Back in the days of livejournal (and deadjournal).. Facebook was definitely not around yet, and Myspace was just getting big.
Still, it forces you to give up your credit card info right after the registration. I'd rather not do that, because then the costs will definitely stack up.
Pretty much, yeah. I need a decent internet connection.
So once we get non-nullable reference types, what will `class! x = default;` result in or will that just not compile? imo the whole `default` feature would be far more useful if you could implement it for your types.
Just like in a real command-line argument, paths must have double backward slashes, like this: C:\\Windows\\System32\\tzutil.exe I invite you to check the [official documentation on MSDN](https://msdn.microsoft.com/en-us/library/h6ak8zt5.aspx), it's really well done and often contains examples and useful remarks.
The last thing I heard was that `default(T)` would still be `null` for reference types, so that would produce a compile error.
If you’re in the States you can use privacy.com for virtual, limited use cards. 
You actually don't because you can create a helper function public void M() { // other code to set arr/otherArr in scope // ... // local function (change array types as needed) ref int Foo(int[] a, int[] b) { if (a != null) { return ref a[0]; } return ref b[0]; } ref var r = ref Foo(arr, otherArr); // ... } It does make this unfortunately relatively common task (in the rare wild code that uses `ref` locals) ever so slightly simpler though... Code that abuses `ref` locals can look very foreign to most people expecting to read C#.
The CLR names, which make proper sense, are “family or assembly” for “protected internal” and “family and assembly” for, *sigh*, “private protected”.
Oh god, please no. The more custom things you can implement for your types the less you know what’s going on when you read “default”.
I don't understand why mu Arguments is not working. If i do "/l" I can see the window popup and display the timezones, but when i do the below, it's like i am entering it wrong...can someone else try? Process myProcess = new Process(); myProcess.StartInfo.FileName = "C:\\Windows\\System32\\tzutil.exe"; myProcess.StartInfo.Arguments = "/s " + "Eastern Standard Time" + ""; myProcess.StartInfo.UseShellExecute = false; myProcess.Start(); 
Short answer is you can't. Long answer is you can create a custom json parser. Something like this. https://stackoverflow.com/questions/8030538/how-to-implement-custom-jsonconverter-in-json-net-to-deserialize-a-list-of-base it would probably just be easier to use reflection after the object is deseralized and read all of the properties to a list. https://msdn.microsoft.com/en-us/library/kyaxdd3x(v=vs.110).aspx KeyValue&lt;string,float&gt;[] GetCurrencies()
But then it’s certainly not a question of coding style. 
Azure web job?
&gt; Using var is fine if you can be sure of the type by looking at the right-end of your statement. If you can’t, use the type name. I disagree, but as you sort of said yourself it’s a matter of taste. I always use var, and I rarely need to know the exact type of something by looking, I feel. 
But if there will be a compile error anyway you don’t need to call this a bug on top of it. You may not like it, but it’s a feature. 
No need to be snarky. 
&gt; you're just re-assigning the foo variable to use a new Bar instance... the first line is pointless. therefore, use the second style *Assuming* functionality is unrelated to coding style and is dangerous.
Yes. If it weren’t you’d force programs to waste time and memory on initializing useless objects all the time, only to throw them away immediately. 
That doesn’t make sense. Both would be triggered just the same by that function also initializing an instance. The first version is wrong unless a *very special case* calls for it, but this was a general question. 
I prefer var. When your class names get bigger than three letters, in my mind it makes it more readable. If I need to see the type, I should be able to hover over and see. var medications = getPatientMedications(patient); IEnumerable&lt;PatientMedications&gt; medications = getPatientMedications(patient); It's especially helpful when you get into crazy types. var dataFinderStrategy = getDataFinderStrategy(); var data = dataFinderStrategy(dataDictionary); Func&lt;Dictionary&lt;int, MyData&gt;, MyData&gt; dataFinderStrategy = getDataFinderStrategy(); MyData data = dataFinderStrategy(dataDictionary); Maybe you want to see those kind of things, but when I'm working with something constantly, at some point it just gets in the way.
I would look into azure web jobs. Or azure functions.
I worked at a place that opened SQL connections in WinForm page constructors. 
... That gives me the sads. :(
Are the clients going to be on separate networks? If so, you would have to have firewall rules to direct the traffic to the correct natted host. 
You may be looking for "hole punching".
Huh, that's a really good question 
Do those work like NETELLER's prepaid cards? Because I tried using that recently and almost all services reject them ;/ Tried using it to pay for Discord Nitro, Spotify, Apple Music and a few other things and it never worked even though it had enough funds. And no, I'm not from the States.
Thanks! Exactly what I'm looking for
If you're using Newtonsoft.Json you can do var quotes = JObject.Parse(json)["quotes"] as JObject; foreach(var pair in quotes) { pair.Key // this outputs USDAED pair.Value // This outputs 3.672299 } JObject is a great class for getting data directly from raw JSON. You can read more about it [here](https://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_Linq_JObject.htm)
As someone who did (albeit very little amount of) Java, I never felt the need for a `var`. So I still use the class name whilst declaring variables. I prefer typing the class name first, then letting the IDE do its thing of typing the constructor.
Exactly what I needed. Thanks!
I think the new ref stuff is great for people with high-performance requirements. Unfortunately using a struct array is the only way to know that you've got a contiguous block of memory allocated. Classes instantiated into objects are strewn here and there throughout heap memory. In practice, they may or may not be sequentially allocated. But there are no guarantees. So if you're performing some kind of computation on a large number of objects then there's a good chance that you're suffering a lot of cache misses and the associated overhead.
Are you trying to get console output from whatever you are calling? If so, you have to somehow link it's standard output with your standard output.
In the current version on try roslyn public void M() { // causes warning CS8600: Cannot convert null to non-nullable reference. string s1 = default; Console.Write(s1==null); //no warning (due to dammit operator): string s2 = default!; Console.WriteLine(s2==null); //no warning (due to correct type annotation): string? s3 = default; Console.WriteLine(s3==null); } https://sharplab.io/#v2:EYLgZgpghgLgrgJwgZwLQDk4BstWFiAJQkiQDsBjCAFQE8AHFAGgBMQBqAHwAEAGAAm4BGANwBYAFDcAzIIBM/AML8A3pP4bBs7gBZ+AWQAUASlXrNF4QORD+AXn4sSUbDBH8A9B/4B3KAjIASzIAcyUAZQAOADZeXhAlKDIyAHsYfgoUsgA3CAR0smwsfhgU/lSyVEKcPAJ+JFIISggAOnMLDUUs5BSCFoB1BECYCEMbOztqrGNxCQ7NK35kBQcnMBcsGABCWfmNYQBOMbkJqZn2jqsAfiXZVedXXb3DselTovO5zQBfSW+gA== 
I am trying to set the timezone on Windows 10 to EST via C#/.Net
I think though that it's less about the device being compromised and more about reducing the attack surface. We're mainly considering this for scenarios where there's a crash and a dump gets created and sent over for analysis. Most of the time on this server there shouldn't be any credentials being processed. So using a secure string lowers the probability that a dump contains private customer data which we as devs could get access to. I agree that it might be overkill. 
Yes, I posted [Shawn Wildermuth's class](https://www.reddit.com/r/csharp/comments/79o560/shawn_wildermuths_course_on_aspnet_core_2_and/) just the other day here but now we have a book out as well for people that prefer reading. Looks like a wave of .Net Core 2 material is finally incoming!
Why not start the exe with the parameter instead of cmd? 
How would I go about doing that?
It's only broken in that specific case, no?
If you could take one feature out of any other language and add it to c#, what feature would it be and from what language?
Records from F#.
.i
If I remember right, the scope of the issue is limited to nullable value types. 
With it all being API and MVC now I really think putting MVC in the name just serves to confuse people for no real reason.
 Dictionary&lt;string, System.Drawing.Color&gt; valueColorMap = new Dictionary&lt;string, System.Drawing.Color&gt;() { { "DATA1", System.Drawing.Color.Pink}, { "DATA2", System.Drawing.Color.Blue} }; label5.Color = valueColorMap.First(k =&gt; k.Key == ds.Tables[1].Rows[0]["Column2"].ToString().ToUpper()).Value;
The `async` keyword only means "this method can use the `await` keyword", nothing more. The `await`keyword means "wait for the completion of this task in an asynchronous manner", i.e. without blocking a thread. Neither of them means "run this on a different thread", asynchronous is not equivalent to concurrent. That is what `Task.Run()` is for.
But why would I "wait" at all? If the Task.Run() is kicking off a thread, why would I need to "await" for anything? I've written quite a bit of multithreaded code (by simply kicking of new Thread() objects) and it's all pretty straightforward. It just seems like the Await/Task thing has actually complicated something that was pretty simple, but Microsoft is pretty proud of it, so I must be missing something. Not having to write my own cancellation objects is a small benefit, but until I can get my head around their choice of when a Task is and isn't a task (eg: a method returning the task itself vs. returning the return value of the method) and why they chose to say "await" when you're not "awaiting" it seems like spinning up threads is considerably easier.
It's taken me a while but your advice has gotten me on the right track, thank you
Await allows you to run two things at once. You could also genuinely multi thread your application if you wanted to. Im on mobile so examples are hard, ill edit this comment later, but: Lets say I need the data of a large file at the end of function X(). I can call `ReadAsync()` on the file at the beginning of the function X(), which returns a task. Awaiting that task will return the files data, the function is already being ran in the background while X() does other things. Once I say "await thatFileTask", the X() function now depends on the task to finish and will block until its finished and the data has been returned. Let me know if that explanation isnt good enough, i can update it later with a better example on my pc
If you define your quotes property as a Dictionary&lt;string, double&gt;, it will be mapped correctly, without the need for reflection or JObject.Parse.
I havent used web sockets in C# much, but can you potentially use an HttpClient instead? Thats how I do all my 3rd party API requests
I will give this a try tomorrow.
&gt;But why would I "wait" at all? Because you may need a result from `Task.Run`, need your application to be in a specific state before you continue, or want to catch exceptions it throws. If you don't care about what happens to the other thread, you don't need to await it. &gt;I've written quite a bit of multithreaded code [...]. It just seems like the Await/Task thing has actually complicated something that was pretty simple `async`/`await` is explicitly not about multithreading, but about awaiting asynchronous operations without blocking a thread. Some of those uses may involve parallel threads (like `Task.Run()`), but others may not (like `Task.Delay()`). &gt;why they chose to say "await" when you're not "awaiting" You are awaiting. The method pauses until the awaited task completes, and then continues. That's what `await` does. &gt;it seems like spinning up threads is considerably easier Generally, `async`/`await` significantly simplifies the code compared to *equivalent asynchronous* code written without it. You just seem to be comparing two different things here. As an aside, I should note that what you're doing above is considered bad practice by many. Your method "pretends" to be async but is actually just a synchronous piece of code wrapped in an async layer. Either the code should be fully asynchronous (e.g. with `Dispatcher.BeginInvoke`) or just be fully synchronous and let the caller decide whether they need parallelism and wrap it in their own `Task.Run` or whatever.
My difficulty is that this: await Task.Run(() =&gt; { const int timeoutInMilliseconds = 1000; Thread.Sleep(timeoutInMilliseconds); count--; intermediateAction(count); ExecuteAsync2(intermediateAction, endingAction, count, cancellationToken); }); Runs asynchronously. It "continues" despite being told to "await" the Task.Run() call. Logically, it would seem to me that a Task.Run() in and of itself should be asynchronous. (eg: Create a "Task" and "Run" it.) However Task.Run() is *synchronous* unless you "await" the returned Task? My head just can't wrap around that. 
The Task.Run continues to run and doesnt block the calling CancelAsync function?
There are occasions where it makes sense to break apart a longer fluent chain. So if you had: `var foo = Request.CreateBar(x, y, z).DoSomething().DoSomethingElse();` But you're having code issues, you might split that apart into ``` var bar = Request.CreateBar(x, y, z); var something = bar.DoSomething(); var foo = something.DoSomethingElse(); ``` The latter makes it easier to step through and debug line by line, but the fluent chain version is more succinct. Especially if you don't care about what `bar` and `something` actually are.
1024 * 64 bytes = 65.53600 kilobytes
Correct. Here's the block of code I'm playing with: public void Cancel() { var task = CancelAsync(); Application.Current.MainWindow.Title = "Foo?"; } private async Task CancelAsync() { await Task.Run(() =&gt; { if (TokenSource == null) return; TokenSource.Cancel(); TokenSource = null; Dispatcher.Invoke(() =&gt; { Thread.Sleep(100); IsBusy = false; Application.Current.MainWindow.Title = "Bar?"; }); }); } When "Cancel" gets called, it calls CancelAsync. (If you don't put the var task= you get a warning, which is a whole different can of worms). Then, the Application's Title is IMMEDIATELY changed to "Foo". After the 100ms, it gets changed to "Bar?". So obviously, the application continues to run (unless, of course, I were to "await" the returned task. In which case THAT would make sense.) However, if I remove the "await Task.Run()": private async Task CancelAsync() { if (TokenSource == null) return; TokenSource.Cancel(); TokenSource = null; Thread.Sleep(100); IsBusy = false; Application.Current.MainWindow.Title = "Bar?"; } This is now a blocking method, and the title will end with "Foo?". A "task" is still returned, but it's anyone's guess where that's being created. What's happened is we have a HUGE code base, and people have been using task/await willy nilly all throughout, and everything's just screwed. We have all kinds of weirdness happening when someone cancels a task. It's on me now to fix it, so I've gotta figure out WHY Tasks and the whole "async/await" and cancellation tokens work the way they do in order to start scrubbing the mess. But none of it makes logical sense to me yet. I won't even go into the difference between Thread.Sleep() and Task.Delay() at this point... 
&gt; As an aside, I should note that what you're doing above is considered bad practice by many. Your method "pretends" to be async but is actually just a synchronous piece of code wrapped in an async layer. Gonna need that one clarified. Which method?
The `CancelAsync` method, see my edit shortly before your post for an alternative. Also [this blog post](https://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html). This isn't directly related to your specific question, just general async/await best practice.
Your first method doesn't need to be marked as async - it doesn't use await, and it can simply just return the task. I also have a background where the style was "just created a new thread", like you. Await/async try to make it so that you don't need more threads to block on a background task. What's the point of blocking on File.Read? While the disk is busy, no cpu instructions, anywhere, need to run. So why have a thread? What if, when your call stack says "I'm about to block for this file read", instead it starts the file read, stores off its entire state (call stack, everything else that comes after the read) and then returns up to some loop. Then that thread is free to do something else for a while. Later, the OS will pop some semaphore when the read is done, and will schedule a thread to signal the process that the read is done. Dotnet catches that, and handles it by running the rest of your method's code by remembering what its context was via the Task it returned halfway through executing the method. Blammo, the code after the await continues running as if the await never caused us to leave that method in the first place (this is where the design borrows from co routines). You only need a thread for as long as you are actively doing work. When you're just waiting for something else, you're not actively doing work and you can give up the thread.
What do you mean at the same time? You can most likely find all of these things individually and then wrap them around a single public call
Do you know what a callback is? That thing when you pass a function to something so that when it completes doing its thing, it calls your function? The idea is that you don't know how long that thing takes for it depends on something external to you, like an API call or a database read or write, or some other IO operation. You need to do something when it ends, but since you don't know that, you pass it a function and expect it to call it. Think of javascript's timeout function. timeout(1000, function () { alert('x'); }); You gave it a function which will be called when the timeout is complete. Then it progressed to promises, where you have a nice fluent syntax which is more readable and makes more sense and you do this kind of thing someServive.getSomeData(x, y, z).then(function (response) { // do some stuff return otherService.doSomeThing(); }).then(function (otherResponse) { // do more stuff return somethingMaybe; }); // and you can keep chaining promises And you can chain those promises instead of passing functions as parameters to them to get called back. The above scenario would be unreadable if written using callbacks passed as parameters. Promises are more convenient and readable way for writing callbacks. But someone said, I don't want to chain promises like that anymore cause it bloats the code. It runs sequentially as if it were synchronous but it needs to be written this way so that it doesn't block. So C# came up with syntactic sugar to write such code in a manner that looks more like synchronous code, which is by using the _await_ keyword. So instead of something like javascript's someService.getSomeData(x, y, z).then(function (response) { // some more things }); you have a more elegant way as var response = await someService.getSomeData(x, y, z); // some more things
Interesting, thanks!
This happens because you don't await the result of `CancelAsync()` in `Cancel()`, so the execution of `Cancel()` continues long before the `Task.Run()` is done. Which is why the compiler gives you that warning that you so cleverly avoided.
Oh! So whats happening is when you call ``` var task = CancelAsync(); ``` `task` isnt blocking the Cancel() function, and is still running asynchronously. `CancelAsync` is for sure getting blocked asynchronously by its `await Task.Run(...)` call, but `Cancel` isn't getting blocked by `task`. Since `Cancel` isnt async, we can't call await to block `CancelAsync`, but we can still tell the task to finish synchronously i.e blocking `Cancel`. ***Solution:*** Replace ``` var task = CancelAsync(); ``` with ``` CancelAsync().GetAwaiter().GetResult(); ``` forcing the task to get the result before continuing.
This is flickering the lightbulb a bit for me. Thanks! 
The thing is I don't *want* "cancel" blocked. I want it to kick off the CancelAsync() and move on. In theory, the CancelAsync() should then "cancel" the CancellationTokenSource, and further Tasks down the line that would normally get kicked off after the fact shouldn't run at all. The "Cancel" doesn't need to block for that. I'm just trying to wrap my head around why a method with the signature of: private async Task CancelAsync() Is a ***blocking*** method UNLESS there's an "await" *somewhere* in it?
WPF and MVC (would probably be MVP as MVC is more for the web based approach). Why don't you show MVVM since it fully embraces well the concept of data binding that WPF supports?
Async generally is for I/O bound (or at least non blocking) operations. So reading from a database or downloading some content from an API. All it really means is 'do this stuff in the background, then let me know when you're done'. Whilst the task is happening the CPU isn't really doing anything, i.e. it's not constantly polling to check the task is done, but instead is waiting for an interrupt. The CPU is then free to do other stuff in parallel whilst the task is happening, which is where the confusion between parallel and async comes from. If you run CPU bound work in a task then it becomes much more like a thread where the CPU will kind of round robin and do a bit of each task untill they're all done. But this really defeats the purpose of async as the CPU is kept busy instead of being freed up to do other stuff.
I am glad. Many people make the mistake, as others have mentioned here, that they will think of async/await as a fire and forget mechanism. It is nothing like that. It's syntactic sugar for callbacks or promises. The exact opposite of fire and forget. Where you need to wait for the operation to happen, or you need to know what its result is, before you can continue, in a very similar manner to normal synchronous code that we usually use. But simply because such an operation can happen somewhere else, we want to free up our thread while we wait, such that it can do other things (like in an Web API it can serve another request). In javascript, if you didn't do it like that, your browser would freeze while it waits for a response from the server. We use callbacks and promises because we want to allow the browser to let us do something else while we wait for the response.
As far as I came to understand async/await is for saving threads for i/o-bound operations. Like if your web server has to process a lot of requests, each of them take up a thread. If you run out of available threads, people gonna be waiting to get a response. But if you architect your web code to run async (assuming it has some i/o-bound operation that’s eating most of the request time) whenever your code reaches that op, it’s gonna let that do whatever it needs and in the meantime return the now-free web thread to the pool so it can process other requests. When the long op finishes, the same or other thread will pick up that work again from where it left off. Similarly mobile devices also have a thread shortage, so most Windows Phone apis forced you to write async code. The thread can go do something else while the awaited web request finishes for example. So it’s not really for calculating what’s 2+2 asynchronously, because if you do task.run, you don’t gain anything. You let go of one thread but take another to do the math. 
I glad it was helpful :) Thanks for the feedback.
Its not blocking, at all. Async tasks always run asynchronous and **do not block until you tell it you need the result of that task with await**. Tasks only block the calling function when you `await` them.
This is a pretty in depth guide to async/await that I generally refer to which may help: https://blog.stephencleary.com/2012/02/async-and-await.html
&gt; Is a blocking method UNLESS there's an "await" somewhere in it? An `async` method always runs synchronous until it hits the first `await`. After that it returns the `Task` object (the code to create that is added by the compiler). The rest of the method will then be resumed later when the awaited task completes. Again, `async` does not mean "run this method on a new thread". It just means "allow me to use `await` here".
I think it should least be named .NET Core 2 MVC, not .NET Core MVC 2.
The hardest part of these courses is getting through the basics without skipping ahead in case there is a pearl in there you don't know about.
I don't think this is the cause of your issue, but you should be getting the number of bytes from `wsReceiveResult.Count`, not `receiveBuffer.Count`, otherwise you might write additional garbage to the stream when final part of the message is smaller than the buffer size.
[removed]
In C# UNC strings have to have double back slashes, not single. That's what bother me between C# and VB.
Or .NET Core MVC 2nd Edition 
I thought the 2 was representative of the .NET Core version, not the edition of the book. If that was the case then this would be of .NET Core 1?
The first one was called ".NET Core MVC" without a version number, but he used ASP.NET Core 1.1
You on Windows 7?
Lol :D Nah, on Windows 10.
Ok. Apparently it's extremely glitchy on 7.
Try removing any extensions.
Already did that. I reinstalled WIndows before to check if that helps, and when it didn't, I turned off most extensions. Still the same problem.
It still works on 7? :O
You can run asp.net core on either .net core or .net framework. The book should be called "Pro ASP.NET Core 2.0"...but is technically possible to use ASP.NET Core 2.0 without the MVC middleware, so maybe he was making it explicitly clear that this book covers MVC.
He has made many versions of this book that go back to MVC 4 or 5 (can't remember offhand). ASP.NET Core 2.0 can run on either .NET Core 2.0 or on the full .NET Framework...the book should be named after the ASP.NET Core version and not the target framework, otherwise it will just further confuse things.
I came to the comments just to see what the deal with the version was. I'm not familiar with core but I've used ASP.NET MVC 3 and 5.
CsvHelper is a good library for writing CSV to any streams (like FileStreams) and it has .NET Standard support (which you can reference from Core). You can wrap a stream in an encryption stream (I think these are in .NET Standard, and examples can be found around online), but the implications are not trivial...you'll need to know about initializing and storing encryption artifacts properly (certificates, secrets, salts, IVs, etc...).
Does HttpClient support web sockets?
I start with a folder named for the solution. Initialize it as a git repository. Start with four files: - [.gitignore](https://github.com/github/gitignore/blob/master/VisualStudio.gitignore) - README.md - [CHANGELOG.md](http://keepachangelog.com/en/1.0.0/) - CONTRIBUTORS.md Inside that folder, I create two folders: /src and /docs. Inside of /src, I create my Visual Studio solution and each of the projects go into a folder with the same name as the project. I almost always follow the 1 file = 1 type rule. Major exceptions are when I'm creating private classes (which are nested in another class) or have non-generic and generic interfaces (then they go in the same file together). Keeping copies of DLLs in sync is a headache. But so is package management. So I either use project references (for closely-related code) or have a local feed for NuGet references of shared libraries I've developed. Organizing your types into folders by their type rarely makes sense to me. Folders should definitely map to namespaces, though (so, for instance, type FooProject.Bar.MyType would be in /src/FooProject/Bar/MyType.cs). A project should always share the same top-level namespace (so "FooProject"). Creating namespaces beneath it is encouraged ("FooProject.Bar"). Creating other top-level namespaces in the same project is something I'd discourage (like having "FooProject" and "BazProject" in the same project). Instead, those should be separate projects, even if they're in the same solution. If you're interested in layout rules, I'd offer [StyleCop](https://github.com/StyleCop/StyleCop) as a suggestion. We use it work, with some custom rule sets. In general, though, I would always put constants, variables, constructors, properties, methods in that order. I'm not sure what you mean by "accessors". I think you're referring to properties (since the accessors for properties have to be immediately following them). If so, see above. If not, let me know.
&gt; Do you keep your classes in separate files? Yes. &gt; Do you make and use your own dlls? Yes - a necessity. But 3rd party dlls can also be referenced. &gt; Do you keep your classes in separate folders? No. Creating a directory for every single class is too much. &gt; Do you have separate namespaces in the same project? No. They all share the same root namespace however. &gt; Do you keep your class variables above your methods? Optional, but whatever you do - best to be consistent (for the benefit of anyone else who works on your solution). Choose something like class vars, then get/setters, constructor, public methods... private methods. Some people use the step down rule/method to arrange the order of the code in files for readability too. &gt; Where do you put your accessors? Some people put accessors after class vars and before methods &gt; Do you have more than one namespace in a file? No. But more than one namespace can be imported via a using statement at the top of the file.
This was helpful. Thank you. 
lol i think /u/marvincmarvin has the right answer. I thought it was 1024*64*1024 you should do something like 1024*100 as the first arg also, sounds like you need to learn about some basic networking if you are confusing HttpClient with Web Sockets (both are TCP based - WebSocket is just more "low level" than HttpClient) I'd suggest oyu learn more about some basic networking like UDP and TCP
`WebSocket.CreateClientBuffer` will actually create a much larger buffer than the first argument, and the buffer doesn't need to be large enough to hold the entire message anyway.
&gt;Do you keep your classes in separate files? Meh sometimes. If its an enum just used in one class I usually leave it in that file &gt;Do you make and use your own dlls? Yes, quite often. &gt;Do you keep your classes in separate folders? No. I dont make a folder for like Person/IPerson.cs, then Employee/Employee.cs (that would inherit IPerson.cs) &gt; If you don't use VS how do you organise your files? I use VS &gt;Do you have separate namespaces in the same project? different namespace for depth of folder, pretty much. or other projects in the solution &gt;Do you keep your class variables above your methods? private vars at the top always, then public class ones, then constructor, then methods &gt; Where do you put your accessors? Do you have more than one namespace in a file??!?! I dont understand this question... usually its like public class MyClass { private static string ThisIsAlwaysThisText =&gt; "ThisIsAlwaysThisText"; public string Lel {get;set;} public MyClass() { //constructor fun } public static Blah() { } }
I think you're missing a step. Task.run IS asynchronous and starts a new thread. Try removing the await keyword. Now if you have code after the task.run without await, that code will be run immediately after the other thread is started, like a new Thread(...) would do. Adding await tells the compiler to generate a callback with the following lines and call it once the task is done. Think of it this way: Task t = Task.run(...); await t; // callback definition start // callback body
Got his Core 1.0 book on this and it rocks. Really wish I waited for this one.
Yeah why not?
Did you respond to the wrong person?
`Task.Run` returns immediately with the Task object for the Task you just started. You have to `await` on the `.Wait` call for said Task if you want to wait for it to complete.
You may know this, but Node 8 supports async/await now with those keywords. Can't wait to clean up a bunch of bloated Promise chains now that Node 8 just hit LTS. 
You could try the @"string" syntax. You don't have to worry about it parsing your slashes as commands. I had a similar issue long ago, I think this fixed it. 
You can `await Task.Yield();... ` instead of `Task.Run(() =&gt;...) `
WebAPI, the brand doesn't exist any more. It's just MVC.
It can't be done purely with language syntax, but you can use a OneOf class (https://github.com/mcintyre321/OneOf) to achieve the same thing.
Note that you could have simply returned the result of `Task.Run` and not needed an `async` method in the first place. `private Task CancelAsync() =&gt; Task.Run(...);` `await` simplifies using the result the same way you would with synchronous code: async Task&lt;int&gt; Sum() { var x = await GetNum1Async(); var y = await GetNum2Async(); return x + y; }
I haven't tested it, but I thought it was when used as an optional parameter.
Java doesn't really do compile-time dispatch, except for static methods (if I understand correctly). So all instance methods are dynamic dispatch without trying. Have a read (https://en.m.wikipedia.org/wiki/Late_binding#Late_binding_in_Java)[on Wikipedia]. I can give you the wildcard syntax being odd. In and out are more clear than super and extends. But oh would I love to have covariant returns for overrides. lol
Don't interact with the UI too much
Sorry for the snarky comment (I had to, lol). When I run into weird behavior I can usually get around it by reinstalling all or part of VS, that might be worth a try if nothing else (in case you haven't already)?
I still don't get the difference between java and .NET on the dispatch issue. They seem the same to me. Covariant return types will be good but they are relatively easy to emulate using hiding
This slices across the grain of .NET. To be most effective with .NET tools, you need to think like Roslyn (our lovely compiler). The overarching principle is type safety. Roslyn is very protective of us, she keeps us out of harms way by making sure everything is type safe every keystroke. Roslyn has some tricks up her sleeve. She is really good at helping developers with inheritance and interfaces, and she has real generic support. The fact that you need a variable to be one of two different and unrelated types is a code smell. Every function should do exactly one thing. Apply inheritance, factory pattern, and decorator pattern, check for SOLID compliance, and you should be set.
Ah yeah whoops I meant properties instead of accessors. Thanks for replying! Would you ever put your classes for a specific project into a specific dll and reference them from there?
Thanks for the reply!
Thank you! Much appreciated.
Your romantic story aside, none of this has anything to do with Roslyn and applies just the same to the previous C# compiler and other languages. People get too worked up over Roslyn; it’s just a compiler, which is even slightly slower than the old one. 
Try to target RS1 or RS2
Hello. In C# You can make things for various platforms. Games for PC, Web, Mobile, Consoles (Unity, Xenko, and Godot in future + many other things). Applications wit Xamarin (Android, Windows, IOS, and maybe other platforms). Website's (Can run now on Linux and MacOS) In past there was project named Mono (It's still), which allowed to run C# on other platforms, but right now there is .Net Core 2.0 Which run on other sstems too, SQL server on Linux, Visual Studio Code. So we can see, that Microsoft want to spread C#. Also C# get frequently updated (C# 7, C# 7.1, I think C# 7.2 is coming soon). It's your chose, have a nice day :)
By the way, I thought I'd point out: Your entire GetInvalidChars method can be replaced with this expression: `string.Join(" ", badChars.Where(c =&gt; !char.IsControl(c) &amp;&amp; !char.IsWhiteSpace(c)))`
Enums with parameters are not possible in C#. The closest I can think of would be to have an IExecutor interface (or an abstract class) that exposes a common interface and have both Mouse and Key implement that.
NO!! This is the route to deadlock especially if your synchronisation context has thread affinity. [This](http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html) should be relevant. Wait and WaitAll and WaitAny bad. Wait you just don't need, you can await the task directly, then use WhenAll or WhenAny iirc. 
Looks like no one has worked on anything then...
This is exactly it. This is what streams are designed for, being wrapped and piped to other streams regardless of being a file, network, memory, IPC, anything. It's layers of abstraction. OPs need is a pretty standard use case for streams. And yeah CsvHelper is a great library, I recommend it.
Nice, it never occurred to me LP supported graphics for some reason
Amazing! This is a must read if you're coding with vs. 
I never said it did? Saying it's just MVC is also a bit of a problem too. All the documentation for asp.net core simply goes by that, it doesn't mention MVC till the more detailed sections. The book should have been called Pro Asp.net Core 2. My point still stands about being pointlessly confusing. I hope the authors realise their mistake.
Ha! That's actually a great idea!
From memory, CSV helped is not NetStandard , but I have used it in NetStandard2 app without issue. 
OP is probably a beginner or new to the ecosystem. It's not uncommon to wrap both up in application code under a 'Save' function for client applications, so maybe they worked on a team that did that before and assumed many libraries combine concerns like this?
I really hope so. As someone who is trying to learn ASP.NET Core (specially for APIs) I spent several hours looking for a book on version 2 last month and couldn't find a single one. Thank you for posting this kind of stuff, by the way.
Thanks! Glad you've liked it.
I worked on a solution with 80+ projects. In one of them there was a class with 8000 lines of code. In another was a file with 12 classes. Utter utter fucking bastards. Ive reduced it to 30 projects it should be 6. The answer is we break up code into segments to simplify stuff. 8000 line class or hiding classes in a single file or 80 projects is not simple.
You forgot your interface...
If I have a well-defined set of functionality that is reusable, then I'll make a new solution for that and build a NuGet package for it. I never do bare DLL references.
This is equal to typing tzutil.exe /s Eastern Standard Time into cmd.exe. It is passed as 4 different parameters, each separated by a space. Try writing Arguments string like this myProcess.StartInfo.Arguments = @"/s ""Eastern Standard Time"""; This is equal to using cmd.exe with command tzutil.exe /s "Eastern Standard Time"
You've hopped to a language that typically solves the [expression problem](https://en.m.wikipedia.org/wiki/Expression_problem) the other way. C# can't have values associated with ‘enum` states because they're only numbers, under the hood. I think the C#-est thing to do is to create an interface `IExecutor` or abstract base class `Executor` and have `Mouse` and `Key` implement/inherit that. 
This makes it work! Thanks!
You should probably be using "await Task.Delay()" at that Sleep() 
C# does not have a built-in means of dealing with discriminated unions. The least cumbersome, most idiomatic approach probably involves an abstract base type with a pair of (possibly nested) concrete implementations and switching on the object type: public abstract class Executor { // private constructor still accessible to nested classes private Executor() {} // common stuff would go here. // Could include an abstract method like T Match&lt;T&gt;(Func&lt;Mouse, T&gt; f, Func&lt;Key, T&gt; g) or something public sealed class Mouse : Executor { // mouse stuff here } public sealed class Key : Executor { // key stuff here } } // elsewhere Foo Method(Executor exe) { switch (exe) { case Executor.Mouse x: // Mouse -&gt; Foo break; case Executor.Key x: // Key -&gt; Foo break; default: throw new ArgumentOutOfRangeException(nameof(exe)); // should be unreachable } } If you don't mind doing the extra plumbing, tagging the types with an enum and switching on that will be faster than doing type-sniffing, though. If you can live with having an exposed constructor than produces an incoherent union, you could use a struct, instead. This will probably perform slightly better than a class, as long as you don't have too many types being unified. You would need to be careful about the constructor, though. The internal plumbing and API may not be what you'd like, though, since you have to expose the full interface of both child types and check which you had before doing things. It can be a bit messy. I'm not sure it involves any more branching, really, but it feels (to me) like it takes more ceremony. If you don't mind the weird dependency, you could pull in a Choice type from F#, though, which should handle most of this for you (in a generic sort of way, so ... without informative names), but they've only got Choice&lt;T1,T2&gt; and Choice&lt;T1, T2, T3&gt;, which may or may not be sufficient for your use case. Finally: C#'s enums are really pretty disappointing/underwhelming. They're really just wrappers for integer values, and they're not very strongly typed: really, they're not much of an improvement over enums from C/C++.
A freakin' fantastic compiler as far as code hinting and Code DOM API goes.
This should help you: https://docs.microsoft.com/en-us/aspnet/web-api/overview/security/individual-accounts-in-web-api
Not at the same time. You'll want to create the CSV in Memory, write it to a file encrypted, then zip the file. First, they have to be done serially... you need plain text to convert it to cyphertext, you need a file to zip it. And you WANT them to be separate functionality in code. You may want to Encrypt files that aren't CSV, you may want to zip files that were not generated by the application... putting it all together would be abandoning the single responsibility rule. 
He means he doesn't need RDP / UI access and he doesn't want to manage the OS and services on the instance. He is looking for a PaaS solution.
&gt; `label5.ForeColor = valueColorMap.First(k =&gt; k.Key == dr["Column2"].ToString().ToUpper()).Value;` Why not use the dictionary as a dictionary, rather than searching it using LINQ? `label5.ForeColor = valueColorMap[dr["Column2"].ToString().ToUpper()].Value;`
The `async` keyword makes the usage of the `await` keyword available. Furthermore a `state machine` is generated which contains the function local state. A `moveNext` function will act as a uni-directional iterator between the states. The state machine receives an initial state. The `initial state` will run until it hits an `awaitable` Task. After that it will schedule the state machine to proceed to the next state after the task is completed (callback) and returns the current method.
Good point. ```.Value``` isn't needed for a lookup using your cleaner method. string column2Value = dr["Column2"].ToString().ToUpper(); if (valueColorMap.Keys.Any(column2Value)) { label5.ForeColor = valueColorMap[column2Value]; } Can you think of a better way of achieving that check without using the LINQ extension? (For clarity, I'm not suggesting ```.First(predicate)``` did the check).
The `async` keyword makes the usage of the `await` keyword available. Furthermore a `state machine` is generated which contains the function local state. A `moveNext` function will act as a uni-directional iterator between the states. The state machine receives an initial state (e.g. -1). The initial state will run synchronously until it hits an `awaitable Task`. After that it will schedule the state machine to proceed to the next state after the task is completed (callback) and returns (frees) the current method. tl;dr Code gets fragmented into states. It will run synchronously until it hits an awaitable Task. 
It would be `ContainsKey` rather than `Keys.Any`. You could use the `?[]` and `??` operators in C# 6 to give a default value if the dictionary key is missing: `label5.ForeColor = valueColorMap?[column2Value] ?? Color.Black;`
There we go, that's far cleaner than my method. Thanks!
/u/VonZigmas it's probably too late for your class, but if I understand you correctly this should work: if (!System.Text.RegularExpressions.Regex.IsMatch(search, @"^(Name|Surname|Address): [a-zA-Z''-']+$")) { Console.WriteLine("error"); } Note the negation in the if, it's much easier than trying to 'not' everything inside the regex itself. You don't need the `\b` or the `^` except at the beginning. And the `+` at the end allows `&lt;value&gt;` to be one or more characters rather than just one.
I'd suggest FileHelpers instead for most use cases (we've been making the switch this year). The funny thing is that I use CsvHelper to help unit test the export files created by FileHelpers. Because CsvHelper is better at letting me read any delimited file and access a specific row/column, without having to pre-define the layout somehow.
Folder structure within the project tends to be around the "type" of the class object. I'll have folders like: - Services - Models - Views - ViewModels - Infrastructure (some overlap with Services) - Controllers - Extensions Sometimes there will be sub-folders under those top level folders. Such as calling an API service where we have to define some other classes might end up under `Services/ApiSuchAndSuch`.
Have you tried repairing the .Net Fx install? https://support.microsoft.com/en-us/help/2698555/microsoft--net-framework-repair-tool-is-available 
`await` *literally* does what it says. Look at it this way: a function that `await`s a `Task`\`Task`-like object is waiting for it to either yield or finish executing so that the `await`ing object can continue executing. Thanks to TAP, the program can set the `await`er aside and do other stuff until the `await`ed Task yields control back or otherwise finishes executing. The nomenclature makes perfect sense.
We find CsvHelper has decent performance and can handle mapping arbitrarily configured data better. I guess if you are using CSV as a file format and had strongly typed classes that FileHelpers would be better, but generally JSON or ProtoBuffer files are better for that use case, especially if you are going to encrypt the document anyways.
No, I haven't. i'll give it a shot in a sec.
&gt;Do you keep your classes in separate files? Yes, 1 file per class is the general rule with the filename matching the class name. There are exception for generated code and sometimes for sets of tiny classes that are very closely related. &gt;Do you make and use your own dlls? Yes, project specific ones are in the same sln (project reference), other (shared) projects are distributed with a private nuget feed. Each project belongs to only one sln. &gt; Do you keep your classes in separate folders? Each folder corresponds to a namespace. &gt;If you don't use VS how do you organise your files? I use VS &gt;Do you have separate namespaces in the same project? Absolutely. &gt;Do you keep your class variables above your methods? Yes &gt;Where do you put your accessors? At the top &gt;Do you have more than one namespace in a file? No, more specifically only one namespace declaration per file. Because I am strict about having a single declaration, I put the using statements at the top of the file, before the namespace. 
&gt; If its an enum just used in one class I usually leave it in that file In those cases, you can nest the enum class in the main class.
Form1, Form2, Form3, Form4, Textbox1, Table1, Table2, Label1, Label2, Label3, Label4, Label5, Label6, Label7 Ooh boy
What attributes do you have on your class that you are serializing / deserializing?
Haha, this was a fun read. However, I disagree that this is a code smell; maybe it is in C#, but this pattern is really common and powerful in Swift. I could word it better, I just lack your finesse with words. I considered inheritance but that requires a class. I wanted to keep these value types. I’ll explore the other patterns as solutions though. Thanks :)
You seem to be struggling with the point of asynchronous code. There are two types of long-running operations: * Long running operations due to high CPU load * Long running operations with low CPU load The first type is long running because the machine needs time to process what you've given it. This type should be run on another thread. The second type is long running because it is waiting for something, e.g. a web service. If you have a UI, it will be blocked, but as the load is low, a new thread does not need to be created. It would be better if you could tell the main thread to continue processing other events and come back to this web service call when it has responded. So you can await an asynchronous web service call, which tells the thread to do something useful while it's waiting, rather than blocking.
I had problems with it crashing yesterday and installing update 5 fixed it for me
Er thats what I meant
Well the `TextureParameter`class has the `XmlRootAttribute`and has 2 fields (one a string and the other an int) with `XmlAttributeAttribute`.
Question to add to this... is the Dispatcher.Invoke() the proper way to do something on an async task that needs to happen on the UI thread? In android their async task is a class that you override, commonly 3 functions that do this. - work to be ran in background - function to update progress you can call in the middle of background work, also ran on main thread - function that calls when its done that is executed on main thread 
:)
(Here are my current targets.)[https://i.imgur.com/k7K6Xeg.png] 
Indeed. This is new to me so I'm pretty much winging it at this point.
Yeah, I've already put [this example](https://www.reddit.com/r/csharp/comments/7a509i/how_do_i_check_user_input_for_correct_format/dp7fxgm/) in use and it seems to work okay. The `\b`'s seemed like they were what prevented it from working in the first place. Or maybe that was the `*`. I don't know. In this version I mean `^/b*(Name|Surname|Address)/b*: [\\w\\d\\s]?$` Your version prevents me from typing in any symbols besides plain letters (even `-`? Unless that's not what that symbol is there for), which I do need, so I think w\d\s works better for me. What do you mean by the negation in the if though? 
You're right - I just copied that last part from your original post but `[\w\d\s]` would work much better. The `\b`s are totally useless as you had them. It means 'match on word boundary' but that is already implied by the first `^` (which means beginning of the text - the beginning is by default a word boundary). The second is also redundant because the next character is a `:`, which also implies that it creates a word boundary. In your original post the code says, "if this regex matches, write error" but based on your comments it sounded like you wanted it to error if it did *not* match the `&lt;key&gt;: &lt;value&gt;` pattern, which required the negation (`!Regex.IsMatch(...)`)
Yes, this confused the heck out of me. I don't like the Task API, and I think it requires you to know too much about its guts to function. It's very friendly to *clients*, but the details of writing APIs are mostly "here's the tools, you figure it out". Let me try to explain. `await` is a method you use when *calling* something that is asynchronous. It means, "I need this thing to happen in a different context, and when it is finished I want you to come back to this context." It's most useful when on the UI thread. Generally, if you're already on a worker thread context, you don't give a flip about blocking. So I don't *personally* like using await anywhere but at the "top layers" of my application. Other people disagree, and I don't think there's anything technically wrong with using it everywhere, but I find it more difficult. What `async` does is tell the compiler, "This method uses `await` somewhere, so you need to be able to rewrite this method". Here's a very simple method as an example: public async void Wait5Seconds() { Console.WriteLine("Before"); await Task.Delay(5000); Console.WriteLine("After"); } The compiler ends up rewriting this code to be *something like* (some nitpicker will point out this isn't exactly it): public Task Wait5Seconds() { Console.WriteLine("Before"); var t = Task.Delay(5000); var final = t.ContinueWith(AfterWait5Seconds, TaskScheduler.FromCurrentSynchronizationContext); return final; } private void AfterWait5Seconds(Task parent) { if (parent.Exception) { throw parent.Exception; } Console.WriteLine("After"); } So if we write this: Wait5Seconds(); Console.WriteLine("After the call..."); What happens is the "Before" is written. Then Task.Delay() is scheduled and configured with a continuation. Then that continuation is returned. When the Task.Delay() completes, the continuation is run *on the UI thread* due to the TaskScheduler. So "After" is written. Then the continuation finishes, which causes the Wait() call to exit. All of that is asynchronous, the code after `Wait5Seconds()` will be executed. We probably see, in order, "After the call...", "Before", "After". But the first two could be in any order, really. So what if we're on the UI thread and: await Wait5Seconds(); Console.WriteLine("After the call..."); Well, a new layer of wrappers is made. The UI thread gets here, and all the "Wait5Seconds()" stuff happens, but we don't come back to the UI thread until the final continuation returns. We definitely get "Before", "After", "After the call..." in this order. So it turns out "await" is sort of like an "early return" that returns a Task. If you call await on a method, the "Before" parts happen synchronously. When we get to the `await` line in Wait5Seconds(), technically the method is returning a Task. That Task represents the completion of the "after the `await`" parts. So if something calls await on an `async` method, there's some invisible magic code that's using the invisible magic Task. For the sake of repetition, mentally think of `await foo()` as if it did this: return foo().ContinueWith(() =&gt; { // the rest of the method }, TaskScheduler.FromCurrentSynchronizationContext()); If I were writing your method, I would write it like so: private Task CancelAsync() { return Task.Run(() =&gt; { if (TokenSource == null) return; TokenSource.Cancel(); TokenSource = null; Dispatcher.Invoke(() =&gt; { IsBusy = false; }); }); } It doesn't need to use await, because you want it to be asynchronous. It only needs to return Task in that case. In short: * You have to put `async` in the method definition if and *only* if you plan on using `await`. * You should use `await` when you want to write a method that calls *another* asynchronous method, but doesn't want to "finish" until that asynchronous method has returned. * Consider `await` to be like a "return a Task that represents the rest of this method". If I were *really* writing that method, I'd be using the Reactive Extensions. Once you get into things like, "Should I use `ConfigureAwait(false)`?" and "Wait, what's an Unobserved Task Exception?" you'll be ready to stab the MS engineers who settled on Tasks. That's when Rx .NET's waiting for you.
Ah, the error was from an example I found when I still wasn't quite sure how it worked, so ended up just being a placeholder (a somewhat misleading one I guess). I changed it to true and added `else` for the error. 
HttpClient is just an abstraction... I mean IDK what you are trying to do Are you just trying to get .json data from a server? Have you done networking before? Your comment implies ignorance to this topic
According to the documentation, you can have only one class with xmlroot and it should be the root node to your hierarchy. https://docs.microsoft.com/en-us/dotnet/standard/serialization/controlling-xml-serialization-using-attributes#controlling-serialization-of-classes-using-xmlrootattribute-and-xmltypeattribute Try to remove the root attribute if you can. If that doesn't work, it's probably something with the list property attributes or overrides based on the error.
Tried with no luck. I should try turning the list into an array.
That's probably for the better, actually. I went to write an example and realized I was mistaken. Java didn't have anything like the dynamic typing c# does with the dynamic keyword. So please ignore my blathering. I was thinking of using dynamic to determine between two overloads at runtime and choose the most specific. Hiding only goes a little way, unfortunately. If you hide a method, the overwriting method is not called from a bar class reference. 
I'm working on an Image Processing program that only processes BitMaps as an exercise in learning image processing algorithms. However, its a WinForms app. Do you think its worth showing on my Resume? I've done WPF work, but manipulating WinForm PictureBox is a shit ton easier than WPFs Image
Try to create a class that derives from List&amp;lt;Texture parameters&amp;rt; and use that instead. I suspect the serializer requires a concrete class based on this https://docs.microsoft.com/en-us/dotnet/standard/serialization/examples-of-xml-serialization#serializing-a-class-that-implements-the-icollection-interface
Judging by the sloppiness of this post, I wouldn't want to rely on any "librerys" you create. Seriously, how much time would it have taken to spell-check and clean up this post? A minute at most? Even if English isn't your first language, a spell-checker would have fixed "librery", "vahe", and "usefull". Also "RIght" and "Hope You".
You will of course override the base class method and apply a cast in your hiding method. You still have a cast to your more specific class but you wrap it and hide the original method.
Of course You are right. My fault. I can assure You that code is much better. Again, sorry for my sloppiness.
No luck :(
And RS3? 
Change the minimum version :) 
Are there any demos? 
Can you elaborate a little more? Your question doesn't quite make sense to me. Particularly: Where is this code taking place? Within the Form's DragEnter event handler? &gt;so far i have made it so **it** cannot drag and drop items into the windows form. What is the '***it***' that cannot drag *onto* your form? &gt;however if i drag a number from outside the windows form, it still works. How do you 'drag a number'? It sounds as if you're trying to drag/drop a file onto your form and are assuming the file has a numeric name, which you are then converting to an integer. Is this correct? 
When I was working at AWS, I wrote a good chunk of the .NET SDK documentation. Of course, that was at least 6 years ago. :(
This is not working. It gives the same results. the "quotes" property returns with a count of 0, no data.
I'll try making an example when I get home.
Sounds you are starting out from level zero for Object Oriented Programming (OOP) based programming. Sorry friend. Thats like me saying "Hey I know how to OOP program, give me an intermediate programming book for Haskell (a functional language - which is VERY different paradigm than OOP)
here is my code if it helps: CurrencyConversions quotes = new CurrencyConversions(); Stream data; string url = BASE_URL + ENDPOINT + "?access_key=" + ACCESS_KEY + "&amp;format=" + JSONFormat; try { using (var client = new WebClient()) { data = client.OpenRead(url); } DataContractJsonSerializer serializer = new DataContractJsonSerializer(quotes.GetType()); quotes = (CurrencyConversions)serializer.ReadObject(data); } catch { quotes = new CurrencyConversions(); }
Pleeeeease stop using electron: https://neilalexander.eu/articles/2017/7/27/stop-writing-apps-in-electron
Did you really post that in response to somebody working on a wrapper for it ? There are use cases for just about everything and an article complaining about memory usage which can be a valid argument and show stopper but this is a given and is fairly clear before you start a project .. you just want everyone to stop developing shit because u don’t have a use case ? 
Not that big of a leap. If you know the basic stuff (loops, conditionals, data structures), you can learn the basics of any language fairly quickly. Getting to the intermediate stuff is the hard/fun part of each new language. I would recommend starting with Derek Banas on YouTube. He has a good C# tutorial he's done recently. ~25 videos.
Maybe, Powershell is Object Oriented though, so I understand that objects have attributes, methods, and functions associated with them that you can call. I just don't understand the equivalents in C#. 
Perfect, thanks!
Sometimes, the speed of delivery to market and maintainability of Electron applications far outweighs the extra 2-300 megabyte of RAM that it is using. How much RAM do you have? My smallest laptop has 8, with the OS using around 700mb. That leaves just over 7gb of RAM left to run applications in. A lot of people seem fascinated about conserving RAM on a device where it is present in abundance. I'd understand if it was on an embedded device (where RAM is limited), but most of the time it is not. 
This is really insane. First there was dotnet. Then mono. Things started to work. Then some wise guy decided that it was time to remove the ui part from dotnet and there it was dotnet core. Then a hunderds of megabyte monster for just having a form shown? This is insane. We, the programmers, must fight this. We must fight I-do-everything-in-html5-n-js guys from making us waste our precious time reinventing the wheel every five minutes. We cannot waste our lives on this, they are worth more! 
The article he linked I think really wanted to pinpoint the effect of multiple electron apps running. So if we all start using it especially with things like vscode gaining popularity the changes of multiple electron apps running gets higher and lots of inefficient apps really can be an issue. 
It will really depend on your goals. You can learn it, but you will be forced to learn much more about programming that you probably didn't know about. A regular programming language comes with an amazing amount of complexity that it can handle. Technically, you can do most of that with powershell because they both use the .NET framework, but powershell is so much slower that there are a lot of things you can't do... Or can't easily do. You aren't starting at level 0, but you will definitely be a bit of a noob. Google everything, just like with powershell.
Sheesh get over yourself.
What’s insane is asking for more limited options ... you have a huge amount of options electron isn’t forced on anyone ... it’s a tool in the toolbox .. if u don’t know when you need a screwdriver vs a hammer it’s on you as the craftsman to do the research first. 
Lol, I'm so tired of working with JavaScript.
Looks good!
I know when to use a screwdriver, that means never use a virtual machinevon top of another one very good at doing the same things. 
Semi-off topic question: Would it be possible to use Electron without bundling an entire browser with it? Maybe rely on the OS's default web renderer?
&gt;We cannot waste our lives on this, they are worth more! Considering the only real alternatives for cross platform GUI development are clunky C++ toolkits (QML sucks), the only way anyones life is going to be wasted is if they spend way too much time trying to make anything presentable in those as opposed to using Electron because someone on reddit said "We, the programmers, must fight this."
The fact never is in your vocabulary leads me to believe you don’t actually work as a programmer. 
That's only a thing in mobile...
+1 to this, using a web server for window things its not the best approach
Oh I agree it was trying to do that, but it is awfully biased and doesn't consider any positive points.
That's what cordova does. Unfortunately cordova doesn't support traditional desktop platforms.
Conceptually that's what it is, but fwiw internally that's not how C# works. When you mark a method as async then the C# compiler generates a state machine to keep track of "where" in the method it's executing. This article describes it a little bit: https://www.filipekberg.se/2013/01/16/what-does-async-await-generate/
Makes sense, thanks for your insight.
Oh, sorry, I'm pretty inexperienced with PowerShell (i usually write "scripts" as .exes in C# or use python) In that case, perhaps pluralsight would be ok. I started off C# YEARS ago by watching Bob Tabor - his website/content has changed considerably though: https://www.devu.com/
A couple hundred megs is nothing nowadays.... .Net core brought cross platform compatability, which is one hell of an improvement over what we had before.
Indeed, it generates something very different internally, just like `yield return` generates something very different to achieve its desired behavior. I think you need to understand the _why_ before you can dwell into the _how_.
I have been a programmer since 20 years now. I have been into C, C++, C#, Actionscript, Php, javascript, Pascal and lisp. In all these years I have seen lots of frameworks claiming to be the best and none was. But this is a different point. Resources are precious and I am very sick of software having the very same features of a 250 kb text editor wasting tons of megabytes. Moreover, this mad layered approach takes incredible problems when you will have to deal with bugs in the layers you leverage on. What will you do when you will find out that the bloody electron has a bug and you are already in production? And what about the security issues in the browser engine you are using? I know what I am speaking about. Do you?
Mono did it already. I have been using it in production since 2.04. Never had a crash. 
**I'm** not trying to do anything. I'm not the original poster. I think you are misunderstanding. "Does HttpClient support web sockets?" was meant as a rhetorical question. I should have said "Does HttpClient even support web sockets? How the hell is that going to help /u/maxima1200?" but I wasn't trying to be a complete ass. Is that more clear? 
it doesnt...? they are vastly different so your question doesnt make sense about "httpclient supporting web sockets." what i was trying to figure out is wtf the Op was using websockets even for. https://blogs.windows.com/buildingapps/2016/03/14/when-to-use-a-http-call-instead-of-a-websocket-or-http-2-0/
This is way out of my area of expertise, but I seem to remember something about SSL being intolerant of TCP resets and errors because it could be a man-in-the-middle attack. It could be that you have had network problems the entire time, but they were tolerated over HTTP. Does it work with a static file? If not, then it's unlikely your own C# code that is the problem. If it *is* your code that's the problem, how are you sending the file? Byte by byte? Chunk by chunk? Are you inadvertently pausing between chunks?
And mono supported asp.net and entity framework?
In the olden days you could easily embed an IE component and control some of it from c#. It was great for web apps that needed hardware access, you could expose objects/methods to the running JavaScript. Only took a few lines of code.
The problem becomes apparent when everyone thinks like that. If all applications use 300-400MB of RAM then it will run out fairly quickly on a lot of computers.
Yes, on 4 i am running ef6 and mvc5. On previous versions I used asmx web services together with my own d.a.l. in postgres.
Whats your machine specs? 
TIL That ran on Linux right?
just `return String.Join(",", YourIEnumerableHere);` \s
&gt;What will you do when you will find out that the bloody electron has a bug You can say this about *any* language/framework/resource you depend upon. This is not an argument against electron. &gt; And what about the security issues in the browser engine you are using? Just like anytime you write software you have to be aware of security risks, there are many places explaining how not to expose such risks through electron. &gt; Resources are precious and I am very sick of software having the very same features Dont use electron then, sorry you have a 1 core 512mb ram pc 
Asking for more limited options is better for the end users, in this case. All of this transpile to JS shit is horrible for the users out there, but better for companies because it saves them money on cross platform development. We’re enabling companies to deliver shitty products to save a few bucks.
Using the OS's default web renderer? The [JavaScriptCore](https://developer.apple.com/documentation/javascriptcore) API is available on macOS as well.
Yet another incredibly powerful tool in my belt. Thanks!
Hopefully Blazor becomes an official Microsoft project soon.
Are you not using Newtonsoft.Json? That might be it. Try installing it and then using the following code. You'll see the quotes dictionary includes all the values. using System; using System.Collections.Generic; public class Program { public static void Main() { var json = @" { ""success"":true, ""terms"":""https:\/\/currencylayer.com\/terms"", ""privacy"":""https:\/\/currencylayer.com\/privacy"", ""timestamp"":1509645556, ""source"":""USD"", ""quotes"":{ ""USDAED"":3.672299, ""USDAFN"":68.290001, ""USDALL"":114.150002, ""USDAMD"":483.48999, ""USDANG"":1.780165, ""USDAOA"":165.097012 } }"; var result = Newtonsoft.Json.JsonConvert.DeserializeObject&lt;RootObject&gt;(json); foreach (var item in result.quotes) Console.WriteLine(item.Key + ": " + item.Value); } // Define other methods and classes here public class RootObject { public bool success { get; set; } public string terms { get; set; } public string privacy { get; set; } public int timestamp { get; set; } public string source { get; set; } public Dictionary&lt;string, double&gt; quotes { get; set; } } }
You can use UWP EdgeHTML. Actually. UWP HTML apps you can even call UWP apis already. And the better: it don't need a "local html app". 
I keep each line of code on a separate hard drive and run it in RAID. Building a "Hello world" program costs me around $1000.
What if the company is its own customer ... 
Yeah but who wants to use Edge?
That used to be enough for running Windows XP, and now it's barely enough for running a chat application.
They used to program with punch cards. Times change.
Nobody cares about your mission to save space you are in a csharp sub which if I’m not mistaken is not the most memory friendly way to go... so go optimize your ass back to assembly which I didn’t see listed in your history btw... 
the code is being used to drag a value from a listbox onto a picturebox, to delete the value. however when i drag any item from outside of the windows form, it will throw an error message. i have managed to stop this error message, except for if i try and drag a number into the box (e.g. highlighting a number written in Microsoft word and dragging it over) i am just wondering if there is a way to disable any items being dragged into the windows form; such as text, folders, etc 
Edge here it's faster, so, me. 
in the `DragEnter` event you can set the drag drop effects: if (e.Data.GetDataPresent(DataFormats.Text)) e.Effect = DragDropEffects.Copy; else e.Effect = DragDropEffects.None; and remember to reset the effect in the `DragDrop` event e.Effect = DragDropEffects.None;
It's a cool proof of concept, but you'd probably hate actually working with that API. Razor syntax wasn't designed for SPA rendering and would end up pretty limiting. That said, I'd love to see a React-like API in WASM with C# calling the shots (though MS said they will never put XML literals into C# so this isn't likely)
You need to try FF Quantum
PowerShell may be a .NET language like C#, but in practice they're almost completely different. On the other hand, C# isn't a difficult language at all, with lots of neat features. You should be able to pick it up without too much effort. However, while I'm all for C#, if the only other language you know is PowerShell, I'd reccommend something easier and more familiar. Python is a simple scripting language, and the IronPython implementation allows you to call the same .NET functions as C# and Powershell (with the `[namespace]::function()` syntax).
this has worked thanks. however although files and folders will not be accepted by the picturebox. i can still drag text from a word document onto the delete picturebox. anyway to counter this?
I tried. I have it here running the nightly :) It's as fast as Edge here, but there's still reasons for me to use Edge: 1. Edge uses less CPU 2. Edge use less RAM 3. Better scroll and touch. 
Is there any problem with Edge's HTML rendering? I know the browser as a whole has some problems, but you're not using the browser you're only using the HTML renderer. 
No, i want people to think about which platform to choose before they start development. And electron is not always a "given" more often than you think there are alternatives. If everyone starts using electron, and you have multiple electron apps running at the same time, you can't deny that this is a memory issue. Oh and on top if that, there are security concerns too: https://mobile.twitter.com/jacobrossi/status/851992646151278592 &gt;out of 98 top Electron apps, they averaged 145 known Common Vulnerabilities &amp; Exploits each due to unpached versions of Chromium 
At least for me, people always told us to be reasonably resourceful when developing applications. And 200+ MB sounds a bit wasteful for a calculator app (for example).
the `.Invoke()` method is where the output is generated... you need to capture that before outputting it. https://blogs.msdn.microsoft.com/kebab/2014/04/28/executing-powershell-scripts-from-c/
i5 661; 8GB RAM; GTX 550 Ti; an SSD for the OS (and VS); HDD for data. Nothing out of this world, but should be enough :D Also, I just got a notification that the problem will be fixed in the next update of VS :D Hope it's really the case, not just some empty words to finally close a 4-month-old feedback request.
How come? Honest question, I work with C# and JavaScript at work and I really enjoy both. I enjoy them for different reasons I guess, but still. Interested in your thoughts. 
I don't understand :,( can you help me
[Bridge.NET](https://bridge.net) is an option now, including building [Electron](https://blog.bridge.net/widgetoko-a-node-js-and-electron-application-written-in-c-1a2be480e4f9) app.
It just takes time. I started with PowerShell too. I learned it on my own and was using it to make scripts at work. Then got a job where I somehow transitioned to programming in C# among other languages. Recently, I returned to PowerShell and wrote a recursive script. My script today is far more readable and maintainable than the garbage I wrote back then :P
Yeah, it's probably not the best tool if all you want is to pop up a dialog box.
Have you stopped through it on the debugger? The exception should have a line number and it would be pretty straightforward to figure out the problem from there.
I've tried every combination. 
`but says something about an index being out of bounds` sounds like an off by one error.
I've tried every combination. 
Tried to update the UWP .NET nuget package to 6.0?
It brought cross platform, but it also took out *a lot* of stuff. It took out stuff that had very little, if anything, with Windows. C++/CLI beats P/Invoke any day of the week. It's still out. DirectoryServices are useful with any LDAP. It's still out. Writing web services on WS-\* is useful. It's still out. XA transactions are useful. That's out, too. (EnterpriseServices had that; there would have been not much wrong with a cross platform version there). Etc.
Big RAM usage directly translates to the lower execution speed, and people can notice that. Also battery life.
you should be able to assign myShell.Invoke() to a variable and capture the output in an object of type PSObject. The PSObject data type has defined a ToString() method that I suspect should get you want you're looking for. var outP = myShell.Invoke(); Console.WriteLine(outP.ToString()); https://stackoverflow.com/questions/34398023/get-powershell-commands-output-when-invoked-through-code
First, a note on style: variable names starting with an _underscore usually signify class-level variables, not local fucntion variables. In these two arrays, the split may result in a different array lengths than you have declared them as: int[] _haybaleLocations = new int[_haybales]; _haybaleLocations = _lines[1].Split(' ').Select(s =&gt; int.Parse(s)).ToArray(); int[] _temp = new int[2]; _temp = _lines[i].Split(' ').Select(s =&gt; int.Parse(s)).ToArray(); Just do this: // delete this: int[] _haybaleLocations = new int[_haybales]; var _haybaleLocations = _lines[1].Split(' ').Select(s =&gt; int.Parse(s)).ToArray(); // delete this: int[] _temp = new int[2]; var _temp = _lines[i].Split(' ').Select(s =&gt; int.Parse(s)).ToArray(); Also, the `ReadFile()` method: string[] _lines = ReadFile("C:\\Repositories\\USACOPractice\\Data.txt"); Can be replaced with this one-liner (note the @ symbol lets you specify paths without having to escape each backslash): var _lines = File.ReadAllLines(@"C:\Repositories\USACOPractice\Data.txt") .Select(s =&gt; !string.IsNullOrWhiteSpace(s)) .ToArray(); Lastly, `GetNumberHaybales()` can be reduced to this LINQ expression (note the `ref` you had for haybaleLocations should not be used here): public static int GetNumberHaybales(int min, int max, int[] haybaleLocations) { return haybaleLocations.Where(x =&gt; x &gt;= min &amp;&amp; x &lt;= max).Count(); } P.S. I hope I didn't just do your homework.
Look at the arrays you are using and look at the index inside of the brackets[], rember that you start counting indices at 0. so the first array item would be array[0], the second would be array[1] and so on. index out of bounds means you are referencing a index that is higher than the array was defined to be. an example would be: int[] num = new int[3]; //has three elements num[0] = 1; //element 1 num[1] = 2; //element 2 num[2] = 3; //element 3 num[3] = 4; //this will cause an out of bounds error because we define an array with 3 elements. we start counting those elements are 0. [3] would be the 4th element, which is out of bounds.
I will try that tomorrow evening :) 
The problem with this is that to boot an Electron app with it, you never to start an instance of Kestrel on your local machine. Maybe they can fix this by somehow short circuiting ASP.NET Core and noting a headless browser or something. Its an impressive project for sure. But I'm not sure that spinning up an instance of Kestrel in order to start and electron app in a great idea. Then again, it's early days in development. 
We are not speaking of a language. We are speaking of a full browser engine inside an application.
That is not true. C# memory can be used wisely. Ever heard of using statements? 
On linux and mac
Quite the collection all look pretty good. I noticed in your string extension to Boolean you valid the input with pith string.IsNullOrEmpty and string.IsNuOrWhiteSpace. To my understanding only the later is needed as this checks all of the conditions of the first one plus checks for white space characters 
[removed]
Wisely does not equal the most efficient so I’m not sure what your point is unless you are stating you believe you can get an equivalent memory footprint from equally skill crafted code ... using statements .. you think scope and dispose equal a small footprint? The guy I responded to was complaining about less than 300k mem for a text editor ... I’d love to see the master using implementation that gets you near that even pretending we can ignore loading framework runtime into mem 
Not the poster, but I also work with JavaScript and C#. 9 times out of ten a bug is in the front-end, and they usually require more time to figure out what's wrong. You get helpful messages like `undefined is not a member of undefined`. Bugs in the backend are usually because of general design issues. Bugs in the front-end is usually because JavaScript sucks. One bug was literally a newline after a return (so the function returned `undefined` instead of what it was supposed to return).
What do you mean with a newline after a return? Javascript doesn't care about whitespace.
Oh but it does! `;` is optional. JavaScript will accept any line that makes sense on its own if the next does as well. So newline *can* mean end of statements whenever the parser feels like it.
I know that you don't need to use `;`, but you can't blame it on the language for not using it and then having problems. You have to be extra careful if you decide to not use it. Did you follow a style guide that prohibited you from using a semicolon?
If you're writing javascript without some basic linters, you are shooting yourself in the foot. And don't say, "Well, it shouldn't need a linter" because every popular language has linters and style guides and sometimes even compilers.
Yes please. Loving React, it has actually made my start to actually like javascript is makes it so easy.
The issue wasn't that the code didn't have a semicolon. The issue is that newline can also mean end of statement. This was inside a callback hell function so I guess it was put there so that you didn't have to scroll to see the entire statement.
Thats just plain wrong. Big RAM usage can mean a lot higher execution speed. Because less resources need to be fetched from a Harddisk. ( When using RAM correctly )
&gt; Dont use electron then, sorry you have a 1 core 512mb ram pc I agree with your other points but ugh I am so tired of this sentiment. The software - hardware performance gap is larger than ever and it’s 100% because of (frankly, insane) technologies like Electron
This isn't about linters though. It's about how JavaScript is a sucky, sucky language.
Can you give me an examples? There should be no place where you can mess up the code by having a newline after a return afaik.
That's why I said, language/framework/resource 
You've totally mixed up a bunch of concepts and failed to understand streams, and its not really anything to do with srp.
Hah, true, more RAM usage can mean faster software, but not in this case.
Would you categorize Visual Studio Code as shitty?
Maybe you have to deactive your cache of your browser.
&gt; System.Management.Automation.Powershell You're outputting the **object** "PowerShell", thus just outputting the type of that object. As the previous commentor said, the output you get is returned at the call of **invoke**. So var output = myShell.Invoke(); &lt;-- here is the output. foreach(var item in output) { Console.WriteLine(item.BaseObject.GetType().FullName); Console.WriteLine(item.BaseObject.ToString() + "\n"); }
Sure thing. https://jsfiddle.net/Ld1rrdbm/
Add it to the bundle?
Yeah, but then you would lose the entire cross-platform part, which is the reason things like this even exist.
Go ahead then, jump on the train. I'l just sit here at the station and wait for the php one. Should be arriving soon
Looks like xamarin forms to me.
Honestly though, &gt; callback hell function &gt; put there so that you didn't have to scroll to see the entire statement that is just not how you javascript in 2017. I understand the sentiment that a lot of problems (specifically front-end) are due to the nature of javascript but that is not to say that you cant have a great dev experience writing or reading it. Every tool should be used in a specific way, the problem is that javascript allows you to use it in whatever way you want. 
Declare counter 0 Declare value 0 Do while value &lt; 30 Increment counter ++ If counter == 3 Then add input to value and increment set counter back to 0 Do stuff. However how are you getting input is it a string? Are you actually getting input from a keyboard? This question is vague, and sounds like a possible homework problem where you don't know how to break down the problem into smaller problems, so you just post the entire problem. 
You're right. Mistake for me to not verify this first before blindly checking both. Thanks, maybe some others can share theirs :)
What the fucking fuckity fuck! This kind of bug can sneak in inadvertently when developing across platforms with different EOL sequences. E.g. OS X guy writes `return;` in version 1 of the file. It works fine. Then some guy on Windows needs to edit it to return the value of a function `foo()`; So he copies the statement from elsewhere in the document and inadvertently copies an extra line-ending character along the way. The code now becomes `return \rfoo();`. He cannot see the newline because on Windows, the sequence is `\r\n`. He checks in version 2 of the file and goes home. When OS X guy opens it, it is parsed as `return` and the `foo()` call is never executed. Granted that an IDE prompts to change line sequences when a file is opened. But Notepad doesn't. It's difficult to run into this scenario, but not completely impossible.
No, receiveBuffer is not an array. its ArraySegment. it supposed to have count equal to the actual received count.. Anyway - my problem is not getting extra bytes, my problem - i am not getting enough bytes 
I am just lolling here - in 10000000th time in my life i see people who has no idea in X but then they climb on a tree and start throwing bananas at passers by shouting you are totally ignorant in X..
I'll have to take a look at bridge.net. any idea of its usage in production environments?
Here is what I am getting now: https://imgur.com/a/obTZe 
Adding the foreach loop correctly displays the get-date cmdlet. How do I show get-date without having to do a foreach? 
Well if only going to add one script, and thus only having one thing returned, you can just do a var result = myShell.Invoke().FirstOrDefault().BaseObject.ToString();
Javascript was made in a week. Should it have taken off? Probably not. Is there anything we can do about it? Yes. We can use a specific subset of the language features and bug prone patterns. Yes, global variables by default does seem like a freaking terrible idea. Yes, semicolon guessing is really stupid. But a linter keeps you from doing those things anyway, so it's better to stress over real flaws.
That seems to work. I think I was getting lost because I was trying to do Invoke().BaseObject -- and it wouldn't recognize baseobject. Working with Powershell in C#, you have to use the BaseObject() ?
You have to realize that Invoke() returns a **collection** of PSObject, which is why Invoke().BaseObject does not work.
You probably did, but they're likely not supposed to know LINQ yet, so don't worry. :)
Ok I will keep that in mind. You think it's good practice to transition from Powershell to C# to continue to use Powershell? I'm assuming C# can do everything Powershell can. Powershell seems much easier on getting system WMI information that C#, at least to me. 
Ah, found my problem. Turns out I was reading for the length of an array by only substringing the 2nd index and making it 1 long. This meant that the array was ending up being 0 units long. Fixed!
ok, so i believe that object is a collection so you could try iterating through it with a foreach loop foreach (var item in outP) { Console.WriteLine(item); }
Same with VueJS. I'm not missing Razor one bit. Plus with VueJS unlike React they wouldn't need XML litterals. Keep the &lt;template&gt; as-is and have the &lt;script&gt; part be C#. It would be amazing.
Do you have static files enabled? https://docs.microsoft.com/en-us/aspnet/core/fundamentals/static-files
Completed code tested and returns the current time using System; using System.Management.Automation; namespace PowerShellDemo { class Program { static void Main(string[] args) { PowerShell myShell = PowerShell.Create(); myShell.AddScript("Get-Date"); var outP = myShell.Invoke(); foreach(var item in outP) { Console.WriteLine(item); } Console.ReadLine(); } } } 
I wouldn’t want to go back to vanilla JS, but I’m quite happy doing client-side in Typescript,
&gt;No, receiveBuffer is not an array. its ArraySegment. Not sure how that is relevant? It's just a wrapper around an array. &gt;it supposed to have count equal to the actual received count.. No, it has a count equal to whatever size the segment was created with, which in this case is whatever arbitrary amount decided by `WebSocket.CreateClientBuffer`. `ReceiveAsync` doesn't change the size of the buffer you give it.
PHP Sucks! Something about the variable names I heard once in the past for early functions! Bolted on classes! BLARG! Funny aside, JavaScript does kind of suck, but its been getting better every year as well. What can you do?
Maybe this sounds stupid I haven't done much dev in this area but couldn't a Core web application just be deployed as a web service and then the users browser can be used? Or maybe the overhead of the web server would remove any gains? No idea.
Can confirm this does work with newtonsoft and Dictionary&lt;string, double&gt; However, is there any way to set quotes as a List&lt;Quote&gt; instead?
I don't have a gist, I have a git repository for that: https://github.com/Tyrrrz/Extensions/tree/master/Tyrrrz.Extensions
Not with the automatic binding, I think. You'd have to apply one of the other solutions.
Can you post your Startup file, specifically the Configure method where the middleware pipeline is set up?
I mean, he has a point. Just because you can waste half a gigabyte displaying a form with a button that pops a hello world alert box doesn't mean you have to. Or should for that matter.
You probably have the .UseMvc() before .UseStaticFiles() in your Startup class.
Deployed on the client's machine or on a central server? If the first this is done for some applications but that means it runs as a service (i.e. all the time) and makes the deployment harder (requires admin access). If you mean the later that's basically an SPA/PWA.
Anything to do with window or buffer size, setting or getting does not work for Mono. At least for me.
Not exactly? Cordova uses the native engine of the system... If you are making web apps FOR chrome (blink), then you are doing web wrong. 
Probably this
Oh wow that was it! Thank you very much!
you gave no real info on what you are trying to accomplish - i assumed that maybe you were a newbie with C# and somehow got lead down the path to use fucking WebSockets to get .json data...
I haven’t used it. I won’t, either, because of how it’s implemented. Other apps solve the same problem and it’s a safe bet that they do so far faster and more eloquently.
So you are just talking from ignorance. That’s all I needed to confirm. I hope you don’t use any website not built with C, oh wait!
Have you tried setting breakpoints and setting watches on the lists to debug/solve the problem?
No, I dont like the visual studio debugger.
I’m not talking from ignorance at all! I have plenty of experience with JS based desktop apps. I also never said anything about JS being horrible for the web. Stop being a troll.
You are talking about performance. And you know what? Performance doesn’t matter that much. Basically, web servers run on things like PHP or Phyton, games use C#, so... js desktop apps don’t have to be bad just because it’s js. Half of Linux runs on perl and python scripts. That’s why I talk about the web, not because is js. And basically you are saying vs code is bad without testing it. That’s ignorance. Trolling is critizing stuff when you don’t even know what you are talking about. Test it and you will know why it’s becoming popular at the speed of light even being done in electron.
I never said it was bad. I said I personally wouldn’t use it. I don’t degrade or judge people who use it. I’ve used other Electron apps, and they are not as good as natively compiled competitors; that’s plenty enough experience. It’s similar to buying a few products from a particular brand and you don’t like them, so you stay away from that brand. JS desktop apps will always be worse than their natively-compiled counterparts. I don’t mean to imply that their bad, their developers are bad, etc; I’m just stating they could be better. And I’d rather stick with the better alternatives.
Well writing to the console is probably the worst way to debug as a learning programmer
I finally fixed my issue! I did some testing by connecting to my neighbors network and everything worked fine. That told me the problem was with my ISP or my router. Turns out it was a setting selected on my router! My router was trying to share the IPv6 connection and that was screwing everything up. Turned that setting off and everything is working correctly now! Thanks everyone for your input and help in trying to figure out the issue!
You aren't actually deserializing into `RootObject[]` -- there's only one `RootObject` in the json. Try just `RootObject`.
Given your example JSON, RootObject[] p = JsonConvert.DeserializeObject&lt;RootObject[]&gt;(json); should be RootObject p = JsonConvert.DeserializeObject&lt;RootObject&gt;(json); 
it's a default key that the website gives to test the service. Thanks though.
What is it you don’t like about it? It’s pretty amazing - if there’s something specific you don’t like, it may be that there’s another way of doing things that avoids the bit you don’t like. It is absolutely necessary to master the debugger. I’ve been writing code for over 30 years, I still make mistakes regularly, and I always use the debugger to find and fix them. I started when debuggers like this didn’t exist - believe me, you don’t want to live in that world. If I were to try to find your problem, I’d do that using the debugger. I’m certainly not going to do that if you haven’t tried first.
Works great! Thank you!
Removed: Rule 4. Try putting together a unit test. Describe what you're inputting and the incorrect result you're getting. Try debugging it (use that debugger!), validate that each step is executing the way you expect it to.
How do I get all my commands in the Addscript() section to show in the text box? https://imgur.com/a/oeala
I think I got it by doing the following: text.Text += item.ToString() + "\n";
Honestly, I think I'm tired of line of business web applications in general. I don't get any personal enjoyment out of the design side of things. I lack artistic flair, and I find it all very boring.
Yup.
Often SO will give you the solution to your problem, the one you can copy/paste and be done with it. MSDN will give you the why, at the cost of a long search and understanding the broader picture. 
Amen to this! Prefer laymen’s terms to dense reference material any day.
Reference material like MSDN assumes you already know what solution you are looking for. SO is indexed by problem, with answers/solutions attached.
MSDN becomes more helpful the more experience you have. I used to use SO almost exclusively but now, for certain questions, I head straight to MSDN.
MSDN has some pretty good materials, it's worth reading sometimes. But as noted by others, MSDN is a reference source, not a problem solving source.
Completely agree! I also just don’t trust SO questions which only have 1x answer so I nearly always end up on MSDN to confirm. 
That is not what I asked you for, I asked you to provide an example where it would break if you used semicolon. Also, that code supports whay I said, whitespace doesn't matter. You are simply doing 'return foo();'...
The best part of SO is if the answers don't necessarily give you the exact solution, usually they'll point you in the right direction so you can figure things out yourself and code your own path. Doing that simply makes you a better dev over time.
The biggest problem with MSDN is when an article doesn't have sample code. For example a class method may have a parameter "URI" where the description will say "The URI of the network resource you want to flibbertygibbet" with no mention of the required format of the URI. Do you have to include protocol? Port? Filename? If it's a directory, include the trailing slash or not? One simple example would clear all this up, but so many times they don't include it. 
Depends what you are looking for. I swiped some AES encryption code from MSDN. MSDN docs can be difficult to understand at first, but if you are looking for something specific then the newer docs can be quite helpful.
100% this. I find myself sometimes skipping SO all together now and bee lining straight to the docs.
Actually, SO often encourages contributors to explain why and how something works rather than just mv "$file" "0$counter - $file"
Maybe instead of removing it from the list, just set the entry to `null`?
Apart from the massive overhead of the network requests, your interaction with the client would be limited to the browser's JS API. The Electron solution running on the client's PC has unrestricted file system access, can call OS APIs, etc.
Or use a dummy object that says 'eyo this car is taken choose another one'. If you don't really want to remove an entry, you can also just use a normal array
It's called automatic semicolon insertion (ASI): http://www.ecma-international.org/ecma-262/6.0/index.html#sec-automatic-semicolon-insertion
MSDN references are generally so convoluted. They assume you're already an expert.
Programming could be so fucking annoying...
I would use lists instead of arrays in this case. Something like **list.RemoveAt(i) ** would remove that element.
I wish I could use lists in this lab, but we have to use arraylists along with storing information in different classes.
We have to remove it from the list, and let the others move up. I'm trying to make it so if you picked car 3, instead of the list showing back up and going from 1-2 then 4-8, I want it to go 1-7 just without the original number 3 information.
Fair enough but it's very dependent on what the application is, I've been working in a medical software company for the last year and everyone is wanting to update our products to use web technologies. Other major vendors are also doing the same. What you've listed would would only be problematic for about 5% of our functionality and this is only because we're being extra careful about data loss, otherwise a full web suite of products would be ideal for us and the customer.
async/await is not parallel. Asynchronous code basically means that if a thread isn't busy, it can stop what it's doing to do something else. E.g. if you are contacting a web service and that call is being slow, let's say it takes 10 seconds; your thread is blocked for those 10 seconds, but it's at 0% load - it could be doing something else. If you make the web request asynchronous and then you await it, then whilst you're waiting those 10 seconds, the thread is allowed to do something else e.g. process the UI. Sounds like you want to use **ThreadPool.QueueUserWorkItem**: https://docs.microsoft.com/en-gb/dotnet/api/system.threading.threadpool.queueuserworkitem?view=netframework-4.7.1#System_Threading_ThreadPool_QueueUserWorkItem_System_Threading_WaitCallback_ You can have a method that scrapes the URL, and queue it for execution along with the relevant URL. It will then be executed when a thread becomes available. 
So you just need to display the numbers dynamically? like this? void Main() { ArrayList list = new ArrayList { "car1", "car2", "car3", "car4" }; while (list.Count&gt;0) { ShowCars(list); int index; while (!int.TryParse(Console.ReadLine(), out index) &amp;&amp; index &gt; 0 &amp;&amp; index &lt; list.Count) { Console.WriteLine("invalid input"); } list.RemoveAt(index); Console.WriteLine("............"); } Console.WriteLine("no more cars avaiable"); } void ShowCars(ArrayList list) { for (int i = 0; i &lt; list.Count; i++) { Console.WriteLine($"{i}:{list[i]}"); } }
Yeah exactly! So whatever car (number) they want to buy, it takes it out of the array list and continues the number incriment by 1
Pretty much. Some of the msdn stuff is useless as far as explaining things goes...it almost looks like computer generated text based on reflection...
Well.. Convert your foreach loop to a for loop like mine and you are good to go (you may need to adjust the loop variable to make the cars 1-indexed)
Oh. My. God. You saved me. I can't believe that worked. I've been messing with it for an hour trying to get everything to work, thank you so much! 
Wow thanks alot! I don't really think i deserve this, but i really appreciate it. Always a pleasure to help :) 
I haven't mixed up or failed to understand anything. At worst I was unclear. 
You do and thank you so much for the help! Quick question, how would I make it start at 1 instead of 0? I totally forgot about how to start it off that way...
I am aware, what I want is to have multiple scraper objects (they are self-contained and scrape from a base URL) to run in parallel. Right now if I did say scraper1(google.com), scraper2(reddit.com), scraper3(microsoft.com) they'd run sequentially. I want them to run in parallel. That is why I mentioned TPL.
I’m working on an invoice web app. Using itextsharp and dot liquid for parsing and rendering out word documents into html.
 for (int i=1; i&lt;=list.Count;i++) Initialize i with 1 and set the loop condition to the &lt;= instead of &lt; lenght
You'd want [Parallel.For](https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/how-to-write-a-simple-parallel-for-loop). It automatically batches and distributes work across x amount of threads based on the cores of the system.
Will it let me limit the amount of threads/concurrent calls it does? Also can I just repeatedly call Parallel.For on buttonclick (adding new url) to queue up?
You can supply additional options to the Parallel.For function to specify max parallelism count. Though I'm not sure if adding new work through multiple Parallel.For calls is gonna mess up performance. Probably not enough to matter for less than 200 tasks.
So I can just do Parallel.For(add a couple tasks that takes 1+hour each to end) then 5s later do Parallel.For(more tasks that are hourlong) while the others are still running and it'll queue them with the previous ones? I kinda want to achieve the functionality similar to say how a torrentclient works where you add torrents but only 4 download at a time but when 1 finishes it starts on next, just with scraping/urls.
In that case a good design would be using the Queue and starting those tasks yourself (keeping track when they are done, don't start too many at once based on CPU cores). Parallel.For is better when you know the amount of work upfront (which you don't). So while it works it's probably not good design.
btw use HttpClient instead of WebClient
I'm pretty sure a lot of the msdn examples were written by interns who have never used the classes they are demonstrating.
No, MSDN documentation is fine. Its hard for new programmers, but once you understand what you want (or have 2+ years in programming in C#) you just press F1 over the thing you want or what you "google" (i use bing) and you get the same info if not better than SO 
I found an msdn example last week where the example was just calling the default constructor of the class then never using it.
The new DOCs sure are nice
&gt; it almost looks like computer generated text based on reflection... wew
Yeah, there are quite a few of them where it's *really* obvious that someone was tasked with "Make sure all our articles have examples"
You would use the method I linked in the previous post. This is precisely what it does.
There are some awful examples, it's true.
That was my idea. I was considering something like this in Form constructor: Task listener = Task.Factory.StartNew(() =&gt; { while (!_canceller.Token.IsCancellationRequested) { ..dequeue and call task } }, _canceller.Token); And just add tasks to queue. But is there some "automatic keep track of running tasks" like semaphore I can implement in that so I dont dequeue if X amount of tasks are running? Or should I just implement that myself somehow?
I see, I'll try it out, again thanks!
this wasnt apparent until I read this, very true.
The traditional documentation (you know, showing you the exact same stuff as is available through XML comments) is that turned me off MSDN as a newbie programmer. I realise that there is a newer version now, but invariable the bulk of the results on Google are for the older documentation. Furthermore, I've had numerous experiences where documentation leaves out pivotal information. Like restricted field names on Azure Table Storage (e.g. timestamp). I still typically find much more useful (and indeed correct) information through StackOverflow than I do through MSDN.
Are you still looking for solutions to simple runtime problems, or more design-leaning questions? MSDN's problem is that it's too unfocused and hard to search through. Looking for 1 common problem regarding MVC routing? Here's the entire history of ASP.NET including the philosophy behind the MVC model. The documentation also doesn't really cover problems that arise from errors you made elsewhere in the program, like in the initial setup. With SO you jump in at the exact point someone asked the same specific question you did (best case scenario). That's always going to seem more useful in the moment.
I come from a PHP background and MSDN seems so rudimentary in comparison and this is what made it so hard for me to learn C# to begin with. The PHP documentation pages are great about giving examples on exactly how to use the functions and why you should use them certain ways, but I didn't get that (and still don't) from MSDN. However, I have been getting into .NET Core recently and the documentation Microsoft has been putting out on those libraries is top tier in my opinion.
This looks good. I've used [Moq](https://github.com/Moq/moq4/) in the past and was quite pleased with it until I moved to a different project with a lot of legacy code and we were already using [Typemock](https://www.typemock.com/). Would be nice to have a similar feature on Typemock.
That second option is helping me optimize my code. I don't know what I don't know until I see it in front of me.
I always, ALWAYS try to find my answers in the official documentation of the framework/language i have a problem with. I see SO as a last resort. Not the first place to visit. 
ArrayList was outdated 10 years ago :(
I find SO useful if the answer is already there, but I hate it more than anything if I actually have a question I want to ask. First someone will try and close it for being a duplicate because they haven't read the question properly. Someone else will try and close it for being off topic/too broad/impossible to answer because they haven't understood the question. Someone else will edit it for clarity, changing it into a completely different question because they too didn't understand it. Thinking about it I haven't asked a question there in a good two years, so perhaps all the over zealous moderators have buggered off.
But it's probably easier to add a `+1` after `i` in `Console.ReadLine`
MSDNs problem is that it is shit. Once upon a time it used to be amazing and was something you would installl on your local computer... Now its a giant turd.
What is that for loop meant be be doing? You don't use the value i anywhere?
`input.Contains(" ")` tests to see if the string has a blank character in it anywhere. You probably want something more like `input[i] == ' '` to see if the i'th character is a blank. 
Agreed. I just wanted to add that the braces around the quoted string are not needed. This: return $"{"The number of words are: "} {counter}" ; Can be written as: return $"The number of words are: {counter}" 
I don't know... more often than not, SO just devolves into an argument or berating the OP for not finding the info elsewhere, which would be fine if it wasn't the first hit on Google.
No, I usually do the reverse and SO is my last resort when I seriously can't get something or the knowledge is absurdly esoteric. Mostly because there's decent odds of going down a rabbit hole with SO if you don't find the correct answer near the top. Too often I've had to spend hours on something because the real answer is buried under a highly rated wrong, off topic, or unintelligible answer and a string of follow up answers linked to the incorrect answer, or closed because an answer (that is wrong/off topic) already exists. Heaven forbid you actually need to ask your own question. On the other hand the MSDN has never been incorrect in all my time using it, and entries are pretty much all written to be toneless and informative instead of sarcastic and ego stroking. Don't get me wrong, there's a lot of weird troubleshooting I'd have taken weeks to solve without SO, but it's a toxic cesspool and often not worth it if your answer could have been found in the MSDN.
I am sure it will be downvoted, but as someone a bit older I am putting this in here anyway - The "search-cut-paste" method of programming seems so much less fun than when you had to read a book to learn the language
Also to add, I'd be tempted to make a few changes to this: 1. Don't return the answer in a string, return it as an int and let the calling code handle formatting of the answer. 2. What if I put two spaces between the words...
Favourite smart ass question we came up while in University: "How did they make stack overflow before stack overflow?
Thanks for the response cronus89, the for loop was supposed to iterate throught the text input, and then check for any blank spaces - something that it currently doesn't do very well! haha Elliot
Cool, thanks for the response michaelquinlan. I will experiment with the code that you've included. Enjoy your weekend! Elliot 
Cheers ManFromOregon - the code above (input[i] == ' ')creates a syntax error. I will keep looking for a solution... 
 public static string WordCounter(this string input) { return $"The number of words is: {input.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries).Length.ToString()}"; }
Removed: Rule 4. You'll have to make an attempt, describe how it's not working, and try to reduce your code to the relevant portion.
Maybe var dictionary = JsonConvert.DeserializeObject&lt;Dictionary&lt;string,List&lt;string&gt;&gt;(json) Then index into the dictionary with the key and foreach through the values
Why not DeserializeObject&lt;List&lt;Dictionary&lt;string,List&lt;string&gt;&gt;&gt;&gt;() 
Will it understand that first level is array even if it's only one item?
There is a problem with ThreadPool, i can't set maxthreads to less than Environment.ProcessorCount which on my system is 8 but I need to limit parallel calls to say 2-4.
Ye my bad your answer is correct
If you are targeting .net 4.5 or greater, you can copy the whole Json string (like control - c), then in a visual studio cs file in your project edit -&gt; paste special -&gt; paste as json classes. And it will give something that will deserialize directly. It may not be what you want but can be a good starting point. It’s a cool visual studio trick (also works for xml). That being said: I’d probably go with the other suggestions of using jsonconvert into a dictionary.
Why not use string.isnullorwhitespace(yourStringHere)?
TIL
Or you get a snarky answer like “you should’ve known that”. Um. I asked the question precisely because I didn’t know!
In the real world, I don't have the freedom to research something to death. Get the nugget in quickly and expand from there. SO is ideal for this. I don't take SO code as gospel and the final say. It's a jump start. Fun for me is discovery and implementation, not pouring over endless and obscure methods and events. I want to know how the class is being used in innovative ways. MSDN is severly lacking in this area. No downvote from me! Good post.
I used to spend hours at Elliott Bay Books in Seattle looking for new C++/MFC books before God invented the internet. We had so little help back in the day and would continually get stuck. I always know SO is in my back pocket to bail me out.
Bunch of BS, I've never heard that criticism before. Professors just aren't engineers. That's also a pretty degrading comment to a student. Sorry that happened to him.
Your whole post makes absolutely no sense.
Maybe throw in some regex to actually count the words. All u do now is count spaces
Sounds like the professor was displaced from ITT Tech. 
It depends. You can move each class to a separate file and it's a good practice and helps to quickly understand the project structure, but it's not mandatory and defined only by agreement between the developers. Sometimes it can be convenient to have two class in one file.
If I'm only using an enum with a specific class, I typically put it in the same file or even within that class. You don't have to though, and if you're using the enum in multiple types, it should definitely stand on it's own.
Wow, was there even a coding guide they were using as a metric or did they just decide to shit on his day?
Aside from private inner classes, I think the only time I do that is when I have an Enum class and a class for of extension methods that apply to the Enum. 
If its only used in the context of a single function call in single class, then the criticism is somewhat understandable, but not necessarily correct. I do prefer having small things that go contextually together in the same file. Its a matter of the specific situation. But judging an university student for this seems like complete bullshit to me, you need some real software engineering experience in a few different teams to really start being able to judge if you should put it in a single file or merge it. It's a first-world problem, so to say.
Ought to mark the professor down for not defining project structure. Any time you work on a team project the key is to follow the consistent pattern that should already be there.
&gt; Better too clean than too messy Yes, exactly this. As someone who deals with shitty legacy code on a daily basis, I'll take a multitude of small, separate files any day.
Part of school is learning to do things the way the teacher wants, even if it doesn't make any sense. It is good training for adult life and dealing with spouses, bosses, etc.
Yeah those that can't do teach, so the saying goes. It's pretty tragic that people like that are allowed to teach. Fortunately it's not like that in the real world.
100% this. When you go to school AFTER being in the field for 20 some odd years like I did, you really understand this. I can't believe some if the things they teach these youngster wanna be programmers. Things that will NEVER work in the real world.
What is the context? Without understanding the complete situation, I can offer a quick answer. The property is a Nullable&lt;bool&gt;, meaning that it can be true, false, or null. You may want to do if (myButton.IsChecked.HasValue) result = myButton.IsChecked.Value; but I have also seen result = myButton.IsChecked ?? false;
What do you mean? It's a `bool?` where `null` is usually reserved for the "Indeterminate" state when [`IsThreeState`](https://msdn.microsoft.com/en-us/library/system.windows.controls.primitives.togglebutton.isthreestate%28v=vs.110%29.aspx) is set to `true`. As such, just use any rules for handling nullable booleans. Two pretty straightforward ways: if (myRadioButton.IsChecked == true) if (myRadioButton.GetValueOrDefault())
Just the professor's personal preference, unknown to my kid. A stern warning would have been sufficient. The kid knows his stuff, but unfortunately, could not test out of his entry-level CS classes. I'm telling him to be patient and not to be a know-it-all or obnoxious. You're only 20. Learn from it and move on. You'll hit this later in the real world.
&gt; I'll take a multitude of small, separate files any day. You can also take this too far. For example, using partial classes, you could split a class up so that each member (method, field, property) is in its own file.
I feel like I'm missing something. The RadioButton.IsChecked property *is* a boolean value. What are you trying to accomplish? If you're talking about the best time to retrieve the state of that property, you can subscribe to the *Checked* event for that button, assuming you need the value in real time. Otherwise, you can literally just pull the value from the instance of the button on the instance of the form when, for example, the user clicks a *Submit* button. 
I disagree wholeheartedly. The finest goal of teaching is to convey the ability to think for yourself based on a complete understanding of the material. Blind adherence is anathema on both counts. Not telling people not to do what is asked of them, but unless the professor explicitly laid out those terms then they are in the wrong for marking down a student for essentially biased reasons.
Looks like that's a rest API, I'd recommend restclient from the restsharp nuget package.
As someone who has been around 'the docs' for years, I can tell you that generally they write examples when the class was first written and then they don't update them often, so many of the examples are 7+ years old and written before asyn/await, null operators, Tasks...and sometimes even before generics.
I might have a static definitions class with several enums in there, grouped so I can remember where the fuck I put them or what I called it.
So if an enum is used in two classes, which file is it supposed to go in? Bad professor.
It's a *nullable* boolean
My room mate was taking online programming courses a few years ago. I sat and listened to one of his lectures. They were covering sorting algorithms. A student asked the professor what the fastest algorithm was and the professor said bubble sort. 
holy shit
"Those that can, do. Those that cannot do, teach."
Thank you everyone for answers. Everyone asked for the context of this question so I'll attach some code, both from back- and front- end. The code is in the link below: https://pastebin.com/1w9Bwx6L I also have to say, that I tried most of solutions posted here and I still don't get how does it don't work. Hope this will explain the situation and you will give me a good solution, so thank you in advance again. ;)
This guy fucks.
I agree and disagree. Thinking for yourself is important, but at the same time it is important to follow a companies code guidelines and style guides.
I agree that having too many files should be avoided.
Learning to follow guidelines is in itself an important skillset, which is why if the professor prescribes something explicitly it should of course be followed; along with the professor giving a legitimate reason for imposing that restriction. &gt; Part of school is learning to do things the way the teacher wants, _even if it doesn't make any sense._ It is the emphasized part I have a problem with. Failure to communicate a good reason behind doing something a certain way is a catastrophic failure to teach. In this case I think it is biased of the professor, and thus faulty teaching, to mark the student down for a nonsense reason.
We had a similar teacher in school. If we didn't strictly followed his policies which didn't communicate explicitly, we made "wrong" answers. The teacher was seen controversially among all of us pupils and we had often discussions with him and other teachers about him.
&gt; Failure to communicate a good reason behind doing something a certain way is a catastrophic failure to teach. Yes, I agree completely. OP's son's teacher is definitely in the wrong.
Lothy from Mopar?
Thanks, everything else works fine. I have tried byte by byte and chunked and the only difference is the the download speed at which it fails
Professors can't handle having someone do something they didn't expect. While in school to get my Paramedic (EMT-P Associates degree), one of the last academic courses I had to take was A&amp;P. On the final, there was one question that stated, draw a normal sinus rhythm, which is the electrical pulse that makes your heart beat normally. I had already taken advanced cardiac life support and passed as well as run hundreds of EKGs in the field by this point. I knew my rhythms down cold. I get the test back and got zero points. He argued that it wasn't a normal sinus rhythm and stuck to his point. I opened his text book and held his text book next to my drawing... I might as well have traced the textbook. Still no dice, no points. Fuck that guy.
What I have found from spending 10+ years fielding questions on newbie forums both C# and VB: Most schools are *trash* for actually teaching programming. The things they teach are very mechanical and often have nothing to do with "How to write good programs". They are more concerned with "you can pass an exam question about an array." Many are still distributing VS 2008 to students. The ones with VB curriculums copy/pasted their code with Val() and other VB6 constructs in them. No one teaches lambdas. No one teaches architecture. Students only develop talent if they reach out and find mentors outside of the school. Your son is going to have to learn what bullshit the teacher wants and do that just to get a grade. That's, sadly, how it works at university.
why would anyone go through that trouble without noticing that its not helping?
Partial classes are not recommended. Except for old stuff like Winforms and such where it allows to add stuff to a generated class, I'd stay away from it.
In general, how do you decide how far/much to break up a class? My general rule of thumb is break stuff up into chunks that I can logically see being used somewhere in the next few years, but not so small that I'm basically just giving a new name to something that already exists. 
By the same token, if the teacher is good (doubt it in this specific case) the teacher would listen to the kids counter argument and why is it better for maintainability, etc. honestly, if I were a teacher and I could hear a valid arguments for something that runs counter to what I think is right that I marked wrong then that would also demonstrate that the student knows why and has a good grasp on the material. 
"WHY YOU NO GOOGLE IT? " "Couldn't you just read the source?" "Your question is too specific/not specific enough." Oh the classic: "The answer to this question is open to interpretation and is not a good fit for this site." It's only open to discussion BECAUSE YOU DON'T KNOW THE ANSWER AND WON'T ADMIT IT!
Program.cs
If the enum drives configure values or something, makes perfect sense. If it's used by different classes or modules, great. If it's only included once and never changes, the profs are right. It's more about the right use than more/less separation. 
Exactly. My best professors were the ones that only had time to teach a course or two because they were still employed elsewhere. Life-long students who simply teach what they've been learning for 8 years without industry experience are terrible examples
Hiding complexity does not reduce it.
So was he not coding in C# at the time? If he's using Java or something he should follow the conventions applicable to the language. More specifically he should follow the conventions of the University even if actual programmers would laugh at them. Same goes for where ever he ends up working. If the Uni/course hasn't published a set of coding guidelines then she can fuck off and take her arrogant and unconstructive snipe with her. That said, snarky, opinionated and arrogant, she might actually be a professional programmer :)
While this is somewhat true, I would also add that it helps with version control. If you put everything in a giant monolithic file, you are going to run into versioning issues quickly (assuming more than 1 dev). Convenience is usually a bad reason to ignore best practices.
I have no idea what the accepted best practice is, but I will often stick a bunch of related enums in a combined standalone enum file.
along with _everything_ else.
It's not hiding complexity. It's one more file that can get lost while moving. One more tab to have open.
Mostly same here, though in some rare exceptions ill keep two classes that arent nested in the same file. Like a case where one of them has zero body (just a class definition that derives from the other) and isnt expected to ever have any. Though could just as easily put those in separate files too not really a big deal.
what i learned when i got my intro this summer, was to keep one responsibility with one class. current project has one class for main program (duh), one for events, one for telnet functions and one for ftp functions, and then all the auto-stuff for the form. if i were to remake it, i'd probably do a specific class for handling settings, and probably one to store standard values as enums to call them more easily through the program. that way, each class has a thing it takes care of.
Well for anything that auto generates code really. Generating a partial data layer is one case thats more modern, im sure there are more.
Cannot agree more. Asking question on SO is like eating broken glass. Maybe in the beginning SO was friendly and helpful but now it seems like moderators are all old men defending their lawns.
In those cases though it should be nested and private. If its exposed in public methods though it should go in its own file and not be nested, imo. If the team follows a different pattern for some reason though of course that should be followed instead for consistency.
That's a non-existent justification unless you're really bad at computering in the first place. Also, having "too many" of anything is tautologically bad. That's a dumb requirement.
Bogo sort is the fastest if you are lucky enough. 
This is a better answer. Though you dont need the .ToString() inside the string format.
It is making your project look neat at the file structuring level in exchange for making it oblique and ambiguous what it contains. Structure your folders and files better instead.
this is why every grade that matters in any way should be censored by a second, outside teacher. there is so much of this bullshit going on...
How are you copying from the source (DB, FileStream?) to the output? Are you doing Read-from-source, Write-to-output, Read-form-soruce, repeat? Try sucking the entire file into memory and then returning it in one big chunk. Did you do the experiment with a static file served by IIS instead of ASP.NET?
I prefer putting the enums in the class it belongs to.
That's why quantum bogo sort is a thing.
Not if you use git. I'm not defending monolithic files, but this is only an issue in revision control systems that treat files as single units.
I will sometimes have it as a public enum nested in the class if I know it'll only be used in that class. If I'm wrong and I extract an interface, I'll extract the enum too. The main thing though as you said is consistency, right or wrong. And if it's wrong, try to get everyone to agree to the better way instead of going rogue.
Which do you think is better at organizing your project elements, VS or your file system?
I'm following this practice too. Maybe I got the original message wrong, but I think it said that in C# it's always one class per file, so I just replied to this statement mostly. And yes, another (possibly, big) problem with version control would be when you finally decide to move all those classes into the separate files. It won't be easy to find the class history prior the split. Also when you look into different classes it's just easier to move between two tabs instead of scrolling from one class to another.
You joke, but a friend of mine used to work at a place that used C and they managed to write all their backend code in the main function with endless goto statements everywhere.
 static void Main(string[] args) { string test = "Hello this is a test"; Console.WriteLine($"The number of words in this string is {test.Count(s =&gt; s == ' ')}"); }
You joke, but a friend of mine used to work at a place that used C and they managed to write all their backend code in the main function with endless goto statements everywhere.
Good parenting right here, and additional kudos to you for not fighting his battles for him and guiding him instead. 
oh, i don't joke. my colleague who started learning C# after me hasn't caught on to the whole "class" concept yet. he writes windows forms with all the logic inside the event calls. it's a bit of a mess, but coming from web design he's a lot better at form design than i am, so i handle the slightly tougher logic/code things and both of us are happy :)
Yup. 99.9% of the time, 1 type per file for classes, enums, structs, and interfaces. The *only* time you nest a type is if that type is **only** used internally in the implementation of outer class.
I am afraid sometimes you just have to learn the person who is marking preferences and dogmatic beliefs - it is a bit like dealing with the architects at work - fighting them sometimes is just not worth the effort, arguing with most professors isn't going to help you when they mark assignments/exams. My recollection when going though college were some professors would be willing to accept they may be wrong/not know everything - others were just to be treated as a way to get exam results
Code coming from academia is in general considered bad. They never have to maintain it after they publish their research.
Partial classes are always cool when you have generated code not only "for old stuff like winforms"
That is a false dichotomy.
&gt; In general, how do you decide how far/much to break up a class? Through experience. The longer you program the better your intuition works but you will still sometimes overdesign or fail to apply sufficient abstraction/separation.
Java is not a good example in this case. Java won't even allow you to put a public type in the same file.
How about just use return input.Split(' ').Length
If you are losing files I recommend you use modern development practices, like source control. There’s no reason to “lose” anything.
This is what drove me away from academia. I consider myself a good engineer and I didn't want to waste that building crap. 
What if you use it in more than one class?
omfg this OR they are retired from industry and this is what they wanted to do. Community Colleges are amazing for this. I did a 2+2 program for my Computer &amp; Electrical Engineering degrees. My teachers in community college were all retired from industry. One was an ex duke energy and textiles engineer who also happened to create some of the first transistor computers. One was a retired bell labs engineer. and one was the lead engineer on the casio watch. They were all insanely smart and were masters of explaining the technical. I can't even express the gratitude and respect I have for those teachers.
It is... if your list is already sorted the vast majority of the time.
That's a pretty good point. Dumb student probably should have been more specific with his question.
I starting to learn how painful that can be with EF code first. We've got one method in the DBContext that's a few thousand lines long.
 public static int CountWords(this string input) { return input.Replace(" ", " ").Count(s =&gt; s == ' '); } That will return the count of words even if it has duplicate spaces.
Look up the SOLID principles if you haven't heard of them before. The S stands for single responsibility principle. If you can describe the class as doing one thing (at the appropriate level of abstraction) then it's good. If this "thing" involves doing multiple sub-things, then those other bits of functionality should also be isolated into pieces that do a single thing at that lower level of abstraction (the class at the higher abstraction would then delegate actions to the lower ones or pass data between, etc.)
I had a similar experience. A small college and my c++ professor was the 10th person to ever write c++ at Los Alamos National Library. My Assembly Language professor sent a rocket (NASA) to space using his code. I will always be grateful!
I had a math teacher who would pull that shit all the time in high school. Annoying at the time, but I learned to think.
Good point :)
&gt; allowed to teach Where I live you can teach without doing an extra year if you have at least a masters degree or enough industry experience. Sure, in a perfect world all teachers are people who have worked in the industry and now want to share their experience. The reality is that teaching isn't a popular or well paid job (maybe it is in American universities, not sure), so good people stay in the field.
Merges, migrations, general fuckups...all these things happen in the real world. 
*D'oh!*
Sounds better than some of my experiences in community college. I took a C++ course that was being taught by someone with no experience in the language, or similar languages, and only had about 5 weeks over summer to prepare for the course. I'm not sure anyone learned anything from that. With that said, to anyone considering community college, do it! It was definitely worth it and my other classes more than made up for that one.
Yep.
Everyone else here understood it. Why are you confused (and a prick about it)?
Ah, kind of figured. I was a mod on mopar back in like 2006-2007ish. lol
&gt; C# programmers always over class and over file what must the prof think of Java?
*When someone asks if you're cool with working on legacy code during an interview.*
Yep. High school VB was like that, college c++ was like that
Good point. The same thing happens with time estimates. At first they are all off and with experience they get better.
Also there's a silly mistake, I'll remove it tommorow and give you a sign, is it working or not.
What does this professor think of SOLID design?
Lmao 
No, not really. You're the first person on here to ask.
I haven't heard if SOLID but my first ever mentor was adamant about me following SRP and being DRY. So I may be already following the SOLID principles and not know it.
She, like jon snow, knows nothing. I'll bounce that back to you if you DON'T put it in it's own file. I want to see it in the solution when I go to make one similar. 
I struggle with this idea. If you dont explicitly know everywhere an enum is used you wont know where to find it in the project.
That's fair. I F12 it anyway, so I basically never navigate through the project hierarchy in solution explorer. But fair point.
As DOMZE24 said, MVVM is a better pattern design for Wpf than MVC. Also, you can use MVVM with mobile apps (for example Xamarin) and that way you can share code. You can use MVVM for web apps too. IMHO ReactiveUI is the best choice for MVVM. 
Xamarin forms is for mobile (and Windows 10) apps. Winforms is not as bad as people said, it is only not as flexible as wpf for the UI, but the business logic is exactly the same. 
My kid graduated last year with a BS in CS (I have the same degree). I have not gotten into his coursework since he was having trouble debugging Java in high-school and I gave him a tip or two. I recommend letting your kids negotiate with their professors on their own and not getting involved. 
There is another option, dotNetify, MVVM using the business logic in the server side, and html/Javascript (Knockout/React/
If you really need to do this, then you will have to implement your own queue.
&gt; Many are still distributing VS 2008 to students. To be fair this memory leak in VS2017 is killing me.
Who would ever do that? /s
Git can still sometimes choke on one big file when it would handle smaller ones better. For example when the file structure is very regular, for example an array of json objects.
They're also sometimes useful as a stopgap refactor, for example you can quickly break out a monolithic controller into a few files with less fear of breaking things VS breaking it out into multiple classes. it's not great but I'd call it better than nothing.
If that’s what it takes, follow the professors rule. In software companies, the coding policies may be different to what they are used to. Getting worked up about such a minor thing will only hinder their progress in their learning.
Yea that's what I ended up doing, probably not the nicest implementation but it kinda works so! =D
I learned discrete math from a guy who'd worked at intel for some crazy amount of time like 30 or 40 years. Best teacher I've had in CS in general.
Some "professors" are absolute fucking morons who haven't learnt anything since they were last in a job - that's if they even were, probably not. See the current post about some pleb docking marks for having more than 1 file.
Many years ago (I was being taught PASCAL, that long ago), our class had to write a sort program. Pretty standard low level stuff. I wrote a functioning program, but didn't format it well. Code was a bit messy and probably not commented as well as it should be, but it worked and worked well. I got a lower mark than someone else who submitted a pretty program that didn't compile. I had a fairly heated exchange with the person running that class at the time. I accept a lower mark for presentation (commenting is quite important for me now) but I feel that the program compiling and actually working should be a pretty large factor in the overall score.
WHAT THE FUCK YOU CAN DO THAT? I SPEND 4 HOURS TRYING TO PARSE SOMETHING TODAY WHY DIDNT I READ THIS
Those who can, do. Those who can't, teach. To be fair, I've had teachers who've had years of professional experience who wouldn't give a crap if you put your enum in its own file.
We have some programs done by students that looked like that. Super fun to debug.
I switched to vs code. Also mostly cause I have 1 laptop that can be considered a craptop. It's an amazing ide so far tho.
I used to work on some legacy code that had several thousands lines of code in a single method with nested if-statements that were about 5 levels deep at some points. I am glad I left that job because the lead developer couldn't understand why that was bad practice. :P I mean, the method's name might as well have been "DoEverythingThinkableUnderneatheTheSun" or "EPluribusUnum".
I lost points for separating items into separate files for web applications. The instructor wanted everything in a single file. PHP, CSS, HTML, and JS. The web project was for an online shop. 
It's easy to bash teachers with that phrase but you'll find "those who can't" in every profession. But unlike other professions, teachers work in full view of a class full of students who may not be experienced enough to understand or appreciate the context and/or be influenced by the [Dunning-Kruger effect](https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect). See the bubble sort example below which by the sound of it has been spread far and wide as an example of incompetence because the teacher's answer could be considered a terrible response in one context, yet as pointed out by the comments it is actually the correct answer in another context. We aren't told the context and it's very possible the student wasn't aware of it at the time. I'm not saying there aren't bad teachers, just that they are no more prevalent than in other professions.
Looks like that worked! Thanks! 
Take a look [here](https://msdn.microsoft.com/en-us/library/system.intptr(v=vs.110).aspx) at the MSDN page. There is no "Address" method. I assume you want to convert it to an integer? Perhaps the `ToInt32` or `ToInt64` method?
Wow, I usually call out not doing that and will ask fellow developers for put enums in their own file when doing a PR.
As to why this is the better answer, ask yourself this: what if the sentence you input has several spaces in a row? Then, in the original code you have/using the top comment here, you add 1 to the word count for each space. That is an issue, however, because two spaces in a row is the equivalent of 0 words, not 2. Therefore, splitting the string into an array on spaces, and removing the empty strings from the array, you get only whole words, and can then use that as your count.
My opinion is that good teachers won't mark you down on style unless it's completely absurd. If they do have a preferred style guide then they'll be forthcoming with it, rather than expecting you to be a mind-reader.
These days I'd side with the professor (but not back then). Today it's far too easy to cheese a sort solution off of the internet to make it work.
To be fair, "you can pass an exam question about an array" translates very well into "you can pass interview quizzes". Unfortunately.
And if is a class library? ADD a program.cs.
At my shop one of our code standards is to have classes, enums, and interfaces in their own files all the time. We will not approve a pull request that contains code that doesn’t follow this rule. 
Removed: Rule 4. Please include the relevant code.
That fixed my latest error, which was that I needed to reference netstandard 2.0.0.0. Thank you! 
And I am assuming that documentation is being used in Amazon internally and wont be published to public
I maintain about a few million lines of c#. I've done it three ways. * One enum in its own file. Usually for big enum with lots of docs. * Several enums on one file. Usually for lots of small enums. * An enum in the same file as a class that exclusively uses it. Your professor? Sounds old school and pious. Put enums in whatever files you want. Just make sure there's a logic to it and you're consistent. Then tell your kid that nobody has it figured out and talking down to students shows insecurity more than it does wisdom.
I had some points removed on an SQL test last month because I choose to do a SELECT statement using the 'id' field of a table, instead of using the "name" field. I still get upset about it. 
That's not too surprising. There's one difference you'll see between community colleges and universities. *Some* university professors absolutely hate teaching(or somewhere on the spectrum of dislike) and really only want to do their research and have some free workers to help with it. Some of them accumulate grants and get paid to do very little. I doubt someone retired has an interest in dealing with all that. I used to be responsible for writing the grant for one long term project, and 3 professors each got paid out of it, and they did nothing but attend a weekly meeting that was fairly unproductive because we spent more time explaining to them what we were working on.
Just passing by to say it's great you told us, but we hope you let him fight this battle with his prof because he's in college. Profs suck and I know a lot of jobs that won't hire kids that got over a 3.5 because they're shitty engineers. Pat the kid on the back for being worthwhile and not a useless academic.
Everyone handles book/learning styles differently so it can sometimes be difficult to find one that works for you. Take a look at: http://www.csharpcourse.com/ or http://www.headfirstlabs.com/books//hfcsharp/index.php Don't forget to go through the various resources listed in the sidebar.
Why are you looking for answers? The only important thing to learn when it comes to development, is learning how to research and learn. Don't do anything else for him, unless you'll also do his work when he gets a job.
C students make the jobs, B students work for them, A students work for those guys.
The teacher that finally made calculus click for me when I was right out of high school was a guy at my local CC. He used to be a mathematician for the dept. of Energy - nuclear science and the like. First day of class, he told us to take our books back for a refund - we only needed to take notes of his presentations. Never once saw him open the book or use any reference material- he knew everything backwards and forwards, and could explain anything ten different ways until you understood it. He taught because he enjoyed it.
Can you elaborate what's wrong with MVVM? IMHO, MVVM is not bad at all, even several Javascripts frameworks are working with MVVM. As I said, I'm using ReactiveUI, even for small projects and it works great, I share the same ViewModels in my Wpf and Xamarin projects and the only one thing I need to generate is the views, and now it is possible to reuse the business logic (view model) in mac apps. 
That's something common with practically all patterns, MVC, MVP, MVVM, etc, all of them need your own base classes, and you also need to know how the pattern works. 
Whether an Enum goes into its own file or is in a file with other structures is usually determined by standards of the company you are working for. I have seen it both ways and there are arguments for doing it either way. If in the context of the class, the professor laid out the coding standard to have enums not in their own file, then he was right to mark it as incorrect. If he did not establish those standards, then you could have an argument with the professor. But this would be are argument for you son to have with the professor, parents should stay out of it.
at least we *could* have less files if we wanted to.
F12 in visual Studio goes to definition. 
Learn WPF and leave his ass in the dust. WinForms is a nightmare. Form design is so much nicer in XAML
Git is good at merging, but it is still better to not merge than do a better merge. Also looking at shorter histories is better than longer histories. 
Private classes implementing public interfaces is the bees knees though. 
Those who can, do. Those who can't, teach.
Maybe not *that* far, but I have seen code "in the wild" that split classes into separate files for private/public/protected members.
Generally, I don't use partial classes except when interacting with generated code (WPF/WinForms/EF/etc.) or when I have a big nested classes.
In general I don't use partial classes. But there are a few rare occasions where use of one makes it neater to break things up beyond 1 (or more) class per file. For example: I might break a class into separate files if there's a large nested class.
I view WinForms as equally depreciated as WPF at this point. They'll both be supported forever, but they aren't what MS is pushing. Separate the algorithms from the presentation layer and use what you like.
Books are so last century.