cheers mate ill check it out then!
Are you sure you're not thinking of execution contexts? The default behavior is to capture the synchronization context, which is then used to schedule the continuation back on the original thread after the async task completes.
Yeah actually I mixed it up - in our company we use an internal base scaffold package, which references System.Interactive - there it is. It's an amazing package, lots of convenience methods without too much bloat
The "back on the original thread" is the point. You don't need a synchronization context for continuation in general, if you don't care on which thread it will continue.
What you're describing isn't the default behaviour of async / await. Synchronization context is essential to the default behaviour. 
Watch some shows about programming from the 80s-early 90s; OOP was getting crazy popular in large part because of it's suitability for GUI programming. 
One is a superset. Core is base .NET not to dissimilar to what we had in Framework 2.0 over 15 years ago with some additional flavor and improvements based on history. ASP.NET Core is core with the ASP.NET for Core processor and supporting libraries. If you are creating a portable application you might just want barebones core.
This is serious mis-information. .Net core is not something from 15 years ago. 
You do not need a synchronization context for continuation. Create a console application and add a async Main method. Unless you create one on your own, `SynchronizationContext.Current` will always be `null` - because there is none. The `SynchronizationContext` is needed to schedule the continuation on a specific thread, but it's absolutely not needed for scheduling continuation at all.
&gt; touched mvc before is this a good start? Yes.
&gt; C# is an object oriented language, you can't write C# without using object orientation. You can absolutely write your own C# code without using any of the OOP concepts. It's just not nice.
cheers ill get to it then 
The first link, to be clear. It's an introduction to MVC.
This post seem quite late. Like two months late maybe? Anyway the super-fantastic thing that I see now is .net core + .net standard and full framework 4.7. Here is what I can do now: I can convert all my previous full .net windows forms apps to framework 4.7. It is like change framework in visual studio and boom! Done. Next I take all my shared libraries and convert them to .net standard 2.0. Process requires new projects so it is not exactly boom+done, but still pretty easy. Then I add references to new .net standard libraries instead of old full framework libraries. My old windows forms apps run on windows and use .net standard libraries. Nothing too exciting yet but hold on. Then all my console apps get converted to .net core and they use .net standard libraries. And here is the sexy part. All my .net core console apps can run on windows, linux and macos. All my .net standard libraries can be used on windows in winform apps and on other platforms by .net core apps. One more thing: the number of APIs in .net standard expanded so much that I was able to convert my full network c# code into .net standard without any changes. With .net core v1 it was pretty painful but with v2 it is easy. It is seriously mind blowing stuff. I am not 18 year old BTW so you can imagine that I am really impressed.
what is the second link about? 
code first. i'm not sure that EF fully supports DB first approach anymore, but i could be wrong about that since I only do CF, but i thought i remember hearing something about that.
The second link is Web API. You should learn MVC first, because Web API is built on MVC. MVC is used to make websites with web pages. Web API is used for programmatic access to server resources. An MVC site, mobile, desktop application, e.t.c. can be supported by a Web API. If you're interested in web development, then I recommend starting the Web API series once you finish MVC.
ah great thanks for all that info!
I was always taught to do dB first, outline all the classes out in UML, make the database based off those initial classes and then create the models on the code side. Not sure if this is the correct approach, but it’s how I learned to do things.
Code first. I don't think I've never opened a old project (we inherit old projects from time to time ) and had the edmx work, its now our habit to remove any database first as soon as possible so that we can reliably make changes if we need to. If you really want to design the database in the database, you can use the wizard to generate code-first after you are finished with the design. 
i'm reading through it now and it still applies. in fact as someone with pretty good knowledge of the language, the book is very detailed and i'm learning new things.
If fluent in both it doesn't really matter. I try to avoid EF though, even in the latest versions some stuff is just plain wrong (three table lookups with simple joins has had (for me) about 50% hit or miss) 
Code First, but with a separate database project. I don't like having code generate schema and prefer to fine tune things via a database project.
Do you have a dedicated dba that knows his stuff? Go database first. Do you just have devs that need a database? Go code first.
No its not something we had 15 years ago. But it is LIKE that in its scope and what its signatures cover. The biggest difference are correction from APIs that were admittedly broken due to legacy from 1.0 and 1.1. Not being hampered with those same issues Core was free to write more sensible APIs where legacy had made things quite confusing. 
I was really happy with .NET 1.0. I never once thought that I couldn't do something with it that I could with VB 6. And for the most part all of the tooling just worked. I still don't feel that way about .NET Core. 
Goto CodeWars.com and test your coding skills on trivial challenges of increasing difficulty. You get points for every challenge solved, usually like 3 points each for the easiest ones to 20+ points for medium ones. In my opinion if you get 2000 points on CodeWars purely focused on a single language like C#..... you've close to mastering that language. 
This right here, if I have to use EF, is the way I prefer it. Too many weird and flat out wrong, messy, crappy DB implementations seem to come from a pure code first mentality.
Just remember, all of the above is great until you have an odd 3rd party control or you are a poor bastard stuck in WPF land. 
Not really. All UI stuff can be separated into full framework assemblies and the rest of non-UI stuff can move to .net standard dlls. I did this with my code that I had for ages. My UI code and some custom controls in external libraries are included in windows full framework Exe but all shared libraries that do not reference any windows-specific WPF or WinForms components are now .net standard libraries. 
&gt; all shared libraries that do not reference any windows-specific WPF or WinForms components are now .net standard libraries. You disagree with me in the first line then agree in the last. I just can't even anymore apparently. 
Look at .net standard 2.0. It is seriously different. I do not understand how MS developers could pull that off. I wasted few years with Windows Phone and went through all the mud with silverlight apps, windows 8 apps and then UWP. I did not expect much from .net standard 2.0 but when I tried it I was blown away. By the way I am not working for Microsoft because I may sound like Microsoft is paying me now. I am just excited. Years of pain are finally over ;) 
CodeWars focus on tiny algorithm, is funny but not worth training.
Oh I agree it is a great change but that was not the question I was answering. Apparently for many equating or relating the new Core system to anything old is hearsay even though Core exists because of framework and much of what we are getting is the result of years of framework developers pushing on Microsoft. .NET Core and the Standard libraries are in essence a .NET do-over but that does not mean the relationships are gone. When the person asked what it was like I explained it was similar to .NET 2.0 and ASP.NET back when it was the thing. The fact is both 2.0 Framework and 2.0 Core want to do the same things. 2.0 Core with Standard is able to do those things on more platforms. 
I agree that CodeWars is a nice way to practice practical programming skills. Structure and algorithms in a fairly limited scope to really hone specific aspects of the problem domain. It's also neat to see all the other answers, once you figure out your pwn answer. Picked up a few tricks that way. Also being able to workout the same problem with other languages can give some insight about different ways of doing the same things.
There is no doubt that 1.0 did feel like a beta. However it was more of the idea of getting attentions and becoming attractive. 2.0 of core will be a conversion point in my eyes 
There is Action delegate also, that may work in your case.
Is your model well thought out and planned already? Then DB first. Are you still figuring stuff out and writing classes accordingly? Code first.
Removed: Rule 3, Rule 4. As others said, it's pretty suitable. Pretty easy to represent GUI components as "objects", and read/write data to those components using "objects" as well. OOP does a good job of representing stateful data that can change.
Code First. It creates an environment where testing becomes so easy. I can type in a single command and create the entire DB from scratch and seed it. This approach also enforces this concept. You can't get around it. It is not what you are use to, but you will have the most solid testable and repeatable project around. 
minor correction: [4.7.1](https://docs.microsoft.com/en-us/dotnet/framework/whats-new/index#v471) is .NET Standard 2.0 compliant, not 4.7.
This is the way I go as well. Although I still call it "Code First without migrations" as I always associate DB First with EDMX in my head (which is a dead tech).
Add a `Console.ReadLine()` to end of `Main()`. When debugging your program is probably executing and closing quicker than you can see. 
Did you men to reply to OP?
I didn't make it clear, but i was adding to your response.
Code first Always. Model the DB outside of whatever development environment you are using because the model is just a design/requirements document. Decouple code and database.
"Good practice" is very subjective. I like it in certain cases. All you can really do is think of the pros and cons and decide if you think the benefits outweigh the costs. As someone pointed out, C# 7's local functions fill the same role, and I think the same concerns apply. One of the major downsides is calling a method is always slower than inlined code, and calling a delegate is always slower than calling a method. So you pay some performance cost when you do this. It's almost always a trivial performance cost, so this is rarely the reason to avoid it. Some people don't like "nesting" functions like this. They'll argue you lose the ability to individually test that method. This is a valid point, but may not be a reason to avoid the practice. Think about the unit tests for the enclosing method. Will they incidentally assume the functionality of the nested function is there? If so, the argument is weaker because it's likely your unit tests will completely exercise that method. Also: consider satisfying their testability concerns would involve exposing that method publicly in some way, or introducing it as a dependency to the class. Sometimes this just isn't appropriate, and that further weakens the argument. So I think this practice is OK so long as: * The method is very short and does something deterministic (large nested functions with logic are confusing.). * It's not being performed millions of times (performance is a concern.) * It's something intrinsic to the functionality of the method anyway (testability is a concern.) 
&gt; s great until you have an odd 3rd party control or you are a poor bastard stuck in WPF land. This would suggest that an odd 3rd party WPF control would force you to have everything on full framework. It is not the case. I have a windows form app that uses 3rd party forms component and also uses my own .net standard libraries that also run on linux. It is technical stuff. Not politics. I do not want to "win"
Yea on a fresh project I'd build the DB structure, then API then handle the apps and sites etc. If it's a project I'd expect to run longer than a year anyways.
didn’t you change the startup project from your solution ? 
That code... is not very bright. What are you trying to achieve? Do you want to send a filtering expression over tcp? Does it need to be any anything? Does you only need to express certain filtering options? Something like maybe have a class to pass filtering info class ItemFilters { public bool? IsEven { get; set; } public int? NameLength { get; set; } public string NameContains { get; set; } public int? IdGreaterThan { get; set; } } and pass a serialized instance of it. On the other end, you can generate the query like var query = items.AsQueryable(); if (filters.IsEven.HasValue) { if (filters.IsEven.Value) query = query.Where(item =&gt; item.Id % 2 == 0); if (!filters.IsEven.Value) query = query.Where(item =&gt; item.Id % 2 != 0); } if (filters.NameLength.HasValue) { query = query.Where(item =&gt; item.Name.Length == filters.NameLength.Value); } if (filters.NameContains != null) { query = query.Where(item =&gt; item.Name.Contains(filters.NameContains); } if (filters.IdGreaterThan.HasValue) { query = query.Where(item =&gt; item.Id &gt; filters.IdGreaterThan.Value); }
Will code first handle nested types? For example if my `Foo` object has a public `List&lt;Bar&gt;` property, will CRUDing the `Foo` object CRUD the `Bar`s as well?
Just looking for alternatives to sending a Func&lt;&gt; over tcp. The code itself is just something I was tinkering with. Not looking to send that example itself.
&gt; I still don't feel that way about .NET Core. Why not?
I am not really sure. What I am sure however is that an Expression&lt;Func&lt;&gt;&gt; can be analyzed and serialized, but probably you will have to do it yourself and limit it to certain things only. Like imagine in your client code, the one that will send it over tcp to a server, you have private bool Something(string foo) { ... } and you end up trying to send the following expression Expression&lt;Func&lt;bool&gt;&gt; expression = item =&gt; item.Id % 7 == 0 &amp;&amp; Something(item.Name.Reverse()); What if the server doesn't have a `private bool Something` function? What if it does but it is not the same? And so on.
I have a console.readkey also... huh-weird.
I saw nothing obvious with your code except your stream handling seemed a little weird. &gt;The Abort method will synchronously execute the callback specified to the BeginGetRequestStream or BeginGetResponse methods if the Abort method is called while either of these operations are outstanding. This can lead to potential deadlock issues. When I run some sample code using the following: async void Main() { Client client = new Client(); RequestData requestData = new RequestData() { Url = "https://www.google.com", }; for(int i = 0; i &lt; 50; i++) { WebResponse webResponse = await client.Get(requestData); if (webResponse.StatusCode == HttpStatusCode.BadRequest) { Console.WriteLine(webResponse.Response); } Console.WriteLine("Request #{0} - {1}", i + 1, webResponse.StatusCode); } } using (HttpWebResponse httpWebResponse = (HttpWebResponse)await httpWebRequest.GetResponseAsync()) { Encoding encoding = Encoding.UTF8; using (Stream stream = httpWebResponse.GetResponseStream()) using (StreamReader streamReader = new StreamReader(stream, encoding)) { return new WebResponse(await streamReader.ReadToEndAsync(), httpWebResponse.StatusCode, httpWebResponse.ResponseUri); } } All fifty requests go through with an OK status returned.
open a new form, and drag a report viewer onto it. This will update all the references to the new report viewer I believe. It has been a while since I've upgraded versions. 
Thats what I was afraid of, was hoping there was a different way that I could not remember. I do know that each item will exist server side with a few interfaces for sending and receiving.
This of course only works if your password rules require a character class that is *not allowed* in usernames. For example, I could make a reddit user called `A_supersTrong__Us3rn4m3` that ticks upper, lower, digit, and special character (assuming underscore counts as one in your rules).
Here's a nice discussion https://stackoverflow.com/questions/23253399/serialize-expression-tree The accepted answer involves a 3rd party library that serializes it as json. The other answer elaborates on implementing your own protocol for it.
Yesterday it was EF Core not natively supporting views and shitting itself when I tried to adding it. Adding an entity representing ViewC broke a query that only touched TableA and TableB. The day before it was not having access to Code Analysis, something I've been using consistently since FXCop was a stand alone tool. Last week it was how ASP.NET Core uses `ModelMetadataType` instead of `MetadataType` even though they do exactly the same thing.
Because developers write code that doesnt polute the ui layer so its really easy! Yay. (Dream sequence ends with out hero quietly headbutting his desk)
&gt; but all shared libraries that do not reference any windows-specific WPF or WinForms components are now .net standard libraries. Reminds me of working with Silverlight. I made as much as possible into PCL style libraries so I could unit test it without launching a browser.
Yeah he is right, .net core has been a bit of a cluster fuck to date. Late breaking changs in the beta or even between vq and v2. Odd stuff that was just missing. There is something seriously broken with the web hosting on my machine that i havnt had time to look at. From memory Net 1.0 was rock solid even in its beta release to the point we released commercial software using it before it left beta.
Very interesting, I will take a look at that. Thank you!
I've modified my Client class to reflect that, but I'm still seeing the same results. I've modified the requests I make to be simple get requests to the sites home page, and it works with no issue. So I'm thinking it has something to do with POST requests, or the context of the requests.
Last time I had to do something similar, I kept an identical collection of Funcs on both sides of the wire. Then I could get away with transmitting a key/index.
Try taking a look at DynamicResource. Relevant SO https://stackoverflow.com/questions/200839/whats-the-difference-between-staticresource-and-dynamicresource-in-wpf
How is any of that comparable to .Net Framework 1.0? * EF first came out with .Net 3.5. * I'm not sure when Code Analysis was added, but I doubt it was there for .Net 1.0. And [a replacement](https://github.com/dotnet/roslyn-analyzers) does exist, even if it's incomplete. * .Net 1.0 was brand new, so a similar issue couldn't have happened there. You don't seem to be judging it as a new product, but as a continuation. There's nothing wrong with that by itself, but then the comparison with .Net 1.0 doesn't make much sense, I think.
What I said: &gt; Just remember, all of the above is great until you have an odd 3rd party control or you are a poor bastard stuck in WPF land. You said: &gt; This would suggest that an odd 3rd party WPF control would force you to have everything on full framework. If you say so. Thanks for putting words in my mouth if you dont want to start arguments on the internet you should stick to what is written and stop replying to implications you put in your own head.
Code First, in the past I did with large and small projects because the EDMX from Entity Framework can become a giant mangled mess.
It's hard to say what happened without looking at the code. At least Program.Main() method.
I thought about that, but was looking for something less hard coded.
Take a look at [GraphQL](https://github.com/graphql-dotnet/graphql-dotnet) and [OData](http://odata.github.io/odata.net/) Both have a text expression based language that can be easily transmitted over tcp.
A semi-convenient way to read csv files in C# is to add a project reference to the Microsoft Visual Basic library and use its built-in parser: using Microsoft.VisualBasic.FileIO; /// &lt;summary&gt; /// Reads a delimited (tab or csv) file into a table. /// &lt;/summary&gt; /// &lt;param name="path"&gt;Input file path&lt;/param&gt; /// &lt;param name="delimiters"&gt;Delimiter(s) separating each field&lt;/param&gt; /// &lt;returns&gt;DataTable containing data and column names&lt;/returns&gt; public static DataTable ReadDelimitedFile(string path, string[] delimiters) { var dataTable = new DataTable(); using (var parser = new TextFieldParser(path)) { parser.SetDelimiters(delimiters); parser.HasFieldsEnclosedInQuotes = true; // This foreach block assumes that 1st row contains field names. string[] fieldNames = parser.ReadFields(); foreach (var fieldName in fieldNames) { var column = new DataColumn(fieldName) { AllowDBNull = true, }; dataTable.Columns.Add(column); } while (!parser.EndOfData) { dataTable.Rows.Add(parser.ReadFields()); } } return dataTable; }
Code first, up until it ships to production the first time. After which EF's code-first / EF migrations get disabled and we switch to FluentMigrator. Sometimes we'll just start with FluentMigrator as a way of creating the database to match the models. EF6 migrations are too fragile to trust.
LINQ to SQL, which is even older than EF, supported views and stored procedures from day one. They have literally a decade of ORM knowledge inside Microsoft and they still can't get the basics right in EF Core 2.0. What madness is going on there? Did you know they basically ripped out and replaced the provider model for EF Core 2? Big sections of it are a complete rewrite from EF Core 1. Which itself could have used EF 6, but instead choose to do a rewrite. But really it doesn't stop there because EF 4, 5, and 6 all had some pretty serious breaking changes from what came before them as well. At this point how any anyone trust the Entity Framework team to not get bored and rewrite everything again?
&gt; &gt; I'm not sure when Code Analysis was added, but I doubt it was there for .Net 1.0. And a replacement does exist, even if it's incomplete. FXCop was a standalone tool in the .NET 1.1 era and integrated with Visual Studio in 2005. 
Unfortunately this will not work. It does not allow for a multi character delimiter. Each delimiter that is given is put into a character array and the array is gone through on each line. So if you say your delimiter is “\r\n” it will have everything with \r be a new line and then each \n that it comes to without a \r will be a new line. Doing it this way even with the Visual Basic library I’ve not been able to find a way to only set the delimiter to \r\n when they appear together. 
I mostly agree, but the performance difference between a delegate and a method is usually very negligible. Probably depends on whether the delegate gets cached or not though.
I think skipping EF altogether is the best approach. Go DB first and use a micro ORM like Dapper. 
That doesnt make sense. What is the code you are using *after* you are splitting, or what are you using to *view* the results? Splitting on *just* \r\n will *NOT* split on just \n. However, if you are *viewing* the output in a text editor for instance, it *will* line break on \n, generally. Similarly, whatever you are using to process the lines afterward may line breaking \n on you.
To convert an integer to hex use .ToString("X") 10.ToString("X") For example, = "A"
And if you breakpoint at program entry, everything is working and Environment.UserInteractive evaluates to true? 
Dont even bother going down this road, its as fools errand. Fixing the UI problem as others have mentioned would help a lot (IE so the user is less likely to mistake the username field as the password field). I would also suggest not logging the username at all in this case, but log say the user ID. This only works if they typed in a valid user ID. If they dont input a valid user ID im not sure you need to log any of the data, its not going to help you much at all. Simply displaying an error message to the user and logging that should be sufficient.
Yes. You can explicitly handle all of that with code first. 
It certainly hasn't worked well in my recent attempts. No working projects. Code first is way less of a hassle. 
Ill post tomorrow. 
Yes, conceptually it is DB first, but you generate the "Code First" entities from the DB Project. This was my workflow with LLBLGen as a generator, but you could replace that step with other tools for generating the Code First models: https://www.reddit.com/r/dotnet/comments/7235wn/ef_code_first_with_db_first/ You could instead of LLBLGen use this: https://i-msdn.sec.s-msft.com/dynimg/IC716048.jpeg Or as in comments: https://github.com/ErikEJ/SqlCeToolbox/wiki/EntityFramework-Reverse-POCO-Code-First-Generator
I'm not sure you want something less hard-coded. You're begging for an injection attack if a client can determine what code a server can execute.
Is Gal Godot a type in this engine?
Add back one line at a time until the problem re-occurs
Slightly off topic but can I ask which DB you prefer for EF projects? I went with MS SQL recently and am coming to regret it a little due to the increased hosting costs. I'm sure MS SQL has some great benefits to justify the expense but not for smaller projects.
So maybe I’m misunderstanding everything that is happening. I’m looking at my file in notepad++ after I split everything up and the file is exactly as you described. Your telling me how it looks is just an effect of the text editor? The reason I’m asking this is because this is going to get processed by a software to intake the data but requires smaller files to do so for reasons I don’t understand as I don’t own that end of the system. But this data can’t be split up as it reads it. So if it’s just an effect of the text editor then my original solution will work. Is there anyway to confirm this outside of the debugger so we can prove it to our business partners or do I just have to ask him to take my word for it?
Yeah, that was kind of what I was getting at.. it has to be somewhere anyway. Not sure the value this approach brings.
0xd4d is a beast. I use dnSpy on a daily basis at work, and it's a god send. I cannot recommend this software enough.
&gt; They have literally a decade of ORM knowledge inside Microsoft and they still can't get the basics right in EF Core 2.0. What madness is going on there? I keep getting the impression it's a new youthful team possibly repeating the occasional mistake of the past.
All of his projects are great. a+ coder.
I've done that. I've narrowed it down to POST requests. I can do the GET request I need to use over and over with no issues. But when I do the post request ~20 times it hangs. I still think it's a code limitation and not the server. But I just can't seem to figure out what's causing it.
Exactly. Except I've been thinking that since the ADO.NET team acquired and killed Linq to Sql back around .NET 3.
If it is simplified to nothing but the essentials and the POST request it still does that?
Apart from the things that the server requires, like accept and encoding ( which for some reason it seems to require). I removed the keepalive "hack" and the service point bits.
And it still times out after 20 requests with the bare minimum + POST?
Yes. This is making me want to pull my hair out.
True, although I would suspect any user input would require some level of validation and verification prevent that. However with my question I am looking or alternative ideas and I haven't crossed off your suggestion.
It does... posting code tomorrow.
Yes, to confirm it, in notepad++ there is a show all characters button. Looks like a backwards P (paragraph). If your output is say "line4\n\line5" which is one string, would show up in notepad++ as line4[LF] line5 Now I have no idea how you, or this other software, will be processing this so its difficult to say what will happen, its still a bit unclear what the problem was (unless it was truly just this display problem). 
Both, write the database then generate code first from database; whenever you need to refresh delete context and generate code first from database again (never use Edmx or migration both suck) The benefit is that the code first objects will have the dataanotations so you can easily validated before save. And don't get mired in Edmx/migration hell. You can even customize the templates that generate the code first with: https://www.nuget.org/packages/EntityFramework.CodeTemplates.CSharp
My personal plan is to migrate my two active professional (i.e. I am paid to work on them) to ASP.NET Core on top of Full Framework keeping the business layer as it is. Then at some point in the far future (who knows, maybe .NET Core 3?) I will migrate to .NET Core.
Build some sort of large project. Include things like an API, database access, networking, expandability and maintainability.
Codefirst is easily one of he stupidest ideas anyone has ever come up with. I can’t tell you how many projects I’ve had to clean up because some devs decided to go “full retard” and just make data structures silly nilly. 
What's the return value? I don't think you're supposed to pass null as a handle. A quick google shows that that used to mean global change, but it looks like that's been deprecated for a while.
PCL was nightmare quite frankly. Maybe it was just my situation but with .net standard I was able to convert all shared code to linux-usable one in just one day. With PCLs I could not make a single DLL that I could share between windows phone and windows desktop. 
Tried the same program on another computer to see if maybe somehow its a system setting?
Maybe a bit off topic but coding tests just irritate me. One would think that world is full of developers solving ten programming puzzles before breakfast and that companies need crazy complicated tests just to get few geniuses out of thousands of super-bright devs. Reality is quite different. Also I would rather hire developer who has own trivial open source project on github than genius coding puzzle warrior.
True. I was just using it to get around unit testing limitations. 
youre right, but it 'works' regardless, at the expense of potentially valid usernames being redacted. (for certain values of 'works') 
The madness is that the original designers of core don't seem to have thought about interoperability with the full framework at all. Really basic shit wasn't even thought about which is why we had that dramatic about face on project.json. This has put the adoption of core in the existing community on the back foot from day one. It's caused massive changes and issues for everyone involved and made everything just suck. Net Standard 1 was so woefully incomplete you may as well not have bothered. 
Thank you. This is what i was looking for. 
They are quite good. I ask a surprising number of those when I interview people. I was surprised, I don't expect you to be surprised.
And are also more efficient. 
Private methods, like inside another method, are essentially free. 
I agree with you on all but the last point. At least .NET Standard was a step in the right direction.
I'm currently using ASP.NET Core on top of IIS + .NET Core. Though I have to say I would have preferred to do it your way, I'm pretty happy with ASP.NET Core as a REST server thus far.
I've been using .net standard 1.6 for a professional application for 5 months really doesn't feel like a beta. VS is a hot stinking pile at the moment tho, I get 4-5 fatal errors a day...
Standard was a step in the right direction, standard 1 was so incomplete as to be meaningless. 
That seems to be a .NET core thing. When I work on .NET Framework projects I don't see anywhere near as many VS crashes. 
Definitely. - https://github.com/Calinou/datcord_bot/blob/master/gdmeme/galgodot1.jpg - https://github.com/Calinou/datcord_bot/blob/master/gdmeme/galgodot2.jpg
Here is a list of threads in other subreddits about the same content: * [C# 8 – The Shape of the Things to Come](https://www.reddit.com/r/dotnet/comments/785yxj/c_8_the_shape_of_the_things_to_come/) on /r/dotnet with 63 karma (created at 2017-10-23 14:39:55 by /u/RubiksCodeNMZ) * [C# 8 – The Shape of the Things to Come](https://www.reddit.com/r/programming/comments/78e9hr/c_8_the_shape_of_the_things_to_come/) on /r/programming with 0 karma (created at 2017-10-24 15:46:43 by /u/RubiksCodeNMZ) ---- ^^I ^^am ^^a ^^bot ^^[FAQ](https://www.reddit.com/r/DuplicatesBot/wiki/index)-[Code](https://github.com/PokestarFan/DuplicateBot)-[Bugs](https://www.reddit.com/r/DuplicatesBot/comments/6ypgmx/bugs_and_problems/)-[Suggestions](https://www.reddit.com/r/DuplicatesBot/comments/6ypg85/suggestion_for_duplicatesbot/)-[Block](https://www.reddit.com/r/DuplicatesBot/wiki/index#wiki_block_bot_from_tagging_on_your_posts) ^^Now ^^you ^^can ^^remove ^^the ^^comment ^^by ^^replying ^^delete!
Not surprised to see you so using on entity framework. Which product do you sell again? Views are easy to add https://jessedotnet.com/2016/04/13/entity-framework-7-rc-modeling-and-connecting-to-sql-views/ You basically as it as a table but ride the auto gen table code with your create view code. I've been doing that since EF 5 or 6 without issue. And you can always just straight up call raw SQL
it is precisely because in reality Client need doesn't really involve deep reflexion and can be easily resolve with poor design, that i really like those challenging tests.
Returns 0. And I found the new sdk, worked for a couple of hours only to see that the webbrowser creates a new instance in the audio mixer and I can't control that. Still nice everything else is working
With EF I did DB first, not for any good reason, just because that's how the company did it when I joined. I hated EF and had endless problems with it. NHibernate worked a *lot* better for me. 
I used to hire programmers. (I'm kinda retired now.) I had a test of 250 questions I wrote to test general programming knowledge in a number of broad topic areas, organized by difficulty. (These included CSS, HTML, Javascript, SQL, and C#.) Programmers were *not* expected to be able to answer all questions, how they reacted to questions they couldn't answer told me a lot about them. (A good programmer would say "I don't know," and talk a little about how they'd figure it out. A medium programmer would say "I don't know" and ask for help. A bad programmer would be mistaken. A really bad programmer would BS an answer.) I didn't ask anyone all 250 questions, I'd ask randomly selected questions and increase the difficulty in each section until they were out of their league, and I'd know what their knowledge level in that topic area was. But at the end of it all we had a set of 7 questions, which were actual programming exercises the candidate was asked to solve on a whiteboard. Most people would only be given one of those (randomly selected), a senior candidate might be given 2. (We didn't expect perfect working code, a good approximation in pseudocode would be great.) Nobody ever flunked the 250 question test and did well at the practical exercises, but sometimes people did well at the knowledge questions but failed badly in the exercises. Those are people with book learning who can't actually code. Some people did well at the exercises but proved difficult to work with, but social fit is another story. Every exercise was designed to allow them to write it iteratively or with Linq. (You could write a solution in, for example, maybe 30 lines of C# iteratively, or maybe 4 lines of Linq.) This was intended to help show whether a candidate took a brute force approach to the problem or thought about it. Honestly, *none* of the candidates in 4 years *ever* solved a problem with Linq, and they were all shocked when I showed them how easily it could be done. I think the best way to gauge your *own* skill level is to actually write something, then get a senior programmer or two to do a code review with you. 
A couple of the 250 questions people tended to trip on: 1. In C#, what is the difference between an interface and an abstract class? 2. Using CSS, how would you make a link not underscored? 3. You are asked to code a home page for a car manufacturer in HTML. What is the first tag you would use on the code of the home page? 4. How would you fetch the first 20 records from the boats table in SQL that are painted red? (You can make up your own column names here.)
I still have trouble understanding when to use IIS and when not (when deploying on Azure). It seems that the two approaches are in practice identical.
When employers ask me to do weirdo puzzles, I tell them bluntly that I refuse, I went to college and took those tests so I don't have to any more, and if they want to know if I can code they can look at my code sample or my web site or call my references. I had one employer say "What would you do if confronted with this code?" and gave me a chunk of code with an obvious, horrible error in it. They were deeply shocked when my response wasn't to resolve it, but rather "I'd fire the person who wrote it." The interviewer sputtered and nearly choked, and finally asked me how I could say such a thing. I told him "I'm not interviewing to be an analyst, I'm interviewing to be a manager, and if a coder wasted my time with such an obvious and horrible coding error they don't belong on my team, so I'd save the company time and money by getting rid of them." The interviewer was *scandalized* but they hired me. If they ask me to write a small sample of practical code I'll do it. But if they want me to solve stupid puzzles, no thank you.
Does the JIT not inline local functions (especially rrally simple ones)?
I sell consulting services by the hour. So I actually make more money if the customer wants to do some dumbass like try to make EF Core talk to a stored procedure and view-heavy legacy database. (Though professionalism dictates that I at least try to offer less painful and expensive alternatives.) &gt; https://jessedotnet.com/2016/04/13/entity-framework-7-rc-modeling-and-connecting-to-sql-views/ Yea, that's great until you start adding collection properties to the class that represents a view. Then EF Core starts failing with weird SQL generation errors in queries that have nothing to do with that view. There are work-arounds, but you have to find them by digging through old bug reports because the error message sure as hell doesn't tell you that its generating shadow properties behind the scenes. 
Seems like reliably detecting the password is very difficult, however reliably detecting user names should be easier. Maybe a better solution would be to look up if the entered user name exists, log the user name, otherwise log &lt;unknown username&gt; or something that is easy to identify.
I thought the name might be a play on words for the shapes proposal. https://github.com/dotnet/csharplang/issues/164 It's probably the most interesting proposal I've seen yet, doesn't look like it's getting much traction but at least type classes might make c# 8 ! https://github.com/dotnet/csharplang/milestone/8 
thanks for the kind words (I wrote LLBLGen Pro) &gt; I personally would not use LLBLGen as a data access layer. Could you elaborate on that abit, if you have the time? :) We now do support .NET standard2.0 in our framework with almost all features (EF Core is still very limited by comparison) and the performance and memory usage are among the best (faster than dapper for instance https://github.com/FransBouma/RawDataAccessBencher/blob/master/Results/2017-10-24.txt) 
Removed: Spam. Good to see you took my [suggestion/warning](https://www.reddit.com/r/csharp/comments/74essy/using_mongodb_in_c/dnxr5ev/) to heart. Enjoy the 30 day ban.
Just as general advice, you should always post code as text, not screenshots. With text, people can try to compile and run it to help find problems instead of trying to find them by sight alone.
Get a job that challenges you.
Yes! We just went from SQL Server 2008 to 2017. I just had to do this. I had to edit the web.config and manually remove the older stuff, and install the latest report viewer from nuget. It was a pain but every thing is working now. Just so you know, I didn't create or edit the reports. I just put them on websites. I can ask our DBA about it if you'd like?
Most likely, yes. Local functions are (in this case) turned into private methods in the containing class, and those can be inlined.
Not being able to code on a whiteboard does not equal not being able to code. God I hate smug interviewers trying to score points.
Seems like an issue caused by something other than code first. Data structures can be silly with DB first as well, it's just a tool to setup the database not design it.
That is good to learn libraries, project structure, code architecture, build and deployment concerns and assembly dependencies...but I think OP is looking for something simpler &gt; sets of exercises categorized by concepts(iterative statements, conditional statements, arrays, OOP) OP is trying to learn the language. Its hard to learn the language when you are constantly distracted by learning dozens of new technologies and how to configure them.
1. Interfaces polute simple models written by cool kids that dont do TDD or baseball, abstract classes confuse graduates. 2. Google 'remove underscore on html link' 3. I would know this if i had written some greenfield web projects in the last few years.. I do know where to find it in the bootstrap 4 docs because I wrote a website on the weekends to remind myself programming is actually fun. 4. databaseContext.Boats.Where(x =&gt; x.Colour == Color.Red).OrderBy(o =&gt; o......... ... Do you have another whiteboard marker? This one ran out. The whiteboard wont compile because i forgot to add a using linq statement anyway.
I read somewhere that you write it once, write it twice, the third time you need it its time to refactor... Obviously take that with a grain of salt. But sometimes you can make complex code with a lot of dependencies when trying to not repeat yourself.
I had to work on a project like that, with the head developer sitting next to me. When ever i didnt understand something i would ask him and transcribe what he said into a comment. It ended up with something crazy like 13% comments.
Buy bigger monitors, they go above 19" these days..
Public Widget GetBlueWidgetWithActiveOrNullExpiredBecauseDaveIsAnIdiot()
It's not about the monitor, it's about how far your eyes/brain read a line before they begin to fade and how much you are trying to do at once. Ever tried to read a book or article that's 250 characters wide per line? 
And those comments are important and will be immensely helpful for someone new on the project. Great of you to actually add the documentation instead of just asking!
Be careful, they haven't guaranteed ASP.NET Core will support the full framework indefinitely. You might lose support in a few years.
pluralsight has proficiency tests for most programming languages. 
This line ctv.combatDrillsTable.AddDrill(drillItem, Name, Sets, Time, **parameters**); The method signature public async Task AddDrill(DrillItem drillItem, String n, int s, int t, **string sty**) I don't see parameters instantiated at all before you call the method AddDrill, maybe check that..
I havent used dapper and am quirous as to what the benefits are compared to EF? In what aspect does it win over EF? 
It does. Just used it yesterday. Worked like a charm 
Being able to use LINQ is a huge advantage. You can test your database queries without a database. Huge win for consistency, test simplicity and efficiency.
Thanks! I'll be sure to do this from now on 
It’s faster, _much_ faster. It’s more efficient and gives you more control of your queries. EF generates SQL for you based on LINQ queries but it’s not always the most efficient queries. I typically pair Dapper with a T4 template to auto-generate my classes, which basically gets me 90% of the features EF. 
That’s not exclusive to EF though. Your code should always be separated so repository dependencies are injected into whatever classes are performing your queries.
I have not but I can try it on a virtual machine later.
Your mean something like this: int Sets; int Time; bool successfullyParsedTime = int.TryParse(SetsBox.Text, out Time); bool successfullyParsedSets = int.TryParse(TimeBox.Text, out Sets); if (successfullyParsedSets) { Sets = Int32.Parse(SetsBox.Text); } if (successfullyParsedTime) { Time = Int32.Parse(TimeBox.Text); } 
Heres the parameters I send them in when the class is navigated to protected override void OnNavigatedTo(NavigationEventArgs e) { base.OnNavigatedTo(e); parameters = (String)e.Parameter; testBox.Text = parameters; }
TryParse assigns the value to the out variable if it succeeds, you can write it more concisely like this: if(int.TryParse(SetsBox.Text, out int Time)) { Sets = Time; } As far as the null object ref error, I would use the debugger and step through the code and see which object is null. This line is also suspect: ppup.IsOpen = false; Check if ppup is actually assigned. It's hard to diagnose your issue with out the full error message.
I figured it out. I had so many instances of the debugger hosed up. Killed the processes and restarted VS. Done! 
 await ctv.combatDrillsTable.AddDrill(drillItem, Name, Sets, Time, parameters); This is the line that the debugger stops at.
Yes. It will also support lazy loading of the list, or at the time of the query.
I used to do Code First for everything. It works great when you start a project and it's super fast to get started because you don't need to think about the DB or SQL. Then as the project grows you start getting slow queries. You add multiple devs and migrations get messy. Eventually you need to actually tune the queries and figure out indexes or views for your tables and your knee deep in the stuff you thought you had abstracted away by working directly with POCOs from the start. My new stance: Prototypes and small projects are great for Code First. Large projects needs to have a thoughtfully designed data schema so DB first works better in the long run.
I found these in my bookmarks which I found helpful when I was first trying to wrap my head around lambdas. They start out simple and get a bit more in depth each time: https://www.codeproject.com/Tips/298963/Understand-Lambda-Expressions-in-Minutes http://www.tutorialspoint.com/linq/linq_lambda_expressions.htm https://weblogs.asp.net/scottgu/new-orcas-language-feature-lambda-expressions
Visual Studio 2017 defaults to using the newest RDL schema which is not backwards compatible with older versions of Reporting Services (this includes the client ReportViewer assemblies). You will need to either recreate the report in an older version of the RDL schema or remove all references to older RV assemblies and replace them with the newest version that released with SQL Server 2016. It's annoying as hell, because with previous RDL schema updates, they intentionally kept them bilaterally compatible, but this time they've limited backwards compatibility. I'm really hoping it's in an effort to make reporting services smoother and faster (maybe .NET Core compliant?) in the future.
An exercice with "all the primes les than 15 x 15"... I didn't write an algo, I googled it and hard-coded the list. 
third this! (honestly what a brilliant book)
I used the debugger like you said and couldnt see any null values so I hit continvu and it proceeded and actually added the test values to the easy table no problem? Because the errors so general this has confused me cause it seems that everything is doing what its meant to fine. Would it be a bad idea to try suppress this somehow? 
Set a debug point on that line and hover your mouse over ctv, and combatDrillsTable one of those is likely null.
But Dapper without a LINQ provider will mean you're writing pure untestable SQL.
Over the past couple years, I have often gotten the feeling that the people driving .Core were people who didn't actually like the .Net Framework. 
I recently found out this post on StackOverflow - going over "hidden features" that are useful to know for programming in C# in general https://stackoverflow.com/questions/9033/hidden-features-of-c?rq=1
I previously always loved using a database first with an EDMX but it seems like the standard these days is to use code first so for the most recent project I've been working on I created a database and used scaffolding to generate the code first entities. I did this partially so I could get used to code first by seeing how it compared to what I'd normally create. It worked fine and good lord are migrations awesome. Unfortunately, I'm using SQLite so column changes and stuff aren't supported but I CAN use a .SQL command to do anything I need to do. Overall it's been a pretty good experience and is probably how I'd do it in the future, although I do kinda miss having an .edmx file. 
I don't know if I'd go that far. I don't necessarily agree with json as config, but package reference is a lot better than packages.config. Merging webapi and mvc into one thing was a good idea, kestrel is good, cross platform is good. Decoupling from the OS is also really good. I think what I would say is that they undervalued what already existed and they underestimated how much demand there is for a smooth path forward onto core. There are still some big gaps though. I hate webforms, but there's a lot of it still around. The UWP model is terrible, and while I understand that anything that requires a designer is going to have a hard time I think that there has to be a path forward from WPF that doesn't need to go through an app store. 
Lawl to the "Gang of Four" question. Gang of Four, to me, is a bad ass early punk band. A few days ago though I DID read about them being the authors of "Design Principals" but I still primarily think of my earlier definition. Seriously, [check this out](https://youtu.be/2x8ngh1yQEo?list=PLSVxN-zy3DupAFQtP7bxFh1-iylHGDjGO&amp;t=30). Dat snare. The whole album is great. [Here is another great example](https://youtu.be/0SyK1KAFpMw?list=PLSVxN-zy3DupAFQtP7bxFh1-iylHGDjGO&amp;t=41) if you only could hear two. Anyway, where was I again? Oh yeah, /r/csharp.
We just left the old reports in a separate 2008 project until we were ready to upgrade them. That's another option.
Delegates generally don't get inlined, which is what makes a larger performance difference between the two.
Maybe not the best human approach but i don't disagree with your logic. Coding puzzles have always rubbed me the wrong way. I tend to ask people obscenely easy coding questions and ramp them up. I figure if they fail on the easy stuff(ex: write a function to return the area of a rectangle) why bother asking anything serious, saves us both times and awkwardness. I also really like questions that are open and general so the key is how many answers they give, not any one magic answer. My favorite question for ASP.net is "a company has a standard asp.net CRUD app with a database, written 10 years ago and hasn't changed since. Lately it's feeling slow. What things would you look into to fix this?". There are nearly a dozen suggestions i see, and i find this question speaks volumes about experience and performance understanding, but it's not used as a single litmus test.
Nevermind, just had to specify the template location for now... @Html.DisplayFor(m =&gt; m.People, "~/Pages/DisplayTemplates/People")
Not aware of anything that is fully baked. There is an unstable release of OxyPlot. https://www.nuget.org/packages/OxyPlot.Core/2.0.0-unstable1013
Looks promising and hopefully not that unstable with 301k downloads. Thank You!
Well if I am not ready to upgrade I will not upgrade. Simple as that. I will of course bitch on their GitHub and all like we did with 2.0 and made them serve their customers instead of competing on the techempower benchmarks.
Throwaway, demos, prototypes: code first. Production: DB first.
Shame...this is not for .Net Core but rather the 'Core' version of OxyPlot which is on WinForms or WPF.....The search continues :-(**
It has a dependency on .NET Standard 1.0, which can be used from .NET Core.
I can see you've deleted the comment but will still reply. 'Core' is the portable core library that is referenced by the platform-specific OxyPlot packages. After installing core, you still to install your platform specific package e.g. WPF. They do not have .Net Core or ASP.NET package so your left with WPF or Winforms. These both use various classes System.Drawing which are not part of .Net Core as of late. Apparently they will see how many people will flag it before considering it for future releases. 
I create the DB first and then I write my entities by hand. I do this because 1. The DB is the most important thing. I don't want to risk missing foreign key or a table structure different from what I imagine. I did one code first project and generated the DB from the entities but then had to check every FK and column name to make sure it is generated properly. Didn't save me any time. 2. Because creating entities is actually very easy you just paste the column names from the database and add types and property syntax. This also gives me control to skip some properties that are not needed but would be generated like FKs that don't need to be represented in the model but only in the database and solves occasional problems like the one where you get Users and Users1 collection because you have 2 FKs to the same table and the tool doesn't know how to name them.
In terms of using chart.js you can use a headless browser to generate the report then rip the image. Look at into phantom.js. I’ve actually been doing quite a bit of things with .net charts (not core though) and pdf exporting. Feel free to Pm me and I’ll try help you and point you in the right direction
Thank you for the response. I think I'm going to migrate what I have back to .NET Standard because it's just going be another layer of complexity down the line for anyone else who has to manage/support the project. 
Sure, but the issue still persists on regular .Net. Core is just too young right now imo for anything other than personal projects. Give me a shout if you run into any hurdles. The charts can be pretty stupid, and information is very scarce out there
Nice one! I really appreciate it. It's gonna take me till late tonight to transfer everything across but will most certainly be in touch if I struggle with graphs. Cheers.
It's not the AD user I'm looking at updating, it would be the computer object - Might not have made that clear sorry! 
Also be *very* careful about security. Serializing open-ended delegates could leave you open to running untrusted code from a malicious actor.
Tried on VM with same result. It has to be something in my code because it sticks on 20 attempts consistently.
I learned a long time ago most code is 90+% preventing some asshat from ruining your day/job/life.
You **want** the thin model approach. It's 2017, there's no need to cram data and business logic together, despite what some people tell you. https://www.reddit.com/r/csharp/comments/7622l3/3_ways_to_avoid_an_anemic_domain_model_in_entity/doaylem/ See this guys comment and my reply.
Quick guess: you named it "Helmet1", but are trying to reference it via the variable "helmet1". Case matters in C#, so I'm suspicious you have a different variable "helmet1" defined somewhere and it isn't the same thing as this rectangle. Also note you used the Name property, not x:Name. I'm very rusty in WPF and I can't remember if that matters, but it's suspicious to me.
&gt;Otherwise we work directly on the DTOs throughout the app, in the business layer and for display in the UI. For whatever reason, perhaps because they are 'DTOs', people aren't adding logic to the objects themselves and so useful methods end up in classes broadly related to functionality. This is good; business logic and persistence should both depend on the domain model, not the other way around. [An anemic domain model is a 'last decade' problem](http://no-kill-switch.ghost.io/once-an-anti-pattern-anemic-domain-model/). &gt;If I am using data from a DTO should I be passing the whole object around, or should I be mapping just the fields I want to display (or are relevant for display, like validity) to an object, and storing an id for the DTO? It really depends on your problem domain. The most important thing is that you're consistent with the rest of your team; since it sounds like they're doing mapping, you should do that too. &gt;In writing this out I wonder why we have the DTOs at all. So that persistence doesn't have a dependency on business logic and vice versa. It's entirely possible that the rest of your team is doing things wrong, but unless you're willing to put in the effort to refactor the rest of the code base to match your style, introducing a new pattern is just going to make the code base more complex for little real gain.
Sure. Glad to be of assistance here! I really need to start a blog on this... This shit was super tedious
Look into aspnet core node services. https://github.com/aspnet/JavaScriptServices You can invoke any nodejs package. Pretty sure you can find something useful given how big the ecosystem is.
If you find a way to do it in pure C# (e.g. not invoking JS and a headless browser) please share the info. It could come in handy.
It it probably easier to just implement a frame work that already exists such as odata. A query is issued on data and it contains filters of which can already be applied to lists. https://msdn.microsoft.com/en-us/library/hh169248%28v=nav.90%29.aspx?f=255&amp;MSPPError=-2147217396 MVC already support the ability to do odata with almost no work. http://www.odata.org/blog/how-to-use-web-api-odata-to-build-an-odata-v4-service-without-entity-framework/
Highlight all your code (CTRL+A) in visual studio, paste it into Notepad++, press tab, then copy that and paste it into reddit. done ``` also a different alt is this by doing \`\`\` ```
We use anemic models and it has been a godsend. I was well aware of the anti-pattern sentiment when I came up with the architecture but I ignored it as I knew that it would work and I don't regret going that route at all. Our code base is easy to navigate and everyone knows instantly where to go to find whatever they are looking for or to fix bugs.
I am extremely disappointed in some of the advice here. Use CSVHelper. It solves all these common pitfalls quite easily.
Np, for the computer object you need this: https://msdn.microsoft.com/en-us/library/system.directoryservices.accountmanagement.computerprincipal(v=vs.110).aspx There is a description property.
You are right, had helmet1 go to fill_helmet. Works fine now. Thanks :) Always miss something simple..
I’d love to. Can you tell me how to get a version of CsvHelper compatible with DotNet 4.0 or 3.5?
&gt;This is good; business logic and persistence should both depend on the domain model, not the other way around. [An anemic domain model is a 'last decade' problem](http://no-kill-switch.ghost.io/once-an-anti-pattern-anemic-domain-model/). Can you walk me through this? I have eg a ticket, a number of gigs, and availabilities that link the two. That would be my domain model? A ticket has an id (in the context of the returned results), a description and price. Gig has an id and date time. Availability has a ticket and gig id and an amount of availability. My persistence has identical objects with properties that represent the database columns. My business logic knows about all three objects and how to use them. What our current code would probably do is work out which objects have been selected, then pass them to a method on a helper that checks if the ticket is valid. I'm saying that I think my gig object should be holding all relevant availabilities (those that share its gig id), and given the id of a ticket be able to return the relevant availability (the gig object owns the checking method). Reading your links it sounds like you're advocating the former approach? &gt;So that persistence doesn't have a dependency on business logic and vice versa. Im not sure I understand this point. In this case persistence would be the other projects? I don't directly store any of the gig, ticket data etc, that's all handled by the other projects. &gt;It's entirely possible that the rest of your team is doing things wrong, but unless you're willing to put in the effort to refactor the rest of the code base to match your style, introducing a new pattern is just going to make the code base more complex for little real gain. Very good point. This is work I'm doing in my spare time to try and better understand the code design and would need to be signed off by senior colleagues before integration - I think you're saying don't integrate, so I won't :) 
Thanks for the reply. So you're saying that I should only be using DTOs and putting logic elsewhere? Your link mentions persistence so I just want to check if you mean in general, keep data and logic separate, or specifically when interacting with DB. For clarity our DTOs aren't coming out of the DB (directly). The calls into the C# wrapper are business logic calls, there's a hefty amount of processing going on before they're handed to us to do further work with. Are you saying that doesn't matter? I can see the logic in that, I'm asking for results and being delivered them, it doesn't matter much where those come from: they could be straight from a DB for all I care.
&gt;Our code base is easy to navigate and everyone knows instantly where to go to find whatever they are looking for or to fix bugs. Is that because things are named well, because the project is well structured, or because the code is easy to follow (or all of those?) We have a lot of generic '[x]Helper' classes that arent particularly easy to distinguish between and probably don't follow SRP. Can you detail how you organise things? If you have a 'TicketDTO' would you have a 'TicketHelper', for instance?
Thank you, those are excellent for finding some of one's own weak spots. I feel like I "know" many of them, but I'd be hard pressed to give concise, precise answers!
Can't you use Tag Helpers in your case? What's the point of using HTML Helpers in ASP.NET Core?
&gt; Thanks for the reply. So you're saying that I should only be using DTOs and putting logic elsewhere? Your link mentions persistence so I just want to check if you mean in general, keep data and logic separate, or specifically when interacting with DB. I meant for all of it, always keep business logic and data separate. Have a class/method that will return say a customer object, don't have a customer object with the DB code (for example) directly in it. DTO's especially should never have logic in, they represent the logical data that goes across application boundaries (in your case the C# to C++ boundary).
What is a tag helper? I'm new to ASP .NET MVC6 in general (used to the MVC3-5 before the .NET Core start of ASP 5.0/ MVC 6)
1000x this
&gt; I'm saying that I think my gig object should be holding all relevant availabilities (those that share its gig id), and given the id of a ticket be able to return the relevant availability (the gig object owns the checking method). That would require either loading all availabilities associated with that gig from the database when loading the gig, or it would require round-tripping to the database when that method, right? If this is a project that involves communication over the network, the list of availabilities you get when pulling the gig from the database are out-of-date almost immediately. If all you need is to get an availability based on a gig id and a ticket id, that should be doable in a single trip to the database, and should return just the availability object. &gt;Im not sure I understand this point. In this case persistence would be the other projects? I don't directly store any of the gig, ticket data etc, that's all handled by the other projects. Somewhere there is a persistent data store (database, file system, chalk board) where the state of these objects is kept; that's what I mean. It's not necessarily the case that the data you want to send to your users is identical to the data you receive from that persistence layer (which in your case is one of these other projects); business logic is the rules for taking what you get from the persistence layer and deciding what to send to your users and how (and vice versa; what your users send you doesn't necessarily need to match the format of the persistence layer you're using if you have business logic that translates requests from your users into your requests to your persistence layer). If your business logic depends directly on the models of your persistence layer, then changes to the API/data model may break your business logic. If your persistence depends directly on your business logic, it becomes difficult to make business logic changes without also updating persistence (which can be difficult, as database schema changes are more difficult deploy and roll back than code changes). Whether or not you manage persistence directly, you should be aware that one complex query to persistence is often *much* quicker than two simple queries to persistence. Network (or hard disk) round trip time takes orders of magnitude more time than computation for most applications. 
&gt; Is that because things are named well, because the project is well structured, or because the code is easy to follow (or all of those?) yeah all of those but the one must have out of that list is a well structured project. Our solution is comprised of 5 libraries. The namespaces for each library mirror each other and are based on major sections of the app (we refer to each section as a group i.e. Employee, Search, Demographics, etc.). The libraries are as follows: -- Root library contains miscellaneous types and utility methods that we would re-use across multiple applications -- Models library has the anemic models in question and they are exactly that - a bunch of skeleton POCO's. Some of them have a couple of very simple one-liner methods but that's about it. Again the namespaces per group is applied here also. Has reference to Root. -- Views library contains the actual UI screens and their code-behind classes. Has references to Root, ViewModels and Models. -- ViewModels library contains all of the business logic for each specific view. Emphasis on specific view. Has references to Root, Models and Data Services. Only biz logic that is specific to the view in question goes into the view model. There is a view model for every view. Any data a view model needs is retrieved via interfaces exposed by the DataServices library (mentioned below). Looks something like: var customers = Services.SearchService.FindCustomer(criteria) -- Data Services library contains all of the Dapper and Sql logic. Has references to Root and Models. All classes are marked as internal and cannot be accessed outside of the library. Only the interfaces implemented by each class are exposed. ViewModels library has reference to this library and only interacts with it via the exposed interfaces. There is an interace and internal class for every group. Each group gets 2 classes i.e. EmployeeDS and EmployeeSql. The DS classes contains the methods that multiple view models will call (as shown above). It's literally just a bag o' methods. And the Sql class is a static class that just contains properties that expose the sql needed by the DS methods. Looks something like: using(IDbConnection db = AppDb.Instance.OpenConnection()) { var customers = db.Query&lt;Customer&gt;(SearchSql.FindCustomers); .... }
I wrote a blog post about this very topic, you may find it interesting. [BlackSlope Reference Architecture](http://fortytwoblog.centralus.cloudapp.azure.com/2017/06/01/project-black-slope-a-net-reference-architecture)
There another endpoint you can point it at to see if it persists with another target?
That's exactly why i like a good list of questions and this list did exactly the same thing to my view of my skills.
It does not. And it doesn't seem to hang GETing just the home page, but using post to this endpoint hands after 20 requests every time.
What does fiddler say you're sending to them, exactly?
Yes. It shows the request but it's black since it never responds.
It shows the previous 19 successful attempts, correct? If so, cant you just take them and [replay them](https://i.imgur.com/JJVrzW6.png) to see if the 20th time does the same thing through fiddler without your C# code. 
It gets stuck even if I do that... https://i.imgur.com/UktAxq7.png
If it happens even with Fiddler sending the request than its not your C# code, its the server blocking the request. If other POST requests from other implementations to the same server are able to pass that 20 mark then I'd go line by line through their request to that server and the C# request to the server.
Is that worse than winforms-land?
same hell, different set of demons
&gt; Only biz logic that is specific to the view in question goes into the view model. How do you handle logic that applies to the same model in different views? For instance, a model is updated in 2 different views and must perform some kind of check before allowing the update to proceed.
Desktop or web app? I'm assuming desktop. I've moved most of my charting to Python using Matplotlib. The scripts save a few png images to a folder. I run the scripts by launching a new process and then do whatever I need with the resulting images. It's hacky but I haven't found a better alternative.
Have you checked this project out? https://github.com/aloisdeniel/Microcharts/blob/master/README.md
I have created .NET Core binding for PLplot, see https://github.com/DeepMLNet/PLplotNet 
I had a little note pad in my cubicle of all the things I needed to remember and handle. I only used it about 3 years. One was that SingleOrDefault throws exceptions if there are no results. Essentially it didn't implement the "OrDefault" semantics that are in the name. This wasn't hard to workaround, but there were always little nuanced things that were not supported, and crafting a LINQ query that accomplished what you needed while not stepping on one of those landmines was a puzzle in itself. I found writing LINQ for LLBLGen to be a chore mainly due to avoiding those pitfalls and feeling backed into a corner where I couldn't coax out the query I wanted, while I did not have the same experience with EF. In both cases I would use LINQPad to validate that the queries generated were what I desired, so I don't think it was as if I was taking an easy route with EF. I do remember being incredibly impressed with the design of the ORM Profiler. The navigable tree view that gave you very compact call stack context was a great design.
Data should not have logic methods bound to it. About the only methods I'll accept on a data contract is mapping methods to / from (if necessary) and factory constructor methods that ensure you can't create an invalid object (ie leaving properties null that are expected to never be null) 
I don't think that can exist. Design patterns are not so rigidly defined. How much experience with software development do you have?
d3.js
I don't see why it couldn't be possible based on naming conventions alone (perhaps even assigning a data attribute to classify it's intention), ie. public class MagicFactory { ....... } ** you are missing &lt;x&gt;, which should have a method that returns a property with &lt;some sort of member scope&gt; ** Didn't come by fishing for insults; how much experience do you have with static code analysis? My understanding is that there used to be a ReSharper plugin that accomplished this.
Should be Possible. Even though the patterns are not rigidly defined but definitely there is a way to approach the pattern. We can look for those things defined by pattern E.g Singleton Pattern ____________________ An implementation of the singleton pattern must: ensure that only one instance of the singleton class ever exists; and provide global access to that instance. Typically, this is done by: (Algorithm need to check for below options) ------------------------------------------------------------------------------- declaring all constructors of the class to be private; and providing a static method that returns a reference to the instance.
This article may help you : http://tutlane.com/tutorial/aspnet-mvc/ado-net-crud-operations-insert-update-delete-in-asp-net-mvc-4-example
Depends on the scenario. We have a few scenarios where some related screens share logic and we simply put the shared logic in a base class and then inherit from there. By related I mean the screens belong to the same group namespace, are very similar in functionality and are centered around the same domain aggregate. However in other scenarios where the screens are not related but yet may need to share logic then again it depends. If the logic is very narrow i.e. does not require querying the database and only uses properties from a single model then yeah maybe creating a method on the model is ok. But if it requires evaluating data from numerous models or requires querying the database then it goes into the data services layer. As mentioned in an earlier post, if logic cuts across multiple views (again primarily un-related views) then that logic should more than likely go into the Data Services layer - even if it doesn't query the database.
&gt; I tend to ask people obscenely easy coding questions and ramp them up. I figure if they fail on the easy stuff(ex: write a function to return the area of a rectangle) why bother asking anything serious, saves us both times and awkwardness. My questions are much the same: as I said, the questions are organized my category, then by difficulty within the category. Where the person starts in the category depends on who they're presenting themself as: a junior candidate would get a few easy questions and I'd ramp them up in difficulty until they floundered, then move on to the next category. A senior candidate would start in the hard ones, and only move down if they fail. In all my years I had only one candidate who got *every question wrong*. She presented herself as a senior programmer, but not only did she get the senior programmer questions wrong, and not only did she get all the easy ones wrong when I moved her down the difficulty scale, but she confidently presented me a bullshitted answer to each and every question, 100% of which were *wrong wrong wrong,* with three kinds of wrong sauce. So of course, when the uber-boss came to me to ask what I thought, I said "for the love of god don't hire her, she's not only an idiot, but a nasty one to boot." But she was a pretty woman, so he liked her, and she was hispanic, so HR liked her, so he hired her, demoted me, gave her my old job, and made her my boss. I remember once she demanded I do something in a way I knew from experience wouldn't work, but when I tried to tell her that she gave me an angry lecture about how she has *11 years of experience*, so I couldn't *possibly* know how to do it better than her. (It took all the self control I had not to open my mouth and say "yeah bitch, I've seen your resume, remember? And I have 28 years of experience, from which I know that your solution is full of shit." Three months later I had a stroke and a heart attack and became disabled. (It wasn't her fault directly but I'm sure the stress she gave me didn't help.) I'm sure that company is suffering along with her screwing up all their code, and I'm sure they're blaming it on everyone else because they know damned well that if anyone looks askance at her work in any way she runs to HR and demands they be fired for "discriminating against her" because she's a hispanic woman. (She tried this on me when I politely declined to do something that her boss's boss had specifically ordered me not to do and to tell her to talk to him if she ordered me to do it, and I only wasn't fired because I threatened a lawsuit if they fired me as I was the only openly gay man in the department.) She may singlehandedly bring down that multi-billion-dollar company. I sure hope so, they earned it.
And for a list that small, a lookup list of pre-computed values is actually a very fast algorithm, so great solution. 
&gt; Interfaces polute simple models written by cool kids that dont do TDD or baseball, abstract classes confuse graduates. This answer would at least amuse me, which is good... &gt; Google 'remove underscore on html link' Well, I'd consider it a partial answer, because that would probably get you what I'm looking for. &gt; I would know this if i had written some greenfield web projects in the last few years.. I do know where to find it in the bootstrap 4 docs because I wrote a website on the weekends to remind myself programming is actually fun. This particular one is kinda unforgiveable. The first tag on *any* page of *any* web site is *always* **&lt;html&gt;** . &gt; databaseContext.Boats.Where(x =&gt; x.Colour == Color.Red).OrderBy(o =&gt; o......... ... Do you have another whiteboard marker? This one ran out. The whiteboard wont compile because i forgot to add a using linq statement anyway. That's not SQL.
You have a very weird definition of *just* when you write "just released". Also, showing examples using an administrative prompt and creating a project in "C:\Windows\system32"? WTF.
You have a very weird definition of *just* when you write "just released". Also, showing examples using an administrative prompt and creating a project in "C:\Windows\system32"? WTF.
Yeah, I realized that, that's why I deleted the comment.
You are so rude!
If you do not like the post then simply ignore but do not use abusive language. I have spent so much time on different forums like StackOverflow, Github etc but have never seen such a rude comment.
[Tag Helpers](https://docs.microsoft.com/en-us/aspnet/core/mvc/views/tag-helpers/intro) were introcuced in ASP.NET Core and using them is a really nice way to keep your HTML clean and editable outside Visual Studio. You should check out the documentation and start using them.
If you consider that rude, then you sure are a special sensitive snowflake. .NET Core 2.0 was released August - now we have October. I don't know anyone for who this would be *just released*, except for sensationalized *articles*. And using the command prompt as an Administrator for trivial things like creating a .NET Core project (especially in the system32 folder of all!) is just advocating bad practices.
I'm not sure of something existing that matches exactly what you're looking for, but the general approach for implementing this would be a Roslyn Analyzer (Roslyn is the codename of the C# compiler). See https://github.com/dotnet/roslyn/wiki/How-To-Write-a-C%23-Analyzer-and-Code-Fix You can find many existing, open-source Roslyn Analyzers. [Here's one that detects bad implementations of IDisposable](https://github.com/SonarSource/sonar-csharp/blob/master/sonaranalyzer-dotnet/src/SonarAnalyzer.CSharp/Rules/ImplementIDisposableCorrectly.cs) Using this, you could write your own design pattern analyzer / code fixer.
Hi. I don't have any relation to the Blazor project, though now I realize that my username make that confusing -- but it's just a coincidence. See lolibol's excellent answer about DotNetAnywhere. My understanding is that Blazor is a proof of concept, and would not be a good base for production code. CoreRT's approach is more solid in that regard.
This actually kind of exists in Visual Studio 2017 Professional
That's why they're called *transfer objects*, after all!
If you have looked at the date when I wrote the post, it was back on September 11. That was the reason I put that image. And there are many people who like to learn very basic things for something new. When you install core, it will by default create console application in system32 folder.
Thanks :) The linq provider in its initial state wasn't great (we're talking v2.6, 2008-2009) but it was what I could come up with given the total lack of any docs and the constant stream of cases you will be confronted with. I think we implemented SingleOrDefault in 3.0 but can't be sure, it's implemented now for a long time, as well as a loooong list of improvements in the linq provider to make it very stable (I think it's very solid nowadays), also because several customers use systems which generate linq queries from an UI which led to all kinds of edge cases which gave insight in where the weak spots were. Tho as with all linq providers in the world: it's impossible to create a bug free one. SelectMany, DefaultifEmpty and GroupBy are a couple of methods which are so insanely hard to get right in all cases... You can get very far, but it's the edge cases that will ruin the day for you, like you've found out the hard way. That said, some years ago I grew fed up with not being able to fix the linq provider properly, mainly because the expression tree design of what Linq results into is hard to interpret as you have to make assumptions and then convert it to SQL which isn't 1:1 mappable. To provide users a way out as alternatives to linq, I created QuerySpec which is a fluent API which allows you to write queries which do have 1:1 mapping with SQL but without the verbose low level api. As it's straight forward there were barely any cases where it would fail and these cases were quickly patched. Btw, if you ever have to use our code again, and run into an issue, just let us know, we'll be happy to fix it and add other stuff so it won't happen again. :) 
I commented in that thread too with a little bit of the history. It's such a 2007 problem :) The take away was having a single set of business entities, anaemic or not which are shared across the whole system affects scalability and couples business logic to persistence logic to other business logic. I don't actually have a problem with putting certain business code into the entity, if you have an effectively constrained bounded context it might make sense. It doesn't have to contradict SRP. Again this is down to interpretation. You will see code where people have shoehorned two responsibilities into one responsibility by not being specific enough in defining the problem. Equally you'll see one responsibility broken down until it's no longer responsible. I.e. It will have lost control of its responsibility. There was a push with Microservices to create a new object model for every microservice. No sharing of code between them (I've heard it described exactly in those terms and yes I've heard people fret about whether they''re allowed to use nuget packages or whether they should rewrite utility code each time. You get the idea). So in light of that, some organisations may have over corrected their course. This is also affected by choice of language to some extent. Javascript embodies practices which may or may not be as appropriate when using C# so you have to contextualise architectural advice both in time and application rather than applying it blindly.
Not the person you're replying to, but I would just use composition to DRY it out.
&gt;This particular one is kinda unforgiveable. The first tag on any page of any web site is always &lt;html&gt; . And here I was feeling smart, before I googled: is doctype a tag
Even if you didn't delete it, I'd strongly consider removing it as spam. I already [warned you](https://www.reddit.com/r/csharp/comments/786vuh/aidriven_stack_overflow_bot_from_microsoft_first/dorjd6w/) in your previous post. Clearly it didn't stop you from deciding to submit an _old_ article of yours.
To be honest in the OP case they are closer to wrappers than to DTOs. While real DTOs should not contain logic in their case it is not entirely clear what they should do. I would favor the separate business logic approach but it is possible that the objects are not data at all but represent interface with the C++ app i.e. they are logic themselves.
I would just write some interfaces, but really it's not so rigidly defined. Some have pretty common methods but some don't. For instance how would you do a facade? However a factory could easily be handled by an interface like: interface IFactory&lt;T&gt; { T Get instance(); } However thats not the only way a factory can be implemented.
What's the _exact_ contents of the exception you're getting? Have you tried running your WinForms app from a console? If that works then your console is launching processes with elevation, which is why the console version of your app has been working.
I can't think of the exact solution for you, but i encourage you to run procmon to see exactly where the error is happening. 
I'm currently trying to hardcode the pathway just to get rid of this issue. The pathway im using is: string savePath = @"C:/Users/JohanMellin/Documents/TestProgram/"; string fileName = UnitID + "_" + fromDate + "_" + toDate + ".xml"; string fullPath = Path.Combine(savePath, fileName); and that gets me this: System.UnauthorizedAccessException occurred HResult=0x80070005 Message=Access to the path 'C:\Users\JohanMellin\Documents\TestProgram' is denied. Source=System.IO.FileSystem StackTrace: at System.IO.WinRTIOExtensions.&lt;TranslateWinRTTaskCore&gt;d__2`1.MoveNext() at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at System.IO.WinRTFileSystem.&lt;OpenAsync&gt;d__41.MoveNext() at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at System.IO.WinRTFileSystem.Open(String fullPath, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, FileStream parent) at System.IO.MultiplexingWin32WinRTFileSystem.Open(String fullPath, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, FileStream parent) at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options) at System.IO.File.Create(String path) at EasyKPI.MainPage.&lt;&gt;c__DisplayClass24_0.&lt;RequestKPIDataAsync&gt;b__0() in C:\Users\JohanMellin\source\repos\EasyKPI\EasyKPI\MainPage.xaml.cs:line 127 at System.Threading.Tasks.Task.InnerInvoke() at System.Threading.Tasks.Task.Execute() I have not tried to run the winforms from a console app and frankly speaking I'm not sure how to do it but I think I understand some of what your are saying.
If a build fails, Visual studio lets you run the last succesful build. That's probably what he did
Are you launching your app from Visual Studio? Try running VS as an admin (right-click, Run as Administrator).
C:\Users not C:/Users Fix your slashes ant try again.
Are you implying that because its 2017, domain driven development (DDD) and its guidance is no longer relevant? I would argue its quite the contrary, considering the push for distributed service based systems. What you appears to be advocating is the classic "transaction script" approach, where one uses "thin" domain models (pocos lacking any behavior), and pushes all logic into numerous services. Its called transaction script because is mimics the execution flow of a stored procedure (a lot of dumb container tables with a single point of behavior acting upon them). At the end of the day, there is no right or wrong way. Its not black and white. If your solution solves the business problem at hand, great, use it. All of this is just guidance, and lends itself to avoid some common pain points. I've worked on numerous monoliths, and several distributed systems. I can tell you the "thin" approach does not play nearly as nice in the latter. So let's talk about why in 2017, most distributed implementations don't prefer this. Microservices are all about being autonomous. They don't share databases and they don't share models. ACID is gone and BASE (eventual consistency) takes precedence. Anyway, when a particular service receives some imperative to change (ie: say a an update to a customer in the customer service), other business domains will need to be informed. Since we don't share databases across services, we generally achieve this by publishing domain or integration events via a messaging bus (rabbimq, zeromq, etc) or a web hook. When following DDD, the aggregate root (in this case, a customer), is the only means by which customer data can be mutated. That aggregate root belongs to a particular bounded context, and that context is generally the scope of your service. So think about this for a second. This implies there is private data in this customer class, and it exposes a method (say, ChangeName()), allowing for one and only one place to execute state mutation on that domain object. Since we have absolute control over how that data mutation is achieved, it is much easier to perform invariant validations (ie: what data is required, what's optional), record change events, unit test business logic, isolate boundaries, etc. Also, when its time to persist the customer aggregate, we now have a number of options that, otherwise, would be far more difficult. In particular, if we have opted for "event sourcing", we persist only the recorded change events (they are replayed during instantiation of this aggregate to restore its state). If that's overkill for the service, simply record the current state of the root and publish any integration events. Other domains/services can subscribe to these events and update their state accordingly. In the "thin" approach, the service (and or supporting classes) are generally responsible for performing these actions. This means you need a domain object wide change tracker, and you need to utilize that across a service (have fun with that). In the DDD world, services are only responsible for enforcing logic that spans multiple aggregates, and they would never perform that kind of action, all always scoped to the aggregate root. At the end of the day it really boils down to how you want to slice up and organize your invariants. You prefer DDD, then its self contained in the aggregate root, if you prefer your "thin" approach, its laid out amongst services. Now consider the alternative. In a "thin" poco with public getter/setters, anything in the system can mutate its state, so tracking changes and recording events becomes much more difficult. Enforcing business invariants is deferred to the point of validation by a service, possibly in multiple locations. In regards to testing, If I want to unit test the business logic (the logic that would have previously been in the aggregate), I am required to test all the implicitly dependent services that contain that logic in combination with the the thin poco. This means you will have to potentially mock a lot of classes (all the dependencies that the service relies on, and chances are it has a lot). Finally, there is nothing wrong with using DTOs for "transferring" data between boundaries, that's exactly what they are for. For example, you may have a customer DTO for use with MongoDB in your persistence/infrastructure layer. This would be a poco that is decorated with BSON related attributes and is designed purely for serialization/deserialization of data in to mongo. You would map or convert this poco to a domain object (aggregate root) when crossing into your business domain. Again, there is no right or wrong way to do it. Do what works for you. There are pain points for both approaches, and benefits to each as well. Also, be weary of anyone enforcing absolutes.
Thanks, already tried that though :(
Whenever you get access denied errors, I always try to make a folder under C: called data and write to there. so change your paths to C:\Output and try again
Yes I am. I already tried that but still same issue. I'm trying to rewrite the program in a basic winforms, not that new Universal Form.
Windows actually doesn't care.
Tried that but to no avail. Thanks anyways
I got suspicious when I saw this: System.IO.WinRTIOExtensions That tells me you're writing a UWP app, "WinRT" is one of the different names MS has given that. I don't think UWP lets you access the filesystem so directly. [This SO post with the same problem seems to confirm](https://stackoverflow.com/questions/32538658/uwp-unauthorizedexception). I'm not exactly sure what the right thing to do is, I've been off the Windows boat for a while. But you either didn't meant to make a UWP app or need to read some tutorials about how File I/O works on that platform.
OK, so I see - your running this on WinRT so you don't have access to normal filesystem. You need to use dedicated storage folders - see this: https://stackoverflow.com/questions/32538658/uwp-unauthorizedexception
&gt; System.IO.WinRTIOExtensions &gt; System.IO.WinRTFileSystem Is a UWP module, not WinForms. It doesn't have access to most of the filesystem. Make sure you created the correct type of application "Windows Forms App (.Net Framework)" and/or check that your references are correct.
&lt;!doctype html&gt; &lt;html lang="en"&gt; ....
Yeah that's some tricky shit.... Just want you need to show superiority without having to pull out your dick and pee on their leg.
That explains it! Thanks a lot! :)
Thanks, I grew fond of the layout of the UWP so I kinda want to keep building on it. That helps a lot, thanks!
Exactly that. Thanks for clearing it out for me :)
&gt;It doesn't have access to most of the filesystem. Not to hijack the thread but this is one of the biggest reasons why I refuse to switch over to UWP especially for our internal applications. 
Ok found the problem - https://stackoverflow.com/questions/9035878/implicit-styles-in-application-resources-vs-window-resources
This is the biggest reason why I as a user want UWP. Any application should only access the directories I let it use, and not all my %HOMEPATH%.
Why the hell would you migrate anything from MVC to Razor Pages?
because its a very tiny app that almost could just be a static html site.... like Im talking 100ish records. Razor pages is perfect for it so far
But you already have it as MVC
I mean, you can save anything as long as you use https://docs.microsoft.com/en-us/uwp/api/Windows.Storage.Pickers.FileSavePicker
...its wasnt even over 30% finished... what are you trying to do here?
easiest way to understand stack and heap is to toy around in C or C++ tbh C for malloc/free and C++ new/delete
IMO it makes more sense to think about it in terms of lifetime rather than scope. Stack values are allowed to escape the method scope via `ref` parameters, but not in a way that might survive until after the method returns. Locals in in `async` methods (and similar features like iterators etc.) also have limited scope, but are implemented with heap-allocated closures because their lifetime exceeds that of a normal stack frame.
The problem is, it goes further than that. It only allows developers to access directories within the sandbox unless you actively are opening the file. If you are looking to automate some sort of file processing and have it automatically save to a directory outside of the sandbox, you can't. For instance you can't have a UWP that will search for a tv show, automatically download it, rename it and move the file to a directory outside of the sandbox. If you want the file to be saved in a specific directory outside of its sandbox, i.e. f:\tvshows\showname\season1\ You, as the user, would be required to navigate to that folder manually and save each file...thus making the process pointless. Need to make a business application that automatically processes a file that a legacy third party application spits out to a specific directory that has hundreds of other files in it? Nope can't do it. The end user now has to navigate to the specific directory and specifically look for the file. 
I am on a vendetta against the Razor Pages bullshit.
Right, but that defies the entire purpose of automation. I gave this example in another reply: &gt;For instance you can't have a UWP that will search for a tv show, automatically download it, rename it and move the file to a directory outside of the sandbox. If you want the file to be saved in a specific directory outside of its sandbox, i.e. f:\tvshows\showname\season1\ &gt;You, as the user, would be required to navigate to that folder manually and save each file...thus making the process pointless. &gt;Need to make a business application that automatically processes a file that a legacy third party application spits out to a specific directory that has hundreds of other files in it? Nope can't do it. The end user now has to navigate to the specific directory and specifically look for the file.
Sure. Install version 2.16.3
Thank you. Possible stupid question. How do I download an older version with nuget
The C# book (the official language spec book, I think) - one of the authors mentions his dislike of the use of heap/stack in C#. I can't remember if he talked about it in your terms, but yeah C# isn't quite the same as C/C++, I think, in terms of how it approaches memory. 
respect for commenting the solution to your issue. It'll probably help others in the future.
I do have UWP experience.
Given C#'s ancestry, I would rather advise Object Pascal. 
:)
I do DB first, because then I can use the Reverse.Poco extension, which will build the entity framework context for me, and rebuild it when I need, without dealing with the pain of the normal process.
Sounds like you should take a look at "Inter Process Communication"
Thank you very much for the suggestion i tried but it didn't work out as planned
Thanks for the info. I've looked into it, and it seems that I need to use anonymous pipes for this. Is that what you were suggesting?
It is really pretty muddy. The most you can say is that primitives and structs are USUALLY allocated on the stack and class/reference types are USUALLY allocated on the heap. But both of those assumptions are just that. A struct might go on the heap if it it is too large or it is stored off in a field variable, or whatever. A ref type might go on the stack if it is an inner loop variable or it is part of a method that the jit inlined or whatever. It is really just hard to say, object and variable wise, what is going to end up on the stack or heap, so it is really best not to worry too much about it. I've honestly not gotten into a situation where it even really matters. In memory managed languages, the language is taking care of where things need to be for you, so you shouldn't really concern yourself too much with "was this stack or heap allocated?". Shoot for short lived objects when programming and the GC/runtime performance will thank you.
Nah, just stackalloc everything and hope for the best ;) 
Hey sorry didn't notice you replied. Is double quotes considered better practice?
:) Works for C. I don't mind articles explaining what is stack vs heap. But I do mind when they say "Field variables are heap, locals are stack". It is an inaccurate oversimplification.
Structs aren't allocated differently based on how large they are. If they're too large for the stack, they'll just cause a stack overflow exception. Reference types are always allocated on the heap. The Java runtime has some optimizations that may allocate short-lived instances on the stack, but none of the official .NET runtimes do that (currently anyway). Honestly, it's not that hard to understand where something is allocated (in the current mainline runtime) if you have a decent understanding of the language. While it's generally nothing to worry about, there are certainly cases in performance critical code where you want to think about minimizing heap allocations/GC pressure.
You could use reflection to check all implementations of an interface in the assembly. Don't want to give too much away, that takes away from the fun! :D 
Fairly unrelated, but it reminds me of some of the tomfoolery I hacked together for funsies. [Using collection initializer syntax to add entries to an existing dictionary:](https://stackoverflow.com/a/23566620/1269654) var existingDictionary = new Dictionary&lt;string, string&gt;(); new AddRangeTo&lt;string, string&gt;(existingDictionary) { {"a", "b"}, {"f", "v"}, {"s", "d"}, {"r", "m"} }; ------------ [Being able to negate a predicate](https://stackoverflow.com/a/18512432/1269654) (that is, a `Func&lt;T, bool&gt;`) using `!predicate` syntax like you would any normal boolean: var expr = N.egatable&lt;MyClass&gt;(x =&gt; x.Prop != 1); somelist = someList.Where(!expr); somelist = someList.Where(!!expr); somelist = someList.Where(!!!expr); somelist = someList.Where(!!!!expr); somelist = someList.Where(!!!!!expr); somelist = someList.Where(!!!!!!expr); //oh my what
A+ comment.
C# is a great way language to develop Windows applications with. I suggest looking into how to design a user interface with Windows Forms to begin, it is mostly drag-n-drop, so learning curve is slight if you are already familiar with C#.
What do you want to do? C# and the .NET frame work are super vast. Games, web, desk top apps, whatever. You can do a lot with this language. At work I'm working on some enterprise web apps and the back end is all in C#. The web server, some pretty complicated business logic libraries, and some interesting libraries we've written to do stuff like manipulate images. Also I've just built (and am still working on) a pretty simple little app I've made to help me create database scripts from Excel documents all in C#. The GUI is a WPF app (which is C# and XAML) and the Excel manipulation is a C# library that uses a NuGet package to help read Excel docs. All of this is to say that C# can be used to do just about anything you want to build. What are you interested in making? I bet you can leverage your C# knowledge to help you make it 🙂
In short, whatever the heck you want! You can build a full features website, desktop apps, Windows Store apps, mobile apps. What problem do you want to solve? You can do it in C# (can and should are different things though). Most of my development is job related. But I've written an application for our team to use to go through a ridiculously complicated RMA process (easier to automate the process than get through the red tape to make the process sane). I've written a disk benchmarking application, which has practical use but was also a great opportunity to learn and fail at multithreading. I've written a system analyzer to scan for common system and configuration issues, which uses reflection to load new scenerios at runtime and automagically send encrypted results to our support team. I wrote so many tools that I needed to write a tool to keep track of them. The toolkit runs on all supporters PC's and gives me usage info so I know what tools and features are used, and I'm using as a launch pad for push notifications when customers respond to cases or whatever else we want to push to them. If you don't have any problems you want to solve for yourself, look on something like freelancer or upwork for ideas.
Well, I love making little projects (for example games). I heard of a Raspberry Pi as a little programmable fun computer to play with. Can I program with one of those using C#? What about programming a Discord bot? I would love to do that but I don't think I can do that in C#. Maybe a notifier that lets me know when I have found a match in a game so I can browse the desktop while in queue? I don't think I can do any of these things with C# but people say the limits are endless so I am unsure.
I think this is called a person. There's only so much a Linter can do, at least for now.
Clever code is bad. 
Scalable services on AWS linux VMs. All C#, zero Java. Very cool.
[You absolutely can do a Discord Bot!](https://amp.reddit.com/r/discordapp/comments/5hg4fd/coding_a_discord_bot_in_c_video_tutorial/) If you don't like that tutorial you can find tons of other tutorials and documentation out there. A lot of the time it's just finding the right APIs to use 🙂
Just, a minor point but - awaiting on a thread does not make it sleep. Tasks are not threads.
Just a minor point but - awaiting doesn't make a thread sleep. Tasks are not threads.
How do you "inject" DLL into process? Use syringe? What kind of terminology is that. Anyway, for starters google "pinvoke".
Thank you for helping to dispel this illusion. I had to put up with a colleague *ignoring* me the other day because he insisted that the code he wrapped inside a `Task.Run(...);` "spins up a thread to do X".
I directly referenced the example in the blog. It implemented a "GetAwaiter" for `int` which explicitly made the thread sleep
It's not clever, it's making use of a syntactic feature of the language ("await") to be able to use abstractions more expressively and conveniently. Again, just like LINQ does with SQL/collections/optionals/etc.
Task.Run does execute code on another thread, but it will be taken from the thread pool: https://docs.microsoft.com/en-gb/dotnet/api/system.threading.tasks.task.run?view=netframework-4.7.1#System_Threading_Tasks_Task_Run_System_Func_System_Threading_Tasks_Task__ Most Tasks do not execute on another thread automatically, but this one does. 
Yeah I misspoke, he was conflating tasks with threads.
Off the top of my head; Anything that runs on a supported platform that isn't a device driver. If you want to learn more, then check out these playlists: https://www.youtube.com/user/kudvenkat/playlists
I think its confusing for beginners to talk about structs being stack allocated. The key point is that classes are separately allocated on the heap, whereas structs are allocated inline. That means if they are allocated directly in code which operates on the stack, they will be placed on the stack. If they are allocated within a data structure in the heap, then they will be allocated directly inside that data structure in the heap rather than the stack. The savings are equally important in terms of performance whether the value ends up on the stack or inline in a heap object, either way its going to most likely already be loaded into the CPU cache by the time its accessed, whereas a separately heap allocated item may not be.
No, await does not make a thread sleep. Even with these await-anything examples. That's wasteful and what await is getting away from. When you await, you aren't sleeping on a thread. There is no thread running behind the scenes of an await. Instead, a continuation is automatically set up for when the thing-you-waiting-for is done. Once the disk or something else signals that it's ready, the continuation fires up a thread (although in some cases it can re-use the existing thread).
A cool one is Lazy Async https://blogs.msdn.microsoft.com/pfxteam/2011/01/15/asynclazyt/
Task.Delay is not Thread.Sleep
Pretty much anything, backend, middle-tier, and even front-end: You can write C# instead of Javascript using the Bridge.net compiler/transpiler and its ilk. Now that .Net Core/Roslyn is open source, if you can think it, you can probably do it. The Godot engine recently added the ability to use C#, for example. Unity could use some competition.
Not really fancy or new, but I like how you can await on a cancellation token/time out, and/or a bunch of tasks by doing: await Task.WhenAny(Task.WhenAll(allTasks), Task.Delay(Timeout.Infinite, cancellationToken)); And if you want an actual timeout instead, you can replace the Timeout.Infinite with that. Probably better to make an extension method to make that simpler...
Ahhh this is nice.
Agreed, but async/await isn't clever.
Very common terminology, you haven't been a developer for very long have you?
&gt; await 15000; // in milliseconds I can see that going real well in a code review. Even worse would be something like this: &gt; await Add(x, y); // Add returns an int These are all 'cool', but something you want to avoid in production. Like Skeet's 'Abusing C#'. Nice to know, because it's giving you a better understanding of what's going on under the hood, but not something you'd write for production.
Have you open source anything? The system analyzer project sounds particularly interesting
You didn’t describe what a continuation was. When it’s not explicitly stated. You might as well replace the word with potato. Let’s fire up the potato why don’t we? You could make the argument that we should look it up but you should’ve clarified because what the flying duck is a continuation? 
I might OS the analyzer. I'd need to rewrite the framework for it in my free time since this was something built on my employers time. Though I am successfully lobbying for my tools to be open sourced so that our dev community can benefit, so I might be able to release it as-is at some point.
Hi There, You can use the Outlook Object Model and save the message as a .MSG file. This file will contain all the text, images and attachments of the message (It will be like saving it from outlook's File&gt;Save As) If you need to read the .MSG file again, you can use the MSGReader Nuget package : https://www.nuget.org/packages/MSGReader/ Hope this helps. Let me know if you have any other questions. 
A continuation is a Task which automagically runs usually in a separate thread after an antecedent Task finishes. Or as [Microsoft puts it](https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks): &gt; A continuation is a task that is created in the WaitingForActivation state. It is activated automatically when its antecedent task or tasks complete. For example: var antecedentTask = Task.Run(async () =&gt; await Task.Delay(5000).ConfigureAwait(false)); var continuationTask = antecedentTask.ContinueWith( (t) =&gt; DoSomething()); Now in the case of "await", whatever it's waiting on is the antecedent Task (which is not necessarily a parallel-running Task, just any Task will do). When that antecedent Task finishes, the continuation Task is started which is everything after the await statement. So there's a lot of syntactic sugar behind the scenes. (Also, await does a few other things including unwrapping the result for you, and taking only the first exception if any.)
That blog has monstrously large code compared to the normal text.
Yes, the devil is always in the details. I keep meaning to write an article but just fabricate some of the details. We know that frequently accessed objects go on the frequently accessed heap, normal heap allocations progress from level 0 to level 2 except for the pretty ones which always live in GPU memory. Really long lived objects are eventually moved to Margate (only in .net core). If I can get other people writing tutorials claiming that long lived objects move to Margate my job will be done :)
Awesome. So I use ```GetType()``` and ```GetProperties()``` to take a look at everything that the DLL has to offer. This is possible to do with a ```ProcessModule```, I'm assuming. After that, I would just have to use the ```ProcessModule``` as if it were just a regular object? Btw, thanks so much for reminding me of reflection.
It is, but it's oddly used in this instance. You can't just take some arbitrary dll and shove it into a running process you've got to hook it into the existing process flow. That's part of why it's called injecting in the first place. The whole point of injection is to change the program to do what you want, so I really can't understand how or why you'd inject a dll that you don't know how to access or use. 
There is a port of the library to AvaloniaUI, that can run on .NET Core and render with SkiaSharp. It would be a bit troublesome to set it up in your ASP.NET Core app, but should be possible.
https://github.com/StephenCleary/AsyncEx
LINQ is bad.
No? Ok, my bad then, I never used it and just skimmed its documentation
Sure you can. `CreateRemoteThread` and then `LoadLibrary` to inject whatever DLL you want. Intercepting existing library calls isn't the only use of DLL injection.
The parent comment is nonsense, probably didn't really read/understand the question. Reflection only works on .NET libraries while you're (presumably) injecting a native library. And it just gives you metadata, it doesn't address the IPC issue at all.
You can, but unless it's going to actually do something what's the point? 
I'm quite sure hardware is not the problem. The problem is with ReSharper - especially on big web projects (I'm talking 40+ projects). There is noticeable delay in typing (a few hundred milliseconds at times, with lag spikes up to seconds in between when it tries to auto-complete). Spec wise, I'm running on a 5960x cpu, 64gb ram and an NVMe ssd. Anyhow, VS without Re# is noticeably faster and more responsive (especially typing and auto complete)
Easily reading memory from within the processes itself, for example. 
AllocConsole redirect io output state to screen.
Well, that's a new one.
While I like the await TimeSpan.FromMinutes(15); for its clearness and conciseness, await 15000; is really awful. You'll always have to add a comment or nobody joining your team will know what that means. 
Which is doing something. I'm having a hard time understanding the scenario where you inject a dll you don't know how to use into a program.
I see what you're saying, but it is kinda clever. Using async/await isn't clever though.
Links for the Lazy * [Abusing C#](https://www.youtube.com/watch?v=JIlO_EebEQI) * [More Abusing C#](https://www.youtube.com/watch?v=CFn5I0c2uBE)
Good stuff!
&gt; I would like to know, what can I do with C# outside of Unity? Well, I've used it to help run /r/csharp. I suppose that-- &gt; Can anybody provide me with some examples of where C# has been used to ***make cool things*** Oh, nevermind then. But I guess mod abuse is cool though.
&gt;And besides, just use Rx. What does Rx give me beyond normal events?
Try calling UpdateItemsAsync somewhere other than the constructor of the class. I'm a bit of a rookie when it comes to using async methods and know nothing of UWP but my understanding is that calling the method is behind the scenes trying to register a callback in the Synchronization Context which might not exist yet.
As far as I understand OP has obtained a DLL written by someone else and knows *what* it's supposed to do, but not *how* to use it.
If you confuesd anything of my video..Please comment in it ,i will try to solve it..
Same error is happening thanks for the feedback tho
Here's an example of continuations with async: https://github.com/nemec/generator public void Continue_WithLocalField_SetsField() { using (var gen = new Generator(WithLocalField)) { gen.Send("tim"); Assert.AreEqual("tim", gen.Next&lt;string&gt;()); } } public async Task WithLocalField(IYield gen) { var name = (string)await gen.Yield(); await gen.Yield(name); } Fun, but I wouldn't use it in production.
What is the actual Python command you are calling in your C# program? Have you tried `python -u test.py`?
&gt;What does Rx give me beyond normal events? Conflating Rx and normal events misses the point of Rx. The power of Rx LINQ-like composability and the separation of work via the IScheduler interface is wonderful, once you get your head around it. Rx requires some brain inversion, but once you've drunk the Kool Aid, it's difficult to go back to procedural code. It's also very much like the async/ await virus, once you've got some Rx in your code, to avoid blocking operators like .First(), Last(), etc, it's often the case you'll need to write Rx all the way down.
Which isn't going to work out super well.
https://softwareengineering.stackexchange.com/questions/16571/why-do-net-books-talk-about-stack-vs-heap-memory-allocation 
I believe the C# program just run the exe, with the test.py as the only argument. I use the Process class, with `new ProcessStartInfo(exe, file)` as StartInfo
"With LINQ you can implement Select and SelectMany with many different types to create all different sorts of functionalities (you can use it with an Optional type, with Tasks..." Please god don't do this. I am working on an inherited app that did this. There are Option types all over the place, when tasks are _actually_ awaited is hidden from you, there are differing StoreResults and ServiceResults at the different layers of the application. A service class method is often a 50 line LINQ statement that is completely opaque when it breaks and needs to be debugged. Stack traces are basically non-existent. It's miserable. Leave the LINQ methods alone. Follow the principal of least surprise.
That's why I'm asking you guys for help. I know all the properties of the DLL; I'm asking how to actually read those properties.
This is correct. I know all the properties of the DLL, but I'm asking how to actually read those properties.
I don't python much, but [maybe](https://stackoverflow.com/questions/230751/how-to-flush-output-of-python-print) `import sys` then `sys.stdout.flush()` after print() to flush the output buffer.
Ah ok. Yeah, the DLL is in C++ and not in .NET standard. How can I address the IPC issue? Pipes?
Yeah, you need to include the `-u` flag when calling `python`. This works for me. using System; using System.Diagnostics; using System.IO; using System.Threading; namespace Test { class Program { static void Main(string[] args) { var thread = new Thread(() =&gt; { var process = new Process(); process.StartInfo = new ProcessStartInfo("python", @"-u C:\Temp\test.py"); process.StartInfo.UseShellExecute = false; process.StartInfo.RedirectStandardOutput = true; process.Start(); StreamReader read = process.StandardOutput; while (!read.EndOfStream) { Console.WriteLine(read.ReadLine()); } }); thread.Start(); } } } 
Look into using the [graph/o365 API](https://msdn.microsoft.com/en-us/office/office365/api/mail-rest-operations). I know for a fact that this is possible; there's an API endpoint for it: GET https://outlook.office.com/api/v2.0/me/messages/{message_id}/attachments
Maybe expanding the check to `while(!read.EndOfStream || !process.HasExited)` would do it. Otherwise you might be at the end of the stream merely because the next line hasn't been outputted yet. The final ReadLine() might fail with this change, if the child exits without additional output.
Depends on how the DLL works. There's no way for us to know or even guess. Did it come with any documentation?
To be honest, everything is very confusing and I don't have a clue what you are trying to say/do. Maybe use english subtitles if you don't want to record it in english?
[Get process by name to get the running program](https://msdn.microsoft.com/en-us/library/z3w4xdc9(v=vs.110).aspx), which returns a Process object, which has a Modules property, which should contain a module for your dll, and that [module object](https://msdn.microsoft.com/en-us/library/system.diagnostics.processmodule(v=vs.110).aspx) has methods for getting types and services.
Thanks, I was going to test it myself. But Visual Studio took ages to install... Anyway, I have now tested it, and changed my class so it uses it, thanks.
What’s in the registry entry for reported CLSID? It should contain a pointer to an exe or dll (I think).
If you use Option types what alternstive do you propose? Also, 50 line LINQ code needs refactoring nevertheless
Removed: Rule 7, spam. Same reasons as I [stated before](https://www.reddit.com/r/csharp/comments/741305/how_to_use_var_keyword_and_its_advantage_in/dnuris2/). Consider this a second and final warning. Also: &gt; Object initializers allow you to assign values to the fields or properties at the time of creating an object without invoking a constructor. This isn't true. The constructor is still invoked. If you don't explicitly include the parenthesis, then it invokes the parameterless constructor.
FWIW, I thought a Task was "basically" a thread too, until I read this: https://blogs.msdn.microsoft.com/benwilli/2015/09/10/tasks-are-still-not-threads-and-async-is-not-parallel/ 
I don't have an alternate solution. If using Option type necessitates writing your own implementation of Select and SelectMany, then maybe think about why you are using an Option type in the first place. Of course a 50 line LINQ should be refactored. What would have been better, though, is if it had never been written in the first place. My predecessors created this framework for the application and the _intent_ was to express what you want declaratively with LINQ and not need to know when your options and Service/StoreResults were being unwrapped. Declarative programming is often a good thing, but this implementation is just makes maintaining the app hell on earth. How anyone looked at what they had written and decided "this is good, I like this", I'll never know. That said, do you know of any articles that discuss implementing Select and SelectMany with option types? When I first came across this, I was certain that it wasn't something the three original developers came up with, but I wasn't able to find any written material that did this kind of thing. At least seeing someone else talk about it means that my initial reaction was right. Have you ever seen this pattern _actually work_ in real life?
I have made video games in C#. I've built tools to help my wife run her business in c#. I've written stuff to create randomly generated music in c#. I've written browser based games (like kingdomofloathing.com) in c#. C# is pretty universally applicable to anything you want to create for a windows machine and with .net core and xamarin it's cross platform capabilities are coming along very well. Here a youtube channel I upload some videos to... everything in it was written in c#. https://www.youtube.com/playlist?list=UUxru6nGfcWvF8wzv1rKqHeA
I've tried this, but the DLL wasn't written in a .NET standard (or however I should phrase it), so that's not going to work. Thanks for helping though.
You should look into reactive extensions. http://reactivex.io/ 
Here is an article I had archived: http://mikehadlow.blogspot.com.uy/2011/01/monads-in-c-5-maybe.html?m=1 Also, I use this pattern in real life production code and it works pretty well. We use Option types to map 404 http codes returned by REST apis (how else would you do it otherwise?) and use LINQ to chain those type of REST api calls. We try not to make them longer than 5/6 lines of code in our code reviews. Poor stack traces and debugging is indeed an issue, but using these typed is essential to us (again, there is no other dev-friendly way to handle 404 http codes) and LINQ is very useful in such case, it makes code much more readable.
Yep, I also read about it. My "it makes the thread sleep comment" was just a misunderstanding of the Task.Delay method. E.g I now presume Task.Delay can allow the current thread (eg UI thread) to keep doing its thing and only return to the original task after X milliseconds (and no thread ever sleeps, there is only 1 thread always using the CPU)
Someone used the DLL in Python here: https://github.com/drssoccer55/RLBot/blob/master/runner.py. Reading from the comments, the DLL writes to shared memory and apparently uses "InterlockedExchange" (not too sure what that means, seems to be a method, reading from the documentation). Some lines that looked quite important were: ```shm = mmap.mmap(0, 2004, "Local\\RLBot")``` and ```ctypes.memmove(ctypes.addressof(lock), shm.read(4), ctypes.sizeof(lock))``` and ```ctypes.memmove(ctypes.addressof(player1_inputs.GameTickPacket), shm.read(2000), ctypes.sizeof(player1_inputs.GameTickPacket))```. It looks like it's using the shared memory and retrieving that info. Not sure how to do this in C# though, or if that's even what I have to do.
https://www.google.com/search?q=nuget+download+older+version&amp;oq=nuget+download+old
&gt; 800700c1 is apparently something to do with access rights? So perhaps restart Visual Studio in Admin mode and try running it. 
Check 32 vs. 64 bit with how your program is being run vs. how Outlook is installed. 
RemindMe! 1 day
That code is indeed using memory mapped files. It can be done in C#, but recreating all of that code when you're not familiar with it would be... challenging. But it seems like the intention is for bot creators to interface with the game through the Python script instead of with the DLL directly. The script creates an "agent" which then exchanges data and instructions with the bot by whatever means. There is an implementation for Java already (JavaAgent.py), but you'd probably have to write something in Python to talk to .NET (e.g. with pipes or other IPC mechanisms).
Oh yes this is a very interesting bot project. I'm already quite familiar with the Python version, but I'm looking to recreate/port some features to a C# version of the framework. I've got everything else done, it's just the main DLL reading that I'm missing. Although I'm looking to directly read the DLL from C#, I'll look into what your idea so that Python can act as a bridge between C# and the DLL. Since I've had some luck with MemoryMapViewStream, I'll try to see how to get the byte[] properly converted to a structure I can use. If that doesn't work out, I'll try to use Python as a way to get C# to read from the DLL.
&gt; async void /twitch
Just saw your edit: &gt;I'm using MemoryMapViewStream, but the bytes converted to string is all messed up It's not a string, it's the binary structure described in [here](https://github.com/drssoccer55/RLBot/wiki/Input-and-Output-Data-%28current%29). You'll have to manually deserialize the binary values (with 100% identical order and sizes) from the memory mapped file. You also need to recreate the atomic locking logic. 
?
Removed: Rule 4. There are learning resources in the sidebar and at /r/learnprogramming. If you already have experience in Python, then I suggest you just dive in with any of the myriad of learning resources, tutorials, or books available. Get a sense of the language syntax, then start looking at the platform you're expected to develop on (e.g., ASP.NET, Unity3D, WPF, etc.) I found this with a quick google search, maybe it'll be helpful for you: https://gist.github.com/mrkline/8302959
Reflection method to get the value of a property. private static void GetPropertyValues(Object obj) { Type t = obj.GetType(); Console.WriteLine("Type is: {0}", t.Name); PropertyInfo[] props = t.GetProperties(); Console.WriteLine("Properties (N = {0}):", props.Length); foreach (var prop in props) if (prop.GetIndexParameters().Length == 0) Console.WriteLine(" {0} ({1}): {2}", prop.Name, prop.PropertyType.Name, prop.GetValue(obj)); else Console.WriteLine(" {0} ({1}): &lt;Indexed&gt;", prop.Name, prop.PropertyType.Name); }
it's a bug that should be fixed in 7.2: https://github.com/dotnet/csharplang/issues/970
[Seems to be a known issue](https://github.com/dotnet/csharplang/issues/970) when combining `default` and optional nullable method parameters and is a bug in the compiler.
I assumed the new "default" [line 1] was just supposed to infer the type that you would get by writing "default(int?)" [line 2]. I would check the IL of the assembly to see what it contains for the 3 cases. I prefer to use null [line 3] 
Did you raise an issue on the repo?
I didn't, because it's not necessarily an issue with the project/code it's just that the readme seems to be very neglected. ^Also ^I ^didn't ^wanna ^be ^that ^one ^guy ^bitching ^about ^your ^example ^because ^he's ^too ^dense ^to ^get ^it ^:&lt;
Then make an issue stating the readme is not up to scratch and the provided example is causing you problems
It looks like you're doing interop work thats basically the old vba/COM stuff, and if it's like Excel, then it's directly manipulating things through the outlook application on the machine your code runs on. I would advise against going this route unless you have a specific reason and use Exchange Web Services if you can. The reason is that the API is much cleaner IMHO and you don't have to deal with COM issues (not 100% sure but it's an issue with excel). Your Also working with the server, rather than the individual client, so things should be more consistent across multiple devices. Also, these APIs are supported within the cloud, which will help as MS pushes organizations towards Office 365. More info here: https://msdn.microsoft.com/en-us/library/office/dn567668(v=exchg.150).aspx
Did it, hopefully someone will take care of it.
Wow. I wasn't expecting a bug. That is a glaringly obvious issue, and honestly makes me a little scared to be jumping into new minor language features in the future if large oversights like that can slip by.
ehh, shit happens. the people working on c# are no different than you and i. just be vigilant and always have tests and at least when you go to update to use the new hotness, you'll be able to more easily catch these types of problems and potentially contribute back to the open source community in the process.
Seconded. BadImageFormatException usually means you are trying to load a 32bit native library into a 64bit process or vice versa.
I think you have a namespace issue. You need to specify which type of application you're creating. Try this: using System; using outlook = Microsoft.Office.Interop.Outlook; namespace Test1 { class Program { public static void Main(string[] args) { var app = new outlook.Application(); outlook.Folders folders = app.Session.Folders; // or just var folders Console.WriteLine("Number of folders: " + folders.Count); } } }
I use the method syntax almost exclusively. I'm a SQL guy so it's not like I'm uncomfortable with that kind of syntax. I just don't find that it fits my style when I'm writing C# code.
Compilers seems to be one of those things that puts the developers in a lose-lose situation. If something amazing works, it's "meh, of course it should work". If something doesn't work, it's "omg this the worst ever, how could this ever happen, idiots". To further drive home the point, just look at the story from a week ago about how non-trivial it was to bake in full support for generics. Something that most of assumed "well yeah, they probably just didn't have time for it in version 1, of course it'll be there in version 2" and we find out over a decade later that it was actually significantly closer to not having generics the way we think of them today.
Method syntax unless I'm writing a join.
&gt;If something amazing works, it's "meh, of course it should work". &gt;If something doesn't work, it's "omg this the worst ever, how could this ever happen, idiots". Every customer thinks like this. Every customer thinks software is easy business. Even when the customer *is* a programmer. Going forward, I am not convinced of the value of such a feature. Do we really need an expression that returns the default value of something? Considering how much time was spent and how much effort was put, was it worth it?
If you mean the little spanner it means Property.
Are you asking what LaserLine is? Based on that snippet, looks like a property - https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/properties
This is so true.
I prefer the method syntax; the query syntax is just different enough from actual SQL to be confusing.
Bool 'yes'? 
You may want to read about this flag. https://docs.python.org/3/using/cmdline.html#cmdoption-u
What story are we talking about?
I prefer query syntax by far. I think it's much more clean and readable. I only use method for really simple things like a one off select or where statement. 
I use method syntax because it fits into the fluent paradigm and works automatically with code completion. The query syntax is more like a DSL and the trouble is I can never remember the ordering of the keywords.
Method syntax all the way! Flows better when reading.
Method, but that's because most of my LINQ stuff is a single method call. If I were doing a more involved statement I think query would be more clear for intent.
Maybe you can try a different IDE. I haven't touched Java in _years_, but when I did, I was using NetBeans. But that's just because I knew of its existence; I really can't say how better/worse/shit/great it is in comparison with other Java IDEs. It's probably outdated by now. I've heard [IntellJ IDEA](https://www.jetbrains.com/idea/) is pretty commonly used and considered [top shelf](https://i.ytimg.com/vi/FuvaHbm5pZU/hqdefault.jpg). If you're feeling a bit crazy, you could look into using Visual Studio Code with Java support. ([1](https://code.visualstudio.com/docs/languages/java), [2](https://marketplace.visualstudio.com/items?itemName=redhat.java), [3](https://marketplace.visualstudio.com/items?itemName=georgewfraser.vscode-javac)) I've never touched it so, no idea how well it will or won't work.
Query syntax is when doing joins and intermediate variables (let) that would complicate matters too much if done with method syntax.
Going from VS to basically any other IDE if going to be a disappointment. There are plenty of other good ones, don't get me wrong, but VS does some things very aggressively that other can't pull off well at all. I've generally found when I'm not doing .Net I prefer to just use a much lighter IDE, sometimes even just a text editor with syntax highlighting. 
Yup, and if you look it shows that it is only 'get' at the end. That effectively makes it read only. 
This and more. Personally, thank you for being so responsive. I have been a user since version 3.0. I can't say enough great things about LLBLGEN. It is worth your time and money to just use it. Their support forums are incredibly active. Franz takes time to contribute and help with issues. Keeps things very clear and will even crank out a build to help resolve issues. For example the template/tasks needed to auto generate DTO friendly entities came from the forums. Amazing way to create Entities for a Web API. Oh and another personal thank you for Derived Models. My React/Redux front end developers love them. 
Method syntax, almost without exception.
I use both. I find the query syntax quite nice for doing more complex Linq. I use the method syntax for less complex stuff, e.g. a .Where().First().Select()
We already have an expression that returns the default value of something. The change is to let the compiler infer the type from the context of the expression, so that, instead of SomeType foo = default(SomeType) the developer can write SomeType foo = default; Like a lot of the features in C# 6+, it's pretty small beans, really, but it reduces ceremony and cognitive load, which means that it also makes it that little bit easier to program.
Same situation as you last year where I tried out the Java world after having done C#/.NET for a while. Going from VS to Spring Tool Suite (a re-skinned Eclipse) was the worst. I bit the bullet by paying for IntelliJ myself because the damn company was a cheapskate. Java + IntelliJ gets close to C# + VS. Those will never know just how much Visual Studio contributes to their productivity until it isn't used.
You can think of let like .Select()
Thanks. Problem is we already have it saving as HTML for an iOS app, he has an idea we can embed the attachments in this.
Fluent syntax except for joins.
Awaitable. ^^^^^runs
Why wouldn't you use the same cancellation token for each task?
It will also pick a random thread from the thread pool. In some cases, however, the thread is kept around through to continuation, for example, when no work needs to "happen." `await Task.Delay(0)` will complete on the same thread, without releasing the thread.
Another good read on it. https://blog.stephencleary.com/2013/11/there-is-no-thread.html
Method syntax unless I'm writing parsers with my favorite parser combinator library, Sprache. Check it out.
&gt; it reduces ceremony and cognitive load, which means that it also makes it that little bit easier to program I understand your point, but I do think some features only add complexity to the language, meaning it becomes harder to learn and to program. When it comes to syntax and semantics of programming languages, there is a balance between too many features and too few features. For example, I don't like expression-bodied functions. It seems to be completely unnecessary. It adds complexity (i.e. more things to know and think about) without any decent reason IMHO. I should make clear I do not "hate" everything that came after C# 1.0. async/await and yield are strong features that really help to build expressive code. Anyway, it is subjective so I understand if you disagree.
As noted by others, IntelliJ is the closest you can get. Eclipse is a big disappointment for us. Have you tried to debug in *that thing*? Argh!
This entire time I thought that was a wrench
i believe the newest Pi is compatible with .NET Core... or was it mono? either way i recently went on a course to start learning C# and my teacher was super hyped over the fact he could now have this little play-thing :) as for what can you do? well speaking for myself with very little experience i am making tools for the support department where i work - small automated telnet and ftp things that make life easier for all of us (and remove a lot of clean-up in case of wrong commands... our backbone is... brittle... in that sense :-p). next project i'm taking a crack at is AD user management with C#, gonna be fun /s :-p
 let z = 100 Vs. .Select(new { x, y, z = 100}); `let` is a lot simpler to use.
Almost certainly joins. Joins are a nightmare in method syntax imo.
I'm sure let is implemented by Select under the hood. The problem is, when you use let variables that depend on other let variables, the Select equivalent becomes very verbose.
This won't work as it's not a .NET standard DLL. Thanks for the help anyway.
Ah yes this makes a lot more sense. Thanks, I'll try to marshal the byte[] into a C# structure. Any suggestions on how? The Marshal class seems to be useful, but I'm not sure which method to use. It's probably ```PtrToStructure```, though. I'll have to get the memory address of the DLL, but that's quite easy as it can be retrieved from the ```ProcessModule``` ```BaseAddress``` property.
VS version has nothing to do with console.writeline, and no it's not old school. If you use this statement within a console application, running it would open a window which will display the content that you printed using the above statement. If you are using this within a library project, then whichever exe makes use of that library (if it has a foreground window) will display the content.
Method. I don't use query at all.
Yeah, why is the join syntax for the methods so awful. 
To get started quickly I'd say Unity game engine, Blender to create basic 3D characters (just boxes stacked on each other for player models) and/or magicavoxel if you want all your models to look like they belong in Minecraft (voxel modeling). Godot is another game engine with 3D and 2D support. It now has support for C# and is getting quite popular because it's open-source and you don't have to pay royalties if you release a game with it. You can also try MonoGame (open-source and more powerful version of the old XNA). However going with the latter requires much more programming skills because you need to setup the structures for a game yourself (like a camera, lightning, UI components, etc). If it's your first time making a game I would suggest making a choice between Unity or Godot. Unity: https://unity3d.com/ Godot: https://godotengine.org/ MonoGame: http://www.monogame.net/ Blender: https://www.blender.org/ Magicavoxel: https://ephtracy.github.io/#ss-carousel_ss 
Vs has a window called output in ide that captures it 
Exclusively method syntaxe as it is more apparent what exactly is happening (at very least to me).
Debug menu -&gt; Windows -&gt; Output
I use expression bodied members everywhere I can. Finally I can write pure functions that actually look like functions, and read-only properties that are just a subsitution for some larger expression without the `{ get { return ... } }` nastiness. Having the ability to write code that looks more elegant and is closer to what you’re conceptually doing does have a lot of value in my opinion. But sure, every feature added does have a potential burden on the developers too. So far I think the C# people have done a good job of adding consistent syntax.
https://blogs.msdn.microsoft.com/dsyme/2011/03/15/netc-generics-history-some-photos-from-feb-1999/
Because of the type system.
You should grab a C# beginners book and read it.
https://docs.microsoft.com/en-us/dotnet/api/system.io.memorymappedfiles.memorymappedfile.createviewaccessor https://docs.microsoft.com/en-us/dotnet/api/system.io.memorymappedfiles.memorymappedviewaccessor https://docs.microsoft.com/en-us/dotnet/api/system.io.unmanagedmemoryaccessor.read (not sure about this one, I assume it works the same as `Marshal` but it doesn't explicitly say) If you're using `Marshal` there are some gotchas. It follows Win32 API conventions by default, and there are some differences like the size of bools, so you may have to decorate your structs with the `MarshalAs` and `StructLayout` attributes. Or, alternatively https://docs.microsoft.com/en-us/dotnet/api/system.io.memorymappedfiles.memorymappedfile.createviewstream together with https://docs.microsoft.com/en-us/dotnet/api/system.io.binaryreader
https://www.tutorialspoint.com/csharp/csharp_methods.htm
Yeah I'm using MemoryMapViewStream to read the DLL and then I'll use [StructLayout] so that I can use the Marshal class.
There aren't that many alternatives - try implementing Join yourself. I'm not saying you can't improve on it, but by its very nature it'll be kind of hairy.
Eclipse is a giant turd. On the occasions where I've been able to do Java for more than 2 seconds without developing suicidal ideation, I've used IntelliJ, I think it's developed by Jetbrains. It's also free.
Not really sure what you mean. Does the iOS app save the email as html with included attachments? Only other option I know of is saving the mail as a .MHT file. Although, I doubt you'll be able to embed the attachments in them. 
Okay thanks. Also im in no rush because i want to learn and understand things like rendering, networking etc.
That's the thing though. You injected the dll do you can access the internal system state of another process. Guess what, it's state is now internal to that process, if it doesn't provide an IPC model for you you need to inject again to get at it. That's why this makes no sense. If you're using someone else's crap there should be documentation on the IPC method it uses and how to access it. If there's not, why are you injecting it? This code has all the permissions of the process you're running it in.
The code is hairy, but if you've got a method signature that's as hard to understand as fluent join you've got problems.
I'm using memory mapped files now and marshalling the returned byte array into a C# structure.
What would the current company opinions be on developing a code base or even migrating to C# as opposed to a language like Java? How widely is C#? as I don't really here much about it unlike Java. Could you name a few companies that use C# as its primary? 
I started using methods for single joins, but for multiple the methods syntax becomes weird.
Server app currently saves email msg as html, html is available to view on ios and Android apps. They now want to allow access to the attachments in the msg and seem to think there is a way of embedding these in the html but I have not found a way.
If your console app isn't showing output on a console instance it's likely that it's coding before you get a chance to see it (which is the default behaviour). If that's the case, invoke Console.ReadLine(); after your logic in the main method, this will pause execution just before it closes the console window.
That's a more standard way of doing this yes.
If its a console app, Console.Write() (or Console.WriteLine()) will print inside the application (just make sure you put console.read() after it so it doesnt close automatically!) If its anything other than that, the output window in VS is the console window, so anything you type in Write will be there. If VS complains that Console.Write() doesnt exist (specifically the console part), then you're writing in an application that doesn't support the console library. 
I like to keep my database models separate from my view models, so I'd create a new class with the customer properties you want and add an order total field to the view model class.
Create a view model and pass that to the view instead of the Customer object. public class Customer { public int Id { get; set; } public string Name { get; set; } public string Email { get; set; } } public static List&lt;Customer&gt; GetAllCustomers { return context.Customer.ToList(); } public class CustomerViewModel { public List&lt;Customer&gt; Customers { get; set; } public int TotalNumberOfCustomers { get; set; } public CustomerViewModel(){ } } 
Create a view model and pass that to the view instead of the Customer object. public class Customer { public int Id { get; set; } public string Name { get; set; } public string Email { get; set; } } public static List&lt;Customer&gt; GetAllCustomers { return context.Customer.ToList(); } public class CustomerViewModel { public List&lt;Customer&gt; Customers { get; set; } public int TotalNumberOfCustomers { get; set; } public CustomerViewModel(){ Customers = new List&lt;Customer&gt;(); } } public CustomerViewModel BuildCustomerViewModel(){ var customers = GetAllCustomers(); var viewModel = new CustomerViewModel(); if(customers.Any){ foreach(var customer in customers){ viewModel.Customers.Add(customer)); } } viewModel.TotalNumberOfCustomers = customers.Count; return viewModel; } public ActionResult Index(){ var viewModel = BuildCustomerViewModel(); return View(viewModel); } 
Unless it's a release configuration where the system pauses before exit. This baffles me, why the behavior changes between debug and release.
Async void is a horrible thing to use. It swallows exceptions, and disrupts sync and async flow. You should really return a task whenever possible.
The Console keyword doesn't exist at all where I'm at. I'm trying to find that app.
What kind of application are you developing? When you made a new solution/project, what application did you chose? 
Removed: Rule 4.
Removed: Rule 4.
Not only is C# fully matured, but has a wide ranging set of third party (commercial and open source) libraries and platforms to develop for. Many of the C# programming skills are fairly transferable between platforms. As always, evaluate the purpose of what you're programming and choose the right tool for the right job. If C#.NET fits the bill, then there should be no issues diving in. In terms of popularity, I can't say for certain. It's definitely a comparable in terms of use. Couldn't tell you what companies use it. But for example, StackOverflow is written in C#. It's the core language of games written in Unity, for example, City: Skylines. IIRC, modern versions of Visual Studio and Microsoft Office are heavily programmed in C#.NET as well.
If you're dynamically creating the customer class (like with entity framework or something) then the class will be a partial class. I usually create another partial class for any 'virtual' properties of the class. Like if the db had first name and last name, I would have a FullName property in the partial that concatenates the two. Any properties that are going to be accessed from multiple view models, I will set up in this way. And then you should have a view model per view that would be a combination of any enumerable used by the view (list of customer) and any additional properties needed (total count of customers, etc)
Method for simple ones and SQL for complex ones. IMO, For simple queries , method syntax is easier to read var strings = Enumerable.Range(1,100).Select(j=&gt;j.ToString()); is better than var strings = from j in Enumerable.Range(1,100) select j.ToString(); But for complex queries, especially those with group by clauses, methods syntax looks too messy var group = from j in Enumerable.Range(1, 100) group j by j % 10 into g orderby g.Key select new { Group = $"group{g.Key}", Count = g.Count() }; is better than var groups = Enumerable.Range(1, 100).GroupBy(i =&gt; i % 10).Orderby(g=&gt;g.Key).Select(g =&gt;new { Group = $"group{g.Key}", Count = g.Count()}) 
"Hello World". Visual C#&gt;Windows Universal&gt;Blank App (Universal Windows).
All I can think of is that you might not have the .net core 2.0 SDK installed.
Never ever ever use the same domain models across multiple layers like that. Each layer needs it's own domain model and a data transfer object to cross that boundary. It impacts test-ability, SOLID, SRP, encapsulation, etc. See the other replies.
I considered that, and saw that I had version 2.0.2 installed after installing VS 2017, so I tried to install .NET Core 2.0.0 via the download from the MS site, and I still get the same issue. This is such a weird problem!
It's ok you dont need to blank out the solution name....
Does it really matter to you? It's the name for my personal website, which is my name, which is why I blanked it.
No but it obviously does matter to you.
Update your Visual Studio.
Under Visual C# in the "installed" area I have Windows Universal and .Net Standard. Console Application isn't there. Perhaps its not installed.
I'll be honest I read that and just think method syntax is easier for me to read. It looks like C#, but each to their own ;)
Both, it depends on situation The let keyword is very helpful if the allocations are fine for you 
That isn't possible, unless I go with the release candidate.
IntelliJ IDEA is the best for Java. Pleasure to use. Still setting up Java projects is not fun in any IDE. 
If you're using a console application then you either have to clt-F5 or use a Console.ReadLine(); to stop the console app from instantly closing upon run.
But I can't call that In a constructor? 
Always method syntax for me. Query syntax just looks weird in C# for some reason.
I only find myself resorting to query syntax when method syntax begins to take too many lines or become unwieldy. But by that point I should probably rethink my approach anyways.
Yes! 
Make sure you check the [".Net desktop development"] (https://stackoverflow.com/questions/41189398/no-templates-in-visual-studio-2017) checkbox in the installer.
Have you tried JSON.NET [10.0.2](https://github.com/JamesNK/Newtonsoft.Json/releases/tag/10.0.2) (or [10.0.3](https://github.com/JamesNK/Newtonsoft.Json/releases/tag/10.0.3)) instead?
Yes, but I get the same error about 10.0.0.1, which doesn't seem to be referenced in the project and there's no packages file. 
Would you be interested in zipping and uploading the solution (with name changed and code stripped out) so we can debug it?
It's a fresh solution. I literally did the steps I posted. Nothing else. 
I'll record a video for you in the morning (it's 3:36 am here and I'm in bed) if your sceptical. 
oops. missed that somehow :p. Maybe the cached packages are corrupted? You should be able to find them in `%userprofile%\.nuget\packages`. Also did you try repairing Visual Studio from the installer?
I'll take a look at the packages tomorrow. Thanks. I uninstalled all core SDKs (except the 2015 1.0.2 preview which can't be uninstalled for some reason) and all versions of visual studio from my machine and then installed VISUAL Studio 2017 community edition again. So I guess you could say I repaired it. It installed core SDK version 2.0.2 and the issue was present, so I installed 2.0.0 as a separate download and the issue persists. It might be the cache, though. I hope. 
Newtonsoft's JSON.Net is the de facto JSON library to use with the NET framework. It's super easy to use and really easy to plug in, and you can get it as a NuGET package, which is also a great thing to learn of when you're first starting. As with APIs, Id suggest searching Google for "IMDB API" or something. What it sounds like your teacher is suggesting is that you dynamically pull your data from the website directly rather than from your text file. The probability that an IMDB API already exists for C# is absurdly high so if you search for that, you're liable to find it. But if you want to try doing your own for the sake of learning about it, it's pretty much just as simple as dynamically creating a URL using whatever search filters you want, and then processing the JSON result that IMDB gives back. Thats something that doesn't really need another package and regular old System.Net is capable of handling if you're not doing this for a commercial setting or whatever.
Thanks for the answer, I have a few question about it! Do I have to make a separate .net application to pull from the API? Or can I do it in the WindowsForm directly? Maybe it's a dumb question but still. Thanks in advance for your answer :)
Fortunately, plenty of APIs exist to serve this purpose so that makes your life much easier. The big ones you should look into are TheMovieDb (TMDb) and OpenMovieDb (OMDb). First thing for you to work out is how to query the API. Pick one you want to use and find the documentation on their site. You'll probably need to register on their site to get a key to use the API (free). Following their documentation, work out what you want to request from the API and request it with WebClient (find documentation on MSDN). At this stage, you'll have the API response which I'll assume is JSON. You'll want to deserialize this with Newtonsoft's JSON.NET (Google it). Then google how to read the data from a JObject. Any questions, fire away. 
Got it installed, thanks!
I'm trying to read TMDb's documentation but it's kinda all over the place. Do you think there are some tutorials/more "streamlined" versions of the doc? Sequential stuff, like from A then B then C, it's easier to follow that way for someone like me who's used to work with books and videos. Same as above, to do this thing (pull from API, parse JSON etc) do I have to make a separate .net application or can I do in the WindowsForm I'm using? If I have to do it in a separate application, can I "call" this application from my WindowsForm? I've just started to use classes, so I'm not that far into c#. Maybe those are really dumb questions, but still.
You can do it from within the same application. For the sake of writing cleaner code, it's best to have the code that accesses the API and processes the data be in a different class than your WinForms/WPF directly -- having something like an `ImbdApi` utility class, or a `MyProject.Data` namespace or something, rather than just making the call directly inside your `OnClick` event handler. Both of those are programmatically valid, but the former draws clearer lines, makes your code more reusable, and you'll definitely appreciate having your interests separated later on.
Not that I'm aware of. Querying web APIs isn't really a beginner topic so I doubt there will be the basic tutorials you're looking for I'm afraid. I'm happy to walk through it with you if you want? No, you can all do it from the same application. You don't even need to do it from another class. Do you know how to make a web request with WebClient? Finally, they certainly aren't dumb questions. We were all beginners once and it's great to see someone wanting to learn and not just get handed code!
An API is more or less just a series of methods that you can call to get data or do other stuff. An IMDb API would allow you to query their database directly rather than using your .txt file. 
It works.
You shouldn't be learning how to consume web APIs from services which may or may not have good documentation. You've gotta take it from the horses mouth, link at bottom. But first. How much experience do you have? Like do you fully understand some of the basics of programming like OOP and collections? Are you comfortable with NuGet packages? Reason I ask is that the guys replying previously are correct, you're going to need to instantiate a WebClient to interrogate your API of choice, which will return data in JSON format. But once you've got that data it should be mapped to object model collections for disseminating. You'll also need to do some analysis on the data before you display it in the presentation layer of choice. Don't be discouraged, though consuming APIs is a topic that would not be learned until you know the basics well, it's far easier than scaffolding an entire data layer yourself. This is a fantastic tutorial and it'll teach you how to interrogate an API, as well as map it to objects and display relevant data need upon criteria. https://docs.microsoft.com/en-us/aspnet/web-api/overview/advanced/calling-a-web-api-from-a-net-client This assumes prior knowledge (which is why I was asking about your experience above). It's also assuming you've already created your own simple API, which would actually be a good idea as it'll give you the all important context behind what the API actually is. You don't need to though, just follow along with the tutorial, create the data model to suit the imdb model you get, and substitute the GET requests in the tutorial with the ones the imdb tutorial tells you to use. Additionally, download the Chrome extension called Postman, it allows you to test any web API and see exactly what is returned. https://www.getpostman.com Good luck, this side of C# is fun!
For all future Reference: I've been programming in c# for about a year and I've just started to do OOP programming. I made a Super Mario game in Java using classes and stuff but I followed a tutorial to do it, I understood pretty much everything he was doing tho. It wasn't hard to follow. I have zero experience with the web and stuff related to it, last year I got a really bad teacher and this year it's the same story. My IT teacher is very good, but my other teachers (the ones who should explain us the web, servers and stuff) are not good at all. So i don't gave any experience and/or knowledge about it. I know I should learn to walk before I can run, that's why I came to this SubReddit, hoping to get a sense of things, what should I do and whatnot. I have no prior knowledge about this subject, but I'm higly motivated to learn.
UWP ("Windows Universal") is not a console app. 
Yeah technically the debug is the one that actually needs the pause after exist because the console is used so often for debugging.
Because design patterns can be implemented a lot of different ways. So your question is odd...
how so
&gt; Finally I can write pure functions that actually look like functions Curly braces make the method looks "less pure"? &gt; Having the ability to write code that looks more elegant and is closer to what you’re conceptually doing does have a lot of value in my opinion. I agree, but the absence of curly braces in methods and properties doesn't play a roll in this. Lambdas, `yield return`, `async`/`await`, `using`, generics etc do play a role in expressiveness. Compare this: public int Sum(int x, int y) =&gt; x + y; public int Increment(int x) =&gt; Sum(1, x); To this: public int Sum(int x, int y) { return x + y; } public int Increment(int x) { return Sum(1, x); } The former is less verbose, not less expressive. Being less verbose is usually good, but now I find classes where half methods are written in one way while the other half is written in another way. The code as a whole looks worse, much less aesthetic --unless you write a full class with expression-bodied methods, in this case it will look pretty untill the day someone transform one of them into a regular method to add a logger. People mix regular methods with expression-bodied methods and **this** bugs me.
Establish what your paying clients concerns are, establish what your potential clients concerns are, establish what your concerns are (you mention restricting their use of certain data). Prioritise items from those lists. Don't ask them questions like "Would you like longer battery life", no one answers no to that, keep the questions neutral if you have to ask questions at all: "How would you characterise the effect FarmSimulator 2, pork to spork affects battery life on your device, not at all, barely, some, a lot, all of it". Don't do things for the clients that they won't appreciate is the cynical sounding answer, it's a waste of your resources when you could be giving them things they will appreciate. 
Definitely agree! I was talking about this exact topic of query vs. fluent syntax on the On .NET Show (https://youtu.be/w4BEpUymI-c?t=38m25s to skip to where I started talking about it). Whenever I show this demo to folks, I always start with a survey, asking folks which syntax they prefer. For the most part, anywhere between 90%-100% of the audience tell me they prefer the fluent syntax. Then I like to show them this demo because, just like you said, there are certain scenarios where the method syntax just becomes unwieldy and cumbersome.
Keep anything you don’t want your competition to have on the server-side. 
Oh wow thanks for the kind words! :D Glad we can be of service and our work is usable and works well for you! :) Cheers!
Can't help you with that specific problem, but you could check the activity log of VS
Honestly the "select" should go last in SQL too. If the designers could travel back in time they'd probably make it work that way. It's impossible for any kind of "intellisense" to work with SQL when the select comes first, so I find myself just putting "*" then adding the "from", then coming back and doing the column names so I don't have to type them. But anyway, I agree with your post :)
Yeah, it's like a progression of what happens to the data. First I do this, then I do that, etc. I find it much more readable. In the end it probably comes down to which way you learn it though.
&gt; Curly braces make the method looks "less pure"? I'm saying it makes functions look like *functions* rather than side-effecting operations.
Wow, even deleting the packages cache didn't help. This is infuriating!
It's also wrong. :/
You can create a RESTful API using ASP.Net Web API. In Visual Studio it will create you a sample template to fill if you select the correct options. Are you looking to make a read-only API or are you looking to allow data to be added to the data source? Essentially a basic Web API project is typically laid out like below: API Endpoints (Contract Models) -&gt; Business Logic (Maps Entity Models to the Contract Models) -&gt; Data Layer (Entity Models) ASP.Net Web API by default uses Data Contract serialization or JSON.Net for creating the contract output so this allows you to automatically handle XML and JSON output based on the accepting header value. For learning, you can manually map the Data Entity models to the Contract Models but later on, I'd look into using AutMapper to do the mapping dynamically. You probably aren't going to find a library that will read your text file into simple models so you'll end up having to do that on your own. Put all this together and you have a simple read-only RESTful Web Service.
Ok, so fundamentally, when you're using an api, you're connecting to a server (typically http) and getting a response (from a get/post). So to understand APIs, I'd start by doing just that- connect to a website, get the content, and do something with it. Maybe start here for that: https://stackoverflow.com/questions/16642196/get-html-code-from-website-in-c-sharp The next bit is doing it in a particular structure. If we're accessing a website programmatically, we don't need all the fancy markup, we just need to be able to format our query and get a result, and know what format the result is going to be in (jason, xml, etc). One pretty common way to do that is to use REST apis. You access a url via a particular structure, and get a data response. Here's an overview: https://en.wikipedia.org/wiki/Representational_state_transfer Once you've read up a little bit on the general principal of the thing, you can look at a c# specific implementation, such as this one: http://restsharp.org/ Once you've take a look at all that, you should have a pretty decent general understanding, and you just need to look at the particular implementation for IMDB, or whatever site you're trying to access. Best of luck!
Eclipse is a tool to ensure coding discipline, with the intended end result of code is always as simple and harness-testable as possible.
Good answer, thanks
for example the person want to buy 1 ps4 2 xbox and 1 controller and get his total cost displayed
could you show what you have so far?
What are you wanting help with? Good object oriented design? Basic C-sharp syntax? Advanced C-sharp features? Debugging a specific exception or failure? Without that information, and without seeing code, there's not much that we can do to help.
 double gct = 0.25, discount = 0.05, cost, quantiy,prices, ggg=gct, price=0; choices: //Console.Clear(); Console.WriteLine("Item for sale"); Console.WriteLine(""); Console.WriteLine(" 1) ps4 - $100 "); Console.WriteLine(" 2) xbox - $80 "); Console.WriteLine(" 3) controller - $20 "); int sale; sale = Convert.ToInt32(Console.ReadLine()); switch (sale) { case 1: Console.WriteLine(" how much ps4 "); quantiy = Convert.ToDouble(Console.ReadLine()); cost = 100; price = cost * quantiy; if (quantiy &gt;= 3) { Console.WriteLine(" your price is " + price); double dis, gct_cost; dis = price - (price * discount); Console.WriteLine(" you got a 5% discount " + dis); gct_cost = dis + (dis * gct); Console.WriteLine(" final cost with gct added is " + gct_cost); } else { double gct_price; Console.WriteLine(" your price is " + price); gct_price = price + (price * gct); Console.WriteLine(" your price with gct is " + gct_price); gct_price = ggg; } break; case 2: Console.WriteLine(" how much xbox "); quantiy = Convert.ToDouble(Console.ReadLine()); cost = 80; price = cost * quantiy; if (quantiy &gt;= 3) { Console.WriteLine(" your price is " + price); double dis, gct_cost; dis = price - (price * discount); Console.WriteLine(" you got a 5% discount " + dis); gct_cost = dis + (dis * gct); Console.WriteLine(" final cost with gct added is " + gct_cost); } else { double gct_price; Console.WriteLine(" your price is " + price); gct_price = price + (price * gct); Console.WriteLine(" your price with gct is " + gct_price); } break; case 3: Console.WriteLine(" how much controller "); quantiy = Convert.ToDouble(Console.ReadLine()); cost = 20; price = cost * quantiy; if (quantiy &gt;= 3) { Console.WriteLine(" your price is " + price); double dis, gct_cost; dis = price - (price * discount); Console.WriteLine(" you got a 5% discount " + dis); gct_cost = dis + (dis * gct); Console.WriteLine(" final cost with gct added is " + gct_cost); } else { double gct_price; Console.WriteLine(" your price is " + price); gct_price = price + (price * gct); Console.WriteLine(" your price with gct is " + gct_price); } break; case 4: break; default: Console.WriteLine("hi"); goto choices; break; } Console.ReadKey(); } } }
Basic C-sharp syntax
I'm on mobile right now so haven't looked in detail. I think commiting the packages folder defeats the purpose using the nuget package manager. In VS2015 the build will restore the packages.
Oh yea I should git ignore that right?
A couple quick thoughts: You aren't declaring a number of variables (unless it's just not in the code you posted) int quantity; double cost, price; double gct = 0.01; double discount = 0.05; You are using a double to hold the quantity, but think about that: can quantities of xbox be anything other than a whole number? Integer would be a better choice there. Really the action of choosing an item and a quantity should be a function, so you have a menu that says something like: 1&gt; Add item 2&gt; remove item 3&gt; get total which call functions named AddItem(), RemoveItem(), and GetTotal(), respectively, rather than trying to do everything in one big function. This also helps you not have to use gotos, which I would not recommend for a beginner programmer (or at all, for that matter). Gotos can cause all sorts of unintended side effects and are a pain to debug. Two final notes. First, get in the habit now of giving your variables more meaningful names. You have a price/cost/gct_cost/gct_price, discount/dis. Those names don't really tell me what's happening (price and cost are synonyms!) The only way I could tell what they were for is having done similar projects, but in the real world you need more descriptive names to help you maintain the code later on. Finally, what's with all the newlines everywhere? If you are using them to keep sections of code apart, you should probably be making functions. Newlines are a good thing, but having 4 in a row makes code unreadable.
[Yes] (https://docs.microsoft.com/en-us/nuget/consume-packages/packages-and-source-control) `# Ignore NuGet Packages *.nupkg # Ignore the packages folder **/packages/* # Include packages/build/, which is used as an MSBuild target !**/packages/build/ # Uncomment if necessary; generally it's regenerated when needed #!**/packages/repositories.config # Ignore other intermediate files that NuGet might create. project.lock.json is used in conjunction # with project.json; project.assets.json is used in conjunction with the PackageReference format. project.lock.json project.assets.json *.nuget.props` 
Okay I'll do that tomorrow! Thank you! Anything else?
Also make sure you updated your NuGet extension. The yellow flag doesn't mean a lot as it only shows notifications, it does not constantly show when you have outdated extensions. Check the extensions manager.
Nuget isn't an extension in 2017. It's taken care of through VS updates. 
Couple of things you could try to make this work. Make sure your VS is using NuGet 4.3 or greater. Click on Help -&gt; About Visual Studio -&gt; Notice the NuGet version and update if required. If it still doesn't work, go to the location where the physical NewtonSoft package is present (likely in C:\Users\User_Name\.nuget\packages). Open the Newtonsoft.Json.nuspec file in a text editor and add a group tag for targetFramework=".NETStandard2.0" and copy all of its contents from targetFramework=".NETStandard1.0", save and close. Open the lib folder within the package and copy the netstandard1.0 folder within the same directory and name the copied version as netstandard2.0. I hope the first suggestion works for you cause the second one is kind of a hack :)
http://graphql.org/
Yep, NuGet 4.4 I guess I'll try your hack.
Except my nuget cache is empty after I cleared it yesterday :-(
I've just followed your steps and it works correctly. You say you have 2.0.2 installed. I don't know where you got that version, is it a preview? I would suggest uninstalling all the .net core framework sdks you can find, then go to the website and download the 2.0.0 sdk and install that. If you can't find a way to uninstall it, try just downloading and installing 2.0.0 and see if that helps. I can see json 10.0.0.1 in my references (it's nested about 3 deep so you have to hunt for it).
I downloaded community edition from [here](https://www.visualstudio.com/downloads/) by clicking "Free download" - this installed .NET Core 2.0.2. Visual Studio 15.4.1 was released on the 10th of this month, so I assume 2.0.2 came with it. I've also tried uninstalling .NET Core 2.02, and .NET Core 2.0.0 and then installing only .NET Core 2.0.0 and it doesn't work. The only .NET Core SDK I can't uninstall (the uninstaller fails) is .NET Core 1.0.1 - VS 2015 Tooling Preview 2. And yes, I can follow the same steps on my work laptop with no issues.
 var discountPct = 0.05; Console.WriteLine("How many PS4s ($100 each)?"); var numPs4s = Convert.ToInt32(Console.ReadLine()); Console.WriteLine("How many xboxes ($80 each)?"); var numXboxes = Convert.ToInt32(Console.ReadLine()); Console.WriteLine("How many controllers ($20 each)?"); var numControllers = Convert.ToInt32(Console.ReadLine()); var rawTotal = 100 * numPs4s + 80 * numXboxes + 20 * numControllers var discount = discountPct * rawTotal; var total = rawTotal - discount; Console.WriteLine($"Total cost pre-discount: {rawTotal}"); Console.WriteLine($"Discount of {discountPct}%: {discount}"); Console.WriteLIne($"Total cost: {total}"); 
Well no. That's not what constructors are for anyway. Make an async initialize method instead that you call after constructing the object.
I'm running the same version, albeit the commercial version. Does it look like this in the project set up? [pic](https://imgur.com/a/OQsuY) If you copy the solution you created on the laptop (that works) onto the bad machine and open it, what happens? Does it work or fail? If it fails you can compare the project files and see what's different, although it won't necessarily help fix it. Also have you tried deleting all your nuget cached files? Go nuts and kill any cached packages or packages in the solution.
Other answers may give the impression that an API has something to do with web stuff like getting data from a server. While this is not false, it might give a false picture of what an API is. It's merely a way of communication between software components. It may well happen all on the same machine, or may not even have more than one program involved. You already have used at least one API: The C# API. It contains keywords like "for", "int", "string", "true" and so on. When you use "for", you use code which is written by other people to provide some functionality. The same is true if you use the IMDB API: Someone built functionality for IMDB some time ago, and exposed this functionality through a method or keyword which others now can use.
Yeah, it's *exactly* the same. At work I use 2017 Enterprise. Unfortunately I can't test copying a project from my work laptop until after work tomorrow (my laptop is at work). My nuget cache is so clean that the folder no longer exists (I deleted the .nuget folder entirely for the sake of testing).
Sounds simple enough then! I found a tutorial on how to get data from an API and how to deserialize a JSON, I should be all set right?
I think so - have fun exploring! :-)
I hate these sorts of errors. My csproj just contains: &lt;Project Sdk="Microsoft.NET.Sdk.Web"&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;netcoreapp2.0&lt;/TargetFramework&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;Folder Include="wwwroot\" /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.0" /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt; So it's not even as if there are are load of places for it to be hiding a problem :) 
I know! Right? See my updated question for the solution I found. I've replied to a StackOverflow post on the topic with that solution in the hope that it saves someone else the time that I've wasted trying to fix this! Thanks for your help though!
Brilliant, well done :D
 Use this gitignore-file. https://github.com/github/gitignore/blob/master/VisualStudio.gitignore
Can you elaborate on the actual project and what you have tried to do so far?
Overall dude it looks good, just a couple of minor things: 1) Don't comment why you include using statements, it's not important. 2) Get in the habit of returning IEnumerables instead of Lists. Consumers of, say, a download spotify playlist usually don't care what kind of data structure that playlist is in, so long as they can iterate over it. Also consider the use of IReadOnlyCollection. Makes things a little more bullet proof. Nice work!
i have to code a "reaction test" programm, i just dont wanted to ask for the whole programm :D but the short version is like: click start button wait random seconds label with 5 different background colors and texts (for example text is "yellow" but the background color is blue) timer starts user has to press the right button out of 5 on the form (in the above case: the button with the text button) timer ends right button: best time, worst time, average time user needs to press right button wrong button: give out: wrong
Why are you posting a random mp4 file that I'm sure is totally legit. Why the fuck is an Adobe After Effects question being asked here?
Thank you so much, this seems very straight forward. I'll probably try it out!
Thank you so much for the insight! However, how would you handle it if TotalNumberOfCustomers would be a variable which would be different for each Customer within the Customers list?
Thank you for the advice, I haven't worked with EF much (it's on my to-do list), but I will check it out once I get some time.
I felt bad doing it the way I did, so this definitely makes sense. Thank you!
Ok, I won't give you the code, but ill point you in the right direction. In your button handlers you want to have the timer function to start and stop depending on the button, if you go to msdn and search for timer or stopwatch you will find the c# function that does it. It should show examples on how to use it. If it doesn't look at tutorials point. Hopefull that points you in the right direction. Out of curioisity is this a web project or desktop app?
Based on your comment you want a stopwatch not timer.
Is a timer really required? Why not implement a sleep for random seconds, store time to the millisecond when sleep finishes (start of your test), and calculate difference between correct answer and test start. 
Well, you know, maybe you can just watch an mp4 online? Idk how you would get a virus without even downloading it and running it (unless it's a browser exploit but it's Dropbox ffs). I do agree that this is completely unrelated to C# or .NET, let alone programming.
Yeah, I dread to think how many viruses you've gained over the years with that naivety. &gt; without even downloading it and running it You are literally doing that even when streaming.
Nope, the decoder doesn't "execute" the video file, it just decodes and renders it. It's as if you're saying that using a disassembler on a virus file "runs" it, it doesn't. I've never used an antivirus (except common sense) and so far there have been no viruses or adware into my systems for as long as I remember.
Now add dependency injection and unit tests. Those two things will really make the small program stand out
Don't create work for yourself. No one is going to say no to a positive feature.
Assuming you're doing some sort of calculation and it's not stored on the Customer model, I'd still keep it in the view model and do something like this.. public class Main { private static readonly Random _random = new Random(); public static List&lt;Customer&gt; GetAllCustomers() { var customers = new List&lt;Customer&gt; { new Customer {Name = "bob", Email = "email@aol.com", Id = 1}, new Customer {Name = "Sam", Email = "aex@aol.com", Id = 3}, new Customer {Name = "Tim", Email = "tim@aol.com", Id = 2} }; return customers; } public static CustomerListViewModel BuildCustomerListViewModel() { var customers = GetAllCustomers(); var customerListViewModel = new CustomerListViewModel(); if (!customers.Any()) return customerListViewModel; foreach (var individualCustomer in customers) { customerListViewModel.Customers.Add(new CustomerViewModel { Customer = individualCustomer, TotalNumberOfCustomers = CalculateTotalNumberOfCustomers() }); } return customerListViewModel; } public static int CalculateTotalNumberOfCustomers() { var randomNumber = _random.Next(1, 1000); return randomNumber; } public class Customer { public int Id { get; set; } public string Name { get; set; } public string Email { get; set; } } public class CustomerViewModel { public Customer Customer { get; set; } public int TotalNumberOfCustomers { get; set; } } public class CustomerListViewModel { public List&lt;CustomerViewModel&gt; Customers { get; set; } public CustomerListViewModel() { Customers = new List&lt;CustomerViewModel&gt;(); } } } If it's going to be a property on the actual Customer object you can just add it there and ditch your CustomerViewModel and just use your CustomerListViewModel.
I agree with just about everything you said. But a point of order...cost and price aren't synonymous in most businesses. Cost = what I paid for it. Price = what I sell it to you for. Cost = $2.50 Price = $7.75 Price - Cost = Profit In your defense, to a person who doesn't deal with buying and selling things, they can be synonymous.
Removed: Rule 3, Rule 4.
&gt; This is absolutely why we need "Can't post unless 100 comment karma" and "Can't post if not older than 2 weeks" type of rules setup. Nope, not happening for self/text posts. For submitting to outside URLs, possibly. But not for text posts, so this wouldn't be covered by it anyway. Furthermore, this is easily breaking Rule 3/4.
Touche! Either way the naming could be improved.
Overall the program looks good. The main area I would focus for improvement would be naming and design. You might want to read up on Separation of Concerns and the Single Responsibility principal. Looking at the YouTubeClient there are some issues when you think about SOC and SR. Given the name I would have expected it to only interact with YouTube. But when you look at the dependencies of the class you can see it interacts with YouTube and Spotify. Then when looking at the method SearchVideos it does more than search videos it, gets the songs from the Spotify playlist (there's a bug here because you aren't passing in the playlist name from the method parameter), searches for the videos, downloads them, and converts them. The two YouTube functions belong in this class but looking up the playlist and converting files belongs somewhere else. When you do this your main method now orchestrates the flow of control, find songs in Spotify playlist -&gt; find songs in youtube by name -&gt; download from youtube -&gt; convert file. Each unit is reusable without the others. You already did this a little bit when you abstracted away the Spotify client now you should apply it to the YouTubeClient.
What kind of work was it? What kind of software was written?
A tool for creating a .gitignore file is https://www.gitignore.io
In your main YouTube search method, you return empty of_youtube is null. I think you should throw an error.
Thank you!
+1 for not commenting using statements I think you can make more of your readme.md file - put your remarks and such in there. Specify how to configure it, how to set it up and generally just put some concise blurb in there about this project. Consider versioning it perhaps and having notes each time you release and bump the version. Again, readme.md You should definitely look to follow the advice below too and introduce IoC and some tests. The first thing I'd do IF I was forking this repo, would be to run the tests. =)
Agreed!
Very short code review here: class Program { // No need for private static here if data is not shared between methods. // Just use local variable in Main private static YoutubeClient _youtube; static void Main(string[] args) { // Use var _youtube instead of private static above _youtube = new YoutubeClient(); // You may consider option of passing names as command line parameters Console.WriteLine("Please enter a playlist name"); var name = Console.ReadLine(); Console.WriteLine("Please enter a path"); var path = Console.ReadLine(); // Use string.IsNullOrEmpty or string.IsNullOrWhitespace to see if strings are not empty // If SearchVideos is not called the say something. Do not leave user guessing. if (name != null) _youtube.SearchVideos(name, path); // Print something before ReadKey. User would not know why program is just // sitting there. Console.ReadKey(); } }
You have a project reference to YoutubeExtractor, but it's not part of the repository. Also, you might consider using [YoutubeExplode](https://github.com/Tyrrrz/YoutubeExplode) instead, because YoutubeExtractor is not maintained anymore, as seen by the [issues](https://github.com/flagbug/YoutubeExtractor/issues).
If you don't know what an API is, the Microsoft docs have a good overview: https://docs.microsoft.com/en-us/azure/architecture/best-practices/api-design 
How can you possibly think that someone who doesn't know what an API is should start with GraphQL?
i understand what you are saying but i don't think i would be able to code that. i have reach that far yet. a sample code i could work from would help and thanks for your time and help so far
thanks for your feedback, the only problem i have is that if the person buys more that 3 of the same item he get a 5% discount. the 5% discount is not given to all items purchased 
here is a image of the question i was given https://ibb.co/cytCmR
&gt; Get in the habit of returning IEnumerables instead of Lists. So much this, I see even people who have been using C# a few years using fucking List on public interfaces alllll the time.
Generally it's pretty neat, but I do have a few observations: - The naming of the app is pretty odd: it's a SpotifyDownloader, but apparently, it also accesses YouTube? You might get the impression that naming is not that important, but it's actually incredibly important. - The architecture of your application contains a very unusual decision: you have a YouTubeClient and a SpotifyClient, but instead of referring to both of them separately in your main program, the former instantiates the latter. This convolutes the responsibility of your modules and makes working with your code problematic, especially if you seek to extend it to ther APIs in the future. - Consider creating some sort of GUI! It's good exercise and also much more convenient. I mention this especially since if I understand it correctly, the app contains no negative feedback loops of any kind for the user. By that I mean that your user is not notified if they messed up and is given no opportunity to fix their mistake. I hope this is helpful!
I'd.. not really consider the client-side rendering as a major cost, or if it is, that could be a problem in itself which needs addressing.
This is totally an argument waiting to happen, but in several places you have a conditional or foreach with the executing line just tabbed over and not enclosed in braces. The style I favor (and what my team goes by) is to either one line it (if short enough) or to enclose in braces. It helps to make it harder for your executing piece of the conditional/iteration to not accidentally get messed up down the road. I fully realize that for every person that argues my way there will be someone that argues the opposite. The code operates the same, but I would bring it up if you were on my team. Just something to be aware of so that it is a conscious decision, whichever side of the fence you fall on.
method syntax. Flows a lot easier with the rest of the code and is a lot more readable I think.
Have you restarted your computer after re-installing visual studio? Seems silly but had something very similar happen after updating VS and not listening to the "restart your pc" part :)
I've fixed it now, but yeah. I even went to bed and slept in between (I always turn my computer off when I sleep). 
We wrote web applications for a health insurance company.
Raspberry pi can run .NET core without any issues. I am currently using it as a web server, which runs on raspbian. It probably can even run .NET framework if you install Windows 10 on it.
You could still do that as this technique doesn't prevent it. But mostly what's happening here is you want an *immediate* exit when the token is cancelled. Those other tasks might be doing work or will otherwise have to cooperatively test if cancellation is requested. Whereas the Task.Delay will act immediately if the token is canceled since its task is being awaited through Task.WhenAny().
Was it ever a big problem? I agree that using interfaces is cleaner but since List is the most used data structure in C# it does not seem like a big deal
This seems rather dubious advice. If you know the data type you're returning, don't return the interface - consumer will lose type-specific functionality without gaining absolutely anything. In case of returning IEnumerable&lt;T&gt; instead of List&lt;T&gt;, consumer has to call .ToList(), if they want to use .Count, .BinarySearch() or any other List-specific functionality - which makes List&lt;T&gt; versatile and fast collection type. There is a reason why it is so widely used everywhere. Frankly, that seems to be a corporate-Java-style code smell - put interfaces everywhere, gain nothing. Not to mention that calling methods via interface is slower than type calls, but that can be considered micro-optimization.
You ever figure this out?
Note: I am aware of the Paint method etc. Just struggling to get my head around how to apply these algorithms etc to C#
Nope.
What part are you having trouble with?
I have a fractal program in windows forms and another in wpf ... will post code when I reach home
As far as your use case is concerned, there is a one to one mapping between Java and C#. Most of your code that represents your algorithm (as apparent from a quick glance) seems like straight forward floating point manipulations, with the rest being UI event handling. There is plenty of support for both in C#. For UI, you can Google WPF C# and read up on the relevant resource. If you have any specific queries besides these, please share.
Noticed I am getting downvotes. I don't work for Pluralsight but I do visit the site nearly everyday... I know users here are always asking about ASP.NET Core 2.0 so I figured I'd share the news that the course finally came out, since he originally had a 1.0 and 1.1 course that a lot of people found useful.
I do not agree with returning IEnumerables, my preferred option (and if think of .NET Framework, almost all public methods does not return List, IEnumerable or IReadOnlyCollection, they return arrays) is to return arrays. Benefits include: - Short and concise notation - Signals immutability - Better performance than list (however very little) - Better performance than IEnumerable (if the code after call site is iterating through the IEnumerable multiple times) I do not get the advantages of List and IReadOnlyCollection
you will have to convert from awt to winforms (or wpf if you want to use that). so look up the things you use in awt for windows forms. most of them have a similar counterpart in winforms (mouse events). for drawing i would recommend using a picturebox. gotta warn you though that images in winforms are super slow to draw pixelwise. 
Fair enough, though I'd be concerned about "orphaned" tasks at that point. What's your technique for recovering if/when they complete?
Why did you default playListName to empty (PrintPlaylistTracks(playListName = "") )? You should avoid tightly couping your code to the output. Meaning SpotifyAPIWrapper directly writes to the console. You could create event handlers, call backs, or an output interface that the api calls so you can get the output. I saw other comments about returning IEnumerable vs list, I don't see the point. Just return the array, drop the list unless more items will be added.
Thank you, I'll check it out. I like that this course also features API creation, I feel like most courses on ASP.NET Core go really light on the API side of things. However I guess we don't get to be very choosy with ASP.NET Core 2 courses right now.
His courses are great. I would totally recommend them to anyone looking to break into ASP.NET core
Regarding learning about all things ASP.NET Core Web API: check out Kevin Dockx's Pluralsight courses. It's as if all this instructor does is API related. https://app.pluralsight.com/profile/author/kevin-dockx 
Thank you for letting us beginners know where the future is at, it's the little comments like this that make the difference. Appreciate it
You can check their status in the catch, something like this (put the WhenAny back in as needed): var task = Task.WhenAll(bunchOfTasks); try { await task; } catch { Console.WriteLine(string.Join(", ", task.Exception.Flatten().InnerExceptions.Select(e =&gt; e.Message))); } Also, you could use continuations which run after each task is complete. Or, you could always await them later as needed, etc.
A spanner IS a wrench isn't it?
Wow, it is. I'm too American for my own good apparently
No idea why you would get downvotes. Both Pluralisght and Wildermuth are great. Its an excellent informatinal post.
Removed: spam. Three strikes, you're out for 30 days.
if only they still had the free pluralsight trials...anyone got a trial account that still works to share? 
There's a Start a Free Trial button when I visit the page. You could clear your cookies, use private browsing, move to another country, change your name, and try again.
He is an amazing instructor. I even got a chance to work with him on a project 5 years ago. Pluralsight is pretty good. 
That one only lasts 200 minutes unfortunately 
Sign up for a MS Dev Essentials account, it's free. You get a 3 month free trial to pluralsight and some other cool stuff.
&gt; Depending on optimizations of the LINQ provider, this may mean, for example, that your database fetches all John Smiths to your application, and the application then returns first of those. You definitely don't want that. Can you name a single one that does it that way?
Thats what I have found everywhere that it has something to do with 32bit and 64bit setting. But no where I have found how to figure out exactly whats happening. In my case I tried both x86 and x64 settings in VS community edition. Still getting same error. From the error message it seems that it is trying to load "C:\WINDOWS\assembly\GAC_MSIL\office\15.0.0.0__71e9bce111e9429c\office.dll" but failing with this error. 
Thank you for the advice. However, I am trying to script management of local folders and emails in my outlook client. So nothing to do with the server. Noting big, just some convenient folder management and stuff. 
hehe they no longer do those 
hehe they no longer do those 
hehe they no longer do those 
Just tried, exact same error. So probably not namespace issue, also if it is I would expect compilation error due to being different types.
My regular account already has admin rights, but I cannot login as the admin as this is my work PC. Still I guess I cannot rule out security settings, although I cannot figure out what they are.
For a lot of these, they're probably "bugs" in the IQueryable provider. I've not run into a provider which behaves so poorly. But several of the points are very good. Particularly that of .Count() versus .Any()/.All(), and .OrderBy().OrderBy(). &gt; Don't use Enumerable.Count() method for arrays or any collections that implement ICollection&lt;T&gt;/ICollection interface I completely agree. Similarly, I would avoid using `.Any()` on `ICollection` types when `.Count &gt; 0`. (Unfortunately many people disagree with this advise purely on "readability" or whatever).
Does it need to be an external program? VSTO makes this pretty easy if you want to go the add-in route.
Common LINQtoSQL mistakes FTFY
Did you have a look in regedit for that clsid? Just open it up and search for 0006F03A-0000-0000-C000-000000000046 See if there's anything in there. On your home machine try running Visual studio as administrator. Right click the icon and then "run as administrator". There's a difference between being a user with admin rights and running as administrator, although the specifics elude me right now :)
&gt; Similarly, I would avoid using `.Any()` on `ICollection` types and instead favor `.Count &gt; 0` What's the benefit of this?
.Any() iterates the collection, .Count read a property
It's just a little performance benefit. There's no `Any(ICollection&lt;T&gt;)`, only `Any(IEnumerable&lt;T&gt;)`. Within the implementation it will try to cast to `ICollection&lt;T&gt;`, and if the cast succeeds it will just check the `Count` property. You can skip this whole cast attempt by just checking the property yourself. But unless you're in a hot path, this is very negligible.
TIL
Oooh when was that removed. Just looked cos was like "that guy's full of shit" but no. Totes correct
Damn! You're right. Sorry.
Is there enough of a difference compared to full framework ASP.NET to warrant giving this a run through? Assuming the watcher has also used EF and Angular v1.
[Unfortunately it doesn't even do that, it just always creates an enumerator.](https://github.com/dotnet/corefx/blob/master/src/System.Linq/src/System/Linq/AnyAll.cs#L11)
&gt; consumer will lose type-specific functionality without gaining absolutely anything. False. &gt; consumer has to call .ToList(), if they want to use .Count, .BinarySearch() or any other List-specific functionality **if**
I think you forgot to say what functionality they gain. And "**if**" you take the choice away, well...
I suggest using WinForms as a you are a new C# user, and WinForm's PictureBox is a lot easier to use than WPF (microsofts like 2005-to-2015 way of doing desktop apps) if you want to use the latest and hottest Windows desktop tech - its called Universal Windows Platform - UWP
you checked in the \.vs, \bin, and \obj folders and their files into source control. usually those are ignored and do not need to be version controlled. i'd suggest adding the standard Visual Studio C# .gitignore
Awesome, thanks for sharing
&gt; `if (_youtube == null) return;` I'd say that this is a code smell - maybe raise an exception if the youtube client wasn't started correctly. or at the least, show the user the message.
Do you have some evidence/articles to back this up?
thanks for the link to youtubeexplode, was wondering what I could use for a similar program (ie making a simple video downloader for friends because they keep getting scared while using youtube-dl (the CLI program))
One more thought - for my side programs, since I usually put them as a public repo and use it on my resume, i write comments. In visual studio, press the / key 3 times above a property/variable name, or a method, to get some auto-genererated comment to help you out
could just do if (customers.Any()) { viewModel.AddRange(customers); } imo instead of foreach
There's massive differences. Angular 1 (AngularJS) is almost totally different to the current Angular 5.
You’re right, I was mostly wondering about the rest of the stack 
Linq isn't 'supposed' to ever work the way the author describes.
Should I take a his C# course first, before trying to jump into ASP.NET? I know some basics - variable, loops, etc... Nothing major.
I think pluralsight is generally the most recommended resource. I have been trying to learn asp.net as well, but I haven't been able to find very many tutorials that have helped.
I dont know about current courses, tutorials, or what not that you could use, but I will give you this piece of advice: Find some personal projects to work on, some simple ideas, and learn from those. Reading tutorials and taking classes isnt going to do much for you, in comparison... you wont retain half of it unless you are also applying it. For example, start small, some web site or app that does something, preferably something that interests you. Do some initial research on ways to do what you want to do, then just constantly Google/read/etc up on whatever stumbling blocks you encounter.
You got my upvote. Only thing I hate about Shawn is he pronounces URL as "Earl". Love me some pluralsight. 
If I had a penny for every time I've seen people confuse LINQ with LINQtoSQL/LINQtoEntities, I'd probably have around $2.07...
I think I might resort to violence if someone follows the First/Single advice in my project and tries to argue with these bullshit arguments. &gt; if your database has two Person entries with same ID, you have far bigger problems than using LINQ badly... This is precisely why you should catch it as early as possible. This advice is like advocating empty catch blocks around your code because if your code throws exception the problem is somewhere else. WTF!? Also I can't recall a single case where I did a Single and the query wasn't indexed. In practice Single queries are either ids or candidate keys so why aren't they indexed? You are gonna let the performance of your query depend on the point in the full table scan where the item is encountered but you are happy that you optimized with First?
Correct me if I am wrong but even if the LINQ provider generates the embedded queries the database optimizer should still handle them.
The advice I can give if you have limited experience with actual programming as your post seems to indicate is to spend some time on the basics. Specifically spend a couple of weeks learning C# with exercises like building data structures. For example I think building your own List&lt;T&gt; with Add, Remove, Insert, Sort methods and indexers is a great exercise (of course you are not gonna use it in your projects). Get familiar with data types, classes, interfaces, inheritance, generics, collections, delegates, lambdas, events. Do these in exercise console applications (win forms for events). I believe 2-3 weeks with ~20 hours per week to be a good starting point. Also spend a week on SQL basics. Then you can go into the asp.net stuff. If you go directly to ASP.NET stuff you risk not understanding how things work and forcing your coworkers to continuously fix your code.
Nice, just the opportunity I was looking for to activate that sweet 1 year license my new employer gave me. Hope Shawn passed that kidney stone already ;)
This is a good point. The intent is the important idea that Single() captures. Using First() is an early optimization that violates the intent. And as you pointed out, more likely than not, a poor performing Single() isn't necessarily a problem with LINQ, but probably database design and indexes.
Since interop object are really handles to instances of objects in another program, you might have to use copy functions to transfer worksheets data instead of just passing the objects into a new workbook. Don't know how much it helps, but I just spent a couple of months working in interop for a tool at work, and here were some problems I had, in case you run into them and need answers. * Using com cleanup with interop is pretty necessary, or you can crash and hang. [Here is a post about it.](https://stackoverflow.com/a/158752.) Make sure to call [Marshal.ReleaseComObject](https://msdn.microsoft.com/en-us/library/system.runtime.interopservices.marshal.releasecomobject.aspx) * When you access a worksheet, it is better to copy over all of the data at once in one big 2d array rather than one cell at a time. Because it is interop communication, each operation is a separate call from your program to the running instance of Excel. That makes accessing one cell take about the same time as accessing the whole range at once. [Here is a link about that.](https://stackoverflow.com/a/3989452) * The APIs changed from office 2000 which uses object library 11 to office 2010 which uses 14 IIRC. A lot of the stack overflow and documentation shows the old functions, like .get_range() or .get_XXXX, but a lot of the new functions use [] indexing directly on the objects. I hope this helps some. It was a pretty frustrating couple of months for me, and it was taking my program several hours to make a couple of worksheets, so if I can help someone else not have to go through as much of that I'd like to :)
I've run into this pronunciation quite a bit professionally, so not sure it is bad or worse than saying U-R-L. Just a short-hand. What's more annoying is now that .Net Core is open source, the use of MySql (My S-Q-L) vs SqlServer ("sequel server") is on the rise, and of course, everybody in a .Net shop pronounces it as "My Sequel". Though to be fair, the official docs don't mind if people have a localized way of saying it.
Seriously thank you so much for this info. This is was my second day working with C# and .Net (Ruby/JavaScript background), I've been struggling with this task as it's a lot of new concepts to chew on at once. Before leaving for the day I managed to do a full worksheet copy from a Workbook to an already existing empty workbook (still have to deal with the empty Sheet1/Sheet2/Sheet3) using .Copy(), hoping tomorrow goes a little smoother. Ehhhh.. Do you ever have those days where you spend hours hitting a wall, and wind up back at square one? Might be because I'm a Jr. only a few months into a new position, but I'm taking it way too personally :[ 
I totally get where you are coming from. I started in Java, and I am the youngest person at a pretty rigid C++ outfit. After working through a crazy project where literally half of our team and a good amount of our department quit, I still feel like they make me prove myself on each little thing before they will take me seriously. I have pretty bad days, but I try to remember that most people don't really care that much, and what feels personal to you is rarely meant to be personal. There are still senior level people on my team that waste lots of time or mess up so bad they have to completely change tactics and start over, so don't feel too bad :D
I always refer to it as IQueryable for that reason.
I always refer to it as IQueryable for that reason.
These guidelines are bad. The choice of when to use .First should be based on semantics. Making the correct choice between First/FirstOrDefault/Single/SingleOrDefault has many benefits: - It makes it clear what assumptions the code operates under and conveys assumptions about the results of the criteria. - Code operating on the resulting entity can make assumptions about whether it is null or not. If Single/First is used **when appropriate**, then anyone maintaining the code will easily understand that null's are not expected, and code operating on the entity will be ore succinct because it doesn't have to handle the `0` case. - Ensures an exception is thrown if those assumptions are wrong or bad data violates those assumptions. This follows the principle of detecting bugs where they originate. Fail to do this, and an exception is not thrown where assumptions are violated, resulting in bugs that will be harder to diagnose. #When to use First or FirstOrDefault# When your Where/OrderBy in combination with business rules indicate that you may expect one or more results, and you only want the first one. (Be mindful of the *stable sort* concept.) #When First/FirstOrDefault is Wrong# - If you have no OrderBy or other sorting, then First/FirstOrDefault is probably wrong because you will get inconsistent results in terms of which of multiple records is the first. Do not depend on DB storage to return a consistent ordering when you've specified no ordering criteria in the query. You may see coincidental sort consistency in testing, but it is not guaranteed. - Your database model and where criteria dictate that you'd never expect more than one result. - If you do not expect multiple results, then you should use Single/SingleOrDefault because you want an exception to be thrown if more than one result is returned, because that means that there is a bug or misunderstanding. See below. #When to use Single/SingleOrDefault# You do NOT expect multiple records. You will be able to catch these bugs when you use Single* where appropriate: - Your Where criteria or Join criteria was incorrect, resulting in multiple results where one was expected. - You misunderstood the datamodel. I see bad joins due to data model confusion which result in bugs that would have been avoided if Single had been used where appropriate. Or misunderstandings about unique/key constraints. - There is bad data causing your criteria to match multiple records. #First/Single vs. *OrDefault# The only discriminator between using the *OrDefault variant is whether you legitimately expect that sometimes the result will be 0 records, in which case use *OrDefault. If based on your understanding of the criteria and datamodel, you expect there to never be 0 records returned, then use .First/Single so as to ensure an exception is thrown if you've made an invalid assumption. Select the one that closest constrains your assumptions. #Rational Workflow# Can the query sometimes return zero records? - Yes, then we should use a *OrDefault flavor. - No, there should be at least one record, then use Single or First flavor without *OrDefault. Can the query sometimes return multiple records? - Yes, then use First* (This assumes you are using a stable sort and business rules are clear on there being multiple results. If you encounter a situation where you know multiple records could be returned, and specifications seem to imply they only expected one, then it is probably a case of a business analyst didn't reallize there could be multiple matching records when writing up requirements.) - No, then use Single*
Yea, these seem to be less "common mistakes" and more "my personal preference without good reason."
Understand. Just a preference thing I guess. Nice name btw
I would use EPPlus and instead of copying anything anywhere, just delete all bar one worksheet each time.
As you mentioned that you are able to do for one item means a) You are able to select item but not select multiple items. b) This suggests that you are unable to add them in memory while selecting items for future calculations and display My Suggestion would be to see a basic shopping cart example on how they store thing. I have shared some articles with working programs http://www.c-sharpcorner.com/article/shopping-cart-application-in-Asp-Net/ https://bitsandbinaries.wordpress.com/net-programming/windows-forms/a-shopping-cart-program-in-c-windows-forms/ 
That's really interesting you mentioned that, I briefly thought about this but was swayed thinking the performance would hinder when you hit a Workbook with 100 worksheets. Do you know the Syntax to accomplish this? As far as I could tell it seemed like you had to specify every worksheet to delete individually, and there wasn't a 'delete all' type option. Any idea on how performance would be running through massive Workbooks? 
Hey buddy, if you want to do some pair learning in the near future let me know. I’m starting a new gig that applies these concepts and I am entry level. I wanna do some at home learning to make sure I keep this, as I’m very happy with the job I landed as far as the culture and the stack, I just haven’t had time to fully immerse myself into it. 
My immediate thought was to write a two-part application. A Windows service for listening for remote commands and a tray icon to show status of the service and to use as a platform for launching user-mode windows like console windows where your commands could be visible to the user. But I get the feeling you're trying to teach users to solve their own problems by running the mouse around and launching windows and properties and whatever else it takes to solve basic issues like DNS settings or IE trusted sites or something? If that's true, I know it doesn't answer your question but my opinion is that your users aren't going to care about how the problem is solved. I would programmatically solve the problem with nothing more than maybe a visible command prompt so the user knows something is happening, then at most pop up a YouTube video showing how to fix that issue themselves. They'll probably just close it like any other pop-up, but at least they'll have the choice. Everyone in the organization brings something to the table, but a lot of them barely know how to use their phones. I used to find it annoying, but quickly realized technology is nothing more than a tool for them to do their job. My job is to make the technology as usable and transparent as possible. Sorry if that sounds preachy, just something that I realized after a few years in a sysadmin role and thought I'd share. I'm curious about the UI automation though for my own uses, hopefully someone can some insight there.
You should look into AutoIT. It's made to do exactly what you describe.
Shared with my team. we all like it! 
Make it work, make it right, make it fast. Do not prematurely optimize. Insert other programming mantra. This works ... string sheetFile = "c:\\temp\\x.xlsx"; int sheetCount = 0; using (ExcelPackage ep = new ExcelPackage(new FileInfo(sheetFile))) sheetCount = ep.Workbook.Worksheets.Count; for (int i = 1; i &lt;= sheetCount; i++) { using (ExcelPackage ep = new ExcelPackage(new FileInfo(sheetFile))) { for (int a = 0; a &lt; i-1; a++) ep.Workbook.Worksheets.Delete(1); while (ep.Workbook.Worksheets.Count&gt;1) ep.Workbook.Worksheets.Delete(2); ep.SaveAs(File.Create(sheetFile + i + ".xlsx")); } }
If you're wanting to automate mouse clicks, keyboard buttons, etc you could invoke User32 functions in C#. It can be a pain, you would have to create wrappers and possibly do some marshaling. I haven't seen a complete C# wrapper for the library, though I guess it would be a bit redundant. Also working with unmanaged code in c# can be tricky when it comes to performance, I have ran into some bottlenecks there myself. You may also check out the System.Windows.Automation namespace. Here is an example of my implementation of some of the user32.dll functions.(My very first C# app) https://github.com/woody34/L2RBot/blob/master/WpfApp2/ClassFiles/Mouse.cs https://github.com/woody34/L2RBot/blob/master/WpfApp2/ClassFiles/User32.cs AutoIT is also a great tool designed for automating these things, many PC technicians use it to automate things that you can't with a script alone. You wouldn't need to worry about screen resolutions because you can interacted with window controls directly. It's definitely doable with C# but it's going to be a bit more work. I hope this gives you some ideas! Good luck. 
i know your right. lol. my app is going to do more than just show the issues being fixed though. it's going to diagnose the issues with questions and prompts given to the user to make them feel like they are speaking with a tech remoted into their machine. or as close as possible to that at least. it's as close to a user to user experience as I can get.
The gospel right here. 
Cool, it sounds like you need some decision tree software. There are commercial packages available but a simple version is relatively easy to write yourself. You can use your decision tree to walk through the issue, gather information, and then perform some action at the end of the tree if appropriate, or use their answers to automatically open a support ticket so you can continue where they left off. I'd recommend gathering information about the most used tree paths and nodes, and enable users to mark nodes as helpful or not helpful. You can use that later to fine tune your trees or address common problems in a more proactive way.
you actually hit on exactly what I was going to use. I was looking at a rules engine. Nrule or irule as I have access to both of them.
I've used this before, and it worked great in my case: https://github.com/Roemer/FlaUI
Great. I'll look into it. Thank you!
On the fence really - that's way more generic, but then again L2S and L2E are probably the only applications that people would ever encounter. I wouldn't, but YMMV obviously.
If you want to use COM Interop, here is some old code of mine: // using System.IO; // using System.Runtime.InteropServices; // using Excel = Microsoft.Office.Interop.Excel; public static void SaveWorksheets(Excel._Application xlApp, Excel.Workbook book, string targetFolder) { object m = Type.Missing; object fileFormat = Excel.XlFileFormat.xlWorkbookDefault; try { Excel.Sheets sheets = book.Sheets; for (int i = 1; i &lt;= sheets.Count; i++) { Excel.Worksheet sheet = sheets[i] as Excel.Worksheet; if (sheet != null) { ((Excel._Worksheet)sheet).Activate(); sheet.Move(Type.Missing, Type.Missing); // After Move(), sheet is in a new workbook and Excel makes it active Excel.Workbook newBook = xlApp.ActiveWorkbook; // You may need a better naming scheme string fullPath = Path.Combine(targetFolder, sheet.Name); newBook.SaveAs(fullPath, fileFormat, m, m, m, m, Excel.XlSaveAsAccessMode.xlNoChange, m, m, m, m, m); newBook.Close(); Marshal.ReleaseComObject(newBook); Marshal.ReleaseComObject(sheet); } } Marshal.ReleaseComObject(sheets); } catch (COMException comex) { // log comex } catch (Exception ex) { // log ex } } 
&gt; It's also free. Last I've checked it wasn't, unless you qualify for one of Jetbrains complimentary licenses (e.g. academical or if you prove to them you're doing open source - and use it for that purpose). Have I missed anything?
You should be aware that quite a bit is just wrong in this article. Too bad that /u/DLX does not respond.
+1. Single() blowing up is a good thing. It tells you that shit is fucked and you need to fix it. I'd rather get a big, ugly exception when I'm developing the feature than find out 6 months after we've deployed the feature that we've been inserting duplicate IDs and operating on a non-unique value assuming it was unique this whole time. When you've tuned the shit out of your DB and have the profiling data to show me that Single() is the reason things are too slow, then I'll consider that First() optimization- and still probably conclude it isn't the right fix.
Here's my solution. Don't do it. Its a bad idea honestly. If you can fix these problems programmatically thats nice. Dont add some other layer on top that might go wrong, thats a nightmare in the making for maintenance etc. never lower yourself to dumb users.
Also, stuff like `Where(thing).First()` is optimised in the exact same way that `First(thing)` is optimised, they get simplified by EF before it even hits the provider. In fact, I think `First(thing)` is actually shorthand for `Where(thing).First()` unless the provider explicitly overrides it. Most of these are literally non-issues. 
Look at the AutoItX dll library that you can use with c#. I recently made something for work using that and dot net framework
Teamtreehouse.com has some really good courses. I have taken the c# ones and found them to be great.
Actually, I just don't see a point in responding. A lot of you took SQL examples as "this is LINQTOSQL only", others failed to read or understand "If you complain about some of these "compiler/interpreter will fix that", I have to repeat what I've said before: "Programmer should be smarter than his/her tools"", yet others failed to parse "in many cases the misuse obfuscates the intent of the code". There is one comment above complaining about First/FirstOrDefault while again failing to read "This is highly situation-dependent. Sometimes .First() is correct, and sometimes it isn't." What is the point in responding, if people don't actually read what is written? It is not like they will read the comment and say "oh shit, my bad", instead they will downvote this comment. If someone has an actual problem, they can raise an articulated and argumented issue in GH - or even better, do a pull request. There is a reason this page is in GitHub, and that is the ability to improve this together. 
I will try to expand on how I concluded that arrays usually is the best option for a multiple of a type. * .NET Framework uses arrays extensively I scanned public method return types in mscorlib v4 to get a feel for how Microft themselves uses arrays, lists, IEnumarable Arrays are returned from 1356 different methods IEnumerable&lt;&gt; are returned from 241 different methods IList&lt;&gt; are returned from 75 different methods List&lt;&gt; are returned from 4 different methods ReadOnlyCollection&lt;&gt; are returned from 6 different methods You can also browse around the entire .NET framwork on MSDN and build your own opinion on how often the different types are used. Also please note that the FXCop/Code analysis rule CA1002, DoNotExposeGenericList advices against using List&lt;&gt;, however it is recommending Collection&lt;&gt;, ReadOnlyCollection&lt;&gt;, KeyedCollection&lt;,&gt; insead - strange that they did not folow their own advice for .NET framework? * Concise notation To specify a multiple of a type you can use one of theese variants (there are of course more) [] adds 2 characters to your declaration List&lt;&gt; adds 6 characters to your declaration IEnumerable&lt;&gt; adds 13 characters to your declaration IReadOnlyCollection&lt;&gt; adds 21 characters to your declaration However it is not that I mind typing the extra characters that is the problem, it is all the extra information with almost no value that you will read so many times during the life time of a project that is the kicker for me, [] is the cleanest looking type declaration IMHO. * Signals imutability When a method returns an array it is generally thought of as an immutable list of objects. While you cannot change the number of elements, you can of course replace the elements inside it so it is not truly immutable, I would argue it is less mutable than List but more mutable than IEnumerable and IReadOnlyCollection. * Better performance than List I derived this from the fact that List&lt;&gt; is using arrays internally to store its elements. https://msdn.microsoft.com/en-us/library/ms379570(v=vs.80).aspx#datastructures20_1_topic5 Taking inlining into the performance consideration, the benefit is slim to none. However in solutions with high GC preassure this may make a difference since less objects are needed to be collected by the GC with array. But as always profile your specific scenario to be sure. * Better performance than IEnumerable I am not saying IEnumerable sucks, it has defenitely has it's place, but it is so easy to make a mistake with IEnumerable. Working with IEnumerables and returning through layers can easilly become a performance problem if the implementation of the IEnumerable is IQueryable or using yield. At first glance this is simple to combat - just make sure to never iterate multiple times through an IEnumerable as it will materialize your query or run your code multiple times. If you have Resharper installed, it will acutally warn for this whithin one method. However If you are passing around an IEnumerable around the system you will probably iterate throguh the IEnumerable multiple times and every time you will re-rund your IQueryable or execute the method using yield. Resharper will not detect this scenario at all. https://helloacm.com/c-linq-possible-multiple-enumeration-of-ienumerable-resharper/ 
ReSharper makes several of these recommendations for you. If, for example, you write something like this: myCollection.Where(x =&gt; x.Id == 12).SingleOrDefault(); it will recommend that you rewrite it to myCollection.SingleOrDefault(x =&gt; x.Id == 12);
Interesting replies. Can any of these solutions be used on a CI server to do integration on a winforms app?
You write about **mistakes** in using LINQ, depending on the LINQ provider, but then you can't even name a single LINQ provider where this would actually be a mistake. - The `.Where().First()` is not a mistake, it's a micro optimization. - The `.Single()` instead of `First()` is not a mistake, it's situation dependent. - The multiple `.Where()` is not a mistake, it's again a micro optimization.
I have to disagree about First/Single vs *OrDefault. First Single should never be used in my opinion as it throws really bad exceptions, that just confuse anybody from the support/project team when looking at logs to figure out what is wrong and what has happened. Always use FirstOrDefault or SingleOrDefault, and afterwards a null check if you expected a result. And then throw an exception, that describes what happened instead of some generic exception nobody understands. Always include some runtime data in the message for traceability. throw new ArgumentException(„could not find the person with id: {id}“)
...sigh. Why did I even bother to respond? Done now. If you rely on LINQ provider - or compiler, or interpreter, or something else - to fix your bad code, you are a bad programmer. Not to mention, yet again, "in many cases the misuse obfuscates the intent of the code". 
&gt; to fix your bad code That's the point. It's not bad code.
That will just needlessly blow up the code with mostly useless checks. You use `First()` when you **know** there is at least one element. I would also not put such data in exception messages - these kind of information should be provided by the logging framework and should be added at a central point in your code (e.g. in MVC at the request begin).
Are these things that have to be done over and over, like setting a certain preference setting, or something? If so, make a screen recording, and then let the user watch it. Then, write a simple script that actually does the fix if they can't do it themselves.
Buy a full copy of Linqpad - it's a lightweight scratchpad/mini IDE and lets you play around with C# in a way that's impossible with VS.
Will be nice when you can just plug in a usb into your head for a topic... So many resources out there it isn’t even funny. In 2017 if you are not bleeding edge and are not finding answers I’d suggest rethinking how you craft your search queries.
Have a look at YouTube for courses by Jeremy Bytes. His personal website is a wonderful resource in itself and his teaching manner is top notch. Pluralsight quality for free.
Yes. You can't use it commercially, but its community edition is free.
Have you watched Venkat's videos? https://www.youtube.com/playlist?list=PL6n9fhu94yhVm6S8I2xd6nYz2ZORd7X2v
If you don't want to deal with the concerns here, why bother posting it to reddit?
Must be a terrible team if not a single person finds this flawed.
Concerning your fadeInTexts method, Your *t* is a constant value for the duration of each frame, so on each frame you are possibly running an infinite loop. I assume this is the reason for the lag you mention. I'm not familiar with using Vector4 to set the colour, but I assume it is RGBA, and the first iteration is going to set the colour to completely transparent and the next iteration will probably set it to very nearly transparent. I think you may have misunderstood the functionality of *for* loops and/or the Unity Update method. In this case, your loop should change *t* on each iteration, and that's not happening. The usual structure of a *for* loop is for (int i = 0; i &lt; x; i++) which would modify *i* on each iteration by adding 1 to it, until it passes *x*. What you're doing is setting it to zero on the first iteration, and a constant value for every iteration thereafter, making any further iterations pointless. You should use a loop like this to alter the alpha on each frame. To do this you can use a coroutine. https://docs.unity3d.com/Manual/Coroutines.html As it happens, you're in luck; Unity's Coroutine docs have an alpha channel example to demonstrate the use of Coroutines. 
&gt; First Single should never be used in my opinion as it throws really bad exceptions, that just confuse anybody from the support/project team when looking at logs to figure out what is wrong and what has happened The error is "Sequence contains more than one matching element". It's perfectly descriptive and you ensure that you don't suddenly end up with a rogue `null`, `0` or `00000000-0000-0000-0000-000000000000`.
Wow, that's very cool. I've .Dumped bitmaps to the results before, but it's the first time I've seen them animated. Thanks for the technique, I'm going to be using that.
It seems pretty mediocre, to me. It's not terrible advice, but it's mostly not all that significant, either.
The exceptions thrown by First() and Single() are extremely generic, and the -OrDefault() versions *might* be preferable if you really need to provide a friendlier exception (or you could catch the exception they throw, but YMMV). They are *infinitely* more meaningful than "Object reference not set to an instance of an object.", though, for your support personnel or your developers, either one. They are also more expressive in code *when* the condition is necessarily true.
The practical difference between First() and Single() should be pretty minor--in the most general case, Single() should make an additional call to IEnumerator.MoveNext(). Use whichever better expresses intent. The only things here that strike me as *actual* problems being identified have to do with the use of OrderBy() and using Count() instead of Any() or All() (which contain optimizations to short-circuit as soon as the result is known). Any() and All() are not, strictly speaking, opposites, though. The rest of this stuff seems like pretty small beans.
This. Automation is good but it should always be the user's choice, to simplify their workflow. Only exception imo is when you are dealing with broken tools which you are forced to use cannot fix or maintain. Otherwise you have added another dependency and it would be better to fix the program/whatever directly. Usually going to be a lot less effort. That said, I'm a big fan of automation and there are dozens of tools out there. Hotkeys, AutoIt, etc are 'off the shelf' scripting tools. I prefer using C Sharp as it can every things that these tools do and more. 
Yeah I agree with this. There is a lot wrong with automation in an IT environment, it has its places but if it's deployed in mass on a range of issues it doesn't solve the real cause of the problem. "Why is everyone having these common issues?" Don't get me wrong, automation is a good thing in a lot of scenarios. Like for setups. But for fixes like this, it just seems like a lazy solution for a potentially complicated issue.
if you have a budget for this, then I suggest taking a look at safaribooksonline. Best bang for your buck that I have been able to find, anywhere. There's a free trial. I no longer have to buy technical books that I know will go out of date in a couple of years because safari has them. plus they are adding video and paced courses. I preferred their old UI, but that's a minor quibble. Don't recall seeing much in the way of C# videos, if that's your preference, but I wasn't really looking for that. They have many if not all of the top C# books currently out there. Then there's all the other subjects that they cover. Take a look. No connection to them other than being a client for years. And personally I think that if you are a professional techie and you are not using them, well then you're not really a professional...
It works! [Here's a better code sample](https://pastebin.com/aYWRrWzd), much cleaner. My issue now is, I'm trying to put a delay between both for loops (timetoStay). I tried using WaitForSeconds, but can't figure out how to make it work. Thank you VERY MUCH for the help!
&gt; The multiple .Where() is not a mistake, it's again a micro optimization. Is the multiple .Where().Where() even true? AFAIK .Where takes an Expression&lt;Func&lt;TSource, int, bool&gt;&gt; - which is an expression tree. When chaining those the things together the expression trees get combined
I would claim that `IEnumerable&lt;T&gt;` extensions are not LINQ. Here is why: LINQ stands for Language Integrated Query. It has two major components: the LINQ syntax (`from foo in bar`) and the ability to compile lambda expressions into System.Linq.Expressions: Expression&lt;Func&lt;int, bool&gt;&gt; exp = i % 2 == 0; This is the basis for LINQ and is used by `IQueryable` in order to work. The `IEnumerable&lt;T&gt;` does not support `System.Linq.Expressions` as parameters, so it's not really a language extension but a standard library extension.
If you have acess to student email address .edu you can get 3 months free. Or at least you used to be able to.
It depends, as he said, on the LINQ Provider. But any LINQ provider that has different results between `.Where(cond1).Where(cond2)` and `.Where(cond1 &amp;&amp; cond2)` is simply buggy. His argument is relying on the correct working of the LINQ provider is bad code. I think you should use whatever is cleaner and easier to read in your code and not expect the frameworks you use to be buggy.
First and Single translate to the same database query. They only differ by Single also checking that the returned rowset only has one row. The perf will be identical. If there is no index then both will perform exactly as bad. The problem comes when you are using LINQ over local collections where you don't have any kind of indexing or query optimization. Then everything is truly just table scan, and using Single will cause you to always scan the entire table to prove there is not another match, instead of maybe most of the table. 
Yes, what you describe is pretty much the only case where one would use First over Single as an optimization. However this is not the example the article gives. Most of the text in the example explicitly talks about databases and the text that does not is ambiguous (it talks about a set). In addition in practice Single is still worth it on in memory collections when they are sufficiently small and in your average app in memory collections are in fact sufficiently small because the bulk of the data is in the database and chances are your bottleneck is somewhere else (i.e. the time to query the database). If you have up to 50 items in the collection it is still worth it to do Single both to validate correctness and to state your intent to the person reading the code. However in my experience most collections that require Single are far smaller than 50 elements and are usually 3-10 elements. These collections are usually key/value pairs associates with some entity and you can use Single to ensure that a key is not repeated. Now if you are building a game and you loop through a bunch of game objects 60 times a second please use First or maybe not use LINQ at all. I would argue that properly using First instead of Single for optimization purposes in the real world is 1/1000 case.
If you're trying to teach users how to fix their own PC problems, why not record instructional videos? Users can watch the video and follow along.
You could use `Thread.Sleep(2000)` to wait for two seconds (adjust numbers to taste), but this will freeze the program for the duration, so there might be an even better way.
&gt; Single.. methods go over all elements of the set, validating that there is just one match That's weird; wouldn't seeing merely 2 elements be enough to decide to throw an exception?
Yeah, it's stupid they call it LINQ anyway. It's clearly a marketing decision. The namespace was called System.Query in the pre-releases.
Uhm, LINQ-to-objects is definitely the widely used variety.
&gt; Also, stuff like Where(thing).First() is optimised in the exact same way that First(thing) is optimised, they get simplified by EF By EF at least, but there is of course no guarantee in general.
You can do this, but spawn a new thread and inside the thread have it sleep for 2 seconds and then run the intended action. You can do this same operation using tasks too.
Uhm, yes? But LINQ-to-objects operates on IEnumerable, so no sane person would refer to it as IQueryable, which is how you would differ between the two, if one was to follow /u/fr0stbyte124 's naming suggestion. Let me rephrase what I was saying above: IQueryable is much more generic than L2S/L2E, but then again for 99% percent of people that's probably the only use of that interface they'll ever encounter. Which is why it might remotely make sense, even if the term is way imprecise. Hopefully that's less ambiguous.
If you want a better developer experience then IntelliJ IDEA beats Eclipse hands-down. Free or not doesn't make that fact any less true.
Enumerable.Single() does, in fact, check at most two elements. The overload that takes a predicate *is* as inefficient as OP suggests, though. It always builds an enumerator, walks through the whole list and copies each matching value to a local and maintaining a count of matched values. It only throws/returns at the end. I'm not really sure why they didn't take the opportunity to return early if they've already matched, once.
That doesn't say much, carving a wooden tablet and using OCR to transfer your code is a better developer experience than Eclipse. But I don't disagree, IntelliJ IDEA is pretty cool - I was just mentioning that it's not necessarily free.
http://freecomputerbooks.com/ http://www.onlineprogrammingbooks.com/ http://www.freetechbooks.com/ http://www.dreamincode.net/ http://csharppad.com/
When you tried WaitForSeconds(), did you do it like yield return new WaitForSeconds(2.0f); // Wait for X seconds here ...because when I put that in your code, It Works On My Machine^tm
https://docs.microsoft.com/en-us/dotnet/framework/ui-automation/ui-automation-overview
Use TPL and use the Wait method. You will need to do this on another thread then inform the UI to change state unless you dont mind blocking the UI during that time.
This guy resharpes.
This is a fairly low level operation and will most likely require your tooling to analyze the IL of the binary and be able to build cross-references for function calls. There's already some great projects that do this for you, so I wouldn't try to reinvent the wheel. Check out ILSpy, a FOSS .NET decompiler. You can import ILSpy into your project and call into it to use its Control Flow Graph builder to find cross references to each function in a binary. You could also go the 'hacky' route and use any commercial or free decompiler to dump a decompiled output of the program and use text parsing, though that seems quite weak. Lastly, if you really want to make it your own, you can use Roslyn IL analysis to do it yourself. I'm not well versed in this, but it's definitely something the project was designed to handle.
You could just use [dotPeek](https://www.jetbrains.com/decompiler/).
I don't really have time for an in-depth answer but if I were you I might try and use [Cecil](https://github.com/jbevain/cecil). It's similar to Reflection / Reflection.Emit, but doesn't work with loaded assemblies. Because it reads binaries instead of metadata contained inside loaded assemblies. This means you can use it access a method's body. You can use the AssemblyDefinition or the ModuleDefinition class to load an assembly/module from a DLL. *Note 1: You can't really load an assembly with Cecil, doing that will load the main module of a DLL and then read that module's assembly.* If I understood you correctly you're looking for usage of a specific method? If you know where that method may be used you could limit your search by only checking specific classes. But if you don't, you'll probably have to find all of the classes defined in the modules and check all of their methods. Anyway, once you have a method you want to check, you can iterate through its instructions and check if they're either a call or a callvirt instruction invoking the correct method\*. As for the method arguments, they need to be on the CLR stack right before the call / callvirt instruction. If you're invoking the method using string literals in your code, they'll probably be loaded with a series of ldstr instructions right before the call instruction. *Note 2: There is also the calli instruction, but I doubt you'll come across it.*
I know the ILSpy UI has a 'Find Usages' function. I guess these class are responsible for that functionality: https://github.com/icsharpcode/ILSpy/search?utf8=%E2%9C%93&amp;q=used+by&amp;type=
You should ask questions on /r/Unity3D, for more specialized answers. As /u/JakDrako said, WaitForSeconds() is the best way to do this. Did you try the [example code from the official docs](https://docs.unity3d.com/ScriptReference/WaitForSeconds.html)? 
Sounds like we are in the same situation. PM me what your schedule is like and maybe we can find a common time to talk and get started.
so just to put this into perspective. We use SCCM to push software updates throughout the company, I'm assuming like a lot of other companies. As an example of one update we do, we sometimes have to push an update to adobe reader to every machine in the company. This is great in all and normally goes smoothly but every time it happens it blows our helpdesk up with calls from people that had adobe acrobat pro for editing PDF's no longer set to their default reader. This was not a problem in windows 7 because we had a batch script attached to a web link that people would run and it would set the default back when the issue occurred. You can no longer do this effectively in Windows 10 because Microsoft has removed the functionality to programmatically set default programs outside of a group policy update. Now the issue requires a PC reboot and a hope that the GPupdate runs and doesn't fail to correct this problem. In my mind, the user can open the helpdesk tool. select application problem&gt; adobe issue&gt; and from a list pick a common problem being the wrong Adobe is opening or however I decide to word it when I write the code out. then because Microsoft has removed the functionality to do this programmatically the change would happen on the users Screen through UI automation and the call to the helpdesk, remoting into the users PC, or doing a reboot or forcing a GPupdate which won't apply that change without a reboot will no longer be needed.
.xslx workbooks are xml documents iirc. Maybe you could open them as xml and extract and save each node. 
Yep, I've been through this a few times as well. And managed these automated fixes via group policy yada yada. What you are asking to build is very very simple, most of it can be done with registry snapshotting really (Rather than automation). Maintenance and compatibility will eat you alive here. Every single windows update, windows version, application version and user setup has to be taken into account. It's pretty easy to fix the default pdf. Is it the same on windows 7 as it is with window vista? How about xp? How about windows 10? Is it the same methodology adobe might require? How about when the user is an admin, how about when they are not? Add 5 functions across 5 applications to this and you'll be begging for mercy within a year
PM’d. 
 await Task.Delay() possible? 
Honestly, I wouldn't worry about this. I'd solely focus on using the tool that you think gives the best UX for your customers. The reason I say this is because one stop on nbcnews.com, facebook, or yahoofinance is going to load up your client's machines with so many ad scripts, that no matter what route you choose, your service will only be a fraction of what the major sites load on your customer's machines. And they probably aren't complaining about that.
tell me about it. appreciate the advise though
Sounds like you are going too far to begin with. Do not rely on pure C# .net to do this for you. Rather use C# and .NET to provide an interface and call powershell scripts. While yes you can call powershell methods directly from C# the scripts are 1000 times more portable and for what you are doing is likely preferred as other folks don't need your developer toolkit in order to read the script or understand what changes are being made. This will be critical when MS updates windows and 1/2 of your automation breaks due to a new security feature.
.NET Core 2.0 is very solid and can be used to write cross-plat applications. Unless you want to write a GUI application, for that there is currently no suitable .NET Core library available. C# is a very solid language (and seriously better than Java). You will not regret learning it.
I started with C#, and started to move to java because I saw that was where more of the jobs and money is. Since java is accessible across all platforms. Within the first little bit I realized how much I hated java. Having to do 3 times the work to get accurate information, and with all the versions there is so many issues with java. I hate java with a passion lol. However I think it really depends with what you are trying to do.
Have you tried looking at the Unity docs for WaitForSeconds? https://docs.unity3d.com/ScriptReference/WaitForSeconds.html All you should need to do is yield return new WaitForSeconds(timeToStay); between the loops, which will suspend the coroutine for **approximately** *timeToStay* seconds. I don't think threading is an appropriate solution for this as someone else suggested.
You dont need any magic for metadata, as stated by others DotPeek will work but if you need to do this programatically it is all in the type system and you can use reflection to extract the class meta-data you are looking for. This is actually how some DI and enterprise tools work internally. Usages at call sites however. You will need a decompiler and look for the method calls you want in the decompiled IL. 
How well is .NET accepted and used on enterprise level? I can assume that it could be usable on freelance projects but are there many jobs available for large scale projects/companies on C#/.NET Core?
dotPeek is very good. If anyone here has used ILDASM then you will notice how much nicer dotPeek is.
.NET is very well accepted on enterprise level. .NET Core not yet so much, but increasing. Whether there are many jobs available... that depends on your area usually. I definitely can't complain, the market is there.
Some of my colleagues and a lot of folks on reddit swears that Java is much easier to write on than C# and is far *superior*. I myself cannot shed any light over the matter due to my ignorance of C# or .NET.
&gt;it is strictly restricted within Microsoft's Windows ecosystem. This is factually wrong, maybe you've been listening to the wrong people ;) 
I will look out for more jobs but it seems like Node.JS and Java have strikingly more availability than .NET, at least in my area. Can you tell me why someone will use .NET Core over other popular frameworks (like Laravel)? Beside the language, what other benefits does .NET Core offers, as of its current state?
As I have said, most of what I learned about C#/.NET is mostly from reddit and a few other forums + my colleagues. Their responses might have been biased, which is why I posted my inquiry here to hear the other side of the story.
objectively false, wrote a concurrent xml parser in C# ported it to mono and with very few changes got it to run on raspberry pi, and various flavors of Linux..
&gt; object m = Type.Missing; &gt; newBook.SaveAs(fullPath, fileFormat, m, m, m, m, Excel.XlSaveAsAccessMode.xlNoChange, m, m, m, m, m); Interop :S 
&gt;like Laravel &gt;other benefits https://i.imgur.com/B2tDMUB.png https://www.techempower.com/benchmarks/#section=data-r14&amp;hw=ph&amp;test=plaintext&amp;l=8vmzgd
&gt; no suitable .NET Core library available We are [working on that](https://github.com/AvaloniaUI/Avalonia/).
Yeah, it's some old code (.NET 2.0). You can shorten now with named parameters: book.SaveAs(Filename: fullPath, FileFormat: fileFormat, AccessMode: Excel.XlSaveAsAccessMode.xlNoChange, Local: false); 
Its nice not to have to pass all the missing, but I'm going to stick with EPPlus :)
In Java you have: - complex build system that you *need* to know how to deal with. In c# you also have a complex and powerful build system, but it works out of the box and most of the devs don't even know that it even exists. - erased generics, so runtime doesn't know that List&lt;Integer&gt; is actually supposed to be a list of integers. In C# you get tons of language features like properties, events, LINQ, asynchronous methods, pattern matching, interpolated strings, etc. In Java you have local functions... That are also available in C# since 7.1. I'm not sure what's so superior about Java, but during my ~100 hour experience with it I was quite stressed because of the lack of language features and the need to write significantly more code to get the same result.
One thing to remember is that because Microsoft is a big corporation it isn't 'cool' to use their products. Microsoft are bloody good at what they do and C# is a very good language respected in many places and used across many platforms and in huge enterprise systems. I'm not saying it's a mistake not to learn it, but I would be surprised if you regretted it 
&gt; One thing to remember is that because Microsoft is a big corporation it isn't 'cool' to use their products. It would appear that majority of the people here on reddit (beside this sub) and on other forums primarily avoid C#/.NET *because* it's a product of Microsoft. I never really understood this hatred against Microsoft, especially at their current state. Even outside developers circle, it seems people (especially on reddit) frowns upon Microsoft for virtually any reasons while keep on showering their praise over Google/Apple.
It's odd isn't it. I could speculate why but I don't think I'll ever really know 
Mate, that's a perspective I'd never even considered, thank you
I believe there is a .net built in type called a Concurrent collection or maybe that describes a group of types, I can't quite remember. But that should do what your after I think
Do you know why Microsoft made C#? Because Java wasn't good enough.
&gt; They said that .NET Core is still barebone so it will take ages before getting anything done with C#/.NET .Net Core 1.0 was very limited but this is not true anymore with .Net Core 2.0 which was released a couple of months ago. I've used Java, Kotlin and C# and hands down I like C# 10 times better than Java. [There is a reason why Kotlin is quickly overtaking Java at a break neck speed](https://adtmag.com/articles/2017/10/11/kotlin-edges-java.aspx) and that reason is because Java is just so freaking verbose! So in all fairness and honesty and with as little bias as possible, believe me when I say C# is magnitudes better than Java. I've used Kotlin extensively and I almost like it as much as C#. Kotlin is turning out to be a game changer in the industry! This time next year it's going to be the hottest skill to have on the job market. A lot of the features I like about Kotlin will be introduced into C# with C# 8. Now as for .Net Core 2.0 jobs; yeah it's early days and there are not that many positions compared to Java or Node. But that's because the .Net Core framework is so new to the industry and not because C# is inferior to Java or JavaScript from a language usability perspective. Java is on it's way out and if I were you I would be learning Kotlin! That language is taking off like leaps and bounds since Google made it an official Android development language earlier this year. So Kotlin or C# but no way would I start learning Java in 2017.
Something else MUST be going on here. Maybe exploiting a very fast vs very slow method because the difference between 3.6k and 1.7m is unrealistic.
Java is older than C# and Microsoft did a good steal on Java and made a better language because of it. It's a language that could do it right from the start instead of trying to adapt to new requirements.
&gt; I never really understood this hatred against Microsoft, especially at their current state. It's groupthink. Which is ironic. It's probably a little bit of penis envy too. Microsoft does not give a measurable number of shits about what the neckbeards think or do. 
Wasn't avalon the code name for WPF? 
It's groupthink based on judgments about Microsoft that made sense 25 years ago. Source: old guy.
Ah, but you only need one job. Seriously though, there are regional preferences. For example, you'll find more .NET jobs in New York than you will in California. But there are still enough to go around even in San Diego.
Yesh
We're also [working on that](https://blog.bridge.net/widgetoko-a-node-js-and-electron-application-written-in-c-1a2be480e4f9).
&gt; but no way would I start learning Java in 2017. While I have no love for Java, there is still plenty of jobs that call for it. Everything from new development to working with crusty old mainframes in the banking industry.
C# is a great language. It's a pleasure to use and full featured. Its APIs and libraries are very well thought out, and there are a number of great open source and third party libraries that compliment the language. As far as .net core, it's quite capable, but it's also growing and adoption is inn the early stages of ramping up. Its built to be cross platform from the start and work well work modem infrastructure like a docker.
Don't believe anything you read on Reddit.
No problem. Consider this - I just went to nbcnews.com and in 15 seconds of visiting, my page had loaded 2.5mb with ublock origin blocking **485** scripts/objects... With ublock turned off, in 20 seconds, their page sent over 4.5mb of data.
yep, as I said there are many more Java and Node jobs out there over .Net Core jobs. Java is going to be around for a looong time but considering the current industry trends it's not an arena I would be purposely trying to aim my career towards (unless it had a Java to Kotlin angle to it).
Anyone who tells you C# I'd bad is nothing more than a Java fan boy. C# is an incredibly modern, high performant language with a huge community and wide variety of use cases. Quite frankly I think Java's standard library is garbage and just feels so incoherent disparate. C# just feels so unified and there is a standard library for almost anything with an API that makes sense. Quite frankly I think the best part of C# is the fact that it works with visual studio. Without Visual Studio, writing C# would be nowhere near as efficient and enjoyable. 
It's just .NET runtime and Kestrel HTTP server being light years ahead of everything that PHP ecosystem can offer. Framework benchmarks have been there for years already, it's a well-established benchmarking competition between languages and frameworks. BTW, that [evhttp-sharp thingy](https://github.com/kekekeks/evhttp-sharp) at the top of the list was written by me )
That's not strictly true. Their entire strategy over the last five years, perhaps more has been almost entirely about catching up with what ever the hot new kids are doing. It's all been reactive rather than proactive. I think they've weathered the chaos quite well. It felt transitional, a bit like the bit at the end of the level of every video game that suddenly goes mental. Mobiles phones are commodity items now, there's no huge upheaval in terms of OS or features now. Even if there were we have a bunch of mature cross platform platforms. VR is still fragile but functional. The cloud continues to evolve but I'd say Azure has matured rapidly to the point of being a market leader. .NET has been going through a transition that could have been VB6 migration painful, but Core 2 and Standard 2 are... Not perfect but infinitely better than Core 1. Production ready in 70pc of use cases. Containerisation is well supported now, they have fingers in many popular projects like RabbitMQ, Redis, etc. Subsystem for Linux is coming on nicely. The one thing that still disappoints me is Edge. That said 2017 integrates nicely with Chrome and Firefox is about to fck itself by losing support for all its addins so... Other areas they continue to excel in. Excel for one. SQL Server, Visual Studio is without peer, even Visual Studio Code is hugely popular across all platforms now. I think they've done well over all.
I'm now stuck in a paradox
/wave. Remember SCO? I remember when SCO weren't even the bad guys :)
https://dotnetfiddle.net/ is a fun online alternative as well
Keep in mind you're asking /r/csharp, but otherwise, I agree with the rest of the commenters here. It's a solid language, I especially love the syntactic stuff- LINQ is probably my favorite part of the language. I use .NET Core on Linux and it's way easier than I ever expected it to be as a guy who only uses new tooling every 3-5 years. 
As someone who works with both languages daily professionally, I also hate Java. I mean it works and is good in some cases, but developing in C# is so much faster, and Visual Studio (if on Windows) is miles beyond any other IDE out there (that I have ever used or heard of). IntelliJ for Java is the closest ive found, but it still doesnt measure up. I havent done much cross platform work with the new stuff lately so I cant comment too much on that, but I know the tooling and frameworks are getting a lot of traction there.
The thing about .NET Core was true before 2.0. Works well enough if you want to build something for the web or command line tools (no good GUI toolkit yet). The IDEs on non-Windows platforms are not as good as those for Java although with Rider this is changing rapidly. As for the C# language it is definitely, 100% superior to Java and I'd argue any other mainstream OOP language (although only Java is directly comparable as C++, Python and Ruby have significantly different goals). But yes, if you want to ship a *product* today for non-Windows environment Java is probably a better choice. If it is something smaller or just learning experience this is a great time to start. The .NET ecosystem is quickly migrating to .NET Core with more and more libraries becoming cross-platform. In a year .NET Core's Linux ecosystem will be on par with Windows for web stuff. BTW what makes you think that Azure pricing is outrageous? On the surface it looks comparable to Amazon.
&gt; especially with the outrageous Azure pricing You don't have to deploy to Azure. You can host ASP.NET applications on any server that runs the .NET Framework, and with .NET Core that includes pretty much every web server. That said, I personally found Azure to be less costly than AWS by a wide margin. And I got 3 years' worth paid for by the Bizspark program. 
You better believe it.
It's hard to dispel or support the notion it's "not as good as Java or other OOP" without seeing some specific facts, but most people I know seem to believe Java's been lagging C# by a decent margin for years now. There are some features of Java that everyone wishes C# had, but that's true of just about any language comparison. Those kinds of comparisons are really easy to find but usually have an obvious bias towards one of the langauges. Let's not jump into that rabbit hole. Here's how "multiplatform C#" breaks down, from memory, with lots of glossing over and maybe some hyperbole. This is like the "summary of a wikipedia page" level of journalism here. For a long time, yes, it was a joke. As far back as .NET 1.0, the .NET Framework's core libraries ("the CLR") were published as a specification. MS had the only implementation. There was a lot of eyebrow raising and "yeah right"s, but MS published some supposedly binding legal agreements that said, "If someone wants to spend years implementing a CLR for Linux or Mac we aren't going to interfere." Then someone went and made the Mono framework. It came at a real convenient time for MS, because they were getting their ass kicked by Apple on Desktop. It feels like hasty behind-the-scenes contracts must have happened, because Mono had Moonlight, a Mac/Linux compatible Silverlight plugin, remarkably fast after Silverlight announced "desktop client" functionality. Eventually Xamarin came forth with an infrastructure for making iOS/Android apps with C# via Mono. Eventually Microsoft bought them. At some point they also agreed to start sharing CLR code with the Mono people. Meanwhile, there was a lot of weirdness and I can't claim I understand all of .NET Standard and .NET Core but I think it breaks down like this, I'd love corrections: * MS got tired of pointing frantically at the original CLR spec. ".NET Standard" is basically that spec. Anyone can implement ".NET Standard" for any platform. * This is sort of like how "anyone can implement a Java VM". Only Sun/Oracle have provably sued people for doing it, and Microsoft never has. EVIL MICROSOFT! * "The .NET Framework" is an implementation of .NET Standard that is Windows-only because it also includes a lot of extra things specific to Windows, such as System.Windows.Forms. * "Mono" is a CLR/.NET Standard implementation that works on Windows/Mac/Linux. It's missing the Windows-specific bits of "the .NET Framework". It has a few things here and there that are additional features. But the core bits are all there and behave. * ".NET Core" is an MS implementation of .NET Standard that runs on multiple platforms. It has different JIT and Garbage Collection logic that MS believes is better for certain kind of apps, they swear they aren't doing it "because we don't want Mono around". * There's no current widely-accepted GUI framework for native desktop apps in .NET Standard. * You can use Windows Forms, WPF, or UWP on Windows with the .NET Framework. * You can use Xamarin.Forms with Mono (and rumored .NET Standard/Core) on iOS/Android/Mac/Windows via UWP. * Linux support for Xamarin.Forms is promised "in 2018". * Xamarin also has individual iOS/Android/Mac-specific frameworks you can use, they tend to put a C# wrapper around the native Cocoa/Android/whatever APIs. * .NET Standard APIs are sufficient to write most console/server applications, this is increasingly true as public packages update to .NET Standard. All that aside, a lot of times it's not the tools but the craftsman using them. If you invest a lot of time in Java *or* C#, I have a feeling those skills will be relevant for a long time. IN THE FUTURE, things are going to be a little more stable. If you write your app against "the .NET Standard" it is guaranteed it will work on any .NET platform, and it (shouldn't) matter if you use Mono, .NET Core, or the .NET Framework". RIGHT NOW things are a big fat mess, because the latest version of .NET Standard is the first one that's widely usable. SOMEDAY we might have a GUI framework for desktop applications in there, but some people are betting by the time that happens we won't want to write desktop applications anymore? That seems a little far-fetched to me. 
This is very realistic difference for what is essentially a microbenchmark - sending a plain text response.
&gt; However, I was told my many people and many users on reddit that C# isn't that great of a language (compared to Java or other OOP) I know these people. They are the same that when asked what language they would like to work with they say kotlin (6 months ago it was scala). 
Any plans of implementing WeakReference? That's one of the most major things that are preventing us from making an Avalonia port to bridge.net, we won't be able to get bindings system to work properly otherwise.
You will definitely not regret learning C#. Out of any language I've used professionally, I get work done much faster in C#. It's a combination of the strong ecosystem and extensive libraries/packages available; It is pretty much my go-to enterprise language for business now. .NET is a golden egg for Microsoft. Their expansion is *so* promising into .NET Core with .NET Standard 2.0 and the Windows subsystem for Linux. I've begun using Core 2.0 at work and it easily beat out my expectation after using 1.1. This is seriously a good time to be in the C# language as a developer.
This. Although there were a few questionable things in Java that got copied over to .NET anyway. And of course, as soon as I say that, it completely slips my mind what they were. I *think* most of them were addressed in later C# versions.
Theres a big difference between a 'cool' language and a 'good' language. C# is definitely the latter. NuGet might not have as many daily new packages as npm, it might not have 'this weeks framework that will revolutionize programming!!!', but it damn well gets the job done and provides a reliable and convenient framework, especially with the new .net core ecosystem. They are moving fast with the new core while having a huge and proven set of functionality in the classic .net 4.x. People tend to overestimate differences and underestimate stability. Java and C# are not that different from each other for all practical purposes - You shouldn't listen too much to people talking the talk. When someone is too passionate about such a thing, odds are, theyre not giving you a professional answer.
In Bulgaria we live in a .NET land. At the end of the 90s we were only slightly pro-MS (no money for macs, pirated Windows everywhere) and VC++ was taught in universities but when .NET came along Java was already popular. Then for some reason we got a bunch a big names like Telerik (Bulgarian born company) and created a workplace people wanted to work for, the community got strong, people started to teach C# in universities as introductory language and Telerik started their own academy. Now a lot of talent is trained in .NET which makes it easier to hire .NET talent than other talent which fuels the ecosystem and community. Of course it is not bigger than JavaScript because of front-end but the number of people working with .NET is probably equal if not greater than those working with Java and this is not what happens in most places.
They’re so similar. Why not learn both? Personally, I started on Java, and it’s easier for me because I know it well, but C# is a solid language/ecosystem.
Nadella is terrible CEO. I am pessimist about anything Microsoft that is not Azure or Office but SQL Server is surely Azure related and C# might be considered too but I as soon as Apple makes a touch-enabled MacBook I'm out of Windows.
Well... no. They made a better Java and SUN sued them, won and MS were not allowed to make Java anymore. Thank you SUN
&gt;This is sort of like how "anyone can implement a Java VM". Only Sun/Oracle have provably sued people for doing it, and Microsoft never has. EVIL MICROSOFT! This precedent is often glossed over by people; thanks for pointing that out. I believe it has a lot to do with the success and growth of the C# ecosystem.
If they are talking about Java the language rather than Java the platform they are either incompetent or biased. There is no objective argument that can be made in favor of Java over C#. None.
ConcurrentQueue&lt;T&gt; for thread safety. I was just writing something like this yesterday. Your two main methods will be .Enqueue and .TryDequeue. this.ConcQueue.Enqueue(oldTask); YourObject curTask ; this.ConcQueue.TryDequeue (out curTask) ; Since you don't care about the order requests are written, then perhaps a Queue isn't the right object. If it were me then I would implement it and run performance analysis to see if it's *good enough*.
You point to what are kind of advanced examples. They matter but not as much as the basic things. - Properties increase code readability **drastically** - Java's primitive types and their wrappers are insane and cause small but omnipresent cognitive burden when working with Java code. - Checked exceptions are terrible. While Java got lambdas they are practically unusable with anything that throws checked exceptions.
Age is not a good excuse for Java's extremely conservative community and bad engineering decisions.
https://msdn.microsoft.com/en-us/library/aa663364.aspx this is as close to WPF tech specs as I could find. It goes into detail of the features, uses and how it works with other technologies. It may be a good place to start. 
&gt;C# isn't that great of a language compared to Java Wait, what? I've never actually heard someone argue that before.
Kotlin is pretty much what you would do if the task was "Make a C# for the JVM from scratch"
I like Nadella, I've been critical of some of the stuff that happened on his watch but he has done a better job than Balmer and overall a good job. Are you sure you need touch? I have it on various laptops and literally never use it. I'm writing this on a Surfacebook which even comes with a stylus and that just sits on its magnet doing nothing :) Should be cheaper without too, although you might not get the higher resolutions. This does all assume they start doing touch of course :)
[117 results found for WPF](https://i.imgur.com/XG1N8Hx.png) available on [Pluralsight](http://pluralsight.com). You get *some* free access to it through a [Visual Studio Developer Essentials](https://www.visualstudio.com/dev-essentials/) account. Alternatively, try a free monthly trial. Edit: Dev essentials no longer has free pluralsigh :c 
This is a great resource. It's long winded and boring but seems to cover a lot of important knowledge.
We are running containerized (linux!) apis (restful-ish) on dotnet core in production for quite a while now, started since the old project.json and overall - it is great. There are/have been some stability issues, but those were minor in our case. In my opinion the biggest cons are that the platform is still in a rapid development = you will need to come back to your services and update(for stability/features), and if you need something VERY VERY specific, libraries might not be already ported (haven't run into these myself). I'd say definitely give it a try and see if it suits you. 
If it's a .NET assembly then why are you not able to add a reference to the assembly to call it in your code?
Honestly I don't know anything good that Nadella started except buying Xamarin. Ballmer did so many great things and the things that Nadella gets to call his achievements are actually Ballmer's achievements (Office 365 and Azure). Nadella in my mind is a liquidator that kills everything cool about Microsoft until the company shrinks to Office and Azure company (which again is only possible because Ballmer built these things). Yes, I am sure I need touch, I am writing on a convertible device right now (and have been for almost 5 years). I love touch, I use it all the time, I even sometimes try to touch things on my desktop monitor (which doesn't have touch). Touch is extremely great and there is no reason why an expensive machine won't have touch (it adds about $50 to the price and reduces the battery life by 5% if the screen is used all the time, which are things that are 100% worth it). I am not sure about inking, never had the chance to try it. Not very exciting about it since I totally and completely suck at drawing.
I think you mean: This is "Theoretically" wrong, but "Defacto" Right. In the practice, the Ecosystem where you'll find better support is in the Windows one. Microsoft is TRYING to play well in the Unix space, but is still too soon. I'll wait a lot of time for them to mature that migration before spending my time in .Net technology.
Thanks for the reminder. I will make this a priority this week. Tracking in [Issue #2701](https://github.com/bridgedotnet/Bridge/issues/2701) and your original [request](https://www.reddit.com/r/csharp/comments/6bp5s9/avalonia_ui_05_released_now_with_net_core_support/dhoiqia/).
But I can't.
Anyone who tells you Java is easier to write with is lying to you; most likely biased against Microsoft or insecure about their own knowledge. C# is basically an upgraded Java. Seriously, Java is almost completely a *subset* of C# in terms of language features. Take it from someone who's programmed professionally in both languages.
Since OP is trying to track notes by server name (it seems), a ConcurrentDictionary&lt;TKey, TValue&gt; may be better.
I can add it, and call it, but the return values are instances generated by the assembly. I need those in JSON, and I need to return them via a web API. Now that I think about it, is it as simple as parsing the returned values to JSON in the controller?
Hey how’s it going! .NET shops have come a long way There’s lots of node adoption going on, and I built a CRM in C# entirely which ran on Linux in 2012 via mono/NHibernate C# is truly a pleasure to work in with fantastic tools With tools like Cake and scriptCS it’s really getting easy to use it everywhere, my opinion is to dive in if you’re interested at all! 
Asking Reddit for advice or using it to base a decision is somewhere between dangerous waters and an awful decision.
Re: npm vs NuGet, C# standard library is not only not-garbage, but actually really quite good. As such, no *left-pad* (seriously?!)
I am a long-careered programmer of Java, VB (Including VB5,6 and .Net) and C#. I’ve also done projects in PHP, C++, JavaScript etc. There are two things to consider when saying what is the “best” language. First, if you are focusing on platforms and languages, you’ve already started at the wrong place. You need to start with the human need and how you are going to meet that need as quickly as possible with a quality product that can expect to be further adapted to growing needs. Second, the language and platform you choose to develop in needs to be driven not by what’s popular for popularity’s sake, it needs to be the right tool for the task. You can’t use a hammer for everything, and if you have a hammer, not everything is a nail. Microsoft has done a great job advancing the cause of open standards in recent years. They have come a long way from the day where buying SQL Server and using .Net was like an infection in the enterprise. It can be argued that they have done better than Oracle in playing nicely with the ecosystem. That being said, Java has many, many more developers, more mature libraries and a lot less hard feelings from the past. It was adapted by AWS, Google and many other cloud platforms before C# even contemplated moving there. However, Visual Studio is a fantastic IDE and you can prototype client side software quickly, increasing the speed of the conversation. Web API (which was the framework when I last worked in .Net) was serviceable. Python is (in my opinion) the language of the future. Node.js is also something worth looking into. I’ve also been impressed with Electron. So, I would think JavaScript is also a skill worth investing in. Angular and React are good frameworks, and I’ve used both. 
&gt; How well is .NET accepted and used on enterprise level? You will likely have more opportunities to make $100k+ than with any other language/platform. .Net absolutely dominates the enterprise world.
I disagree with this thinking, depending on the case. If you dont *know* then sure, that is a great method. However, to me it seems to say, and promote, "meh dont even bother thinking about performance beforehand! Just code it up however you can and then you can totally fix the performance issues after!". Excessive premature optimization is definitely bad, but I would argue the opposite is also true. I see so much code on a daily basis that is just chock full of totally unnecessary inefficiencies and bad algorithms that could have been avoided from the start.
C# is better than Java in every conceivable way. .NET is better than the Java standard library in every conceivable way. Visual Studio is better than any other IDE in every conceivable way. However no matter what the C# fanboys tell you, C# isn't nearly as usable in a cross-platform environment as it is in Windows. Its getting there but not quite. If you're going to be programming in Windows then .NET is what you use, period, whether C#, F#, or whatever. But if you're looking at cross-platform then you may want to look at other options, at least for now.
Great point, thanks for being observant. :) 
MVC should just do all of this for you. What does your controller look like? You should be able to do something like using namespaceInAssembly; using Microsoft.AspNetCore.Mvc; namespace api { public class ThingController : Controller { public ThingController(assemblyType assemblyInstance) : base() { AssemblyInstance = assemblyInstance;} public assemblyType AssemblyInstance {get; set;} [HttpGet("your/route/here/{id}") public GetThingFromAssembly(long id) =&gt; Ok(AssemblyInstance.AssemblyMethod(id)); } } Given assemblyType is the type of the class you're using to get output, and it has a method AssemblyMethod that returns the thing you want to serialize as json. If you *can't* reference the assembly directly, things get much harder, but if it's a .net assembly, you should still be able to use reflection to register types from that assembly in MVC's ConfigureServices method as long as you have the assembly's DLL on the file system somewhere. If that's the case, I can expand on how to do that, but it's not something most people should need to do.
Yes! finally made it work like that. The problem. As a beginner, I have trouble understanding the docs, but I'm slowly getting there. Thanks for the patience!
lol I like that analogy!
Yep, found that out the hard way. Was awkward as heck, haha.
Oh I get it. Have you considered just importing the data as type `dynamic` (or `string`?) and then parsing the JSON back into managed objects? I can show you some examples if needed. I do this pretty often at work. Edit: woops I should've read your full post first. You suggested the solution exactly. :) 
The problem with .net core and the reason I don't push for its adoption at work is that it feels like they are testing in production. Throwing ideas, features and pipelines at the community to see what sticks (the csproj thing is a good example). That kind of churn in a framework is scary and a large risk for a company. I love C# but lately the frameworks and tools haven't been built to stand for the years I need them to. Once that gets worked out itll be nice but right now the project is doing exactly what Microsoft did with its Windows Phone/Modern App platform, reinventing the wheel over and over. Leaders at MS call it revolution over evolution, to me it just feels like passing the risk to your consumers.
I'm not sure if I can do that. The "SDK" that I was provided seems pretty rudimentary, so I doubt that it supports any kind of dynamic typing, generics, etc. I'll definitely take advantage of your generosity, though. If you don't mind sending an example my way.
I don't have any insider information but somehow I don't think this is an analogy. I believe this is what happened at some meeting in JetBrains' offices
Not a problem. Let me whip up a repro case for it real quick. 
Yup picked ip python in a day after learning c# was challanged by a local tech head to make a software that listed nearby towns by distance also completed this in a days time lol.
I've never tried this. How would I know if I can or cannot reference an assembly directly? Not completely sure what you're doing in the constructor. public ThingController(assemblyType assemblyInstance) : base() { AssemblyInstance = assemblyInstance;} 
SUN did a great thing! MS was up to its old embrace extend extinguish tactics. If MS had been able to get leverage with their Java at the time it would have killed the open nature of Java. MS has really only embraced open tech in the last 5-10 years. Before that they were continually trying to lock it down and own it.
I'm a web developer, but for native applications C# is 100% my go-to. You're far from restricted to the Windows ecosystem with Mono and .NET core being a thing. You can make native applications, web apps, games, mobile apps, console apps...etc with it. Whoever told you this has no idea what they're talking about. .NET Core is practical a drop-in replacement for .NET, with the exception of windows-only frameworks like WPF, I've managed to switch almost all my code over to .NET Core with very few headaches. It is missing some features, like drawing, and some libraries are not entire compatable yet, but for day-to-day use I never notice a difference. If you want a language chuck-full of solid features that you would need to roll yourself, or search for 3rd party libraries for, chose C#/.NET.
My colleagues are very much against C#, they seem to believe you need special MS licensing to use it,and you can only use it on Windows. All of this is very much incorrect. 
I work for a company that delivers SaaS for business' from sole trader up to enterprise size. We are a c# house with angular, primarily, for our front end. We've just developed a module in .net core which we currently have an alpha release of, designed so that customers can have c# macros to manipulate their data outside of the standard features we offer. For instance, take this order data, manipulate it report it back to me in X format. Do this every Y minutes. Not every customer will want to use this functionality, but those that do will use it heavily, so the choice to go with .net core wasnt taken lightly, although this is partially a guess, as I didnt design the new system. Do I see us moving to core completely? No. We're too embeded in our current framework. Can I see us developing more in core? Probably. I think we would wait for a long while before writing anything absolutely mission critical in core, but at the end of the day, we are a good fit as a lot of the limitations of core, like lack of UI frameworks, aren't really limitations to us, as we are mostly reliant on web api.
Are you productive with your current stack? What are your current pain points in that stack? Is there something you want to do that you can't with your current stack? Without knowing the answers to those questions there's no way to tell you whether or not it's worthwhile for you to learn a new stack.
So what you are saying is that open tech cannot survive and it needs a company owner to sue another company for forking it? :)
Java jobs pay just as well. (But then, you've got to use Java.)
Sadly I have to agree. So far ASP.NET core is treating us well, but EF Core has been a nightmare. And I really miss using Visual Studio. The real Visual Studio, not the crappy half-broken version of VS 2017 that I'm currently stuck with.
&gt; Ballmer's achievements (Office 365 and Azure). Huh? Nadella got the job because of his working making sure Azure was successful. 
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/programmerhumor] [Ask me any C#\/programming question. Then, after I’ve answered, edit your post to make me look like an idiot. • r\/csharp](https://www.reddit.com/r/ProgrammerHumor/comments/79zu2o/ask_me_any_cprogramming_question_then_after_ive/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Honestly, interop is hard to work with. You are also bounded with the COM components. Excel crashes, you loose everything you've done (unless you have a save/backup mechanism). XLSX is just eXtended XML. If you rename your xlsx into a zip file you will see the structure. If what you do is simple, go straight to the source. Use [Open XML SDK] (https://www.nuget.org/packages/DocumentFormat.OpenXml/) library and a good document to grasp the concepts is [openxml explained by Wouter van Vugt](http://openxmldeveloper.org/cfs-file.ashx/__key/communityserver-components-postattachments/00-00-00-19-70/Open-XML-Explained.pdf)
Covariant arrays were never fixed. But that's a CLR mistake, not a C# mistake. What else were you thinking?
Motives aside, you have to admit that Java without the MS extensions really sucked for Windows development. Hell, the lack of events still sucks in Java, though we don't need then very often for web programming.
&gt; It would appear that majority of the people here on reddit (beside this sub) Which sub are you getting this? In /r/programming for instance C# is quite popular.
This is true. What is also true is that Ballmer fired Bob Muglia because Muglia did not agree with Ballmer's vision of Azure (this is public statement not some conspiracy). Ballmer wanted to go "all in" on Azure and Muglia thought they should enter the cloud business at a slower pace (maybe like Google did). Ballmer fired him and put Nadella in charge with the task to go full steam ahead. Sure Nadella implemented it but the decision was clearly Ballmer's. I mean it is not like he let people do their job and waited, he literally fired the boss of Azure.
&gt; But then, you've got to use Java. I'd rather learn a new js framework every 5 months... oh wait... :(
&gt; Why not learn both? Ecosystems. Learning languages is easy compared to learning stuff like Spring.
We use it as the primary language for a large enterprise level family of applications and servers, and we're starting to adopt .NET Core in Linux containers moving forward. I'm also experienced in C++ and a lot of the current hotness of the web world and most often times the question isn't "why C#", it's "why something else".
You just return the objects and web api will turn them into json or xml for you. Is the same as for a class that you created.
You have been thoroughly misled. I do .NET development for a living and there's *no* lack of work out there at every level from SMB to enterprise. You may have to move around a bit though, depending on your area. Remember that the .NET ecosystem is large and well-developed: it spans mobile, web, desktop, service-level, and all sorts of other areas. There are few, if any, total experts at *all things* .NET outside of Microsoft because that would require them to be damn near a deity among humankind. Most developers have a basic knowledge of the ecosystem and languages and can learn new things within that easily. What you *will* find is that, as the ecosystem expands into new areas like cross-platform, you will see a lot of companies that are (blindly) hot to jump on the latest and greatest new concept. They want devs who are well versed in the .NET world but also rockstars at other things that now can work with .NET. It can be confusing as hell, because you might be an MVC5 expert, but they want to use a javascript front-end rather than the traditional view engine, so they want not only an MVC5 expert, but also an AngularJS expert. THat *really* can muddy the waters. Most developers pick an area or two that they specialize in and stay in those areas: desktop dev using WinForms/WPF, web dev using WebForms/ASP.NET MVC, mobile dev using Xamarin or UWP, API or service architecture, etc. Many subdivide those general areas further, becoming experts with particular distinct areas, like front-end development using AngularJS with an MVC backbone (a common job position I see that pops up). 
If you had a case such as a user ID search page, where someone can lookup a user ID, and it is clear to everyone that sometimes you might not find a user, then you would use SingleOrDefault, so that you can easily detect the "not found" case without an exception, and return a user friendly "User not found" error. This is consistent with what I stated before. On the other hand, if you are in a position to say "hey, if this query didn't find a user, that should never happen because they can't get here without authenticating". That indicates a very serious problem, and I want an unhandled exception to bubble all the way up the stack and prevent any processing from occurring, which includes invalidating any current TransactionScope. To go your approach, I need to litter every single query with a followup `if(result == null) { throw ArgumentException("User/Order/(insert entity name here) not found"); }` **This is the anti-pattern of using state to determine exception error conditions.** The problem is if you rely on this approach, and a less diligent dev forgets to implement the check, now you have a situation much worse than confusing exceptions, now you have no exceptions at all until this bad state creates errors further down the line. That's how the whole principle of exception handling was introduced, to ensure if there is an issue, it fails exactly where it occurs. If you threw all assumptions out the window and tried to handle all possible cases then your code would start to look like Win32 code that had 50 different error cases that it had to handle. Certainly I'm in favor of handling the cases that need to be handled, and providing informative error messages, but cases such as "What if the user doesn't exists?" don't need to be handled if your knowledge of the workflow assumes they exist. Using .Single in such a case ensures if your assumptions are violated by a bad authentication layer, then the user's request is aborted. As far as traceability, it actually improves traceability because now your stack trace that you *should* be including in logs will pinpoint exactly where the error originated, instead of it originating from a later null check where you explicitly throw or NullReferenceException. *First/Single Exceptions are not Confusing* Exceptions indicate an unhandled error. Again, they indicate one of the three issues I outlined, all of which are issues only a developer can diagnose and solve. The only other case is bad data that a DBA could help with, but still the DBA would need to have first hand knowledge of the LINQ query in question to know what criteria was accessing duplicates, and secondly the bad data was probably introduced with buggy code that needs to be looked at by a dev and fixed. Support staff shouldn't waste their time with unhandled exceptions. So the individuals that should be dealing with unhandled exceptions should absolutely know that First/Single throws an exception on a result of 0 records, and if they don't, you should coach them. It's not a hard concept. If you have an unhandled exception, it means someone missed the mark on requirements/implementation, and that means the fix is a code change. Such as the above, somehow a search was performed for a non existent user. Someone needs to look at it and figure out how someone could get that far without authenticating a valid user, or the query criteria has a bug. That's all things only a developer can address.
Forget the CLR, there's multiple C# implementations including one that compiles C# into Javascript via WebAssembly.
I cant think of any either off the top of my head, but im pretty sure C# was at least partially derived from J++ which was Microsofts competing version of Java and which they were forced to stop developing I think?
Spring might as well as be its own language at this point.
We've been evaluating since the .NET Core 1.0 RC1 days (almost 2 years now)... the tooling is still not there for our needs. .NET Core 2.0 is closer, but the tooling is still a bit weak. Since a bunch of us are macOS users (with VS running in a Win10 VM) and because Apple fails to ship a 32GB MacBook... yeah, we're looking forward to .NET Core being more polished. Maybe this coming winter we'll actually risk putting an API service on .NET Core. 
&gt; not the crappy half-broken version of VS 2017 What do you mean by this?
&gt;How would I know if I can or cannot reference an assembly directly? [If you're referencing it at design time.](https://docs.microsoft.com/en-us/visualstudio/ide/managing-references-in-a-project) &gt;Not completely sure what you're doing in the constructor. public ThingController(assemblyType assemblyInstance) Declaring a public constructor for ThingController that takes an instance of the class you're using to get the object you want to send as JSON. : base() Indicating that when this constructor is called, first the base class (Controller) constructor should be called without arguments. { AssemblyInstance = assemblyInstance;} Setting the AssemblyInstance property to the assemblyType instance passed into the constructor. 
In my area there are .Net jobs everywhere. My company is starting new web projects using .Net Core as well.
Or can you?
Microsoft technologies like .NET are almost exclusively used in industrial and manufacturing environments. All major worldwide manufacturing systems vendors use code bases originally developed on Windows NT and have stuck with that ecosystem. I'm talking about automotive, pharmaceutical, food and beverage, etc. All supporting software for these systems need to be based on similar tech to utilize their APIs.
What I'm saying is that if Sun hadn't sued MS, Java could be in a much worse state today than it is. "Breaking Java's portability: The antitrust case's plaintiffs also accused Microsoft of using an "embrace and extend" strategy with regard to the Java platform, which was designed explicitly with the goal of developing programs that could run on any operating system, be it Windows, Mac, or Linux. They claimed that, by omitting the Java Native Interface (JNI) from its implementation and providing J/Direct for a similar purpose, Microsoft deliberately tied Windows Java programs to its platform, making them unusable on Linux and Mac systems. According to an internal communication, Microsoft sought to downplay Java's cross-platform capability and make it "just the latest, best way to write Windows applications".[15] Microsoft paid Sun US$20 million in January 2001 (equivalent to $27.05 million in 2016) to settle the resulting legal implications of their breach of contract.[16]" [https://en.wikipedia.org/wiki/Embrace,_extend,_and_extinguish](https://en.wikipedia.org/wiki/Embrace,_extend,_and_extinguish) 
Build your own custom wpf control The information you get along the way helps you understand what's going on under the hood
&gt; Visual Studio is without peer This is so true. Any time I need to use an IDE that is not VS I just shudder in horror. I refuse to work with Eclipse. And don't forget the hardware. The Surface line totally rocks. 
Java offloads the arduous task of self-improvement onto its children languages, Scala and kotlin whereas C# sips F#'s lifeblood, granting itself eternal youth
Yeah. We decided to have some fun and make our name a homage to the project that inspired ours.
C# and Visual Studio are an awesome pair but the .NET ecosystem pale in comparison to the python and the JVM stack. If I were to switch to a different stack, I would do so to get access to better frameworks and tools. 
Wow, thank you for your insight! I was unaware of the current year. I meant that I haven't found many asp.net tutorials that were good *for me*, and not that there was any shortage of them.
The framework is a brainchild of the guy who made Delphi, if you’re curious about origins. When I picked up 1.1, it felt like the Delphi framework. 
I've stumbled across that playlist before, and I think that's probably the resource I'll use.
Java/J++, Visual Basic, Pascal, C of course. I think that covers the v1 features.
A lot of stuff in Visual Studio doesn't work when your doing .NET Core development. In some cases it simply doesn't exist (Code Analysis), in other cases its buggy or VS outright crashes. It's like using a totally different IDE when .NET Core is involved.
iPhone app developer here, so I’m probably about as unbiased as you get. C# is pretty great and has some interesting constructs. Worth learning.
Again do you suggest that open platforms cannot hold their own against EEE? Because open platforms allow companies to fork them and change them as they see fit.
Out of curiosity, what area are you from? I'm surprised that Node is popular where you are. Where I'm from the jobs for it don't exist. Or the job postings that I see lump it in with Angular/React because they don't know what it is. Java has about a 2 to 1 lead where I am in terms of number of jobs but I've yet to have a week in the past 3 years where a recruiter isn't filling up my mailbox.
Visual Studio is by far the best IDE I've ever worked with (*especially* the debugger). Lately I've had to do some work in Eclipse and it just feels clunky in comparison.
Additional data point, in Indonesia anything related to finance (banking, assurance) will ask for .NET. Only startups &amp; government use non .NET stacks.
Visual Studio Code runs beautifully on Linux (and Mac). It's become my go-to IDE when I'm working in Linux.
IMHO c# combined with VS are so much better to work with than ANY other language. Core is barebones? How so? Core is outstanding and I firmly believe it will work to displace java over time. A new developer will become productive with VS and c# so much faster than they will with java or any other OOP language. Ive hired many new devs out of college with only java experience and introduced them to the world of c# and visual studio. SOURCE: Im a development lead in a shop where we threw java (and obj-c) away for react native and use c# for everyting else.
[Here's the reproduction case](https://github.com/sshado/DynamicInteropWithJSON) which is a solution containing two projects. Console app and a class library. Library sends data in an unknown format, but the client does know about *possible field names* so it can make educated guesses. Every time you press a key in the console application, it will generate new data and try to parse it. The program reports back which fields were received from the data pipe. The code should all be pretty straight forward in 2 class files `ExtractTransformLoad.cs` and `Tester.cs`. All this uses is the [JSON.Net package](https://www.nuget.org/packages/Newtonsoft.Json/) on NuGet to serialize the data before sending it down the pipe. Edit: This is a .NETCore 2.0 app so if you don't have those libraries then just change the project properties to target .NET Framework 4.x 
Agreed. All other IDE's feel like complete clunky dogshit compared to VS. 
&gt;electron NO.
Removed: Spam. Rule 3.
You won't regret it.
Nice, I know a few people who will like this. Will let you know what I think once I play around with it.
I was with you until “killed the open nature of Java”. Their suing forced Microsoft to innovate and make not only a language but ecosystem that is superior in many ways (caveat depending how you look at it). Sun saved the majority of US FROM Java. Not Java from MS. Thank god the curators of Java quietly smothered it in the night when it could have become a common desktop language.
It's buggy on Win7, but solid on Win10
We have found that if you can move chunks of business logic into a .NET Standard library that it allows you more flexibility to use .NET Core targeted projects more often, if you desire.
More. Net than java at the very larhe well onown companies. I work at a very large well known company and its the majority here. (large companies use both). Look this isnt fan boy stuff but c# can do more/has more options. My small example is c++ interoperability. You can go unsafe and use pointers and change how your seductress are packed to interact with native dlls. 
To parrot him a bit, we've had problems with unit testing .NET Core in x64 configurations, and in getting strange errors with the package manager console and when using any tooling support for asp.net core projects for controller scaffolding (which we don't use, but it invokes when you 'Add New Controller'). Most of these problems have been reduced with 15.3 and 15.4 (we were running on the preview of each for a while). We probably would have had fewer issues if we stuck to asp.net core 1.0 and .net core 1.0...but being able to take advantage of .NET Standard 2.0 was the point that make transitioning for (some) our new projects worthwhile.
The first time I watched a couple, and I didn't know much about anything web dev (html, css, http requests) so I had a hard time understanding, but now with some more starting knowledge, I'm like the first few videos.
Not really. Under Balmer the stock stagnated. Under Nadella the stock is at all-time high. 
Here government is .NET and Java but I think this is because these platforms lend themselves well to the kind of business that government projects are. Government projects are not sexy so top programmers do not want to work on them unless you pay them obscene amount of money. This means that you have to hire probably 1 top programmer and a bunch of average and sub-average programmers to work on the projects. .NET and Java are good for this because they focus on maintainability which means that the architect can reasonably enforce and guide good practices through the codebase itself and prevent the subaverage devs from doing damage while allowing them to contribute.
I don't think they offer Pluralsight via the essentials account anymore, because I signed up for it last week and there isn't a pluralsight benefit in the benefits page.
Right, but the language features were more influenced by J++, more like C# is its successor. Not much relation to VB besides the framework.
Not the OP, but reference types being automatically nullable was a mistake copied from Java.
I see, and I agree, which is why I'm still waiting on .NET Core (and its tooling) to be truly stable to start using it.
This is true and unexplainable to me. However I am not a stockholder I am someone invested in the MS ecosystem as a user and as a developer. I am thinking of a way out of the ecosystem because I don't see a future for it except for Azure and Office but they are less than exciting.
Wait...lambdas in Java have to check exceptions too? What does that look like?
Aw damn, thanks for letting me know. :/ I wonder how many times I've given out that bad advice recently. I've been talking up that thing since like June when I used the service. I ended up buying a subscription anyway.
It's a great series, but it is not a series for programming beginners; Ideally you would watch this after completing his C# for beginners and SQL Server series. It also assumes knowledge of HTML, CSS, JavaScript and possibly Bootstrap. How requests work is not a prerequisite.
"Those are some mighty fine looking pattern matching operators you have there F#, I might just borrow them."
Turns out you can't call a method that throws a checked exception in a lambda. You must wrap.
Yes, thank you. Now we have better Java in the form of C#.
Why not just try it out and decide for yourself? Why does it matter what redditors say about it?
I've heard people argue that the libraries and supporting projects available aren't as mature or cloud ready and that the JVM is more performant than the CLR, but I don't know how anyone could claim the language of Java is better than C#. I don't know how relevant those first examples are anymore, either.
Kind of a shame, Microsoft is doing some really great things now. VSCode, dotnetcore, hell they're even putting up some really interesting example [repositories](https://github.com/dotnet-architecture/eShopOnContainers).
The subscription isn't that expensive but for me I don't like videos for learning to program. For the basics I wouldn't recommend watching videos anyway, it just seems easier to me to read up on something to learn the beginner things. A video will spend 15 minutes explaining what an ArrayList is when it really doesn't need to if you get what I mean. 
So if you want to inject a lambda as a dependency into a class and you don't know ahead of time what exceptions injected lambdas can throw...how do you handle that? I've never really given that much thought to checked exceptions before.
&gt; primarily avoid C#/.NET because it's a product of Microsoft And that is a really, really stupid reason.
I hear the "more mature libraries" argument all the time, but I personally have never run into a situation where I needed a library that didn't exist for C#, and was good (with the notable exception of a cross-platform GUI). However, this might be due to the nature of my work. Would you mind listing some nice Java libraries that don't have a C# equivalent?
Thanks, if you have any issues please let me know as I am actively developing and improving this project.
More Node jobs than C#? Where the hell do you live?
To be fair, the C# beginner series definitely beats out most textbooks that I've used. You have everything needed to interact with the full ecosystem after getting through it. I think that's an exemplary example of a video series though, and is in the top ~10%. Video learning is far from perfect though. It tends to shine as a guide on what to learn next and a place to go for expert examples.