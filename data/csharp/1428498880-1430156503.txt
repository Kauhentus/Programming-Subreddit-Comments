Will definitely look into that :) thanks!
Wow didnt know that site, thanks! 
 &gt; * No [SetUp] or [TearDown]. - I actually need that for attaching to some 3rd party native DLLs. I also use it for integration tests. Use a constructor and make your class IDisposable. You can also do something that is very similar to constructor dependency injection to share stuff across tests (useful to do things like share a pool of web browser instances across hundreds of tests instead of spawning a new one for every test). http://xunit.github.io/docs/shared-context.html
I've been developing using **Xamarin.Forms** for the last several months. While it is useable, the reliability of the Xamarin platform has been a real nightmare. It's an extremely difficult task:cross-platfrom development using a single language and IDE, but I would say I spend close to 30% of my time coding dealing with Xamarin platform issues. Far more frequently than not, their updates break projects and the delicate balance of packages and dependencies. For some time now, I feel that they have been using paying customers as beta testers. Ultimately, IMO the product does not accomplish what it advertises i.e. cross-platform development because the platform is not solid enough. So many days have been lost dealing with Xamarin issues instead of developing. And on a completely personal/emotional level: I just plain hate using Xamarin due to the instability and the amount of productive time it has taken from me. I have to use it because it appears to be the best option for cross-platform dev, which is a frustrating thing. Dumb, dumb, dumb. Ugh... and off to some more Xamarin dev. *Edit: Bolded a word for emphasis.*
String.Format might be de-escaping your match text. Try this, to check if that's the problem: string textToFind = matchWholeWord ? @"\b" + escapedFind + @"\b" : escapedFind;
are you trying to replace words in a longer string? if so are you able to split the longer string up into an array of words, like are words separated by a space or something. If so you could just iterate through each word and replace as necessary, no?
Ok. Can you show us exactly what ends up in textToFind when you put "br$" in as the match text?
Just use a Windows Azure WebJob - nice and easy. It has a built in scheduler and will activate a console app.
The above guy clearly hasn't read the Xamarin docs clearly. They explain where and when to use Xamarin.Forms over the traditional approach. I've developed with the traditional approach for over 2 years and never had issues. I know lots of developers who are the same. It seems a lot of new developers are coming to the Xamarin platform, trying to build hugely customised apps with forms and then moaning. They didn't read the docs, can't be arsed to learn the tech and complain. 
Good to know. I'm mostly doing this as a way to learn more C# in a way that I can usefully apply to try and get ahead at work. If nothing else, I'll keep this for myself and move on to a web services solution for the end user. Thanks for the link!
\\\bbr\\\$\\\b
Sounds perfect. I'll definitely do that once I hit Xamarin. I think my general path right now is make an app for Windows Phone, use it and make sure it runs well, and then transfer it to iOS and Android using Xamarin. That way I have a base app to compare the iOS and Android ones against.
The best way to do this is probably to actually parse the HTML, e.g. with the Html Agility Pack. Then iterate through the elements and their attributes, modify it as wanted, and then serialize it back into HTML. Assuming that you're trying to purify user-provided HTML for security purposes, I would strongly suggest that you whitelist tags and attributes instead of blacklisting them. There's a billion subtle ways to execute JS (e.g. in javascript: hrefs, IE's CSS expressions, form actions) and new ones keep getting added, and you only need to forget one to open a hole for a potential attacker.
My comments refer to Xamarin.Forms only, not the individual Xamarin platforms (iOS, Android, WP) as I stated. That is where I have spent the majority of my time. From what I hear elsewhere, Xamarin.iOS, Xamarin.Android, and Xamarin.WP works significantly better than Xamarin.Forms. /u/the_honey_monster, please don't be so confident in you presumptions about me. "The above clearly hasn't read the Xamarin docs clearly" is wholly inaccurate. You are avoiding my criticism by turning it back to assumptions on how I work. I can't even begin to explain how much reading I've done regarding Xamarin.Forms (plus sucking up as many Xamarin focused podcasts as I can). *Edit: Changed "works significantly better than Xamarin.Forms" from "works well"*
I assume the backslashes got escaped in your debugger, so the string itself just has single slashes. I just did some quick testing in notepad++, and it looks like the issue is with the definition of \b -- in the .NET regex engine it considers the $ character not to be a word character, so it creates a word boundary, like a space does. You'll need to change your regex pattern around a bit if you need to be able to capture something like br$, and it'll probably have to be more complex than using word boundaries -- you'll probably need to use [zero-width lookahead/lookbehind assertions](http://www.regular-expressions.info/lookaround.html) with a character class written out to specify exactly what characters are considered "not part of a word" in your particular application. 
Ah, how I've battled that API over the past 10 years. Made me shudder thinking about it. But most of this work has been wrapped up already in Cassia - https://code.google.com/p/cassia/. Just a wrapper around the p/invoke but it has enough nuances that I wouldn't want to write it myself anymore. 
It seems like you are trying to "return" from the if's scope to the initial method scope, you don't need to do that. return actually means "Exit this function" and no just the scope. Your problem is that one of the conditions is true, the value of dblCar is changed but immediately after that you leave the function without checking the other conditions/getting to the line that updates the label.
Thanks a bunch. That's a really good idea, I'm not sure why I haven't been using the debugger more. Thanks for taking the time to "teach me to fish" per se.
I appreciate the explanation of this, I was misunderstanding the concept of return. I thought it meant, "Now with what you just checked, return the result to the test."
Not entirely sure what you're asking, but I use Dapper as it's been in my experience the least performance expensive ORM out there https://github.com/StackExchange/dapper-dot-net this could be of use for you, if you're looking to build giant enterprisy applications which where database performance will be a bottleneck Here is a simple guide http://venkatbaggu.com/use-dapper-net-orm-in-asp-net-mvc/
If I do use this .. I'll blacklist everything and only whitelist/allow some basics like STYLE and HREF.
Well if I understood correctly, it's free for an honour certificate and 90$ for a verified certificate.
Everyone is forgetting that mstest is still the only test runner that can execute web performance and load tests. Having said that...it looks like microsoft also stopped developing those back around 2010. 
Gotta separate your services from your GUI yo. Pattern your software so that you have one part of it on another thread (or use tasks) to do all the processing, change the data and create events to watch for that data to change so you can update your GUI. There are all sorts of models you can use. MVC (Model, View, Component), MVVM is also quite popular. http://stackoverflow.com/questions/667781/what-is-the-difference-between-mvc-and-mvvm
The .NET Framework has great SQL support out of the box (http://www.csharp-station.com/Tutorial/AdoDotNet/lesson03). Some basic ADO.NET commands would probably be enough for you. More advanced software will use some kind of ORM (like Entity Framework) to abstract away the SQL writing from the developer. I think that's overkill in your situation, and will require too much education for a simple, single user tool. Alternately, it might also be possible to script the task you're trying to perform without having to write an application at all. You can use sqlcmd.exe to execute the command, and something like https://findandreplace.codeplex.com/ to update SQL variables that may change between runs. It depends entirely on what your goals are. If you just want your user to stop bugging you, a scripting solution might be quickest to develop. If you want to build some C# dev skills, start with ADO.NET and the .NET objects like SqlCommand.
While not technically wrong, I find their comment to be rather misleading. This is purely a threading issue, and has nothing to do with MVC or whatever other patterns. Good design may or may not make multithreading easier, but it's neither necessary nor in itself sufficient to solve your problem.
You can pattern it however you want, but yes. Like I'll use a static class to hold my data (provided I don't need instances of it) and another static class that has all my networking crap in it, with a method like Start(). So my winform/wpf/whatever framework you like starts up and the gui appears. OnLoad I run : new System.Threading.Thread(()=&gt;{Networking.Start();}).Start(); (that is, an anonymous delegate starting a new thread) So in the background, the Networking class is transiting my data back and forth. That's a static class so I'll access it from both the GUI and the Networking classes. If I have instances of data, I'll also need to build a controller to manage that from both the GUI and Networking. I'm a very junior programmer, so my methods might be shit. Maybe you shouldn't use statics or maybe don't do delegates to start threads like that. But it works for me. As an example to how shit a programmer I am, rather than creating proper delegates and events to update my data, I'll use a winform/wpf timer and on update it just runs a method that checks to make sure my GUI is updated to display the current information in the Data class. If I'm working in SFML/SDL (games stuff, mostly) then I have to use delegates and events, so I guess I'm lazy too. 
lol, but it is a fast and easy way to make apps , after using it for a year, it's amazing how quickly one can design and build, the UI editor could not be simpler if it tried. There are hundreds of libraries and over 100K devs. Now that it does ios, java and android and has a hosted mac service all at 1/10th of the price of competitors I really dont know it isn't used in industry.It does not want for much
&gt; I wish there was similar options for people that just want to learn. You can enroll in literally one course at a community college and be eligible. From the website: &gt; Eligibility requirements &gt; Students must be enrolled in a degree or diploma-granting course of study at an accredited college, university, or high school. So as long as that one course is taken as part of a "degree or diploma-granting" it'll count. Community college costs vary but are insanely cheap. The one closest to me is $240 per credit hour.
Because we all have to learn.
Do you mean 240 per class? 80 per credit hour is about in line with what I'm paying.
Thanks for all the info. I'll definitely be looking into all these options. This is mostly for my own benefit. 2 years ago I didn't know any SQL and I was exporting data via VB scripts written by some former employee years ago and then putting everything together with Vlookups in SQL. It would take all day to put one of these reports together for one application. Now I'm down to a max of 17 minutes. I'm really just trying to improve it as much as possible for my own satisfaction and adding to the reasons they should give me more money. Thanks again for the input.
Yeah, what I meant was it was similar. :p Thanks by the way, I haven't started on it yet since we are doing something else at the moment. So the flow would be like this: Submit transaction&gt;save transaction&gt;render report to print with print watermark&gt;pop-up option to check if print is successful&gt;finish transaction
SQL server. I would recommend actually learning T-SQL instead of just using EF.
T-Sql is good to learn. Someday you may need to write a stored procedure, although these days you can use C#, but there are hoops involved. T-Sql works by default.
Postgres. That or mysql. Sql server is great too but I prefer free and open source. Sql server has a great toolset though
Your path of least resistance is probably to use EF code first, you can continue on with C#, learn some EF/LINQ, save data in a more structured format in an RDBMS, and when you want to it's easy to see what the code first EF has been doing behind the scenes in TSQL. 
They're already using nunit in the cross platform branch and it was one of the first things people requested when they open sourced it: https://github.com/Microsoft/msbuild/issues/6. So might be more likely than you think.
Learn Entity Framework https://www.asp.net/mvc/overview/getting-started/getting-started-with-ef-using-mvc/creating-an-entity-framework-data-model-for-an-asp-net-mvc-application
That's terrible advice. Use the right tool for the job. Document stores are perfectly valid and often vastly better data stores for certain types of applications and specific problem domains.
Also removes SQL from your code.
&gt; EF is a very common component of many modern projects, but, ultimately, it's just another ORM. And while ORMs are there to help you, none of them actually work well enough for you to never have to know what's going on under the covers. Eventually, some weird behavior is going to happen or some performance problem is going to happen and you'll have to understand the SQL under the covers of the ORM to figure out why.
They scale really big, comparatively cheaply. SQL reaches a point where it just becomes painfully expensive to scale any further without sharding your users into different DBs and thus losing a lot of the benefits of SQL in the first place. However, below that point, SQL pretty much destroys "document stores" for anything that involves actual querying or partial data updates.
If it's about *learning*, I'd say learn the SQL before the ORM.
Nope. Here are the things that a massively cert'd freelancer has (that another FL doesn't...) 1) an inflated opinion of their skills 2) a bunch of exam prep and fees to pay back 3) less time learning practical skills (because they spend that time crammjng for exams) And all of this leads to... 4) a higher bill rate with no improvement in code quality or delivery speed.
Check out fluent assertions
SQL Database projects and publishing helps quite a bit with this.
These "four specific classes" are not classes, but namespaces.
Don't forget EF with code first migrations. They are super cool. 
Unfortunately I think you'll need to call native Win32 APIs for that. Here's the Win32 API you want: https://msdn.microsoft.com/en-us/library/dd162611%28v=VS.85%29.aspx?f=255&amp;MSPPError=-2147217396 and here's info on how you can call native functions from C#: https://msdn.microsoft.com/en-us/library/aa288468(v=vs.71).aspx
That page actually explains very well why it *shouldn't* be a built-in feature of a general purpose language.
For something that needs a full blown heavy duty database, use SQL server. For small applications, particularly single user apps, that needed to be distributed, use sqlite. If you are replacing XML then sqlite might be a better choice. Those 2 databases will cover 90% of your dev needs. I use an orm most of the time now, but SQL is extremely useful to know.
The information you found isn't what you're looking for, it's about having a browser built into your application. There is a shell command for opening an URL in the user's default browser, you can just call it from your application. You can use a combination of this information: https://social.msdn.microsoft.com/Forums/ie/en-US/5bf91e62-7be9-4f1d-9bac-5b2a4dd8ced7/starting-the-default-browser-from-commandline?forum=iewebdevelopment And this information: http://stackoverflow.com/questions/1469764/run-command-prompt-commands
I had a minor issue that the nameof operator was not recognized. But the bigger issue what that I constantly got a dialog popping up which said "Gathering suggestions". This came every few characters... The dialog took a few seconds to disappear. If you cancel the dialog, it also cancels your operation (like typing a character).
For some reason this has been my experience with R# EAPs throughout the years. I always think the bug / crash count is way too high for release, and then they pull the EAP and up and release. But for some reason, the release is mostly bug free during daily usage, and not crashy. I don't know if they all just death march or somehow sandbag bugs...
 Being able to call a dynamic string a million times in under 50ms I wouldn't consider "dreadfully slow", especially considering it appears he'll only be calling this a few times.
Yeah the I/O saving is just an old habit of mine to conserve some life for the SSD, although i know that this is not really a concern for newer SSDs. Regardless of this, by moving the system temp folder you can save some disk space on the SSD since what is stored there is not really needed to be accessed fastly. Im also on the habit of keeping the free space on the SSD as high as possible, since its not really healthy to fill them up to full capacity. Having 2 visual studio installations and other dev tools together quite fills up a 120GB SSD. http://forums.steampowered.com/forums/showthread.php?s=e6baea4f255ff5d053b85979394466ec&amp;t=3134496&amp;page=2 http://www.howtogeek.com/165472/6-things-you-shouldnt-do-with-solid-state-drives/ 
&gt; the nameof operator was not recognized Did you set the "C# Language Level" on the project properties tab to "C# 6.0"? I haven't noticed the "Gathering Suggestions" dialog.. yet. :)
The project was C# 6.0. It was compiling perfectly. And before installation of ReSharper Visual studio recognized the nameof operator just fine. As soon as ReSharper was installed it was shown red, as something unknown. It did still compile fine. I'll try out the 9.1 released version and see if the dialog still happens.
now to wait as all my favorite r# extensions get updated.
If your goal is to just get up and running as fast as possible I think SqlLite or Mongo are going to be your best bets. If this is a longer term thing and you want to be aligned with what most C# shops are doing then getting familiar with Sql Server and then EF is probably the way to go. (I recommend a book called T-SQL fundamentals if you decide to go this way.)
SQL Server and Oracle are the two most common uses at enterprise level. Additionally for small data sets, something like SQL Server Express. Also spend some time learning SQL instead of straight EF.
Plus in many architectures it's easier to scale the application layer than the DB layer (and may also save on licenses).
I have the same experience. My conjecture is that they have more exception/error handling tuned on during release while during EAP they have it turned off to get feedback and to discourage continued use once it releases.
1) Yes, it should contain all properties. You would be passing back the car model to the controller at some point, no? Therefore you would need it. I think it's bad practice with MVC to have properties on the page that are not in the model. Of course it could just be the id of the selected car model, not the whole list. 2) Yes, I would just use datetime and int as parameters and roll my own. You could have another model as a property of your MyReport model... but this might be more trouble than it's worth if you're not reusing it anywhere.
This sounds like a huge amount of effort to implement a fix for what is essentially a trust issue. If you can't trusty the people given access to the admin panel not to fuck around, why do they have access in the first place?
There are other reasons to eschew relational databases for certain use-cases. For instance, choosing a non-relational store for some portions of an application ("polyglot persistence") can significantly reduce development time. I'm just bothered by the voting patterns of the MongoDB suggestion and the response.
regarding your first point. It's really not a Car model, it's MyReport model. It has more than just Car attributes, it has dates and other things. Ultimately I may not need to actually submit the entire MyReport model. For example perhaps what I'm after is really just the id of the car model. So on initial load we load MyReportView with MyReport model. We populated the date, the car makes. You select BMW and via ajax we get 328i, 330i etc. Perhaps when I click the Go button it's perfectly sufficient for me to pass the id of the select model such as 328i to retrieve whatever it is that I need. In other words my final ajax call only needs that one id vs all the things from MyReport model initially on the page.
I agree, but it is still a thing, so I highlighted it for the sake of completeness.
I appreciate the response. I would say that we purchased Xamarin with the intention of using Xamarin.Forms for development. I came from and Objective-C background and native iOS dev. I've been using Xamarin.Forms for at least 6 months. Without getting into too much, I/We (I'm the only person handling mobile dev at my company) are building fairly simple form apps to help record information while on a worksite. Our customers work in various industries and a flashy/svelte UI is not necessary. Given Xamarin's presentation of Xamarin.Forms, it seemed(s) like ours is the perfect use case for the product. I've been able to handle platform specific code in the form of dependency services and custom renderers when it's needed––which is infrequently. But the major pains in my experience relate to the bugs in the Xamarin.Forms product itself. E.g., the Visual Studio extension has the tendency to lock up when launching the application for debugging. This obviously has slow dev down as you have to end the task and reopen the project and cross your fingers that you don't run into the issue again. There have been posts relating to some version of this problem since at least mid-January. While I'm a bit disgruntled, I have to acknowledge that a*smooth* cross-platform solution is a major undertaking. And from some cursory research of the competition, it seems like it's probably the best product for the cross-platform development ideal. Anecdotally, Xamarin.Forms does not work as advertised––that is, it doesn't work as often and as well as a it should given the cost that the fact that it's not advertised as a beta product. I know that's Xamarin.Forms is a new product but if it's only use is POCs then I feel like a chump because I got the impression from the documentation (which has recently been updated so I have may have missed some things) that it was possible to create an functional app using Xamarin.Forms. I will look into the Xamarin.iOS, .Android products eventually. 
What you're describing is the exact reason to use ViewModels. This link on SO should get you started: http://stackoverflow.com/questions/3739385/asp-net-mvc-and-mvvm
"Stored Procedures" means "Pushing domain logic down to the database". Which in turn means forgetting about TDD, more coupling with database, slower tests, harder Source Versioning and higher vendor lock in. 
Thanks for reply. It all sounds complicated but probably working on some small sample project will clear many questions. This sort of stuff i always wanted to do, web services providing data for different applications (desktop,mobile etc.,) .may be i need read more on the tech you mentioned.
I don't know about you but all the software I've worked on has tons of behind the scenes exceptions that the user would never know about. It's hard to know a feature didn't work when you eat the exception and continue on.
Most are probably first-chance exceptions, which are not all that exceptional...
The bigger the .sln the more performance degradation you will find. When I had to work on a .sln with over 50 .csproj files I broke them out into smaller .slns that I worked in. This helped resharper performance 100% because it didn't have to try and parse through 50 .csproj files and the gazzilion of classes in each. (btw adding Request/Response dto's between every layer is fucking KILLER # of lines.)
Every admin is someone who is trusted, but that doesn't mean they can't become disgruntled or have their credentials compromised externally (my software is nicely locked down .. but it is one of many).
Try out the get started demos on the azure.com I planned on some more demo work on webjobs, maybe ill drop a github repo with my work.
Thank you, thank you, thank you. I like the way you think. I would say that's not *always* true, but it usually is. I also find that people who tend toward "database-first" development often have a hard time differentiating between domain models and persistence models.
Just my two cents, but that sounds like a fine way to do it.
Yeah, I thought that might be my problem. I was using it on a solution that contains around 35 projects. I *thought* there was a "Current Project Only" setting that could be enabled to reduce ReSharper's scope, but this is coming from my rather faulty memory.
it sounds like this is an excellent canidate for async/await
Unless you actually need the ease of interoperability and web browser support that JSON provides, perhaps a binary protocol with less overhead would be more appropriate for a time sensitive application? If you don't want to deal with that yourself, protobuf can do most of the dirty work and are widely supported.
Eric's back? Fabulous!
I can understand why you'd be disgruntled. It makes me happy that I'm sticking with their traditional approach as it works like magic. I see a lot of hate towards forms and I don't think its something I want to try for a while (or at least use in anger). I highly recommend giving the traditional approach a try as if you've already got iOS experience you'll find all your pre-existing knowledge is transferable but you're able to still share a huge chunk of code. Fingers crossed that the problems with Forms gets fixed as it sounds like you're using it in the right use case :) 
they were built separately, and not in a super compatible way (one is by-the-book MVVM, whereas the other is really just XAML + code behinds).
I'm using it in a vm (vmware workstation on i7 with 16GB ram and ssd) and it's ok (largest solution is 500K loc). I always refused to use it too due to performance issues but v9 is doable. I don't use solution wide analysis though (as that's very slow when enabled in real time) As others have said, it's key to break up solutions into smaller ones if you can, also for vs.net speed. My complete system (llblgen pro) consists of 4 solutions, each consisting of a dozen or so projects. Resharper handles then ok, but I think if I add them all together into 1 sln it will be a different story: both for resharper and for vs.net in general.
That's nice but I'm still stuck on 8.2 until Stylecop gets updated :-\
&gt; although I disagree with your premise I don't understand what you mean by this. What premise are you referring to?
bear with me, because I have the IQ of a crisp fall day - what do you mean by the 'same application' if the two projects build to separate binaries?
thanks :)
I know this isn't an entire solution per-Se but Perhaps look at Redis. Runs anywhere and it has pub sub. Super high speed writes and reads with some great commands like increment etc. At the very least it may help you rethink your solution. http://redis.io/ 
Are there release notes anywhere?
Thank you very much for your help. :)
You're welcome, good luck! Happy coding!
.... This is the C# subreddit.
Never used it but it looks like this might work: https://msdn.microsoft.com/en-us/library/9kstw824%28v=vs.110%29.aspx
Learn about Windows Communication Foundation (WCF). I believe it will help with what you are trying to accomplish.
People answer in the comments of that blog, so you don't have to bother ever going back to give him ad revenue again.
Not sure that will work as the offset is for where to store in the buffer, not the bytes being read unfortunately.
Do you mean `HtmlResponse` stream? You might be able to use `Stream.Seek` which can move you directly to a position in the stream (you can check whether the stream you have supports that by checking `Stream.CanSeek`. If it doesn't support it then you'll have to create a buffer and just read the characters in a loop. To be honest at 5000 characters that's not that much so I doubt you'd gain much by seeking first anyway. ---- **Ideally**, the web server itself supports skipping part of the response stream (so the first 5000 bytes are never sent). I've never done it but something like this maybe: request = (System.Net.HttpWebRequest)System.Net.HttpWebRequest.Create(URL); request.AddRange(bytesToSkip,maxExpectedBytes); response = (HttpWebResponse)request.GetResponse(); FromStream = request.GetResponse().GetResponseStream();
Plus the only ad (I think) is a small one at the _end_ of the blog entry. This is far, far better than most blog entries that are posted here. Eric routinely makes fantastic blog entries, going deep into subjects and often pointing out unexpected behaviours and intricacies that are quite important (or at least, interesting) that many C# developers don't know about. His experience working on the C# Language Design team often provides insights into _why_ things are the way they are in C#. Of all the C# related programming blogs out there, his is one of the best and usually the first I recommend to developers wanting to elevate their understanding of C#. EDIT: Regarding his style of partitioning blog entries into parts. Sometimes he does a great deep dive into a specific facet of C#. Often starting with a general overview, going deeper, then sometimes looking into corner cases or interesting aspects of it. Usually each part he posts focuses on a single concept or idea and usually provides people with enough information to continue investigating or, at the very least, absorb that nugget of information. Some of these go to upwards of 7 parts; really too much to absorb as a single blog entry. That said, he also has a tonne of single-entry blog posts too. Point is, he splits big topics into multiple entries for a reason. (For example, most of his entries on [conversions](http://ericlippert.com/category/conversions/) are single entries)
One work around might be to have a dummy process beneath your virus that just has the life cycle of playing your sound. It will pop into the audio mixer while playing, but should leave once done playing.
I am going with the whitelist idea .. blocking everything except a few attributes, such as STYLE and HREF.
Here's a blog post describing major changes compared to previous version: http://blog.jetbrains.com/dotnet/2015/04/08/meet-resharper-9-1-resharper-c-1-0-dottrace-6-1-and-more-resharper-ultimate-product-updates/
This AddRange is probably what you want. The HTTP Server has to support it. Check if the HTTP Response has a "Accept-Range" header. This, for example, can let you open up a 2.5 GB audio file at a specific offset via an HTTP Request, and say grab the next 2k bytes. With IIS this support generally works when serving any sort of static file system object. PDF's generally do this automatically. If you open a very large PDF, and then jump to the 500 page, it doesn't load 1-500. 
Since this is in the CSharp sub, i'm going to assume .NEt is in play as well as MS clients... You could rely on MSMQ. The down side is configuring the local machines MSMQ. It's not always installed as port of basic OS installs. But if it's a corporate environment, you may be able to push out the MSMQ install, or enable it, then setup local queues that subscribe to your queue. You'd get guaranteed reliability and all the comes with MSMQ, but it's probably over kill for a simulation. 
We've included support for C# 6.0 'nameof()' operator since first 9.1 builds, maybe you were using R# 9.0 build. If not, please, report specific code context where 'nameof' is not recognized correctly. "Gathering suggestions" popup in VS2015 also should be fixed in 9.1 RTM build.
I assure you the add revenue wouldn't even buy a cup of coffee most days. I run ads solely to cover the cost of hosting. 
Awesome! Thanks! 
Thank you for your response. I know I should return true for CanExecute but I'm not sure what the best way would be to actually detect changes on multiple fields of an instance. Do you mean I should make a copy of the selected customer at the start and make a comparator to compare the initial one to the current (possibly modified) one whenever text is entered in one of these fields?
Allright. The boolean sounds easy, I was just wondering whether there was a cleaner way to do it. Thanks a lot! Any cleaner ideas are always welcome! I'll stick to the boolean for now.
".." means up one directory. "." means current directory. I would also look into using the System.IO.Path class for working with paths in dot net. Path.Combine() will automatically add the correct slash between folders for you. It's really helpful. 
I've used it before, it's deceptively simple. 
Can I post a job posting that I'm trying to fill? I'm not a recruiter and I'm having a hell of a time finding qualified candidates. 
Not sure if this has been discussed in length here, but I am really excited about this C# 6.0 feature! I can already feel the code length decreases as a result of this! What's cool is that you can chain the operators together, and combine it with the null-conditional operator to act on the result. For those that don't know - this feature will help replace null checks, which seem to flood large codebases. For example, you could turn something from: int? myCount; if ( (foo != null) &amp;&amp; (foo[0].bar != null) ) { myCount = foo[0].bar.Count(); } else myCount = null; Into: int? myCount = foo?[0].bar?.Count(); 
OpenSource alternative: http://bridge.net/
&gt; Not sure if this has been discussed in length here I'd say it gets posted every two days or so :p
Thanks, that was a good idea :D
I'm not sure how exactly you've got it set up, but the easiest way should be to just pause one while the other is active, no? Are you still asking in regards to the files when the service was off, or did you solve that already?
There is no silver bullet here, sorry. You have to compare selected object to a copy some kind of clone. Something has to keep track of its original state. I'm assuming your viewmodel is a single object in that window you showed, also assuming you're setting viewmodel at constructor; you can make copy of it at constructor as well. Also make sure you do proper INotifyPropertyChanged where it triggers only when it really changed and not when you change property to same value, just make it smart. Also, do consider when you want to trigger for change, you can tab out (lose focus) or after typing every character. Please let me know if you need more help, i live and breath mvvm and wpf at work.
I tried this but all my streams began from the start. I tried multiple sites. Thanks though.
Top shelf is the best Nuget package in existence. It has saved us untold hours of development time
You're over-thinking this. This question you should be asking yourself is: do you trust Win32 file IO APIs to work correctly? If the answer is, yes, then trust file locking to do its job and give one thread of execution exclusive access. So in **both** processes just put this code: try { using (FileStream lockFile = new FileStream( path, FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.Delete)) { // Primary Logic Here File.Delete(path); } } catch(IOException potentialBlocking) { if (potentialBlocking.HResult == -2147024864) { // Blocked by another process } } catch(Exception otherExceptions) { } If you don't want to delete it after then change FileShare.Delete to FileShare.None. One theoretical limitation of this code is that another process could run File.Delete(path) with the FileShare.Delete set, so make absolutely sure you put File.Delete() inside of a using statement every time to make sure that that process has exclusivity on the file (the using(FileStream) is what assures exclusivity). Another way of accomplishing the same thing is in both processes call File.Move(path, Path.Combine(tempDirectory, guid) (var guid = Guid.NewGuid()), and then after it is moved do your other logic. Since neither the watcher nor timer are monitoring the tempDirectory, files located there are unmolested and only a single process knows what GUID the filename now is. However if your process gets terminated mid-cycle (e.g. power-loss, maintenance) you can wind up with orphans in the tempDirectory, so I wouldn't recommend this route (or would employ strict monitoring on tempDirectory, or on startup check it for orphans). Last alternative I have is to use a mutex lock or simply a lock(object). bool ok; System.Threading.Mutex m = new System.Threading.Mutex(true, "SomeNameForMutex", out ok); if (!ok) { Logger("Already running"); return; } GC.KeepAlive(m); // Your file IO stuff here. m.ReleaseMutex(); This is a great pattern for assuring your executable only runs once (although add "Global\" to the start of the name if you wish it to be inter-user, however your process will need to run as administrator to use "Global\"). The problem is that while mutex aren't as slow as a lot of people claim, they're still relatively slow and expensive as the mutex actually happens in kernel code (and escalating even invisibly in APIs is expensive). You'd also need to build a lot of these (one per file?) and to be frank it seems overkill. You could also use lock(object) which is like a critical section, but then you're only processing one file at a time(!) which is a horrible bottleneck. It is cheaper than a mutex but frankly that cost difference is microscopic compared to how slow your process will be running them one by one. Overall I'd just trust the file system APIs. It is easier to write, easier to read, and if Windows had an exclusivity race condition bug in it, that may have been found by now as a lot of things would be crashing out. 
The ReSharper team itself uses ReSharper quite successfully on a solution that has peaked at 500 projects. Based on customer experience that we're aware of, using it on solutions with triple-digit projects it not uncommon. Although responsiveness has a tendency of going down gradually as the code base increases, in many cases there's something else getting in the way: other plugins, VCS connectors, VS XAML editor not turned off, R# caches stored on a slow disk. Other times stupid bugs in R# code do a favor or two, that's for sure.
Thank you for your response. I love all the snippets of code! This would actually mean that I'd need a property for each field in the Person class?
Could you just dump the FSW in favor of only running the timer? If the creator of the files is locking them for write, then any attempt to open them would throw an error, and a try / catch block will help you know that you don't have access to the file so that you can just pick it up on the next loop. 
Found this while searching something about PCLs.. enjoy :)
I wrote software that does what you're doing, and in the end, I wrote both a manual scan process and the File System Watcher process. Basically, on start up, I setup a FSW, and then go into manual scan mode connecting to my back end state and determining what new items arrive. After I caught up on that processing, I relied on the FSW for any 'new' items, and processed them. Also, i'd use MSMQ to store your 'processing queue'. You want to be able to push messages into the queue reliably and have them survive power outages and resource outages. MSMQ does all that for you. You can wrap your operations in transactions ( enable Distributed Transactioin Coordinator) that also deal with file operations. If you are allowed to, consider renaming or move files once they are processed. This operation should be done in a transaction along with pop'ing the file's record off the Queue. If you aren't allowed to touch the file system, then make a new queue or SQL table that tracks what you finished processing. Again, make sure any updates are part of a distributed transaction that involve all aspects of your operation. Drop the system timer, that sounds like it's destined to fail. Also, you want your file processors to be based on a BackgroundWorker or Task type pattern. I think I wrote a [thread pool manager class,](https://msdn.microsoft.com/en-us/library/3dasc8as.aspx) and reused threads from the pool to process the files. I ended up tweaking the pool sizes as we kept upgrading hardware. Also, when developing a C# Service, start with it as a console app, and test it in that mode. There's some good .Net Service shims that let your project act as a Console app or a Service with minor tweaks. See something like [this](http://stackoverflow.com/questions/2517550/wrapping-a-c-sharp-service-in-a-console-app-to-debug-it). Good luck.
First, gamescene.cs is not a class, it's a file. I'm guessing you have a class in it called "gamescene". If this is the case, I'd advise you use better casing in your naming conventions and go with "GameScene", but that's beside the point. Also, what is "definition"? That doesn't really mean anything to anyone on this board without any context. Is that a field? A property? A method? A constructor? I'd advise sharing your code if you want a helpful answer.
Sorry for that, yeah I have a class in the file gamescene.cs called GameScenein that class I have this: float ballBottom = ballSprite.BoundingBoxTransformedToParent.MinY float screenBottom = mainLayer.VisibleBoundsWorldspace.MinY + 50; Now I want to use this to change the activity: if (ballBottom &lt; screenBottom){ StartActivity(typeof(Activity2));} however I can only do that in the MainActivity class. so I wanted to use: if (GameScene.ballBottom &lt; screenBottom){StartActivity(typeof(Activity2));} But than it tells me that MainActivity does not have a definition for ballBottom and screenBottom
Any VirusTotal Scan please?
Im not sure what you mean
ah, there: https://www.virustotal.com/nl/file/a1f3b68ed5a6a9f8a986590becba860adeda4624a1d2434c8e48b324dac41328/analysis/ Avast kept telling me my own program was a virus, but the other AntiVirus dont think so
Avast keeps thinking that ALL of my Visual Studio project are viruses. Ok, then I will download your file to VM and try to test it. Can I decompile it? It will make cracking easier. :P
BFS is for binary trees. Why not an [A*](http://www.dotnetperls.com/pathfinding) search?
You wouldn't. Hyper-V is a requirement for the WP8.1 emulator.
But.. why wouldn't they include in standard Windows?
Why would they? It's safe to assume that every professional environment is using Windows Professional, and not Standard edition. And most people don't need any virtualization capabilities.
More accurately, a professional version of Windows is the prerequisite. HyperV it can install for you if the version of Windows allows it. It's worth baring in mind that you can do an in place upgrade with no issues. 
Try /r/codes It's fun to make things like this, but I want to emphasize that under no conditions should you ever write your own crypto code, let alone algorithms, unless you have a PhD and are working on a team of PhDs, *and* you've had everything peer reviewed several times and subjected to numerous attacks. Even if you think the code is perfect, a side-channel power attack can still reveal your secret key just by listening to how much power each clock cycle of your processor draws with a fancy ammeter, essentially, unless you develop your code specifically to counter crazy attacks like that. The world of crypto is intense.
Edit: Ignore me, I'm wrong. Standard Windows really IS Professional. Windows 8.1 Professional = WinRT (The new interface) + Classic windows (What you had in Windows 7) Windows 8.1 = WinRT (The new interface) Windows 8.1 Professional is what Windows always was.... Windows 8.1 is the dumbed down version.
You haven't used Win 8 have you?
&gt; I was wondering how good it is If you really want to know how good it is - release the algorithm. Good crypto should be open and publicly reviewed (in the crypto community). 
Windows 8/8.1 Core = Standard Windows, and usually referred to without the "Core" term, as in what most consumer users have and it's all they need, so it doesn't include the more "commercial" features, like Hyper-V Windows 8/8.1 Professional = Professional Windows, as in the fully featured version, which is what most businesses deploy on their machines and would include features like Hyper-V Windows 8/8.1 Core/Professional with Media Center = The indicated Windows version, just with Media Center installed Windows 8/8.1 RT = A version of Windows designed to run on ARM devices. It's incapable of running traditional PC apps without an emulator. Metro/Modern UI = The "new interface" that you keep referring to. There is no "classic" Windows available in any version of 8 or 8.1. They all use the Metro design language, although 8.1 did bring back some features associated with the classic UI, such as the Start Button (although the Start Screen remains). In Windows 10, Microsoft is bringing back even more elements of the classic UI, just better integrated with the Metro design. Hopefully this clears up your misconceptions about Windows versions.
the password changes the way it is encrypted yes. Thanks for letting me know on the obfuscator tip btw :)
Alrighty then.
&gt;This is the version which has all the features they are used to from Windows 7. Yes, Windows 7 HOME PREMIUM, which is what is installed by default on most computers ordered for the consumer market. Windows 8 Core is the successor to Windows 7 Home Premium Windows 8 Professional is the successor to Windows 7 Professional Windows 8 Enterprise is the successor Windows 7 Enterprise Microsoft did away with the "Ultimate" version, since Windows 7 Enterprise was the exact same as Window 7 Ultimate, with the only difference being the licensing scheme.
I have Windows 8.1
But that's completely wrong. You're mixing up the "standard" Windows 8.1 build with Windows RT, which is a locked-down Windows for ARM that only runs WinRT apps and a few Microsoft desktop apps including Office. Windows 8.1 "not professional" has a full desktop and can do anything Windows 7 can do.
Your executable still isn't runnable, though.
Because the standard edition is considered for personal home use, while the professional is more of a personal business edition. Hyper-V is primarily used by people who want to run a few virtual servers, not the average home user.
&gt; There is no "classic" Windows available in any version of 8 or 8.1. They all use the Metro design language, although 8.1 did bring back some features associated with the classic UI, such as the Start Button (although the Start Screen remains). The standard desktop UI is still there, and when my laptop starts that's what it goes to by default... 
What's interesting is that VMware is capable of running HyperV and child VMs. But that's not surprising since it can also run VMwares own ESXi inside a VM.
As someone suggested, you'd need to upgrade pack, which appears to be US$99, to upgrade to the Pro version of Windows 8.1. Another option is to buy the cheapest Windows Phone device you can find (there are some pretty good deals around) and just use that. An actual device is much better than the emulator, but you miss out on being able to change the screen size/resolution and RAM and taking easy screenshots. EDIT: Another option (with caveats) is to get a Windows 10 Tech Preview upgrade. Totally free, and you get the pro version. However, it's not advised (or supported) to develop on Windows 10 due to a lot of bugs and potential issues. You must be very careful with your data. And also keep an eye on the different builds and known issues. For example I can't get Visual Studio's XAML designer to work in the current build (I had to downgrade to 10041 to solve that issue). It's a free, albeit risky, option.
Have you ever tried www.dreamspark.com? I used it when I was getting my CS degree, and got a bunch of Microsoft software for free. 
Sorry no experience here. But I'd probably try to generate 10 200 page documents and see if there was an easy way to stitch them together. 
I remember trying to use that library for a project, but it didn't meet my needs so I can't really help on performance issues. One avenue you might consider is using Office's [Interop](https://msdn.microsoft.com/en-us/library/microsoft.office.interop.word%28v=office.15%29.aspx) libraries. They recommend you don't use it for server-side automation, but I did. Another downside of that approach is that you need a copy of word on whichever system your program will run. All that said, performance for that would be as fast as word can do work, so it *might* be worth looking into.
Uh, .NET libraries are all usable in C#, because software written in C# runs atop .NET.
It's the same reason you don't have Remote Desktop or the ability to attach to a domain server. Microsoft reserves these capabilities for the Pro version of Windows.
Lumia 520 is only $50. I have one just to test on.
Thanks for the reply but I do have to use Breadth-first but so far I'm having problems understanding all this stuff about graphs and trees. "I'm not quite sure what a bidimensional array maze is, but I'm guessing it's a boolean matrix" Yes it's what I meant more or less, where you have a matrix where walls and empty spaces are represented with booleans or numbers and the target is to move from point a to b in the shortest possible path
Not familiar with what you are doing but just looking at your code I would define temp players and players outside of the foreach loop. 
then Dijkstra is what you're looking for, take another look at the code and notice that it is BFS, with the slight alteration of ordering the children node by current distance.
Yeah, that's how I got visual studio
However, VMware will flip shit if HyperV is installed on the same platform as their hypervisor. Has grown quite irksome in recent history. 
Indeed. They can nest, but not coexist.
Depending on what kind of agreement your school has made with a microsoft vendor, you should be able to download (or at least acquire a key for) windows 8.1 professional. Dreamspark (earlier known as msndaa (it might still exist tho)) is a great way for development and learning about Microsofts complete ecosystem. Just lurk around and you should find a lot of stuff you could use later on in life (i still use keys from my time at the university).
I am with you, i have been working with C# for around 2 months now and have not even touched the web dev tools, i have just been touching the windows forms application tools.
I think you can just say _temp_players.Players.Add(player) Also, you may be able to deserialize directly to player and save yourself some code Quick edit: I think what you are doing is defining a new set that isn't tied to the data context in any way. If you pull the set out if the context directly, EF change tracking will be able to do its job. 
Hard to tell without seeing more of your EF code, but judging by names, is it possible that DataFetcherDBEntities() is returning a read-only context?
Well, WPF is the basis for Silverlight, so, um, the Netflix video player (unless you're running IE11 under windows 8.1, which runs html5)
Assuming that DataFetcherDBEntities() is your implementation of DbContext. You don't need to get a new Set&lt;T&gt; like you are doing with *var players = _temp_Player.Set&lt;Player&gt;();*. Instead you could use the Player DbSet again assuming you defined the Player DbSet within your context. Like so... _temp_Player.Players.Add( new Player() {...}); _temp_Player.SaveChanges(); It would be helpful to see your DbContext implementation. One more thing to note, is that if you duplicate the Id you will get a unique constraint violation as a record with that Id will have already been inserted into the database. I would recommend checking to see if a record with that Id exists already, and if so, you will need to attach the player record to the DbContext instead of Add. I hope this helps. 
There's no support for WPF browser applications outside of IE. Even then, I don't think Microsoft even supports it anymore. Its as abandoned as silver light. 
I don't have Professional because I don't feel like throwing money at MS for artificial reasons. Microsofts own comparison page doesn't mention anything like this. It just says that Pro has Bitlocker (if I wanted to encrypt my disk, I wouldn't use something backdoored to do so), the RDP server and the ability to join a domain. Those three features are apparently worth $80. There's still the root issue, you need to care for the casual first time developers who won't feel like shelling out money for something that might end up unnecessary. Of course, someone who knows that you are going to need Hyper-V, and knows that it needs Professional, will get it, but that's not the point.
There are a few projects attempting to bring xaml to the browser. * [Fayde](http://wsick.github.io/Fayde/) * [CSHTML5](http://cshtml5.com/)
This did help and I am getting the violation. Every player has a unique id, so I don't understand why I'm getting it. Will need to look into it more.
In my experience, anything that compiles to cross-platform support (which WPF is) is going to lose hard in some aspect. Lately, there's been a growing trend in the mobile space for this, since everything has to get ported from Android to iOS. Some of the results are good, but you're always sacrificing some performance and the natural look and feel of the platform. For WPF, the web porting really isn't a noteworthy feature. They were smart enough to make it work well for desktop apps, and everything else is white noise. 
*the* Android. *the* iOS, *the* Windows Phone... O_o
The setup of excel is exactly what i was thinking, and the sum would be calculated by the click of a button after all numbers are typed in.
 CurrentList, NextList counter = 1 add starting square to current list while you haven't found the exit for each square in the current list mark visited with counter if unvisited neighboring square add to next list counter++ currentlist = nextlist nextlist = emptylist when you've found the exit: best path = add exit while not at entrance add lowest numbered neighbor to path go to lowest numbered neighbor's square Something like that.
I would not recommend using WCF unless you are dealing with an external application (outside of your control) via a SOAP interface. If you want to make remote procedure calls directly you can also go this route. I do recommend looking into message queues such as zeroMQ and activeMQ. There are probably a dozen other decent ones too. These simplify the low level socket details considerably, and let you focus on the communication patterns such as request-reply, publisher-subscriber, etc. A third option is to use REST. Let HTTP handle the low level socket details. Look into Microsoft WebAPI and clients such as RestSharp. There's very little reason to mess around with low level sockets these days, unless you plan on developing a higher level framework like some of those that I've mentioned. You'll just end up re-addressing socket/network problems that have already been dealt with in the higher level frameworks.
The pros come with 8.1 pro.
edx is doing c# course at the moment.. 
We'll that's an annoying bot. It's going to key off of "Define blah". No nomenclature namespace collision with that.... 
ESL bro
Just dive in with Visual Studio and some source you find on GitHub. Easy as hell to learn
There's a subreddit for people taking it as well. Let me see if I can find it... Here you go... /r/EdX_CSharp/
I'd agree, I just got a job using .NET and C# a month ago after mostly only using Java. It's different but approachable from a Java background. 
This is something like you're looking for. I am adding the controls manually, but you can just drag and drop them. To make this run, simple create a new project and paste this between the namespace braces, and hit ctrl-f5: public partial class Form1 : Form { public Form1() { InitializeComponent(); } DataGridView dgvSum = new DataGridView(); private void Form1_Load(object sender, EventArgs e) { this.Width = 300; this.Height = 550; dgvSum.Width = 205; dgvSum.Height = 500; dgvSum.RowHeadersVisible = false; dgvSum.Columns.Add("number", "number"); dgvSum.Columns[0].Width = 200; this.Controls.Add(dgvSum); Button btnSum = new Button(); btnSum.Text = "Calculate"; this.Controls.Add(btnSum); btnSum.Location = new Point(dgvSum.Location.X + dgvSum.Width + 15, 0); btnSum.Click += new EventHandler(calcClick); } private void calcClick(object sender, EventArgs e) { ((Button)sender).Enabled = false; // Add this so the button can only be clicked once. double theSum = 0D; foreach (DataGridViewRow dgv in dgvSum.Rows) { try { theSum += Convert.ToDouble(dgv.Cells[0].Value); } catch { dgv.Cells[0].Style.BackColor = Color.Red; //This is just lame validation, doesn't add anything unless it is a number } } for (int i = 0; i &lt; 3; i++) { dgvSum.Rows.Add(""); } dgvSum.Rows.Add(string.Format("Sum is {0}", theSum.ToString())); } }
http://programmers.stackexchange.com/questions/32385/switch-from-c-to-java-which-gotchas-i-should-care https://msdn.microsoft.com/en-us/library/ms228358(v=vs.90).aspx
I'd watch a few C# courses here: http://www.pluralsight.com. There's tons of Microsoft (and misc) video courses on there. It's worth the monthly sub. Find out if they're using ASP.NET Web Forms or MVC and watch some courses on that. Also if they're using a Javascript framework figure out which one and watch some courses on that as well. 
You won't have any issue transitioning between java and c#. The first place to start is to [download visual studio](https://www.visualstudio.com/en-us/downloads/download-visual-studio-vs.aspx).
And the Google-Programming paradigm :p
What "Microsoftisims" are you referring to? Otherwise you're just trolling. Look at the background of the guy who created C#
I agree the course outline almost looks like it was meant for someone without much previous programming experience.
Tons of free stuff online, but there are many great paid sites that have great content that sometimes you can't find for free, and if you do, sometimes they skips steps. http://www.pluralsight.com/. They have a 10 day trial at the moment; soak up as much as you can. And as others have mentioned, ms virtual academy is also great. Also, are they using asp.net webforms or mvc? Check out http://asp.net for tons of great start to finish tutorials. 
That's what I was worried about. They initially said it wasn't for beginners but then I looked at the curriculum... Pluralsight IMO, is the best way to learn c# (along with just coding stuff in general), there's like 20 videos from beginner to advanced.
If you already know Java then learning C# shouldn't be an issue. If I were you I would start looking into ASP.NET MVC because that is most likely what they will be using and it is a little tricky to understand at first. There is a free version of VS Express for web that you can use to practice with.
Last few C# guys I've hired have generally come from [StackOverflow] (http://careers.stackoverflow.com/). I do look at their posting history. You can also throw in with a "broker". Most IT Brokers are really just old Recruiters that essentially sell the client a package of people for a project, and take a cut of the rate. I still get calls and e-mails from "IT Recruiters" who really just rent you to a client and take 15% off the top. This is pretty common in NYC/Banking/Trading systems.
edX has Microsoft course running right now
I'll stick with it for two or three more weeks then I'll decide if I'm going to continue or not. 
You might want to read this guys [petition] (http://www.reddit.com/r/csharp/comments/306iqc/please_vote_for_the_clr_to_support_collectible/). Here's the [MS Connect issue] (http://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/6120992-support-for-collectible-assemblies). Basically, he hit the same problem you, I and others have hit. I did this as part of a generic game hack about 4 years ago. I would compile and then load the components up a new appdomain to run the logic, and unload it when I was done. Yes, there's issues with clean up, but you can design 'around' that. Maybe even go back to something akin to IUnknown and track references. Obviously it's not a very robust solution unless you put a lot of effort into it. Recently, people seem to think [MEF] (http://mef.codeplex.com/) 'solves this'. I haven't played with MEF, so I don't know. That's probably something you should check out. EDIT: I forgot about [ScriptCS] (https://github.com/glennblock/scriptcs), I meant to include that. It's the obvious "What does Roslyn bring to this table now". I have no idea how scriptcs.hosting handles 'freeing' the memory used by scripts. And what happens when someone's got a reference. 
&gt; Definitely HTML &amp; Javascript Agreed. Silverlight/Flex/Etc existed to fill the gaps that existed in HTML. With HTML5, those gaps have been mostly filled, and the platform grows every day. Say what you will about the relative horribleness of Javascript, it's definitely the path forward on the web at this point. 
Ah thanks.. Pretty new to the subreddit.. Didn't actually notice the links on the right.
never learned something that way. but sounds like a good call. might try it myself. 
I do already have visual studio installed. But haven't gotten around to exploring yet.
That was the main problem i faced when i googled resources. Couldn't find any good ones I liked. I'm a student and don't have the money to pay for stuff. But the 10-day trial sounds like a good plan. Probably find a week I'm relatively free and get as much as I can out of it.
Thanks. Will definitely go through the videos. Just the free ones though. 149 bucks is a little more than I can afford.
I have used Rails for a college course last semester. So i'm familiar with MVC. I'm guessing they'd have the same basic idea.
Gotcha. If you have a .edu email address look up Microsoft DreamSpark, it's a program that Microsoft offers to give students free downloads of Visual Studio Pro and other software. I believe you can get a free 90 day trial to PluralSight from it. 
Seems a lot more beginner than I was looking for. 
Ah.. I didn't know about that.. Thanks a ton.
No, it's just you.
Definitely, its a great language IMO
hey that's a good idea. thanks!
MVC is same everywhere. Visual studio is the best IDE to go about learning .net. It does so much heavy lifting for you that you might as well forget syntax and just think about the design instead.
Need source
You would be better served to script this in PowerShell. You could load the PowerShell modules and code it in c# but that seems like a poor solution. 
Yes, I know. I'll stick with it for a couple of weeks if they pick up the pace. 
Bob Tabor has a great course on C# on http://www.leanvisualstudio.net
In any case Visual Studio community edition is free to download and use. 
What about security? while(true){ client.win(); }
http://pastebin.com/1SmEsXZr That's what I came up and it works for me.
Jumping from Java to C# is easy (some people have described C# as a better Java), and feels like a breath of fresh, wonderful air. Mmmmm syntax sugar and flexibility, linq, delegates, etc. Tbh it's not the language that's going to be difficult, the big hurdles are the libraries and domain knowledge. If you're going to be working with ASP, jump in with both feet. The MVC stack is great these days. 
I'm also a Xamarin dev and having XAML for your view is more organized for me. But you really also have to learn how to do it by code. So it's great that he also presented it by code.
Take a look at Selenium. It's a library for automating and controlling browsers.
With help of another redditor i found problem - apparently OleDBCommandBuilder doesn't work with '-' in columns names, so i changed "Au-50" to "Au50", "Au-40" to "Au40" etc and it worked just fine. 
It's pretty useful for lazy initialisation when thread-safety isn't a concern, although in .NET 4.0+ you should use Lazy&lt;T&gt; instead. public IWidget MyWidget { get { return _widget ?? (_widget = WidgetFactory.CreateWidget()); } }
So I figured out to get it to open...that was easy. The next step I need to do is get a specific link on the page to be clicked automatically. Would you redirect me in the right direction? Also I am using the script task in SSIS which means I can only use C#.
It's also really useful for singletons.
Is logging to a file not an option or something?
Woah, fun read. Learning a lot.
http://imgur.com/fm7ltOQ Grow up.
Then your TextBox idea would be a good way to go. You could limit the number of lines it stores so that it doesn't hog memory. You could log everything to a file in case you need to review something. You could even tell the application to load the file to read it in realtime.
Yeah making fun of me for something completely unrelated to anything that was going on at the time and I'm the asshole right?
you're not entitled to shit 
I don't deny any of that but it had nothing at all to do with anything at the time... Channel just used it to make fun of me because they're all assholes hence my gif
Generally, if you 'bracket' the column name ( or any DBO object, table, user, etc) you can have dashes and other things in them. IE, "[AU-50] is a legal SQL table/column name. I don't have the time to test this against Access via OleDB, but give it a whirl. 
Yeah why I bother anymore is beyond me... Not like its human nature for anyone to help another person...
Make sure your file is being properly closed the first time. Are you Creating it the first time, and only opening it for append the second time? Check your FileMode parameters. Also, there's no such thing as a "Write()" command. My guess is you are talking about a Write() method, but on what class. I'm going to assuming a BinaryWriter class. Really, though, questions like these don't help us help you. Go to https://dotnetfiddle.net/ and paste some example code. Even if it doesn't work. Then atleast we can go look at it, adjust it, and paste you back our recommendations. 
Yes, you do seem like an asshole.
Do me a favour: get lost
Now you seem British ;)
&gt; There is a reason why MS AppStore is filled with crap, and the phone platform is basically dead in the water, and that's because of shit like this. More inexperienced developers wouldn't raise the quality of the store, more users would.
So no one has tagged a single post since you stickied this. I guess no one's buying into the new system?
I've always used a listbox instead of a textbox for logging in winforms.
Apologies for the delay; we're in the middle of setting it up (both the tagging and filtering) on a private test subreddit. We wanted to leave enough time for commentary. Perhaps we'll just release the tagging now early this week and implement the rest of the filtering this weekend.
Actually you can set bindings with much less code than you wrote, you can set a binding in only one line in C# using: myText.BindingContext = DataObject; myText.SetBinding (Label.TextProperty, "Name"); You can even discard the first line if you set the page binding context (it's very common). As you said, you can have dynamic content if you use c#. I think that is very personal and we should try both to see which one is most suitable for our teams. I also expect what we will have a Forms interface builder soon, so in this case, build the controls with XAML will be awesome.
I thought you were just being goofy. :P
For a card game the best way is probably WPF. It has Image control that accepts PNG, BMP and JPG formats and allow you to make any kind of affine transforms for animations and stuff.
I love it. Helpful feature. I used it on Module 3 assignment. ;)
As I continue to learn I find I have DotNetPerls open all the time, it's indispensable. Short, sweet and to the point.
The commands just have to occur somewhere in the using block for reference purposes, which includes nested usings. No different than nesting try/catch/finally blocks, which is what it's doing anyway.
Start with a WPF, then add all the picture to your resources folder. Then you'll be able to change the picture to another card when the user clicks on a card. 
It's a known issue in a unreleased piece of software, and the link has already been posted here before less than a month ago. edit: It's even marked 'up for grabs' so instead of karmawhoring you could actually fix the issue instead.
How exactly should I do it?
Yeah we just suck I guess. We don't deserve to live because we don't use version control and all that... Suppose we should just kill ourselves because how could we even dare to try making money by developing software if we don't use version control
Have you checked the raw response in hex on wire shark to make sure it's actually ASCII / plain text? The easiest way to check would be looking at the hex, all you need to do is match a char to the content you're reading.
He just left out the brackets, otherwise it's the same pretty much. There is a convention that indentation can be left out when nesting multiple using-statements.
Using, If/Else and similar constructs work on either single statements or blocks. Personally I prefer dropping the curly braces and 1-2 "wasted" lines when I can, I think it looks a bit cleaner. I know there's a lot of disagreement on that point, though.
Oh my hell would you grow up? "making fun of me" - how childish. Perhaps if you focused more on solving your technical issues and less on reliving your childhood you would be a happier person.
I WAS focusing on solving my problems... Do you know how long I was googling this problem? Do you know how many hours I had been trying to solve it? Do you think that the conduct of the people who I was asking for help was professional or helpful at all? When you go to ask your boss for help on a problem that's got you stumped, does he regail you for an hour about how much of an idiot you are and how he can't believe you get paid for what you do? No. So why should I have to tolerate it online?
As far as I can tell the filter settings are just made visible using JS, but not *created* with it. They're in the source, look for the DIV with the id "filters".
Yeah, there is this form with id="myform", but it doesn't return any child nodes.
foreach(Type t in typeList.Where(x=&gt;x.variable == somevalue)) {}
With the caveat that I don't perceive any tiny and complicated technicalities in C# (as contrasted to C++), many folks talk about Smalltalk as being the purest of OO languages. Maybe you'll find that more to your liking.
Do you have any particular examples? It's hard to comment otherwise. I think getting your head around most of the SOLID principles, and more particularly encapsulation, inheritance and polymorphism are a good start to OOP. Have you had issues where C# doesn't implement any of those concepts correctly?
Could you provide some more explanation on what you find inelegant/messy about the C# syntax?
Make sure you include the "`using System.Linq;`" directive at the top of the file. Doing so exposes the `.Where` extension method. (Also, make sure you assign a value to your `typeList` otherwise it won't compile due to an uninitialized variable) EDIT: And you're right, `Type` being a struct is inconsequential here.
&gt; The "// do the important stuff here" code should be setup a way where its thread independent so you would have no need for anymore locks. Im in a WPF application context. Would something like this solve it if I called it after something is added to the queue: this.Dispatcher.Invoke( () =&gt; { ProcessObjectFromQueue(); }); I really have a lot to learn about threading and it makes all sorts of confused. :D Also my Process function is in the WPF ViewModel, so calling the Dispatcher would be awkward.
Could you name some of those "tiny and complicated technicalities"?
You don't need to lock anything on the ConcurrentQueue, because it is fully thread-safe. It manages concurrent access internally so that you don't have to.
All of them.
WPF
Congratulations on making my skills look bad ;)
There is no singular method of doing this across the platforms. If _you_ require this, I would suggest researching it and attempting to implement the right-click behaviour per platform. If you have an issues implementing it for a particular platform, I would then encourage you to post to an appropriate forum to fix it (Reddit, StackOverflow, Unity support forums, MSDN forums, etc.)
should xpost to /r/programming
Already posted it there :)
Within the windows explorer 
Here's a tutorial how to add entries to the registry to open files with a custom application. http://www.howtogeek.com/107965/how-to-add-any-application-shortcut-to-windows-explorers-context-menu/ You can follow the directions to add an entry for jpegs, and update your WPF application to take a command line argument and do something with it. To access the command line arguments in WPF, use the [`Environment.GetCommandLineArgs`](https://msdn.microsoft.com/en-us/library/system.environment.getcommandlineargs%28v=vs.110%29.aspx) method.
I dont know how to do that. :( 
I get the same error after adding [STAThread]
Very nice. 
If you're working with Winforms, one easy way to get started with graphics is by using the System.Drawing namespace. It is relatively straightforward to create an instance of the Bitmap class and set its arguments (the location of your card image, for example). You can then access the bitmap object's methods or create events to manipulate it as your game progresses. There's a simple bitmap example on the MSDN site to get you started, search for 'c# bitmap class' and good luck.
If the OP is only ever going to have two values, it looks like they'd be the best off using a List&lt;KeyValuePair&lt;string, int&gt;&gt; as their container (or a Dictionary&lt;string, int&gt;, although Dictionaries don't sort so that would be problematic unless you only needed to sort them for one function or something). Looking at the data, it also seems to me that what you *are* looking for is a dictionary-type setup wherein you will be periodically updating the high score list based on a person's inputted initials. The StackOverflow answer below ought to lead you to "sorting" a Dictionary when you need to do that: http://stackoverflow.com/questions/289/how-do-you-sort-a-dictionary-by-value Otherwise, do these values have to be accessed as strings? Are you (to the OP) pulling them from a file? If that first number is going to be an int all the time, I would cast it as an int from the beginning and enjoy the advantages of type safety. If you think you might be adding another variable to the array, by all means create a struct as the first guy said to do, but if you're not, there's not really a need to create a more complex structure for your data than what's absolutely necessary.
The code looks good. Just as a datapoint for you, I quickly created a project in Visual Studio and tried the snippet and I don't hit any exceptions and it updates the clipboard content as expected.
You might like [this](http://blog.codinghorror.com/your-code-oop-or-poo/) article.
Very nicely written! thanks. :)
There is one glaring thing that stands out to me that no one else is mentioning. You're a newb/idiot, it seems that your problem lies somewhere right in there. With that being said, I am only joking with you :P , I hope you get your problem taken care of, happy coding :)
Stop what you are doing and buy a copy of .NET Framework Design Guidelines. That will explain far more than you can get from random forums and blog posts.
That's not what STAThread does. STAThread sets the [COM threading apartment](https://msdn.microsoft.com/en-us/library/ms809971.aspx) to a single threaded model. It only matters if you use COM libraries which OP doesn't.
There is no official release date for C#6. There is no official release date for Visual Studio 2015. If you get frustrated after 5 minutes, then you should work on your patience.
I notice the only message you have replied to in this thread is a link to an eight year old blog complaining about OO mechanisms, rather than people trying to assist you. I assume this was just a complain thread, rather than any genuine attempt at enlightenment? I'll take the bait anyway and comment on some of the points in the blog: * Productivity tax - the example given is fine until you have quotes or other markup significant characters in your strings (think '&lt;' or '&gt;') in which case you're going to have to handle that in particular. Alternatively you can use the library methods. This really isn't a problem with OO per se anyway. * Object-Relational Mapping- I think these days most ORM's are good enough to allow you to be moderately ignorant of your persistence mechanism most of the time, especially with Linq included. * Inheritance Hierarchies - agree with this point, the biggest weakness of Object Orientation is how easy it is to get into complex hierarchies IMHO. This is why you should favour composition over inheritance. * Having only one class implement an interface - wait until you start automated unit testing where you want to mock your dependencies, and you'll see the strengths of having dependencies sit behind an interface which at the outset looks like extra work for no benefit. One of the main strengths of OO principles in my opinion is how objects mostly translate well from models to code. For a probably overworked example, if I am modelling a requirement for a customer wanting to withdraw money from a bank account, my model will probably include Customer, Account and Transaction, and I might include behaviours such as Account.Withdraw etc. There is a reasonable mapping between the attributes / behaviours of the model and the actual code written. It appears you are a student and some of these concepts are difficult, after 20 or so years of developing in OO languages I feel only now I have grasped them, and to be honest maybe that is part of the problems with OO. 
This is a really good and detailed answer, TIL about the 'pit of success'. Thanks.
I also learnt Eiffel at uni many moons ago, which was good (academic) language to start on. Maybe worth a look too, OP? Not sure how many jobs there are for it, but if OP is interested in learning the OO paradigm....
Even a 524.288x524.289 version, let's not get too crazy.
If you have MonoGame installed it should work. If it doesn't try readding the MonoGame DLL's as references. Edit: http://imgur.com/yjbw7EA shows an example
But the map is already there... the perfect game... for the next 42 years.
That's very cool! The damn scaling site doesn't tile entirely correctly...... buggers. 
There's a good chance that we'll know more come the Microsoft Build conference on April 29 - May 1.
I store 8 pixels per byte (because 1 byte = 8 bits). I do this by using bitshifts. https://github.com/devedse/DeveMazeGenerator/blob/master/DeveMazeGenerator/InnerMaps/BitArreintjeFastInnerMapArray.cs
There are race conditions in several places. Concurrent collections are only useful if you don't need any external things synced to it as well, otherwise you might as well protect the entire code with a lock, and use a regular collection. So: Use locks, but lock around all the relevant logic. Then all queue calls will be inside locks anyway, and there is no need to use a ConcurrentQueue.
You're adding `op.PreviousSibling.InnerText`. `InnerText` is of the type `string`, so you're adding *strings* to your items collection. In your second code snippet you take the last element of your items, and cast it to `ComboBoxItem`. But... you added strings. You're trying to cast a `string` to a `ComboBoxItem`. This won't work, this will cause an `InvalidCastException`. The exception states this clearly. Solution: Either add instances of `ComboBoxItem` to your items, or cast to string.
Compensation is top notch. That isn't the issue.
I second this, it sounds like you're getting entry-level applicants because you're giving entry-level pay.
You just gotta read the error message. ;-)
See my edit. I assure you that is certainly not the case.
The point of *this* post was to just make sure it was okay to post the actual position. I wanted to be respectful to the community here. Here is the post: http://www.reddit.com/r/csharp/comments/32of7m/job_postingboston_im_trying_to_find_a_fulltime/
Sounds like a good position sadly I'm not in Boston or America but I wish you the best.
Thanks! =)
I'm having a hard time finding a developer with a subset of what you need in the Boston area. Did you have any screens that were close on communication but didn't have the stack experience you needed? We don't need a full stack like you have, so can you send me anyone from your list that had wpf? 
Maybe your expectations are too high? The industry seems to have moved towards developers either doing backend or frontend development. Its not like 15 years ago when you could easily do both back and front end, there's just too much for any one person to know these days. You're probably finding "jack of all trades, master of none" developers. Might try splitting the job into two positions. Just my $.02.
That's a really good point. I am certainly finding a lot of people who can't go deep about any real topic. Luckily this isn't a front heavy position but what I'm mostly finding are people who are clearly not passionate about what they do.
can't you use Array.Sort(highScoreInts, (a, b) =&gt; int.parse(a.Split(',')[0]).CompareTo(int.parse(b.Split(',')[0]))); or something like that?
FYI, Horsepower was added to the UnitsNet project.
If the classes are designed properly, all those using statements are doing is calling constructors that set fields to be particular instances or constant values. They should not be calling any methods on the instances. That is why lining up using statements like this should be fine. `OleDbCommand` is not going to actually do anything with `oledbconn` in its constructor besides set a `private readonly OleDbConnection` field to the instance. Then when you call `.Open()` it is the on the same instance shared with the command. The code in that second instance should actually be this by the way: //make OLE DB connection to Excel file, bulk copy contents into SQL Server destination table using (OleDbConnection oledbconn = new OleDbConnection(excelconstr)) using (OleDbCommand oledbcmd = new OleDbCommand(oledbstr, oledbconn)) { oledbconn.Open(); using (OleDbDataReader dr = oledbcmd.ExecuteReader()) using (SqlBulkCopy bulkcopy = new SqlBulkCopy(sqlconstr)) { bulkcopy.DestinationTableName = tablename; while (dr.Read()) { bulkcopy.WriteToServer(dr); } } } Because `DbDataReader` implements `IDisposable`. In this case the open cannot be moved deeper because the connection needs to be open before `oledbcmd.ExecuteReader()`. It doesn't really matter where the `SqlBulkCopy` using is but it might as well be on the innermost scope. 
[Check out NetMQ](https://github.com/zeromq/netmq). It's basically a [port of ZeroMQ](http://zeromq.org/) to .net. It supports multiple protocols - including TCP, Named Pipes and IPC. (Depending on your needs) 
For the past 15 or so years I've worked for 2 companies both had a relational database backend. When hiring what we found over time was that the primary skill to key in on was the database. If we could find someone that was strong in that they could pick up anything else you throw at them. Adding all the other stuff might be scaring away good candidates because they don't know it. I've never used entity framework, we've always rolled our own, but I could pick it up in no time if I wanted to. I might see that post though and just pass on it because I don't have experience in those extra things. If you keep having trouble finding someone you might try to change the requirements a bit and just put the most emphasis on obviously the language, but relational databases as well. Leave the other things for talking points in the interview. just a thought. 
This looks really cool, I often need to set up simple request/response type communication, but where the overhead of HTTP isn't needed.
I'm with you on that. I also have several job openings at the company where I work, but I haven't even considered posting them here because I don't particularly want this sub suddenly being flooded with job ads. This sub is about C#. Not jobs that may use it.
Telecommute possibility, or are you looking for someone local to Boston? Also, ~~Winforms~~ Webforms or MVC?
List&lt;ISomeInterface&gt;? 
No, you cannot. You could inherit from `List&lt;T&gt;` and _hide_ the `Add` method, but this would be dangerous. Any code that uses that `List&lt;T&gt;.Add` method but has no knowledge about your custom subclass would bypass your custom method. You may need to implement your own basic wrapping class that implements this behaviour. Depending on your usage/context though, the simplest may be to extract the adding behaviour to a separate utility method (perhaps an extension method) which does a standard `if` check, and if it fails, simply doesn't call `Add`. EDIT: Some additional related reading/options on a similar StackOverflow answer: http://stackoverflow.com/questions/1626049/overriding-listts-add
I would recommend revising the beginning of your post to be more gender neutral.
Well, #3 shouldn't result in "I added this thing to the list, why is it not in the list?", it should result in "Oh, it threw an exception when I tried to add this thing to the list, saying that that item can't be inserted."
Thank you for the advice. I will do that now. I generally refer to everyone as "the guys" but I can see how that could come off wrong.
Yes. I don't come here to read ads. There are other subreddits for this kind of thing. Thank you for asking, though, and prompting a discussion about it!
Enthusiasm in general. Mostly for development work but obvious for the industry if able.
That's a great point. Boston is a strong tech hub but candidates at this level are harder to find. I would have hoped that we could pay well enough to attract that sort of talent. Paying up to around $200k for a .NET developer is certainly the high end but we can reach it if the candidate techs out well enough. If there are candidates that can work in the US and are willing the move then we are open to that as well.
That depends on your architecture and workflow. If it can be expected that someone will try to add this odd thing to the list then it should be handled gracefully (an error message or different return type, not in an exception). Even better if you can limit the list to the types it *can* handle, so you get compile-time errors instead of run-time exceptions.
Sure, some kind of notification or prevention mechanism other than an exception is great too. My point is that it shouldn't simply remain silent about an attempt to put things into an invalid state.
Well nobody can be expected to meet every need 100%. Certain things are more required than others. Entity Framework is a pretty standard framework (like nHibernate) for ORM and I would expect to be able to find someone with at least some working experience in it. I like your comments on the database side. The more I think about it, the more I agree with you. Understanding basic conceptional relationships is key.
There is an algorithm for generating mazes that requires only two rows of the maze be in working memory at any one time. You can make a maze that has exactly one path through it, which can be as wide as memory will allow and, essentially, as long as you have disk memory. When I first implemented this in high school, back in the 48 kilobyte Apple ][ days, the means of storage was to print the maze on that endless computer paper they used to have. Of course, back then, I didn't implement a bot to depth-first search it.
I have unknowingly taken your advice. I have been trying to figure out what languages to focus on for a while and decided that I would just focus on databasing for now. I enjoy Oracle and have been taking classes for certs for it. I enjoy many languages and try to stay as up to date as possible on as many as I can but settled on databasing because everyone can use it and I have heard it is a great step off point. Is there much truth to this? Also I spent 10 years in the military in a completely different field and that tends to be the hangup for many potential employers. I just finished my bachelors, do you have any suggestions on additional things I could add to my credentials to make myself more marketable from an employers perspective? Any advice would be more than appreciated.
I suppose that would be something like "Eller's algorithm". Personally I think the Backtrack/Kruskal algorithms generate nicer mazes so that's why I chose those. (Well Backtrack in this case because Kruskal uses too much memory in this scenario)
Certification will definitely help in the Oracle area, and it's a huge help in anything involving contract work. I'd get to know a few headhunters, as they always seem to have contract employment to fill up. They're terrible once you establish a career trajectory, but they will work hard to place you at first if you have the right resume keywords. Database technology isn't going anywhere, and Oracle is always a safe bet for the enterprise world. If you enjoy it, get as deep as possible into it, not neglecting keeping up with other current technologies. As far as post-military career, there are definitely places that would value that (though an equal amount that could see it as negative, unfortunately). The nuclear/remediation industry is a big one, as is radar/military/aircraft companies who hire. Many of those jobs require clearances as well as interfacing with non-civilians, and your service would give you an edge there. In the meantime, just add certifications until something sticks. The best path for traditional students is a co-op or internship to jumpstart years of experience, but if you're starting as a second career, the certification path can open some doors. They're quite meaningless as far as demonstrating you actually know anything, but big companies just search for resume keywords before even a phone screen. If you're pursuing it now, go ahead and put "pursuing ____ certification" on your resume so it can be found on keyword searches. It also may involve moving, unfortunately. There are jobs everywhere, but you may be in one of those areas that just aren't right for your specific career path (I'm in that boat too, actually, but lucked out in my current position). For your background, the DC area and I think the TX/OK/KS/CO area are probably your best bets. Right now I'd take whatever contract work you can get, with a 1-2 year plan to get a permanent job at one of a few companies you pre-select.
swap the dll and you'll get the updates ;)
Yes. As you are debugging, you can watch the SQL being generated as it is sent to the db : http://stackoverflow.com/questions/1412863/how-do-i-view-the-sql-generated-by-the-entity-framework. With your example, as you step over the call to SaveChanges, you will see the Delete statement in the output window.
This is the only sane answer. A method that takes a parameter of SomeBaseType should *never* throw just because the object passed in is or is not a specific SomeChildType. If you need more type information than just ISomeInterface, it might be justifiable to inherit from List&lt;T&gt; with an extra type constraint. public class ConstrainedList&lt;T&gt; : List&lt;T&gt; where T : ISomeInterface 
Entity framework has the concept of change tracking. Changes to the model are tracked and not sent to the database until you call ".SaveChanges()". Think of SaveChanges() as being the method that's going to write all the SQL to insert/update/delete against your database. Also, not sure what version of EF you are using, but consider adding in [EntityFramework.Extended](https://github.com/loresoft/EntityFramework.Extended). If gives you a nice helper method that will let you delete an object w/o querying for it first, like this: db.Users.Delete( u =&gt; u.ID == id); Otherwise, you're performing a Select and then a Delete, which isn't the most efficient way to go about this.
Sure. If you have any objects with foreign keys to User with cascade delete enabled, they will be deleted just as if you had run the query directly on the DB. That is to say, once the SQL has been generated, entity framework doesn't do anything extra besides send it to the db.
Cool appreciate the input and I have considered looking outside of my area because while Iowa is great for jobs in insurance and banking the technologies they use are often old or the requirements for the positions do not match the positions themselves. I actually saw an entry level position that wanted 8-10 years prior experience the other day, it blew my mind. I do love the dc area so I may start there, thank you again!
I ran into this issue myself. JSON is case sensitive. Here's the sorting enum: public enum Sort { New, Hot, Top, Controversial } When used in the sorting for json, it is not made lowercase: linksUrl += string.Format("?sort={0}&amp;limit={1}&amp;t={2}", Enum.GetName(typeof(Sort), sorting), limit, Enum.GetName(typeof(FromTime), fromTime)); Thus you can test it out yourself. ?sort=New is not the same as ?sort=new The latter is the correct one.
That's because LINQ is so easy, you can get 80% of it just from intellisense. 
As I said in my post, no visa sponsorship.
Your post makes a lot of sense. Four years ago there wasn't much trouble finding quality talent but over the last few years things have dried up significantly. Places are paying well to keep their valued employees. I'll be doing about $200k this year as a tech lead and have gotten raises every year I've been here. It's extremely hard to find solid .NET devs and it forces us to try widening our search and employing unconventional tactics (like trying out Reddit).
Yeah ;D Now that I read my question once again at home, it seems more like some kind of troll question xD 
No, no it's not. I understand you likely talked to a lot of people to get your number for the Boston area. I can tell you now, you, like many hopeful employers I have talked to in the last few months, are living in a bubble that will eventually bring reality back to you and your kind. Basically, on average, rates in the New England area are 10-20% below where they should be and no one is interested in offering anything actually competitive rather than handing out a lateral change. If you think there are a lack of good .NET devs you are wrong, I see you posting, I see many like yours every day. I work 30 miles outside of boston using the skills with the experience you are looking for and make more than you are offering and that is the average at this company. Why? Because our CTO understands what it takes to bring people in. After two downturns in the last decade and a half for the tech market most seasoned folks don't care about your location (Boston sucks BTW, you have to pay me MORE to fight the T or rent parking) your break room or the neat cafe down stairs. Nor are we that excited about possible equity share or maybe a bonus when times are good. Show us money, income in my pocket 2x a month that is competitive and I will listen. Until then I will stick with companies that either do understand how this works or contracting which consistently gives me a good rate but you'll never be able to afford to keep me around long. SOURCE: Senior Engineer/Architect using .NET and managed systems (primarily large enterprise systems) for over 15 years.
Before the market failure many of your most senior folks were making close to or over 200k. Four years ago myself and many of my contemporaries were still asking for lower rates as the economy was still in recovery. You see senior folks are smart. We watch the market, we know the economy and we know employers can pay more and just don't want to yet. Hell its such a problem that its a national news topic crossing multiple industries. The thing is I can make 160 just about anywhere at this point, what benefit do I have to work for you? Particularly when I know employers can afford to pay more they just don't want to. Further I know the value of my work and I know what I can get per hour for it ($125-150 per hour, more for niche work) so I am not very inclined to give up huge portions of potential income just for fun and supposed stability. 
Again... not trying to start an argument here. I'm sure you are very valuable to your company and that's why you are compensated such.
Don't be disingenuous, you said 160k, if you read my post you would know I don't consider extras the company can revoke at any time part of the pay. I don't want to make up-to 200k. I want to make 175-185 flat (before the crash many of us were making that + bonus). Keep your bonuses if you want. You start offering good compensation, seniors will start listening. Apologies for my tone, this has actually been extremely frustrating for myself and many of my colleges, a common complaint is that these companies want the moon for skills but refuse to actually pay for it. All the while I work in these companies and still see the sales and marketing teams waste money hand over fist. 
You have yet to provide anything substainal as to why someone with the skills you are looking for would come to your firm over the huge pile of firms that are offering the excat same terms. Terms that a member of the group you are trying to court tells you are bad. You can go around thinking your compensation is correct all day. I say the proof is in the pudding. Can you get people in the door for interviews with the skill sets you are looking for? I am guessing the answer is no otherwise you would not be here. Why is it that when basic econ 101 does not go the way of the business it is the market that is wrong and not the business. I submit quite simply, you cant find the devs you want? You are simply not paying enough and have clearly forgotten some of the most fundamental lessons you had in business school. EDIT: your resolute and steadfast hold to your position without any real discussion is a direct insult to those you are looking to court btw.
I do that too, I just can't find a gender neutral replacement for "Guys". Most people are okay with it, but some people instantly want to murder me. haha
Well it sounds like you must be some of the best in your specific field. This is just a career posting and I don't think offering $160k to a midlevel or senior guy is poor considering I get phone calls daily for recruiters offering me $90k for a "senior" position. I guess we'll have to agree to disagree. I wish you the best.
Your recruiters are not helping you more than just hoping something sticks to the wall for their kick back. Further I am experienced but average. As I said, you want the skills you are listing for a senior you are going to pay more. They are out there, I work with them, we had to pay more than you are offering to get them in. When all employers are offering nothing but a lateral move at the senior level you are not going to find a lot of seniors interested in moving anywhere unless their current job is hell. You are welcome to contine to wear blinders, most employeers do. Hell some of my best gigs come from conversations just like this where the company comes back a year later realizing that I was not asking too much. I was asking for what the work is worth. Good tech is not cheap. In an industry where there are 50x more junior folks than senior, if you want us, you are going to pay. 
I know this sounds like crazy nitpicking, but I feel like there's a difference between "hey guys!" and "we're looking for a guy". I appreciate that you took the time to change your post.
Been considering the same myself but I LIKE Boston. Salaries have recovered better over there though I think that is mainly from the big scandal a few years back where it was shown that companies were colluding to keep the pay down for everyone. 
quick question. why aren't you using a dropdownlist server control versus the regular html control if this is your webform? if you use a dropdownlist control you can access the control in you .cs file. if you need to do some stuff on the front end you can use jquery. http://jsfiddle.net/FadHu/ (from http://stackoverflow.com/questions/3923858/jquery-getting-all-dropdown-values)
Because it's not my website. I'm trying to automate some repetitive and boring tasks. :-)
You're right and I screwed up with my wording. My apologies. 
What are you trying to do?
This is so timely, this is amazingly fortuitous.
"Y'all" works.
Couldn't follow why this entails the retirement of System.Math . Can anyone explain
Have you posted the position on [Stack Overflow Careers](http://careers.stackoverflow.com/)?
Good luck with your search. I just wanted to say kudos for being so upfront with your description. It's refreshing in today's world of tech recruiting. The stuff I get daily is insane. The job sounds very appealing, I'm sure you'll find a good candidate soon. 
This seems like a very strange piece of work. I expected an "expanded math library" to provide things like types and algorithms for quaternions, arbitrary-precision rationals, vectors and matrices. What is the motivation for doing this? 
But when you reach the end of the rabbit whole, its worth it.
To be fair - every employer seems to think this.
If 32-bit precision is good enough, then you can avoid spending an extra 4 bytes for 64-bit double. The issue is that in modern C#, simple operations such as `Sin` only exist as `double Sin(double theta)`; if you have time represented as a float, then you essentially need to call `(float)Sin((double)(time * multiplier))`, which the double cast being implicit. Haven't benchmarked the computational burden of this, but in complicated math (think: a scientific library that extensively uses pow, e, ln, sin, cos, sqrt), the pervasive casts sure smell. tl;dr: What's cleaner? `float.Sqrt(number)` or `(float)Math.Sqrt((double)number)`, with the double cast being implicit?
WCF is a nice idea but I hate the ton of XML configuration required to do the most basic things.
Does X86 assembly support a 32-bit version of fsqrt? 
Sounds like sqrtss.
Thanks. I'm not even the hiring manager technically. I'm just a senior developer on the team. It’s just so time consuming dealing with recruiters. 
Read the tags into XML reader Look for the hidden fields Get data
It's perfectly normal, programming isn't about memorising the syntax for everything, and there'll always be some obscure class or technique that you need to Google even with years of experience. Sure, you'll find yourself having to search for common syntax less and less frequently the more experience you have with a language but anyone who tells you that referring to reference material, Stack Overflow, or whatever when programming is in any way wrong, is an idiot.
Split view? Is this a win forms control or something?
Do you already use HtmlAgilityPack?
I just found it and I have it installed. Looking for some tutorials on how to use it.. 
Except if this is classwork. I wouldn't waste much time on it right now, especially since there's no extra credit for showing off your regex skills. Learn it for yourself though, it's definitely worth it.
I just posted something about this in another thread. Basically, part of being a good programmer revolves around how fast you can source out solutions, example code, recognize the bleeding edge and the over-engineered, and pick a middle path that works best for your project. This is your Google-foo. The longer your work as a programmer, the more specific your search queries become. You generally know what it's called, and where/how it's used, and you just want to see some examples, and well as hopefully a StackOverflow argument over it. There are few times when an employer may ask that all of your code be 'original'. These cases are generally referred to as Clean Room Design or Chinese Wall. In these cases you may have to ask your legal counsel which books you can use to look up things, and which snippets you can use. It's pretty complicated stuff, and I highly doubt there's more than a few hundred programmers in the world do this. That said, never just copy and paste something you don't understand into what you are developing. It's great that it works, understand why, and more importantly, understand why the pattern or architecture of the solution was developed. Also, just because it's on the Internet does not make it great code. I've found that the more junior/novice programmers are more likely to share their code then the senior programmers. So there's a lot of chaff out there. But sometimes seeing how someone does something wrong can help you do it right. 
Would help if you could show us what sort of obfuscation you're finding. Specifically, " media files are hidden in the source code" how are they 'hidden' in source code? Are we talking about just a variable? If your using the WebBrowser control, you can execute JavaScript on the page you are targeting. See [this discussion](http://www.reddit.com/r/csharp/comments/31m0pb/webbrowser_clicking_on_checkbox_and_button/cq395s7). So, you can use InvokeScript to run your own jQuery ( if jQuery isn't on the page, you'll need to load it first, or skip jQuery and do it the old fashioned way) to pull out the variables you need. Your other option is to run a Regular Expression on the source code. Look for **\^[\w,\s-]+\\.pdf$** or whatever pattern inside, and just pull them all out. 
Yeah, isn't that kind of what F# ... is?
Luckily I missed out on that, by the time I was in school I was carrying my text books on an ipad. Sounds like hell though
"In my day, we walked to the computer lab both ways, in the snow, with 40 lbs of reference books strapped to our back!" It does always stagger my mind when I think about how EASY it is to look for some answer online and how difficult it must have been back in the day. Especially before, say late 70s/early 80s, and programming was a slow process of batch processing cards and then waiting for results overnight and then making fixes. The need to be extra careful without instant response to syntax errors, etc....
[Will this page be of help?](https://msdn.microsoft.com/en-us/library/windows/apps/br211380.aspx)
The majority of things like quaternions, vectors, and matrices are already being implemented (with hardware backing) in the`System.Numerics`namespace (see [here](https://github.com/dotnet/corefx/tree/master/src/System.Numerics.Vectors/src) on GitHub). As /u/ItzWarty mentioned, these changes improve throughput. It also allows better interop with most multimedia base code.
After some time you also learn a valuable lesson from the results Google provide. If they are vague, poor, or just does not feel right, it is usually because what I'm trying to do is retarded in some way. Sometimes it is not a matter of finding an answer to your question, but to find an alternative angle to solve the bigger problem.
&gt; If 32-bit precision is good enough, then you can avoid spending an extra 4 bytes for 64-bit double .NET already supports single precision as a 32-bit storage format via `System.Single` so you are not saving space. &gt; The issue is that in modern C#, simple operations such as Sin only exist as double Sin(double theta); if you have time represented as a float, then you essentially need to call (float)Sin((double)(time * multiplier)), which the double cast being implicit. You need to think of this at the level of CPU registers for it to make sense. As I understand it, the CLR JIT only targets double-precision floating point x86/x64 registers because it does not generate SSE code. So those "casts" do not exist in any meaningful sense. &gt; Haven't benchmarked the computational burden of this, So there is no compelling theoretical reason to do this and no evidence that it is beneficial. &gt; but in complicated math (think: a scientific library that extensively uses pow, e, ln, sin, cos, sqrt), the pervasive casts sure smell. Ok. So this is about a perceived smell in pseudocode that bears no resemblance to what is actually going on. &gt; tl;dr: What's cleaner? float.Sqrt(number) or (float)Math.Sqrt((double)number), with the double cast being implicit? So this is about cleaning up the code? 
&gt; As /u/ItzWarty mentioned, these changes improve throughput He said some people think that it might improve throughput but nobody has actually tested that theory. 
#####&amp;#009; ######&amp;#009; ####&amp;#009; Section 4. [**Software**](https://en.wikipedia.org/wiki/Stress_testing#Software) of article [**Stress testing**](https://en.wikipedia.org/wiki/Stress%20testing): [](#sfw) --- &gt; &gt;In [software testing](https://en.wikipedia.org/wiki/Software_testing), a system stress test refers to tests that put a greater emphasis on [robustness](https://en.wikipedia.org/wiki/Robustness_(computer_science\)), [availability](https://en.wikipedia.org/wiki/Availability), and [error handling](https://en.wikipedia.org/wiki/Error_handling) under a heavy load, rather than on what would be considered correct behavior under normal circumstances. In particular, the goals of such tests may be to ensure the software does not [crash](https://en.wikipedia.org/wiki/Crash_(computing\)) in conditions of insufficient computational resources (such as [memory](https://en.wikipedia.org/wiki/Random_access_memory) or [disk space](https://en.wikipedia.org/wiki/Disk_storage)), unusually high [concurrency](https://en.wikipedia.org/wiki/Concurrency_(computer_science\)), or [denial of service](https://en.wikipedia.org/wiki/Denial_of_service) attacks. &gt;Examples: &gt; &gt;* A [web server](https://en.wikipedia.org/wiki/Web_server) may be stress tested using [scripts](https://en.wikipedia.org/wiki/Shell_script), [bots](https://en.wikipedia.org/wiki/Internet_bot), and various denial of service tools to observe the performance of a web site during peak loads. These attacks generally are under an hour long, or until a limit in the amount of data that the web server can tolerate is found. &gt;Stress testing may be contrasted with load testing: &gt; &gt;* Load testing examines the entire environment and database, while measuring the response time, whereas stress testing focuses on identified transactions, pushing to a level so as to break transactions or systems. &gt;* During stress testing, if transactions are selectively stressed, the database may not experience much load, but the transactions are heavily stressed. On the other hand, during load testing the database experiences a heavy load, while some transactions may not be stressed. &gt;* System stress testing, also known as stress testing, is loading the concurrent users over and beyond the level that the system can handle, so it breaks at the weakest link within the entire system. &gt; --- ^Interesting: [^Stress ^testing ^\(software)](https://en.wikipedia.org/wiki/Stress_testing_\(software\)) ^| [^Cardiac ^stress ^test](https://en.wikipedia.org/wiki/Cardiac_stress_test) ^| [^List ^of ^bank ^stress ^tests](https://en.wikipedia.org/wiki/List_of_bank_stress_tests) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cqeiewu) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cqeiewu)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
The K&amp;R C book is still the standard I judge other language books by. 
In the current implementation of the CoreCLR (that means without the PR suggested) `System.Math.Sqrt()` is converted as an intrinsic call to `sqrtsd`. So the above quotes are completely relevant and apply to both the current implementation and the proposed changes.
Yes, that looks like it will! I will go through that tutorial and see if I can grasp the concept and then implement something similar. Thanks!
More like apples and a wooden crate.
you also should use this pattern if your class holds another class which implements the disposable pattern. I am really not sure why this guy used Cleanup() either. 
I disagree. Either way. You do not have to use xaml for wcf at all. You can do everything in code.
You accidentally WPF'd.
Fantastic! Thank you very much for pointing it out. So much stuff out there these days that it's hard to keep up 
Lol. I'm that old guy now. That's depressing.
I'm struggling with some of these examples. What's the minimum code I need to get this one to work? var foo = ObjectExpression.New&lt;IFoo&gt;() .With(o =&gt; o.A, () =&gt; "Hello") .Return(); I thought this might work, but it's not enough. interface IFoo { string A(); } It's throwing an `ArgumentOutOfRangeException`. And... what is this intended to do? 
Hm holding a class with the pattern won't really make a difference, since you can't call its Dispose(bool) method directly anyway (since it's protected). You'd just call its regular Dispose from you own.
&gt; AMD and Intel have both tested this and documented it in their optimization manuals. &gt; &gt; You can easily bench this in C/C++ and I have done rudimentary benches with the proposed changes for C# as well. I can well believe this improves performance when you are writing assembly or using a language with a highly-optimising compiler. I'm just skeptical that it will make a significant difference to the performance of .NET code. Taking a step back, if I wanted to make .NET faster I would probably start by augmenting the existing APIs with support for array and string slices. For example, I think it is ridiculous that you can only parse a float by copying a substring out (incurring an allocation) and parsing that. There are many such places that stand to make programs several times faster. My feeling is that this might make some numerical code 3% faster. 
Now that is a really cool project. I'm going to give it a shot improving this library.
Er, don't think so. A denial of service attack is using excessive traffic to swamp legitimate requests. This is closer to a privelige escalation attack. As much as I like MVC (and I do like it quite a lot), it seems to me that the practice of passing the same "models" back and forth between the client and the server is prone to this sort of privelige escalation unless you want to check every value you get back from the client. The "Bind" attribute is (it seems to me) just a sticking-plaster - your incoming model object shouldn't even have a place for that parameter in the first place, because you're still going to have to ensure it's filled in with a value before it's sent back out.
Good point. I based my assumptions on the title of the article and didn't read it correctly.
Hey there! Maybe I'm just not used to your terminology. I'm are you referring to recursive data structures? I don't mean this as an insult, but maybe your stuff is a bit more tied together than it needs to be? EDIT: Why is his thing being downvoted? His opinion is pretty valid. If you're forced to develop in this way, then this could be a legitimate problem (assuming recursive data structures).
Did you mean to respond to OP? As for me, I use pluralsight probably 10 hours a week. That comes out to $0.72/hr over a month for fantastic videos that are typically well thought out and cover a wide array of subjects. They have a 10 hour free trial. If I were you, I'd at least check it out since it doesn't cost anything at all. Take care. 
Agree. Part of becoming a pro dev is quickly sorting the crap from the gold when searching for tips and samples. 
Check the response headers, and maybe try using Postman or another interactive REST client to try the same request to see the response you get back. 
Thanks. Yes that's one of the uses. Another thing (the reason I started thinking about this project in the first place) was to increase distributed application performance. What you can do is take any method in your program and execute it server side. This means if you have a client that's making lots of calls to the server (it's nice to have a chatty server interface for flexibility/re-usability but it's obviously crap for performance) then you can use this to execute the client methods that are making all the calls on the server too - meaning you're seriously cutting down on network chatter but keeping the chatty design :) https://github.com/tony-dinucci/Ovule.Nomad/wiki/Example-9:-Improve-Performance-of-Existing-Application
First rule of web development - never trust anything from the client.
Fun to learn with but what you do there would be the devil in the real world. A challenge if you want to do some work that would be closer to something done in an actual application: Implement your main window view as a proper MVVM pattern without the code-behind. EDIT: Reminder to folks, this is a programming forum. If you can't back up why you don't agree with what I said then push on or do you really just not care about learning programming? EDIT 2: Programming forums really are going down hill. No relevant arguments, just "you suck" and downvotes. Cute.
Ah, I get ya. My response was not indicative of such. I agree with that. I think it's an incredible resource and well worth the $29/month. I have no regrets about using it and continuing to pay for the service 4 months in.
The problem is slightly different. Recursive data structures aren't an issue so long as we're just talking about class Node pointing to another class Node. F# falls down when you have stuff like: Customer.Address --&gt; Address Address.Parent --&gt; Customer Yes the data structure is cyclical, but the problem is that the data types themselves have cycles. Last I head, the F# compiler can't handle this unless all of the classes are in the same file. 
If I were you, I would concentrate on benchmarking your code and speeding it up where possible. The OS is built by a bunch of smart people to solve this problem. Let the OS schedule processes, and let your application worry about its own work.
Iterate through the first 6 rows, adding each to a running sum variable, set the value of the 7th row to this sum, iterate through rows 7-17, adding each to a different running sum variable, then set the value of row 18 to this sum. Let me know if you still need help. 
I can see similarities there yes. I'd say your system is a bit more like Remoting though (judging by the README at least so I'm probably missing a lot). I did actually start out with a design that was much more abstract and completely hid network comms from the developer. You wrote your application and decorated assemblies, types and/or methods with attributes and a post processor took your assemblies and generated a client and server for you with all the necessary plumbing. I think this was too much though (as you are saying yourself). I feel it's actually on a pretty good path just now. Things are abstracted to the degree that you don't have to worry too much about the network however not so much that it feels like there's magic going on. Developers are in complete control through code. One of the BIG things I still need to add in is fault tolerance, i.e. if an operation fails then do something about it (at the moment it's still the developers problem). There are many ideas but I've not fully settled on what to do here. Frameworks like Isis2 (https://isis2.codeplex.com) might play a part here. Also a certain influences from the way the TPL handles things might work their way in...early days.
Yup, it's still the case. The top-down approach towards both the files and project structure mandates that *all* recursively defined relationships have to be in one file. Personally, I can't see it changing anytime soon, and I agree it can be annoying at times. Also, unfortunately, project management in F# is a pain in the ass - moving files up and down one by one, creating and moving files into directories is only available via F# Power Tools (?!) etc. Apart from that, as much as I admire the effort put in the library, C# doesn't seem fitted to the task - too verbose/noisy, type inference is not strong enough and - in case of pattern matching - we lose exhaustiveness check which is one of the most significant advantages of that approach.
Cool. I'll take a look at your repo over the weekend - I'm sure there's plenty I can learn from it.
This made me realise that OS's need a "low power" priority level. One where it does not allow the process to consume more than a few hundred mhz of the processor, such that it can stay in its low power states. Low priority isn't the same - if you're the only lp thread running, you still get a heck of a lot of resources..
You can also lower your processor priority (untested) with: System.Diagnostics.Process.GetCurrentProcess().PriorityClass = ProcessPriorityClass.BelowNormal; Now, that just means most things will be scheduled ahead of your process. Your process might actually use (almost) 100% of the CPU even with this, but you're not crowding out anything else. However, why are you trying to do this? If you're just trying to keep usage below some percentage, it's not going to happen without a lot of juggling, sleeping and processor examination while you're running. If you want the process to *die* after so many cycles, that's another question (like user caps on CPU cycles). If you're trying to keep from being a CPU hog, this suggestion will work. 
* You know you can script a database schema just the way you want it without an ORM - is it just the ease of E.F that appeals to you? I can't believe it solves the problem of 'being able to create a db how you want it, as a db management tool (Oracle, SMS, etc) already have SQL scripting to do that directly - similar to writing code). &amp;nbsp; * Given all the partial classes that E.F can create just to get a simple class representation and access to said class, have you never come across an instance that the maintainence is actually &lt;worse&gt; with E.F? I'm constantly running into that. For a class to represent a table in my current employers' application - there are 3 partial classes (one is inevitable empty), and a repository class, and a context class. That's just so much bloat it becomes a maintenance nightmare.
Hey, thanks for the reply! I think you're on to something there... 'the one you learned first'. I know we work in a field (hobbyist or not) that has an ever changing environment - but I have certainly seen people latch on to whatever their 'original' was. I'm the same way, in this manner, too. I prefer writing the schema in SQL and the boilerplate representation by hand in csharp. &gt; ... Maintainability really sucked when we changed the columns on a table, because we had to modify all our queries man I've experienced this using E.F. in another post I mention how E.F. generates 3-6 .cs files just for a table representation. That is far more nightmarish to me (partial classes, .net only syntax so no portability/flexibility with languages) than just rolling my own data layer. &amp;nbsp; I appreciate your comments though, its right around what I was expecting, and I agree - E.F. is pretty sweet for the small stuff!
Yeah, I agree - you shouldn't be programming. I kid, I kid. Yeah, E.F. is pretty quick so you don't even need to worry about the data storage stuff until after prototyping.
I guess it is ok for quick and dirty work, but when you need a professional job done it just doesn't cut it. There are significant performance hits because... * Poorly designed resultset to object mappers (pretty sad for an ORM) * Poorly generated SQL * Wasteful access patterns (want to delete a record by ID, run a SELECT query first) * No support for bulk operations * No support for full text indexes (and LIKE operators are stupid slow in comparison) * Can't specify index hints (normally that's ok, but you need them for spatial queries) * Can't use windowing functions (which means complex reports are going to be slow or require post-processing) * Discourages the use of covering indexes (unless you want to manually map queries to objects, which kinda defeats the point.) Without third party libraries you can't even use EF to dynamically generate queries based on user defined filters. And that's the only reason I wanted to use EF on my last project. **** You know what does work? SQL Server Data Tools. It lets you version tables, views, and stored procs just like any other code. And not being able to easily version the database is the only reason people started this nonsense of trying to put SQL in the application tier in the first place. 
Some day i do plan on trying other ORMs, as i agree the layout structure of code when including EF can be a bit much (Data Contexts, Setting up FKs, etc..). I tend to think there is never really a correct way to do something, just a suggested or popular method. Some methods are better in certain areas then others of course, but its not one shoe fits all world in programming. Glad i could contribute, and good luck! :)
&gt; Fun to learn with but what you do there would be the devil in the real world. Why? It's easy to read and understand his code. &gt; Implement your main window view as a proper MVVM pattern without the code-behind. Who gives a shit about what kind of model he used for his presentation? It's called "DLL injector" not "View model presenter". It's an unimportant detail.
&gt; Why? It's easy to read and understand his code. DLL injection via win32 APIs is hardly relevant and very dangerous &gt; Who gives a shit about what kind of model he used for his presentation? It's called "DLL injector" not "View model presenter". It's an unimportant detail. OP said they were learning .NET. I offered a suggestion that would give some real practical experience, I am sorry this apparently offends some people to the point of acting like unprofessional twats.
&gt; Besides the point. Sure, learn .NET by using outmoded API's that are incompatible with almost any way you would want to use .NET in the modern world. Great idea. &gt; Sorry for using a harsh tone, but I don't think criticising pattern usages is very helpful to newcomers. It's the C# part he wants an opinion on. Pattern usage is critical to working in the .NET ecosystem. Most of your work is integrating with 1 or more API's and frameworks unless you like re-inventing the wheel. Further the particular pattern I am suggesting shows multiple features of .NET in the process. What about this is unacceptable for a newcomer? EDIT: Further, OP stated they can code. I would not be worried about syntax (it was fine), any fool can read a style guide. Using the system correctly is another thing entirely and cannot be picked by a style guide and refactoring tools are superficial at best.
you call the class its public dispose method in your own dispose method. you always dispose every disposable member in the class its dispose method. visual studio will even tell you that in a code analysis btw.
I use EF, but I don't allow it to dictate my domain model. I use it as a data access layer and that's all. I use proxy classes to read the EF models into classes I can use in my application instead of being forced to use EF models. I have a set of tools that pour the data on a like for like property basis into my classes. This way schema changes do not break my app, the only thing that can happen is a property does not get populated or is ignored. EF is a useful tool for quickly managing data access but thats all I use it for.
This is awesome. I'm currently doing a project that does heavy mathematical calculations and was looking to add distributed workloads in the coming months. This is definitely going on my list. Thanks for your effort.
&gt; context.SaveChanges(); // only fields modified after attaching are saved. That's not true when using EF Code First. It doesn't even know how to track changes when using ordinal models instead of EDMX-generated entitles. And EDMX is going away in the next version. 
&gt; For me best approach has been to do custom query objects per use case (we don't have much user query customization for now); this enables covering indexes and has reasonable performance. I agree with that approach, but EF goes out of its way to make that difficult. Unless you are basing your models on an updatable view, or using other binding trickery, EF is unable to understand how to perform insert/update operations. Were it designed well, it should be able to take any object and, at runtime, match it up to the database columns for all four CRUD operations.
I wrote and maintain 2 applications using entity framework (code first) in production (public facing web sites) with a decent data size. Both work just fine and are very stable. The problem with EF is that it is very easy to make mistakes and then be stuck with a poorly performing query. I recently improved the performance of a query which was taking 5 seconds to 10 ms by changing a few lines of code. EF is absolutely production worthy if you know what you are doing..
If your endpoints change IP or hostname wouldn't it be nice to not have to compile and deploy?
As a pro who's been in the same situation, I feel your pain. This might sound simplistic, but I have found that EF is: * Handy for writing data * Very bad for reading data * Good to master, because of its ubiquity As you've seen, the SQL it generates for reading is really nasty, and can be very difficult to tune, even with a "premium" tool like [EFProf](http://www.hibernatingrhinos.com/products/EFProf). That said: yes, it's production-worthy, and if you "have to use it," there are few ways to make it less painful: 1. Avoid the repository pattern. It's too fragile. 2. Avoid large data contexts. You might consider breaking up a 100+ entity context into several smaller contexts, if there are some good conceptual/aggregating edges. 3. If you can, consider using different models for reading and writing, maybe with a reporting DB or some views... 4. ...and if you have different models, just do writes and very simple reads with EF, and the bulk of your reads (including complex searching and joining) with sprocs mediated by a second tool, like [dapper](https://github.com/StackExchange/dapper-dot-net). Regarding the two tool approach: if a manager, etc. tells you "we don't want to complicate the project with an extra tool/methodology," gently explain that the hoop-jumping that EF will put you through in order to improve performance will very likely exceed the investment that a micro-ORM with sprocs would require.
It's the best definition you could ask for a **leaky abstraction**. You end up with code doing stuff that has extreme knowledge of the DAL all over the place. You will find for performance reasons you need to do .Include(x=&gt;x.AllTheThings) far too much. Still I hate writing SQL, so there is at least a plus side.
&gt; it's the operating system's responsibility to ensure programs run as fast as possible and don't choke each other out Caveat to that is that the programmer has to ensure the OS can do its job. Without proper threading an application can grab all CPU for long periods of time and not release it for other processes. 
SSDT does a very nice job keeping our team coordinated on our current project. We trashed EF on week 5 because it was price to be difficult to test the way we prefer, and was difficult to tune queries. We rolled out a custom abstraction layer that has been far more performant and easier to maintain.
When I started using F# I also found this highly annoying. But the more I used it the more I realised that cyclical dependencies are a code smell. Getting rid of them is not always easy, and it is not always possible. But by minimizing them you get much cleaner code that is easier to maintain. But it's not trivial to minimize them in all cases, so I totally agree that this can be a huge problem with F#. But part of learning F# is learning to rethink how you design programs, and removing cycles is one of the hard parts that you need to learn how to rethink to really start loving the language. But yes, this in turn shows that it's not totally painless to code C# in F# - and thus a library like the OP is all about can be quite useful. Even though the library sadly seems to be weaker than using the actual functional constructs in F#. But that's life, you win some, you lose some :/
It's technically impressive, but I avoid using it as much as possible because it takes away control over the performance of my database access. TBH, I got burned by NHibernate at a previous job, where it would randomly fail to acquire a session, fail silently, and result in customer orders being lost. So I'm prejudiced against full ORM implementations because of a lack of visibility into what they're doing. I have started using Dapper, which is a micro-ORM. Performance is close to native ADO.NET, and can be 6 times faster than EF. It takes away the tedium of writing all that repetitive column-mapping code (MyObj.Id = Convert.ToInt32(rdr["ID"]) over and over again) and since I get the choice of using hand-crafted SQL, I get control over what it's doing if I want to. 
If your ViewModel is more closely coupled to the View (i.e. doesn't have properties that are only used some of the time) this doesn't happen.
I may have been unclear. I don't use it to design anything, I do all that in management studio. I do like the orm model in that it generates objects for me. Maybe some call this bloatware, but I haven't found a better, easier model for interacting with the database layer especially maintenance wise.
I actually only used EF in the .NET world for the first 1.5 years of my career. I loved it. Then I used Dapper. It is now my number 1 choice for database interaction.
I take it that when you say &gt; interacting with the database layer especially maintenance wise you are referring to a changing schema / versioning of tables? I think that's one of the problems that ORM Frameworks are attempting to solve, and each have their strengths in doing so. I was just curious enough about E.F and what I perceive its reputation to be and whether it actually is a justified reputation or not.
I still haven't used this one, but from what I see - its nearly identitical to something I've written. Just learn the SQL use a lightweight context to do your transactions!
&gt; EF shouldn't be used but to do quickie manipulations on small amounts of data, everything else (bulk import, export etc.) are for actual tools. I *really really really* wish someone would tell companies this before they endevaour to write a peice of software. E.F. - pretty cool for a certain time, but eventually you can possibly outgrow E.F.
Interesting thought. I've worked in database systems that had far more sprocs than necessary. My typical take is a basic selectbyid/selectall/delete/update/insert sproc per table. Typically in the {tablename}_{operation}.sql format. (MyTable_SelectById). If absolutely necessary, the complicated joins / queries also reside in a sproc that attempts to mimic the aforementioned naming template. &amp;nbsp; I've never felt overwhelmed in systems with that setup - even with 10+ databases and an average of 10-40 tables per database. &amp;nbsp; The beauty of templating a system like that is that you could write an application to write the bloatware for you. All you'd need to do is execute the scripts against your SQL server and add the .cs files to a project/lib. &amp;nbsp; For my money, finding *tools to make life easier* for any project early on in the project lifecycle seems to breed disaster further down the road. I'm beginning to think that the art of taking your time during the datalayer creation phase is becoming a long lost art as more and more developers appear to be depending on *the easy way out*.
Don't you think E.F. is a bit bulky for *just a data access layer*? I'm assuming by DAL you mean literally the connection string / *.saveChanges() aspect?
The schema upgrade mechanism is really cool, but it takes too much bite out of what you can leverage with sql for high volume data and is absolutely awful with N-Tier architectures. It's definitely not the the silver bullet it's hyped up to be, but for the right job it can be easy to deploy and maintain. For low-volume/high-complexity data, though, I've had rather good results using a non-relational document repository implemented in our existing RDB. It just uses a couple tables to store and retrieves data serialized from the application layer, which avoids all the ugliness of shoehorning complex and non-relational business data into a relational schema, and the database schema never needs updating apart from bells and whistles.
&gt; You end up with code doing stuff that has extreme knowledge of the DAL all over the place. So much this. One of the problems that plague me is seeing the DAL and/or E.F. creep to parts of the code that I feel, in a better architected system, could easily have been avoided. The dependency is strong.
Do you find it troublesome to update E.F. and the seperate data access on large schema changes?
It depends. If you are just accessing data adhoc then it probably is bulky. But mostly I find getting EF from NuGet, providing credentials and mapping my stored procs really easy with EF and takes about five minutes to get set up and working. I can then add my own helper classes to do anything special with the EF models if needed. I tend to lean towards EF to do my donkeywork with regard to just accessing my data and retrieving it in a manageable way. If theres anything specific I need I'll code it myself using EF as the connection provider
&gt; The data layer is clean, simple and easy to maintain and I have yet to run into any performance problems. For that, I am envious. I agree though, there is a time and a place for products like Entity Framework. &amp;nbsp; My question and concern is: will we ever know a clearer definition of that time and place where E.F. *should* be used? All too often there is the same thing said to the effect of *"I'm using E.F. because its either 1. popular, 2. easy for my simplified example, 3. what I know."* &amp;nbsp; And further more (what goes unsaid) is that *"whatever happens to this project beyond the scope of this article/conversation is not important to me at the moment..."* &amp;nbsp; That kind of lackadaisical asical mentality just grinds my gears, I suppose.
Right. Without being thick here. Does this mean you can run any docker container on windows now?
That right there is worth so much. Code First is so frickin awesome. I've taken EF out and dropped in Nancy and Dapper after the fact and bam; Isanely light and fast app. But no way I personally could start with those two. And EF just keeps getting better and better. There is a huge renaissance going on with MS and its a great time to development on .NET.
If they weren't applicable, we wouldn't have so many people desperate to try stuff like NoSQL to overcome there performance problems. Now lets be clear, I'm working with tables that have hundreds of thousands if not millions of rows. If you are working with little applications with a few thousand rows at most, performance is much less of a problem. Now where things get tricky is developer testing. For new applications, many developers have downright anemic databases that don't accurately reflect their expected row counts in production. This leads them to a false sense of security and many long nights down the road.
It'll be really interesting to see MS and its development products in the next decade. That's for sure.
As I read this, it sounds like you prefer your second example (linq) to your first (embedded sql). With that said, there is something to be said for have SQL query strings visible in source code that you aren't obfuscating. So I can see why your second example would be more well received than your first example. &gt; EF hides so much of this, you can't be sure what you're asking the database to do. I think LINQPad will show you the query generated by E.F., but once you see it - you can't unsee it. Its just... *special*.
The performance figures are on the Dapper github page, about halfway down. Looks like for this case, it's actually about 12 times faster. https://github.com/StackExchange/dapper-dot-net Performance of SELECT mapping over 500 iterations - POCO serialization Dapper ExecuteMapperQuery 49ms : : Entity framework ExecuteStoreQuery 631ms &gt; That being said, why not write a quick application (I'm sure it can be done in a day or two, as that was what it took me) that accomplishes this repetition for you? This is what Dapper does. It uses reflection to map column names to entity object properties. So as long as you flow through with consistent names, it's like magic. :) Side benefit is that it's a single .cs file that you add (via NuGet, etc) so the deployment overhead is minimal. There are extensions to do some things that Dapper doesn't, and they're equally light weight. 
This doesn't really have to do with SPROCS vs EF though. At the very least EF still allows you to completely control the design of your database. Also, SQL and NoSQL solve different problems. SQL is relational and is generally good for keeping your data in the same place. NoSQL solves cases where you have such a stupid amount of data that SQL simply doesn't cut it. This does not denote a bad database design, contrary to popular belief.
&gt; This doesn't really have to do with SPROCS vs EF though. It does when you start needing things like temp tables. Sucking all the data into the application tier for processing doesn't work when you have a million rows. &gt; At the very least EF still allows you to completely control the design of your database. But not your queries. At least something like Dapper will allow you to use CTEs and windowing functions. 
Made this because I didn't find anything that does this on NuGet. Gonna post it there later when I'm back home. Edit: Now on NuGet as [BitStream](https://www.nuget.org/packages/BitStream) Please post any critique or suggestions :) Posted this from mobile, so please excuse it if there's no flair.
I wasn't sure if posting code was appropriate.
I can't see why not. There is a &lt;&gt; format code button in the comment editor.
The main project I work on was initially an entity framework/MVC app. We moved from that to do new dev in dapper/nancy. I really love dapper, but I fell out of love with Nancy. We've got everything running on MVC+Dapper now and we've been really happy with that setup. I feel like it struck the right balance for me. I don't have to redo a bunch of stuff MVC already handles, but I'm comfortable with SQL so I can just write queries and go about my day. Have you run into any similar issues with Nancy, where you found yourself wishing for really well supported features from MVC? Or were you using something other than MVC with EF? I do wonder if I'd get more into EF if I knew it really well. Our original project had a lot of really naive errors in the EF implementation, so I don't think it was a good representation of how EF could perform. Lots of n+1 errors, etc.
&gt; * Poorly designed resultset to object mappers (pretty sad for an ORM) Do you mean performance wise? Or something else? &gt; * Poorly Generated SQL It certainly CAN. But EF is a tool, it depends on how you use it. Yeah, if you do a lot of navigation property shenanigans and extension method queries, the SQL that comes out can be pretty amusing. But if you write your queries using the base LINQ Syntax and leverage EF as an abstraction layer for your data access and to provide strong typing for your queries, the SQL that is generated is typically sane. &gt; * Wasteful access patterns (want to delete a record by ID, run a SELECT query first) I'll give you that. &gt; * No support for bulk operations &gt; * No support for full text indexes &gt; * Can't specify index hints Depends on the provider. The 3rd party provider we use allows for bulk updates, and theoretically inserts (Although it won't work for DB-Generated PKs, so bulk insert use is very limited.) Also has the ability to specify index hints and use Oracle Text in EF. EF is good for quickly developing an application, especially the main/base CRUD screens. For a lot of businesses, over 90% of your application will perform fine on EF. The remaining amount can be optimized via whatever database specific hackery is required after consideration of the dependency one's about to create. By that, I'm saying that ORM's aren't necessarily about 'SQL in the application tier' so much as 'business logic in the application tier'. EF with a decent secondary repository Interface layer (i.e. to cover some of the gaps in EF, and possibly to allow for provider specific functionality when available without creating too hard of a dependency on the underlying DB.) the SQL statements being generated in the application tier is more of a consequence of the primary goal, rather than the primary goal itself. Now, EF's value as an ORM that's portable is questionable, I'll give it that. Provider inconsistencies (We have to watch out for APPLY being generated in our queries because we're on an older version of Oracle) do happen, and it's not as slick as NHibernate in some regards, but it does have a easier base learning curve in my opinion.
&gt; E.F. is certainly not helping with the generated queries I think your problem is right there. Any ORM is a sophisticated and limiting tool, and if you're using it to compose queries for you, you need to understand the operations that you need to use carefully. Some basic SQL things just don't lend themselves to EF - like bulk inserting and deleting records has a pretty big performance penalty. As far as EF as a product goes, I'm a fan. Once you comprehend the configuration, various programming idioms, and what kinds of SQL it produces, you can architect your project rather nicely. In the hands of newbies or fools, though, it's a deadly weapon. I'd guess your problem is more with the developers who created the monstrosity that landed in your lap more than the nature of EF itself. And if they started the project with an older version of EF, there may still be some code that does things in an obsolete way (because the better APIs didn't exist at the time). Our production application uses EF on a legacy database with around 6 million records across 270ish tables. Query performance is good, but developing queries isn't always as simple as writing an elegant LINQ expression and punting it off to EF. I've used NHibernate as well, and found it was just as annoying, only in different ways. If you're trying to keep an eye on poorly performing queries and don't have them all identified, this tool is handy: http://www.solarwinds.com/database-monitor.aspx. It gives you realtime information on which queries are running slowly. We use it in production but on a test or development machine it can be just as useful.
&gt; Like many things, bad design leads to bad problems. Indeed, but you can design things to try and encourage good design, and make bad design hard. For instance stalling an airplane is a bad thing, a good pilot will not do so unintentionally, but sadly, many have died, so planes are designed to be as difficult as possible to stall under normal conditions, 172s/pa28s really hate been taken into a stall condition. A J-3 by comparison stalls easily. Whilst I like EF in some ways, I do think that too often it tempts people to ignore having a proper DAL class(es) the IQueryable interface can be used very carelessly. As always with great power comes great responsibility, and sadly, I've often seen it used badly by developers who are quite good. However, like the idea of using SPROCS (and only via DAL classes) rather than vanila SQL, it can be mitigated.
You don't need the continue on line 63, the else blocks will never execute when the first check is true and there is no code after the if else statements. The if statement on line 58 does not look correct, and it is probably why you saw extra text in some cases. nameLogin != userName || passLogin != userPass &amp;&amp; t&lt;3 Will be evaluated like this: nameLogin != userName || (passLogin != userPass &amp;&amp; t&lt;3) This is because the &amp;&amp; operator has higher precedence than the || operator. I try to avoid using break; in the middle of loops, since they can make the code harder to read, but this is more of a personal opinion.
&gt; But not your queries. You can run raw SQL or call sprocs with EF... https://msdn.microsoft.com/en-us/data/jj592907.aspx
Four of the using directives aren't needed and can be removed. Variable declaration and assignment can be joined for userName, userPass, and passVerify. nameLogin and passLogin can be declared in inner scope. the continue statement is redundant, if you use the if/else if/else structure. Your comment "allows exit by pressing any key" is wrong. You want ReadKey for that, not ReadLine. \n is not as "c-sharpy" as Environment.NewLine. But if you're going that route, you should be using "\r\n". And string.Equals is also "c-sharpier" than ==, mostly because you can do neat things like set the comparator to do different things, like ignore case (which you wouldn't do for a password, of course). You could merge your two while loops to check for match and retry count. Your variable names are not very descriptive. You have logically separate units of work being done: registering a new user, and allowing a user to log in, so I would refactor those into discrete methods. The number of login attempts is fixed, so you could make it a const. There's no reason to keep a separate counter for retries remaining since you can figure it out from the max retries const and the number of login attempts. Using a for loop instead of the while might more clearly show the counter increment. I don't like *var* for primitives, but that's preference. I played with your program for a while, and here's what I turned it into. http://pastebin.com/43K7Pm5Q
Don't assume experience has made me any better. :-D But if you have questions, I'll answer them as best I can.
&gt; Any ORM is a sophisticated and limiting tool Not to be rude, but being limiting doesn't sound very sophisticated. &amp;nbsp; &gt; I'd guess your problem is more with the developers who created the monstrosity that landed in your lap more than the nature of EF itself. And if they started the project with an older version of EF, there may still be some code that does things in an obsolete way (because the better APIs didn't exist at the time). Yeah, this project is very much inherited, and it was from a 3rd party software company that just makes prototypes for non-development companies that need software. It was pretty rushed, and in their defense, they could only do so much given how little documentation was provided about what the software needs were. With that said, I do have beef with E.F. in the sense that beyond small scale projects (small scale being defined as small in data set and day-to-day operations) E.F. is being suggested as a *real* solution to long term large scale projects by developers (or non-devs, I'm not 100% sure) with no such experience. &amp;nbsp; &gt; Our production application uses EF on a legacy database with around 6 million records across 270ish tables. Query performance is good, but developing queries isn't always as simple as writing an elegant LINQ expression and punting it off to EF. I have to say that's a rather small data set. Simple math tells me you're rougly averaging 22,000 rows per table. To me, if you increase that 10-20 fold, you'll see a performance impact worth paying attention to, regardless of what you know about E.F. best practices. My original post is pertaining to this exactly. Small data sets don't bother me, as I think most of us are in aggreance that E.F handles simple operations and small data sets just fine.
And the plausible responses (From the mind of a possible client / manager): &amp;nbsp; 1. The important part is, can it be done - and quickly? 2. Isn't it cheaper to higher less educated personnel? 3. Yeah, I've heard of stack overflow, but I don't want my developers/team to have to learn *another* thing... I just need this project done, yesterday. &amp;nbsp; I know from where I'm currently located, this mentatlity is thrown at development teams in the majority of companies that aren't strictly *software* companies. Its... well, bad.
I'm not sure why the LogInUser method was created as bool. Could you please explain? 
There's a lot of constructive criticism here... I've learned you need a thick skin while exposing your noob code to others. I showed some of mine off a few months ago and it got plenty criticism - some guy even called it weird - with nary a word of encouragement haha
EF ***was*** really bad with existing/old databases that used a lot of weird sprocs. This is how I first got into Dapper, it could play nice with this stuff. However, I'm not that smart and really lazy so I kept going back to EF to build new things and it's really paid off for me. The most current version can suck up sprocs pretty well and you can always do your own custom queries in LINQ. But, yes. Dapper and MVC is the cat's pajamas. And, I just realized we haven't been pushing much Nancy either. .NET MVC is pretty slick. I actually have a base db I create everything from (database first is still alive!) since the apps are so similar from a basic membership/role aspect. But I quickly turn this into a code first project then use EF and code first as my prototyping tool. Saves me a hella lota typing! Then once the overall app has been flushed out, which I might have a lot of quasi static viewmodels to simulate doing 'stuff' I send this off to the real programmers to tell me I'm crazy, or crazy like a fox. For me, this is the best way to explain what I'm thinking vs. a Word doc with a ton of flow charts. We can literally step through the app and see pretty much what I want. I pretty much demand they keep this in EF as we flush out anything so I can continue to 'play' then only once it's actually flushed out we rolling Dapper. Does this create extra work? I really don't thinks so since I'm able to skip a TON of back and fourth up front trying to explain myself. That's the hardest thing for a non-developer to do, is explain the business case. EF has been magic for me in this regard. 
Because typically the calling method would respond to the login's success or failure by doing something. Close a user session and log a security exception, log the user in and run a script, etc. Your sample doesn't do anything in response except report success or failure at the console, so it's not actually needed. I put it in because it maps in my head to expected behavior, and it leaves room for adding in that reactive behavior later if you want it.
There's no performance advantage. The advantage is in readability. The nearer a thing is declared to its usage, the easier it is to see its scope when you're debugging.
I understand. Thank you.
Really, really useful for cases where you don't care where in the chain the null reference occurs.
I find Bing easier to use when looking for C# syntax
Could you please verify that I am understanding this correctly? if (string.Equals(userPass, Console.ReadLine())) The string in this argument is whatever Console.ReadLine() gets from the user. Does this mean that this string is only used for this if statement then discarded by the .NET framework?
You made the right choice, this code looks a bit long to include in the actual post. Snippets (such as just one method that is short to medium length) would be more along the lines of what I would include in the post itself, otherwise I would use pastebin.
Yep. Since you just want to confirm the input, there's no need to keep more than one copy of the password if the second input is a match to the first.
Your "continue;" is exiting your loop prematurely.
Indeed it is xD I will test it as soon as I can :) (It's using data from a server which has been down for the past hour, so I can't test until it's back)
I like to just ignore ORMs except the small projects I've built. The benefit of ease just doesn't sell me on any ORM on the market. &amp;nbsp; Everyone mentions how much time you save using EF, and I agree - you do save time, but - how long does it take you to write a program to output fizzbuzz? Probably longer on your first attempt than if you did it 1000 times. I feel like the more you write a proper DAL, the faster you get - and the time you think you save with ORMs becomes obsolete or too minimal to justify. &amp;nbsp; And on the flip side, if you have never written your own DAL and have only crutched on ORMs - how much are you cheating yourself with learning your craft? I think modern ORMs are really causing a sense of laziness for programmers old and new, and I don't think there is enough benefit to justify that.
We're definitely on the same page. Good to see I'm not alone!
I'm in an environment now as a team lead where I'm trying to solve a similar problem. All of our developers have a local schema of the db system on their local machine - and each table has maybe 10-100 rows in them. Our database in production has tens of millions of rows in each table... No wonder we can't find those timeout issues occurring during our sprints - they don't exist with small data sets!
It is! I love it! It's absolutely perfect for testings inputs when you aren't sure if it is fully instantiated. Made up example: var userPhoneNumber = customer?.user?.info?.contact?.phone; return userPhoneNumber ?? "n/a"; Or set it to a label, or add it to a collection, or call a delegate or whatever. But, now we don't have to go down the list checking for nulls. So much cleaner! I can't wait for this to be ready to use. I'm switching over immediately for all the stuff VS2015 is offering.
Holy nesting... Use `IndexOf` and reorganize your code a bit and you can write that method in 3 lines.
What are you talking about? The `continue` statement does absolutely nothing where it is.
I can't IndexOf because both lists have more than one occurrence of each item.
Well, there's almost certainly a better way to go about this in general. But as far as your actual question goes, your code seems to work fine for me. Can you post a specific set of data for which you think it fails? P.S.: At the very least, you can get rid of the `continue`, which isn't hurting anything but is completely redundant. Also, drop the `Contains` checks. They have to iterate the list, which is a waste of time since you're already iterating the list manually.
&gt; &gt; •Poorly designed resultset to object mappers (pretty sad for an ORM) &gt; Do you mean performance wise? Or something else? Yes. If you compare the performance of EF to Dapper for simple queries, it is remarkable how bad the materializer is.
Well yes, you can use the back door in EF to pretend that it is just a slow version of Dapper. But then, why use EF at all?
Raw SQL is easier to use. You don't have to worry about pitfalls such as forgetting No-Tracking to avoid killing performance.
ViewState and ViewStateGenerator are dynamically generated parameters. What you have to do is declare a CookieContainer, declare a new GetRequest and set it's Cookies parameter to the newly created CookieContainer (GetRequest.CookieContainer = NewCookieContainer). After receiving the response, grab the ViewState and ViewStateGenerator from the source code and save it to variables. Also, SAVE THE COOKIES to CookieContainer (NewCookieContainer.Cookies.Add(Response.Cookies)). Now you can send a PostRequest. Once again, PostRequest.Cookies = NewCookieContainer. Fill the ViewState and ViewStateGenerator with values from variables. Do not use this information for malicious purposes!
Interesting, thanks.
You could shorten the if/else return block to return index1 != -1 &amp;&amp; index1 == index2; because (citing [MSDN](https://msdn.microsoft.com/en-us/library/2a723cdk%28VS.71%29.aspx)): &gt; The conditional-AND operator (&amp;&amp;) performs a logical-AND of its bool operands, but only evaluates its second operand if necessary. In any case, this looks like what OP wants to do.
Yes, I see clients like that so many times! :P
Top of the list is `as`. It's easier to type than an implicit cast so people use it all over the place. And then something changes and we get random, unexplainable null reference exceptions instead of type conversion exceptions. I'm not worried about this one because it is harder to type then the "correct" operator so people won't be using it unless just out of laziness.
 int version; if (Int32.TryParse(webBrowser1.Document.Body.InnerText, out version)) { // Valid integer passed } [More information](https://msdn.microsoft.com/en-us/library/f02979c7\(v=vs.110\).aspx)
In C# (and many other languages), "parsing" functions generally return a Boolean value, indicating whether the parsing was successful or not. The most common failure you'll see in parsing something like this is passing a non-integer value to the parsing function. For example, imagine that webBrowser1.Document.Body.InnerText is equal to "Hello, world!". This is not a valid integer value, so TryParse() would return false. The code above will return true if your webBrowser1.Document.Body.InnerText variable is a valid integer value. If this is true, version will contain the converted value. Otherwise, TryParse() will return false, and version will be null.
I would abstract all your training and score data into a different class that is meant for holding that data, and then include a collection or array of it in your Pilot class. For serialization, I would just write a general serialization function so that you don't have to specifically load byte offsets. Here is an example I came up with which should be able to cover all the cases you have in your first example but using my suggestions. I tested this and it runs fine on my machine, with the test code in Main creating a new pilot, saving it to disk, then loading the file that was just saved and printing out some of the data. using System; using System.Collections.Generic; using System.IO; using System.Linq; using System.Runtime.Serialization.Formatters.Binary; namespace Example { class Program { static void Main(string[] args) { // add some example data to the pilot and save it var pilot = new Pilot() { Name = "Goose", History = new List&lt;MissionHistory&gt;() { new MissionHistory() { Type = MissionType.XWing, Complete = true, Number = 1, Score = 10 }, new MissionHistory() { Type = MissionType.XWing, Complete = false, Number = 2 } } }; pilot.ToFile(@"C:\Test.txt"); // example loading the pilot from a file again and printing the first history score var loadedPilot = Pilot.FromFile(@"C:\Test.txt"); Console.WriteLine(loadedPilot.History.First().Score); Console.ReadKey(); } } public enum MissionType { XWing, YWing, AWing, BWing } [Serializable] public class MissionHistory { public MissionType Type { get; set; } public int Number { get; set; } public bool Complete { get; set; } public int? Score { get; set; } } [Serializable] public class Pilot { public string Name { get; set; } public int TODScore { get; set; } public int RookieNum { get; set; } public ICollection&lt;MissionHistory&gt; History { get; set; } public Pilot() { Name = "No Pilot File Loaded"; } public void ToFile(string fileName) { var formatter = new BinaryFormatter(); using (var stream = new MemoryStream()) { formatter.Serialize(stream, this); var bytes = stream.ToArray(); File.WriteAllBytes(fileName, bytes); } } public static Pilot FromFile(string fileName) { var bytes = File.ReadAllBytes(fileName); var formatter = new BinaryFormatter(); using (var stream = new MemoryStream()) { stream.Write(bytes, 0, bytes.Length); stream.Seek(0, SeekOrigin.Begin); return formatter.Deserialize(stream) as Pilot; } } } } This is by no means perfect or anything, and I put it all in one file for ease of example, but hopefully it can be a good starting point for cleaning things up. Edit: I just realized that the binary serializer will add some metadata and this won't be compatible with your games save files. There are ways you can specify in more detail how the data will be saved, but I'll leave that up to you. Good luck!
How well this will work for you will also depend on how the real save files you are loading are structured; if the data in them is laid out in a fashion that isn't easily loaded then things will obviously be harder for you and your code might have to be a bit messier in order to handle that.
Not bad. For performance gain you could use bit-masks instead of looping. A nice feature would be to be able to work with int/long and also define the endianness of the stream.
I would also suggest dropping the Plt prefix from all the names in the Pilot class. No need to put that there as you know it belongs to the Pilot :)
Hmm, I don't think the endiannes matters when using single bytes, does it? It would have to be taken care of by the user, using the BitConverter class to turn the int/long/whatever into bytes and reversing them if necessary. I think the functionality of writing those directly to the stream would be better as an extension method for the Stream class :)
I just use it pretty much to create the crud objects. Versioning is nice, and I handle the schema in the database, but EF is good at saving a step in my opinion. It has bugs, and previous to ef5 was unusable, but it does save a few plumbing steps.
Also you probably should add custom equality to the struct - default structural equality uses reflection under the covers and is slower compared to explicit implementation.
So the complaint is some people don't know what the operator does and use it improperly? That's the case with just about everything. Inevitably someone will use something incorrectly. It happens. Hardly a reason to be fearful of an operator like /u/AngularBeginner.
Ah, I knew I forgot something there haha
Personally I haven't encountered any serious trouble, but I can see how it might be a giant PITA under certain scenarios.
It's generally good form to include a default section in a switch statement that doesn't completely cover all possible values. In your case, you could move your final return statement under a default section. I'm not sure if this is related to your issue, but it gives you confidence about what your code is doing for implemented keys. 
We use EF for a fairly large site and it's wonderful. We use code first and the repository pattern. Database changes are easy with both upgrade and roll back. Most of our queries are quick, many being around 5ms. We're on azure for our full server stack. With our pattern, we could always switch out a few queries with dapper, but we've never had to. Tooling support is great and devs can right code quickly that's easy to debug. It sounds like where you're at might have an architecture problem rather than an ORM problem. Our models are all poco and we do he mappings in another config file. We never add any properties to our domain objects that aren't directly mapped to the database. We always adapt it into other models that are used on our site. Our cto has a pretty slick adapt framework that makes this easy to maintain and develop with.
Finding the approximately correct spot is easy. Running through all of the possible scenarios to try to get a null into the function where it doesn't belong before you realize that wasn't the real problem, not so much.
It is done! :D
new Learner.Want(Programs.Where()); sorry... but when i first read the title it looked a bit like code xD
I feel like that would be a problem with the codebase. It's easy to see exactly what is null and trace where it came from (unless a service call, but it would be poor design to have a casted value directly returned from a service). More often than not, I've found that not applying `as` correctly will result in a compilation error, which eliminates this entire scenario.
Should've been a user story: &gt; As a new learner, I want to view repositories of C# programs, so that I can practice and improve my skills at the Language.
Not really. Teaching people to manually call Invoke? Why? Saying that =&gt; "in this context" is not a comparison operator when it clearly never can be (that one is &gt;=)? Talking about performance of lambdas vs. delegates when they are *defined* to be the same thing in the context he's using them? Why? Etc....
I did not down vote you btw. If you hold an object with disposable you still implement Dispose() and Dispose(bool disposing) and dispose the member in the dispose(bool disposing) method. 
You're right, it really could. I never think of it myself cuz I always have stackoverflow open
There are a few places. I am not really a fan of most entry level C# websites. They tend to just go over the MSDN articles in their own way, or they go about it exactly like Java with a different syntax. The two I prefer most and that are on the side bar (and the ones we use at my office to train new programmers on C#): [The Yellow Book - Rob Miles](http://www.robmiles.com/c-yellow-book/): It's pretty great as a general intro to the language as a whole. Make a somewhat banking application. Good if you prefer reading and going at a book pace (which is much more common in the field). [Channel 9 C# intro - Bob Tabor](http://channel9.msdn.com/Series/C-Sharp-Fundamentals-Development-for-Absolute-Beginners): This is a video series that goes through the fundamentals of C#. He has an updated version with win8 and the newer vs, but we still use the older one (mostly due to our shop supporting older .net/windows versions). So feel free to try the new unless your going for the older stuff. Sadly, as far as code academy goes, there really isnt a good C# equivalent that I have found. They are either good and expensive, mostly for businesses paying for advance training. Or they are weak, work poorly, and are not worth the time investment. As a last note. Once you finish these, just take some time to practice the language. Go to CodeAbbey and try some exercises there. Learning by doing and researching for specific problems is pretty common in the field. 
myString.Contains("something") There's also .StartsWith and .EndsWith
I've had the same experience with EF, unfortunately. 
Best I could do. string[] chosenDifficulty = { "Beginner", "Intermediate", "Advanced" }; List&lt;Program&gt; programsToDo = new List&lt;Program&gt;(); foreach(string level in chosenDifficulty) { var tempPrograms = repository.Programs.Where(p =&gt; p.difficulty == level); programsToDo.AddRange(tempPrograms.ToList()); } Learner.Want(programsToDo); 
create a deck of cards. shuffle em. from there. see if you can make some card games. black jack/slapjack/w/e. deal to players. keep it simple at first . be kinda fun
googling and using stack overflow is standard for all developers. but if you're just copying and pasting without trying to understand at least a little bit of what the code is doing you're going to have a really hard time. also, try installing dash. cool tool for apis
It is true that String.Equals() had some useful overloads. However, keep in mind that since this is an instance method, it can raise a null reference exception where == will not. string str1 = null; string str2 = "test"; // Throws exception Console.WriteLine(str1.Equals(str2)); // No exception thrown Console.WriteLine(str1 == str2); This isn't a bug or anything intrinsic to the String type - same thing will happen with any instance method of an object. Edit: fixed a typo pointed out by /u/nolandenuff. Thanks!
Are you sure that's what you're getting from WebSocket? Other folks in this [thread](http://www.reddit.com/r/thebutton/comments/312yn5/any_other_software_developers_think_its_rigged/) seem to be getting properly formatted JSON back. Something like this: {"type": "ticking", "payload": {"participants_text": "58,778", "tick_mac": "54ed176d98b837f....", "seconds_left": 60.0, "now_str": "2015-04-01-17-27-04"}} 
Check out Project Euler https://projecteuler.net/
OK thank you very much ;).
With Json.NET, you can do something like this: var rawJson = "{your json here}"; var jObject = Newtonsoft.Json.Linq.JObject.Parse(rawJson); var secondsLeft = jObject["payload"]["seconds_left"].ToString(); And then of course if you want to do math on that value or whatever, you'll have to convert it from a string to a numeric type.
Byte!
Two reasons really. The first is that comparing an enum is much faster then string comparison. When you say: p.difficulty == level That's a string comparison operation. Can be pretty costly computationally wise. Comparing enum's is like comparing integers, it's fast. Secondly it's about readability and re usability. Enums are generally global types, allowing you to use then in other methods/classes depending on their protection. The factory thing was just a joke. ;)
http://www.blackwasp.co.uk/CSharpFundamentals.aspx This might be useful.
I think the problem lies in "784,572". I guess you are a european? You use comma "," instead of dot "." for a decimal. From the Json specification, comma is used to separate the key and value. When composing the string, make sure the culture is invariant.
Framework Design Guidelines is the bible for .NET development.
This individual is correct! The originally included JSON had misplaced curly brackets, though that was a fault in my reproduction of the WebSocket messages, not the messages themselves. The bit [here](http://www.reddit.com/r/csharp/comments/333oyh/how_would_one_go_about_parsing_this/cqh9vep) was ultimately the solution to my JSON woes, but I may be forced to transition to using HTML, as it would seem as though the WebSocket client is consistently 1 message behind other sources (/r/thebutton's timer itself, [The Button Monitor](http://www.jamesrom.github.io))
where can I find this Application Log?
Here's a solution in two lines. Get the index of the first string in list1. Then check list2 at that same index to see if the second string is there. public static bool CheckMatchingStrings(string first, string second) { int index = _list1.IndexOf(first); return index != -1 &amp;&amp; _list2[index].Equals(second); }
I think there are a lot of other sites for programming that aren't Reddit.
As I've said in my other replies, there can be more than one occurrence, but I've already fixed it :)
Ahhhh, makes sense. Thank you. I'm sure it'll take me a bit to figure it out better, but that certainly helped. Thanks, again! 
If you're feeling up to the challenge, here are a few variations. Try to figure out in your head which one is different: (icyRain == false || tornadoWarning == false) (icyRain != true &amp;&amp; tornadoWarning != true) (!icyRain &amp;&amp; !tornadoWarning) (!icyRain &amp;&amp; tornadoWarning == false) !(icyRain || tornadoWarning == true) If you were writing a real program and not just solving a problem which one would you think would be appropriate?
... and have a working search feature. 
You realize that a boolean can be evaluated by itself? if (Bool1 &amp;&amp; Bool2 == false) Will only return "true" i Bool1 is true and Bool2 is false. it Evaluates that statement like this: if(Bool1 == true) { if(Bool2 == false) { ... } } Think of that statement like this: if(Bool1 &amp;&amp; (Bool2 == false)) or if((Bool1 == true) &amp;&amp; (Bool2 == false)) that's what your statement is saying. So if you have: if(Bool1 &amp;&amp; Bool2) it evaluates like this: if(Bool1 == true) { if(Bool2 == true) { .... } }
I only use msdn for help. Reddit is my news source
I don't understand. Why .NET 2.0 and 2005?
Look into Ajax. I personally have mixed feeling when it comes to Razor's HTML helpers that implement Ajax logic versus just writing the raw javascript yourself.
Does the + sign not show up in titles?
You need to run each word in the text file through some kind of function that changes it and append the resulting words to a new text file?
 var lines = File.ReadAllLines(inputFilename); This reads each line in a text file into an array, lines.
 var text = File.ReadAllText("textfile.txt"); var delimiter = new char[] { ' ' }; var numbers = text.Split(delimiter, StringSplitOptions.RemoveEmptyEntries); foreach (var number in numbers) { var parsedNumber = int.Parse(number); Algorithm(parsedNumber); } This is assuming each number in the text file is separated by a space.
Pluralsight is free for 1 month :)
I think you want a profiler. Visual Studio pro has one built in. Or if it's a Web app you can put Glimpse with the ADO plugging and hunt down slow pages/queries. Also if it's a Web app. Install New Relic and it will tell you the slowest queries and pages after running a while. 
Agree. The c#/dotnet news space is pretty fragmented. Stackoverflow is the undisputed champion for Q and A but to get a good feel of what is going on in the c#/dotnet space you have to keep track of a bunch of different sources. My regular sources are : * http://www.reddit.com/r/programming+dotnet+csharp * http://news.ycombinator.com * www.dotnetrocks.com podcast * http://www.hanselman.com/ podcast and blog It would be nice if http://www.reddit.com/r/dotnet+csharp aggregated all the relevant info but a lot is missed.
Yeah, that's what he seems to be thinking.
[Refit](https://github.com/paulcbetts/refit) is quite cool too!
No. Windows XP doesn't have any version of the .NET Framework installed by default. C# compiles to Common Intermediate Language (CIL), not native code like C, so in order for it to execute, it needs a version of the .NET Framework Runtime installed. The computer doesn't know what to do with it otherwise. There is work happening towards compiling CIL to native code, but it's still in progress. You could potentially try using a preview version of that, but your milage may vary.
I was just thinking this
If you're building mobile apps, I'd recommend reading [this article on building resilient clients](http://arteksoftware.com/resilient-network-services-with-xamarin/) RestSharp is great (although I haven't used it since I started building cross platform apps since it didn't support PCLs back then) but there's more to consider when building your api client. With all the great open source libraries out there, you really shouldn't be using httpclient directly anyway
The examples given on that post use the blocking methods although the author states that these classes do not block. For non-blocking functions, use WebClient.**DownloadStringAsync()** or HttpWebRequest.**GetResponseAsync()**.
This site is formatted very strangely on mobile. Also, suggesting there are only a few ways consume a REST api is kind of not true. They could probably drop the using statement disclaimer and just use the usings. Odd to have a disclaimer for 2 extra lines of code (1 extra depending on brace style). Beginners will most definitely overlook the disclaimer. And what others said about the misuse of async/await. 
&gt; a REST API uses the HTTP protocol to exchange JSON-encoded data that sentence has at least two factual errors
"Byte me!" FTFY.
Sure. Thank you.
I'd suggest purchasing a subscription to https://www.pluralsight.com
I'd start with the MVC tutorials on ASP.NET http://www.asp.net/mvc
Using RestSharp here. Works for what I need. 
Great article, RestSharp all the way!
I've struggled with oDesk in the past... The test they make you do before you can complete registration as a service provider there has got me stuck 3 times... I just don't know where to find the info for it...
Yes, buuuuut now I read over it, it doesn't actually cover this sort of thing... Oh how foolish I was a year ago...
That's the idea! :) 
There is a lot of 1.1 source code running around, most of it like you say isn't public.
There's only one meaningful advice for something like this: **Lawyer the fuck up.** Or differently said: Get a lawyer. This is a legal subject, and you should never take a legal advice on the internet. If a customer of mine would delay payment for 1 month, I'd immediately stop working for him.
No but the OP did post in the /r/csharp subreddit, that would imply that it is .NET app the OP is writing .NET Native might get you past the .NET Framework requirement https://msdn.microsoft.com/en-us/vstudio/dn629511
my suggestion is to build an installer with WiX and bundle the .NET Framework in the installer You can get the .NET Framework Redistributable from here: https://msdn.microsoft.com/en-us/library/5a4x27ek(v=vs.110).aspx
I would talk to oDesk. I know they have training and support. Its in their best interest to get you onboard.
That's a really interesting idea. I usually tend to avoid using dynamic, but in this case that might make for a pretty good use case. I'll tinker around with it, thanks!
Just create a temporary copy of the list. foreach(Bullet bullet in bulletlist.ToList()) But a bullet deleting itself from the list that contains the bullet... That's really bad style.
Thing is the application will get increasingly laggy because the list that is being copied will have a increasing amount of useless bullets.
Is that to my suggestion of making a temporary copy? That list would only be used for the duration of the iteration. The bullets would still be removed from the original list, which you will continue to use. Or is it to the second thing? If so, the deal is that the bullet is removing itself. Someone from the outside should remove the bullet from the list. The bullet should not be aware of the fact that it's in a list. The bullet should just lead a happy bullet life.
Which will most likely be illegal, when it's not clearly written in the contract. This is blackmailing.
Not necessary at this point as the client hasn't received anything as yet. I know that's most certainly *not* a good thing a year after the start of the project, but at this point, at least it offers me some cards to play where payment (or lack thereof) is concerned.
In the future, I would have a "half now, half upon completion" policy and charge exactly 2x the actual rate.
Nevermind found solution. bulletTracker = bulletlist.Count - 1; for (int i = 0; i &lt;= bulletTracker; i++) { if(bulletlist[i].update() == true) { bulletTracker--; } } 
The way web applications work is completely different from that of desktop applications. Instead of thinking about advanced things such as MVVM, security and other things, focus on the basics - learn how web application works. Learn HTML and Javascript. Build static websites and add some backend code. Go bit by bit. As hdsrob suggested, you can go through the http://www.asp.net/mvc. But that tutorial assumes that you have certain knowledge in web development. I'm writing a tutorial on ASP.Net MVC at http://www.dotnetodyssey.com/asp-net-mvc-5-free-course/ for absolute beginners on web development. I hope this tutorial may suit you. 
Here is an example of how you can go about it. It uses jquery and ajax... Javascript file to hold ajax calls: // Encapsulates data calls to server (AJAX calls) // Is in a separate javascript file // Uses Revealing module pattern // DataService is the name of the controller var dataService = new function () { var serviceBase = '/DataService/', myFunction = function (myText, callback) { $.getJSON(serviceBase + 'SaveTextToController', { myText: myText }, function (data) { callback(data); }); }; return { myFunction: myFunction }; }(); In a separate javascript file: // Detects event and calls function that makes ajax call $(document).ready(function () { $("#MyId").change(function () { dataService.myFunction($(this).val(), MyCallBackFunction); }); function MyCallBackFunction(data) { // Do something with returned data if you need to. } }); In a controller called DataServiceController: public ActionResult SaveTextToController(string myText) { // Save myText //if you need to return something return Json(myDataToReturn, JsonRequestBehavior.AllowGet); }
The puns sold me. Many thanks!
I'm gonna take this one too actually as a supplement.
Oh I get it now. You are a looking for some open source project to optimize. Maybe in [Up for grabs](http://up-for-grabs.net) you can find a fitting project?
Oh gosh that is extremely helpful. Thanks!
No problem! Hope it helps. Honestly I rarely use dynamic either, but it might make sense. I'd love to know how it turns out! Good luck. 
You beat me to it! :) As /u/Luuseens said, a common way to deal with iterating a list in this scenario is to iterate in reverse. Another option might be to use LINQ and combine .ForEach(), .Select(), and .ToList(), depending on what is happening inside. 
This, if the framework is missing from the target PC, but it's okay to install it if it's missing. However, if some IT rule at the client prohibits it or the target is a platform that the framework isn't available on, that's a horse of a different color. 
If you are using XML, why not got all the way and take advantage of the non-broken parts of the WS-* stack?
When did I say I aren't using the MS stack?
There is a nutshell version with 1064 pages - I don't think it is pocket sized :-) It is pretty good and uses Linqpad for the examples, which is pretty awesome as you can instantly load, edit and run them. I read it last year and it is very informative, seems quite complete. 
If bullet.update() removes bullets from bulletList, then your solution will skip bullets in any frame where a bullet is disposed. However, the skipped bullet would likely be updated in the next frame. Eventually, all bullets will be updated and dispose as appropriate, which would explain why your numbers match in the end. One way to test this would be to have bullets automatically dispose after x number of frames. Generate a known number y of bullets and watch what happens at frame x. By your logic, all bullets will dispose on the same frame. What I expect will happen is this: frame x - 1: y bullets remaining. frame x: y/2 bullets remaining. frame x + 1: y/4 bullets remaining. ... and so on, until only 2, and then 1, remains. Try this: int count = bulletlist.Count; int updateCount = bulletlist.Count; bulletTracker = bulletlist.Count - 1; for (int i = 0; i &lt;= bulletTracker; i++) { if(bulletlist[i].update() == true) { bulletTracker--; } updateCount++; } if (count != updateCount) { throw new Exception("Fewer bullets updated than active bullets."); }
It is very performance critical. This is part of a game I'm making and this is part of a method that will be called 60 times a second.
As you can see /u/rickstick19 there is some debate over when and how often to use the *var* keyword. :) Myself, I primarily stick with using it for anonymous types. I've also found myself occasionally using it when newing up a particularly messy type, but that just feels lazy when I do it. 
Are you attempting to POST to an ASP.NET form on another server? If so you may be running into issues with event validation, which pretty much lives to help people avoid this workflow. If you have access to the page you are POSTing to, you can disable event validation on that page. But keep in mind that means anyone else can then do what you are attempting as well. 
It is a rule of structs that you cannot access 'this' until all of the struct's fields have been definitely assigned. Setting a property requires you to access 'this', because "Center = center" is really just "this.Center = center". Normally you just set the field values directly, but you can't here, because the backing fields of the properties are inaccessible to you. Fortunately, the default constructor for a struct *will* assign these fields. So all you have to do is call it before you leave your constructor: public Circle(Vector2 center, float radius): this() { } See Eric Lippert's answer to [this StackOverflow question](http://stackoverflow.com/questions/3751911/why-are-c-sharp-structs-immutable) for an overview of why mutable structs are usually a bad idea.
In the old Win32 days, the advice from Microsoft was to spawn twice the number of threads as cores/cpus. The idea was that a fair number of them were likely to be blocked waiting on I/O, so having "extra" threads meant that most of them would be making progress. I'm not sure what TPL does in this case - it might be self-regulating, or it might just use some heuristic that is "good enough" for most cases. {shrug} You could always make it a configuration parameter. 
Just an fyi, Contains just calls IndexOf behind the scenes, though, I doubt there is any performance increase from calling IndexOf directly.
I played w/ Spoon way back when it was still called Xenocode. Tried to virtualize some old version of IE (probably IE6), but there were some fiddly bits that just didn't want to play nice. I'm sure it's much better now than it was 5 years ago, but there are several other app virtualization platforms out there, including Microsoft's own [App-V](http://www.microsoft.com/en-us/windows/enterprise/products-and-technologies/mdop/app-v.aspx). Holy crap is Spoon spendy; if you can avoid shelling out for it in the first place (and since this is presumably greenfield development, that should be possible), I'd suggest doing so.
Maybe come back when you actually have a question.
If you're asking for resources to learn C#, check out some of the links to the right. -----&gt; They should help you get started.
This book really helped me, I think it is exactly what you are looking for: http://www.amazon.com/Learning-Developing-Games-Unity-Beginners/dp/1849696586
My experience with spoon was also about 5 years ago but with some success. We used it to deploy desktop applications to windows xp boxes that were locked down. My only issue with spoon was that applications sizes went from 50 mb to 300+ mb. Other than that it worked without issue. VMware also has ThinApp, and it seems that there may be a few others as well. I don't have any experience with app-v but am curious how licensing compares. I'm not sure that there even exists an economical solution to the problem, other than possibly moving the app to the web.
Sweet, what version of Unity did you use with it? From what I saw, there are some big changes in the Unity 1 over the newest version, which is Unity 5. I'm likely to pick it up, but I wanna hear back from you on that first.
I gave google a shot first. There are literally thousands of answers in there, and I gave some of them a shot, and they didn't work out for me, which is why I'm here asking about it to see if I can filter it out to some degree. Thanks for the effort however.
Removing the setters may not be enough to make it immutable, depending on Vector2, but I agree.
This is a job for a stress test. create 10000 bullets, run the loop and use the visual studio performance profiler. Up it by x10 and repeat. 
 http://www.microsoftvirtualacademy.com/
That will be a decent book to learn with, but I'd also recommend getting a book on basic programming. It will be difficult to go from zero coding to the kinds of code you'll need to make a game in Unity. You need a basic understanding of loops, program structure, variables/data types, and so on. 'For Dummies' has a few books that might be suitable. I also strongly recommend Microsoft Virtual Academy, which is a totally free online video-based place to learn all aspects of development. They have a great C# beginner's course that starts by assuming you've never coded before. The good news is that programming is probably a lot easier than you think in many ways. The bad news is that programming well, and learning it deeply, is very challenging.
Why do you need to specify your own XDeclaration? That shouldn't be needed. As for your error, where do you get it? Include a proper error message (with stack trace, if relevant).
 using (var questions = await ApplicationData.Current.LocalFolder.OpenStreamForWriteAsync( "data.xml", CreationCollisionOption.OpenIfExists)) { XDocument xml = XDocument.Load(questions); You open a stream for **writing** to it, but then proceed to **read** from it.
Pretty poor considering its the 4th sentence in the article! Also 'HTTP protocol' - 'Hypertext Transfer Protocol protocol'. Like ATM machine and PIN number. As a programmer little mistakes like these speak volumes about the authors attention to detail. Coding is a skill where even the smallest of mistakes can cause systems to behave incorrectly with massive repercussions. 
Or CoreCLR.
Have one method that reads the XML. Have one method that manipulates the XML. Have one method that writes the XML.
I would say, try to solve a need using C#, like building a program that does something you need, start by breaking the problem in tiny pieces, then search on google how to translate them into code, afterwards put them into one program.
Well, XML is just an option as well. After all, REST just means you have no state between requests, neither that you have to use HTTP nor JSON or XML. You can implement REST over any other media and with any protocol you like.
I used Unity 4.3, but everything still works in Unity 5. To me, the big change is the new UI system, but you can find a lot of tutorials on Youtube for that . By the way, I had no previous coding experience before this book. :)
I think Unity is the best way to dip into C# if you don't have any development experience. I picked up "Introduction to Game Design, Prototyping and Development" which got me started on using Unity. Not going to lie - i skipped the intro to C# portion of this book so I can't speak for it. I think this book or the one Nieder pointed too PLUS a book specific for C# is the way to go. I know people that I pointed to Head First C# liked that book as a good intro
The tutorials and resources are great way to start. I'd also think of some relatively simple program and just start trying to write it. RSS reader, mp3 sorter, irc bot.. you know just something that would be interesting to you to try to learn. As you run into walls that require you to google take each of those things to delve deep enough into the language that you understand what you are doing. Don't just copy and paste code. Once you finish that program and have a pretty good understanding of OOP and c# basics you can probably venture into Unity. Just keep in mind that game dev is a vastly complex subject. Even though Unity simplifies it, you can get overwhelmed quickly. So just keep chipping away at it and accept that it's going to take time, practice, and patience.
Good point
I wrote a processor that would nightly have to process a couple hundred millions rows of CSV data. This was back in .Net 2.0 days, I used SqlBulkCopy. I had a custom CSV Data reader because of some issues with some of the files. Each CSVDataReader/BulkCopy was in it's own thread. I had a thread pool setup and configurable parameters to determine how many concurrent threads to run at a time. This was a nightly batch import, so we knew we were the only process running at the time. I basically ran metrics for a week, tuned in BatchSize, Threads, and eventually some pre-processing work that needed to be done before bulk insert. It wasn't "dynamic", in the sense that if you removed CPUs it wouldn't self balance. But it was easy enough to alter a .config, and tweak it as needed. That said, system was incredibly fast. I/O was always the limiting factor. This was with hardware from 8 years ago. We had started the project by allocating 12 hours to data import/massage/ETL/Validation. In the end we were finishing in about 3 hours. I guess my suggestion is don't over sweat it. Keep is simple and keep it easy to configure. I had started down a path were I monitored and spawned threads based on resource availability, but determining CPU availability vs IO availability got complicated. And I felt it end up being some nightmare support call where people can't understand why it was working fine last night, but tonight, it had issues. 
From my experience, it only really makes sense if you're following the MVVM design pattern. Picture the scene... You have a View, tied to a View Model and you need a button to be wired up to a method in your View Model, you could be tempted to use an event, but stop right there. Think of the children! If you were to use a command instead, your button would then bind to the command which belongs to the view model instead of using a straightforward event handler in your view. Why? You ask. Well the answer is simple, because of dependencies. As soon as you have a strong dependency between your view and your view model, then the benefits of using the MVVM design pattern start to fall away. Your views and view models should be as decoupled as possible. You don't want to be calling methods directly from your view, you instead need to embrace the beauty of Bindings. Which is where Commands come in. In an ideal world, your view only needs to know what view model to set it's DataContext to, everything else is done using bindings. This allows views to be changed without having to worry about screwing up the view model. In most circumstances, your command would probably be simply calling a method in your View Model. Sure, it's more code but it reduces the dependencies and your application remains nice and decoupled. Heck, you can even make commands reusable for other view models. All that said, MVVM is a design pattern, it's a guideline, not a rule. Do whatever you are comfortable with.
... you click on the tab? 
Sadly it kind of is. It has progressively Goren better, but not for a few years. You can probably get a wpf 4 book used cheap. Things like reactive ui and mahapps have made life a lot better and wont be in any wpf books but I wouldn't start a project without a modern mvvm framework and mahapps.
VS automatically does this on things with bodies. There is a little + slightly to the left of the name. Maybe you have this disabled somehow?
&gt; reactive ui and mahapps Thanks - I'll check these out. I wanted to start reading tonight, so I'll just go with the book I have.
This may help: https://visualstudiogallery.msdn.microsoft.com/6c3c5dec-1534-4c42-81b1-cfd4615fd0e9
Thank you! Once installed that did it... 
You've gotten some useful answers, but to answer the "why" it differs it's because two different teams implemented code folding for two different languages. They may have thought some foldings were good useful or they may have thought some would have cluttered the outlining bar. Or they may have just implemented something obvious and never revisited that decision. Or other priorities may have stopped them from coming back to it. Basically something in VS needs to provide outlining regions to VS for it to collapse the regions. That can be the language implementer or it can be plugins to VS. VS just makes the regions it's been told about collapsible. You can go pretty crazy with the things that are collapsible or you can be pretty conservative. For Python Tools for Visual Studio we did a quick and obvious implementation which worked for a long time. But eventually the requests to start making things more collapsible bubbled up high enough on our requests to expand what was collapsible. In our recent builds now things which span more then a few lines are collapsible. We could of still made everything collapsible but it didn't seem to make much sense if they weren't that big. So ultimately a combination of what's easy, what's been done, what seems to make sense, and other priorities end up controlling what's collapsible.
To hint that methods should be more compact?
Definitely grab mahapp. Creating a non ugly as sin app makes learning go much easier
Parts of a command and control system for the danish navy, electronic patient records, a system for keeping track of how much natural gas to buy for a distributor, lots and lots of login systems, a car financing platform etc. Naturally, most of it was in collaboration with others.
doesn't sound like the right behaviour. be sure to 'send a frown'. 
.NET PNG signing wrapper library for a Delphi app (my first paid project), various data collection apps for Windows Mobile on my previous job, maintaining internal employee finance app for my current job.
I would split it apart, under a single transaction, to enable re-use if you end up needing to add authors elsewhere later.
In progress: - Software, specialized for my company. Something with 3D Simulation and stuff like that - Virtual reality (occulus rift) game -&gt; writing own gameengine. This project is a collab with many artists and designer.
I've used EF before for something similar and kept having issues when trying to update related entities. Hence I'm now trying something I have more control over.
I don't think that it is sad at all. Desktop applications did not change in the past years, maybe it will change with universal apps. So if a 4 year old book is relevant today, that means that it is a stable, well built framework. Yes, today we use that with some game changer things like mvvm framework, but the basics remains the same. It so much better than for example AngularJS which will be a whole new framework when 2.0 comes out.
Overall it simply is 😈
&gt; ... but to answer the "why" it differs it's because two different teams implemented code folding for two different languages. What reveals a bad organisation structure! Even if there are different teams, the product should behave consistent. Afaik the main problem - besides C++ is quite difficult to parse and you cannot use intermediate code (unless clang has come up within the last years) - is, that the editor components had completly different code bases... so it was probably much harder to mark different AST structures as foldable and so on.
As shareware: Rental Property Management software Photo printing software 1st person shooter for the iPhone As an employee: Workers Injury management desktop and web apps(2 different countries) Fruit packer real-time control Document Management Websites 
Honestly, the other two comments that code contained within the conditional sections should be extracted to their own methods for readability are spot on (sixothree and AngularBeginner.) Massive conditional blocks and / or heavy nesting are considered bad form in C# (although, I am happy to admit I'm often guilty of this and it is a timely reminder!)
Not quite. Moat higher level languages actually run inside their own runtime/virtual machine. So the compilation creates an intermediate bytecode, which is then interpreted by the VM at runtime. Some VMs will JIT compile to machine code at runtime for performance. There is also the factor of the compiler: not all will create the same machine code for equivalent programs.
I'd absolutely love to check out your repo. I was completely unaware that SQL server could search on XML, too. That's very interesting. I'll write an update once it's done, but I went with a pretty generic "ActorId" approach where that Id allows the modified record to be searchable. Kinda still a bit too wonky for my tastes, but it's a lot better than what I had.
High-level languages are not slower than low-level languages. This is an urban myth. They **can** be. Just as low-level languages can be much slower than high-level languages.
If you spend any other time in different editors the behavior is similar to the C++ editor. Brackets, Atom, Sublime, Notepad++, etc, all behave in a common manor. The C# VS IDE experience is really the only odd man out here. This odd man out behavior followed to the javascript IDE experience as well. So yes smaller methods are preferred, but honestly the IDE experience should be consistent.
Do you mean interpreted languages like python and JavaScript? They compile on the fly. Lower level languages give you as a programmer more control over what happens, so you can optimise the code. They are typically compiled before they are run. C# is actually a bit of a hybrid.
&gt; C# &gt; Compiler = machine code | Assembly &gt; Compiler = machine code C# is not compiled into machine code. C# is compiled into another language called MSIL (Microsoft Intermediate Language), as are all the other .NET languages. C# and VB, for example. both produce MSIL and the Just in time Compiler converts that to opcode that targets a specific hardware architecture at runtime. That is where the term Common Language Runtime comes in. It's exactly what it sounds like. This incurs some overhead, as you might imagine. Its very mature and optimized to be very quick, but on the scale of processor throughput its not nearly as fast as fully compiled native instructions, which is what Assembly languages exist to produce. In most applications you wouldn't notice this difference. In high resource use scenarios, when the efficiency of execution is measurable and critical to performance (drivers, real-time IO or Network operations, Operating System level APIs, etc) native code runs circles around interpreted languages like .NET, Java, python and the like. Read through the steps of the managed execution process: https://msdn.microsoft.com/en-us/library/k5532s8a(v=vs.80).aspx
Sure it is. For refactoring that's more than enough, and there are no other times where you'd need it (except of too long code which needs refactoring). And it's absolutely the same thing as collapsing a scope. You just defined the scope for collapsing yourself.
Thanks, good explaination!
Really, it's not. It's very easy to miss braces if the blocks are close to each other. I had this problem a few weeks ago when I was tasked with replacing a old library that for some absurd reason used OleDB to use a custom API (that of course was nothing like ADO which meant a lot of things needed to change). However this was used in single method that spanned 800 lines of code with lots of branching and for loops. I had never seen this code before that day, and I first tried using the code hiding, but it was very much not convinient at all so I installed the plug-in mentioned in this thread. So how about this: you're wrong. [This is C# and C++ compared](http://i.imgur.com/LFHF3W1.png).
I'm doing pretty much the exact same thing for 3 years. Most of the system is in Delphi :(, but I'm slowing porting it. It's a struggle, since it's just me and they want features to be added so there's not much time to leave Delphi behind. Any of the peripheral applications I've been writing in .net though. Credit card processing, Texting, and Loyalty system were all C#. The core system is in Delphi (cringe) 6, with parts in Delphi XE7. I wanted to port the core from D6 to DXE7, but the move from ANSI string to UNICODE string has proven to be a bigger issue than I anticipated, since it would mean refactoring A LOT of things I expected to just work. 
Temporarily, I'd say try clicking the back button. It usually takes me to the last place my cursor was.
I am not wrong. The picture shows the **default** collapsible code blocks. But you can collapse the code absolutely the same in C#. You just have to do define the collapse-scope manually yourself.
Or use ctrl+x and ctrl+v.
I agree with all this and would also add that WPF is very underated. Testament to this is the material design restyling of the standard date picker see [Dragablz](http://dragablz.net/2015/04/19/material-design-datepickercalendar-style-for-wpf/). I have been using this and mahapps to demo my os project [Dynamic Data Demo](https://github.com/RolandPheasant/Dynamic.Trader).
Imagine you're being given driving directions. You can be given directions like "when you're 2.5 seconds into the curve, rotate the wheel 27 degrees left over 0.7 seconds". Or you can be given them like "turn left after you pass the right turn to Knobhead". In both cases you translate them into the movements of your body, but if you're on a racetrack you can't be fast enough without the first kind of directions. They omit everything not directly related to your actions and describe the actions you have to take as precise as possible. You could rewrite the directions of the second kind into the directions of the first kind beforehand, but they will either become very brittle (what if the left turn lane is closed and you have to make a U-turn further down the road instead?), or they become very detailed and verbose, trying to cover all possible situations. That verbosity is what makes them slow, since you have to go through a bigger list of instructions.
I've written the next Facebook (but different, and better), the next Google (but different, and better), the next Slashdot/Digg/Reddit (but different, and better), and a system that lets "normal" people build websites as good as anything a coder can build (but different, and better). I'm surprized you haven't heard of me, I'm sure all of those clients went on to be billionaires.
I though I'd contribute to this conversation instead of saying the same thing as everyone else is. Most often short methods are the way to go but there are legitimate cases where long methods can be justified. Consider a method which could be divided in three parts. But for the parts to function properly you need to call them in order. Sure you could refactor this and put a disclaimer that they always need to be called in order or you can prevent anyone from being able to call them in an unordered fashion by putting them in one method. Also if you need to understand it later you don't need to go back and fourth in the code base as much. What I'm saying is things aren't black and white, refactoring isn't always the best thing to do. There are nuances to everything and sometimes a longer method and some regions are better for readability! 
This implies 3 tables: Book Author Book_X_Author (People name cross-reference or join tables many different ways. I just picked a random one, name as you see fit.) Books and authors are independent objects. Every author that appears in that List&lt;Author&gt; in your Book object has one row in the X table. Whether you can add new authors when editing a book, or just attach/detach authors from books, is probably dependent on your UI. Without knowing how that is meant to work, I would say that a Book's Save() method would be doing an insert/update in the Book table, and managing rows in the X table to attach authors to books.
Thats not a 1:1 comparison. IL compilation strategy happens completely out of the developers control, and is variable based on a number of factors that the CLR takes into account, memory management being the obvious one. JIT output is practically never analogous to native compilation. He asked for the difference, the difference is that managed code is never compiled the same way that native is compiled, and incurs a performance penalty 100% of the time as a result, regardless of how large or small. That is not a secret. http://www.c-sharpcorner.com/uploadfile/ashish_2008/clr-execution-process/
Just curious. How many people do you have working on this?
No, just ctrl+m, ctrl+h. [Imgur](http://i.imgur.com/wjvIu7v.png) - Just like your C++ pictures. No extensions installed for this.
&gt; Consider a method which could be divided in three parts. But for the parts to function properly you need to call them in order. Sure you could refactor this and put a disclaimer that they always need to be called in order or you can prevent anyone from being able to call them in an unordered fashion by putting them in one method. Also if you need to understand it later you don't need to go back and fourth in the code base as much. This still needs to be refactored. Those methods require a state (else the order wouldn't matter), so this state should be passed to the arguments. It's not black and white, but it's also not "uh.. duh.. no idea, just leave the method long."
Just me (on the backend/ .NET side of things). There's another part to this, a huge Power Basic system that's really a really complex scripting engine (and a set of programs that work together to process these scripts) for the front end application. So the PB stuff is maintained by another contractor (very part time maintenance only), and my client does all of the scripting for the front end. We're just at the beginning of shifting that entire front end system to WPF, where I'm writing the back end code, and the client is doing the XAML layout, but that's another 3-5 years to completely convert that. 
If you've ever shopped for a car online, whether it be Craigslist, eBay, Autotrader, CarMax, etc and on down to the local dealership, code I've written helped get that vehicle data from the dealership's systems to that website. 
As a general rule, compiled languages, like C++ are faster than interpreted languages, like C#, because turning the interpreted instructions (MSIL) into machine code adds an extra stage to execution. However most modern PCs can run code very quickly, and it's normally far more important, when considering performance to concentrate on big picture issues (such as using good algorithms), than to worry about low level optimization. When comparing a compiled high level language, such as C++, to low level assembly code, things get more complicated. It is a myth that assembly is always faster. Some modern compilers are very good, and can easily implement some quite subtle and complex tricks that are difficult for humans to replicate. So whilst it's always theoretically possible for humans to write assembly that's as fast or faster than the compiled code, in practice, the compiled code will often outperform hand-crafted assembly.
I did not associate memory allocation with method calls. I laid them out as separate things that can be slower in .NET. The main point of my post is about the *multiple* layers between your application and the OS and the *additional* code/checks/validation injected on your behalf. There are many things the CLR peforms for you and I can only recall array bounds checking, math (if checked), exception handling.
Much of what I do is automation of manual processes that our company does. Anything to bring down costs or generate revenue really... So automating of small things like the on boarding of new employees, data processing, etc. Most interesting was a system that I built as a side project when we had little going on. You could point the app at a database, and assuming it had foreign keys, primary keys, etc. could automatically build reports of "interesting" data connections that it found. We turned it on our billing and payroll systems and found some correlations. Unfortunately building something that tells people that they're overpaid for the amount of money that they bring in, tends not to go over too well and the project was "forgotten". Also unfortunately, they own the code. Otherwise I would totally sell that thing and make... Well probably nothing but hey, I would TRY to sell it...
I don't think I'm nitpicking - you state that languages tend to have a single usage, either compiled or interpreted. This is just not true. Take C++ for example which you state in normal usage is compiled to native machine code. Well, you also consider languages that compile to bytecode to be interpreted languages, even if they are JITed (like C#). Well what about LLVM? It can compile your C++ code statically like GCC would, or it can give you an intermediate form to be JITed like C# or Java (and this *is* done in "normal usage" as the JIT compiler can optimize unneeded branches out at runtime). In addition, I defend my argument in that there are quite a few languages that don't have a specific execution implementation. While you state "In normal usage C# is compiled to MSIL," that's becoming less true now that .Net Native is a thing. The language itself has not changed due to the introduction of .Net Native, yet now it's no longer an "interpreted language" as you call it. Other examples - I already mentioned OCaml, which ships with both bytecode and native compilers. Common Lisp has compilers to Java bytecode, to C, and native. Haskell with GHC compiles to C-- - you argue that a language compiled to an intermediate stage is an "interpreted language" if the resulting code is interpreted by the processor. But this C-- code could be printed as C code for later compilation with GCC, converted directly to native machine code, or converted to LLVM bytecode. My point is that while there *is* a distinction between high-level and low-level languages, you cannot describe languages as "compiled languages" or "interpreted languages". Perhaps you could a decade or more ago, but different use-cases mean that many languages will have many implementations available that use AOT compilation, JIT compilation, or interpretation, and thus calling a *language* "interpreted" or "compiled" makes no sense, because the language itself is neither. The *implementation* is one of those things.
This article incorrectly states that you can't use HttpClient with a .NET 4.0 project. I am doing exactly that right now including doing the requests asynchronously. Looking at my installed Nuget packages list, I am using Microsoft.BCL, Microsoft.BCL.Async and Microsoft.Net.Http to make this happen. Not sure why they would suggest you can't use HttpClient in 4.0.
My major projects in my career that are still live and that I can still remember. * https://drugcompare.destinationrx.com - C# * http://www.medicare.gov - C# * http://doughnuthole.aarp.org/ - C# * http://www.loyaltydice.com - C#/Rails/PHP/JS/ObjectiveC/Java * http://www.getgumball.com - Rails * https://www.pillowhomes.com - Rails/Angular
&gt; I don't have to worry about memory leaks or fragmentation anymore great response and lots of good information. I don't mean to contradict the information you've presented, but I always feel the need to point out that memory leaks are still possible in managed code but you certainly can worry about them less.
If you use EF, you can use this [Extension](https://github.com/loresoft/EntityFramework.Extended). It has an Audit Log capability that can track EF changes to XML for later storage. Also, it's pretty trival to make your own if your using EF. I wrote a custom Context that logs to Audit Log tables which stores the Entity's Name in one table, and the property name and the new value in the other.
How time consuming was writing your own game engine
I guess it makes sense, you're 12 years in. I've considered doing the same thing, but haven't found the time or motivation (it's not critical). If I were to take a similar approach, I can probably start doing the same. In some ways I have, but I've stayed away from replacing forms within the core application. I have added new functionality that wasn't supported, especially anything that uses web services, since Delphi 6 has very basic support for this and in most cases doesn't interpret complex WSDL correctly. The class it generates usually doesn't work, since there are missing objects/methods etc. 
You're very right, they are still very possible. A GC helpfully eliminates an entire class of leaks (and a very common class at that), but it's still important to remember that long lived objects that hold onto other objects longer than it should can leak large amounts of memory very easily. It's also important to remember to get your pinvokes correct and to not leak native handles, which are both ways that memory can also be leaked. 
spot on. Life is much easier with garbage collectors but I've been bitten enough times to be compelled to remind programmers that memory management still must be taken into account. Solid explanation.
Excuse my ignorance but did you program that first one in C#? I'm completely new to this and didn't realize that you can do web design with it?
This. I also have a ton of one-line methods. What should worry you is having too few, or having a method try to do too much. Remember, even those lines that you aren't calling your own method, you are often calling someone else's (like reading input, writing output, etc).
Check out ASP.NET
I assume you mean you're using the Xpo ORM product?
Not you are probably not. A lot of method is a good thing. One method is a move, an action. You are doing something. A lot of method is a good part of clean, self commenting code.
Certainly not, some schools of though get pretty extreme and even say methods can only be X lines long otherwise the method is doing too much. When I have a lot of methods I have a stack I can easily trace problems in. 
Pretty normal. At some point you want to think about moving related methods into a class. But you're always gonna have lots of methods...
Yes, I have never really written a program this big before and methods are so helpful it's unreal :D
seems like a reasonable next step. is it a forms app or maybe wpf?
SRP (Single Responsibility Principle) kind of forces us to write tons of short methods. So it is good if you have small methods, less chance of you breaking SRP.
I'm not sure I agree but I do absolutely hate the use of var in teaching examples. It makes it so much harder to understand what's really being newed up or returned. In real world var is just fine because there it's easy to discover what's really happening. But people demonstrating new technologies seriously need to either stop using it or explicitly describe what is being returned.
A List&lt;Control&gt; would be more efficient as you could .Add controls on demand at run time. With a varying number of one type of control within a List you could identify each of them uniquely by bolting on a index number to its .Tag object property - datagridviewsList[x].Tag = x; As well as setting many properties of a control that is within a list such as .Location and .Size you could assign one event handler to handle all the controls in the list - datagridviewsList[x].CellClick += new System.Windows.Forms.DataGridViewCellEventHandler(datagridviewsList_cellClick); Within the event handler method get the control that fired – &amp;nbsp; static void datagridviewsList_cellClick(object sender, DataGridViewCellEventArgs e) { if (e.RowIndex != -1) { DataGridView thisDatagridview = sender as DataGridView; Int32 tagIndex = Convert.ToInt32(thisDatagridview.Tag); switch (tagIndex) { case 0: \\ do stuff with the first run time created datagridview break; case 1: \\ do stuff with the second run time created datagridview break; default: break; } } 
You should put this in a blog. It's incredibly useful reading!
You're that genius kid with all the yachts, aren't ya? Man these whiz kids have it so easy these days. They just type a couple keys and the computer starts spitting out money! (I've turned down a bunch of those genius entrepreneurs too. Sigh.)
What I have done is to use the drag and drop designer to first refine a layout of controls on a Form. When I am happy with how it all looks I note the controls .Location(x,y) and .Size(x,y) numbers. Delete the test controls from the Form and apply them to controls created at run time.
Yeah, tag could be good. Perhaps if the order of the data array is already known and it's consistent each time OP could set the tag property of each control to be the index of the data that should go in that control. Then it would be a matter of just looping through the data array and grabbing the control with the tag that corresponds to the current index. Looking at some code now, it looks like there isn't a built in method to find a control by tag so OP would have to write a custom way of doing that. Another option would be to instead set the control name to the index of the data but then you end up with ugly control names. If I were doing this I would use a dictionary to hold the data. The key could be used as the name of the control the data will be placed in. From there you would loop through the collection of keys and use the built in method to grab a control by name. You then have the control that'll hold the data and the key for the data so you just have to cast the control as whatever it is and then stick the data in it. 
To add on, you can do a lot of crazy stuff with C++ using pointers and pointer arithmetic, but you also have the possibility of really going off the rails and possibly messing things up outside of your own program. C# allows a lot of trickiness, but on a more controlled level.
This is oversimplified. But with interpreted languages there is a program running on the cpu, é.g. Java virtual machine that's running your program. In compiled, your program is running directly on the cpu. 
I have written a SQL Server tuning &amp; monitoring tool which I now work on full time: www.minidba.com I like being able to use it to learn new technologies (mvc/bootstrap/angular for the new web enabled version) as well as keeping my .Net pretty current.
Does it scrape from the internet then?
It works. 451 buttons. From the designer? You're a much more patient developer than I am.
It wasn't as painful as you would think, I used the tab index property to tell me the alt code I had to use, and thanks again
It's not perfect, but what issues do you have in mind?
Did you do it like that because you wanted to, or because you didn't know how to dynamically add buttons? 
Right, I meant how do you figure out the location for controls you add at run time? Or do you just avoid having to create additional controls at run time? Sorry, I phrased it poorly in my last comment. 
Yep. It scrapes 2 trusted sites and compares the info to make sure it matches. Dont want to give people bad info, especially and traveling with firearms
That's okay, I'm mainly interested in how you decide on the location for the control to go. Do you just do trial and error to figure out the x and y coordinates to put the control at? I personally can't think of a way I would go about adding X number of controls at run time and having them positioned and sized in a fitting way. 
Think you might need a little DefaultIfEmpty when looking for the domain admin https://msdn.microsoft.com/en-us/library/vstudio/bb360179%28v=vs.100%29.aspx
Never actually written lambdas for EF, but I'm assuming what.tbl_customer.tbl_user_pass_list.FirstOrDefault().Usage1 == "Domain Administrator" Isn't working because FirstOrDefault() returns null for classes when no objects are present in a collection. And the SQL is doing an inner join with an added clause ensuring Usage1 = 'Domain Adminstrator' Or it's an added where clause. In any case, try a [left join.](http://stackoverflow.com/questions/5537995/entity-framework-left-join)
I would like to mention that NGEN doesn't remove the need for the JIT.
It doesn't require garbage collection but it does require automatic memory management. PHP which is a bad language with a broken implementation has the same need but uses reference counting instead.
Congratulations that looks useful! Is it on git it so I can check it out?
It doesn't matter to the language definition. That the memory process fails is of no importance to the language or the compiler. It's a runtime issue.
Thanks, check the video descrip
Will do, thanks
Oh sorry I'm on mobile I didn't even realize it was on YouTube haha cool
It is still under construction. I am working on it with a friend now since 1 year. We are still developing.
I'm a little wary of using external libraries because I don't know how they work or what exactly the functions do but I'll have a look at this one. It's prettier for sure :)
Read the documentation.
What is a *listed* combo box? I have never heard that term. Maybe I'll learn something new today. :) Are you maybe referring to a combo box where you have set the .LimitToList property to true?
Couple of things. First, the easiest way to accomplish what you are doing, if you have control over where the Files you want to zip reside: ZipFile.CreateFromDirectory(sourceDir, targetZipFileName); That's the simplest way to use this to zip up a bunch of files. If you need to be more specific about what to include/exclude from the zip, and our source file list is coming from multiple locations, then you need to create a ZipArchiveEntry (like you are doing) for each file, and then stream in the file contents. In this code, all you are doing is creating the "ZipArchiveEntry" objects ( via zip.CreateEntry(string) ) without any content. This is like starting a new e-mail and setting a title only. You need to give it the body now. zip.CreateEntry(file); This actually returns an object, you could grab that, and then use the .Open to get a stream to the Entry, and then fill it. But that's a lot of work if all you want to do is add a file, already in the file system, to a zip. it's much easier to use the Exension method CreateEntryFromFile: using (ZipArchive zip = new ZipArchive(newzip, ZipArchiveMode.Update) { zip.CreateFromFile(pathToFile, fileName); } If you need to know how to do this using streams I can help you with that, but generally, this would only be if you were trying to get something in memory into a zip. Like say from a SQL Query, or something you modified in memory and didn't want to persist to disk before adding to zip. 
Are you going to go with WPF and MVVM when it's all done?
I can't believe I missed the .createfromfile option, it's right there next to .createentry! Thank you for this!
I use Visual Studio too. :) Have used drop down lists extensively. The wording just threw me, no worries. Can you post the code that is trying to set the value of the drop down list?
Are you asking us how to use the [WebBrowser.ShowSaveAsDialog\(\)](https://msdn.microsoft.com/en-us/library/system.windows.forms.webbrowser.showsaveasdialog\(v=vs.110\).aspx)?
Covariant return types for the win!
I completely agree. I think it'll pay off for them too; it's good to know from a developer's point of view what they're prioritising. 
No. Also, I figured it out so nevermind.
Json.net so solid even MS has decided its better than their own library. Installing json.net is the first thing I do on almost every project.
A word of warning: if you try to take on a side project that you aren't interested in or passionate about, you're probably gonna fail. Just keep that in mind.
is that windows 10 ?
I've wanted pattern matching for years, ever since I encountered it in functional languages, I've even gone as far as try (emphasis on the try) to implement this myself. I find it interesting that they are taking case classes from Scala with their record class approach. Hopefully this will make it into the C# 7 release because it was something that was on the list for C# 6.
Only if we can do cool things like value swapping in python. (x, y) = (y, x)
&gt; the mistake of covariant arrays Well sure, but without generics strictly invariant arrays would have made the language hard to use. How do you create custom collections? Linked lists? &gt; anonymous methods should not have existed. Lambdas should have been added directly You mean delegate syntax. Lambdas and delegate syntax both create methods and classes as needed for the closure logic, and convert into delegate types. Lambdas can convert into expression types as well. &gt; add/remove for event accessors were probably overkill but that's pretty minor. Well, add/remove is all an event is. Besides that, it's just a field of delegate type. An event is to a delegate field what a property is to a field in general, really.
Well there are a few weak points, honestly: * The rather poor switch syntax is inherited from C and, in a way, made worse by forced break statements. * Enums, while stronger than in C or C++, are still kinda low-level sucky. * The horrible precedence mistake of &amp; vs. == is carried over from C. Come on!
Multiple return and immutable types would be amazing, and having general pattern matching support (separate from record types) would be icing on the cake.
&gt; Well sure, but without generics strictly invariant arrays would have made the language hard to use. How do you create custom collections? Linked lists? Covariant arrays means you can cast string[] to object[] which is wrong. There is no problem with collections. &gt; You mean delegate syntax. Lambdas and delegate syntax both create methods and classes as needed for the closure logic, and convert into delegate types. Lambdas can convert into expression types as well. The feature is called anonymous methods and I know all that. I don't get your point. &gt; Well, add/remove is all an event is. Besides that, it's just a field of delegate type. An event is to a delegate field what a property is to a field in general, really. That's not true. event is access modifier that can only be applied to delegates. add/remove makes it equivalent to properties but more often than not it is used without add/remove.
Couple of ways to handle this: 1. If your central arcade is launching the sub-game, it can use: var process = Process.Start(theSubGame); process.WaitForExit(); yourPrimaryForm.Activate() 2. If you control the minigame, you could have it find the arcade process and bring it to foreground: System.Diagnostics.Process[] processArray = System.Diagnostics.Process.GetProcessesByName("YourProcess"); System.Diagnostics.Process theProcess= processArray[0]; SetForegroundWindow(theProcess.MainWindowHandle); The import for SetForegroundWindow is: [DllImport("user32.dll")] static extern bool SetForegroundWindow(IntPtr hWnd); Some modern Win OS's can have issues with an app trying to force itself to the foreground. Google for workarounds. 
[All I can say is.....](http://fitnesspainfree.com/wp-content/uploads/2013/11/Jurassic-Park-33-Hold-on-to-your-butts1.jpg)
This won't help you right now, it will help you in a few weeks (or months, depending on quickly you pick things up). Honestly, don't even bother looking it up for a little while. But once you start learning about collections, and forms, and assigning forms values from variables, etc. Remember: ObservableCollection https://msdn.microsoft.com/en-us/library/ms668604(v=vs.110).aspx I *REALLY* wish I had learned about this earlier...
how large of a set of coordinates? opengl would be a great choice for drawing triangles, but you could probably get away with doing some simple software rendering if you only have like 10-100k points.
Yeah! I have used it on and off but its stable enough for a free OS now, boots up really fast too
Be curious. Don't be afraid to get "off track" and just follow a rabbit hole for awhile. 
if you have a small project servicestack is free and cant be beat. its great
Thanks! This is exactly what I needed, although in the `yourPrimaryForm.Activate();` part, what type is the `yourPrimaryForm` value? Just a System.Windows.Forms.Form?
Yes, in that case it assumes a Winform base. In the case of xna, your surface may not be a Windows form. In that case grab the hwnd and use the setforeground import mentioned above.
As /u/aloisdg said, there are a lot of existing open source projects that could use the help. .NET needs more people to participate in the open source scene, so if you are serious about it, I would recommend finding an existing project that you like or that needs some help and participating in that. And who knows, if things go well, you might even end up being a core contributor or maybe even the maintainer for a popular project. If you are looking for projects that need help, try http://up-for-grabs.net/. All the projects listed there have issues/tasks geared for new contributors.
Keep on keeping on buddy! And remember intellisense is your friend!
While this is good advice, sometimes I can be really inspired by someone else's need and become passionate about it. I once wrote a whole library to deal with permutations that someone at work was struggling with, I would have never spent so much time on the problem but for his need, and I was really passionate about it. Sometimes asking for ideas is a GREAT way to start.
Nothing more satisfying than getting that "Hello World" project up and running. Good work!
I just need the td tags but eventually I will need to put it into a database so I need to be able to iterate.
what will you want from the td contents? Everything or just the text if you just need the text you can try HtmlDocument doc = new HtmlDocument(); doc.Load("test.html"); var nodes = doc.DocumentNode.SelectNodes("//td"); foreach (var node in nodes) { Console.WriteLine(node.InnerText); }
Just text as it will eventually put in to a SQLite database
I do alot of CMS development (Sitecore, Umbraco). The site I'm working on now has a custom MVC web app alongside the CMS to capture warranty claims from users and allow admin to approve/reject/edit claims. Users have their own login and can view the status of their claims.
So I like to think of pattern matching as a switch/if-then-else on steroids. It can be used not only on value or of types but of structure as well. When paired with recursion, it becomes a powerful tool. We can use pattern matching and recursion in simplifying basic math. If we have addition, constant and subtraction we could use pattern matching to deduce. Note that I am taking some of this from the examples on the article while modifying it a bit. We will start our classes: abstract class Expr; class Double(double value) : Expr; class Add(Expr left, Expr right) : Expr; class Sub(Expr left, Expr right) : Expr; So what do we have? Well we have a base abstract class and then classes that inherit from this. It is normally called an abstract data type and it is very useful in pattern matching. Now let's show the method we use pattern matching in, do note that I'm not going to use C#'s proposed syntax as it is ugly and doesn't matter, as it is the concept that is important double Derive(Expr e) { match e { | Constant(x) -&gt; return x | Add(x,y) where x is Constant &amp;&amp; y is Constant -&gt; Constant(x + y) | Add(x, y) where x is Constant -&gt; Add(x, Derive(y)) | Add(x,y) where y is Constant -&gt; Add(Derive(x), y) | Sub(x,y) where x is Constant &amp;&amp; y is Constant -&gt; Constant(x - y) | Sub(x,y) where x is Constant -&gt; Sub(x, Derive(y)) | Sub(x,y) where y is Constant -&gt; Sub(Derive(x),y) | Add(x,y) -&gt; Derive(Add(Derive(x), Derive(y))) | Sub(x,y) -&gt; Derive(Sub(Derive(x), Derive(y))) } } So what this does is the left side of the "-&gt;" is what you are checking. You'll see that on the we are checking on types, which would be equivalent to `x is Add` but we also get access to the structure of the type. We don't have to cast and we don't need to create variables, we get that for free. But we aren't limited to that, we can use conditions on top of that. Pattern matching typically is greedy, meaning the first match will be the one that is used. You will want to keep the more exclusive conditions at the top and the least at the bottom. In this example, we have the constant and if that is the case then we return the value of x. Notice we have the structure of the type as well as its arguments so we can just go ahead and use x instead of casting and calling `GetValue()`. Then we check to see if `e` is an `Add` . But we do more than that, we want to make sure that both our parameters for Add are constants. If so, we want to just create a constant with the x and y added together. If it isn't, then we want to check to see if either x or y is actually a constant. If either of those are true, we then recursively call Derive on the Y side until we get to a constant and then add it together. We do the same with subtract. At the very bottom, we are doing Add and Sub without any constraints. That means that we have something like `Add(Sub(Constant(1), Constant(2)), Add(Constant(1), Constant(1)))` which is the equivalent of (1 - 2) + (1 + 1). I hope that helps you understand better. If not, let me know and I can try a different explanation as this one isn't that fleshed out and I'm about to go to bed.
Why are you using Express? Use community, that's free too :D
&gt; Use community, that's free If you're a private person.
It's free for small teams, too, and anybody in academics or other learning environments, and anybody writing open source.
You can use it for commercial projects too if your company doesn't exceed some limits like: * up to 5 users * &lt;= 250 PCs * &lt;= 1m $ annual revenue
If you don't like Newtonsoft's license you could use the JavaScriptSerializer (depending on how much data you want to Serialize or deserialize) http://james.newtonking.com/archive/2010/01/01/net-serialization-performance-comparison
&gt; If you're a private person. **ಠ_ಠ** oh man you mean this guy cant have his whole 100 man team work on a Hello World??? next your going to tell me he cant sell it either... lighten up dude **for someone learning its not even relevant to bring licensing into the picture.**
Where is the array coming from? You might be better off with a 2 dimensional array or even better, a strongly typed list. But if you're stuck with this, just use a for loop that loops through the array 16 elements at a time: for (var i = 0; i &lt; skaterData.Length; i += 16) { // put your database code here, accessing the elements // by adding i to a number - skaterData[i + 0], skaterData[i + 1] ... etc }
Hi , I suggest you use a modulo operator. pseudo code should look like this for(int i; i=skaterData.length; i++){ InsertIntoDbContext(skaterData[i]); //Every 15 record or at the end of the string array if(i % 15 == 0 || i==skaterData.length){ SaveToYourDb(); } } or with a foreach int i = 0; foreach(var yourString in skaterData){ InsertIntoDbContext(yourString); //Every 15 record or at the end of the string array if(i % 15 == 0 || i==skaterData.length){ SaveToYourDb(); } i++; } 
In some ways I hope that they do kill off WPF and make the new Windows XAML stack integrate better with the desktop. It's great that they're putting some work into performance, touch support etc. but at the end of the day we still have two distinct XAML stacks that do broadly similar things. I primarily work in the enterprise space, which I'd have thought is where the majority of WPF apps are built, and obviously it will take time to get everyone on Windows 10, but if they announce some sort of convergence between the two frameworks and keep WPF ticking over until the point that most enterprises have migrated to Windows 10 I'd be a happy man.
[Up For Grabs C# sorted](http://up-for-grabs.net/#/tags/C%23) :)
Tbh my biggest requested feature is: * Operator Overloads on Interfaces and * Explicit/Implicit conversions on Interfaces
Professional is free for students. [DreamSpark]( https://www.dreamspark.com) Edit: Community apparently has the same features and is easier to get. No more SDM!
There was nothing wrong with the code (I hope?) but I just have so many methods. I am making a text based RPG, and you see the part of the map you are on to naviagte around the dungeon you are in. Each map part looks like [this](http://i.imgur.com/4IJMaU9.png) (the map bit changing shape), each of these shapes has a method so I got [a ton](http://i.imgur.com/L93DU6b.png) :P In total, I have 27 methods with ~663 lines of code :P It was less when I asked but I just wondering if I had too many
While I don't have an answer for this, I would suggest having your catch return ex to see what error you are getting from the try block. 
The try/catch should actually go into the method that calls this function. I prefer to put it as close to the UI as possible.
Firefox did warn me once, I created an exception. Chrome still does give me a warning: http://i.imgur.com/KIV6POf.png
So my original statement still stands. To call methods, the jit isn't used if ngen is used. Also, I'm not sure if I believe that Activator.CreateInstance needs to necessarily invoke the jit - if the type I give it is out of an assembly that was ngened, then why should the jit need to get involved?
I would use a task in a loop or a timer that fires every 0.25 seconds and calls method where your logic is implemented.
Awww yiss
Who knew Visual Studio could be so cinematic?
As a hobbyist programmer the question of code nesting is interesting to me as mine is often very nested but lots of open source code I have read that is done by professional programmers has far less nesting. They utillize the vast collection of .NET out of the tin methods whereas I sometimes write code from scratch to do something. For example I did some code to parse an XML file of a given format to a List&lt;someclass&gt;. This code nests IF's up to 4 times. I think this is faster than .NET's supplied xmltextreader. This answer is sort of wanting to know what I don't know about formal programming patterns\practices 
Do you have anything to show that your method is faster?
Indeed, in the end it comes all down to your preferred coding style... I prefer #1 as well.
Get in the habit of thinking in a more oop methodology. Determine the flow based on some state of an object instead of a meaningless returned scalar. It will make more sense to a reader and be far more maintainable. 
Usually, an enum instantly helps readability: SomethingResult decision = DoSomething(); if (decision == SomethingResult.ElseRequired) DoSomethingElse(); Depending on how much the code is expected to grow in complexity, you might go full OOP and into states and such as /u/athosghost points out. But often there is no benefit for very simply code versus cost of refactoring.
Heh, I thought this was where *everyone* started with C#.
Of course, but with only two values, a bool is quite appropriate :D
Yes it is, but why bother with that when Community has all the same features?
Dark theme master race!
I'm pretty sure you can embedded a web page inside of a wpf window which would allow you to easily throw a easily editable wiki reference page in there. Just a thought.
Welcome robby! You can use the Community edition btw
Its for the next person who looks at the code. so they can figure out what methods to use.
&gt;This code nests IF's up to 4 times. I think this is faster than .NET's supplied xmltextreader. xmltextreader probably does full DOM parsing, where as I assume you mean by: &gt; or example I did some code to parse an XML file of a given format to a List&lt;someclass&gt; That your code is specifically designed around a very narrowly formatted xml file. Your code is probably faster for parsing your very specific schema: but it's probably way more fragile than xmltextreader. Re-inventing the wheel is fun for hobbyists but a supreme waste of a professionals time. If you spend weeks or months debugging a half-baked implementation of an xml parser when you could have just used a canned .NET class your employer isn't going to be to happy. And as a professional developer in various languages for some time now more nesting generally equates to more bugs especially within loops.
Well, it depends how well versed you are in OOP and some general principles in software development. OOP purists might say that you should encapsulate, and only expose what you need to expose in an object for other objects to interact with it. Try the other approach, start with private / protected and start increasing the accesibility as you need. To have a clear idea in how accesible you want your methods or objects you have to develop to interfaces right from the beginning.
It is always a better coding practice to reduce nesting for the reasons you mentioned. That is, code written that way is just better than code that isn't written that way. But there is a cost to doing it. That said, my opinion on this topic is that other programmers tend to think it's something that needs to be optimized for in every piece of code they write, whereas I don't think it's important in all cases. If you work on a 100+ person team. You should absolutely minimize nested ifs. If you're open sourcing your code, you should do it. But if you're up against a deadline with a project on a small team (e.g. a budding start-up), you have bigger tasks to take care of than optimizing for readability. Or if you're just doing some personal-project, forget about it. I'm on a small team that needs to move quickly, so I frequently write code where I nest a few levels deep, write a unit test, and move on. It's ugly. It's hard to read. But I also didn't spend an extra hour turning a piece of code that works into a piece of code that works and is more readable. 
http://thecodelesscode.com/case/176
The purpose of access modifiers is to permit or deny access to parts of your code by *consumers*. Generally speaking, not every method, property, or variable should be accessible by outside consumers. For example, a class might present a very simple public API, but internally have a sophisticated set of states with corresponding state change behaviors. Allowing anyone access to that state and behavior means one of two things: 1. They don't know or care about the state of the class, which means they're highly likely to break things by accessing data/behavior inappropriately or out of the correct sequence; or 2. They know and care about the state, which means you now have both the class and the consumer managing the state of the class, which results in duplication of code and responsibility. Applying accessibility modifiers resolves both of those use cases. By denying outside consumers access to the "private" parts of classes, you can ensure that no one but your class can perform its behavior for it, and that the class is the only one that needs to know about how it works internally.
This. Also #1 prevents what is called the "Christmas Tree Effect" where code creeps across the screen with more and more preceding white-space due to the nesting. I myself and my team at the office follow #1. To me the fatal flaw in #2 is that while having only one "exit point" from a method is a good goal it isn't very practical. So if you are going to be forced to have more than one exit point sometimes why not just not worry about that and reduce other issues in the code like nesting.
Thank you so much for the gold! Thank you for your encouragement! 
Huehue thats cool
I don't mean to be rude, but are you intentionally not answering my question...?
Ok I will do my own effort to parse a [EVE mmo computer game - API xml asset file](http://wiki.eve-id.net/APIv2_Char_AssetList_XML) using xmltextreader and post the code.
No, we don't. At least not as much people say. What some would like to have is more *cheaper* programmers.
Yes, that's dangerous and personally it's not easy on the eyes. I only use one liners for checking inputs. But even with braces, things could go wrong: if(isSomethingSomething) ; { DoSomething(); } 
&gt; Make three private methods, have them called by a single public method then put a comment in the public method to say why? How is splitting a long method into sub methods any different than just putting a region around those sub sections ? In my opinion what you suggest is a lot worse than just leaving the big method intact because you're making things less readable just to satisfy coding guideline without addressing the underlying problem. Which is that the design probably sucks and needs to be rethought.
You can use the [guard clauses](http://refactoring.com/catalog/replaceNestedConditionalWithGuardClauses.html) to cleanup some nesting. So in 'over this' sample you could do.. public bool DoThis(string name, int age) { if (String.IsNullOrEmpty(name)) return false; if (name.Contains("cool")) return SomeCode1(); return SomeCode2(); } public bool SomeCode1() { return true; } public bool SomeCode2() { return false; } or public bool DoThis(string name, int age) { if (!String.IsNullOrEmpty(name) &amp;&amp; name.Contains("cool")) return SomeCode1(); return SomeCode2(); } public bool SomeCode1() { return true; } public bool SomeCode2() { return false; } This kind of depends on if you subscribe to Single Entry, Single Exit or Single Function Exit Point as a practice. Over time I've become much more used to writing more guard clauses and smaller code as long as it is readable. A good IDE makes refactoring these things later pretty trivial if you need to so more. Personally I try to get my methods to less than ten lines of code whenever possible, five is preferred! 
We took 10 months to find the right person last year. It's hard to say that a bigger applicant pool wouldn't help. That said, I think there may be a place for a programming tech type job someday. As long as it doesn't cannibalize real programming jobs. 
I used a modified version of [this Generic solution](http://sbrickey.com/Tech/Code/Dijkstra_s_Algorithm_in_C_with_Generics). Improvements can definitely be made, like caching results, but it's a start! [Here](http://imgur.com/HEZekmS) is a visualization of my dataset, by the way.
Some people have the luxury of spending years building perfectly crafted pieces of software that will never get used because the hacker who shipped in two months took the whole market. I've noticed that the line between writing in a certain style and over-optimizing for speed/readability/reliability gets pretty blurry. I would love to have all my code written to perfect specs. I'd love all my git comments to be really helpful. I'd love all of my methods of run in minimal O-time. But I would also love to actually make progress at the necessary pace. I worked for a trading firm a while back. One self-taught programmer wrote a very large trading system in a little over a year. A single programmer. He said "fuck all" to everything a well-educated CS majors practice. And it was the ugliest piece of shit. Thinking about it makes me laugh to this day. It's impossible to change. So, when my company wanted to change it, they actually had to start from the beginning. He didn't even do an ounce of modularization. I actually am not sure he knew what an interface was, because I don't think I saw one. You couldn't even change market data providers. That is, if their data provider went out of business, the application would have been beyond fucked. So, the company started from scratch on replacing his application two years ago with a team of 5+ people who are well-educated and coding the right way. Those people are not even close to being done, and all the while, that old piece of shit program is continuing to make tens of millions of dollars a year. All I'm saying is that when you need to truly maximize your time and resources for making money, it's not always best to get bogged-down with best practices. Maybe just pick a few essential practices and move on.
I am not saying that it can be hard to fill a position. Specially if you're not in a big city. There are just sometimes these cries for ridiculous high numbers of new developers. (For example in Germany lobbyists are throwing numbers around that are close to the 6 digit range.) 
I decided to try what I initially thought would work, but its not. [Debug windows](http://i.imgur.com/5xpPT0Z.jpg) I can't seem to figure out how to get into the "Results View" and then assign each index of the "Results View" into a bunch of variables, save those to a database and then move on to the next index. var tempSkate = s.Split(stringSeparator2, StringSplitOptions.None) .Select((e, i) =&gt; new {Value = e, Index = i}) .GroupBy(e =&gt; e.Index/16) .Select(e =&gt; e.Select(v =&gt; v.Value)); 
http://en.wikipedia.org/wiki/A*_search_algorithm http://en.wikipedia.org/wiki/Depth-first_search
I actually find "goto fail" "goto clean up" to be elegant solutions in languages without exception handling. I see this done a lot in C, and personally if applied with discipline its not hard to follow or maintain. Its about the only situation I consider "goto" useful.
I and my teams also prefer #1. The motto is "exit early, exit often". And whether you are nesting or not, please **always** use braces when defining your if/else. Even though it's not required when you have single statements, you are imposing a structure that will remain when that code gets refactored to add more statements. Many bugs (including a rather infamous iOS bug) have arose from this oversight. Therefore we have that as a rule also. 
Gave a presentation on his algorithm in college and butchered his name. The whole class corrected me. I learned that day that he taught at my school. /facepalm
In my experience, must CRUD systems revolve around using a database. Technically, CRUD can be implemented in memory and not require SQL backend, but 99% of the time I've seen "CRUD" it specifically had to do with storage to a back end relational database. I feel like they are asking you to make a simple CRUD/DB app. You can write this up in 10 minutes using Entity Framework - Code First. You didn't specify whether this was going to be a Web app, Forms app, or WPF. That said, if you've never written a CRUD/DB app before, and they are asking you to write one, you might want to think about coming out and saying you have no idea. Make an attempt, document your use cases, but you need to be honest you've never peristed data to a database before. Edit: Link to a step-by-step [EF code first tutorial](http://www.entityframeworktutorial.net/code-first/entity-framework-code-first.aspx). 
The values are mentioned in the FAQ part of the following site: https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx
And also for yourself, when you start to write programs over 10000 lines, so you can not rely on your implementation details and know which methods are meant to be called.
Or better, just use the boolean expression as-is... return !(String.IsNullOrEmpty(name) || !name.Contains("cool"));
Are you using threads?
Yeah but you missed the //Some code part. Presumably there would be more code there, but if not I think I would prefer it in its own statement like this: public bool DoThis(string name, int age) { if (String.IsNullOrEmpty(name) return false; if (!name.Contains("cool")) return false; return true; } 
Hi Robby, if this is your first time programming, and in C#, here is an awesome free PDF/eBook for you: http://www.introprogramming.info/english-intro-csharp-book/ This book was written by a bunch of awesome Bulgarian Software Engineers. At the end of each chapter, there are a good amount of exercises. At the end of the book, there are Programming Exam/Projects. Chapter 1. Introduction to Programming Chapter 2. Primitive Types and Variables Chapter 3. Operators and Expressions Chapter 4. Console Input and Output Chapter 5. Conditional Statements Chapter 6. Loops Chapter 7. Arrays Chapter 8. Numeral Systems Chapter 9. Methods Chapter 10. Recursion Chapter 11. Creating and Using Objects Chapter 12. Exception Handling Chapter 13. Strings and Text Processing Chapter 14. Defining Classes Chapter 15. Text Files Chapter 16. Linear Data Structures Chapter 17. Trees and Graphs Chapter 18. Dictionaries, Hash-Tables and Sets Chapter 19. Data Structures and Algorithm Complexity Chapter 20. Object-Oriented Programming Principles Chapter 21. High-Quality Programming Code Chapter 22. Lambda Expressions and LINQ Chapter 23. Methodology of Problem Solving Chapter 24. Sample Programming Exam – Topic #1 Chapter 25. Sample Programming Exam – Topic #2 Chapter 26. Sample Programming Exam – Topic #3
I been around too long as well... I agree that the threat I mentioned is not likely to ever come true, but I do work on a team of 8 that 20 years ago the same productivity would take 16 people. 
This is all game mechanics for a pandemic game :)
Awesome work, I'm implementing Dijkstra's as a final project in my advanced algorithms class. Also - Va. Beach Represent!
If it's limited to exactly 100 he could have just used an xml file or a json file too but I'd agree that if I'd asked this question I'd be looking for a database.
Personally, I wouldn't use a console app. I'd look at either writing a Windows service (with some logging, in case it ever has a problem), or make it a scheduled task in the database (if your database lets you do that).
My two cents on how I'd write it: public bool DoThis(string name, int age) { if (String.IsNullOrEmpty(name)) return false; return name.Contains('cool'); }
:), I'm glad you shared the code, the advice given in this thread was for a very generic question, and missed the answer you need. First, just to clarify, by wrong I don't mean incorrect. I mean it might not be well designed, maintainable code. IE, It might do everything you want without any bugs so it's correct, however, the moment you want to add a new feature, you suddenly need to add a lot of code to a lot of places, which means a lot of work and potential to introduce unnecessary bug from copy pasting. The new answer to your original question is that lots of methods is good if you do it the right way. One of the indicators that you are doing it the wrong way is if you violate what is known as the Do Not Repeat Yourself principle. If you find yourself just copy pasting your code into many methods and just changing a few things here and there for each method, it's a sign you are doing it the wrong way. Let's look at your code. I imagine you spent a lot of time of copy pasting code and spent a whole lot of time changing the writeline code and the bools, am I right? In this case it might better to instead create one method and pass it a parameter for the direction: EG: public static void DrawMapPart(Entrances entrances) Where Entrances is a new enum you create. Now there's a neat trick with enums using something called a [bitmask](http://yyosifov.blogspot.com/2010/10/bitmasks-demystified.html) where you assign a number to your enum and you can use binary numbers to define the combinations of enum values. It would look like the following: [Flags] enum Entrances { North = 1, //0001 South = 2, //0010 East = 4, //0100 West = 8, //1000 } The way you read it is that if the first column has a 1, then there is a west enterance, if the second one has a 1 there's an east enterance. So the way you would use this enum for say, northWestSouth, would be like this: DrawMapPart(Entrances.North | Entrances.West | Entrances.South); That will produce a binary number 1011, and if you look at each digit, it corresponds to your flags above. Now lets see what we need to do in DrawMapPart. You no longer explicitely need a variable for canGoNorth south etc, but if you still wanted it you would do the following. canGoNorth = (entrance &amp; Entrances.North) != 0; canGoSouth = (entrance &amp; Entrances.South) != 0; etc... It might seem a little bit magical, but all that is saying is that if enterance has a bit which matches with the bits in North, return true, ie you can go north, if it doesn't, you can't. What else is left? The WriteLine stuff. Here I would strongly recommend not putting your map data in writeline. Save each one as one string, and associate each string with an enterance. One way of doing that is to put it in something called a [dictionary](http://www.dotnetperls.com/dictionary#t). You use it by declaring a new dictionary which takes a number as a search key, and a string as a search result (aka a value). Dictionary&lt;int, string&gt; MapPartsDictionary = new Dictionary&lt;int, string&gt;(); MapPartsDictionary.Add((int)Entrances.North, "____ ____\r\n | | etc, etc"); etc. When you are more advanced you'll learn that because this is data, you shouldn't put it in your code. instead put them into a file, and read them into your dictionary. Either way, once you read it, you only need to put the following in your drawMapParts method: string mapDrawing = MapPartsDictionary[entrances]; Console.WriteLine(mapDrawing); So you see you now have one method with 2 to 6 lines of code, instead of 15 with 8, which reduces your code by about 120 lines. Note the point of this exercise is not to get rid of code for the sake of brevity, but to make it easier to maintain. Think about the amount of work you would need to do if you wanted to add up and down to your map, or upgrade from text based to 8bit graphics. With your current code, you probably will need to copy everything, balloon the code to twice it's size and then edit a whole bunch of functions all over the place. It sounds daunting right? But with the newer way, the code is condensed to one common point, and it suddenly looks like a lot less work. Anyway, I hope I was able to explain this clearly and didn't accidentally demoralize you about your code. Note that you need to do it the long way first to really appreciate learning new tricks to improve your code. 
Yep, I was able to [change the implementation slightly](http://pastebin.com/YUTWWgQa) to cache results and provide instant lookups once any origin point is calculated.
Holy crap I wasn't expecting someone to do such a long answer :D I think I see what you are saying, but it is well beyond me at this time though, like I pretty much started C# programming a few days ago (made the switch from Java). But I don't I'll definitely try change my directions in bitmasks, seems like it'll be good practice, the link you sent explains it great, I'll be sure to get back to you when I've tried some new stuff :D thanks again :)
TL;DR: Use `RedirectToLocal` when redirecting to a user supplied URL, as it validates that it's a local URL. 
A very good advice someone gave me back in the days was: "When you encounter a problem don't look up the answer right away, try to solve it by yourself for a while first."
The Hispaniola island looks gigantic in that map
It all depends on what the exam asks, but really c# is going to be like any other language, it's just knowing the features that are available and putting them together in sensible ways. I've heard great things about the head first c# book and of course there are tons of great resources and c# is extremely popular on stack overflow. C# shares some syntax with c and c++ so you may feel familiar with a few of the concepts. I recommend just start playing around and maybe duplicating work you've done previously with c++ and see what you can do! Edit: to more directly answer your question, since you have some experience coding you should be able to dive in and relate c# to the stuff you already known I say give it a shot. You should be able to get a decent grounding in c# by then. Try to find out the topics covered on the exam and just really focus on those. If it's really heavy on the CLR and the like, it might not be possible to pick up on that stuff in such a short amount of time. 
The sort of people who need a first time guide are the sort of people who would never read a wiki anyway. They are also the sort of people who you see clicking OK or Yes on every single message box without reading, or clicking the X in the message box still without reading it and then moan to IT they can't get it to work.
I guess you're right. There's a course on edx on [Programming with c#](https://courses.edx.org/courses/course-v1:Microsoft+DEV204x+2015_T2/) that covers most of the syllabus for exam 70-483 (just a personal observation) so I was thinking I should probably go through it. At worse, I'll be learning a new language. At best, I'll have credentials to prove :). What do you think?
&gt; Your question seems you don't really have ever worked with images in .net do you? wat
Because when I got DreamSpark two years ago they didn't have Community, and I haven't looked at it much since its release. I didn't know it had the same features. Also, Professional does sound cooler.
What?
I deal with have a lot of creative clients/users that enjoy not maintaining a standard of how they input sensitive data. Its fun to figure different outlets to prevent them from bringing the building down. 
I agree
Thank you. I think I get the idea now. 
I've heard it said a hundred different ways... Is it "Dyke-stra"?
What if I put in 5-6 hours of daily study?
Nice. I'll do that!
The best solution to this that I've found is the [Azure Scheduler](http://azure.microsoft.com/en-us/services/scheduler/). Your usage fits into the free tier so it won't cost you anything, and it can take care of firing a specially crafted URL as often as you need it to. Rolling your own scheduler in a console app or windows service is a bad idea. It will fail and you probably won't notice when it does.
C# isn't difficult at all, learning good programming habits, design patterns and solving problems efficiently is the real difficulty. But you got to start somewhere, if you are serious about Unity, then learn C# as that is where everyone should be.
Distance based.
I'd love to, but I've changed it since then. Also, it doesn't scale well, it stretches the datapoints :(
No I meant the name. I googled it and found it was an algorithm for finding the shortest path. Pretty cool :)
No I meant the name. I googled it and found it was an algorithm for finding the shortest path. Pretty cool :)
Yeah, my IStateBase.cs is this: http://imgur.com/RvtOURd
It didn't work, gave me an error that the namespace Unity didn't exist.
Ok, let me try it this way; Maybe that (Assets.Code.Interfaces) library does not exist. Do you know for sure it does?
I use C# to write word processors, IDEs, and games in my personal projects. I also have a lot of one-off utilities in the language. And all of them are Linux-friendly since that is my platform of choice. Remember that a lot of ~~vile~~vitriol toward C# doesn't reflect the changes Microsoft has done in the last few years. They have *really* opened it up, not to mention C# was (pretty much) always a EMCA standard, unlike Java which was closed source until a few years ago (maybe longer, lost track of time). A lot of the hatred was against Microsoft not the language itself. But the efforts of Miguel de Icza (misspelled his name) and all the other folks, it is a pretty solid, cross-platform language and framework.
More accurately, the lowest cost path!
I work for a military contractor as a software engineer and we use C# almost exclusively across both Windows and Linux platforms with just a touch of C for some video and hardware decoding. Prior to that, I worked for a company that writes software for law enforcement in which we were transitioning from VB6 to C# when I left. There's a lot more C# in the industry than you think because most of the people using it don't have a lot of negative things to say. It's one of the fastest languages to use to push products out the door, especially if you're experienced with it. This plus how easy it is to learn easily makes C# my favorite language, and I have experience with Java, C, and C++. 
&gt; And what exactly is C# used for anyway? I think there's a bit of a break down here. What is any programming language used for? What does any developer do? You want a website? You want to make a tool to modify a games save? You want to make a web crawler? You want to hook an API and crunch numbers? C# can do it. What do you think that Java can do that C# can't? You get more android support, yeah, but app programming is like the smallest amount of programming done.
Business loves tools that gets the job done, well supported, easy to maintain and a good supply of developers. Historically, MS had most if this market sewn up. Java came along to try and take that crown, but MS came out with .NET, which is arguably better, except that it was not multi-platform. .NET is very much run anywhere these days, and now that it's open-source, what's not to like? The only area where it's perhaps lacking, is a universal desktop UI. Most C# desktop apps are tied to Windows.
That's a vague question, so it's not going to be possible for me to answer. (I don't know the book, these libraries, etc) So, because you're new I'll give you a few pieces of info that will help you forever. * Small changes. Make a change, compile, check, debug, repeat. * The "using" statement is to include specific libraries, as opposed to having the entire line for each object in the code: using System.io; if (File.Exists(path).... //as opposed to if (System.IO.File.Exists(path) I would start by remarking out the "using" line on #3 and see if your code runs. Something tells me, meaning I am guessing, that there is no "interfaces" library.
C# is also heavily used in the financial technology space, especially as it relates to proprietary trading and portfolio management software. It's easy to build slick UI's and the language is very powerful. 
The [CoreCLR](https://github.com/dotnet/coreclr) team just got FreeBSD compatibility working; Linux and MacOS X are already working.
I use C# daily. As part of my job I designed a multi-server data syncer between salesforce and our companies database(s). We have 125 customers with 4500+ sync events per day. My company also uses C#.. and it sends in excess of 500 million emails per month, every single email is tracked when it is opened.
You might want to be a bit more specific in your question. If you can do a client application WPF can do a ticker incredibly easily. Periodically hitting a feed at an HTTP URL is trivial and can be looped with a timer or TPL. Search for WPF example applications, you never really find one that does exactly what you want but you will find the parts of what you need to put together your app. 
For an EE I think this is actually a decent place to start. You might struggle initially as you try to grasp some of the abstract concepts. Remember C# is much higher level than C++ or hardware, we don't worry about memory management and performance is often a secondary concern except in specific applications. The language and the platform is built under the reality that hardware is cheap and time is expensive so we often trade off in performance for better maintainability and ability to validate the code works as expected. You can of course tune for a lot of performance if you need/want to, its just not really expected or needed for most of the work most developers do, the CLR runs things fairly well on its own. For you, above other first timers I would say it would be valuable to do some pre-reading on the CLR, compilation and MSIL. This will allow you to more easily understand the abstract concepts in terms you are more likely familiar with.
Uh yeah it does, the error for IStateBase appeared and the previous ones disappeared.
Can you show the top lines of IStateBase.cs My GUESS is that it might have a different namespace in it.
you are asking for something that sits on top of a users screen, always visible and scrolling messages? In windows it is possible to force a window to always be on top, so this should be possible, but I'm not aware of any standard ui component that offers this functionality as it sounds pretty intrusive. For notifications i have used pushbullet in the past, which boils down to an icon in your system tray and then an alert sound and a toast notification when a new message arrives. You could try rolling something like this yourself, listen on a port for messages, and then display them however you decide. 
Calm down Timmy
No, as in if I resize the window, the continents distort with it. Either way, it's animated now and wouldn't make a good screenshot :(
Or how do you store the information? Maybe it can be rendered differently.
I didn't get into C# until it ran on Linux (back with Mono, not the recent version). I'm glad, it's been my job for about fifteen years now plus a lot of the OSS projects I've worked on.
You can memorize answers to test questions people have stolen from exams, but that route will leave you with a certification that is essentially a lie, that doesn't represent your actual proficiency. This is also probably the only route that will get you ready to pass that test in a month. It's your call if that's ethically acceptable to you.
You haven't given enough information. What library are you using to implement your Drag and Drop user interface? Can you just check what the last control added to the panel was?
Your code is twice as fast - about 15ms. Originally and using your code I read the xml file in advance. I did the following changes so it parses the xml file correctly and can handle double character negative numbers: const int TYPE_NODE = 2; // changed from 3 const int QUANT_NODE = 3; // changed from 2 ... case "rawQuantity=": bit = RAW_NODE; raw_node_handler = true; break; default: //parse bit if (raw_node_handler == false &amp;&amp; char.IsDigit(s[0])) { nodes[bit] = globals.Int64ParseFastPositive(s); } else if(raw_node_handler == true) { nodes[bit] = globals.Int32ParseFastNegative(s); raw_node_handler = false; } break; Or using a for loop instead of foreach: case "rawQuantity=": //bit = RAW_NODE; nodes[RAW_NODE] = globals.Int32ParseFastNegative(chunked[a + 1]); break; It did not occur to me to try parsing the xml file in a way other than looping one line of text at a time. Thank you for the help. I suppose if I start using a intermediate language viewer it can help me do less hacker like code.
`foreach` on an array (in this case `string[]`) optimizes to a for loop that doesn't have bounds checking. The for loop will let you look ahead but you pay a minor price to do so because `chunked[a]` will internally have an implementation that looks like this (but not exactly, it is implemented in the CLR, not in the C# framework source): public T this[int index] { get { if (Rank != 1) { //a property on array that determines how many dimensions it has throw new ArgumentException(/*...*/); } if ( (uint)index &gt;= (uint)Count ) { // !(0 &lt;= index &lt; Count) throw new IndexOutOfRangeException(/*...*/); } return UnsafeGetValue(index); //in reality some "magic" on this line with a bit of pointer math } } Point is, a for loop is not necessarily faster than a foreach. I bet I could read it nearly twice as fast again by operating at the byte level and skipping the string allocations (and only reading each byte once instead of 3 times: file to string, string to chunks, chunks to assets). 
&gt; many open source languages such as php don't have the long-term prospects. Can you elaborate on your thoughts? 
The Head First book is pretty out of date though isn't it?
Signalr. It's a push notification system that works with wpf, Silverlight, and JavaScript. It's very nice.
I can see that this is just an example, but for the sake of completeness, can you change those `s1` and `s2` to `str1` and `str2` respectively? Thanks! :-)
Oh sorry, I mixed up the subreddit. Was thinking it was a post in /r/Unity3D which uses CSharp. You can ignore the last line :P, the rest should apply.
Why not Visual Studio 2013 Community? It is Visual Studio Professional but for free. //It also features theme editor, which contain beautiful Solarized theme. (:
As somebody who's colorblind ... what the fuck is happening? 
OP display a world map with paths between two points (City for example). Each path is drawn one by one. One by frame of the gif.
As someone else who's colorblind, do people always act surprised when they find out?
I certainly did not want to sound arrogant. I have a free voucher that I do not want to go waste (I believe its $100/exam otherwise) and thought I might as well try my luck :)
Just downloaded it :) Had not heard of it before this thread. The book only mentions express
If you created the certificate yourself, you need to install in the computers's certificate store, most likely under trusted certificate authorities, the .NET runtime should then be able to locate the certificate in the cert store, meaning it will trust the connection, instead of panicking when it is faced with a certificate it can't verify. Some links showing how that would work: http://www.codeproject.com/Articles/570539/HTTPSplusCommunicationplusinplusWCFplususingplusSe https://msdn.microsoft.com/en-us/library/ff648498.aspx
Honestly I'm not a fan of these vast coding tasks, but this one would be quite fun so I would do it. Just watch out for anything more complex that takes too much of your time. Some companies get interviewees to code up sections of actual code they need done, small bite size chunks but in the end they get work for free.
How did you get the map? And how does it work (map thing)
I started by copying in all the UN-recognized countries by hand via Wikipedia. Then I wrote a program to get approximately 100 cities from each country via the GeoNames API. Then I generated the connections between each city using a Voronoi Graph algorithm. Then all of this data is saved to a file to save future processing.
I told the API to give me the same number of cities for every country - therefore large countries are sparse, while small countries are dense. There is no correlation to population size yet.
I spoken to my friend (Who is more experience than me) and he is going to help me look at this code :P
for(int i=0; i&lt; names.Length; i++) { Console.WriteLine("{0} : {1}", i, names[i]); } Also checkout string.format - this is a shortcut to that syntax.
If you want the index as well, you'll need a [`for`](https://msdn.microsoft.com/en-us/library/ch45axte.aspx) loop, not `foreach`.
Unfortunately, even with that code, it still results in an error. I have tried that a few times, actually, among other codes. This is just really bugging me, because I honestly don't understand. I just gotta figure out how to wrap my head around the concept of referencing element indexes in a Foreach, since I'm relatively new to C#. I appreciate your attempt to help me with this problem! :)
Well, as /u/louie2113 mentioned, there should be an IndexOf() function in the array. Another option would be to create an index variable, and increment it within the loop.
Declare an int to store index and set it to 0 Start the for each. On each loop print out I and then increment i by 1. You've essentially given yourself the same capabilities of a for with foreach. This is called a sentinel, as it gives you access to a count within a loop, and remains available once the scope of the loop has ended. It's usually used for while loops to give more control over the loop than you get with a for loop, but can be helpful in this sort of case, especially if you were asked for an array or something resulting from transformations within the loop, which you would need to supply outside of the loop before, and reference after running. 
If your college course is explicitly saying to use a foreach, then they are probably teaching you that statement does not include an index, like a for loop would. Place an int count=0; before the foreach and increment it inside the loop. Use the count to know the index for your output.
As everyone else suggested this kind of thing would be better dealt with using a for loop than a foreach, but if you HAVE to use a foreach and you have access to the LINQ library you can do something like this: Console.WriteLine( "{0}:{1}", names.ToList().IndexOf( name ), name ); Don't forget to add the "using System.Linq;" at the top. With that said this 'problem' seems a little odd and pointless -- it's almost like it's trying to get you to do something you should never do. If this doesn't solve your problem I suggest you clarify in your original post what the EXACT assignment is and when responding to others it's helpful to include your output and/or the errors you are getting.
It's a silly requirement to use a foreach loop, but you can do something like this (pseudocode) int index =0; Foreach item in array Console.writeline index, item; Index++; That outputs an index and the item.
Do you need to build just the consumer that displays the ticker, or are you also tasked with generating the RSS feed itself? It wasn't clear to me from the original question. Others have suggested various solutions for the ticker app. If you also need to generate the RSS feed, take a look at WCF's System.ServiceModel.Syndication namespace - it makes it a breeze to create syndication feeds and items. Here's an example from MSDN: https://msdn.microsoft.com/en-us/library/bb412174%28v=vs.110%29.aspx
You could probably cheat a bit and put an int starting at 0 that increases every time the loop runs, for example: names[0] = "Al Dente"; names[1] = "Anna Graham"; names[2] = "Earle Bird"; names[3] = "Ginger Rayle"; names[4] = "Iona Ford"; int index = 0; foreach (string i in names) { Console.WriteLine("names[{0}] : {1}", index, i); index++; } Since "i" is only referencing a single string value from the array, it does not contain an index as "i" itslef is not an array, therefore you cannot directly get the index from "i"
awesome. I figured this existed but didn't feel like digging. This is much better IMO.
Like most have said, this should be a SQL Agent task, falling back to SQLCMD.exe scheduled using the servers Task Scheduler. Also, you might be able to get away with sticking this code as a check in HttpApplication.BeginRequest or some other very early event in the ASP.Net lifecycle. This will work if there's no downside to the value not be reset if no one is accessing the website. Lets say no one hits your application for 3 days, and you never update that value to 0. But the first time someone hits the website, you detect the value hasn't been updated, and you change it to 0. If that use case can work, then you can put this logic into the HTTP Application events. 
More correctly it iterates over an IEnumerable&lt;T&gt; or IEnumerable.
What is the error?
+1 for // TODO. The Task List is one of my favorite tools in Visual Studio that way too few people use!
THIS WORKED PERFECTLY. It was weird, because in the chapter regarding arrays, it didn't mention Array.IndexOf, although it certainly helps. Perhaps the professor was trying to make it so we would look up info, as well as reference more to prepare us for future jobs, courses, etc. THANK YOU AGAIN EVERYONE FOR YOUR HELP. 
JUST WANTED TO SAY THANK YOU TO EVERYONE! YOU ALL REALLY HELPED OUT, AS I FINALLY UNDERSTAND WHAT I NEEDED TO DO. THANK YOU AGAIN!!!!! :)
Thank you for your help!!!
A for loop certainly would have been easier, but the Foreach was required for this assignment unfortunately. Thank you for your help!
Thank you so much for your help! :)
I agree, but it was an assignment unfortunately. Of course, it was the last question the lab, too! Thanks for your help and your wise advice!
Okay, I think that's not really relevant. In my case the `2.2` literal is of type `double` and neither of the conversions is better, so it just goes with the first signature. If I switch the int and the float signatures, the best overloaded method becomes `Foo(float i)` because it comes first.
Came to post this as well. I found this about a fortnight ago and did some preliminary implementation of it to replace some scheduled tasks, and it's worked flawlessly.
That shouldn't happen. Passing a floating point number in for an int (System.Int32) argument should give you an error whether it is float (System.Single) or double (System.Double). There is no implicit conversion from double to int, and numeric literals without a type suffix specified will automatically be recognized as either a double (if there is a decimal point), or else the smallest integer type it can fit into. This is why we have type suffixes that we should use when working with numeric literals, like so: // Floating-Point Numbers float fx = 2.2f; double fd = 2.2d; decimal fm = 2.2m; // Non-Floating Point Numbers uint nu = 2u; long nl = 2l; ulong nul = 2ul; Note that you can use either upper or lower case for type suffixes (i.e. 2.2f = 2.2F). While we are on the subject, a hexadecimal number (base-16) can also be represented as a literal by using the 0x prefix: // Hex representation of 64738 base-10 int h = 0xFCE2; Binary literals were planned for C#6 but I don't know if they made it. However, you can use Convert.ToInt32() to convert a string to an integer and specify the base (only 2, 8, 10, and 16 are supported). // Octal string representation of 64738 base-10 int o = Convert.ToInt32("176342", 8); There are other tricks such as bit shifting that are useful as well, especially when working with bit fields: // Bit-shifting to represent 2^3 // Binary: 1000, Octal: 10 int bs = 1 &lt;&lt; 3; Well this simple response turned into a wall of text, but I hope it's helpful for someone. :)
I saw this puzzle on /r/programming, and decided to give it a go: Coins come in the denominations 1p, 2p, 5p, 10p, 20p, 50p, £1 and £2. We have decided to buy a widget for £39.75 using exactly 100 coins of exactly five of the eight denominations. Our coins are of the correct amount, not a penny more or less. Can you discover which denominations of coins and how many of each we used to purchase the widget? The linked website notes that there are 33,798 solutions, and my solution in c# finds them all. However, as this is the first time I’ve ever written a program that iterates like this, I’m sure there’s a faster way to do it. If you think I’m doing something sub-optimally, I’d like to hear your suggestions as to how I could do it better! Or, alternatively, if you have a better solution, I’d like to see that too! Thanks! class CoinIterator { // Entry point static void Main(string[] args) { System.Diagnostics.Stopwatch watch = new System.Diagnostics.Stopwatch(); watch.Start(); CoinIterator iterator = new CoinIterator(); watch.Stop(); writeSolutions(watch.ElapsedMilliseconds, iterator.Solutions); } // private variables const int targetCoinCount = 100; const int targetTotalValue = 3975; const int targetDenominationCount = 5; const int coinDenominationCount = 8; int[] coinDenominations = new int[coinDenominationCount] { 1, 2, 5, 10, 20, 50, 100, 200 }; // list of solutions, accessible from outside class. public List&lt;int[]&gt; Solutions = new List&lt;int[]&gt;(0x10000); public CoinIterator() { int[] coins = new int[targetDenominationCount]; iterateCoinDenominations(0, 0, coins); } void iterateCoinDenominations(int selectedCount, int nextCoin, int[] coins) { if (selectedCount == targetDenominationCount) { int[] denominations = new int[targetDenominationCount]; for (int i = 0; i &lt; targetDenominationCount; i++) denominations[i] = coinDenominations[coins[i]]; int[] amounts = new int[targetDenominationCount]; iterateAmountsOfEachDenomination(denominations, amounts, 0, targetCoinCount); } else { for (int i = nextCoin; i &lt; coinDenominationCount; i++) { coins[selectedCount] = i; iterateCoinDenominations(selectedCount + 1, i + 1, coins); } } } void iterateAmountsOfEachDenomination(int[] denominations, int[] amounts, int coinIndex, int coinsRemaining) { // if we're on the last of five coins, count the value of all coins and compare it to the target value. // otherwise, iterate through all the possible amounts of coins for this collection of coins. if (coinIndex == targetDenominationCount - 1) { amounts[coinIndex] = coinsRemaining; int value = 0; for (int i = 0; i &lt; targetDenominationCount; i++) value += denominations[i] * amounts[i]; if (value == targetTotalValue) saveSolution(denominations, amounts); } else { for (int i = 1; i &lt; coinsRemaining; i++) { amounts[coinIndex] = i; iterateAmountsOfEachDenomination(denominations, amounts, coinIndex + 1, coinsRemaining - i); } } } void saveSolution(int[] denominations, int[] amounts) { // save solution as amount of coins of each type. int[] solution = new int[coinDenominationCount]; for (int i = 0; i &lt; targetDenominationCount; i++) { for (int j = 0; j &lt; targetDenominationCount; j++) { if (coinDenominations[j] == denominations[i]) { solution[j] = amounts[i]; break; } } } Solutions.Add(solution); } static void writeSolutions(long ms, List&lt;int[]&gt; solutions) { using (System.IO.StreamWriter file = new System.IO.StreamWriter(string.Format("{0}.txt", ms), false)) { file.WriteLine("&lt;table&gt;\n" + "&lt;tr id=\"fixed_header\"&gt;&lt;th&gt;1p&lt;/th&gt;&lt;th&gt;2p&lt;/th&gt;&lt;th&gt;5p&lt;/th&gt;&lt;th&gt;10p&lt;/th&gt;&lt;th&gt;20p&lt;/th&gt;&lt;th&gt;50p&lt;/th&gt;&lt;th&gt;£1&lt;/th&gt;&lt;th&gt;£2&lt;/th&gt;&lt;/tr&gt;\n" + "&lt;tr id=\"header\"&gt;&lt;th&gt;1p&lt;/th&gt;&lt;th&gt;2p&lt;/th&gt;&lt;th&gt;5p&lt;/th&gt;&lt;th&gt;10p&lt;/th&gt;&lt;th&gt;20p&lt;/th&gt;&lt;th&gt;50p&lt;/th&gt;&lt;th&gt;£1&lt;/th&gt;&lt;th&gt;£2&lt;/th&gt;&lt;/tr&gt;"); for (int i = 0; i &lt; solutions.Count; i++) { file.WriteLine(string.Format("&lt;tr&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{1}&lt;/td&gt;&lt;td&gt;{2}&lt;/td&gt;&lt;td&gt;{3}&lt;/td&gt;&lt;td&gt;{4}&lt;/td&gt;&lt;td&gt;{5}&lt;/td&gt;&lt;td&gt;{6}&lt;/td&gt;&lt;td&gt;{7}&lt;/td&gt;&lt;/tr&gt;", solutions[i][0] &gt; 0 ? solutions[i][0].ToString() : string.Empty, solutions[i][1] &gt; 0 ? solutions[i][1].ToString() : string.Empty, solutions[i][2] &gt; 0 ? solutions[i][2].ToString() : string.Empty, solutions[i][3] &gt; 0 ? solutions[i][3].ToString() : string.Empty, solutions[i][4] &gt; 0 ? solutions[i][4].ToString() : string.Empty, solutions[i][5] &gt; 0 ? solutions[i][5].ToString() : string.Empty, solutions[i][6] &gt; 0 ? solutions[i][6].ToString() : string.Empty, solutions[i][7] &gt; 0 ? solutions[i][7].ToString() : string.Empty)); } file.WriteLine("&lt;/table&gt;"); file.Flush(); file.Close(); } } }
I have written quite a few Windows services. May I ask what benefits you have seen by using TopShelf over writing a service? Is the main benefit realized from this approach the ability to run an existing console application? Or do you need to write your console app specifically for use with TopShelf?
I hope you don't mind an add-on to tour question, but in addition to a WPF solution, I would also like to know of any Windows Forms solutions for this, as we still do a lot of Windows Forms development. 
Select has an overload that provides index as well.
Well, I ran it through a profiler, and it says 52% of the time it's spending on the following code: value += coinValues[coins[i]] * amounts[i]; I feel that's because of the loops within loops thing you have going making it O(n^3) or something. It's hard to tell with the recursion. 
In the forms load event, set focus to a control at the top of the page? 
[From MSDN](https://msdn.microsoft.com/en-us/library/a62htd5x%28v=vs.110%29.aspx) &gt;when autoscrolling is on, the client area of the form automatically scrolls to make the control with input focus visible. To stop it, override the [ScrollToEvent](http://stackoverflow.com/a/912610/529282)
This is what I meant yes.
Use your time to learn actual C# programming (or another skill) rather than studying for the certificate. Even if you manage to get the certificate you will have memorized information that is almost useless for practical purposes.
unchecked {} could give it a boost...
Thanks for the info. I tried following that tutorial before I started this project, but found it had errors that did not work right with 8.1. I was mistaken thinking I could just pass in another method as a parameter. I am going to have to figure out another way to have the text change in my content area. The only other thought I had was that I could just separate that data into sections. One section would live and be parsed in my SelectionChanged method. Ideally, I'd data bind it in the GetScholarships section, but I am having a really hard time understanding data binding and all that goes with it. Any suggestions? 
Thanks for the info. So, I am mistaken that I could pass in another method into the SelectionChanged method. Is there another way that I could check if an item had been clicked? My thought process is that when a user selects an item in the list view, the title of the main content area is set based on the the text of the item selected (this happens in itemListView_SelectionChanged). I'd then like the program to match that text to a case and then populate the full content area. 
What are you specifically trying to do? Its not clear from the linked code (Not a C dev). Reading a files contents is fairly easy in C#, there are many methods such as using a FileStream or just File.ReadAllText.
The thing is. I want C# to read some of the file but not include it. Example: Amount of Rooms: 2 I need to get the value 2, so that i can transfer that into a variable which would something like amountOfRooms. The same with the other lines.
Sounds like it'd be much easier if that input data was in a structured data format such as XML or JSON - do you have any control over that? Otherwise you're going to have to write a custom parser of some sort since it appears some lines have more values based on the property they represent.
It would be best to store it in a config file otherwise something like this: var Lines = System.IO.File.ReadAllLines("Some path to a file"); foreach (var Line in Lines) { if(Line.StartsWith("Amount of Rooms:")) { int myNumber = int.Parse(Line.Substring(Line.Length - 2, 1)); } } However a config file or properly formatted XML/JSON is infinitely preferable to this if you are controlling the source.
I am controlling the source. The file is made the first time i start the program after then user entered all the values. The file will help for saving the entered uservalues, so that if the program has to restart it can pick up the values itself.
https://msdn.microsoft.com/en-us/library/system.appdomain.assemblyresolve%28v=vs.110%29.aspx
No problem :) Happy to help.
It has been a while since I worked on this stuff, but I think I got things working with using a relative path for PrivateBinPath? So if you want to enable loading assemblies from the host AppDomain path, set the new AppDomain ApplicationBase to the host's ApplicationBase, then set PrivateBinPath to "plugins". Another couple things: The Assembly load exceptions are pretty crappy, you want to [enable fusion load failure details](http://stackoverflow.com/questions/255669/how-to-enable-assembly-bind-failure-logging-fusion-in-net) and make sure you know exactly which assembly is failing to load. Related, if you have an assembly in /plugins that refers to an assembly that's in the root or host appdomain's ApplicationBase, then you'll need to be able to load from the host's ApplicationBase. Enabling Fusion logging should help show you if that's the problem.
Yeah! I've going through some of the tutorials and found it somewhat similar to javascript. Sort of like an amalgam of c++ and javascript.
That helped, I now got it where it loads but then says "Type x in y assembly is not marked as serializable" and I have manually marked it and now going through and trying to figure out what is triggering that error.
You'll be wanting to look at [this page](https://msdn.microsoft.com/en-us/library/system.console.aspx#Unicode) on the MSDN.
Yup, I use this project as a learning tool to get better at C#, so I wanted to create it from the ground up, which included the IRC service. I was already familiar with the IRC RFC, so I thought it wouldn't be too difficult. Also, it allows me to shape it to match exactly the structure of the bot. I did think of using one at first though, but by the time I would learn exactly how the library operated and was to be used, I could have a decent one made myself.
Mainly due to this being the first time I have interacted with a Database using C#. At first, I just wanted a simple interface that had prepared statements available. Thanks for the link! I will post there as well. EDIT: [Here is my post](http://codereview.stackexchange.com/questions/88150/writing-an-irc-bot-from-scratch)
That's going to have to do with marshalling that happens for parameters and return values from your hosted appdomain. General guidelines: I'm assuming you want the instance of the plugin type to live in your new/hosted AppDomain, right? If so, make sure that class is derived from MarshalByRefObject. If you mark it as serializable, the instance will essentially be serialized to a new instance that will live in your application AppDomain. That applies to any parameters you want to create in one AppDomain and pass to the other as parameters. If you derive from MBRO, they will stay in the AppDomain where you create them, and Remoting will be used to make calls to the objects. If you mark them as Serializable, then they will simply be serialized across the domain boundary as parameters or return values. Good luck, this stuff gets a bit hairy in places. If you find yourself not liking the Remoting style of dealing with things, it's also possible to use WCF to talk across AppDomain boundaries. In either case, you want to concern yourself with reducing chattiness, as Remoting calls and WCF (even in-process with simple binding) calls are much more expensive than a normal method call that doesn't cross those boundaries.
I can't see how I would do it with _less_ recursion, although I can see that it would be possible to 'stop' a search if the total value of coins already allocated would be larger than the target value. In effect, this would be pruning the solution space before searching if I know that no solution would exist in that area. Your suggestion was a good one - removing the line where I index an array based on an index in a second array resulted in a 35% speedup. I'm down to 1200ms to search the entire solution space on my 4.0ghz dev machine. Thanks! I've updated the solution above.
You could use serialization or you could use XML or JSON. Serialization and XML are integrated in .NET and I believe JSON is as well; if not, there should be plenty of APIs for it.
For dynamic stuff (like different length words) you don't want to use the designer anymore, and create controls in your code-behind. In a nutshell: private void AddLabel(int index, int offset) { var label = new Label { Name = "lblChar" + index.ToString(), Top = 100, Left = 25 + offset, Height = 30, Width = 50 }; Controls.Add( label ); } So create one label for each character in the word, and then you can reference them later (for showing .Text) through the form .Controls property.
What's up with that Hungarian notation? O.o
I would not do it the way you've described. I would be tempted to use a single label and manipulate strings to generate your blanks and letters. BUT To do what you've described, have an array of labels that you construct with all the labels in the correct order. Then, instead of a giant series of if statements, use a loop to go through each letter and label. This will solve your issue with repeat letters. It also means that, later on, you can extend your program to a variable number of letters instead of a hard coded 6.
Cool! If you want less recursion, try changing it to an implementation using a Stack. I think the real gains in performance are algorithmic. In other words, you need to see if there is anything you can do to cut the number of times you go through the loops, identify if any of them are doing something redundant, think of any checks you can do to prune your choices, or any information you can hardcode which would be constant when you are searching for a generic solution. I didn't get the chance to look at this deeper, but that's what I would have done. 