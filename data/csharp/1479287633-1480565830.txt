This is for a homework question, isn't it? If you've not got a compiler, then grab something like SharpDevelop or MonoDevelop, and see if you can work it out.
Thank you.....soooo much learned here today.
I switched the VS Code for writing Angular. The Chrome Debugger tool is indispensable for this. However I still use VS as my primary C# editor. 
Nope, still shit, F12 doesn't work for ruby. Intellisense also.. Javascript.. don't let me start on javascript.
It's verbose, inscrutable, allocates additional objects, and ropes in reflection. It might be the best option available to you, if you really have no way to determine the type of the object in the list until runtime, though. (u/throwaway_lunchtime's suggestion to try using `dynamic` to do this seems like it would be worth a try, though.)
Couple things. w3schools is free. MSDN requires a subscription. Also from what I remember, it was more just sample code and documentation rather than a w3school type guide. But I could be wrong.
start with something very simple, lile recreate pong, or asteroids. 
It's a lot cleaner than WinForms, especially since I use a MVVM framework (Caliburn.Micro) which takes away the boilerplate code. However, I don't enjoy the UI-work as much as in web development with Angular, in which it's a lot easier to get things looking exactly how you'd like. Whenever I want to do something that's not a conventional use-case, I still feel like I have too much code just to get my views to update properly. Per example I have a Photoshop-like layer system, the layers are in a list with a parent-child relation, this is fairly easy to bind to a TreeView but when you need any more than just basic bindings it feels like reinventing the wheel. One thing I have really enjoyed about WPF in combination with MVVM is how it's all asynchronous, so you can build a really fluent UI even when doing beefy background tasks in reaction to user input.
just throwing this out there: maybe through the powershell api?
I made a 3D FPS game in DarkBasic for my game development unit in college. You can find it here: https://github.com/ManselD/DarkBasic-Classic-3D-FPS-Game It was a great learning experience as I'd never done any game development before, only software. It's definitely piqued my interest in game development!
Sorry about that!
Can you try to explain what you mean?
Global thermonuclear war is a popular beginners programming choice. 
No point in making an mvc app. They will only see the resulting HTML Also, its more challenging not using JS...
I would actually add that if you want to paste within a line, you need the have copied or cut from a selection. Copy/cut a line will paste a line. Copy/cut a selection will paste a selection. 
Wow, nice work, man!
This actually inspired me, thanks!
Thanks for the advice!
Working on outdated VS means I use empty if statements with a break inside every dang day.
If you indent your code blocks a few spaces, you can format them so they're readable. If we clean up some formatting and add in some implied `else`s for clarity, we get this: static bool Calculate(int num) { if (num &lt; 350 || num &gt; 850) { throw new ArgumentException (); } else if (num &gt;= 650 &amp;&amp; num &lt;= 850) { return true; } else if (num &gt;= 350 &amp;&amp; num &lt; 650) { return false; } else { // this is the missing return } } Where this is running into problem is that static analysis isn't smart enough to determine that your conditions cover all possible values, so that last, implicit `else` can't actually be hit. However, you can simplify the checks you're doing by removing cases that must be true, because they'd cause an earlier return. For instance, your second `if` doesn't need to check that `num` is less than or equal to 850: if it were over 850, the code would have thrown an exception and not reached that line. Likewise the check vs 350 on the third block. If you simplify it that way, you get static bool Calculate(int num) { if (num &lt; 350 || num &gt; 850) { throw new ArgumentException(); } else if (num &gt;= 650) { return true; } else if (num &lt; 650) { return false; } else { ??? } } But, you can simplify this to the point that `if` #3 is eliminated, because, if `num` were not less than 650 at that point, the function would already have returned: static bool Calculate(int num) { if (num &lt; 350 || num &gt; 850) { throw new ArgumentException(); } else if (num &gt;= 650) { return true; } else { return false; } } So, now you're returning true if `num &gt;= 650` is true, and false if it's false. Which ought to give you a strong hint for another way to simplify the function.
You should try using Unity: https://unity3d.com/
Make Yahtzee, 2d clicker. Roll dice, select what to keep and reroll as needed twice... then add score to scoresheet. Repeat until you can't add more scores. Sum totals (top basic + bonus + bottom). You can even add hover effects to list possible scores, or what dice combinations are needed. Graphics are simple, but you can shade and color areas nicely and then try out dice animations or rolling effects later. Think that would be a fun project, and even something you could share with friends or family.
Use a decision structure to check for empty fields. Allow conversion to multiple currencies and use a loop to perform all conversions.
1. If you cut a whole line by positioning the caret in the line and just hitting Ctrl-X, Ctrl-V will insert the cut line immediately before the current line if nothing is selected (if you have a selection, though, Ctrl-V will overwrite the selected text with the cut line). I'm pretty sure this is just standard Visual Studio behavior. If you cut an area (even a whole line w/ line break(s)) and paste that, however, the cut text will be inserted at the caret's position. 2. Home returns to the start of the logical line, by default. (That is, the first column before the caret and after either a soft or hard line wrap.) There is an Edit.EmacsLineStart command that would move to the start of the physical line, though. You could try checking some of the other Edit.LineStart* commands in Tools-&gt;Options-&gt;Environment-&gt;Keyboard, but you might have to make a macro or something, instead. 
I suspect this was meant for OP and not for me xD
Virtual Russian Roulette, but instead of blowing your head off it deletes a random file from system32.
Look at the games on NES Classic, or an old Atari game. Using Unity or Monogame, just clone one of these. 
If you truly need a DIY solution then you'd probably want to create a new api endpoint in your app called something like "api/monitoring" that returns something as simple as the system timestamp. Then create a simple program/script to perform a GET on that endpoint at your desired interval that is executed via a scheduled task.
This Live Unit Testing thing sounds like they copy pasted NCrunch into Visual Studio
i was just getting used to 2015 wtf
Thanks for the Input :) I think I will keep it even if just for the improved syntax highlighting.
*And provided the services for free instead of $160 - $290 / seat.
Well I was thinking of adding some kind of functionality that shows there is a back end running. IE a blog as a part of the site. Also I am not sure why you say it is more challenging not to use JS... Writing JS to make the site mobile and desktop ready I thought was a big deal. 
Try [using the debugger](https://www.dotnetperls.com/debugging); set some breakpoints and run through the logic line-by-line when it's glitching out. Check the values of your variables and see if the various loop/if branches are executing the way you expect.
Well the example i had is not really how i do, it would say my project is fairly MVCish atleast. Heres a better example: Public partial class Player: form { private readonly List &lt; song &gt; _playlist; private NancySelfHost _nancy; public player() { _playlist = new List &lt; song &gt; (); _nancy = new NancySelfHost(); _nancy.Start(); } private void button1_Click(object sender, EventArgs e) { Search ser = new search(txtbx1.text); _playlist = ser.getresults(); addToListview(_playlist); // pretend function } private void listView1_MouseDoubleClick(object sender, MouseEventArgs e) { PlaySong(_playlist[lvplaylist.FocusedItem.Index]); // And its sent of on another thread to handle playback. } } And then here comes Nancy and its module that i use. public class NancySelfHost { private NancyHost m_nancyHost; private string _url = "http://localhost"; private int _port = 666; public void Start() { HostConfiguration hostConfigs = new HostConfiguration(); hostConfigs.UrlReservations.CreateAutomatically = true; var uri = new Uri($"{_url}:{_port}/"); var configuration = new HostConfiguration() { UrlReservations = new UrlReservations() { CreateAutomatically = true } }; NancyHost nancyHost = new NancyHost(configuration, uri); Console.WriteLine("Started!"); nancyHost.Start(); } public class SimpleModule : Nancy.NancyModule { public SimpleModule() { Get["/"] = _ =&gt; View["Views/index.cshtml"]; } } But heres my problem, How can i get SimpleModule to access anything at all stored in _Playlist?
He should just copy and paste this and turn it in. A+
What ReSharper features made it in? 
I'm not sure it compiles, as-is, and it might stir some suspicions on the part of his professor, but, sure.
*Enterprise only.
[I think mostly Ctrl+T type search. But probably a few more..](https://www.visualstudio.com/en-us/news/releasenotes/vs2017-relnotes)
You're here so often I don't know why you aren't a mod yet ;).
Because I'm rude and I would abuse that power to enforce my idealistic and radical views.
I had to alter my extension method to get this to work: public static void Add(this IList&lt;Vector3&gt; list, float x, float y, float z) { list.Add(new Vector3(x, y, z)); }
I am also a heavy addict of its improved syntax highlighting. Looking at code on the screens of my colleagues is just plain misery now
Which is why you are perfect for the job ;)
I am more confused than before, What do you mean by mapping?! (:
Is there any hints/rumors as to when the release date for VS2017 will be?
As long as you are only referencing Namespaces that are included in the .net framework (System.xxx, Microsoft.xxx), you really only need the .exe. Check out the /bin/Release folder... if you just see the .exe, .pdb, and vshost files, then you should be fine with just the .exe. Pro tip: I develop apps for my company manufacturing floor, which uses a ton of old XP machines. Because of this, I target .NET 4.0 so I have no issues just having them run the .exe over the network. I'm pretty sure XP SP3 has the .NET 4.0 runtimes preinstalled.
Can you give any tips when debugging with loops? Because I have many loops and many itterations its hard to test every scenario. I found the bug btw, it happens when a player has 2 forced options. It is now fixed. But my question is this. Do you have any tips on debugging? To optimise debugging or just general tips?
&gt; MSDN requires a subscription. Nope. MSDN documentation is free. But you're right, it's more of a reference guide than an actual tutorial type guide. For that, you might want to look at dotnetperls.com
Hey, thanks for the reply. I'm not sure what person represents in their example. From my original post, the response I'm getting is in JSON right?
Yes, this is JSON produced by the API. { "access_token": "M47j5-jE18bW8g5K43i798347hU3h81fmLO0tpGQqvXuHCXnef-r2Ei3wv-OH0zIlBVer74a8_j34W-bDpjqUA2ZKWr614jFeaL0qcRNxYqlWMorH-gycX8Nsudfiuhe3762vHJxzh9q-FRHK3Py7pMDRn6YEdSdmFcvOtXwHTcZa5CMPBJ3dCGE29jcYouGwLi-ITYW9o-Sa7MQX4fC6OAtO3zxfaA1QGrlj-dHCOq6V5ICwvMCNcHWhQIcw6Gz-_kUng0HDtUojQ", "token_type": "bearer", "expires_in": 83199 } If you run that through [Json2CSharp](httP://json2csharp.com) The response is the following Class: public class RootObject { public string access_token { get; set; } public string token_type { get; set; } public int expires_in { get; set; } } Then in RestSharp you can replace Person from my example above with RootObject. You can freely rename RootObject, that's just Json2CSharp's way of saying that this is the top level node. In the case of your JSON, there is only one level. EDIT: Below is what you can use to convert the json to an object. RestResponse&lt;RootObject&gt; response = client.Execute&lt;RootObject&gt;(request); string accessToken = response.Data.acess_token;
You could make the site responsive without js. Even with a blog, you dont see anything of the backend. Just the data is coming to the frontend, but that could be nodejs as well.. Feature some open source project of yours or where you contribute to show off your skills.
Just count the lines in the loop?
its hard to explain for me cause english is not my native language. I have a small story in my textfile. If I typ "play" for example and line 13 contains the word "play" then textbox2 needs to display 13.
It just shows the same word in textbox 2 now, I have no idea what I have to do though :/
It seems that they are going after some of the resharper features (like code browsing, reference/usage and suggestions). Interesting that the suggestion made in the Connect(); // 2016 to change var to a type is the opposite of what resharper usually does.
And u r angular guy not csharp!!
SORRY! I lied, after more testing I was able to recreate it in XCTU. Thanks for redirecting my troubleshooting here! :) 
What is the error message that that line is causing/displaying? 
I never did understand why what's essentially a work around for bad code is on by default.
That's true :)
Lots of classes have Add and Remove methods. They are just another set of methods. Sounds like you just need to create a class with those three methods, Add, Remove, and SetCurrentGallons. All those methods would probably need to do is update the internal gallon count in the class, so you'd need to have that internal gallon count in there too. 
Removed: Rule 4. Unfortunately, you'll have to provide better context and some code. Maybe you're supposed to be using a `List&lt;T&gt;` which has `Add` and `Remove` methods? Not sure.
Might be some resources out there too for debugging tutorials. I don't have the time to go into detail now, but Google around for "conditional breakpoint" for Visual Studio. It'll let you set conditions for variable values or expressions when to break. So in this case, if you see that it happens when the piece at position (0, 2) moves, you can set the breakpoint to only fire when that specific piece moves and ignores other pieces.
I usually just hit build and it will usually be fine, but then I rebuild when I have made a bunch of changes or if the build fails due to a dependency. You probably want to do a full rebuild only just before doing a check in of the code, or making a release version. But just for debug, build works generally.
They called it 'Visual Studio "15"' to emphasise the fact that it was a codename.
Enterprise is like $2000 a seat tho isn't it?
Your numbers are off. Visual Studio 2017 = 15 Visual Studio 2015 = 14 Visual Studio 2013 = 12 Visual Studio 2012 = 11 Visual Studio 2010 = 10 Visual Studio 2008 = 9 They skipped 13.
Four statements per function is a stupid rule. Proper parameter validation is often going to consume more than that. My best advice is to ignore that idiot and read the .NET Framework Design Guidelines instead. That will teach you how to write code that people will actually enjoy working with.
He actually gave up on angular a while ago if I am not mistaken.
Do'h, thanks. 
I've been hearing for months about speed improvements but it is above and beyond what I expected. It use to take a few seconds to compile and run my app but now its milliseconds to start debugging.
"Object reference not set to an instance of an object"
I'm guess that means that either your response or your Data object is empty. What's happening is you're trying to access the property when the object was never formed. I recommend you put a break point on that line and double check what data is in your response object. You should be able to see if Data has content. If it doesn't, then it's likely one of two things. Either your API didn't return json or it didn't deserialize into your model correctly. 
I will be ready.
Why not? Assume a method returns a tuple with two values, and you immediately want to store them in distinct variables. Without deconstruction: var tuple = MyMethod(); var firstName = tuple.firstName; var lastName = tuple.lastName; With deconstruction: var (firstName, lastName) = MyMehod(); Are you confusing the term deconstructor with the already existing finalizer?
Sounds too good to be true
Because it's a way to conveniently implement tuples using only existing CLR features, while also allowing programmers to define their own tuple types.
As the product name suggests, some time in 2016.
How does Visual Studio let you know the order the elements are returned? For example, whether to use `var (firstName, lastName)` instead of `var (lastName, firstName)`. Do you need to go look at the Deconstructor definition each time, or is there a visual indicator on mouseover or something?
You look at the return value of the method. The method returns a tuple of two elements, which can be named or not. You then deconstruct those two values into two variables. The names do not need to correspond. It's basically just that: A method returns two values, and you store it in two variables.
holy shit lol. Never heard of conditional breakpoints. Already changed my life. Thnx lol
That's fine for your method, but in the linked MSDN piece they had this example: var (directoryName, fileName, extension) = pathInfo; Hopefully it will be clearer to me after I play around with it, but it looks a bit "magic-y" in their example.
You answered your own question... When they released Visual Studio .Net they dropped the version number from the name but kept it internally (despite the big changes with the new framework and languages). It wasn't really an issue until this year when we had VS 2015 and VS15 out there at the same time. Microsoft does have a history of confusing everyone with their naming...
Pretty certain they've done this with all releases, or at least the last few...
I agree. It's an unfortunate term.
Using deconstructors will require a lot of dicipline, though, since you only have order to work with. Also, I think it's a false dichotomy to compare deconstructors with constructors like they do in the article.
The deconstructor returns them in that order.
Is C# 7 featured int he new VS 2017 RC?
Download whenever you want. But don't install it on a production machine. It's still a preview version (Release Candidate quality tho).
AFAIK, yes.
https://www.visualstudio.com/en-us/news/releasenotes/vs2017-relnotes Important While Visual Studio 2017 RC in general is supported for use in a production environment, those workloads and components that are marked “Preview” in the installation UI are not supported for use in a production environment.
Ahah no problem! Glad i could help. I was finding it weird being a software problem because i use the SerialPort class all the time for my projects and never had that problem in particular. As far as i know, the SerialPort class is just a wrapper for the windows api, so it's battle tested. Anyway, what i usually do in those cases is use PuTTY to see what happens in the serial port.
i don't understand the ref methods, can somebody give me a better example?
What about "Viasfora"-Addon? I think you could set up the similar color scheme with it. 
&gt; Rule 1: No job postings (For Hire and Hiring)
&gt; Clearly. But my question is how do you know the order? If I write a method `public void DoSomething(string foo, string bar)` Then how do you know the order of foo and bar? The same way. I get that you can get them the wrong way around when you call the method and the code will still compile, but eh. 
I think /r/forhire/.
Using just `.Text =` keeps _replacing_ the text with each line. So it only shows the last line: for (int i = 0; i &lt; 8; i++) { titleAndAuthorLabel.Text = fileLines[i].ToString(); } Instead, use `.Text +=` which will _append_ the text. You may also need to add an `+ Environment.NewLine` as well if the `fileLines[i]` don't have a carriage return in them.
Awesome, Thank you!
Use javascript on a button click or whatever transfers the user to the second page. Give the controls a class, say "QueryControl". then use this code to go through the controls: http://pastebin.com/LADzCLVA I've not tested it, but it should work. 
A major use case is returning multiple values from async functions, as they aren't allowed to use out parameters.
In theory you can also look at the constructor, as it should have the same parameter order as the deconstructor.
I know, I just like answering rhetorical questions. It distracts me from the pain which is my first of four hour-long status meetings today.
And that's why I don't declare multiple variables on one line. I can never remember little rules like that.
That sounds like stuffing your text boxes into a collection ought to still work, though. var textBoxes = new [] { textBox1, textBox2, /* etc */ }; var controlNames = textBoxes.Where(x =&gt; !string.IsNullOrEmpty(x.Text)) .Select(x =&gt; x.Name) .ToArray(); var query = "query=" + String.Join(" AND ", controlNames); If you need to do the same thing with your list box and drop down, you throw names and values into a collection, instead: var controlData = new Dictionary&lt;string, string&gt; { { textBox1.Name, textBox1.Text}, { textBox2.Name, textBox2.Text}, // etc { listBox.Name, listBox.SelectedValue}, { dropDown.Name, dropDown.SelectedValue}, }; var controlNames = controlData.Where(kvp =&gt; !string.IsNullOrEmpty(kvp.Value)) .Select(kvp =&gt; kvp.Key) .ToArray(); var query = "query=" + string.Join(" AND ", controlNames);
They need to fix their versioning/naming. Saw, "Until VS 15 ships" me thinking "..it's already out. Been using it for quite a while.." (Thinking 2015, not VS version 15) o.o
I am surprised that they didn't use the explicit operator syntax (or an adjusted form) to implement the 'deconstructor' - since this is basically what it amounts to.
Have attempted to run VS RC releases on my main dev machine and ended up needing to format my hard drive a few different times. If you really want to use it, do so on a VM. 
Functors instantiation has a runtime cost, which local functions have not. Also it looks more verbose sometimes. Really wanted this feature after Scala practice. 
There is no difference between tuple deconstruction and the Deconstruct methods. And that's the **great** thing. The tuple type simply just has a Deconstruct method which is used to deconstruct the tuple. This allows everyone to use this language feature too for their own types. Take async for example. You can only mark methods async if they return `Task`. But you can await on many more types - that's really annoying. Most used case is `ValueTask`.
 var stuff = new GreatStuff(widget, package, instructions); var (widget, package, instructions) = stuff; The deconstructor should match the constructor parameter order. If it can't, or is otherwise not incredibly obvious, then it shouldn't be given a deconstructor. (Yea, I know this isn't a perfect answer.) 
Why not just lift pattern matching directly from F#? I really dislike the syntax. And why isn't it an expression?
Unit testing is writing true statements as code about the code you wish to test. Instead of verifying the code you've written by running it and inspecting its execution or reading long logs or endless print statements; you will execute a growing suite of test which make assertions about how the code should function. As long as the tests pass you can be sure you haven't introducing regression in existing areas. Test driven development is the idea that you should invert this process and write tests first. Then you write minimum amount of code necessary to make your tests all pass. You iterate on this workflow adding new tests that fail and new code to make those new test pass while still pass all the previously existing tests. 
I really dislike the pattern matching syntax for ifs. It doesn't fit within C# norms, and it can still result in null references (if a non conditional operator were used). I especially don't like that the pattern variables are scoped outside the if statement - if you need method scoped variables, just declare them with 'as'! They should have made a new syntax following from the switch and catch patterns like: match (storage is UsbKey usbDrive) when (usbDrive.IsPluggedIn) {...} else match ... This would be super efficient for small pattern scenarios, and offers a novel but consistent syntax!
9 because it's the 8th version since 6.0. They skipped 13.
Oh yea. A lot of people don't realize that every `await` statement is another memory allocation. (Not literally, but close enough.)
&gt; You can only mark methods async if they return Task. Are they still planning on fixing that in C# 7? Last I head, `ValueTask` was going to be a thing.
I thought the article said that it uses the constructor signature order? But IDK, I'm a noob.
Because "break" is part of what should happen if that case is valid. Thus it is indented with all the other things that should happen if that case is valid.
Microsoft's concept of "Release Candidate" became meaningless to me after the recent ASP.NET 5/Core/Whatever release candidate debacles. That was alpha quality stuff.
How about 5 gigs of ram. Is it still 32-bit?
I thought NUnit was a 3rd party unit test library, not the unit test framework included in VS.
It is third party. The only NUnit stuff in this article is the first paragraph. The rest of it shows Microsoft's built-in testing tools.
&gt; What's really confusing is that int is Int32 or Int64 depending on your current framework bitness. Besides that your answer is completely unrelated to what the user was asking, your last statement is just wrong. `int` is always `System.Int32`. The bitness of the framework does not matter. This is not C.
Wow, finally named tuples, been waiting for this for ages. Nice addings to my main language. Being able to switch between complex types is nice too. I feel like c# is getting more flexible every year. Props to the dev team.
I never thought to use brackets in a switch like that...I like it. I always found it weird that the code in each case wasn't really blocked off in any way. I am now going to use curly brackets in all my switches!
Literally everything he said is wrong. `float` is not `Float`, but `Single` and it's not a class but a struct.
Not only named tuples, but also value type tuples!
More direct link: https://dotnetcore.gaprogman.com/2016/11/17/you-got-a-friend-in-me-building-a-react-front-end-friend-for-a-net-core-app/
Installed yesterday on my work machine and I must say that it works as expected for now.
Me too, for the same reasons. My development environment runs inside a VM on our company server (which is far more powerful than any of my other devices). 
if you havr never used discriminated unions give them a look!
I have windows 10 and visual studio 2013 and 2015 in a virtual machine because I simply cant do without VS, the alternatives are utterly terrible to say it nicely.
It's a state machine that sits on the stack, every time. I think it can also affect inlining.
When you say it can't happen, do you mean it won't compile at all at _compile-time_ or it throws an exception at _run-time_? If it's the latter (which I suspect in this case), it's probably because `dd.SelectedValue` isn't an `int` proper. Perhaps it's another numeric type (`float`, `double`, `decimal`, `long`)? In such cases, the cast will fail. This is because it's trying to convert from type the compile-time type `object` to `int`: this only works if the actual value/object stored in `dd.SelectedValue` is `int`. In other cases, even if it is a normally convertable value (like `double`), C# doesn't know (at compile-time) what conversion method to use (because it only knows it as `object`). You can demonstrate it with this code: double d = 3.0; object o = d; int val = (int)o; //throws InvalidCastException Either cast it first to the actual type it is first: int val = (int)(double)dd.SelectedValue; //assuming it's a double Or use `Convert.ToInt32` convenience method which will do the extra checking/casting/conversion for you: int val = Convert.ToInt32(dd.SelectedValue); EDIT: If it's the former (compile-time error), then it's usually because the compiler knows for certain that the types are incompatible. For example, if `dd.SelectedValue` is strongly typed as say, `string`, then there is no conversion method to convert from `string` to `int`: string s = "3"; int val = (int)s; //compile time error This doesn't apply to type `object`: any `object` can attempt a cast to any other type, but it won't run any implicit/explicit conversion operators, it will merely make an attempt to cast or treat that object as the specified type. Hence it can throw runtime exceptions in these exceptional cases.
standard MS practice: MS | Everyone else ---|---- alpha | whiteboard prototype beta | developer ci build preview | alpha RC | beta 1.0 | RC 1.3 | 1.0
It won't compile at all. SelectedValue is a string, which I know will be able to be parsed to an int. I guess I was just trying to figure out the difference between (int)Something and int.Parse(Something) where something is a string. 
There's always more than one way of designing an application well, but this sounds like a perfectly servicable approach to me.
`(int)Something` will try to convert _known compatible types_ (e.g., `double`, `float`, `decimal`, `long`) to an `int` (except when `Something` is an `Object` in which case it will simply try to _treat it as_ an `int` and fail if it isn't an `int`). If it's not a known compatible type, it will result in a compile-time error. Strings aren't considered compatible with integers, so there's no compile-time conversion operator available. `int.Parse(Something)` will read the characters of the `string` and try to _create_ an equivalent integer representation of it. C# is a bit more strict (but more expressive) when handling numeric types and conversions than say, JavaScript. But it's generally considered a good thing: they tend to make it more explicit when you're doing the conversion, especially when there's a possibility for failure. When there is no possibility for failure, (say when converting from an `int` to a `double`) then the conversion can happen implicitly (`double d = someInt;`) The designers decided to treat text (`string`) as a bit more of a special case. This is because you aren't converting to/from numeric types only, and there are more possible reasons for failure, but _also_, perhaps most importantly, there are _different/multiple ways_ of parsing a `string` into a number. Most notably, you can provide different culture/formatting information to have the parse act differently.
Alas. I suppose it could do, but even with `AutoWordSelection` fixed, it's mostly the problem with the phantom line-break at the end of the `RichTextBox` input text. Bit worried that it might turn out to be a 'feature' rather than a bug that could get fixed.
I've been running completely in VMWare for 5 or 6 years now. Prior to that I always had test environments in VMWare, but ran the actual dev environment on the host OS. Cheap SSDs, i7s, and lots of RAM have made running inside the VM almost indistinguishable from running on the bare metal. I maintain two current / active Win10 environments; one for a client that requires complete separation (mostly for my own sanity), and one for all of my other work. I also have a several older environments that occasionally need to be spun up for special projects that I don't / can't support on my main dev images. The only thing still on the host install is Android Studio (for emulators and phone debugging), and I have a Mac Mini for Xcode / iOS work. 
This is probably the best advice.
Converters allow a `ConverterParameter` to be passed, which can be anything (=object). You can retrieve it in the `void Convert(..., object parameter, ...)` `{Binding XXX, Converter=…, ConverterParameter=…}`
Doesn't really look like a full alternative to DU. There's no way to have e.g. `OneOf&lt;User, User&gt;`. Also: &gt; // (compile-time checks not yet available, yet to figure out how to do that) You'd write an analyzer for this.
You mean with a real DU you can't have OneOf&lt;User, User&gt;? There are compile time checks for making sure you have fully covered all cases for matching/switching. The converter bit is difficult to implement with C# because order of generic parameters matters. I had written a generator to enumerate all possible type safe conversions, but the C# code itself comes out to like 50MB due to the combinatoric explosion of valid conversions. &gt;.&gt; Really, we just need compiler support for them like you said, but in the mean time... a Roslyn analyzer would work yes.
never mind, i found the fix!
Yeah, I got that far but I couldn't (and still can't) figure out the syntax to pass "this object" as the ConverterParameter.
I've given you two different ways to solve what seems to be your problem. Either one will probably work, but I don't think I have time to try boiling it down for you further. &gt; Could you provide me the full code for the solutuon? No, at least not any more than I have done. I would probably need to see all your code, and I'm sure I don't have time to troubleshoot it.
VMWare is one of the few hypervisors that does allow nested virtualization which would allow you to run an emulator within your VM. It's relatively easy to enable. https://www.veeam.com/blog/nesting-hyper-v-with-vmware-workstation-8-and-esxi-5.html That said, it's not supported by VMWare for production use. The big thing I don't like about virtualized development environments is that generally the graphics performance is a lot worse than running on native hardware so animations often skip frames or are laggy which makes the whole experience feel bogged down.
Btw. there is a space between `Binding` and `RelativeSource`
&gt; You mean with a real DU you can't have OneOf&lt;User, User&gt;? With the F# one you can.
Ah, thanks! I'll try this now! 
Thanks for the feedback. I think the fact that the language is more versatile outside of web development is going to be a big deal for us. Have you published .NET Core applications for employers/clients? Did you hit any snags that would not have been an issue with .NET 4.6? I was actually kind of disappointed to see ASP.NET Core MVC kind of lagging in the "Multiple Queries" and "Fortunes" benchmarks on TechEmpower. But benchmarks aren't perfect. And at least it still beat Ruby on Rails.
I'm currently leaning toward option (a), with (c) as a backup plan in case we run into a 3rd party library that doesn't support the new .NET framework. It seems like Core is were the development focus is, so the gap between Core and 4.6 is growing. We would end up spending a lot of time playing catchup a year from now if we started in .NET 4.6 now. Our key external dependencies are LDAP, Oracle, and Exchange. It looks like the LDAP library has been ported to .NET Core and there's an adapter from Devart for Oracle. I haven't looked at Exchange much, but I would imagine it's keeping up with Core. There are probably more dependencies I'll uncover as we dig through the piles of undocumented code during this upgrade. Just two weekends to build my pitch for the rest of the team!
A great place to get started is [Pluralsight](https://www.pluralsight.com/). It is not free, but it is worth the price. They have a free trial as well.
If the strings are all valid identifiers, you could just use `HROracleFields.ACTIVE_FLAG.ToString()` and `Enum.Parse()`, no need for the `DescriptionAttribute`. For a class holding custom strings, I'd go with `const` fields or expression-bodied properties for the cleaner syntax. In general I think using magic strings all over the place like this is bad design though, I'd create a class that wraps the property bag and exposes the values directly as properties, so consumers never have to know about the identifiers and you get at least a semblance of type- and compile-time safety.
Usually because that object isn't an extension of the interface you're casting to. EDIT: Wrong language, but probably still applicable.
This works, or a facade with a callback and tickloop or something.
DEATH TO OUTPUT VARIABLES AND OUT KEYWORD. Seriously, its bad practice. I've done it once recently and It still haunts my nightmares for bad practices. 
Those words sound familiar but I'm not sure what you mean. I started building my pattern then came across a problem. The lights I have to change will need to be done from the front-end so I'm thinking of adding my code behind or possibly view-model if I decide to go MVVM as a listener, it can listen for light-change events and react accordingly. The only problem with that is now my logic isn't all in one spot.
&gt; I'd create a class that wraps the property bag and exposes the values directly as properties, so consumers never have to know about the identifiers and you get at least a semblance of type- and compile-time safety. This makes sense *except* doesn't this harm discoverability and flexibility? [I just took my meds so I'm too addle-brained to come up with good examples](http://i.giphy.com/3oEjHO0o85gMXUyjQc.gif) but I know that with property labels virtually every language and framework can dynamically build code, but with strongly typed objects this isn't always as easy. For example, I can create a querystring with basic string manipulation, but creating a POST package usually takes a LOT more work (and can be tripped up by random incompatibilities). I guess I'm well into "overthinking it" territory...
What would that mean exactly? I may be misunderstanding.
[nod] As usual - there is no one "best practice"; understand your options and their pros &amp; cons. And I have a better handle on the options now. Thanks all!
Not everything made in C# is meant to be "open". So virtual gives you have the option to either be open or not.
Off topic: In this thread someone mentioned that if he remebers correctly that you once used Angular but decided to not use it any longer. Is this true? Currently we are creating a SPA website with Angular 2.0 and i start to have doubts if this was the right course of action. In case you did use Angular once could you provide some information for reasons to stop? Thanks
You may also declare public properties onto your value converter and initialize the property in your resource declaration.
i don't know if it's mentioned in this particular vid but expression bodied getter/setter/constructor/finalize/probablyotherstuff makes me giddy. local functions will be a thing as well.
Not specific to C# but this might help in general.. https://blog.codinghorror.com/code-smells/ 
I'm so excited for the switch on type. This is amazing :D
You're right in every bit of what you say. I did abstract the question to address the part I have problems with, setting aside the parts where I *do* understand the trade-offs. But I did have to address this: &gt; I'd assume ACTIVE_FLAG should be or is used like a boolean, but its just a string. Because my cantankerous side simply will not use booleans, ever. The number of times that a representation of a real-world facet is truly binary is far, far outweighed by the number of times I've found the "oh it's 'true' or 'false'" to be the result of a premature optimization by a business analyst - often the exact same analyst who later throws a fit when you can't shove their newly identified indispensible third state for the same facet into all your existing code and fields . When I own the schema, I don't go lower than Int16. I'm well aware of the arguments - I just choose to ignore them out of a sense of self-preservation. [grin] 
How's this C#-specific?
[sigh] And the very next day after I go on a rant about SharePoint developers who still write code in SharePoint 2007land, ignoring subsequent improvements, I make a comment betraying my living in .Net 2.0land...
There exists c# specific libraries to solve these problems and c# makes it very easy to integrate these solutions. Nevertheless my predecessors chose not to use them and make them a nightmare to depricate and maintain.
What are some of the things C# devs accept but others wouldn't? Genuinely curious. 
You monster
Yeah I started doing that. That way I can clearly differentiate between the different types of variables
I would use a person **base class** for Manager, Employee, etc. unless I had a really good reason for needing an interface.
&gt;I did abstract the question to address the part I have problems with, setting aside the parts where I do understand the trade-offs. I take that statement as saying that you recognize there's an overall better way of approaching this issue, but you'd rather solve this smaller problem that's completely nullified if you address the larger one. I understand that if there's some legacy code considerations, but ultimately you're asking for a bandaid when you really need stitches. &gt;Because my cantankerous side simply will not use booleans, ever. You are the first developer I've ever exchanged with that's said that. To think that there aren't times when a boolean is appropriate is very shortsighted. Regardless, if ACTIVE_FLAG is not a boolean, its certainly not a free form field. My previous statements ring true, ACTIVE_FLAG isn't representing "carrot" or "balloon", its representing some sort of predefined state. Its a finite set of values, not a free-for-all. Therefore, if its not a boolean, then it should be an enum, which should represent the expected states. I would also take the position that if ACTIVE_FLAG is not a boolean, then it is poorly named, and should be changed to something that does not imply some sort of binary condition. This is asking for bugs to enter your system by encouraging assumptions that don't ring true, and also has maintainability issues as well. &gt;I'm well aware of the arguments - I just choose to ignore them out of a sense of self-preservation. [grin] From this comment and several others in this thread, it appears that your own ignorance is getting in the way of you actually solving the problem you posted about. Everyone has given you better options than the one you're choosing to pursue and you appear to be just fine with sticking with your solution because you seem to know better. You clearly do not seem to grasp the nature of working in a strongly typed or object oriented language. Considering that this is a relatively routine problem that has been cleanly solved in the majority of apps that I've come across, the fact that you're treading water with it should be an indication that you don't have it all figured out. You seem to want to split hairs on "best practices", but are clearly avoiding them.
That's true of any modern language, not just C#.
I disagree about avoiding object initializers but in a very specific case: object initialization should be used only when populating an IEnumerable with constructed objects on instantiation (so array initialization but for all IEnumerable types) and, more importantly, _during testing_. The reality of testing is that you want to isolate your functionality to only the unit of work that is needed. By object instantiating your class for use in a test you guarantee that only the properties you expect are populated and that the expected functionality only depends on that state/that data. If you use a constructor you are introducing a dependency on the behavior of the constructor which is a separate test especially when a constructor does more than simple assignment.
Littering every function with try/catch and logging code. The nice thing about exceptions is the way they bubble up so you can handle that shit in one place.
Hope a future version gets enum support that are similar to Swift enums. Guessing it would need to be a whole new type in order to accommodate backwards compatibility. But enums in Swift are pretty powerful. That's about the only thing I like about Swift over C# though.
I may get downvoted and I'm willing to admit I'm old and set in my ways, but I prefer to roll out my code rather than compact it into complex Linq statements. I find big link statements hard to read and impossible to debug. I also prefer to use SQL statements over entity framework. 
Yeah, good point. 
I think it's both. Other languages are way 2 advanced for me and I am so very stoopid.
Pokémon exception handling. Gotta catch 'em all!
Nah nah, just put an event handler on the UnhandledException event
Disagree on the first, agree on the second. My exception to the first, is when a piece of code has proven to be particularly problematic. I wrote a about 30 lines of LINQ this week that would have taken pages of iterative code. But it hasn't thrown an exception yet and appears to be doing what it should.
&gt; When referencing the object through the interface, the compiler can't know which implementation of == to pick, so it defaults to reference equality. Using reference equality, myResource1 and myResource2 are not equal. &gt; Well right, only one operator is actually valid in this case. It's not going to use additional context from earlier in the method to insert a cast and call a different overload. You could define another operator that is actually valid in this case, and it would pick that just fine: public static bool operator ==(MyResource left, IMyResource right) public static bool operator !=(MyResource left, IMyResource right)
Indeed... I found myself typing out expression-bodied getters/setters when 6 first came out and scratching my head when squiggles showed up... "Oh yeah that's not a thing... but why ?" Mmmmmmmmmm... 😍 
It is doable by writing a custom extension. Without it is not possible.
Over engineering from web devs who think they are real programmers. Solution: hopefully they fuck up so much, no one will hire them.
I would guess the main advantage of the probably-awful constructor vs. a bunch of writable properties and an object initializer is that the type can then be immutable. Immutability, on the whole, makes reasoning about code easier. (It can be a rather ugly complication, of course!)
But then again, implementing your own equality is almost always a bad practice as well.
1. I don't know how I feel about this advice regard object initializers, mostly because named arguments aren't particularly idiomatic. Constructor injection is definitely superior to property injection, and immutability to mutability, provided the situation allows. Named arguments still look verbose and weird to me, though. Too many years of positional arg-passing, maybe. 2. I'm not particularly sold on using IEnumerable or IReadOnlyCollection instead of List. This advice makes perfect sense when you're returning things that are part of the internal state of the source object, but an unnecessary obstacle to getting on with things when they're just result sets from other computations (a batch of data returned from the database, let's say). 3. Definitely. Learn other languages, and especially other kinds of languages. C# is (mostly) object-oriented, so a functional language is a good add for any C# dev. It's also imperative, so a declarative language would also be a good choice. So on and so forth.
Examples?
Mocked out is actually a pretty reasonable reason...
But isn't that a code smell? Having an exception not derive from Exception?
Linq is just another mindset. It was gibberish to me at start, now I (figuratively) can't live without it.
Ah, learning things every day with C#, thanks!
I sometimes find myself coding something like this: var a = obj != null ? obj.ToString() : ""; Is there a way to structure this using null coalesce instead?
I think most of these are pretty sensible, but it's troubling to see YAGNI getting thrown around so casually without regard for context. Developers should be asking themselves "how bad will it be if I'm wrong about this?" It might be that you lose a day or two reimplementing something you left out or you wasted a day or two doing something unnecessary. Or it could be that you just just wasted months of work and hundreds of thousands of dollars because of something you could have prevented six months back but you didn't think it would come up. I've seen it happen, and I've lost count of the number of times some contrived bullshit would have halted a project dead in its tracks had I not taken some precaution that in all likelihood was not going to pay off. And most won't, but then, most seat belts and smoke alarms never pay off, either. Murphy's Law gets the better of every developer sooner or later, but you often get to chose what you're willing to risk. Code defensively and don't let cutesy acronyms be a replacement for your own judgement.
var a = obj?.ToString() ?? "";
I've always wanted to follow this, but what do I log and how do I recover when the exception happened a few levels down? I always feel I lose the ability to recover appropriately and log useful state.
I don't really get this feature... do they want people to write crap methods that do N things?
&gt; I really do wish they'd just abandon the switch/case syntax Just don't use it? 
So you just don't place custom objects in sets?
If you've got different construction scenarios then, yeah either looking at additional constructors can work, or maybe just make some of the arguments optional. Another approach might be to create static creation methods for specific versions which calls the default constructor. This also gives you the option to use the name of the method to describe what defaults it might be using behind the scenes. Also, I'm not saying to _only_ use this style, but just to consider using this style where it might help make code maintainable long term.
So you're saying I shouldn't use Tuple&lt;int, string, string, int, RandomEnum, IBanana, string&gt; ? :'( (this is a joke)
No, you should not. Bananas are awful.
Yeah, I've had the response of using named constructor arguments being non-idiomatic during code reviews, but it really comes into its own when reviewing code on GitHub or somewhere without intellisense, as positional arguments can be quite confusing and difficult to see if something is wrong. E.g. which is correct out of these two? new Person("Playstead", "Craig"); new Person("Craig", "Playstead"); You'd need to refer back to the code for `Person` to see that the first argument is actually the first name and not the last name. On point 2, I think passing Non-mutable collections is particularly helpful when you're crossing domain boundaries. So, if you have an assembly with and interface, returning or taking a collection, then making that type "ReadOnly" implies to the user that the collection shouldn't be modified. If a modification is needing to be made, then you simply copy it into a new mutable list first (by calling `.ToList()` which then won't have any side-effects on where the original collection was created. However, there's also plenty of places where passing around a mutable list is absolutely the simplist option in C#, but I'd argue that _always_ passing the mutable collection is a common bad practice in C#.
/end thread
Most of the time the stacktrace alone tells you what happend.
While it is quite possibly I simply did not figure out how to use said container correctly, I simply swapped it and moved on. I made an example, not a complaint ;)
You could also do that like this: var a = $"{obj}";
Same
I'm not sure you get what /u/tweq 's quote says.
Alternatively don't do that, as it is unnecessary exception wrapping. Just let it bubble and the stack trace already tells you the call stack.
&gt; Only in the UnhandledException event you have a chance to log exceptions that do not derive from Exception That is not true. If your catch is without arguments, it will catch unmanaged exceptions, too. try { } catch { }
Method syntax makes more sense IMO. I only use sql-like syntax for joins. I love using link, specially because of using enumerables, since many times I am wrapping a rather complex concept into a linq expresion just to find if there's Any(), or fetching the FirstOrDefault(), so it's efficient. The bad part is that the bigger the expression, the harder it's to debug. But you can always separate the expression in small parts and then realize each part into a variable using ToArray() for debug purposes.
I only use getters with side effects when it's something like: Object mObj = null; Object Obj { get { return mObj ?? (mObj = InitObj()); } }
Yes, that is exactly the problem. Because calls to non-final methods incur a performance cost over and above calls to methods that are final, an entire system where *everything* is virtual is a performance headache. The rest of quote is pretty important, too, though. It's the reason, in C#, one should at least think about sealing any public type in your assembly that you don't intend to extend.
Write a property logger using reflection? It's not a good idea, but you didn't ask for that ;)
It's not. It can be incredibly useful when done properly. 
Unless your error is based on data in a production system. Then you're fucked, since you won't get line numbers, parameters, or anything else to recreate the problem.
Yeah but this is an IBanana. The awful is abstracted away!
I disagree - I would far rather a simple named Tuple over yet another throw away wrapper class that simply provides a success marker, or index. With C# 7 the new advice should be never create throw away wrapper classes and never use out parameters.
I think if you look through .net itself, and many public APIs, you'll see that needing to return several values is quite common, and doesn't imply that a method 'does N things' - simply that the output needs to provide additional information (success, an index, grouping). Today you are forced to either use out parameters (universally maligned) or a wrapper class. Tuples make this much cleaner without cluttering the API with throw-away wrapper classes.
One of the problems with a generic catch for all errors is that when a specific function errors it can cause a cascade that could have been easily caught and handled at the specific function. For example: Function A calls function B to create an object. Function B fails for some reason and instead of just logging the exception and returning a null object (or a partially built object), Function B fails, which causes Function A to fail, etc all the way back.
Or often simply `string.Join`.
&gt; I understand that if there's some legacy code considerations, but ultimately you're asking for a bandaid when you really need stitches. It's SharePoint, and the managers get really weird when I recompile the Microsoft dlls. &gt; Everyone has given you better options than the one you're choosing to pursue and you appear to be just fine with sticking with your solution because you seem to know better. Where did I say that? In fact I explicitly said otherwise. You're letting your own biases color your observations. Here's a hint: in the future, when you don't agree with someone, don't start from the premise "they are obviously an idiot." And when a PM tells you during user acceptance "Oh hey - this 'Active flag'? Can we set it to show a difference between 'off', 'on', and 'disabled'?" Think of me. :-) 
Log what you're doing before you do it. When everything blows up and you log the full exception and stack trace, your log gives you all the context you need to interpret the stack trace.
I do this with web service implementations, because if the code in the service failed for whatever reason I *need* to log the exception - and I'll bundle it into a FaultException (WCF coder here, WCF clients like FaultException messages better) and throw that. I should probably add, I do this because WCF is a bit shit (in lots of regards, but specifically) with logging, so I need to manually write to file, or use SharePoint's ULS logging service (I spend a lot of time writing stuff for SP).
&gt; But you can always separate the expression in small parts and then realize each part into a variable using ToArray() for debug purposes. I do this a lot, but also I very rarely ever use LINQ syntax, probably because it seems a bit too "Alien" in the C# world. Methods with lambdas in just seems to make more sense. 
Why would you want to mock a class with no methods though?
Agreed. I almost never use tuples in c# because `Item1`, doesn't preserve the context of what the variable represents. On the other hand, I use them a lot in Python, and fully expect to start using them quite a bit in c# 7.
So, this is just an in-memory message bus -- more of an observer pattern implementation that only really works in the same process, but offers an alternative to using events in order to keep the classes decoupled from each other. Once you back it with a persistent queue and layer a mediator layer on top of it, you get into service bus territory and it starts to get pretty cool. I'm not going to attempt to write my own because that just gets nutty particularly when your application starts to get into database, since you'll want to make sure that transactions are being coordinated which could end up using DTC (barf). This was a temporary solution to sort of bore out the design for the application so that I could replace it with NServiceBus which is what I'm in the middle of now :)
I don't understand the question. The bus itself was being registered with the container so that it could be injected vs. using a locator pattern. The handlers themselves are being loaded using reflection so that it could done with an assembly scan vs having to explicitly register every single handler in the application with either the container or the bus itself -- which is a pretty common installer pattern actually used by both Castle Windsor and NServiceBus. And as I was pointing out, this was a temporary solution so that I could code around the pattern with expectations of moving us to NServiceBus, which I just did in the last couple days. The refactoring required was minimal since I had already designed the service around the same pattern.
Well how often does that actually happen? This scenario seems to be more the exception.
Overuse of dynamic keyword to avoid handling variability in incoming types. This makes it hard to refractor because you have to manually validate all callers of the method. Solution: encapsulate variability using design patterns. 
I have the reverse problem at my job. Years ago developers used as many dependencies as they could and 15 years later I'm still replacing and reprogramming defunct libraries that are no longer supported and no longer work in modern versions of .NET. 
I've created only-one-implementation generic interfaces for generic classes when I was looking for co/contravariance on that generic class. Feels good man.
That's by far one of the most powerful tricks. You create a context associated with each request. You audit all actions or interesting things and then pump that into the context. Then if failure happens you have all the information of what happened before hand plus the stack trace. For successful operations you can easily pass that context to a generic auditor and record all or nothing depending on your logging level and depth desired. In general these context logs mean nothing except for resolving a failed transaction 
You're in the park but missed the bus. The real example is ShippingService : IShippingServive A single implementation interface is almost always wrong. It's definitely wrong when it's literally the same name. Your example about IPerson is pretty much exactly opposite of correct. In general base CONTRACTS which in your example a IPerson is a contract, should have an interface on them. Some common ones are IDocument, IEntity, IAggregateRoot, IMesssge
Using tuples erroneously. There's nothing wrong with tuples used sporadically. Thankfully c# 7 makes this what it should actually have been 
Why do you think this is bad? Would this be OK: If (true) // do single line thing Else // do other single line thing Are you suggesting that the use (or non-use) of braces should be consistent between the if and the else parts or that they should always be used? Edit: I'm curious why I got downvoted. 
IShippingService would be mocked out and injected via constructor in my unit tests for things that depended on it. That's much harder to do without the interface. Person/IPerson more often is nothing but data, no or little behaviour, certainly none requiring mocking out for testing. Tests could use a real Person object fine, but I wouldn't want my tests using the production shipping service. 
DTO objects generally shouldn't have methods. That's what I think OP was referring to.
&gt; link 
Removed: Rule 4. As-is, there isn't much to answer here; too broad. Make an attempt to solve the assignment, and if you have a question or issue regarding a _specific_ aspect, then ask about that and post relevant code.
That's partly why I said "when it makes sense". I probably wouldn't bother trying to wrap something like an Rx library, but something like logging out serialization if a great candidate
Yes Is how can I read the values from an listbox and converted to a certain Currency like if the all value from the listbox are usd i want to click a button read all the values and converted then display. I dont know how can i read and convert, Can You explain to me!?
Someone else just recently had similar questions. I imagine it was a classmate of yours. Read the selected item in a listbox: https://msdn.microsoft.com/en-us/library/system.windows.forms.listbox.selecteditem(v=vs.110).aspx https://www.reddit.com/r/csharp/comments/5d8ypo/using_arrays_in_currency_converter/
IMammal?
Gah. 114 different courses. Do you realize that you presented 114 choices to a group of people many of whom are probably at least slightly autistic? Gah!
I worked with a developer who didn't like the mark-up .Net validation output, so he wrote his own, custom validation. I worked with a front-end developer who thought he was God's gift to developers and wrote a control in XSLT to output an unordered list from a data source. Maintaining that control was utter hell because XSLT. I could go on and on about developers who try to reinvent the wheel because of their egos, instead of using the tools real developers create.
This is bad code in general. A.B.C.D breaks the law of demeter - Martin Fowler would call it a trainwreck. It depends on the scenario, but you should rarely have to go deeper than A.F() and NEVER have to go beyond A.B.F().
Data models should have methods and yet they still shouldn't be mocked. There's no point in mocking anything that can be unit tested.
Oh. We still use 2013 at work for no real reason, it's good to know that.
Why does ShippingService have anything worth unit testing? All of it's logic, other than actually talking to the remote service, should be moved into the data model or a rules engine.
Maybe the old C++ CLI stuff? 
...in public APIs. If it's an internal function I wouldn't complain.
It allows for Task methods that return multiple variables without writing a custom type.
What's using them? For most applications there's only a thin controller, which itself doesn't need to be unit tested.
Actually ArrayList is pretty cool if you use it for generic programming. But in general List&lt;T&gt; does everything 
There are all kinds of ways but it depends on what kind of event you're waiting to happen.
I just tagged version 1.0.0 of this new C# application. I hope you like it and find it useful. I have only tested it on Windows but it uses no p/invoke or unsafe blocks so it might work on other platforms - if you try this let me know! I am a PHP developer still quite new to C# so please feel free to critique and improve the code. I sincerely hope this post finds some fellow developers interested in taking this application forward. I look forward to coding with you! All forms of feedback are welcome.
AFAIK the compiler doesn't see constraints as part of the signature unless something changed with Roslyn. https://blogs.msdn.microsoft.com/ericlippert/2009/12/10/constraints-are-not-part-of-the-signature/
I don't have an issue using `WebClient` to download it at all. For me, both synchronous and asynchronous versions `DownloadData` work: WebClient client = new WebClient(); Uri uri = new Uri("http://www.youtubeinmp3.com/fetch/?video=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dm2W8pFEt-y0", false); var bytes = client.DownloadData(uri); Console.WriteLine(bytes.Length); //outputs 4151296 And as does: WebClient client = new WebClient(); Uri uri = new Uri("http://www.youtubeinmp3.com/fetch/?video=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dm2W8pFEt-y0", false); client.DownloadDataCompleted += (sender, args) =&gt; { Console.WriteLine(args.Result.Length); //outputs 4151296 }; client.DownloadDataAsync(uri); Does this help you? Maybe you can post the code you're using that isn't working.
Well, [from MSDN:](https://msdn.microsoft.com/en-us/library/aa288474%28VS.71%29.aspx) &gt; The use of pointers is rarely required in C#, but there are some situations that require them. As examples, using an unsafe context to allow pointers is warranted by the following cases: &gt; * **Dealing with existing structures on disk** &gt; * **Advanced COM or Platform Invoke scenarios that involve structures with pointers in them** &gt; * Performance-critical code Of course, "performance-critical code" is not relevant to your particular question here. Not sure entirely if that still means you can't work around this in all cases with `Marshal` or reflection or not. Like most things in C#, there's more than one way to skin a cat, but [usually some ways are better than others.](https://cdn.meme.am/instances/61379095.jpg)
What do you mean? The `args.Result` _is_ the full file bytes. client.DownloadDataCompleted += (sender, args) =&gt; { Console.WriteLine(args.Result.Length); File.WriteAllBytes(@"C:\test.mp3", args.Result); }; That dumps the file to the hard drive and it plays fine in my media player.
Aha! I get it now! Thanks. I'm still a little bit new to downloading files through a program. I tried doing: _wClient.DownloadDataCompleted += (sender, args) =&gt; { File.WriteAllBytes(downloadFolderPath+"downloadedFile"+downloadIndex+".mp3", args.Result); downloadIndex++; }; But I'm getting a TargetInvocationException. I've probably done something stupid. I'll try to mess more with it. Thank you anyway!
You could take a look at https://mva.microsoft.com/ and take some of the free courses on it. 
Without even installing it, why would I want a dependency that relies on another dependency in my project? 
FxCop comes with Visual Studio. Does that help?
Yes, it is pretty simple.
I never said it was a great solution :) 
I heavily dislike it in internal too, but in public it's just plain detestable. Another reason why I hate the NancyFX framework.
Yes. To give you an idea of how it can be used, take a look at this [gist of an application startup](https://gist.github.com/jpdillingham/93872fb9c9b6bbd347b6e0c2266b97c3). There won't be a ton of value for event driven applications (forms, web) but I've found it invaluable for procedural things.
It's early and I'm still having my first cup of coffee. Would this be useful in some sort of a data importing application? Because that's the hell I'm stuck in right now. I can have the application handle the error and continue on to the next record. But some sort of a log of records that didn't match the required format would make my life so much easier. Can you also suggest some other concrete use cases where this library might come handy?
XML comments might help with 1 and 2 https://msdn.microsoft.com/en-us/library/b2s063f7.aspx Sandcastle can help you generate documentation for said comments https://github.com/EWSoftware/SHFB Ghost doc is a paid solution and supposedly is easier to use. From my experience, though, sandcastle isn't overly complicated. As for the third item, perhaps code maps might help? https://msdn.microsoft.com/en-us/library/jj739835.aspx Visual Studio has several code visualization tools built in. Then again, what you're given depends on your license. You are asking about Visual Studio on Windows, correct? Edit: Ah. In GitHub or in GitLab? Not that I know of. But visual studio community supports extensions, so you should be able to do a fair amount for free if you have access to a windows environment. 
This is just what the doctor ordered. Deploying it on some of our less critical systems tomorrow.
OpenCover is used in the project but is not a dependency within NuGet.
Methods should be short enough to tell what happend even without line numbers. But god objects and monster methods would be hard to debug 😀
What's the reason for this? Because the List is sequential List is probably the better choice.
You could use HashSet&lt;string&gt; to make the name lookups constant time. Also, instead of looping "manually" through each list, you could use "intersect" to get the names that are common to both: var sendEmails = new List&lt;string&gt;(); foreach(var lst in new [] {lstName, lstName2, lstName3}) { // all your lists here sendEmails.AddRange(exceptionslist.Intersect(lst)); } ...and send email to every name in sendEmailList.
If they are exactly 200 long every time, why not just use an array?
Actually you might be better off not even using a List at all. Or maybe just one List. It sounds to me like you have a list of emails to go out for each set of names. You could set up a structure for each name, and the id or name of the email going out. Then with an array of the email names or ids, do a list.where(d.emailname == currentemail).toList(); Then just do a foreach loop around it something like: public struct mystruct { public string email; public string address; }; List&lt;mystruct&gt; mylist = new List&lt;mystruct&gt;(); //need to populate mylist before using it string[] emailnames = {'email1', 'email2', 'email3'}; foreach (string email in emailnames) { List&lt;mystruct&gt; newlist = mylist.where(d =&gt; d.email.CompareTo(email)).ToList(); processlist(newlist, email); } If one name was on the list for multiple emails, that name would be in the list multiple times. Edit: so why did someone downvote me for this? Did I misunderstand the question? Edit2: ok, so I had a couple errors in the code. I wasn't trying to write it for the guy but just direct him to a possibly better design. Fixed the errors anyway.
What does the m stand for in this case?
That's a good point for consideration, but I would see that being an exceptional situation.
I'm serious. We have a lot of network activity on some systems. I'm not going to try this on a critical production computer. But putting this on some of the less important units should be OK without an audit.
I dont even know what this guy is rambling on about. Other than the usual ".net is open source", vague discussions about OSS and java, other nonsense that seems to be the obligatory introduction paragraph(s) of several articles about C# and .NET. It's boring, we get it, we've been blasted with the news since 2015. Then you get gems like this: &gt; It turns out that while Orleans is very cool in the performance and latency sensitive tasks I had in mind it wasn’t suited to what I wanted, I was too chatty and sometimes in math calculations mutable state is the only way to get things done quickly. I use Orleans myself and I honestly don't know what the fuck that means. Why does someone being talkative mean they can't use Orleans, and then mutable state and maths thrown in there too? Like what? Did the author type out a whole article and then arbitrarily delete random sentences and hope that it all still made sense?
Nice, shame it's WinForms though.
You could not be more wrong.
I think maybe a State Machine pattern might be more suitable for your problem.
Doesn't look like valid c# to me. Plus, searching lists is slow as the other posters have mentioned. A dictionary/hashset is the best bet here.
"Premature optimization is the root of all evil." - Donald Knuth
Im new to this , is there another way to do it ?
How would you have approached it?
WPF
I agree completely. I'm partial to maps, but if you just want a colkection HashSet is perfect. The lookup speed O(1) difference with hashed values is crazy.
For a collection that small the performance differences are going to be far less important than maintainability. w/o more information I'd just use a List of Lists (or an array of arrays if I knew the sizing ahead of time)
This is targeted at the armies of in house app developers that haven't seen much about dotnet core and are scared of open source 
You'd be surprised at the number of people that don't read news even when put out my Microsoft themselves.
Local methods are just a performance hack; they don't really do anything that you couldn't have done with a closure/anonymous function. (They even turn into an anonymous function if you pass them.to a LINQ expression.) Tuples... yea that bothers me a bit too. I'm going to make a rule against using them in public APIs in my code base.
NancyFX? Please explain.
Asp.Net Core can be run with Mono or the .Net Framework.
Major.Minor.yyMM.d## using the date of the build in conjunction with the build number for that day. For example the 3rd build today would be 1.0.1611.2003
Gotcha thanks, I must of had something wrong with the yo generator cause initially I did not see any templates that had identity. I ran it again and did see that one uses SQL lite, which is fine. I just needed a db and was not sure what my options were on a Mac.
I tend to use semver while including the build date &amp; git sha1 in the label. This way I get a long but useful string like this: v2.1.0-beta+20161120.1114.sha1.5114f85
Yep, should work fine. 
If you just specify Background="{Binding Converter={StaticResource BooleanToColorConverter}}" then the object that your control is bound to will be passed into the converter itself. Assuming "ShowSpoilers" is a property of that, you can just cast the object in your converter and access it's properties :)
This is the correct answer in most situations. Are you running this in a tight loop or expecting to call this hundreds of times per second? Are you putting thousands of items here? Are you running this on one of the low power micro-frameworks for embedded devices? If the answer to all of that is no, then go for something that is easy to understand and read. 
As /u/nosoupforyou said (best username ever btw) it depends on context. Events might be worth looking into 
I work on the Visual Studio editor team and there's a known bug with the new Intellisense filters that sometimes causes Intellisense to be slow and not show up. You could try disabling filters and seeing if that helps. It's availabe in Tools &gt; Options &gt; Text Editor &gt; C# &gt; Intellisense You would uncheck "Show Completion Item Filters" as seen here: http://i.imgur.com/YBbvVgm.png What resolution are you using? If you want to reach out to me directly you can email me at jovarty@microsoft.com 
If you had a data set that grows/shrinks over time you would want a list, but if you had to constantly pass it to a method that expected an array then it would be inefficient to call .ToArray() constantly. In C++ the equivalent of List&lt;T&gt;, is Vector&lt;T&gt; which provides this RawList functionality out of the box, so not surprised to see it in a gaming library.
I believe that space (as well as tab and Enter) have always chosen the currently selected option in Intellisense. That's the behavior when I tried it in VS2015 just now. That said, if you find any situations where VS2017 C#/VB Intellisense behavior differs from VS2015 and believe it's a bug then you can report it directly to Roslyn and they'll help you out. Their list of issues is available at: http://github.com/dotnet/roslyn/issues
Found the answer [here](https://blogs.msdn.microsoft.com/dotnet/2016/08/24/whats-new-in-csharp-7-0/) &gt;The reasons why mutable structs are often bad, don’t apply to tuples. &gt;If you write a mutable struct in the usual encapsulated way, with private state and public, mutator properties and methods, then you are in for some bad surprises. The reason is that whenever those structs are held in a readonly variable, the mutators will silently work on a copy of the struct! &gt;Tuples, however, simply have public, mutable fields. By design there are no mutators, and hence no risk of the above phenomenon. &gt;Also, again because they are structs, they are copied whenever they are passed around. They aren’t directly shared between threads, and don’t suffer the risks of “shared mutable state” either. This is in contrast to the System.Tuple family of types, which are classes and therefore need to be immutable to be thread safe. 
Or you can use an extension method with some reflection magic (see u/willhughes reply for reason not to do this ;): public static class ListExtensions { public static T[] GetArray&lt;T&gt;(this List&lt;T&gt; list) { return ArrayGetterHelper&lt;T&gt;.ArrayGetter(list); } private static class ArrayGetterHelper&lt;T&gt; { public static Func&lt;List&lt;T&gt;,T[]&gt; ArrayGetter; static ArrayGetterHelper() { var field = typeof(List&lt;T&gt;).GetField("_items", BindingFlags.Instance | BindingFlags.NonPublic); if(field == null) throw new NotSupportedException("The implementation of List&lt;T&gt; has changed and accessing the _items array is not supported"); var methodName = field.ReflectedType.FullName + ".get_" + field.Name; var getterMethod = new DynamicMethod(methodName, typeof(T[]), new Type[1] { typeof(List&lt;T&gt;) }, true); var gen = getterMethod.GetILGenerator(); gen.Emit(OpCodes.Ldarg_0); gen.Emit(OpCodes.Ldfld, field); gen.Emit(OpCodes.Ret); ArrayGetter = (Func&lt;List&lt;T&gt;,T[]&gt;)getterMethod.CreateDelegate(typeof(Func&lt;List&lt;T&gt;,T[]&gt;)); } } } The emitted getter's performance will be indistinguishable from property access, and you don't need to use a custom type. 
Okay this is going to seem really arbitrary and stupid. The difference is fairly minor, but it matters when I explore large libraries. So Eclipse actually shows the return type, parameters, and the interface the specific method derives from. VS shows 2 of the 3 if you mouseover each method entry, but does not otherwise. http://imgur.com/a/hX9Ja Apologies if this is something simple, but I haven't been able to find much of a way. Also is styling the intellitype box possible? I'm not new to C#, but I've used mono until recently. 
I'm with /u/mechbuy on this. Violates encapsulation, which is what reflection is for.
If it could just show the return and parameter types without me having to mouseover it that'd be super. Where the method/field came from is cool, but it's not super important. Just throwing the idea out there. It would be super nice for classes with tons of members.
[GitVersion](http://gitversion.readthedocs.io/en/latest/) using GithubFlow for my open source projects. 
Well, the whole point of the `RawList&lt;T&gt;` type is that it doesn't encapsulate or hide the array from you. If you're talking about the reflection hack above, then agreed :D.
Maybe this can help a bit. I blogged on it a while back. I wanted to scrape and capture all the store locations for Target. http://www.dskraus.com/2015/10/15/csharp-azure-webjobs-console-app/
Yes, but there really shouldn't be a lot of methods that expect an array. 
This is a little crazy but takes after the Google and Firefox model. Everyone new release is a major version bump. Minor is used for every beta and maintenance builds. We use the third number for beta-or-release. Eg, 1.0.1 is first release. Then we start work on the next release; first beta is 2.0.0. Second beta is 2.1.0. Third beta is 2.2.0. If third beta is the winner, we retag and release as 2.2.1. Then we begin 3.0.0... Then if we need to do a maintenance build of the 2.0 release, we push out 2.3.0. If that works, then the users get 2.3.1. It's roughly semantic versioning, except we bump major even if we don't change the external interface. If it's a release cycle just for performance fixes, we'll still bump major. 
(Psst: Remove final empty line in file on Control+S in Options without needing an extension - You know you want to :p Look into the CodeMaid extension for other useful cleaning features that could be baked in :) )
Reading and writing raw RAM values for game editors. May BSOD if done incorrectly :p
BitBlt &lt;3
 // This sometimes breaks but that's expected
XPath select is wrong should be "//royaltree/family"
High-performance is often an enemy of abstraction. Sometimes you can't have the luxury of both.
This one grates on me a lot for potentially keeping references in an unreachable part of the array. Unless following a clear you always refill to the same size or greater, they'll never be released. Potential memory leaks in gc languages bother me a lot. If not clearing, why not at the least replace the array with a fresh one? It's quick time wise.
Yeah, it's a specialised structure alright. I did add the `where T : struct` constraint in order to get me halfway towards not leaving 'dead' references; but of course `T` can itself still hold references to GC'able types. The fact is I only use this structure in a couple of places in-engine, and only with pure-blittable types (e.g. pure data, no references). It's just one of those times where there's no 'nice' answer. A combination of heavy documentation and asserts however in the real code help. You'll also notice I didn't even implement a `Remove`: This isn't meant as a general-purpose replacement for `List&lt;T&gt;`. &gt; If not clearing, why not at the least replace the array with a fresh one? It's quick time wise. That would be replacing one problem with another: Namely generating too much garbage. Considering I'm already in "zeroing memory is too costly" territory, I can assure you creating throwaway garbage arrays on every clear would be likely even worse.
A bit outdated, but might worth a read. https://msdn.microsoft.com/en-us/library/ms228602(v=vs.90).aspx Edit: Languages are very similar, my roadmap for differences: 1. Value types 2. Enums 3. Properties 4. Delegates 5. Events 6. Exceptions differences 7. Extension methods 8. Method overloading and overriding. 9. Assemblies and namespaces vs .class and .jar files Optional: 1. async/await 2. p/invoke 3. unsafe code 
I still have bad memories of State Machine Worklow from Workflow Foundations (WF). Looked cool on paper but man was it hard to figure out when something didn't work.
You have to update the csproj file to have new custom steps during the deploy. This [article](http://www.codecadwallader.com/2015/03/15/integrating-gulp-into-your-tfs-builds-and-web-deploy/) helped me get it working. It also include the npm install step which is nice. 
Are you just calling it `exception list` or are you actually "throwing and/or catching" `System.Exceptions`? Maybe that is why you are experiencing performance hit on a 200 item list. [Just something to think about!](https://www.reddit.com/r/csharp/comments/54fhcj/beginner_why_does_it_take_a_noticeable_time_when/)
Alternatively, he could add a //TODO next to them. There are many tools to find/highlight those and my guess he wants to remember to remove those lines so he uses an existing tool to do it.
No, that's not the same. I want doSomething (&lt;? Extents myObj&gt; x) {}
https://msdn.microsoft.com/en-us/library/ms228363(v=vs.90).aspx https://en.wikipedia.org/wiki/Comparison_of_C_Sharp_and_Java https://en.wikipedia.org/wiki/Comparison_of_the_Java_and_.NET_platforms Anyways, I wouldn't worry about it. The languages are so similar that for the most part, you will feel like you are merely using a different DE and different libraries rather than using a totally different language. C# appears to be a slightly altered version of Java, anyway. 
I don't think that's related to what he wants. He was referring to the method name, not the content.
Would this be similar to extension methods? public static void DoSomething(this myObj x){ .. }
That's mostly just the language, I think learning differences in standard libraries is important too.
&gt; I.e. this probably won't do quite [what] you expect. That's why it produces a warning: &gt; CS0108: 'B.Foo()' hides inherited member 'A.Foo()'. Use the new keyword if hiding was intended. In general, I would pay very close attention to warnings, especially if you're starting with a new language.
This sounds like covariance/contravariance, which I think C# only allows specifying on interfaces. ISTR that delegates pretty much just do the right thing, though.
Thanks, like I said I'm aware of that package and have been using it. Perhaps my needs are a little more advanced than I indicated, most of the time these video streams (m3u8, rtmp/e etc) are in cross domain frames and they don't give up their bounty easily, even when navigating to the other domain, they are frequently domain protected. kodo for example I believe uses a library called urlresolver which has all manner of tricks up its code sleeves to deal with such issues like cross domain, and dynamically created web content.
Good suggestion, but don't really need selenium, I tried with a webbrowser control which boor no fruit. I'm just trying to harvest links from cricfree.sc
Honestly the idea that Entity Framework is worse than Hibernate and that **anything** is worse than Eclipse scares me. Thank you for providing the negative view on c#.
I was so happy when I saw how properties work and that they exist. They seem miles ahead of the horrible getter/setter madness in Java.
I wouldn't go so far as to say that Visual Studio is *worse* than Eclipse. Like any other fully-featured IDE, it comes out of the box a certain way, and it very tweakable. There's a ton of optional components and extensions for Visual Studio (some that are included in the initial installation), and it does tend to get bogged down if you aren't careful about the things you tack on. If you take the time to set up Visual Studio so that it works efficiently for you, you won't have any problems. Low quality of libraries? There are certainly low-quality libraries out there, like there is for anything else. I've been developing in C# for several years and have never thought that library quality was a detriment to the ecosystem. As for Entity Framework? Total shit.
1. The performance. I knew that EF's performance was bad when I elected to continue using it, but now that I am using it - it's not just bad, it's atrocious. And I am not doing stupid shit like fetching the whole table into memory. I understand that EF isn't really made for large amounts of information, and I have a weak rule which says that I should probably bypass EF if there are more than 50 rows involved. 2. Saving complex data is *ridiculously* hard. I work in an environment where the DbContext is never shared (to support multithreading), so my entities are almost always disconnected. Fortunately, there's a library called GraphDiff, but there's no way I am ever choosing EF again - it's *much* easier to write SQL manually. 3. Absolutely useless exception messages, no ability to peek under the hood while debugging (at least that I've found). 4. Very wonky support for stored procedures and functions. I would say that jOOQ is a good ORM. It's by no means perfect, but it is both powerful and easy to use.
tuples are useful/appropriate when used in a narrow scope, i.e. within one method or linq expression. but I have yet to find another situation where they're the right tool for the job.
Switch statements allow implicit fallthrough for empty statements and explicit fallthrough with "goto case x" and "goto default." Arguably this makes for cleaner code.
&gt; the inability to add setters to get-only properties defined in a base interface What do you mean? public interface IDontMatter { string Whatever { get; } } public class Thing : IDontMatter { public string Whatever { get; set; } = "What-everrr, Dad!"; } This compiles. 
One gotcha I ran into switching from Java to C# was how generics work. [This explains it better than I can.](http://stackoverflow.com/a/31929)
I think /u/YourLocalFax was unclear by leaving the argument out: void Method&lt;T&gt;(T argument) where T: MyObj; How is that different?
Regarding ASP.NET: use the WebAPI-part to communicate with your webserver and one of those cool beans SPA JavaScript frameworks to build functionality. Angular 2 is built around TypeScript, which was dreamed up at Microsoft and is supposed to be the bees knees.
Oups, thanks, I mixed up interfaces with abstract classes here. Example: abstract class Base { public abstract string Foo {get;} } class Derived: Base{ public override string Foo {get; set;} // Error: no overridable set accessor. } Edit: /u/Canthros beat me to it :)
So I can now build and debug asp.net built on top .net 4.5.x on my Mac ? Or am I missing something ?
I guess I learned something new. It's a bit verbose, but it works. Thanks.
Ah, I get it now. Thanks.
Looks pretty cool. Does this release support TFS?
Even then it's always better to have either an anonymous type or a well defined one.
I guess it is by using Mono.
Checking, hold on. EDIT: It does, but for some reason it won't let me connect using visualstudio.com account - getting 401. EDIT 2: nvm, had to enable alternate auth. Works now.
And this too: https://weblogs.asp.net/ricardoperes/java-vs-c-%E2%80%93-part-1
Awesome. Thanks for the updates, I'll give it a try :)
If sorry, of course its ConverterParameter and not CommandParameter, and what you write between {Binding and } is completely your choice. Using relativesource return your wanted object
Change from System.IO.Stream to System.IO.Pipelines
Well, [his twitter](https://twitter.com/techiesimon) is still relatively active so at least he's still around. You can give him a tweet if you want.
Twitter, of course! Thanks... didn't even think to look there.
You can actually do that with safe code. Use the GC class to get a pinned reference to anything. And then use Marshal.WriteByte and you can write any byte in memory.
Well if he started his life of programmer with eclipse, of course VS would be shit to him. All the time I've been using VS and just the thought of eclipse makes me sick.
Is vsts support built in? I've attempted to use a 3rd party plugin on one of the earlier releases but I never managed to get it to work.
anyone else having an issue with the TransformXml task? it worked fine on the private EAP builds, but busted as soon as i installed the public build.
Right, sorry. There's a VSTS plugin from Microsoft (https://plugins.jetbrains.com/plugin/7981) as well but AFAIK there are still issues with it that are unresolved (https://youtrack.jetbrains.com/issue/RIDER-2162), so no breakthrough for now.
take a look at this. http://revalee.sageanalytic.com/ We use it to pre-cache a bunch of stuff for a third-party analytics product. 
On mobile, shortened because of that. 
It works for more than "extends", like differentiating reference and value types, making sure the type can be instantiated without parameters, stuff like that. 
Nice. I setup a 1M iteration test loop for each of these four methods: * if-else: ~30ms * ternary: 0 * null coalesce: 0 * string format: ~2ms I ran it over x86 and x64 configurations and the results were consistent. Nice to see that the ternary operation didn't have the speed problems discussed here: http://stackoverflow.com/questions/17328641/ternary-operator-is-twice-as-slow-as-an-if-else-block Thanks to /u/lemonfighter for the [string format technique](https://np.reddit.com/r/csharp/comments/5dpjk0/whats_some_c_bad_practices_that_you_know_and/da6ukom/). I like the code brevity, so I will take the negligible speed hit and start using that.
Yea, that's been pissing me off for 20 years.
How do you deal with access restrictions? If I do something like that, I need to run with administrator mode or it wouldn't work. In order for "standard" users to use my applications, I need to use %AppData%. I'm kind of new to application development and what the best practices are
I worked as a software developer in video games, and the designer would come and ask for "minor" changes that ended up major headaches. I started programming anticipating these changes, and now I always program for eventualities. 
Thank you, this is perfect! I really appreciate it.
You mean rebranded Xamarin Studio.
He is clearly sending emails exception to those on the 'exceptions list'
&gt; File.WriteAllBytes(downloadFolderPath+"downloadedFile"+downloadIndex+".mp3", args.Result); Eww! &gt; $"{downloadFolderPath}downloadedFile{downloadIndex}.mp3" &gt; string.format({0}downloadedFile{1}.mp3", downloadFolderPath, downloadIndex) Or even better: Path.Join(downloadFolderPath, $"downloadedFile{downloadIndex}.mp3") 
&gt; You'd need to refer back to the code for Person to see that the first argument is actually the first name and not the last name. thats perfectly acceptable to me 
Probably desktop (WinForms or WPF, whichever you're being taught) is easiest; doesn't require knowledge of extra languages/concepts (like HTML, CSS, JavaScript, postbacks or MVC); mostly can stick with the built-in visual GUI editor and C#. As for the type of program, choose the one that interests you most. All that being said, [if you're feeling saucy](https://www.youtube.com/watch?v=FOt3r_aNNxE&amp;t=51), after you complete the assignment, I encourage you to do it again as a web application so you can compare/contrast the different ways of making it and what you find easier/harder between the two platforms.
if the tic tac toe game was to not include an AI aspect then it will be simpler? I think i can make it work, i'll ask. If not will go for the calculator. Thanks :) 
No mention for [AngleSharp](https://github.com/AngleSharp/AngleSharp) yet? Powerfull, modern and easy to use! var url = "https://en.wikipedia.org/wiki/List_of_The_Big_Bang_Theory_episodes"; var document = await BrowsingContext .New(Configuration.Default.WithDefaultLoader()) .OpenAsync(url); var titles = document .QuerySelectorAll("tr.vevent td:nth-child(3)") .Select(m =&gt; m.TextContent); [more examples here](https://github.com/AngleSharp/AngleSharp/wiki/Examples).
I would never create a desktop application using WinForms or WPF without using a MVVM framework, like Caliburn.Micro for example. However for something that is a school project and won't be actively maintained I think it might be overkill.
I know about the sorted date format, but this is only for presentation purposes. 
The tic tac toe or the calculator. I'd go for the tic tac toe, you can play around with the idea of making an AI for it later.
If the goal here is for a rookie to learn, why are you looking for the easiest/simplest option?
Do you know why the code is creating a bunch of not-quite-standard short date formats? 
By making sure that the index is within range, obviously. https://msdn.microsoft.com/en-us/library/3zwz4dx3.aspx
FWIW, `Random.Next(Int32 max)` treats the argument as an exclusive upper bound. Should generate values on the range 0 .. (max - 1), inclusively.
They're probably standard in their respective countries..
&gt; | d-MMM yy | dd-MMMM yy | output doesn't look correct to me...
That should work. /u/jogai-san The reason this works is because `Regex.Replace` will not replace part of a string that it has already replaced. So the first time it sees `d` left to right in the string `"dd-m-...."` it will match `dd` and then replace that with `dd`. Then it will match `m` and replace with `mm`. If it matched `mmmm` it would replace the whole matched value with `mmmm`.
Maybe I'm missing something, but why not just create your own date format?
sorry but could you explain to me exactly what int.parse does? thanks and why shouldn't I just do Age =&gt; or Age &lt;=
Dang man, I have actually got to tell you that I remember having a similar problem when studying C-sharp as I didn't know what int.parse were either... Well it basically converts Strings to Integers and to the reason why you shouldn't do &lt;= or &gt;= is just cause you simply Cannot do it. Or well, asking this for an example Console.WriteLine(1.1 &gt;= 1); would end up in a True/False Same with if you did it with &lt;=
If you ever want help with an error; Make sure you list the error; Not only does it help people help you, it also makes sure you actually read the error yourself. It's probably giving you help already. Age = Console.ReadLine(); Console.ReadLine returns a String, Age is an Int. You can't just set an Int to a String, try finding a way to Parse your string to an Int. goto Start; It's highly, highly recommended to never make use of 'goto'. Just don't. Every statement needs to end with a semicolon. The operator you're looking for is '&gt;=', not '=&gt;'; The latter one means a completely different thing.
why shouldn't i use goto?
can you do it so it gives you different answers depending on how long the thing you give it is? " such as a name " in &lt; or &gt;
 string dateFormat = Regex.Replace(ci.DateTimeFormat.ShortDatePattern, "([DdMm])(?&lt;!\\1\\1)(?!\\1)", "$1$1");
&gt; goto Wow, I didn't even know this was still an option, I haven't seen this since basic for the TRS 80, or commodore 64. Learn something new everyday. 
I'm not 100% opposed to regexes, but once they get beyond one or two simple rules (say validating a string starts with http:// or https://) I generally move validation to code, while you could argue what's easier to read (although I'd argue strongly code is almost always easier to read than a regex) the big benefit is maintainability. So when someone else comes in 2 years from now and needs to add another rule (say ftp://) they're not mucking up your regex and introducing bugs, they're just working with code. Regexes are just too easy to screw up.
My eyes.... 
Cost is not a problem if it works. The cost of the library would be cheaper than upkeep and licensing for Ms Office on a server.
Step one. Don't use Web forms. Step two. Learn how to use Web api/ajax to communicate with the server. Step three. GOOGLE EVERYTHING. Step four. If you can't find it, you are googling wrong.
I'm not really familiar with reports, but aren't those a WinForms thing? That usually doesn't play well at all with multithreading. Easiest (and possibly only) solution might be to spin up multiple processes.
Without knowing any more about your issue it's hard to say, but maybe your thread pool isn't configured for long-running tasks? We'd need more information to give any more specific advice I think however. I'm also unfamiliar with reports so unsure if there's anything specific there.
I think your counting is off by one, but I need to draw a state diagram and debug your sentence. BRB after I get a few user stories.
Its about presenting a list of dates. It doesn't have to be sorted but it should be easy to scan the list. Examples: * 1/9/2016 * 16/6/2016 * 5/12/2016 More readable: * 01/09/2016 * 16/06/2016 * 05/12/2016 
thanks man, honest answers with no hate, appreciate this. Just one last question - i cant find where do i register even handler? I dont think you mean in code, because it doesnt even let me delete CellContentClick method and if i put code into CellClick nothing happens. ;(
&gt; nuget i dont want to use on nuget! there is a linq that run on json like xml?
1) Parse the string into a DateTime 2) Print the DateTime object in the format you want 3) Don't fuck with Regex when you don't need to
only get to c# array the array from json
It should be in code, actually, but the easiest way to find it is to click on the data grid view in the designer, pull up the properties of the control, and click the lightning bolt to get a list of properties. From there, you should be able to find which events have handlers and what they are named.
Removed: Rule 4. Consider reposting but include the relevant code you're using to construct it. Octagons aren't particularly complex but perhaps there's a particular complexity for your scenario we can help with. But as your question stands now, we can't really help you. It should be doable with one single polygon though.
&gt; ust these fields, and they are dynamic lik but it the array Employee is into the json the eserializeObject will work fine? it search all over the json where to find this array? 
Newtonsoft's JSON Library automatically takes each individual Employee object in JSON and converts it into a C# object, which is why we store the object (we "deserialize" it) in an Employee array.
I would take a guess that 1 and 4, you are not attaching the event to the front end component. 2 and 3 ,you probably need a template, xml or otherwise that specifies which columns to show.
Assuming the inputs are already validated, a simple [DateTime.Parse\(string s\)](https://msdn.microsoft.com/en-us/library/1k1skd40\(v=vs.110\).aspx).[ToString\(string format\)](https://msdn.microsoft.com/en-us/library/zdtaw1bw\(v=vs.110\).aspx) using the [standard date and time formats](https://msdn.microsoft.com/en-us/library/az4se3k1\(v=vs.110\).aspx) should be fine, no? I feel like that's what you're saying.
Its for several cultures. I want to present something that is familiar for the users, but with a small modification...
You see I'm doing it for various cultures? I just want to take that culture format and expand it a little bit. 1. I'm already handling datetime object (fiddle is obviously a dumb example) 2. The format I want is what I'm trying to create here. 3. Solution without regex is welcome. ( if its more elegant than tragicshark's method)
Ah... I completely misunderstood what you were doing. I thought you were parsing dates with regexs. I think a single regex with backreferences is the way to do it.
Try this? https://msdn.microsoft.com/en-us/library/system.globalization.cultureinfo.datetimeformat(v=vs.110).aspx
Can you try to do anything by yourself?
Thanks, I got this now points[0] = new Point(50, 25); points[1] = new Point(40, 35); points[2] = new Point(30, 35); points[3] = new Point(20, 25); points[4] = new Point(20, 15); points[5] = new Point(30, 5); points[6] = new Point(40, 5); points[7] = new Point(50, 15); points[8] = new Point(50, 25); I only need to put it in the right place
Give Java a shot, then. Decide which you would rather work in. ISTR that salaries are about the same. Also, give a look at openings in the area(s) you live in/want to live in. What's popular in the area may not be the same as what's popular in the aggregate. Less quantifiable are the respective platform owners. I think it's debatable which of Oracle or Microsoft is more benign (I would say Microsoft, at the moment, but this is not a great choice of options), but, this, too may be something to consider, either way. As far as it goes, I don't think either language or platform is going away anytime soon. I also don't think it's clear which is likely to 'win' over the longer haul.
Depends on what you're wanting to build and your criteria for job-hunting. Between the two languages, I've personally found C#'s newer features to make it much more enjoyable to work with over Java (once you learn and get used to them). So this might be important if you find the language you use at work affects how you enjoy your job. Looking at the openness of the languages - Microsoft seems to be making big steps forward in trying to embrace an open source approach while pushing out many new features, while Oracle's vision for the future of Java seems somewhat less bright with new features coming very slowly. As a side-note, if you're currently proficient in Java, I'd actually suggest learning a more varied type of language instead, perhaps Scala or Closure if you're in the Java ecosystem as that might give you more of an edge in the job market than just spending time learning something similar to something you're already good at.
ok thanks, but how do i get 2 inputs into the array? for an example Console.WriteLine("Write the Title"); Console.WriteLine("Write the text"); and make them "stick" together, so if i have an search algoritm and search for the title, bouth the titel and text will show.
Yes, there's a lot of demand out there for frontend developers but I'm not sure if I'll really enjoy messing around with HTML, CSS, and cross-browser compatibility. Plus there are so many dependencies that I feel lost. Likewise, there's React, Ember, Angular, Vue.js and a host of other frameworks. I'm thinking of learning programming concepts and patterns with a lower level strongly typed language first. 
Thanks. I'll likely end up focusing strictly on Java then. At least transitioning between the two languages later down the road won't be too terribly difficult as they have a lot of syntactic similarly. Though I'm not sure how it would take to pick up the nuances and become familiarized with the various libraries. 
&gt; I'm currently dabbling in both but I would like to select one soon and focus on that exclusively so I can become employable 12 months down the road. If your goal is to be employed/employable in a year's time, then sure, choose the one that you think gives you the best chance at a job a year from now and _go deep_ with it. Learn what you need to in terms of platforms, applications, libraries, good language design/use, etc. Regardless of which language you choose, once you feel adept, fluent, and effective in the language, definitely look at branching out. You can easily switch-hit between Java and C# _languages_. You'll probably find yourself spending more time learning the platforms/frameworks (e.g., Unity3D, ASP.NET/MVC, WPF, UWP, Swing, JSP) than the language itself. You'll find that the languages themselves are actually the fairly trivial aspect of development; that the real meat-and-potatoes of experience and knowledge comes from learning the platforms/frameworks, their quirks, and the right/wrong way of doing things for them. Long term, you'll do yourself a disservice by focusing on a single language exclusively. There's a lot to learn from different languages and different paradigms. Choose a language now, go deep, get a job, then branch out. Even if you choose Java now, then decide later to go into something other than C# (Scala or Haskell or F# or JavaScript or C++ or LISP or _whatever interests you_) you'll be better off for it. Even if the language doesn't necessarily open job opportunities for you (e.g., not too many F# jobs out there), you'll probably find that you can apply what you've learned in that language or platform to your current job. At the very least, it opens your mind to new ways of thinking or appreciation. Good luck!
As far as personal projects, I'm interested in desktop application and Android development. Not so much web development, though I wouldn't mind it if I didn't have to deal with the UI/UX component. Hm, reflecting on this thread. I thin I might be being unnecessarily picky and should just stick with one and run with it. 
I'm using that already
&gt; From what I've read, Java has a far greater amount of libraries &gt; there's React, Ember, Angular, Vue.js and a host of other frameworks So you are saying it is a positive thing that Java has a lot of libraries / frameworks, but a negative thing when it comes to JavaScript?...
With JavaScript, it seems to me that a lot of job postings are specifically looking for a minimum number of years of experience in a particular framework that's being used on the frontend of their application.
Just figure out what you want to do: Java: * Android apps * Server-side software * Windows/Mac/Linux programs with janky UI's that most people only use today because there are no alternatives, the Java JRE/JDK also doesn't come pre-installed on any machines C#: * Windows apps, both legacy Win32 ones, and modern UWP versions which can run across all W10 devices (desktop/tablet/phone/hololens/xbox) * Server-side software * Xamarin to build Android and iOS apps (as well as UWP), via Forms or native controls * Unity games - one of the most popular engines which works on Android, iOS, Windows, Linux, Nintendo 3DS/Wii/Wii U, MacOS, PS4/Vita, Xbox One/360, web More people use Java worldwide, but even most Java developers will admit that C# is the better language. Base your decision on the following: * If you are learning a language to get a job at all costs, go with Java * If you want to do side projects that fit in with what Java offers, pick that * If you are interested in projects that involve using the latest C# stuff like UWP apps, .NET Core, ASP.NET Core, and Xamarin, pick that * Landing a C# job will most likely involve working with the older technologies though, so keep that in mind * If you have any interest at all in games, pick C# for Unity
Depending on how you want to do it. You could just do something like this: var yourList = new List&lt;string[]&gt;(); var yourInputs = new string[2]; Console.WriteLine("Write the Title"); yourInputs[0] = Console.Read(); Console.WriteLine("Write the text"); yourInputs[1] = Console.Read(); yourList.Add(yourInputs); foreach( var combo in yourList ) { Console.WriteLine("Title: " + combo[0] + "\r\n" + "Text: " + combo[1]); } 
Libraries are going to take time, either way, and I don't think your choice of platform will change that much. Once you get over the initial hump of learning the language, the platform, the toolchain ... the third-party libraries are just things you'd have to pick up, regardless of platform.
I *think* I'm seeing what you're trying to do now. I'll make an assumption here, as I don't have a list of all possible short date formats for every culture. Your only problems are short date formats that only have 'd' or 'M' because those are basically missing the leading zeroes (I see 'D' in your code, is it ever used in short date format?). You can't simply string.replace 'd' with 'dd', because you could end up with 'dddd', but you could check if 'dd' exists in the format and if so, don't do anything, but if not, string.replace 'd' with 'dd'. I wouldn't make it more difficult than it has to be, if you know all cases you're trying to handle. It's not like next year we'll have some kind of radical leader saying: we're changing our short date format to "ddDdD(-1)+MmM.yyYy" , muhhahahah! Edit: fiddle https://dotnetfiddle.net/seFNhC
http://i.giphy.com/c5PHIq9sXsV6o.gif
IntelliJ is great though! I'd say it's about up to par with Visual Studio
Learn Java instead unlesz you want to work on enterprise shitdows. No one likes mono.
They aren't that dissimilar as of Java 8.
Make a n-sided polygon function instead. Then you can just tell it to place a octagon where you want with the size you want: public PointF[] Hedron(float radius, int sides, float startAngle, PointF center) { return (from side in Enumerable.Range(0, sides) let angle = startAngle * Math.PI / 180 + side * Math.PI * 2 / sides select new PointF(center.X + (float)Math.Cos(angle) * radius, center.Y + (float)Math.Sin(angle) * radius)) .ToArray(); } edit: Octagon example var octagon = Hedron(25, 8, 22.5f, new Point(50, 50)); We give it a size of 25 units, give it 8 sides, rotate it by 22.5° in order to make it right side up and place it at 50, 50.
&gt; Landing a C# job will most likely involve working with the older technologies though, so keep that in mind And Java wont? The "age" of the software you develop will depend mostly on the companies you apply to, not the language they use
I guess you haven't heard of [Roslyn](https://en.wikipedia.org/wiki/.NET_Compiler_Platform)?...
Mine, obviously ;-) But seriously: pick the one that's easy to understand and solves your problem. Regex has its uses, but it's hard to read. My solution is simple, but effective. It doesn't have to be overengineered, because you know what to expect from the DateTimeFormats. /u/tragicshark's solution might work as well (have not tested it), but it looks overengineered to me
Roslyn is only part of the picture, and I have 5 accepted PRs on that repo.
So you have no issue saying that C# is superior then? Because the C# compiler is open source.
Yes... so the Roslyn compiler is open source, and Mono's open source compiler has been around since 2004 which Xamarin and Unity both use... so what is your point exactly?
Roslyn is only part of the picture.
Honestly if you learn one you 95% know the other. But C# is about 3.7 times better.
Yeah I'm just trolling I've got nothin. Java JUST added lambdas in java 8 ffs
&gt; Graphics papier = panel1.CreateGraphics(); This is wrong. Use `e.Graphics` instead of `CreateGraphics()`.
Vs supports git 
For the sake of your mental health? I mean, mileage may vary, but personally I find the "best" Java code to be comparable to extremely mediocre or downright poor code by C# standards. It's almost always forced you to write more to accomplish the same thing.
Given how resource hungry it is, not really, Android Studio made me love Eclipse. And I am sure it isn't that different from a plain IntelliJ installation. I would rather use Netbeans and Eclipse than IntelliJ.
We use both, sometimes even on the same project. A good thing about C#, is that you can get today features that are currently only planned to be part of Java 10 roadmap, if they don't get dropped.
I'll Start with, there is a cleaner way to write this up for example. void Update() { print(myState); if (myState == States.cell) { state_cell(); } else if (myState == States.cell_sheet) { state_cell_sheet(); } else if (myState == States.cell_mirror) { state_cell_mirror(); } else if (myState == States.cell_all) { state_cell_all(); } else if (myState == States.mirror) { state_mirror(); } else if (myState == States.mirror_mirror) { state_mirror_mirror(); } else if (myState == States.mirror_all) { state_mirror_all(); } else if (myState == States.bed) { state_bed(); } else if (myState == States.bed_sheet) { state_bed_sheet(); } else if (myState == States.bed_mirror) { state_bed_mirror(); } else if (myState == States.bed_all) { state_bed_all(); } else if (myState == States.door) { state_door(); } else if (myState == States.door_sheet) { state_door_sheet(); } else if (myState == States.door_mirror) { state_door_mirror(); } else if (myState == States.door_all) { state_door_all(); } else if (myState == States.win) { state_win(); } } Could be made into something like : void Update() { switch(myState) { case States.cell_sheet: state_cell(); break; } } make your if/elseif into a switch statement to make it easier to read and it processes quicker than multiple if statements. You are also using string concatenation: text.text = "There is a nasty bed with even nastier sheets on it.\n" + "You have a broken mirror and some really nasty sheets in your hand\n" + "Press 'C' to return to the cell"; Use StringBuilders instead; again this takes the load off processing, so for example: var stringBuilder = new StringBuilder(); stringBuilder.AppendLine("There is a nasty bed with even nastier sheets on it."); stringBuilder.AppendLine("You have a broken mirror and some really nasty sheets in your hand"); stringBuilder.AppendLine("Press 'C' to return to the cell"); text.text = stringBuilder.ToString(); I should mention that with strings this small, string concatenation wouldn't really slow down the application at all. It only really effects anything once you get into large amounts of strings processing in code (I have to work with SQL embedded in code, i'd prefer not to but unfortunately to rebuild the library would take considerable resource ) I think that's enough to start off with, im sure ill be corrected at some point down the line on what is better than what - these are just my opinions :) 
I've only been doing c# since last Christmas, but I can assure you I made the right choice. Too much boilerplate code in Java for simple things. I'll take properties over setName/getName any day.
An alternative strategy is to use a `Dictionary&lt;States, Action&gt;` and look up the delegate to invoke from the dictionary. I **would** choose your suggestion in this case though because there are not too many states and the name `Update` looks like it's meaningful for each state. 
There is a better way to post it on reddit, at least. Please press and read "formatting help".
Eclipse has improved greatly over the past decade.
Does java have a linq equivalent cause I couldn't live without it
Eh, "seriously screw up"?
I just can't get behind "out is an anti-pattern". If it's being used to return more than one value then sure, the function writer probably should have wrapped them together into an object and return that directly from the function; no out required. But in the case of TryParse style functions a single out variables fits quite nicely. Since it returns a bool it can short circuit nicely. How else would you write this function? Return Tuple&lt;bool, T&gt; ?
No, it isn't "merely a syntactic sugar". It is significantly changing the variable scoping rules of the language. You might want to re-read :)
The title here is a little sensational, and the issue, while a problem, is confined to a specific use of the language that many do not even utilize. The analysis is pretty fantastic, and I feel like I need a shower after reading it, but there is no way that a change in variable scoping for variables declared with [out] or [is] will "seriously screw up a language". This issue seems like something the C# team didn't fully think through. The analysis and issues brought up here make a good case for MS to review. Either way, it's still in RC. 
You stated this yourself. This: if (int.TryParse(str, out var i)) {} Is just syntactic sugar for: int i; if (int.TryParse(str, out i)) { } No scoping changes. In both cases it's the same scope. It's essentially the same code.
After posting a comment in this thread I read yours and suddenly it clicked for me that there are no scoping changes in this case - it just *feels* like there is. It feels wrong to me but you are correct in what you are saying 
Ahh yes, we'll add this to the list of "misusing a language feature means the language is bad" issues. This is really a non-issue. You can't complain that a language feature is an anti-pattern that people shouldn't use, then go on a tirade about how using the feature badly causes issues. If you don't like it, then don't use it. Problem solved. Personally, through all of the examples shown, I wasn't terribly confused or surprised by the behaviour. I completely understand why the coping rules have been adjusted for this and it makes sense in the areas they have been adjusted. The handling in for/foreach's makes sense as well. If you're writing code in such a way that you get caught out by the "Gotchas" listed, then your code is frankly badly written.
&gt; You are correct about it not being syntactic sugar No, he's not. This is just syntax sugar. if (int.TryParse(str, out var i)) {} Is just syntactic sugar for: int i; if (int.TryParse(str, out i)) { } No scoping change at all.
&gt; but now that 'out var' leaks into enclosing scopes I think that's a much bigger issue that in my opinion simply needs to be fixed. But that's kind of the point of the feature. In the simplest case, at least, the out var has to leak out into the enclosing scope otherwise it's useless.
Of course `i` is in scope in `else`. Why wouldn't it be? It's definitely assigned even if `TryParse` fails.
Welp boys, time to stop using the C# parallel and threading libraries, TryGet is now an antipattern.
&gt; To achieve this, the use of out var had to result in the scope of the variable leaking out into the enclosing block. In case that sounds familiar to you, but you can’t think where else this occurs: it’s how JavaScript works Well, this is strange. JavaScript fixed this by adding ```let``` and ```const``` (replacing ```var```) to fix scope leaking. At least they realized it was a problem and fixed it. So now C# makes the old JS flaw a feature?
No it hasn't, it's still hell.
nice, thanks. Is it posible to get both the title and text on the same index in the array? i got this pic as an example https://storage.omnius.se/images/w_1441176970_37670.jpg unfortunately i am totaly lost :(
There is no scope-leaking. if (int.TryParse(str, out var i)) {} Is just syntactic sugar for: int i; if (int.TryParse(str, out i)) { }
Yes, but I agree with David Arno. The scoping rules *should* be different. `foreach(var x in abc)` &lt;- the `x` doesn't live past the `foreach` block `for(var x = 0;;)` &lt;- the `x` doesn't live past the `for` block `using(var x = null)` &lt;- the `x` doesn't live past the `using` block `if(Foo(out var x))` &lt;- Whoops! Different scoping rules for `x`! Consequent declarations will shadow it!
Yeah, it might feel different when you see it for the first time. But after thinking about it for 15 seconds I realised that the variable was always within the same scope as the function that declared it.
I could be aboard with `i` being declared in the `else` block, but I do not agree with `i` being declared outside of the `if else` expression.
Only if your customers care about which IDE you used.
On mobile but the just of it is, get a stream reader and open a file via file.open. then have a while loop executing (while file.hasNextLine()), read the next line. Then simply check if that line.contains("rectangle1"). If true, break out of loop and execute code. again sorry for terrible formatting
 foreach(var i in Enumerable.Range(0, 1)) { // Good boy! } if(int.TryParse(str, out var i)) { // Good boy! } using(var i = foo()) { // Bad programmer! You are now shadowing a variable! } You don't think that's odd? It should at least be scoped to the `if else` statement, not to the `if` statement's parent scope.
When read the first part of the article, I felt the same way. I think the bigger issue is actually the inconsistency in scoping that he mentions later on.
&gt; var s = ""; &gt; while (int.TryParse(s, out var i)) { } This is syntactic sugar for: var s = ""; int i; while (int.TryParse(s, out i)) { } Just exactly what I'd expect and it's consistent to the way you'd write it before.
You must be one of those rock-star developers job ad's refer to.
If you realize what the feature is syntax sugar for, then you understand that it's consistent in the behavior. `foreach(var i in Enumerable.Range(0, 1))` is not syntax sugar for `int i; foreach (i in Enumerable...)` They could artifically create a new scope around the feature, which I think you're all on about, but that would change the semantics in a larger way than they intend to. They want to stay consistent.
Because the .Net runtime installer does not include the Ask.com toolbar.
Which is why we have the latent cross platform runtime known as core...
Now I understood what you're all about. I just disagree, I would not expect that - based on the current pattern of out-usage.
The proble with your if is, you're using two structures (a conditional and a method call), not just one.
Yeah the existing implementation makes more sense than what is being proposed ITT.
Why would you not expect that? Literally every other similar feature scopes the variable declaration that way. Why is it suddenly surprising if variable declaration inside an `if` statenebt is scoped to that `if` statement? It works that way in `for`,`foreach`, `using` and `fixed` but `if` is suddenly a special snowflake because of some legacy coding patterns of some developers. 
&gt; Method calls does not declare a separate scope. Precisely.
Yeah, but `if` doesn't care about what's declared inside its condition. Why would you change that and become inconsistent?
And therefore they should add it.
I have tested some code, and think that maybe this can work? correct me if I'm wrong, but when the user enters the title and text are stored in the array, then it get moved directly over the list.? ;) however, is i write titel and text twice they overright each other. List&lt;string[]&gt; loggbok = new List&lt;string[]&gt;(); string[] logg = new string[2]; // int loggIndex = 0; // Används för att fylla Arrayen int menyVal; // Här sparas användarens menyval bool slinga = true; // slinga = true. while (slinga) Console.WriteLine("\tLoggbok 2000!"); Console.WriteLine("\t[1] Skriv en Logg"); Console.WriteLine("\t[2] Skriv ut loggboken"); Console.WriteLine("\t[3] Sök inlägg"); Console.WriteLine("\t[4] Avsluta"); Console.Write("\tVälj:"); if (!int.TryParse(Console.ReadLine(), out menyVal)) //för att förhindra crash vid fel inmatning i menyn { Console.Clear(); // Ser till att det inte blir dubbla "huvudmenyer" ifall användaren skriver in annat än 1-4 } else // ifall användaren matat in 1,2,3 eller 4 körs detta. { Console.Clear(); // Tar bort "huvudmenyn" då man går in i något av alternativen switch (menyVal) { case 1: Console.WriteLine("Ange en Title"); logg[0] = Console.ReadLine(); // loggbok.Add(logg); Console.Clear(); Console.WriteLine("Ange text"); logg[1] = Console.ReadLine(); loggbok.Add(logg); break; case 2: loggbok.ForEach(Print); Console.ReadLine(); break; case 3: break; case 4: // gör loopen till false, vilket leder till att man går ur loopen och programmet stängs ner. slinga = false; break; } Console.Clear(); // Tar bort den valda menyn då man går tillbaka till "huvudmenyn" } } } private static void Print(string[] s) { //Console.WriteLine("\n" + s); Console.WriteLine("Titel:\t" + s[0] + "\n" + "Text:\t " + s[1]); } } } 
This is nice.
Learn both
JavaScript runs on the back-end too. Also you can develop applications with it thanks to electron.
Java is a fine, useful, language but I can't think of any particular aspect of it that is better than C#. The ability to run poorly on a variety of supported systems isn't as cool as it sounded when Java came out and .NET is making progress in that direction now too. Even if there is some advantage to Java that I'm forgetting, it can't trump Visual Studio. Visual Studio is just wonderful. And hey, who are we kidding, aside from the actual names of classes and methods, they are pretty much the same language. The code flow is the same, there are a lot of curly braces and dots, and there really isn't anything you can do in one that you can't do in the other.
&gt; There is no other sensible scope for the variable in if (Foo(out int i)) other than outside the Actually. First, check u/Sarcastinator's reply, above. This isn't how similar stuff works with `for` and `foreach` loops. That makes this behavior in `while` loops inconsistent with existing, similar behavior. Second, it *is* perfectly sensible for `i` to be scoped to the interior of `if` and, *maybe*, the corresponding `else` branch. Having it leak into the outer scope really *is* sort of gross, and inconsistent with, e. g., `using` statements. It's also weirdly inconsistent with the behavior in pattern-matching in `switch`/`case` statements, which scope is lexically confined to the whole `switch`, but is *actually* confined to the `case` which, until now, has had no implicit scope of its own for historical reasons. *Logically*, if you wanted `i` to be available in the outer scope, you should really declare it *there*. Like several other people, I think u/DavidArno is blowing this up a bit, but I also don't think he's wrong.
That is true, but it's also why, e. g., F# has an Option type. Which really differs from System.Nullable mainly in not being restricted to value types.
Why is it in scope in the rest of the enclosing block, though?
You don't need that state switch at all. private Action myState; Update() { myState?.Invoke(); } void state_cell() { ... myState=state_cell_all; ... } You could just call next method, but that would use stack, this way it will not.
Woo hoo, another c# is the best , no Java is thread!!
Look into enum flags. You shouldn't need to have all those different possible enum values when they're just combinations of a smaller set of unique values (cell, mirror, bed, etc.). If you declare the enum like this: private enum State { cell = 1, mirror = 2, bed = 4, door = 8, ... etc. } then you can use bitwise operations to figure out the specific state the player is in (and a switch statement is cleaner than all those ifs): switch(state) { case State.cell: ... case State.cell &amp; State.mirror: ... case State.cell &amp; State.mirror &amp; State.bed: ... etc. } http://stackoverflow.com/questions/8447/what-does-the-flags-enum-attribute-mean-in-c
OK, I see your point now.
If ran in debug mode I don't have to restart it. Also, I'm using outdated VS that doesn't have conditional breakpoints.
okay, well that makes me feel better to know that those are both skills I have and skills that are desired!
See the thing is you say c# development, but you mean c# web development. Personally if I was hiring a developer for a c# position it would be for an application developer so understanding Linq (both syntax and performance costs) and the covets of winforms/wpf would be very important.
When interviewing potential future team members, I always ask general questions on programming. I ask about Object oriented dev, Unit testing, data structures, design patterns, generic types, etc. I ask a lot of questions, but I'm not that interested in the answers themselves but by the way you show what you know and what you don't. I'd hire a guy who knows that he doesn't know something and acknowledge it right away than the guy that makes it look like he knows it all (but isn't really). Show that you are willing to learn and that you like coding and you have an advantage over the others even more experienced. Also, things like a dirty shirt or really bad breath will lower your chances dramatically. Hiring someone, specially in small places like my place, is more like choosing a roommate than a coworker. Social skills are really important.
After reading your post and the comments, and understanding what the issue actually is, I agree that there's an inconsistency with `out var`. Have you already opened an issue in the Roslyn project? I see you're quite active there, but I saw nothing specific to this.
Source Control (learn git) OOP Client side vs server side - when to use each. Set programming (sql) - you don't need to be a dba, but you will be writing queries. unit testing. Code archeology - how to take crappy old code and make it clean without losing accuracy. Servers/Hardware - you don't need to be a dev-ops guy, but know the basics. Clean coding
Well considering you mentioned JS I'm assuming you're getting into web development and since your interests lie with c# development I would probably focus on learning asp.net mvc as this is where most of the jobs are these days. Find a good tutorial on MVC and complete it start to finish. I can certainly recommend 1 or 2 if you need. You should have a good understanding of the entire stack even if you only want to develop on the backend: - SQL server - CSS - JS: vanilla, jquery and perhaps a framework like angular -Html 5 Finally some of the topics covered in the interview for a junior C# developer would be: - Linq - Object oriented programming - Simple generic lists - MVC patterns (controllers, models etc...) - Classes: Constructors, auto implemented properties, access modfiers etc. 
Agreed on Archeology! This is definitely something I should get more into! I kind of like fixing broken code.
&gt; EDIT: Its also interesting to see which repo's have different ratios. I think this is effected by Microsofts internal interest and community reliance. I wont say any more than that.. That's a good point, I didn't think about the ratios, that's a nice idea for another chart.
A couple reasons from: [https://msdn.microsoft.com/en-us/magazine/jj991977.aspx?f=255&amp;MSPPError=-2147217396] * Exceptions thrown by async void methods can't be caught by a try-catch. * The MSTest framework only supports async methods returning Type or Type&lt;T&gt; Best practice is to only use async void when defining an async event handler.
&gt; there's no scoping at all there in the current version of C#. That's because we can't declare variables in the `if` block's expression in the current version of C#.
Consider this from C++ (because it's explicitly invalid syntax in C#!): if (auto a = "foo") { // this works: a exists here std::cout &lt;&lt; a &lt;&lt; "bar" &lt;&lt; std::endl; } // this does not: a is undeclared outside of the if. std::cout &lt;&lt; a &lt;&lt; std::endl; where the C# out var behavior would be if (foobar(out var a)) { /* a is valid */ } // a is still valid which is ... kind of weird. `using` statements, for instance, don't work that way. The behavior of pattern variables in `switch` `case`s is actually weirder: they have a lifespan to the end of the *`case`*, not the end of the `switch`.
If you are coming in as an entry level developer the questions I would ask would be pretty dependent on what the position was and what the rest of your resume looked like. If you don't have a CS degree the interview would be very little C# and very heavy on data structures, algorithms, and basic programming concepts.
Ah yeah, I've only used them when i really don't care about their result
fun task (imo) 1. create an azure account. 2. set up a free web server on azure. 3. set up a free sql server on azure. 4. set up a free public git hub account. 5. Create a very small mvc site, publish it to git (which will publish to azure, if done correctly) 6. Make it rather nice. 7. Show it off in interviews. "Here is an example of how I organize a project, write code, and use source control." For free, you have a sample of your work you can show, and you also get to learn where your weaknesses are and work to improve them. It doesn't have to be anything huge, just something that correctly uses mvc, entity framework (or dapper!), and some client side prettyness (bootstrap, jquery/javascript) It will give you something to start with in an interview, and can help you keep the conversation where you want it to be (here are the things I DO know :) ) 
&gt; I wasn't sure in what way to pitch this: make it "sensational" to attract more attention, but risk negative feedback, or make it more conservative and risk no one paying attention. Just get that false dichotomy out of your head entirely to be honest. Blog posts should either be a way of disseminating information (i.e. teaching) or provoking discussion. Not a way of generating clicks. Your actual article has some good points, it didn't need any embellishment. A simple *"My thoughts on 'out var' and why it might not be a great idea"* would probably have saved you from the 0 upvotes you're on right now. Leave the vapid clickbait titles to Buzzfeed. :p I still gave you an upvote, despite the title, because the actual content is good (although I disagree with some of your conclusions, but others here have already raised said disagreements).
Does that actually happen in the current C# 7 builds?
I don't know if you're looking at mobile / desktop application or web development, but for web development I've been pondering this situation myself. If you split the jobs market by language, Java usually does come out on top. But Java developers have a lot of choice in what exactly they use including web framework, data library, database etc. C# being under Microsoft's wing means most jobs will use a similar and familiar stack of Microsoft technologies namely ASP.NET, EF and SQL Server (note: this may change now things are opening up on the .net side but it'll take a few years to see the affect reach the jobs market on a wide scale). Therefore as a Java developer you may find that you don't have the experience or knowledge to apply for a great deal of Java jobs, and have to look at a specific subset where they use the same stack that you have experience in. As a C# developer on the other hand I think most jobs will be the standard stack. On that basis dividing the jobs market by stack may be more useful than language, at least when web development is concerned, and I think ASP.NET will then come out much more favourably. 
Can you use a dictionary? Save title as key, log as value.
Is there any cost involved? I thought I'd at least have to pay for some Azure hosting if I wanted to do something like this.
100% yes - tested on RC. P.S. Just in writing the test I was burned by the scoping rules since I couldn't re-use the loop variable name. Ha. 
One thing I hate about C# is how Visual Studio handle source code reference from library in "another project". You can't simply use "Go to to reference" and access the full source code from a third party library, just like you can with Java. In C#, symbol management is a mess. Also, Nuget is horrible in comparaison to Maven/Gradle. I hope they can fix those issue one day. That been said, if you use C# in a single project, it's alright.
Learning C# is easy if you come from the Java side (did that recently). The hard part is learning the framework (how to do X in Y, vs how you did it in Z).
Maybe the Stream API (which I have not used): http://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html
Yep, (dev essentials is correct) they charge you a few bucks, but give you $25 (use it or lose it) in dev time. I haven't ever had to pay them for a small dev site.
Hmm maybe because java syntax is pure cancer. * You have structs so called value types. * You have AnyCollection&lt;int&gt; because java uses dirty tricks anywhere. * Async/await support. Seriously i just heard recently java http services spawn 200 threads and use blocking I/O, really awesome. Barely seen any usage of the 'new' servlet api. * Extension methods. If you need some additional function for an interface you can just write an extension in c#. * Using pattern with IDisposeable. * Propertys. No I don't want to click 100 buttons on my working environment to generate getter and setters. I just want to write one line. * Linq and Lambda's in c#. You can define one line functions easily in c# with =&gt; syntax. * Very easy way to import c functions from Sos/Dlls. * Operator overloads * string1 == string2 actually compares the content * The best part of java is not even written in java. Which are all those good jvms. * #region However I don't really use Vs/Eclipse whatever bloated stuff exists. I just use Visual Studio Code(migrated from sublime). However It works good smooth.
All, apologies for the outage. The site is back up now.
Excellent advice. Thanks.
You can get that at any company. Every once I have ever been has some nasty code.
In my experience the ability to learn is the most important quality in an applicant. As long as they are a quick study, most other holes in the applicant's skill set are easily resolved. But if they can't learn... Just wow. I've seen some shit. 
Sorry about that. It's back now.
Yeah exactly, I don't care as much about technical competence as I do about: * Ability to learn * Ability to adapt * Reliability I think basing hiring on "does the person know x/y/z" is a lazy and flawed approach, again just my humble opinion and based on my very anecdotal evidence. I don't have much use for a genius programmer who can't meet a deadline, follow direction, or dial into a meeting on time. 
I reported [the issue](https://github.com/dotnet/roslyn/issues/14614) and they replied that basically .NET Core is not currently supported by Roslyn and you therefore have to reference System.Runtime.dll by file path which I think is not a good solution.
Okay, thanks. 
That is terrifying.
yep, every code base has ugly code. Thats why there are so many books/classes/lectures on clean coding. code gets written once, and read many many times. we want to write it beautifully every time, but there are always pressures that tempt you to do it quickly (screw you, future me!) 
You can do this using [expression trees](http://www.yoda.arachsys.com/csharp/genericoperators.html), but you don't gain compile-time safety from them either. 
Generally speaking, C# can only cast to/from different types if it knows what the types are and it knows that there exist conversions for it. In this case, with generics, the compiler can't know at a compile-time if the type `T` is actually convertable to an `int`. What if you passed in `DoSomething&lt;string&gt;("asdf")`? That would result in JIT compiled C# code looking like `string thingy = ...; int num = (int)thingy;` which is nonsense and could throw a nasty error for what _should_ have been compile-time safe code. The exception is converting to/from `object`. When doing so, you're telling the compiler/language to _throw out_ any known compile-time information and guarantees. You shift the responsibility to the runtime rather than compile time. In summary: int num = (int)thingy; //requires compile time safety which, in this case, can't be guaranteed and thus cannot compile int num = (int)(object)thingy; //no compile-time safety; push responsibility to developer at run-time, thus can compile Jon Skeet has a [comprehensive answer here](http://stackoverflow.com/a/7978447/1269654) and there's some other discussion there as well if it helps.
Visual studio can be used to make android apps with c#, and you can use it with some game engines, and it is not as hard as c++
&lt;rant&gt; Tbf, if it isn't 'my' code it is nasty code is how it often goes. And with that you have hardcore-pattern-following with FactoryBeanFactory x 100 classes that do nothing but are 'future-proof'. &lt;/rant&gt; Neither are easy to understand.
&gt; The behavior of pattern variables in switch cases is actually weirder: they have a lifespan to the end of the *case*, not the end of the switch. Switch is clearly a unique case. It's allowed to have it's own additional rules
The example you are given isn't putting them in the same index. Here is what it is doing: List&lt;string[]&gt; loggBok = new List&lt;string[]&gt;(); Pretty straight forward, creates a list of string arrays. string[] post = new string[2]; Creates a string array that can hold string values. A little confusing for people new to programming, but the 2 is one-based meaning it is creating an array that can hold 2 values, while the indexes of post are zero based. So post[0] actually means "post at the first index", post[1] means "post at the second index" etc. etc. post[0] = "Hello World"; This is putting the value Hello World into the first index position in post. post[1] (the second index value) still doesn't have a value in it. Your example given ends there. So if you look at my previous example I was doing exactly like the book. "var" is implicitly typed, the compiler itself will determine what type the variable needs to be, I probably shouldn't have used that since you most likely aren't familiar with it. But here is documentation to read about it: [Using var](https://msdn.microsoft.com/en-us/library/bb383973.aspx) Essentially: var yourList = new List&lt;string[]&gt;(); Is the same as: List&lt;string[]&gt; yourList = new List&lt;string[]&gt;(); You are just letting the compiler determine the variable type instead of explicitly typing it out. 
&gt; The exception is converting to/from `object`. When doing so, you're telling the compiler/language to throw out any known compile-time information and guarantees. An interface works as well, even if the generic type is not constrained to that interface. Honestly, I think it's just an annoying quirk of the spec that no one thought too closely about, rather than some well intentioned feature.
logg is getting overridden because it isn't being created new each time, you are just writing over the value in the index every time since logg is a global variable (declared at the top of the class/method). If you want to avoid that, you would need to declare logg inside the case statement. For example: case 1: string[] logg = new string[2]; Console.WriteLine("Ange en Title"); logg[0] = Console.ReadLine(); Console.Clear(); Console.WriteLine("Ange text"); logg[1] = Console.ReadLine(); loggbok.Add(logg); break; What this does is everytime you hit that case statement it creates a new instance of logg. Since loggbok is a global variable you can continue to add to it without overriding existing values.
Switch syntax is unusual, but its behavior in C is consistent with the rest of the C syntax. Scope is defined by the braces, and the cases actually denote *labels* and did not require control to be transferred before the end of the case. See [Duff's device](https://en.wikipedia.org/wiki/Duff's_device) for a clever abuse of C's `switch` statement. C# changed a bunch of this specifically to prevent cleverer uses of the `switch`/`case` statement, but the result is a construct that isn't especially consistent with the rest of the language's syntax. (This is a pet peeve of mine: C#'s `switch` is dumbed down in a way that makes it less useful *and* makes it less intuitive for someone else to pick up, in the name of being more familiar to already experienced programmers. I think the language would be better off with a different construct that didn't have to cart around the syntactical or semantic baggage. Anyway.) The incoming changes to switch make it *more* like a series of `if`s (can match more complex types, guard clauses for more complex conditions) while making the scoping rules even weirder. I'll need to take some time to play with it, but it sounds like this would be valid in C# 7: switch (foo) { case int x: int a = 42; Console.WriteLine($"{x} {a}"); break; case double x: Console.WriteLine($"{x:N2} {a}"); break; default: Console.WriteLine($"{a}"); break; } and I don't really know of a solution for that weirdness that doesn't require breaking syntactical changes to the construct. TL;DR: `switch` is only a unique case because C#'s version of `switch` is sort of broken, syntactically.
Ahh yes, forgot about that. Yeah, rules for interfaces and objects are sometimes interchangeable. I'm not entirely sure what the meaning for that was in the spec. Section 6.2.6 (version 3, which is what I happen to have on hand) states: (emphasis added) &gt; 6.2.6 Explicit conversions involving type parameters &gt; The following explicit conversions exist for a given type parameter T: &gt; &gt; * From the effective base class C of T to T and from any base class of C to T. At run-time, if T is a value type, the conversion is executed as an unboxing conversion. Otherwise, the conversion is executed as an explicit reference conversion or identity conversion. &gt; * From any interface type to T. At run-time, if T is a value type, the conversion is executed as an unboxing conversion. Otherwise, the conversion is executed as an explicit reference conversion or identity conversion. &gt; * **From T to any interface-type I provided there is not already an implicit conversion from T to I.** At run-time, if T is a value type, the conversion is executed as a boxing conversion followed by an explicit reference conversion. Otherwise, the conversion is executed as an explicit reference conversion or identity conversion. &gt; * From a type parameter U to T, provided T depends on U. At run-time, if T is a value type and U is a reference type, the conversion is executed as an unboxing conversion. Otherwise, if both T and U are value types, then T and U are necessarily the same type and no conversion is performed. Otherwise, if T is a reference type, then U is necessarily also a reference type and the conversion is executed as an explicit reference conversion or identity conversion. I'm not sure what the intent was behind this as one could still use the same pattern (`(ISomeInterface)(object)thingy`). Perhaps just practicality? Any time you would want to cast some base class that may have a derived class that also implements the interface you would have to do this double-cast everywhere. When casting between _classes_ and _structs_ though, you can guarantee whether the two classes/structs are compatible at compile time; you can't make that same guarantee for interfaces since an unknown derived type at runtime could implement that interface independently of the known base class.
Where were you and others like you six months ago? I had interview after interview and some of them went well. One company gave me two interviews and I drove my self five hours each way and stayed in a hotel overnight only to tell me they found someone better. I was severely depressed after a while and said, "fuck it" and started applying for tier 2 support. I finally found that job and due to circumstances out of my and the company's control I am now doing QE. I love it and I think I found my calling too. But getting rejected for months over stupid shit really made me depressed. I hit all three of your points and I am competent in the C# basics and even some advanced concepts. But, fuck it, I am using Java again. I do miss C# but that is not too important. Yea, I am bitter about the whole experience too. 
Well, go for an associate or staring position. The requirements aren't very tough and here is what I'd say you need to know to break into the position. * Get a good handle on the C# language itself. Knowing the basics of the language like what a value type is versus a reference type, knowing what each type is and does, knowing basic framework, etc. C# in a Nutshell 6.0 is a great book for getting this down. * Get a good handle on doing stuff in HTML and jQuery. If you end up in a web development position this will be your lifeline. * Understand the basics of ASP.NET WebForms and MVC. * Get and understanding of basic SQL. Be able to SELECT, UPDATE, INSERT at least. * Get some experience with EntityFramework. An extensive knowledge is not necessary with these. I would say though is definitely get a book and learn the C# language itself a decent level. Download Visual Studio and start messing around with these concepts to the point that you have a basic, usable knowledge of each and you'll get a job easy. Source: I assist in the hiring process at my place of employment. 
&gt; C# changed a bunch of this specifically to prevent cleverer uses of the switch/case statement Are you aware that the 'goto' command can be used within switch cases. This can explicitly enable things like the 'fall through' behaviour you're referring to. &gt;but the result is a construct that isn't especially consistent with the rest of the language's syntax. I've always seen C# switch not as a facsimile of C's close to baremetal implementation but as a higher level OO re-implementation with more deliberate semantic meaning. There's no expected behaviour of line labels in C# as they don't exist. Switch labels are isolated and can have any semantic meaning they need to without breaking consistency, unless you're worried about consistency with C.
Me. But I have no ideas for the app.
Where are you hiring at? 
We're hiring C# devs and what we want is : 1. Knowledge of C# (ofc) 2. MVC pattern 3. Asp.net 4. Code Style (Clean Code) 5. LINQ 6. Unit Testing 7. Web API Besides this some things we need: 1. Unterstanding of databases and designing SQL and/or noSQL 2. Web App Development (not a Must but its better) 3. Network knowledge (Client - Server Communication for example) To 2. You don't have to be a designer with huge ideas. It's more about a dev should be able to make a little ugly but functional page that can call a CRUD endpoint. And some social skills 1. Knowing your own limits 2. Asking questions is important (even stupid ones) 3. Know that you're not perfect (most times everyone's code can be made better) 4. Speak a language everyone understands (this is very important there is nothing worse than a developer that does not understand processes because he cannot follow an instruction) Hopefully this will indent properly. I am on mobile 
I am down for that. 
Doesn't the 25$/month go away after a year though?
Possibly, but if my dev site is worth keeping after a year, it's worth four bucks a month.
yeah, but there is also "which asshole wrote this POS? ... oh, it was me. yeeech. I hope nobody else has had to open this file. 
I like the idea of forming a team. I am definitely interested but it will depending on the project.
Not if you're dealing with string literals; the `+` operations will be done at compile time, but `String.Concat` is done at run time. string s = "hello" + "world"; produces this IL: IL_0000: nop IL_0001: ldstr "helloworld" IL_0006: stloc.0 // s IL_0007: ret Compared to: string s = String.Concat("hello", "World" ); Which produces: IL_0000: nop IL_0001: ldstr "hello" IL_0006: ldstr "World" IL_000B: call System.String.Concat IL_0010: stloc.0 // s IL_0011: ret 
There is a mistake in your code. You'll actually get an error on using "i" in the foreach loop as the if statement introduces a wider-scoped variable that means the foreach version would be shadowing it, even though it's introduced first. I'm sure u/AngularBeginner and other apologists for this mess will claim the above makes complete sense though :/
I have a app idea but my xamarin skills are meh also I formed a indie Dev team yesterday so I'm pre occupied
Someone's looking for a job... ;P
From what I've noticed: 1.) C# (High LINQ priority) 2.) MSSQL (Grouping, triggers, temp tables, functions with loops) 3.) ASP.NET (JavaScript / CSS - Interestingly enough more often classic JS than JQuery... Weird) 4.) Good "General" computing skills (Do you know how to deploy software to a remote server over Remote Desktop? Think that should be someone above you? Think again :p) 5.) Excel (CSV imports, VLOOKUP, Charts, and Pivot tables) 6.) Source Control (Git + SVN) 7.) Abuse [Hacker Rank](https://www.hackerrank.com/) - Do it for the challenges - Not for the recruitment. A **LOT** of useful challenges there.
JSON is already a string so no point converting it to a string. Use Json.net and deserialize the string into a dynamic object like so: var output = JsonConvert.DeserializeObject(jsonString); Console.WriteLine(output.results.sunrise); Console.WriteLine(output.results.sunset); 
It's also related to the fact that `(int)` can mean multiple things and need to generate different IL. Either it means a dynamic downcast from e.g. `object` or it means a numeric conversion from e.g. `double`. It can also mean to invoke a user defined conversion. In each case it's different IL, and when generics are involved, it can't make that decision at compile time.
&gt; If I'm not allowed to directly cast from T to int because of a lack of constraints on T, why can I work around it by casting to object first? As I wrote in a reply to another comment: It's related to the fact that `(int)` can mean multiple things and need to generate different IL. Either it means a dynamic downcast from e.g. `object`, which is checked at runtime, or it means a numeric conversion from e.g. `double`, which discards precision. It can also mean to invoke a user defined conversion. In each case it's different IL, and when generics are involved, it can't make that decision at compile time.
&gt; No, he's not. This is just syntax sugar. But that's irrelevant to the issue.
I would be willing to contribute!
I think you focus way too much on this being syntactic sugar; that's not the point, the point is that the *resulting* scopings are weird and somewhat inconsistent; we all understand that it follows from the way the constructs desugar to old-style C#, but it didn't have to be that way.
You can use the WaitForExit() method on the Process class (your instance "p"). Something I'm not sure of however is that you're doing this in a button click event, which means it's running on the UI thread. Your form may become unresponsive until your process completes. 
I picture you typing this comment in boxers and a stained tee shirt on the couch in your parents' basement while simultaneously tweaking your own nipples.
Quite interested too :)
yo, I dont think its about path. Like path could cause problems if you run on another pc or smth. But yeah thanks for the suggestion, it will be easier to create a new executables folder so i dont have to type different pathes for all exes.. will this path work? without d:// in the beggining? like only executables/rollaball.exe 
thanks man, i changed p.waitforinputidle(); with waitforexit , but then i had a a problem when closing the app. I disabled setaparen and now it works fluently, thanks man 
Thanks for your reply; I'm getting an error from the WriteLine; *'object' does not contain a definition from 'results'*. This may be as a result of me not understanding JsonConvert... Here is my full code. I'm using WebClient to turn the URI into a string first of all: WebClient wc = new WebClient(); var json = wc.DownloadString("http://api.sunrise-sunset.org/json?lat=51.435084&amp;lng=-2.182525&amp;date=today&amp;formatted=1"); var output = JsonConvert.DeserializeObject(json); Console.WriteLine(output.results.sunrise); Console.WriteLine(output.results.sunset);
Both *WriteLine*s throw up build errors in debug. The exception for each is the same: **Error CS1061 'object' does not contain a definition for 'results' and no extension method 'results' accepting a first argument of type 'object' could be found (are you missing a using directive or an assembly reference?)**
Put a breakpoint on the first Console.Writeline, and look at what the variable output is. You can either hover over it, or view it in the variable window.
for some reason it doesnt work. I still have to use whole path name
Haha, this should be interesting for you. There are two ways to build apps in Xamarin. There are the "native platform apps" like Xamarin.iOS and Xamarin.Android... They use native UI controls and tools like xml for Android and storyboard for iOS. And the controls are platform specific, etc... So it's a bit less code reuse but the core logic is shared across platforms. There is also Xamarin.Forms (which is what I use at work) and it's cross platform UI controls and tools (I don't have use a textview for Android, uitextview for ios, textbox for windows phone, etc...) and have three different controls in platform specific projects. I can just use a custom control in Forms called an Entry that will automatically generate the proper control on all those platforms with one instance of it. It's pretty cool and makes things a bit better to share code across platforms (Now I can share mostly UI and logic across platforms). Feel free to ask any questions :) 
That might be a good idea. I didn't think a lot of people would be interested. A slack or some chat application might be a good idea. 
Avoid using dynamic because it will cause runtime errors. Use generics types `&lt;T&gt;` instead. 
Yes you can, however you need to see if using a static method fits your case: [static method info](https://msdn.microsoft.com/en-us/library/79b3xss3.aspx). You can sort a list easily by doing loggbok[.Sort()](https://msdn.microsoft.com/en-us/library/b0zbh7b6(v=vs.110\).aspx). Search for values in a list with [.IndexOf](https://msdn.microsoft.com/en-us/library/e4w08k17(v=vs.110\).aspx), deleting you can use [.Remove](https://msdn.microsoft.com/en-us/library/cd666k3e(v=vs.110\).aspx) or [.RemoveAt](https://msdn.microsoft.com/en-us/library/5cw9x18z(v=vs.110\).aspx). 
&gt; functions with loops No. Awful.
I am not a native English speaker. What I meant is APIs that is risky under certain condition therefore they need to be used with care. Information may be sensitive (secret). Anyway, I changed sensible to dangerous to avoid confusion.
CodeRush is mostly an R# competitor, right?
Sure, that might be doable. I never used Plex though. So please fill me in xD What happens when a user requests a movie or tv show? Is Plex just a database of movies and tv shows for users to watch? And if , a movie or tv show isn't available, the user can send a request for them to be added to the db? What should I know if I want to build the mobile app? Is the mobile app similar to how the website(?) is right now? Thanks! 
Wish there was a thread for these.
yes and no, its main feature is macros for inserting smart snippets ie. as = public string PropertyName { get; set; } but it does have some code analysis and refactoring tools as well 
thanks, i have tried loggbok.Sort() and lots other stuff but i cant get it to work :(
You can do that in vs btw. Copy the json (or xml) and go to Edit -&gt; Paste Special -&gt; JSON/XML.
Maybe I'm missing something, but why would you want to do this? If you expect the cast to work, then you know the value is an int (or some number type), and therefore the T type isn't really generic. Why treat it as a generic if the type is known ahead of time? 
Yes, I use it with R#
Never had this problem, using it with R# as well.
^ This comment was unnecessary... But pretty funny
Same, it's become one of my indispensable extensions.
Json2csharp.com is my favorite for this type of stuff. Paste a Jason response in and it creates an object for you.
I prefer RestSharp and if need be Newtonsoft's stuff.
Yup; no issues with R# 2016.2.2
So Plex is similar to Kodi if you know what that is? It's a Media Server (Plex.tv). So when you 'request' a movie/tv show, Plex Requests will integrate with these 3rd party automation tools that will search and download those movies/tv shows for you and then put then on plex! Regarding the mobile app, I was thinking have some functionality to connect to Plex Requests using the API (The api will need a bit of work) and then lookup movies using TheMovieDB and TV Shows use TVMaze to send over. So similar concept, but for mobile, if it's not you thing that's fine :)
I invite you to read the post one more time; The example given in the post was overly simplified to focus on demonstrating the performance impact of interface dispatch and enumeration for IDictionary, IEnumerable, ICollection and IList as opposed to using their concrete types. The point of the article was not to discuss which collection to use for what scenario. Thanks. 
It's almost like you didn't even read the article...
I read the first part quickly and saw bulk enumeration of dictionaries, and jumped to conclusions.
As an aside I did just get someone to sum it up for me, so I didn't have to do the work. That feels like a win.
Umm, i used double forwardslashes because single backslash didnt work. Thanks for tellong me how to use backslashh
Thanks, its great. 
I'm the creator of OzCode. Myself and everyone else on the OzCode team have been ReSharper power users for many many years - and my fingers feel like they are burning if I try to use a computer that doesn't have it installed - so trust me, if there was any conflict at all with ReSharper, I would fix it :)
This sounds like a bug we had a while back in some specific circumstances (didn't actually have anything to do with ReSharper) - it has been fixed a long time ago, please try the latest version and let me know if you stumble onto any issues!
Ok. These two lines are effectively doing the same thing: Process.Start(@"C:\Users\ab\Desktop\Games\Roll a Ball\Builds\RollaBall.exe"); Process.Start("C:\\Users\\ab\\Desktop\\Games\\Roll a Ball\\Builds\\RollaBall.exe"); The \ is an escape character. It changes the next character. So \n is newline. Two backslashes makes it escape the backslash, so it tells the compiler to just make it a backslash. Using the @ in front tells the compiler to use the literal string. So @"this is not a newline\n" would not have a newline character at the end.
Maybe this? return true; Maybe I'm misunderstanding though. 
Except it doesn't really show that. To begin with, given the problem is shared with collections where enumeration actually makes sense. You lose half the audience by starting off with an example that's just bad code. Even without that it's kind of a canned example. The interfaces do boxing and unboxing. That isn't or shouldn't be a surprise, nor is the fact that boxing and unboxing have a performance penalty. How much of one in a real world example though? In a pure iteration it's double, but what's it look like in a real example? What's the overall performance penalty compared to forcing the caller to convert? There's also the fact that generally IEnumerable offers lazy iteration which in a lot of contexts more than makes up the difference, and ICollection isn't used a lot. You also have similar scale performance losses just from using the enumeration in the first place rather than a for. There's important information here, if only to remind people of the cost of boxing, but it's lost in a title that emphasises a data structure where the difference is actually entirely meaningless(you don't iterate dictionaries), and is given without any context.
thanks for the clarification, so implying that the program will automatically picked up by single core? how will the code affect the process, if say some synchronization of data is involved, will there be any conflict if written in code? Sorry I am still learning threading stuffs.
Imagine you have to perform two tasks (threads). You're only one person (processor core), so you can only perform one task at a time. You start with the first, then even before its finished you get bored and you switch to the other task and work on that, then again to the other. It works, you at some point get both tasks done. If you have a second person you can both independently work at both tasks at the same time. That's a gross simplification.
Never used a cursor?
There is nothing wrong with iterating over a dictionary, I can think of at least a few places. ASP.NET internally does exactly this to parse the request headers. I have seen a ton of code where people receive a Dictionary, List or [] and then store it to a field declared as IEnumerable only to later iterate over it resulting in the exact scenario covered in the article! The points covered in the blog post are very subtle don't let the simple example hide the true message he's trying to get across.
It is specific to interfaces that return another interface, when a specific type can return a `struct`. In common code, that pretty much means it's specific to `IEnumerable&lt;T&gt;` and other interfaces that inherit from it (like `IDictionary&lt;K, V&gt;` or `IList&lt;T&gt;`).
Never ever use `System.Collections.Hashtable`, `Dictionary&lt;K, V&gt;` is always the better choice.
Where do you get the idea that iterating a HashSet is faster than iterating a Dictionary? The data structures are almost identical.
Are you sure? I can't think of any reason why they would be more expensive than normal virtual methods.
Looks like `Length` is a method. Try `Length()`: NumberText.Text = "Your name has " + YourName.Length();
I tried that before, but it froze the app. I figured it out though. I made a new thing called int Number and put that in the NumberText.Text with Number.ToString()
Assuming this is Xamarin, `TextView.Length()` does the obvious thing of returning the text's length. I don't know what a control's length would even mean.
I think the freezing was due to me being stupid and putting things like TextView NumberText and EditText YourName in there twice or having a text view without anything in it
You've seen someone iterate over a 10,000,000 element dictionary? Someone who wasn't being a moron? Cause guess what, iterating over the headers isn't going to trigger a GC that you weren't already going to trigger processing them. You've seen people iterate over an innumerable of unknown type? Of course you have. That's the example the article should have given Beware of IEnumerable would be a good article, not this one, but one better written. The takeaway subtle or otherwise of this article is that inheritance has a price. That's a fair takeaway, but this isn't a particularly good way of showing it. You're not going to ever do what's in the example, and the performance cost as a percentage of the total time spent is going to be significantly lower in a real world example. Two seconds out of four is bad, but out of the time spend to do anything meaningful to 10 million records, it's a lot less of a big deal. Fundamentally though, if you really, really care about performance of enumerating over ten million records, take an array or a list and use a for loop. It'll be a shit load faster.
Removed: Rule 4. Give it a shot, make a concerted effort. If you run into issues that you can't resolve, post them here and include the relevant code and what is/isn't working.
oh oh , gotcha. Good to know!
I am sorry but you haven't got a clue what you are talking about! Did you even read the article? No one is mentioning anything about a 10,000,000 elements or 1,000,000, a 100,000 or even 10,000! It's about the number of times you are iterating over the collection not number of elements in it! In fact in the case of .NET Core iterating over the headers did indeed trigger GC and hurt performance! https://github.com/dotnet/coreclr/issues/1579 
But would the application at least be able to continue having a responsive UI? This used to be a problem in early days of single-threaded Windows applications, where the UI would lock up completely while the application was performing some processing. With the advent of multi-threaded applications, shouldn't the operating system at least be able to distribute time between the two threads and let the user continue to use the main UI while another thread computes in the background?
The UI is running on a single thread. If you now start a second heavy performing thread, then the single processor core has to switch between those two threads. At one time it operates on the UI thread, another time it operates on the worker thread. While the processor core is not working on the UI thread the UI won't respond, it's essentially frozen. The operating system is responsible of telling the core when to switch between threads. But you gotta remember: Your application is not the only one running. The operating system itself, many many other programs. You likely **at least** have over 50 threads running right now - and only one processor core that performs the work. So yes, the program can continue to work. Whether it's responsive... Depends on the work load of all the other threads and how smart the scheduler of the OS is.
You don't say what API you are using, but WPF has easing functions you can use with animations to give objects fluent movement.
Are all the 'lanes' the same size?
Anyone have any idea how this affects the Cloud Foundry build pack?
change of plans... ill make an linear search instead. have any suggestions on how to write that method? 
I've been doing MVC apps for some time and here's how I like to organise it. I normally start with the default setup but I create another project for my model. I also create another project as my business/data layer. This keeps my controllers light, it de-couples my database calls from my controllers and I also interface this layer so I can test my controllers without hitting the database. I'd say most of my MVC apps (unless they're really small) are 4 projects minimum: * Main (UI, Controllers) * Model (EF Model, View models) * Datalayer (Interfaces, business logic) * Tests (Unit tests for controllers and other functions) If I have functionality that is common to more than one project I will create an additional project. I used to have this as a Framework project that I ported from app to app but it's been awhile since I've made updates to it so I just compiled it as it's own dll and reference it from anywhere that needs it. This project includes extensions, enums, string and date functions, serialization functions, etc.. Basically stuff I use in almost every app I write and don't want to re-write over and over again. 
yes, only the the amount of lanes can change. But this is not the problem, I simply don't get how I can create x instances (based on the amount int laneAmount) of the class lane and then calculate the xMin and xMax for each. If I do sth like this: for (int i = 0; i &lt; laneAmount; i++) { Lanes lane = new Lanes(...); } they will all have the same name? How would I access them individually?
The thing is that windws forms has a single threaded UI. This is the reason why your rendering is "slow". To solve this, you should avoid to work directly with a picturebox/panel. I mean don't do your operations directly in the picturebox/panel. What you should do is creating a bitmap and using it as a buffer. You do all your operations in it and every 1/60 or 1/30 of a second you copy this buffer bitmap to your picturebox/panel. 
I misread the loop when I was in a hurry. The problem is largely immaterial. It happens because you can't build a concrete implementation into an abstract class. If you don't know what you're going to get it's going to need to be boxed up as something you do understand. That's how interfaces work, it's how coding by contract works, at least in a statically typed language. Languages with Duck typing can avoid it, but that C# is not. So it allocates memory, which meand eventually it'll garbage collect. It's a useful thing to know, but it's got fuck all to do with IDictionary. It doesn't even have anything to do with collections, except insofar as collections are a particularly heinous Interfaces. Well they aren't really, we're just stupid about them. How many different data structures implementation ICollection or IEnumerable, or even IDictionary? How much do those data stuctures have in common? In terms of performance characteristics. Why accept a data structure whose performance characteristics you don't know into a critical section? That's the problem with the article. It finds a real problem, assigns it to completely the wrong cause and then talks about it in a way that's got nothing to do with even the bad cause the author thinks it is. This happens all over the framework, you're never going to eliminate it and 99 times out of a hundred it doesn't matter. There's nothing wrong with IDictionary, there's just an overhead to abstraction. Avoiding IDictionary won't fix your problem because that's not what the problem is. If you need high performance you need to know what you're working with. So you don't try something like a linked list for random access. Don't use interfaces that don't promise what you want.
Because I'm shouting it and the snowflakes are getting triggered. People need to stop using WinForms.
If all lanes are the same then you can easily get the lane which is currently occupied by dividing the current x position by the lane width then rounding up. Eg. current position = 923, lane width = 150. Dividing position by width we get 6.15333, rounding up we get 7. Player is currently in lane 7. If you don't get why this works then try to draw a diagram in paint. This way you do not have to create lane classes and such and getting the lane number will be an O(1) operation.
Hey thx for your answer. I just tried your approach and it works but is a bit inaccurate, and what if the number of lanes is even? This doesn't work if I have let's say 4 lanes because there would not be a lane at x = 0 (the middle of the screen), do you understand what I mean? If the number of lanes is even, there is no lane starting at the center of the screen because they are centered differently.
yep
OP specifically said they wanted to solve this in winforms. Telling them to use a different technology does not add to the discussion.
Makes sense.
Have you considered avoiding session and putting things in the URL? FindDriver.aspx?city=blah is much more portable than session. Consider the user has two tabs open. Their session will be shared, meaning you will be clearing data in tab1 that tab2 is relying on.
Can someone explain the difference between I dictionary and dictionary (and/or enumerable)
I dictionary is an interface and so is ienumerable. Look up intrrfaces and you'll quickly realize the differences
You lose out on a lot of good developers though. Before joining my current C# job, I had another C# job where nobody ever used linq. I knew of linq, but we just never used it as a team. Oh my first day of my current job my boss found our I didn't know linq and was very worried. Well, turns out linq is extremely easy to learn. Takes no time to learn. Now I've been here six months and my boss complements me all the time and says how hes glad he hired me. You should give developers that don't know linq a chance
Will framework eventually be killed in favour of core?
Some people moan about branches in TFS being "just folders" but really, who gives a shit? I've not found anything wrong with having branches in TFS. Don't know how light they are compared to Git though. &gt; Anything else worth noting about TFS branches ? You have to click around a bit when making branches inside Visual Studio last time I tried, it likes to instead create a folder inside the main branch, which will cause weirdness with the csproj and sln files. Just double check that each branch has it's own sln file basically.
[Git is not an acronym](https://git.wiki.kernel.org/index.php/Git_FAQ#Why_the_.27Git.27_name.3F)
Yea, you definitely have to double-check where the branch is being created to, I've had to delete so many branches because of personal negligence. Also, branches in TFS can't be "deleted" directly from the VS Source Control window, they're still technically on the server in case there's a need for recovery. Instead, permanently unwanted branches need to be "destroyed", which can be done through the server or by command through VS (which I wouldn't necessarily recommend, lol). It was mostly the change in all the terminology for me.
I wrote a little (dirty) proof of concept for you: https://mega.nz/#!04gQFbLY!VnO1LPuRf2aj8qb_Dio0_Ab02KzTcFTDJBEyK1gbor0 As it turns out, there is a way to double buffer in WinForms. Just try it. It's a little ball moving around ^^ Pro Tip: If you don't trust me - just use a virtual machine to try it out - or read the code before you click run.
That is understandable, though I feel the comment is still valid (maybe if it were phrased a little more constructively :) Trying to do modern stuff in winforms is like trying to use Scratch to make enterprise applications. You can definitely do it in theory, but better solutions exist, especially to someone who is inexperienced with c#. Just my two cents.
This worked out perfectly thanks again! Already set up and have my app running on a virtual machine...they offered $200 worth of free services with a new account too 😄😄
Branching in TFS works, buy you will miss git. Merging is not so smart and TFS can get very slow under certain circumstances. We're currently using TF VC at work but will migrate to git soon.
While that's ok if you **need** to use winforms, wpf can do animations much better. Definitely worth the time to learn how to use it.
Wow, didn't expect a reply from you yourself.. really surprised you stumbled across my post! Thanks to another Redditor, I'm glad to have found your Twitter account to stay more up-to-date. Anyway, absolutely great to hear about the upcoming Pluralsight course. Very cool to see you part of the C# path there. Any hints to what area the next course might cover? :) Again, glad to hear from you!
If you don't want to clear the session, just set Session["somethingelse"] = "savesession" before you set Session["city"] to null. Alternatively, only set the Session["city"] to a value if you find something on the search, otherwise set it to null or blank. if dr.hasrows() //set session to search result else //set session to null Alternatively, are you using the MVC design? If so, don't use the session for that. Use the model for that.
Actually there's a bunch of tutorials (at least for ASP.NET) on the MSDN, very high quality stuff. 
If you have to use TFS VC, don't create branches for every feature. But I would recommend not using TFS VC. I used TFS VC for years at work, and branching and merging was expensive and painful. I would heavily recommend using Git instead.
I really like TFS branches because I can work on few branches by just opening files in different folder. 
They're a bit more expensive than in GIT. There are some features that make life easier, like shelvets. 
Sure looks hreat!
I would say any library that is often used is a good way to stay in touch. Only you know what you love making. Take a library to support you in this task. For example: I am recently looking into async code and multithreaded processing. I choose [Reactive extensions](https://www.nuget.org/packages/System.Reactive/) to guide me with this a bit.
No, when I press search again, I want it to make a new search with new value
Yeah, basically that
Having used both, and being instrumental in helping switch from TFS to Git, branching in TFS is expensive. I would not recommend branching in TFS unless needed, much less per feature. The biggest difference is that you need to create each branch in it's own folder, and that can create weird side affects. Also, if you aren't branching the entire project, but just a sub-folder, and you are working in C#, you may need to rename class names since technically both folders exist in the project (you could include/exclude the appropriate branch you are working on at a given time). The last part is less of an issue in other languages. Also, I haven't seen much about how Microsoft is really moving toward Git as well. You can use TFS and set it to use Git as the underlying version control, rather than the TFS style version control. Then it's basically just using TFS for the server instead of something like GitHub, but it works just like Git at that point, including the lightweight branches.
Don't know if this is still the case, but if a branch is actually still a copy, then branching a big project takes forever, whereas git just creates a reference which takes a split second. Same files aren't stored redundantly, this also makes merging much much quicker and easier. I remember coming from svn thinking "this works fine". Then trying git and being blown away. 
#
[removed]
system.numerics, lets you partially take advantage of SIMD instructions
So why not simply do a if(dr.HasRows) Session["city"] = JourOrigin.SelectedItem.ToString(); else Session["city"] = "nothing found"; and leave it at that? I mean, it's only going there if it's got a search to do, right? So you really only have the two conditions, no? Leave the first IF statement out of it entirely.
This comment being upvoted reminds me to keep my expectations low whenever I start to think that dotnet core, et al, will bring .NET developers into modern times. jfc.
And with git you can checkout multiple working trees and still have a single source of truth.
Honestly, all the people in this thread apologizing for TFS... it's so obvious they've never seriously used Git. I had senior/principal devs on a long-ago team that moaned "but you, you just get so many branches in Git". No shit, a lot better than me manually having 6 workspaces or juggling changelists by-hand. for fuck's sake people
Even if I start talking about dotNET 5.0? Something I've multiple times seem people make reference to?
fluent - able to express oneself easily and articulately. Kind of ironic word to misuse lol
Actually almost none of that is true. Checking out a branch created a copy. There are pluses and minuses to that, at least with a centralised repository. In the database there's no difference between a git branch and a tfs one. Neither creates a copy of unmodified files. There are issues with TFVC, but branches sure as fuck aren't just copies.
In a thread titled "are branches cheap in TFS..." I'm pretty sure it's safe to assume they're talking about the source control side of it. I was responding in kind. TFS + Git is fine... most people mean the version control when they say TFS though... sadly....
Git supports a different workflow than TFVC. You can use either in TFS. Trying to use the wrong workflow in either system sucks. TFVC is nice because I can merge my changes into a branch on the server someone else is working on and they can pull them down without having to handle every merge. Git won't let you do that. TFVC doesn't let you easily create local branches that will never go onto the server. There are good and bad things about that too. Personally I'm moving my projects to TFS hosted Git, but there are things about Git that are annoying and shit too.
&gt;Trying to use the wrong workflow in either system sucks. Except that every TF workflow works in Git (but is usually much easier), but not vice-versa. &gt;TFVC is nice because I can merge my changes into a branch on the server someone else is working on and they can pull them down without having to handle every merge. Git won't let you do that. That can easily be done with Git as well... I do that all of the time on GitHub. I add another user's remote, `git remote update` and then merge at will. If you think you can't do that in Git, you should grab a book. Things you can't do in TF: You can't have multiple things in progress without constantly manually persisting changesets, reverting them and reapplying different changesets. The changesets are all stored linearly with no concept of ancestry, parent commit, or branches of linear commits. Meanwhile, not only does Git have real local branching, you know, if you want to have multiple changes in flight at the same time... you can also checkout the different branches into different working trees so you can even have different workstreams all open at the same time without having a full enlistment for each one. Git &gt; TF in every scenario or you're probably not doing it right.
Yes, you can merge someone else's branch into yours, but you can't do the reverse, which is what I'm talking about. I'm talking about my changes pushed into the branch you're working on. You can't do that in Git, I know because I've tried it, commits to the remote that aren't in local fuck you up. You also can't have two people working on the same branch. There are times when these are useful things to do, particularly in a corporate repository. Git is a decentralized repository. You can take a copy of the repo and fuck around with it to your hearts content. That's good in some ways, but it means work isn't going into the central repo. That's knowledge lost. You can completely control your repo, but that's not always a good thing. Git is built for a world where anyone on earth can take a copy of it and do whatever the fuck they want with it and probably never put it back into the trunk at all. That's not at all surprising given what it was made for and by whom. Not all projects work that way though. Sometimes you want to know which files are checked out. Sometimes you want to push a change set out to every branch. Sometimes you want all the experiments to actually be preserved. Sometimes you want to see what another team member is working on. Github provides some of those features, Git provides none. I like Git, I'm moving my teams projects over to it, within TFS still, but from TFVC to Git. That doesn't mean that Git is perfectl it's not. It's got weaknesses too.
When git remotes and local get out of sync Git throws a fit. Maybe GitHub fixes that. GitHub adds a huge amount of features Git doesn't have, but regular old git shits itself. There's probably some esoteric command to fix it without a rebase and reset, but needing a book to use your source control is a pretty big flaw to begin with.
Ooops. i had a brain mix while typing the title :/ I thought of that and tried things like expanding the "alphabet" arrays to 27 elements or making the counter start from -1 and what not. I'll give it another look anyway. Thank you!
Git branching is much better. In git branching involves playing with file pointers and rearranging your working folder. In TFS branching involves creating a brand new copy of the entire folder structure. (+ TFS) * you can have the same project open in multiple branches at once (- TFS) * bloated. each branch is a copy, so it takes up more space * merging is not nearly as clean * slower operation
In my little experience with WMI methods I found it easier to return the object by reference back to the method caller, this worked for me after trying different types of constructors. Another way would be to create the performanceCounter object in the main and have methods that the object is passed to as arguments to handle query instances Sorry if this isn't much help but here's a few tutorials I was able to find as well. Best of luck! https://youtu.be/KouQNs_ZDaI https://youtu.be/qcJ3dHfrUXk
Are you trying to say that just because I'm not very fond of Git means that I somehow have something against .NET Core? 
There might be something wrong on the html side then, where you're using the session value.
I second this. The Head First series is top notch in my eyes. 
In the same vein; which book should I look to for learning advanced concepts and language internals?
Yeah well, best in your opinion :p I might go for the Head First C# though.
#
CLR via C#
The performance counter is a bit odd in that it needs `NextValue()` to be invoked at least twice before it will produce the right value. I don't fully understand how WMI works but I do know that it isn't simply pulling it from some register; it calculates the value. Here's a working implementation in the form of a console application: internal class Program { private static PerformanceCounter cpuLoad = new PerformanceCounter("Processor", "% Processor Time", "_Total"); private static void Main(string[] args) { while (true) { Console.WriteLine("CPU: " + cpuLoad.NextValue()); Thread.Sleep(1000); } } } You definitely want to create your PerformanceCounter instance at the class level and reference it from then on. Creating it on each call will result in either zero (as you can see) or, if you invoke NextValue() twice in a row, 100%.
Not necessarily a good book for *learning* C#, but I like C# 6.0 In A Nutshell as a reference book.
C# in a nutshell
Added a link to the ECMA 334 spec section 13.1.2 for your convenience.
Thanks, that link definitely clears some things up! TIL.
The threads being "blocked" are the wrong kind of seeing it. Blocking usually implies that they're **waiting** for something (e.g. a shared resource to be available). I would also not say the threads are "stopped". It can happen that the scheduler is simply not assigning a processor core to a thread and it's not being actively worked on. Processor cores get reassigned at any time. Your thread is being worked on, and suddenly not anymore (even when it didn't finish). Did you check for exceptions? It could happen that your threads are faulting due to an exception. Perhaps you also terminate your program before the threads finished. Perhaps you're just spamming too many threads and it takes too much time for the threads to finish their work, so the ones you look at never get resources. That's why thread-pools are commonly used. There can be lots of reasons. Multi-threading is hard because it's non-deterministic. You can't expect your threads to execute in any specific order. First execution of your program can differ from a second execution, simply because the resources on the machine were available differently and/or the scheduler assigned the cores differently.
[The C# Player's Guide \(2nd edition\)](https://www.amazon.com/C-Players-Guide-2nd/dp/0985580127) by RB Whitaker is a good recent one for beginners and intermediates. It's also for C# 6.0. If you don't want to pay for a book, I recommend either the Yellow Book or The Fundamentals of Programming by Svetlin Nakov, et al.
Use AWS or Azure. Do not use hostgator. They lie about pricing 
Yep, you're right, on page load i had if session isnt null, put city into dropdown... And the funny thing is i created the problem myself because i remember it working just fine
I should probably open this book. A friend got it for me as payment for something that I now forget. It's been sitting on a shelf behind me for a while. :(
Ah, yet another article that has been written as though the full thing was typed out and then had random sentences deleted. No thanks.
Came here to say the same. You have to invoke twice to get the proper value.
I'm going to both agree with you and disagree with you. Indeed, **C# in Depth by Jon Skeet** is pretty good. I'd say it's really good, even. (Just finished it recently.) It's not a good book for learning C#, though. It's really an expert's book about C# for other expert's.
Oh, I agree. I thought that was what OP was looking for. I actually bought the book by mistake (I thought it was a book teaching C#), but luckily I bought another book with it. C# In Depth is mostly above my level, but I have enjoyed the parts I've read even when I didn't fully understand them. But yeah, it's definitely not a learner's book.
I agree that it's great but it can be a bit accelerated for someone just beginning. This is the type of book that I, as a professional, would use to pick up a new language. 
But if I do that hoe can I change the letters to white? Because if I take foreground out it will change to black letters.
Might be better if you wait to submit these articles as a single submission when they're all written.
Wow. You gotta start with C# In Depth by Jon Skeet. Maybe not the best for C# beginners once you're past the beginner stage this is where you should start.
I didn't say take it out. I said change it to green just for testing. I believe the reason the sides are white might be because it's using the foreground but I'm not sure. Or change the background of the form behind it to green, again just to test to see what's going on. It could be that the button widths are just too short, so it's butting up against the text.
Your margins are huge and the buttons are overlapping. You just need margin from one side. For example right which will give you spacing between buttons. 
Communication is important. Companies would rather hire someone who is not as skilled but can communicate vs. someone who is more skilled but mumbles all the time.
Also written by my Ex- Lecturer! Great guy... 
im fairly new in this. I change the 3rd int which is supposed to be the right margin but it just makes all of them top be one on top of the other Edit: disregard that, it works now! thanks!!
Why no third party dependencies? Just use JSON .NET
And mine!
For CodeRush? When the subscription expires you just don't get updates. It's your standard flare pay once, get upgrades for a year. At the end of the year, either renew for future updates or use that version perpetually. https://www.devexpress.com/Support/LicensingFAQ.xml
&gt; Json.NET is open source under the MIT license and is free for commercial use.
This ^ My current projects all use Json.NET Its so damn easy to use :P
Ah. I was thinking of both CodeRush and R#. Nice to know about CR!!
I went ahead and tried that, and I was able to do this in two lines of code. I feel like I cheated. Thank you everybody! 
I found [Visual Studio C# Step by step](https://www.amazon.com/Microsoft-Visual-Step-Developer-Reference/dp/1509301046) to be a good book for people who are just starting or are even on intermediate level.
Am I missing something or arent you trying to convert your string[] to an object? new object[] {ADS_PROPERTY_DELETE, "member", users} is putting users (which is an array) into an array of objects? I honestly dont know if that is possible with casting. If you can change the syntax of "PutEx" you could let it accept a params object[] and just send the string in as single objects at the end: void PutEx(params object[]){...} string[] users = {....} List&lt;object&gt; parameters = new List&lt;object&gt;(users.Select(s =&gt; (object)s); parameters.Add(ADS_PROPERTY_DELETE); parameters.Add("member"); oDE.Invoke("PutEx", parameters.ToArray()); Or something similar
LINQ var objectArray = stringArray.Cast&lt;object&gt;().ToArray(); Array copy var objectArray = new object[stringArray.Length]; Array.Copy(stringArray, objectArray, stringArray.Length); But, u/tweq's suggestion is probably better as long as you're going to use it in a read-only context.
Love this book. Scrolled comments to make sure it was mentioned. 
&gt;Commit to downstream and merge to upstream. It's very useful under certain circumstances, but Git shits itself. You just described an extremely typical workflow in Git. I just don't know wtf you're talking about. Like, every single time I fork a project, push a commit on a feature branch and send a pull request... that's **exactly** what is happening. I've commited downstream and merged into upstream. &gt;Again. Push into your remote, by me, not by you. TFS can, Git can't. You. Are. Simply. Wrong. I just don't know what to say. I have a project checked out with 6 remotes. I can easily push to 3 of them that I've been given write permission on. The other three only allow commits on master via pull requests. (A GitHub specific feature, but it's all still normal `git` commands under the hood. &gt; and also adds some mechanisms to smooth out certain operations. No, it doesn't. Name one and I'll tell you the exact git command being run. GitHub is a nice gui, a nice issue tracker and a way of discovering remotes. That's it.
&gt;Pushing merges is fucked though. *No it's not*. Pushing a merge commit is the exact same as pushing any other commit. You do the merge locally and push it as a new commit on top of the target branch. Such a fundamental misunderstanding of the concepts at play... &gt;Source Control is a tool, it's supposed to be invisible. [...] It's a system built specifically for the kernel and the specific workflow it has. What an absurd, retarded claim. Fucking garbage nonsense. Every damn startup in the world uses a DVCS. Effectively every fucking team in Microsoft is switching or has switched to Git except the Windows codebase. The reason you're most full of crap is that every CVCS can be used **exactly** the same way a CVCS is used... just tell people not to make forks and instead to push their branches to the central Git repo. Voila, you have a centralized version control system, with real branches! I'm kinda done with this conversation, it's pretty pointless. You clearly don't understand basic concepts of how Git works.
Here's the workflow I used. Checkout local copy of branch. Merge my changes into the branch. Push to remote. Get colleague to pull from remote. If they've got any local commits they haven't pushed this chokes. Maybe the process is wrong, but this shits itself, every fucking time.
Hi, i updated with the method, sorry.
I'm sure the golden land is everything that I've ever wanted. But I still don't know what people are using now for grids. How about your team? How did you solve this problem?
https://datatables.net/ or https://github.com/matfish2/vue-tables-2
right sorry..
We use DevExpress DevExtreme. Great as well.
[Uri Constructor (String)](https://msdn.microsoft.com/en-us/library/z6c2z492\(v=vs.110\).aspx) can throw a UriFormatException (base type of FormatException)... there's also a note stating: In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, FormatException, instead. [Application.LoadComponent Method (Object, Uri)](https://msdn.microsoft.com/en-us/library/ms596995\(v=vs.110\).aspx) doesn't throw a FormatException directly, but there could still be a bad type conversion in some of the properties. I would look at the formatting of the URI first as it seems the most likely culprit. (The XAML also renders correctly in test project). Edit: Original statement not entirely accurate.
So your team went with Vue over angular/react? Interesting, I've read it's a great framework but why did you choose it over other, more established frameworks?
By great technical support, does that mean someone has found their ass with either hand? they had terrible support when I was at my last company, I wanted to rip what little hair I have left using their grids...
LINQ has a Cast&lt;T&gt; function for exactly this operation. FWIW.
Were you renaming any of the methods?
It's not possible to change syntax as it's not my method - it's Microsoft's (https://msdn.microsoft.com/en-us/library/windows/desktop/aa746353(v=vs.85).aspx).
we use the mvc pattern, but use dapper instead of entity framework, and datatables.net for tabular display. We use google charts and ssrs (ugg), but would like to move to dev express soon. 
I get a FormatException with "/CleaningAppCSharp;V2.0.;component/window1.xaml", but not with "/CleaningAppCSharp;V2.0;component/window1.xaml".
I use PetaPoco (similar to Dapper) instead of EF also. I've used both the Telerik and DevExpress libraries and these days would pick a client-side solution like DataTables unless I had a very specific reason not to. What is it about dev express that's tempting you away from DataTables?
&gt; /CleaningAppCSharp;V2.0;component/window1.xaml i copied and pasted it and i sitll get the input format error
Thank you for this suggestion. This worked perfectly. Also, thank you to everyone else who responded for their suggestions as well. public void RemoveUsersFromGroup(string[] Users, string GroupDN) { oDE = new DirectoryEntry("LDAP://" + ADServer + "/" + GroupDN); var ADS_PROPERTY_DELETE = 4; var usersArray = Users.Cast&lt;object&gt;().ToArray(); oDE.Invoke("PutEx", new object[] { ADS_PROPERTY_DELETE, "member", usersArray }); oDE.CommitChanges(); oDE.Close(); } FYI, this code is required to remove multiple users from an AD group as one operation, instead of looping through an array, list, etc of users removing them one by one. IADs::PutEx : https://msdn.microsoft.com/en-us/library/windows/desktop/aa746353(v=vs.85).aspx
What's the stack trace say? Click View Details and expand the exception.
It says $exemption, {"input string was not in a correct format"}, system.formatexcemption
If you do still want to stick with winforms, I maintain the latest branch of XPTable. https://github.com/antiduh/XPTable
Yeah i tried that in one of my attempts to fix it by doing this: newalphabet[counter] = normalalphabet[Convert.ToInt16(key[counter])]; newalphabet[Convert.ToInt16(key[counter])] = normalalphabet[counter]; but it wouldn't work :/
To add some terminology to this so OP can look things up: the variables go *out of scope* once you exit the code block.
I will give my two cents. I hated the **head first** book, it focuses on windows form &amp; xml, provides no good basics first which makes you feel like you are in the middle of the ocean on a kayak. I also oppose the idea that it's fun to make computer games (these beginner games are always so far fetched and lame). Another book that makes you feel like you are in too deep is the **yellow book**. His examples are way too advanced and build on each other to become one big program. This means you sometimes have to scroll 5 pages back to learn what a certain variable did. My personal recommendation: **c# Illustrated** and **c# in a** **nutshell**. They explain everything, also the mechanics with stack and heap. No stone left unturned.
Is there anything Linq doesn't have?! Thanks for the tip.
Do people actually do that? Sounds horrible.
Funny story. I actually did this like few hours ago but for some reason it wasn't working back then.. I re-wrote the whole if block again and copied the if block to the else block and now its working fine.. Spooky stuff.. http://pastebin.com/RZ5wBgPQ Thanks for help guys. Turns out this C# isn't so bad after all heh :) 
I have used their support about 20 times in 4 years. Always had a response in 24 hours and I always get a solution. Twice I found bugs they had to fix and the fix was in the next release. For the price of their tools the support seems top notch to me.
A few months ago I did PoCs on a number of "grid components" including datatables, handsontable, ag-grid and a few others. I found ag-grid to be the best for my purposes and I would highly recommend it. I'm currently using it on a number of webapi2/dapper backed applications. If you have business users who live in excel, they will love it. As an added bonus, it does a good job of being framework agnostic so whether you end up going to angular or react or just stay in "webform" land it would probably work. Maybe it would even make a good "bridge" to the promised land?
Values do not have to be unique - only the keys do. So you could use a regular Dictionary and add each key-value separately, e.g.: dict.Add(0x71, "ADC"); dict.Add(0x69, "ADC"); dict.Add(0x7D, "ADC"); dict.Add(0x79, "ADC"); dict.Add(0x61, "ADC"); 
multi value != multi key
It might not be possible to reconnect an already closed connection object, try either reusing the same connection instance or creating a new one.
If it doesn't like you reusing that object, I would put that code in a function like shown at the bottom of https://dev.mysql.com/doc/dev/connector-net/html/T_MySql_Data_MySqlClient_MySqlDataAdapter.htm public DataSet SelectRows(DataSet dataset,string connection,string query) { MySqlConnection conn = new MySqlConnection(connection); MySqlDataAdapter adapter = new MySqlDataAdapter(); adapter.SelectCommand = new MySqlCommand(query, conn); adapter.Fill(dataset); return dataset; } The note above that example says it uses ExecuteNonQuery in the example, so maybe that happens already as part of the Fill.
Use `ExecuteScalar` instead of `dapter.Fill`. Your query is just retrieving a single value.
doesnt change... AS long as im using reader, adapter or smth like this, the second query doesnt work anymore. :( As soon as i comment out adapter.fill or executescalar part 2nd query is working again.
What happens if you only fill and not call executenonquery?
its working if i comment out only executeNonquery and foreach(.... if i leave foreach uncommented aswell its not working again.
Why are you doing a query in executenonquery? Not to say it's wrong. It just looks strange to me. Also, you're closing the connection before you grab the data rows. Again, looks strange to me. I use: MySqlCommand cmd = new MySqlCommand(query, conn); MySqlDataReader reader = cmd.ExecuteReader(); while (reader.Read() != false) { field = reader["fieldname"].ToString(); } reader.Close(); cmd.Dispose();
hackerrank.com does C#
You've really made it hard for anyone to help you on this, and you're just going to get a lot of 'try this. No? Ok try this...', and so on. You say it doesn't work. What is the error? That's the first thing you should be giving us. You show us code. Nowhere in the code do you show us the connection initialization, so what other code is out there affecting the result? In the end, you haven't given enough to work on.
There are no errors, thats the thing. I just dont get any variables from the second query if the first one is active. I didnt think connection initialization is important, because its working.
Perhaps something like this? Would need to edit it to your needs but you get the idea hopefully. public class Numbers { public Numbers(List&lt;int&gt; intsCollection) { Instance = intsCollection; } public List&lt;int&gt; Instance { get; } } public class GenericDictionary { Dictionary&lt;string, object&gt; _dict = new Dictionary&lt;string, object&gt;(); public void Add&lt;T&gt;(string key, T value) where T : class { _dict.Add(key, value); } public T GetValue&lt;T&gt;(string key) where T : class { return _dict[key] as T; } } Then can be used like: GenericDictionary genericDictionary = new GenericDictionary(); Numbers numbersA = new Numbers(new List&lt;int&gt; {0x4, 0x8, 0xC}); genericDictionary.Add("NumbersA", numbersA); List&lt;int&gt; numbers = genericDictionary.GetValue&lt;Numbers&gt;("NumbersA").Instance;
Agreed, this book is a gem.
Do you actually improve doing that?
How would a book on a topic like DI help you learn C#? It is not like you HAVE to use DI.
It's similar for R#, once you paid for one year of updates, you have a license of the version that was current 12 months before: https://sales.jetbrains.com/hc/en-gb/articles/207240845-What-is-perpetual-fallback-license-
Personally, I like codewars for the rare times I'm in the mood to do something like that. Compared to a lot of the other coding challenges, or competitive sites it's somewhat beneficial. They are all decent for practice, but I codewars forced me to learn some new stuff. There's also exercism.io which I highly recommend. Very cool program.
This is actually a huge market, I'm a sales engineer in this market and you would be surprised how large and lucrative it is for C# developers. (I'm in US)
No I miss-read his post. I think a Dictionary&lt;string, byte[]&gt; would be just fine.
For security stuff, use [`System.Security.Cryptography.RandomNumberGenerator`](https://msdn.microsoft.com/en-us/library/system.security.cryptography.randomnumbergenerator.aspx), never `Random`.
I've seriously used git for years; it isn't a magical cure all and has some serious limitations. TFVC allows you to work with multiple branches at one time, something git doesn't handle at all. (And no, making two local repositories is not a solution.) TFVC also handles binary assets much better than git. 
Bloated may be the wrong word here. Git requires a copy of every version since the repository was created to be downloaded onto the local drive. Sure it's compressed, but it still can take a really long time compared to TFVC.
This comment is more useful than the blog itself.
Lol. Git allows you to work with branches MUCH more easily. I can checkout three different branches from a single enlistment into different work trees that I can open in different editor windows, commit to, push, etc. In TF, you have to make three different local enlistments. Ironically your single example is not only wrong, it demonstrates another place where git is better. Since you clearly don't know , google "git multiple working trees". I use it all the time for repos that are close to 1 GB and would be painful to clone multiple times.
well for a start the Linq .Cast() will iterate over the collection twice, ConvertAll will only do it once. ConvertAll is also specifically designed for Arrays whereas .Cast() is a generic method for any IEnumerable. In my experience the generic methods are less well optimised for specific use cases and so I will always pick the built in alternative if there is one. Linq is wonderful but it's not always the best solution.
interesting apples vs useful oranges
It's a pretty terrible article for not mentioning the correct way to do it. Even the title is wrong, according to the docs the Random class unsurprisingly &gt; Represents a pseudo-random number generator, which is a device that produces a sequence of numbers that meet certain statistical requirements for randomness. It isn't supposed to be non-predictable so how does predicting the values break it?
Not understanding the criticism of this post. It's great to know "hey, prng isn't cryptographically secure, here's your alternatives", but that's blind trust until you understand why that's the case (and honestly, that sentence is pretty bad too, because it doesn't acknowledge the tradeoff you're making - you'd be drawing from some physically-derived entropy pool, that pool can run out). There are many applications in the real world where rng with entropy pool seems nonsensical - e.g. if you're building a turn-based videogame, perhaps you don't really need that, but hey, perhaps that means halfway through a game a cheater can predict RNG and break your game. In a game like hearthstone, could that mean turning back time to see where the RNG started and, from there, seeing what the rest of your deck looks like? That's pretty interesting imo.
The other answers are inefficient if you want to modify the value associated with a set of keys mapped to a single value. (Many keys to one value, change the value changes the value for all keys). I'd look into a hashmap mapping from key to { id, keys }. Then, another hashmap from id to value.
Entropy running out just isn't an issue anymore, you can derive endless random values from a CSPRNG seeded with finite entropy.
As someone who is beginning to learn C#, this is a great resource! I'm sure it will be of great benefit to many!
Even though I already knew System.Random is not cryptographically secure, I never thought it only took 55 values to predict it. I don't know if that'll be relevant for any of my apps, but it's good to know nevertheless.
practice is practice
You suck at reading and Googling. That is entirely possible without multiple enlistments that TF requires. God damn. What is it with clueless people asserting completely inaccurate bullshit about git? To repeat for the third fucking time: Git supports multiple checkouts from a single enlistment. Each checkout gets its own complete working directory and full source tree with only a single actual repo. For fucks sake, just do a tiny bit of googling instead of spreading bullshit.
"Just google it", the words of someone who was caught in a lie and doesn't want to admit it. If you actually knew how to do it you could prove it easily enough. Instead you hope to send the other person on a wild goose chase with the hope that they'll just give up.
Rule 4: Request-for-help posts should be made with effort &amp;nbsp; Show what you've got so far.
You ass: https://git-scm.com/docs/git-worktree Come on.
There are a few things in F#'s Seq module that'd be pretty handy (windowed, for instance), but System.Linq.Enumerable is pretty complete.
If you go with C# and need to write Windows services, I highly recommend the [Topshelf library](http://topshelf-project.com). Instead of using the confusing Visual Studio template for Windows services, Topshelf allows you to create a simple console application that can be installed and run like a proper Windows service. 
Here's something to get you going: `RoomInfoDemo` *uses* `RoomInfo` objects to hold and update the state of the program. Don't inherit from `RoomInfo`. Your `calcRoomSize()` function should calculate the room size from its properties. The `getData()` function should accept a `RoomInfo` object as a parameter, not ref values, so you can use it like this in your main function: RoomInfo room1 = new RoomInfo(); getData(room1); Console.WriteLine("Room #1 size: " + room1.calcRoomSize()); ----- As for the 'red squeakily lines'... you need to read the output of the compiler to learn why your program won't compile.
Depends how much work you put into it, but programming is mostly problem solving, and codingame is just that, *problems*. There's no secret, the more you practice, the better you become. Some problems are pretty straight forward on Codingame, but you could learn a fair bit by looking at what others do, improving your code and striving to make your code better.
Thanks it worked appreciate the help 
You can build cross platform console apps with the .NET Core CLI. VS Code has great built in support for C#, but you can write your code with any editor and build it with the CLI. https://docs.microsoft.com/en-us/dotnet/articles/core/tutorials/using-with-xplat-cli
Ya, no. It's at "security" article that presents a "problem" with out stating that 1) the documentation says that Random is not random. and 2) System.Security.Cryptography.RandomNumberGenerator exists. 
I managed to get the information I needed despite you trying your damnest to avoid actually offering anything useful such as the name of the feature. So I win. 
You can't overwrite files. If they're present, you need to either delete it first or rename it. Your best approach is to simply give every user an own folder. Or depending on how your program works create a "random" folder for each operation.
It's a forms app with an invisible form. So there's only an icon in the task bar. Gonna edit the thread to clarify :)
Ah alright, that makes sense. Thank you for the link and the help!
Not *only* did I link you to **the exact official documentation page** for the feature... every single one of my posts included the name of the feature "multiple working trees". From the link I posed: *"Manage multiple working trees attached to the same repository."* You're just a stubborn asshole who wants to pick a fight instead of admit he was wrong.
Yes, but the problem is that the character `1` isn't the same as the integer value 1. If you convert the character `1` to an int, you'll end up with 49, which is the character code for `1` (well, depending on [character encoding](https://en.wikipedia.org/wiki/Character_encoding)) Try: Console.WriteLine( "'1' = {0}", Char.GetNumericValue('1') ); to see what I mean. So you want something like int index = Char.GetNumericValue((key[counter]) - Char.GetNumericValue('0') // or: int index = Char.GetNumericValue(key[counter]) - 48; // but I think the first version shows intent more clearly, and is independent of character encoding.. newalphabet[ index ] = normalalphabet[ counter ];
AWESOME! Thanks! 
Thank you very much for this Information! As I already said: &gt;I only heard of it
You could avoid this issue by not using a Random member inside your Die class and accepting it as a parameter to the Roll() method instead. You should keep a single Random instance in your application and pass it around as needed. This way you can also debug easier by enforcing deterministic behavior when needed (setting a fixed seed for the Random).
Doesn't this still rely on the generator being secure? Reseeding with physical entropy makes it much harder to predict.
And for non-security stuff, you can use one of the generators here http://xoroshiro.di.unimi.it/ to get better random numbers that are just as fast or faster to generate.
I've never made services, but I primarily make command line utilities in C# in addition to the occasional WPF program. It's my go to usually if I want something solid and it's a decent size program after a prototype (which is usually written in Python). You won't have any issues with that aspect, I would think.
The last thing C# needs is more implicit behavior. What is this, C++?
To quote [Eric Lippert](http://stackoverflow.com/a/8673015/1156423) &gt;The question is "why does C# not have this feature?" The answer to that question is always the same. Features are unimplemented by default; C# does not have that feature because no one designed, implemented and shipped the feature to customers. &gt;The absence of a feature does not need justification. Rather, all features must be justified by showing that their benefits outweigh their costs. As the person proposing the feature, the onus is on you to describe why you think the feature is valuable; the onus is not on me to explain why it is not. You're free to create a [github issue](https://github.com/dotnet/roslyn/issues), or even write an implementation and submit a patch yourself if you wish to see this feature. Of course such a proposal should ideally be fleshed out and consider specific parsing rules etc. in detail.
C##
Awesome, thanks! The other part is a bit of a tooling question. Can I compile distributable executables from C# code from the .NET Core tools? I downloaded the package and was able to "dotnet build" working executables. Can do services, awesome! I'm not sure if I can just deploy that single executable or if I need to package up a special runtime for .net and do a relatively heavy install process. Hoping for copy exe and run kind of thing. Is it safe to assume all windows pcs and server targets can execute the .net core build products?
I will absolutely start with this. It look perfect. Thanks!
You would probably have to hook for global mouse events. https://msdn.microsoft.com/en-us/library/windows/desktop/ms644990(v=vs.85).aspx
It might be an old-school thing, I consider ViewModels in MVC to be like views in a database so I tend to keep them with the model in a different folder. You could definitely put them with the UI, it was just a preference thing for me. EF is Entity Framework, yes. Not sure what you mean by Reposity and UnitOfWork pattern, I'm mostly self-taught so often I do something without knowing what it's called. I'm not sure what you mean by data transfer objects. If you data layer where you talk to the database and return objects then that would be my datalayer.
&gt; Linq .Cast() will iterate over the collection twice, To be clear, `strArray.Cast&lt;T&gt;().ToArray()` will iterate the array twice, because `ToArray()` iterates once to build a list of results, and then iterates that list to create the array. `Cast&lt;T&gt;`, by itself, only iterates once, *but* it does come with the overhead of an iterator to do the casting.
Thanks for the advice! One of the tools in this case is a server and workstation monitoring and remote access management process, so it'd be running in the background and collecting/reporting state as well as maintaining a channel for remote status queries and such. Small business IT remote managed helpdesk kind of stuff. So I think the service facility is the way to go for that one. For timed reporting, the task scheduler sounds like a better option and it may be a better one for one of the tools (daily reporting run). Thanks!
Cool, thanks! I may need to do a 100% unattended install so I'll look into how to handle the above case. Knowing the targets are mostly ready to rock is a big deal for getting the first version out, though. Thanks!
I wrote a windows service a few years back which used a 3rd party COM interop and I had nothing but trouble with it. Fortunately due to the archtecture of the solution, it was trivial to move it over to a console app, which cured all the issues. The article makes some sage points, but you understand the business logic better than anyone here so use what you feel is right.
It's hardly any more implicit than e.g. the `var` keyword or automatic type inference for generic methods.
Project 2 sounds like a really really bad idea. First of all it would be hashing, not encrypting. Second, if &gt;you can easily brute force it then you can't &gt;say it's pretty safe My fist rule is *Never do your own encryption/hashing*, **like ever**
Out of interest, how does the Java integration work? (ie what cross process communication channel/transport does it use, or is can it use a variety - eg MQs, WS, etc &amp; what encoding/serialisation for exchange, eg XML, JSON, protobufs etc..) Personally I *always* find integration interesting, particularly when communicating across such boundaries as .Net -&gt; Java and, especially if you regularly need to integrate Java and .Net it's a useful library to have on hand.. I do quite a lot of integration work at my work and really enjoy it; it presents challenges sufficient that I get real satisfaction from effective integration once implemented.
[removed]
Thanks, I will try that out.
/u/Eowyn do you have an idea for the name or should I use a random name generator?
Note that due to high demand, we added a Cyber Monday sale for Corporate Licensing as well https://blog.oz-code.com/ozcode-cyber-monday-sale/
The second method won't work - use the first one
Project 1 - What makes this better than any of the built in application settings solutions provided by .net? Project 2 - as already mentioned by /u/facie97 DO NOT IMPLEMENT YOUR OWN ENCRYPTION! Use an industry standard algorithm as they are tested 1000% more than you could ever hope to achieve on your own. I don't want to come off as harsh but unless you are using the project to learn you should probably just delete it and move any project using it to a standard encryption algorithm provided by System.Security.Cryptography. Project 3 - Sounds like a cool idea but for me to even consider using it it would have to be open source. &gt; the reason why it is not open sourced is for security Security through obscurity does not work. [This article does a pretty good job explaining why.](http://www.robohara.com/?p=1439) Project 4 - These libraries are always pretty useful as long as they are well designed and maintained. With that said there are plenty of free/paid options out there that do this, so what makes this an option I would choose over a different library. Also what are the controls for WinForms, WPF, Web?
Integration works by transporting information through a tcp/ip protocol through a tcp client to a tcp server. In general to conserve data space, we change a script to a byte ASCII array and then rebuild the string on the javaside, where we will either create a new thread for a new client, process the command and then send a return value to the tcp client. Currently the Java server manages a custom user database. Currently it's a system that other people use to transfer information between a c# client and a c# server. 
For the first one, the previous builtin system for managing settings is through a directory that changes when you move the main application artound. When I developed it, I was creating single applications that's all contained in a executable file, this allowed me to develop something where if you move the application to a different directory, then it will not create a new directory for storing values, then for that all of the values will not reset. Thanks for the tip on the second one, noted for future projects. And for the third one I had a client side DDOS protection going on till I figure out how to protect the server from DDOS protection. This isn't even near perfect or to the point of what I want it to be, and I know someone just can ping the server with a bunch of data with a different program and get the same result. As soon as I fix this problem on the server side, there there will be no need to have some of the code non open source. For the forth one, I haven't seen a control based library that is as modifiable as mine, at least for a win form stand point without modifying the code of the library. I'm not so sure on the WPF side, but later in the future when I have the time, I'll learn how WPF works and port it to WPF. I don't plan to release it to Web, but that may change in the future.
No, Strategy pattern is not used currently but as this project is mostly open-source right now, including the Java server. That means you can implement different transports for the server. But thanks for the idea for adding different transports! I'll definitely look into adding that.
In VS, the option to create a new git branch from changes you've already made in the "wrong" branch is about as easy as it gets. In TFS, I always waited as long as possible to create branches and I tried to plan ahead. I worked at a place where they had decided to use branches named "Feature1" "Feature2"... I don't know why they swallowed a fly. In my first month with Git, I created so many branches that I started to get lost in branch management. There is a lot of small maintenance and not many new features, so now most work happens in dev_current. Depending on what you do, you may have a better experience on one or the other. If you think switching from what you use now to the other one is going to solve all your problems, you are going to have a bad time. 
No worries, this sounds like a fun project - and useful too :)
Implicit behavior is OK, as long as it's not confusing. This just seems like making `using static` implicit. What I don't get is the value of requiring the `.`. If the compiler can determine from context that the identifier should be an enum label or static member of a resolvable type, why have the dot at all? And, if it can't ... you'd (probably) need the type information, anyway.
I haven't taken the codeschool course so I can't speak for that. [But the Visual Studio Dev Essentials program offers a free 3 month Pluralsight subscription.](https://www.visualstudio.com/de/dev-essentials/) You could try that out and see if it helps you with your coding skills, good luck!
&gt; For the first one It might be nasty, but it sounds like what you actually want is registry or environment variables. A stand alone assembly that modifies itself might sound like a good idea, but then your settings won't persist when you deploy changes to your assembly, and it will likely get the assembly quarantined by most anti virus heuristics. If you can't use the registry or environment variables, then you are going to be writing to a database or file to store your settings anyways...why not use the .config file or serialized JSON instead?
If I understand you correctly you want to find any activity that is due within next 7 (X) business days? then yes you should just search for any due date that is less than (or equals) 7 business days after today and I suspect today or later (you don't want all the old ones still in system - unless of course they weren't completed, but that would be something other than due soon)
Can vouch for Pluralsight. Excellent instructional videos. ASP.NET is a framework for web applications. Instead of a console application that runs on your computer, they are, essentially, plug ins run by web servers. There are strict conventions that must be followed, and you will have to learn about deploying to the web server (and you'll have get a web server to deploy to). For the server, you can use Azure. If you create a stand-alone windows program on your own computer, you will use WPF (Windows Presentation Foundation) and the program will be run by your local operating system. To share the application with others, or to run it on a different computer, you will need to install the program on the target computer.
Did not realize that worked with enums. TIL.
Hey I created a slack myself. PM me your email so that I can invite you. I also added the slack channel to the edit of the main thread. Thanks!
&gt; You should keep a single Random instance in your application and pass it around as needed. Not exactly. You should keep a single `Random` instance per thread. The `Random` class is not thread-safe.
I'm very knew and don't really know what that is or how to use it :P Could you give an explanation if possible?
&gt; For the first one, the previous builtin system for managing settings is through a directory that changes when you move the main application artound. When I developed it, I was creating single applications that's all contained in a executable file, this allowed me to develop something where if you move the application to a different directory, then it will not create a new directory for storing values, then for that all of the values will not reset. I believe the current recommended approach is to store the settings file in the %appdata% directory under a folder the same name as your application. The old route (pre win 7 i believe) was to store the config file along side the exe but that became problematic as writing to 'C:\Program Files' requires admin and apps would not and should not run as admin by default. I'm pretty sure the built in .net settings utilities supports writing to the appdata directory but it has been a while since I have used it so don't hold me to it. &gt; And for the third I'd be interested to see the code for this project once you decide to release it. Based on your other replies it seems like it could be pretty interesting. &gt; For the forth one, I haven't seen a control based library that is as modifiable as mine, at least for a win form stand point without modifying the code of the library. Thats a fair point, and I would agree most winforms based libs don't have a ton of flexibility in terms of looks. Would definitely recommend checking out WPF, once I made the switch from winforms to wpf I really never went back unless it's a really simple project. 
instead of a bunch of if/else, it would look like this: switch(myState){ case States.cell: state_cell(); break; case States.cell_mirror: state_cell_mirror(); break; /* And So on*/ } you can also make each one a single line to look like your else. case States.cell: state_cell(); break; case States.cell_mirror: state_cell_mirror(); break; just notice that the amount of repeating is minimized.
You really need to learn some basic C# before writing a game
If you're that new, I won't suggest making a Dictionary&lt;States, delegate&gt; 
Yup realised that myself, stupid mistake :)
It happens. As someone once told me, if you don't facepalm after looking at your old code, you didn't learn anything. 
Exactly. Everybody starts somewhere
Since you're new, also get used to using [snippets.](https://msdn.microsoft.com/en-us/library/z41h7fat.aspx) They're shortcuts that paste code for you. Type them, then hit TAB TAB to autocomplete (I've messed with settings so this may not be out of the box behavior). You can create your own later on if you find yourself doing the same things over and over. The most often used ones for me are * ctor - creates a default constructor * if - if statement * using - using statement (good for resource management i.e. closing connections automatically to prevent leaks) * switch - inserts a switch statement **EDIT: ReSharper isn't needed for this bit, it's out of the box functionality.** ~~If you've got [ReSharper](https://www.jetbrains.com/resharper/) it's even got a~~ VS has a tool that will actually insert the switch labels for you based on the Enum you supply. So typing "switch" TAB TAB will give you switch(@enum) { } and then when you replace the @enum with "myState", ~~ReSharper~~ VS gives you the option that, when selected, automatically changes your code to switch(myState) { case States.cell: break; case States.cell_mirror: break; case States.mirror: break; etc } [ReSharper](https://www.jetbrains.com/resharper/) isn't free, but it has a 30 day trial version. It's a great tool to increase productivity and refactor code.
As a general rule, non-static methods in the .NET library are not thread safe, static ones are.
I hope this doesn't sound like some marketing. I have nothing to sell but have an article and some code on github to calculate business dates in situations just like this... hope it helps! https://cetus.io/tim/Time-ticks-on/ Code https://github.com/cetusfinance/qwack/tree/master/src/Qwack.Dates
Thanks! I'll definitely take a look at it!
You can basically use notepad + csc.exe. Command line exe's can be built in by using the Main() parameters.
You mean the one where he says don't do it if you're new? I'm not a new programmer, just new to C#. Concepts tend to transfer across languages, just their approach/implementation varies. I'm unlikely to go back to just writing while loops and if statements if I have X+ years experience in another language.
Ah-ha, Action/Func work as (semi) anonymous functions in C#. Thanks for the clarification! 
Moreso the response about dictionaries with delegates. I don't personally know how to do it, but it sounds useful. 
Ah, perhaps I hopped down your throat a bit too fast. Apologies.
The majority of experienced security experts will not ever attempt to create a proprietary encryption scheme. You came here asking for opinions. **You should not pursue creating a proprietary encryption scheme.** If you just google "proprietary encryption" you will get many many pages detailing the various issues you can encounter when creating a custom encryption and why it is a bad idea. Proper encryption is one area where sound theoretical knowledge and real world security experience are a hard requirement...it isn't a good project for dabbling at all. -edit- After ten years developing professionally in .NET business applications and reading multiple books on security, I feel like I am barely qualified to use the existing built-in encryption classes for basic encryption tasks.
Hey it means you're improving :) 
Yeah, but you want the code to be easily understandable by people in the future (like the person who wrote it, when they haven't worked on it for three months)
The C# term is delegate. They're more like function pointers.
Thats what comments are for. You should prioritize efficiency and readability with varying but usually equal weights. My general rule of thumb is "if it takes more than 3 80-character lines in a comment to explain a variable or block of code, it probably isnt the best method"
Try building a Texas hold em app. It's fun to try to build super elegant algorithms for determing winning hands. I think I have like 400 unit tests around how winning should work. Building the UI was fun too.
Alright, I'll give that I try as well.
Or a giant ternary 😏
This is also in the non ReSharper Visual Studio
the specific question is basically how to go about changing a decimal number into a BCD Unfortunately i'm not sure what you mean. what is a "long"? may I please have small example of what you mean?
It will generally compile it down to a jump table. You can usually see this in the IL. If not the compiler will fall back to effectively if/else.
I did put effort into this. I've been looking up how to do this for 3 days. "Try breaking down the problem to its constituent parts. Seems like you already have a method to convert a number to binary, so maybe you can use that for the digits." well no shit. "Try searching for how to break down an integer into its digits." no shit. I did that for 2 days. I can't figure it out. what good is giving code that makes no sense? how am I suppose to know if i'm getting warmer or colder? it's like shooting in the dark. Did you really have to remove the post? I wrote all my own code for this program. I got more than 3/4 of the thing done. I just needed help with how to Parse. that is literally my question "HOW TO PARSE" Thanks for nothing moderator. I guess noobs aren't allowed to learn
The suggestion is to move all the inline conversion code to methods that will parse all input to a common number type. Then write all output conversions from that single common type. You're pretty much already using that common type now with all the `Convert.ToInt64` calls. Moving it to shared methods will save you from having to duplicate/inline the conversion everywhere which might make it simpler to read/manage the conversions. `long` is just an alias for `Int64`.
 thanks for the help. But that's the problem. I dont know how to parse it. I dont really know much of C# and theres a billion ways to parse things but I can't figure out which command I need. 
Also take a look at the C# naming conventions. They are more important than you might think ;) http://www.dofactory.com/reference/csharp-coding-standards
There is no command. There is no `Convert.ToBCD` method. You need to write the algorithm yourself. You need to build the code yourself. I've given you the tools. I've given you examples to other BCD implementations. Get started with that and write _something._ It doesn't have to work, but it should resemble something that might. If you can't get _that_ to work, then you can post _that_ code and seek help about the specific aspects of it that aren't working. If you can't get to that point, then maybe check the resources available to you at /r/learnprogramming or available to you with your course or classmates or instructor.
Removed: Rule 4. Nope, don't think so. Not for WinForms at least. Just make 4 panels and put the resizing logic/math into a reusable method for each style and feed into it the panels that should be visible.
I think the services project which comes with Visual Studio is fine, I have written a lot of services with this. To debug the service I normally just add a console application project and call the service from there. For example in your service base class use a method like this. public void OnStartDebug() { OnStart(null); }
If you need comments, odds are that there is something wrong with the code. Most likely something should be renamed.
You can use a Dictionary initialiser to make that even neater: var lookup = new Dictionary&lt;States, Action&gt; { [ States.cell ] = state_cell, [ States.cell_mirror ] = state_cell_mirror, // ... etc }; 
And all you need is the .NET framework installed. Great for quick programs where you can't install VS. 
Don't rule out calling python from your C# program. Python, R, and F# are my go-to's for any kind of visualization (R mostly as of late). All 3 can be called natively (and sometimes, even dynamically) from C#. Both R and Python scripts can be constructed as string directly inside a C# program and executed as-is. R also natively supports saving graphs to images. I don't have any suggestions for a C# framework for visualization, but I just wanted to put in my 2 cents.
No. It would be trivial for any even slightly experienced developer to open your binaries in a decompiler (such as [dotPeek](https://www.jetbrains.com/decompiler/)) and retrieve the credentials, no matter how they're stored. If you require security, you *cannot* share credentials like this. It is simply impossible to do so safely. Having looked at your other post, your scheme is extremely dangerous in general. Attackers could trivially circumvent whatever 'protections' your client has to upload arbitrary files and to manipulate or delete the files of other users. I'd be especially worried about attackers uploading malicious code to your FTP (e.g. PHP files) to abuse your hosting for other purposes (like spamming and spreading malware). I would also suspect that your hoster's terms of use forbid using FTP accounts for file sharing like this. There is an additional risk if the FTP credentials are the same as your webhoster's normal login and malicious users could gain access to see your billing information, change your password, purchase additional services in your name, etc.
I'm certainly not saying that it's the easiest way, but I've found DirectX 11/12 surprisingly easy to use through SharpDx (nuget). You can use Direct2D1 and have efficient 2D rendering in a few minutes. 
SQL Server Dll File (another library, but copyable, stabdalone) - stores a Mssql Databasebin - single file - accesable using sql. Limitations: - File Size 
Yeah, hardware acceleration would be nice. Ive also found Win2d, which offers a canvas with hardware accelerated direct2d drawing if im not mistaken. I will also check out your links, thanks!
Surprised that nobody mentioned monogame yet
What version of Visual Studio, and are there unit tests in the solution?
Hello there, Firstly, you need a README. It's very important that you explain what your solution does in very simple terms, what problems it solves and some examples in how to implement it. Failure to do so would turn away most, if not all potential users and contributors. Next, I would recommend adding issues on your repository which will help any contributors get an idea of what needs to be looked at and fixed. Remember, nobody knows at a glance how your code works or what it even does, hopefully these suggestions will help us help you.
&gt; Win2D It's a metro/uwp bullshit thing only though unfortunately.
thats cos everyone insists on promoting xna which has been dead for years, for some strange reason
but monogame is basically xna but cross platform
I'm commenting on this just so I will remember to answer it later. I have done this exact thing in SQL and it's possible to do this with two comparisons. I even have a pretty picture that illustrates how it works. Unfortunately I'm at work now and I don't have access to the document that describes it. I'll try to remember to come back to this post in a couple of hours.
 var overlapping = Start1 &lt; End2 &amp;&amp; Start2 &lt; End1;
I'm like 80% sure that the solution posted by /u/tweq is what I was going to suggest. It's counter-intuitive because it's so simple.
I have only taken a cursory look at the code, but if performance is required, caching reflection information is usually a pretty big win. You could even cache the entire method information message, as that appears to be static. Does this need to be exchanged for every invocation, anyway? It may also help if you prefix messages with their total size, so you don't need a million individual reads. Would also simplify the code a lot since you could just use a BinaryReader.
Start1 is between start2 and end2 OR end1 is between start2 and end2.
Google is your friend 😉 http://stackoverflow.com/a/325964/1035297
Here are the steps I would try, in order: - Something different in the project settings - Probably not this, if your coworkers aren't seeing it. - Something different in your per-user project settings. These are usually ignored in source control. Try closing VS, deleting any .suo (solution-wide preferences) and .csproj.user (project-specific preferences) files in your source code directories. - Something different in your VS settings (maybe some sort of unit test / coverage setting). Try resetting your Visual Studio settings by following this link: http://stackoverflow.com/questions/17203820/ . You'll need to re-apply any customizations to visual studio after this. - Something different on your local system - This one is tricky. Based on the DLL name, I would look in your "Add / Remove Programs" Windows control panel for anything related to MSTest / Code Coverage.
Sorry for late reply, I implemented the caching for reflection information and it make only about 30 milliseconds improvement for a 334 milliseconds query (~304 milliseconds now) and I mostly set it up this way to handle the shared memory, if the parameters are stored in shared memory, it would eliminate a number of roundtrips on passing information between PostgreSQL and C#. BinaryReader slowed things down significantly, so I have to avoid using that unfortunately. Mostly, I set it up in a way so functions can be created during runtime. I will try the Shared Memory approach later on to see if there is any difference in performance. Thank you for your interest in this project.
&gt;Does java have a linq equivalent cause I couldn't live without it Scala.
if you're using razor you may need to wrap your js code in the scripts section tag so the pipeline knows how to render it: @section Scripts { &lt;script&gt; //your code here &lt;/script&gt; }
You pass an argument by placing it in the brackets. Assuming you have this method: public void PrintAge(int age) { Console.WriteLine("Your age: " + age); } You call it like this: int age = 50; PrintAge(age); // &lt;---- Also note that /r/learnprogramming is likely a more suited subreddit for you.
That man's shirt is outrageous
Some people just don't deserve strong typing...
You should consider targeting .NETStandard.
I don't know, but MsSql shouldn't be too bad.
It will be trivial to extract those credentials from the compiled application.
Char[2]
What are you trying to do with (no == no)? Surely you mean (no == "no") or (no.Equals("no")) or even (no.Contains("no")) given the context
Or use short / char in the format 0xAABB where AA is A-H and BB is 1-8
Just want to point out that this only works in his particular case. This is not a general purpose way to store arbitrary 2-character strings. Some characters are made of multiple `char` values.
*short* and *char* are both 16-bit. technically, since a chess board has only 64 positions, you could number them 0-63, instead of A1-H8. a *byte* data-type allows you to store an 8-bit unsigned integer (0 to 255), so that could do it instead of actually saving two separate characters. even that would be a bit overkill, though, if you're really looking to optimize memory usage. to be honest, though, if a *char[2]* makes more sense to you, just do that. understanding of code, imho, is much more important than saving 8 bits * 32 pieces 
 public void doSomething(char[] position) 
In C#, chars are UTF16 (i.e. 16 bits each), so a `char[2]` would already be 32 bits plus the array length and object header, and it would need to be garbage collected. I doubt it would be notably more efficient than a string of equal length. A structure containing two `char` fields would be more efficient. A chess board has 64 positions, so you really only need 6 bits to represent a square's position. If you *really* want to be space efficient, you could store both coordinates in the nibbles of a single byte, with a minimal amount of bit-fiddling. Of course that would still be wasting 2 bits per piece, when really only 24 bytes in total are needed for 32 pieces. Such an encoding would be rather annoying to work with, though. This should mostly be a theoretical concern however, in practice you could throw around millions of 2 character strings in your program without any problem. There is no need to bother with such extreme optimizations if you're still learning. Even later on, readability and maintainability often trump optimization unless there is a measured performance issue.
It seems to me like you're worrying about something that isn't a problem. A chess board is only 64 squares, so even if you use 100 bytes to store information about a single square, that's less than 7KB of memory used, which is a trivial amount. Or are you worried about speed? In which case I'd say it was premature optimisation, since I can't see any imagine implementation being particularly slow. If it was me, board positions would probably be stored internally as numbers, 0-7 for both x &amp; y coordiantes, and only converted to the chess notation when displaying the position to the user. 
Is the rest of the program complete and working correctly but you ran into a memory or performance issue caused by storing the positions the way you were? 1. Make it work. 2. Make it right. 3. Make it fast.
Plus, everything is classes.
Yeah, that too. It's a bit of a trade-off, since it prevents accidentally creating default-value options, but on the other hand now options can be null.
The type is char[] 
A char in .NET is 16 bit, so it can only store characters that fit in this range. If you have a character that requires at least 32bit you need two chars. That's also the reason why you should never use `char.IsLetter(char)` when you work international. Instead you need to use `char.IsLetter(string, int)`.
You could kind of wrangle it in C# by implementing the pattern matching methods as extension methods that can handle null values instead of instance methods on the option type, but that does not appear to be the case in this library.
&gt; Some characters are made of multiple char values. Are you talking about escape characters, or something else? (If talking about escape characters: \n is not stored as '\' and 'n', it's stored as a single character)
Removed: Rule 4. In the future, please format the code to use reddit formatting (prefix each line with 4 spaces). You'll have to put more of an effort into the rest of your program though if you want to seek help; /r/csharp isn't a code generation service. I would suggest if you're having trouble getting started, check out the learning resources available at /r/learnprogramming and /r/learncsharp, or consult with your classmates or instructor.
There are more than 2\^16 Unicode code points, so not all of them can be encoded in a single 16-bit `char`. Examples of this are Emojis, as well as various non-western alphabets. See the output of `"𠂊".Length` or `"😀".Length`, for example.
OK I'm going to go against the common consensus here of "THATS A STUPID PREMATURE OPTIMIZATION QUESTION, JUST MAKE THE CODE READABLE AND EVERYTHING ELSE WILL SOLVE ITSELF". And instead lets try to solve your actual question. Given that a chessboard has 64 positions, you could just assign each one a value between 0-63. So that would require 6 bits of information. Allocation with anything less than a byte is cumbersome so spending 1 byte per position is probably the simplest "good enough" answer. Need something even more efficient? To capture the state of an entire 32 piece board, you need 32 * 6 = 192 bits, which is 24 bytes. If that representation works for your algo then it's near peak-efficiency and also quite workable. Need to go deeper? Storing entire *moves* (ie piece/from/to) is likely more efficient than storing individual locations. There is quite a bit of existing research into move notation (both human-readable and machine-optimized), here are a few starter links: * https://en.wikipedia.org/wiki/Chess_notation#Notation_systems_for_computers * https://en.wikipedia.org/wiki/Forsyth%E2%80%93Edwards_Notation Still not good enough? If you are willing to push the envelope a little bit, [this cute article examines the possibility of representing moves in 4 bits or even less](https://triplehappy.wordpress.com/2015/10/26/chess-move-compression/) 
The author uses the word "concurrency" and "concurrent" but I'm not sure it means what he thinks it means. 
Good to know, thanks! :)
Well, you could pass each line to a method and have the method do a split on each string for a double space. Then you'd have the label...: value, and you could process those a lot easier, especially with a split on ":". You'd have to check for "ADR 1:" and "ADR 2:" and etc to test which address set to use. string[] separator = { " " }; string[] arrline = line.Split(separator, StringSplitOptions.RemoveEmptyEntries); foreach (string item in arrline) { string[] arrdata = item.Split(':'); } Admittedly, split might be slower than some code, but if you're screenscraping something, the refresh on that might be the big delay anyway. And unless you'd doing ton of them in a row, the speed probably won't be noticeable.
No means no, but no also means !yes ;)
Tangential, but relevant to your case. What you're asking is known as an XY problem. http://xyproblem.info/
This is really cool conceptually, love finding ways around language limitations. Probably wouldnt use in production code though.
repleac lines 31-39 with Console.WriteLine("Sorry for that, to exit press any key");
By setting the cursor position back to the start, you overwrite the previous output without clearing it. That way there's no blank space in the spots that haven't been written yet (after the first full output, at least). You could also use `SetCursorPosition` to selectively write just the 'player' character in specific places without touching the rest of the output.
You can still keep the Cartesian coordinate system if you store the position as as a byte with the first 3 bits as the X and the 2nd 3 bits as the Y. Then use Boolean algebra to translate to X and Y when you need to use it. Need to increment x add 1 need to increment y add 8. You do need to check for bounds so if you are on 0 on the Y you can't decrement for example.
 (start1 &gt;= start2 &amp;&amp; start1 &lt;= end2) || (end1 &gt;= start2 &amp;&amp; end1 &lt;= end2) is insufficient if the second range is wholly contained in the first.
You might need to explain a bit, but this sounds like a job for a PNG and an alpha layer.
think people are reading into this too much, im a noob and i just wanted to know how to do it without using string as i thought string would assign too much space. ive changed it now to be a int array and each int is a square and in each square there is a number which corresponds to a piece
I tried all of these to no avail. :(
I'd create a class called "Board" which would basically be just a 2D, 8x8 array (or List, or whatever) of type Piece. I would stop storing a piece's location as a property of the Piece type. Piece would only know what type of piece it is (Rook, Pawn, etc.) What color it is, and possibly what its starting position was.
Make all the positions into an enum and store it as a single byte. Make all the piece types into an enum and store it as a byte as well. I'm not sure what your int value is used for, but if it can fit in a 16 bit integer, then make it a short. Now all the data for each piece is only 32 bits. That's just the equivalent of an integer. Make this a struct. Now the game has a fixed number of pieces, so make another struct to represent the board state and use a fixed array for the individual pieces. Now the whole state is a struct and can be allocated on the stack. Now your entire search for next best move algorithm can be allocation free. That means no GC getting in the way, and probably boosts response time by 10-20%.
`Option&lt;T&gt;.None` is defined as `null`. Anything beyond that is just a compiler trick.
I'm pretty much a noob and I'd go for a 2d int array for the board and an int for piece types
Kinda preaching to the choir posting here mate.
That's what I meant. There's a fair bit of `if (this == null)` in the decompiled source I was looking over.
What do you think it means?
I haven't seen a recommendation for storing the values as enums. You'll get the to store the information as numbers while maintaining readability. 
You could use the `IsKeyToggled()` function. Then they have to press and let go of it before the action happens.
I'd do this if I were making a game; requiring players to tap as fast as they can is a relic from 1980s arcade games which causes only carpal tunnel syndrome and damaged keyboards!
&gt; Evolution of C Always good to see tech journalists who are competent and understand the topic of their own article /s
If an exception is caught, there is nothing to assign to guess. Or am I missing something? Thanks for the hint on a stack overflow exception. Will look into that.
Damn, missed this.
This sub needs more questions like this. Don't worry about people screaming premature optimization. Besides thinking about how to efficiently store a key data structure is NEVER a premature optimization. Might be overkill to worry, but how to store the most important thing an application tracks is pretty damn important. 