No. This is not "inefficient" - this is only ever acceptable as an off-hand example on a snippet equivalent to a proper array creation statement. If that was how it's been used, fine. If not, find a better series.
that is literally what they just said they are doing
That's unfortunate about the spacial data types. Before I used Effort I was working with some previous coworkers on a solution that would override the DBSet&lt;T&gt; and maintain List&lt;Entity&gt; in a dictionary by type. There were a lot of drawbacks and quirks to work through, but it worked pretty well until we swapped it out with effort. If it had spacial data types we probably would have stuck with that solution. So far the EF7 in memory is working pretty well for me, but the biggest complaint form me is that is does not enforce things like MaxLength, IsRequired, etc. Probably not a big issue for many, but I would like the ability to swap it out with a context hooked up to a SQL db and still have it work
I'm guessing that when you create the StreamWriter, that's the same as calling File.Open with the instruction "CreateNew", which overwrites the file. File.ReadAll*, WriteAll* and AppendText are single operations, you don't need to open the file first.
Well it would help to know what your background in programming is ie is this your first language? I would have to say the #1 best way to start learning is to just start writing simple programs. Like say a console application that lets you put in your birthday and calculates how old you are in days, or hours, etc. If you need ideas there are websites that have challenges to try and test you and some even let you compare your answers against others I think the site http://exercism.io/ does a pretty good of this.
Just curious, would you get a null reference exception if you tried to use that changed object after the function call?
So the project is somebody is planning a party and I have the statement where they enter the amount attending but i need to calculate this. The magician charges $12.50 per hour (rounded up to the nearest half-hour), plus a $20.00 travel fee. 
I also need help writing the code to distiguish this part. A box of plastic utensils containing 10 sets of fork-knife-and-spoon sells for $4.49. They are also available in a box of 50 sets for $19.65. Paula buys the larger box only if she needs above 50 pieces (2 larger boxes if she needs over 100 pieces, etc.). Also need some help with the Console.WriteLine alignments.
You'll want to create an ApiController so you can expose a public POST method You can then use this method to call existing functionality Remember that you'll need to add some authentication to this as it will be public and you don't want anyone to be able to call it Take a look here http://www.asp.net/web-api/overview/getting-started-with-aspnet-web-api/tutorial-your-first-web-api
A `ref` parameter is like a "reference" in C++, basically an alias or nickname. It's as if the function just reaches out to use the original variable under a pet name. But C# also inherits "reference" from Java, which is kind of like a strongly-typed pointer - not precisely, but the important part is that they can be copied. So if you pass a variable by reference (in the C++ sense) and set it to null inside the method, the variable you passed in will also be null. But you might still have other copies of the original reference (in the Java sense) to the original object. static void Nullify(ref Object alias) { alias = null; } static void Main() { var original = new Object(); var preserved = original; Nullify(ref original); Console.WriteLine(original == null); // True Console.WriteLine(preserved == null); // False } 
This overwrites the file's contents if there is anything in it already, as noted [here](https://msdn.microsoft.com/en-us/library/fysy0a4b\(v=vs.110\).aspx#Anchor_2). &gt;The path parameter can be a file name, including a file on a Universal Naming Convention (UNC) share. If the file exists, it is *overwritten*; otherwise, a new file is created. StreamWriter logboekBSA = new StreamWriter(pathBMI + "Logboekbsa.txt"); logboekBSA.Close(); Wrap the StreamWriter in a using block and there's no need to explicity close it. string path = pathBMI + "Logboekbsa.txt"; using (StreamWriter sw = new StreamWriter(path, true)) \\ &lt;-- Note the presence of "true" { sw.WriteLine("This"); sw.WriteLine("is"); sw.WriteLine("text"); } If the file exists it appends it, if it doesn't, it creates a new one.
This isn't specific to C# or any language, but I would highly, highly recommend checking out this [Lynda course on Foundations of Programming: Data Structures](http://www.lynda.com/Developer-Programming-Foundations-tutorials/Foundations-Programming-Data-Structures/149042-2.html). It's narrated by one of my favorite Lynda teachers as well, Simon Allardice. While it doesn't go into C# or other language specifics, these are some very fundamental concepts that every programmer should be well versed in--but in my experience, not many developers can tell the difference between a arrays, double-linked lists, graphs, stacks, etc. Just knowing these terms, what they mean, and when each concept is useful/optimal will put you leagues ahead of other developers that just default to using lists/arrays constantly (because that's all they know). I would also recommend [another one of Simon's courses on OOP](http://www.lynda.com/Java-tutorials/Foundations-Programming-Object-Oriented-Design/96949-2.html) for the same reasons--it teaches you about some very important fundamentals that some courses/classes might just gloss over. Aside from those Lynda courses, I would suggest thinking long and hard about what type of projects you would like to work on. Do you want to make games? Mobile apps? Enterprise-level .NET applications? Windows API programming? Processing audio/video? Analyzing/visualizing large datasets? Each of those tasks typically requires a fairly specific skillset/knowledgebase. But if you can find something specific that interests you, it will help you focus and learn. Last bit of advice, make something the the intention of finishing it. Even if it's very simple, or if it doesn't something that isn't particularly useful. Getting in the habit of completing small programs/apps/projects is another thing lots of developers tend to fall short on.
I was thinking more along the lines of setting it to a valid (local?) object inside that method, but then when that method returns and execution resumes in the original frame, will that oject get garbage collected and you're left with the equivalent of a null pointer in C? Or is the garbage collector smart enough to not dispose of it if it's being referenced in another frame
Go here and run it. https://dotnetfiddle.net/hZpgpH Click collaborate, then share the collaborate link.
Sweet :) I learned to program in C so I approach a lot of simple things with caution haha
Check this out!, http://weblogs.asp.net/scottgu/dynamic-linq-part-1-using-the-linq-dynamic-query-library Nuget: https://www.nuget.org/packages/System.Linq.Dynamic.Library/ I honestly am not a fan though. You lose the ability to refactor and compile time checks. Here is some old code I wrote. OrderKey and OrderDirection are Enums. I used an MVC route to pull the enum directly from the URL. I think it worked Well. public static IEnumerable&lt;Report&gt; OrderBy(this IEnumerable&lt;Report&gt; iEnumerable, OrderKey key, OrderDirection direction) { if (direction == OrderDirection.Asc) { switch (key) { case OrderKey.Name: return iEnumerable.OrderBy(x =&gt; x.Name).ThenByDescending(x =&gt; x.Created); case OrderKey.Size: return iEnumerable.OrderBy(x =&gt; x.Size); default: return iEnumerable.OrderBy(x =&gt; x.Created); } } switch (key) { case OrderKey.Name: return iEnumerable.OrderByDescending(x =&gt; x.Name).ThenByDescending(x =&gt; x.Created); case OrderKey.Size: return iEnumerable.OrderByDescending(x =&gt; x.Size); default: return iEnumerable.OrderByDescending(x =&gt; x.Created); } }
Write a program that you will depend on. I created a journal that did everything I wanted it to. You will be forced to learn the language. Much later you will learn how to to it "right". For now just write something. 
If that was a display of arrogant review, then I want AngularBeginner to **DESTROY** my code every day instead of being just arrogant. You da real MVP Angular, keep the arrogance up!
You can use any database with Entity Framework if you are looking for an ORM solution.
Look into the built in [timer class](https://msdn.microsoft.com/en-us/library/system.timers.timer)
Windows phone problems :( 
You can use C# on various environments, I suggest you to choose one and go for it because each one has its own rules. You want desktop? Try Windows Forms You want web? Try Web Forms You want mobile? Try Windows Phone
Yeah it's real - really gonna gather your info and market the shit out of you while simultaneously selling it to others to do the same...
I've never heard of the term, "Semaphore", but I tried to do something to the same effect and it was a lot of code to solve a small problem back then. I think this might be the solution for my problem now, but how does TPL figure into this? I was assuming that if I'm just putting all my download+htmldoc parsing into a task and collecting them in a list&lt;task&gt; the compiler would automatically manage the optional number of simultaneous downloads. 
System.Timers.Timer was already suggested. I offered an alternative way of working out his problem. There is also System.Threading.Timer, but most people shy away from using that. You can also use System.Forms.Timer, but that makes more sense in a GUI WinForm designer. This looked like a beginner friendly reference for Timer. http://www.dotnetperls.com/
Yeah, I'll try lol ))
Yep, very good clarification imo :)
I didn't know this was a thing! Interesting, thanks!
Take a look at 32feet.net on codeplex. It has full support for BT4 EDR which allows you to communicate using RFCOMM without the need to create a serial port. As for BLE there is some support but haven't tried it yet.
Nah. I've registered with a gmail +alias and I've not had it sold. They're hoping that by giving books away, you'll buy others.
Yeah, I've used it for many months. This is the first C# book I've seen, though.
&gt;Is it possible for websites to limit my speed/connections if I'm hitting their webpage too many times? yes don't be a dick it's quite likely that if you hit 25000+ pages the web host will assume you're trying to DOS them and throttle or block you. why are you trying to steal megabytes of their data?
Obfuscating your code for the next developer to come.
I did that and tried all the links. Maybe it was because I was on my phone. I'm on a proper desktop system now, so I'll try again. Edit: Worked from desktop system.
Thanks, OP!
It could be useful for dynamically created objects with DI - using an ExpandoObject could be a way that you can add logging or other functions to a class where each class needs almost the same thing but not quite
You serialize a `List&lt;Config&gt;`, and that's the JSON you get. Then you try to deserialize to a `Config` class, while providing the JSON you got for the `List&lt;Config&gt;`. See the issue? You serialize a list, then try to deserialize the list-json to a single object. Either serialize a single object, or deserialize a list. Might also not to hurt to actually learn JSON and understand how it's build up. The `[]` in JSON mean it's a list/array of elements.
&gt; Could I add another class that just has a list of the Config class? Then you serialize a `List&lt;Config&gt;` and try to deserialize as a `ConfigWrapper`, while providing the JSON of a list of configs instead of a single config wrapper object. You serialize to a list, then you deserialize to a list. Deserialize to the same type you serialized.
Most 'creative' uses of dynamics in C# are going to be Very Bad Ideas.
Hey, What do you mean by stolen content? It is not stolen from anywhere. Try to test your own skills and write good quality programs.
Sounds more like each class just needs a different set of services, but all of them should have an ILogger?
Ok, I got it now. I didn't need to create and serialize a list. I just needed to serialize the object. When I did that, it now creates the file without the brackets (because there is just one instance of the Config class and that's all I need). Thanks for helping me think through this!
Look at the ViewBag in MVC Now never look at ViewBag again ExpandoObject is a terrible idea. We chose C# to avoid it's implications. Using it is directly contradicting the purpose of the language. 
I use with EdgeJs
There are several ways to do this. The most explicit way is with a message queue that contains an Action (e.g. lambda expression). You have one queue per thread, and other threads can queue actions by locking the queue and then adding the action to the queue. (I would abstract this of course). Each thread will have to explicitly empty the queue at some point (this is sometimes called a "message pump" model). If the target thread is a UI thread, much of this is implemented for you, and the background workers can invoke a method synchronously or asynchronously using a Dispatcher (in WPF) or with Control.Invoke (in winforms). For requests in the other direction (from UI thread to background worker) I suggest using the Task Asynchronous Pattern. I can't explain it briefly, but google is your friend here.
The problem: When X happens, I want to do Y. The solution: Z creates W, which has an event X. Z binds its event handler Y to X. Now W detects that X happens and notifies Z to do Y.
Just so you're aware, the messaging way of doing things isn't the "traditional" way but it's catching on. There's absolutely nothing stopping two threads calling *classes* from somewhere else, but you do have to watch out for two threads touching the same *variables*, that is the same instance of a class. You can new up a class inside a thread and do what the hell you want with it and it'll make no difference to the other thread, but if you're passing in a class to both then you need to use things like mutexes but if you're not careful with these it'll absolutely kill your performance.
First of all you don't need the threads anyway (they consume memory for a call stack not only scheduling time) and second I don't think work stealing means what you think it means. The thread will not be returned to the pool simply because it is waiting. That's not what work stealing is at all. In fact that's what async/await does which is what I was recommending.
For what I'm doing I was considering how to send info to a webserver too, this works perfectly fine I got it working how I needed it to thanks!
He stopped to read my code and made a giant text correcting me, some things misinterpreted by my horrible documentation and lack of explanation but I'm very happy with that, do whenever he want =D
[I would do it like this](http://pastebin.com/vjrtkCAP) The non-reflection method is fast but you need to watch out for copy paste errors to keep the variables consistent in the method call. The reflection method is about 50-150x slower on my machine than the non-reflection method. The reflection2 method is about 10-25x slower on my machine than the non-reflection method. I would suggest using the reflection2 method - get the fields from the object and dont give everyone headaches. If that is not possible then use the first method and keep the variable names consistent.
I once built a helper method that takes an object and spits it out in URL query string format. Not using dynamic (yet). Then one day we came across this thing that needed to create several URLs, most of which had the same common parameters and a few different ones. To do this I passed small anonymous objects to a different helper which would then turn the anonymous object into a dynamic, stick on the common parameters, and then send it to the URL builder to turn into a query string. That's the only time I've used dynamic to any good effect.
They are great for proving that the dynamic keyword works. Aside from that, they are just a slow dictionary.
You're not passing in a format provider, so parsing depends on the current culture which is probably not desired. I'd also go with returning a nullable instead of the default value, but I suppose that depends on the use case.
You want to look into Convert.ChangeType iirc Returning new default(T) instead of null is pretty poor manners. Null is null, just return null. Thinking about your problem. Probably a better solution is looking into a mapping library to splat the data from the message onto first class owned models.
I'm a big fan of Dapper myself, I've used it for quite a few projects and love the flexibility and performance it offers. You do need to be careful about SQL injection though. The last example method `public List&lt;Customer&gt; Get(int amount, string sort)` is vulnerable to a SQL injection attack. The `sort` parameter is pulled directly from the URL and passed directly to the repository which executes `return this._db.Query&lt;Customer&gt;("SELECT TOP "+ amount + " [CustomerID],[CustomerFirstName],[CustomerLastName],[IsActive] FROM [Customer] ORDER BY CustomerID " + sort).ToList();`. Some alternatives: 1. Have a boolean property that can toggle the sort direction and update the GetCustomers method signature to be something like `List&lt;Customer&gt; GetCustomers(int amount, bool sortAscending);` 2. Create a `SortDirection` enumeration and pass that to the GetCustomers method.
It also works amazing in conjunction with an auto-mocking container. I've had great success with Machine.Specifications and Machine.Fakes makes writing integration tests as frictionless as possible.
I feel like you're missing an extra layer of abstraction here with your data layer. Also, the method you're using is going to open up your API to SQL injection attacks and that's going to give you a bad time. It's good though for a small example of how easy Dapper is to use and implement. There is pretty much zero reason anyone should use Entity Framework except for large enterprise projects, and even then I'd question if it's really needed. The only thing EF has going for it is how good code first feels.
You're absolutely right, I did mean to just do a rough example, but I should probably revise that part of it. I actually haven't used URL methods like that in practice for quite some time, and didn't think about the string insertion there. Thanks, I'll change it. 
The thing is if it's a complex type new T() doesn't give you any assurances that *its* properties aren't all null. The problem you're attempting to solve is done with the C# 6 safe deference operator (**?.**) even if you're using VS2013 you can install a nuget package to get support. I don't know if it's valid for 2010 or NET4 offhand. Also you might need Resharper 9 or 10 for intellisense to understand C# 6.
I should have been more specific, I guess. This is almost exclusively used with primitive types where I'm not sure if the source object is null or not. Love the ?. operator by the way!
In that aspect you should make sure they're all nullables. You want the intent to be shown whether the data never existed vs the value is 0. Null and 0 are wildly different in meaning by using default(T) completely obscures this
I can't recommend anything in particular, but you may find what you're looking for under the term "carousel".
Immensely appreciated thank you! 
You can solve the problem of mistyping your SQL and also SQL injection with some simple unit tests.
&gt; It is an async function. It will spawn up a new thread `Task.Delay` uses a timer internally, it doesn't have to spawn a new thread.
You are wrong. Google "task delay new thread", first result, first question, first comment.
I'm assuming you're talking about [this SO question](http://stackoverflow.com/questions/21878050/does-task-delay-start-a-new-thread)? The question is misleading and that comment is wrong. It's not `Task.Delay` that's using threads, but the async method containing it (unless there is something wrong with the Mono implementation they tested it on). Obviously starting multiple async methods will use multiple threads, but that has nothing to do with `Task.Delay` or timers. The difference is that while `Task.Delay` is being awaited, the thread is returned to the thread pool and can be reused for other things, while `Thread.Sleep` will block the thread for the entire time. Compare the results of these two methods: const int Iterations = 1000; const int Delay = 1000; private async void TestTaskDelay() { var sw = Stopwatch.StartNew(); var tasks = new List&lt;Task&gt;(Iterations); for (int i = 0; i &lt;= Iterations; i++) tasks.Add(Task.Delay(Delay)); await Task.WhenAll(tasks); sw.Stop(); Debug.Print("Task.Delay: {0}ms", sw.ElapsedMilliseconds); } private async void TestThreadSleep() { var sw = Stopwatch.StartNew(); var tasks = new List&lt;Task&gt;(Iterations); for (int i = 0; i &lt;= Iterations; i++) tasks.Add(Task.Run(() =&gt; Thread.Sleep(Delay))); await Task.WhenAll(tasks); sw.Stop(); Debug.Print("Thread.Sleep: {0}ms", sw.ElapsedMilliseconds); }
That is unrelated to `Task.Delay` and is a concept with tasks in general. The execution will continue on an thread of the thread pool. `Task.Delay` itself will not create a new thread. It works internally with a timer, like /u/tweq already said. In that very StackOverflow post it is even written: &gt; So the answer is: Mono's impl. of (some) methods is not perfect. In general Task.Delay does not start a thread and even a lot of them should not create multiple threads.
You should take a look at some of the WPF tutorials by Jerry Nixon - he's one of the best - I say him at Tech Ed in Barcelona in 2014 and he build a fully working XAML clock in about 20 minutes. Although I can't find an example of the exact thing you're looking for, I bet you could take some of his examples, stitch them together and get somewhere near. [Here](http://blog.jerrynixon.com/2015/06/lets-code-build-custom-progress-ring-in.html) is a "progress ring" that might get you started....
Increase the font size, decrease the resolution and change the VS style to white/light background (it's nice working on a dark one, but watching it is not that pleasurable). Nonetheless, I found it interesting. :)
No, they're a horrible suggestion. If the value you're trying to extract is not expected to be nullable, returning a nullable simply introduces extra steps to coerce it back to a non-nullable. The problem with this is people think "Why bother?" and suddenly you're propagating nulls around your application and introducing bucket loads of null checks where there is absolutely no need for them. 
Agreed. It's not even that I might target different databases at once, I just don't like portions of my application logic to live in uncompiled strings.
Did you step through it to try and isolate the delay? The only way it's a UI thing is if the delay is between the last line and the UI updating. Otherwise, without knowing the scope of your data and events on the grid it's tough to solve. One quick and dirty way is to call begin update on the grid, set the source, and call end update after.
Is this forms or wpf?
Any good resources on getting into the messaging mindset?
NetMQ is based off of ZeroMQ, the documentation for that is 90% relevant and very good. It's an easy read as well, start there. 
Aaaand that's why I chose to just return the default value. 
:) 
&gt; Look at my code and tell me what's wrong with it Well, since you asked so nicely...
I am using Dapper and Web API 2 on a large project right now. One thing I do differently is have only one `Customer.cs` class that both Dapper uses and it returned by the Web API to callers. I don't see a need for duplicating the same POCOs, but nearly every example I come across does duplication. Any thoughts on this?
Agree for sure, but I was already pleasantly surprised the data wasn't directly queries from the controller, like the MS examples used to do.
I added a comment to the page about putting in some smarter interfaces and Generics for the repository pattern so that you don't need to write as much code for subsequent tables. Copying here so I can get some better formatting from it. I highly recommend a little more portability to your example (for adding more tables but writing less code): Change Customer.cs to: interface IDbEntityBase { int ID { get; set; } // Just ID is more generic, and less data over the wire bool IsActive { get; set; } } interface ICustomer : IDbEntityBase { // shorter names, less data over the wire, mobile customers will be happier string FirstName { get; set; } string LastName { get; set; } } class Customer : ICustomer { // Base Properties public int ID { get; set; } public bool IsActive { get; set; } // Customer Properties public string FirstName { get; set; } public string LastName { get; set; } } Change the Repository to Generics and remove the 'Customer' part of the name from it: internal interface IRepository&lt;TEntity&gt; where TEntity : class, IDbEntityBase, new() { IEnumerable&lt;TEntity&gt; GetList(int amount, string sort); TEntity GetSingle(int id); bool Insert(TEntity entity); bool Delete(int id); bool Update(TEntity entity); } // All we have to do for entity repository interfaces now is just one line (unless we are adding more methods) internal interface ICustomerRepository : IRepository&lt;Customer&gt; { } public class CustomerRepository : ICustomerRepository { public List&lt;Customer&gt; GetList(int amount, string sort) { throw new NotImplementedException(); } public Customer GetSingle(int id) { throw new NotImplementedException(); } public bool Insert(Customer entity) { throw new NotImplementedException(); } public bool Delete(int id) { throw new NotImplementedException(); } public bool Update(Customer entity) { throw new NotImplementedException(); } } The final act would be to take the contents of each of the above functions after written and put them into an abstract BaseRepository&lt;TEntity&gt; and supply the queries as string formats. So the CustomerRepository just has to provide a set of strings instead of rewriting the same get call with a different string each time. Add in the SQL Injection Attack protections others have mentioned and you would be in good shape.
Just to add to the above, in general delays and sleeps should be thought of "At least X milliseconds" but it could be any amount more, but it'll never be fewer.
Yeah it was me that asked about making a TryXXX or not, I opted with returning a result class instead with a bool to indicate success and then the actual type as a property. Similar to Nullable Value and HasValue
Thank you very much for the reply and the code example! This was a very helpful post.
Thanks for the correction. I didn't know this. Still feels very hacky, and not very readable, so would caution against it. But, technically it does work (not that I think it's a good idea).
Thanks!
&gt; also SQL injection with some simple unit tests. How do you find SQl injection vulnerabilities with simple unit tests?
Humanizr is a fantastic library.
&gt;From a solid design point of view, I think it's better to have an interface rather than virtual methods. &gt;1. Open closed principle is weakened because you allow subclasses to change existing classes through polymorphism, if you want that it's fine but it shouldn't be a side effect of making the code testable. If you want to use it in a test that shows it should be able to be tapped into. There should be multiple implementators of an interface. A myService : imyService shows bad application of the ISP of SOLID. &gt;2. You open the class to Liskov substitution violations Not really, aside from the new implementation throwing unhandled exceptions but you have no assurance any method won't throw. 
This is obvious :) I was asking though how are you specifically generating the test input, because simply testing against a ' and ; I don't think it's enough? AFAIK There are specialized libraries used to try find sql injections and I thought you use some of those to generate a larger test input? Even so, how can you be sure you tested all possible cases?
Oh, you can't unless you REALLY wanted to be entirely thorough. I'm talking about just simple little smoke tests to verify you've got your SQL parametrized properly and things like that. If you really want to protect yourself fully then definitely be looking at those specialized libraries you mentioned.
Looks ok to me although I haven't tried deleting one before. Pretty much only added. Only thing I notice is that you're not actually deleting the node after removing it. Dunno if that's necessary though. I'm not familiar with the keypassmanager though, so couldn't tell you if the Tag casting to Group is good or not. Are you experiencing any errors or problems with this code? Just showing your code and asking if it looks ok without mentioning if it's working or giving errors is odd. That's probably why you got downvoted although I didn't downvote you.
I made a button that pings in a do while loop (basic ping app with UI) but using await makes it hang if it times out
You should post your code so we can see what's going on with that. From what little you've described, you've probably just not handled the timeout properly. 
Thanks mate. Starred.
https://gist.github.com/anonymous/cca6976d703de1a5b548 
I don't understand the purpose. Is it for domain boundary types (or whatever they are called)? So like UI &lt;- Business &lt;- DAL? And instead of sharing one "User" POCO you remove unneeded properties as you go up the layers? To me that sounds bad, why not just use the conventional domain objects as in a type per layer and use mappers to map them?
ELI5 the difference between this and dynamic keyword?
I've actually used momentjs but I'm searching more for something that parses language into dates. It's for a web api middle tier.
Yeah I expected some fluctuation, maybe a few dozen mills off at max, but that was way outside the expected values. I did a rebuild and it worked normal after that. Might have just been a one-off from a high load. Idk. Thanks though! 
It's made a difference to me once. When you're talking about billions of things... shaving off *everything* helps. I had a project where after work it went from taking 4 days down to 3 hours. You never know what future project you may pick up... knowing things like this may not matter to you **now** but may end up saving you later in ways you may not have predicted. Again, this *one* thing is not likely to matter. This combined with others, however, may make all the difference in the world. A lot of "this one thing doesn't matter" adds up to a big thing that does matter.
In general, each class should go in its own file, named after the class. So if the class is "database" then the file should be "database.cs". 
i don't see a problem as long as you make sure that a node is selected (so that the SelectedNode isn't a null) and every node has proper Tag filled in edit: also, if it really is a tree, you might want to iterate through all the children of the selected node and handle the deletion yourself, otherwise their "KeyPassManager" group won't be removed
I think OP does know. It seems implied from the description.
To me, OP sounds like some Haskel guy going "See how stupid your toy language is?"
Dude, you take THIS personally? You should really get a thicker skin...
Why do you need a foreach for this? Can't you just use databinding instead?
Well, this haskell quick sort also sucks. Nice to read, bad performance (at least for longer lists and compared to an in-place swapping algorithm).
I would consider adding an overload for FormatProvider and one for a default return value. I disagree with suggestions that you should return a Nullable unless that specifically meets your design goal, but there may be times when the caller would want a different value than default(T) in case of null. (i.e. Default(DateTime) can't go into a SQL server date column, have to use 1753-1-1 or later)
Question for you - Is this API going to be a second project set along side my existing project in my solution or is it going to just be new files added to my current project? It kind of seems (I have no experience with this yet) that the API is a part of the project and just acts as an adapter to catch incoming commands and send them to the right place, rather than something that actually runs commands itself. Is that a correct way to look at it?
What is the nature of recursion in C# that makes it slow? The JIT can do tail call recursion even if the C# compiler doesn't - http://blogs.msdn.com/b/davbr/archive/2007/06/20/tail-call-jit-conditions.aspx
sounds like you shouldnt be using IIS to handle authentication unless you're using form authentication. 
You answered the question haha
This has nothing to do with recursion and everything to do with laziness and multiple enumerability of LINQ.
If I understood it correctly, you're trying to create a View to edit a profile, only saving the changes once the user accepts it, or discarding the changes completely if the user cancels it, am I correct? If that's the case, try creating a clone of the profile you're going to edit and sending the clone to the View / ViewModel that will edit it. Then you can decide what to do with this modified clone once the user takes some action (Save / Save As / Discard / etc). If your Profile is just a bunch of value fields (strings, ints), you can simply use [MemberwiseClone](https://msdn.microsoft.com/en-us/library/system.object.memberwiseclone%28v=vs.110%29.aspx), otherwise you'll have to implement some Deep Cloning method.
Yes, if the code you pasted is all you're doing, you're passing the profiles around by reference. The Dictionary is storing a bunch of pointers to the actual profiles, and you're just taking a particular pointer and passing it around. If you never do something like cloning the object, the pointer will always reference the same profile that you got from the dictionary. The keywords ``out`` and ``ref`` can only send *Value types as Reference types*, there is no way to do the contrary, passsing *Reference types as Value types* (that I know of). You need to create a whole new object if you don't want other people modifying your original one.
I use dynamic to interface with Excel in a desktop application and not have to use a RCW. I use a bit of good old fashioned COM/OLE, a sprinkling of Win32, to discover all running versions/instances, and then expose dynamic objects into the main C#. As the user selects stuff in Excel I'm dynamically updating data in the app, and I've got no Excel library references. Works like a charm. 
Thanks for the response. I'm still a bit new to c#, but I think I get what you are saying. How do I call the set of items from the list, instead of the single value? The total of each roll displays fine on the lisviewtbox, but I don't know how to select those items to determine the sum of each players rolls.
Look into using OWIN, focusing on implementing bearer tokens that expire. That should fit what you're looking for
In fairness, the convention is extremely dated and doesn't play nice with the rest of the language. It needs an `out` reference, so linq is really ugly, it can't be null-coalesced, and it's poorly chainable (because there's no singular return value). Though I agree that his solution causes more problems than it solves.
I need to be able to "ban" users, even those who are not registered. 
None of those existed in 2004. :) But I get your point. 
I understand all that, yes. Was drastically simplifying and skimming while in a car. 
hello! good point but I don't think so. If you got the opportunity to run the code inserting 10000, 100000 or 1000000 records you are going to see that the test results got a very linear growth at least in the faster methods. Of course it's always recommended to define a batch size to avoid increase your transaction log too much but I think the results are genuine
what? are you joking or something? :p if you mean outside of C# you could use bcp. 
&gt; I need to calculate the sum of the items from each list using LINQ Is this actually part of the assignment? I ask because this is pretty much the worst way I can think about accomplishing the task of simulating two people rolling dice 100 times and displaying the end results.
While this is nice, what about us on WPF that cannot currently move to UWP? Do I have to install the Blend SDK still? Edit: Accidentally a word...
Soon it will be frost cold. :0D Then it will hurt even more. That aside I agree. I will always prefer C# to Java.
best thing microsofts done in years imo
Hehe.. There are many thousands of methods in the standard libraries. 
I'll agree to that. I feel biased because C# is the one I know the best, but then I remember it's the one I learned the fastest. MS is doing a pretty good job at growing it to other platforms as well. 
For what it's worth I ran a modified version of your code (on a development VM on my laptop.) Thanks for sharing your code :) I added a test that uses a regular INSERT with a table valued parameter (to compare against the Stored Proc version) as it had relevance to my current project. I did 3 runs of each and took the average and the final run. My result are (consistently) different to yours regarding the Stored Proc vs SqlBulInsert object. Lies, damned lies, statistics and performance tests. Running with sample size 250,000 Iteration 0 3997.00 ms: InsertBulkCopy 1868.00 ms: InsertProcedureTransaction 1740.00 ms: InsertTvpTransaction 2643.00 ms: InsertXQueryProcedure Iteration 1 3088.00 ms: InsertBulkCopy 1854.00 ms: InsertProcedureTransaction 1873.00 ms: InsertTvpTransaction 2402.00 ms: InsertXQueryProcedure Iteration 2 3497.00 ms: InsertBulkCopy 1802.00 ms: InsertProcedureTransaction 1729.00 ms: InsertTvpTransaction 2367.00 ms: InsertXQueryProcedure Final Run. 3497.00 ms: InsertBulkCopy 1802.00 ms: InsertProcedureTransaction 1729.00 ms: InsertTvpTransaction 2367.00 ms: InsertXQueryProcedure Average Run. 3527.33 ms: InsertBulkCopy 1841.33 ms: InsertProcedureTransaction 1780.67 ms: InsertTvpTransaction 2470.67 ms: InsertXQueryProcedure 
I always wondered why professors have you program in notepad especially when the main thing students need to learn in there early years is how to properly debug. Things like syntax errors and debugging are a complete pain in the ass unless you have visual studio running. 
It would be better to develop your research and information gathering skills so you can find the methods that are relevant to your problem instead of trying to memorize a wide array of irrelevant ones.
Problem can be solved the same way with java 6
Why would you use .NET for embedded programming? (Other than just to see if you can of course)
Yes, generics is nice and now exists in other languages too (I think Java 1.7 or 1.8 added it and Swift borrows a lot from other languages like C# and I'm pretty sure it has it) but it's nothing compared to the awesomeness of async/await... The great thing about C# is that it's a mature language (it's been around for 15 years) that is still under development and new language features that make life easier (like null propagation in C# 6) are added all the time.
I'd go with an HTTP API unless you have performance requirements that can't be met with the additional overhead. It may seem like overkill, but the advantage is that a properly designed HTTP/JSON API can be consumed by basically every programming language and platform there is, can be scripted, is easily understood and debugged by most developers, and has wide tooling support available. It does however introduce possible security concerns if the API is sensitive and unauthenticated like [Trend Micro found out](https://code.google.com/p/google-security-research/issues/detail?id=693).
wait until you start using Linq and lambda. 
Both Java and C# are great, i use both of them
You're going with the wrong thought here.. When inheriting from a base class you want to add reusable attributes and methods so subclasses can simply extend those and work on them. An example using your line of thought: - class worker (generic) method getbonus(double money) If your subclasses getbonus will work differently you have to do an override of the original method and thats it.
Are you instanciating the main class at all? If you are not the dostuff should be contained on an interface so u can force custom implementation on classes that use it
You can't arbitrarily change parts of a method with inheritance, only override them completely with a new implementation. You can however call the base method in your overriding implementation. So you can do something like this: class Product { public virtual decimal CalculatePrice() { // ... } } class DiscountedProduct : Product { public override decimal CalculatePrice() { decimal basePrice = base.CalculatePrice(); decimal discountedPrice = basePrice * 0.9m; return discountedPrice; } } If that doesn't work for you, you can try to split your base method into more finely grained sub methods, but otherwise there is no way to change or extend an individual method.
becuase then you can do something like this, but then Employee is not needed, and the design is pretty bad imo: public class Person { protected string ssn = "444-55-6666"; protected string name = "John L. Malgraine"; public virtual void GetInfo(string someId = "") { Console.WriteLine("Name: {0}", name); Console.WriteLine("SSN: {0}", ssn); Console.WriteLine("Employee ID: {0}", someId); } } class Employee : Person { public string id = "ABC567EFG"; public override void GetInfo(string someId = "") { // Calling the base class GetInfo method: base.GetInfo(id); } } static void Main(string[] args) { Employee E = new Employee(); E.GetInfo(); Console.ReadLine(); }
Use an IoC container like Castle Windsor or Unity. You can then create an interface that will allow plugins to be created. If you need help I can point you in the right direction.
amazing functionality until its abused then its horrid. Especially when mixed with Entity Framework. 
I'd consider this: https://github.com/NancyFx/Nancy/wiki/Self-Hosting-Nancy
Yes, I'd also looked at Nancy and I've used it before. Is it acceptable/normal to self-host Nancy inside a desktop app (Not a command-line app)?
You can (ab)use private constructors and nested classes for that.
They'd have to write something to interact with your app. What kind of access will your API provide? What things do you want the third part user to be able to do?
Java 1.5 had generics.
Specifically, you're likely to want an ItemsControl for what you're asking. You might also consider if things like a DataGrid might be a better fit.
&gt; var x = obj == null? obj.prop1 == null ? obj.prop1.prop2 : null : null; A pox on you and your decedents if you regularly chained conditionals like that w/o parens for readability.
Okay that makes me feel better, at least I'm not the only one ;) This is more or less what I was leaning towards. Still not sure if it'll be Nancy over say Web API, they're both pretty solid choices and will achieve the same thing. Good luck!
I would never chain like that.
Nice!
You can self-host an MVC app inside a Winforms app?
What stops me from generating a UUID until I get a positive response?
I've only used Java in my Computer Science Classes, but I work in .NET, so I apologize if this is a dumb question. With the exception of using differently libraries, aren't they pretty much the same?
Realizing that there are &gt;340 billion billion billion billion UUIDs and give up:P
MVC is dated, 1973 iirc, but I get your point. I'm not a fan of it as a pattern, I've even seen people suggesting language changes to support inline parameter declaration of the out variable just to make the pattern more pretty. That all said though, it's still a commonly used convention, exists in multiple places in the framework. It's interesting that you bring up the linq aspect, because we already have conventions in place for something like tryParse in LinqLand which is the ...OrDefault naming. Which sort of feeds into what I'm saying about not stepping on established conventions. edit: Ultimately my goal is to have clean code where the intent is obvious. These are trivial little things that individually don't matter much, but their action is cumulative and dissonant. 
That would be messy. Why not Microsoft Message Queue? Your app could listen to events in the queue and act accordingly. That would be a small installation overhead for the client and would be very easy to implement.
I've always thought there was a serious lack of documentation and examples of AForge and Accord libs. At least on the computer vision side of things OpenCV has a number of examples and tutorials. 
I would also say everything they've done in recent years with Visual Studio has been amazing. Using nuget, supporting git, roslyn, etc. Microsoft today is not the company I grew up with. I was at Visual Studio Live in 2010, and they announced there they were going to stop making their own package manager and just further integrate with NuGet. I was shocked - Microsoft never "did wrong" and would always try to reinvent the wheel but it was the first vision I had of them starting their 180 into being an open source friendly company.
Too bad those are not in the new .Net Core. 
Nope.
I can't help but feel that Oracle holds it back. 
Unless you're trying to do modding in a game. We decided it's better to keep trash (old mod assemblies) in memory instead of trying to get AppDomains to work which would work horrendously slow in our use case anyway. (unofficial Terraria modding API, which is a C#/XNA (well, FNA now) game)
Ah! Didn't know this about Java! I guess you learn TWO new things every day! 
Sometimes. Usually classes are good enough though.
Yeah. I'm of the mindset that, if you're coding something and you yourself are finding it difficult to decipher then you're doing it wrong.
[Image](http://imgs.xkcd.com/comics/code_quality.png) [Mobile](http://m.xkcd.com/1513/) **Title:** Code Quality **Title-text:** I honestly didn't think you could even USE emoji in variable names. Or that there were so many different crying ones. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php/1513#Explanation) **Stats:** This comic has been referenced 65 times, representing 0.0650% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_d01yf7i)
Yes. Use your 'template' form as the base class for another. Create a new class file (newform.cs) then in the code, put: public class NewForm : MyTemplateForm This will then inherit from your existing form and have everything you need. You can then overload the functions to create a variation of that form
&gt; This is used with reflection so that I can search for values in any property in any type Is that not rather expensive? &gt; just using the string name of the property and having it as a generic method Sounds like a bit of a magic string to me, does this not bypass compile time error checking? instead hoping its all handled at run time instead? Each to their own I guess, I am just curious about your implementation. 
&gt; Does the .Net Core have MarshalByRefObject? As far as I know, it doesn't.
http://www.jinq.org/ I just briefly learned about it a few days ago. I haven't used it.
EDIT: Thank you for the delicious gold. In the early days of C#, there were a lot of similarities in idiomatic C# and Java. That was a long time ago, and even in the beginning, C# was still a bit different than Java. C# was invented in response (IIRC) to the Visual J++ legal battle between Sun and Microsoft: https://en.wikipedia.org/wiki/Visual_J%2B%2B Back then, Microsoft had very different leadership that made infamous the "Embrace, Extend, Extinguish" corporate strategy. Microsoft was hoping to use Visual J++ to eliminate Sun's control of Java by embracing the language, extending Java's ecosystem with proprietary tooling, and extinguishing the competition. Around 2002, J# was released, and was intended to help Developers transition from Java and J++ to the .NET platform. J# is one of the direct ancestors (again, IIRC) of C#. Here is some early MSDN documentation comparing and contrasting Java and C#: https://msdn.microsoft.com/en-us/library/ms836794.aspx Version 2.0 of the .NET platform offered a significant departure from any similarities to Java through .NET's introduction of reified generics (meaning, at compile, type information is preserved). Of course, there question of whether or not type erasure on the JVM is preferable to reification on .NET is still a subject for debate to this day. Personally, I prefer reification even if that means my generics may get compiled into multiple type-safe implementations with a bit of compile-time code duplication. Here is a great Stack Overflow question and answer about generics, type erasure, and reification: http://stackoverflow.com/questions/31876372/what-is-reification As noted in the answer, you can reify a generic yourself if you really want to: https://msdn.microsoft.com/en-us/library/ms131508(v=vs.110).aspx Personally, I've never used Type.MakeGenericType Method (Type[]) in any real world scenario.
Pretty sure I haven't. My workplace still uses MVC4 which isn't officially* supported by 2015. So I'm mostly still using 2013.
&gt;&gt;This is used with reflection so that I can search for values in any property in any type &gt;Is that not rather expensive? It's negligible, and with the amount of tables in our database it's much nicer to have than having to hard-code the LINQ statement for searching in every relevent field in every table &gt;&gt;just using the string name of the property and having it as a generic method &gt;Sounds like a bit of a magic string to me, does this not bypass compile time error checking? instead hoping its all handled at run time instead? The string is sent from the view (set using a drop-down next to the search box), or it is grabbed from the property name (or the attribute to override the name) using reflection if you're searching in all properties. We have substantial set of unit and integration test-cases to fire off against (fuck yes NUnit) so once it passes those we can safely assume it's safe. It works really well and is still much faster than the old system we're replacing (seriously, that one was awful). This solution allowed us to easily add more and more types that were on the database with ease and present a decent amount to our clients after every sprint. Reflection is crazy powerful if you know how to use it, and the fact that it can work with LINQ-to-Entities if used with Expression objects is wonderful. 
No that's not what I'm looking for. I don't want to have the reference as an argument in the constructor of B. Instead I would like to access it in the scope of the class A.
Would you have any recommendations for a good library with good examples/tutorials?
Huh, I heard about Prism but didn't know it was a complete library! Well, looks like I understand at lot less about MVVM than I thought I did... I'll be sure to check out their implementations!
Here is an in depth article talking about some cool stuff you can do with dynamics in C# https://github.com/amirrajan/Oak/wiki/gemini-deep-dive 
If the string doesn't match a property the query won't return anything for that property. If you're searching in that column only then your query will be empty. We're considering building the DataColumn viewmodel dynamically at runtime with reflection but at this moment we don't have any issue with malformed strings. We'd love to use nameof() but we don't currently have the ability to use C#6
No, the new approach that they're pushing is separate processes. At least based on what they write in the various issue threads. Dynamic code loading in .Net Core is actually not great at the moment. They're adding in some of the missing functionality but killing off a lot of the stuff from .Net that helped with that. I find some of the changes rather annoying actually. Even people like David Fowler seem not that pleased with some of the changes based on the issue threads that I'm following.
So basically [Dynamic Linq](http://dynamiclinq.azurewebsites.net/)?
Breaking `a.b.c` up into `a.b` and `b.c` reduces the coupling of the call site to the class A because it removes the assumption that the implementation `a.b` is pure. assuming `obj` is a fixed variable (a parameter or a local) //1: var x = obj == null? obj.prop1 == null ? obj.prop1.prop2 : null : null; //2: var prop1 = obj == null ? obj.prop1 : null; var x = prop1 == null ? prop1.prop2 : null; 1 of those is more coupled to the design of the class of which obj is an instance than the other: the former can throw a null reference exception while the latter cannot. This is due to the fact that you are calling the getter `prop1` twice and coupling to the assumption that it will return the same value. 
It is the same as a web API. The only difference is that you run the "webserver" locally as part of you application. I would sugest you build a REST-API ontop of it (using - as suggested - HTTP and JSON together) [NancyFx](http://nancyfx.org/) offers a simple way to do this. 
I actually noticed the repetition since I started in MVVM WPF and was looking for some easier way to implement it. So far I've found [PostSharp](https://www.postsharp.net/model/inotifypropertychanged) (Which seems to be overkill just for implementing one simple thing) and [Kind of Magic](https://github.com/demigor/kindofmagic), but I wanted to keep this project *'pure'*... So, looks like the abstract class is the way to go, thanks for the suggestion!
Pretty much, but it's relatively more bespoke to our system, has a different syntax (method call that returns the LambdaExpression that can then be passed into IQueryable.Where()), supports searching for the value in all fields in the type (using .Aggregate() to Expression.OrElse the queries together, then returns the Expression), and has attributes for overriding the property name (useful for searching properties in foreign objects) and ignoring of properties as well. I had looked at Dynamic LINQ when researching it but there was just something I didn't like about how to use it, and I knew how to do it myself so I effectively built the same thing with some differences that had a syntax I preferred.
These days, I've been going back and brushing up on Java EE. Honestly, I don't mind writing Java. I find that the verbosity makes me want to be really careful in how I design my classes. Though, for me, the Automatic Properties in C# 3.0 (the auto getter and setter) make me want to run screaming back to C# anytime I write Java for fun or profit. There are a lot of corporate clients with large Java EE code bases, and I don't mind selling my time as a consultant.
&gt; This is why I think it's a bad feature, I never wanted to those chains of ternary conditionals, but now the null propagation operator only serves to make the same bad design decision less blatantly visible. While you can avoid calling a.b.c most of the time with careful design of your libraries, you cannot do it over time with interfaces in C# because adding methods and properties to interfaces is a breaking change. I am OK with dotty code IF the intermediate members are only used once. Since the null prop operator enables more code to do this, I think it is good.
Java 8 Streams API does a lot of what you would use linq for (functional primitives basically). `map`, `flatmap`, `foreach`, `filter`, etc.. LINQ is definitely still the stronger API, but having used both a lot, I don't feel handicapped with Java compared to C#. The real win in C# over Java, in my opinion, is generics.
There is no non-deprecated way* of avoiding a trillion if's or similar, but you should look at CancellationToken and CancellationTokenSource classes. They are a unified cooperative cancellation system. *) Using Thread.Abort is the deprecated way, but it's really not a good idea. Might also be missing from .net core, not sure.
What you're doing isn't particularly bad, it's actually pretty standard, but there are a few things you could do, I'll suggest one: public class ChatCommandManager { private Dictionary&lt;string, ChatCommand&gt; _commands; //your constructor whatever... public bool AddCommand(ChatCommand c) { if(_commands.ContainsKey(c.Key)) { return false; } else { _commands.Add(c.Key, c); return true; } } public RetType /*could just be bool if you're not looking for a returned val*/ TryExecuteCommand(string key, ClientType clientType, OtherTypes otherType, out bool executed) { if(_commands.ContainsKey(key)) { executed = true; return this._commands[key].ExecuteCommand(clientType, otherType); } executed = false; return null; } } public class ChatCommand { private Func&lt;ClientType, OtherTypes, RetType&gt; _funkyFunc; public ChatCommand(string key, Func&lt;ClientType, OtherTypes, RetType&gt; function) { this.Key = key; this._funkyFunc = function; } public String Key { get; private set; } public RetType ExecuteCommand(ClientType clientType, OtherTypes otherTypes) { return this._funkyFunc(clientType, otherTypes); } } There's some more work to be done but you should get the general idea. You can then simply use it like this: var manager = new ChatCommandManager(); manager.AddCommand(new ChatCommand("HELP", someFuncThatMatchesTheRequiredSig)); And then in your switch if you detect a command, just do this: if(isCommand) { bool exec; var ret = manager.TryExecuteCommand(cmd, theClient, args, out exec); if(exec) { //the command was successful } } If you're adding an insane amount of commands you might run into an issue *maybe* with too large of a list but at that point you could branch out and do some cool stuff with database queries and dynamic loading of modules, etc. Another thing you could do is have the browser interpret the command before it hits the server, and translate it into a request and play with an [APIController](https://msdn.microsoft.com/en-us/library/system.web.http.apicontroller\(v=vs.118\).aspx) which might be better if you're doing primarily web based stuff and you're going to do a lot of commands. Edit: After thinking about it and reading your post again, the MVC4 ApiController stuff is definitely the more scale-able and maintainable options assuming you're referring to a server receiving the command. If you mean that the client app is getting this information I would stay with the approach outlined above.
Was writing C# and JS last week. Writing VBA in Access this week. Yea, modern programming languages are the balls!
If you make a dictionary of type string, type, then you can fill the dictionary with the type of each class for each command. That turns the "find the right command" code into like 3 lines - fetch type from dictionary, instantiate type, run instance. Or alternatively a dictionary of string, Action&lt;&gt; That will save you a lot, because so much of the switch is going to be repetitive. Also, it will let you break the different groups of commands into multiple population functions which will improve readability, and let you work with subsets of commands for testing. 
I tried that. Finally, I learned I had to build the MyTemplateForm first before extending it to the other GUI
How long does it take to run your function? The default timeout on a web request is generally 30 seconds, so that would be my first guess
Isn't this solution the same in Java?
I hope you don't write code where so many objects can legally have a value of null. Also please initialize types that have a constructor (i.e. non-literals) in the class constructor.
Needs more jQuery
I keep meaning to have a peek at F#, but the syntax scares me :P (Too used to C# after ~12 years with it).
I didn't time it, so I'll check. It's just odd that the download manager (of all things) is what opened up
The short version? Just compare `source.Select(x =&gt; f(x)).ToList()` with `source.stream().map(x -&gt; f(x)).collect(Collectors.toList())`.
Being verbose is typical of Java =P. Is there anything besides the verbosity though? I'm not too familiar with the difference.
Yea that's true but functionally you wind up with the same result. So you chain one extra method call - big deal.
But C# did them right. 
It's not. Sure, type erasure does make things worse, but streams are still pretty bad even if you ignore that. For example, have a look at [this comparison](http://blog.informatech.cr/2013/03/24/java-streams-preview-vs-net-linq/), whose results are very unfavorable towards streams. (It seems to be based on pre-release version, but based on my limited experience, the released version is not any better.)
Thanks so much for your response, it's a lot to absorb. I might have to read it several times to understand that fully. I forgot to mention that the program itself is just a client which connects to the chat server (i have no control of the server-side). I'll add that to my original post. I have one question though - From what I understand, I would replace my classes with custom functions - is this the preferred way? One class with its executable function as a field vs. many classes with its executable function as an overriden, inherited class func. Typing this out though really helps me to see why your idea may be (I'm pretty sure it is) better. I've toyed with the idea of having more ChatModules so I can enable/disable commands on demand and I also wanted to save commands in .xml files so I'm able to distribute modules more easily. I've got only a few months of experience in C# but your post helped me a lot (probably more than you could think). Thanks again for your time
No problem, What you would do is simply make a "wrapper" class that contains two things, the string command and a Func. Func is a C# type available, it represents a function that returns a value. If you don't need to return anything just use an Action. Then you have one final class that basically holds all those other little classes (objects really) in a dictionary which lets you get them by string key. Make sense? You probably wouldn't need to subclass anything like this either which can be a good thing. Let me know if you need more clarification 
I think I'm getting the hang of it! I'll try to implement the stuff you recommended and will update the post later (might be a few days). Thanks again! :))
Yes. Discussions on C# generics started before Java but Java took the shortcut.
I'll take a look at those, thank you!
How do you think that would work?
You mean that feature that doesn't work unless your grunt/gulp file is in the root of your project?
Who held it back before oracle bought it?
Sun Microsystems.
Not supported? You can't as easily generate controllers and views and such, but an MVC4 project does run on VS2015, and if you're only maintaining it, it shouldn't be that big of a problem.
I think the biggest impact on Streams comes from the fact that the Iterable interface sucks. Therefore you need to get in stream mode and exit stream mode while .NET LINQ is simply compatible with foreach and every collection type out there.
In Visual Studio in general, or in nUnit?
Well, there's a reason Sun got bought.
Exactly, and that's why generics in C# are wonderful, but generics in Java are like, “Everything is an Object, but let's pretend for a moment that we know the specific type”.
Protip: there's a really nice pattern for reducing nesting. Write a function for some piece of functionality and whose first line is a check to see if the functionality should be done if(!doThisCondition) return; It's a really nice way to remove nesting and maintain control of your algorithm.
This doesn't answer my question about streams vs linq at all =P
I cannot say the examples in that article would push me to one particular language vs the other. The Java samples are simply a different API to do essentially the same things. LINQ (specifically C#5 language spec section 7.16) has 3 distinct advantages over streams: 1. It is not tied to a datatype. It is merely a set of patterns for method signatures that relate several types together at a syntax level to the compiler. 2. Thanks to extension methods, the underlying types don't actually even need to provide these method signatures themselves. 3. Thanks to the fact that (as of today fairly simple; interesting future potentials [here](https://github.com/bartdesmet/ExpressionFutures/blob/master/CSharpExpressions/README.md)) lambda expression syntax can be compiled to either anonymous methods or expression trees (section 6.5), authors get limited introspection for no additional syntax costs. Java streams don't seem to be integrated to the underlying language in the way that LINQ is. In so doing, C# reduces the necessary cognitive load a coder might find themselves under when switching from a set of methods dealing with an enumerable set vs some higher order paradigm where the same syntax gets compiled to objects useful for querying a database or performing some operation on an xml file, or operating a [MediaWiki API](https://github.com/svick/LINQ-to-Wiki). ^(Assuming you are the same svick over on github, I suspect you already know these things, but other readers here may not; I think your MediaWiki project is one of the strongest arguments possible for LINQ usage over some equivalent Java codebase.)
So, you don't use any features in Javascript then. *ba dum ching* Although, same rule applies to JS.
Oh yeah it's so cool the freaking intellisense slows it down so much it causes typing mistakes. Doesn't create the brackets very efficiently and they get in the way. As soon as you declare a variable it complains that you don't use it and screams error as your typing out code. WHAT A PAIN IN THE ASS C# IS!
Update I.E.?
Ok. I just installed Mono. On this code: let rec fft dir zs = if Array.length zs &gt; 1 then let n = Array.length zs in let zs1 = Array.init (n / 2) (fun i -&gt; zs.[2*i]) let zs2 = Array.init (n / 2) (fun i -&gt; zs.[2*i + 1]) fft dir zs1 fft dir zs2 let s = dir * 2.0 * System.Math.PI for k=0 to n/2 - 1 do let t = s * float k / float n let z1 = zs1.[k] let z2 = zs2.[k] * System.Numerics.Complex(cos t, sin t) zs.[k] &lt;- z1 + z2 zs.[k + n/2] &lt;- z1 - z2 let zs = Array.init 1048576 (fun x -&gt; System.Numerics.Complex(float x, float x)) do let timer = System.Diagnostics.Stopwatch.StartNew() fft 1.0 zs printfn "%d-vector FFT in %fs" zs.Length timer.Elapsed.TotalSeconds Mono takes 1.35s and .NET takes 0.79s. 
It's using IE
&gt; Update I.E. 
Use a property with a private variable backing, private bool _shouldContinue; public bool ShouldContinue { set { if ( value == false ) throw new Exception("Exiting Function"); else _shouldContinue = value; } get { return _shouldContinue; } } in the setter you can have it exit the method when it is set to false (ShouldStop) by throwing a custom Exception (StoppingException). Where the function is being called, wrap the call in a try catch that only catches that custom exception and then continue on from there with the parent function. EDIT: Added crapply formatted code EDIT: I contradict my code EDIT: Formatted code
I think I'm missing something. IE 11 is on my rig, but I'm trying to use the embedded webbrowser toolbox that you can throw into a Form, and that one seems to emulate IE7 thus Google telling me to update my browser.
You could also try using another mapping provider (Bing, OpenStreetMaps, etc.) and see if they don't check for a specific browser or version.
What version of Visual Studio are you running?
Maybe try stackoverflow, seems like it should work if you have all of the latest patches and are running the latest version of visual studio.
RenderSection is a function. The first parameter is the name of the section it's going to render. If section "content" is defined, (there should only be one section with that specific name) that's the only one that will be called. As for the second one, that's really easy to check in Visual Studio in seconds, it's neither of your guesses. Edit: Here's a link for [visual studio 2015 Community](https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx) and even quicker for checks like this, [C#Pad](http://csharppad.com/) which you can just type it into the browser.
I understand the issue but currently unable to find a nice solution, thanks for spelling it out though! 
http://stackoverflow.com/ Sign up, create a post, and someone should be able to help. Be sure to include as much detail as possible.
Thanks a lot for the response. It has been a week since I unistalled Visual Studio. Is there any faster way to try the code or I have to reinstall it?
They have to, otherwise they will fade away in the web and mobile era.
Well *need* is a strong word - I could just copy-paste the singleton Instance code into ScreenController but I'm using Singleton in other places so would rather not have multiple copies of the same code kicking around.
Thank you very much, I'll be doing that.
You can go with the API method. I just created the helper to simplify the call.
Check my edit, must not have pushed it through in time.
By default IE embedded in the WebBrowser control falls back to IE 7 Compatibility Mode. I'm not in a good place to look this up now (airport bar) but googlefu for the registry setting necessary to have IE behave in the correct rendering mode for your application. If you're still stuck tomorrow, message me. Edit: Googled up the answer I was referring to. Rick Strahl to the rescue! https://weblog.west-wind.com/posts/2011/May/21/Web-Browser-Control-Specifying-the-IE-Version
Basically, for the instance property to be able to return differently typed instances, it needs to be differentiated into multiple independent types via the generic parameter. But at the same time you don't want them to be different types so you can store them together in a list. There is no way to do both at once. You could remove the singleton behavior from the type hierarchy and move it to a separate container class or use some sort of IoC pattern. 
I know man , but I don't know if there is another way to explain it... Anyways thanks for trying to help me.
Welll ... I *could* store them together by doing List&lt;object&gt; but then the question remains how to iterate over those as they'll be different types. I guess I could just hard code a typeof check vs. all the known subclasses but ... seems inelegant and I started down this road as a way to learn something new. 
I use this same kind of logic to update a table in SQL where I work. The property is a string and its new value is used in a stored procedure that updates a tracer field that allows the front end (internal website) to keep the visual ui updated throughout any active connections.
Yeah, also I am pretty sure none of the answers for question 2 would output anything. They all define a variable and then never use it. Man I'm happy to be done with school
[Awesomium .Net](https://awesomium.codeplex.com/)
That is literally an IE browser hosted in a hwnd. Has nothing to do with C#. You probably need to set the rendering mode somehow.
I'll try to figure it out, was thinking that someone already came across something like this inhere 
I agree, I was assuming it was speaking of a single view with a layout page. It's really ambiguous. I figured it was a translation issue, since the question asks for "the chance", which I don't understand as anything but a percentage.
Man, I'd love to use the conditional property accessor, but I...just...can't...get my head around how/when to use it. I normally need to check for null when fetching an EF entity and transforming it into a ViewModel: var myPersonViewModel = entities.Persons .Where(p =&gt; p.Person_ID == personID) .Select(p =&gt; new PersonViewModel { ID = p.Person_ID, FirstName = p.First_Name, LastName = p.Last_Name, Email = !String.IsNullOrEmpty(p.Email) ? p.Email : "(None") }) .FirstOrDefault&lt;Person&gt;(); So how would I assign myPersonViewModel.Email if I want to check for null (as above) using the conditional accessor? ....if you don't mind....
I think the easier way to do this is via a meta tag. something like &lt;meta http-equiv="x-ua-compatible" content="IE=edge" &gt; might do it if you throw it in the html of the page rendering the google map
http://stackoverflow.com/questions/17922308/use-latest-version-of-ie-in-webbrowser-control https://msdn.microsoft.com/en-us/library/ee330730(VS.85).aspx#browser_emulation Seems like you have to add your .exe in the regedit to have access to IE11 instead of 7.
Even better: `source.Select(f).ToList()`
Careful with this, exceptions should be your last resort and only used when under normal circumstances they aren't expected to be thrown. They are very expensive: http://stackoverflow.com/questions/729379/why-not-use-exceptions-as-regular-flow-of-control That being said, the code "if true, return", enclosed in a try/finally block might suffice. That way you'll always do code on exit and it won't be as performance intensive as an exception.
If you go this route, by storing them in a List&lt;object&gt;, you can let LINQ take care of the typing for you. Example: using System.Collections.Generic; using System.Linq; List&lt;object&gt; myObjects = new List&lt;object&gt;(); // ... Add some objects to myObjects foreach(var typeAObj in myObjects.OfType&lt;TypeA&gt;()) { // ... Do stuff with typeAObj } foreach(var typeBObj in myObjects.OfType&lt;TypeB&gt;()) { // ... Do stuff with typeBObj } // ... etc. That will make your code cleaner, since you no longer have to do type checking, as LINQ will do that for you. However, this is bad code smell. If you are using generics, they should be generic. If you are doing type checking when working with generics, you should split the code into separate classes that know how to deal with the particular objects you need to work with. If I were you, I'd just implement the singleton pattern in each class that needs it for the following reasons: * It isn't a behavior of the object hierarchy. It is a design pattern, it doesn't have anything to do with the semantics of your objects. * It is easily implemented with very little code. * It seems like the easiest solution to your problem.
Hi there - thanks for the answer ... I hadn't thought of using LINQ like that. Clever but, as you say, smells off! I'm slowly resigning myself to duplicating code but still hoping for a smarter solution! 
That's all VS man. Get some Resharper in there and fix it right up.
Thanks for helping! That just makes it show up in the VS Solution Explorer (so you can edit it) though, it doesn't actually reference the files or anything.
The problem is not seeing the value of a single property. The problem is seeing the full object initialization. And then there is the problem with exceptions.
Now that I think about it, I'm pretty sure what you're doing is not allowed in the first place. The project.json file is a single thing and you can't split its properties among multiple files like that as far as I know. You're not supposed to. It handles all platforms in a single file. Why are you doing what you're doing instead of specifying multiple frameworks in the same file? { "dependencies": { "Shims.Xaml": "1.8.0" }, "frameworks": { "net45": { "frameworkAssemblies": { "WindowsBase": "4.0.0.0" } }, ".NETPortable,Version=v4.6,Profile=Profile32": { } } } *Edit:* Well I re-read your SO post and saw the comment at the bottom. What you need is for each project.json in the platform-specific directories to contain all relevant data. That means the dependencies section. Though really I think you need to find out more about the error message you had. What you're trying to do instead here doesn't seem supported.
I've used [GreatMaps.Net](https://greatmaps.codeplex.com/) successfully for a program at work. Unless you need to use a web browser, I would highly recommend using one of the various Google Map libraries.
I'm confused, but I'm rather new with the new Core 1 stuff. How is there a project.json file along with a *.csproj file?
One thing might be to separate the command and the execution of that command. Instead of stuffing everything into event args the command itself, possibly with a lot more context, would be transferred to to class executing the command.
It's pretty easy to do that actually, [CoreFX](https://github.com/dotnet/corefx/tree/master/src/Microsoft.Win32.Registry/src) does it for example. You just have to click *Class Library (Portable)* in VS and make sure ASP.NET Core is one of your target platforms, and then a csproj and `project.json` are generated for you.
Neat.
Java 8 Streams is also equivalent to LINQ To Objects since Java does not support expression trees.
I can solve it with stones and an infinity of time 
Code formatted as plain text makes me sad. 
I agree for the most part, though pattern matching already exists in (the very alpha) C#7. I think my biggest gripe is that this list is its own independant domain rather than on roslyn's github page.
On the enums: &gt; "Going further - if you want to create some kind of a bit flags, you have to implement &amp; and | operators yourself... " I don't think this is true, you can use the [Flags] attribute and I believe it defines them as powers of two which can be bitwise manipulated. I've written C# for embedded devices with plenty of bitflags. Either [Flags] did it or I just defined them as powers of two myself, but the operators work out of the box.
Yeah. Using Flags makes it easy to do bitwise operations. The author probably does not know of it. Too bad Disqus is down (at least on this site). The way Java handles enums is also great and totally should be implemented in C#. Although I would prefer it as a separate feature and not call it enum. Just so anybody can choose what they want.
What problem have you noticed?
The purpose of the list is to find the most elegant/roboust solutions to those problems. C#7 may or may not remove some of them. They are going to still be there in earlier versions.
The *existence* of mutable classes in the standard library makes you sad? That's absurd.
The most common use case I can think of is when you have a navigation property and you're unsure whether or not it's set. So to adopt your example: var myPersonViewModel = entities.Persons .Where(p =&gt; p.Person_ID == personID) .Select(p =&gt; new PersonViewModel { ID = p.Person_ID, FirstName = p.First_Name, LastName = p.Last_Name, Email = p.SystemUser?.Email ?? string.Empty }).FirstOrDefault(); 
if your stuck with java have a look at Kotlin https://kotlinlang.org/
https://msdn.microsoft.com/library/ms752914%28v=vs.100%29.aspx
But there is a CLR language for that... F#. We don't need every possible language feature ever in one package. Add to that the fact that you can call F# from C# and vice versa, and the need to provide a functional paradigm for c# goes down even more. If you simply must have immutability in c# then write classes that inherit from Tuple&lt;&gt;.
Wait, does C# not have anonymous types? Because I swear I've used them...
Judging a language based on criticisms that appeared &gt;10 years after its release is rather misleading. Also, don't forget that a language is useless unless it is used widely; academic ideas are great, but unless you can convince many programmers to adopt them, your language will forever remain in its niche. (e.g. Haskell)
Oracle has [a patent](https://www.google.com/patents/US7263687) on Java enums.
Ever tried to implement method inside? Anonymous value types, anonymous methods. Not anonymous classes. Notice the difference
Check out Scala'. Functional and OO programming in one package. Looks pretty cool, but is not as popular as it should be. ' JVM or compiled to JS AFAIK, no .NET version currently maintained
That's why I said "There is no non-deprecated way* of avoiding a trillion if's or similar" :)
That's identical to what OP already proposed. It's fine, although it should be a CancellationToken instead, which is minimal effort to use.
But do use a CancellationToken. Checking a boolean is not necessarilly correct behavior when multiple threads are involved.
I really like C# to be honest! These notes should be considered a satire, a food for thought, a puzzle or whatever you like, but not a really strong criticism :). BTW C#(and whole .NET) has been improved very much in the last 10 years
&gt; No way to declare immutable local variable I'm not quite understanding what you're trying to say there. C# has the ability to create constants within a method scope, and has had for a good while now: public void DoSomeStuff() { const int immutableInteger = 5; ... }
It's not doing that for me, also on my phone 
Indeed, you judge a language by it's peers. What I meant by "gaining traction" was that these ideas are moving from niche and academic languages (of which Haskell might be an example) and into languages such as Swift and Rust which are gaining real-world interest and marketshare. Since when writing e.g. iPhone apps you might have a real choice between Xamarin &amp; C# or Swift, they are in a real sense peers that you might have to judge and make a choice between. 
ForEach was an example, think about some Map/Reduce operations. We are forced to use something like that (it is indeed a code smell ;]), or create extension method for that. Why not by default? Stream-like processing looks pretty cool for most string manipulations, filtering and grouping algorithms.
Why should I not consider Scala as a peer?
I like Scala but holy shit it gets complicated. Also it's handling of nulls makes me sad. I feel like Kotlin is probably the better language these days.
Well, do what you enjoy :) 
Please don't assume that I *don't* "consider Scala as a peer". I don't know much about Scala so I didn't mention it either way. Perhaps you're better placed to write a positive comment about scala.
I'm trying to think of a reasonable use case where this would ever be needed in real life. Not succeeding.
Your comment reeks of no advises.
Is the website meant to look like it was created in notepad using "My first HTML web page" as a guide?
It is free Ghost theme. Can you propose any better? 
Try to imagine that you are scrolling some code and you see some foreaches, TryGetValues and null checks. Is it really more readable than the method chain that I've proposed? The truth is NOT. That's why functional languages are gaining popularity in recent time (although I'm not a big fan of functional languages at all - I like the OOP and its abstraction). Something is new, later it's a standard, and after that it's old. Don't see a point here. C#6 is going to be widely used in the very near future.
Yea, I think to follow what MVC does, you need that additional hidden field for proper binding: https://stackoverflow.com/questions/2697299/asp-net-mvc-why-is-html-checkbox-generating-an-additional-hidden-input I know that SO question is from 5 years ago - but since my codebases are legacy, it applied. There might be something new I don't know about. Looking back at the project where I had a tough time with all this, I ended up pushing as much as I could to the server-side. I know you're using jquery for a reason, but if you end up frustrated - there's a library called [MVC Checkbox List For](http://mvccbl.com/) that's helped me. I also like to use [Editor Templates](https://msdn.microsoft.com/en-us/library/system.web.mvc.html.editorextensions.editorfor.aspx) when I'm looping and generating an html table with form in my View, just found it's easier to work with that way.
Dependecy properties, which are only available in WPF, provide two features that C# properties don't provide: they're observable and inheritable. Inheritable means that if they are not assigned a value then they can inherit their value from a containing parent. So, for example, a panel in a window can inherit any undefined values from the window itself. Observable means that they implement the Observer pattern, so that two or more properties can share changes using WPF's data binding. [This link](https://msdn.microsoft.com/en-us/library/ms752914%28v=vs.100%29.aspx) goes into more detail.
Under the covers a property is two methods. The set is a takes a single parameter of the property type and returns a value of the same type. The get takes no parameters and returns a value of the property type. The most simple properties just store the value of the property in a class variable. A dependency property is exposed exactly the same way a regular property is. From that perspective, it's exactly the same. You can set or get the value of the property anywhere it's in scope. What's different is the way the value is tracked behind the class property. Here's a simple dependency property example: public static readonly DependencyProperty FooProperty = DependencyProperty.Register("Foo", typeof(Bar), new PropertyMetadata()); public Bar Foo { get { return (Bar)FooProperty.GetValue(this); } set { FooProperty.SetValue(this, value); } } You can see we have public property called `Foo`. If this wasn't a dependency property we might define it like this: private Bar _foo; public Bar Foo { get { return _foo; } set { _foo = value; } } The difference between these two implementations is what's behind the property. Externally, they appear the same, just a property called `Foo` of type `Bar` with a public get and set. It only gets different once you're inside the property. For the dependency property, instead of holding the value in private class variable of type of `Bar`, we're holding it in a public static class variable of type `DependencyProperty`. That variable, `FooProperty` is shared between all instances of whatever class this property belongs to. It's only initialized once the first time that class gets referenced (it's a bit more complicated than that, but that's out of the scope of this discussion). When that class is referenced, a static instance of `DependencyProperty` gets initialized with the parameters we passed in to the static `Register` method. Those variables tell the `DependencyProperty` instance that it's responsible for a property named `Foo` of type `Bar`. The last parameter (`new PropertyMetadata()`) describes some additional aspects of this properties behavior, which in this case is nothing special, just the default behavior. When you want to get the value of the property you just ask the static instance of backing variable, `FooProperty`, to give you the value of that property for specific instance of the owner class (in the `get`: `FooProperty.GetValue(this)`). Because the backing variable is static, that one instance is keeping track of the value of that variable for all instances of the owner class. Perhaps it's in a dictionary like this `Dictionary&lt;object, object&gt;` where the key is object instance and the value is the property value. That's an implementation detail you don't have to be worried about though, it's all handled inside the `DependencyProperty` class. The set works just about the same way except you have pass the desired value in to the `SetValue` method. Everything that makes a dependency property special happens inside the `DependencyProperty` class, which is just a class like any other. It has some methods and properties (which you can see [here](https://msdn.microsoft.com/en-us/library/System.Windows.DependencyProperty%28v=vs.110%29.aspx) if you're curious). The ones we're using are `Register`, `GetValue` and `SetValue`. When you call these methods they do things. The `SetValue` is probably the one that matters most for your run of the mill dependency property. When you call that method, it not only updates the stored value of that property, but it fires off events that let other things know the value has changed. I assume you're encountering these in the context of WPF. The significance of the dependency properties in WPF is that they can set a `{binding}` against their value. You only really need to do this when you're doing things like adding properties to a custom control that you want to be exposed to databinding. You generally don't need dependency properties on your view model, just `INotifiyPropertyChanged` is enough. Now at runtime an instance `Binding` can hooked to an instance of `DependencyProperty` that belongs to a particular `DependencyObject`. All these classes work together to make changing the state of your view model effect changes in the state of your control (or more generally, some `DependencyObject`). Unless you're making your own controls, you probably don't need to fuss with dependency properties much.
If your stream-like processing requires on knowing the object's data type (`List&lt;T&gt;`) rather than operating on the `IEnumerable` or `IList` interfaces, that's a code smell. And once it uses `IEnumerable`, OrderBy is the standard and not difficult to use at all.
i have scrapped the visual studio idea im doing command prompt and ive also hit a brick wall on that System.Diagnostics.Process process = new System.Diagnostics.Process(); process.StartInfo.WorkingDirectory = "c:\\"; process.StartInfo.UseShellExecute = false; process.StartInfo.FileName = "cmd.exe"; process.StartInfo.Arguments = "/c dir"; process.StartInfo.CreateNoWindow = true; process.StartInfo.RedirectStandardInput = true; process.StartInfo.RedirectStandardOutput = true; process.StartInfo.RedirectStandardError = true; process.Start(); string output = process.StandardOutput.ReadToEnd(); process.Close(); richTextBox1.Text = output; when i press the button it gives me another form but not showing the cmd prompt 
I've use the following code that runs at regular intervals to get my .net applications the appearance of using less memory. Running OptimizeMemoryUsage in a background thread every minute for example. private void OptimizeMemoryUsage() { while (true) { try { LogWriter.Instance.Info("Clearing/Flushing memory"); FlushMemory(); MinimizeFootprint(); } catch (Exception ex) { LogWriter.Instance.Error(ex.ToString()); } finally { System.Threading.Thread.Sleep(60000); } } } [DllImport("KERNEL32.DLL", EntryPoint = "SetProcessWorkingSetSize", SetLastError = true, CallingConvention = CallingConvention.StdCall)] static extern bool SetProcessWorkingSetSize32(IntPtr pProcess, int dwMinimumWorkingSetSize, int dwMaximumWorkingSetSize); [DllImport("KERNEL32.DLL", EntryPoint = "SetProcessWorkingSetSize", SetLastError = true, CallingConvention = CallingConvention.StdCall)] static extern bool SetProcessWorkingSetSize64(IntPtr pProcess, long dwMinimumWorkingSetSize, long dwMaximumWorkingSetSize); private void FlushMemory() { GC.Collect(2, GCCollectionMode.Forced); GC.WaitForPendingFinalizers(); if (Environment.OSVersion.Platform == PlatformID.Win32NT) { if (IntPtr.Size == 8) { SetProcessWorkingSetSize64(System.Diagnostics.Process.GetCurrentProcess().Handle, -1, -1); } else { SetProcessWorkingSetSize32(System.Diagnostics.Process.GetCurrentProcess().Handle, -1, -1); } } } [DllImport("psapi.dll")] static extern int EmptyWorkingSet(IntPtr hwProc); private void MinimizeFootprint() { using (var proc = Process.GetCurrentProcess()) { EmptyWorkingSet(proc.Handle); } }
Actually, that's a bummer that we can't pass those errors somehow in 'alternative error path'. In some functional languages it is possible. Sad thing it is not in C# ;) 
i just looked it up and to be honest i have some idea of what its doing 
Why was this down-voted? Looks like a good article on the topic to me.
I'm not sure what you're posting this in a C# related subreddit. This sounds like psychological issues and is completely unrelated to coding. Did you consider consulting a doctor and making a therapy?
Yeah, you're right as I said I wasn't sure if I just defined them as powers of two, and now that I remember that is what I did [Flags] didn't do much. As far as the value cast... well if you want to treat them like flags, you need values that aren't the explicitly defined to be allowed. In Java, enums have some advantages. Although often the fact they can be null still bothers me, bitwise operations do not work for enums in Java, at least not as straightforward as .NET, because they are just like classes that have defined constant instances of itself.
If there are multiple file openings then yeah, but if it's just the one then I would wrap it in a try catch
Also, could you tell us what your end goal is? Why do you want to launch some external process?
Nothing prevents you from doing the same in your C# code. Nothing.
Immutability costs more performance in many (and most) cases. That's not a trade-off I'd be willing to take.
This is 100% my own experiences but I think programming as a profession and hobby *can* indeed have real, negative impacts on your life. Similar to how a football player can experience chronic head trauma, or a police officer can get shot, or perhaps someone who works retail could develop back/knee problems... everything has a consequence. Programming is a new, exciting, and fruitful career path and I think we are just beginning to understand the potential ramifications of programming for your entire life. Certain side-effects of sitting at your computer all day can be exacerbated by psychological or physiological issues. Now I think this is a real concern for many people and there is really nothing 'weird' or 'shameful' about it. With the correct preventative measures I think you can feel better about your heath. You should probably see a doctor or at least some family members regarding your issue(s), but here are some key points to help you get better: * **Scheduled, daily physical activity** - committing to a daily routine involving some form of physical activity (15 min - 1 hr) will improve every aspect of your life, guaranteed, plain-and-simple - there are endless studies and anecdotal accounts proving this - this is perhaps the first and most important step to being a balanced and happy programmer * **Getting going is the hardest part** - my personal experience is that when I sit down and want to start programming, the first 15 minutes of work is the most difficult - after that I become engaged and interested. I don't really have advice here except to say that I think it is normal to feel this way - just remember that it gets easier to feel motivated as you engage in your work. * **Own your work** - This one is a bit philosophical, but how you view your project can have an impact on how you work on it. For example, say I'm contracted to create some software 'prototype' but I disagree with the details of the implementation. Perhaps my superior has unrealistic expectations, doesn't understand the limitations of the platform, etc. I have two choices: think of myself as the victim and feel pity for myself as I dread working on this project; OR see this as a challenge and opportunity to make this project MUCH better than it would have been if I would not have been involved. This is the kind of thing that builds self-confidence. Anyways, that's all I have time for right now. Best of luck. 
Looks like you can check the Windows Registry. From [this link](http://www.tenforums.com/tutorials/18273-quiet-hours-turn-off-windows-10-a.html): Registry Key: HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Notifications\Settings Registry Value (DWORD): NOC_GLOBAL_SETTING_TOASTS_ENABLED Possible Values: 0 = Off; (delete DWORD) = On ----- Not sure what it means by 'delete DWORD' = On. You will have to experiment with it.
okay my end goal is a multi application gui 5 buttons that does 5 different things i have to code a notepad, pic viewer, calculator, web browser and a choice of my own and i really hate gui i prefer console applications and just typing and coding over designing and dragging and dropping 
That's still not a very clear description of what you want to do. Can you expand on what the purpose of this program is, instead of telling me what it does? Are you making a program that just launches a bunch of other programs? Are you supposed to be writing your own version of those types of programs? Can you give me a couple paragraphs of what you're trying to do and I'll try to help direct you? &gt; okay my end goal is a multi application gui 5 buttons that does 5 different things i have to code a notepad, pic viewer, calculator, web browser and a choice of my own "i have to code a notepad" Does that mean that you have to write your own version of notepad in addition to this program that has 5 buttons? Or does that mean that your 5-button program just needs to launch notepad.exe that comes with windows itself? Again, try to be precise and verbose with your description - and please, write with complete sentences and punctuation so that your meaning is clear.
yes i have to code everything like i have to do a save, copy paste everything just like it would be on all programs i have 5 buttons connecting to 5 forms that are for each different application or program A main form which acts as a control panel to access all the other forms. You must include menu controls as well as button / panel controls. Also include a main Title label. A Web Browser form. A Picture Viewer form A Basic Calculator form which includes addition, subtraction, multiplication and division functions. A Simple Word processor form which includes the ability to open and save text files. The user most also be able to modify font type and font colour. An About Form. Another Form which displays a project of your own choice. does this help?
Don't be daunted by UIs; code is code. It's just a different model that comes with some interesting rules. I know that console apps are sometimes easier to develop, but UI apps can provide a lot more information to the user in a much quicker way than a console app. Can't show pictures or video in a console app :) Is there anything more you need help with?
WPF and all other XAML-based platforms.
all of it really like im not asking for anyone to do it for me i just dont like the clicking into everything and all that and id much rather learn from it than have someone do it all 
&gt; can be magically run not "is run" ;) &gt;How do I tell GetStringAsync that I don't want to resume... You can tell anything using a standard old constructor parameter. Not parameter with a default value. That's an explicit declaration that you want something from the dev
How much are you willing to pay for a testable and less error-prone code?
Sorry, I am afraid that I am still missing your point. Let's consider again the simple library example: public class MyAsyncLibrary { public async Task&lt;string&gt; WebsiteSays(Uri uri) { var client = new HttpClient(); var result = await client.GetStringAsync(uri).ConfigureAwait(false); return String.Format("Website says: {0}", result); } } When you say "constructor parameter" which constructor are you referring to? MyAsyncLibrary's constructor? HttpClient? Something else?
Start with removing the static `LoggerFactory` class. It makes it impossible to test code that uses this logger.
...not a free book, book hasnt been released. 
It sure is free once it is released. Just letting programmers know about the book to help them learn Golang.
Here you explicitly declared that somebody HAVE TO provide a Uri to the method. It's explicit and required. ConfigureAwait method may or may not be used. public Task(bool continueOnCapturedContext) is explicit declaration that programmer is committed making a decision whether the task should or shouldn't continue on captured context.
OK, so it works best when working with navigation properties. If I'm just probing whether a simple (String, in the case of Email) model property is null, I can't use it. But if the property is actually a *navigation* property (i.e., a foreign key entity), this accessor works. Is that right?
What other xaml-capable platforms/languages are there? I guess it's neither VB.net or asp.net?
The conditional accessor is a dot operator that checks whether the left operand is null. If so, it returns null, and if not, it returns the right operand. It's simply the equivalent of: var z = x == null ? null : x.y; //equivalent to var z = x?.y; In the case of a simple type, you're not trying to access a property, so you would either just assign it or null check and assign a default value using a ternary or null coalesce. In your case, since you're trying to check if it's null or empty and then assigning string.Empty if so, you could simply use the null coalesce: string empty = string.Empty; string nullstring = null; private string InitString(str) =&gt; str ?? string.Empty; InitString(empty); //result: "" InitString(nullstring); //result: ""
Everyone is wired a little different. I sometimes open projects and stare at code without writing any also. Although my reason isn't because of depression, mine is more like I feel like I HAVE to code and I'd rather just WANT to, almost like a rejection of authority. Anyway, what motivates me to be productive is learning. So I try to learn while applying it to my project and this makes it more fun for me again. For example, while refactoring code I read Adaptive Code via C# (http://www.amazon.com/gp/aw/d/0735683204/ref=mp_s_a_1_2?qid=1455751696&amp;sr=8-2&amp;pi=SY200_QL40&amp;keywords=c+design+patterns) and I used what I learned to make my code base more modular and extensible. Similarly, if I need to do some front-end work I might try to learn a new client-side framework like Backbone or Angular.
Create classes to represent the structure of each of your tables ("DTO" classes), and pass that object to your Insert method.
I am a very careful person. Often have fear to do something stupid and people lose all confidence into my person. I am coding for a few years now and for me it helped to do a real project but in a smaller scope. Let's say we have this huge application and you are part of a team. Everyone is super easy coding complex tasks and you get a "simple" task to implement some text streaming. so instead off diving into the real world build a console application and read a self written sample text. Nothing can happen here, you can't damage anything and you do useful things. And like many others told: try to be open minded to your colleagues. Where I work we can talk about these problems and help each other. But the first step is to ask for help.
It means that the default value is on. And to disable it you would need to add the specific key value.
This happens to me a lot (every 6 months or so) when I'm trying to push myself too far mentally. I usually focus on other extracurricular activities, like reading or going for walks or something. After a week or two, I'm usually back at it. Once, it took three months of not coding outside of work. Sometimes it helps me to just pick up whatever the new language of the day is.
WPF is desktop Windows only. XAML covers a larger set: UWP (Windows 10 Store), WinRT, Silverlight. I'm probably forgetting a few, but those are the big ones. Edit: Xamarin Forms
Thnx!
Task doesn't not know anything about continuations and synchronization contexts, it is simply the representation of an asynchronous operation. You can *await* a Task because it exposes a GetAwaiter method, which is then used by the compiler to work it's magic. Read [await anything](http://blogs.msdn.com/b/pfxteam/archive/2011/01/13/10115642.aspx) by Stephen Toub to get a better idea on how *await*ing works. Even if you could construct a Task as you suggested (so that it would return a preconfigured awaiter from GetAwaiter) most of the times you are *await*ing on tasks created by some method and not creating the task yourself. What would you suggest then? That each method that returns Task also must take a parameter that specifies whether to resume on the original context or not and pass that parameter down the chain until it reaches some code that creates the task? And what if somebody forgets to add that parameter to their method?
Use the assembly resolve event acquire the unknown type https://msdn.microsoft.com/en-us/library/system.appdomain.assemblyresolve(v=vs.110).aspx
What kind of application is this? 
Why do you just a for loop and not a foreach? I'm on my phone so bad formatting, sorry. Foreach (var parameter in Model.Parameters) { Httml. Checkbox(parameter.checkbox) } Or the name of your property. I'd use a list over an array for your parameters, personally 
Just use an anonymous function and a helper class that wraps it.
I agree with this. I feel it comes in waves. Sometimes I find the work very rewarding and engaging, and other times I have a hard time getting motivated. I am currently experiencing a lack of motivation similar to OP, but I know in a week or two, I'll bounce back, and become productive again for a while. I just try to get as much done during my "up" time, so that everything balances out in the long run.
What is the question, I'm not understanding it completely. Can you post the full assignment too?
No
Nah. Looking for help, not answers.
Looks like each of the methods take in a value that is the denomination if their respective methods. If you look at 3c it calls each of them with the correct number of coins to divide evenly. So, each method would have its own denominator. 25 for quarters, 10 for dimes, etc. Divide the value you are passed by the denominator, and aside at the total number of coins your given for that denomination. Increment your local storage of the change machines 4 respective coin properties accordingly. Passing in 1.25 to the quarter method would be a result of 5. Then just Quarterproperty +=5;
Yes, but the assembly must be known on the server side. You can't pass an *assembly* across, only a reference.
You can pass a `byte[]` across, from which you then can load the assembly in the assembly resolve event.
What is the general view on custom attributes? Part of my job is to maintain a legacy code base (a vb.net application we converted to c#). The previous developer used custom attributes and, from this experience, I am not a huge fan. However, I am not sure if it is because of custom attributes or because of how this developer used them. 
ConfigureAwait is a method defined on the Task class, so with no problem that parameter could be moved to the constructor. &gt;what if somebody forgets to add that parameter to their method? Compilation error! (the best error we can have) &gt;method that returns Task also must take a parameter That is indeed an issue! Probably could be specified in method documentation/use something library-wise as default.
And exacly this solution is proposed in the blog post, right?
I know it is, that wasn't my point. And yes, thank god that feature didn't make it in.
Yes, it creates one form for all reference types and one for each value type.
I like the concept, but I think this would be better served as an extension to the `where T : ...` clause. And while we're at it, can we get some support for something like `where T : enum` and allow the usage of operators inside the specialized method/class? Being able to do something like this would be incredible: bool[] GetBits&lt;T&gt;( T n ) where T : byte, sbyte, short, ushort ... { const int Size = sizeof( T ) * 8; var bits = new bool[Size]; for( var i = 0; i &lt; Size; ++i ) bits[i] = ( n &amp; ( 1 &lt;&lt; i ) ) != 0; return bits; } I know it's a trivial example, given that `BitArray` already exists, but the point is to illustrate the usage of operators. Generics are great, but they're a far-cry from templates (à la D or C++).
This is definitely going against the grain of C#. You could make a single Solve(...) function that returns a list of objects and then cast them after. You could also put in a ReturnType() method that returns the Type of the solution you are returning. TL;DR Polymorphism is probably the way to go but you are fighting the C# type system.
I feel like you have been a huge negative Nancy with a titty twist of condascending lately. Are you all good homie? He posted it here to get an outlook from the people that live a similar life. The truth from the posted answers here are far better then any shrink could provide cause the answers are truthful and inciteful.
Based on what the page says, it seems like you'll want to have some sort of decimal-friendly input, since it specifies a dollar amount will be given. You'll most likely want to first concert that to cents by multiplying and then casting to some type of integer, then divide by the value that one coin is worth, and add that to whatever is already stored in the object. If you're having trouble visualizing the code, it might help to write out the math and then convert that to code. Here's a similar problem for a kitchen: &gt; add a method that will incriment the number of servings of peas you have available given the number of bags you are adding. One serving is five ounces and a full bag contains 40 ounces of peas. So, one step at a time. Be ready to handle inputs like (2.5 bags) or (6.75 bags) 1. Input = bags 2. Ounces = input x (40 oz/bag) 3. Servings = ounces ÷ (5 oz/serving) 4. Total = servings + (servings I already had available) Now that the math is done, convert that into code.
&gt; However if that struct does have a parameterless constructor Roslyn will emit a constructor call instead. Yeah, I was actually wondering if it would do that. If those were used more (from VB or whatever langage allows them), it would seem problematic that people in general probably don't understand the difference between `new Struct()` and `default(Struct)`.
Isn't this almost the exact same idea as the Pattern Matching proposal?
It's simply spot on with a clear direction he should go. Nothing someone here writes will help him unless he takes care of it himself and gets the professional help he requires. No bullshit comforting words.
Have you tried using generics to solve this?
By the looks of it, you do need generics. And then, things would end up quite easy. But yeah, generics can be a bit overwhelming for someone new to c#.
Why not measure and see for yourself? That said, this is really bad. You're mixing concerns. You're very tightly coupling your business logic to your data access. Your "main code" should be in a service layer that handles the imperative tasks of retrieving and saving the entity from the context and delegates the business logic to the entity (using your domain models as persistence models is another discussion). If you need to manipulate other entities as part of the same transaction then your car service can hold a reference to the services that manipulate that other entity as well.
Yeah. I checked my code. What I'm doing in mine is I'm using a bool? MyField, so I can have it start as null, and then I've got a bool MyFieldCheckbox in the outgoing model. When it comes back, I set the bool? MyField to be the value of MyFieldCheckbox. This way the view doesn't have to mess with the bool? at all. If you're using a straight bool though, it should work. I'm not sure why it would come back as "on". I mean, it's not like Microsoft totally forgot to deal with checkboxes when they wrote code to handle the model to view and back. Are you trying to handle the form data in your javascript yourself?
I'm not quite sure I fully understand your criticism, but the "main code" in the example I gave is not like how the actual project I'm working on is structured. In the real thing, all the partial class extensions are very simple data accesses or insertions that I do frequently across the project and only want to change in one place, and the logic is elsewhere (other projects). I'm just trying to gauge what the industry standard is: to take the context from the caller or make a new one. I probably should have tested it myself but I'm quite new to c# and I'd be worried there could be more going on behind the numbers of my probably poorly written test.
You shouldn't be testing logging anyway. Logging is best effort, if you need reliability it should be a dedicated component. 
&gt;Could it be that I am using jquery to add a parameter? Might be. What happens if you do it with the regular generation code? Try comparing the html code from both. It's probably something small.
Hm... [according to MS](https://msdn.microsoft.com/en-us/library/ms229006\(v=vs.110\).aspx) they differ from ordinary methods by their **intents**, especially: &gt; Property getters should be simple operations [...] If I dig to use recursion inside a property, is it still a *simple* access method? Of course recursive solutions can be extremly elegant - but C# isn't a language which favours recusion anyways (no tail call optimization)... Besides that, my above given example is always senseless - couldn't the compiler catch this error anyway?
Good to know, thanks! :-)
/u/kyalo40 is correct, you could do one function for Solve(object) and be good to go.
I was just discussing this with a colleague the other day. I agree with you that it becomes very difficult very quickly for a compiler (or runtime) to determine in the general case whether a method will stop or recurse... I can also confirm that (at least in the case I hit a week ago) it was not easy to debug - although that may have been due to my environment... Running monodroid on Android (standard Xamarin setup), the process reliably quit at a certain moment, and gave no clues as to why (no exceptions thrown, very little stack trace). I suspect this may be due (in part) to an assumption by the debugger that I'm not interested in the stack trace inside *default* property getters and setters as there's not a lot of value to those in a regular stack trace. Worse, it did it whenever I debugged too, as the debugger encountered my object with the recursive properties and quickly blew up. Each time it did it, I ended up with a false positive to investigate. It took me quite some time to find the mistake.
This is just wrong. DBContext should typically be used throughout the scope for a single business unit of work. (multiple db unit of work) One common pattern is to create a DBContext for every API or MVC call and wrap a using and pass the scope down the call tree. That said, performance of creating and disposing context is very good until you get into contexts that define hundreds of tables. 
Aaaaah I understand now. Thank you, I can definitely see how that structure would make it a lot more resilient to change. Sorry again, I'm both new to c# and the industry so I'm pretty terrible when it comes to architecture decisions.
Resharper will warn you in this case.
This is probably the best solid advice. May I add, however you feel every day, no matter how depressed, you should try to do something, no matter how small, that you really like and gives you hope. For an example, do a game dev tutorial, if you're into this thing, and no matter how small and insignificant the tutorial seems, just do it, finish it and give praise to yourself for this. If you do this every day, soon you'll have a reason to get up from your bed more easily. I'm in the same situation like you, I just try to do things every day that give me hope, that one day I'll be able to be a game dev let's say and do stuff that I like for living. Hope it helps.
Seems interesting. How would that work for generic specialization, though? My proposal is having an *existing* generic type and narrowing it down to further criteria. Your function can only be called with a concrete type (e.g. `GetBits&lt;int&gt;`) or from a generic function with the same constraints.
Yes, actually. The point of this proposal is not so much to speed up the JIT, but introduce a cleaner syntax for generic specialization and integration with the compiler (e.g. being able to infer the type of T within a `static if` block). That said, it *could* speed up the JIT in cases like `U : T` as opposed to `typeof(T).IsAssignableFrom(typeof(U))`, since the latter calls a method at runtime and (I don't think) is optimized by RyuJIT.
Visual Studio 2015 SP1 has a C# interactive window. It is not enabled by default, but if you look for it in the Windows menu, it is there.
Unfortunately, it appears there's a possibility they'll bring it back again: https://github.com/dotnet/roslyn/issues/8677
Forgive me if I'm wrong, but wasn't that feature pulled from C# 6 though? How could the compiler at Try Roslyn have that feature if it never made it into the language?
So basically it's the old "var o = a as Foo; if( o != null ) { }" trick, only applying directly on the type placeholder. I kind of like it because "as" can't target structs, "a" might be null to start with but you still need to do something type-specific, and sometimes you don't start off with an instance at all. I think the tricky part will come from making it work exactly like normal generics without introducing additional method headers, which could break reflection-dependent applications. 
I just got that google interview challenge thing from looking this up. Thanks lol PS 10/10 name
I've heard that phrase a lot "If you do it this way and you ever switched X to Y it will be easier" - how often does the later happen? "... switched X to Y" I'm still in favor of the model you're describing because it makes it far easier to maintain the code and understand where what happens but that argument as to why it should be done seems ... weird. It's almost like saying "You should sit near the door in the airplane because if you ever need to get out quickly due to a crash landing it will be easier" - it's just not a remotely common occurrence :)
Parametrized queries makes the values being inserted non-executable by themselves. So they can throw in whatever tricky things they want, and nothing will be done with them.
Capital letter what? Normally public members should be capitalized, including fields (they are not called variables), and private members should be lower case.
Why don't you just use dependency injection? You can just inject the context into your services and you are good to go. 
Take a look at all the static methods in the int class. Need be, look them up on msdn. One is what you are looking for.
https://xkcd.com/327/
[Image](http://imgs.xkcd.com/comics/exploits_of_a_mom.png) [Mobile](http://m.xkcd.com/327/) **Title:** Exploits of a Mom **Title-text:** Her daughter is named Help I'm trapped in a driver's license factory. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php/327#Explanation) **Stats:** This comic has been referenced 1142 times, representing 1.1389% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_d0502zs)
You could have your controller in your API take a string as a parameter and check to make sure the string equals a certain value, and if it doesn't, return a forbidden 403. Of course, if someone is watching the traffic between the automation scheduler and your web server they can get the string value if you don't use a secured connection. Just to make sure, you want it to take commands from anonymous users, you just want to make sure that not everyone can run it, right?
&gt; For one, it can't interact with live application so you can't use it as a debugging aid. Wouldn't you use "immediate" for that use case?
Yes, but 'immediate' is not as powerful as the new repl
int.TryParse() returns true if the conversion from string to integer was successful. If it isn't successful your code will enter the else block. Perhaps you should output something like "Invalid input, enter a number"
It's actually a bit if a hack to get around paying for a full azure site (with continuous uptime. If I had that I'd just set this on a timer) Azure offers a scheduler that can call an API and offer credentials. I want that to call my API that's running the report and sending it out each night. I have the logic of the reporting taken care of. When I run the project (this porion hasn't been pushed yet, so its all local) I can navigate to port:43000(orwhatever)/API/reporting and seconds later I received every email I should... Except I shouldn't, because I'm not logged in. I have the entire project behind a login (asp.net identity 2.0) with an auth attribute in (I think) the filterconfig.cs file that comes with an MVC 5 template with identity. You can't go anywhere in the site without logging in first...but, for whatever reason, this doesn't apply to the API controller. It doesn't display a webpage, since there's no view hooked to it (it eventually either 404s or IE closes, the download manager opens and freezes except for the close button...its weird. None of this effects the code running correctly - emails still come, unless you close ie - that can sometimes cut it short in a specific spot). The API controller runs regardless of if I'm logged in, who I'm logged in as, anything else...if I go to that page, it runs. And fuck you for trying to stop me! Lol. I'm not sure what I'm doing wrong. It'd be one thing if it wasn't sending when it should. But to send when it *shouldn't* is weird. Not often you over implement and can't reel it back in
Attributes are (except for ones mostly used by the compiler/internally) nothing more than glorified labels you can stick on classes, members, values, etc. They can not be used to rewrite or add to code currently except with the use of a third-party IL-rewriting lib like [PostSharp](https://www.postsharp.net/) or [Fody](https://github.com/Fody/Fody); or more recently by implementing [ICompilerModule](http://www.inversionofcontrol.co.uk/meta-programming-with-roslyn-on-aspnet-vnext/), but that's with Roslyn only, which I doubt Unity is using. You could consider using reflection to discover all fields/types/whatever marked with your custom attribute at runtime and doing something with them, but remember: You can't rewrite anything this way... Well, not without altering it and moving it in to another AppDomain, but by this point you may as well just write an IL-rewriter compiler hook yourself.
Hmm, someone who knows more maths than me will be able to comment on the actual code. However, I am not too sure about having the actual mathematical symbols in the code like that. Seeing something like: Σa = z; Instead of: sigmaA = z; Is kind of weird. I can't make up my mind on it. I guess it's because historically with Unicode/UTF not being around that this sort of thing wasn't possible until relatively recently.
Not yet, I'll look into it, cheers.
I don't really know what I'm looking at with being a beginner pretty much, but why can't you just do: if(typeof(blah)) or something? And why the static keyword? The static keyword is already used for different things, making a field shared across instances, making a method accessible even without making an instance of the class it's in, and the new static using thing in C# 6.
Might have guessed colarado would be ahead of the curve. Good luck with treatment. Sounds like they aren't letting stupid laws get in the way of effective treatment. Hope u get a project that inspires u soon. Mine was getting thrown in the deep end with Intellij and java when really I'm a c# dev.. All the best mate. G
Yeah, mine was not a good example at all. I'm rather grasping at straws for a practical purpose to recursion in getters or setters. I can't really think of anything. 
&gt; Capital letter what? Normally public members should be capitalized, including fields (they are not called variables), and private members should be lower case. If I'm making a property the field it adjusts almost always isn't public and the property is capitalized.
Unless for some reason I do want a recursive property... This is clearly an absurd example, but it should work: private int foo; public int Foo { get { if(foo % 4 = 0) { return foo; } else { foo--; return Foo; } } } Properties can be recursive because they're methods and methods need to be able to be recursive. It's not caught by the compiler for the same reason this isn't caught by the compiler: int Method() { return Method(); } It expects the programmer knows what he's doing.
The project I am currently working on (a chat bot), the user cannot enter anything into the database for the most part. Only one query uses user input, so what I'm rather asking is if there's any purpose to parameterizing if the end-user has no way to affect the query.
i can't imagine it being quicker for anyone to type out Σ versus sigma.
Off the top of my head, it sounds like you *do* want a Material class, one that has properties like you mention, but also others like brittleness (high for crystal, low for others), flammability (high for wood, low for others) and so forth, where specific instances of the Material class would represent wood, iron, etc. Unless your wood had to have custom behavior, then it's a subclass of Material. Since this is all you, you can roll up any property you think of up to the base Material class. If other people were going to use your class, you'd have to think harder about where to put properties in the hierarchy.
yes you can www.Nusbio.net
I like it. How I get started?
The feature of adding parameterless constructors was removed. C# still has to handle structs that already has them correctly, and it does.
Why? It's a useful feature. Think about the following type: public struct Ratio { public int Numerator { get; } public int Denominator { get; } public static explicit operator double(Ratio ratio) { return ratio.Numerator / (double) ratio.Denominator; } } `new Ratio()` will cause this immutable type to cast a `DivisionByZeroException`. It could instead return `0 / 1` which is a more useful value.
&gt; Properties can be recursive because they're methods and methods need to be able to be recursive. It's not caught by the compiler for the same reason this isn't caught by the compiler: int Method() { return Method(); } &gt;It expects the programmer knows what he's doing. Properties clearly differs from methods; it starts with the syntax and ends with the **intention** when they should be used and how they shoud be designed. So even if they are technically translated into methods, they are special anyways. So i would argue that this is sufficient to justify further restrictions upon them. Your example differs a lot from mine! The name of a method differ in most cases from a field name, so it will seldomly lead to this code based upon typo or accidently wrong autocompletion choice. For a public simple getter property this is totally *different*! class Foo { private readonly object bar // ↓ Easy to misspell! public object Bar { get { return bar; } } } The above is quite a common pattern, isn't it? So it is easy to shoot in your foot here. I am totally relaxed about the fact, that properties principally allow recusion; but this special case, which is a quite **common idiom** when coding in C# could - and imho should - be treated differently. If the compiler is the wrong place, why not integrate this as an Intellisense warning? Should be easy to do...
I use a code template/snippet to create both the field for a property and the property itself so I avoid this potential problem - then modify the property as needed after putting in the snippet. It's impossible to fill this template/snippet out in such a way that it doesn't cause a compiler error if you are to make the above error. private $type$ $fieldName$; public $type$ $propertyName$ { get { return $fieldName$; } set { $fieldName$ = value; } } Frankly there are lots of runtime errors that coders can make that the compiler could catch but doesn't - this is because they are almost all special cases which should be avoided by the programmer. I'm not saying I disagree with you that it's frustrating when there's potential for typos causing runtime errors - I just don't necessarily agree the compiler should be hunting them down for you. Download this: https://visualstudiogallery.msdn.microsoft.com/B08B0375-139E-41D7-AF9B-FAEE50F68392 If you're working in MonoDevelop it already has an easy way to create code templates. Visual Studio is a bit more annoying without a plugin. C# is easy-mode compared to C++ with these kind of errors. For example you can return an int from a bool function and it will return 1 no matter what int you return unless you return 0. I spent 5 hours one day doing tons of online research trying to solve a problem caused by me accidentally labeling my method as returning a "bool" instead of "int." Programming is partially learning to roll with these punches. I thought I just didn't know how to use the API when I had accidentally returned a bool instead of an int. So, believe me, it's not like I don't understand your frustration with some of these programmer errors that the compiler doesn't check for. My error didn't even give me a runtime exception - it just kept running like normal so I didn't even have a clue where to start looking for the problem. EDIT: Sorry, it looks like you're experienced with other programming languages - I'm not meaning to talk down to you. This just sounded like something that a more beginner would complain about and most others would be used to. You talk about C++ in your other comments so I assume you know already about the kinds of errors it doesn't catch for you.
I did this in Unity. It crashed completely and my screen went black for a couple of seconds. It's hard debugging this since Unity does not catch this.
Yes I am quite experienced ;-) But it's ok; I do not feel being offended by you - and after all: this is a discussion platform, isn't it :-D The template idea sounds nice - I will give that a try!
&gt; I couldn't think of an alternative solution that would have generated any near as few instructions to even bother testing. As I stated allready, recursions often lead to elegant and small code; but a non recursive solution often adds not much more code. The main problem resides within the limited amount of hardware stack - if you run into a stack overflow with a legal input, you don't really have a *solution* for a problem ;-) Perhaps your solution is fine - I can#t judge that and I don't have interest to do so ;-) &gt; What exactly do you mean by a 'stack like container'? [Stack](https://en.wikipedia.org/wiki/Stack_\(abstract_data_type\)) [Stack in C#](https://msdn.microsoft.com/en-us/library/3278tedw\(v=vs.110\).aspx) One can often use a stack to eleminate recursion - in the end that is just an alternative to what recursion does: using the internal call stack.
This was a fun read :)
http://madeintheusb.net/
I have a limiting condition on my recursion that wouldn't allow it to overflow. Indeed an improperly made recursive method can lead to a stack overflow though. My solution really is quite simple, you only needed to glance at the _BruteKey() method, everything else is just there for context. From what I've read so far about stacks and recursive methods, most modern compilers are smart enough to convert the recursive method into a stack based one, allowing you to work with simple code and still get the bit of speed boost from that more raw method... 
The idea is to have a library that is completly game independent. So I dont need to adjust anything when I create a new game. The idea that the game runs on the client is probably the cleanest solution. I was curious if there was a simple solution for running the games on the server.
Seems much easier than what I went through a few weeks ago. Wish I had this guide, thanks for sharing.
Someone achieve to run it outside of ubuntu? Arch Linux for example?
Satan seem like an good update
&gt; From what I've read so far about stacks and recursive methods, most modern compilers are smart enough to convert the recursive method into a stack based one, allowing you to work with simple code and still get the bit of speed boost from that more raw method... I doubt that! For the famous languages Clojure or Scala you need special constructs, so that the language compiler can eliminate the recursion ([Clojure's recur](http://clojure.org/reference/special_forms#recur)) or special annotations ([Scala's @tailrec](http://blog.richdougherty.com/2009/04/tail-calls-tailrec-and-trampolines.html)). And both heavily rely on recursive functions! If that would be such an easy task, why there would be so much *overhead*? 😉 And the C# Compiler will surely not transform anything - you can prove that quite easily [by contradiction](https://en.wikipedia.org/wiki/Proof_by_contradiction) with just one example with your solution, that fails :-) (Besides that your example isn't tail recursive as the call does not happen in the last position!)
We've got a service running in docker containers in Mesos nodes, if that counts.
You might want to look into using the Decorator patter, explained here (in Java, but the languages are similar): https://en.wikipedia.org/wiki/Decorator_pattern In this thing, you start with a Sword class with, let's say, a HitMonster() method and a DamageWeapon() method. Then one way you could do this (not the only way at all) is you make a WoodenSword class and so on that has its own version of HitMonster() and DamageWeapon(). Then, when you equip a player with a Sword object and call HitMonster(), it's going to call the highest level HitMonster() it has access to. So if you made a WoodenSwordWithMagic class that extended that WoodenSword class, you'd actually be calling *its* HitMonster() method, *even if, in the application proper, you only know for sure that it's a Sword object*. The fun of inheritance!
Why do you think it is hard to catch? It happens every time the property is used. You literally need to never run any code using the property to not catch it.
Well, i need hundreds of submaterials so i don't think it's the best way about it, i settled with using structs, it's working fine, thanks anway tough.
&gt;The idea is to have a library that is completly game independent. So I dont need to adjust anything when I create a new game. Why? This doesn't make sense to me from a conceptual perspective. You're building a game system with a client and a server, but you don't want to ever update the server when you add major new features (in this case, a new game type)? I think you need to have a think about your tech design. Ask yourself what you're trying to accomplish, what components are needed, where they can live, etc...if you need a server component at all, why, what it does, etc. 
I just like to have a dll that i can reference that will handle server/client stuff. I don't want to touch that dll everytime I make a game. These games are incredible small games. I just want to use this library like I would use any other libray as well.
That looks interesting but I'm not sure what you could do with it. 
I've seen a warning before and I don't use resharper. Check your code analysis settings.
You might be able to utilize Squirrel.Windows to update since you have a bit more control than ClickOnce for custom scenarios. It would still require you to restart your service after an update.
what do you mean by 'update iteself' Data or the actual code files? Do you really 'want' a windows service automatically updating its code base on teh fly. IN order to do that you need to stop the service, re-install the service, then start the service agaion. Hope you don't have any lost messages or work that needs to be done and anything that also depends on this service is not affected by it being up then down. My 'gut' is telling me that this might not be an ideal approach. But I dont have enough info. 
Applications will frequently use a separate updater app to handle checking for updates, retrieving the files (via FTP, HTTP, whatever), then close the application/stop the service, copy over the updated files and restart the application/service. I have done it from within the main application before by creating a batch file on the fly that will close/stop the app, copy the files, then restart. I wouldn't necessarily recommend this method, but it has worked for me. This was for an unattended app, so updating wasn't interrupting any users.
Then you get the fun situation where the updater has to update itself. Even Windows Update and Steam sometimes do that. I always find it funny :)
if this isn't an end-user thing, there are tools like https://octopus.com/ to automate deployment for you.
sorry, OOP* 
The if statement is out of the scope of the for-loop for guesses.
If your mislead into thinking an article entitled "Getting MVC 6 and .Net Core running on Ubuntu in 2016" is about angular then there isn't much I can do for you.
I just read over my prior post to you and it seams that I was a bit condescending. I'm sorry about that, I was just a bit frustrated as I hadn't had time yet to make the thumbnail. Probably should have waited to publish the blog post until I had it ready, it's just I spent a few hours learning how to do this then making the article so I was a bit eager to get it out there. Especially as I wanted to make sure my article was viewable before US Friday start of business.
I've debated this very thing in my own mind quite a bit. I just can't justify translating objects 1 to 1 just to use a different class. Granted, my API is not public and I'm the only consumer.
It could be if(true) and it wouldn't hit because it never gets the chance to, as it's out of scope of the for-loop. You need to move it into the loop's scope by putting it within the loop's brackets.
Ah OK I understand .... after putting it inside the for loop like you said it works better. Now the first time I pick a letter it runs the loop 7 times. then it works fine after that and will display proper message once finished
You'll have to forgive me, I took my undergraduate Java classes before I started in C#. What are the differences in properties. I vaguely remember Eclipse auto-generating getters and setters. How are they different?
Linq a pad has an interesting update method. Something to do with shadow files or something along those lines. As to the service aspect of auto updating, you "could" do it. If and possibly only if you separated the Windows service from the application logic via separate app domains. Starting the service then loading a separate app domain would give him the ability to hot swap the application logic. Now there are a number of reasons against this as others have mentioned but it's also a pretty neat trick if you can justify it. 
If you're reading one reasonably-sized file straight through (front to back) you're going to be better off with the old-fashioned sync code. In that scenario, all the async/task stuff is just pure overhead. If you're running a website and want to handle many many connections, then yeah, use async. Or if you've got a workload that is multi-core friendly. 
Say you want to increment a person's age. person.Age++; vs person.setAge(person.getAge() + 1); The sheer amount of braces makes it less readable.
Could be a nice read, if you want to write about it.
That's a helpful clarification, thanks.
I think with code formatting, you're asking: if this then write this if this then write this else blah blah blah Or as a C# example: int x = 5; if (x &gt; 3) { //do something if x &gt; 3 } if (x &lt; 2) { //do something else if x &lt; 2 } else { //do something if neither of the above are true (that is, x = 3 or x = 2) } But naturally, the last `else` doesn't apply for the first `if`. I think the construct you're looking for is `else if`: int x = 5; if (x &gt; 3) { //do something if x &gt; 3 } else if (x &lt; 2) { //do something else if x &lt; 2 } else { //do something if neither of the above are true (that is, x = 3 or x = 2) } With this conditional, it executes just as it reads: "if x &gt; 3 do something, otherwise if x &lt; 2 do this other thing, otherwise for all other cases, do this last thing" You can read more about how to use `if` conditionals here: https://msdn.microsoft.com/en-us/library/5011f09h.aspx Good luck on learning the language!
I'm not sure I understand correctly what you're trying to do, but my guess is that you want to use an "if ... else if ... else ..." construct. Something like that: if (condition1) { DoStuff(); } else if (condition2) { DoStuff2(); } else { DoStuff3(); }
This isn't the only async performance bug I've seen. For reading really large strings from the database, I have to switch to sync or I pay a crazy 100x penalty.
MSDN Reference: [if-else](https://msdn.microsoft.com/en-us/library/5011f09h.aspx) General advice: in C#, the msdn is the official documentation. That is a very good first place to check before posting, especially for things like language syntax and features
What stops me from wiping wherever you've stored the hey and opening the application again for the 'first' time. Or just calling the API to generate a new ID. If you want to 'ban' someone you need to either be able to verify who they are as part of the authorisation process or their needs to be something of value associated with their account. You can't really do either, so why bother. 
I am yet to find a good explanation of why async programming and its keyword is actually a good thing. As far as I can tell it is vastly more complex than just starting a task and getting a callback, its more complex than just starting a thread for a long running task, it makes debugging a nightmare and profiling becomes almost impossible and to top it off if you use one you basically have to use it everywhere unless you use hacks to make it synchronous (and when some of your platforms only support async and some don't support it that is a massive pain). What are the actual benefits? 
Jewdai is correct. If you're creating a context and passing about, having things add/remove/update entities from it you lose control. Much better to construct the unit of work externally and pass it to the method which creates the context, persists it and then disposes the context in a using block. 
If you follow the link he has to the corefx issue he opened, this is actually just a performance issue in .NET Core. They do a seek when using an Async operation that they don't do in the sync operation. That's where the performance hit is coming from. But I think you're generally right, if he were using the ThreadPool, and pointing out a thread exhaustion issue, async would help. But he's spawning 16 threads, so he doesn't have a thread exhaustion issue, where the thread freeing itself during an async IO operation would help eliminate that.
That combined with modifying one bloody line in the designer file fixed it. Thank you so much!
It sounds to me like you would benefit from a switch statement. But to answer your question first: the scope of where you place the else matters. Imagine you're walking along a path, and it becomes a fork in the road. You can either go left or else you go right. IF you choose to go left, you then come up on another fork in the road and you once again have to choose to go left or ELSE go right. This is the same situation as before however these are two new roads and going right doesn't mean you will wind up going on the same road as the initial right fork. This analogy is to hopefully show you the significance of scope. Each fork has its own scope, the outer fork, and then the inner fork in the road. All that being said, you can either use an else if statement. Like I mentioned before however, I think you would greatly benefit from using a switch statement in this case, if possible, and setting the default case with your else block contents. This is a quick link that will demonstrate what a switch statement does and how to use it: http://www.dotnetperls.com/switch If you have further questions please feel free to ask. 
Portuguese / Spanish ?
One context per unit of work. In a simple CRUD app, one context per db action in fine and I agree and support w what youre saying. In anything non trivial, a unit of work can be complex and involve several add, remove updates. In this case, you usually want to maintain the same scope.
One other thing you can do is assign the result of `Task.WhenAll` to an array of `HttpResponseMessage`. It's often handy to have an array of the results rather than needing an extra `select` if going through the original tasks. Using an example from Concurrency in C# Cookbook, you can also process the results as they come in instead of waiting for all of them to complete first: async Task AwaitAndProcess(Task&lt;HttpResponseMessage&gt; task) { var result = await task; // process result } ... var firstCall = http.GetAsync("url1"); var secondCall = http.GetAsync("url2"); var thirdCall = http.GetAsync("url3"); var tasks = new[]{firstCall, secondCall, thirdCall}; var processingTasks = tasks.Select(AwaitAndProcess).ToArray(); await Task.WhenAll(processingTasks);
Portuguese
Thank you guys!
Good point here. The service OP referenced has a framework you can download and use for free, though it's written in Java. Not sure the effort to interop but doing that is another good choice.
 public void QuartersPlus(int doll) { // Mutator - modifies PDM centsTwenFive centsTwenFive = (centsTwenFive) + (doll * QT_PR_DOLL) / QT_PR_DOLL; } public void DimesPlus(int doll) { // Mutator - modifies PDM centsTen centsTen = (centsTen) + (doll * DIME_PR_DOLL) / DIME_PR_DOLL; } public void NickelsPlus(int doll) { // Mutator - modifies PDM centsFive centsFive = (centsFive) + (doll * NICK_PR_DOLL) / NICK_PR_DOLL; } public void PenniesPlus(int doll) { // Mutator - modifies PDM centsOne centsOne = (centsOne) + (doll * PENN_PR_DOLL) / PENN_PR_DOLL; } That's what I ended up getting for my Class side, with my client side looking like this: Console.WriteLine("Balance before adding change is: " + balance2.ToString("c")); yourChanger.QuartersPlus(5); yourChanger.DimesPlus(10); yourChanger.NickelsPlus(3); yourChanger.PenniesPlus(7); Console.WriteLine("Balance after adding change is: " + yourChanger.GetBalance().ToString("c")); ...and a result of... Balance set to 0 check: $0.00 Balance before adding change is: $0.00 Balance after adding change is: $2.47 Press any key to continue . . . I'm not sure why this small part was holding me up. I think my brain has just been fried lately with work and school and other things. But, I appreciate the comments helping me out. I'm dedicating my weekend to making classes and structs embedded in my head so I can move on.
I approve
Good start, now type in something that isn't a number and see how it fails, then make sure it can cope with that situation :) 
Your Google search term to get started is "TryParse" to help check if the input is valid or not and reject it as appropriate. Entering a non number won't be harmful and you'll get to see how it fails which is important to learn. :) 
You spelled dilution wrong. That's sort of a crucial mistake. Now you get to see how difficult it can be to rename a project in Visual Studio! 
After going through this you will never make this mistake again lol 
Read http://www.dotnetperls.com/ and see if you can get inspired.
Well, unlike you I did not start with C#. I've started learning programming in C++ in high school around 2004. Throughout college I've also played with php on my own. Then I went to college where I learned OOP and switched from C++ to Java after the first semester. Towards the end of college I've been introduced to C#, and right after college I've started working as a .NET developer which has been going on for almost 4 years.
This made me happy, I don't know why. Good job. Do the parsing of input like PhonicUK suggested, then try a web version? Then make a mobile version? Then one that can use a bluetooth enabled scale that you can just set your cartridges on and it calculates everything for you? Then link it to Amazon Resellers for cartridge refills and make a zeeelion dollars? Good luck on your adventure CrPlunk.
If you want to move forward I HIGHLY recommend the Bob Tabor videos. https://channel9.msdn.com/Series/C-Fundamentals-for-Absolute-Beginners
https://channel9.msdn.com/Series/C-Fundamentals-for-Absolute-Beginners These videos got me started
Awesome! I plan on finishing my book first but this will definitely come in handy when dealing with "pesky users" ;)
Oh no...
Ahh too fast! Haha thank you! I do want to get out of command prompt eventually but this is only a few chapters into my book. I would like to make my own fitness. And budgeting smart phone apps. I'm so glad you love it and for this reason alone I have decided to flesh this one out as well. Thanks again :)
Thanks!! I will check him out
Also the "quantity " is for liquid droppers of nicotine "juice" of varying nicotine per bottle (3,6,12, and 18 mg) that you can mix in your own bottle.
Shiiiiiit!
Ugh, that sounds horrible.
I haven't tested it, but the strings causing us problems were 1MB or so. Much bigger than we would normally put in a database.
Get "Fundamentals of Computer Programming with C#" by Nakov. It has really good excercises for beginners.
Double semicolon'd for loop. So triggered right now.
isEmpty() get that Pascal shit out of here haha. EDIT: Just realized it's a field name Empty..whoever made this mug makes me cry. How can so little code have so much bad practice in it.
"[…is a 25-dollar term for a 5-cent concept](http://www.jamesshore.com/Blog/Dependency-Injection-Demystified.html)". Once you've messed with objects for a while, you'll find this term again some day, decide to read about it, and say: "oh, but that's what I already do, sometimes". Then people will tell you, "well do it all the time, then".
I have not read that one specifically however I do have some I am reading for learning languages and then learning about IDEs, etc.
Oh no, no- MS wants and makes it to be easy. In fact, you've already got the hard part done, UWP is just drawing nice interface around it and I mean drawing. Take a look here: https://channel9.msdn.com/Series/Windows-10-development-for-absolute-beginners Bob Tabor makes good lessons- highly recommended.
I am just going to give you some direction on how to refactor this a bit, or more or less, how to look at this for refactoring. First question: Is there any repeated code in your method? To me, it looks like how you capture the nicotine content and the quantity of drops is identical. This would be good wrapped up in a class. NicotineSample with Description, Nicotine Content, and the Qty of drops, and a read only property that determines the mgX. You can now reuse that for capturing the samples. I'd also make a Nicotine Dilution calculator that accepts an array of nicotine samples (the previous class) and calculates appropriately. Think of yoru classes as small autonomous things that do units of work. For your instance you have classes that would capture sample data, then a class that calculates the dilution values. If... in the future you want to add different sample types or different calculator types your object model is more open to extension and you don't have too much logic wrapped up in one class. Good work. 
&gt; The HttpClient object is intended to live for as long as your application needs to make HTTP requests. It is not necessary to dispose of for *each* request but it must still be disposed of once your application is done issuing requests. 
[Project Euler](https://projecteuler.net)
also, you should add measurements to your input prompts, so the user knows exactly what kind of number they are expected to type in. simple things, like "Quantity? (mg): ", because it's only obvious to you
I haven't tried UWP yet, but isn't it almost the same thing as WPF development-wise? If so, yeah, it's really easy (and totally fun) to start, but takes a while to really understand, and even longer to master.
This was the worst part about making the switch from Java to the CLR. Really one of very few and after fighting it so much it had become second nature to fix. The problem stems from VS hiding much more from you than most Java tooling.
Although there is some decent stuff in here about making parallel calls, and certainly you can employ some degree of parallelism in your API calls, you also need to decouple the loading of the data with the page load. Look into using AJAX / XHR. You can have the page load immediately, then display a spinner or barber pole or progress bar in the spots that will be occupied by the data while said data is loaded using AJAX requests. This is a very common practice and it's how most good websites that need to present data from I/O bound operations load.
[It's a niche market, but I guess it's there](https://www.youtube.com/watch?v=Ztp0vHSSVqM).
Good job! If you want some great tutorials, I recommend [this playlist on youtube](https://www.youtube.com/playlist?list=PLAC325451207E3105). It's for beginners and advanced developer.
It sounds interesting, but maybe you should change "you don't make a lot of money" to "you don't make any money".
$10 for 20 mins is actually a fair amount of money. But asking for "C#" help is not really enough to really understand what you want. There's ASP, WPF, TPL and loads more in the .NET framework. Unless you really are just looking for C# then in that case only college students or new devs would be using the site and they probably wouldn't be willing to pay or use much time.
No...doesn't your comment say "Currently all money goes to the developer"? So don't you mean currently you don't earn any money? As for helping, yes I would be fine doing that for free but I'm only an indie developer. Why it's interesting: It's fun to help other people. 
...doesn't it say "Currently all money goes to the developer?"
I see what you're saying. After a lot of research a few months back I decided to implement a modified scope factory for sharing my context. It works for me. I don't have the original article anymore, but I'll github the code later this afternoon. I'm interested to see your thoughts.
All money goes to the expert. BugRex takes nothing. Sorry for my clumsy wording.
Changed the post, I meant all the money goes to the expert.
You could use the as operator to cast to the different interfaces and act on those as needed: var x = a as IHasSomeOtherMethod; if (x != null) { System.Windows.MessageBox.Show(x.SomeOtherMethod()); } This will sidestep the InvalidCastException problems you may be having. There is also an is operator that might be useful to you.
In either case, you should have the method defined somewhere it is known at compile time (base class or interface) and then override it in the concrete class. 
The exclamation means "not". So basically instead of checking if a value is false by typing: "something == false", you can just type: !something. Sorry for the horrible formatting I'm on my phone.
Good point. Currently we've seen most .NET requests, but we'll most likely get requests regarding all kind of frameworks in the future. We're basically interested in talking to everybody who enjoys helping others and know C#.
Almost the same in my opinion :)
I'm most found of the multiple interfaces and then having extension methods against those interfaces approach. I do wish there was "extension properties" though, or Java 8's [default interface implementation](https://blog.idrsolutions.com/2015/01/java-8-default-methods-explained-5-minutes/).
[Here's](http://tyrrrz.me/blog/c/how-to-achieve-something-similar-to-multiple-inheritance-in-c/) how i usually do it The idea was to use interfaces and handler classes, similar to OP's entity system but a bit simpler. 
As an example of something more close to what I'm doing, imagine if you have a class that describes some model of some device that connects to your computer and in that class you have a property that points to the communications driver object for that device so you can send it commands. So each device object has a driver object (multiple devices can use the same driver class), and these drivers all use different commands. As of right now, if I want to use a device's driver, I have go through each possible interface the driver can have and see if it implements that interface, and if it does I can cast and use those commands. There is probably a much better way to do this and that's what I'm asking for help for.
Doesn't c# have that already? I'm pretty sure I used it before.
It looks like mixins (or default interface implementations) require CLR support, so it's a bit out of scope of C# team, but it's on their roadmap.
Have what? C#'s interfaces don't allow default method implementation or implementation of properties.
Ok. Thanks!
Hey, I forgot about the nameof operator because I'm not on C#6 yet myself, good idea! &gt; The arbitrariness of decisions made by language designers bothers me. That's one reason I like c++: you have the tools you need without the kid gloves imposed by the language. C++ kind of has the opposite problem in my opinion of not being able to say 'no' to any feature. But like I rambled on about in the foreword however I think any decent OO implementation *does* need some sort of mixin or similar.
Here mixins are listed as "Require CLR support" https://github.com/dotnet/roslyn/issues/2136
That's neat, so you could kind of use the USB as a key to authorize or something. How much are these going to cost? 
This could be accomplished using the factory pattern. Have the factory control instantiation of your GameObjects. Instantiation could be written to force registration with the PoolManager.
I don't disagree with any of the stuff about multiple inheritance. But I think the example (an entity component system) is a terrible place to apply it. In a proper entity component system, there is no entity class for all these mixins to add behavior to. Entities are created at runtime from a list of components, assembled in an editor of some kind. They are not a class. I posted this same comment to the blog: Your code is interesting, but your example is terrible. You've completely misunderstood how an entity component system works (Don't stress... lots of people get this wrong. Including Unity.) The point of components is not to add all this behavior to entities. In fact, components shouldn't have behavior at all. Here's how it should work. You have a group of 'systems'. For example, the physics simulation system. Each system cares about and operates on a small set of types. For example, the physics system cares about rigid bodies. The physics system isn't concerned with sounds, so it doesn't even know that such components exist. When the game entity is created, it has some set of components. These components are given to each system. The physics system takes note of all the rigid bodies it sees, and stores them in it's own internal state. The physics system never operates on entities. It doesn't care what entities implement, or derive from, or what interface they can be casted to, or what component they happen to have. The physics system has a list of rigid bodies that it deals with and that's it. And the rigid bodies are all very strongly typed. Once the components have been offered to each system, and each system has remembered the ones it is interested in, the entity can be forgotten by the rest of the system. It was just an ID and a list of components anyway. Lets look at some of the disadvantages of the methods you suggested. Polymorphism? Individual components are free to have an inheritance tree, and since they aren't interfaces, they get virtual methods and everything. For example, maybe SphericalBody and MeshBody both inherit from RigidBody. The physics system works on RigidBodies, so SphericalBody and MeshBody blend in just fine. Adding fields to entities? Entities don't have fields. Entities are just an ID number. Components have ID numbers. Incidentally, this is the implementation of IComponent: public interface IComponent {} Statically typed? Yes sir. The individual systems are free to store their components however they want (They don't even have to use the component type to do it. How about sticking the data in a struct of arrays instead of an array of structs?) Thread safety? If two systems don't care about the same component types, they are inherently thread safe. If they do share the same component type, the need for access control is confined to that specific component. In short: Stop trying to use components to add behavior to an entity class. Instead of trying to create a class that implements behavior X Y and Z for a single entity, create a system that implements behavior X for multiple entities, and another that implements behavior Y for multiple entities, etc. Sorry for shitting on your article. I'm exploring similar territory trying to implement duck typing in C# and I'm running into many of the same issues. 
&gt; Eh, you get much the same thing with interfaces + extension methods on those interfaces No you don't. Default implementations are virtual method calls and can be overriden by inheritance. Extension methods are looked up at compile time.
I'm unsure of the reasoning in the initial paragraph. Most systems I build these days contain no class-based inheritance, with only limited interface-based abstractions. Ayende has a [good series on limiting your abstractions](https://ayende.com/blog/154145/limit-your-abstractions-all-cookies-looks-the-same-to-the-cookie-cutter) which I recommend. Class based inheritance has always lead to the kind of thinking that prompted your post. To take your example, if drums require tuning then have a class that does just that, after which an abstraction *may* be called for. ITune&lt;Drum&gt; and ITune&lt;Guitar&gt; for example, with a concrete implementation of DrumTuner : ITune&lt;Drum&gt; as a constructor or method dependency to the class / method in question, and only if a class will ever need anything other than a DrumTuner or GuitarTuner (the whole reason for abstractions in the first place is to be able to swap them out) Most inheritance issues can be composed out of existence, and I feel should be the priority instead of introducing complex inheritance or inventing MI in a language that chose to exclude it for a reason.
&gt; Default interface implementation can be implemented by copy-pasting by the compiler, and mixins can be implemented using delegation. The problem comes when you want to add new method to the interface and you have assembly that already implemented that interface but is not aware of new method. Adding new method to interface with default implementation should not be breaking change and should maintain binary compatibility. 
Head First C#.
Yep, Head First C# is a great good to quickly start with. Computing With C# And The .NET Framework by Arthur Gittleman is also a huge book that goes deeper into the language. And then of course there is learnvisualstudio.net too.
Hey, thanks for the feedback! I decided to reply on the article itself: https://xenoprimate.wordpress.com/2016/02/21/simulating-multiple-inheritance-in-c/#comment-7
It can already show a red square in the trough of the scrollbar, which aligns with the line where the error has occurred. https://i-msdn.sec.s-msft.com/dynimg/IC661130.jpeg There are add-ons too for VS that allow you to mod things. Look at VS Productivity Powertools -- though I think most of what it did previously is now built in. If something doesn't already exist you can always write your own.
Another vote for head first. 
I really enjoy Microsoft Press' "Visual C# Step by Step."
Yes, there is a 6hrs long youtube video from him that you can try I loved it learned alot and I'm using pluralsight for other C# courses and honestly Roberts stuff is pretty good comparetively 
This is fantastic news. The way to get devs to use a platform is to provide appropriate tooling. Where is the repo of moq.netcore? I've found [aspnet/moq4](https://github.com/aspnet/moq4/tree/netcore-beta5) but I'm not sure if that's the one
I'd suggest C# 5.0 in a Nutshell, or C# 6.0 in a Nutshell
Came here to recommend this. 08101 (undergrad "intro to programming" at the University of Hull, where Rob teaches) was basically working from this book. 
Awesome, I'm glad to see some standard libs are starting to embrace the core world. It's a year or two off from being an easy transition for us developers.
the thing is you're taking all these variables, and modifying them inside the method `BuyBuildings`, but you're not returning anything outside the scope of the method. as you should know, that local variables only exist while you're inside that method, once the method is done, those local variables are gone. what you're trying to do, i think is trying to "pass by reference". private void BuyBuildings(int buildingName, double _money, double buildingNamePrice) try changing it to private void BuyBuildings( ref int buildingName, ref double _money, ref double buildingNamePrice) this way when you modify the values, you're actually modifying outside the scope of `BuyBuildings` some helpful links https://msdn.microsoft.com/en-CA/library/0f66670z.aspx https://msdn.microsoft.com/en-CA/library/t3c3bfhx.aspx https://msdn.microsoft.com/en-CA/library/szasx730.aspx also i dont get the usage of `_money`, regarding the underscore, is it defined as a private variable somewhere in your class?
Start() is itself a function, so you've defined your function inside a function - don't do that. Your function should look like this: int Add(int a, int b) { return (a+b); } Note that I've removed the = sign and the semicolon. Then call it like this: void Start() { Debug.log("Sum="+Add(1,2).ToString()); } Unity will automatically convert numbers to strings for you, so if you want you can shorten it to this: void Start() { Debug.log("Sum="+Add(1,2)); } 
&gt; This post is about understanding Tasks in C#. Well, from the post it is clear that **you** did absolutely **not** understand tasks.
Removed due to Rule 5.
I did give it a try after your previous post, but it seemed to crash whenever the log file rolled around... Was using an unmapped network path with unsaved credentials, dunno if that's got anything to do with it. That method works with BareTail. Will play around to see if I can pinpoint it. 
I think you got your read/writes mixed up somewhere. Your proxy is returning a *GET request* as the *response* to your own GET request. Is the data the same data your proxy is supposed to send to the backend? In any case, I think the easiest thing to do would be to add logging features into each of the "middlemen" that print the request and response into a file. Use that to make sure that each step is getting and sending exactly the data that you expect it to.
What if you're using C# solely for Web Dev? And only writing Web APIs at that.
"Malicious software" is kind of ambiguous, because it means different things in different contexts. Obviously viruses and trojans are unambiguously malicious in intent, but some parties would also describe such things as reverse engineering tools and techniques as malicious. IMO, this is wrong because reverse engineering has many valid, non-malicious uses, such as discovering the structure of proprietary file formats and enabling interchange between proprietary systems. I know of one company local to me who does this daily to interchange veterinary medical records between systems, for instance. Other than that, bravo!
Dude, seriously, this thing keeps looking better and better. I think I'm going to start using it.
Clean Code by Robert Martin is a good resource regardless of the technology you're using. 
[removed]
Buffer all the datas.
Get a subscription to pluralsight, great resource for learning this stuff. I'm in the same boat as you and I've been trying to devour everything I can on these subjects. Don't get overwhelmed either, there is a lot of info out there and much of it is opinionated. Just pick some popular stuff and try it out, the process is more important than learning that particular tool. Also check out The Art of Unit Testing by Roy Osherove (sp?). Lastly, Code Complete 2, and Clean Code are great books on design and code management. Also Pragmatic Programmer is another good book. 
RB's books are the best.
I sure hope EFcore 1 can be tested without something like Effect. 
Yes, you do.
Ain't nobody here gonna do your homework for you. :)
Also, watch his lectures on youtube - really funny! His java voice kills me!
How badly do you want to learn testable code? I thought this book http://www.amazon.com/xUnit-Test-Patterns-Refactoring-Code/dp/0131495054 was great for testable and testing code. Also, Pragmatic Programmer and Clean Code are excellent.
[removed]
Thanks for the reply. The first part I understand and Unity accepts that, though the 2nd and 3rd part I dont because I'm not up to that level yet and they haven't covered that in class. I need the first part to show up in the console using a separate Debug.log(); I think. I also need it to be editable outside of the script, so i can change numbers in the Unity inspector. We have only learn the basics in class so far. void SayHello(string name){ Debug.Log(“Hello, ” + name); } http://i.imgur.com/uFaADaY.png http://i.imgur.com/tBcotYz.png
I have a similar question. I'm working in a team that builds my company's internal application. We don't do proper code reviews - all 3 of us are more or less at the same experience level (junior devs). We dont do unit tests. Security is pretty much an afterthought, to be mild. I atleast KNOW about NUnit and have written unit tested code for my personal projects and just to get an idea of what TDD is. I understand a fair bit about our architecture (MVC) , dependency inejctions and I know some of the best practices related to security. The problem is, implementing all this is not a business priority. I'd have to do it on my own time. I am willing to do it (for the learning experience and confidence that I won't horribly break the app). Most of my work is churning out features as required or firefighting. How do I convince my next employer that I can and will think carefully about architecture and unit test? 
Did you, by chance, ever try to create type-safe views in Angular using TSX files? The biggest pain I see with Angular 2 currently is that there is no type-safety in views at a compile level. ReactJS solves this.
That's great news
Not yet, maybe I will try and see how it works !!
Just one more question. Do I need to be on the website to receive the request? If there is an e-mail notification what happens if I am not available at the required time? Also your website breaks in Microsoft Edge. Yeah I know, not the most popular browser and I certainly have installed others but C# developers are likely to use it with higher than average probability :)
&gt; This company is going out of business, soon. The risk of customer data exposure is off the charts. please, if writing shitty code made companies go out of business every company would be out of business, hell ashley madison is still chugging along and they didn't even hash their passwords
Oh yeah, makes sense. To be honest, the only reason I know something has to change about this codebase is because I've heard 'DRY' too often and I'm dealing with lots of functions that are written over and over slightly differently. :/ I read Effective Java (it's a book on design patterns) but it's kinda hard to apply all of that when you're very new and it takes you a lot of time to make small changes too.
&gt; Secondly, you violate single-responsibility in Main, when you print out that ASCII art to the console. Printing the welcome message should exist as its own method called by Main, rather than intermingling it with the responsibility of "starting the server". Try to think about breaking your program into logical layers like this, so "starting the server" includes "printing a welcome message", but the functionality of each of those tasks deserves a segregated method. [In case OP isn't familiar with SOLID principles. Use that as a starting point.](http://www.codeproject.com/Articles/703634/SOLID-architecture-principles-using-simple-Csharp)
I think the trick is to, as much as you possibly can, code along with the courses you take. Open up Visual Studio and do what the instructor is doing. Do *not* download the code and just read throug it, code it yourself and then if and only if you get stuck compare your code wit h the course materials. I mean, everyone learns differently but generally speaking, even copying what the video is doing yourself will gain memory retention (and probably be less boring as well, especially when the instructor shows a mistake on-screen or does something with a version of the API you're learning that is no longer supported. Frustrating sometimes, sure, but I'm convinced that that is how you learn to code).
A better way to handle this is to pass an object (or objects) that store these variables and then make your changes to them. Complex objects are passed by reference by default. That also helps to make your code more extensible in that you have one method that takes in, let's say, an Owner object and a Building object rather than having separate methods for everything out there. I'm also noticing that you're passing in a variable called buildingNamePrice but then trying to change the value of lemonadeFactoryPrice inside of your method, which is not going to work correctly.
Ashley Madison has limped along because no one wants to be *that guy* who initiates litigation and has to identify as a customer.
Not familiar with UWP, but can you use SslStream? MSDN: https://msdn.microsoft.com/en-us/library/system.net.security.sslstream(v=vs.110).aspx. Examples are on the same page.
For homework and school work you should consult your fellow students and your teacher.
His online series is quite expensive (I think $18 per episode), but definitely worth picking up for anybody working in a professional development environment. You might even be able to get your company to pay for it as a learning expense.
For "a)" I went to the override and I was able to always make z equal zero by replacing `return string.Format("[{0},{1},{2}]", this.X, this.Y, this.Z);` with `return string.Format("[{0},{1},{2}]", this.X, this.Y, 0);` Instead of this.Z I'm saying the value must be 0. I think that is correct. regarding the other 2 lines I can't do them Edit: also forgot to add somethin to the "b)" *facepalm* sorry...
The books I recommend: * The Art of Unit Testing (Roy Osherove) * Clean Code (Martin) * Agile Principles, Patterns, and Practices in C# (Martin &amp; Martin) * Working Effectively with Legacy Code (Feathers) Expect to spend a lot of time letting it all sink in, it took me a couple of years of doing badly before it stuck. The last book's been particularly beneficial, as I often inherit a codebase that has no/bad unit tests and whipping those into shape seemed to help me faster than trying to write good code from scratch did. 
I read more about yours proposition and I think I found solution. @Edit Oups I fckd up formating, there is link for pastebin: http://pastebin.com/ky3gsF9w
These types of things should be stored in a database.
&gt; The problem is, implementing all this is not a business priority. I'd have to do it on my own time. This is almost always the case. Implementing unit tests and other advances to your architecture will save you time almost immediately and will eventually make you and your team look like rockstars. Pick one quick win (maybe start using NUnit in some very limited area where you have modules that are clean enough to use it or pick a part of the code that is constantly breaking forcing you to fight fires). Do the first proof of concept one on your own time then use your employer's time for the rest. In time you should find yourself fighting fewer fires because your code will be better and you will have more time to add more unit tests, etc. If you have a good manager, they will see the value of what you are doing. It's the only way at most jobs. Employers that give you carte blanche to define your architecture and do green field programming projects to are as rare as unicorns in this business.
This state belongs in the DB. If you really want to get fancy with it, you can use signalR to update the views of people who are currently on the page.
As long as the web server can connect to the database, it doesn't matter where the database is. It doesn't have to be on the same machine. But if the site doesn't have a backing database and you only need it for one checkbox, then maybe you could get away with saving the state in something like an xml file, although not ideal. 
Only performance-related item is that you're doing a lot of string concatenation inside a loop. Replace final with a StringBuilder and use the Append method. 
&gt; Also, if it's worth encrypting your authentication process, then it's worth encrypting any data that comes afterwards. I'm not saying the rest of the data won't be encrypted, I'm saying the current class (a socket listener) I'm working on is only going to handle some encrypted authentication and then pass off the socket to whatever class is wrapping the core listener class. I'll figure it out - I was just hoping someone might have a good overview resource of .NET cryptography - but it doesn't appear so. Honestly I was kind of hoping to completely manually implement the Diffie-Hellman exchange in the sense that my class would manually extract the public key and exponent and send it with its own syntax as I just don't usually feel super comfortable letting someone else's code do something that should otherwise be as simple as sending a byte array. UWP and Mono are very different so I'm just trying to figure out how to ensure I get a compatible algorithm across these two platforms.
Hmm, I want to try this for funsies: return parts.Skip(3).Where(x=&gt;x.Contains('*')).Aggregate(new StringBuilder(),(builder,v)=&gt;builder.AppendFormat(" {0}", v.Replace("*","")), x=&gt;x.ToString()); I think I got it right.
Code has 2 else cases for one if. I'm assuming the second else is what you want, because the first one doesn't really do anything. var final = String.Join(" " + parts.Skip(3).Select(p =&gt; p.Replace("*", String.Empty)); Replace will just return the original string if the search text isn't found. Not sure if you reference counter outside of this loop, but I'm assuming it's 0 when you start. EDIT: Edited to use String.Join overload mentioned below. Thanks.
`String.Join` has an overload for `IEnumerable&lt;String&gt;`, so there's no need to make an extra array.
Great thanks :D you really helped me!
And if you want the first words skipped you can do this: string text = String.Join(" ", parts.Skip(3)); string nonAsterix = Regex.Replace(text, "\\*", String.Empty);
I have to upvote your comment because it does work lol but I'd punch someone in the dick for that line of code.
Looks like you could replace the whole thing with final = string.Join(" ", parts.Skip(3).Select(s =&gt; s.Replace("*", ""))) (On phone so not tested)
In relation to the try/catch block given that this is likely for Dynamics CRM (based on the InvalidPluginException line) this is a bad way of managing the exception that will be presented to the user. From a performance perspective, while short why the heck would you loop through values and then say only when &gt;= 3, why not just start at 3? I would love to see the code that sits around this to understand the requirement better. 
Most likely it's just a Chrome plugin you have that crashed while doing something. "6 null" shows up on Google search as C# merely because C# is currently on version 6, and one of the improvement on C# 6 is related to handling nulls. Try resetting your Chrome and remove every plugin.
needs to work with folders
1. What is going to generate a FaultException? you're just concatenating strings. 2. In some places you're using `parts[counter]` and others you're using `value` which are the same thing (or they *should* be, I can't tell how you initialize `counter` or `final`). It's confusing, to say the least 3. `(string)new_word.ToString()` doesn't do anything. Just use `new_word` 4. `final = final + ""` also doesn't do anything. Get rid of that whole `else` clause. ( I also prefer `final += "blah"` for assignment-concatenation) 5. You have this weird double-else going on that I suspect doesn't compile 6. If the part contains `*` you remove all the of the `*`s before concatenating the word. If it doesn't then you just concatenate the word. You'd get the same effect by just replacing the `*`s every time, and then you wouldn't need the `if` conditional. 7. You might want to consider using a `StringBuilder`, it's more efficient after you reach about a dozen concatenations ------------------- Here's how I would do it: using System; using System.Text; using System.Linq; var toMerge = parts.Skip(3).Select( part =&gt; part.Replace( "*", "" ) ); var final = string.Join( " ", toMerge ); -------------------------- Or if you like loops: var builder = new StringBuilder(); foreach( var part in parts.Skip(3) ) { var formatted = part.Replace( "*", "" ); builder.Append( formatted ).Append( " " ); } var final = builder.ToString().Trim();
I'll start off by asking why was there no asterisk value given in the example? That makes it difficult to understand the output. As of right now, it just looks like you're replacing * with "" everywhere in parts as long as counter is &gt;=3. Is "parts" an array of strings? If so, that would make more sense here. - Use stringbuilder.append() for concatination instead of the string operators - Use String.Empty instead of "" - There's no need to do final = final + ""; if final has an existing value, as that's just a throwaway line, and that else statement can just go away entirely. - Invert your nested if(counter &gt;=3) to be: if(counter &lt; 3) { counter++; continue;} - Change your .Contains(*) check to a [compiled regular expression match, it's significantly faster](http://stackoverflow.com/a/3617013). - Why do you have a try/catch? Unless your counter gets you an off by 1 error, there's nothing in there that would give you an exception. That's un-necessary overhead.
There is already an issue raised for that. I am going to give the option of being able to treat files which have rolled over as a single file 
&gt; returning the string representation of something that is already a string `String.ToString()` returns `this` so it probably has no effect at all on performance. It's just completely and utterly pointless.
 string.Join(" ", parts.Skip(3).Select(s =&gt; s.Replace("*", "")) Is this what you are trying to do?
Scryber is also pretty good PDF library https://scryber.codeplex.com
You used a database.
 using System; using System.Text; using System.Linq; var toMerge = parts.Skip(3).Select( part =&gt; part.Replace( "*", "" ) ).ToArray(); var final = string.Join( " ", toMerge ); Fixed that for you. It's &gt; string.join(string, string[])
I use wkhtmltopdf, it's free and open source, HTML goes in one end, PDF comes out. 
It makes no sense. He has no clue what he's doing. Even the second `else` makes no sense.
I think saying he has "no clue what he's doing" is exaggerating, but it doesn't really make a difference for performance, and it makes the code longer, harder to read and more risky to change, at least :).
No, it shouldn't make a difference, and even if it did it would be in the nanoseconds.
I don't understand how people can stand to work with code formatted this badly. I mean, IDEs reformat code automatically, so how does this horrible mess happen? :p
&gt; Second else makes sense but depending on the context: In the example it makes no sense. If he returns in the first if block, then the second condition will never be checked anyway, therefor the `else` makes no sense. It's **never** *else*.
I'm guessing that you actually meant to use 2 different conditions, which would make some sense, but the last return is pointless without a return value. public static void test() { if (conditionA) { //do something return; // Exit early } else if (conditionB) { //do something return; // Exit early } // Do other stuff here - ( Not conditionA or conditionB ) return; // This serves no purpose if there is no return value. } That's the best sense that I can make of your example.
Complete and utter nonsense in the context of that test(). To debunk the nonsense, build in Release and show how him the generated IL. I will eat my keyboard if it contains any of the returns.
Because of the early return, I agree. If there wasn't an early return, the 'else if' structure would prevent the second condition from being tested if the first condition was met, but that's not the case here. In other words, I have no idea what the original code was trying to accomplish.
The method returns void so the return statements aren't necessary.
It's less verbose but a bit harder to read. I usually end up putting such code on several lines if I'm going to do it that way. From JustABlankAccount's code that's next to your comment: return parts.Skip(3) .Where(x=&gt;x.Contains('*')) .Aggregate( (builder,v) =&gt; builder += " " + v.Replace("*","")); For fun, the original parent code: return parts.Skip(3) .Where(x=&gt;x.Contains('*')) .Aggregate(new StringBuilder(), (builder ,v) =&gt; builder.AppendFormat(" {0}", v.Replace("*","")), x =&gt; x.ToString() ); But even then, it's still difficult to read/understand at first for this one. Breaking it down into smaller, separated pieces is simply a better solution.
 int x = 5; if (x == 4) { //do something return; } else if (x == 5) { //do something return; } return; I'm not sure I understand what you're saying. Edit: It doesn't even matter if he returns in the first `if` block. If the first `if` block executes, even if it doesn't return, the `else` block doesn't get checked. That's the definition of the `else` block. It's there in case the first `if` block doesn't execute, which is a very real possibility.
A beginner should focus more on easily readable and maintainable code, and not premature micro-optimizations. And as others have stated, this is false regardless.
He's not incorrect, but in the context of this example it makes no sense at all here. For example, some languages allow you to employ a guard statement that checks for a condition from which it's preferable to scrap the rest of the method and return. It's similar to a more specific if statement. Unless I'm misunderstanding something above...
If, in those returns, a value is being returned, then having multiple returns and kicking out early can help to simplify the flow. If it's a void method and this is nothing but side effects, there are bigger problems afoot here. 
Well the problem here is there's no catch-all "else" statement. Without knowing the conditions of if/else-if, we can never fully say that the last return will NEVER hit.
Nah. [It also works with IEnumerable](https://msdn.microsoft.com/en-us/library/dd783876.aspx)
This pattern has helped me more than any other. Even when the logic is thick I use a "single return" pattern for all methods. You'll thank yourself months later when somebody finds an obscure bug. 
the part that stood out to me was the unchecked parts reference, which I'll assume is the reason for the try/catch FaultException, but that should be checked ahead of time and thrown if that's the requirement. 
Sometimes multiple returns can increase readability, like with [guard clauses](http://www.refactoring.com/catalog/replaceNestedConditionalWithGuardClauses.html).
Generally, wouldn't it be better to use exceptions possibly? The only reason I can think to return early usually involves error checking input parameters which is better done through throwing exceptions.
What /u/Gotebe said about inspecting the IL is key. With modern optimizing compilers you can't very easily reason about micro performance. Inspecting the generated IL is as close as you can get without doing complex performance testing. That said, you should *usually* write code to be readable by humans first. Then optimize later if needed. What code will actually be the bottleneck is almost always not the code that you think will be the problem. 
I use that to halt a method when another process sends a kill signal to it
100%. The guard clause example is bad - Select Case good.
I see your point. Saved the link to watch later. Thanks!
EDIT: Was wrong, made it fast in linqpad thought the default was optimized (think I've read it somewhere) Here's the il in optimized 3x return: IL_0000: ret test: IL_0000: ldarg.0 IL_0001: brfalse.s IL_0004 IL_0003: ret IL_0004: ldarg.0 IL_0005: pop IL_0006: ret Without: IL_0000: ret test: IL_0000: ldarg.0 IL_0001: brfalse.s IL_0004 IL_0003: ret IL_0004: ldarg.0 IL_0005: pop IL_0006: ret 
This would give you an Unreachable code error in Re# I believe.
I actually didn't know the conf i just used linqpad to make it quick
Step 1: profile your code! Without knowing where you're spending time, you're bound to optimize the wrong parts. There's a lot of good tools out there - I'm not too familiar with the WPF ones, but if Glimpse works in that situation, you should take a look at it. Once you know your slow parts... On a very high level, start by asking the following questions: Am I doing too much (unnecessary work/bad exit criteria in loops)? Am I waiting on I/O when I could be doing something else in the meantime (non-blocking/async)? Can I do more at the same time (parallelism)? Those three (very general) questions will get you far, once you have identified your slow code. Have fun. :) 
Sorry my bad, I read and if/else. Then the last return wouldn't make sense IMO. Resharper actually says: Redundant control jump flow statement.
Sure, I will download those profilers and try to figure out which region of the code is hogging the most memory. Another thing I want to ask is what kind of mathematical metrics can I use to illustrate and prove it to my fellow developers that the code I optimized is indeed the code that's doing all the redundant processing.
can you post some links to the articles that show as to what the art of memory and cpu profiling is and how to master it?
Well there are some tutorials on how to use YourKit here: https://www.yourkit.com/docs/index.jsp, I'm sure you could find help on using DotMemory/DotTrace on the internet too. But as for actually knowing what makes code fast... For that there isn't any specific article I know of; it all really depends on your bottleneck. For example, your problem might be bad or nonexistent indices on your database, or it might be that you're not taking advantage of the CPU cache, or something else entirely. It's just best to profile first, find out what's taking so long, and go from there. Generally, you can and should read books like CLR via C# etc to understand C# better, but they're unlikely to have the specific answers you're looking for (and the same goes for any article I give you).
Thank you!
Agreed, i've been using it for a long time, but it's not a book for absolute beginners i think. Still, the best resource for more advanced concepts imo.
&gt; return parts.Skip(3) &gt; .Where(x=&gt;x.Contains('*')) &gt; .Aggregate( (builder,v) =&gt; builder &gt; += " " &gt; + v.Replace("*","")); Agreed. I usually do multiple lines as well, it's much easier to read.
Each instrument would have its own tuner, or do you mean you might have more than one tuner for a given instrument? A tuner per instrument would probably be wrong, yes - but that means a concept is being missed rather than needing to build MI. The concept might be note based tuning, or string based tuning etc. I think there are other patterns that could used. I'm thinking the visitor pattern may suffice here. This way an ITune&lt;InstrumentWithNote&lt;NoteOfC&gt;&gt; could visit all the instruments it is able to tune rather than managing a clumsy dependency chain the other way around. This all being said though, I'd never say never regarding anything and sometimes some mad MI skills might be the right fit. Not sure I'll see that day, mind, but you never know :)
Maybe the if block should be its own method 
If that is true (i.e. your compiler does that instead of optimizing it differently) then those return statements would bloat your code, increase your cacheline waste and make potentially everything else slower. If not, would not make any difference (optimized away). Reason: Every entry and exit of a function includes stack pushes and stack pops. Those are extra instructions in addition to your "ret" instruction. 
IL apparently doesn't contain the stack pop's that every return from a function requires (all functions push stack and reserve stack space). Try looking at the assembly code output instead.
Are you looking for a single book covering all 3 topics? I'm using pdf versions of books I was able to find on internet. I use: WPF 4.5 Cookbook by Pavel (464Pg) I tried a few different books and this one is definitely the best read. C#6.0 In A Nutshell by Joseph &amp; Ben Albahari (1000+ pages) It covers a lot of topics and is pretty straightforward
I don't really think you should focus on performance at this point. My take is that you should focus on readability, and if this ends up being too slow (when you profile it), you can optimize it. Having said that, this should get you started: foreach(string line in str.Split(new [] { "\r\n"}, SplitOptions.None)) { var list = line.Split(','); // then get each item as you specified // note: you might want to .Trim() each item before storing it, or // split it by ", " - depending on your exact scenario } 
Yes, that's what i was hoping as welk! Xamarin is cool but quite expensive (especially if you're already paying MSDN as well)
Awesome news, been hoping this would happen at some point but didn't think it would be for a while. Hopefully this will lead to xamarin becoming more accessible financially.
Big news. C#: One language to rule them all
I suspect Xamarin will be included with Visual Studio as a whole. I don't see why it would be a separate purchase, especially with MS's increasing push to make Visual Studio your one stop shop to do anything in 
Holy Shit! What an awesome time for me to start learning C#! Good for Microsoft.
That's not going to be a performance improvement, and much more manual work. His code first splits it by line breaks, then splits it by commas. With yours, you'd have to manually create each new string with a new variable name, and then add another line to perform a split on that new variable name.
My guess on TypeScript. But I want more C# feature and syntax in it. :)
FUCKING FINALLY!
Expect it
I thought about it, then found a loophole : that's not the number of comment per se, but the number of top comment. 
Fucking finally! Now hoping that their tools will become affordable.
While LINQ works, you could also just do this: StringBuilder blder = new StringBuilder(); for(int counter = 3, length = parts.Length; counter &lt; length; ++counter) { blder.Append(parts[counter].Replace("*", "")); } string final = blder.ToString();
Hell yeah! This is great and makes a ton of sense for MS. Can't wait to see what they're able to do with it. 
Finally. Everyone has been waiting. This is huge for C# devs and app creators.
This would be awesome! 
This is probably good news. Visual studio has always been a lot more stable than Xamarin for me. In fact, I've never seen Xamarin actually work. But tbh what would make me really happy is if they manage to make it compile to iOS (and sign/upload the IPA) on a PC. It's ridiculous that i need to buy a Mac to be able to release anything to the app store.
This is a great idea. Might really take off in the near future, as the demand for programmers rise and more people want to learn code.
Hope this won't be the end for xamarin on linux
I moisten at the thought 
It's true we might see a bit of a slow down in some areas, but there are things Xamarin couldn't afford to scale that MS can. Hopefully they scale and price Test Cloud more appropriately, because the core product is already great, they can just piggy back on Azure's infrastructure now. Also, they can hopefully throw a team at building a proper cross-platform visual xaml designer. 
lol. I laugh but I moisten too.
&gt;Do you think smaller/startup companies see that as a red flag They shouldn't. You're still a student, so actually any experience in any stack is preferable to the clueless ones. And there are startups using Xamarin/MS stack. &gt;are the skills/tooling absolutely transferable to working with equivalent technologies Not 'absolutely', but at least source controls (svn, mercurial, git), the 'low' level JS, HTML, CSS and the basics of SQL should be the same. Heck, the understanding of coding patterns are actually more valuable than understanding of syntax. &gt;I don't have a Windows computer lol. Now this is awkward. Sure in ideal world you'll be coding in Visual Studio Code for the ASP.NET code, git push them for remote build and watch the glorious deployment. But it could be that the uni actually require the full VS IDE for this, since VS Code still lack a lot functionality compared to the full VS. Intern should get their own work machine from the employer by the way.
I think Forms uses fundamentally the right approach to sharing UI code, it's just not quite as mature as it needs to be yet (though it's already very useful). At its core, it's the same philosophy MS's xaml implementations have always used. Define default controls and give them a default visual implementation that can be overridden as needed. All Microsoft's built-in xaml controls (wpf/silverlight/winrt) have core functionality that is completely separate from their visual representation. You can either use the default visuals, slightly modify them with styling, or completely replace them. This is how Xamarin.Forms works, you just have three defaults, one for each platform, and you can choose to override them on a per-platform basis. The lack of a visual designer is one of the big gaps, but that can be fixed. In addition, they can continue to mature the core of Forms to the point that manually overriding the defaults becomes less necessary. But I see no reason those things can't be done. I'm not sure why you think the value of a true native UX is over-stated. If anything, I see more and more people realize each day that it's extremely important. 
I suspected they will do this. It's a great way to stay relevant in the mobile space
Wow the typescript hate is strong in this sub! In terms of purely language syntax I do like typescript slightly more! Edit: context = commenter above had lots of down votes.
Assuming the update doesn't change the primary key, updates are faster and cause fewer locking issues than deletes and inserts. They will also fragment the table and indexes less. (If you're updating the primary key then the impact on indexes and fragmentation is going to be pretty much the same as deletes and inserts). Delete and re-create is easier to code which is why you'll see it used a lot. But updates are generally better. You have to handle the case where it's a new or removed ingredient too though, so you'll end up doing a bunch of updates plus a few deletes and a few inserts (which is why it's easier to just delete everything and re-insert).
Regarding scaling - a really interesting (at least to me) solution to this kind of situation is Event Sourcing. With Event Sourcing, you neither Update nor Delete. Instead, you track Events that happen over the Recipe's lifetime. You design the application in a way that you can 'project' the state of the Recipe at any point in time. Some cool implications with all this for scalability and even security. There's some good talks out there by Greg Young on Event Sourcing and CQRS http://youtu.be/JHGkaShoyNs
Does that essentially boil down to continuously creating new records for each update?
The point of an open source implementation is to avoid a single corporation dictating development.
I can't even imagine the inflation one would see with a large database which is updated hundreds of thousands of times a day.
Let's hope this means Windows Phone can now die a quick death.
oh thank god
With Microsoft's changes lately I don't see why it would be.
**Technically** perhaps but given how advanced the C# compiler has become, this will often times be optimized out anyhow. The sub-millisecond gains are not worth 3 additional lines of worthless code. You should write code in the most clear and concise manner possible. This is excessive premature optimization.
I was once one of those stupid guys, given how Bonobo, Evolution and Natilus were so close to Microsoft's products. But I am over it and excused myself to Nathan and Miguel a few times online when I had the opportunity. The fact is that there is no money to be made on GNU/Linux desktop. 90% of its users would just pirate software if GNU/Linux did not exist. It seems I am a rare animal by paying for distro releases and giving donations to key projects. 
You can get the experience by making your own systems in your hobby/pet projects. GitHub is practically a resume at this point.
*Working with Legacy Code* by Michael Feathers is also a great read. 
Considering I have three of the four listed, I know what I'm picking up on Amazon tonight...
Thanks :D
Lots of good stuff here. C# introduced the Task Parallel Library (TPL) a couple versions ago (4.5 I believe) along with the async/await keywords for asynchronous programming. Pure gold. Highly recommended Stephen Cleary's *Concurrency in C# Cookbook*.
i'd agree with you on key input and navigation conventions.
Wait for the dust to settle on .NET Core 1.0 first...
F#! and ANSI C 
Lol... Well.. Tell that to the [$10.7 Billion] HEB
Considering Xamarin already gave a free subscriptions to anyone who had a published WP app It will make sense to at least give MSDN subscribers a similar subscription (with VS integration but no support tickets). Hopefully they give that to BizSpark members too
Along with Asp.Net Core, it really is
Why would you want "typescript with more C# feature and syntax" when you already have C#? 
Whoa, is annual subscription really $500? That's a lot. 
I wonder what this will mean for Unity....
Default access modifier for fields is private. https://msdn.microsoft.com/en-us/library/ba0a1yw2.aspx I strongly recommend to set the access modifier explicitly and to wrap fields in propertiers. public class Car { public string Color { get; set; } public int Year { get; set; } }
We're not allowed to use get;set yet, since we don't quite understand what it does yet. What is the difference between public fields and public properties? And why aren't they public to start with? Classes are public unless you specifically write private in front of them, right? So why not be consistent with it? Btw, thanks a ton for helping me
As already said, run a profiler. But if you must go in blind, first thing to do is isolate the most frequently executed parts of the code and work through them. Get some IDisposable action going to clean up memory, convert standard variable declares to using statement for disposable objects. If it's a database backed app, use an SQL profiler to find the slower queries and fix them (judicious use of indexes etc) But optimisation is an art, and is very dependent on the specific app and its usage patterns
Fields are just module/class scoped variables that are exposed (generally) externally to the class. You can set a value and get a value from them, and that's it Properties allow you to implement additional functionality when a property is set, eg setting a dateOfBirth property could also set an age property at the same time. This allows you to encapsulate the extra business logic within the class, rather than have to externally calc the age every time you set the dateOfBirth property
You hate JS and everything else that enable you to make stuff without writing JS? You must be a salty backend dev that's 15 years behind everybody else. Typescript is nice but there are much cooler languages that compile to JS. I really like Elm : a pure functional language. It feels like the next level in frontend development. 
&gt; Each instrument would have its own tuner, or do you mean you might have more than one tuner for a given instrument? I just meant a 1:1 mapping. &gt; A tuner per instrument would probably be wrong, yes - but that means a concept is being missed rather than needing to build MI. The concept might be note based tuning, or string based tuning etc. Well again, I don't think the instruments example would have benefited from MI. Actually I don't think a lot of designs would benefit from MI- it's just one of those patterns that's bad 90% of the time but unbelievably useful for the remaining 10%. &gt; This all being said though, I'd never say never regarding anything and sometimes some mad MI skills might be the right fit. Not sure I'll see that day, mind, but you never know :) Well I often hear people say "you never need MI!". They're right, but then you never *need* LINQ, either. It's just about fitting the pattern where it makes sense- and the more you show people examples of where it can be used, the more comfortable they'll become using it, I think. Nonetheless, like I said, I don't think it's a pattern we should be using everywhere. But like *you* said, I'll never say never to any pattern. :)
The word 'empower' makes me want to punch people in the face.
Additionally, you could write a custom constructor - and instantiate the variables right off the bat! class Car { private string color; private int year; public Car(string c, int y) { color = c; year = y; } // If this method was private, I couldn't access it from my other class ("Program").. public void ShowValues() { Console.WriteLine($"Color: {color}, Year: {year}"); } } class Program { static void Main() { Car tesla = new Car("black", 2016); tesla.ShowValues(); // I can access the method, yey! } } Do you see how that works?
MonoDevelop might actually be maintained and improved. I know everyone is excited about Xamarin Forms, but don't forget they are the (absent) custodians of that IDE as well. I'd love to see it either get rolled into VS Code or, at least, modernized and maintained.
You can always use C# in front end using transpilers such as Bridge.NET or SharpKit.
Well, I made things before javascript existed, and I didn't hate those things.... But yes, everything since has been hateful =) 
&gt; It's ridiculous that i need to buy a Mac to be able to release anything to the app store. The same is true for Windows and its Store. But nobody seems to complain about that.
I might be wrong but I feel more confident with TypeScript as transpiler even when I saw the great work behind Bridge.NET. 
Anyone else notice that there is this huge set of programmers who have to chime in on any optimization discussion to insist that any optimization is premature... yet...yet EVERY day we use software that is inexplicably slow? 
Well they should! It also surprises me, since Microsoft seems all about open standards these days.
*DEVELOPERS! DEVELOPERS! DEVELOPERS!*
Okay so the value is a calculated value getting the area and circumference of the shape. The text box is meant to display as just 2, 3, 4 decimals depending what radio button is used. Will I use something like if (radioButton == this.rbtn_twoPlaces) //two places is the name of the actual radio button, right? sorry im such a newbie// { someString = string.Format("{0:0.00}", areatxt.Value); }
I'm always looking for ways to improve! You're right, making it a habit to write whether it's public or private is something I need to start on - to clear up any confusion for myself. I didn't know you could instantiate an object like that, but it looks a lot nicer, and it takes up less space! Thanks for helping me :)
i'll check this out! thanks!
Correct, but you can't access the variables inside of the Car class just yet. They are private, so you need **get/set methods** - or, you could just write them as **properties**, like this: class Car { private int year; public int Year { get { return year; } set { year = value; } } } class Program { static void Main() { Car ferrari = new Car(); ferrari.Year = 1984; Console.WriteLine($"The year is: {ferrari.Year}"); } } 
Thanks for this! 
Console.Write("{0} {1}", sample1, test); first parameter is format string, followed by multiple args[] highlight Console.Write and press F1 for help :)
Wow that is a sweet trick! Thank you! :)
Ok that actually makes sense.. essentially Console.WriteLine was not built for whiting strings in sequence... and assumes the second string (separated by ",") is some sort of argument? that answered my question Thank you :)
Check out String.Format() for some more information on how Write is using the first argument as a format string and the second as an argument. You may also wish to check out the params keyword.
&gt;OTOH the clear focus of Xamarin as a company may become diluted under a bigger corporate vision If it's any consolation, MS is really good at ~~having teams work at cross purposes~~ decoupling teams from one another.
I have a few questions if you don't mind. Why use get:set in your code? Writing class Car { public int Year; } class Program { static void Main() { Car ferrari = new Car(); ferrari.Year = 1984; Console.WriteLine($"The year is: {ferrari.Year}"); } } I was also about to ask why you used $ before your string, but after removing it, I figured out it's an easier way to write a string with a variable, instead of writing ("The year is: " + ferrari.Year);
It really depends on how complex your language is. Generally the idea is to split your string up into "tokens" by reading each individual character as few times as possible. On top of that you want to ideally want to parse the expression backtracking as little as possible. It looks here like you are trying to process some basic math. This can be done pretty efficiently on a stack with a fairly basic state machine. 
I keep getting this error whenever I am converting the number into the string format, "'TextBox' does not contain a definition for 'Value' and no extension method 'Value' accepting a first argument of type 'TextBox' could be found (are you missing a using directive or an assembly reference?) " and I'm not sure what I'm doing wrong. The value is meant to be the area of a shape which is calculated by two trackbars within the form.
Now that is funky ^^^^^^^and ^^^^^^^subject ^^^^^^^to ^^^^^^^fun ^^^^^^^injections
Technically, you **could** do that. It works, but is **not** considered good practice. *Field data* of a class shouldn't be defined as public. You want to *preserve the integrity* of that data, and only allow *controlled access* to it. To achieve this in C#, we use [properties](https://msdn.microsoft.com/en-us/library/x9fsa0sw.aspx). You can write properties shorthand, as a full implementation, or "Java style": class Animal { // Shorthand. public string Name { get; set; } // Full implementation. private int _age; public int Age { get { return _age; } set { _age = value; } } // Java style getter/setter methods. private int weight; public int getWeight() { return weight; } public void setWeight(int w) { weight = w; } } class Program { static void Main() { Animal bear = new Animal(); bear.Name = "Bob"; bear.Age = 12; bear.setWeight(900); // String interpolation (new in C#6) Console.WriteLine($"Name is {bear.Name}"); // String formatting (most common) Console.WriteLine("Age is {0}", bear.Age); // String concatenation Console.WriteLine("Weight is " + bear.getWeight()); } } I also included three different ways of writing strings with variables. Could come in handy! 
Strings in C# are immutable so you can never change a string you only ever create a new one. 
And I will incorporate an if statement here too? because I have different shapes which need to be drew resulting in different calculations going in
All of these things happened because javascript was the only choice on the browser. So we made server javascript so we didn't have to context switch when making a web app, and we made type script so we could simulate have a better language on the browser. These were great things to do, but they were done not because they were innately smart to do, but because we had that limitation, of needing to support the browsers out in the wild, and so we had to use javascript. One day browsers will agree on a proper byte code (or similar) to support so languages can compile to that, instead of javascript, and things will be better. Those who actually love javascript can keep using it. Those who love typescript can keep using it and get the advantages of not targeting another language as the first step toward compilation. Meanwhile, there is a whole universe out there of "Things that are not web applications" and we already have too many languages there, so we aren't too interested in this month's latest javascript transpiled idea, since everything neat about it already exists somewhere between ANSI C and Haskell in 10 different variations. Now back to functional reactive programming with Bacon.js, I've skipped over a couple javascript fads and have to catch up. 
I'm having a hard time wrapping my head around get:set, even after reading the documentation you linked. So you basically create a public variable to retrieve whatever data from Main (or any other class/method), and then since it is in the same scope as our private variable, the private variable copies the new value from our public variable? 
Well, he means Monodevelop. Which is a Xamarin product. It's the C# IDE for Linux platforms.
[I made that a while ago...](http://github.com/Banane9/EquationAnalyzer)
It might help to think of a property like a *hybrid* between a field (variable) and a method. In Java, it's common to create a *private field* and two *public accessors* (getter / setter) methods - to control the access to that field. C# simplifies this technique. Using **properties**, you only need to do this: public string Name { get; set; } This is **shorthand**. The compiler will create a private field for you, *behind the scenes*. You can access it through the public Name property, without even knowing it exists. I believe this is much simpler, but understand how it can trick people. The same thing in Java would look like this: private string name; public string getName() { return name; } public void setName(string s) { name = s; } Does that make it clearer? Feel free to ask more, glad to help!
I wonder if Miguel will reign in his twitter posts....
So, your problem with the null propagation operator is, that it's not an implementation of your fluent API?
I think you are looking for a WrapPanel 
&gt; and assumes the second string (separated by ","..) I wouldn't say "assumes" - argument order is part of the language spec for defining methods; and the documentation for this particular method tells you the meaning of the arguments. Before you use a method, always always always read the documentation on it. Get into a habit of typing 'msdn &lt;thing&gt;' into google, eg, 'msdn console.writeline'.
I think I get how it works, but I'm not sure why we use it. Where is the point in creating a public accessor AND a private accessor (which holds the same data) ? Why not skip it entirely, and just make the variable public? You mentioned the reason being that we want to preserve the integrity of our data, and have controlled access to it, but can't you just edit the public variable, and that will affect the private one too ?
Yep, that's what I got from it as well.
You could use something like this: https://www.nuget.org/packages/YaccLexTools/ The nuget page even mentions a calculator tutorial.
There's no docs for this, and for that I'm not really sorry about. I'm pretty horrible about documentation in general. However the Project includes a Sample Context, and a test harness that you can use to get an idea of how it all works. I've made it as simple and straight forward as possible. Derive your class from MongoContext, and expose your Collections as MongoSet Properties. As with EF the Context will attempt to auto discover the Sets and create them for you. MongoClassMap wraps the BsonClassMap and allows you to auto discover the mapped classes, or you can override the OnRegisterClasses method, and dynamically add class maps during context creation. MongoClassMap allows to to specify the Collection Name using SetCollectionName, and it also allows you to specify and create Indexes on your Collections. I'll be adding some basic documentation in the coming days. 
I've always used an IContext that exposes methods of the EF context like saving etc. It provides loose coupling with EF and allows me to do things like Mok contexts... Shrug 
This looks interesting! Perhaps you could add the same comment in the docs :)
I think so, but he may auto-censure himself a bit.
So... what's the problem exactly? Is it the error? If so then a foreign key constraint is being violated. From what i can tell you are trying to add a product to a customer that dosen´t exist yet ence the constraint violation.
On mobile so please excuse any syntax errors. * Remove ProductID from Customer, unless Customer. * Change the public List&lt;Product&gt; {get;set;} to public virtual ICollection&lt;Product&gt; {get;set;} Assuming that a product could have a relationship with more than one customer (many to many relationship) you have two options on what to do next. First is you can just add public virtual ICollection&lt;Customer&gt; property to Products class. The other is to use fluent binding to explicitly tell EF about the many to many relationship. Please refer to this [MSDN page](https://msdn.microsoft.com/en-us/data/jj591620.aspx#ManyToMany) on the syntax. This will create a new table in the database that has the relationships between Customer and Product.
Yeah i dunno, im so lost atm in my own code trying to fix this. What i want is that a Customer can have loads of products. Then i want to print out a customer as the Headline of a table that has all the products in it.
How involved is the database? 
Are we just supposed to guess what your program does and then guess what you've done wrong to make it so slow? Probably bad programming of some sort.
System.Environment.Exit(0); https://msdn.microsoft.com/en-us/library/system.environment.exit(v=vs.110).aspx
You want to return a value. Could be an integer code, could be a bool 'continue' flag, etc. Alternatively, you can declare a `private bool stop = false` class variable and in Method4 set stop = true. Then before each step put `if(stop) return;`
As far as "practical" purposes are concerned, you generally want to use Getters/Setters (Accessors/Mutators) to help with maintainability in the future. A popular example is validation. Let's say I have a your program. namespace ConsoleApplication7 { public class Car { public string color; public int year; public string name; } class Program { static void Main(string[] args) { Car car = new Car(); car.color = "green"; car.year = 2002; car.name = GetCarNameFromFunction(); } } } Well. In this example I'm using some ones function to get a car name (lets say it pulls it from a database). Who knows what format the database is going to pull in. Maybe it pulls in a full name of "Kia Optima Ex". Well if I don't use a getters/setter, the name is going to be "Kia Optima Ex". By using a getter/setter I can filter/validate the data that gets stored or returned. Maybe it looks something like this... ... { private string name; // This function gets the name with the model filtered out public string getName() { return FilterModelName(name); //uses arbitrary function to filter the model out of the name } //Sets the name of the car, but with the original name (model name still in it) public void setName(string value) { name = value; } } public string FilterModelName(string fullName) { //Does stuff to remove the model from the name } ... In this example I may save the name as "Kia Optima Ex" but the program will always filter out the model and give me "Kia Optima". This way you can easily hop in to make a change. If I used this everywhere in my program and DIDN'T use getters/setters I could have to go to hundreds of places and use that "FilterModelName" function. In this example, I only have to put it one place to use it. This example could be tweaked infinite times. Maybe I want to return the name in all caps, so I change the casing in the "getName" return. Maybe I want to store the cars colour as a Hex value but return the colours actual name when a user uses "getColour". [Here's an example](http://stackoverflow.com/questions/1568091/why-use-getters-and-setters) of someone asking why on Stackoverflow. There are many more examples there. I hope that sort of made sense aha. Edit: Some better examples would probably most likely make changes to the Setter. Generally you want to filter what's actually going to be stored inside the object more so than how you filter when getting the information. 
It actually does make sense. But in reality, couldn't you just start by using a public variable, and then if you later on in your program realized you need some sort of filter, then rewrite your public variable to get:set? 
Yeah, i'm trying xd Just cant get it to work i dunno. and i cant get back to the point where i was where it worked but i got that error :D Head is so tired :&gt;
So don't chain the null checks. This code would NOT have made it through a review here: var obj2 = obj.MethodA() if(obj2 == null){ var obj3 = obj.MethodB(); if(obj3 == null){ var obj4 = obj3.MethodC(); ... } }
you have created a very helpful and clean designed application. it's easy to read and easy to understand your code. nevertheless i would encourage you to comment your code and your design much more. also you could include more then one git-branch in your development process just to practice these parts of the job as a developer.
Yeah i dunno, but when i tested to only have the Collection there it didnt count it as a FK in Customers?
Indeed.
The whole site is pretty retarded. Even the domain name, most likely made by a Java shill.
This great news. I always wanted to get into mobile app dev for some personal projects. But xamarin pricing always kept me away. Hopefully Microsoft releases xamarin with VS pro or VS community. 
I did the following on my computer and it created a schema with a Customer table having a primary key and a Product table with primary key and nullable foreign key. I'm running EF 6, so I don't know if it's a version thing. public class Customer { public int CustomerId { get; set; } public List&lt;Product&gt; Product { get; set; } } public class Product { public int? ProductId { get; set; } } 
The community appreciates your deep insight and productive comments. They should make you an MVP.
I just got home but ill check it out tomorrow! Is the '?' a thing that is needed? 
&gt; And why aren't they public to start with? Classes are public unless you specifically write private in front of them, right? So why not be consistent with it? This varies between schools of thought, but I come from a school of thought were EVERYTHING should be set to the most restrictive level of accessibility needed. This ensures that some other consumer of your class doesn't meddle with the exposed members, potentially breaking your class when used incorrectly. I can only assume that the default accessibility of classes facilitates this school of thought, but it is just an assumption. Personally, I always start with everything as private and expose methods as necessary. You don't have to do this, I just find that by getting to this habit makes it easier to switch to writing shareable libraries. Here are my personal (basic) thoughts on the subject: * If nothing outside of this class should need access to it, make it private. * If the field holds any sort of state required to manage the data in the class, make it private or at least public *get* only * If you want children of this class to be able to access a member but exclude non-children from accessing that member, make it protected * If you want to expose a member only to other classes within the same assembly (same project), in other words, public to everything within the assembly but hidden to everything outside of it, then make it internal. Using internal effectively can be tricky, but very useful. If you're new to development, there's a good chance you won't need to touch this one for a while. * If you want anything outside of the class to have access to it, make it public.
What does the guy expect? All any one is giving him is just general guidelines on optimizing for speed. He didn't tell us anything about what he's doing. Is it a website? A console app? Winforms? Does it use a database? Web service calls? What are people bitching about? Is it UI unresonsiveness or tasks taking to long to run? I could have been less rude but I also could have been more. I have a higher expectation of people being able to describe a problem when the whole crowd is developers (this guy apparently a professional). It's a core skill of the job. I don't think OP is an asshole or anything, I just think he should already know he has to give us more than the vaguest possible description of his problem if he wants any more than the vaguest possible answers.
Perhaps the snark wasn't appropriate but I don't feel bad about it. I hang out in a lot of subs where people ask for help with things and see a really annoying amount of posts asking for help while putting no effort into describing the problem as though we should all automatically understand what they're talking about. It gets on my nerves. I want to help you, that's why I subscribed, but don't make me do a bunch of unnecessary work to pry information out of you that I need to help you.
Needs more
&gt; You can't learn good system design in a vacuum. It's not something that can be self taught. I have to at least partially disagree. The entire process of learning advanced topics like this through experience comes from running head first into walls with any project regardless of team size. If you're working on the team, it's probably because the project is larger and you will encounter more problems to solve in much quicker succession than if you were working in a vacuum, but that doesn't change much about how we learn to solve those problems. Even simple projects have the potential to have very complex problems in at least one area of solution. Whether or not you learn this in a vacuum or not is almost irrelevant imo. It helps to have other developers that understand the problem domain right there with you to share their insights, but that's not enough to say that you can't learn good system design in a vacuum -- but I guess it really depends on what you consider to be a *vacuum*. I've seen much better solutions come out of those rare developer blends that understand how to combine personal knowledge with community knowledge and thrive on the benefit of not having less skilled developers pollute their thought processes. So it's certainly possible. Any rate, the more problems that you encounter and solve as a developer is going to bring that experience that you need and pet projects and contributing to open source are wonderful ways to get experience outside of your job. The solutions that you come up with in those pet projects won't always be the best solutions, but now you've at least encountered the problem and solved it with a solution that you understand. So now when you encounter it at work, it won't be foreign to you. More importantly, now when you see someone else's solution to the same problem, it'll make more sense to you and either you see it as a better solution that you can absorb, or maybe your solution is better and you can contribute, or maybe a combination of the two will make it even better. &gt; A good design is highly specific, a good design for problem X is almost always an awful design for problem Y. I think my explanation above supports this statement as well. &gt; And FOSS systems that do have good system design tend to be way too complex for a person to figure out why it's a good system design. I think this is a true statement at least most of the time. However, it has been my experience that these types of complex systems tend to be mind-numbingly complex not because they have to be but because that is how it came to be. But again, it really depends on what you consider "complexity" as that concept varies from developer to developer. What I consider clean and robust is considered complex to others while I find what others consider simple and straightforward to be immensely complex and unmaintainable. I think these complext but "well-designed" systems really are the product of whomever is overseeing it's development, whether it be a developer lead or an architect, or if it's a free-for-all. There's a team here where I work where the manager (whose skill set is 15 years out of date) tells everyone how to code the project. The solution does everything it's supposed to at the moment, but the code base is hell to work in. Then there's my team where the manager has the team leads manage the architecture. The product is sturdy, does what it needs to and it is well designed at least to the developers' needs. My point is that there is waaaay too much variability to make broad statements like "you can't learn good system design in a vacuum" or "good system [design] tend to be way too complex for a person to figure out *why* it's a good system design" But that's just my .02
Agree with most other comments. Note that I've used dotTrace with awesome success. It's really worth it -- it's quite easy to use, and very likely you'll be surprised on the findings. Most accurate results are when Profiler Options &gt;&gt; Line by Line + enable checkbox on "High accuracy" (visible only when Details checkbox is checked). 
It's PascalCase and camelCase.
Well I can't really disagree with you there. I also get annoyed when folks don't at least make an effort to solve the problem. But one thing that I learned a long time ago that sometimes trying to figure out *how* to ask a question can often be like 80% of the battle, particularly in our field.
Graceful System.Environment.Exit(0); Kind of a big deal. throw new Exception("WTF HAPPENED?"); Do something else instead. void Method1() { var shouldExit = Method2(); if(!shouldExit) { TraceMethod(); } else { //We could do something else instead.... or we could not do anything and the application would end! } } bool Method2() { var shouldExit = Method3(); if(!shouldExit) { RunFormula(); } else { //We could do something else instead. } return shouldExit; } bool Method3() { return Method4(); } bool Method4() { return bit &gt; 0; } Like Exceptions? Hate bools? void Method1() { Method2(); TraceMethod(); } void Method2() { Method3(); RunFormula(); } void Method3() { Method4(); } void Method4() { if(bit &gt; 0) { throw new Exception("Something explaining the error here."); } } 
Both are acceptable usages. I prefer the former because it removes any ambiguity.
I don't see anything too bad in there, I'll add a couple of comments. **utils\helpers\consolehelper.cs** Why not change this to an extension method? You are already using them elsewhere. **utils\helpers\markuphelpers.cs** *GetAllUrlsFromHtmlDocument* I would just return an IEnumerable&lt;string&gt; or IList&lt;string&gt; instead of the actual object there is no real need to convert it to a List of strings that should happen when it's added to the linkUrls in GetAllUrlsFromMarkup Although by having the toList there removes need to check !nodes.Any() since calling Select on an empty list and then calling toList on that will give you an empty list of strings, so checking if there are any in the list is a bit redundant. *GetValidUrlListFromMarkup* If you change the return value of ValidUrlParser.Parse to a Nullable so from: public bool Parse(string url, out string validUrl) to public string? Parse(string url) you can clean up your GetValidUrlListFromMarkup like so return GetAllUrlsFromMarkup(markup,checkimages).Select(x =&gt; parser.Parse(x)) .Where(x =&gt; x.IsValid); Whether you think that is easier to read or not is on you, though I do prefer less lines of code. **General Comments** It's recommended to always use curly braces on If Statements to help protect from unnecessary bugs down the road, since if you have to add another statement to an If without curly braces you may forgot to add the curly braces. It's not a big deal but I have seen many many stupid bugs from people doing this. You don't inform the user if there was no response to the request in send request you just exit, and the user will never know if it's taking a while to process the links or just not happening, so some sort of visual notification of an error or that the app is waiting would be nice. Overall pretty nicely designed app like I said I had no real negative comments.
If you look at [this specific overload of the Console.WriteLine method](https://msdn.microsoft.com/en-gb/library/828t9b9h\(v=vs.110\).aspx) you can see that the second parameter is `params object[] arg` [params](https://msdn.microsoft.com/en-us/library/w5zay9db.aspx) is a special keyword that lets a method take a variable number of arguments as long as the params parameter is the last parameter in the method signature. This is why Console.WriteLine can be called like this: `Console.WriteLine("{0}{1}{2}{3}{4}","One","Two","Three","Four","Five");` even though there isn't an overload that takes 5 strings.
I disagree. Comments are a liability and quickly end up describing what the code used to do before it was changed and somebody forgot to update the comment. http://butunclebob.com/ArticleS.TimOttinger.ApologizeIncode
For your next improvement iteration, you can speed it up a lot with threads and Http GetAsync https://msdn.microsoft.com/en-us/library/system.net.http.httpclient.getasync(v=vs.118).aspx You are already using ExecuteAsync. You should not use threads unless everything is threaded up to your Main method (Main cannot be async since it's the entry point). Using threads randomly in a single-thread context will often lead to bugs. Also, never have a void method with async calls. Your method should be declared as "async Task"
I could argue that it makes things more ambiguous.
Well you can argue whatever you want but fact remains that both `myVar` and `MyVar` are forms of camelcasing. Distinguishing by 'Upper' and 'Lower' makes more sense to me than having to remember what 'Pascal' refers to.
Just something quick as this is a pet peeve of mine. In `RequestModel` you have three fields and one property declared as: public string Url; public string ReferrerUrl; public bool IsInternalUrl { get; set; } public RestClient Client; **Don't use public fields!** A field is a just a member variable of an object (class, struct). A property is an object member that defines *accessors* through which the underlying, or backing, data of the property can be read or set. In the above code, `IsInternalUrl` is a property with public `get` and `set` accessors. The rest are fields. Properties are important because they provide *encapsulation*. You're providing an access point of sorts for other objects and callers to read or write to some internal data. For example, suppose you wanted external objects to be able to read the `Url` field but not change it--you would define the property as `public string Url { get; private set; }`. The private keyword specifies that only the object in which the property is declared can change its value. You could also change `private` to `protected` to only allow objects that inherit from `RequestModel` to change the value. If you *didn't* turn `Url` into a property, an external object could change its value and `RequestModel` would have no way of knowing, potentially leading to undesired behavior. Changing the three fields to properties by adding a set of `get; set;` default accessors, you haven't really changed the external or internal behavior of your object, so you might be wondering why it's a good idea to bother using properties when they're publically readable and writable. Suppose you wanted `Url` to be readable and writable by anyone, but once you start crawling, you want to throw an exception when an object tries to change the value of the `Url` property. If `Url` was still a field, you would need to a) change it to a property or b) provide some other mechanism to update the value. Both of which are *breaking changes*. If it was already a property, you could simply modify the `set` accessor to check if you're currently crawling and if so, throw an exception, otherwise continue with setting the value.
Can you deploy report directly from VS2015 to a SQL 2014 server? I am having trouble with that. Anything you can share would be awesome!
Hey thanks! :)
I feel just CQ is not adding a lot. Using a CQRS pattern with Domain-Driven Design and Event-Sourcing, now that's something.
Camels only have humps in the middle. So `camelCase` and `PascalCase`. I follow the c# rules here: https://msdn.microsoft.com/en-us/library/x2dbyw72%28v=vs.71%29.aspx?f=255&amp;MSPPError=-2147217396 except that fields are preceded with an underscore to separate them from local variables.
Can you just reset your preferences or repair the installation?
ReSharper has been known to break intellisense.... Not sure if that's your issue but just wanted to put it out there 
Thanks for that very thorough explanation. I'm amazed at the amount of help I've received in this thread, and the kindness you've all showed. Your TLDR summed it up nicely, but I'm still new to C# (and coding in general), so I'm having a hard time seeing the bigger picture for now. I'm fine with using get:set now, understanding part of why I do it, but not understanding it fully. I will have to read further up on it later on :)
Reset of settings always fixes for me Click on "Import and Export Settings"Select "Reset all settings". 
I write those Attributes which then use Repositories using DI.
You shut vs down and restarted it, right? Sometimes VS freaks out, and weird stuff happens, but when you restart it, it's fine. Sometimes. Is it every project or just one?
on my localmachine using visual studio. So lets say I have some records fname lname age email ================ joe blow 27 joeblow@gmail.com john toe 12 jtoe@gmail.com ... 1 million + names joe blow gets a personal url to goto joeblow27.somedomain.com i can look up age email etc and prepopulate the page. thats the end result (on some production server) I'm starting the project in vs so I want to do joeblow.localhost.com:port# johntoe.localhostcom:port# I was thinking that i should just do localhost/joeblow during development and in production use IIS i do some subdomain to folder rewrite joeblow.somedomain.com --rewritesto-&gt; somedomain.com/joeblow seems like this would be easier but I wanted everyone's take on that. 
CQRS, DDD and Event Sourcing to solve what problem exactly? 
I get why you want it. Easy workaround for now would be to add extension methods to do it.
[I too.](http://imgur.com/Y9o0p)
Looks pretty nice, I'd suggest you try to not rely on Slack as an output channel but instead have an interface like `IOutputSink` to where you can push your messages. So in the future you'd not only push your messages to Slack but maybe have them emailed or put into a database. I'd also look into not only relying on app.config but maybe have the program start with parameters to an external config file. That way you can have multiple instances of the program running without needing multiple copies on disk.
Didn't read the actual article yet but I went to watch the Repository pattern video. Was getting super excited for the first tutorial that implements repositories correctly. The author was saying all the right things and then I see Find(Expression&lt;Func&lt;Course, bool&gt;&gt; predicate)...
That code looks pretty clean from what I can see on my phone. I will need to download it and try it out, but it looks pretty sweet. Good job!
Very cool. I'm always dabbling in the .Net queueing space, e.g. RabbitMQ, EasyNetQ, Hangfire, etc. What was your motivation for building this in light of the alternatives? 
I do and I am now thinking that is the problem
Thanks I appreciate it!
My original intent was to use EasyNetQ and RabbitMQ for a project I was working on. At the last minute we found out that due to some odd quirk that we weren't going to be able to use RabbitMQ. The project was already using Redis but the built in PubSub wasn't enough for what we needed. So, EasyRedisMQ was born (inspired from the functioning POC that I had built out with EasyNetQ/RabbitMQ).
Can you explain what the issue with that is? Is it because expression is costly and adds nothing of use over a regular delegate? Is it because that method does nothing that EF doesn't already do?
EF is not really an abstraction (maybe abstraction over a specific database). The Repository is so absurdly heavy abstraction that people naturally prefer to make it leaky so that it is not that heavy. This is why I prefer to simply not abstract my data access rather than use a repository. A proper repository (as the one described in the video minus the find method) would indeed provide an abstraction layer but the cost is so high that I'd take my chances with changing all my business logic code to use another data access technology if needed. I feel like it will be less work than building a proper repository to begin with.
It is because it leaks the ORM out of the repository. The use of Expression makes it impossible to change the data access technology to anything but another heavy handed ORM (basically you can change from EF to NHibernate and that's it but this is not very hard to do even without repository). You use repository in order to provide abstraction and you fail at abstraction.
Removed, Rule 5. Try engaging in the /r/csharp community more beyond your own content.
I was having problems with the Intellisense about a day or two, I went to Tools -&gt; Options -&gt; Text Editor -&gt; All Languages unchecked the "Auto List Members" and then checked it again, fixed the problem for me, you might give it a try.
The problem is that event-sourcing is not "real-time". There is eventual consistency to deal with, and most applications are not designed with that in mind, and most business models do not react well to situations where you write data, and it's not immediately available for reading.
Eventual Consistency is usually not really a problem in any domain, people are just scared of it. Besides, 'eventual' here means 1 second or less usually. We're not talking minutes here if you do it right.
but it sucks
&gt; Assert.That(Method(method), Was.Indubitably.Instigated(2).Times().My().Dear().Watson()...). Lost it at this haha
If you are keen on using C# for game development why not use Unity or MonoGame?
That depends on how often your sync jobs run. Regardless, perhaps you should read this: http://udidahan.com/2011/04/22/when-to-avoid-cqrs/ CQRS and event-sourcing create massive complexity that most applications just don't need or want. Many kinds of applications would have all kinds of trouble if the data they just wrote was not readable immediately. Some, are just fine... And, Event-sourcing is really only useful if you need to replay actions, or need to control access to a highly concurrent resource (think Airline seat management). Some people learn a cool technique and try to use it everywhere, even when it doesn't make sense to do so. CQRS is one of those things.
Just a note but I believe that in the second example I'm pretty sure that you're supposed to put the expected value as the first parameter and the actual value second. You'll get failures under the same circumstances either way but the error message on a failure operates under the assumption that the first value is the expected one. 
Access to C# 6 and .NET 4.6.1. It's always good to learn the latest version :). Also, VS itself has had a number of improvements. All that said, it's not critically important for your learning. 
This is my exact reason for preferring the first version.
It' worth noting that it's [possible](https://www.nuget.org/packages/Microsoft.Net.Compilers/) to use C# 6 with VS2013. Upgrading VS would be ideal, though.
https://en.wikipedia.org/wiki/C_Sharp_(programming_language)#Name
AFAIK, it's because it's a better C-based language, but C++ was already taken (++ being integer increment). Instead they took the musical symbol #, which means to increase a notes pitch slightly. Hence C#.
Just to add to the back-compat angle, I opened a VS2008 solution in 2015 the other day - it prompted to convert it and I was able to compile the thing after only a few seconds of it "thinking" :)
JetBrains also gives a free academic license to students with a valid student email address!!
How can you have any thoughts when its mot even released yet? If it had been released I would have got an email from JetBrains as I signed up to get an email when it is.
I want to learn it myself and not work on someone elses work.
IIRC you can't use Extensions on VS2013 CM, however you can on VS2015, so you could use things like ReSharper, or indent ant trails, etc.
I have Resharper in my VS 2013 Community. AFAIK it's nearly identical to Pro. Perhaps you confused it with one of them Express? Or maybe earlier Reshraper doesn't play well with the Community Edition
Ah yes I got confused with express being different than community. For some reason I thought community want a thing until VS15, and express was the only free VS available.
I thought the same thing. The first one is a sentence.
Looking forward to your thoughts on Windows 11
Most people don't need to care about binary compatibility. Public fields are fine, especially readonly ones. Sure, if you're authoring a public library, but most people aren't. Changing fields to properties is *not* a source breaking change. 
I dunno about your time thing but if you are storing your shit in json you should probably just integrate with a redis back end instead of a sql one
Second option. But you reversed the arguments. The expected value is the first one, and the value under test is the second one. 
It might look like I am being difficult but I am asking open ended questions on purpose. If you keep answering my questions I will get some specific resources for you. I am willing to put in as much time as you are. What exactly do you want to learn?
I'd definitely agree with this and also suggest considering hangfire (hangfire.io). It's similar (in fact I think it uses quartz for scheduling) but also adds some additional features and a dashboard for managing your background and scheduled jobs. 
HttpClient is the newer and preferred client to send requests. Then you can use response.Content.ReadAsStringAsync()
Thank you for the reply. Forgive me if I am interpreting wrong but from your answer I am trying to do: var request = WebRequest.Create(uri); HttpWebResponse response = (HttpWebResponse)response.Content.ReadAsStringAsync(); StreamReader reader = new StreamReader((Stream)result.GetResponseStream());
No you would do HttpClient client = new HttpClient(); HttpResponseMessage response = await client.GetAsyc(endpoint); string content = await response.Content.ReadAsStringAsync();
I would like to thank you, it took quite a while to get around this. Works perfectly, do you have any docs or tutorials on what I could do with HttpClient if i wanted to acquire a JSON object instead? 
always optimize like this: * measure how long various operations take * optimize the slowest one * go to 1 optimization of an operation can look like: * use more efficient data structures (for search e.g.) * use caching (to prevent duplicate work) * do it in parallel where possible * do it async to avoid unnecessary blocking
I do have a fully functional object model using EF edmx. The problem I'm facing is that I have multiple sources for the same data. So I was struggling to compare and decide which worked better...so I ended up mapping new tables with foreign key reference to the actual model entity. After making alternate backup tables for a few entities, I decided to make a single table which would store all alternate datasource data serialized as json. Obviously this is just a part-time kludge and once I have the table populated, I'll just delete this table. Storing all the data in a single row in a table seemed much simpler than keeping track of 6 different folders and maintain proper naming and filing
ohh I remember looking at this a long time back. It seemed kinda confusing and I didn't try it out. I'll give it a go this time and let you know if it works for me. I also just found this article (http://www.codeproject.com/Articles/509234/The-State-Design-Pattern-vs-State-Machine) and it seems like exactly what I wanted. My project deals with the stock market. So when I'm updating the data, I want to make sure I'm only adding to my database after the market is closed. Some tables I can start woking on as early as 4:30PM, some I can only start after 6:30. Most classes should only run until midnight, beyond that only a couple can trade as late as 2AM. 2AM-6:30AM is blackout. After that market state is preMarket until 9:30. Then market close at 4PM and the cycle continues. Have to be careful with weekends and holidays. 
Hmm, that's a great point. In my current use case, I need to hand off the IV + key as strings, for another service to store and use...but I see how that's probably an edge case.
My thought was that I didn't want the properties to be changed after being initialized, but I would like to be able to read back the IV and key in order to use it again at a later time.
This didn't work out for us with an MVC4 project, unfortunately. It would open and compile but good god was there Intellisense failures all over the place, making it impossible to work in. Upgrading the project to MVC5 wasn't as straight forward as we hoped, so we left it alone for now. 
Ouch, that's unfortunate. I can't remember how much luck I had with it on my own without using any/many larger frameworks except WPF.
That's a great call, thank you!
I assume that you're saying DBEngine is what would then instantiate the Mysql/NoSQL/MSSQL class? Like: Enum goes into constructor of DBEngine, DBengine then instantiates the appropriate class?
Rx seems a bit out of place for an investment type app. Rx is a stream process tool. It's very very neat. But in practice it is not as useful as it seems. 
I think the right approach for this would be to have a repository for each of the DB types you want to have. Each of the repositories would implement the same crud interfaces. Then rely on DI to have the tool choose which repository to use. No need to work with a concrete object at all. Then just implement to the interface. 
Yeah, it feels like 'should' would print a warning, yet let it slide, whereas 'must' would halt the program with a definite error.
So you are looking to write an ORM(object relational mapper) that supports multiple DB. You can start by looking at some existing ones like petapoco (http://www.toptensoftware.com/petapoco/) or fluentdata ( http://fluentdata.codeplex.com ) both are open source. 
No need for substring or even looping, since [String.Replace](https://msdn.microsoft.com/en-us/library/fk49wtc1%28v=vs.110%29.aspx) run on *all* occurrences, just replace the targetString with prefixPlusTargetString.
Yup
Dependency Injection is where you have the tool, based on configuration determine the types of objects to create and pass in that implement a specific interface. Repositories are a design pattern to abstract entity objects from your domain. They are the conduit between your code and the stores for those data. Be it MySQL, SQL Server or a ReSTful web service. some example pseudo code: IMyRepository { IEnumerable&lt;IFoo&gt; GetFoos(); } MyRepository implements IMyContextRepository { IEnumerable&lt;IFoo&gt; GetFoos(){ //do work here to get items from EF ORM } } MyOtherRepository implements IMyContextRepository { IEnumerable&lt;IFoo&gt; GetFoos(){ //do work here to get items from Other ORM } } MyObjectThatUsesRepository{ private IMyRepository _context; public MyObjectThatUsesRepository(IMyRepository context){ _context= context; } publid DoWork(){ var foos = _context.GetFoos(); //do work with foos } } In the object that uses the repository you can configure via some IoC tool (I'm a fan of Autofac). So if you configure it to use MyOtherRespository the IoC containter will inject that into the class an you'll have a concrete instance of that class used inside of MyClassThatUsesRepository. 
Very quick and brief: - Crypto.cs, 11: I don't see a meaning in these properties having a p`protected internal` setter. Looking through the code you probably want that this class is only created by `CryptoUtils`. If this is the case, you should create an `internal` constructor which accepts these property values as arguments, and make read-only getter only auto properties. - Crypto.cs, 15: Why not accept a parameter of type `T` instead of `object`? That would match better with the `Decrypt` method, which returns `T` instead of `object`. - Crypto.cs, 17: **Do not throw `NullReferenceException` yourself! Ever!** This exception type is **only** thrown by the system when you **access** a `null` reference. What you actually want here is the `ArgumentNullException`, which is used when `null` is passed as an **argument** to a method, when a valid reference is expected. - Crypto.cs, 17: Actually, checking for `null` here makes no sense. You shouldn't even get this far if `null` was provided earlier. If you followed my earlier advise, then you should check for `null` in the constructor and throw the exception there. - Crypto.cs, 17: You should validate the method arguments. Is `originalObject` allowed to be `null`? If not, then verify the integrity of the incoming data and throw a `ArgumentNullException` instead. - Crypto.cs, 19: Consider splitting this up into two lines and store the result of `NetJ.Serialize(originalObject)` in a local variable. This makes it much nicer to debug and step over each statement. - Crypto.cs, 21: i don't think it makes sense to initialize the capacity of the `MemoryStream` with the amount of bytes of your serialized data. You're writing the encrypted data to the stream, not the serialized. Can you estimate the size of the encrypted data by looking at the serialized data? - Crypto.cs, 28: Consider storing the result in a variable and then returning that variable. This makes it nicer to debug, as you can look in the result before returning the method. - Crypto.cs, 47: [You're not implementing IDisposable correctly.](https://msdn.microsoft.com/en-us/library/ms244737.aspx) - CryptoUtils.cs, 6: `CryptoUtils`is a crap name. Avoid names like `Helper` or `Utils`. The only purpose of this class is to create `Crypto` instances, so why not name it `CryptoFactory`? That's a common pattern and a known name. - CryptoUtils.cs, 13: Here you initialize the `Crypto` instance `Key` and `IV` with `null`. Before you checked for `null` and threw an exception, so this is not a valid value. Why allow constructing an instance like this? I see you want seemingly to achieve fluid syntax like `Initialize().With..().With..()`. If this is the case, then you should take a look at the **Builder pattern**. You should not allow construction of an object with an invalid state. - CryptoUtils.cs, 21: Extension methods should be in an dedicated extensions class. This is best practice. Do not mix public static and extension methods like this. - CryptoUtils.cs, 22: Why does `T` has the constraint `class` here? The actual `Crypto&lt;T&gt;` type does not have this constraint. - CryptoUtils.cs, 23: Here too: Check for integrity of arguments. Throw a `ArgumentNullException` when the argument is null. (Do not throw a `NullReferenceException` here either, even when the method is accessed like an instance method. It's still just a static method.) - **Document your code!** Not a single method has a XML documentation header. I personally consider code like this worthless, as I always have to look at the code to figure out what a method does, instead of just reading the documentation. This is especially annoying when I just have an assembly, and not the source code. I either need to surf to Github, or decompile the code. This is wasting my time. I really think you should take a look at the builder pattern. Roughly something like this: public class CryptoBuilder&lt;T&gt; { private SymmetricAlgorithm _symetricAlgorithm; private string _foobar; public CryptoBuilder(SymmetricAlgorithm symetricAlgorithm = null) { _symetricAlgorithm = symetricAlgorithm ?? new RijndaelManaged(); } public CryptoBuilder&lt;T&gt; WithFoobar(string foobar) { if (foobar == null) { throw new ArgumentNullException(nameof(foobar)); } _foobar = foobar; return this; } public Crypto&lt;T&gt; Construct() { // Check for validity of provided configuration. if (_foobar == null) { throw new InvalidOperationException("No foobar provided. Call WithFoobar() is required."); } var result = new Crypto&lt;T&gt;(_symetricAlgorithm, _foobar); return result; } } // Usage: new CryptoBuilder&lt;object&gt;().WithFoobar("Foo!").Construct(); When you make the methods of the builder virtual you can allow subclasses to override the behavior. edit: I just read through the comments. Someone already suggested the builder pattern - I'm not alone, yeah!
&gt;SQL and noSQL Sorry, but there is no common interface if you want to communicate with either of those. They are too different for that.
Exactly
I think the fluent one is written more complicated than needed. Assert.That(result.Length, Is.EqualTo(2)); In the end it doesn't really matter though, both styles are easy to understand and get the job done. I personally don't set "standards" on how to write asserts. People can do what they like as long as we can understand the purpose.
 using System; using System.Collections.Generic; using Newtonsoft.Json; public class Program { public static void Main() { // Your data, formatted as a string literal. var Resp = @"{ ""data"": { ""JarvanIV"": { ""id"": 59, ""title"": ""the Exemplar of Demacia"", ""name"": ""Jarvan IV"", ""allytips"": [ ""You can use the Dragon Strike / Demacian Standard combo to get out of your own Cataclysm arenas."", ""Split your basic attacks on different champions at the beginning of fights to maximize damage."", ""Use Demacian Standard as a scouting tool when worried about incoming enemies."" ], ""key"": ""JarvanIV"" }, ""Ezreal"": { ""id"": 81, ""title"": ""the Prodigal Explorer"", ""name"": ""Ezreal"", ""allytips"": [ ""Use Arcane Shift to help line up your other skill shots."", ""You can play Ezreal either as a Attack Damage carry or Ability Power carry depending on how you build him."", ""You can line up Trueshot Barrage to hit multiple minion waves or even Monsters."" ], ""key"": ""Ezreal"" } }, ""type"": ""champion"", ""version"": ""6.4.1"" }"; // Deserialize the data to an object Response response = JsonConvert.DeserializeObject&lt;Response&gt;(Resp); // Inspect the data foreach (Champion champ in response.champions.Values) { Console.WriteLine("Champion: " + champ.name + ", " + champ.title); } } public class Response { // I've used the JsonProperty annotation here because the item in the JSON is // called "data", but I want my variable to be called "champions" instead. [JsonProperty("data")] public Dictionary&lt;string, Champion&gt; champions; public string type; public string version; }; public class Champion { public string id; public string key; public string name; public string title; public List&lt;string&gt; allytips; } }
Can't databind fields, reflection works different, properties give you more control (say, private set, public get). Many frameworks depend on properties as well. Best to be consistent and only use properties, they don't really have any downside :) Also, in Visual Studio just type "prop" and press tab, doesn't even make them slower to write
Oh! So much thank you @davedontmind It works perfect. So basically JsonProperty "renames" a "data" to "champions" That's why I love reddit. Awesome people and I get answer quickly!
I will check this out when I get home! :) Thank you! I found this one: http://json2csharp.com/ from internet, but sometimes this gives me "invalid_value_1233" error(s) in example. Let's hope that this Visual Studio thing works.
I don't think you can create extensionmethods for Console. Build error: "Console: static types cannot be used as parameters"
I don't think I'm using threading. I don't understand the difference between useing Http GetAsync and the one I'm usning, ExecuteAsync in RestSharp library. Could you explain?
If you don't mind me asking, where are you getting your stock market data from?
What do you want to do with the traps received?
basically I want to create some Application Insights calls that will include any message received from the traps...
That looks like a good parser library to me. Are you concerned about the parser or are you looking for a listener/receiver?
The way I read it is: Value X should be Y if not ERROR. But I do see what you mean, that must feels more exact..? English is not my native language so maybe that is why it dosen't bother me that much :) 
 public string GetNaamZwaarste() { int zwaarste = 0; for (int i = 0; i &lt; Count; i++) { int gewicht; gewicht = this[i].GetGewicht(); if ( gewicht &gt; zwaarste) { zwaarste = i; } } return Convert.ToString(this[zwaarste]); } I formatted it for you. You can do something like return String.Format("Ball {0}", zwaarste); which will return "Ball " followed by the found index. If you're looking for a name, which would be a member of your ball class, you'd have to do something like return this[zwaarste].Name; where Name is a property or field of the ball class.
There is no such thing as an "instance name" in C#. If you want a name for an object, you need to add a field or property to it and set it to the desired value when you create the instance. 
C# doesn't have a concept of an object-identifier (I know of very few languages that do, now that I think of it, and none are in the C-style family). If you need to uniquely identify an object, than it needs an 'ID' field - you often see these when dealing with database-driven applications. If you want to be a bit of a smart-ass, you could in theory return the memory address turned into a string, but that's out of the scope of a basic class. That being said, please note the logic error in your loop (The Dutch threw me off): You're setting zwaarste to the index of the found item, but comparing it against the weight. Your best bet is this: var heaviest = this[0]; for (int i = 0; i &lt; count; i++) { if (this[i].GetGewicht() &gt; heaviest.GetGewicht()) heaviest = this[i]; } return heaviest.ToString(); //Or whatever logic you end up using
Thank you, I will make a name property via the constructor. Any chance you know what he means with object-identifier than?
Nothing wrong with using your native language, it's a best practice. I just can't read it as well as English so the terminology threw me off so I didn't notice the logic error until later. 
Maybe the classname?
I always hate it when my teachers tell me to code in Dutch with the notion; "It's how the main Dutch companies code".. I know for a fact that that's ****. I eventually won the argument with; "We're writing programs in a certain (coding) language and stubbornly use our native language instead of the intended language. It's like writing French and replacing the verbs with Dutch words... equally stupid."
The fundamental and basic data I'm getting from a few different websites. There are alternative/backups in case one of them starts failing if the webpage changes and can't be parsed. Because of this the number of files just kept growing. I still have to cut out a lot of extra(useless) work that the program ends up doing. Once I get a handle on the workflow I'll trim the extra classes. The more specific data relating to Options, I get from my my brokers trading platform. Just getting though all the data collection has been exhausting but I can't deny that it has been a good motivation to learn programming. I've just been using Google and reddit to learn c# for last year.
Dapper, EF should also get thrown in the mix as well. 
I used http://www.dart.com/snmp-net-api-library.aspx and was very happy with the results. It's not cheap though.
Any function that takes 15 parameters is performing too much logic anyway and should be split up into separate function.
Or use some sort of a storage class. I have methods that 'take' 20-30 parameters to stuff down to some other service, but those parameters are stored in a storage class.
I'd have to disagree. Here's a great example: You're looking for a car, filter out everything I don't want. The method does one thing (Filter cars), and needs a bunch of parameters (Color, make, model, year min, year max, cost min, cost max, and so forth). Although, I entirely agree that this should be some sort of 'Search Parameters' class.
Please don't tell people not to code in the language they want.
Nameof gives type and member names, not instance names.
Maybe you can use [Code Contracts](https://msdn.microsoft.com/en-us/library/dd264808.aspx). I haven't used them myself yet, so I could be wrong, but it seems that the contracts check conditions at compile time where possible (so possibly for simple default value checks).
You might be able to do something with a [code snippet](https://msdn.microsoft.com/en-us/library/ms165392.aspx).
Thank you, I checked out that option, but unfortunately it doesn't cause the needed runtime exception. 
What about extending the Required attribute and change the exception generation to create a runtime exception? Might be a little more work, but would still be isolated to the attribute on the single class.
Yeah. Maybe you can use AutoHotkey to automate a keypress/shortcut to invoke the snippet. Personally, I think if you're talking about having _all_ your strings automatically prefixed with a `$` symbol, even those that aren't using any string interpolation, it's probably a smell or anti-pattern. EDIT: Sorry, I misread your intended behaviour. Yeah, it'd be nice if Visual Studio or an extension could automatically insert/remove the `$` symbol based on whether or not you had a `{......}` token in the string. However, you could get corner case issues where you intended to include curly braces in your text. Doing so it's difficult/impossible for the compiler/extension to determine if you intended to perform string interpolation likely resulting in a compiler error, or intended it to be interpreted as a normal string literal.
I love the required / optional class idea... I believe this will be my route. I've given up on build time exceptions, not feasible... Going to see what I can do to encapsulate the required versus optional fields... thanks! 
Thank you this goes along well with JustABlankAccount's reply... bite-sized is the way to go. 
I agree with /u/amwdrizz, attribute based validation is probably the way to go. I think you've got a couple of options there. 1. Build your own attribute validation engine from scratch. This could be super time consuming but would end up being the cleanest. 2. Find a third party validation engine. I'm not 100% sure what's out there, but I'd assume something exists. 3. Build on top of the existing ComponentModel.DataAnnotations validation (e.g. the [Required] attribute). The third is probably the easiest, I'm 100% sure why you didn't get a runtime exception, if you had used `System.ComponentModel.DataAnnotations.Validator.ValidateObject()` you should have seen one. For example, the following code throws a `System.ComponentModel.DataAnnotations.ValidationException` with the message "The SomeProperty field is required": using System.ComponentModel.DataAnnotations; class ParametersClass { [Required] public string SomeProperty { get; set; } } var param = new ParametersClass(); Validator.ValidateObject(param, new ValidationContext(param));
I ran into this earlier, but had determined the amount of work wouldn't fly over very well... though with your post, I believe I can make a fairly good argument for it now... getting a lot of ideas how to develop our new exception engine :). Thank you. 
You are going to want to move the actual bitmap specific code into another class and provide that class to the class you are testing. Check out these 2 blog posts and imagine the File.AppendAllText line as your new bitmap() line. http://georgebearden.github.io/programming/solid/2016/01/12/solid-pt-1.html http://georgebearden.github.io/programming/solid/2016/01/19/solid-pt-2.html
I don't think so. Because i am applying MVVM, and that piece of Bitmap stuffs is from my Model, not in my View. Or am i misunderstanding what you means by "forms"?
Out of curiosity, why do you say it's a bad idea? We're discussing the merits of (essentially) a DTO, which is a class used for holding together data members. DTOs are usually flat, designed for easy transfer of data between two endpoints. My cutoff for creating a subclass for a DTO is usually 4-5 highly related members. I'll answer my own question for the sake of discussion: Creating a subclass for a DTO that contains a small number (&lt;4, for the point I'm making, but it certainly would vary between developers/companies) adds unnecessary complexity to an application's API. Instead of simply setting the values as given by a user - in whatever format; web, WinForms, etc -, you must first create a YearFilter object then fill it with your values. When receiving this object, you must first check for null, then check the values within the object, adding more boilerplate. Because the number of members is so small, and the two members (YearMin/YearMax) aren't related to each other in any particular way - If one doesn't specify a Max, but specifies a Min, this is a perfectly valid state - they don't need to be grouped within a class. Related, for this example, is defined as modifying each other's behavior. For example, on a DTO to save a person, I might have EmployeeInfo: Wage, Salary, Position, HoursWorked, MaxAllowedHoursPerWeek, GradeLevel - as the position will define if I use a wage or salary, the grade level can determine the position (or vice versa) and the MaxAllowedHoursPerWeek. This ignores the obvious statement that if this is a common paradigm within your app, then it absolutely makes sense to create the YearFilter class. This all being said, I do agree, it is a code smell. A very mild one, but as my argument above states, a smell less smelly than the YearFilter.
Are you saying that your method calls many smaller methods inside of it and only 1 of those methods uses the bitmap. If that is the case and the smaller methods that you call inside are from a different class than the big methods class you can mock those classes so they do not actually perform any operation. It would look something like this. https://gist.github.com/battleguard/f66109c1d8f3fa19f906 If this still does not help your going to need to provide the bare minimum code to show your problem that you are having with your method and I could look at it.
Code Contracts *should* be disabled in a release build, so they're probably not really suitable for this sort of thing.
Thanks! Once I check out your approach to Redis I'll offer some feedback. 
Cool, thanks! I appreciate it!
I'm not a huge fan of option 2 because it violates *[the principle of least surprise](https://en.wikipedia.org/wiki/Principle_of_least_astonishment)* (at an API level) and *[fail fast](https://en.wikipedia.org/wiki/Fail-fast)*. If an error will occur inevitably, it is frustrating to receive that error at some point after configuring the state of your application (instantiating objects) instead of during the configuration of that state. The more frustrating part, however, is that it makes tracking down the source of any errors difficult because those errors are not coming from the code that causes them.
Finally! Thank you bro.. you solved my problem..
This. I was under wrap the parameters in some kind of class, that way you never have to change the finger print of the method if you want to add a new parameter. Remember that our job as programmers, as put by Steve McConnell in code Complete, is to manage complexity.
More blogspam copied together from various sources (e.g. [[1]](http://www.codeproject.com/Tips/788402/Monitor-and-Lock-in-Csharp), [[2]](https://books.google.de/books?id=EvXX03I5iLYC&amp;pg=PA883&amp;lpg=PA883&amp;dq="In+other+words,+Mutex+can+be+computer-wide+as+well+as+application-wide."))
Removed: plagiarism.
A small database or even flat file is the right route though this is a csharp specific sub... This sounds like a class project, and you're trying different solutions (totally cool). I don't get the issue with "multiple column headers", that's what Databases are for, if you mean the same name coming back in a query, just alias it (look it up), if you mean the same name in a table, you're going to need 2 tables. 
Well, you should obviously work with what it gives you and not use it as it is
I think I will; I just assume a lot of times these suggestions are kind of like United States election votes, and don't really matter when all is said and done.
Good point, but I'd probably more easily be able to modify my behavior by typing another '{' as a habit, and the editor's intelligence could take that into account - if I did that and there is no actual {...}, it would reformat the string how I wanted it. I could be completely on my own in wanting this, but I would absolutely love if that was a possible behavior I could set up.
Your description of the node lookup to match sounds like the path I would want to take. I guess a better understanding of the structure would help if you could, thanks!
Create an interface that contains your 15 parameters and pass it in to the method, you can then operate on any class that implements that interface and only a class that implements that interface. The code will not compile if an object is passed that does not implement the interface and any class implementing the interface must expose public properties that it contains. Taking it one step further, I would create a separate validatable interface that has a book isvalid property and a ilist of strings for validation errors, now, you would make your method generic: Method&lt;T&gt;(T obj) where T: ICompleteObject, IValidatable Edit: This will force any passed object to implement both interfaces and not compile if an object is passed that doesn't.
I meant what websites are you getting your data from? I'm looking for historical end of day data and historical dividend data. I'm currently getting my data from Yahoo, but was looking for a better source. I made a nuget package for the Yahoo API if you want to use it. https://github.com/ZacMarcus/YahooFinance.NET Also, I don't know why you want to store JSON in a database. You won't be able to search on the data using a query.
10.7 Billion was a value associated with Apple.
Yeah it's possible to use C#, also you may want to check out Unity if you are not familiar with it. 
To me it sounds like you need a simple rules engine.
Hey, thanks for the link. I'm actually using Yahoo too. You should look at quandl. There is a nice little c# package to use it. Same as yahoo, google also has an old un-documented api that you can request data from. But unlike yahoo and Quandl it doesn't go all the way back but only a year or so from what I could tell. For dividend data, you can scrape a webpage from any financial website. For example, zacks and nasdaq both have dividend history for all stocks. I'm actually storing all the data in proper tables, but I was keeping all the json files as backup in case something happens. But now the number of files is getting ridiculous so I thought maybe just store them in the sql server as well.
There are lots of ways to do it. If you don't have a database, you can just store it as XML. Read up on that. https://msdn.microsoft.com/en-us/library/mt481612%28v=vs.110%29.aspx
https://msdn.microsoft.com/en-us/library/36x43w8w.aspx Also explained in absolutely every C# basics book.
Yes, it is an increment operator. https://msdn.microsoft.com/en-us/library/36x43w8w.aspx
Short answer: Yes, `f++` is the same as `f = f + 1`. Long answer: It's the *postfix increment* operator. It increments the value of `f` by one after the statement completes. There is also the *prefix increment* operator that looks like `++f` which increments the value *before* the statement completes. Here's some examples: int f = 1; Console.WriteLine(f++); // Prints '1' Console.WriteLine(f); // Prints '2' f = 1; Console.WriteLine(++f); // Prints '2' Console.WriteLine(f); // Prints '2' There also exists the same for decrementing, e.g. `f--`/`--f`. If you abuse these statements, your coworkers will (and should) kill you. ;)
The elements are stored only once. So, I think it's when reading the XML or displaying to ListBox something is going wrong. This is the code in my btn_Click event: private void btnReg_Click(object sender, EventArgs e) { XmlWorker.InsertElement(txtFName.Text, txtLName.Text); DisplayXml(); } My MainForm_Load event also calls DisplayXml(); private void MainForm_Load(object sender, EventArgs e) { DisplayXml(); } It's only when registering a new Element that the values are doubled up in ListBox. If I try to register another one, *all Items (except the one I just registered) in ListBox seem to add one each.* &amp;nbsp; EDIT: More info. Trying to answer better. 
Thanks, clearly I don't own any C# basics book.
Facepalm! Thank you so much. :)
Thank you
&gt; i mean it was a dumb question hard to google though
When asked if we can do something at work I have often said something to effect of given enough time and resources we can do anything. And it's true. It may not be worth doing in code, but it can be done.
like passing the observablecollection to my multiconverter with my dynamicresources as the items? hmm, a little messy but it might work. ill look into it, thanks
I just tried to compile something. I get "Error:(29, 39) CS0840: must declare a body because it is not marked abstract or extern. Automatically implemented properties must define both get and set accessors." So basically Rider does not support C# 6.
doesn't work for me, internal error on startup (OS X) :( edit: [looks like I'm not alone](https://youtrack.jetbrains.com/issue/RIDER-386) edit2 : fixed by closing Chrome
Damn, that sucks. It would be arduous to rewrite it to be compatible with earlier versions of C# :( I will keep an eye, though, and try it out for new things.
hmm that's strange. AFAIK Rider is based on R# and R# supports C# 6.0 since 9.1
What you are saying about abstract and virtual is correct. An abstract method does not contain a body and has to be overridden. A virtual method contains a body and can be overridden. You can call the virtual method from the base class itself or from the derived class using base.MethodName. But you dont have to.
When you were writing the Sum function, you could've kept going. Create a Sum(Vec&lt;int, N&gt;) which just returns 0, Sum (Vec&lt;int, S&lt;N&gt;&gt;) which just returns the head, then Sum (Vec&lt;Int, S&lt;S&lt;N&gt;&gt;&gt;) which recursively calls itself. At least, I think that would've worked.
Thanks! I will give this a try when i can. Probably wrap the Unit Test around the dispatcher, as the code is working fine (confirmed working when deploying to device).
Not true. I've suggested plenty of features that have made it into the product.
What did they replace it with?
Nothing, though Monogame and FNA are both good open-source replacements (I'd recommend Monogame)
IMHO you have to make up your own mind, everyone has different requirements, preferences, philosophies. 99% of projects do not change ORMs. Out of that 1% most are probably not going from something "heavy" to something "light". In other words for most people it's very possible that using Expression trees as parameters is a HUGE time saver, allowing for more code in less time. I am not arguing for or against I'm just saying make up your own mind on what is important to you.
There are a number of different unit test libraries (NUnit, XUNit, Fluent etc) as well as opinions about what should and shouldn't be tested. Having said that have a look at [Jon Skeets Noda Time Library](https://github.com/nodatime/nodatime/tree/master/src). He's written a book or two on c# so he's kind of qualified.
Seems like you could do this with IL generation, though! And it'd probably be pretty performant too ☺️
This post make me remember about the tool that I mentioned but I had forgotten where this post was as well. I think this can be useful for another problem that I got but this don't solve my problem. :( I will keep looking and if I don't find anything I will try to develop something.
Aww, I guess it will indeed gives more problem than it's worth. Judging from the votes it also doesn't seem to be a wanted 'feature'.
Ah. Sorry I didn't get reply/new message notification until today. In our case, we don't have control over the site so the meta tag approach wouldn't work. Since you do, sounds like that would be a winner.
Anyone figure out how to get unit tests (xunit) working? Also using the newer dotnet (not dnx) - any clue how to get that plugged in? For now, I think I'll install mono and use that.
I'm already using VS 2015 free community edition , and I don't plan to switch to another IDE , BUT, I already used Project Rider as a free Resharper :), it helped me clean the code and discover some hidden bugs, without paying for Resharper license.
you can use xenu to crawl your site and look for dead links, you can set link depth to follow links including whether it follows external links or not, it doesn't need to be aware of your routes, anything that has a link can and will be followed by default http://home.snafu.de/tilman/xenulink.html
What amazes me is that people have the *patience* to post in a forum before trying F1 or Google.
Could you use dynamic to make it resolve the overload at runtime?
Tried a DNX console app on Mac. It never successfully loads the project that it just created, instead it gives an error message from DNX that it can't find mono. It's odd because I can run the app with DNX on the Terminal. But aside from it not working, I really like the idea, and it will ensure that I keep paying for the toolbox, even though I'm moving to Mac more and more. Edit: The problem I mentioned is tracked here: https://youtrack.jetbrains.com/issue/RIDER-421 and there's a workaround.