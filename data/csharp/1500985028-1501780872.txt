Yes, Java uses camelCase. C# uses PascalCase. This is purely for readibility
I forgot how nice and pretty the default one is. But yes, this is a R# setting you need to track down. This is what mine [**looks like**](http://i.imgur.com/vBB9mpY.png).
I did not know that. Funny how things can be different in nonfunctional ways 
You could inject child classes derived from an abstract or common parent, actually, in addition to interfaces. Interface types are handy for dependency injection because they're easier to reason about WRT virtual method overloading.
Reading it *FROM* the app.config is easy to do: public ApplicationDbContext() : base("DefaultConnection") { // EF does the rest. } But if I'm specifying a filename to target in my window's constructor, then I have to tell app.config where to look for the file. So this way I'd need to read the filepath *TO* the app.config which is not so easy to do (I don't even know if its actually possible tbh).
If the path is in the app.config, then that's the path you should use. Not the LOCALAPPDATA path. However... you can add a setting to the config file that says "UseLocalAppData" value="true" and check that, so you can tell when the user wants it placed there. (otherwise use their path). 
Holy hell - why in the world are you trying to do this?
No, delegates are not serializable in any meaningful way.
Imagine, that the static methods are hard-coded game mechanics, and myType serves the parameters to each such call. You compose a list of events that should happen for different types of actions, like: { DealDamage, CheckAttribute, Heal }. I'd have a List of Predicates, as well as a List of myTypes, and a method would call all the static methods in "Methods" with the corresponding myType from the other List. Originally, I wanted to do event handling in the class, but eventually, I realized that I want to be able to manipulate the order of method calls and such. And that was something I was not able to do with events, so I just decided to store the delegates to those static methods in a List, and now I'd have full control over them. Seemed like an OK idea at first, but it seems I've run out of options. (From what my rookie eyes can see, anyways.)
EF 6 has one license, core pulls in so many packages that I didn't even count them.
Ok I do think I have now figured out how you do it in your code. And if I am not mistaken, you have the object App.Preferences witch holds your settings. So in the form you set App.Preference.WindowWidth and so on. Now that was what i was trying not to do, since this would mean that the properties of my form I want to save I would have to specify in every form where I use this method. My idea was that I would have a method in my PreferenceController that I could simply call with any element (or form in this case) And in that method I would then save the properties I wanted to. So lets say I have 3 forms, in them i would simply have to call, PreferenceController.SaveFormSettings(this) And in my SaveFormSettings I could deside with properties I would like to save. In this way if I some day found that i would like to save a new propertie, I only have to change the SaveFormSettings method, and if would then work for all my forms. But apart from that I would like the SaveFormSettings method to work on other elements than forms, so lets say I have a DataGridView and would like to save its column widths, I could also call the same method just with the DataGridView instead. Then my method would look something like this. public void SaveObjectSettings(object _object) { if(_object.type == Form) { settings.Size = _object.Size; settings.Location = _object.Location; } if(_object.type == DataGridView) { // Save Column widts here } // And then save my settings using Serializing. } Am I completely wrong in my thinking?
It looks like the serialization has just called ToString() on the delegate instance. If you really need to do it like this, you will need to do some kind of custom serialization, where you store the assembly name, full type name and method name. Then your custom deserializer could use reflection to load the assembly, find the correct type and method and instantiate the delegate.
I did not know that. Thanks for the insight.
If you're going to use a known set of possible delegates, you might be better off serializing an identifier, like an enum or something. This would also provide you some protection from somebody injecting an arbitrary method call back into your system.
Can you give a more fully fleshed example? If `DealDamage` is the action, the events from that action should be `Action1`, `Action2`, `Action3` right? Are you saying that in some cases for `DealDamage` that the order isn't always `Action1`, `Action2`, `Action3` but could be something like `Action2`, `Action3`, `Action1`?
Ya mine will not show any extra information. It's so frustrating. If anyone knows what setting gets me that please let me know.
So i found this https://www.jetbrains.com/help/resharper/Coding_Assistance__Parameter_Info.html, it seems this is called Parameter Information, and the part that is broken for me seems to be the signatures. None of my overloads have signatures. I feel like there is a corrupt file somewhere. I have tried changing about every setting related to resharper's parameters with no luck.
Well, not by Json.Net at least. `BinaryFormatter` supports this, which is why delegates implement `ISerializable` and the JSON contains some semi-meaningful data. 
i did it the old school way by translating to xml and then enumerating the nodes. Thanks!
You can try clearing the R# cache and resetting R# settings back to default.
Actually, DealDamage would be one of those actions. Let's say someone has an ability that deals 5 damage, and if they're below 50% health, it also heals themselves for 5 health. That would mean the ability would have 2 or 3 actions (static method calls): Mechanics.DealDamage, Mechanics.CheckAttribute, Mechanics.Heal. This also illustrates why event handling was unfeasable - conditional skipping of method calls would not have been available, since peeking into the subscribed methods list is not allowed.
FYI the framework docs state that you should not use Predicate&lt;T&gt; any more, this is a class hanging around from the pre-LINQ days. Instead you should use Func&lt;T, bool&gt;. And possibly wrapped in Expression&lt;TFunc&gt; if you need that.
I suppose I got caught up in the grand scheme of things, because I didn't even entertain such a simple approach. I'll try to add a method in the static class, which reads a string (stored in a list in myType), THEN calls the appropriate method. Thanks for opening my (apperently very careless) eyes!
What would be the benefit of learning F# in addition to C#?
[It says on the article](https://blogs.msdn.microsoft.com/dotnet/2017/05/31/why-you-should-use-f/)
Do it like I am doing it with a preferences class/object, and then write a method: `void Apply(Form form)` which will then set `form.Width = preferences.WindowWidth`. You can call this method from any form: `Apply(this);`.
Are you sure it's not a plugin? [Enhanced Tooltip](https://resharper-plugins.jetbrains.com/packages/JLebosquain.EnhancedTooltip/) 
Oh yeah! Duh! 
Should be pretty obvious that you should be using SqlConnection in a using block. Edit: what I mean is, it's not the job of the Dapper docs to explain how to use SqlConnections properly. 
I think all of the above is possible just that your current design doesn't allow it in a simple easy manner.
Hmm, they both compile to the same il so for the most part you can have a project with both, maybe you'll end up working on a project where half the code base is F# and the other half is C#... 
I'm gonna be honest I can't think of a legitimate reason of knowing both C# and F#. 
Man, id love a non-video version of the reasons.
That's rather narrow-minded. 
Sure, but why would you do that?
It really depends on how you want to approach it. It might seem more verbose to always specify arguments, but if you don't, then you may have to come up with factory methods with longer names. MockFactory.Login() // assume success MockFactory.LoginWithSuccess() MockFactory.LoginWithoutSuccess() or MockFactory.Login(succeeds: true) I feel like you could go either way with it depending on how much you want to assume about the default behavior.
Hmm, I have no clue tbh, but there is probably a reason.
I know, but I really can't, if someone else can come up with a good reason then I'm all for it.
F# has helped me understand better programming practices. C# has helped me get jobs. 
But what I don't understand is why F# helped to learn better practices than simply reading up on good practices in C#?
Well I just meant something like this, using the example from the article. Assuming GetUserById doesn't get called if your not logged in, you want to test several cases on what happens with GetUserById So each test you do MockUserService.MockAuthenticate(...) MockUserService.MockGetUserById(...) Do test.. I was saying, the MockUserService constructor can setup MockAuthenticate to return true for any input, then each test you just do MockUserService.MockGetUserById(...) Do test.. This prevents the following from happening Test Setup (Forget to setup Authenticate) MockUserService.MockGetUserById(...) returns null Test SomeFunctionThatMightCallGetUserById(...) ... Did that pass because GetUserById returned null, or because Authenticate failed and it never called GetUserById? 
We use F# for some technical financial stuff, quant's like it because "maths" and FP maps to that domain well. Non quant's like it because, as someone below said, it all compiles to the same IL so it can be consumed and made to do something useful.
There are some problems better solved in each language. Each should be used for it's strength when you can identify them. For example, C# Make (CAKE) comes up on occasion. While it's possible to write builds in C#, the F# Make (FAKE) might be considered a better fit, language wise. There's no reason to use F# other than it can be the best too for some jobs and fun.
I really like the idea of F#, and being able to explore functional languages while staying in the .NET family sounds really comfortable. But like others have said, there's just not a good reason for the majority of C# programmers to start using F# in any real capacity. On the other hand, I believe learning functional programming makes you a better OOP programmer, too. I think it's a good long term investment, but it's not going to make you any more attractive to businesses.
It's exceptionally useful for lots of things. One simple example is serialising a "where clause" from the client to the server.
You should still use camelCase for local variables though. It's all rather arbitrary, but it's best to keep to convention. 
It's also exceptionally dangerous because that would be almost tantamount to remote code execution.
...I can't say I would ever do that. IMHO that's pretty bad practice.
It's dangerous in cases in which it is dangerous. You don't use it in those cases or you mitigate against the danger. This applies to, well everything in fact. I get your point, it's situational. You used to see it a lot in older Microsoft frameworks which is why I gave the example of where clauses. We've moved away from that style, not for security reasons but because architecturally it doesn't usually scale well. 
At least EPL is nice in that it seems pretty universal.
It's situational. .Net doesn't really support it directly. Most often the implementation will take an Expression and walk the tree serialising it manually and then only serialising the bits it thinks are "safe" and exploding otherwise. As I said to "the other guy" above, it's used less because of scalability issues rather than security issues, it still has uses even if they are niche. Ultimately, because .net doesn't "really" support it, it's just another form of serialising and deserialising a request. You're not literally going to transmit the code for EnableSkyNet(); 
Yeah, damn my phone autocorrecting words to the correct non-us spelling
Delegate serialization is very dangerous. https://media.blackhat.com/bh-us-12/Briefings/Forshaw/BH_US_12_Forshaw_Are_You_My_Type_WP.pdf (see page 30) If it is at all possible you should instead represent the set of functions you might call with an enum and invoke from a set of choices composed without possible user interaction.
F# for your domain layer, C# for your infrastructure/UI. F# is awesome for domain logic because it’s much more succinct than C#. You can, for example, declare a whole hierarchy of (immutable) classes in just one line per class: type public LogMessage = | InitializationError of Exception | TagInitializationError of TagID * Exception | GetDataError of TagID * Exception | ResetCheckError of TagID * Exception | PointCheckError of TagID * Exception
In general you probably shouldn't do this. It's normally best to create a release package or msi or something, and just send the child exe along with the parent.
Then .Take(10) to get the top 10 sites :)
TLDW ;)
I've finally finished the walkthrough for my Windows 10 IoT C# Traffic Monitor. Follow this step-by-step guide to get your own code up and running on the Raspberry Pi! I'm really interested to see what kinds of things people create using this guide. Also, please let me know if you spot an error. I am new to c# and I may have made a mistake somewhere.
F# has a lovely thing called "F# interactive" where you can easily load data and operate on them. Thanks to langauge features as piping it makes all manipulations very easy.
[Why use F#? | F# for fun and profit](https://fsharpforfunandprofit.com/why-use-fsharp/)
hah sometimes that true. But in this case, I was pooping in a public place.
I would recommend Postgres over MySQL, but either will work. You'll need to use an ORM, object-relational mapper. It's a tool that maps between a DB and your code. The most common one is Entity Framework. Others may come in here and tell you to use Dapper or another alternative, but since this is your first experience with a DB I strongly recommend just using EF. Microsoft has good guides for Entity Framework. Go with EF Core, again ignore the naysayers about it. (EF Core doesn't have quite as many features as EF 6, but you won't have any issues with how you're using it.) [Here's the Getting Started guide from Microsoft.](https://docs.microsoft.com/en-us/ef/core/index)
Microsoft SQL Server is usually the go-to database for .NET and C# based applications, however any other sql database works well too including Postgre and MySQL. I would suggest you initially don't use an ORM and use a raw SQL connection and map the data yourself. This will give you more insight into how .NET handles sql data and how ORMs work under the hood. On the official MySQL page you can find a basic guide on how to connect and send queries to a MySQL database: https://dev.mysql.com/doc/connector-net/en/connector-net-programming-connecting-open.html
&gt; FYI the framework docs state that you should not use Predicate&lt;T&gt; any more Where does it say so? `Func&lt;T, bool&gt;` and `Predicate&lt;T&gt;` are absolutely the same - but the latter is very much better documented and better explains the purpose.
Okay this is a little messy but can't exactly post the entire project. https://pastebin.com/q3wkpbGa The SQL command is just select * from Employee_table. Add the a call for LoadComboBoxes(); in your Form_load event. These are pulled from 4 different files so if you need something explained more let me know.
This language seems like it's meant mostly for data operations, and the fact it's .net, can't I technically write F# function and use them in my C# projects?
F# is a good functional language. Knowledge of FP concepts can be useful even in primarily OO languages like C#, and F# can be a good way to learn them. F# is also not a pure functional language, and is built on top of the .NET platform, which can make it easier to get up to speed if you're coming from C# (which will make it easier to focus on the concepts). It's always good to have multiple tools in your toolbox, lest all your problems start to look like nails. Some of the new and upcoming features in C# seem to have come from F#, first, like pattern-matching and non-nullable references.
It's meant to be a general-purpose language, exactly like C#. Yes, you can call F# code directly from C#, although for now, they have to be in different projects.
&gt; On the other hand, I believe learning functional programming makes you a better OOP programmer, too. This is so true! Learning currying in F# brought me to completely rethink my use of delegates in C#. The concept of all functions taking only one parameter was eye-opening.
C# is a bastardized (i.e. practical) mashup of OO, procedural, and functional programming. F# is closer to pure functional, and will make you a better C# programmer. Learning to program without mutable state and nulls everywhere, for example. It's also a natural fit for anything math-intensive.
lol. I just don't have the patience for 20 minute videos.
Also, in the array is the string as Char.
The problem is the condition in your loop. Specifically the condition: `i &lt; 1`. A `for` loop's condition works like `while`, as in "continue looping while a condition is true". `i &lt; 1` will always be false unless `array` is empty, in which case it loops once and throws an exception. Use `i &gt;= 0` in a `for` loop that goes in reverse. Or even better, use LINQ and `foreach`: `foreach( var item in array.Reverse() ) { ... }`.
Condition in your for loop should be i &gt;= 0 
For formatting code, try http://redditlint.com `int i = array.Length` Should be `int i = array.Length - 1` --- `i &lt; 1;` Should be `i &gt;= 0;`
If it turns out that the F# people are right, and F# is a better language than C# for most use cases, the benefit is that you get to use a better language. If they're wrong, the benefit is you can stop wondering whether they're right and move on to something else. 
I think that most of functional programming's appeal lies in its elegant data manipulation, but I don't think it's fair to say that F# is meant strictly for that purpose. Linq is made for that purpose, so if you want functional data manipulation in an OOP project, you can already do that without F#.
Dose F# have linq?
No, if he is just starting to databases he needs to write raw SQL. Starting directly with an orm will just create an ignorant "I should do this because tutorial said so" guy. After getting comfortable with SQL and db logic he can start using an orm to speed up the development process. 
An unhandled exception of type 'System.IndexOutOfRangeException' is now the result. Here the variables for more information: string cw= tb_1.Text; char[] array = cw.ToCharArray(0, cw.Length); string[] array2 = new string[array.Length -1]; string inhalt = tb_2.Text; string c = tb_3.Text;
I learned a decent amount of functional programming in college, but it always seemed like an educational tool at best, to me. I never really thought about it seriously until I read [this article by John Carmack](http://www.gamasutra.com/view/news/169296/Indepth_Functional_programming_in_C.php). The bolded section is what got me: "No matter what language you work in, programming in a functional style provides benefits. You should do it whenever it is convenient, and you should think hard about the decision when it isn't convenient." That's a very bold statement to make. I take most advice from other programmers, even very famous ones, with a very heavy dose of salt, but I've read a lot by John Carmack and I've always thought he was the very soul of pragmatism. If he says it's that important, there's gotta be something behind it.
Yes, although I think you might be restricted to query syntax instead of method syntax. Not sure really
However, once you understand what you're doing, you better learn how ORMs work. I've worked with way too many people who've wasted weeks of time (and years of technical debt) because they refused to use even a basic ORM. I never want to see raw SQL in production code without comments explaining why this was done.
I also agree with not using an ORM(object-relational mapping) tool initially. It can be a nice abstraction later but even then you'll want to understand what the ORM is doing at the database level. Otherwise the examples under the [folder linked above](https://dev.mysql.com/doc/connector-net/en/connector-net-programming-connecting-open.html) are helpful. After connecting [here is an example] (https://dev.mysql.com/doc/connector-net/en/connector-net-programming-mysqlcommand.html) of reading some data. Is the windows forms app an intranet application or an internet application? This might impact how you'll want to be getting data.
This StackOverflow question gives some more info and a link to the guidance [Why Func&lt;T,bool&gt; instead of Predicate&lt;T&gt;?](https://stackoverflow.com/questions/665494/why-funct-bool-instead-of-predicatet). From my understanding, while being very similar, they're not assignment compatible. While Predicate has been around since .net 2.0, Func arrived in 3.5 and is more generally useful and, partly for this reason, is recommended as the choice for frameworks to keep consistency. You're not *wrong* to use Predicate in your own code as it isn't deprecated, but it's probably a better habit to get into using Funcs for consistency and better LINQ compatibility.
C# Interactive is supported since Visual Studio 2015.
Not in UWP.
C# works on UWP, F# does not. C# has Blend, WPF, Forms, UWP, EF designers support, F# does not.
Yes, you can use query syntax and method syntax, but F# provides its own extension methods to `seq` and `list` that are more idiomatic.
Thank you. I'll take a look at that code tonight.
 var val = tb_1.Text; for (var i = 0; i &lt; val.Count(c =&gt; c == 'a'); ++i) { someaction(); } tb_2.Text = new string(val.Reverse().ToArray());
So it has its own thing. LINQ is a unique set of functions adaptable to any language according to definitions. Part of the definition is it's name.
At first I read this and though it was a terrible idea. I then spent 10 minutes thinking of the huge number of dependencies in the code base for the main project at work and this suddenly seemed like a really good idea and I can't wait to implement it as soon as possible. 
*only in the for loop for(int i = array.Length - 1; i &gt;=0; i--)
And why use UWP?
Hello again Videl, thank-you for your reply the error is now gone! :)
Because Win32 is the road to legacy on Windows, unless Microsoft changes their corporate mind.
“Legacy” sounds downright heroic when compared to the Windows 10 forced-upgrade treadmill ;)
and? What does that have to do with the question asked? Do you think UI work and GUI design tools is the only programming there is?
[1] Don't use MySQL. Use MariaDB instead. It's compatible with most MySQL client implementations and has absolutely nothing to do with Oracle (a huge win). https://mariadb.org/ [2] Use Dapper as your so-called "ORM'. Learn to do things the right way up front. https://github.com/StackExchange/Dapper [3] Microsoft SQL is cute and all, but by no means is it a requirement. In fact I would strongly argue against MS SQL unless you have a specific need for it. Why? It's expensive. It's expensive. It's expensive. Your clients will eventually hate you for using it. If you are paying for it yourself, you will eventually hate yourself for using it. Don't trust free versions. They are nothing more than gateway drugs.
So its not but interestingly when i tried to install that extension just now i got an error that might explain why http://imgur.com/nCXEjUY any ideas?
[removed]
I'd honestly recommend not using an orm period unless it's a small scale application. I've seen way too many large scale orm based applications that end up with in line sql and stored proc scattered everywhere because the orm wouldn't do what the team wanted or wrote inefficient sql. At that point the orm, in line and stored proc becomes a negative because you never know where it's at without digging. Very annoying. Also any large scale systems will generally have a dba that will need to tune queries that occassionally need forced plans, query hints, or just rewritten for performance reasons. Always good to put those in their realm. We use dapper with stored proc to avoid boilerplate calls and mappings but retain control of the raw sql that's ran
Sorry for more replies... but for creating a new window with the item from another window... is there anyway to pass that data back and forth without a message/event service?
You're not looking at the bigger picture. You learn different languages for concepts. You're focused on low-level details like tooling that will be out of date 6 months down the line. PS: Ditch EF while you can. It's a horrible mess. 
To my knowledge, Postgres also has better Entity Framework support.
The answer is different depending on whether you want to use SPP (part of bluetooth classic) or GATT as used by Bluetooth 4. I'm guessing you want to use BLE rather than SPP. I've spent more time on Android than iOS, but iOS should have everything you need (and Xamarin will give you easy access to it). Windows is VERY late to the game on Bluetooth 4.0 support. A quick search indicates that they have finally implemented GATT server in the Creators Update, so you're going to need an up to date machine. I'd probably start on the Windows end and check that you can actually set up a bluetooth GATT server (you can use a BLE sniffer app on your phone to verify it is working) - if that works the rest of the exercise should be relatively straightforward.
My concern with the domain logic is mostly that people who don't understand sections of it will copy and paste those sections around rather than learn it. I find that happens more often when someone isn't familiar with the language or paradigms.
Linq is basically re-named functional programming basics. Map is .Select, filter is .Where, etc.
Removed: Rule 3, Spam.
Yeah, learning new things sucks
I'm not against learning new things at all, I'm just saying I'm not gonna learn something I'll never use.
People said that with visual basic and c#. 
Correct me if I'm wrong, but isn't visual basic practically useless nowadays?
I agree Carmack is a programming god, but don't forget about context and domain. He's been focused on gaming for his whole career. In that domain, everything has to boil down to the core game loop and the limited number of ms you have for each frame. That's really not true for the majority of other domains. I'm not saying he doesn't have a point, but I think oop has more benefits and fewer downsides in some other domains.
So: one wrinkle about F# vs C#: F#'s `list` type is a generic, *singly-linked* list. It is *not* System.Collections.Generic.List&lt;T&gt;. Consequently, it has *distinctly* different performance characteristics. F# has a built-in alias, `ResizeArray`, for System.Collections.Generic.List&lt;T&gt;, so it's not a big deal, but! definitely a thing to be aware of and to keep in mind.
All of the code samples make me cringe. I'm sure it's just me being unfamiliar with the syntax, but I don't really see the advantage of one line simple types and some of the other stated benefits. I could see type inference being a bonus, but I feel like C# already has it with the var keyword. Must be a Dodge vs Chevy thing.
This is awesome! I often have to manually create the models in my MVC applications that are used for deserializing different JSON responses from various API's, but this basically does that for me automatically! I prefer this over json2csharp. Looking forward to seeing whats next to come!
I know F#. Those low-level details like tooling that will be out of date 6 months down the line, are a support requirement in many enterprise shops, and one of the reasons I don't get to use F# on our .NET projects.
It has to do with after learning the language, it would be helpful to be able to actually use it at work instead of C#, which is not possible, because the support for F# isn't there for the majority of VB.NET and C# tooling.
Regardless how Microsoft will achieve their goal, it is clearly their intention to make it so, no matter what.
Here's a concrete example: https://fsharpforfunandprofit.com/posts/designing-with-types-making-illegal-states-unrepresentable/
I wonder how fast regular software could be if everyone took the same approach? 
Of course! After a while of practicing raw sql in C# it's best to use an orm for a production app
The question wasn't, "why should I learn F# to make GUIs". The question was &gt; But what I don't understand is why F# helped to learn better practices than simply reading up on good practices in C#? Being a good developer means you never stop learning. For one thing, you'll find yourself unemployable as a greybeard. You want to learn both breadth and depth. You don't want to limit yourself to one type of thinking and problem solving. You don't want to limit yourself to "I'm a GUI/web designer for life". And you don't want to tie yourself exclusively to one programming language or even one technology stack. Pure functional (F# is not pure, but pretty close) is a different and useful way of thinking of programming that has useful applications to solving real problems. The concepts you learn in F# will translate very easily to other functional programming languages, especially anything that is close to Haskell like F# is. Some of the most interesting (and high-paid) work is in areas where there is *not* tooling to hold your hand and do it for you.
No, the compiler will merge them into one. The only problem is the readability of the given class, but it depends on you. If you work with multiple people then you should clearly state which part of the code is in a different file, but that all the downside.
I already know Caml Light, Standard ML, Haskell, OCaml and F#. Cannot use any of them at our customer projects, but I can use VB.NET, C#, Kotlin, Java, TypeScript, Scala, JavaScript, Objective-C and Swift. Hence why I doubt the value of learning F# as C#, because there are better languages with the same FP paradigms with more job opportunities, properly supported by their creators.
Cool, thanks. I am working alone, and possibly will share the code on GitHub eventually. And for now I have all that class inside 1 folder which puts it all in one place neatly. 
Partial is an editor functionality (same like #region) not a code structure. Microsoft added it back in .NET 2.0 when it still seemed that having "Visual Basic"-style editor and generating a bunch of code is a good idea. It has nothing to do in any professional code. It makes your code *harder* to read and navigate and doesn't offer any benefit what so ever. If you have a 500+ lines of code in a single class you should consider moving some logic out and break into multiple classes that make sense. Breaking the same class into multiple files just makes finding a specific line of code that much harder.
I would absolutely not split up classes into multiple partials. I've seen it happen a lot, and it's always universally bad. It decreases readability and maintainability of your code by a huge factor. You suddenly have to look across two or more files for members of the class you're dealing with. The partial feature is meant for code generation - not to artificially split up bad code into smaller files. Instead you should focus on decreasing the size of your class. Move out code to smaller more focused classes. Reduce code duplication.
&gt; If you have a 500+ lines of code in a single class you should consider moving some logic out and break into multiple classes that make sense. That was also my first thought, but looking at other big projects (mostly in other languages) it seems like huge files with even 2000 lines of code is not strange! Example: [Bitcoin in C++ 2800 linex](https://github.com/bitcoin/bitcoin/blob/master/src/net.cpp) [the awesome project, Live-Charts in C# 504 lines](https://github.com/beto-rodriguez/Live-Charts/blob/master/WpfView/LineSeries.cs) What I am trying to break down is this [Socket code](https://www.codeproject.com/Articles/83102/C-SocketAsyncEventArgs-High-Performance-Socket-Cod). I am just breaking the `Connect`, `Receive` etc into new classes.
&gt; Instead you should focus on decreasing the size of your class. Move out code to smaller more focused classes. Reduce code duplication. My problem is passing variable between these. The whole class that I am trying to break down is using a set of variables shared between its functions. 
I have many projects that are C# on the outside and F# on the inside. Anytime I need to do anything substantially difficult, I drop in an F# assembly and get it done in half the time and half the code. 
And what's the problem with it? Pass the values around as method arguments.
Those are not two particular good examples. At least with the second most of the lines are documentation.
&gt; Edit: Why I'm doubting the gods of Reddit I don't know, but you were right. More like you were doubting the compiler's error messages. The compiler doesn't lie (although there is the rare compiler bug from time to time) :).
That is part of the problem, all these comments make it crowded (at least it is my view). &gt; And what's the problem with it? Pass the values around as method arguments. There are a lot of them. And I am not sure how to do it. The solution that I came up with was to use another class to contain all these variables (eg `Settings`) and then hold an instance of that class in my main class while calling other classes and pass that instance as argument. Is this the correct approach?
They wouldn't run on the Windows store though.
I looked quickly through the socket code you linked. There's not too many huge classes, there's a lot of small ones. The huge blocks are generally just a lot of comments, that you most likely want to remove after reading through it once and understanding the logic. The code is a bit outdated, and some refactoring can remove a lot of unnecessary code (for example using [auto properties](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/auto-implemented-properties) will remove a chunk of it by removing local variables and property implementations. Once you understand the code maybe try to use an extension like [ReSharper](https://www.jetbrains.com/resharper/) it will offer you a lot of ways to optimize the code and remove the clutter, but be sure you understand what is happening, don't just blindly accept everything it offers to change.
He literally linked an easy way for you to format your shit, and you reply with more unformatted shit. How do you expect anyone to want to read your code if it looks like shit?
There is almost never advantage in being an early adopter. F# is still a toy language with bad tooling support. Even when it gets to the mature state, it will (sadly) never be a general purpose, robust programming language. Instead, it will be used in specific industries and for specific use-cases.
Hi, Not sure I agree that partial classes are useless. They are fantastic when you need to extend generated code - i use it all the time to extend entities created by entity framework. Im not sure manually writing classes split into partials is a good idea though, for reasons given elsewhere in this thread. I tend to use #region to break down large classes into manageable chunks. (i am assuming as requested that its not newbishness related!)
I've just release a better version of clipr. Support fields as well as properties in your Options class, has better attribute names and fixes a number of bugs. https://github.com/gene-l-thomas/coptions It's on nuget: **Install-Package coptions** using System; using System.Collections.Generic; using coptions; [ApplicationInfo(Help = "This program does something useful.")] public class Options { [Flag('s', "silent", Help = "Produce no output.")] public bool Silent; [Option('n', "name", "NAME", Help = "Name of user.")] public string Name { get { return _name; } set { if (String.IsNullOrWhiteSpace(value)) throw new InvalidOptionValueException("Name must not be blank"); _name = value; } } private string _name; [Option("size", Help = "Size to output.")] public int Size = 3; [Option('i', "ignore", "FILENAME", Help = "Files to ignore.")] public List&lt;string&gt; Ignore; [Flag('v', "verbose", Help = "Increase the amount of output.")] public int Verbose = 1; [Value("OUT", Help = "Output file.")] public string OutputFile; [Value("INPUT", Help = "Input files.")] public List&lt;string&gt; InputFiles; } namespace coptions.ReadmeExample { class Program { static int Main(string[] args) { try { Options opt = CliParser.Parse&lt;Options&gt;(args); Console.WriteLine(opt.Silent); Console.WriteLine(opt.OutputFile); return 0; } catch (CliParserExit) { // --help return 0; } catch (Exception e) { // unknown options etc... Console.Error.WriteLine("Fatal Error: " + e.Message); return 1; } } } }
Make a class called ImageResizeOperationResult that you will use as a return type for the method. It should contain bool property IsSuccess and list of errors. https://stackoverflow.com/questions/23537024/good-practice-for-wcf-service-operation-result
I would say that extending EF classes that way is also a very bad idea since the functionality appears that a team might not expect. Following the [Open/Closed principle](https://en.wikipedia.org/wiki/Open/closed_principle) classes should be closed for modification. You should either inherit the class and add new functionality into the child or use [decorator pattern](https://en.wikipedia.org/wiki/Decorator_pattern) to add functionality. This is not a topic about regions, but again, that is an editor functionality and should not be in the code. Here's an old but very relevant article about regions [Just say No! to Regions](https://extractmethod.wordpress.com/2008/02/29/just-say-no-to-c-regions/)
Based on the discussions about partial classes [here](https://www.reddit.com/r/csharp/comments/6pm7zt/is_there_any_downside_to_breaking_1_class_into/) I just had to link this article. I'm strongly against editor features mixing with code (I can live with XML comments because the gain is so huge, but nothing else) but it seems this sub has a different opinion so I would like to open the discussions on it.
Maybe in a perfect world, but in practice, subclassing the entities doesnt work, since most of them are created by the db context itself. Id argue that adding a partial to them IS a form of extension, not modification, so does follow the open/closed principle. Furthermore, as a practical issue, it allows me to make all EF entities descend from a common base class, which is invaluable.
&gt;If you have a 500+ lines of code in a single class you should consider moving some logic out and break into multiple classes that make sense. I disagree, if used correctly partial can improve maintainability. NUnit for example uses partial in their Assert class: [Github](https://github.com/nunit/nunit/tree/master/src/NUnitFramework/framework)
&gt; &gt; &gt; Following the Open/Closed principle classes should be closed for modification. Of all the ridiculous... I know people have plenty of crazy ideas about what OCP means, but this takes the cake. Where did you get the idea that the closed principal means that you can't used partially generated classes? 
And for the record, the Closed Principal means that once you ship a library, you shouldn't add new functionality to it. The Open Principle means that classes should always be designed to be inheritable. Looking at the .NET Framework's Base Class Library, it is easy to see that they don't believe in either.
1. Code generation isn't a "Visual Basic" thing. VB got it in version 7, the same time C# 1 was released with the same functionality. 2. Code generation was a big deal in .NET 1.0 and continues to this very day
Depends on why you are doing it. In the Chain ORM there are classes that have a lot of methods. They also have an interface with a lot of identically named methods with slightly different signatures. These interface methods simply forward calls to the normal class methods. https://github.com/docevaad/Chain/blob/master/Tortuga.Chain/Tortuga.Chain.SqlServer.source/shared/SqlServer/SqlServerDataSourceBase.cs https://github.com/docevaad/Chain/blob/master/Tortuga.Chain/Tortuga.Chain.SqlServer.source/shared/SqlServer/SqlServerDataSourceBase.Interfaces.cs Using partial classes allow me to move the interface methods out of the way. Since they have nothing interesting, this isn't a maintenance issue. That said, I use this technique sparingly and always look to see if I can break up the class first. EDIT: Except when using code generation, in which case partial classes are necessary. 
That gets messy and hard to follow if there are more than two or three parameters. Essentially you are breaking cohesion by separating the functions from the data they operate on.
The reason I asked this question is that this approach which is of course widely used was designed before C# had pattern matching.
I'm not saying code generation is visual basic thing, nor I'm saying it's a bad idea. I mentioned visual basic visual meaning editor, the style VB had from the begining. Code generation is fine. Mixing generated and real code into same class is not. Creating real classes and splitting them into multiple files (that is the topic) is worse.
My coworkers once wrote a fairly complex program that looked like it had several dozen classes, but actually every `MyClass.cs` contained a partial of `Program`. And every one of them started with some global variables that were used all throughout the code. I think someone told them that they should split up their code into smaller pieces, so they did.
Partial isn't an editor feature, it's a compiler feature. And if you have a class/interface with 50 methods - most of which overloads - and accompanying XML doc comments, and you still want them to be in the same class because of the API, then partial is really useful to keep things maintainable. 
True but it was weird, because it should not be empty. It had to do with loading time though. The test program was faster than the website it had to test. 
You are right, it is a compiler feature of course. But I believe you will agree that it was implemented to improve editor functionality. 
&gt; True but it was weird, because it should not be empty Expect a lot more of this through your career. Very common thing I hear. "Have you checked if X does Y?" ... "Well no, it shouldn't do that." ... "Yeah but *does it?*" ... "Oh, shit!" Never assume anything. Check and prove out all possibilities. 
One place I use them is creating a "utils" class with utility (private) methods that only that class uses but dosen't fit the meaning of the class. However, like anything else, don't abuse the feature and everything will be ok. The most important thing is to be consistent on its use. Take a look at Microsofts own examples to have an ideia of when/where ti use them: [here](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/partial-classes-and-methods)
+1 The linq reverse makes this much easier.
There's no need to split one class into several partial classes. This would only be useful if you and a friend were each working on half the class, and then you could code them independently in two separate files. However, this can still be more difficult to maintain, and I would combine them at some point. Partial classes are mainly useful in dealing with auto-generated classes, such as those generated by the Entity Framework. If you want to add to those classes, you can't update them directly, as re-generation of the classes will wipe your modifications. So Microsoft makes them partial classes, allowing you to create a second partial class in a different file with your additional functionality.
As far as comments go, they should only be kept if they are providing "why" information and not "how". If you need a comment explaining what the code is doing then you need to refactor the code to make is more readable. If you have a method called "DoTheThing()" and then a comment describing the thing make it the method name. If it's too long to be the method name, break it into multiple methods. The only comments I ever write are ones that let other devs know "This is happening here, this way, because there be dragons any other way". That way they don't blindly change it without taking that into account.
My shop weilds the Alt-Enter hammer indiscriminately and with great force. 
You could encapsulate the variables together into one object that is used to pass them around between classes. It would be cleaner than passing 10+ variables all the time. 
I use SQL Server. The only reason you'd want to step outside the Microsoft stack for this is if you're not prepared to pay for a license, in event that you can't use the free version. Alternatives such as MySQL are free, which is nice, but I've not seen any of them with management tools comparable to SQL Server Management Studio. Consider this when thinking about the scalability and longevity of your software. I noticed some people saying to write raw SQL yourself, but this is not necessary. I do write SQL when I need to, but often I don't. Most likely, what you need to do can be accomplished by querying with C# through the Entity Framework. In fact, I'd go as far as to say that it's easier and more maintainable to keep your logic on the C# side, then you don't have a split of logic between Visual Studio and your database. If you're concerned about the efficiency of the generated queries, you can always check them with SQL Server Profiler (I don't know if an equivalent tool exists for MySQL). Though you don't need to write your own SQL, it will be important to learn about your database engine (SQL Server), the structure, security and how it works. As you've now said you're going to look at SQL Server, here are my preferred learning resources: Entity Framework: https://www.youtube.com/playlist?list=PL6n9fhu94yhUPBSX-E2aJCnCR3-_6zBZx SQL Server: https://www.youtube.com/playlist?list=PL08903FB7ACA1C2FB 
What good does speed do if you're already spending 95% of the time just waiting for user input? The primary weakness of the vast majority of software has nothing to do with speed. Most applications would benefit far more from a better user experience, which is usually more about design than it is about raw optimization. A lot of software is exceedingly hard to maintain, poorly organized, poorly documented, and fragile. These are things (good) oop helps with immensely. 
I use regions all the time, almost exclusively to block out my class designs. My regions include: Fields, Properties, Constructors, Events, Event Handlers, Methods, Classes. It makes it much easier to find the code that I'm looking for. Using Ctrl+M,L and Ctrl+M,O to expand and minimize regions helps a lot too.
That's why you use specific structs/classes as data members to aggregate the parameters and make the code more clear.
If you're not using code generation, splitting a class into multiple parts is probably a sign of a class that is doing too much. You may want to look at whether you can split some of the parts out into freestanding classes of their own, which your main class can then delegate to.
The only time I use partial classes is on a class that is generated. Usually to set default values or to have that class implement an Interface. I don't see another reason to use partial classes.
I loathe regions because they're either used for kind of pointless code organization (here's where I keep my properties! here's where I keep my constructors! here's where I keep etc) or as a rug under which ugliness can be swept so that it doesn't need to be looked at. If the class is so large that it *benefits* from the former, it probably does too many things and should be refactored. If it benefits from the latter, it probably needs refactored, anyway.
You could have another (second) application (in fact assembly) which has the permissons embedded in the manifest and is started from the first application. 
Most of my work is web/cloud stuff, but your saying an app that takes a dependency on an F# assembly won't work in the windows store? That seems counter intuitive since the CLR is the same for both.
Found this from [Here](https://social.msdn.microsoft.com/Forums/lync/en-US/0300846f-b327-440e-ba9f-8e49e1bdf166/c-servicecontroller-run-as-administrator-on-demand?forum=netfxbcl) `private void StartService(string name) { var process = new Process(); process.StartInfo.FileName = "net"; process.StartInfo.Arguments = "start " + name; process.StartInfo.Verb = "runas";//run as administrator process.Start(); process.WaitForExit(); }` Side note - Reddit is awful for formatting!
You can share resharper configuration files among the team so a senior/lead can pick all of the suggestions that should be offered and all of the indicators that should be shown. If you team does this, then you really should Alt-Enter just about (but not blindly) whenever it is offered.
I use this addin https://marketplace.visualstudio.com/items?itemName=Shanewho.IHateRegions 
I feel like you should show us your code. It sounds like there are more efficient ways to do what you want. Besides, 500 lines for a single class really isn't that much.
I think the reason folks hate regions so much is that they can be a code smell. Generally, it means the class is doing too much and thus it can be easily read or organized on the screen without "help". The article makes some good points as to how regions can get misused. That said, there is nothing inherently wrong with using them if they help, especially if they encourage code organization. I use them quite often when writing unit tests. I'll create regions to group tests by the method under test. If you have a large object that is mostly properties with a few methods, it is a quality of life thing to be able collapse the properties without needing to scroll past them. I think the soap box rant of "regions are evil" is a knee jerk reaction and it just divides the community. 
There is no CLR for Windows Store apps. On Windows 8 and 8.1, there was the MDIL AOT compiler, which was later replaced by .NET Native for UWP applications. [Inside Compiler in the Cloud and MDIL](https://channel9.msdn.com/Shows/Going+Deep/Mani-Ramaswamy-and-Peter-Sollich-Inside-Compiler-in-the-Cloud-and-MDIL) [Deep Dive into the Kernel of .NET on Windows Phone 8](https://channel9.msdn.com/Events/Build/2012/3-005) [Inside .NET Native](https://channel9.msdn.com/Shows/Going+Deep/Inside-NET-Native?term=Inside%20.NET%20Native) [.NET Native Deep Dive](https://channel9.msdn.com/events/dotnetConf/2014/-NET-Native-Deep-Dive?term=Inside%20.NET%20Native) F# is officially not supported language for Windows Store apps. https://docs.microsoft.com/en-us/windows/uwp/get-started/universal-application-platform-guide &gt; Your programming language options for your Windows 10 project in Visual Studio include Visual C++, C#, Visual Basic, and JavaScript
I've split up large controllers in a MVC app into partials with great success. The methods aren't inter-related but do share common objects (injected services etc.) They also all make sense under the same controller. Separating them into different files reduces the chances for wonky change sets or differences in source control and keeps them under the same headers and routes to the public. Of course there are good ways and bad ways to use partials, you still have to be organized. But to blanket say they are bad is a bit too rigid, imo. Could we move our end points into separate classes/controllers? Sure but that gains us nothing other than having to rework all the integration points in the systems that call into said controllers. 
FWIW-you may want to check out how Hangfire serializes/deserializes jobs since you can Enqueue/Dequeue lambda expressions. Start [here](https://github.com/HangfireIO/Hangfire/blob/master/src/Hangfire.Core/Common/Job.cs).
This is especially helpful for libraries; organizing the code this way gives you a good top down look of the API you are exposing. You probably know this but CodeMaid will manage regions the way you describe automatically.
I've worked on code like this, except it was a Winforms application that had 15k lines in a "FormMain.vb" class. And that doesn't include the partial classes of the same name.
Yup i use that for code cleanup and code reorganize. Helps a lot for reading code
Yes, this is called *data clumps*
I didn't include any code in my question because I wanted a general answer to this question, to see the use cases of partial classes. Like the 'implementing a different interface on each partial class' answer. But if you are interested, the code that brought up this question in my mind is this one: https://www.codeproject.com/Articles/83102/C-SocketAsyncEventArgs-High-Performance-Socket-Cod and I have already added a lot of things to it which made it even bigger.
These are called *data clumps* and are really an object. When you see sets of variables that always tend to move together that smell you're smelling is this
The only time when partial classes are a good idea is when one part of the class is auto-generated and the other can be modified by a developer. In any other case I would recommend creating multiple "normal" classes.
There is one reason to use partial classes, and that is with cross-platform apps. When creating a cross-platform app sometimes there is platform specific code. In which case it is useful to break platform specific code into its own partial class. 
As far as naming methods, the name should contain a verb that tells you what the method does. It's the action that is being performed. And if you end up with a method that needs multiple verbs to describe what it does, that method is trying to do too much and should be refactored.
Any luck?
Realistically, you're not going to understand the benefits of novel programming language features until you try them. C# 2.0 programmers were pretty skeptical of the benefits of LINQ-style functional data processing (you see similar skepticism in the Go community today). Then version 3.0 came out and they started using it. The rest is history.
Carmack's talking about code readability and maintenance in that article. The most he offers about performance has to do with devolving pure methods to impure ones to reduce copying and a brief aside about functional programming and parallelism.
Doesn't really matter, and the principal benefits to the sort of design Carmack is discussing in that article are not performance, but correctness, readability, etc. 
You can use extension methods in F# just fine, so LINQ's method syntax also works.
Sure, don't knock it til you try it. I get it, and I'll try it eventually. I'm just not very motivated by the stated benefits yet.
Don't focus on line counts. Focus on single responsibility. You can have a good class that is 700 lines or 200 lines, but you can't have a good class that is responsible for the implementation of many types of things in one file. I've usually heard it phrased as "your class should only have one reason to change". Example: I often model validations for business rules as individual classes, then I only ever change that class if the business rule changes. That rule of thumb is pretty general, and won't help you much once you get into nested dependencies, but if you are debating on whether or not you need to break down some simple classes its a good starting point.
Thanks for the reply. my class currently takes (start time, end time, points) then it get the data for each point from a database for that range of time, then it has several methods to export the data in different ways. what I can break is make each method or way of exporting data in different files. but I can't see much benefit of doing so 
&gt; Don't focus on line counts. Focus on single responsibility. 
[removed]
I disagree. Regions are another feature that's useful in a certain set of situations, gets abused, so people decide it's not a worthy feature. Regions should *not* be used to hide crappy code in need of a refactor, but they're great as a mechanism for easily locating related functionality in a class or condensing verbose but necessary components. For instance, say a class has twenty properties... Would you rather scroll down past all of them every time you need to look at a constructor, or be able to condense them easily into a single line?
alright fair enough. I'll make the class into 2, one to get the data for the given points, other is to extract the data to excel and see how it goes from there. also, if possible can you guys point me on a good source to learn MVVM. I need someone who show small projects before and after MVVM implementation. 
Since a large chunk of the code there appears to be smaller class, I guess you're looking at adding some functionality to SocketListener? I think a lot of these assumptions were that you were starting with a 10K line plate of spaghetti - it's certainly the first thing that comes to mind when I see this question. (Probably because I've inherited code bases that have done exactly that.) In this case however, I think the answer is not to modify the SocketListener class (unless you need to make methods protected and/or virtual). Instead, *extend* it by making a CustomSocketListener class (hopefully with a more specific name), and overriding the methods of SocketListener in order to weave your functionality in. This is called the Open/Closed principle, and is one of the five that makes up the SOLID OO principles.
An `int` cannot possibly be null as it is a value type. You either simplified your posted code too much or something else is going on and you are misinterpreting the exception message/source.
~~Sorry lol, I'll reply to you tonight. I promise.~~
There are a lot of absolutes here. I can see at least a few cases where you'd want to use partial classes. I'll give an example. I inherited a codebase where among other things was a SynchronisationManager class used to communicate to a SOAP API. Every single network request that the application used was in there. It was about 15-20k lines, which my potato of a computer didn't handle opening without significant lag. Not to mention searching for anything from the file. Sure I could've split it up into different classes, but time is also a factor. That would mean that I have to refactor the rest of the application code as well to point to the correct synchronisation manager. It was way easier to just split it up into partial classes containing logic for a single separated chunk of functionality (user, posts, whatever). To answer your question directly though, the only downside, depending on how you split it up, is readability. Performance wise there's no difference. Also I'd say 500ish lines of code isn't really that much. Usually I start thinking about splitting up a class when I reach the 1k mark.
Yeah sorry, I made a mistake, the variable in question was a string, will edit but the question remains.
Static variables are initialized in the textual order they appear. Your instance variable is thus initialized before number, and the instance variable creation calls the constructor which calls Bar() which uses the second static variable which hasn't been initialized yet. if you move the number initializer to before the instance variable declaration it should fix it.
Fixed it indeed, thanks for the explanation! 
Yes that is what I had in mind. But generally speaking I also see code with 10K lines which have always been weird. But since it is usually in some other language I never thought about it until today that I encountered this with my modified version of above project. For now I am mostly learning C# so I am trying different things, learning new concepts, coding patterns, etc. All self taught...
&gt; I would say that extending EF classes that way is also a very bad idea since the functionality appears that a team might not expect. Any EF developers here ever had an EF-based project that generated code and didn't use partial classes? 
Static members are initialized to default/assigned values in the order they're declared in the file. private static readonly Foo instance = new Foo(); Initializes first. In so doing, it invokes the `Foo` constructor. This in turn accesses `Bar()` which then access `str`. But at this point, `str` hasn't been assigned the custom initial value and is still set to its default/null value. To fix it, move the `str` declaration/initialization before `instance`: public sealed class Foo { private static string str = "FooBar"; private static readonly Foo instance = new Foo(); ... This is defined in the C# spec 10.4.5.1: https://msdn.microsoft.com/en-us/library/aa645758(VS.71).aspx &gt; The static field variable initializers of a class correspond to a sequence of assignments that are executed in the textual order in which they appear in the class declaration. You can also help mitigate this and/or avoid the issue of "textual order" by moving some of the initialization logic to a [static constructor](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/static-constructors) which should initialize all static fields to their initial values before executing the static constructor body.
**OP Follows Up: The Real Solution** This is the "real answer" to my question in the sense that it is the cause of the problem in the real life code that I was referring to. I saw it immediately when I did a multi-file search for the variable name. I am honestly at a loss for words as to how the original developer thought this bug was hard to fix. // This code was written first. int a = 5; // Alice is a, Alice has five apples. int b = 8; // Bob is b, Bob has eight apples. int c = 2; // Carol is c, Carol has two apples. // And so on, ten variables named by single letters. int j = 9; // Jason has nine apples. Then, after writing the code above, someone told the developer that Alice, Bob, and Carol do not belong in alphabetical order. They should be sorted by age. (The variables are not actually people who have an integer number of apples, but I am changing the topic of the program to protect the guilty, and also for clarity.) The developer didn't want to change all the code he had already written. So he did this: // Hotfix to change the order of the ten variables: int num = a; // num is a fantastic name for a variable. a = c; // Carol needs to come first, Carol needs to be a. d = num; // Alice (formerly a) needs to come fourth. num = b; // Let's temporarily store the value of b. b = e; c = num; // Bob (formerly b) needs to come third. // And so on. // Now all ten variables are in a different order. But in a different place, the variable name `num` had already been used: // Different place in the code: int num = obj.GetHashCode(); When the developer did the clusterfudge-style rearrangement of the 10 variables, the temporary-value-holder with the identifier `num` actually already had a value, and that value was given to one of the ten named variables. In summary, the source of the problem was: First, using the letters `a` through `j` to represent 10 variables that have a defined order. Second, using the fantastic and intelligently-named variable `num` as a temporary storage bin for multiple different 32-bit integers. Third, changing the order of the 10 variables by temporarily storing them in the variable `num` and reassigning them. And fourth, putting the value of obj.GetHashCode() into `num` and forgetting that he had done so. Upon verbal questioning, the original developer seemed to have forgotten that he rearranged the 10 variables. He had not shown me this portion of the source code when originally asking for my help.
That is the primary reason why I use #region: I use properties, and I get tired of scrolling past them. Once they're created, I usually don't care to see them ever again. Cntrl-m, cntrl-o lets me disappear them and keep my focus where I want it to be.
It occurs to me that this doesn't answer the question being asked, though. There is at least one downside to having a class split across multiple files, which is that readability suffers by putting different parts of the thing in different places. If this is well organized and the parts are loosely coupled, this isn't a big deal: the different pieces are kept together with other, related pieces, and the reader doesn't spend a lot of time tracing through other files to figure out what's going on. If this is how your class is already structured, that may mean that each potential part is a separable class you could build and use, instead. If this isn't well-organized, or the parts are intertwined (say, lots of mutated state throughout the class to control the behavior of internal methods, instead of arguments passed), this can make it harder to understand an already-difficult-to-read hunk of code. Now, there are times and places this may still make sense: if your class has distinct parts that would be changed together and independently of the rest of the class, this may be the thing to do. But! the most common scenario in which this occurs is when a significant portion of the class is generated. In most other situations, it will make more sense to split the class into one or more other classes per part, and keep the original interface as a facade, hiding the internal goings-on.
They're a good legacy code tool when refactoring and making sense of the code base. Sometimes you don't want to go off on tangents and refactor code unrelated to your current task but you still want to make a note of it and have that note in version control, and then hide the relevant code.
That's great! I've worked with a number of self-taught programmers over the years, and the ones that have not only devoted time to the learning, but also to the craftsmanship of writing good code, are some of the best. Not only can I trust them to write good code, but they typically have some of the best work ethic. Keep it up!
If you're using regions to hide your code, then you're using them wrong. The #region tag is incredible at behaving like a table of contents. Most people have a section of each file for members, constructors, etc. But if you delve into the the methods, you can group them to make navigating your file much easier (message methods, post methods, etc). Then, you can jump around to each one using shortcuts (I use JetBrains, so jumping to a region is just ctrl+alt+. ). This shortcut unfortunately doesn't work in VisualStudio (or I'm too dumb to find it), so C# is one of the only languages where I don't do this. It's also nice to region 15+ properties that take half the screen to scroll past...
If you are sitting there getting antsy about me using regions when File-Edit-&gt;expand all regions is a thing you are wasting my time talking to me about it. #region MakeRect //A truely default constructor (With no parameters vs one with a default for every parameter) is better to //work with for serialization rect MakeRect(){ return MakeRect(10,10,10); } //This overload can't be emulated by providing default values rect MakeRect(int l) { return MakeRect(l,l,l); } rect MakeRect(int w,int h,int d) { return new rect(w,h,d); } #endregion I am not going to spend money on Resharper to do nothing but slowdown my IDE and offer advice I don't want. If you are hiding crappy code with region, the answer isn't to remove the regions... it's to remove the crappy code. 
This would be really nice to have in C#.
OT: I really like style of your blog. So clean and harmonized. What did you use for making your blog? I can track it to github code, but that's all..
Check out the Enterprise Libraries Transient Fault Handling Application Block. It allows you to write code that will retry operations based on policies and strategies.
If your class does two or more distinct things, and those things don't interact much, then I'd say it's better to separate them into separate partial classes in two files. I've done this in the past in an attempt to clean up some old code, and it was better than nothing. However, this is mediocre solution to the more fundamental problem that your classes really, really, really, really shouldn't get that big or do multiple unrelated things, ever. And so, if you already have a bloated class, what you should really be doing is redesigning things to fix the fundamental problem, not band aid fix it. 
Readability. If you think it has different segments that make sense together in different files then I'd say you've Probably broken the Single Responsibility principle.
https://msdn.microsoft.com/en-us/library/system.net.httpwebrequest.getresponse.aspx#Anchor_2
I'd give my left goose-egg for this.
One of the struggles I encountered when starting programming was reading all of these "best practices" (like Single Responsibility Principle or SRP) and thinking 'what benefit does this have? Why would I do this?" Almost always to a junior dev the benefits are not immediately visible - because they come later. You'll really love SRP when you start writing unit tests, or start having to change things in ways you didn't expect. If you can develop good, base habits now it will pay off in dividends as your code gets more and more complex. I know it can be totally perplexing as to *why* you should do things a certain way (other then Book X tells me so) but these standards have been around forever and are global industry standards for a reason. 
Are we going to start seeing random developers causing memory leaks because they thought they were smarter than the GC?
Ditch Entity Framework migrations. Our preferred tool is FluentMigrator. Flexible enough to handle everything we need to do.
We _currently_ see random developers causing memory leaks because they thought they were smarter than the GC.
Being smarter than the GC isn't hard in any program of non-trivial size or which deals with large objects. The GC is a generalized solution to a problem, and while good, can be painful in certain situations. Any time we have a strategy to avoid collection, it means the GC isn't optimized for that case (like large arrays). Now, that being said, some developer will do something stupid. It's a rule of life. But I don't think we should prevent useful features from existing just because someone will screw it up. Just wrap it in `unsafe`, which is usually enough to dissuade people from going any further. 
You could get around the order problem by defining your singleton as a property that initializes the instance on demand private static Foo instance; public static Foo Instance =&gt; instance ?? (instance = new Foo()); 
Is it just me or are the line breaks in that article annoying? Also that name makes me giggle given the use of it as an insult these days.
&gt;Is it just me Probably not
Yeah. I went back and inspected the source. Hard coded `&lt;br&gt;` make it impossible for that not be look awkward as all get out.
/r/ProgrammingBuddies
Fixed blocks aren't exactly the same thing as manual memory management.
There are many ways to do this. It really depends on your interpretation of MVVM (sorry, I know that answer is vague and frustrating, so I'll provide some options.) * You can create a public property on ViewListVM that is populated when you create your new Window. Since you are using a new window, there is no way to inline this in XAML, since the window is in a different visual tree. You will need to get creative here. * A simple solution would probably be to create an instance of the window you want in code-behind, and pass an instance of your VM with OneWayToSource binding on the public property you created. This will probably be the easiest to maintain. * Alternatively, you could subclass a Window and make it your View. Then you can set up a DependencyProperty that takes your Item and constructs the VM internally. [Gist Here](https://gist.github.com/L-E-son/afc77bba4d60e070fca8a856b1db173c) * You can give your ViewModelViewList an instance of your ViewModelViewOutput in the constructor. This is an easier solution, but not recommended. You can then set a public property like in the previous step.
Thanks! You're right, it's on [GitHub pages](https://github.com/waf/waf.github.com), using the [acrylamid static site generator](https://github.com/posativ/acrylamid). Unfortunately, acrylamid stopped being maintained about a year ago. But it's still fine for generating html. I have a blog post about acrylamid configuration [here](https://fuqua.io/blog/2013/09/acrylamid-with-virtualenv-and-pip/). Thanks for the kind words!
You might get more takers if you described the project.
That happens sometimes when you copy a body of text from a PDF. The linebreaks correspond to the linebreaks in the document.
I've been watching some videos on using dapper &amp; c# but they don't look anything like your example. I'm gonna have to try to catch up on everything you have here. I haven't used Ienumerable at all in the example videos I've been following.
Literaturely unreadable.
I already use memory pools, a lot of structs, and off-heap allocations (`AllocHGlobal` etc) all to avoid excessive pausing. Having something like this would actually *reduce* the amount of nasty-looking unsafe workarounds I'd need.
1. Do not catch System.Exception, catch more specific types of exceptions like NotAuthorizedException or whatever is applicable. 2. Try to use Polly for "retry" logic - https://github.com/App-vNext/Polly It is really useful and convenient.
Just like someone on the first link said, you don't need to do the IF statement for Directory.DirectoryExists. Just do Directory.CreateDirectory(DataDir). If it exists, it won't recreate it.
https://stackoverflow.com/questions/11149556/app-config-change-value
Have you tried reverse.Poco? It's really handy.
Sounds like a job for a regex: var words = new[]{"ass","a$$","as$", "4ss"}; Debug.Assert(words.All(w =&gt; Regex.IsMatch(w, @"(4|a){1}(s|\$){2}"))); I'm not a regex expert, so I'm sure someone will follow on this comment with a better pattern.
Problem is, with multiple words and multiple languages, I don't want to create custom regex for each list. 
Well, there's that too. But that is primarily of benefit to other developers who may need to work on that code later. I was wondering something more along the lines of benefits to the end user. For example, 8GB still seems to be the standard for many laptops, but even though that's "a lot" of RAM, it gets real tight real soon these days. Yes, it's possible to upgrade things like the RAM, but then, it'd also be nice to see a re-application of (some of the) coding techniques from when developers needed to squeeze more from less, instead of tossing more RAM at the problem :-) So, games need to be fast, and still do a fair bit in a short amount of time. Many of those principles could possibly be applied to regular software, so I don't have to sit here watching this blue bar creep across the screen...
appreciate the reply. I have decided to turn this application to include the most of the C# language topics so it will be like my reference code for future projects. 
Not always speed, but doing more with less. Games are a nice example of where the developers need to get a lot of stuff done within time/space constraints. Or at least they did, historically speaking. If you think about it, games generally expect to have the entire machine to themselves. Applications, on the other hand, also seem to expect this. So if you're multitasking on a project, then a cpu-gobbling application is going to slow down your other tasks too. Tightening up the cpu-gobbling speeds up the rest of the machine as a side-effect. Which means that when we press any key, it responds quicker, instead of seeing the hourglass spinning. 
Jenkins should work fine, providing you have a build agent compatible with whatever software you're trying to build. If not, Team Foundation Services would be your best bet and is simple to set up - would probably be a bit better for internal use too. 
Here's a real quick hack solution (NOT optimized): https://pastebin.com/c65JasKi Naturally the characters dictionary would need to be fully pre-populated. I have to go out, might have a proper look at this problem later. Edit: While this technically answers your question I would advise against mapping all possible combinations due to the exponential growth as word length increases (only really viable for a small number of short words). Instead you need to use some form of pattern match, something like what was suggested by /u/114517 is probably your best bet.
Have you checked Microsoft's visual studio team services? It's has a free tier and is a one stop shop for SCM (incl. Git bindings), build, test and deployment.
Hmm... we just migrating to GitHub from TFS. 
I'm only just starting to learn mvvm with wpf myself, and I've found it to be pretty frustrating to find good sources that start from the beginning and progress at a pace that's right for me. Everyone seems to do it their own way and/or move too quickly and assume the reader/student knows quite a bit already. That said, these two youtube playlists are working for me. [Watch the first two or three from this list](https://www.youtube.com/playlist?list=PLrW43fNmjaQVYF4zgsD0oL9Iv6u23PI6M) - He gives a great overview to WPF and introduces the concepts of mvvm. After video 3 it started to go over my head. [Then this whole series (4 videos)](https://www.youtube.com/playlist?list=PL6oq24qjix9W6WzDHUet6DQg9MWVTO2Tz) - This guy takes a completely different approach, setting up his program from a scratch blank .sln and moving slowly through how to set up the file structure and take advantage of tools available from nuget. It was really helpful for giving me the reasons why certain classes are set up the way they are, and explaining in depth how they work. Then go back and watch the rest of the first playlist. His quick pace is easier to follow after watching the second series, and if you build the project along with him, it's pretty fun. I'm part-way down this track now and it's been the most educational and helpful for me, at least.
A lot of developers didn't like TFS for version control so MS now allow you to use git inside of VSTS (the public facing MS version of github called Visual Studio Team Services) it is not only source control, but also build servers, release pipelines and story tracking too. The place I work is migrating from a combination of bitbucket, TeamCity, Octo, Jira to just VSTS and it can't come fast enough. Not only does it cover all of that stuff, but it also integrates really nicely with visual studio making developers lives easier. If you use Azure for hosting then it just gets better from there.
I'm a big fan of build scripts. Something like cake for c#, gulp for JS, make etc. You should be able to get build, test and package running as tasks in the script. Then get Jenkins to run the script from the command line. Script lives in your repo. Anyone can clone the repo and hopefully get a working build and test on their machine same as the build server. Script also means you are build server agnostic. Jenkins, vsts, team city and even cloud build services should work of the script too. 
 var charToLike = new Dictionary&lt;char, string&gt;() { { 'a', "[a4AåÅäÄ]" }, { 's', "[sS\$z]" } }; var word = "ass"; var current = word[0]; var index = 0; var grouped = word.GroupBy(c =&gt; current == c ? index : (current = c) == c ? ++index : ++index); var regexPattern = grouped.Aggregate(new StringBuilder(), (sb, g) =&gt; { var list = g.ToList(); sb.Append(charToLike [list[0]]); if (list.Count &gt;1) { sb.Append($"{{{list.Count}}}"); } return sb; }).ToString(); var regex = new Regex(regexPattern); where regexPattern ends up being "[a4AÅäÄ][sS$]{2}".
I was going to recommend vsts as it really is an amazing service. You can integrate multiple external services with webhooks really easily, and it runs in the cloud so you don't have to manage any of the hardware. It can also run with internal hardware and storage, so if you're running tests with sensitive data it is secured with tls 1.2 certificates
&gt; Resharper to do nothing but slowdown my IDE Actually it does many other, useful, things, apart from slowing down your IDE. &gt; If you are hiding crappy code with region, the answer isn't to remove the regions... it's to remove the crappy code. Yeah well, in the ideal world, but it doesn't always work like that :/.
It's fine, but don't use back pings. Indent each line four spaces (says so in "formatting help") and have empty lines above and below.
+1 If your company purchases Team Services Online, you get the most recent updates which really are fantastic for Microsoft software houses. If you left TFS 2010, many things have changed and you would be really impressed with what is there now. 
You responded to a bot.
You could try teamcity, I've been using it for the last two years at work and had no problems.
I disagree. I love to have my code well organized so I use regions to organize my classes. I never used to hide bad code or reused code (as a matter of fact I love refactoring so it's hard to find the same code used twice in my classes)...
&gt; I have that command mapped to Ctrl-W-R It sounds like a hard way of just pressing F12, which I am currently addicted to :) I have no idea what the return shortcut is though, I press the arrow thingy on the toolbar...
There are lots of way to do this. But I would use something like Cake to help you orchestrate this. You can use Cake to build, test, and deploy the application.
Sound very nice - i'm not very enthusiastic on proposing my colleagues to write cake scripts for all the ~100 small projects - but perhaps this could be the way..
&gt; I'm working on a little project that is a profanity filter. Not the answer you want, but profanity filters are pretty much a waste of time. What's to stop someone writing `.A.S.S.`, or `A $ $` or `AxSxS` or `F·U·C·K·Y·O·U!`? Whatever you do won't stop people from swearing, it just means they have to be more creative. And don't forget the [Scunthorpe problem](https://en.wikipedia.org/wiki/Scunthorpe_problem). 
We went from TFS to Gitlab - it supports automated builds. Best of all you can host it locally for free.
You don't need to write 100 scripts. At most you'll need to write 1 main build script, and then a per-app script that calls the main build script and injects in the relevant parameters.
Oddly, I can relate to the exact opposite. Worked on a business application codebase that was *huge and older* and it really struggled due to garbage collection spikes. I had to be super careful what I did because an overloaded amount of garbage would bring the application to its knees when collection cycled. So glad I got far away from that monstrosity.
I think you might find https://www.appveyor.com/ useful. Very quick and easy to setup, and specifically (for the most part) designed for CI of .Net solutions
I think you might find https://www.appveyor.com/ useful. Very quick and easy to setup, and specifically (for the most part) designed for CI of .Net solutions
I think you might find https://www.appveyor.com/ useful. Very quick and easy to setup, and specifically (for the most part) designed for CI of .Net solutions
I think you might find https://www.appveyor.com/ useful. Very quick and easy to setup, and specifically (for the most part) designed for CI of .Net solutions
Patterns of Enterprise Application Architecture 
ahh perfect. I started with the first series as well, but after the 5th video, things went wild hehe. I will watch the second series then start again with the first one. Thanks a lot. I've searched many places but couldn't find examples from scratch not even paid sites like Pluralsight.com have good lessons. 
So... 101 scripts... 
Good grief. You really have to work at that in this language.
Good grief. You really have to work at that in this language.
An aside, if you aren't sure about where you want to run your builds, you may want to consider using Cake (C# make) to define the build scripts. That way if you decide that Jenkins isn't the right fit for you then you can easily migrate to TeamCity, TravisCI, or something else entirely without having to redefine your builds. 
It was more complicated than I make it seem. The codebase was measured in tens of gigabytes and it interfaced with a lot of older specialized hardware. The result was a software that absolutely *hard* to run on 32bit WinXP (yes, limited to base framework 4.0) in order to support the older hardware. The primary issue was that the whole application was poorly designed from the start and many of the subsystems that made up the main app were poorly and inefficiently written due to feature creep and hacky-sack patching. It leaked memory and simply ate resources; bugs that should have been caught in development, but probably weren't tested in a realistic environment. It had to be restarted daily in order to prevent inevitable crashes. Despite those flaws, no one was allowed to touch any of this poor code because it "worked" and any potential new flaws that were introduced/uncovered would result in downtime, which was not tolerated. I dropped that contract at renewal like a hot potato after seeing what a hellhole it was.
I don't think it will be a valid expression anytime soon (if ever). The name of the variable will be "placed" in the compiled MSIL version of the application (https://stackoverflow.com/questions/26573102/is-nameof-evaluated-at-compile-time). Nameof doesn't really "exist" in the framework and libraries as a function and therefore doesn't make sense as a parameter for itself. It's more like a compiler trick then anything else.
&gt; I don't think it will be a valid expression anytime soon (if ever). It is, but it requires you to write the code in a specific way.
This is a curious little thing. There seem to be (at least) 2 answers: class Program { private static string nameof = "test"; static void Main(string[] args) { var test = nameof(nameof); Console.WriteLine(test); Console.ReadLine(); } } public class nameof { } Both the class and the string variable work for this (in this case the variable takes precedence, comment it out and the class will be used). Declaring the variable within the method that contains the nameof usage does not work. The value is "nameof". They both mess up VS syntax highlighting causing nameof() not to appear in the keyword colour (because it isn't a keyword - you can potentially do some strange stuff with async/await as they aren't keywords either).
The source code is on GitHub... if that's what you mean by behind the scenes. I actually co-authored an Apress book on EF many years ago, and at least at that time EF was little more than LINQ-to-SQL, which itself was a very thin wrapper around ADO.NET. 
You got me curious. 😊 Maybe forcing your way around the nameof reserved keyword, but can't think of a fast way to do so at the moment (edit: you can just use it apparently). And I guess if you did, it would show "nameof" as a result, since the var you put in there is named nameof. Edit: Well nameof isn't that reserved as I thought, you seem to be able to just create a var with that name. Expected it to be a reserved keyword.
Keywords in C# haven't been reserved for a long time. 
My bad, getting old I guess 😉 Although I guess it wouldn't be in my way if it were reserved, because I would use the name nameOf/NameOf as variable/method name.
Figuring out the exact point of "single responsibility" is hard and it's going to depend radically on what you are doing. Lemmie give an example. I do two types of programming: structural engineering and video games. They're radically different and have differing needs. I have a class that does all the rendering in a JRPG style game. It renders sprites, maps, fonts, does work with shaders, loads and unloads content. Its single responsibility is "rendering", but that's a massive task. It's a huge class. However, when I'm calculating something like bending strength of a steel beam, I will break my classes down to individual equations. This is something very easy to write unit tests for. Given that I need to write unit tests for structural engineering, as I'm concerned about fucking up and killing people as a result, I will take single responsibility down to a level that makes writing tests very easy. I don't have the same concern with the renderer class. I can test that when I run the program.
Or `@nameof`.
The @ is not necessary if the keyword is not reserved. But I guess you can still add it if you really want it 😊
To quote yourself: &gt; if it were reserved It was a direct response to possible alternative namings **if it were reserved**. 
Lol, fair point 
Here's a silly one: class Program { static void Main(string[] args) { nameof(nameof); } static void nameof(Action a) { } static void nameof() { } }
The go-back command is View.NavigateBackward. I map the CapsLock key to Ctrl using [SysInternal's Ctrl2Cap](https://docs.microsoft.com/en-us/sysinternals/downloads/ctrl2cap), so it's comfortable and easy to press Ctrl -- and have about three dozen Ctrl key sequences mapped to VS Text editor functions. My left hand never leaves the home row position and the right hand operates the mouse. Lifting up my arm to hit F12 (or any other F-key) sounds *exhausting*. All that *arm lifting*! :) 
This is actually the one I had in mind. Bonus question: can you write a version that uses only one overload of `nameof`?
Get a book, read it, practice.
To clarify: they didn't add new keywords that would be actually reserved since C# 1.0, I believe. But the old ones are still reserved.
Interesting, I didn't realize this approach would work.
Internet
Hah, I tried earlier. Gave up when I was going down the rabbit hole of `Action&lt;Action&lt;Action....&gt;&gt;&gt;` and/or complaints of being unable to convert a method group. But here's a few variations on using delegates instead of method groups: Action&lt;object&gt; nameof = null; nameof(nameof); //or if you don't want NullReferenceExceptions at runtime: Action&lt;object&gt; nameof = _ =&gt; {; }; nameof(nameof); //or Action&lt;object&gt; nameof = delegate (object _) { ; }; nameof(nameof);
Or do both at the same time 
If you want to make games with the language, and use Unity doing it, then just dive into Unity's tutorials and learning resources. Especially since you already have experience using Swift, Objective-C, and Python, you should be able to pick up enough on how to work with C# as you go. If you are going the Unity route, you'll probably end up having to spend at least 80% of your time learning Unity's development paradigms and features, and less than 20% understanding C# or programming. Probably overboard to grab a "learn C# from scratch" book, significantly learn C# first, _then_ dive into Unity. C# shares various similar concepts to Swift, Objective-C, and Python. Yes, of course they're all different, some ways more than others. But you'll find plenty of analogues too. If you like, you can just boot around the internet for some beginners tutorials just to get your feet wet with the very basics of the syntax and concepts before diving into Unity. But yeah, ultimately you'll be spending much, much more time learning Unity than you will C#. And many of the learning Unity resources also touch on learning/using C#. So if you grab some Unity book, you'll get your C# on the side too.
You're out of control. :)
That's exactly why I use them too.
&gt; slowing down your IDE That's the part that kills me. That, and a large amount of useless seemingly contradictory advice. But it does have some features I really liked. 
1. Download &amp; install Visual Studio Community. 2. Open a browser on your 2nd monitor &amp; navigate to www.google.com. 3. Think of something you want to program. 4. Program it. :)
[The trick is declaring a delegate type that takes itself as a parameter](https://sharplab.io/#v2:D4EwpgNmDmCGAuYAEABALEgIgCk0kAlANwCwAUOSgExIDC5A3uUi6hgHawC2YA9gGa58BJAwC+zVpJbokAWWwFpo5aySceA7Br79iyiWTFA=): delegate void D(D d); class C { void nameof(D d) {} void M() { nameof(nameof); } }
Ahh, nice. But even better: delegate void nameof(nameof nameof); class _ { void nameof(nameof nameof) { } void nameof() { nameof(nameof); } } Now... what to do about that class name... EDIT: [WTF](http://www.yodawg.com/templates/yo_dawg.jpg) delegate nameof nameof(nameof nameof); class _ { nameof nameof(nameof nameof) =&gt; nameof; nameof nameof() =&gt; nameof(nameof); } EDITx2: Actually, now we can eliminate the `nameof()` method altogether. delegate nameof nameof(nameof nameof); class _ { nameof nameof(nameof nameof) =&gt; nameof(nameof); } Also, we can go deeper and nest as many nameofs that we want: delegate nameof nameof(nameof nameof); class _ { nameof nameof(nameof nameof) =&gt; nameof(nameof(nameof(nameof(nameof)))); }
I wish they would find away to do away with casting to an int. I really hate doing that.
When did this happen? where T : Enum I remember trying to do that before and getting a compilation error. TIL. Edit: Doh! Should read more betterly.
Yeah, that won't compile. But it says so in the article...
It's still not valid, as the article says. It is possible to create such a constraint in IL, though. There are libraries that make this reasonably painless.
The fastest way would be to actually go and write some code instead of asking what the fastest way to learn is on reddit 
It's called open source.
Well, what open source project would you recommend?
I mean *your* project should be open source.
That's not exactly a helpful response. I don't really get to make that decision on this project.
Ah... too bad.
Make a C# app that asks you five questions about C#. Put it on a Raspberry Pi that controls a parachute. You have to answer all five C# questions before your parachute opens. You're welcome.
We use [Infralution](http://www.infralution.com/). Not necessarily recommending it (make of that what you will!), but perhaps it will be better than XHEO?
A little trojan for fun. Just something i've always wanted to make. 
We used to use Xheo. The guy that ran it was a bit of a prick. It's been a lot of years since we switched to Infralution, but we never looked back.
I don't get this whole region hate. Yes, it usually points to code smell, but it isn't the _cause_ of the code smell. It remains a valid tool for organizational purposes. That said, I use regions only sparingly, most notably when I'm writing unit tests (where you have multiple tests per method in one test class).
Thanks for that comment, and sorry for the slow response I've been busy with another couple projects. I think i've figured out what i've got wrong. Thanks again!
Thanks for that comment, and sorry for the slow response I've been busy with another couple projects. I think i've figured out what i've got wrong. Thanks again!
Thanks for that comment, and sorry for the slow response I've been busy with another couple projects. I think i've figured out what i've got wrong and yah I just had some thread in thread nonsense! Thanks again!
yah encryption is a dumb idea, no idea what I was thinking (:
Thanks for the comment, I've not actually had time to fix it, but I appreciate you confirming and I can already see where I think i've gone wrong. Thanks again for the comment, hopefully I'll find time to fix it tonight!
Yah, agreed. It is an odd one related to needing static bins (linux) that are not available on the local distro. 
Thanks
Thanks
Linux
Good idea, nice and simple, thanks
Ah. Ok. There's always some good reason to do something that otherwise appear stupid. We get a lot of newbies here, so I tend to suggest things even when they seem obvious.
Is the user logging out and in again after they get the role assigned? The claims are set at login time rather than checked from database every time they are accessed; if they do not re-login this might explain why they're still unauthorised. I think you can add claims (of which a role is a type) to the current ClaimsPrincipal, retrievable in the controller via the User property. So you'd need to add the correct claim to this in your AddUserToRole method, as well as modify the database for it to auto work on future logins. (On phone right now so can't confirm 100% how to do this!)
Good call! I feel like an idiot. I wasn't logging in and out to test the changes; no modification of the claimsprincipal necessary. Thank you so much.
&gt; There are libraries that make this reasonably painless. Example?
https://github.com/jskeet/unconstrained-melody (more of a proof of concept) https://github.com/Fody/ExtraConstraints
Why do you do it? What's the operation supported on type int, but not the enum type itself?
I also wish that there was a sexier way of validating enums other than Enum.IsDefined(typeof(MyEnum), enumValue). It feels so ugly and verbose.
Fuckin communist.
LOL... ;-)
Thank you.
Yeah, but injecting fody into your build process is a pretty high price to pay for what seems like such a simple feature.
What exactly is 'Sql query'?
Good refresher. Love the Description attribute, it provides an elegant solution.
IsDefined probably does more than you want. It returns true when either * both are enums and the underlying types match and the value is found * the value is an integer type which matches the underlying and value is found * the string matches a name If you have a contiguous set of constants just do: None &lt;= value &lt; Max If you are using a Flags Enum then IsDefined would only work for those defined constants but not the ORd possibilities. I don't see how you could define an arbitrary conversion from object to Enum, with no special knowledge. Casts exist for the integral types and Parse for string types.
Even if you could block every possible curse, it's still easy enough to be profane. No profanity filter short of a truly impressive AI is going to be able to sensor "Your kitty makes my eggpant turgid".
Usually because I am sending it over the wire or because I am saving it to the database.
* Make sure you're hitting the database you think you're hitting * Set the `cmd8.CommandType = CommandType.Text //this is the default, but just to be sure` * Verify your query text is what you think it is (debug, copy the value and paste that in SSMS)
TIL `@this` is a thing. Thank you.
If it's SQL Server, there is a great tool called SQL Profiler that will give you the exact SQL that the C# code is calling. It sounds to me like there is some data conversion going on somewhere with the time values (or datetime values). You're assuming that C# is calling the proc with the same values that you're calling it with by hand, but SQL Profiler might show you that this isn't the case. If it's not SQL Server, there are probably tools in your database that work similarly (unless it's Oracle in which case you would need a team of DBA's to help you). I have often run into circumstances like you describe and in almost all cases my assumption about what C# was doing with the SQL were wrong. Once I could see exactly what it was doing, I could get exactly the same results by hand-bombing the proc and the solution was usually easy to find.
You could look into using this https://github.com/TylerBrinkley/Enums.NET
Don't ... don't do that. @ sigils are handy for interop and code conversion, please don't use reserved words as variable names just because.
This is my favorite one. The best way to get something done is to just do it. That's how I started learning Java, I just sat down one day and said "I'm going to program Pong" and did it. 
Please provide examples of your code.
And how do you like C# in comparison?
I used LLBLGenPRO for about 3 years and had some complaints but overall it was great. I since have started on a new project and am using Entity framework and honestly I miss LLBLGenPRO. I'm not sure what we paid for it, but might be worth looking at.
I'm unhappy with calling a single static function so I'm certainly not going to use a 3rd party library. Harumph. 
What's wrong with just using a switch with a default? Am I missing something?
it needs to be updated whenever the enum is updated
Have you looked at the SPROC code? It might be rounding the input parameters to the nearest hour/minute or something like that. Additionally, it is likely you have issues dealing with timezone offsets because you didn't mention them already.
That does not make anything more testable. That makes testing horrible. Now any other class using your MyMethod cannot be tested without ugly messing with assemblies just to mock static method.
add an extension method to do it. 
Ahh true. Usually I do it as an extension method within the same file as the enum, so it's not too hard to keep track of, but it's not automatic. I wonder if there's a way to script it with a .tt file or something. A switch is certainly the fastest way to do it.
I will check that out. Thanks for the helpful response!
I copied to SPROC code directly into Visual Studio and then ran it as a sqlcommand object, but I'll look into it. I didn't think of timezone problems, though.Thanks!
I think your mistake is in trying to mock at all. Functional testing involves passing "actions" to a method, which you can even more dynamically replace with any mock logic you like. 
Write a telnet chat server in C#. You'll need to grab VS 2017 Community but from there, just start with a .NET Console app. A Telnet chat server is complex enough to require a few different classes to handle things, but simple enough that it's not a crazy thing to start with. You'll have to use .NET Sockets, and eventually some async/await with Tasks for multiple clients. You can also learn a bunch of cool stuff about ANSI CSI codes. From a learning perspective it scales nicely between "I can connect a single PuTTY client to my server and send/receive things synchronously" and " I now have a fully multi-user async telnet web server". It'll fit most of the programming constructs in C#, such as inheritance, polymorphism with interfaces, enums, etc. You can tell I'm speaking from experience ;)
I see that many people writing unit tests, test dumb, useless things. Proper unit testing is letting the computer do the testing for you: generate the tests. You can't generate mocks. You can generate function arguments. Please remember that C# is a functional language in addition to an OOP language; and that FP is crazy powerful, if very different. 
We use this for storing string information about the enum to call in code. 
&gt; Just wrap it in unsafe I don't think this is the right thing to do, because after all, the proposed manual memory management is safe. It's just manual. Marking it with unsafe can prevent its use in certain situations. I agree with making it involved and non-trivial to use however. As long as it's a late-stage optimisation (for stuff like the ASP.NET Core stack/web server etc), where perf is actually required.
Mocked unit tests have their place in the testing suite. 
I dont want to write unittests for your MyMethod, I just want to test my class that is using it. Especially if your MyMethod is using some network resource.
I dunno, implicit conversions should be rare. Being explicit about serialization is ok by me.
He forgot one of the most important things about enums: they're, in nearly every case, an indicator of poor class design. I really wish C# 8.0 would get rid of enums entirely.
I'm not making you write unit tests. It's a contrived example of a pure method from an impure method. Surely, you would rather test public static int MyMethod(ISomeThing thing) { return thing.GetInt(); } rather than public int MyMethod() { return _thing.GetInt(); } because the first one is tested as such: [Test] public void TestMyMethod([ValueSource(nameof(RandomIntsCollection))] int someInt) { var mockThing = new Mock&lt;ISomeThing&gt;(); mockThing.Setup(x =&gt; x.GetInt()).Returns(someInt); var result = MyMethod(mockThing.Object); Assert.AreEqual(someInt, result); } vs [Test] public void TestMyMethod() { var mockThing = new Mock&lt;ISomeThing&gt;(); mockThing.Setup(x =&gt; x.GetInt()).Returns(5); var myInstance = new ContainingClass(mockThing.Object); var result = myInstance.MyMethod(); Assert.AreEqual(5, result); } Assuming the Class has been constructed well (almost never the case). The first tests a bunch of random ints in a function domain, vs an object instance designed to hold on to a single value at a time. Not to mention a method with an argument is easier to reason about than a method with a field reference in a class. 
Can you explain why that is the case?
I think that mixing state and behavior in an "object" is inherently an anti-pattern. You can test behavior against state if you so choose, but you should do so as state =&gt; behavior. Mocking only serves a purpose when testing complex objects, which in an FP perspective should never exist. 
Before you get in too deep with Telerik, I recommend looking at Syncfusion. PM me for more info. 
You may want to take a look at Syncfusion. Feel free to PM me if you have questions. 
You know, real projects are not just bunch of unrelated methods. If any other class has to use your **public** MyMethod it's impossible to test such class without including your MyMethod into tests. Simply that's not **Unit** test anymore. Similar shitty code can be tested only either by writing separate wrapper classe around your MyMethod or mocking assemblies. Looks like you never really got involved in big project and dont understand what is unittesting and its purpose.
Fortunately C# is not FP
I think you misunderstand C#, which has a half-and-half FP/OOP dev team, first-class functions and many other FP features such as nullables and Linq
Your code is a series of transformations on data. The type system holds the data side together, let functions hold the behavior side together. It's almost as though hundreds of years of mathematics have refined a system for expressing just these concepts! 
Oh god, that's a rather nasty one as well. Mutate the object then throw an exception... that seems like it could hide some very nasty bugs. This is sort of tangential, but are there any linters that would point something like this out? My gut tells me that any method that can *ever* mutate this and then throw should never exist.
I insist you give FP a chance. What, you think your code is above mathematics? I've got news for you: every program you've ever written has been reduced to 1s and 0s flying through a processor. Stick to the abstractions that work -- all I'm saying. I want to write a plugin -- ever write one of those?
I don't insist you to try to work. I hope I will never work with you If you get hired anyway. You even dont understant that all you static methods has to be used by hardcoded class names everywhere. I would not surprise if you "apps" are just one huge static class.
What's wrong with Fody? I use the Costura package for embedding referenced dlls in my console app for a standalone .ece
There's nothing wrong with Fody, it's an amazing piece of software. However, it operates outside of the normal compiler infrastructure, because it performs code weaving - modification of the IL code after the compiler has already done all of the regular compilation. It's neat and powerful, but it's a bit of a step outside the conventional. 
Especially since this implicit conversation means information loss.
The problem isn't so much the fact that it is a static function but that it is a slow function. Look at the benchmarks in that link. Or watch the video on what they had to do to optimize Bing.
Then this conversation should be really part of your serialization framework, not done manually.
Only thing I can think of is that they can easily be abused as a crutch in place of having any kind of DI.
I'm pretty sure you're not actually thinking through any of the things I'm saying, and I know I won't convince you -- but... You appear to be misunderstanding on so many levels that I have to say something. **Basics:** [Functional Programming](https://en.wikipedia.org/wiki/Functional_programming) is a completely different paradigm from [Object Oriented Programming](https://en.wikipedia.org/wiki/Object-oriented_programming), and will not make sense in terms of Object Oriented thinking. You are required to make a paradigm shift to understand it. **History:** Lambda Calculus, the inspiration of FP, predates Turing Machines, the inspiration of OOP. **Corrections:** **1.** Static classes in the FP approach are not like static classes in the OOP approach. FP is all about limiting scope, and removing mutation. Static classes remove the possibility of an entire classification of mutation: instance mutation. In other words: you can't mutate instance state in a static class. **FP absolutely does not encourage static state.** Think of FP as building up collections of actions describing what an app *does*. The state is an afterthought: state is passed into the actions. The actions act on the state. There is no intermixing of the two. You never store state alongside behavior. **2.** What is all this nonsense about hard-coded class names? When you write **new MyClass()**, that is a hard-coded class name. What's the difference between that, and **MyModule.MyAction()**? A static class is not a class in FP, it is a [module](https://en.wikipedia.org/wiki/Module_(mathematics)). **3.** In OOP, static classes are terrible; whereas in FP static classes are fantastic. This is because OOP emphasizes state -- in which class a static class would have static state; while FP emphasizes behavior -- in which case a static class is a collection of immutable actions. --- Why is immutable better? Because when you're reading code, you're implicitly creating a scope: the scope of the code you can see/store in your head. In OOP, state can be changed from all over the place without accountability. As such, you can't track what a piece of code is doing in your mental scope, without loading in the entire program. In FP, state has very strict rules about how it is handled. You will always know what state something is in, because it is strictly scoped to the function level. You can keep a function in your head. You can't keep 5 fields, 6 methods, 3 classes, 2 interfaces and dependency injection in your head. Or if you can, why would you want to? --- You talk about maintainability of a project, but have you worked on OOP AND FP projects alike? If you're maintaining a 12 year old code base, and you must make a minor tweak to a piece of code -- do you know what that code will end up doing? In FP, you can always rest assured a function does what's on the label; but you can never trust a class instance. There is a reason that Google, Facebook, Instagram, Amazon, Microsoft, etc have converted their heavy backends into FP code -- it's fast, maintainable, and predictable. Many people can work on the codebase at once without issue. The code will last longer than 5 years. There is a reason Serverless architectures are becoming a thing. --- The next time you're starting a project, will you convert your action-oriented use-cases into a bunch of contrived objects having half-abstracted interactions, or will you simply write out the actions?
Fair enough. I have yet to use it consistently throughout multiple projects in a large solution. Your initial comment made me think that build times might increase logarithmically or worse as a function of the number projects.
Well, if you want to just build and run unit tests, then... TFS does that OOB with the default build template, pretty much nothing to set-up. Same for VSTS. So it looks that someone sold you guys a dummy ;-) With github, look for "CI" and you will find (TeamCity, TravisCI, AppVeyor). Get that :-).
&gt; Everyone has their favorite way of writing this; I like to use shifts to emphasize that each value is just a bit at a different position. Not the worst thing in the world, I guess. My opinion is that any enum that may possibly be serialized ever should always specify the explicit value. You never know when an enum is going to get serialized as the integral value rather than the string value. Therefore, changing this: public enum Sides : int { Left, Right } To this: public enum Sides : int { Left, Middle, Right } Has now silently broken deserialization of any objects that were serialized with this enum in an undetectable way. 
Switch'ing on all possible values of an enum where a default case isn't suitable seems like you're already doing something wrong. If someone added a new enum you don't know how to handle safely, then default should be throwing an ArgumentOutOfRange exception. If unknown values can be handled gracefully, then that should be the default case. Making sure all values of an enum were handled in a switch case would be a task for something like FxCop. public string GetPronoun(Gender gender) { switch (gender) { case Gender.Male: return "him"; case Gender.Female: return "her"; case Gender.NonBinary: return "it"; case Gender.AttackHelicopter: return "chopper"; default: return "person"; // or throw ArgumentOutOfRange } }
&gt; they're, in nearly every case, an indicator of poor class design. That's like saying, "in nearly every case, constants are an indicator of poor class design." Enums are just integral consts with a little bit of syntactic sugar.
I think the biggest problem is that it wont perform the validation at compile time if youre using it in the same assembly.
GlobalConfiguration.Configure takes an Action&lt;HttpConfiguration&gt; as a parameter. So you're passing a pointer to the function to that Configure method. An equivalent you would be GlobalConfiguration.Configure(http =&gt; WebApiConfig.Register(http)); But because the method signature of Register matches the method required by Configure, you can omit the lambda expression: GlobalConfiguration.Configure(WebApiConfig.Register)
It would be interesting to read a coherent version of these slides.
I've used @default before and didn't think that was horrible. Although only within a very small scoped function and as the optional default value of something the function was attempting to retrieve. 
For validation purposes you might want to reject all invalid int values for that enum, while all valid values are handled the same way, perhaps just saved to a database 
They also published a [white paper](https://www.blackhat.com/docs/us-17/thursday/us-17-Munoz-Friday-The-13th-JSON-Attacks-wp.pdf). Basically what they did is: they had a look at different .NET JSON libraries and looked which one allowed the serialization and deserialization of arbitrary types. Some classes execute code when the constructor or setters are executed thus allowing an attacker to execute code on the server by simply providing a JSON. (They have the classic sample that starts calc.exe on the server.) They found vulnerabilities of that kind in DotNetNuke, Kaliko CMS, Breeze and Nancy. 
In JSON.NET you can configure it to add a `$type` information to allow serialization and deserialization of arbitrary types, often used for serializing polymorphic data structures. This is a potential security issue when deserializing, because users can send a completely unrelated `$type` from the .NET framework and JSON.NET will happily deserialize to it. If you use any other value than `TypeNameHandling.None` (the default) you're potentially at risk: http://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_TypeNameHandling.htm
Aren't you just inverting control on a function level? Reminds me of plain C code.
How do you handle small collections of strongly typed values that you'd like to be able to iterate over? Code generation? O.o
It's unfortunate, I think, that enums are so weak (type-wise) in C#, only slightly stronger than C++. I guess it's fine for interop, but that's a small part of what people do.
I disagree, but enums are currently very weak, type-wise. I would prefer much stronger enums such as Swift's (that also have the capacity to do data types, but that's beside this point).
Removed: Spam.
Removed: Rule 6.
Right. ALWAYS specify a value when it could be written to long-term storage. While enums can be nullable these days, it's still a good practice to have a "None" or "NotSet" value (usually 0) in there, in case your storage medium doesn't support writing nils.
So what part of this violates rule 6? - It isn't an advertisement - Its an open source project - It isn't asking for money I did post this yesterday, but with a link to a github and not any real information, so I wrote a blog post detailing the release a bit more
You have some common library that gives you all the animals in the zoo. You pluck one of those animals out at random. In your code, you have some logical checks, and now you, as a developer _know_ that the animal you have is a giraffe. However, C#/.NET doesn't _know_ that. You, as a developer, doing the explicit cast to `Giraffe` is assuring C# "Trust me, it's a giraffe. Treat it like a giraffe and let me access the `Giraffe` members." (Of course, if you _lied_ to the .NET runtime and it wasn't actually a giraffe, it will scorn you with the heat of a thousand suns and an `InvalidCastException`) EDIT: Where does it come up? Various places. Often when accessing common APIs that make no assumptions or have no knowledge about the subclasses being used and leave that responsibility to the developer. Sometimes when people do casting, it's not the best design or not using polymorphism to its finest, but often times it's fairly valid. EDITx2: It should probably be mentioned that this was a far more common occurrence back in the .NET 1.0/1.1 days before the addition of generics. Now, most downcasting is unneeded (or sometimes hidden) since generics are often applied where downcasting used to be necessary. A good example is you used to always have to use `ArrayList` to store a set of objects. Whenever you retrieved an object, you had to cast it back to your known type, even if you _knew_ you only had the one type of object in there. Nowadays you use `List&lt;T&gt;` and there's no casting needed whatsoever. Downcasting is still used in a variety of ways (such as what I pointed out), but I would say not as common or unnecessary as it used to be. (But there will always be abusers or better designs.) There are certainly more tools at our disposal now that they aren't always explicitly needed.
I'm open to the possibility that one could use @ this way to increase readability, but I haven't seen a case that wasn't, at best, a wash.
&gt; With [Rainway](https://rainway.io/) we are tasked with launching thousands of different applications from various third parties. &gt; Rainway will be released November 25th, don’t forget to sign up for the beta [here](https://rainway.io/register/). &gt; [Follow us on Twitter](https://twitter.com/rainwayapp) You were already on super thin ice, and on a balance of probabilities, possibly using two accounts. So any submission doesn't have to do much to violate a rule; you have no leeway.
Not if he wants to make any money off it. 
How exactly am I "on this ice"? This is my only reddit account so I'd love to know what my other one supposedly is, that is a tall accusation to make without any proof. It seems you don't like me, which is strange given I don't believe we've ever interacted. Nonetheless I find it a bit abrasive you are disallowing a post that goes over why I had to design the library and why I chose to share it. Especially when there is similar content sitting on the subreddit right now. 
I've always liked calling the "this" parameter to extension methods @this because: A) It saves time thinking of a descriptive name B) If you think the parameter needs a more descriptive name than @this, then it shouldn't be an extension method
&gt; A) It saves time thinking of a descriptive name If I don't need a descriptive name, I usually wind up with `x`: it's not descriptive, but it's also *obviously* non-descriptive *and* it is as short as possible. For a number of extension methods, `source` is also a convenient name for the this parameter, and is the convention used by many of the LINQ functions. There are lots of potential conventions for naming the this parameter of an extension method, and this is the only one that requires @ sigils. Regardless, time saved while *writing* code is infinitely less important than time saved *reading* code, and @ sigils instantly make your code less readable than it would be without it. In this case, the minor benefit of being able to make your extension method read sort of like it was a method in the extended class is offset by the next guy needing to go look up what @ sigils are for in this language. Where they *are* handy is for things like generated code that can't assume that parameterized variable names won't collide with keywords in C#. If you're writing the code manually, you aren't constrained that way.
There isn't any technical downside. It just depends what you find easier to work with. I personally create multiple partial class files before even starting to work on a larger class. But I name all of them logically and keep all variables and the constructor in the first file.
Yes! Pure functions are the ultimate in IoC! A function accepting an argument has no idea where that argument came from, all it knows is that it has an X and it can do F(). This also means you can replace interfaces in your code with delegates, and unit test by supplying dummy functions where needed. 
I think you should spend some time googling up how to write a Resharper plugin. At least, I was able to turn [this](https://labs.eleks.com/2013/10/writing-resharper-plugin-quick-fixes.html) up pretty quickly, so it ought to be easy enough information to find. I like functional programming a lot, FWIW, but I don't know if I like this idea. Typical C# code is much heavier on OOP than FP, with the result that changing a method from an impure, instance method to a pure, static one is going to bind the caller tightly to the called type at the call site, instead of binding it to the called type's interface. I think you need to go through the intermediate process of refactoring the caller, first, or this is going to make a code base more difficult to maintain.
A real-world example is the [Evaluate method of XPathNavigator](https://msdn.microsoft.com/en-us/library/755fkf1e.aspx), which returns a value which may be any of four types that do not share a nearer common ancestor than `object`.
- is the class public? - is the specified assembly name correct? (in case of merged assemblies, ...) - did you re-open visual studio? - is the class actually in the namespace you think? - can you reference another (dummy) class in the same namespace and assembly? - can you reference a class from the same namespace in the **local** assembly? - in case of a tutorial: did you *really* follow the tutorial step by step?
-- Yes -- Yes -- Yes Thank you for reply :p This error makes me very angry ! No sense to face it ... To tell you everything, I even restart my computer several times. People on the internet seem to completely overcome by the error and everyone has "solved" it in a different way haha
Sorry I took the code from a project I am on now so its a little advanced. If you need help just pm me and I'll try to explain it. Here are two sites I used to help me get started in Dapper. http://www.infoworld.com/article/3025784/application-development/how-to-work-with-dapper-in-c.html https://liangwu.wordpress.com/2012/08/16/dapper-net-samples/
It would be nice if you could test the rest to find out whether the problem is related to the class or the code in general :-)
This is a really solid explanation. A lot of guys really struggle with this. 
[This article](https://www.alphabot.com/security/blog/2017/net/How-to-configure-Json.NET-to-create-a-vulnerable-web-API.html) was published a while ago and I find it easier to read. It was edited to include the findings from the slides linked by OP.
I like @this for extension method subjects, personally. I could see developers not liking it though. It keeps things consistent and logical IMO for large libraries with a lot of ext methods.
www.redhat.com, yeah who would want a billion per year
??? lol
Well, then you get cases like HttpStatusCode. There are valid, or at least widely used, HTTP status codes not represented by the enum value in C#. There are codes that might be invented in the future. Do you want all C# clients not built with the very, very latest HttpStatusCode enum to just barf if the server returns an HTTP status not in the enum? Do you want a web service in C# to be unable to return a code you want to use because it wasn't in the enum? No, you typecast to int and you're good to go.
&gt; it will scorn you with the heat of a thousand suns and an InvalidCastException Love it.
This is what it is and all (not sure if it is good or not... seems to be very little difference)... but what about unit testing the next level up: [Test] public void TestMyFeatureCallsMyMethod() { // tests business controller gets the right ISomeThing // and calls MyMethod } 
Bad Human
Myrtille provides a simple way to connect Windows based remote desktops from a web browser. As a web UI, it’s device and OS independant. Server side, it uses the .NET (C#) framework, IIS and the RDP protocol through an HTTP(S) gateway. Its particularity relies in the use of the .NET/C# framework to offer a better integration with Windows (equivalent solutions, Guacamole to name just one, are running on Linux/Apache/Java). It supports HTML4 (one of the few to do that), HTML5, file transfer and WebP compression (in addition to PNG and JPEG). It's primarily aimed at system or network admins and devs but everyone can use it. I hope you'll enjoy it! feedback is welcome :) Thanks!
They don't make money selling the software, they're a massive company that make money selling support to other big companies. Small companies don't have this luxury. Never mind the fact that you can't sell support for simple consumer software if you make it friendly and easy to use.
defaultValue would work just fine too. I think this was around the time they added the ability to prefix keywords with @ and I thought, now I can almost use the variable name that is most natural.
Yes, you can replace interfaces with delegates. And then? How do you pass that?
Enums are fine when something can only ever be completely enumerated once and will never change. Days of the week are a good example. In every case that I've seen enums used throughout my career, they've always been used as a way to track state. State, unlike a fixed enumeration, can change. And when it changes, it has to change everywhere it's used. As an example, you may have an enum for order state with only two entries: Shipped and Delivered. Someone adds a new state, Processing. After while more enums come along: Processed, Delayed, InTransit, etc. Each of these states tends to have business logic tied directly to it because the developers who use enums tend to tightly couple things like that. And that's just one example. CSharp is object-oriented, so be object-oriented.
I don't think I've ever seen a constant used in a non-object oriented way. I've seen constants used incorrectly, where expressiveness is lost because of the constant's existence. On the other hand, I can't think of the last time where I've seen an enum used in code that wasn't terrible. I'm not talking about System.DateTime or Regex where they're used as intended, I'm talking about run of the mill, developer code that you see at every shop. 100% of the time, it's bad.
Yeah, I'm not following you, there. I haven't seen such abuses, personally, and I've been doing this a long time.
I am terribly sorry. First things first, today was a very hectic day for me so I haven't had the opportunity to respond until now. Secondly, I fucked up. I got you and another user mixed up in my head. Your account is not on thin ice. You are not suspected of having multiple accounts. You _do_ have leeway. If I didn't fuck up, I probably would have let this post stay and not been deleted. I'd restore the post, but you already deleted it from your account. Feel free to repost it though. I won't remove it. EDIT: Also, &gt; It seems you don't like me, which is strange given I don't believe we've ever interacted. No, that isn't the case. I'm fine with you and your submissions. Case of mistaken identity which is on me, sorry. Carry on.
You might be part of the problem... https://www.planetgeek.ch/2009/07/01/enums-are-evil/ 
Ooooooh! Someong *blogged* about it back in 2009? Why, that must make them an expert! No, that person uses a bunch of contrived bullshit examples and labels everything "Evil" the way Donald Trump ends all his angry tweets with "Sad!". "Oh, look, if I shuffle enums in and out of strings and integer values in a completely stupid way, it's stupid." No shit. "Oh, look, if I *hard code* values for a dropdown by using Enums for *some unknown reason*, I have to ship new code to update the dropdown." No shit? You mean using enumerated *constants* that were *compiled in* is the wrong choice for a drop-down list that you need to be dynamically updated? Wow, total shocker there. "Ugh. Hammers bad. When smash thumb with hammer repeatedly, it really hurt. EVIL!" &gt; Why must the values of a Flags attribute be the power of 2. Seriously, this guy is not someone you should be taking advice from.
"Pass" in what sense? 
Thanks, I'll dig into those and get back to you via pm when I run into trouble.
+1 for mentioning is and as. Safe casts rule
That's a terrible title (I know it's not OP's title). I thought it was going to be an analysis of the top most common exceptions as gathered through telemetry. But it's 5 tips on how to best handle exceptions. Good advise if a bit basic.
Not the same guy but as someone who learned Java before C# I feel like C# is an improved version of Java. When I started in C# I programmed like it was Java, keeping Java naming conventions and refusing to use properties, but now after learning C# I'm never going back to Java unless I have to for school.
Correct
While true, this isn’t the point of the explanation. 
Well let's say I have an interface with 30 methods. The function I'm calling uses all of them. Will you expect me to pass 30 delegates to that function?
Your example isn't attached so it's difficult to see exactly what you're doing. You can probably find a library for reading and modifying word documents. I've not done word but with excel I could load the file, edit it and save the result. If the library can't read a template document then you'd have to construct the whole document in code. Alternatively... docx is technically a zip file containing xml so if you want to you can unpack it and look at the contents. Taking that a step further if you use some placeholders you should be able to replace them with your variables - maybe even a basic string replace would work. Once modified you can re-zip it and name it as .docx. I've never actually done this so I can't say for certain it's viable.
Yeah I been googling a lot! Found out that I can place fields in document and give them keyword and reach them outside Word. To do so I need PIA Reference in my VS. But I don't have it, I cannot find it in internet.. So right now I quite messed up. Could you help me out?
If you think that article proves anything, you are the problem. The author is pretty clueless and the article is horribly written and not persuasive in the least. Take this: &gt; Why must the values of a Flags attribute be the power of 2. Duh, because bitwise operations? Here's a new title for you: Clueless developers are evil.
Do not use the Microsoft interop libraries (PIA). A third party library should be easier and cleaner. Top hit on Google is https://docx.codeplex.com have you looked at that?
&gt; Keep exceptions exceptional… Oh if only people realised this. So fucking sick of my current job, where they make *everything* exceptional. Wrong username? Exception. Dictionary key not found? Exception. It gets worse. Every exception is handled, but it throws another. That one is handled, and it throws another. Literally the entire code base works on the basis of using exceptions for program flow, even for non exceptional situations. Honestly, I think the only reason they haven't yet decided to forgo return types all together and put results in the exception custom properties is because they haven't thought of it yet. There's no way I will mention that to them, because they are actually likely to do it. Over 100 custom exceptions so far too.
It's no problem man, I appreciate the apology. 
Sounds like one of my old teachers, he'd check if a login was correct with a void method, that threw an exception if it was denied.
throw new OkException ();
I do advocate using exceptions more often than my colleagues, but not to that extent. If you reach a point where no meaningful result can be achieved, and there is no obvious faulty return value (like how IndexOf can return a nonsensical -1 instead of an exception), then an exception is warranted.
Aspose.Words is good for this, but is fairly expensive.
First of all, your `post.Where()` statement is completely useless because you don't use the return value. Your line o thinking is correct. You take a `for` loop, get the item of the index `i` (your loop counter). Then check if your condition is true (is this the item you seek?) and if it's true, you can just return `i` (because that's the index you got the item from before).
Well your professor likely wouldnt want you to use the .Where() clause or any other LINQ functions, so let's just ignore that right away. So you want to search your list for a single entry, yeah? So what do you want to search by? Are you searching by Title? Are you searching by Message? Both? Are you returning all arrays which match the condition, or just the first? 
I dont know what would be the best option, I was thinking of searching by both and print out the index value, then I was going to do a binary search through the whole array for that value and then edit that index value.
Ok then, well let's change our message signature to match what we are attempting to do: private static int FindFirstIndex(String matchStr) { for (int i = 0; i &lt; logBook.Length; i++) { //handle logic } } So what exactly are we trying to solve? We want to find the first index where either element contains the search string. So... private static int FindFirstIndex(String matchStr) { for (int i = 0; i &lt; logBook.Length; i++) { if (/*we match our conditions*/) { Console.WriteLine("Search Index: " + i); return i; } } } We still have to handle what our if statement looks like, and how to handle the case where the matchStr isnt in the list. Also, as a side note, once you have an Index value, you dont need to do any searches (binary or otherwise). We *already searched* for this index value. We can access it by simply looking at logbook[i]. 
Google "open office xml", or "ooxml"
&gt; Wrong username? Exception. ... Every exception is handled, but it throws another. The usual name for this annoying antipattern is "Flow control by exception". You will find a lot of useful links by googling that, starting with: http://wiki.c2.com/?DontUseExceptionsForFlowControl https://softwareengineering.stackexchange.com/questions/189222/are-exceptions-as-control-flow-considered-a-serious-antipattern-if-so-why https://msdn.microsoft.com/en-us/library/dd264997.aspx Also the statement on wiki.c2.com: &gt;Throwing exceptions is one of the most expensive operations in Java Is also true in the .Net world. A `try ... catch` block is almost free, but only if you don't have to catch anything. If you do then it costs a lot of memory and time. it's best to reserve it for cases where failure has happened, and logging the failure correctly is now more important than performance.
&gt; If you reach a point where no meaningful result can be achieved, then an exception is warranted. It depends. If the "no meaningful result" is really common and predictable, then what you are doing is overusing an exception for something that is not exceptional at all. if `IndexOf` was designed today, it would probably return either `int?` or a tuple. So would `TryParse`. Instead of throwing in a common case, rather make a more complex return type for that method. e.g. instead of either returning `int` or throwing `FooException`, the method could return `int?` or `Tuple&lt;bool, int&gt;` or if that doesn't suit you, declare an enum and a struct. In many cases this is much cleaner than throwing an exception for a common return value. I've seen a case where some stupidly complex code that could return an int id or throw several different exceptions depending on what failed, was replaced by code that returned a struct containing an enum and an int, and as a result the code that handled it became much much clearer. [There's a similar example here](https://www.codementor.io/c_sharp/tutorial/correct-way-to-do-exceptions-in-c-sharp) where a `ValidationResult` contains an enum for status and a User (or null if the status does not indicate success). Exception are useful, I think that for instance [GoLang made a poor choice by not allowing them at all](https://golang.org/doc/faq#exceptions), and using tuple return instead for every error case. Returning a tuple or struct with multiple fields has it's place though. 
That is what it would look like, but there are other tools to help with those issues like currying, partial application, and data structures. My question is this: what single-responsability method are you writing that is using 30 parameters? In my experience, those don't exist. 
I've used this before. Pretty easy solution.
The difficulty in testing OOP is the "gets the right ISomeThing and calls MyMethod" part. What do you do if the constructor does a bunch of setup logic with your ISomeThing? What if the internal logic of the class has all sorts of conditions around when and if the ISomeThing is called? What if the ISomeThing is used in different ways at different times in the object depending on the object's state? How many mocks are you really going to have to make for this? Are you really testing anything at this point? Mixing behavior and state in an object simply puts too much complexity in one opaque place for no obvious gain. I can test a simple function that accepts 2 arguments, combines them, and returns a result. Hell, I can tell the computer to generate 1000 tests with different values for the function. It's very clear what the expectations on the function are. Need more logic? Write more atomic functions. Remove state mutation, and a class is implicitly just a chain of methods. This is why in languages like Python, you actually have all static methods, and you pass the instance in as an argument. All OOP does this under the hood. 
It makes sense that using some wrong username would throw an exception. But it should only happen in some truly exceptional case. Not, say, trying to log in or register. You'd almost surely want to have some kind of `isUsernameValid` or whatever method to handle the normal flow, with the exception being one of those "shouldn't reach this unless the programmer screwed up" sort of things.
No, using a wrong username is a valid input that should have a valid response. Exceptions are for when the program should crash due to an unrecoverable/unpredictable state, but instead you say, "instead of crash, do this"
Exactly what are you thinking of? Because the first thing I thought of for "invalid username" was "get the data related to this user" (eg, from a database). And that's naturally gonna fail for non-existent users.
Point 2 has poor code. TryGet should be used. Point 3 is half-true. There better be a catch(Exception) for every "top-level" function: Main, or a thread function, or "void" tasks. Every single program should be e.g. like this : void Main() { try { work(); } catch(Exception e) { Environment.ExitCode = 1; // EXIT_FAILURE; look it up :-) Console.Error.Write(e); } } (Improvements or adjustments possible; key thing is * one must not exit with an uncaught exception * if an exception does reach the end of Main, program should return non-0 (most likely 1) to the system, and report the error.
If the assignment doesn't concern itself with O, do it as simply as possible. If you were going to do a binary search, that means you'd have to order your data - it's a lot more work. The instructor is probably looking for you to perform a loop lookup, then you can use .Contains() within that loop to determine if the contents works (someone gave you pseudo code for this already). If you think there might be multiple results for a search... you can utilize a Dictionary generic to track the index &amp; contents and return it. You can either track the index via the incrementing variable of the for loop, or you can use List.IndexOf(). Given that List is one of the types you're using, the prof might be looking for your usage of methods that the Generic gives you.
Put some effort into your post. Show us what you've accomplished. Explain what you're trying to accomplish with pseudo code. Identify what step is giving you trouble and we can point you in the right direction.
Morse code, I assume
[removed]
You mean, like I actually typed? Idiot bot.
I am going to add some pics then
Look at the history. That bot is spamming everywhere. This bot shit in reddit is taking overhand.
Don't use mac is the obvious solution 
hehe, that snarky response made me literally laugh out loud... thanks tips (:
I kinda secretly hoped it would be one of those click baity Youtube videos. "Yo everyone its KodR666 and today we're gonna review my favorite top 5 .NET exceptions!"
&gt; I thought it was going to be an analysis of the top most common exceptions as gathered through telemetry. That would be awesome. I know null reference is #1, but I would love to know what the rest are.
[removed]
Ummmm....Azure? Odd that you got this far without considering hosting, but what the heck. You can deploy your docker microservices (if thats your thing) right from VS. Another option would be ASPNET Core on whatever you want that supports docker...say AWS. Though you can do that on Azure too. 
.... 😑😑
Azure (or IIS anywhere) is the default option. Docker anywhere (RackSpace, AWS, Google, etc) on Linux is the preferred option if using Core.
For point 3 - Avoid generic, catch-all exception handling - the equivalent in the web world is that there should always be a generic, catch-all exception handler _as a last resort_ so that any uncaught exception is logged and not thrown away. Then you know about it, and can do the work to stop it happening.
Make a copy of the exe Create a program that performs your task and then launches the copied exe Replace the original exe with your program
Do you mean when a specific process is created? That's easy enough, ever heard of WMI? It's basically magic. Let's you do all kinds of interesting things in Windows. [Start here, and have fun!](https://social.msdn.microsoft.com/Forums/vstudio/en-US/46f52ad5-2f97-4ad8-b95c-9e06705428bd/how-to-detect-lunch-or-closing-process-?forum=netfxbcl) 
Wow you just solved my problem, one more thing though what is the library that can do that called?
Before we reveal the number one exception, we would like to show some honorable mentions...
This is used to start a visual studio debugger using a registry key. But I assume you could replace vsjitdebugger.exe with your other application. https://msdn.microsoft.com/en-us/library/a329t4ed(v=vs.100).aspx 
Removed: Rule 4.
Could you please explain how it works I don't get the help online (for example what is suppoused to go between the brackets after WqlEventQuery? Thank you
Depends on how fancy you want to get, and how this object is being used. Simple solution if this is a console app would be https://msdn.microsoft.com/en-us/library/system.timers.timer(v=vs.110).aspx . You could get fancy and do it with Hangfire, but that seems like overkill for fixing an infrastructure problem.
hey dude, I said updates will come
If we're talking userland and not the framework, it's probably: throw new Exception("&lt;insert some arbitrary string message&gt;"); :(
To throw (heh) a nugget of info into the mix: If you need to unwrap an exception (and rethrow it) use [ExceptionDispatchInfo](https://msdn.microsoft.com/en-us/library/system.runtime.exceptionservices.exceptiondispatchinfo%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396) to capture and throw the inner exception _with the original exception context_. This means the Source, StackTrace, Target, etc properties will contain the info from where the exception was thrown from prior to the handler (which means typically where it was first thrown).
Here's a pretty good SO example for OOXML. https://stackoverflow.com/questions/8309932/manipulating-dotx-templates-with-c-sharp Because you should not do PIA unless you have very very good reasons to.
The demo app on GitHub is a mess (commented code, no descriptive comments, odd formatting). Also doesn't seem to track grandchild processes? No event for processes being created? Odd stuff
Failing authentication like a login is a valid expectation result of the process, you either succeed or fail. Now if you're doing doing verification an exception makes sense. After a user is logged in you can expect the credentials to remain valid, when they don't you throw an exception
It will not "fail" but return an empty reader or list. Just check .HasRows or .Is empty before assuming something is there.
An incorrect username is perfectly valid program flow, and is expected. It's certainly not exceptional and should be accounted for accordingly. Throwing an exception for this is incorrect because being incorrect and being in a broken state are two very different things. As an example trying to register an in use username might be an exception, but only because there should be a method to verify if it is taken or not before you actually try to register the username. 
I addressed this is the latest commit. The demo app now has a fleshed out example. I also added events for when a process has been added to the tree. Grandchild processes are indeed tracked.
Which part? For the services on Azure, you can do a simpler containerization just by using app/worker services, or even service fabric. Docker is an option that's available basically anywhere. Service Fabric looks pretty neat... I just can't get my head around reliable collections. What is being used for the bus implementation? We use Azure Service Bus with NServiceBus sitting on top of it. So you just set up a bus on azure and use it, nothing complicated there. If you're using Rabbit or something else, you'd just have to probably spin up some VMs and set it up like any other server. If you don't have anyone to manage it, I'd consider finding some PaaS for it which is what we do for the database since we're a small shop.
I dunno about preferred... common, but as new as it is, docker on windows is fine. The only limitation I've run into (yet) is the lack of options for an orchestrator.
Yes, absolutely, a decent explanation [is this one](https://www.codeproject.com/Articles/850062/Exception-handling-in-ASP-NET-MVC-methods-explaine). And indeed, any best practice will say kinda the opposite of the point 3. There **must** be *eventual* catch-all built into the program. That helps reporting the error, without crashing. So 3 is quite incomplete in this regard.
The thing is... What does "exceptional" mean? It is entirely dependent on the context. Take wrong username. If it is coming from some input field, nothing exceptional - someone mistyped. If, however, that was checked at used input entry, and then, during whatever operation, user was e.g. deleted from the system, it is pretty exceptional. It's all about using brain, in your own context.
Good to see you guys are active and engaging in the community, props to you!
A few snippets... (your if logic should work just about as is but lower case) // Declare an int Int32 num1; // Set a variable from the console num1 = Int32.Parse(Console.ReadLine()); // Write something to the console Console.WriteLine("X is the largest"); In practice of course this pseudo code is incomplete as a real program should handle invalid input, errors, etc.
foreach(char c in word) { Console.WriteLine("MORSH MORSH MORSH "); }
Dependency injection. Once you are doing anything of any complexity and you want to isolate dependencies you have to use interfaces. Also for establishing contracts that you want to require other classes to implement. Again, you are going to need interfaces. 
You seem to have some weird notion of "cost". Trust me, *not* using interfaces is what leads to costly legacy designs. &gt; If I want a super Bee that can sting and collect nectar I could implement an INectarStinger and by doing this I have to implement the Sting() method in the NectarCollector and the GetNectar() in the Stinger. What? public class SuperBee : IStinger, INectarCollector { public void Sting() { ... } public void GetNectar() { ... } } ???
I don't know what morsh is tbh
Reported for rule 4
I was going to say this too, I'm a big fan of it, but I realised it's probably way beyond OP right now.
Yes you can do the way you wrote, I think it is better to do it that way. But you could also do like this: public class NectarCollector:INectarStinger { public void GetNectar(){} public void Sting(){} } public class Stinger:INectarStinger { public void GetNectar(){} public void Sting(){} } in both cases I've to maintain two copies of the same code. I know you're right when saying "trust me not using interfaces leads to costs...", but why? I've to maintain the same code twice :S This is what I don't get.
You are inventing the cost by thinking you need to keep making this weird new interface every time, why? &gt; I've to maintain the same code twice :S No you dont
This is clearing things a bit, I don't know much about dependency right now. I'll get there.
Looking forward to trying this when I get home. How well does it work? Is it feature comparable to project butter+popcorn time plugin?
A lot of the things that constitute good programming practices are intended to make larger projects more maintainable, and in fact aren't worth the effort for small scale projects; however, because people get into the habit of disregarding those practices because they didn't need it / couldn't see the benefit of it, they are ill-prepared for that larger project. If you only have one child, getting them up, dressed, fed, and off to school can be done in an off-the-cuff manner; if you have 100 children, some sort of large scale efficiency has to be brought into play. The point of interfaces is to define a contract of behavior, so that your code is not tied to a specific implementation of that behavior. An electrical outlet accepts anything that conforms to the plug "interface", you don't have a specific plug for your TV, another specific plug for your lamp, etc. In a small project, you only have one plug and one TV, why not make them specific to each other? In a large project, you don't want to have to make 100 different plugs if they are really all doing the same thing.
Eh, I don't think this is a good example on several levels. For one, /u/SuperImaginativeName gives a good example of how you would use two interfaces - you can implement multiple interfaces in a class, not create a mega interface combining things. Beyond that - to me the `.Sting()` method is fairly concrete. It's just one specific action that probably wouldn't vary from one bee to another. To me the advantage of interfaces is being able to access *different* implementations through a common portal. An example maybe would be if I made an `IPredictWeather` interface. Maybe it has one method, `.CreatePrediction()` which returns an enumeration for `Sunny` or `PartlyCloudy` or `Overcast`. I don't care about the specifics of how an `IPredictWeather` does its business. I just want to know the end answer. So maybe there's `AlmanacPredictor` class, a `MeteorologyPredictor` class, and a `LookOutsideAndGuess` class. They all have their own *different* way to come up with their answer, but in knowing that they implement `IPredictWeather` I am *contractually guaranteed* to get the same style answer in the same format, interchangeably.
It allows another class to use your type that implements a specific interface, without having to know the exact concrete type. It simply knows that the object will have a certain collection of methods and properties it can access. It's more about allowing other objects to use your object without knowing everything about it, than it is about making your specific object easier to program. For instance an object might have a collection of objects that implement IDisposable. At runtime they might be a whole bunch of different things, but the object holding the collection knows it will be able to call Dispose() on all of them.
&gt; No you dont How not? Please bear with me: in your example of implementation there is the Sting() method for the SuperBee, it will be the same that the class Stinger has. So I copy paste the Sting() code in the SuperBee. Isn't it like that?
Yes totally, it behaves the same
Can't help you with the SQL query you need, but the other questions can probably be answered by looking into C# "events". (similar terms: "event handling", "event handler", "delegates", "event args/arguments")
&gt; For one, /u/SuperImaginativeName gives a good example of how you would use two interfaces - you can implement multiple interfaces in a class, not create a mega interface combining things. Yes, but I still have to maintain duplicate code for the Sting() and GetNectar() in the SuperBee class, NetcarCollector class and Stinger class. This is what I don't really like. Maybe the title was misleading, sorry. I like your `IPredictWeather`example, thanks.
&gt; Yes, but I still have to maintain duplicate code for the Sting() and GetNectar() in the SuperBee class, NetcarCollector class and Stinger class. This is what I don't really like. In your example yes, I would agree. I don't have the book you're reading, but in general I don't think it's a good example of interfaces for that exact reason - you're using the same implementation across multiple classes. I'd maybe use the `.Sting()` and `.GetNectar()` methods as examples of delegates or extension methods or something similar. Actions or functionality that I want to be able to add to a Bee and use everywhere to ease maintenance cost. So let's say someone wrote a library of bee things. They have a `Bee` base class, maybe that itself inherits from `Animal` and concrete examples of `WorkerBee : Bee` and `QueenBee : Bee` and `Wasp : Bee` or something like that. But you get it and start using it, and realize that they didn't put in an ability to sting - and you want all your bees to be able to do that. So you can write an extension method, `public static void Sting(this Bee MyBee, Animal CreatureToSting) { /* Stinging code here */ }` Now, magically, even though you had nothing to do with the original Bee class, you've added something that *all* Bees can do without having to add extra code to all of them or make your own special bee classes.
I am going to try this 
Thank you! I'm getting there :)
No one should ever use interfaces the way you did in this example, the "cost" is because you don't understand them. On mobile in bathroom, can't explain anything atm
It's dependency injection or dependencies, the word dependency on it's own doesn't make sense in your context.
&gt;What do I pass into the brackets for WqlEventQuery? The documentation for WqlEventQuery is here https://msdn.microsoft.com/en-us/library/system.management.wqleventquery(v=vs.110).aspx. It says you pass either an event query or the name of an event class. Event queries are described here https://msdn.microsoft.com/en-us/library/aa392902(v=vs.85).aspx and you can probably find the names of event classes in that area of the docs as well. &gt;What does this mean? EventArrivedEventHandler(startWatch_EventArrived) This creates a new EventArrivedEventHandler delegate (https://msdn.microsoft.com/en-us/library/system.management.eventarrivedeventhandler(v=vs.110).aspx) that invokes the startWatch_EventArrived method when an EventArrived event occurs. &gt;startWatch.Start(); Note I know that startWatch is an instance of ManagmentEventWatcher What is the question? You can see the documentation for ManagementEventWatcher.Start here https://msdn.microsoft.com/en-us/library/system.management.managementeventwatcher.start(v=vs.110).aspx &gt;What does object sender mean? As stated above, the documentation for the EventArrivedEventHandler delegate is here https://msdn.microsoft.com/en-us/library/system.management.eventarrivedeventhandler(v=vs.110).aspx. In this case sender is probably startWatch. &gt;What does EventArrivedEventArgs mean? As stated above, the documentation for the EventArrivedEventHandler delegate is here https://msdn.microsoft.com/en-us/library/system.management.eventarrivedeventhandler(v=vs.110).aspx. As stated in the document, EventArrivedEventArgs "specifies the reason the event was invoked" and is documented here https://msdn.microsoft.com/en-us/library/system.management.eventarrivedeventargs(v=vs.110).aspx I found all of this via simple google searches.
English isn't my first language and missed the plural form, thank you for pointing that out. 
&gt; if you have 100 children Leave that poor woman alone!
Visual Studio Code is really not the tool to work with C# in. You should probably use Visual Studio Community 2017.
Readme doesn't really describe what this is, but it looks cool
I'd think most people know about Popcorn Time... it's the "free Netflix" powered by P2P
I use visual studio code for unity too , i need an all- in- one thing so..i think is good 
Apparently I'm out of the loop on that one
Are you confusing Visual Studio with Visual Studio Code? They're not the same thing...
Be aware that this is not entirely legal in some countries. In Germany I would definitely not use this.
Thanks so much for your reply! :) Not if works fine for me too. Microsoft.Build.Framework.dll shall be without the "**" in the end but maybe that means something I don't know.
I know
It's already everywhere else (iOS, Android, Mac, Linux), fine example of the power of open source software
Doesn't seem to work for me. I'll try clone the repo and debug later. http://imgur.com/a/PIIi9
You should view interfaces as protocol specifications really. In an application that I develop and maintain, we wanted to simulate its behaviour. Its purpose is to discover and configure network equipment. But when we develop the UI we typically don't want to run and test against comparatively slow devices. We just want the application to instantly start and devices to immediately be available for basic testing. Because we had been using interfaces for our I/O service layer (the layer that actually talks to devices), we simply switched out the implementation (classes) for said services. Interfaces is what allowed us to do so. An interface basically removes the dependency from a concrete behaviour (class) to an abstraction (interface) thereby allowing the concrete behaviour to change as long as it acts like the abstraction.
The cost I saw was the duplicated code, even in the "correct" implementation version because the example I mentioned will have duplicated code by design using an Interface. Thanks for the help btw, lol. 
Wait until you read about the default interface methods proposal. 🙀
Really curious now! Can you give me a page number? Nothing in the index and it's like a 800+ pages book :D edit: wait, I think I know what you're talking about: the `ctrl+.` , that shortcut is useful everywhere.
Are you behind a proxy or may it be a firewall issue?
Installer link is dead.
Don't worry if this is basic, this is how you get started. My way of doing it would be to put all the numbers into an array. An array is basically a collection of certain types. Whether this is integers, strings, and objects. So, because this is very basic, I will post the code here, and go by it step by step. // Declare 3 types of type integers. int num1, num2, num3; // Parse all three integers from the user. num1 = int.Parse(Console.ReadLine()); num2 = int.Parse(Console.ReadLine()); num3 = int.Parse(Console.ReadLine()); // Declare an array of type int. And put all three values into it. int[] maxNum = { num1, num2, num3 }; // Declare an integer 'max' to set to the max value. // Lets assume that all values are bigger than 0. int max = 0; // Iterate thru the array, with a for loop. for (int i = 0; i &lt; maxNum.Length; i++) { // Check with an if statement if the max is smaller than the current value in the array. // If so, set it to be the max. if (maxNum[i] &gt; max) { max = maxNum[i]; } } If you have any questions, please feel free to ask. I may not be able to answer them right away, but I will make sure to get to them when I can. If this is too advanced, please tell me and I will think of a simpler way to do it.
No, but I just tried again now and it loaded ok. =)
Fixed, I have updated the installer
Nice, did you make this? I have a question that is a bit off-topic, but I hope you might have a good answer. So, I've been trying to make an UWP app and it's going alright, but one thing I just can't wrap my head around is the styling. Now UWP and WPF should have a similar way of styling things, right? Do you have any tips for how to easily create custom designs for such an app, like what you have done? Writing thousands of lines of really weird XAML-code just feels very daunting to me. It's not like css where everything is super easy to do, it seems like I have to load in like 100 lines of XAML just to change the hover effect of a button, and I still can't fully figure it out. Do you use any specific software for the design or how did you do it? Did you do it all by hand? Just looking at the XAML-code in your project makes me want to blow my brain out (not because it's bad, but because it's complex to me). :D
I can't cast to it to my Chromecast, so my plans to clone it continues. Besides that, it's working fine now!
For 64-bit integers, C# only uses the lower 6 bits of the right operand. Since `64 == 0b1000000`, the 1 bit will be ignored. For 32-bit integers, it uses 5 bits. Why? Because that's what the Intel x86 CPUs do (or, it is for 32-bit integers - the logic is just expanded to 64-bit). In C/C++ shifting by more than the number of bits in the left operand is undefined, and may yield different results depending on CPU or compiler. ETA: (Fixed brain fart). I think you're stuck with doing a check for `&gt; 63` yourself.
The shift operation will discard any irrelevant bits in the shift count, so shifting by 64 or 128 etc. is effectively the same as shifting by 0. I'm pretty sure this is standard (or at least the common response to undefined behavior) in C++ as well. You can't change how the shift operator works, but your desired behavior is as simple as `shift &lt;= 63 ? x &lt;&lt; shift : 0`. Put it in an extension method or something if you need it often.
100 kids! She has to be on welfare.
Looks really slick! I'd love to take a look at the code later. I didn't have any issues loading the gallery on startup and picking a random item got it downloaded and playing fine. The only issue I saw is that I wasn't able to seek at all during playback. Clicking anywhere within the "red" part of the seekbar would do nothing. It's also not possible to rewind or move back to already played portions.
In cases where you see duplicated voice you should probably look to encapsulation, not interfaces. 
Since I started working professionally in software, I've grown to appreciate the amount of effort a project can require. Because of that (among other reasons), I make a point of paying for software that I use (when I can). It doesn't make sense to me to be unwilling to pay for something I clearly find value in. I don't work in the industry, but I feel the same way about movies. Maybe this isn't against the rules, but I believe that piracy is a morally corrupt practice. Reported.
Hmm, I guess I misinterpreted the behavior I saw in C++ as "normal" when it was just fortuitous undefined behavior. Your solution will work fine. Thanks!
Your `GetBytes` method that you use inside `Decrypt_FromHexaDecimal` doesn't actually decode hexadecimal to bytes, it copies the UTF16 representation of the hexadecimal string to a byte array, which is something completely different.
There's something called CHESS, but I've never used it. Might be worth a go?
Umn thanks, so something more like this; public static string ByteArrayToString(byte[] ba) { string hex = BitConverter.ToString(ba); return hex; } 
or she's a foster mom, in which case she's probably running a child-labor sweatshop and swimming in money from that foster-parent stipend and that sweatshop-income.
That sounds way more likely than my scenario
I'm not aware of anything for race condition detection. However your code should be structured in a way that it can't happen. C# provides many tools to help with this... lock, Interlocked, semaphore, TaskCompletionSource and TPL dataflow (to name just a few). Such tools enable you to control thread creation and flow and hence to avoid race conditions. If however your app has multiple incoming requests (I.e. a web service) you could still have problems. In such cases you need to use some form of concurrency control on your data (for example a rowversion column in a MSSQL database).
A key benefit of that behavioural contract is when the implementation is written by someone else. You can define what your code needs and they can pass in objects that by virtue of implementation meet those requirements. You don't know what their classes will contain, only what your code needs to access from them. Another key usage is around dependency injection. Sometimes there is more than one implementation of the dependency (for example you could make an app that can dynamically switch between SQL Server and MySQL). For such purposes having a common interface is invaluable.
maybe this? return Encoding.UTF8.GetString(Decrypt(Encoding.UTF8.GetBytes(encrypted))); 
Thanks, still the same error System.Security.Cryptography.CryptographicException: Padding is invalid and cannot be removed. at System.Security.Cryptography.RijndaelManagedTransform.DecryptData (System.Byte[] inputBuffer, System.Int32 inputOffset, System.Int32 inputCount, System.Byte[]&amp; outputBuffer, System.Int32 outputOffset, System.Security.Cryptography.PaddingMode paddingMode, System.Boolean fLast) [0x006ce] in /private/tmp/source-mono-2017-02/bockbuild-2017-02/profiles/mono-mac-xamarin/build-root/mono-x86/mcs/class/referencesource/mscorlib/system/security/cryptography/rijndaelmanagedtransform.cs:751 
Tried varations of this with no luck, just can't get the hexadecimal to convert.... grr going crazy
I think u/wuzzard00 is referring to a proposed feature for a future version C#, which would allow interfaces to include default implementations of methods and properties.
Removed: Spam.
Have you tried Blend?
Not 100% sure what your context is, but [lock](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/lock-statement) is a language constuct that can help you build concurrent code by preventing simultaneous access and race conditions to any object.
You need to look up `Console.ReadLine`, `if`, `else`, and `int.Parse`. Consider using r/learncsharp for future questions of this sort.
All of your questions are answered in the documentation. What are you trying to accomplish specifically? This sub is best used to help answer specific questions.
Basically you set up your classes that normally call out to other classes a little differently. Class A (for our purposes lets pretend it is a WebAPI) normally would hold a reference to a Class B (This could be lets say a database repository). If you change it instead to hold a reference to Class B's interface, and change it's constructor to accept an instance of Class B's interface you can begin to leverage dependency injection. Using a nuget library like "Unity", you can set up your application to handle automatically mapping these interfaces to their actual classes, so you don't have to do too much digging. This would automatically handle passing instances of Class B to any MVC or WebAPI controllers that require an instance of Class B, for instance Class A. This is where the benefit comes in, you can create a unit test project, then using a nuget package like "Moq" you can mock up fake versions of Class B based on it's interface. Then you pass that fake instance of Class B to a constructor for Class A. Now you can test Class A's functionality and responses by feeding Class B fake results for any of it's calls (Instead of calling a database it will just return whatever data you tell it to when Class A calls it). You can even track to make sure Class A is calling Class B the correct way, or the correct number of times.
I understand your position, but here is a counter argument. I use things like popcorn time to let me watch TV shows that i have paid for through my subscription to a TV service, but I am rarely at home to watch them, my family will have watched them, the advertising revenue has been paid... so where is the harm at that point. Second issue, Movie studios intentionally drag film productions into net loss in order to reduce the amount they have to pay out in residuals and also in tax, for an example, look at the guy who played Darth Vader in starwars... (not james earl jones, the body) the man never saw another cent... can you seriously tell me star wars didn't make any money? Finally, when i eventually do go to the cinema, i see a film that costs me £8 per ticket, i buy about £10 worth of food and drink per person too (always inflated prices) now when you look at any film listing where you see a major blockbuster it usually has somewhere a budget and total takings... These figures are most often heavily into the "profit" margin. I would happily pay £1 to watch a film on my 15 inch laptop screen, heck i would pay £1 per person and put it on my 40 inch TV, but this option does not exist. There are numerous ways that I pay for the movie industry, through government sponsored tax breaks, to advertising revenue for product placement (you think they buy HP computer screens? or macbooks for these films instead of cheaper generic laptops considering how the effects on the laptops will be generated content) I also pay a licence fee to the government to provide quality programming on the BBC, i do not always get to watch these but sometimes will use popcorn like apps to catch up on stuff that I have already paid for. And finally software... the most pirated software is usually the most profitable, for many years i pirated Adobe photoshop et al, but now that i am older, and use it for commercial projects i pay my £50 per month to adobe... if i had stuck to free software when i couldnt afford adobe, i would know my way around gimp and wouldnt need photoshop. Sometimes i watch a film on popcorn for free... to see if its suitable for my kids, who i then treat to a £60 trip to the cinema... if i cant pre-watch it, i wont take my kids to see it... 
Fix the problem by solving some errors in an other project which is using in this one !
&gt; not entirely legal in some countries I doubt it's actually *legal* in many countries.
&gt; fine example of the power of open source software Unfortunately this is true. Because open source can has it's dark side. To sum it up: there are a LOT of **shady** forks of Popcorn Time. If you want to get it, - for your on sake - only use the download from popcorntime.sh
XAML and CSS are really different indeed, including their learning path. An easy way to be productive very quickly is using Blend, which translates in-design graphical layout to XAML code instantly. Then you can learn how it works by inspecting the code generated. To be honest, I have never used Blend because I wanted to learn the hard way (and be independant from a designer). To sum up, it requires a lot of time, dedication and training, but it's worth it at the end. N.B: I have 3 years of experience in .NET/XAML
Yes I will fix the seekbar soon
There is an issue with Chromecast discovery (root cause is SharpCaster) : https://github.com/bbougot/Popcorn/issues/59
Just took a quick look at it but it made no sense to me. I will give it another try.
I would also like to be in full control, but I only have like a few days to learn it for an upcoming project. Will take a second look at blend.
Just to give you a little example to think about. Imagine you want to display a text on various displays but there are many different types of displays and you want to be able to switch between them easily. So you define a **IDisplayText** interface that just has the function **Display(string text)** now you could have a LEDDisplay class or a CharMatrixDisplay class that all need different code to bring the text on the screen, because all the screens work different. The nice thing is that through the interface you defined a common behaviour and you can expect that if it implements this interface you will be able to get the text somewhere + other people can easily add the interface into their own screen classes and you will be able to use them without any pain.
Perhaps the problem is the assumption that implementing an interface in 2 places automatically means you implement it in the same way. For example, you have a NectarCollector and a Stinger, both have the Sting and GetNectar methods, but they don't necessarily have to work exactly the same way. In practice it often doesn't. If you do have the same implementation, you have to reconsider the design choices, because then the interface might not be a good solution at all. You could make it an abstract class with a default implementation. In this example, you would have to create a NectarStinger abstract class, with a default implementation for Sting() and GetNectar(). 
Thanks for your help - It was a bit complex for me - but helped once i'd done some reading into int.parse. cheers!
Thanks 
thanks - will read up and head over to that group in future. Cheers
many thanks
Alright, if you want another version I can give you one. Just comparing three numbers for the max of them is pretty complex, since you have many comparisons between them. 
If you want mac just use Java which is cross platform by design.
1) Enable key preview on the form. 2) Catch the keys in the KeyDown or KeyPress event. 3) In a timer set the paddle position 
Thank you very much, sir, the 1) was the only thing i didn't do. 
Yes, the form will not trap keys without it.
When are you going to tell us about rainway for the switch?
Hey, Try using the SQL profiler to check what exactly is being sent to the SQL server. Also try creating a stored procedure instead of a direct sql query (slightly easier to manage) and you can turn mange the nocount setting easier. https://docs.microsoft.com/en-us/sql/t-sql/statements/set-nocount-transact-sql I suspect that is the reason you are getting nothing back.
All of these comments are pretty good, but you should look into SOLID programming principles. **Interface Segregation** (SOL**I**D) is one of the principles and many people have done a pretty thorough analysis on each of those 5 principles.
Also, if the graphics flicker, try setting the form's double buffered property to true and see if that helps. You may also want to look into Monogame/XNA for game programming, although it is likely overkill for what you are trying to accomplish. I wrote pong and tetris with winforms before I moved on to the more advanced stuff in XNA.
You can use a list as well: var nums = new List&lt;int&gt;(); while (nums.Count &lt; 3) { nums.Add(Int32.Parse(Console.ReadLine()); } Console.WriteLine("Min: {0}", nums.Min().ToString()); Console.WriteLine("Max: {0}", nums.Max().ToString()); You can manipulate the above such that you can have any number of numerical inputs instead of just three. You should also validate the input with a .TryParse instead of a .Parse as well. 
Personally, I keep a Util class around with nothing but public static methods in it for reusability across an entire project. If a method is only used locally and only within a class instance itself though, I don't see many reasons to bother making it static. Though, obviously when discussing public static methods the intent would be to use them elsewhere so that's irrelevant. Anyway, I'm all for public static methods. Not everything needs an instance and sometimes it's just a hassle when it could be public static and portable.
When you have public static methods in a class, by definition they can't _use_ any part of the class instance, leading to the question: why is the method in the class anyway? I wouldn't say public static methods are blanket bad, but unless they're within a utility class of some sort that isn't ever instantiated, I would discourage them. On the other hand, don't make them instance methods for the sake of being non-static - if resharper tells you that the method can be static, analyze whether it belongs in the class. Private static methods are more "acceptable" - sometimes you need to do some work that doesn't need an instance. You wouldn't unit test these, of course, you unit test the code that uses it. If you have a significant amount of static code operating on static variables, think about taking the whole thing and removing the static - you get the worst of both worlds, forced "single instance" _and_ mutability. If you really need the static, you will have far more flexibility by having a single singleton than an interconnected network of static methods and variables. FYI you might like F# and other functional languages that make [side effect free code](http://www.davesquared.net/2013/11/freedom-from-side-effects-fsharp.html) easy.
Is .net MF still interpreted? 
Any time "state" is introduced to an object, complexity arises. So, in my mind, the "default preference" for any executing code is a public static method with a return *ignoring all other considerations*. This makes unit testing really easy. Making a method static also means the compiler will scream at any future dev who tries to introduce object state to it. In a way, a static method declaration is a way of self-documenting the fact that the method should not depend on state. Ultimately, the use or non-use of a static method depends entirely on the following design question: I need a method to do X -- does doing X require an object instance? If no, then the method should be static. If yes, the method should not be. The real question is where the static method belongs. Many static methods play out as if they would be better served in a utility class or extensions.
What is the advantage of this over something like a Raspberry Pi 3? They Raspberry Pi appears to be a bit cheaper and offer way more powerful hardware. I'm probably missing something here.
I'd also encourage static methods if possible (unit testing, yes). Unless you need IoC or # some instance wizardry (changing state a lot, overridability,...) 
There was ongoing work to AOT compile it. https://github.com/NETMF/llilum
The answer is: it depends. To the extent that it's not OO, it's not OO because you've decoupled your methods from your state, and most OO instruction does the opposite. I don't like to see a lot of public, static methods on a non-static type, personally, because it's usually breaking encapsulation or violating separation of concerns/single responsibility. I particularly don't like to see static methods on a non-static type that don't take or return the type for this reason. It can be painful from a unit testing standpoint because we don't regularly think to inject methods in C#--we inject types, and we don't have any way to inject a static type. Personally, I don't like to see static methods exposed just for unit testing--this usually means that the method should be broken out to a separate type. There's been some back and forth on performance overhead, too. I want to say there are some micro-optimizations around whether an anonymous method with no encapsulated state is built as a static vs. an instance method, which currently favors attaching it to an instance. I don't think I could dig up a source on that, though, and it may not be current.
There are plenty of cases where a static method makes sense. Deletion operations, for example - it make little sense to instantiate or maintain state on an object that you're just going to delete from a datastore anyway - better to have a static method for deletion: Foo.DeleteFoo(id) Someone already mentioned static Utility classes - these are very common, and very handy. Writing unit tests for static methods is easy, and the lack of state or (hopefully) side effects is a real benefit.
An Arduino is a dedicated micro-controller. It's job is to talk to hardware like sensors, motors, etc. in a real time or near real time basis. It can support a far wider range of hardware than a raspberry pi since you can plug anything into it, not just Arduino-specific components. Raspberry Pi is a real computer running a full OS. It isn't really designed for low level hardware access, but a Raspberry Pi can run one or more Arduino modules. But ut can handle high level things like a monitor or keyboard. Basically they are meant for different jobs. -- Disclaimer, my knowledge comes from a two-day class on Arduino. I haven't really done much with it since and I am just parroting the instructor.
Ok thanks. I figured it was something like that. Well I guess that the Netduino serves a purpose then, but it appears that people are having problem with it on Amazon, and they are saying that the support is bad, so maybe people should be a bit cautious before buying one.
The price of a Netduino should be the same as an Arduino. I expect it is high right now simple because only one company is making it. If this becomes popular, the price will drop as more companies pick it up.
I imagine the arduino with the same way at first. It will take time to build a community and if you don't want to trailblaze the other two are better choices.
 try { Foo(); } catch (Exception e) { throw new FooException(e, "An error occurred"); }
You’re neglecting cases where a static method creates an internal instanced object of the class.
If you need something real time (respond to this event in exactly 63 microseconds), then the rasberry pi will not work. A microcontroller on the other hand will. Also, the pi sucks power relative to a microcontroller.
The need for real time can be more apparent. Certain devices need exact timing for communication. An example for this is the Neopixels. The Raspberry Pi can use them through a hack of the PWM but you really are better off with an arduino/netduino or other micro controller. 
&gt; In a way, a static method declaration is a way of self-documenting the fact that the method should not depend on state. Careful with that line of logic, static member variables are a ~~terrible~~great way to introduce state to static methods ;)
Do you have any examples of when that would be useful?
I recently wrote a compression class. To compress a file I call a public static method compress. Inside the static method it creates an instance of the compressor, which has filestreams, compression dictionary, threadpools, buffers, and some other minor properties. The reason I put it in a static method is because there should be absolutely no reason why I should be using the same compressor twice, and since a lot of the properties need to be disposed of properly, I’ll need to handle that as well. Wrapping it all in a static method allows me to call it one time without having to worry about forgetting to dispose the class. If you want default one, take the System.IO file class. There’s several static methods, like File.ReadAllText, which creates an internal filestream, reads the stream, and disposed the stream, and returns it to you. Again, because it’s a one time use of the class, it’s wrapped in a static method, instead of having to go through the process of creating the fs, create a buffer, save to buffer, dispose of fs.
Great examples. I agree, those are good uses of static methods.
True. It really just kicks the can down the road a bit doesn't it?
dead again
Can you explain it a bit further using the example in the main topic? If you're on in bathroom again that's ok, I don't want to waste anyone time. edit: /u/BrQQQ did it
Thank you for the advice.
Thank you! That was the explanation I expected when /u/YourLocalFax pointed out encapsulation. Some people just don't understand that who know less than them could have a huge benefits if something is explained with a bit of patience. A one liner isn't always a solution. Thank you again.
There was an issue with Github. It is back
Dear god, $70 for an stm32-f4 with wifi? This is absurd. You can buy f4 dev boards from AliExpress for like $10, and an esp8266 for $2-3 to add wifi. Are you paying for the software or something? 
That's really great , is there a sample for BLE ?
You can always inject your static method as a `Func` (although declaring your own delegate might be cleaner, e.g `public delegate Maybe&lt;Order&gt; OrderRepository(OrderNumber orderNr)`).
If this is DevExpress at fault, then I'm very confused because I published this to a ClickOnce installer but I also included the DevExpress DLLs that it needs so in theory there shouldn't be a problem...
I would consider breaking out the static creation method to a dedicated factory class. This would allow the compression class to focus only on compressing, which already sounds like it is a complicated procedure. 
The Exception is thrown at this extract: int[] input = new int[fromTextBox.Length]; 
Where do you assign `fromTextBox`? I see the field but nothing assigning it.
I'm always on mobile somewhere when on Reddit, sorry. 
Too many comments. You don't have to explain every single chunk of code with a comment. I see that you are even explaining that you create a new List. You don't have to do that. We can safely assume the reader has eyes. Try to use comments to instead describe why you are doing something a certain way and what the decision making around that was. Make your variable names do the bulk of the work. I'm on my phone, but there ya go. 
Hi FizzMan, It's supposed to take the value from the user and store it in an array, so it currently doesn't have an assigned value. Many thanks, Elliot
Public static methods are great because they eliminate the complexity of dealing with the instance state and make the method more pure. 
IPAddress.Parse() would be one example. 
Yep, after seeing /u/Ericchen1248's response its application toward "factory" methods is rather obvious in hindsight :)
Any time you want instantiation of an object to also trigger async functionality this becomes useful as well since you can't make constructors async. So this allows you to create a StartNew() constructor that starts all async processes before returning the final instance 
You want to set `fromTextBox` to the users input? But you assign the input to your not initialized field so its both null (if thats what `GetData` is about) Edit: you could also do the entire Data retrieving and converting in one line using LINQ: private void QhickSort(TextBox tb) { List&lt;int&gt; numbers = tb.Text.Split(',').Select(int.Parse).ToList(); // every value split by ',' parsed as int into one list //do the sorting }
I would really love to see a solid proposal for "first class constructors" as a language feature, taking regular constructors and the Factory Pattern and builds something that improves on constructors like delegates did regular methods. Maybe it would reduce the usage of `Activator.CreateInstance` too...
Just to add on this, It may also be worth keeping in mind that it's not always best practise to keep all public static's in a dedicated util class if they have some form of relationship with a single class. A good example is if you would like to return an instance of that class like IPAddress.Parse() as I mentioned below. 
Is that for a quality board or a cheap knock-off? I was told that the failure rates for some brands could be quite high.
Yep your missing a file (FileNotFoundException). Have you tried [catching ](https://www.dotnetperls.com/filenotfoundexception) the exception? 
Did you distribute all of the various theme dlls? Depending upon what themes you support, you may need more than one. If you are using a custom theme you'll need to distribute the custom theme dll as well. 
 I had a dog and his name was BINGO!
Of course it's not always an applicable or the best solution. In my current project (which is a framework in which these Util methods could be used by my users to simplify things for themselves) all of the public static Util methods I've used in multiple places or exposed due to my intent to use them in another project of my own that utilizes the framework.
Apologies. That point just didn't seem very clear to me (and potentially others). 
pretty sure you're paying mostly for these guys that did a wonderful job developing the documentation, website, support materials, their efforts building their flashing tools, the firmware, and a lot more. Basicly, you take this, plug it in, run Visual Studio (mac or pc), add a few references to their assemblies, and code c#. Click debug and it's running and you're debugging from within visual studio. The experience, as a c# developer is pretty plug and play and fantastic. I've been using NetDuino and Arduinos since they came out, and before that full blown custom built boards for our projects, and it is night and day. 
Call it structurally_flawed or pǝʍɐlɟ‾ʎllɐɹnʇɔnɹʇs Or FileReView.. or whatever..
Looks like an dynamically loaded assembly. ClickOnce didn't include the DLL because the Theme DLL isn't a direct assembly reference. &gt; at DevExpress.Xpf.Core.ThemedElementsDictionary.AddThemeAssemblat DevExpress.Xpf.Core.ThemedElementsDictionary.AddThemeAssembly(System.String, System.Collections.Generic.List`1&lt;System.String&gt;)
&gt; You don't have any external state to worry about, all that matters is the method input values and you can expect a predictable outcome This is not what "static methods" means
Built and funded by a scheister who fleeced the Agent smartwatch crowd funding to pay for Netduino. Over 1 million dollars gone. No smartwatch delivered, just excuses. https://www.wareable.com/crowdfund/the-saga-of-the-agent-smartwatch-2434
I'm not sure what you are asking is possible due to the ordering. The $ref should refer to a previously declared item $id. Does the second example deserialize successfully with any parser? 
Wilderness Labs bought NetDuino away from Secret Labs, so hopefully Chris Walker is not part of it. I can't find anything showing Chris Walker is part of Secret Labs. 
Sadly it seems like this project is dead :/ A real shame.
It's one thing to not understand that Kickstarters aren't the same thing as shopping on Amazon and there's always a risk that a project won't be successful. It's another to start attacking unrelated companies that have nothing at all to do with it.
Also, if anyone can suggest other places where I can spread the word about this, that'd be great.
It’s not technically a factory method since it’s not working as a more complicated constructor. It’s using the instance and returning the results. Plus, I don’t believe in single method classes. It’s so strongly tied into the compressor class that moving it out just doesn’t make sense. From what I understand, factory classes are used more for sub classes that implement the same interface. Like a character factory that can return a warrior or a magician class to you depending on the need.
Of course it's not but there needs to be something in the way of progress, not just excuses. It's also not meant to be used as a way for people to get free money with zero accountability. I was unaware that netduino sold. I stopped following the situation when the Chris stole my money.
I didn't realize it sold. Just that it was previously run by a charlatan. The brand is tainted by this.
In other words you didn't even bother to read the article before you started spouting off your accusations. As for "stealing" your money, all I can recommend is that you avoid kickstarter for now. At least until you find someone to explain to you the difference between ordering a product and backing a venture.
Here is his post on the forums about it: https://community.wildernesslabs.co/t/the-elephant-in-the-room-chris-walker-and-agent-smartwatch-fiasco/78
/r/programming and /r/dotnet would probably be good places to cross-post.
Lol so basically they took the same HashCode helper all of us wrote. Mine even literally was HashCode.Combine()
I've heard posting GitHub issues to /r/programming is a bad idea because it often invites a lot of trolls.
Nothing bad in this practice but too many static functions may look weird. Maybe CTO just hates too many static methods. I would hate that too. C# after all is object-oriented language.
As long as a *method* doesn't rely on internal state, but has a contextual relation to the class, *static* is the way to. The language does not offer a better solution than to declare it *static*. Often a *free* function would be even more sensefull - besides all kind of factory methods. But there isn't such a language construct in C# (as in Java). Other languages offer better choices like C++, Python or - regarding the syntactical feeling - Scala.
I'm trying to port [workflow foundation Xaml parsing](https://github.com/dmetzgar/corewf/issues/6) to dot net core by adding functionality to my [CoreWf](https://github.com/ewinnington/corewf) branch. Right now, I'm a bit stuck on this issue due to a difference in behavior in the xaml parser between system.xaml and portable.xaml and waiting for some help, but my branch already allows Automatic CacheMetadata and DynamicActivity in imperative code.
All good as long as you don't end up eventually having to use static fields.
so... turns out that `AddThemeAssembly` doesn't exist in `DevExpress.Xpf.Core.ThemedElementsDictionary`... https://i.itsosticky.com/1j607i9.png
It looks like they're all there, but the app crashes when I run it anyway https://i.itsosticky.com/1dbwe8i.png
No, unfortunately it does not. I thought there may be some setting I could tweak to let it serialize to a flat array, but I get what you're saying.
&gt; This makes unit testing really easy. Well, except you can't stub off anything, so it makes *testing* easy, but not really unit testing, which is makes almost impossible.
You should return IEnumerable&lt;&gt; in this sort of case.
I believe it may be better to return IEnumerable&lt;T&gt; rather than expose the underlying type. That way they can't unintentionally muck with the contents. Obviously if it's important that the data not be modified you should be using a read only collection or some other means of protecting it.
Look at the linked issue. There was a lot of discussion about how the API should look like, weighing all the pros and cons. The end result is indeed pretty simple (though it's not just the static method `HashCode.Combine`, there's also an instance method `HashCode.Add`), but I think that's a good thing.
Or, if your data structure is indexable and it's important for you that the user will use that capability, you can return an IList&lt;&gt;. Both arrays and List&lt;&gt;, as well as others support this interface But otherwise, use ienumerable&lt;&gt;. 
When investors back a venture, they still expect something for their investment. Even if I Kickstart something and don't get a product myself and the developer is a horrid person, they should still have used that money to work on the project they set up. Ie this guy should have put out a watch or something. Otherwise you're not backing a venture, you're paying money to agree that the idea is neat. 
I recommend `IReadOnlyCollection&lt;T&gt;` for finite, multi-pass safe collections, instead of `IEnumerable&lt;T&gt;`.
Isn't that what you would want? They saw something that a lot of people were implementing repeatedly and are adding it to the standard distribution. I think it is especially useful here since hash codes for compound objects are an easy source of error for new programmers.
I didn't fully go through your questions, since it's quite a lot. I also did not download the program yet, but here's some general help which may get you on the right track either way: * Don't do too many "all-in-one" commits. Every logical step in your workflow should be put into a single commit in order to easily check which exact change might've broken something later on, and to easily merge or undo certain changes. I am guessing you either have a personal repo elsewhere, or decided to use GitHub only for the reviewing period, which is fine if you can work with it. * How a program is named is completely up to you, but for smaller tools, I personally would suggest a name which tells the user what it does. Mostly because, if they have a certain problem and search for a program online, they are more likely to find yours if the name seems like something that would fix the problem they are having. * Your FormMain class is doing way too much data manipulation. In general, try to separate frontend and backend as much as you can. Whilst harder in WinForms, you can do so by using separate classes for your data and displaying that data. Similarly, you may want to create more functions which can be called out-of-context, such as your "(Un)loading stuff" regions (FormMain.cs ~line 155). * [Naming Convention](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/naming-guidelines). Pretty important topic, as it is throwing me off at some places in your code (mainly inside of `GlitchHelper/networkGraphics.cs`). You are having a bunch of `public static` fields with lowerCamelCase, which makes them look like local variables, since you are also not using the `this` keyword to clarify. In general, you should expose [properties](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/auto-implemented-properties) instead, which (just like fields) use UpperCamelCase. * As seen above, by using `static` for something which depends on the *instance* of the class (since each FormMain could, if you were to have multiple, have different values for those `static` members). This obviously is quite an edge-case, as you would rarely have multiple instances of your main form, but I am including it for completion's sake. What is suggested to avoid this pattern is to instead use instance members, and refer to those using a `static` instance of the *form itself*. You could define this where you're also creating the form: Program.cs. Instead of doing `Application.Run(new FormMain());`, you could define a property `public static FormMain MainForm { get; set; } = new FormMain();` here and then call `Application.Run(Program.MainForm);`. This way, you can still access the instance members, but also allow for extending the system in every way possible. * You are using a quite nifty plugin system for parts of your code. The main question is: why? As far as I can tell, it allows the user to create custom .dll files which then get read at runtime and can be exchanged to allow for extending the program. But judging by the scale of the project, this does not seem like a needed approach, as anyone who would like to implement different behavior could instead submit changes to the repo itself. If you really want to have interchangeable behavior, you could create one base class `public class DefaultBehavior` which uses `virtual` members that can then be overridden by sub-classes and the `override` keyword. Your `IPlugin` interface could alternatively be used, but it does not allow for fallback behavior. But having a whole external plugin system seems like too much to me, anyway. * Use comments marked as `TODO`/`HACK` in order to find any places where you will definitely want to change the code. Pretty much all IDEs keep track of comments marked as such, and you won't forget what there's left to do. * Accessing `ToolStripMenuItem`s. It is recommended to work with them like the designer does: create one field for every item which you can then access using `this.saveToolStripMenuItem.Enabled` instead of `(menuStrip1.Items["fileToolStripMenuItem"] as ToolStripMenuItem).DropDown.Items["saveToolStripMenuItem"].Enabled`. * Performance vs Readability. You use a lot of calls such as `hotfileExportFile = hotfileIterationExportFile = savedFileLocation = null;` (spread over multiple lines). These will not save any execution speed at all, and are not easy to read and understand at first glance. The JIT-Compiler optimizes way more than you may think at first, so these tiny changes will most definitely compile to the same IL-Code internally. I would suggest you not to worry about performance until it becomes an issue, where you should use profiling tools to find out which calls take long and how to effectively replace/optimize them. This should answer your question regarding `for` vs `foreach`: there is a *minimal* difference, but it really should not matter at this scale - use the more readable variant, `foreach`. I hope this helped you somehow. Sorry for the enormous amount of text, but answering all of your questions would take way longer than that, as you can imagine. Good luck with your current and future projects, and let me know if any of the advice above is unclear!
Or, if indexable as he suggested, `IReadOnlyList&lt;T&gt;` 
Automapper can automatically map identically named properties, but in general you should keep them separate - don't try to get too creative here. They represent physically separate structures (heavily related and usually very similar I'll grant you) that address completely different areas of your app. Most DTOs will start off looking an awful lot like slimmed down versions of the entities they represent, but then slowly diverge. If you try to get too creative (lazy?) you're also usually going to end up with performance issues when mapping from EF at some point, usually of the n+1 variety. 
&gt; I need to expose some of Entity Framework entities via a WCF Service. I created DTOs for required entities and using automapper for automapping. Great! Having domain objects and DTO's are the only sane way to decouple domain layers, so well done for that. &gt; So I need an advice on how to reduce/remove need for duplicating entity members definitions in a DTO. Honestly I don't see the problem with manually doing it, is it really that much of a pain to change a few member definitions? I've not found it to be a problem, personally. Out of curiosity where are you using AutoMapper, do your EF repositories call AutoMapper themselves? I was recently deciding on if to do that in repositories or not. I have a UI layer that talks to a service layer with DTO's and then the service layer talks to the repository layer with DTO's, and then to return those DTO's from the repository I'm using AutoMapper there as well as at the UI and service layer.
Hacker News? 
I am not sure I understand you. Are you saying testing a static method of a static class isn't unit testing?
You can use some tricks to save your life for writing the mapping code manually, such as getting the property name of a class with a regular expression. 
I've found the images its trying to load. Hoping that if I include them in the project that'll fix this issue
Why not add a systray item for your application? It's the `NotifyIcon` class.
Unit testing a method that uses the static method is the problem.
Built the project with the images included and it looks like it works now. I'm thrilled.
What theme are you using? Are you using a custom theme?
thanks for the response. It's not a big deal to do it manually, I just wondered how are others doing it. Other people will be developing this further, so I figured it would be nice to make their life easier if possible. Respositories here do not use AutoMapper. I am wrapping EF's DBContext in a repository, which is used by UnitOfWork to implement transactions. This UnitOfWork is used to access database in Business Logic layer which uses automapper. So - UI talks to let's say a "UserManager" within service layer which uses AutoMapper to return DTOs out of repository. 
Thanks for the response. Of course Im lazy :) But doing it manually is not a big deal. As I wrote in other comment, I am curious how are others doing it and because other people will be developing and maintaining the code I wanted to get it right.
Particularly when using Automapper in front of EF and with multiple people making changes, be sure to regularly profile your SQL queries (either with something like EF Profiler or just the built-in SQL Server tool) to make sure the queries being generated are actually along the lines of what you expected, it's easy to make what seems like an innocent and meaningless change that filters down in unpredictable ways. Also, it may not be the easiest all the time, but don't be afraid of just using a basic .Select() instead of using AM... the right tool for the right job and all. Oh, and not specific to your use case, but do yourself a favor and use an AM profile early on to group your configuration(s), not the global static config. You may only ever use AM for the one thing, but if later on you need to also use it in a different way you'll thank yourself for spending the 5 minutes upfront.
True, as goes the cost/benefits of using a static method. Still, I was referring to unit testing the static method itself, not a method that uses the static method.
&gt; A huge thanks to anyone who chooses to step up to the challenge
Removed: Rule 6, spam.
Id rather better native support, like a hashing operator or something 
Create new attributes to hide or show the properties and override the WCF seralizer. You don't want to use the native way to hide the properties because i am pretty sure they would get hidden to EF. https://stackoverflow.com/questions/8084868/how-to-use-custom-serialization-or-deserialization-in-wcf-to-force-a-new-instanc 
I just spoke with a colleague yesterday about this problem. He also missed an easier way to generate hash codes. I gave it a ten second thought and dismissed a function signature such as int GetHashcode(params object[] fields) as it would create allocations on each invocation, and even more on boxing. Now I just need static analysis to: * give an error when the fields used in GetHashCode is not a subset of those used in Equals * give a warning when the fields used in GetHashCode are mutable. 
It depends on what you use this for. The initialization vector should never be reused, but it also doesn't *need* to be secret. Easiest solution is to just generate a new random IV every time and attach it to the cyphertext. Also, generally you should use `Aes` instead of `RijndaelManaged`, as AES is a more formally standardized and widespread variant of Rijndael (unless you need non-standard AES parameters for interoperability or something). 
Right, so you are saying as long as the KEY is the same I am good, I just need a new vector each time? instead of my static vector[] I can just run rm.GenerateIV(); ??? I went with Rijndael specifically because the text I am encoding is very short (less than 20 chars) and Rijndael was able to produce something encrypted around 40 chars long, AES was producing massive massive outputs which doesn't work in my specific use case.
&gt; Right, so you are saying as long as the KEY is the same I am good, I just need a new vector each time? instead of my static vector[] I can just run rm.GenerateIV(); ??? To be clear: you need both the key and the vector you used to encrypt a message to decrypt it again. You just shouldn't use the same IV for multiple encrypted messages. You can use `GenerateIV()` when encrypting, store that generated IV along with the encrypted message, and then restore that same IV when you decrypt it again. &gt;Rijndael was able to produce something encrypted around 40 chars long, AES was producing massive massive outputs The smallest block size of Rijndael is also the default and only valid block size of AES (128 bit), so all else being equal they should produce the same length.
Thank-you for your input Cyberworm, I will try applying this to the array. Originally I used a list to store the uservalue... Many thanks, Elliot
Take a game they might be familiar with and break it down into what kind of C# code could represent it. If you want to show how classes work, maybe have an actor class from which a player and enemy class inherit from. I think things like that could work. And you could then use WPF (or even better, Unity!) to show them how that code can translate into something real.
Yeah im not reading that on mobile. Quick point though. You shouldn't have to install devexpress on the client pc. There should be a redistributable dll or some kind of licence file? Never used devexpress but used plenty of others. Also, have you set all your icons up properly through the project manifest file wizard _thing_? Not a wpf/uwp dev but had to do something similar for a win8 mobile app. 
First of all, thank you for giving such detailed advice! - Ok, I'll remember that for next commit. Part of the reason I didn't split up the last commit was because I didn't want to spam too many commits all in one day, and because I tested all the modified code before committing. (Not sure if either of those are good excuses...) - My target audience is mostly the people of /r/glitch_art (77000~ subs), would that be small enough to warrant leaving the name? - I did have the idea of having one class that that would be doing all the actual work, and leave the forms as shells built on top of it, instead of having everything go through FormMain. Would that be a better program structure? - I'm slightly hesitant about putting loading/unloading into their own classes, since I'm not calling them out of context. Would there be any point where I should be calling them? - Oh wow, I actually completely forgot about that class. It was a very early class I made to get the program working at all, and has since been replaced with the `NetworkGraphics` plugin. ...That said, did I make the same mistake in that class? - I've been slightly afraid/unsure about editing anything in Program.cs... Maybe that's where I could move my working code? - The reason I'm using a plugin system was just so that I didn't have to hard code in every file format I wanted the program to support. Right now it only supports the four variants of Network Graphics (png,apng,mng,jng), but I plan to add a *lot* more in the future. That said, with the current system, I'm just clogging up a folder instead... Can you give an example as to what this other method would look like? - I've heard of using `TODO`, but what's `HACK`? - ...TIL: Use `this` more often... - Does that mean that I should instead be setting each variable separately, instead of on big chains like I currently have, or is there a better way of setting lots of variable to the same thing? Also, just out of curiosity, How big a file would I need to have to make `for` loops worth it?
**Here's a sneak peek of /r/glitch_art using the [top posts](https://np.reddit.com/r/glitch_art/top/?sort=top&amp;t=year) of the year!** \#1: [This is hanging in my boss's office. Ink cartridge exploded.](https://i.redd.it/dhmlrifpf26z.jpg) | [179 comments](https://np.reddit.com/r/glitch_art/comments/6joh8o/this_is_hanging_in_my_bosss_office_ink_cartridge/) \#2: [Canon 5D died while writing to the card. I was told to put it here.](https://i.redd.it/v5d8tp1g73wy.jpg) | [121 comments](https://np.reddit.com/r/glitch_art/comments/69rhd1/canon_5d_died_while_writing_to_the_card_i_was/) \#3: [I wrote a program that makes each pixel in an image a unique color](http://i.imgur.com/MDkYD25.jpg) | [260 comments](https://np.reddit.com/r/glitch_art/comments/6ltv7m/i_wrote_a_program_that_makes_each_pixel_in_an/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/6l7i0m/blacklist/)
Unity is definitely the way to go. I'm a 30-something developer and I still get excited when I see someone demo Unity live.
I thought about doing that but I'm worried I'll confuse them with all the other stuff, the XAML from WPF or the "Unity part" of Unity. But maybe that's the best way to keep them interested. Thanks for the input.
I try to avoid static methods, that doesn't mean I won't use a static method when it makes more sense... but given an option I'll prefer the instance method over static. I find that static methods have a higher propensity for causing difficulties when extending functionality... often the extended functionality takes the form of... "well, we originally assumed that all X are Y... but now we need to account for when X's are Z's instead..." meaning that the stateless nature of the static function is a hinderance at that point. So, being stateless when you need state is an issue, but not using state when it is available does not tend to cause any issues. 
* On bigger projects, it can most definitely become problematic not splitting up commits. For your current project, I wouldn't worry too much about it - it mainly helps when trying to find bugs and for other developers to understand how a system has changed over time. You can imagine, if one commit changes 1000 lines across 50 methods, it can become tough finding out if that commit is responsible for breaking something. * I'm not good with naming either. If it's for a sub, the people there will appreciate there nonetheless - since the *post's* title would describe what you're posting. * Yes! Think about extending your current system: what if you wanted to have a commandline-only version of your program? You'd have to create a FormMain and call its EventHandlers to mimic the behavior of the program itself in another environment. By splitting up the roles so that for example with a save button, you only have to call a single `Data.Save();` method as your button's `Click` event handler, which is way easier to work with and allows for re-use in other places. * There is no reason not to separate code into multiple functions. If you come to a point where you need to separate a single method into multiple "regions" like that, you are most likely better off to put those into separate methods as well. It definitely depends on how specific the use-case of that region is - if you really never need all of what you've put into those regions to be called anywhere else, so be it. As an example of how I would've changed the structure: instead of setting the title of the form directly in there, I would call `this.UpdateTitle();` which would then set the title of the form based on the state of the program. That way, if you ever want to change how the form's title is constructed (e.g. showing the version number in the title as well), you would only have to update this behavior in one place. * I have seen issues with the naming scheme in multiple places. Less with your classes, but more with fields/properties such as `public DataGridViewCell[] selectedCells { get; set; }` in your plugin (should be `SelectedCells`). * I see the `Program.cs` file as whatever should be executed before the main window is opened. It's where I would handle the launch options that the program accepts, set any application-wide properties (such as network settings) before opening the form. You shouldn't really have your application's code in there, as you suggested, since you would be better off having that inside of separate classes with one distinct intent, even if those only contain `static` methods and nothing else. * It would be pretty similar to your current approach, except the plugins aren't loaded as separate DLLs but are instead just simple classes which can inherit from each other: --- //Base class public class Format { public virtual byte[] LoadData(string file) { return null; } public virtual string Name =&gt; null; } //PNG format public class PNGFormat : Format { public override byte[] LoadData(string file) { return //some method that gets your data; } public override string Name =&gt; "PNG"; } //Animated PNG format, can copy behavior from PNG for the most part public class AnimatedPNGFormat : PNGFormat { //Does not override LoadData, uses call from PNG instead public override string Name =&gt; "APNG"; } It of course fully depends on if you *need* such behavior, this was just an incredibly basic example. I mostly found it more useful than working with interfaces (as your `IPlugin` interface would basically be fully implemented in an ideal version of my example `Format` class). * There's a lot of ways to prefix your comments. In Visual Studio, [you can define your own prefixes](http://i.imgur.com/3NXADmv.png) as well, and use whichever you find most comfortable. `HACK` would mean any code which *works how it should*, but is mostly in great need of refactoring as it either can't easily be extended/modified, or is just unreadable. * `this` only has a stylistic difference, but I personally "waste" 5 characters to make it clear what I am accessing (since accessing a `static` member does not work with `this` - you can prefix it with the class name though, such as `FormMain.HotfileManager`). * It's probably for the best to set each on a new line, to make it clear what you are doing. It isn't common practice to do it in a chain, at least. You can also initialize multiple variables on the same line, but it's equally rarely used. Regarding your second question, [see this post](https://stackoverflow.com/questions/365615/in-net-which-loop-runs-faster-for-or-foreach). `foreach` loops actually have certain traits which do not work with a regular `for`-loop, such as when working with [`IEnumerable&lt;T&gt;`](https://stackoverflow.com/a/558428/7475278).
WPF is quite a lot of UI design and Unity is a lot of game design. But with the latter you could setup some scenes (with free assets) so that the kids can focus on adding code which manipulates those scenes (add movement to objects, make something happen when you press x). Maybe you can come up with a simple feature for them to implement after they've seen the examples/played around in your scene. Going with Unity probably is more work to setup but it's very visually pleasing :)
this was a perfect solution. Thank you. nemec 👌
I thought [Terrarium](http://terrariumapp.github.io/) was pretty cool. You can dig into the code itself to show how it works, or just focus on coding the creatures.
 I agree with the game /unity path Day 1 general knowledge how computer works classes /functions etc Day 2 game development theory from scenes drawing to mesh, textures, camera etc Day 3 make a character move jump etc Write a simple api for the "game" and let them play with it Also for something ready look at the khan academy series on pixar/animation its very easy to follow and fun to interact (code is in js but you could find some nice idea) 
Have a look at monogame. Its fairly easy to write a simple game in.
https://scottlilly.com/learn-c-by-building-a-simple-rpg-index/
To answer the *Edit* (tweq already covered the rest) - the key should be whatever you choose as *key size* - 128, 192 or 256 bits (16, 24 or 32 bytes). And should be a properly "random" byte array - not random numbers you pick yourself (humans suck at random number generation). The output of e.g. RNGCryptoServiceProvider (which you then store as your key for future use) is fine. If you want a password/phrase to be basis for the key, you should be using a password derived key function to derive a key of the right size - e.g. PBKDF2, Bcrypt, Scrypt or Argon2 (in other words, don't just send your password through a simple cryptographic hash like SHA-2). The choice of key size doesn't depend on the size of content, and has no influence on the size of the ciphertext. The ciphertext will *always* be the exact same size as the plaintext - plus padding to make it an integer multiple of the *block size*. In other words, at most 16 bytes will be added (and at least 1, usually, depending on mode of operation and padding scheme). In yet other words, if your plaintext is 10 bytes, the ciphertext will be 16. If it's 16 bytes the ciphertext will (mostly) be 32 bytes. The cost of larger key size isn't output size, but performance. Which key size is more secure? Well, 256 bit. But 128 bit offers fine security for the foreseeable future. The IV needs to be the same as the *block size*. If you're specifically going for AES encryption, that means 128 bits/16 bytes. If you're not going for AES encryption, you should. The larger non-AES block sizes in Rijndael are much less vetted, and have their own, not necessarily intuitive, issues.
doesn't really matter, an Array (`.ToArray()`) would work as well, but i heard somewhere that LINQ was optimized for `Lists` and made a habit of using it instead.
It works! Cheers Cyberworm!
The simple approach is generally the best. If you have a lot of domain objects it might be a hint that things are too complex. Worst case, if you do use some code generation, throw it away before your first release. Too be honest I'm not even convinced that auto mapper is worth the pain. Even with the item.Widget.Name / item.WidgetName shortcut I keep flipping between using it and not using it.
This now creates a format exception, I feel like re-writing input as a string array won't effectively fix the problem: public partial class Form1 : Form { public List&lt;int&gt; unsorted = new List&lt;int&gt;(); public string fromTextBox;//Remove public int[] input; public int piv; public Form1() { InitializeComponent(); //input = textBox1.lines; //var input = textBox1.Lines;REVIEW CHANGE - make new input // parse via Output.Text = input.ToString(); GetData(textBox1); } private void Form1_Load(object sender, EventArgs e) { } //Data Retrieval and converting public void GetData(TextBox tb) { input = tb.Text.Split(',').Select(int.Parse).ToArray(); //Input String not the correct Format //Format Exception } //Create Method to retrieve value from textbox private void button1_Click(object sender, EventArgs e) { //QuickSort //New, needs comma seperated support ///NullReferenceException / Crash Point ///Re-write to work with GetData //Old Edit : int[] input = new int[fromTextBox.Length]; for (int i = 0; i &lt; input.Length; i++) input[i] = Int32.Parse(fromTextBox.Substring(i, 1)); foreach(int elements in input) { int total = input.Sum(); int length = input.Length; piv = total /= length; } for(int i = 0; i &lt; input.Length; i++) { //Display sort int currentminimum = Int32.MaxValue; if(input[i] &lt; currentminimum) { currentminimum = input[i]; Output.Text = Convert.ToString(currentminimum); } } } 
`int.Parse` throws a `FormatException` when one or more of the elements split by `,` are not correctly formatted as a number (effectively no number) what was your `Text` value of the used `TextBox` ?
the Problem is you call 'GetData' in your constructor and i doubt your `TextBox.Text` has any value at this point. call it when you want to sort it in your `button1_Click` method or at least hardcode a value in the constructor before `GetData` is called it should look like this : `1,34,12,4,3,2` no spaces, no nothing, just commas
example: public int[] GetData(TextBox tb) { return tb.Text.Split(',').Select(int.Parse).ToArray(); } private void button1_Click(object sender, EventArgs e) { input = GetData(textbox1); . . .
The program starts and the exception is immediately thrown without any input or value. The idea is the user types in a value and then this is stored in the array 
the exception is immediatly thrown, because your `GetData` method is called when your `Form1` is instantiated (the user has no time to input something because it tries to get the data from a `TextBox` that doesn't even exist at this moment) remove it from the constructor and call it in your button click 
my suggestion: public partial class SortForm : Form { public SortForm() { InitializeComponent(); } private int[] GetData(TextBox tb) { return tb.Text.Split(',').Select(int.Parse).ToArray(); } private int[] QuickSort(int[] arr) { Array.Sort(arr); // i'm lazy, replace this with your sorting code return arr; } private void SortBtn_Click(object sender, EventArgs e) { int[] sorted = QuickSort(GetData(InputTxtBx)); //do whatever you want with the result, for example, print it in the Console: Console.WriteLine($"[{string.Join(",", sorted)}]"); } }
Ahhh of course! (duhh!) Thank-you so much for your help Cyberworm, some people on this thread would've lost their patience by now! so thank-you for your detailed, helpful explanations! Elliot
It's either would **HAVE** or would**'VE**, but never would **OF**. See [Grammar Errors](http://www.grammarerrors.com/grammar/could-of-would-of-should-of/) for more information.
But it's abbreviated, both are applicable!
hmmm, interesting... I shall experiment! Thank-you Cyberworm
no problem, does it work now? 
have fun!
Yeah! exactly as I wanted it to :)
I finished a WPF app to create fluent interfaces in C#. Like most home-grown development tools, it works when I use it, but it should be "interesting" to see what happens when other people try it out. I should have a demonstration video, and instructions on using it, up on my site in the next couple of days (link is in the GitHub readme file). The project is on GitHub, under the MIT license, at: [Fluent Interface Creator](https://github.com/ScottLilly/FluentInterfaceCreator)
Honestly the simplicity of winforms is probably a better intro when you only have these kids for a few days
You got ripped off get over it 
I have hardly made a whisper over the whole situation. Go read the Agent project Kickstarter forums if you think I'm making a big deal about. You'll see I'm not.
Take a look at https://www.codingame.com/home they have simple UIs that you solve. There are about a dozen or so of the simple challenges. You could go through them, and then plan them out with the lessons.
Do these kids have any experience at all with programming or no? I feel like scratch is a good introduction to programming if they haven't done anything. https://scratch.mit.edu/ Also some samples done up in jsfiddle work well. .Net and all of the framework/ IDE nuances or distractions are a lot to absorb in just a few days. 
I'm not a .NET Core maintainer, I'm only a community member. Even if I was being paid, the .NET Core team has lots of stuff on their hands and making these perf measurements are going to be very time-consuming.
[Please read this before you continue down your path.](https://rogerjohansson.blog/2013/12/01/why-mapping-dtos-to-entities-using-automapper-and-entityframework-is-horrible/) 
Create a dictionary (maybe &lt;char, string&gt;), fill it with values, iterate each character as key and concat the values 
`IReadOnlyCollection&lt;T&gt;` is my usual choice at work. Developers I talk to are surprised to learn (or tired of hearing me remind them) that `IEnumerable&lt;T&gt;` can only be iterated over once--since you don't know what backs it. ReSharper will flag multiple iterations of an IEnumerable as a problem, but I've seen developers ignore it "since it's just a list". Your return type is a contract, and you should honor it, because you never know when the internal implementation is going to change.
Why is everybody in this thread so mean, did i miss something? 
I am working on a netstandard 1.2 library that acts as a nuget rest api interface. Allowing you to search and download packages. Uses the v2 OData interface. I am also working on making it work with multiple endpoints and even local folder nuget package feeds. I haven't committed the code yet but I will do so soon. My hope is to use this in some netcore and net4.5 libraries to interact with my companies private nuget feed. 
Fidget spinner emulator
In my SEO Macroscope application, I have added a couple of language readability algorithms (Flesch-Kincaid, and SMOG): &gt; https://github.com/nazuke/SEOMacroscope/tree/v1.6/MacroscopeAnalysis/MacroscopeAnalyzeReadability The user can choose which method they'd like to use via a preference setting. There is a class for each, and each class implements a very simple interface. The interface specifies that each class simply provides a few methods that return a score, description, etc. Under the hood, the classes that implement the interface do quite different things; but they ultimately return just a few pieces of data as an end result. At runtime, the code that actually needs to use the readability algorithm requests a factory class to return an object of the chosen type. So, in this case, I've used interfaces to provide a simple plugin-like system. At some point, I'll hopefully add more algorithm classes for other written languages, French, German, etc. Disclaimer: I'm still learning C#, and this is my first Windows application with the language ;-) 
Don't know if anyone is interested but Unity seems quite popular here so this might be interesting to some people. I'm not recommending these books because I've not read them (I'm a web developer) but maybe someone will like them. 
Looks interesting but I will wait until someone chimes in and says the books are worth getting. 
Careful, the 1 month of Mapt is just their normal free trial, there is nothing special about it.
Edit: Whoops, I believe this is the wrong bundle i was looking at... 1550$ worth of gamemaker software for 15$ sounds like a deal... (Not that I need it, but daam, thats cheap) This is a bit less than one percent of the original price... 
Scott's C# patterns tutorials are concise and extremely helpful since he also includes a link to a text article. Highly recommended!
I even checked DevExpress website about deployment and while that method included the DLL for the theme, it didn't copy the images that the control needed so I just found the images and included them in my project folder and published again, now it works.
WPF and Unity have so much frameworky things in them, throw those away. If you want to keep it simple and use a GUI, WinForms is the only way. You can code a Rock Paper Scissors game with images as a basic intro. 
i just picked it up. it's for v1.4, so it's basically there to let them upsell you on v2. that being said, i've never touched gamemaker before so 1.4 might be perfectly fine for your requirements.
I'm leaning to this. The drag and drop of WinForms will give those who find the programing too difficult something to do. Thanks for the advice, had almost forgotten about WinForms 😁
Unlike dynamic, var is just syntactic sugar. As such there is no impact on the run-time performance. Considering the type is almost always directly there on the assignment side (or as the return type of a method you're calling) I can't imagine the impact on compile time is appreciable. Consider the fact that VS does it on the fly to tell you the type when you hover over a var declaration. I'm all for using var as it keeps the code tidy and makes it easier if you modify return types, etc while developing or refactoring.
You should never pay for books on programming in my opinion. All the knowledge is freely available online
Yeah but OP asked about the work of the compiler. The answer is that, since the compiler needs to figure out the type anyway in order to check it, and since the type system is rather simple to decide, it might be *less* work for the compiler to use `var` :p (although it's almost certainly completely negligible.)
Interesting point. Removing the type check might save a tiny bit of work, though it slightly increases the complexity of the type resolution check as it has to ensure the assignment is non ambiguous (i.e. certain generic methods can't be used with var). Either way the impact is negligible.
Sure, if you pirate. Otherwise, the quality of good programming books far surpasses what's available legally and free.
&gt;I have a UI layer that talks to a service layer with DTO's and then the service layer talks to the repository layer with DTO's, and then to return those DTO's from the repository I'm using AutoMapper there as well as at the UI and service layer. So you potentially display these objects in the UI? I suppose it's mapped from a DTO to some kind of UI object? What happens if that object is clicked, does business logic run using the UI object? Do you map it to another object, do you retrieve the DTO and use that? I have a TicketDTO that I've supplied to the UI and created a "TicketModel" for (which I think is the wrong name). Depending on eg gig time selected the TicketModel is queried to see if there is availability, using business logic it has itself, and then the UI uses the TicketModel to display things. Is that the right idea? I also need to break my view up so that I have a presenter holding more of the logic, but I think that's a separate issue.
I wanted to try based on your input, but the project is dead, no documentation, no exemples, no tutorial, nothing...and i can't find a damn thing with google because terrarium is a common word.
Hahaha😁
The schools in my area introduce kids using VB... Urgh. I See no reason to do that when C# is around.
Right. One of those two :).
I completely agree.
You can design WPF applications by drag-and-drop as well and never bother with XAML. I would even go so far as saying that the drag-and-drop experience looks nicer and not as cluttered in WPF, for example the property window looks nice. I'm a high school (gymnasium) teacher in programming and I my guess though is that it will be very hard for the students to learn C# in three days and apply it to make their own games/programs on the last day. My recommendation would be to stick with console programs and create console program games based on random numbers if you want to teach them programming, or go with something like Scratch if you want them to be able to create something graphical by themselves after two days.
Can anyone say if those books are worth getting?
If you're developing a asp application I'd recommend creating a (non-static) helper class and injecting them where you need them. I generally have a static service where I'll store things that I only want a single instance of throughout the lifetime of the app like HttpClient, and then a transient service which contains what would normally be in my static utils class. Unrelated but also related: To give your static method example (AddTrailingSlash) extra flare you could make it an extension method by adding the 'this' keyword (AddTrailingSlash(this string url)). That way you could take advantage of method-chaining. 
I'm not supposed to teach them C#, only introduce them, so I think that if I show them only the stuff the need I hope it will be fine. But thanks for the tip with WPF drag-and-drop, usually don't do it that way myself so I didn't think of if.
Started working on the [VLC app for Windows 10](https://code.videolan.org/videolan/vlc-winrt) (desktop, mobile, Xbox). It's pretty challenging because there is a lot to do (bug fixes, refactoring, architecture changes, design changes and new features) but exciting too! PRs welcome.
Using c# interactive, if you are using visual studio 2015 or later, might be a good idea. I imagine the faster action/feedback cycle makes for better learning. But that would lend itself more to doing math/logic problems or image/data manipulation and not so much UI stuff.
You can get a lot of these for free just by visiting https://www.packtpub.com/packt/offers/free-learning daily. They seem to rotate the same set of books a lot.
I mean, you really only need GM prp and the modules, so probably more like $600 tops. And as someone already said, this is for 1.4, 2 is already out. Still not bad if you just wanna play around with it.
That's not good. It's dog slow when interpreted. 
Interested in these, too. Would like to know if they are crap or not before purchase. 
You could look up Base64 encoding.
Ideally you can pre-pend (if thats a word) the IV to the encrypted message. You would want your encrypted text to contain everything it needs to decrypt except the key. tweq has done a good job explaining what to do. I'll mention that the reason you need a unique IV is because if you encrypt the same text with the same key it'd come out to the same encrypted text. This could leak information. if I saw the same encrytped text over and over again I might be able to work out what that message is (or isn't) by the context. The IV is just some random noise added to each message so even with the same text/key the encrypted text would be different.
Would simply just using the built-in [`Convert.ToBase64String(byte[])`](https://msdn.microsoft.com/en-us/library/dhx0d524%28v=vs.110%29.aspx) be sufficient? (It also has a convenient `FromBase64String` method to reverse the conversion). It uses `a-z`, `A-Z`, `0-9`, `+/` (and `=` for padding)
&gt;Out of curiosity where are you using AutoMapper, do your EF repositories call AutoMapper themselves? This is a great question...I lean towards the repository owning the mapping process *only* due to the data I expose through the repository being DTOs. That's a stronger decoupling from the ORM in my opinion. If you're just exposing an IQueryable collection of your entities, then you might as well just map them outside of the repository imo.
The compiler does no extra work. It has to determine the data type anyway to make sure the assignment is legal. Having it use the type that it has already determined for the variable is no extra work at all.
Assuming you're talking about the **_dc** parameter, not "_ds", simplest might be to use the [`System.Web.HttpUtility.ParseQueryString`](https://msdn.microsoft.com/en-us/library/ms150046%28v=vs.110%29.aspx) method: Uri myUri = new Uri("http://www.pse.com.ph/stockMarket/home.html?method=fetchIndicesDetails&amp;ajax=true&amp;_dc=1501673848213"); string _dc = HttpUtility.ParseQueryString(myUri.Query).Get("_dc"); Console.WriteLine(_dc); //outputs "1501673848213"
Base32 encoding gets you pretty close. 
I agree. The compiler has to determine the return type of the expression on the right-hand side of the line anyway. I wouldn't be surprised if using `var` is actually faster than explicitly specifying the type. Because when explicitly typed, the compiler will also have to make sure the types are implicitly compatible/convertible and invoke any implicit conversion operators or boxing operations if applicable. Certainly has less less character token parsing to do as well. The whole discussion is probably moot anyway. I'll bet the compiler spends significantly more time physically reading the `.cs` file from the hard disk and parsing the word/character tokens than it does resolving types for variable declarations.
Just as a warning, you should keep children away from sharp objects ;)
Encoding.ASCII.GetString(byte[]) maybe?
This might help you out. (strings are basically char arrays, so it shouldn't be too much work to change it to byte arrays) public static string ConvertBase(string input, string sourceDigitSet, string targetDigitSet) { //Big integer to represent the amount of the input BigInteger amount = 0; int positionExponent = 0; int sourceBase = sourceDigitSet.Length; int targetBase = targetDigitSet.Length; var inputStack = new Stack&lt;char&gt;(input); //For every digit, sum up its value, which is equal to its index in the digit set multiplied with the power of its position. while (inputStack.Count &gt; 0) amount += sourceDigitSet.IndexOf(inputStack.Pop()) * BigInteger.Pow(sourceBase, positionExponent++); string result = string.Empty; //Add the digit from the target digit set that represents the remainder of the amount divided by the target base do result = targetDigitSet[(int)(amount % targetBase)] + result; //and store the amount of that division as integer while it doesn't equal 0. while ((amount /= targetBase) &gt; 0); return result; } Usage: * ConvertBase("15", "0123456789", "01") -&gt; "1111" (decimal to binary) * ConvertBase("16", "0123456789", "01") -&gt; "10000" * ConvertBase("1111", "01", "0123456789abcdef") -&gt; "f" (binary to hexadecimal) * ConvertBase("10000", "01", "0123456789abcdef") -&gt; "10" * ConvertBase("from alpha to apha numeric", "abcdefghijklmnopqrstuvwxyz " "abcdefghijklmnopqrstuvwxyz0123456789") -&gt; ... The BigInteger is part of the System.Numerics framework assembly - you might need to add a reference to it. Or you could change the datatype to long, and the call BigInteger.Pow() to Math.Pow().
Guess what? Now you can use [C# with Unreal Engine](https://mono-ue.github.io/). 
Didn't this exist few years back (well not the same thing, but basically C# for Unreal), but it got shut down by Unreal or something? IIRC it broke their TOS or something like that.
Remove the LL from your second line: LocationData LD = new LocationData(); DataTable LL = LD.LocationList(); 
Your syntax is wrong. It should be: DataTable LL = LD.LocationList(); LocationList returns a DataTable, so you can just assign the method result to a variable of that type. The syntax you had is attempting to access a field/property called 'LocationList' on class 'LocationData', then call a method called 'LL' on that property, which doesn't reflect your class at all. Not sure why the error is saying 'LocationData.LocationList(string)'. Have you changed it and it was previously accepting a string maybe?
+1 for MonoGame, it's the best way I know of to write games in pure C# (though to be honest these kids may be a bit young for graphics programming).
But one should avoid falling into the trap of "well, it's a good deal, so may as well". Especially when software has soooo many free options. And the free options often have more help available (due to being more popular and fewer barriers of entry) and are easier to extend.
Of course, it was more like "if you wanted this software - now is the time"
I don't have any particular advice on how to do this but I would very much like to hear about what you end up doing and how it worked out after you are done. Would you be kind enough to give us a little update once the dust has settled?
It was originally, but I changed that . Your suggested fix solved the issue for me. Thanks. I am mainly a database/ SSIS guy that got kind of roped into doing some front end work, so I have been trying to learn c# as I work on it. Previously I just used it in Script tasks is SSIS, mainly to tweak text files. 
[Monogame tutorials](http://rbwhitaker.wikidot.com/monogame-tutorials) including [Monogame 2D Tutorials](http://rbwhitaker.wikidot.com/monogame-2d-tutorials). Maybe set them up with the rudiments of a game and have them enhance it? 
Of course, how would you suggest I do it? A new post? An edit? Or a comment?
I think it would be worthy of a new post.
It's pretty hard to slow down the c# compiler my much, I really wouldn't worry about it.
Nomidea from here. Try your code with some other event log, to compare?
Thanks, that gets me very close except two issues in my specific use case; 1. everything is lower case and 2. +/ and = are reserved in another area. Thanks though for your idea I apprecaite it.
Thanks, that gets me very close except two issues in my specific use case; 1. everything is lower case and 2. +/ and = are reserved in another area. Thanks though for your idea I apprecaite it.
Winner winner chicken dinner, with the exception of the = I am all set, and it looks like I can just add a little logic of converting that = to a 1! Now just to figure out the code. Thanks for that! I googled 7, 6 and 5, and even 4 bit encoding but all of them were wrong. Base32 looks perfect, thanks again.
Permissions? Try running as admin?
The big catch here is that they have a "UWP" package included... but both Xbox and Windows Mobile support only exists in 2.0. (It is noted in the description on the bundle when you click on that item.) So while it's advertised as "UWP" in the bundle, it will only get you Windows desktop support.
More importantly, they end support for v1.4 in 2018. But as an owner of v1.4 you can get a good discount on v2.0.
You would have to write your own serializer and deserializer to achieve this. When your object always has an unique ID, you could also choose to use Dictionaries with the ID as the key and the object has the value.
I didn't think it was really unknown, but about 50% of the professionals I met don't know about it. Anyways, pressing Ctrl + , in VS will allow you to search class names / file names in the current solution.
You aren't going to be able to do that with the EventLog class. You will need to use System.Diagnostics.Eventing and the EventLogQuery to get access to those logs. [Example](https://stackoverflow.com/questions/33680388/how-to-retrieve-event-log-other-than-application-category)
I think that EventLog can only access the 'traditional' logs, such as "Application", "System", etc. I haven't tried it myself, but some searching on the issue looks like you need to use EventLogReader to view Application and Services logs.
You could use a similar approach. If you have 32 available characters you could implement your own Base32 encoding, for example.
You should backup your settings and project templates. I've had both become corrupted before. That will probably never happen to most VS users, but it only takes a minute to back them up and could save you hours.
`CTRL+.` brings up that quick-fix context menu (say on the red-squigglies) One aspect of it is that you can also use it (IIRC, since VS2015) to import the `System.Linq` namespace when you are starting to write a query. For example, I have a collection and I want to do a LINQ query. I write out `myCollection.Select` and hit `CTRL+.`, then I can import the `System.Linq` namespace and continue on my merry way with intellisense on the query. I suspect actually a lot of devs already know about this, but it's a huge quality-of-life feature for those who don't know about it. ---------- Another one might be if you have an older, unsupported extension that hasn't been updated to run in the latest Visual Studio. You can manually tweak the extensions manifest file to let it install anyway. (Here's a guide to do it for 2012, the steps are largely the same though depending on the VSIX version, there may be a few other things to tweak, but the basic idea is the same: https://researchaholic.com/2012/10/04/manually-updating-a-vsix-file-to-run-in-visual-studio-2012/) Doesn't guarantee that the extension will actually work, but in my experience, especially for some of the more simple extensions, they tend to work fine. But your mileage may vary.
Reattach. Allows you to attach to a process that you have recently attached to very quickly. I don't run projects too much anymore since I can attach to a process so quickly.
Ctrl-K Ctrl-F to auto-format a selection. Ctrl-K Ctrl-C to comment out the current line (or selection). Ctrl-K Ctrl-U to uncomment.
This is basically how I navigate to all files now and I can collapse the solution window to the right and gain more regular window space. Unless I'm working in code I'm not familiar with and actually need to browse. 
Does CTRL-K CTRL-F format the current line if there is no selection? 
I don't know the answer to that. I'd expect no, since (at least to me) the notion of 'correct formatting' only makes sense in the context of a selection.
Shift-alt up or down arrow gives you multiple cursors. So if you have 10 lines of code that all need the same change, you can put a cursor on all of those lines, and what you type will go on every selected line. Super easy to do, and more convenient than search/replace.
There are some times (mostly in one liner property gets and sets) where you can format the line by deleting and reinserting a closing brace at the end
The first step is to track your processes. When it detects the game process, start recording. As for getting the highlights, I wouldn't begin to know.
You can probably just use string.Trim() to get rid of the '=' off the end of the string.
Alternatively use ctrl+t if you use resharper. 
Static classes that maintain state are the devil. They are extremely hard to unit test. Switch to a DI/IoC framework, change the class to non-static and inject them where needed. Static extension methods in C#? Perfectly fine, because extension methods use the existing public interface (properties / methods). Static methods on a non-static class? Those should be moved to an extensions class and done as extension methods using `this`. If they can't function as a static extension method (i.e. they need access to private variables in the class) then you've got a code smell.
Without selection it formats the entire file. 
what I mean how can I get from this website http://www.pse.com.ph/stockMarket/marketInfo-marketActivity.html?tab=0 to http://www.pse.com.ph/stockMarket/home.html?method=fetchIndicesDetails&amp;ajax=true&amp;_dc=1501729452568 thank you for helping... I'm not good with web programming
Not sure. Neither of the links load for me.
Holy shit yes. I thought I knew all the VS productivity shortcuts and I regularly end up teaching other devs about time savers in VS/Resharper of all types. I did not know this and it probably could have saved me an entire day of work by now (in total). Thanks!
Hmm, that's a good point.
The former link [http://www.pse.com.ph/stockMarket/marketInfo-marketActivity.html?tab=0 to http://www.pse.com.ph/stockMarket/home.html?] will give access to _dc number to access the latter link
Nice one. Holding alt and dragging the mouse is an easier way of doing this, though. 
If your intellisense ever bugs out and stops working, usually a ctrl+spacebar brings it back up. 
Another that I use a ton is alt-shift-L so that the solution explorer will move to the currently focused file. Soooo helpful especially if you open a lot of files using ctrl-t and need to get to the directory fast.
Ctrl K + Ctrl D Formats entire document.
It's honestly hard to distinguish between Resharper and VS shortcut/features now that I've been using Resharper for awhile. I'll try to name only VS specific ones or big Resharper ones. Here's a list of ones that I regularly end up teaching to Devs at my work, although they may not be new to most of the users here: 1. $ReturnValue in the watch window if your are debugging gets you the return value of the current function (must be on the closing brace of the function, and newer VS's have this in I think the Local Watch window). 2. CodeMap while debugging. Gives you a nice visual map of the callstack and the call chain. 3. If you use Resharper, use the Resharper heuristic build instead of VS default. It can potentially save you minutes per build. My entire team (12 devs) were using Resharper but using the VS build before I got there. Average time of a build went from about 2 minutes to 20 seconds. 4. Immediate window. If you are debugging, and want to know the evaluation of almost any code statement in the current application context, then open the Immediate Window and type something in. Think of it as something like LinqPad/VS Interactive Window, but you can use it within the context of a running application easily. 5. In Resharper (I think), Shift + Alt + L opens the Solution window and navigates to the file your cursor currently has focus in. 6. In Resharper, when using Ctrl + T to search everywhere, you can limit the results to things like methods/classes/properties. For example, searching for only methods requires "/mm" before typing in the arguments for the search. (Maybe only in newer versions). 7. Ctrl + Shift + Arrow Keys - Highlights words at a time instead of single characters. 8. Most people know Ctrl + Z undoes actions, but Ctrl + Y is the redo hotkey for bringing hem back. I'm sure there's a lot more that I can't think of. These just stick out as being the main things that people at my work think are useful. Note that many of them are 9-5 programmers and do not go too deep into learning new things.
&gt; 1. everything is lower case and &gt; 2. +/ and = are reserved in another area. You might like Crockford Base32 encoding then. http://www.crockford.com/wrmg/base32.html I have a solid c# implementation if it suits your needs. https://gist.github.com/anonymous/a1a4925ecbf72c26d91edadd123a40fd
Visual Studio has ~10 Clipboards. Repeatedly press ~~Ctrl+V~~ **Ctrl+Shift+V** to cycle through these. Edit: Ctrl+V -&gt; Ctrl+Shift+V
Alt+Enter (Project Settings) -&gt; First Tab -&gt; Default Namespace
Ctrl+Shift+V
Resharper Select solution or files you want to fix -&gt; Right click -&gt; Refactor -&gt; Adjust Namespaces.
Or Ctrl+n if you use the better keyboard scheme ;)
Just as an FYI, pretty much every decent text editor has this feature.
Alt E, V, D, and I don't need to remember, I see it on the menu. Discoverability + 1 key more &gt; cramming my head with trivia :-).
Type aliases are under used. For example when interoping WinForms with WPF, something like 'using WpfApp = System.Windows.Application' or 'using Color = System.Windows.Media.Color' if you need to import System.Drawing.
Thank you!
That will adjust all existing ones, but will not change the default.
Ctrl-m, ctrl-o collapses all methods/blocks!
Yeah, it's basically a dumbed down version of ReSharper's Ctrl + T.
**Ctrl + F12: Go to derived definition.** It's very useful, as it either goes to the definition like F12, or, if the definition is an interface or base class, goes to the definition in the implementing/derived class. It's like ReSharper's Alt+End but actually better because it also works like F12 when it's *not* an interface or base class. I more or less use it instead of F12 all the time, since we use dependency injection a lot of thus have interfaces or base classes all over the place.
Paste JSON and let VS build al the classes for it
If you want to convert back again, I'm not sure you can simply remove the padding.
Can you type that again, this time with actual words?
Ctrl K + Ctrl D Formats entire document. 
That's fair. My concern isn't about slowing it down really, its just to learn :)
There is also an option to have the solution explorer always follow the active file. It's under options &gt; environment I think. 
I found this a couple of years ago. It has to be the coolest feature I've found. 
I've always wanted this :)
I just tried this in VS2017, doesn't seem to work. Resharper only?
To bad i can't go to Insert Mode with multiple cursors :(
I think so
&gt; And just to freak you out, here's top running inside Visual Studio. Uhm... yeah... I can hardly contain myself right now ...
Available since VS 2017. Savage feature
In VS2017 in the solution explorer there's an icon with 2 arrows that does this. Not a shortcut but still nice.
Ctrl + , opens the navigate to. In VS 2017 it's pretty nice.
Ahh, I stand corrected.
&gt; Shift + Alt + L Ctrl+Alt+L is vanilla VS, and selecting the current file only works if "Track Active Item in Solution Explorer" is checked in the Projects and Solutions -&gt; General options.
I'd hope this is more common knowledge, but I often surprise people when doing it. You can put breakpoints almost anywhere inside lambdas and LINQ statements, even single line expressions. Click inside the lambda, for example, and press F9. BONUS: Function breakpoints are underused in managed code debugging it seems. Just press Ctrl-B and enter a function name, even if it is in 3rd party code. VS will resolve it (resolving multiple matches if needed) and put a breakpoint at the beginning of the method. Works best when you have symbols set up.
This is **absolutely not** a case for valid exception handling. There is simply no excuse to catch a `NullReferenceException`, unless it's a bug **within** a third-party library. This is not the case here. A `NullReferenceException` is a **mistake by the developer**. It means you accessed a reference to an object that does not exist. The solution is simple: Don't access a null reference. First check if the reference is null. You are trying to work around the case that you don't seem to understand when your code is actually called. The term "probably" that you used has nothing to do in the code. **Verify** if it's the case, understand **why** it's the case. Then you can take measures to **prevent** the case in the first place. Visual Studio comes with plenty of features to help with this, mainly breakpoints and the stacktrace.
Before I go on my rant, I wanted to let you know I appreciate your input. Just by reading your comment I've worked out what's happening and I'll address it in the rant below. I also wanted to make an observation, possibly, for your benefit and that observation is that your tone is impatient and, to a degree, combative. This makes it very difficult to not get pissed off when reading your comment and as a result, the tone of my rant below is also fairly impatient and combative as well. --- The case is that I added a CheckBox to my xaml and I want the user to be able to check/uncheck it at their leisure and doing so should set values for certain fields. To that end I created an event handler for CheckBox.Checked so that it does the things I need it to do when it gets Checked. How is it my mistake that this code is being executed before the objects are initialized? public ManageCampaigns() { InitializeComponent(); } &gt; You are trying to work around the case that you don't seem to understand when your code is actually called. I get that but any logical person would set `IsChecked="True"` in their XAML the same as I did since the default state of the control is that it should be checked. Doing this just makes sense. What **doesn't** make sense is that this causes this particular event handler (which you wrote to allow users to interact with the control *AFTER* it has been initialized) is executed *BEFORE* initialization is completed. It's counter intuitive... It's saying "here do this stuff with these things" and you haven't provided anything to do the stuff with.
Ctrl + - and Ctrl + Shift + - let you navigate back and forth along the history of the file/lines you've recently visited. So when you go to definition 4 deep to see how something is done, then switch to a new file, you can Ctrl + - to flip back to what you found without searching for it all over again.
Looks like you're picking it all up fast! To automatically dispose of the connection you can use something like [This](https://pastebin.com/MKrsS6XJ) It will dispose of the connection and the adaptor automatically. 
Out of interest I'd suggest looking at the generated code files (under obj after a build). It almost sounds like the event handler is being bound before the property is initialized which would be unusual (though admittedly I've hardly used XAML). https://stackoverflow.com/questions/2980742/how-do-xaml-files-associate-with-cs-files
Removed: Rule 6.
Removed: Rule 7, spam.
Thanks! It looks like the shortcut is actually Ctrl + [, S
&gt; This makes it very difficult to not get pissed off when reading your comment and as a result, the tone of my rant below is also fairly impatient and combative as well. Nah, this is solely on you. You always tend to blame everyone else for your mistakes.
I'm not looking into whether the catch is right or wrong (as AngularBeginner does) but only what should be inside the catch block! You should *probably* output the exception via `Console.WriteLine` (always, visible to the end user) or `Debug.Print`. (visible in the debugger, just for the developer) (IMHO, just ignoring the exception is usually bad, as you may omit errors you weren't expecting). I'd prefer `Debug.Print` as it can be piped into a file in which you can look if something wrong happened but doesn't output the information elsewhere :-)
Ctrl+/ if using ReSharper. It toggles back and forth.
Actually its a well-known phenomenon where inter-personal communications is concerned. Its why its incredibly difficult to stay calm when you're having argument with your spouse who is livid at you. The stimulus (being the other person) evokes an unconscious emotional response. Also please note I blamed nothing for my mistake. I never said its your fault, merely that the way it appears to work is counter intuitive. **EDIT**: Incidentally, relying on precedent or assumption to make judgments about a person's behavior and/or state of mind also tends to piss people off.
Just learned it and already used it few times today. Thank you mate! 
&gt; It almost sounds like the event handler is being bound before the property is initialized which would be unusual You're almost right. The checkbox comes before the textboxes in the xaml so the checkbox is being initialized and its event handler is being bound before the textboxes are being initialized. The event handler is executing prematurely, I guess, because I've set `IsChecked="True"` on it so that causes the event handler to fire when it sets checks itself on initialization. That's my take on it anyway, so the event handler uses the textboxes which at this time haven't been initialized and thats why the error... As a solution, I'll just refactor it a little so that the IsChecked="True" assignment is done in the Constructor after `InitializeComponent()`. I'll then remove the assignment from the XAML...
I didn't know this, but for the past six years or so I've been using Ditto to keep a clipboard buffer at the OS level. Probably the utility I use most ubiquitously.
Actually check this out: https://stackoverflow.com/questions/1301119/silverlight-xaml-attribute-definition-order-matters If I read that correctly you should be able to set the IsChecked="True" attribute before the Checked="chkUseSettings_Checked" and you should be sweet.
Questionably off-topic. But it has been a major QoL improvement for me using another console application program than cmd.exe when debugging my own console applications. The accepted answer here describes how to use conEmu (also Cmder) as a replacement for cmd.exe: https://stackoverflow.com/questions/12602411/use-custom-console-for-visual-studio-console-application-debugging
This is correct. I found a similar question on Stack yesterday. Thank you!
And if you're using earlier versions of VS, there's the [ReAttach extension](https://marketplace.visualstudio.com/items?itemName=ErlandR.ReAttach) which works really well.
How??
Paste special --&gt; Paste JSON as classes The same can be done for XML
When debugging you can drag the yellow arrow up or down to skip lines or go back in the code.
Anyone knows if/how the terminal window font can be configured? It looks terrible for me http://imgur.com/a/3P6p8
You mean like this: &lt;CheckBox Grid.Row="8" Grid.Column="1" Name="chkUseSettings" Content="Use Global SMTP Settings? (Default: Yes)" IsChecked="True" Checked="chkUseSettings_Checked" Unchecked="chkUseSettings_Unchecked" /&gt; It's not worked as expected. The problem still exists.
Could you get a little more specific? I can't find that icon.
Yeah, common sense says that should work. And it still doesn't, even if you do a clean and rebuild?
Whoa... turning that option on and the file is always highlighted in Solution Explorer as you click around different tabs? Why on earth is this not a default-on option?
&gt;I also wanted to make an observation, possibly, for your benefit and that observation is that your tone is impatient and, to a degree, combative. This makes it very difficult to not get pissed off when reading your comment and as a result, the tone of my rant below is also fairly impatient and combative as well. I think you're projecting your cultural bias onto his comment. It is blunt and to the point, explaining what mistakes you've made and how to approach solving the issue. Unless you strongly feel `NullReferenceException` isn't user error, I can't see how it could be considered combative. As for impatient? Well, you're asking for unpaid help, I don't think you can expect people to spend time padding their comments out with platitudes. *** As to your problem. Now that you know it's possible for events to fire early, it may be a good idea to have your base event do some sanity checking before it fires. I wouldn't assume you'll be able to ensure things are initialised before events fire, so perhaps rework things to cope. Edit: You could probably stick some logging in there too, make it easier to catch next time?
Thank you very much. I've been running this code, or a slightly slightly tweaked version of it https://github.com/denxc/ZBase32Encoder/blob/master/ZBase32Encoder/ZBase32Encoder/ZBase32Encoder.cs (since yesterday) I'm going to take a look at your implementation and try it out later today, but I would like to ask if you are aware of any more advantage to the crockford base32 implementation over the zbase32 implementation? Thanks again! Edit: looking at wikipedia I see snippet "Crockford's Base32[edit] Another alternative design for Base32 is created by Douglas Crockford, who proposes using additional characters for a checksum.[6] It excludes the letters I, L, and O to avoid confusion with digits. It also excludes the letter U to reduce the likelihood of accidental obscenity. Libraries to encode binary data in Crockford's Base32 are available in a variety of languages." https://en.wikipedia.org/wiki/Base32 One thing I don't understand from the table in wikipedia page, it appears to mix upper and lower case chars, but if I understand correctly the output is all case agnostic, correct? Do you see any obvious way in your code to enable the characters I, L, O and especially U ( a little accidental obscenity sounds great to me! )? I'd like the most compact output and don't care about human typo's. Thanks again!!!
Good tip, no idea why I didn't think of that (: Thanks
I remember creating this one way back to achieve better hashing of objects without boxing/unboxing: [HashHelper.cs](https://github.com/NimaAra/Easy.Common/blob/master/Easy.Common/HashHelper.cs) which you can use like so: `var person = new Person(); HashHelper.GetHashCode(person.Name, person.Age); `
https://social.msdn.microsoft.com/Forums/getfile/1029698 Edit: sry, misclicked. Sixth from the right. One arrow in each direction above each other. VS 2017 only, won't find it in older editions
So I have to ask: why? What problem is this solving? In what circumstance is this superior to just having a terminal window open outside of visual studio?
- you can use ctrl+x with nothing selected to cut the line the cursor is on, and then use ctrl+v to paste the cut line where the cursor is by pushing text down. - ctrl+shift+up/down while the cursor is on the name of a method or variable will take you to the previous/next usage of it.
Easily swapping to terminal and back to coding? I honestly have no idea
The convenience of having everything in one application. People like it for VS Code as well. Plus it automatically opens in whatever folder you have selected in the solution explorer.
The back and forward buttons on your mouse will do that too if you have a fancy mouse. 
Type Patterns. No more casting objects and then checking for null on the next line. Old version is first, new version is second. Grid grid = obj as Grid; if (grid != null) { /* do something with grid here */ } if (obj is Grid grid) { /* do something with grid*/ } See Microsoft docs: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/is
You have the nuget window for a console
Also Shift + Ctrl + Alt + arrow lets you move around lines of code, functions, classes and even parameters inside parentheses.
I can't tell if your genuine or sarcastic... 
Have you checked what specific variable in your code is null? Catching a NullReferenceException is not the best way to handle this. Exceptions are for catching exceptional scenarios and providing stack information as to how you got to that exceptional scenario. Checking to see if a variable is null is how you should handle this scenario. Is it txtSMTPPort/Server/User or is it the Properties? Either way, do a null check and be done with it. You could also see what object (sender) has initiated the method.
Awesome!
Also handy for abbreviating ugly generics: ``` using IEmployeeSqlWriter = IWriterFor&lt;ICollection&lt;RecordFor&lt;Employee&gt;&gt;, DbSource&lt;SqlSource&gt;&gt;; ```
To add 4 more characters you'd be trying to use base 36, which would require different encoding and decoding logic. Crockford just chose a slightly different set of 32 characters for base 32 (and removes padding, provided for the optional checksum). You can see in the code I provided it's pretty easy to use any character set you like.. Of 32 characters. 36 is a whole different deal.
That's not a full console.
Nice top there.
I probably won't use it, but if other people will and they find it useful that's great :)
This is really cool. A bit over my head and outside the scope of my needs, but it's impressive work.
Yeah. But what am I missing? What do you do there?
I've been using resharper for years and have just moved somewhere unwilling to get me a licence. This is the feature I miss most, you have just made my day!
If you have a completely steady hand, yes. It's pretty annoying to make it 2/3 of the way down a block and slip a character to the side.
The problem is, as usual: from the code you gave, OP can't possibly know about the rest of your context.
The terminal, on the other hand, is now fully contained.
 Oh, also, the mixing of upper and lower case is just on the input - it will accept either. The version I posted outputs in all lowercase (whereas the table on the page I linked to suggests outputting in all uppercase).
Just drag the mouse one column back? 
Thanks for that, I've been looking at your code. Nice stuff. Did some googling and it seems base36 is generally used only in the sense of numeric encoding. To bad, would be ideal for my use case, I might try to get fancy but it looks mighty difficult to do!