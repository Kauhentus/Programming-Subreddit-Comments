Sir, this approach is perfect for handling clients like devices because they send their Heartbeat after every x seconds or minutes. I was working with Smart Meters few months ago, for reading an Energy Parameter we need to keep connected with the client and same is the case with TCP Tracker devices. Obviously, We could have a better solution for chat server.
No one tutorial will do it, and even a collection won't cover it all. Go hit the Smamazons and get a, relatively recently published, and well reviewed book on C#. Structured learning is best learning.
Resources like Pluralsight (Pluralsight.com) are invaluable for learning the language itself and also how to use it in 'real world' applications. It will take a multitude of resources to give you a rounded education, but most importantly, never stop learning :)
Usually you don't want any heavy code in constructor. Put it into Window.Loaded event and make nice ui with loader.
https://youtu.be/sQurwqK0JNE Very first video I ever watched right there. I still go back an watch it just to see how far I’ve come. In the beginning of my journey a lot of it didn’t stick in my brain so it’s nice to go back and think to myself “ahh yeah that makes more sense now”
There's a Fundamentals for Absolute Beginners link in the sidebar, along with several other getting started links.
Thank you. Nice to know that constructor should not be code heavy
Brackeys C# Tutorials. Thats with what i started.
Well, that's the point of operator overloading.
Can you do it? Yes (reflection, expressions, etc.). Should you? No :) Please consider how much time you'd be actually saving - you have two methods, i.e. two lines of code (3 arguments each) - and how much your code would be harder to read/maintain...
one important thing that people often forget: have a goal. just learning a language without having a project to actually use it on is kinda pointless
I guessed as such. :) I wanted to save myself some very generic code in the `Move()` method, though. Thanks anyway. :)
This is a pretty thorough discussion. Rather than nitpicking, I'm curious about this part that struck me as odd: &gt; What C# actually lacks is a fault block which is activated whenever an error occurs. It’s like finally on steroids. If we had this, we could, for example, create a single entry point to log exceptional situations: How is `catch (Exception ex)` not a fault block? The `throw` keyword requires the thrown object to derive from `System.Exception`, so in general this is going to behave like you described. (There are a handful of exceptions that indicate the CLR might be destabilized you *can't* catch, but if they happen it's not safe to log or do anything else anyway.)
I have a really good one for you. Let me find it.
Just an FYI: I'm not the author of this article.
DAE thing a post with "Can you see the invisible thing?" was going to be a joke?
If you sign up to Microsoft Dev Essentials (even on the free tier) you can get the free Pluralsight trial extended to [at least a month](https://docs.microsoft.com/en-gb/visualstudio/subscriptions/vs-pluralsight). If you put in the time you could get through a lot of their C# material in that period, and a lot of it is extremely worthwhile.
Oops.
I'm going to have to respectfully disagree. There is no reason to block threads. Asynchronous operations are there for a reason. Unless said device doesn't support the asynchronous approach, it is a waste of resources. Even if a heartbeat is sent every x seconds, that x seconds that the other threads could be better utilized.
Lol this is the one I was looking for and linked below too
I haven't used it yet but Microsoft was pushing their Learn platform pretty hard. I took a quick tour on the show floor and it looked pretty good. Certainly a good place to start. https://docs.microsoft.com/en-us/learn/
You could use some sort of interception library, there are a few about. It would probably have been quicker to just write the methods though :)
Actually no, the `SendAsync` Method from Sockets with the `SocketAsyncEventArgs` argument does not return a `Task` but a boolean wheter the call finished synchoneously. In case it did not, the `SocketAsyncEventArgs.Completed` will be raised when it's done.
 class Program { [DllImport("user32.dll", SetLastError = true)] static extern bool MoveWindow(IntPtr wnd, int x, int y, int width, int height, bool repaint); static void Main(string[] args) { StartAtPos(@"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe", -300, 400, 500, 500); } private static void StartAtPos(string path, int x, int y, int width, int height) { Process proc = Process.Start(path); Console.WriteLine("Waiting for window handle"); while (proc.MainWindowHandle == IntPtr.Zero) //Wait to get the window handle of the window Thread.Sleep(250); Console.WriteLine("Found window handle"); if (!MoveWindow(proc.MainWindowHandle, x, y, width, height, true)) { throw new Win32Exception(); } } }
Part of the \`SocketAsyncEventArgs\` is a handler for the return if it was handled asynchronously. You'll need to provide that. Also, as best as I understand why this is necessary is with how Windows treats asynchronous completion ports when it comes to socket-based operations.
Why not use an interface, so you can override the methods as necessary for a specific implementation? In your case, I would just pass a `new Vector3()` with your parameters instead of defining a new method that just takes the`x, y, z` values, since you're just using that to pass the values to the `Move(Vector3 movement)` method anyway. public interface IMovement { void Run() {} void Walk() {} } public class Actor : Monobehavior, IMovement { private float runSpeed = 10f; private float walkSpeed = 5f; private float airSpeed = 5f; public void Run() { Move(new Vector3(runSpeed, 0f, 0f)); } public void Walk() { Move(new Vector3(walkSpeed, 0f, 0f)); } public void Move(Vector3 movement) { this.transform.position = //... } } I find it easier to use an interface to describe the behavior I want to do, then implement the specifics in a class that implements the interface. Keeps things general and able to be changed easily.
you can have a "Movement" delegate which always has the same parameters, then if the user chooses running, you set MovementDelegate = Running;
Peegnant
What are you trying to solve? Are you trying to prevent having to specify the movement speed? If so, just model the speeds as public static readonly properties somewhere. For example: public static class Speed { public static readonly float Normal { get; } = 1.0f; // or whatever value works for you public static readonly float Running { get; } = 6.0f; // same as comment above } Then, you can call the Move() method like this: Move(2f, 8f, Speed.Normal); There are better ways to handle this, I would think. When I've made games, I didn't handle movement speed like that. Whether or not the character was walking or running was based on the *state* they were in where movement speed was calculated based on whether or not the user was holding the shift key plus any other active effects. My move methods would be expect normalized unit vectors that *only describe movement direction* (i.e a heading). How far they moved and at what rate was calculated based on the heading multiplied by the speed and then modified by active effects. Those calculations were also multipled by the game loop's delta (how much time has passed since the last time the method was called), though this would only be applicable to games that are using game loops (most do).
r/learncsharp
I’ve read that most employers don’t care if you have these exams. I’ve never seen one asked for in a job application but it’s been about 3 years since I was going through job apps.
If you need something that can send and receive messages, i have a great class that can do it for you. I didnt fully make it but i've slightly modified it to make it better: [https://pastebin.com/WYNeAR8X](https://pastebin.com/WYNeAR8X) I dont think this guy made the class (he prob did) but this is how to code it into a program (using console): [https://www.youtube.com/watch?v=YpHzenGcdh4](https://www.youtube.com/watch?v=YpHzenGcdh4) If you wanna code it into a GUI, use the code from this video: [https://www.youtube.com/watch?v=nCPKqtk4nqE](https://www.youtube.com/watch?v=nCPKqtk4nqE)
Gotcha, good to know. Do you know if the content itself is relevant to the way we do say to say coding? Or would it be useful to go thru this to improve c# in general?
Communicating with Redis is usually a millisecond operation if it's hosted in the same datacenter as your application. Unless you've actually done the performance analysis and determined that redis is a bottleneck, I don't see why that can't be explored. "We're microservices" isn't really an argument against Redis; any service of significance needs to hit a data store. All you'd be doing is increasing your inbound outbound traffic by refusing to use it.
I'm going to recommend grabbing a book, or pdf and spending a few weeks getting comfortable with the basics. The Yellow Book is a good free PDF, it's short and simple to get through in a weekend potentially. I'd recommend HeadFirst or MS Visual C# an intro to OOP by Farrell to really learn enough to confidently build basic programs. They provide a good intro level understanding and leaves you ready for more Intermediate/advanced learning. Probably find them on sale on Amazon or Ebay these days.
I'm trying to simplify my "actor" model slightly, because I have some redundant code in there at the moment. For example, I have a `ActorMovementController` which can be used by both PCs and NPCs. I would prefer to inject as much data as possible into these actors, instead of them trying to find out anything themselves.
[pluralsight.com](https://pluralsight.com) has a path in mastering C#. Try it
Ah Bob Tabor. I still listen to his tutorials from time to time. Very pleasant guy who takes time to explain those small details many miss. Highly recommend his tutorials on C#.
I would take the exam, not necessarily for it to look good on your resume, but to prove yourself that you understand the material. Believe me, that confidence will go a long way once you are out in the wild looking for something to eat. ;)
There are two cases where they are helpful. 1. You are just starting, and don’t have a CS degree. 2. The employer need Microsoft points. Any test you complete adds to their points, which helps them get the “Microsoft Certified Partner” status. Generally tho, you do learn a lot from studying for the cert.
I did the exam and I think most of the stuff is still relevant :). A lot of new C# features are syntactic sugar or things you don't use often. Tip, use www.itexams.com to do some practice exams online; they are pretty representative and work well.
That json looks unwieldly, like an unholy mess. What is it even trying to represent? If you're looking for a way to do dynamic json parsing without having to try to make sense of that nightmare, you can use JSON.NET and use JToken, JObject, and JArray parsing. That'll be closer to what you're familiar with
Because [`Socket.SendAsync`](https://docs.microsoft.com/en-us/dotnet/api/system.net.sockets.socket.sendasync) does not return a `Task`, you have to do a little extra work to make your method a standard awaitable async method. `Socket.SendAsync` uses events to signal when it is completed. Converting events and callbacks to `Task` can be done using a [`TaskCompletionSource`](https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.taskcompletionsource-1) Your method would look like this: ```csharp public Task SendDataAsync(string command) { var socketAsyncEventArgs = new SocketAsyncEventArgs(); var buffer = Encoding.UTF8.GetBytes(command); socketAsyncEventArgs.SetBuffer(buffer, 0, buffer.Length); var tcs = new TaskCompletionSource&lt;object&gt;(); socketAsyncEventArgs.Completed += _ =&gt; tcs.TrySetResult(null); if(!_tcp.Client.SendAsync(socketAsyncEventArgs)) { // Operation completed synchronously. // tcs.Task will never complete because the event will never be triggered. return Task.CompletedTask; } else { // Operation is pending. // tcs.Task will complete once the event is triggered. return tcs.Task; } } ```
Kidvenkat videos are good, https://www.youtube.com/user/kudvenkat
You can learn a lot preparing for them but the certs themselves are a waste of money in my opinion. That 300 or so dollars would be much better spent on a year of pluralsight membership, much more potential for learning there.
docs.microsoft.com
In trying to simplify it I may have made it uglier than it is in real life, but it's essentially representation of a game deck and the cards the deck is comprised of. I'm going to do some more digging into JSON.NET.
I have to agree with da-3vil-coder; it would benefit you a lot to not block threads. You say that you send a heartbeat anywhere from ever few seconds to every few minutes, think of all the wasted time that those threads could have been doing work. And, to make matters worse, you're putting an unnecessary load on the system by continuing to make more threads. AND, you're spinning up your own threads instead of using the thread pool. Remember, every thread takes, at minimum, 1mb of ram. Not sure how many devices you're connected to, but that's a lot of blocked threads and wasted ram. Also to consider, is the thread scheduler' s fairness algorithm. When one of these threads actually does wake, now they will get highest priority due to being in a non-runnable state for so long. This could preempt other, potentially more important, work going on with your server. I would really suggest that you take the time to re-work your code.
[https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/params](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/params) Just because you can doesn't mean you should, though.
Thanks for the clarification
I love learn from books so i would like to recommend The C# Player's Guide. It's amazing, "fast-pacing", do teach from the basics to "advanced" and have exercises to keep practicing. Try [exercism.io](https://exercism.io) too it's a great site with mentors to help you out, giving amazing tips on how to code better =) .
Nobody has ever looked at my certs or my even my degree. Some guys were doing this cert at another place. It seems to require a lot of memorisation.
I can't believe nobody's addressed this, but what do you mean by "learn c#"? Have you never programmed at all? Are you an experienced python or javascript developer? Someone who knows Java and just needs to be filled in on the differences with C#?
Try doing a sanity check. Log out to the console to see if it's not null: `Debug.Log("scoreText null? " + (scoreText == null));`
Should. IL is the same, runtime differs.
```csharp public void Run( (float x, float y, float z) parm1) { Move(parm1, 6.0f); } public void Walk( (float x, float y, float z) parm1) { Move(parm1, 1.0f); } ``` Now you can just feed your values in the implied tuple. All you need are a pair of parenthesis.
Help us out. What are your interests? What would you like to be able to do? My advice: find a project that excites you to work on, and get started. &amp;#x200B; If you have no idea: [Here's some ideas to get started](https://www.makeuseof.com/tag/beginner-programming-projects/) in general. &amp;#x200B; Some ideas that might introduce you to other cool concepts: * [Create an address book on the command line](http://www.jeremyshanks.com/simple-address-book/) * [Build a webapp with AspCore](https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-mvc-app/start-mvc?view=aspnetcore-2.2&amp;tabs=visual-studio) * [Build a game with monogame](https://www.reddit.com/r/monogame/comments/63dr95/getting_started_with_monogame_using_2d/) * Automate stuff: [Create a command line tool](https://docs.microsoft.com/en-us/dotnet/core/tutorials/using-with-xplat-cli) * [Build a GUI with WPF](https://www.youtube.com/watch?v=krxYDsee2cQ) * [Machine learning with ML.Net](https://www.wintellect.com/machine-learning-c-introduction-ml-net/) * [Create an Amazon Alexa skill in C#](http://matthiasshapiro.com/DisneyShorts/alexa-audio-skill-in-c-net-core) * [Create a cross platform app in Xamarin](https://www.intertech.com/Blog/xamarin-tutorial-part-1-create-a-blank-app/) &amp;#x200B; Be sure to check out [NuGet](https://www.nuget.org/), it's where everybody gets their plugins and stuff to do the actually complicated stuff.
Personally, it's like a decade old now but the book *Head First C#* was still great for me. Personally, I also feel like I learn the most by just diving in and doing stuff and that book gave me a good launching point to work on my own things, but it was a good start. As mentioned in other, similar threads, most of the "newer" (this came out around C# 3 I think so there are 2ish versions since then) bits of C# are flavor and enhancements and things you can learn once you've got the syntax down and grokked OOP and the like.
So I got a little further, thanks to your advice. I have a bomb prefab that spawns a clone from set spawn points. I have the UI element(Score Text) attached to the GameController, but nothing attached to the bombs(Pic: [http://prntscr.com/nxki32](http://prntscr.com/nxki32)). In Play mode, if I attach the UI element to the bomb, the score goes up when it's clicked on. However, when I'm not in play mode, I can't attach anything to the "Score Text" on the bomb prefab. I just get a little "blocked" symbol. Any ideas on why I can't attach it?
I doubt that it'll work, but have you tried those: #nullable enable #nullable disable
You could also have a struct just for this. Something like public struct MoveArgs { public Vector3 direction; public float speed; } public void Run(MoveArgs args) { args.speed = runningSpeed; Move(args); } public void Move(MoveArgs args) { // ... }
Nope, the older compilers won't have a clue as to what you are talking about.
Use System.Pipelines if anybody here is serious. The article is really bad, to be honest. https://github.com/davidfowl/TcpEcho
That doesn't solve the underlying problem. And, I'm actually using structs for this, as I send data to an authoritative server as well. My code was just a very simplified example of what I was hoping to achieve.
I did try but no. Even if the did wouldn't the compiler still have to accept the syntax? As in \#nullable disable string? foo( ) \#nullable enable would still fail to compile on C# 7.2. My understanding from here [https://docs.microsoft.com/en-us/dotnet/csharp/nullable-references](https://docs.microsoft.com/en-us/dotnet/csharp/nullable-references) is that #nullable is about switching on and off nullablity checking not whether the syntax is accepted.
Thank you for not being like StackOverflow.
This is incorrect. A TcpClient is being used, but note this is using the underlying `Socket` instance. `Socket.SendAsync()` is NOT a Task-based async method. It uses a weird variant of the Event-Based Asynchronous Pattern.
The code above is wrong, but it's going to be hard to help you until we clarify something. The code in question is using a `TcpClient`, but also using an advanced feature of it that lets you use the raw `Socket` that `TcpClient` usually abstracts. `Socket` is a much lower-level class that uses older .NET Asynchronous patterns, and `async/await` don't work with those. Are you intending to use `TcpClient`, or are you intending to use `Socket`? There are three different patterns, and which ones you need to know about depend on what you're trying to do. I don't have time to teach all three, so it'd be nice to know which one you want ;)
Do you have any kind of programing experience?
If you're programming for the web you absolutely have to know javascript.
You should read about the MVVM pattern because it's the reference pattern in Xamarin Forms. And it's better to understand it before choose any MVVM framework like Prism, MvvmLight.... But remember it's not required use one of them.
I was obviously joking, but thanks for the "well akshually" explanation
I think I'd rather go with newer async / await :) What's the difference between await and event-based pattern? Is it like one usage is (simple) `await Receive()` and the other one raises event when data is received? If so, then await would be more preferred for my needs, am I right? And the last question - `SocketAsyncEventArgs` is that event pattern or is it something completely different too? I know, lots of questions :D
I've been doing some Treehouse courses to learn how to learn the syntax of c#, as I'm familiar with Java which has a similar structure. Once I've gotten that down, I am going to start with a simple console rock paper scissors program, then move up to a program utilizing API. Short answer, I would start with some video tutorials (ex. Treehouse, Pluralsight, YouTube) then once you are comfortable with messing around, think of a small project to practice with, like the rock paper scissors program. Once that is done, think of another project that adds 1 concept you are unfamiliar with, such as an API. Hope this helps!
Thanks for your help but I'd rather made it my myself. It will help me to more understand asynchronous programming when I'll know what that code does and why it works
He said he's just opened Visual Studio half an hour ago, absolute beginner is heavily implied.
[i had the same question and decided not to do it. ](https://www.reddit.com/r/csharp/comments/b7g47j/70483_worth_it_as_student_if/?utm_source=share&amp;utm_medium=ios_app&amp;utm_name=ios_share_flow_optimization&amp;utm_term=control_2)
Your null reference error is on a line where you are trying to set a property of the scoreText field of the GameController class. This strongly suggests that the scoreText field is null when this happens. The scoreText field is not assigned in the code you show. Since it is a public field of Unity's Text type, you presumably mean it to be linked in the editor to the Text component of another GameObject. My guess would be that you have not done so :)
I second Bob Tabor. Great teacher.
Would a dictionary fit the data? &lt;Dictionary&lt;string,Dictionary&lt;string,List&lt;string&gt;&gt;&gt; I tried using Paste Json as Classes in VS and it seems like the data isn't very consistent. (Try with a real sample of your data VS: Edit Menu, Paste-Special JSON as classes) public class Rootobject { public Key1 key1 { get; set; } public Key2 key2 { get; set; } } public class Key1 { public string key1_1 { get; set; } public int key1_2 { get; set; } public Key1_3 key1_3 { get; set; } public Key1_4 key1_4 { get; set; } } public class Key1_3 { public object[] key1_3_1 { get; set; } public object[] key1_3_2 { get; set; } } public class Key1_4 { public string[] key1_4_1 { get; set; } public string[] key1_5 { get; set; } } public class Key2 { public Key2_1[] key2_1 { get; set; } public Key2_2[] key2_2 { get; set; } } public class Key2_1 { public string key2_1_1_1 { get; set; } public string key2_1_1_2 { get; set; } public string key2_1_1_3 { get; set; } public string key2_1_2_1 { get; set; } public string key2_1_2_2 { get; set; } public string key2_1_2_3 { get; set; } } public class Key2_2 { public string key_2_2_1 { get; set; } public string key_2_2_2 { get; set; } public string key_2_2_3 { get; set; } public string key_2_2_4 { get; set; } public string key_2_2_5 { get; set; } public string key_2_2_6 { get; set; } public string key_2_2_7 { get; set; } public int key_2_2_8 { get; set; } }
Something no one else has mentioned that you should know about is that Microsoft partner network membership requires having multiple certified engineers. For instance, the Application Development competency require for Silver membership requires having two individuals pass 70-480, 70-483 or 70-486 if your organization is going for the Web and Mobile Client App Dev focus. In this case 70-483 have some value for a small software business. Gold certification would require having 4 MCSD's. I'm not certain but I assume 70-483 would contribute towards achieving the MCSD? However, it's also worth noting that many business will compensate you for taking these tests and getting these certifications. In rare cases it might help you to get in the door but not universally. As someone who hires software developers and as someone who has multiple certifications I know these tests don't mean much, they're basically a memory test as much as anything which is why I'm not overly impressed. However, they do have some value as I gotta keep at least a few guys around with them to maintain partner status.
How is it thorough when it only mentions two approaches?
I agree OP should find a better solution, but this can be done with the `params` keyword. I'm surprised it hasn't been mentioned yet.
This persons youtube channel is great, it starts at the nuts and bolts level, not making assumptions of what you know and also covers the NUTS and Bolts like Kestral and Inprocess for Core MVC for example when some materials just glaze over that in some cases because you don't "HAVE TO KNOW UNDERSTAND IT , to make an app show up" &amp;#x200B; Kudvenkat [https://www.youtube.com/channel/UCCTVrRB5KpIiK6V2GGVsR1Q](https://www.youtube.com/channel/UCCTVrRB5KpIiK6V2GGVsR1Q)
Have you just tried letting visual studio build the class for you like [this](https://www.c-sharpcorner.com/article/how-to-paste-json-as-classes-or-xml-as-classes-in-visual-stu/)?
As a hiring manager, I don't care about these exams. I'll hire a really good Java dev over a mediocre c# dev, and turn them into a C# dev (as long as they have the desire to take their career that direction). I don't think programming languages are much of a barrier in hiring programmers, it's all the other knowledge/experience...
I'm not sure that's a great thing to tell someone. You should always heed criticism. Even if it seems negative, I've learned a good bit from people that are simply bad at conveying information without sounding like an asshole.
RemindMe! 7 hours
I didn't grasp from the post, did you try p/invoke?
I will be messaging you on [**2019-06-05 02:49:04 UTC**](http://www.wolframalpha.com/input/?i=2019-06-05 02:49:04 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/csharp/comments/bwox67/im_looking_to_learn_c_can_anyone_reccomend_a_good/eq03gve/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/csharp/comments/bwox67/im_looking_to_learn_c_can_anyone_reccomend_a_good/eq03gve/]%0A%0ARemindMe! 7 hours) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! eq03qvr) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
When I opened Visual Studio for the first time I'd been programming for a decade...
His videos are _the best_, seriously he goes over everything and explains it in depth including all the why's and how's. Everything just makes so much sense when you understand the big picture
Because it says "1 of 4" and I felt it covered its subheadings well. I could change my mind if the next 3 don't go into so much detail, or miss covering something I think they should've.
Have you tried just using the NuGet Package? &amp;#x200B; [https://www.nuget.org/packages/Tesseract](https://www.nuget.org/packages/Tesseract)
Nah I never listen to sarcastic pieces of shit, it will just make you feel sad in life. Learn from positive people instead they usually are much more wiser :)
Build up your string. Send it to tinyurl.com as http://foo.com?args=1,2,3, get back the short link, pass that around, decode by invoking webrequest and looking at the redirect. Or... Look at how url shorteners work maybe
Why don't you use [JSON.Net](https://JSON.Net)? Also, [http://jsonviewer.stack.hu/](http://jsonviewer.stack.hu/) to read the unholy mess.
to what i know, the program basically creates an infinite while loop in another thread (to stop the UI from freezing) and constantly reads from the TCP buffer (as given by this: while (client.client.Connected) { int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length); //constantly is reading from the stream ms.Write(buffer, 0, bytesRead); //writen the contents of buffer to a memory stream to make getting the data easier afaik }
Depends on what APIs it using. Generally you want to target netstandard 3rd party components as they can support both Core 3.0 and Framework 4+.
Why exactly do you care? If you're making new databases they should start at 1, not so? Anyway the identity doesn't really matter, unless you're burning up 1 billion IDs and using half the int range
Here's a crash course in tasks, async/await, and how you might use them with TcpClient. Don't use the `Client` property. That is for advanced scenarios where you need very low-level control. You probably don't. Just forget it's there. Normally, what you will use are: * `ConnectAsync()` * `Close()` or `Dispose()` * `GetStream()` * `ReadAsync()` * `WriteAsync()` There are two kinds of tasks. One does a thing and finishes without returning a value. The other does a thing and returns a value. `Task` is the one that doesn't return a value, and `Task&lt;T&gt;` is the one that does. The main difference is `Task&lt;T&gt;` has a `Result` property, but if you're using `await` you shouldn't think about that property. The first rule for using `await` is the method using it MUST have the `async` keyword. It should also return something, and there are 4 rules: * If it is an event handler, it needs to be `async void MethodNameAsync()`. This is the ONLY time you should use `async void`. * If it doesn't return a value, it needs to be `async Task MethodNameAsync()`. DO NOT use `async void`. * If it returns a value, it needs to be `async Task&lt;T&gt; MethodNameAsync()`. * You don't have to put "Async" in the method name, but if you don't it's rude. What `await` does is funky. It's like it cuts your method into pieces. The parts before `await` run as normal. When the `await` happens, it calls the method, stores the task that's returned, and your method stops. Now the UI thread is free to do whatever. When the task completes, the rest of the method runs. To illustrate: public async Task DoSomethingAsync() { // We are on the UI thread. Let's call this t=0. // Right here, the method stops. Let's call this t=1. await Task.Delay(10000); // Now it is 10 seconds later, t=11. The UI thread didn't hang, // but we still did 10 seconds of "work". We are on the UI thread again. } Exception handling is easy with `await`. If the thing you're awaiting finished because it threw an exception, that exception gets thrown where your `await` happened. public async Task DoSomethingAsync() { try { await Task.Run(() =&gt; throw new InvalidOperationException); } catch (Exception ex) { // Still the UI thread, but something went wrong. MessageBox.Show("Oh no!"); } } The last part to think about is what to do with a `Task&lt;T&gt;`. It returns whatever `T` is. When it's complete, that value will be in the `Result` property. But if you're using `await`, you shouldn't look at that property. Whatever the result was should be returned just as if it were synchronous. public async Task UpdateTimeAsync() { try { DateTime newTime = await _someTimeService.GetTimeAsync(); // We're on the UI thread, everything went well. CurrentTime = newTime; } catch (Exception ex) { // We're on the UI thread, but something went wrong. MessageBox.Show("Oh no!"); } } There's a bit more to learn than that, but this makes you dangerous. Now, back to `TcpClient`. * `ConnectAsync()` returns a Task that is completed when the connection finishes. * `GetStream()` returns a `NetworkStream` that is what you use to send/receive data. It has a lot of interesting members, but what I'll focus on is: * `WriteAsync()` takes the bytes you want to write and returns a Task that is completed when the connection finishes. * `ReadAsync()` is a bit complicated, reading over the network is very protocol-specific. * It receives a buffer, how many bytes you expect to read, and where you want them in the buffer. * It returns a `Task&lt;int&gt;`, the int it returns indicates how many bytes it actually read. * If it didn't return all the bytes you expect, you have to call it again until you get everything. This is a really quick sample of a program that has a button and a text box. When you click the button, it uses a TcpClient to send some bytes to a server. It expects to receive 30 bytes from the server, converts them to a string, then prints them to the text box. All of it is done with `async/await` and shouldn't hang the UI. It's a *start*. // This is the event handler: it has to be async void so it can use await. public async void WhenButtonIsClicked(object sender, EventArgs e) { TcpClient client = null; try { client = await ConnectAsync(); await WriteMessageAsync(client); var response = await ReadMessageAsync(client); txtOutput.Text = response; } catch (Exception ex) { MessageBox.Show("There was a problem."); } finally { client?.Dispose(); } } // Return async Task&lt;TcpClient&gt; since the rest of the methods use it. public async Task&lt;TcpClient&gt; ConnectAsync() { // If something goes wrong, an exception will be thrown and the // caller will handle it! var client = new TcpClient(); // UI thread await client.ConnectAsync({some IP}, {some port}); // Waits, then comes back return client; // UI thread } // No need to return anything. public async Task WriteMessageAsync(TcpClient connectedClient) { byte[] message = // some bytes the server expects // Do not close this stream! That closes the connection. var stream = connectedClient.GetStream(); await stream.WriteAsync(message, 0, message.Length); } // Return the string that has been read. public async Task&lt;string&gt; ReadMessageAsync(TcpClient connectedClient) { byte[] buffer = new byte[30]; int offset = 0; var stream = connectedClient.GetStream(); // Read until 30 bytes have been read. Much more sophisticated versions // exist for more complicated protocols. I didn't test this so it could be // off by 1. while (offset &lt; 30) { int bytesRead = await stream.ReadAsync(buffer, offset, buffer.Length - offset); offset += bytesRead; } // Convert bytes to a string. var result = Encoding.UTF8.GetString(buffer); return result; } Reading is the hard part, it takes either careful thought or finding someone else's protocol code. Note that this isn't the best possible example, but it should help you figure out how a read/write cycle works.
Nope
But you'd probably not ask for help on how to get started after only half an hour, and not mention your decade of experience. Like I said, it's implied.
1. File.ReadAll 2. Your posting tool of choice. Pick one that's async to match your signature. The url will probably be like (host name)/(optional application)/(optional area)/(name of controller cs file, minus "controller")/(method name)
Not convinced that error returns will ever catch on as much as they should in C# as long as the core library lacks a standard way to do it. Newer languages utilise monadic types such as maybe and result to formalise this kind of control, but the closest things to this in C# are less declarative constructs like nullable types and the aforementioned TryParse methods and their bool and out var contract. The problem is that it feels easier to throw and catch using the built-in language features, even though we know it’s not good to use exceptions for flow control.
Am I right in thinking the new directive will make precisely no difference in the case of deserialised types?
Asynchronous programming used to be really difficult. async/await with tasks made it easy. That's about it.
I had tried JSON.NET and ran into some issues, but I've gone back to it and am trying some things now.
I had not, because I didn't know that was a thing it could do. Looks like I have to add some extra libraries to get that to work but it seems straightforward.
The way I learned was by doing projects. And I don't mean copy and paste. I had ideas that I wanted to build and then broke them down into smaller problems and learned how to do those pieces. I turned it into career and I find it to be the best way to learn programing.
That man helped me with my exames 😂
All there is to it. The documentation is just amazing
1. get book 2. finish book 3. apply for job 4. bacon
*Probably*, but it cannot truly be guaranteed at compile time, hence the warning. Also, with .NET Framework in particular, it working with .NET Core on Windows does *not* necessarily mean it working with .NET Core on all platforms.
this man is a true legend...✌🏽
As a beginner C-sharpie I've just started the first few chapters on the PluralSight course, novice level, and with just some Powershell background I enjoy the course. I've previously managed to throw together a webservice that fetches data from a SQL with just googleing but the course is great at explaining the ins and outs. Worth checking it out.
for me, 40 years!
You can't easily pinvoke c++ libraries unless they export vanilla functions using stdcall conventions. If you want to invoke methods on objects, they have to be exposed some other way. The usual way is COM.
If you're new to programming, what you want to learn is about programming. Visual Studio and C# are just tools. It's like learning to paint. Acrylic vs oil, canvas vs wood panel, those are details that don't matter so much. &amp;#x200B; You want to learn about input and output, which for starters can just be Console.Readline and Console.Writeline [https://docs.microsoft.com/en-us/dotnet/api/system.console?view=netframework-4.8](https://docs.microsoft.com/en-us/dotnet/api/system.console?view=netframework-4.8) &amp;#x200B; Then you want to learn about branching and looping: if() and while(). [https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/if-else](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/if-else) [https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/while](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/while) &amp;#x200B; You can spend a lifetime exploring computer science concepts using only the most basic elements of C# and VisualStudio. Most of the power of the language have to do with maintaining a large program with many people.
This is the most important thing. You learn 100x more when working on something where you care about the outcome.
Thanks for the advice. I definitely am going to learn Javascript. I feel like I'm heading in the right direction anyway. Still seems a mile off before being able to put things into practice. I'm enjoying learning though!
This is actually really neat. Thanks alot.
The first time I started learning C#, I was using Unity like you. Then I tried Xamarin Forms to see how the app process would work. Then I got really frustrated with the XAML portion of it. So I went to making the server application for my software, abandoning the client side thing for the time being. When I did this I learned a lot about the structure and flow of server designs and such in C#. From there, I put the app on the back burner and picked up another project. I first created it in WinForms, and I was not happy with it. So I transitioned to learning WPF. &amp;#x200B; I am glad I did, even though it might not LOOK like it's cleaner/easier, it really is. There is much more flexibility in an App design for WPF, PLUS the added bonus that I got to learn more about XAML in this process. It became more clear on how it works. &amp;#x200B; So I will be revisiting my app in the future, with this new knowledge of XAML and I should have a much easier time in the design space compared to before when I was merely fumbling about. &amp;#x200B; Pick a project to do in your past time. When you hit a concept you are unsure of, make a mini-side project that revolves around that. When you nailed that concept, implement it into your main project and keep going. &amp;#x200B; Eventually, you will have a rough outline of your app, then you can go back and refactor your code, do things in a better way as you will undoubtedly learn from research and practice. :)
I can recommend a great tutorial but it requires either a lot of reading or a couple of weeks of experience.
If you cannot use P/Invoke, then C++/CLI is your choice.
Agreed. The problem is actually finding projects ones interest lol
What is the current state of the library as in do you consider it production ready and long term project? I used it a couple of years ago to write [this article](https://sietch.net/ViewNewsItem.aspx?NewsItemID=249 ) and IIRC back then you considered it a toy/experiment.
Correct. It won’t work. (I’ve done codegen where on 8, it will generate the suffixes and attributed and all, and on &lt; 8, it will output nothing. It works, but it’s not pretty.) It was considered but ultimately rejected to have 7.3 understand the notation as a noop.
Depends on what you mean.
I recently took the exam and had mixed feelings about it. Overall, it's a fairly tough exam in that it covers a lot and sometimes asks about obscure corners of the framework. I get the impression that it doesn't make or break a resume, but the content can be good to study in order to expose you to features you might not normally work with.
&gt; However we can’t migrate our code base to C# 8 yet so that leaves a problem. Do it in a branch, or distribute it as a binary NuGet package? &gt; So is there any way to tell older compilers to accept the syntax of nullable references but just to ignore them? Nope. It’ll likely ship in September (not that far off!). Until then, start making the changes in a branch. Afterwards, there’s little reason your team can’t move to the new compiler.
I would say that the equation solving methods like EliminateVariables, IsolateVariable are definitely experimental. The implementation is ad-hoc, but works for many simple problems. State-of-the-art implementations of things like this use cylindrical algebraic decomposition. The core simplification approach and many of the utility methods are taken from published algorithms and so their design is more proven. Overall, I would consider the library experimental/beta until it's more widely used.
Thanks for sharing your article! I hadn't seen that before!
Yeah I don't know exactly how this `webBrowser.Document` stuff is working and don't know what library your using. Neither do I know where `submitNewfess()` is being called from but I will say the following things: 1.) Your methods are incorrectly named the correct styling for C# method calls. They should use PascalCasing where the first letter of each word is uppercase. 2.) Don't use `String` instead use `string` or `var` 3.) Avoid the use of `Thread.Sleep` instead do something like `Task.Delay` 4.) Make `refreshwebpage` method async or at the very least have it spawn a separate thread `Task.Run`. Its highly likely that your `webBrowser.Document` works asynchronously so when you call `Thread.Sleep` its blocking the thread and the `webBrowser.Document` is blocked/waiting and not updating the DOM. By spawning a separate thread to do the Delay and eventual navigate you allow the `webBrowser.Document` to continue working in main thread to update DOM. Again this is a pure guess as I don't know the library you are using in C# to manipulate the HTML.
Thank you because I've been meaning to write this article for quite some time and it was your original post here that motivated me to sit down and finally write it :)
Pluralsight
Yup you nailed it. I did the 70-483, 70-486, and 70-487 for my MCSD which the company needed 4 people certified with to maintain gold status. They didnt compensate us well at all for it though, but I do start a new dev position at a nearby company soon that requires the same thing, and im sure this certification helped me out in getting the gig. You dont remember each nitty gritty detail, but it does help you in knowing which broad area to research if you experience certain types of issues.
The problem isn't with the number. We want to start the numbering at 10000 for whatever reason. It doesn't matter why. It can be done. &amp;#x200B; The problem is, there is no way in the fluent api to set the identity column's starting value. Based on what has been said here and other research I've done, you do it in the generated scripts so that's fine.
Mosh Hamedani on Udemy is fantastic.
now i dont really know what youre doing, but are you calling the dll from different threads at the same time and hence get race conditions? if yes you would have to put a mutex on accesses to that dll. if its not about threads i think this is beyond my skills =/
One answer would be regular expressions, but then you've got two problems (an old programming joke, and depending on the actual data, perhaps true). The other solution that comes to mind is a simple finite state machine, where you iterate over the string until you find your first specifier, then mark that point until you find your second specifier, and then return that subset. You'll find that a StringBuilder has a built-in method to remove characters in a certain range. In fact, most of this is covered in the official docs: [https://docs.microsoft.com/en-us/dotnet/api/system.text.stringbuilder?view=netframework-4.8#Modifying](https://docs.microsoft.com/en-us/dotnet/api/system.text.stringbuilder?view=netframework-4.8#Modifying).
Since you are launching separate processes anyway and communicating over tcp, I don't see how dotnet is involved in the memory management. Invoke more subprocesses on random ports and maintain their life cycle. If you are trying to load the dll within the same process and working against it, then appdomain might be a good boundry for you tho I am not sure how that will work with native dlls
The IL Spec outlines 4 different methods to deal with exceptions in protected blocks:  A finally handler that shall be executed whenever the block exits, regardless of whether that occurs by normal control flow or by an unhandled exception.  A fault handler that shall be executed if an exception occurs, but not on completion of normal control flow. &lt;- not accessable from c#  A catch handler that handles any exception of a specified class or any of its subclasses.  A filter handler that runs a user-specified set of CIL instructions to determine if the exception should be handled by the associated handler, or passed on to the next protected block. With a fault keyword you could have a shared logging call in the fault handler, and if it was a e.g. timeout exception from a web call we could retry but still log it without having to duplicate the logging call.
Ideally, you'd pass a view model to the second window, bind the ListBox to it and then modify things on that.
^ This guy leads ^ Couldn't say it any better myself.
Wrong copy/paste? Tesseract is a OCR library
Just have a shared data structure with a flag that indicates the limit has been hit (and maybe data indicating when the timeout window will end too)?
Aha, neat!
Since others mentioned the Microsoft Partner Network, you can search for local employers that are members of the partner network here: https://www.microsoft.com/en-us/solution-providers/home The search is intended for companies seeking Microsoft consultants, and one of the input fields is your company size. You can vary that to different lists of potential MCSD employers. What I found in my locale was that there weren't very many local shops that were Microsoft partners. YMMV.
so, i guess its important to mention that while i wrote this application i don't actually have a development position because i'm not a developer, just an aspiring developer and i'm learning. Using some type of shared data structure i'm sure would work but i don't know how to implement that which is why i'm reaching out. I know how to use Locks which is what i found on google and lock the counter and run one task at the same time and pause when the task counter is at 1000 for whatever time window but i'm looking for a way to do priorities (i updated the post with that after you had made the comment) to determine which task is most important and focus on running the tasks in order of important or if they are all at the same level then they can execute together and using a lock would mean i would not be able to execute the tasks together. This is all based off of some reading on google and my current level of knowledge. any of the over ways to implement a lock to solve my issue may not be fully accurate.
You basically have to write a set of C wrapper functions, and use PInovke on those. So, imagine a C++ class like this: class SumThing { public: SumThing(); ~SumThing(); int Sum; void AddToSum( int val ); }; You would then write a C wrapper like this: extern "C" { void* SumThing_Ctor() { return new SumThing; } SumThing_Dtor( SumThing* ptr ) { delete ptr; } int SumThing_GetSum( SumThing* ptr ) { return ptr-&gt;Sum; } void SumThing_AddToSum( SumThing* ptr, int val ) { ptr-&gt;AddToSum( val ); } }; Then you create a C# wrapper class, which PInokes the Ctor wrapper to create and store a pointer, uses that pointer to PInvoke the other wrapper functions, and then a Dispose that deletes the pointer. I just typed that example off the top of my head. Returning void* for the ctor is probably wrong. Might be intptr_t or something like that? You may need to add some calling convention stuff in there (ex. stdcall). But you can look that up. Point is, even without access to the source, you can write a C wrapper that calls through. It's super tedious to do, marshalling more complex values (strings, etc) is a pain, and if you need to wrap a hierarchy of objects, that return children, etc. it gets even more complex. But you *can* do it. An alternative is to use a library like SWIG to auto-generate the wrappers. I tried it once, but found it to be so tricky/cryptic to use itself that I gave up and went back to doing it by hand. Good luck!
Nah, the problem with that is making it about your interest. When you *first learn*, it's better to just take some basic goal oriented tutorials rather than try to come up with an interesting and intriguing project. It's the same problems writers have. You don't become a better writer by thinking of the perfect story or writing for it to just drop into your head. You become a better writer by *writing*. That's why places like r/WritingPrompts can be so valuable.
Yeah, it's the library OP is talking about
You say you tried a wrapper, but I want to clarify what that means. Did you try to make a managed class that explicitly defines functions using the [extern] attribute?
The best comment. I have been studying with C# reference books. I learned a lot. I thought I knew at least 80% of C#. It turned out that I only know 40% of it...(probably less).
If I can recall correctly CISCO use a combination of JavaScript &amp; XML to live stream their data. XML isn’t a language so to speak but it’s used heavily in the CISCO ecosystem. C# will work just fine. Python is honestly easier.
Hi there! I would watch a quick tutorial on .NET MVC sans React to get a good understanding of MVC vs just .NET. The framework for .NET MVC enforces the MVC design pattern through a .NET backend. The V in MVC stands for views which are typically razor files the combine HTML and view models passed by the .NET backend to make your client side UI. React on the other hand is a component based JS framework which fundamentally works differently than a .NET view (look into virtual vs non-virtual DOMs). You can always use React with a .NET backend API to handle DB calls and interacting with other service layers. Instead, take a look at Graph QL if you have the time. It’s a neat trend on having client side code interact with a DB or API. Hope this helps!
Dumb me, must have missed that. Thanks for pointing it out
 string target = @"\tN: 101\t"; string specifier1 = "N:"; string specifier2 = "\t"; string result = ""; int start = target.IndexOf(specifier1); if (start &gt;= 0) { start += specifier1.Length; stop = target.IndexOf(specifier2, start); if (stop &gt;= 0) { result = target.Substring(start, stop - start); } } That should get you the substring.
Regex is effectively a finite-state automaton, whose behavior is represented by a well-defined and understood syntax. It's a better choice here that writing an unknown state machine. Regex should also work just fine for OP's use case.
I dont know if u have acces to some db or atructure to save some data. I would do that task like this: A table with 2 columns. Counter(int) | datetimedone (datetime) 1.-check if column Counter &lt; 1000 continue the flow 2.- make request 3.- saves Counter column + 1 and updates datetimedone to the actual datetime This on every request When counter &gt;= 1000. Then make everything stop till datetimedone is one hour old. Pd: u can do this too only in c# making everything increment a global var and start a timer when the variable = 1000 then stop when the timer achieves 1 hour.
I don't disagree that it would work, but just because it's *a* solution doesn't mean it's *the* solution. In this case, when using a StringBuilder, you can't use regex directly. A quick FSM similar to what dead\_pirate\_robertz threw together is going to be the better choice.
Seems like a pretty limited value for probably a fair amount of work. That is, the only really interesting benefit is the potential to write constant expressions involving exponentiation (i. e. `(2**31) - 1` instead of `2147483647`). Additionally, it doesn't look like a feature with much interest behind it. Although you commented on it, today, the next most recent comment is over a year old. Perhaps it would be better, for your use case, to build some wrappers for the numeric types you're using that override `^` to call `Math.Pow()` instead of performing a bitwise XOR. E. g. public readonly struct MyInt32 { public int Value {get;} public MyInt32(int value) =&gt; Value = value; public static implicit operator int(MyInt32 x) =&gt; x.Value; public static implicit operator MyInt32(int x) =&gt; new MyInt32(x); public static MyInt32 operator^(MyInt32 x, MyInt32 y) =&gt; (int) Math.Pow(x, y); // obviously, a lot's omitted, like the other operators, comparisons, etc. } This ought to be trivially generatable, too.
Fair enough. Thanks for clearing things up.
https://www.youtube.com/watch?v=Nepysk5rOf4
Maybe some simple caching would help reduce the number of calls to the vendor and prevent you from hitting the limit? Basic in-memory caching in .net is quite easy
Just as an aside, it sounds like if this service is going to be growing, it may be worth it to figure out how to write the functionality yourself so you control your own destiny. Being at the mercy of someone saying, "No more than 1000/100/whatever arbitrary limit per hour" is no place for a growing business to waste time if it can be helped. Just my 2c...
well I would definitely say not always. Suppose we have a rudimentary caching mechanism, and to invalidate the cache we set the string to null. Contrived, but perfectly cromulent. In this case, null definitely does not mean the same thing as `" "` or even `""`.
I hadn’t though to use cache for this and it might be the solution in looking for when it comes to most of this.
So I guess I want to be more specific, can you should me an example of a task incrementing a global variable? I’ve always been advised to avoid singletons where ever possible. Someone else suggesting using cache which might be the option I go with for some of this but I’m not 100 percent sure yet. And then when it does hit the limit how do I pause tasks in their current state? A sleep? Or is there a task pause function that I’m missing.
I agree with this but recreating an entire application in house vs writing something to help us in managing what we already have is something we don’t have the resources to contribute to at this time. It is something on the docket to discuss though.
Plurasight if you can afford it. If not Udemy / youtube. Enjoy the journey, c# is an amazing language you can do almost anything with. Good luck
They might ask you if they are an MS partner. One of the ways to be in the program is to have certified professionals on your team. So if you want to use it for that; then research which exams are retiring and pick a path to get to a MCSD: https://www.microsoft.com/en-us/learning/mcsd-certification.aspx
I am working on getting my team all certified to move us up to a Gold partner. This is the right answer (reason) for MS certifications.
Have you reached out to the api owner to see if they’d increase your limit a bit? 1000/hour seems like a really low limit (17/minute). If you’re paying a tiered service charge, it might also be worth paying extra for more bandwidth if that is the, case depending on how expensive it is.
Hi hi! I'm in a similar boat as you at the moment -- learning a React + [ASP.NET](https://ASP.NET) Web API stack in my downtime (my experience is mostly enterprise). My impression is that tutorials aren't especially helpful right now because both ecosystems are midst transitional periods (React moving toward hook/suspense-based component rendering and [ASP.NET](https://ASP.NET) moving toward Core 3.0). I'm learning more easily by...I guess I'd say absorbing info by osmosis 😅
Another option that's more .NET friendly is Blazor which I believe just had its first release
Simple-ish. Redirect your calls to a database. Then after they query the db every so often to see if they are completed. Have workers read from the db and write the results back, the polling requestor gets the data. If the same requests are commonly ask you can use this like a cache depending on data ttl. Also workers can determine "next" using priority. This can be transformed into a queue based system with a pub/sub model if the volume grows. Unethical hack: if using a db or queue. The workers reading from the queue can each represent a different subscription so that you can bypass the 1000/hr limit. Not recommended, because you'll probably get caught and banned.
I hear this, i thought i was doing okay until i took the practice exams and one of the first questions was about semaphores, an area which i had never even heard of
Parse it yourself using regex /s
On startup create a class called "MyCacheFile" that stores that initialized dictionary and then add it to your resolver as a singleton instance to inject where ever you please.
I like your analogy. You need to learn basics before you can compose. Then, in order to compose, you need to follow a simple rule: bichoc (butt in chair, hands on keyboard). Then you're already there when your muse peaks over your shoulder and smiles at your what you're doing.
I think a caching system is probably overkill, if the data set is small just load it into memory, wrap the dictionary in a container class (with interface) and inject it as a singleton so you can consume it anywhere. &amp;#x200B; Will probably need a utility endpoint or some other method to refresh the dataset though so you can update it without restarting the server. &amp;#x200B; Have you brought up this idea with the committees involved though? I would fully expect them to want to do bureaucratic nonsense if all those values are in a database.
It's 2019 but I still use knockout and web api 2. I ditched mvc.
It actually doesn’t matter what you decide in the beginning. Don’t get fixated over what to learn, keep it simple. You code for 1 year? Okay then, what’s the project that you think would be more fun for you? Is it a website? Go with asp.net, html, css and JavaScript. Is it a mobile application? Go with Xamarin. Is it a desktop application? Windows forms. Is it just an algorithm that you seek to optimize and play around? Just build a console app and see where it gets you. Point is, coding for yourself is the most fun thing. If you go for a website and the decide that web is not for your taste, it doesn’t hurt. You will have learned the basics of a very wide technology. If you sit yourself down and code and code and code, the current will get you there. Don’t think about what to learn. Try to code what you want to create.
You could also make a public static attribute in the first window of the the type of gui element and set it equal to the real ui object in the constructor of the first window. Now you can call it in window 2 by calling window1.attributename
Or you can try ReactiveUI, which binds the control to an object what updates once the underlying datasource changes.
The problem is most likely the sleep is blocking the thread, you could use delay but you probably want to be handling the document completed event instead of directly calling your refresh method. Something as simple as set a flag in your main method when the button has been clicked, then in the document completed event, if the flag has been set, do your navigate and reset the flag.
Please fix your link. It results in a 404. It should probably be: [https://github.com/lowleveldesign/dotnet-netrace](https://github.com/lowleveldesign/dotnet-netrace) That said this project looks very useful to me. Will definitely try it. Thanks!
Excellent Recommendation. Good learning material if your new or need a rehash of knowledge
I second this, have a look at the outbound calls in Fiddler to see duplicates
That's simply not an option sometimes. Imagine if it was an API such as eBay...
Not sure we're on the same page in term's of how and when the `params` keyword should be used. Could you show an example implementation?
If the structure of the Json is not know before hand, you can use dynamic + newtonsoft. Have a look at this URL: [https://www.newtonsoft.com/json/help/html/QueryJsonDynamic.htm](https://www.newtonsoft.com/json/help/html/QueryJsonDynamic.htm) This should be 100% possible, but i do recommend that you read up on dynamic and expandoObject. You can do a lot of magic with these :)
I'm on my phone, so please excuse my terse response, but essentially this. void Run(params float[] args) { // Do stuff // ... Move(args[0], args[1], args[2]); }
Point 2 is why i did it. I found it to be good for awareness and bad for best practise
Separate processes works just fine but I would like to move it into one process and that crashes. And AppDomain ist apparently (according to some tutorials I just read) exactly the correct concept to solve my problem. Thanks for that.
No the concurrency is not exactly the problem but more like the statefulness. The current situation is like me and you both have a blueray but only one common player and both want to play our disks. With mutexes I could ensure that only one of us is interacting with the player at the same time but my actual problem is that you always inserts the disk after I already inserted mine and now I am wondering why the disk didn’t play anymore and you wonder why you can’t insert your disk. So what I now have as solution is to provide a bd player to each of us but I would rather like to have a bd player with more than one drive.
First of all, that only works if all your parameters are `float`, otherwise you can kiss type safety goodbye :) Second of all, I'm not sure from your example how is that better than: void Run(float arg1, float arg2, float arg3) { // Do stuff // ... Move(arg1, arg2, arg3); } Third of all - not really sure how that addresses what OP wanted to achieve.
.NET Framework only knows AppDomain that provides some kind of encapsulation, but this doesn't work for native assemblies. You should stick with the current solution of using processes.
OP's desired code uses the "spread" operator from JavaScript, which is another form of variable arguments. Im only pointing out how this is achieved in C#. I'm certainly not suggesting this is the correct solution for his problem.
The real problem you are going to have here is mixing a server side MVC framework with a Javascript framwork.
&gt; I still use knockout I'm sorry to hear that.
It's already supported in F# and a load of others.
My opinion, if it's beurocracy for it's own sake (just to make them feel important), and not adding any value, just do it and keep them out of it. Build a UI for administering the data and give them all access to it, and let them administer the data instead. But yes a good idea, maybe let them know beforehand about the new UI that you are going to build.
Could you switch to using a queue or service bus model? Instead of making the request, add a queue entry, then have a separate process reading from the queue and processing the requests. You could manage priorities and rate limiting and error retry much easier this way. I'm making a number of assumptions when suggesting this.
Offload this responsibility to a dedicated class. When a new request comes in check to see if you have cached response and if so return the cached value. If you haven't cached the response add the request to a request queue. While queue has values and limit isn't hit, peek at the next request in queue, check it against the cache again, and if there's still no cached value send to the API. If it succeeds, dequeue the request, cache the response and then move to the next one. If it fails, set limitHit bool to true. While limit hit is true, more requests will be added to the queue but won't be acted upon until the limit resets Have some other helper task which sets limitHit to false at the top of every hour.
Never forget to have fun! Hobby projects should be both challenging and a positive experience.
status log mergetool
`git commit --amend' to add your current staged changes to your last commit and/or edit the commit message (recreates the commit so be careful if you've already pushed the branch) `git commit --amend --no-edit' the same as above but don't edit the commit message
This. **Newtonsoft.Json** is a public dll you can get from Nuget (learn more [here](https://www.newtonsoft.com/json)). It has an API to deserialize objects into **dynamic** vars like this: dynamic obj = Newtonsoft.Json.JsonConvert.DeserializeObject(stringObject);
Really relative experience I think. Thanks for the post, some great advice.
If I'm honest Im kind of sporadic. I've went from apps to games to website to game 😂 but no I get what you mean. I've always learned something from them though. But I thibk youre right and maybe I should give myself one project to complete over time, as I learn.
`git reflog`
Would using a delegate to pass the new listbox created in window 2 back to window 1 be a bad idea?
I'd recommend using an Event Aggregator. Checkout out the Prism lib. Secondly, subdivide your GUI into various UI Controls. It then becomes a question of how do you pass information between Controls.
git commit git push git pull These should all be done frequently, not after a week's worth of work.
Lockless increment/decrement can be done with Interlocked.Increment and Interlocked.Decrement respectively.
Bummer
Have a repo that is getting too large and you want to split it up and preserve the history? `git filter-branch --prune-empty --subdirectory-filter ABC -- --all`
F# already allows custom operators, so it's less work in general. It's basically just a function definition.
Of course. If it's not an option then you have to make do, but if there's a way to do it, rolling your own would be better.
`git rebase -i HEAD^n` where n = the number of commits you want to squash into a single commit
so the library is built so only one window can be opened? if you would provide a link to said library people could maybe help you more
That doesn't actually address *anything* I said, and is already covered in the discussion on github (which I have not participated in). The issue with adding this to C# is not the volume of difficult code work (I expect it's pretty simple and small), but that it has some moderate administrative overhead involved in settling and communicating details of new syntax, and, then, the opportunity cost of prioritizing this work over other work. The limited discussion on the proposal over the last four years suggests this is not a valuable feature for most C# devs.
This is something to consider.
Removed: Rule 3.
alright calm down just making conversation
Iirc correctly you don't click and interact on the file upload button but you manually bind the filepath to the upload button. Iirc that is all the "search for file button" does. But I could be mistaken though
There should be a React template you can use when building a project. I’ve used the Vue one before. It’s so much easier than starting from scratch.
It would be much easier to use WebAPI as the V in MVC becomes fairly useless when you add in React.
&gt; override `^` to call `Math.Pow()` instead of performing a bitwise XOR Oh God, please no.
I like knockout. It's not slow either. The way I use it is nice, it's all modular in sep files, but compiles to one.
&gt; Depends on what APIs ... That's what the Portability Analyzer is suppose to check. That the framework API usage is compatible with Core 3.0. I just want to make sure there are no other hidden gotchas I need to worry about for the 3rd party libraries I'm using.
You have an arr[] of ints Find the longest sequence of numbers in a row that have the same greatest common divisor which is also greater than 1 As an output write: 1st element of that sequence, how many elements are in that sequence and what is the greatest common divisor of them. Try to write it in one linq chain ;)
this is so frustraiting ! .... i have been trying and still no where
Yeah I tried that by sending in the file path and name into the web application and clicking select" however that only launches the file explorer window again.
I started with that version a when you suggested it then I ended up taking the linux version written in c++for tess 4.0 and using P/Invoke to make a wrapper and then I could use that to create an API. Thanks for the help!
I ended up using the NuGet package for 4.0, thank you for the heads up on that. Initially I took the c++ version and used P/Invoke to make a wrapper. Ran into some difficulty as its my first time trying that, and so I ended up using the NuGet.
Rule 6. And PVS Studio is a very known spammer.
I will checkout COM because I am curious on doing it myself, but for the time being I am using a NuGet package. Thanks for the tip!
I did run into a lot of trouble using P/Invoke. The concept makes sense, but without knowing whats in the dll I struggled to make a wrapper.
What you need to do is have the second window return a result in some way. The result will be a model of some kind that can be used to create a new ListBoxItem. If you are using MVVM, and have some kind of database or other data access behind everything, you would create a model in the second window, add that model to the database, and then when you close the second window the first window would refresh its dataset from the database. If the data is just temporary, and not stored anywhere, you would just return the model you created directly to the first window, it then would add it directly to its dataset.
I mean if the apis are good then it should be fine.
Removed: PVS Studio is blacklisted due to spam.
Using the select buttons resets the set path even if you just close it empty.
http://www.dependencywalker.com/ shows you whats inside a c++ Dll (on windows).
It never ends.
This explains a lot, thank you for typing this out. The way you said it reminds me of a mentor I had, and it seemed to clear things up for me. I am going to try making my own wrapper after I get the project working, as I want to make some changes to the metrics. I am working within a lot of time constraints at the moment and I need to have a demo ready soon in order to keep developing the project, so I went with the NuGet package for now. Everyone made it seem like P/Invoke or C++/CLI were extremely easy to do, and there were not a lot of examples that seem to demonstrate the reality of the project. Thanks again!
I did try to do this, but I thought it would be a lot simpler. Thinking we know something is not the same as knowing something. I need to look more into explicitly defining with extern. Thanks for bringing this up!
Hi! Awesome work! Any chance of getting source files to play with it myself? Keep up the good work!
We evaluated the cost of a potential merge after say three months of changes, note that the nullable references changes are quite numerous in terms of lines. Having decided this would certainly not be trivial I posted this question hoping there would could do everything on the main line.
If you posted WHAT you have tried and WHAT went wrong then we could help. Unless you want everything spoonfed to you.
I don't see how this is a problem. Have an API on the server side, and React is used as the frontend application.
[removed]
Think you can just keyboard.Sendkeys the filepath and also sendkeys Enter
Web API builds on top of MVC. Web API goes very well with react. You don't have to use the V part.
Sounds interesting, thank you.
May I recommend https://projecteuler.net/ More mathy, but doable
Good luck with that then.
https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/fields
it's not hard rofl
do you normal dotnet stuff and then send APIs over to whatever javascript framework you're using. pretty straight forward .
Imo the hardest thing to do when building responsive web apps is when you need to factor in search engines. If you want crawlers to be able to crawl all of your pages then they need to load from a simple HTTP Get with all of their content. Building SPA's is awesome, but these often rely on ajax requests to load and retrieve content, resulting in search crawlers not indexing said content. There are products like [Prerender.io](https://Prerender.io) to tackle this, but sometimes (legacy wise) you need them to load via HTTP Get. In such scenarios, I use frameworks like react, angular, knockout etc for User Interaction, but the content all loads via normal get requests in a traditional post/get approach (MVC like). It becomes much harder to do and implement. But if you can go full SPA and you don't care about search indexing, then yes, all you need is WebAPI and React or (insert front end framework here). Design rest services with get/post/put/delete methods and build a JS app to sit entirely on top of the rest api. You don't even need a RAZOR view, all you need is an index.html and webpack/gulp and some kind of design time html transformer, like Jade templates etc. A template transformer for your html comes in handy because it can automatically replace script/style links in your index.html for you with the latest built versions.
That is so cool! While I never played Shadow of Yserbius, I was a big mudder as a kid and love these kinds of games.
Thank you! What a weird day.... For anyone else that looks for this, here's the answer: public void calendar_DateChanged(object sender, DateRangeEventArgs e) { MessageBox.Show(e.Start.ToShortDateString()); }
I will check it out, thank you
MVC WebAPI is absolutely made to develop APIs for front end frameworks to use. I mean, we use it all the time to build our APIs for React front-ends. It's not that uncommon... at all... ever. The MVC is just stupid moniker because WebAPI was built from the MVC framework. I think today, it is just called WebAPI with out the MVC qualifier.
Yeah, I can see that. Basically, forget about it — either get the entire team on a prerelease or wait.
Razor pages are different to MVC views. The syntax looks similar, but they operate differently. It would be good to take each bit at a time though, it's a lot to get your head around otherwise :) In VS (2019 for preference) the React with MVC template is very good.
Not an issue. ASP.NET Core hosting Web API REST endpoints and SignalR is a great combo.
The thing is, I was *gonna* do that, and then I just went straight to hitting myself in the bathing suit area with a rubber mallet.
[removed]
Typically you want to transfer the token through methods and some ints. The CTS is build in the outermost scope that can define a timeout and it’s token copied and consumed by every async method on the way. If you have sequential operations this is also the only reliable way to ensure that a timeout is is really thrown after the specified time. In your code however I don’t see why you shouldn’t set timeout to a small number in your test.
I used tesseract with Java I think it was about 12 years ago with jni I believe and that wasn't fun either.
Aw jeez I wasn't even aware of this. Thanks for the info.
My job requires certification but just because I'm a contractor and company is a microsoft certified shop, getting discounts with the higher percentage of certified people. The thing about certs is that you have to keep testing. If you stop for more than 2 years, you lose it all. So every two years you have to do another test. Doesn't have to be the same one though. But I have noticed on applications that there's always a spot for certifications you may have. Having one doesn't hurt.
Look for work doing anything programming, or even programming-adjacent. For example, Testing/QA positions can be a good way to get in the door, and many of them have plenty of opportunities to write automated tests (legit experience), but one way or another you can BS the "year of experience" after you've logged a year doing that.
&gt; In C#, delegates from the basic building blocks for events. In biology, mitochondria from the powerhouse of the cell.
From a design perspective, singletons make sense when there is only one possible instance of something. If you know that your entire application will be using this API only and this is the only API that requires this functionality, a Singleton make sense. Now, if you may in the future have to connect to another API with the same limitations, you may have to refractor your code to work with the new functionality or have to repeat code. Be careful with how you do this because the naive way would be to have a variable that tracks the requests in the past hour, and a variable to keep track of the last time it was reset. Every time you go to increment that variable check if it has been an hour since you reset that variable and if so reset it to 0. There is a problem with this approach. Imagine you reset the variable first at 5pm. Then at 5:55pm you sent 100 requests. Then, at 6:05 you go to do another request, and reset the requests counter. Now, it would think youve done no requests in the past hour, but you actually did 100 ten minutes ago. You could fix this by having a queue for the times of the requests in the past hour. When you go to check how many requests have been done you can keep checking the top of the queue until you have cleared out all of the requests more than an hour old. Now to get the number of requests in the past hour you could just check the size of the queue. So your function might look like this in pseudocode `count_requests() while (top of queue - current time) &gt; an hour pop queue return queue size` There's probably a better way to do this next part, I'm not too knowledgeable on C# threading, but to pause the process until it's there's not been 100 requests in the past hour you could do `while count_requests() &gt;= 100 sleep for 1 second` Now you will need to use locks to avoid race conditions, but this should get you started.
Yeah misspelled "form". Unfortunately sometimes we, humans, misspell a word. Don’t know the reason why Reddit doesn’t allow post edit.
@misterjesus1983 Is the NuGet Package free, or are you thinking about the one from Patagames?
If I'm using send keys function does it not send it directly to the web application? As I can't bind direct to the upload button it does need to be able to interact with the file explorer
I guess the reason I showed both was I was curious if when people design APIs "these days" they prefer to take a token or a timespan. I worked on APIs a few years ago, before Tasks really entered the scene. Then I spent a long time working on an application, and no matter how much you tell yourself "everything is API" it's easy to bend the rules when you're your own customer. Now I'm doing API work again and I'm open to, "People expect a token parameter now instead of an explicit timeout duration because that token lets them control the timeout."
Agreed that you should accept a CancellationToken, as there are other useful features of CancellationToken that callers can use (like delegates when the token is cancelled or providing an infinite timeout but giving the user a cancel button). If you're concerned about user experience with the token, you can provide a thin-wrapper overload that takes a Timespan and generates the tokens itself. For testing, "SomeInnerMethod" should either be in a mocked class or calling into a mocked class. Either way, the call should be near instant meaning your CancellationToken timespans can be very small, making your tests fast.
No, using Keyboard.sendkeys simply enters what it’s told into whatever is currently in focus, be it web application, browser, other.
Look at their license. I am not the author.
In general, your logic should not manipulate UI items. It should manipulate the things the UI items exist to display. So that means if we have a MainWindow that has a MainListView, we'd rather say: &gt; I have a MainWindowViewModel with an `Items` property. So if we have a ChildWindow with controls that can add or remove items to that, what we'd rather say is: &gt; I have a `ChildWindowViewModel` with an `Items` property. Given that, the implementation sounds a lot easier. We could have something like (roughly): public class MainWindowViewModel : SomeViewModelBase { public ObservableCollection&lt;WhateverViewModel&gt; Items { get; private set; } public ICommand DisplayEditorCommand { get; private set; } public MainWindowViewModel() { DisplayEditorCommand = new WhateverYourRelayCommandTypeIs(ExecuteDisplayEditor); } private ExecuteDisplayEditor(object parameter) { var childVm = new ChildWindowViewModel(Items); var childWindow = new ChildWindow(); // Hi I use Xamarin a lot, isn't this DataContext in WPF? childWindow.BindingContext = childVm; childWindow.Show(); } } public class ChildWindowViewModel : SomeViewModelBase { public ObservableCollection&lt;WhateverViewModel&gt; Items { get; private set; } public ChildWindowViewModel(ObservableCollection&lt;Whatever&gt; items) { Items = items; } // Stuff to manipulate the list } If your ViewModels are sharing the same collection, and your Views are bound to the properties, then the changes you make in one window should automatically appear in the other window. That's why having bindings and implementing INotifyPropertyChanged all the way down is important. Other people have proposed an event aggregator and that *can* be used to implement this, but it's another path and generally a thing you design your app around. My guess is you'll be more comfortable with this approach.
Same spell mistake is made in the text of the article. But otherwise was a nice read.
&lt;&gt; these are the brackets I’m talking about
You can have static classes, methods, and properties. If you have a base class with a static property, each of the inherited classes will share that one property. For example, class Animal with a static property of MyStaticVariable set initially to 0. Instantiate 3 different child classes (Dog, Cat, and Bird) and each of them can reference MyStaticVariable which will show as 0. Change it in Bird to be 5, and both the base class and the Dog and Cat instances will now show it as 5 also.
😂, I appreciate this response because it’s how I feel when people ask me these types of questions. It’s not free, I did check the licensing before asking. I asked you about it because I was not sure if you knew, and also I was hoping you knew of a crack I could take advantage of until I start using c++/cli or P/invoke.
You could use one of the many decompilers to take a peak under the hood, I am not sure of the legality of such methods though.
Are you locked into using the code-first method? I generally create the database tables first, and then use reverse-poco to autogenerate the entity framework files. I can refresh the design with just a right-click. The nice thing about this is I can set up any initial numbers for identity columns right in sql rather than trying to get around code first limitations.
Yeah that I corrected. Thanks for appreciation!
If you call Normalize(numbers), the compiler won't be able to tell which method to use. You won't be able to tell which one it will use either. That is, unless you put them in separate classes. Then you could use FirstClass.Normalize(numbers) or SecondClass.Normalize(numbers).
Or even better, something like: string name = (string.IsNullOrEmpty(CustomName)) ? Info.Name : CustomName; string x = (Count &gt; 1) ? $"{name} {Count}" : $"{name}";
&gt; What u/LegendairyMoooo is trying to say is that READING code is 100x more important than WRITING code. Gah I hope not. I'd say both are equally important.
I'm strange but I actually like refactoring crud that like into shiny.
That's either self-loathing or a weird fetish. Either way, blessed art thou good sir!
I know, it's unusual. I also enjoy r/popping.
Well, if you're going to spend 10 minutes writing a program, but 1000 minutes reading it, where do you want to save time? Saving that 1 minute of typing, but the result is that it now takes 1100 minutes to read and understand it in the future is stupid. It's called stepping over dollars to pick up pennies.
The problem with most ways to find work is the other person is usually a recruiter, and their customers aren't looking for new developers. What you need is to find someone doing their own hiring who is open to training you. Regardless of what you think your skill is, you're going to need training if you haven't worked professionally yet. Putting out some github projects will help get you in the door with places like that, or getting a certification. Knowing Javascript and React or such goes well with C#, as tons of C# is used for MVC and websites.
It’s also in the title, can’t correct it there 😂
#Nobody click that sub! You have been warned.
Well CancellationToken apparently was introduced with net40 so if backwards compatibility is an issue you might need to remove it. If not I would always use cancelationtokens. Most of c#s async helper as `Task` heavily rely on or at least support CancellationToken
Who said anything about saving 1 minute of typing? I wasn't saying the amount of time spending writing it is important. I said the writing is just as important. Sorry if I misunderstood what your post was saying. I didn't realize you were talking about the time spent on it.
Unless you can modify the code and rebuild the software, you're probably stuck deleting those brackets for now. Here's what I can guess at, there's a lot of information I don't have, and you may not even have some of it. Depending on how the data gets sent to the database, some symbols might not be allowed. For example, SQL statements use the `'` character for special things, and if the developers let users type those they have to be handled a special way. Sometimes "handled a special way" means the developers just tell the user "don't use that character". That's a pretty bad way to do it, but sometimes they have reasons. So my guess is whatever ultimately processes your data doesn't want the data to have angle brackets in it. You're getting the error because either: 1. The software detects the brackets and returns an error, but the UI isn't smart enough to relay that error to you. 2. The software *doesn't* detect the brackets and something beneath it returns an error. Either way, without changing the software you can't get around the error. Until the people who can change it do change it, you'll have to remove them. "A few months" sounds like a ridiculous estimate for this kind of work, in my opinion. Maybe there is some reason.
&gt;Unfortunately sometimes we, humans, misspell a word. Sorry, I was only teasing.
&gt; Sometimes we, humans, ... https://www.reddit.com/r/totallynotrobots/
With regards to not extending primitive types and grouping extensions by type, I think the exception to that is when you have 'domain specific extensions'. They then have a domain specific namespace and only get into intellisense when you import the namespace
You want to set the value of the input element to the filename, then submit the form with JS. The app developers might be doing something fancy in the background, but you should be able to skip the Upload form entirely if you can figure out what it's doing.
Extensions like Resharper will show it anyway. Don't know if it's a good enough reason, but it's too popular to ignore
Is there any benefit and/or differences between the way you used to create and raise events and this shorter one? public event Action OnChange; OnChange?.Invoke();
Is this service a single process, or are you coordinating across multiple worker processes? Assuming it's all in-process, off the top of my head you'd want to combine the following concepts: * [ConcurrentQueue](https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent.concurrentqueue-1?view=netframework-4.8) of tasks that each of the worker threads pulls its next task from. Whichever part of your code creates new "tasks" to be completed would enqueue a new task onto this, and the worker threads would dequeue as soon as they're done with a task. * [PriorityQueue](https://visualstudiomagazine.com/articles/2012/11/01/priority-queues-with-c.aspx) will ensure that new tasks added to the queue push to the front of the line so that the next available task will pick it first. * A [modified circuit breaker](https://docs.microsoft.com/en-us/azure/architecture/patterns/circuit-breaker) - instead of failing immediately, allow worker threads to report that they've hit the limit (e.g. `concurrentPriorityQueue.ReportRateLimitExceeded()`). This will stop the queue from issuing new tasks when a worker requests them (basically, treat the queue as empty for the designated wait period). Set a Timer in another thread or something to signal the queue that it's open again, and then the queue can begin giving out tasks (if it makes it easier to implement, pretend like all of the blocked items were just inserted into the queue). If a task hits the rate limit, the worker should report it, re-enqueue the failed task, and then request a new task. If implemented correctly, the queue should immediately stop handing out new tasks once reported. Then the re-enqueued task will be put into the queue in the appropriate priority order. Since the queue has stopped handing out tasks, that re-enqueued task cannot be assigned to anyone else until the wait is finished. Once the now-free worker thread attempts to request a new task from the queue, it will block/wait until the time limit is up and the queue begins handing out work again. Such a queue does not exist in the .NET standard library, and it's likely you won't find any third party queues that will meet your needs (worth looking into anyway), so be prepared to code it yourself if need be :( I assume new tasks with a high priority don't need to interrupt a low priority task, otherwise that will add even more complexity.
Because for some reason they have chosen to build urls with topic in it.
This is a really great and straightforward article about delegates. Awesome work!
I don't think so, It's just a way to make your code a lot shorter like this: public event Action Change; protected void OnChange() =&gt; Change?.Invoke(this,new EventArgs()); &amp;#x200B; with that you were able to cut those unnecessary lines
Adding the event keyword safeguards the invocation to within the class. For example a public Action can be involved by anyone with a reference to the class. In the event case, the event is the public property and the Action is a private backing field. The ?. Is just syntactic sugar for if (!(x is null)) x.Invoke() x() is also syntactic sugar for x.Invoke() I haven't looked at the IL for minor changes, but it is he same.
Thanks. I'll give it a try in the morning. Is there an msdn guide or something on keyboard function that you could share?
I would write it like you did.
Makes sense. Ideally I wanted to have it completely user faced so we could test full experience but if that's the only way around it then happy enough compromise.
Your logic is broken. You can get null ref exceptions if another thread removes their handler from the event between the null check and the invoke. The old, safe way to do it: var handler = this.MyEvent; if (handler != null) handler.Invoke(); The new safe way uses '?.'
My big gripe about extension methods is I can't figure out where I want to put them. Let's say my application has `Customers` and `Vendors`, and I make extension classes for both with the obvious names. My first thought is to have `/Extensions/` in my project and put both of them there. This bugs me because it means I'll pull in the `VendorExtensions` methods when I might only want the `CustomerExtensions` ones. That makes me want to try something more like `/Extensions/Customers/` and `/Extensions/Vendors/`, but then I've got a bunch of namespaces with only one type and that bugs me too. This has been a bigger problem on larger projects than I care to think about. I've been in one that had a folder with no less than 40 extension classes. Code reviews were always peppered with places where things had been duplicated because nobody had a grasp of what'd been implemented as extensions yet, and often nobody thought to check. I get that tools like Resharper help, but I spend my day bouncing between VS, VS for Mac, VS Code, and skimming through GitHub repos in the browser. We need a convention that works in them all. "Having a nice presentation" beats the heck out of "well this tool massages it into a nice presentation".
Your article contains broken code. You should never do this with events: public void Raise() { //Check if OnChange Action is set before invoking it if (OnChange != null) { //Invoke OnChange Action OnChange(); } } The reason? What if `OnChange` becomes null between your null check and your invocation of it? You'll throw a null reference exception. If an event subscriber removes their handler from a different thread (which is perfectly allowed), you'll break. Instead you should do either: Old way: public void Raise() { var handler = this.OnChange; if (handler != null) { handler(); } } New way: public void Raise() { this.OnChange?.Invoke(); } Both of these ways produce _exactly_ the same behavior. ... You did a couple other things wrong. Your event should be an event, not a property that stores a single delegate. This is a property that stores a single Action delegate instance: // This is not an event. Don't do this :( public Action Changed { get; set; } This is a C# event: // This is the correct way to declare events. public event Action Changed; You also broke naming conventions. The event should be "Changed". The method that fires it should be protected or private, and should be named something like OnChanged(). Below is sound example code that is consistent with the standards set by the .Net class libraries: public class Pub { public event Action Changed; protected void OnChanged() { Changed?.Invoke(); } }
try some of these out https://www.reddit.com/r/cscareerquestions/comments/20ahfq/heres_a_pretty_big_list_of_programming_interview/
See my comment [here](https://www.reddit.com/r/csharp/comments/bx3kyd/in_c_delegates_from_the_basic_building_blocks_for/eq47ip7/). This article has bad code for several reasons.
Sorry for late response, but oh my god, you're so awesome! Thank you very much for very detailed answer! You helped me to clarify a lot of things and it's so much more understandable for me. Btw. you should start working in MS as a documentation writer :p
https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualbasic.devices.keyboard.sendkeys?view=netframework-4.8
&gt; Btw. you should start working in MS as a documentation writer :p Thanks! I wrote and maintained some WinForms library for the first 6 years of my career. We were proud of our documentation, and I was close to our tech writers. I tried to work really hard to learn from them. (Also, async programming is one of my favorite topics. I taught myself how to use the older patterns by pretending I knew what I was doing and writing tutorials for other people!)
You are correct. I left that part out and didn't want to edit. Already to difficult to get spacing right on the mobile app.
Write 10 descriptions of a class that takes some inputs and produces some results. They can be simple, but should be abstract. Ask everyone to sit in a group and agree what to name each class. The task isn't "over" until the vote is unanimous. If that doesn't occupy them for a week, nothing will.
That's awesome. I am currently working as a junior developer in my friend's little company. I started there a year ago and at that time I knew almost nothing (I'm not even studying IT school) - but now I'm developing UI and communication with hardware like PIC MCU's, Wago PLC and now I am also learning with Mitsubishi MELFA robots. I learned everything I know by just diving into it and I can say that that's the best way how to learn something. And I'm very glad for people like you who can spend their time to explain something very well to a random stranger on the internet. Thank you!
Just curious if there's some trap I'm unaware of with just exposing an Action property on your class? For example, if the behavior I desire is to have one, and only one, callback wired up, wouldn't the public Action property suit that?
https://docs.microsoft.com/en-us/dotnet/api/system.string.substring?view=netframework-4.8#System_String_Substring_System_Int32_System_Int32_
Wait so you're telling me substring in java != to substring in c#? Damn. Well alright now I get it. Thank you!
Try using .NET Core 3.0 Preview and import [System.Text.Json](https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=netcore-3.0) and System.Text.Json.Serialization](https://docs.microsoft.com/en-us/dotnet/api/system.text.json.serialization?view=netcore-3.0). These two namespaces are some of the latest additions for that .NET Core version.
Maybe you could write a program that replaces angle brackets with whitespace and pipe it in?
Ask for a small program to remove them for now.
1. host your own nuget package server 2. one by one, convert projects to use this package server, re-hosting all 3rd party packages here and converting every project reference that gets included in multiple solutions into a library project that produces a package hosted in the package server Ultimately if you have any kind of regulatory environment at all and are not producing OSS yourself, you probably want to host your approved organization packages in house somewhere. Doing so gives you the ability to audit what packages you are using, what licenses they use, keep track of what known vulnerabilities they have and have one place to look when attempting to resolve if new packages would introduce compatibility issues. The only good excuses for depending on public nuget feeds are: 1. your project is itself in a public nuget feed 2. your project accepts contributions from people who wouldn't be able to have access to your nuget server Same goes for npm and other package repositories.
I don't think there's really ever going to be a solution to this considering people barely are following any sort of existing guidelines as it is or if they are, it'll be different elsewhere. In my projects, we always aim for something like /Customers/CustomerExtensions as that solves the issue with an entire folder littered with extension methods. Being mindful of asking ourselves "can this new extension method be generic enough to be applied to not only customers, but also X?" or "does it even make sense to create an entire ext method just to do this very specialized thing once"?" Finally, nothing is going to take down 40 ext classes aside from cleaning up technical debt as I'm sure some of those classes are obsolete or not really useful.
There's nothing wrong with doing that. But if you're writing an article about events, then you should actually use events.
&gt; Finally, nothing is going to take down 40 ext classes aside from cleaning up technical debt as I'm sure some of those classes are obsolete or not really useful. It was a project that was well past the 200k lines of code mark. They were useful, it's just not really possible to communicate where your utility methods are when 300+ people are "on your team".
I learned alot in this article, thank you!
I envy you. I am at the point where even thinking about any kind of UI programming makes me want to puke. Winforms - dead, WPF - dead, blazor - not born yet, UWP - stillborn, cross-platform .net core libs - weird pre-alphas, react and friends - hey there are 24 hours of amateur videos that show how to build hello world app that breaks 2 months later. 20-30 years of walking in circles. Sad.
I think you’re analyzing it too much. There’s pretty minimal overhead to including all of the extensions in one namespace. Unless space is at a premium (like microcontrollers), I wouldn’t worry about it. C#/.NET is already huge, a few extra functions won’t make a difference The only issue i can think of is name collisions when you have an extension with the same name as a regular member. It may cause some confusion, but I’d argue it’s a bad idea to begin with
Where are you copying the email addresses from, and where are you pasting them into? Probably anyone here could write a small program that would remove those brackets for you.
Thanks! Included your point in the article. Actually I made a whole post around it you can find it here [https://kudchikarsk.com/publish-subscribe-design-pattern-in-csharp/](https://kudchikarsk.com/publish-subscribe-design-pattern-in-csharp/)
I’ve struggled with this as well and feel .NET lacks good guidance on the matter. Here’s where I’ve landed recently: &gt; My first thought is to have _/Extensions/_ in my project and put both of them there. This bugs me because it means I’ll pull in the _VendorExtensions_ methods when I might only want the _CustomerExtensions_ ones. That makes me want to try something more like _/Extensions/Customers/_ and _/Extensions/Vendors/_, but then I’ve got a bunch of namespaces with only one type and that bugs me too. I think the latter is closer, but not quite right. I’d name the namespace after what you’re *adding*, not what you’re adding it *to*. Suppose you’re adding Base64 helper methods. These might span multiple types, really — let’s say `string` and a fictitious `ByteArray` type. So, put them in a `MySoftware.Extensions.Base64` namespace and have `MySoftware.Extensions.Base64.StringExtensions` and `MySoftware.Extensions.Base64.ByteArrayExtensions`. This means: * the namespace makes sense again. * you don’t just have a single type inside. * you can mix and match. You’re not pulling in a huge amount of extensions you don’t want. * in consuming code, the intent of the `using` statement becomes clearer. Why are you extending string? To add Base64 helpers!
Got it, thanks!
Extensions often belong next to the interface that they extend. If you import the namespace containing the interface then you get the extensions as well. For example an IEntityReader&lt;T&gt; in a database abstractions project, that has a LINQ style Single method. You could create a GetById extension method that passes a predicate to the Single method. There's no case where you don't want consumers of the interface to see GetById, but it doesn't belong on the interface because it doesn't need to be there. Doing so would require unnecessary effort from implementers of the interface, and logically it isn't part of the 'interface'. Now say you want a GetProductsForCustomer extension method on IEntityReader&lt;Product&gt;. This depends on your domain as well and so that becomes the place to implement it. It's the lowest place in the dependency tree that has all the dependencies required by the method. Grouping classes together in folders based on language features generally feels bad, I'd rather do it by aspects of the domain. For example I'd have an Encryption and a Signing folder in a Cryptography project but not Exceptions and Extensions. Once you get past seeing related interfaces, models, extensions, exceptions etc together you'll see the benefits from the cohesion this brings.
Is anyone aware of when we will see any of these unstable versions released as a stable version?
The same is in 2.1/2.2 Migrations builds your project, loads assembly but never runs code. It creates your DbContext directly (without DI) with parameterless constructor. Your DbContext has only one constructor with options param. Either create a paramless constructor or add design time factory (recommended). Factory can also use config eg. from secrets or dev file, so don't hardcode connstring. https://docs.microsoft.com/en-us/dotnet/api/microsoft.entityframeworkcore.design.idesigntimedbcontextfactory-1?view=efcore-2.1
Almost as if Java and C# are different languages with different frameworks. Amazing.
Use a grid with two columns (or rows). Set one column to max width, the other to zero. When you are ready to change content, put the new content in the hidden column. Then use an animation to reduce the first column to zero width while increasing the other column to max width. It should give the impression of one piece of content shrinking to nothing while the other expands to take its place.
Write extension methods that are applicable to **all** (or at least **most**) instances of a type. This is an example for a bad extension method: `int CountLines(this FileInfo fileInfo)`
I hate extension methods because they overcomplicate unit testing. Ever tried to write a unit test checking a `ILogger&lt;T&gt;.LogInformation(...)` call?
This dude sees sharp!
Basing on u/Slypenslyde Just let them argue till everybody agrees on **How to do DDD right**
There is actually a difference though - with an event, being able to raise the event is private to the type. If you have a public Action property then anyone can invoke.
While they are, C#'s initial framework was designed to be easy for Java developers to switch over to C# as Java was the dominant programming language in the enterprise market when C# was created. Well, that and Microsoft was really irritated with Sun because of [the lawsuit](https://en.wikipedia.org/wiki/Microsoft_Java_Virtual_Machine#Sun_vs._Microsoft).
Anyone can invoke, *and anyone can null it out*. Ew.
Thanks mate
Sounds like you don't know about WPF's navigation features: https://docs.microsoft.com/en-us/dotnet/framework/wpf/app-development/navigation-overview The samples shows a browser as host, but all what is mentioned applies to NavigationWindow as host for standalone desktop applications.
Good luck with that then
Good luck with that then
ContentControls, with implicit DataTemplates are a cheap and easy way to swap out large areas quickly.
I was wondering about this control as well. It seemed the hot thing a few years ago then it seems to have ground to a halt...
The way I do it is to have a MainViewModel as the data source for the window. This has a property called ActiveVM which is bound to a content control that fills the window. Then use data templates to map the VM type to a control type. Now when you change the property the whole window switches. You can also have multiple properties and controls. This allows you to sub divide the window.
Take a look at `DateTime` struct, and `DateTime.Now`. This will let you get the current date and time.
Thank you very much, I'll look at it
Two things not in the article or discussed below. 1) Events are actually property like. I just took this from MSDN. As you can see when you do += it will call add and if you do -= it will call remove. They recommend locking. private EventHandler&lt;EventArgs&gt; PreDrawEvent; event EventHandler OnDraw { add { lock (objectLock) { PreDrawEvent += value; } } remove { lock (objectLock) { PreDrawEvent -= value; } } } 2) If you have 10 things subscribed to the event, it will work through the invocation list. If the third one throws an uncaught exception, the remaining seven will not be fired. You can get around this by iterating through the invocation list yourself and wrapping each call in a try catch.
It works fine I've no idea what problem you are envisioning. MVC can serve SPA's based on React for example, a SPA is just HTML and Javascript like any other web page. It can also expose REST api endpoints which are obviously supported in Javascript. SignalR can run on the server too and hooking it into the client is trivial as there's a Javascript client.
&gt; Just curious if there's some trap I'm unaware of with just exposing an Action property on your class? People can set it to null. With events, people can only subscribe and unsubscribe.
&gt; Customers and Vendors, and I make extension classes for both with the obvious names. LongCustomers and LongVendors, right
Yeah, I've done all that. SPAs + REST API's are what I use, not MVC anymore.
 using System.Text.RegularExpressions; public static class Extensions { public static string GetSubstringBetween(this string @string, string first, string second) { return Regex.Match(@string, $@"{Regex.Escape(first)}(.*?){Regex.Escape(second)}")?.Groups[1]?.Value ?? ""; } } // ... Testing string target = @"\tN: 101\t"; string specifier1 = @"N:"; string specifier2 = @"\t";// don't forget to escape if you're not looking for "TAB" but \t string result = target.GetSubstringBetween(specifier1, specifier2); // result = " 101"
Depending on whether you're testing the class using the extension method, or the extension method itself. Your extension methods should be pure really, or at least not depend on "stuff". For this case, as ILogger&lt;T&gt; is being passed in public static void MakeMagic(this ILogger&lt;T&gt; logger, string message) { logger.Log(message); } you could 1) mock ILogger&lt;T&gt; in the class that is using the extension method. 2) Most loggers provide global configuration which is consumed at start up. You'd just configure it with a "do nothing" logger. 3) to test the extension method, Create a dummy ILogger&lt;T&gt;, when it uses the extension method the dummy records what happened. You can do this with mocks too. I know you were using ILogger&lt;T&gt; as an example, rather than it being the specific problem, but this post applies to anything where this is a problem. Going back to your example, I wouldn't even have an extension method for this. Loggers generally provide plenty of scope for formatting already, so use the inbuilt functionality rather than handing it off to an extension method.
My biggest gripe is seeing extension methods like .IsNull() and the like. If a property or method is accessed on a null object it's expected to throw an exception. Don't write code that breaks fundamental principals of the language.
This is why I've more or less moved away from extension methods, with the rare exception of extending a built in type such as DateTimeOffset for a specific formatting string etc.
I remember that discussion a few weeks ago. Someone was OK with just dumping shit onto `string` and `int`. I worked on a codebase once that had super specific and niche extension methods on a string purely to avoid a simple `using` to get the static method instead... bizarre.
The standard one from Microsoft. https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions Enforced by: https://github.com/DotNetAnalyzers/StyleCopAnalyzers
A shame as despite the quirks you occasionally need to work around it is quite good.
I've already read microsoft standards. what I really looking for is the **order** of the function and variables and so on. for example you must put interface implementation in the end of your C# class, and constructors should be the first thing in C# class, etc...
Can't you save an initial state of files to DB (including last modified date) and do a cronjob to check the new state of a file every minute/hour/day , against the state in DB?
Ah I see.
Well I might be wrong here, but I think the most common order of members in a class is: 1. private fields 2. public properties 3. constructor 4. public methods 5. overrides 6. private/helper methods Anyway, that's how I have been doing it for the last 6 years and I have yet to have anyone complain about it. As for interface implementations, I put them under number for with a separate region which is named like the interface.
Thank for sharing this. It's looks readable and yet convenient
I find it easier to set up mocks for small interface with extension methods than having to read the code to find out exactly which method of a large interface is being called.
We use a frame and a navigation service to change the content of the frame to a new page. Navigation is managed entirely by the outer window so each page is it's own mvvm world.
ContentControls are the way to go, but pretty much everything can do dynamic content in some way or another. I like using TabControl with a custom behaviour on the tab header to give a close button for the standard browser-like tabs functionality. Here you can have an event that bubbles up with the type of view to add and the main window listens to it, creates the view and adds it to the tab control. ContentControl is even more flexible, just subclass it, back it with a stack / queue / list, whatever data structure you want for the behaviour you need, and just change the Content property depending on that. So you could make a multi-stage form click through with back and forwards with just a list of views, could make a breadcrumbs style navigation with a stack &amp;#x200B; If you are really struggling to understand how to do it, take a look at some wpf framework and see how they implement it. I don't use MahApps that often, but the demo app with full source code on github was a source of inspiration when trying to work out how to achieve something similar to some of their controls
The problem is I'm writing an app that needs to automaticly download a file from Google Drive that just was modified. If I run a cronjob there would be a delay and I guess it would also cause performance issues.
TL;DR: no
/r/SavedYouAClick
This just seems like something Google drive wasnt made for, which Google drive in specific?
The issue he/she/it likely is facing (and I did as well) is that it's not clear which method you need to mock. What is the extension method calling, with what parameters? That's annoying to check.
Yeah. If I was having the same problem I'd probably remove the extension method altogether. They're great for some things and a PITA in others.
Arrays are immutable... You don't need to count the number of items to find the length. So: no
So it’s a O(1) operation then? It doesn’t traverse the array in the background? And is this the same for lists and dictionaries?
You might be better off using the changes API and using the token to page through changes as they happen: https://developers.google.com/drive/api/v3/reference/changes/getStartPageToken Call getStartPageToken and then list on a schedule and use that token to know if your dataset is out of date.
The [Prism framework](https://github.com/PrismLibrary/Prism) is an excellent choice for anything non-trivial. It allows you to create modular applications. For instance, you define a region and Prism takes care of the heavy lifting of swapping out content in that region. The regions aren't limited to simple content regions either. You can define an adapter for advanced scenarios.
https://developers.google.com/drive/api/v3/push
I'm pretty similar, but tend to put properties below the constructor In private fields I tend to sub group between const, static, readonly and variable Don't always use it as a hard and fast rule though. In WPF I like to group everything for a dependency property together and wrap it in a #region, it is just whatever makes the code most readable for when I need to come back to it
Their "unstable" versions have been quite reliable for me, so I recommend just using the "unstable" versions. They seem to do a "stable" release every couple of years, hence why they are only on version 2 right now.
For the standard types, yes. The .NET single threaded collections generally keep track of the number of items in them. Concurrent collections are a different story though.
This
Where do you put delegates and events?
This is nice and all, but what if the array changes while looping? for (int i = 0; i &lt; array.Length; i++) { sum += array[i]; if (whatever bullshit reason) array = new int[array.Length + 5]; } Would storing the length speed up? int length = array.Length; for (int i = 0; i &lt; array.Length; i++) { sum += array[i]; if (whatever bullshit reason) { array = new int[array.Length + 5]; length = array.Length; } }
Sounds like you need an event driven approach or a web hook. https://developers.google.com/drive/api/v3/push
I would handle them as I do with interface implementations. So file them under number for but enclose them with a region named "Events" or something.
Let's say we have `a**b` How would the compiler know if you want to: * Exponent `a` with `b`: `a**b` * Multiply `a` with the value pointed by `b`: `a*(*b)` And if we have `a***b` how do would the compiler know if you want to: * Multiply `a` with a multilevel pointer: `a*(*(*b))` * Exponent `a` with the value pointed by `b`: `a**(*b)` I don't think you could add this operator without breaking the current syntax.
No, because the length is still a pre computed field. It might end up changing what the code does though, in your example.
You could try using a decompilier like dotPeek on the dll
Yes, but in the OP's example the array reference doesn't change, so the compiler can safely know that it can query the length once and it won't change. However in my example the the reference do change, so either the compiler completely ignores the caching, or it updates the hidden variable. And we don't know it yet.
Why not compare the IL? Seems odd to focus on the x86 machine code.
&gt; This is nice and all, but what if the array changes while looping? Then Roslyn simply won’t [hoist](https://en.wikipedia.org/wiki/Loop-invariant_code_motion).
Look into circuit breaker pattern. I wrote a blog post about it https://topswagcode.com/2016/02/07/Circuit-Breaker-Pattern/ Try Google other resources. And try to take a look at Polly. https://www.google.com/amp/s/www.telerik.com/amp/blogs/using-polly-for-net-resilience-and-transient-fault-handling-with-net-core
It’s not about counting. [It’s that the compiler detects that the variable cannot change within the loop,](https://en.wikipedia.org/wiki/Loop-invariant_code_motion) so it pulls the code outside the loop (“hoists” it).
Then your colleagues are legally allowed to play football with your head under Papal Bull CCCXLVII.
Check out the [documentation for `Array.Length`](https://docs.microsoft.com/en-us/dotnet/api/system.array.length?view=netframework-4.8#remarks) says right there that it's O(1). [Same with `List&lt;T&gt;.Count`](https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.count?view=netframework-4.8#remarks)
Storing the length in a local can help, yes. If the JIT ends up storing `length` on the stack rather than in a register then potentially it'll be slower, but in 64 bit mode it probably won't have to spill it to the stack.
This varies a lot because in general MS only makes guidelines for API. The order of your source file is technically not "public", though I think it does matter. I've seen C# devs settle on a *rough* order, with a few common deviations that have good explanations. The order is real close to the one LeonidasFettikus posted. 1. Constants 2. Fields 3. Properties 4. Constructors 5. Public methods 6. Protected methods 7. Private methods 8. Events 9. Nested classes "Delegate types" aren't listed, I don't really feel like there's a convention *or* that they are widely used anymore. The convention I like is "they are types and go in their own file", but "somewhere after fields" also seems common. ## Common deviations: If properties have backing fields (because none of our 5+ syntax sugars are a sugar for 'when you need a backing field'), I find a lot of people break the order and put the fields near the property: private string _name; public string Name { get { ... } set { ... } } The accessibility order of methods is nice, but *Clean Code* advocates for using locality for relationships. In that case the order would be hard to make in a numbered list because it looks like: public void DoSomething() {} private int DoSomethingHelper() {} public void DoAnotherThing() {} ... ## What matters: In the end, be consistent. Figure out what order you like and do that in every file. I can get used to orders I haven't seen before, but I can't get used to every file being in a different order. ## Opinion: Focusing really hard on unit testing has made me tend to write classes that have 4 or less methods total, unless it's a ViewModel in which case most methods end up delegating to other types. Strict organization of methods doesn't matter as much when most of your types have 1 public method! It means when you see private helpers, you don't have to ask, "Who uses this?" because there's only one possible answer.
Nice. Thanks!
HttpClient.GetAsync supports CancellationToken, that would be one way to support time outs. But best approach would be to go with [kiksen1987](https://www.reddit.com/user/kiksen1987/) suggestion, HttpClient has native support for [polly](https://docs.microsoft.com/de-de/dotnet/standard/microservices-architecture/implement-resilient-applications/implement-http-call-retries-exponential-backoff-polly).
&gt; this is nice and all, but what if the array changes while (in the middle of the for-loop) looping? Then I reject your code in code review. Don't do that, end of. Find a different way that isn't crap. Probably with an input list/array/enumerable/span, and a _seperate_ List as the output.
Thank you for sharing this valuable information. &gt;"Delegate types" aren't listed, I don't really feel like there's a convention or that they are widely used anymore. The convention I like is "they are types and go in their own file", but "somewhere after fields" also seems common For delegate i prefer to put thim with after event because somehow events are delegates. &gt;If properties have backing fields (because none of our 5+ syntax sugars are a sugar for 'when you need a backing field'), I find a lot of people break the order and put the fields near the property Actually i do separate backing fields from properties. For properties or fileds section, i sort them by type then by alphabet: private int age; private int calorie; private string name; &gt;In the end, be consistent. Figure out what order you like and do that in every file. I can get used to orders I haven't seen before, but I can't get used to every file being in a different order. I totally agree with you on this point. And I was trying to find a standard approach for styling and ordering members, but i think it's up to programmer and his preferences.
&gt; For delegate i prefer to put thim with after event because somehow events are delegates. 1. There's no "somehow" about it, events are a syntax sugar over delegates. 2. There hasn't been a reason to explicitly declare an event delegate since .NET 2.0 in 2005 thanks to EventHandler&lt;T&gt;. 1. The "reason" would be, "I don't want to use the same delegate signature.", in which case you are wrong. Breaking one of the few patterns everyone has agreed on for more than a decade just makes your code harder for anyone else to use.
Watch thenewboston and read through tutorial point. After you feel like you got the hang of it, give yourself a mini and simple project to improve yourself
I don't think calling the JIT stupid is going to work out well for you ;)
Delegate are much wider the just event handler, for example: a list of long running methods that need to be executed one by one. It would by something like this: private List&lt;CustomDelegate&gt; actions; ... public delegate object CustomDelegate(params object args[]); For this example i would put the delegate after events even that it's not an event in concept
Is open source Polly good? I just poked at the website and while it says it's open source, there wasn't a link to the repo. I can find it myself, but it's annoying. Also Telerik \*shudder\*
This is the real answer. Thank you...
Removed: Rule 4.
But you *should* often store an array itself to a local, because the JIT doesn't optimize away these heap accesses.
If you use the CodeMaid extension, I believe it organizes everything for you.
If you indent code with 4 spaces, it formats it more cleanly in reddit. Much easier to read. sample { my sample }
Also useful to know is that while the Linq Count() method is normally O(n) and IMO should generally be avoided, the implementation _does_ have a O(1) short circuit if the runtime type implements ICollection (which defines a Count property), which does include List&lt;T&gt;.
It is generally a good practice to assign any reference variable you access more than once to a local because changes to non-locals are considered observable and thus the variables are generally not candidates for optimizations. This is particularly useful for arrays because for example the length could be changed by another thread while the method is executing so array access for a non-local array basically always has to check boundary conditions where a local can optimize away boundary checks based on previous validations.
it's nice to know that sometimes foreach loops trough the array faster than the for. i never expect that
Calm your tits ma'am, it was just an example... The hell is wrong with you?
If by installer you mean a .exe or .msi that installs your program to a directory, then do this: * run the installer if you haven't already * use dotPeek (it's free) or another decompiler on the binaries (exe's, dll's) of your code to look at the generated IL code. * extract the IL code into separate .cs files. (note: "extract" here may mean just copying and pasting the IL into .cs files -- don't know if decompilers typically have a sort of "extract to source" feature) * you may need to make some adjustments to the IL code since it isn't exactly 1:1 with the original source code. Now, this time, commit the code to a REMOTE version control system (VCS) like Git. You can use Github, Bitbucket, VSTS, or some other free service that hosts a VCS.
By the way, while you can never really be certain for third party libraries, as far as I know, MS reserves properties in the Framework for values that can be computed in constant time. So you can be reasonably certain that any member in the Core Framework that isn’t a method call is going to be O(1). If anyone has any counter examples I’d love to hear of them, but I personally don’t know of any.
Polly is pretty much the standard at the moment.
https://github.com/App-vNext/Polly
Thank you so much. It’s my bad that I didn’t used git
Thanks
And that’s part of the problem; next time you submit your code for code review, please make sure to remove any example code from your pull request. How did you even get a job here again?
Because the IL only gives us intent. The machine code tells us what it is actually doing.
This was a misoptimization I found in the fsharp core libraries a while back that I fixed.
Fun fact, sometimes LINQ is faster than a normal for-each loop. https://www.infoq.com/articles/For-Each-Performance/
Yeah, I was thinking about pointing that out too. Like you said it's at least smart enough to check for `ICollection` but *very* often I see people abusing it. Like building up complex LINQ queries to a variable then calling `Count()` multiple times, not realizing they're processing those entire queries each time. Another particularly bad one is checking `Count() &gt; 0` on built up queries (which is O(n) just to check that it's not empty) instead of `Any()` (which is O(1) for the most part).
Thanks, I'll give it try!
I can't think of any getters that aren't O(1), but I know there's some setters that are. E.g. setting `List&lt;T&gt;.Capacity` is O(n) in the count of the list
Well, I have to ask -- why don't you want to use JWT's? Or are you just reinventing the wheel to gain some deeper understanding?
Fun fact: whenever you hear someone saying "A isn't necessarily faster than B... In fact, sometimes B can even be faster than A!", it is almost certain that A is about 10 times faster than B on average.
All right, you're forgiven. This once. ;)
I didn't hire /u/rabirx, did you?
TL;DR: Also, `foreach` tends to be faster than `for`.
This guy gets it.
I'd say that the IL tells us what the machine is actually doing. A different machine, sure, but the .Net Virtual Machine *is* a machine after all, complete with an instruction set architecture, a memory model, etc. What if you're writing C# code that doesn't run on x86? .Net Core supports ARM now. I'd probably say that both IL and final machine code should be analyzed. IL so that you have the portable view of what's going on, machine code so you have the practical view of what's going on.
And for testing your polices in polly, take a look at Simmy https://github.com/Polly-Contrib/Simmy
Decouple the generation of the dungeons into a worker process/background task
Baseless.
I will have a play :)
If you think that, you really need to learn more about optimizers. The depth of their fuckery cannot be overstated.
Could you give me an example on how to use implement this in C#? I already have a function to authenticate google drive but I don't know exactly how to use a web hook like this. I'm quite new to C#.
Just go once down the logger rabbit hole. The logger extension method calls another extension method which calls another extension method where each extension method slightly changes/extends the parameters. Mocking the final Log call is really hard because the message that you put in will not be available anymore but is hidden in some formatterFunction.
You can not mock static function calls. The linking is static.
&gt; Also Telerik *shudder* Stuck with this at work. FWIW the latest versions are much better, less instances of "it does ALL THIS but lacks one critical property" still a pain to use any of their controls due to the kitchen sink nature of the design.
Your options: * modify B to implement I * modify I to include the methods of B that you want to access * cast to either B or I as appropriate. A generic method like void F&lt;T&gt;(List&lt;T&gt; x) where T : B, I { x[1].MethodFromB(); x[1].MethodFromI(); } doesn't work, because there's not a *single* unified type that both C1 and C2 descend from that would satisfy the constraint.
Does this apply to foreach, and does it apply if the contents of the array change but the length remains the same? For example: foreach (Rect r : Rectangles) { r.SetWidth(r.GetWidth()-1); } The length of the Rectangles array does not change but the Rect at every index is modified?
I’m curious too. Even more so as to why not use a pre-existing library for it (e.g. IS4) Ofc if he’s just wanting to learn then awesome
Less, let's forget nuance and context in favor of gross generalizations.
I know how much crazy shit optimizers can do. I also know that there are people that will write c# code that never touches x86 hardware.
If you are using foreach, it creates an `IEnumerator` (or equivalent structure). For most collection types, modifying the collection will invalidate the `IEnumerator`. Meaning the next iteration of the loop will fail and throw an exception. *** r.SetWidth(r.GetWidth()-1); This statement doesn't modify the collection itself, so what I wrote above doesn't apply.
If this comment was satirical it was well played...
I didn’t call anything stupid and I happen to know for a fact that there are many micro-optimizations that are obvious to humans which RyuJIT doesn’t apply. So I’m not sure what your point is?
Yeah we have an old version too. I looked at upgrading, but there were enough breaking changes to make it painful :/
Ha, it's loggers all the way down :)
Well you said it wasn't smart. !smart == stupid. I was winding you up.
Ah thanks, so if I understand correctly the array should implement IEnumerator.MoveNext(), and if it is like this example: https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerator-1?view=netframework-4.8 Each loop it will run [MoveNext()](https://i.imgur.com/KJ0luuF.png) and the compiler should recognize collection.count can be hoisted?
&gt; understand correctly the array should implement IEnumerator&lt;T&gt; Mostly correct. Technically speaking it just needs to return something that looks like an IEnumerator. It doesn't literally have to implement the interface. Why? Because in C# 1 we didn't have generics. So to avoid the cost of casting everything to an Object, it was decided that anything with `MoveNext` and `Current` would work.
Had the same issue here, we were running v2015.2.728.45 which is quite old and no docs really matched properly. When I updated directly to teleriks latest using the installer everything exploded rather terribly. 1000's of errors and when it could run nothing worked right. Just this past month I took another crack at it, this time laborious upgrading telerik controls 1 version at a time from the version I was at to the very latest. I ran into a couple spots where I needed code changes through the process but nothing major. Did most of the work in a single afternoon. After that everything was smooth, never say the explosion I had the first time I tried. I assume it is one of those middle versions where things go wrong, its just easier to handle smaller deltas even from a 3rd party.
Not at all, using a local is a a fairly common optimization in .net code.
Yep, notice I didn't mention mocking the extension methods. I prefer if my interfaces are smaller so that the constructor of consumers documents what those classes require to do their job. I aim to be able to test the class without reading it's code. Calls to extension methods make no difference because I've mocked the interface. Using extension methods improves my code and doesn't hinder testing.
Not sure what this example shows. As it’s a `foreach` (I assume the `:` is supposed to be `in`), `r` will change each time; ergo, it cannot be hoisted. It will try in *this* case, though: foreach (Rect r : Rectangles) { var settings = WidthSettings; r.SetWidth(r.GetWidth()-settings.Margin); } Unless, for example, `WidthSettings` is a property whose getter is non-trivial.
That result is the opposite of just about everything I've both read and personally benchmarked. `for` outperforms `foreach` on arrays and `List&lt;&gt;`'s. There's something non-obvious going on there causing `for` to perform more poorly than it could, but we can't tell because the actual benchmark code isn't provided, and even their table of results doesn't clearly match the code snippets in the article.
So in a test setup you first mock all interfaces for all tests independent on whether for a specific unit test you need the mock or not? I typically try to keep my setup as small as possible but your style might work as well.
You can't change an array's length, though.
These are really the options. Inheritance doesn't work in a sibling way. Now, if you can't change B, and this is a small project only you maintain, it's not the worst thing in the world to assert "It is known that every implementation of B also implements I so that cast should be safe. Still, when I do hairy things like that I tend to also have to say: void DoSomething(List&lt;B&gt; items) { foreach (var item in items) { if (item is I castItem) { // what I want to do } else { throw new ApplicationException("Remember when you said it'd be fine to assert all B also implement I?"); } } } So really your best bet is to modify B to implement I, even if it has do-nothing/abstract implementations.
In the case of a variable that refers to an array I don't think your comment is correct. You mentioned another thread changing the length of the array; for one thing, that's not possible. For another, a local variable pointing to an array on the heap does not magically make a copy of the array or lead to any kind of useful optimizations. It certainly doesn't make it somehow immune from seeing the actions of other threads nor does it somehow avoid accessing heap memory (which is where the array is stored, naturally.) So, I think I disagree with almost everything you said in your comment about arrays. Can you provide a code sample that actually illustrates what you're talking about regarding elision of bounds checks by assigning an array reference to a local?
You mean like using async and &lt;Task&gt;?
you can, with unsafe code. You shouldn't however under any circumstance
No, the JIT is skilled at eliding bound checks when working with the .Length property of an array, which is readonly
Can you explain how you could use unsafe code to change the length of an existing managed array object?
Ah my bad, I mean in, not : I am not thinking r will be hoisted, I am wondering if the length of Rectangles will be hoisted, as I assumed this foreach just converted to: for (int i = 0; i &lt; Rectangles.Length; i ++) { Rect r = Rectangles.GetValue(i); r.SetWidth(r.GetWidth() - 1); } In this case I figured Rectangles.Length could be hoisted, while some of the elements of Rectangles are modified the length itself remains the same. However another user explained the foreach uses ienumerator instead of just converting to a for loop.
&gt; However another user explained the foreach uses ienumerator instead of just converting to a for loop. Right. `foreach` in .NET is *not* syntactic sugar for `for` (one might think from the naming that it is), even though the result ends to be the same. Also, as has been explained, if your collecting is a list, changing it while enumerating it will throw.
On all major .NET runtimes I know of, the size is stored as an `int32` directly behind the data. So simply take the address of the data, cast it to an `int*`, then subtract 1 and modify it. Also works with strings ``` fixed (int* pData = &amp;array[0]) { int* pLen = pData - 1; *pLen = 2737372; // don't do }``` If you do that with a string (with appropriate casting for `char*`) and set the length to 1 (of an originally longer string) and print it, it only prints one char
Are you saying this article *doesn't* contend that?
How recently have you benchmarked it?
 unsafe { fixed (int* pData = &amp;values[0]) { int* pLen = pData - 1; *pLen = 1; Console.WriteLine($"Length of array after mucking about: {values.Length}"); foreach (var i in values) { Console.WriteLine(i); } } } Prints: Length of array after mucking about: 5 1 2 3 4 5
Only if the array cannot change in between accesses (which happens when the array is local, but not when the array is a field). If you have a for loop for example: for(var i = 0; i &lt; array.Length; i++) { Foo(array[i]); } whether or not array bound checks are elided depends on whether or not the array is a local or if it observes changes that could be made externally. Similarly the runtime could potentially optimize other calls like: var x = y.Bar; Foo(y.Bar); if `y` was a local and there was no way to observe the act of invoking `get_Bar()`, the runtime would be free to optimize the call here.
We're on an even older version. Some controls could be replaced with standard WPF controls with a bit of styling, but it was still a pita. But you're spot on about the documentation. We had licensing issues as well.That was a kicker on top of the other kicking. I like your approach. It could be a nice, incremental change set.
Well it's more of a philosophy of dependency management and self documenting code so it really depends on how neat the interfaces are. Of course I can read the code I'm testing, but I aim for the dependencies declared on the constructor and method signatures to be as light as possible, consumer focused interfaces (the I in SOLID) So it doesn't have to go against small setup. Of course there's trade-offs. It's convenient to depend on IDbAccess but better IDbReader if that's all you need. Even better IMyClassStorage, the implementation of which maybe aggregates database, file, and cache access and possibly implements many client specific interfaces.
Are the partial postcodes always 3 letters? Can you take the first 3 letters of the full postcode and search for that in the database table by modifying the query String. Which really should be a parameterized SqlCommand, returning a SqlDataReader. If the reader has rows, then return true, else false. Basically change the querystring to use a where clause and query for the partial Code in the particial code table.
v4.7.2 (64bit RyuJIT)
You might want to read about clean architecture
That looks interesting. Can you provide any good article about it? Or google it would be fine?
Sorry, was typing on my phone: no, I mean completely decouple it. Have a worker process or background task whose _only_ job is to generate dungeons via that API. Those workers would have all the logic to know when to backoff (when they start to see those 404/500 errors) and can otherwise be optimistically generating new dungeons for you at all times. You then put those in a data store somewhere that your game runtime can access as well, can it'll have pre-built dungeons available at an instant. Of course this full decoupling requires that you are able to specify how those dungeons are to be built/rendered independently of runtime requirements. Or, you generate them in such a way they can be adapted at runtime to fit those requirements.
You could possibly create your own binary format that packs the ints (something like what MessagePack does I believe). Each int can be represented by 8-32 bits (1-4 bytes) prefixed by 2 bits that indicates the number of bits that follows: Prefix: 00 - means 1 byte Prefix: 01 - means 2 bytes Prefix: 10 - means 3 bytes Prefix: 11 - means 4 bytes For example the number 1 would be represented as 0000000001 in binary (00 prefix followed by 1 in binary) The number 300 would be represented as 01100101100 in binary (01 prefix followed by 300 in binary) Finally Base64 encode the byte array. This should reduce the payload - but actual tests would be required to see if it fits your use case.
Nice analysis! One little statistical nitpick. There is very little statistically significance to the difference between those time distributions with large standard deviations ([https://www.desmos.com/calculator/55hprpwm4p](https://www.desmos.com/calculator/55hprpwm4p)). The p value for the t tests against all of then are &lt; .00001 indicating the difference is not statistically significant.
I had thought about that. The first section of the postcode could be 3 or 4 characters. There is usually a space between the first and section section however as the data is a product of Amazon market place/ebay transactions the formatting is not consistent. I.e I can't use space as the delimiter.
No, because array length can't change
This is the correct takeaway from this. Anyone who doubts this, feel free to go to referencesource/GitHub and check out clr/.net core source code. Tons of places where exactly this happens. I think they even had it in their optimization guidelines, I'll link the pdf if I find it.
You should be able to do an inner join using Like. See below: INNER JOIN PartialCodes ON FullCodes.Code LIKE CONCAT(PartialCodes.Code, '%') https://stackoverflow.com/questions/17003165/inner-join-with-like-clause
Look at the generated IL, for and foreach are the same.
As I understand maybe you can solve in two step for your problem. First you have to implementation exception handling system for prevent crash whole app. Second you need async job for calling 3rd party api. This job will check api.
What? No it isn't.
```csharp private static Task&lt;List&lt;string&gt;&gt; GetTaskResultsFromMyTable() { SqlConnection connection = new SqlConnection("Data Source=S734410-W10;Initial Catalog=MyDB;Integrated Security=True"); connection.Open(); SqlCommand command = new SqlCommand("select * from mytable (nolock)", connection); AsyncCallback callback = new AsyncCallback(ResultHandler); command.BeginExecuteReader(callback, command); return taskCompletionSource.Task; } private static void ResultHandler(IAsyncResult result) { List&lt;string&gt; stringValueList = new List&lt;string&gt;(); Task resultTask = taskCompletionSource.Task; SqlCommand command = (SqlCommand)result.AsyncState; SqlDataReader reader = command.EndExecuteReader(result); while (reader.Read()) { stringValueList.Add((string)reader.GetValue(1)); } taskCompletionSource.SetResult(stringValueList); } ``` This is more easily done with [`TaskFactory.FromAsync`](https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.taskfactory.fromasync) ```csharp private static async Task&lt;List&lt;string&gt;&gt; GetTaskResultsFromMyTable() { SqlConnection connection = new SqlConnection("Data Source=S734410-W10;Initial Catalog=MyDB;Integrated Security=True"); connection.Open(); SqlCommand command = new SqlCommand("select * from mytable (nolock)", connection); SqlDataReader reader = await Task.Factory.FromAsync(command.BeginExecuteReader(), command.EndExecuteReader); var results = new List&lt;string&gt;(); while (await reader.ReadAsync()) { results.Add((string)reader.GetValue(1)); } return results; } ```
You could make the base class implement the interface. If possible I would personally make the base class abstract, and have the interface methods as abstract. If that isn't an option, you can make the interface methods virtual annnnnnnnd have them their `NotImplementedException`. The child classes would have to implement the methods in both cases.
Cheers, I'll check that out tomorrow when I'm in the office. I did try passing the postcode in to a stored proc as a param and wildcarding it but it wasn't working as intended. I'll have another go tomorrow.
Removed: Rule 4.
If you changing array length while iterating it you should reconsider your programming skills and maybe be learn some more of proper architecture.
You need to show more of your XAML. Context often matters.
You could get 2 substrings from whatever full postcode you get (of 3 and 4 char lengths) if you can't guarantee length, then just check for those 2 in your table. 2 checks is still better than iterating the entire table.
If i would get1euro of reading all the rules of any subreddit i visit i would become a millionaire
I totally get you point in your second example, but I can't wrap my head around the first one, maybe you can go into a little bit more detail? As long as the array gets passed without ref, the array parameter can never point to a different array and neither can an array change it's size after initialization. Why shouldn't the compiler be able to optimize it away?
Ah you mean break off the first 3 or 4 characters and check both?
Right. It's not ideal, but if you can't guarantee the length of a postcode, but you can guarantee it's only a length of 3 OR 4, then a 2 checks isn't the end of the world.
It's an abstract concept, but I would recommend to begin with taking a look at what is called "onion architecture", uncle Bobs lectures on YouTube and his book (guess how it's called).
&gt; For another, a local variable pointing to an array on the heap does not magically make a copy of the array or lead to any kind of useful optimizations. It *is* a useful optimization. It allows the JIT to skip one load every cycle (getting the address of the array into a register) and further allows it to eliminate bounds checking because it knows `array.Length` is a constant if `array` is a local that isn't mutated.
&gt; I did have a plan where the client hosting would be done in Node, and REST stuff in ASP.NET Core, either works for me. Sounds good!
I ran it and got: Length of array after mucking about: 1 1 If they add significant extra bounds checking due to the possibility of unsafe code though thats stupid, that could be a compiler flag, which I think you have to have with unsafe anyway? With a non-local variable though you *can* re-assign the reference that variable points to, if its not readonly, so perhaps that is what causes it.
Assigning a reference variable to a local doesn't change a thing. It is a reference so the JIT has no guarantee that the referenced object won't be changed by my another thread or else as you seemed to implied. Assigning to local doesn't make it magically readonly.
Three things that will work which we are not yet interested in pursuing: - No strong naming at all - Dynamically load the weakly named librarys during runtime - Getting the source code of B and builing it and signing it ourselves
I'm surprised that no one here has mentioned this, but in my opinion the most important use case for structs is native code interop. When you call a C function from C#, it is critical to place every bit in your data structure exactly where it belongs, and StructLayoutAttribue with FieldOffsetAttrubute is what lets you do that.
Just to add, I think Resharper automatically changes .Count() to either .Count or .Length as you type if it's able to determine that this method is used on an ICollection&lt;T&gt; or an array respectively.
Not really. The JIT is allowed to make different native versions of the same IL depending on some conditions. For example it could make a very fast compilation (with few optimieations) to reduce the overhead of JIT and if that method is accessed often, make a more optimized version in the background and switch them once ready. While the current Jitter in .net framework probably doesn't do that very often, the new tier-compilation would. And finally the size or number of native instructions is not necessarily a good metrics. Sometimes using more instructions (but simpler ones) make the job of the low-level optimizer (such as branch prediction) more efficient.
* step 1 - don’t * step 2 - see step 1 Unless it’s a academic exercise, attempting to write your own security is about the dumbest thing you can do. Just use one of the existing, proven solutions written by experts.
However, the array itself can be replaced, which is the essence of the problem. class Foo { private static int numbersSize = 0; public static int[] Numbers = new int[numbersSize]; public static void ChangeNumbersSize() { Numbers = new int[++numbersSize]; } } void Main() { var x = 10; while(Foo.Numbers.Length &lt; x) { Console.WriteLine(Foo.Numbers.Length); Foo.ChangeNumbersSize(); } }
Yeah, it also suggests the other thing I mentioned, replacing `.Count() &gt; 0` calls with `.Any()`, on `IEnumerable` types
Even if it *is* readonly, I believe you can still change it via reflection.
Thanks, following this advice I have implemented it as a singleton (and learnt about how to use transient services within a singleton) and am in the process of creating a controller method to refresh the dataset. &amp;#x200B; With regards to the committee.I got their buy in buy explaining the reduction in cost but really I was already implementing what u/ToeGuitar brought up anyway. There was no way i was going to let a good idea die. ###
"it pays big dividends" - depends. in big companies. yes. agree. startups ... not so much as the requirements change all the time. Also ... which one of those mappers work against REST apis .. so that you never need to write them yourself?
A simple backup cache could also do the same with less effort i think. Just store generated maps and in case of need handle it via the cached maps. Those caches could be also automatically filled from time to time by a hostedservice within the web app
One and three of those seem like reasonable paths to take.
Actually, the generic method approach works fine. C# does indeed support intersection types. The following code compiles fine and behaves as expected. interface Foo { void DoFoo(); } class Bar { public void DoBar() { } } class Program { static void Main() { } public void DoFooBar&lt;FooBar&gt;(List&lt;FooBar&gt; fooBar) where FooBar : Bar, Foo { fooBar[1].DoFoo(); fooBar[1].DoBar(); } public void DoFooBar2&lt;FooBar&gt;() where FooBar : Bar, Foo { List&lt;FooBar&gt; fooBar = new List&lt;FooBar&gt;(); fooBar[1].DoFoo(); fooBar[1].DoBar(); } }
Use mono.cecil to change assemby B's assembly C reference. Add Public KeySignature to C reference.
So that was kind of the joke :)... &amp;#x200B; The concept of OOP has dissipated into the void and we are filling the world with vapid service layers. What did OOP teach us? Who can remember, we weren't born then.
this is why you do it the obvious way until actual profiling shows it is a problem.
Here is a program which not only will not optimize, it will crash with an `IndexOutOfRangeException`: public class NotOptimizableArrayExample { private int[] array = new int[5]; private Random random = new Random(); public void Display() { var s = ""; for(var i = 0; i &lt; array.Length; i++) { s += array[i]; } Console.WriteLine(s); } public void DisplayLocal() { var s = ""; var local = array; for(var i = 0; i &lt; local.Length; i++) { s += local[i]; } Console.WriteLine(s); } public void Change() { var n = new int[random.Next(30)]; Interlocked.Exchange(ref array, n); } } public class Program { public static void Main() { var random = new Random(); var example = new NotOptimizableArrayExample(); Task.Factory.StartNew(() =&gt; { while(true) { Thread.Sleep(random.Next(500)); example.Change(); } }); while(true) { example.Display(); } } } The fix is to use `DisplayLocal()` instead of `Display()` (causing the program to instead be infinite loops). What I am saying though is that even if `array` was `readonly`, it cannot be optimized because the runtime cannot guarantee that the field will not change (it could be changed still via reflection for example, or unmanaged code fiddling around with the heap).
Correct. `Baz` satisfies the restrictions on `FooBar`, but `FooBar` isn't restricted to being `Baz`, it can be any type that extends `Bar` and `Foo`, but it must be the same type throughout `Test`. Consider: class Quux : Bar {} It should be obvious that it would be a problem for `Test` to add `Bar` objects to a `List&lt;Quux&gt;`, even though the reverse would be OK (in a non-generic context).
profiling would never have shown this problem. just adding bulk to the data cache that doesn’t need to be there and a tiny bit of slowness all over. plus with core libraries more is more. the key i think is to build a deep understanding of your language and compilers via profiling and looking at the asssembly and reading the docs so “the obvious way” is more often going to be the fast way, for you.
Threads like these make me feel really dumb, I’ve been using C# for 4 years and I have very little idea what’s going on (I know what a local variable is at least) what is OP trying to do? Make some sort of customization to C# arrays?
He’s trying to make a point that using a variable external from the loop has no effect on the outcome of the code generated by the compiler. What the OP doesn’t realize is that C# compiler will simply hoist that variable out of the loop anyway. So for him to compare generated code with or without the optimization is pointless because it is literally the same generated code. At its core it simply boils down too what make it more readable for the developer(s) that have to maintain the code base. Which the OP doesn’t touch on at all, and ultimately comes down to personal preference.
Any seasoned dev should tell you, the first thing you don’t do yourself is auth. Leave it to people far smarter and far more dedicated to it. There are Identity as a service providers like AuthO, which is great for small startups that want to spin up quickly. Then there’s IdentityServer, which my company uses in production and is all-around a very great product and one of the best .NET projects we have available. http://docs.identityserver.io/en/latest/
I honestly kind of forgot about setters as they see much less use from me, but fair point. On that note, I’m not sure I knew Capacity even had a setter. I am familiar with the constructor parameter to set it, but didn’t know you could change it directly on the fly. I’m guessing it throws if you try to size it below the number of items already in the collection?
never had shown this problem... because the perf impact was small? if that's the case then it doesn't matter either way.
Another option would be to create an intermediate class that implements I if it's not possible to modify B.
Following a rigid order does not make code readable. Try to organize it to keep related functions and variables near each other.
RIP in peace
ATM machine
no, its that the slow would not be concentrated in a single function that would show up when you profile, it would be scattered all over.
What are you guys programming where you care about that small of a performance hit? (Actually curious)
Their egos
Great to hear!
?
TCBY Yogurt (Did I do this right?)
Not all `ICollection` capacities have a setter but all of them can be set in constructor. For example you can't access `Capacity` of `Stack` other than initializing it in constructor. [link](https://referencesource.microsoft.com/#mscorlib/system/collections/stack.cs,47) in which case the only exception is `ArgumentOutOfRangeException` and for `&lt;0`. But for those `ICollection` that you can access the `Capacity`, you are right it will check it against `_size` which is the number of items in the list and throws if smaller. [link](https://referencesource.microsoft.com/#mscorlib/system/collections/generic/list.cs,116)
Read-only applies to a storage location, not a managed object. You should still be able to change a managed area using something like resize, which, IIRC, modifies the underlying managed reference. Such an object can then be passed to the constructor or initializer of another object, resulting in a read only reference being mutable (assuming my conjecture about managed arrays is true)
Neat. :) I will definitely give your project a look. I have been working on a project that does that too. In case you wanna see my version: https://github.com/ZacharyPatten/Towel
While this is true, it's also true that the compiler basically emits a for loop when using the foreach language feature for something that is known statically to be an array, which is a fairly hefty optimization.
Probably because JWT token
It's only beneficial if it's a valuetype inside a reference.
&gt; It didn’t have an interface for it nor did it have virtual methods. I would hate it if the BCL were full of classes that implement interfaces that exist for the sole reason of letting someone mock them. That’s just bloat. &gt; My issue with the solution we had was that we had to make our own ITmer interface, wrap the Timer with our own timer. You just have to make a TimerProvider. Or a DelayedActionProvider. Not much wrapping required.
Guys u/zombittack u/pgmr87 u/AshersLab I'm totally aware that there are other, already existing solutions and that writing such a things requires knowledge, but you gotta get it somewhere, don't you? It isn't going to be used in soft for $$, it's mostly for training purposes and getting better understanding of auth/http
Never store the refresh token directly in the Database!!! The refresh token is equivalent to a password, and we know, these shouldn't be stored in plaintext either... You should use something like Pbkdf2 (KeyDerivation.Pbkdf2 function in .net core) with some randomly generated salt to create a password hash, which is then stored in the DB. When you get a refresh request, you then only compare the hashed values.
NT technology
Have you checked out IdentityServer’s source code? That will help you understand it. You could also check out the OAuth2 spec: https://tools.ietf.org/html/rfc6749
Yeah agree on this one. I removed most of the complex part to show an example. But I totally agree that it should be encrypted and just compare the hash values.
&gt; I would hate it if the BCL were full of classes that implement interfaces that exist for the sole reason of letting someone mock them. That’s just bloat. So much this.
&gt; But I totally agree that it should be encrypted and just compare the hash values. It should be **hashed**, not encrypted. That's a fundamental and important difference.
 `System.Timers.Timer` is a low-level class, it doesn't need any more abstraction. Or would you also like to see `String` have virtual methods? If you need to mock a framework base type, then you are not testing the correct thing.
Thanks for great responses! :) I was wondering why did they choose a different approach for Random class?
I consider string as a primitive, but not a timer. I don't consider string a dependency, but timer most definitely is. String is just data, timer has behavior.
Would interface on top make it worse? I wouldn't care less if it exists when I don't need it, but I did need to mock away a dependency. I had to put a little effort which could have been avoided. I am not complaining, just wondering what bad would an extra interface cause? Use it if you want? Options?
I did that of course. But when I design classes and relations I follow IoC principle and thus give a way to inject dependencies, rather than have no options to do so. SOLID?
&gt;I was wondering why did they choose a different approach for Random class? Presumably so you can swap in your own random number generator.
I don't think either of them would work that nicely, you would probably need to extend from Control itself. Word of warning though, there are a lot of difficult problems to solve to make a spreadsheet like control (building a calculation graph and detecting cyclic dependencies, parsing input formulas etc.). I don't know your background, but if you aren't sure which control to use then this might be a challenging project. There are only one or two spreadsheet implementations in wpf, and it is so difficult the people that made them can sell them
You say that, but not having an interface and non-static methods around IO.File makes it kind of annoying sometimes. I usually pass around streams, but when I get someone elses code that goes straight to file its annoying to test
Well true. There probably is no case I would want the same for Timer, other than testing. No interface shows the intention.
Timer is a dependency but I want to ignore it when testing (so that tests don't wait till timer hits the time, I want to enforce that to happen imediatly for example). I test TimedDoor, not the timer, so I wanted to get rid of the dependency. But yes, the argument that it's less effort looses against the argument that the intention without the interface is more clear.
&gt;I am not complaining, just wondering what bad would an extra interface cause? Use it if you want? Options? By this logic, why does .NET even let you create classes without an interface at all? Why not have it auto-generate an interface whenever a public class is compiled?
Because some classes carry no behavior, just data. Usually you should, (like 90% of cases for classes **with** behavior). You don't want to enforce to depend on custom behavior, you want to have options as requirements change.
Almost correct. It is usually better to call the overload of `TaskFactory.FromAsync` that takes an `Func&lt;AsyncCallback, object, IAsyncResult&gt;` instead of directly calling `obj.BeginXXX()` and giving it the resulting `AsyncResult`. The version with the callback signature is more efficient (source: Stephen Cleary "Concurrency in C# Cookbook", O'Reilly. Recipe 7.2). Thus: SqlDataReader reader = await Task.Factory.FromAsync(command.BeginExecuteReader, command.EndExecuteReader, null);
Having everything interfaced won't make bad code any better.
Simple Linq expression? If you have it in a list just group this by date and take max value for each day.
What about returning new jwt token after every request that has DateTime.Now + 5 minutes?
Could you provide an example?
Because I can't just take the max value, but I need to take the max value for names that is duplicated.
I figure it's ok to put them in the same project. What's the use case? Weigh stufff and post data?
Oh sorry, thanks for that one :D yeah and salt :)
&gt; Because some classes carry no behavior, just data. That’s a valid point. I still feel like creating an interface around any behavior is an anti-pattern. Create abstractions as soon as you have at least *two* implementations.
Also possible but how about for users who are idle for a long time? So if they became inactive for some time, then they have to logged in again. Most mobile apps don’t require you to re-login if you’ve been idle for like 3 hours.
Looks interesting. I have been using GraphQL for my latest client projects, will check this out.
Have you tried to set a breakpoint on both the IsActive = true and IsActive = false? Then you will at least know if IsActive is set, and perhaps is turned off immediately.
If you enter a programming sub and can't understand a pure example, maybe you should reconsider your intelligence. If you enter a forum, and can't even read &gt; Before any more of you go full-rage: **it was just an example**, FFS people whats wrong with you? Maybe you should reattend to school.
What job? What pull request? What the hell are you talking about?
Ok i don't have way to check this but it will look something like this : public class datetimeTest { public DateTime DateTimeMain { get; set; } public string a { get; set; } public string b { get; set; } } public void test() { List&lt;datetimeTest&gt; mData = new List&lt;datetimeTest&gt;(); List&lt;datetimeTest&gt; returValues = mData.OrderByDescending(x =&gt; x.DateTimeMain).GroupBy(x =&gt; x.DateTimeMain).Select(x =&gt; x.First()).ToList(); } Yeah i name badly my variables.
With no example code, it is hard to tell what you need, but this should be a good starting point: &amp;#x200B; var list = new List&lt;KeyValuePair&lt;string, DateTime&gt;&gt; { new KeyValuePair&lt;string, DateTime&gt;("Test", DateTime.Now.AddMinutes(1)), new KeyValuePair&lt;string, DateTime&gt;("Test", DateTime.Now.AddMinutes(2)), new KeyValuePair&lt;string, DateTime&gt;("Test", DateTime.Now.AddMinutes(3)) // This is the one that we should get }; &amp;#x200B; Console.WriteLine(list.GroupBy(x =&gt; x.Key).Select(y =&gt; new { y.Key, Value = y.Max(x =&gt; x.Value)}).First());
So if I have like 07.06.2019 10:16:00, Test 07.06.2019 11:16:00, Test 07.06.2019 12:16:00, Test 07.06.2019 13:16:00, Test 07.06.2019 18:16:00, Test1 07.06.2019 19:16:00, Test1 07.06.2019 20:16:00, Test1 07.06.2019 21:16:00, Test1 07.06.2019 22:16:00, Test2 07.06.2019 23:16:00, Test2 Then it would return only the latest datetime if the string is duplicated?
Well check it, it should work if i remember this correctly i cannot check it now. You order your table/list/ienumerable by date descending, split it by date only part of a column and take only first top row of each group. You can split it to separate variables to check how this is working on each step. Just after by order add ToList() and drop it to some VAR that you are going to use next step.
That's sort of true, but anything you might want to mock automatically has two implementations. Where I diverge from many people is that you should be mocking low-level implementations, not every single dependency on other classes. Unit !== class. In this case, I don't want to be testing that the Timer class works, because it's not my code and I have to trust in it to some extent, but I also don't want unit tests that take seconds to work. I'd probably treat it in a similar way to a message bus, or other ports/adapters and focus on testing the business logic the timer triggers.
It worked really well, given that the items has the same string Name. But what would it be if actually test1 and test2 string name has the same date but different time? Would it in this case just ignore test1 or test2 depending on which of these datetime has the oldest time?
Maybe I am dense, but are you actually testing against ***time****?*
I would say no, it was just written before that pattern became popular. Using the adapter pattern to create an interface for your code where you can drop in Timer or your mock timer is a simple solution and the solution for mocking a lot of Framework stuff.
dotPeek offers a feature to export the decompiled sources to a Visual Studio Solution
There seems to be more weight towards not having interfaces for BCL types in the responses here. And some incredulity about why you'd want them at all. &amp;#x200B; In our large system we have created wrappers for timer, DateTime.UtcNow, and IO related stuff. &amp;#x200B; Why? Because we unit test by simulating IO instead of having actual IO. We unit test specific points in time instead of whatever "now" happens to be. We run unit tests single-threaded where we can manually trigger the timer callback, set the current date, etc. It would have saved some typing if these wrappers already existed in the framework somewhere, and maybe it would've highlighted that dependency injection is a good solution.
I wouldn't call it simpler, but I would agree that it's cleaner :)
That's 100% what I think.
Wow I have read that this forum is full of retarded snobs and just low professional people who came here to scratch their ego, but now I can see one on my own eyes. Before an more of you go full-rage: it's just one person I met here, FFS people whats wrong with you?
It is looking just at the date and nothing else. If you need to take last line for each 'string' you need to include the string in the grouping part.
That is ok. Unrelated comment though - why test if a specific object exists only to then remove all such objects? The test is redundant - just leave the `RemoveAll` bit - worst case scenario is it will remove 0 elements.
Did you try to search for the obvious like eg “amazon music api documentation” or similar? I found this: https://github.com/Jaffa/amazon-music/blob/master/DEVELOPMENT.md Granted, it’s not C# but you said you have Python experience. So maybe give it a read? Sorry, I have no better information right now.
Json web token token?
Did you try the Xamarin forum for support? I can understand your point as I was more or less in the same position as you are a year ago. The designers are useless for anything complex so you should invest in writing XAML or code the UIs in C#. I am surprised you have so many crashes and such. It used to happen a lot a year ago but the situation improved markedly with V3 and subsequent VS updates. I am on VS2017 and my app is quite complex as apps go (many screens and odd workflows) and I cannot remember the last time I had a crash. I invested some time in an automated release build and several scripts to deploy to device and such (not much used anymore as VS works fine now). Startup and debug are still slow so you have to school yourself to reduce the number of times you need to do that. In my experience the fastest debug way is to use the iOS Simulator but I mostly use a fast Android phone and develop on Windows.
Hi, thanks for that. I did search for similar ("C# access to amazon music" kind of searches), but found nothing. I'll have a read, cheers again.
`Random` is not thread-safe.
Well technically the list is passed by reference. Maybe he wants to do more with the edited list later.
My colleagues are obsessed with List&lt;T&gt; and refuse to use anything else. Does anyone even append to collections anymore?
We're witnessing the future right here.
No, technically the list is passed by value, which is the CLS default for parameters unless otherwise specified. Passing the list by reference (e.g. `Test(ref List&lt;Values&gt; item)` would be a different thing altogether. :) Back to the topic at hand - unless I misunderstood your comment, I don't believe this affects anything I've said. Despite how C# handles reference parameters (in that you can modify them within a method), you still might want to return them as an output, so you can then "pipe" your output, something like: Test(someList).DoSomethingElseWithIt(); or DoSomethingWithAList(Test(someList)); As for my other comment - it's not affected by the scope of the variable, I was just mentioning that the check is redundant and the code will do the same (but slightly quicker) if you omit it (without losing readability - though I admit this might be subjective).
What do you use instead, and why?
I'm not sure that's the worst C# sin I've committed here, but point taken. Resolved in [https://github.com/Rophuine/ToRandomCollectionType/commit/d22342eef65f2ea96e9c800319d6aae004b9a204](https://github.com/Rophuine/ToRandomCollectionType/commit/d22342eef65f2ea96e9c800319d6aae004b9a204)
You should use the correct data structure for the task at hand. The first link from the article addresses this at length!
Sometimes an array or HashSet. Often an IEnumerable&lt;T&gt; or ICollection&lt;T&gt; if it doesn't matter what the implemetation is, or I just want lazy evaluation for efficiency. Sometimes ReadOnlyList&lt;T&gt; if that is needed. I'd want to know why someone would use List&lt;T&gt; if you're not going to dynamically resize it? (face it, you aren't)
Salt that is different for each item you hash. Use the cryptographic random class to generate a random byte array for that.
I develop using Xamarin.Forms and it is amazing to work with. Sure here and there there are some headaches, but for the most part it is a joy to work with in our environment. We have multiple cross platform applications sharing the same code base, I have built a renderer here and there but quite frankly there are so many bits and pieces scattered all over github that rolling your own isn't always the best idea. I use this for UI dev with XAML as it allows for hot reloading your UI with production environment data. https://marketplace.visualstudio.com/items?itemName=Xamarin.XamarinLiveReload
Ok, so in your opinion, what should it look like? Should I drop the test?
It does seem very similar, your going the math object route I see. Mine takes it the equation as a string &amp; then does some math on it. Do you need help setting up approxinations/derivatives for your math section right now?
If you're going to modify the passed-in list, you don't need to return it. You should either make the function return nothing or have it return a new list.
Some developers who have been living under a rock or who don't do web development might not know that JWT is a token spec. I'd rather have someone say something redundant and gaudy than leave off context that can be useful (to a percentage of the audience).
Ok, so if I don't return the list, the changes I do on the passed in list would also affect the class where I have the object?
Yes. List&lt;T&gt; is a class, so it's a reference type. If you change its contents in your function, it will be changed for the caller as well.
If you want to be resistant to people with gpus, you shouldn't use pbkdf2, you would use bcrypt. If you want to be resistant to people that have a lot of memory, you wouldn't use bcrypt, you'd use scrypt. There is some discussion here: https://security.stackexchange.com/questions/133239/what-is-the-specific-reason-to-prefer-bcrypt-or-pbkdf2-over-sha256-crypt-in-pass
My library can also parse math syntax from a string (in case you missed it). Check out the "Towel.Mathematics.Symbolics" class (there are examples in the Mathematics examples project). You can also parse Linq expressions, which is much cleaner syntax than strings in source code. And yeah... I haven't even touched derivatives in the symbolic code yet. :D There is a lot to do.
Funny thing: in the generic case, `ToList` is simpler and more efficient than `ToArray`. And since most of my dealing with any lists is via `IReadOnlyList` anyway, it doesn't matter what the collection behind it is.
And after your update my comment does not make sense anymore. I've updated the answer.
Sure, it's more efficient, but for most people's use cases, the performance differences is so insignificant that the time it takes to micro optimize fetching from an array of 20 elements four times starts to become expensive. Now, there is a time and place where something like that matters and this may not even be the right language to do the job.
My point is, `ToArray` is basically never the right answer, unless you specifically need an array. It is not more efficient than `ToList`, it is not shorter to type, it is not clearer in intent (YMMV). When you need a `HashSet`, then use that. But worrying about `ToArray` vs `ToList` is useless; just use `ToList`.
You are correct. I was thinking there was no [`BeginExecuteReader`](https://docs.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqlcommand.beginexecutereader?view=netframework-4.8#System_Data_SqlClient_SqlCommand_BeginExecuteReader_System_AsyncCallback_System_Object_) overload that took `AsyncCallback, object`, necessitating the use of `FromAsync(IAsyncResult, Action&lt;IAsyncResult&gt;)`, but there is.
Yes. That’s what I did in the end. I’ve another question though, I have an api controller for applications outside the network to post data to the hubs and a MVC controller. My understanding is that I should injecting my weighin scale handler models and hubcontexts into the mvc controller or should I be using injecting it in the page?
I've been using Xamarin for about 6 years. For about a 3-year stretch, I think I'd have told you I think MS did not plan to invest in it. But they have spent a *lot* of time and effort on the upcoming version of VS for Mac. Practically the only reason it exists is for Xamarin projects. (For plain old .NET Core, it'd have made more sense for them to point at VS Code, it was more mature a few years ago than VS for Mac.) I want to comment on some of the things you said though: &gt; The designer tool quite literally doesn't work, making changes, no matter how small requires to rebuild the project. I've never used a XAML tool that didn't crash VS within 20 minutes. I've been doing WPF, Silverlight, and all its ilk since Windows Vista. This is normal, though I feel your pain. Just get used to *never using the designer*. You don't need it. I haven't used it for 6 years. &gt; I'm restarting VS dozens of times over the day because it seems to be the only way to fix various issues I'm facing. Make sure you're using some version of VS for Mac 2019, and definitely switch to the New Editor. VS4Mac has been atrocious for years and this thing is like a gift from a deity. Much more stable, much more predictable. &gt; The documentation is either great or useless. I feel you. MS has done a very poor job getting Xamarin up to MS quality. I get in conversations with the Xamarin docs people on Twitter sometimes, I feel sorry for them. I get the feeling there should have hired quite a few more people for the job. &gt; I needed to create an EntryRenderer (CustomRenders), I read the documentation, write the code and VS reports that it's obsolete. You should've made a Reddit thread about this. But supposedly [It was a mistake.](https://github.com/MicrosoftDocs/xamarin-docs/issues/1169) &gt; Community support (compared to Flutter and React-Native) is virtually non-existent, Xamarin has 3K stars on Github while Flutter and RN have 66K and 77K respectively. Here's my opinion on that: There isn't a lot of *hobby* Xamarin work. If you're some "kid" looking to get a project up and running, you've got choices like Electron or Flutter or React Native or "just use Swift" or "just use Java" that are completely free and don't care if you're using Mac, Windows, or Linux. Xamarin is pickier. Sure, it's included with VS, but my experience is you can't really expect to be deploying apps without paying for a license and they aren't cheap. I also don't think you can really function well if you only have a Windows PC: in my experience everything just works better on a Mac even though VS for Mac is far less sophisticated. (I could be wrong. They've changed some things recently. The last time I tried to do hobby Xamarin work was about 5 years ago, and if you added more than one page to your project in community edition you suddenly passed some barrier and it wouldn't let you deploy.) So hobbyists pick "literally anything else". Only enterprises tend to pick Xamarin Forms. That affects the community. Hobbyists love to share their code and don't have reasons to keep it secret. Enterprise worker bees generally agree they can't share their code widely and are often working on projects they can't openly discuss. Also, they aren't generally rewarded for going above and beyond their requirements, so they aren't really pushing limits and adding features "for fun". I also think Xamarin projects are hard to discuss over forums. You can set up a WPF project with practically no dependencies and do a lot. Most Electron problems can be hacked out in a plain old Node project. I feel like an "interesting" Xamarin Forms project can take 10+ minutes to get to a working reproduction state. Or if it's just a plain UI question, the answer can sometimes require up to three different platform answers if it requires custom rendering. It's a hard framework to use because it's solving a very hard problem in a very complicated way. I don't know enough about Flutter or React Native to suggest why they feel easier, but I suspect it has a lot to do with "They have been owned and built by one company, Xamarin was a smallish organization that had to tempt Microsoft into buying them so they'd have the capital to proceed." ## Anyway... You asked if there's "any hope". I sure don't know, but I'm still using it. Microsoft is definitely spending money and effort on it. But I don't think they market it heavily enough because it "interferes" with the Windows strategy if they do. That's also behind why we don't see many visible Microsoft applications developed in Xamarin. (Every time I say that people insist MS is heavily using it, but it's always in the context I see above: "Well, it's internal tools...") I feel what you feel, but XF 4.0 is the most viable Xamarin's ever been. I still think it's realistic to expect Xamarin will be more heavily used for enterprise applications than consumer applications. Enterprises use stable techs. Consumer applications tend to hit it big by doing weird things on shoestring budgets, which tends to lend itself to free and bleeding-edge tech. Don't do yourself a disservice. Keep your eye on things like Blazor. Dabble in Flutter and React Native. If the ship sinks, make sure you've already figured out which one you'd like to jump on.
You do know that someone is going to use this in production code, right?
It will make bad code longer :)
Seriously, just wrap it in an interface. You should be including wrapping untestable classes for testing anyway. Two more examples, any file io and DateTime.UtcNow. The number of tests I've seen where someone has used DateTime.UtcNow in their code and to test it have checked it's before some future date. Unfortunately on that future date the test blows up. Better still, stop using any of the three system timers. **RX** is a great way of creating timers. The best bit is you can use the TestScherduler. This allows you to do funky things like (paraphrasing) MyRxTimer.AdvanceTimeBy(10); which will move the timer on 10 seconds without actually waiting 10 seconds.
Ah I did miss that fact. You don't seem to have integration or derivatives done at this point. Is your expression class the equivalent of an Abstract Syntax Tree? If it is symbolic derivatives will be relatively easy to implement for you.
Actually this is entirely wrong. Classes that contain behaviour should require no mocking because the behaviour should not be dependent on external mutations. Here's an example. You have a method that uses DateTime.UtcNow. This is a bitch to test because time refuses to stay still. The correct way of implementing that method is to pass in the date you want it to use. The method will then return predictable results. This is the thing with testing. Bad design is hidden behind mocks. You should really only need to mock classes at the application boundary.
How come it‘s more efficient?
"Our build is suddenly taking 4 hours to run, anyone know why??". "Ok found it, someone was waiting 3 hours and 58 minutes in a test".
Yes, the "Expression" is the root of inheritance for all syntax types. It is a syntax tree. :) I'm planning on eventually adding a virtual "Derive" and "Integrate" method on the base Expression type and then overriding it in the various implemented types (same as how the "Simplify" method currently works). I just haven't had time yet.
Some people don't feel very good about themselves and haven't learned healthy ways to deal with it. So instead of identifying and exercising their own strengths, they prefer to deride everyone else. "If everyone else is stupid, I'll feel smarter." That happened here. "JWT" stands for "JSON Web Token". So if you say "JWT token" and read English like a computer might, you'd expand it to "JSON Web Token token" which sounds kind of strange. There are other phenomenon like this, such as "ATM machine" or "$500 dollars". In the end, it's pedantic and self-defeating. There's a lot to talk about and potentially criticize in the article, but these people would rather crack a joke about something as technically complex as a spelling error. It generally makes them feel worse, because later they'll think to themselves, "Wow, somebody else read this and identified security flaws in the example plus they know how to fix it. The only thing I knew about the topic is what JWT stands for. Now I feel bad, I need to find someone else to make fun of."
List&lt;T&gt; is a decent default. performance is never bad, extra feature are there if you need them later. &amp;#x200B; But I agree, if you know the size will not change, array is more efficient. Do that.
90% of the set accepted by or returned from methods I write don't manipulate the set, just iterate through it. So 90% of the time I use `IEnumerable&lt;T&gt;`
It is poorly designed *in your context*. It was designed in a completely different context. In your context, you want a type that calls a callback at an interval and has an interface that allows you to control time during an automated test. There are quite a few ways you can satisfy this, and System.Timers.Timer is one of them. So it's best for you to write an interface that defines the functionality you want *and* allows you to properly mock it. System.Timers.Timer was designed in a different age. It's been around since .NET Framework 1.1, that was in 2003 which means this type was probably being designed and implemented as early as 2002. Things were different then. As far as I know, SOLID didn't exist. Neither did NUnit. JUnit was pretty young then and while I remember seeing scattered articles about unit testing, it wasn't really until about 2005 that I think a big buzz started being created. We didn't have IoC containers. We didn't have mock frameworks. I'm not even sure if I'd heard the word "mock object" until past 2006. So nobody thought about testability when designing this type. Whoever designed it felt like a user could do more harm than good if the methods were unsealed, so they were not unsealed. Whether that was right's been a long-standing debate for *hundreds* of BCL types. *Framework Design Guidelines* suggested you should make everything virtual by default because you can't easily predict what will and won't be useful. But you need to do more rigid testing around virtual methods, and it's likely this factored in as well. Why hasn't a new, better API been released? I think it has, just not in the way you'd expect. Reactive Extensions has testable ways to make things happen at intervals. The Task API also makes this reasonable, and in testing you can use things like `Task.FromResult()` to control if and when one completes. Most people think using System.Timers.Timer is a clunky way to accomplish this task. (this is a very UI-centric timer compared to System.Threading.Timer!) I see it like a dependency on the filesystem, or the network, or any other volatile resource: it is a thing I can't control easily so I naturally wrap it with an interface. That way I put the ugly behind it. This type is where your "system boundary" exists. The types that use it are the things you can't test directly, and must mock in other tests. So your "type that uses a timer" must become "a type that uses a timer abstraction". This is the same as how "a type that uses the network" must become "a type that abstracts the network". We can't mock `HttpClient`, but it turns out we never want to go about mocking a `Send()` then `GetResponseStream()` then all the `Stream()` operations. We'd rather mock a function that returns `Task&lt;string&gt;` or even `Task&lt;SomeParsedJsonType&gt;` instead. The logic that uses HttpClient directly can't be unit tested. That's why we have integration tests and manual tests.
And I do. I need to test nevertheless. I don't want to wait 5s for a test to pass just because of timer.
RX actually sounds like the best alternative. But it's funny. If I just need to start, stop, run and list to timer event, I shouldn't expose more. So end result should be an interface anyways, but for different reasons 😉
Nunit came with. Net 1.0
Yeah, my RX timer class is a wrapper around RX. It abstracts "timerness" so I could use other timers. You need a way to inject the alternative scheduler, but I use a factory which handles the initialisation anyway.
Makes sense. Would you like to see class diagram of the whole solution and give a few comments?
I'd have to look at your code, but usually, if something is dependent on time, it's actually dependent on order, so it's worth looking to see if that's accurate or not. If it is, you can pull the time specific part up the tree.
I think the point about "as soon as you need" should be changed to "as soon as you realise you might need". This is especially the case where you make a package thst others will consume. If you think behavior can have multiple implementations, you should not risk locking the options away. If you work in small scope and don't expose it outside the team then it doesn't matter that much.
Yes. Timer has default configuration as a business rule and I don't want to change that just to run the test.
Not code, just diagram 🙂
You should probably read little more about await/async, it's pretty interesting and useful topic. But something like this should work: private async void create_user_button_Click(object sender, RoutedEventArgs e) { progressRing1.IsActive = true; create_user_button.IsEnabled = false; OffboardGrid.IsEnabled = false; BatchGrid.IsEnabled = false; fName = fNameTBox.Text; lName = lNameTBox.Text; uName = uNameTBox.Text; Password = pWordTBox.Text; Role = RoleDropDown.Text; FullName = fName + " " + lName; UPN = uName + "@workplace.com"; DisplayName = FullName + " " + "(workplace)"; await CreateUserAsync(); progressRing1.IsActive = false; create_user_button.IsEnabled = true; OffboardGrid.IsEnabled = true; BatchGrid.IsEnabled = true; } private async Task CreateUserAsync() { // Some logic and async calls simulated by "sleeping" 5sec await Task.Delay(5000); } Some quick hints if you are interested: * The event handler is on UI-thread so no need to use Dispatcher * [`Task.Run`](https://Task.Run) `( () =&gt; NormalSynchronousMethod() )` is useful for CPU bound operations (e.g. `GetFibonnaciNumbers()`) and your case looks like IO bound.
https://drive.google.com/file/d/1Gn9aoHVuc8jApfwq7if_-ZHMIWPHBBy8/view?usp=sharing
As you can see, he is trying pretty hard to not run it in UI thread. Actually the mistake is trying too much...
Hash set is slower than a list for small datasets. Whether or not it matters is a different issue but worth bearing in mind.
&gt; As far as I know, SOLID didn't exist. Neither did NUnit. Incorrect on both counts.
`BitConverter` does have [`ReadOnlySpan` overloads](https://docs.microsoft.com/en-us/dotnet/api/system.bitconverter.todouble?view=netcore-2.1) as of .NET Core 2.1. There's also [`BinaryPrimitives`](https://docs.microsoft.com/en-us/dotnet/api/system.buffers.binary.binaryprimitives) for for explicit endianness conversions. Both of them are only available in .NET Standard 2.1 (preview), though.
I'm willing to accept it, but does it change my answer? Was that the core thesis? Whether or not other devs cared about SOLID and testability in 2003, MS didn't push it on their devs. If you wanted it, you had to be reading what the Java devs were up to. Something about when Ruby really caught on seemed to make it super popular. Today, MS pushes those practices a lot better. Their stuff's a little more friendly to extensibility than it used to be. It makes a lot of the .NET 1.0 era types look really stupid.
Ah, I just discussed this once again with more people. The solution for escaping time as dependency would be having IAlarm SetTrigger(ITrigger trigger); In some cases it would be time, in other cases it would fire immediately. I think that is the way to go about it.
I really wish IEnumerable&lt;T&gt; were less wordy, otherwise I'd use it everywhere I'm not planning on changing the collection. As it stands, I sometimes just use array because '[ ]' is only 2 characters.
Some men like to watch the world burn.
Arrays have fixed length. How would another thread change it?
Why is this downvoted? This sounds pretty clever.
That’s the most naive thing I’ve ever heard. Of course people append to lists.
If the size of the enumerable is not known (i.e. if it isn't already an `ICollection`) then `ToArray` first needs to iterate it into a list, and then convert this list to an array of the correct size. On the other hand `ToList` can just return the list after it has been created since the size of the underlying array does not matter. If the size _is_ known, then they will be almost exactly the same. So generally it is best to use `ToList` if you don't specifically need an array.
Probably because there are easier ways of swapping out content. But they don't look as cool.
Why is ToArray more efficient? Unless its an ICollection (when using linq methods like where/select it usually isn't) since it can't know the size before-hand it still uses `ArrayBuilder` under the hood. This acts similar to a List - allocating a small initial capacity and expanding capacity by a factor of 2 when it needs it.
Like Azure Active Directory?
Considering all of our debates and arguments in the past, it's funny how much we agree on.
This is horrible.
Hello Visual Basic. Seriously, that's how VB 4 thru 6 worked. Any class could implement any other class's public interface. I think this was a side effect of it being built on COM.
Sure. So top level explanation, you have doors which have alarms. All doors are timed doors, I'm not sure why, but that's a me problem. So here's the hard bit for me. You're teaching TDD, so I assume this is the code's final form, what you're aiming to get to. So I have to guess at the tests you were running as you started from an empty test. and the decisions that led to the final form. The things that leap out at me are the number of things that seem a bit redundant, or missing things. IDoor can open and close a door, but you can't check if a door is open is a missing thing imo, but it might be useless for your system. I think the bits around TimedDoor are too complicated, and the relationship between doors and timed doors too. it suggests that if you have a simple door where the alarm goes off if it is only opened will require a timed door that has a timer set to zero. Is that accurate? I'd move the alarm dependency over to the door and allow different door types to trigger the alarm on their own terms, e.g. when the door opens, when the door is left open, when the door is open out of hours, etc. Currently it looks like any door sub type, AlarmAtNightDoor, would have to have to handle their own alarm instead of the one on the door super class. Does any of that makes sense? The timer interfaces seem to imply they are SRP, but, personal preference, I'd have simplified the ITimer area. I'm also a bit confused about the difference between SetTime and TimeToPass methods. TimeToPass on the concrete class I assume for tests, but I don't know what SetTime does. Timers don't really care about time, they care about intervals. Is that it, does it set the interval? If it does, you can roll ITimerAdjuster and ITimerRunner into one, because they are fundamental functions of a timer. Timers can't operate without those basics. Did any of that make sense?
&gt; but does it change my answer? Perhaps it should. It was a different time. Nobody thought about testability. You really think this is true of the people designing and implementing .Net? Just because *you* and the average code monkey didn't.. Ok. So why wasn't there an interface for Timer and DateTime added in .Net Core? What's the explanation now? Perhaps it's not that people like Anders Heijlsberg were clueless about unit testing and object oriented design, but that they deemed it was a useless abstraction that promoted poor design. Where does MS "push" those practices? Frameworks like ASP and EF, larger subsystems where it makes sense to provide abstractions for 3rd party developers to override behavior. Still not in the low level implementation details like Timer and DateTime. *Base* class libraries. If your application needs a Timer or a Clock, your application should define that contract.
But... the list uses an array under the hood. If you add to the list without apriori knowledge about the size you‘d need to replace the array as well in case size becomes bigger than capacity. So only the final shrink to the actual length would be saved because the list can have a larger array than ICollection.Count. However if you know the size apriori array should be more efficient as List would be an Array plus some overhead. I mean I did no benchmark and we both know that we are talking about stupid micro-optimizations but I don‘t think it‘s that easy to say that ToList is always superior to ToArray except you need an array.
I'm not referring to calling ToArray(). I'm just saying, if you are going to use a collection, and you don't need to resize it, using an array will be more efficient. Slightly less memory is used, iteration is faster. Perhaps more importantly to C# crowd, the meaning is more explicit. "this is a collection of contiguos data that will not change". As an extra bonus, foreach loops on array are as fast as regular for loops, not so with List&lt;T&gt; Calling toArray vs toList is probably less important than which collection will then be more efficient to use after. Generally you wouldn't want to call *either*. You have gone through the runtime cost of using IEnumerable, might as well keep using it. Sometimes you can't or shouldn't though of course.
Simple door has no alarm 🙂 SetTime is needed because I don't want to have a hardcoded timeout value within the timer. I want to be able to adjust it from the door panel. And yes, while writing the test we got more to the how part and components. I agree with the rest.
Excellent - this is exactly what I need. Now I just have to wait for Core 3.0 to come out - WPF app.
&gt; That’s just bloat. No, it's worse. It's a backwards compatibility nightmare. Once you have an abstract interface in .NET, you cannot add methods to it without introducing a breaking change. Which means you cannot add methods to the underlying class without creating ITime2, ITimer3, etc. We saw this in COM-era programming.
Does your ITmer interface shadow Timer? As in does it expose every single method and property on the class it is wrapping? I suspect not. It probably only exposes the ones that you are actually using. And the ones you are using are probably not the same as the ones that I'm using. *** So instead work the other way. Start with your high level abstractions with the API you actually want. Add mocking or whatever to that layer. And plug in low-level components such as timer, databases, etc. as necessary.
Of course not. Just Start(), Stop(), event and Timeout property
You should be able to inject your own configurations for the tests.
And yeah, that was my conclusion 🙂 IAlarm will accept ITrigger. So trigger will be a dependency from alarm and not door
SOLID still doesn't exist as a cohesive thought. Even Uncle Bob says that it's more about feelings than actual engineering principles. (Which I read as a cop-out for not having to justify his theories.)
&gt; We were also revising SOLID. Forget SOLID, it's a bunch of hand-wavy bullshit. What you really need to study is the **.NET Framework Design Guidelines**.
That is true. I was just thinking that it makes less sense to have a timer with 0s timeout rather than have it mocked and trigger immediately.
Solid is a design for change. It's not supposed to be followed dogmaticly but it definitely defines great ways how to improve maintainability. However if done bad it's worse than not using one.
Don't typical typical SQL statements work?
Yeah it's a bit sad, we found two code bugs fairly quickly in our experiments would love to use it for all our code.
It's not supposed to be followed dogmaticly is another way of saying that it doesn't offer concrete advice. Contrast it with the Framework Design Guidelines which offers very specific rules, many of which are testable, and guidance on when the rules should be ignored.
[removed]
Youre saying I can just type INSERT INTO tableName (column1, column2, ...) VALUES (value1, value2, ...); on a button press method? Never heard of ado.net, ive heard the words Entity Framework but im not sure what that is either.
If the array is not a local, another thread could reassign the reference to be somewhere else. That is possible even if the field is `readonly`.
I use the SqlCommand way to do this all the time. Either with SqlDataReader dr = command.ExecuteReader() and loop through the reader for select statements or command.ExecuteNonQuery() for insert/update/delete statements. Entity framework is probably easier, but I'm used to the other way.
At the end of the day, if you are strung up over someone saying JWT *Token*, then you're probably a fucking loser.
No, not really. I can bring down solid into the following tips, let me know which of them is vague: S- split functions until you repeat yourself. Split classes so that they have a single reason to change. Compose them. O- provide mechanism for external changes. Achievable through inheritance or DI. L- inheritance is likely to mutate into something that has more than you need. Good inheritance should be purely additive and you should not fake methods that you don't need from parent. Split what you don't need. Prefer composition over inheritance. I- don't enforce clients to consume interfaces that include more than needed. Split them, inherit them, don't modify what was published. D- we think in concepts, we should not stack dependencies. We should depend on abstractions rather than specific modules. It provides future changes, gives freedom and is a supplement for encapsulation, since we remove the need to know how. Knowing what in most cases is enough.
Oh no. I mean this: https://www.dotnetperls.com/sqlcommand You create SQL command, pass an SQL to it and execute it. Alternative is having EF (entity framework). In that case you will have to generate models from DB (DB first approach) and you will not even need sql.
Use IReadOnlyCollection unless it’s a lazy generator. IEnumerable gives very little guarantees, not even that it contains a finite number of elements.
EF is ORM- objects relational mapping framework, to query dB and put the records into models.
&gt;implement interfaces that exist for the sole reason of letting &gt;someone mock them. You may find that you end up hating this pattern. SOLID isn't a religion- use what works. Perverting your class design just to facilitate testing is a bad idea, imo.
That's the wonderful thing about SOLID. Most of the things you wrote have nothing at all to do with the original definitions, but that's ok because now SOLID means whatever you want it to mean.
I actually don't think this matters because Refresh Tokens should only be good for one use. Once used, a new Refresh Token and JWT should be created. Also, browser, location, OS, other user-agent data should be store with each Refresh Token. With this, when you renew with a Refresh Token, you should be checking if all the existing user-agent data matches the new request that comes in. If there's a match, proceed. If not, fail the request and kill off the existing Refresh Token for that user. One last thing, every Refresh Token should be viewed as an Access Location. What I mean is that when your user logs into their profile, they should be able to go to a page that shows where all their active sessions are at, with the opportunity to revoke any session.
Only problem with that is there are very few "default" (aka easy) collections that implement IReadOnlyCollection
[Actually array isn't more efficient.](https://www.youtube.com/watch?v=IhAzXsw87ns) JaredPar happens to work on the compiler, so I'll take his word for it.
[Array is surprisingly less efficient.](https://www.youtube.com/watch?v=IhAzXsw87ns) JaredPar happens to work on the compiler, so I'll take his word for it.
EF will introduce a whole mountain of complexity that you’re probably not ready for. I recommend you work with SqlCommand until you’re totally sick of repeating the same queries over and over again. Check out this for a simple approach to get you started with some data: https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/executing-a-command
I've built stuff like that at my company. You can access what you want via [System.DirectoryServices.AccountManagement](https://docs.microsoft.com/en-us/dotnet/api/system.directoryservices.accountmanagement?view=netframework-4.8). Regarding a C# front end you could simply use [Asp. Net core mvc ](https://docs.microsoft.com/en-us/aspnet/core/mvc/overview?view=aspnetcore-2.2) or build an api and access it via a single page application. Mvc is super easy IMHO, if you don't really know webdev. Just create a new project in visual studio from the mvc core template and try accessing ad information from the home controller.
I think here we have two arguments, both valid with pros and cons: * If it implemented some imaginary `ITimer` contract, I could mock its behavior without having to create my own abstraction around it. * It's not part of its contract to be easily substituted, it is a simple expression of a system service. You can abstract it if you want. I don't think either one is right enough to win over the other. I prefer even base-level types to have a way for me to mock them without having to wrap them. I could make comparisons and arguments about other libraries that MS seemed to redesign later, but I also think it's fair to state the ones that are most changed today are the ones at a much higher layer, and you're arguing that low-layer stuff need not have that degree of extensibility. It's a fair argument, I just don't agree.
 Nearly everything in System.Collections.Generic implements IReadOnlyColletion. IReadOnlyCollection is just a subset of ICollection. It doesn't say anything about immutability.
You’re not going to “write the bugs” with that attitude...
Yes, only the final shrink is saved. Both construct an array by doubling its size repeatedly until the enumerable is empty, but then the list is done while the array needs an additional O(n) copy. Even if the size is known the list will be as practically as fast as the array. [It literally just needs to set one additional field over the array in this case](https://referencesource.microsoft.com/#mscorlib/system/collections/generic/list.cs,80). There really is no difference in terms of memory and work (of course down to some constant factors) of `IEnumerable&lt;T&gt;.ToArray()` and `IEnumerable&lt;T&gt;.ToList().ToArray()`, so I would say almost always use `ToList` unless you need an array immediately. To sum up: Size unknown: `ToArray()` spends O(n) more work and memory (in terms of garbage generated) than `ToList()` will Size known: `ToList()` spends O(1) more work and memory than array, it only has an additional `int` it needs to store
Makes sense. Perhaps consider an AlarmedDoor as a subclass of Door. That would support more scenarios? It's all a bit hierarchical, so I might refactor towards composition, perhaps have a door which has a features collection? I'm spitballing here :) I might move the SetTime onto the timer still as the door should expose a method "SetTime" rather than exposing the timer directly, again, can't see the code, so bit of a guess. I'm thinking that encapsulating the basic functionality of the timer and then having the specific door interact with it in a more domain specific sense. I am just spitballing though. It's quite fun to look at what others are doing.
Yea, i'm hearing rumors that this might become one of our next projects at work. I need to do some reading on mvc. Thanks!.
Fortunately, SqlConnection, SqlCommand and SqlDataReader already have Task-based async methods on them. You don't have to use the event-based async API's any more, and you don't have to figure out how to convert between the two.
I am careful about inheriting from such general concept such as door. As now there is no other kinds of door, but if we get something like automatic door, we won't be able to have automatic door with an alarm
I agree 🙂 I still like interface but for different reasons. To hide away all the details I don't need to know about Timer under the hood.
On your context class do ctx.Tablename.Add(...) etc
Yep :) This is where composition comes in. You have Door and then Door has Features. Each Feature implements something like security or movement. The hard part there is building a model that understands and can interact with features. You're spot on though, great example :)
If you want to do this with sql it would look something like this //For inserts updates deletes using(SqlConnection conn = new SqlConnection("YourConnStringHere")) { conn.Open(); string sql = "INSERT INTO Schedule(sched_sport, sched_date) VALUES(@sport, @date);"; SqlCommand cmd = new SqlCommand(sql); cmd.Parameters.AddWithValue("sport", "Football"); cmd.Parameters.AddWithValue("sport", "2019-10-01"); cmd.ExecuteNonQuery(); conn.Close(); conn.Dispose(); } //reading data using (SqlConnection conn = new SqlConnection("YourConnStringHere")) { conn.Open(); string sql = "SELECT sched_sport, sched_date FROM Schedule WHERE sched_date &gt; @dateFrom;"; SqlCommand cmd = new SqlCommand(sql); //get everything in the future cmd.Parameters.AddWithValue("dateFrom", DateTime.Now); SqlDataReader reader = cmd.ExecuteReader(); while(reader.Read()) { Console.Write("The sport " + reader["sched_sport"] + " is scheduled for " + reader["sched_date"]); } conn.Close(); conn.Dispose(); } HOWEVER, as you mentioned, you've seen Entity Framework mentioned. That's what most people use now as it turns all your tables into classes and gives you methods to use on them, and it writes the sql for you. So if you generate an EF model of your database (google add entity framework from sql database in c#), you can do the previous things like such //insert a new record using (AutoModDataContext db = new AutoModDataContext()) { var sched = new Schedule(); sched.sched_sport = "Football"; sched.sched_date = new DateTime(2019, 10, 01); db.Schedules.InsertOnSubmit(sched); db.SubmitChanges(); } //read the data using (AutoModDataContext db = new AutoModDataContext()) { var scheds = db.Schedules.Where(s =&gt; s.sched_date &gt; DateTime.Now); foreach(var sched in scheds) { Console.Write("The sport " + sched.sched_sport + " is scheduled for " + sched.sched_date); } }
Lovely! I am glad we think alike!
If im understanding this correctly, conString is like an address that tells where the database is? Im not able to test that code yet but how do I find the correct connection address if that one doesnt work? (Im not even sure if my question makes sense)
It means your source is local. So connection string should refer to that local path.
I would use dapper. https://dapper-tutorial.net/
Unless you don't consider your time very valuable, or your end-users worth pleasing, you should consider investing in a commercial product for what you want to do. You should check DevExpress or Telerik for such controls.
&gt;Moving away from desktop PCs to HoloLens 2, Surface Hub 2, Windows on ARM, IoT, and Windows Lite That's kindof an important detail to leave out. I'm still getting vibes of "UWP is dead, long live UWA"
We have an Enterprise solution that does exactly that. It's grown since 10 years. It shows everything, you can change everything and does analysis based on big data (ads with 100 ad controllers and million users/groups). Also shows group stacks and duplicate users inside multiple stacked groups.
The latest version of Jetbrains Rider is really good for Xamarin Forms now in my opinion. It's worth a month trial if you're set on doing all the work on the Mac.
Yeah, did it at my job. Used MVC. I think its still running somewhere:)
I world disagree, the reason passwords are hashed are because they are entered by an end user and need to be protected, a refresh token is randomly generated, what is it being protected from? A salt it used to protect a password from rainbow tables, a randomly generated unique refresh token will never be in a rainbow table, so what is the point in salting it. Refresh tokens should be short lived and expire quickly.
I think I understand. But why wouldn't read-only prevent this optimization? How can it be reassigned?
I haven't done any for a while, but I did 3 or 4 MS certification tests, and found that they were really useful for focusing my attention on the subject.
&gt; You are passing a reference to the list, but your aren't passing the list variable by reference - so when you call ChangeList the value of the variable (i.e. the reference - think "pointer") is copied So collections are always pass by reference since the value you pass is the pointer. So the pointer is indeed pass by value and copied, but it still points at the original list. You can't always return everything that changes with return. If you have multiple input parameters which have pointers they could all change. Just make sure to name the method, so people know what's happening inside.
&gt; I’ve never seen one asked for in a job application But you can list the certs on the resume and you can bring them up during the interview. Even if the prospective employer isn't looking for certs, they nonetheless *suggest* competence, which is always hard for employers to discern. IMO.
Hmmm. Food for thought then
I just found out that IMDB posts daily updates of their entire database in TSV files, so I've been working on a client to parse, load, and browse/search records.
:) I was going to add a but extra. When I model stuff I start with an actor and work down from there. So in this case, the door isn't an actor unless its unfulfilled yearnings for the keypad that turns it on are relevant :) So if you invert the idea and start with the user problem, validated people get in, then it shapes the design. I think you'll be fine though :)
My experience with Xamarin.Forms since version 3.0 has been just as good as my experience with native iOS, Android, Angular, or WPF. What version of Visual Studio and Xamarin.Forms are you using? To repeat what another reply said, I haven't experienced crashing issues since XF 3.0. They've done a lot to improve the stability of the tools where they shouldn't be crashing very often. If you are having issues with crashes then there might be something wrong with your VS install or you have a bad extension installed. So my first suggestion would be to uninstall VS completely, then install the latest version of VS2019 or VS2017. Don't use the designer, even if it worked you would be more effective with XAML, so you really should learn it.
It will be easier to help with an example (code), but I guess from your description that your copy of the list is actually just a copy of references to the same objects. Did you create a new list and then just assign each item from the source to the destination?
You need a deep copy. https://stackoverflow.com/questions/78536/deep-cloning-objects
I tried to do var testData = new List&lt;Category&gt;(data); But it didn't help....
It seems like to add var item1 = data.ToList(); item1.RemoveAll(x =&gt; x.Name("Cate")); to process3,4DifferentTask made it working, but why that?
 It seems like to add var item1 = data.ToList(); item1.RemoveAll(x =&gt; x.Name("Cate")); to process3,4DifferentTask made it working, but why that?
so its dead for all but 'neat fun' things
UWP is alive and well. * https://raw.githubusercontent.com/microsoft/microsoft-ui-xaml/master/docs/roadmap_winui3.png * https://github.com/microsoft/microsoft-ui-xaml/blob/master/docs/roadmap.md &gt; The Universal Windows Platform contains more than just the Xaml framework (e.g. application and security model, media pipeline, Xbox and Windows 10 shell integrations, broad device support) and will continue to evolve. All new Xaml features will just be developed and ship as part of WinUI instead. What's happening, is that they're just decoupling WinUI/Xaml UI to not be tied to OS update schedules, and make them easier to access from Win32 apps, in addition to WinRT/UWP apps, and they keep evolving the current WinRT/UWP APIs. Also, OEMs are converting their system apps to UWP, in preparaton of Core OS. * https://twitter.com/Daniel_Rubino/status/1134642512197554177?s=20 Meanwhile, * https://twitter.com/ryan_levick/status/1099944047152689152 * https://twitter.com/WABetaInfo/status/1125852891997143040?s=20 Also, Intel, Realtek, NVidia, Adobe and others have embraced UWP.
That's kind of what I suspected when I was questioned the above comment "array is more efficient". However that answer is 6 years old now, I'd take it with a grain of salt.
Ah okay I guess I missed that context (talking about List/Array in general as opposed to .ToList and .ToArray)
Yes - however, I would add a - unnecessary, but in my opinion, helpful modification: private void Test(ref List&lt;Values&gt; item) The "ref" keyword is not needed as the list already passed around as a reference, however, I like to highlight that my parameter gets modified. This way you can always warn yourself, make the code a little safer.
Among other ways, it can be reassigned via reflection. https://stackoverflow.com/questions/934930/can-i-change-a-private-readonly-field-in-c-sharp-using-reflection here is a rather nasty edge case that doesn't involve reflection: http://joeduffyblog.com/2010/07/01/when-is-a-readonly-field-not-readonly/
For each process you want to create, you could make a copy of the data, and then pass those copies to the processes. Something like: &gt; List&lt;DataModel&gt; dataCopy1 = new List&lt;DataModel&gt;(); foreach (var item in data) { dataCopy1.Add(item); } var tasks = await Task.WhenAll(Task.Run(()=&amp;gt; Process1(dataCopy1)); Hopefully that helps you in the right direction.
This is fundamental multi-threading. You cannot reliably manipulate shared data from multiple threads without taking specific steps to prevent race conditions. You could attempt to use the `lock` statement or some variant of a semaphore to make it so that only one thread can access the same data at a given time. Doing this improperly can make your performance suffer, even to the point where it is worse than doing it sequentially rather than in parallel. Doing it very improperly can result in a deadlock. The easiest way to fix the possibility of a race condition is to simply **stop processing the data in parallel**. Have you actually timed it and found that parallel is faster? Higher CPU utilization doesn't mean the CPU is actually doing more useful work, just that it's doing more work. That's not always the case, especially with simple operations on a modern processor, and it's not always significant. Don't make things harder than they need to be. On a modern processor, doing sequential things on data that stays in the CPU cache is going to be much faster than shuffling objects in and out of main memory and between cores. If you must do it in parallel, you can process the list in parallel but each item synchronously. That way, no one item is being manipulated by more than one thread at a time. Parallel.ForEach(data, d =&gt; { Process1SingleItem(d); Process2SingleItem(d); ... });
You should show the implementations of the `GetData` function and the `Categories` class, particularly the `ToList` implementation.
It's been a long time since I've touched UWP. And I'm really trying my best to be able to say, "Yes, THIS is why I should make desktop apps instead of web apps". What I get back is, "XAML UI is no longer tied to OS update schedules!", ["Develop on hololens"](https://twitter.com/ryan_levick/status/1099944047152689152), [develop on Windows Phones](https://twitter.com/WABetaInfo/status/1125852891997143040?s=20), [Something about Dell](https://twitter.com/Daniel_Rubino/status/1134642512197554177?s=20). I hope I'm not misrepresenting your point, but I don't think I am. Nothing you've said means anything to me as someone even marginally interested in making a desktop application.
It is dead not because MS has abandoned it but because no developer would use it.
This is not something you should entertain implementing. It’s a non-trivial endeavor and is best left to a 3rd party control library that has already implemented.
It sounds like you're trying to reverse the byte order. Try `BinaryPrimitives.ReverseEndianness`
What do you mean with ToList implementing? :) I will post GetData soon
https://docs.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqlconnection.connectionstring?view=netframework-4.8 You probably want to look at the `AttachDBFilename` part of the connection string, if you aren't running an actual server instance.
But the Process1,2,3,4 are independent, which means each results from the process is used for different purpose. What I need is the data sent into the method, should be unchanged (which means changes in those several processes, won't change the data In other process methods), which is happening now... Let's say if Process1 removes all the element from the data list, other processes using the data is also getting changed from process1. &amp;#x200B; Is there a way to avoid this?
The comment on that thread that said “c# is outdated” gave me cancer
ImmutableList&lt;T&gt; or bust if you are playing with up to date .net
In that case, what you want to do is copy each item, not just copy the list. Right now, each time you're doing `data.ToList()`, it might be creating a new list, but each item in the list is still a reference to the same underlying object. var tasks = await Task.WhenAll(Task.Run(() =&gt; Process1(GetCopy(data))), Task.Run(() =&gt; Process2(GetCopy(data))), Task.Run(() =&gt; Process3DifferentTask(GetCopy(data))), Task.Run(() =&gt; Process4DifferentTask(GetCopy(data)))); ... private IEnumerable&lt;Data&gt; GetCopy(IEnumerable&lt;Data&gt; source) { foreach (var item in data) { yield return CopySingleItem(item); } } private Data CopySingleItem(Data original) { Data newData = new Data(); newData.Prop1 = original.Prop1; newData.Prop2 = original.Prop2; ... return newData; } Keep in mind that you have to deep copy it all the way down, or you run into the same problem.
same hahah
&gt; UWP is alive and well. The biggest UWP app, Edge, just left it. Show Microsoft dogfooding UWP and one might believe that UWP is “well”. It’s not.
And no developer uses it in part because even Microsoft never did. That means outsiders have a hard time trusting it, and it means Microsoft never had the right feedback loop.
How can I do a deep copy? :)
I forgot completely about Rider. Last time I used it Xamarin Forms projects were broken, had been broken for a month, and would be fixed "some time in the next update". Which made my evaluation for the team pretty bad, actually, since it expired before they fixed it.
There really should be a challange of how many such one liners one can hide per 100 lines of enterprise code...
Nonsense, every new MS consumer app from the past few years is UWP, except the new Edge.
Does this include any of the Visual Studios?
They left it, mainly because they wanted to leverage Chromium, and also because they wanted an easier way to port it to other platforms. But they're in the process of adding UWP features right back to the new Edge.
Those are not consumer apps.
I am a WPF developer I will give you my two cents: &gt; The designer tool quite literally doesn't work, This is not news. The designers in Visual Studio have never worked. None of them. Ever. If you give up on Xamarin it should not be for this reason. I've always thought Blend was pretty cool... I used it once for an hour or so. I don't know if it works with Xamarin or not(?). Maybe you can try that. That said - XAML is very powerful - you should learn it just to open your eyes to what is beyond the HTML/CSS/Javascript train wreck.
I am doing a medium sized hobby project with V4 Forms with VS2019 on windows. Both the switch from VS17 to 19 an the switch to Forms 4 were immediate reliefs. I also target Core 3. Much faster build times, faster deployment to emulator. more stable environment, no need for constant clean-rebuild solution. It is still far from ASP Netcore quality (that thing is a dream), but at least it became a more pleasant experience. So switch asap to the newest versions, even if only preview
If you wanted to be clear that the list wouldnt be modified, making the method take an IReadOnlyList instead is a much better practice. Ref isnt really meant to be used in that way, it implies that the entire reference could be replaced, not that the underlying object's values could be modified.
I would probably use AutoHotKey for this. The WinGet method let's you search for a window with a specific title and then perform actions on it.
Hello I am interested. It depends where it is
Our team is all working remote. I'm based in the central US though.
Im interested, graduated early this year and im looking for a job since them. Im also not from US
It would help if you mention the company and what you do. Recruitment is a two way street, good developers have options on employment.
Hate to be "that guy" but I think this is a Rule #1 violation. I'm sure there are subs dedicated for this sort of thing though you can explore.
Thank you! Good tip, I shall check that.
I've been trying to find a sub for it. Even tougher to find people with these exact skills.
&gt; The event handler is on UI-thread so no need to use Dispatcher Oh damn, I guess I never put that together. That is super helpful to know. I'm gonna give this all a shot. Thank you for the help!
Im interested in it. Wanna be part of.
This is definetly possible. All the information you need is provided in the github project above. However their API is undocumented and there are some parts of it which are unknown. Searching, downloding and playing songs from C# is possible but requires some experience in HTTP requests using C# because you have to set some headers and cookies to get yourself authenticated.
Generally C# is the retarded stepbrother at my shop. Not because it isnt a solid language, but because the devs that can 'work' in it are either freshgrad noobs or Indian contractors.
What are the full-blood prince languages?
&gt; private List&lt;Data&gt; Process1,2(Categories data) &gt; private List&lt;Data&gt; Process3,4DifferentTask(Categories data) According to your code, `GetData` returns a `Categories` object, which either implements some interface or inherits some class that already has a `ToList` extensions method, or you've implemented your own `ToList` for `Categories`. Without knowing the implementation, it's unclear where exactly you're modifying the same list. If `ToList` is not creating a new list, then obviously all Process methods are operating on the same reference. If it is creating a new list, then perhaps they way it does so is causing the exception as the tasks may overlap in their calling of `data.ToList()`.
Unrelated to the actual issue, but if you do this you should call the list constructor with the size of the original list to preallocate the right amount of memory beforehand, i.e. new List&lt;DataModel&gt;(data.Count);
I was going to suggest this very thing! Once you get your AutoHotHey script working, you can incorporate it in your C# app by spawning a process that runs your AutoHotKey script.
Of course it's not dead. It was never alive to begin with.
The #1 rule of this subreddit is no job postings.
Thank you for the information. I hadn’t known that before.
```cs private void Test(List&lt;Values&gt; item) { if (item.Any(s =&gt; s.Name.Contains("Test") &amp;&amp; s.number.HasValue)) { item.RemoveAll(p =&gt; p.Name.Contains("Test")); } else if (item.Any(s =&gt; s.Name.Contains("HEY") &amp;&amp; !s.number.HasValue)) { item.RemoveAll(x =&gt; x.Name.Contains("HEY")); } } ``` That's all you need.
It is.
Try r/jobs.
Why jquery and not vue, angul5, react, or something else?
Did you try reading the manual? https://docs.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqlconnection?view=netframework-4.8
Removed: Rule 1. I've been boxing with automoderator lately. But if you wait until June 16th, a monthly sticky "Job Fair" thread will be posted and in there you're more than welcome to post the job openings.
Oof
Man oh man, you should get a job at Microsoft. You'd fit right in.
JavaScript with 500 libraries and 3-4 frameworks injected into it, served in a steaming 4 gigabyte chromium wrapper
One of the things I enjoy about becoming knowledgeable on a subject is all the new memes I can then appreciate. This is one such meme.
Second for autohotkey
https://stackoverflow.com/questions/129389/how-do-you-do-a-deep-copy-of-an-object-in-net-c-specifically
One of the few micro-optimizations that is generally always a good idea, at least if you have the proper count right there in front of you.
The heroes that we need but don't deserve
I find it funny that I recognize the names of these people and even follow them on twitter. Feels like at this point I know every UWP dev left by name.
&gt; DevExpress or Telerik, right?
A sample connection string for the first example, with the MDF file added to your project. string connectionString = "Data Source=(LocalDB)\\MSSQLLocalDB;AttachDbFilename=|DataDirectory|YOURMDFILENAME.mdf ; Integrated Security=True";
The main issue I have with that, is that they switched away from a UWP Platform to Chromium because of Portability. And also adding UWP Features back into the new Edge doesn't mean it's going to magically become a UWP app again, it's just going to function like it. &amp;#x200B; It's like putting a sheep outfit on a wolf, and telling it to go graze in the pasture to see if it gets noticed or not. It's going to get hungry and eat something else besides grass, because it's not really a sheep.
Thank you but which of them would you recommend? They both cost the same and spreadsheets look similar.
Thanks, seems building on one's own is not worth it
So much this. They screwed up early on when they didn't start with IThing and IMutableThing (or something like that. IList and IMutableList for example.) Interfaces that imply negative behavior are confusing and unenforceable.
Good points.
So one is React Native, and the other is a PWA. You know damn well that we were talking apps written in XAML/WindowsUI.
SOLID is a suggestion, or a roadmap, not the best thing for every case. I absolutely hate how DI has become such a cargo-cult trend. It’s a very powerful tool, but it doesn’t need to be used everywhere. Additionally, people need to understand that you really don’t need a unit test for every feature. It’s ok to just run a manual test and call it good. Companies like google/MS/oracle/etc have good reason to follow TDD. But most companies aren’t tech giants. You need to understand that this is most likely more effort than it will ever be worth
Actually `ToArray` has a slightly smarter strategy: when it doubles the array, it doesn't copy over old data, but keeps the old array around. Then, on the final shrink, it gathers the data from the various arrays together. For very large enumerables, this might save some copies. Possibly. I still think `ToList` is the better choice.
React Native for Windows is implemented with XamlDirect.
No. There are a thousandfold more Cocoa Touch and Android API apps than there are UWP/XAML apps. The comparison is silly.
Obvious one : o'riley c#7 in a nutshell is great (the 4 first chapter are mandatory to be broad, the other ones are to become deep)
Btw when changing your solutions to be a package, you'll probably need to migrate the whole project to framework or core. Because compiling with ms build can be thought if you combine both
madlad
The comparison is not silly, since more and more of those apps are now switching to cross platform tools.
Again. Cocoa Touch has tons of actual apps. UWP (the *real* UWP, not that bridge nonsense) only ever had a few. Everything Apple does on iOS is Cocoa Touch. Almost nothing Microsoft does on Windows is UWP.
Yes, you can create custom project templates, sometimes as easily as saving an existing project as one. See here for more info: https://docs.microsoft.com/en-us/visualstudio/ide/how-to-create-project-templates?view=vs-2019
I disagree. SOLID gives you freedom. Why would you want to limit yourself? Also, unit testing tells not only if it succeeds, but where it failed. Why would you want a bigger context to search for errors? Lastly, just like we reuse our code, we should reuse our clicks. We're not monkeys, we're developers- automated tests is the way to go.
I started the Path C# on Pluralsight and it's awesome and good to understand better C#
Thanks! Are there tutorials showing pictures? I can't quite follow the docs without pictures.
Try adding the ForeignKey-attribute to the DisplayId property in your device-class. Dont remember exactly what it looks like but something like: \[ForeignKey(Name = "DisplayId")\] &amp;#x200B; If that doesnt work I think you need to specify something more in the attribute, but it should be googleable.
React Native for Windows does actual UWP apps. None of my examples use any bridge nonsense. Almost everything MS does on Windows 10 is UWP. Also, I'm pretty sure Apple's AppStore app is now built using web languages.
&gt; MS also uses Xamarin for a few of their apps. That's at least C# and XAML.
\&gt; So collections are always pass by reference since the value you pass is the pointer. So you're essentially saying collections are passed by reference because they're passed by value? :P Basically, saying that reference types are passed by reference is a nice shortcut without going into silly details - and I'd hardly argue, but you did mention going "technically", which is why I corrected you for fun. I agree it's simpler to say reference types are passed by reference - even if it's technically not true (and the distinction might be important when you actually want to pass them by reference which changes the behaviour). Peace :)
But UWP doesn't depend on C# and XAML.
Pretty much
OK, great. You're really not getting this, are you? When people say UWP is dead, what they bemoan is that for the past decade and a half, Microsoft has failed to establish a modern UI framework that 1) they dogfood themselves, not just for some apps, but for _all_ their new apps, 2) they consistently evolve, 3) third parties love. They failed on this with WPF, and then they went on to fail again with UWP. Your "well you can put a wrapper around your React Native app and then call it TechnicallyUWP™" remarks are irrelevant.
UWP is more than just UI framework. Almost all new consumer MS apps use UWP, except for the new Edge. They consistently evolve UWP. You don't put a wrapper around React Native apps. You're conflating it with Electron.
Hello sorry, the method returns a list of categories object. They are just normal class variable with properties. For example: Public Class Category { public string Name {get; set;} public DateTime Date {get; set;} } I haven't implemented interface or ToList extensions, just using the ToList() from the linq package. How can I know if ToList is actually creating new list? Because I think all the processes is operating the same, because when I call removeAll elements that contains string Cate in process1, it seems like it also removes in the other processes, which is unwanted.
IL is often pretty unoptimized. JIT then runs over that to generate efficient code.
Maybe you're looking for Application Insights? https://docs.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview
C# In Depth by Jon Skeet. Microsoft Docs. Tim Corey's YouTube channel.
They don't have to all target core but they should all use the new ms build project format. Any that cannot (webforms and a few other types) would née their dependencies to either be nuget packages or remain old msbuild...
Hope you won't skip over too much generalized programming concepts, I think the most basic C# examples could teach you a lot. The C# code I've seen from devs with C++ background at my workplace has so many assumptions about how to approach common problems that it's a total mess.
You’re not using conventions here so EF is having a rather hard time figuring out what you want. The conventions are that tables/models have an ID primary key column, and fkeys are named after the table they reference ie. tablename+id You can change the models to reflect that conventions without changing the database schema. Or you can manually setup the fkey relationships with attributes or fluent declarations
I've personally only used DevExpress for spreadsheets, but I know Telerik offers similar products. You should be able to get trial versions of both and see which you like best.
It's happening once again in UWP. There's IApparentlyNecessaryInterface6
Are your settings for the objects setup correctly? Aren't there certain settings that need to be in place to register collisions?
Here's a video "how to" for project templates. &amp;#x200B; [https://www.youtube.com/watch?v=UNYC53m3Lw8](https://www.youtube.com/watch?v=UNYC53m3Lw8)
I'd just pay for Excel, mate. If you "just want some columns and grids in my app to insert some basic info" then DataGrid is fine. If you want actual spreadsheets in a office environment then don't roll your own product.
Hi everyone - /u/dilmerv is a notorious spammer, who frequently posts [north of 20 times per day here on reddit](https://imgur.com/a/PWNAQl9), [breaks subreddit rules](https://imgur.com/a/01hnt4t), and has gone so far as to [spam everyone who connects with him on LinkedIn](https://imgur.com/a/00CiyYa) to subscribe to his sub. Also, most of his tutorials are, in my opinion, of fairly low quality, [and sometimes harmful](https://np.reddit.com/r/unity_tutorials/comments/9wpwnb/how_much_money_can_you_make_by_making_great_games/). If you're wanting to learn more about Unity, there are better options (r/unity_tutorials, or my sub, r/UnityCurated). I'd urge anyone thinking about subscribing to consider blocking him instead - he's been spamming for at least 6 months, and there's been no indication that he will change. Thanks and enjoy your day! (if you're interested in the gory details, check out this thread: https://np.reddit.com/r/unity_tutorials/comments/bugza2/how_to_exploit_reddit_for_financial_gain_just/)
Tim Corey on YouTube! His videos are free and cover a range of topics using C#
Coming from the same background I would be a complete asshole not recommending C# in a nutshell by Albahari + LINQpad. The beginning covers the basics but you can skip it and/or use it as a reference. The remaining parts are what you're looking for if youre coming from C/C++; it pretty much covers it all or points to *them. Coming from the same background and not wanting waste time, I found this book invaluable. Like I mentioned, the beginning is mostly syntax and basic constructs. BUT he often explains them while highlighting a nuance from the perspective of C/C++.... generics vs templates and delegates versus function pointers, etc. I found everything beyond the 1st chapter highly useful which is my experience for most literature. He covers most of the namespaces: what they do, how to use them, with chapters dedicated to asynchronous/parallel programming, IO, Serialization, etc. LINQ is just awesome! C# in Depth is a great read too once you already know C#. However, while learning C#, I found Albahari's work beneficial as I was learning but familiar with programming from other languages...and you seriously can't beat LINQpad. I believe Albahari's the person who actually wrote it too and I think that's just super cool. I personally buy a new version of this book each time one is released purely out of appreciation for all the benefit I have received...not lieing, not promoting, this is based solely on my experience coming from a similar background and I understand the frustration of finding that one go-to reference.
Well, it's not about finding a program to use be it Excel, Google Sheets or else. The aim is a complex grid with headers, cells to input data, cells to show total value of sections and subsections both vertical and horizontal. And all that should not be static, i.e. users will be able to create such things themselves and customize. There is really no need for complex formulas - even adding and subtracting operations are enough. A DataGrid would be partially useful because it certainly has a lot of stuff implemented but, for example, if one wants to change row headers, this control seems a bit incomplete. Column headers are changeable. Row headers aren't. Even 2 full days weren't enough to make a workaround without bugs.
Oh dang, this is good to know, thanks for posting!
open up the nuget package manager console, which is a PS shell and just run the cli commands.
I use [Prefix](https://stackify.com/prefix/) for local profiling, could be installed on server as well.
Excel pivot tables? Power BI? These solutions already exist.
Miniprofiler is quite good.
Unity game development
Go through Scott Allen's Pluralsight course. Haven't seen anything that compares to it.
So if we are hosting web apps on our own virtual servers then we are allowed to use Prefix on them? I thought the license does not allow you to use it on servers, and that is why they have a paid solution for servers?
Well, I am a bit confused about Application Insights, do you need to host your app in Azure for it to work and is it free to use or is it something you can host on your own servers/local dev env?
I checked it out it seems the closest to what I am looking for as far as features and business model goes. I was hoping for a Microsoft solution as part of the framework but I guess we cannot have everything :P
Oh, that's a shame. You mentioned higher up that Adobe is embracing it. What consumer apps from Adobe is made with UWP?
Ugh, that sounds horrible. But as one to not ignore a train wreck, can you show me an example?
[ElementHost](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.integration.elementhost?view=netframework-4.8) And as requested I will ignore commenting on the other stuff.
Because roadmaps are useful. Guidelines and design patterns remove choices that you don't need to make so that you can concentrate on the ones that you do need.
&gt; SOLID is a suggestion, or a roadmap, not the best thing for every case. That's what it was originally. Now it's not even that. It's just a set of slogans completely divorced from their original meaning. https://www.reddit.com/r/csharp/comments/bxr555/is_systemtimerstimer_poorly_designed/eqabf6g/ Look at his definitions. It's mostly a list of platitudes randomly assigned to a letter. Even LSP, which is a very simple rule that says "If A is a subclass of B, then A must be usable in all situations where B is usable", and he completely missed it in favor of a bunch of other stuff. I would like to stress that this isn't a personal failing. Everyone I've seen preach about SOLID gets it wrong in their own unique way. It's not "Grauenwolf thinks it's A and everyone else thinks it's B" but rather "He thinks its B and she thinks its C and those guys think its A and C and that groups says B and D and this guy says X and that gal says Z".
What I tend to do (now, I haven't done what you're doing exactly) is design using the MVVM architecture and use background workers to process that heavy lifting on a separate thread.
Actually I am using convention, perhaps how I laided it out above wasn't clear. Table device PK deviceId, FK displayId, &lt;other columns&gt; Table display PK displayId, &lt;Other columns&gt; EF fully supports a primary key of either ID or &lt;tablename&gt;ID.
For example what kind of background workers would you usually use?
This is what I use https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.backgroundworker?view=netframework-4.8
This is also useful: https://www.c-sharpcorner.com/UploadFile/mahesh/backgroundworker-in-C-Sharp/
You already got a recommendation but I just wanted to reinforce that there are perfectly good reasons to want this. One example where this is a big advantage is when you are developing a plugin for a 3rd party application which is still Winforms. Embedding WPF gives you more control over the display of that plugin and if/when the 3rd party host application moves to WPF you already have done the work and you can just "unwrap" it.
Haha I wanted to add this into my post. I've been using WPF since it released, and I've never, EVER seen a designer that didn't crash VS within 20 minutes. I just got used to writing XAML without the designer.
&gt; UWP is more than just a UI framework. When developers refer to UWP, they tend to primarily mean the UI framework. It’s not our fault Microsoft did such a poor branding job. Very few apps use this UI framework. With Edge gone, a further signal is set to move away from it. That’s sad, because Microsoft has no compelling story of where exactly to go.
https://www.nprofiler.com/ Not tried this with .NET Core but for me this is easily the best profiler I've ever used for standard .NET. It says .NET Core supported but likely only on windows
I know you said to ignore the other stuff but even then one of them may be relevant. If you like wpf better but feels like winform performs better (it should be the oposite by design), what you may like better on winform is startup performance. The only reason i’m mentioning this is because i assume if you integrate WPF elements in winforms you’re going to get the same performance hit so you may as well know it now before you start heading that way
Good call -I had the attributes screwed up, my bad for not including them in my goal of simplifying the example. Instead of [DatabaseGenerated(DatabaseGeneratedOption.Identity)] [Display(Name = "Device Id")] public int DeviceId { get; set; } [ForeignKey("Display")] public int? DisplayId { get; set; } I had [DatabaseGenerated(DatabaseGeneratedOption.Identity)] [Display(Name = "Device Id")] [ForeignKey("Display")] public int DeviceId { get; set; } public int? DisplayId { get; set; } &lt;Facepalm&gt; Thank you for the help!
Because you don’t always need freedom. Sometimes you just need a project to get done. You need to understand nuance - you don’t need a nuke to solve a rubix cube
MVVM and RX
Of course. But if you expect your project to live long and come back to you, SOLID is a goto.
You dont have to host the app in Azure but it will require an Azure subscription as the data for the insight is stored there
I would start with C#. Make sure you have good separation between your UI and your internal logic. MVVM as people are saying. See what is going on with the performance of your internal logic. It may be that there is a more efficient algorithm to use, or you may want to switch to using something in C# that has more performance, maybe moving from LIsts to arrays for particular data. If C# just isn't performant enough, then you can look at C++ or something else. If you are doing matrix operations, maybe there are high performance libraries already in use. Maybe you should be using SIMD (single instruction multiple data) operations. If you need to use C++, I'd recommend exposing your entry points as simple C calls so that you can write PInvokes over. Just know that you do take a performance hit when you call a PInvoke, so make sure you pass as much as you need in as few calls, then let the C++ layer do the heavy lifting, and then pass as much back in as few calls.
Also if you build wpf applications will enough then you will not notice the performance differences
Is the purpose to generate XPath syntax specifically? (If so, I find it odd that none of the examples actually show the resulting syntax.) Otherwise, why use this over LINQ to XML?
I'm just spit-balling, but I'd guess C# would run matrix math like 1.4x slower vs. C++? If that's a deal breaker, then maybe you'd need to move to GPU-based calculations anyway.
 I saw another comment mention BackgroundWorker with MVVM to accomplish what you want, but depending on how complicated your UI is you may not even need that. Of course you should probably be using mvvm anyway because it's the accepted framework for making wpf apps, but you can probably just use tasks or threads to accomplish what you want. If I recall correctly BackgroundWorker adds some nice events and such you can subscribe to and can report back progress using events but if you just need to do background processing then you can just use a Task. Depending on which ICommand implementation you use, you can pass an async lambda or async delegate for the command action, and inside use normal async task awaits to do processing. If you can't find a good ICommand implementation I have a link to one I've use used which works well with async. For the actual processing, you should try and stay in C# as it makes for a simple development process. But if you do need to use C++ for speed reasons, I would try and figure out your data structure first. You can't pass a c# object to an external c++ method, only primitives. Well unless you want to try some really crazy pointer stuff. So you will need a way to pass your matrix information to the c++ methods. If you need some links to anything let me know, I have quite a few saved I can share.
Hi. Yes, the idea is to use this to generate the xpath expressions as strings. The value is mainly from replacing xpath syntax with high level linq syntax. The generated xpath strings can be passed to a process (e.g. Selenium) that will run them against some document like HTML DOM or xml.
Thank you for your answer. I am looking for a solution we can host ourselves because sometimes we have to deploy to an intranet without an internet connection.
Obviously it depends on the use case. For matrices as you said, GPU based calculations may be needed for the absolute best performance. Take a look at this blog post: https://jackmott.github.io/programming/2016/07/22/making-obvious-fast.html You can get equivalent C performance in C# with SIMD. Even without, while C# is 2x slower than C, it may not matter. In that particular use case, we are talking about 32 million floating point values each being squared and then added to the sum. So that is like 64 million add/multiple operations in 34 milliseconds. At the end of the day, it really depends on where your bottle necks are, your use case, and what is acceptable performance. It might not be worth the effort of creating complicated code if you are dealing with 100s of millions of operations, but maybe it would be if you are dealing with 100s of billions of operations.
&gt; The generated xpath strings can be passed to a process (e.g. Selenium) that will run them against some document like HTML DOM or xml. Ah, that makes sense. Thanks.
Basically what is meant: What tends to make it slow is somewhat amateurish code. It's often not so much that the processing is inefficient, it's that it takes careful thought to put a nice GUI on heavy data processing. The worst code doesn't use other threads at all. This causes the UI to appear to freeze, and progress bars or other indicators don't work. You can go one of two paths from there. The *absolute* worst path is when you want to fix it in a hurry. Some joker out there is going to show you some equivalent to the WinForms `Refresh()` method. That will make the progress bar work. But to do that, it interrupts your processing code which (surprise!) will make it a lot slower. Better code does it the right way. Your UI is one thread. Let it stay that way. When you need to do a lot of work, do it on another thread. .NET has a bewildering number of ways to do that. `BackgroundWorker`, the thread pool, and `Tasks` are the most common. That can still go wrong if you try to update the UI too much during that process. Remember what I said about the UI being one thread? That stays true. If you want to update the UI, you've got to tell your program to stop what it's doing and schedule some things on the UI thread. Do this too fast, and you either slow down your data processing or make it look like the UI is frozen again. So you have to strike a careful balance. The actual easiest thing to do is to turn on some kind of busy indicator, then go do everything on the worker thread, then when it finishes update the UI in one swoop. I'm not saying you can't update the UI more frequently than that, but understand there is a balance between updating the UI and maintaining "the best" performance.
Removed: Rule 4. You need to provide more information about _how_ this isn't working, what you've done to try and debug it, and the state of your unity scene in terms of ensuring collision areas and names are setup properly. Add some logging to make sure your `OnCollisionEnter2D` is being entered, and checking that the colliding object has the correct name.
Try falsetto word chat application project by AngelSix on YouTube
Thanks for the recommendation, I’ll check it out!
It really depends but there's 4 styles of interview I've encountered: 1) Quiz. They'll ask you a bunch of questions to try to gauge your knowledge - stuff like "can you explain what an interface is and why you'd want to use it?", "what is the difference between an overloading and overriding a method", "why would you use unit tests?" 2) They'll give you a simple but flawed piece of code and ask you to add new features and refactor as you see fit. Here you probably want to show you know how to refactor safely, add features safely etc. 3) They'll give you a problem which has many potential options and they want you to give a performant solution. So a simple example from a YouTube video I watched recently was "You have a list of numbers. Write a program which, when given a value N returns true if there are two numbers in the list which add up to N... else false.". Here you would need to know about Big O notation to be able to explain why your approach is better than others. 4) Here is a brief, build us a thing. This will probably be a very simple application which may include a UI. This kind of task would normally be given in advance though and you would go to the interview to discuss what you'd built, Depending on your strengths some of these may seem scarier than others. I would advise making sure you have a really good understanding of unit testing and SOLID principles as that would help you with types 1 and 2. Type 3 you do kinda need to understand a few common data structures (list, linked list and dictionary at least). In most of these interviews the eventual answer will involve using a dictionary in some way. Not all! But most. It doesn't seem likely you'll get a type 4 interview but to prep for that just build a bunch of simple projects til you feel comfortable with the process. Good luck!
The way Unity has you write C#, I don't think it would be a good learning resource for the language itself.
&gt; Matrix operations and very long FOR cycles Depending on the exact nature of your operations, you would want to use [SIMD extensions]( https://devblogs.microsoft.com/dotnet/using-net-hardware-intrinsics-api-to-accelerate-machine-learning-scenarios/) or GPGPU APIs. [Campy](https://github.com/kaby76/Campy) is an open source GPCPU library, so you can also try that to run operations on the GPU. &gt; So what are the best practices when you have a GUI MVVM using ReactiveUI with proper asynchronous operations.
Use Fody and/or Microsoft Prism. This way MVVM becomes a lot better. Microsofts RaiseExecuteChange for commands is a must have in big applications. Fody improves on the binded properties by not needing to rewrite every property setter with OnPropertyChanged. Also use pages and the inbuilt navigation to make sure your pages/controls are garbage collected instead of staying in memory.
EF models are just ordinary classes. When you add a new model, context or repository, you have to code it yourself from scratch. There are no class templates for this.
Thank you so much for this. The email stated that they wanted me to meet with the hardware manager and the Director and a do a tour. Based on that I don't think they're gonna give me a technical test really, my friend works there and he said the management is really relaxed and teaches people all the time. I might be over thinking it and all they're looking for is someone with enthusiasm and work ethic. But I wanna nail this interview so badly.
C# should be in the same performance range as C++ for most use cases. If you go WPF i advise you use the .net core version to be able to use the new optimizee memory APIs, you shouldn’t have trouble finding matrix API that are hardware accelerated. If you give more detail (not just technical but also functionnal) about your project, what it does, what the ui is like, what amount of data you perform on etc we may be able to better advise you
Like JavaScript's arrays which are sometimes array lists and sometimes dictionaries and sometimes can change their implementation on the fly and fuck up the performance
I tried to do that once but then I realized it was stupid. If your code returns the collection and then forgets about it just return the damn list. Maybe the caller needs to add that default value or combine the result of two calls. It makes more sense to accept IReadOnlyCollection parameters instead because you are giving more freedom to the caller and telling him that the collection won't be modified. Of course if you keep that list after returning it you should return the read only version
there seemed to be one in every EntityFramework tutorial i've seen so far. [relevant picture](https://imgur.com/a/ZBA5AkF) vs [my case](https://imgur.com/a/EE94YWd)
I see. Ok, what version of .Net are you using? Also, I see that you created a console app. Try creating an Asp.Net application and see if the missing items appear.
The easiest way would be to add a game over event and have the form show a message and create a new game object.
I would suggest sticking to using Tasks with async functions. Background workers are an old type that existed before async code. You will also find on large scale projects the code gets very messy for people new to the project.
[removed]
The fact you're asking the question is awesome imho :) In my experience the UI concerns, back end concerns and infrastructure concerns should be free to be developed separately and and deployed in isolation. My advice would be to keep them separate. Tying them together just because there's a unifying language or framework is asking for trouble. Deffo try to answer the question "why would I want to do this?" Hope this helps friend!
Realistically, unless you're doing complex data transformations, you're probably not seeing performance reasons as a side effect of the language but rather how you're using it. Avoid p/invoke whenever you can, but don't be afraid to use it when it makes sense. I'm guessing you would be best served by learning more about WPF, and async/await for long running tasks.
If the hiring people have a clue at all, I don't think you'd stand a chance at the job, but I would be interested in hearing how your interview goes and whether you land the job. Depending on how patient and willing to let you learn on the job they are, this may be your lucky break. Good luck!
With any developer role make sure you show off your communication and other interpersonal skills, especially if you're with a director. Also show your passion to learn and progress your skills, this is about as valuable as knowing the language itself.
Second this; partly for performance, and partly because of Unity's bass-ackward API, it teaches you very un-C# ways of writing code.
Assuming you're using EF 6 and not EF Core, here's what you need to do. Add a new .NET Framework (not .NET Core or .NET Standard) class library project to your solution. Right-click on the project in solution explorer and click on Add/New Item. Click on [ADO.NET](https://ADO.NET) Entity Data Model. Make you preferred choices from the wizard after that. The .NET Standard and .NET Core class libraries do not provide the EDM choice from the add new items dialog.
Wow, that article is just awesome. A very good read.
Thanks for the response! so that means also handle routing through reactjs?
Well I do live in a tiny town in the middle of nowhere that no one wants to move to. So my competition is pretty much non existent. Plus like I said the salary is terrible. It's like 30k. Even on my resume I said I had minor C# and Asp.net skills. So I think they're desperate.
Sometimes it's all about the attitude as well. There are many people that can code, but sometimes it's about your mindset, and why you want to code. I'm always more fond of people of have a genuine passion for coding, and people who have the engineer mindset of fixing and improving things. I desire the people that want to improve themselves, and don't mind learning and sharing their knowledge. It's good to know your weaknesess, and acknowledge that you have them, but show that you're trying to overcome them. Generally we quiz on C#, SQL and programming in general, then throw a little "how'd you design this?" question. The latter shows how you think, and that you're capable of explaining your thoughts and ideas to others. It shows how you solve a problem, and helps show the programming techniques you know, but may not necessarily know the names for. For me, it's all about attitude. I want to make sure you're keen to learn, and want to improve. I don't care if you don't know all the basics; that can be taught. You cannot teach someone to want to better themselves.
In my experience, this can't really be overstated especially when being interviewed for a junior role which it sounds like you are going in for. The people interviewing you are going to be looking for how you work through a problem, even if you can't get find the solution, so be sure to talk through everything that you are doing and why.
Yo! In my experience the conflation between serverside and front end can get super confusing, so yeah! - Have a lovely MVC5 API that serves data - A lovely react spa with react js routing making calls to your API Or - a lovely MVC5 app - a bunch of react pages - MVC routing Though I'd prefer the former I'm sure many folks might try to steer you to the latter. All I'd say is make sure that you keep your deployment agility in mind - it's far better in my opinion to have that clear separation of concerns and separately deployable pipelines. tl;dr yup! Feel free to message me directly if you want to talk more about this!
Removed: Rule 4. For C#/.NET/Visual Studio development, the keywords you'll probably want to search for are "solution", "project", "project references", "adding classes", and "class library". This should help get you started: https://docs.microsoft.com/en-us/visualstudio/get-started/tutorial-projects-solutions?view=vs-2019
That is true, I have started looking at tasks this last week (not enough experience to really recommend it yet) but what you're saying is true. There is a lot less code. Is there an equivalent to the progress changed? For example a progress bar? I can't see a way to link the two together. Unless I'm overcomplicating it.
When going with the 2nd option (a bunch of react pages) are you still using webpack to build all of them?
I think that's part of my concern, really! You'd have to have some pretty complex pipeline to tie it all together unless you were using something like vuejs which you'd be able to CDN-in the libraries without having to build and faff :/
Removed: Rule 1, Rule 4.
Could be wrong, I haven't looked at it before just now, but Reactjs.Net looks to me like a way to add some react functionality to existing asp.net applications without doing a full blown rewrite. If you're starting from scratch there's no reason not to just use regular react.
This is definitely been on my mind, where does backend stop and frontend begin? I have a ASP.NET Web Forms background, it's shit and I'm trying to get up to speed. But how much should be frontend and how much backend is definitely a very interesting question. I'm loving Vuejs, but ASP.NET Core isn't bad neither, and they're not even mutually exclusive! Confusing! (to me)
Entity Framework conventions for primary key are that either a property called 'Id' is the primary key or className + Id. So for device, deviceId follows convention and should be the primary key. For display, it's displayId.
Vuejs is amazing, completely agree!! If I were you I'd concentrate right now on building asp.net core APIs that only provide data, and separate vuejs apps which use that data. I can spend some time tomorrow building a Simplest Possible Thing if that would help any? :)
I've been doing web methods which basically do the same thing I suspect. I've not diven into ASP.NET Core too much yet. The important thing is, can I can an API and get a JSON structure back to feed to Vue or whatever. I hate Web Forms and its ViewState and Page Life Cycle and man it's good to do something different. Do that thing, it will only help me, I'm sure! :)
There is IProgress which can report progress back to the caller, see https://blog.stephencleary.com/2012/02/reporting-progress-from-async-tasks.html for more.
From a quick inspection of your code, I see a few issues: - In FrmMain, you call the IsGameOver(Brick brick) function on a Game object. However, FrmMain has no way of retrieving a brick object. - In your Game class, whenever the ball hits a brick the brick will be removed from the Bricks list. Unless I am seeing this incorrectly, the game over state would be reached whenever there are no bricks present in the game. So IsGameOver should return true when the Bricks list is empty. Otherwise, it should return false. In this case, the IsGameOver function does not need a parameter of the Brick type. I hope this answers your answer, since the question was not really clear to me.
In times of unexplainable weirdness with VS, I've found turning it off and on again has worked multiple times
i too had this remarkable piece of knowledge but sadly it didn't pursue.
I am in the same boat as you :) I work with web forms for my job. Then learned MVC and applied it after talking to my boss.
You want to do heaving processing on a worker thread that's not running on the main thread. The UI runs on the main thread do and long running thread locks on the main thread will freeze the UI . Look into async methods.
The pipeline for building and debugging a react app is fairly complex the first time you work with it. Once you are now familiar with the npm scripts and webpack and the other stuff it starts to feel "normal". At that point, building your react app and your web API separately becomes easier. It was a difficult road for me to learn how all that works, but it was worth it. Take a look at the Microsoft docs for SPA's: https://docs.microsoft.com/en-us/aspnet/core/client-side/spa-services?view=aspnetcore-2.2
Thank you!
Yeah, but now I'm wondering why I need MVC (as in ASP.NET Core MVC, which is now just ASP.NET Core). Well, if I'm just gonna have most of it in the frontend with Vuejs and only get data from the backand with ASP.NET Core...? Am I missing something, or is server-side still very much a great thing?
I agree for the most part, but there can be a benefit to hitting a render controller for preloading data and SSR.
it does in fact appear when i make an Asp.Net Application.
VS Installer tells me i had 4.7.2 . but VS 2019 (non preview) just released so i'm trying my luck with it once it downloads, but i'll edit this comment if it does want to work on the fresh, latest version. edit: tested on the preview version, and using an Asp.Net Application does make it appear. was i supposed to make it with Asp from the beginning? i'm just a tiny bit confused.
I can help you with this project. I would use MVVM with async / await to not freeze the UI
Just to add on, the brick list being empty should trigger a game win event, which should show stop the ball, show a victory splash with options for continuing/restarted/etc. The game lose event would be triggered by the ball going too low when you are out of balls.
Thanks for the PTSD flashbacks of the VB6 code I inherited about 15 years ago that was riddled with DoEvents calls (a couple hundred of them.)
You can use Entity Framework with Console app. Not sure why you're having this issue though.
So theres .NET Core with the MVC pattern. Your View in MVC becomes any modern javascript library (Angular, React, Vue). Then theres .NET Framework MVC (which I am using). Pretty much the same process as .net core concept, you can replace your view with any modern js library. I'm not sure I understand when you say "is server side is still very much a great thing". Your server side language is still C# in this environment.
I think there are no templates for EF stuff when doing console apps as these kinds of apps typically have no database layer. so you either will have to do an asp.net project or code the files manually. I would recommend the latter as it's more beneficial to know how things actually work before letting everything be generated for you.
UWP which use the same ui language as wpf : xaml but today the trend is more about web UI (angular, react, asp...)
The game stops after the ball removes the last brick, sending a "game over" message. You should be able to restart it each time you press the "start" button at the upper right side. That's what I need to define, yet I'm not sure at all how to. Don't know which objects to call nor how to build an exact syntax of the method or conditions required. All I can tell is, I require a public bool for the game over build, a messagebox at frmMain and nothing else. I mean, the first thing I would need to do is to define what should happen when the game event comes to be the board without bricks. That should prompt the ending of the game perse. What would be the code for that?
This is awesome, I was dealing with exactly this issue at a new job - I ended up going with option two because a huuuuuge amount of legacy code was done that way and there's a CMS wrapper which makes it even harder to go SPA. Early stages but so far it's working well.
It sounds like you may be a shoe in for the job based on the locality and salary. Good luck! Focus on your communication skills, and passion. Something to keep in mind though is what the employer thinks they're buying at that price. Either they are specifically interested in a beginner programmer that they can use for small but valuable projects with a full understanding of the discrepancy between what they're offering and what a typical professional developer should take home, or they are woefully misinformed about the market and may have unrealistic expectations of your time, and/or skills.
Hard to say. WinForms looks better and runs faster by default. So a lot of people still choose it for their desktop application needs. WPF, if you spend some time at it, can be much, much better that WinForms and likewise can handle a lot more data (see virtualized lists). But it's harder to learn, harder to setup, looks like crap if you don't apply a style sheet, and it's easy to really screw up the performance.
 this is the moment in which i'm supposed to give the golden seal of approval but since i'm broke and live off of my hard earned parent's money i hope you'll just take my appreciation and utter most respect just as kindly.
i don't really care to be honest but it was a great way to procrastinate from learning this in what i had left from the day. i'll just learn how to code them from the ground up if i really want to avoid asp.net amd hopefully just keep paving my way to a bright future.
If you get the job, form an exit strategy. If they are paying c# devs 30k, they are probably doing other shitty things. Get in, get a bit of xp and gtfo.
 Well tbh I try to spend about 2 hours every day after my current job to study up on topics I'm working on. Lately it's been learning programming. But within 3 months I was able to pass a certification for networking my current boss couldn't. I honestly don't know why I find programming fun, i just kinda do. It's something interesting to me and I like solving problems. Like I see alot of people at my current job that have lost that passion in the field and I hope I never get like that.
That's the plan. I think if I can get a year or so under my belt then I can try to apply to other places. I know the best way to get a pay raise is usually switching companies.
You want to keep the UI thread free during long running operations. I tend to do this by starting a task in the ICommand Execute implementation. You need to be careful though as some objects can't be accessed on other threads, in this scenario you would need the Dispatcher to send some calls to the UI thread again.
Define professional. I've been doing C# professionally for 15 years, never staying in one job or even the same industry longer than a few years. No matter the job or industry, I keep running into winforms. I've rarely had to touch WPF.
Background Workers? isnt old? what about async methods?
ReactiveUI
I have used background workers more because of the progress changed events. It looks like there's a similar way to do that with a sync methods that I'm looking into now though
Stephen Cleary has a nice series of blog posts about it. Here is the one regarding reporting progress: https://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-5.html I recommend reading the whole series. It is not too long and makes a couple of good points to explain why he thinks BackgroundWorker should be replaced with a "more modern" task-based implementation. As with any discussion about using X instead of Y, it is a bit opinionated but my experience with it is the same and I agree with most points.
Sounds good! I'll take a look into it! Thanks for the info!
I'm currently talking this course. It's also helping me better understand VB, which over been using for a number of years.
the point of blazor is to use C# and existing .net library to do your logic without needing to manually interact with Javscript DOM manipulation should be purely from C#. if you do want to use jquery or any existing js library you will need to make a blazor library that wraps that js code using blazors js interop or grab existing wrappers built by others from nuget.
&gt; without needing to manually interact with Javscript DOM manipulation should be purely from C# Given this response I'm not sure that you're up to date with Blazor in it's current state, but at this point in time DOM manipulation is not possible with C#. In Blazor, DOM manipulation is currently _designed_ to be done with Javascript. The goal is to eliminate Javascript from the equation entirely is on the roadmap, but this is how it's intended to work now.
Ugh I spent like 10 years on a VB .NET forum and I *never* found a code listing with DoEvents or Refresh where the solution wasn't "stop doing that".
How do u generally unsubscribe inside view models? You make all your VMs Disposable?
From my experience: &amp;#x200B; First: Investigate the difference between a struct and a class in C#. Depending on what sort of processing you're doing, using the right one can have significant performance benefits. You want to use the benefit of cache lines whenever possible; especially if you have a few hot loops. Second: Learn about multi-threading. There are a number of ways to do it in c#, the closer to the metal you go (generally the less convenient the API is), the faster it will go. It is very easy to shoot yourself in the foot with multi-threading (especially advanced multi-threading), so get super friendly with performance instrumentation and never stop testing :D. Third: Architectural optimization is king if you need to go as quickly as possible. Might sound like a given, but the less work the machine has to do to complete your request, the faster it will go. Often your biggest performance bumps will come from rethinking what needs to be done, and ways to need to do less to achieve the same result. Forth: Keep an eye on memory consumption and GC pressure; the less your GC has to clean up after you, the better you'll run. Pre-allocate memory when you can.
IList is an interface, you can't create an instance of it, but you can use it to define a variable and throw a class that implements it in the variable. So a List can go in a variable declared IList.
The general rule is to be liberal with what you accept and specific with what you return. So your parameters should favor IList, if you modify the list. If you do not modify it, use IReadOnlyList or IEnumerable. Your return should be List. Or better yet, FooCollection which inherits from CollectionBase&lt;Foo&gt;. The latter is a "strongly named" collection and should be preferred for public APIs.
https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/interfaces/
Adding to the prev answer, IList is an interface implemented by any collection which its elements can be accessed with an index (like List, Immutabl Array, or F# lists and any array), meaning that, if you were to create a public library that needed that, regardless of implementation details, you could ask for an IList instead of List.
It depends on what I’m doing but I mainly use visual studios as an ide and c# as the programming language. Let me know if you have any questions I’ll do my best to help!