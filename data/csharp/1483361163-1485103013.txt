Why do indian people always pronounce sentences with an unnecessary pause before the last word, almost every time? They also always do it after the word "the". The high pitch used during these pauses also makes it sound like they are asking a question. https://www.youtube.com/watch?v=tqNhEzrWQpY What is ^the... reason? The only reason I can think is that when they learn English, the teacher will read a sentence out, and then prompts the students to speak the last word. This would explain both the pause and why everything sounds like a question.
solid answer. protobuf-net is a nice library for serialization if performance and payload size are important. checking the type is usually done by some bytes at the front of each message like you said, cast to an enum, switch statement. you could send strings and use reflection if you need flexibility but that will be very slow.
I dont see why you wouldn't use an if statement to display the text like you want it, when you want. IMO you are making a simple task incredibly complex. Its usually best to use the tools the language gives you.
I was needing to generate sine waves a couple of weeks ago, and after a bunch of searching I finally found [this](https://gist.github.com/benkitzelman/5458854), which I modified for my project. It works well, though there's a bug in it you need to fix if using 16 bits per sample though, line 606 of Wave.cs change the 1 to a 0. Anyway, you can use it to generate sine waves, in stereo or not, at whatever samplerate you need, and can save the result to a file or play it from memory.
CptGiggles gave a solid answer already, I just have one thing to add that you might want to start doing now instead of putting it off. Most of the time when you see the pattern you have outlined, like this: AbstractType x = ... if(x is ConcreteType1) { ... } else if (x is ConcreteType2) { ... } .... then you make things very hard on yourself because you are (most likely without knowing it) actively trying to circumvent the features that object oriented programming has to offer. The above pattern can always be converted into its object oriented form: abstract class AbstractType { public abstract void DoThing(); } class ConcreteType1 : AbstractType { public override void DoThing() { ... } } In your case `AbstractType` would be `Message` and `ConcreteType1` would be `PlayerUpdate` and `DoThing` could be named something like `HandlePacket` in your case. I know this doesn't address your question but in short: you have to develop your own protocol ontop of tcp by writing message length and message type and then reading that on the other end before determining how/what to read next.
I must be one of the only people who dislikes that feature. Personally, I really like vs's highlighting of full words with ctrl-lmb. I use that a lot! 
I want to send it to the same device library that receives the triangle wave I posted, I do know the general equation of a Sine wave but I have to sample it with the correct samplerate and bit depth.
I just tried that, but then editing cells in the datagridview doesn't actually edit the underlying object, just the datatable, so none of the changes stick.
Do you mean the complete `if (angle .... )else ... if`? Thanks! 
When you lead with "it's so hard to launch visual studio," I wonder how often you are closing it? For me, VS gets closed about once a month (to fix that resharper error that makes tab erase stuff instead of inserting code) or when I reboot. It's always there ready to go and if it's not, I am not working anyway.
I've been punished using CSC and NMake. No thanks. 
[removed]
Performance isn't too bad on most of the Windows hardware I use, but for folks who are on GNU/Linux, Visual Studio is out of the question, and macOS just very recently got its preview release. Also, coming from a C++ and Java background into C# I found it quite odd that most learning materials online jumped straight into the IDE and there was no mention of csc whatsoever. I just missed having a compiler at arm's length and having that ability to throw a quick snippet of code together via csc or csi and not dealing with project files on my PC.
LINQPad looks like a very useful tool. Thanks for bringing it up!
That approach will work, just know that reflection is slow (like, amazingly sometimes) and that BinaryFormatter will use way more CPU and produce way bigger byte streams than is necessary. (again, amazingly so sometimes) If neither of those things are an issue, then go ahead, its nicer code that way, and BinaryFormatter handles more edge cases with less code than protobuf-net does. (inheritance, circular references, etc) 
C# : .NET :: Java : JVM .NET is just the runtime that your C# code runs on, like Java runs on the JVM. Though maybe you mean "The .NET ecosystem of libraries". Anyway the pattern we are describing looks something like this (pseudocode) class Envelope { public int size; public enum type; public byte[] message; } //Get length from socket's first n bytes (usually 2 to 4, based on maximum possible length //Get type from sockets next n bytes (usually 1 unless you have more than 256 types //get length bytes into bytes[] from socket switch(type) { case ObjectA: ObjectA a = Deserializer&lt;ObjectA&gt;(bytes); case ObjectB: //etc } 
To add to that, you don't need to go to the trouble of making new projects, or adding unnecessary code snippets to your current project or even open a command prompt for much of this immediate expression checking etc. You can just use VS2015's ["C# Interactive Window"](https://johnkoerner.com/csharp/the-c-interactive-window-in-visual-studio-2015-update-1/) (Of course this is just running CSI in the IDE) but one thing lazier than opening a command prompt? *Not* opening a command prompt! :D
Lazy Developers don't use commandline. ;) 
It is common to implement this sort of thing using JSON over HTTP/HTTPS. It won't require special ports to be open, is easy to debug in plain text in a browser, and is adaptable to a web app easily. You can also lean on web technologies for the inevitable authentication requirements. There are probably libraries for this sort of thing and some built upon ASP.NET if you wanted to keep it C# on the server side.
Skip Winforms and go straight to WPF, there really is no reason to ever use Winforms now. Once you have a firm grasp on how it works start looking into the MVVM pattern. Saying that, I still do small scale projects using code-behind and only move to MVVM when working along side others or on an application with more than maybe 2-3 views.
Along with it's brother, Ctrl M L
Why not just create your own attributes? 
The easiest way to serialize a bitmap is to just [Save](https://msdn.microsoft.com/en-us/library/system.drawing.bitmap.save.aspx) it. This will produce a standard image format data stream that can be read independently of any serialization library.
Metro look: http://mahapps.com/ Material look: http://materialdesigninxaml.net/ Disclaimer. I'm totally involved with these projects. But they're open source.
How about creating an Error class and instantiate it in your methods when needed. Something like this: public class ErrorInfo { public bool ErrorStatus { get; set; } public string ErrorMessage { get; set; } public void DoErrorStuff() { //do stuff with the error info } } public class MyClass { public void MyMethod() { ErrorInfo e = new ErrorInfo(); try { //do stuff } catch { e.ErrorStatus = true; e.ErrorMessage = "An exception was caught."; } if (e.ErrorStatus) { e.DoErrorStuff(); } } }
Hmm. This does fit within the SOLID principals.
You could throw these properties/methods in a base class and inherit from it when needed.
what should i use instead then? the idea is to scale it up to have like 100-200 connected players at 1 time so with all those packages going back and forth id rather use a more efficient method.
Inheriting from a base class as mentioned in the other comment is probably easiest. I create an error handling class like this when I have app that does a lot of data crunching server side, and I need thorough error reporting and handling that is user friendly.
You should use an interface for this.
instead of: if (msg is Player) prepend a byte or two to the stream indicate the type, you can cast that to an enum, then switch (type) { case MsgType.Player: //do stuff } Instead of the built in binary serializer, you can use a third party serializer. [Protobuf-NET](https://github.com/mgravell/protobuf-net) is a favorite, but there are others. Which one is best will depend on your needs (cpu vs bandwidth vs ease of use etc) 
Are you kidding? CLI and keyboard shortcuts streamline almost every piece of work I do, and I'm definitely not alone.
This is what I am trying to avoid to not complicate the build and development process (think SWIG) however, but thank you for suggesting anyway. I probably will end up using [LibFFI](http://sourceware.org/libffi/) to supplement the delegate variables approach.
Building a very minimal static site generator for my new-look blog. Kinda nice to work on something simple and easy for once. :)
Investigating what it would take to create a CLR profile for asp.net like NewRelic, dotTrace, or Stackify. The idea being logging metrics from profiling every request and then pushing them into Elasticsearch. I think most of this work ends up in C++ starting from the CLR Profiler project on codeplex. So it's not entirely C#, but its intention is to be used in concert with my asp.net applications.
World builder for fantasy/fiction writers or enthusiasts. It'll have a map generator/builder and some other cool little features. I'd have liked to make it cross-platform but C# is my best known language :(
I use .Net 4.5.2, razor/nhibernate/knockoutjs in a similar load situation. The load is not at all noticeable. Can't imagine EF being too different, no idea about Core. 
Working on something similar to AutoMapper that uses roslyn to generate mapper methods at build time. Progress is steady... https://github.com/AlistairClark7/DesignTimeMapper
Well, the snowflakes could be just 6 lines in a circle, at 0, 60, 120, 180, 240, 300 degrees.You'd have to update the center and the lines within a timer tick event.
or if you want i could do it for you (i always like coding chalanges), send me a pm if you want so
Look at this video https://www.youtube.com/watch?v=IebKxsucu-s https://www.youtube.com/watch?v=XUT0Y1maAFU so you can get the concept of moving things in winform. really basic stuff
Windows form... why... a web app would be a lot simpler with css or jquery or javascript or a mxture.... however if you are set on using windows forms...... i hate windows forms but had a crack using the * char and converting to image on a timer loop/: It's pretty quick and dirty as i'm at work and waiting on something to compile and had 10 mins to burn.... create a new windows form app and paste this over the default form1 code and alter the namespace to match it should "just run" using System; using System.Collections.Generic; using System.ComponentModel; using System.Data; using System.Diagnostics; using System.Drawing; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Timers; using System.Windows.Forms; using Timer = System.Windows.Forms.Timer; namespace testani { public partial class Form1 : Form { public List&lt;Flake&gt; flakes { get; set; } public int FormWidth { get; private set; } public int FormHeight { get; private set; } private int LoopInterval = 0; private Flake[] snowflakes; private int maxflake = 500; private int i = 0; //flake indexer. private Timer t; public Form1() { InitializeComponent(); flakes = new List&lt;Flake&gt;(); //set fram rate 60 fps LoopInterval = Convert.ToInt32(Stopwatch.Frequency / 60.0); Loop(LoopInterval); } private void Loop(int duration) { t = new Timer(); t.Interval = duration; // the value in milliseconds. t.Tick += new EventHandler(t_Tick); t.Start(); } void t_Tick(object sender, EventArgs e) { if (i &gt;= maxflake) //if we go over max flake { t.Stop(); //no more needed. return; } snowflakes[i] = new Flake(Convert.ToInt32(RandomNumberInRange(0,this.Width).FirstOrDefault())); Controls.Add(snowflakes[i]); //each picturebox (snowflake) created must be added to the form i++; } private void Form1_Load(object sender, EventArgs e) { this.TopMost = true; FormWidth = this.Width; FormHeight = this.Height; this.Size = Screen.PrimaryScreen.Bounds.Size + (new Size(20, 20)); this.Location = new Point(0, 0); this.FormBorderStyle = FormBorderStyle.None; // necessary so no borders will be shown this.BackColor = Color.Black; this.TransparencyKey = Color.Black; snowflakes = new Flake[maxflake]; //we want 40 snowflakes Loop(1000); //add a new flake every 1 second } private void Form1_ResizeEnd(object sender, EventArgs e) { FormWidth = this.Width; FormHeight = this.Height; } static IEnumerable&lt;int&gt; RandomNumberInRange(int min, int max) { int availableNumbers = (max - min) + 1; int yieldedNumbers = 0; Random rand = new Random(); Dictionary&lt;int, object&gt; used = new Dictionary&lt;int, object&gt;(); while (true) { int n = rand.Next(min, max + 1); //Random.Next max value is exclusive, so add one if (!used.ContainsKey(n)) { yield return n; used.Add(n, null); if (++yieldedNumbers == availableNumbers) yield break; } } } } public class Flake : PictureBox { Image img; Random r = new Random(); public Flake(int YPos) { //position top random. this.Location = new Point(r.Next( -Screen.PrimaryScreen.Bounds.Width, Screen.PrimaryScreen.Bounds.Width), r.Next(-Screen.PrimaryScreen.Bounds.Height, Screen.PrimaryScreen.Bounds.Height)); //load image this.BackgroundImage = DrawFlake(); this.Size = BackgroundImage.Size; MoveFlake(); } public void MoveFlake() { Timer t = new Timer(); t.Interval = 40; t.Tick += new EventHandler(t_Tick); t.Start(); } void t_Tick(object sender, EventArgs e) { this.Location += new Size(1, 3); //if btm screen or left right then reset if (this.Location.X &gt; Screen.PrimaryScreen.Bounds.Width || this.Location.Y &gt; Screen.PrimaryScreen.Bounds.Height) { this.Location = new Point( r.Next(-Screen.PrimaryScreen.Bounds.Width, Screen.PrimaryScreen.Bounds.Width), r.Next(-Screen.PrimaryScreen.Bounds.Height, Screen.PrimaryScreen.Bounds.Height)); } } private Image DrawFlake() { //first, create a dummy bitmap just to get a graphics object img = new Bitmap(1, 1); Graphics drawing = Graphics.FromImage(img); //measure the string to see how big the image needs to be SizeF textSize = drawing.MeasureString("*", DefaultFont); //free up the dummy image and old graphics object img.Dispose(); drawing.Dispose(); //create a new image of the right size img = new Bitmap((int)textSize.Width, (int)textSize.Height); drawing = Graphics.FromImage(img); //paint the background drawing.Clear(Color.Transparent); //create a brush for the text Brush textBrush = new SolidBrush(Color.Aquamarine); drawing.DrawString("*", DefaultFont, textBrush, 0, 0); drawing.Save(); textBrush.Dispose(); drawing.Dispose(); return img; } } } 
A colleague has created an error method that wraps around the logic using a restful debugging. But the only issue it has is it doesn't support async methods. So he create an async method as well. So if he makes a new try catch error solution he has to make changes in both methods. It's very effective. 
Sure enough, it doesnt. How strange! I learned something today. 
That's only .NET core. This isn't a web app.
In ancient (pre-.NET) Visual Studios, .ctx files stored binary resources for user control project files (.ctl). I can't imagine why anyone would have 10k user controls, though, so I'm dubious that this is what those files actually are.
 var bindingList = new BindingList&lt;TheType&gt;(theOriginalList);
You really should read up on Mono, about 95% of .Net is ported by it to pretty much any device, also most librarys work, as long as you do not use PInvoke or WPF you're mostly fine
Ah thanks! And, I think I just found a really good one, but on Bob Tabor's DevU site. I forgot I had an account. The course is: "C# Fundamentals via ASP.NET Web Applications" and it is huge!
You could wrap the locking logic in an `IDisposable` type and use a `using` block instead.
Great a little background is nice. Still looking for more info in case you are holding back anything! **EDIT** Also I wanted you to know I am also actively searching for more background, not just coming here and looking for handouts! **EDIT #2** I found this link as well which is helping me out a bit. [link on ctx files](http://www.cryer.co.uk/file-types/c/ctx.htm)
This was actually my first thought. I was just kinda iffy about having wrapping my work in an action. I want to say it passes the smell test, but for some reason it doesn't sit right with me.
Yeah, a bit twisted but at least you can just filter/ignore all the `FluentExceptions` lines. Good work with the library!
https://github.com/gmamaladze/globalmousekeyhook You could potentially use [performance counters](https://msdn.microsoft.com/en-us/library/system.diagnostics.performancecounter(v=vs.110\).aspx) to check hard disk activity too, at least read and write speeds. You could use performance counters for network activity, memory usage, cpu utilisation, etc. It won't be as good as some low level access but it will get you a little extra entropy to play around with.
yeah I know, but gonna get a blue yeti soon.
The last line can be simplified, if it smells better: void WithLock(Item item, Action&lt;Item&gt; doWork) { ... } WithLock(i, SomeFunction);
http://www.bluemic.com/products/yeti/ 
F2 Ctrl+L Alt+Up Alt+Down Ctrl+M, O
Is the `records` collection being modified by another thread?
Locking it would be way cleaner. 
Yes, it is currently added to the project's references. Also I am using MonoDevelop 5.10.1
 &lt;ListView ItemsSource="{Binding SomeList}" x:Name="SomeList"&gt; &lt;ListView.View&gt; &lt;GridView&gt; &lt;GridViewColumn Header="Name"&gt; &lt;GridViewColumn.CellTemplate&gt; &lt;DataTemplate&gt; &lt;Button Command="{Binding ElementName=SomeList, Path=DataContext.CommandName}" CommandParameter="{Binding}" /&gt; &lt;/DataTemplate&gt; &lt;/GridViewColumn.CellTemplate&gt; &lt;/GridViewColumn&gt; &lt;/GridView&gt; &lt;/ListView.View&gt; &lt;/ListView&gt; What you basically need to do is to bind every element's button to the top view model level command CommandName and pass it a parameter which is a cell itself. This is usually done by using ElementName Binding, where you bind your command to some element in a tree which has a data context bound to top level view model and set a binding path to it's DataContext.CommandName. You pass a cell's data context as a parameter by using empty {Binding}. Let me know if I need to explain more, or if you need any help. Notice that I have given your list a name of "SomeList" so I could bind Command to it and use it's data context which is basically View Model of your page. In your View Model Command should be of type RelayCommand&lt;CellItemType&gt; in order to accept your cell items as parameter.
EntityFramework also supports db-first. But i believe code-first db migrations is the way to go for any large project, let VS manage all the sql. I assume you can easily script an update-database with MSBuild to update remote databases on deploys.
4 months as EAP user. Using it for hardcore production back-end development. Now I cannot use VS anymore...
indeed: "Add migration MyLatestChanges" then "Update database -verbose" will persist the model changes to database and output the generated SQL in case you want to manually run the database changes in another database. Recommend watching "Entity framework code first2 youtube tutorial.
I've been meaning to try out https://www.llblgen.com again (it's been a few years). But this tool will allow you to craft your entity model model separate from your code and database. And then generate code and/or db schema changes afterwards.
maybe this will help: https://www.manning.com/books/functional-programming-in-c-sharp
It's the number of 100-nanosecond intervals since 1/1/1601 - see http://www.epochconverter.com/ldap. Looks like your example translates to Thu, 03 Nov 2016 16:50:56 GMT.
Yes! This is it. Thank you so much. I just have to figure out the conversion and I'm all set. Apparently, DateTime.FromFileTimeUtc is the way to go.
Yes. Thanks for this!
How is EF managed for production deployments? The idea of doing an update-database against prod scares me.
Thanks for the reply, I tested your suggestion and it works perfectly. But I have a question, is there any situation why I should prefer using `RelativeSource` like the following: &lt;Button Command="{Binding Path=DataContext.CommandName, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}}" CommandParameter="{Binding}" /&gt; Also what about `Enable`? was I correct about adding a bool in my Model class and binding the Button's IsEnabled to it or is there any better way?
&gt; How is EF managed for production deployments? &gt; The idea of doing an update-database against prod scares me. It scares everyone. But it really works. If anything goes wrong is the dev's fault. I've been using it for at least 3 years for many BIG clients and it works great. The only thing you need to be careful it's when you merge your migrations with your colleagues migrations. Each migrations saves a `.resx` which is the entire Data Model (in XML -&gt; Base64) and it just compares the last Data Model to the current one. So if you both do changes, then after merging it you need to create an empty migration (Without changes) just to "update" the correct XML Data Model.
[removed]
Query syntax is definitely cleaner for joins, but I still use method syntax 100% of the time for consistency and self-loathing. Flagrant abuse of whitespace and named parameters help a lot. My joins look like this and mostly doesn't cause peoples' eyes to bleed. table.Join(inner: table, outerKeySelector: emp =&gt; emp.MgrId, innerKeySelector: mgr =&gt; mgr.employeeId, resultSelector: (emp, mgr) =&gt; { // blablabla });
I noticed the typo in-between posting this and your response. Thank you for pointing out the ball size variable issue. I guess when I was reading the problem I didn't think of it. So with the two variables you created at the bottom there those could be in my main function right? And let's say I wanted to find out the color of redBall because I forgot it for some reason or it's not labeled clearly. Then I could write it to the console for the user. Would that be something like this? Console.WriteLine(redBall.GetRed()); I'm a little confused on that because GetRed is a method (constructor?) of Color but I'm using it on a ball I've created. Also if you have time could you differentiate constructors and methods for me. I've looked it up but I'm still a little confused.
Again, still learning, and laff at me, I still have no clue what an interface is... I'll be studying up on this today.
Have you looked at Avalonia
That makes a lot of sense. Thank you very much!
That helps me a lot. That makes way more sense now. Thanks for your help with this!
Update-database -script You spec to/from states and it scripts the diffs. We then send them over to the DBA
set the data source of the combo box to the list and define the display and value members for the combo box. Display should be what you want the user to see. Value should be what you want to pass when the user selects something from the combo box.
The Color class could use some properties for Red, Green and Blue
Resharper is great for converting between Linq syntaxes AND new ways to use Linq!
I don't really know how to set the data source as a list, the only options its giving me are: "Where will the application get data from?" Database, Service, Object and Share Point but I dont know really how to link a combo box to a list.
Don't worry about it. I make a point of helping people out as much as I can. I'm far from being a "Guru" by any means but I know my way around a fair amount of C#. I remember when I was first starting out how difficult it was to scour the internet for hours looking for that 1 perfect solution, just wishing there was somebody who could help me. So now I take what I know and help people when I can. I'm on this sub quite a bit during the day as well as /r/LearnProgramming looking for new tricks or people to help. Good luck and happy coding :)
That's nice and yeah it's tricky but hey when you say 'MyComboBox' what would that be for me, everything about this part of my code is just proving hellish for me, ive been sat here 2 hours staring at this combo box and I haven't even got a single line of working code to show for it 
Its part of the specs for c#.
my other computer has the same vs (2015) and it does not do this
umm I'm using VS enterprise I believe and ok so when you said creating controls what exactly is a control and how do I define it because I did try comboBox1.DataSource = list; but it didn't seem to work also do i create a separate procedure for populating the combo box or do I stick the code inside the procedure it gives me when i double click the combo box on the designer?
nope, do not see resharper in the extension list. do you think a repair/reinstall would fix this?
What if we weren't using EF for the project? Lets say i had a project with Dapper or NPoco. Would it still make sense to do code-first and have EF do all of the migrations just for the model/db management, but use the other ORM to do the actual database updates/reads/etc? 
I thought you meant that it was implicitly private, the auto complete I dont know anything about. Do you have any plugins installed?
Please refer to the imgur link I provided. I didn't know how else to show you what i was talking about so i made a bunch of screengrabs and put them on imgur for you. http://imgur.com/a/6eKgL
classic music is sometimes more violent than this
thank you for your help, it is fixed now i have no idea why, but it stopped after i reset the settings. i imported it back and its still fixed it still does it if i autocomplete a unity method (ex: void OnTriggerEnter) but that's probably an unity issue, not vs15
Built in JavaScriptSerializer class will do a lot of the work, but I just admit I am totally lost with your description of what you want to do. Front end team should not be designing your data-structure though. That's really a back-end specialism. Hope you are - at the very least - normalising the database.
Install resharper trial, click your query and it will convert to either syntax for you.
Not sure why you got down voted into oblivion. With all the stupid questions that get posted here I appreciated the way you asked your question. Other people have good answers for you already, from me you get an upvote.
http://tagly.azurewebsites.net , some sort of reddit with tags, custom input and tag hierarchy
Its been while since I did any WPF, but that monstrosity doesn't look that bad.
Lookup returning a HttpResponseMessage or something like that. Can't look it up right now but there is a way to build the http response manually and you will be able to set the response content to your json string that's stored in the DB (if I've understood correctly, if I haven't, sorry, have a crying baby right now, haha)
Keep getting an error when trying to play
Well there you have it! Of course that would only work if the download button was merely a URL (which it almost certainly is OP, but if this doesn't work, check to make sure it's just a link and not executing JS or something). You might've meant to reply to the OP E: you edited before I replied :P
My problem was not using Typed RelayCommand (`RelayCommand&lt;T&gt;`) :D Since I am not using MVVMLight,.... I had to find how to do it and now everything is working perfectly. Thanks a lot for the guidance. 
And be sure to use the `Async` ones so that you don't freeze the UI when the Internet goes out. It's really no extra effort.
No prob, glad I helped :).
I'd use Casper.js which gives you a "virtual" browser to interact with via js.
We'll update to VS2017, because it uses the same .NET framework target (4.5.2) for C++/CLI as VS2015 and still allows us to use C# 7 features in our libraries and complementary side apps.
I honestly read these types of comments on every type of beta, like: "OMG, it crashes so much for me, it's not even alpha". The truth is probably that a large majority of the people do not experience the same problems and it's probably something specific to the user. That said, I wouldn't recommend installing RC's in a professional environment and always wait until some other people have tried it.
Please provide some json examples..
Why do you need a special reason to update your development tools? It's software development, you keep up or you fall behind. The longer you wait, the more hassle it will be. (Obviously wait until the software is actually stable)
But surely you will wait for VS2017 to be released, right? 
It's currently a rough time to use .NET core, but I believe that the transition is necessary (even though I'll miss the simplicity of the `project.json` even when it's not as powerful as msbuild). However, I really like the idea of the .NET Standard, but it's difficult to justify all those direction changes even though it just shows that the developers at Microsoft are just human too ☺.
Oh I also absolutely believe the transition is necessary. Move away from the `project.json` fuckup. But I just don't believe the tooling will be there in time.
Student for a company here, I tried the new version when they still called it VS15, it was very buggy. Since the 2017RC release the amount of bugs has decreased to the amount that I prefer it above VS2015. It all depends on your application, I initially changed so I didn't have to deal with PCL's in UWP application's.
How does that work, via NuGet packages? You'll need System.ValueTuple from somewhere, I presume. Also, VS 2015 targets up to 4.6.2.
The `ValueTuple` can be imported via NuGet packages. You're right that VS 2015 can target 4.6.2, but I was specifically talking about C++/CLI which - by default - only targets 4.5.2. You can switch to another target framework (even pre 4.0), but you may [experience problems](http://stackoverflow.com/questions/2921702/change-c-cli-project-to-another-framework-than-4-0-with-vs2010) and it's currently the latest target framework version that we can expect from our customers.
When I tried it, with Unity3D, it was slower in every way than 2015. I actually noticed delay when typing, which seems bad for a text editor. I'm sure Microsoft will have that fixed in a future release though.
Nice work, TIL i can make WFA looks so cool by turning off FormBorderStyle, thanks! About music, it's a bit too heavy, something from downtempo, psychill, ambient sounds very good for programming videos (my opinion ofc). 
Does Treeview help? http://www.wpf-tutorial.com/treeview-control/treeview-data-binding-multiple-templates/
Because R# is 999,999,999 times slower and makes the whole ide lag. I love resharper but fuck its slow. Even on my beast of a machine. Also the new install process for 2017 is great as a side note.
The download button is not a url unfortunately. Once clicked, it runs a .aspx file (not sure what this is considered as I'm not familiar with the web technologies). 
Oh shit thanks for that. I finally fixed it. 
I would suggest, you to put your writers and readers into a using statement. It disposes the object which closes the stream. [using Statement - MSDN](https://msdn.microsoft.com/en-us/library/yh598w02.aspx) 
I usually wait until the first update - let other people help work the kinks out :)
Not that I know of, however, I'd like to mention that you may be able to avoid using hardcoded strings when calling RaisePropertyChanged by using the 'nameof' expression to have the compiler automatically insert it for you. Ex. RaisePropertyChanged(nameof(this.Foo));
aww man that makes my life so much easier but sadly I am still on VS2013 and Google tells me `nameof` is a C# 6.0 feature
Ive never heard of "SOLID" before but the idea about abstract classes is the same as any class inheritance, you can write (and if needed change) code that are mutual for several classes one time instead of copy pasting it in every class. The fact that theyre abstract is simply a way of telling yourself or any other person using the class that the class is not to be used like it is but has some parts that needs to be implemented.
I'm not sure if this will resolve your problem, but I use [Fody.PropertyChanged](https://github.com/Fody/PropertyChanged) to inject the PropertyChanged events at compile time for a Xamarin project and it seems to work pretty well. I do believe that it injects PropertyChanged events for dependent properties, as seen in the first example on the linked GitHub page. Someone else might chime in and argue against this approach, though.
ReactiveUI makes this really easy. http://reactiveui.net/
i found it pretty stable, but it'd crash every time i attached to iis so i had to go back to 2015
Get yourself some Books: * Clean Code (iirc SOLID is explained there) * Head first Design Pattern (SOLID is iirc not named, but the basic principles are explained, which includes the SOLID ones, extended by others like the Hollywood principle, or the Principle of least knowledge and so on...) That will get you a way closer to grasp... * the importance of 4 basic OOP foundations, * the basic principles (SOLID are 5 of them), * Design pattern * and the idea, that there are also on top of them more concepts, like architectual patterns.
in C#, yes the solution will be rebuilt. in C++, which i am admittedly weak in, app.h wouldnt be recompiled. this is not the primary problem we're trying to solve though. by changing app, you are introducing risk. you will have to re-test app and potentially break app. by the time you get to 20+ features, you'll also have a ridiculously large app class that tries to keep track of every single feature's implementation.
When you add the new implementation, you don't need to search your whole code base to fix the loops that are like what karathos showed in the "bad practice" example. foreach (var feature in features) { if (feature is CoolFeature) //do cool feature stuff if (feature is NiceFeature) //do nice feature stuff //... etc etc }
Open and closed principle isn't necessarily about abstract classes. More about limiting changes to code by finding ways to allow extension of the behaviour of that code, with out needing to change it for each new behaviour. Prefer using classes/abstract classes/interfaces/delegates that can be passed to the code in places where behavior might need changing. This might be abstract base class that calls out to overridable methods, or a passed in object that implements a given interface. The Linq methods are a good example of open/closed principle on method level. Take Where, for example, to change what it filters on, you don't have to open up the original source code and edit it to allow it, you just pass in a Func&lt;T, bool&gt; to change its selection behaviour. This thinking can be scaled up to class level and module level as well.
So if I use abstract classes or interfaces, I can implement any methods or other members in an external module like dll?
2017 is out? I thought RTM's a couple months away?
Do you use a lot of C++/CLI, and if so what do you use it for?
One word - Testability. That's what MVVM gives you. Its not evil if implemented right. Writing Unit tests for a Winforms App is a huge PITA. MVVM is not a requirement for a WPF app. Its just a best practice. Again, if you do Event Driven Programming in WPF like Winforms and not deal with XAML (for eveything basic, you can use the designer ins VS just like Winforms) you'll get the same result. 
We use it for a an old MFC application that uses our new C# libraries.
I would use it for fun but i wouldnt write production code on it. It is very buggy.
ive never had a speed issue with resharper, could it be your symbol caching setup?
There are some tools that haven't been fully baked for vs 2017 yet. SQL server developer tools is there but huge chunks are missing. Visual studio installer projects are missing still. Mads Kristensen has released a lot of his tools but they're not 100% yet and won't even install for me. Really, it doesn't hurt to install it and evaluate it to see if it would work in your environment but it there is a good chance that it won't. 
Ah ok, thank you.
The old school way of parsing that way would have been accomplished with a [SAX Reader](https://msdn.microsoft.com/en-us/library/sbw89de7\(vs.71\).aspx). You'd parse each tag in sequence from front to back and keep track of which tags were currently open in order to tell where you were in the nesting, effectively giving you a tag stack at any given time. It's still a valid approach if you don't want to deserialize an entire document or if it isn't feasible to come up with a set of tags to match your XML schema, but there aren't many reasons to do it outside of that.
Lookup MVVM WPF binding. And the easy way to raise it it by using the nameof(foo) for easy refactoring. Take a look at MVVM Light toolkit. 
That's a good idea. I think I already have pluralsight access so I'll get on that right away. Having not used it, how interactive is it? I'm starting to reach the end of my self sufficiency here because I'm the sort who works best bouncing off others. Reading only gets me so far. Thanks heaps!
You can also do whatever the fuck you want with wpf and xaml but "hur dur wpf I don't like it" is the usual attitude
Don't install it on a dev machine though! Install on a VM or a machine you can wipe if it screws things up.
That's not OCP. That's just a demonstration of how if statements and polymorphism work.
OCP is actually two design theories. Closed: You don't change the functionality of any class that has been shipped, other than to fix bugs. (This theory is largely ignored in modern programming, but was essential in the COM era where classes could only be exposed via abstract interfaces.) Open: Every class should be open to extensions, which in context meant inheritance. (Core to Java with every method virtual by default, in C# we took a more measured approach to making classes inheritable. ) These days people don't seem to know what OCP means and instead use the term to describe just about anything, including if statements.
Do yourself a favor and forget about SOLID. Study the .NET Framework Design Guidelines instead. This is literally the book of design patterns used to create C#'s libraries. 
I'm not sure I can use this method. What I'm trying to accomplish : MVC comes with a lockout feature. I'm trying to implement a way to flag an account as having been locked by an administrator. My solution has been to force a specific time as a flag basically: DateTime originaltime = vm.LockOutEndDate; //store the admin selection time DateTime admintime = new DateTime(2012, 2, 4, 1, 37, 59); //2012 , 2 , 4 are irrelevant since .TimeOfDay method is used below. 1, 37, 59 = 1:37:59 DateTime modifiedDates = originaltime.Date.Add(admintime.TimeOfDay); //Change the Time Of Day (hours minutes seconds) to 1:37:59. user.LockoutEndDateUtc = modifiedDates; So that successfully overrides user input for the TIME on the /Admin view. I have a snippit I added to the /Account/ForgotPassword feature that allows users who were AUTOMATICALLY locked out of their account to unlock their account when they reset their password (they're locked out after a certain amount of bad password attempts). if(user.LockoutEnabled){ await UserManager.SetLockoutEnabledAsync(user.Id, false); await UserManager.SetLockoutEndDateAsync(user.Id, DateTime.Now.AddHours(-8)); } I just need to add a statement to if(user.LockoutEnabled) that checks for the TIME section of the value. Right now it looks like if(user.LockoutEnabled &amp;&amp; date.TimeOfDay != TimeSpan.Parse("1:37:59")) but is obviously not working.
Wow, I never even knew that autogeneration was a thing... Thanks!
I got it working :thumbsup: (as if emojis worked here)
You could also use [XPath](https://msdn.microsoft.com/en-us/library/ms256086\(v=vs.110\).aspx).
Doesn't that also require Roslyn?
I would wait for VS 17. Just in general market expirience when a new product comes out it's predecessor is significantly reduced in price. So I would wait and see, VS 15 will likely be cheaper and when VS 17 is released you can find more information about it to see if it's worth it or not.
Unless you get a subscription with a an upgrade to VS2017 on release, wait. The focus (and support) is now on .Net core/standard, which is just terrible on VS2015. I convinced my company to move to 2012 just before 2015 was released and regretted it a month later. They bought copies, not subscriptions. 
There are alternatives to intellisense you can install and I'm pretty sure intellisense itself it works on community edition of vs too :)
Just a small nitpick. VS15 is different from VS2015. In fact, VS2015 is version “14”.
If you're a solo dev, just use the community edition.
Thanks! I really appreciate it. I'll probably just pay for that one out of my pocket ;)
Why would you pay as a solo dev? 
So what you're saying is do yourself a favor but don't do yourself a SOLID?
If I was a solo developer I would use the RTM Enterprise version of 2017, and try it. It's free. 
Ha! Few people can even agree what the hell SOLID is actually trying to say. Meanwhile many of the FDG rules are actually built into Visual Studio as part of the static code analysis feature. EDIT: And you're really going to cite Microsoft's "Patterns and Practices" group? There's a reason nearly everything they've created has been deprecated instead of being promoted to be part of the .NET framework.
That's a ridiculous argument. Regardless if which version you choose from that example, you should have exactly one place where is gets invoked. There is no reason to copy-and-paste that loop all over the place. Hell, ideally there would be a `FeatureCollection.DoAllTheThings()` method. 
Last time I checked only the older enterprise block frameworks have been deprecated. Frameworks like Unity came out of this group and are still relevant today. I am not going any further than that, I can already tell its not worth really discussing with you. 
Unless you are a big company, sign up for Bizspark and get lots of free MS software including visual studio. You just need your own domain name with an email and a website. I literally just called myself "[my name] software" and sent them a link to my portfolio website. I got the acceptance a couple weeks later.
Ok
I've been writing a site in .NET Core for the past 6 months or so in VS 2015 and it's been just fine. I tried out the 2017 RC and it couldn't even open or convert the project, so I uninstalled it. I wouldn't say 2015's support is "just terrible" at all.
Hey, I'm doing just this for the next six. If you don't mind me asking, how has .NET Core been treating you? What's some pitfalls I should look out for? I'm writing a web store for my bachelor's degree project, and decided to go Core - because reasons (and I really like .NET) :)
Try [OpenGL.Net](https://github.com/luca-piccioni/OpenGL.Net/). It looks actively maintained.
An emoji is a Unicode character, which *does* work here. What you typed isn't an emoji, just a shorthand for a particular program.
Oh... I must've missed that when I inspected the page. Thanks! 
I'm fortunate that my company buys subscriptions. It's really the better way to go. 
Depends on when you last tried. 2017 has been in RC status for a bit now.
2015 has support for the old version of .NET core. That version is goimg to be gone soon.
I've never used azure but if a subscription includes a credit i should look into it. Also happy Cake Day!
IntelliTrace is a really nice feature. It simplifies debugging quite a bit. Even though I know how to debug with breakpoints and Try catch blocks there have been times where IntelliTrace has caught an issue well before any other debugging methods did. It's also good for picking out first chance exceptions that tend to slip through some standard debug techniques.
If someone asked me what's the best book on API design for Java, I'd say "Framework Design Guidelines, noting the naming conventions are different". While some of the specifics are different, the theoretical underpinnings are applicable to any OOP language.
I really like it, haven't had any major issues with it. Took a little bit to get used to since I started from scratch, but the docs are pretty good and the community has written a lot of blog posts and answers on Stack Overflow at this point. The .NET team is very quick to respond to issues on GitHub as well. I would definitely recommend it if you have the option to use it.
read it into an XmlDocument then use SelectNode and SelectNodes methods with Xpath notation to select either single XmlNode, or XmlNodeList. You can also traverse the document easily with these objects, and make sure you check the Xpath notation documentation, it is very powerful. Always check you are in the correct xmlns if you have no results
If you're using Visual Studio you should be able to have it do the same thing for you. Copy the XML to your clipboard Open the file where you want the classes to be placed From the menu select EDIT &gt; Paste Special &gt; Paste XML As Classes
Oops I must have skim read, my mistake!
To answer the question on how to use the class look up XML serialization
Yes but projects will be updated automatically to the new project type. That's really the only difference, and we're not getting any new features exactly.
Thanks for googling that, sadly they themselves don't even seem to include a usage example...
Yah, it creates the class and all, but I can't figure out how to pass a XML file to the class and process it.
It's also worth noting that a lot of the incredible features of VS2017 (like live unit testing) have no support for .NET Core and there's no tentative date for it to be added. The biggest reason I finally bit the bullet and went through the (currently horrific, especially on a 50 project solution) conversion process is that a lot of the tools I want, like NCrunch, are only going to be available to .NET Core because of Microsoft's move back to msbuild in 2017. With that said, .NET Core development in 2017 is at best on par with 2015 at this point since none of those tools have been released yet. And I still miss just being able to copy a big chunk from one project.json to another.
What is the problem you are trying to fix?
Well, given the change is essentially in alpha at the moment it's a bit unclear. The tooling for .NET Core in VS is awful. Both versions are preview builds and at least a little unstable. Making core work properly in VS is the reason the project formst is changing in the first place.
Then check for the `null` value before adding it to your `List&lt;Cards&gt;`.
Also note that if you change your search method to find cards by their index, you'll need to update the range of the random number generator the be from 0 to cards.Count -1.
If you really need a textbox, you could set the ActiveControl property of the form to another control, like a label or something.
Yeah probably will , glad you like the video means a lot. I know the mic quality isn't great but I'm gonna get that fixed soon!
Why not just use visual studio community 2015?
 &lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;?xml-stylesheet type="text/xsl" href="stat.xsl" ?&gt; &lt;rtmp&gt; &lt;nginx_version&gt;1.9.10&lt;/nginx_version&gt; &lt;nginx_rtmp_version&gt;1.1.7.10&lt;/nginx_rtmp_version&gt; &lt;compiler&gt;gcc 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04) &lt;/compiler&gt; &lt;built&gt;Feb 4 2016 10:30:39&lt;/built&gt; &lt;pid&gt;1519&lt;/pid&gt; &lt;uptime&gt;4590279&lt;/uptime&gt; &lt;naccepted&gt;58&lt;/naccepted&gt; &lt;bw_in&gt;266424&lt;/bw_in&gt; &lt;bytes_in&gt;10460438619&lt;/bytes_in&gt; &lt;bw_out&gt;776&lt;/bw_out&gt; &lt;bytes_out&gt;2725433129&lt;/bytes_out&gt; &lt;server&gt; &lt;application&gt; &lt;name&gt;live&lt;/name&gt; &lt;live&gt; &lt;nclients&gt;0&lt;/nclients&gt; &lt;/live&gt; &lt;/application&gt; &lt;application&gt; &lt;name&gt;public&lt;/name&gt; &lt;live&gt; &lt;stream&gt; &lt;name&gt;WF05-86C3-7824-9066-7FDE_test1&lt;/name&gt; &lt;time&gt;10414&lt;/time&gt;&lt;bw_in&gt;0&lt;/bw_in&gt; &lt;bytes_in&gt;572440&lt;/bytes_in&gt; &lt;bw_out&gt;0&lt;/bw_out&gt; &lt;bytes_out&gt;0&lt;/bytes_out&gt; &lt;bw_audio&gt;0&lt;/bw_audio&gt; &lt;bw_video&gt;0&lt;/bw_video&gt; &lt;bw_data&gt;0&lt;/bw_data&gt; &lt;client&gt;&lt;id&gt;235&lt;/id&gt;&lt;address&gt;127.0.0.1&lt;/address&gt;&lt;port&gt;60792&lt;/port&gt;&lt;time&gt;10619&lt;/time&gt;&lt;flashver&gt;FMLE/3.0 (compatible; Lavf55.51&lt;/flashver&gt;&lt;bytes_in&gt;574192&lt;/bytes_in&gt;&lt;bytes_out&gt;543&lt;/bytes_out&gt;&lt;dropped&gt;0&lt;/dropped&gt;&lt;avsync&gt;-8267&lt;/avsync&gt;&lt;timestamp&gt;8267&lt;/timestamp&gt;&lt;publishing/&gt;&lt;active/&gt;&lt;/client&gt; &lt;meta&gt;&lt;video&gt;&lt;width&gt;640&lt;/width&gt;&lt;height&gt;480&lt;/height&gt;&lt;frame_rate&gt;15.000&lt;/frame_rate&gt;&lt;codec&gt;H264&lt;/codec&gt;&lt;profile&gt;Main&lt;/profile&gt;&lt;compat&gt;64&lt;/compat&gt;&lt;level&gt;3.1&lt;/level&gt;&lt;/video&gt;&lt;audio&gt;&lt;/audio&gt;&lt;/meta&gt; &lt;nclients&gt;1&lt;/nclients&gt; &lt;publishing/&gt; &lt;active/&gt; &lt;/stream&gt; &lt;stream&gt; &lt;name&gt;WF05-86EC-7824-D434-739F_hfxinput&lt;/name&gt; &lt;time&gt;10262&lt;/time&gt;&lt;bw_in&gt;0&lt;/bw_in&gt; &lt;bytes_in&gt;0&lt;/bytes_in&gt; &lt;bw_out&gt;0&lt;/bw_out&gt; &lt;bytes_out&gt;0&lt;/bytes_out&gt; &lt;bw_audio&gt;0&lt;/bw_audio&gt; &lt;bw_video&gt;0&lt;/bw_video&gt; &lt;bw_data&gt;0&lt;/bw_data&gt; &lt;client&gt;&lt;id&gt;236&lt;/id&gt;&lt;address&gt;44.44.22.22&lt;/address&gt;&lt;port&gt;42828&lt;/port&gt;&lt;time&gt;10422&lt;/time&gt;&lt;flashver&gt;LNX 9,0,124,2&lt;/flashver&gt;&lt;bytes_in&gt;374&lt;/bytes_in&gt;&lt;bytes_out&gt;436&lt;/bytes_out&gt;&lt;dropped&gt;0&lt;/dropped&gt;&lt;avsync&gt;0&lt;/avsync&gt;&lt;timestamp&gt;0&lt;/timestamp&gt;&lt;/client&gt; &lt;nclients&gt;1&lt;/nclients&gt; &lt;/stream&gt; &lt;nclients&gt;2&lt;/nclients&gt; &lt;/live&gt; &lt;/application&gt; &lt;application&gt; &lt;name&gt;private&lt;/name&gt; &lt;live&gt; &lt;nclients&gt;0&lt;/nclients&gt; &lt;/live&gt; &lt;/application&gt; &lt;/server&gt; &lt;/rtmp&gt; 
It's windows only, which is why I just use a text editor and a command line on Linux for .net development... VS code isn't like VS with a solution explorer and everything that there is on VS15, sadly.
Depends on what you're making I guess
Ok, thanks. Kinda from scratch myself. The docs are really good, and the new intro video series for ASP.NET Core on Microsoft Virtual Academy is helping me out a lot.
True. Got me there. Microsoft is starting to embrace Linux more lately which is great. I wish they would make one for Linux though.
Figured out I need to extract from the root XmlSerializer stream_serializer = new XmlSerializer(typeof(Stream), new XmlRootAttribute("rtmp")); Still struggling to "loop through" each instance of stream, but thanks again for your help I really appreciate it!
Well all abstract interfaces follow that rule in .NET. (Not in Java though, because of default methods.) As far as concrete types, well how do you know if a type is truly closed? Microsoft can decide to add a new field or method at any point in the future, so all you can do is spot instances where they did violate the rule. The exception is probably structs. Structs are very sensitive to their total size, so adding a field to an existing struct can cause serious performance problems for someone using it. New methods are, of course, essentially free. *** Turning our attention to open, well that's easy to see it isn't a rule. Some classes are inheritable, some are not. Most though are neither open nor closed. If you have a class that's entirely non-virtual, but still technically inheritable, you find yourself in a weird situation where functionality can be added but not altered. So half-open? *** You can contrast this with COM programming where, again, when adding new features to a class you need to define a new API. This is why so many have "2" or "Ex" in their name. OCP is essential here not for philosophical reasons but rather technical. Example https://msdn.microsoft.com/en-us/library/bb984294.aspx 
I guess, I want to process all instances of the node &lt;stream&gt; &lt;stream&gt; repeats itself many many times depending on activity and I want to loop or iterate and process them all.
Just don't. Use Skia instead.
Depends on the severity of the data. If it generates or loses money, set up Web services and store on your servers. If not, a simple hash will stop 99.5% of users from messing with it. Really depends on what is at stake.
this doesn't answer the question, either.
Well that's the thing, isn't it. There is no real way to show a true example of OCP because it discusses how code changes, not just what it looks like. It would be like asking if the dependency chain A--&gt;B was inverted. The only way to answer is to go back in time and see if it used to be B--&gt;A.
Yep. Pros: You don't break anything that other people were depending on. Cons: You just made your API harder to understand and use. But there's more to it than that. Library design in general says that you shouldn't change existing functionality. OCP goes one step further and says you shouldn't even add new functionality without a subclass (or wrapper I suppose). That's why I don't like SOLID. It takes ideas that are good sometimes and tries to apply them all of the time. *** Now some people say that I'm exaggerating and that you "need to know when to apply SOLID". They're right in a way, but I counter that without the "always do this" part of SOLID it is just a clumsy way of describing basic language features.
Not being able to take advantage of MSBuild and solutions is pretty much synonymous with sucking in Visual Studio. Microsoft have been pretty clear about their intentions, but at the same time, tooling for .Net core is still preview in both versions of Visual Studio and there's no immediate indication that's going to change.
The cleanest way would probably be to start a new project and import the source files from the other projects. I've never done what you've mentioned, but I assume the separate projects the decompiler has given you contain source files that you can browse. I have used a decompiler before, and the readability wasn't great so good luck.
Hey, thanks for the reply. The decompiler, in conjunction with a plugin, renders out full .csproj folers, with a main .csproj file, and all the associated .resx and .cs files (neatly arranged in folders). It is pretty impressive. My issue is that the different elements of the original program, namely the main .exe file, and 4 .dll files each needed to be decompiled in this manner, so I am left with 5 different complete csproj 'projects'. This means the resources and classes in the code of each 'project' often refer to stuff in a different 'project', if that makes sense, so while I can load each 'project' into VS individually, I am immediately presented with a load of errors. The code itself, in all of these 'projects' is sound, and the namespace referrals all make sense, just I need to put the whole lot together for it to become operational. 
Just make an interface containing your data retrieval/save methods and implement them. Basically, that way you can easily switch it out later with another implementation. Don't go crazy with generic repositories or unit of work implementations, they will only cost you time. Make sure that everything query related happens in your repo methods (filtering, sorting and such). Dapper is rather fast for an orm, and does support stored procedures (check the [docs](https://github.com/StackExchange/dapper-dot-net/blob/master/Readme.md)).
With creating an arbitrary structure before needing it or knowing what problems it will solve. OP should just carry on coding and not worry about the project structure. That can be refactores later.
Why don't you just create two projects and compare them? &gt; is there a way I can tell my project to forget about that dam'n home controller and the related routes if I've created a web api template? Yes. Remove the default route from the route registration.
You can use int.TryParse(). It will try to parse a string into an int and returns true/false if it succeeds or not. To check if the string contains 4 digits, you can do the following: int theNumber; //if the parse succeeds, nummer will be parsed into an int and assigned to theNumber If(int.TryParse(nummer, out theNumber)) { If(nummer.length == 4) { // Your code. } } else { //Parsing failed, nummer does not only contain integers } I am on mobile, the code probably isnt formatted. Next time, please put your code in a github gist or pastebin, and not as an image. Another tip is to program in english so people that do not speak German will understand what you are doing. If you have more questions, feel free to ask.
You can iterate on the string characters then you can use the [`Char.IsDigit(char)` method](https://msdn.microsoft.com/en-us/library/7f0ddtxh%28v=vs.110%29.aspx) to check if each one is a number. Alternatively, you could use [this overload of `Char.IsDigit(string, int)`](https://msdn.microsoft.com/en-us/library/0t641e58%28v=vs.110%29.aspx) and a `for` loop. You could also use a [regular expression](https://www.dotnetperls.com/regex).
The easiest correct solution would be to just check the range of the resulting integer (`i &gt;= 1000 &amp;&amp; i &lt;= 9999`).
https://github.com/Narochno/Narochno.Dapper/ This is what I use with Dapper. I've been burned too often by Hibernate and NHibernate and EF by extension. Theres more boilerplate because you have to hand write entities and SQL but for avoiding new problems like N+1 querying then it's the only way to go. 
Also, whether you use EF or not the team should get more familiar with SQL. Using stored procedures is a bad thing as it's not testable and doesn't do anything denormalizing with caching doesn't do ( which is testable).
How were you burned by NHibernate? I quite liked using it in a previous project.
I got burned by it at a previous job where it would randomly fail to acquire a session. Which meant that people would get their credit card charged, but not get what they paid for. We reverted the code to bog-standard ADO.NET and had no problems. 
We use it and roll our entities with CodeSmith.
Learning and understanding nhibernate is harder than ADO.NET and SQL imo. People make N+1 problems all the time because JOINs are too hidden. JOINs should be well understood and denornalization more often used. Referenced data should be cached as well. NHibernate doesn't know what reference data is. Session management also becomes a worry. The biggest benefit of ORMs is mapping between an entity and SQL which things like Dapper do well. Code generation from SQL tables (or the other way) helps but in practice, after the first time, you don't need this often.
Alright thanks for that
Oooh, boy, this ended up longer than I intended. **TL;DR:** Dapper is different and requires different thinking. EF may be right for you, or not, depending on your application. *** Dapper is designed around a very simple philosophy: Relational databases and object orientation are not directly compatible. It doesn't do complex hierarchy hydration and synchronization like other ORMs. And it doesn't do SQL generation. It just takes the result of a parameterized SQL query that you write and puts it into a C# object. And it does it fast -- blazingly fast. It's a couple hundred times faster than Entity Framework and that's after EF spent several versions trying to improve performance. That is the primary reason to use Dapper over EF: app speed and efficiency. Now, granted, that means dev times are a little higher. You have to write the SQL yourself, you have to handle the updates yourself, you have to build your data layer yourself, and ultimately, you likely have to *design your app* in an entirely different way than is classically recommended in a domain/entity oriented approach. But there's a simple reason for this: web applications shouldn't use entities. Seriously, they shouldn't. You don't need that complex entity hierarchy for a single web request. No, you really don't. We tend to build those hierarchies so we can think about the model across all of our web requests, but most individual web requests only really use a tiny fraction of that model. But we need that model to do our calculations, so individual web requests get heavy, since we have to reconstitute that model every request, because the data might have changed in between requests. So then we start looking for ways to improve performance. Perhaps we cache the whole model? That has its own host of problems. Or we try to do these partial model hydration deals, which tend to make our business logic start to need to be aware of what parts are in memory and what parts aren't. It all becomes an unruly mess really quickly, all in the name of a clean object hierarchy that we can call *The Model*^TM. Dapper rejects all that. Instead, the philosophy of Dapper is that *The Model*^TM is an abstract concept that lives with the data, *not* in code. You can still do domain driven design, just don't try to shoehorn your perfect domain model into a one-to-one mapping of classes. Instead, focus on targeted queries and result objects that don't necessarily reflect entities but instead only make sense in the *current* web request context. Don't even bother with repositories, they only make sense if you have entities. I mean, you can still have a data layer or even per-request "repository" classes, but they're not really entity getters and putters, since the objects they return only partially reflect one or more domain entities. It should come as no surprise that Dapper shoehorns into service-oriented architectures really really well. *** But all that is philosophy. It doesn't answer your specific questions. Yes, Dapper will take longer initially to set up your data layer than EF will. But, depending on your app and design approach, it could save you weeks or even months of work later on. So which should you chose? That depends on your app. If you have a simple database structure that EF won't barf all over, and you don't anticipate much in the way of volume, or if you're *really* clueless about SQL, EF is probably a better choice than Dapper. But if you have a web application that will have heavy volume initially or eventually, or if you plan web services as the main source of data for your app, or if you have a complex database with weird relational shenanigans (sadly all too likely if it's a legacy system), Dapper is a better choice both in the short term and in the long run. *** To answer your specific questions about how dapper handles a complex join, it's actually simple: Your complex 3-table join, assuming you get any data back, will result in a flat result set that has nothing to do with the tables from which it joined. It will have one or more columns, and one or more rows. Dapper will take that result set and map it to an IEnumerable list of C# objects. Each object represents a single row in the result set, and its fields will be mapped one-to-one to the columns for that row in the result set. That's it. You give Dapper the query and parameter data necessary for the query to execute, you tell Dapper which class to map the results into, and it gives you back an array of instances of those classes. Dapper does let you split each row into an object hierarchy, if you like, using something called a Multi Mapping. If your complex 3-table join is intended to result in 3 entity objects (one per table), then use this feature. This is a complex however, so if you have questions about how that works, I'll be happy to help in a separate post. 
AreSame checks for two things referencing the same object. Something like AreEqual would do a value comparison to see if two objects are equivalent. Check the NUnit documentation. It is fairly comprehensive and well written. 
You must be a terrible dev or at least one to be doomed to be stuck in mid level c# forever. What a poor attitude. You'll start seeing improvement day one with solid. Better more testable code that is easier to change later. It opens up proper abstractions and DI, unit testing and TDD. All the things that you claim the FDG book does except actually understanding why. Clean code and solid take no time to start seeing improvement. it does take years to fully understand the ramifications of it but that's because its so foundational to the core concepts of OO. It absolutely will make you a good developer in every OO language, not a mediocre one in just c#. I'd bet that even the authors of the design principles book will tell you how important SOLID is. There is a reason so many people recommend it over the .net design guidelines. It's about foundational OO understanding and how to write code that's easy to add extend, update and change in the future in any OO language. To the OP. You could listen to your peers that set you on this path and the many devs in this thread that recommended SOLID and clean code or you can listen to the one guy who can't seem to grok it so he simply dismisses it as crap without reasons why. 
Also, if you are about to use the code above in some real code-base, be sure to properly dispose of writer/reader objects in the ToXml/FromXml methods.
You are just reading the marketing material. SOLID is not a religion, stop treating it like one.
Get the book, don't just read the rules online. The commentary is just as important, especially where they disagree with some of the rules. 
on my team, if you suggest something, you've accepted responsibility to create a proof-of-concept. that said, I think it would benefit you as a developer to learn some SQL and keep experimenting with Dapper. just dont hamfist it into production before anyone's truly ready for it.
WinForms based and yet claims to be a "framework". Also claims to be "cross platform" and yet it counts "platforms" as C#, .NET, VB.NET and Visual Studio. Just... wut? Better off with WPF anyway.
 static void Main(string[] args) { XmlSerializer serializer = new XmlSerializer(typeof(Rtmp)); Rtmp rtmp; using (var sr = new StreamReader(PATH_TO_XML)) { rtmp = (Rtmp)serializer.Deserialize(sr); } foreach (var application in rtmp.Server.Application) { List&lt;Stream&gt; applicationStreams = application.Live.Stream; //do something with stream } }
Card is an object, FirstOrDefault can return null. You need to check for null in the linq statement or after. If you want to handle null possibilities you need to make a linq where clause that will handle the default assignment.(DefaultIfEmpty) I mention use of linq and I get downvoted not sure the logic of this thread.
That's when you wrap it in a client class that can roll back your session if an exception occurs. 
What marketing material? I've been using solid for years. It's not a religion, I'm not trading it like one. It's amazingly useful stuff that really does separate good, clean, changeable code from code that isn't. To be simply dismissive of it because you haven't taken the time to understand it is fine for you. I'm not trying to convince you because you've made up your mind. Do what you want. But telling somebody to forget about something important that is going increase knowledge and understanding is horrible advice so I'm going to interject. Like I said, do what you want but don't spread your deliberate ignorance.
Here you go: https://github.com/bitwarden/core/tree/master/src/Core/Repositories
Picking your tools before you know the problem is a really bad idea, as is writing code before you have even investigated if there is an existing library or framework that can be reused to solve the requirements.
[Dapper.Mapper ](https://github.com/dotarj/Dapper.Mapper) is the extension I use for multiple table joins. Meaning you can return query results into multiple object! Using the Spliton option to define where the next object is. Also for one to many relationships, return all objects into an Array and use Linq to join them. This seems to be the most performant and most straight forward way.
I hate sticky headers. Is it really required to constantly take away almost 120px of vertical space?!
Thanks for the feedback! That's been annoying me a bit lately (I created the blog originally over 4 years ago), so I'm looking into changing the theme. I'll look into picking one without a sticky header. :)
Opinion: Second way is waaaay cleaner than the third.
&gt; Maybe it's actually useful for more complex/larger projects. Agreed. I think the example I provided is a bit simplistic, but I didn't want to build something overly complicated. When the code after the "hole" is more complicated, the benefits become clearer. 
Wow. You are lost. You don't understand SOLID even on a basic level and "look down on" those who do. It's impossible to convince someone who is willfully and deliberately ignorant. Hopefully OP realizes this but either way, I'm done with you.
I think a slightly cleaner approach to the permission and feature status checks would be building a few small custom [ActionFilterAttribute](https://msdn.microsoft.com/en-us/library/system.web.http.filters.actionfilterattribute%28v=vs.118%29.aspx)s, that would allow you to add custom attributes like [AuthorizeUserPermission(UserPermissions.ManageUsers)] [AuthorizeFeatureEnabled(Feature.UserManagement)] That would allow you to add them to the various controllers or actions as needed, and use them elsewhere.
Beg to differ that using stored proc isn't testable. If anything you've added another layer of abstraction into your application and thus added another layer you can test from. Yes, you could test the execution and result of stored procedures on the db only as integration styles tests. Now if you want to only test your c# code and ignore everything else, you might have a little ground to stand on. That being said, I'd personally argue having all sql buried in c# away from the db where you don't have nice features such as schema binding to tell you that column or table has changed and is no longer compatible like stored procs gives you is a negative. 
I've always wondered if this would be slower than the regex alternative
And it's subtly wrong. Specifically this bit of code: if (userInSystem == null &amp;&amp; userDoesNotExistOperation != null) { user = userDoesNotExistOperation(inputUser); } else if (userExistsOperation != null) { user = userExistsOperation(user); } If the user does not exist but there isn't a doesNotExistOperation specified, the userExistsOperation will be called.
I agree. And outside of MVC/API, you can use PostSharp to do the same thing (or Castle DynamicProxy)
Thank you very much! This has me almost doing something useful. Not sure why I am struggling so hard with something that should be a fairly simple task. I keep getting caught up on getting the &lt;stream&gt;&lt;name&gt; and &lt;stream&gt;&lt;client&gt;&lt;address&gt; etc on the inside levels though. Console.WriteLine("Stream1: " + stream.Name); Console.WriteLine("Stream2: " + stream.Meta.Video.Height); Console.WriteLine("Stream3: " + stream.Client.Id); Console.WriteLine("Stream4: " + stream.Bw_video); Always return nothing... I can't seem to direct it to the right layer.. thanks again for your comment and time!
Is this similar to doing a :before/:after/etc filter in Ruby?
Personal attacks won't change the fact that your job is to understand the implementation details of the systems you work on.
D'oh! Thanks for letting me know; I updated and fixed it.
Ah, that's neat. I've never heard of PostSharp or DynamicProxy, so I'll have to check that out. 
^ Bingo!
Please use pastebin, gist, github or something like that to share code. It will help us see the code better.
Obviously you're right, in programming there are no universal wonder-solutions. But isn't there something that you always use when you have to build "just another well known application" ?
You could store it in a static variable? I think intents are supposed to work like that. If you want to keep it active, you could keep applying the intent to every activity you want... But that sounds a lot messier
&gt; Console.Title = "Cleint"; Spelling, the bane of us all. You seem confident enough, I don't think you'd have much problem entering at entry level or above. Just state that anything you don't yet know you feel confident you can learn and adapt to quickly. You'll be grand lad.
&gt; I'd recommend just 'new'ing the class in your main method and then getting rid of the static. why? you mention why i should do those other things and i agree and have been looking into them but you don't say why i should here
I think it will suffice to just read the reddit formatting help or the sidebar.
OP, please press "formatting help" and read how to format code (empty line before and after, each line indented by 4 spaces).
What kind of project is it?... is it supposed to run on a "normal" .Net platform? It seems other have the same problem when trying to used restricted .Net platforms: https://social.msdn.microsoft.com/Forums/en-US/84d640eb-67ef-4722-a36c-96752bab163e/cannot-find-type-systemmarshalbyrefobject-in-module-mscorlibdll?forum=winappswithcsharp
&gt; something that you always use If you always use a hammer, then everything becomes a nail &gt; "just another well known application" Then in all likelihood it has already been implemented by somebody else and can be re-used. In my job I am not paid to write code, I am paid to implement solutions to problems based on requirements, that might require writing code in my preferred language/framework, or learning a new technology, or re-using an existing framework, or outsourcing etc... the important thing is that I implement the best solution to the problem.
have you been working in the industry long? how readable is my code? would you say it's well commented? i had to do my bachelor externally and didn't really get to see other peoples code and really only got feedback on my code at the end of the assignment and it was usually short too.
How strange... I did set the transparency index so the form should be "seethrough" and just the snowflakes should be visible... if you want the form bg to show simply change the colour of the background to grey or something!! http://www.filedropper.com/testani try the solution from above link ^^^^
Then the loop will probably be faster, but probably not by much compared to a compiled regex which should compile to something that looks like the loop you would write. But this is more or less speculation. You could test if you want to find out. My guess is that the difference is small.
string is an alias for the System.String class.Anyways, you have all the details here : http://stackoverflow.com/questions/7074/what-is-the-difference-between-string-and-string-in-c
Ok, cheers!
C#, as a language, has keywords for a number of common types. These are then mapped to types in the runtime system, so `string` maps to `System.String`, `int` to `System.Int32` etc. As for when to use which, it's a matter of local convention. At my work we use lower case when using it as a "type" and upper case when accessing members on it (such as calling static methods); so we would use `string s;` and `if (.... == typeof(int))`, but `String.Format(....)`, `Int32.TryParse(....)` etc.
Very nice and elegant. Just one minor correction: you've used *userToReturn* instead of *u* inside the lambda expression in *UpdateUser().* 
I don't have any "clients" but I do have a large database with many legacy data quirks that require more thought about how data is accessed. If I was doing a straight forward CRUD website with a fresh SQL database where I could do code-first EF then you're right. Often people have legacy concerns and SQL correctness is paramount. This might mean doing handwriting a lot of simple SQL but it's worth doing once in the contexts I work in. 
If you want to get into a wording battle, then sure, I'm wrong. Call it "materializing" then. Dapper does that one thing well. Others exist, but they aren't faster than Dapper. I don't need or want higher abstractions. So Dapper fits the fit as it's the fastest.
While this isn't exactly my area of expertise, if you want to "move" the cards around I'm pretty sure you are going to need the system.drawing library and a couple other dependencies related to system.drawing. I'm also pretty sure that there is some rendering magic you have to do so it makes the card glide smoothly across the page.
You're correct in that I could do it with an ORM if I learned how to do it correctly with the ORM. Why do that when I can just do it with SQL? I don't want to be an expert with a specific ORM.
I find it hard to do things "correctly" with ORMs. Maybe things have matured but 5 years ago it was just pain when JOINs got out of control. Table "inheritance" and worrying about lazy loading or not. If it's all just in the SQL isolated to a single query/command class for a given job it's just much more straight forward. I could just be bitter from having to clean up after misuses of ORMs.
Since no one has mentioned this fully explicitly, System.String is a .NET type - all .NET languages must have it. C# in particular adds the string keyword as an alias, just like int aliases the .NET System.Int32.
In the interest of clarification: a governing (coding) standard would be one you are required or expected to follow. For example, a coding standard officially adopted by one's employer, or one required by a particular open source project. This is distinct from one that is suggested or which exists but is not enforced/enforceable against you: Microsoft has a C# coding standard, but it is only governing if you work for Microsoft or choose to follow it.
I'm not a Ruby expert, but yes I think so. It's a form of AOP that's introduced by the MVC/Rails framework
Yeah something like that, that's the idea. They are also colored differently (at least when using ReSharper). But as /u/xill47 also said, it is, indeed, just a preference, which is in our coding standard at work.
That's Windows in a nutshell; files are locked for almost any operation taking place on them, unless the accessing code explicitly tells the system to open it in "share mode". Most programs don't. One common scenario is when an executable is running it locks the .exe file.
*facepalm* When I saw this reply, I immediately scrolled up and looked for the Close button so I could close this question as a duplicate. ...don't ask me why I thought I was browsing Stack Overflow.
VS 2015 suggests changing to the lowercase "string" for the static methods, so I've started to use lowercase for all usage.
This is just wonderful and great.
heh, this is one of the best comments I've seen in a while, +1.
Both are correct, they're keywords that function as aliases for CLR type names. 
This annoys me so bad. I've been doing it the same way as described above for over a decade, and I really prefer it this way.
Then turn the suggestion off. It's just a suggestion. You need to configure the tools you use to your liking, not blindly follow them.
That's because the method names stay the same. The `int` will be just translated to `Int32`. Imagine you have a method named `GetUlong()` - and now you access it from a different language than C#. In F# the alias is called `uint64` (much more expressive).
I just wanted to try to use LINQ tbh. :P
 from message in db.message where message.sender == 1 || message.receiver == 1 select message;
I think the best way to do this is through 2 queries honestly. I don't know if it will be the most performant, but its is the most readable. Our first goal is to get the most recent where the individual is a sender, then the second where they are the receiver. We will then union them. This is all done in this linq query. db.Message.Where ( x1 =&gt; x1.sender == user &amp;&amp; x1.sendtime == myClassList.Where(x2 =&gt; x2.receiver == x1.receiver).Max(x2 =&gt; x2.sendtime)) .Union(myClassList.Where ( x1 =&gt; x1.receiver == user &amp;&amp; x1.sendtime == myClassList.Where(x2 =&gt; x2.sender == x1.sender).Max(x2 =&gt; x2.sendtime))).ToList() * user here is the targeted user, who I believe is represented by User.Identity.GetUserId() The first part goes through and finds the message with the latest time from the targeted sender to receiver. The union binds the data sets and the second query finds the message with the latest message from a sender to the targeted receiver. I tested this and I get the result set you are looking for. If needed I can post the linqpad query I wrote for this or I could break it down into SQL as well to help you out. (FYI - this does iterate over the collection 4 times possibly. If you are using an ORM I would suggest looking at the sql generated to see if your database is tuned/indexed properly to meet the needs of the query to help with any type of performance issues.) *edited for code formatting*
&gt; If needed I can post the linqpad query I wrote for this or I could break it down into SQL as well to help you out. Yes please. I have only used linqpad queries in my project(my first project) so I feel comfortable using them. Also, I am confused if myClassList is the list object of the viewModel class or database model class. 
Been a long time since I used Java, but I don't think int and Integer are interchangeable in Java the way int and Int32 are in C#.
Can finally sleep [peacefully](http://imgur.com/CIxH8QC). Thanks a lot. Was stuck since yesterday. :D
that's more analogous to C# int vs int? tho.
One little thing to add to other excellent replies : You can use `string` without a namespace. `String` needs `System`. So either `System.String` (or `using System` declared above). 
How did you style the inline code?
Thank you. I checked the formatting help, but could not find that. Appreciate the info.
Well, I'm upvoting you because; laughter
cheers, lol
By default - it is configurable to not be.
I always use `string`. I've never seen the point of using `String` when accessing members or for whatever other reason - they are just arbitrary and nonsense, imo. I don't get offended if any of my colleagues want to use it, though. This is something that just flatly doesn't matter.
Close. More like `int` vs `(object)int` since `Integer` is a reference type.
I think the problem is you're trying to do two things in one event handler. The timer tick handler just fires periodically. It doesn't know anything about key presses. You should be moving the picture box using key press (or possibly key down) events, not timer ticks.
I see, thank-you for you response, I will keep playing around until I reach a fix
Ultimately I'd like to mess around with game development, and I'd like to dive right in and learn from experience. Your reply certainly does help, as I'm looking for the right direction to go in. Thanks!
I just use the lower case keywords all the time, because why not use what the language offers? Using the upper case class name is one additional keystroke, so the language saves me energy. :&gt; But if you are used to String, just stick to that or the convention of your workplace.
`string` is a language-level keyword; `String` is a class in the standard library. All syntax highlighters see those differently.
Fresh CS grad here. I learned the basics of C# in a class where we made Windows Forms applications (barf), but most of my learning came from diving in to some unity tutorials on the unity website and just making stuff. They have a bunch of videos on the unity website that walk you through coding game elements and some c# concepts, and I'd highly recommend going through some of them once you feel comfortable with the basics. If you're looking for a book to get you acquainted with the basics, "Staring Out with Visual C# 2012" by Tony Gaddis is the book we used in the windows forms class (Even though it was 2012 it hasn't changed much since then, we used the book in 2015) It'll baby you through all of the basic concepts of C# and I thought it was a great introduction to the language.
okay. i updated it with asynchronous instead of the thread per client setup and it works as far as i can tell. only tested with 2 clients and the 1 server but it works. if you wanted to take a look at it again.
ExpectedException in a MS Test attribute. I've personally moved away from MS Test for XUnit. You can use Assert.Throws&lt;ExceptionType&gt;(() =&gt; [Your Method]); in Xunit to do the same thing. 
It's not about WPF or not, it's about the requirements for the solution e.g. if it needs to support multiple Desktop and mobile OSs then a Dot Net Core code-base with UWP and Xamarin would be a good choice, or maybe an ASP.NET based solution.
&gt; I've personally moved away from MS Test May I ask why?
And `string` cannot be used with `nameof()` while `String` can (just like all other aliases).
Thanks, I'll give this a shot
The ability to do Assert.Throws, parameterized tests, and traits at class level. Parameterized tests allowed me to write less code and perform more tests. Edit: My tests also run faster with Xunit. I have a project that has around 2000 unit tests. In MS Test it would take about 8 minutes to run all the tests but in Xunit it takes about half that time.
I guess you can use some native stuff, but newtonsoft's json is soooo simple it's a no brainer, a must have in json serialization
If you grind long enough, the confidence will kick in, it takes time. Embrace the low confidence at first, it means you can be critic to self which is also key to being a better dev. Being in a job helps with the grind. I'm not the best dev out there, but I feel way more confident now than before. 
Hum.. I bought 'latest' they had 8 months ago, it's been collecting dust until now, heh..
Only *15* disjointed standards though. :P
Yes, linq is way less error prone. May take time to understand the syntax but it pays off. Alternatives: * Before finding a given card, check if it's true that the card is in the cards. If it's not there, you don't attempt to find it, thus you don't get a null. * Don't do that, just do proper null checks to avoid nullref exception, saving you one iteration. 
I believe it is subreddit-specific.
It varies per person, but I've been using mac to develop since 2012 and am used to it now.
There's value in Assert.Throws over doing it at the test-level, too. For example, if you want to verify the invoked method throws AND the interactions it performed up until the throw.
Your fastest way to check a string if it's all digits is using the below method. bool IsDigitsOnly(string str) { foreach (char c in str) { if (c &lt; '0' || c &gt; '9') return false; } return true; } I used BenchmarkDotNet to check the fastest of 3 methods (Char.IsDigit, intTryParse, and Char Ascii (method above)). Method | Mean | StdDev | Gen 0 | Allocated | ------------------ |------------ |---------- |------- |---------- | IsDigitsTryInt | 101.5097 ns | 3.4195 ns | - | 0 B | IsDigitsAllChar | 75.1891 ns | 2.7735 ns | 0.0195 | 96 B | IsDigitsCharAscii | 20.1683 ns | 0.5950 ns | - | 0 B | You could add an if statement inside the method to check the length first to make sure it's 4 digits or make it a parm to pass in the correct number of digits so you can reuse the method. bool IsDigitsOnlyAndExactLength(this string str, int expectedLength) { if (str == null || str.Length != expectedLength) return false; foreach (char c in str) { if (c &lt; '0' || c &gt; '9') return false; } return true; }
i don't really know what i can do better. that's why i posted my code up here. and i have been programming for a while. 
I like LitJSON because it has good backwards compatibility, and is really easy to use. https://github.com/lbv/litjson This version lacks the ability to serialize floats, but there are a few forks that can do that.
if you can afford $25/month, [Treehouse](https://teamtreehouse.com) has a whole track of courses with C# on game dev with unity. You can take a look at the track [here](https://teamtreehouse.com/tracks/game-development-with-unity). I mostly take their webdev courses, but I really enjoy it. IIRC there is some sort of free trial. 
Wait... how do {}[] differ? I do all my dev in a Parallels VM on my MacBook and am basically clueless as to what would make it a nightmare?
The loop is the most effective way, and is a common best practice. Here's an example, if you need a template. bool running = true; while(running){ Console.WriteLine("Menu Options"); string input = Console.ReadLine(); switch(input){ case "1": Console.WriteLine("Exit program"); running = false; break; default: Console.WriteLine("Try 1"); } }
Eh, not really. I use either teknik.io or github. 
I would however set running to false on each iteration besides the default one, as this statement is the only one that should repeat the loop.
It's reddit wide as code block, but special coloring would be subreddit specific 
Note that ExpectedException is deprecated in NUnit. Use Assert.Throws instead :).
this is a side project to make a small multiplayer online game that works like an mmo. obviosly it won't be perfect and will have plenty of errors but it's a project i can slowly work on to help learn c# and .net as far as i understand tech is headed to remote computing so knowing how to set up and work a server and client seems like a handy skill to have. plus i heard c# programmers who know their way around .net are something employers keep their eyes open for.
Ah great! I saw Unity had plenty of tutorials, I just wasn't sure if they assumed your programming experience. I will take a closer look. [These are the lessons you're talking about right?](https://unity3d.com/learn/tutorials)
My thoughts exactly, I think I'd learn much faster by diving in rather than watching videos. I guess I'm just not sure where is a good starting point.
I agree, my hope was to find a course or tutorial that may cover some core concepts and put them to practice. Seems like many of have suggested the Microsoft Virtual Academy as a solid launch point
When the timer tick event is raised, the event data contained by "e" has nothing to do with keys.If you want to do something when a key is pressed, you have to: 1) set Form's KeyPreview property to true and 2) add a handler for the Form's KeyUp, KeyDown or KeyPress.And by the way, you have to make the "e" parameter of the timer2_Tick method of type EventArgs, not KeyEventArgs.
This, except don't use the ancient XmlDocument stuff. Use XDocument or XElement and the rest of XML LINQ.
I could not recommend Dapper more. It is by far the best experience I've had with SQL interaction. Doesn't hurt that it's fast either :).
`DependencyObject`s [aren't serialisable in the standard way](http://stackoverflow.com/questions/7294650/can-a-class-derived-from-dependencyobject-marked-as-serializable). Try using [XamlWriter](https://msdn.microsoft.com/en-us/library/system.windows.markup.xamlwriter\(v=vs.110\).aspx) instead.
You can bind your increment and decrement to a field. public int SkillPoint { get { //extra get code return _internSkillPoint; } set { //extra set code _internSkillPoint = value; } private int _internSkillPoint; You will have to use the SkillPoint field, and it will execute your code everytime you set or get the value. e.g.: myObject.SkillPoint = 1; This will execute your set code. EDIT: Didn't read the whole question, sorry. Yes you can just bind a Controller to it and link the Button Event to the Method. On a HTML &lt;Button&gt; with using _Razor_ for ASP.MVC: onclick="location.href='@Url.Action("List", "Search")'" Ask if you need help.
Ah, thanks.
Can you give an example of it being used? Try to buy me, I'm interested.
[removed]
Dapper may solve the issue of having control of the sql that's being executed, but wouldn't you still have a bunch of POCOs for each different data set because someone wanted to include this extra data field or that one? 
Hi :) Thanks for you answer. I'm currently trying with a tiny bit of Javascript; but it's already a pain in the ass. You say I could bind a controller to it, but I'm still wondering : --If I pass the full model to the controller, it won't be able to find which skill was the target of Increment/Decrement. --If I pass the skill itself to the controller, it won't be able to find the remaining OperationSkillPoint value. (Let aside the fact I don't know what your Url.Action is, I guess it's similar to an @Html.ActionLink() ? ) Can I do that without changing my model to add your extra bindpoint ? 
Just to clarify, there are no erorrs or anthing, it just simply doesn't populate the fields. webBrowser1.Document.GetElementById("PvpnetAccountDateOfBirthDay").SetAttribute("value", "10"); webBrowser1.Document.GetElementById("PvpnetAccountDateOfBirthMonth").SetAttribute("value", "12"); webBrowser1.Document.GetElementById("PvpnetAccountDateOfBirthYear").SetAttribute("value", "1990");"
If nothing is shared between the two instances of the console app, such as a database table or flat-file, they will not be aware of each other, and the 2nd (and subsequent) instance(s) will not interfere with the 1st instance.
Just curious, how much money do you make from ads?
For me this is just a fabulous feature in theory. I say that as I have not been able to successfully get it to work in our solution. It seems to not recognize the test project even when the subscript above the methods still show the unit test summary "3/6 passing". Will continue to tinker with it!
If you just want to learn the C# syntax then I recommend https://learnxinyminutes.com/docs/csharp/ Just a list of common C# features (and other language are on it too).
You can call the exact method you want from the controller, that way you can change the Fields of the currently underlying Contoller. Just use the controller as a field in your HTML. The Controller has to have an ActionResult as return type. e.g.: public void Increment(int paramterer) { return View(theNewValueOfYourInteger); } HTML: Url.Action("Increment", "ControllerName"); Your view must handle the NewValueOfYourInteger Parameter, (e.g. Set a &lt;p&gt; tag to the value in the View Constructor)
Even Microsoft doesn't use it now. So, get off it. The UI sucks and isn't going to change.
You act like setting a flag on the resharper config file that is distrubted with the .sln is some huge weeklong debate. If anything it's a bullet point on a slide amongst many. It requires very little to setup development standards. You should spend time congealing as a team, please, it will be better for those who come after you.
This. Learning the ins and outs of the EF Fluent API will save your buttox.
*You* act like it's some big debate. I'm categorically stating it isn't, and that it flatly doesn't matter. Move on with life and get some work done. My team prefer to work together on problems that actually matter, not whether `string` is more/less readable than `String`
I don't think it is some big debate. I think it's an easy standard to agree on and then move on to get some real work done. Obviously code standard don't mean anything to you. But a team moving with cohesion is important to me.
Had a look at the source of the page, and it doesn't seem to handle user input the way you think it does. Have a look at [this image](http://i.imgur.com/ore8l2o.png). It seems to add a div instead (I selected 1). Also, you might find that the default Windows forms WebBrowser is kind of..bad. Have a look at [CefSharp](https://github.com/cefsharp/CefSharp) for a more robust implementation. Edit: Also, I'd imagine Riot has protection for automatically filling out forms and things so I'd steer clear of doing just that.
More strawmen please. Code standards != team cohesion. 
Regarding your second point, if you really don't want to be tied to a specific entity for every query, Dapper has the ability to run a query that returns IEnumerable&lt;dynamic&gt;.
What am I executing via powershell? Didn't understand. Production connection string... There are 2 options: 1. Let it be connected via windows authentication (user running application pool must have access to database) 2. Protect it via "RSA Protected Configuration Provider" which you can use to secure webconfig sections. I prefer the first option, since it stays clear where the database is and it's the name.
Yes, but now i have to change the first method DataReader to accept transactions. The problem is, what i was originally trying to accomplish is not met, which was to reuse the code, if I have to readjust each method I rather just do a new method that implements the desired transactions. 
Our solution can help you use your existing database and any class you like to design. It allows for a lot of flexibility so it should work for you: https://github.com/okhosting/OKHOSTING.ORM Under that layer is this: https://github.com/okhosting/OKHOSTING.Sql Which is the actual SQL code generation tool. You can use this one if you prefer to perform SQL operations without ORM classes, but still have the SQL code generated for you from strong typed code. Let me know if you have question, will be happy to help.
The background worker was there because I didn't realize at the time i could create and run the timer async with the UI thread. I plan to remove the background worker when I get a bit more input and refactor the code.
Wow, thanks for letting me know! I would expect that disposing of the writer/reader objects (same for memory stream) would also dispose of its internal buffers. Not sure if it's just me but this is rather unintuitive. StringBuilder sb; using(var sw = new StringWriter()) { sb = sw.GetStringBuilder(); sb.AppendLine("This is the internal StringBuilder of the StringWriter object."); } sb.AppendLine("I would expect to see the reference to the StringBuilder disposed at this moment, but it's still there!"); Console.WriteLine(sb); The Dispose() method only internally closes the StringWriter and then calls the base.Dispose(bool disposing) method, which is empty (as seen [here] (https://referencesource.microsoft.com/#mscorlib/system/io/stringwriter.cs,47872c8709d73365,references)). This is quite interesting, thanks for sharing!
Dapper is fast, but there are cases where Chain, PetaPoco, or LLBLGen are faster. So you've got some options there. https://github.com/docevaad/Chain/wiki/RawBencher-Performance---Unofficial
I'm going to do some advertising for Chain. Let's say you want to pull some data from a table or view. Some of the screens need all of the data, others only need a small subset. DataSource.From("CustomerView", new {State = state} ).ToCollection&lt;T&gt;().Execute(); What this is going to do is generate SQL on the fly that matches the properties on T. So this one line of code can pull back just two or three fields or everything based on what type you passed in. *** If you are using RAML to generate your REST API and models, this becomes even more fun. Your UI devs can add a property to your model/DTO, and Chain will automatically populate it so long as a matching column exists in the table/view. 
thats some strong words...
Don't create the form instance inside the class. Inject an instance via the session constructor. Also, I don't see the need to call all the dispose methods?
Fair enough, but if you're utilizing a using statement, the C# compiler puts in a dispose call for you at compile time (that's the whole point of using)
"Dispose All The Things", not really needed due to the Garbage Collector doing its job. Dispose methods are usually not called explictly but automaticly when you wrap an object (that implements IDisposable) in a Using statement. [MSDN Using](https://msdn.microsoft.com/en-us/library/yh598w02.aspx) About the injecting. I wasnt really complete in my answer. Best practice is to have loose coupling between classes. Assuming Session is a reuable class you don't when a hard reference to a form in it. The best way to avoid that is using Interfaces and Constructor Injecting. A lot to explain here. But I suggest reading up on [dependency injection](https://msdn.microsoft.com/en-us/library/hh323705\(v=vs.100\).aspx) early on to get in the right mindset from the beginning :) Also have a read on [SOLID](https://www.codeproject.com/Articles/703634/SOLID-architecture-principles-using-simple-Csharp) principles. It can be a lot to take in but it will help you in the long run!
&gt;"Dispose All The Things", not really needed due to the Garbage Collector doing its job. This is bad advice. Garbage collection (freeing memory) and disposing (releasing handles etc.) are two different things with different purposes. While disposable objects will usually call their dispose method from their finalizer that's invoked during garbage collection, it is bad practice to rely on this because the GC is non-deterministic and resources will linger for longer than they have to.
&gt; There is always something new to learn. Just know that this never changes.
Which of the built in stuff? The DataContractJSONSerializer or the JavaScript whatever serializer?
I've used [this](https://github.com/facebook-csharp-sdk/simple-json) when I needed a no-dependency JSON serializer
You can wait with a timeout (even 0ms might work?), which should be basically equivalent to `Monitor.TryEnter`.
Nice, yeah, good idea.
I got excited for a moment, but then I realized that there is no way to check if it failed. TryEnter returns a true/false which you can act upon. **Edit: I was wrong, in case someone is hitting the same problem they can skip the rest of this and scroll to my next comment for a working solution** if (m_doingStuff) return; //&lt;- race condition here try { await m_semaphoreSlim.WaitAsync(0); //Now what?? there needs to be something like an if (timedOut) return; m_doingStuff = true; await DoStuff(); //This can take a long time. } finally { m_doingStuff = false; m_semaphoreSlim.Release(); } 
AsyncEx is a defacto standard library that provides many extensions to async code.
Unless you do anything to prevent it, they will both run at the same time. Whether that is OK depends on what they are doing. It sounds like your example would result in sending the same data twice. The UNIX way of preventing a program from running multiple instances is to use a lock file. The more proper way to do it on Windows is to use the Mutex class surrounded by a `using` statement. If you want to get fancier, such as causing a re-launch to make the first instance do something, you can use an EventWaitHandle and IPC to do it.
Came here to recommend dapper. Read times are amazing.
I would be happy to assist in resolving your issue. Feel free to PM me if you need any help :)
You seem to be misunderstanding the role of the view-model. The primary role of the view-model stores information about your view. That would be things like: * which character is selected * what part of the map are you looking at The view-model's secondary role is to hold a reference to your data models and services. *** The UI should send messages to the world such as `World.MoveCharacter(character, direction, distance)`. The world would see if the move is legal, then update then `Character.Location` property. The character object would automatically raise a generic `PropertyChanged` event that the UI listens for. What's nice about this design is that your UI doesn't have to exist. You can also have your unit tests send move commands to the world, allowing you make sure that part works by itself. *** In conclusion, design everything to work with just your data models. Then add the UI and view-models on top.
&gt; it's being in a job surrounded by people that are better than you im trying to see if im worth hiring in the first place! i want to work in the industry but im trying to make myself as appealing as i can before my trip to sydney(Australia) to apply for work.
I don't see you really having an alternative unless you try to recreate AsyncReaderWriterLock from scratch. It really is the correct answer here and building your own without looking at an example is just asking for trouble. I say this as someone who threw away most of his async code after seeing the AsyncEx library for the first time.
The ViewModel is specific to properties/refrences of the UI. I am not a game developer but I would imagine using MVVM pattern wouldn't be best for complex 3d games?
Are you getting HTTP 401? What's your binding security look like? Website might block Anonymous Authentication? 
Well I just ran into their [Developer](https://developer.dell.com/web/guest/home) Page. It appears no access until registered, API keys only for access and denial of service will take place until a key is obtained. It's there authentication that likely prevents access from web scrapers. So my question is, in order to make requests, I have to provide my API in the URL, per request. But if the application is complete, do I have to keep renewing the API key, or do they offer some form of concrete API key that will never expire ?
Thanks that helped clear my understanding.
not sure with Dell, I imagine it works similar to google maps. https://developers.google.com/maps/documentation/geocoding/get-api-key
[Entity-component systems](https://en.wikipedia.org/wiki/Entity%E2%80%93component%E2%80%93system) are pretty common in gamedev. 
Unless the game is very simple like a turn-based boardgame, I would agree with you. But I don't really know the design patterns for games so I just answered what I do know.
You're welcome. Here's a longer article I wrote on the topic if you're interested. https://www.infoq.com/articles/View-Model-Definition
Thanks. Ended up using newtonsoft
Wish I saw more of Scott Hanselman on HackerNews and Reddit. His posts are concise, easy to read, and informative. High signal to little noise.
Just noticing something immediately: request.ContentLength = parms.Length; using(Stream s = request.GetRequestStream()) { Encoding e = new UTF8Encoding(); byte[] postBytes = e.GetBytes(parms); s.Write(postBytes, 0, postBytes.Length); } You say in your request the `ContentLength` is `parms.Length`, which is the amount of characters in the string. Then you proceed to send the string **as UTF-8**, which can be more bytes than the strings length (since depending on the character it can have multiple bytes). Depending on the string contents you send more data than you said you will. `ContentLength` needs to be set to the amount of bytes you will send. Another issue is that you are adding the cookies of the response to your CookieContainer. Don't do that - this will happen automatically. But that likely is not the problem. What's the exact url you use? Is the server using a valid SSL certificate? What error do you get? The WebRequest will absolutely not just use HTTP when you told it to use HTTPS.
&gt; With https, it closes connection instantly. With http, results immediately get sent back. What's the behavior you see on your C# code? Get an exception? Empty content? I doubt this issue is strictly related to SSL. Besides that, I doubt it goes with the terms of usage of RuneScape to create accounts programmatically. &gt; (apache httpclient loves to automate a lot) Why don't you use the `HttpClient` of .NET then? It has a simplified API. `WebRequest` is when you need to use with the bare bones of web requests.
I use NUnit and I tried XUnit to compare. I don't like it at all, its documentation is practically nonexistent, it's parameterized tests are crippled compared to NUnit and it doesn't have a Description attribute which I use with nunit.
It's also important to mention what .NET framework you target. The website you target is using TLS 1.2 - but .NET 4.0 is only supporting TLS 1.1. For .NET 4.5 it's not the default and needs to be enabled.
Thx didn't know about Mutex gonna look into it. 
See: https://github.com/FransBouma/RawDataAccessBencher for how fast the main ORMs for .NET are in read scenarios. The code is easy to use so you can clone it and run it locally to see how the results are in your particular situation. Many people tend to recommend Dapper, but there are many other, often faster and better choices available (better documented, more features, flexible api, better supported). As it's reporting, you'll likely use a lot of complex queries resulting in flat lists. An API like Linq will not be suitable as it's too limited for reporting (e.g. how would you specify a windowing function?). So either a plain SQL interface (which e.g. LLBLGen Pro also supports since v5.1, and which is faster than Dapper) or an API which is able to specify all of SQL's statements properly are key. 
At the risk of sounding ignorant: Is there a "for dummies" version of this? I love exploring language concepts, but I understood close to nothing of this. :(
DoStuff doesn't access data, it's part of a poor mans throttle for connectivity (don't get me started)... It connects and initializes some resources in batches of size N at a time. With the race condition it would do them in batches of size N * r where r is the number of threads to hit the race condition. So not a likely, nor devastating bug, but since we see the problem we might as well fix it. Nothing can happen until connectivity is complete so this is the only place where the lock needs to be so far. I appreciate the pointers though. It helps to reflect a little extra on the problem when it comes to Multithreaded locks. 
It's a bit over my head, but it looks like a way of (sort of) defining a static interface, so that you can make assumptions about type operations that don't necessarily require a non-null instance. That said, it's managed here by forking the language a bit to add some additional syntax. I like the idea, and have bumped into one or two places where it would make my life easier in C#. (Can't summon any examples off the top of my head, though, so I'm not sure if this would solve any of my problems.)
Download and install VS2015 Community (free), open the `.sln` file and hit Build Solution from the build menu. Assuming there are no errors, that's it. You'll find the build output in the bin/ folder of each project.
First off, C# isn't, by default, a web development language. That being said ASP.Net (Microsofts web dev language) uses C# as a backend component to drive the website. So to answer your question, Yes you can build this website in C# using an ASP webforms app. It would require you to have an understanding of how ASP works and the special C# ASP syntax. I noticed 2 buzzwords here when reading through your post. The first being Dynamic and the second was Web Dev. Combine those two words together and the language that comes to mind is PHP. PHP is a dynamic Web language that requires a webserver to run. It is incredibly powerful and loosely typed. You can on the fly create new HTML components/ CSS components/ Even JS components with PHP using its echo method. I've worked with PHP a fair bit and its a very fun language but can be rather confusing to start off. Especially if you have little or no experience with Object Oriented Programming. If you truly want to learn C# I would say go for it all day long. C# is a very in demand language and recently the platform you can use C# on has grown drastically. I would recommend having a look at the MSDN C# tutorial which is free and grab yourself a copy of Visual Studio community, which is also free, and give it a whirl. I realize you said you were unemployed but if you happen to have some extra cash at some point pluralsight is a great resource. Hope this helps. Happy Coding :)
1. Install Visual Studio (see sidebar). 2. Open the "AstroGrep.sln" file in Visual Studio. (It may prompt you to do an upgrade, do so.) 3. (Optional) In the menus, choose `Build -&gt; Configuration Manager`. In the Configuration manager, under the "Active solution configuration" dropdown at the top left, set it to "Release". 4. In the menus, choose `Build -&gt; Build Solution` 5. If you did the optional Step 3 above, navigate to the Navigate to the "AstroGrep\WinformsGUI\bin\Release" directory. Otherwise, navigate to the "AstroGrep\WinformsGUI\bin\Debug" directory. 6. You should now have a folder in there with the compiled AstroGrep exe. If you get compiler errors at step 4, try to fix them I guess. Good luck!
Wow, pretty big download, its gonna take a while. Thanks for the advise, this is what I need, very thorough steps for newbie like me :D I will get back after trying your steps.
The sidebar link is working for me. Although, for whatever reason, the download isn't working on Firefox but it is on Edge. GG Microsoft.
Visual Studio itself suggests that
ASP NET/C# is a pretty modern web stack. Just to refresh the ideas: * ASP.NET is basically a (or the) C# framework for making websites * C# is just the programming language, web development is not essential to it. If you want to learn ASP NET, Visual Studio makes ASP NET and C# pretty easy. A must for beginners IMO. Visual Studio community is free and enough to do work You can pick ASP NET Core, which is the latest version where a lot changed, it's pretty new and modern. Or ASP NET 4.6, which is ok still, the documentation might be more complete.
The fact that you are even aware of and care about readability and commenting is a good sign.
For whatever reason I consistently need to click the download link twice on Firefox to make it work. Someone posted about the same problem a few days ago, seems to be an issue on MS' end.
Basically a way to implement an interface without adding the interface and its implementation to the class itself.
Who the hell downvotes this? Super interesting serious C# stuff here with negative score in /r/csharp
I'm obviously missing something, so would you care to elaborate? You can already implement all the interfaces you like, so what do we gain by this?
Need to know it exists I think.
VB has got inline XML construction which is pretty cool.
Dapper +1
Cool, thanks for the link. I loved Dungeon Siege when it came out! Awesome to know that was used.
It's interesting to see Xamarin and .NET Core take on such a prominent role, beyond the traditional desktop legacy of Windows.
I needed to pass data from one instance to another, I used mutex to distinguish each new instance and created a server/client inside the program that would allow the inner process communication to take place
The VB syntax is alright (somewhat); many VBisms are wrong, for example: * the `My` namespace - https://msdn.microsoft.com/en-us/library/5btzf5yk.aspx * implicit project level imports - https://msdn.microsoft.com/en-us/library/3w4tctcf.aspx * optional `()` on method calls * `(...)` for indexing operations * `0 Is Nothing` * `"" Is Nothing` * `=` They are wrong because they make code difficult to reason over in nontrivial cases.
He's pretty much everywhere. Barely a week passes without him doing a Channel 9 broadcast, keynote appearance, blog post, technote or something else. He's pretty much Microsoft's most prolific writer and presenter. I'm sure if you look around you'll find all kinds of places where he pops up.
http://up-for-grabs.net
Concepts are great, but C# already has type constraints. The only real difference is that an interface must be explicitly implemented while a concept is implicit.
For loops everywhere!
Traditionally in C#, types implement interfaces to provide some sort of contract. For example `int` implements `IFormattable` because the .NET libraries largely follow object oriented paradigms. This doesn't have to be the case though. If you looked at interfaces from a functional side, an interface is really just a set of functions you need to implement to allow a particular algorithm to work. It doesn't have to be tied to the data of whatever object it is acting on. Imagine instead of `int` implementing `ICompareable&lt;int&gt;`, an interface: public interface IOrd&lt;T&gt; { int Compare(T a, T b); } was requested alongside the `int` objects. You could write a generic function on a `T` datatype that only depends on the fact that `T` is a container of something and that `IOrd&lt;T&gt;` is implemented. struct CmpInt : IOrd&lt;int&gt; { public int Compare(int a, int b) =&gt; a - b; } and now I can write a function that provides a pure algorithm and acts on a `T` datatype and an `IOrd&lt;T&gt;` interface, and know it works for `int` with `CmpInt` and if you wanted to use it on `string` you could provide a simple interface implementation: struct CmpStr : IOrd&lt;string&gt; { public int Compare(string a, string b) =&gt; string.Compare(a, b, StringComparison.InvariantCultureIgnoreCase); } The following is a valid C#6 program: namespace ConsoleApp1 { public class Program { public static void Main() { var ints = new[] {5, 1, 3, 2, 6}; qsort&lt;int, CmpInt&gt;(ints, 0, ints.Length - 1); System.Console.WriteLine(string.Join(",", ints)); } public static void qsort&lt;T, IOrdT&gt;(T[] arr, int a, int b) where IOrdT : struct, IOrd&lt;T&gt; { var _IOrdT = default(IOrdT); if (a &lt; b) { int i = a, j = b; T x = arr[(i + j) / 2]; do { while (_IOrdT.Compare(arr[i], x) &lt; 0) i++; while (_IOrdT.Compare(x, arr[j]) &lt; 0) j--; if (i &lt;= j) { swap&lt;T&gt;(arr, i, j); i++; j--; } } while (i &lt;= j); qsort&lt;T, IOrdT&gt;(arr, a, j); qsort&lt;T, IOrdT&gt;(arr, i, b); } } public static void swap&lt;T&gt;(T[] arr, int a, int b) { var temp = arr[a]; arr[a] = arr[b]; arr[b] = temp; } } public interface IOrd&lt;T&gt; { int Compare(T a, T b); } struct CmpInt : IOrd&lt;int&gt; { public int Compare(int a, int b) =&gt; a - b; } } In *Concept C#* as described by links it could be written as: namespace ConsoleApp1 { public class Program { public static void Main() { var ints = new[] {5, 1, 3, 2, 6}; // 1. type parameters inferred: // * T =&gt; int (from array parameter) // * IOrdT =&gt; CmpInt (Concept C# change: infer type parameter // when single unique implementation meeting requirements // is resolved) qsort(ints, 0, ints.Length - 1); System.Console.WriteLine(string.Join(",", ints)); } // 2. type parameter for IOrdT absent public static void qsort&lt;T&gt;(T[] arr, int a, int b) // 3. "struct" constraint implied because IOrd&lt;T&gt; is a concept where IOrdT : IOrd&lt;T&gt; { // 4. implicit creation of stack instance at start of method if (a &lt; b) { int i = a, j = b; T x = arr[(i + j) / 2]; do { // 5. method group IOrd&lt;T&gt;.Compare is now in scope as // "Compare" with implicit receiver // (the stack instance) while (Compare(arr[i], x) &lt; 0) i++; while (Compare(x, arr[j]) &lt; 0) j--; if (i &lt;= j) { swap&lt;T&gt;(arr, i, j); i++; j--; } } while (i &lt;= j); // 6. type parameters inferred: // * T =&gt; T (from array parameter) // * IOrdT =&gt; IOrdT (Concept C# change) qsort(arr, a, j); qsort(arr, i, b); } } public static void swap&lt;T&gt;(T[] arr, int a, int b) { var temp = arr[a]; arr[a] = arr[b]; arr[b] = temp; } } // 7. new keyword "concept" =&gt; public interface, // can only be implemented by "instance" types public concept IOrd&lt;T&gt; { int Compare(T a, T b); } // 8. new keyword "instance" =&gt; struct // cannot have members? // must implement (at least?) one "concept" // cannot be instantiated? instance CmpInt : IOrd&lt;int&gt; { int Compare(int a, int b) =&gt; a - b; } } If you have this new `concept` keyword and `instance` keyword, you can improve generic type inference and several other bits of magic to make using the interface nicer. You can also use the compiler to enforce specific constraints that keep the pattern performant and avoid optimization pitfalls including allocations and virtual method calls. --- Does that help? The Roslyn issue for this is here btw: https://github.com/dotnet/roslyn/issues/16312
Thanks. Sounds like ASP is the way to go. I assume it only works on windows hosts? Mine is linux. 
Scott's the best. His [ASP.NET Community Standup](https://www.youtube.com/playlist?list=PL0M0zPgJ3HSftTAAHttA3JQU4vOjXFquF) with Damian Edwards and Jon Galloway is always great too.
Yes, exactly. User can see percentage change as they modify input. 
It looks cool, but at a glance it definitely looks like this should be 5 different packages. Serialisation/deserialisation of different file types is awesome, but it doesn't belong next to database access, or a game engine. Those things would all be great individually if they met my needs.
I DO remember what life without LINQ was like. I spent my first 3 years of C# programming in 2.0. It was a surprising addition. Functional programming had come to OOP. Started with "query" style and really liked that, then installed Resharper and learned the "fluent" style by using the feature in Resharper which auto refactors your code for you back and forth between the styles. I don't think I have a preference of one over the other. I think if I'm doing something significant or complex, I favor query as it jumps off the page. If it's a simple "filter", then I use fluent so as not to draw attention to something relatively trivial. Regarding the article and the author being surprised that some keywords/operators weren't used that much, I think a lot of this comes down to the fact that a lot of people don't know they exist or don't know how to use them. I remember once asking about something regarding LINQ on Stackoverflow and Jon Skeet answered my question. And I learned how to use Skip and Take, which I previously hadn't considered before.
ok in that case it dosen´t matter. You can use C# or PHP or any other language you want to serve the pages. In order to create the page like that you will need to use javascript wich is the only language that runs on browsers. This is easy to do in plain old javascript :) just look for the key pressed event on the input and do the calculations. When you want to use something more advanced, take a look to angular.js, vue.js, ember.js and many other frameworks that make it easy to do what you want and much more :)
I don't really believe you can just work down a list of check boxes and then be "done" with learning the entirety of a programming language. Experience is important, and of course the language and framework are constantly evolving, as are important third party libraries. That being said, some topics you haven't listed: - async/await and the Task Parallel Library (probably the most important one here) - general multi-threading concepts (locking, synchronization, volatile access etc.) - `yield return` enumerators - reflection - `unsafe` code and platform invoke - `dynamic` - runtime code generation (expression trees and/or Reflection.Emit) And of course there is lots to learn about how the language and runtime work on a deeper level, e.g. the behavior of the garbage collector.
A little irrelevant but when do you all think .NET Core will be able to be used for desktop GUI applications cross-platform?
Use a geofence of some kind?
&gt;I find the fact that Single is more used than SingleOrDefault a good sign since it means that the code using it is not riddled by endless null checks I don't see them as interchangeable. I use Single when I can guarantee that the element matching that criteria exists and SingleOrDefault when I can't. I don't see how one is better than the other.
This is amazing work. It is elegant and extremely powerful stuff that can open up a lot of good code and eliminate a lot of bad code. 
`x` and `y` are _two different_ arrays. As such, `x == y` evaluates as `false` because you are checking object references, not array value equality. `List&lt;T&gt;.IndexOf` will use the equality comparer as provided by `EqualityComparer&lt;T&gt;.Default`. In this case, the default equality comparer for `int[]` is the basic object-reference equality comparer. See: https://msdn.microsoft.com/en-us/library/e4w08k17(v=vs.110).aspx As such, searching for the reference of `x` results in `0` (because it was added as the first item of the list), and searching for `y` results in `-1` because that object reference has never been added to the list. Hence why `list.IndexOf(x) != list.IndexOf(y)`. If you want to check for array _value_ equality, you may have to iterate on the `List&lt;int[]&gt;` manually and use the LINQ method [`SequenceEqual`](https://msdn.microsoft.com/en-us/library/bb348567.aspx). I suspect though, that perhaps you might benefit from a simpler/better design that avoids such work entirely. EDIT: Fixed mistake in code.
 * [static](https://msdn.microsoft.com/en-us/library/98f28cdx.aspx) * [void](https://msdn.microsoft.com/en-us/library/yah0tteb.aspx) * [public](https://msdn.microsoft.com/en-us/library/yzh058ae.aspx) * [private](https://msdn.microsoft.com/en-us/library/st6sy9xe.aspx) * [strut](https://msdn.microsoft.com/en-us/library/ah19swz4.aspx) There are two basic concepts of memory space, static or non-static. When you are static, it means you are always basically there. You don't have to instantiate it, and it is similar to a singleton class (only one exists). When it's non-static that means you want to be able to create/destroy multiple instances of it, and allows each instance to have it's own values. Void is a return type, and it's often considered a null return type. Although that's not exactly true, it works well for understanding that whatever it does return... it's not useful or caught for anything really. Just think of it as a nice way to say, return without sending any of our data back. Public and private are accessibility modifiers. Think of this like you have a front door. When you leave it unlocked, anybody can just help themselves to it. Saying it's private, is like locking the door from the outside. Only the class owner can really use their key to open and shut that door. Struts are basically a lite weight class for storing just a few variables. It's a limited form of a class that is useful for a real quick container for something like an X: Y: coordinate system. Instead of constantly referring to 2 different variables, you can contain both variables inside a simple struct. Of course, most of this stuff won't really sink in... unless you can dive into a project where it matters. You can also play around with a quick demo program. Create 3 classes and a struct in a new project. Experiment with ways you can change it, what makes it break... what makes it work? Read specifically on the keywords, and how each difference changes the program. [Gist - Demo program](https://gist.github.com/cwesnow/38ab1dd3f34f988513394792c92a2ff1)
Try posting in /r/Programmingbuddies
I actually don't mind the UI but Github is just miles better. For me the simple answer of why I would just use Github is that there's just a lot more developers there and it seems to be the future of all projects. 
For less messy amazon links you can extract the part after "/dp/" in https://www.amazon.com/C-6-0-NET-4-6-Framework/dp/1484213335/ref=sr_1_1?ie=UTF8&amp;qid=1484208486&amp;sr=8-1&amp;keywords=andrew+troelsen and make it: https://amzn.com/1484213335 **BEEP BOP** Plz send any recommendations via PM
Of course there are valid cases. If there were no valid cases SingleOrDefault wouldn't exist. What the article claims implicitly is that codebases should aim to reduce the valid cases for SingleOrDefault which will improve their quality.
At least for me the reason to use query syntax is when I have joins. List&lt;Person&gt; pr = (from p in db.Persons join e in db.PersonExceptions on p.ID equals e.PersonID where e.CreatedOn &gt;= fromDate orderby e.CreatedOn descending select p) .ToList(); vs List&lt;Person&gt; pr = db.Persons .Join(db.PersonExceptions, p =&gt; p.ID, e =&gt; e.PersonID, (p, e) =&gt; new { p, e }) .Where(z =&gt; z.e.CreatedOn &gt;= fromDate) .OrderByDescending(z =&gt; z.e.CreatedOn) .Select(z =&gt; z.p) .ToList(); shamelessly taken from [SO](https://stackoverflow.com/questions/1511833/linq-dot-notation-equivalent-for-join) edit: Though I can really see here that without syntax highlighting fluent is more readable even for joins :D
A lot of these concepts start to make more sense when you begin writing code.
http://stackoverflow.com/questions/4868477/why-should-i-use-var-instead-of-a-type compiles to the same IL, so no performance difference, and it is mostly personal preference. consider the following: Dictionary&lt;string, string&gt; foo = new Dictionary&lt;string, string&gt;(); long and redundant. sure, the IDE will help with autocompletion, but if the type is known from assignment I'd rather do this: var foo = new Dictionary&lt;string, string&gt;(); less noise, still clear what foo is.
My personal guidelines: - explicit names for primitives (`int`, `string`, `double` etc.) - `var` when the type name is redundant, e.g. `var dictionary = new Dictionary&lt;string, string&gt;();` - `var` when the type name is obvious in context, e.g. `var version = Version.Parse("1.2.3");` `var session = GetSession(); // where the type is literally called "Session"` - explicit types everywhere else, especially when the type is not obvious, e.g. `IndexedStringReader nameReader = GetNameReader();`
I tend to use var exclusively wherever possible. * I typically don't care about the type (f.ex python works in largely the same way) * when I refactor the type name, I don't need to check-in myriad of files that were affected by this change So far I've not been bitten or confused by this, and I've been able to use it since day1, so maybe 8 years now? You do need to use non-shitty IDE/editor for this to work fluidly though. I live in Visual Studio so just hovering over `var` in code gives me the real type that ends up in it.
Or try with this: https://marketplace.visualstudio.com/items?itemName=SimonHughes.EntityFrameworkReversePOCOGenerator
Yes, it's more or less down to personal preference. I use var pretty much everywhere, where others at my work use it only when the type is explicit on the right side. The main contention seems to be around using var where the type isn't obvious. I find that I rarely need to know the exact type when reading code; when writing code I have assistance from the development environment. Others feel differently. It's a limitation of C# that var or a similar keyword can't be used for fields (a limitation not present in e.g. Swift and other languages), which leads to annoying things like Dictionary&lt;LongAssTypeNameHere, List&lt;SomeOtherLongAssNameHere&gt;&gt; store = new Dictionary&lt;LongAssTypeNameHere, List&lt;SomeOtherLongAssNameHere&gt;&gt;(); instead of (not valid C# at the class level): var store = Dictionary&lt;LongAssTypeNameHere, List&lt;SomeOtherLongAssNameHere&gt;&gt;(); 
Hey! I was wondering if you could help me once again. Its seems the query you gave works inconsistently. I hadn't been able to work on my project until now because of exams but when I checked today it seems that your query combines both the last sent message and last received message separately. I checked the above program in Linqpad too and when I change the user to '2' or '4' the same thing happens. **Problem 1:-** Last sent message and Last received message is shown separately when they should be combined like [this](http://imgur.com/upoIdnP). Also in your [linqpad example](http://imgur.com/4OXaHgu). Only the latest one should be displayed between the last two row. **Problem 2:-** Sometimes some received or sent messages aren't displayed. Happens in both linqpad example and project. [Image](http://imgur.com/K5zKKHM). The row with sender ='2 'and receiver = '1' isn't displayed. Sorry to bother you once again but I couldn't figure out on my own why this happens and thought you could help. The query you gave me wasn't altered. Your program above works fine with user=1 but not with other values. 
First, you would call 2 "bookViewModel", just for clarity purposes. Your Book model is so : public class book{ string name; Author author; int ISBN; int stock; Person lastlyLendTo; } your bookViewModel would be so : public bookViewModel{ string name; author author; } because your users don't need to know who you lend the book to, nor the ISBN references. The repository is just a layer in which you do data manipulation. Imagine your controller for the books : you will have a getAll() and get() methods. it would look like this : public actionresult getAll(){ List&lt;Book&gt; myBooks = new List&lt;Book&gt;(); myBooks = //access bookdatabase and fetch data return View(myBooks); } public actionresult get(int id){ Book searchedBook = //access bookdatabase and fetch data corresponding to id return view(searchedBook); } The repository would contain the part after the comments, with all the data access logic. This allow you to change your data preservation technology without changing each controller : you only change the repo. 
&gt; I cant visualize why some variables can be seen and NOT be seen by others. Why not? You just described it. There's not much more to it.
This is not only your personal preference, it has some (well founded) history behind it: http://stackoverflow.com/a/17937309/20195
I was thinking of prepending l_ to (local variable) for private fields. Is there a reason that is a bad idea?
Yes, it's generally not a good idea to invent your own "conventions" when there are existing conventions that run directly contrary to them. Particularly if it doesn't even make sense internally - a field and a local variable are utterly different. Edit: wrong link
This is great .. thank you. Just a final point of clarification - you are returning the book object back to the view ie mybooks and searchedBook Hence I am back at the original question about the model being referenced in the view ? Edit: rather then creating a book object am I suppose to be creating a viewBooks list object and returning that to the view ? 
Yes, indeed, I just used a book object because I was in a hurry, but normally your repo will fetch in your book database the information, then you will have something like Book myBook = repo.get(titleOfTheBookISearch); bookViewModel bvm = new bookViewModel(); bvm.title = myBook.title; bvm.author = myBook.author return View(bvm); You might of course want to do a repository in two layers, one layer being charged of polling your databases for books, the other layer creating bookViewModels, instead of creating the viewModel in the controller. That mostly hangs on the size and complexity of your project, but separating everything is the trend and a good practice, it's a bit more work but way cleaner to keep for working.
Awesome .. thank you . It's all coming together now !!
It's clutter and reduces readability. Avoid underscores unless using them on private fields that have a separate public accessor (i.e., int _SomeNumber; public int SomeNumber { get; set; } ) This is the most popular convention I believe.
That's definitely not recommended. Parameter names is what people using the method will see, so they should be as descriptive as possible. Not `_id` and not `a` or `n`. For local variables or private fields, you can prefix with underscore (Microsoft does that a lot; I personally don't).
Although most people lowerCase private members.
My boss wrote the majority of our original code base and did that everywhere with parameters/local variables. I follow it for consistency, but it drives the other guy I work with crazy. I hear about how stupid it is nearly every day. I'm not sure that's the "right" thing to do, but I'd rather keep the coding style, even if it's wrong (not something I'd do in a personal project though).
You use `using` to *not* have to call `Dispose`. Don't do both.
It's helpful if you have a separate code review process. For instance, we use one with a web front end, so no car assistance. I personally like car, but it's easier to read in non IDE environment. And that's personally the only reason I use the explecit type at work. If you need to look at the type, your naming of the thing is probably off.
Don't worry about it, really. This is something that you can add into your workflow down the road easily, and particuarly if you aren't working on a commercial application as yet, there's pretty much no repurcussions to minor inconsistencies, or choosing between var or int. I'd try to focus your efforts on picking up on fundamentals. I don't know where you are in your learning, but if you can be learning object oriented concepts, SOLID, fundamental data structures and algorithm concepts, unit testing, those kinds of things, you should be doing that instead. If this kind of thing is really giving you so much grief you should look into installing Resharper (an add-on for Visual Studio by a company called JetBrains) and this will automatically suggest corrections to variable naming and using var vs [type] to keep things consistent. If you're a student you may be able to pick it up for free, else it does come with a hefty price tag unfortunately.
We've banned the use of var when the type isn't explicit on the right hand side of the assignment. When you have 8 developers working on a product, all writing EF lambdas selects over IEnumerable&lt;T&gt;, you can make code difficult to read very quickly. Peer review takes long enough without having to guess at types.
Take for example String class. It gives you public methods you can use. You don't care about how it does its things, you just need the results. You ask for a substring, it gives you a substring, but you have no idea how it created that substring. Priate methods of String class are invisible, unreachable. When you ask String for a substring, it can internally use its own private methods, but you don't see that. The public method takes care of everything necessary to give you correct output, or inform you if error occured. This has some nicce benefits: 1. Consumers (you using String class) often don't care about how things are done (as long as they are done correctly and without consuming too much resources), they just want the result. Calling one method that does everything necessary inside is convenient and also more readable than calling a bunch of method, especially when it is some common task repeated all over the code. 2. You can upgrade funcionality without forcing consumers to change their code. If someone finds a way to create substring that is twice as fast, they just change the implementation. Private functions will change, new ones will be added, old ones will be removed, but the consumer doesn't have to do anything, his code still works, because he calls public method and its signature doesn't have to be changed.
I'd add to this "never use var if the assigned type is an interface".
I've found that I like how [Resharper](https://www.jetbrains.com/resharper/) suggests code be styled; so I have been sticking with that. The nice thing is that in doing so I don't have to worry about Resharper doing something I consider "funny" when I let it clean up the code -- as I WANT it to look that way. In modern IDEs built for .NET / C# I see ZERO reason to not use var when you can. There are some occasions where you won't; like setting up a variable outside of a loop etc; but those are more and more rare.
&gt; void Method(int _id, string _name) Also with autocompletion etc; make both the method name and parameter names more descriptive. It is what people will see with hints and stuff. Also consider including [XML comments](https://msdn.microsoft.com/en-us/library/b2s063f7.aspx). Always include the correct [access modifiers](http://stackoverflow.com/a/614844/55053) as well (I know it was just a blah blip of code for demonstration purposes but I figured I'd throw it all out there). public void ABetterMethodName(int objectTypeID, string objectName) { ... } 
These questions are what led me to my comment on the issue: https://github.com/dotnet/roslyn/issues/16312#issuecomment-271054904 &gt; CmpInt would be used since it's the only instance of the concept? How broad is the scope for searching? Namespace? Assembly? Something else? Based on casually skimming the prototype code, the scope is the same as type resolution today: anything in the namespace or parent namespaces or using statements. &gt; Not mentioning IOrdT as a type parameter is ok because it is implicit? And since we'll never reference it anyway, we don't bother to write it? The samples currently all seem to use an additional `implicit` keyword on the type parameter instead of omitting it like the documentation suggests. &gt; Type parameter is inferred because we have a constraint on it (that it must be an instance of a concept)? Yes. &gt; Instance is automatically resolved if (and only if?) there is a single unique instance of the concept with matching type parameter T? in the samples there is only a single unique instance to match at any given time; I'm not sure if that was considered for the prototype code and it is the essence of my comment on the issue.
I use `var` everywhere. Anywhere where the code is complex enough that I might be tempted to not use `var`, I refactor to be simpler.
If possible, avoid it. C# already provides you with enough clarity public Variable {get;set;} private variable; public SampleMethod(variable){ this.variable=variable; //... } Also, descriptive variables are beautiful. Take look at the [Clean Code](https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) if you haven't had an occasion. Of course underscore notation is used (sometimes) as could be seen here: http://stackoverflow.com/questions/450238/to-underscore-or-to-not-to-underscore-that-is-the-question/17937309#17937309
I find the second syntax much easier to parse and I like how it indents with the rest of my code: Our style guide would indent these like: List&lt;Person&gt; pr = (from p in db.Persons join e in db.PersonExceptions on p.ID equals e.PersonID where e.CreatedOn &gt;= fromDate orderby e.CreatedOn descending select p) .ToList(); vs: List&lt;Person&gt; pr = db.Persons .Join(db.PersonExceptions, p =&gt; p.ID, e =&gt; e.PersonID, (p, e) =&gt; new { p, e } ) .Where(z =&gt; z.e.CreatedOn &gt;= fromDate) .OrderByDescending(z =&gt; z.e.CreatedOn) .Select(z =&gt; z.p) .ToList();
I just use an uppercase underscore so it's still PascalCase ;)
Thank you for your feedback. I completely agree with your argument. Honestly, some modules depend on each other, and at the company I work for we use all modules in the same system (except game engine, of course). I did it this way to ease build and deployment process, that's all. There is an increased interest from general public, so in the near future I will separate in different packages.
Yep ... that's the route I've taken ... My AutoMapper mapping.... .ForMember(prop =&gt; prop.FirstDayOfWeek, opt =&gt; opt.MapFrom(src =&gt; Thread.CurrentThread.CurrentCulture.DateTimeFormat.GetDayName(src.FirstDayOfWeek)))
&gt; As such, x != y evaluates as false I think you meant to say "x == y evaluates as false" ?
We also use var literally whenever possible. I would add that, in the 8 years I've been working in C#, anytime a new developer complains about var, we say "just try it for a while and we can talk about it again later if you still think it's a problem." We're up to ~70ish devs now. Literally nobody has ever brought it up again and we have a pretty large code base and some fairly hairy EF queries. Implicit typing, IMO, has made those much easier to code and understand, rather than the reverse. So I would encourage anybody who's skeptical or felt the need to create policies full of special cases to just do it for a while. I think you'll find you were spending a lot of time worrying and futzing with types for debatable benefit. var, IMO, is one of the most important and under-appreciated productivity enhancers in C#.
I like these rules but when it comes down to it, its not a big deal since these are limited in scope to the inside of a function. Code style outside of that is much more important. I'd still vote for personal preference but my personal preference might be closer to the above examples. Also to add it might depend how often a variable is used, a 1 time usage might warrant a "var" just for simplicity instead of chaining together a bunch of functions.
Yes, that's a bad idea. Don't invent your own standards. There are already established standards that pretty much everyone follows [here](https://msdn.microsoft.com/en-us/library/ms229043\(v=vs.110\).aspx). Camel case for parameters, with no underscore. Personally the only time I use underscore is as a prefix to indicate that a member is private or protected scoped at the class level. I actually think that might be a deviation from the MSDN coding standards, but (a) Microsoft open source code uses it and (b) everyone else seems to, as well. 
my point is that if the code is 100% **readable**, you can use "var". When you have to look around, like "Is there a class named Stuff somewhere?". Even if there is one, maybe the method returns an array or a list of Stuff.
I do the same 
Dammit, I missed that tragicshark == bbarry! ;) Joking aside: Great comment! You pretty much nail how I would expect the syntax to work *thumbs up* I'm not a huge fan of it automatically selecting an instance. It sounds like you're sacrificing A LOT of readability (and maybe predictability?) for a little terseness. Could you have a library that compiles just fine, automatically selecting the only instance in scope, but breaks when used in a project having more instances? Or will the compilation of the library itself lock the instance? Thanks for all your time!
var pretty much always. If you don't know the type you can hover over it.
Microsoft has many sample projects. Here is one pretty basic one. https://code.msdn.microsoft.com/Simple-Calculator-d1d8cf4c 
Hello! Microsoft has great documentation available. You can get started with Windows Forms by looking [here](https://msdn.microsoft.com/en-us/library/dd30h2yb(v=vs.110).aspx) or for Windows 10 apps [here](https://msdn.microsoft.com/en-us/magazine/dn973012.aspx). You can find some code samples [here](https://developer.microsoft.com/en-us/windows/samples). Feel free to PM me with any questions. Good luck :)
It really depends on your use-cases. If you're developing a small number of well-defined reports with very specific data requirements, then building hand-crafted SQL and matching entity objects is a good and simple solution. When you start looking a larger number of reports, with customized filtering and data selection, then you're probably going to have to start going down the path of loosely typed wrappers around DataRow that contain whatever metadata you need for display, and some level of query generation / templating. If you can get away with the former, you should, and if you have to do the latter be extremely careful with your query templating because it can be very very easy to allow injection.
Same here. Explicit types were there for the compiler's benefit, not mine. 
Then I write var x = (INotifyPropertyChanged)obversableCollection; x.PropertyChanged += event_handler; *** By the way, WTF is PropertyChanged not on the public API of ObversableCollection?
You're better off being back `var` and banning EF.
Huh, neat trick.
Toss up. Some people use `_foo`, others `m_foo`. Personally I prefer the latter because I also use `s_foo` and `t_foo` for static and thread-local variables.
Do you actually care what the name of the class is? I don't. I care what methods are being called on it, but I can see that by looking at the rest of the surrounding code.
Partly simply because they're short and easy to type anyway and I prefer the consistency, but also because the specific type often isn't obvious from their names and context: - is `var user = GetCurrentUser()` just a string containing the username, or a complex type? - is `var length = GetLength()` an `int` or a `long`? - is `var age = GetAge()` an integer or a floating point number? - is `var total = count * cost` an integer, or is one of the operands a floating point type? - is `var ratio = GetRatio()` a `float` or a `double`? - is `var exactWeight = GetKilograms()` a `double` or a `decimal`? 
Thanks
I guess your initial points 1 and 3 conflict each other and so if you had Var is enabled= TRUE; This is both a primative time but also obvious. So I personal go with var. Do you go var or otherwise? 
None of these are black and white rules, of course, just general guidelines I use myself. Personally, I'd still write `bool` in this case, because I value the consistency with the rest of my code more than saving that one keystroke.
Examples of Resharper creating less performant C#? Also, following Resharper suggestions frees my brain up for more important things. Why spend time thinking about code style when following Resharper recommendations means smarter, better code in ALL cases (assuming you have no valid examples for the question above).
Please cite examples of Resharper being untrustworthy.
I use var everywhere. Normally, I only assign during declaration, too. I wish C# had something like val or final. It's the only thing missing for me right now.
As I already said, for consistency and personal preference, I use explicit names for primitives everywhere, even when they might be obvious (`int count = 0`). And I'm not writing an official style guide or rule book here, I'm just roughly listing my decision process. Especially when it comes to numbers, I *do* care very much about the specific types involved. Operand promotion, overflow, precision etc. all can have subtle but important effects. I really don't care for the time saving argument. In the case of primitives we're talking about 0-4 key strokes difference, and of course auto completion works just as well for type names as it does for their members. Even for longer names it's just not that relevant to me. Honestly, the time I spend actually typing out code is typically just a tiny portion of the overall process of programming something. And it's not just about correctness. At least in my experience, code is written once and read many times, so optimizing for the latter seems far more important to me. Sure, when you just hack something small out or you're constantly working on a piece of code and are intimately familiar with it using `var` won't make a difference, but when I open up a piece of code written by someone else or myself 2 years ago (which might as well be the same thing), I don't want start hovering over variables or start typing to see the auto completion just to get an idea of what I'm working with there. And you don't always have access to autocompletion/IDE hints either. Especially when working with version control and merging or reviewing pulls, or even just looking at a file without having to clone and load up the entire project/solution. Ultimately this is all a matter of preference and can be decided on a case by case basis, but I've found that these general guidelines work best for me as a compromise between convenience and readability.
Of course not but focusing on the left hand side is obfuscating the fact that the literal 5 is actually an integer and the first is doing an implicit type conversion. Instead, write: var x = 5f. Fewer characters and you're actually starting with the type you want.
Always use var whenever humanly possible. It takes two seconds with Visual Studio to hover your mouse to know what type it actually is. If you are ever on a project for more than one cycle you will run into a refactor and you will thank yourself every time you've used var. Understand that even to do the line: int i = 0, you are redundantly specifying the type that the compiler can just infer. The only time you shouldn't use var is when you can't, such as for lines like string s = null; Resharper has a "convert to var everywhere" feature for a reason...
* `var` when the type is ridiculously long and inconvenient, such as the result of a LINQ query returning an `IEnumerable&lt;KeyValuePair&lt;Tuple&lt;string,string,int,Dictionary&lt;string,string&gt;&gt;&gt;&gt;`
One fewer character. This does not matter in the slightest. Neither does the implicit conversion of a compile-time constant.
I use 'var' everywhere, except when it is not possible to do so(ie. declaring a variable, initializing a variable to null value). Explicit typing is overrated and hardly useful. In most cases you dont need to care the exact type of the variable. Its either completely unnecessary to know the type of the variable, or that you only need to know the interface/abstract type, which should be obvious from the variable/method name. If not, think about refactoring your code since you have a badly named variable/method(ie. GetStuff(), a terribly named method only Stuff is a class name). Also convention will help make this process easier too. If you see a getter method name ending with plural words(-s, es, etc), it should be obvious that you are getting a collection type. 
If your argument is clarity, 5f contains exactly the same information as writing float. If your argument is coding efficiency, var only requires one hand and fewer characters. If your argument is runtime efficiency, they're the same. If your argument is none of this matters, then why are you in this thread? So it comes down to you just preferring to read the word float. You're entitled to prefer that, but not to argue that it's superior on any of these dimensions.
 int id = o.GetId(); Guid id = o.GetId(); var id = o.Getid(); You bet I'm going to. 
https://www.youtube.com/watch?v=r-azQeGHid0 - new video, what you think of the sound quality?
It would have been nice to have some more tangible performance metrics rather than something being "faster" or "slower" or "better" or "worse". Even if they might be different project-to-project, it'd be nice to have an idea of what aspects of a project can influence these aspects and in what capacity. Or give us a sense of a typical or worse case scenario. &gt; Hard Disk time: Loading 100 dlls will almost always take longer than a single large DLL. DLLs are physically scattered across the disk. Latency etc come into play on the initial load times. My real-world application has 83 dlls, and takes 0.5 seconds to load. If I merge them into one dll, how much faster is it? Are we talking 0.25 seconds instead? And is that quarter of a second really a big deal for launching my application for the end user? (EDIT: Mind you, I don't know how much of that 0.5 seconds is simply from loading DLLs into memory vs other application startup business.) &gt; Memory Usage: A single dll contains 1 set of “standard” meta data vs 100 times that standard meta data can start to make up some memory space (i.e. X bytes of product name, version info, etc x 100 dlls x # of app domains = memory) Does loading that standard meta data really make a _worthwhile_ impact on memory? What are we talking about here? 1 megabyte? 10 megabytes? 100? If it's ~10 megabytes, does that even _matter_ in any typical scenario? &gt; Security: .Net CLR has to do a lot more processing with multiple DLLs vs less DLLs. A security policy will need to be loaded, managed, and executed per each DLL. Again, what are we talking about here? 5 milliseconds on DLL load? 50ms? 500ms? Is there a measurable and disruptive percentage performance impact during any code _execution_? Pretty much the same story with most of the other points. &gt; Optimization: The .Net compiler can make more and better optimization decisions if acting on more code base. Smaller sets of code will provide less optimization opportunities. Really? Are they talking about the C# compiler or the JIT compiler here? I suppose, in theory, the compilers could in-line some method calls between assemblies that would normally couldn't be. What opportunities are there that the compiler can optimize for with a larger code-base? In practice, what kind of _practical_ benefits are we talking about here? EDIT: My point is, it'd be nice to have a good idea if any of these aspects are worthwhile factoring in when managing project/solution design. Right now, I do a decent amount of dynamic assembly loading. Enough that if I were to think about merging the DLLs, it might take a good deal of refactoring. I also like having aspects of the application compartmentalized and any dependencies between code explicitly defined and organized rather than having everything in one bucket. Though I suppose using ILMerge-esque tools can help mitigate some organizational/design issues.
Exaktly my take on the var. During my time at university I was a rabid var opposer and there were multiple heated discussions with class mates. As soon as i started working I started using it, everyone else were... Havn't looked back and never will! Var is awesome!
That isn't the *name* of int.
I would prefer: int anInt; int.TryParse(someString, out anInt); Or in C#7 you could do: int.TryParse(someString, out var anInt);
When it's very clear like that then yes, I'd be ok with it. I should've been more clear: never use var if the assigned type is an interface and you might assign a different concrete non-interface type to it later. For example: var x = NetworkAdapter.GetIPacket(); // ... x = new SomeKindaPacket(x.data); 
I'm 19 with no uni degree and have been a software engineer for 6 months now. It depends on your skill level honestly. If you have had lots of experience and can pick things up quickly, you can easily get a job. If not, a degree will get you a job, but it won't make you a good programmer. Many people have told me that uni thought them next to nothing in terms of actually programming. But that could be coincidental (or they were all slacking...) Before I got my job I did a Level 3 BTEC in IT... Bearing in mind I have been programming since I was 14, so it's not a very likely scenario. Experience is better than a piece of paper and some theory (which you'll never use) Whatever you do, good luck.
Can you give us an idea of: A) How _much_ faster you need? B) How many random numbers you plan on generating per second? C) How large you expect "N" to be? D) How "random" is "random enough" for you? E) Do you plan on generating them more than once, or is it just a once per application session?
A) As fast or as little CPU usage as possible. B) Like 10 million ballpark, but assume no upper bound. C) More than a byte, less than max integer. 10,000 maybe. D) If N is 10,000 then each number from 0-10,000 should eventually come up, and not in a repeating pattern. That's about it E) I will generate them constantly while the app runs. Best to think of this more like a challenge. Can it be done faster than system.random with semi-usable random output.
 pictureBox1.Location = new Point(pictureBox1.Location.X - 1 Each frame you are setting the location to 1 minus the previous location, so this will move left indefinitely at a constant speed. You'll need to add to the X location if you want it to move like you are for the Y position.
Why? If the second line always happens, it should be a new variable anyways. If it is conditional, you need to use the interface version either way. What problem are you seeing?
5 is an integer. 5.0f is a float. So, depending what you mean, use: var x = 5.0f; Or var x = 5; edit: typo corrected 0.5f to 5.0f
_ is the zombie leftover of Hungarian notation which was a perfectly legal way to torture new programmers.
But even conceptually, finding ways to write "beautiful code" and pushing the boundaries of a language is always interesting!
Who cares? This is a great open source product, well designed, and good practice. Bravo
Thank you very much
For personal projects, I like a little bit of verbosity but not too much. Usually when there are generics involved or it's an unusually long class name, I use var, assuming the type is clear from context. If I work in a project where var is almost always used, then that's fine by me. Looking at the time spent arguing the usage of var, I would spend way more time doing that over actually getting confused by its usage and dealing with the consequences. Sounds like a poor investment of time for me
Yes, but "var x = 5;" is an easy implicit mistake to make. Therefore, a *style guideline* of "don't use var for primitive types" is an easy way to prevent that class of subtle error.
Very nice, bravo! :) It's good there's a Windows API for it, I guess it would be almost impossible otherwise. https://github.com/Tyrrrz/LightBulb/blob/master/LightBulb/Services/WebApiServiceBase.cs#L40-L43 Should the class implement IDisposable if it has a Dispose method? https://github.com/Tyrrrz/LightBulb/blob/master/LightBulb/Services/GeolocationService.cs Personally I would use some dependency injection and have a IGeolocationService with the same methods, then you could change to another IP service if that one ever goes away. Or change the hardcoded URI..., but that's just my opinion :) https://github.com/Tyrrrz/LightBulb/blob/master/LightBulb/Services/SyncedTimer.cs Not sure I understand the purpose of this, isn't the Timer already using the system time anyway? I notice you're using a `DateTime`, there's also the `DateTimeOffset` that you could use. I'm only mentioning that because I really don't like date/time/calendar/timezone issues and I suspect that if the users local time changes then your application could be out by an hour so every time the users DST kicks in your application might dim the screen suddenly. I don't know, I might be talking out of my ass but I see that it could be a problem. Unit tests for this kind of thing are always a good idea!
The actual f.lux has a temporary color sensitive mode for when you need your whites to look like white. Otherwise, what is that bright white doing for you in the middle of the night?
Pardon me: If I write something like this, pictureBox1.Location = new Point(pictureBox1.Location.X - 1 + movementSpeed); The the picturebox spawns and then moves off the form to the right. Essentially losing it's centring.
No need to imagine. The last remaining C++ devs are still wasting their time in for, while and do loops. 
Some of my coworkers swear by it - they love the more "relaxed feel" their eyes have. Also, one said he read an article somewhere that drew correlations between bright white light from a monitor and not being able to fall asleep fast. I don't have issues with either, so I don't use it.
Thank you for all this material!
Yep, f.lux changes gamma every second during transition, which I think is a bit excessive. In my app you can set transition duration to 0 seconds, making it instant, but otherwise - it only changes gamma every 1 minute, instead of 1 second and doesn't make any changes if the temperature delta is less than 50K. This reduces the number of calls to WinAPI pretty substantially, compared to f.lux, while preserving the transition smoothness. It doesn't have the brightness hotkeys. I personally didn't use them so I didn't know if it would be worth implementing. That said, implementing it would be pretty easy. EDIT: Realized I have misread a bit. &gt; upon startup/login. This app doesn't have that.
Ok, I can see your point.
It definitely didn't help my sleeping, from what I noticed at least. But I did notice that my eyes were less strained at night, especially when gaming.
&gt; is var user = GetCurrentUser() just a string containing the username, or a complex type? When do you ever see just that line in the code? Surely you'll see the variable `user` actually being used somewhere. That'll tell you what's going on.
 var user = GetCurrentUser(); // ... DoSomething(user); Now I don't.
The Microsoft virtual academy gives you a free 3 month pluralsight membership and there are some excellent courses on there 
https://msdn.microsoft.com/en-us/library/sf0df423.aspx I was thinking of `using static`, which is different to VB's `with`
Thanks for your reply tweq, I'll give it a try! 
Thinking of this as like a challenge isn't particularly ideal. Optimizing the general case isn't trivial and `System.Random` is already relatively fast. Admittedly, there are faster alternatives but not leaps and bounds. As you found out, even `FastRandom` from 2006 is apparently no longer faster than `System.Random` ten years later. If you want significant performance gains, I suspect you'll have to employ optimization within the context of your usage. Other options, if possible for your scenario, might be to pregenerate sets of random numbers at application startup (or even as C# code compiled in). Then you just cycle between those collections (perhaps randomly). Then you just take a hit of generating those numbers or loading those collections into memory at application start. You also want to reduce CPU usage, but is that just CPU usage on your main thread or overall? If you have 8 logical processors (or more), you could devote a bunch of them to be generating random collections of numbers on the fly while your main thread just grabs references to those collections. (So devoting 4 logical processors could make your random number generation ~4 times faster)
the first thing i heard
It's rare, but far from theoretical. Arithmetic when everything is `int` is consistent. The same exact arithmetic with a single float involved can result in the "0 != 0.000000000" problem.
True, but what's that got to do with var? It's going to default to integer math unless you tell it otherwise; it won't silently introduce a float.
`var` where ever possible.
Removed: Rule 7.
What does that mean? Quantify effort and quality. 
The topic itself is relatively commonplace and has been around for a long time. There is insufficient content in the posting to be of particular value to typical readers. And what content is there really just stated that "mutable objects can change; immutable objects can't" with only a very rudimentary code example demonstrating it. No deep dives, no discussion of pros/cons of either, no discussion of why to favour one over the other, not even sample class implementations to show what they look like under-the-hood.
Funny; my biggest gripe is that it's not slow enough. :) I would much prefer that the color of my screen reflect the curve of the graph, within some reasonable bounds, over the course of the day and night.
Asshole slept with my wife.
Xml Mirror makes it simple to create C# parsers and writers. I tried to sell Xml Mirror for a few years, but I suck at marketing so I decided to give it away free. If you have ever needed to export an object to Xml and reload it, Xml Mirror will save you lots of time. To see a sample project built with Xml Mirror, download DB Compare 2.0 With Remote Compare on Code Plex at dbcompare.codeplex.com.
WPF or Winforms, either way works. For an absolute beginner, Winforms is more intuitive. Don't just ignore things you don't like.
You know how cameras estimate light temperatures for each picture? Well the human eye kind of does this and adapts to different lighting. I don't notice the tint anymore unless I turn it off and then I feel like I'm staring at the open arc of the covenant. 
You could either contribute to a project of an opensource app you use and like, oooor... You could contribute into my hierarchical pathfinder aimed at videogames :D https://github.com/Rydra/HierarchicalPathfinder. I'm trying to increase its performance while putting special attention to readability and modularity.
I had that at the beginning, it was very very weird x_x
It's the blue tint from the screen which tricks the brain into thinking that's it's daylight. 
What do you mean exactly by process whitelist?
cool
Everything else is more yellow under incandescent light. Why should screens be the exception?
If you run your code with VS thats where things go wrong. The "optimize code" switch does (almost) nothing for performance, its intended for other things. The real optimizations are done by the JIT (and they are pretty good actually), and those are disabled when you use visual studio to launch your executable. Google ".net view jitted assembly code" for more info.
Yeah, that's the currently selected one. I originally wanted it to switch styles completely, but it was kinda bothersome to do that. I still haven't figured out an efficient way to make it look nice.
Enjoy!
I second this. It may also encourage naming the variable better.
December 28, 2009 Are you suggesting we just start posting links to all the 5-10+ year old blog posts or...?
Pluralsight is a good resource for learning just about anything .NET related. Another thing I like to do is get books older books off of Amazon. You can find .NET books that are a couple of years old that are dirt cheap that are still completely relevant to Enterprise Development.
Awesome tool! Glad someone made a good alternative to f.lux. Couldn't use f.lux due to stuttering when it was transitioning. Right now I'm using a little program called Dimmer, that darkens the screen by overlaying a dark tint, and you can manually adjust the opacity. Would it be possible to add an option for a monochrome (black) overlay, to toggle between the yellow/orange one? Anyways, good luck on this project and keep up the good work! :)
This right here. f.lux is not supposed to make your screen turn orange, it's meant to match your monitor's white point to your surroundings.
This sounds like a version issue. I.e. you're trying to use a newer version of localdb than the db server itself is running. 
The excepted solution here *might* work for you: http://stackoverflow.com/questions/15601759/sharepoint-using-c-sharp-to-open-a-word-doc-file-stored-in-sharepoint-document
Uhmm, no, not black and white. More like just making it darker with a dark transparent overlay. Like this - http://i.imgur.com/k7SS3Lk.jpg , the right side has an overlay of black color with 50% opacity. Like the colors are theoretically still the same but darker, not with orange tint. But seeing as the app uses what you described, I guess it wouldn't be that easy to implement. It's ok, this app is still awesome. :)
Might not be what you are looking for, but you could probably write a little code to open "https://sharepoint/file.xlsm" in a browser.
You might need to cleanup the URL you are using. When I use my browser to navigate to an excel file in Sharepoint I get a url like: http://sharepoint.mycompany.com/sites/IT/Example/_layouts/15/WopiFrame2.aspx?sourcedoc=/sites/IT/Example/Documents/SomeExcelFile.xlsx&amp;action=default So I cleaned up this URL to be: http://sharepoint.mycompany.com/sites/IT/Example/Documents/SomeExcelFile.xlsx Then I can run the following from the command line: start http://sharepoint.mycompany.com/sites/IT/Example/Documents/SomeExcelFile.xlsx I haven't tried it, but you should be able to do something similar and call Process.Start("IExlpore.exe",&lt;url&gt;);
&gt; Obviously not. Well, no, but we do use a font meant for programming that has distinct characters for O,0, l, and 1.
I don't know about tutorials, but you should read (if you haven't already): jon skeet c# in depth
I think my implementation is so trivial it fits best for this kind of project, although it's the first time I heard about FluentScehdulerer.
I've had to do a lot of tweaking and off-managed-heap memory management to get acceptable GC'ing in my game engine. It's probably the biggest reason *not* to use a managed lang for a game engine, but if you know what you're doing and know how to use a profiler it's all good. \^\^ With that in mind, I'd like to see the effects on your graphs and tables when using [LowLatency or SustainedLowLatency](https://msdn.microsoft.com/en-us/library/bb384202.aspx) modes. My informal testing found `LowLatency` to be best, but it requires almost insane amounts of "garbage cleanliness" (i.e. not adding to the garbage), and you have to almost prompt the GC by switching back to `Interactive` and doing a forced collection when possible.
Fair enough :) Yeah it's pretty neat. You might have heard of Quartz.NET Scheduler before, it's often used by .NET shops for scheduling things. The only problem is, it's 99% XML and it's a straight up port from Java so it's not ideal. FluentScheduler has a lot less baggage.
What do you mean by "Enterprise" - do you mean the language in depth, or libraries like Entity framework? For the language, I really got going with "Effective c#" by Bill Wagner .
some of those checks you are eliding by hand may be geting elidednby the JIT anyway, you can step into the asm to see.
&gt; jon skeet c# in depth [pdf available here](https://www.pdf-archive.com/2014/08/16/c-in-depth-3rd-edition-jon-skeet/c-in-depth-3rd-edition-jon-skeet.pdf)
Normally, if you need tuples, what you really need is a container object. Returning an object with named properties is so much more maintainable as it's clear what they are, and easy to expand in the future. In the case where you think returning an object would be too much, your method is probably trying to do too many things.
Maybe the service doesn't start automatically? Check in services. Run services.msc and see in there. 
Both of the two projects I just released open source (Xml Mirror 2.0 and DB Compare 2.0) contain an open source project I wrote called Random Shuffler. I first wrote the program as part of a Black Jack game I have been writing (slowly) called Card Counter to help people learn how to keep track of the count in Black Jack. You are welcome to use it, it has built in methods for loading a set of Cards with x number of decks, or integers with a min value, max value and the number of sets (example 1 - 60, with 10 sets generates 600 integers and it shuffles more randomly than the Math.Rand function. DB Compare dbcompare.codeplex.com Xml Mirror xmlmirror.codeplex.com I am not sure about faster, but if you do not reshuffle each time you "pull" a value than it should be lightening fast. 
I'm trying to learn design patterns myself and those if statements on lines 58 through 178 look like a great place for a basic [decorator pattern](https://www.tutorialspoint.com/design_pattern/decorator_pattern.htm). Would anyone be able to confirm this?
First, naming conventions. You code should be consistent the way variables, properties, etc are named. You have some method level variables that begin with upper case and some with lower case. I'm not a fan of hungarian notation. MS standards: https://msdn.microsoft.com/en-us/library/ms229002(v=vs.110).aspx You have an If statement that assigns values to a variable that is then used in a switch statement. This is unnecessary. In the if statement set the output values and any other values necessary. Large If/switch statements can be a code smell but I'm not sure with the everything your code is doing. You can sometime put this in a class. Not sure why you are using static with your variable declarations. Also, not sure why the thread sleep is necessary. I haven't worked with Winforms in a long while but there may be ways to group your radio button selections to an enumeration at least numeric wise so you don't even need the if statement. Or you could extend that radio button object to add your own customizations to avoid having to evaluate in the big if statement. Generally, if you have code that looks the same over and over, it's probably a good candidate to refactor. 
This is backwards in every way. Document stores were created to solve problems with scaling relational databases, and we gave up a lot to get that scalability. Using this means you don't need the scalability, so why not get all the nice features of SQLite?
Your post is really hard to follow, I still have no clue what your specific problem is. What is that screenshot even supposed to show? &gt;Now, I am getting socket exception, web exception and a lot of exceptions to do with the web. This only happens when it can't connect to the proxy. That's exactly what I would expect to happen? Regardless, considering the screenshot is called "RsAccCreator" and you're apparently attempting to circumvent some kind of IP block or rate limiting, I can't say I'm particularly inclined to help.
I've used both SQLite and LiteDB in applications and LiteDB is far simpler to use and much better integrated into .NET. Which nice features from SQLite do you think LiteDB lacks?
SQLite is great for many things, but even putting aside some peculiar problems with it[1] or its configuration geared to favor data consistency over anything else[2], you might not need all the features of a relational database and LiteDB is undeniably easier to use. SQLite is great, but LiteDB might be better for some specific use case. [1] for instance: [UWP App SQLite Access database in Documents Library](https://stackoverflow.com/questions/35084058/uwp-app-sqlite-access-database-in-documents-library) [2] [INSERT is really slow - I can only do few dozen INSERTs per second](https://www.sqlite.org/faq.html#q19)
Well the syntax is a C#7 feature. `var someString, someInt = MyMethod()`
SQLite also needs a native implementation shipped with the application which can be a pain to manage.
Make a borderless app and a custom control to match the styling that you want. You'll also need to handle resize events and move events (click and drag on your custom control)
&gt; All versions of .NET Standard lower than 1.6 are retroactively numbering what older .NET Framework versions did. Never knew that, but then again, this whole .net core thing is turning into a bit of a shit show. I downloaded it again to see what it's like last night. Despite the stupid json format being removed months ago, it's still there, still being used, and all the documentation only covers using it. Guess it will be another few months before I try again.
Assuming you are using the Mvvm standard design practice that means you would bind the dates to an element
Good point, I thought about adding those modes to the tests, but I didn't want to make the post too long. Maybe I'll do a follow-up that includes them.
Removed: Rule 3, Rule 4. WinForms you may find troublesome to get a working solution, and you'll need to test that it works for Windows 8 and 10. Maybe rtry this one: http://customerborderform.codeplex.com/ If you make you application in WPF though, it's natively supported: https://blogs.msdn.microsoft.com/wpfsdk/2010/08/25/experiments-with-windowchrome/ and alternatives: http://stackoverflow.com/questions/6792275/how-to-create-custom-window-chrome-in-wpf
This reminds me of vistadb in some ways.
Document stores were not only created to solve scaling. It's much easier for most languages to store and retrieve data from them. I don't have to convert from object to rows to store it and then convert back when I retrieve. Before mongodb made it popular developers were doing the same thing with traditional databases by storing XML in a table and creating a second table to contain lookup keys
I think that usually transactions are optional and chosen by the user/developer, while SQLite does them by default.
No, SQLite does not do transactions by default. As the developer, you're responsible for doing that.
If I understand it correctly, that's not what it says in the manual: &gt; By default, each INSERT statement is its own transaction.
I've tried different version, unfortunately, same thing happens. I'm almost sure it's because of resharper, but have no idea how to get both options.
[pdf available here](http://www.clicktocontinue.com/books/EffectvCShrp.pdf)
Yes they can. public (double lat, double lng) GetLatLng(string address) { ... } var ll = GetLatLng("some address"); Console.WriteLine($"Lat: {ll.lat}, Long: {ll.lng}"); 
Even then, you can wrap a number of statements in a single transaction, increasing throughout drastically.
I absolutely hate the menu. All the links to the pages are blue like a hyperlink. I click them, they work like a hyperlink. Except, you can't right click them and do "open in new tab" because it turns out they are fake links that have JS hooked into them. Annoying.
He's more or less talking about indexes. Main table contains key and data, second table contains key and indexes of important parts of the data.
Removed: Spam.
&gt; lookup keys Ahh now I get it. 
Just a few things i've noticed... **MainWindow.xaml.cs** 1. (line 49 and 56) Path.Combine can be used with up to 4 parameters (strings), google path.combine to see signature from microsoft. So you can do; string combinedPath = Path.Combine(_nopath, _inactivefiles, filename); 2. you seem to use two list types to store the same data. This risks the view object (e.g.; inactiveFiles, activeFiles) from being different from the other list (currentActiveFiles, currentInactiveFiles). Maybe here you could use either a view model wrapped around your file lists and bind that to the window, just use the view object and access the .Items property, or just use an ObservableCollection type, and bind it to the ListBox in your view. private ObservableCollection&lt;string&gt; _inactiveFiles = new ObserveableCollection&lt;string&gt;(); // in load event or constructor inactiveFiles.ItemsSource = _inactiveFiles; 3. given #2 is fixed, you could simplify your foreach statements (line 69, 76) and extract a method. Since these both foreach statements are very similar? private void updateList(string newPath, List&lt;string&gt; files) { ... } 4. line 29, 34 doesn't need to be else if, because the previous statements shutdown the application. 5. should there be an shutdown if global.ini is missing? seems to be no reference to it at any later point? 6. line 88, 98 consider reversing your if statement to reduce nested code. Instead of saying if select isn't -1, do this... say if index IS -1 return (therefor skipping the following code) if (activeFiles.SelectedIndex == -1) return; // do the stuff required if there is an selected item **MainWindow.xaml** 7. line 18 button is named button, change it to represent something more descriptive, because in your code behind (xaml.cs) you refer to it on line 108 as button.IsEnabled...without looking at your xaml file i have no idea what that button does/is. Maybe btnGetFiles would be more appropriate, or buttonGetFiles more consistant? **General Advise** If you're learning C# and Wpf, considering turning this project into a simple MVVM pattern. It's small enough you don't need it, but would be good simple program to practice with. Let me know if you have any questions, or i misunderstood something! Good luck and happy coding!
Awesome information. I'm looking over a lot of these comments as I'm eating my breakfast at 3 in the afternoon. Really useful insights that I totally overlooked. Thank you.
I'll see if I can try and clean that up.
I completely overlooked that, such a simple thing too. I even know that sort of comparison exists. Basically I should be using ! whenever possible.
I do believe you're talking about this Style Guide. Coming from an HTML background I was really looking for something similar to the following [link](https://msdn.microsoft.com/en-us/library/ms229043.aspx) and now that you've stated what to google. That is exactly what I've been looking for. Thanks a million.
Absolutely. When I wrote a ton of HTML stuff I'd comment like every little thing. Do you know a good document about regions?
are you copying the entire gist? are you accidentally wrapping the gist in a different namespace? are you using Visual Studio or some other IDE? Other IDEs generally blow compared to VS. to use classes outside the namespace you are writing code in, you must either fully declare them or put a using statement at the top like so: using antfx; a typical C# file will look like this: using Some.External.Dll.Namespace; using MyApp.Some.Other.Folder.Namespace; namespace MyApp.My.Nested.Folder.Structure { class MyClass { /* stuff */ } }
&gt; public readonly string _nopath = Directory.GetCurrentDirectory(); While this works, I would prefer `public string NoPath {get;}`. Also, not a clue what the variable name is supposed to be. &gt; public List&lt;string&gt; currentActiveFiles = new List&lt;string&gt;(); Program to the interface not the implementation, so have this instead: `public IList&lt;string&gt; CurrentActiveFiles {get; set;}` `public ICollection&lt;string&gt; CurrentActiveFiles {get; set;}` `public IEnumerable&lt;string&gt; CurrentActiveFiles {get; set;}` Which interface you use depends on what you want to use it for, best practice is to use the lowest common denominator. http://geekswithblogs.net/BlackRabbitCoder/archive/2011/06/16/c.net-fundamentals-choosing-the-right-collection-class.aspx
Have you done the standard restart VS/reboot? This happens to me all the time (I use Resharper). It's like VS 'forgets' how to do Intellisense. Rebooting or restarting VS usually fixes it. Very annoying. I don't know if it is Resharper or VS Tools for Unity or VS itself.
I'm sorry how is this violation of rule #6? 
Sure, you can store any type of file in a varbinary column.
Maybe the rule could be rewritten a bit to make it clear that it's not strictly for the submitters' gain only. Even if you feel the post isn't in violation of Rule 6, I think it's still in violation of the spirit of Reddit's self-promotion guidelines. If you want to repost something, maybe make a blog posting explaining the significance of it and how the tooling works and why C# subscribers should be interested. Don't link to their subreddit soapbox. Don't make it about selling a product.
Sure. Maybe provide some commentary or context.
Cool, thank you for your advices :)
Set the visibility of the icon to not visible before launching the other program. If you catch an error launching, set it to visible again, otherwise let it exit normally.
Ahh, great idea. That worked for me, thanks :)
I'm interested in the idea of using a block chain as an immutable distributed ledger (correct me if I'm wrong) but I don't want to have anything to do with bitcoin. I also don't want to have to mine anything if I create my own block chain for whatever usage. Do these projects allow for use-cases beyond bitcoin or any currency?
You didn't say you succeeded or not though...
! vs false is just a style choice. You can use whatever you want in your personal projects. When you start working with others the style guideline might tell you to use either of them.
Possible? Yes. Advisable? That depends.
Joins. Relations. 
The Stratis team will be showcasing Stratis Platform at the C# Corner Annual Conference 2017. Besides the regular session and keynote intro, we will have a workshop the day before the official opening, so that devs can have a hands-on experience with our tools. More details coming soon!
LiteDB got joins, see [DbRef](https://github.com/mbdavid/LiteDB/wiki/DbRef) documentation. &gt; LiteDB is a document database, so there is no JOIN between collections. You can use embedded documents (sub-documents) or create a reference between collections. To create this reference you ca use [BsonRef] attribute or use DbRef method from fluent API mapper. and &gt; When you query a document with a cross collection reference, you can auto load references using Include method before query. 
Removed: Rule 4. Please include the actual source code you're using (you state yours is modified from the linked source). Also, have you tried running the code on a non-Windows Server 2008 machine? Also run it with the debugger and try to trace the issue that way.
&gt;It works on Windows Server 2012. A bit modified: only adds a log (IP connected). (Console.Write). How would i use the debugger? I use scs
I had a similar situation a couple of years ago. It wasn't for a mobile app, but we developed an API for customers to access the same data as our website. Then in version 2 of our website, all data access requests for the website went through the API and everything worked fine. By having all the website requests go through the API, we actually tested many things and found bugs before customers did since our website used the same API calls a customer was expected to call. This wasn't a high traffic site, but performance wise it was almost as fast as loading the data directly since it was all on the same server. 
*server 2008 is the one where it doesn't work. and ye thx i'll try the console log thing at each step / variable
Looks good. Personally I'd prefer an attribute-based mapper rather than the fluent one though.
I would have to create a subscription for each of the 2000+ recipients, and the body of the mail is not variable unless you use Data driven reports.
To convert an object to a string, their `ToString()` method is called. Unless overridden, a class uses the [default implementation inherited from `Object`](https://msdn.microsoft.com/en-us/library/system.object.tostring.aspx#Anchor_1), which just returns the full name of the type. To change this, you need to override the `ToString()` method to return the string you want.
Start here: https://msdn.microsoft.com/en-us/library/gg509017.aspx Also look at these examples: http://linq101.nilzorblog.com/linq101-lambda.php and finally download these samples. It covers all LINQ functions with 101 examples. https://code.msdn.microsoft.com/101-LINQ-Samples-3fb9811b That's how I picked it up and still go back to it for reference. Also for any edge-case scenerio - StackOverflow has tons of knowledge. Also, download Linqpad and play with it. 
Still struggling with this one. I think it goes without saying that I'm new to C#. Could you perhaps include a code example which mimics my code?
[removed]
MVA is a great resource full of courses and everything is a free! You can an get from them a pretty good primmer of the argument you want to study but I find that PS courses go much deeper as they normally focus an entire lesson on one argument. For example you find a single course about Generics or reflection or even async https://www.pluralsight.com/courses/csharp-generics https://www.pluralsight.com/courses/practical-reflection-dotnet https://www.pluralsight.com/courses/skeet-async Or why not FP n c# https://www.pluralsight.com/courses/functional-programming-csharp
Got it -- will start the PS courses this week :)
It is a bit hard for me to realise what your actual problem is, but I assume it's to do with multiple inheritance? You want to inherit methods from different classes into some class. Take a look at the first answer [here](http://stackoverflow.com/questions/11134832/inherit-from-two-classes-in-c-sharp) edit: some further reading, if this is actually your problem: http://stackoverflow.com/questions/178333/multiple-inheritance-in-c-sharp
On a related note -- I assume it's smart for me to start with C#, then move to MVC for .NET Core, correct?
When you make your own classes, like `Class1` in your code, the computer doesn't know how to print them. It could guess, by printing all of the fields in your object, but that would not be very readable, and could get very long if you have a big class with many fields. So, by default, all it does is print the namespace and class name of your object. Usually, that's not very useful. So to change this default, you can write your own method that turns your object into a string. Then `Console.WriteLine` will automatically use that method when you try to print your object. In your case, you could add this method to your `Class1` class: public override string ToString() { return num1 + " " + str1; } You don't need to call it, `Console.WriteLine` will automatically call it. If you add that method to your code example, you should get what you expect. 
I learned from the book "LINQ in Action" when LINQ came out in 2008. I imagine the book is probably still relevant. Also, if you don't have the Re-Sharper plugin, I recommend installing it as it allows you to switch back and forth from Fluent to Query style with a click of the mouse. (The plugin will re-write your LINQ code for you.) I found it helpful in understanding both styles.
One of the reasons we created the OzCode LINQ debugging tools (https://blog.oz-code.com/enter-the-era-of-linq-debugging-with-the-ozcode-early-access-program/) was to create a learning tool for people who are new to LINQ, that works inside VS, and that would not only visualize the result of a LINQ query (as LINQPad does), but actually show you all the intermediary steps in the LINQ pipeline so you could thoroughly understand each and every part of your query. I'd love any feedback on whether or not you find this worthwhile as a learning tool, not just a debugging tool. Demo is here: https://www.youtube.com/watch?v=RUj5XAg-JYk&amp;feature=youtu.be&amp;t=28m43s
If it wasn't paid ;) But good job, nice tool to have in your arsenal when you are working with complex queries. But 79$ for a learning linq purposes is a bit to high. It doesn't come with a course or anything. Just a tool.
didn't know about PS courses, but I'll research about it, thanks!
Can't you use the new universal windows UI thing? Haven't actually looked into it, I hate UI. Also, there's Electron (HTML5). That's what VS Code is using. 
Thanks this is awesome, I have to put my company(dont have one) and my phone into fields, do I need a company to use it at all? thanks
pdfsharp maybe? http://www.pdfsharp.net/ You're probably dodging a bullet by not being able to use SSRS, while it's easy to point to a datasource and can generate PDFs, the web service that you interact with from the .NET side really is terrible, and using the report designer tool is akin to self-flagellation. I'm actually researching moving away from SSRS at the minute to use either PDFSharp or ITextSharp and there is a rather nice project on github called RazorPDF for defining PDFs in razor markup that uses ITextSharp.
What have u tried? Where did it go wrong? Was the output not as expected? We can help u but we're not here to do your homework ;)
[removed]
you just cant be "done" learning a programming language. write some apps as well, have fun with it. I did exactly what you did for over a year before i got my first role as a .NET developer by the grace of god. None of what i spent a year studying made sense nor did i remember it. The biggest thing that is helping me get a lot of interviews (now that i am looking for work again) is my personal projects that I work on everyday. I keep my linkedin profile up to date with these projects. Guess what interviewers are interested in talking to me about and ask the most questions about?
Options are (personal opinion): - MEF + ExportMetadata - Reflection (each space separates class(es) and the target method) - Code compiling (embed the input within a method, compile and execute it) Ordered from "good" to "not so good" depending on effort/reliability/stability
I think you're referring to the template method pattern https://en.wikipedia.org/wiki/Template_method_pattern
Well what errors are you getting?
Removed: Rule 4.
Based on your code snippet, would a Dictionary help? public List&lt;Activitys&gt; GetActivitiesForEntity(string entityType, int entityId) { // I've shown this as a local variable, but you could give it a wider // scope if it's used in lots of places var entityTypes = new Dictionary&lt;string, Func&lt;Activity, int&gt;&gt;() { { "program", a =&gt; a.ProgramId }, { "accounts", a =&gt; a.CustomerId }, { "contacts", a =&gt; a.ContactId } }; if (entityId == entityTypes[entityType.toLower()](myActivity)) { ... } Edit: minor corrections
Very nice guide, thanks! I'm a beginner and have one question about this statement: &gt;**Modelling Our Entities** &gt; There is no code, just properties The model is a representation, there should be no functionality defined within it as that is the job of the controller. Instead all we have are properties with blank getters and setters. I've asked myself the question of where "business logic" should reside in a MVC project. According to some of the searches I've done online ending up on Stackoverflow, it seems I should be aiming for fat models, skinny controllers. For a few reasons one being if I need to share code across controllers, that is bad design. And testability without UI. However, in the case of these REST-apis, it is just a different thoughtprocess/methodology when designing them? Having all the logic in one controller is the way to go? But what if my Cat object wants to meow to something else other than via. the API. Wouldn't I want the Meow() method in the model?
Main reasons are nuspec in depth and creating a private package repo 
No. A better question would be "would it be easier to use git?" A blockchain, from my understanding, is more like using git for a history of anything. You could use a database to store transactions in an implementation of a blockchain.
There isn't really much depth to nuspec, though. As for running a repo, just google it, there is several ways, the easiest just being a directory on disk.
I've used doxygen. Works for a wide variety of languages.
Yes, that's it. Figured it was called something special
Pretty confused. Are you talking about viewmodels? Isn't that what they're for? Instantiates the models and sets up a custom-tailored model specific to that views needs.
Oh yes, of course. So what do you mean exactly? Ideally neither my controller nor model has any "business logic", but the controller interacts with my custom dedicated classes, that create my models perhaps via. dependency injection? Adding that extra layer of custom classes just seems weird when I could add logic/methods directly to my models. 
Thanks Blazeix, sorry if this was painfully simplified for you. I think it goes without saying that I am new to csharp. I will take this all this on board and (hopefully) that's one less idiot that you have to deal with! best regards, Elliot
The bit in there about the UI being single-threaded is important, and likely to be skipped by almost everyone. ;) 
If you don't have a company it would by default be a sole proprietorship. So you could use your name there again.
Your class also calls `SplitFiles()` and `sendToDatabase()`. Those appear to all about side-effects, so your tests ought to be checking that the side-effects that occur are the ones that *should* occur. This may mean connecting to the DB and checking that record(s) were inserted for `processParams`, or checking the contents of the directory that `SplitFiles()` dumps the output files into, or whatever. In an ideal world, those things would be accessed through intermediary objects and you mock *those* up, too, and make your assertions on your mocks. But, if you can't do that, you do it the hard way. And don't run your tests during a build, because they'll probably be slow. ETA: the results of `Downloader.DownloadFiles()` will be used by `SplitFiles()`. You sort of need to know what that function does to tell if it's doing it right.
I'm confused too. I've always been under the impression that the controllers should be heavy on the handling of business logic. The model would directly mimic the table columns and the view would handle the model's properties, no?
I got the same problem. Are you using VS 2017 RC by any chance?
Question: Looking for any programmer writer help? I've worked documenting a lot of SDKs for Amazon &amp; Microsoft. Willing to help out.
On small projects it's easy to have the logic in the controller but on anything slightly bigger you would have another layer often called application service layer. This is where your business logic lives I'm currently building a website and mobile apps. The .Net project has the controller's for the MVC website in one project and the controller's for mobile apps API on another. Then another project holds all business logic which both mobile and website can call. This saves writing the save delete get etc methods twice. 
Maybe one day we'll have threading as easy as async. Unfortunately, that's damn near impossible. :)
From the Sandcastle codeplex site it indicates that SHFB forked the original source and maintains it to this day. So basically SHFB is Sandcastle, but maintained and improved.
No, I'm using VS 2015.
The first rule of writing GUI applications: Never do work on the UI thread.
NuGet is usually fairly heavily in .NET now, particularly in .NET Core which has spun large sections of what used to be in the framework out to NuGet packages.
Agreed. Property injection, method injection, service locator anti-pattern. These are all dreadful and it's remarkable how often they get used considering constructor injection is the most logical choice! Constructor because it *constructs* the damn object! Having property injection means someone could change the whole thing out half way through a transaction and cause a ton of trouble. Service locator pattern just winds me up, it's like someone read the first paragraph on IOC/DI and decided that service locator allows you to do IOC/DI (which of course it doesn't). Still, I've recently seen an abomination that I legitimately have never seen before. Imagine this: * Class1 uses service locator anti pattern. * MethodA,B,C on Class 2 are all static. * MethodA,B,C use service locator anti pattern. But wait, theres more! Each of the static methods has the DI container passed into them, and then some of those end up passing said container further along to yet more static methods, sometimes not static. Argh.
Task.Run
Thanks for the gold! Regarding Linqpad - the reason I recommended that is because the tool is great if you just want to play around with some queries against an existing datasource without going through the trouble of setting up a VS project and getting it connected to a datasource or service. I use it as a quick scratchpad against some data to try out a query and it has helped me quite a bit sharpening my LINQ skills. There are tons of plugins and connectivity options in Linqpad to wire it up to some raw data to query against. That's all. Good luck. 
Use the [Timer](https://msdn.microsoft.com/en-us/library/system.timers.timer\(v=vs.110\).aspx) class (in System.Timers) [StackOverflow question about this](https://stackoverflow.com/questions/12535722/what-is-the-best-way-to-implement-a-timer)
The return value of the task is your concurrency synchronization. Don't read member properties and bobs your uncle. 
Thank you for this!
Thank you for taking the time! 
I'm doing this now with a small work project. Thank you 
Great tip , thank you!
DocFx produces something very similar. 
Look up "static vs instance". In this case, you need a reference to your `Form1` to call the _instance_ method on it (that is, `myForm.displayMessage("----")`) in your _static_ `callReadme()` method. If you don't have the form and need to create it in that method, perhaps something like: Form1 myForm = new Form1(); myForm.Show(); myForm.callReadme(); EDIT: dotnetperls has a section on `static`. For whatever reason, the site is malfunctioning currently for me, but you can see the archived page here: https://web.archive.org/web/20160513144230/http://www.dotnetperls.com/static
Make README class public?
Ok, so first of all your callReadMe method needs to have a reference to the instance of Form1 So change &gt; public static void callReadme() To &gt; public static void callReadme(Form1 form) This allows (requires) that the method be passed an instance of Form1. Then change &gt; README.callReadme(); To &gt; README.callReadme(this); This passes the current instance of Form1 to the callReadMe method Then change: &gt; displayMessage("Your document has opened successfully!"); To &gt; form.displayMessage("Your document has opened successfully!"); This calls the displayMessage method on the form. (Apologies for formatting, doing this on mobile) 
&gt; but still cant get why i can see displayMessage() Don't you mean **can't** ? You know the relationship between a class and an object, right? A quick refresher; a class is like a blueprint which says how objects (*instances* of that class) will behave. You create a new object like: Item i = new Item(); Where `Item` is the class, and `i` is an *instance* of the class, an *object*. Any methods, properties or variables inside the class definition of `Item` that are marked as `static` belongs to the class itself (to the *blueprint*, if you like). All other methods, properties or variables in that class will belong to each *instance* of the class, and you will need an instance of the class if you want to use them. To access methods or properties within a class you need an instance of that class, but because `static` items belong to the class, not each individual instance, you can refer to them without having an instance of the class around. For example: class Human { // This property is not static, so you need a specific instance of a Human // in order to access it. This is because each Human will have their own name. public string Name { get; set; } // Constructor - create a new Human and set their name. public Human( string name ) { Name = name; } // This method is static. It belongs to the Human class. You don't need a particular // instance of a Human to call it on, because all humans have 1 brain! public static int GetNumberOfBrains() { return 1; } } Console.WriteLine( "A Human has {0} brains", Human.GetNumberOfBrains() ); Human me = new Human( "Dave" ); Console.WriteLine( "This human's name is {0}", me.Name ); Notice how `GetNumberOfBrains()` is `static` - that's because that method belongs to the `Human` class, and we can use it without any particular instance of a `Human` - we can just refer to `Human.GetNumberOfBrains()` But notice that the `Name` property isn't static - so to access it we need an instance of a `Human` to find that person's name. So we must write `me.Name`, where `me` is an instance of a `Human`. Now, in your code, the method `callReadme()` is static, so you don't need an instance of the `README` class in order to call it; you can just do `README.callReadme()`. But the `displayMessage()` method in your `Form` class isn't static, so in order to call it you need an instance of a `Form` object. But in your `callReadme()` method you don't have one! So you'll get a compiler error for that line. In simpler terms, you could have multiple `Form`s, and `callReadme()` doesn't know which one to use to display the message! You might think the simple solution would be to make `displayMessage()` static, but it needs to access `textBoxOUTPUT`, which isn't static, so needs an instance of a Form (it needs to know *which* Form's `textBoxOUTPUT` you want to update!), so you can't do that. One solution would be to tell the `callReadme()` method which `Form` it should display the message on. You can do this by passing the `Form` object in as a parameter, like this: public static void callReadme( Form formToDisplayOn ) { // ... rest of your code formToDisplayOn.displayMessage( "Your document has opened successfully!" ); } Then when you call that method, do it like this: private void buttonREADME_Click(object sender, EventArgs e) { README.callReadme( this ); // the keyword `this` refers to the current object, i.e. the current Form in this case } 
https://www.reddit.com/r/csharp/comments/3xn6sm/welcome_to_rcsharp_read_this_post_before/
i did not, it was quite long and reddit stinks for linking code, have to put 4 spaces in front of each line. trying to find a better way to link snippets .
&gt; This may mean connecting to the DB and checking that record(s) were inserted for processParams, or checking the contents of the directory that SplitFiles() dumps the output files into, or whatever. The thing about that kind of full integration test is that you lose track of what you are supposed to be testing and end up testing the whole system in every test. Intermediate objects (aka injected dependencies) are the way to go. 
*I agree*, but, as presented, there are no intermediate objects, and it's unclear if the other methods are in OP's control.
True. The only thing that seems clear is that OP is off to a rough start.
Coming from a SQL background, LINQ's query syntax was helpful. You then realize that the query syntax gets converted to C# methods anyway and that certain complex statements can only be written in the method syntax. Over time you'll use the method syntax exclusively. It's best to get started with LINQ's query syntax for readability and for understanding. Eventually transition to the method syntax as that's what almost all .NET devs use.
&gt;...2 problems! &gt;Now you have... FTFY 
As someone who has done this a few times in both personal and work-related projects (self-learned, I had one class in OOP _years_ ago and adapted it to C#), and is certain it's been done "wrong" (in that there are better practices), I'd love to know what the best method is for this. In my experience, using the built in .NET DataTable and GridView type classes for this type of thing has always been more work, less attractive/customizable/dynamic output, and harder to understand when going over the code. For me, I've always created object classes for my data, as well as classes for collections of those objects (with functions there for calculating aggregated data), and include output functions that'll spit out HTML (such as tables with defined css classes or even ugly embedded style= values). Populate them from a DB via the SqlDataReader, SqlConnection, and SqlCommand classes. From my pages, I mostly use asp:Literal tags, and in my code behind, on page loads, fill the literals with HTML from my object classes' functions. On the front-end, I use form fields and/or Request.QueryString (the URL parameters after the ?) to allow the users to dynamically interact with data. Validated, of course. I use javascript libraries for client-side table sorting and of course you can use whatever you want (ie. bootstrap) for styling/theming. It feels pretty much like a duct tape solution, but it works and it's quick enough for me. My last project was a [stats site for my ball team](http://i.imgur.com/Y3BjLbh.png) (we sucked last year). Taking the scoresheets after each game, I parsed it into a list of events and fed that into the database. The site does the rest. ^(Edits for some clarity, maybe.)
look at the return type: string[] Split(this string str, char separator) It's returning a string array. So, `"My String".Split(' ')[0]` is returning the 0th element of the return, which in that case would be `"My"`.
Hmm alright, makes a little more sense. I am learning C# and was putting together a simple 2 operand 1 operator calculator. Here is the specific code block I am talking about: (sorry for my formatting) double x,y; textbox.ToString(); string input = textbox.Text; string xStr input.Split(' ')[0]; string yStr input.Split(' ')[2]; x = Convert.ToDouble(xStr); and so on.... I guess I was confused on how it translated a string to an array. But what you said made a little more sense.
Okay cool, I'll try that out. Thank you so much 
also sorry, another question. What is the difference between string and string[]?
Some advice. Don't split multiple times unless its something where you get a result through nested operations. I am hard pressed for an example at the moment: string SplitMe(string stringToSpit, string splitPattern, int itemToReturn) { string result; switch(itemToReturn){ case (0): return stringToSplit.Split(splitPattern)[itemToReturn]; case (1): Console.WriteLine("Doing something for no reason!"); return stringToSplit.Split(splitPattern)[itemToReturn]; default: Console.WriteLine("Dont do anything here! For Science!"); return ''; } This is totally useless, but its a basic idea... 
Thank you, I think this is what I am looking for as well. I definitely came across delegates in my searches, but this second example is actually clicking in my brain. 
Just one more thing.If there are two or more consecutive occurrences of your separators( like in "12345666789" with '6' as a separator ), the Split method will return some empty strings found between each two consecutive separators.For instance, in our example : "12345666789".Split('6') returns ["12345", "", "", "789" ], not ["12345", "666789"]. Fortunately, there's an overload of the method which takes a StringSplitOptions as argument(which you'd pass RemoveEmptyEntries) to get the result without the empty strings. "12345666789".Split(new[]{'6'}, StringSplitOptions.RemoveEmpyEntries) -&gt; ["12345", "789"].
In my work project we're introducing an API and more separated layers into an older program, and we've gone like this: - Controllers: thin, do some parameter checking to return relevant HTTP status codes, pass all logic to... - BLL (Business Logic Layer): All of the complex logic lives here, doing a wide variety of work on all different types of data, which is got from... - DAL (Data Access Layer): again, very thin, just pulls relevant records from the data source. Get, GetAll, Add, Update and Delete are most of the methods here. This reads in to the data models, which live in another project. These mostly just represent the DB structure, with some additional calculated properties on them (perhaps combining several fields into a "friendly name" for example). This architecture allows mocking for unit tests at multiple levels. We can mock the DAL to return known data and test the BLL's logic. Then also mock the BLL itself to test the return codes etc of the controllers. Hope that makes sense, and maybe even helps a bit! 
FYI a delegate is c# for "first class function type". Judging from your question, you would probably like functional programming. Check out f# when you have a chance. 
Gotta escape those \*s with a backslash in your comment, otherwise the formatting eats them. :) Ninja edit: that is, replace the \*s with \\\*
I've heard of F# but I'm mostly programming in Unity right now, which is why I'm in C#. Thanks though, I'll check it out.
Just to cover the obvious: 1. Does the certificate exist in the azure environment? Maybe do a System.IO.File.Exist() to double check. 2. What error is returned by the application? if nothing else maybe do a try/catch and log the error.
Msdn and Pluralsight advanced topics
https://dev.mysql.com/downloads/connector/net/6.9.html Been a while since I used it, but I was able to do db-first via EF and such pretty easily.
One option: StatLevel = (int) Value / 60; if (StatLevel &gt; 5) StatLevel = 5; Another option: public int StatLevel =&gt; (int) Value &lt;= 300 ? (int) Value / 60 : 5;
I dunno, I guess there's all kinds of syntactic sugar you could add to the language. But in the end, there's no way to do something like this without a division, an assignment, and a comparison. Syntactic sugar would just obscure that.
https://www.youtube.com/watch?v=0UIB9Y4OFPs 
That sounds like you'd want a custom class/struct with an enum to identify it? The class would then have something like a "modify" method where you would pass in your values. Why are you trying to do this? Not sure if you're asking the right question.
Wouldn't this do it? public int StatLevel =&gt; Math.Max( (int) Value / 60, 5) ) 
`public int StatLevel =&gt; Math.Max((int)Value / 60, 5);`
I think what you're describing is exactly what I will be doing. Thank you.
I was curious if there was a better solution.
Let's see another example. If you need a single integer value you can write: int a = 123; if you need another you can create a new variable int b = 753; and another one int c = 98; but if you need 1000 integer values it is not practical to come up with 1000 different variable names and write 1000 declarations. The solution: Arrays. int[] myValues = new int[1000]; now you can use myValues[0] instead of a and myValues[1] instead of b and so on. Another benefit is the fact that you can select the index using any integer as index. For example int x = 100; Console. WriteLine(myValues[x]); This means you can process arrays with loops (for example a for loop) for(int i = 0; i &lt; myValues.Length; i++) Console.WriteLine(myValues[i]); In C# you can create arrays with any type even with array types (but for starters you should not worry about arrays of arrays ^^ like int[][])
Well, I "could", but I'd rather focus on ONE subject and learn it to the end rather than learn the basics of 5 languages. Plus as I said, I've been working with c# for almost two years now, and I don't really want to start again with zero knowledge : you gotta learn the libraries, the syntax, the IDE, etc etc etc.
Yes :\^)
This would basically be all you need. [http://downloads.acs.com.hk/drivers/en/API-ACR122U-2.02.pdf](http://downloads.acs.com.hk/drivers/en/API-ACR122U-2.02.pdf) But it would require a lot of work to get going. Googling didn't turn up any .net implementation, but I did find this [Java one. ](https://github.com/mdeverdelhan/ACR122U-reader-writer) If Win forms and C# is a requirement I think you would need to roll your own. **Edit**: There is also the paid SDK from Mifare which supports C#. It costs $149. [link](http://www.acs.com.hk/en/products/12/acr122u-nfc-contactless-smart-card-reader-software-development-kit/) 
C# works absolutely fine under Linux. Mono is feature equivalent to .NET, and is present in practically every major distribution. You won't need to relearn anything, it's just code and go. All of the namespaces and bundled libraries are exactly the same on Linux. The only things you won't be able to do are Windows-specific APIs such as DirectShow, the registry, and P/Invoke with native Windows libraries (but P/Invoke with native Linux libraries works fine!). NuGet works without a hitch. MonoDevelop is the primary IDE for Linux, and it's superficially similar to Visual Studio. However, there's a new kid on the block called Rider (https://www.jetbrains.com/rider/) made by JetBrains, which I use on a daily basis. It's still in EAP, but I think it's great - certainly better than MonoDevelop, that's for sure! It even has a Unity plugin, if you want to fiddle with that. What you will not be able to use is any of the Microsoft UI toolkits, such as Windows.Forms (well, forms is partially supported, but it looks like arse) or WPF (no support at all). However, you can always use GTK, which is easy to use and works on Windows and Mac too. I don't own a single Windows or Mac computer, and C# is my primary language. I'm completely satisfied with C# on Linux. If you want to have a look at some code which has been written with Linux in mind, but also with support for Windows and Mac, check out one of my projects: https://github.com/Nihlus/Launchpad - it uses GTK, no Windows-only APIs and is tested across all three platforms.
You can try using pcsc-sharp and different sets of instructions (APDU), I've had good success with it. Just read NFC specification thoroughly and you should be good to go :)
Also, *its in the title.
Core will happily run desktop apps as well. The GUI isn't there though. If IDE is all you're asking about .NET Core obviously allows you to code in VS Core and the standard Visual Studio software
Core will run console apps but I don't think that's what OP means by desktop. Also you cannot run standard Visual Studio on Linux, just to clarify.
Visual Studio 2017 (https://www.visualstudio.com/vs/visual-studio-2017-rc/) now runs on Linux, so you can use it for C++ development, and presumably dotnetcore and xamarin development.
Core is, unfortunately, not yet feature complete. It's also not available from the software repositories of many major distributions yet, since it hasn't been fully released.
Well by desktop I mean anything not directly web related, so I guess as soon you can run a console app I'm happy.
* http://gunnarpeipman.com/2016/12/aspnet-core-linux-command-line/ * http://piotrgankiewicz.com/2016/10/17/net-on-linux-bye-windows-10/
I'm very disappointed : that is not free :( (It was to be expected from Jetbrains but still)
It's free for the duration of the EAP, which will in all likelihood keep on going for a while longer. Also, if you're a student, you get all of their software for free anyway :)
I'm no longer a student, unfortunately. Don't misunderstand me, i'll try this as soon as I get home, but it's always harder to get your boss to understand it might be a good idea to invest in a paying tech when there are free ones :(
Yeah, fair enough. I'm not sure what the pricing will be in the end, but I'm hoping that it'll be humane.
https://msdn.microsoft.com/en-us/library/system.timers.timer.elapsed(v=vs.110).aspx
`public int StatLevel =&gt; Math.Min((int)Value / 60, 5);` Try them both with `Value` equal to 10 or 20.
Thanks to Oracle, Java is dying on many platforms. 
C# apps have been running on Linux and MacOs for over a decade using mono. Your colleagues live in a bubble
Yes they do. However, we must admit it's way more frequent to use Java than c# on unix cores. But I plan to change that. All by myself.
The expert plumber has many tools in his toolbox. Learning multiple languages let's you gain perspective on the differences between them - even if you don't obtain full mastery of the ecosystem surrounding another language 
Yes, well, I'm still an apprentice plumber, so I'll first learn how to use the tools in my box before getting others. Remember, I'm already learning Python and Javascript, so it's not like I only focused on c#, but I think Java is just too close from the syntax point of view to be easily learned, while the value it will add is quite marginal as long as I keep on the basics of the languages. So if I need to put in extra effort and extra time, I'd rather gain extra value. I feel I will gain more value if I can say "I know c# very proficiently and I can use it on windows AND unix AND macOs" than say "I know some c# and some Java, and can use both if I don't make mistakes".
Well that's the good path - your comment kinda sounded like you were dead set against other languages, so I wanted to ensure you weren't pigeonholing yourself.
Looks like u are missing the basics and want to to something harder instead. Back to square 1 is the best option for you.
If you first make an Timer object that is accessible from everywhere: private static System.Timers.Timer aTimer; This should be outside your main running code. Then in your main code, that only executes ONCE, you should create the Timer object, as so: aTimer = new System.Timers.Timer(2000); 2000 stands for milliseconds. Which is 2 seconds. So 30000 milliseconds for 30 seconds. Now, when this timer expires, you want it to execute a method. You can assign it like this: aTimer.Elapsed += OnTimedEvent; Where as "OnTimedEvent" is the method that should be executed. Then we need to assign a few other things to the Timer object: aTimer.AutoReset = true; aTimer.Enabled = true; The Timer object is done now. Now we need to create the method that should be executed when the timer runs out, this should NOT be inside the main code: private static void OnTimedEvent(Object source, System.Timers.ElapsedEventArgs e) { Console.WriteLine("The Elapsed event was raised at {0}", e.SignalTime); } Whatever you put inbetween {} will execute at the set time, and do so repeatedly since we set "AutoReset" to True.
Rider RS from Jetbrains is in EAP, but it is nearing completion and I use it as my daily driver without any problems now.
Lib USB Sharp is pretty OK if the implementation is straightforward, ie: delimiter character terminated serial string. If the thing just reads number codes, I can't imagine it be super complex, although if you want two way write, it'll get way harder way faster. 
Thank you...was pretty much what I had in my head. Do not have a need here for users to edit data or add any sort of credentials, so that simplifies things. Would be hosted on a secure internal server.
Neat web site....really like the detailed examples...will definitely be helpful for me. Thanks for sharing.
It also doesn't have the best support among newer distros. It doesn't support Fedora 25, and it didn't support Fedora 24 for the longest time. It appears to work well on the latest Ubuntus, though.
Some constraint examples from the framework: - `WeakReference&lt;T&gt;` holds a reference to an instance without preventing the object from being garbage collected. This doesn't work for value types, so it is constrained to `class` - `Nullable&lt;T&gt;` is a wrapper for optional value types, so it is constrained to `struct`. - the various `GetCustomAttributes&lt;T&gt;` methods: attributes must inherit from `Attribute`, so it is constrained that way.
My single OOP class was in university about ~13 years ago, and also was just Java. So yeah, very similar! And I've gone further than this - essentially the entire HTML body section of a page is a single literal, with everything else generated on the code behind - but basically yes, that's all I do. If you go that route, you can easily dynamically generate the page layout based on what the data is. The one I showed is a really simple single column layout (works great on mobile - for when the team sits around after our games chatting), which I replicated across other pages. [This is the landing page that I screenshotted above.](http://i.imgur.com/rhc79oC.png) All the source code is split up in the highlighted ascx files. "default.ascx" has code specific to the home page (mainly page load to populate those literals); "shared.ascx" has literally just a couple lines of code to generate the header and footer on every page; "classes.ascx" has the object classes for the data/logic used by each page. You can literally do all this with notepad. You don't need to worry about Visual Studio, projects, or compiling anything. Just throw everything in the iis wwwroot folder.
I work in this industry and you be extremely careful as there PCI compliance that you need to understand before coding this.
Ah, I see. What do you need python for? C# can do everything python can?
&gt; STL BCL.
Pretend you want to collect pebbles in a jar. //The pebbles have some inheritance public abstract class Rock{} public class Boulder:Rock{} public class Pebble:Rock{} //The container public class GlassJar&lt;T&gt; {} But there's a problem: you know logically that you can fill the jar with "pebbles" but not "boulders." So right out the gate the above class declaration is bugged, because nothing currently keeps us from making a `new GlassJar&lt;Boulder&gt;();` In fact, the declaration is doubly bugged, since you can also make a glass jar full of integers `new GlassJar&lt;int&gt;();` or booleans `new GlassJar&lt;bool&gt;();`, which makes no sense. So rewrite it to constrain it: //old BAD, remove it public class GlassJar&lt;T&gt;{} //Rewritten GOOD public class GlassJar&lt;T&gt; where T:Pebble{} Now you know your client can *only* put pebbles in a glass jar by declaring the class in no other way but constrained. 
C# works a treat under linux, but I'm waiting for Jetbrains to finish developing Rider. I use Resharper professionally, and I've used some of the Rider previews. I have very high hopes for this.
Most examples I can think related to DI containers. Firstly, they make registration much easier: builder.RegisterType&lt;Service&gt;().As&lt;IService&gt;(); Here RegisterType and As are generic methods. This would otherwise have to be written as builder.RegisterType(typeof(Service)).As(typeof(IService)); Which is slightly more cumbersome. Another use of generics could be for data access. Say you have a group of data objects that you need to have CRUD access to. You could define a generic repository: interface Repository&lt;T&gt; { T Get(object id); void Insert(T entity); void Delete(object id); void Update(object id, T entity); } And this would have a corresponding implementation that dealt only with the generic parameter. Then whenever you needed to access a specific object from the database you create a new instance of your repository with the right type parameter. Hope this helps.
&gt; val =&gt; val Strange. Is val often grater than itself? :P
So when can we say that .net is as cross-platform as jvm?
Whenever you move, store, or process credit card data there is pci compliance. Essentially it needs to be secure and audited which is expensive.
"At level" is really subjective and depends upon what the target customer or market is. To use it with such a broad stroke to diminish C# is silly, at best. I work in the manufacturing, food and beverage, and petrochemical industries where control systems are key to their processes. All of the major control system software vendors in the US (and many abroad) sell products that only run on Windows*. It's highly likely that a majority of the consumer goods your colleagues use were created or built on lines run upon Windows Server systems. Often times, these systems are kept as minimal as possible, such as running Windows Core and not having Java installed if not required. But you can bet these machines have the .NET Framework. And that all of the custom software we write to work on these machines is written in C#. *It's possible these products could run on Linux with Mono or .NET Core, but the vendor doesn't support these setups. If you run into a problem and need to contact the vendor for assistance and are using a non-standard setup, they simply do not provide support - you're on your own. With highly critical systems, that is typically not a place you want to be.
Make a course about .net core
Well the only thing left to go on is the HRESULT explanation *"The file cannot be accessed by the system"*. So I'd just suggest looking in to anything that could be causing that.
even JetBrain's Rider is a strong competitor
&gt;What is a key indicator telling you that you should make a Class? Under the [Single Responsibility Principle](https://en.wikipedia.org/wiki/Single_responsibility_principle), a concept in GRASP or SOLID code, a class or module should have responsibility over only a single part of your overall program. A good start to abstraction is breaking down your program's function into different tasks and responsibilities, and seeing if you can abstract those responsibilities even further. For example, you have data I/O in order to have persistent data. First step might be implementing a class that brings in data according to some specific format (say, reading and writing to an XML file with a schema you made yourself). A further abstraction on that would be implementing what's called a [Repository Pattern](https://msdn.microsoft.com/en-gb/magazine/dd569757.aspx#id0400058)-styled class so that the rest of your program doesn't have to know or care about how data is stored or retrieved from persistent sources (file I/O, SQL querying, REST APIs, etc). &gt;I'm having trouble knowing when I should make a new Class code file or not. Make a new file for a class whenever you make a new class, i.e. whenever you add a new responsibility or object to your project. Your filename should match your class name. You can also have additional files for things like Extension Methods in a namespace, or Enums (if there are a sufficient amount and you want them to be general within a namespace). 
Thanks for the course, hope you make one for wpf or uwp 
Check out using Reactive Extensions Timers to execute some code on a specific interval. I've used this method before to make sure data from servers are synced on specific time intervals. http://rehansaeed.com/reactive-extensions-part4-replacing-timers/
Haha, yes :)
/u/JargonTheRed covered it well. Console apps work exactly the same, GUI apps your going to have to develop different user interfaces if it's going to be cross platform (or use GTK on Windows, but I don't think most Windows user would feel comfortable with that). I am primarily on Windows and am most knowledgeable in C#, so when I develop on Linux I prefer to use C# whenever possible for things like my Raspberry Pi projects and I sometimes use Python scripts to do the hardware level stuff. I have a timeclock project that I did for my company, it runs on Rasperberry Pi. It reads the output of a Python script, keeps track of employee information like card number using a Dictionary, and does some HTTP POSTs and GETs with Json.Net for data to actually punch user's in/out on the actual server (Raspberry Pi 2 was too slow on the reads/writes to disc using TimeTrex to do it all on the Pi) and then displays punch info and total time to a LCD1602. The only thing that isn't done in C# (which could have, would have just taken longer to figure out) was the smart card reader code and the buzzer, that is done in a Python script that loops and spits an output for the card number that the C# code reads and does the rest including the LCD. I wish WPF support was there as that would make cross platform development for GUI apps easier, but I don't see that coming anytime soon.
Eh, installing GTK on Windows is just a matter of bundling another installer with your own. It's fairly standard.
Eh. I have no problem sharing code between iOS/Android/WPF applications by using MvvmCross and ReactiveUI. I really don't see these things being in conflict with each other at all.
I guess one of my biggest complaints (mind you this was over 5 years ago) was how alien it looked on Windows.
I'm not a C# developer; rather, I'm a database guy. There are two ways in general that C# (and other languages) interact with databases. 1. The developer interacts with the database by hand-creating queries. 2. Using an ORM. Generally, you should know how to do both as a C# developer. There are pros and cons to both. Generally, an ORM will make it easier to code by hiding most/all of the query-building. It generally maps data from databases to objects in your object-oriented code. The downside is that the SQL can get really gnarly and complicated making debugging the actual SQL difficult. By the way, using datasets and adapters vs using a cursor/sqlreader (in your link) is just a matter of preference. I've seen both, and you should know both (pretty easy to learn both). Generally, people prefer the ADO.NET adapter since it populates a dataset for you using the `fill` method instead of manually using the reader and creating your own data structure to hold the data.
My WPF is very rusty, but I think you are on the right track with a grid. I think it will support * sizing In the second column, you can add the 3 different ui's and then set only one of them visible based on your selection. 
Your objects (instantiations of classes) should contain your data and overall state. Actions on that data should be in methods, and methods that act on that data typically should be be bundled with the object in class methods. Now, something important: you should think very carefully on how methods change the underlying data. It should be very clear where and when side effects (changes in state, especially outside the original method's scope) happen. Look at the [String](https://msdn.microsoft.com/en-us/library/system.string\(v=vs.110\).aspx) class. Notice how most of the manipulations on it do *not* change the state of the base string itself; those methods return a new string with the changes requested. Look at String.Trim() or String.ToLower() for some examples - you may only use those manipulations for a one-off string comparison. You might not want to permanently change a string to lower case because you wanted to see if it contained the word "mouse" without caring about casing. You only change the underlying string itself by explicitly setting it to that result (e.g. myString = myString.ToLower() ). Now also look at the [List](https://msdn.microsoft.com/en-us/library/6sh2ey19\(v=vs.110\).aspx) class. List.Add() by necessity will change the state of the List, and clearly denotes as such. In general, it should be immediately obvious how and why a method changes state.
i second that !
Can confirm Brackeys did an excellent job here. I have already watched all of them and coded alongside. I found the instruction very easy to understand and clear. I could have done with some more challenging homework but I found that on /r/dailyprogrammer so no great loss. Thank you, world class tuition for free. This is what the internet does right. 
I recommend looking into Dapper, it's a data mapper. Give it a query and a type and it handles the rest. My go to.
&gt; Notice how most of the manipulations on it do not change the state of the base string itself No methods/Properties change the underlying state of a `String`; it's immutable by design.
Ah. Well, that's not an issue anymore, looks just like a native application.
I would raise this on User Voice or Connect, maybe Stack Overflow.
That does look good. It looks faster to pick up and use. 
It's possible to programmatically generate PDF reports through the SSRS web service and then send them via the typical .NET email API.You would need SSRS set up for the database(with a web service endpoint) as well as email server to send them out. The body of the email could be generated from an HTML template or something similar. This is an approach I've used in the past without any issues. If the problem is with SSRS licensing perhaps a 3rd-party library for the PDF generation? Before SSRS we used something called ABCpdf and it seemed to work: http://www.websupergoo.com/abcpdf-1.htm It got the job done but to make things more consistent we ending up replacing it all with SSRS in the end. edit: It looks like SQL 2016 Standard comes with SSRS.
Raspberry projects. C# can certainly do it, but many things are already written, so it's easier and quicker to learn how to read those than to rewrite it.
Why?
Something involving DataTemplates and binding the right side to ListView.SelectedItem. This is a good case for the Model-View-ViewModel pattern.
&gt; jscript [just sayin](https://en.wikipedia.org/wiki/JScript)
Dam'n. Good to know, good to know. I'm just too lazy to write javascript, but this is indeed confusing.
This looks amazing and might just simplify some things I need to do this week. Saved for later! Thanks!
For starters, you should consider using an ORM like EntityFramework were it will generate for you both the classes and the SQL queries. If that is not an option, then you can use enums. public enum MyColumns { Foo = 0, Bar = 1 }; //etc... Now you can access the fields by index: row.Field&lt;string&gt;(MyColumns.Foo); Still, this is far than ideal. You still have to specify the type of the data, either by using one of the "Field" overloads, or by DataRow.Items. This will be done for your automatically with LinqToSql/EntityFramework, but consider creating classes that represents your data rows. For example: public enum FooBarColumns { Foo = 0, Bar = 1 }; class FooBarRow { public string Foo {get; set; } public int Bar {get; set; } } public class FooBarRepository : IFooBarRepository { public FooBarRow GetFooBarById(int id) { DataRow row = .... //your regular code for retrieving a row by id return new FooBarRow { Foo = row.Field&lt;string&gt;(FooBarColumns.Foo), Bar = row.Field&lt;int&gt;(FooBarColumns.Bar) } } }
It's Jon Snow :))
Thank you for your advice! I will try it that way
Having a play now, this is absolutely awesome! I'm probably going to write an EFCore models generator with this as the default scaffolding is creating totally un-maintainable code for my organisation's codebase migration. So I will probably start popping a few issues in as I play!
I know this is useful, but I don't understand why. Anyone care to explain it for me? All I see is a lot of very strange code being used to generate a smaller amount of C#, how would I use this in a useful way? 
Also interested in an answer to this.
Yeah, I x-posted it on Stack Overflow as well. http://stackoverflow.com/questions/41708173/assembly-binding-error-unrecoverable-error-occurred-during-pre-download-check
Code generation with itself is pretty pointless, but if you combine it with reflection you can do a lot of fun stuff. But here are a couple of examples I guess: - Generate code for web API's, for example http://swagger.io/ do this. - Say that you have a project without any unit tests at all and then you want to start write unit tests. So instead of going through all classes and creating similar structure in a unit test project - generate it! It won't create all the tests for you but you can maybe generate the basics and setups (maybe even some null tests by checking methods). So with a single command and a couple of seconds you maybe have 20-30 files created, all have correct syntax and a maybe even a setup? - Simple things like generating builders or containers from other classes. You can also create "code makers" where you for example say: "Make model class (int age, string name)" and it generate a full class with properties + constructor for you. So I would say it's a lot of fun stuff you can do. I'm actually thinking about doing a video on the unit test example just to show how easy it can be. 
I don't really disagree with many of your points. This is not a case of 'my language'. 90% of my current work in the past year has been in TypeScript. I love learning new languages. It's simply a case of recognizing the correct tool for the job. For the application I currently work on, the idea of writing the mission and performance critical portions of the back-end in JS is a laughable idea. COBOL is a bad comparison. The fundamental problem with JS development is that the cost of verifying correctness of mission critical code is higher than that of a language like Java. JS is too forgiving, nuance is glossed over and rears it's ugly head in production. In a language such as C# developers are more effectively boxed in by the rules of the language. This is very good for mission critical software. Typescript helps, but still allows poison like the 'any' type. In Enterprise, JS is simply a poor choice. I would posit that a new generation of developers cut their teeth on JS and are now trying to force it through the entire stack. That seems like a case of 'my language'.
It really is. The problem is that creating a short and useful example with code generation alone is pretty hard. But at the same time you don't want do show of a lot of reflection while trying to demonstrate the API. 
If you want to learn something, then the official books are the way to go. If you are just trying to pass, then I'm sure you're aware of braindumps.
At least for the moment, you should probably plan on learning both. Even in .NET, JavaScript still gets used for a number of things in the browser, and JavaScript has a number of problems that make it ... less than desirable for building large or complex systems (in particular, being weakly-typed is a source of headaches). If WebAssembly takes off, JavaScript may get replaced in a lot of systems (not necessarily or exclusively by C#). Here's hoping. Unless and until that happens, though, JavaScript is going to stick around on the front-end of web apps and Node.js probably means it will maintain some back-end presence in systems where the value of a monoglot development environment outweighs the language's shortcomings. If WebAssembly *does* take off, monoglot dev environments become more practical, at least above the database. Speaking of: you also ought to plan on getting familiar with SQL: relational database systems aren't going away, and SQL is the primary language used for interacting with them. Even you do all or most of your dealings through an ORM like Entity Framework or NHibernate, you should know enough about the underlying DB to have a mental model of what's going on under the hood of your fancy ORM. (I would worry less about learning any particular DB's procedural language. Since they're all at least somewhat proprietary, pick up enough of whichever the DB you're using happens to use and roll with that until the next project uses a different DB.)
.... And?
Braindumps then. You can still learn a lot, by double checking the answers yourself researching each question. But at least you'll know exactly what questions will be asked, as opposed to having to memorize a 900 page book.
Please do the unit test video. I would love to see it. 
I would personally recommend SonarCube. It's not easily set up (as it's a locally hosted web app that requires a local DB back end) but it'll do C# for free and works great when continuous integration is important. I've used it with really good results. You can even try their hosted version on their site to see if it's a good fit for you. Best of luck!
Just first. thats the whole point of the First() function: Return the first item that matches this expression. EDIT: Also, I'm not 100% becuase I've done no tests, but it seems like First() would be more efficient. .Where() goes through the entire list and filters out the items that match the expression, then takes the first result. .First() goes through the list until it find one that matches, then it should immediately return that one, so you shouldn't be iterating over extra elements.
I believe EF optimizes it so they both do a `select top 1`
Maybe I'm just wrong entirely: http://stackoverflow.com/questions/8663897/why-is-linq-wherepredicate-first-faster-than-firstpredicate
They are both functionally equivalent because .Where utilizes a yield return for the iterator. First only evaluates the first result returned from that iterator, thus the .Where stops after the first match is found.
I prefer the second one: you want the first item that matches the predicate, as oppose to getting matching elements and then taking the first one. The first one lets you switch to the query syntax easier, so it's better if you like your code to be more SQLish.
I use FirstOrDefault much more that First; its a bit mode code, but so much easier to find the problem when the sequence is empty. Sometimes I use the second, but I usually end up with a select so I go back to the where. list.Where(myObj =&gt; myObj.x == x) .Select(myObje.OtherProperty) .FirstOrDefault() Linq is fairly well optimized, so clarity/readability of code is the main thing to consider. 
Use First if in proper working operation the value must be in the collection. FirstOrDefault if the condition can be false.
You are missing a "/s" I once worked with a fellow who would waste hours blindly following Resharper's suggestions. He would cause code churn for no reason at all.
I wasn't being entirely serious. But you're right - it does suggest some things that I wouldn't think of otherwise, which cause that "oh, yeaaah" moment.
Javascripts era might seem like it's here but it's actually just like a red giant star in the end of its life. Javascript is a very poor language in all objective measure. It is however a ubiquitous language target. This means it will be treated similar to assembly that higher level work compiles to it. Already we're seeing this with type script, c# to javascript transpilers, dart, clojurescript and in some ways React. High level languages will always win out over low level in macro. 
&gt;The second one is slightly more efficient, since only one enumerator is created instead of two. Not necessarily. [`Where()`](https://referencesource.microsoft.com/#System.Core/System/Linq/Enumerable.cs,e73922753675387a,references) has a bunch of internal optimizations for common enumerable types, while [`First(predicate)`](https://referencesource.microsoft.com/#System.Core/System/Linq/Enumerable.cs,bfa632d2645eb8d5,references) is just a naive `foreach`. 
I'd pick the second. In fact, I would likely go with `FirstOrDefault(x =&gt; x == y)`unless I'm absolutely 100% certain that there will be a match in the list.
I so a post somewhere that oddly showed where first being faster than just first. I was bit surprised as I've always used first on its own and edited other Devs works when I came across it. I will try find it 
.First(x=&gt;x==y)
hmmm, generally these are converted from LINQ-&gt; SQL so I imagine it wouldnt make a difference. also for those who are interested in performance comparisons: https://dotnetfiddle.net/k11nX6
Ye, it worked, thanks a lot to you guys! :)
Yes you could. For system data I don't bother because it is a critical failure i.e. the database or data model failed in a way that should never happen.
Actually, it seems that [Where\(\).First\(\) *might be* faster](http://stackoverflow.com/questions/8663897/why-is-linq-wherepredicate-first-faster-than-firstpredicate).
Performance is often not the most important thing. If it were, you'd not use LINQ to begin with. 
Whenever `yield return` comes into play, expression trees don't, in this case. 
- read the lines of the file - create the two arrays with the right size - loop through the lines - split the individual lines by the space or comma or whatever (you should know how to from your previous question) - add the split results to the arrays
I got most of that, however it is outputting my results as (Collection) in the Windows Form
I prefer the second just because it's more concise. I don't like to have all that extra text for seemingly no reason.
Yeah it was kinda bad explained. I want a good tutorial that shows the best ways to use dependency injection and work with interfaces, so i can write reusable code that works on different platforms without changing too much about the code.
This is a pretty good start... https://www.codeaddiction.net/articles/10/dependency-injection-in-c---a-simple-introduction
Why not? The lazy evaluation is faster than most alternatives.
LINQ uses lazy evaluation, so .Where() will not iterate over all elements unless you actually iterate over all elements of the returned Enumerable. If you call .First() you only use the first element and the discard the enumerable, hence no overhead.
Just .First(). This is the practice recommended by ReSharper, and they haven't lead me astray yet. It's also one less method call.
I have not tried this yet but came across it and almost shit myself, I've spent the last year or so on a compiler for my language called XAMLSharp that is similar to this in a lot of ways. This looks far more safe for general usage than mine at first glance. XAMLSharp is very cool in my opinion, but my compiler/parser/lexer design skills are not yet up to par to release it yet. Its also very abuseable, as it has meta-mixins, templates, generative tree structures, global variables and basic logic flow, language-oriented compile time extensions, #imports() and other compiler directives. Any interest in languages like this? I have a burning hatred for XAML, Id love to have a flexible replacement for it.
Run in release mode, then in your project folder -&gt; bin -&gt; release. There should be an executable in there you can run, just zip up the folder and stick on a pen
The following steps will produce an executable for you. * In the ribbon bar of visual studio you should see a combo box that says either release or debug. Switch it to Release if it isn't already. * Click the dropdown menu Build and click Build Solution. * Navigate to your projects folder the default is in My Documents/Visual Studio 2015/Projects. Click into Projects, click your project. * Click the folder named as your project (Likely the same name as the last folder you opened). * Click Bin and then Release. Inside this folder is your fully compiled application. The executable that does not have VSHost in it is your actual executable file. Copy the contents of that folder into a new folder and place it where ever. Make a shortcut to your EXE file and bobs your uncle. That's the cheaty way to do things without messing with installers. edit- If you are looking to run this application remotely I recommend placing it on a shared server if possible. From there you can create as many shortcuts to the application as you want with a valid filepath from any computer that can access that server. That is currently how I deploy my applications at work.
You can get lazy evaluation without using Linq.
While the previous posts have a point about a basic install and run. If you application uses libraries that are not on the machine you are going to install, then you might want a "Setup Project" This type of project is not included with the default installation of VS 2015. Here is some info on Setup Projects: https://msdn.microsoft.com/en-us/library/19x10e5c(v=vs.100).aspx But yea, if it's simple than copy the "Release" folder and try running that like others mentioned.
True. I've been using the ?. operator a bit, but I hadn't even thought about using it for linq. 
If you're dealing with text, you can read from that stream using any TextReader (such as [StreamReader](https://msdn.microsoft.com/en-us/library/yhfzs7at\(v=vs.110\).aspx)). Or you can access the raw bytes within if you want. Btw, the explicit "Close()" invocation at the end of your using statement is superfluous. At the end of that 'using' scope, Dispose will be invoked and that internally will close the stream. No harm in keeping it, but it's not needed.
It may be incorrect, but I read the "filter" type methods like First(Predicate) as "First where", so that's another way to think about it. I think that's even clearer with yours when you compare something like "where x==y take first" to "first where x==y". 
Seconded. I don't believe it provides class/module diagrams but it awesome for finding bugs, some vulnerabilities, code smells, duplications and recommending best practice syntax.
Apply the matrix for the ship and then the matrix for the port relative to the ship. This will give you the final location of the port. Can't remember the order but will be something like ship.translation * ship.rotation * ship.scale * port.translation * port.rotation * port.scale.
The primitive types have defaults, and for classes it will be null.
There is only one version.
[removed]
Removed: Rule 3, Rule 4. Either include the code you have that's incorrectly working, or maybe give it a shot on a more appropriate subreddit.
Removed: Rule 3.
Excellent answer: http://stackoverflow.com/questions/3293752/where-and-how-is-the-term-used-wrapper-in-programming-what-does-it-help-to-do
A wrapper is a class or function whose main purpose is to just forward calls to another class or function. The point of a wrapper is so you can use a different interface to access something. There are a couple big reasons to have a wrapper. One use is to simplify the interface. The functions that are part of the Windows API that operate on files, for example, require you to manually check an error code if something goes wrong. The `File` class wraps those functions and checks the error code for you, converting it into an exception. The Windows API functions also have a lot of optional parameters, but, since they were written in C, which doesn't have function overloading, you have to manually put in null or some default value for all of the optional arguments every time. Since C# supports overloading, the wrapper provides overloads so you don't have to specify the optional arguments. Another thing you'd use a wrapper for is if you want to access an object through an interface that the class doesn't implement. You can write a wrapper class that implements the interface and calls methods on the real object that do whatever operations. For example, Google Drive, Dropbox, and Microsoft OneDrive all have different APIs. If you're writing a program and want to be able to access files from any of them, you'd probably want to write wrappers that all implement the same interface so that you don't have to write all your file access functions three times. There's plenty of other reasons to use a wrapper, but the basic idea is that you're exposing an interface that you want to access something that has a different interface. 
[removed]
We're a dying breed. Probably better to just embrace var at this point even if it destroys a little bit of your soul.
If you can take a look at: https://www.nuget.org/packages/Scryber It makes authoring PDF documents very easy using XML markup.
[removed]
Removed: Rule 3, Spam.
So you are new to programming, not just c# since all of your questions are general programming questions not specifically related to c#. Why not take a programming class? Or watch youtube video even? There must be a million answers to your questions already available on the interwebs.
haha, yeah, strange clash of notation. Reminds me of the "goes to" operator: int c = 10; while(c --&gt; 0) // while c goes to zero { Console.WriteLine(c); } It's not a new operator, just an abuse of whitespace with the unary minus operator.
What's the difference of the Debug and Release when building the solution? I always run Debug and I run the executables in there. edit: Nevermind, I'm capable of googling. "The most important thing is that in Debug mode there are no optimizations, while in Release mode there are optimizations. This is important because the compiler is very advanced and can do some pretty tricky low-level improving of your code. As a result some lines of your code might get left without any instructions at all, or some might get all mixed up. Step-by-step debugging would be impossible. Also, local variables are often optimized in mysterious ways, so Watches and QuickWatches often don't work because the variable is "optimized away". And there are multitudes of other optimizations too. Try debugging optimized .NET code sometime and you'll see. Another key difference is that because of this the default Release settings don't bother with generating extensive debug symbol information. That's the .PDB file you might have noticed and it allows the debugger to figure out which assembly instructions corresspond to which line of code, etc." http://stackoverflow.com/questions/367884/what-is-the-difference-between-debug-and-release-in-visual-studio edit2: More about the performance optimizations: http://stackoverflow.com/questions/4043821/performance-differences-between-debug-and-release-builds
Very cool!
Good explanation and I think you're correct. 
Linq isn't always used for SQL. 
You replied to yourself. You might want to make sure you reply to a reply so it's clear who you're responding to. Looking at all other posts I have no idea who you're trying to respond to.
When the type is not obvious from the assignment. This is often the case when you assign the return value of a method to a variable. I really don't want having to use the IDE to figure out the type. It should be obvious from reading the code.
While I already knew he answer to your question it's nice to see someone who actually went and found the answer themselves. I think that may have sounded condescending, but I was meant sincerely. 
But it's a definite plus if those needs are informed and not just pulled out of one's ass while unaware of what the actual conventions are. I think it's something we've all done at some point - basically, know what the "rules" are before deciding on whether or not to break them.
Ah, no, I don't think that's correct. `val =&gt; val &lt;= 5` is a lambda expression. Greater than or equal to is `&gt;=`, not `=&gt;`.
Not really C#, but C# related. As a C#/F# dev who start playing with Rust, I will keep an eye on Stark. The author made some great projects like [SharpDX](https://github.com/sharpdx/SharpDX) or [Markdig](https://github.com/lunet-io/markdig).
I actually just rebuilt an application yesterday for the express purposes of moving completed apps out of my projects folder and to a deployment location. It uses a command prompt and xcopy to accomplish this but it works with both files and folders and keeps track of recently used filepaths to use again later.
I'm slightly ashamed... Thanks for the info, I'll try to find out more.
Filter your list of GPAs to only include those with GPA of 2.75 and higher, and calculate the average of this list of GPAs. Or is there something I'm missing?
I really like this about the language. The functional aspects and LINQ are amazing.
Could it be some sort of Partial Trust issue?
I love you dude thanks a lot &lt;3.
I understand ya. I research everything so damn much. As soon as I posted that question, I asked myself what the hell I was doing. Immediately went to google. I have written several thousands of lines of code (not much to most programmers, I know) now with no training and no books or courses. It was all just googling. That software is running the debug code though. :eep: haha I truly learn something new every single day. 
I agree that creating a list would work, it just doesn't seem very easy on performance if eventually I need to loop through an array of thousands of applicants. Hence, I am trying to figure out a formula to avoid an unnecessary loop. Agreed, but I do not want to have to create an array and loop through it everytime the player 
Wouldn't I get a security exception instead.
You can do purely functional in C#, but it's not going to be as pleasant as languages designed for FP. Just start doing those DLL's in F# instead and cut down on the boilerplate
[removed]
[removed]
You pass the `Triple` as a function argument if you really want to test the function without it.
Thank you everyone for your comments. I do appreciate it.
Use NuGet, and search for mysqldata.
Your expression is looking for 1 letter/digit followed by 0 to 6 whitespace characters. I suspect you are instead looking for (0 or more white space/special characters)(exactly 6 letter/digit characters)(0 or more white space/special characters)
Generally someone is supposed to enter a set of tags which will likely be mixed with commas or spaces. These spaces/commas are supposed to be ignored, and as a results one large string is created. The string is divided in 7 characters and then placed into an array. If I have a string of characters: &gt;ABCDEFG, HIJKLMN/OPQRSTU.VWYXZ12 Ignoring (not removing) the symbols/spaces would results in one large string &gt;ABCDEFGHIJKLMNOPQRSTUVWYXZ12 And then placed into and array as &gt;{"ABCDEFG","HIJKLMN","OPQRSTU","VWYXZ12"}; I just figured regex could be used to ignore all symbols/spaces and then split into an array for every 8 characters, instead of using the Replace() method, or SubString().
A wrapper does not always hide complexity so much as transform it. For instance, [`WrappingStream`](https://code.logos.com/blog/2009/05/wrappingstream_implementation.html) exposes the exact same complexity as `Stream`, but alters the behavior of Dispose() in order to assert stream ownership. In other cases, a wrapper can transform ([to "bridge"](https://github.com/OpenKinect/libfreenect/tree/master/OpenNI2-FreenectDriver)) an API to another of similar complexity; or it could consolidate implementations so different that their complexities cannot be compared directly. To maximize compatibility, keep interfaces brief and balance this with desire for features.
Only after you've written the tests!
A functional style tends eschew side effects, so you can probably test your functions all by themselves, anyway. If a method *does* have side-effects and you feel like its necessary to test something uses it, you could supply the side-effectful method as an argument. Just like how you inject object dependencies, only with functions.
Others have answered well, but I want to add a bit more: With libraries like [FsCheck](https://github.com/fscheck/FsCheck), functional code can be automatically tested. You simply define the domain of your function, and FsCheck will auto-generate a set of random tests each run. 
**Yeah, but don't.** Functional static methods are only static because it's a contract on the use of instance state; i.e. no mutation/access to instance state. Beggars can't be choosers -- we've at least eliminated one possible set of state mutations. 
The problem appears to be that `Split` discards what matches and returns the remainder, which is the opposite of what you want. For example: var pattern = new Regex(@"[\-\|\~]"); var results = pattern.Split("a-b|c~d"); Console.WriteLine(string.Join(", ", results)); // ==&gt; a, b, c, d This is the same behavior as the more common `Split` method on `string`. You want to use `Matches`, I think: var smartCleaner = new Regex("([A-Za-z0-9])\\w{0,6}", RegexOptions.IgnoreCase); var results = smartCleaner.Matches("DVNRT41C4W1TW1,36GPL41jfuritopdotjgylshejgikehbkio.ightnkg/kdnehtu'kgubngy gubngki@ghbntmk"); Console.WriteLine(string.Join(", ", results.Cast&lt;Match&gt;())); // ==&gt; DVNRT41, C4W1TW1, 36GPL41, jfurito, pdotjgy, lshejgi, kehbkio, ightnkg, kdnehtu, kgubngy, gubngki, ghbntmk Is this the output you were expecting? (Un–asked for advice, if so: Because you are using `RegexOptions.IgnoreCase`, there is probably no need to call `ToUpper` on the input text. And it's likely your regex string can be simplified to `@"[A-Z\d]\w{0,6}"`. It gives the same results on this one input, at least.) I hope that helps. 
It's also an incredibly stupid comment. C# will always have mutable state by default because that's a language breaking change. Absolutely everything written in it would break. They may end up allowing developers to more easily set classes or even libraries to be immutable, but making that change creates a whole new language, which they've already done. C# is heavily influenced by functional paradigms, to it's substantial betterment, and you have tools to use even more functional style, but it's never going to be pure by default.
I stress oout so much and resorted to Enumerable .Substring See below: public void ShowTagRequestDialogBox() { TagRequestDialog trDialog = new TagRequestDialog(); // Regex remove symbols if (trDialog.ShowDialog() != DialogResult.OK) { SmartCleaner(trDialog.txbCleanServiceTags.Text); // create list for every substring foreach (string li in cleanServiceTags) { MessageBox.Show(li); } } trDialog.Dispose(); // Dispose of second form } private string dirtyServiceTags; private List&lt;string&gt; cleanServiceTags; public List&lt;string&gt; SmartCleaner(string serviceTagString) { Regex symCleaner = new Regex("\\W+?", RegexOptions.IgnoreCase); dirtyServiceTags = symCleaner.Replace(serviceTagString, ""); // symbols removed, but not substrings cleanServiceTags = Enumerable // Enumerated string into substrings .Range(0, dirtyServiceTags.Length / 7) // Range of 7 chars .Select(t =&gt; dirtyServiceTags.Substring(t * 7, 7)) // substring every 7 chars .ToList(); return cleanServiceTags; }
Of course, using UWP locks you into Windows 10. You could just as easily learn WPF (which also uses XAML) which works on Windows XP, Vista, 7, 8, 8.1, and 10.
[removed]
- First thing I notice: No documentation. Document your code! In my opinion an undocumented library is worthless. I'd never use undocumented libraries in production code - I value my time too much. - Second **huge** issue: You're using the async API, but you're using not thread-safe collections and you access shared resources without locking. This is doomed to result in racing conditions. - Stuff like `DateIdentifiier` makes the code **very hard** to unit test. You have a static shared mutable resource, that's commonly very bad. You couldn't run two unit tests at once that would both access this. - The property in `DateIdentifier` always returns a new value. This is an anti-pattern. Two subsequent calls to the same property should return the same value. Use a method instead. Same thing with `Pipelines&lt;TInput, TOutput&gt;.Handlers`. Also read https://ericlippert.com/2014/05/19/when-should-i-write-a-property/. - Do not use `Task.Factory.StartNew`. Instead use `Task.Run` if you really need it. Also read http://blog.stephencleary.com/2013/08/startnew-is-dangerous.html. - Avoid mutable public properties. This makes the code harder to reason about. One example I see here is in the `RpcCaller&lt;TInterface&gt;` class. Your `RpcClient` property is public and mutable. I can set it, so what happens if I set it to `null`? Latest in the `Dispose` method it would crash horribly because of a `NullReferenceException`. - If the API is already async, why not make the `Pipelines` async too? Have `Func&lt;TInput, Task&lt;TOutput&gt;&gt;` instead. - Remove code that is commented out. You have a lot of `Console.WriteLine` commented out across your code. Just remove it. Also look up to use tracing points instead of writelines to debug your code. - When calling `First()` be absolutely sure you always always have at least one element. If not, use `FirstOrDefault` and throw a descriptive error instead. At a side note: Something like this is awful to debug: `binder.GetType().GetTypeInfo().GetConstructors().First().GetParameters().First().ParameterType` - Do not have nested public classes. Common best practices is to have one type per file. `Error.JsonRpcErrorCode` is a public nested class. If it's public, it means it's used outside of this class, so it's warranted to be in the namespace directly. If it's not used outside make it private. - Sometimes you access private members with `this`, sometimes not. Stick to one. - Consider splitting up the serializing protocol (JSON) into an own project and make it configurable. Then you're more flexible in the future on how to transport your stuff. ProtoBuf for example is a lot faster than JSON.NET, and if speed matters that might be very important. That was just a very brief look through the code.
Yet another article with graphs without units of measurement. 
So you'd recommend LINQ for performance intense operations?
Absolutely not. LINQ has a noticeable overhead. In hot paths (profile!) LINQ is not a good option.
Too bad that they didn't include Firebird 2.5 or 3.0. We used it with great success in our products and allows simple xcopy deployment.
Oh, I don't remember what he said, I just made a joke.
So *that's* why my program ran 100 times faster when I made Sqlite re-use an existing connection between inserts.
[removed]
You mean transaction? I got best performance out of SQLite using a single transaction and committing at the end. Also, increasing the page size for when you need to load a db with a ton of inserts.
X-Post referenced from [/r/dotnet](http://np.reddit.com/r/dotnet) by /u/Veranova [EntryPoint 1.0.0 released. Composable CLI Argument Parser built on .Net Standard](http://np.reddit.com/r/dotnet/comments/5paaql/entrypoint_100_released_composable_cli_argument/) ***** ^^I ^^am ^^a ^^bot. ^^I ^^delete ^^my ^^negative ^^comments. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
This wording irritates me. Most variables in c# are in fact immutable. Ints/strings/structs/decimals . Yes, all classes are mutable.... But if you don't want mutable classes.... Just start using structs. 
Generally.... With basic arithmetic... Performance is not an issue until you are talking about 100,000+ lists. A couple 1000 items is not worth spending more than 5 minutes thinking about. I'll be nice and give you the answer, however, if you want to be a massive overachiever.... https://www.google.com/amp/s/assessingpsyche.wordpress.com/2014/06/04/using-the-truncated-normal-distribution/amp/
There MAY be a fancier way of doing this.... But it entirely depends on how the original plugin was written and there is simply not enough detail here to make that call. Calling one plugin from another plugin is also not a good pattern. People expect plugins to generally not have dependencies on one another. The easiest answer is to simply copy the code of the original plugin into your plugin and change it as you desire.
Read up on test driven development and start coding in that way. Use a DI framework like ninject. I feel like TDD really drives that "aha" moment as you will quickly see methods you wrote that become challenging to test without proper abstraction. Void DoSomething(myClass someClass){ Var temp = someClass.doSomething(); If(temp ==1) Return true; Return false; } Vs Void DoSomething(IMyclass someClass){ Var temp = someClass.doSomething(); If(temp ==1) Return true; Return false; } You will find that with the former that mocking your class will not work without making changes to the class. With the latter... Mocking and unit testing is easy. 
At least the actual numbers with the units are right under the graphs
Which issues exactly have you run into? Only real issues I've run into with Xamarin forms has been stuff native to the Android SDK and such. Xamarin itself I found to be easy peasy. That said, there are some alternatives, but xamarin will probably hurt the least in the long run ;)
The raw numbers are right under each chart. The measurements are in milliseconds taken for the entire batch of operations to complete.
Just a guess, but I'm betting it's faster because it does less. The more enterprise solutions offer a lot of features that SQLite does not, and by offering those features they have to deal with them in code even if you are not using them. So an insert has to run through a bunch of data validation routines that verify relationships even if you aren't using relationships. SQLite just stores the data.
I just tried this and it opens SharePoint. It might work if I set my local browser to open files in browser, but I don't want to push our a group policy update to all users and change their settings. Thanks for your help on this! I don't know reddit rules... Is it bad if I resubmit this to see if anyone else has a fix?
Wow thank you!
[removed]
I am a new developer, fresh outer college and I already know C# and spend most of my time doing desktop and mobile development in .NET. My question is would ASP.NET core be a good first step into the web space and if so, where would I get the best start?
I'm not sure if you are trying to detect keypresses, or emulate them
Removed: Rule 1. You might want to check out /r/programmingbuddies, /r/learnprogramming, and /r/Unity3D.
That's a lot of assumptions about the OP you are making there ... Xamarin (even though it's a great platform) can be quite a pain to setup / configure correctly (with all its moving parts).
When you hold a physical key, a key down event actually gets sent periodically. So, you have to find out what the typematic rate is set to and send a key down that often. 
You could use HTML 5 and a framework such as bootstrap 3+, and essentially launch your app from a browser frame. Depending on your app, this could suit your needs. If your app relies on built in mobile features such as location services, camera, etc, then it will be inadequate. I'd recommend a site such as Pluralsight and watch someone else set up a xamarin form if you're having trouble. There are no bad students, only bad teachers. If you're struggling, it's likely you haven't found the proper resources for learning. 
even with mouse click and drag ?
That may be true, but Xamarin forms still sucks. And yeah, getting it setup is a giant headache. It was designed to be for toys. The original name was Xamarin Duplo. Quote from the CEO "Before release, we had internally called Xamarin.Forms 'duplo', to emphasize that it was for childishly-simple apps and screens, but we couldn't use that (trademarked) name for the release, unfortunately." 
I understand the distinction you are trying to make. I may need to read up more. Unless you try to do something silly like pass structs around by reference I can't imagine what advantage you would get in a concurrent system by being so purist. Though, I guess I'm not considering the "if you give someone the capability to do something dumb, eventually they will" factor.
I did, its: Regex symCleaner = new Regex("\\W+?", RegexOptions.IgnoreCase); dirtyServiceTags = symCleaner.Replace(serviceTagString, ""); 
Very familiar with mvvm, xaml and WPF. Have been using it for the last few years. What you call alien to me is technology that is intuitive and makes sense to me. My gripe with xamarin forms is the amount of work it takes to get it setup and running. Once I can actually start working on a project I won't have an issue.
You might try launching excel from the command line and passing in the modified sharepoint link. There is some information on this [here](https://support.office.com/en-us/article/Command-line-switches-for-Excel-c6f24136-e80c-4de9-a0ca-d5c68792cc6f). Specifically it looks like you could probably do something like: excel.exe /r http://sharepoint.mycompany.com/sites/IT/Example/Documents/SomeExcelFile.xlsx You might need to fully qualify the path to excel like: "C:\Program Files (x86)\Microsoft Office\Office15\excel.exe" /r http://sharepoint.mycompany.com/sites/IT/Example/Documents/SomeExcelFile.xlsx
Can you give an example? I can't think of any where I'd pick Winforms over WPF.
Basically, it's a multi-threaded data logger written with EntityFramework 7 + Sqlite. It would write a few records to the DB on a set interval (typically once per second). Initially, the poll routine would be Open Connection -&gt; Create Context -&gt; Append -&gt; Close Context -&gt; Close Connection. I later changed it so that each thread had its own connection, which persisted for the life of the thread and was re-used between contexts. It made a huge difference in max throughput. I couldn't leave the context open for the life of the thread because it would leak like a sieve (all inserted records would accumulate in RAM and never get cleared).
Thanks for this. I am fairly new to the dev space and never knew the difference between these options. Will definitely use them more discriminately next time. 
AFAIK, there are no ASP.NET tuples. There are Tuple types in .Net since 4.0, which are indeed different from the new C# tuples (which use new ValueTuple types).
http://superuser.com/questions/388160/keyboard-repeat-rate-repeat-delay-values-in-win7
React native looks nice, but I haven't used it much
One of the big reasons is ease of unit testing. Jamming all your business logic into the code-behind of the UI means essentially nothing can be unit tested or re-used because it's tightly bound to a WinForms UI. Without automated unit tests you have to waste a bunch of time manually testing your app through the GUI to see if everything works. In larger and more complex apps, it's common to use architecture patterns such as [MVC](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller), [MVP](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter), and [MVVM](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel) to separate the application into different layers to make it easier to re-use code and test everything. This usually results in there being little to no logic at all in the code-behind of the UI (it just presents data to the user and delegates input events to another class). In MVVM, your `CameraClass` is the view-model: it delegates calls from the UI to the model (`Camera`) and reformats the results from the model into something that's presentable to the user. It's also independent from the UI and is unit testable. --- Another tip is to create a different `UserControl` for each device type instead of putting all of them into the same `Form`.
I've been wondering about the effects of using a single context for the entire life of a program. For my project, I didn't notice any memory leaks when it was using EF6, before I moved it to EFCore. I should do some investigating.
**Yes.** I deployed the iTextSharp dll. **The AddCell method is included in the PdfPTable Class. Other methods in the class don't throw any errors.**This was me trying to explain how I know I deployed it because I am already using other methods from the same class. // These lines are fine PdfPTable myTable = new PdfPTable(2); PdfPCell myCell = new PdfPCell(new Chunk("text")); // Here is the error line myTable.AddCell(myCell); myTable.AddCell(myCell); Regardless, I ended up just merging dlls and got it to work. FYI: You come across as super condescending.
Try having Crystal 7, Crystal 9, and Crystal for .Net all in production. It'll be the only thing you bring up when you talk about terrible software to support
I don't see the code. I'm on mobile though. 
I really would like to have this as a feature in the language and there have been many times that I've wanted it when I wanted to clone and alter readonly value objects or any object, really.
Needs more screenshot 
In Base64.cs using System; and later System.Convert.ToXY(); As you have imported System you can (and vs will probably ask you to) write Convert.ToXY();
I develop on OS X with Xamarin Studio (I think they've renamed to VS for Mac?). In my experience it was much easier to set up. Alternatively try deploying to a device. I never had much luck with the Android emulator on either windows or OS X.
No wonder it doesn't loop - you don't have a loop around the parts you want to repeat. I'd say a while on L13 is a good idea. Also the `return` in L30 will instantly terminate your program, because it works on `Main()` and not the other stuff like loops. For control keywords specifically related to loops, check out `break` and `continue`. On another note, I'd recommend splitting that prime checking into a different class - if it does something different, it's usually a good idea.
There actually are multiple problems with your code. 1. The return in your for-loop doent exit your loop but your current function. In this case that means your Main-method. So if you reach your return yozr program will terminate. To end a loop use break. 2. You are missing a loop that keeps your code running. Usually this achieved using a while-loop. Either use while(true) for an infinite loop or use while with a termination-condition. I would write this code something like this: class Program{ Public static Main(string[] args){ string message="Enter a number. 0 cancels the loop"; int testnumber; Console.WriteLine(message); testnumber=Convert.ToInt32(Console.ReadLine()); while(testnumber!=0){ If(testnumber==1){ Console.WriteLine(testnumber+" is not a prime"); }else { bool isPrime=true; for(int i=2;n&lt;testnumber;i++) { if(testnumber%i==0) { isPrime=true; break; } } if(isPrime) Console.WriteLine(testnumber+" is a prime"); else Console.WriteLine(testnumber+" is not a prime"); } Console.WriteLine(message); testnumber=Convert.ToInt32(Console.ReadLine()); } } } I cant test the code currently because im using a phone. If it doesnt work and you cant figure out why, let me know. 
Correct me if I am wrong but I couldn't seem to work out from your description when you want the program to continue running and when you want it to terminate. If you update your description I'd be happy to help. FYI it'd be better if you posted example code as text rather than a screenshot. You can directly embed it in your post or use a website such as HasteBin/PasteBin.
I used it in my last place, but there code was a shit show.
That is what nightmares are made of.
So at the if/else/return shall I just don't do the else/return in this case?
For those looking for it, here's the screenshot: http://imgur.com/a/fJgBu OP poorly formatted the link making it a blank link, only showing up in RES.
Updated with links to HasteBin.
Wonderful idea! I had no idea. Does this work with C++ as well? 
I'll update to reflect. Thank so for the help.
No problemo! Hope you get it sorted.
https://hastebin.com/kiqevogeye.cs Gave this a shot, doesn't work. It returns "every number is a prime.". But, it does loop though. :D