for (int bark = 0; bark &lt; 5; bark++) { fido.bark("Fido")}; You didn't do anything in your while loop other than incrementing an int
Put the method calls located in the main method inside loops is what I believe he is saying. The way you have it the code while loop is run through but doesn't do anything besides increase barking to 4. So something along the lines of class Program{ static void Main (string[] args){ Dog fido = new Dog(); int barking =0; while (barking&lt;5){ fido.bark("Fido"); barking++; } etc...... } } Sorry for formatting,on my phone ;p 
If its a database, you also need a database.
My point is, code *is*, in a way, instructions for a computer. Just not always the computer it runs on, but sometimes various virtual computers. But the CPU doesn’t run that directly, so it’s not useful for bootstrap code, for example. 
Alright, that helped, I got it now, thanks.
You need to define some 'ground rules', though, for what is a valid parameter value and what is not a valid parameter. I bet most command line applications would choke on a string parameter like the above: `"Quote in " the middle of a string"`. Add a comma in there as well, and the parser has absolutely no chance to safely decide where one parameter starts and another ends. And that's why there is escaping. If you need a `"` withing a quoted string, it should be escaped. 
Dont forget javashit I meant script.
Okay, that makes sense. It executes now, but now the dog barks six times. When the loop was in the bark method, the same code would make him bark five times.
Okay, that makes sense now.
No.
I'd guess it's not a big focus to them. Personally I wrote all XAML by hand when I worked on WPF and UWP apps and never used the visual designer, nor did I use the previews.
Do the actual scraping in python. 
main() is really the first thing that will run so the top of that should work.
Yeah lol I finally did that and it worked, it seems obvious, I either didn't try it there before or I did but messed something up. I have the bark finished, now I need to do the run. I have this so far: for ( int running = 0; running &lt;= 9; fido.run("Fido") ++running ) But I'm getting three errors. Syntax error ',' expected for ++running The operand of an increment or decrement operator must be a variable, property or indexer for fido.run Only assignment, call, increment, decrement, await, and new object expressions can be used as a statement
Jesus. Ok.
The F stands for fun!
MVC isn't really a framework per-se, but rather a design pattern helping you structure things. Trust me, it's worth learning. You'll appreciate it if you ever bump into a project that's eight years old, has no documentation, and hasn't followed any sort of design guidelines/patterns whatsoever.
I can't disagree with that!
Having just jumped straight into a project like that, that's written in Java to boot, I'm really overwhelmed. Strangely excited about fixing this tangled mess of a program, too.
Rewrite it in Rust ! - ^(^/s)
Because it wouldnt be cross platform then. Xaml is totally windows only and one of the main reasons wpf stays windows only
I still don't understand the difference between .NETCore and .NETFramework. All I know is that Core doesn't have references and instead it has dependencies which I have no idea how to use. &amp;#x200B;
`for(int running = 0; running &lt;= 9; running++) {` `fido.run("Fido")` `}`
That's what I got as well. All done, thank you so much for the help! I feel like I understand the concept much more now.
https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-mvc-app/?view=aspnetcore-2.2 This is a movie database tutorial example, but you can get an idea on how to translate it to make a hospital database
Im more interested in 5x. How did you come up with that ?
XAML is in no way windows only lol. Xamarin.Forms, Avalonia, etc all use XAML (or at least a flavor of it) as well. You can compile Xamarin.Forms XAML on linux just fine.
 So you want someone to write an entire app until it can't scale anymore, and then rewrite it when he sees that it won't. That logic doesn't make sense.
this but a single page application. angular being easiest to get up and running for people with .net backgrounds.
I always use [JSON.NET](https://www.newtonsoft.com/json)
It displays 5 times when I run it, not sure why it's printing 6 times for you. Did you remove the bark that was at the top of the main method?
I ended up realizing that's what it was, still new to this haha
The performance is usually pretty similar. My company's codebase is probably 99% C#, the other 1% is C++ and assembly. The C++/assembly is for those few functions that require more intense optimization. Most of that optimization comes from assembly coding, the C++ just gives us an easy means to write/wrap the assembly code. We really don't touch that code too often. These are real-time image processing applications.
System.Xaml is windows only.
I agree.
Modify your JSON format to be consistent. That is, make the value of each System Type key be an object instead of sometimes being an array. Also, when there are zero Roles, use an empty array instead of nothing, and when there is one Role, use a length-one array instead of just a string. So your sample JSON should look like this: https://pastebin.com/raw/EZRiarvk Then you can deserialize using var jobs = JsonConvert.DeserializeObject&lt;Dictionary&lt;string, Dictionary&lt;string, Dictionary&lt;string, string[]&gt;&gt;&gt;&gt;(text) And serialize using JsonConvert.SerializeObject(jobs)
The typical pattern would be to use a JSON file as persistence, but standard POCOs at runtime. So you might: &amp;#x200B; 1. Load JSON file and deserialize into class instances 2. Modify values 3. Reserialize your instances into JSON, Write JSON back to file (when appropriate, not necessarily after every modification) &amp;#x200B; Obviously, this requires creating C# classes that represent your JSON - which is really the only sane way to do it in my opinion. &amp;#x200B; While you *can* just use something like Json.NET's JObject and modify values directly on that, it's very fragile/error prone IMO.
Visual studio will let you copy json and special paste it to build the classes that represent the structure.
Go on... 
I came to give an answer and got a better one
Depends what you want from the web app. You can get pretty far with bootstrap and the cshtml generation functions if youre only using the app for learning purposes.
System.Xaml also exists in Mono (and therefore Xamarin.Forms), but not in .NET Standard or .NET Core. 
Edit -&gt; Paste Special -&gt; Paste JSON as Classes
If I remember correctly, there is a controls property on the form, you could loop through that recursively to get all the controller that matter to you and get their text.
For me, it comes down to what you want to do with it - if you just want to iterate, I fall back to IEnumerable to ensure that nothing is added/removed from it. Can also use an IImutableList in the case. IEnumerable also allows for lazy losing. List is highly performant though and allows for changing that particular collection. 
Depends on the size and usage of the collection. If it is a large collection you should return an IEnumerable backed by the list. If it is small and they need to mutate it return an ICollection backed by a new List. 
General practice is to code to the least-specific interface necessary. This gives you the freedom to change the implementation without breaking the callers, and gives you more freedom to implement the same method in different ways if you have different classes implementing it (via interfaces or inheritance). The more public the method is, the more you want to stick to generic interfaces. `private` method? Use the concrete type and don't bother with an interface, because you can just change it without breaking anything outside your immediate code anyways. `internal`? Feel free to use the concrete type if you want, since the impact of changing the implementation remains in your own code. `protected` and `public` methods used outside your own code base should adhere to the "least-specific interface" principle. All that said, there are plenty of exceptions and what's "necessary" is sometimes subjective. If your callers are only ever going to `foreach` the results, then `IEnumerable&lt;T&gt;` is appropriate. If your callers are almost always going to count the members, then `List&lt;T&gt;` or `ICollection&lt;T&gt;` may be appropriate. If your callers are always going to just ".ToList()" it anyways, then return the List. *However*, you have to keep in mind that a `List&lt;T&gt;` is not thread safe and is mutable. Never return a `List&lt;T&gt;` that you're also keeping hold of and manipulating asynchronously.
what? I'm high as shit and so much is wrong with how you worded that, but it's cool. I coded a server that yield returns each request it receives connection and request text to next part of the program. For me I Prefer doing IEnumerable&lt;x&gt; as it opens up x to use the query syntax of linq.. And i'm pretty sure C# will throw a error if your enumerating a enumerable and modify the list in some way, so a foreach should work as intended.. 
What are you doing with it? If you just need it for foreach, IEnumerable is fine. If you need to add/remove elements, or you care aboue size, you need ICollection. If you care about the order of the elements you need IList.
Depends on the method. A method called GetEmployees doesn't imply to me that the result is modifiable or that it's in a particular order, so IEnumerable would be appropriate
well say for instance you used current netcore which only exposes a very limited set of simd instructions against a c++ program that leverages avx512, difference likely bigger than 5x there. two of the benchmarkgame problems are in the 3-4x range delta currently (those run on a relatively old cpu, no avx512 or even 2 i think) big differences could also arise with long running programs with memory constraints
imagine getting high to shitpost on /r/csharp lol go watch some 80s music videos and laugh your ass off like I did when i was a teen and smoked the ganja
Why do you astroturf your own blog? just be like "hey i made this blog about asynchronous programming" instead of "check out this blog that I totally didnt write" 
*Loading Unless there actually is something called lazy losing?
What did they say?
Sorry if this caused any confusion. In future I will be more explicit about the author that it was not my intention to mislead that I didn't wrote it. I just started using Reddit so may be a rookie mistake.
Bazinga. Not only is this answer the correct answer, it is super correct.
I'll almost always return using the IReadOnlyList&lt;T&gt; generic interface. This indicates to the caller that the list is in memory (safe to iterate multiple times) and that it's not intended to have items added or removed from it. Bonus parts are that both lists and arrays implement it already so no special casting or setup is required. It also conveys more information than just IEnumerable&lt;T&gt;. When I get a IEnumerable&lt;T&gt; I don't know what is behind it. If I iterate it more than once does it hit a database or web service each time or is it cached? IReadOnlyList&lt;T&gt; helps communicate that. 
Always found the word bellwether funny. I dunno why
Good catch! Typing on the phone is hard -_-
Super correct is the best kind of correct.
Legitimate question: is there a reason you would `List&lt;T&gt;` over `IList&lt;T&gt;`?
It happens to the bust of us
When ASP.Net core was released Microsoft recommended using the concerte type over the interface when iterating it in a razor view due to the overhead of the virtual calls. I believe they have fixed that in newer versions of the runtime being able to inline the calls without the virtual lookup. 
Its faster in use; however it ties you in to a specific implementation (i.e. its a breaking change to more from `List&lt;T&gt;` to something else; whereas `IList&lt;T&gt;` only determines the behaviour not the implementation)
Only if it’s a Turing complete language 
Is your function called CreateList? If it is you probably want to return a list. In which case probably return IList.
I like to IEnumerable typically because the caller can always enumerate it once into a List if they need to access it more than once. It gives options.
I always write my methods to take IEnumerable in and return IReadOnlyList out. 
&gt;If I iterate it more than once does it hit a database or web service each time or is it cached Just save it to a list on your side if you need to iterate more than once..? Like: var myList = new List(myEnumerable);
why does the IEnumerable need to be backed by a list? Seems unnecessary memory allocations in some cases.
What would you say is the advantage of returning IEnumerable over IReadOnlyList? 
Raiders of the lost Art.
Generally speaking, you should always strive to use abstractions (preferably the least-specific abstraction necessary) over implementation as stated on the [dependency inversion principle](https://stackify.com/dependency-inversion-principle/). Basically you do this to avoid having a dependency on implementation classes which are prone to change and have it instead on the abstractions which do don't change as often. Now that we have that clear out, another thing to take into account (more specifically for the .net framework) is determining which collection abstraction to use. When talking about a list, I usually take the following approach: 1. [IEnumerable&lt;&gt;](https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerable-1?view=netcore-2.2) when I am sure the data main purpose is to be read and iterated. IEnumerable provides a simpler API definition and imposes this limitation to your method callers that when used correctly adds extra consistency. 2. [ICollection&lt;T&gt;](https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.icollection-1?view=netcore-2.2) when besides the usages of the IEnumerable, I need the collection to be editable by adding new elements. It also provides a much richer overall API 3. [IList&lt;&gt;](https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ilist-1?view=netcore-2.2) when either I wan't to limit the collection implementation to be lists (as opposed to dictionaries, queues, etc) or I need list-specific behavior that I wouldn't have otherwise.
I find this practice to really only be useful when writing code that others will be consuming. If you have complete control over the codebase it can be more useful to do the exact opposite, i.e. return the most specific thing you can (usually a concrete type) and accept the most general thing. This tends to maximize reusability. It really depends on whether you want the caller or the callee to have more flexibility. If writing library code, however, I would generally agree with your approach.
lol &amp;#x200B;
I would avoid returning `IEnumerable&lt;T&gt;` because as you alluded to it does not convey whether it is safe and/or inexpensive to enumerate multiple times. I believe R# actually warns about this by default ("Possible multiple enumerations of IEnumerable" or something like that). You might consider returning at least a slightly more specific collection interface instead.
Are you too fucking regarded too google it?
Counter point, yield constructs are lovely in many situations to allow for lazy enumeration.
Ability to use yield generators and not tying yourself to an implementation. If I want to be more specific in implementations I'll return IReadOnlyCollection&lt;&gt;, but IEnumerable&lt;&gt; is always returned for interface methods and IReadOnlyCollection&lt;&gt; for methods (unless it's a generator). IEnumerable&lt;&gt; is often just more flexible since you're not tied to a specific data structure and allows for lazy enumeration.
Because if you return IReadOnlyList, the list has to be already enumerated on the callee (it basically has to return a List). At least that's my understanding. This also means you can't send over a single item at a time like you can with IEnumerable. This also means you have to allocate the entire list in memory instead of one item at a time. This is my basic understanding of it but I could be wrong.
Post has been removed: **4.Request-for-help posts should be made with effort** Make sure any code is properly formatted, explain what you have tried, and where applicable try to create a [Minimal, Complete, and Verifiable Example](http://stackoverflow.com/help/mcve). Be clear and courteous. If a question that could have been easily Googled is asked without indicating what and why those typical results didn't work, it will be removed. Help posts that have had little effort put into them will be removed at the discretion of the moderators.
Pluralsight has several courses available. The fundamentals course by Scott Allen is a good one.
Technically, we are getting it in .Net Core 3 :) [https://github.com/dotnet/wpf/tree/master/src/Microsoft.DotNet.Wpf/src/System.Xaml](https://github.com/dotnet/wpf/tree/master/src/Microsoft.DotNet.Wpf/src/System.Xaml)
I just find few cases where ICollection&lt;T&gt; won't do, but IList&lt;T&gt; will suffice over List&lt;T&gt;.
Its also quite a reasonable answer.
Because I am returning a list, to my own code and I don't need to be tricky.
Return an array T[] by calling ToArray() that way you won't have to worry about multiple enumerations or collection modified exceptions. More expensive but safer.
I use [QuickType](https://quicktype.io/) which also autogenerates Enum converters as well as Serializers and Deserializers. 
You had already called bark() once outside the loop ;)
Unless you are writing an ASP.NET controller, in which case just use whatever type your variable already is.
https://www.removeddit.com/r/csharp/comments/avycm4/returning_lists_and_such/
Started playing with Blazor and really enjoying it I'm so much more productive than grappling with a JavaScript framework. I really hope it gets to a production ready state sometime soon.
*At this time, we are not accepting new access requests for our API. Our global team of partner managers will reach out to prospective partners based on the supply opportunity your business represents, strength of your technology, and ability to support our shared customers.* - https://www.airbnb.co.uk/partner Rip
Have a look at the the Framework Design Guidelines https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/guidelines-for-collections In summary, return a Collection&lt;T&gt; or ReadOnlyCollection&lt;T&gt; depending on whether the collection can be modified. I'm going to have to disagree with the consensus of opinion that one should code to the least-specific interface. That is a fine idea for the parameters to a method, so for example, if all you want to do is enumerate over a collection then a method parameter should require an IEnumerable&lt;T&gt; not something more specific. But you should be specific in the types you return, this leaves the caller with less work to do and a clearer idea of capabilities and limitations of what its receiving. For example, an IEnumerable&lt;T&gt; can be anything from a small in memory collection to an infinite list, a caller should have some idea as to which. 
IEnumerable or ICollection won't be thread-safe if they come from a List (I wouldn't think, didn't check). If so, discussing thead safety of a List *only* is... misleading?
`IList&lt;T&gt;` let you return an array `T[]` instead of a `List&lt;T&gt;`, or you own custom implementation of the interface.
&gt; General practice is to code to the least-specific interface necessary. Yes and no. Returning an interface is likely to make the calling code less efficient, especially when iterating: the default `Enumerator` of a list is a `struct` which will be boxed if returned through the interface. My rule would be instead: - if the collection (`List&lt;T&gt;`, `Dictionary&lt;TKey, TValue&gt;`, etc.) is created in the method and not saved anywhere, then use that same type as the signature, even for public methods. - on the other hand, if the collection is owned by the instance, then either return a copy (could be expensive in some cases), or a proxy (such as `ReadOnlyCollection`). And in fact the "least-specific interface rule" should only be applied to method parameters. Method return type should in most case be the "most-specific interface or concrete type" (unless the implementation is hidden). It will give you the most flexibility.
Well, with IEnumerable, at least the caller can't add items to it (without casting it back). But yeah, handing a mutable collection out and then operating on it asynchronously is a recipe for trouble, even if it's accessed as an interface.
I hear this a lot, but surely it makes most sense to have the least-specific type for inputs (arguments) and the most-specific for outputs (returns). It's my function that knows for sure what it needs from the arguments. Classic scenario: this collection of things; I need to know the count, so that means my IEnumerable argument probably ought to be an ICollection. Now I need indexing, so maybe it should be an IList. But with return types I run into the opposite problem. It returns an IEnumerable? Then I'll need to call ToList on it. Except maybe I know my function is returning an instance of List already, just I've chosen the least specific type - IEnumerable - as the return type. So what's the harm in being as specific as possible in this case?
SELECT &lt;columns&gt; FROM &lt;table&gt; WHERE &lt;column&gt; = 'name' OR &lt;column&gt;='text' &amp;#x200B; OR SELECT &lt;columns&gt; FROM &lt;table&gt; WHERE &lt;column&gt; IN ('name', 'text')
Select * from table where type = 'name' or type = 'text'
But Xamarin compiles xamls to something else. Only windows supports it natively.
On the other hand, if you just to `ToList` or `new List` every time with the returned `IEnumerable`, then you create copies all the time which is not good
I've updated the descriptor
I've updated the descriptor
SELECT &lt;columns&gt; FROM &lt;table&gt; WHERE type = 'name' AND value LIKE 'name%' &amp;#x200B; ...in it's most basic form. But please make sure you are making use of SQL variables to avoid SQL Injection attacks.
I assume you're referring to JetBrains Rider :p
None of the other answers are correct, but to be fair, your description is very difficult to understand.
Meh, already two compiler bugs in our code base, and this from an "RC".
Hm, I didn't.
This table and subsequently your question is designed extremely poorly. You should really read about normal forms first and understand tuples. The fact that these “rows” relate to each other breaks normal form. It looks like they should all be in one Tuple. That being said what you want requires a cross apply or left join to itself. Select t.* from table t cross apply ( select type from table t1 where t.id = t1.id and t.type &lt;&gt; t1.type) t1 Where t1.type = ‘text’ Another way is with exists but apply gives you more options for the result. 
Had VS2017 running at the same time, maybe that's why?
&gt; And in fact the "least-specific interface rule" should only be applied to method parameters. Method return type should in most case be the "most-specific interface or concrete type" (unless the implementation is hidden). It will give you the most flexibility. ***This*** \- i always code my methods to take in just what i need (mostly `IEnumerable&lt;T&gt;` *if i iterate only once*, *else* `ICollection&lt;T&gt;` or `IList&lt;T&gt;` if i need to be very specific, eg. Array/List indexer) i really ONLY use `IEnumerable&lt;T&gt;` as return type ***IF*** i do `yield return`s ***OR*** just apply some Linq magic to the source, ***ELSE*** i always return the specific implementation of the class i am creating (exceptions are Factory Methods, where there are many different implementations) &amp;#x200B;
In my codebase I'd use List&lt;&gt;, because these can be foreach()'d over without heap allocating an enumerator, and IEnumerable&lt;&gt; can't (I write games so reducing allocations is important). If this wasn't a concern, i'd use IReadOnlyCollection&lt;&gt; to make sure the caller doesn't add/remove items.
That's the thing, i almost always use `var` everywhere. Every time i had to change List&lt;T&gt; to, e.g. IEnumerable&lt;T&gt; (to defer execution, save on memory, yaddayadda) i rarely had to change anything. Additionally i don't use "`List.Count == 0`" but "`List.Any()`". &amp;#x200B; There are exceptions to this, where i explicitly use the List Indexer, or some custom IList&lt;T&gt; extension method, which breaks the code. But that's a no-brainer to fix
&gt; If it is a large collection you should return an IEnumerable backed by the list this sounds like a - i'm sorry - stupid advice. If it's a large list / computationally expensive, you should either try to use only parts of it (pagination) or return a IEnumerable backed by a ***yield return*** implementing method.
what you call "lazy-loading" is called deferred (query) execution and only makes sense, if what you return *really* is supporting deferred execution (eg. any IEnumerable&lt;T&gt; Method that uses **yield return** somewhere in it's codepath)
As far as I know Avalonia plugin (with previewer) is currently in development.
programming with mosh has a good tutorial on asp mvc you can start with
&gt; Desktop is near death, gotta pick up electron or pivot They’ve been saying that for 20 years. 
IList&lt;T&gt; has random access.
Interfaces don't really have anything to do with thread safety. So, you're right, they don't guarantee anything.
If it’s currently small enough to be resident in memory but large enough that you don’t want a copy made IEnumerable is a way to encourage the client to stream over the data rather than making a bulk copy and giving you the implementation flexibility to migrate to a yield return style interface when it is no longer viable to keep it in memory. 
And its be owning more and more true. Electron is the final nail for consumers, business/enterprise still isn’t decided 
Is it, though? How many times has anyone in this thread actually swapped out a container class and thought "wow thank god I have this least-specific interface... now I don't even need to LOOK at how this class is being used throughout the codebase! I'll just make this List into a Stack and hope for the best." Meanwhile all the code is doing .ToList() anyway. If your interface is used by classes that expect a list, then return a fucking list. Don't "think" and get so far up your own asshole that you end up sacrificing code readability for the sake of preparing for something that's never going to happen.
but the client does not stream the data if it is resident in memory. He already has (hidden behind an interface) the whole "copy" (list-reference including all the object references) IMO IEnumerable should ONLY be used if you are really supporting deferred execution, else you should use IReadOnlyCollection&lt;T&gt;. Or KISS and return the List&lt;T&gt; until your requirements change to "only do it streaming" or "return readonly"
Thanks, I'll enroll once I finished my Angular one.
you're learning angular 1?
I have done this exact thing forever except now I use IReadonlyCollection. If I am returning something (like a db call using EF) that I may want to stay in an enumerable or query able state the it is IEnumerable. If it is a list or some other concrete memory based storage then I will use IReadonlyCollection since it still carries the notion that I do not want the collection modified.
I wouldn’t balk at IReadOnlyCollection. 
I think you're going to have to give us a bit more of an explanation. Can you copy the code into your description and tell us the line it breaks on?
That's not something I would do often. Only if you need to access the Count and then loop over it or something.
I really like the official. Net Mvc docs. ://docs.microsoft.com/en-us/aspnet/core/?view=aspnetcore-2.2. What I like about docs is that they give you just about enough overview and you are forced to look around and build your own samples to grasp the details. I have found that if I just follow tutorials form books. 
&gt; Do the debug functions only work when there is an actual bug? How would code know when there's a bug? Code just does what it's supposed to do, by the meaning you gave to it by typing it. &amp;#x200B; BTT: "Watch" will only display variables which are in scope. Start your debugging using "Console.WriteLine(VariableIGaveIt)" Then do some calculation and do another Console.WriteLine($"After Calculation: {CalculatedVariable}") You should get familiar with F10 and F11 (Step Over, Step Into) and debug the Code line by line
No. Next question.
IMHO, it is often better to simply think about what my return type conveys to the consumer. To me, seeing a return type of `IEnumerable&lt;T&gt;` conveys that only iteration over its elements is "safe" whereas seeing a return type of `List&lt;T&gt;` conveys that indexing, count and iteration is "safe" (and so on). I could return an `IReadOnlyDictionary&lt;TKey, TValue&gt;` which obviously conveys to the consumer that they shouldn't modify the dictionary.
I think I would tend to the least specific type that *embodies the promises you want to make of your returned value*. If that's IEnumerable&lt;T&gt;, it's IEnumerable&lt;T&gt;. If it's List&lt;T&gt;, then it's List&lt;T&gt;, though you might check on some of the interfaces and base types hiding out in System.Collections.Generic.
[Textbookly](https://www.textbookly.com) (textbook price comparison engine) got a bit of a facelift the past couple weeks. Major speed boosts as well. Also I changed out my WebClients for RestSharp and things feel speedier!
Thats the wrong context you got there, buddy. This' about .NET Core 3.0 Desktop Applications (WPF, WinForms)
No, I expressed myself badly. I'm doing a course in Angular 6.
I overall agree, but they’ve poured in several low level features lately. 
[ ] you got the (bad) joke
Orly? Could you please share a link? I much prefer higher level languages like C# to C these days. Plumbing isn't as fun as it once was.
Set a breakpoint at the first line of code. Mouse hover over the variable in the code window and it can show you the value, as well as keeping an eye on locals and watch. It's probably falling out of scope somewhere along the way so the debugger has no value for it. Step through line by line till you find the problem. 
https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7-3 https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7-2 Mostly features to avoid allocations on the heap and to work with the stack.
When someone asks a question like this they should always clarify **what** they mean with "low-level language". Because in most cases (like this) the answer is a clear **NO**. Wikipedia writes: &gt; A low-level programming language is a programming language that provides little or no abstraction from a computer's instruction set architecture—commands or functions in the language map closely to processor instructions. Generally this refers to either machine code or assembly language. The word "low" refers to the small or nonexistent amount of abstraction between the language and machine language; because of this, low-level languages are sometimes described as being "close to the hardware". This clearly does not match C#.
The error probably means that your 'watch' is wrong or causes some error in the context where debugger tries to evaluate it. I suggest you forget the watches (in my 19+ years of working I've basically only ever used inline 'watches' after they became available) and just step-in/out the code as it executes and figure out which line craps out (and why).
&gt;i.e. return the most specific thing you can (usually a concrete type) and accept the most general thing. This tends to maximize reusability. How does returning a more specific type increase reusability?
oh alright, you're good
I hope Web Assembly gets direct DOM interaction so you don't need to call the javascript functions that manipulate the DOM.
You should be able to write it to your *own* folders (unless they are blocking the execution of non-trusted exe's). You won't be able to set your `rootPath` to the Owner's desktop. If you could, then that's a big security flaw. 
Im sorry if this isn't the case, but you seem a little new to the debugger. If so, i'm not throwing stones. Been there. I'd spend some time, if so, reading or finding videos about it. I know it feels more productive getting your hands dirty, but you'll save good time by laying a structured foundation of understanding and expectation. It's such a valuable tool to really get mastered, but it's not so simple that you'll putz your way to proficiency.
I've been hand rolling classes for Json for years. You're a hero
&gt; If your code is used by classes that expect a list, then return a fucking list Which is almost exactly what the parent comment said: &gt; If your callers are always going to just ".ToList()" it anyways, then return the List.
/r/programmingcirclejerk
You're right that if you use 'var' you wouldn't have to change your code, because the compiler does it for you. Imagine you had a class with a method that returned List&lt;T&gt; and in another assembly that's called using: var result = class.getList(); the compiler turns that into: List&lt;T&gt; result = class.getList(); If you change the return type without recompiling, the code would throw an exception on that method. 
Even lazier: `List?.Any() ?? False`
Maybe that changes in .NET Core 3.0? https://docs.microsoft.com/en-us/dotnet/api/system.runtime.intrinsics.x86?view=netcore-3.0 `System.Runtime.Intrinsics.X86` Namespace Classes: Aes, Avx, Avx2, Bmi1, Bmi1.X64, Bmi2, Bmi2.X64, Fma, Lzcnt, Lzcnt.X64, Pclmulqdq, Popcnt, Popcnt.X64, Sse, Sse.X64, Sse2, Sse2.X64, Sse3, Sse41, Sse41.X64, Sse42, Sse42.X64, Ssse3
You should probably show some example code somewhere
[`System.Runtime.Intrinsics.X86`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.intrinsics.x86?view=netcore-3.0) Namespace coming with .NET Core 3.0: Classes: Aes, Avx, Avx2, Bmi1, Bmi1.X64, Bmi2, Bmi2.X64, Fma, Lzcnt, Lzcnt.X64, Pclmulqdq, Popcnt, Popcnt.X64, Sse, Sse.X64, Sse2, Sse2.X64, Sse3, Sse41, Sse41.X64, Sse42, Sse42.X64, Ssse3 
Excellent answer!
Thanks for the link. I'd not heard about these new features!
No, its structure and syntax is really easy to understand, and it runs using a runtime. So unless you start using ahead of time compilation and unsafe areas to manipulate pointers, it is for all intents and purposes a high level language in the same realm as Java
Why would C# be a "low-level" language when the C++ and C languages that preceded it aren't? C was always intended to be a high-level language that allowed you to get maximum performance. C++ continued that ideal. And C# is intended to be a variation of the concepts of C++ that handles safe memory allocation for you and enforces a slightly stricter syntax. It should come as no surprise that you can tweak C# to get C++ performance, as long as you know how to prevent the auto-allocation stuff from slowing everything down.
Agreed. Getting a nice full stack trace on exception is a hell of a lot better than the app dumping core and crashing the machine.
&gt; provides little or no abstraction from a computer's instruction set architecture This part is the part that matters. Even though C# provides the ability to use low-level commands the high level abstractions are still available (and the standard expected uses). 
&gt; How about native inline assembler? Funny, I did exactly that a couple weeks ago! https://github.com/Zhentar/CLRStackZeroingAssemblyTests
This is like an Allrecipes post, except I was disappointed when I got to the end and there was no actual code.
I don't get it - based on the two links in this article, local functions just look like a way to make your methods/functions messier. What do we gain?
local functions- bad. Do not do.
Those calls are still translated to MSIL and interpreted. 
As long as C# gets compiled to IL, it's a high-level language. 
Exactly. This is the point every one seems to miss. I don't care what features it has, it still gets interpreted and run on the CLR.
In that case, let me introduce my friends https://github.com/dotnet/corert and https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/unsafe
They still get translated (even directly) to IL and run on the CLR. As long as that layer exists, you cannot claim C# is a low-level language.
 It is a way to organize/reuse code inside your methods. You could use private methods instead of local functions. But in that case you make your class messier. If your private method has only references in one method, why not make it local function?
Right?! Every time I find myself spinning up gdb a small part of me dies. The efforts of llvm and clang are monumental improvements but a stack trace is worth the overhead of something like the CLR. And thanks to Mono, C# is easily portable.
Translated to CIL (renamed from MSIL) and then compiled to ASM by the Jit; it only interprets the IL once to then generate the ASM that matches the CPU, it doesn't continuously interpret the IL
&gt; once to then generate the ASM that matches the CPU This still prevents it from being called low level, the incompatible commands will not be run or they will be re-structured to run properly. 
Did any of you even read the post? It was clearly an exercise in "how close can I get" and not a question that was intended to have a specific, definitive answer. No one believes C# to be equivalent to Assembly. Knee jerk commentary based on the title of the post is pointless. 
So that's saying because libraries are provided for common tasks (written in the same language); it must be high-level? To do anything in a low-level language you must always go back to first principles?
It's not "run on the CLR". The CLR may convert it into machine code or maybe you used AOT compilation and it is machine code on disk. 
How do I test them? 
Xamrin has been compiling C# to machine code since 2011. (Well really before that when their prior company was making MonoTouch.)
As a coder google is your friend. I seriously must run 500-1000 searches a day at work https://docs.microsoft.com/en-us/xamarin/mac/get-started/
It's just... manually throwing an exception in the second method. 
That is possible... if you are using .NET Micro or WebAssembly. But .NET on Windows has never been interpreted. I'm pretty sure .NET CE wasn't interpreted either. They are JIT compiled, unless you run NGEN in which case it is AOT compiled. And .NET on iOS or Windows Phone is always compiled to machine code before runtime because of OS restrictions. 
I agree, this does seem possible.
I mean, I can see the advantage for simple functions that can be written on a single line, such as: int Add(int a, int b) =&gt; a + b; This kind of mimics the look of a variable or delegate so it doesn't look out of place or crowd the function. Other than that though I agree, it just kind of crowds the parent function, and goes against the general structure of how C# code has always been structured. 
If there was no interpenetration going on in the compilation or run-time then the speeds would be better in the article. Low level means what you write is what runs. That has never been the case in .NET land.
Having a runtime library alone doesn't matter. C has a runtime and can still manipulate pointers. You could write a runtime library for assembly if you wanted to. In fact, if you are doing a lot of assembly work it's probably a good idea so you aren't constantly repeating the same code. 
Clearly not.
Fully agreed and I apologize for not saying deferred execution. I am very happy you noted the danger of it as well going in thinking the implementation will defer.
The exception is never thrown when the test is executed though.
Probably bites everyone at least once. The docs could probably do a better job at highlighting this, it's pretty buried under a piece of example code.
https://mattwarren.org/2019/03/01/Is-CSharp-a-low-level-language/
https://blogs.msdn.microsoft.com/seteplia/2017/10/03/dissecting-the-local-functions-in-c-7/ Here's a much better article imo. I also found them to be useless until I tried to use them myself and now I think they're great for some specific scenarios
Does anyone else fucking ***HATE*** that Microsoft shoves a store page in your face when you're trying to go to a docs link?
That is not happening to me.
Author of the post here, happy to answer questions.
Before Intrinsics.X86 is added would you agree that C# is a high-level language? It is highly abstracted from the inner working of a CPU. From that point I'd argue that adding the *ability* to use low-level functionality to a high-level language does not make it a low-level. You can use a high-level language to write code in a low-level way, but the process that code goes through to become machine readable is still abstracted enough that it does not become a low-level language. Your C# code is still going to go through a compiler, which will then spit out a lower level equivalent of your code, which then will be assembled to something your cpu can actually use. You have a *minimum* of two levels of abstraction there. To do anything in a low-level language your language cannot contain high level abstractions (e.g. generic collections), but you can write low-level code in a high-level language (e.g. using Intrinsics.X86).
I have to close the page and click the link a second time to get to the right page.
The major difference is that the C++ compiler is much, much, much better at optimizing the machine code it produces. The CLR's JIT compiler is tuned for speed over quality. So it produces machine code that is correct, but often much slower, than the C++ equivalent. C#'s JIT compiler also adds checks such array boundary so that you don't accidentally introduce a buffer overflow. These checks are not free. *** If you want closer results, turn off all C++ optimizations and turn off C#'s array bounds checking. 
Thanks, and yes I have been using Google. However I was not able to get a clear answer so just decided to ask and get an up-to-date answer.
It's the same thing as Binary /s
The same way you test private methods :P
Hmm, I can see how that's probably the "best" use case, but I still I don't really see why you'd bother defining such a simple function. It still feels wrong. Calling `c = Add(a, b);` a couple of times is no better than `c = a + b`, and now we have the function definition too. If it can be written (sensibly) on a single line, there's no benefit to a function at all. And if it's not a single line, there's no benefit to this specific type of function. As far as I can tell, anyway. I guess the one thing it does is ensure you have a single place where you can change the logic if you have a single-line piece of logic that's used a dozen times, but unless the parameters and return value are static, you still don't really gain anything. I dunno, maybe I need to see a real world example before it clicks
Any chance you could show us some actual real world examples where you've used it? I feel like I need to see it actually being used before there's any chance it could click. Right now it just feels like an attempted solution to a problem that didn't exist
We live in a time where there's something called "WebAssembly", so, there you have it.
By that standard machine code and assembly are no longer low-level either, as its not what the CPU executes as the CPU microcode translates them into different instructions that the CPU then executes
Since the Enumerable is never actually enumerated with MoveNext() won't the exception never actually get thrown?
You're not arguing in good faith. Machine Code and Assembly are how we *define* low-level programs. You're interacting with individual registers. That is as low-level as people actually write code. My argument is *not* "you must be writing the individual bits" and it's diginginuous to attempt to present it that way. If the discussion here is going over your head I suggest you take a computer organization class and a programming languages class.
difference between hardware and software. That translation happens inside the cpu. Also depending on the architecture if is an RISC type one there is no breakdown in it. Only CISC ones mostly break one OP down to multiple small ones.
I like having methods that are only used by one other method scoped to that one method.
How often does that actually happen, though? (Also as a side note: I don't think it's technically a method if it's scoped to a method, that would be a function right?)
👏👏👏 perfect answer
Reflection to the rescue! ^^^/s
Low level language term doesn't makes much sense these days. Any language can be low level or not depending on what you're comparing with. C# is not exactly a low level language but you can go pretty low with unsafe and then pointer arithmetics, pointer array manipulation, casting pointers up and low, void pointers etc. I use it all on my personal game framework. If used carefully it can really speed things up. 
No, additions to the framework do not make the language low-level suddenly.
Interesting. I always thought of C as a low-level language, but this definition would indicate it’s not. Or is it close enough to the metal to count?
Quite a lot. Usually when I'm refactoring monster methods into readable methods.
C is a high-level language. But within the realm of high-level languages it's rather low-level'ish. But the usage of the term "low-level language" has been rather murky that essentially it became a joke. Articles like the one from Matt Warren just aid the confusion.
Local (also called Nested) Functions (https://en.wikipedia.org/wiki/Nested_function) come from functional programming (or are a more widely available feature in them). As for why they are useful, I've used in Scala when doing pattern matching and switch statements a lot. Often your case handling in those scenarios have a lot of common code with some small variations, you can wrap that up in a helper function. You could put that helper function in your class declaration as a private method, but its not really meant to be used else where, so you can use a local function instead. The code ends up being cleaner. Another usage is for the helper function in recursive functions. The helper function usually isn't useful by itself, so it is better off written as a local function, I only wish C# supported tail recursion optimizations, so many algorithms are cleaner when written recursively. Basically, if you have method with some repeated logic that could benefit from being place in its own function you now have two choices: declare the helper function at the class level or declare the helper function as a local function. Personally, unless the code is going to be reused by other class level functions, then I would go with a local function since the implementation will be kept near its usage. 
That will never happen, the amount of libraries they have to update and refactor is mind blowing.
&gt; Calling `c = Add(a, b);` a couple of times is no better than `c = a + b`, and now we have the function definition too. Well, obviously, that's a contrived example. &gt; If it can be written (sensibly) on a single line, there's no benefit to a function at all. This isn't true at all! There are plenty of benefits to refactoring a one-liner to a function call. * even if it's used only once, giving the function a _name_ adds semantics. Instead of needing to slowly read a line to guess, "why is this weird date arithmetic being performed?", you get an explanation. * if it's used multiple times within the parent, the benefits are even more obvious. What's controversial is whether it wouldn't be better, then, to move this function elsewhere altogether. However, that can lead to weird namespacing issues, where you put it in a stupidly generic `Helpers` or `Utils` namespace or class, and/or make it an extension method to a type that perhaps really shouldn't have this extension at all. If it's only used within the parent, putting it in the parent may, in fact, be a good call.
Scott Allen’s Pluralsight courses and Asp.net Core in Action are both great. I’ve also liked Shawn Wildermuth’s courses on Pluralsight.
No
So until now, if I created a netstandard2.0 project, VS would default to C# 7.0?
Here is the problem with .NET Core 3 WinForms support, most of the applications we write use additional proprietary libraries which run only on .NET Framework and have no (and will never have) support for .NET Core. This means 98% professional applications out there can't switch to .NET Core, which makes this feature useless unless you are writing an application from scratch.
&gt; Still, many people don’t even know Local Functions exist Probably, but some people learned about them in the seventies, it's just that the C# people decided to add them to the compiler recently.
Sure there is a point to be made to use local functions in some very edge(y) cases, but to be honest in the case where I would need to widen the scope of a function or lambda/delegate, I would rather tweak the visibility than having to pull it out of a method.
&gt;Microservices are just like regular services, just, you know, smaller That is not true. Microservice architecture has significant differences compared to monolithic multi-layer approach.
It's the lowest I'm willing to go.
high school project... LOL :) Just give them the code. Otherwise you can use code obfuscation to make it difficult to read. 
The trade-off is less clutter in the class body versus clutter in the method body. The benefit is * "correct" visibility : if a function is only called by another class function, it needs not be visible elsewhere. In long-running projects, what typically happens is that functions grow. Then, to deal with them being unwieldy, people use the "extract method" refactorings. But the extracted ones make no sense outside that one place of use. * it can happen that you need to do X in two places within one function only. Local functions help doing that in a very clean manner.
At least it smells strange. You can do it, but if you have a main you should move all your logic into another class, or make all the methods static. Normally I have to deal with a particular framework requiring something similar and the best way I found to keep the things cleaner is to have an inner class. From the main you would create a new instance of the internal class and the job is done. 
I did, it just didn't exactly seem very low level, at least not in the way I'd expect.
I understand the logic... But I can’t think of a real world scenario where I’d actually use it. Does anyone actually use it in production code?
And DotNetCore!
This kind of motivated me to say "fuck all", and convert some C++ library I've been wanting to use to C#. Fixing syntax errors line by line instead of using P-invoke methods...
Normally `static void Main()` is in a file called `program.cs` so it's easy to find. Hiding it in another class is quite unusual. *** In the general case, classes often instantiate themselves. * singletons * Defaults. (`static readonly Foo Default = new Foo();`) * Enum-like classes. (`Encoding.Acsii`, `StringComparison.Ordinal`)
Yes, that's correct. And as this change percolates through to .NET Core releases, the default will be equivalent to C# 7.3 for .NET Standard 2.0.
Maybe I should have said "minimize code duplication" rather than "maximize reusability". As an extreme example, consider the methods on `System.String` from the *very* widely consumed Base Class Library. None of these return an `IEnumerable&lt;char&gt;` because that is rarely what a caller wants and many callers would end up having the same code to transform the result into something useful.
The static Main method doesn't really have anything to do with the object instance. So it doesn't "create an instance of itself", it's just an function creating an object. GUI applications usually work like this; the Application class contains the Main method which bootstraps the program by creating an Application instance . It does however give the Main function access to the Foo instance's private fields and methods, which could tempt developers to do things they shouldn't. Usually people keep the class containing the Main function as simple as possible and have a separate bootstrapper, like in ASP.NET core where configuration is done in the Startup class.
Consider me as noob-dev. Is bash low level ? Is power shell low level ? 
Fantastic news, thanks!
I suppose they wanted to run something only the first time the class was instantiated? In that case I'd personally go with a static flag instead. This is not very clear at all.
&gt; but I would seriously consider porting any actively developed apps to .Net Core 3.0 Are you professional dev ? You don't sound like one. Good luck converting winform application with ton of proprietary libraries and millions lines of code (huge refactoring). 
No, not always. Sometimes it's the correct thing to do, like when you're implementing casting operators or conversion methods.
&gt;There are no dependencies on a specific OS-installed version of .NET Was that really a problem ? You can add 5 lines of code in app loader to check for available .NET Framework and instruct user to run installation file (web install is like half of meg).
Yeah, take the worst thing you can use in GUI and put it on new .net framework. Right....
No, and no. They're both scripting languages relying *heavily* on their own abstractions and frameworks. If you're using the definition above I'd argue even C/C++ isn't low level, just lower than most other common languages.
Good luck with that... specially if you are designing complex engineering tool :)
VS Code is using it.
You can do that in .NET. You don't need special tools recommended by others.
It is a welcome change, thanks.
WPF is Direct3D, I don't think that will ever happen. Anyhow there is better framework - QT(C++) which work on any platform out there.
‭01001110‬ ‭01001111‬
Most applications out there use some sort of proprietary libraries so this is not an option for 98% of professional applications in real world. If only MS decided to create .NET Core 10 years ago... maybe... now we have total mess.
Span, ref structs etc. are irrelevant for code related to GUI performance. &amp;#x200B;
Here is an example. I do this to reduce the probability of someone messing up when adding a new FeedbackStatus, and I keep it local because it will never be used elsewhere. public static readonly IReadOnlyDictionary&lt;string, FeedbackStatus&gt; StringToStatusMap; public static readonly IReadOnlyDictionary&lt;FeedbackStatusProto, FeedbackStatus&gt; EnumToStatusMap; public static readonly FeedbackStatus Open; public static readonly FeedbackStatus InProgress; public static readonly FeedbackStatus Closed; static FeedbackStatus() { var stringToStatusMap = new Dictionary&lt;string, FeedbackStatus&gt;(); var enumToStatusMap = new Dictionary&lt;FeedbackStatusProto, FeedbackStatus&gt;(); Create(out Open, "OPEN", FeedbackStatusProto.Open); Create(out InProgress, "IN_PROGRESS", FeedbackStatusProto.InProgress); Create(out Closed, "CLOSED", FeedbackStatusProto.Closed); StringToStatusMap = stringToStatusMap; EnumToStatusMap = enumToStatusMap; void Create(out FeedbackStatus status, string stringValue, FeedbackStatusProto enumValue) { stringToStatusMap[stringValue] = enumToStatusMap[enumValue] = status = new FeedbackStatus(stringValue, enumValue); } } 
So extract them to another class in a sub namespace that I call from the original class when they become too complex to simply let the normal methods being tested cover them?
It’s not meant to stop anyone or be a deterrent to decompiling. It’s pretty much for if someone decompiles your application and they use your code, you can sue them and have a solid case. It pretty much makes you money is all it does. It’s the legal way of protecting your assets instead of going the physical route.
[https://docs.microsoft.com/en-us/dotnet/csharp/getting-started/introduction-to-the-csharp-language-and-the-net-framework](https://docs.microsoft.com/en-us/dotnet/csharp/getting-started/introduction-to-the-csharp-language-and-the-net-framework) &gt;Source code written in **C# is compiled into an intermediate language (IL)** that conforms to the CLI specification. The IL code and resources, such as bitmaps and strings, are stored on disk in an executable file called an assembly, typically with an extension of .exe or .dll. An assembly contains a manifest that provides information about the assembly's types, version, culture, and security requirements. &gt; &gt;When the C# program is executed, **the assembly is loaded into the CLR**, which might take various actions based on the information in the manifest. Then, if the security requirements are met, **the CLR performs just in time (JIT) compilation to convert the IL code to native machine instructions**. &amp;#x200B; Yes, the code that is finally run is native code. But it's entirely accurate to say that it's being run on the CLR because it's performs JIT compilation the first time the program is run. The entire point I was trying to make was that this is by no means a "low level language" because it goes through the above transformations before native execution. &amp;#x200B;
Does Xamarin skip the step of first compiling to IL? 
So wait we're implementing a real machine through a virtual machine? What? I'm guessing these commands pass through the IL to achieve performance gains. Just a guess though.
&gt; Everyone's doing webapps nowadays or using Electron .... heavyweight UI toolkits like WinForms So my 10MB WinForms application which takes max 25MB memory is "heavyweight" while Electron with its 100MB binaries and 500MB of used memory in idle mode is "lightweight". Interesting... didn't notice that before... &amp;#x200B;
If you can, doesn't mean that you should ;)
I see there are lot of kids here who have zero real word experience. Listen, do you really think MS is so stupid to dump .NET Framework in favor of Core after trillions of lines of code running countless applications around the world, which by the way are almost impossible to port to Core due to proprietary library dependencies ? They will for sure put the best things in Core but it doesn't mean they will stop updating .NET Framework for next 10 years min.
I suggest checking if you've got something nasty installed - sounds rather like your getting hijacked to someone's affiliate page.
" **Coming from Python, what can you tell me about C#?** " As someone who is using .NET since 2002 I can tell you "STAY with PYTHON". Python in combination with QT libraries and some C++ knowledge is excellent choice. Stay away from .NET, specially now when they made our lives complicated with .NET Core and issues with legacy code.
Yes, it's a problem, especially in corporate environments. It takes literally years to convince the system admins to change anything. The reason? They get rewarded if things do not go wrong, but there is no penalty for blocking anything and everything because they had a bad dream last night.
No, it's definitely a Microsoft page. It's my work computer that I test sites on, so I don't have an ad blocker installed in the browser. Might that have something to do with it?
How about loading iOS in a VM like VMWare or VirtualBox? IS that doable and ok by Apple's license?
So when i select a variable to be watched it is only watching it at that specific spot in the program. 
Would MSIL count as a low level language then?
No. MSIL is full of abstractions as well. Not even C is considered a low-level language.
this is on WPF, i am using an extra text box that writes specific information based on where i put the test.text = variable.ToString(); or something else useful. This is just getting annoying.
I am not using inline watches. Visual Studio has the ability to right click and select "add to watch"
Is it though? All the calculations done for rendering - if structs are passed with the in keyword as readonly ref you save copying on every pass.
My choice is always Dapper. You have enough freedom in designing SQL plus you get all important benefits of ORM. Not to mention unmatched performance which is almost close to low level [ADO.NET](https://ADO.NET) classes.
&gt; So what's the harm in being as specific as possible in this case? First, you implement it as a List&lt;T&gt; because you're just returning a smallish, in-memory collection. Later, requirements grow and you start to deal with larger amounts of data. The callers often don't use more than the first 100 or so results, and each result takes a long time to fetch a separate item. Wouldn't it be great if you could implement it using `yield return`? But that only returns IEnumerable&lt;T&gt;. YAGNI applies and we don't want to over-engineer. However, if callers are generally not going to be doing anything other than iterating over the results (which is common), then we don't want to return a List&lt;T&gt;. Returning a List&lt;T&gt; says, "you are going to have to hold the entire resultset in memory all at once", whereas IEnumerable&lt;T&gt; gives them the option to stream the results or ToList() it themselves.
Thanks for all the good work. Can I clarify if this also applies to Visual Studio 2019 RC?
I converted a c++ algorithm that used AVX to C# using that and Intrinsics.Experimental which is a more recent version worth more methods. Anyway, the c++ algo in C# using AVX was slower than normal C#. The c++ version took 5 seconds. The C# using AVX was 22 seconds. The normal C# was 16 seconds. 
Sometimes we have to do it for Singleton pattern, so no. Depends on what you want to do.
While I can't rule that out (I do have an adblocker installed), I've never seen any sort of ad stopping me getting to Microsoft documentation. It would be a really obnoxious sort of thing to do... I'm still betting on some sort linkjacker at your end. Microsoft have an affiliate program, so it could be sending you to the genuine store page, but tagging the traffic as coming from them so they get commission on anything you purchase. Seems more likely than MS deciding to massivly piss off developers in that a few of them are suddenly going to decide they need to buy a copy of Office.
Yes, this should also apply to Visual Studio 2019 RC. RC and Preview 4 are actually the same thing right now, I should update the text of the post :)
Have GitHub example? Experimental was an older version, newer is System.Runtime.Intrinsics which is inbox on .NET Core 3.0 (and can use with preview 2): https://dotnet.microsoft.com/download/dotnet-core/3.0
They're perfect for yielding methods without further messing up the class scope. When you write pre-condition checks (which you really should), then it is necessary to split yielding methods in two: One that does the checks, and one that yields.
If a high level language includes low-level classes, it does not become a low-level language. You're simply calling the low-level intrinsic instructions from a high-level language. 
Don’t really care about Apples license because the chance of even getting caught is slim to none. I know you can run MacOS on a PC but I really rather not go that route only because I don’t feel like having to maintain a virtual machine all the time and consume more space on my drive.
Search result "No" - 61 counts Search result "Yes" - 1 count
You don't, you test the code that is using them. 
I'm not a debugging expert so I'll have to let someone else answer that. 
As I say else-thread, people noticed this could be useful and put it in some programming languages back in the seventies. So yeah, it must have been used in some production code, way before C# even existed... 😀
How about if you have a function that does some recursion? public void ActionWithRecursion() { // Other stuff recursion(); } private void recursion() { // Recurse } Becomes: public void ActionWithRecursion() { // Other stuff recursion(); void recursion() { // Recurse } }
Where should my stat priority be if I want to min/max my C# for future high-level raids?
Thanks, I have another way to keep track of variables, but its annoying
I downloaded the CosmoDB emulator and I think I'm in love. I started out this personal project of mine with sql but I'm definitely going with nosql now. I'll post an example of how I'm using it on github next week. 
Nope. Lol
I’m not convinced: why would you do “other stuff” as part of the recursion? Surely you’d just call the following instead of calling ActionWithRecursion()? OtherStuff(); Recursion(); In your example it seems like the action method is doing too much, it’s covering two “things” not one. Again, what’s the real world scenario?
I meant the “other stuff” to be part of the same action. It is one action, and part of that action is recursive. For instance, an entity that relates to itself. So an entity with a parent of the same type, and thus X children of the same type. Say the action makes some changes to the top entity and then must make changes to the entity’s children and each child’s children.
Same. We used Epplus for a project where a client wanted "magical tables" (their words) where they would upload a spreadsheet to their website and it would be parsed, converted, and saved as an item in their cms without them having to do anything and Epplus made it super easy to design the importer .
Probably not. But if you are using C or C++, its going to translate everything into an intermediate language before finally becoming machine code as well. Very few languages go directly from source code to machine code. 
Short answer: No. Long answer: Noooooooooooooo.
 This isn't knee jerk commentary. Even reading the entire post, the idea of a low level language is to have no abstraction. C#, no matter what, no matter how much efficiency, no matter how much unsafe you write, will it \*EVER\* not have abstraction. No amount of ref, out, in, span, etc, will change that. &amp;#x200B; People keep getting confused that running fast or manually manipulating memory means low level. It does not.
To be fair, if you are standing on the 12th story of a building, then the 9th story is a "lower level".
Seriously, though. Set a breakpoint and go through every line. If it's a method that's failing, set the breakpoint on the first line of the method. Then hit F10 only after you understand what's going on at that particular moment. Good thing about this setup is that if your code is right, only one thing should be happening at a time. If your code is complicated, start by uncomplicating it. For instance, don't do "return variable.First(x =&gt; x.Property).ToList()[0].ToString()". That's tough to debug, so just unbox it into each step so you can see what's happening at each step. I've been there with the frustration when something goes wrong. Just make each line of code clear, concise, and make sure you fully understand it. Then use the debugger to walk the code to double check your understanding. Good luck.
Where's the line in the sand? MSIL/CIL is an abstraction of byte-code, so would that be low level, or is that not considered low level because it's an abstraction of machine code? And where does that leave all the variants of Assembly, as that could be considered an abstraction of machine code?
It seems like you got redirected. If you see the URL, you're at the Microsoft Store home page, not at the docs. It's really weird. The docs shouldn't redirect you here. Which country are you visiting this from?
Nope
Reading the article, there is some nuance to this question that you might not consider otherwise. Obviously the GC is not a feature of any low level platform, but the author makes a case that you can restrict your C# code in a way that does not exercise the GC.
 I agree with most besides this: &gt;Your C# code is still going to go through a compiler, which will then spit out a lower level equivalent of your code Unless you're writing binary or directly on the CPU, your code is going to be compiled and a "lower level" equivalent is going to be supplied. Would you not consider NASM a low level language? You're programming directly to intel x86 instructions.
Does VS 2019 ship with final version of C# 8?
 It's unfortunate reddit always has such vendettas, out of everything that you've posted so far, this is actually correct. Most people don't realize when you're writing assembly, you're still choosing a language that gets compiled, even before the CPU converts it even further.
Step 1: become a renowned figure in the industry Step 2: make cogent arguments for why this pattern is a pattern and not an anti pattern Step 3: publish arguments 
US
C# 8 won’t come out until much later this year 
 Machine Code is not Assembly. When you're writing assembly, even before it gets to the CPU, it gets compiled based on the flavor you chose. With what you stated, he's right, it doesn't matter if a language is compiled or not for it to be low level.
As long as you don't do this: public class Foo { Foo() { var Fuuuu = new Foo(); } }
I agree that using the definition above c/c++ wouldn’t be considered high level. I have always thought of like this: low level is things like asm. Then you have the “low level” of the higher level languages which includes C and some form of c++. Then the high level languages like c#, python, etc
I have always thought of like this: low level is things like asm. Then you have the “low level” of the higher level languages which includes C and some form of c++. Then the high level languages like c#, python, modern c++, etc
No problem in the future just do something like your title, but just link right to your blog in general I dont think reddit likes self-promotion though... unless you already are "famous" like Jon Skeet or such
Bettinger's law of headlines continues.
First, you must defeat a member of the Gang of Four in honorable combat. You may then make the pilgrimage to the temple at the top of Mount Merapi, where you will undergo the Test of Principles. Should you succeed, high priestess Liskov will weave your design into the Tapestry of Patterns, making it official.
There wasn't a "fail" just not doing what i wanted. It ended up being an if else should have been if then
Like asking is Java is low-level language?
It took me like 10 seconds to Google this. Other than iPhone apps (Apple is never going to let a Microsoft platform on their devices), everything goes to IL first. I don't know why people are talking about this because it's still not a good argument that C# is a low-level language. &amp;#x200B; [https://docs.microsoft.com/en-us/xamarin/cross-platform/app-fundamentals/building-cross-platform-applications/understanding-the-xamarin-mobile-platform](https://docs.microsoft.com/en-us/xamarin/cross-platform/app-fundamentals/building-cross-platform-applications/understanding-the-xamarin-mobile-platform) &gt;The C# source makes its way into a native app in very different ways on each platform: &gt; &gt;**iOS** – C# is ahead-of-time (AOT) compiled to ARM assembly language. The .NET framework is included, with unused classes being stripped out during linking to reduce the application size. Apple does not allow runtime code generation on iOS, so some language features are not available (see [Xamarin.iOS Limitations](https://docs.microsoft.com/en-us/xamarin/ios/internals/limitations) ). &gt; &gt;**Android** – C# is compiled to IL and packaged with MonoVM + JIT’ing. Unused classes in the framework are stripped out during linking. The application runs side-by-side with Java/ART (Android runtime) and interacts with the native types via JNI (see[Xamarin.Android Limitations](https://docs.microsoft.com/en-us/xamarin/android/internals/limitations) ). &gt; &gt;**Windows** – C# is compiled to IL and executed by the built-in runtime, and does not require Xamarin tools. Designing Windows applications following Xamarin’s guidance makes it simpler to re-use the code on iOS and Android. Note that the Universal Windows Platform also has a **.NET Native** option which behaves similarly to Xamarin.iOS' AOT compilation. &amp;#x200B;
Fowler sells certificates of pattern authenticity online for a tenner. What's the pattern?
That is a bizzarre article... "Can I port this code to another language?" As long as both languages are turning complete of course you can. There is no magic in programming only syntactic sugar. &amp;#x200B; Is C# a Low level language? And then comparing it to C++ or Even C (Which is not a low level language)... and the article even shows the ICL... so HOW can c# be a low level language if it is a handle to ICL? Is ICL a low level language? Now that might be interesting... but ultimately only a semi-arbitrary distinction. &amp;#x200B; &amp;#x200B;
https://github.com/dotnet-presentations/blazor-workshop/ blazor workshop/tutorial if anyone is interested 
Nope. Sometimes the technique is used to make certain classes non-instantiable outside the namespace. Effective Java by Joshua Bloch has a section on this (package private vs public in java). The use case is making complex domain objects accessible to consumers of an API without enabling the users to make objects themselves. For example, let’s say I’m writing an API, and it exposes a complex object whose configuration is sensitive and easy to screw up. I’m going to make sure only my code can instantiate this object. That way if client code has an instance of the object the client author can be pretty sure the object isn’t invalid. I as the api writer can be sure that when clients pass the object back it’s also kosher 
That's pretty darn neat if true. I perhaps wouldn't have framed this as low level but this is certainly a great step in that direction.
&gt; But to add: If I blame myself, I need to be able to debug your library when I have 8 hours to figure out a bug before we decide whether we can proceed with a release because my code is wrong and I need to be able to clearly understand it's my fault, not yours. I think you might like this then: `ceras.GenerateSerializationDebugReport(type)` 
I was not ready for this level of genius. Thank you.
Does MSIL fit the strict definition? Probably not. But it's absolutely a lower level language. Lower than anyone is going to program manually. And that's how the term is more likely to be used today. Even C is often considered referred to as a low level language.
Removed: Rule 3.
On a more serious note: You might start with a blog post to explain how it works.
This is why it is recommended to do argument validation first and then call a private method containing the yield statements to ensure argument validation happens when one would expect 
I agree with everything from your last comment. But not sure why self promotion will be a problem if post contents are inline with the community rules and people can actually benefit from it. I think then if author of the posting is promoting/sharing the post should not be a problem and people will appreciate it. I am no John Skeet but i am gonna share my learnings . If i get in trouble atleast i will find out why people objection to that. Thanks for the tips anyways really appreciate it.
You are trying so hard to "win" that you aren't even paying attention to what you are quoting. &gt; Note that the Universal Windows Platform also has a .NET Native option which behaves similarly to Xamarin.iOS' AOT compilation. And again, those are not the only AOT options for C#. &gt; I don't know why people are talking about this because it's still not a good argument that C# is a low-level language. Because you keep repeating the mistake that C# is never compiled to machine code. I never once claimed that it was a low level language. 
VS Code is using Electron, but as far as I know, not Electron.NET.
It's pretty technical, concerning a couple of limitations of lambdas and delegates in certain scenarios, that could lead to undesirable error handling for example. Honestly? Should I ever encounter such a problem, I'll google it, local functions will show up and I'll use them to solve the problem. But it's not like a totally new way to do things, at least as far as I can tell...
Sounds like digital signatures to me, or checksum in some form. Perhaps your implementation is specific, but then it wouldn’t be a pattern anymore.
Goddamn that was music to my ears, kudos mister, very sharp and precise!
C isn't low level. Having pointers and data manipulation isn't low level. Low level is speaking the terms as the computer understands it instead of as humans understand it then having a compiler convert it to what the computer understands.
Not really, only used them at work. However, just know it's a niche convenience. Only used it a couple of times where I thought it helped with readability, which we all know is very subjective. Sure, they are theoretical, but most people can probably relate to finding your own example of aggregate exceptions to be slightly annoying. So of course you can just wrap the async part in some private class method "WorkImpl". Local functions just makes it possible to keep them in the same method to keep it close. Of course you don't have to :) so it's only a convenience
I stack Iteration buffs for hot paths... but the occational +cache mem accessories can give some good results.
Yeah, that's pretty much how I've thought of it as well, low level and high level, where the high level languages are higher or lower in level. I've always split it into high/lower(but high)/low in my head.
You and I are best friends. 
Its just an old "reddit" idea. Im personally fine with people sharing their own creations, especially blog posts like yours Anyways have a good weekend. I think I came off a bit asshole-ish and that wasnt my intent.
Actually you was right i talked to other people/colleagues about guidance on sharing stuff in forum platforms and explained exactly what you suggested. Trust me I learned something new from you. It was not anything to feel offended about . You too Enjoy your weekend.
Not right now, no
lol wat, that's not how any of this works
Lol wat, provide an answer or don’t comment. If that’s all you have to say then I’m quite certain you have no idea how it works either.
Hey, only I'm allowed to abuse the sticky-comment feature.
No, and I also don’t think it’s right to assume someone’s work either. I am not using any type of checksums.
I have a class that parses a file and one of the things it does is handle escape characters. Most of the escape characters are handled in the same way, so there's a local function that handles the simple replacements and will only be called by that method. Helps to keep the rest of the class slightly cleaner (especially when it comes to intellisense). 
No. C# just like C++ are high level languages that compile down to a lower level language. C# compiles down to MSIL and C++ compiles down to assembly, hence why C++ is higher performing. High level languages make programming easier and are made to be human readable.
Jesus, chill a bit dude
It's the .ToList() problem descripted. If everybody wants a list and you gives a IEnumerable, there will be a lot of .ToList()s in the code.
That's... Beautiful 😍 Never knew the journey was to specific.
I WILL NOT!!!!!11EQWFO;INWAR4VIOAE45GOIsuioaw4goinwreg
You can use the Enter and Leave event to track which button you are hovering. However, why do you want to create a chess game in forms?
I had this fight in /r/programming and I swear no one reads the damn article. The author even clarifies that he wasn't actually asking if C# was a low level language, but nope no one bothered to read that before talking out of their ass.
That still has nothing to do with the article. Read it again, the author even clarifies what he is asking. &gt;Or more specifically: &gt;What language features of C#/F#/VB.NET or BCL/Runtime functionality enable ‘low-level’* programming?
Please stop giving ideas you'll regret if someone take seriously.
I think that this is a good explanation of concepts. It just depends from your common point of view
Microsoft is already on the Electron train. Visual Studio Code and the Visual Studio installer are both Electron apps.
Aww how can that be downvoted... That's like kicking a puppy. (I was practically thinking this exact response - albeit with an explanation as well)
Yes. MSIL is a low-level programming language that provides little or no abstraction from a computer's instruction set. MSIL is often directly compiled to machine code for the computer it targets, which is a hallmark of low-level programming languages. Keeping in mind, of course, that MSIL is the assembly language for a computer that doesn't exist - the .Net Virtual Machine is a fully-specified computer, just one that doesn't exist anywhere in silicon yet. It has a full instruction set, processing architecture (stack, not register), memory model, etc. People here that say MSIL isn't a low-level language are crazy, they're probably thinking that since MSIL doesn't compile to x86, it doesn't count. But - that's not the definition. Heck, malbolge is an example of a low-level instruction set. It's just for a computer that *hates you*.
It's better to call C a "systems programming language". C# cannot be used for systems programming.
This is very appreciated... updating large solutions with many projects from C# 7.0 to 7.X is something I’ve done several times now...glad this will no longer be necessary going forward.
C is high level. X64 asm is low level
&gt; Even x86 assembly is high level programming because it's an abstract language that is mapped into a lower level language inside the CPU It's even more direct than that. x86 assembly refers to code in text form like this: add eax, ebx add eax, 5 Which is not x86 machine code. Those two add instructions map to different x86 opcodes when compiled to machine code because the machine code has to encode the exact form of the arguments, as well as the arguments themselves. Throw in a lot of the other niceties of x86 assembly, such as memory layout/padding, sections, etc, and you have a strong case for muddying the waters even more.
In university the definition was literally anything but assembly is a high level language
I wrote checkers. You know what, based on the long term investment I think I'll lay it off. I'm solo learning, but was introduced to cs through school. School doesn't teach jack shit. After 6+ months the top subject we've learned is arrays. That was last lesson. I guess I'm better off making games in unity or learn how to build a website, password crackers. Do you have cool tutorials? Thanks for the answer as well and sorry for this weird comment, I'm tired.
&gt; Returning an interface is likely to make the calling code less efficient I'll take "Things that don't matter 99.995% of the time" for $500, Alex. That said, it's worth understanding why IEnumerable might perform worse than List, e.g., if one doesn't already.
Ah, sorry, I meant checkers. Take a look at MonoGame instead of Forms for games. Unity is a game engine, if you want to learn programming without having to fight a monolithical behemoth (so, any large game engine there is), a good framework may be a better choice and MonoGame will take care of a lot of stuff that allows you to iterate quickly.
Somehow my brain just turned all of that into "mount the high priestess" and then followed up with a rather logical "no, don't do that or else your pattern will never get woven into the tapestry". It's 5 PM on a Friday, and my brain is in full-on rebellion. Time for me to go home and quash the rebellion with the dulcet tones of alcohol.
My personal scale of languages.... Asm - low level C - “lower” level C++ (w/std libs or frameworks), Objective C, etc - “mid” level Managed C++/C#/VB.Net/Java - “high” level Scripts (JS, PowerShell, Python, etc) - “not really a programming language”
It’s common in the industry, and they work.
It’s common in the industry and it works.
See I feel like there is still a debate about this and generally the meaning of "low-level"... I think we all agree, Assembly is just about the lowest we will generally go so we consider it low level, but C gets compiled essentially down to assembly level code then to machine code so it's pretty low on the level scale, C++ being built over C is also sometimes considered low level. However the generally agreed upon MAX cutoff is the C#/Java level at the stage it is agreed and agreeable that is no longer low level code seeing as how it's relatively readable and a lot of the explicit commands which you needed to do in C++ are masked away and hidden. Okay so now we generally have a range for where is the ceiling for what is low level code. It's somewhere between assembly level code and C++(the argument I have actually heard is that C is the cutoff which is why I say in between). At this point I think it becomes a conversation based on what we compare to. Is C++ low level compared to python/js/etc? Yes, I doubt there's any argument. Is C/C++ still low level when you compare with byte code and machine language? Probably not(again there was still this one argument for C...). So to answer OP no C# is not, the rest is a debate though
It's perfectly fine to use Forms! I mean, why waste your time learning xml along with C# coding, when you appear to just want to practice what you learned before? And yes, there is a way to the MouseHover event. Here's a link on how to do it: [https://www.codeproject.com/Questions/481642/c-23plusButtons-3aplusShowplusMessagepluswhenplusm](https://www.codeproject.com/Questions/481642/c-23plusButtons-3aplusShowplusMessagepluswhenplusm) &amp;#x200B;
Why learn a 10+ year old UI framework. WinForms is a giant PitA use WPF or UWP. 
btw with the haters on WinForms, I think its great for a beginner like you. when you click on something in the Designer view, like the button, click on the properties tab (should be on the far right by default, it has its own window/tab) and then click on the lightning symbol this will show you a list of all events that get fired like Mouse_enter and Mouse_leave and such
&gt; How do I reach an audience without being a nuisance by advertising it all over the place? &amp;#x200B; Publish it on GitHub.
&gt; It's perfectly fine to use Forms! I mean, why waste your time learning xml along with C# coding, when you appear to just want to practice what you learned before? To be fair, you can use the WPF designer the same as you would the WinForms designer so one wouldn't need to learn XAML along with C#.
Well.. in that case remind me not to trust your memory! Generally not possible in C#.
No. You can shorten it slightly using expression bodies. private int number; public int Number { get =&gt; number + 2; set =&gt; number = value -2; } &amp;#x200B;
fair enough. full disclosure I came over to a c# project from doing android java for 5 years. my head is a jumble. and why must everyone use so many underscores (_var) drives me nuts
Maybe its this kind of syntax I was thinking of. my primary motivation is to get rid of as many underscores as possible (_var) that whoever wrote this code loved to use for backing variables. It is giving me embedded code flashbacks :-P 
I am going to assume you had a single level UI. That would be really tiresome to have to compile and click around every time you wanted to check a UI change. 
Not being able to switch and having to do some work to switch are fundamentally different things. Our tools have a decent amount of 3rd party dependencies but if we wanted to move, we could. Doesn't mean we will! As far as I've seen it, DevExpress will offer their components for core, other vendors too... might take time. For some legacy stuff there is no replacement. But if they are old UI components they probably don't handle UI scaling right, have perf problems or just look like the XP theme and it might as well be time to let them go.... It's interesting for new apps though. 
Were you by chance thinking of structs?
Yeah, I'd just use `this.number` instead of underscore or other prefixes, wherever the private member is used and it isn't immediately clear if it's a local variable or a member.
That's kind of a weak motivation, but okay... Underscores are just an easy way to distinguish between locals/params and member fields without need for "this.".
I think in general, it's fine and reasonably common in a static method -- you'll often see it used in combination with private constructors, or as a shortcut to create a specific type of instance. Consider something banal like \`DateTime.Now\` -- that's a static method on the \`DateTime\` class that returns an instance of \`DateTime\`. &amp;#x200B; The actual code snippet you've provided does seem smelly, though -- why is the method called Main? Why is it not returning \`Foo\` and letting the consumer call \`DoStuff\`, etc. &amp;#x200B;
Underscores are just on common convention. You don't need to use them, if you don't want to. 
&gt; C gets compiled essentially down to assembly level code then to machine code so it's pretty low on the level scale C is not in any form a low level language. It has function calls. That is converted into a low level language that performs stack pushes, JMP, pops...etc. C has for loops which is converted into a low level language that puts a value into a register, performs a comparison, performs a JMP... It has High level Human concepts like named variables and structured types. It allows the use of infix notation for math equations. Low level languages have instructions over keywords. Instructions are not nearly as flexible as keywords... for example most instructions simply take two memory addresses so it's a different instruction for add or multiply. I mean, this is c# so This is High level; int i=1; int j=2; int k=i*i+j*2; This is low level: IL_0000: nop IL_0001: ldc.i4.1 IL_0002: stloc.0 IL_0003: ldc.i4.2 IL_0004: stloc.1 IL_0005: ldloc.0 IL_0006: ldloc.0 IL_0007: mul IL_0008: ldloc.1 IL_0009: ldc.i4.2 IL_000a: mul IL_000b: add IL_000c: stloc.2 IL_000d: ret 
Thank you for getting me to read the article because it actually was fairly interesting
Depends on how Assert.IsNotNull is implemented. But I'd wager it doesn't enumerate. So no exceptions here.
And here I though they are talking about twix. Okay. That joke might be a bit too niche.
Again it really depends on the comparison. I understand what your argument is, and I do not disagree. However some would say memory management makes it a low level language, which is why it's a contention. 
&gt; C# cannot be used for systems programming. Uhm... Sure it can. You can even write your own OS in C#, only *a bit* non-C# bootstrapping is required. https://github.com/CosmosOS/Cosmos
Agreed. I get that going by "latest major version" allows for more compatibility, but if people are using 7.0 in this day and age, it'll be easy for them to update to 7.3 if someone else on the team creates a new project with it.
It _has_ "outlived" multiple bigger JS frameworks already...
C is a high level language 😎
It's the "static factory method" pattern. It can be a good technique for creating aggregates in domain-driven design, in my experience. The class has a private constructor that gets used by one or more public static methods, thus controlling its own instantiation. You can tightly control object construction, add validation, use default values, etc.
No, this is not possible. But there is an open issue to allow this: https://github.com/dotnet/csharplang/issues/140 The issue is pretty much dead/ignored tho.
I converted a c++ algorithm that used AVX to C# using that and Intrinsics.Experimental which is a more recent version worth more methods. Anyway, the c++ algo in C# using AVX was slower than normal C#. The c++ version took 5 seconds. The C# using AVX was 22 seconds. The normal C# was 16 seconds. 
I haven't installed core 3.0 because I don't want to install the preview of vs2019, Ive been burned in the past where it leaves shit behind and causes problems. I was testing using benchmark dotnet and Core 2.2. Unfortunately I can't put that experiment on github publicly. 
This is not StackOverflow though.
Can you give more details, or perhaps an example of a method that you want both an \`async\` and a non-\`async\` verson of? I would not typically want to have both versions of the same method. If the method is I/O bound (files, network, etc.) then it should probably be \`async\`, otherwise it should probably not be. That conveys useful information about the method and how it should be used. &amp;#x200B; Though this should also probably be avoided most of the time, if the caller wants to call an \`async\` method without using \`await\` they can do something like \`[Task.Run](https://Task.Run)(() =&gt; DoSomethingAsync()).Wait()\`. If the caller wants to call a non-\`async\` method by using \`await\` they can do something like \`await [Task.Run](https://Task.Run)(() =&gt; DoSomething())\`. &amp;#x200B;
Finish your async thread and return your Task.result and pass it along from there. 
Actually that is very handy to know, as a newb to C#. You are right all I require is the async and I can use the wait method if I need it synchronous. Thanks very much for the help.
Step 4: Eternally defend your position in the face of constant criticism and counter opinions.
Well, MSIL/CIL is an object orientated stack based assembly language which is then compiled to MSIL/CIL bytecode. One reason to have such bytecode is to abstract the underlaying hardware away by needing a runtime with a JIT to run it on actual hardware. So yes, it cannot be considered low level.
You don't need to have VS2019 installed to use Core 3.0. If you can reproduce this perf issue in 3.0 we'd love to try and get it fixed. There is still time.
There have been a few other notable attempts to write an os in C#. If you're curious, look up Singularity or Midori. No C# code was mutilated in those projects.
((Task)Method()).Wait(); var task = (Task)s.Invoke(inst, new object[] { }); task.Wait(); 
Great post! Thanks
Right? There’s tons of times I’m writing some operation that has a lot of moving parts...factoring out processes into functions makes it clearer what is doing what (even if you comment the crap out of it). Local functions might make it such that private methods get reduced to only private methods that need to exist at the class scope.
I too have that experience. Trying to get the NBody test to beat GoLang on https://benchmarksgame-team.pages.debian.net/benchmarksgame/ I used SSE2 because ComputerBenchmarksGame doesn't have AVX. I tried to directly translate the NBody C++ #7 benchmark. https://benchmarksgame-team.pages.debian.net/benchmarksgame/program/nbody-gpp-7.html Not only can I not get the correct answer, but it's slower. (If you know where I went wrong and why I'm getting the wrong answer it'd be much appreciated). It was WAY slower if I directly translated the `r` variable to using 1000 elements. Only 10 is needed though so that helped a lot by minimizing it. I also optimized it by moving that allocation into the calling method, which seemed to help a lot. https://github.com/DerekZiemba/ComputerBenchmarksGame/tree/master 
Whats this do? Looks very complex.
You can’t envision using it where you have an operation that takes 10-20 lines to perform but you want to use that operation recursively? One line in your recursive call for all that code makes visualizing the recursion much easier....especially for the people coming in after you.
normal call and reflection call, the point is Task.Wait() method
This is a bad idea. This contributes to thread starvation. Dont do this.
call Task.Result it will run as sync private async Task SomethingAsync() var getValueFromAsync = await SomethingAsync(); var getValueSync = await SomethingAsync().Result;
A few years ago we did this with an ODBC driver. C++ side was just a wrapper and all the logic was in C#. That thing is a tank and maintenance isn't a shitshow like it was in the old C++ driver
I find when people are talking about low or high level, they tend to be talking relative to an implied comparison
It's convention, not requirement. Name them whatever you want....just be prepared for blowback from other devs if you don't follow convention where appropriate.
stackalloc zeros the data so the 1000 element one at the start of advance probably hits that; better to either stackalloc earlier in the call chain and reuse deeper, or heap allocate and then reuse that reference (e.g. pool it) For the wrong answer there's an issue passing a reference to stack memory to the intrinsics :-/ https://github.com/dotnet/coreclr/issues/22815
pure genius
Tangentially, I would say any `static void Main` that isn't program entry is a code smell.
In the context of a WPF application or Asp.NET framework web api this guidance will result in a deadlock. The synchronization context needs to be considered. The absolute most general guidance if you absolutely have to invoke an async method is to use Task.Run(() =&gt; ...)....This will ensure the method is deferred to a new thread pool thread in the thread pool and avoid the deadlock. You risk thread starvation amongst other issues, but it’s better than your app coming to a complete halt. Best practice is async all the way and avoid forcing a sync to async seam. 
&gt;Using the wait method is frowned upon in this establishment
You really just shouldn't ever willingly use Result or Wait()
Elegantly to the point. And wrong.
Let me do this here. Basically, this is all async and sync guidances written by an architect working on .NET. https://github.com/davidfowl/AspNetCoreDiagnosticScenarios/blob/master/AsyncGuidance.md
 await Task.Run({ // content elided for brevity });
Why are you afraid to expand it out? Your compiled code is exactly the same whether it's short hand or long form. Short hand is just [syntactic sugar](https://en.m.wikipedia.org/wiki/Syntactic_sugar).
Desktop link: https://en.wikipedia.org/wiki/Syntactic_sugar *** ^^/r/HelperBot_ ^^Downvote ^^to ^^remove. ^^Counter: ^^241631
But it would be helpful for everyone else if he followed whatever conventions the codebase uses.
Yeah, it really doesen't matter what the convention of the language is. As long as all members on the team agree on and use the same conventions as eachother. My current project has switched to the '\_' convention because the newer visual studios seem to keep insisting that's what we follow, and team members have just given into it. I much prefer our old agreed upon conventions, even if it wasnt what the default visual studio settings recommended (essentially, \_var for backing variables that are only to be accessed by their corresponding properties. m\_var for other members variables. s\_var for the rare private static variable)
This is how Java was born.
Just a tip. If you are calling doAsynchrounsly().wait, then do configureAwait(false) also if your result does not need to run on the calling thread. 
Unless you know what you’re doing.
TIL I've been misusing async methods grossly. Time to make a reminder to root out my usage of Wait().
Try var task = task.run(async() =&gt; DoAsyncWork()); return task.Result; Best is to async through though
Using ConfigureAwait to avoid deadlocks is really bad practice. Ideally you shouldn't block on any asynchronous code at all.
There is so much bad advice in here. Just don't do it, don't mix asynchronous and sync code together, you'll end up regretting it.
Fuck off with this spam.
A mad way to do it would be using Visual Studio's [T4](https://en.wikipedia.org/wiki/Text_Template_Transformation_Toolkit). Just create a file `YourClass_MaybeAsync.tt` in VS: &lt;#@ template language="C#" #&gt; &lt;#@ output extension=".tt.cs" #&gt; &lt;# IMaybeAsync[] either = new[] { new NoneAsync(), new SomeAsync(), }; #&gt; using System.IO; namespace YourNamespace { public partial class YourClass { &lt;# foreach (var a in either) { #&gt; public &lt;#=a.ReturnType("int")#&gt; &lt;#=a.FunctionName("YourFunction")#&gt;(int x, int y, Stream stream) { // Your code here... var z = x + y; var buffer = new byte[z]; var offset = 0; var count = z; var bytesRead = &lt;#=a.CallFunction("stream.Read")#&gt;(buffer, offset, count); return bytesRead == count; } &lt;# } #&gt; } } &lt;#+ public interface IMaybeAsync { string ReturnType(string name); string FunctionName(string name); string CallFunction(string name); } public class NoneAsync : IMaybeAsync { public string ReturnType(string name) =&gt; name; public string FunctionName(string name) =&gt; name; public string CallFunction(string name) =&gt; name; } public class SomeAsync : IMaybeAsync { public string ReturnType(string name) =&gt; $"async Task&lt;{name}&gt;"; public string FunctionName(string name) =&gt; $"{name}Async"; public string CallFunction(string name) =&gt; $"await {name}Async"; } #&gt; 
&gt;move the stackalloc to Main and then pass the pointer to Advance; so you are only stackallocing once, not once per iteration. In the SSE2 version I did that and it improved a bunch, but still slower than non AVX. I dislike the fact the CLR can't figure out that type of thing itself. Also dislike how you can't easily allocate static fixed arrays and what not. I suppose it's prolly because dotnet HEY! I started typing this a while ago and never hit send. Try to fix tomorrow! 
I repeat part of the quote: &gt; a programming language that provides little or no abstraction from a computer's instruction set architecture—commands or functions in the language map closely to processor instructions. CIL instructions like `throw`, `unbox` or `newobj` go **far** beyond that.
&gt; MSIL is a low-level programming language that provides little or no abstraction from a computer's instruction set. How are instructions like `throw`, `newobj` or `unbox` close to the computer's instruction set? Those are pretty large abstractions.
A lot of people think that way because the term is being used murky more and more. But it has a well known definition. It's just being used wrong very often.
Even if it compiles directly to machine code it remains a high-level language.
Hence why I said in my first comment: &gt; When someone asks a question like this they should always clarify what they mean with "low-level language". The term has a meaning, it's just often being used wrong by people that think of a different meaning. That always adds confusion. 
TypeScript, any cloud host, containers and CI/CD (DevOps). 
I'm not entirely sure what you trying to get, but if I interpret right, you want to call an async method from a regular one? In this case: async void MethodAsync() { await Whatever(); } void Method() { Task task = MethodAsync(); task.Wait(); } // With return type: async int FunctionAsync() { return await DownloadInteger(); } int Function() { Task&lt;int&gt; task = FunctionAsync(); task.Wait(); return task.Result; } // Parallel waiting for multiple asynchronous function: async int Func1Async() =&gt; return await DownloadInteger1(); async int Func2Async() =&gt; return await DownloadInteger2(); int FuncSum() { Task&lt;int&gt; task1 = Func1Async(); Task&lt;int&gt; task2 = Func2Async(); Task.WaitAll(task1, task2); return task1.Result + task2.Result; } &amp;#x200B; &amp;#x200B;
I don’t think you understand how any of this works. The .NET Framework is a Windows framework, not a machine framework. Operating systems understand C#, not machines. You can’t use C# without having the framework installed. How you going to install the framework without an operating system? &gt; No C# code was mutilated... Yes it was. The code is converted and translated so much that you can’t even tell what it was before compilation. C# is not machine code, it’s application code. This is as worse as you saying there have been notable attempts to making an operating system in PowerPoint.
I endorse this page, as somebody who has actually done a surprising amount of the "bad" things on that page. The "bad" items are not all incompatible with success (even the things labeled as "**ALWAYS** or **NEVER**), but they *are* all incompatible with a stress-free lifestyle.
completely agree with that. this was in response to author's question when they just need synchronous version and have to do it.
As someone that does interviews, for the shop I work in, C#, some kind of JS, and some kind of database are really what I look for on a resume. That being said, if you don't know JS at all bigger places will have a place for you where you might not have to write JS. Almost more important to knowing the language is being able to learn a language. If you're given a project and told to do use a language, are you reasonably going to be able to complete the project. Also, don't lie about your skill in a language. If you don't know something, don't pretend that you do.
Where is it loading the data from? Why does it take 30 seconds to load 10k items? Is it the Telerik that's the bottleneck or the load from db/network that's slow? Telerik should be able to do that fast, so I'm going to guess that's not the issue here, but do benchmark and say if that's wrong. So if we're looking at loading, are you loading expensive items? Is there a high composition cost, like pulling 10k items from half a dozen related enormous db tables? Are you loading more than you need, for example, are you loading an object with 200 fields where you only need 5 for the grid? Ignore the async aspect initially. You need to benchmark getting the items from their source and putting them in the grid. Async will just give you a mechanism to make the app responsive while you're loading, so ignore it for now, we're only interested in why it's slow to load and populate. Any help?
which cloud hosting can be used to host asp mvc sites? 
Azure would be the go-to, but AWS, GCloud etc also support .NET
alright
I'm on the same boat, I'm a senior developer but I've only been working on desktop WPF apps. On the side I've made a pizza delivery website using asp.net core, it was quite a learning curve and I'm familiar with html and css. However, you're still using c# but it's a different approach, It took me a 3 months to "get it" working on it an hour a day, using services and domain driven design. I believe there is a basic course on pluralsight for asp.net core by Scott allen, it's good but quite basic. As a junior just go and learn as much as you can. The mobile world isn't something I know anything about. Get into it sooner than later and you'll end up figuring it out. Good luck!
Google for "data virtualization". This technique should allow you to have only the data that are currently visible on UI without getting the rest from DB (or whatever datasource you have)
I can visualise the former... but if it’s 10-20 lines I would want the functionality split off to a proper function/method
Hi there. I did spot the Bottleneck, the source is from an SQL query, the "naked" query itself takes about 25 seconds for 10'000 items because we use triggers to make it synchronize with an app from the late 90's. I understand this is a problem but there's nothing I can do about it as we will not modify the earlier version. What I'm trying to do is load the grid progressively, knowing I can't really improve performance in this situation, to subjectively make the user experience improved by loading the grid progressively. 
Yes don't use wait()... Or if you are really really sure...
A library that i personally use and love it because of it's simplicity and easiness. You can check it out [Office Word](https://www.officecomponent.com/products/word). You can easily utilize in your c# application. You can use it to easily convert html to word, image to word, pdf to word and much more. 
Yes, I've already looked into it but due to legacy with an old app it's not possible in my case. I had discussions with the Telerik team but I'm now at this point.
Second monogame. It very quick to get a prototype going and pretty powerful.
.NET Core, Entity Framework... and Angular
It depends where the data is coming from, but if possible you can break the request into smaller batches and call OnPropertyChanged (or Refresh or whatever works) after each batch. Experiment with different sized batches. Another thing (depending on data source) is to run a reduced query first, load each item with that reduced amount of data (if they were people, you could load first name, last name, and forget their photo for now), then do the same with the rest of the data.
What prevents you from just adding items one by one to the ObservableCollection as they arrive?
For creating something simple they have so much overhead and a huge learning curve. Something being old doesn't mean it's bad. It's not like it hasn't been updated since it came out. WinForms is still very widely used at enterprise level so knowing it is still useful. Plus wpf came out with .Net 3.5 it's not exactly new. And core now supports WinForms it's far from end of life.
So many bad decisions. https://gist.github.com/ChrisMcKee/6664438 is one of the best ways. 
The data source is an SQL query. I'm not sure how to make it populate the ObservableCollection by batch, it is already loading the minimum info with onpropertychanged implemented. The info is only text or numbers in this case. Since you mention loading it batch by batch how would I do that? I'm probably missing something obvious which I'm not aware about ..
This is what I'm trying to do but somehow haven't figured out, I populate the ObservableCollection from an SQL Query.
is it possible to paginate, the data? Do you need 10000 rows all at once? because my lord. &amp;#x200B;
I've done this in other grids but in this case I need all the info at once. Sum Calculations are done at the bottom which require all rows to be loaded. Yes my Lord haha :)
Get IDs for all rows Group these IDs into batches foreach (var batch in batches) { Run query to get all data for all IDs in batch; Update UI; }
Try doing this: for each row returned by query, add row's data to ObservableCollection, then update UI If you get this right then you should have some kind of progressive loading
Ok, this means I need to tweak the stored procedure from SQL. Not sure I have the permissions to do that but I'll look into it thanks!
This belongs on SO, not here. 
My preference in that scenario is to use regions. Doesnt make sense to me to abstract and encapsulate just for the sake of readability if there are other ways of making code more readable? 
Having read your comment about the bottleneck, you either have to modify the procedure or find some other way to get your data.
SQL. Yes you can use an ORM for productivity and for ease of use in your code base, but if all you know is that ORM you'll have a tough time dealing with db issues that pop up.
What is considered best practice if you are writing a library which consumes async functions like a Rest API but needs to support being called in a synchronous fashion if the person is utilizing it in an async application? I know many libraries provide both DoSomething() and DoSomethimgAsync() options but how are those handled under the hood?
Honestly, this sounds like a waste of time - especially if the existing code works and has been tested.
How is it that triggers are the bottleneck? Those won't be running if you're just queuing data via `select` statements. If you are having to run update/delete statements when generating your final dataset, you should determine if these statements require that the triggers be executed. If they don't, look at building a temp table in memory and running your update/delete statements against that. This allows you to skip the triggers. 
What is considered advanced or not?
It seems your bottleneck is your query, but you could also look into using the TPL dataflow library instead of Blockingcollections. https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/dataflow-task-parallel-library
Inside c#, it is good to know ASP.NET for web work, one or more DI container (there are dozens, so don't worry about picking the "right" one for your job interview), a unit testing framework like NUNit or XUnit, some kind of Database abstraction like EF or Dapper. It would be nice if they are familiar with a Mocking framework (Moq, NSubstitute, etc) and a logging tool (NLog, Serilog, log4net). Outside of C# itself, I would want hires to know something about building, deploying and operating their code. So that means a build tool such as TeamCity, deployment tools like Octopus, and logging platforms like ELK
But can't you make that argument all the way down to even calling the different flavours of Assembly an abstraction of machine code, thus not a low level language because you can just write 'jmp' and The assembler will expand that to the 2 or 3 instructions or machine code it corresponds to.
not basic stuff like datatypes, basic OOP, Hello-World... this first tutorial stuff
If you've got more than one user, create a server service which precaches the rows. Have the user WPF apps query the service. You have two further options here. You need to find out what new rows have been added or updated. This is pretty simple, but the choices are doing it on a schedule, or checking if there are new rows when the client request hits the server. If you only have one user, the process is the same. Actually the code is the same. Precache maintain a range of ID's and this will allow really simple paging. Someone below suggested getting the min and max ID's and then breaking that into batches. This will give you simple batching and certainly works, but I'd still suggest offloading the loading to a service. It's relatively simple from there to turn it around and have the service notify the clients when new rows are available, which may also be a requirement for you (no idea on that :) )
Since you can't change the query can you cache its results in memory or to a cache server (e.g. Redis)? If the query is the same for all users, or even similar for a large group of users, you can batch run it earlier and cache the results where you can execute a faster query to get them in real time.
Frankly if the data is taking 25 seconds to return from the database the Telerik control is the least of your issues. Fix the data retrieval then worry about the ui performance 
Unless I am missing something, you never define any inheritance between parent and child. It should be public class EditModel : CreateModel { I say that, but I don't particularly like the idea that edit is a child of create. Seems off to me, but that's just my opinion.
Yeah, Create and Edit should probably just be methods on a User class, not their own class. I think you are just trying to make this more complicated than it needs to be, but obviously I don't know the problem you are trying to solve.
So this is somewhat my bread and butter. The first issue you are going to run into is the SQL Query. Taking 25 seconds to return 10,000 rows means there probably is some optimization there. The main issue is that you cant even start to worry about how to progressively load the grid because sql server will not start returning rows right away. There will be a non trivial amount of time that sql server is just sitting there spinning and your app will spin as well. Solve your data problem. once you have the data problem solved, spin off a new thread (task.run works here, its not exactly a new thread but will work better than old school threading) and use an observable collection and stream the data from the new thread into the observable collection as the data comes in. This will have the affect of rows slowly loading into the grid. Then using callbacks and context passing (UI thread only thread able to update the UI issues) you can update the total columns once all the data is loaded. but again, the issue is that you dont have your data for 25 seconds so any small gains you can get on the app side will pale in comparison to knocking the query / proc down to sub second if possible.
[https://www.amazon.com/Design-Patterns-Software-Paperback/dp/0321718933](https://www.amazon.com/Design-Patterns-Software-Paperback/dp/0321718933) [https://www.amazon.com/Dependency-Injection-Principles-Practices-Patterns/dp/161729473X/ref=sr\_1\_1?keywords=dependency+injection+c%23&amp;qid=1551534365&amp;s=books&amp;sr=1-1](https://www.amazon.com/Dependency-Injection-Principles-Practices-Patterns/dp/161729473X/ref=sr_1_1?keywords=dependency+injection+c%23&amp;qid=1551534365&amp;s=books&amp;sr=1-1) [https://www.amazon.com/Pro-NET-Memory-Management-Performance/dp/148424026X/ref=sr\_1\_2?keywords=c%23+compiler&amp;qid=1551534402&amp;s=books&amp;sr=1-2](https://www.amazon.com/Pro-NET-Memory-Management-Performance/dp/148424026X/ref=sr_1_2?keywords=c%23+compiler&amp;qid=1551534402&amp;s=books&amp;sr=1-2) [https://www.amazon.com/NET-Development-Using-Compiler-API-ebook/dp/B01HT1DO9G/ref=sr\_1\_33?keywords=c%23+compiler&amp;qid=1551534475&amp;s=books&amp;sr=1-33](https://www.amazon.com/NET-Development-Using-Compiler-API-ebook/dp/B01HT1DO9G/ref=sr_1_33?keywords=c%23+compiler&amp;qid=1551534475&amp;s=books&amp;sr=1-33) ... just to name few ... 
I'm currently working on the 1.1.0 release of [Reddit.NET](https://github.com/sirkris/Reddit.NET). Should be ready in the next couple weeks or so.
Unit testing, react and/or angular, webpack or equivalent, mvc/webapi. 
I repeat part of the quote again: &gt; little or no abstraction from a computer's instruction set architecture The different assembly languages usually map almost 1-to-1 to processor instructions. A `jmp` is usually a single instruction. Sure, it's still a somewhat blurry line. But I'd still argue that something like a `throw` or `rethrow` still goes far beyond even the blurriest of lines.
It sounds like I've been doing this wrong. I use a lot of return Task.Result and rarely use CancellationTokens. Real life issue: I have a WPF application where the user clicks buttons to either import a file or read from a database. Either operation is then followed by some custom CPU-intensive processing. I've been using ICommand to databind user input to an async method in a ViewModel, which brings up a progress bar and then awaits various async Tasks on a Model class. The model class is like a controller, it then awaits Dapper's QueryAsync and awaits Task.Run for the CPU-intensive work. The Tasks pass around a progress completion object so that they can report percent complete to the main Model class that then fires a StatusChanged event that the ViewModel handles. The VM sets public properties that NotifyPropertyChanged back to the UI. The goal is for the user to click a button, watch the animated progress bar through completion, and then return to control of the application. And it appears to work. But now I'm questioning my methods...
SQL is a must, maybe another type of nosql db.
Sum calculations shouldn’t require all rows to be loaded you should be able to run a count query at the same time as getting a page of data from the api. 
See this: https://stackoverflow.com/questions/9350467/how-do-i-write-one-to-many-query-in-dapper-net/30080951#30080951 Essentially, hand-optimize the SQL query so it's fast. Then use this glue code to pull back the result. If Entity Framework is involved, or most other ORMs, then this will make everything an order of magnitude slower.
Treat them like software interrupts. I mean, that's exactly what x86 does for exceptions like page fault, invalid instruction, etc.
To tell the truth, this list is why I've tried to avoid writing stuff with the Task API. Maybe I just got used to The Old Ways because I did them for years. But The Old Ways didn't have public, obvious API like `ContinueWith()` with **AVOID** attached. The very next bit runs into the other problem I have with the Task API: as an API developer, I have to go off the happy path and use extra options because the person who consumes my API can make innocent mistakes that will cause *me* to deadlock. I very much prefer Rx or just continuing to use the "old" patterns like EBAP when I can. They have sensible defaults and ask you to use non-default options in edge cases instead of the happy path. That feels more like an API designed for human consumption than a first attempt that was never iterated.
I prefer sql in a lot of instances. It can be way easier to debug a sproc than debugging something like EF. 
This is exactly what Reactive Extensions was made for, but I don't know if it would be possible given your current bottleneck is the query itself.
Why can’t you introduce a new stored procedure and modify the guts of it to support paging. This is called semantic versioning 101. The existing legacy apps are unaffected and now new consumers can benefit from the improved one. 
Removed: Rule 4.
Your best bet here is to push back and insist it is Async. REST calls can go on for a long time or, in the worst case, forever. You probably want to allow users to cancel operations and/or configure timeouts. You can do that with a single synchronous call, but I'd much rather deal with an async pattern for that. I've done it before in an CLI where there was no real reason to treat things as asynchronous. That was a case where the engineer in control (me) decided the script was simple and dumb enough that none of the concerns around stuff like using `Result` applied. The instructions were "if it takes longer than 10s, CTRL+C and try again". I've tried to do it in a bigger application and it just doesn't work. You don't want to touch the network without timeout support, and trying to make it look synchronous dramatically increases the difficulty of that feature. (Personally I prefer to use Rx or the Event-Based Asynchronous Pattern. I feel like their happy paths support these features with a lot fewer, "Remember these non-default configs or your client can deadlock you.") 
10k rows. Is a very small number. To give you an idea, we worked at some data virtualization where we would only partially load the data into the view. The size of that UI view was ~1000. 10k should require no special gimmicks. Fix the data retrieval to be fast, the of it's not fast enough then cache it and bind the UI to the in memory cache. The totals don't have to be made by telerik. You can do the totals separatelly, bind them at different times, so when you start to load the rows you at least show something, then at the endnyou show the totals
Yes to caching. Time delay the data. Rerun the query when the data changes or periodically. Store the results and when they were last updated (so you can let the user know how up to date it is). Point your grid at the denormalized results. If they need the fresher data force a refresh and let them know it'll take 30 seconds.
Just install reddit.net and follow that example, it's pretty easy. Are you having a specific problem?
I wrote the answer, not the question. I also wrote Reddit.NET. =)
I’m happy to look at your query for you, but C# has no magic solution to make the database query run faster. If it takes 25 seconds in the database query tool, it will take a minimum of 25 seconds in the C# program. 
i have one word for ya: &amp;#x200B; yeld
Oh god I thought you were asking how and I was thinking that example is really good what the hell is going on!
Or Reactive Extensions
Lol thanks! I'll be releasing 1.1.0 in the next couple weeks or so.
You'll be damned if anyone uses this logic inside anything serious ':)
I guess it could be the font you use for displaying too.
I have that video you posted saved. I've been wanting to migrate my bot to this (from reddit sharp) for a while and just haven't had the time. 
Its not an issue of the font
NO- YOUR subjective feelings and experience are wrong! :) I spent a decade in another language that allowed them and never found a single usecase where I felt they were appropriate- I DID find a whole bunch of wtf's, and since we've got lambda's, I definitely don't see any good purpose for them. Maybe I'm missing it.
Does reddit.net support connections through proxies? If not it would be awesome to see that in the next version.
In what encoding are you trying to open this? Try to force your software to open the file using a different one.
Opening in UTF-8. Tried opening in other formats in notepad, wordpad, Rider but to no avail
Non-sequitir. If you're debugging an EF query, you'll probably be using SQL also.
Yes, but it is much easier to see what is going on with a stored procedure than it is to see what is wrong with your EF setup. &amp;#x200B;
Source? I know records were being considered, but I've seen nothing to suggest that they'll be in C# 8.
Where did you get this from? With notepad++, try to open it in Windows-1252. It could always have been corrupted in transit too.
Well according to the Github their implementation is in progress [https://github.com/dotnet/csharplang/blob/master/proposals/records.md](https://github.com/dotnet/csharplang/blob/master/proposals/records.md)
Was almost tempted to try instantiating an interface just to see the reactions from my co-workers.
Last changed 2 years ago and not in the 8.0 folder. I'm not saying it won't happen, but I'm still not seeing anything to suggest that it's happening soon.
Hmmm, I sure hope it will be. Maybe I should change my article to state that it is in progress and not finalised
Excellent post. I'd add knowing language features can be useful as well to reduce mental overhead in reading code (the thing most of your time is spent doing)
It's an easy mistake to make, they aren't always clear on which items are going to hit which feature. The reason I caught it was because it's literally my job to watch for this kind of stuff so I have a lot of practice.
Problem is, I am now trying to open my site to edit it and notify that it has been probably postponed. But I get a resource limit reached because I posted here and everyone is accessing my site now......
For reference, I'm using c# for web services, My sql, typescript and JavaScript for FE. 
https://github.com/MoienTajik/AspNetCore-Developer-Roadmap/blob/master/aspnetcore-developer-roadmap.png
Yes! Exactly what I was looking for. Thanks so much!
&gt; ConfigureAwait &gt; TDB :(
Alright this file came from a zip file, and I used the standard windows zip tool to unzip it. I tried it with 7zip and it shows up correctly
I just upgraded my hosting to deluxe and still resource problems. Dammit
I would yield help? can you elaborate?
To update. Unfortunately I cannot edit the title. C# 8.x will include this, not C# 8
I get your point, now I'm realizing whatever I do there won't be any practical solution unless I can optimize the original SQL query. If the query hangs for 25 seconds before giving out any data then that's where I need to start. Thanks!
Sounds like a case of mojibake: [https://en.wikipedia.org/wiki/Mojibake](https://en.wikipedia.org/wiki/Mojibake).
Can you add a spinner while it loads? Since you need aggregates you're going to have to wait for the whole collection to load anyway, it doesn't sound like an "infinite scroll" problem that Observer pattern will be super useful at solving. You need the whole set to aggregate. Whether you do your sums in SQL with PARTITION or in memory in your .Net after loading probably doesn't matter much. 10k rows is likely not a huge issue either way. And with regards to your edit, yes, that may be the best thing to focus on, but a spinner/throbber may help with user experience even if you reduce that to 5 seconds. 
10k isn't that insane, IMO. 
If the set is "worked" on by the user it may be better to just cache the whole set in the app. Paging and counts may require a second query or double reads in your execution plan. SQL can and likely will cache internally, but you could end up hitting SQL repeatedly without reason. Depends on what the intent or operation the user is doing here. You may run into contention issues with SQL and the apps in-memory set if this is some sort of "to-do list" for the user that other users may also work on. OP isn't giving quite enough detail to determine, but skip/take and full set counts in SQL can increase load.
I see you got downvoted by someone, any idea why this parallel wait would be bad?
Well yield is what creates the ienumarable, that's a rough definition but imagine a data stracture like a list only that its items are fetched off of memory or io operations as iteration traversed them. Linq often produces such entities, when you sort (sort by) a list for example, you won't get another list back, you get an ienumarable, that you'll have to convert it (to list) that's because the affirmationed sorting is "promise" to a stream of data. There is a nice in depth course on this provided by Microsoft that will help you understand more. But Microsoft retired it recently. It was called "demystifying linq" And it is worth checking out of you get your hands on it. In quick layman's terms in a content of a practical use like dB io. When you execute something like an sql query the lines are often returned one by one by the adapter/reader, each time you can call yield return to feed back the item and the execution control to the calling function, this way you can update the ui in between of acquisitions of data. Think of yield as an exotic return statement that "fills a Bottle drop by drop and whenever a drop is ready" In opposition to return that just returns the whole chunk at one. 
You could do that, or just cache in the app, depends on what is going on. I think we'd have to get further into the weeds of the business operation here. I'd worry about contention if other users in the system are expected to be modifying the data at the same time. 
[removed]
Well, generally SQL returns sets, you can use SqlDataReader, but given he needs aggregates, one way or another SQL needs to read the entire set anyway. I'm not sure this is going to help too much. https://stackoverflow.com/questions/13045481/streaming-read-of-over-10-million-rows-from-a-table-in-sql-server Important comment there is that SQL may outperform your own attempts. 
There's no trigger on SELECT in SQL Server (which would be immensely dumb anyway) but you may see if you can create a new SPROC or view or something instead. I don't see how progressive loading helps when you need aggregates on the entire set. Something, somewhere needs to run the aggregate, whether you do this in SQL or just in-memory in .Net, neither of which should be a big deal with 10k rows. A spinner makes more sense to me, along with a harder look at optimizing the SQL query/sproc. I think there's a bunch of business process context we're not exposed to here that is driving the current design and we'd have to get into the weeds of the why it is done the current way, more info about the underlying data structure, etc.
Like Java, C# is compiled to an intermediary language, it is not compiled into assembly language by a compiler. Generally when people talk about low level languages they mean things that compile to assembly, dont use garbage collection, and are statically typed. They also assume close to assembly language level performance. 
Heh, I had the same thought at first :p
Thanks I'll be looking for that.
[AdaptiveClient](https://github.com/leaderanalytics/AdaptiveClient) - Library for creating a scalable service layer. Almost [4000 downloads](https://www.nuget.org/packages/AdaptiveClient/). I will be releasing 1.00 as soon as I get a bit more feedback.
&gt; you arent running C# on a microcontroller. Might be running it on an IoT board though https://github.com/dotnet/iot
Very good. 👌
May as well just run it on Python then if you have no overhead requirements.
In theory yes, `c = 5 + 10` is more efficient but I'm pretty sure modern compilers are smart enough to see that if you're only gonna use a variable once within the scope, it might as well replace `a = 5; b= 10; c = a+b` by `c = 5 + 10` before doing any actual compilation. I'm sure someone will more specific knowledge than me will chime in tho
So programmers that litter their code with them for readability know the compiler will end up simplifying them?
Well, compilers can only do so much. At some point there's gonna be a trade off between efficiency and readability but this isn't the 60s anymore, hardware is cheap but developper wages are not. Making your code more readable even if it becomes slower makes sense when you work in a huge team and someone else down the road might need to debug your code. Saving a few milliseconds of run time might make you waste days trying to understand and debug the code. 
That and hardware is extremely fast these days as well. I understand the performance difference is not noticeable but I’m still interested in the question though.
Without plugging this into Visual Studio myself, making a few images to test with, and seeing what happens I can only think of a couple things you could try to determine what is going on. Since the code on all four of your buttons are essentially the same, I would suggest putting a breakpoint in your change_animation_Tick to verify that the correct file is being selected. Second, I would verify that your images are correct for the up and down directions.
dun dun dunnnnnnnnn
&gt; I see you got downvoted by someone This is Reddit, the worst piece of shit community all over the entire internet, so no wonder... &amp;#x200B; Also, it wouldn't be "bad" it is the standard C# way on handling async operations in synchronous context. No idea why I got downvoted, obviously some "I'm smart" retard not understanding a copy-paste code.
It's likely that if you ever need to think about this level of performance, C# is the wrong language to be using. In a large number of applications you'll be spending many, many orders of magnitudes more time waiting on I/O than on stack allocation. But, if you're just curious, I can try to explain some of the concepts. Keep in mind that C# ultimately is run using a JIT compiler. That is, the human-readable code you write is compiled down to an intermediate language (IL), which is then run using a just-in-time (JIT) compiler on the common language runtime (CLR). So there are two questions: - Does the static compilation step to IL optimize out the un-needed allocations? - Does the JIT compiler optimize away the un-needed variables? dotnetfiddle claims to be able to show you the IL, though I've never actually tested it before. For [your code examples](https://dotnetfiddle.net/qmcQ2w), the two methods have different representations, and it seems that the IL preserves the extra allocations. Here's a [SO post](https://stackoverflow.com/questions/3326571/how-can-i-view-msil-cil-generated-by-c-sharp-compiler-why-is-it-called-assemb) covering some other ways to view the IL. I am not aware of an online tool that can show you the JIT code. But [in this SO post](https://stackoverflow.com/questions/2410181/how-to-see-jit-compilated-code-in-net-vm-clr) is an explanation of how to view the JIT generated code. Keep in mind that JIT compilers can optimize in surprising ways. They can examine how code actually gets executed, and generate versions that are optimized for specific inputs they observe getting used in practice. [An overview here](https://hacks.mozilla.org/2017/02/a-crash-course-in-just-in-time-jit-compilers/) of how javascript JITs can work.
Thanks, I appreciate the help.
Hope noone will ever see this blogpost.
Check out ILSpy (or a similar program). It'll show you the C# code that Roslyn creates (Roslyn will make changes, but most optimizations are done at runtime by RyuJIT). More than likely, Roslyn would change example 2 into example 1 anyway. 
One word. Identityserver4. Check it out. 
You are pure evil. 
I have a particular co-worker that always finds the most bizzare way to do simple things. If he reads this post we're doomed.
I'll look into it. Thanks. 
Thanks again guys! it was a busy week with work but the weekend is here and i was finally able to really sit down and try the suggestions. I don't think this matters, but let me add that I am working in unity/visual studio. i think my only limitation is that 3rd party libraries are more difficult. hopefully I'm not completely wrong and wasted some of ya'lls time. I tried this code... async static void stepTwo() { string auth = "my auth code here"; string api = "my api key here"; string data = "grant_type=ecobeePin&amp;code=" + auth + "&amp;client_id=" + api; using (HttpClient client = new HttpClient()) { using (HttpResponseMessage response = await client.PostAsync("https://api.ecobee.com/token?",new StringContent(data))) { using (HttpContent content = response.Content) { string mycontent = await content.ReadAsStringAsync(); Debug.Log(mycontent); } } } and I get this response.. { "error": "invalid\_request", "error\_description": "The request is malformed. Check parameters.", "error\_uri": "[https://tools.ietf.org/html/rfc6749#section-5.2](https://tools.ietf.org/html/rfc6749#section-5.2)" } &amp;#x200B; Getting the response is more than what I was seeing before so it seems like we are going in the right direction. I downloaded i8beef's API wrapper that someone mentioned at the bottom to see how they were doing it, and could not quite figure it out. it seems they were using "HttpRequestMessage"? I also noticed in the line below that there is a "?" after "token" which is not present in the example...? i did try this, as you can see in the code up top. (Code from i8beef's library) var requestMessage = new HttpRequestMessage(HttpMethod.Post, _baseUri + "token?grant_type=ecobeePin&amp;code=" + authCode + "&amp;client_id=" + _appKey); I can try to import and use this library in unity but I would rather stick to doing my own. In response to the side note, I am using a lot of "using webclients" and "disposes" in my code for other devices i have gotten to work. I am going to go through and start cleaning those up today. thanks for the suggestions and link to explanation. Thanks again for the help guys. &amp;#x200B; &amp;#x200B; &amp;#x200B;
Yep, I was easing into the cache option ;) 
Okay, I’m already well aware of decompiling, dotPeek is also better. I know that compilers do tend to optimize code but I never looked into how far, or what extent. My question is more memory efficiency related vs actual performance. I’m into micro optimizing as the library I’m working on is a table collection that can collect thousands beyond thousands of cells of information, organizes them, style them, then outputs the data. My library came down to two aspects, either I write it to be memory efficient and dim down the performance, or I write it to be extremely high performing but be less memory efficient. To me, neither are acceptable solutions so I’m doing my best killing hours of work here to get the best of both worlds by optimizing everything to the best of my ability no matter how deep I can get. But along the way it really got me curious about the inner workings of stack and heap and efficiency between the two. So this is all pretty much new stuff to learn for me.
There are two major compilation steps that completely transform the code in ways that make the structure of the C# code unrecognizable. Local variables in C# will not be translated 1:1 in the code that is actually running, and ultimately data always needs to be stored *somewhere* regardless of whether that somewhere has a name in your code. First, the compilation from C# to IL. IL is a stack-based language that works very differently than C#, and while it still recognizes local variables, it doesn't necessarily use them the same way C# does. The second one is the just-in-time compilation of IL to machine code for the platform the application is running on. Here, all bets are off and the JIT compiler is allowed to do whatever it wants with the code as long as the result is right. It might not even use the stack at all if the data always fits into CPU registers. One caveat here: debug builds behave very differently than release builds (with optimizations enabled) in this regard. Debug builds retain all intermediate variables so you can inspect them in the debugger. [sharplab.io](https://sharplab.io/) is a very useful site to see what's going on behind the scenes, if you're curious about this kind of stuff. You can view the compiled IL, the decompiled C# equivalent, as well as the x86/x64 machine code. Your original public void Method1() { int a = 5; int b = 10; int c = a + b; } turns into this rather nonsensical IL: .maxstack 2 // method needs two slots on the stack at most .locals init ( [0] int32 // just one variable here ) IL_0000: ldc.i4.5 // put the constant 5 on the stack IL_0001: ldc.i4.s 10 // put the constant 10 on the stack IL_0003: stloc.0 // move 10 from the stack to the variable [0] IL_0004: pop // clear the remaining value from the stack IL_0005: ret // return without ever having performed the addition The JIT compiler then turns that IL into this x86 machine code: L0000: ret So it recognized that nothing useful actually happened in this method since none of the values were used anywhere, and got rid of the entire code. Modifying the code to return `c` so it won't get optimized out completely: public int Method2() { int a = 5; int b = 10; int c = a + b; return c; } - .maxstack 2 .locals init ( [0] int32 ) IL_0000: ldc.i4.5 IL_0001: ldc.i4.s 10 IL_0003: stloc.0 // not sure what the pointless variable is for IL_0004: ldloc.0 IL_0005: add // now actually does an addition here IL_0006: ret - L0000: mov eax, 0xf // move constant 0xf (15) to a CPU register L0005: ret JIT optimized the entire method into a single constant, and still doesn't use the stack in the actual machine code. Next try: public int Method3(int x, int y) { int a = x; int b = y; int c = a + b; return c; } - .maxstack 2 .locals init ( [0] int32 ) IL_0000: ldarg.1 // no constants anymore, loading method args instead IL_0001: ldarg.2 IL_0002: stloc.0 IL_0003: ldloc.0 IL_0004: add IL_0005: ret - L0000: mov eax, edx // move value between registers L0002: mov edx, [esp+0x4] // move value from stack to a register L0006: add eax, edx // add those two registers L0008: ret 0x4 // return and clean the stack So this time the JIT actually uses the stack, although the value would be placed on the stack by the method that calls `Method3`. --- TLDR: The actually executed code looks nothing like the C# code. Write code in the way that makes it the most readable for yourself, let compilers do their job. If you're *really* worried about a piece of performance-critical code, [benchmark it](https://github.com/dotnet/BenchmarkDotNet) against alternatives before making any decisions.
Wow, thank you for the explanative write up. But the variable c in the example is a local variable, all method1 does it sets it using two pre defined variables. The example wasn’t designed to return anything. Learning this is fun, I’ve been taking a lot in about MSIL and JIT, it’s all so damn interesting.
Stopwatch is great, but using other performance tools are probably better. I've found that sometimes just using raw timing doesn't tell you the whole story. Looking at how long each operation on the call stack took tells you what you really need to know.
What a code review that will be 
To be fair I laugh but I had to do this only a few months ago to do some COM interop with Acrobat reader... I took a lot of explaining before that PR was merged 
I would compose a computer out of components. Each component has one specific task, like the hardware in the computers we use. A computer is such a monolithical object when it comes to computing that I don't think it should serve as anything more than a collection of components that can be added.
I don't know the answer I'm afraid but I do know that the .NET framework had a BCL type called BigNumber that is designed to handle numbers larger than 2^64 (I think that's where it comes in to it's own, again not my strong point) but maybe check out the source for that and see how they do it 
Thanks. Just recently I’ve been meddling around with step into and noticed that each task displays the amount of time in milliseconds it took to complete. Would you say those times are accurate?
This sub gets so many questions that belong in SO, I think we all just assume OP is asking at this point 
This is a great simple answer and gets the idea across perfectly. You have a computer class. That's classes responsibility is orchestrate it's components (and provide an API to interact with them you could say as well). Then you have other classes that the computer class has instances of and delegates work to. Such as any network stuff should be pushed into another class (which in itself could be composed of other things) then that class can know about IP addresses and mac addresses etc. SRP is something to strive towards and IMO can never be 'achieved' as there is always another level of abstraction you can add, but at some point it makes it more complex that it needs to be. Remember SRP can be reworded to 'A class should have one reason to change' I always find that view point more useful and practical 
So we have vb, telerik, database triggers, big unwieldy data... Yeah, this sounds like the perfect time to add threads into the mix.
The tools in visual studio are nice, but there are 3rd party ones line red gates performance profiler, or JetBrains dotTrace that I feel like are more accurate and better.
It would need to be stored on a hard drive. Whether that’s a text file or not isn’t important because it would be binary anyway. 110100000010101010110100100001101100111011011100000000000000000 That would be 7.5 x 10^18 in binary. You would need a custom way or library to handle calculations but storing large numbers doesn’t take up a lot of space. 
Compiler will take care of that. 
Only after fixing the database then seeing if that gives enough performance. Threading isn't bad and in this case is where I would go after to prevent the ui blocking and either put up a processing message or somehow stream the data 
O my god, thank you very much! I feel silly that I didn't think of that and I know I've done things like this in the past, I think I just got stuck on big-picture stuff. Like, that's it, I had my object and that was my only object. I really appreciate your insight here, thank you! :)
WinForms is still excellent choice for any .NET GUI project. Much less memory overhead compared to WPF. FYI. WPF is 10 years old :)
Thank you very much for your time and insight further explaining MaxPlay's response, you helped me very much! It makes sense to me now, sort of compartmentalizing things, because most things are made up of smaller parts that have their own function. I feel silly that I didn't think of this sooner; I know I've done things like this in the past when working through tutorials and etc... I just kind of got my head stuck in one state of mind. Thanks so much for your response here, that's helped me a ton and I've already googled to try to further understand SRP regarding a class having one reason to change. Thank you!
It's what we do in the game dev business for years now and it works well. Glad I could help.
These kind of posts are like crack around these parts. We just can't get enough of new language feature news
You would store the number in scientific notation, or store it as the number it is which is extremely possible. The Windows kernel is about 30-50 million lines of code in one file with at least 500-800 million characters. It sits at a couple dozen megabytes. Understanding the size of data down to bytes will give you a much better prediction of how much is too much. So in essence, take one digit, find out how many bytes it is, then use that to calculate he total file size for whatever number you’re planning on working with.
Oh my! The holy grail of a learning pathway! This is getting printed and put in my wall! Thanks!
One thing did catch my eye in this which hasn't been mentioned is the With() method seems to show having default parameter values that are not constants. This would be a new and interesting feature. If this is all compiler magic anyway it could maybe be achieved by overloads with having to make language changes
Glad it helped :)
Files are files, there's nothing inherently special about them. Text files are just files whose contents are in a recognized text encoding (ASCII, some Unicode variant, EBCDIC, etc). You can create your own file formats, or use a pre-existing one that meets your needs.
&gt; So I know when you declare a variable it is stored on the stack. Whoa now, you're already off to the wrong start! This isn't even close to right! It would be more accurate to say "when a value needs to be stored in memory, the compiler prefers to use the stack if it can". Not every local variable in C# can be stored on the stack at all (e.g. variables captured by closures) many things that are not variables still produce values that need to be stored in memory, and many things that are variables do not need to be stored. Let's look at [your example](https://sharplab.io/#gist:3a719dc47e5d68796692fbf1c3b42d21) more closely (tweaked slightly to prevent optimizing it away entirely) ```cs public static int VersionA() { int a = ValueA; int b = ValueB; int c = a + b; return c; } public static int VersionB() { return ValueA + ValueB; } private static int ValueA; private static int ValueB; ``` And here's the x86 JIT output: ``` VersionA() L0000: mov edx, [0x2b5f1f40] L0006: mov eax, [0x2b5f1f3c] L000b: add eax, edx L000d: ret VersionB() L0000: mov eax, [0x2b5f1f3c] L0005: add eax, [0x2b5f1f40] L000b: ret ``` Somewhat surprisingly, the two actually do produce different here (they do not with the x64 JIT). Version B logically contains one variable, in the EAX register, more than were actually declared, while Version A has two in EAX and EDX, fewer than were declared. However, neither version touches the stack at all! And while in this case the codegen for the version without the intermediate local variable is a bit more efficient, I have also encountered cases such as https://github.com/dotnet/coreclr/issues/19078 where the exact opposite occurs, and the intermediate variable coaxes out better codegen. Ultimately, the language constructs in the code we write are concepts that do not map directly to the machine constructs that are executed. While the mapping is for the most part consistent and predictable, it is also quite complex and some of the rules are quite subtle. If you want to micro-optimize some portion of your code, it is extremely helpful to directly inspect the resulting machine code. Sharplab.io is one way to do it; there's also the DisassemblyDiagnoser in BenchmarkDotNet, Core CLR JIT Dumps, [Disasmo](https://marketplace.visualstudio.com/items?itemName=EgorBogatov.Disasmo), [JitDasm](https://github.com/0xd4d/JitDasm), and others. (I'd recommend BenchmarkDotNet's diagnoser as a good starting point; it's pretty reliable, and conveniently available alongside excellent measurements)
Thanks. I’ve just been working on a library and am close to publishing it to GitHub and want it to be faster than the competitor. It was faster on my first try but then I went through my code and saw that I could optimize it to make it much more faster with added memory usage or I could keep it how it is, with less memory usage. The only people that are going to see an impact are those who are working with huge collections, so right now they are my target audience.
Could you not just load it item by item and add it to the collection?
The walking sound isn’t when I’d expect it to be but good stuff 
I hope you keep this up.
Wha is SO?
Stack overflow?
Because you’re doing TryParse, you are essentially Trying to see if it’s of type double or not. If it isn’t, it does not evaluate as true so your block I believe is being skipped. I don’t know why you are not providing better error handling.
I commented before but didn’t fully read the code. What you need to do is break your program down into several methods and do your error checking before allowing the flow of control to continue, or use nested ifs which might be better in your use case as you are not dealing with a ton of steps.
Tools?
First, we don’t know your target operating system. Second, there are already several guides listed all over the Internet for Mono development. It’s as easy as installing the framework, an IDE, and compiling the assemblies. Or you could simply just emulate the MacOS and do your development there. Microsoft bought Xamarin a while back, creators of Mono. So Microsoft as well for MSDN or even the Visual Studio community should all have several resources on cross platform development.
I don't really know how to do methods is their a way i could do a do while or a while loop to do this?
Yeah, you could do that. bool incorrect = true; while (incorrect) { // Add your code here // If your value is correct, set to false... incorrect = false; }
I did and its not working. if I were to put in an invalid answer how would I get it to loop to answer the same question? &amp;#x200B; Console.Write(" Width: "); inputString = Console.ReadLine(); while(isValid) if (garageWidth &gt;= MIN\_GARAGEWIDTH) { thisValid = true; } if (garageWidth &lt; MIN\_GARAGEWIDTH) { Console.WriteLine("Invalid input ... Try again"); garageWidth = double.Parse(Console.ReadLine()); } &amp;#x200B;
If you have a function that could be called many times, but has no use in the parent class or another class and uses local resources (variables)..
There is quite a performance gap depending on what you are doing. C++ as we all know compiles down to assembly. C# on the other hand, gets compiled into an intermediate language which in our case is MSIL. MSIL, as the name suggests, stands between our non compiled code, and our computers processor. Once your assembly is ran, it is compiled again into machine code on the fly by JIT, Just-In-Time compiler. This can be quite time consuming, especially if obfuscated. The reason it is setup this way is so that if you build an app it isn’t tied to a specific CPU. JIT is responsible for all of the dark magic and compatibility, even if it is backwards. The art of learning C++ has really dwindled. Python is used for a lot of heavy lifting a computer science such as AI, machine learning, neural networks, etc. C# is great for people who just want to build an app or a game. C++ is good for people who are trying to write software that interacts with hardware. Game engines, 3D software, photo manipulation, high end video games, audio and video editors, etc. People don’t really use C++ for making apps anymore. In fact, Microsoft doesn’t even really support it as C# is in favor these days due to its simplicity.
Scientific notation
Depends how big "insanely large" really is. But lets say were talking billions of digits (and we aren't starting from 0, since we may be getting into heat-death of the universe territory before we got that high). That is going to create a performance problem, especially when you add in the requirement to keep an up to date running total on disk. You don't want to be writing a multi MB file to disk with each increment. My approach would be to break the number up into chunks, and hold them in separate files, each holding a set number of bytes. Increment and rewrite the number stored in the lowest-order file until it overflows. Then overwrite 0 to it, and try and increment the next lowest-order file. If that overflows, overwrite with 0 and try and increment the next. Carry on with that until you find a file you can increment, or run out of files and have to create a new one with a '1' in it. To handle crashes during the write process, you'd probably need to have another file that notes that you are in the middle of a write operation, and records each file that is modified. To rollback the in-progress operation to recover from a crash, decrement each file listed there. You could speed it up a lot if you decided that not *every* increment had to be recorded - if the lowest-order file did not exist, and that portion of the number was just held in RAM, you'd only have to write to disk 1 every billion billion increments or whatever, at the cost of having to count those digits again after a crash. A worthwhile performance trade-off IMO, and would probably significantly lengthen the lifetime of your hard drive.
Thanks for post reddit guys! Im going use these useful trick to help code! Thankss again!!!
Hehe! Nice!
If the answer is valid, incorrect = false, if the answer is not valid, then don’t do anything because when your class already initialized the variables value. I’m only trying to give you pointers, I’m not here to write your code for you unless you’re going to write my code for me.
I'm confused, nothing in the article seems to show any code that isn't something you could just write yourself no? Or is IEquatible what you call "records" cause I see no mention of the term "record" in the code
Yeah, I used to do something like this in Visual Basic. Each control have their own properties, such as text. All you need to do is find the parent/container, most likely your form, and loop through each controls text property and append it’s value to a string or your own data collector which organizes the data based on control type.
Then update your code so that users can add candidates themselves. Just dump everything in an XML document or JSON file and encrypt it. Also, nothing is stopping them from decompiling your source code. So while you are working on your update, you might as well obfuscate your assembly as well. That or open source it because people are open sourcing games, engines, tools, algorithms, and you’re sitting here hugging a basic voting system that anywhere could make in a matter of minutes. Sorry bud, but it’s not very impressive. Give me your schools info, I’ll write it for them and provide them the code if you won’t. If you give a school permission to use your work then surely you should have a stomach to keep supporting that decision.
Use Reflection by building a list of MethodInfo, then choose a random method out of that list. Use an if statement or faster, a switch statement after generating a random number. Build a dictionary of methods. Don’t run random commands?
You can use any type of method that is able to iterate your list, for being the fastest. If it’s in a list then it’s easy as item[i], and now you have a reference to it as long as your list is of type if what you’re storing in it, you’ll be able to access all of your properties.
&gt;Mono books code down to assembly Pretty sure that one is false. If that were the case, our code would be CPU bound. No matter .NET, or Mono, there is an intermediate language and compiler.
We’re both right, mono uses a clr, common language runtime, to turn compiled .net code into machine code instructions, I just didn’t mention the clr
&gt; Is there an elegant way of combining these two functions into one somehow? No, not really. You *could* implement the async version as using Task.Run() to call the synchronous version, but that's still suboptimal and seems to leave you open to some potential pitfalls (possibly fewer than implementing it the other way, though).
I'd normally Extract Method or refactor/restructure.
Thanks man!
What you're looking for are *microbenchmarks*, and the Stopwatch class is good, but can be inaccurate. The best thing for building good microbenchmarks in .NET right now seems to be [BenchmarkDotNet](https://benchmarkdotnet.org/articles/overview.html), which is now a .NET Foundation project, the .NET team is using it for .NET Core now, and I've had great success with it at my company for proving out choices in our most heavily-called methods. It uses statistical analysis to determine how many time to run the benchmark, eliminating unrelated overhead from the final results. It can also show you memory usage and garbage collection stats.
&gt; &gt; &gt; &gt; &gt; If it was as simple as you're implying they'd simply download visual studio, scaffold an ASP.NET Core App, and use entity framework to replicate the simple functionality they've currently got. Job done in less than a day. who would do that? english teacher? haha
No measurement taken while a debugger is attached to the process is accurate. Most obviously significant, the debugger disables JIT optimization, but it perturbs the process in a lot of other ways as well. I'd recommend JetBrain's dotTrace as a good starting profiling tool; it's not the best option available as far as accuracy goes (it's still quite good, mind you), but it's easily the easiest profiler to understand &amp; use I've ever worked with (across any language, and I've used a lot of profilers). 
Unity posted to its blog recently about the process of rewriting its engine in a restricted subset of C#.
Unless you are lucky enough to have a bunch of zeros at the end or don't care about exact values that won't help much.
At my company we use Bearer tokens for auth and needed a way to move from the old OWIN auth to JWT based tokens. I ended up using this repository to get a feel for how it was done which helped a lot. https://github.com/qccoders/QCVOC/tree/develop/api/QCVOC.Api
Preemptive optimization is the root of all evil
Thanks, I'll take a peek at it as time permits.
For the in-memory stuff, I'd probably just use a BigInt variable and set up a timer so that every so often, it writes the current value to disk. Not that it would probably matter much in this instance, but I believe managed code has a 1GB size limit for a single object so if you ever did manage to get to really large numbers this would be something to take into consideration.
&gt; milliseconds We're talking about nanoseconds, maybe even fractions of, with the kind of example op gave
No it isn’t. There is nothing wrong with making code more efficient. How do you think operating systems and games are made...
I do a lot of actions focused on readability, knowing the compiler will optimize most of what I write away. I don’t concern myself about using a bunch of local variables because I know in general the compiler will optimize it “enough”. I don’t know exactly how optimal it’ll be, but that’s rarely been a large concern. If I’m looking at optimization, I normally find out of process calls are usually the culprit. A mixture of looking at the call I’m making and making sure I have the right options set and caching usually resolve that problem. Normally any system I’m concerned about performance on, is also big enough to warrrent multiple servers for redundancy. The cost of adding 4 servers instead of two is minimal. Very rarely have I found performance problems in a verbose block of code. The one time I can think of that’s close to what we’re discussing was releated to boxing, and the runtime handles that better now. 
Hey thanks for this. It's really massive! At what point do you think someone is junior position job ready in relation to this roadmap?
yes you can do it with a [simple while](https://dotnetfiddle.net/8484Eq) loop. However, if your code is going to be more complex, separate the code into methods to make it readable.
You had me at "magical tables". Lol, I've worked with so many clients like that. 
"The real problem is that programmers have spent far too much time worrying about efficiency in the wrong places and at the wrong times; premature optimization is the root of all evil (or at least most of it) in programming." - Donald Knuth The general idea is that people make ugly or buggy code to try and get a little more performance, but it's often in places where it really doesn't matter. It's a common rookie mistake. Write your code cleanly, and then go back and look at the spots where it's having performance trouble. Those are the ones you want to address, and it's ok for them to be fragile or awkward to get the best performance. There's some larger scale things, like not using that O(n^2) sorting algorithm, or not fetching 20 GB of data when you only need a small portion. Doing these right isn't in that category of "premature optimization".
If you design it right, you wouldn't be writing the number from scratch each time though. Memory mapped files would be a good option. Btw depending on your OS settings, even if you flush the buffer at each write OS might be utilizing a write behind disk cache.
Don't do that. If you want a synchronous version, make that explicit as another method. If you have to implement an async interface and don't have anything within the function that is actually asynchronous, leave off the async modifier and return Task.FromResult or Task.Completed.
Agreed. Keep it async and let the user decide how to handle that. It's not your place as the library dev to be making those kinds of decisions since it can create deadlocks and other issues for the library consumers.
Oh wow. This is very good. Thanks!
It's to avoid boilerplate code
Yeah, I noticed :)
Why not keep the zips separate? What’s the point of embedding them? So you only have a single file to distribute?
Compiled as 64 or 32 bit .exe? In my experience, 32 bit apps behave wonky with anything requiring &gt; 1.5G memory.
I tried setting it as 64 bit, didn't help I'm afraid.
That's what I had to do in the meanwhile, but since this is also something I give out to my clients to install my software with, and since my clients are (to put it very mildly) dangerously incompetent with their computers, I'd rather keep the whole thing to a simple "double click the EXE and press the OK button".
My code is already written, as I’ve said multiple times. I’m going back to my code and optimizing it as I have time. It’s a personal project, and my own code. I see nothing wrong here with perfectionism. If I were working for a 6-7 figure company then maybe, I would go ahead and forget about it due to time restrictions.
I dont think you want OP writing code for you
I’ve seen that much so far.
What stops you from using a "normal" installer Software?
Judging by your code, I can see that you are pretty new to programming. I don't mean to be an asshole, but frankly solving bugs like this is what programming is all about. You will just have to bang your head against the wall trying to figure it out, and eventually you will realize what the problem is. 95% of programming is just trying to solve bugs like this. &amp;#x200B; That being said, I think the issue comes from failing to parse in this line: if (double.TryParse(inputString, out garageWidth)) &amp;#x200B; If you input something that can't be parsed into a double, the code will just skip everything the brackets. Maybe what you want to do is: bool didParse = false; while(!didParse) { inputString = Console.ReadLine(); didParse = double.TryParse(inputString, out garageWidth) }
&gt; Let's just say I made a program that counts up infinitely Well, if you're just talking about counting numbers - integers - you don't need much actual storage space to save mindbogglingly huge numbers. Let's take 16 bytes as an example. That's really a tiny amount of memory. On a modern 64-bit CPU, 16 bytes holds two numbers that you might add together. But how large of a number can 16 bytes represent? 340,282,366,920,938,463,463,374,607,431,768,211,456 That's how large. Three-hundred and forty billion, billion, billion. That's a hard number to imagine. It is estimated that in the entire universe, there are 70,000,000,000,000,000,000,000 stars. In order to count up to the maximum integer number that 16 bytes can store, you would have to count to 4,850,000,000,000,000 for every single star in the known universe. Want a better sense of how insanely large that number is? Let's say you didn't just store your current number that you'd counted to - instead you stored every number you counted along the way. 1 Terabyte of storage on a hard drive weighs about 500 grams. (I'm assuming standard platter drives here, as SSD's are probably cost prohibitive lol) In order to store all the numbers you count along the way, you would have to convert 500 Earth's worth of mass into hard drives. If you could count a quadrillion numbers per second, it would take over 10 quadrillion years to count to the end of what 16 bytes can store. That's getting close to a million times the age of the universe. That said, I'd just store the number in a file. 16 bytes should be plenty, after all.
I believe you mean [BigInteger](https://docs.microsoft.com/en-us/dotnet/api/system.numerics.biginteger)
As others have recommended, an existing installer solution is better suited for this task. I use InnoSetup personally - it is free and extremely easy to use, but can be extended to fit advanced scenarios as needed. However, if you still want to roll your own, it may make sense to host the zip archives elsewhere (file share, web server, ftp share, etc) and treat the forms app as a “web installer” that downloads the required resources before extracting/installing them.
I've used InnoInstaller before, even with somewhat advanced scenarios, but our clients are not very tech savvy, and Inno always requires some parts to it that a very helpless user can always find a way to surprise you in how they wreck their computer with. As for an externally hosted zip, if it wasn't for some of these clients' extremely strict firewall policies I'd have already done that, since that was actually the original plan :)
32 bit can only utilize 4 gigs of RAM, 64 bit can go upwards to 128.
You’d think so, right? But in practice 32 bit can only utilize 2 gigs of RAM, and things get wonky around 1.5GB (random errors, hard crashes, etc). Haven’t had a practical need t go beyond 12GB
Because Windows reserves 2 gigs. No need to downvote like a dick when I’m giving you the right information. And people go that high with RAM when running servers, render farms, multiple virtual machines, etc. it wasn’t made just for you.
Fair enough. Though if your end users can’t handle clicking “Next” and “Finish” when they are the only options on the form other than “Cancel”, you may need to explore a completely hands off approach. Perhaps you could have their admins use a group policy to push the files down to user machines or something along those lines.
Yes, yes I do
At this point we've had zero success communicating with their admins, and our contacts have been just as frustrated. Given that they're working on it on their end but still need to have the software by a certain date we were willing to take extra steps and develop this thing. Personally, I've enjoyed it up until I hit that 2GB wall.
Some external software we use comes with a generic installer of that company which is an exe. Hen starting that installer you select an "image" (zip file). Maybe you can build up on that idea, to distribute a single executable installer which works with a single zip, which might contain more zips. If everything goes well you only have to distribute the new "image" on new installs
fixed link for mobile: https://raw.githubusercontent.com/MoienTajik/AspNetCore-Developer-Roadmap/master/aspnetcore-developer-roadmap.png
IdentityServer should be used if you want a) use the OpenIdConnect standard for Authentication with OAuth2 for Authorization. This makes it easy to use all kinds of external Login Providers b) don't use cloud services like Auth0 for it c) you have several clients (website, app, different website, offer others to use your login) with the same accounts behind it. OpenIdConnect and OAuth2 are mainly made for RESTful services and SPAs but can also be used with classic websites.
Buttons.
ASP.NET Identity is for membership functions within your app and IdentityServer is for authentication of users. They work together and are both highly configurable. You don’t need to use IdentityServer or any other OAuth/OpenID provider in your web app. It is easy to get bogged down in all the extremely similar terminology. I recommend you start with learning the difference between authentication and authorisation. Move onto ASP.NET (Core) Identity. They made a few changes in ASP.NET Core 2.2, make sure your learning for this later version if that’s the one you intend on using. Then read up on OAuth and OpenID Connect, and then finally what IdentityServer/Auth0/Okta/etc provide.
This actually has been an idea I've been toying with, but I haven't given it a shot yet. Basically create a zip with all the folders I'd need to extract, include a table with a list of destinations for all the folders, rename the zip's extension into something unique of my own, associate that extension with my app, and have it "automatically" open that. It's still not as straightforward as I'd like, but it's definitely less prone to user error.
from what I'm getting, if you don't have multiple clients connecting to one web api, you probably do not need to implement identityServer ?
I understand authentication and authorisation, and I have been using asp identity for that. but I've been seeing alot of people talk about and use identityServer. so I'll like to know when it will be necessary for me to use it. 
If you have different applications for different customers, aside from the one here in OP, then you can make it generic enough to work for other software. On the plus side, if it is a simple winforms or wpf app, you can have custom branding. This needs however a proper software development process if you put the install instructions for the installer in a xml file inside the image, because you don't want to update the installer that often :)
Am I the only one that thinks it sucks? First of all, this seems like a roadmap for "know it all" with a mix of some trendy stuff. Most of the platforms/frameworks are unrelated to ASP.NET Core. And to put SOLID and Design Patterns in the end? What are we, framework developers?
Sometimes it's a client's incredible talent at screwing things up with even the things you'd *think* are unscrewable. When it's something I make myself I can be certain it is unscrewable. Also, some clients have ridiculous security protocols and they automatically block generic custom installers.
Premature optimization isn't bad just because you're wasting time. It's bad because you sacrifice readability and maintainability of the project. Next time someone else continues to work on that project (or even you in 6 months when you forget why you did something like that), it will take a lot more of mental energy to figure out what's going on and there's higher chance of introducing bugs and spaghetti code just because some optimizations which don't do anything in the end.
I'll add another voice for Inno Setup. Installing (and particularly uninstalling) things turns out to have a number of edge cases, and I've slowly come to the opinion that letting someone else handle the complexity is the best thing to do. There are settings which let you restrict what options the user is given, e.g. \[DisableDirPage\]([http://www.jrsoftware.org/ishelp/index.php?topic=setup\_disabledirpage](http://www.jrsoftware.org/ishelp/index.php?topic=setup_disabledirpage)) stops them from choosing an installation location. &amp;#x200B; Also, note that \[Mono.Cecil\]([https://www.mono-project.com/docs/tools+libraries/libraries/Mono.Cecil/](https://www.mono-project.com/docs/tools+libraries/libraries/Mono.Cecil/)) is able to take an assembly, and manipulate the resources inside it. That might be a way to get around the 2GB limit, wherever that comes from &amp;#x200B; Another option is to ship a self-extracting archive, which will extract your Inno Setup installer (and any other files you need) to a temporary location, then run the installer with whatever flags you like (e.g. \`/SILENT\`). 7-Zip provides an easy way to create one (you just cat together a custom exe of theirs, a config file, and a 7-zip archive containing your files), google for 7-Zip SFX.
&gt; Also, note that Mono.Cecil is able to take an assembly, and manipulate the resources inside it. This is interesting. &gt; Another option is to ship a self-extracting archive. Those aren't as powerful as far as deploying files to multiple locations. InnoSetup can do it, and we have used it for that, but we've come across other complications when using it. I've specified in other replies.
Don't write custom installation scripts. We did it. It was horrible. The amount of money we spent maintaining that would have bought us a top of the line license for InstallSheild. &gt; automatically block generic custom installers We had a client whose internal anti-virus would either outright block our software from running, or else quarantine it a few hours after installation. We go around it by digitally signing the executable with a code-signing certificate. The added overhead is worth the reduced cost in support calls. Modern installer suites would have signing capabilities built-in. Maybe investigate that option.
While not using Nuget packages, I hope you're still separating logical parts of the application into projects inside the same solution. That makes the mental model smaller when working with each part of the application. In the root of my repos I have a sub directory called *src* which contains all the projects and a separate directory called *test* containing all the tests. In the solution I have solution directories which contains the "regular" projects and the test projects separately. Also to prevent too many conflicts when trying to merge code, I'd recommend having a look at Git Flow, which is a way to organize your branches which in an orderly manner. 
Use Knuths up arrow notation. Boom, numbers bigger than you can wrap your mind around, stored in a handful of bytes 
There are two ways I might consider organizing something like this: 1. Put all source in the `src` folder, and all tests in the `tests` folder 2. Create dedicated project directories In the first model, your repo would look similar to: ``` / .gitignore .editorconfig MonoRepo.sln src/ --MonoRepo.Kernel --MonoRepo.Abstractions tests/ --MonoRepo.Kernel.Tests --MonoRepo.Abstractions.Tests ``` I like this model for shared architecture and stuff. It makes a lot of sense when the projects tend to change "together." The second model would be: ``` / .gitignore .editorconfig MonoRepo.sln MonoRepo.Kernel/ --MonoRepo.Kernel.sln --src/ ----MonoRepo.Kernel.csproj --tests/ ----MonoRepo.Kernel.Tests.csproj MonoRepo.Abstractions/ --MonoRepo.Abstractions.sln --src/ ----MonoRepo.Abstractions.csproj --tests/ ----MonoRepo.Abstractions.Tests.csproj ``` There's probably some better way to organize the sub-projects in this model, but this isn't a terrible way to do it. This is similar to how the [Moby project](https://github.com/moby/moby) is organized. Note that using a mono repo is probably not for _all_ your source code, but instead for some particular segment thereof. There are numerous examples on Github for this: * [Roslyn](https://github.com/dotnet/roslyn) * [ASP.NET](https://github.com/aspnet) * [Docker](https://github.com/docker/) * [Pulumi](https://github.com/pulumi/) * Others What's awesome about OSS is that we can learn from others, and it's not just about how to write good C++ and C# code ;)
According to [ASP.NET](https://ASP.NET) repo most of the stuff is in the same repo. Would it be more beneficial to have separate repos for each major stand-alone components and then submodule them in the main [ASP.NET](https://ASP.NET) repo? I am trying to fit submodule into this scenario.
Fun trick, take off the .Test at the end of the test projects namespace and suddenly you dont need to include the stuff your testing as the namespaces match up.
We looked into this and soon abandoned it as it's difficult to manage and maintain If you put everything into a single solution, it won't be long before it's too big to work on If you have separate solutions, how do you keep them all in sync? The idea behind a mono repo isn't just all your code in one place - it's all your code seamlessly updating when a change is made There are products like [Bazel](https://bazel.build/) which will help you do this, but last time I looked, it didn't work that well with .net
I haven't done anything with submodules. I've been thinking about it - to enable a full build of all my stuff across repos - but haven't used it yet. If you're not publishing packages, it would be hard to not use a single repository. If you're not using NuGet, I'd recommend getting started. It's so easy to do that I can't think of why you wouldn't. I would separate repositories on deliverables: define your common base that is shared everywhere, and then make a repo per service (for example). 
That's a useful trick. I would just do it in the project file options. 
Multiple reasons to not use nuget: 1. Have to setup and maintain ci/cd pipeline for each deliverable 2. Pain of updating nuget packages on projects wherever it was referenced 3. Because of the above reason also difficult to do trial and error and fix Which is why I am looking into making use of submodules.
Disclaimer: I haven't read Martin's book, but in the end all the enterprise architecture books talk mostly about the same stuff, just with different naming. I take the naming as a stab at distinguishing this particular type of service class, as the word service has become way too overloaded with meanings and thus lost all of them. Per strict DDD, (Evans, Fowler's PoEAA) application service should orchestrate communication between domain objects, and infrastructural components, with each method within a service class being focused on fulfiling a single use case. As the time went on, due to various factors as scalability, cohesion, easiness of working in larger groups, we found out that CQRS is a good tool to have in our toolbelt. When you continue to apply it in a stricter and stricter sense - together with Single Responsibility Principle - you end up with vertical slice architecture, with one class per service method orchestrating a business use case (see f.e. Jimmy Boggard's github and his ContosoUniversity examples). One might call such slice a Use Case Interactor. But who knows, programmers like to name simple stuff with all sorts of wacky names ^^.
"If you have never heard of a POCO class it basically stands for Plain Old C# Object." I'm pretty sure the C stands for CLR object.
You'd need to put them in some kind of collection, like an array. 
SortedList should be a pretty good usecase here
Doesn't really matter, although a SortedList wouldn't require LINQ at all. The point was that LINQ works on collections, so it needs one to work with. Like new int[] {1, 2, 3}.Sort()
 var floats = new float [] { v10, o10, e10 }; Array.sort(floats); &amp;#x200B;
To fill in a little on that. So we use IdentitySever at our production site. Mainly as a Single Sign On (SSO) mechanism. We have a system which has both a Client and an Admin Portal. So Admins can use the same credentials to login to the Client portal via the IdentitySever. Also, IdentifyServer helps manage different User Access Roles quite easily. I hope this helps out a little.
Have you tried WiX? http://wixtoolset.org/ You can create a very simple MSI that basically has no options. If you want to make a bootstrapper it has tools for that as well.
thanks alot. I'm beginning to get it 
Yes, they are for the most part synonyms but as I understand it, a DDD service is everything for a particular (sub)domain encapsulated in one interface for any given use whilst a CA Use Case Interactor is much more granular and that you'd have separate UCIs for each operation (aka use case) provided. 
So you can actually use aspnet identity with identityserver, although I’m not sure about support for older Mvc projects not targeting aspnetcore. From your comments, it sounds like you really are trying to get a grasp on when to use identityserver. If you are ever going to need to worry about single sign on across multiple applications identity server is great. If you want better control of client access, identityserver does that for you. So it all really depends on your needs. Are you building one site and a couple of apis, then It might be complete overkill to integrate with it.
If you've got a LinkedIn Learning/Lynda.com account, there's this course on Microservices: https://www.lynda.com/Kubernetes-tutorials/DevOps-Foundations-Microservices/806153-2.html
yes I'm trying to understand when to use identityServer. don't want to get into it without fully understanding what it's meant for will identityServer be perfect for microservices architecture application ? 
Yes. It can be done either using *UserControls* or creating *Custom Classes*. Also can be done by setting the new buttons/labels class methods to *Public Shared* UserControl is the easier and better way to go. Or else you will code your ass off for creating buttons and labels unless you automate the process using loops and background workers.
I feel like the simplest way to state why the Task API bugs me is in your post. When you implement the EBAP or the old-as-dirt IAsyncResult pattern, you do it the same way every time. The client understands when things happen on worker threads, and is responsible for adapting. When you implement the TAP you have to ask yourself, at every call site, "Is this going to be called by a client, or is it a top-level call site?" If you think it's "a client call" then you get to use defaults and happy shortcuts. If you think it's "a library call" you have to be more careful. That sounds reasonable until you refactor a month later. Then something that *was* a client call gets converted to a library call. Do you remember to walk the entire async chain and double-check? Probably not. Is it even a good thing that you have to? I don't think so. So I don't mind interacting with Tasks at my top-level UI layer, but once I descend past that it feels like I'm in a minefield and I prefer other patterns. I feel like a feature that needs to generate several "read this first" blogs about when you can use the happy paths and defaults is not a good feature. 
This awesome. If only knowing all these things made it any easier! Lol
This really depends. Without identityserver or something similar, your services still need to understand how to generate tokens and how to validate them. Your auth code ends up in each service and either all your services use the same keys, or you’ll end up with crazy key dependencies that you have to still configure. Otherwise, by using identityserver the only thing your services need to worry about is how to authenticate themselves and get a token. And by ways of configuration the service can be set up to validate any incoming tokens with identityserver. 
Excellent answer. I learned something. Thank you. 
This looks like some sort of homework. Do you have any other constraints? Are you allowed to use LINQ? Why are your variables named that way? Do you only need to order the values?
everything is still a tad bit confusing. but I'm beginning to understand the concept. when I start learning it I believe I should have a better understanding of it
I think you often would like to keep your microservices behind a firewall, so no authentication is really needed when the different services make calls to each other. If the services are accessible from outside, you could use IdentityServer to configure access to them using api resource and client configurations.
This is how we do it: - Service-oriented architecture: one service for "Large file storage", one service for "Extract data from remote sources", and so on. Each service has its own `.sln` and a folder that contains all its `.csproj` and `.fsproj`, for example `BigFiles/src/BigFiles.Ftp/BigFiles.Ftp.csproj` and its test project `BigFiles/tests/BigFiles.Ftp.Tests/BigFiles.Ftp.Tests.csproj. - Each service can contain several applications (either console applications or web applications) along with supporting libraries. It's expected for all applications within a service to have access to the same persistent state, business rules, algorithms, models, etc. but we sometimes enforce additional structures on the code (for instance, we have a compiler split into a front-end project and a back-end project that communicate through contracts in a third project). - A service may not access the data or behaviour of another service, except through the public API of that service. The code for that public API is in a project that is part of that service, but can be included in the `.sln` for every service that needs to access it, inside an `extern` solution folder. This allows us to decide how the actual remote access is implemented (HTTPS ? WCF ? WebSockets ?) as an internal detail of the a C# client library. - Some sets of features do not run or are not deployed (and so, are not services) but are still large enough to have multiple projects and their own unit tests. For instance, we have an internal columnar data storage format that includes an implementation library, a contracts library and unit tests. Those also get their own `.sln` and folders, as if they were services. The non-test projects (or sometimes, just the contract projects) are then included in other `.sln` under the `extern` solution folder. The general understanding is that each piece of behaviour belongs to a single service (or service-like library), and when working on that behaviour, one is expected to have the `.sln` for that service open (along with its unit tests, and so on), and only touch files that belong to that service. The exception is when changing the public API of a service in a way that requires changing the client code : this will require touching multiple projects at the same time. The key is to keep a clean architecture by 1° avoiding coupling between services and 2° being extremely strict about which service is responsible for which data/behaviour. 
Try Squirrel for Windows. It will do the thing for you. It has one click installer so user won't even notice difference between clicking on exe, shortcut or installer exe. Besides Squirrel let's you introduce update system for app. I've some apps it and there are no problems.
microservices is another term I've not really grasped so well. are you saying typically that your microservices doesn't really require authentication if they're behind and a firewall and cannot be accessed from outside? how is authentication usually handled in a microservices architecture
I really hate this... But I was about to suggest it the OP
It's just shorthand for declaring a class.
Well, of course it depends on the scenario, but if you have a website, the external users interact with that. When e.g. an order is placed by a user, your system may create a message for that, which is placed in a message que. You could then have a microservice architecture, where one service handles shopping carts, another handles order creation, another customer data etc. The only thing the external users need access to, is your web app, they should not be able to call your microservices (the services should not be visible to them, they are part of your internal system).
`var sorted = new[] { v10, o10, e10 }.OrderByDescending(x =&gt; x);` &amp;#x200B; This instantiating an array inline, then using Linq to order by the value.
Yeah it homework The instructor wants us to sort them using IF Can u imagine that All possibilities using IF So we write more codes and get used to it But am already good at it so i started searching i know there must be another effective and modern not stone age method Yeah i need the float name and value to display
is this one of the popular approaches to microservices? the services might not be visible to them, but if it's available to anyone who can access it, wouldn't that be a security risk? 
He wants you to learn how to think. So try doing it with IFs. Try to THINK of a solution, not to google one or ask here for one. Do your best effort, come up with something and then ask for help. Remember that you are trying to learning.
Why not ask on the tracker you linked?
Removed: Rule 4.
I did it with three last week am the only one in my class completed it But he just gives out assignments randomly For me he is a good instructor till he start giving assignments
Removed: Rule 4.
Removed: Rule 4. Do the examples provided here help? https://github.com/AngleSharp/AngleSharp/wiki/Examples If not, you'll probably need to post a more specific question detailing issues you're having or what tutorials you did find on the internet didn't help you (so we have a baseline of what to suggest).
It’s about security at different layers :-) “Anyone who can access it” may be defined in a lot of ways. A firewall or physical boundaries won’t let external users get access. If they would, they would probably be able to do whatever they want with the system at that point anyway (copy the database, files and what not).
&gt; Those aren't as powerful as far as deploying files to multiple locations. InnoSetup can do it, and we have used it for that, but we've come across other complications when using it. I've specified in other replies. I think you misunderstand. See the rest of my sentence: &gt; which will extract your Inno Setup installer (and any other files you need) to a temporary location, then run the installer with whatever flags you like (e.g. /SILENT). I didn't mean that you use a self-extracting archive *instead* of an installer. I meant that you use a self-extracting archive to *extract* your installer, and then run it with whatever flags you want. &gt; Edit: Upon further examination and experimentation, it doesn't look like Mono.Cecil lets you manipulate resources. At most, I can read some of their metadata. It's definitely possible, because I've done it. I did an analysis of different ways of writing a self-extracting archive, and this was one of the options I tried. I'm afraid I don't have the code here. 
They release three versions of Rider a year - every four months. The last release was in December, so we're probably looking at sometime in March
If this is a complete presentation of Records, I find it a pretty much useless feature. How many times will be used in a large code-base 4-5 ? And why you use that and not a tuple ? Because it's a class (ref) type?
Why don't you just do neither? What reason do you have to actually have multiple assemblies/packages as opposed to just using project references? I often find people waaaay overcomplicate this by trying to be cool.
What about it is messy? How many projects are we talking? Can you just show us your layout so we don't have to guess? Submodules and nuget packages both cause a lot of problems and should be avoided.
The layout is somewhat like that of [ASP.NET](https://ASP.NET)'s. Currently we have multiple solutions in the repo which have multiple projects in them. We are currently working by referencing projects. But I wanted to look into the possibility of pulling the stand-alone solutions and their projects into separate repos and then submodule them into the main repo that uses all of them. We use Github and review process so two teams can manage the repos instead of cluttering one. What problems do you think submodule would be?
&gt; To minimize the trouble of releasing nuget packages What trouble? Publishing nuget packages, private or public, is dead simple. Having used sub-repos plenty in the past as well, I would bet you'll burn considerably more time going that route.
Can you please elaborate as to why? I have not worked with submodules before.
Arduino software doesn't use C#, it uses C++. If you wanted to control the Arduino from your computer you'd have to write code to communicate over the serial port like this project does: http://playground.arduino.cc/Interfacing/csharp
User can use online tools for this. For example [here](https://sharplab.io/#v2:EYLgZgpghgLgrgJwgZwLQDk4BstWFiAJQkiQDsBjCAFQE8AHFAGgBMQBqAHwAEAGAAm4BGANwBYAFDcAzIIBM/AML8A3pP4bBs7gBZ+AWQAUASlXrNFgG5QE/KPwC8/GAwgB7MIeG8A/MfESFlY2/MCOzq4eXkK8/uYaAL6SCUA=)
[They do.] (https://sharplab.io/#v2:EYLgZgpghgLgrgJwgZwLQDk4BstWFiAJQkiQDsBjCAFQE8AHFAGhhATjKYBMQBqAHwDEZbLnwQABBDJ4CAWABQAAQAMEpQEYA3IqUAmFboDM6jQDZ1e0wHYJAb0USn6k5otKALBICyUAJZkABQAlPaOzhEAblAIEmAA9vESALwSMAwQ8WCBmiqhyanpjFk5GioA/ME6ChERRZnZucEAdAAicAC29CHVtc71JbmVbZ3dVeF9CfEjXT0TEgC+igtAA)
Cool, thanks.
I just thought of one more use case. If you have micro services they all can check auth against the IdentityServer. But afaik that's all of the use cases it's good to use it. We use it because we have an application for several customers. Sometimes they want to use SSO from their application so we can easily integrate their OpenIdConnect Server as an external identity provider. BTW you can always contact leastprivilege on Twitter or on GitHub he's the core maintainer of IdentityServer and always ready to help. If it gets more specific he will bill hours though.
It's pretty reasonable for `"ball".IndexOf('l')` to return the same value as `"ball".IndexOf('l')` :-) There is an overload of `IndexOf` that takes an additional "start" argument, and will return the first occurrence of the character after that position, you could use it to find all occurrences of a given character.
Hard to say what you are trying to do. If you are trying to print the index of each letter in a word you can just print the index. There’s lastindexof too.
The article could also be named, "Things you should never do in production code."
Right, hence his question.
Dumb question. I've got a Arduino starter kit in my office, like a flat fishing tackle box. When I program it does the code stay on the Arduino memory somehow or does it need to run via my PC?
For breadboard projects, Arduino Nano is better than Uno (cheaper too). You'll get more help in reddit.com/r/arduino than If you are just starting, here's a list of things you should buy: * [3+ Arduino Nano (assembled) with USB cable (buy 3+, because you are likely to fry 1-2 of them while learning)](https://www.ebay.ca/itm/USB-Nano-V3-0-ATmega328-16M-5V-Micro-controller-CH340G-board-For-Arduino-W-Cable/121899176682?hash=item1c61c1d2ea:g:uN4AAOSwBGJZzLWD:rk:2:pf:0) * [kit with 830 pt Breadboard, power supply, jumpers, buttons, LEDs, resistors](https://www.ebay.ca/itm/New-Solderless-Breadboard-Protoboard-830-Tie-Point-MB-102-Test-Circuit-PCB-Set/302749590161?hash=item467d482291:m:mG1FpPZdY9KAngM_CFnErlw:rk:27:pf:0) * [9volt barrel plug](https://www.ebay.ca/itm/Lot-Of-2-2-1-x-5-5mm-Male-DC-Power-Plug-To-9V-Battery-Clips-Arduino-UNO-R3/221976421080?hash=item33aed362d8:g:OlIAAOSwZ1lWevW3:rk:2:pf:0) * 
Yea seems like this would be the same as for (var i = 0; i &lt; word.length; i++) console.writeline(i);
Submodules aren't really a problem in theory but they are clunky to deal with, in general. My real question is about whether or not you really should be splitting apart these pieces of code. How many root projects do you have (entrypoints like an API or a service that runs)? If this is a large number, can you consolidate some of them together? For instance, if you have a lot of microservices, can you tell a single service which microservice to run instead of running different entrypoints? If you only have a couple entrypoints, I don't really see the point of splitting up the code. If you have 10 or 20 and they're all drastically different, then it might be worthwhile to break things apart.
The Arduino has a microcontroller on it and the code runs on there. The PC compiles the code and translates it into instructions that the microcontroller understands, the PC then "downloads" these instructions to the Arduino and the Arduino runs on its own.
It’s actually C.
When you program it, it writes your compiled code to the unbuild flash memory, when you apply power it will start running.
It's actually both
We actually have only one entry point because an api project. But then we have smaller standalone class libraries like the business models, database access, etc. These libraries will be used by other teams but we don't want to keep releasing nugets for all these libs. But if we create separate repos then they can submodule it and use it. Since all of these is internal. That is what i am thinking. 
Yes, C# is a good first language . And the sidebar of the /r/csharp subreddit links to several resources, including one labeled "Development for Absolute Beginners".
Sounds like you have two code projects, exciting! 1) an application on the PC which will take keyboard input and write it out of a serial port which the Arduino I will be listen for.. this could be done within anything, python, nodeJS, or a c# application. 2)code on your micro-controller(Arduino) which takes a serial input, does a little calculation to make sure you aren’t doing stuff like hitting the limits of your servos and then make the required movement of the servos. Both will have a decent amount of examples available via the google if you get stuck, or post here! There is likely an Arduino sub too. Good luck!
Yes
Ah, yes, teams... this is fairly common. The situation you're in, you're actually all one big team but the business side says you're not. Being on different teams, from a software perspective, is kind of meaningless here. You all work on the same code base it sounds like, so you're really one team (or do they have their own entrypoints?). If you share a database, it's all the same system anyway so the code is the same system as well IMO. Pretending like you're on different teams is just a weird business thing and not actually conducive to writing useful software. If it were me, I'd lump all the code together with project references and everyone works in the same repo. My second choice would be submodules, and my third choice would be nuget packages.
Thanks! I have got a program on my PC now I. Python that prints your mouse position and X and Y distance from the centre, I just need to wait to get my arduino board and test writing to it. Thanks for your response!
I think there are better ways to do translations. That's a bit of an old school way at this point. Although, you should be able to do this through the resource editor inside VS. it's been a long time for me but I think you just add a new resx to the project and name it right like you're doing and it does the rest. I would consider looking for another approach, depending on your needs. If this project will someday have a web or mobile component, or even rely on volunteers for translations, it would be better to store these in a json or other modern format where its easier for them to edit. This would be better suited as a stack overflow question.
I started with PHP, but have been writing c# for the last 6 months. I wish I would have started with c#. Its a great language to start with imo.
After you have messed about with Arduino, I highly recommend the EAP8266 and the ESP32 built in WiFi, faster, the 32 has Bluetooth . Lots of embedded programming potential!
Firstly, Arduino uses a slightly modified version of C/C++. The Arduino IDE should be more than enough for it. You'll need to use the Serial function while having your Arduino connected to your laptop. You tap A once it send A once. You hold A, it keeps on sending A. Figuring out the rest should be easy. It's been a while for me, so someone correct me if I'm wrong.
A more detailed and personal yes response. C# was my first language 10 years ago (after a painful venture into C++), and using the .NET platform was really fun and rewarding. Fast forward to when I started digging into web app development with .NET on the back end, and Angular (well, initially angular.js) on the front end, and it made it really easy to pick up JS / TS. It was really nice when things like arrow (or lambda) functions and async / await were cool new features added to JS, and it was easy to pick up because I'd already been doing that stuff in C#. I still love using it to this day and love the direction the .NET platform is moving in, for the most part.
&gt;That's a bit of an old school way at this point. What are the new ways to do that? &gt; I think there are better ways to do translations This isn't actually about translations, it's about handling culture-specific resources outside of the VS environment. My example is trivial, otherwise it'd take forever to write and no one would bother reading it. &gt; you just add a new resx to the project and name it right like you're doing and it does the rest. If there was a project I could add something to, then yes, that's what I'd do. But I 
all languages are good first languages
I'd say any languages with a strong typing.
Maybe this can help: [https://stackoverflow.com/questions/8607631/adding-resourcesxml-to-dll-in-c-sharp](https://stackoverflow.com/questions/8607631/adding-resourcesxml-to-dll-in-c-sharp) [https://stackoverflow.com/questions/1355978/how-can-i-add-embedded-resources-to-dll-during-build-process](https://stackoverflow.com/questions/1355978/how-can-i-add-embedded-resources-to-dll-during-build-process) [https://stackoverflow.com/questions/6545858/is-it-possible-to-add-remove-change-an-embedded-resource-in-net-dll](https://stackoverflow.com/questions/6545858/is-it-possible-to-add-remove-change-an-embedded-resource-in-net-dll) [https://stackoverflow.com/questions/783885/how-to-add-resource-to-existing-signed-assembly](https://stackoverflow.com/questions/783885/how-to-add-resource-to-existing-signed-assembly) &amp;#x200B; Here the google search: [https://www.google.at/search?q=adding+resources+to+dll+site:stackoverflow.com&amp;sa=X&amp;ved=2ahUKEwjch4Ddz-bgAhWjsaQKHdY\_BRYQrQIoBDADegQIBxAM&amp;biw=1920&amp;bih=1099](https://www.google.at/search?q=adding+resources+to+dll+site:stackoverflow.com&amp;sa=X&amp;ved=2ahUKEwjch4Ddz-bgAhWjsaQKHdY_BRYQrQIoBDADegQIBxAM&amp;biw=1920&amp;bih=1099)
Absolutely. 
I wouldn't say so. Low level languages would be a poor choice to begin.
Yes, C# is a solid and mature language with few surprises, and the designers seem to overall make good decisions for its future. I'd have no qualms with suggesting it as a first language.
Unless you need that type of knowledge
Really? You’re saying brainfuck, whitespace or Haskell are good first languages? You sir are funny
And a sane syntax.
Hmm I found the samples on their wiki to be really good. You might also want to check out other projects that use AngleSharp, they have a list of those as well you could browse through the source for
So here you could brake it down more. Your computer class could have a property of type harddrive that contains all the io operations. A network class that deals with, well, network operations etc. Imagine it like a real computer where you can swap out components at will. The next step would be to interface the components and have the properties use the interface types. That way you could have an IHardDrive interface and implement a ssd and hdd class. Now you can change the hard drive type without changing the computer code at all.
Thanks but, sadly, that was a semplification of my problem =( My word is not "ball" but something much longer and much complex. And moreover I need to save in a variable only the index of a specific letter (which in the example was the "l") and not to print all indexs. Hope to have been more clear and sorry for the first post
I think [The Yellow Book](http://www.csharpcourse.com/) is great. Its a free e-book that covers the basics of programming in C# by working through an example app. Great first book for C#
If you knew you needed that type of knowledge you would not be a beginner. 
Any ideas on how I should power the servos?
http://www.csharpcourse.com/ https://www.youtube.com/playlist?list=PLGLfVvz_LVvRX6xK1oi0reKci6ignjdSa
Yes C# is a great language all around. Good to start with and to work in. 
I recommend the official documentation to getting started with C#. [https://docs.microsoft.com/en-us/dotnet/csharp/tutorials/](https://docs.microsoft.com/en-us/dotnet/csharp/tutorials/)
if you are completely new to programming I'd either go the easy way and pick Python or the hard way and learn c++ C# is great but it really shines in large enterprise projects where you get to appreciate strong typing, oop or linq. &amp;#x200B;
Have you verified this via experiment by teaching a lot of students? C is very simple from a language spec point of view, and you learn the very fundamentals of the OS and hardware you work with which can pay dividends for any future language you learn. Compared to someone who started with only Java or C# and never got a good understanding of how memory, and pointers really work. most early programming toy problems are not so different in low level languages anyway. fib, guess the number et all are basically identical in C and Java and C#
Haskell would be fine.
I started with C# and recently picked up PHP. Honestly I never knew I was so spoiled with C# and Visual Studio's tools until now. It also makes me hate PHP. 
I actually started with the htmlagilitypack but I'll give it another try. One basic thing I'm stuck with is that in the examples they have used the source as a pre-written html document. What if I want to read the html document by just providing the link? I know these are stupid questions but I don't have any sufficient web development skills. 
I love C#, but IMO there are much better languages to start with. Some of the issues with C# as a first language: * Strong association with UI driven development tools means newbies won't get a sense of what actually happens between writing code and running it ("idk, I just hit F5 and it runs"). This really shows in interviews btw. Maybe some teams don't care if you know anything about what happens behind the scenes, but mine does. Compare this with a language like C, which you can still write in a visual interface, but most resources will be teaching a bottom up approach where the student will have to learn about the nuts and bolts that an IDE takes care of for you. * Strict OOP means you can't write a program without having to use multiple irrelevant features of the language. Typically a beginner resource won't teach arrays, OOP, static methods, etc until later on in the material. But these are all part of a basic "Hello World" application by necessity. Java has this same issue, you have to present the basic application and say "ignore all these weird bits until later". Compare this to a language like Python, where "Hello World" is a one-liner. * There are now several active "flavors" of .NET, and understanding what they all mean and how they interact requires some historical context and niche knowledge. This extends beyond the framework itself into the most common libraries as well. * Some common workflows assume an understanding of deeper architectural concepts. If a newbie says they want to start writing web apps with C#, you'd probably be turning them off from coding entirely if you point them at ASP.NET Core as a starting point. "Okay Johnny, let's talk about dependency injection..." Don't get me wrong, there are certainly worse first languages (coughC++cough), but I think we're kidding ourselves if we can't admit that there are fundamental problems with promoting C# as a first language. With the right resources, perhaps it can work, but I think newbies are much more likely to be successful in getting started with a language like Python, Ruby, Perl, etc.
Python is probably the easiest simply because it takes the least effort to setup and start running programs, but I prefer C# because of compilation which removes a lot of weird runtime errors due to mistakes in your code.
In your implementation, you're looping through the characters in the string. This is the main problem, as you don't get enough information in the body of the loop to solve whatever problem you're trying to solve. Apparently the information you need is the index and the value of each position in the string, but due your chosen looping mechanism, you're only getting the values. Since there can be duplicate character values in the string, the index can't be looked up based solely on the character. So what you need to do instead is flip it. Don't iterate over the values, iterate over the indices, since there cannot be duplicate indices. Then instead of looking up the index of the character, do the opposite. Ask the string which character is at the current index.
Cant you use c# with the new net core?
If you want to completely understand how a computer works, Assembly is a good first language. You will learn how processor works, binary, interrupt/IRQ, memory addressing, registers, OS syscalls, endianness, and other things you won't learn from higher level language abstraction.
What do you mean how? You'l have to build a circuit to power them, which you can probably find in the documentation for whatever servo you are using. Typically most electronic components have online documentation that includes basic circuit diagrams for common use cases, as well as necessary information such a voltage/amp requirements. Other than that it looks like the Arduino would send your waveform signal to the servo. 
Yes, it’s a great language to learn. C# is great for making apps on all platforms mobile or not. C# is getting new features, more support, and is just a great experience all together with a growing community. I was brought up on Visual Basic and Python, always said that C# was too difficult to learn. Today, you can’t pry it from my dead hands. I love it.
https://circuitdigest.com/fullimage?i=circuitdiagram_mic/Circuit-diagram-for-Controlling-Multiple-Servo-Motors-with-Arduino.png
I'd like to add one more link for anyone interested in electronics. If you want to good prices on components, and don't mind a little wait time on shipping try: &amp;#x200B; [https://www.digikey.com/](https://www.digikey.com/) It's probably one of the best sites out there for cheap, quality parts, and it has extensive documentation all most components, including circuit diagrams.
Some points of interest: - [Custom markdown AST parser that tries to replicate how Discord renders its own markdown.](https://github.com/Tyrrrz/DiscordChatExporter/tree/master/DiscordChatExporter.Core.Markdown) - [Output file rendering via Scriban templates](https://github.com/Tyrrrz/DiscordChatExporter/blob/master/DiscordChatExporter.Core/Services/ExportService.cs) ([HTML template here](https://github.com/Tyrrrz/DiscordChatExporter/blob/master/DiscordChatExporter.Core/Resources/ExportTemplates/HtmlShared/Main.html)) 
What? No. Asm shouldn't be taught as a beginner language
No, start with c++, after you get used to that clusterfuck learning anything else will be a breeze :)
Can develop on either mac or windows. Target os is mac and windows. Yeah I found plenty of outdated guides.
Great to start and great to finish
Follow-up question: do you still have to say `foo.Value` to get at the value of a nullable value type, even though you don't with a nullable value type (I assume)?
There are only six possibilities. Writing down all the IFs is just six lines, twelve with print statements. If you only care about the values (not the names of the variables) you can get down to a mere three IFs. 
It's nice to be here among my python-hating friends.
I think people spend too much time worrying about what the perfect starting language is. There are a few that I'd probably avoid (like C or C++), but other than that, it doesn't really matter. You could make endless arguments about if it's better than x or not. Don't worry so much about it. C# is fine to start out with. Pick a resource in the side bar and start learning. You're not stuck to the language forever.
Yes. Is it the best? Maybe but probably not... From a lower level I recommend starting with C++ to understand memory management as well as the same OOP. Otherwise from a professional standpoint technically c# and Java are similar and java is used more. 
I think learning programming in general is more important as a beginner. That's why I would recommend pytgon as a first language. Then you can move to statically typed languages (C like languages).
I don't hate Python. I just don't like it.
Yes. Nullable value types are such at runtime. Nullable reference types, for sad legacy reasons, aren’t.
Aren’t you asking in the wrong subreddit? The languages don’t differ that much, but C# has arguably evolved much more.
which reddit do you think will be appropriate? 
So together with the Equals via ArithmeticOverflow implementation this would be a quite smooth way to reimplement Enumerable.Range(1, n). Just need to find words or maybe sentences which are long enough for all n.
I work as a Rails dev now and while there's some cool tooling, it's still not as great or what I'm used to having with C#.
I don't really think that today when .NET Core is pretty usable across mostly all decent operating systems there is any need to switch to a Java.
I wouldn't assume that OP's actual problem can be solved by just Enumerable.Range(1, n), that would be insulting OP's intelligence. 
What I mean about the advantage of compilation is that it removes one more barrier of entry for developers who are going to hit a runtime error (due to a type mismatch or something) and hit a wall, where a compiler will go "hey you can't assign a dictionary to an array type".
The version of java I used didn't have getter or setter properties; maybe that's been addressed. But instead of something like this: Door.Height = 5; You had to do Door.SetHeight(5); Made it kind of klunky. And java is a specification, as where C# is a product which a gazillion guns blazing on it. At least from what I've seen if you compare apples to apples and look how far c# has come in the last ten years java is a bit of a joke. There are some great pieces of software written in java but I think someone would be hard pressed to say that it has as much stuff in it or that it performs as well (now that core is out). 
"My dream is to get into graphics/game engine programming" would suffice to know that you need that knowledge
I agree with you (I use C++), but I think the dynamic typing (which I hate) and lack of syntax of python makes it good for a beginner.
Java reddit
It hasn't been addressed
.NET has such a bright future. The move to .NET Core and making .NET development platform independent just guarantees that C# and .NET in general are only going to get more popular in the years to come.
okay, will do
Suggesting perl as a starting language is an interesting choice. Which one was your first language?
If you’re comfortable working with Visual Studio, moving to an IDE with IntelliJ, makes the transition from C# to Java fairly easy. 
I wonder if this will be changed in .NET Core, since Core is less concerned with "sad legacy reasons"?
the company already has existing applications written in java and literally makes all their dev switch to Java regardless of which language background you come from
I kinda like it but on big projects it quickly become insane.
You would go through Unity first.
Exactly why I'm reluctant to make the switch and seeking advice from others 
[FrEee](http://edkolis.com/freee) is an open source clone of the classic 4X game Space Empires IV. I've been working on it on and off since 2013 and it's playable in multiplayer via email or [PBW](http://pbw.spaceempires.net) (there are no AIs yet and a few other features such as espionage and random events are missing). We even have a [subreddit](/r/freee)!
Ouch. I didn't expect that. This also applies to generic types (obviously) so you can actually drop the null-safety by mistake... [Sharplab example](https://sharplab.io/#v2:EYLgZgpghgLgrgJwgZwLQDk4BstWFiAJQkiQDsBjCAFQE8AHFAGhhATjKYBMQBqAHwDEZbLnwQABBDJ4CAWABQAAQDMEpQEYAbOoBM6jQHYJAb0USL6tcmgEueiQHFpAHmoA+CectmFl/1YS1BIAalBYcJImAOYQMADcAL7eAYHOZAAUwTAAlKah4ZESALwSCRLJfpaV/imBmjpKACwSALJQAJaZeb6pFgBuUAgS0SUSZBAA7k6umgAMAPzuGSI4OfF1tVWpAPQ7EgDKcBRUyMhg2EwSyF1UZQwoEkOSEACOcOGbloPD0fqloygyBmZBc83cG22AS+Fj2EgA6kMyF1olcgVIAB6MCgwCBcGEGObXMbRAB0YQiEEhBLh6AA9hJJkiURIAIQE+bXf4jXTkwpUuqVRJAA==)
is intelliJ the IDE for building java applications? 
What I meant was, could I use a 9V battery to power 2 servos or would that be too much? Should I use 4 AA batteries for 6V instead? I believe that my servos will be in parallel so shouldn’t that mean that the voltage doesn’t split?
Use Kotlin then, it is much better than Java and fully compatible with everything on the JVM.
My advice, start with plain good old C (or C++). Learn about functions, pointers, arrays, heap memory allocation etc. When you are comfortable in C switch to C#.
I did, but I can't say that I'd get into that type of job easier nor faster than doing computer science and learning low level language like c++
It just needs a strong platform independent or desktop UI toolkit with form designer. I know there is work being done to provide a XAML based toolkit for Linux but I’m not sure how mature it is.
DO NOT embed those zip files in exe/dll binary, that is insane.
I thought kotlin was just for building android applications 
No it is not.
Most major companies still develop on top of Solaris. In such cases Java is No1 choice.
Yes but I’m referring to Jetbrains intelligent code completion feature which I’ve seen integrated into other Java IDEs. 
You'll be a decent java developer within \~100 hours, the languages are really similar and object modeling along with design patterns function the same. But the json toolkit as an example (I used sax, I think) sucked balls. Hibernate is a joke compared to EF. Back when EF was new Hibernate was way better, but from a productivity standpoint and a separation of duties you're better off with EF. Maybe it's like going from a Toyota sports car to driving a tractor. They both work and it's not like tractors are bad but you'll definitely be missing things.
I'm not convinced switching to java is the right move. I know as a developer I shouldn't be stocked on one language. but if I'm considering switching it should be to a node js or something equally exciting 
oh okay. 
Java is just another programming language. you don't really "switch" to it, though if your work will only be Java one can reasonably assume you'll be doing less C#. Nonetheless, though, Programming languages aren't mutually exclusive, and once you know one you shouldn't have any difficulty picking up another. We can boil it down to two choices in your case: 1. Refuse the offer and find another job 2. Use Java 
I really just use it for server-based stuff these days. Entity Framework / SignalR / Web API, and use Angular for client stuff. I haven't touched desktop dev in a while now, but I thought Xamarin was supposed to fill the cross-plat client niche?
lmao at going from Toyota to tractor. I don't want a tractor, I'll rather go from Toyota to a Benz
What does a guy have to do to get a semi-colon around here, amiright?!?!?
Java has equivalents to a lot of the .NET libraries and tooling. There are many Java frameworks that solve the same problems as .NET core, but since your company is most likely using Spring my answers are geared toward it. &amp;#x200B; |*.NET*|*Java*|| |:-|:-|:-| |ASP.NET MVC|Spring MVC|| |ASP.NET Web API|Spring REST|| |Entity Framework|Hibernate|| |WPF|JavaFX|| &amp;#x200B;
Scripting languages in general feel that way to me. I looooove Java and C#, but I freaking hate programming in JavaScript regardless of the syntax similarities.
Yeah, if nothing else, it'll make you love the concept of programming because of how organized and powerful Visual Studio is. 
C# is great language to write bad code :) &amp;#x200B;
Their not super robust. I’d like to see a Java type situation grow around .Net Core for desktop client side work. Just nicer looking.
wow, thanks. will check out spring framework 
.net core still needs an OS to run afaik. 
I don't hate Python either. And I don't like it either. And I don't null, and I don't snargle the color blue. What's the actual answer? Only way to find out is to run a test!
Checkout Spring Boot in particular. You may realize a lot that you like in .NET is there as well. Good luck!
Why?
My first was actually [Chipmunk Basic](http://www.nicholson.com/rhn/basic/), which holy crap is apparently still a thing!? I definitely wouldn't recommend any form of BASIC as a starting language these days though. I am biased on Perl because my team maintains a legacy Perl codebase, but I think the "there's more than one way to do it" motto is good for beginners because it promotes experimentation with the syntax. It also often allows you to write things in a way that closely matches how the problem might be described in normal human speech. [For this same reason](https://en.wikipedia.org/wiki/AppleScript#Natural_language_metaphor), Applescript is also touted as being particularly easy on beginners.
You would likely not be taught C++ first up even in CS, my kid had Java thrown at them first year, C++ was in year 2.
For which propose, just the right tool for the right job. Ps. C# is an excellent tool
I guess citing r/ProgrammerHumor was sufficient to indicate that I did not intent to insult anyone :D
I started with C# 15 years ago and after a year or so I thought let’s give PHP a try. After I decided never to explore again and hade a serious case of PTSD. But today is different. I’d look into F#, Rust and maybe Python as they are cool in their own right. 
I’d say it’s decent. It’s certainly not the worst. I’d strongly recommend python because the path from effort to reward is shorter, and the iteration period is shorter.
I worked for Toyota briefly. There's no C#/.NET anywhere. It's essentially ALL Java.
Yes, because before someone knows what a for loop is, they should be learning about memory management. 
C# is a powerful programming language with a number of facilities designed to minimize headaches for programmers working on large object-oriented applications and also new programmers who might not yet have a full grasp of computer science concepts. Microsoft has loads of good documentation on the language itself. You'll want to set up a file folder of bookmarks to MSDN pages and have that in your bookmarks toolbar. IMHO the best way to learn is to just jump right in and starting doing things. Good place to get started: [https://visualstudio.microsoft.com/vs/community/](https://visualstudio.microsoft.com/vs/community/) &amp;#x200B; If you've never programmed before, you'll want to do what's called a "Hello World" program for C# or any new language or tool that you learn. "Hello World" is an intentionally simple program that is more meant to prove out your ability to compile a program and have that program do some token *something*. The idea being that once you have this down, you can start to experiment on your own and internalize your experience more effectively than just dryly reading words from a web page or book.
Most CS courses seem to be something like python for a few weeks, Java/C#, then to C++ in the second year
Which one is used more depends on your country. Pretty sure .net is used more then java in Australia/New Zealand, especially for new projects. I recommend everyone learn c or c++ to get an idea of how memory management works, but I'm not sure it's the best first language. I'm guessing there is too much to learn all at once. At my university, python is first so people learn the concepts of variables, loops, conditionals, etc. In second year it expands to c/c++ for embedded systems and graphical programming, and java for learning how larger systems fit together.
That's a serious misrepresentation of what I was trying say. After picking up the basics of a for loop they should learn memory management frankly. It's an overlooked concept nowadays and the developers I met that understand it thoroughly are usually really good. That's why I say memory management should be the next class after 101 or whatnot. 
why not? that was my first lang back in the 90s, before i picked up pascal, c, c++
Asia is Java heavy. Poor them.
I never knew that that's really interesting... I think the stats I use are universal but maybe they're US only. As for python as first language that irks me. I think first languages should at least be strongly typed. (can't remember in strongly is the right word in that phrase)
I hate MS and am a huge open source advocate but C# is the language to go with imo. Java will continue to coast on it's libraries and existing code bases that require maintenance, but given that it's now useless for desktop development, on top of it's fundamental design problems........
Seriously? jfc... why do people act like Java is amazing when it has so many terrible design choices ? smh
Making this more simple = great programming
That would be a breaking change. struct Foo { public int Value;} Foo? a = ... if (a.HasValue) b = a.Value; // Foo or int?
I don't know. You would think that each update would make code shorter but as effective or more effective. Java just stays overly verbose.
I'll assume you will find all the standard tutorials etc.... so: [https://www.dotnetperls.com/](https://www.dotnetperls.com/) is useful and don't miss [https://mva.microsoft.com/](https://mva.microsoft.com/)
And anytime that is raised the response is "IDE autocomplete"....
It's not an easy first language, but it is a good one. Learning c# made it a breeze for learning the half dozen or so languages I feel comfortable working in today. 
Personally I agree with the strongly typed first language. Maybe it doesn't matter though.
https://mva.microsoft.com/en-us/training-courses/c-fundamentals-for-absolute-beginners-16169?l=Lvld4EQIC_2706218949
Hating PHP just makes you a competent dev, imo. Not hating on php devs. Even those guys tend to hate the language once they've learned a second back-end language.
simply :) https://docs.microsoft.com/en-us/dotnet/csharp/tutorials/intro-to-csharp/
Sorry bud, but you’re out of touch with reality. Programs aren’t slim anymore because they simply don’t need to be. Memory management is a ridiculous task in most languages, and in others, it’s just wasting time. It’s overlooked because it doesn’t matter. 
I don't think you understand what I'm trying to say. Programmers who understand memory management concepts more thoroughly make for better programmers. It actually holds super true for C# as well the garbage collection in Java and C# and the illogical patterns it can follow sometimes can be frustrating. However those with a good understanding of C# can make it almost as fast as C++. 
How up to date is it though? Will I be missing a bunch of important new features if I read it? Are the best practices still the same as they were when the book was written?
Traditionally, Eclipse is. NetBeans is also fairly common. IntelliJ will feel particularly at home if you use ReSharper for C#. Otherwise, I think I’d go with NetBeans.
Most people are going to disagree with you there, seeing as how things like python exist. C is most certainly low level.
Check out the [TIOBE index](https://www.tiobe.com/tiobe-index/) of programming language popularity "based on the number of skilled engineers world-wide, courses and third party vendors." On that list, C# is in 6th place at 3.267%, **behind #5 Visual Basic .NET at 6.429%** (how is *that* possible???). The good news is that Java, C and C++ in the 1, 2 and 4 positions are all C-like languages like C#, meaning the basic syntax is similar. So you can go from C# to Java etc. somewhat easily (all these languages depend a lot on huge libraries which are separate learning curves). **I find the TIOBE trend for C# really dismaying.** If you look down the linked page you'll see trend lines over the last 16 years for several of the top languages. C# peaked in 2012 at 8.6%, *twice* its current popularity. So demand is down, and C# developers are competing for fewer jobs, it seems. It may be the case that TIOBE is invalid. Indeed used to provide trends for different job keywords, which also showed a sharp decline for C#. I can't find that feature, though; my guess is that it has been removed. Searching Indeed shows 24K java jobs; 22K Python jobs; 12K JavaScript jobs; and 10K C# jobs. If I was seeking to break into programming, I would start with one of those three before C#. I enjoy C#. Microsoft rewrites the development environment every few years, though, even within the C# domain. I'm old and lazy and find it too difficult to keep up. I switched from 18 years as a PowerBuilder developer in 2006. I wish I had chosen Java instead. One other relevant factoid is that start-ups very rarely want to use Microsoft tools. [Here](https://www.quora.com/Which-is-the-best-programming-language-for-a-startup) is a Quora discussion of which language is best for start-ups. C# is barely mentioned. Java, Python and Ruby are recommended about 5 times as much. TL;DR: C# is fine for learning. If you want a job, try Java, Python or JavaScript (with HTML and CSS). The future is the web, and C# isn't great for the web, IMO, esp. stand-alone (esp. without JavaScript / HTML / CSS).
I work with C# at my job but did a bunch of Java in school, so take my opinion with a massive grain of salt. It seems to me that they are pretty comparable languages, but Java is more verbose and C# usually seems to get the cool new features a version or two before Java. If you know one OO language you can probably be pretty successful fairly quickly in another. 
No, it doesn’t look like it. They’ve made various C# 8 features Core-only (or rather, they likely will never come to Framework, and certainly not to 4.8), and nullable reference types isn’t one of them. So I think the ship has sailed on a cleaner, more consistent syntax.
It is a good language to learn. Not for beginners. At the beginning you should be focused on learning programming constructs, not languages. Once you learn the fundaments you can then learn language specific things. In the beginning, it is easier to learn highly transferable syntax and knowledge items. This is why they teach C based languages such as Java, c#, c, cpp, etc initially. It's the same reason you learn piano scales before you learn bach
&gt; And I don't null But do you undefined? (Who's genious idea was it to have both null and undefined as two different values into a certain language?)
Is that really true? I haven't heard that word since 2005.
Short answer is Yes. C# is a good language for object-oriented programming.
Microsoft is not what they were 10 years ago, and appear to be moving towards more open source. 
I might add... Blazor is also a great up-and-coming .NET technology for getting C# into the client browsers or web applications. 
There's Avalonia, which is basically slightly modified, cross-platform WPF.
&gt; .NET has such a bright future. Are you aware of any data showing that demand for .NET is *not declining*. [TIOBE](https://www.tiobe.com/tiobe-index/) shows the popularity of C# down by *half* in the last 7 years. I would *love* to see evidence to the contrary.
Good luck. I did the opposite transition and like C# and CLR much better. Java ecosystem seems to be more vibrant and varied though. 
I'm well aware of the current shifts in the company, though I also lived through Embrace, Extend, Extinguish.... I have valid reason to hate them, regardless of the half hearted attempt to pivot that is occurring....
Fair enough. We'll see what happens. If nothing else, they sure treat us developers well. 
A mad way = great fun
The syntax is debatable, but python has strong, dynamic type system. Also optional static typing for years.
Not usable with a team. You could call all your variables and functions names of vegetables and fruits. They will love you
The reason why a language like C# is good now is because of interoperability supported by .net Core. Object-oriented programming should be your way of writing code. Learn C# the right way and reap benefits! 
Another basic gotcha to be aware of when moving from C# to Java: string comparison. In Java, this won't work the way you expect: &gt; if (myString == "foo") ... Instead, you need to do this: &gt; if (myString.equals("foo")) ... This messed me up a couple of times when I first started.
Of course not, should forever remain in reddit comments.
I'd say a syntax that'd easily carry over to other languages, which imo C# is. 
1. As a fairly experienced dev... honestly, who gives a shit what happens behind the scenes? Unless you're the one guy writing the build scripts, it doesn't matter, and that's more of an admin job than development. 1. There are still many reasons why strict OOP is still better 1. This one is true, but it doesn't really have much to do with education, since you'd only be learning one of those at a time. However, this is also true for any language that's old enough to have libraries worth learning. 1. This one is just programming in general...
Thanks for the detailed response. I was looking at C# because I live near Microsoft headquarters and thought that might be a cool place to work in the future but I see a lot of people making compelling arguments for Java and Python too. I think I might start with Java or Python and learn C# once I'm more comfortable with coding.
&gt; Microsoft headquarters and thought that might be a cool place to work in the future Microsoft hires top developers. C# and F# might get there in there, if you're really smart and really learn your stuff over the next 10 years. A worthy goal!
This is great, thanks you!
I'm sorry but I don't think you're interpreting this data correctly. Unless you really believe that the demand for JAVASCRIPT the main language used for everything front-end only has a demand of 2.5%?? To me this looks like some subjective quality ranking of code categorized by language which has nothing to do with the widespread use of a language.
Right, sorry.
Yes it is, one word linq
I'm a .Net developer and recently started teaching a Java class at a college. Javas new release schedule and the fact that Oracle is releasing it's stranglehold on it means you're going to see some exciting changes to Java in the next couple of years. It had been 15 years since I had you used Java after working mostly on .NET and I honestly like working on both.
&gt; To me this looks like some subjective quality ranking of code categorized by language which has nothing to do with the widespread use of a language. I'm skeptical too. Did you look at the TIOBE methodology? Also Visual Basic .NET being in front of C#; maybe the index finds forum references and there are more people asking VB.NET questions? Unfortunately I don't know a better measure of demand. Do you?
First and last IMHO. 
If Visual Studio is telling you that adding the project reference would create a circular dependency - it almost certainly does. Perhaps if you posted your tree of projects with the dependency nodes expanded, or also include all your .csproj files, it might be easier for someone to spot the problem.
**Most** major companies do eh? All the data I can find puts it at about \~2% of the server market share currently...
no problem
Almost all languages have sub par tools. Which puts me off trying to learn something new. 
&gt; It's definitely possible, because I've done it. I believe you. I just wish the documentation was not so... well, absent.
Oh, I'm not doubting that it does, I just couldn't figure out why it did. I sort of solved the problem already by just putting the methods that needed the ref in another project. I think it was a vs generated dependency because the project I needed to reference was a service proxy, and I'm guessing proxies inherit dependency from the service?
The value of a property can be null. If it's not present then the property index returns undefined. So there's a logic to it at least.
I think it's good. It has a reasonable amount of stuff for you to learn and build upon with other languages later.
Haha, same. Except I picked up C# 2 years ago. Haven't touched PHP since.
Python was my very first language which I used for the first few months. Then I got an apprenticeship where I began learning C# and I haven't touched python since. Python is a great language but C#/.net/visual studio offer so much. I would recommend C# as a first language for Sure. 
There are a lot of js that reads data from a csv and plot them in a web page.
Can I get a link?
Going against the grain here but no. There's a lot of investigation that is required to be able to basic tasks in C#. OO and the associated structures while useful in large projects end up feeling like useless barriers to a new person and the added compilation step extends the line from press go to it does a thing. Same thing with static types. They're super useful but as a beginner you tend to not care why or how the language does a thing. You just want a thing to happen. Scripting, and especially dynamically typed languages would be better. Either Python or shell scripting. For many folks that use programming in an ancillary role they'll never need to know the implantation details of a language to accomplish the simple tasks they have. And for beginners it's better to have something "work" and not know why that sit rhere for hours wondering why a language is making you do things you can't comprehend a reason for.
https://plot.ly/javascript/ https://canvasjs.com/docs/charts/how-to/create-charts-from-csv/ 
not sure what that means....
That's horrible advice regardless of what language you're speaking about. There's always a lot to learn from other ways of doing things. It's easy to ascribe "good" to something familiar. Not knowing anything else allows that perception to go unchecked.
It was my first language and I think it was quite good, using Visual Studio on Windows. There's a lot of "magic", in that the code help it gives is like 99% perfect, so you can basically learn about functions in the editor just cycling through what's available and read the documentation. There's no other language with the same level of support. Also, compiling and running your code is just pushing a button, so everything is hidden from you. This gives you more of time just coding and learning that way, but there are some downsides. It's very hard to transition over to other languages if you are used to all of the Microsoft magic, as you'll have to fight with compilers and less perfect IDE's or text editors, configuration to get things to work, and so on. Also, the graphical libraries aren't very good for learners, they are more set up for professionals. Same for making web applications. When I was learning in 2016, there weren't very good beginner friendly tutorials available. If you want to learn for the sake of video game programming, it's probably the best choice for beginners because of Unity.
Just recently started a Java job (much better and more reliable pay), and while I can say I don’t *hate* Java, I don’t exactly *like* it, either. IMO Java (using Swing) like struggling with WebForms in a world that has already leapfrogged over MVC and gone straight to Core: you can clearly see that it has its place, but the only reason why you even want to touch it is for maintaining legacy systems. Not for greenfield projects. I’ll stick with my current position for a few years to learn those things I am still short in, but I’m not going to stop looking for that senior DotNet position if it ever opens up locally (can do remote, but I dislike how remote can end up bleeding out into off-hours… my passion really does need the boundaries of an explicit 9-to-5).
I am still learning and so this may not be the most elegant or efficient way to go about it, but a lot of my starter programs have dealt with similar stuff so I'd like to pitch in and help if I can. &amp;#x200B; It depends on where your initial data is, but it sounds like it's in an external file or something, not in a `List&lt;T&gt;` in your program, right? And then when you say you have to create a new list for each company, are you wanting each company list in an external file? And it also sounds like you want a program to do this for the whole list (having a separate grouping for each company in the list, not just one grouping for a company you specify). That's what it sounds like, so I'd just assume that's the case. If not, some parts of this won't be relevant. &amp;#x200B; So I'd see that as three separate actions: 1) get information from your data source into your program; 2) store and sort/manipulate that data; and 3) output new data. I'm going to mainly focus on 2) first because I think that would help with thinking about program organization. So again, this is all contingent on how your data is organized in the list, but it sounds like it'd be best to treat each line in your list as its own object. So I would create a class where you can create one object for each line from your data, and that object has a property for each column in your data source. Then you can put all of those line objects into a `List&lt;T&gt;` where you can take advantage of built in functions and sort as needed (I vaguely know C# has indexers, but I don't know tons about those yet and haven't used them at all). Reading from a file and writing to files is going to be largely contingent on what kind of file your data source is and where you want to put it. In my experience, I've had success googling "C# importing data from Excel/.txt/.csv/etc... file" or "C# creating new Excel/.txt/.csv/etc...". So I sort of avoid different file types here in this post, I just assume you have data in a tab separated text file and want outputs of the same. So just me quickly going through and sketching the full program and commenting where I can (still learning and this is quick so there are likely some mistakes and maybe not best practices; I haven't put this through a compiler or anything like that, just typed it all here): //class to represent each individual line in your data source class DataLine { //properties for your DataLine class; //I'd create a property for each needed column from your original list public string BusinessName { get; set; } public string CompanyId { get; set; } public string YearsInBusiness { get; set; } public string etc... { get; set; } //you could create a constructor that uses a string array parameter //with the string array containing line info split by separator; //would only work if every list you ran through the program had //data columns in the same place; public DataLine(string[] lineInfoArray) { //assuming Business is in your first column //company ID is in the second column, etc... BusinessName = lineInfoArray[0] CompanyId = lineInfoArray[1] etc... } //method for formatting as tab separated string //for writing each line to a file when you eventually have //your groupings public string WriteDataLineForFile() { return String.Format("{0} \t {1} \t {2} \t {3}", BusinessName, CompanyId, YearsInBusiness, etc...); } //Class to assist with getting lines from file, creating DataLine objects //from each line, and adding them to a list of all DataLines class File { public string FilePath { get; set; } public File() { } //below method GetAllLines() gets each line from file //(this assumes a tab separated file); //creates DataLine object, adds to list, returns List&lt;Line&gt; of all //lines in the whole file; public List&lt;DataLine&gt; GetAllLines() { //Creates a list of DataLine objects where we can store //every line from the file; List&lt;DataLine&gt; allLines = new List&lt;DataLine&gt;(); //Opens and reads the file; var fileStream = new FileStream(FilePath, FileMode.Open, FileAccess.Read); using (StreamReader streamReader = new StreamReader(fileStream, true)) { string line; //until it hits a null line, goes through the file; while((line = streamReader.ReadLine()) != null) { //creates a string array with each //index containing value from corresponding column string[] lineArray = line.Split('\t'); //creates a new DataLine object passing the string[] //we just pulled from the file as a parameter to the //DataLine constructor; DataLine dataLine = new DataLine(lineArray); //adds the just created data line object to our list of //all data lines allLines.Add(dataLine); } streamReader.Close(); } fileStream.Close(); } //static method to create a new file for each company group. public static CreateFileForCompany(List&lt;DataLine&gt; companyGroup) { string path = $"c:\{companyGroup[0].BusinessName}.txt using (TextWriter textWriter = new StreamWriter(path)) { foreach (DataLine dataLine in companyGroup) { textWriter.WriteLine(dataLine.WriteDataLineForFile()); } } } } //Main program; class Program { static void Main(string[] args) { //creates file object, sets file path; File fileWithAllLines = new File(); fileWithAllLines.FilePath = @"c:"; //creates List&lt;DataLine&gt; with everything from the file; List&lt;DataLine&gt; allDataLineObjects = fileWithAllLines.GetAllLines(); //Grouping below //maybe ugly and not best practice??; //but creates a List&lt;T&gt; of List&lt;DataLine&gt; //objects grouped by company; List&lt;List&lt;DataLine&gt;&gt; companyGroupingLists = allDataLineObjects .GroupBy(dataLine =&gt; dataLine.BusinessName) .Select(businessGroup =&gt; businessGroup.ToList()) .ToList(); //now that you have a List of your individual lists (grouped by company) //you can send each of those to a file; foreach(List&lt;DataLine&gt; company in companyGroupingLists) { File.CreateFileForCompany(company) } } } Anyway, sorry, this went pretty long. As I've said, I am learning (sort of having to teach myself tho, so it's slow and I'm sure I miss lots of stuff) and this is how I've been handling similar situations lately. And again, this was sort of quick, I just wrote it here in Reddit, haven't tried running it through a compiler, so there are probably some mistakes and you'd probably have to add some namespaces, etc... &amp;#x200B; I hope this helps; it was good practice for me and gives me the chance to put code out there, if experts happen to read this and want to correct me or help me see better ways, I'd appreciate it very much! &amp;#x200B;
That’s what I was referring to.
1. I *am* the one writing/maintaining build scripts, but I'm not the only one. I ascribe to the idea promoted in The DevOps Handbook that the build should be collectively owned by the dev team. As a developer, if you don't know how the build works, then you're not a fully functioning member of the team. 2. Better for learning though? I can understand the argument that it's better for well designed software in general, but I don't think many would argue that strict OOP is a positive quality when considering if something is a good first language. 3. I didn't really explain this one thoroughly. The main idea here is that it's more difficult to find information about the specific flavor you're learning, unless you know exactly how to search for the right thing. It also becomes more complicated to answer questions about the language for a beginner when you may need to clarify which flavor you're using. A beginner might not even be aware that this is important information. 4. This is more of a culture thing I guess. The idea here is that the more complicated, enterprise solutions for common problems are taken as the default option in the .NET world, rather than recommended on a case by case basis. I rarely see people recommending [Nancy](http://nancyfx.org/) in the .NET world, whereas in the Python world, Flask is wildly popular.
Honestly my shortlist of good first languages is Python C# JavaScript Java You're fine.
That's good to know! I've gotten into the habit of using string.equals almost exclusively - partly because I often need to make case-insensitive comparisons.
Arduinos won't run Windows 10 IoT, so the short answer is no. Long answer is that Microsoft has some libraries that make things confusing: "Arduino Wiring" is a library that allows Arduino code to run on a raspberry pi. The reason it exists is so that Arduino code can be easily ported over to Windows 10 IoT. They have several more libraries that allow different devices to communicate with an Arduino, but none of them actually run .NET code on an Arduino.
Not only great first language but a great language and ecosystem to specialize in. By far my favorite language to program in. Migrating to other languages is easy. For a close alternative to C# I'd recommend Haxe. Amazing language as well. Third place I'd say Dart lang is a good one too. 
C# =&gt; Java is a.. novel experience. Spring and Spring boot are a fresh hell. Dropwizard, Javalin, Spark are pretty good for web stuff. Package management (both maven and gradle) are pretty horrible - especially publishing packages. Build systems are... painful. At least IntelliJ is good. Kotlin on the other hand, is pretty lovely (and you'll pick it up in a couple of days as a C# dev), especially paired with http4k. Works on the Jvm, compiles to Java byte code (see: MSIL).
 unsafe { bf01 = true; var ptr = (byte*)&amp;bf02; *ptr = 2; }
In that order? 
I think your answer greatly hinges on a specific definition of “beginner,” and from context you seem to equate beginner to someone who is using it in a business setting to automate. I believe if a person is an absolute beginner, I.e, little to no knowledge of how/what programming does, then all of your points I would say enforce that the language is a great starting point.
You know, I wasn't thinking of order when I made the post but, yes that is my general order. Really the language I would suggest changes based on what the person wants to do with it though.
Admittedly, no I haven't but I'd prefer the high level then C, C++ route I took than the other way around. Much easier to learn the fundamentals of programming without the added memory management requirements piled on. 
I dont know your situstion but made an effort not yo seitch to java during my career. I started in the c/c++ and basic space. When. Net came out, i never looked back. Though i agree a language is just anotber tool, companies usually see it differently. Might be harder to get another. Net job later on. I have had yo work with java and tbe tooling hurts. 
https://d3js.org/
Syntax is easy and the least concerning part of learning a language (disregarding esoteric shit).
Jetbrains IDEs are about on par with VS and support a wide range of languages.
[WiX](https://github.com/wixtoolset/wix3) and [Squirrel](https://github.com/Squirrel/Squirrel.Windows) are both open source, if you have to you could build and sign everything yourself.
You're likely running into a limitation of the PE (Windows executable) format. Regardless of whether or not *you* are streaming the data, .NET still has to index into your executable at the correct spot where each file begins, and the PE format uses signed ints for relative addressing - meaning the max value of the index is ~2GB. It can't reach the files at the end of your data section. https://github.com/dotnet/corefx/blob/master/src/System.Reflection.Metadata/src/System/Reflection/Metadata/Ecma335/MetadataRootBuilder.cs#L110-L113 https://superuser.com/questions/667593/is-it-possible-to-run-a-larger-than-4gb-exe http://www.godevtool.com/GoasmHelp/64bits.htm#diffrel
Removed: **4.Request-for-help posts should be made with effort** Make sure any code is properly formatted, explain what you have tried, and where applicable try to create a [Minimal, Complete, and Verifiable Example](http://stackoverflow.com/help/mcve). Be clear and courteous. If a question that could have been easily Googled is asked without indicating what and why those typical results didn't work, it will be removed. Help posts that have had little effort put into them will be removed at the discretion of the moderators.
Ugh. I had to use Java recently. It feels like a very early and very rough prototype for C#. It's literally worse in every possible way.
Alright, I thought I saw something about this and couldn't find it again, so I wasn't sure if that was true or not. I guess it is. Thanks. This 2GB limit is a .NET thing specifically, and EXEs in general can't go over 4GB, right?
I guess you could try packing 1.9GB into your loader as a test and see if it works. I don't *believe* it's a .NET only thing, it may be 4GB in total but only 2GB for `.data`, but I'm definitely no expert. In any case, .NET definitely uses a signed int so you won't be able to index past int.MaxValue.
&gt; Replace temporary collections with Yield yield return can bite on a closed database connection..
Good catch! I think i should add a section to the post where i can add all these gotchas suggested by the community because I already got back few from other readers also. Really appreciate your feedback.
Actually it looks like it may be somewhere under 2gb, but I’m not sure why or at what point exactly yet. Probably going to go with my own file extension and pack everything in one zip with a manifest that details how to unpack it, and the app will be a small thing that will be associated with that extension.
I wouldn't call it "slightly modified": it is a complete rewrite.
TIOBE has never shown any accurate data. Calculating the popularity based on search queries on web search engine is just meaningless: - if a language is hard to learn/understand but somehow popular because of market demand, then you will a lot of noob questions online. Bringing its ranking higher. - if a language is used a lot for education purpose but not so much in the industry, again you will find a lot of questions asked by students. Bringing its ranking higher. - if a language is used a lot in the industry but in some rather confidential context (e.g. Ada), then you won't find a lot of references online. Bringing its ranking lower. - a combination of all the points above or other factors: can bring up and down a rank with no correlation to how really popular it is
It was discussed around the release of Java 9. I have no idea why it was never implemented.
Exactly, I’ll poc/prototype with it but beyond that, nope.
Well, to be fair your employer is still using Swing. JavaFX is the Java equivalent of WPF; it was released in 2008.