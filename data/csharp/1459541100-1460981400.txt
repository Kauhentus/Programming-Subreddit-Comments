No, everything is "stock". Textblock, Textbox, Grid, Stackpanel are the ones I use. No styles set expect what is given by default by these objects.
For all those that might like to see these issues fixed in future releases may want to use the discussion links at the bottom of the article and vote for the features you'd like to see implemented.
Yea, I've seen that before. Your timer isn't waiting for the current read operation to complete before firing the next one. So it's possible to be building two data readers at the same time. Your major mistake is that you are holding open the connection. Throw it away and make a new one each time. (Internally it will recycle the connection for you.)
&gt; At this point, I'd rather not say the steps you need to take in VS to get this to happen. File a bug report.
Where's the best place to do that? Here? https://github.com/dotnet/roslyn/issues/new
Is `case *` equivalent to `default` in switch blocks?
Not quite, since any pattern matching can have a `when` clause. The meaning is similar, though. It does a pattern match which always succeeds and does not bind to any variables. The `var` pattern is similar, which also always succeeds, but does bind to the identifier you give it. So either of them could take the place of a `default` in a switch block.
Is there an implied order to how patterns are matched (documentation on roslyn says the order is not specified)? What happens if you have both `case *` and `case var x`?
Mads Torgersen said so [himself](https://channel9.msdn.com/Events/Build/2016/B889) [13:30 in]: "You can now structure your code like Javascript!"
drop everything C# guys, and make F# even better =) 
Copying all those fields from your data entity to your view model is indeed a pain. Take a look at Auto Mapper. As long as your names are the same on both sides, it's essentially automatic. http://automapper.org/ 
I'm actually hoping some of this new syntax will make the interop between F# and C# even more seamless. Being able to pattern match F# constructs in C# would be amazing. The whole dream of the CLR is you can use whatever language you need to solve a particular problem best and that they can all communicate with one another easily.
[Free ebook: Creating Mobile Apps with Xamarin.Forms](https://blogs.msdn.microsoft.com/microsoft_press/2016/03/31/free-ebook-creating-mobile-apps-with-xamarin-forms/) by Charles Petzold. Highly recommended book and author. Charles has a deep understanding of XAML and really helps to bring clarity. Each of his examples has a picture from iOS, Android and Windows side-by-side.
Oh cool, I didn't know we had destructuring in the current build. class Teacher { public string Name { get; set; } } let john = new Teacher { Name = "John" }; if (john is Teacher { Name is var n }) { Console.WriteLine(n); // writes "John" } // variables are scoped immediately after a destructuring if (john is Teacher { Name is var n } &amp;&amp; n == "Jane") { Console.WriteLine(n); // not called } Actually quite an interesting way to extract info out of DTOs, I imagine: public class User { public int? Id { get; set; } public bool CanSendEmails { get; set; } public string Email { get; set; } } // later in some function somewhere ... let user = GetUserInfoFromSomewhere(); let User { Id is int id, Email is string email, CanSendEmails is true } = user else return false; SendEmail(email, id); return true; That code automatically handles nulls *everywhere* and does all of the appropriate checking from one declarative statement. Are you feeling it now, Mr. Krabs?
[I wrote more in depth about pattern matching here](https://www.reddit.com/r/csharp/comments/4ctoy7/exploring_pattern_matching_in_c/). Let me know if this doesn't answer your question.
`var x` just means to bind *whatever* was passed to it to the variable `x`. So yes, in a sense, it doesn't do any type checking, but it will be typed to the variable that was matched against (in this case, string).
Goddamnit. Considering all the stuff MS doing lately I'm not sure what to believe anymore.
You don't get to make the call whether or not an exception should be caught. That is the caller's business. Throwing the same exception everywhere, especially System.Exception, makes this ten times more complicated.
I'm going to guess you have the buttons bottom aligned and the size of the window changed ever so slightly when running the program? (try increasing the vertical height and seeing if the buttons move with the window)
I am just getting back into mobile dev so that this with a grain of salt but: * sqlite is a good choice for a small database. * There are a number of mvvm frameworks that will work, but I am partial to [MvvmCross](http://mvvmcross.com/) Mvx is designed to make it easy to share common logic with platform specific UI. The latest version supports WPF, iOS, Android Windows 8, Windows phone 8, UWP. It can also co-exist with Xamarin forms.
Why would you think so?
Handling and manipulating complex data. In PowerShell you're dealing with actual objects - and not just with large text files.
Yep, so? I think it's easier to deal with objects, instead of trying to parse objects from text and then dealing with them. One (error prone) step less.
Depends what you mean with the C# fundamentals. C# goes very deep, with lots of topics. For ASP.NET MVC I suggest you at least know: * C# (Duh) * Basics of LINQ, you can use [Linqpad](https://www.linqpad.net/) to play around with this * async/await, since it's (default) used for user/account management in an MVC5 project Also a good idea to know a bit about: * Entity Framework (EF) if you'll need a database (EF is not required, but the default system for managing users does work with EF, even for a local database) * Basics of Bootstrap framework (once again, not required, but is support out of the box for a default ASP.NET MVC project) And if you're new to C#, I recommend [Linqpad](https://www.linqpad.net/) for playing around with it. It's basically a C# sandbox with database support for you to play in.
So call python in line when you really need object oriented code. I'm trying to think of a situation I would want to have a file as an object. 
As a WPF developer with no UWP experience: Is UWP just another dumbed down version of WPF like Silverlight is?
That would be super neat. Is edit and continue something in the works for Microsoft? Admittedly, I'm not really adept with wpf, I started using it a few months ago and fell in love after I discovered how to use mvvm with it.
I have not been writing code in C# for about an year now and I realize I need to catch up with a lot. 'Switch' on 'anything' is cool. Pattern matching for every (ya not every, all the time) Case block could be a perf thing in case of poorly designed multi-level complex objects.
That and the architecture are the reason I like UNIX systems more. Makes development so much easier. 
Please tell me it's an appx package so I can also uninstall it cleanly.
Blend makes no difference for me in this circumstance.
No, people will gravitate to c# more because of xamarin
It depends on what you are developing. Front end, it doesn't matter. Backend, depends on the language and dependencies. Are you .Net? Windows. Developing node, basically either will work but some npm packages will be a headache since Windows has a path character limit (how they have not changed this blows my mind). PHP, Python, and Ruby are easier to deal with on UNIX. And considering most servers you work on are Linux (a UNIX os), it is easier to work on locally. If you are building a static site or are building Wordpress templates that use full service hosting like godaddy or host gator, it won't really matter. If you do full stack (front end, backend, and server admin), it is just easier on UNIX. I'm not saying you can't do it. It is just a little harder. And I would rather avoid any more complexity considering how complex full stack web development is. 
That doesn't mean they shouldn't be caught though. Shouldn't be suppressed perhaps, but catching exceptions to gracefully handle them (even if that does mean the program exiting) seems like it would always be a better option than just not catching them at all.
Did you fiddle it? How does the web request differ in terms of actual content sent?
PHP dev on windows is really smooth. IIS PHP installation is well supported and installation does not require to deal pretty much with any config. And development with visual studio together with intellisense and debugging works like charm. Although running in production is still more sane with Linux machines. 
Lol. http://www.telerik.com/fiddler basically a traffic sniffer. Helps you troubleshoot closer to the API call and bypassing the browser
Fiddler. Google it, and all will become clear.
It did. Fiddler means two things in Australia and this wasn't one of them. Wasn't expecting a "traffic sniffer".
You need a lot more than a shiny bash to beat the Stockholm syndrome.
No. This will enable people to run "native" tool chains for things like Python and Ruby. Rather then running Linux in a VM or developing on OSX they can do everything in windows.
I've actually been meaning to get this under my belt, as its you know, a crucial skill to know. In regards to the program itself, i figured out a way to get the data i want where i wanted it, just not the way i wanted it done originally. It write to the table per item clicked instead of once at the end, so horray for a partial victory? private void ingredientList_SelectedIndexChanged(object sender, EventArgs e) { if (ingredientList.SelectedIndex != -1) { OleDbCommand writeRecipe = new OleDbCommand("Insert into TempStorage(Ingredients) Values(@Ingredient)", dbConnect); writeRecipe.Parameters.AddWithValue("@Ingredient", ingredientList.SelectedItem); writeRecipe.ExecuteNonQuery(); creatingRecipe.Items.Add(ingredientList.SelectedItem); ingredientList.Items.Remove(ingredientList.SelectedItem); } I still want to know why the above way didn't work, so i guess its time to make some breakpoints and step through.
I've been a full stack web developer on Microsoft since 1996. I'm excited that Microsoft is finally embracing Linux but honestly, they've had a great developer experience for a long time. Any arguments that web development is easier on Linux just doesn't hold water. Oh, in case you doubt my experience, I've also been running Linux (Slackware first, then RedHat and CentOS) in my network since 1995.
I've used C# once or twice during college. Now, 4 years later, after wanting to learn C#, I'm seeing lots of support from Microsoft, and lots of activity. Really looking forward to all of these latest things that Microsoft has announced, and highly considering setting up a C# environment to develop a game. Currently not sure if it makes sense to use MonoGame with Tiled Map Editor, and also trying to figure out which version of Visual Studio (OR -- how is JetBrains support?).
Do you find other language more appealing or this is because of work? And for visual studio- newest is 2015 with update 2.
Well, in powershell, you can do native interop (using P/Invoke) and also use .NET assemblies.
I think `is` comes with pattern matching. Records are just a convenient syntax to autogenerate it.
You're forgetting that X11 is network transparent. You can *easily* run a normal Windows X server and have clients (say, processes running in the Linux subsystem) connect to it over the network.
But that's like saying you can run the X server on an actual Linux machine. It's not WSL.
&gt; if (fvl.Cells["value"].Value == null || fvl.Cells["value"].Value == "") change to: if (fvl.Cells["value"].Value == null || fvl.Cells["value"].Value.ToString() == "") If the cell value is null, the second part of the conditional will not be evaluated and will not the throw the error.
`let` introduces a new place to do pattern matching. `let x` is short for `let var x`, and the *var pattern* simply dumps whatever it receives into the identifier. So it actually does pattern matching! And all patterns are read-only, so defining something with `let`, in fact, makes it a readonly local var, only with much less typing than `readonly var x = 20`.
There's literally nothing that F# does that C# doesn't since they're both CLI languages. What F# doesn't do is build on the same skillset that C, C++ and Java uses, since those 3 languages and C# are all extremely similar. A talented C# dev can step right in on Java and be up to speed hours to days at the most. The same cannot be said for F#. The seemingly random usage, or lack of usage, of () and {} is also a fairly significant detriment to F#: printfn "Hello World!" is just terrible compared to: Console.WriteLine("Hello, world!"); which is an improvement over c++ and c: std::cout &lt;&lt; "Hello, world!\n"; printf("hello, world\n"); But if you know C#, you know Java, and vice-versa (for the most part): System.out.println("Hello World!"); There's a ton of value to staying with C# rather than F# just because of the significant skill overlap of C# with C, C++, and Java, and if you have those 4 on a resume, you'll never be looking for work.
Do you really need a web api? Can you just use raw sockets and pass serialized objects or structs around instead? Consider learning how sockets work, and use a serializing package like protobuf.net if performance is important, or just the built in Binary Serializer if not. 
I just tried to buy a laptop, you cant buy a laptop like that from just best buy. Youd have to order it online
At work I write C, Ada, and a bit of Python. I like all three languages, but I've tried game dev. with python, and it's always ran very slowly. C++ has always seemed a bit bloated, and g++ support is not great on Windows (maybe Unreal Engine is okay). C# is a first class citizen on Windows, and seems to be similar to Java, but without as much verbosity, and with more up-to-date language features. The library support looks good!
as a server side .net developer, I think you should go to www.asp.net to learn asp.net web api and try some samples.
Yeah I think I do. I plan to create something that has most of the functionality of the MSN Food and Drink App, plus some of my own ideas. I'm probably also going to make a web interface for the application when I'm done with the app. I plan to have it on as many device types as possible.
I understand that I can do that. Microsoft has some great documentation for their own platform features, but I'm aiming for something more specific, like, how would I be able to make a Portable Class Library between the client and the server so I don't have to create client versions of the same models that are on the server, stuff like that.
That's not what portable class libraries are about. You only need a portable class library if you're moving between platforms, not client to server. That's just a bog standard class library.
You'd need a portable library to share between UWP and standard .Net. That's why they're talking about it. 
Please can you provide a link for Instant Database? My several Google attempts were fruitless. 😓
Binary serializer [is disappearing](https://github.com/dotnet/corefx/issues/1347) in .Net Core and though I wouldn't recommend scrambling to replace it in an existing app, I don't see much point in starting with it now. These days, HTTP has emerged as the gold standard for non-performance critical network communication and IMO the world is better for it. It allows you to expose the same backend to web, mobile, and even desktop clients with few platform-specific workarounds. Additionally, the communication is generally human readable if you skip SOAP.
Thank you but could I offer it via online? Hence, It's not yet done but I really need money :(
It's easier to learn this stuff if you have a specific goal in mind. That goes for all programming.
&gt;2016 Stackoverflow highest paid languages worldwide: f# was #1 C# - not on the list That's what the survey says, the survey that pretty much anyone can take and provide pretty much any answer they want. Then there are the actual job offers http://www.indeed.com/jobs?q=C%23+Developer&amp;l= http://www.indeed.com/jobs?q=F%23+Developer&amp;l= 
If you are checking radio buttons, you don't need "== true". So: if (pizzaButton.Checked == true) Can just be: if (pizzaButton.Checked) It's not really a big deal but I remember when I found about this I thought it was pretty cool, looks nicer. :D
Why not call the referenced method directly. Why delegates? Never got the grasp of it.
I'm getting into Xamarin, and I haven't had much experience with delegates myself. Probably a stupid question for most of you, but is this considered a delegate?: myButton.OnClick += (sender, e ) =&gt; { }; As far as I know you can entirely skip the (sender, e) part and just replace it with a key word ''delegate''.
Cygwin is great but _slow_. If I run 'sh configure; make' on a large project it takes forever. A Debian virtual machine running on the same hardware zips through. I'm not sure if this due to POSIX emulation in Cygwin or general Windows i/o speed. Hopefully this Linux 'emulation' they are promising will be faster.
It's a way of extending code. Let's say you have a 3rd party product AwesomeTool, but you don't have the source code. AwesomeTool defines a delegate type and methods within AwesomeTool accept arguments of the delegate type. By passing in a variable (of the *delegate* type) that points to a method in your **own code** - AwesemoTool is able to call your methods without knowing the method or class name before hand. That's where delegates are useful - to extend existing code. This pattern is so useful they even made event types in the .Net framework that use delegates as a way of extending behaviour at runtime. 
Delegates are references to methods. You want to store a *method* in a variable? The type must be a delegate.
I haven't watched any of the build presentations yet, but does DocumentDB support for MongoDB protocol means that I will be able to port a MongoDB storage to DocumentDB with no effort and minimal, if any, changes to code?
&gt; It allows you to expose the same backend to web, mobile, and even desktop clients with few platform-specific workarounds. That is definitely a good point when applicable 
Not sure if you are familiar with C++, but delegate's in my mind are the same as function pointers in C++.
TIL about multicast. *refactors some code*
For web api I recommend having a look at [Nancyfx](http://nancyfx.org)
Finally sorted the problem the folder files was empty and apparently azure does not like this so in my project I created a blank html file in the folder and it seems to have worked!
That's great! That's exactly what I want to do. Maybe I need to read up more on PCL in general. Otherwise, maybe I'm on the right track with the .NET server programming, but I still quite don't understand how to use PCL to share between the server, client, and Unit Tests.
I'm simply amazed today with HTTP and object serialization / deserialization especially how standardized it is. JSON is the better alternative to XML to in several scenarios as it's more terse in expressing key/value pairs and relationships.
You don't have to follow the repository pattern if you don't want to. I think you'll find a 50/50 split and some very opinionated people here on this topic :)
Second link in OP. Did you actually read what I said? &gt; I contacted the created of RedditSharp via. private messages here and he refused to help, telling me to submit an issue via. Github when help is minimal at best.
Well, have you researched how the quicksort algorithm works?
Ah, I didn't click on the link. From the way you phrased the sentence you quoted, it sounded like you came here without filing the issue. 
Damn! I've still been confused about delegates myself, and now they make a lot more sense to me. Thank you. 
[Here](http://snipd.net/quicksort-in-c) in a agood link for quicksort, its good practise to implement so id suggest that you browse their implementation and then try it yourself :)
http://snipd.net/quicksort-in-c
There's not much info yet, but in theory that would be the idea.
Yeah yeah you already said that earlier, but I'm still not entirely convinced that we need this new keyword... If I got it right, let int i = value else 0; is the same thing as : var i = value match (case int v: v case *: 0); or even almost as short : var i = value is int v ? v : 0; (that one can't throw an exception though, so that would be the only advantage for the *let* syntax) Coming from other languages like F# or even Javascript, the keyword *let* means something like *var* and has nothing to do with pattern-matching. "Immutability" has nothing to do with pattern-matching and I don't get why the two should be linked.
The `else` branch actually isn't allowed to provide a default value if the match doesn't do successfully. The `else` has to be a *statement*, but of a specific kind called an *embedded statement*. The spec isn't very clear (to me) about what is *embedded* or not. The problem is the spec does not distinguish (meaningfully) the idea of *matching* versus *destructuring*. Almost any pattern has the capability of destructuring values, yet patterns can also assert not only the shape of the structure, but the content of it. It's a very odd mix of features. Anyway, the `let` keyword does have something in common with F# and Javascript. F# is a bit of a red herring since it's an entirely different language tree, but still: c# let User { Name is var name } = user; f# let { Name = name } = user javascript let { name } = user The only difference is you can do *other* things, like this: // only extract non-null name let User { Name is string name } = user; // only extract on a certain condition let User { Name is var name, IsPublic is true } = user; // throw an exception if we can't match let User { Name is var name } = obj else throw new Exception("Whaaaaat"); I appreciate being able to quickly make read-only values without something long like `readonly var x = 20`, and I also like being able to destructure. Since the spec makes no difference between destructuring and patterns, and it wants to allow forms like you see in F# and javascript, we get a `let` that allows you to pattern match. Is it really necessary? I dunno. I think I would have preferred a smaller subset of patterns which are known to destruct, and splitting out the ability to assert structure/values into the `when` clause (which already exists in the `let` form, anyway).
Oh, so *let* would allow for destructuring by pattern-matching, I didn't realize that! That would work just like F# then, and it's awesome. I totally want this 100% then.
a single page app app, you say? :P Nearly all the tools you've listed are as capable as each other and the decision basically boils down to preference of configuration and API. If you want "hands off" logging, then you'll need to plug something in to the system.diagnostics configuration of your app, be it the &lt;system.diagnostics&gt; section of the app.config/web.config or via the Microsoft.Owin.Hosting.Tracing namespace if self-hosting OWIN.
You can not have a closing brace after defining a label. You need to have at least one more code line. But you're advised to not use labels and goto at all. They lead to messy and hard to understand code.
Removed: Rule 4. Tonnes of resources available online. Try them out, make an attempt. If you still have issues, outline what you have tried and what you still need help with.
Removed: Rule 4. Tonnes of resources available online on how to implement a quicksort. Try them out, make an attempt. If you still have issues, outline what you have tried and what you still need help with.
Use `continue` instead of `goto Label0`
All of this is personal, but I don't think the repository pattern is very useful. To me, it doesn't make sense to slice your application in horizontal layers. The data-access for feature A might look completely different from the data-access for feature B. So, to start, I usually slice my application vertically and do whatever type of data-access makes sense for that vertical slice. When I use dapper, I often go back to a query-dispatch pattern to remove the SQL from the controller. I have written a few posts on this. I can share the links if you're interested.
Just look at it in terms of maintainability of your code and what you're trying to achieve. Everything is a trade-off. e.g. it makes no sense adding a bunch of extra code to maintain, likely restricting how you access the data only to save yourself a few hours to switch an ORM at some future date. If on the other hand you have a huge, complex system with data access throughout it may be worthwhile. My suggestion would be to start without it, and implement later only if it will provide a clear benefit. You can still have a basic level of separation without going the full layered route.
You would still want individual repos for each feature where it makes sense. Repository pattern does not mean god-dao.
When might the release version of VS15 or C# 7 come out? Are there announced release dates?
Repository pattern with dapper is definitely less silly than repository pattern with an ORM.
Visual Studio Community is free, so I don't really see the value of using Xamarin over that. Any enterprise level place using C# is going to be using VS, so you might as well be accustomed to how that IDE operates. edit: any place using C#, not just enterprise, will be using VS.
I have nothing against learning VS as well. That's another thing I liked about "Head First C#" (scanning through it) is that it looks like it will teach some VS as well. With regards to Xamarin, I meant in terms of developing cross-platform mobile apps in C#.
=nigger baby
Oh, good to hear. :)
It's just that repository-pattern usually means plonking them all together in a &lt;application&gt;.Data assembly/namespace. Instead of using repositories, I'd just use a query-disptach pattern, it makes it a lot easier, but it obviously depends on how you implement it.
Lol
Let me *actually* help you out. Use **ELMAH.MVC** for any **unhandled** exceptions. For WebAPI support, install the **Elmah.Contrib.WebApi** NuGet package. With minimal configuration, this will most likely cover all use cases that you have mentioned. Then use any other logger for your application level logging. I use **NLog**. You can abstract this layer with something like Common.Logging or something similar if you wish. It is trivial in my eyes.
The value of using Xamarin Studio/Monodevelop is that it runs on non-Windows systems, if that's important to OP. For actual iOS/Android dev with the Xamarin *platform*, though, Xamarin Studio isn't necessary (on Windows) since VS support already exists and has been around for several years.
I think Linq is a great example of the power of delegates. Look at something like First. Sure, without resorting to delegates, I *could* write this code: MyObject obj = null; foreach(var member in someListOfMyObject) { if (member.SomeProperty == "some value") { obj = member; break; } } if (obj == null) throw new InvalidOperationException("no match"); But this is a fair bit of code and it gets tedious to write over and over. Thanks to Linq, I can just write `var obj = someListOfMyObject.First(o =&gt; o.SomeProperty == "some value")` and achieve exactly the same thing. If I wanted to implement First myself I could write something like this (no error checking, etc., I'm typing this in a comment window) public static T First&lt;T&gt;(this IEnumerable &lt;T&gt; source, Function&lt;T, bool&gt; test) where T : class { T obj = null; foreach(var member in source) { if (test(member)) { obj = member; break; } } if (obj == null) throw new InvalidOperationException("no match"); return obj; }
I would think Data Structures would be the best place to start, followed closely by Algorithms
Well, they *can't* kill it, it's open-source and the community will continue development of it, if need be. It's likely that it'll be available as a separate download or installation option or something.
Yes, it's all free, provided you meet the terms of free usage (open source, students, or [small teams](https://www.visualstudio.com/support/legal/mt171547))
Well, I mean as a main source for Xamarin on Windows anyway. It seems kind of pointless for most since Visual Studio Community is free anyway. 
I'm not sure what the point would be (on Windows). The entire reason Xamarin Studio existed was because there wasn't a free version of VS that supported extensions.
No. They never announce release dates at the alpha stage. And on top of that, the C# 7 spec hasn't even been finalized yet.
You can still download Xamarin Studio (for Windows) if you log into your account.
The demo compiler flag is not the recommended way to enable the features. [Based on this issue I filed](https://github.com/dotnet/roslyn/issues/10219) you're actually meant to add something to your csproj. Also, the last 3 of these you cannot use in the "15" preview. Similarly, if you read the pattern matching spec, a good chunk of it relates to records, which you also cannot use. 
Yea, I guess I like that. It helps me with overall segregation and DI. To be more specific I always say I do the repository pattern but I don't do the CRUD thing- I just expose specific methods that the application needs. What exactly is query-dispatch?
Where I live there is a huge demand of ASP.Net programmers. My old gig was at such place.
How much C# do you know?
I'm going through a class right now so I'm definitely no pro. However, I have been having no problems with the material so far. This just seems to be a bit too advanced for me at the moment. 
Thanks. Any idea roughly how long this process typically takes? Should we expect a few months or over a year?
The alternative, as exemplified in pre-lambda/delegate Java, is that you use interfaces. Instead of passing in a "compare" delegate, you would have to pass in an object that implements IComparer. Not so bad, right? Except when you have only a single place in your code where you want to sort something in a very specific way (alphabetical, but always making sure "Boss McWhinyBossman" is put first). Now, you have to declare a class and implement the IComparer interface just for a single sort! (I believe Java has since fixed this)
Don't use hacker rank to learn C#. The generic domains are geared more towards practicing for competitions and interviews. Most don't even support C# as a language choice (mainly java)
To answer the question in the subject of your post: it looks great, at least where I'm at, geographically (Nashville). Healthcare is huge here, and thus so are Microsoft products in general. There is a negative unemployment rate for C# devs with some .NET and SQL Server chops. Now that Xamarin is free, it's going to catch on like gas on fire in this town. Elsewhere, couldn't much say.
Don't build a repository to dapper. Do build a repository that you can mock data access trivially without needing to mock dapper and actual sql connections.
Warning - after learning Visual Studio, all other editors will feel crude. It really is the best development environment out there. Intelli-J is the only one that comes close. 
look into the project called CsvHelper for doing the file parsing 
Patterns are just a way of thinking about code, intended so we can talk to each other about what we're doing. You should never be a slave to patterns. You should write your code as you think is best - the pattern is just how you describe what you have done. 
Hahah wow, youre very prompt! Ill take a look at it at work tomorrow/today.
RemindMe! 15 hours
&gt; Is there ever a reason to use a delegate directly instead of Action or Func? What are the pros and cons of both methods? `Action` and `Func` doesn't have `ref` or `out` parameters. For that you have to declare a new delegate. Also if you need to annotate the delegate in any way (when marshaling to native code for example) you need to declare a new delegate.
I'm using exactly this in my project I have a business project that holds all of my handlers and i inject all of the repositories/dbcontext into the handlers. It makes my mcv project just a thin wrapper to describe my application surface. Mvc is used tor the authorization and authentication, modelbinding and mediator dispatching only. The logic for how the application lives else where and i can just test the functionality by mocking objects and not contexts.
gotos and labels? Yuk! That code is awfully written. Why not just: private void CheckingCloseWindows() { CloseWindow(); foreach ( Window window in Application.Current.Windows ) { if ( window.Title == "Start Window" || window.Title == "Main Window" ) { window.Focus(); } else if ( window != null ) { window.Close(); } } } Isn't that much more clear? Also, the method name is horrible! It should describe what the method does. `CloseAllWindowsButStartAndMain()` would be better, if a little verbose. 
&gt; The main reason would be that you can give it a better and more descriptive name. And even more usefully name the parameters.
The only difference you have is that you've renamed IRepository to IQueryHandler. That is a repository.
&gt; Most don't even support C# as a language choice In Algorithmic domain all tasks support C#. And most universal tasks in this site support C#.
`Action` and `Func` are literally just one-liners like `public delegate void Action&lt;in T1,in T2&gt;(T1 arg1, T2 arg2);`, there's no difference between them and other delegates. The main reason why you find specialized delegates used in the framework and other places instead of `Action`/`Func` is that they existed before generics were added to the language, so you had to define an individual delegate for each method signature instead of reusing a single generic delegate. There are still occasional reasons to use other delegates as others have mentioned, but it's pretty rare unless you use them as a stylistic choice.
Paste a copy of your JSON data so we can see what that structure is. Also think about changing your GetResponseObject to a generic.
I don't really see a market for it unfortunately, but tbh I don't like watching videos. Link to your Github repo and I can reevaluate ;) Look for an internship or co-op. I did the co-op program at my school and ended up contracting with my boss a lot which took care of all my financial needs.
[here you go](https://pl.wikipedia.org/w/api.php?action=query&amp;titles=Application_Programming_Interface&amp;prop=revisions&amp;rvprop=content&amp;format=json) 
Nah, GNU HURD is still the joke and Richard Stallman is still the jester
yeah i tried An unhandled exception of type 'Newtonsoft.Json.JsonSerializationException' occurred in Newtonsoft.Json.dll Additional information: Error converting value 14 to type 'WikipediaApi.ArticleInfo'. Path 'query.pages.14.pageid', line 1, position 156. EDIT: I removed [JsonProperty(PropertyName = "14")] and it's now only NullReferenceException on ArticleInfo
No, there's a difference. With a repository, you'd need IFooRepository, IBarRepository aka a repository-interface per entity/grouping. With IQueryHandler and IQuery, you just need two interfaces and can then create all query-classes as separate classes. This is a true abstraction, unlike the IFooRepository and a linked FooRepository-classes which are fake abstractions that only serve for mocking. The IQueryHandler interface truly decouples the query-code from the rest of the application. In the posts I mentioned I go a bit deeper into this.
I wonder if you could create a pages model public class Page { public string value { get; set; } public ArticleInfo ArtInfo { get; set} } ?
I felt like I was missing out with libraries on Android; Square had developed some really nice libraries to help with state management/dependency injection.
Because the whole point of the pattern is to provide abstraction over your data access strategy. Once you expose IQueryable you are in practice leaking your data access. You cannot switch to stored procedures and raw SQL, you cannot switch to a rest service that provides the data, you can only switch to another ORM with the same level of LINQ support. Now in theory you could translate the IQueryable yourself to whatever the new data source is but this is pretty much equivalent to writing an ORM and is not trivial at all.
Whoa wait you have to pay extra to use Eclipse? Their IDE must really suck ass
&gt; Once you expose IQueryable you are in practice leaking your data access. I'm not sure that's the case at all. You're not exposing connections, or anything of that ilk - you're *just* exposing that interface, which is (in usage) the same as IEnumerable&lt;T&gt; but with Expressions instead of lambdas. I don't see the problem. I don't expose anything you mention in either of these scenarios: return new [] { new Arbitrary() }.AsQueryable(); //nhib session return session.Query&lt;Arbitrary&gt;();
An IRepository&lt;T&gt; would be an even worse idea. A generic repository could only have methods such as Update(T item), Create(T item) and LoadAll&lt;List&lt;T&gt;&gt;() To make it work with the example above (LoadProductsByCustomerId), you'd need either an interface per repository or expose some sort of predicate if you use EF, which leaks the underlying abstraction. Generic repositories are a bad idea either way.
So when I use the repository as var result = repository.GetAll().OrderBy(product =&gt; product.Price).Skip(pageSize*pageIndex).Take(pageSize); How do you replace your data access with say a rest service? You pull all the products in a list and page on the client?
Thanks, good to know. It does seem like a reasonable option, I think I'll look into it.
The place I still use delegates most often is taking advantage of [multicasting](https://msdn.microsoft.com/en-us/library/ms173175.aspx). 
I can do what I did with any IQueryable and what is more if you want to expose IEnumerable why expose IQueryable?
You're now making things up as you go along. I'm not "wanting" to expose IEnumerable - *you are*.
Oh I didn't read that correctly. I want IEnumerable and I am right and you are wrong. Your API not only allows me to shoot myself in the foot it provokes me to do so.
It does not "provoke" you to do anything. You've now descended into the realm of being a dickhead thus the discussion is over. Good day.
Well, this is becoming a whole yes/no discussion, but anyway here goes: QueryHandlers are not repositories. Look at the difference between these interfaces and the usage pattern: interface IRepository&lt;T&gt; { void Insert(T item); void Update(T item); List&lt;T&gt; LoadAll(); } class SomeClass { void SomeMethod() { var products = productRepository.LoadAll(); // (or LoadProductsByCustomerId if you have IProductRepository) var customers = customerRepository.LoadAll(); } } In the above example you need two repositories: one for products, one for customers so you have two dependencies, regardless of whether you're using a generic repository or specific repositories. interface IQueryHandler&lt;TQuery, TResult&gt; where TQuery : IQuery&lt;TResult&gt; { TResult Handle(TQuery query); } class SomeClass { void SomeMethod() { var products = queryDispatcher.Get(new ProductsByCustomerId(5)); var customers = queryDispatcher.Get(new AllCustomers()); } } here you only have one dependency, the queryDispatcher which can resolve queries to their handlers. There's no leakage to the underlying datastore, nor any coupling to nor do you have any god object. The IQueryHandler is a much more focused interface with a single member and allows for much greater flexibility than the IRepository-interface. Either you have an IRepository&lt;T&gt; (aka a generic repository) in which case it either becomes a god-object or it's a leaky abstraction. Or you have IFooRepsoitory, IBarRepository, etc in which case there's no abstraction anymore as these interfaces are not true interfaces. If you're talking about simply renaming IQueryHandler&lt;TQuery, TResult&gt; to IRepository&lt;TQuery, TResult&gt; then we're saying the same thing. I just wouldn't name it a repository anymore. An example of this pattern can be seen in my posts as well as in the mediatr package: https://github.com/jbogard/MediatR
Can you shoot over a longer json string of data you're trying to work with? My guess is you need to parse them into a list of class objects. I can't be for sure if I can't see some solid api data, to see where/what needs to be repeated. 
Hate their naming, fine, but be glad they have many vectors to properly deliver features at varying levels unlike some languages like Java who mish-mash it where ever they can. I'm glad MS properly separates the CLR, frameworks and language/compile features.
I will look into those, thank you!
Did you try it?
Flat out, if you try to compile that it will not compile, hence psuedocode. Sure it could very well be copy/pasted from elsewhere, but I wouldn't even call it a snippet, because we don't see variable declarations. If you are dealing with a Nullable&lt;bool&gt; (bool?) then no, testing for false will not catch the null. In fact, since it is a nullable type, you need to explicitly test for the value. Meaning, if you attempt to do: bool? test; if (test) { // Do stuff } You will receive a compile error stating: &gt; Cannot implicitly convert type 'bool?' to 'bool'. An explicit conversion exists (are you missing a cast?) The proper way to test a Nullable&lt;bool&gt; is to either convert/cast it to a bool and do it like above (I highly recommend you don't because there is likely a good reason the developer used a bool? rather than a bool), or be explicit about what you are testing for: bool? test; if (test == true) { // Do stuff } Your examples about how to use a Nullable&lt;bool&gt; wouldn't compile either. I would recommend reading up on [Nullable Types](https://msdn.microsoft.com/en-us/library/1t3y8s4s.aspx) to familiarize yourself with them. 
uh... My first reply to you: &gt; The only difference you have is that you've renamed IRepository to IQueryHandler. That is a repository. :)
First off, this is an edit. I originally responded to your points, but I've realized I'm not going to get into this. Dude, grow up. You need to accept that you made a mistake, and not try to turn it around so you can tell yourself you were right. It's not pseudo code. It wasn't a bool? but a bool. You overthought the problem, and you just can't admit it. You even tried to tell me I need to go read a book and pretended I gave coding examples when I didn't. Don't be a know-it-all. Don't be *that guy* who argues with someone about purple being composed of red and other colors when someone mentions that it looked good in purple. I'm sure you're a very smart guy, but don't be a jerk about it.
To decouple data dependencies for test libraries. (Interfacing allows for dependency mocks)
The short of it is: 1) It's an extra layer of objects and serialization to maintain. This is a non-trivial cost - don't underestimate it. :) 2) Because it's in a separate process/service, it's impossible/impractical to transactionally compose individual operations. You end up having to write 1:1 functions for each operation your controllers support. 3) It didn't actually enable us to scale and the minimal security provided wasn't as important as the productivity loss. All that said, our code still has layers designed to separate concerns. We have a middle-tier set of classes that expose platform-layer functionality. And there's a layer between that and the controllers that maps platform/DAL objects into view models. I would recommend having these layers regardless of the presence of a MT, but then you can see that means the extra layer of service/client/serialization I mentioned.
One workaround is to create a [junction point](https://en.wikipedia.org/wiki/NTFS_junction_point) so that the full path is masked to a new drive letter. So instead of some path like `C:\somereally\long\path........\that\is\crazy\long` it can be accessed like `D:\crazy\long` instead even though it technically resides in the same place on the hard drive.
This is reverse thinking. While testing is probably the most popular use of decoupling it has value on its own. If your code is decoupled it means that changes affect less places and thus reduce the likelihood of bugs. It also means that you can switch layers. Say you move from MVC to a single page web app built on Web API. If you decoupled your code you would only change the controllers but not your business logic. In fact some proponents of TDD claim that the greatest value comes from the fact that you get better OO design because writing tests forces you to decouple.
As long as there are still legacy systems that need to be maintained/extended/ported, the more they stay the same.
Having just done a project using Java lambdas to produce a POC... C# and LINQ all the way. It felt like I was taking 3 steps backwards and eclipse feels soooo sluggish/weird compared to VS. 
I decompiled the api and it looks like each public method checks if its authenticated and re-authenticates if needed. I assume that is what prevents it from being thread-safe. I tried coding it where I created a new instance whenever I needed and consitently run into issues at night when they do maintenance where the api won't let me authenticate for an hour. Persisting the api object resolved the issue. So I googled c# object pooling on your suggestion and found this post http://stackoverflow.com/questions/2510975/c-sharp-object-pooling-pattern-implementation which boils down to this code http://pastebin.com/he1fYC29 might be a little overkill. That looks like it would work
i'd say csharp-script will have a more lasting improvement in my career. Being able write quick scripts in csharp instead of python is a huge win in my book.
I've been searching all morning. I have found plenty of resources regarding using envvars in *appenders*, but none of those methods work with *listeners*. Which is why I'm here asking for help from the community.
I need the entire path, so I don't think that that would work. 
That's pretty much what I did the last time I ran into a problem like yours. Heck, even ADO.NET uses pools in the background.
I think you have it backwards, but not for the reason that /u/Eirenarch stated. Mocking is stupid, don't do it. You should write R.E.A.L. tests that actually do hit the database, external services, etc. That said, writing unit tests that hit the controllers is a royal pain in the ass. And if your controller method is well written, there is nothing of interest to test in the first place. What having a separate service layer actually does is give you a place to write you R.E.A.L. tests without having to mock HttpContext and other web-related crap. 
So, could you define an event based on an action? Something like this maybe? public event Action onComplete; So could have subscribers with +=
In this particular case, inherit your listener from the `TextWriterTraceListener` and when it's initializing, reinterpret the initializeData (it will probably come in some way to constructor or some other function). Then instead of System.Diagnostics.TWTL use qualified name of your listener in that config.
What if the data is changing all the time? Couldn't you just say if anything is well written, there is nothing of interest to test in the first place? Also, why do you keep turning the word 'real' into an acronym? Is this some new technology I am not familiar with? 
Yea I found a bunch of nuget packages that seem to have what I need. Just plug in the initialization method and tell it the max number of objects.
I didn't realize this was an argument. Maybe there is some context lost due to this conversation being in text form. My initial comment started off by mentioning that it "could" be a Nullable&lt;bool&gt; &gt; Unless it is actually "bool?" (nullable) Then it could be null. As in, this is a pitfall to watch out for, especially considering we would have to assume the type since it wasn't given. Your comment back to me was factually incorrect. You said it would still be false: &gt; Then it would still be false. Besides, it wasn't nullable. Then followed it up by saying it wasn't nullable, which I've already mentioned is an assumption that we do not know. I tried to point this out in my next comment (again, not arguing, simply trying to make sure all the facts were on the table). You then listed an example, albeit in word form, not code or psuedocode: &gt; ... As for true/false/null, I believe if you do a (test) with test being a null bool variable, it will come back as false. To be fair, you did say you hadn't tested it yet. Then in the same post you elaborate on how you think conditionals work in regards to true/false/null, unfortunately this was inaccurate as well. &gt; ... But a conditional test still can only handle a true/false situation, and null should fall into the false category. After multiple comments with inaccurate information I attempted to share how Nullable&lt;bool&gt; actually works in regards to true/false/null and evaluation of conditionals. Your response was to somehow turn this into an emotional conflict telling me I need to 'grow up', 'admit I made a mistake', and to not 'be that guy'. I apologize if you view common discourse as 'being a jerk'. I didn't mean to ruffle any feathers, but to simply share accurate information. Also, I'm not sure where I told you to 'go read a book'? Maybe you mixed up some other conversation? I posted the MSDN link to Nullable Types. I figured it would be good information considering there were multiple inaccurate statements about them posted. So, since you felt the need to flip this whole conversation around to some kind of argument, and target my character, rather than the facts presented; I'd like to offer you some advice: Before you go around assuming you know what you are talking about, maybe try to do a bit of research into the matter first. It will make you look like less of a fool. If someone is giving you constructive feedback, you will be a much better developer and a person if you take that information and use it to better yourself and increase your skills/knowledge.
&gt; I didn't realize this was an argument. Maybe there is some context lost due to this conversation being in text form. My initial comment started off by mentioning that it "could" be a Nullable&lt;bool&gt; It wasn't. I apologize for getting somewhat angry over it, but you hit my buttons when you implied I didn't know what I was talking about when you told me to go read about Nullable variables. Additional, it was quite seriously a bool, and all your arguments about it *could* be a bool? were just overthinking the problem. He asked a specific question. I made a point to him, and then you started to argue about a fact that wasn't at all relevant. This sort of thing begins to get frustrating for people. &gt;Before you go around assuming you know what you are talking about, maybe try to do a bit of research into the matter first. Again, it wasn't ABOUT nullable variables. I said this already but you keep insisting it *could* be. It *isn't*. And your statement above is really somewhat offensive. If you go read my posts again, you'll see that I said "As for true/false/null, I believe...", I didn't say "Absolutely the fuck it will come back as false!". &gt; It will make you look like less of a fool. &gt;Also, I'm not sure where I told you to 'go read a book'? Not specifically book, but you gave me a link to nullable variables. Most definitely you. Are you going to start arguing now that I was completely wrong because I called it a book? Frankly, I didn't click the link and I don't give a shit. &gt; if you take that information and use it to better yourself Perhaps you could do the same with this conversation and increase your social skills. &gt;I apologize if you view common discourse Love those backhanded apologies. Frankly, they only reinforce my opinion. No, I don't view "common discourse" as being a jerk. I view someone telling me, unasked for, that I don't know what I am talking about as being a jerk. You're still looking like someone who argues about irrelevant facts. And if you're going to start calling me names, I'm going to remove you from my xmas list. &gt;After multiple comments with inaccurate information I attempted to share how Nullable&lt;bool&gt; actually works in regards to true/false/null and evaluation of conditionals. Again, unasked for as well as not relevant to the question, since the code was quite obviously about "bool" and not "bool?". Seriously, I said I didn't want to get into this and you dragged me into arguing about purple anyway.
Lol, yeah, I understood something different. I see repositories as a different pattern, but in the end it seems like we disagree about a naming convention, not about the pattern :-)
&gt; Weird, never heard of that, did you make it up? Googling shows nothing. I didn't invent the techniques I'm talking about, but I'm trying out different names for them to use in an article I'm writing. I don't want to use the term "integration testing" because that's something totally different. The techniques you use for actual integration tests assume that there's a black box on the other side of the wire that you can't reset if you break it.
&gt; How about unit testing an algorithm in a service layer that returns a price for something dependent on the cost of that item stored in a database? You create the item and the associated linkage records needed at the start of the test. Or you run it in a transaction with a high isolation level so that no one can change the values out from under you. Or you keep multiple copies of the database, one for your build server and one for each developer. That way you don't have to worry about multiple tests running at the same time. There are lots of ways to solve this problem without introducing the need for database pre-conditions. *** I know people have been telling you that it's too scary and difficult, but it really isn't. In many ways it is actually easier to write reliable data-driven tests than to mock complicated data structures in a way that truly exercise the code. And at the end of the day, you don't have a choice. No matter how many mocks you have, you still need to write this kind of test if you want to be sure that your application and database are actually working together.
&gt; You create the item and the associated linkage records needed at the start of the test. That's a mock.
Alright, I just perused your old comments and this is actually pretty common for you. You go around arguing with people, insinuating things, and conveniently reading into things when there was nothing to be read into. Thanks for the conversation. I understand that anything I say to you won't get through. Fortunately it doesn't really bother me, and I've said enough that passer's by will at least be able to find the facts presented and take from them what they can. Have a great day.
Thank you for clearing that up. As far as not being production ready, are we talking about stability issues or lack of features? 
What kind of site are you creating? Is it for work or personal use? How experienced are you with MVC and Web Development? Because it seems that it's stable enough and Microsoft does say that Core RC1 is production ready but I've found that the documentation is severely lacking. So unless you are familiar enough with MVC 5 and below or willing to do a lot of googling for things then I recommend you stay away from it. Now that being said I'm using ASP.Net Core RC1 for an intranet app here at work and I really enjoy it, it's very similar to other MVC frameworks out there, like a cross between Rails, Koa, and Express.js. That being said I'm finding it a bit annoying to do basic things for instance the documentation for Filters just isn't there on the website and I had to dig into github and look at some pull requests to get the documentation. https://docs.asp.net/en/latest/mvc/controllers/filters.html That being said if you write your code well enough it shouldn't be too much of an issue making the transition to Asp.Net Core.
System.Web needs to be purged from history. Did you know that it has a dependency on fucking WinForms?
There are a lot of problems with the tooling. Specially if you're on Linux based hosts, Nuget XPLAT and dotnet restore still have some issues, and coreFX as well, I would not run them in prod. As far as ASP.NET goes, it works using coreclr runtimes, but again, not all of the classic .NET api's have been ported yet and you might find that some things are missing... It's good enough if you want to run some POC's and test some stuff, I would not put it into production yet though. 
Every time? How do I know which records are still good, and which ones have been modified? No way. Just mock it. I am not saying you're absolutely wrong, mocking isn't always the answer, but saying not to mock ever is absolutely ridiculous. 
It is a side-project. I made a few apps with MVC 5 before, but I haven't been following the scene for the last 3-4 months. Lack of features doesn't really bother me (for this project) as it's a very basic website (basically some async processing (of web requests) using TPL and database manipulation with EF). I could make it in ASP.NET 4 but I see this as a good opportunity to learn ASP.NET Core 1.0 (if I could rely on it for this website).
Then I say go for it, I've found it pretty stable an all the features seem to be there just not all the documentation. Also some things are going to be different in rc2 mainly around the command line and some small things like logging levels. 
The commit message explains it pretty well: https://github.com/XeroAPI/Xero-Net/commit/e5c709df9d661cb3339e27aa10f849855b7fbfea I have no idea why a person would wrap that in a getter as opposed to writing a function or just using a variable in the test method, but otherwise, it seems like a perfectly legitimate test to me.
By that logic, what's the point of any unit test? Methods should be small and predictable, but that doesn't mean we should ignore automated testing.
If you unit test bug fixes as they are implemented they'll never reoccur. If I had some currency for every time I've had to fix the same bug when someone doesn't write a test for it... I'd have a lot of currency.
Huh, TIL. Never saw someone multicast a `Func` or `Action` before. 
unit tests are supposed to verify that a unit of code does what you want it to do. someone wrote code to explicitly exclude DataContractBase objects that had null ValidationErrors properties in the construction of a ValidationException. why wouldn't you create a test for that? the test verifies that the code is doing what it's supposed to do and it can help prevent future code changes from unintentionally altering that behavior. saying it's pointless is basically saying that unit tests as a whole are pointless. i certainly hope you don't believe that. the value of these types of tests are the reason why test-driven development has become a thing. these simple tests often do a much better job at conveying the intent of code than the code does itself. understanding the intent of the code is the only real way to alter that code safely.
Yes, it's actually quite nice. The problem with the existing frameworks, libraries, etc. isn't that they are versioned. Of course they're versioned. The confusion sets in when there is no synchronicity. And renaming things like ASP.NET vNext == ASP.NET 5 == ASP.NET Core 1.0 only adds to the confusion. If you live and breathe the .NET stack, then it's easier to keep up. But now that they are trying to target other platforms and expand the pool of .NET developers, at least now (with Core) they're moving toward a unified versioning scheme.
Depends on what it is for. Business? ASP.NET 4.6. Personal pet project? Core.
Hello, I'm new. I did what I was asked to do except I don't know what my professor means by asking "call the method enough times to fully test it"
Watch the last "standup video" where the top architects of ASP.NET Core spend 15 minutes trying to get a hello world console app to run and ultimately give up... this thing is going to be a colossal fuck up. They are probably 1-2 years away and even then I'm not sure they didn't completely waste their time instead of just improving the current stack.
If you want to get weird, try F# and SuaveIO. I've found it very pleasant for my side project (day job is .net MVC). Can use any .NET libraries you are used to still. 
&gt; Or you have IFooRepsoitory, IBarRepository, etc in which case there's no abstraction anymore as these interfaces are not true interfaces. What do you mean by not true interfaces? If you inject those, which you would, into the consuming class it's perfect for unit testing and great SOLID design.
I stand corrected, but I still think its wrong to learn a new language via quicksort implementations etc.
Yeah, but that was just a random CI build...
As ASKMEABOUTSYNDIENT suggests, try it with all variations of inputs. Try it with null values, negative values, 0 values, as well as the regular positive values. Think about what you can do to make it fail, and then fix it so it won't.
he wants me to try different provinces to reach the other nodes. In other questions, he also asked me to call the method multiple times but with different inputs. For this question, he isnt telling me how many times or the inputs. question: 4. Write a method that takes two arguments: a cost price and a two letter province code. It will calculate and display the selling price. (If province is Ontario a tax of 13% is added to the price, if the province is Quebec a tax of 17% is added to the cost price. There is no tax for the rest of the provinces and territories). In your main, call this method enough times to fully test it
In RC2 they completely upended the thing. Its crazy sauce. Usually by RC2 something is pretty close to final
You're making the same mistake I made the first time I used fields. Look at your Price field. When you call it you return Price (aka itself) Price calls Price which calls Price........ etc to infinity I would suggest using the get; keyword. In place of "return Price;" just put "get;" Make sure your other fields aren't glitched too. If you ever need help, feel free to PM me ;) Happy coding
I think the lack of specified inputs is the point of the exercise. He wants you think think about exactly what inputs you need to use in order to test the logic. You need to think about what kind of inputs would create different behaviours.
I've done a production webapi with asp.net core. A few quirky things compared to 4.5 but it's stable so far.
I wonder what it will do with var x = new { Name = n, Age = a }; and similar.
Well, it's a matter of opinion as well, I guess. I use var always myself.
It will end up in Visual Studio &lt;the year it's released&gt;, or, if done earlier, in an update to 2015 maybe.
Nah, Anonymous type, similar, but not a dynamic 
You.... **completely** missed the point. /u/cryo was asking what this analyzer would replace `var` with. You can't replace it with the actual type, because it's an anonymous type and has no name. But you **can** replace it with either `dynamic` or `object`. 
I spent today migrating a project to EF7. I lost count of how many times I gaped in disbelief when I found out a feature I was trying to reimplement was completely missing from something flagged as "production ready*".
Well, I hit the lazy loading problem quickly enough. What annoyed me was the lack of complex types. I had to write a get/set for every property of a class that I needed to store in a flat table. Over 100 lines of boilerplate code for what was a one-liner in EF6. It's also trying to duplicate a column for on a table with a discriminator for an inherited type. At this point I think it may be a bug rather than the lack of a feature. Also, the new Sqlite class is missing most of the connection parameters (choosing a journal mode, for example). I'm hoping it will at least play better with Mono than the official Sqlite package. That said, putting multi-column unique index on a table was delightfully easier than it was in EF6.
Flip a coin, they are both very personable and knowledgable teachers.
ha, nice. 
 return Price; theresyourproblem.jpg Backing variables should start with an underscore for this reason. Name it "_Price". also, you could replace the property with this, and not use a variable at all (assuming you don't need to do any extra work apart from gettng/setting the variable) public int Price { get; set; } 
This would be better placed in r/learncsharp
&gt; context.XItems.Single(x =&gt; x.Id == id) Genuinely curious. I don't understand what's wrong with this? Should it be context.XItems.Find(id)
The next version should come with a feature that squiggles any uncommented line of code, to encourage developers to write useless comments: // create the zip file this.CreateZipFile(source, sourceFolders[source]); // iterate over source folders foreach (string source in sourceFolders.Keys) { // create the zip file this.CreateZipFile(source, sourceFolders[source]); }
Not wrong. Maybe. Can't know because of course it's not commented why it's specifically Single instead of First. Single requires there to be one and only one so it can be a hidden performance hit because it has to go through all of the data to make sure there are no duplicates. edit: What I mean is that in those cases where we had repo pattern used, it's almost definitely wrong because getting the item by id is the hotpath for repo.
I've never watched Bob's lessons, I'll check them out. It's from neither of the guys mentioned above, but I saw a video from Jon Skeet yesterday (might have been in this sub, or /r/programming? Can't recall) that goes through [an example using delegates](https://www.youtube.com/watch?v=JSjL7vShiFM).
Search specifically for c# for absolute beginners. It's a series from Bob Tabor of learnvisualstudio.net. He has other videos on his site as well if that interests you. These will get you a general overview and introduction into 'what is programming and c#'. Most videos are a little light in some of the more complex topics, they aren't really beginner friendly. At this point I recommend google video search specific topics as well as reading up on a few things. The topics I toss in this list are; delegates, predicates, list, dictionary, async, await. Next I'd move on to fundamental examples. A good place to start would be some of the really old easy daily programmer problems from the subreddit. Lots of people have submitted solutions of their work afterwards. Attempt the problems first, struggle, fail, try again, then look at the solutions. After that you might be able to find some more advanced videos or have gotten better at reading users code snippets. That's a great way to learn if you can. Sadly, the later intermediate-&gt;advanced topics have very little instructional videos from what I've found to be free, Id love to see those. I really feel that's holding the community back to some degree 
Why not both? 
Instead of exporting to csv or xml, you can just [read](https://www.syncfusion.com/products/file-formats/xlsio) the Excel file directly.
.Net has interop objects to open excel files and convert them to DataTables/DataSets. This is your best bet. Be sure you dispose of them properly (maybe use try/catch/finally blocks) because unmanaged interop objects can lead to memory leaks.
I'm really glad I used Bob Tabor's [learnvisualstudio.net](http://www.learnvisualstudio.net/) back when I was just getting started with C#. I know it's paid, but it was a good, in-depth jump start. I've used Pluralsight for everything after that - like for ASP.NET, I'd definitely use Scott Allen's courses.
What version of asp.net would you recommend me to learn please? 4.6,5 or Core 1.0? I just read somewhere that ASP. NET 4.6 is still fully supported so I'm not sure of what to learn from Scott Allen. 
This is why my team writes unit tests for constructors, IEquatable&lt;&gt; objects, etc. It seems pointless but it saves lots of time debugging when someone forget to initilalize a property in the constructor...
The problem is that your HitTest call finds the rectangle (or textblock or stackpanel) being clicked, but that is not a part of your canvas child collection, so the remove method does nothing. You need to find the thumb that holds the element being clicked, by use of the GetParent method (I usually make a pretty generic FindParent&lt;T&gt; method, but that is up to you). Hint: you mostly have 2 levels of elements: Thumb &gt; StackPanel &gt; Rectangle. var parent = VisualTreeHelper.GetParent(child); If you need more info, let me know!
I hear there is a 1.5 million dollar app the TSA owns that can help with that.
I think it would be better to settle on a set of coding standards. 
Do not learn core 1.0. It is not released yet, it's tooling is unstable and it is NOT the type of work 90% of dotNet devs do. It's designed for a specific purpose (running on linux) and it is only contains a subset of the functionality dotNet encompasses. Just a heads up!
Two options, create a global variable or overload the constructor of your windows forms to accept parameters.
interesting. also id obviously rather not pay for it, but if it came down to it i would for sure. I have a personal subscription already but i think id need an enterprise license
You might be getting back some system tables. [Are they named like this?](http://www.techonthenet.com/oracle/sys_tables/)
Can't be that bad, it's based on IntelliJ. Some people really love Eclipse and claim it's the best IDE around. I usually stay away from those people
That isn't entirely true. It is designed from the ground up to be how MVC should be done in C#, not particularly for linux. ASP.NET MVC 5 (.NET 4.6.x) is MVC built on top of System.Web internals (all the web forms page lifecycle stuff is still there in MVC 5 even if you never deal with it). It is loaded with all kinds of baggage that is necessary to support backwards compatibility with the rest of ASP.NET. Core 1.0 gets rid of all of that. I have little doubt that in a few years almost all new C# web development will be done in Core. There will probably be tool assisted migrations from MVC 5 as well. That said, today Core 1.0 is not really ready for most of us to jump to it. For today, choosing to restrict yourself to a well designed MVC 5 application (that is: avoid diving into the internals of it too deeply) is the best course for webdev in C#.
9 years?! Jesus.
Ah, thanks for clearing that little bit up for me. I had known they threw out a bunch of backwards compatibility stuff but I was not aware that it was webpage life cycle stuff.
yeah i think he just wanted me to add another province and set the tax to 0.
5 year old news. http://stackoverflow.com/questions/4729479/is-correlationmanager-logicaloperationstack-compatible-with-parallel-for-tasks
wow, well I sure as hell feel stupid now. haha. Thanks for the help :) 
Muchas gracias
&gt; well I sure as hell feel stupid now Happens a lot with programming. FWIW, it looks like you modified the code somewhat between your screenshot and the pastebin. With elses, you only need to check the state of the next of your bins, instead of checking the next bin, and all the bins before it: for (var i = 0; i &lt; 9; i++) { if (_numbersToFit[i] &lt; _bin1Space) { _bin1Space = _bin1Space - _numbersToFit[i]; Bin1List.Add(_numbersToFit[i]); } else if (_numbersToFit[i] &lt; _bin2Space) { _bin2Space = _bin2Space - _numbersToFit[i]; Bin2List.Add(_numbersToFit[i]); } else if (_numbersToFit[i] &lt; _bin3Space) { _bin3Space = _bin3Space - _numbersToFit[i]; Bin3List.Add(_numbersToFit[i]); } else if (_numbersToFit[i] &lt; _bin4Space) { _bin4Space = _bin4Space - _numbersToFit[i]; Bin4List.Add(_numbersToFit[i]); } else if (_numbersToFit[i] &lt; _bin5Space) { _bin5Space = _bin5Space - _numbersToFit[i]; Bin5List.Add(_numbersToFit[i]); } } You can also use continue at the end of each if to skip to the next iteration of the loop early, which would let you get by without elses. If you use the Length property of your array of input numbers, you don't have to track it in a separate variable. Or you can use a foreach loop instead of a for, and then you don't need to care about the size of the array, at all. If you combine the bin lists and capacities into a struct or class you can keep the bins in a list, too, which can simplify all of that stuff further: public class FirstFitBin { public sealed class Bin { private readonly List&lt;float&gt; _items = new List&lt;float&gt;(); // a read-only collection to keep other objects from adding and removing things directly public IReadOnlyCollection&lt;float&gt; Items { get { return _items; } } public float Capacity { get; private set; } public Bin(float capacity) { Capacity = capacity; } public void Add(float n) { Capacity -= n; _items.Add(n); } } private readonly float[] _numbersToFit = { 2.4f, 1.8f, .8f, 3.5f, 1.6f, 1.2f, 3.1f, 2.5f, .7f }; public List&lt;Bin&gt; Bins = new List&lt;Bin&gt; { new Bin(4), new Bin(4), new Bin(4), new Bin(4), new Bin(4), }; public void Start() { foreach (var n in _numbersToFit) { foreach (var bin in Bins) { if (n &gt;= bin.Capacity) { continue; } bin.Add(n); } } } } And you can use LINQ to streamline that a bit more, but then you have to bring in lambdas and closures, and it's debatable how readable the result is.
You're probably running into floating point precision issues between `Log10()` and `Math.Floor()`. I'm guessing `BigInteger.Log10()` is implemented differently to handle arbitrary precision, and produces a floating point value like `3.99999999999998` instead of a round `4`. 
Yeah page life cycle is basically gone. If you had HttpHandlers, they need to be largely rewritten. It looks like there were some legacy reasons why Web API controllers couldn't share an inheritance tree with regular controllers (in MVC 5 and below), so they fixed that in 6 as well as many other little annoyances you don't realize are there in 5 but when you think about it, the way it is done in 6 is simply better ... stuff like how mvc 6 really is async all the way from end to end where 5 is "sorta" until you have to work in some random spot (like [Action Filters](https://msdn.microsoft.com/en-us/library/system.web.mvc.actionfilterattribute(v=vs.118\).aspx) vs [MVC 6 style](https://github.com/aspnet/Mvc/blob/229724c4eab3bf4fc8390deca9af7e451e5caee7/src/Microsoft.AspNet.Mvc.Core/Filters/ActionFilterAttribute.cs)) For handler changes there is this migration document: https://docs.asp.net/en/latest/migration/http-modules.html I think you can infer a surprising amount of the architectural changes from that article. Those are the kinds of things that one would need to change to convert an application. 
Well... no. This was an unrelated bug (fixed long ago, as you can see [here](https://connect.microsoft.com/VisualStudio/feedback/details/609929/logicalcallcontext-clone-bug-when-correlationmanager-slot-is-present)) which is quite obvious as 5 years ago async-await didn't exist. But... I did post about it on SO about a year ago: [Is LogicalOperationStack incompatible with async in .Net 4.5](http://stackoverflow.com/a/30130663/885318)
I would say that it's perfectly reasonable, and almost standard, to abstract the settings or configuration (and particularly how they are stored and managed) away from the logic of the program itself. I would rather have a strongly typed class to manage my settings rather than accessing settings directly through-out my code. I don't like reading code like: &gt; GetStuff([ConfigurationManager.AppSettings["myappconfigkey"]); It seems better to have something like &gt; GetStuff(SettingsClass.MyAppConfigKey);
In that case, it's 4.6. Asp.net 5 is renamed to Asp.net core 1 to avoid any confusion between 4.6 (full stack) and asp.net core 1 (complete rewrite).
I was going to suggest the freenode option myself. There are quite a few people on there most of the time.
Thank you! 
There are a bunch of C#/ASP.NET related room on [Jabbr.net](https://jabbr.net/account/login?ReturnUrl=%2F). Same with [StackOverflow Chat](https://chat.stackoverflow.com/).
Yes, because you can pass parameters to a base ctor with the ": base(x, y, z)" syntax. Because the base class knows nothing about which ctor you might want to call, it must push the parameters onto the stack and then call the derived class constructor which may have a differing number of parameters than the base class's ctor and can specify which base class ctor to call. With a default constructor it doesn't make a difference really to use ": base()" - but with a parameter ctor there's no way around it.
If you haven't used Visual Studio in a while without it, some of the key things you use may now be native in VS. Starting around VS 2015 Update 1 most of the things I used in Resharper were just there, so i left Resharper off because the performance hit bugged me. 
Yeah thanks for this. I was surprised to see how many people are just sitting in the IRC. 
First, figure out what you want to program and how to do it regardless of the language you're using. One good start would be to figure OKCupid's query string format (which is not that obvious from what I can see). If you can do taht to some extent, then build a proper search string using your own parameters (something like "http://okcupid.com/search?age=20") then you can parse out the response using an HTML or XML Parsing library to get the names. Hope this helps.
What I like to do is create a class for my user information, and pass it to each form that needs it, either in the constructor, or just before I set it visible. Then I just have at worst a single global variable for the user information because you never need just one variable.
 public dynamic New() { int state = 0; return new { State = new Func&lt;int&gt;(() =&gt; state), Operation = new Func&lt;int, int&gt;(inc =&gt; state += inc) }; } Does the same thing without needing ExpandoObject (which is basically a `&lt;string, object&gt;` dictionary). The disadvantage over ExpandoObject is that this type cannot be used across assemblies, although I don't think anyone should ever encapsulate mutable state like this in a closure in the first place.
You don't need to check for 0 btw. The logarithm of 0 would be 0 and plus 1 makes it correct. Edit: Math derp.. disregard
I feel like this should come with a "don't try this at home" warning. Interesting (ab)use of compiler and language features, but not something I would advocate.
How is log 0 = 1?
Classic problem when implementing COW on an existing system (it wasn't always COW). AsyncLocal is proper COW from the start, and implemented such that a price is only payed when setting new data, not when capturing the execution context.
Yes, between good coding standards, in-house training, Visual Studio, fxcop or other code analysis tools and snippet libs we get what we want without the overhead in cost, complexity, and performance. I could see using it with a large company so you could define standards for all devs to use, specifically entry-level and junior level but with a small team of senior devs it's better to let them work the way they want to work and expect them to know and do the right thing.
I don't have any audiovisual aids for this, but I can give you my take on explaining the concept and am happy to answer questions or reword explanations. Dictionaries are lists of things where you can give each thing a name. Then you can ask for the thing by name, instead of looking through a list to try and find what you want. Consider a Valet parking lot. It would be full of cars, but each car would have a ticket number, right? The ticket has nothing to do with the Car class, so you wouldn't add a "ticket" property to the Car class, but you need some way to connect the two. You could create a Ticket class with a string Id and a Car car... or you could just use a dictionary! Dictionary&lt;string, Car&gt; valetLot = new Dictionary&lt;string, Car&gt;(); public string GiveCarToValet(Car car) { string ticket = TicketSystem.GetNewTicket(); //random generated ticket ID. valetLot.Add(ticket, car); //the car is now parked return ticket; } public Car RetrieveCar(string ticket) { Car c = null; if (valetLot.TryGetValue(ticket, out c) //if ticket is found, put value in c and return true, else false { valetLot.Remove(ticket); } return c; //this may be null, indicating no car for that ticket } See, now you have a way to arbitrarily name things in a list. The above example is trivial but not excessively so. It is also a bit simplified; you'd probably want to make sure things like ticket are not null, etc. It also assumes some other code to generate the ticket name. Another example is something like `Dictionary&lt;int, Product&gt; inventory` to add a UPC code to all your stock. We can also get more complex. `Dictionary&lt;Person, List&lt;Class&gt;&gt; classSchedule` is a list of Lists of Classes associated to individual Persons. You would require to provide a comparer for the Persons class (instance of IEqualityComparer&lt;Person&gt;) so the Dictionary knows how to check if two instances of Person are the same or not. You can also access the list of Keys (the first half of the types) directly, which lets you implement a `public IEnumberable&lt;string&gt; OutstandingTickets() { return valetLot.Keys; }` Same with Values. You can iterate through a Dictionary using `foreach`, though the type of object you get is a KeyValuePair, with two properties (Key and Value) which wraps the things in the dictionary. Lastly, you can access them like a list, using `dictionary[key]` directly. It'll give you the matching value. If that key doesn't exist, you will get a `KeyNotFoundException` (as if you called `dictionary.GetValue(key)`), so that's why `dictionary.TryGetValue(key, out value)` is a safer option. I'm not sure if I'm any help, but that's the way I think of it.
Sry it was suppose to be 1
For a heads up this is shockingly ignorant. And wrong.
This might be a better question for r/learncsharp. I understand that it's not a busy sub. In regards to loops, [C# has a few different varieties](https://msdn.microsoft.com/en-us/library/f0e10e56%28v=vs.90%29.aspx): while loops are probably the simplest. A while loop executes the block in the loop as long as the condition at the top is true: var numbers = new [] {1,2,3,4,5}; var i = 0; while (i &lt; numbers.Length) { Console.WriteLine(numbers[i]); i++; } The condition (i &lt; numbers.Length) will be checked before every pass of the loop, so if it's *never* true, the inside of the loop won't be run. do ... while loops are similar, except that the condition gets checked after the loop is run. In practice, you are guaranteed at least one pass through the loop: var numbers = new [] {1,2,3,4,5}; var i = 0; do { Console.WriteLine(numbers[i]); i++; } while (i &lt; numbers.Length); The syntax is a little different (i.e. the semicolon after while), but that's pretty much it. for loops are a bit more flexible, but also a little more complicated. var numbers = new [] {1,2,3,4,5}; for (var i = 0; i &lt; numbers.Length; i++) { Console.WriteLine(numbers[i]); } That can be translated to a while loop like this var i = 0; while (i &lt; numbers.Length) { Console.WriteLine(numbers[i]); i++; } The only practical difference is that, with a for loop, i only exists inside the scope of the for loop. foreach loops run over a collection type (or anything that implements IEnumerable, really), pulling the next item from the collection for each iteration: var numbers = new [] {1,2,3,4,5}; foreach (var n in numbers) { Console.WriteLine(n); } There are a number of important wrinkles here: in a foreach loop, you usually can't change the collection you're looping over (depending on particulars, the change may or may not be noticed, could cause a runtime exception and more--don't do it), and you won't be able to assign new values to the iteration variable (n, above) at all. This has to do with some under-the-hood details. In practice, if you want to change the collection while you're looping over it, you probably wanted a for or while in the first place. Just FWIW, though, the foreach above turns into something like this: var numbers = new [] {1,2,3,4,5}; var enumerator = numbers.GetEnumerator(); while (enumerator.MoveNext()) { var n = enumerator.Current; Console.WriteLine(n); } The last thing to be aware of is that your choice of loop is mostly about what you're trying to say: except foreach, you can implement any of the above using any of the above (you could reproduce a foreach loop with any of the other three, but you won't really be able to use foreach to reproduce the others except for what's going on above). That's really it. Loops are pretty basic and fairly simple, for the most part.
This might seem a bit harsh, but it's definitely one of the first places you should look into. Get some tutorials and get the basics down. 
Yea.. how'd I manage that derp... anything to the power of 0 is 1 XD
Correct me if I'm wrong, but doesn't this series also show you how to install Visual Studio?
For someone learning programming in C#, I cannot stress enough how useful [Dot Net Perls](http://www.dotnetperls.com/) is for a reference. There are explanations and simple examples of just about everything and the site is fairly easy to navigate. [Here is the page for Dictionary](http://www.dotnetperls.com/dictionary), 
Use k.ToString()
Jep.
There is no need to - the C# compiler is smart enough to do that implicitly in this case. 
I'm in the same boat as the OP. So is the chain of stable tools right now C# 6.0 &gt; ASP .NET 4.6.x &gt; MVC 5?
Yep, VS is doing that already. Thing is, why can't I just install the latest 4.6 and get it recognized properly by VS2015? And while I uninstalled ALL the .net versions in programs&amp;features, why does it still work with 4.5.2 ?? I'm really confused. 
Since 2015 you can make your style guides/standards give warning/errors through Roslyn. You can also make it project specific.
After you get that fixed it is going to complain about your if statement too. Use ==, not =, or better yet use the Equals() method on the string class. And end your statements with semicolons.
That is correct. And Web API2, if you want to do RESTful or RESTlike services.
Yes, it is most common. But it has a rather steep learning curve and is limited in what you can do with it. When you want to leave the path EF was designed for, then you'll just run into trouble. A Micro ORM like Dapper is also worth checking out.
Great, thanks!
Not that you promised me anything, but I have to admit that I am curious to see if you have spotted some dumdum on my part :)
Thanks for this. This guy is great. 
asp.net core slack: https://aspnetcoreslack.herokuapp.com/ jabbr refugees slack: http://jabbr-slack.azurewebsites.net/
I have to read up on styles, thanks. In terms of the stackpanels, why is it bad using them? Or was the issue that I used a grid with defined regions and locking the panels to set parts? To be honest, I am very new at this, probably visible in my code :) I figured 3x * width would just automagically become 33% in each, roughly, that was at least the thinking behind my oddly shaped grid. I do not completely understand why my designer did not represent reality, but I will test yours in roughly 11 hours IE, first thing tomorrow morning :)
I always go with the constructor.
stackpanels are fantastic for some things. for example. you want a varying number of elements to continue into an expanse in one direction. [x][x][x][x][x][x][x][x][x] -&gt; or [x] [x] [x] [x] [x] [x] [x] [x] | v but when you are trying to align elements of two parallel stackpanels, you are relying on the computed heights/widths of the subelements. So the subelements are telling the stackpanel "this is how much space im taking up." with grid columndefs and rowdefs, you are defining a space and telling the subelements "You can take up this much space." It looks like you started off on the right track with defining rowdefinitions, but then you set the RowSpan of a stackpanel to cross all the borders you just set up, which makes it so the rowdefinitions are not doing anything
also you are correct in that &lt;Grid.ColumnDefinitions&gt; &lt;ColumnDefinition /&gt; &lt;ColumnDefinition /&gt; &lt;ColumnDefinition /&gt; &lt;/Grid.ColumnDefinitions&gt; will create 3 columns, each occupying 33.33% of the available space ( &lt;ColumnDefinition /&gt; is the same as &lt;ColumnDefinition Width="*"/&gt; by the way )
If IS ready then why is it still in RC1? I just can't agree that its a wise business decision to jump into a tech during Release Candidate phase. But hey, maybe time to market isn't something your business is interested in. Or maybe your with a startup and fail fast is your mantra. In either case, for mature businesses jumping on an unfinished technology train just because its Hot and New simply doesn't make sense. Or... is it that you are one of those front end guys who likes the flavor of the month type of developing?
It's testing that the email system data transfer object passed to the email business object's SaveSystem() method by the MaterialSendToApprovalHandler is an EmailSystemDTO with properties meeting all the criteria that are &amp;&amp;'d together, there.
The biggest thing to remember and helped me the most is to understand that a dictionary is just a collection of Key Value pairs. Internally the dictionary tracks the keys and values as separate collections themselves. The same concept could be done with a List&lt;Tuple&lt;object&gt;, Tuple&lt;object&gt;&gt; however the dictionary type has methods and functions that make it easier to work with a 2-dimensional keyed data set. 
Removed: plagiarism. Plus it's a mostly incomplete and cruddy tutorial/resource.
C# in a Nutshell books are pretty good if you are just looking to learn the language. Honestly I'd look to by the edition for 5.0 cheap and learn from there. The 6 features only add syntactical sugar except in a couple of places that you'd probably not run into anyways. 
Well I already asked if they could download it but nothing came of it. I have visual studio and all the .net framework components I need on my computer at home, so i'll be able to just upload all the txt files to dropbox so I can access it at home. Thank you for the help.
I didn't even consider that! Thanks a bunch dude, I appreciate it.
[This is really, really good](http://www.amazon.com/C-6-0-NET-4-6-Framework/dp/1484213335/ref=sr_1_3?ie=UTF8&amp;qid=1459985285&amp;sr=8-3&amp;keywords=c%23) If you are coming from Java or C++, or even C, this is a great book that doesn't bore you with the basics (it knows you know how if statements work) but explains the C# syntactic sugar. It's big, but it's an interesting read with the perfect pace.
If you're just looking to do "Hello World" type programs, any of these online tools will work: http://csharppad.com/ http://www.tutorialspoint.com/compile_csharp_online.php http://rextester.com/ https://dotnetfiddle.net/
Thank you very much for all the links!
Can you do file management? I'm wondering if there is a possible application for cleaning data and freeing up space on phones with little space remaining.
Visual Studio Team Services on this page should do it: https://www.visualstudio.com/
Look into how Asp.net core does configuration, you may be able to adapt it your own needs as there is no reason it has to be only for an Asp.net site. http://docs.asp.net/en/latest/fundamentals/configuration.html#using-the-built-in-providers https://github.com/aspnet/Configuration In fact you should be able to just pull that package down in NuGet and not have to write anything. 
Give `UseLayoutRounding="True"` a try. It applies to `FrameworkElement`, and thus `TextBlock`. 
It's the best reference I've ever read. 
You can also use teamviewer portable from your flash drive to remote into your home PC. If there is such restrictions on school computers.
I agree. I basically used the C# 6.0 release blogs to pick up the new features. 
I just picked up Essential C# 6.0 (Kindle ediiton) http://www.amazon.com/Essential-6-0-Addison-Wesley-Microsoft-Technology/dp/0134141040/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1459997220&amp;sr=1-1&amp;keywords=essential+c+6.0 I read some good reviews about it (plus Eric Lippert is the co-author!) and the first few pages seem to do an admirable job of introducing the language. The coverage includes all the language versions from version 2.0 through 6.0 - The book is focused on C# 6.0 but has version specific callouts throughout, so you get the right perspective but these are unobtrusive and are just as easy to skip over. Anyway, I won't ramble on. You can read other reviews on Amazon.
Naw that video is at least 6 years old, thats just a reupload. 
And now you can run .net core anywhere. Cross-platform portability achievement unlocked!!!
this, close thread.
Yep that solved it. I don't know how have never once seen that in all the time I've spend with WPF... I can apply it to the window and it fixes all the text in one go. Thanks
More than that you can't run real Java on the major platforms because Oracle is very protective of it, and client side PC usage has dwindled as well
Most people don't get violent over preference, but when someone prefers something they will many times say that thing is better. Arguments over better are when the violence happens.
I don't think it's just fanboism. People make rational decisions for what language they are going to write green field code in. I'm not going to drain these reasons here as I am sure we are fairly familiar with them. I agree with the prior response though. I don't understand why there are religious arguments over the choice of languages. Especially between two languages in Java and C# where the two are close to feature parity and I'm sure will come even closer as time goes on.
Howdydoody! Tried your xaml, it works fine, though when I try to expand on it, by putting it in an additional grid, locking its size. It goes herpaderp, I need to write a decent plugin for reddit because this super derpy markdown is only annoying me &lt;Window x:Class="CourseRegister.Views.AddStudentWindow" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:local="clr-namespace:CourseRegister.Views" mc:Ignorable="d" x:Name="StudentAddView" Title="Add a new student" Height="195" Width="310" ResizeMode="NoResize" WindowStartupLocation="CenterScreen" WindowStyle="ToolWindow" Topmost="True" Closing="StudentAddView_Closing"&gt; &lt;Window.Resources&gt; &lt;Style x:Key="LeftColumnLabel" TargetType="TextBlock"&gt; &lt;Setter Property="VerticalAlignment" Value="Center"/&gt; &lt;/Style&gt; &lt;Style x:Key="RightColumnTextBoxes" TargetType="TextBox"&gt; &lt;Setter Property="Grid.Column" Value="1"/&gt; &lt;Setter Property="Margin" Value="1"/&gt; &lt;/Style&gt; &lt;/Window.Resources&gt; &lt;Grid&gt; &lt;Grid.ColumnDefinitions&gt; &lt;ColumnDefinition Width="303"/&gt; &lt;/Grid.ColumnDefinitions&gt; &lt;Grid.RowDefinitions&gt; &lt;RowDefinition Height="163.333"/&gt; &lt;/Grid.RowDefinitions&gt; &lt;Grid&gt; &lt;Grid.RowDefinitions&gt; &lt;RowDefinition /&gt; &lt;RowDefinition Height="Auto" /&gt; &lt;/Grid.RowDefinitions&gt; &lt;Grid Margin="5 2 5 10"&gt; &lt;Grid.ColumnDefinitions&gt; &lt;ColumnDefinition Width="85"/&gt; &lt;ColumnDefinition/&gt; &lt;/Grid.ColumnDefinitions&gt; &lt;Grid.RowDefinitions&gt; &lt;RowDefinition/&gt; &lt;RowDefinition/&gt; &lt;RowDefinition/&gt; &lt;RowDefinition/&gt; &lt;RowDefinition/&gt; &lt;/Grid.RowDefinitions&gt; &lt;TextBlock Text="Students Name" Grid.Row="0" Style="{StaticResource LeftColumnLabel}" /&gt; &lt;TextBlock Text="Country" Grid.Row="1" Style="{StaticResource LeftColumnLabel}" /&gt; &lt;TextBlock Text="Start Date" Grid.Row="2" Style="{StaticResource LeftColumnLabel}" /&gt; &lt;TextBlock Text="End date" Grid.Row="3" Style="{StaticResource LeftColumnLabel}" /&gt; &lt;TextBlock Text="Course hours" Grid.Row="4" Style="{StaticResource LeftColumnLabel}" /&gt; &lt;TextBox x:Name="StudentNameText" Style="{StaticResource RightColumnTextBoxes}" Grid.Row="0" Text="{Binding StudentName, FallbackValue='students name', UpdateSourceTrigger=PropertyChanged}"/&gt; &lt;TextBox x:Name="Nationality" Style="{StaticResource RightColumnTextBoxes}" Grid.Row="1" Text="{Binding Nation, FallbackValue='country', UpdateSourceTrigger=PropertyChanged}"/&gt; &lt;TextBox x:Name="StartDate" Style="{StaticResource RightColumnTextBoxes}" Grid.Row="2" Text="{Binding StartDate, FallbackValue='01.01.15', UpdateSourceTrigger=PropertyChanged}"/&gt; &lt;TextBox x:Name="EndDate" Style="{StaticResource RightColumnTextBoxes}" Grid.Row="3" Text="{Binding EndDate, FallbackValue='02.02.16', UpdateSourceTrigger=PropertyChanged}"/&gt; &lt;TextBox x:Name="CourseLength" Style="{StaticResource RightColumnTextBoxes}" Grid.Row="4" Text="{Binding CourseLength, FallbackValue='40', UpdateSourceTrigger=PropertyChanged}"/&gt; &lt;/Grid&gt; &lt;Grid Row="1"&gt; &lt;Grid.ColumnDefinitions&gt; &lt;ColumnDefinition /&gt; &lt;ColumnDefinition /&gt; &lt;/Grid.ColumnDefinitions&gt; &lt;Button x:Name="Discard_Changes" Content="Cancel" Margin="5 2"/&gt; &lt;Button x:Name="Save_changes" Grid.Column="1" Content="Save Changes" Margin="5 2"/&gt; &lt;/Grid&gt; &lt;/Grid&gt; &lt;/Grid&gt;
Ok, I think me and 2 other dudes managed to brain this tard up! If we set height to **auto** in my "stay here in the corner" grid, it works. Magical.
&gt; Today everything seems to work on anything. "seems" is the keyword here. Just because you can run basic "hello world" on any platform doesn't mean it is viable to implement complex application. Especially if you want to have one source running on drastically different platforms. "lowest common denominator" is often so limiting that you still have to use native tools to actually make something competitive.
I still like net beans better than eclipse.
Yeah well a bit of native tooling is fine, I mean if the business logic is shared I am all happy. But as I have said, choose the tools that fit your problem, don't just choose what you prefer. Technology blindness is stupid.
Yes. See the Documentation for specifics, and post in Issues if you have any trouble.
If you don't want to install anything then you could see if you can get a [DreamSpark](https://www.dreamspark.com/Default.aspx) licence through your school and use Visual Studio Online
Thanks. "with 4 logical cores worth" so a cpu with 4 cores is recommended, i understood it correct? Iam definetaly going ssd way, no doubt, so i wonder, if 240gb would be okish? (i dont plan to store much personal stuff, in fact nothing, no games, pictures or music since i use cloud services for that and dont game). Also, do you recommend Intel over AMD?
Me to, less cluttered.
&gt; Some people will borderline punch you in the face if you say you prefer C# over C/C++ . Fortunately I think most C++ programmers lack the physical strength ;D (shots fired, come at me C++'ers!)
RAM &amp; SSD are important factors I think. It depends on what you're doing. Here is an example if money isnt an issue: http://nickcraver.com/desktop-build/
Thanks for tip, tho i need a laptop since i have to stay "mobile" also money is a factor, i dotn have set limits yet tho, but i dont think want to spend more than 800-900eur on it.
notepad... I think I'd rather use a line-based text editor in a 80-column terminal than use notepad.
Check Lenovo Yoga 700-14ISK or Ideapad 500S
If you start learning, send me a message and maybe we can form a xamarin study group on slack.
Wow java and secure in the same sentence. Now that's a good joke.
Mono maybe, but he speaks about Core which (as far as I know) is far from production ready...
Scala Johansson is still sexy.
CODE WAR!!
I remain convinced that Eclipse was made by self-hating Java developers who wanted to punish people like them. But I know people who legitimately love it, so maybe it's just me.
The DataTable (from System.Data) has a .Compute() method that you can use: var dt = new DataTable(); var expr = "21 + 5 * 17 / ( 8 - 6)"; var result = dt.Compute(expr, null); Console.WriteLine(result); // 63.5 
Thanks for that, I'll see if I can implement it. Perhaps using the DataTable beyond the Computer function would also be the right thing to do. Edit: Its missing exponent operators, which are essential.
I know some of my java "friend"(can they really be friends if they use Java) love and will not sure anything else.
Just gonna leave this here https://docs.spring.io/spring/docs/2.5.x/javadoc-api/org/springframework/aop/framework/AbstractSingletonProxyFactoryBean.html
Sure, but in the following scenario: using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading; using System.Threading.Tasks; namespace TestAsync { class Program { async Task AsyncMethod() { await Task.Delay(500); Console.WriteLine("Hello from task!"); } static void Main(string[] args) { Console.WriteLine("Starting..."); new Program().AsyncMethod(); while (true) { Console.WriteLine("Sleeping..."); Thread.Sleep(1000); } } } } Is it guaranteed that AsyncMethod will run to finish (given that no error occurs)?
I like watching old movies where important plot points have been made incorrect or obsolete by changes in technology. Retroactive Plot Holes! 
maybe there is some secret incantations that make Eclipse not sluggish? Or they have overclocked next gen I7 cpus 
I've written my own expression parsers and evaluators in the past. For what its worth, it isn't very difficult to write it yourself. You use the Shunting Yard algorithm to parse the expression into a tree structure that you can then traverse to evaluate.
Put it in your config file (which you will have to update when running on another system though): &lt;appSettings&gt; &lt;add key="ConnString" value="Data Source=localhost\sqlexpress;Initial Catalog=tennis;Integrated Security=true;Connection Timeout=300;MultipleActiveResultSets=true"/&gt; &lt;/appSettings&gt; Then in your codefile you can access the "ConnString" from your &lt;appSettings&gt;: private static string ConnStr { get { return ConfigurationManager.AppSettings["ConnString"]; } } Notice that the "ConnString" in the code-part is referring to the "key" attribute in the &lt;add&gt; element in your config-file. PS. If you have other system-dependant variables they should also go in the &lt;appSettings&gt; and accessed the same way, this so you dont have to rebuild your project everytime you change location of your database or computer name. DS
Hello, It's your friend IntelliJ extracting you from your Stockholm syndrome
In theory, no that is not required to finish. In practice I think that will finish practically every time(the only reason it wouldn't is thread starvation). 
This is an excellent book.
I really liked this book and it was the first serious programming book I read. 
If I have to use Java again professionally, definitely gonna try that.
"Convenient proxy factory bean superclass for proxy factory beans that create only singletons." This kills the developer.
Except, you know, MS projects are absolute horse shit in comparison to basically everything else out there. Visual Studio is fine, but tooling extending beyond that leaves plenty to be desired.
Idk, I like Eclipse for Java development. I don't really understand the hate. That said, I do have a beast of a computer.
It's sluggish on Windows but on Linux it works okay. Also the number of installed plugins may be a factor.
You should see the reaction when you say you like F# over C# 
There's technical merits to dotnet - Java uses type erasure to implement generics, while c#/dotnet use reified generics. C# has delegates, events, assemblies, etc. Java is starting to catch up, but the language/runtime design is really showing its age. 
I haven't used it personally in a long time, computers are much faster now, JVM is faster now, it might be fine. I just hear from coworkers that it is still sluggish. I have low tolerance for sluggish. I can't handle Resharper on visual studio for the same reason. OH MY GOD IM WAITING 2 SECONDS 
I'm sure there is a way to do that, but to be honest, vs2015 is nice enough that it covers pretty much everything I used it to do. It's been long enough that now I don't really know what I missed about it.
What sorts of tooling are you missing? Maybe we can help.
Have you tried it without Resharper since 2015 update1? They have narrowed the feature gap a bit 
I do have a i7 4790K and it is still sluggish, not next gen but comparable speed. Also a new CPU cannot fix the bad UI. Still use it though, thinking to move to IntelliJ Idea perhaps, as I do a lot of Scala work these days.
That's when Jetbrains pulls out some more features, I was at build where they demoed some of the update 2 and vs2016 features, you could tell the features already in resharper were getting the least claps 
CODE WAR NOW!
I did that but whenever I try to insert data into my database it gets inserted into "/project/App1/App1/bin/Debug/Database1.mdb" and not in "/project/App1/App1/Database1.mdb." It wouldn't have bothered me if, I was getting my data stored somewhere in my project but whenever I close the application, all the data in the Database1.mdb inside bin folder gets deleted. If I use the connection string in my post above, only then the data is stored inside the main database file i.e "project/App1/App1/Database1.mdb" without getting deleted everytime I close application. Same is the case when I use the connection string as public string connStr= "Data Source=(LocalDB)\\MSSQLLocalDB;AttachDbFilename=|DataDirectory|//Database1.mdf;Integrated Security=True";
That was what I hoped (and expected) - thanks!
GATHER ARMS, Intel's, or AMD's. Doesn't really matter I guess.
Fully agree! The same thing was being said about C/Pascal/Basic vs Assembly, followed by C++ vs C. There is always a time until alternatives generate good enough code, enough game devs feel adventurous to try out new paths, then a few market hits convince others to follow along.
Downfall, Dmitry et AL videos are way too easy to make (tools available on the web). I'm thinking original video content like this one
To people who downvoted him: He says he wants to catch up! Help him instead of downvoting him. Beside, he's not saying c# sucks ass, no need to be hurt.
why cant you serialize \t and \n's? If you want to remove them you could string.Replace("\t","").Replace("\n",""); (Theres probably a more efficient way to do this id have to look at the overloads)
Literally just finished a meeting I called to discuss using ASP.NET Core over Node for a future project. I prevailed. :D
So funny, but so true. 
I think pooling can be done quite effectively without language support, you just have to remember to "free" your objects. IDisposable can be of *some* help there.
I know what they are, I'm curious as to why they're in the feed. I am looking at it in the debugger but I've hit other apis and they don't have that in there
If anything, it seems to me they are growing further apart. When it comes to language features, Java is playing catch up, badly.
Isn't Java known for having pretty bad native tools (JNI), when compared with .Net (PInvoke)?
I don't see any escape characters in the JSONP on my end, just actual tabs and new lines that may be displayed as \t and \n in the debugger tooltip.
Funny you should ask. Although I did buy the C# and .NET 4.6 Apress book provided by Official_Taco_Bandit, another good read that just came out this week is [this book](http://www.wrox.com/WileyCDA/WroxTitle/Professional-C-6-and-NET-Core-1-0.productCd-111909660X.html) by Wrox. It includes the latest on .Net Core 1.0 as well on top of the latest C# features.
Interesting you bring the gradle up. We use that here for android studio on the mobile apps we have, and it is an utter nightmare for the devs to deal with. Perfect example was last sprint we had v1.3.2 and had to move to 1.5.x. gradle broke, xml file for handling what is android related and what is just java related broke as well. We all have issues, but pointing fingers at VS or other specific systems is a lost cause. Sometimes things work, sometimes they don't.
This should shed some light on using interop assemblies and the functions within them. Download the Dependency Walker (link below), then open up your User32.dll with it. That tool will show you every function within the dll. [Dependency Walker 2.2](http://www.dependencywalker.com/)
Haha. I actually just finished a couple simple Node apps. It works well for that stuff, but I wasn't crazy about using it for our bigger projects.
so maybe i just have something wrong with my classes then when I'm trying to serialize it.
Are you removing the JSONP wrapper? Trying to deserialize that data as is won't work because it's not pure JSON.
Look into these two options for obtaining your current location (where the EXE is running). You can build the directory to your database off of where your EXE is currently at. Console.WriteLine(System.Environment.CurrentDirectory); Console.WriteLine(System.Windows.Forms.Application.ExecutablePath);
I am on a laptop, so I'm missing a few gigaflops 
Destructable types are something I've always wanted in my C#. Too many times you need to scope something and using statements with IDisposable doesn't cut it or guarantee safety.
There are very legitimate reasons to go the C++ route. Java developers however, they must just hate themselves.
It's okay if it requires workarounds, but that required workaround could be reduced an awful lot by some not-so-terribly-hard to implement features, that wouldn't make the language more complex for the average developer either. Hope they get added some day. P/Invoke would be a very simple workaround, if it was zero-cost (which it could actually be made for very simple calls, where it is currently the biggest issue). Currently there is a 15-35 instructions overhead for every P/Invoke call that makes few-instruction P/Invoke calls too costly (not talking about marshalling, that is almost always avoidable), and again it's a pain to benchmark how much of the logic you need to move to unmanaged code to make it worth the cost. C++/CLI isn't an option, it has way more overhead between managed/unmanaged boundary, and isn't currently planned to be implemented for .NET Core, so is probably going to die.
I agree, then we debate. Downvoting is not a sign of debatable state.
I am not sure delegates are superior to Java's SAM types. Is there anything to support that claim?
I'm a little confused. I looked at the page, and it looks like it's actually javascript to format the data into arrays. It's not really serialized data itself, unless I'm totally misunderstanding. It looks more like a function to be called to generate arrays for use by the browser. The tabs and newlines are likely there for readability. I wouldn't use this data in this format unless this is all you can access.
The project system is all new for .Net core.
SAM types don't work for static methods; delegates do. SAM types require a call through a lambda - even when binding against existing methods (the lambda is created for you transparently). Java still doesn't come anywhere near touching C#'s generics implementation and events. Theres a couple under-the-hood goodies too, for instance: Dotnet supports garbage collection in active stacks - it can inspect the stack and determine that the last reference to a stack variable has occurred and won't be needed, and thus can be GC'd. If you have long-running or indefinitely running call stacks that are holding on to references they don't need, they can still be GC'd in Dotnet. There is one small downside - correct implementation of native method invocation requires understanding how Dotnet's Constrained Execution Regions work, and the use of SafeHandle etc.
In true Blue Peter style, here's one I made earlier: https://github.com/phonicuk/clrcli - It has a winforms-like API and is purely event driven. Using it is really straightforward: var root = new RootWindow(); var dialog = new Dialog(root) { Text = "Hello World!", Width = 60, Height = 32, Top = 4, Left = 4, Border = BorderStyle.Thick }; new Label(dialog) {Text = "This is a dialog!", Top = 2, Left = 2}; [Full sample](https://github.com/PhonicUK/CLRCLI/blob/master/TestHarness/Program.cs)
&gt; P/Invoke would be a very simple workaround, if it was zero-cost (which it could actually be made for very simple calls, where it is currently the biggest issue). Currently there is a 15-35 instructions overhead for every P/Invoke call that makes few-instruction P/Invoke calls too costly (not talking about marshalling, that is almost always avoidable) I don't know if you already know this but P/Invoke calls incur an unnecessary performance penalty due to security being enabled by default. It can be circumvented however- I wrote about it [on my blog](https://xenoprimate.wordpress.com/2016/01/18/pinvoke-tips/) (under the Suppressing Unmanaged Code Security section). &gt; and again it's a pain to benchmark how much of the logic you need to move to unmanaged code to make it worth the cost. In my engine, I ended up using shared memory and writing to control and data buffers before passing control over to the C++ side with a single P/Invoke call. That being said, I did also benchmark the 'damage dealt' by P/Invoke and as long as you're careful around marshalling I didn't find it restrictively high. &gt; C++/CLI isn't an option, it has way more overhead between managed/unmanaged boundary, and isn't currently planned to be implemented for .NET Core, so is probably going to die. You'll hear no argument from me on that. Add to that that it's very difficult to control what's managed and what's unmanaged and that it's not cross-platform, I'm for P/Invoke all the way (out of the two).
Cool! Do you have a gallery of all the widgets? Or what it looks like in Linux Terminal emulators?
That's what I did. I'm just returning that string and then serializing it in another function. As far as I know the serialize function requires a string anyways. 
Have you been following any of the perf related work and bugs filed by the RavenDb guys? https://ayende.com/blog/169825/excerpts-from-the-ravendb-performance-team-report-optimizing-memory-compare-copy-costs https://github.com/dotnet/corefx/issues/2209 and so on... Making it easier in C# to do 0-heap-allocation code is nice but there also appears to be a surprising amount of improvement available in CLR improvements as well.
240GB is enough. Oh you don't game? Pick Intel (it's much cooler anyway, so thinner &amp; less noise) without dedicated GPU. This saves even more power &amp; reduce the risk of borked driver update. As /u/FizixMan said, even 2 cores hyperthreaded would be enough. Not sure about the 4GB RAM though, if you host your own local SQL Server/IIS and running the mobile emulator, 8GB is minimum.
Jump in and do it. Your first game will suck, you'll get stuck and frustrated frequently, you'll make so many mistakes ... and you'll learn a ton. The moments of triumph when you get through a hard spot and reach success are the ones that make it all so fun.
I fail to understand both arguments about SAM types. How is that they don't work for static methods? You can't put a static method into a SAM type? Also what is the difference between SAM types and delegates when calling? Both require an object
I thought destructors in Garbage collected languages were considered a bad idea due to non deterministic lifetimes. It's why everyone is warded off finalize in java and c#. Has this changed recently?
Your pool would probably allocate arrays at a time and dole out objects as they're needed, and `Dispose()` would return them to the pool. They'd be recycled instead of collected, and they'd be in large contiguous blocks instead of all over the heap.
I tried to use the test hardness on Linux/XFCE4, it threw errors (and wouldn't run). When I SSH'd into my linux box though via OS X's terminal it worked though. This may be something to investigate.
You have a destructor in c# Public ~MyClass(){ \* release resources *\ } 
Dropping down to a C / C++ feels more like a workaround to me than a solution. One of the awesome things of C# is that - if you follow a few rules - you don't need to recompile it for different processor architectures or even operating systems. "Just use a P/Invoke" immediately takes that away and I now have to worry about N differently compiled versions again. If we were able to write a bit more of that highly optimized / efficient code directly in C#, this wouldn't be an issue. It doesn't even have to cross unsafe territory in all cases.
I still don't get it. You can get a method reference to a static method and pass it to a SAM type - http://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html Also I am pretty sure delegates are reference types.
C++ has garbage collection since C++11. RC is a GC algorithm from CS point of view (*_ptr&lt;&gt;()) and a GC API was defined in the standard.
Can someone please help parse this article? Not sure I understand the benefits.
I guess the glib answer is that if you don't see a use for it then the feature's probably not for you. The more friendly answer is that being able to say that your code results in a bit-identical binary no matter when or where it is built means you can parallelise, distribute, cache, roll forward-and-back, run tests, etc.
It's invoked when the collection cleans it up. This isn't like the Java final method. If you want to control when it's invoked implement idisposable.
https://www.reddit.com/r/csharp/comments/3xn6sm/welcome_to_rcsharp_read_this_post_before/
Sorry man! Didn't read. My bad.
If you know if/then/else and loops, you're good to go. With Monogame (and other managed code frameworks) it often pays to stick to the basics. Arrays of structs, object pools and avoiding LINQ (because of behind-the-scene garbage generation) in your .Update() and .Draw() will help your game run smoothly. Learning how .Net manages memory; how allocations are done for classes and structs; the differences between the various GCs on Windows, Mono, Xbox, etc. will help you find and fix bottlenecks and help you plan your initial architecture better.
Every time I see that picture of the dog I loose it, thanks for making my Friday start off well.
There is no backwards or forwards, deep dive into whatever you're interested in. The challenge isn't really the language but the eccentricities of your project type. For games, you'll need to understand good memory management, frame based updating, etc
It's invoked *sometime after* garbage collection unless you explicitly call [WaitForPendingFinalizers](https://msdn.microsoft.com/en-us/library/system.gc.waitforpendingfinalizers%28v=vs.110%29.aspx). For more information, see this stackoverflow answer: http://stackoverflow.com/a/13955187/158109 Also I think it's almost identical to Java's `finalize()`, at least as far as I know.
The destructible types in the github issue are referring to deterministic lifetime objects (e.g. automatically destructed on leaving local scope, etc).
I wonder if [this](https://ayende.com/blog/169827/excerpts-from-the-ravendb-performance-team-report-optimizing-memory-comparisons-digging-into-the-il) is a large part of the performance difference between lazy translations of C/C++ to C#.
Of course it's sometime after garage collection. If you're doing something between garbage collection and the destructor being called, you should be writing your own heap and you can call it yourself. The Java finalize is for threading. This is why it's unexpected when it's called because the VM will call it when the process ends. Not when the garbage collector cleans it up. 
Are you trying to center the text, or what are you doing? How is the result weird?
I like Ian Griffiths books. [Programming C# 6.0](http://www.amazon.com/Programming-6-0-Windows-Desktop-Applications/dp/1491922192/) 
This looks really cool, thanks! :)
Sadly, I wont know the text dimensions ahead of time, as they will be read from an xml file.
Looks like your line is just too wide; it's wrapping on the console. If you change the console properties so that the screen buffer is wide enough for the whole line, that won't happen. You might be able to use [Console.BufferWidth](https://msdn.microsoft.com/en-us/library/system.console.bufferwidth%28v=vs.110%29.aspx) and/or [Console.WindowWidth](https://msdn.microsoft.com/en-us/library/system.console.windowwidth%28v=vs.110%29.aspx) to make that happen.
You cannot cast a `List&lt;RandomClass&gt;` to a `List&lt;IRandom&gt;`, if that's what you mean. You can cast it to an `IEnumerable&lt;IRandom&gt;` or `IReadOnlyList&lt;IRandom&gt;`, however. See [covariance](https://msdn.microsoft.com/en-us/library/ee207183.aspx).
To explain it better, instead of IRandom lets pretend it is IShape. And lets say random class is a Circle. So in this scenario you'd be have List&lt;IShape&gt; but the real object would be a list of Circles. If you had an object named Square you'd run into some real nastiness from the consumer of that method wanted to add their object to that list. That's why you see things like IReadOnlyList and other readonly classes allowing covariance.
that appears to be the problem, thanks, Lukas
On a side note: I don't know how close this is to actual code, but you should avoid returning nulls (at least) from methods that return lists. It will make your life easier. New up an empty list and return that instead.
Thanks can you explain why checking for a null or an empty list is different? 
Thank you both and especially you for the scenario. This makes more sense now. 
Having null objects being passed around is irritating/dangerous because as your code becomes more complex accounting for the possibility of null values means more chances of missing something and getting null reference exceptions. In this case you can simply foreach through an empty list without any problems, however foreaching a null reference will throw.
the argument for returning empty collections is that you commonly iterate over collections. iterating over an empty collection is pretty much the same as checking for null first. your code can have a few less lines and you'll be less likely to get null reference exceptions during run-time. an empty collection also makes more logical sense than null for a lot of methods that return collections. FilterByName(string name), you're returning the set of all things that match your name filter, which in this case is an empty set. the argument for returning null is that sometimes you want there to be run-time exceptions. null in this case implies that something went wrong. it's not the best way to handle errors, but it is a way. some people prefer to throw exceptions in this case, other people prefer to return null, check for that and then handle the error appropriately in code.
The difference, in this case, is that when you always return a list, there is **no** check necessary if it's empty. Whoever calls your method can simply use the result without any extra validation. It's a convention and as such it removes the need for documentation and makes things easier to predict.
It's not about checking for null in a returned value, it's more of a design choice I learned to make over the years. I look at it like this: if I want to get a list of something from a method, to me it doesn't make sense to return *nothing*, and then check for nothing from the caller. What does make sense is to get 0 or more things back. It's very common that you request a list, and then try to iterate through it with something like *foreach*. If your list is empty, nothing will happen, no harm done. But if your list is null, your code will blow up. Same will happen when checking list.Count for the number of elements. I find it very useless to check if the list is null, and also empty. If you constrain yourself to always return at least an empty list, you're saving yourself from that much null-checks, thus keeping your code simpler and cleaner. [A related interesting approach](http://codinghelmet.com/?path=howto/how-to-implement-lazy-default-if-empty-functionality-on-collections)
I gave it a whirl and it works on both the Windows console and Arch Linux console...that by itself is very cool. A question: on the Linux console, when you quit, it leaves the console with a pink background. Issuing a 'clear' in the console returns to normal. Where would be the appropriate place to put a Console.Clear() command in the code to cleanup when it exits?...I tried putting in various places in TestHarness.exe but it never gets called.
After my first two posts were a bit low-level and heavy, I decided to go with a more accessible topic for this one. :)
&gt; I’m not sure why the compiler can’t make this optimisation itself, interestingly. It may just be that this isn’t considered a particularly worthwhile thing to implement. I suspect this optimization is a rather large effort for the compiler to detect for a very specific issue that is viewed as uncommon. It probably simply hasn't been considered. It could be written as a code analyzer and code fix: Inside a method, given a value type which is boxed for some reason inside a loop but not modified inside the loop, consider explicitly boxing the variable outside of the loop. Report it to Roslyn... Actually I think the case can be generalized: If a variable type `A` is cast to type `B` either more than once inside a block or once inside a loop and the variable is not assigned to, passed as a `ref` and is not visible to a closure where it might be modified, offer an analyzer warning/code fix cast outside the loop / before the first usage.
Console.Clear() is the last thing RootWindow.Detatch() does. Is Detatch being invoked? It might be necessary for me to put something in there to fetch the current colors being used at Run() and set them back again after the loop exits.
Yep, I set a breakpoint on: (sender as Button).RootWindow.Detach(); ...in the button_Clicked handler of TestHarness, it definitely gets called and from there runs through more click handling and keypress processing and then back to root.Run() in Main where it ends. There doesn't seem to be any console cleanup code called.
Pretty much nothing. There's probably some deep implementation details that are different, but they act pretty much the same, and have the same function/purpose.
Spectacular article, thank you. 
Okay, you win on that one...I set a breakpoint there and it gets called :) ...still leaves my Arch Linux console pink :)
replying to my own comment for next section thoughts: &gt; The best advice I can give is to perhaps compromise a little and change your IEnumerable&lt;T&gt;s in to IList&lt;T&gt;s. Although this is technically bad practice, it allows you to at least replace the foreach loop with a garbage-friendly for: I'd say that is not a bad practice at all. I wonder if you could get cute with `dynamic` though. If you extract that inner loop out into a method, use T4 templates to make a bunch of them for various types that might be used and then did: private static void DoTestB() { foreach (var kvp in userPurchasesB) { PrintUserDetails(kvp.Key); PrintEachPurchaseDetails((dynamic)kvp.Value); } } private static void PrintEachPurchaseDetails(List&lt;Purchase&gt; items) { foreach (var purchase in items) { PrintPurchaseDetails(purchase); } } private static void PrintEachPurchaseDetails(Purchase[] items) { foreach (var purchase in items) { PrintPurchaseDetails(purchase); } } private static void PrintEachPurchaseDetails(IEnumerable&lt;Purchase&gt; items) { Debug.WriteLine("called IEnumerable, type was " + items.GetType()); foreach (var purchase in items) { PrintPurchaseDetails(purchase); } } edit: this does work and calls the correct method via late binding, I don't know if it is worth doing though...
Cool...otherwise, really nice work :)
Is there going to be a MultiLineTextbox?
arrays FOR EVAR!!!!!! Seriously though if you know you are not modifying the length and you are in a hot path, arrays are probably faster.
Quite intrusive. I'm not sure I like, but I do appreciate the effort you made.
Jump into it! Your code will likely be awful when starting out, but Monogame won't object. As your game increases in scope you'll start recognizing areas where you can improve by making your code modular. I think Monogame is a great way to learn C# as it really drives home the usefulness of OOP.
Might be worth submitting to [Code Cracker](https://github.com/code-cracker/code-cracker)
Thanks for your answer. I guess I used the wrong word but you understood my intention :-) 
I'm aware of the *SuppressUnmanagedCodeSecurity* attribute. Unfortunately PInvoke still needs to perform a little additional work. https://msdn.microsoft.com/en-us/library/ms235282.aspx &gt;PInvoke has an overhead of between 10 and 30 x86 instructions per call. In addition to this fixed cost, marshaling creates additional overhead. https://github.com/dotnet/coreclr/blob/0c88c2e67260ddcb1d400eb6adda19de627998f5/Documentation/mscorlib.md#qcall-example---managed-part (P/Invoke ~= QCalls, making custom FCalls is not currently possible without recompiling the .NET Core) In my benchmarks, the overhead is about 20% for a simple integer incrementation (with no parameters received), it falls below 1% if I also multiply the same integer by 23 then divide it by 7 (compared to doing the same thing in C#). If you want to use P/Invoke for things like popcount, or simple SIMD instructions it can be significant (and that's for release build, without debugger attached, overhead for debug builds is about 10 times higher with 64bit RyuJIT). According to the qcall/fcall article though, it seems to me like those extremely short calls shouldn't need to worry about the garbage collector, and should be able to run with no overhead. Would be cool if PInvoke had some *evenmoreunsafe* attribute, applied when the developer knows that the call will be done extremely fast, with no chance to cause GC starvation.
To be explicit....it's not a null reference error. It's a ArgumentNullException. Calling an extension method (of which most, if not all, LINQ is) perfectly fine on a null object. However, the first line of most LINQ methods is doing contract-checking on their arguments. You'll get a different error from list.Count and list.Any() where list is null.
Sharpdevelop is also decent. But visual Studio and Blend are awesome 
I would love to be able to do something like this: internal static unsafe class Hardware { public static ulong PopCount(ulong[] buffer) { ulong r1 = 0; ulong r2 = 0; ulong r3 = 0; ulong r4 = 0; var len = buffer.Length; for (int i = len % 4 - 1; i &gt;= 0; i--) { __masm ( ref r1, buffer[i] ) { popcnt %1, %1 add %1, %0 }; } for(int i = len % 4; i &lt; len; i+=4) { __masm ( ref r1, ref r2, ref r3, ref r4, buffer[i], buffer[i+1], buffer[i+2], buffer[i+3] ) { popcnt %4, %4 add %4, %0 popcnt %5, %5 add %5, %1 popcnt %6, %6 add %6, %2 popcnt %7, %7 add %7, %3 }; } return r1 + r2 + r3 + r4; } } and have it generate a very minimal amount of overhead. 
Short answer.... No. Wpf is intricately married to XAML and if you want to build anything non trivial you need to dive in and embrace it. Just bite the bullet and learn it now before you pick up bad habits trying to avoid it.
I did enjoy the other two as well! Keep up the good work
You should really show people how you can see the memory problems in profilers. Just giving people a list of things to avoid does not really help much they need to be able to see how to find these problems themselves.
Could you expand a little on this idea?
Hey there battleguard. This post was mostly about showcasing some more common examples of code and patterns that can trip us all up occasionally. For profiling more bespoke instances of garbage running awry you'll need to use a memory profiler, as you point out. That's really a separate tutorial- and one that I'm not really the best person to write. I know how to use the tools but I'm not a profiling guru, after all. If you're interested, the profiler I use is one called *YourKit*, and if you're interested in learning that particular one, there are [tutorials by the vendor themselves](https://www.yourkit.com/docs/). Having said that, I believe there's now a free profiler included with VS2015, and it seems like Microsoft have provided their own tutorial here: https://msdn.microsoft.com/en-us/library/ms182372.aspx. For the actual figures in the post itself I wrote a very simple (and not 100% accurate) benchmarking harness that looks something like this: GC.Collect(GC.MaxGeneration, GCCollectionMode.Forced, true); if (!GC.TryStartNoGCRegion(MAX_BYTES_PER_TEST)) throw new ApplicationException("Could not record GC."); stopwatch.Restart(); DoTest(); stopwatch.Stop(); long memBefore = GC.GetTotalMemory(false); GC.EndNoGCRegion(); RecordGarbage(Math.Max(0L, memBefore - GC.GetTotalMemory(true))); RecordDuration(stopwatch.Elapsed.TotalMilliseconds); This was just to get some quick figures for the blog post however (and was sat inside a loop with JIT warmup iterations added as well), and I wouldn't recommend using it to try and profile memory leaks. 
Go for it, any code I post here or on github is free to use for whatever reason with or without meantioning me.
Removed: Plagiarism.
Like what?
I ran the code and it sees the field "ID" but it has nothing in the value, even though I can see the value in the file.
You probably wouldn't depend on the latest shiny new CPU instructions anyway as long as you're not sure 95% of your target audience have it, so I don't think lagging behind is really an entirely new problem that is introduced only by C# / IL. I think the key point would be that there would eventually be away to make use of the new efficient stuff through IL intrinsics with a transparent fallback in place for runtimes where this is not yet supported.
&gt;You probably wouldn't depend on the latest shiny new CPU instructions anyway as long as you're not sure 95% of your target audience have it Depend, not. But if software written in C# can't offer to use the improvements for 'the 90%' already in possession of capable hardware, that's no good. &gt;I don't think lagging behind is really an entirely new problem that is introduced only by C# / IL. This is not an 'entirely new problem', just one that C# specifically doesn't actually need to have in my opinion. The only realistic way of all 'new efficient stuff' actually being accessible from C# eventually is making them provide-able by 3rd party APIs, without having to recompile the whole runtime. SSE4 appeared 10 years ago, there's still no hardware support for POPCNT.
&gt;multiple inheritance Wait, what?
The troll is real.
I can get behind your use case and relate to the situation of having this specific hot path and knowing exactly what machines I'm targeting. But then again, adding this capability would not be exclusive to those few pieces of end user software where this makes sense, but potentially libraries, frameworks and any other C# codebase as well. Code that others are using and binaries that you will have to interact with. And that's kind of the point why I am not really in favor something like this. I don't want every future C# library out there to - potentially - contain native machine code that doesn't port to processor architecture A or B, that may or may not contain hacks that worked in case X but will have consequences in case Y, and so on. The fact that (aside from the occasional DllInvoke) every C# library can be considered to operate within a certain reference frame, is a huge plus. Breaking this for the 0.1% use cases isn't worth it. 
this is exactly the type of info that i was looking for, thank you!! Another thing to note is this was taken with a basic 90$ microscope that i bought on amazon. in the production environment, i could have controlled lighting and a much more consistent atmosphere, as well as taking direct input from CCTV machine vision cameras with nicer lenses and all that. So the image will hopefully be clearer in the real version. I will also look into the Hough transform. What type of hardware do you use? 
Fun, mostly. 
Without running the code, my guess is that it errors on line 92 - foreach (PoliceForce P in Whole.ForceGroup) ... Do you expect the ForceGroup to be initialised somewhere?
Does a language need all of those factors in order to be satisfactory for enterprise? I mean, I use both, but they seem to fit different niches pretty well. 
Do you have more than one project? You need to right click on your Console app project and select: Set as StartUp Project. Also, is your Output type set to Console Application in your project properties?
And the output type is set to console application yes
Ok i set the console application as the startup project and got all my projects to run at startup It works now apart for the fact that the screen vanishes as soon as i enter a input
You have no other points to stop execution. You have a Console.Read(); at the end but it is under an else condition. So if you're meeting the if condition, there's no other point the execution stops. You need another Console.Read(); in the if or just at the very end of the Main method.
This is the best reason I can think of to code.
Console.write(whole) will execute the ToString on the object. You've overridden ToString but it only returns the two property values on PoliceForce. It wont loop through your collections unless you tell it to.
really, there is not even any sound...
So i get the first part But by the second part do you mean that i move the line console.writeline(whole) to PoliceForce and put it after the tostring overide? 
No. Move it later in your Main method. After you add the detectives, stations etc to the collections
So am i adding the detectives, stations etc to the tostring method in PoliceForce then? Sorry for all the questions Im still new to this
Find some tutorials/articles on debugging and learn it as well as you possibly can. It is an absolutely fundamental skill to have. Try not to post questions anywhere seeking help unless you have given it your best shot and are totally stumped. Finding the answer on your own will improve your skills in multiple ways at once. Here is a solid article on debugging that goes over most of the features and how to use them: http://www.codeproject.com/Articles/79508/Mastering-Debugging-in-Visual-Studio-A-Beginn It was written for Visual Studio 2010 but dont let that scare you off, 99% of it still applies.
WTF. That's a word for word copy of my article: http://www.infoq.com/news/2016/04/CSharp-7
Pretty sure most (all?) of the content on the site is plagiarized; had to remove a few postings from there recently.
Yeah, I'd report this post.
¯\\\_(ツ)_/¯ Maybe they just want to run a site/blog, regardless of ad revenue, and can't be bothered to make their own content. EDIT: lol, the article has even copied the HTML/styling output right down to the word wrap locations.
I'm hoping it only gets used for private methods.
Yay for non-plagiarized version. Finally we can discuss something.. As a beginner I struggled for a bit trying to understand how does one return multiple things from method, this looks solid now. ;) 
You can always make a new class for your return type. It's a pain, but it works.
That's what I've done. Another option is to stick them in an array and return that. 
Oh I know. It's messy, not very readable, but it's a bit more efficient is it not? Ultimately, I would likely go for my own class. 
`ConfigureAwait` not mentioned a single time? Really?
The replace keyword seems kind of odd. Is the idea that you would use some tool to analyze your class for things that you should/could replace, ie properties, and then pump out the generated class with the proper replacements?
That's what they showed in the video. I could also see using it to replace crap code created by a code generator (e.g. WCF proxy generator).
Are you for real?
Watch any performance focused session on Channel 9 and their #1 point will be reduce memory allocations. 
OK, so this is not really a C#-question, but a very basic programming question. For three values, the solution by /u/xampl9 is feasible. But for more values it would be insane. I'd recommend introducing a "max" value, right after you introduce sum: int max = int.MinValue; // Not a typo, we initialize it to the smallest possible value. Then after every reading, you should check and update: number1 = ...; if(number1 &gt; max) { max = number1; } // Actually this will always be true, but not for number2, number3, etc... Or, if you know how to do the ternary operator: max = number1 &gt; max ? number1 : max; Finding the smallest value is exactly the same, except you initialize with int.MaxValue and use &lt; in place of &gt;. This is also how you find the max / min value in an array or list or whatever collection you have: int max = int.MinValue; int maxIndex = -1; // Optional, if you need to get the location of the max value too for( int i=0; i &lt; array.Length; i++ ) { if( array[i] &gt; max ) { max = array[i]; maxIndex = i; // Again, optional } } Also, you should probably do the sum the same way, initialize the sum to 0 and after every number write `sum += number1`. Again, your solution is OK for three numbers, but if you have a 300-item array, or if you have to continue reading numbers and summing them up until the user types an "x" or something (which is likely going to be your next homework), this is the only way to go.
Binary literals are so simple yet so useful. I remember trying to write one once and being surprised that C# didn't support it. I'm glad it's being added
Being new is fine, but you can't expect to have everything spoon fed to you. At some point, you just need to go learn the concepts. Use a book, or a pluralsight course if you have access to it, or one of the multitude of free tutorials on Google.
For me, the pain is mostly finding a good name for such class. TallyResult, TallyReturnInformation, TallyCountAndSum,.... uuuchh
Ahhh, nice library! Thanks.
I feel your pain.
Local functions at first sight could seem like a minor supperfluous addition to the language. But I think it will make a big impact in the way c# code is organized. There are a lot of methods living in a class that are helpers of just one method. In cases like this, from a semantic and an organizational perspective a local method may make much more sense.
I've never really been a fan of tupples. It seems like an easy way to make very messy code. If you need a type that can contain different types of data, create a specific dto. 
Thanks 
What would you want on the list? I think C# has evolved to the point now where it's a damn good language and now they're tackling edge cases. I'd be curious to know what you think is missing?
Yes, but with purpose built methods that don't duplicate logic it is very common to have unique return types. What's the value of creating a new type used by one method? This feature is wonderful IMO.
&gt; What would you want on the list? Extension properties.
That might still make it in C#7, the list above is not complete and there's a lot of discussion on GitHub about how to handle this. For now though, they're tackling the [most requested](https://github.com/dotnet/roslyn/issues/2136) features first.
Yes, 0b10 ;) 
Read the link please.
Presumably your calculated stride and/or height doesn't match the actual size of the `imageData`.
Ah ok. So can I be assured that using byte array of the image(imageData) in the database as buffer size parameter is correct? I mean, is there any chance I need to tweak that value and finally pass it as buffer size?
I don't know what the stride of the images in your database is. You could try `imageData.Length / height` and see if that works.
Linq still needs a delegate, so I don't that this will help.
We actually have all the CLR needed to do it too. Now it's just a matter of syntax.
Every async related deadlock I've seen was the direct result of me forgetting to use CA(false). It's our best defense against knuckledraggers that call Task.Result on a UI thread.
It can't be the global default because it steepens the learning curve. But if we could make it the default at the project level I would be overjoyed.
 BitmapImage imageSource = new BitmapImage(); using(MemoryStream ImageStream = new MemoryStream(imageDataFromSqlServer)) { imageSource.BeginInit(); imageSource.StreamSource = memoryStream; imageSource.EndInit(); ImageStream.Close(); } return ImageSource; You may use var instead of explicit typing. 
Indeed, C# 6 (And 5?) didn't require anything from the CLR, it was all about how the syntax looked. More to the point, if F# (Or VB.net) can do it, so can C# with the right syntax. The thing I love about C# is how clean the syntax looks, when compared to other C-like languages....including C.
'bmp' and 'jpg'. It is stored as Varbinary(max) into the database. Also to retrieve the byte array from database, I did the following byte[] imageByteData=(byte[]) reader["image"]; //reader is the data reader and image is column to store images. 
Has anyone tried compiling for red hat? Pretty sure it'll work
Records will also probably help bridge the gap, giving us light-weight syntax for POCOs. 
 int tempInt; List&lt;int&gt; numbersInputted = new List&lt;int&gt;(); while (true) { Console.WriteLine("Enter a number to compare:"); var rawNumber = Console.ReadLine(); if (int.TryParse(rawNumber, out tempInt)) { numbersInputted.Add(tempInt); } else { Console.WriteLine(rawNumber + " is not a valid number"); } Console.WriteLine("Do you want to continue y/n?"); var response = Console.ReadLine(); if (response != "y") break; } if (numbersInputted.Count &gt; 0) { int maxNumber = 0; for (int i = 0; i &lt; numbersInputted.Count(); i++) { if(numbersInputted[i] &gt; maxNumber) maxNumber = numbersInputted[i]; } Console.WriteLine(string.Format("Highest number entered:{0}",maxNumber)); } else Console.WriteLine("No numbers inputted");
You can already do it today though, either through Mono or through .NET Core. Which part is "coming soon"? Or does this mean RedHat will officially support it (ie. you can call them for help with it)? 
LinqKit is the only one I recall off the top of my head, but I believe it's only a set of extensions, not a replacement.
There could be a 'portable' flag for DLLs (a bit like there is 'unsafe' now for projects) that can only be set by some IL validator if for every hardware-specific feature the library also provides a non hardware-specific (likely slower) fallback version. And if all of its dependencies also satisfy this flag. Every remotely popular project would quickly add ways (it's almost always trivial) that let them run on any architecture, just not with the same performance.
That thumbnail image reminds me of a PRK motivational poster for "workers" month.
Aside from type checks, LINQ is already pretty well optimized. I'd be really interested in seeing what more they could come up with.
It's released on April Mop
Yep, Redhat are doing a lot of stuff at the moment to incorporate .net into their platform. So while you've had the option of mono, etc on RHL, now it's getting support and training and so forth. I agree, all the changes recently are pretty cool. The Xamarin acquisition was killer, I've been demanding they do that for years (So yeah clearly all down to me ;) ). I'm taking it all quite slow. There's way too much for me to learn and absorb without getting totally burnt out. I've got a lot of web stuff to get my head around, .net core, asp.net core, Xamarin, Linux generally, Docker, just to name a tiny subset of what I think will become ubiquitous .net tools and services.
Still don't see the point of local functions. Talk about making unit testing harder. I make a point of unit testing all aspects of my code (including internal methods too shock horror) because I'm not a fan of the "only bother to unit test the public facing API because that somehow makes my code better" approach. Seriously, do both sides it's so much better. These local functions are basically impossible to test if they have even a bit of logic in them.
Have you tried creating a bitmap (from system.drawing). I think the problem is with the integrity of the data you are pulling from the database. How is the image converted into a byte array for insert? 
All fixed. Good shout.
EF Core 1.0, you mean Then again article is from December 2015.
&gt; As a C# developer, it's a great time to be alive. Ditto this! I have literally never been so excited about the future of .net before.
Right. I understood the local function implementation to remove the need for doing that with LINQ and lambdas.
Here's a very rough video of it running on Xbox One if anyone's interested. Skip to 1:25 to see it running. https://www.youtube.com/watch?v=Mlu3tzBO-GA
Thanks, I'll consider this one too. In your experience with it have you been able to define symbols as strings greater than one character? E.g. "carrot*stick" in place of "c*s" ?
&gt; trying to catch them all again, huh? HAHAHA Twattery aside, it's a reference to [this](http://blog.codinghorror.com/new-programming-jargon/) (point #2). ----- Anyway, this isn't really a C# question and I imagine this post will be deleted (try /r/cscareerquestions); but if it was me I'd go to your more reasonable manager and tell him about all of this. If he responds positively then great, if negatively (or he doesn't care), line a new job up and then tell your coworker to fuck off. ;) If you were a 50-year-old veteran it would be one thing, but mocking a junior indicates only that your colleague has some serious issues. By the way, don't let him hurt your self-esteem. We all started exactly like you.
That... you lost me. It's sounds like you're describing how to parse a string with threads, which isn't at all what I'm trying to do. My issue is that only one thread can access an object at once, even if it's only reading. Even the method for parsing you described fails, since only one thread would be able to execute at a time because the first thread has to add its data to the index, and then the second thread, and the third, and so on. I need a way for one thread to read an object while another thread is writing to it. There *has* to be a way, since it makes sense computationally. Concurrency issues should arise when two threads are trying to write at once, but there should be nothing stopping multiple threads from reading at once. I've tried various methods with BackgroundWorkers and plain Threads, but they all have the same issue that they cannot read asynchronously.
&gt;I understand the concepts, but I usually run into concurrency issues. Either errors are thrown or every thread executes one at a time because only one thread can read from an array or list at a time. There must be a better way. Most (all?) framework collections are thread-safe for reading, actually. It's concurrent writing that tends to screw things up. I think arrays are also completely thread safe as long as you synchronize the allocation and index incrementation (e.g. `Interlocked.Increment`), although I'm not sure if there could be theoretical issues without memory barriers. There are multiple collections designed for concurrency, see the [System.Collections.Concurrent](https://msdn.microsoft.com/en-us/library/system.collections.concurrent%28v=vs.110%29.aspx) namespace.
Considering I need to iterate over the List and grab specific entries from it, I don't think I can replace it with a queue. Thanks anyway.
Based on what you have written your trying to handle your problem very differently from what I would do. You load your file as a gigantic string I figured that's your biggest performance problem so splitting that task with threads would help. I don't know why you want to read and write to a object at runtime through different threads. I don't really have much experience with that either so maybe try putting your information into separate objects and later combining those? 
&gt; I think arrays are also completely thread safe as long as you synchronize the allocation and index incrementation (e.g. Interlocked.Increment), although I'm not sure if there could be theoretical issues without memory barriers. I'm not quite sure what you meant here, but I'll just add that array 'buckets' are just like any named variable, there's nothing special in them that makes them threadsafe.
That's... exactly what I already do without threading. The point of multithreading is to run the processes concurrently, as opposed to waiting for one to finish.
You don't have to wait for the loading to finish. I might be misunderstanding you, but right now what you do is: File =&gt; List =&gt; Markov And you can't access the list from the Markov-generator while the file is being loaded, which is the problem. However, in the structure I proposed: 1. Loader thread: File =&gt; ConcurrentQueue 2. List filler thread: launches periodically, if the Markov-generator isn't busy, ConcurrentQueue =&gt; List. Runs in parallel with the loader thread, since CQ is thread-safe. 3. Markov-generator, launches every time after the list filler finishes copying the new entries from the queue. List =&gt; Markov. This decouples the non-thread-safe list from the loading, allowing the methods reading from the list to run concurrently with it. The list is only blocked for the short times it takes for the list filler method to copy the new items from the CQ.
&gt; Then how does ConcurrentDictionary manage, being an ordered, indexed list? It doesn't, it's unordered and doesn't have indexes unlike `List&lt;T&gt;` (as in sequential and O(1)). I think it does use locking on some write operations, but due to the nature of hash tables it doesn't have to lock the entire collection. &gt;Going to the trouble of multithreading just to run one thread at a time isn't really worth it. Well, only the collection accesses are 'single-threaded'. But yeah, if those are the bottleneck, it won't help. `SynchronizedCollection&lt;T&gt;` is just a wrapper class that includes lock statements on every access, so it doesn't make a difference in that regard.
There's nothing special about variables that makes them *not* thread-safe (other than generic caching and ordering issues). The point is, *because* arrays are basically just big, dumb variables and don't do any resizing or position tracking like other collections do, there is nothing in the array implementation itself that could be broken by concurrent accesses.
/r/learnprogramming
If you use a single writer it will still be in order, but you don't need to hold a lock over your source collection the whole time. You're basically buffering in front of the source and locking over it every now and then as you flush the buffer.
That's bizarrely unprofessional of him.
A queue is sequential. I'm pretty sure that you're misunderstanding me now. You would have essentially: List&lt;string&gt; tokens; ConcurrentQueue&lt;string&gt; loadedTokens; MarkovChain lastChain; string GenerateSentence() { return lastChain.GenerateSentence(); } void CopyToList() { string token; while(!loadedTokens.IsEmpty &amp;&amp; loadedTokens.TryDequeue(out token)) { tokens.Add(token); } } void GenerateChain() { var tempChain = GenerateChainFromList(tokens); lastChain = tempChain; } void ReadFile() { Action copyAndGenerate = () =&gt; { if(Monitor.TryEnter(tokens)) { CopyToList(); GenerateChain(); Monitor.Exit(tokens); } }; // File-reading boilerplate BS comes here, let's say it reads the file line-by-line and tokenizes the lines into a List&lt;string&gt; called lineTokens. foreach(var token in lineTokens) { loadedTokens.Enqueue(token); } if(loadedTokens.Count &gt;= 100000) { Parallel.Invoke(copyAndGenerate) } // After the file is read Monitor.Enter(tokens); CopyToList(); GenerateChain(); Monitor.Exit(tokens); } ReadFile would run on one thread, pushing the tokens into the ConcurrentQueue. It would launch a CopyToList() followed by a GenerateChain() upon every hundred thousand tokens loaded. However, since the action is surrounded by a lock on the tokens list, only one of that thread would run at a time. It's a TryEnter, so the lock is non-blocking: the CopyToList() - GenerateChain() pair won't run if another copyAndGenerate is already running. The last one (after the file is read), however, is blocking because the main thread will then wait for the last copyAndGenerate to finish (if it has to) before launching those actions. I'm going by the assumption here that the chain generation is faster than the loading (though it's not necessary, it can be slower here) and that the chain generation only reads the tokens list and doesn't modify it.
The certificates that mean the most (in so far as any such thing means something) are the [Microsoft Certified Professional](https://www.microsoft.com/en-us/learning/microsoft-certified-professional.aspx) ones. I've not taken any of these exams, since I've been in development for long enough that adding a few certs to my resume would mean relatively nothing. But they are a good way to set goals for yourself and get a feel for the kinds of information you'll need. They aren't the totality of what development in C# is about; they are mostly useful with a pretty standard set of "things no one uses" and "completely misses some obvious things" that all certificate programs have. To be clear, they are not necessary to get a "full-time job", but if you have no programming employment history, they can be useful in showing the interviewer that you have been learning. Plus there are some cases where smaller companies need X number of MCPs to qualify for various levels in the Microsoft partner program. So that can make you a bit more desirable to them.
&gt; Okay so your sequence is : &gt; Read String, &gt; Load-token-index, &gt; and generate sentences, No. My sequence is - Load-tokenize-index-chain - generate sentences &gt;Does last step need to recheck and adjust each object when a new object is added from the previous step? No. At any time in the loading process, the load-tokenize-index-chain method can be exited and a sentence generated. This is why I'm positive there must be *some way* to push the method off to a second thread and let the main thread generate sentences while the loader thread keeps executing. &gt;Try having the first step in separate thread output to temp files and the main thread event subscribed to FileSystemWatcher.Created which then can create a new thread for step 2 returning a custom object with your information to a list in that Main thread from there you can recheck the entire list? You lost me. Are you saying to - Load-Tokenize-Index-Chain - Serialize the chain to a file - Have the main thread deserialize from that file? That sounds really, really inefficient. C# makes everything easier, but it makes multithreading a lot more complicated than in C or C++.
That's an Oracle SQL error. Connect to your database directly and run the SQL there, filling in any parameters to make sure the query is correct. http://www.techonthenet.com/oracle/errors/ora00936.php
Thank you very much for your reply, I will try your second method first being the easiest, but I can see your first method being strongest :) Thanks again for your input, it was very helpful! EDIT: I can't believe this works: ConsoleKeyInfo KeyInput = Console.ReadKey(); switch (KeyInput.Key) { case ConsoleKey.Escape: StartHome(); break; case ConsoleKey.Backspace: StartMenu(); break; default: break; } string Input = Console.ReadLine(); And it will read the first character in ReadLine() if it is not either cases. EDIT2: Was a little too quick on trigger. Somehow I thought it registered the first character, which it does not :) Second method is also a no-go, so I'm gonna have to go with first to make this work I think :)
Sure you can use if statements an for three numbers it might be good enough. If you can do it with ifs you might want to make the input more configurable (like using 5 instead of 3). Then using a list or an array comes in hand. There is also the LINQ class that has exntesion methods like Max() or Average() which might help you. Here an example: using System; using System.Linq; public class Program { public static void Main() { var numberCount = 3; var numbers = new System.Collections.Generic.List&lt;int&gt;(); for(int i=0;i&lt;numberCount; i++) { Console.WriteLine("Enter value: "); int newNumber = Convert.ToInt32(Console.ReadLine()); numbers.Add(newNumber); } int theHighestNumber = numbers.Max(); Console.WriteLine("Max value is: "+ theHighestNumber); Console.WriteLine("Average value is: "+ numbers.Average()); } }
Whenever I hear the KISS mantra, I think of things like this. The only way a simple thing remains simple in a real world applications is because someone somewhere put a great deal of time and effort into making sure every last eventuality has been accounted for before handing off their code to someone else. Thanks for sharing, OP, and hats off to the C# team for going back and improving this.
What are you missing from C/C++? People here have given you a very viable answer (namely to buffer the loader infront of the reader collection).
It's about a 20% perf hit on average, and in some cases can be tremendously slower. But there are plenty of industries where fast development can generate more revenue than fast running code, so as always, know your environment and plan accordingly.
Are you comparing LINQ to for loops or LINQ to the unknown improved LINQ?
So you remove the users ability to delete a character in the console by changing the functionality of the backspace key, what happens if they make a mistake when they're typing out the string?
Depends on how stupid you are with your loops. Lets say you have a `List&lt;int&gt;`. This is the fastest: foreach ( var x in list) if (x &gt; 10) total += x; And this is the slowest: var enumerable = (IEnumerable&lt;int&gt;)list; foreach ( var x in enumerable) if (x &gt; 10) total += x; These two are actually faster than the second foreach loop foreach ( var x in list.Where ( y =&gt; y &gt; 10) total += x; foreach ( var x in enumerable.Where ( y =&gt; y &gt; 10) total += x; While LINQ can have a hit, it's nothing compared to enumerating over an `IEnumerable&lt;T&gt;`. In my tests, that accounts for a 72% performance hit. Fortunately, LINQ recognizes that you are passing it a `List&lt;T&gt;` and uses a special code path that eliminates the call to `IEnumerable&lt;T&gt;.GetEnumerator`. 
&gt; I'm going by the assumption here that the chain generation is faster than the loading It's considerably slower, in fact. O^2, in fact. Unfortunately, you're ignoring the indexing part. This isn't how a Markov chain works at all. For the last fucking time, I appreciate the help but Markov chains don't work this way. I cannot multithread the load-tokenize-index-chain process. All I want is to move the loading/chaining method to a second thread, where it fills and modifies a List&lt;MarkovWord&gt; which the maint hread can still read. This is simple in C. I don't understand why C# threading is so fucking complicated.
I don't know about that. If you aren't performing your reads inside a lock, having a null swapped in is just one of many ways that your code is broken.
Yeah it's probably best to find another way, generally you shouldn't edit the functionality of keys whose purpose is engrained in a users' mind. It'd be like trying to make the Enter key delete characters, or change the functionality of Escape to make it a modifier key. Users will get confused and it will severely affect the usability of your program.
The second one wouldn't even work, your x would be an object, so either you meant IEnumerable&lt;int&gt; (in which case it should be as fast as the first one) or you'd need to cast object to int twice, which would be the reason for the slowness. In the last 2, the extra unnecessary memory allocations would be the real problem. And if you really need speed (without emitting your own IL), using a straight for loop would be even slightly faster..
You'll need to have a web server running on your local network. Then publish your project to that web server. It'll need to be an IIS (Internet Information Server, which is part of Windows Server). I know that is not an ELI5 answer, it glosses over a lot of steps, but having a server to publish to is the first step. If you aren't comfortable setting up a server then you may want to consider setting your site up on some managed hosting service. That will let you access your site from your local network as well as from anywhere else on the internet.
It was a typo, that should have read `(IEnumerable&lt;int&gt;)list`. *** &gt; In the last 2, the extra unnecessary memory allocations would be the real problem. Not really. The real pain point is making virtual calls through the `IEnumerator&lt;T&gt;` interface. When you use a for-each loop over a `List&lt;T&gt;`, it doesn't use `IEnumerator&lt;T&gt;`. Instead you get a struct that just looks like an `IEnumerator&lt;int&gt;`. Since you are working directly against the struct, you can make non-virtual calls, which in turn are probably just going to be inlined by the JIT compiler.
&gt; What about this approach do you think will not work for you? The fact that it has nothing to do with what I asked or what I'm trying to do. Let's go over it again. I'll explain the entire program for you. I have a method, BuildDictionary, which does the following: 1. Reads a specified text file until it hits a terminating punctuation character or end of file, to get a sentence. 2. Passes the sentence to Tokenize which turns it into an array of strings with certain sanitation (whitespace characters removed, etc.) so each array entry is just a word. 3. The array of words is then sent to the indexer, which checks each word to see if it has been indexed before. If it hasn't been indexed before, add it to the index (a List&lt;MarkovWord&gt;). Either way, the word after that word is then checked as well, and that sequences is noted in the prior word's index entry (MarkovWord.List&lt;KeyValuePair&lt;int, float&gt;&gt;) with a calculated frequency. &gt;There is nothing in C# that prescribes this. Awesome. I'd love to see an example of accessing a List via pointers so I can duck concurrency violation errors.
OK, I guess I understand the problem now. Just another question before I either annoy you with another suggestion or give up: does that List&lt;MarkovWord&gt; *have* to be a list? 
I have no clue what kind of "concurrency violations" you're talking about. Something like that does not exist for arrays to the best of my knowledge. 
Then you should just use ConcurrentDictionary. Indexed and thread-safe. 
I'll have to rewrite the failed threading code after work. Here's something related, though. Working on [this program](https://github.com/StevenGann/GenePainter/blob/master/GenePainter/GeneticBitmap.cs), I ran into an issue around line 290. No matter what i tried, there was no way to let multiple Threads read a single Bitmap. I tried converting the Bitmap to an array, but that didn't work either. What I ended up having to do is make 8 separate deep copies, one for each thread.
I'll probably have too. Appending is going to be a bitch, though.
Thanks anyway. I wish I knew better how to explain what I'm trying to do. I have two algorithms, one that generates data and one that only looks at it. I want to look at the data while it is still being generated. Why can't a thread somehow declare that it's only going to read an object, not change it?
&gt; A linked list I can access unsafely via pointers without having to give a shit about concurrency. Well a linked list is ridiculously easy to build yourself, you could knock out a basic one in C# in less than 5 minutes. There is [a built-in LinkedList](https://msdn.microsoft.com/en-us/library/he2s3bh7%28v=vs.110%29.aspx) too. &gt; The chances of reading a byte that is being written to absurdly small. That is not the only concern with badly-implemented lock-free concurrency. The compiler is allowed to optimise all code, unless explicitly indicated otherwise, for the single-threaded case (and that includes completely removing writes if it looks like it's never used on the same thread). Before you complain, C# is far more forgiving than C and C++ in this respect. Additionally, the CPU itself may reorder instructions in the absence of proper locking, regardless of the language used. It's up to you if you're happy to take that risk but the reason you are frustrated perhaps with C# is that it's saving you from yourself. Anyway, if you want to continue down this path, I would write a super-simple linked list implementation. All you need is a `Node` struct and a `Node* next;` inside it and you're halfway there. Then you have full control. Edit: Edited to make it a struct with a pointer
Yeah, `Bitmap` is an entirely different beast as it's a GDI+ object which doesn't support multithreading. Interacting with GDI+ in C would have the same problem. The way to go there would be using `LockBits` yourself and interacting with the buffer in multiple threads, which is easy enough for `Get/SetPixel` at least and a *lot* faster anyway.
Ah ok, this does make a lot of sense. So they're just literally dropping the .EDMX part of the equation. Still a bit confused how they're going to implement it then, since with .EDMX, you still have code generated from the T4 templates?
&gt;You're one of those "your method is bigger than 25 lines!!!!!! Refactor it now!!!!!" People. This "rule" is complete bullshit. If your method needs 40 lines then it needs 40 lines. If your class needs 3000 lines, then it needs 3000 lines. This is what the code looks like for my company, and I wish it didn't. It's hard to understand, hard to maintain, does more than one thing, and is not very flexible. Smaller is always better. Instead of a rigid function of 40 lines, separate it out into a few more functions. Give those functions reasonable names that behave exactly as you'd expect. Inner functions will help to improve the organization of the class. Following these rules will help the business by saving time when maintaining, adding new features, and training new people.
&gt; Well a linked list is ridiculously easy to build yourself, you could knock out a basic one in C# in less than 5 minutes. There is a built-in LinkedList too. That's great. Still can't access it unsafely, though. &gt;It's up to you if you're happy to take that risk but the reason you are frustrated perhaps with C# is that it's saving you from yourself. Yes. Looking at data that's still being written is *so dangerous.* &gt;I would write a super-simple linked list implementation. Still can't access it while it's being written.
I think I understand better now. And when you do iterate over the items, what will you be doing with them? Is that your "markov generator" thread or another data processor (like indexing)?
&gt; That's great. Still can't access it unsafely, though. You can, if you pin the reference on the heap. But it's pointless. &gt; Yes. Looking at data that's still being written is so dangerous. You don't seem to really understand the problems that can arise from unsafe multithreading. But I'm way too tired to argue with someone who is intent on bashing C# and being sarcastic, so I'll just leave this here: http://preshing.com/20120625/memory-ordering-at-compile-time/ It's about C++ but almost 100% of it applies in C# too. &gt; Still can't access it while it's being written. There's nothing in C# that stops you from forcing your way through if you want. That's why I gave you an example with a pointer. You could write it identically to C, using pointers and structs. Neither the compiler nor the runtime will stop you. 
OK, the actual problem seems to be that you're trying to implement Markov Chains directly from Wikipedia, without consideration to the properties and features of C#. I don't know your C# level, so I'll just write this with the assumption of basic-level C# knowledge. Here's how I would do it: * C# has two data type categories, value and reference. If you defined MarkovWord as a class (and not a struct), it's a reference type, meaning that it will be handled as a pointer. * Also, storing the transition probabilities as floats is unnecessary, especially in this case. The KJB has 783,137 words. You can just store the transition counts directly as integers. * Thus the MarkovWord class would contain the following: * The word itself as a string, * A Dictionary&lt;MarkovWord, int&gt; for the transition counts, * An integer for the sum of transition counts from this specific word. * The loader / tokenizer / indexer would need a Dictionary&lt;string, MarkovWord&gt; to find the associated Markov Words for every word. This doesn't need to be thread-safe, and it can be disposed after the loading is finished. * When the loader updates the transitions of a word, it should have exclusive lock on the word's transition count dictionary. This can be done easier than the code I wrote above, with the lock language feature: `lock(transitionCounts) { /* Do the update, then increment the transitionSum */}` * I assume you're using some randomness in picking the next word. Instead of using a random float between 0 and 1, you can easily generate a random int between 0 and transitionSum, check the C# reference for Random. * The generator should also acquire a lock on the dictionary when reading the next word, with the same structure. Make sure to exit the lock before moving on to the next word. I'm not sure that you'll need to multithread it, as the Dictionary class in C# is essentially a hashmap. I think that it will be considerably faster.
`int` is a value type, not a reference type. Each time a value type is assigned, an entirely independent copy is created. Now, if the `UniqueNumber`property *was* a reference type, that still would only mean that changes to properties of the referenced object itself affect all references to it, but not replacing the referenced instance with another instance. For example: object1.UniqueObject = new SomeObject(); object2.CoolObject = object1.UniqueObject; object1.UniqueObject.SomeProperty = 123; Debug.Assert(object1.UniqueObject.SomeProperty == object2.CoolObject.SomeProperty); // works, because they're both references to the same instance object1.UniqueObject = new SomeObject(); object1.UniqueObject.SomeProperty = 456; Debug.Assert(object1.UniqueObject.SomeProperty == object2.CoolObject.SomeProperty); // fails, because object2.CoolObject still references the first instance If you need those semantics, you should look into making your objects (as in `object1`, `object`2) a [`DependencyObject`](https://msdn.microsoft.com/en-us/library/cc221408%28v=vs.95%29.aspx) and make the properties (`object1.UniqueObject` etc.) a `DependencyProperty`. Then you can create a data binding between `object1.UniqueObject` and `object2.CoolObject` which will automatically be kept up to date. &gt;does something like [GetAllReferences()] exist No, this is not possible with reflection. If you really need something like that, you need to maintain a list of all instances somewhere. But generally this is a sign that you should rethink your class design. 
I wish.
I took this course prior to starting my job as a junior dev. My only experience was with java prior to my job and this was a great starter for me. [edX.org - Programming with C#](https://www.edx.org/course/programming-c-microsoft-dev204x-2#!) You can do it for free or pay to get a verified certificate. No idea how much weight that holds, maybe someone else more familiar with it can expand on it. But the course itself was excellent for a lot of basics with C#.
That's because in ASP.NET MVC the C# code runs strictly on the server, with the end goal of delivering content to the user, usually in the form of HTML and script. If your user is viewing a page you served up, can you not simply provide a hyperlink to the file? You could have the server download it, then send it down to the client as data or a FileResult but that seems unnecessary.
hmm, A not B... what are you trying to do?
Instead of changing the value multiple times or using some other complicated method just make another class that has just that number and make it a notifiyproperty change class. Then pass that class to all of these different classes that are using the same number. Now you actually have a reference type that you only have to update once for it to update everywhere you were wanting to use it.
These articles are horribly written, it's impossible for me to read through them
Providing hyperlinks wouldn't work for my app as it'll be iterating through a large list of links and the whole point of the app is convenience, so having someone click multiple links isn't feasible and kind of goes against the whole purpose of the app. Having the server download the files first would drain my servers bandwidth. Though I found exactly what I was looking for here http://stackoverflow.com/questions/5596747/download-stream-file-from-url-asp-net posted by Dallas.
[removed]
I just signed up today. Haven't started it yet as I have some previous commitments for a few weeks. When are you going to start?
It's just convention. Delegates are stored by reference.
It is to prevent this from happening: if (SomeEvent != null) { //hi, I'm another thread and I'm going to set SomeEvent to null SomeEvent(this, EventArgs.Empty);; }
The fact that I find myself needing to await and ConfigureAsync(false) on every function method me think I dont understand async await properly. Basically, none of those async methods should run before the other. So they should be running in those explicit orders. But here's the thing, I need to make them async because they all use HttpClient.GetAsync, which needs to be awaited. Can someone explain to me how this can be improved, and why?
There seems to be lots of heated discussion about use of ConfigureAwait ([link1](http://stackoverflow.com/questions/13489065/best-practice-to-call-configureawait-for-all-server-side-code), [link2](http://stackoverflow.com/questions/14906092/what-are-the-differences-between-using-configureawaitfalse-and-task-run)). I personally am on the side that it should not be used. The idea of it preventing deadlocks doesn't make sense if you use await properly. The deadlock as presented [here](https://msdn.microsoft.com/en-us/magazine/jj991977.aspx), has problem in calling Wait() on the Task instead of await. Using ConfigureAwait(false) is incorrect fix in incorrect place. The idea of it being more performant again doesn't make much sense. If you have some code you don't need to run on UI thread, then use Task.Run the code. This will make it run on ThreadPool and the synchronization context will not be an UI one.
Thank you so much for your help. I was thinking of writing a SaveAsync() and FirstOrDefaultAsync() but honestly I did not see a point of writing an async method if I'm going to await it all anyway? I guess what I'm asking for is, is there a situation where I call an async method without an await? // perhaps something like this Task&lt;HttpResponseMessage&gt; task1 = client.GetAsync('/getData1'); Task&lt;HttpResponseMessage&gt; task2 = client.GetAsync('/getData2'); Then later on : var response = await task1.ConfigureAwait(false); if(response.IsSuccessStatusCode) { data1 = await response.Content.ReadAsAsync&lt;model&gt;(); }
&gt; I was thinking of writing a SaveAsync() and FirstOrDefaultAsync() but honestly I did not see a point of writing an async method if I'm going to await it all anyway? The difference is that `FirstOrDefault()` is a **blocking synchronous** operation, while `FirstOrDefaultAsync()` is an **non-blocking asynchronous** operation. Let's assume there is a database call behind this operation. This can take a while to finish, usually ~100ms. With the synchronous operation the currently executing thread **can't do anything**. It's blocked by the request, it's waiting for the request to finish. It's useless. With the asynchronous operation the thread is returned to the task scheduler to meanwhile work on other tasks. It can **continue to work** while the request is pending. Once the asynchronous request is finished, it will inform the task scheduler and the method is scheduled to continue (that's what await does). The thread is free to continue working while you wait for the database request to finish.
It depends on how well you like your meat done (as Scott Hanselmanwould say) :)
He wrote: &gt; Basically, none of those async methods should run before the other. So they should be running in those explicit orders. 
Pluralsight offers a free 10 day trial, so if anyone is interested in watching this, or any other courses I can really recommend taking advantage of that.
Gotcha :)
It's more like a chat room than a study group. Send me your email.
Removed: Rule 8.
That's an interesting idea. The reason we took this approach was to stay separate from the target project itself (it is hardcoded for now, though). This way we'll be able to reuse Routage to find routes in other MVC and Core projects too. 
Thanks, we hope this approach will lead to cleaner implementations of event-sourcing in our services.
Since he's just mentioning "ASP.NET" and nothing more specific, it **should** be just using IIS handler, and not something more framework related.
Console. WriteLine looks fishy in an headless programm. If I remember correctly, applications started via Task, by default don't have a desktop session. 
That's actually not true, especially if you are someone who likes to learn through video content. Pluralsight is well known and provides a really good product, it also has a pretty decent subscriber base. So while the target audience is somewhat limited, it's great that OP is sharing his content the best way he can.
While I don't think that is the problem here, I do agree that it would be better to change that to an info or debug-level log message. 
Does the exe have admin access ? Right click on the exe and properies
You might want to check if the ContinueWith(). It should allow you to chain the async calls and not have so many awaits. https://msdn.microsoft.com/en-us/library/dd321405(v=vs.110).aspx
The credit for the model whereby a logical aggregate is separated into a command-handling class and a state-mutating class goes to Manuel Felicio with his NDomain project (https://github.com/mfelicio/NDomain). I think it provides a clean segregation of responsibilities. 
 private void btnShow_Click(object sender, EventArgs e) { con.Open(); OleDbDataAdapter oda = new OleDbDataAdapter("SELECT * FROM INVENTORY WHERE LOCATION = '@search'", con); oda.SelectCommand.Parameters.AddWithValue("@search", txtPosition.Text); dataSet1.Clear(); oda.Fill(dataSet1); con.Close(); }
Unfortunately, as I said in my comment, I was mainly working on the implementation of the feature, not the design. I then don't want to put words in the mouths of the designers. [Here is the original proposal](https://github.com/dotnet/roslyn/issues/259) of local functions, and [here is a design document](https://github.com/dotnet/roslyn/issues/2930) with a high-level overview of motivations/features. [This document also describes it some more](https://github.com/dotnet/roslyn/blob/future/docs/features/local-functions.md). There's lots more github issues scattered around the repo describing them, too (just search for them), but those are the main ones.
where can I see that?
Which is worse, because then you also have to check for the result of the task each time. `await` is the clean approach. It will unwrap any exception that potentially happened on the task, so you can properly catch it (or let it bubble up).
In this case, we'll need the assembly itself to be a reference so that it can be passed into `GetAssembly` right? That does cause binding. Our current use case: On update of the `master` branch of a particular repo, that repo is pulled into a location which Routage looks inside. This allows for Routage to be constantly updated without us intervening 
Thanks for the input - despite hundreds of hours, I just cannot seem to get a grip on programming. Everything seems like "Here is how to do an "if" loop. Now calculate the circumference of the sun". I have no idea how to use a debugger.... At any rate, I did get an error saying that "files" was null when I tried to drag like 90 files over - is there some limit on string array sizes? Why would it freak out and be null?
Use FileStream with StreamReader. It internally buffers the file contents while loading, which should result in significant performance gains over what you're doing now. Took like five seconds to Google. It allows you to asynchronously read line-by-line (with StreamReader.ReadLineAsync()). Also, you should rethink how you respond to people who are trying to help you. Even if their advice isn't helpful, responding sarcastically and hatefully is a great way to get told to fuck off without help.
Not helpful for your original comment, but keep your chin up regarding your grip on programming. It happens to everyone. http://www.learnitfirst.com/images/books/Gartner_Hype_Cycle.png
You can do it after your repo is built by loading the assembly from the dll at runtime: Assembly assembly = Assembly.LoadFrom("MyAssembly.dll"); Then you can examine all the types (controllers) and methods (actions). 
Are you sure you need `ConfigureAwait(false)` internally? I thought it was only necessary on the top level of your api. I've been following this project: https://github.com/roji/AsyncRewriter for a measure of guidance on how to implement `async`. The basic idea is to write everything synchronously and use `partial` classes and a `RewriteAsync` attribute from somewhere in your source, then let the tool utilize Roslyn to generate the code necessary for `async` support: 1. reference the project https://github.com/npgsql/npgsql/blob/develop/src/Npgsql/packages.config and configure prebuild task for it (the project compiles as a msbuild task) 2. add `RewriteAsyncAttribute` https://github.com/npgsql/npgsql/blob/develop/src/Npgsql/AsyncRewriterHelpers.cs 3. make your async providing class partial: https://github.com/npgsql/npgsql/blob/b218da583ca4c6be14d913a0590ab079b93d54cf/src/Npgsql/NpgsqlDataReader.cs#L48 4. use the `[RewriteAsync]` attribute on every method you wish to provide an `async` version for: https://github.com/npgsql/npgsql/blob/b218da583ca4c6be14d913a0590ab079b93d54cf/src/Npgsql/NpgsqlDataReader.cs#L129 (there might be a bit of magic I am forgetting; I don't have any dnx based projects yet and no code that uses a recent version of this library to share) The main advantage of writing this way is that you offload the knowledge requirements of writing an `async` codebase onto a tool. Your tests can be written against non-async versions (if you are writing a library you should be providing both). nuget here https://www.nuget.org/packages/AsyncRewriter/
Ah. You're right. Fair enough. Appreciate your thoughts. Gives me a new angle to think about
if you don't mind the calls to HttpClient.GetAsync to be fully blocking, you can just call .Wait() on the task the method returns. this will prevent you from having to make all of your methods async: https://msdn.microsoft.com/en-us/library/dd235635%28v=vs.110%29.aspx
Yeah I tried the query in the SQL Developer while connected to the schema that the data lives in and it returned the results that I was expecting. But I just tried to put it into a datagridview in Microsoft form in visual studio and nothing gets put into the datagrid. When I try 'Select * from INVENTORY' it returns the entire table, as it should, however when I try 'Select * from INVENTORY where LOCATION = 320' it does not return anything, and I know that there should be at least one entry that has location = 320. 
Multi threading and asynchronous operations are NOT the same concepts. - 'Task.Run' executes some code on a different thread. - A truly (pure) async method, doesn't use a (different) thread at all. Understanding the difference is really important in understanding Tasks, multi-threading and asynchronous methods. This is a really good read on the subject, which helped me a lot: http://blog.stephencleary.com/2013/11/there-is-no-thread.html
The OleDbDataAdapter is kind of peculiar when it comes to parameterized queries IIRC. It doesn't use @'s but uses ?'s without names and depends on the order of adding the params to map which ? maps to what. So your query would be like: OleDbDataAdapter oda = new OleDbDataAdapter("SELECT * FROM INVENTORY WHERE LOCATION = ?", con); The you assign the value like you always do: oda.SelectCommand.Parameters.AddWithValue("search", txtPosition.Text); Just know that the parameter name is pretty much meaningless.
Yeah, stick with it! All of us started somewhere. What framework are you using? Windows forms? Wpf?
Highlights * No `using` statements (outside of transactions) * Classes are not mapped one-to-one with tables, performs gets and updates directly from your view-models * Single-line upserts (`var key = DataSource.Upsert( tableName, viewMode).AsInt32().Execute;`) * Automatically handles soft deletes * Automatically handles created by/updated by columns * SQL Dependency support * Faster than EF (and in some cases Dapper) * Only update changed properties when implementing `IPropertyChangeTracking` 
Yeah, like others said: you're not doing it wrong. I use [this](https://github.com/distantcam/ConfigureAwait) Fody Addin to scratch that itch I get looking at code like that.
Never used c# before but why do min1price and min2price have random arbitrary initial values?
I just put them to a way higher number than the actual prices to make it easier to fing the lowest ones
You should use an IDE you will see the problem for something like this much faster. It was the New.Add(Fridge[min2Index]) there is no such list as Fridge. These should have lower case names by the way. 
Yea, that was the problem, a stupid one to say the least but huge thanks for spotting it out! Couldnt find whats wrong for a pretty long time... And I'm new to programming so don't know much about linq but seems a lot more comfortable then all the mess I wrote here :D Thansk again tho 
Yup, so there's a very good reasons for using the generic like this. By using the `T`, users of the interface can be _guaranteed_ to get a `T` and not some incompatible type that implements `IAggregateRoot`. Consider this: public class Dog : IAggregateRoot { } public class Cat : IAggregateRoot { } public class DogRepository : IRepository&lt;Dog&gt; { public Dog Find(object id) { ... } public bool Save(Dog item) { ... } } DogRepository dogRepository = new DogRepository(); Dog dog = new Dog(); dogRepository.Save(dog); //works Dog foundDog = dogRepository.Find(someID); //works Cat cat = new Cat(); dogRepository.Save(cat); //compiler error Cat foundCat = dogRepository.Find(someID); //compiler error So with the `T` strong typing, we can't use cats in our `DogRepository`; that would be madness. But if we didn't use the generic `T` constraint and instead just used `IAggregateRoot` instead: public interface IRepository { IAggregateRoot Find (object id); bool Save (IAggregateRoot item); } public class Dog : IAggregateRoot { } public class Cat : IAggregateRoot { } public class DogRepository : IRepository&lt;IAggregateRoot&gt; { public IAggregateRoot Find(object id) { ... } public bool Save(IAggregateRoot item) { ... } } DogRepository dogRepository = new DogRepository(); Dog dog = new Dog(); dogRepository.Save(dog); //works Dog foundDog = (Dog)dogRepository.Find(someID); //works, but requires casting Cat cat = new Cat(); dogRepository.Save(cat); //works! But should it? We just added a cat to a DogRepository! Cat foundCat = (Cat)dogRepository.Find(someID); //works, but trying to cast it might cause errors if there are only dogs in there! Point is, the `T` generic can bring some compile-time type safety, whereas just requiring an `IAggregateRoot` would require enforcement, casting, and potentially failure at runtime.
Thanks :) Yes it is winforms. (It seemed easier to learn when I started, though if I could do-over I would use WPF. Sadly I'm up to 6.5K lines of code lolololol)
I was translating from my native language so missed a "1" there. 
Thanks for the advices dude. By that line I meant that I was here cause it didn't excecute properly, cause I wouldnt if it went alright. Sorry for not giving more information on what went wrong since I had no idea actually.The priblem apparently was writing "&gt;" instead of "&lt;" at one point so yea... I guess I shouldnt have run into this problem after all but as I did I got some advices on how I should have actually done all of this easier way and advices you gave me here , so I guess it was more beneficial for me to make this mistake than not to afterall :D Jokes aside, thanks to you and all the guys here for the help. BTW: I was translating the variables and stuff from my native language and that's a small part of the program it's from so there's already "Fridges" there. (The Cheapest would be a lot better I agree but in my native language (again) it sounds better the other way around). Anyways, thanks again and have a great day :)
In this case, the `where` clause isn't strictly necessary. You could just have: `public interface IRepository&lt;T&gt;` But including the `where T:IAggregateRoot` forces consumers to provide `T`s that implement `IAggregateRoot` and in turn expose `IAggregateRoot` methods/properties for use regardless of what concrete `T` they actually are.
You should do: routeTemplate: "api/{controller}/{id}", So the name of your controller maps to that pattern. Add defaults: new { id = RouteParameter.Optional } To make {id} optional. Call your controller something meaningful like SummonersController (The word Controller is ignored automatically when the router looks for {controller}) And you dont need [HttpGet] if you have Get on the name of your handler (**Get**Summoners) because it automagically checks for Get/Post/Put/Delete. Assuming you clean that up you will have a route of api/Summoners/1 which still isnt RESTful but its a start for you. Apparently, **GetAll**Summoners would map to route api/Summoners/ for you. I havent used the newer WebAPI versions. [Now go read proper tutorials on how routing works.](http://www.asp.net/web-api/overview/web-api-routing-and-actions) theres something called attribute based routing that will let you not worry about the route config and just define routes on controllers directly. This might be simpler for you.
The controller is already named SummonerController, and I changed the routeTemplate. I will look into attribute based routing now, thanks! I just started working with ASP.NET yesterday (not C# however), so this is all new to me.
In that case I cant recommend the http://www.asp.net/ tutorials enough.
Behind the new syntax is just a normal type along the lines of `struct ValueTuple&lt;T1, T2&gt; { public T1 Item1 {get; set;} public T2 Item2 {get; set; } }`. However, it seems I was mistaken in another aspect. I was thinking of just doing this &lt;s:ValueTuple x:TypeArguments="x:Int32, x:String" Item1="123" Item2="abc" /&gt; but apparently `x:TypeArguments` is still unusable in WPF, so creating a generic object in markup isn't possible. Could still write a markup extension for a syntax like `{ValueTuple x:Int32, 123, x:String, abc}`, though.
On the Exchange server, is your process running under a domain or local account and have you checked whether that account has UAC enabled or disabled?
Do you have Web API help installed? If not, get it from Nuget. Then you can go to /help to see all of your controllers with the URLs that ASP is expecting. This is my #1 tool for testing routes.
I fixed the issue thankfully with /u/Lord_Zero's help. Thanks for the reply though!
Thanks for the help. So how are you propagating changes from the model up through to the fields or properties in the ObjectViewModel in this case? Are the fields in the ViewModel just references back to the model? Who is calling INotifyPropertyChanged? 
You could use WPF.. 
I have dealt with this before. Here is a Stack Overflow that deals with this (http://stackoverflow.com/questions/8852768/listbox-showing-namespace-accounts-instead-of-actual-text). Essentially you need to provide a template type because all it is doing is showing you the .ToString() of your custom class which you didn't (and probably shouldn't) override.
Thanks! I will try it tomorrow morning. Little bit embarrassed that I couldn't find the Solution myself, but I had now idea how to phrase the search. edit: Couldn't wait. It works! Thanks a lot. That has cost me more than three hours.
Cool, stand corrected. cheers.
It constrains the types that T can be.
Are you looking to be a PR guys for them?
The use of .ConfigureAwait takes away all control of threading from client code. Our application goes through great effort to create our own custom schedulers which manage a thread pool and executes tasks based on a priority system that we control. All of our background work is running on a scheduler of our choosing with a priority relative to everything else and a thread pool that we manage. Every is great until we call some library method that thinks it knows better and does a .ConfigureAwait(false). All of the sudden we are running code on the default thread pool without any control over priorities or number of threads. I don't think that a library function should ever make such a big decision as to what Scheduler / SynchronizationContext / Thread Pool to use. If a client wants to run a task on a different Scheduler / SynchronizationContext it should do that itself.
NHibernate.
Ok, I'll work on it tonight. In the mean time, here is an example repository: https://github.com/docevaad/Chain/blob/master/Tortuga.Chain/Tests.Tortuga.Chain.SqlServer.Comparison.source/EmployeeRepositoryChainCompiled.cs
Also, be aware that the syntax you posted: `public interface IRepository&lt;IAggregateRoot&gt; {}` Probably doesn't do what you were thinking it does. That declares a new type `IAggregateRoot` which is equivalent to the `T` used earlier, it just happens to have the same name as the `IAggregateRoot` _interface_. That is, `public interface IRepository&lt;IAggregateRoot&gt; {}` is functionally the same as: `public interface IRepository&lt;T&gt; {}` is functionally the same as: `public interface IRepository&lt;JustSomeOtherName&gt; {}`
Do the upserts use a key or select to determine insert or update?
I assume the compile() intelligently caches it self that it's not recompiling each run, correct?
Thank you all for your insightful replies. You have certainly helped. I've up voted all of you. 
Is this a homework problem? This is all trivial linq List.where (...).orderby (price).take (2) Maybe list.union (list2).where.... if both lists are combined 
Why post this using multiple parameters at all? Just send the list as a csv
By default it automatically detects the primary key(s) on your table and generates the correct SQL for the database. (Merge for SQL Server, On Conflict for SQLite.) You can put Key attributes on your models if your table doesn't have a primary key or you want to use an alternate key. 
You should not be running one single thing on a server that has Exchange except for Exchange itself. 
P.S. I'll update the readme to use app.config.
If you're really serious about this project make sure you research Dapper and JIL for how to do reflection performantly since it's an important component to this project. I use reflection alot in my code but generally limited to once at initialization and not for individual requests
&gt; That's rather overly verbose. Just make the standard initialization expect connection name. I'll see what I can do. &gt; Don't do the EF nonsense where it uses the first one if you don't specify. Really? That's what it is doing? Ugh. 
This might be a better fit for /r/programming since it is a Scala project (yes, I realize that you could still generate C# code.) For a .NET-centric solution, try T4 templates.
Pluralsight is awesome, it's where I go for all my rampups. As long as you're shifting into .NET and doing automation, you should check out http://lefthandedgoat.github.io/canopy/ It's F# but it's really simplified a lot of our automation and made it more developer friendly.
That's a really nifty library, good work. Would you welcome comments on your code? I'd like to do a code review when I'm at work tomorrow because I'm interested in using it, and I could save my comments for you. Also, cheers for using the MIT license. GPL is too much of a pain in the ass.
I would love any comments, but please conciser the library has changed a lot since first version, the most updated series are the LineSeries :)
I'll definitely check it out. But I won't be doing automation on .net..I'll be working on developing the features. To that end, I might need to focus on learning design patterns etc. Any recommendations there? PluralSight good enough? 
Most of the common Java patterns carry over. Head First Design Patterns is still where everyone points even though it's written for Java devs.
If you have a custom exception type DON'T make it internal. I hate having to catch a global exception just because someone hid their's from me. 
Oh, you want to see the code generator? https://github.com/docevaad/Chain/blob/master/Tortuga.Chain/Tortuga.Chain.CompiledMaterializers.source/CompiledMaterializers.cs
Looks very interesting and promising. I'm sure I can implement a use for these somewhere :) cheers.
This is probably a silly question, I have tried googling but it didn't make sense; is there a reason why you said to put it into an IEnumerable&lt;&gt; rather than just querying it as a List&lt;&gt;?
I don't know what I'm going to do with this, I just know I really want to!
Will this make it easy to edit, build and debug multiple dependent solutions in one VS instance? I really hope it does.
If they are dependent, then likely they should not be different solutions. Create a new solution and add the projects from the other solutions.
Naa, ContinueWith is old-style TPL API, and shouldn't really be used (very often) with async/await.
Document it clearly, and make any public API as obvious and minimalist as possible. 
Is this basically just a Lazy&lt;T&gt; ? Edit: ok it's Lazy&lt;T&gt; but with an expiry basically - thanks
Lazy swallows exceptions. This implementation doesn't.
Utter shit 
&gt; Lazy swallows exceptions. This implementation doesn't. Huh? How did you get to that?
I see. Thanks 
Read this, it gives a pretty good explanation. http://stackoverflow.com/questions/3628425/ienumerable-vs-list-what-to-use-how-do-they-work In this case you could use either.
Don't you have to assign each function an action name that way though? I just ended up using [Route(url)]
omg thankyou. 
Lazy with expiration = Temporary&lt;T&gt; http://stackoverflow.com/questions/18685134/lazyt-with-expiration-time
Sharing the state through files will be a headache. Are the devices where the app will run connected to any network? If yes don't be afraid to use a central database with EF. Saving the state of the current session would make it available to the rest of the users automatically, no need of serializang/deserializing/sharing files... You could offer them a session chosing screen on app startup. They could load their session or any started by any of the user's colleagues or start a new one by importing a CSV.
I started this because I needed something different than oxyplot, first: animations and good looking charts by default, second: responsive charts these charts automatically update when your data changes also when you resize your chart, finally LiveCharts MVVM is different and for me it feels better than oxyplot modeling, becuase LiveCharts uses generics and with it strongly typed modeling, I think oxylot uses reflection to get the property value. I think this is what LiveCharts is better than oxyplot, but oxyplot is also better at some points: they have more charts, they support more platforms, but I have been working hard to reduce this 2 points as quick as possible :)
I've never used SpecFlow, but there's a Pluralsight video that clued me in on the basics of BDD by Rob Conery called ["Pragmatic Behavior-driven Design with .NET"](https://app.pluralsight.com/library/courses/pragmatic-bdd-dotnet/table-of-contents). Might be a good place to start before moving on to SpecFlow, because he's able to apply the concepts of BDD with only xUnit and describing/structuring his tests in a BDD style.
A couple of tips: Learn to love IEnumerable and LINQ. Don't use ArrayList. Read enough C# written by people who speak it fluently to get a sense of what idiomatic C# looks like.
fantastic work.
If it's a ring buffer, I'd assume you'd either have to give it a size, or a "step" on how often to resize its underlying array, no? If it's not a ring buffer, would that mean it's a Linked List with lower overhead?
You can give it an initial capacity, otherwise it starts at 4 and doubles the buffer size every time it's full just like `List&lt;T&gt;`. http://referencesource.microsoft.com/#System/compmod/system/collections/generic/queue.cs
Queue is a FIFO datastructure meaning it only allows operations on the first ellement that was added (and then the second if the first gets removed). LinkedList is a double linked list that allows for easy forward or backward sequential data access. It contains a reference to the first and last elements in the list and each element contains a reference to the object before or after itself. It's pretty horrible for random access operations. Here's a [SO post](http://stackoverflow.com/questions/169973/when-should-i-use-a-list-vs-a-linkedlist) on when to use it.
Thanks
I'm fairly familiar with LinkedLists (I used to roll my own before realizing the language had them built in). They're exceptionally low overhead already, so I'm wondering what the advantage of the queue would be? (Obviously, they suck for random access, but that's not what they're for). 
It sounds like Entity is overkill for that project. You really don't need an ORM for a single table-like data model. I'd consider something like MongoDB or RavenDB for storage for that one.
It's all good! Generics are probably the one of the most mind bending thing you'll have to get a handle on with C#, both in terms of how they work and their syntax. That said, they're pretty powerful and one of the best features of C#; once they start clicking for you [you'll have taken your first steps into a larger world.](https://i.ytimg.com/vi/535Zy_rf4NU/maxresdefault.jpg)
They'll both be an `O(n)` operation. One would be an array iteration whereas the other would be bouncing through object references, but they'd both be pretty slow if `n` is particularly large. There is no indexing done with either. If you need that, take a look at `Dictionary&lt;TKey, TValue&gt;` or `HashSet&lt;T&gt;`. (Though they aren't quite the same. Not sure if there's a built-in "IndexedList" so to speak, but you can easily roll your own by combining/wrapping the classes.)
searching `List&lt;T&gt;` with `Find` performs a O(n) search of the underlying array: http://referencesource.microsoft.com/#mscorlib/system/collections/generic/list.cs,420 Random access of `List&lt;T&gt;` (via the indexer on line 174 of the previous link) simply accesses the underlying array. Both `List&lt;T&gt;` and `Queue&lt;T&gt;` copy the old underlying array to the new array when growing (115 in list, 313 in queue). 
&gt; SemVer.org Could someone send this to Microsoft please?
BDD approach to testing allows you to focus on testing the features that the users actually care about so you're not just testing if you've implemented the system correctly, but you're also focusing on testing the right thing. These tests tend to be less brittle than unit tests since you're not testing each class in isolation, which helps a lot in the initial stages of a project when things tend to change frequently. Also, Gherkin is very readable and SpecFlow has various mechanisms for reusing defined steps in multiple tests which tends to keep them much cleaner. Speaking of Pluralsight, there are also SpecFlow videos by Jason Roberts which tend to explain it quite well. 
&gt; Also, always remember that any .NET collection that is implemented as an array underneath Not all of them are, but yeah, a good chunk are because it makes sense for general use. &gt; If you go from default size (100ish, I think) Default `List&lt;T&gt;` capacity is 4. The point is, generally speaking, one should use the right collection for the right job. Any developer should consider their expected collection size, how they intend to add/remove/access/iterate items, and how frequently/fast they need that to be. If one doesn't expect performance to be a critical factor (e.g., they have less than a thousand items, not frequent iteration) then they probably ought to choose the collection type that functionally matches what they're trying to do (FIFO, FILO, lookup, etc.) If you're dealing with millions of items, then that needs to be a factor in what you're doing (for example, as you said, making sure you set the initial capacity for `List&lt;T&gt;`).
If your array has more than ~21k ints or classes (85,000 bytes) it is probably going to the large object heap and unusual things are happening compared to most normal code as far as GC is concerned. Such cases deserve special attention in the first place. 
If the xml format allows, use a SAX style parser and not DOM. Not sure about SQLXML at all, but if it's designed for database imports it's hopefully already optimized? 
My thoughts on the matter are that since .NET went Open Source in 2014, most of this article no longer applies these days.
This guy is full of shit. The first tip-off was that he called .NET a language. Second tip-off was that he said you couldn't craft a 1.7oz burger in his analogy. This guy doesn't know what he's talking about and I don't think I'd want to work for his company anyway. Edit: It's also a very old article, so that may be part of it.
Thank you, we are really proud of it.
That's a very haughty position to have. Does he assume .NET developers started on .NET and have never done any other development work? I assume they develop all their code in assembler?
I like how he implies .NET programmers aren't real programmers. I also like how he tries to backtrack and say his post was really a rant against using .NET in a start-up when he only mention start-ups at the very end of his 11+ paragraph rant. He's probably even right, as far as that goes. But how many programmers are involved in start-ups vs established businesses?
[removed]
In gaming, I used linked lists quite a bit. For instance, my render order should be based on how far "back" a character is (rendering from furthest to closest). So as a character moves "up" along the z-plane (in a 2D game) it can look at the "previous" object to see if its z value is less, if so, it swaps places. Inverse when moving "down" (look at the "next" object.) Then, when I go to render items, they're already in the order they belong. There's a number of other places I'd use them, but this is the easiest example I could come up with. What do you mean by "handling cache misses?" 
So, while this article is slightly out of date and inflammatory as hell, there is [evidence](http://blog.triplebyte.com/who-y-combinator-companies-want) that this is a position held by many in the startup community. I'm not supporting this, just pointing out the facts. To some extent, his opinion still does apply.
By handling cache misses I mean having CPU to load data from the main memory instead of the fast cache memory because data isn't in the cache. That kills performance because main memory access latency is 100s times bigger than cache latency and your CPU will spend most of the time waiting for the data. In your case I guess it's good to use a linked list because you don't iterate over the whole list (if I understood correctly) and it's gonna be more convenient than tracking element indexes.
My concern is that on our team, we're working on a tool that's been under development for the better part of a decade with dozens of programmers. The code base is huge. Without stepping through every single function (which would take hours if not days) we can't be sure what invoking some of these dependencies would actually *do*. Thus it seems "safer" to just create mocks for everything to ensure we don't step outside the scope of the very specific piece of code we're working on. At least, this seems to be the mindset here. (I'm new.)
But then how do you know your changes will actually work with the rest of the code? Obviously I don't know the details of your situation, but my first step would be to get the application running on an isolated system. By that I mean, put everything I could including databases onto a laptop and then disconnect the network. If it works, cool. If it doesn't, then it's time to start considering mocks. 
&gt; well besides wanting to write an iOS app or linux And with the open source version of .NET being ported, even those limitations won't exist before long...
Sounds like a typical egotistical programmer (there are a lot of them) who cannot envision anything outside his own little world.
I don't think it was ever true. Maybe if you meet a bad .NET developer or you only look at some tutorials on .NET, you get the feeling that you can only work with .NET through wizards in Visual Studio. Then you might get this idea that you can only serve the McDonald's menu. And to be fair, Microsoft have been notorious in focusing on wizards instead of making things scriptable and flexible. But under the hood you have all the power and capabilities you need, and they're getting better and better at putting that in the spotlight.
MS would have dominated the whole market if they prioritized portability a decade ago. 
He's not wrong, in one regard. Many startups don't build their products on the Microsoft stack (Server, Database, Development tools, etc.) which is why he referenced using curl to fetch a web server response header. I've always been of the opinion, that the real reason Microsoft doesn't do well in that space, has nothing to do with the skill set of developers of dotnet and has everything to do with cost. It's very difficult to argue with free when starting up with low capital. As Microsoft makes progress in making dotnet cross-platform, this guy's opinion will only continue be even more irrelevant. This topic was touched upon in this week's dotnetrocks podcast. Check it out. http://www.dotnetrocks.com/?show=1282
&gt; Second tip-off was that he said you couldn't craft a 1.7oz burger in his analogy. I'll be honest, when I read that analogy the first thing I thought of was Ruby on Rails. I'm not saying I dislike Ruby or Rails, but that's the first platform that comes to mind when I think of his analogy. Rails has very specific conventions and patterns that developers follows, there are entire code academies that churn out people who learn how to apply these same patterns over and over. I'm not trying to shit on it either, it works very well for certain types of apps and it's cheap to develop the apps quickly. But it's ironic that he makes no mention of this when he tries to shit on .NET for allegedly having this problem.
This is why working for a startup is an instant no for me. Too many hipsters that think they are better than you because you don't think the same way they do.
That article is from 2011. This "Startup CEO" had/has no idea what he was talking about.
So... two?
 b[i].ToString(); a[i].ToString(); 
With Azure, there is even less barrier to entry. You can spin up low-cost instances of SQL Server and web hosting, then upgrade on demand as your service needs grow. You don't need to start with the $30K server cluster anymore.
He's full of java burgers.
Apologies, didn't realise you could do that with lists as well! Thank you nonetheless
Your last paragraph makes me smile and cringe at the same time. I've worked with that guy. It was the worst two years of my life.
I can kinda see it in my 25 years in IT but it is more placed w. people that don't really think outside the box. I currently use .net and have off and on since 2003 I think when I nailed a job that needed 10 years of .net experience when it had only been released about 1 year at that point. Around 2008 I think was when the cookie cutter .net programmers that can do the basics but don't really have an understanding of the lower level fundamentals were more common. Of course I started w. ASM, C, Fortan, ADA and Cobol. Early .net was like Crystal Reports and complete and utter shit by having to have a billion work arounds. Not to mention performance was abysmal.
It is interesting what happened to his company and if he hit real success but I am too lazy to read all the blogposts.
He has no idea what he is talking about. Every language has it's own quirks. I've written stuff in Java, C#, and Python. They all have their own ways of doing things. Everything in the programming world is a tool. Every and each tool has a thing it's really good for, you can misuse tools quite easily. Pick the best tool for the job at hand. Do not align yourself to self-restrictive ideas that you behold as the truth.
I've been in the computer industry for 27 years. I've hired and fired a lot of people over the years. My experience is, .NET developers are more likely to be full of shit than others. I can't tell you how many .NET developers with 10+ years of experience I've fired for gross incompetence. (One guy I fired recently broke into a former employer and shot his former boss, who fired him for the same reasons I did.) So, my experience is that Java developers mostly know what they say they do, and so my interviews focus on the personality fit, while .NET developers are full of it, so my interviews are a technical grilling, and even then I may have to get rid of them if they turn out to be an idiot. I was very proud of the fact that I'd only ever had to fire one guy, and that one for serious insubordination. (I was his boss. I asked for access to the database. He refused and said I wasn't competent to use the database, even though I'd previously been a DBA. So I had someone else cut him off and put me in, and I fired him.) But .NET developers have proven to be another story, and I've fired about a dozen of them. 
Talk crap about .NET and .NET devs then build your system with [PHP and jQuery](http://we.are.expensify.com/our-technology/) oh the irony!
Maybe your pre-determined opinion of .net developers made them respect you less, and their quality of work suffered because of it?
Well, why would he hire a .NET dev when they don't use that stack?
Java floating point is iffy: (pdf) https://www.cs.berkeley.edu/~wkahan/JAVAhurt.pdf I would guess (without IRL experience) that working around that will eat any performance JIT can eek out of java.
This is definitely true of the cloud, since there is no "free" option.
didn't sound like a programmer to me at all. 
He got some bits right. They're buried deep in a mire of crap though. That said, it's got his startup a bit of publicity and apparently that's always good.
They could have also ported the Visual Basic runtime to other OSes in the early 90's and really challenged Java before Java gained any traction too but they ignored that threat. VB already had compiled object code (which was portable) but the VB runtime was tied to Windows. VB also already had a full fledged IDE with a complete roundtrip GUI editor, and Java was still experimental in language construct and dev environment. Every company I worked for throughout the 90's were developing some kind of corporate application in VB, and now it's Java or .NET.
I think your best bet is to go with http://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_Converters_CustomCreationConverter_1.htm Inherit it as `class MemberCollectionCreationConverter : CustomCreationConverter&lt;MemberCollection&gt;` and override correct function where you can intercept the actual json data coming in and use jsonconverter on that, then determine if the root element is array and continue with deserializing into real Member objects int "MemberCollection" (which could even be List&lt;Member&gt; as base). I think you'll need to override `Create()` to create the MemberCollection and probably `ReadJson`. Here is how you'd then use the converter: http://www.newtonsoft.com/json/help/html/DeserializeCustomCreationConverter.htm FWIW, whoever did that switcheroo is a retarded fuck.
I have a free site on azure right now. It is student account, but I think there is a "free" tier, esp if you have msdn. Part of the problem may be that azure pricing is really gosh darned confusing.
I can't help but be skeptical when you say that a single unfinished software project **literally cost billions of dollars**. Could you elaborate a bit more about the project (to the extent that you can without violating NDA)? I'm skeptical because a software project that expensive [would top this list](https://en.m.wikipedia.org/wiki/List_of_failed_and_overbudget_custom_software_projects).
Thanks - had a hard time Googling for a solution to this but eventually I found something along the lines of what you've suggested - http://stackoverflow.com/questions/18994685/how-to-handle-both-a-single-item-and-an-array-for-the-same-property-using-json-n - so far it seems to be working. 
It's why I used quotes.
I thought you meant there was no option for no cost service, since the context was that it was the traditional MS stack having high upfront license fees. :)
lol, I just couldn't get any sleep and cooked this up: using System; using System.Collections.Generic; using Microsoft.VisualStudio.TestTools.UnitTesting; using Newtonsoft.Json; using Newtonsoft.Json.Linq; namespace qtt.unittests { [TestClass] public class MultiplexJsonTest { public class Member { public string name { get; set; } } public class SourceData { [JsonConverter(typeof(MemberWTFConverter))] public List&lt;Member&gt; ourList { get; set; } } public class MemberWTFConverter : JsonConverter { public override bool CanConvert(Type objectType) { throw new NotImplementedException(); } public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) { var jc = JContainer.Load(reader); if (jc is JArray) return jc.ToObject&lt;List&lt;Member&gt;&gt;(); return new List&lt;Member&gt; { jc.ToObject&lt;Member&gt;() }; } public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) { throw new NotImplementedException(); } } public const string singleExampleJson = @"{ 'ourList': { 'name':'Z' } }"; public const string multiExampleJson = @"{ 'ourList': [{ 'name':'X' }, { 'name':'Y' }]}"; [TestMethod] public void TestSingle() { var res = JsonConvert.DeserializeObject&lt;SourceData&gt;(singleExampleJson); Assert.IsNotNull(res.ourList); Assert.AreEqual(1, res.ourList.Count); Assert.AreEqual("Z", res.ourList[0].name); } [TestMethod] public void TestMulti() { var res = JsonConvert.DeserializeObject&lt;SourceData&gt;(multiExampleJson); Assert.IsNotNull(res.ourList); Assert.AreEqual(2, res.ourList.Count); Assert.AreEqual("X", res.ourList[0].name); Assert.AreEqual("Y", res.ourList[1].name); } } } 
That's totally ok. I don't mind not working for "stock options".
It's even easy to get working with Mono! I can compile and debug my Mono apps right from VS. Actually very good for cross platform dev these days
A developer definitely did NOT right this article. A moron did.
&gt; the real reason Microsoft doesn't do well in that space, has nothing to do with the skill set of developers of dotnet and has everything to do with cost. It's very difficult to argue with free when starting up with low capital This. I work at a well-funded startup. We use mostly MS products, including C#.Net.
When this idiot's company is gone in 3 months, I won't be shedding a tear and hope he's so deep in debt, he has to turn tricks at a .NET conference to survive.
Totally cost, everyone goes for Linux for cheapness and they build on that stack. Used to be hard to find good hosting for a windows box and expensive sql server db. This doesn't even count paying for a copy of VS! With the cheaper azure/aws tiers and microsoft's bizspark program, free VS, and the the ability to write ios/android apps, I think many more startups will grow from .net. This place sounds like your usual "boast about your hiring standards" place, sure there will be "ninja" in their position description somewhere. Why don't we just write everything in assembly or write a new implementation of quicksort every-time we need it? Because that's a terrible idea.
Shit, don't go to the UK unless you want your project to fail...
.NET development in the startup community is tough because it is more expensive than other stacks. Not only does it (typically) cost more to host the stack, but .Net developers are mostly corporate people who cost more per hour. There is also a smaller pool to draw from since most are employed somewhere full time. That being said, if you are confident that your startup will make money, it won't matter as long as the developer is comfortable with whatever language they choose.
That is still a high cost compared to $5 DO servers for startups. You also forget that .NET devs cost more as well.
Not to mention stroking his ego about being 6'3. Totally unnecessary in the context of discussing programmers. 
This is why CEOs shouldn't be in charge of anything operational.
I'm a .NET guy and do actually study HEMA (historical European martial arts). Knife fighting is nothing. 
I worked at a startup in the 00's, that was a MS certified partner and also one of the first to take advantage of Bizspark. It was and still is a very good program. That startup was acquired, just after I left, which meant that I forfeit stock options. It was getting really hairy at the end, and it was either fail or sale, and sale didn't look like it was going to happen so I left for greener pastures. Let's just say that I missed out on a lot of money.
I disagree with the other guy. Verbosity is not a problem. If you want people to use it, I would do two things. First, make a case for how it's better than just using the standard MS APIs for serialization. Second, publish it on Nuget. 
this is so old its beyond irrelevant. 
I don't believe it applies or what he says is true, but I see plenty of people with this mindset. My own experience this week re-entering the job market: I have around 12 years business .net experience, and 20 years personal PHP experience. I took the last 18 months off to catch up on all the latest technologies and focused on PHP, specifically symfony2. Got a massive portfolio setup, half a dozen PHP sites up, years of personal and professional projects available, all new resume, and so on. Literally 18 months of preparing for re-entering the job market. In the last 3 days I've had zero emails or phone calls for PHP related work. But I've had roughly 60 phone calls and 50 emails for .Net work even though my resume is focused on PHP related skills. Now it could very easily be because of my location (Seattle) but I'm still seeing hundreds of PHP related jobs here. Realistically though I think it is because PHP employeers see all my .net experience and say nope. While the .Net people see PHP and don't care, they see it as a non issue in regards to my .Net experience. So now I get to freak out and play catch up on all the latest .Net technologies, because it's where I'll be finding work in. 
Yea it's no doubt more expensive, but $75/month is still practically nothing. This is just Azure though, there are plenty of super cheap windows VM's out there for $10 or less. IMO, the biggest startup costs for .net used to be licenses to Visual Studio, but MS's new CEO changed all of that (thank god). The hosting prices today are pretty much the same for any stack.
I'm not sure if it is verbosity per se that is an issue, but i do not like your example. For one, I would attach some example output to your readme. Something like, "Here is the JSON code &lt;code&gt;, and here is the output &lt;JSON&gt;." Maybe use more meaningful names for your data and variables too. I would also not wrap you actual, important functionality in a secondary class that hides it all. The point of your readme is to quickly sell folks on how easy your library is to use. I wasn't sold. I would pass actual EventArgs through your events. I guess you don't have to, but it feels weird to me otherwise. That could just be me. With that, though, can come other metadata about the transaction if you wanted. This seems like a glorified wrapper of sorts. I get that it is still young, but maybe after you have added some more functionality I can give a better opinion. It looks fine now. The jury is still out on my end if I like how you handle the SerializerPlus class. Sorry if that was harsh. Just my two cents. EDIT: You did well. Just wanted you to know that :)
I have a friend who dove into rails for his own personal startup for a while. He came away thinking it was an apt name because when you try to go *off* the rails, you end up with a train wreck.
I only hire programmers that program in assembly.
yes. finally lol i had no idea msdn had such a guide. thank you!
Ouch. One of the good things with those type of interviews is they really push you. It was a bit rough to not give a good idea of what the interview will be about tho. How was the interview at the place you ended up getting a role at? [CodingHorror](http://blog.codinghorror.com/we-hire-the-best-just-like-everyone-else/) seemed to have an interesting hiring process. (Basically audition projects).
It is a gloried wrapper really and I think you are fairly on point in terms of what would be needed to solidify its usefulness. It can be much cleaner. I agree with your post and with the other post here. When I get home tomorrow I will try and implement some of the changes.
I never needed resharper. I've never seen it do anything to justify its existence.
Well keep up the good work!
Microsoft allows startups to use community edition for free. Also Core is free and usable on most OS's and can be built using your favorite open source editor. 
Except Microsoft has lots of programs to give companies all the tools they need for a year for free. Then you start paying after a year. Also really small companies can use community edition. So that argument is a bit weak.
And everyone one of the things you mentioned are recent developments by Microsoft possibly as a reaction to this very issue. Keep in mind, the post that we're all referencing was from 5 years ago. Anyway, you're not wrong, but there's a systemic issues with Silicon Valley startups and they just don't use Microsoft products. I don't know the real reason, price just seems like the most glaring possibility. I was just listening to dotnet rocks on the way home today, and they actually mentioned this very topic. They had some ideas on why it is the way it is, and one of them is that it's a cultural thing among startups, but they did go on to say that with the emergence of cloud backends this has been somewhat minimized, but also that MS powered cloud offerings tend to be priced higher -- relative to Linux based ones. http://www.dotnetrocks.com/?show=1282
for those who don't know, check out dev essentials. free pluralsight and small hosting and ide
as a .net dev with no xp in ios or android (but i know java), is it easier to do this than to code native front ends?
You can check each window and test `IsWindowEnabled` to find the active window. If the window is truly a dialog `foo.ShowDialog();` the background window is disabled and it (the dialog) should be the only enabled window. 
Bizspark was a thing even 10 years ago. They've been doing it for a very long time. I think the money is a dodge or just ignorance. If they want to use open source tools and languages, that's fine, everyone has a preference no one stack rules them all. I'm tired of OS hippies who claim they are real programmers because they don't use MS stack tools. Java and .NET are so close it's not funny. .NET is really just a better organized JAVA really. And PHP? Please, it's a perfectly usable language to use, but claiming that + jQuery is the pinnacle of development stacks. Even 4-5 years ago, jQuery has always been about saving time by doing the hard stuff for you. If he knew what he was talking about then jQuery would have been off the stack and they'd be doing all the javascript themselves. Which just proves this was just an inflammatory article to get buzz for their product. Only it may have backfired a bit, since this is the first time I've heard of this product and have resolved not to use it due to it's CEO either being an attention whore or a dummy.
VB doesn't care about much, does it?
IDK what to say. I literally just pressed publish in visual studio and followed the prompts. I was up in no time. I think the free tier sites often take time to spin up if they are cold. Its not like the usual website provider where your site is available without delay all the time. If you don't get requests to the site for a while, azure will store it away until it gets a request. https://mva.microsoft.com/en-US/training-courses/microsoft-azure-fundamentals-8391?l=ajvI22Iz_2304984382
There's not a lot of difference code-wise... the IDEs are very different (.NET has a much richer tool set) and the people who are "expert" at them are *very* different. I hired many "senior" .NET people who didn't understand programming basics, and we had to let them go. None of the Java people I hired had to be let go, in fact they ended up with large promotions. 
Biz Spark
&gt; "We've got knife fighters!" It's probably just some guy doing (super lame) fencing.
I guess I could add a second Get for checking again.
Using find is not what random access means. List&lt;T&gt; has random access in O(1), LinkedList has it in O(n).
Then you have probably never used it. The navigation and refactoring tools are superior.
Part of start up culture is convincing people who don't know any better to give their lives to your company in exchange for very little. It also often involves breaking every development best practice you can imagine. Sometimes because the best practice is wrong, but more often because the company either can't afford it won't do anything properly. .NET is very popular enterprise language and this was even more the case five years ago. Most experienced . NET developers will balk at 100 hour weeks and bodged together crap. Plus it makes the 'cool' developers feel 'cooler' for working for his startup. 
https://visualstudiogallery.msdn.microsoft.com/f1cc3f3e-c300-40a7-8797-c509fb8933b9
Lots of resources to get you started at: http://www.asp.net/web-api Windows Communication Foundation (WCF) is also an option
?
Feel free to ask me questions about C#.
They've repeatedly stated that these will continue to develop after .net core is released, same with the full .net framework - however, to what extent is unknown. Remember though, the .net core standards are designed to work on full .net framework as well, that's part of the reason why it's taking so long (migration to netstandard), so even IF you are using asp.net 4.6, there's nothing stopping you pulling in some of the newer .core functionality if that's your thing.
Microsoft better sell .NET to Gearbox. Those guys ship.
Silverlight called, it would like to add you to its mailing list.
Please publish it on Nuget only after it reaches a decent level of maturity!
Well, I'm a bit busy at work at the moment to think a bit about the info you gave me, but I have to say: that Prism framework that you refer to sounds good. "Learn how to create a composite application from loosely coupled WPF components that can evolve independently using the Prism library." I like the sound of that. I'm more experienced myself in programming in Java, it's the first time I try to develop in the Microsoft ecosystem, so still trying to get my head around all the information that is flying at me :-)
I am only repeating what they have stated, I have no affiliation with them and cannot confirm or deny any of their plans. However, what I said about the netstandard stuff still applies.
&gt; sometimes the tool you need for the job changes resulted in their failure So true!
you'd be right - I was using the mobile app, don't know what happened!
I understand it as they are removing their concrete implementation of it so you can use whatever you want? Not sure.
You could use a class and list, with an index, and iterate through the list for all players 
I just grabbed the treeview from the toolbox, I did not know there was more than one, how do I check?
Change the signature from `TreeView` to either `System.Windows.Controls.TreeView` or `System.Windows.Forms.TreeView`, depending on what you're using.
yeah, but ive got a sql db connecting to an API app connecting to a web app, so its taken quite a bit of time to make sure theyre all working. still getting the webapp working as of right now, waiting on builds as we speak
If you are using xaml then it is the one in controls . You will have to declare your parameter as.. ListDirectory(System.Windows.Controls.TreeView, string path) if you are using Forms then... ListDirectory(System.Windows.Forms.TreeView, string path) If you hover over the type with your ouse visual studio should tell you what type it is. 
That fixes the error, but for some reason I cant use nodes. Nodes are there in windows forms, do they not exist in wpf?
In the xaml control the nodes are stored in the Items Field (which is a collection of type [ItemsControl](https://msdn.microsoft.com/en-us/library/system.windows.controls.itemscontrol(v=vs.110).aspx). This should give you access to your nodes. Edit: As Reddit does not like msdn's formatting. Damn kids and their Linux. https://msdn.microsoft.com/en-us/library/system.windows.controls.itemscontrol(v=vs.110).aspx
If you have access to Pluralsight I'd highly recommend watching the lesson videos by Brian Lagunas on PRISM it got me up to speed real quick.
Why is this posted here? The link has links within it that point to the answer...
Who knows, but like I said you can pull in the new functionality anyway. 
Thanks! That helped a lot! :)
Removed: Rule 4.
Then remove the words "random access" from the question. That's still the question I'm wondering about.
You know, that's a good point. The write up is from 2011. It'd be interesting to see if ***HE'S*** still around.
You would need to share your benchmark code. A lot of power of different data structures requires you to know how to use them efficiently. For example you said you added 100,000 elements to the list. Did you provide an initial size to the lists constructor? Usually you can expect that you get many values, so you set the size of the internally used array accordingly right away. This reduces the amount allocations heavily. Also the sorting algorithm matters depending on whether it's using a linked list or an array.
You have to specify the 'out' keyword on both the function definition and the function call. e.g: public static void splitNames(string fullName, out string firstName, out string lastName) { //blah blah } Then: splitNames (full, out first, out last); Also, it is then mandatory that your splitNames function explicitly assigns a value (even if that value is null) to both variables before it exits.
No, you can't seamlessly upgrade from MVC5 to MVC *Core* but then you couldn't really upgrade from MVC3 or MVC4 to MVC5 without a lot of heartache (That is, it's doable, but a pain). That said, the .core libraries are very modular, you could probably use MVC Core with some hacking, it's just not a good idea and realistically there's little point. However, MVC is only a small part of it all, things like EF Core are now very standalone, so if you do fancy some bits from the core libraries, nothing is stopping you. That said, If you have an ASP.net 4.6 application, what benefit does the *Core* stuff give you? What standout features do they have that you don't already have? Core is a rewrite and it's missing a lot of stuff that full ASP.net has (for better or worse).
Certainly doesn't seem to be the case when it comes to sorting objects in the List&lt;&gt; vs the LinkedList.
&gt; you're still accessing objects that are in memory randomly. This is wrong if your objects are `struct` types. In a `List&lt;T&gt;` they are guaranteed to be contiguous (as they would be in a simple array), thus benefitting from locality of reference. If they're not struct types, then, well, you done goofed 'cause you're basically storing a list of pointers anyway.
Yes, and I'd agree (except in the case of just appending to the end of the list, where they seem to be dead equal). My question is why Bjorne Stroustrup insisted that there was *never* a reason to use LinkedLists (at least, as far as I understood his talk) due to Cache Misses. And just yesterday, a number of people in this thread reiterated that.
&gt; I must be misunderstanding what you're saying. The backing array would have been resized and copied multiple times: For my test, I started with the array at 100K items, then increased its size to 300K items by adding one at a time. Thus the 131K comment. Oh, and I just read your edit. :P So yes. You're right, there would've actually been 2 array size increases. Unfortunately, I can't copy and paste the code in, but as I mention elsewhere, it would be exceptionally simple to duplicate. We're talking 5 lines of code (after set-up).
Does this work well? I switched over to InnoSetup a few years back because the built-in VS installer projects had become so bad.
&gt; Unfortunately, I can't copy and paste the code in, but as I mention elsewhere, it would be exceptionally simple to duplicate. We're talking 5 lines of code (after set-up). Respectfully, I disagree. You should post all your code, both setup, the 5 lines, and the output/reporting. Otherwise there's simply too much potential for people to be talking about two different things, analyzing/interpreting the wrong facts, or simply making invalid assumptions and guesses about what you're doing. Bottom line: the discussion here is (mostly) pointless without a common base for all of us to work from.
BTW, the assertion /u/Javin007 is referring to I believe was made [here](https://www.reddit.com/r/csharp/comments/4elppu/help_queue_vs_linkedlist/d228y4y?context=10000), in particular, [this video by Bjarne Stroustrup](https://www.youtube.com/watch?v=YQs6IC-vgmo).
&gt; This is wrong if your objects are struct types. You'll have to explain this one to me. &gt; In a List&lt;T&gt; they are guaranteed to be contiguous (as they would be in a simple array), thus benefitting from locality of reference. Howso? My understanding is that only the objects reference (pointer) would be contiguous. The objects themselves will remain where they were upon creation. &gt; If they're not struct types, then, well, you done goofed 'cause you're basically storing a list of pointers anyway. See, this is where I'm confused (and it also seems like the goal posts have been moved). First, are "struct" types unique in that when you create an array of them, and add them to the array, they get physically moved in memory? They don't follow the same "pointer" rules as other types? And if so, is this to say that all objects in a game would have to separate out its properties into "structs" and have a forward and backward pointer to each other? This seems like it'd add considerable complexity, separating out the character's AI/mesh/textures/inventory/etc. then, just for its location, creating a "struct" with the coordinates. Or are you saying that if I wrap the character object in a "struct" then it would be moved around in memory instead of its pointer being moved around? Because that would be INCREDIBLY slow for any decent sized object... I think I'm not understanding what you're saying.
Eh, more like a devil's bargain. They're your friend until they murder you in your bed when you felt safe and cozy.
&gt; You'll have to explain this one to me. In C# types always extend from `Object` but can be a `class` (the majority) or a `struct`. E.g. instead of `public class A` you would write `public struct A`. &gt; Howso? My understanding is that only the objects reference (pointer) would be contiguous. The objects themselves will remain where they were upon creation. This is true for *class* types but not *structs*. An example is an `int`- ints are not allocated on the heap when declared but are instead stack-based. When you pass an `int` to another function you are copying the value over rather than passing a reference to an int somewhere. &gt; First, are "struct" types unique in that when you create an array of them, and add them to the array, they get physically moved in memory? They don't follow the same "pointer" rules as other types? Not moved, but copied (well... Ignoring some performance optimisations but that's irrelevant here). They are not reference types and you are not dealing with a pointer anymore but the value itself. After all, why copy an 8-byte pointer around when you can just copy the actual 4-byte value (in the case of an int on a 64-bit system)? &gt; See, this is where I'm confused (and it also seems like the goal posts have been moved). The goal posts have not been moved; if you really are using classes instead of structs then you're comparing two lists of pointers; thereby throwing a lot (but not all) of your cache locality out of the window by introducing a second level of indirection. &gt; And if so, is this to say that all objects in a game would have to separate out its properties into "structs" and have a forward and backward pointer to each other? This seems like it'd add considerable complexity, separating out the character's AI/mesh/textures/inventory/etc. then, just for its location, creating a "struct" with the coordinates. Or are you saying that if I wrap the character object in a "struct" then it would be moved around in memory instead of its pointer being moved around? Because that would be INCREDIBLY slow for any decent sized object... I'm not quite sure what you're asking here but in most modern game engines data that is related to a certain 'area' of the game is all stored together so that the pertinent subsystems can iterate over it really fast. For example, all the current mesh transform data will be stored in a giant array (or some other data structure) and entities themselves are basically just abstracted pointers in to those tables. So "Player1" might look like it's storing its own model and position and so on but actually it's just a `Position*` and a `MeshData*` etc. 
You're overthinking this one. Part of a managed language includes not worrying about things like pointers. If that's your background, I can understand how it'd feel weird. A perfectly good implementation for what you describe would look like such: string enteredName = Console.ReadLine(); // assuming a console app string[] nameSplit = enteredName.Split(' '); string firstName = nameSplit[0]; string lastName = nameSplit[1]; That assumes no error checking, but that's a simple if statement on the length of `nameSplit`.
Why even ask a user to pick xml or json? Just test the first character for a &lt; 
Most things in WPF inherit from `DependencyObject`. You could probably go up any level in this [hierarchy](https://msdn.microsoft.com/en-us/library/system.windows.shapes.shape\(v=vs.110\).aspx), though keep [covariance](https://msdn.microsoft.com/en-us/library/ee207183.aspx) in mind.
The demo shows quiet clearly that the implementation passed does not matter. The "xml" var in the demo is left over garbage by my end. RunDemo(SerializerPlus&lt;MySettings&gt; serializerPlus) I agree that the sample is huge crap, I will work on a useful and pretty WPF example later. :) 
Just create two `Bitmap`s and swap the references?
I know you, said you didn't want someone to host it, but this sounds perfect for Azure. I would not recommend SQLite, it has lot of problems with code synchronization and running a server yourself can provide a lot of additional headaches. If you really want to host it yourself, then mySQL or SQL express should be fine.
I know about Azure, and that's actually a good alternative for me. It's hosted by Microsoft, but I'd be ok with that I suppose. Could you explain how the layout would work? Is the DB constantly hosted on Azure? What happens when I deploy the app to Azure, is it using a local DB or is it connecting a separate DB server? I have free hosting on Azure because of my company, is it really as easy as creating a new DB on azure and using it on my app? It's a SQL DB so I can connect to it with ADO calls right? TBH with you, I've always worked with DB's and servers that were already set up, I've never had to get one up and running on my own, it's pretty new to me.
&gt; As soon as someone writes a tool to compile C++ to the .NET runtime I'll be able to code in C++, but not before. C++/CLI?
The point is people made investments into MVC5 expecting some kind of ongoing support (for example some of the perf improvements done in Core could probably be done in MVC5 but they won't bother doing any of that).
Do you have an SSD drive? It made a world of difference starting with vs2012.
If you can use Azure it's the best alternative, SQL Azure it's a database prepared out of the box. They give you a connection string and you can use it like your local database (with some limitations). 
I think the problem I was having was that it wasn't assigning a value in every case. I can just add a failsafe to change the strings to ERROR in case something isn't working. Thanks again!
Yeah, the whole object oriented thing is kind of over my head at the moment. I'm sure it'll get better once I advance further in this course I'm taking. I'm far from an expert with C, it's just the language I'm most familiar with. Trying to advance to a point where I can start creating my own apps and build up a portfolio to hopefully one day get an actual job as a programmer. Or just strike gold with an app and retire at 30. Whichever works, really. Plan right now is to learn C# and then familiarize myself with Xamarin and start creating stuff. But I digress. I figured there'd be a method to do the splitting for me, but I wanted to figure out a way to do it on my own. So if I'm understanding this correctly, the variable in your example code named "nameSplit" becomes an array of strings that is split at the ' ' space char defined in the method call? Then if someone with a middle name entered their data it would create a third location in the array and the lastName variable would get the middle name while ignoring the actual last name at nameSplit[2]?
Depends on the API, some are well documented and some are not. What you can always do is use the object browser in the view menu to see the available namespaces, types, methods, etc.
I CAN C++!
That seems like a reasonable sort of explanation. It's not really about *processing power*, though: it's a quirk of the language, because we don't have a good way to return multiple pieces of data from a single method call, except to build a class or struct to wrap all of them up in a single object. To get into more detail: Value types (basic number types like int, long, double, etc, DateTime, and any struct) are passed by value. This means that passing one to a method results in the method being given a *copy* of the object. Reference types (string, object, and any class) are passed by reference. This means that passing one to a method means giving the method something like a pointer to the object, rather than a copy of it. out and ref arguments are passed to the method by reference, including passing references to objects by reference (like a pointer to a pointer). This allows us to assign to those arguments and let the calling context pick up the values we assigned. A return type is more idiomatic than an out parameter, especially if you have only one out param. ref arguments are pretty uncommon, in large part because they hard to reason about: void foo(ref object o) is basically C#-ese for 'foo is probably going to read o, and then change it to point someplace else'. As far as performance goes, C# is a semi-interpreted language with a garbage collector. If passing by ref is buying you huge performance gains, you may be doing something else wrong, like using structs all over when you ought to be using classes. &gt; what's a code smell? A "code smell" is a thing that isn't *necessarily* bad, but may indicate design or other problems downstream. In the case of out and ref, particularly with void methods, it's primarily non-idiomatic. An idiomatic solution to the problem you're trying to solve would probably look something like this: public class Name { public readonly string First; public readonly string Last; public Name(string name) { var n = name.Split(" "); First = n[0]; if (n.Length &gt; 1) { Last = n[1]; } } } which /u/CalvinR already pointed out.
This is a common gripe, and a lot of devs will most likely change API's based on how well they are documented. This is where the object browser is useful, worse case I've decompiled some DLL's to work out what they are actually doing. In a lot of cases if it is not well documented you are shit out of luck and will have to work it out yourself. I've done a fair bit of work with HP TRIM and the .NET API documentation is 12 pages (actually works out to around 4 pages by the time you take out the cover and table of contents etc). vs the 100+ for the older COM library. As a result most devs still use the COM library still even today. 
they have an open API?
&gt; But it also allows the player to rotate the ship wayyyy too fast. You didn't really ask a question so I'm guessing this is what you want to change. You can use a Quaternion slerp function to interpolate between the current rotation and the target rotation by a set amount.
Good investment IMO, SSDs are pretty cheap. It'll improve you productivity quite a bit.
Not for 500+ web devs
it's a local administator account, no i haven't checked if the UAC is enabled, yet.
Not to be that guy, but if you search you will see that there already are a few discussion on this subject.
Thank you for taking the time to write that up, you cleared up a lot of things for me :) 
Agreed that back in the days, it used to be pretty expensive of being a C# developer (Visual studio licence etc...) However, making a working eclipse env for java with the same level of features than visual studio takes time. In business, time is money and 600 bucks is way less than days to configure the eclipse crap.
Oh nice, thank you for the very informative reply. It definitely helps when you put the use cases in a nice perspective. :)
Directly after the `ShowDialog()` call. It only returns once the dialog is closed, until then the method doesn't continue. You could also attach a handler to the `DisplayForm`'s `Form.Closed` event.
In whichever method called newform.ShowDialog(). The newform object still exists. You can store user choices in public members of newform and access them from mainform after the display form is closed. 
Correct. If you wanted to just grab the last element you could pass `length - 1` as the index parameter.
UAC is where I would go with that next then. Have you checked to make sure the task is set to run with the highest privileges?
I'm experiencing the same thing. Bump!
https://status.nuget.org/ claims it is still up, but I am unable to reach the website through the browser, my phone, or in visual studio itself.
NuGet is unavailable plenty of times. Usually just for short. It's the reason why your deployments should be independent of NuGet.
My deployments are, however updating our packages does require it.
I can't resolve nuget.org using 8.8.8.8
&gt; Latest status update - April 15, 2016 &gt;11:50 (8 minutes prior to this post) &gt;Investigating - Some customers are experiencing difficulty connecting to nuget.org, we are actively investigating. (from https://status.nuget.org/) It does appear to be up for me at this time (USA-Michigan) --- &gt; Latest status update - April 15, 2016 &gt;12:34 &gt;Notice - Our DNS was having issues. Latest status at status.azure.com. The issue is resolved in most places - run an ipconfig /flushdns if you are still having trouble connecting. there you have it.
I actually can't get to the status page either half the time. Their CDN stuff is up , I got that link during one of the times it was up.
For me Nuget.org is up using my VPN in Canada, but not on the work network in Lousiana.
I'm currently trying to figure out how geotagging works so photos can be tagged on upload - other than that the code is a bit messy right now, if you want to give a hand in cleaning it up or if you think of a feature it might benefit from, I will accept a pull, 
A sneaky way you could do it is have an event handler on TextChanged, look for a delimiter, then change your Multiline property if there is one.
They don't have an API for uploading, this is entirely based on reverse engineering their private API - if you can somehow manage to get it to work with OAuth2 then I will gladly accept that change as I don't like using the password either. However the passwords aren't stored by the library, passed as securestrings and transmitted directly to Instagram over HTTPs. 
I stopped reading at this line: &gt; Visual Basic’s roots go way back. A language used to write desktop Windows applications, most apps more than 4 years old probably were written with it.
Kind of an interesting fun fact: when Elon Musk &amp; Co at Paypal were at a fork in the road trying to decide the best technical route to go to make the platform the most scaleable and maintainable there were pretty heated arguments over .NET/Visual Studio or open source. Elon was pro .NET/Visual Studio, even though more expensive, it allowed them to develop features faster/cleaner because of how good a tool VS was and how robust .NET was at the time.
LOL. Ironically, when I browse to: http://www.izenda.com/izenda-forms/ I see the following error: Error establishing a database connection
It is worth paying the price, there's many ways to not release breaking changes. It involves very deliberate management of your public and protected members. 
IMO: show both. You don't lose anything by allowing someone to enter a category and a range of IDs, just make them both optional (as long as at least one is filled in)
Thanks
&gt; interpreted [citation needed]
This is just as narrow-minded as his perspective. 
It was hyperbole on the same level of what the CEO was saying. Tongue in cheek kind of stuff. My only beef with startups is that they typically demand excessive hours and rarely fulfilled promises of huge payouts with options.
thnx thnx thnx thnx bro, thnx a lot bro, May God Bless You
Yea, but that versus a startup with little to no funding is a very different boat.
&gt;Poorly written trash. C# and VB.net are both interpreted languages. I don't think that word means what you think it means. 
im trying to stop the player falling through the top of a box. in english, im trying to make as follows: if (above the box &amp; in between the 2 sides) { set players position to top of the box remove the velocity in the y direction set check for jumping to false } However, the if statement is failing and allowing the player to fall through.
I don't know. The video said something about wanting stability and a slower pace of change, but nothing specific.
I could be misunderstanding, but I don't believe that your code is correctly doing the check that the Left position is between the two sides of your platform. In particular, I think the second inequality below should be a &lt; check instead: (player.Left &gt; platform.Left) &amp;&amp; (player.Left &gt; platform.Left + platform.Width)
&gt; interpreted I'm sorry perhaps a poor choice of words with so many trolls lurking about. I'm sure everyone who read this with half a brain realized i meant "Intermediate". Apologies to the world for mixing up my words for a minute, I do that sometimes. Though to be fair I AM an old fart who started programming in BASIC (not visual basic for all you young coders) , which actually WAS "interpreted". 
Hard to cite myself choosing the wrong word, sorry.
VS doesn't even have all of RS' functionality.
Yeah I'm using it for a small non essential app at work. The lack of documentation is my biggest issue. I haven't done much AD stuff yet.
As you venture down this rabbit hole, you're likely going to need to leave the managed world and venture into Win32 API via [P/Invoke](http://pinvoke.net). I've worked with window handles and messages extensively (in C# using both WinForms and even WPF). You can use [`EnumWindows`](https://msdn.microsoft.com/en-us/library/windows/desktop/ms633497\(v=vs.85\).aspx) or [`FindWindow`](https://msdn.microsoft.com/en-us/library/windows/desktop/ms633499\(v=vs.85\).aspx) to locate your `HWND`. Once you have that, you can use [`EnumChildWindows`](https://msdn.microsoft.com/en-us/library/windows/desktop/ms633494\(v=vs.85\).aspx) if you need to find dialogs (I believe they are considered children). If it is just a simple OK dialog, you can likely close it with [`DestroyWindow`](https://msdn.microsoft.com/en-us/library/windows/desktop/ms632682\(v=vs.85\).aspx). For options, you can enumerate the buttons (which are also considered "windows") to find them and send the proper messages. For sending keys, you will want to send `WM_KEYDOWN`, `WM_CHAR`, and `WM_KEYUP` [keyboard messages](https://msdn.microsoft.com/en-us/library/windows/desktop/ms646280\(v=vs.85\).aspx) via [`PostMessage`](https://msdn.microsoft.com/en-us/library/windows/desktop/ms644944\(v=vs.85\).aspx). You can also send `WM_CLOSE` messages to the dialog to close it more gracefully via [`SendMessage`](https://msdn.microsoft.com/en-us/library/windows/desktop/ms644950\(v=vs.85\).aspx). Notice the difference in the documentation for WM messages: `sent` vs `post`. These expectations correlate to `SendMessage` vs `PostMessage`and how you should notify the window of the message. Send requires the window to handle the message immediately (blocking) while posting will place it in the window's message queue to be processed eventually (asynchronously) by the message pump. If you also need to determine the process ID for the associated window, use [`GetWindowThreadProcessId`](https://msdn.microsoft.com/en-us/library/windows/desktop/ms633522\(v=vs.85\).aspx). From there you can call `OpenProcess` or do whatever else you may need.
Johnny Bravo operator.
Good points. * **Consistency** by making your methods follow a cohesive pattern if possible. For example, in a coordinate system.. you wouldn't want half of your functions with `(y, x)` parameters while the others use `(x, y)` convention. * **Flexibility** by taking the most abstract form of arguments possible in your functions. This means preferring `IEnumable&lt;T&gt;` and `IList&lt;T&gt;` over concrete implementations like `List&lt;T&gt;` and `Array&lt;T&gt;`. * **Immutability** by making your properties and custom data structures read-only after creation (constructor). Certain fields may be writeable but try to keep it to a minimum. This helps with thread safety later on when you start working with concurrency and parallelism. * **Resiliency** by checking the sanity of parameters at the start of public methods. Check for null, disposed, invalid ranges/states, and throw the appropriate exceptions *before* you get knee deep in the algorithm. This includes errors that propagate later on, don't just silently return null.. throw an exception. Don't be too hard on yourself. Even those with years of experience developing frameworks make mistakes. "Good design comes from experience. Experience comes from bad design." -- *Fred Brooks*
I've had a very similar approach to this in c. This will eventually get your account suspended and banned sooner or later.
&gt;&gt; interpreted &gt;I'm sorry perhaps a poor choice of words with so many trolls lurking about. I'm sure everyone who read this with half a brain realized i meant "Intermediate". Well this was either a dumb way to try to cover up your mistake, just to refuse to admit you were wrong or you seem to know *even* less about .NET than you think. Neither C# nor VB.NET are intermediate languages. The intermediate language they compile to is MSIL or Microsoft Intermediate Language. 
 &gt;* **Flexibility** by taking the most abstract form of arguments possible in your functions. This means preferring `IEnumable&lt;T&gt;` and `IList&lt;T&gt;` over concrete implementations like `List&lt;T&gt;` and `Array&lt;T&gt;`. With a big exception for byte[] but OP probably isn't making a library where you pass memory buffers around 
True true. I spoke to the autofac guys today via Twitter - it's getting there but its slow going. As for shimming - one of the core tenets of RC2 is moving to .NET standard libraries... Hopefully never see problems like that again. 
With linked lists and the latest .NET runtime, .NET will do a pretty good job of keeping linked list nodes contiguous in memory, especially in an isolated benchmark where memory is nice and open for the allocator/garbage collector to do that. You might find that List starts to win in more cases when running in the context of a complete application. Only way to find out is to test. The garbage collector can actually move things around in memory as you use them to avoid cache misses. That said I expect List will still generally win until you are doing random insertions much more often than iterations. 
You will have at least one result, so you're effectively requesting the second result without reading the data of the first. Edit: try reading the rows of the first result first before requesting the next result.
PhantomJS has bindings as well. 
Selenium and PhantomJS will do the job and is headless. I wrote a scrapper for Packtpub free book of the day using those, all in C#.
Although I'm sure you'll get some help here /r/dotnet is more web oriented so it might be worth asking in there as well.
Currently for proper web development there is no way around NodeJS for the tooling. However, this doesn't mean you need to use it. You can also just reference the systemjs JavaScript file and reference it. All your JavaScript files must be accessible, and then they're just being loaded by the browser. With bundling you will have a lot more trouble - none of the module loaders of the JS world work well together with the ASP.NET optimization package. Embracing the JS tooling is the best option.
&gt; /r/dotnet Ok I deff will. thanks
Yeah... unfortunately that's not true :/
yep, you are basically stuck with the 'one js to rule them all' which is so not C#'ish .. then again, using plain requirejs / systemjs means dozens of server callbacks for each module.. :(
Fiddler is super helpful, I totally agree. Here is a link to save you a search. http://www.telerik.com/fiddler
Is your scraper in a public repo?
&gt; New to c#, problem running program Rule #1 for getting help; express your problem clearly and concisely. What is the "problem running program" that you have? What does it do? What do you expect it to do? Do you get any error messages? If so, exactly what do they say? Tip: For better formatting of your post, indent **all** code lines by 4 more spaces. EDIT: Also, where are your `RegularCustomer` and `FrequentCustomer` class definitions? 
So .NET is strongly typed. If you declare a variable as some type, then you know what's going to be in that variable and you can make some assumptions and optimizations around that. `dynamic` makes all that invalid, because a dynamic variable can be anything at any time, and the compiler doesn't get to optimize around it. [This SO discussion](http://stackoverflow.com/questions/7478387/how-does-having-a-dynamic-variable-affect-performance) covers it better than I could. But basically, the CLR wasn't designed to be dynamic, and `dynamic` causes the code to jump through inefficient hoops to implement it.
&gt; This SO discussion then why was dynamic introduced into the language?
 aRegularCustomer.CustNum = 2514; aRegularCustomer.custBalance = 765.00; aFrequentCustomer.custNum = 5719; aFrequentCustomer.CustBalance = 2500.00; Careful with your variables, you try to access the private variables custNum and custBalance, where you actually only want CustNum and CustBal. On top of that, you try to access the property CustBalance, which doesn't exist. Moreover, CustNum itself is private. It should be public. As another comment said, use auto properties so you don't have to deal with intermediary private variables: class Customer { public int CustNum { get; set; } }
A lot of people are saying to use Visual Studio 2015 Community which is pretty good. But when I saw you wanted javascript, ASP.Net; I'm gonna assume you may want to look into Razor Sytanx. I would recommend to look at [Microsoft WebMatrix 3](https://www.microsoft.com/web/webmatrix/). Its light weight, and has the ability to load your project easily into Visual Studio at the push of a button if you need to do some heavy coding. It also emulates IIS so you don't need to install the service which can slow down your machine.
+1 for fiddler. I would like to add that a lot of network traffic can be viewed in the chrome F12 menu under 'network', including all of the request and response headers, cookies, data, etc. 
[removed]
You might like /r/programmingbuddies too; sounds exactly like what you're looking for.
 public IEnumerator&lt;TItem&gt; IEnumerable&lt;TItem&gt;.GetEnumerator() { return new TreeEnumerator&lt;TItem&gt;(this); } Explicit interface implementations can't have an access modifier, that won't even compile. Remove either the `public` or the `IEnumerable&lt;TItem&gt;.`.
Nope, looks fine to me otherwise.
in Tree.cs change public IEnumerator&lt;TItem&gt; IEnumerable&lt;TItem&gt;.GetEnumerator() { return new TreeEnumerator&lt;TItem&gt;(this); } to IEnumerator&lt;TItem&gt; IEnumerable&lt;TItem&gt;.GetEnumerator() { return new TreeEnumerator&lt;TItem&gt;(this); } notice that this method declaration "interfacename.methodname" is a "explicit interface implementation" and in those cases the public keyword is not valid ... because it is already public (from the interface) i suspect you tried to solve all the errors in your errorlist in sequential order... sometimes it is best to examine if one error is caused by another error in the list that needs fixing first 
AH, I am an idiot. I just referenced the wrong file. Thanks for your help!
It, sadly, is not. I'm not sure if it is a good idea since it is likely breaking some Terms of Service for the site.
Your explicit implementation of the non-generic interface should simply call the other version. Make the other one non-explicit.
Odds are: Cores and memory of your machine are not the bottle neck. The bottle neck will remain the IO (downloading the files and storing them to the disk). You should avoid meddling with threads yourself, it's difficult to getting them efficient and right. You should look up into async &amp; await, which is a very nice to solve things like this. You would just asynchronously start the downloads and file writes, which are all IO bound operations. The CPU hardly has anything to do here. The could would be roughly something like this: public static void Main(string args[]) { // This is just to start an async method in a sync context, // since the entry point of console applications is not async. MainAsync() .GetAwaiter() .GetResult(); } public static async Task MainAsync() { var filesToDownload = new List&lt;string&gt; { "http://mirror.internode.on.net/pub/test/1meg.test", "http://mirror.internode.on.net/pub/test/5meg.test1", "http://mirror.internode.on.net/pub/test/10meg.test", "http://mirror.internode.on.net/pub/test/50meg.test", "http://mirror.internode.on.net/pub/test/1meg.test", "http://mirror.internode.on.net/pub/test/10meg.test", "http://mirror.internode.on.net/pub/test/1meg.test", "http://mirror.internode.on.net/pub/test/1meg.test", "http://mirror.internode.on.net/pub/test/1meg.test", "http://mirror.internode.on.net/pub/test/5meg.test1" }; var downloadFilesTask = DownloadFiles(filesToDownload, 3); await downloadFilesTask; } public async Task DownloadFiles(List&lt;string&gt; files, int concurrentDownloads) { var filesQueue = new ConcurrentQueue&lt;string&gt;(files); var semaphore = new SemaphoreSlim(concurrentDownloads); var activeDownloads = new ConcurrentDictionary&lt;Task, Task&gt;(); var downloadStarterTask = Task.Run(async () =&gt; { // While we have files while (filesQueue.Any()) { // Wait for the semaphore, to limit the number of concurrent downloads. await semaphore.WaitAsync(); // Try to get the next file to download. If this returns false, it means // the queue is empty and we finished here. string nextFile; if (filesQueue.TryDequeue(out nextFile)) { // Just get a temporary file name to store the file to. var destination = Path.Combine(Path.GetTempPath(), Path.GetTempFileName()); // Start the download task. Do not await it here, so it will run asynchronous. var downloadTask = DownloadFile(nextFile, destination); // Store the download task as an active download. activeDownloads.TryAdd(downloadTask, downloadTask); // Add a continuation, which will run once the download task finished. downloadTask.ContinueWith(t =&gt; { // Release the semaphore, opening up a slot for the next task. semaphore.Release(); // Remove the task from the active downloads dictionary. activeDownloads.TryRemove(downloadTask, out downloadTask); }, TaskContinuationOptions.ExecuteSynchronously) // We don't care about this particular continuation. It can't fail. // Use our Ignore extension method to avoid the compiler warning // that we are not awaiting this task. .Ignore(); } } }); // Wait for all downloads to be started await downloadStarterTask; // Wait for pending downloads to be finished await Task.WhenAll(activeDownloads.Values); } public async Task DownloadFile(string uri, string destination) { Console.WriteLine($"Downloading {uri} and storing it to {destination}"); var httpClient = new HttpClient(); var fileBytes = await httpClient.GetByteArrayAsync(uri); Console.WriteLine($"Finished downloading {uri}, now storing to {destination}"); using (var fileStream = new FileStream(destination, FileMode.Create)) { await fileStream.WriteAsync(fileBytes, 0, fileBytes.Length); } Console.WriteLine($"Finished storing {uri} to {destination}"); } internal static class TaskExtensions { // This method does nothing with the task. It's just used to avoid the compiler warning // that we run a task, but not await it. public static void Ignore(this Task task) { } } Using the semaphore you can limit the amount of concurrent downloads using the `concurrentDownloads` argument. This is pretty much state-of-the-art how you should do a task like yours nowadays. This method assumes you have a fixed list of files to download. You could easily adjust the code to have it running endlessly, by providing some kind of class that returns the next file to download. Instead of `while (filesQueue.Any())` you would pass a `CancellationToken` and do `while (!cancellationToken.IsCancellationRequested)`. Instead of `if (filesQueue.TryDequeue(out nextFile))` you would do `if (yourClassThatReturnsNextFileToDownload.GetNext(out nextFile))`. Add an `else` branch where you do `await Task.Delay(1000)` to wait a second when there are no files to download, to prevent clogging the task in useless work. Then the task would endless download files, always checking your class for the next file to download. If you want to finish, just use the `CancellationToken` to cancel the task. It will stop downloading new files, wait for the running downloads to finish and then finish the task.
If you are using VS you should be informed on what errors are in the code. Your best friend in coding is intellisense.
This is not strictly true. IL doesn't really support many dynamic features, they are more in the run time.
Have you considered using Parallel.Foreach? You can even control the number of parallel threads with just a parameter.
Nice to learn about this. Any more resources? I thought everything in the .net world was compiled to IL.
I was expecting that if I set the bar to f.e. 100 and everytime I click on the monster I want to kill it then the progress bar will decrease until it hit 0, apparently I was wrong
The filewatcher is good, but if you are monitoring a network share the filewatcher is unreliable and polling is a better technique.
I like books for learning, I would recommend a few not just about C#, but software engineering as a whole. * CLR through C# - walks you through how C# is implemented in the Common Language Runtime. Unsure if this will all be relevant once the "new" .NET becomes commonly used. * Code Complete 2 * Pragmatic Programmer - old but still good. Main takeaway is think a lot before you code.
Does it have support for vs 2015? We used to use the heck out of a plug in like this (or maybe it was this one) but when we upgraded vs it didn't work any longer
&gt; ConcurrentDictionary&lt;Task, Task&gt;() I'm curious why you use this particular construct. It doesn't seem to add any inherent value into your algorithm unless I'm missing something.
I actually figured that out a few minutes later. You're accessing the .Values outside of the semaphore so that makes sense. I'd be curious if the ConcurrentDictionary actually out performs the ConcurrentBag for small numbers of items, but I'm not *that* curious on a Sunday.
Is this GDI+ images only? Or is WPF supported?
There is no way to get experience without experience. You can't simply read your way to experience.
Cool! I'm looking to do something similar. Can you explain a bit about how you went about creating this? Was the initial project a VS template, or something you created/found on your own?
It's free. If you get prompted for a license or account, you'll need to update VS2015: In VS2015: Tools &gt; Options &gt; Xamarin &gt; Other and click the Check for updates link. https://i.imgur.com/MudV89E.png 
Thank you!
Removed: Rule 3. Also, this is probably a more appropriate question for /r/cscareerquestions and other job-related subreddits.
checkIfHit takes 1 argument. You are passing 0. Hence the error
checkIfHit requires an argument (Form1 Bullet) but you are passing it nothing (i.e. ali.checkIfHit() &lt;--- nothing in the parenthesis)
thanks, i got that just not sure what the argument is meant to be thanks for the contribution 
its a picture box 
Fantastic thanks very much
You've said you learn better with videos so I'll start with them: Videos: I'de start off signing up for [VS Dev Essentials](https://www.visualstudio.com/en-us/products/visual-studio-dev-essentials-vs.aspx). It's free and you get some great resources. * [Pluralsight](https://www.pluralsight.com/) - A great resource for more than just C# and software development. In particular the videos by Jon Skeet are great but have a look around and see what you find. It costs but you can get a 3 month free trial at VS Dev Essentials. * [Microsoft Virtual Academy](https://mva.microsoft.com/) - Another great resource for more than just C#. * [Channel9](https://channel9.msdn.com/) - Some great videos available here to learn from but for me at least the highlights are the MS events that they make available and the blogs (in particular [Coding4Fun](https://channel9.msdn.com/coding4fun/blog)) * I'm not aware of anything related to C# at the following links but I think some of the best things I have learnt about software development were more generic and could be applied to any language. So: [Udacity](https://www.udacity.com/courses/all) and [Coursera](https://www.coursera.org/) Books: * [C# in a Nutshell](http://www.albahari.com/nutshell/) * [Dependency Injection in .NET](http://www.amazon.com/Dependency-Injection-NET-Mark-Seemann/dp/1935182501/ref=pd_sim_14_6?ie=UTF8&amp;dpID=41LsqcfxGbL&amp;dpSrc=sims&amp;preST=_AC_UL320_SR256%2C320_&amp;refRID=0PB39NZRH1JARX5X3F20) * [CLR via C#](http://www.amazon.com/CLR-via-4th-Developer-Reference/dp/0735667454) * [C# in Depth](http://www.amazon.com/Depth-3rd-Edition-Jon-Skeet/dp/161729134X) Blogs: * [Eric Lippert](https://ericlippert.com/) * [Jon Skeet](https://codeblog.jonskeet.uk/) * [Scott Hanselman](http://www.hanselman.com/blog/) * and more, but I think these are my favourites Code: I think looking at other peoples code is a great way to learn and github is excellent for that. One thing I have started to do recently is to find a project on github and then start to break it down. Understanding how it works, trying to get an idea as to why decisions were made (A lot of the time there is no right or wrong answer but more a trade off between A and B), etc. As well as github you can check out [Reference Source](http://referencesource.microsoft.com/) Meetups: I personally think development is much more social than a lot of people like to admit to, I know for sure that I work better when I have someone else to discuss ideas and decisions with. You've mentioned that you are the sole developer at your current place so it might be worth trying to find a local .NET User Group or just a software development meetup in your area. I've learnt a lot from people I barely know just because of something they mentioned in passing at a meetup and I decided to go off and research it when I got home or because I've mentioned what I was doing and they had some experience and suggested things to try or avoid etc. Good luck!
The only way to go from a mediocre developer to a great developer is time.
Neat, I could use this. Tweeted and starred the project. Thanks
Lots of read this, watch that here. That works great for lots of people. Props if it does for you. Personally, my greatest increases of knowledge have been when I'm tossed into the middle of some project and need to learn my way out. This often happens when I switch jobs, but I also invent the situation for myself often. On your own time, when there's no other voices or pressures, pick a problem in code that you've encountered that you know wasn't solved well. Something that while you're reading it, writing it, or adding to it, *felt* like there should be a better way to do this. Start over at square one. How *should* it have been solved? Solve it. Correctly. Find a solution that flows; something elegant; something that makes you smile like reading a good poem or looking at a work of art. That's the stage where I do the most reading - while going out on the hunt trying to find something specific. It's difficult, but a much more targeted learning. Furthermore, you'll also not only be learning the new concepts, but also applying them then and there. This helps commit the knowledge to memory better and also helps with future pattern recognition. The most basic building block is the object-oriented paradigm. Have you ever had a time where two systems or components needed to do something very similar but different in a few very specific ways? Learn how to do it with interfaces and inheritance. Start here if you don't feel confident with OOP. SOLID? DI? Good unit testing? The luster of these things is greatly tarnished by poor or flawed understandings of OOP.
I think this is the gist of it (someone please correct me if I'm wrong): The Roslyn compiler parses all text in a program and stores it as a [ParsedSyntaxTree](https://github.com/dotnet/roslyn/blob/56f605c41915317ccdb925f66974ee52282609e7/src/Compilers/CSharp/Portable/Syntax/CSharpSyntaxTree.ParsedSyntaxTree.cs), a tree of [CSharpSyntaxNodes](https://github.com/dotnet/roslyn/blob/2dcb0b4b3b20d91d97df0a7d119a66136e48e120/src/Compilers/CSharp/Portable/Syntax/CSharpSyntaxNode.cs). There are different types of syntax nodes, such as those for methods, variable expressions, lambda expressions, etc. Some of the classes that inherit from CSharpSyntaxNode and go in that tree (e.g. NamespaceDeclarationSyntax, ClassDeclarationSyntax, MethodDeclarationSyntax) have properties that store open and closed braces. They are of type [SyntaxToken](https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/Syntax/InternalSyntax/SyntaxToken.cs) and are differentiateed by a SyntaxKind enum value of OpenBraceToken or ClosedBraceToken, respectively. [Here's](https://github.com/dotnet/roslyn/wiki/Roslyn%20Overview#working-with-syntax) more info on how Roslyn does syntax.
thanks for the contrabution this did not work i tryed just image and bitmap but neatere worked i have done the submition now so thanks 
Yup! I'm currently in the middle of the book and it's taught me a lot; albeit in its quirky ways. 
I largely seem to thrive on learning by experimenting, but I'll check out these books as well! Thank you :)
You are correct, I understand just fine, but my communication skills seem to suck balls. Here is a definition I did NOT write. And for the records, sorry I told you to F yourself. Should not drink and post :-) C# is a type-safe, managed and object oriented language, which is compiled by .Net framework for generating intermediate language (IL). Now, back to the actual topic??
AngleSharp supports Javascript engines (JINT works out of the box).
Look out for project rider from jetbrains as well. Think of it as an ide with just resharper in it. It should be released later this year but is available for free via the EAP.
I actually found the filewatcher to be unreliable on local drives as well. When multiple operations happen in quick succession, then the filewatcher sometimes misses these operations. We found polling to be much more reliable.
you are re creating your list string every time you have the user choose his next action. You need to store the list string variable at the top of the main method just like how you are storing your isrunning variable. Otherwise it will be recreated every time thus wiping out your previous changes to the variable.
Hi I wonder whether this would be better suited to /r/learncsharp Anyway, when asking a question like this, there are a few things you could do which will help ensure you get the kind of response you're after. Firstly, give more detail about the exact problem you're having. Currently we only know what code you've written, not what issue you're experiencing. It is also helpful to list the exact steps to reproduce the problem. Does the code run at all? Does it react when you press the number 1? Is it that you press 1 but then nothing happens or that you press 1, type your text in, then press 2 and don't see the contents of your list? 