How about you have your handler which owns all the cards subscribe to events you define on the cards. 
Registry problems? You need linux.
What are the OS's of the systems?
You're doing overkill, probably. If you need speed then store just a symmetric encryption/decryption key that is itself protected by public/private keys. &amp;#x200B; Where to store your master key? Windows provides that functionality already. [**https://docs.microsoft.com/en-us/dotnet/standard/security/how-to-store-asymmetric-keys-in-a-key-container**](https://docs.microsoft.com/en-us/dotnet/standard/security/how-to-store-asymmetric-keys-in-a-key-container) &amp;#x200B; &amp;#x200B;
What's been the amount of free ram on both devices? How much memory was assigned to the process? I think to recall that GC cleanups are carried out when the process would need to ask the OS for more memory.
Stop trying to find info "at a glance" and actually read the documentation? Most of the overloads even have an example.
I Don’t know any good resources. Are you just curious how to do one in general? Maybe I could help with a specific question. 
dotnetpearls sometimes a nicer job of listing readable parameters, but it's page on groupby doesn't even have overloads: https://www.dotnetperls.com/groupby The MSDN page I linked too is just too hard to read at a glance. If you scroll down they do break it down and name the parameters in a human readable format, but not in a way that you can see all of the overloads in a chart. First I see this: and my eyes glaze over: &gt; GroupBy&lt;TSource,TKey,TElement,TResult&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource,TKey&gt;, Func&lt;TSource,TElement&gt;, Func&lt;TKey,IEnumerable&lt;TElement&gt;,TResult&gt;) *this is not useful to me.* Yes formal parameters are important to be part of the API but why list all of that first? I scroll down and then the docs break down each of the overloads in a more readable format, but now the data is so spread out you cannot compare overload methods at a glance. If you aren't clicking on the link, it looks slightly more spread out than this: &gt;**Parameters** &gt; **source** &gt;IEnumerable&lt;TSource&gt; &gt;&gt;An IEnumerable&lt;T&gt; whose elements to group. &gt;**keySelector** &gt; Func&lt;TSource,TKey&gt; &gt;&gt;A function to extract the key for each element. &gt;**elementSelector** &gt; Func&lt;TSource,TElement&gt; &gt;&gt;A function to map each source element to an element in an IGrouping&lt;TKey,TElement&gt;. &gt;**resultSelector** &gt; Func&lt;TKey,IEnumerable&lt;TElement&gt;,TResult&gt; &gt;&gt;A function to create a result value from each group. &gt;**comparer** &gt; IEqualityComparer&lt;TKey&gt; &gt;&gt;An IEqualityComparer&lt;T&gt; to compare keys. ------- Basically, I want an initial chart more like: &gt;GroupBy( Source, keySelector, elementSelector , resultSelector , comparer) Give me the details later once I discern what overload I need. ------------- I get that less complex methods are readable, and they are following a pattern, but no human has ever read the method signature a 4th time when they get to the example and MSDN drops this "human readable" sentence: &gt; The following code example demonstrates how to use GroupBy&lt;TSource,TKey,TElement,TResult&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource,TKey&gt;, Func&lt;TSource,TElement&gt;, Func&lt;TKey,IEnumerable&lt;TElement&gt;,TResult&gt;) to group the projected elements of a sequence and then project a sequence of results of type TResult. Any additional resources? I see stuff like this, and I just go with the default simple stuff and use additional code to get my Linq queries where I need to go. I don't take the time to learn new tricks. 
Hence the examples in the documentation.... Besides: he explicitly asked for documentation.
I’m not offended or a fan of JavaScript, I’ve probably only used it twice in the last year. “Javashit”is childish, and it’s not even funny. Do and say what you want, but I’m giving you a heads up that it’s cringe and makes me not want to take you seriously.
Number of CPU/cores, total RAM, available RAM at the time of the test. Other applications running during the test. Version of .Net. So many variables.
Yes
Thank you for clearing this up. 
I'm new to C# and I have to say that its documentation compared to MDN's is just so inferior and horrible. At first you find a little piece of informations then as you scroll down, you see horrible formatted "x &lt;x&gt;(), y &lt;w&gt;(), z &lt;o&gt;()" in your face with little to no good examples nor formatting nor good explaining, either. It's like the complete opposite of MDN. It really needs a revamp. 
When you say "running with kestrel", do you mean running with `dotnet`? Because there are (at least) 3 ways to run your app. IIS Express, console, and docker. Additionally, have you tried with curl or another non-browser tool (i.e., Postman)?
You dropped this \ *** ^^&amp;#32;To&amp;#32;prevent&amp;#32;anymore&amp;#32;lost&amp;#32;limbs&amp;#32;throughout&amp;#32;Reddit,&amp;#32;correctly&amp;#32;escape&amp;#32;the&amp;#32;arms&amp;#32;and&amp;#32;shoulders&amp;#32;by&amp;#32;typing&amp;#32;the&amp;#32;shrug&amp;#32;as&amp;#32;`¯\\\_(ツ)_/¯`&amp;#32;or&amp;#32;`¯\\\_(ツ)\_/¯` [^^Click&amp;#32;here&amp;#32;to&amp;#32;see&amp;#32;why&amp;#32;this&amp;#32;is&amp;#32;necessary](https://np.reddit.com/r/OutOfTheLoop/comments/3fbrg3/is_there_a_reason_why_the_arm_is_always_missing/ctn5gbf/)
If Form 1 is your starting form, then you'll never going to trigger Form1\_Load on that instance again because you're hiding it, so your labels' texts are going to be null or empty. When you show Form 2 with `ShowDialog()` the current line of code on Form1 stays there until you unload Form2, so you end up with the first instance of Form1 in the back. On Form2 you're instantiating two Form1 objects (like others have said) and show them individually one by one, assigning one property on each one and then hiding Form2 after ageedit is unloaded. The properties should be created on your edit form (Form2), not where you want to use/show them. The code for Form1 should be something like this: Private Sub btnedit_Click(sender As System.Object, e As System.EventArgs) Handles btnedit.Click Dim editor as new Form2 'Create a new Form2 object to edit name and age 'You can add here the initial values before loading the editor window (editor.Agepass and editor.Namepass) editor.ShowDialog() 'The cursor stays here until all work is finished in the editor window lblusername.Text=editor.Namepass 'Even if you close the editor form, since the object was created here, lbluserage.Text=editor.Agepass 'you can access their properties before disposing it editor.Dispose() 'Remove the form from memory 'Me.Hide() 'Not needed anymore End Sub and on Form2 you only need to assign the values to the properties (`Me.Namepass` and `Me.Agepass`) then close the window (`Me.Close()`) on the Save button
I concurr with what /u/readmond said , in this case I'd trigger the GC manually. I once had a discord bot that gained memory usage in the range of 10s of MB per day, and GC literally never ran. Running it manually (I just tucked it away inside the end of the command handler) completely solved it without any noticeable performance penalty.
Alright, I'll try chuck a bunch of GC.Collect() immediately after I remove references
It's the only time I've ever had it happen, and I was disposing of my objects. The GC has to run to actually release the memory, however. It was never triggering, so it never released the memory, and while the system had a lot of memory, there was no reason for an app that starts at 12MB of memory use to get to several GB before GC triggers.
Both are running Windows 7 SP1
Why i stated "generally" :) Could have been a leak in the unmanaged code or something. Id always be worried at manually forcing collection but im sure there are cases where its necessary
I'd agree on this - before today. I've always had my programs have their memory freed up in due time and never had to call the GC manually. That being said I'm not ruling out my code being bad. It's my first time using the HtmlAgilityPack and it's a file downloader so I would wager that I've got gigabytes of DOM elements tucked away in memory. What really confused me is that it performed fine on other devices, but fails on some.
GC has two modes: server and non-server. (See [the docs](https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals#workstation-and-server-garbage-collection)) Is it possible that your devices use different GC modes? &amp;#x200B; 
&gt;Basically you've hit an annoying problem where you now have to decide whether you want to REALLY learn how to program. You'll either quit, or learn an entirely new way of structuring your code based on this one problem, or find a really bad half-assed hacky solution which isn't great. I see, I guess I have a lot to learn now. I might try out some of the points you mentioned, and see how it goes. Thanks anyway!
No, don't. Why garbage collect when it's not an issue? GC isn't going to run until it needs to - thTs why it's so efficient
Messages. You have a simple messenger (just a static class with a SendMessage and perhaps an event things can subscribe to). Your handler class subscribes to the message broker's event, then your card sends a message about what happened. The message is sent to everyone who is subscribed. It's one of the best ways to decouple code. You can get clever and have subscribers choose what messages they subscribe to, have private messengers shared between a small set of related bits, weak reference event handlers so you don't have to worry about unregistering at the end of an object's life and so on. The great thing is, your handler gets the messages, but so does anything else interested. Want to write a log of all the cards selected? Let a log class listen to the events. Much cleaner than scattering logging calls everywhere. 
\&gt; GC isn't going to run until it needs to What decides this though? The OS? I don't really trust windows or even linux to correctly tell applications that there is memory pressure. In my experience using low RAM systems (4GB) both OSs prefer to just use the HDD for swap instead of triggering GC.
The old MSDN pages were a lot cleaner and easier to read... And so much better than MDN. The new docs are a mess.
Is there any archived or old pages or anything about the old MSDN pages?
Not sure if this is anything that might cause an issue but the docs (https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals) talk a lot about Virtual Memory. Could one machine have more virtual memory allocated than the other which then might postpone the clean up? I'm talking actual Windows Virtual Memory found in here: https://www.online-tech-tips.com/computer-tips/simple-ways-to-increase-your-computers-performace-configuring-the-paging-file/
Based on your and other people responses logic was moved out from getter, setter was added and the property is set at right times in the code. Thank You for Your help.
Even calling `GC.Collect` doesn't mean the memory gets released back to the system.
Tried this so far but I didn't get the desired result: dynamic json2 = JObject.Parse(json); json2 = json2["dataSet"]; &amp;#x200B;
Yeah, i could if they told me which standards they were referring their vision to... This was thrown like that : **the standards.** So now i'm understanding i'm not the only one thinking that this statement was biaised as our solution needs better response time, a UI-UX rework in order to *look* more in-time and synergize with the people. &amp;#x200B; Thank you all for your time ! &amp;#x200B; You guys below made me f-ing laugh, **LOUD** 
Your opinion is somehow what triggered me. Starting a dev project all over just because some people told us to, is like telling that the computer is broken because the user told us so. &amp;#x200B;
From a technical point, this is very interseting from you to point out the razor syntax, that oc we're using :) And the front/back end part was thought after the audit inside the dev team, if something changes, it's the frontend (in order to allow younger people to join us to be in charge of this part) &amp;#x200B; Thank you for your answer :)
The reply has just been sent, we're looking forward to their expertise in future-ready / AI compliant / big-data friendly solutions. I'm seriously having fun reading all your replies, i thought i really wasn't ready to understand what it takes, but there's nothing to understand (in their report). :')
Edulinq by Jon Skeet is slower than MSDN, but if you have the time I'd recommend it. https://codeblog.jonskeet.uk/category/edulinq/
Did using *Shared* as opposed to *Static* work? (Sorry, I write mostly C#)
You could deserialize the string into a dynamic object and then just access the property and set to a new variable. If you want the array back as a string then you could just serialize that variable. 
Solved! dynamic filteredJson = JObject.Parse(json)["dataSet"].ToString(); &amp;#x200B;
Found the solution on the exact moment of your reply, thank you!
Not always. Sometimes it can get stuck. Ie batch processing.
Managed to make a process that reads the original DB structure files we have, create all the objects and save them out to a single file, and can then read them back into a datasource for my datagrid from there! Thank You :) 
While this does solve the problem, I wouldn't use dynamic.... Id use a real concrete object and deserialse the json into that, not only then can you ensure type safety but you also reduce the probability of run time errors imo 😊
Oh yeah it is... i doubt we'll listen to their final report. We'll take to good, throw out the bad stuff.
But increase memory pressure first!
Honestly, i don't really know why you used so much the word Javashit if you're saying that you're a novice, but it sounds funny and didn't affect my judgement in the whole message, which was properly written. :) ...and the part about the weight of your words is very useful, the intention is nice as well so thank you !
But how does the CLR know when to try to release memory... Surely it doesn't make those decisions independently of the OS? 
Honestly, the way I get what you're looking for is with intellisense, where you can use the arrows to cycle through the overloads and see the parameter names. Then, if I find an overload and it's not obvious what it does, I go into the MSDN page for that particular overload.
Low PHYSICAL memory, RAM. It won't switch to HDD because without sending that notification of low physical memory first
[This is the `ArgumentNulLException` line](https://github.com/thiagolunardi/FeatureToggle/blob/272cea6afc66213638921da16f7ca2103665ad42/src/TL.FeatureToggles.FeatureToggle/ToggleRouter.cs#L25) And the line above it: `if (string.IsNullOrEmpty(featureName) || string.IsNullOrWhiteSpace(featureName))` is also giving me a LOLUT? 
Regarding consistency: - a full-on database will give you the whole ACID "for free". SQLite is used as a document format in some applications and they promote this use case on their website. - Do you need to write the document in-place? The usual approach is to write the new version to a different place (on the same volume) and then call something like [ReplaceFile](https://docs.microsoft.com/en-us/windows/desktop/api/winbase/nf-winbase-replacefilea) API which will atomically replace them preventing corruption.
Sure thing! This is how you would create a map: &amp;#x200B; public class MyObjectProfile : Profile { public MyObjectProfile() { CreateMap&lt;SourceObject, DestinationObject&gt;() .ForMember(x =&gt; x.MyPropertyThatExistsOnlyOnThisObject, src =&gt; src.Ignore) .ForMember(x =&gt; x.SomeOtherProperty, src =&gt; src.MapFrom(y =&gt; y.ThisObjectsSameProperty)); } } &amp;#x200B; You'll need to register this mapping, but just Google how to register the mappings using whatever Dependency Injection framework you're using, and if you're using .Net Framework or .Net Core. &amp;#x200B; Once it's registered you just need to use it as follows: var myMappedObject = mapper.Map&lt;DestinationObject&gt;(SourceObject); &amp;#x200B; Just as a note theres lots of other cool stuff you can do in mapping profiles, just don't do too much in them or they become overly complicated and a huge pain to maintain, like anything else I suppose haha.
Don't try to control what you never can. If you somehow are relying on deterministic GC, you are walking a dark and lonely path I think.
Woohoo, more magic strings all over the project, just what I want! /s
I didn't try out Shared
Same happens to me. Started when I updated visual studio to latest version few days (up to a week) before. Half of the colleges which have not updated studio to latest patch, have no problem. The other part part switched to kestrel.
Title is a bit misleading, this code was not written by Martin Fowler
So you deserrialize it, just to serialize it again, in order to desrerialize it again? Why not just use a proper class and pass on the array?
To be fair, the API documentation for LINQ documentation is kind of awkward to read. It being a set of extension methods means that 1) everything in MSDN that happens to implement `IEnumerable&lt;T&gt;` now gets polluted with LINQ methods, regardless of how much value they add, and 2) the method signatures being technically correct but factually misleading, as you're never going to call them that way.
Thank you, I'll check out SQLite's capabilities. The problem is that the document migth contain large media files and it makes hard to update the document by creating a copy and replacing the file names and what not. On the other hand I don't see how I can avoid that.
https://www.reddit.com/r/csharp/comments/a0vqxo/elvis_operator_in_expressions_and_why_probably/ 
Polymorphism will ultimately screw you up if you try to use it as a foundation rather than a tool. Composition is better. [ECS, from games,](https://en.wikipedia.org/wiki/Entity%E2%80%93component%E2%80%93system) suits you better than trying to figure out to fit a duckbill-platypus into a hierarchy of creatures. If your prof is pushing you towards an inheritance based structure, they're way out of date, but, most important bit, do what will get you the grades. This is not the time to make a moral stand :) 
Uh. I was sure I checked for repost. Sorry. 😱
Removed: Duplicate.
Eh, perhaps you are right. Since you don't know me, my sense of humor, the tone I am using in responses etc., you are likely reading what I am saying, even when I say Javashit, with an incorrect "image". All of the people I work with refer to JS as either JavaScript or nicknames like "Wild West" or "JavaShit" or even "DamnScript", and I don't really feel as though any of it is truly childish. We even have a guy who is primariliy a JS developer and he returns with similar insulting names for C# and .NET in general.
I've gone through learning JS. I used the programming game "Screeps" as a way to start learning it. I know enough about JS to have the opinion that it isn't a good language. There are largely two camps -- those that hate JS and those that love it. I fall into the former group. I understand its strengths, especially the ones over a compiled language like C#, but those strengths don't come close to making up for its deficiencies.
I didn't use any unmanaged code :P
Are you saying you want to write documents using an existing format (.DOCX - MSFT, .ODT - Open Office) or do you want to create your own, entirely new document format? 
You need something to implement the ITraceListener to write the responses to a file - something like this &amp;#x200B; public class TraceListener : ITraceListener { &amp;#x200B; public void Trace(string traceType, string traceMessage) { CreateTextFile(traceType, traceMessage); } &amp;#x200B; private void CreateTextFile(string fileName, string traceContent) { try { if (!Directory.Exists(Path.Combine(Logger.GetLogDirectory(), @"TraceOutput\\\\"))) { Directory.CreateDirectory(Path.Combine(Logger.GetLogDirectory(), @"TraceOutput\\\\")); } &amp;#x200B; System.IO.File.WriteAllText(Path.Combine(Logger.GetLogDirectory(), @"TraceOutput\\\\", fileName + DateTime.Now.ToString("hhmmssfff") + ".txt"), traceContent); } catch (IOException ex) { throw; } } }
Composition *is* polymorphic. [https://en.wikipedia.org/wiki/Composition\_over\_inheritance](https://en.wikipedia.org/wiki/Composition_over_inheritance) Sorry - not wanting to be pedantic, but I don't want anyone to be put off the idea of polymorphism thinking it requires a tight inheritance hierarchy.
I would like to create a new one, or build upon an existing one.
[https://www.sqlite.org/appfileformat.html](https://www.sqlite.org/appfileformat.html)
Tyvm, I didn't know about this method
Best practices vary a lot depending on what you are actually doing. What size of media files are we talking about? How many of them? What kind of other data and metadata is being stored? SQLite: Works great for smaller blobs and provides a full(ish)-featured relational database to store everything. Transactions come for free, all of this combined makes it a great "portable document format" and is part of it's widespread use and popularity. Embedded Key-Value store (too many to count, numerous pros and cons to each): Almost all of them have transactional support, you will want one that uses mmap() and can provide a zero-copy pointer to your value for a key (Symas LMDB would be a decent example, but the way it works with fixed-size sparse files makes it a poor fit for this application). Renamed .zip with a bunch of files in it: Self-explanatory, same thing that Office Open XML and Open Document do. Transactional updates are a bitch, to do it in a cross-platform manner you have to save to a temp file (and you'll probably want to do this in the same directory as the file you will update, because this doesn't work if you are on another filesystem) and then rename it to the original name.
I would discourage you from making your own. There are plenty of good formats out there. for DOCX, The Office teams maintains a C# library for working with their formats, https://github.com/OfficeDev/Open-XML-SDK I've haven't dealt with Open Office formats in C#, but I'd assume there are APIs available.
Yeah I have a couple other ideas that I'm going to add. I just wanted a little reassurance that what I'm doing is using polymorphism before I devote too much time to this. I only have 2 weeks to get it working and I'm not super great at C#
Soooooo....is what you're saying "Yes, your idea looks like polymorphism" or "No, your idea does not look like polymorphism"? Even if it's not ideal...this is just for a school project...trying to get a decent grade.
I like your idea. I had thought about trying to do something like that with the food items, but hadn't even thought about it for the weapon items yet. Thanks.
Awesome. Yeah, it's pretty vague I agree. I have a game in Unity I'm working on, and I'd like to refactor it so that it is more efficient, but this is just for a grade so I'm trying to whip something relatively simple up. Once the semester is over, I'll spend more time on it in my own game. No quite as much pressure there. lol. Thanks again.
 FeatureAwareFactory.cs Yes, that file name adequately represents the level of WTF-ery going on here. Is your code not confusing or complex enough just yet? Branches too tiresome and conditional compilation too tedious? Boy, do we have the solution: *toggle features dynamically at runtime!*
Why not?
Also, that single statement being its own method really obfuscates what should be a simple null check.
I believe it is due to file system redirection for 32 bit apps: http://www.tipandtrick.net/how-to-suppress-and-bypass-system32-file-system-redirect-to-syswow64-folder-with-sysnative/
This SO question may help: [https://stackoverflow.com/questions/1752499/c-sharp-testing-to-see-if-a-string-is-an-integer](https://stackoverflow.com/questions/1752499/c-sharp-testing-to-see-if-a-string-is-an-integer)
I was really confused for a moment because "portable document format" is literally what PDF already means, and that's apparently not what you're shooting for. System.IO.Packaging is a good start as far as serialization is concerned; it's how `.docx` and similar formats works. It's basically a zip file with some metadata. Open XML SDK is a concrete implementation of the above. &gt;Along/with the document format I would also like to support the following: &gt; &gt;- Keep a registry of the documents to track last edited documents &gt; &gt;- I/O operations should be robust, avoiding corrupt documents, or have a way to restore them (just like https://blogs.msdn.microsoft.com/adioltean/2005/12/28/how-to-do-atomic-writes-in-a-file/) &gt; &gt;- Transactional update of the document's properties Would you also like ponies? You're describing a project that can easily take several man-weeks or man-months. If you need all that, perhaps your best bet is going for an existing format. You're giving quite a bit of info of _features_ you'd like, but not really _what_ you're trying to store in this format.
Removed: Rule 4. Please include the code of your solution thus far so people can review it and have a starting place. It would also be nice to have a suite of test case scenarios and expected results. Probably best practice would be to create a github repo with a full suite of automated unit tests and a nicely injectable implementation. That way you can experiment or make bug fixes and instantly find out if it fixes it or introduces new issues. Also makes it trivial to add new corner cases as you discover them.
So much this. I wish someone had told me earlier. I coded a lot years ago but never full time. And I always wondered why it is so difficult to come up with a propper solution for problem with inheritance. Inheritance is the first thing you are told regarding OO-Languages, but almost the least important.
&gt; macOS has a nice solution for dealing with this problem: bundles, glorified directories that masquerade as files to the Finder and Open/Save dialogs. I wish everyone else would just steal this, because it makes life a hell of a lot easier for situations like this. Bundles have their weaknesses as well; Apple seems to be moving away from them for iCloud-stored document formats. (I'm guessing atomicity is one big aspect here.) &gt;Renamed .zip with a bunch of files in it: Self-explanatory, same thing that Office Open XML and Open Document do. Transactional updates are a bitch, to do it in a cross-platform manner you have to save to a temp file (and you'll probably want to do this in the same directory as the file you will update, because this doesn't work if you are on another filesystem) and then rename it to the original name. Yup to these two. Given szntb wants to store large binary data, I don't think either SQLite or a key-value store (or almost any kind of database) is a good option. Just use zip and don't compress at all, or very little.
Some msdn examples are good, some are not, hence, why he asked the question.
Well, Martin Fowler has he's own repository, so cleary it's not he's code. But the hole concept, implementation and proposal, are all by him. I just translated a Javascript code of him to csharp. 
Looks like I'm late to the party. But if you're wanting a good example of polymorphism, considering less about games and more about the business world might help you come up with a clearer example. &amp;#x200B; Just off the top of my head, you could use polymorphism to implement two versions of a file system. &amp;#x200B; \`\`\` public interface IFileSystem { byte\[\] OpenFile(string name); void SaveFile(string name, byte\[\] data); } \`\`\` &amp;#x200B; You could very easily have two implementations: a "real" implementation (reads and writes files using \`File.ReadAllBytes\` and \`File.WriteAllBytes\`) and a "test" implementation (never actually writes to disk, every time it 'reads from disk' it returns a fixed sequence of bytes, such as 0, 1, 2, ... 255). &amp;#x200B; In this way, it's possible to simulate a filesystem using Polymorphism: the majority of the program behaves the same way no matter which FileSystem it's using. &amp;#x200B; You could use similar shenanigans to create two EventTimers (one that ticks every second and one that ticks from user input) or two printers (one writes to console, one writes to file) or two renderers (this one returns a 'daytime' color scheme, this one returns a 'nighttime' color scheme). Really polymorphism just means any time you have one thing and you want to be able to replace it with another functionally equivalent thing without your program noticing.
BTW, it's not my code, check the link at Martin Fowler name. 
Absolutely right, I was... I'll go with being a bit lazy :) And be pedantic, it's how we tease out the details :)
You could just pointed out out at issues session on github, but you chose to make fun of it, instead of being constructive and collaborative, as is expected from community members. We'll done 👍🏻
&gt;what would be a good test to make sure i know all there is to know about C# You're coming into this with the wrong mindset. Most people that use C# in their day-to-day work don't know everything there is to know about C# (and they shouldn't be expected to). A major portion of the things there are to know about C# are edge cases, implementation details that are irrelevant 99+% of the time, and information about old framework versions that only matter in maintaining legacy code (of that specific version). The things a C# web developer needs to know and the things a C# desktop software developer needs to know overlap significantly but far from completely. Furthermore, things that one C# developer may think of as essential may be things the C# developer at the next desk think of as worst practices (object-oriented vs. functional holy wars come to mind). Things I'd say are necessary these days to be considered at a 'professional' level: * Able to use async/await, the System.Collections.Concurrent collections (especially ConcurrentDictionary), locks (if not other synchronization primitives) and the Interlocked static class to write thread-safe code that sees a benefit from multithreading. (this is probably the most difficult on the list to get right) * Able to write clear unit tests with a testing framework (such as MSTest) and a mocking framework (such as moq) * Able to write classes with basic object-oriented features (abstract and virtual functions, calls to base class functions in the correct place in overridden functions, knowing when to compose and when to inherit) * Working with C# 'functional' code (passing around Func&lt;T&gt; and Action&lt;T&gt; instances, inlining with lambdas) * Ability to work with one or more major frameworks in your chosen area of expertise (Unity for game devs, Asp.Net MVC core for web devs) * Ability to write generic code with constraints, even if it's just for minor helper functions and not like your own data structure or anything. That's a pretty minimal list, and I don't think most people who apply for junior dev positions have even half of these mastered to any degree.
Of course! Sorry, maybe i came across a different way. This is something to have in the back of my mind while i study. sort of like a "i know what i can use this for" moment when i learn it. I like to learn like this because it gets me excited to know i have some knowledge that could be used towards something (in the future ;) ) considered complex.
You're right, i have a general idea of what i would like to go for but to be completely transparent i don't know what i don't know so i'm trying to take in knowledge where i can that would be relevant. Ideally i'd like to be a well rounded c# programmer (and eventually other languages) but one step at a time. things like this list helps me understand what i might focus on or at the very least its like a task i can do for experience (once i have the skill-set to do so) &amp;#x200B; Thank you very much for this insight! I'll definitely be thinking about what you said when i learn!
When talking about OO that's good, though. That's a type of paradigm. When teaching a paradigm you should teach its features. You aren't comparing paradigms to each other. That makes it difficult to understand what something is. So naturally, since OO is about object hierarchies, you need to talk about the features OO has to handles those hierarchies. What is weird is that people are taught OO out of the gate without even answering the question of when these hierarchies are appropriate or not.
There is so much to know about C# that I don't know where to start. Firstly, many of 'master techniques' are not going to be seen in normal software simply due to being too advanced, so you should decide whether you want a practical knowledge of C# in regards to what is needed to develop in normal team or just knowing every hidden, arguably useful, feature. Some topics which are useful: reflection, unsafe context, custom attributes, Rx, marshalling, async await, new Span&lt;T&gt; Memory&lt;T&gt;. Learn some of MVVM, XAML, WPF, UWP, ASP.NET Core, EF, T-SQL, Xamarin. There is no need for normal desktop developer to know how to develop web apps. If you want to know much more advanced topics, for introduction learn about functional programming and AOP and implement an idea like a Monad, Arrows and related, or make aspects, or create a parser of your own programming language based on Expressions and some FP.
When you've started out dealing with c++ and getting your head round diamond inheritance and whatever, it can be hard to get your head around what interfaces are and when to use them. I think us old-timers assume that OOP education has gone more in that direction that it apparently has.
Feels like you are asking what are all the words I need to know in order to write a book. Mastery for me would be to write an application that is easy to understand, easy to maintain, and easy to test. It follows SOLID principles and most importantly of all it delivers value to a user/customer. Everything else is just noise imho.
Are you using the EWS Managed API because the Exchange Server is on-premise? If your company is on Office 365 I suggest that you Microsoft Graph. That is the future for mailbox integration.
Hm, it's called in 2 places, and it's technically not a null check, it's a `IsNullOrWhiteSpace` check.
I’ve been doing .Net since it was invented and I honestly find out things I didn’t know every week. I don’t bother learning things I don’t need to know. I learn them as I need them. Then I forget and have to sit for 15 minutes thinking “I know I’ve done this before, it only I could remember”. 
http://www.stackoverflow.com 
Singletons are an antipatern nowadays. Avoid them whenever possible. &amp;#x200B; And this sounds exactly what events and delegates do. If your cards do not have visibility of the handler class, then it gets a little trickier. At some point you have to bind the card objects to the handler instance, and a modern way to solve that problem is through dependency injection. There are many ways to go about this and there is no absolute right or wrong answer here, but if you use a direct dependency, like a singleton, you will have problems doing unit testing or other things down the line. &amp;#x200B; Or you can always pass the handler down as a property when they are first created. To be honest, if this is a one of exercise there is no problem what-so-ever in your cards having a direct dependency. Modular phones never became a thing for a reason, but it's good to know what the proper way of doing thing is when necessary. :)
I hate using Intellisense with LINQ, the amount of generics inside generics is hard to read.
&gt;what would be a good test to make sure i know all there is to know about C# You answer Jon Skeets question on Stackoverflow :)
Read a book about the architecture and syntax rules first of all 👌
In our real world solution, our server has its own secret stored in configuration. Our containers fetch that secret from storage and use it to encrypt and decrypt the user's API keys as needed. We store them as we do any other field in our database, except it is encrypted. We can't afford to not store said keys ourselves since this is not a simple web service, and I assume you have a similar situation there :) &amp;#x200B; If you've encrypted the keys correctly, then programatically you've done your part. From then on, it's a matter of the security of infrastructure. Encryption is only secure for as long as the key is kept secure, after all.
Everybody has their own opinions, but C# and .NET are broad enough so that you will never see all or even most of the features in any single app. How often will you see LINQ to SQL? or [ASP.NET](https://ASP.NET)? For my last couple of projects (3 million lines on one and 15 million on the other) setting up the WEB APIs was done once. Does everybody else need to know that? Nope. &amp;#x200B; In interviews the C# technical question I like to ask is this: What is the time complexity of a Dictionary and why? &amp;#x200B; That question requires a fairly in-depth understanding of the language, of computer science, and whether the person is knowledgeable enough to know about looking at the .NET source code online. Since Dictionaries are used so often in C# it's a really good idea to be familiar with them. &amp;#x200B;
Unless the system has faults that cannot be reworked, a rewrite should never be on the table. Think of any big, successfull piece of software. It was never rewritten from scratch. Such projects are bound to repeat the same mistakes of the old one. &amp;#x200B; What's more, what they seem to be asking is for a front-end upgrade, not a full rewrite. Creating an MVC front for your business logic and optionally porting the backend to core and an open source database for cost-savings are reasonable endeavours. Doing a full on rewrite? No way. &amp;#x200B; As for what react and vue have to do with any of this, I've no idea :)
No, quite the opposite. Interfaces don't decouple the functionality, they allow for substitution, DI is the same. You are still coupled to the expectation. We were taught that DI and interfaces decoupled code. The reality is that it doesn't and we don't teach that any more. DI is still valuable for constructing object graphs, interfaces still allow boundaries to be mocked, implementations to be substituted, but they never decoupled anything. Don't hate on static methods. When used judiciously they work just fine. You want pure methods which don't extend beyond the process boundaries (Actually you can easily inject network savvy providers, but that's not relevant here. ) An internal messaging class is a perfect example of something that can be used statically. You have a send method and an event. Message goes in, message comes out, there is nothing here that is complicated or needs to be mocked or replaced. That said, just because you have a static send and receive event, the internals can be substituted if necessary through the exact same mechanisms you describe. Messaging works well. Here's how. You have a card. You want to update the handler when the card does something, so in your world you inject the handler and the card tells the handler it did something. Now imagine you want to log each card move so you can play it back. In your world you'd either inject a logger into the card or handler. Now imagine you want to extend the game so an AI can play against you. Again in your world you'd inject some sort of AI contract into the handler. your ctor is going to grow and grow as you extend the functionality. In my world the card sends a message, anyone interested can listen in and react to it. It's easier to test, easier to extend. Your entity, be it the class, the logger, the AI, each receive a simple message and act on it. The messenger is simple to test, because, as above it's just message in message out. The classes are easier to test because you don't need to mock a dozen injected services. In case you're still in doubt, take a look at how the windows message loop works. Clue's in the name. As usual my disclaimer is that there is no one size fits all solution and different dev's are more comfy with different approaches. Work with what works for you. Don't close your eyes to alternatives.
Thank you, easy to search through
SOILD? No, don't waste time on cargo cult nonsense. Read the .NET Framework Design Guidelines. Especially study the sections on API design and the pit of success concept. Mastery doesn't come from memorizing 5 out of context platitudes, it comes from diligently working to understand how the framework was designed. 
&gt; Hm, it's called in 2 places Yes, sure, but I'm arguing the method is still trivial enough that the overhead of having to look up what _actually_ happens in the methods (which now requires you to read `AssertFeatureName` in addition to the actual method you're interested in) outweighs the benefit of avoiding copy and pasting code. &gt;it's technically not a null check, it's a `IsNullOrWhiteSpace` check. Right. (If we want to get really picky, throwing ArgumentNull on something that isn't actually null is also a code smell. :-p ) My contention is that: private static void AssertFeatureName(string featureName) { if (string.IsNullOrEmpty(featureName) || string.IsNullOrWhiteSpace(featureName)) throw new ArgumentNullException(nameof(featureName)); } public bool IsEnabled(string featureName) { AssertFeatureName(featureName); _featureConfig.TryGetValue(featureName, out var isEnabled); return isEnabled; } is less readable and not really any more maintainable than: public bool IsEnabled(string featureName) { if (string.IsNullOrWhiteSpace(featureName)) throw new ArgumentNullException(nameof(featureName)); _featureConfig.TryGetValue(featureName, out var isEnabled); return isEnabled; }
&gt;Everyone is free to give any comments, I was just expecting to have constructive ones instead of just pointed fingers and debaucheries. I'll grant that there isn't a lot of kindness in this thread, but you also haven't really provided much information on _your_ motivation. You ported Martin Fowler's code to C#, then essentially copied and pasted his blog article into your readme. Did you do this as an exercise to learn C#? Did you do it because you feel Fowler's approach is useful or interesting (I would argue it is rather… problematic)? Have you used this yourself? What is _your_ (not Fowler's) experience with feature toggles?
All true, but he exception should be `ArgumentException`
He is not wrong. This stuff can be kinda crusty but it's the site that tough me most of what I know. 
I've used 'Visual C#: How To Program' as a textbook in dotnet courses in years past. Now sure if there is an up to date copy though, haven't used a textbook for the past 3-4 years 
I always liked the Deitel books back when I was learning but that was many years ago. Newest editions have decent reviews on Amazon, though.
&gt; Probably best practice would be to create a github repo with a full suite of automated unit tests and a nicely injectable implementation. Good idea. I don't know how to do any of that.
The Yellow Book - it's free and intended for beginners
You're in luck then. Automated testing is easier than ever. There are a variety of ways to do it, but the easiest way to get started is probably to leverage the built-in features of Visual Studio: https://docs.microsoft.com/en-us/visualstudio/test/getting-started-with-unit-testing?view=vs-2017 Once you get those going, you might find it easy to experiment and solve any issues for you and your friend. Plenty of tutorials out there for GitHub. You can dive into that, but check out an easy to use GUI tool for it like TortoiseGit. I would suggest you avoid the command line based tutorials for more.
That's very good advice. Sorry for pouting.
AngularBeginner pointed out three concrete issues. How did they make fun of anything?
This is excellent advice. When I bring on a junior dev who has little to no experience in C# (but experience in other languages like Python or Java), I assign him: 1. Introduction to the language: https://docs.microsoft.com/en-us/dotnet/csharp/tutorials/intro-to-csharp/ 2. Detailed guide: https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/index 3. Using C# with .NET Core: https://docs.microsoft.com/en-us/dotnet/csharp/getting-started/ 
I would have bet a million bucks that a three-line (two, really) solution could NOT work -- but it works perfectly. I am wowed. OK, so long for now, I'll post again in 2020.
Wow, Tio.run is cool! &gt; Like, wouldn't it be easier to include the expected output? Of course.
Yeah, it's pretty cool. It has every language I've ever heard of. /plug even my pointless golfing language https://tio.run/#stax
Awesome cheers man! I'll take a look, might not come in handy for this project but surely something! :)
This could work for a readable storage method actually, didn't even consider an ini file as always just use them for just startup config Params haha! Thank you. 
The banner shows C++ instead of C# for some reason, and the post keeps referring to UTF-8, which (mostly) C# doesn’t know anything about nor use internally. They probably mean Unicode as far as their literals are concerned. They might use UTF-8 in their transport, but they don’t show any of that. 
There was a workshop near me (that i foolishly didn't attend) where one learned to use Raspberry Pi 2 and Windows IOT to build small robots. And writing apps for WinIOT is just like writing regular UWP apps. So I figure a job like that would be pretty straight forward for any c# developer. And an excellent chance to learn something new.
Junior: you can help others build a program Senior: you can create a non-trivial, production grade program from scratch Lead or Architect: you can create a program from scratch that others assist and take direction from you Master: those same people want you to lead the next project 
Just do it?!?!
This is the one for me.
I think you misunderstood what I was asking. My bad. What are main differences or particularities about C# ?
There is a lot of satisfaction of seeing your code control something physical. As long as you have well written specs describing what the code should do, you probably won’t need much math. If they expect you to be doing control systems math ... that’s 3rd-year engineer level math (quite involved) with feedback/damping, s-transforms, Z-transforms, poles/zeroes, etc. 
Its just regex... totally normal programming tool. You want to make another programming bet?
The head first series is awesome. Very well written
Well, I wouldn't go that far. The quality varies a LOT based on the author of any particular book. I remember the Python one being quite subpar
I liked The C# Player’s Guide.
With a couple constraints, I'd say c# shouldn't be a problem for robotics. One, you'd probably want to run your program through ngen to make sure you don't burn any jit time during initial start. You could also get around that by warming up thr robotics code before doing anything, but that doesn't seem as strong of a guarantee. The other problem is that you'd want to minimize the amount of time the gc would interrupt for. That's doable if you carefully code to make sure you don't have memory allocations after the initial start up. Alternatively, you could use gc pressure notifications to let you handle low memory situations. Iirc, asp.net clustering does this - when a node is due for a gc, it removes itself from the cluster and then does a full gc pass, letting the remaining nodes handle the load while it does. This way, no client has to deal with their request stalling because the server had to run the gc in the middle of the request processing. I'm curious if robotics could take a similar approach.
I'd add that hashsets are also useful. I see so many developers use a list for lookups using methods that may be O(n) or O(logn), and aren't clearly documented in the api docs (requiring a look at framework source code). A hash set would nearly always be a better choice. To me, this highlights the need to actually browse the framework APIs. 
I have an event delegate system set up following this tutorial: [https://www.youtube.com/watch?v=jQgwEsJISy0](https://www.youtube.com/watch?v=jQgwEsJISy0) However, that implementation requires a reference to an exact object to subscribe and then only seems to listen to that 1 card at a time. How can I make my subscriber subscribe to all 24 or so cards? Currently, I need to give the OnCardFlipped method I want to be calling an event subscription like this: `thisCard.GetComponent&lt;Card&gt;().CardFlipped += OnCardFlipped;` &amp;#x200B;
National Instruments cRIO can be used as an industrial controller and you can use java with it. I wouldn't be surprised that a C# equivalent solution exists. I used it for first robotics in high school years ago. They basically gave us libraries to interact with a camera, speed controllers, pressure sensors, hydraulic stuff. If you had some more custom items you would have to make your own driver for it then just include it like the other ones. I imagine an industrial setting will be somewhat comparable.
Its more about understanding concepts then understanding implementation details. I personally like to focus on concurrency and on design patterns.
I had a really hard time trying to put this into practise as a result i had a really fucked up entangled solution. Its oldschool programming making way too much dependencies I discovered later on in my professiinal career. I seldom use it Id rather use interfaces/classes that inherit from abstract classes.
Still working on an Atomic&lt;T&gt; lib. Getting closer to 0.1; still a lot of unit testing to be done though.
I'm working on a config file generator that handles generation of any number of config files deployed to any number of servers using liquid templates. The basic function is now working but I'm afraid there are things I haven't considered related to anything that needs to be encrypted.
Hi. Is it open source?
Learn programming, then you can change what you don't like. Good luck 
Can confirm, I'm learning C# in college right now and we're using the 6th edition of How To Program. It's really good and explaining the way everything works and the exercises it has at the end of each chapter can really rack one's mind
I bought this book about a month into learning on my own. I was doing good but it really solidified my understanding of the basics and put things into a way I could really understand them. Highly recommended. 
I've been working on a music player that sits in the windows taskbar [here](https://github.com/dsafa/audio-band).It currently only supports Spotify but itunes and musicbee are right around the corner. I've definitely learned a lot working from on this.
the head first design patterns was the one that made that book series have a name for me.
Yes, that one was my first too! 
It's not a book but, Udemy sells pretty cheap courses that will take you through beginner programing. It's like $10 for a decent course. Cheers. 
1) Off and on for about 30 years, professionally for maybe 15 (depending on how you count it) 2) I wanted to be a game dev. I even have a degree in game development, but I have a family to support and frankly, the pay cut wasn't worth it. I eventually found my true passion was creating productivity tools, anyway. 3) The big problem with web development is everyone's always chasing the shiny. You have to learn a new framework every year to keep up with what the cool kids are doing. Game development is similar, but for business-required reasons instead. Application development is fairly stable, so you can get stuck into solving fun problems instead of trying to figure out new and interesting ways to compile, package and deploy your code that will be obsolete in 6 months. 4) This is kinda hard to answer - Any low-level programming is going to be difficult. Yes, 3D graphics is hard, but DirectX abstracts a lot of it, and most people aren't even going to be using DirectX directly. There will be a graphics engine on top of that. Writing something like DirectX or a game engine is pretty hard, but so is writing a physics engine. Modeling any complex system - especially when trying to make the code generic enough that it's reusable, but not so generic that it's hard to use - is what I'd say is the hardest... which is kind of a non-answer :)
1) Professionally for 2.5 years. If you include education, 5.5 years. 2) I didn't really consider programming as a career when I was younger (I've been a sound engineer, force protection specialist in the Air Force, and a journalist before I turned to programming) 3) I work full-stack, but I do find enjoyment in creating a nice and clean UI 4) Scientific stuff, digital signal processing, and 3D graphics is probably areas that require a more thorough mathematics background than I have
You really like to spam these questionnaires everywhere, right?
The reason that people usually use Implicit Flow for SPA's is that the whole source code for your application is available to the user in the browser. So any flow requiring your application to contain a client secret is not an option, as it can basically not be kept a secret. Implicit Flow mitigates this by placing the login page on your auth server, and by defining which urls the auth server is allowed to redirect you to after a successful login. As far as I know you can also use Authentication Code flow for SPA's, as long as you omit the client secret :)
I'm working on my first project, building a console application to retrieve weather observation data and store it in a database with a seperate winforms app to analyze data from the database. Going quite well actually, console application is almost functional at this stage. 
Sorting out myriads of ways to implement equality and comparisons is a PITA(IEquatable, IEqualityComparer, IComparable, IComparer, Equals and HashCode, possibly implemented operators ==, maybe others?) 
Use the solo learn app in my opinion it's one of the best options for learning by doing
I don't think all of these qualifies as 'lesser known' libraries, but they are worth mentioning anyway, might help someone: https://github.com/morelinq/MoreLINQ MoreLINQ, initially started by Jon Skeet. Contains multiple very useful LINQ extensions that should have been part of the base library. https://github.com/thomaslevesque/Linq.Extras Complementary to MoreLINQ (for example the overload ToArray(int size)). https://github.com/vkhorikov/CSharpFunctionalExtensions I absolutely love the Maybe and Result classes. There are more useful things here but those are the main things I use
I've been working on a math displaying library for a while: https://github.com/verybadcat/CSharpMath Aside from displaying maths from LaTeX, it can also display normal text like in a book. The newest addition is a WYSIWYG editor which still needs some more polishing.
There is a more important question: - Why should anyone answer all these? There is literally no explanation. And the "?" come with a preecding " " which I found odd.
https://referencesource.microsoft.com https://github.com/dotnet/core I like those two. :-) 
The Mosh Hamedani course is good. 
Hi. I'm working on an issue tracker web application with c# and .net core as back-end, angular as front and rethinkdb. Mainly to practice angular.
Can you please do winamp brother
Working on a winforms program that will go through every picture/video in a directory and allow you to quickly rename them or sort them into sub directories. I have a large collection of images and videos with no names I need to sort, thinking of making it freeware.
&gt; toggle features dynamically at runtime! To be fair, feature toggles have their uses. I wish that we used them more so that * there is less branching, new code is on `master` and toggled off * decouple the act of deploying new code from the act of making it live, so that deploys can happen frequently, incrementally and routinely * rollback is also easy. Basically you want to encourage integration (i.e. merge to master), and frequent deployment with low risk.
I built a very similar application for work so we can find correlations between weather and customer volume. If you have any questions let me know!
I'm working on an API wrapper for a little point of sale application we have at work. It's the first wrapper I've done and I'm learning a lot. 
Overhauling [PearlCLR](https://github.com/BlackCentipede/PearlCLR) for a more modular approach and also writing a book on [Advanced Lowlevel Programming in C#](https://github.com/BlackCentipede/AdvancedCSharpForLowLevelProgramming). Basically doing them when I have spare time to.
I do alot of farm work, so long term it will be for comparing against field growth and health, which will be another database handled by c#, with hopefully some android/Java input to the database, for adding info on the go 
Interesting! Have you considered doing anything with Arduino as well? You can automatically measure soil moisture levels and write that to DB. https://create.arduino.cc/projecthub/55369/wireless-soil-moisture-probe-with-helium-and-dfrobot-c620b9?ref=tag&amp;ref_id=agriculture&amp;offset=2
I have a few laying around, have definitely considered it, with the main issue being communication from the sensors to a base station, Lora looks good but the modules are still quite expensive here in Australia, there's really no end to the sort of automation and measurement that can be introduced to the agricultural world 
Hmm, how do you unit test something related to concurrency?
&gt;You're giving quite a bit of info of features you'd like, but not really what you're trying to store in this format. A single document would consist of XML and JSON files, which may or may not reference additional media files as videos, images with arbritrary size. The XML and JSON part of the document would be edited heavily, other assets would be left unchanged. I don't want to reinvent the wheel (even if it would be fun), so I'll check out SQLite, Realm.
&gt;mmap Do you mean memory mapped IO? I'm not really familiar with it. Any learning good resource on the topic you would recommend? Thanks.
&gt;macOS has a nice solution for dealing with this problem: bundles, glorified directories that masquerade as files to the Finder and Open/Save dialogs. I wish everyone else would just steal this, because it makes life a hell of a lot easier for situations like this. I like the concept of bundles, however I've had bad experiences with them on Windows when bunch of files were stored on disk. For example lot of AccessDenied (anti virus apps ??) exceptions and file corruption. It was a great amount of work to make it stable, like using file name replace tricks, caching and adding retires. Are bundles one file on the disk, or multiple files?
Yeah I think the banner changed now, could you elaborate on the Unicode-UTF-8 mix up?
Because the type of the literal `1` is `int`, and both branches of the conditional operator must be of the same type. Also you should really void doing this like `x = x++;`. The `x++` operation will already modify `x` itself, there's no need to assign it and it will only add confusion and increases the cognitive overhead required when reading the code.
Yeah it's tricky. I've built a concurrent test harness ( https://github.com/Egodystonic/Atomics/tree/master/Egodystonic.Atomics.Tests/Harness ) to test with; it's really the best I can do with unit tests haha.
[ImageSharp](https://github.com/SixLabors/ImageSharp)
Ahh, forgot about literals, thank you 
As someone else who's worked in Open Source languages a bit, one comment I wanted to make is that there's so much baked into .Net and many packages added automatically (ASP.Net MVC comes to mind) that it is common for me to complete a task end to end without an external library at all. This is a huge contrast to Node, Ruby, etc. There times I do use one I often don't remember exactly what it was because it was an odd edge case I did one time. Most often if I'm tinkering with a library it was in JS on the client side.
What do you mean? Like an entity relationship diagram? If so, we use Visio at my work. It will reverse engineering your database and creat an ERD for you. Make sure you get 64-bit version. I think the 32-bit has issues with reverse engineering.
If you're making a web application, your best bet might be to use a client-side visualisation library like https://d3js.org. You could write Web API controllers to return the data you need and then plot the graph in the browser.
No. Not like an entity relationship diagram. I'm sorry if what I'm asking is not clear enough. English is not my first language. &amp;#x200B; I want to plot my data and create an image of that plotted data on a graph then display it on my web application.
That's interesting! Thanks for the input!
If you like CSharpFunctionalExtensions, you might also like [language-ext](https://github.com/louthy/language-ext). It uses the names \`Option\` and \`Either\` for \`Maybe\` and \`Result\` respectively, but the principles are the same. It's also more comprehensive in scope than CSharpFunctionalExtensions.
[**LibLog**](https://github.com/damianh/LibLog) It’s a logger abstraction library. It’s awesome because it doesn’t install any dependencies. The NuGet package runs a Powershell script that create a single file that has all the code. So your library consumers aren’t forced to consume a 3rd party dependency. Especially one they may be using of a different version, or don’t want. It works with most popular .Net loggers...automatically. It just “magically” (reflection on start) see’s what logger lib you’re using and uses that. Or you can set up to use whatever you want manually. If your team one day wants to switch from log4net to serilog, you don’t need to update every fucking file...only the app entry point. It’s a great real life example of the benefits of abstractions and loose coupling. A+ library.
Nbehave and fluent assert make your tdd into documentation. 
Thanks! I'll look into it :)
Thanks a lot! y.thisObjectsSameProperty is that a custom property of mine, or some kind of list of properties? is the code you provided the only lines I need in order for source object to copy only the existing properties to the destination object? :)
If you ever get into database work and need to migrate your database, FluentMigrator is super nice. Really easy API with good documentation.
[DataFlowEx](https://github.com/gridsum/DataflowEx) is a good extension library to TPL data flow built into the task library. It's really nice for data processing.
After reading all the comments here I decided to chose Hangfire. Fantastic library and easy to implement. Took me like an hour to implement and test. Thanks for the suggestion!
The Azure Storage SDK sadly has no way to subscribe to the event of an item getting added to a queue. Ultimately I decided to use Hangfire as you can read below. Still thanks for trying to help!
I decided to use Hangfire for this problem, as you can read below. But thank you for trying to help!
There are various WinAPI functions to extract icons. Most of them are buggy and overly complicated though.
[DbgShell](https://github.com/Microsoft/DbgShell/issues) \- A managed wrapper for DbgEng (the Microsoft debugging engine behind WinDbg &amp; other debugging tools, with PowerShell driving the interactive interface. Much easier to script &amp; extend than WinDbg!
[Sprache](https://github.com/sprache/Sprache) is a simple, lightweight library for constructing parsers directly in C# code. 
Heres an example with two really simple objects: &amp;#x200B; public class MyDbObject { public int Id { get; set ;} public string Name { get; set; } } public class MyDomainModel { public string Name { get; set; } } public class MyObjectProfile : Profile { public MyObjectProfile() { CreateMap&lt;MyDbObject, MyDomainModel&gt;() .ForMember(x =&gt; x.Id , src =&gt; src.Ignore) .ForMember(x =&gt; x.Name , src =&gt; src.MapFrom(y =&gt; y.Name )); } } &amp;#x200B; &amp;#x200B; Note this is the explicit way, but there are other ways to ignore members. I just like doing it explicitly so when I look at the maps I don't forget what properties they have and what's not being mapped. Because I can never remember anything lol. 
Mathnet.Numerics
) you're welcome!
Uh, no. That's completely wrong. What the author is calling double dispatch is really only single. And what he is calling single dispatch is not dispatching at all, its just static compilation. Single dispatch is when you use the runtime type of one object to determine which method to call. Normal inheritance allows C# to do this. Double dispatch is when you use the runtime type of two (or more) objects to determine which method to call. It's like overload resolution, but it happens at runtime. C# cannot do double dispatch without using reflection. This can be done manually or via the `dynamic` keyword. Some design patterns can simulate double dispatch. 
I don't understand. What's your question?
Would SoundCloud be a good candidate? I figured if you got Spotify, you can definitely get SoundCloud!
Hey man, If I understand you correctly you are struggling to grasp concepts of C#. It is not a easy language to learn, and much like math. The more you practice the easier it gets. If you don't understand something, find someone who is experienced to try and explain. There are a ton of online sites you can check out for additional help! Pluralsight for example is a great resource. 
Not really sure what part you're having trouble with. A lot of the concepts in the videos on that Playlist aren't unique to C# and are instead either generic to every programming language (flow control, variables) or are object oriented programming concepts. If you have questions about a particular video we can likely help you more. 
I got the same impression - doing the same thing twice is not a different pattern.
I don't know why all of these side projects are so useful. Mine is completely pointless, overly complex, and costs waaaaay too much. I'm working on a DnD Battle mat built with LEDs that you can input your position and range (hit, shoot, throw, jump, run, etc.) and it lights up all the points you can reach. This is going to sound more complex than it needs to be, because I did that on purpose. I'm trying to learn a few things, so I just unnecessarily smashed them all into one project. A Raspberry Pi running Windows 10 IoT manages the patterns and the colors. It communicates using Firmata with an Arduino that takes user input (rotary encoders) and turns the LEDs on/off. I am stuck for a moment though. I have SK6812 RGBW LEDs (individual, not strips), but I cannot find a library that can manage Firmata and the LEDs. I have to switch to RGB, but don't really have the cash at the moment. For any other DnD fans out there, it's a horrible project. It costs much more than cutting a hole in a table for a TV, and won't ever have near the features you could add. Its only benefit over the TV will be portability. 
just move the declaration of the width variable outside of the while loop.
It’s simple but I’ve been really wanting to make an expense app. There are apps like Empower, Mint, etc. that helps you track all the payments you make on your card, but I just want to make one on my own for experience. Since I can’t really just connect straight to the bank and get all the expenses that come through my card, I’m just going to make it as a web app and mobile app and when ever I go grocery shopping or go out to eat or anywhere, as soon as I make that payment I go on my app and put in that amount. That’s the first step but next will be a graph, how much I’ve saved over the month, 3 months, year, and so on. That’s all I have really. I have 2 years .NET MVC work experience AND 0 .NET Core experience and Dapper experience so that’s what I’m going to do it in. What do you guys think? 
The fluent API makes it a major PITA to extend, and there's quite a lot FluentMigrator cannot do. Migrator.NET is older, but much easier to extend. I have work projects that use both and wrote some helpers over both libraries: https://bitbucket.org/quentin-starin/easymigrator/wiki/Home I'll never use FluentMigrator again.
Ill break it down for you. move the variable declarations out of the loops and set the values in the loops, so you can test and check the value after the loop.
Oh that DDD...
Yes, It's calling the passed common base class and inverting the control. I think the author got it wrong.
[Ben.Demystifier](https://github.com/benaadams/Ben.Demystifier) - easier to read stack traces, types, functions, etc. [C5](https://github.com/sestoft/C5) - lots of collection implementations, though it's fairly old and could maybe benefit from LINQ extension implementations specific to the collection classes. That said, if you need a specific collection implementation you probably have a specific type of performance-critical use and won't need performant general LINQ implementations. [Equ](https://github.com/thedmi/Equ) - quick and easy Equals and GetHashCode implementations [Expressions](https://github.com/pvginkel/Expressions) - C# expression parser. [Nito.AsyncEx](https://github.com/StephenCleary/AsyncEx) - async threading coordination primitives [SpookilySharp](https://github.com/JonHanna/SpookilySharp/) - one of the faster hash methods around, with decent distribution properties
.NET Core Web API returns JSON format by default. So your underlaying storage (SQL Server in this example) is not relevant. You didn't specify which language/framework are you using for front-end (web application), but pure Javascript libraries will always work. You also didn't specify which types of visualizations you need. You can start with [https://www.chartjs.org/](https://www.chartjs.org/), just feed it with some JSON (output of your .NET Core Web API controller).
I've made great use of spatial too
https://www.amazon.com/C-7-0-Nutshell-Definitive-Reference/dp/1491987650
Removed: Rule 3, spam. I'm inclined to agree with the others. Your posting history is _very_ suspect you're gathering data rather than engaging in meaningful, genuine discussion.
\[Nbehave\]([https://github.com/nbehave/NBehave](https://github.com/nbehave/NBehave))
[Orchard Core](https://github.com/OrchardCMS/OrchardCore)
Thanks a lot - seems like a pretty stupid question now. 
Post saved, is pure gold
What's the problem there? Just pass the same OnCardFlipped to all other cards. Multiple objects can have a reference to the same entity. Under the hood an event is just a collection of callback functions.
According to the docs https://developer.xamarin.com/api/member/OpenTK.Matrix4.LookAt/p/OpenTK.Vector3/OpenTK.Vector3/OpenTK.Vector3/ isn't the first parameter the position of your 'eye'/camera in the world? 
I like [ComparerExtensions](https://github.com/jehugaleahsa/ComparerExtensions). If you ever need to create `IComparer&lt;T&gt;` (or `IEqualityComparer&lt;T&gt;`), this library lets you do it very easily using a LINQ-like syntax.
Exceptional introduction to the library!
[SharpNL](https://www.nuget.org/packages/Knuppe.SharpNL) is a fantastic library for doing Natural Language Processing in C#. It's a reimplementation of the Apache OpenNLP project, so it's very capable, and extremely well written. Unfortunately the GitHub has disappeared, and with it has a lot of the documentation, but it's still available on NuGet and still great to use.
I'm currently building a DirectX command prompt using the new ConPTY. So it will be a graphical command line interface that will support things like "type rage.jpg" 
To add to what people have said. Do ask for help inside the company you're doing the work experience with. They won't hate you or think you're stupid, they will be grateful that you put aside your own ego to get something done :) 
A "Managed Object that can be disposed" is any that expose IDisposable, are owned by the current object, and are not fucking retarded (e.g. HttpClient, SmtpClient).
[dapper](https://github.com/StackExchange/Dapper): a crazy fast object mapper for sql queries
Some projects implement `IDisposable` to provide a way to manage the lifetime of objects like API client libraries or to enable subscribers of an event to easily unsubscribe by disposing of a subscription token.
hullo fren, my words cannot compare to the answers available. distilling your curiosity to a set of words you can use to search for more about the topic. :) https://stackoverflow.com/questions/19076312/understanding-disposable-objects
That's the perfect way to do it.
Btw. Don't use `.Count() &gt; 0` but instead use `.Any()` Also the first .Count() does not make any sense. Just remove it and change the second to `.Any()`
IDisposable is just a neat way to make your class available for the using keyword and automatic closing. Let's say you make a class that internally uses file resources - to ensure that those files are closed properly you can make your class implement the IDisposable interface, and in your dispose function you would then call Dispose on your file resources. This makes your class easy to use for others, they can put the object in a using block and then everything will close cleanly once out of scope. A list object doesn't do any I/O, there are no external communication that needs a stop command to end the transaction, once it's out of scope the garbage collector will figure out when to release the memory.
That will work, but probably takes a lot of memory (and can't handle any fractional percents). You can look into "weighted random" algorithms, those will do what you're looking for. https://softwareengineering.stackexchange.com/a/150642/63889
Counting symbols ({}) that's the most 13 difficult lines I've ever read, I don't get how it works...like at all. I need to re-read that 1500 times, and get a few beers. Still I would not get it. Thank you though, because I knew there was a better (whatever it means) way, and you pointed me to it. I'll understand what's happening there.
&gt;What is actually considered a "Managed Object that can be disposed?" An object that implements IDisposable. &gt;But what about things like `List&lt;T&gt;` objects? As you say, `List&lt;T&gt;` isn't disposable so you cannot dispose it. You can set references to the object to `null` so that the `List&lt;T&gt;` object might be garbage collected earlier.
The purpose of that if-statement is: 1. If `disposing` then this action is being taken because things are released from managed code. Call other managed code objects and overall, do the best job you can to clean up. 1. If NOT `disposing` then this action is being taken because the garbage collector is finalizing garbage. Do not touch other managed objects - they will be called by the garbage collector anyway to finalize them (or they might already have been finalized). If you use managed objects, you can only make things worse as the GC will clean up anything that can be cleaned up anyway now.
In general, I find fluent APIs easier to extend, as long as you do it with extension methods (which is often the intent).
&gt;What is actually considered a "Managed Object that can be disposed?" Anything that implements `IDisposable`. &gt;But what about things like `List&lt;T&gt;` objects? They live in the Managed namespace, but they are not IDisposable. What do I do? Nothing. (Unless, I suppose, the list contains `IDisposable` objects which you've created?) &gt;If there is a very complex example of IDisposable(), I'd love to see it. IDisposable is kind of an annoying pattern/API because it confuses three different scenarios: 1. you have an unmanaged resource that you've created yourself. For example, you've called a Win32 API that gives you a handle, which you're supposed to manually free later on. 2. you have an object that implements `IDisposable`. 3. you have an object that does not. The third case is simple. You do nothing. The garbage collector will take care of the object. (The class may be implemented poorly and use more resources than necessary, or delay garbage collector a lot, or even indefinitely, but there's typically not a whole lot you can do about those situations anyway, other than switching to a different implementation.) The second case is also fairly reasonable: C# and VB provide the `using` syntax to make those easier to reason about. Class implements `IDisposable`? Consider instantiating it with a `using` block and therefore make it explicit when you _do_ need it, and implicit when you _no longer_ do, thereby implicitly calling `Dispose()` at the end. Wanna write to a file using a stream? `using (var fs = new FileStream()) {}` takes care of flushing your buffered changes, releasing the exclusive lock, and closing the handle. The first one is a mess. They also named it `Dispose`, but really, it's a completely different pattern, and it's the one you're partially quoting above, which should have two more methods. I'll complete it a little more: protected virtual void Dispose(bool disposing) { if (disposed) return; if (disposing) { handle.Dispose(); // Free any other managed objects here. // } // free unmanaged resources here, if you need to // you may also want to explicitly set large private fields to null here. If `disposing` is true here, the garbage collector will not have run yet, but we still know that we don't want to use those fields any more (otherwise, why are we disposing?). If `disposing` is false, the garbage collector will clean those fields anyway, but it's no harm. disposed = true; } public void Dispose() // this actually implements IDisposable. Dispose(true) does not. This method is a pattern (and a bit of an ugly one at that), not an interface being implemented. { Dispose(true); GC.SuppressFinalize(this); // here, we ask the garbage collector _not_ to call the finalizer, as we've already done the necessary clean-up above } ~MyClass() // this is your class's finalizer. The garbage collector will put your object in a finalizer queue for clean-up. { Dispose(false); // this calls your `Dispose(bool)` method. We have to pass `false` because it's not safe to address your object's member variables (particularly instance fields) while the finalizer is already running. } So this really does three different things: it does your regular class clean-up (because the garbage collector will run, although it will be asked not to invoke the finalizer), it does explicit `IDisposable` clean-up inside the `if (disposing) {}` block, and lastly, after that block but still inside `Dispose(bool)`, it may also free unmanaged resources.
You're just describing a probability distribution
&gt;not fucking retarded (e.g. HttpClient I'd still like to see a good explanation why that doesn't simply manage its own object pool, or has some sort of singleton, and why it is disposable. It's such a weirdly poor API design.
FluentAssertions : let's you express your intent more clearly in your unit tests by writing highly expressive assert statements.
Checkout this quick article, [Black Wasp - C# Variable Scope](http://www.blackwasp.co.uk/CSharpVariableScopes.aspx) I'm not sure if it's updated code yet, but some pointers. * Variable Declaration should be at the top, or just before using them. ( depends on team preferences ) * Instead of while ( var == false ), use while( !var)
Absolutely, to be honest the only reason I didn’t mention that also (even though we use it heavily) is only because the current official version is not yet on .NET standard. Hopefully this will change soon.
[UnitsNet](https://github.com/angularsen/UnitsNet) for conversion between (lots of syntactic sugar) and “enforcement” of (using strongly-typed classes) units of measurement. If I am interfacing with or simulating the physical world in any way, I reach for this. 
https://www.devu.com/tutorials/cs-asp
disclaimer: I'm not too experienced with web stuff so this may not be terribly useful, but it's sounding so similar to a scenario that popped up earlier this week: using base64 strings as IDs in a WebAPI, some calls would fail. The ones with '+' ! (I'd already swapped out '/' for '-' in the strings.) It worked fine on my machine^(tm) (kestrel) and a raspberry pi (nginx) but deployed to Azure (IIS) those plus signs became an issue. Anyhoo i did some digging and the poster's solution here is what i went with: https://stackoverflow.com/questions/7739233/double-escape-sequence-inside-a-url-the-request-filtering-module-is-configured 
Does [Refit](https://github.com/reactiveui/refit) count as lesser known?
[AdaptiveClient](https://github.com/leaderanalytics/AdaptiveClient) which also happens to be written by my favorite author of lesser known open source libraries.
[Flurl](https://flurl.io) - A library for writing fluent http requests. We primarily use this for integration testing our API, pairs nicely with FluentAssertions.
[Optional](https://github.com/nlkl/Optional) brings the functional programming language option construct to C#. We replaced all places in our code base where null had been used over the course of a year and we squashed a number of NPE bugs in the process. 
Not sure if this counts, but Dapper micro ORM. Decided to go this route over EF Core. No one I work with seems to know about it when I mention it, but it does seem to be well used. https://en.m.wikipedia.org/wiki/Dapper_ORM 
It's actually rather similar to your own solution, except instead of allocating an array, it simply keeps track of the "index" of the current item (channel) in an integer. Using your example, when the code loops through your three channels, the variables will be: * chn1: `totalWeight=0`, `weight=80` * chn2: `totalWeight=80`, `weight=10` * chn3: `totalWeight=90`, `weight=10` In each loop the code will sum both the totalWeight and weight values and then pick a random number from 0 through that sum. If the random number is less than or equal to `totalWeight`, the channel is not 'selected'. Otherwise, it is. If a channel is 'selected' the loop doesn't end immediately - there is still a chance for a later channel to be selected and replace the currently selected channel. Using that logic, you can calculate the percent chance of 'selecting' each of your three channels (note that `P(something)` is short for "the probability of `something` being selected): * P(chn1): `80/(80+0) = 1/1 = 100%` * P(chn2): `10/(10+80) = 1/9 = 11.111%` * P(chn3): `10/(10+90) = 1/10 = 10%` But "hold up", you say. "This is bullshit. The numbers don't even add up to 100%!" Remember from before that a later channel can steal 'selected' status from a previous channel, therefore we need to update all percentages to include the probability that all later numbers did *not* get selected. * P(chn3) stays the same because there are no subsequent channels - if it's selected, there is a 100% chance that it *stays* selected. * P(chn2) has a `1/9` chance that it *is* selected and a `9/10` chance that it is *not* replaced by chn3 (which is 100% minus the chance of chn3 being selected, aka `100%-10% = 90%`). Multiply those together (the math says that's how you combine probabilities) and **BAM** now `P(chn2) = 1/9*9/10 = 1/10 = 10%`. Pure magic. * Now we do the same for P(chn1), where we calculate the chance that chan2 and chan3 are *both* not selected: * `P(chn1) * 1-P(chn2) * 1-P(chn3)` = * `100% * (100%-11.111%) * (100%-10%)` = * `100% * 88.888% * 90%` = * `80%` Hope this helps you understand it a little bit :)
Sounds like a good idea, hardest part for me personally would be remembering to enter the data, but if you're building it into a mobile app, you could set up something like a wifi reconnect trigger, so once you're home it'll ask if you've spent any money 
*Secret*
&gt;What is actually considered a "Managed Object that can be disposed?" As others have said, anything that implements IDisposable is a good rule of thumb. The only exception I can think of would be if you're writing COM interop code. Those objects really aren't .Net, so they don't have the concept of IDisposable. The marshalling process means that if you don't properly clean things up, then you can have things that hang or won't release the COM objects and they'll stick around in memory. In this case you'd implement IDisposable yourself, but calling something like Marshal.ReleaseComObject on the COM objects that you've instantiated. Basically if you've got System.Runtime.InteropServices in your using statements, you more likely than not will need to implement IDisposable.
I'm not sure. I've been given this code that is for the camera and I can use matrix.transform to move round the world. But I need to track the world location in order to implement collisions within the game 
Can attest to it. LibLog is the most elegant solution to the hard problem of interfacing multiple logging libraries I've seen so far (since every team prefers a different one). It is especially useful for libraries, if your project is an entry point, you can just use whatever, but for code that is meant to be reused, LibLog is a godsend.
&gt;Single dispatch occurs when you use early binding to determine which of several different methods will be invoked. In this case, the compiler determines which function to wire up based on the types of the objects involved at compile time, not runtime. No. What you're describing is simply overload resolution. What happens at runtime is indeed single dispatch. &gt;With double dispatch, the runtime type is used to determine which method is called. This allows us to better use polymorphism. In this example, the call to pen.Draw() will use the runtime type of Pen to determine which function to call (either red or black), rather than one known at compile time. That's still single dispatch, except for a few cases (such as structs) where no dispatch at all is necessary.
I also like to mention that the projects run by the same people from Stack Exchange 
Might be easier to use vectors to track position, facing direction and up direction for the camera and then use the LookAt method to create the view matrix for rendering. You can then use the 3 vectors for doing collision. 
It's not horrible as long as you're having fun and are learning! :)
Yeah that’s what’s I’m afraid of too. That’s a great idea though. I have no idea how to do that but that’s definitely something I need to implement! Thanks for the suggestion!
Yeah that’s what’s I’m afraid of too. That’s a great idea though. I have no idea how to do that but that’s definitely something I need to implement! Thanks for the suggestion!
&gt; lesser known Dapper is probably the most popular micro ORM and maybe the second or third most popular ORM for .Net in general.
We found out the hard way that you can get socket exhaustion by instantiating HttpClients in using blocks, because the disposal is non-blocking and takes forever. And there is no disadvantage to treating it as a Singleton that I'm aware of, it's threadsafe.
have you got any examples of how you would go about doing that? i'm not really sure how its supposed to be programmed. Thanks!
The number of 'Hello World' C# video tutorials has to be in the millions by now. It's not hard to make a tutorial about something anybody could learn in 5 minutes just by googling "Hello World C#". Anybody that needs to watch a 13 minute video on Hello World in C# is not going to understand expression bodied members. And I really can't see any reason why you would be advocating for Visual Studio Code over Visual Studio if you plan on doing any real C# development.
I don't have any examples and implementation depends on what you have set up. But what might work is you have a camera class and two methods in it : GetViewMatrix() which retirement the view matrix created with LookAt and Get/SetPosition() which would be used to get and update the camera position. In your render routine you would get the view matrix and in your physics routine you would get and update the camera position. 
&gt; is any that ~~expose~~ **implement** IDisposable, 
Thank you.
I was looking for tips n´ tricks if someone knew any of those.
Thanks, if needed I will.
\&gt; And I really can't see any reason why you would be advocating for Visual Studio Code over Visual Studio if you plan on doing any real C# development. &amp;#x200B; Hurt my feelings.
Yeah I agree with all your points, thank you for the feedback. 
No problem. And I am not trying to be rude either. I think you have a good format, and a good, clear speaking voice. In my opinion I would just prefer to see more videos on more complex topics, but it might be that tutorial videos don't lend themselves to be ideal for that purpose. 
Same thing. 
Agreed File &gt; New Project &gt; Console Application &gt; (type) cw [tab][tab] &gt; (type) "hello world" &gt; [F5]
Interesting. Did you try it locally on IIS, IIS Express or Kestrel? Could the IIS pipeline throw the error? 
This may be overly pedantic, but the using System; directive is not related to giving access to a library. It grants you unqualified access to any already-referenced libraries that have a certain _namespace_. Library references are not handled with using directives.
Pendantics are important, thanks for the clarification.
DNS changes are not propagated is the drawback.
This wisdom I've seen is, 1. Anything class that is IDisposable 2. Anything class that owns an IDisposable So if you have a class that owns an HTTPClient, that should be disposed.
This algorithm is called Roulette Wheel Selection, or more formally Fitness Proportionate Selection for its use in genetic algorithms. https://en.m.wikipedia.org/wiki/Fitness_proportionate_selection
You're very carefully polite in all your responses. I'll subscribe to the channel and check it out!
Holy goldmine of a post, great idea (Nito.CalculatedProperties - Stephen Cleary)[https://www.nuget.org/packages/Nito.CalculatedProperties/] - Most people use MVVMCross. I love Nito.CalculatedProperties.
I believe the recommendation is that you shouldn't create your own classes with finalizers. Instead you should have a class that inherits from `SafeHandle` for each unmanaged resource, which will implement the pattern correctly for you.
How many internal classes from a separate assembly do you know that expose anything?
Dictionary / hashtable very often Trees/Graphs fairly often (xml is a tree! html is a tree! your code is represented as a tree when compiling it! social networks are graphs. graph theory is everywhere!) Sets sometimes priority queues a couple times 
[nspec](https://nspec.org) \- supports writing rspec style tests in C#. That style is also pretty common in the JS world too (mocha/chai and jest both use it)
The danger is the stupid closed letters you set global headers. You could be leaking authentication info to other sites. We "solved" this by having one HttpClient per domain. 
[Hangfire](https://www.hangfire.io/) Its a fire and forget background processing library. Works great for building restful services that need to perform long and/or self-healing methods. Its also great if you need to spin off hundreds of jobs and ensure that every single one of them finishes.
&gt; So if you have a class that owns an HTTPClient, that should be disposed. No, because HttpClient is a special case of stupid. Use something else for your example like SqlClient or Stream.
I almost never use linked lists, actually. List&lt;T&gt; is *not* a linked list (for whatever that's worth: the framework *does* have a doubly-linked list as LinkedList&lt;T&gt;, and F# uses a singly linked list for its list type ... and it doesn't perform well in most situations). (I *think* there's been one or two times that a singly linked list was useful, but not more than that in the last 12 years or so.) AVL trees *never*, *unless* they're used in the implementation of something I've used and didn't realize it. I don't think I've had to implement or use a generic tree structure for anything, basically, ever. Dictionaries come up a lot. Stacks/Queues show up once in a while. The value of knowing all those data structures is to know when to use them, not to necessarily use them all, all the time. In most cases, if you're working in C#, you shouldn't even be implementing them, yourself.
Ideally yes, but sometimes you need to be 100% sure a particular native call is made to safely release the resources. 
Yeah the dictionary/hash table is common. Forgot to mention that. Interesting.
Yeah, a regular list in C# is just an array that has an auto resize I always assumed, but never worried too much to check into it. Thanks for the feedback.
When I do reach for LinkedList due to a special case, I always find myself wiping the dust off the documentation and being a bit surprised at their design choices. I do use a class based on Eric Lippert's [immutable stack](https://blogs.msdn.microsoft.com/ericlippert/2007/12/04/immutability-in-c-part-two-a-simple-immutable-stack/) quite a bit though.
List&lt;T&gt; usually or IEnumerable.
List/array dominate. Dictionaries a heck of a lot. Stacks/[immutable stacks](https://blogs.msdn.microsoft.com/ericlippert/2007/12/04/immutability-in-c-part-two-a-simple-immutable-stack/) less so. Queues, rarely, outside of [AsyncProducerConsumerQueues](https://github.com/StephenCleary/AsyncEx/wiki/AsyncProducerConsumerQueue) (and even that typically has only a few instances per application). ValueTuples, a bit (if this counts). Jagged (nested) arrays, rarely (typically better suited for an array of classes or structs). Multidimensional arrays, never. LinkedList&lt;&gt;, once every few months. Explicit trees or SortedList&lt;&gt;, even less so. Increasingly, lately, ReadOnlySpan&lt;&gt; - although it shits me to tears the "contagion" it brings. You find a middle layer function that needs the speed up, but now you need to reimplement everything it calls to also support Spans. You can see this in the recent duplication of everything in the CLR - and the worst part is, the duplication more often than not is a direct copy and paste of the prior code (just now different overloads are taken). This is due to Span&lt;&gt; not implementing IEnumerable&lt;&gt;, but rather relying on duck-typing to support foreach. I wish _so much_ they'd found a better way to handle this, even if it was the compiler seamlessly creating the overloads in the background, as w/ Generics. Sigh.
How does `SafeHandle` not work for that case? Its `abstract ReleaseHandle` method is called when you `Dispose` it, or when it's finalized if you don't dispose it.
Absolutely! I've enjoyed it, and have learned a lot about the things I set out to learn. I just would not recommend anyone follow in my footsteps. That being said, once it's completed I'll probably throw it on Instructables in case some other poor soul wants to learn.
Interesting. I didn't realize that it was an abstract class. I only know it from methods that return an insurance of it. Thank you. 
Exactly. That’s 98% of what I see.
Thanks!
I'll look into it. But it will probably take a while.
Check out PowerBI. Very powerful and flexible, allows for quicker iteration and testing than programmed charting solutions and integrates well with .Net, Sql and web apps.
I see that soundcloud has an api so its probably doable.
I write games in C#, but I don't use Unity. To achieve this, I use: [SDL2#](https://github.com/flibitijibibo/SDL2-CS) - C# Bindings for SDL2 [MiniTK](https://github.com/dan200/MiniTK) - C# Bindings for OpenGL and OpenAL, with a nice vector math library [MonoKickstart](https://github.com/OutOfOrder/MonoKickstart) - Not strictly a library, but an easy way to ship self-contained mono distributions with OSX/Linux builds of your games so players have a seamless experience and don't have to go and install it themselves Come to think of it, that's about it!
[NPoco](https://github.com/schotime/NPoco), the continuation of PetaPoco micro ORM.
&gt; the hypothetical controller assembly will see repository assembly transitively Not necessarily. I think you can use `&lt;ProjectReference Include="..\Repository\Repository.csproj" PrivateAssets="all" /&gt;` in the service project to make sure it doesn't leak the repository project. &gt; every new assembly adds a runtime cost That sounds like premature optimization to me. How much cost does it really add? I would worry more about having unnecessarily complicated solution structure. &gt; It also needs to have a configuration file called `.namespacer` added to the build as “C# analyzer additional file” Would it make sense to use [`contentFiles`](https://stackoverflow.com/a/52885223/41071) to add it automatically on package installation?
I don't think I've ever used linked list. I use mainly List&lt;T&gt;, and Dictionary&lt;Key, Item&gt;. Sometimes I use HashSets and basic arrays. I've used a queue and a stack a couple of times I think. Trees are often used but not explicitly. Tree related algorithms are used when your objects represent a tree structure for example reddit comments. You don't write a Tree class you simply put List&lt;Comment&gt; ChildComments in your comment class. 
Lists most, dictionaries second, sets third, queues and stacks and other data structures rarely.
From mscorlib (in descending order): List, Dictionary, HashSet, Queue, Stack Also I'm a fan of System.Collections.Immutable, mostly in same order (List, Array, Dictionary, Set). Some collections from DataFlow, like BufferBlock. Of course you also use a lot of data structures implicitly if you use SQL server or other indexed database. &gt; It’s stressed so much in school, so I found it odd. It is stressed so much for few reasons. 1. It's an easy example to teach you to build and implement an algorithm. And it's a core skill in your job. 2. It shows you unknown unknowns and makes them known unknowns. If you stumble on a problem like "retrieving this object from this list by this criteria takes long time if list grows big" you already know the solution. It doesn't arise often, but sometimes you'd be glad that you paid attention in school. 3. Some default structures allow you to express intent. 
[Polly](https://github.com/App-vNext/Polly) for retries, circuit breakers, anything to deal with fault handling.
I just replaced dozens of nearly identical lines with a method that takes a Dictionary&lt;int, int[]&gt;
Yup, `List&lt;T&gt;` is the generic version of `ArrayList`... and `ArrayList` was named as such because C# 1.0/1.1 was originally designed as a better version of Java.
Most of the time, an array-based lists (like `List&lt;T&gt;`) and hash tables (like `Dictionary&lt;T, U&gt;`) is what we use. Other data structures are less common, but we still see them in practice. I recently used a [thread-safe queue](https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent.concurrentqueue-1?view=netframework-4.7.2) in a driver for a hardware device. There are some data structures you won't use directly but they're there all the time. Directed graphs, for instance, are present in almost any situation where you need to detect cycles (like in dependency injection), but these are usually already implemented inside some lib/framework. 
&gt; [a singly linked list] doesn't perform well in most situations In F# they make sense because F# is a functional language, any recursive data type is welcome there. 
I most often use List or Dictionary.
I evangelize RestSharp at my work due to all the global state, gotchas, and misuse that I see with HttpClient. I was actually taught to put HttpClient in a using block and did so for months until a more senior dev pointed out to me in a code review that HttpClient should not be used that way despite implementing IDisposable. The design flaws with System.Net go beyond even HttpClient alone. Want to specify the version of TLS you'll be using? Go ahead and set a property on the ***static*** ServicePointManager object that will affect everything else in your assembly. RestSharp on the other hand provides interfaces and simple classes that play nicely with mocking and DI. I also like that I can provide a Postman collection to somebody new or a third-party developer and they can easily generate a RestSharp request using Postman.
Just finished my first C# app: an interface for controlling a robot via serial. The same interface in Perl took forever to get working. I had the C# running in a single day, and that’s the first time I’ve ever played with the language, so I’m a bit impressed.
Another usage of IDisposable unrelated to resources being held is the scopes in ILogger (Microsoft.Extensions.Logging). These IDisposable objects aren't typically held longer than the lifetime of a method, but you definitely want to make sure those get disposed if you are holding those as fields / properties to make sure you're not messing with the logging behavior of other classes using ILogger instances that know about your log scopes (when this is the case is too case-specific, so TL;DR: if you do have log scopes living outside of using blocks make sure you call Dispose on them in your class' Dispose method)
Welcome to the fun!
I seriously never get sick of geeking out about C# with first-timers or beginners. My brother has been studying it recently and it's honestly so great to hear from him every time he learns some new trick. It's the most friendly language I've ever used and studied; it pretty much remains a continuous passion of mine. It's kind of wild how fast they add new features to it. C# 8 is basically just around the corner!
I've always wanted to get into monads solely because I think Either's a great idea. It seems like, 99% of the time, you want to do something like Either&lt;string,double&gt; data="some error"; data.Right( (x)=&gt; some happy path ) .Left( (err)=&gt; some sad path ); Anything else I should keep in mind while learning this? It seems like you can append some Eithers but it doesn't do anything?
IEnumerable isn't really a data structure. IMO you need a concrete implementation to really have a data structure.
I'm pretty sure that every time I think I'm going to get away with using a ValueTuple, I end up turning it in to a class eventually. They also make me feel dirty every time I use them.
Yeah a good approach could be running through the MS stuff to get the background on how the runtime works etc., and new tech like ASP.NET Core. Tutorialspoint could still be good for the other stuff though
Yeah the [about .NET Core](https://docs.microsoft.com/en-us/dotnet/core/about) is useful as well. [Tour of .NET](https://docs.microsoft.com/en-us/dotnet/standard/tour) gives a good overview of how .NET runtimes differ compared to other runtimes or native code. Then there are in-depth examples for specific topics, e.g. [how to build an ASP.NET Core app from start to finish](https://docs.microsoft.com/en-us/aspnet/core/tutorials/razor-pages/?view=aspnetcore-2.1)
A great place to start is your book and the free download of visual studio to start getting hands on with it. Print some shit out to the console, read some shit in. Do some calculations on a person's age, etc.
I'm sorry if I wasn't clear... I am working through the book. I was just asking if this is a good place, or if you know a good place.. where I could ask other people questions.
Oh, well if you are looking for C# and .NET questions, I suppose you're in the right place. You just need some specific questions and we can help!
They're nice mostly as an alternative to "out" parameters, and replacing misused KeyValuePairs&lt;&gt; and custom Pair&lt;&gt; classes people have around the place. Sometimes you only want to briefly associate a couple of values together. I also find them useful for temporary arrays - anywhere you have two arrays of equal length, working with two aspects of the same data, a single array of (,) may be neater. Here it's especially nice that they're mutable (weird to say about structs). Also... public override int GetHashCode() =&gt; (Field1, Field2).GetHashCode(); is pretty nice.
This is where the fun begins.
Congrats! Absolutely best strongly typed language. And if you are crazy enough, it has some great dynamic weak typed support. Spread the word!
Nullable reference types! ❤️❤️❤️
&gt; Absolutely best strongly typed language. You forgot F#.
That's a no from me dawg
After doing Java for 10 years, I actually enjoyed switching to C#. It solves some of the complaints that peoplr have about Java (verbosity etc.)
Anders is awesome. He brought us Turbo Pascal too. I've been using his languages and compilers for approximately 30 years now. 
I have co workers that say they turn to F# on the regular now. I have not spent much time looking at it cuz I am too busy with C#. 
C# is the last language I learnt. I've done assembler (z80, 6502, 8086 etc) forth, pascal, cobol, c, c++, delphi, visual basic, c# (And some others along the way I have forgotten). Once I learnt c# (15 years ago?) that was it, I never learnt any new ones. Occasionally I've looked at another one (for example, f#) but I've spent more time now with c# than any other language.
/r/learncsharp
I've always had a soft spot for C# despite generally disliking .NET. That's because originally most of my knowledge was in Java but then I wanted to do some work in C# and everything I already knew was pretty applicable. That doesn't sound terribly important to anyone with a programming background but that was years ago and my only experience was modding Minecraft, so being able to quickly get started in another language was a huge confidence boost. So long live C#. And I must thank Minecraft because if I didn't feel inspired to mess around with it 7 or whatever years ago I likely wouldn't be programming now. Both those things were perfect to push me into programming, letting me meet so many amazing people, and putting me in a position to work on new interesting ideas.
perfect thanks you. I had the feeling this place was a little broad for beginner learning questions.
Sorry about the banana emojis. Inside joke. Come and you'll get it.
Did you know that if you tape a banana peel over a splinter, the enzymes help the splinter work its way out of your skin (and also heal the wound)? *** ^^I'm&amp;#32;a&amp;#32;Bot&amp;#32;*bleep*&amp;#32;*bloop*&amp;#32;|&amp;#32;[&amp;#32;**Unsubscribe**](https://np.reddit.com/message/compose?to=BananaFactBot&amp;subject=I%20hate%20potassium&amp;message=If%20you%20would%20like%20to%20unsubscribe%20from%20banana%20facts%2C%20send%20this%20private%20message%20with%20the%20subject%20%27I%20hate%20potassium%27.%20)&amp;#32;|&amp;#32;[**🍌**](https://np.reddit.com/r/BananaFactBot/comments/8acmq6/banana/?st=jfof9k8d&amp;sh=acd80944)
I keep hearing about f# (and the more hardcore haskell), but I haven't been able to wrap my head around the mindset required to work with the functional class of languages. 
Reasons for disliking .NET?
Even with omitting the functional aspects and doing more OOP styled work F# is still a great choice. I already mentioned a few things, but another feature that F# provides is (in my opinion) pretty great: The order of source files and declarations matter. You can only access functions/types that have been declared before the code you're currently looking at. This greatly reduces the scope of types and functions and makes the code more structured and reasoned. It's not "anywhere defined, anywhere accessed" anymore. Also mutually recursive types must be explicitly marked as such. Either by declaring the types together by using the `and` keyword, or by making the whole module recursive (using the `rec` keyword, a feature of F# 4.1).
Thank you!!! It starts to make more sense every time I read it, I'm saving this.
What do you mean by "programming logic"? :)
Good remarks! This might show some ignorance on my part, but I always thought that \`PrivateAssets\` restricts both compile-time and run-time deployment. I.e., I can't say that \`SomeRepository\` is a private asset for \`SomeService\`, because I need that \`SomeRepository\` code to be present at \`SomeController\` runtime. With regards to runtime costs, this is just a generic Rust-like, zero-cost abstraction point that is perhaps more valid for language and tooling designers than for consumers of the tooling. Obviously, when you are in the consumer position, you have to use whatever you have available to make the software correct in the first place. It's just not ideal that your correctness choices affect runtime more then necessary. A thing I didn't put into the article because it's very subjective, but actually a big reason for me being unwilling to adopt the granular assembly model is that I like to split my code on feature-axis, not on layer-axis. I never even liked "Controller", "Repository" directories in the default ASP.NET templates -- I would prefer to have "Customer/Controller", "Customer/Repository", "Order/Controller", "Order/Repository" ... to keep code with similar business purpose close together. If I am to split assemblies, I tend to do that on business-purpose level first. Splitting things again because of layer visibility makes things really, really granular. \`contentFiles\` would make it much easier to use, thanks for the tip.
Thank you too! I've implemented 3 different methods now that does the same thing. Really happy to have a little grasp now.
The best way to expand your knowlege is to learn a new language. This helps as the more languages you learn the more programatically you think. If you dont want to do this however, you can spend some time doing questions on websites like Hackerrank and codewars Hope this helps!
If the reasons relate to 'Microsoft is evil' then I'd have to say you are outdated.
[removed]
I always, always, always structure my own classes, which always have a relationship to each other. Every class has controller elements and presentation elements, so it's MVC within each class. I can represent a whole class structure in HTML by calling the .toHtml() method (that I created) on it. My classes always reflect the reality of the real life process that they model - this makes the code easier to write, read, maintain, and understand. Real life does not consist of stacks, trees, queues, strings, integers, and booleans. Real life has cars and parking lots with rows of spaces and buildings and libraries with shelves full of books. I don't use **List**() when I really should be using **ParkingLot**(). When my code says **MyParkingLot**.**Park**(**MyCar**) and it returns **MyParkingSpace** everybody can figure out what happening.
When you write "programming logic", I interpret that as an ability to analyze the problem and clearly see what solutions might fit. It is also the ability to weigh solutions up against each other and find the one that stands out among many factors. Code *all the time*, and keep revisiting your code to assess how you could rewrite it to make it easier to understand, simpler, more elegant. Don't spend to much time writing controllers for a REST API. Stay on the edge of your ability and *solve problems*. Find a problem that is hard and write a shitty solution. Analyze the shittiness and try again. You need to be thinking about code problems as much as possible. It is the only way to train your ability, and it's not going to be at even a noticeable speed. It's probably the programmer skill that requires most xp to level up. Or maybe it's actually a derived average from all your other abilities. I just know that you can work with this every day, and this ability will progress really slowly.
While it might notify you of changes to a property in a model, you will not get notified of an added or deleted model in a List. Observable Collection provides events for added and removed models.
Hmm, I always was under the impression that if I implement a list as a property with the INotifyPropertyChangedEvent on the setter, this would update my GUI in case of added or deleted elements. Ok, in that case, this clears up things for me, thank you!
This is my favorite sub. I always get help with issues i am havig with code. If you have any problems just post it. What can it hurt. Also just searching your issue on a browser usualy can point you in the right place. 
Practice. If you've gotten good at what you were doing, target something new which you cannot do (yet). Challenge yourself, keep learning. Practice.
I think you're right that `PrivateAssets="all"`should not work here. I tried it and it worked for me, but it looks like that's [a bug](https://github.com/dotnet/sdk/issues/952). I *think* `PrivateAssets="compile"`should work even after the bug is fixed (because that does not include `runtime`).
Microsoft forgets about F#. I'd love to be able to use it, but it's still a second class citizen in VS.
Practically there is: You should use the Marshal and SHELL programming. I have a sample from my 5 years old blog, which I think worth looking on this scenario (before even your binding). There, I used the SHELL programming (unmanaged and marshalled objects) by importing the windows user32.dll. Only works in Windows machine of course and is only tested in WPF (by that time). So please have a look to convert it properly to the Image object (using IntPtr). Link: http://codesdirectory.blogspot.com/2013/01/displaying-system-icon-in-c-wpf.html
Thank you, Mr. Pendon I will have a look and see if I can improve the logic with your examples. spent about 2 hours googling to come up with my initial example. 
[INotifyPropertyChanged](https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.inotifypropertychanged?view=netframework-4.7.2) is used to notify when **properties** change. [INotifyCollectionChanged](https://docs.microsoft.com/en-us/dotnet/api/system.collections.specialized.inotifycollectionchanged?view=netframework-4.7.2) is used to notify when **collections** change.
Not quite. If you **replace** the list (meaning the setter will be used, and the event fired) then yes, any new or removed elements of the List would be updated appropriately. However if you set the list only once during initialization, and then something adds/removes an element from the List by reference, then no event is fired, and the GUI will not update accordingly.
Ok, your hash code implementation is a great example. That's much cleaner than messing with prime number multiplication.
`PrivateAssets="compile"` seems pretty sweet. I'll play with it a little bit and then probably update the blogpost with a deeper discussion of these options.
Already have them. Non-nullable reference types, though..
Already have them. Non-nullable reference types, though..
So your ParkingLot contains a list?
Assigning a new list e.g. ListProperty = new List&lt;object&gt;() would notify the view that a new list was created. This is inefficient as you are re-rendering the entire list. By using an ObservableCollection, the view can be notified when an item is added or removed from the collection and it can make the appropriate UI changes for that item, rather than the list.
True, the naming is counter-intuitive. :) It's probably because the change will require reference types to be contained in a Nullable&lt;T&gt; to support nulls, similar to a nullable int. https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/
I like seeing the push too. I don't have a problem with windows though. 
This is my primitive understanding... Let's say you have a method that returns a List. Typically it can be better to return IEnumerable instead because each value can be generated and sent individually, therefore limiting the number of simultaneous allocations and allowing the enumerable list to start being sent before having the last value. So let's say we switch our method to IEnumerable from a List to gain this advantage. Okay, now we make that method async and guess what? The benefits of IEnumerable go away since the async Task is going to basically store the contents of that IEnumerable anyway. This is where ObservableCollection comes into play IMO. I think you can return a Task of ObservableCollection and then get the results one at a time similar to non-async IEnumerable. Again, I'm no expert on this but it's where I see the advantage.
I actually really like typescript. It's very expressive. If you have to do any kind of front end work, I'd check it out. 
You don't necessarily need to filter the JSON at all. You can actually just map the JSON straight to the object you want, the serialize will ignore other data completely. I'd look at this like here [https://stackoverflow.com/a/51134033](https://stackoverflow.com/a/51134033)And look whats in the response if statement You can then just create a class as such : `Public class MyObject {` `public MyDataSet[] DataSet {get;set;}` `}` &amp;#x200B; `Public Class MyDataSet{` `public DateTime Etag { get; set; }` `public Guid Id { get; set; }` `public string Text { get; set; }` `public bool Archived { get; set; }` `}` &amp;#x200B; In this example the Templates array would be ignored from the json all together. &amp;#x200B; Then what you can do is just do `return JsonConvert.DeserializeObject&lt;MyObject&gt;(responseJson);` &amp;#x200B;
Lots of mix and max. 
I'm curious to the point of acquiring an exact count of each data structure used in all the production code I've written. Array/List, Dictionary, and HashSet are near the top. We use these extensively. We have guest appearances from SortedDictionary, ConcurrentDictionary, ConcurrentQueue, and Stack. &gt; do you use data structures other than linked lists Please don't use linked lists. Like ever. XD (Before everyone jumps on me, yes, there are specific cases where linked lists are justified. They are simply rarer than you think.)
Well theres plenty to hate on net framework, but fixed in core.
Confusingly, when you write e.g. `string?` in C# 8.0, it's not the same as `Nullable&lt;string&gt;` (which is still illegal), even though `int?` is the same as `Nullable&lt;int&gt;`. (Also, it currently [crashes the compiler](https://sharplab.io/#v2:EYLgZgpghgLgrgJwgZwLQDk4BstWFiAJQkiQDsBjCAFQE8AHFAGhhADcIEBLMWgHwDEZbLnwQABBDJ4CAWABQCgAIAmcQGFxAbwUBITDhkQAPEoCMABgB845AG4FAXyA).)
It’s nice, but I find it a little verbose for beginners and for quick prototyping. Languages like Python or Swift, to pick some different ones, are a bit simpler on the surface. Also, C# does suffer from a number of design “errors” that can’t be changed now, which is unfortunate. Not a huge deal, but still makes it more complicated. Stuff like forced break in switch, goto instead of labeled breaks, too weakly typed enums, too many ways to express “equatable”, and, in the future, discrepancy between nullable value types and nullable reference types and other stuff. Of course not all of this could be anticipated and is just a product of the language being old.
I don't doubt it, but I can't see it, which is why I asked for examples
De Morgan's rules :p
The syntactic differences of F# ("let", "variable:type") seem like an ugly step backward to me. C# is not only useful and flexible, but it's attractive and easy to read.
The three most important data structures, regardless of language, are typically lists (or arrays, in some languages), dictionaries and sets. 
Yeah, Span is a nice optimization but it’s not pretty from a language perspective, and can hardly said to be intuitive to works with. It also obviously only works with homogenous *contiguous* collections, which means it can lock you into an implementation (especially the contiguous part).
"A managed object" is anything you created in just .NET. Generally that means you called a constructor on it somewhere. "An unmanaged object" came from outside of .NET. That means you either used P\Invoke to a C API or some kind of COM wrapper to create it. So like, let's talk about the `System.Drawing.Graphics` class. You generally get one in an `OnPaint()` handler, but you can also get one via a method like `Graphics.FromImage()`. That is created by .NET, and the result is `IDisposable`, so it is a managed object. But inside, it has to manage "a handle to a device context", typically called `hDC` in API terms. That is created by calling something in the Windows API through P\Invoke and is a managed object. So that's why it implements `IDisposable`: it needs to be able to tell the unmanaged code to release those resources when you are done with it. So `Graphics` *is a managed object*, but it references some *unmanaged resources*. If you write a class like that, you are on the hook for telling unmanaged code when you're done with the unmanaged resources you create. You'll know if this is the case, because you don't just accidentally use P\Invoke. But most of the time you are writing managed code that deals with managed code.
Tied to Windows OS instead of self contained, advancing at a snail pace, not modular, very small ecosystem of libraries, closed source, very slow performance and lots of things like zero support for single page apps, in core you have entire nuget spaservices which can use webpack compilation at csproj level etc
https://www.nuget.org/packages/lua/
https://www.nuget.org/packages?q=lua
I especially recommend using Resharper to beginners. To everyone really, but especially beginners. The ability to get suggestions on how to improve your code in real time is worth WAY more than you pay for it. Especially if you're going to college, because then you get it free with a .edu email.
Using C# for robotics is certainly a thing. I do side work for a local integrator that builds machines for Calsonic (CKNA) and Nissan. On every project, there has been a PLC (Programmable Logic Controller) between my desktop C# application and the actual robot and we're all communicating over Ethernet. There are PLC starter kits you can buy online for a to play with. Most of the commands I've encountered are simple ASCII characters like STX and ETX for starting and stopping commands. ENQ for querying status, and so on. Often, the available set of robots movements are scripted into files (proprietary to that machine) and the C# application can load the file and send it over like (simplified): `STX [file containing batch of movements] ETX ESC` and then you listen on the Ethernet port for the robot's response, you update your WPF UI, rinse and repeat. &amp;#x200B; &amp;#x200B;
f# bro. haha.
Removed: Rule 3, Rule 4.
Thanks for pointing this out. I didn’t actually mean linked list. I meant List&lt;t&gt; in c# which is really just an array data structure. It’s obvious to see why a linked list would be non-performant since you have to jump all over in memory for each reference to the next node.
This is probably because `Nullable&lt;T&gt;` is an actual type that exists at runtime, whereas all reference types remain nullable, but now with additional “treat this as if it weren’t nullable” annotations. (Ah, the good ol’ days when the runtime was still in sync with language changes.)
Benefits of ObservableCollections are related to databinding, not about asynchronous results. I guess you are confused with Reactive Extensions and IObservable&lt;T&gt;.
&gt; Ah, the good ol’ days when the runtime was still in sync with language changes. That's not just "good ol' days": default interface methods (also planned for C# 8.0) will require runtime changes.
Yes, but they weren’t bold enough to change the runtime for nullable reference types.
why
Seams cleaner to me, especially considering that you have pretty strong type inference and can omit the type in most cases. To be C# is more difficult to read due to the verbose syntax. There's so much overhead in the code with keyword, forced type declarations and symbols.
Yeah if OP thinks C# is intuitive, F# will be a nice surprise.
I really don't understand why they are learning C# in schools. I mean it's a very good language and versatile but will be hard to grasp and too much to handle by a new beginner. Schools should start with functional/scripting lightweight languages like Python, F# even Javascript(even though it will learn them pretty bad practices by learning this) then after that, they can learn OOP languages like C# and Java.
`Vector&lt;T&gt;` has some SIMD support: https://instil.co/2016/03/21/parallelism-on-a-single-core-simd-with-c/ .Net Core 2.1 introduced Platform Dependent Intrinsics: https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md
.NET Core exposes individual SIMD instructions via the [`Intrinsics` namespace](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.intrinsics.x86) which could presumably be used to reimplement the Intel examples you found. On .NET Framework you're limited by the operations `Vector&lt;T&gt;` exposes. You can cast/reinterpret any arbitrary struct to a `Vector&lt;T&gt;` using the `System.Runtime.CompilerServices.Unsafe` package, assuming the struct's layout matches what's required for the SIMD operation.
Well, unfortunently I can´t get the answer too.
What the `Either` or `Result` type lets you do is disregard the error path as long as the error types match (and if they don't you use composition). I'll use a basic example of a MVC Controller reading from a database, doing some validation and then saving the data back. I'll be skipping a lot of implementation details, instead focusing on how operations can be glued together. public IActionResult PurchaseBeer(string customerId) { return GetCustomer(customerId) .ToEither(Error.CustomerNotFound(customerId)) .Bind(ValidateCustomer) .Bind(CheckCredit) .Map(PurchaseBeerForCustomer) .Map(SaveCustomer) .Match( Right: customer =&gt; Ok("Coming right up!) as IActionResult, Left: error =&gt; { switch(error) { case CustomerNotFoundError err: return NotFound(); case CustomerIsUnderaged err: return BadRequest("Where are your parents?"); case CustomerHasBadCreditRating err: return BadRequest("Cash only!"); default: return StatusCode(500); } } ); } private Either&lt;Error, Customer&gt; ValidateCustomer(Customer customer) =&gt; /*...*/; private Either&lt;Error, Customer&gt; CheckCredit(Customer customer) =&gt; /*...*/; private Customer PurchaseBeerForCustomer(Customer customer) =&gt; /*...*/; private Option&lt;Customer&gt; GetCustomer(string customerId) =&gt; /*...*/; private Customer SaveCustomer(Customer customer) =&gt; /*...*/; This illustrates a few things. We use an `Option` to discern whether we could find a customer in the database or not (`Options` are more helpful for modelling contracts than relying on `null`, since 1) `null` could mean both *"there is no customer"* and *"there is a customer and its value is null"* and 2) it makes the fact that there may be no customer with the given id explicit and forces the caller to handle it). We then use `ToEither`, which will set the value of our `Either` to an error if the `Option` has no value. This will short circuit all the other calls and go straight into the `Left`\-case of the final `Match`\-call. We then use `Bind` to call `ValidateCustomer` and `CheckCredit` with our `Right` value, if there is one. `Bind` might be a bit tricky to wrap your head around at first. It allows use to chain methods returning `Either` together until one of them produces a `Left` value. So if either `ValidateCustomer` or `CheckCredit` returns an error, the whole chain will again be short-circuited into the `Left`\-case of the final `Match`\-call. Then we use `Map` to call `PurchaseBeerForCustomer` and `SaveCustomer`. These methods will never fail, since we've already done our validation (and we are treating any database-connection errors as exceptional errors) so we don't need to be able to return any errors using an `Either`. `Map` just takes the value, if there is one, and transforms it. Lastly we use `Match` to handle both our happy path and our failure path. In our happy path we just return `200 OK`. In the failure path we match our errors to the appropriate status code and returns. The Match function expects both cases to return the same type, which in our case is `IActionResult` (as seen in the explicit cast `return Ok("Coming right up!) as IActionResult`, needed to help C#:s poor type inference figure things out) and that's the end of our `Either`. So as you can see, the failure path is mostly ignored. If you are interested in learning more, then I can recommend Scott Wlaschin's talk [Railway oriented programming](https://vimeo.com/113707214). In general you should never pass `Option&lt;T&gt;` or `Either&lt;E, T&gt;` as a parameter to a function. Instead, the caller should use either `Map` or `Bind` to call a function expecting `T`: // Bad public Option&lt;bool&gt; IsOdd(Option&lt;int&gt; option) =&gt; option.Map(i =&gt; i % 2 != 0); IsOdd(None); // Good public bool IsOdd(int value) =&gt; i % 2 != 0); Some(42).Map(IsOdd); Doing this means that your functions will be a lot simpler, as they don't need to care about the context that `Option` and `Either` provide. It also makes your function more reusable. Using them as return types however is fine and dandy. I am sure there are exceptions to this rule, of course. But I haven't found any yet. &amp;#x200B; I am not really familiar with the semantics of the `Append` operation for the `Either`\-monad, but from looking at the implementation ([Plus, called by Append](https://github.com/louthy/language-ext/blob/5bf2bae651dbab3dc102b4fcfcc8b368621c6af3/LanguageExt.Core/ClassInstances/Monad/MEither.cs#L41)) it seems to be defining a fallback: if the first `Either` has as `Right` value, return the first either otherwise return the second either.
We are in dotnet core land so just code to Microsoft logging abstractions. Only thing we do is wire up ilogger and I logged factory and away we go. 
why
why
Cute! Initially I was thinking "maybe you can, but should you?" but honestly, in this case I don't see why not. The resource has already highlighted potential issues with it, e.g. you're not actually checking if it returns anything of substance, but responses are worth testing as well. Cheers for sharing!
I don't have much to add in terms of more recent libraries, but I will weigh in on my experience with them. NLua is the granddaddy of them. Using it feels like using raw ADO.NET -- it works and it's powerful, but it's raw and you feel there's got to be a better way. DynamicLua is good. It's a wrapper for NLua, making access to Lua more idomatic from.NET. Heavily uses the "dynamic" keyword. I haven't done benchmarking but it feels a bit slower to me than the other libraries here. Moonsharp is my favorite. Instead of wrapping the aged NLua, it's a Lua interpreter written entirely in C# and it feels must more natural/idiomatic than NLua. It has a ton of unit tests in github so there are a lot of use cases and examples.
This questing is akin to saying that you want to drive from SF to Chicago and want to know what oil you should put in your engine There are so many details missing that your question is impossible to answer
I also love C#, I've been writing for a while and it's simply awesome!
yep
Thanks a whole bunch for the thoughtful response! I'm going to stew on this for the next few days, I even learned something new about switches :)
Yes, I've had a lot of good experience with Moonsharp in my project, but the creator stopped updating it because he's way too busy since 2017.
Hint: Parse string to int
If you want to do the conversion to an int, you can change the randomize variable to be this: int randomize = Int.Parse(Console.ReadLine())
Honestly no one cares. If it works. We (the reddit/HN prog crew) forget that nobody else can see the beauty of our creations. I still say feck 'em because at least I can get to sleep at night...
By "variable", do you mean a string variable? If so, it's nothing to do with the fact that they're in a conditional, it's because you're trying to compare two variables of differing data types. What you want is either int.TryParse() (against the string) or ToString() (against the int).
Assuming your computer as the server is not blocked by a firewall from whatever client is trying to reach it, you can list your IP address from the command line using "ipconfig" but not knowing your network configuration, you might run into some issues. Your routers/etc need to expose the port you're communicating on.
Awesome, thanks!
GetEnumerator has a concrete implementation of list under the hood from what I’ve seen and that method is the purpose of IEnumerable interface to use with foreach and deferred execution. So it’s the same thing I believe.
Huh?
Can't speak for video tutorials(i prefer text) but of course game development is a viable career. Just be ready for needing math and whats called "crunch time" which is a big problem in the industry right now. 
You’re welcome! Pattern matching on types in switches requires C# 7.0.
Unrelated to your question (since others have answered it well), but just some critiques on the code: C# 6 introduced [String Interpolation](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated) which allows you to easily insert variables into your strings `Console.Write($"Alright, the code has a length of {pattern} integers...");` This increases readability and is much easier, IMO, to write. `Thread.Sleep` is generally bad practice because is blocks the thread. In Windows apps, this means the UI freezes. In Console apps, it means the console becomes unresponsive and won't shut down if requested. A better option would be `Task.Delay(5000).Wait()`. [Task.Delay](https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.delay?view=netframework-4.7.2) allows a cancellation token to be passed in which could interrupt the delay if necessary. In the code example, I believe the `Task.Delay` would be functionally the same as what you have, but you don't want to get into the habit of using `Thread.Sleep`. It is almost never the right thing to use. Something else to think about (which may be out of scope for your particular lesson) is there is nothing preventing the user from putting in a non-number or a non-integer. Any time there is user input, assume the user is going to do something stupid (because one eventually will). Always validate the input is an integer (TryParse will do this) and is within the range you expect. Happy coding!
It sounds like what you're looking for is a [shared context](https://xunit.github.io/docs/shared-context). You may need to rearrange some of your tests to get this to work just the way you want, but I've had great success with using all three strategies for different purposes.
I am going to assume that you have a firewall blocking the port. You can try disabling Windows firewall temporarily and see if you can still connect by running the wf.msc command. Another clever trick to see if a TCP port can connect is to run telnet serverip port and see if it can connect. If you get a blank screen that means the TCP session was opened. If you get a networking error then that either means the server is not listening on that port or there is a networking issue preventing communication along the way.
That looks interesting - [this](https://pastebin.com/5A654Zuh) is an outline of what I'm starting from (that was done in xUnit 1). The actual copying of the thing I want to do should be pretty easy, it's just a matter of how to structure it in something that xUnit 2 can understand. The structure I've been using (in terms of classes and such) is [this](https://github.com/xunit/samples.xunit/tree/master/DynamicSkipExample), but maybe what I need in terms of actual code would be something closer to [this](https://github.com/xunit/samples.xunit/tree/master/RetryFactExample) I've been stuck on this at least a week at this point and I'm actually starting to get near the point of giving up on this
Lots of reasons... For example, look how the Identity framework works. 
I think you should look up what 'variable' mean in the context of C#'s 'var'. There is no 'var' type, but you can use var to avoid having to repeat the type name. The Console.ReadLine returns a value of type string. You can convert this to an int using int.TryParse. Make sure you check what TryParse returns: not every string contains a number.
What’s ‘under the hood’?
Love your style and what you're doing here. What follows in meant to encourage you to KEEP GOING AT THIS. Please use only the bits you agree with... Some constructive feedback on the code itself. 1. Not sure what card the 14 of spades is supposed to be. 11 is Jack, 12 is Queen, 13 is King. 14 is? 2. I feel you missed the opportunity to introduce enums here. Suits should be enums, card values should be enums. 3. Avoid the use of "this". Perhaps just a style thing? 4. Missed opportunity to introduce string interpolation. e.g. In Card class: public override string ToString() =&gt; $"The {Value} of {Suit}"; 5. I like that you introduce lambdas and LINQ, but this may be a little early for most Hello Worlders. On balance, though continue to use it, but indicate that this is an advanced concept and do a whole episode on that later. Other things... Explain about how VS is helping you spot things like the missing readonly, the semicolon etc. People love to see you make the same mistakes they they do, but do explain each one and how you fix it. For your next episode, maybe introduce unit tests and use it to highlight some of the errors in your code (like e deck having too many cards in it!). My preference would be xunit. Please consider watching your episode back and picking up on your own "quirks" and decide whether you want to polish a few things. Some things I noticed: - using the word "so" at the beginning of each new sentence! - you are in silhouette because you are back lit. Far better to shine a light in from both sides, with a bookshelf (or plants or something fairly generic) behind you. -you mike should be about 2 foot from your mouth and slightly better. A very minor niggle this one.
I'll take a look. Thanks for the suggestion.
This is literally how I taught myself Unity Engine. Got art for a digital deck of cards and practiced shuffling them and dealing them all over the screen.
Thanks ^^
Indeed. However it is an all or nothing option: you can't selectively add a single reference assembly. And allowing source server support slows down significantly my debugging experience, so I prefer not to it when I only need a small piece of code.
&gt; Avoid the use of "this" for private fields. I entirely disagree.
I prefer the use of "this" too. It's pretty explicit.
I used to use "this." as well when I was younger. Until I got tired of typing "this." all the time. I prefer an "_" prefix now.
Thanks for mentioning this! (I'm the author of the article) I've included some info about ASP .NET Core Identity using Razor Class Libraries before the end of the article. :) 
Right, I’m using Vector&lt;T&gt;, but there is no built-in support for Complex numbers. I was wondering if there was a reason for this, like pointers aren’t compatible with Complex structures, or if it’s an oversight and I could just implement it myself. 
Right, I was just wondering if it was possible to extend the Vector class to work with Complex numbers. As it stands it only works with primitives like byte-double.
Sorry for nitpicking, but jack is 12, queen is 13 and king is 14. Ace is 1 and 11.
no .. Jack is 11 / Queen 12 / King is 13 / ACE is 1 or 14 .. Ace is always the lowest and highest card possible in a hand. High straight is J / Q / K / A not A / J / Q / K.
It sounds like you bound the server to the address 127.0.0.1. This will cause the server to only be available on the loopback adapter, meaning only available with the 127 address or the 'localhost' domain name. You can open the command prompt and run 'ipconfig' to get a list of other adapters on your computer, and bind directly to their IP addresses instead. This would make the server listen on that adapter instead. You can also bind the server to the wildcard address '0.0.0.0' which would allow it to to listen on any adapter, from your own and any other computer over the network. This is prob what you want. When you run ipconfig, if you see the ip address as either 10.*.*.* or 192.168.*.* (asterisks being any number, so you would see some address like 192.168.0.104), then your computer is connected to a local lan. If you have wifi in your house or more than one internet connected device, all the devices are inside the lan. If you are connecting to the server from another computer in your house, you use the lan IP. If you want to connect to the server from outside the lan (outside your house), then the client needs to use your external IP address that your ISP assigned you to connect to the server. You will need to set up port forwarding for port 1300 in your router config so that your router can translate the connection from your external IP to the internal lan IP of the computer the server is running on. You can go to a site like [whatsmyip.org](http://www.whatsmyip.org/) and it will tell you your external IP address. If the external IP is the same address as the one you see when you run ipconfig, you do not have a lan set up in your house, so all the lan info and port forwarding does not apply to you. You can use a site like [canyouseeme.org](http://www.canyouseeme.org/) to verify that you properly set up port forwarding. Also be aware that Windows, and your router, have firewalls that might be set up to block your server.
GetEnumerator has *many* implementations. Some of them are based on a specific data structure.
Very straight forward and easy to follow. Never heard of a stack data type, will have to look into that. Thanks!
Sorry, you might not be a native english speaker. "Under the hood" is an expression derived from opening the hood of a car and investigating the engine underneath. In this sense it's asking if your interested in the deeper internals of an engines such as; rendering, data management or physics. These are generally far more advanced topics and probably not a great starting point as it requires greater mathematical and computer science knowledge.
Good work. Creative!
Issue you're having is assigning points/numeric value to them, which is only applicable to a certain game/rule set.
/u/jfishersolutions, another tip just to improve your video quality is to statically set all the values on your camera so the white balance isn't constantly going up and down when the sun pops in from behind.
Tutorial link? 
I self taught myself by watching tutorials on YouTube. Brackeys is a great channel and is where I started.
Yes. I think that’s the official naming guide. I also use _s_ for static class vars 
Thanks.
Thanks.
&gt;I now want to present them at a certain distance and size, the same image first close and small then big and far away. And then it should go to the next image and do the same. You want to learn how to apply perspective to images. https://stackoverflow.com/questions/5692945/perspective-image-distortion turn the flow of texture into a function, this way there is no need for a loop. :] FlowControl() { render(small1,big1); render(small2,big2); .... } 
Removed: Spam. Please review the [guidelines for self-promotion on reddit.](https://www.reddit.com/wiki/selfpromotion) I can see you're passionate about learning and expressing that to others, which is great! I would try though to limit your submissions to a weekly basis at most, and try to make them as substantial as possible where you can.
Thank you. Just picking up the concept of reddit! Now I know.
ok thanks... I'll post here then.
ok thanks... I'll post here then.
Is it ok to cross post in both places then?
Most likely, the problematic line (for the sample problem, not the real world) is going to be this: `Console.Write($". This is the month : {month}\n");` What you're doing is an implicit .ToString() on the MonthsOfYear enumeration type. By default, the .ToString() will return the value of the enumeration variable as a string. So when the `month` variable is equal to `MonthsOfYear.January`, then `month.ToString()` will return "January". I assume the sample was expecting you to not use the implicit .ToString() and wanted something more like `if (month == MonthsOfYear.January) { Console.WriteLine("January"); }`. This would be a rather long, tedious series of if/else statements, but what you originally wrote effectively amounts to the same thing. A switch statement would be equivalent. Ultimately it will be up to you to interpret the requirements of the problem and decide how to implement it.
Thanks... yeah.. ok. I thought there was something wrong.. but ok... &amp;#x200B; is it best to post code blocks like I did, or just link ot hastebin
 if (input &gt;= 1 &amp;&amp; input &lt;= 12) { ... } A better approach would be to use: `Enum.IsDefined(typeof(MonthsOfYear), input)`. This will automatically recognize changes in the enum (which in this case is unlikely to change) and result in much more expressive code. No magic numbers anymore.
I entirely disagree with your disagreement ;) I guess it is a style-preference kind of thing, but I find this to be noisy and redundant. If you need it to differentiate between fields and parameters, then you have a more overall coding style and naming issue. Of course you may like different colors tan I do...
Also on line 40... the deck is never going to have more than 1 card since is cleared every time because of the `_deck.Count() !=52`. Having one card checks both deck not null and count not equal to 52
Also take a look at [Superpower](https://github.com/datalust/superpower) by the same author.
Actually it's likely to be a subclass of Div(), which is a subclass of List().
I don't know if I understand your question correctly but I think this is something that identity provider server could solve. Try to look it up. You can use already popular identity providers like Google or Facebook, or you can run your own identity provider server. 
Stuff like this is fine. It helps if you format it as code, tho (4 spaces at the start of each line in Reddit). If it's much longer, Pastebin, or some place like GitHub is probably better. As with everything, just try to make a good effort and people will help you out there are a few other subs like /r/learnprogramming and /r/learncsharp that may be better for your questions as well.
Hah. Don't become a developer.
Ah, the power of unit testing.
While the ace is 1 or 11 in blackjack, it does not apply to this scenario. 
Don't really know why you go out of your way to say someone shouldn't be a developer. You've got people replying here that have never even heard of a stack before, even. There's probably a reason why they think this way. 
[ClearScript](https://github.com/Microsoft/ClearScript) for consuming JavaScript on V8.
`IsDefined` is reflection based and slow, or at least it used to be, though. Not that that's generally a concern, but since we're doing it that way why not just `Enum.TryParse`?
RTFM :) Have a look into [Identity](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity?view=aspnetcore-2.1&amp;tabs=netcore-cli) and [Authorization](https://docs.microsoft.com/en-us/aspnet/core/security/authorization/introduction?view=aspnetcore-2.1). The former to log in and the latter to allow access for only certain users. hopefully between the two you can achieve what i think your after. I would highly recommend reading those ASP.Net core docs just to get a feel for how everything works and what you can do.
Well this new type would either be a class or struct. Within this new class you just need to define the properties listed. So, First, Last (Presumably these are names), Length (Presumably the length of said name) as well as the given methods. Personally, I am not sure how I could break it down any more then what you have been presented but perhaps someone here can re-word it in a way that clicks in your brain.
I was thinking that it would be a class, but the length part doesnt make sense to me, thank you for your help :) 
Sounds like they expect you to be wrapping and underlying `T[]` array or `List&lt;T&gt;`. Length would probably just be a property that wraps that underlying collection's count. For example: public class CustomDataList&lt;T&gt; { private List&lt;T&gt; WrappedData = new List&lt;T&gt;(); public int Length { get { return this.WrappedData.Count; } } } The assignment didn't explicitly specify it, but "properties" can be "read-only" in that they don't need to have a setter. With this above `Length` property as I've defined it, you can report the current number of entries added to your data, but you can't _set_ it to some other arbitrary size.
Removed: Rule 4.
Are you using Unity for this. If not, I would advise looking into it. There's lots of documentation and forum posts out there which will make it easier for you
My best guess is that your pattern-variable is null. &amp;#x200B; I think doing "String literal something" + variable + "more string literals", calls some type of static string-method such as string.Concat(). And it's actually this causing the Exception as I dont think Console.Write() can throw that type of exception. Try creating the string before your pass it in to Console.Write() or run the debugger and check the value of your pattern variable to make sure it has the value you think. 
Also you do realize the line that reads the length of the string will do just that, get the length of the input-string, but the actual string will be lost forever. Not sure if this is what you want to do. int pattern = Console.ReadLine().Length; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B;
The GPX file format is proprietary, but it's been reverse-engineered by several people — so accessing the tuning for each track in each file is indeed possible. Have a look at the MuseScore open-source project for one implementation of a parser, written in C++.
Removed: Rule 4. Try using the debugger and step through your code. Perhaps you're not looking at the directories or the logic isn't executing as you expect. https://docs.microsoft.com/en-us/visualstudio/debugger/debugging-absolute-beginners?view=vs-2017 Also, in your `else` branch when you create the new directory, you don't add it to your set of `listDir`. This means you might end up trying to recreate it later if a file shares the same creation date.
Gearhost. It's free for hobby projects and 5 bucks a month for upto 1 gig
Check out Microsoft Azure. They give you some credit for 30 days, but even beyond that, they have several free tiers of services. As long as you don't need large compute power or a database, you should be able to deploy a .NET Core app there for free. Once you get everything setup, publishing updates "just works": https://docs.microsoft.com/en-us/aspnet/core/tutorials/publish-to-azure-webapp-using-vs?view=aspnetcore-2.1 If you do need to scale up and use a database, the basic tiers there are ~$5/month.
using DataRows would have been a cleaner solution. https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualstudio.testtools.unittesting.datarowattribute?view=mstest-net-1.2.0
VS does this for you automatically now, after writing your properties you can ctrl+. on the class name and have it implement all those overrides. 
Any vps provider will do. Ovh or scaleway or vscale or digitalocean, oll of them provide a good vm for ~5$ 
Quite right. Edit made.
It's not uncommon for the underlying int values for an enum to be sorta arbitrary. Enum names are also often not intended for display. A switch or series of ifs is useful for mapping to or from an enum value to another type.
Combined with removing a random number from 'pat', he would have to enter over 100 million characters in that first read to avoid a potential exception. To OP: you should tell us the logic for what you are trying to do here, because as written, you'll have problems depending on what you randomly produce.
Heroku!
Hosted on Digital Ocean, Vultr, or Linode in a docker container. 
How’d you get your project up and running on Heroku?
But will only work as long as all your values are constants.
You only need to specify first enum, it will auto assign incrementing numbers by default. [Example code with months enum]( http://www.dotnetjunkies.net/csharp/enum-working-with-enumerations/)
TBH Jack is Jack, Queen is Queen... etc. Numeric values for face cards only apply to certain games. Example, in Blackjack or even a game like Cribbage, all face cards are worth 10. In Blackjack an Ace can be a 1 or 11, but in Cribbage, it is only a 1. Assigning numbers to those cards for identification purposes only, however, is probably fine. Of course, at that point, i'd use an enum.
\+1 for Azure. Also, working with Azure resources and Azure DevOps together is such a treat.
All good points, one additional item I would add is a private setter on the cards. The cards should never change after they are initialized. I do like your suggestion on enums, was thinking of something like a deck configuration class that was passed into the deck. There maybe a way to introduce interfaces hidden in there. 
&gt; As long as you don't need large compute power or a database Or a custom domain, then you need at least **shared** (~10 US$ per month) or **basic** (~50 US$ per month). Tho shared does not provide any SLA, so I wouldn't count it under "reliable".
You should never use goto statements in code. It makes the logic difficult for humans to follow. It is difficult to troubleshoot. You should never wrap the whole program is try\catch blocks. There are rare situations when you should use try\catch, but typically only when things could fail beyond the control of a programmer. Try\catch on the whole program makes it difficult to troubleshoot. string pat = Convert.ToString(pattern); pat = pat.Remove(pat.Length - rand) + randomNumber + randomNumber + randomNumber; That is your problem. You are storing a string with the length of text. So if I enter LOL, then you will get the length of 3 and store that as the string "3". Then, your formula uses pat.Length. The length of the string "3" is 1. The remove function does not allow a negative number. For easier troubleshooting you should have an int called something like "remove_length". Then do pat.remove(remove_length). That intermediate step would make it easier for you to see what is happening and troubleshooting rather than just throwing a big long formula. 
Perfect.
Mind explaining why? I personally don't see any use for it.
Removed: Rule 3, spam. I would recommend you review and follow the [guidelines for self-promotion on reddit.](https://www.reddit.com/wiki/selfpromotion)
&gt; In C#land, the BinarySerializer can only be used to store properties, not methods. Fields, not properties.
What do you mean?
Personally, I think it looks weird. But some of the stuff F# lets you do is pretty insane.
any of the popular linux VM hosting companies should work, linode, digital ocean. They can do things like give you a VM with 1/4 of a core for cheap 
There is not "official naming guid" for provate fields.
Are you getting an error when attempting to compile? If so please post it.
This is completely indecipherable, which is how I can confirm that this did indeed come from a comp sci professor. Nothing is jumping out to me as being wrong, but without an error message, or the raw text so I can run it myself, I can't provide anymore help.
To start problem solving this, you need to take notice of the compilation errors. If you want to go through them, post the errors here.
&gt; DialogResult.NoThanks lol this actually made me laugh, have an upvote.
Your compsci prof failed my code review. 1/10.
For starters, it's incomplete. Like Java, C# requires that methods be hosted inside a type, so you'd need a class to wrap this up in. It's using some LINQ stuff, and the System.Math class, so you'd also need to import those with some `using` statements at the top of your file. Those seem like the only things obvious wrong or missing, but the rest depends on what you want to do with it.
 int length = numbers.Length; It's an array.
In the last lines, it is handling res variable as an array, while it a double.
While I don’t know why you wouldn’t use .Length if you’re using an array, arrays implement IEnumerable, making Count() valid as long as the System.Linq namespace is included.
&gt; Of course you may like different colors tan I do... Personally I am more of a blue, green, or silver - but if tan if your thing then awesome.
Correct. Wasn’t shown to be the case in the screenshot though. 
I wouldn't use the "Free" web service for anything more than just tinkering around with stuff. I've got a "production" app service, a test one, a db for each, and use blob storage quite frequently, my bills tends to be around $75/mo and that's about as cheap as I could get it while still having things fast and reliable. (granted the $50/mo credit with my vs license helps tremendously haha)
is it bad that my main take-away was " ObjectInputScream"
Looked it up. I stand corrected! There is no naming guideline. 
Just FYI var is not a type. It just saves you typing the type and the editor/compiler figures out what type it actually is. In this case it's a string. 
That's the parent class of StarScream.
Well, visual studio disagrees with you :) one of the analyzers tells you to remove 'this.' from your code wherever possible (which is everywhere unless you have a local named the same thing as a field/property, which is your fault).
goto's makes me cringe
 int pattern = Console.ReadLine().Length; string pat = Convert.ToString(pattern); First line above is almost certainly not what you intended. I think you meant to do something like this: string pattern = Console.ReadLine(); int patternLength = pattern.Length; There's no need to convert the int to a string before you use it in your **console.writeline("Alright .. + patternLength + ... ** line. Ints will convert to string automatically. I would suggest using string interpolation as well. i.e. int myLength = input.Length; Console.WriteLine($"My length is {myLength}. It's automatically converted inline from int to string. Isn't that neat?"); Using "+" is inefficient and pretty much never needs to be used. 
And it will be second class precisely until people who would love to use it use it.
`pattern` is declared as an int. As a value-type, it can never be null. Something else is going on.
I wouldn’t really expect a serializer to verify data integrity, but I suppose it is worth thinking about (but a bit much to call it an API flaw).
Maybe look at Typa ([https://archive.codeplex.com/?p=inputsimulator](https://archive.codeplex.com/?p=inputsimulator)), you can then do something like this: &amp;#x200B; \_hotKeys = new HotKeyHelper(this, HandleHotKey); \_hotKey1 = \_hotKeys.ListenForHotKey(System.Windows.Forms.Keys.V, HotKeyModifiers.Control | HotKeyModifiers.Alt); &amp;#x200B; \[STAThread\] void HandleHotKey(int keyId) { if (keyId == \_hotKey1) { //Do Something } } &amp;#x200B; &amp;#x200B; &amp;#x200B;
Affordable *and* reliable? Am I allowed a root comment laugh in this sub?
I would follow up and suggest that your inset video of yourself lives for a while in the video and then goes way so the VS can be seen full screen.
Serialization presents a real threat, but this article is crappy. First of all, trusting deserialized data from untrusted sources is obviously a problem. This is the case for all serializers, since the only real solutions require custom logic for validation and/or key management for signatures/authenticated encryption I don't know any serializers that do this automatically. No clue why the article is saying "BinarySerializer [...] is the only serialization class that remains vulnerable to this kinds of thing" and which .NET serializers the author imagines to be immune to this. The second, potentially more dangerous issue with the article doesn't really mention/explain is serialization gadgets. Rather than simply providing invalid data to valid types/properties, `BinarySerializer` allows you to instantiate arbitrary types, call a limited number of constructors/methods, and set arbitrary properties which may cause further code execution. This is indeed something that not every serializer is vulnerable to, although other popular ones (e.g. Json.Net with TypeNameHandling configured) are, too. Normal post-serialization data validation doesn't save you from this kind of attack since it all happens internally to the serializer, in the case of `BinaryFormatter` you'd have to provide a custom type resolver that performs whitelisting.
That is the default, but you can configure that analyzer to flag the opposite as well, requiring \`this.\` everywhere.
Amazon T3 mini instance + Linux can easily handle nginx + asp.net core app. And you'll get 1st year for free with their [free tier](https://aws.amazon.com/free/?awsf.Free%20Tier%20Types=categories%2312monthsfree).
It's a proper thing: https://www.owasp.org/index.php/Deserialization_of_untrusted_data But I think that if you've been compromised at the level required to exploit this then, well, your forked...
The COM objects you are talking about are an example of the *unmanaged* resources that should be disposed of outside of the `if(disposing)` statement. They should be disposed of during either disposal or finalization. Managed Objects that can be disposed, on the other hand, should not be disposed of during finalization. Their own finalization needs to handle that case. This is because the order finalizers run can not be guaranteed, and those objects may no longer be invalid.
It's definitely worked in their favour to open source. This article doesn't even talk about the toolsets that work on top of Core that are also open source, like Avalonia.
&gt; No clue why the article is saying "BinarySerializer [...] is the only serialization class that remains vulnerable to this kinds of thing" and which .NET serializers the author imagines to be immune to this. Yeah, that struck me as weird. Surely any ol' XmlSerializer or JsonSerializer or DataContractSerializer is equally "vulnerable" to tampering? I've never seen them include a checksum, much less a digital signature.
Hey /u/almost_not_terrible, thank you so much for taking the time to write this, this is gold to me. I just ordered some proper lighting and a green screen per your suggestion on the background and silhouette. The rest of your ideas are spot on as well. \- Introducing unit tests w/xunit to highlight errors in the code is a great suggestion. \- Introducing enums and string interpolation would have been perfect as well, in a coming video I will incorporate the deck into a larger program and refactor to include those. \- On the topic of quirks, I haven't realize the '"so(s)" before so thanks for pointing that out (used to be lip smacks, but I think that one has worked its way out lol). Once again, a massive thank you. This is some of the best constructive criticism I've ever gotten, and will really help a ton moving forwards.
Thanks! I'll have to check that out. Just picked up a Logitech C920 and have some experimenting to do.
Thanks /u/brand0n!
It is very complete, and I was able to figure out what I needed after a thorough reading, I just don't always want to spend 10 minutes reading, when I can just use the first GroupBy parameters suggested by intellesense and then make a preceding or following select call to get what I want. Sometimes I cut corners when efficiency doesn't matter as much as speed of prototyping. I left comments so I or someone can figure out if there is a better way to write the linq query at a later date. One of my biggest problems is development speed. I try to do things the "best" way and I should be trying to go faster. My biggest issue that comes up during performance reviews is being a perfectionist. My hope was that there was additional documentation for linq that would be easier to read at a glance without in detail looking at each of the overloads and the examples. As /u/checker23 pointed out, IEnumerable&lt;T&gt; signatures with anonymous functions don't seem that helpful. &amp;#x200B; What percentage of programmers are actually reading and gaining useful information from this: &gt;GroupBy&lt;TSource,TKey,TElement,TResult&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource,TKey&gt;, Func&lt;TSource,TElement&gt;, Func&lt;TKey,IEnumerable&lt;TElement&gt;,TResult&gt;, IEqualityComparer&lt;TKey&gt;) Would that help you describe this overload to a junior programmer? ## 
\&gt; Avoid the use of "this" for private fields. Perhaps just a style thing? &amp;#x200B; I wouldn't say this is an issue. Some groups I've worked with do this by default to clearly distinct it from a local variable
I have found exactly one legitimate use case for gotos in C#, namely allowing for a "fall through" in a switch statement. I've used it exactly once.
https://github.com/jincod/dotnetcore-buildpack
What a low-effort shitpost, seriously. It frequently changes how .NET Core is written and the English is lacking as well. &gt; Mac &amp; Linux users waited so long but after .Net Core launch we can Develop &amp; Run .Net Core Applications using Mac or Linux. .NET Core applications could **always** be run on Mac OS X and Linux. &gt; With ASP.NET Core, MVC and Web API have been merged together. So now MVC can also return JSON Data. ASP.NET MVC 5 controller could return JSON data just fine as well. &gt; A dependency is an object required by another object. Uhh... no shit. &gt; It is the preferred way that things like logging contexts, database contexts, and other things are passed into your MVC controllers. ASP.NET MVC supported dependency injection already. Good thing is that support got expanded to other parts of the framework. &gt; .Net Core comes with latest Angular &amp; React SPA Templates. Those templates are additional components, they don't come with .NET Core. And that is really a top feature for you? &gt; you can change this Project.json file The project.json file doesn't exist for at least a year anymore. Where have you been? &gt; Tags are easy to remember and generate the equivalent HTML at the end. If tag helpers would generate "equivalent" HTML at the end, then they'd be mostly pointless. They're much more useful and don't have to generate HTML at all if it's not needed. &gt; Swagger is used to automatically generate Documentation for API. It makes easier for API developers to expose documentation for Front-End Developer. Swagger is not part of .NET Core. It's provided by external libraries which have been available for ASP.NET Web API as well.
For sure, a good reference, but sometimes not the depth I need. Their page on groupby (for example) does not have any of the overloads. &amp;#x200B;
Yep! Then you go to the documentation and try to figure out what overload you want, and then you still need to try and parse out those ridiculous method parameters.
this. == instant IntelliSense
Removed: Spam. Please review and consider the [guidelines for self-promotion on reddit.](https://www.reddit.com/wiki/selfpromotion)
Fyi ConcurrentBag is built in
Looks like a hardware interrupt type issue. I would try plugging the mouse into a different usb port.
The mouse works just fine, its that the live feed from the camera 'stalls' whenever i DONT move the mouse
Update: It only does this when using the Visual Studio IDE for running the code. When i run the .exe file by itself from the debug folder: It's fine! &amp;#x200B; I never should have picked up C#..... xD
If you have a lot of buckets and you want something like a bell curve, you could use a Cauchy Quantile method (throwing out results that don't land in one of your index values) to get a [Cauchy Distribution](https://en.wikipedia.org/wiki/Cauchy_distribution). It looks like a bell curve, but is a bit "flatter". It's also easy to calculate, but you have to throw out values that are outside what you want.
Yes, but it's not the same as ConcurrentHashSet, because it allows duplicates. 
I found much inspiration reading through this list: [https://github.com/quozd/awesome-dotnet](https://github.com/quozd/awesome-dotnet)
At my workplace we take it into account at a theoretical level... For example I reported this defect to Authorize.NET: https://github.com/AuthorizeNet/sdk-dotnet/issues/175 If someone managed to override the public DNS for Authorize.NET, they could in theory return api responses that deserialize malformed delegates and take over our servers via our application(well not anymore because we have a secure implementation). It seems pretty obvious to me that the attacker would never take such a risk, having already owned Authorize.NET, but still there is a possibility... It isn't just the problem of "if you've been compromised at the level required to exploit this then you are fucked," rather "if you've been compromised at the level required to exploit this, everyone who trusted you is fucked."
Could you elaborate on what mean by "loads"?
TIL
Like this black window program in which your code is written. For example you made a guessing game in which you have to guess a number between 1-10 and when at one point you won the game and you press enter to close it, it will reopen and you will have to press enter again to close the program. So it runs twice for some reason.
I've been using Visual Studio through several versions spanning 15 years. I've never seen something like this. Do you have any plugins or extensions installed? Maybe reinstall it?
Oh lol, I would've thought it's more common. Yeah I might reinstall it, but after I'm done with the course since the installation takes a while. I didn't download any plugins or extensions by the way.
Definitely - cards should not change after initialised.
Sounds quite odd. Anyway post your code just in case it's something in there 
app.UseCors(builder =&gt; builder.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader());
I'm doing a course currently so it's not finished but here: using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace WorkingWithStrings { class Program { static void Main(string[] args) { //string myString = "My \"so-called\" life"; //string myString = "What if I need a\nnew line?"; //string myString = "Go to your c:\\ drive"; //string myString = @"Go to your c:\ drive"; //string myString = String.Format("{1} = {0}", "First", "Second"); //string myString = string.Format("{0:C}", 123.45); string myString = string.Format("0:N", 1234567890); Console.WriteLine(myString); Console.ReadLine(); } } } Also, this happens in every project I write.
Doesn't look like it's anything you're doing. I agree with the other poster, try a repair/reinstall 
Easily done. Check out this Buildpack: https://elements.heroku.com/buildpacks/jincod/dotnetcore-buildpack General steps: 1. Create your .NET Core project (e.g. ASP.NET Core) 2. Ensure you have a local git repository 3. Create a Heroku App with the toolbelt. 4. Add the buildpack to the app 5. git push heroku master That's it. Super simple. No issues found to date. I'm running regular ASP.NET Core without any issues and Blazor as well also works without any special config. If you scale your app up - you'll want to use the Heroku Redis Add-On for the data protection API. If you are new to Heroku, try some of the basic node.js tutorials first to get familiar with the developer experience.
Or app.UseCors(builder =&gt; { builder.AllowAnyOrigin(); builder.AllowAnyMethod(); builder.AllowAnyHeader(); }); The point is, OP is not telling the application to use one instance of the CORS middleware and have it allow any origin, any method, and any header, OP is telling the application to use three instances of the CORS middleware: one that allows any origin (but no methods or headers), one that allows any method (but no origins or headers), and one that allows any header (but no methods or origins).
Yeah it looks like each of OPs calls would overwrite the last one. Is that what you are saying?
Thats exactly what was happening !!! THanks guys
Both of you..... LEGENDS :)
&gt; Yeah it looks like each of OPs calls would overwrite the last one. Is that what you are saying? It's actually even worse than that. If a request were handled by the first Cors middleware and not denied, it would then be required by the second Cors middleware, and then (impossible except as a mental exercise, since one of these would deny the request) it would be processed by the third Cors middleware before finally being passed on to HttpsRedirection and then MVC.
It's calling an asynchronous operation and blocking on it synchronously with `.GetAwaiter().GetResult()`. Looking at the [MS Docs](https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.getawaiter?view=netframework-4.7.2) for the GetAwaiter() method, "This method is intended for compiler use rather than for use in application code". 
My guess is that it was deadlocked when they called .Result(). If so, the options to fix are: * Use async/a wait * Use a callback * Run it on a new thread, blocking the current thread until it's done Basically they are doing option 3 in the most ham-fisted way possible. In theory ConfigureAwait(false) will kick it into a thread pool thread, but I can't say that will work 100% of the time. 
Can you recommend any good resources for CORS it seems to be one of the most useful yet least documented features out there especially when it comes to c#
`GetResult()` synchronously waits for the task to complete and thus blocks the current thread until it's done, which can have performance drawbacks. This can also lead to deadlocks in certain situations, though probably not in this case. It should be avoided in favor of `await` if at all possible. Secondly `ConfigureAwait` configures how an *async* continuation is performed. This code doesn't await the task asynchronously, combinding `ConfigureAwait` with `GetResult` makes no sense.
Maybe its your anti virus, mine does something very similar. It first runs the program in a sandbox and when its deemed safe itll run it normally. Try disabling your anti virus if you have one.
https://docs.microsoft.com/en-us/aspnet/core/security/cors?view=aspnetcore-2.1
I don't know anything better than the docs.microsoft.com pages for the CORS middleware. Sorry.
**If** a task result absolutely has to be obtained synchronously, using `GetAwaiter().GetResult()` is the preferred option (compared to `Task.Wait` or `Task&lt;T&gt;.Result`) because it unwraps `AggregrateException`s for you, which makes for cleaner error messages and catch statements.
What are some more of these interesting frameworks? 
There is no possible thread switch here because the task is waited for synchronously, so it certainly won't work here.
This actually might be it, I'll try that. Thanks!
Continuous improvement - it's a way of life. Big bro love. Keep 'em coming!
You can reinterpret from a `System.Numerics.Complex` to a `System.Numerics.Vector&lt;double&gt;` with the unsafe package: ref var vec = ref Unsafe.As&lt;Complex, Vector&lt;double&gt;&gt;(ref myComplex); Be very careful with that because it could have different behaviors in different runtimes or versions of the runtime. The vector class is unlikely to be extended beyond the set of primitives because most operations on it are optimized by the runtime to be single instructions and that would be difficult to achieve with a type set not fully under the control of the runtime.
[https://cloud.google.com/free/](https://cloud.google.com/free/) &amp;#x200B; Google compute has a permanent free host. AWS and Azure have time trials. If you are a student or starup, There are free azure programs also.
Fair point, it really depends more on the game that is played. And yes, enum would be an ideal solution to this. 
Yea I have a few nodejs Landing pages on Heroku but I thought it was a lot harder to get a .net core app up and running. I’ll try it out thanks!
Question, what about getting a database up and running if I use EF? I’ve never done that on Heroku. 
Heroku has Postgres - but I personally use MongoDB hosted at MongoDB Atlas
IMHO the problem here isn't a modification of values but the fact that you can instantiate all kind of classes (for example from an additional assembly you put into the programs directory or the GAC) that aren't meant to be instantiated during deserialization. 
Not OP, but I keep an eye on [awesome-dotnet-core](https://github.com/thangchung/awesome-dotnet-core) every so often. You’ll probably find something that piques your interest in there.
I don't see the point of `ConfigureAwait(false)` if you are getting the result synchronously.
Was this a console application by chance?
What is the license? None seems to be provided.
It's open source. Don't relabel it and try to sell it or anything like that. If you improve on it please submit a PR so others can benefit. Other than that use it as you wish. 
See if, in your main form's constructor, you have Initialize Components listed twice. If you do, your beginning code will run twice/\\.
Check whether you have any exceptions in the log. When debugger is attached, logging exceptions (especially if they occur at a high frequency) can seriously slow down the execution. Also, your issue is probably not related to C# or whatever other language you might consider.
You should have a read of https://blogs.msdn.microsoft.com/pfxteam/2012/04/13/should-i-expose-synchronous-wrappers-for-asynchronous-methods/ The TLDR of it is, you should be wrapping the asynchronous api in a task.run 
Your code smell is that they shouldn't have tried to block async code. He should have been using something like `WebClient.DownloadString()` instead or do like you did and make the function an async function. He's asking for a deadlock with that set up because you have to `ConfigureAwait(false)` the whole way up and down to (hopefully!) ensure it doesn't deadlock and even that isnt guaranteed. You can [read more about that](https://msdn.microsoft.com/en-us/magazine/mt238404.aspx?f=255&amp;MSPPError=-2147217396) but the pertinent paragraphs are here: &gt;In this case, our asynchronous code is missing a ConfigureAwait­(false). However, the same problem can be caused by using WebClient. WebClient uses the older event-based asynchronous pattern (EAP), which always captures the context. So even if your code uses ConfigureAwait(false), the same deadlock will occur from the WebClient code. In this case, you can replace WebClient with the more async-friendly HttpClient and get this to work on the desktop, as shown in Figure 6. &gt;The blocking hack requires your team to have strict discipline. They need to ensure ConfigureAwait(false) is used everywhere. They must also require all dependent libraries to follow the same discipline. In some cases, this just isn’t possible. As of this writing, even HttpClient captures the context on some platforms. &gt;Another drawback to the blocking hack is it requires you to use ConfigureAwait­(false). It’s simply unsuitable if the asynchronous code actually does need to resume on captured context. If you do adopt the blocking hack, you’re strongly recommended to perform unit tests using AsyncContext or another similar single-threaded context to catch any lurking deadlocks.
You increase your chance of getting a deadlock if you dont use `ConfigureAwait(false)` in this scenario. Note that it does not *eliminate* your chance of a deadlock. Im guessing the original author added it after the fact when he got a deadlock and found it to be a temporary solution.
It reduces the chances of a deadlock but in the event you the system trys to throw you back onto the same thread thats waiting you'll deadlock again. You're right that it wont work 100% of the time, its just a temporary solution.
`ConfigureAwait` is necessary in this example to mitigate the chances of a deadlock but it does not eliminate the possibility of it. Its a naive fix at best.
yea, i don't mean to rain on their parade. out of the c++, java, and c# trio, i would pick c# any day. however, f# is indeed much more simple than all of them.
Sure, but does it do the same thing with no mouse plugged in, or plugged into a different USB port as he suggested?
Take Microsoft C# certification exam. 
Assuming this is in the main method you could just make it async with C# 7.2 and actually await Task.Delay. If you do .Wait() it will still make the console unresponsive wouldn't it? 
`ConfigureAwait(false)` **doesn't do anything here**. The method is synchronous, there are no awaits to configure.
I just signed up at Linode.
Did the site die after ten users hit it? Ohh, it’s probably hosted on Azure. So, yeah :-P
It would. I had originally put the `await Task.Delay(5000)` in my comments as well, but I didn't want to bog OP down with too many details. `Task.Delay().Wait()` is functionally the same as `Thread.Sleep()` as far as I know, but `Task.Delay` is almost always the better choice.
That last paragraph confirmed my fears. It’s a shame because so much signal processing stuff uses complex numbers and it’s prime for SIMD optimization. Back to the drawing board!
I think you'll need to add an actual license to your repository so people know what they can or can't do with the code. Without it, we can't really use it.
Nice thanks! 
I don't see how. There is no `await` so the awaiter does nothing and the configuration neither.
Please please please get into the habit of using int.TryParse() instead of int.Parse(). This means you can gracefully handle bad input with having to use exception handling. This approach uses the somewhat scary looking "out" keyword, but it's easy really! Example: if(!int. TryParse(inputText, out var outputInt) { // the parse failed. Handle this } // the parse succeeded, you can now use outputInt
As John Skeet had said many times, if you use ConfigureAwait(false) purely to avoid a deadlock, you are doing something wrong.
1. Either use `MainAsync().GetAwaiter().GetResult()` or C# 7.1 `async Main`. 2. If you depend on event based async operations you can use `TaskCompletionSource` to create a task that is finished when the event handler is called.
I'm not understanding how to use any of this :/
Then I'd advise you to grab a book on C# and read it.
Thanks! I’ve been searching for the right way to do this too. 
Unity
I mean in .NET
Sure, try it. As far as I know newlines don't really have any syntactic meaning in C#, in fact most programming languages don't care much about whitespace.
PA is a really simple usage of Unity but you can use any other 3d game engine. https://github.com/search?l=C%23&amp;q=game+engine&amp;type=Repositories The style is achieved by using 3d elements (walls, positions, lights) and 2d elements named sprite, which are 2d element positioned in a 3d space and always facing the camera
:) That'll make a pretty good challenge video. I think I'll try writing C# in notepad!
You'll probably enjoy looking at submissions to the C obfuscation contest
`main(0, NULL);` BIM. done.
Unity uses .NET You're in for a looooong road
&gt;ly &gt; &gt;share &gt; &gt;report &gt; &gt;Save Thankss, where shoud I start ? :'(
You want `Main()` to exit only after the event handler finishes? Create a `[ManualResetEvent](https://docs.microsoft.com/en-us/dotnet/api/system.threading.manualresetevent)` and [wait for it](https://docs.microsoft.com/en-us/dotnet/api/system.threading.waithandle.waitone?view=netframework-4.7.2#System_Threading_WaitHandle_WaitOne_System_Int32_) in `Main()`, while calling `[Set()](https://docs.microsoft.com/en-us/dotnet/api/system.threading.eventwaithandle.set)` at the end of the event handler.
Take a look at /r/Unity3D.
Here's a sneak peek of /r/Unity3D using the [top posts](https://np.reddit.com/r/Unity3D/top/?sort=top&amp;t=year) of the year! \#1: [I made a Self-Assembling Lizard-Snake Monster using only procedural animations!](https://gfycat.com/TiredCheeryBushbaby) | [168 comments](https://np.reddit.com/r/Unity3D/comments/8l6729/i_made_a_selfassembling_lizardsnake_monster_using/) \#2: [I made a Dragon that breathes Little Robots using only Procedural Animations!](https://gfycat.com/GreenBronzeDove) | [227 comments](https://np.reddit.com/r/Unity3D/comments/95cqgo/i_made_a_dragon_that_breathes_little_robots_using/) \#3: [Star Wars dogfighting game I made with my brother over the weekend](https://gfycat.com/ThatConventionalKoalabear) | [424 comments](https://np.reddit.com/r/Unity3D/comments/8ejfbi/star_wars_dogfighting_game_i_made_with_my_brother/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
One of the things that make C# so good is it has all of those features, other languages do not. It gives huge flexibility in how you write code. 
"I remember Span&lt;T&gt; and Memory&lt;T&gt; got a lot of attention when they came out, but I don’t think they quite made it into the real world. Maybe it’s simply that C# developers aren’t doing the sort of work (algorithms) that requires them." Ermm... Ok
Removed: Rule 4.
Yes, and yes. Statements are terminated with semicolons and indentation is a convention, not a syntactical requirement. Why would you, though?
Expressions that raise an exception existed in F# already. It's an immitation, not an innovation.
Wow, the TIOBE index is a steaming pile of garbage.
@AngularBeginner I can't seem to find an example of this in F#. Can you provide a link or a piece of code? Thanks!
Yeah… I liked the overview of language features, but this one seems a little off. I'm not really sure what the average developer's workload is like, but I've already written a few parsers and a Reed Solomon FEC implementation that are only as fast (and zero allocating) as they are because of Span. Even if you never write code using Span yourself, if you use ASP.NET Core, Span is making your server a lot faster under the hood. 
And still lacks so many features I'd wish for. Type related: - Proper nullability support (not that half-hearted compile-time solution of C# 8.0) - Record types (immutability is awesome) - Domain types (`int` is worthless, `OrderId` is awesome) - Union types (I return either A or B, e.g. result of The or error of E) - read-only value tuples - type providers - computation expressions And syntax improvements: - Global namespace declaration - partial application of method arguments - better pattern matching Probably forgetting a lot of awesome stuff. So much awesome stuff out there. I know some stuff is planned for C# *someday*, but a lot is not.
&gt; let f = if 1 = 1 then 0 else failwith "bla" Note that `if-then-else` is an expression in F#, not like in C#. https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/exception-handling/the-failwith-function
Yep, that's a good list :)
It's absolutely possible but why would you put yourself through this pain 🙂?? Ofc you can write simple program in notepad but when it gets bit complicated it's gonna hurt. 
It always was, and no one who knows what he talks about cares about it.
If it comes with no licence you can do whatever u want no? 
[removed]
Completely agree. With that list you must be into F#?
Many Thanks, I updated the article +credit
Yes, I'm into F# a lot. I've started my career with C# and worked with TypeScript in the mean-time. Unfortunately F# jobs are limited... A lot of problems I encounter in C# code bases are due to lack of immutability and lack of nullability support. Objects get modified all over the place, and it's way too easy to add a new property to a class and forget to adjust all initialization logics... And as the result the value will be `default` (most likely `null`). A new dev on the code base now debugs and finds a `null` reference and needs to know: Is this a valid value? Is it a bug? He'll likely just assume the latter and fixes it, without being sure and understanding all parts of the system. ¯\\_(ツ)_/¯
I'd argue "Target-typed new-expressions" is fairly similar type inference of various other languages, e.g. of F#: type Person = { Name: string; Age: int } let bob = { Name = "Bob"; Age = 0 } `bob` is inferred to be of the type `Person`, because it could be inferred by the properties.
Thanks for this man. I realized I didn't need the event handler to be async, so I just attached it normally and used standard async/await to do everything. I ran it through an async method that I called in Main(): static void Main(string[] args) { Run(args).GetAwaiter().GetResult(); } private async Task Run(string[] args) { // Does the synchronous things. // Attached the event handler. // awaits the asynchronous things. } &amp;#x200B;
Except `//` comments and the semantics of embedded newlines in strings. Oh and `#region`s too.
The recursive pattern matching is not a C# innovation. In Rust: if let Student { graduated: false, name} = s { // Do something with name } Working example [here](https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=4e48a4f09d3c05c8d495fa4826d9a42f), with two examples on lines 15 and 22.
as a challenge!
for the challenge!
Im probably going to explain it poorly but the gist is: 1. You send request on this thread without `ConfigureAwait(false)` 2. Downstream object sends another async request 3. New object waits for a thread to work on, system intends on giving it thread 1 but cant because thread 1 is now by extension waiting on thread 3 `ConfigureAwait(false)` basically removes one thread from the necessary pool of threads being used even in a synchronous environment which reduces the chances of deadlock.
Nope, without a license you can't do anything with it. It's even perhaps a liability to even look at it.
You REALLY need to put a license in the repo. Pick a known license. Git makes this easy. 
`ConfigureAwait(false)` has very little to do with configuring the await and more to do with defining the return thread in this context. In this case it allows the continuation onto a different thread if necessary which removes one from the pool being used (because, as you noted... the downstream `HttpClient` doesnt use it). So you have these threads without `ConfigureAwait(false)`: 1. Initial thread creates request 2. Downstream objects doing their async work spawning more threads 3. The system intends on giving this async request to thread 1 once it frees up but by extension it cannot because thread 1 is locked waiting on thread 2 -&gt; 3 Regardless if I described it incorrectly or poorly, the [top answer here](https://stackoverflow.com/questions/45034554/how-to-correctly-block-on-async-code) does a much better job of it. 
But that's limited to records, not on arbitrary types.
[Udemy](https://www.udemy.com/) has courses for pretty much anything and there’s almost always a sale it feels like, you should check it out 
That is true and a good point.
While reading the book about entity framework core the author said that he was running his example app on the cheapest option on a hosting provider called web wiz. I was impressed by their performance and super cheap price, so I've been using them too. They are really good for [asp.net](https://asp.net) core on IIS. Their user interfaces are a bit old, but i've been very happy with them. Other than that, I use linode professionaly, where i run [asp.net](https://asp.net) core apps on ubuntu servers.
... the 'challenge' of not hitting the Enter key for newlines? Or do you want to write an entire C# program in a single *statement*? Because that's just the typical Hello, World! implementation. I suppose we could combine the two: namespace HelloWorld { internal static class Program { private static void Main() =&gt; System.Console.WriteLine("Hello, world!"); } } but, other than being intentionally hard to read, I don't think there's any educational value to that. And, it's definitely not something I want to see in code I'm reviewing.
Brilliant thanks for the heads up :)
@MEaster Thanks for the example. if let Student { graduated: false, name} = s { Some(name) } else { None } I'm not familiar with Rust but it seems a bit of a different functionality. Like you are creating a new student and comparing them? &amp;#x200B; &amp;#x200B;
He is never awaiting the task, so there are no continuations created. You're explaining `ConfigureAwait` right, but it doesn't apply here.
Thanks for your input. I did some more research as a result and changed that part of the article.
I appreciate your concern. And you are entirely correct - I should be explicit with the license. I will correct this as soon as I have a chance. In the meantime please be assured no one is going to get sued!! This software by itself has little if any commercial value. I have no plan to try to sell it. Ever. Trying to copyright it would be like trying to copyright the concept of dependency injection (which this software is largely based on). I realize that companies often take ideas like this and run with them as if they were their own. I can and will do nothing to stop that - it is a waste of my time. I am an independent consultant. The value this software brings me is that clients hire me to architect their applications such that utilities like AdaptiveClient can be used. Also, I am working on other projects with far greater commercial potential. BTW, if anyone should be charging money for their software it is Autofac!!
Not knowing anything about Nancy, my first guest would be to make sure it's not back/forward slash sensitive. What does host.start look like? A guess might be that it's not even looking to call the api() method unless its 'registered' as a page somewhere else. If that's the case, find out where host.start knows to load index() and work from there.
Accroding to nancy documentation, I don't have to register anything anywhere. It auto detects, emphasized by the fact that "/" works without me ever having to register its function anywhere.
You've peaked my interest. I'll look at it later today when I get some time.
What do you do at your job that has you writing parsers by hand?
The syntax for creating and destructuring structures is very similar, which makes it easy to remember how to do it, but this *is* a pattern match. Notice that it's using the `name` variable immediately, without having to get it from `s`. Also, if I were creating a new value to compare against, Rust would require me to give the `name` field a value. Not giving it a value would result in it being uninitialised, which is not allowed. Also, for equality checking, Rust requires you to implement the `PartialEq` trait for the type, which I haven't done here. Attempting to equality check without that results in a compiler error ([example here](https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=48bbaad202e5d7d2b51274a3ffdba0cc)). The Rust book has [a chapter](https://doc.rust-lang.org/book/2018-edition/ch18-00-patterns.html) dedicated to using patterns, if you're interested in reading more.
On starting up the host, Nancy scans your assembly for classes that extend NancyModule and these will be instantiated each time a request is received to provide routing and actions. So far, I've seen examples that either... A) Have one Get[] per class (a whole class extending a NancyModule with a display method). Bassicaly each page has it's own class (extending nancymodule) Or b) have one method to handle many Get[]. https://www.c-sharpcorner.com/UploadFile/suthish_nair/who-is-nancy/ Just taking shots in the dark. Let me know if you find anything out.
The top 4 would be wonderful, especially Domain Types. There is a proposal to add it to the language here https://github.com/dotnet/csharplang/issues/410 
Very cool. Nice introduction on github. Slick that extensible is built in and described.
Also in F# an many other FP languages
There are loads, but another favourite of mine is PiranhaCMS: [http://piranhacms.org/](http://piranhacms.org/)
Sorry if it's a dumb question, but could you give a concrete real world example for `Domain types (int is worthless, OrderId is awesome)` that would make me go "oh wow, that would totally solve some problem for me / make things so much easier in that one situation"? Is there more to it than just renaming? Like what concrete advantages do I get with "real domain types" vs just doing `using OrderId = int;`?
Huh, just researched it and you're absolutely correct. Here I thought it could be returned out of the threadpool to another thread but nope, not gonna happen. TIL
Two major points: Improve readability of your code, and let the compiler help you better. `using OrderId = int;` is just visible within the file. Outside when accessing the API you still see `int`. Sure, you can see by the name `orderId` that it's a id of a order, but seeing it in the type makes it especially clear. You can't accidentally mix up values anymore. It can easily happen that you pass an order id to a method accepting a booking id, and then you have to debug and check what is going wrong. Perhaps the ids even match for some records so it's not immediately clear what happened.
*Mocking* static methods is news to me so I'd be interested in the same suggestions you get from this post. With that said, I do have a hard time understanding how one would mock a static class at all since it isn't injected by its consumers. Unless, of course, you wrap it in a class that consumes it and inject an instance of that class in your components under test. Or, now that I think about it, you could have some compiler interception voodoo that strips the static class and replaces its methods with some code you've devised elsewhere. I suppose another way would be to literally design your static class such that you can "swap out" method implementations when it detects via some means that it is running from a unit test project but that sounds excruciatingly hacky. Anyway, I am rambling at this point. You likely know more about mocking static methods than I.
Yeah, mocking isn't the right word now that I think about it. I think the appropriate word is creating a *Shim*. Let me read up on it a bit more, and I'll probably have to edit this post some.
 var value = grid.getValue(int, int) The first int, is that the row id or the column id? You have to look at the documentation to figure it out. You can't statically check it, since both are ints and it will probably even work during the runtime, you just get the wrong value. In comparison var value = grid.getValue(Row, Column) That can be statically checked since those are different types even though they are really ints under the hood.
&gt; Union types (I return either A or B, e.g. result of T or error of E) I've been recommending this one a lot lately: https://github.com/louthy/language-ext/ it adds a lot of functional types and methods to C#.
You can't. You can make a testable version of a function that uses a static function by having the static function passed in as an argument to the function rather than calling it directly. public void DoTheThing() { TestableDoTheThing(MyStatics.TheThing); } public void TestableDoTheThing(Action theThingToDo) { theThingToDo(); } That said, it's better to avoid static methods when you want to make your code testable.
Got it, Thanks! I'll look into it and update the article
And here I would mentally do `grid.GetValue(Column, Row)` so it would conform to `grid.GetValue(x, y)` which just further highlights your point.
I was expecting an explanation why it took so long
I think one of the design goals of C# is to be a flexible, simple language with well defined conventions. Part of that means leaving the more experimental ideas to other languages, and then stealing the ones that work well. The blog was well thought out and I feel I learned a lot. But my criticism is that the premise of "innovation or imitation" gives the impression that it matters. 
I wonder, maybe you could wire up the DI framework to inject a function for you. But doing this is pretty much always going to be a hack. Going to a singleton would be only a little less of a hack. Otherwise I think you'll need to get one of those super gucci mock frameworks. 
I guess the application is defined as a lot of rows in a database? If so, is the database used for development, e.g. CopyWindow(existingWindow, newWindow) would replicate an existing window with a new name, as the basis for a new window? In the '80's, there was an annual competition to create an app in the least time. The perennial winner was an app that was analogous to Dynamic Form Builder, with the UI defined as rows in tables.
Glad you enjoyed it lazy_stacey!
Don't do it. I made the mistake a few years ago. It's a lot of garbage content. So udemy or pluralsight.
If you need to mock a static method, are you sure you are not testing an implementation detail? Way too many devs mock too much stuff creating very fragile tests.
Is an inline if/else *really* comparable?
It's because the tasks themselves are programmed to take 5 and 10 seconds respectively. Check out the author's GitHub repository. https://github.com/exceptionnotfound/AsyncAwaitStopwatchDemo/blob/d15954e4e0e8da5fef595284f0e196c16fb8978d/AsyncAwaitStopwatchDemo/Tasks.cs#L16 https://github.com/exceptionnotfound/AsyncAwaitStopwatchDemo/blob/d15954e4e0e8da5fef595284f0e196c16fb8978d/AsyncAwaitStopwatchDemo/Tasks.cs#L22 I think the author is trying explain the debugging strategy of using multiple stopwatches, and not an optimisation technique. Your task might take longer than expected for a variety of reasons. But you can only find out which one is the problem by measuring the time taken for each one individually. Then it's up to you to figure out why it takes that long and how to run it in lesser time.
💣🐚📢
&gt; HashSet I've only used this a couple times, esp. to dedupe arrays and lists. Surprised that you use it often, I looked to see what methods I don't know about. The subset and superset methods look interesting. Which HashSet do you use most?
OpenSource WPF? Now that's something I never imagined I'd see. Would this mean that we could see a Linux / Mac implementation of WPF?
Executing the code `Get["/api"] = x =&gt; { return "api"; };` will register a route in NancyFX. However, you're never calling this method yourself. Place that call in the constructor, so the route will be registered when creating the module. Then it'll work.
Just as soon as Linux can emulate most of the Win32 &amp; DirectX subsystems.
Wow!
With WPF being open source, wouldn't someone be able to replace those code paths and release, say, Microsoft.NET.Sdk.LinuxDesktop, that uses the same XAML files, and C# code but targets Linux at the bottom?
Well, this is code that we've inherited, and was not originally made with testing in mind. (No dependency Injection, for example) Here's something similar to something I've seen: public static FooClass GetThing(int userId, bool changeThingBeforeReturn) { var thing = FooClass.Get(userId); if(changeThingBeforeReturn) { thing.Change(); thing.Property = true; } return thing; } Oversimplified, but you get the idea. It's a static method that gets something from another static method (which calls a stored procedure), and then may or may not change it depending on another input. In this case, there is no mockable repository pattern (Since it's static), so I can't just mock the class/method. Not to mention that the method itself is static method. So I'm not trying to test how it's implemented, but rather I want to replace FooClass.Get() with something fake so I can test to make sure the method is doing things right to the data it returns. If I'm not mistaken, something like TypeMock or Telerik's JustMock can do that with something similar to Microsoft Fake's Shims. The other option is to slowly rewrite every single method in this library make it test friendly. It's a matter of cost/benefit analysis. Rewriting these methods is probably the right choice over time, but if I can find a solution that means I don't have to slowly rewrite the entire application, I would do that for the short-term benefit of having something that can be tested, and then I can work on making it more test friendly.
In theory yes, but it wouldn't be easy.
"Replacing code paths" with equivalent ones required to product bug-free WPF applications on those platforms is basically of emulation, at least in terms of effort required. If you don't care about running existing WPF applications while having them look and behave the same, such as just wanting to be able to use "existing" WPF XAML controls, then that is a different task.
Maybe now we can finally fix WPF's handling of `INotifyCollectionChanged`. No so fun fact. If `INotifyCollectionChanged.CollectionChanged -&gt; NotifyCollectionChangedEventArgs.NewItems` has more than one item, most WPF controls will shit themselves. 
This would happen for sure. Some have invested a lot of time (like Avalonia) developing cross platform UI frameworks. If WPF source code is structured properly it may be relatively easy to rebuild the low-level functions and have truly cross-platform UI framework. 
Mono already has WinForms running on Linux. So the Win32 API emulation/replacements are already done. What's missing is the DirectX replacement and I really hope Microsoft is working on that with OpenGL or Vulkan.
Having access to a full featured XAML parser and controls would be quite huge. I could see Avalonia and other XAML projects contributing and benefiting a lot for this. Overall it'd be better for both the community and MS.
F# turned programming into a hobby for me, rather than a job.
There are a large number of namespaces that are exclusive to WPF, having nothing to do with WinForms or DirectX. The question is how many of them will be in .NET Core 3, and how hard the rest would be to duplicate.
We don't have plans to make WinForms or WPF cross platform as this is likely a less than great choice for a cross-platform UI. FWIW, Mono tried to make WinForms cross-platform and they don't think it was a good result either.
i really guessed microsoft would make a cross-platform ui framework. however, now thatbthey have released wpf and winforms as ipen source, i doubt they do, at least in the form of cross platform wpf or winforms. because by open sourcing, they have now opened the gates to do their own cross-platform thing, which would muddy the waters, so to speak. i think it's still possible they make a cross-platform ui framework, but i more doubtful now.
Wov... this came out of nowhere. I did expect some kind of open-source UI framework from Microsoft but not open-sourcing the existing one's.
At some point these static methods will create something that will materialize 'FooClassProvider' that will in turn produce a 'FooClass'? I'd probably try to see if I can provide a different implementation for the 'FooClassProvider'. Now I don't know what kind of code base this is but I would really consider if these tests are worth writing, or if you can take a step back and apply different tests that cover the functionality you need. For example only create tests for Http requests for the application. When I send a post to /foo, I expect a 200 or something, just to ensure you don't break existing functionality when implementing new features.
Can you file an issue in our [repository](https://github.com/dotnet/wpf/issues)? Thanks!
Gladly.
Not a "full featured XAML parser". WPF doesn't support XAML 2009.
Yeah I realized on the reply you gave on the other sub. Moving forward though this is a great way for XAML to modernize at least which I look forward to. The announcement as well has quite a lot of goodies aside from the UI frameworks being OSS, like the fast JsonReader. Never been as excited for .Net in a while.
&gt; .NET Core applications are now built with executables. This is new for applications that use a globally installed version of .NET Core. Anyone else find this wording strange? I'm not quite sure how to interpret this - i.e., I'm trying not to get overly excited about the possibility that Joel Spolksy [finally got his linker](https://www.joelonsoftware.com/2004/01/28/please-sir-may-i-have-a-linker/).
Sorry, I didn't realize you were the same person. But yea, I would love to see XAML move forward. In many ways it is a better format than raw XML or JSON.
`ObservableCollection&lt;T&gt;.AddRange` has been approved for a new api https://github.com/dotnet/corefx/issues/10752
No worries, so far Avalonia and Uno is also quite excited with the announcements. And hopefully this will quicken the iteration cycles for issues for XAML in general as GitHub is more approachable to some devs for issuing requests. Hopefully better `INotifChanged` as you've mentioned and maybe better handling of `DependencyProperties` or maybe even `x:Bind` support for WPF (unlikely but one can dream).
I would be ecstatic if WPF adopted Avalonia's ability to bind methods directly to buttons with an `ICommand`. That was one of the most ridiculous design decisions. 
Sweet.
Give me proper nullability, protocols and extensions like Swift and I would be so happy.
I believe that refers to the generation of an executable file when publishing via framework-dependent deployment (a much-needed improvement). I don't think it has anything to do with merging, linking, or trimming.
Don't mock static methods. Static methods should be pure, or in other words always return the same thing for a given set of inputs with no external dependencies such as databases. If you find that your static method isn't pure, then it shouldn't be static.
As already mentioned, `ConfigureAwait` really only configures how async awaits behave (`OnCompleted`/`UnsafeOnCompleted`, more specifically). Synchronous code can't switch threads. However, *even if* this method was async, and *even if* `HttpClient` didn't use `ConfigureAwait` (it certainly does, although I'm not 100% sure if it's theoretically possible to break this with a badly written custom `HttpMessageHandler`), calling `ConfigureAwait` *after* the `PostAsync` wouldn't have any effect on the called `HttpClient` code, just on what happens after that task completes and subsequent awaits.
^{Just thinking out loud here...} Under the async streams section: *"This pattern – using yield return — is the recommended model for producing async streams."* Does this mean it's going to slowly replace RX? It would make sense, we already have the whole of the TPL behind async/await... On the other hand, RX does offer a lot more functionality than just an observable sequence. I wonder how the future will hold up for `IAsyncEnumerable&lt;T&gt;` vs `IObservable&lt;T&gt;`. It also strikes me that `IAsyncEnumerable&lt;T&gt;` may or may not represent a stream, whereas `IObservable&lt;T&gt;` pretty much always does. So I guess maybe there's room for both.
You finally have a way to build applications with executables to start them, just like in the non-Core version of the framework. This is useful for .NET Core applications that have UIs and don't need a console window.
Gotcha. [Hangs head. Kicks dirt] *I was really hoping for a linker.*
Not quote. What that paragraph means is that you'll be able to use `myapp.exe` (or `./myapp`) even for applications that are not self-contained. But the application and its non-framework dependencies will still be in several (possibly many) files. [MS is also looking into providing a singe-file executables](https://github.com/dotnet/coreclr/issues/20287), but considering it looks like they've only just started investigating how that should be implemented this week, I'm not sure that will be included in .Net Core 3.0.
It did not. [Here's a blog post from May saying WinForms and WPF will be part of .Net Core 3.0 on Windows.](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/) And in the comments there, MS is saying they are considering open-sourcing them.
I know I'm a bit late because I haven't been on Reddit for a while... But just try it and see what happens. `DataView dv = new DataView(myDataTable);` `myGrid.DataSource = dv;` Now when you merge the data from the new table to the existing table (do not delete data from the existing table, but merge changes into it) the grid will update and shouldn't affect scrolling or selection (unless selected row/rows are deleted). &amp;#x200B;
I'm interested in the tools provided for the upcoming version. I'd like to develop on debian and build as well but have no problem to cross debug a wpf app on a windows machine. Anyone tried this already or is interested in this as well? 
&gt; Objects get modified all over the place, and it's way too easy to add a new property to a class and forget to adjust all initialization logics... And as the result the value will be default (most likely null). A new dev on the code base now debugs and finds a null reference and needs to know: Is this a valid value? Is it a bug? He'll likely just assume the latter and fixes it, without being sure and understanding all parts of the system. ¯\(ツ)/¯ This will get better in C# 8, though. `#nullable enable`, and all those uninitialized fields in your class suddenly get called out…
The response above seems to specifically indicate that the source code is not structured in such a way to do that. 
&gt; That said, it's better to avoid static methods when you want to make your code testable. Static methods allow us to create really nice fluent APIs which we are seeing more and more of in the .NET community. Look at AutoMapper, FluentValidation, Bogus, FluentAssertions. So you just have to use them sensibly and integration test them rather then unit test them. I really don't think the advice here should be "Avoid static methods!". If anything, changing your source code to open things up for testing can lead to code far worse than using static methods. That is NOT the same thing as writing testable code.
Happy first post ever /u/rladuca :)
&gt;Static methods allow us to create really nice fluent APIs which we are seeing more and more of in the .NET community. Look at AutoMapper, FluentValidation, FluentAssertions. I don't see any problem with static methods (including extension methods) that are pure functions of their arguments and only change the state of their arguments, which is the case for almost all of the 'builder' pattern code I've seen. The problem is testing methods that use statics for side effects.
Isn't that just a Self-contained deployment? https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd You publish an SCD and there is your app and the runtime all in one little exe? I think I am missing some fundamental understanding f core here so feel free to ELI5 me.
Same problem with WinForms. Can we get BindingList&lt;T&gt;.AddRange() also?
&gt;In August 2017 C# 7.1 is released. It’s the first version which is not a round number. The language team seems to have decided to release smaller versions, but faster. C# 1.2 exists. But yes, C# minor releases have been rare in the past.
It's a shame Nancy isn't really developed anymore because I am getting pretty tired of writing controller boilerplate over and over and over and over.... 90% of the time I think most endpoints could be described in a single class.
What's new is that you can have a framework-dependent deployment, but still launch it as if it was a SCD. So you use `myapp.exe` and if the right version of .Net Core is installed on the machine, it will run.
It's worth noting that the pain points he mentioned are basically non-existant today. :)
Yes, I agree. I think this type of answer should be in your top comment though. It is a better explanation on when to use static methods than to say they should be avoided entirely. Although, as a beginner I read things like that all over the internet and eventually learned to use them correctly. Avoiding them at first helped me avoid some pitfalls although it caused me to write some slightly more verbose code like you showed in your example.
This clears it up considerably. Thanks!
Rx is a multiplatform reactive API. 
&gt; It is expected that **all developers become a Patron** to use Fody. &gt; It is an honesty system with **no** code or **legal enforcement**. &gt; When raising an issue or a pull request, the users may be checked against the list of backers, and that **issue/PR may be closed without further examination**. &gt; You must be a Patron to be a user of Fody. Contributing Pull Requests does not cancel this out.
According to this, Access follows the VB Boolean, where it's -1 or 0, not 1 or 0. https://www.w3schools.com/sql/sql_datatypes.asp Maybe that is your issue and you need to check for -1 or 0? 
&gt; It may seem unfair to expect people both contribute PRs and also financially back this project. However it is important to remember the effort in reviewing and merging a PR is often similar to that of creating the PR. ...interesting point of view. If I've put the time in to create something worthy of a PR: 1. I've already made a fork. 2. I'm familiar enough with the project to not need support All this would do is mean that I: 1. Occasionally have to update my fork with changes to the parent repo 2. Explicitly revoke permission for the parent repo to use my changes Why would I **pay** to let others profit off my contributions!?
&gt; computation expressions How would that even work in C#?
The WinForms designer doesn't work with this yet, but it's still an impressive project. I'm also interested in the GPIO options for running on a raspberry pi through linux. Might make a nice alternative to python on raspbian. 
^ Senior Software Dev at Microsoft
It doesn't say in the blog post it includes C# 8.0, but I downloaded and it indeed does!
DXVK translates DX11 calls to Vulkan. So you might be able to stick with DX
Kind of cool :) One of the validations says "enter Display name" but the field you have to fill is called "label". It's all nicely constructed :)
&gt; (immutability is awesome) Elaborate
What will be interesting is using libraries that have written code using these constructs. Use APIs like before but now optimized without lifting a finger. Yes, please.
Mostly web programming haha. Although occasionally I get to reverse engineer and interface with legacy arcane systems, and replace some of those aging systems with new stuff. Dotnet core running on a lightweight ARM kernel turns out to be ideal for quickly replacing boards that nobody has the parts, designs, or source code for anymore. It also lets us hook it up to analytics via the web for diagnostics, and replace crazy TCP protocols with some slightly saner HTTPS.
I don't need to worry that the object may be mutated somewhere, perhaps down the call stack. I got what I got.
Ah thanks so much for the insight I got it working fine now, However I ran into a second issue, all my data my 1st form shows up nicely however I have two foreign keys linked to my first form, both of them dont work when I click on next. Do you have any idea how to get foreign keys to work? I have one "master" table, and two supportive tables I hooked the foreign keys (primary key) from the support tables to a non primary key in my "master table". I am currently using this code below and the values chosen from my support tables(foreign linked keys) just stay at 1 while all my other feilds work from my master table txtJob.Text = myDS.Tables[0].Rows[nRow]["JobDesc"].ToString(); txtJob shows the data on my form nRow is to keep track of which row im on JobDesc is the job description from the foreign table which has its primary linked to my master tables JobID. &amp;#x200B; Am I doing something wrong here?
Exactly. I think QT fits the bill more than cross-plat Winforms does.
[Previous submission of this link to this sub](https://www.reddit.com/r/csharp/comments/9wk9on/whats_coming_in_c_80/)
Also known as Preview 1, which includes. NET Core 3 preview.
I'm pretty sure `ConfigureAwait(false)` has nothing to do with threads but rather how the execution context is captured or not, which depending on the implementation might or might not involve threads. Since there is no continuation registered to the awaiter here, I would argue it has absolutely no impact.
thank you !
Wow that was fast. Now I can maybe get rid of my custom `ObservableList&lt;T&gt;` implementation (was created for that reason). See for example: https://github.com/xenko3d/xenko/blob/master/sources/presentation/Xenko.Core.Presentation/Collections/ObservableList.cs /u/ben_a_adams Can I also PR and add `ObservableSet&lt;T&gt;` to corefx?
/u/grauenwolf saving .NET one issue at a time.
No.
Fixed
I mean, sure. If you don't mind having to use an entirely different language, framework, set of libraries, and toolchain completely separate from dotnet. Which is a bit of a leap if one specifically wishes to take advantage of the dotnet ecosystem...
Does it require 64GB RAM and 24 core CPU?
Does it have to he implemented in the one-line-at-time method you discuss? My initial thought is to instead use JSON and a serializer. You'll read both your files into objects in memory then iterate over them to do your battles. 
I'm more than happy to try anything you all suggest. Like I said I'm not a programmer haha but I can learn somewhat quickly sometimes. How would I go about doing that? The method isn't too important to me, I just want it to be fast (I'm running millions of simulations) and need them to fight 1v1, if hey win, it adds up the total stats of the person they beat and adds it to their "proficiency score". The more wins, the higher the score, the more big enemies they beat, the higher the score. 
Good news seems MS is open on making WPF XAML 2009 compliant judging on this issue [github issue](https://github.com/dotnet/wpf/issues/58). Which means we'll get some nice features from UWP like better `using` syntax. Though there are some blockers at the moment.
If you've never written code before it might be best to start with a really basic (and slower) solution. I'm on my phone so I can't give you code. I would suggest 1. looking up JSON format, 2. pick a language and find a JSON serialization library for it. 3. create character objects in code and figure out how to read your characters from files into code. 4. come up with your algorithm for battles. A simple nested loop for each file would allow you to battle each character with every other character. 
Ok I'll work on that for now then. I'm using c# right now so I'll look for that. Is this going to be a super quick solution? Because I absolutely have to have it be quick. If a steep learning curve is needed for that so be it I'll make do but I'm going to run something like up to 300 billion iterations so fast is a big deal haha.
These links may be helpful, for using Newtonsoft (a JSON serializer/deserializer) https://docs.microsoft.com/en-us/nuget/quickstart/install-and-use-a-package-in-visual-studio https://www.newtonsoft.com/json/help/html/Samples.htm
I assume he meant build a .net wrapper around QT.
VS is still a 32-bit app so 3GB are enough.
By “Web API” I assume you mean “aspnet core MVC, with action methods that return JSON,” yeah? Because last I heard, .Net framework aspnet web api was deader than CORBA. 
F*ck that. I know the reasons it’s still a 32 bit app, but it runs like molasses on any decently sized project (or sub zero frozen shit if r# is enabled) and that is just unacceptable. Rider runs like a dream on macOS and windows, using the r# core, so there’s no reason for this. I _want_ the good old days of a highly performant VS back dammit, it still has the best debugging experience of any platform. /rant
Issue is on R# side: they decided long ago to run R# inside the VS process which was a terribly bad decision since they would have to share the limited memory with the 32-bit app. Now they make Rider and try to look good pretending the issue was with VS, but while in fact their own architectural decisions led to that. Also I'm pretty sure Rider doesn't share more than 50% of common code with R#. 
And that's pretty dead. (I haven't heard that acronym in years - gj in digging it up)
I love Fody, but this feels very odd.
I get your idea. The way I tend to attack a problem such as this is to really think it out and understand it, so i can add describe what I am doing to myself as im doing it. 
It doesn't yet support linking everything into a single executable file, but .NET Core supports deploying your app with a self-contained runtime. https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd
Do you have any extra input that may help? Trying to take in all the knowledge I can.
Do you have any extra input that may help? Trying to take in all the knowledge I can.
Removed: Rule 4. You can repost it, but do include your csproj and/or whatever related files. Ideally, post your project to GitHub so it can be viewed, downloaded, and tested. If you haven't already, start small with the simplest "Hello World" tutorial (for example: https://docs.microsoft.com/en-us/xamarin/android/get-started/hello-android/hello-android-quickstart?pivots=windows). Get something like that going then it will help give you a baseline going forward.
Haha this sucks 
&gt; I did not see that the original issue on CoreFx was so old. What's keeping it cold here? Was a 138 comment discussion and approved on 9 Oct this year. Someone said they wanted to work on implementing it, so would be waiting on that. &gt; Can I also PR and add `ObservableSet&lt;T&gt;` to corefx? Raise an issue requesting the api/type in corefx first. Give type name and public apis on the type; and a little justification of why it would be useful. Processes is described here https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/api-review-process.md Its then discussed on the issue; api improved etc; then marked as ready for review at which point its discussed by the api review panel; which is also live streamed on youtube any you can provide feedback during it via the chat (86 videos and counting https://www.youtube.com/playlist?list=PL1rZQsJPBU2S49OQPjupSJF-qeIEz9_ju) Once its approved then its open to making a PR
 hopefully what i wrote is sufficient for you to understand..
Could you post a higher resolution image or post actual text? Can you provide some more background? I assume this is homework. Can you post the actual question?
That's....actually extremely helpful. 
Sorry I only saw the first sentence when I read it sorry for the confusion. Much appreciated I'll look over this. 
No they don't heal a % they do each battle assuming it was from scratch so full HP. The characters aren't stronger after fights (xp) but the enemy is progressively harder. They will fight all the enemies (even if losing a ton) and their "proficiency" or score is the sum of the stats of all the people they beat. That way there is even ground for all fighters to be compared to a controlled variable. Again I greatly appreciate the code block that looks a lot like what I envisioned haha I'm just still a noob.
I'd like to know what alternate universe that Rider runs like a dream on. I literally use startup or starting the debugger as an excuse to get up and get another drink on MacOS. I'm 2 weeks away from being done with a project using Rider and could not be more thrilled.
Absolutely, especially since it stays MIT. To me this means I won't be able to use Fody, and I won't be able to recommend it to any company / project.
Are you able to setup a shortcut to trigger "Search Visual Studio"?
It’s sort of correct. Calling using an interface ‘late binding’ is way off, though. Using reflection or `dynamic`, _that_ is late binding. 
No, if you call a non-virtual method on a class directly, you won’t need to go through a vtable. 
&gt; i really guessed microsoft would make a cross-platform ui framework. It's a cost-benefit case. The cost would be too high for too little benefit.
&gt;MEaster Updated +credit, Thanks again
Ctrl + Q
You can also add nullable reference types by adding `#nullable enable` above your namescape.
Oof. Another article that is wrong on several counts. Why do these keep popping up?
Thanks. I want to eventually publish a cross-platform app wrapping all of these features (plus math evaluation) so that more people would benefit from it.
This is what I needed, thank you.
VS performs fine, Resharper is the problem. Kind of a cool 90s Microsoft strategy by JetBrains I guess, make a desirable extension for Visual Studio that makes it perform terribly, then offer a competing product that doesn't. 
What in the fuck
That face pic gets me every time 😁
It doesn't work for me. If I put: &lt;NullableReferenceTypes&gt;true&lt;/NullableReferenceTypes&gt; in a project file, VS will reload it. If I then write Bitmap? bmp = null; C# will correctly complain: Error CS8107 Feature 'nullable reference types' is not available in C# 7.0. Please use language version 8.0 or greater. Right! So let's also add this to the same section: &lt;LangVersion&gt;8.0&lt;/LangVersion&gt; Now, the error goes away, and a warning pops up: CS8632 The annotation for nullable reference types should only be used in code within a '#nullable' context. It's only when I put `#nullable enable` in the file that this feature works correctly for me. Thus, [I stand by my guess that a project-level setting didn't make the cut for this preview.](https://www.reddit.com/r/programming/comments/a32r4e/announcing_visual_studio_2019_preview_1/eb32ya4/)
Ever the arrogant prick right?
Giving up immediately and being dependent, right? You didn't ask any further question, you just said "I don't understand". Which part did you not understand particularly? Did you look up each individual snippet? What information did you find regarding it, and what did you not understand about that information? Show some effort man.
&gt; Giving up immediately and being dependent, right? Hmmm yeah... that's exactly what I did... https://i.itsosticky.com/1s9gt2k.png
&gt; Now they make Rider and try to look good pretending the issue was with VS They don't, they [talk about exactly their in-process decision and that they want to change it](https://blog.jetbrains.com/dotnet/2018/05/29/taking-resharper-process-resharper-performance-series/) in their series about performance.
I sincerely doubt the version of Visual Studio would make that big of a difference. You probably missed a bracket or semicolon which causes a cascading effect and makes more errors than normal. You will need to tell us the errors and show the code.
I don't understand your data. Your code is joining D.debut == C.debut and C.debut = E.story The Rescue was part of the second season of DrWho, so is that the2 in the E row? D.debut could be 1? It's the only thing that maps to a number in C. But then we're stuffed because there's no C.debut which equals anything in the E row. My guess is the 001 is a type and should be 011? It's only a guess, but it seems to be data related. 
You're inner joining so you will only be getting companions where there's a doctor with equal debut and only episodes where the debut equals the story. You're explicitly narrowing it down and getting what you're asking for.
D = Doctor | Ordinal | Actor | Series | Age | Debut E = Episode | Story(Debut) | Season | Year | Title C = Companion | Name | Actor | Doctor | Debut So in this example They all can be attached by the Episode # (Debut/Story) is what my conclusion was. For example, C |Barbara Wright |Jacqueline Hill |1 |001 | E |001 |1 |1963|An Unearthly Child D | 1|William Hartnell | 4| 55|001| Does work, with my current code. Reasons why? I have no clue... 
https://imgur.com/a/8kQVOyA This is the code, from Yellow book for C sharp. I wrote it carefully. For double check, i opened authors downloadable project file, same happened. I am opening VS, than choose command promt project, than erase all the codes already written, then write this down. I tried to not delete default codes but that didn't help either. Errors usually mention first paragraph, "double width, height..." etc. Something like not defined. I'm at work now, will post error list if you need it 6 hours later. Thanks for reply! 
Yes, but in this example you have 001 in all of the rows and a 1 in all of the rows. Change you 001 in the C of the original example to 011 and see if it works. or the 2 in the E to 1. The datas don't join in the first example. 
That's a better explanation than mine. I assumed his model was accurate but the data was poop.
My apologies William is the incorrect doctor for that example then
Can you show us your code, and the exact errors it gives you?
I believe that is the point of what I'm trying to do. My issue is that some how some way I'm missing at least 50% of the content. I could provide everything I have but I feel that would just be overwhelming or pushing my asking for help
You're missing 50% of the content because you've filtered it out in your query.
No, but I think we might see some improvements to a LOT of cross-platform UI toolkits (e.g. Avalon) that can now build on WPF and UWP. I wouldn't be surprised if MS did a good and actually made UWP cross-platform, though.
But there is content for every situation which is why I'm so confused. If I provided the .txt file you would understand that the point is to be able to mix and match all the lines in the file to an output
I would like to take the time to examine how you've laid out the LINQ statement. Does this act differently some how?
Try to do my grouping query, the first example and see if you don't get all your things from that.
Not really. I worked with a handful of internal MS devs in the early (pre-announcement) days who had seen .Net Core and they were already rumouring that at least UWP will be open sourced and most likely cross-platformized.
Ok, i will post it here, but right now i'm away from home sorry. 
I got the Nullable reference types and LangVersion from the other comment working. However, does anyone know how to use the new features - default interface implementations just issue the standard error that interfaces can't have a definition. And IAsyncEnumerable complains about missing compiler required member System.Threading.Tasks.ManualResetValueTaskSourceLogic
Obfuscated code. Or broken printer driver... 
I have taken the time to put together the statement you provided. I'm going to take a look at it later today "technically" as I haven't slept yet. I'm a bit confused by the output but I think something may have sparked with the way you have set up your code. I really do appreciate the time you've taken to try and help me out today! Cheers :)
My thinking was that they'd be working on a linker so that Blazor could produce a far smaller footprint.
That’s just what it was, and the teacher said it was extra credit for whoever could solve it. Supposed to be one word, and I’ll try to send you another picture I have of it since my friend was the one that sent me this.
Code is supposed to be representing one word, idk what.
It's got 16 distinct characters as far as I can see from the potato quality picture. That gives you 0-15. I assume two characters are used per character, which will give you 255. Extended Ascii has 255 characters. Just a guess. 
you'd want to check for mouse movement or keyboad input and tie it in with a timer count down, which if not reset or reaches zero then closing all open windows to lock it back up redirecting them to the login screen. Start with a timer count down. Then introducing the system components for listening to the peripheral inputs.
I have no idea what any of that means lol, just trying to find out what the code is for some extra credit. Thanks.
Removed: Rule 3.
Is the class on encryption or encoding?
Coding in C sharp, it was my friend’s assignment so I don’t quite get what it means.
Thank you for writing the article. It's a nice overview of the newer features.
I wonder how GitHub feels about individuals monetizing their platform and discouraging contributions unless you have some spare money.
Hi, &amp;#x200B; Order of operation should be: \-(1) You read all the fighters and monsters data from your two separate files into memory. That means that after reading the fighters and the monsters you should have two separate arrays (or two separate List&lt;..&gt;) one filled with all the fighter objects the other with all the monster objects. Regarding these objects see later. &amp;#x200B; \-(2) Others have correctly pointed out, that to write and read Creature details into and from a data file going with a Json serializer (preferably Newtonsoft [Json.Net](https://Json.Net) from NuGet) is the best route. However in your case I am not sure its a good idea to broaden the learning burden with another advanced concept (serializing). Also if you do not control the data file generation (e.g. Creature files come from another inflexible application) than you can not go the Json way. &amp;#x200B; Going the route of traditional Text-file writing and parsing instead of Json serializing could in your case have the advantage that you learn basic file-reading, writing concepts. (Sidenote: Parsing means the concept of extracting data from text) &amp;#x200B; If you go with text writing / reading and parsing than you must take care to make your Creature files as easy to parse as possible. Your data file is hard to parse and the format does not make sense. You absolutely have to change that crapy format. I propose a sane and easy to parse format: Name,Weapon,Hp,Atk,Spd,Def,Res Test Red Gladiator,sword,30,40,40,30,30 Test Red Gladiator,sword,30,40,40,30,31 Test Red Gladiator,sword,30,40,40,30,32 * It has a header for human readability * Fields are separated by a special character: ',' the coma, which you MUST NOT use elsewhere. You can use any character for field separation but make sure not to use it elsewhere. * Fields do not have leading or trailing spaces * No empty lines etc etc The format above is a subset of the CSV standard and it is very easy to parse into Creature objects &amp;#x200B; \-(3) every individual creature is represented as an individual Creature object in memory. The main properties of such an object could be: public class Fighter { public string Name {get;set;} public string Weapon {get;set;} // I really would make Weapon to an enum if you know what enum is public int Hp {get;set;} public int Atk {get;set;} public int Spd {get;set;} public int Def {get;set;} public int Res {get;set;} //Here comes the meat } &amp;#x200B; \-(4) Now that you have your fighter and monster class definitions and you have decided whether you are going the Text-Parse or Json route. You have to set up File Read/Write. And achieve robust error free Creature object generation based on your input files. &amp;#x200B; Here is the code You have to put the CSV file (my proposed format) with fighter data under c:\\tmp\\fighters.txt &amp;#x200B; using System; using System.IO; using System.Collections.Generic; namespace ConsoleApp7 { public enum Weapon { Sword, Axe, Spear, Bow, Hammer } public class Fighter { public string Name { get; set; } public Weapon Weapon { get; set; } // I really would make Weapon to an enum if you know what enum is public int Hp { get; set; } public int Atk { get; set; } public int Spd { get; set; } public int Def { get; set; } public int Res { get; set; } } class Program { public const string fightersFilePath = @"c:\tmp\fighters.txt"; public static List&lt;Fighter&gt; ReadFighters(string path) { List&lt;Fighter&gt; result = new List&lt;Fighter&gt;(); if (!File.Exists(fightersFilePath)) { Console.WriteLine($"Could not find file under: {fightersFilePath}"); return result; } else { string[] lines = File.ReadAllLines(fightersFilePath); // we parse all the lines one-by-one skipping the first one // the first one would be at i=0 for (int i = 1; i&lt; lines.Length; i++) { string[] fields = lines[i].Split(','); Fighter fighter = new Fighter { Name = fields[0], Weapon = Enum.Parse&lt;Weapon&gt;(fields[1], true), Hp = int.Parse(fields[2]), Atk = int.Parse(fields[3]), Spd = int.Parse(fields[4]), Def = int.Parse(fields[5]), Res = int.Parse(fields[6]) }; result.Add(fighter); } } return result; } static void Main(string[] args) { List&lt;Fighter&gt; fighters = ReadFighters(fightersFilePath); Console.ReadKey(); } } } &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B;
Wow, that's actually not that bad idea and a completely new application for DXVK. Hmmm
Lol, nope
They talked. They talked and yet never did it.
Woops!
Well I want the extra credit if I tell you everything ;) Google base 16, then ascii and then cypher and you'll have everything you need. Possibly the only tricky bit is to figure out which symbol is which number, but trial and error will sort that one.
Ok thanks for the experience, I will not do it
Thanks I was aware off them just wondering about this, now I would use Udemy or similar
Maybe I didn't explain it good enough what I want to reach. There timer is let's say 20 minutes, then the screen "soft locks" and it's the next "users" turn. So the timer will always be 20 minutes until the next lock. My problem is the locking part. I don't want it to go to the windows user screen. What I need is prevention of any interaction with anything but the lock screen which is being unlocked when the user entered his name. And this is the one part I couldn't find out so far how to approach it. If I could get any hint what to search for that'd be awesome. I am not requesting full code :) 
What makes you so sure?
winforms or wpf? Transitioning them to a new screen and then back on verification shouldn't be too hard. If they have windows open though you'd probably have to close them. It's not really an inbuilt feature something you'd probably have to work around you're own logic.
&gt; anyone care to explain the downvotes? O.o Resharper seems to be a mildly controversial topic on the sub. It won't reliably attract downvotes, but it's definitely got some dedicated not-fans.
Good point. That might be a breach of GitHub own rules.
Did they finally decide what they do with arrays and structs? for example, what happens if you do struct Foo { public string bar ... } void Bar(string bar) {...} and then call bar like this: Bar(default(Foo).bar);
But I didn't even defend them, I just pointed out that the statement was wrong. I mean, if I had offered an opinion I could have understood it, but I didn't… :/
Ick, I didn't realize F# was so module based. I hate languages where the order of module loading and function definition matters.
The Internet is peculiarly stupid that way.
There's no warnings emitted for that.
So, if this was my project I would; Use the global search in VSTS for keywords and find all instances of a setting. The next thing I would do is remove the setting and run all of my unit tests to see what broke. Are you using the settings where it creates a property? Or are you specifying the name of the setting in an indexer like: setting["theNameHere"] If using the property you can end up creating logs of when they are accessed to see what is used and what isn't.
As while as you don't use preprocessors, yes. Preprocessors require a newline after.
Do you have resharper installed. The last couple versions have had a tendency to report errors that don't actually exist, particularly errors on stuff that simply can't error. Actually trying to build will work despite the errors. 
Well, you can use GitHub with any license. Not sure there are rules against this, really.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/azure] [Source Code Generator (Back end to front-end)](https://www.reddit.com/r/AZURE/comments/a3cowl/source_code_generator_back_end_to_frontend/) - [/r/u_amila1992] [Source Code Generator (Back end to front-end)](https://www.reddit.com/r/u_amila1992/comments/a3coqp/source_code_generator_back_end_to_frontend/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
On both MBPs I have (2012 and 2018) it’s much snappier than VS Mac (not to mention considerably more stable). Initially loading a large project with an empty cache definitely takes a minute or two, but once that is done subsequent opens are only a few seconds for me. Refactorings, navigation, etc is quite quick then. _compiling_, well, that’s a different story, and has made me ponder a switch to nodeJS on more than one occasion. Especially building Xamarin projects, but that’s my own fault for thinking Xamarin was usable. 
Great choice MS, I won’t screw that up in my windows VM on Mac and accidentally quit the VM...
Wait aren't reference types inherently nullable?
To be fair doesn't large parts of VS run out of process which means the 3GB limitation isn't necessarily true?
Hopefully it means we get a UI that sits still and is supportable. I'll be glad when MS finally make up their mind about how we're supposed to make UIs.
i am not sure. many people who want cross-platform GUIs are not typically microsoft users. so releasing such a framework would bring them to .net and eventually other microsoft technologies.
I'd like to see MS invest in some sort of cross platform GUI toolset. I want to use C# for my cross platform desktop apps, I really do, but at the moment the only way I can do that is with Avalonia and it's nowhere near a level appropriate for production.
And then you have to think about: - How many users are these? - How many users would really give a Microsoft technology a try? - How many of those users would stick to the platform? - How many of those users would move on to the **real** cash-cow of Microsoft, to Azure? And then compare the expected revenue from those potential users with the cost of creating, maintaining and supporting such a cross-platform GUI framework.
A tip, if you ask for help with error always post the actual errors and the code. Else I would guess the sun's rays are shining wrong on your computer and that is way you get the error.
To expand on this, I would find all instances of a property being used outside a dependency mapper and put them in a dependency mapper. I recently started working on a large legacy application and I've started taking all the config["someDB"].ConnectionString calls out of my constructors and putting them into our dependency injection tool (doing this with nearly all instances where a class instantiates another non-POCO class as well). Moving all the config references to a single class/method would easily let you determine what's not being used.
Removed: Rule 5.
Why you always gotta show up in my moderator feed? I get where you're coming from, but maybe tone down the snarkyness.
The way UAC does it is by taking a screen snapshot, create and switch to a new virtual desktop and display a modal form on that.
&gt; EF Core 2.2 RTM includes more than a hundred bug fixes Ehhhh? Based on which version? Stable? Cause it would imply the versions have hundred bugs
Well, it does have over 1000 issues on Github ...
Hugh coding standard? Seriously? The generated code is crap.
Better and better! What a good day to be a .NET developer!
It sounds like you're dealing with a lot of code written by people who don't understand OO principles, and you yourself are condemning it because you don't understand OO principles. If objects "get modified all over the place", then the objects are poorly defined. It also sounds like there are some meatbag-related problems, too. If some newbie "fixes" something without understanding it, then your entire organization has failed to do its job. Neither of these things is a failing of the tool, but instead, the blame lies with the wielder. Personally, I find functional programming to be a hammer in search of a nail about 99% of the time. Foisting its patterns and practices upon another style of language is just foolish. There's a reason C# is more popular and more jobs are available for it. *It's more useful for more things than F#.* Stop encouraging bad ideas. They're already breaking source compatibility with this idiotic nullable-reference garbage. Next you want to break the *rest* of the language? *Go use F# and try to make it more popular and stop screwing up C#.* They're two different languages for a reason.
That hint helps a lot! Thanks! Is it possible to mimic that behaviour? 
I also noticed that and I find it troubling.
The mimic of UAC is as I described.
Thanks a lot! Will try that out :) 
I heard they were debating between that and Alt + F4.
Oh boy.
Since all of these are GET requests, I would assume there is no possible way to make changes to your account via API: https://steamcommunity.com/dev
Usually, you want to mock something that has a heavy cost - like hitting the DB, for example, or reading a file. If you want to test static methods, and those static methods execute stored procedures (for example), then you are looking at needing to do some refactoring first. Adding unit tests to "legacy" or poorly designed code should always assume that some refactoring will need to be done :(
Oh, I had the same question recently. I made a few conclusions. They've already written: you will need a server for storing keys. We need to come up with an algorithm for generating keys, checking them. You can create keys yourself or use tools like ArmDot and so on. And the server must verify the key. You can generate keys based on customer’s computer information. Good luck with your application!
Weird, everything works fine and CS8632 goes away for me just by setting the lang version to 8.0 and adding the NullableReferenceTypes flag
The wording is a bit confusing, if you don't add that tag or use `#nullable enable` in the file, the warning system won't change and will be the old one. Turning on NullableReferenceTypes enables warnings for when you pass null to reference types that aren't marked as nullable e.g. `string` instead of `string?`
Ah I should've put preview in the title. Strange that mine did not come with .NET Core 3 preview though, only .NET Core 2.2
Yes, and some of those other processes are 64 bit
I know Xamarin is looking to support macOS, it is currently in preview. I'm not sure how good of a state it is right now, but might be worth looking into. I think Microsoft is planning on using Xamarin.Forms as that cross-platform GUI. The potential downside is it is just a wrapper around native UI. That can be a positive, especially within mobile platforms, but on desktop there is less pressure to follow platform style and convention. So it would be nice if they extended UWP to be truly universal.
Look at the ready-made solutions. We use ArmDot in our office. It is quite convenient for us. I think it's convenient for customers too.
Warnings for nullable value types will be coming in the future, there's a PR out for it now: https://github.com/dotnet/roslyn/pull/31499
Yeah, but this is an awesome project. I love these mad scientist contraptions 
I’m surprised they didn’t go with ctrl-alt-del
&gt;Is it supposed to work for old project formats? I don't know (but [I asked](https://github.com/dotnet/project-system/issues/4058#issuecomment-444455332)). Given that [ASP.NET (non-Core) doesn't fully work on the new format](https://github.com/dotnet/project-system/issues/2670), and that there's plenty of legacy stuff (heck, I think even starting a _new_ .NET Framework project will give you the old format), this seems like an odd limitation, and I'm hoping it's only temporary.
I'll look into this method as well. I have all the time in the world right now so I'll probably try all these methods and whatever is fastest I'll use. There's like 200-300+ characters, each with over 600mil builds fighting 40k enemies per build, so it's a very long process no matter how I do it. As long as it is fast, and not super intensive for the PC, I'm run tons of these in parallel and bingo I can tell everyone objectively what the best builds are for each character and each purpose. I'm so stoked. 
Last time this came up on /r/csharp I caught some flak for saying I had doubts that an ML algorithm will be better than a more traditional one. I figured it would likely seem almost prescient when you're hitting the 'good' branch (i.e. it correctly predicts what you want), but would be less predictable overall and more awkward when you go outside that. ... Looking more at its implementation now, it seems that only the first few items in the intellisense window are IntelliCode suggestions whereas the rest of the items fall back to the more standard list. I think that's a good hybridisation- offer the hopefully-correct suggestions first (and I'll bet they *are* what you're looking for most of the time) but don't try to be *too* smart and let us go back to an algorithm we can understand quickly (i.e. alphabetization) when those suggestions are wrong. Seems cool. I can't wait to try it. I only hope it works with R#.
Well then you're going to love these numbers! Currently open issues for * CoreFX: 2600+ * CoreCLR: 1900+ * Roslyn: 5000+ * AspNetCore: 600+
Issues can include other things than bugs though, no? Like requests for additions, documentation inquiries..
To be honest, the full list always needs to be available but as more people are using it, I'm expecting the model to get better over time. In my experience, there are types where you ALWAYS use the same properties. Arrays? Length. Lists? Count. Console? WriteLine. If IntelliCode can bring those at the and save me a bit of typing? I'm all for it. Especially if it's free.
Double check your project type. If you created the project as a Visual Basic project then your C# code will throw at least 15 errors (about 1 per line of code). Easy way to tell, in the Solution Explorer is your class named "{Something}.cs"? or .vb? As others have said -- copy and paste the errors you're getting here as well as the code you've used. I can confirm that the example works as described without issue on VS 2017 in a C# Console App Project. 
I guess if you're into that kind of thing.
Hi, i am new to coding and I'm not sure how to work the buttons and text boxes that well. I must use Visual Studios 2007 .NET framework and I need help getting the basics down. I know i have to code the buttons. ToCreate a simple GUI coordinate converter on visual studios 2007 C#. .NET framework package and C sharp program use the equations too convert from polar to rectangular and back to rectangular to polar. There should be text boxes for each conversion. Place the equations in the corresponding buttons and convert the member functions for XY magnitude and theta when you write them in the equations they correspond with two double values using the Convert.ToDouble() function. When the calculations are finished convert them back two strings don't forget to convert radians to degrees also. Can anyone please help me out? thanks!
Removed: Rule 4. There are resources in the sidebar to get started. You didn't specify if you're working with WPF or WinForms, as the method for creating buttons/GUI is different between them. I suggest you start with something simple. Make a GUI application with a single button that outputs "Hello world" to a text box when clicked. Once you have that down, you can start looking into reading text from a text box (user input). Then once you have that, you can start figuring out how to apply the math.
Nickname is great for commenting on EF Core
The pace of development seems slow with EF and the number of bug fixes seems high. My real concern is that the project is understaffed.
In the presentation the IntelliCode suggested the `.Add` method (which returns `void`) as the value for an assignment...
that all i know as of now, i was coding c+ so this GUI stuff is new
&gt; That might be a breach of GitHub own rules. Why would it? There's lots of proprietary source on GitHub.
I honestly couldn't follow, what's the question? An api to convert polar to rectangular and back?
Hmm
From what perspective are you asking, if you know nothing about C# development?
Yes.
(I think I understand what you mean but if not please I’m sorry I’m not the brightest) I’m interested in developing something like that, and I was by someone learning c# it good for game development but know what kind of games he was referring to
Thank you, I will hopefully learn more about programming now 
Well essentially everything is possible. I’m a web developer and use C# on a daily basis. If you want to look into / learn about game development (3D) I believe Unity should be something to have a look at. If you don’t know anything about coding, you can focus on what you want to achieve and then decide what Development Environment and what Language suits your desires the most. 
You asked if it was possible, not if it was a good idea :) There's a HUGE conversation to be had if you're actually thinking of trying such a thing. Like what platforms you'd want to distribute to, how much money you're willing to sink into the platform you develop with (Full Visual Studio and Xamarin are not free but VS Code and .NET core can be, etc). No one develops for consoles with C#, at least not that I've heard. That's mostly C++ (playstation) Good game programming is complex, and you should decide what you actually want to do and where you want to do it before you pick a language/framework.
C# is Turing complete, so yes.
Thank you, that helps a lot. I will continue to learn about coding.(ps judging by how quickly I got a response, this subreddit seems very friendly) thank you again
I kinda found my problem. Just changed my .cs name to match "class" name(GlazerCalc) and that fixed it. But after that, i renamed it to a different name and it worked too?? I don't get it but it's ok i guess :/ I'm working on Console App project btw. &amp;#x200B; And i found a typing error in my code too(hard to be a noob :/ ). But as i said, errors happened with authors solution file too. &amp;#x200B; I also found that, "start" is a different thing, it does something else, i don't get it fully(looks like a debug mode, but it works a little different, starting like normal code, but doesn't show results or text, just closes itself after inputs and enters debug mode). You have to click "debug", and "start without debugging" to see your code running. &amp;#x200B; What a hard start for me. Now i understand why everyone suggesting Python for starters. But C# looks great for everything! I won't give up soon. &amp;#x200B; Thanks for all replies. They made me look for my errors and where to look, instead of program's fault(as i suspected deep down inside :/ ).
Game development is a huge area of study on its own. You can use C# and Unity to make pretty much any type of game you want, but I'd spend a lot of time learning how to plan and structure games before spending too much time writing code. Otherwise, you are almost certain to spend months coding and then discover that you've structured your code in such a way that you've hit a roadblock. I'm not saying not to write code at all. You can safely follow tutorials so you can learn C#/Unity while planning your game. I'm just saying don't jump in and start writing YOUR game as soon as you pick up a C# book. As I said, this is a huge undertaking for a beginner, but you can do it. Just keep coding and you'll get it done. If you get discouraged, take a step back and see where you started from. And NEVER be afraid to ask for help!
To be honest I hadn’t thought that far ahead, there is a lot more to think about like the things that you mentioned about what it will be played on, I know I sound silly but it hadn’t even crossed my mind so I appreciate you alerting me, saving me from what I’d have to go though down the line In terms of what platform to use could you please recommend me something cheap or free that is still effective, I can’t spend a lot of money As I’m a student. :)
I’m back from googling what that means and I think I understand 
There is a lot of information for a single word, it might be an image of a word. You could try converting to a binary stream and then saving as a bitmap.
You’re absolutely right, I should looking into the structure of games, I suppose my eagerness comes from a sense of intimidation learn a programming language, but I don’t want to come off with all the technical skills and no idea how to use them. Thank you, you’ve been very encouraging 
I also can't get default interface interface implementations to work. Seems like it's not included in the beta. I tried using the code example they provided but still didn't work, so definitely wasn't a typo
Oh mb, essentially it just means you can create anything in it.
Quartz persists to a datastore for free. Does this scheduler have any advantages over quartz?
https://partner.steamgames.com/doc/api/ISteamFriends#SetPersonaName https://github.com/Facepunch/Facepunch.Steamworks
1. Fody is not proprietary 2. There are monetizing a GitHub feature (pull requests) while they don't own that mechanism
Thanks, a video gave me the gist of it but you put it much simpler 
Do you have any good alternatives in mind? This seems like a deal breaker for my company too.
Pretty sure they will accept volunteers. 
Have you looked at Unity? /s In all seriousness, Space Engineers lets you script in C# last time I checked. Thats about as close as it gets off the top of my head. I don't know any games that run their servers off C#. Although....... Fallout76 supposedly has unencrypted data transfer so you could snoop it and theoretically build your own server. With blackjack and hookers of course.
Alright! Spatial support! Been waiting for that for a while.
Rust mods are also a thing apparently
https://github.com/csnxs/Terraria
It’s an enormous framework, so that doesn’t sound unusual to me. It’s also not a great indicator of quality, given that you’d have to compare 1) granularity of bugs, 2) eagerness to report them.
You could use WCF for messaging but you'll probably want to use a UDP transport. You could also use RabbitMQ for messaging as well. I am currently using RabbitMQ + C# for my game server.
You should consider hosting a service that is required to authenticate against once a month, or even build it as a hosted solution. &amp;#x200B; If that's not an options, there a lot of sneaky ways of managing a licensed application so that it breaks when expired. You can look at hiding registry keys, saving files in a location that is outside the norm, etc... Ultimately, it will be broken if someone cares enough to try. &amp;#x200B; If you are young and inexperienced, you're best to sell it license free in the hopes they will want you to do other things for them, or even give you a good reference. Nothing wrong with making a dollar.
https://www.reddit.com/r/csharp/comments/9pknc9/how_to_generate_license_key/
Yeah it works. So cool!
Point of a cache is a place to store data that is either too slow to hit storage each time it is needed or might be unavailable for some reason (other service shits the bed, network partition, bug, too slow), or is written very infrequently but read constantly. Can't speak with certainty without way more detail about your system than is appropriate here, but in general you want to split your services vertically down a business domain (e.g. shipping, catalog, store, customer support, inventory) with each slice owning its own storage and infrastructure like caching and able to operate independent at some level of service even when other services are unreachable, not horizontally across technical concerns (e.g. cache, data storage, business logic, API), where if a critical service is down the entire world stops. At some scale a caching service might make sense, but at your current level of understanding and most likely use cases stick with the vertical slices until you understand why that's a good idea. When you understand why that's a good idea then you'll understand when it's appropriate to do the opposite. 
After you sir.
A lot of businesses actually like the ideas of an "unlimited license" where you just declare, "You may use this license as much as you want, but you cannot relicense it or sell this software. Please pay me $X,XXX"