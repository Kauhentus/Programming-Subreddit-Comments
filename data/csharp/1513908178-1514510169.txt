It should be possible to escape any string in a way that makes it safe it use in sql, and there will probably be a library available to do so for your favorite flavor of sql. You still shouldn't do it unless you really know what your doing, because you can always fuck it up in a way that you just cant if you write reasonable sprocs, but it's not impossible.
Second this. I’m using it in my current project and it’s fittingly named!.
The op didn't update his code because it still has the same flaw. Also I said result is acceptable because it's a console app and unless you are at a certain version you can't have an async main method. 
If you're writing an SPA that's totally separate from the background service, VS Code is significantly better, at least IMO. Visual Studio is a pretty terrible environment for working with JavaScript or even typescript.
Oh yeah, I'll use code for that for sure, I forgot about that use case. Most of my workload is backend services and apis though, so I deal 95% in c# 
I still use VS for c#, it's vastly superior for that. It's slightly more debatable in .NET core. Code is awesome for JavaScript, PowerShell, JSON, and basically anything else that doesn't have a dedicated IDE.
Flurl is nice. It is a set of fluent extensions to HttpClient.
Hows it compare to rest sharp?
Linq, async/await, task library, consistent naming conventions, strong Enterprise support, Visual Studio/resharper. In my general view, it has a lot of the "benefits" of a strongly typed language like Java while keeping a lot of the positives of a weakly type, quick to develop language like Javascript
Are you a professional, or is this a hobby project?
As someone else pointed out, you’re calling an async method but not awaiting it. For your immediate purposes just adding .Result to your line will cause the application to block until the request is complete. However, you want to learn more about async/await as the point is not to block.
We just keep it simple and keep it internal. WCF is the worst. Easily the most customizable, but when it breaks you lose a week.
RestSharp is definitely the way to go. Makes it super easy. 
Tell me about it, I'm honestly just thinking of doing something like JSON for object transfers and raw tcp transfer for streams. Seems like it would be way easier at this point but idk about maintability of "hacky custom network protocol number 5"
Why not use http endpoints? Check out Swagger.
I just did some quick googling and it said it was extensions for Web API? Does it only support http and do you know if it has data streams?
Hey, how would I go about passing multiple parameters? I've tried looking at the MSDN forums but nothing related to what I'm doing.
Swagger is designed to be used with HTTP REST APIs. You can certainly read an HTTP response as a stream. HttpClient's result type has a method to read the response as a stream.
Cool! Sorry for my ignorance, my main experience with Http has been generic client side JavaScript stuff for CRUD websites
Ah, I didn't see the part about Console.
Use https://insomnia.rest/ to prototype the rest call and generate the c# code. Super simple.
I believe because he's returning an async task it doesn't block and just outputs the results when it gets to it. 
It’s fluent and testable. It’s modern and designed to work with async/await. I went looking for something besides restsharp after it seemed that it had lost mind share and wasn’t getting much development. A lot of people advocated simply using httpclient. Flurl is really just some helpers built on httpclient.
Don’t forget that you want whatever lib you use to make testing easy. 
I’m going to play the part of Debby Downer in this thread and say some things that others are gonna hate and probably scream at me for. Merry Christmas. Ok, have each dev draw straws. Short Straw dev becomes the official WCF maintainer and developer, and all the other devs by that dev vast amounts of alcohol to contain the building rage that will I evitable grow and fester with in. If you don’t have a dev that you can dedicate to the task you might be screwed (except this is the land of WCF...you are already screwed). WCF configuration is akin to regular expressions. Once complete, even the original author will have trouble maintaining it unless they are just live there. As soon as you leave for even a week...start over. Or just rip out WCF and replace it with web services (don’t ask how many times I’ve done that) Granted, there are a few cases where WCF does make sense. I’ve just only been in that particular situation once, so it was only MOSTLY a mistake to use WCF. I do have a friend, good guy, very smart, that loves his WCF, but he hardly ever had to write any of the WCF code for his system. He didn’t draw the short straw.
Fluent code setup + your data format of choice. The XML config has a bunch of power but it can be brain breaking. 
Really if what you are doing is simple or will never change than WCF may be overkill. If you need to be neutral to the transport, protocol and/or data format/dtd then you can't beat WCF. If you are writing that kind of code you are likely a bank or a SaaS of some kind. 
Microsoft AutoRest for generating c# code from swagger definitions: https://github.com/Azure/autorest. Works without azure.
First, skip the XML. It’s fiddley hell you never change once you have it right. Instead, use the code-first APIs to set up your service. You can do in 10 lines of code what takes 100 lines of xml. Second, learn how WCF tracing works. When IIS blows up mysteriously, the WCF trace will explain why. https://docs.microsoft.com/en-us/dotnet/framework/wcf/service-trace-viewer-tool-svctraceviewer-exe Finally, learn the framework. WCF is a stupendously powerful integration tool, but that makes it more complex. Stack Overflow doesn’t teach you the theory. At a minimum, learn the Address Binding Contract model. Better yet, read a book. Programming WCF Services 4th ed. is the best book I’ve found on the subject. 
This is normal. The a-ha moment may not come ever.
Raw sockets, everything old is new again.
You can do it with one line if you don't want to check for valid parameters etc. dynamic list = Activator.CreateInstance (typeof(List&lt;&gt;).MakeGenericType(type)) Edit: if you add that to an extensions method then you could do something like type.MakeGenericList ()
Using swagger now for an api.., its a great backup and pretty easy to get running. Sans a couple of catches with azure.
I have to echo that thought. The XML is as brittle as fuck and makes everything much harder than it needs to be.
&gt; trying to host a net.tcp service in IIS Uh, why? If I'm building a WCF app, I normally host it as a Windows Service.
Swagger is basically WSDL for HTTP REST endpoints. There are Swagger client proxy generators for just about any language and .NET can auto-generate Swagger Just like WCF auto-generates WSDL.
It looks like you are missing a name tag on your textarea.
There are relatively few cases where I absolutely needed WCF and I avoid it wherever possible. Now I do mostly JSON over HTML (not really RESTful, but whatever) or lean on message queues where it makes sense. There were two things that we always did when I was doing a fair amount of WCF work, and while they didn't save us from all the pain, they did seem to make it a little less sadistic. First, we did our best not to ever host with IIS. Write a windows service and host your endpoints in that process. IIS will stick it's head in the way, it is a pain in the butt to deal with, and always seem to do so in the most transparent way possible. Unless there's some compelling reason to host in IIS, just avoid it where possible. Second, we never allowed VS to generate the service reference for us. We always had all of the contracts, both the DTOs and the end points, in a separate project that could be reference from both side of the call. There's a lot of "junk" that VS pulls from the service reference that winds up cluttering up your project. This approach was cleaner and more straight forward, but also not as feasible if you don't control both end points (although still possible). The last piece I'll suggest is exposing or pulling as little from the configuration as possible. WCF was put together when everyone thought XML could solve the world's problems. There are some aspects of the binding that are not up for debate and need to be set up in a certain way in order for the service to work as intended. IIRC doing this is pretty hard, due to when/how the bindings are instantiated from the config as opposed to code, but find a way to keep as few things defined in config as possible. If you get it down to just the address, then you'll be in better shape. Also, Juval Lowy's Programming WCF book is extensive and stock full of tons of info. Despite my distaste for WCF, I haven't gotten rid of my copy because I want it there for the day that I have to deal with WCF and don't have a choice. https://www.amazon.com/Programming-WCF-Services-Mastering-AppFabric/dp/0596805489
The array used in the `Invoke` method to pass `parameterData` can take multiple parameters. method.Invoke(null, new object[]{parameter1, parameter2, parameter3, parameter4}); Similarly, the `GetMethod` also specifies those parameters: var method = classMatchingName.GetMethod(methodName, new Type[]{typeof(string), typeof(string), typeof(int), typeof(WhateverTheParameterTypeIs)}); You'll need to make sure the types match otherwise `Invoke` will throw an exception.
Agree. Decide on your binding up front. Code your contract - don't use the wizard. Only put the address (URL) in your appsettings part of the config file. Hard code the rest in C#. In practice, I've never seen production code change anything but the address and/or port.
I would largely agree, but I've seen changes made to timeout values and maximum call size changes for specific clients. I always thought the changes made should have been applicable to all clients (and therefore should have been hard-coded in the code) but I wasnt the one maintaining the services. Your idea is right though -- keep configurations in the XML that will be different based on deployment environment but manually rig the common settings in code.
I've come across a list of reasons why hosting a wcf service in IIS is great while looking for other wcf information, but I haven't hosted in IIS yet myself so I am, unfortunately, ignorant of those benefits. Perhaps I should look into it.
I tried the above method yesterday but threw an exception because the signatures didn't match. I even made sure the parameters for each method were correct. Oh I'm an idiot. I was suppose to add your second part for the methods.
[WCF the Manual Way](http://www.codemag.com/article/0809101). I've used parts of that article before. It may or may not help you since you are hosting in IIS. The parts I've taken from it are basically the parts that ignore the service reference altogether and have a common contract library that sits been the service and the client. I programatically configure the WCF service as much as possible so I can ignore the app settings as much as possible and then I configure the client-side similarly and use `ChannelFactory` to generate the proxy I need to communicate with the WCF service.
Not sure if I understand. By definition, every `ReadLine` will end with a NewLine character (`\r, \n, \r\n`), except the last line which may be End-of-File. So if you needed to include a new line at the end of each read string, you can just manually append `Environment.NewLine` (or whatever character you want), perhaps with a special check for End-of-File (if necessary). If you needed to know what specific line ending character was used, you may need to instead read each character or read the entire file and parse out the specific newline characters you're looking for.
Not to mention the fact that *everything* seems to want to put settings in your app config (entity framework, various logging frameworks, etc) and updating a config file with new settings while still keeping the values of previous settings is a major PITA.
you delegate responsibility to classes, so anything you have that has a different responsibility should basically be a class on its' own. that's your hook to twitch to send and receive, your forms events logic, your wpf events logic, probably a fourth class holding the data going to and coming from twitch in an object of sorts. if you're writing or reading data from files as part of your program, i'd probably stick the logic for those in a class together, or each in their own class depending on how different they are (one for txt, one for xml, a third for jpegs or whatever) one class, one responsibility.
I have a dozen WCF TCP services in production and this is the approach I have been using for years. I don't run into all the issues people often complain about. It's not perfect but no general purpose framework is. 
With resharper, you can add an attribute on your properties ([JetBrains.Annotations.CanBeNullAttribute](https://blog.jetbrains.com/dotnet/2010/11/17/resharper-nullreferenceexception-analysis-and-its-contracts/)), which will tell the code analyser to validate if there is a null check. [CanBeNull] public AccountManager AccountManager { get; set; } 
I've always done it this way string x = x.ReadLine() // or however you are reading the data in if (x.EndsWith("\r\n") || x.EndsWith("\n")) return true;
You could just store the line, read the next line, and the next line isn't null, handle the previous line normally. Otherwise, handle the previous line according to your last-line case.
[`StreamReader.ReadLine`](https://msdn.microsoft.com/en-us/library/system.io.streamreader.readline%28v=vs.71%29.aspx) doesn't include the trailing newline characters: &gt; A line is defined as a sequence of characters followed by a line feed ("\n") or a carriage return immediately followed by a line feed ("\r\n"). The string that is returned does not contain the terminating carriage return or line feed. So you can't check via `EndsWith("\n")`.
You could probably add an IGameFactory and add it in your Bootstrap.cs. So your program won't have a new Game(bundle). Also, the Move(char direction) could use an enumeration instead of chars. That will allow you to use whatever input to play the game and to have predefined movement, instead of having a comment that tells you what are the availables directions. 
yes, that is implied by ReadLine (it reads until the end of the line), but he's also asking how to check for the actual newline and carriage return, so I answered that part instead. Your first post covered ReadLine(). I'm not answering that part of the question.
Add name="text" to your textarea wrap it in a form put the controller stuff in there. Make sure your SendMessage method accepts a string called text. (Free to choose name but you called it so in asp-route-text)
Here is a formatted version of it: &lt;a style="margin-top:10px;" class="btn btn-primary" data-toggle="modal" data-target="#exampleModal" data-whatever="@Model.Owner"&gt;Send Message&lt;/a&gt; &lt;div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true"&gt; &lt;div class="modal-dialog" role="document"&gt; &lt;div class="modal-content"&gt; &lt;div class="modal-header"&gt; &lt;button type="button" class="close" data-dismiss="modal" aria-label="Close"&gt; &lt;span aria-hidden="true"&gt;×&lt;/span&gt; &lt;/button&gt; &lt;/div&gt; &lt;form&gt; &lt;div class="modal-body"&gt; &lt;div class="form-group"&gt; &lt;label for="recipient-name" class="col-form-label"&gt;Recipient:&lt;/label&gt; &lt;input type="text" class="form-control" id="recipient-name" value="@Model.Owner.UserName" readonly /&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;label class="col-form-label"&gt;Message:&lt;/label&gt; &lt;textarea id="sentMessage" class="form-control"&gt;&lt;/textarea&gt; &lt;span class="text-danger"&gt;&lt;/span&gt; &lt;/div&gt; &lt;div class="modal-footer"&gt; &lt;a asp-area="Communication" asp-controller="SendMessage" asp-action="SendMessageAsync" asp-route-recieverId="@Model.Owner.Id" asp-route-text="Here should be the textarea(id: sentMessage) input value" class="btn btn-primary"&gt;Send message&lt;/a&gt; &lt;button type="button" class="btn btn-secondary" data-dismiss="modal"&gt;Close&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; (To post code like this just put four spaces at the beginning of each line.) Sorry I didn't answer it myself, I'm in a meeting (heh) so I can't do it right now but I wanted to at least quickly do that for you so that hopefully it's easier to read and answer in general. Feel free to strip the above from my comment (use the [Reddit Enhancement Suite's](https://chrome.google.com/webstore/detail/reddit-enhancement-suite/kbmfpngjjgdllneeigpgjifpgocmfgmb?hl=en-US) "source" option, and put it in your post.)
The logic works as intended, and there's definitely some thought on the design, but I think there's some room for improvement. Personally when I submit code ready to be critiqued by potential employers, it's your time to show your best. It may seem pedantic spending some time cleaning unused references, unused code, adding a .gitignore file etc., but it shows to your employer that you'll follow similar practices on production code - [where it counts](https://pragprog.com/the-pragmatic-programmer/extracts/software-entropy). * Don't commit buildable items, such as bin/obj folders. Use a [.gitignore file](https://github.com/github/gitignore/blob/master/VisualStudio.gitignore) to exclude these files. Place it in the root. * There are references to EntityFramework, and a missing Model1.Context.tt. These aren't related and should be removed. * Stick to the [Microsoft guidelines] (https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/naming-guidelines). Example, GameSettings class has MACRO_CASE. Replace with PascalCase. * Interfaces are exposing methods which aren't being used anywhere public. Such as ISquares.Squares, IGame.Finished, IGame.MineCount. It's not a public API so only introduce these when needed. * I think the GameBoardBuilder is overkill. I can see your motivation for it, you want to create a board with GameSettings that is owned by Game. But your GameSettings aren't tied to the Game class anyway. You've made the Game class quite difficult to test because you now need to think about a GameBoardBuilder creating a stubbed IBoard when testing the Game class. You could try passing a constructed IBoard into Game. * Board Move method. Enum can be used here. Then the Move method would take a Direction enum rather than a char. * Move method is both mutating and returning something. Try to make methods do one thing which matches their name. You could make the Move method only update the _userCurrentRow and _userCurrentColumn. Then create another property 'IsCurrentLocationHit', which the caller can check. * No bounds checks in GetCurrentLocation. Try pressing 'L' on a new game, it'll throw an IndexOutOfRangeException. * Don't mix game logic with user interaction. A BoardDrawer class can be responsible for displaying a board's current state to the user. A board will then just be responsible for dealing with the mine state. * Board ctor assigns a Square array to an ISquare. Pass in an ISquare to Board.
You could use a Filestream and parse the buffer. 
Looks pretty good. One thing I noticed was the MineCount property setter being public. Since that is part of your game state, you probably don't want to expose that.
If you want to append it to one string again, you could use `File.ReadAllText` 
Swagger is just a tool for doing this in a structured, type safe way.
 When you await an async task, it is non blocking. He however is not, if you call .Result, it will become a blocking operation.
 There is nothing dangerous about calling Result on an async method. https://msdn.microsoft.com/en-us/library/dd321468(v=vs.110).aspx "it is equivalent to calling the Wait method." It can be dangerous using anything you don't know what is going on, such as calling from a threadpool (which is an uncommon scenario in the first place) and causing a deadlock, but the nature itself of calling Result is in no way dangerous. (of which, asp.net core no longer has any issue with deadlocks so it's void in that context)
From my understanding, OP had 2 hours to complete the tasks, where he just prioritized differently. Although the .gitignore part should be included of course, if he uses Visual Studio, since VS comes with a nice .gitignore file.
On mobile, so I can't give an example, but look at int.TryParse()
Thanks! I didn’t realize that. 
I currently use ReadLine() to get a line from the stream as string. But it does not include a newline character at the end. I do not want to include it manually because I have to know if this line has a newline
My only suggestion is to document the shit out of everything. I once received "bonus kudos" because all I did was do 3x / above methods/class props and wrote a simple explanation of the variable. small stuff like that counts. even for small stuff like /// &lt;summary&gt; /// A list of the currently employed employees in the company /// &lt;/summary&gt; IList&lt;Person&gt; CurrentEmployees { get; set; }
ok thanks . I will try that.
[removed]
Yeah, that's what I'm saying. By definition, _all_ lines returned by `ReadLine()` end with a newline character, _except_ the last line in the file. EDIT: From the [MSDN documentation:](https://msdn.microsoft.com/en-us/library/system.io.streamreader.readline%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396) &gt; A line is defined as a sequence of characters followed by a line feed ("\n"), a carriage return ("\r"), or a carriage return immediately followed by a line feed ("\r\n"). So unless it was critical that you know _how_ the line ended, either via "\n", "\r", or "\r\n", then you can safely assume that it _did_ end with a newline. Except the last line returned which you can assume did _not_ with a newline. EDITx2: Actually, just did some tests. The **last line** _may_ or _may not have_ a newline character. Maybe this is an issue for you. Sorry. EDITx3: Just to clarify, the last line _in the file_ may or may not have a newline character. Regardless, the `StreamReader` will return the last line without a newline. Therefore, you can't tell via `StreamReader.ReadLine()` if that _last line_ did or did not contain a newline. All other lines are guaranteed to have ended with a newline.
You're going to hit memory limitations with this if you have any substantially large file.
OK, so, a few things based on what you said above and the comments you've made. First of all, you are talking about converting a `string` into a command. Basically, you want some sort of `interpreter` pattern that executes commands based on a string. Furthermore, you should strive to bias `composition` over `inheritance`. This doesn't mean to ignore inheritance, but rather, you should be asking whether or not the common code that would otherwise be inherited should simply be in its own component that gets `injected` into the class that uses it either via the constructor, property or method parameter. Here is a neat and organized way to parse command strings and execute appropriate methods using `Options` and `OptionSet`. First, create the `Option` class: /// &lt;summary&gt; /// The Option class is used in conjunction with the &lt;see cref="OptionSet"/&gt; class. /// &lt;/summary&gt; public class Option { /// &lt;summary&gt; /// Gets the list of aliases that executes this Option. /// &lt;/summary&gt; public List&lt;string&gt; Aliases { get; private set; } /// &lt;summary&gt; /// Gets the description of this Option. /// &lt;/summary&gt; public string Description { get; private set; } /// &lt;summary&gt; /// Gets the parsing delegate for this Option. /// &lt;/summary&gt; public Action&lt;string[]&gt; Parser { get; private set; } /// &lt;summary&gt; /// Creates an Option instance with the specified aliases, description and parsing delegate. /// &lt;/summary&gt; /// &lt;param name="aliases"&gt;&lt;/param&gt; /// &lt;param name="description"&gt;&lt;/param&gt; /// &lt;param name="parser"&gt;&lt;/param&gt; public Option(string aliases, string description, Action&lt;string[]&gt; parser) { this.Description = description; this.Parser = parser; string[] split = aliases.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries); Aliases = new List&lt;string&gt;(split); } } Now create the `OptionSet` class: public class OptionSet : IEnumerable&lt;Option&gt; { /// &lt;summary&gt; /// Gets or sets the OptionFlag used to identify a command. (i.e /logDir, /x, /help, etc) /// &lt;/summary&gt; public char OptionFlag { get; set; } = '/'; private Dictionary&lt;string, Option&gt; Options { get; set; } = new Dictionary&lt;string, Option&gt;(); /// &lt;summary&gt; /// Parses the input with the &lt;see cref="Option"/&gt; collection. /// &lt;/summary&gt; /// &lt;param name="args"&gt;&lt;/param&gt; public void Parse(string[] args) { var command = args[0].Substring(1); //removes the command flag if (Options.ContainsKey(command)) { var option = Options[command]; option.Parser.Invoke(args); } else { throw new Exception("Command not found."); //caught and logged at the caller's level } } /// &lt;summary&gt; /// Gets the enumerator for the &lt;see cref="Option"/&gt; list. /// &lt;/summary&gt; /// &lt;returns&gt;&lt;/returns&gt; public IEnumerator&lt;Option&gt; GetEnumerator() { return Options.Values.GetEnumerator(); } IEnumerator IEnumerable.GetEnumerator() { return Options.GetEnumerator(); } /// &lt;summary&gt; /// Adds an &lt;see cref="Option"/&gt; to this OptionSet instance. /// &lt;/summary&gt; /// &lt;param name="aliases"&gt;&lt;/param&gt; /// &lt;param name="description"&gt;&lt;/param&gt; /// &lt;param name="parser"&gt;&lt;/param&gt; public void Add(string aliases, string description, Action&lt;string[]&gt; parser) { var option = new Option(aliases, description, parser); foreach (string alias in option.Aliases) { Options.Add(alias, option); } } } Now, here is an example of a class that uses the `OptionSet` class to invoke methods based on the command. Note how the `OptionSet` is created: public class CommandParser { private OptionSet Options { get; set; } public CommandParser() { this.Options = new OptionSet { { "help|h|?", "Prints a description of all available commands.", HandleHelp}, { "config", "Allows options to manage the configuration file.", HandleConfig } //add more commands here in the format of { "&lt;command&gt;", "&lt;description&gt;", &lt;invoked_method&gt; } //you can alias a command by using the format "&lt;command&gt;|&lt;alias&gt;" like "help|h|?". With "help|h|?", it means //that the command /help, /h or /? will invoke the same method which means HandleHelp. }; } public void Parse(string[] args) { this.Options.Parse(args); } private void HandleHelp(string[] args) { foreach (Option opt in Options) { var aliasText = string.Join("|", opt.Aliases); Console.WriteLine("{0}: {1}", aliasText, opt.Description); } } private void HandleConfig(string[] args) { //args[0] = /config //args[1] = some config command //args[2+] = parameters //you can use another OptionSet to invoke different methods based on the config command //or you can just use a switch or if-statements switch (args[1]) { case "save": //code to save the config file break; case "saveto": string path = args[2]; //code to save the config file to the specified path break; case "clear": //code to clear the config file break; default: throw new Exception("Invalid command format."); } } } With the above setup, you'd be in charge of reading in a `string` from the user and splitting it out into a `string[]` array. I find separating command arguments by spaces works best so you can split by spaces. Example commands could be: /help /? /config save /config saveto C:\path\to\file.config /config clear /exit You can look at the [Interpreter Pattern](http://www.dofactory.com/net/interpreter-design-pattern) if you want to do something different other than using `OptionSet`. Finally, if you want to call a method defined in the base class from a subclass, you can do this: public abstract class BaseClass { protected void Save(string arg) { //this method can be protected or public in order to be called from a subclass. protected means it can only be called from the base class and subclasses. //do stuff to save } } public class SubClass : BaseClass { public void DoStuff() { Save("testing"); //this calls BaseClass.Save } } Also, [gameprogrammingpatterns.com](http://gameprogrammingpatterns.com/contents.html) is a great source for game programming patterns.
This is why i said &gt;&gt;If you want to append it to one string again Because then you would have that problem either way 
Check out implicit nullability as well. I used that in one project earlier for similar purpose.
[removed]
Microsoft makes C# great! With the exception of JetBrains, no other company invests as much resources into making the developers user experience as smooth and seamless as possible as MS does. With Apple, Google, Amazon and Facebook, developers are a necessary evil to help produce revenue for their other products. So they give devs the bare minimum resources and support to get the job done. With MS and JB, developers and the tools we use are a big chunk of their bottom line. So devs are treated as customers and not indentured servants. This means the tooling around the language will be top notch, polished and will have plenty of money invested towards it. IMHO it's that simple. If the company makes money from providing products directly to devs then expect awesome support coupled with awesome tooling. Like the ol' saying goes, "follow the money!".
[removed]
Thank you for your answer. I might look further into that, although if a user forgets the [CanBeNull], it just like forgetting a null check. I'm looking for a more automatically way to do this.
Thanks, i will look into this.
[removed]
[removed]
[removed]
First of all, methods (among other things) should use `PascalCase`formatting in their name. For example, this means your `readInt` becomes `ReadInt`. More info about capitalization conventions in C# can be found [here](https://msdn.microsoft.com/en-us/library/ms229043%28v=vs.100%29.aspx). Now, this is probably more complicated than what you wanted but I did it the way I did so you could probably learn a thing or two: class Program { static void Main(string[] args) { string age = GetUserInput("How old are you? ", ValidateAge); Console.WriteLine("Your age is {0}.", age); Console.ReadLine(); } static string GetUserInput(string prompt, Func&lt;string, bool&gt; validator) { Console.Write(prompt); string input = Console.ReadLine(); if (!validator.Invoke(input)) { input = GetUserInput(prompt, validator); //recursion } return input; } static bool ValidateAge(string input) { int age = 0; if (Int32.TryParse(input, out age)) { if (age &lt; 0 || age &gt; 100) { Console.WriteLine("The age you entered was lower than 0 or higher than 100."); return false; } return true; } else { Console.WriteLine("Invalid input format."); return false; } } } You provide the `GetUserInput` method with your prompt and a method that is supposed to validate the input. The method is a delegate that gets invoked (defined by the Func&lt;string, bool&gt; which means the method must contain exactly 1 string parameter and return bool) to validate whether or not the input is valid. The `Int32.TryParse` determines whether or not the input was an integer and the remaining logic ensures the age entered wasn't below 0 or above 100. Unfortunately, this does hardcode the age limits which is different than your program. The validator also prints console messages for the user to understand why their input was invalid. Finally, if the validator returns false, the `GetUserInput` method is called again which will effectively continue to loop until the validator returns true. The advantage of doing it this way is that you now have a pattern to add more questions easily: class Program { static void Main(string[] args) { string age = GetUserInput("How old are you? ", ValidateAge); Console.WriteLine("Your age is {0}.", age); string name = GetUserInput("What is your name? ", ValidateName); Console.WriteLine("Your name is {0}.", name); string gender = GetUserInput("Are you male or female? Type male for male and female for female. ", ValidateGender); Console.WriteLine("Your gender is {0}.", gender); Console.ReadLine(); } static string GetUserInput(string prompt, Func&lt;string, bool&gt; validator) { Console.Write(prompt); string input = Console.ReadLine(); if (!validator.Invoke(input)) { input = GetUserInput(prompt, validator); //recursion } return input; } static bool ValidateAge(string input) { int age = 0; if (Int32.TryParse(input, out age)) { if (age &lt; 0 || age &gt; 100) { Console.WriteLine("The age you entered was lower than 0 or higher than 100."); return false; } return true; } else { Console.WriteLine("Invalid input format."); return false; } } static bool ValidateName(string input) { bool allLetters = !input.All(char.IsDigit); //ensures no numbers were entered; if (!allLetters) { Console.WriteLine("You cannot have numbers in your name."); } return allLetters; } static bool ValidateGender(string input) { input = input.ToUpper().Trim(); //we don't care about case if (input != "MALE" &amp;&amp; input != "FEMALE") { Console.WriteLine("You must enter in either MALE or FEMALE."); return false; } return true; } }
[removed]
[removed]
[removed]
[removed]
[removed]
[removed]
Would replying “JFGI” have spared anyone’s feelings? He replied to a comment *specifically explaining how the function worked* and didn’t get it. It’s not like an MSDN link would have helped. 
That code is self-documenting. Pointless comment imo. Overdoing the comments does nothing but creates more stuff to maintain. 
For real code i dont verbosely comment shit, but for an interview? i definitely would. there's just no downsides to it. key word: interview its the first time they see your code, make it pretty
I certainly agree, you should prioritise what you're doing in tasks like these. For example, I have seen a lot of candidates program sophisticated GUIs in tasks similar to OP's. As great as it is to see how well your XAML skills are, using two hours to build a rich GUI and neglecting the design of the software is a poor choice. However it doesn't take much time to look over and reflect upon your solution. It can be as simple as Ctrl+e, Ctrl+c in Resharper if you've set it up correctly, and a quick scan of your diffs in git.
The point is the if statement you provided will always be false. Therefore it's useless.
[removed]
Every line read will have one except the last one. Using ReadLine you can't tell if the last one does. To achieve what you want you are going to have to read character by character I think.
Ah, I didn't pay attention to his service call line... even though that's exactly what california quoted =,=
Removed: Rule 5
Solid advice right here... I'm a dev lead and I regularly interview candidates, I completely agree with your point - that employers look for professional coding style, solid scaffolding, familiarity with mainstream tools, etc. It is just as important as correctly solving the problem. In fact, I've started giving very open-ended take-home assignments to do before we have an on-site, just because it gives us better insight into software engineering ability. Coding a correct solution to an algorithm question in a succinct Python script is great, but I want to see how you'd structure an app, how you'd implement a non-trivial feature, etc. The goal is to identify and hire competent software engineers, or at least to recognize upfront how expensive it would be to teach good habits to a candidate. We aren't just looking for smart and talented, we also want skilled, if possible. Source: Interviewed lots of SDE candidates over many years while working for one of the largest software companies. Best of luck with your job search!
When writing comments i try to not use the same word as the property / class etc... E.g. All of the people that work for the company that get paid a salary. This excludes contractors. It helps with common ground, tends to make me think of the edge cases, sometimes helps with better names for the property and reduces the chance of me writing redundant comments.
There is still the deadlock potential, as long as you work with a UIThread(STA like in winforms or wpf) you should not believe that a developer awaited all his async methods using ConfigureAwait(false). Also C# 7.1 (?, async console entry point) does nothing more than simply wrap the async call void Main() =&gt; GeneratedMainAsync().GetAwaiter().GetResult();
 I'm more referring to ASP.Net deadlocks (the main reason for core), which no longer happen: https://stackoverflow.com/questions/13140523/await-vs-task-wait-deadlock @hexterminator: This is by design - it works great for UI apps, but does tend to get in the way for ASP.NET apps. ASP.NET Core has fixed this by removing the SynchronizationContext, so blocking within an ASP.NET Core request no longer deadlocks. – Stephen Cleary Dec 6 '16 at 19:19 
Wow! Looks complicated but promising.I'll be digging into this. Happy holidays.
see my other comment - https://www.reddit.com/r/csharp/comments/7lhi6b/code_critique_wanted_for_console_application/drmqrit/
Would you ask questions like these for an entry level/junior developer position? My degree is in electrical engineering but I find I'm steering more towards software development mainly because I just love coding. So I guess what I'm asking is, what are the sort of expectations that are looked for junior devs/ entry positions?
I work for a company that manufactures parts for large equipment such as CAT. When I was looking at jobs, I believe CAT was looking for electrical engineers who can code. Might be something worth looking at.
Going by their web site, I'm unimpressed. Their sample is unreadable because they're trying to display it in such a narrow column.
We use Serilog, and wire up the static Log.Logger instance first thing. We use that in the startup class Also if I remember correctly (I’m on mobile) if hosting in IIS, you can change a setting in the web.config that will dump errors to a text file. [Edit]: I am not familiar with log4net, but I assume is offers a similar static implementation?
Use the ping class And see this [post](https://stackoverflow.com/questions/8227863/dns-lookup-from-custom-dns-server-in-c-sharp) to find the hostname using dns if you get a response to the pings
Companies are desperate for programmers right now. The company I work for is setting up a program to hire anyone with a STEM degree and train them up in a 21 week program.
&gt;there's just no downsides to it. The downside is more useless clutter to read and scroll through, on top of making it appear like you don't know what should or should not be commented. &gt;For real code i dont verbosely comment shit You say "real code" as if you spend a lot of time intentionally **not** writing your best code. The only time I can see that being acceptable is if you were rapidly developing a prototype and not reviewing your code...except if you were doing that, you wouldn't be writing many comments in the first place. Code in an interview should look just like code you would write if you were an actual employee, which includes not writing useless comments.
Whats the company if you dont mind me asking?
Better answers have been written already, but anyway, you can use a try catch inside the loop, but you have to initialize the variable before it gets to the try catch. 
&gt; ethod is called again which will effectively continue to loop until the validator returns true. &gt; &gt; The advantage of doing it this way is that you now have a pattern to add more questions easily: Hey thank you for taking all that time to answer this in so much detail. I have been looking over it. Unfortunately at the moment it is in-fact too advanced for me as I dont know some of the syntax and terminology. I will study it in detail tonight to see if I can figure it out. I am simply trying to follow along in the c# course that uses c# yellow book. I am currently on one of the labs that the teacher has provided and it states: "The program you have written is nearly perfect, but not quite. If you are feeling really ambitious you can add exception handling to the program, so that the program behaves correctly if the user does something like this: Enter the number of the film you wish to see: bang This problem is caused by the Parse method getting upset and throwing an exception. You can find out how to deal with this by looking at page 65 in the C# Yellow Book. " It tells you how to deal with it by doing a try/catch. I can try it and catch the exception but I cant seem to figure out how to simply throw the loop back at the end user. 
If this is true, why do we hire so many offshore developers who don't follow a single rule or standard?
We don't document our code since our tests tell you what the code is doing already. 
I see, all good points, and I agree with this, as well as all the constructive feedback you gave him. I initially perceived it as that you were critiquing him for not having spent time that he didn't have on polishing the project.
Removed: Rule 4. Maybe you can include some background as to your existing skillset, the types of projects (mobile, ASP.NET, Azure, WPF, etc.) that you're interested in working on.
Never use .Result, instead use await. 1 .Result will block the thread 2 .Result doesn’t unwrap the exception that may have occurred in the async method. More detail here in this StackOverflow answer: https://stackoverflow.com/a/47361205/5953643
Use DateTimeOffset in lieu of DateTime. DateTimeOffset does the same thing as DateTime (despite having a name that sounds like it does something totally different than what it does) and enforces time zones by default. DateTimeOffset helps prevent weird bugs that pop up from users in different time zones and/or forgetting to convert DateTime to UTC.
You have to handle the exception within the loop, like this: do { bool hasInput = false; try { Console.WriteLine("Enter the number of the film you wish to see: "); int filmNo = Int32.Parse(Console.ReadLine()); //the exception will throw on this if the input cannot be converted to int hasInput = true; //will only be called if the above line didn't throw an exception } catch (Exception ex) { Console.WriteLine("Invalid input. You must enter in a number."); } } while (!hasInput)
File.ReadLines returns an IEnumerable of all the contents, and you can then check the last line of it Good thing about ReadLines is you can read the entire file, and despite the size, it won't use a ton of memory. I recently used this to read files that were about 100mb. File.ReadLines, then you can use .Take() to get the last line.
You can send broadcast ping packets, use neighbor discovery, or use zeroconf.
Way I understand it RestSharp is only around for clients that can't support the regular ol' httpClient. They stopped updating it for years so I was surprised to see new versions and also people singing it's praises again. They add new features?
wtf happened here
Some business type thinks it will save money. What really happens is you save money up front and end up spending 10x what you would have spent rewriting, debugging, and standardizing all the cheap code. Not saying there’s not good offshore devs, or terrible onshore devs. Just that you get what you pay for almost every time. 
&gt; RestSharp [RestSharp Wiki: Recommended Usage](https://github.com/restsharp/RestSharp/wiki/Recommended-Usage) has a solid rest resource wrapper and usage example that should make it clear that its comparing apples and oranges mentioning HttpClient.
That very much depends on the website you want to do the action on. As you propably will have to do it through their private or public API. Since most webshops rely on a session, I doubt that it will be practically through a single cmd command or script. You will probably have to use a proper scriptiong/programming language to accomplish your task. The main point here is, you haven't given enough information for any of us to actually give you guidance.
Log4net is also good for this, and it’s thread safe.
I mean this is the author five years ago https://twitter.com/johnsheehan/status/202563696306831360 Sorry, wasn't clear about httpClient. Was really talking about Microsoft.AspNet.WebApi.Client
it says in the code comments to assign the string to whatever he ended up using... ReadLine obviously wasn't going to work, as had ALREADY been pointed out in a prior post. Thus why I added the comment in the code to change it to whatever he ended up using.
http://i.imgur.com/HywxgEV.gif
[removed]
Are you using DI?
Can't tell if irony or just really bad practice.
&gt;return a Stream object You could create a new object that contains a reference to a Stream, a start offset, and a length.
Thanks guys 
There is no built in way to do that. You could create your own `Stream` implementation that wraps a different stream with an offset and length and passes through all read calls, but doing this correctly especially around parallel and async code is probably quite tricky. I don't know if there are any good third party implementations of this concept available.
This would probably be the best solution, but the offset has to be changed/reset a lot, especially if multithreading.
In my interviews I specified that I was not writing a lot of comments, because my code would always be self explanatory. 
&gt; The technology here is MVC5. MVC5 has no type `ApiController`, that's a type of Web API. MVC5 has only `Controller`. Your `RegisterRoutes` method is not registering any Web API route, just MVC routes - which do not match your controller, because you're using `ApiController`. You possibly use the default project template that provides MVC5 and Web API 2. There should be a `RouteConfig` that registers your Web API routes. By default they're registered with a `/api`-prefix. So try accessing `/api/WalletValue/GetAllValues` instead of your URL. &gt; Solution -&gt; Controllers -&gt; WalletValueController Also, Solutions contain Projects. Your controllers are within your Web project.
Same for WPF. 
Can't you just read those specific bytes in another memory stream and return that? Or just return a byte array?
Now theres a project worth contributing to. Are you looking for help? Id be more than happy to help!
If you're trying to script access to a website where you want to act like a human interacting with the HTML elements on the page, Coypu + Selenium. 
Visual Studio's git client has been horrid for years (based on my experience with VS 2015). I prefer to use git bash for command-line access along with GitKraken or Atlassian SourceTree for a GUI variant. Some things are easier to do at the command line (chaining together fetch / merge --ff-only / push to get an updated copy of the development branch). Other things are easier via a GUI (seeing exactly what lines you are changing, picking and choosing which lines / hunks to stage).
WPF with a fully transparent main window. 
Complements VS. For junior developers, it can help them write more idiomatic C# code with more consistent style. It will alert them about bad names (public methods with camelCase, private variables that are PascalCase), does a reasonably good job about suggesting names, does a pretty good job at suggesting code simplification (reducing nesting, inverting if blocks, using LINQ instead of foreach). For performance in VS2015, there are a few cases where it gets tripped up (property-heavy classes, long fluent chains). Not sure yet about VS2017 performance (and I'm considering switching to Rider).
I think VS is a lost cause. It used to be rock solid and an example of prime engineering. I'm sure they are going to be doing minor tweaks to it over time but they seem wholly unwilling to make the hard architectural changes to move the platform forward. There is no legitimate reason it should be churning 1GB of RAM before opening a solution and then running out of RAM upon opening a solution. VS loves to peg your CPU on any random action and crash dozens of times a day. It's never going to improve until they strip out all of the crap, moduralize it so that I don't need 50 things in memory that I don't use and recompile it for 64-bit (which they are afraid to do because their uncontrollable memory leaks would now hog the entire system instead of being "capped" to 32-bit process limit). 
I'm the author... I appreciate the thought, but... This isn't really a project worth contributing to... It's meant to inspire folks to start their own Windows 10 IoT Core platform projects.
In the given examples using .Result, await Task.WhenAll() (or similar await methods) which process all tasks to completion. Once complete, Result is perfectly fine in that state. Exceptions are exposed during the await Task.WhenAll() as well.
if you have to work on a single stream with multiple threads youre probably doing something wrong
There is a very cool streaming class Microsoft.BizTalk.Streaming.VirtualStream that I wish was more widely available... A good explanation from https://mohamadhalabi.com/2013/12/29/biztalk-2013-streaming-support/ &gt; VirtualStream is probably the most used out-of-the box stream because its simple to use. Here, data is still held in memory – as if you are using the in-memory approach – however, this happens only until data size exceeds a configured value; at which stage it is written into a disk file. And from this moment, the disk file becomes the stream source. &gt;You can think of VirtualStream as being somewhat similar to the MemoryStream, however it uses a disk file for data storage instead of memory. &gt;So, the VirtualStream solves the problem of loading large data into memory – in the expense of I/O overhead. Despite this I/O overhead, still its much better than any memory problems. &gt;If implementing custom streams – for whatever reason – is not an option, or at least a very difficult option to implement, then this stream is your safest bet. If aren't able to get your hands on that library or have no interest, then your best bet is to write a stream wrapper like others have suggested.
Good reminder... I generally use DateTimeOffset but since this was throwaway code, I didn't think twice about using DateTime... old habits creep back in when you're splatting out code to demonstrate a different point. 
When you say "fairly new to coding" I hear, "about 1 week cumulative of skill". This might be way beyond your skill level.
Removed: Rule 4.
Or build and deploy automatically from vsts using azure CI and CD
What *exactly* are people *needing* a build system for for C#/.NET projects? It's not like we have to have thousands of variations of compilers, linkers, runtimes, standard libraries etc that you need to setup for cross platform C/C++. If you want variations of a build say you do need some platform specific code in there, use some different build/release configurations *which is already built into* MSBuild, etc, etc.
&gt; 0 down vote favorite wat
I really liked CI Factory and the way tasks were defined with NANT, but honestly it is such a beast for another dev to inherit. There's alot of value in just using the builtin tools. MSBuild has it's weak points, but overall it is perfectly adequate for even complex builds. I'd rather just use MSBuild and know it'll be straightforward for future devs to integrate TFS or whatever CI system they choose to use. Any CI system supporting MS stack is going to at a minimum support MSBuild.
Can't you just have a heder that contains offset and length of each file and just keep an array of this data in your application? 
How about Windows.Forms and System.Drawing? You could render the 3d elements to images.. There are advanced drawing libraries built upon it. Also, lots of tutorials on how to do transparent windows, double buffering, etc. Good luck!
Was gonna post this. Vsts is great 
And if VSTS deployment isn’t enough, OctopusDeploy is fantastic.
There's only so much you can do *easily* with MSBuild configurations. It's important to note that there's a lot more to build automation that just compiling the software. Automated deployment, pinging a webhook, source symbol publishing, NuGet package publishing, integrating with source control to embed things like the git hash, etc. MSBuild is fragile and a pain in the ass to debug. Being able to express your build process in a DSL like C# with Cake or F# with FAKE allows you to make invoking MSBuild and your MSBuild customizations more easily and with added safety since your script has to be compiled (you could even make your build script easily testable). Perhaps the largest benefit, though, is Cake/FAKE provide libraries containing all kinds of helpers so you don't have to keep re-inventing the wheel with XML. [Here is a list of F# FAKE modules](https://fake.build/apidocs/index.html#Fake.Api). Just scroll through that list and ask yourself how you'd accomplish some of those in MSBuild. 
But msbuild is xml! /s ^I ^actually ^love ^msbuild.
How do I use roles with this?
WPF is not portable.
Forms is not portable.
Neither is DirectX or SlimDX, this seems like a moot point. You didn't list portability as a requirement either.
.Net has been bundled with Windows since XP. Vista came with .NET 2.0 and 3.0 (WPF came with 3.0). As long as you target the proper .NET version that comes with whatever windows you're looking at, you'll be fine. Here's a list: https://blogs.msdn.microsoft.com/astebner/2007/03/14/mailbag-what-version-of-the-net-framework-is-included-in-what-version-of-the-os/
Don't forget the .suo file and any user secret files like developer-specific configs.
MSBuild is fine thank you.
true, but why would you want to access one stream in multiple locations in your code?
More Cake for us then...
How do you automate downloading dependencies, preprocessing, and building of a C# .NET Core application across all platforms? (EDIT: Basically, the C# equivalent of Java's Gradle?) I'm interested, if you say there's a working solution that automates this.
thought i was on /r/programmingcirclejerk tbh
Here's a sneak peek of /r/programmingcirclejerk using the [top posts](https://np.reddit.com/r/programmingcirclejerk/top/?sort=top&amp;t=year) of the year! \#1: [ELECTRON](https://i.redd.it/u2197se4gciz.jpg) | [21 comments](https://np.reddit.com/r/programmingcirclejerk/comments/6wepp0/electron/) \#2: [Mathematical notation needs to be disrupted](https://imgur.com/TJ27lSx) | [90 comments](https://np.reddit.com/r/programmingcirclejerk/comments/6zkl20/mathematical_notation_needs_to_be_disrupted/) \#3: [Why not try programming?](http://i.imgur.com/sgsIPHv.jpg) | [31 comments](https://np.reddit.com/r/programmingcirclejerk/comments/6mdj0e/why_not_try_programming/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/6l7i0m/blacklist/)
I use nuget?
And how do you self-host that on a *NIX system?
Fake + TC + OctopusDeploy is my winning combo.
NuGet handles your builds, asset preprocessing, and deployment, too?
Assuming you are on the local subnet you could attempt a ping to 224.0.0.1 the multicast address for all hosts. This is not routable.
it's about deterministic results. for example, we use psake not cake, but the idea is the same: 1) dev checks in to github 2) teamcuty runs psake for build/test/packaging 3) team city creates a on octopus deploy release and pushes bits out there 4) octopus handles environment level config changes 5) if appropriate, octopus pushes out bits on receipt, otherwise it waits for a button push no one gets access to the servers, no one gets to see passwords.
He's saying Nuget handles his dependencies. It's unclear what you mean by "preprocessing". Your comment here is the first time you'vementioned *deployment*. 
You don't host VSTS, it's a cloud service from Microsoft and free for up to 5 users for as many projects as you want. All you need to host is the build agent, which is cross platform.
There's a _lot_ of salt in these comments. It seems many people just plain refuse to learn a new tool, or see the benefit of having a thriving ecosystem of choices when it comes to your build tool of choice. But most importantly, it seems a lot of people refuse to accept that some tools are better for some situations than others. We use VSTS for our builds, but our builds are sometimes made up of a good ol' Visual Studio build, sometimes they're made with "dotnet build" and sometimes we use CAKE. Trying to force one single system for all use cases is a bit like trying to use a hammer for all DIY, regardless if you've got a nail or not. CAKE is great, but so are plenty of other systems. Use what's most sensible for your use case and be happy.
Gonna go ahead and second Octopus here. 
I am searching for the equivalent of gradle in the C# world. Extensible, can invoke preprocessors for assets (e.g. CSS minifiers if I work on a webserver, or image compressors if it's a game), and run the compiler and handle dependencies, can push the build artifacts to S3 or maven, etc and can also invoke deployment via whatever tool I wish. I currently have automated C++ builds and deployment, the same in go, and also in Java/Kotlin, and in JS. I'd love to try and build some services in C#, but I'll obviously want to use the same tooling. So I'll want a system where I define dependencies and build steps in a simple file - basically, the same as I do in Gradle with [this](https://github.com/justjanne/QuasselDroid-ng/blob/kotlin-rewrite/lib/build.gradle.kts), and then I'll want to be able to get my GitLab CI or Jenkins to automatically build, process and deploy.
I can do all that with VSTS, Travis, Jenkins... why do I need a build tool dsl thing for that?
&gt; (e.g. CSS minifiers if I work on a webserver Well that is out of scope of my C#. I use webpack for client side things like that.
Other languages have Gradle, or CMake, or similar tools to handle build, dependencies, and deployment. I'm mostly looking for something in the C# world that I can throw at my Jenkins or Gitlab CI to automatically build C#, as I'm interested in building some services in C# where I today have only used C++, go, JS, JVM languages (Java, Kotlin, etc). So I'm basically searching for the equivalent of what every other language has there, for C#. Not hosted, but open source.
See, if I build a web application in Groovy or Kotlin, I have in my gradle build script a section to automatically invoke a CSS minifier. If I build a web application for .NET Core in C#, I use &lt;insert build tool here&gt;, and do &lt;insert solution here&gt; to automatically process assets, load and update dependencies, and deploy artifacts. Basically, as I'd love to gain proficiency in another language, I'd love to rewrite one of my projects 1:1 in C# (maybe even later rewrite one project as UWP app), but for that I'd require the same tooling I currently get in other languages. And in C# it all seems very lacking for now, although Cake is promising.
As others have said, a custom stream that wraps a file stream is a easy solution, however depending on how serious you want to manage your memory and your portability desires system.io.memoerymappedfiles and the streamed view assessor is the answer. That said working with memory mapped files is much more programmer work than the friendly filestream. 
How is that any different from compiling a MSBuild task?
Take a look at this: https://www.jerriepelser.com/blog/using-roles-with-the-jwt-middleware/, basically it says that roles are automatically added to JWT as a claim. Consequently when you add the user's claims, its roles will be added too, I haven't test this though.
A lot of people refuse to learn MSBuild as well, which renders your point rather moot. People don't want to learn how to use their build system, they just want the damn thing to work and otherwise stay out of the way.
Try Nuke build, it's actually Cake but strongly typed, loving it so far
Or for that matter, why can't the fancy pants DSL simply be hosted in MSBuild? In theory you just need a task that accepts the DSL as a parameter.
The OP gave no indication of a need for portability. In fact, with the exception of one of the possible solutions, everything pointed to a Windows-only environment. Why are you adding requirements?
If you have a stand alone CSS minifier you can invoke it from MSBuild just as easily as from any other build script.
&gt; A lot of people refuse to learn MSBuild as well, which renders your point rather moot. What, you mean this point? &gt; It seems many people just plain refuse to learn a new tool There are people that use CAKE that refuse to learn MSBuild and there are people that use MSBuild that refuse to learn cake. Either way, the point I've made is exactly the same.
Cool, and I can run MSBuild on Linux on my CI server?
Yes. The Mono project wouldn't have omitted such an obvious component of the .NET ecosystem.
&gt; People don't want to learn how to use their build system, they just want the damn thing to work and otherwise stay out of the way. 
depends on your industry really. fin-tech for us. really have to lock down and audit everything, so when auditors come we have a running tally. on open source projects I use appveyor, which does most of that. I also think much of the cruft goes away when you use net cli. it also heavily depends on team size and org size. if you are one team of 5 in a startup it's simpler than 5-10 teams. one of the big things we lime is that itsstamdardized across teams, so moving around is fairly frictionless. 
Okay, let's break this down. &gt; they just want the damn thing to work Elaborate on this further. What does "just work" mean? Just compile your code? Just spit out an executable? What about managing dependencies? What about producing debug symbols or serialisers? What about creating packages? What about performing testing? What about targeting additional platforms? What about including resources? What about transforming intermediate files, such as XML? Where does deployment come into things? How about notifications if any of the above fails? Signing code/packages? Probably more things I've not considered. The problem is that **your** definition of "just work" isn't the same as someone else's. Ultimately there's more to a "build" than just cobbling together your .cs files into a .exe and that's precisely why there's more systems out there than *just* msbuild. What people want is a build system that *meets their needs.* For some that's a simple "build my stuff" that they don't have to think about, for others it's something much more involved. Use the system that *fits your use case* and be glad there are other systems available should your use case differ.
I was trying to get into .NET Core, so, that's not possible without Mono then?
I would be curious to know if there's some (a lot?) Win IoT production deployments or if it's still too early... 
Then change the [Value analysis mode](https://www.jetbrains.com/help/resharper/Reference__Options__Code_Inspection__Settings.html) to Pessimistic. &gt;ReSharper assumes that all nullable entities without an explicit NotNull or ItemNotNull attributes can be null.
parsing several files from a container. example: i made a fileformat that should hold several pngs. now i wanted to display those in winforms, which requires using system.drawing.bitmap to load the png, problem: the png is in the middle of the file, and .nets png loader cant handle that. solution: make a SubStream class that emulates the behaviour of a single file. so it can be useful if you have to deal with functions that expect a EOS after reading some information
I don't know about you, [but I don't want to fuck with this if I don't have to](https://msdn.microsoft.com/en-us/library/t9883dzc.aspx). Not having to worry about getting your shit connected to XML and debugging it and all that other bullshit is a load off my mind. I don't really want to know *how* to pull a hash from git using a custom MSBuild task, I'd much rather just do it.
I asked around BlueMetal, and none of us have heard of any yet, but based on standing-room only attendance for some presentations I do on the topic, C# devs are really interested. Windows 10 IoT Core has been maturing for a few years now, and about ready for prime time. I think skill pool will pressure the business in that direction heavily, soon.
I'm only a hobbyist but I admit that I personally like it. I just wish it doesn't go the same path as NetMF. 🙄 The Gadgeteer plug and play thing was fabulous for prototyping (and having fun!). We'll see in the future if it gains some traction.
Always remember to follow best practices, even in sample code. New developers rely on our examples and will copy/paste our samples into their projects without knowing the consequences. 
System.Drawing renders with the CPU. I don't advise it.
My next rendering project will be in [Veldrid](https://mellinoe.github.io/veldrid-docs/articles/intro.html). Haven't used it yet, but it looks promising.
I don't have any comments on your overall approach, but you should give SharpDX a look. It wraps DirectX more tightly than SlimDX.
Removed: Rule 4.
bash, bat, cmd?
I prefer to use HttpClient over HttpWebRequest. HttpClient has a well documented and easy to use API.
Which namespace and assembly is that in? I have mscorlib, System and System.Web loaded in ILSpy and a search for "HttpClient" (filtered on types) didn't yield any results. EDIT: Found it in System.Net.Http.dll in the System.Net.Http namespace; but it doesn't look like it has an support for CookieContainer :(
Not sure if helpful or not, but please feel free to pillage from my library Watson for server side (https://github.com/jchristn/WatsonWebserver) and RestWrapper for client side (https://github.com/jchristn/restwrapper)
Wow. That's some incredibly quality work. It makes anything I write look like a final for Intro to Computer Programming... I read through some of the code that looks relevant, and I see you decided to go all the way down to layer 4 and handle the byte steams yourself. That begs the question: did you run into the same issue I'm having i.e. you can only request or response, but not both?
Thanks @occamsrzor, what do you mean by "you can only request or response, but not both"? 
What about them?
Using TeamCity and been using it for the last 4 years. It made my and my team's life easier. Especially because we have tens of components to be deployed. I've started creating the new configurations as simple proxy to Cake. Why? Keeping the build script close to the source has its advantages. Devs now can quickly build everything, run tests, even push preview versions of the nuget packages if needed. Also, I could reuse my c# skills to add some bits needed only to us. Could I solve it with custom msbuild tasks? Yes. But msbuild tasks are way more painful to work with compared to a simple cake script.
What I mean is that so far I’ve been unable to find a way to both write a body to the http request steam AND retrieve the response, in the same transaction. If you look at the two fiddle captures I posted, the getrequeststream and the getresponsestream methods invoke two separate transactions. I was wondering if you’d run into the same issue and said screw it, I’ll ope. The underlying tcp session and write or read the http datagram myself?
Came here to write exactly this. *don't do configuration in XML* XML configuration is powerful but not needed. Codefirst is as ppwerful, unless you need to change values on the fly. *Educate your team beyond stackoverflow* Get a good book, like the one suggested above. Push it down the throat of your devs. Concepts like ABC (address, binding, contract) have a perfect concern split. Eventually everything will get easy and clear. If your company can afford it, send your tech lead to Juval Löwy's Architect Master Class. A mind opener that changed how I look at WCF and development in general. But be ready for that person to ask to attend the next course. Once your team got comfortable working in WCF, you will see that you can achieve full flexibility and zero configuration by using service discovery, routing and other niceties that you can only dream when working in REST world. 
Microsoft's [JavaScript Services](https://github.com/aspnet/JavaScriptServices) does [something like that](https://github.com/aspnet/templating/blob/dev/src/Microsoft.DotNet.Web.Spa.ProjectTemplates/ReactRedux-CSharp.csproj.in#L52-L55).
Similar story when I discovered WixSharp after struggling on-and-off trying to figure out raw WiX XMLs for a while. Took all of an hour to get a basic WixSharp installer going. It's amazing.
&gt; but it doesn't look like it has an support for CookieContainer Don't remember if it uses `CookieContainer` or something else but it definitely supports cookies
To some of the other comments: This conversation about whether or not to use a build system (like CAKE) instead of just a build server (like VSTS/Jenkins) occurs so often unfortunately. 1. No one is saying, that you MUST use a build system. Of course it depends on your situation, requirements, team size, and so on. If you're about to write a small console app with barely 100 lines of code in an afternoon, we would be arguing that VSTS is a bit of an overload and using bash/cmd really *does* the job. But why questioning the existing of a whole domain of tools all the time?! This is just as religious as the discussion about languages.... should we stop writing about .NET Core now, just because Java is already cross-platform? It is a different solution to a certain problem. From my experience I can tell, that whenever a build gets more complicated, using a build system scales much better... Otherwise you'll have to start ugly bash/powershell scripts in the build server UI. 2. Let's get on topic about why a build system is a benefit. - Cross-platform and cross-environment. It allows you to run your build everywhere. Even on your local machine. You won't occupy the real build server while troubleshooting. - Debugging the build with only build servers, usually implies that you always commit/push your debug code. Not so with build systems that can run locally. - No vendor lock-in. You want to switch the build server? Good luck with that if you have your whole build orchastration implemented through the UI. - Your build is versioned along with the rest of your code. Even branched! Whenever you modify the build and you're just using a build server, all existing branches would have to be merged from master to get the necessary changes. Otherwise they'd just fail. - A build system is usually much easier to extend and can hide a lot of details. Usually it's the same language that you're familiar with (if picked right). No wondering how to integrate an MSBuild task. No weird scripting with powershell and it's awkward caveats. No checking how a list of items is separated (comma, plus, space whatever). 
Expected something you could use to wrap CLI tools into managed libs. 
[removed]
Was originally the idea, but in reality most tools don't follow predefined standards when it comes to input/output.
Pretty neat project. How would I show our hide the console window when I execute a command? 
Thank you. The child console window is always hidden because the input/output is redirected anyway.
If you notice, most of the code in the post must be significantly refactored in order to be compiled in someone else's project. I did that very intentionally for that reason: It should not be blindly copied/pasted. I will change the post to use DateTimeOffset, however, just to save the world from the unintentional propagation of a grievous non-best practice. ;-)
Upvoted and starred. Great initiative!
Test
I was thinking along the lines of returning a byte array. You have to put it memory at SOME point, why not then?
Then all you have to do is Seek to the right location and Read however many bytes from the stream and the return the array you used.
Maybe try the C# bindings for Cairo? http://www.mono-project.com/docs/tools+libraries/libraries/Mono.Cairo/tutorial/
This is awesome! Great job dude. 
App Insights light up is super easy and captures a good amount of telemetry out of the box with little code. Tons of options with data as well. Don't need to host App in Azure to use either
Hi @occamsrzor, you should definitely be able to write the request body and the receive the response stream using separate statements - at least in C#. If you're doing it in PowerShell, all bets are kinda off (at least for me, because I haven't done it before, so I can't comment on that). You can .GetRequestStream(), .Write(), and then .Close(). Then, once you call .GetResponse(), you can .GetResponseStream(), .Read(), and .Close(). If you're asking something like: "Can I do this?" byte[] responseData = SomeMethod.Send("POST", bytes, "https://foo.com"); Then my answer would be yes, but using higher level libraries/abstractions, like what RestWrapper does. The HttpResponse class contains the response metadata and a byte array containing the HTTP payload data.
Dropbox has a great SDK that uses a lot of c sharp conventions fluently.
Why not make a system that uses something similar to plugins? Basically you download a handler lib for a certain cli app and plug it into this library and then you can interact with it like a managed lib, else fall back to generic cli interaction.
Love the project! Might I recommend, at a minimum, uppercasing the "Cli" in the name, as it currently sounds like something one might buy to spice up the bedroom! 
shoulda been called ClingWrap digging the project
Removed: Rule 3.
What else are you going to execute .NET *Framework* executables with on Linux?
[msbuild](https://github.com/Microsoft/msbuild) also compiles with .NET Core. So, no, you don't need mono for this particular thing, but you'd be insane if you're actively trying to avoid it.
Well, I'd try to avoid using proprietary software, or semi-working reverse engineered copies of it for production use. Currently I use go, Java, C++ and JS, but I'd also like to try out C# for production use. So I'd hope to get similar open source tooling and libraries as available for Java, running on open source runtimes.
Uh, mono is owned by Microsoft and it's under the MIT license. Catch up dude.
I imagine most people who write custom tasks use InlineTasks instead of a full ITask implementation. They're *really* easy to write.
And how does this help me get reliable production builds and deployments on .NET core? Microsoft says to use .NET Core and avoid mono, and you say the opposite, and now I'm completely confused.
Use .NET Core *for your application*. Use mono for your tooling.
Twilio is pretty cool. Search Twilio Quest for a cool way to get started.
I have an update. Result is the same (which isn't a show stopper. There is unique text in the 200 result that I can search for to see if the login is complete or not). I used HttpClient this time, created a handler, added the cookie, build the content and sent it was a SendAsync. The Resulting Task&lt;HttpResponseMessage&gt;...still sees the 200, NOT the 302. It doesn't break anything, but this may just be something no one noticed before... https://i.imgur.com/52SIaxI.png https://i.imgur.com/SZVOxbD.png
This is great! I've been using nCrunch for the past few years and would love to not need it anymore. Does anyone know if this could process unit tests in parallel?
It was a very confusing experience for me, and the whole thing seems pretty broken. For one, I don't see how I can have better control over what tests I'm running. Sometimes it runs the exact tests I want, and sometimes it runs everything else but the tests I want. And a lot of times it just silently crashes. I'm sure it's gonna get better over time, but right now it's not something I'd rely on too much.
This is a nice abstraction that is simpler than the existing API. However, how would you use it to go about reading from stdout from a long running process before the process exits? For example, sometimes you start a process to act as a service that you can offload work to, and you might be sending it new requests and receiving results back, all async. This seems like a useful pattern that could be added.
What is the big picture of what you are trying to accomplish?
A good way to find these things in the future is to do a quick Google site search of MSDN. They have comprehensive documentation for all .NET APIs there.
But why a static?? Now your tests depend on something that's writing to disk. Let me guess, no tests?
&gt; However, how would you use it to go about reading from stdout from a long running process before the process exits? You can supply `IBufferHandler` for handling realtime data. using (var cli = new Cli("some_cli.exe")) { var handler = new BufferHandler( stdOutLine =&gt; Console.WriteLine("StdOut&gt; " + stdOutLine), stdErrLine =&gt; Console.WriteLine("StdErr&gt; " + stdErrLine)); var output = await cli.ExecuteAsync("command --option", bufferHandler: handler); } 
Nothing wrong with that ( ͡° ͜ʖ ͡°)
Iirc unity has c# scripts
This feature still has quite a bit of work before it can compete with the versatility, speed and robustness of Ncrunch. 
Interesting comment. Serilog writes to sinks. So for unit tests we actually have a special sink that writes to our test runner output. In development and QA we primarily use SEQ.
It's an API, not an SDK, but I've been having a lot of fun with BotFramework, Computer Vision API, and LUIS (Language Understanding). MS Cognitive Services in general is doing a lot of really interesting stuff. In 2 afternoons I went from having zero experience with Cognitive Services to writing a chatbot that will tell me if I'm happy or upset based on what I say to it, and an application that can me if an input picture is of a bird, or a banana. First thing Tuesday morning I'll be trying to convince my boss to give me a few days to play around with the Q&amp;A Maker and hook it up to a chatbot.
Lol. MSDN is fairly limited. I prefer to load the assemblies directly out of the GAC into ILSpy, but that only takes us so far. At a point, the specific requirements stop being googleable.
Retrieve the response from the post. Response is a 302 (redirect), but invoking GetResponse actually creates a separate transaction, leading to a 200. This particular web server is configured in such a way as a successful login redirects.
Odd... The documentation does not seem to specify this behavior. Do you have any sample code that can demonstrate the defect? I would like to see it in the wild. https://msdn.microsoft.com/en-us/library/system.net.httpwebrequest.getresponse(v=vs.110).aspx
Yeah, man. Look at the images I posted. It’s in PS, but PS utilizing .Net is so close to C# that it will take minutes to convert. Install fiddler, throw a break point on the GetRequestStream method call, step one and check fiddler. You’ll see the entire transaction (including the 302 response), then step and see the entirely new transaction. I have little doubt that I’m doing *something* wrong, I just want to now *what*. Also, you’ll need an account as HackThisSite.org as this looks to be something due to their configuration (not that they’re doing anything wrong, just different).
I'll take a look tomorrow. Time to sleep today :P.
I noticed sometimes after typing a character or a few, it would cause VS to pause for about ten seconds and not take any more keyboard input until it was done. Probably from running my integration tests as well as my unit tests. :|
It can run unit tests in parallel if the "Run Tests in Parallel" button is selected on the Test Explorer. https://docs.microsoft.com/en-us/visualstudio/test/live-unit-testing
It may help to exclude certain tests from Live Unit Testing such as integration tests if they are slow running or aren't interesting to get immediate feedback on. You can right click on the test method in the code editor to exclude it or add the "SkipWhenLiveUnitTesting" category to the test. https://docs.microsoft.com/en-us/visualstudio/test/live-unit-testing#including-and-excluding-test-projects-and-test-methods
That sounds fun. I’m definitely gonna look into this. 
Lack of type variables or even simple aliasing like typedef is a monstrous omission. And no, "using name = type' is no substitute. 
Oh, thanks. I just gave up because it was a new feature and I had other work to do.
I'm glad those don't exist in C#. It makes code difficult to read and difficult to maintain.
 Type type = typeof(Object) C# does indeed support type variables.
C# cannot be used to make type-safe, native, cross-platform user interfaces currently. I'm really excited about WebAssembly, because it may solve this problem. But for now, those of us who choose to support all major platforms are quite limited in UI options.
Very good point. My hope and expectation is that in a few years everyone will be on core and this concern will go away.
For me the biggest/only reason to use java or another jvm language over c# is the ecosystem. Specifically ML, Spark, and other libraries available to the jvm. I vastly prefer the C# language, but lack of libraries causes many people to use the jvm instead.
Invariably, I work myself into a corner when I go down this rabbit hole. My advice: back up and take a good long look at your application architecture. Can you solve the business problem without dynamic generics? I'm by no means an expert on dynamic programming (more of a newbie), or generics (low-level competency). I could be wrong. But my experience has been that confusion mixing dynamics and generics is a sign of bigger problems.
- Lack of `async` iterators (which are underway!) - Lack of terser type definitions (which are also underway — record types!) - Implicit delegate types in variable declarations (looks like a planned thing!) It’s an exciting time for C#! 
Activator is a critical class! The comment to which I am replying should not be discounted!
What happened? It works great for me and mine...
If you disable tool windows from opening on application start, it will load the solution very quickly. It's already modular. All the things you are complaining about are completely user-configurable. Learn to use the tool before you point out it's flaws. They are there, and there are many. But modularization and load time are not defects of vs2017.
Your going to want to look into LDAP. It's a protocol used for directory authentication. I'm trying to solve the same problem -- if you get it working, please post your solution!
I missed this as well.
It's in version 7 or so, so there is noticeable complexity that is there purely for backwards compatibility, and features that are best not used. A similar language designed today would also have variable that are immutable and not null by default.
You'll have non-nullable reference types by default in C# 8.
These are turmultuous times in the C# web space. ASP.NET MVC5 is slow as sin compared to the coming-of-age ASP.NET Core 2.0. But there is still only a small ecosystem around Core 2.0. I'm not sure that what you will find what you are looking for here.
I know, "but at the cost of complexity to keep existing code working." 
People are still rocking VB6. I think you are underestimating how slow to move some organisations and dev teams are
LOL, not going to happen. We're going to be stuck with this for a very, very long time.
Entity Framework is a great tool -- I use it all the time. That being said, it has one he'll of a learning curve.
&gt; Implicit delegate types in variable declarations Uh, how is that possible? I can think of very few scenarios where you aren't just moving the type declaration to a different place on the same line. (e.g. `var function = (int x) =&gt; x * 2`) 
Yes and no. Even if they created non-nullable references from day 1, it would probably look just as bad as what they have planned. 
Ah, technical correctness -- the best kind of correctness.
Why? I'm not a C+ programmer, but I follow The Old New Thing and most of the examples of them that I've seen were rather abusive. 
Cross-platform UI isn't fun - tons of ongoing effort to make that right, but not mature. Ecosystem. It's not the language of choice for various things I'm interested in (ML, graphics, computational geometry, game engines) and the limited library support shows. All of them have ports of popular alternatives from other languages, but the ports usually don't feel like idiomatic .NET. Performance isn't an issue from my experiences, but ecosystem is.
A decent `select case` statement. We have all this fancy pattern matching shit that most of us will never use, but we still don't have ranges? And what's with having to put `break` in every case? Since there is no fall through, the compiler could easily infer that for us. (Ok, technically `case 1:case 2:case 3:` is fall through, but really that's just a clumsy way of writing `case 1,2,3:` or `case 1 to 3`.) 
Except that everyone would be using it from day 1. I'm thinking more the way that values are immutable unless otherwise explicitly declared multable, [in f#](https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/values/) and [in rust](https://doc.rust-lang.org/book/first-edition/mutability.html). Having that in place from day 1 encourages a different mindset. 
Type aliasing is different than "type UserId = int; type MessageId = int;" making your type system believe UserIds and MessageIds are totally different types. Type aliasing with "using x = y" isn't a substitute; the pain-point for me is working in libraries where it'd be nice to change all Int32s to Int64s for some compiles - I feel it's actually quite often I wish I could write something like "export UserName = string" and pass around UserName types in my code.
Ok, I do agree with on that point. Though I would like to add that *good* C# developers already endeavor to make nulls as rare as possible. They just don't have a good way to communicate that fact.
Have you ever used inheritance? You should use inheritance to do this. It's a one-liner. public class UserId : string {}
Conceptually that seems abusively heavy and smelly - you'd have to introduce implicit operators for casting to/from string to your type. In any case, primitive types in C# should be sealed.
What of record types is missing from C#? I do miss GADT's
Is core still billed as for servers, with framework being for desktop applications? Is that the anticipated long term trajectory?
Not exactly a C# problem, but I really wish `System.Data` would get some attention. Being the foundation of all SQL-style database access, it's got some really glaring limitations. Number 1 one my list is `ValueTask`. That should offer remarkable improvements for iterating over IDataReader, as most of the time `.ReadAsync()` is going to return synchronously. The ability to return `Nullable&lt;Int32&gt;?` and friends instead of making two calls (or one boxed call) would also be a huge win for performance. Of lessor importance is fixing the long outstanding design bugs in DataTable. WTF after all these years does `DataRowCollection` still not implement `IEnumerable&lt;DataRow&gt;`? 
As long as you follow .Net standard, the host framework doesn't matter.
Your edit beat me to it. Alright. "If it had been designed from scratch for that" entails a language that never evolves. No new features ever. Everything done at launch. What you're saying is that the waterfall model, which works so marvelously bad for software dev in general, would somehow be good for language design; that advances in language research should go unappreciated; that changes in hardware architecture should be unsupported... The list goes on. So no, you requirements are unreasonable. You can't reasonable criticize a language for incorporating new features, only how they handle the additions. You're vexed by the complexity introduced by backwards compatibility - would you have preferred every new version was completely incompatible with the previous?
Can you give a tl;dr on ML and spark? What do they do and how important are they?
Linking a mirror (real code's on sourceforge) but without TypeScript-style type aliases (shareable across modules) you get pain like this: https://github.com/skyrpex/clipper/blob/master/C%23/clipper_library/clipper.cs#L62 An entire goddamn library thrown into one monolithic C# file because it'd be too painful to split those 5 defines elsewhere. I feel introducing new classes for everything is often overkill - I oftentimes want to pass around List&lt;Point&gt;, not a Path object, for example. There are times where it's appropriate, sure, but that's not always the case.
Record types are basically a fast way of declaring public, immutable types. For example: public class Location(double latitude, double longitude); This would be translated into a class with... * a constructor * two read-only properties * deconstructor (for pattern matching) * equals and hashcode overides * ToString override (arguable) On the surface it seems pretty easy, but there is a lot of technical issues to deal with. For example, how will serialization work? What if you need validation in the constructor? Can you add attributes to the constructor and/or properties? Should it have default sorting? The longer you go down this road of special cases, the less it makes sense to bother creating the specialized syntax. 
I would love to see functions supported in switch/case. `case foo &lt; 0:` etc
You can't inherit from `string`, `int`, etc. You can create your own wrapper type, but it is tedious and annoying. 
 &gt; You can't reasonable criticize a language for incorporating new features, C# has aged well, but it has aged. You do compare languages, and you do compare [a language launched in 2003](https://en.wikipedia.org/wiki/C_Sharp_(programming_language)#Versions) with much newer ones that have leared lessons in the intervening time.
&gt; primitive types in C# should be sealed I think you mean "are sealed". In fact, all value types are sealed, not just primitives.
Core is currently being advertised by Microsoft solely for "high performance web servers". (This is as of a couple weeks ago when they annouced their Windows migrations pack for .NET Core.) Long term its hard to say what they'll do with it. But right now the sweet spot is running ASP.NET MVC/WebAPI without paying for Windows Server licenses. 
That's the direction I'm going with my open source projects. I've already dropped explicit support for UWP and .NET Core packages in favor of just classic .NET and .NET Standard.
Oh that's nothing. A simple copy-and-paste job will handle it just fine. In fact, I'm actually doing that in my SQLite ORM because I need to support both the official and Microsoft version of the .NET drivers. (Note: the Microsoft version sucks balls. I've lost count of the number of bugs I've submitted against it.) That said, I would love it if we could combine generics with primitives (e.g. int32, int64). 
Ok, I was reminded of an old one. We still can't write this: T Add&lt;T&gt;(T a, T b) { return a + b; } 
That's fine so long as you actually do it from day one. I'm working on a project now where they plan on swapping out the repository implementations later. I can clearly see that the API is way too bound to EF to make that possible, yet we're still vainly maintaining a set of shadow interfaces.
For a parallel to Spark there is [NancyFX](nancyfx.org).
The covariant arrays annoy me a lot. I wonder if a breaking change to fix this will cause significant real world damage
"having to put break in every case" was I think backward compatibility (i.e. familiarity) in in C# version 1.0 with other languages, mainly C and Java. lack of "a decent select case statement" is I think backwards compatibility on C# v7 with previous version of C#: can't introduce a new keyword, can't make the existing "select" statements stop working.
Outside of interop with things that aren't written in C#, when would you decide that an array is the right choice, over `List&lt;T&gt;` ?
I don't think that's a concern. Dropping the need for `break` wouldn't affect backwards compatibility. The rule would still be "fall through empty case blocks, don't fall through non-empty case blocks". Likewise, adding a `to` keyword would be safe because it only affects the pattern `case [constant] to [constant]:` which currently isn't valid syntax. (Contextual keywords have long been used in C# to maintain backwards compatibility.) For unbounded ranges VB uses `Case Is [operator] [constant]`. The C# equivalent, `case is &gt; 10:`, should be safe as well because `is` is already a keyword. But I don't know pattern matching rules well enough to say that with certainty. 
Honestly, I'm really surprised that they carried that over into .NET Core.
In my (admittedly arrogant) opinion, arrays should never be part of a public API. The .NET Framework Design Guidelines don't even allow `List&lt;T&gt;`, saying instead that you should use a strongly named collection such as `OrderCollection`. (I follow this for open source projects, but not code I write for internal use.)
From my personal experiences: * Trying to deal with large object graphs without causing performance issues * No auto vectorization (system.numerics is 'ok') * Switch statements and enums (weak compared to some other languages) There aren't many downsides to c# as a language. Most of the practical complaints are about the availability of libraries.
Ah, right, they are struts, not classes. 
Yep. That said, I would love to be able to inherit the functionality even if I didn't get polymorphism out of the deal.
Thank you for the explaination.
You have to assign a new variable but you can now do things like this switch (foo) { case var f when(foo &lt; 0): break; case var f when (foo &gt; 0): break; case var f when (foo == 0): break; } 
You're welcome. Here's some more info in case you are interested: http://roslyn.codeplex.com/discussions/543522
I don't care about fairness. Your choice is as follows: new features and back compat; new features but breaks compat; language that never changes and switching when the it gets a little behind.
Oh nice. Kinda like exception filters. The variable declaration is goofy but maybe they'll change it in the future.
That happens to me even without live testing turned on. So it may just be conincidence. 
They finally put in a button for that? About damn time. I was getting really tired of looking up the syntax needed to hack the test settings XML file to turn on parallel test most. (It's no wonder MSTest has such a bad reputation when all the good stuff is hidden.)
It's so obnoxious I just use Entity for almost everything. I've had only a couple of instances where it's quirks and speed were an issue. 
 T Add&lt;T&gt;(T a, T b) where T : Monoid =&gt; a + b;
.net core is just a runtime implementation and a new set of libraries. No language changes per se. 
I'm not sure that's entirely true. .NET Core doesn't support COM and changes the way to reflection API works. I'd expect that to have a knock-on effect on C#'s `dynamic` keyword and various interop scenarios.
Not a jab here, but it sounds like you just want C# to be Java, and you like Java. C# has a big ecosystem, it's just a different ecosystem than Java.
/shrug I agree with you though in the meantime.. dataTable.Rows.AsRows() 
Proposed for C# 7.3: [“ranges can be used in patterns to produce simple range checks.”](https://github.com/dotnet/roslyn/blob/features/range/docs/features/range.md)
&gt; Type type = typeof(Object); // Type variable declaration Seriously? A variable of type "Type" is not a type variable. And as I said, "no, "using name = type' is no substitute".
I never understood that. When you use a special class to represent something else, you have a few choices: implement all methods yourself forward calling into a private member that has your data which limits your class to just the methods you felt like implementing at the time, inherit from a type that represents your structure which people can then use the public methods of tying their use of your library to that other class anyway, or implement interfaces explicitly once again writing the code to call into whatever data structure you’ve chosen. If someone chooses to write their own methods, this will likely result in the class not being usable in obvious ways - like “collection” classes that don’t work well with foreach loops because they didn’t implement generic iterators at the time leaving you to discover which type to cast to. If you inherit from a generic list, there’s really no benefit over just returning the generic list type directly since any changes you might in the future would likely break the api anyway. If you implement interfaces, why not just return the interface that is most obvious (generic versions of ICollection or IEnumerable or IQueryable for instance). I’m open to being convinced otherwise. Perhaps I’m just too annoyed with working with older libraries that would be much more flexible if they didn’t specialize everything. I personally tend toward returning standard interfaces - IEnumerable if it’s an enumerator collection, IQueryable if it is deferred execution data, IDictionary for key/value Data, and ICollection if it’s obvious the consumer will want to index into the data rather than iterate it all. It’s less implementation and ceremony code that has to be written and maintained for a possible future state where I decide my base collection type was so wrong that I need to use something that is not compliant with the interface which seems unlikely. So I guess - what is the case where creating a special Collection class is better than using a generic collection type interface that justifies the effort / makes this route the default choice instead of specialty case?
It was actually not done for backwards compatibility, but the reverse. Microsoft worked out that unintended implicit fall through was a huge source of bugs so they explicitly set C# up from the very beginning to prevent this kind of bug. Requiring the break statement as opposed to just requiring explicit fall through was for principal of least surprise.
That seems arbitrary and pointless. Why even introduce generics if you don’t use them in such cases? Also, the .NET Framework is arguably a public facing API, so they should not have used generics?
Yeah, but as an afterthought, it as an integrated, planned out design, and it shows, unfortunately. 
That’s absolutely besides the point. 
The reflection API changed because it had to be cross platform. That's probably also why COM isn't supported. In any case, it must have been the BCL that wrapped Win32 APIs, not C# in itself. 
I'm glad to see there's at least one good programmer in the bunch here. The downvotes on my post and on yours are very telling.
I'm away from pc, but can't you use object for this, namely Integer and String?
Yeah, Microsoft keeps adding more and more syntax sugar instead of doing something with generics. We should be able to use templates close to C++ by now
Why are you saying that enums are weak in comparison to other languages? I needed anything more from them apart from overloading == 
You still use generics: public class OrderCollection : Collection&lt;Order&gt; The reason for strongly named collections is that you can later add new functionality. For example, let's say that your application is suffering from a performance hit because you are spending a lot of time recalculating the total number of orders. You can add an `OrderCollection.Total` property that caches the total, something that's hard or impossible to do with extension methods. The reason you inherit from `Collection&lt;T&gt;` is that it gives you the ability to intercept methods such as `Add` and `Remove`, which would be necessary in our caching example. For non-public APIs, backwards compatibility isn't important so feel free to use the better performing `List&lt;T&gt;`.
&gt; &gt; &gt; If you inherit from a generic list, there’s really no benefit over just returning the generic list type directly since any changes you might in the future would likely break the api anyway. Sure you can. If you have an `OrderCollection` class you can freely add a `OrderCollection.Total` property without breaking backwards compatibility. That's really the whole point of the advice. It gives you the freedom to extend the collection property in ways you hadn't anticipated. Granted, some of that is now handled by extension methods. But extension methods are very limited in what they can do, especially when it comes to storing or monitoring state.
I for now hope the opposite. In my opinion right now .net core is not mature enough yet and I think it will be the case for a long time. The reasons are: 1. You cannot build WPF application 2. WinAPI support is almost non existent 3. Missing F# ( I don't know what is the state of that - maybe there is already support for this language) 4. Don't event get me started on Entity Framework Those things might be built into Core but it will take a good few years. 
That's not even remotely true, and in fact is the opposite of reality. And C# has the grossly hobbled using name = type, so your alleged readability issues exist anyway ... not that giving things the right names makes code unreadable. The lack of type declarations actually encourages excessive use of var.
&gt; Perhaps I’m just too annoyed with working with older libraries that would be much more flexible if they didn’t specialize everything. You're probably annoyed because they are specializing the wrong thing. Being very specific with the return type offers a lot of advantages in both performance and future extensibility. But, the opposite is often true of parameters. Your parameters should always accept the smallest interface necessary to accomplish the goal. 
&gt; "export UserName = string" and pass around UserName types in my code. What you want is public type UserName = string; Well-designed languages have first class type variables. Even if people don't know that or don't agree, 4 downvotes on my post is abusive. As a professional C# programmer, I've never had need of this C# reddit, and won't miss it. 
&gt; I don’t think I’ve ever seen it done but it’s possible it happened without me even noticing which would kind of be the point. One of my goals this year is to write more about API evolution on the .NET framework. If that happens, I'll definitely be looking for examples of where they actually did extend a strongly named collection class. 
I realized after I commented and made some edits to that effect. You might have already been replying. I nearly deleted in shame but thought maybe there are others with the same initial opinion I had and seeing this progression might help them make the same leap. Thanks for being cool about it!
Arrays are A LOT faster. If you already know the number of items, use an array. They probably use less memory too.
&gt; excessive use of var I understand each word individually, but not the phrase. I don't even know what "excessive use of var" would look like, as from my point of view explicit type declarations only exist for local variables because older compilers were stupid. It's like manually laying out fields in a stuct. Once we needed to for every data type, but then compilers got better.
Martin is an ideological polemicist, so of course his examples will be of exaggerated abuse. But I personally have over 30 years of experience with non-abusive type definitions in C, C++, Scala, and other languages. Edit: Oops, I got my bloggers mixed up. Raymond is definitely not an ideological polemicist. I guess "were rather abusive" is just grauenwolf's personal opinion, which could reflect lack of experience with all the advantages of type abstraction. &gt; Oh that's nothing. A simple copy-and-paste job will handle it just fine. Have you ever heard of DRY? And how is proper encapsulation of a type definition *more* abusive than ad hoc cutting and pasting a type alias?
The problem is that you completely failed to explain what it is you are asking for. Ask any C# or VB programmer what a "type variable" is and they are going to either answer "a variable of type System.Type" or "don't you mean type argument?". And in Java you would be completely wrong, &gt; A type variable is an unqualified identifier used as a type in class, interface, method, and constructor bodies. &gt; &gt; A type variable is declared as a type parameter of a generic class declaration (§8.1.2), generic interface declaration (§9.1.2), generic method declaration (§8.4.4), or generic constructor declaration (§8.8.4). Hell, doing a websearch for "what is a type varaible" turned up nothing of use. It's only by chance that I remembered a recent "The Old New Thing" post about `typedef` in C++, which I assume is actually what you mean. 
&gt; WinAPI support is almost non existent They are starting to address that. https://www.infoq.com/news/2017/12/Windows-Compatibility-Pack
I'm not saying I wouldn't use it. Just that I don't *need* it.
I just started using C#. And what I find really annoying and confusing is comparing objects, which is really fundamental for programming. When am I doing reference comparison? By default reference comparison for classes, object comparison for structs. But these can be changed, how do I know when it does what? What if I want to do object comparison? - If I own the class I can overload operator== and override Equals, why both? But you don't have to, so now you have different equal comparisons, which does what? Then I also need to implement GetHashCode, how? I don't know anything about good hashes. If you overload operator==, you also need to overload!=, why? - If I don't own the class, you can implement your own comparison function and start comparing public field and properties by hand (same for overload/overriding). And then you can do the same for the complex types your class has. And that for a language with a framework that has serialisation. How do you compare objects you deserialise? The same holds for copying objects. Why isn't there a default implementation and the option to override or delete a equals/copy method? What I am missing from the language is a proper "const". - Compile time constants are limited. - Const references are not possible. Everything you return you automatically loose ownership of. If you want return a constant reference you need to create an interface with all the constant functions, seperated from the class. If you don't own the class, you can't implement the interface. What I also found strange was the willingly putting a bug in C#7 if(int.TryParse(out int n)) { // use of n is no problem } // But you can also use n here They said that they analysed how many times they needed this bug in the roslyn compiler to replace the old way with this and it was 60%. So instead of implementing it the correct way and use this feature in 40% of the use cases, which is still a lot. They deliberatly put in this bug. Same for if (a is B b) { // use b } // b can be use here, although it does give an error that it is unassigned. What would be cool to have are GADTs.
I don't want something quite as insane as C++ templates, but yea... something better than T4 would be really nice. 
No problem. I'm here to learn, to teach, to bitch about the excesses of ORMs and unnecessary frameworks, and to preach the gospel of The Framework Design Guidelines.
So you do things like var i = 5; ? I myself use var extensively, but wouldn't go that far. Many programmers think that var (or auto in C++) should never be used, or only used if absolutely necessary ... there are lengthy style wars on this issue. My comment about excessive use was a nod to that camp. You don't have to agree with their arguments (I don't), but if you can't even conceive of them then you're not the sort of person I care to converse with. Ta ta.
We don't *need* compilers, or even assemblers ... we *could* write programs in binary. Of course that has its disadvantages, just as the lack of type variables does. Type variables makes it possible to write considerably better code ... more readable, more maintainable, more refactorable, more extendable, less buggy. I have plenty of experience with this, but of course I'm not going to demonstrate or prove it in comments here.
Yep. It actually helps me with code reviews because if I see an explicit type declaration I know that something tricky is going on such as conditional assignment or the need to access a specific interface. Plus it lines up all the variables nicely with the need for manual formatting. 
Most people around here would say that I'm obsessed with performance, and even I would call using naked arrays a premature optimization most of the time. The safety of `ImmutableArray&lt;T&gt;` is worth the small performance hit and the convenience of a resizable list is hard to argue with. Especially for properties, where you really don't want to expose a public setter.
&gt; And what I find really annoying and confusing is comparing objects, &gt; which is really fundamental for programming. I have to agree. I really wish that they had followed the VB model of using different operators for value equality (`=`) and reference equality (`Is`) instead of overloading the concept.
&gt; Const references are not possible. They are working on that, starting with passing value types by reference while not allowing modifications.
&gt; The problem is that you completely failed to explain what it is you are asking for. No, it isn't. My mention of type aliases and "using name = type" made it obvious, and quite a few people here had no problem understanding what I meant. &gt; And in Java you would be completely wrong, That statement is incoherent. I'm not "in Java", and generic type variables are a subset of type variables generally, they aren't "completely" different. A type variable is simply a name that represents a type, rather than a value or function or some other sort of thing. There's a broad literature on the concept of types, type systems, etc. None of it refers to the C# Type class (which is itself a type, but that's not relevant). This is tiresome and I'm done here. Goodnight.
I would say when you don't want items to be added or removed. Using an array says you can change items in the collection but the size shouldn't change.
You might not be "in Java", but the vast majority of people here only know a combination of C#, Java, JavaScript, and SQL. So if you use terms that aren't used by those languages, especially terms that aren't easily searchable, people are going to misunderstand you. Your ego says that you were perfectly clear and the downvotes were just people being rude, but I'm telling you that's not the case. 
Sounds a bit like the proposed [Shapes](https://github.com/dotnet/csharplang/issues/164)?
Oh, nice.
That's one possible solution. Another is to simply allow interfaces to contain static methods, including operator overloads. This would require a change to the CLR and maybe CTS. A third would be to allow explicit listing of methods/operator needed by generic constraints. But that would require changing how the JIT works for generics.
&gt; You have to assign a new variable Can't you now use the underscore to tell it you don't want a variable?
They, IMHO, could have found a better solution here. Maybe a non-default switch variant that allows the fallthrough when you have a legitimate need for it.
Let me add: - The Int32 return count from exec that leaves no good solution for working with big data where operations routinely handled counts that overflow an Int32 
I agree, but a lot of times in performance intensive apps it makes a big difference. Most of the times you can get away with a List, but I had multiple times where they improved performance by a lot. Also I see that people tend to just use List or even worse IList and IEnumerable and forget that other collection types exist... the face of my colleagues (senior devs) when I fixed their performance issues by using dictionaries and linked lists at an old project was funny as hell, but also let me worried about the crappy code that most people is writing. And simplifying the framework will not help.
&gt; Your ego says that you were perfectly clear and the downvotes were just people being rude, but I'm telling you that's not the case. You are rude and untruthful.
Disspapointed to see it locked behind Enterprise version :(
You almost never actually do though.
&gt; DB admin changes varchar to bigint because all the select statements won't care anyway...
You're right. I forgot.
All reference types are nullable. I didn't realise how much I disliked this until I started using TypeScript which lets you turn them off.
&gt; What if I want to do object comparison? - If I own the class I can overload operator== and override Equals, why both? Precisely to avoid what you describe in the previous paragraph :) if you override both, the user doesn't need to think which one to call and both will do what the user expected :) &amp;nbsp; As for overriding GetHashCode(), the reason for that is so that your objects can be added and removed from a hashmaps/hashsets/dictionaries :) &amp;nbsp; None of this is a weak point of c# and infact, many other languages work this way (java in particular). C# does it this way because you don't want to have to implement everything all the time. Overriding equals, ==, GetHashCode and possibly other stuff is only required if you are exposing that object to the public because you don't know how that object will be used. &amp;nbsp; If the object isn't public, you can do what you want. If you only need Equals() and never use == then by all means just override Equals(). If you take a look at the public objects in the .Net API, you will see that they all override ==, Equals() and GetHashCode() &amp;nbsp; What IS a weak point in my opinion is that implementing a proper Equals() and GetHashCode() is trivial for the common case and the compiler should generate the needed code when compiling. That way, you would only need to override when really needed to. But I'm sure people would then complain about performance (and rightly so) because you would be adding code to a object that never gets used... edit: formatting
They way Java handles enums is superior. In Java enums are classes that only have named instances instead of just nice names for int constants.
F# does it by assigning the type of the first caller that will compile
That's what .net core and electron is for 😆
IEnumerable vs IList vs ICollection vs List vs Array Did you know that List and Array both implement IList? Most people don't. There's lots of stuff in the collections code that should be cleaned up for simplicity.
You have probably noticed my vendetta against the repository pattern on top of EF on this very subreddit :) Yes, what they are doing is wrong and pointless, it doesn't even help much with unit testing since you can mock the data context itself and run the LINQ queries over lists.
There are a lot of APIs that sadly accept arrays. However now that you point them out they seem to be arrays of ints or bytes and these I think are not affected by the covariance issue performance wise. Are they?
Name includes a symbol. search engines cant handle it :)
&gt; (Ok, technically case 1:case 2:case 3: is fall through, but really that's just a clumsy way of writing case 1,2,3: or case 1 to 3.) According to the specification, that's not actually fall-through. The switch label's and section's grammer is defined(page 240) as: switch-section: switch-labels statement-list switch-labels: switch-label switch-labels switch-label And fall-through is defined as reaching the end of a `statement-list`: &gt;If the end point of the statement list of a switch section is reachable, a compile-time error occurs. This is known as the “no fall through” rule. So your example would be defined as a single section with multiple labels, rather than as you said, which is multiple sections with one statement list. But I agree, you shouldn't need to but `break` there.
i agree on all points except for game engines: it’s the language of choice for Unity and it’s supported by Godot
Not a professional here, but for me the big disadvantage is no scalable machine learning ala tensorflow? Why the fuck is cntk not made for c#? 
Yeah when I think F# I don't necessarily think "pit of success."
&gt; Precisely to avoid what you describe in the previous paragraph :) if you override both, the user doesn't need to think which one to call and both will do what the user expected :) So why do we then even have Equals and not just operator==? &gt; As for overriding GetHashCode(), the reason for that is so that your objects can be added and removed from a hashmaps/hashsets/dictionaries :) But how should a programmer know how to implement a hashing algorithm? And what is the best way if you want to use object comparison?
Unfortunately I don't have much time to give a proper answer, but I'll give you a tip. Think of the console as a grid of characters that has X rows by Y columns. Then use [Console.SetCursorPosition(Int32, Int32)](https://docs.microsoft.com/en-us/dotnet/api/system.console.setcursorposition?view=netframework-4.7) to set where you want to write your buffer. Oh and create a auxiliary method that will write to a given position using the above method and up to a certain length so as not to override the areas.
Everything can be `null` by default, when in fact 99% of the time it shouldn't be. I've largely switched to TypeScript at this point for this reason.
Because they are used for diferent things. Equals() compares objects while == compares references (memory positions +-). but people are lazy and writing == is easier then writing .Equals(bla) all the time so the C# team decided to add that syntatic sugar. Also, C/C++ developers are used to the syntax so it helps them. What you need to remember is this, if you are using someone elses code, using == or Equals() on an object must return the same result, so that you can use which ever one you prefer. If you are buildiing a framework, you must unsure that == and Equals() of your PUBLIC objects return the same value if they are equal (but not necessarely the same object) because you can't know how your objects will be used. Anything else is a bug and must be fixed by someone. &gt; But how should a programmer know how to implement a hashing algorithm? Well that will depend on the usage you want so there isn't a clear answer. However someone came up with an algorithm that is good for a lot of main stream cases. Take a look [here](https://stackoverflow.com/a/113600)
While I understand your pessimism, public library devs have by-and-large embraced Standard now that 2.0 has left few holes unfilled. I can't think of a library I/we use that hasn't at least *discussed* how/when to port to Standard, even if only via an opened issue. edit: I just realized your comment was maybe about Core specifically and not Standard.
I hate how C# is so good that Java fankids block their ears and go "LALALA" whenever I explain the pros of C# to them. Maybe that's a good thing?
Unless I’ve missed something, F# is supported to compile/run under .NET core. I’m not sure what the tooling/IDE landscape is like but AFAIK you can have F# .NET core projects. I highly doubt WPF will ever make it in, a lot of work would need to be done to supply nativeish OS X and Linux components. Entity Framework Core is a thing, what do you find wrong with it?
Then you're missing out. It's not a perfect language, but it's really damn good
Yes for custom web controls you'll have to wire up the handlers yourself. For Page_Load [autoeventwireup](https://support.microsoft.com/en-us/help/324151/how-to-use-the-autoeventwireup-attribute-in-an-asp-net-web-form-by-usi) takes care of it.
C# and TypeScript are used for completely different things though. Edit: Also, only reference/nullable types can be null.
This is probably a dumb question, but... yeah. I've been interested in learning F# for a while, but it's so drastically different from OOP which I'm used to. Do libraries like [Discord.Net](https://github.com/RogueException/Discord.Net) work with F# if they work with C#? As in, if it targets .NET Standard 2.0 can I use it with F#?
The problem in .NET Core is that it doesn't support everything that I got used to in .NET Framework. Regarding F#: it seems that F# is supported already (good!). Regarding WPF: I totally agree. This is my personal preference but UWP is not thing that I like hence I will stay with WPF. EF Core: They are still behind Entity Framework. I'm still waiting for [Lazy loading!](https://github.com/aspnet/EntityFrameworkCore/issues/3797), [DateTime arithmetic operations](https://github.com/aspnet/EntityFrameworkCore/issues/6025), [many-to-many relationship](https://github.com/aspnet/EntityFrameworkCore/issues/1368) and those two would be cool but not essential : [one](https://github.com/aspnet/EntityFrameworkCore/issues/245) [two](https://github.com/aspnet/EntityFrameworkCore/issues/1590) I also was waiting for [this](https://github.com/aspnet/EntityFrameworkCore/issues/5595) ~~but it seems supported now.~~ and it will be supported in 2.1 There was a problem with GroupBy but I can't find issue related to that. The thing is, people were talking of how awesome it will be to release project to public because that will mean that features will be implemented faster. This is not the case.
Standalone NET Core apps don't seem to get code stripping resulting in 60mb of dlls for a 100kb app.
No enum generic constraints.
Actually I hate java.
Pop a `Span&lt;T&gt;` over an array; and its non-covariant via the Span
["Introducing Nullable Reference Types in C#"](https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/)
They're machine learning libraries. ML implements a lot of different machine learning algorithms. There are libraries similar to Java's ML in many languages, such as scikit-learn in Python. Spark also has implementations of many machine learning algorithms, but is aimed at making it easier to deal with large volumes of data. For example, Spark makes it much easier to distribute computations across a cluster of computers, or to deal with datasets that are too large to fit into your computer's RAM. Spark has support for a number of languages, including Scala, Java, Python, and R. It is written in Scala, which is a JVM language. They are important if you are doing machine learning and data analysis. Spark in particular is very important if you are dealing with a lot of data, i.e. "big data". 
Fall through is really what separates a switch from a block of if statements though. There's also crazy shit like Duff's Device that you can't build without fall through (not that you really should be building those sorts of crazy things though). 
Yeah, I haven’t found anything missing from framework -&gt; core, but then again I use .NET on Windows in my day job so don’t have much experience with all the new build targets. 
I don’t like how you can’t use a foreach loop to remove entities from a table
&gt; We have all this fancy pattern matching shit that most of us will never use I've found lots of immediate uses for that "fancy pattern matching shit" and was immediately able to back out a custom TypeSwitch implementation plus some uglier stuff switching on type names. 
Yea, I can see that going from inconsequential to really fucking important overnight.
Not an issue with C# as much as Visual Studio- but I'd still like to see proper designer support for abstract and generic forms.
Yes, I can see most libraries eventually moving to .NET standard. But application code is slow to change. As another person mentioned, VB 6 apps are still being actively maintained.
Interesting. Thank you for the correction.
Yeah, that makes sense, I agree.
A life tip for you: You don't get to decide if the other person understands you or not. That's slowly their decision.
Oh god, I hate it when people return IEnumerable and think that somehow makes the collection read-only. Especially when were using WPF, which only looks at an object's real type.
Yes, you can use any .NET code with F#. Bear in mind it will be written in C# and designed for that, so it's going to have a very weird API (from the F#/Functional standpoint). I also have had the misfortune of seeing the code using Discord.NET and I've heard countless stories about how painful it is to work with. It's generally not a very well designed library, has a number of odd conventions, has some truly toxic "developers" working on it... you might not have a fun time working with it from F# or even C#.
What about case statements for types? public void Blah(Object something) { switch(typeof(something)) { case typeof(TypeOne): break; case typeof(TypeTwo): break; } }
They implemented this. Lookup pattern matching. switch (f) { case int _: break; case long _: break; case short _: break; case string _: break; case Exception _: break; } 
Don't you miss lazy loading ? I hate to use 'Include' everywhere :/
There's this syntax goto case 1;
No not nullable reference types
I've never had an issue working with it, though I do feel sometimes that it's a bit over-engineered. Do you have any recommendations for a library that would be good to mess around with? I've had a project in the back of my mind for a while now that would involve a really simple API in ASP.NET Core, do you know if that's good for F#?
Most of that "build system" stuff seems like failed attempts to simplify shell scripts. I would use MSBuild to build executables and for everything else would go with shell scripts. 
Do you mean this? https://github.com/NancyFx/Nancy If so, that isn't a parallel to Spark. Spark=distributed computations on big data. NancyFX=Http api framework Not related at all.
In .NET Framework. Old APIs that have not been updated and might never be fully updated. So many wrappers and extra patterns just for decent atomic test-ability.
If we're taking requests, better Roslyn documentation and some fixes for marshalling's disdain for anything related to a generic class would be great :D. After 18 years maybe I'm too used to c# to see any real flaws. I love the language, and as an r&amp;d programmer it's served me very well.
FYI this is [on its way to being fixed](https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/).
I wish there was a good, simple wat to do composition over inheritance. Also union types would be nice.
That's not a fix. It's just a laughable PR. You will still be able to assign nulls to "non-nullable" references, because it will be just a compiler warning. In the corporate enviromnent solution can have thousands of warnings and nobody cares. The proper fix wouldn't let you compile a code with uninitialized variables and there would be no null keyword. Of course that would break the backwards compatibility and that's why MS won't do it.
So in this post I am mostly banging on about the accumulated complexity in C#. Basically, there is a limit to how much better you can make a programming language purely by adding on to it. There are a huge number of ways that e.g. a collection of orders can be typed: `List&lt;Order&gt;, IList&lt;Order&gt;, ICollection&lt;Order&gt;, IReadOnlyList&lt;Order&gt;, IReadOnlyCollection&lt;Order&gt;, IEnumerable&lt;Order&gt;` (and more, today I learned about `ImmutableArray`), and the non-generic versions: `IList, ICollection, IEnumerable`. And then there are arrays as well. I'd like to see some strongly typed immutable read-only base class / base interface that can have a high-performance implementation (e.g. backed by an array). But try adding that into the language and framework now. Some of the new `Span` classes might fit the bill in some cases, but the downside is that we're adding even more ways to do it. Explaining all this to a clever but inexperienced junior C# programmer is not fun.
Shell scripts aren't cross platform. There is no single panacea for this problem.
Yeah, I have been using mainly .net for more than 10 years, when I have to explain to a newbie that there are 20 ways of doing something I can read their mind thinking that this is crazy. But for me feels normal because I remember how things have been added... 
&gt; The face of my colleagues (senior devs) when I fixed their performance issues by using dictionaries and linked lists So the catch with defaulting to list types is that the time to find an item is very small when you test with 1 or a few items, but can kill perf when there are lots of items. That's why you would switch to a Dictionary, with linear time to find an element by key. What is the case where you would prefer a linked list? 
Is there actual a solid reason why C# switch cases require 'break' statements outside of future proofing code for if fall-through switch cases are ever added?
For insertion speed. We had to add a lot of items and later read them in order, not sorting or random access at any point. In those cases is a lot faster. But is a very specific case...
&gt; when I have to explain to a newbie that there are 20 ways of doing something And we mentally discard 15 of those ways right away e.g the non-generic list types. You have to explain that sometimes.
I see, that makes sense. It seems like a very specific case. Most times the list is built up once, and then searched or accessed by key many times. Hence, use a dictionary.
Question. Normally, unless you wrap each case's code block in brackets, the variable definitions are in scope of each other, but in your example, I would expect a multiple declaration error of the 'f' variable. Does that not happen when defined on the 'case' line.
Do you mean "what libraries should i use", or "which way is preferred for implementing it yourself" 
Not everything can be sandboxed and confined to such restrictive permissions.
Spark is like a better/faster Hadoop for distributing computations (ie map/reduce +more) on large amounts of data across multiple machines. If you have some computation to perform on Tera/Peta-bytes of data you can run it in parallel on a large (100+) cluster of machines. ML = machine learning.
&gt; avoid arrays altogether and use lists Except if you need to do anything other than just move heap objects around. If I want to do some binary or stream processing you absolutely need arrays for speed.
I am told that `Span&lt;T&gt;` and friends are going to be the new thing for this.
Nobody's done a port or a similar framework/library for C# machine learning yet? Or are they just not polished?
Lack of `#define` as you would use it in C is weird. Instead, you have to make `const`s for that type of stuff. Also, from my experience, a lack of `#include` really makes it hard to use something like OpenGL or Win32 without a wrapper. You have to define `extern`s and stuff, which takes a while. (I hope someone tells me a better way.)
&gt; The proper fix wouldn't let you compile Just treat-warnings-as-errors like most should and you'll get what you want.
You can't use one in C#, but you can in IL (as [Enums.NET](https://github.com/TylerBrinkley/Enums.NET) did).
As if the other 20 devs in the team would be happy about it... I'm sorry but non-nullable references are not going to be of any use. It's not useable in production environment. The devs are lazy and they don't care. If they can turn it off they'll do it.
&gt; As if the other 20 devs in the team would be happy about it Why wouldn't they? If you already have warnings in your code, you should fix them first (or explicitly ignore them). We have more than 20 devs, 0 warnings and treat-warnings-as-errors on. Are you really looking at you build daily and ignoring the warnings?
The [Jovial programming language](https://en.wikipedia.org/wiki/JOVIAL) has implicit breaks and a [fallthru](https://github.com/neovim/neovim/blob/master/runtime/syntax/jovial.vim#L59) keyword when fallthrough is desired.
That is a weakness of this move for sure. I think the idea is to gradually move in the direction of stricter enforcement, rather than to break all existing code in a single step. If I were them, I'd be worried that moving in that direction too fast would just fragment things, like Python 2.x vs 3.x.
Here's the "other" Spark in javaland he was probably referring to: http://sparkjava.com
Ah, makes sense now. Thank you.
I could spend several weeks going through fragile legacy code fixing warnings, but I'd rather eat nails... 
I dont think fall through is considered a feature, if you want to jump to another Case just add "goto case 1;". 
Sure, but it's less eligient than just omitting a break statement. I understand why people dont want it, because it's prone to errors. But perhaps there is a syntax that someone could come up with that could resolve that.
I *think* this is untrue. You can inherit from value types. 
Oh, that's how Java works, not C#. I guess. 
I happen to agree with the lack of a ecosystem that is comparable with Java's. As a oo language, C# is unparalleled (IMHO), but there are many frameworks and libraries in the JVM that surpass most of the things that .NET offers. Sure, you can find alternatives for most of them and, from time to time, even stuff where the dotnet ecosystem is better (for one, I love xunit, nSubstitute, and a bunch of the testing tools available), but jvm has a larger open source community even now and better enterprise support. 
As much as I love what C# offers you and Java doesn't - operator overload, for instance - the whole comparison thing is UNDOUBTEDLY a huge weakness. It took me years to understand that overloading equals wouldn't overload ==, and vice versa, another whole lifetime figuring out that I should override GetHashCode(), which would just be an (very hard to debug) issue when it was used inside a dictionary, etc. Sometimes I remember that, for all its power, C# can be confusing. As Uncle Bob said once, better languages tend to be more restrictive. 
&gt; rather than an ArrayList Don't ever recommend to use an ArrayList in 2017. Even if you don't care about the type, you should be using a List&lt;object&gt; instead. Most APIs are designed to work with generic lists.
It's a weakness, of course, since it's confusing for programmers and, therefore, can lead to bugs. Just look at the official docs on MSDN and you can see how much work a programmer needs to put into learning the shenanigans of equal and ==. You could, for instance, design the language as only doing reference equality. Or making sure that overriding one of them automatically overrides the other. C# began catering for multiple audiences (Java and C++ people) so it included syntaxes from both worlds. That leads to confusion on certain aspects. I'm not bashing the language - it's the best oo language available IMHO, but there are weaknesses that could be addressed if backwards compatibility wasn't a main issue. 
It's an open-ended question.
In my personal experience, the “there/they're/their” kind of errors are made always by native speakers, and never by learners. 
Accord.NET and neural networks it is then 
The users. 
Do you generally have a lot of case fall throughs? I think I have used more characters in these 2 comments then I have written goto statements.
Yes I agree with you. It can lead to mistakes and bugs but from my experience (so this is just my opinion), that is only a problem when you first start programming. I haven't add a problem with that distinction in years. In fact, csharp helps you a lot with that because you can do: string a = "xpto"; string b = "xpto"; a == b and it works as expected. If you do the same in java it will not work because == can't be overriden and it will compare 2 memory addresses instead of comparing the string. But I was only trying to explain why things are the way they are :) Sometimes its important to trade some complexity for flexibility. &gt; You could, for instance, design the language as only doing reference equality. That is what C does :) (more or less) &gt; Or making sure that overriding one of them automatically overrides the other. The thing is, what if you want to override one but not the other? Because there are circunstance that that might come in handy. How would you handle that case? What the C# team says is that its up to the developer to know which is best for a particular situation instead of forcing to choose one or the other. &gt; C# began catering for multiple audiences (Java and C++ people) so it included syntaxes from both worlds. That leads to confusion on certain aspects. Totally agree but if it wasn't for that, it would be much harder to get people to use the language. Lowering the learning curve is almost always good. For example, go and rust are excelent languages but are way harder to learn and have very few developers compared with C#, Java or C/C++. &gt; I'm not bashing the language Don't worry, I didn't think that :) I understand what you are saying and I'm trying to explain why things are the way they are :) &gt; but there are weaknesses that could be addressed if backwards compatibility wasn't a main issue. As for this, to be honest, I used to think like that but now a days I think backwards compatibility is a blessing. Nothing pisses me off more than when a library that I use decides to break backwards compatability and forces me to rewrite my old working code instead of solving my problem. (Specially javascript libraries that seem to pop in and out of existence all the damn time!)
Only directly from System.Enum and System.ValueType, and that's a bit of a fiction. Value types are stored inside other types. So you have to know exactly how large they are ahead of time. So subclasses that add fields would be impossible. Value types are only large enough to store the actual data. They don't include extra space for storing what type they are. Between these two, polymorphism for value types is impossible without radically changing the design. (Non-polymorphic inheritance could work at the language level.)
When they implemented pattern matching they did strange things with scoping of the variables. How it works varies depending on context (`if`, `switch`, etc.). A brief google hasn't turned up the exact rules but you are correct that the above code compiles and runs correctly; the scope of the `f` variable is just the case clause.
What's wrong with UWP? (besides no libraries)
Because they wanted C syntax, but felt fall through was too error prone.
Yea, they fixed that for pattern matching. Too bad they can't for normal switches.
Then hire someone like me to do it for you. Code cleanup on legacy mudballs is one of my specialties.
If anything C# needs *more* collection interfaces. At a minimum it should have interfaces corresponding to each type of C++ iterator.
I really wish it had the idea of a typedef for primitives. No more wondering if its ( row,col) or ( col, row), when both args are the same type. It makes the code more readable, if you could constrain the values, that would be even better, e.g. if a part id always starts with a prefix, you could define that into the typedef.
I'm guessing you mean the output is the same as the input but without any spaces. The reason it's the same is because only your last Replace in the list is having any effect (it overwrites all previously set values of "morse"), so what is returned will be the original string (without spaces) except with "--.." replaced with "z". Did you perhaps combine two methods? If you are using Replace, you don't need to also split the original string by spaces. If you are splitting the string, you can just compare each part. So, here's an example keeping the structure largely the same as your method, but using a switch to compare the split string parts, append the translated values, and return the result: public static string DecodeMorse(string morse) { var alo = new StringBuilder(); foreach (var m in morse.Split(' ')) { switch (m) { case ".-": alo.Append("a"); break; case "-...": alo.Append("b"); break; case "-.-.": alo.Append("c"); break; case "-..": alo.Append("d"); break; case ".": alo.Append("e"); break; case "..-.": alo.Append("f"); break; case "--.": alo.Append("g"); break; case "....": alo.Append("h"); break; case "..": alo.Append("i"); break; case ".---": alo.Append("j"); break; case "-.-": alo.Append("k"); break; case ".-..": alo.Append("l"); break; case "--": alo.Append("m"); break; case "-.": alo.Append("n"); break; case "---": alo.Append("o"); break; case ".--.": alo.Append("p"); break; case "--.-": alo.Append("q"); break; case ".-.": alo.Append("r"); break; case "...": alo.Append("s"); break; case "-": alo.Append("t"); break; case "..-": alo.Append("u"); break; case "...-": alo.Append("v"); break; case ".--": alo.Append("w"); break; case "-..-": alo.Append("x"); break; case "-.--": alo.Append("y"); break; case "--..": alo.Append("z"); break; } } return alo.ToString(); }
* IEnumerable - You can iterate. * ICollection - You can iterate, and add/remove items. * IList - You can iterate, add/remove items, and retrieve items via an index. If anything, your example shows why there's *not enough* interfaces. Array throws exceptions on `IList.Add()` and `IList.Remove()`, because .NET probably needs an `IIndexable` to differentiate between indexable arrays that cannot change size, and indexable lists that can. 
Thanks a lot! Thats it!
Looking forward to implementing this when I return to work next year!
The purpose of a switch statement is to make certain kinds of decisions clearer. Implicit fall through isn't really particularly clear. Regardless though, the decision was deliberate.
We've been using swashbuckle for years now at work its awesome. Recently we implemented Tyk as well as an API management gateway allowing centralized controls of our API's. Tyk reads the json generated by our internal API's and allows us to manage all authentication for our api's in a single location and its pretty amazing.
Where is the accord.net community forum? Last time I tried to work with Accord, I struggled with finding documentation and newbie help.
&gt; So why do we then even have Equals and not just operator==? Operator overloading is not supported by the CLI. It's a language feature of C#, and works great when you're in C# land, but if your library is ever used in another CLI language (VB.NET, F#, ...) and that language doesn't support operator overloading, then they can't call your operator==. For that reason we suggest you write your object comparison method in Equals (which is known to all CLI languages), and call that method from operator==. 
Very nice, this will help me with my apps
I like how in boost (android app for reddit) I see threads with images that have nothing to do with programming like paintings or images about the simpsons lol.
I felt the same way first but after a while using it, i think they made right choice. Because now you can do if (!int.TryParse(str, out int n)) { return false; } Use n here. 
It might be worth it to think "pit of success". Almost all of the C# features slated for the next couple of releases (and previous few) were originally F# features. F# has been the testing grounds for C# features for some time now.
Godot doesn't feel idiomatic .NET; you shouldn't have to explicitly typecast stuff (which IMO means subverting the type system) to get many features working. IIRC this is because their core is a dynamic language, so that's how they fit that into .NET's type system. Edit: Also there are plenty of reasons to not use Godot if you want to build a larger game. IIRC their rendering was done out-of-process or something; or at least, you had to do some form of IPC to chuck render calls over, for example... plenty of reasons not to go there. When I looked, Xenko seemed the most promising for up-and-coming engines, though its license (which is billed as "free") seems jank enough to warrant using it, not to mention the questionable amount of updates it's been getting since it was moved from GH to their own internal gitlab. So you're left with Unity, which has its own share of woes (not FOSS, has a very specific way of doing things). There's definitely more flexibility in C++ land because of its ecosystem there (all the options for engines, or even just cross-platform graphics API wrappers which are only fledgling in .NET e.g. veldrid)... or if you want to pick and choose your parts, a lot more mature independent graphics engines, networking libraries, etc that are the right tool for the job. 
Plenty of downvotes here :( C# isn't the right tool for the job IMO - it's just not where the ecosystem's at. There are some libraries that support some of the things you'd want (Accord seems the most mature last I checked). If you can use Python for those jobs and handle interop between it and C# that might make your life easier and give you better support from community + docs out of the box. Also, if you want to be bleeding edge, you could try IronPython to make interop between C# and Python cleaner. I don't know if that project is still in an abandoned state, though.
That's where I'm headed. I would do everything in python but I'm struggling with how to use async/parallel patterns in python. I'm looking at using C#/LINQ for data movement and preparation, writing to a csv temp file, then calling into a pandas (cpython) script for the machine learning part. Something about this doesn't feel right.
Yeah... unfacilitated interop between languages always feels bad. If you can separate concerns well enough and communicate back and forth e.g. with json, it can suck less. Depends on how big the shared surface is - hopefully you don't need bidirectional IO beyond request/response...
Most of tools are not cross platform either. You moved target a bit IMHO :)
Interesting article. I didn't know UWP was even more restrictive than Android when it comes to background work. Like Windows, Android will kill your app if it needs memory... but Android provides a mechanism to re-launch it. Microsoft needs to sort this out.
What as about monogame?
No, I've said from the very beginning that the best tool is *the one that fits your use case*. I've said it again and again - no one solution fits all.
Thanks for sharing the experience with UWP as desktop apps.
I am not a programmer, but I have an information about a migration software, which can help you to migrate Exchange server data to Office 365 data . You can check out it from here: https://www.nucleustechnologies.com/blog/migrate-from-live-exchange-server-to-office365/ 
http://accord-framework.net/docs/html/R_Project_Accord_NET.htm This is the index page of its documentation 
This is because `PrintAccount` is public and it takes an instance of `Account`. But if `Account` is not public, how are you going to call that method from the outside?
I feel like UWP could become a decent alternative to creating a desktop app compared to something like WPF or WinForms if Microsoft ditches these unnecessary mobile-like restrictions when distributing them on the Store.
@prelude_ explained it well A tip: don't put "public" anywhere unless you have to, its a common mistake.. you will auto avoid many problems if you remember this tip. Its easy just to put public on everything but its very bad habit for zillion reasons.
The thing is most apps should have mobile-like restrictions. Good behaving apps are ideal for desktops too. It's hard to prevent bad apps from abusing their capabilities while permitting the apps that do, legitimately, absolutely need them.
I dev in UWP. Nice clean apps, that are sandboxed and uninstall nicely. Unlike the filthy crap in ye olde win32, with sneaky installers and malware. I miss the direct database connection stuff tho. I know it's lazy, but it got the job done. 
From the documentation on [access modifiers](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/access-modifiers) &gt; Classes and structs that are declared directly within a namespace (in other words, that are not nested within other classes or structs) can be either public or internal. Internal is the default if no access modifier is specified. If you omit the public keyword the Account class will be internal. Now suppose you make a second project and add a reference to your current project. The PrintAccount method will be visible to the second project, but the Account struct is invisible. So there is no way to call the public method from your second project (assembly). That is why the compiler complains about inconsistency. 
Logically, you could obtain an `Account` through another method call, disabling direct use of the type. In C#, you'd probably use an interface for that. Just pointing it out because it's possible in other languages [like C++](https://wandbox.org/permlink/vXUtx7RLd7WCrLSr).
Another publicly method also couldn't expose the private `Account` as a return type. You could return it as an `object` or public interface, but then you couldn't pass it to the method taking an `Account` parameter without casting it, which you can't do if the target type is inaccessible.
&gt; The thing is most apps should have mobile-like restrictions. Good behaving apps are ideal for desktops too. It's hard to prevent bad apps from abusing their capabilities while permitting the apps that do, legitimately, absolutely need them. I agree there needs to be better standards for installing/uninstalling. But it should stop there. A unified install/uninstall is really all that is needed. If a user then runs into a troublesome app, they can remove it. The restrictions really cut into creativity and limit developers and turn a powerful desktop environment into an overly expensive toy.
In OP's code the `Account` class is nested in the `Program` class and thus defaults to private instead of internal, but the rest of your explanation still applies.
Stupid spammer 
I wasn't referring to C#. The designers of C# chose to make that impossible. I was commenting on how it's not inherently impossible like the top comment makes it sound. 
Public only publicates within its scope. Its scope is currently the program class which is not public therefore the nested classes within are only visible internally
I know F#. I'm not missing out. It's a fine toy, but the fundamental problem is that real-life is a state machine. Thus, our programs will always be stateful. Thus, as hard as a completely stateless language gets us because of how easy it is to reproduce bugs, it'll never be a general solution. F# is like polar coordinates. For certain problems it's sublime. But there's a reason we don't teach polar until after we teach Cartesian. Similarly, I wouldn't F# a pit of success. Like polar coordinates, simply by using F#, you've already deviated off the easiest/simplest way to solve MOST problems (not all, but most). Fun language though. The part where it automatically knows units (i.e. meters per second) is neat.
They're syntactic sugar. Tuples and records you can already "do" in C# with a bit of typing. The truly unique part of F# - the statelessness - can never be brought to C# (or any OO/imperative language for that matter). This does not make one or the other better. Just different. That said, for most of today's real-world coding problems - especially with stateful user interfaces - you're going to be better off in an imperative than a functional. Thus my original "F# is not a pit of success" mindset.
People often have no idea which apps misbehave. My aunt was getting ads on Chrome from an extension. All of her extensions had too many permissions and there was no way to know which one was injecting ads, the only solution was to remove all of them. The best design for apps in a modern environment is no permissions by default, and a requirement that apps request the absolute minimum permissions required to function. App bloat is a terrifying thing. When I used Android back in the 2.x days, apps were all less than a few megabytes. A 16 MB app was huge. Today apps that do nothing more than basic mail or note taking are often over 100 MB in size and consume gobs of RAM.
The 
You're totally right in saying good-behaving apps are ideal for desktops. Having storage isolated for each app and having a clean way of installing/uninstalling them is great, although you need to find a happy medium between being too locked down and impeding the usefulness of n app.
Indeed. I feel like the permission described in the article to run continuously and not be background terminated should be granted on a case by case basis to Store apps. The author demonstrates clear examples for need of it. The key thing is ensuring Joe Schmo's Solitaire game can't background run all the time. That's how you get cryptomining malware.
Thanks for catching that :)
I'll murder any dev who does this.
Which is why the task managers for windows needs improvement, telling much morr about which apps use the most memory/cpu/permissions and notify the user. Crippling everything for the sake of inexperienced users is not the solution.
I could probably google the answer, but for the sake of adding to the discussion here, would the properties of a record type declared like this: public class Location (double latitude, double longitude); ... be accessed like `record.Latitude` or `record.latitude`? Note the capitalization difference.
All languages that have released more than one version for public consumption has that historical baggage. I imagine that at some point in the future, new languages will be written so that the historical baggage can be avoided. "April 27th, 2045: Microsoft releases O# 1.0 to replace C# 27.3"
To me, one of the best parts of F# is that you don't need to go completely stateless. Hell, you could write fully OO in F# if you really wanted to. That flexibility makes it easier to pick the right tool for the job while giving you access to pattern matching, currying, discriminated unions, and other nice features
nice shilling
I thought the tuples in C# previous to 7 were references, and that the new syntactic sugar tuples were values? 
Principle of least privilege is considered a best practice in modern security and development.
https://aspnetmonsters.com/2016/08/2016-08-27-httpclientwrong/
Interesting. I recently "learned" from seeing examples the "wrong" way was a way of using it. I didn't really consider performance. I'll keep it in mind next time. Thanks!
I'm just trying to get a simple psake script going. Here's what I have/am moving towards: - Build sln - Update all nuspec &amp; Assembly versions according to the team city build number - Run nunit tests - Nuget pack - Nuget publish Have you got any helper scripts for this? Particularly the one around assembly versions! I'm with you on this. TC is unwieldy at a certain point and the amount of time it takes to set up a new project is actually quite excessive due to the UI.
It's fairly simple to fix, you essentially have 1 instance you new up in your composition root and inject it where it needs to be. You can then use HttpMessageHandler and inject that into the HttpClient for the unit testing side. It works pretty nice for mocking the HTTP.
Here's a fun one: write a method to find all the prime numbers between any two given values. Prove that your calculation is valid with unit tests. Next, optimize the function with multi-threading. Now, make it save the result in a database, and make your function use data from the database instead of calculating, if you have already calculated a range. Next, make the db calls asynchronous with the async/await. This exercise starts out dead simple but as you work through it, it will touch on a lot of important language and ecosystem parts 
Then why are you even here
win32 is a godsend to mankind, none of that abysmal policing of UWP. Win32 is freedom. Are you against freedom?
The only scenario in which a linked list can beat List&lt;T&gt; is insertion or deletion when you are holding a reference of an adjacent node, and the collection is large enough that the better constants of the o(n) List&lt;T&gt; operations don’t matter anymore. This size is surprisingly large though. 
Nice article. He sums up most of the pros of the UWP. I will add one more pro: I can program in multiple language (although I prefer c#) C++, C#, JS and interop nicely between them.
&gt; All languages that have released more than one version for public consumption has that historical baggage. Absolutely true, and I didn't mean to suggest otherwise. Though in the industry, Microsoft is famous/notorious for going to greater lengths than most to not break backward compatibility. I suspect that some wok is happening in this area. C# has the `ObsoleteAttribute` class, for what it's worth. In my experience, it is very often just ignored. 
The size doesn’t matter that much since in a linked list insertion will be O(1) if you keep adding at the beginning, or already have the point where you will insert it will make a difference. As I said before is not a matter of premature optimization, is just using the right collection for the case. In my case I had to create about 10.000 small lists, but by using linked lists I saved a lot of time doing the insertions while accessing the data was the same because I didn’t needed to access randomly by index or sort. Although this was with .NET 4.0, apparently in Core they have optimized List&lt;T&gt; a lot so who knows, maybe now there isn’t that much difference. But I guess for that use cases a Linked list will still be better.
I'm not allowed to make comparisons? I frequent the sub because I like C#. That doesn't mean the only way of thinking about things is how C# does it. The top comment appealed to logic as if any other behaviour would be ridiculous. Except it's sensible enough that other languages have chosen it, so that argument doesn't really work. 
I'm on vacation until after the new year, if you ping me I'll share with you the scripts I have when I'm back in town
C# is fundamentally a strongly-typed OO language with an automatic Garbage collector. It has a lot of things added onto it, including many small-f functional constructs that are very useful inside your basically-OO code. But if you're looking for something other than a strongly-typed OO language with an automatic Garbage collector, you would choose something other than C#. Maybe you really love proper functional programming. Maybe you need to write low-level OS code or device drivers. Maybe you really prefer dynamically typed languages. In these cases, you probably won't start with C#.
I don't think it should be granted. If you use them, then your app won't show or have an extra acceptance dialog when installing on various system types. Installing an app that uses threads and needs to open ports on a desktop, no problem, but that same app shouldn't install on a phone, and might need an extra acceptance dialog on a tablet.
Typically you would use int.TryParse instead of Parse to avoid the exception. This would require you to use an if conditional and an out parameter, which I'm not sure is familiar to you or not. Otherwise, you could use a Try Catch clause around your int.Parse to catch the exception.
int.Parse will throw an exception if it fails to convert the input string into a number. An exception ends your program prematurely. In this case, you have 2 options: 1. Catch the exception and handle the error try { input = int.Parse(inputString); } catch { Console.WriteLine("Not a number"); } 2. Use int.TryParse if (!int.TryParse(inputString, out input)) { Console.WriteLine("Not a number"); } In both cases, as long as the conversion was successful, the 'input' variable contains the number. Use a loop to jump back to the start: int input; while (true) { string inputString; Console.WriteLine("Pick any integer : "); inputString = Console.ReadLine(); if (!int.TryParse(inputString, out input)) { Console.WriteLine("Not a number"); continue; } break; } Console.WriteLine("The number you picked is : " + input); Console.ReadLine(); To learn more, search for articles on: loops, conditions, exceptions, out keyword
Thank you! I'll drop you a message in the new year :) 
ok that works. Thank you!
Presumably yes, as per standard .NET notation, but nothing has been settled. One proposal had you writing something like this: `public class Location(Latitude: double latitude...` or something like that. I can't remember the details.
Use HttpClient, Json.NET, call an API like a weather forecast, and then display it to the user.
UWP in the Fall Creators Update supports .Net Standard 2, which has the direct Database APIs. I have not done any testing, but you should be able to use them as long as your targeting FCU and your minimum supported version is FCU.
Wow really? Oh my Gosh.. That's not really an argument. Least privilege would be to not allow the user to turn on the machine. Allowing access to as much of the Windows API as possible (Wasn't that what all the lawsuits in the 90's were about...) while locking programs out of security hazardous areas of the OS should be the goal. Creating walled garden API's that limit a developers abilities while granting Microsoft full access to the API's is anticompetitive behavior. Additionally I think it's also lazy. It's easier to just block off entire chunks of API in favor of crippled washed down versions than to actually fix the security holes in the old code. Which doesn't really cause problems when you're making mobile apps, or cloud applications but does cause problems when your making desktop or enterprise apps that need more from the OS. I get that MS is moving towards mobile and cloud centric, and OS as a service, but this isn't good for consumers as much as it is good for Microsoft's bottom line.
The timestamp issue with regard to code signing has been a longstanding issue. In fact, we don't even bother to sign them using VS. Instead, we have service that monitors the automated build output. Once it completes, the code is automatically signed using signtool, to avoid the timestamp issue.
I agree with you, except two points: &gt; Stateful user interfaces ... are better off imperative than functional Elm, React, and all the other FRP-based user interface libraries are so popular because a lot of people find them easier than the imperative approach to UI management. &gt; statelessness ... can never be brought to C# Sure it can. The `pure` keyword is already reserved, and it lets you declare stateless functions just as in F#. D does this pretty successfully.
This is definitely false. Apps should be allowed as little access to the API as they need, and nothing more. Microsoft apps should also move to this arrangement. (And slowly, they are.) What's "lazy", is just saying "give me access to everything" because it's easy. Your mindset is based on an incredibly poor understanding of security and good app design. In the modern world, all apps should live in isolated containers, and be given access to just what they need. And users should be able to allow or cut off access to those narrow outlets. The old world of where an app could do whatever it wanted on your system is dead, and it's going to stay dead.
"...as they need". There is where the debate lies. Not in empty declaratory statements like "this is definitely false". You were taught one way and you believe in it, that's nice.
Swashbuckle.AspNetCore is nice but it has only one maintainer and dude is overloaded. Nuget is so close to perfect yet it needs some small tweaks here and there. Very frustrating. Had to maintain my own fork for months just for some minor things that could be merged in 10 minutes. 
Ok here is the problem. I am trying to put this into a method. that has a do while loop where the conditions are a min and max. The min is actually 0 so whats happening is when I use TryParse it returns a value of 0 on any invalid entry --- So if someone types out Twenty in input it returns a value of 0. What I would like it to do is simply give an error message, and return it back to the top of do loop. using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace MyErrorCatchingMovies { class MethodBox { static int ReadInt(string prompt, int low, int high) { int result; do { Console.Write(prompt); string intString = Console.ReadLine(); if (!int.TryParse(intString, out result)) { Console.WriteLine("Not a number "); continue; } } while (result &lt; low || result &gt; high); return result; } static void Main(string[] args) { int age; age = ReadInt("how old? ", 0, 100); Console.WriteLine("you are " + age); Console.ReadLine(); } } } 
This is how I got into programming and helped me become as good (at least, I'd like to think so) as I am today. I just thought of an idea or project and went with it. I like programming because it can solve problems, I like working on a project that can accomplish something. So maybe find some sort of task or some sort of program that makes you think "I like this, but I wish it did this" or "I feel I keep doing this a lot manually, is there a way to make it more automated?" You'll be surprised, once you sit down and actually plan it out, how far you can get with nearly any idea in C#. That's my thoughts, at least. My first project was a web browser, and I actually made decent progress with it. I spent a decent amount of time co-developing a file manager. Right now I'm working on a calendar app and a music player. A lot of these are reinventing-the-wheel type things, I'll admit, but it's good practice and there's also a sense of pride when you use your own app and be like "yeah, I made this"!
That's not a C# issue though
&gt; disabling direct use of the type That's a public class with a private constructor. No matter what, the type itself must be public if you want users to reference your class.
Ooooh! Looks like I'm not keeping up. Thanks man!
O.o that's pretty cool I didn't know that
Extra extra credit cache those dB calls 
My favourite coding challenge that I've been given in a job application was: write a console app that converts an arbitrary XML document (potentially including XHTML) into a CSV file, with a row for each element. It should be possible to determine which rows are the immediate children of another.
I'll sound like a broken record, but blogging is almost mandatory in our industry, so why not scratch build your own blog engine/cms on .NET Core? You're going to come out with a solid portfolio piece that's actually useful for a long time to come. I did it myself a long while ago, and I've seen a few devs whom of worked with that have also done it. You'll hit snags along the way that'll teach you so much more about security alone that'll make it worthwhile. This is a good start: https://www.codeproject.com/Articles/1072781/ASP-NET-MVC-Build-Your-Custom-Blog-Engine-CMS-Part
Nice suggestion, grey even more points for going crazy town on complexity by implementing the Repository and Unit of Work design patterns.
When just beginning, a good mate of mine told me to keep a diary of all the shit in my day to day life that pissed me off. Then try to fix the problem with technology I was learning. That approach served me very well with trying to come up with projects to practice on, and although many things I came up with have been abandoned, some have actually turned out to be very useful.
You can try two different ways to fix it. The first is to add a bool outside of the loop, record the TryParse in it, and in the loop check, see if the bool is true. The second is to set result to -1 before the continue line.
The memory restrictions with UWP on Xbox are even more insane. I created a music app that runs on Xbox (letting people listen to music and play games). In order to not have my app suspended, I have to keep under 128MB of ram (in the background). Which can be quite difficult. Microsoft's examples on memory management on Xbox don't even work correctly, so whoop! haha
First C# doesn't really have SIMD support (SIMD "support" in System.Numerics is a joke). As a result you're basically forced to write your performance-critical functions in C++ because they're 4+ times as fast that way. Them not allowing struct inheritance and there not being any good value type constraints is another big issue. As a result everyone makes their own Vector3/Matrix4/etc struct that is binary-compatible to all others but cannot be used as arguments for functions other than their own. Also there is no dynamic type casting support which means you either need long if statements inside a loop or you need to copy &amp; paste the whole function just to change the word "Color32*" to "Color24*". All things considered though C# still is my favorite programming language.
&gt; Prove that your calculation is valid with unit tests. And because you don't want to do this by hand (seriously, you don't want to calculate/count by hand the prime numbers between 85,000 and 95,000), download one of the lists [from here](http://www.primos.mat.br/indexen.html) and learn how to parse the values from a file so that you can verify against the output of your method.
That sounds... difficult, as someone who has been thoroughly spoiled by the amazing serialization libraries in the. NET ecosystem. How did you implement the parser?
Oh, you can run it through something like Linq-to-XML for the parsing, it's more about iterating through the element tree and handling text nodes and the like
This is a good basic exercise if you have done similar stuff in other languages -- it may be a little un-approachable for someone who has never touched web stuff before.
I recommend looking into Northcentral Technical College's Object Oriented Programming series. It's how I learned C#, and damn did they do a good job. The courses are online instruction with unlimited tutoring, cost ~400 dollars each, are regionally accredited (transfer anywhere), and I can personally vouch for the quality.
Where is the accord.net community discussion board? I've been unable to find good examples and documentation as a newbie.
I've been studying python for the last week with my father -- both newbies to the language, both with C# background. It's super easy to pick up, very well documented. Downsides: OOP syntax is lacking and the type system is dynamic. The language is fragmented between v2.x and v3.x and the package manager situation is a bit obtuse. Upsides: mature libraries, great community, and terse, readable syntax.
Why do you say that about Robert Martin?
I typically just convert to if-else. But there are times where it's come up. I wouldn't want an error prone way, but if another syntax existed, I'd use it.
To expand upon the .net core perf comment, I have seen a 3-5x performance increase on static content service when switching from Framework 4.6 MVC5 to Core 2.0 MVC.
Are the entity framework tools causing the lock?
You definitely want to start with a multi-threaded asynchronous program. Also, to make it fast, use only single letter variables and on large function. As I am sure you know, multiple functions slow c# down to a crawl. I would start with something like: public void Main(){ // your code here } 
Comments in the code also slow down c#, might be okay in a one player game but definitely not in a 2 player!
Wot?
No support for user-defined primitives that would behave similarly to Enums, but instead can be based on any primitive type and strings or arrays of primitives. This is a bit more than just adding an alias for a primitive type. Examples: * Probability : double //Basically a double restricted to 0.0-1.0 range. * Path : string //A string that represents a path. * DayOfYear : int //1 - 366 range * Degree : double //0 - 360.0 range 
Your question doesn't make any sense. Based on that you don't know anything about programmimg, you should learn that first. To be at level from zero knowledge to making even simple side scrolling shooter with C# will take lot of time and dedication. Creating games is hard work plus you need an artist to do animation and what i've read doing fighting game animations is really hard. Also console for us programmers usually means command line interface console (text based) and based on your question you probably meant game console. For non programmer like you wanting to do normal fighting game non turn based I would suggest https://en.m.wikipedia.org/wiki/M.U.G.E.N but that doesn't support game consoles far as I know. For something turn based maybe RPG Maker is place to start.
Sorry I wasn't clear haha. I meant to ask how to make a turn based 2 player fighting game on Visual Studio that can be played on the computer console. 
this seems like a nice tutorial https://scottlilly.com/learn-c-by-building-a-simple-rpg-index/ , pretty sure you could make your own game after completing only 17 lessons from this tutorial 
Stack&lt;T&gt; has O(1) insertion at the beginning, List&lt;T&gt; has O(1) insertion at the end. Almost every time, those are way, way faster than linked lists, because they don’t have to chase pointers all over the memory. Furthermore, a nonintrusive linked list increases gc pressure and memory usage. Don’t get me wrong, there are use cases for linked list, and you might have one there. I’m not telling you that you are doing it wrong. But it should be made clear that those use cases are incredibly rare. I’m doing this for over a decade, and I’ve never come across one of those in application code. Well, that’s not completely right. ConcurrentQueue&lt;T&gt; is a useful lock-free data structure implemented as a linked list. 
Might be able to implement this in IL. Though I'm not versed enough to know if you could. One thing I do know is that Jon Skeet's MisUtil library contains a static genetic operator implementation which you can use. It uses compiled expressions. I also forked and created a Netstandard version called Generic.Math on nuget. Though Jon Skeet may have gotten around to updating MiscUtil by now.
Unity Technologies is working on a C# compiler that auto-vectorizes code I believe. They're also working on a mathematics library to offer SIMD too I think. Should be out this year for Unity3D and may be something that can be taken out and used externally.
But the stack doesn’t allow removing or adding items in the middle to filter them. Also List&lt;T&gt; doesn’t have O(1) insertion specially because at some points it has to resize the array, and is allocating memory that isn’t used. And doesn’t have O(1) deletion if you are for example going trough the list and decide to remove an item. Which is not such a rare case. The typical while loop removing items from a list is usually wrong and I have seen it a million times. And they aren’t that rare, in F# Lists are really linked list, as in most functional languages. Even blockchains are basically linked lists. I know they aren’t what is needed 99% of the times, as most collections, but lists aren’t what is needed always either. Is the same with stacks, queues, dictionaries, arrays, etc... and removing collections from the framework as some were suggesting for me is wrong. Most of this stuff is there for a good reason. (Except things like arraylists that are only for backwards compatibility) I am not saying don’t use lists, I am saying, use the right collection, and depending on what you do, a lot of times is not a list. Is like saying that concurrent collections have better functionality, just remove the non concurrent ones. My point is that the framework shouldn’t be dumbed down from the collections point of view. Maybe being able to initialize a variable in 20 different ways is more problematic to newbies.
1) they did not declare array as array is passed to CountSheep static method example http://rextester.com/HUEAQ58373 2) You need to look/read more into LINQ expressions in C#. =&gt; does not mean equal or greater, if i need to explain that line with words it would be something like: "In sheep array count all the sheep that are true" Or count all the S where (=&gt;) condition is true and condition is s. Because sheeps are represented with bool you do not need to write anything but s, maybe this would be more readable sheeps.Count(s =&gt; s == true); *extra If sheep are not represented with true false but for example "sheep", "no sheep" strings than the code would be sheeps.Count(s =&gt; s.Equal("sheep")); 
The `=&gt;` operator is the lambda operator. It lets you define a function inline in a very terse manner. The input on the left is transformed by the expression on the right. In this case we perform no transformation so the lambda expression / function returns it input.
&gt; They didn't even declare the elements of the array, how can they use the values in it without inputing it from the user The way some sites (like CodeWars, Leetcode, ...) work is that you declare a method signature and their system passes the arguments to it. So the sheeps array is initialized by their test engine. There are other sites (like HackerRank) that expect you to read arguments from the command line. The HackerRank CEO did an AMA on /r/cscareerquestions and that was the #1 complaint of redditors about their system. &gt; The Statement "return sheeps.Count(s =&gt; s);" i under stand (i think, im guessing) True is Greater than False, and then it will count the value somehow. Can someone explain how that works? This is the same as writing `sheeps.Count(s =&gt; s == true)`. The plain English equivalent would be "count only the elements that are true". Since the array elements (`s`) are bool's, the `== true` portion is redundant. 
Amateur here. My understanding is: 1. You don't have to do everything in one class (in fact, it's recommended not to). Create a new project and create+populate your array. Add this class to the project and call its function. 2. Count() iterates through the array. The first s is the local variable for the in line function, =&gt; (not &gt;=) says match on the following, and the second s is the match condition - if the item is true, Count will increment its value. (Anyone who actually knows what they're talking about, please feel free to add/correct where necessary).
Read up on Linq and Lambdas :) that =&gt; is an arrow function! 
`=&gt;` isn't greater-than-or-equal (which would be written `&gt;=` anyway); it's the lambda operator. It declares a function. Equivalently you could write `return sheeps.Count(delegate(bool s) { return s; });` Roughly equivalently, you could write private static bool id(bool s) { return s; } public static int CountSheeps(bool[] sheeps) { return sheeps.Count(id); } The `IEnumerable&lt;T&gt;.Count(Func&lt;T, bool&gt;)` method counts the number of elements in the enumerable for which the given function returns `true`.
What's the deal with C# and C++ users wow always tension I just started learning sharp and hope to learn ++ then java after in that order but wow people.... I thought it was good to be fluent in multiple coding languages and not only stick with one :/ 
I tried creating a private object "loggedinUser" on top and and also removing the UserSingaporean/UserForeigner beside of "loggedinUser". Both didn't work when I tried to MessageBox.Show(loggedinUser.userAddress).
UserForeigner loggedInUser = null; If else assigning it Using loggedinuser to do a thing. Because you always set it inside the if else, you can declare it above the if else.
What I would do is to declare the variable before the if-statement as null, and then to a null check before trying to use it.
weird you are getting into lambda operators before even understanding a static class/method
Well the message is pretty clear here. The thing is when you instantiate something inside the brackets of any if-else, while, etc ... your object/variable will only exist between those brackets whence the error telling you the object doesn’t exist :). Try to read things about scopes :)
You should declare the loggedInUser outside of the if statement. Do the two classes UserSingaporean and UserForeigner inherit the same base class or implement the same interface. If not I believe that you should create a IUser Interface that contains the property userAddress. This means you can declare logged in user as IUser, assign it either UserSingaporean or UserForeigner and still be able to access the userAddress. Otherwise you could just call the MessageBox.Show function inside the if and else statements and just repeat it.
Looks like you should make an abstract class User and define Singaporean and Foreign classes within that. Then declare 'User loggedInUser = new User();' before your 'if' statement. 
Create an interface: interface IUser { string userAddress { get; } } and make both UserSingaporean and UserForeigner implement it. Then declare a variable of type IUser before your if/else block:
Perhaps nitpicking, but `User loggedInUser = null;` prior to the if statement would be preferable if you make an abstract class.
No, they really shouldn't. I didn't spend two grand on a PC so I can run mobile apps and nor did anyone else. I don't have an issue with having to tell the user what I'm doing and ideally why, but the idea that locked down sandboxed crap is what computers are for is just stupid.
I think OP is just trolling.
I'm not trolling haha. I'm just asking for the functions needed for a text based 2 player fighting game. I know how to do the basic functions (if, while, etc...) but I don't know how to apply it. 
Or even better: User loggedInUser; to prevent accidental access to a not properly initialized variable.
There is no set of "functions" that you can just use to create a game. The closest you can get to that is by using something lile Unity 3D. Look up some tutorials on youtube to see how it works.
Even more explicit sheeps.Where(s=&gt;s==true).Count();
You are making the mistake of believing sandboxed apps are inherently like mobile apps. Sandboxing is now what even servers running container systems do now. Desktop apps can be sandboxed just fine, but developers have been slow to adapt, and the apps that are already sandboxed by design tend to mobile apps. Eventually all apps will be in sandboxes, because that is what is required for security in the modern era.
Go to youtube and search for quill18creates. Check out his videos for absolute beginners.
Thank you! 
Thank you! 
Did you initialize it? It will most likely complain that you are trying to use a noninitialized object. Try setting it to "loggedinUser user = null" above the if
Technically correct, but in most cases including this one, an interface is preferable. An abstract class doesn't even add any beneficial functionality here while it creates a tightly-coupled dependency.
Point 2 is pretty spot on man - there are some hairs I could split but for the purpose of this exercise you got it right. With point 1 I'm guessing the reason in this case is that it's just the website he's using wants you to write a function that accepts the array as an argument for the purpose of testing its correctness. Pretty solid assessment for an "amateur" though lol nice job!
Removed: Rule 4.
You could also use a tertiary operator to eliminate the if statement. I probably wouldn't based on the large looking constructors but it would work.
Sandboxed apps are crippled, and they're very much not what every app should be.
For me, both are beside the point. I was trying to spread a little open-mindedness, which is one of the few things I actually care about. 
Yeah good point. I'm still relatively new to C# so I'm not as familiar with interfaces as it seems I should be. 
Or use the null object pattern and initialise a valid, non-logged in user as a guest or anonymous user.
Your statement is completely false on every level.
Do you have any code samples for dapper? I've been hearing a lot about it and want to see how it works.
The whole structure is broken! You shouldn't create a user object out of some obscure array that is obviously created outside of the GUI class. Why not create a proper user object instead of the array at the creation time of the ``userdetails`` object? Would be much easier and cleaner imho. Then be sure you need to distinguish users based upon types! Perhaps it is sufficient to encode the type as a field? It depends of course on the *how*those users differ! It could be also a nice approach to create a common user class and simply delegate the *differences* into special behavior classes. Then you simply can inject the appropriate behavior into the user class (aka strategy pattern). 
No, it really isn't. Sandboxed isolates apps from everything but their own data, this is not a good thing. It's why using an iPad for anything at all is so God damned horrible. I don't want the iPad experience on my desktop. I don't want my applications closed when I don't want them too. I don't want to route everything through a cloud service just so that more than one app can work on them. I'm really don't want that to solve a problem that doesn't actually exist.
Yes, this is an important context called scope. You’ve defined the variable in a scope and are attempting to access it out of that scope. Typically you define in the same scope you wish to use it and assign in your original scope. 
&gt; They didn't even declare the elements of the array, how can they use the values in it without inputing it from the user It's pass into the method CountSheeps... public static int CountSheeps(**bool[] sheeps**) The user would have to declare/initialize the array and pass it to CountSheeps. &gt; The Statement "return sheeps.Count(s =&gt; s);" i under stand (i think, im guessing) True is Greater than False, and then it will count the value somehow. "=&gt;" isn't "&lt;=". It isn't a boolean operator. It's an operator for lambda expression ( aka anonymous function ). So the Count method uses the anonymous function to count the number of true elements in the array "sheeps". With the anonymous function, you are telling the Count method whether it should be counted. 
This is absolutely a good thing. Security is a huge problem that definitely exists. Sticking your fingers in your ears and going "nah nah nah, I'm not listening" doesn't change reality. Cloud services suck: Thankfully, sandboxing has nothing to do with that. You can grant permissions between apps, you just have to do it explicitly and correctly, rather than allowing the hacky trash that developers used to get away with.
There are built in delegate types, Action&lt;T&gt;, Func&lt;T&gt;, and Predicate&lt;T&gt;. I find them to be more idiomatic than declaring custom delegate types for most use cases.
Reflection is really slow. It has three use cases I have encountered. First, it is useful for deserialization -- when you have data and need to find a type to hold it, and you don't know where that type is at design time. Second, is is useful for initialization tasks, like resolving a platform-specific dependency not known at design time. Third is self-documenting code -- making your code read itself and write documentation automatically. This last use case is especially awesome when making APIs, because you can ensure that the documentation will never be out of date.
Declare this variable above if/else
Or use dynamic
Others have already explained your first question. For the second question here are some keywords to research for along with C#: LINQ (.net query functions library), lambdas, functional programming Let's break down the solution. The solution is really one line: // return count of sheep //count sheep where sheep are true sheeps.Count(s=&gt;s); But this is really not very descriptive code, it is using some short cuts. First, sheeps is an array of true or false values, Booleans. if we had array: var values = new bool[true,false]; if(values[0]){ Print("first element is true"); } Count function on the array is an extension method from the LINQ library. You can pass it a function and it will execute that function for each value of the array as an input to that function. If the function returns true then it adds one to the count. An example function: bool IsZero(int input){ if(input == 0 return true; else return false; } var values = new int[0,0,1,0]; int zeroCount = values.Count(IsZero); //zeroCount will be 3 The function type has to match for the linq query. In this case the input must be an int because Count() will pass each value in values as an int. In C# you can make a on the fly function with lambdas. This type of definition of a function has some different properties, such as you can store it in variable if you need and has some short cuts. The syntax is (param) =&gt; { //Your function body param = param + 1; //Optional return if needed return param; } Tip: lambdas or functions that return a value are type of Function&lt;in,out&gt;, those that don't are type of Action&lt;in&gt; So this is a lambda. Let's put a lambda in our count for sheep. sheeps.Count((sheep) =&gt; { if(sheep == true) return true; else return false; }); Our lambda looks similar to our IsZero function, except we defined it inside of the Count function. We are passing the lambda as a parameter. We could have stored it inside a variable first then passed the variable. We can simplify our lambda body to this: (sheep) =&gt; { return sheep == true; } We can simplify further because sheep parameter is the type we want to return, we can just return it without testing for a condition. Remember, for count to add up the function needs to return true. (sheep) =&gt; { return sheep; } Lambdas can be simplified furthermore for our case. First, since there is only one parameter we don't need to use the brackets. sheep =&gt; { return sheep; } Second, because we are returning a value AND it can be evaluated in one expression, we don't need the braces. Whatever the expression evaluates to will be automatically returned. sheep =&gt; sheep sheeps.Count(sheep =&gt; sheep); This looks a bit silly because our values are Booleans. If our sheep were zeros and ones lambda would look like this: //sheep are zeros, dogs are ones //count sheep where sheep equal zero sheeps.Count(sheep =&gt; sheep == 0); If you have any questions reply. We can try to help explain more or point you in the right direction. Maybe someone else can post some links. Others can correct as needed, this was from memory and typed on my mobile, but it should be mostly correct.
I don't have much knowledge on the matter my self, but I'm going to take a shot, since at my current job(I'm a Junior and still learning) we use this method for couple of Services/WPFs to communicate between each other. The method we use is communication over network. We simply use Socket send and receive methods, while converting the data to bytes and reconverting it. You may encounter problems figuring it out on your own, so I suggest googling this method and finding a way on Stackoverflow. Other way, is you can make your own Event handler class, that gets the information that needs to be sent, convert it to a string and send it via the Event trigger and have both of the WPFs have an event listener. I'm not sure about this method as I've recently been shown this way and don't have access to out work project to actually see how it works, but I think the event trigger was also sent via the Socket class. Also posting for later, to check other methods for this, as I'm personally interested on the matter as well. :)
thanks
thanks
thanks
thanks
Depends on your use case. If it's a dialog, this is the right pattern: https://stackoverflow.com/questions/3468433/wpf-window-return-value If you have two windows which work together as part of the same application then you could share the same data context between them. MVVM means doing everything through events and data binding, so this is the MVVM way. Alternatively there may be some data-store approach, like redux, which you can use, but it's not a default part of WPF; you'd be installing a package for this.
If you want to help the OP perhaps try a friendlier tone of 'voice'. I agree with your arguments.
What data are you trying to send? You can always just reference your main form and send out what is needed. Then add a watcher to look for data and Shen it gets it tell it shat it should do with it. I don't know if what you are trying to do is good practice. There is a reason why forms should be speared from each other.
sheeps.Count() //This returns the number of elements that are in the array sheeps.Count({LambdaFunction}); //Returns the number of elements that the lamda function returns true for. Lambda functions: (parameters)=&gt;{body} This is a very simple lamda... it accepts one input (s which will be of the type contained by sheeps) and retuns the value of s (in this case true/false)... so it count's the number of "Trues" in the array of booleans. Similiarly... let's say each object in the array was a sheep object like public class Sheep{ public int age; } and you wanted to count all the sheep older then 5 yrs old. return sheeps.Count(s=&gt;{s.age&gt;5}); 
You should declare it as new and set its data within or outside of your statement.
I don't see where my tone was unpolite? 
BaseUserType loggedinUser = (loggedinUserDetails == 11 ? new UserSingaporean(...); : new UserForeigner(...)); 
Cheers bud. It's nice to hear that I'm getting it somewhat right without the formal education. Out of interest, what hairs would you split? (I'm ignorant enough to not know what I don't know).
While that would probably work, its typically frowned upon as poor architecture and design. 
I wouldn't say it's unpolite, perhaps a little demotivating. Like when you say &gt; The whole structure is broken! 
OK, I understand what you mean. But: I won't change such phrases. Imho we are not at elementary school here, where you probably need to motivate people. I would assume that anyone is motivated who writes here 😉 
While i understand the sentiment, sometimes people code tings like they are part of some huge architecture or building the next Spotify while truly the API/app in question maybe is used at most by 5ppl daily. Overengineering for the sake of it. 
My personal preference is for this version as you can look at it and it reads fully. I always do (s=&gt;s==true) for clarification over (s=&gt;s).
Func is a type of delegate. A delegate, in short words, is a variable that stores a method. That particular Func syntax means that you input a String to that method and it returns a bool. Given the name one can guess that it takes the string, does some logic to "validate it", and returns a true or false if the string pass the validation test. Somewhere in the code there should be a definition of a validator method that is later on passed when this method UserReturnString is called. It could be something like checking if the string is longer than 0 characters, for instance. Why all this delegate func makes sense. Imagine that you implement this method UserReturnString but you want to keep open to use diferent validators. Instead of hardcode a validator, you just say, hey, pass me a delegate and definte somewhere in the code that validator you are going to pass me. If tomorrow, you want to change the validation rules, you only have to change that validator method, but this UserReturnString can remain untouched. 
You've got the bulk of it. The `Func&lt;string, bool&gt; validator` part is just allowing you to pass in a function that will receive the user input, which is a string (as denoted by the first (string) type in the `Func&lt;&gt;` declaration) then return a bool (as denoted by the second (bool) type in the `Func&lt;&gt;` declaration). An example of a `Func&lt;string, bool&gt;` you could pass in: Func&lt;string, bool&gt; validator = input =&gt; input.Contains("test"); This validator will return `true` if the input contains the string "text", otherwise it will return `false`. Putting it all together: public static void Main(string[] args){ var prompt = "Enter your input : "; Func&lt;string, bool&gt; validator = input =&gt; input.Contains("test"); var result = UserReturnString(prompt, validator); } static string UserReturnString(string prompt, Func&lt;string, bool&gt; validator) { Console.Write(prompt); string input = Console.ReadLine(); if (!validator.Invoke(input)) { input = UserReturnString(prompt, validator); } return input; }
With the fewest modification: UserSingaporean singaporeanUser = null; UserForeigner foreignerUser = null; if (...){ singaporeanUser = ... } else { foreignerUser = ... } MessageBox.Show( (singaporeanUser?.userAddress ?? "") + (foreignerUser?.userAddress ?? "") );
Allright :)
What I like to do is create a ViewController (or just Controller) This class is essentially the parent View Model shared by all the Child View Models. The Controller instance can be passed into each View Model constructor, and now you can share data between the Views. 
You want to use some kind of messaging pattern. There will be a class somewhere that is using some form of MessageService.Subscribe&lt;NewWidgetRequest&gt;() (perhaps the main window) and the other window will use something like MessageService.Publish(new NewWidgetRequest() { WidgetType = "Big" }); Or, as /u/veranova has mentioned, if the window is a dialog and hitting the "new" button is supposed to close it, then use return value.
Hi and thank you much both of you for the responses. A couple of questions . What does the invoke do in this example? Also, what would be the best way to get another method to tie into this that spits out a int (I mean how do I tie this string value into that method to spit out an int value?) So far this code is to prevent the user from getting an exception crash by typing "Two" instead of "2". using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace MySimpleNumberPicker { class MethodBox { static bool IntValidate(string stringNum) { int intNum; if (Int32.TryParse(stringNum, out intNum)) { if (intNum &lt;= 0 || intNum &gt;= 0) return true; } return false; } static string UserReturnString(string prompt, Func&lt;string, bool&gt; validator) { Console.Write(prompt); string input = Console.ReadLine(); if (!validator.Invoke(input)) { input = UserReturnString(prompt, validator); } return input; } static void Main(string[] args) { string number; number = UserReturnString("Pick a number : ", IntValidate); Console.WriteLine("The string of the number is : {0} ", number); Console.ReadLine(); } } } 
Monogame is a framework. If you check nuget, there are a bunch of backends it runs one like OpenGL and DirectX
The Invoke is actually executing the method. Someone else might have a better explanation about why it existsu, but you can call your Func this way too: if (!validator(input)) { input = UserReturnString(prompt, validator) } Yes, your method could return an Int rather than a string. Int32.TryParse in IntValidate is converting a string to an int. You could create a method named e.g. UserReturnInt that would call Int32.TryParse to convert the user input to an Int value before returning. What would happen if the input from the user wasn't an int? How would you want to handle that? 
_but its so cool!!!!_
If its all one application then you can have as many windows open to as many viewmodels as your system can handle. No need to pass data in an intermediary just pass it in when starting the view. MVVM pattern and the frameworks that make them easier to use can help a ton here. 
1) Depending on the IEnumerable type, `Count` may not need to iterate. Array has a `Length` property, for example, that always equals the number of indexes in the array. Note, however, that in this case it does need to iterate in order to apply the lambda expression. 2) The first s (I will call it `boolParam` is a parameter for a lambda expression. It's full form looks like this. `Func&lt;bool, bool&gt; (boolParam) =&gt; boolParam` In fact, you can do this if you want to separate the expression from the definition: Func&lt;bool, bool&gt; myBoolFunc = (boolParam) =&gt; boolParam; sheeps.Count(myBoolFunc); You're correct that `boolParam` is local to the lambda, but it's correct name is simply "parameter," i.e., "The first s is the first and only parameter for the lambda expression." It's important to realize this distinction because lambdas can "[capture](https://blogs.msdn.microsoft.com/matt/2008/03/01/understanding-variable-capturing-in-c/)" local variables. 3) `=&gt;` doesn't mean "match on the following." It's simply the syntax used in C# to denote a lambda expression. That said, what Count "does" with it, is that it will "count" any items in the array for which the lambda expression returns `true`.
100% what I was going to cover. Just read this ^^ haha
100% what I was going to cover. Just read this ^^ haha
1. F# is an imperative language. In fact, very few languages are not. (Excel comes to mind.) 2. F# is an OOP language. In fact, it's based on O'Caml, which was an attempt to combine OOP concepts with ml. 3. Nothing is stopping you from using immutable code in C# today. Often it is literally just adding a constructor and removing the setters. 4. Most of your imperative and OOP code should be written in a manner that's free from side effects. That's just good general advice for any programming language.
And there's the happy feeling of learning something. Thank you very much.
&gt; because I didn’t needed to access randomly by index or sort. Did you actually time that? Last time I checked, the pointer chasing needed to enumerate a linked list was significantly more expensive than an array list. 
I think you are focusing on the UserSingaporean/UserForeigner instances instead of the fact that the only thing you need from either of those classes is the userAddress property. You could simply do the following: /*refactor the CurrentUser class so that UserDetails is a struct or class instead of an ArrayList *that way we can use it as an instance property as shown below */ string userAddress = loggedInUserDetails.length == 11 ? new UserSingaporean(CurrentUser.UserDetails).userAddress : new UserForeigner(CurrentUser.UserDetails).userAddress; MessageBox.Show(userAddress); Having said that you need to do a code review with a more senior dev (if possible) cause there are a lot of things that can be done better here as mentioned in other posts.
Start with ignoring the non-generic stuff. (Fun fact, they almost omitted them from Silverlight because they are considered obsolete.) Teach them: * List&lt;T&gt; for performance * Strongly named subclass of Collection&lt;T&gt; for public APIs * ImmutableArray&lt;T&gt; for lists that can't change * ReadOnlyCollection&lt;T&gt; for public APIs where I can change things, but you can't For parameters (not return values or properties!) add IEnumerable&lt;T&gt;, IList&lt;T&gt;, and IReadInlyList&lt;T&gt; as appropriate. (Appropriate being the smallest viable interface.) 99% of the time you can ignore the rest.
just use a static object.
Do you have to send the data through a constructor? You could create a property on the MainWindow and access it from the second window with the following: ((MainWindow)Application.Current.MainWindow).PropertyName
the values are mostly randomly generated at runtime. The c# section of codewars is filled with smartasses tryna do oneliners like this one to impress, for the most part i think you should stick to what you can implement with your own logic and steadily proggress into learning. 
There's no difference between `validator(input)` and `validation.Invoke(input)`. In fact, it compiles to the same IL. 
Not that it probably matters but it would be better to put the validation check in a while loop rather than recursively calling the same function. I know it’s unlikely to happen - but this is more a design point for future projects - every time it fails validation it adds another frame to the stack, after enough failures this will throw an out of memory or stack overflow depending on which it hits first. Most times, recursive calls can be replaced with while loops and it will prevent you from suffering random stack overflows. Also c# didn’t (and probably still doesn’t) have properly supported tail end recursion which means every call to the function is a new frame rather than reusing the existing frame.
Microsoft needs to sort nothing, uwp is literally the best managed Ram friendly frameworks ever made, the fastest one too. a medium sized app should be breaking the 20 mb mark when in use and it actually turns to 0.1 mb use when minimized, only to be restored instandly, GC fires considently and satisfactorly too. 
mind linking some ?
I definitely did. The application went from around 12 hours to 5 - 10 minutes with all the changes. The change to use linkedlists saved around 2 hours. Didn’t changed the algorithm, just improvements in collections, for loops, allocations and the Parallel ForEach configuration. A list is basically an array full of pointers too. The references are together in memory, but that’s all, to get each item you still have to go to the heap for the actual object unless you are using value types. But since this were strings, the difference in accessing items in order is basically the same, get item and go the heap, get item, go the heap again. The only advantage for a list when iterating trough it could be in counting the number of items, and I am not sure if the .net linked list already holds a private counter, probably it does. They are also great for recursive algorithms. Basically this are the kind of things why people hire me to fix their performance issues. But in reality is data structures 101. Just a month ago I had to explain to a client what is a queue, and why you can’t filter without processing the previous items and why rabbitmq is not mssql. He still wants to do a WHERE in a queue tough.
&gt; This validator will return true if the input contains the string "text", otherwise it will return false. "test" != "text"
&gt; Strongly named subclass of Collection&lt;T&gt; for public APIs I can see why you _might_ do that for a toolkit that is used by the public, e.g. Open Source on github and you are really trying to specify how to use it. Inside a stand-alone app there's much less need, most of the benefit can be done without a subclass, using LINQ and/or extension methods.
&gt; suffering random stack overflows Came here to post this. Agree++
Hit me up any time if you ever need a one on one explanation! I know it does wonders for me in my learning.
You are inserting into a table named Table? I would do con.CreateCommand () instead and set .CommandText property instead. Also make sure the connection string is pointing to what you expect in config file.
I agree. I really should specify "public as in used by the public" rather than "public as in `public`".
So I think you may need an Event or to use an Interface to move the data. Events can be used to move data from any point in the program, to any other point, which is very useful. So events work on the basis that you have; a publisher, which broadcasts that the event has occurred; and a subscriber which listens out for the broadcast. They do this using delegates which are reference types to methods. TutorialsPoint covers this in depth. EVENTS: https://www.tutorialspoint.com/csharp/csharp_events.htm DELEGATES: https://www.tutorialspoint.com/csharp/csharp_delegates.htm Don't worry to much about delegates... I still struggle with their exact functionality, but definitely try to understand events! Hope I helped!
You got it!
First off, looks like you're storing your password as plain text, which is a bad security practice, if this code is going to be used by actual users. You should look into hashing and salting the passwords. Looks like you are not setting the @Surname property. To help avoid this problem, I like to add parameters to SQL commands in the same order they appear in the command text (i.e. First_name, then Surname, then Email, then Username, etc.) You might also consider using cmd.Parameters.Add("@ParameterName", SqlDbType.Type).Value = value; instead of .AddWithValue, which allows slightly better performance. 
This is a shorthand for an if statement. If playerSide is equal to "X", it sets playerSide to "O", otherwise it sets playerSide to "X".
This operator is just a concise way to write an "if then else" statement. This code could be rewritten as: if (playerSide == "X") { playerSide = "O"; } else { playerSide = "X"; } In my opinion, this is easier to read. And it probably results in the same compiled code. So there's no real advantage in using the operator. You should always remember the rule that you spend 90% of your time reading code and 10% writing it. So you should always prefer code that's easy to read. The "long" if is much more readable than the ?: operator in my opinion.
I would probably do the same. Having to much logic in a case statement is a code smell imo.
Awesome, thanks!!
Thank you!
I just realised it didn’t fully paste my code in. I will come back to you. I am new to programming so I need to explain a bit more what do you mean by replacing addwithvalue. I was thinking of hashing later after I was able to add everything to the database 
What part of the code are you talking about?
You could read it like: if playerside currenty equals X it becomes O otherwise X. Imagine what happens if you call it in succession. The `condition ? truevalue : falsevalue` pattern is the called the [ternary](https://developer.mozilla.org/nl/docs/Web/JavaScript/Reference/Operators/Conditional_Operator) operator. 
Could always be explicit: `OnBeforeReset`, `OnReset`, `OnAfterReset`. (You can keep or exclude the "On" part)
I'd suggest staying true to the meaning of Reset. If you need to distinguish between `IntitialStarted` and `SuccessorStarted` perhaps emit `Succeeded` instead of `Reset`.
This sounds similar to the problem I had when I was writing my first program. I am self taught too. What my case was is a main window that opens a form (which is my preferences window) and when I saved I needed the window to close and the data to be transmitted back to the main window. I solved that by making a public function in the main window that assigns all of my variables (I call it in initialize() to assign my values, and any time after to manually refresh them). Maybe making a public function in your main and calling your function from Form2 and passing the data back as an argument will help your case. You can probably do the text file with StandardOutput but that's a lot more work than needed.
That is salvaged code from what I provided OP [here](https://www.reddit.com/r/csharp/comments/7liriu/question_about_catching_a_format_error_then/drmp78i/). I expand on what I did there. I wrote it the way I did so I could introduce OP to a few things like delegates, input validation, abstraction, extensibility and recursion, more or less so OP can see that these things exist. Ultimately, given what OP stated concerning what he or she was attempting to do, the solution I provided works. With that said, I agree with you -- I wouldn't normally use a method with a recursive call to retrieve user input.
Readability is certainly a concern, but I would argue its not more readable. You can also rewrite it as: 
Make player side a Boolean rather than text and you can just simplify to Side = !Side
IsReset for the property seems ideal. I tend to use this convention even if there isn’t a conflict: a Boolean, to me, is an answer to a question. Run is another one you’ll often run into this problem for
No one asked me, but the On is very confusing. English doesn't often have "on before" anywhere, so i did a double take before realizing what you meant 
There's some incorrect things, like "video editing", you can use background rendering... as long you are using native rendering APIs. And you can specify some tasks too, and it won't suspend if you are on power, for example. 
Tell me why... ;)
Horrible code *donald trump voice * why would someone write slop like this in c# ? Like I understand c++ it makes sense but srsly this is ridiculous
&gt; Sandboxed isolates apps from everything but their own data FALSE! With UWP, you can use Devices API, so you can read external drives and etc. The main one, you can ask for user permission and read the entire C drive, and depending, even editing some of them. You can also ask for Documents, Downloads, Pictures, Videos, etc, library access, and even monitoring changes in background - with the app closed. You can also have total access to all your installed apps, and read the app data from your other apps for example. The thing is, UWP puts user in control giving granular permission. 
Sorry, that's my old school ASP.NET experience showing through with the `OnInit`, `OnLoad` (and others) events.
&gt; So you should always prefer code that's easy to read. I agree with this sentiment 100%, but this ternary operator is so common in programming that I would encourage /u/anthizumal to embrace it rather than to write the long-winded version.
It’s not about readability any software dev with a real job can read it fine. It shortens lines of code and makes code cleaner . Helpful for multiple conditional variable declarations too especially when saving to a DB
Just use a field or a public field that is shared between the two
I am the author of the original code you salvaged the above from. A `delegate` object contains a **reference** to a **method**. Much like how variables contain a reference to some value or object, you can also "store" methods in variables as well so you can use them later. A `Func` is a type of delegate. `Func` types return something. In contrast, `Action` types, which are also delegates, return void. You don't need to use the `Func` or `Action` keywords to declare a delegate, but in my opinion it makes them easier to work with in most cases. Let's talk about `method signatures` for a second. A method's signature consists of its name and its parameters **types** (but not the parameter names). Here are some examples of method declarations and the resulting signature (commented above the method declaration): //Signature: GetUserInput(string) public string GetUserInput(string prompt) { .. } //Signature: DoStuff() private void DoStuff() { .. } //Signature: GetDataSource(int, string, object) public static object GetDataSource(int id, string foo, object bar) { .. } `Method signatures` are important because they must be unique. You cannot define methods in the same class with the same signature -- the runtime wouldn't be able to determine which method you intended to be called due to `ambiguity`. The compiler is your friend here -- you'll get **red squigglies** (compiler errors) right quick if you have ambiguous method signatures. We use `struct`, `class`, `interface` and `enum` constructs to add custom types to our code. Whenever you see those keywords, you are defining a type. A `delegate` is a type and `Func` and `Action` are types of delegates. Now, let's talk about the *shape* of a method, or method shape. I suppose you could call it a 'method interface', but I really want to shy away from using the word interface because that has another, related meaning that won't help us here I don't think. I tried googling to see if there was a specific term for it, but because I use the words "method" and "interface" and "signature", I am not getting the results I need. Anyway, a method's shape is the answer to the question "how do I interface with this thing?" or "how do I **use** this thing?". You know the saying "round peg in a square hole"? Well, it is talking about putting the wrong shape in the wrong hole and implicitly implying that there is a correct shape for that hole. You could feasibly put any shape in a hole if the hole is big enough. The more 'defined' a hole is, the narrower list of shapes you can put in that hole. An `object` is a shape and, in our world, an `object` is the grand-daddy of all shapes. It is the biggest **hole** in our shapeworld. Consider the following method: public string Parse(object obj) { return obj.ToString(); } We can use the above method like this: Console.WriteLine(Parse("FooBar")); Console.WriteLine(Parse(42)); Console.WriteLine(Parse(new object())); And we will get the following output: FooBar 42 System.Object Since every type derives from `object`, every type has a `ToString()` method (more methods common to all objects found [here](https://msdn.microsoft.com/en-us/library/system.object(v=vs.110).aspx)). Since **every** type inherits from `object`, we can pass ANY type in there because they all match the "shape", or interface, of an object. If we change the `Parse` method's declaration to `public string Parse(int num)`, we've now disallowed all types excepts those that have the "shape" of an int. As a side note, the default implementation of `ToString()` for all objects is to simply return a string representation of the type (in our case, our new object we created returns the string `"System.Object"`). `string` and `int` objects, like in our example, have overridden `ToString()` which is why they don't return their types in a string like the object did. So, putting it all together, a delegate object must have a "shape" and, since delegates are just "methods stored in variables", the "shape" of a delegate is the "shape" of a method. Now, consider this method again: static string UserReturnString(string prompt, Func&lt;string, bool&gt; validator) { .. } Firstly, we know the method's `signature` is `UserReturnString(string, Func&lt;string, bool&gt;)`. We can consider the `shape` of the method to be `string (string, Func&lt;string, bool&gt;)` where the first string is the return type. Consider the first parameter of the method, `string prompt` -- the first parameter is a "string shape". The second parameter, `Func&lt;string, bool&gt;`, is some shape of a delegate. When you declare a `Func`, the *last* type you define between the &lt; &gt; characters is the return type of the delegate and all other types defined between the &lt; &gt; characters are parameters. So, the second parameter of the `UserReturnString` method will accept *any* delegate (aka "method stored in a variable") that matches the *shape* of `bool (string)`, where the bool is the return type. Since the names of methods are ignored when considering the "shape" of a method, any of the following methods can be passed into that method: static bool ValidateStringInput(string input) { .. } private bool FooBarMommaGoFreakYa(string sometimesIFeelLikeIAmMakingThisAllUp) { .. } protected bool TickTock_123_123_123_123(string soIJustPretendLikeIKnowThings) { .. } internal bool THIS_IS_A_METHOD_YALL(string THIS_IS_A_STRING_PARAMETER_YALL) { .. } ... and this is how you would pass those into the `UserReturnString` method: string result = string.Empty; string prompt = "Some Question Here?"; result = UserReturnString(prompt, ValidateStringInput); result = UserReturnString(prompt, FooBarMommaGoFreakYa); result = UserReturnString(prompt, TickTock_123_123_123_123); result = UserReturnString(prompt, THIS_IS_A_METHOD_YALL); I named the methods and parameters that way to show you that the "shape" of those don't care about the names. Method signatures, though, do care about the name of the *method* (but still doesn't care about the name of the parameters). Inside the `UserReturnString` method, you have the `!validator.Invoke(input)` call. You could simply write `!validator(input)` as well -- they both compile the same. What you are doing, though, is the same thing as if you had called the method itself -- that `.Invoke` is just *invoking*, or *calling*, the method. In your code you presumably have a line that looks like `string result = UserReturnString(prompt, .....)` -- you are calling, or *invoking*, the `UserReturnString` method. Now, the *purpose* of those delegates in the `UserReturnString` method is to *validate* the user's input to ensure that the input they entered is acceptable according to the prompt you've delivered them (aka the act of validating user input). The `input = UserReturnString(prompt, validator);` line is a *recursive* call -- recursion is where you call the same method from within itself. In our scenario, this recursion allows us to repeatedly ask for *valid* input from the user until they enter in valid input. We know they entered in valid input because our validation method, passed in via the `Func&lt;string, bool&gt;` parameter, returned true. The original solution I provided you allowed you to ask *any* prompt, passed in via the `string prompt` parameter, with any custom validation method, passed in via the `Func&lt;string, bool&gt; validator` parameter. This allows you to *re-use* the method for any time you need to prompt the user for input, presumably passing in different prompts and validation delegates each time. Let me know if you have any questions.
That's a nice stack overflow you've created there
More like a word vomit ;).
it's called the ternary operator https://en.wikipedia.org/wiki/Ternary_operation 
That's not sandboxing. Sandboxing is providing apps with an isolated separate space to work in, their own **sandbox** to play in where they won't interfere with anything else. iOS apps are sandboxed. Docker containers are sandboxes. What you're talking about isn't sandboxing, it's just permissions off by default and it's even more stupid because no one knows how to do it remotely properly. The most dangerous permissions are also the ones every app needs and permissions have to be granular enough to be useful while not requiring more than average knowledge to understand. Mobile apps have all of this bullshit and yet mobile apps are far more likely to do things they shouldn't than desktop apps. Even iOS apps with stricter security than anyone else are only really more secure because the app store has stringent review processes, sideload from another store and you're still screwed. None of this stuff actually works. People don't want this kind of app on desktops, not on Windows or Linux or even Mac.
Probably better named as "XTurn" or "YTurn".
But this is how UWP works. And macOS works almost like that since always. macOS people clearly want that if they bought it instead of Windows. 
Programmers read code not word by word but pattern by pattern. Condensing this down to one line fits more patterns on the screen that lets the reader get a better idea for the greater idea of the code rather than the details of individual lines. Plus, if a line is confusing you can read through it carefully once then store in your head what it's doing and move on. It becomes a new temporary pattern, that will build to become a permanent pattern if you see it enough.
Programmers read code not word by word but pattern by pattern. Condensing this down to one line fits more patterns on the screen that lets the reader get a better idea for the greater idea of the code rather than the details of individual lines. Plus, if a line is confusing you can read through it carefully once then store in your head what it's doing and move on. It becomes a new temporary pattern, that will build to become a permanent pattern if you see it enough.
Programmers read code not word by word but pattern by pattern. Condensing this down to one line fits more patterns on the screen that lets the reader get a better idea for the greater idea of the code rather than the details of individual lines. Plus, if a line is confusing you can read through it carefully once then store in your head what it's doing and move on. It becomes a new temporary pattern, that will build to become a permanent pattern if you see it enough.
A sandboxed app has no access to any state other than its own. That's what sandboxing actually is. iOS apps are sandboxed, well other than apple ones. UWP apps are actually not sandboxed, they're just crippled.
Google "ternary operator" for more info.
Is not useless at all. Also, webapps still uses more CPU, RAM and still slower. I really don't get what you are saying, if it can break sandbox, you complain, but if can't, you also complain. 
Why is it 'slop', as you put it?
Readability isn't about brevity, it's about commonalities, and mental overhead. If statements with brackets are very common, pmuch every developer should recognize it like any other object in their native language. The more you have to thing "What does this do?" the less readable it is. Then again, I've become so familiar with the `bool ? : ` thing that it's just as easy as a regular `if`.
More patterns on the screen != more readable code. Not by a long shot.
Just don't do what the Arduino code base does and go 3 ternary operators deep in a #define macro... That is the stuff of nightmares.
Hmm, this is kind of a hard question since this code is an abstraction of the issue you are running into and not the real-world example that you had this problem in. To elaborate, the answer to your question could be the answer to the question "What is resetting?". If the class `Foo` was instead something like the class `Timer`, your event could then be called `TimerReset`, for example. So, in this abstract example, I would name your events `FooReset`, `FooStarted`, and `FooPaused`, although better prefixes to the events may be available in real-world scenarios.
I'm saying that sandboxing doesn't actually work. Nor do fine grained permission requests. If you keep the sandbox intact your app can't do anything and if you don't your app isn't sandboxed anymore. Fine grained permission requests are always too detailed for some customers and too general for others and most people just accept them blindly anyway. That's the point. It doesn't work. 
This is why you (or platform) shouldn't use permissions everywhere. IMO, UWP do it fine. Just on some locations. On Android? It's annoying, as it ask for everything. So the user just accept all of them. This is why Windows also have some security issues, but with admin rights. For almost everything it invoke UAC-admin, like install any app... 
I thought it will suspend if you are short on RAM for other foreground apps?l
I believe that this depends on the type of background type. I haven't find this on Background media processing yet... Will see if I can repro it later, tho! https://docs.microsoft.com/en-us/windows/uwp/audio-video-camera/process-media-files-in-the-background
No one is arguing that windows needs a better install system. That said, admin on a single user machine is largely harmless. Everything that actually matters can be done as the user anyway.
&gt; user Nop. Lol. You can't modify other binaries, you can't modify Windows folder, you can modify registry iirc... 
The only reason you can't modify other binaries is if they were installed as admin and you don't have write access. If you do have write access you can change what you like. Modifying the registry is the same deal. Anything you can change you can change, anything you can't requires admin anyway. Fundamentally, the stuff you care most about is the stuff you own. Trashing my PC is annoying, but it's my own stuff that's really harmful if it's lost and my user always has access to that.
Depends. .appx packages are owned by TrustedInstaller, but doesn't require admin to install.
Are you sure your input controls contain valid data after postback/button click? The redirect inside the try/catch block will throw a threading error, too. Perhaps this is causing unexpected behavior.
And again, windows needs a less shitty installer if system. A sandbox full of holes, crippled permissions, and functionality that's tied to windows update versions is absolutely not the solution though.
I have no issue with ternary statements at all, use them constantly. An if statement makes more sense to me personally, in this case, because the else clause seems completely unnecessary. 
Doesn't the [event naming conventions](https://msdn.microsoft.com/en-us/library/h0eyck3s(v=vs.71\).aspx) specifically say to not use the "on" prefix?
You might want to link to the [current event naming conventions](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/names-of-type-members#names-of-events) document.
The simplest way to do this is create public properties in the child window's class, set those properties in the main window, and then reference them again in the mainwindow when you are done (usually by setting an OnClose event handler on the child window. This is probably not the correct way to do it if you are writing maintainable code, but it is the simplest.
How about BeforeFoo, OnFoo, and AfterFoo?
Doesn't really help. You just move this logic into another spot since you can't use a bool to store the status of a square since it has three states and you can't display it with the pure bool either. This is actually the best place to keep it since you can change the symbols here and it will flow all the way through.
Of course I never did any such thing. Again, you are untruthful ... saying that something was made obvious is not a claim about whether any given person understood it. As I stated, "quite a few" had no trouble understanding it. *Obviously* not everyone did, even though it *was* obvious ... hardly the first time in human history that such a thing has happened. And this "life tip" nonsense is just virtue signaling and a way for you to feed your own ego and put me down ... your intention is not to actually transfer knowledge to me or improve my life. But I don't expect anything I say to you to matter; I know that I'm wasting my time writing this and that there's no hope for an intellectually honest response. Over and out, forever.
Or ‘conditional operator’, its official name.
The else clause is certainly not unnecessary here. Without it, X would get only one turn and O would get all the rest.
Holy shit! Thanks for all your help I've learned so much about lambda functions in the past day and that code represents. Truly thanks for taking Ur time and answering with such detailed answers and explanations. 
Aren’t you missing an “cmd.ExecuteNonQuery()” ?
This isn't a square status, it's which side is the current player -- that's the variable name. Using a character to represent this is a not a good idea; it uses a text representation for something that is conceptually boolean. 
"I'm new to scripting " This doesn't have anything to do with scripting. It's just some C# syntax, inherited from C and found in other "C-like" languages. Neither C# nor C are scripting languages. I would advise reading a C# tutorial, which will cover this and other details of the language. This line of code can be understood as playerSide = [something]; What's the something? Well, it's "O" if playerSide is currently "X", otherwise it's "X". Presumably playerSide is always either "X" or "O".
Thanks for the info. I’m using it in the context of writing a script for Unity which is why I assumed it was considered scripting but I guess I misspoke. 
No, it's not the square status, but it will be. At some point you have to convert the player to the square status. This exact logic has to occur somewhere, and if it's here you can play A vs B or any other combination you like with a single change. You also only have to do it once whereas all other methods you have to do it in two. Beyond that, player name is not a Boolean, it's a binary value, presuming this is tic tac toe, and we're only alowing X an O, but it's not fundamentally true or false. There's no inherent value in using a ! to toggle this.
My code didn’t fully paste in. It’s a bit further in 
Don't use On for the name of an event. Do use On for the name of the function that is called when the event occurs and invokes the event handlers.
It is a ternary operator, not called one
nevermind, i am looking at on my computer version and it did fully paste in
If something is A then we call it A
You have a point. The best thing to do is have a Player class with an OtherPlayer property. Then you do CurrentPlayer = CurrentPlayer.OtherPlayer; and set a square (in games like tic-tac-toe where players occupy squares) with square.Player = CurrentPlayer; The Player of an empty square can be null, or you can use the null-object pattern and have a Player called NoPlayer. 
Nested ternary operators are nasty, but I'll afford this pattern an exception (which I haven't had to use myself): return a &lt; b : -1 ? a &gt; b : 1 ? 0;
It's context too. For example, in C code I find the `while (*p) foo(p++)` pattern perfectly normal. It may not be immediately clear the first time but it's a useful idiom.
Either this is a language I am unfamiliar with, or you have ? and : the wrong way round.
Far better would be public static int CountSheeps(bool[] sheepPresent) { return sheepPresent.Count(present =&gt; present == true); } 
Does the code created by the ternary operator look any different to that created by a standard if then else? IE Would this code: if (playerSide=="X") playerSide="O"; else playerSide="X"; Generate the same code as the ternary operator version?
I would check the length of the fields in the table. It looks like they're not big enough for your data. That's what it looks like 
Oops, totally missed that. Sorry!
If anything the distinction between "the" and "a" ternary operator might be appropriate.
[got a bunch of things right] &gt; I am not certain whether the JIT can, or will, inline lambda expressions. That too: https://stackoverflow.com/a/1529627/544557
You can do that, though unless there's some other state to store in the player (past score, a better name, etc it's a bit of OO overkill. The other player link is not great design other, the opponent isn't owned by the player, but by the match, assuming the player has enough state to exist. Not everything has to be an object, sometimes a string is just fine.
 return clamp(a - b, -1, 1); or return a - b; if the magnitude being in the range -1 to 1 doesn't matter.
Wow, can't believe i was this dumb, honestly man. Thanks alot.
it's probably just syntactic sugar so the il should be the same (ie jumping around somewhat :D)
Notice that Plasus didn't use do/while; doing so isn't correct here. o while (true) // or for (;;) { Console.Write(prompt); string intString = Console.ReadLine(); if (!int.TryParse(intString, out result)) Console.WriteLine("Not a number."); else if (result &lt; low || result &gt; high) Console.WriteLine("Value out of range."); else break; }
That's what I suspect; I was just wondering if anyone knows for sure...
I hadn't even considered a loop, just the single line of code that was shared. Good point.
Reset and Resetted, perhaps.
&gt; The condition ? truevalue : falsevalue pattern is the called the ternary operator. No, it's the [Conditional Operator](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/conditional-operator). It's often wrongly called "the ternary operator", because it's the **only** ternary operator **currently** in C#.
Awful advice. Booleans are not well suited for an "or"-relation. They make the code harder to understand. Booleans are for "is"-, "has"-, or "are"-relations.
It's not called the ternary operator, it's called the [Conditional Operator](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/conditional-operator). It's **a** ternary operator (and currently the only one) and it's **a** ternary operation.
VS Code. But that is just using the `dotnet` CLI under the hood. There's no way around that.
I know, of course. Just an example to show the pattern and formatting.
Or `Elvis operator`
I'm using VS code and VS community edition. I don't experience any slowness and I have some fairly large apps. You may look at adding the dotnet-watcher extension to your app, it let you code and it rebuilds in the background while you're running ( mostly good for web applications )
VS Code. You can also try an IDE - https://www.jetbrains.com/rider/ if you used ReSharper with IntelliJ keybinds or any JetBrains IDE - you'll feel right at home.
I actually find the conditional operator easier to read, but that's just preference. For something more code related, the conditional statement is *safer*; With `if/else` there is a chance that the assignment could be commented out or deleted accidentally, which would cause a runtime error. The conditional statement forces the assignment, if one side is missing it is a compile-time error
That whole rant of yours was about naming conventions of variables, good work detective but you completely missed the entire point of the simplification down to a Boolean, I couldn’t care what he wants to name his variables , anyone with a half a brain knows to not name it something like ‘Side’, I’d hoped such basic details didn’t need to be spelled out explicitly but here we are. Good work, give yourself a pat on the back for adding nothing to the conversation 
Even this sub uses *csharp*
Situations like this are why C# needs a Left() method on String, like VB has. Because doing it the Substring() way is a pain, and I'm just going to write an extension method for it anyway. 
Just to confirm, that code is a shorter way of writting if (playerside == "X") { playerside = "O" } Else { playerside == "O" }
Just to confirm, that code is a shorter way of writting if (playerside == "X") { playerside = "O" } Else { playerside == "O" }
Where was I ranting? I merely pointed out that your advice to use a boolean is a poor option for this kind of use-case. I've seen way too often a boolean used for an "A or B" case, which results in a harder to understand "A or not A" case using a boolean.
You don‘t call your wife "human", do you?
Responses like this one are why I've completely stopped asking questions on Reddit about code I've written. This places is a *cesspool* when it comes to asking for programming help and responses like this one are why. 
There is a value in preventing bugs. With a boolean, the only possible values stored are the two we want. With a string, we introduce the possibility of a value being stored whose meaning the program doesn’t understand (a value of “A” when only “X” and “O” are expected).
ARE YOU FUCKING SERIOUS I AM SO HARD RIGHT NOW I have a legacy business app that I still maintain. It's a kiosk terminal, and I want to port it to a proper kiosk uwp app in my free time, to make my own job easier next time I'm there. Thank you for letting me know! 
You're talking to the dude who got ass fucked by the windows store, three months ago forcing a premature launch of a steam game (which is going well!) Does this fit your world view mate? 
todist, slack, paint.net, skype off the top of my head.
It's not a Boolean though, it's not ever true or false and you'll map it to a string eventually anyway where you can have exactly the same bugs. You could potentially use an enum instead of a string, but it's not a Boolean. Coercing a value into something it's not adds bugs not removes them and it makes code harder to understand. There's nothing at all wrong with this code, it does exactly what it's supposed to do and it's clear.
The mapped string can be read-only, which eliminates the potential for the type of bugs we’re describing. The value can easily be thought of as a Boolean- IsPlayerOneTurn.
That code snippet doesn't have an Elvis operator. Elvis is the ?. One.
No it isn't. You are setting both paths to "O" which isn't what the original does.
I like XML for simple data storage because c# provides very simple tools for reading/writing it :) Plus you don't have to invent your own delimiters. 
It can be thought of that way, but that's a major change.
https://en.m.wikipedia.org/wiki/Elvis_operator In c#, yes, but usually it is
Non-Mobile link: https://en.wikipedia.org/wiki/Elvis_operator *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^132265
Lucky me, I don't have a wife so I don't have to deal with these pesky details you're trying to set me up with. Good day! 
The naming conventions are more what you'd [call guidelines](https://thesipadvisor.files.wordpress.com/2014/08/pirate-code-guidelines.jpeg) than actual rules. I do agree, that where possible, you may as well follow them. Sometimes English or your code domain doesn't lend itself well. Especially in cases where the event name sounds like it could be a property or an action method, such as in this case. Exacerbated by "Reset" which usually doesn't get used with the different tenses often. The other suggestions in the post are good too. Maybe you can find a different, more accurate word than "Reset", maybe you can tweak your code design. But all things said and done, especially if this is your own personal code and not intending to be a library distributed and consumed by others, then sometimes it's just easier/best to break the guidelines a bit.
i actually tried this already and thought it doesnt work, but i thought why would he tell me something that i think doesnt work and i tried it again...only to notice i didnt set the property in mainwindow to public, so i couldnt access it. It works now, really appreciate it 
2 choice scenario warrants use of a Boolean 
No, it absolutely does not, and that's what I tried to explain. When you have a boolean for a 2-choice scenario, then the second choice is omitted. You have a "first choice or not first choice" scenario and you need to be much more aware of the code to understand that the "not first choice" option actually means "second choice". This makes the code harder to explain. To give an example: You can either have an *apple* or a *banana*. With the boolean you probably end up with a variable `hasApple` that is either `true` for *apple*, or `false` for *banana*. If I read this code, I have no idea that `hasApple == false` means *banana*. I can only infer the *apple* from the variable name. I need to be much more aware of the context and always keep this tiny tad of extra information in my head when reading the code. This is completely needlessly.
In the context of this game which is obviously noughts and crosses it’s not that mentally challenging to understand ‘playerIsNoughts’. This is all non objective choices anyway and isn’t worth further discussion as its personal choice
So based on this link, the event names should be: Resetting Reset Starting Started Pausing Paused
Kinda. You can only return an expression, so no statements such as break, delete, ect can be used.
Based on the [latest naming conventions](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/names-of-type-members#names-of-events), the pre and post event names should be: Resetting Reset Starting Started Pausing Paused
Stop using the word temporarily variable. Temporary variable.
In pseudocode: originalForegroundColor = Console.ForeGroundColor originalBackgroundColor = Console.BackgroundColor Console.ForeGroundColor = _myForegroundColor; Console.BackGroundColor = _myBackgroundColor; // Print stuff // Restore original colors So the temporary variable is just a variable that exists in the scope of the print method. 
You must be fun at parties, Deadlychambers. 
Thank you, Courier10pt.
Yes it tells me everything I needed to know about you :)
The name of this operation has been pretty well covered, so here is my soapbox speech about ternary operators: *steps onto soapbox* This syntax is best used for SIMPLE evaluations. If it is something that requires any explanation then use the standard if/else syntax. If you have to nest another evaluation in the ternary operation, also default to the longhand version. Some people disagree with this, but I’ve encountered too many code bases that have these little buggers nested 3 deep making the code a gigantic pain to debug/support. *dismount* Happy coding!
Good bot 
Thank you Cyberworm3285 for voting on HelperBot\_. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://goodbot-badbot.herokuapp.com/). *** ^^Even ^^if ^^I ^^don't ^^reply ^^to ^^your ^^comment, ^^I'm ^^still ^^listening ^^for ^^votes. ^^Check ^^the ^^webpage ^^to ^^see ^^if ^^your ^^vote ^^registered!
I used to feel the same way, but it's so common that I just got used to it and use it myself all the time
This needs to exist.
https://en.m.wikipedia.org/wiki/Elvis_operator In c#, yes, but usually it is. I didn't know this was language specific, sorry
Non-Mobile link: https://en.wikipedia.org/wiki/Elvis_operator *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^132288
Sorry, my bad -- it's just the return type that would be implicit. Your example is exactly what I was thinking of.
Could be. However, maybe the data you're trying to insert is not to be blindly trimmed. I would go for validation, through Data Annotations, for example. If you want a Left method, an Extensión Method is easily doable
*temporarily
I'm using Visual Studio for Mac. I have VS Code installed as well but I only use that for non-.NET development.
Try asking in /r/cscareerquestions/ 
Got it. I thought It might use some different parameters that make it faster.
Totally. In this case though because I was using unity UI buttons as tiles which have a text component, I was able to repurpose playerSide = “X” to change the text to show who selected the tile.
No, situations like this are why you validate your data is the correct length before inserting it into a field and you enable client side limits. You think taking the left 50 characters of an email address is the best result. What about the data you're truncating? 
Are you sure you want to store passwords in your database in plain text?
https://i.imgur.com/tuKaGyM.jpg
I haven't got to that part yet, but if you could help me that would be greate
thats exacty what i did, my email was 20 character (which is obviously too short) so i had to change it to 50 which fixed the problem.
What if I have a 51 character email address? How are you handling that? Are you restricting it on the client side or just hoping that people won't have a 51 character email address? 
You seem to be creating your own authorization mechanism. Why? Have you looked into the inbuilt Identity features of .net? https://docs.microsoft.com/en-us/aspnet/identity/overview/getting-started/adding-aspnet-identity-to-an-empty-or-existing-web-forms-project
I don't rly know yet 
Those compatibility shim dlls won't go away unless you're targeting net471 or later.
In my experience I would need this feature once every two years. Maybe.
No code coverage for .net core on linux. Code coverage support is quite weak for .net core even on windows. 
== operator comparing references is crap. I understand that it is historical and what have you. Screw that. Had to port pretty big piece of C++ code to C# and spent most of the time sorting out == operators. Stupid stupid feature.
void -- Do not expect any information to be returned when the method is executed. ChangeSides() -- The name of a method playerSide -- A variable that must have already been declared or else this statement is invalid. = -- An assignment of whatever is on the right into the playerside variable (playerSide == "X") -- An evaluation of whether playerside is equal to the string value X ? -- A comparison operator asking whether the statement (playerside=="X") is true or false. "O" : "X" -- If the comparison is true then playerside is set to "O", if it is false then it is set to "X" ; -- end of statement
Rider. It's a JetBrains product and it's awesome. 
How so? (honest question) Doesn't C++ also support overriding operators? I think it's because of C++ has the feature in the first place. I do agree with you but I think coming up with something else would have been worse. But like I said, this is only my opinion :) I use C# on my daily work (backend developer) and never had any problems whith using == vs equals
Attempting to maintain a specific screen layout in a console application can be a bit tricky using only the standard console API available in c# Here is a class that will allow you more direct access to the console buffer. public class PInvokeables { [DllImport("kernel32.dll", SetLastError = true)] //[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)] //[SuppressUnmanagedCodeSecurity] [return: MarshalAs(UnmanagedType.Bool)] static extern bool CloseHandle(IntPtr hObject); [DllImport("Kernel32.dll", SetLastError = true, CharSet = CharSet.Auto)] internal static extern SafeFileHandle CreateFile( string fileName, [MarshalAs(UnmanagedType.U4)] uint fileAccess, [MarshalAs(UnmanagedType.U4)] uint fileShare, IntPtr securityAttributes, [MarshalAs(UnmanagedType.U4)] FileMode creationDisposition, [MarshalAs(UnmanagedType.U4)] int flags, IntPtr template); [DllImport("kernel32.dll", SetLastError = true)] internal static extern bool WriteConsoleOutput( SafeFileHandle hConsoleOutput, CharInfo[] lpBuffer, Coord dwBufferSize, Coord dwBufferCoord, ref SmallRect lpWriteRegion); [StructLayout(LayoutKind.Sequential)] public struct Coord { public short X; public short Y; public Coord(short X, short Y) { this.X = X; this.Y = Y; } }; [StructLayout(LayoutKind.Explicit)] public struct CharUnion { [FieldOffset(0)] public char UnicodeChar; [FieldOffset(0)] public byte AsciiChar; } [StructLayout(LayoutKind.Explicit)] public struct CharInfo { [FieldOffset(0)] public CharUnion Char; [FieldOffset(2)] public short Attributes; } [StructLayout(LayoutKind.Sequential)] public struct SmallRect { public short Left; public short Top; public short Right; public short Bottom; } } And a bit of code using it //Define the width and height of console window and buffer Console.SetWindowSize(resolution.X, resolution.Y); Console.SetBufferSize(resolution.X, resolution.Y); var buf = new CharInfo[resolution.X * resolution.Y]; //Define the Console row/column to modify var posX=3; var posY=10; //Calculate the index of that row/column in the buffer int indx = posY * resolution.X + posX; if (indx &lt; 0 || indx &gt;= buf.Length) throw exception("Invalid position") //Define the Console Attributes var Forecolor = ConsoleColor.Black; var Backcolor = ConsoleColor.White; var Glyph = '!'; buf[indx].Attributes = (byte)((byte)Forecolor + ((byte)Backcolor &lt;&lt; 4)); buf[indx].Char.AsciiChar = (Byte)Glyph; //Get access to the console buffer var bufferHandle = PInvokeables.CreateFile("CONOUT$", 0x40000000, 2, IntPtr.Zero, FileMode.Open, 0, IntPtr.Zero); //Define the rectangular area of the buffer to be updated (The entire buffer in this case) var rect = new SmallRect() { Left = 0, Top = 0, Right = (short)resolution.X, Bottom = (short)resolution.Y }; //Update the console buffer WriteConsoleOutput(bufferHandle, buf, new Coord() { X = (short)resolution.X, Y = (short)resolution.Y }, new Coord() { X = 0, Y = 0 }, ref rect); The biggest issue with this is that you have to specify each character individually (which isn't so difficult... for a string, just find the index of the first character and increment the index for each character... basic word wrapping happens automagically because the console buffer is 1 dimention. You'll have to handle scrolling yourself (but you have to do that anyway if you are breaking the console into multiple scrolling areas)... you'll also have to handle cursor position yourself if you don't just ignore it altogether. 
Mvc is wayy more valuable then uwp. Uwp kinda sucks to be honest. Most c# development on desktop is probably heading in the direction of front end stuff like electron not uwp. It's also probably better to focus on kotlin/java and swift if you want to go mobile. I would also suggest learning .net core for use in microservices.
Pluralsight.com
I'm not so lucky. I have individual functions that would use it multiple times.
I am trying to help you out.
I believe when I had this adding net461 as a supported platform in my standard project fixed it.
New keyboards? Peripherals? 
If the email address is too long and won't fit in the field, what are you going to do with it? It's obviously the fault of the database designer or original coder that didn't read the RFC. Of course you should fix this, otherwise you end up with sites like Salesforce.com which has customer feedback like "This hasn't been fixed in 8 years now" [0] But what experience do you want the user to have *right now?* An error screen that prevents them from continuing? [0] https://success.salesforce.com/ideaview?id=08730000000BpGHAA0 
you can try jetbeans or VSCORE. but as visual studio subscriber I really cant see how people use them and find them satisfactory, using windows and at least a free version of visual studio is the best to get into .net. 
I need RBG leds to program damn it!
Thanks 
My two cents. MVC &amp; MVVM are more or less design patterns. Focus on spirit of the technology and not the specifics. After that, I would focus on design patterns, Creational Patterns, Structural, Behavioral, Concurrency, etc. A solid understanding of design patterns is what separates code monkeys from engineers. I'd also focus on a stack, a whole web stack. For example: SQL Entity Framework Web API JQuery/AJAX Knockout / Vue.js (MVVM/MVC JS framework) Bootstrap Competent Web Developers still earn more on average than other software developers. Another thing that gets overlooked by a lot of programmers is a solid understanding of business processes. Accounting, Healthcare, Higher Ed, etc. Once you're versed in programming and understand design patters, stacks, etc employers start looking for those qualifications along with excellent understanding of business. 
I use the macro keys on my g series mechanical keyboard. 
I was just using email as an example based on the original post. Regardless, whatever the data length is in the database, the inputs should be limited to that same length and validated to make sure it doesn't exceed it. An error telling them their email is too long is way better than your suggestion of just truncating the input using the LEFT function. You'd end up saving part of their email, they'd never be able to login. Unless you also truncate their in out during the login function which is just laughable. 
If you use visual studio: Resharper https://www.jetbrains.com/store/?fromMenu#edition=commercial
Argument your point then, please.
Indeed, understanding the business domain that I work in has allowed me to perform better and make changes in design of the applications which were appreciated. I have already read the design patterns however, I think it might take multiple projects and guidance before I am able to understand and implement them even on the surface level. &gt;I'd also focus on a stack, a whole web stack. For example: Yeah, the stack is what I am thinking about. From the comment, made by PotatosAreDelicious I could understand that UWP hasn't and will not gather any more traction than other options. So, I am weighing my options. Thank you for the reply.
A yearly subscription to the jetbrains tools is a good start. About 200/year.
Sure, thank you.
As others have said, JetBrains full suite definitely. Even if you don't like R# DotTrace and Rider are worth it. I'd include OzCode too. Add a pluralsight membership and you are right around $500
To avoid this, I additionally target a version of .NET Framework as well in my library projects. Multitarget makes it really easy.
Idk about electron (that doesn’t seem right to me) but completely agree MVC is way more valuable!
Any good developer should know how to use (https://www.englishforums.com/English/TemporaryTemporarily/nxllj/post.htm)[Google]
Thanks, this solved it. I never knew that you can target multiple frameworks at the same time. Solutions: https://stackoverflow.com/questions/42747977/how-do-you-multi-target-a-net-core-class-library-with-csproj/42748264#42748264
It sounds like Salesforce has some internal, uh, competency issues: "I note that when we create an Email Service within Salesforce for 3rd parties to send TO, Salesforce generates a 100+ character email address for the 3rd party to use...yet Salesforce's own internal limit is 80 characters? For Salesforce to insist that 3rd parties allow 100+ characters to use the Salesforce Email Service while limiting its own users to 80 characters seems inexcusable." I have to laugh because it's that, or cry... 
It's a little disappointing that, what was true in 2009, is still true today. https://github.com/dotnet/roslyn/issues/11578 I'm surprised to learn that csc doesn't inline any code. I wonder if the reason for that is simply so the responsibility can lay squarly on the shoulders of the JIT. Good information to have. Thanks for the link.
I see a lot of xamarin job offers. And usually are the best paid. But I am web guy, so I have to recommend MVC, a lot more useful than mobile or desktop apps imho.
It's only available in new csproj type
Probably typical enterprise software, where they could change it, but no one knows where all the affected code is. And if they do, it belongs to some other group where updating it is not a priority for them. 
I'm holding my breath for C# WASM MVVM.
&gt;and never closes it. The changes to the file aren't written until the handle is closed, so FileSystemWatcher doesn't seem the changes until then.
Anyone looking for a Xamarin dev: PM me for an interview.
I saw that! So you think XAML-based markup? I never fell in love with WPF, though I used it for a couple of years. Also, have you tried JS MVVM frameworks like Knockout?
But why does it start detecting it, when I just click the file once?
I make small app, coded like I would be the only maintainer. Other people say small app useful. I distribute small app to people at a price. People say small app great but small app buggy and needs more features. Not enough time to fix small app bugs and add new features. Hire extra developer to help maintain it. Extra developer quits because codebase is horrid. Hire extra developer to help maintain it. Maintenance cost too high. Hire extra developer and QA tester. People request features small app never designed for. Small app fails. Small app bankrupts me. No more small app.
A decent office chair if you're working from a home office. I used to recommend pluralsight, but I'd get it for a month and see if you use it. If you do db stuff, look at redgate, otherwise jetbrains. I pay for full resharper suite and LINQPAD or and RegExBuddy and that's it 
Ah my split keyboard makes coding so much better! 
SQLPrompt is a godsend for me. It's from Redgate (so all their shit is $$$$$$$) but you can buy it separately.
=&gt; != &gt;=
DevArt CodeCompare
Following the scrum process allows for it If you use it properly. 
thanks for the compliment, but I'm not a good developer. My knowledge doesn't reach google answers. 
&gt; What would increase my chances of getting into Microsoft? Microsoft is such a big company I think it's worth it to focus on specific products you would like to work with and create a strategy which meets the specific needs of the teams which work on those products. Pick one or two products and focus on them. For example, say you choose Skype. Look up all the technologies they use, and read up on them. Brush up on your knowledge on networking. Look up the different RFC's for all the different protocols they use. Learn about the different codecs for audio and video. etc... If you can speak their language during the interview, you'll stand out among the sea of web and cloud devs out there. If they feel that you know more about their product and are a decent C# dev overall, then that's less time you have to ramp up on the specifics. 
My paid tools: Beyond Compare Linqpad NCrunch Resharper All recommended
- Another monitor - Desk with adjustable height, so you can stand / sit. - What everyone else said
Things I use at work that I find invaluable: - Resharper - OzCode - LINQPad - SQL Prompt (other Redgate tools are great too, but will easily go over $500) Things I wish they'd buy me that I used to the length of the trial: - Code Compare (free is OK, but premium is better) - NCrunch
This is actually not a bad idea. Source code isn't English. The IDE will do the work of autocompleting. 
If you want to be good, practice, practice, practice, and also knowing how to google the small problems inside the big problem will greatly help you. 
Came here to say Jetbrains all you can eat annual licence - worth every penny
ohh! I thought you meant specifically that usage. yeah fair. I think that is fairly readable.
Everyone needs a programmable mech so they can program their keyboard with their keyboard to program programs.
LINQPad all the way
&gt;Am i doing something wrong? Nope. &gt;Why are they needed? &gt; &gt;Or what's the point of this? They're needed because .NET 4.6.1 doesn't *really* implement .NET Standard 2.0... it implements most of it, but there are a few APIs specified by the standard that aren't there in .NET 4.6.1 out-of-the-box. The way that works is you have to get the missing stuff out-of-band from NuGet packages. There aren't too many of these packages (the ones that fill in the gaps). The explosion comes from the fact that these extra ones reference APIs from other packages where, although everything in that other package is provided by .NET 4.6.1 out-of-the-box, there still needs to be a DLL physically present to point to where the "real" implementation is. The reason why this doesn't happen when you target `net471` is because this situation causes some really weird problems, so one of the major things they did in .NET 4.7.1 is implement those few missing APIs that .NET Standard 2.0 specifies, so that it doesn't need any of this "out-of-band" stuff. &gt;Can i get rid of those dlls? I wouldn't recommend it (if you can't target 4.7.1, that is). The whole point of .NET Standard is so that you can use any of the APIs that are available in your chosen version of the standard, and then any platform that implements that version of the standard can make use of your library. These DLLs (and, I hope, binding redirects in your app's .exe.config file...) are how .NET 4.6.1 gets away with saying it implements .NET Standard 2.0. If you mess with them, then you make it possible for code that compiles just fine to fail at runtime with something like a `MissingMethodException`.
OK, thanks man. Any personal recommendations of websites?
Code ported to C# suffers due to ambiguity. For example here is example C++ code: CObject obj1, obj2; if (obj1 == obj2) // Using overloaded value comparison operator here {} CObject* ptr1 = &amp;obj1; CObject* ptr2 = &amp;obj2; if (ptr1 == ptr2) // pointer comparison here {} Quick port to C#: CObject obj1 = new CObject(), obj2 = new CObject(); if (obj1 == obj2) // Compiles, runs but OOPS it is pointer comparison here {} CObject ptr1 = obj1; CObject ptr2 = obj2; if (ptr1 == ptr2) // pointer comparison here. Port OK {} 
thanks for the detailed explanation. 
meaning you are looking for xamarin devs?
It could be the case where dictionary, if statement or data refactoring is a better choice. After all if there are multiple cases where the same action has to be performed for multiple values then maybe values do not reflect the functionality. 
hey Mspekkio, Apologies for the late reply, holiday season. Thanks for the great insight. Much appreciated.
Send me the $500 for consulting services. ;)
I'm a dev who is comfortable working in xamarin, but there are no xamarin jobs in my area -- interested in relocation.
Resharper obviously. Beyond compare- Much better for conparing files, folders etc for merging than VS default. Linqpad id you do anything linq/ef/linq to sql related, or just want to spin up a quick 'see if it works'.
been known/called ternary since K&amp;R C89 baby in C# official docs its called operational tho
&gt; In computer science, a ternary operator is an operator that takes three arguments. The arguments and result can be of different types. Many programming languages that use C-like syntax feature a ternary operator, ?: , which defines a conditional expression. via wiki i mean its also a __kind of__ ternary operator, and that word has been around since K&amp;R C book, so its a ternary operator.
After a bit of frustration with IL, I dug out my old building blocks. For the first time in almost two decades, they're seeing use again x)
It is indeed amazing! I remember first hearing about it and was so excited. (Creating UWP business apps, we had to use a web service to connect to the database - but not any more!). UWP is really starting to mature, and I'm excited. (I'm hoping for more WPF xaml goodies next).
What's the relationship between IL and coloured blocks? 
This is a short hand for an if/else statement. If the player side is equal to "X" then change it to equal "O". Else, change the player side to "X"
O’Reilly Safari Books Online. 
Got it already! I have trouble watching videos straight through, but I'm pecking away.
Great idea. Had no idea it was so reasonable!
That's one of my favorite rabbit holes to hole.
Got LINQPad earlier this year. It is pretty amazing. I use it more than I thought I would. I own PowerGrep from the same company that makes RegexBuddy and it's fantastic for grepping legacy code bases.
Speak for yourself, Jeff.
Forgot that is available separately from the other parts of the suite. I've tried other autocomplete tools, but nothing seems to beat that.
I'm debating getting rid of my two wides and getting a gigantic single monitor. Thoughts?
I love XML. I hate malformed XML, but I don't want to drag HTML into this.
This comment actually just sparked a light bulb for me.
I currently work with 3 side by side and that setup is the best I've had so far.
In my case, no. It is only used in one place and never changes, so setting up a more complex data structure would be counter-productive.
I assume each coloured block corresponds to a different argument loaded on the stack. He can pop/push args (blocks) on the stack to track his variables.
Since IL is completely stack-based and I'm a fairly physical person, having a real stack to manipulate and follow along with was very helpful. 
That and compiling the compiler.
Not a specific website, but a term. Code Kata. You should be able to look up Code Kata C# and find something decent. Again try to work on recognizing the small problems that make up the big problem. That is how you will be able to divide a conquer a problem, to find a solution.
1 large isn't worth the cost IMO for the same screen space you can get from 3 wides. Been using 3 wides for a long time now. 
You could pre-pay for any expected 2018 hosting, domain renewals, or digital certificates. Other than that, books. 
Whatever helps you learn is always best :) 
Try using --no-restore flag. 
Kind of a toss-up. I love my 27" 4k display (would like it more if it was 32-36"). In the past, I've done multi-monitor setups. Had 2x2 of 22" 1080p displays hooked up to three different systems, with two of them driven from a single system, and Synergy to tie it all together with a single mouse/keyboard. Now I prefer the simplicity of a single big 27-32" display. Possibly because I use OS X / Gnome and do a lot of multiple-workspaces instead of multiple screens. By sticking with a single screen, I don't feel completely out of sorts when I'm using just the laptop away from my desk. The muscle memory is already there for flipping left/right between two workspaces. I can flip workspaces fast enough to retain short-term memory and it's actually rare that I put two things on the same screen side-by-side. (Yes I could use the laptop as a 2nd display. But I prefer it closed and sitting safely in the dock away from spills / damage. Plus the LED backlight won't last forever, although far better than the LCD backlights that were at 75% power after 12-18 months.)
Resharper sort of makes my list. Performance is its big weak spot in VS2015 and VS2017. We're considering switching to Rider (for both macOS and Windows). NCrunch is a must-have if you do any sort of test-driven development. Best UI so far for dealing with individual tests and running things automatically as code changes (and only running impacted tests). Plus you see the green code coverage circles and can easily right-click to see what tests cover a block of code. And if a test fails, it puts a red "X" on the line where the test failed (or the code threw an exception). For diff tool, I prefer Meld (which is cross-platform).
I'll second the recommendation on a good office chair. I just replaced mine with a Haworth Fern, and my only regret is that I didn't do it sooner.
Since you're buying it through your LLC, it may cost more. You'd have to check the licensing. 
+1 for Beyond Compare.
what if /u/Jekkeswekke isnt a native english speaker?
MPN is about that price, lots of useful licenses in there.
Am I the only coderush fan? Devexpess if you're looking at alternatives
+1 for beyond compare. Buy it and merge conflicts become easy to resolve. NCruch is also pretty good, live unit tests without having the enterprise version of VS and having code coverage % are some neat features.
I've found nothing better than Beyond Compare for complex 3-way merges. The ability to realign the diff is wonderful! 
* MSDN or Visual Studio Pro subscription (~$800/$550 respectively) * Pluralsight (~$300/yr) * JetBrains All Products Pack (~$200/yr) * Source Control (GitHub ~$90/yr, etc) * GitKraken * Azure credits? 
Then I helped them with proper english?
I think next step is to learn to handle MVVM and Entity Framework, i think those two things are almost universally used across all the fields you said you want to learn next(xamarin, xalm and even wpf), with mvc just being a cousin of mvvm. 
huh, this would be a useful teaching aide, instead of the whole "imagine a stack of plates" 
I wasn't aware of ozcode, looks interesting, thanks :) 
Try not to burn out. Keep learning. Be ready to re-learn the same thing 10-20 years later with minor tweaks and a very hot new name.
It is reasonable for a developer to purchase. You might have to purchase it personally, then have your company re-imburse you for the tax break.
Thanks. I sometimes make up "missing" words if I need them - it's our language, right? For example when I made some window states I chose minimized, maximized and mediumized.
CNTK is available for C# https://docs.microsoft.com/en-us/cognitive-toolkit/NuGet-Package There is also a low level api for Tensors being actively worked on: [System.Numerics.Tensors](https://github.com/dotnet/corefxlab/issues?q=is%3Aopen+is%3Aissue+label%3Aarea-System.Numerics.Tensors) Alternatively there is http://www.aleatk.com (works with CUDA on most modern nvidia gpus) Samples for the MNIST digit classification problem: * CNTK: https://github.com/dotnet-architecture/MNISTTensorCNTK * Aleatk: https://github.com/quantalea/AleaTK/tree/master/tutorial/samples/MNIST 