this is really smart, far too often people forget that entity framework works model first as well as database first. here's an article with a bit of an overview of the basics: http://msdn.microsoft.com/en-us/data/ff830362.aspx
Not needed but if you want to release a library but do not want people to simply take it and use it as their own then it's still useful. 
Really? I feel this is too late. 10 years too late. Do people even care about native anymore? Didn't Delphi die because no one cared about native?
Well C and C++ are still going strong...
&gt; when a class is part of an inheritance chain No, it's not required. Without the `this` prefix, execution will *always* use the current implementation rather than a superclass. Unless, of course, "this" doesn't implement the method/property itself, in which case `this.X()` and `base.X()` are the exact same anyway.
Sorry, I am a bit new. I was following the tutorial here http://www.codeproject.com/Articles/4416/Beginners-guide-to-accessing-SQL-Server-through-C and used some an array to generate more queries. 
Fair enough! That is a 10 year old guide though. Once you've started to understand the SQL and writing of querys, as well as a better understanding of C# and LINQ, you should check out Entity Framework, PetaPoco, Dapper, or any number of other ORM (object relational mappers) frameworks. They each have their advantages and disadvantages, but if you like SQL, you might like the PetaPoco and Dapper routes, whereas if you like C# and LINQ more, you'll probably like Entity Framework more. You should also check out the "Repository Pattern" design pattern, as it will help you organize your data access code in a better manner. Your data access layer is not the place to be writing clever things like what you've described: a method that variously selects on different columns and tables based on input parameters. The most I can see out of what you're describing is creating a strongly typed QueryBuilder type object that simply takes in a table name, column names, and where clauses, then builds each part, in a loop if necessary.
In my opinion, I don't think C# will dominate everything. I think we're stuck with JavaScript and derivatives (typescript, dartlang, coffescript) of JavaScript in the browser. For scientific programming, I suspect C# is overkill. I've never programmed for this field before, however. From the [Thinking for Programmers](https://channel9.msdn.com/Events/Build/2014/3-642) talk, I don't think programming will replace domain-specific languages like [PlusCal](http://research.microsoft.com/en-us/um/people/lamport/tla/pluscal.html). I imagine it would be difficult to write C# code to accomplish the same tasks. I wouldn't mind seeing C# used for video games, trading systems, and on-metal software, but I think it has a ways to go to run like C++. The VM and GC inherently limits some performance. The .NET Native stuff that was announced seems to be a step towards this, however. I would love to be able to write C# code for Android and iOS. We can currently use Xamarin for this, thankfully. I also appreciate that Objective-C and Java exist, as well as the Dalvik VM. Competition is a good thing, and I think it will continue to push C# and the related technologies to improve.
So the essence of you post makes it seem like any restriction on the data should not be in the repository but be applied after the repository return s the data?
Anonymous chat and you would have data in a sql database?
thanks :)
https://xamarin.com is supposed to be good for cross platform mobile development. You can use visual studio and c# with xamarin and I guess you can reuse the code base for a Windows app although the ui would be different I imagine. As for Linux, I'm not so sure...I'm sure someone else here will be able to help. Bear in mind that no development is truly cross platform. There are always ui differences that need accounting for, and that's before you get into different phone models and OS versions.
Probably the easiest way to achieve cross-platform support is via a website, specifically, a web application. The browsers behave largely the same across OSs, although screen size is a factor which is why most big sites have mobile versions. If you are going to make a web application and know c#, I recommend asp.net mvc 5, but of course you'll need to learn html, css and JavaScript for the front end. Of course, depending on your requirements, a web application may not be suitable.
Hey, did this strategy I proposed end up working out for you?
We use Sencha Touch and Phonegap, which uses JavaScript, otherwise Xamarin indeed.
You could look at phonegap too, but I think xamarin might be better with your c# background.
Thanks for all the help guy much appreciated ... I know it's a bit difficult for me to achieve this at this level but I'm willing to achieve this thanks you : )
I am not sure what you are saying. I think what you wanted was : "to use some kind or refactoring to make sure that when I run tests on the Repository interface with 'mock data', the methods will use the same linq query as in the actual implementation, that way I'll be more sure about correctness. Since linq can run the same query on ef entities or objects I can exploit that ". But when you use the Repository interface for testing, you often don't want that at all. You might want to only throw an exception, or provide a specific object, or provide it to all queries even if it is wrong. The purpose is to simulate a specific condition. It's ad hoc etc. Also you are seperately testing the part of the code that doesn't rely on a specific data access technology. If you want to test the actual ef queries, or how they integrate or sth you can just put a test database (meaning the test will be done using ef objects specifically and you don't need to make it more general). If you want to mix and match both it's going to get too general and you'd probably better find some framework for this kind of thing. 
My company uses Mono pretty heavily for cross platform stuff. Mono has a bunch of tools for doing ahead-of-time compilation and static linking, so for each non-windows platform you can get a binary with everything you need in it without external dependencies. You can use anything that's standard .Net, but no WPF. You get Winforms but it looks terrible so you're better off using GTK# for desktop applications. For WinPhone of course you're in C# anyway so that's no issue, for Android/iOS there's the Xamarin stuff (formerly MonoDroid and MonoTouch) which works very well. Mono is free to use (the only caveat being that you have to ship an un-bundled version of your executable along with the bundled version for non-windows platforms to comply with the licence), and the Xamarin stuff for mobile devices is pretty affordable. For reference, Xamarin is the company behind Mono. Mono itself is FOSS but the mobile stuff and their development tools aren't entirely (except for MonoDevelop which is again FOSS)
Take a look to Supersocket. http://www.supersocket.net/ 
I haven't had the chance to implement it but it definitely looks promising. 
Jon is a pretty awesome guy.
I know it's very popular, but unless you are integrating complex queries with an existing database, or want to provide a CRUD-style API like OData (and I realize, this means using ORM "backwards" from the code first model), then I'm not a big fan of ORM. Personally, I prefer the repository model using parameterized queries and / or stored procedures (but I do recommend caution with sprocs as they can be notoriously difficult to debug). Ultimately, it really depends on the specific needs of the application, how many queries are needed and how complex they might need to be, etc, but I personally advise thinking carefully before going with ORM. It's just a personal preference, but I don't like how much ORM works "magic" for me under the hood. I realize that utilizing good external libraries / solutions to take advantage of someone else's hard work is a fundamental tenant of C# / .NET programming, but in some cases, I prefer a little bit more control and flexibility - not to mention, in some cases, depending on your specific implementation, I feel like ORM can be more cumbersome to set up than a repository. 
Now I think that we are on the same track. I will abandon the current approach and set up a testing db to avoid this issue all together.
I agree, I saw him giving a talk about abusing C# at a conference, he's one of those people that can talk technical and be entertaining at the same time. 
Mono seems to be the way people are going forward.
Oh, clever. I am good than.
I don't know how official the link you gave is but: 1. It's old. 2. It's internal. 3. It's a suggestion. The de facto standard among most C# developers is using the underscore. I have looked at a lot of [.Net code](http://referencesource.microsoft.com/) and haven't found a "this" used this way even once. 
With his mastery of C#, I do find it quite funny that he is a Java developer for Google
Read up on Mono first. If you have follow-up questions that aren't answered on the main site, I will do my best to answer them.
Isn't this exactly the same? http://www.reddit.com/r/csharp/comments/229mih/c_6_first_reactions_jon_skeet/
In your use case I see no reason not to use dapper or petapoco then. They are basically thin wrappers around the object/SQL divide and you still write all your queries as SQL. Seems a far sight better than SQL commands then.
&gt; (In case you're wondering: no, there's no reason for the constructor and properties to be public within an internal struct. I'll fix that shortly :) In other news, Jon Skeet deliberates on smileys at the end of parenthetic asides.
He included a southpark reference in C# In Depth. I have a feeling he's got a pretty healthy sense of humor. Even his book is fun to read.
Web Property Creator makes it easy to create properties for web pages and web user controls. Create properties of type View State, Session or Object. To learn visit http://webpropertycreator.codeplex.com 
GUI is pretty specific to the OS, java is the only thing I'm sure of that works cross platform and that's because it ignores the OS's theme and uses it's own ugly one
I asked him about that in SO chat once. He said "I'd rather program in C# than Java, but I'd rather work for Google than anywhere else."
God... why do there have to be SO MANY features added to C#?!
Xamarin, if you can afford it.
GTK# is fairly cross-platform, it may look a bit odd on Mac OS though. Otherwise, if you want a truly native feel, you could always use a native UI library for all the OSes you want to support (ie. WinForms or WPF on Windows, GTK# on Linux). It's more work but would give you a native feel. Your app's business logic shouldn't be coupled with the UI at all, so you should be able to just swap out the UI per platform.
This article does a good job at explaining how automatic properties work and the possible benefits and drawbacks http://www.blackwasp.co.uk/CSharpAutomaticProperties.aspx
I'll be sure to have a read of that when i'm home, thanks man :)
My teacher says it's better practice and looking through other code it seems to be a common thing, I guess I was just wondering if there were any specific advantages. 
OK here's the thing. When you declare the property the 2nd way, the backing field is implicit. I believe C# automatically would use _X as the private backing field. The first way explicitly declares the private field. The only reason to do that is if you need extra logic in your get and set parts. Most properties are just public int X { get; set; } though. If you needed some extra logic then you could do it like this: private int _X; public int X { get { return _X + 5; } set { _X = value * 4 } }
How do you feel about Python's explicit "self"?
Ahh I see, that's clever with the method. Thank you :)
Alright, thank you for explaining deeper. In my program, I have an Item Price which is inside the constructor, I could use { get; set; } to return a new integer called SellPrice to half the buy price. This is cool. Thank you!
I'd never heard of INotifyChanged before, gonna check it out. Thank you :)
I'm so sorry I misspoke, the interface name Is INotifyPropertyChanged. INotifyPropertyChanged interface is used to notify clients, typically binding clients, that a property value has changed. 
I found it on Google but thanks for making the correction anyway. I like learning new things, so thanks for the help :)
You should use decimal instead of int for a price.
Am I the only one who thinks static usings are a really bad idea? IMO, C# needs *more* explicit referencing, not less. The fact that everything you using goes into file scope just begs for conflicts. Adding static usings not only makes this worse, but also makes it even harder to tell what code you're actually referring to with an unqualified function name. I genuinely want somebody to explain why this is awesome, because I have no idea what they're thinking. 
You've got a self-contained example here - cut everything out of 'main' and put into another method, then call that method repeatedly - probably by using a timer . I would post an example, but i've got to do breakfast for the kids!
You're creating characters by taking a random number between 0 and 128. Take a look at this ASCII table: http://www.asciitable.com/ Simply not all characters you are creating a printable. Some, like backspace (#8), can't be shown in the console. Create a number between 33 and 126. As you can see in the ASCII table, all the characters are printable and easy writeable on an average keyboard.
It's because you are generating characters in the range from 0 to 127. See: http://www.asciitable.com/. Some of those characters include new lines and other invisible characters. Here's an alternative version: http://pastebin.com/GKfJ0J8n. It only uses characters in the range from 32-126. Note the changed "random.Next()" call. I also removed the character buffer because it is not required (unless there is a specific reason you are using it).
Windows probably can't display all Unicode characters, or at least probably doesn't have fonts for some, but that's not your problem. Your problem is that a bunch of characters in the range you're generating are control characters and just don't have an associated glyph. For instance the "character" represented by the value 8 is backspace - how would you propose Windows "display" that? In general, generating numeric values and expecting them to be valid characters isn't a good way of doing things. Encoding characters is correctly is surprisingly difficult (e.g. http://en.wikipedia.org/wiki/UTF-8#Description) and can (and has) change. What you want to do is figure out which characters you want the passwords generated from, and create a mapping from a numeric indices to characters (for instance by putting the valid characters in an array and indexing into that array). Other things: it looks like this is practice from a book, so I'm not going to criticize the choice of problem, however: - Don't use ArrayList - it doesn't provide any type safety, and can be slower to boot. Use List&lt;T&gt; instead (e.g. List&lt;string&gt; passwords = new List&lt;string&gt;()) http://stackoverflow.com/questions/2309694/arraylist-vs-list-in-c-sharp. - There's an easier way to make a string out of a char array - passwordString = new string(passChars) is all you need. In general (if you have an array of objects) string.Join is a more readable way of doing that. No need to reinvent the wheel. - Random is fine for academic exercises, scripts, simple games, etc, but it is not a good thing to use for generating passwords - you need better randomness for that (System.Security.Cryptography.RNGCryptoServiceProvider). If you got the idea to use ArrayList from your book, then you need to get a different/new book. If your book was written after .NET 2 was released, then the author doesn't know what he's talking about and you shouldn't listen to him. If your book was written before, then it's horribly outdated and doesn't really cover C# properly. Either way - try a different learning resource. 
I agree-I'd like explicit imports. I also want static using though :)
In many cases it's more convenient to represent money as cents in integer values.
I would say your teacher is wrong. Auto-properties are usually preferred when possible.
&gt; As you can see in the ASCII table, all the characters are printable and easy writeable on an average keyboard. Please note that this only applies to US keyboard users (and programmers). If you have to generate passwords for international users, it's better to limit oneself to `a-zA-Z0-9` and add only commonly used interpunction. Use your judgement, `.,?!()` should be fine everywhere, `'"#$*` not so much.
Example: using Newtonsoft.Json; using System; using System.IO; using System.Net; using System.Threading; namespace webrequestexample { class Program { //timer to repeatedly call the 'DoRequest' function private static Timer timer = new Timer(DoRequest, null, 0, 0); static void Main(string[] args) { //any key to exit Console.ReadKey(); } public static void DoRequest(object o) { timer.Change(5000, 0); // Create a request for the URL. WebRequest request = WebRequest.Create("https://btc-e.com/api/2/btc_eur/ticker"); // If required by the server, set the credentials. request.Credentials = CredentialCache.DefaultCredentials; // Get the response. HttpWebResponse response = (HttpWebResponse)request.GetResponse(); // Display the status. Console.WriteLine(response.StatusDescription); // Get the stream containing content returned by the server. Stream dataStream = response.GetResponseStream(); // Open the stream using a StreamReader for easy access. StreamReader reader = new StreamReader(dataStream); // Read the content. string responseFromServer = reader.ReadToEnd(); // Display the content. Console.WriteLine(responseFromServer); // Cleanup the streams and the response. reader.Close(); dataStream.Close(); RootObject obj = JsonConvert.DeserializeObject&lt;RootObject&gt;(responseFromServer); Console.WriteLine(); Console.WriteLine("High: " + obj.ticker.high); Console.WriteLine("Low: " + obj.ticker.low); Console.WriteLine("Avg: " + obj.ticker.avg); Console.WriteLine("Vol: " + obj.ticker.vol); Console.WriteLine("Vol_Cur: " + obj.ticker.vol_cur); Console.WriteLine("Last " + obj.ticker.last); Console.WriteLine("Buy: " + obj.ticker.buy); Console.WriteLine("Sell: " + obj.ticker.sell); Console.WriteLine("Updated: " + obj.ticker.updated); Console.WriteLine("Server_Time: " + obj.ticker.server_time); Console.ReadKey(); response.Close(); } } public class RootObject { public Ticker ticker { get; set; } } public class Ticker { public double high { get; set; } public double low { get; set; } public double avg { get; set; } public double vol { get; set; } public double vol_cur { get; set; } public double last { get; set; } public double buy { get; set; } public double sell { get; set; } public int updated { get; set; } public string server_time { get; set; } } } 
My first response was timer, came to checkout better answers. Glad I'm still 'with it'
Another stupid cheap way would be to simply iterate through the json, making ALTER TABLE ADD &lt;key&gt; NVARCHAR columns. Then iterate again inserting the data. That's stupid lazy, though, and all your content will be strings in SQL. It's not going to be a good back-end for maintainability (VARCHAR where int/money/date should have been). edit: You'll run into more problems, as well - if your JSON isn't flat. I'd really recommend you shortcut it using Model First with Entity, like /u/rjbwork suggested.
I agree. The functionality is effectively the same and has much improved readability.
In these situations, as others have pointed out programmatically - is that you're getting a boolean back (true or false state). We use old elementary math on this, if you remember: Two positives make a positive. or Two "true"s are still "true" So it's asking -- in basic english: if the keyboard state is a key down and the last keyboardstate was a key up, then return true. If any one of those was negative/false, then it'd return false. The beauty of the &amp;&amp; operator is that it's a short-circuit operator. Meaning if the left-hand already evaluates false, it doesn't test the right hand. This is *great* when we enter null realms. Stuff like (pseudo): If (my_int is !null &amp;&amp; my_int.ToString().length==5) { testing string/length on a null would blow up in your face. This way it'll bomb out of the test on the left, and not even try testing the right (which would lead to an exception if it was null)
You have a lock around the foreach here, but do you have a lock around *every other* place where you access the collection? 
Oh, no I didn't, I understood that locking was there for this exact reason: To Block any kind of access to the Arraylist until you reached the closing bracket of the lock statement? besides that, is the way I do it now (with the conversion to array), okay or should I still be aware of any points of failure? 
In a multi-threaded environment, you need to protect every access to the shared data (often with a lock). If you miss just one ... you have no protection at all. Copying to the array is fine. But realize that it's a shallow copy -- you're copying the arraylist, but not the contents. So another thread could change the contents of one of your structs out from under you. Which you may or may not care about, depending on what you're doing. 
It's for object placement and saving in a game, up until now every placement was equal to a threadcall and write to a file. I somehow had worries that this is bad for my harddrive and want to accumulate objects and save them together, rather than each one on its own to reduce harddrive writes. So now instead of just calling the saving thread for each object, i add them to an arraylist first and when i reach a certain length i send it to the save function.
I understand what was happening now. Thank you. 
Use the Stopwatch class to time how long each approach takes. Also, if all your objects are going into the same file, order them by their byte offset so the hard drive head doesn't have to re-seek all that often. Also also - many gamers are going to SSDs. They essentially have zero seek time, so random access isn't a problem, performance-wise. 
Unless this is a sample stock ticker, I would be very afraid to use anything you make for real investments. 
It's not an example from a book. I just wanted to try and make something. I've only been learning how to program for a little while. I haven't learned what List&lt;T&gt; is and what it does yet but I do know that the book that I do have covers it a little later from where I am currently at. Thanks for all the input, it has given me new things to look into and was informative. 
A productive answer would include saying why.
It's a simple game where the currency is just gold, I don't have cents or any decimal numbers so I don't need to represent it as a decimal - but thank you anyway, that's noted. :)
Okay, I understand that. I'll take a look into this some more, thanks for the help man :)
Okay, thanks :)
I am struggling with this now trying to fetch data from the Harvest API. I can easily load every project with one API call, but every project I want to do anything with requires another 2 API calls. The API has a slow response time and is throttled if I make too many requests. This forces me to implement a local cache for everything in order to minimize API calls.
an you expand a bit on why this application would require a CSPRNG? It's not like anyone can predict this as far as I understand. Maybe I'm missing something though. 
Can I ask, what's the (MyClass) in the return for?
A couple of suggestions, if I may. You should probably use List&lt;T&gt; rather than ArrayList, as it tends to perform better. See the **Remarks / Performance Considerations** section of [this](http://msdn.microsoft.com/en-us/library/6sh2ey19%28v=vs.110%29.aspx) page. Also, there's no need for the `foreach` loop; you could just output the generated string in the `for` loop.
Well you could make that complaint about just about any feature...
For what it's worth, there is a ready made GeneratePassword method in System.Web.Security.Membership (IIRC) which I would use in production over a homespun method. 
Why might it be a problem for an application whose purpose is to generate passwords to have certain predictable patterns in its output? I think you can figure this out if you think about it. 
But it's exactly the "bit more effort" that makes read only auto-properties worthwhile. With indexed member access we're talking about *three characters* of saved effort. There's got to be something I'm missing, because it's just not a worthwhile feature to save three characters.
Well it's syntactic sugar. I can do it like this ; "i = i + 5" But I prefer this ; "i += 5" Because it's eye candy.Easy to understand and easy to write.
It is now refactorable. Before you had more effort. Does this qualify your argumentation now?
Thanks for pointing that out. The .Net framework is so huge, it's hard for a beginner like me to know where to look sometimes. 
Hard drive, no. SSDs are indeed write limited - after a while they'll stop working and start producing errors because the memory cells wear out. There are technologies to limit this (TRIM support) but eventually it will happen to all of them. Known issue. 
It's a cast. The private member m_MyClass is nullable (following a class or struct with a question mark is the same as declaring Nullable&lt;MyClass&gt;), we need to cast m_MyClass to a MyClass object. It could also be written as: return (m_MyClass as MyClass);
Frankly I think that the success of Razor has shown that C# programmers in general are happy with structural (or at least semi-structural) macros. I think it's about time we cut to the chase and gave C# a proper macro system; probably at least half of the improvements made in the last two revisions (4 &amp; 5) could have been wrapped up by a macro package.
If 100% of your input is from a trusted source it's not an unreasonable strategy.
Well, this is exactly the point of this article. And it gets even tougher if you have to make more calls.
No this is just a sample application for my new assignment and thanks for the concern 
Very much appreciated : )
I'm guessing the people who will be using indexed members in that way aren't the same people who understand the importance of const keys...
Yeah, maybe, but I'd rather they not avoid them for that reason. 
To be fair magnetic drives also have an average number of uses to failure. 
This screams "student work," especially the way every line is commented.
Some unrelated style issues: * You can probably use using statements for all the things you're hand-closing. This is the same as using try-catch-finally so your resources get disposed of even if your code throws an exception. * I'm assuming your class requires you to comment every line, but as a general practice you should only comment lines where it is not obvious what you're doing or why you're doing it, rather than simply reiterating what your program does. * For public properties the usual convention followed in C# is PascalCase, not lowercase with underscores. * As others have already said, use Decimal for currency to avoid floating point rounding errors.
Good luck. I recommend SignalR for your updates with a push mechanism from the server. Never poll a data source if you can help it. 
Can't stress this enough. 
Also, learn AngularJS 
&gt; In your repository you are writing an SQL query using LINQ as the DSL, and not all LINQ expressions valid for an object graph can be translated from LINQ into valid SQL. On top of that, Entity validation exceptions won't be thrown until you try to write to database and some of them aren't obvious (for instance, thanks to lazy initialization, it can complain about null fields on records it's pulled out of the database for you).
MVC 5 uses Bootstrap by default which is responsive, so you don't need to think too much about mobile if you don't go changing things around.
On a related note, for the sake of people who have to work on your code, please don't put side effects in accessors and mutators.
MyClass is probably a reference type so the nullable operator is probably not needed. Anyway you can probably just write get { return m_MyClass ?? (m_MyClass = InitMyClass()); }
So I confess I'm pretty ignorant about this. I'm assuming you have to write your code in a different way to do this? Or is it just a different compiler?
I don't know much about this particular project, but to be truly useful for "everything" you'll have to accept some subset of it... for instance, real-time systems and garbage collection don't mix, so now we need a version of C# with manual memory management, and maybe some features are too expensive, and eventually you've lost the productivity benefits that made it more attractive than C++.
R# prefers a leading underscore by default. 
Have you stepped through? What exactly is wrong?
You can make a class go through a whole method chain using expressions which is less syntactically noisy... I did this for work. 
 I've tried stepping through. The person's name isn't changing each time I enter a name. Plus, the loop within InputData isn't exiting correctly. I don't think it is storing the data into the respective arrays either. I'm so confused and frustrated. I've been trying to figure my bugs out all day. I have no syntax errors or warnings, the logic just isn't working right. I would assume that the logic in other areas isn't either, but I can't execute much further than the InputData method. 
Overkill because most scientific programs I've seen are procedural, take an input, and produce an output. They don't need the organizational concepts that C# provides. Again, though, I've never programmed in that field.
I believe you can achieve manual memory management with the [`unsafe`](http://msdn.microsoft.com/en-us/library/chfa2zb8.aspx) keyword. With the addition of the .NET Native compiler, that gets us right on bare metal. You could develop a real-time application in C#, but it's probably not the right choice of language.
When a piece of code falls over during execution of one monstrous Linq expression it's a nightmare to debug. At the worst of times I end up extracting out all the linq stuff and rewriting it to do the same thing to figure out which part of the expression broke. Maybe I'm doing it wrong.
Why are you making some many calls to Console.ReadLine() instead of calling it once and storing the value to a variable? That's your problem. Something like this; you can work out the details: var i = 0; var playerName = Console.ReadLine(); while (playerName.ToLowerInvariant() != "q") { playerArray[i] = playerName; var score = int.Parse(Console.ReadLine()); playerScores[i] = score; i++; playerName = Console.ReadLine(); }
Because I'm a beginner and I am having a hard time understanding how to accomplish what you know so well... Where are you seeing this as an issue? Can you give me an example of what I should be doing? I do a lot better if I can get an example or if I can be walked through the issue. Thanks again. 
[This](http://blogs.msdn.com/b/ericlippert/archive/2009/05/21/in-foof-we-trust-a-dialogue.aspx) was linked in the answer page. An interesting read.
I edited in an example of what I'm talking about.
I did this exact Lab. I'm not going to give you the whole thing but I'll give you my declared variables and maybe it will help you. string[] playerName = new string[100]; int[] playerScore = new int[100]; int c = 0; c = InputData(ref playerName, ref playerScore); double avg = CalculateAverageScore(ref playerScore, c); Console.WriteLine("Average Num:" + avg + "\n"); Console.WriteLine("All Info："); DisplayPlayerData(ref playerName, ref playerScore, c); Console.WriteLine(); Console.WriteLine("Below Average Info："); DisplayBelowAverage(avg, ref playerName, ref playerScore, c);
I don't think so... if the user says Q to quit the first time the loop shouldn't run.
You have the exact same problem. You're calling Console.ReadLine() over and over again, but not storing the return value. Just write var input = Console.ReadLine() or something like that and now input is a string representing the STDIN input you got from the user. If you don't capture it it isn't saved.
Oh. Well that code will actually call ReadLine once, or twice if you enter "Q", storing it neither time.
I tried the exact code that you gave me and received the same output. I'm sorry, but I just don't get it the way that you are explaining to me. I know I'm an idiot...
when I step through the code, it highlights playerNameAr and playerNameAr[i] = playerName; when I enter a player's name. Does that mean that it is storing the variable? 
When the code is on a breakpoint, you can mouse over the variable or right-click it and select quickwatch. Or you can use the immediate window. Any of these will allow you to see a variable's current value. The red is telling you that's the next statement to be executed.
only readline when you are assigning it to something. You have 2 cases in your code where you read line and store it to nothing. These are worthless. You have no code in here for ascending order or descending order. If your professor allows you to use linq this can become one of your easiest part just look up orderby and orderbydescending. When asking questions next time dont come in here with pasted code and say im having logic issues this is the same as code dont work fix pls! Most people are not as nice as me and will drill you for not trying and actually learn this stuff on your own by debugging. Next time when writing code actually test the code while your writing it and only add 1 new thing at a time and this will never happen. 
You're wrong about the string comparison. == is fine in C#. http://stackoverflow.com/a/1659107
I have used [http://hostforlife.eu](http://hostforlife.eu) and loved it. I've had a really good experience with them.They support ASP.NET 4-5 &amp; MVC. Hope that helps! 
Well that's a pretty shitty pitfall in the first place... 
I've read somewhere non-authoritive - reddit perhaps - that this is related to spin-ups rather than writes?
JSON isn't the best way, it's the easiest way.
What about it? 
1. That's a collection initializer (as /u/Fetze mentioned below), which just calls the `Add` method. Some custom classes may define an indexer but not an `Add` method. 2. You can combine dictionary initializers with property initializers (if I remember the demo right): new CustomDictionary{ $x = "hello", CaseSensitive = true };
&gt; but keep using ["blah"] for dynamic indices Or keeping `["blah blah"]` for indices with spaces or those that contain any other non alphanumeric characters. `obj.$city, state, zip` as an indexer shortcut is frightening if allowed.
&gt; Easy to understand Not really that simple IMHO. You now have a new character that would have previously caused a compilation error and an intellisense error. Everyone who programs in C# (and all those who produce IDE's that support writing in this language) now has to learn that this new `$` character represents an indexer shortcut. `x += y` has long been established and is almost universal in most popular programming languages. A sudden introduction of `$` intended solely as a dictionary indexing shortcut is brand new.
If you used constants for your indexer values, it was already refactorable. And don't forget that find/replace actually works pretty damn well in a pinch. I still see no good reason for this "feature" (ptooie!).
It looks like it's an AOT compiler that goes through MSIL -&gt; VC++ (unknown how) -&gt; Native (plus GC?). The result does not require the .NET runtime.
Well I once wrote a LINQ query that had 3 nested GroupBy() to create Dictionary&lt;string, Dictionary&lt;string, Dictionary&lt;string,object&gt;&gt;&gt; along with significant other Where conditions etc, all in a single line. I have a 3 screen setup and even with maximizing the code pane over all 3 screens it couldn't fit on the screen. Safe to say that's pretty horrible, even if it works. Breaking it down into multiple statements with some temporary variables (that are aptly named and explain what the result is) is usually a good thing.
I have [my own open-source project](http://youcast.codeplex.com/). So technically... yes. 
They implemented the [comma operator](http://en.wikipedia.org/wiki/Comma_operator) in C and C++. I think the most useful use case is for out-parameters. public bool TryFoo(out int result) { if(Universe.IsRandom()) { result = Rand.Next(); return true; } result = 42; return false; } vs. public bool TryFoo(out int result) { if(Universe.IsRandom()) return (result = Rand.Next(); true); return (result = 42; false); }
As said, it will jit your pieces of code once it has to execute them for the first time. You can pre-compile your assemblies on a particular machine using NGEN, see http://msdn.microsoft.com/en-us/library/6t9t5wcf(v=vs.110).aspx for more info :) 
Well the performance is definitely most harmed by those but I don't know about lifetime. Not that it matters; you need to do both.
List&lt;T&gt; is part of the BCL (Base Class Library) which is created by microsoft. so you can trust them when it comes to stability when you use the type properly :) Performance wise you gain the benefit of not having to box and unbox value types. And of course you get to work with a strongly typed type, not having to cast everytime you want to use an object in your list. There are plenty of collection types, including ConcurrentList, ImmutableList / ImmutableArray etc. choose the right tool for the right job :) but im pretty sure ArrayList is never the right answer.
It's just the canonical example of a petty, unimportant argument.
Hope that works well :)
You can't return from a "finally" block so this won't compile. Say you decide to use a string variable to hold the results instead. string x = ""; try { throw (new System.Exception("b")); x = "a"; } catch(System.Exception e) { x = e.Message; } finally { x = "c"; } x would end up always being "c" because the finally block is always the last thing executed. If you removed the finally block your return would be "b". The line "x = "a"" will effectively never be touched as it will always exit that statement because of the thrown exception. As far as learning the language I suggest you have a look at the links on the side of this subreddit in order to gauge yourself for where you need to be. C# Fundamentals should get you going. I'm not sure whether it's frowned upon or not but I liked [Jamie Kings videos](http://computersciencevideos.org/Playlists).
Even if you trust the source, are you vetting **every** piece of data you're concatenating into the string? For example, name &amp; address data. One name with an apostrophe in it and your query breaks. It may not be an injection attack, but your code **will** fail, unless you start writing code to escape strings, which won't be perfect, and at that point...well, you were just better off using a prepared statement in the first place.
&gt; You can't return from a "finally" block That's why I need courses :D because in java you can return like this AFAIK.
Thanks ;) I'm developing in Visual Studio 2012 Professional for almost 3 years now :) and I have been making software here and there with C# in those years, but I still know nothing about C# :) mainly C++
The links in [this post](http://programmers.stackexchange.com/questions/74165/is-learning-c-easy-when-you-already-know-c) cover the language differences between C# and C++. The real value with C# is the huge .NET framework that is available. You can start here and read about it: http://msdn.microsoft.com/library/vstudio/hh156542
Thanks
There is a great series for beginning C# developers on Microsoft's channel 9: http://channel9.msdn.com/Series/C-Sharp-Fundamentals-Development-for-Absolute-Beginners good luck! :)
Has anyone used this with an NHibernate-based project which autogenerates schema from the mapping? Can the migrations be autogenerated?
Not really what I meant by trusted.
Perhaps send it as a JSON string your client can then parse?
If it didn't it wouldn't be much use.
I should add this is just a uni project so both the client and server are in the same solution. I'm a beginner user and never used anything like JSON mostly been using the things stored in stsyem.IO
Would I be best using this method or would it be better to try and concatenate the array?
ideally I want to take my array values and have them formatted into a single string as file1 file2 file3 file4 
Is this what you wanted? stringsArray = new[] {"file1", "file2", "file3", "file4",}; return string.Join('\n', stringsArray);
got it to work with concat.string(filepaths); but it send it as one big blob can I format it while still using concatenation? also I apologise for going against your advice it was just this was was something I was already looking into and seemed much shorter
got it to work with concat.string(filepaths); but it send it as one big blob can I format it while still using concatenation? also I apologise for going against your advice it was just this was was something I was already looking into and seemed much shorter
It's cool. Maybe using [string.join](http://msdn.microsoft.com/en-us/library/57a79xd0\(v=vs.110\).aspx) might be easier for you, that way you can set a delimiter like ',' or '#' and then split it up later in your client like in my code example above. 
Final time I promise I have the current errors with your .join method http://snag.gy/RFlMP.jpg hope the image gives a better idea of the project as well
Yes you can format it any way you like. When you do custom formatting, the thing is that both the server and the client need to know how the data is formatted. So they can both know how to handle it. It is easier IMO to use a library to handle the serialization (check out json.net) and then format it for viewing before you display. If you wanted to format your output like that, change my string.join("|",files) to be a string.join(Environment.NewLine,files) Using Json.NET you can do something like this: DirectoryInfo di = new DirectoryInfo(System.Environment.CurrentDirectory); var files = di.GetFiles().Select(x=&gt;x.FullName).ToList(); var jsonFiles = JsonConvert.SerializeObject(files); var reconstitutedArray = JsonConvert.DeserializeObject&lt;List&lt;string&gt;&gt;(jsonFiles);
From the article, it looks like most, but not all features will be supported. They didn't specify exactly what, but I believe all of the basic stuff should "just work". The things that may not work are dynamic compilation / loading dlls on the fly, etc. They built a .NET profile for use with Native that should explicitly disallow those features.
Looks nice, very similar to code first migrations
Can you show us the code you're using to save and load the XML? DarkNation is correct - this is most likely an encoding issue.
Well if you need any help / guidance, shoot me a pm. I have been developing in C# for a number of years now, and I am always willing to lend a hand!
This is essentially the equivalent of ViewData["Message"] vs ViewBag.Message in MVC then (with no intellisense).
Woops, forgot to add that. new WebClient().DownloadString(link); (link is just a variable that stores the link to the xml file in a website) I get and save two xml files in which one of the xml text that I save i actually add two new elements, but both are still affected. XmlTextWriter infoWriter = new XmlTextWriter(@"C:\test.xml", null); infoWriter.Formatting = Formatting.Indented; infoWriter.WriteStartDocument(); infoWriter.WriteStartElement("Data"); infoWriter.WriteRaw("\n" + data.ToString() + "\n"); infoWriter.WriteEndElement(); infoWriter.Close(); "data" is where I save the original XML elements into, var data= xmlDoc.Elements("Data").ElementAt(0);
Thank! I intend to start from basics over the summer could you recommend any good books or resources?
If you decide to start contributing, take a look at http://up-for-grabs.net for projects that have tasks specifically geared towards new contributors. In addition, if you don't have the time to contribute code, you can always contribute with documentation, issues, etc.
The easiest way is probably to implement it as a simple [REST server](https://en.wikipedia.org/wiki/Representational_state_transfer). The ASP.net framework makes it extremely easy. Within the android app, you'd just use your normal HTTP requests, as if you were accessing a website. For instance, to set the volume, you might `POST` to `http://myserver/volume` with the required volume as data. A `GET` to the same url would return a representation (probably JSON) of the current volume. Edit: using ASP.net would require IIS to be installed and running, but if you've got VS, it may already be up. There are smaller ASP.net servers, like [TinyWebServer](http://www.codeproject.com/Articles/21343/TinyWebServer-an-ideal-portable-webserver-for-ASP) Or you could just use something like [System.Web.HttpServer](http://msdn.microsoft.com/en-us/library/system.web.http.httpserver\(v=vs.118\).aspx), and let that handle all the complexities of netowrking. 
I understand your argument to be that any syntax changes whatsoever would cause a disturbance and require the programming community to catch up. If that's your argument, then I think you are absolutely right. Introducing any new syntax will have a slow start or meager acceptance by the community at the beginning. However, that argument is weighted by what problems the enhancement solves vs how much work needs to be done by all language users to accommodate the change vs what problems this change creates. We're talking about brand new syntax which saves exactly 3 keystrokes per hard-coded dictionary key reference, vs updating all IDE's to recognize this new syntax and all users to learn about it. Edit: also weighted against solutions that already exist. Although bending the rules of a strongly typed language, it doesn't add brand new character meaning: [ExpandoObject](http://msdn.microsoft.com/en-us/library/system.dynamic.expandoobject%28v=vs.110%29.aspx).
Another problem I think here is when one section of this statement(?) throws an exception, what does the IDE allow you to view now during debugging since you have multiple statements or method calls on a single line. What does the stack say? To compare: Linq has a tendency of enticing you to squeeze everything into a single line of code. As a result, debugging which method threw the exception and why, and determining what bad values were passed on to the faulting method can cause a bit of pain.
ehh most things like this wind up being vulnerable though, so I just wnated to ask. Remember when the .net datasources came out with 2.0? I remember those were all vulnerable unless you explicitly took action.
I would love to see people start up a ReSharper competitor, preferably open source, based on Roslyn. I think it could be far faster and more capable. IntelliJ does great work, but Roslyn is showing some massive potential. Plus competition is always good! If you liked this presentation watch the one on Web Essentials from Mads Kristensen. 
I'm very very new to C# so this could be completely wrong but I think you wrote &gt; if (myStudent.standing &lt; 1 &amp;&amp; myStudent.standing &gt; 4) When it should be &gt; if (myStudent.standing &lt; 1 || myStudent.standing &gt; 4) I could be wrong but I think the error is because your if statement depends on a number being both less than 1 and greater than for rather than just an or.
Uh oh yeah. Thanks for bringing that to my attention. That certainly made the solution I implemented a little less messy!
With the &amp;&amp; wont it just skip over the second part if the first one is false since it then thinks the second must be true(or something like that)? I am going to be learning c# soon and I thought I had read that but like you I could be completely wrong since I don't really know much about c#.
Why do you build up an own XML structure, when you already have XML? Are you actually aware of what you're doing? If you get XML and want to save it as is, just use this: File.WriteAllText(file, text);
It skips the right hand expression because it's irrelevant when the left hand is false. Edit: || will do the same if the left hand is true.
 myStudent.standing = (StandingEnum)Convert.ToByte(Console.ReadLine()); if (myStudent.standing &lt; 1 &amp;&amp; myStudent.standing &gt; 4) { ... } The problem here is that `standing` is of type `StandingEnum`, but you're trying to compare it to `1` and `4`, which are both of type `int`. The compiler complains that you're trying to compare two different types. One solution is simple to cast your enum `standing` to `int` and compare it then: myStudent.standing = (StandingEnum)Convert.ToByte(Console.ReadLine()); var standingAsInt = (int)myStudent.standing; if (standingAsInt &lt; 1 &amp;&amp; standingAsInt &gt; 4) { ... } This is probably also the implication you're expected to use in your homework. However, there is one better solution: myStudent.standing = (StandingEnum)Convert.ToByte(Console.ReadLine()); if (Enum.IsDefined(typeof(StandingEnum), myStudent.standing)) { ... } `Enim.IsDefined` will check if the second argument is defined in the enum passed in the first argument. Imagine you're extending your enum by another value. With the first implementation you have to adjust the control statement. With the second implementation you don't have to adjust anything. :-)
Thank you for that. I really appreciate the help. 
Or, if you're using Windows Store apps... (though I think it works with any .Net code) http://blogs.msdn.com/b/dotnet/archive/2014/04/02/announcing-net-native-preview.aspx
Roslyn is definitely a game changer, and will enable people not only to extend Visual Studio, but also to enable new language features without having to wait for a C# language offical release. Good times are coming :)
First release only supports windows store apps :/
Hey thanks to all of you. I took a look on at Xamarin's Mono and it's pretty good :D 70% reusable code is more than fine to me :D
I wish I had the time to do this. But some projects also have a very high level of abstraction, and to get up to speed you need to do some serious reading. I hope to one day be able to either start my own Open Source project or contribute to one or two existing ones.
Step 1) Understand the HTTP protocol and how to request web resources. Step 2) Know how to access HTTP in C# (e.g. `WebClient´ class). Step 3) Read the documentation of the API you want to access. Step 4) Combine the knowledge. It's really not difficult at all.
Thank you, now I know where to start.
Because I add new elements and remove the first line when I first get it from the website &lt;?xml version="1.0"?&gt; which I re-add
Read the docs, understand HTTP. But for GitHub? Try Octokit: https://www.nuget.org/packages/Octokit/
You should have mentioned that. Anyway, your encoding is wrong. Check what encoding the file is you get, and how to define the encoding for the textwriter.
I'll like to keep external dependencies to a minimum, but if I can't work out the API, I will consider it. Thanks!
You'll probably want something that isn't webclient if you're doing the raw HTTP anyway - at the very least, Microsoft.Net.Http. OctoKit is semi-official. Phil Haack wrote it, and he works at GitHub. I believe it's what's behind GitHub for Windows.
I think I can work out how Microsoft.Net.Http works. I might use that. What's bad about WebClient? Currently I'm using WebClient.DownloadString and parsing it through HtmlAgilityPack and it seems to work.
WebClient will work - it's just a pretty crufty API (not exactly pretty code) - doesn't have first class restful concepts, doesn't support Async elegantly and isn't great for testability. Microsoft.Net.Http is "the way to go, using pure Microsoft stuff, for web requests" in modern .NET. W.r.t parsing a string with HtmlAgilityPack, correct me if I'm wrong, but the GitHub API is all json? Regardless, HtmlAgilityPack really isn't suitable for that job - it's got a whole bunch of other DOM related concerns. You just want to map the API call response DTOs (json/xml/whatever) to a class, and straight deserialize. What are you using in the Agility Pack and why?
There's a distinct difference between using a RESTful API and screen scraping - any code you right like this is going to be super brittle - the smallest markup change could blow it out. Is there something you can't get from the GitHub API that you need?
Oh, I know. That's why I want to learn how to use the API. I used WebClient+HtmlAgilityPack just to get it working, I don't intend to keep it.
Yup. I'm using it right now actually, I might keep it. Very good.
Thank you and I completely understand your argument.I think this change is not gonna be in the final release or it doesn't have to be and it's not that important either.
Visual Studio isn't open source.
In this talk they refer to the Roslyn talk. Is that up yet?
If you are just learning how to code, http://www.codecademy.com/ has some great resources. I have also heard good things about http://learn.code.org/ If you are just trying to resharpen your skill set, I highly recommend pluralsight.
It also elides the encoding from the processing instruction it emits. Try round-tripping some known good XML that contains the problem characters. If you can load and save a UTF-8 XML file you created and the special characters aren't mangled, then it could be that your source data's encoding isn't what it says it is. The key to debugging problems like this is to try to narrow the issue down as much as you can. Restrict inputs and complexity until the problem disappears, then work backwards until it reappears. That should give you a good idea of what specifically is going wrong.
You almost have it, you have it read the file and populate arrays, your search is a bit weak, but for purposes of homework it is doable. So from your button_click call your SeqSearch() and if that returns something other the -1, show the message box.
1. Use MVC. WebForms is dieing (as it should). 2. If you don't have a business case for a dynamically updated menu, **don't create one**. You're going to have to add/update code for any new menu-linked page anyway, so putting it into the DB just adds a lot of unnecessary junk around a simple link hierarchy. 3. [Sitemap](http://www.w3schools.com/aspnet/aspnet_navigation.asp). You can have a flexible menu, all you need to do to change the menu structure is update the .sitemap file. It's even extensible enough to allow you to set user permission keys on a node, and can easily build your own custom attributes and logic around it.
`&lt;!-- #include file="menu.asp" --&gt;` http://msdn.microsoft.com/en-us/library/ms524876.aspx
In WebForms you can create [MasterPages](http://msdn.microsoft.com/en-us/library/wtxbf3hh.ASPX) which are a sort of template that other pages can use. If you place your menu inside the master page and have your existing pages inheriting from the new master page - you will only have to edit the menu items once. Instead of once for each page in your application.
This also lets you eliminate the 'bool found' part from your SeqSearch function and turn your while loop into a for loop: as soon as you find the name, return the position from the function. If it isn't found, return -1. Then, as [tostrij](http://www.reddit.com/user/tostrinj) said, evaluate the value returned from the function to determine whether to show the messagebox. Edit: just remembered you might not know what a for loop is yet. My bad.
&gt; You primarily need to tie all your functions together. Right: the code you have in the 'displayButton_Click' function should probably be called at the beginning of the program. If it's a webpage, that would most likely be Page_Load; if it's a client application, it's Form_Load. This will require you to declare the arrays outside of the function, so that they persist beyond the function where they get populated. Technically, you could: 1. Create the name arrays 2. Read the 400 names from the file 3. Populate the arrays 4. Call SeqSearch every time you click 'DisplayButton', but then you're reading the names in *every time* you want to search a name. Declaring the arrays outside of a function means they persist after the function is over, so that once they're read in, you can search for names all day without having to reload the arrays. Then, you'll need another function that gets called when you click the button (I would guess THIS is what you need in the displayButton_Click function, assuming 'displayButton' is the button to make the messageboxes appear)--this is the last thing you'll need to write. It should check each name in the SeqSearch function and display the messageboxes accordingly. One last thing: if you've learned it yet, it would be following good coding convention to pass the array to SeqSearch by reference instead of by value. Good luck!
Seems like the simplest change, and one that should be made before anything else.
I'm here late and I see the question has been resolved, so I'll ask another one: any plans to release the code and/or the tool? It sounds like it could fill a niche (kind of allowing you to control your whole computer like a Chromecast), but would also be fun just to play around with.
Memory use efficiency and raw query performance numbers are needed. 
This. It's not that "it assumes the other expression(s) is/are true", it's that it doesn't care--we already have enough info to tell us the conditional fails, so why waste the time?
Not sure I quite get what it is you want to do. Persist to different stores from the same BiggyList? If you can maybe give me an example, I can better answer the question . . .
I might release it for free on the play store... But I need to actually write it first :)
Roslyn, the new compiler for C# and VB was open sourced. I'm not sure what open sourcing C# would be, since C# is an ECMA standard, and has been since it's inception: http://www.ecma-international.org/publications/standards/Ecma-334.htm EDIT: Spelling
They're not referring to the standard, but the compilers and analyzers that MS implemented.
Is Roslyn going to become the default compiler for mono?
Well, instead of writing through to SQL using the document store format, let's say I wanted to persist against 2 or 3 relational tables, then rehydrate the flattened json document view to the in-memory shared list. I'm playing around with websockets and it's a pain to keep a cached concurrent dictionary sync-ed up with relational tables after an update/insert from the client.
Yes, but in 2002 or 2004 Microsoft was a bit of a different beast than what it is right now.
Only C# 1.0 and 2.0 have been under ECMA standard body. Royslin has made Xamarin very happy.
Excellent! No doubt this is specific to my needs, but I'd imagine a popular use case in enterprise where you'd want an easy cached list of 'something', with seemless, no friction write-through. Just think of your JSON document as a rich viewmodel representing your relational tables and instead of writing to the flattened store, open up some abstract extendable methods for committing the data.
Your edit made your intent more clear... I read it different the first time :) edit: and my intent was to clarify what was meant by "open sourcing C#"
[Functional C#](http://functionalcsharp.codeplex.com/) can do pattern matching, although I'd stick with F# for that code.
This will be the case. Xamarin will no longer have to play catch up now by implementing new features months or years after they are announced. They will have them as soon as they are pushed to the public repository. Also, Microsoft is working to make a lot of its libraries cross platform as well. They will using Xamarin as testers to many of the .net framework's packages that are released through Nuget. Microsoft has supplied many of their test suites to Xamarin to ensure good test coverage on linux.
This news will be great for CPU intensive applications. It's kind of cool to see this low level of hardware abstraction show up in high level languages like C# and Javascript well.
This is truly an advancement in actor-based programming models. This library takes the model to a whole new level by providing a notion of grains (virtual actors). This allows you as a programmer to not deal with server coordination, object activation on remote servers, server failures and complex management of clusters. Much of this is handled by the library. It's amazing that it's been in use by Halo 4 for over 2 years. I think now that a preview has been released, Microsoft will get great feedback from the community and turn this into a shipping product.
You can try Postman as well (http://www.getpostman.com/).
That's very relative to your specific business and industry. You really need to talk to prospective customers and also see what your competitors are doing to make an informed decision. As far as phoning home, that depends on the app, if it's tied to the internet (i.e. it's something that will always be online) that should work well, and can be your only license check source. However, if it's something that doesn't need to be online, and has a chance to be in an air-gapped or intermittent connectivity system, I would look at some other way of license validation
Thanks for your response. It's an internal financial system so there's a good chance that it would be in an air-gapped system. I'll look into it further. 
If you use C# at work and know it well, that alone will reduce your start up costs. Right now you mite be thinking your time is free. If you are actually going to start a business, your time is the only thing you can't get more of. The cost in time of learning a new language is just to high when your the founder and developer of a new company. 
Fyi, so many bugs... Webessentials, typescriptliterally unplayable
PHP is your best bet. It's SaaS optimized. /s 
I'm glad you posted that... that title confused that hell out of me.
Not to mention that any project you target at Windows Phone 8.1 you won't be able to test on device yet... since basically no Windows Phone has gotten that update.
Because it's not sarcasm.
I agree with you, but I think he'd be foolish not too. 
Three years ago we rewrote a very popular VB6 invoicing &amp; job management app as SaaS. Our approach was to use Silverlight as the front end, and C#/Mono/Linux on the back end. We used Protocol Buffers for RPC. The result was fantastic. It looked and behaved just like the old VB app. The support guys loved it, because installation was as simple as installing a browser plugin, and no more dll hell. The Sales staff loved it, for the same reasons. They could set customers up over the phone, or onsite without worrying about Windows service packs. However, as we know, Silverlight is dead, which was a huge blow to us. Admittedly, we knew we were taking a gamble (on the front end at least). We looked at HTML5 before taking that decision, and we looked at it again more recently. HTML5 just does not cut it, for the style of app we write. We just cant pass off an HTML5 app as a native client. Our dream would be some kind of GUI like WPF, to run on NaCL, with C#. At the moment we are looking to do the same with http://www.noesisengine.com Mono can run on NaCL, and the Noesis guys say that NaCL is on their roadmap. 
&gt; eventually some new requirement comes along and you need to do other things to calculate a get value, or do some other thing when the value is set. Auto properties allow you to do that in explicit getter and setters down the road without changing the external API of the class. *That* is a really good point.
Don't like my snark, most likely. {Hipster} I worked on SaaS products before they were called SaaS. (seriously - we called them ASPs back then. Application Service Providers. When a half-million users was a big deal.) 
Obvious question: What did you try?
Then the first step is to get familiar with MVC in general, instead of directly trying to make a wizard.
Most annoying is one where it stops compiling on save. I've kept up with changes, so nothing lexical. Also it's slow as hell. Over 70% compilation time is tsc. Latest update crashes vs sometimes, but i think there might be something wrong with webessentials or resharper 8.2. :/ best to not update for a month or so, if you have the option. 
I work at a company whose whole business revolves around a C# SaaS for management of online ads. There's much more of a cost overhead compared to something like the LAMP stack because most of the tech is proprietary, but it works really well, development time is fairly short, it scales great, etc. I used to be more in the LAMP world, and I much prefer .NET now.
Have you considered doing mobile-first redesign, using HTML5 + Javascript? You can have multi-platform clients using WinRT on Windows and something like [PhoneJS](http://help.devexpress.com/devextreme)+[Apache Cordova](https://cordova.apache.org/) for the mobile part. This is how I am implementing my native clients.
The Azure credit is $150/mo for three years (on the MSDN as well). I think you have to be sponsored by another bizspark member to get in now.
Microsoft have abandoned a lot of projects without open sourcing them which left all the users behind with no real replacement. XNA comes to mind. It means that Microsoft can use less resources on developing the compiler without C# development stagnating because they simply left it to rot like they did with Visual Basic 6.0 or FoxPro. I can't think of a single negative side to this.
C# as a language has not been open sourced, the compiler has. Considering that the compiler, Roslyn, is used for both C# and VB.Net, I doubt that they are moving on to other things. First, what would they move on to? F#? That's already got an open-sourced cross-platform compiler. The only other option would be to develop a new language from scratch, which would be stupid when even MS haters agree that C# is a pretty good language. I don't think you have anything to worry about in regards to MS moving on to something else.
Microsoft has been open sourcing a lot in the last years, without abandoning it. It's just the new route Microsoft takes. Best examples are TypeScript or EntityFramework. Also the MVC framework.
Internet tip: /s indicated sarcasm.
As mentioned C# has not been open-sourced. In fact, it's been an open spec since the beginning. If the language weren't open-source, how would Mono happen? There's no negative - C# is here to stay! As for VB: anyone want to fork Roslyn and disable/remove VB? :D
Microsoft realized that the only way they could pick up traction for C# and .Net against Java and other solutions on open source environments would be to open up the source and guarantee that there would be no problems with patents on the platform. And they are correct. It is the only way it will ever gain acceptance in the core open source communities such as Debian linux. So it is absolutely the correct move.
didn't they replace XNA with something else tho?
No.
I think they have something brewing, but not released yet.
C# is basicly "Java done right" but it is spread way less then Java. They belive that open-sourced compiler can help to close the gap.
This is probably the biggest potential gain from them opening the source of the compiler. 
No. Many XNA peeps have gone over to Unity instead.
I think it's great, open source is the future imo, good move by microsoft, recently they're having a less fucked up attitude, I really hope C# 6 is gonna be good
C# the language is an ECMA and ISO standard. You don't open source that, it has always been royalty free. Though that only includes the standard library - CLR features like forms and such aren't a part of those standards, so reproducing them can be a violation of MS's copyright.
MS didnt but the OSS community has replaced XNA with Monogame. Supports WAY more platforms than XNA ever did.
MonoGame sprung up as an XNA clone (uses same namespaces too). (I don't know when exactly it sprung up though)
I doubt anyone is going to write your program for you. I think your first step should be to write in pseudocode the structure of this program. For example: Program Starts { // Ask user for filename // Determine if file with given filename exists // if (fileExists) // ... Once this is complete you now can work on writing code to complete each single line of your pseudocode. Treat each step independently from the next -- don't try to do too much at one time (like how you described it -- your description didn't break up the steps very well).
SignalR :).
But MS has said publicly that they would not pursue people on this basis, didn't they? Plus with the active support of Mono (and the rumors of buying Xamarin), that all seems to bode well. 
I seem to remember this as well. I attended //BUILD prior to the Windows 8 launch and it seemed at that the time that they were kind of moving back to COM and C++. Maybe they have decided that people just like C# (I certainly do) and that their competition is really Java (which it certainly is). 
Yeah I really love a lot of the language features. I have to say that I enjoy programming in C# immensely. 
It looks great! Every iteration seems to take it leaps and bounds ahead. 
I think it's good, I just wish the debugger portion of Visual Studio was open sourced. Be nice to be able to set breakpoints and have the debugger take charge when it hits that point.
What do you mean? I'm not sure I follow. 
Thank you for the input! Yeah I wasn't really asking anyone to necessarily write it for me. "Write a program and upload the .exe file." That was copied directly from my professors website, I don't expect anyone to upload an exe, but I appreciate the help a ton. 
Thank you! This stuff helps a lot! 
I agree completely with /u/tinkermake. I have both built homegrown as well as implemented all kinds of licensing subsystems for different applications. More than anything, this is driven by your business. Let the business requirements drive your technical implementation. Edit: typo. 
&gt; i have absolutely no idea where to start. Can any one help me out? Here's the assignment. How about.. By reading the assignment! Then you see already the first step: Ask the user for a filename. This is a good starting point. Then you continue with the rest of the assignment, step by step.
You might get extra points if you implement it as a lightweight forms application. This way you could take advantage of a file chooser rather than forcing the user to type out the full path of the file
No worries, it's easy to get overwhelmed when you start off on a project you don't know how to complete... Just start it piece by piece and you'll get through it and you'll look back and say... 'that was easy', even if it wasn't.
Visual studio already has breakpoints, even conditional breakpoints. What are you talking about ?
baby steps. OP will get to that point.
+1 For this - No idea what your spec is like as it seems reasonably open. But using a file / Folder chooser will make your app cleaner while not actually having to do much. 
They didn't, but their guidance has been to use Unity.
Start a new console application solution, and you could do something like this incomplete example: //Display message to user Console.WriteLine("Please enter path and file name to copy: "); //get the user's input string userInput = Console.ReadLine(); If (File.Exists(userInput)) { //ask for a destination location and copy the file } Else { //alert user file does not exist, prompt again for a file Console.WriteLine("File " + userInput + " does not exist.") } 
Yes, most if not all of .NET falls under their Open Specifications Promise, which is a legally binding document.
&gt;C# the language is an ECMA and ISO standard. C# 2.0 is ECMA/ISO standard. Anything after, (including features such as LINQ, lambda expressions, partial methods, object initializers, async methods) is not ECMA or ISO standard C#. 
But winforms is so easy! I'd say OP should at least try.
OP should definitely try, but not before they understand the syntax and the flow of what is going on in a console app. This is why some people get frustrated with programming and give up prematurely. They bite of a little more than they can chew, and say "programming is too hard, I give up." 
thats not C# lol that's C++ for C# it would be int i = 1; // always default your variables when you declare them for code readability and general good practice while (i &lt;= 10) { Console.WriteLine(i); // this writes out current number to console, and adds line terminator automatically i++; // increments i } I left out the bilerplate so you need to add that For C++ it would be (if I still remember correctly) int i = 1; // always default your variables when you declare them for code readability and general good practice while (i &lt;= 10) { cout&lt;&lt;i&lt;&lt;endl; // this writes out current number to console, and adds line terminator automatically i++; // increments i } So as you can see very similar
alternatively for(int i = 1; i &lt; 11; i++) { Console.WriteLine(i); //cout &lt;&lt; i &lt;&lt; endl; //C++ }
I'm not sure I follow, either. VS's debugging is pretty damn outstanding. Maybe he means some third-party debugging tool to trap the breakpoints. /shrug
Just trying to give op the chance to go from 90% to 95%
One-liner with Linq: Enumerable.Range(1, 10).ToList().ForEach(Console.WriteLine);
I'm not discouraging anything, I'm just here trying to help people for free.
Yeah. You can include a manual breakpoint in your code through: System.Diagnostics.Debugger.Break(); I don't know if maybe that's what he wanted?
Crap I missed that, good catch
Yeah when I was learning programming at Uni there was always more spec to it than that, asking here for the general overview of technologies required is fine.
&gt;How about... No. Beginner programmers literally won't know where to start and saying so won't help. It's hard to look back and try to remember where these things started but honestly, the assignment spec is next to useless (if OP was at the level I was doing a course that wasn't computer science but still had occasional programming). A simple overview of technologies such as readline and IO would have been more useful.
user mynoduesp covered just about everything, a good resource to use is http://codesnippet.research.microsoft.com/ for fairly simple applications like this. You'll usually have to still understand step by step of what to do, but as long as you know the process then you're making progress.
An alternative to using the static file functions you suggested would be to create a [FileInfo](http://msdn.microsoft.com/en-us/library/system.io.fileinfo.aspx) object, and use the functions and properties within that object. It would provide the same functionality, but you wouldn't need to keep giving the file name.
Assuming OP has a competent teacher, concepts required for the assignment would have been covered in class, possibly with bonus points for doing extra things. This sounds more to me like OP wasn't paying attention because it is so bloody easy. FWIW, I do remember what it was like when I started programming. I paid attention and did all the extra work and research I could. Programming was easy, especially when at least the bare minimum was covered in class. Debugging was hard.
3.
It's absolutely great! Open sourcing anything allows more scrutiny and progression. If Microsoft moves onto the next thing, whose to say it won't be even better than C#, which is also great? Either way, we'll still have access to C#.
&gt;because it is so bloody easy Then you had a natural knack for it and it's not that you don't remember, it's that you have no idea at all. "Programming was easy". It's only easy for a minority, the trouble is you'll find most of that minority here so you think you're normal. The rest of us have much more trouble with it. Everyone who thinks "programming was easy" is too quick to judge other peoples competencies when they should worry about how they carry themselves when attempting to help others.
I'm not saying programming is easy. I'm saying that when I was first learning how to do it, it wasn't a problem. My teacher relayed information to us, I took note, and explored from there. If OP does not have any idea how to start, it must be either because his teacher didn't tell him, or he wasn't paying attention.
Okay so if I hash the both plaintexts together, would the salt still be the first amount of bits of the output hash? So when I need to check the hash would I just remove the bytes of the salt?
 string saltedInput = input + salt; byte[] hash = CalculateHash(saltedInput); if (hash.SequenceEqual(storedHash)) DoWhatever(); Hope that helps. Checking hashes boils down to 'do the same thing twice, compare results'.
I agree with Cixis. He should be reading his course material and text book. If he still has trouble he should be contacting his professor or TA as it could be likely they skipped a topic or didn't cover it well enough. If he STILL has trouble then he can post his attempted solution here with what he has tried to do to solve it and ask for help with the parts that don't work as intended. 
&gt;it wasn't a problem and like I said, just because you are one of the people who doesn't find it a problem, the majority of your class does find it a problem, and most people don't bother to ask. Not everyone can learn information from having information relayed to them and taking notes, getting started can be the hardest part. He's going to learn more from the useful advice here, rather than insinuating his professor is incompetent, or saying he doesn't listen. 
Frankly, that's how any subject in school works, not just programming. Getting started, when you're told how to start, is rarely an issue. It doesn't have to do with my, or anyone else's, competence.
Except programming is completely different to most subjects in School, and it's not as easy for some people to grasp the logic than it is for others. Strangely enough the ones that do grasp is quickly have a very hard time grasping that some people aren't always as logically minded as they are. I learned nothing from lectures, actually having an opportunity to build things is where I got any amount of skill from, but I did need hand holding at the start because having someone spew words at me when I don't know how it will all fit together, means literally nothing.
You need to store the salt that you used along side the hash, so that you have the salt when you hash new input for comparison.
Okay so I should store the salt for when I need to compute new input. Does it matter if someone is able to find out the salt? 
The bigger issue is developing a Metro app requires that your users have Windows 8 Installed. This drastically limits the number of users who can install your software, especially in enterprise. So what technology should we end up using for native Windows apps? I've spoken to guys at Microsoft who assure me time again that WPF/Silverlight is not dead. It would be nice if Metro ran in windowed mode and on all versions of Windows but apparently that's never going to happen. I think as long as your customers are enjoying the app there's not really a problem and Silverlight &gt; Metro upgrade is an easier upgrade than most.
LINQ I Believe is also open sourced. At least the extension methods themselves, the query syntax is part of the language/compiler which is also now open sourced.
C# is officially more open source now. The whole oracle android debacle is less likely to happen now. Technically still could since the open sourced C#, not the runtime library and JIT. At this point I wouldn't be surprised to see RyuJIT though.
But now that the compiler is under Apache, they can be implemented without fear of infringing patents
Nobody is going to choose Silverlight anymore for big projects. The moonlight project has been scrapped, which was our get out of jail card. Metro. Forget that. I'm finding there is not much love for Windows 8, especially in business. System admins don't want it, and are peeved WinXPs demise is forcing their hand. WPF needs to go opensource, otherwise your locked into Windows. C# on the other hand, is looking like it's just had a huge shoot in the arm. Long live C#. I love it. Just give me a usable cross platform GUI.
I love debugging in VS. I made a conditional breakpoint that runs a macro to skip to the next line of code. So, if I want to stop a line from being executed, I can automatically skip over it without having to comment out code or breaking on the method and setting the next line manually. It's amazing.
This is basic stuff. Are they not teaching you anything or are you not really interested? It has to be one or both.
These classes will be useful: [Directory](http://msdn.microsoft.com/en-us/library/system.io.directory%28v=vs.110%29.aspx) [Path](http://msdn.microsoft.com/en-us/library/system.io.path%28v=vs.110%29.aspx) [File](http://msdn.microsoft.com/en-us/library/system.io.file.aspx)
You should use a unique salt for each password, and yes you need to store it with the hash. The salt being known doesnt really matter, the salt is more so multiple users who have the same password wont have the same hash. Read up in depth here: https://crackstation.net/hashing-security.htm
They'll never open source WPF. Maybe you should look into c++ and QT 
I gotta say, your teacher must have awkwardly large balls to just run EXE files that people are uploading without compiling the source himself. Even if it is just an intro course, sometimes they are required and there might be an actual hacker in there.
This dude/chick is in school to get a degree in what you people are showing him how to do. As if Google doesn't return 54,000 pages of people doing the exact same thing they are asking about. As if the book that the OP has to purchase doesn't show examples of how to do exactly what the assignment is asking for. Do you people REALLY want to work besides some lazy jackass that can't even be bothered to google "File IO C#"? Hey reddit! I want to juggle. How do I juggle? Hey Reddit! I want to bone my old lady, how do I bone my old lady? Hey reddit! I want to cash my paycheck, how do I do that? *disgust*
It will take more than open sourcing the compiler or some of the frameworks (ASP.NET MVC, EF, SignalR, etc.) but it's a good start.
I doubt VB's presence is Roslyn is really hurting anything.
&gt; they simply left it to rot like they did with Visual Basic 6.0 or FoxPro FoxPro 9 is supported through Jan 2015, so get your kicks in while you can. Regardless, both VB6 and FP deserve to rot, they're abominations compared to what is available today.
Hmm. I need to explore these conditional breakpoints then. Seen them, but never knew what they were / how to use them / etc. :\
Maybe they use bindiff or something to check the submitted exe against what the instructor compiles with the submitted source code? To test understanding of the compiling process?
Check out the [reference doc](http://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.image.aspx) for the image class in xaml, it has all the details you should need to get this working properly. [Here](http://msdn.microsoft.com/en-us/library/windows/apps/br211377.aspx) is the full API reference for metro applications. For XAML controls see Windows.UI.Xaml.* Note that the image control does not throw an exception when you improperly set its source. Instead it fires an event (see doc). 
This. iirc, Mono is still stuck at Framework 3.5. Hopefully this will allow them to make huge strides in progress.
In my opinion, ASP.NET just needs to be ditched, and replaced with something that makes more sense for a web server environment. Like CGI.NET or something.
Maybe being "java done right" will accelerate the process. I mean, C# is an amazing language and the libraries, the "mental map" of the language, and GUI code are just laid out so well compared to Java, IMO.
The C++ movement was pretty much spearheaded by Steven Sinofsky. He'd been anti-C# for his entire tenure at Microsoft and really tried to marginalize the whole .NET platform. Unfortunately at the same time, the .NET team was working on a huge rewrite of the entire compiler that's taken a very long time, and hasn't been able to put out as many whiz-bang features that would keep the platform abuzz. Now don't read this comment to mean that Sinofsky was unreasonable, however. There's very real strategic reasons for Microsoft to have focused on C++ more at the time. Microsoft realised that the market is trending away from big powerful PC's to small mobile devices, and unfortunately a big framework like .NET has some real disadvantages on a mobile device when compared to the leanness that C++ offers. What they should have done (and now appears to have done) was to focus on a native-compilation mode for C# that would allow you to compile your C# code directly to native and end up as lean as C++ is. Unfortunately they either took a long time to do it or started working on that very late, and we had this interim period where people were freaking out over the potential future of C#. Thankfully, this //BUILD/ conference has undone a lot of the uncertainty that people formed 2 years ago when .NET was a virtual ghost at the 2011 //BUILD/ conference.
I don't know, I'm just annoyed by how wasteful there is in general related to ASP.NET. Do a view source on the final HTML/javascript output to see what I'm talking about. A CGI.NET app would use a fraction of that, especially if it can maintain the state without modification of the HTML output (such as a statebag in the HTML code)
Yes, Visual studio has breakpoints, but.. it is NOT an open source project. I think there were some documentation on MSDN related to breakpoints, so that could be used in an open source IDE. http://msdn.microsoft.com/en-us/library/windows/desktop/ms679303(v=vs.85).aspx Let me put it another way: if you write something entirely in a low-level language like C or assembly language, how would an IDE implement breakpoints for the native code? It would have to cause Windows to "freeze" the application and transfer control back to the IDE. Especially in the context of .NET specific executable (which is MSIL instructions), which is very different from a native executable. Obviously, you'd have to an API function or three in the Windows API specific to debugging and breakpoints.
Check out Project Helios.
Yeah you're definitely talking about Webforms. With ASP.NET MVC you can tailor the html/js to be as clean as you want. ASP isn't the problem, just the webforms view engine.
mono is mostly compatible with 4.5 minus the new async pipeline and some small pieces not implemented in 4.0, but hopefully this will help get these features out there http://mono-project.com/Compatibility
This mismatch between types would be my guess too as it should work with: imgIdent.Source = new BitmapImage(new Uri("ms-appx:///Assets/imagename.png"));
You don't really need two pointers (or indices). Since the offset of your first index is the same as the offset of your second, only in the other direction (so substracting you index from your length would be valid). Pseudo code wise, you can do this: for index 0 .. len(value) / 2 if (value[index] != value[len(value) - (index+1)]) valid := false
If you mean ASP.Net WebForms, I agree. The rest is great though.
I always felt like WebForms removed me so far away from HTML/CSS/javascript that it made it difficult for me to relate my HTML/CSS/Javascript knowledge to what I was doing. C# is a little bit boilerplatey, but it is a brilliantly practical language and a brilliant platform in general, especially with lambdas and LINQ, which give it FP elements. It's the best language that you're ever likely to be able to use in your day job. F# is well worth a look though if you have any freedom of choice in language. 
&gt; I always felt like WebForms removed me so far away from HTML/CSS/javascript that it made it difficult for me to relate my HTML/CSS/Javascript knowledge to what I was doing. That was actually the intent of Webforms. They wanted to make an abstraction that Winforms developers would be comfortable with and make the transition with little effort. Of course the problem is that the abstraction is very leaky and if you don't know what you're doing, you can seriously break things and not even be aware of it. I wish they had supplied two view engines from the start, a lot of code is built using webforms that really shouldn't be.
What do you have so far? 
Love your solution, but what about : * "Ana" * "a car, a man, a maraca." dont forget the case and remove all non-letter entries. By the way, there are method and loop into [SequenceEqual](http://referencesource.microsoft.com/#System.Core/System/Linq/Enumerable.cs#63644a881e976b52).
That could completely backfire. Not everybody likes it when students do this kind of thing. Follow the instructions and K.I.S.S. (Keep It Simple, Stupid)
I freely admit I'm still getting acquainted with LINQ and the entity framework (and maybe just the former). I ran your corrected code in LINQpad and it does return a set of records, but I'm not seeing a different GUID between executions as in my (admittedly Swiss cheesy) example: var test = Flowers .GroupBy(x =&gt; x.Name) .Select(x =&gt; x.OrderBy(y =&gt; Guid.NewGuid()) .FirstOrDefault()); test.Dump(); &gt; // Same GUIDs are returned each run. &gt; 44b4deec-7041-4074-b904-0e17bb5a8b8d Black Lotus &gt; 6bb2b1db-5ddc-4d00-a343-b96222fd01b0 Dandelion &gt; b8e6b551-566f-414d-a63e-e2f4a2136f5a Orchid &gt; 77ac5dc8-c7ee-42fd-bf54-e85e424f8fd8 Rose &gt; 09e0b658-a193-43f0-81df-a8cc67d56926 Tulip I didn't surround my code with any try-catch so if exceptions are occurring I'm not seeing them or I guess they might be getting suppressed, but it does *seem* to work; with each run I get a unique record for each flower type. I'll definitely take your thoughtful analysis regardless though and run with it to improve my original mess. Thanks very much for taking the time to analyze this, I appreciate it!!
I think your example is not the *intended* use for the operator, any more than it is intended for the null-coalescing operator. I think a lot of people misunderstand that null in C# (and Java) is supposed to be used as a sentinel (I think?). I suppose people misapplying design patterns is nothing new.
Rather than gripe about people violating the Law of Demeter for reasons fair and foul, gripe that this means that first-class support for option types is still but a far-off glimmer.
This post on Stack Overflow is what prompted my thoughts: http://stackoverflow.com/questions/2080647/deep-null-checking-is-there-a-better-way/2081709#2081709 Eric Lippert seems to think that deep null checking is exactly the intended use! 
Interesting. However, deep null checking is not necessarily a result of "Law" of Demeter violations. Also, [the next comment down](https://stackoverflow.com/a/2080652) contains a discussion of whether violation the "Law" of Demeter is really as bad as it is made out.
It was a good post, but as a programmer in a smaller shop, I find a lot of this to be silly semantics. The cake doesn't care about it's pockets being looked at. OO is the core of what I write, but I use it to be helpful and productive to larger re-usable classes, not as a bible in which you have to personify objects. If you do it well by using properties and, more importantly, do it more quickly that way, use nulls. Again, not saying you are incorrect about any of it, just my mid-work break opinion.
Not to mention that asking for cake.ingredients has the potential to throw a null reference exception. It's OK, it can be made safe in C# 6 by asking for cake?.ingredients instead.
Excellent! I figured there was a better way of doing this. EDIT: I've updated the example. 
thatsthejoke.jpg
When it comes to c#, you can already write it badly. Might as well make it easier for the people who didn't have the benefit of a great CS instructor. Good post though I'll be looking forward to every feature I can get.
Sorry I missed the sarcasm. :)
Yeah, that's the attitude that got us Visual Basic! (I kid, I kid...) 
I think there's wisdom in calling it the "guideline of Demeter". I suppose I could have made it clearer. My gripe is less about counting dots and abusing null values as part of the design. 
Consider web programming though. If I'm writing a unit test against an MVC app and there's a deep check on the request base that I don't want to mock up I'd rather just have it skipped over. For example : if (Request.Url.PathAndQuery == "/secure") //do something I don't care about for this test else //code I actually want to test In this example, the null-propagating operator will save me having to mock up a httprequestbase object for every single test I write that uses this method where I don't have to. It's syntactical sugar but damn if it isn't convenient.
In the past I've just rewritten the ASP code onto a DNN module template. A quick Google search will give you options for templates to start with [like this one.](http://visualstudiogallery.msdn.microsoft.com/bdd506ef-d5c3-4274-bf1d-9e673fb23484)
Though I agree with your OO sentiments when you control all the objects in use, I think some benefit would be gained by this operator when using Linq to Sql, Linq to Xml, etc. When you're searching through xml structured data that hasn't been mapped into business objects, non-existence of nodes isn't necessarily exceptional, but stopping at each level of depth to confirm your SingleOrDefault or FirstOrDefault method isn't null before continuing to search deeper can be a pain over multiple levels. With all language constructs, there are places they can be used correctly or incorrectly, but I think this is an example of where it can simplify quite a bit of boilerplate logic. 
Correct me if I'm wrong, but one of the design goals of the language was to create 'pits of success' wherein the simplest thing is most oftentimes the right thing and things that are hard to do or express are generally the wrong thing. That being said, anyone can write bad C# just like anyone can write good $ERROR_PRONE_LANGUAGE.
Excellent. Thank You!
Let me know how it goes, I've been dealing with DNN for a couple years now.
I have some serious doubts about your complaints with regards to encapsulation. The entire idea about public properties is that you have easy-accessible encapsulation. Accessing a property through `cake.Frosting.Berries` nowhere violates encapsulation because you are implicitly referring to the generated `Get_Value()` method. Likewise the internal representation of that frosting or those berries are never communicated. Perhaps you can clarify how exactly encapsulation gets broken?
While I agree with you wholeheartedly on the Law of Demeter front, I think this is less pandering to the lowest common denominator and more of a pragmatic move given the current position of the C# community. There is a lot of existing code out there that sprinkles nulls liberally throughout its public methods and properties, and there are lots of people who strive to build .NET libraries that read like Office Automation - lots of asking, not much doing. So I see the null-propagation operator as a way to help mitigate the existing 'NULL nightmare', which fits well with C#'s pragmatic approach to including various new features based on their immediate usefulness to the developer community. It's less about creating a beautiful language and more about getting things done. There's also the whole "you can lead a horse to water, but you can't make him drink" side to the issue. The people willing to pickpocket like crazy probably don't care about null or only fix it when they get an exception in production. These people aren't going to start writing LoD-conforming code overnight, and giving them a null-propagator isn't going to make them any less willing to learn how to do it. If anything, I think the critical fringe group between people who care about LoD and people who don't know what it even means is fairly small, so even if there was a negative impact it would be mitigated by the fact that the people the operator is "ruining" only comprise a small percentage of total C# developers. I'm personally excited about null-propagation if only because I can see it making certain boilerplate sections of code much more expressive. For example, I can see Dispose method bodies shrinking significantly as well as deep XSD-generated object graph handling code getting simpler. Raising events turns into a one-liner as well.
I hope we don't go down the route of excluding features for fear of people abusing them - this is why we can't have [nice things](http://stackoverflow.com/a/407928/158109) anymore. :( Just make sure people don't see these features until waaaay after they start learning, and it'll all be okay. Besides, this doesn't really *hide* the underlying problem, it just makes it easier to ignore. :D
Instead of cake?.frosting?.berries?.loader I prefer cake.frosting.berries?.loader ..the other two seem redundant. 
This comment needs more upvotes. Want a violation of the Law of Demeter? It's the Compiler's job to turn a language into machine instructions, not enforce what someone's (potentially arbitrary) feelings of what good code *should* look like. I've run into a situation once and only once where MI would have saved the day, and I wrestled with the design of those systems for days trying to tell myself there was a better way without it. No. There are times, select and few, when MI is the answer - places where your DAG will not branch and merge, when one system really *is* composed of two other, independent systems. But because (in part) programmers have abused MI, C# is unable to handle those situations elegantly. I want the compiler to interpret what I need to the computer, not enforce standards on other programmers. I can enforce standards on my peers with a good "Are you fucking kidding me?" look and pointedly informing them to get that shit out of my project. Restricting the language's ability to translate for me is the opposite of what I want.
If your wallet is a public property, you are inviting someone to go riffling through it. If you don't want that, it had better be protected, if not private. It's like getting mad when someone eats the doughnuts you left out on the break room table. Don't assume that I'm breaking encapsulation by looking at what's available to me, consider instead that *you* are breaking encapsulation because of what you're exposing for everyone to see. And if someone gets offended because there's more than one or two dots in a statement, get your phone out for when I show them how I chain expressions with System.String, System.Linq, or jQuery, because they're probably going to need an ambulance.
Sheeeeeiiiit. A while back I started returning null collections because I was desperately trying to improve performance in an app. I'm a monster......
High level languages are really just a convenient way of writing machine code.
I haven't really taken a deep look at the code, but I do have a quick question: what was wrong with [System.Windows.Forms.PropertyGrid](http://msdn.microsoft.com/en-us/library/system.windows.forms.propertygrid.aspx)? Some additional clarification for that one in particular would be nice as the other two listed in the brief readme look understandable.
That is, without mincing words, some straight-up bullshit. Monads are type enhancers, not some strange new type that would blow the CLR up, and, furthermore, there are already some that exist as first-class citizens of the CLR (shout outs to the Nullable&lt;T&gt; structure). That and [F# already has option types](http://msdn.microsoft.com/en-us/library/dd233226.aspx), so apparently they're not that difficult to implement.
The point is that GetCake() should return a fully baked Cake object, not a cake with null Cake.Frosting. As the consumer of the Cake, I should be able to interact with the Cake using its public interface without fear of it exploding. I can sympathize with the view, but it's beating a dead horse. Yes, sometimes Objects are used as dumb containers for data when people should be practicing better OO principles. Taking away null won't fix that.
&gt; That being said, anyone can write bad C# just like anyone can write good $ERROR_PRONE_LANGUAGE. No. Well, not the second half. :p There are people who can't write good code in any language, ergo not everyone can write good code in Perl. 
Ah, I was using anyone in the existential sense, not the universal one.
I think there's a use case for it. When an object contains collections, it can be said that there is useful information to glean from the ability to differentiate whether a list is empty or just plain missing (uninitialized, and therefore null). I have used this concept in datasource-backed models to indicate whether I need to insert a row to indicate this collection or not. In this case I have done metrics and documented performance gains in large datasets. As usual, best practices and patterns are just that - practices, not laws. 
Not all cakes have frosting, and the ingredients collection example given in the article is a pattern that doesn't always apply. Sometimes properties don't make sense as siblings in a collection object. 
But what if you don't expect frosting to ever be null? The programmer should be responsible for deciding which of those accessors should throw if null, not the compiler.
What if the semantics of the object require that there be exactly one or zero "frosting" ingredients? Using a collection is not the right way to implement such an object. It's error prone and more tedious, especially if interacting with the frosting property is common. 
If its a non-value object, it can always be null.
I've literally been developing this type of system for probably three months now. You should look at the Managed Extensibility Framework + WCF for the communication portion. I've had a lot of fun discovering how I can do things like you've described. I'd show more, but unfortunately that code is proprietary to my workplace. Your description though fits what I've essentially been doing.
Can and should are not the same. Yes, according to the language it can be null, but according to the API contract it may be invalid for that property to be null. If it is null you should get an exception so that you know that contact has been violated, rather than mask it and have the program misbehave in subtle ways.
This is why I use Code Contracts.. let the methods do the checks, not the data contracts.
I guess it depends on what type of API you are talking about. For SaaS, message bus, service bus or eventually consistent APIs, thrown exceptions is a no-no. When scaling out, wasting CPU time is less critical. If it can fail, it will.
Maybe it's commentary about how this bug would be impossible in a managed language. But yea, probably the subreddit thing.
&gt; I ran your corrected code in LINQpad and it does return a set of records, but I'm not seeing a different GUID between executions as in my (admittedly Swiss cheesy) example: This is not possible. If this is the case, then there is seriously something wrong with your SQL server. I suspect you are using **Linq-to-SQL** (the default of LinqPad), instead of **Linq-to-Entities** (EntityFramework). **Linq-to-SQL** is unable to translate this expression correctly, it will just drop the `Guid.NewGuid()` and this results in always the same set of records to be returned. &gt; I didn't surround my code with any try-catch so if exceptions are occurring I'm not seeing them or I guess they might be getting suppressed, but it does seem to work; with each run I get a unique record for each flower type. Are you absolutely sure you're running **Linq-to-entities**, and not **Linq-to-objects**? Like I said, the query you provided in your blog post will not work with **Linq-to-entities**.
You can use Reflection to load types from DLLs that have been dropped into a folder. (Assembly.LoadFile() - http://msdn.microsoft.com/en-us/library/b61s44e8.aspx ) My application defined an interface that all plugins would implement, and then at runtime it would search the DLLs folder and load any type that implemented that interface.
You can do this (start threads in a service) but you should be aware that if one of them crashes, the process will be killed, taking all your other services with it. 
You can solve this problem by placing each service in an own AppDomain. But this makes it much more difficult, because if you don't pay attention they can easily bleed over to another AppDomain.
Eric Lippert wrote non-nullable references would break too many existing language assumptions.
What you need to know, if you're a C# developer, is probably mostly that IIS uses Schannel and not OpenSSL. 
What is the application like? I mean how many pages does it have? How do you expect the navigation to work once it is a dnn module? 
Two things you can look at: 1. Managed Extensibility Framework (MEF, System.ComponentModel.Composition) - it does a good job of allowing discovery of code and easily allows you to expose things from the host to the extension via attributes. 2. Managed AddIn Framework (MAF, System.AddIn) - is exactly what it sounds like, an addin infrastructure. It does a great job of isolating the host from addins, providing some versioning capabilities, and adds a lot of broilerplate code to make these segregations possible. You can isolate code by appdomains, by process, and you can load new addins or stop addins without restarting the host. Depending on how you isolate the plugins, you can provide different levels of security and access to resources (e.g. this plugin is allowed disk I/O but this other plugin is not). In your case, MEF does not sound like a good choice. You can provide isolation so that if one component dies it will not bring down the host. MEF will have a lower barrier to entry in terms of the amount of code to make it work and how quickly you will get results. But MAF is the better choice here - the isolation will result in a sturdier host and the versioning will allow you to continually improve without having to rewrite all your services.
Throwing exceptions when something is wrong is better than not throwing an exception and having something else go wrong in subtle ways later. We're talking about a situation in which there is clearly a bug (a contract has been violated). Do you want to know about it as soon as it is known or at some later point and have to debug back to the actual source of the problem? An exception here is more likely to be noticed during pre-release testing than a whatever symptoms you might get if you mask it with a null check. 
You could, but then asking the question "does this cake have frosting" is harder. I would cringe if I saw `if (cake.Frosting is NoFrosting)`. 
AppDomain solves your security problems (isolates plugins from the host and each other), but if the process dies because of an uncaught exception or other Bad Thing, it'll take all the AppDomains with it. 
This is what I ended up doing. I built a host controller that would use reflection to load up plugin DLLs in the same folder. I also implemented threaded architecture so each DLL ran under its own willpower, and the host's job was simply to launch these plugins and trigger their "DoWork" methods. It kept the code simple (read: robust) in the host controller service, and the individual threads (plugins) were atomic - if they crashed, they didn't bring down the whole app. If one hung, it could be recycled (thread killed, new thread launched again) without having to restart the service, too.
I believe this depends on the platform. 
That still is true to some extent. C++ is certainly getting lots of attention in MSDN Magazine and so on. 
I honestly don't see why they should have ever been considered in competition. Like what's the C++ web framework? Does anyone really expect C++ to resurge for LOB apps?
What about considering a good ole DI/IoC container? Ninject/TinyIoC, etc.. There are many available to choose from. I know that most/some containers have the ability to auto scan/register all DLLs in your bin folder. So "plugin" discovery should be relatively easy; based on some Interface or what have you... Also, what about using the TPL/TAP (async) instead of threading? 
That sounds like a quick way to accumulate hundreds of bullshit classes. 
It is *never going to happen.* if you want non nulls enforced find a different language without ten years' worth of production code that change would break. 
There are also design issues. You could use something other than null for default() of a reference type but can you think of one that makes more sense? Probably not; you have lots of worse options though. 
Almost nothing is "always" the way it should be done. 
&gt; Post/Get/Post/Get: Basically have each step be it's own controller action and view. Inefficient, poor design. I don't agree. There are valid reasons to have a synchronous design and it isn't poor. 
That is basically another way of saying the same thing. 
Why would you do that?
Check out https://codeperspective.com - it's pretty cool for run-time visualization ;)
Wow, that looks like a really useful extension to VS. Plus it's a good incentive for keeping the complexity of methods low, since you don't want it to clog up the entire CodeConnect view by writing huge methods. :P Are you also going to use the code connect view for displaying code metrics like cyclomatic complexity or direct and indirect method calls from one method? Something that displays those metrics with color indicators could go a long way towards indicating possible code smells.
whoa that's pretty cool. 
This is really nice! Is currently on development? I see on the github repo that last commit was 6 months ago.
Any link to that kind of information?
I read FreeBSD was the only one where they could get private certificates off but you should probably refresh your certificates anyway TBH. 
Java is gonna be much easier for a C# guy to get up to speed with. 
Thanks :) I'm pretty busy with work, but I hope to get back to it someday.
F# does a pretty good job. Rather than non-nullable ref types there are "discriminated unions" which basically means a single function can return multiple types (but only one at a time). There are switch-like logic blocks that let you perform different actions based on the type returned.
Neither do I. I fixed the code to store the salt in the DB after generating the random salt. And to hash the plaintext salt + plaintext password then store it in the db.
It's about 4 lines of tsql. 
I believe the only issues come if you target 4.5.1.
It doesn't really scale well on the usability / extensibility axis, isn't really skinnable, and as far as I know doesn't allow for "in-line" list, dictionary or recursive object reference editing, except with some extra dialog windows. I've used it for a while, but I wasn't content with its overall performace. It's been a while though, so the details are a little bit sketchy by now. Don't take the above list word-by-word. :)
I ran the RC and RTM versions of 2013 for months while the rest of my team was on 2012. Not a single problem came up. We were targeting .net 4 and have several class lib projects, winforms, and ASP.net. If you can, I highly recommend upgrading. Code Lens (and other features) will change your life.
Not a single thank was given.
The projects of 2010, 2012 and 2013 are compatible with each other.
This is one of the best Hanselman posts I've read. Very thoughtful and inspiring.
The first one is just a simple forms-app. I want to be able to pull the session variables from the DNN Login to auto-populate some of my forms. There are some more advanced concepts I have in mind, like converting my company's old ASP.NET shopping cart into a DNN module so that our dealers can purchase spare parts from our spares pool. Does all that seem to be plausible? Thanks, Aaron
I couldn't find any good tutorials on this when I was doing it, so I figured I'd write one.
Search "Media": http://msdn.microsoft.com/en-us/library/system.windows.forms.keys.aspx
I have a 2012 project targeted to 4.5.1 and it works in 2013 and 2012 just fine. 
C# is "Delphi done right".
C# wasn't open-source for version 3 and 4.
no TPL?
I do hope .NET Native might turn that tide of C++ being faster and smaller.
Did you read TFA?
[check this out](http://stackoverflow.com/questions/7199203/send-key-mediaplaypause-to-an-application-without-setting-focus-to-it) also make sure app has admin privileges.
Yes, I mean that you can do this: public MyConfiguration() { SetExecutionStrategy( "System.Data.SqlClient", () =&gt; new SqlAzureExecutionStrategy(5, TimeSpan.FromSeconds(30))); } And use the already available SqlAzureExecutionStrategy which is resilient, instead of writing up a whole new class that inherits from DbExecutionStrategy Also, no need for profanity. We're all here learning from each other :)
please tell me you have a source on that. I want that so bad! 
What do you think SqlAzureExecutionStrategy subclasses? FWIW, TFA = The Fine Article
I meant, why redo it if you already had the functionality? it's great to understand how everything works, but it's more practical (in a real world scenario) to just use the provided one. 
Did the OP redo it or did he implement what he needed?
I cannot see your code, blocked from work. But... If you're trying to change the background colour of something on it's click event you can do it like this... private void panel1_Click(object sender, EventArgs e) { Panel p = (Panel) sender; p.BackColor = Color.Green; } sender, is the object being clicked, cast it to what it is and change the colour. This works as well.. private void panel1_Click(object sender, EventArgs e) { Control p = (Control)sender; p.BackColor = Color.Green; } 
 Any time buddy.
[source](http://tirania.org/blog/archive/2014/Apr-09.html): "For the last couple of months, the ECMA C# committee has been working on updating the spec to reflect C# 5. And this time around, the spec benefits from having two independent compiler implementations."
Well, here's a hint... I didn't use SqlAzureExecutionStrategy because it's called Sql**Azure**ExecutionStrategy. :D The SqlAzureExecutionStrategy class will attempt a retry on the following error codes: 40613, 40501, 40197, 10929, 10928, 10060, 10054, 10053, 233, 64 and 20. I don't know what those codes are, because most of them are not even valid error codes on my SQL Server (Server 2005) and *none* of those are Deadlock for me (error code 1205). So if you're using Azure, yeah, the defaults are fine. But if you're not, you probably want to roll your own.
You're right. I understand better now. Thanks :)
Which version of C# supports this?
All of them?
Try/Catch is the wrong solution for handling values that may be null.
&gt; Realistically, when you're dealing with something that may not have a value and should, it's in a Try/Catch block, and you're prepared to handle it on the 20% case. Here is a list of catches that should never, ever.... EVER exist: - catch(ArgumentException) - catch(ArgumentNullException) - catch(NullReferenceException) If you have any of them in your code I would call it serious code smell.
And....why would you not simply do null checks?
Depends on your application, but note that IQueryable.Where takes an overload with Expression&lt;Func&lt;T, bool&gt;&gt; which can be used to construct queries dynamically.
What key comes out of the event (or do mediakeys not trigger normal keypress events)? I've never worked with media keys, but I would presume that if you made a richtextbox, and changed the keydown event to spit out the keypress as a string (they key itself, obviously, and not the event) then you'd know exactly what button it is.
Are these multiple videos in your application, or are they in external applications? If you're embedding mplayer (using -slave or not), you could pass a List&lt;Process&gt; of all the copies of mplayer running, and then use a foreach to change the standardoutput to make them seek to a specified point. However, that's the practical approach. From the sounds of it you want to synch multiple applications. That's trickier and I'd have to know more about the setup before I could venture a guess.
I have checks for those, and failure points that return groomed error messages while logging full stack traces for admins to check for. In some automated services, the data is just bad.
So looking at the MSD for sendkeys.send, I don't see medianextrack. What about: SendKeys.Send(Keys.MediaNextTrack.ToString()); I don't actually expect that to work even remotely, but I've been surprised when stuff like this works.
Also look at P/Invoking it! http://www.codeproject.com/Articles/6042/Interoperating-with-Windows-Media-Player-using-P-I
The only exception to that rule would be when you have a layer interfacing with a 3rd party component/library. This layer should be an interfacing facade shielding your application code with the 3rd party code smells/issues. Beyond that, no, it really shouldn't be in your own managed code that you have control over. At least, in the ideal world. In practice, for my usage, `try/catch` blocks rarely exist _at all_ except for these cases where I'm interfacing with external resources/libraries that I have no control over. Most of my managed code lets exceptions bubble up to be generally logged because they are _exceptional_. They should not happen. If they did, the application is in a _invalid state_: log it, fix the bug, otherwise bad things might happen.
Didn't think so. P/Invoke looks like your only way (short of a library for doing this which my quick googling provides no such libraries). P/Invoke isn't bad, but I hate the lack of feedback when it doesn't function properly.
These are four videos (and possibly one audio) recorded simultaneously (of the same activity) using [VLC libraries for .Net](http://www.codeproject.com/Articles/109639/nVLC). I have an array of "m_player" (no relation to mplayer). The videos are already synched but I'm trying to find a way to either use one track bar or four locked-together track bars to move back and forth while reviewing the video.
could you use this: player.Events.TimeChanged += new EventHandler&lt;TimeChangedEventArgs&gt;(Events_TimeChanged); from their example, and in the Events_TimeChanged, match *all* players to it? That would probably trigger 16 events off, so it's no efficient. That would be to lock them all together. I looked at the codeproject page and don't see a way to seek through the file (I'm just quickly reviewing, if I missed something don't shoot me yet) but if you can seek, I would have a normal TrackBar, and when the valuechanged event fires figure out what percentage of the bar it's at and then seek to that percentage in the files. Since they're synched it won't be a problem to use an absolute value but a 1-100% seems more appropriate in case you had four different videos of varying lengths. Going the other way, with synched videos, is possible too. With the TimeChanged event from player, you could figure out what percentage you're at and set the bar. This is all off the top of my head. I'd code a quick attempt at demoing it myself, but I'm supposed to be reading my C++ book as the bosses want me to diversify from C# but your project sounds more interesting than reading about logic structures.
Believe it or not, I started out using gstreamer, C++ and Qt. I then realized that gstreamer's going through this big transition from 0.1 to 1.0 and it was confusing trying to wade through all the undocumented command and parameter changes. I don't actually know C++ (beyond a beginner level) but I figured out a long time ago that for most of my work, learning equal parts of the language, the IDE and the framework gave me enough to build the basic CRUD-type applications that I need. So I looked back at nVLC again and built from Roman's (Roman Ginzberg, the author) basic example applications. I've gotten near to the demo stage after a few months but also got burnt out because I do this in the evenings/weekends and work all day trying to keep VB6 programs alive as well as convert them over to web apps (while getting out of XP as well). Roman has some example apps (in the downloaded code) and one of them includes a track bar that works for reviewing the code in a single window. I'm going to work on some of your suggestions this week. Thanks for the ideas! 
Because I've written some playback stuff, this would be my recommendation, presuming you're using winforms. Setup 4 pictureboxes, wherever you're going to put them (all in a row, 2x2, whatever). Use System.Diagnostics to have access to the Process class. Four of them. In an array would be nice. Each Process.StartInfo.Filename will be "Mplayer.exe" (which should be in the same dir as your exe) and their Process.StartInfo.Arguments will be the following: Process.StartInfo.CreateNoWindow = true; Process.StartInfo.UseShellExecute = false; Process.StartInfo.RedirectStandardInput = true; So this says to the process, don't display anything. Let our application control it and allow us to write to the process with a datastream. Now let's add this: string args = ""; args = "-quiet -slave -vo direct3d -vf scale -msglevel all=-1 "; args += "-wid " + (int)PictureBox.Handle + " "; args += "FilenameOfTheMovie.avi"; Process.StartInfo.Arguments = args; So this bit is the arguments for mplayer. There are three important bits: 1. -Slave puts it into slave mode. 2. -wid is the handle of the picturebox you want the movie to display into. You will need to alter this for each of the four processes. 3. FileNameOfTheMovie.avi is whatever you want the filename to be. So this sets us up that the moment we run Process.Start(); four copies of MPlayer start up, are passed the window handle of the pictureboxes (you could also use panel.handle or form.handle) and begin drawing the movie in that space. The last thing we need is a trackbar, that when the value changes (probably check that the mouse button isn't down, meaning the user is still dragging the bar, to avoid massive event calling) you would have a standard command sent to the four mplayers. Now if you did the processes as an array or a list, you can use a foreach, otherwise just duplicate this four times. Process.StandardInput.Write("seek 1 " + trackbar.value + "\n"); This is a mplayer slave specific command. seek 1 is the % of the total playtime, but you can use seek 2 if you want a specific seconds value. For example "seek 2 5" would seek to exactly 5 seconds in (it might be in ms, so 5000). Ergo, if it's tied to the trackbar, it will send the command to mplayer to seek to the percent/absolute value at that time. If you want more information about this, the basic project is available at [This CodeProject](http://www.codeproject.com/Articles/176354/Simple-Mplayer-Front-End-in-C) and the Mplayer Slave Commands can be viewed [here](http://www.mplayerhq.hu/DOCS/tech/slave.txt)
Note I've also done this in linux with GTK+. All you have to change is instead of a picture box, use an eventbox with a socket widget, and provide that. Also you can't use direct3d in linux, you'd have to use -vo xf instead.
If you rely on a feature in A that's missing in B, that sounds like better. https://en.wikipedia.org/wiki/Comparison_of_C_Sharp_and_Java First-class language support for generics, lambdas/functional programming, and asynchronous callbacks. Those are the big three, but there are plenty of others.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Comparison of C Sharp and Java**](https://en.wikipedia.org/wiki/Comparison%20of%20C%20Sharp%20and%20Java): [](#sfw) --- &gt; &gt;This article compares the __[C#](https://en.wikipedia.org/wiki/C_Sharp_(programming_language\))__ programming language with the __[Java](https://en.wikipedia.org/wiki/Java_(programming_language\))__ programming language. While the focus of this article is mainly the [programming languages](https://en.wikipedia.org/wiki/Programming_language) and their features, such a comparison will necessarily also consider some [platform](https://en.wikipedia.org/wiki/Computing_platform) features and some [library](https://en.wikipedia.org/wiki/Library_(computing\)) features. For a more detailed comparison of the platforms, please see [Comparison of the Java and .NET platforms](https://en.wikipedia.org/wiki/Comparison_of_the_Java_and_.NET_platforms). &gt;Java and C# are similar programming languages that are statically, [strongly](https://en.wikipedia.org/wiki/Strong_typing), and [manifestly](https://en.wikipedia.org/wiki/Manifest_typing) [typed](https://en.wikipedia.org/wiki/Type_system), both are [class-based](https://en.wikipedia.org/wiki/Class_(computer_science\)) [object-oriented](https://en.wikipedia.org/wiki/Object-oriented_programming), both are designed with semi-[interpretation](https://en.wikipedia.org/wiki/Interpreter_(computing\)) or [runtime compilation](https://en.wikipedia.org/wiki/Just-in-time_compilation) in mind, both use [garbage-collection](https://en.wikipedia.org/wiki/Garbage_collection_(computer_science\)), and both are "[curly brace languages](https://en.wikipedia.org/wiki/Curly_bracket_programming_language)" like [C](https://en.wikipedia.org/wiki/C_(programming_language\)) and [C++](https://en.wikipedia.org/wiki/C%2B%2B). &gt; --- ^Interesting: [^Multiple ^inheritance](https://en.wikipedia.org/wiki/Multiple_inheritance) ^| [^C ^Sharp ^\(programming ^language)](https://en.wikipedia.org/wiki/C_Sharp_\(programming_language\)) ^| [^Java ^\(software ^platform)](https://en.wikipedia.org/wiki/Java_\(software_platform\)) ^| [^Comparison ^of ^C ^Sharp ^and ^Visual ^Basic ^.NET](https://en.wikipedia.org/wiki/Comparison_of_C_Sharp_and_Visual_Basic_.NET) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cgu4h2o) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cgu4h2o)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Dumb question; does Roslyn give you the ability to create native x86 binaries in C# that can be executed on computers without the runtimes installed?
Seeing as Roslyn is written entirely in managed code I don't think there's an easy of achieving this. Although I have to admit that I never really use native binaries. 
MAF certainly seems like a possibility. Time to do some prototyping...
I wish I had programming classes in high school. All I had was a class on creating websites with dreamweaver.
They don't realize that they're only hurting themselves with it.
I love this tool. It's not a silver bullet but the fact I can check my mappings at test time has saved me multiple times. There is an undoubted groan when things fail initially but its codification of data transfer between models and is invaluable from compile time to code cleanliness.
Can you ELI5 why it's bad to have that?
I prefer it if a language doesn't easily allow things to be abused, there'll always be bad programmers you have to work with and the less they can abuse the better.
[Well my answer has made a whole new post.] (http://www.reddit.com/r/csharp/comments/23amjk/dotting_all_the_is_about_c_is_java_done_right)
Good post. Your English is just fine. I agree with your assertion (he he), but when I come to these types of discussions, I am always reminded of something my college professor told me a long time ago: "use the right tool for the job". There are many languages, each with strengths and weaknesses. Don't be afraid to study and see if another language does something better, and use it if it does. That being said, C# has come a long way, and is very powerful. I would be hard pressed to find something that it is *not* suited for in my current environment.
You're incorrect about MS being able to use Java on .net. They created j# for just that purpose and it was in Visual Studio through 2005. They did get slapped for J++ by Sun but that was pre .net.
ty, corrected.
They could go the way of making Java itself preferable tool of developing for windows. There was a thing called MSJVM (Microsoft java virtual machine). But they wasn't able to fit in things they needed (DCOM and Win32) without breaking compability. But putting such things aside... you know Microsoft, they need control and hate using other vendor's soft and any kind of open-source, etc. 
https://meta.stackexchange.com/questions/9134/jon-skeet-facts
Plus they have Anders Hejlsberg, one of the Danish demigods of programming.
I ment "to use open-sourse from others in their products". I've heard stories about a guy went for a job interview to microsoft. They asked him for a code sample. He gaved them one and they asked what license is it under, He lied that GNU (he wasnt sure but that was a job interview, you can't say "i don't know"). They said that Microsoft employees are forbidden to LOOK (!!!) at GNU code, because Microsoft doesn't use such products and an employee may use somewhere in his work later something he took a look at.
I'm extremely skeptical that this ever happened, at least not in thr way described, as though employees are forbidden from ever viewing GNU code.
[If](http://www.reddit.com/r/csharp/comments/22bofp/how_can_i_refresh_my_web_request_to_continuously/cglf2hd) you find a way to receive push updates please share it. :) If you haven't seen it yet, there is a [btc-e C# api](https://github.com/DmT021/BtceApi). Some things are broken, but the tickers work. The BtcePair enum doesn't have all the latest pairs, but it works if you add the pairs yourself. Good luck.
C# master race.
So, I use Java every day at work, and C# every night at home. So I feel fairly well positioned to answer. Until very recently (i.e. Java 8), in my head I've always seen the two languages like this: Java is the sturdy, no-nonsense language. It takes the phrase 'keep it simple, stupid' and runs with it. Yes, people like to hit on its verbosity but *I actually like that*. I can always open a Java program and understand it. No remembering if the closed-over variable in that lambda will be re-evaluated each time the lambda is run (i.e. what .NET version am I targeting?). There's only one or two 'weird' things in Java. The rest is pure OO. Sometimes, of course, Java takes the KISS approach too far. I would give my right testicle for unsigned arithmetic. Yes, sometimes writing a triple-nested foreach instead of using LINQ is a massive pain in the ass. Yes, I miss custom primitives (e.g. structs). But ultimately, Java is easy to write correctly. It's easier to write correctly than in C#. Really. Because there's usually only one way to do something. And, all that nonwithstanding, Java actually sometimes /still/ does things better than C#. Yep, I said it. Want an example? Generic wildcard constraints. I.e. if you have a Foo&lt;T&gt; class defined, you can have a List&lt;Foo&lt;? extends Object&gt;&gt;. Which means you don't need to specify what T actually is to have a list of Foos. It's a better approach to co/contravariance. If that doesn't convince you, I really prefer the diamond syntax to **var** for shortening long generified types. Example: *Map&lt;String, Map&lt;String, Integer&gt;&gt; someCrazyMap = new HashMap&lt;&gt;();* Plus you can use that for member field declarations or local field declarations. Aaaand you're specifying the actual type of the member (e.g. Map in Java is an interface). C# on the other hand is sorta a bit more crazy. It's waaaaay more multi-paradigm, and sometimes that really pays off. LINQ, functional programming, custom value types, reified generics, a better framework (for me, at least...)... All great stuff. And I guess I know where my loyalties lie really because I *choose* C# when I can. But you know, I'm not the biggest fan of every feature in C#. I wish they'd restricted var to only when necessary. I'm a massive anti-var guy. I've heard all the arguments for and I think they're bogus - I really hate that goddamn keyword. :p But on a less contentious note, even the good features add their own baggage. Every thing that C# has over Java requires more learning. Structs are cool, but you gotta understand their performance implications, and what will happen if you don't make them immutable. await/async is awesome, but you have to learn the state machine and what's going on underneath (okay, you don't, but you should). Lambdas, delegates, events, IL emitting, extension methods, operator overloading, dynamics... All VERY awesome tools, don't get me wrong, but going back to what I said earlier, all requiring careful application. Even properties come with baggage - changing a field to an autoproperty requires recompilation of every application or library that used that field. Did you know that? Now, **don't get me wrong, I absolutely prefer C# to Java**. I guess I'm just playing Devil's advocate, seeing as this is a C# subreddit, after all. ;) But you know, I stand by what I said. To put it another way, badly written Java is much easier to navigate and understand than badly written C#. Side note: The introduction of lambdas with Java 8 has muddied this distinction in a bad way for Java, if you ask me. This article is hella interesting: http://java.dzone.com/articles/why-theres-interface
You forgot [Turbo Pascal](http://en.wikipedia.org/wiki/Turbo_Pascal)!
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Turbo Pascal**](https://en.wikipedia.org/wiki/Turbo%20Pascal): [](#sfw) --- &gt;__Turbo Pascal__ is a software development system that includes a [compiler](https://en.wikipedia.org/wiki/Compiler) and an [integrated development environment](https://en.wikipedia.org/wiki/Integrated_development_environment) (IDE) for the [Pascal](https://en.wikipedia.org/wiki/Pascal_(programming_language\)) [programming language](https://en.wikipedia.org/wiki/Programming_language) running on [CP/M](https://en.wikipedia.org/wiki/CP/M), [CP/M-86](https://en.wikipedia.org/wiki/CP/M-86), and [DOS](https://en.wikipedia.org/wiki/DOS), developed by [Borland](https://en.wikipedia.org/wiki/Borland) under [Philippe Kahn](https://en.wikipedia.org/wiki/Philippe_Kahn)'s leadership. From version 6 both a lower-priced Turbo Pascal and more expensive __Borland Pascal__ were produced; Borland Pascal had more libraries and standard library source code. The name Borland Pascal is also used more generically for Borland's dialect of Pascal. &gt;==== &gt;[**Image**](https://i.imgur.com/W1JyXn8.jpg) [^(i)](https://en.wikipedia.org/wiki/File:Turbo_pascal_30_cover.jpg) --- ^Interesting: [^Pascal ^\(programming ^language)](https://en.wikipedia.org/wiki/Pascal_\(programming_language\)) ^| [^Borland](https://en.wikipedia.org/wiki/Borland) ^| [^Object ^Pascal](https://en.wikipedia.org/wiki/Object_Pascal) ^| [^Anders ^Hejlsberg](https://en.wikipedia.org/wiki/Anders_Hejlsberg) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cgv9s2m) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cgv9s2m)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
-1 - He created a decent cheap dos pascal (Turbo Pascal) 0 - He created a rapid application development platform for windows that didn't suck as hard as VB (Delphi + VCL) 
&gt; I wish they'd restricted var to only when necessary. Most developers I know are the exact opposite - inside a method, only *don't* use it when necessary. For 90% of your variables declared inside a method, there is absolutely no reason *not* to use var. 
The BSD and GNU licenses are very different. You can use BSD licensed software in proprietary code bases. GNU is a bit toxic in the same way proprietary is toxic just to different groups. Contamination is why mono for example doesn't want contributors that have viewed the .Net framework source that's available.
&gt; (he wasnt sure but that was a job interview, you can't say "i don't know" You should always say "I don't know" when you genuinely don't know the answer. I respect people more when they're willing to say they don't know instead of trying to make up something that sounds right.
I know. But "open source" just means you can see the source code. Microsoft has never been anti-open source. They were rather anti-Free Software until the late 2000s, though.
The only time I couldn't use a var was inside foreach statements -- the typecasting sometimes doesn't work right.
I'm not sure what something like MyClass myClass = new MyClass(); really adds in clarity over using var.
They could use Java, but they were stuck at Java 1.1, by contract.
And Delphi.
Sometimes they're the only way to handle things sensibly... Lippert has an article where he gives the example of reading a file. Checking if it's available and then working is *not the same* as handling an exception because what if it disappears partway through your operation? Even the best-programmed application in the world can't control the hardware.
Because those are all always the result of programmer error (although NRE is IMO not quite the same as the other two). If you run into them you should probably be actually fixing your broken call to something, not catching the exception.
If you're trying to argue on `var`'s side, you picked a very poor example. Anti-var developers are against using `var` for things like: * var addr = myDict.Select(d =&gt; d.Value.Address) * var thing = thingRepository.FrobThing(ThingOptions.AllowAll) Not occasions where you're just repeating the type.
So what are the other errors then? Not errors by the programmer but between like hardware incompatibility or something?
Or .NET Micro (Which really doesn't get enough love....)
works great! I had no idea you could use different colors in a console window like that (C# noob)
As a C# developer transitioning to Android development and finally getting serious about Java, I definitely agree with this post.
Herb Sutter's agrees with you in his [advice to C++ programmers](http://herbsutter.com/2013/08/12/gotw-94-solution-aaa-style-almost-always-auto/) regarding `auto`. In particular, &gt; **We (meaning you) already ignore actual types all the time…** “… Wait, what? I do not ignore types all the time,” someone might say. Actually, not only do you do it, but you’re so comfortable and cavalier about it that you may not even realize you’re doing it. Let’s go back to that code in Question 1: template&lt;class Container, class Value&gt; void append_unique( Container&amp; c, const Value&amp; v ) { if( find(begin(c), end(c), v) == end(c) ) c.emplace_back(v); assert( !c.empty() ); } &gt;Quick quiz: How many specific types are mentioned in that function? Name as many as you can. &gt;We can see pretty quickly that the answer is a nice round number: Zero.
True, it's just that some languages tend to promote good behaviour better than others. (e.g VB.NET has by default Option Explicit off, which leads to some interesting bugs after people copy pasted chunks of code). Inexperienced programmers will look up samples online to do the things they want without questioning it and latch on to that as the way to go. Back when I started I was guilty of that as well. I've seen a lot more well written C# samples than I've seen PHP or javascript, because there's usually only 1 way to do it and that is usually the right way because the compiler is much more strict.
Also, why would you use ulong? Just use int instead, your values are not going to be bigger then 2048. You could use ushort to be all fancy, but just use ints, it is the most obvious for everyone. Always keep in mind that random in C# is not really random at all, but rather pseudo random that, given the same seed, will produce the same series of numbers, not really a problem here, but something I like to mention.
&gt; yea well Microsoft perfected Visual Studio I'd take IntelliJ Idea over VS without ReSharper. edit: you know, it'd be really helpful if you post why you disagree instead of pressing downvote like a 5yo kid. 
There is a reason that var and Linq were added at the same time. It's because as a developer, I don't care at least 99% of the time what Select returns. Is it an IQueryable&lt;&gt;? Is it an IEnumerable&lt;&gt;? Don't care. All I care is that I can do other Linqy operations on it. In the case of an anonymous type in the lambda, I can't even write the return type! I find the second case to be similar - either I know the return type (and what the meaning of any operations are), or I'm going to have to go look it up anyway. Why feel the need to specify the type of intermediate values? We don't feel the need to specify the type of the lambda, or of ThingOptions.AllowAll?
The cases where it's ambiguous are pretty few. I almost never use anything but var.
Well, for example, on the other end of the spectrum, you could get an exception if an attempt to connect to a Web service times out, or if your write to a disk fails, or something like that, which are circumstances you don't necessarily have control over. An argument exception or argument null exception is saying "hey! The way you tried to call this method isn't valid."
 dynamic Is the keyword for anonymous types. So you would use IEnumerable&lt;dynamic&gt;. Alternatively, in probably 80%+ of cases, you can probably use .ToArray(). Regardless, your point still holds. One power of var is that you can cut definitions for generic types down considerably. 
[It's random](http://imgs.xkcd.com/comics/heartbleed_explanation.png)
As a continuation to your statement, the remaining 20% of the time you can't just use these: .ToArray() .ToList() ... is when you're using Entity Framework. That's partially a joke, but it's a huge pitfall that a lot of developers fall into. I've found that developers are _floored_ when they are told not to do this, but when they figure out the reasoning behind _why_ this (generally) shouldn't be done (if anyone reading this doesn't know, [I won't spoil the surprise](https://stackoverflow.com/questions/19676376/why-is-entity-framework-tolist-with-include-very-slow-and-how-can-i-speed-it)), they have a near-immediate understanding of its benefits and how to apply it to their code. I remember the day I realized what yield keyword did ([MSDN](http://msdn.microsoft.com/en-us/library/9k7k7cf0.aspx)). It's made such a large impact on the quality (and efficiency) of my code. I've come to find that it's the little things in C#/.NET that are the most impressive.
I love C# and prefer it over Java and it's not even close, but I have to agree that IntelliJ is a super IDE!
"dynamic" is the keyword for dynamic (late) binding (it's basically reflection under the covers). "var" is statically typed and resolved at compile time. Anonymous types are all "proper" .net types, just with unwritable names. The difference is that var table = mylist.Select(x=&gt;new {key=x.key, val=x.value}); var ok= table.First().key; var nonsense = table.First().silly; will give you a compile time error (as "silly" is not in the anonymous type), whereas: IEnumerable&lt;dynamic&gt; table = mylist.Select(x=&gt;new {key=x.key, val=x.value}); dynamic ok= table.First().key; dynamic nonsense = table.First().silly; Will give you a runtime error as "silly" will be resolved via reflection at runtime. 
It'll be interesting to see how this changes with Roslyn.
&gt;You always access Console - try to avoid Singletons, separate display and game logic (advanced) Example: Instead of having a ``ulong board[,]``, try to refactor the code to use a ``Board`` class. Maybe the class will use ulong internally, but it would be much easier to maintain.
And those are the VERY BEST places to use var. There is no objective argument for why it's better. But if you don't believe me, just stop worrying and start doing it. Of all the things the many years of experience at work disagree about, THIS has never been one of them. This feels so much like the whitespace in Python issue. Get over your prejudices, do it, and then you'll find out it's actually a much better way to code. EDIT: Of course, there will be one or two people who go "I don't like it and I didn't like whitespace in Python either and blah blah blah blah". My point is that you are in the extreme minority. The rest of the C# world is happily using var and enjoying it, most of them after doing it your way for years. Feel free to keep coding that way, but you're wasting your time trying to convince the rest of us that var is bad.
I know they make both, I own both of them (or rather my employer owns ReSharper and I own IntelliJ Idea). VS is a very nice IDE, but I'm missing way too many features out of the box. With ReSharper it's certainly the best IDE ever though :)
Kitty!
You shouldn't really have any trouble with the forms app. Depending on the implementation of the cart it could be easy enough to convert it or you know not. 
So I got the forms app converted to a single user control. I wanted to add code-behind to the control, but it was already declaring Inherits="DotNetNuke.Entities.Modules.PortalModuleBase". So I had to stick all my code in the &lt;runat server&gt; decleration. 
Especially Delphi.
No but Native code compilation was also announced at build and is a feature coming to VS2013 soon.
It is not totally bad but Im stuck on Delphi 5 at work. Can't wait until I can start our C# rewrite in a few months.
I just learned about yield from you, thanks! 
If I add a button, and double-click on it, it creates the onButton_Click method inside the &lt;runat server&gt; section in the user control. 
Okay, that is where I heard it. This is a big deal right? Not having to be interrpreted by the CLR would see a huge performance improvement, right?
Thanks for the comment! The idea behind ulong is that it can go over 2048. Also the board can be arbitrarily bigger than 4x4. At the time of implementation, I though ulong would be safer and not causing much a memory footprint. Yeah as you see I don't use a fixed seed for the random. I only did that when I was debugging.
The int data type can hold any integer between -2,147,483,647 and 2,147,483,647. I really don't think you'll get any higher than that...
Though it seems like support for Desktop apps isn't likely to arrive anytime soon :(
It makes things much easier to read when everything is consistent. It's not hugely important, but it's easy to do and increases readability, so why not?
Look at the second question in the FAQ. They explicitly state that the it will allow for building apps that do not depend the Framework being installed.
I'm not sure it increases readability. I like to look at less code, except when it's not making things clearer... and I'm not convinced always using access modifiers does. I guess it depends on who is also reading the code.
I came here for a cat pic
Thanks for all the great comments. While most of them concern about the coding style and OOP issues, does anyone have thought on the algorithm itself? I haven't read the original 2048 implementation, but I like the way I handle the board updating in all four directions in a unified way, with a highly customized double loop that can be both row-major and column-major, and the inner loop can be both increasing order and decreasing order. The other way to implement this would be to implement the update logic on one direction, and then using board rotation to support all four direction movements. I didn't choose this approach because it's more expensive performance wise.
Well, as long as it's your personal code, do what you like. I'm sure not going to get into a holy war over access modifiers.
 Too bad it's only supported for apps so we won't be able to use it
I believe Go does something similar. Go has garbage collection and it produces statically-linked native executables by default.
I dont agree with the badly written c# vs java thing. I've seen some insanely badly written code in both languages. The fact that java was prominent during a time where people were over-zealous with applying design patterns they possibly didn't fully understand leads to some really nasty legacy code. You can do terrible things in both languages and there's little the language constraints can do to prevent you from doing so.
They did say they're planning on supporting desktop apps down the road.
If you really want to geek out over this check out the going deep from channel 9. http://channel9.msdn.com/Shows/Going+Deep/Inside-NET-Native
Everybody starts somewhere. When I was first learning (in Perl) I couldn't understand why you'd ever need a subroutine.
What jobs are better suited for Java, what for C#?
One of Mono's compiler modes has been able to do this. http://www.mono-project.com/AOT can't wait until it reaches desktop
That never really worked if you wanted to use DLLs though. You had to compile all the libraries using AOT and compiling with AOT was a nightmare. (I'm talking about Windows; might've been easier on Linux)
He'll c++ has smart pointers in the boost libraries which can be statically linked. I don't see the big deal. 
You have to keep in mind the expense of handling exceptions. Doing a check for a null value and handling it consumes a good bit less resources than just lazily catching an exception. 
This is nice!
http://stackoverflow.com/questions/9033/hidden-features-of-c
Oh man that's really useful. Thanks for that link man, I'll definitely be messing with some of these thing over the weekend.
Named arguments are really nice in some cases!
Yea I can already see a few places where this'll help me on my current project. I love learning cool things like this once in a while, feels nice to go back and improve my code.
What book did you use to learn? Or what resource? Every basic book should cover these kind of things.
I absolutely prefer to use named parameters when you pass primitives to methods: myMethod(true); // What does that parameter do again? Let me check the signature... myMethod(recursive: true); // Ah! I can immediately see what the true is for.
I started originally as a c++ programmer and self-taught with googling and MSDN reading over the course of 3 or 4 projects. As you can imagine this kind of process can easily let small things like that through. On the up-side, every time I find one of them, I fall in love with C# even more.
Check the properties of the control in the designer. You can select "Events" there.
Here is the solution I am currently using, is this a good way or should I do it differently? if(InputList.count &gt; 15){ List&lt;int&gt; Helper = new List&lt;int&gt;(); loopcount = -1; foreach(int ding in InputList){ loopcount++; if(loopcount == 0){ continue; } Helper.Add(ding); } InputList.Clear(); InputList.AddRange(Helper); Helper.Clear(); } If more than 15 elements are in the InputList, I skip the earliest entry and add the rest.
You could build a queue that maintains a fixed length as items are added (enqueued). Here is a link on how this can be done: http://stackoverflow.com/questions/5852863/fixed-size-queue-which-automatically-dequeues-old-values-upon-new-enques 
What are you trying to do with it? Do you want it to act like a Stack or a Queue, or more like a list with maximum length? Just the X 'newest' items only?
I am using it to track if a user inserts a certain keycode, so the list is as long as the longest keycode i have implemented. If I'd just make the list be a fixed size and clear it if that size was reached, some longer keycodes would only work if the input of them was started right after the last clear, or the keys would be cleared from the list before the input was finished. 
A way around it could be just to have the method below private void SomeMethod() { var list = new List&lt;Class&gt;{1,2,.........,16,17,18}; list = GetLastItems(list); } private List&lt;Class&gt; GetLastItems(List&lt;Class&gt; list) { var newList = new List&lt;Class&gt;(); int maxValue = list.Count(); if(maxValue) &gt; 5 for(int count = list.Count() - 6; count &lt;= list.Count(); count++;) newList.Add(list[count]); else newList = list; return newList; }
Thanks for the reply! Isn't that about what I am[ already doing?](http://www.reddit.com/r/csharp/comments/23fe84/how_do_i_make_a_list_that_only_stored_the_5_last/cgwg5sm) 
You can use reflection: functions function = new functions(); Type type = function.GetType(); string methodName = Console.ReadLine(); MethodInfo theMethod = type.GetMethod(methodName); theMethod.Invoke(function, null);
Awesome, thank you very much. Can this work with a function that takes arguments?
It is pretty close, except yours has a lot of nesting, which isn't necessarily bad just harder to read. Also the foreach loop isn't really needed when it can be done easier and cleaner in a for loop.
Yep, the second argument in MethodInfo.Invoke is an object array of parameters. http://msdn.microsoft.com/en-us/library/system.reflection.methodinfo.invoke.aspx
var can be done in c++11 with auto, (some) LINQ features can be done using lambdas, although only the basic ones. You could probably implement most of it if you really wanted though... that said if you really really wanted, you could write a tool to make your headers for you, as the header contains very little information that the source file doesn't. You'd need to mark things as public/private/protected, as well as static or extern, and have a way to have them removed by the compiler in the native code ("#define PUBLIC" might work if you could stomach all caps markers...). I think c++14 will also support attributes, but I'd have to check. All that said, I love writing C#, but I'd love a better C++ dialect more.
"C++ is never going away". Remeber of how many things progarmmists stopped caring about with the rise of computer perfomance. May be in 10 years memory manager will be considered to light weighted to think about its performance influence. Maybe one day processor will control the heap, find unreferenced data and so on. Oh, dreams...
It sounds as though you might be implementing something like a special move / combo system you'd find in a game like Mortal Kombat. If the keys need to be pressed within a particular time frame, it might make more sense if you removed the items from the collection at the precise time they become invalid. Then your collection would always contain active items and you wouldn't have to worry about managing its size. You could do this by starting a timer when you add an item to the collection; upon the timer's expiry, you would remove the item.
I'd look into it... If I would be using VMware. Nevertheless a nice project ;)
If you know all the possibilities (as you seem to do) than it would be easier to use a switch on the input. You could even combine the two if performance is super important. That is, by using a switch for your methods and having the default do the reflection. Of course that be more work than one alone again.
I think this can be condensed into one line of LINQ magic: inputList.Skip(1).ToList(); That should give you a list without the first element.
Thanks, I may even generalise it. I might fork it in the future so you could basically put whatever services you want in an XML file along with the executable path so you could use it for any resource hog programmes ;)
So **if** aFunction is **equal to** aFunction, then call function.aFunction(), right? 
Great! Thanks alot, almost got it all figured out now.
Correct, I got it working with how chattycoder above posted. Now I have to figure out how to make it let me overload functions.
Just so you know...companies say they're going to do rewrites in better languages so that they have something akin to a carrot on a stick for their developers. In reality, it rarely makes business sense to do full rewrites, and I truly hope you aren't being duped into staying for a few more months (or longer, it's always a few months away!) while under the impression that you're going to get to do some cool greenfield C# work.
Anytime. :)
The good thing about Count() is the list implementation just returns the property so it's no more or less efficient. 
Thanks for your suggestion, I did consider just running a batch command at first, except you could see the black CMD window open and close really fast. Is there any way to hide all that stuff? Or is the "s" after the "net stop {0}," a silent switch? :)
Excellent point, I suppose I could write a separate class for those functions yea?
You can, but reflection is going to be slower than a switch statement or doing a key lookup in a Dictionary&lt;String, Action&gt;.
the s in String.Format("net stop {0}", s) is just the process name and is used as a placeholder. "net stop " + s is the same as String.Format("net stop {0}", s) And i just found out, that my code isn't correct :P Use this instead: services.ForEach(s =&gt; Process.Start(new ProcessStartInfo() { FileName = @"C:\Windows\System32\net.exe", Arguments = "start " + s, CreateNoWindow = true, WindowStyle = ProcessWindowStyle.Hidden})); Use the CreateNoWindow in combination with the WindowStyle property that the console doesn't flash 
Nice, that will make things a lot easier if I just have to use batch commands in the future!
&gt; why downvote? You're factually incorrect. &gt;Don't tell me you didn't learn something from me sticking my neck out and making a statement... I didn't... what do you think I should have learned?
Why not just get more ram? 
Speed only matters if it is relevant. The milliseconds required to use reflection and invoke the method dynamically are irrelevant in a single iteration. 
I think your immediate problem is that ImageBrush is part of WPF, not Windows Forms (note the System.Windows.DependencyObject in the class hierarchy - DependencyObjects are WPF.) But your larger problem is that the approach seems a little heavy-handed. If you're already going to have to do custom drawing inside the button, why bother with creating an image brush and translating the bitmap? Why not just draw the green area yourself? Taking another step back, is there a particular reason you're turning a button into a progress bar? What sort of UI are you trying to create? Will the user expect the button they just clicked to start filling up like a progress bar?
Yeah I love C#. I know Java, C++, C, Python, LUA, and Some PHP, and I can honestly say that C# is the best out of all of them. It feels so nice to program in it, especially if you're using Visual Studio. So you totally made the right choice. HOWEVER, I do recommend that you learn at least a little C++, as learning what's going on "behind the scenes" so to speak (in terms of memory and stuff), is really helpful in understanding wtf it is you're doing (and it makes you appreciate C# even more :3).
I've got 16GB but I have a ton of programs installed which like to run pointless background services such as iTunes with Bonjour, iPod Service, Apple Mobile Device, VMware with its DHCP listeners and all sorts. I like to have a system with minimal processes and services running as possible.
Why? this obviously isn't a production machine...
I've saved a total of 1GB of RAM by ridding my system of processes and services this way, granted I only use this app on about 4 programs but I virtualise a lot personally so every GB counts.
https://www.destroyallsoftware.com/talks/the-birth-and-death-of-javascript
MSG me your email address I have a project for you. what I did was setup a console app, then using reflection I cache the methods on load. I offer the user a standard prompt :&gt; to enter commands. I then take the command and parse out the inputs and look for. a method that matches that signature I'm then able to execute the method. I use component Models description attribute to decorate the methods and offer a help description. Entering an invalid command or using help will trigger the help. the command parser isn't anything to write home about unfortunately. I've never taken the time to build out a robust parser:( adding methods is pretty easy as the main class uses a partial. so creating a new file with the same partial class sign gets you rolling. I'll be happy to forward you my work. maybe you'll have some additional ideas. 
How it could work.
The CLR internals are not available as a static library to devs. I'm not saying static linking is a big deal, I'm saying MS compiling your app and statically linking a library that they have never released as anything but a system-level DLL is interesting.
why not just use powershell?
hehe I think I know what you mean. I will definitely give it a try when I get a more firm hold on C# :) Thanks for the advice though.
 var services = ServiceController.GetServices(); foreach (var service in services) { if (service.ServiceName = "MyService" &amp;&amp; service.Status.Equals(ServiceControllerStatus.Stopped); service.Start(); }
Hey, I am learning to use C# too you know? ;)
I still use C++ when I have to use C++ (for firmware projects etc...) but I mostly stick around Java and C#. Seriously, when he says it feels like going to back to assembly after coming from Java\C# he was totally correct. I've just come back for another project in C++ and it is an experience that really validates all those rants about C++ being shit. Here are a couple things I noticed that pissed me off about C++: 1. Standard Libraries force you to use operator overloads sometimes. 2. Functors 3. Operator overloading is completely broken in C++ when compared to C#. In C++ you must individually overload the + operator, the = operator and the += operator. All three could perform completely different function. This isn't operator overloading, it's ascii-art short-hand notation overloading. 4. You can't initialize non-static member arrays? What? (Only since C++11) 5. Header files. Holy shit these things are stupid. 6. pragma once isn't "officially" standardized - fine - but because of that you have tons of libraries using stupid C-Style-Include-Guards which just show a huge fault in the language's design. I love C, absolutely hate C++. C++11 fixes some of these but at the cost of making it a much more cumbersome larger scoped language - which is a problem introduced by C++ and hasn't been fixed yet.
This is what most C++ code should look like but many people still write unnecessary for loops and boilerplate code :(
Thank you for clarifying that image brush is WPF. If I do have a button in windows form with a grey background, whats the best way to draw a colored rectangle within the button? I guess I could use onpaint to place a colored rectangle on top of the button, but that could cover up the button text and interfer with button drag... 
Country?
Sorry US 
http://www.codemag.com/Magazine/AllIssues Digital only: http://www.dotnetcurry.com/magazine/
I don't know of any C# specific magazines, but MSDN has a lot of great C# related content: http://msdn.microsoft.com/en-us/magazine/ee310108.aspx PS: MSDN members can get this delivered free. Just go to your MSDN Account page - the one with all the benefits listed.
Yup named arguments over "random" values anyday! 
&gt; To summarize my point, the hand-holding I received was lectures. my profs in college could barely speak english. My calc 3 prof was chinese and my TA for the class was Korean and couldn't speak. &gt; OP came here with a very basic question that his teacher should have been available for. Great. What's your point? Maybe (insert one of a thousand viable excuses here), eh? What now? Could/Should OP have asked classmates if he didn't get it? Sure. But he didn't. He asked reddit. Like an adult.
I wish I could upvote more than once :) C++ or C, even if just the basics are very valuable
The Right Way to do it would be to subclass Button and override the OnPaintBackground method. I haven't tested this, but from what I remember about Windows Forms this is the right approach. You should be able to find examples online on how to do this. But I would urge you to make sure this UI design is sound before spending time figuring out how to execute on it. Unless this is a mostly academic pursuit of course.
public Card TopCard { get { return deck[deck.Count - 1]; } }
the response will work at any time, it's only the getter. Anytime you use TopCard it will evaluate as the current "top card" in your scenario.
/u/michaelquinlan 's answer is good. Just as an alternative, I would probably make the "top" of the deck the first element.... then instead of indexing, you can call deck.First();
I agree with /u/michaelquinlan's suggestion to use a property, it will work like the method, and look like a field, like in your example. In addition, you could use the IEnumerable/IList extension `deck.Last()` instead of `deck[deck.count - 1]` to make it look cleaner.
I'm not sure I understand you. A property getter is the same as a function. You should use google and research how properties work.
The first two sentences say "I don't understand that.." and "It should do this" -- The third sentence says. "I'm an asshole.. "
Thanks for the help. I'm returning the last card of each deck because I'm constantly moving cards from deck to deck where the user can only interact with the latest addition. I guess a stack would be better but some decks can flip over. I haven't used stacks yet. Maybe this would be a good opportunity to learn.
Excellent. So anytime I use a property that relies on a getter, the code runs through the get code each time the property is used? Cool.
Not trying to be a jerk. It's a legitimate suggestion. It appears that either I don't understand OP's question, or they have a fundamental misunderstanding of this language feature. OP will learn a lot more by doing the requisite research and being able to ask deeper questions than stumbling through with misconceptions. But the OP might not think to do that straight away, because they don't know what they don't know.
Unfortunately, MSDN is only relevant if you're interested in the Microsoft technology of the day. So for today, that's all things Windows 8 and Azure. It used to be a great magazine, but since I don't code for RT, don't use azure (amazon for me) and don't use EF (Nhibernate or RavenDB instead), there are entire issues where I don't read a single article. c0bra99 suggested code magazine, it's a lot better in my opinion. Your mileage may vary.
Stack sounds like what you want. I believe it's pretty cheap to reverse one, too.
http://visualstudiomagazine.com/?m=1
I see so many blog posts that say "use the right tool for the job". Yes, you should always use a hammer to hit the nail and not a scissor. But it does not really apply to generic programming(c#,java, etc) that is more like a multi-tool where you even can build your own tools.
What governs thread safety is shared state. If your method does not access any shared state then it is safe. Instance methods typically access shared state hence they are potentially thread unsafe although with synchronisation they can become thread safe. 
So if the calculations done in the static method don't depend on global variable but only what gets passed to "that" precise method, the return will always be what I want it to?
Correct, also assuming that your method does not modify the object that gets passed in as /u/angularbeginner said. The reason is that if you pass the same instance to a method from two separate threads and the method modifies the object, then you have a race condition (not that is particularly good practice to modify input parameters anyway). From what you described you are only doing lookups and not modifying any shared state, so you should be ok.
Assuming that the values passed in are immutable. If the values are not immutable, it is still technically possible for your function to produce an unexpected results. It is a race condition if the instance passed in is also being mutated by another thread.
deck.Insert(0, card); deck.Reverse(); :) Edit: You can also encapsulate those functions in your base class and provide them as method calls such that you can have : public PutCardOnTop(Card myCard) { deck.Insert(0,myCard); } You can then call it over and over to move multiple cards and such.
Based on your description, it sounds like the methods are thread safe, but without seeing the code, we can't tell you for sure. Doing a code review can help you answer these questions. If you don't know anyone that can do this for you, you can always post to http://codereview.stackexchange.com and there will be people to look over your code.
As many people already said here: No, static classes are not thread safe (in fact, they're less likely to be so than non-static classes). Generally the convention is to make any static class threadsafe. Microsoft did this with the BCL (the classes in .NET). Any static class in the BCL is threadsafe (source: CLR via C#).
His structure is better. List add/remove operations at the end of a list are efficient (usually only array assignment, unless it needs to expand), while list operations at the beginning of a list will require a block copy of all the other elements. Most card game operations involve adding or removing a top card. While it is unlikely to make a perceptible difference, it is never wrong to use more correct data structures.
Are C# Lists really array-based under the hood then? Is there a separate LinkedList? I had thought it was the other way around....
&gt; i would use this: services.Where(s =&gt; s.ServiceName.Equals("MyService") &amp;&amp; s.Status.Equals(ServiceControllerStatus.Stopped).ToList().ForEach(x =&gt; x.Start()); I used to write code like that until I read code complete, which taught me that code which is easier to read is easier to support.
To give you a feel for what thread-safety really means, consider the 128bit decimal type, which isn't a thread safe type. When you set a decimal variable's value, CLR sets the first 64bits, and then sets the next 64bits, before moving along with execution. It has to do it this way because we don't have 128bit computers yet. Now, when one thread is setting the value, and another thread is reading the value, this can happen: 1. Set the first 64bits 2. Read the first 64bits 3. Read the second 64bits 4. Set the last 64bit. You end up with an indeterminable state, which is what thread safety is supposed to give you. Now that was just a single variable. Now lets thing about an entire class full of variables and you're getting and setting values all over the place, nothing has been marked volatile, CLR lets threads cache values, and another thread is also getting and setting values. Same situation, two variables that may be dependent will be out of sync when the threads are manipulating them.
I read code complete too and think its a great book, maybe the best. I think this is easy to understand. Maybe the ForEach part could be done separatly but the where query is simple to understand. Edit: use equals for string comparison is easyer to understand and doesn't lead to errors like your single = sign and the &amp;&amp; error when it tryes to compare a string with a boolean
Alternative would be making an enum or const values
Yes and yes. List&lt;T&gt; is array based, and there is LinkedList&lt;T&gt; which is a doubly linked list.
or you could just do `Deck.deck.Last()`
Look at the documentation for [members of TwoFramesDifferenceDetector](http://www.aforgenet.com/framework/docs/html/7899f07e-3504-7e23-38b7-04106bcc4d4a.htm) Properties: &gt; MotionFrame Motion frame containing detected areas of motion. Let's [click on it](http://www.aforgenet.com/framework/docs/html/82f19ef7-4958-d144-1888-6165e24e18a9.htm) &gt; Motion frame is a grayscale image, which shows areas of detected motion. All black pixels in the motion frame correspond to areas, where no motion is detected. But white pixels correspond to areas, where motion is detected. If you look at the [feature page for motion detection](http://www.aforgenet.com/framework/features/motion_detection_2.0.html), it looks like there's even a way to [get rectangles](http://www.aforgenet.com/framework/docs/html/3b0bee1a-286c-1ab6-8eea-5f45efce4726.htm) around the moving objects using [Blob counting objects processing](http://www.aforgenet.com/framework/docs/html/6d5a5986-9285-a15a-a446-5c130bf2d531.htm)
The Task way to get back on the UI thread is to use the correct scheduler. While you're still in the UI context, get it with `TaskScheduler.FromCurrentSynchronizationContext()` and use it for any Task that needs the UI.
Yes, this is one of the things that I didn't really understand about AutoMapper years ago when I first tried it: Automapper can check the mappings in a unit test. Before I understood this, Automapper just seemed like a brittle way to save a few lines of code. But now it's a huge time-saver that also helps me to improve quality. Mapper.AssertConfigurationIsValid();
Says under namespace: **System.Data** You will have to add the reference ot your project for System.Data.
Right click your project, add reference, find system.data. 
Correct, it is executed every time you "get" the value of that property.
It sounds like you have far more important things to worry about/learn than DataTables.
Resharper will also format your code for you, so it's as easy to read as possible. That will help you a lot when you ask someone for help.
http://en.wikipedia.org/wiki/Maze_generation has a pseudo-code description of Prim's Algorithm. Start with a 20 by 20 array of bool all set to true where true means a wall is in that cell.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Maze generation**](https://en.wikipedia.org/wiki/Maze%20generation): [](#sfw) --- &gt; &gt;__Maze generation [algorithms](https://en.wikipedia.org/wiki/Algorithm)__ are automated methods for the creation of [mazes](https://en.wikipedia.org/wiki/Maze). &gt; --- ^Interesting: [^Maze ^generation ^algorithm](https://en.wikipedia.org/wiki/Maze_generation_algorithm) ^| [^Maze](https://en.wikipedia.org/wiki/Maze) ^| [^Depth-first ^search](https://en.wikipedia.org/wiki/Depth-first_search) ^| [^3D ^Monster ^Maze](https://en.wikipedia.org/wiki/3D_Monster_Maze) ^| [^Maze ^solving ^algorithm](https://en.wikipedia.org/wiki/Maze_solving_algorithm) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cgyh4f7) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cgyh4f7)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
I don't see an option to do so. I think I should be able to find it in the Assemblies &gt; Framework tab, but it says everything's already referenced. http://imgur.com/a/urqps#0
I'm not worried about the implementation. I just can't figure out why I can't access System.Data. I've already implemented a CSV parser &amp; ListBox w/DataTemplate, so it's frustrating to hit a roadblock like this.
Thanks, sounds cool. I'll look at it after this part of my project is due haha
apparently it's not possible. [see this](http://rarcher.azurewebsites.net/Post/PostContent/24), about 4 sections down
Store the data in the database and make a template of the sections as a resource of your project. So any time you need a report on demand you: get the data from sql, generate the calculations, build a new document grabbing the sections you want from your resource and fill in the fields of your new document. I dont know what format you need the documents, but I normally do templates in HTML because its easy to edit. Then you can save it in about any format with the proper libraries.
new tools bro, same ol' wood &amp; nails
The channel9 MSDN video series are very helpful, great stuff. I was tempted to breeze over it but stuck to it, or rather am sticking to it.
Typescript != c#
So...finally I can make 50 lines of code into 500 MB?
Is there a specific reason to try this with sockets? Otherwise use NetworkStream. Also, look into the using construct. Very nice for working with streams.
Honestly, when I started I just got the latest version of visual studio (2010 at the time, would get 2013 now) got the latest version of the framework (4.0 at the time, 4.5.1 now) and booted up a console project and started writing code. Took me &lt;1 hour from deciding i wanted to write C# to having a console app. Now I've written desktop, web, cloud, realtime chat-bots, and other types of programs all using C#! Edit: 2012=&gt;2013 typo
I presume you don't mean the Hello World console app from the Channel9 video :) I'm up early before work and itching to get through some of tutorial videos. A good sign.
That...is visual basic O.o
Of course it is/was. I've since edited it. I was planning to show how I'm going to take a small program I had written for work and rewrite it in c#. Isn't there a code tag/markup reddit recognizes? o.O
Sharepoint lets you handle document control, but that's a bit contrived for your application/environment. I might go with SQL as the back end store (SQL 2012 if you want to use FILESTREAM). Maybe use the Office development parts of it to chunk out the pieces of document you need. see: http://stackoverflow.com/questions/3870797/how-can-we-open-a-word-file-with-specific-page-number-in-c-sharp to help you get started around there. Getting large files in SQL work fine, but the FILESTREAM, if you can do it - works better. You get the performance of the file system, with the tracking/manipulation that SQL gives. That will all work ducky with what you have now. In the end, I might think about converting these to "stuff" I can put in SQL and then render in HTML -- so that it's more easily served up and accessible. NTEXT fields of rich text or something, like a CMS system of sorts.
Oh yeah, anything with 4 spaces in front of it is taken as code.
So my short term goal as I make my way through the tutorials is to rewrite a VB script as a C# console application. It is very specific to a task and my work environment and makes certain assumptions but I think it will be useful for me to take something I've already written and rewrite it as I learn a new language. Briefly: It combines all the text files in a working directory strips out the header in each file and then tacks on the final header at the top. It takes one input from the user, a file name and stores the resulting file in the same working directory. Also, I add the script to the user's Send To folder, making it a straight forward process for them to simply navigate to the folder that contains the files to be combined, right-click and run the program. Simple and straightforward. Here is the VB code I'll be rewriting in C# Const fsoForReading = 1 Const fsoForWriting = 2 Const sHeaderName = "ledes_header.txt" Ledes 'Call the defined function. Function Ledes() Dim Wsh 'As WshShell Dim objFSO 'As FileSystemObject Dim objFSOTextStream 'As TextStream Dim objOutput 'As TextStream Dim sOutput 'As String Dim sSaveAs 'As String Dim sHeaderLine1 'As String Dim sHeaderLine2 'As String Dim sLine 'As String Dim objFile 'As FileSystemObject.File Dim objFolder 'As FileSystemObject.Folder If Wscript.Arguments.Count = 0 Then Wscript.Arguments.ShowUsage Exit Function End If Set Wsh = WScript.Arguments Set objFSO = CreateObject("Scripting.FileSystemObject") Set objFSOTextStream = objFSO.OpenTextFile(Replace(Wscript.ScriptFullName,Wscript.ScriptName,"") &amp; sHeaderName, fsoForReading, True) sOutput = objFSOTextStream.ReadAll objFSOTextStream.Close Set objFSOTextStream = objFSO.OpenTextFile(Replace(Wscript.ScriptFullName,Wscript.ScriptName,"") &amp; sHeaderName, fsoForReading, True) sHeaderLine1 = objFSOTextStream.ReadLine sHeaderLine2 = objFSOTextStream.ReadLine objFSOTextStream.Close Set objFolder = objFSO.GetFolder(Wsh(0)) 'First zero based argument represents working directory For Each objFile in objFolder.Files Set objFSOTextStream = objFSO.OpenTextFile(objFile, fsoForReading, True) Do While objFSOTextStream.AtEndOfStream &lt;&gt; True sLine = objFSOTextStream.ReadLine If sLine = sHeaderLine1 or sLine = sHeaderLine2 Then sLine = "" sOutput = Replace(sOutput,vbCrLf &amp; vbCrLf,vbCrLf) &amp; vbCrLf &amp; sLine Loop Next 'objFile sSaveAs = InputBox("Please supply a file name (name.txt) for the combined file. The file will be saved in the same directory as the source files.","Ledes") If sSaveAs = "" Then objFSOTextStream.Close Set Wsh = Nothing Set objFSO = Nothing Set objFolder = Nothing Set objFSOTextStream = Nothing Set objOutput = Nothing Exit Function 'Get out of here if user didn't supply a value for file name. End If Set objOutput = objFSO.OpenTextFile(Wsh(0) &amp; "\" &amp; sSaveAs, fsoForWriting, True) objOutput.Write sOutput objFSOTextStream.Close objOutput.Close Set Wsh = Nothing Set objFSO = Nothing Set objFolder = Nothing Set objFSOTextStream = Nothing Set objOutput = Nothing End Function 
I did the same years ago. C# is pretty much the same deal dude, you'll pick up the syntax fair quick. Some things that tripped me were remembering the add the parenthesis after every function and method call, especially after .ToString as vb lets you get away with a lot. If you're dealing with sessions etc is not Session() it's Session[] Lots of tiny things like that but it's a very small hurdle to overcome. I couldn't go back to vb now. 2013 would be the IDE of choice.
 public List&lt;string&gt; pals; Public processPalindrome(string val) { if(val.reverse() == val) { return true; } return false; } List&lt;Words&gt; words = context.GetListOfWords //could use a for loop on words.count foreach(var x in words) { if(processPalindrome) { pals.Add( x) } else { //meh } } 
Should have done this years ago but better late than never. Thanks!
You should write it new instead of rewriting it. Meaning: Don't look at your old code.
pop the stack!
No, but it is closely coupled. especially when MVC becomes involved. 
Well then, best of luck with that then!
Savitzky-Golay smoothing effectively removes local signal noise while preserving the shape of the signal. Commonly, it’s used as a preprocessing step with experimental data, especially spectrometry data, because of it’s effectiveness at removing random variation while minimally degrading the signal’s information content.
I thought it would be easy to adapt the other class I got that sends text to send files instead. Also, WCF seems like overkill for what I'm trying to do. I'm not using a server that needs to be up 24/7, and both ends of the application are going to be on a LAN that's not connected to the internet so security isn't that important.
If you want to use WPF instead of windows forms, here's an overview on how to localize your UI. http://msdn.microsoft.com/en-us/library/ms788718(v=vs.110).aspx You should learn more about XAML though: http://msdn.microsoft.com/en-us/library/ms752059(v=vs.110).aspx
Because he will not store documents, only part of documents ...
If you don't need to look up the information in the documents often (i.e no need to search on the contents of all/a lot of the documents), I would go with a simple file system based storage. Namely XMLs, that will have some unique key of sorts based on criteria such as creation date etc. Then index those up in a DB (Rational one, just as SQL Server or Oracle), with a path to the XML.
Hmm, the one you linked uses a function to generate the surface, so if you can generate a function like that from your input, it could work. It also uses the CPU for drawing it, so it's gonna take quite a bit of CPU if you draw it often. I don't know of any libraries, but this one doesn't seem fitting for your requirements. Edit: This StackOverflow question links to quite a few different libraries for the same problem, as far as I can tell: http://stackoverflow.com/questions/5816701/net-integratable-robust-fast-solution-for-surface-reconstruction-from-3d-point
That WAS fun. :)
I'm not sure I would recommend a relational database in this case, unless you are going to store values about the document rather than a blob of the document itself. If you don't need the relational capabilities of a SQL-style database, perhaps a nosql document store such as Couchbase or Raven would be better. I have experience with both, and I would strongly recommend Couchbase over Raven - the Raven .net library is a memory hog.
I'm not sure I would recommend WCF for this, but anything can be a WCF host - you don't need a dedicated host application running on a server.
Hm, I was hoping for a slightly more... 'scientific' approach for determining how the brightness value maps to ASCII characters. The rest of the application is really easy to write, provided you have that brightness function. I think this could be a great tutorial for people who are still new to C# or programming in general, but the video kind of expects people to know what he's doing, which doesn't really make the video suitable for that purpose either.
I like the idea OP! Beer and code is great and I actually just did this exact thing a week or so ago, so I must be your target demographic. I just wrote a snake-clone console app game that was fun. I bet you could fit that into a beer's time. Keep it up!
Thanks for the positive feedback! I don't have much experience making games, but that sounds like a lot of fun. I might have to try it.
&gt; http://www.codemag.com/ http://www.codemag.com/Magazine/Issue/359ed45d-f1e5-4afb-8a35-161b3988d253 for the latest issue. Great writers such as Mr. 500 page books Dino Esposito. Really good stuff. Outside of that goto http://www.pluralsight.com/. Not free but worth all the magazines I have ever read put together for training. 
Storing BLOBs of the documents in SQL is silly. Index what you need to pointers in a file system and simply steam back requests for actual docs. Storing gigantic files in SQL has never worked out for me.....Ever. I just love trying to backup 30 gig .bak files. There are other ways of doing this but partitions take skill to get correct unless you have a actual DBA to pay attention to such things. 
I just based my example on your description, and That didn't include the plain Domains. How Long does yours take to run btw, compared to the shorter one?
Threw the following together. It was fun! Gotta work on bounds checking. But arrows will direct the little guy around. I'll get it up on GitHub once I get the game implemented a bit more. To use, just instantiate it and call `Run()`. public class SnakeGame { private int X; private int Y; private ConsoleKey Direction; private List&lt;Tuple&lt;int, int&gt;&gt; Tail; public SnakeGame() { X = 0; Y = 0; Tail = new List&lt;Tuple&lt;int, int&gt;&gt;(); Direction = ConsoleKey.DownArrow; } private char SnakeHead() { switch (Direction) { case ConsoleKey.DownArrow: return 'V'; case ConsoleKey.UpArrow: return '^'; case ConsoleKey.LeftArrow: return '&lt;'; case ConsoleKey.RightArrow: return '&gt;'; default: throw new Exception("Bad value for direction: " + Direction); } } private long TicksPerFrame = 1000000; public void Run() { while (true) { var frameStart = DateTime.UtcNow.Ticks; ClearDisplay(); DrawGame(); ProcessInput(); Advance(); var frameEnd = DateTime.UtcNow.Ticks; var totalTicks = frameEnd - frameStart; Thread.Sleep((int)((TicksPerFrame - totalTicks) / TimeSpan.TicksPerMillisecond)); } } private void ClearDisplay() { Console.Clear(); } private void DrawGame() { Console.SetCursorPosition(X, Y); Console.Write(SnakeHead()); foreach (var tail in Tail) { Console.SetCursorPosition(tail.Item1, tail.Item2); Console.Write('0'); } } private void Advance() { switch (Direction) { case ConsoleKey.DownArrow: Y++; return; case ConsoleKey.UpArrow: Y--; return; case ConsoleKey.LeftArrow: X--; return; case ConsoleKey.RightArrow: X++; return; default: throw new Exception("Bad value for direction: " + Direction); } } private ConsoleKey[] movekeys = new ConsoleKey[] { ConsoleKey.DownArrow, ConsoleKey.UpArrow, ConsoleKey.LeftArrow, ConsoleKey.RightArrow }; private void ProcessInput() { if (!Console.KeyAvailable) return; var key = Console.ReadKey(true); if (!movekeys.Contains(key.Key)) { return; } Direction = key.Key; } }
i took a quick swing at generating the brightness map for all characters in the ascii table. http://pastebin.com/Tn9rC28N it's probably not working right yet since i haven't been able to properly debug it since my console app is throwing a fit using System.Drawing and it's the middle of the night. neways you have the rough outline, you can prolly make it work in a couple of minutes.
That looks awesome. I wonder if that will perform well in practice. Gonna have to implement that soon. I should get to bed though, cuz it's late here too.
/u/LlamaNL commented with some science. They calculated density of ascii characters. Haven't implemented it yet, but it looks great. http://www.reddit.com/r/csharp/comments/23owwo/fun_with_c_creating_an_image_to_ascii_art/cgzpkga
Use WPF and the helix3d package from nuget. Its excellent. 
I spent a lot longer than I should have messing about with this.. thanks! I really enjoyed playing with this. :D
I am mentioning in my post that I want also plain domain names to be detected. I am using this in a TextChanged event of a TextBox, and it detects the url as the user writes it. Fast enough for my purposes.
I was up till 3am this morning making mine output to HTML so I could colour it too!
Great video. I'd love to see larger projects in a 30 minute video. Keep it up
I have seen those resources, but is that the easiest it is going to get. I need the ELI5 version....
http://stackoverflow.com/questions/1337345/what-is-the-difference-between-wpf-and-winforms To keep abreast of the wave, should just dive in to WPF (also keep in mind for the future - WCFs and Entity Framework to round out your "this is crap I should know"). http://wpftutorial.net/LearnWPFin14Days.html As always, Microsoft is an excellent resource for everything they put out: http://msdn.microsoft.com/en-us/library/ms754130(v=vs.110).aspx on par for "what the heck, how do I, I'm having a problem with..." -- Stack Overflow is a godsend to us developers - not just for problem resolution, but for guidance: http://stackoverflow.com/questions/183315/what-are-the-best-resources-for-learning-wpf-net 
Yes, this is for Winforms. 
I'll look into the links from that StackOF question. I cannot actually make what I need from simple giving it equations. I think that would be a bit cumbersome for what I am doing. 
I am basically looking for something that can tie my data values to an array of points on a 2d plane, which will be modulated and moved up and down on the Z-Axis, according to the value of those data values tied to each corresponding point.
Thanks for the tip. I'm looking into it right now.
I put mine up on github too, if you want to look at it. I've done some unnecessary things like add dynamic characters that were pretty fun. [Snake](https://github.com/LegNBass/Snake) I'm pretty new to C# and coding in general, so if it's unreadable or organized poorly, I apologize in advance. 
If you use a IDE or just a more sane lineformat you can more easily find that you have missed a } between &gt;while (adminQuit!= true &amp;&amp; appQuit != true); else That should be &gt;while (adminQuit!= true &amp;&amp; appQuit != true); } else 
I tried putting a curly bracket between while and else. But then more errors showed up 
Returning empty collections and default value types for any exception-throwing code seems like a horrible technique. I know it's just an example for AOP but... find a better example. EDIT: I just realized you're the article's author. No offence intended. :)
It's not an example, it's a real aspect. Why do you think it's a horrible idea?
You are trying to do to much in a single function. You need to break this up into function calls, so that you don't end up with such a big spaghetti mess of code. &gt; while (adminQuit!= true &amp;&amp; appQuit != true); } else I think should have two braces, to line the else up with the correct if. But you need to format this better, and refactor it into separate functions. You will save your brain much burning.
You need two curly brackets eg: } while (adminQuit!= true &amp;&amp; appQuit != true); } } else { user = -1; for (int i = 0; i &lt; custCount; i++)
You may have missed it in an earlier part of this series, but this aspect also puts an error into a validation error collection (e.g. MVC's ModelState). So the UI is already aware that there's an error. Without that in place, of course it's a bad idea :)
I did changes as you suggested but a warning is showing at break in the adminChoice switch case Console.WriteLine("Invalid Menu Selection"); return; break; 
Warning is "Unreachable Code detected"
The warning is due to the break. The return exits the function. The end. The break is unreachable. It is the exception to the rule, that all cases must end with a break.
Maybe I'm misunderstanding, but if you're asking how to access the array, what you'd do is squares[0,0] = placedSquare; squares[0,1] = placedSquare2; etc. The first 0 will be your row, so if you wanted to place the squares at the top row for each column you'd just go through row 0, column x. 
I'm not exactly sure how you have your implementation set up, but what I would do is keep empty positions null in the array, and then when you initialize the game, for through your columns and put a new square in each position. for (int col = 0; col &lt; Y_SIZE; col++) { squares[0,col] = new Square(); }
Actually I think I may have missed something. Are you squares the squares of the game board, not the pieces? I took it initially as the array was your game board and the squares were the pieces. If it's the other way around and your Squares are objects that represent the game squares, and those squares can contain a piece, then I would do something like this // initialize every game board square for (int row = 0; row &lt; X_SIZE; row++) { for (int col = 0; col &lt; Y_SIZE; col++) { squares[row, col] = new Square(); // if we're on row 0 add a new piece if (row == 0) squares[row,col].GamePiece = new GamePiece(); } } This would infer that every Square has a property for a GamePiece, you could also perhaps do a bool for if it was occupied or not. Again, I'm not entirely sure of how you're implementing it, but those are a couple different ways to handle what you might be doing. Edit: OH! And best of luck on your project :)
I think then `null` would be a way better value to return than an empty collection. This makes it **more** clear that there has been an error, instead of simple no results.
Glad to hear. I had fun too :)
Thanks for the feedback. I'll look into doing a larger project.
Yeah I used this line to print it into the file. sw.Write("&lt;font size= 1 face= Courier New color = " + ColorTranslator.ToHtml(color) + "&gt;" + pixel + "&lt;/font&gt;"); There's probably a much better way to do it but I was just hacking it together towards the end of the night xD 
remove return; just leaving break;
I'm pretty confused as to why you would do this rather than just doing this: public ActionResult MyAction() { var listResults = _service.GetAllResults(); var model = new MyViewModel(); if (listResults != null) { model.NumResults = listResults.Count; } return View(model); } 
you sure can, you can use glade to create xml files that gtk can load with GtkBuilder. Honestly i've never done it in C# but that's how I used to build guis in C with gtk
 string.Replace("/64", "ffff:ffff:ffff:ffff::") Hope this helps
And that's one of the best parts :D
I met who a guy who'd supposedly developed for 20 years who writes *if(someBoolean == true)* How does one respond to that? Reading it is like a slap in the face to me.
Yea, it's like the most beginner thing evar &gt;.&lt;
Sorry if I wasn't clear it's not a const, it could be 68, it could be any number really...
Have they added support for attachments yet?
There is support for attachments, need to investigate in that part.
glad that it is helpful, you're welcome :)
Coming from a lower level background (Verilog, C) and newbie to C#, you would implement a FIFO/Queue to push the incoming data into on one thread, and another thread that pulls out the data for processing. A FIFO will ensure the data you process is in the same order as it came in.
http://www.dotnetperls.com/queue
Doesn't look especially inefficient to me except for one thing: `if (result2.Count() == 14)` should be `if (result2.Length == 14)`. The `Count` method is an extension on `IEnumerable`, so it has to enumerate the array to count the number of entries. Arrays already store that information in the `Length` property.
I don't see how this is related to C#, unless you share the source code.
I must not be understanding you correctly... Would you please point out my error more precisely for the sake of all readers?
You need to create a new instance for every EmailRecipient: EmailRecipient rep1 = new EmailRecipient() { Address = "mail@domain.com" } And then add rep1 to the List of recipients. You did not create an instance for it, this will throw an error in Visual Studio that tells you exactly that. The way I wrote it in my blog post was the only way I got it working. I hope this helps. 😊 
I guess I could do that, but then why not just put all my exception handling and logging in the action there too? I'm suggesting that it's part of the cross-cutting concern, and therefore it should be in the aspect.
Convert the source to an `IObservable`. Making things like that a push rather than pull sequence is always easier.
Its not supposed to be easy. Learning something useful will almost always be difficult and confusing and frustrating. Some people might have natural talent but if you rely purely on talent you won't get far. Learning is a constant process. I hope you realize that what you've accomplished is not exactly easy despite writing everything in the main method. Are you a glass half empty kind of person?
Broad rule I use when teaching students: "if you have the urge to copy and paste code, it probably should become a function."
I guess. I'm just trying to get it within the standards, mainly because I'm the sysadmin in a software company, and everyone around me develops C#, and I told my CTO that I made the app and she was like, "Ok great, put it in SVN!" This, in itself, isn't that bad. I just want to make sure it's standardized in the event that I leave the company, whoever inherits my mess won't be completely chafed. Edit - grammar
yeah personally I hate the "for dummies" books for programming. So much better off learning online. They're pretty outdated a lot of the time they do things the long way around. I prefer to learn from examples then I can expand on what I've learnt.
Thing is, I want to badly. I just don't know how to implement it so that the pieces interconnect correctly. Like for instance, I have at the top of the main method 10 string variables that are pulling from the config file using the ConfigurationManager class. I want to be able to make that a function/method in such a way that the main program just does one line of code to execute all 10 of those lines. Or better yet, one line of code that does it without needing the 10 separate lines. That's just one example.
"Coding is easy. Building software is hard." The question ultimately is, are you trying to build this to 'get it done' or are you trying to architect a system? Let's assume for a moment you're trying to architect a robust and modular system. If that's the case, then great. You've got a working prototype; a tracer bullet of sorts. If your current system is working, then great. your tracer bullet is on mark. What you need to do now is rewrite it. If you're unfamiliar with OOP or if you've never learned how to write methods that return data or 'do stuff' then start small by making small reusable methods where before you have it all stuffed in the static method Start by refactoring what you've got. There is NOTHING wrong with doing the same work twice if you're trying to architect something new. If you would like examples and if you feel comfortable, then post some of your code here. A public forum like this is probably one of the best places to get ideas on how to rewrite your application. Also, if you have C# developers in house, ask them. They can show you with real world code how to think out the logical process and then applying it. edit: grammar
Here is what you should do: think about what you've written, not as code but as a sequence of actions that take place for the program to run. Following this you need to focus on taking small pieces of code that you've written that correspond to those logical actions you've defined and create methods with clear and concise names that describe the action taking place. Here is an example of a self contained and reusable bit of functionality. static string ReadWebResource(string url) { using (var wc = new WebClient()) return wc.DownloadString(url); } 
It doesn't sound like the mechanical act of programming is holding back but the higher level OO concepts. Have you considered asking one of the devs for a code review? 
Why don't you post your code here and perhaps we can use that as an example to show you ways to smarten it up, using an example you are already familiar with? 
Once you do get it, you will never want to code in anything else. 
I can't help with "actual examples of realistic code", but you could look into doing things in powershell instead. You're handling things in the systemic "do this, then this" way because that's one of the key ways we automate (the other is [declarative](http://en.wikipedia.org/wiki/Declarative_programming) rather than [procedural](http://en.wikipedia.org/wiki/Procedural_programming) languages). It's a series of steps that have to occur sequentially. Powershell (and any interpreted language like Python, Perl or Ruby) handle this very well. Powershell has collections of handy functions that you can use in your day to day projects. For example, the Invoke-WebRequest returns a pre-parsed website that you can manipulate. It's object oriented, and it handles in a way you're more familiar with. You can manipulate .net objects directly and even embed C# code in your projects (though this isn't something you should jump to). Overall, it's more useful for professional projects as a _sysadmin_. That isn't to say learning C# is bad or that you shouldn't do it. I've written a few services for work (if you want to get in the C# mind set, write a service with configuration files!). There just are better automation tools as a sysadmin.
Just split your Main() into sub-sections, then factor them out to methods. For example, I'm sure it runs something like this : * Load config * Scrape websites * Create mail * Send mail In a first step, just put a few line breaks in-between each section. Then decide on one to factor out, what parameters would you need? Remember that you can also have variables in your class scope which can be accessed by all methods (not necessarily the best of ideas but meh). Also, the problem is that what you wrote doesn't really apply to programming, it's more like automation along the kind of stuff one would do with a 50-line bash script or whatever. Once you do more complex stuff you will quickly appreciate code separation.
It sounds like you need a general OOP design book and not something C#-specific. Try GoF.
Thank you, I'll change that.
I'd check out the O'Reilly book "Learning C# 3.0". It does a great job of explaining C# and OOP, and one of the first things the author does is show you how to move almost everything out of Main() in an easy to understand way.
Thanks, I'll look into that. I didn't knew it existed.
"Object oriented programming is a way to describe what a thing IS and what it can DO." - http://www.reddit.com/r/explainlikeimfive/comments/j4dmq/eli5_what_is_objectoriented_programming/ "A method should do one thing and only one thing. However many lines of code it takes to do that one thing is how many lines it should have. If that "one thing" can be broken into smaller things, each of those should have a method." - http://stackoverflow.com/questions/611304/how-many-lines-of-code-should-a-function-procedure-method-have Never forget YAGNI rule: "You ain't gonna need it". You should not refactor your code and make it beautiful or "correct" just for the sake of doing it or just because you think you'll might need to later. Do stuff when you need it. It's all about trade offs between time, resources, quality, maintainability, ... You should consider programming to be a tool for building stuff and to make a "tool" analogy - if you only need a shed, don't build a mansion with a pool. Here's some food for thought for later -&gt; http://www.sromero.org/wiki/_media/programacion/tutoriales/code_simplicity_summary.pdf Even tough your program is very short and might not need refactoring, i'll try make a simple attempt and describing what this process could be: To try to get into the "mood" for refactoring your program a little, consider the following: What actions does your program do? You described some of them: * Scrape 3 websites * Parse content from web page * Send out email with parsed content used in the the content So,... - You could use a single method, that pulls website content for you. So you'd want to give it for example, url as parameter and get back a string -&gt; public string GetWebPageHtml(string url) {...} : here you'd implement functionality to pull website content and return it. It can be as simple as WebClient.DownloadString or you could have some more logic/handling of special situations etc. - Method to parse content from webpage: Now, this of course depends of what you want to get from the page, but just for example, lets say you do it like this: public string GetHtmlContentByNode(string html, string nodeSelector) where your parameters would be html=the page html you retrieved with GetWebPageHtml and the nodeSelector would be something you pass for htmlAgilitypack to filter the part of the page you want to pull content from -&gt; html.DocumentNode.SelectSingleNode(...) - For sending out emails, since we already have something that gives us a section/content from the pages, we could probably use an email Template system, so a method that takes in a template, allows us to throw in some parameters to populate the template.. so for this we could for example use RazorEngine - https://github.com/Antaris/RazorEngine that would allow us to descibre emails as Templates and pass in the content... What did we get from all of this? You notice that we split down functionality/actions into more manageable groups of steps. It's easier to read, it's more reusable (hey - you want to add 50 more websites to parse and 10 different emails and recipients, no problem - get the urls, identify the nodeselectors and whip up some templates..etc), it's easier to debug, and so on and so on.. 
Thank you for the suggestion.
Do you actually need / want to learn to code, or are you just looking to use it for a few arbitrary systems at work to make your day to day easier? I can very easily and briefly explain why having 1 giant method is a poor idea, but if you're only writing code once per month (tops), it almost seems pointless to care.
If you want an idea of how to do it. Write the code like you did. Now highlight a part you want to make a new method, right click, click extract method. It will do it for you. Although depending on your code, it might make some weird out variables. 
Well I have no idea about your actual problem you're trying to solve, but based on what you described the way I would do it is: Main: have 1 line which calls a method holding the program, say process(), or start() Process/start method: foreach through the scrape sites from your config file &amp; call processsite(x) method in the body of the foreach Processsite(x): will process actual site and email in one shot One piece of advice is throw your code up on github if it's not confidential so people can look at it and suggest edits
Assuming that those ten lines are similar and there is a pattern between each iteration, then you should use a loop. Give me specific examples, and I can show you how to shorten/clean it up.
mail.To.Add(**new** EmailRecipient("mail@domain.com")); This ought to instantiate an EmailRecipient.
Thanks. I've added my code to Pastebin, accessible here, if it gives any sort of context: http://pastebin.com/6MMvffpY
If you are "a fucking idiot" you should consider giving up on programming. Everyone benefits from not having idiots among programmers. Not joking.
I have, but our current devs are very busy. I was considering forwarding my code to an ex-coworker that I hang out with, to get his take, but he's crazy. I've seen his code, and I'm not sure it's such a good idea. Figured I'd try to get some guidance to see if I can figure it out for myself first. 
Thanks for the request. I was considering doing that without being prompted first, but I don't know if that would have been proper etiquette here. http://pastebin.com/6MMvffpY
I can tell. It's funny, because prior to writing the app I wrote in C#, I was first trying to do it in Node.js using Javascript. I found myself on that route because I knew what I wanted to do, and it looked like most people were doing at least the webscraping part with JS. And that part worked out fine. It was the attempt at the JS mailing part by using variables to populate email body that led me to .Net and C#, after a very nasty run-in with VB script. After I easily wrote the mailer portion in C#, I was basically using the script to get the content and save it to a file, then writing IO operations to pull that and put it into the email portion in C#... I got to thinking, I really want this to just be one app. So from there, it was no turning back. 
So, lets do an example of why methods are handy using a pseudo-code WebClient example where we need to grab some json from an API endpoint. If we write it all in-line, it would look something like this: private static void Main(string args[]) { string dataPage1; string dataPage2; string dataPage3; using (var w = new WebClient()) { try { dataPage1 = w.DownloadString("http://api.somewebpage.com/Data1Endpoint/"); } catch (SocketException e) { Console.WriteLine("Problem connecting to Data1 API."); } catch (WebException e) { Console.WriteLine("404. Data1 not found"); } catch (Exception e) { Console.WriteLine("Unknown error."); } } using (var w = new WebClient()) { try { dataPage2 = w.DownloadString("http://api.somewebpage.com/Data2Endpoint/"); } catch (SocketException e) { Console.WriteLine("Problem connecting to Data2 API."); } catch (WebException e) { Console.WriteLine("404. Data2 not found"); } catch (Exception e) { Console.WriteLine("Unknown error."); } } using (var w = new WebClient()) { try { dataPage3 = w.DownloadString("http://api.somewebpage.com/Data3Endpoint/"); } catch (SocketException e) { Console.WriteLine("Problem connecting to Data3 API."); } catch (WebException e) { Console.WriteLine("404. Data3 not found"); } catch (Exception e) { Console.WriteLine("Unknown error."); } } //do stuff with our dataPage strings after this. } But wouldn't it be so much better if we didn't have to rewrite all that stuff each time we want to get data from a different URL? Of course. So let's do it like this instead: private static void Main(String args[]) { string dataPage1 = getJsonData("http://api.somewebpage.com/Data1Endpoint/", "Data1"); string dataPage2 = getJsonData("http://api.somewebpage.com/Data2Endpoint/", "Data2"); string dataPage3 = getJsonData("http://api.somewebpage.com/Data3Endpoint/", "Data3"); //do stuff with our dataPage strings after this. } private static string getJsonData(string URL, string type) { string json; using (var w = new WebClient()) { try { json = w.DownloadString(URL); } catch (SocketException e) { Console.WriteLine("Problem connecting to {0} API", type); } catch (WebException e) { Console.WriteLine("404. {0} not found.", type); } catch (Exception e) { Console.WriteLine("Unknown Exception for {0}", type); } } return json; } Hope this helps!
Thanks! And you're right, the code is exactly those 4 steps. http://pastebin.com/6MMvffpY
I was kind of making an exaggeration with that line. I apologize for it. I'm not a programmer, and I won't be getting into that field. But I would like to learn how to use it to make mine, and my co-worker's jobs easier via automation, and perhaps useful utilities. Thanks. :)
It's the latter. I realize I shouldn't be stressing proper coding techniques because of this, but at the same time, if any of my apps become standard at my company, I'd like for it to be in the sort of shape that our programmers can work with if they decide to implement something I write into their code, etc. Also just to keep things mildly standardized at least.
Yeah I'm gonna go ahead and downvote you. He's most probably referring to the fact that it makes him feel like an idiot, not that he is an actual idiot. 
Thanks for the resources and the encouragement!
Please don't downvote me I have family and children ;(
Uh oh, I think I'm beginning to understand. Here is my code: http://pastebin.com/6MMvffpY Is there anything in there that would be an exception or addition to your layout?
Thanks. That had occurred to me, however I'm wanting to go in sort of a two-fold direction. One is automation, however, the other is also building utilities that my techs can use to make their jobs easier. Our software devs are too busy working on production software, so they're not available to provide the kind of tools that I'd like to be able to provide. I just figured if I'm going to become proficient at writing any sort of code, it would be better to become proficient at one that serves both purposes. Thanks for the reply!
Thanks for this. Very helpful and it's what I need to focus on. 
My apologies then ;) Not that I took the title completely literally, but I hate when people are trying to get into programming without bothering to use their time and brains, asking for help at every step. Such people never become good programmers, maybe their talents lie elsewhere, and bad programmer is not something like a bad poet, bad programming has actual bad/terrible/disastrous consequences, from additional work for colleagues to hacked databases. Apologies again, I hope you see where I come from. I'd help you but I see other people already posted lots of good advise.
Not a problem man. I definitely spent a good while just being able to write what I did, and I learned a lot from it. And I definitely spent a good amount of time reading and learning about how to do things the right way, but the concepts and examples never seemed to apply to my particular project intuitively, so I was hoping to get a more real-world perspective of the principles behind the design aspect as it related to what I was trying to do. Edit: And they delivered. :)
Okay... have a look at this change **http://pastebin.com/Ji2xwHEn** I didn't run it, as I just edited it locally. Edit: It's just a simple nip and tuck. 
I'm definitely going to study it and my old code and internalize exactly what has happened. And you will not believe how much this is going to help me understand what's going on. Just having code that I wrote that I understand, put into a context of something I couldn't understand, will make me able to finally understand. Understand? ;)
I took a stab and making it more "modular" for you. http://pastebin.com/hfAVKD2p You'll notice that basically I took out all of the things that were copied and pasted and moved them into separate methods. I also made the sendMail method, because despite only calling it once for now, at some point you may need to send 2 copies to 2 different people. Might as well make it as future proof as possible! Also, I noticed that you weren't using try/catch blocks around web calls. In this specific instance, it's probably not a big deal because you just run the script again if something doesn't work. But it's good practice to use try/catch blocks so you can find errors. Lets say that the website you are scraping happens to be down that day? Your script will keep crashing out (because your scrapeValue strings are empty and can't be processed), and you would have no idea what was wrong. Anyways, I hope this is helpful. I'm not a professional programmer or anything, but if you have any more questions I'll try to answer to the best of my ability. E: Thanks!
Yes, the variable 'page' in the foreach loop is updated with the next list objects details, until all have been run. Just a thought... You could, in the WebPageList() function, update the code to pull the webpage details from rows in a database table. That way you could add as many pages as you like without having to alter the code of your app to read new appConfig items. Hope you understand some of the concepts a bit better now? Again that is a rough draft, some of the lads here no doubt could clean and optimize it to the nines! But I did what I could in ten minutes. 
I actually do, we've all been there at one point. Good luck with it! 
Hey that's cool! You simplified it a lot. Thanks for the error handling part too, as I definitely need to put that in there, however I think I might go with the error writing to a log, as this app is triggered via task scheduler early in the morning when there is no one logged into the server to view any exceptions. Further, I control my Exchange server, so I have in the config file a distribution list, and would update that in Exchange when new members need to be added. Really love how you simplified things. Thanks so much. I should be able to learn a thing or two from it. Edit: I should probably look for a way to trigger an email containing the thrown exception that way I can have it forward a text over to someone to go in and manually trigger the task again, in case of any network issues at the time. (This whole program does something that goes out to customers, so it's definitely important, as you may have assumed.)
Thanks for the suggestion. However, the app is pulling data from websites that are updated daily, and the only usable information that I send out to customers is the latest daily copy. Also, it's only ever going to be 3 websites. (It's weather information, btw). I just had to ensure that the app.config allowed for URL changes and node position changes so that the appropriate data is being captured should something change on those pages. Thanks again, though! When I have a bit more time to study the code, I'm sure it will have provided the complete understanding I needed relevant to the project, and undoubtedly to future projects.
Thanks! Will look into using stringbuilder on that. Also I'm loving the loop for the webpagelist. While I can pretty much say with certainty that I will never need more than three pages, I do like having less instances of similar code. I will try doing this with a loop and leaving it at the default 3 as you have it. Thanks so much!!!
Hey thanks man! I had said this earlier somewhere down in the depths, but my goal is to learn something that would be useful for both automation and creating utilities. I figure if I'm going to put the balls on the wall, it should be a process that can achieve both. But I do know the glory of Powershell, albeit in a limited sense, like creating PS scripts to automate things I'd otherwise do manually in Exchange. I'll definitely dig into PS concepts and see what it really has under the hood, though. I'm sure there are many things I can utilize it for that wouldn't require application development. Thanks again!
Those "For Dummies" books are generally garbage, and (when it comes to programming at least) never seem to be written by anyone with any authority on the subject. Just a heads up for anyone else looking to learn.
Since there is already a lot of good help here, I would just like to throw in a piece of advice: Comment EVERYTHING. It took me 20 years and being thrust into lead programmer on my first really multi-developer project to grasp the power that such a simple act can bring. * You mention that others may want to perform upkeep on your code in the future. Do them a favor and let them know exactly what you're doing. It's also a great reminder to yourself. * It's a great self-check. I find that often times I just get in the zone and start writing code, with few comments except for reminders. Going back through and commenting that code for my co-workers often times helps me find inefficiencies or redundancies.
First of all, if the program is small, there is nothing wrong with putting it all into main. As someone else said rule one is if you are copying and pasting it, it should be a function. As to how to make a function, here is a good starter tip if you are using Visual Studio (and if you're not using visual studio, why not? Express edition is free). Highlight the area you want to make a function, then right click it and choose *"refactor-&gt;extract method"*. That will pop up a dialog box asking you to choose a name for your function. Type in a name and hit ok. That will cut your code, create a new function, paste your code into the function, and insert the function into exactly the right place. It will figure out what needs to be passed in as arguments, and what values need to be returned. It's really cool, and once you've done it a few times you'll get the hang of it and be able to do it yourself. 
To put into perspective what /u/mynoduesp says do this: Copy your code as you first wrote it (and it worked) to a location. Maybe C:\MyfirstProject Forget about it for a few months then, after you've gotten some more experience (if you plan any other small projects) go back and look at the code. you may not realize how far you've come in just that short period until you go back to look at that code and start thining "Good god, who wrote this.....oh, that was me WTF?!".
You are welcome :) If you are into creating utilities i can suggest you one course specially. After you learn the basics of ps ( which is really easy if you are Windows sysadmin ) you can watch this cource : http://www.cbtnuggets.com/it-training-videos/course/powershell-toolmaking-scripting PS : The cource covers the basics of ps. You can even start learning ps with this cource.
Yea, it's called HTML :P In all seriousness you need to learn more about Object Oriented Principals.
Also, loops are a great reason to make a method or iterator.
Will keep this in mind when finding the best approach. Although, the particular app is not in a time-sensitive context even in the least. So making the code simpler is of higher priority. Thanks!
Thanks. I went through a lot of tutorials and reading, etc. I get the concept. I just was less aware of how to implement the concept effectively. I think the responses thus far have served as a resource for me to bridge that gap. 
Haha. I will do this. 
Refactoring will also help you create properties. That's the object oriented way to do variables. Let's say you have a class named "Animal". An Animal can Walk and Speak. An Animal has a Color and a Name. When describing your object if you use the phrase "has a" that means it's a property. If you use the phrase "can do X" make it a method. So for our Animal, Walk and Speak are methods. Color and Name are properties. The C# code for our class is like this: public class Animal { private string _color; private string _name; public void Walk() { .... } public void Speak() { .... } } Now in visual studio if you right click on Name and choose "refactor-&gt;encapsulate property" it will turn the code into this: public class Animal { private string _color; private string _name string Name { get { return _name; } set { _name = value; } public void Walk() { .... } public void Speak() { .... } } Now that name is a property, we can do stuff with it every time someone tries to read or write it. Like this: public class Animal { private string _color; private string _name string Name { get { return _name + " I also modified the name when you read it!"; } set { _name = value + " I modified the name when you set it!"; } } public void Walk() { .... } public void Speak() { .... } } So now if you used your class like this: Animal myAnimal = new Animal(); myAnimal.Name = "mittens"; Console.WriteLine(myAnimal.Name); The output would be: *"mittens I modified the name when you set it! I also modified the name when you read it!"*
Try stackoverflow.com.
For a single line, sure that would be fine. But when you have a multi-line output StringBuilder would be better because there's an explicit AppendLine method which handles the new line character for you, making the code look a bit easier to read.
Thanks for the insights and suggestions. I can't thank all of you enough!
Multi-line string template works nicely with it. It just depends on how many substitutions you need to make, but it can be much easier to see a block of text in a single string than not. string.Format(@"This is a line 1, this is line 2.. {0}", "hi mom");
I have been on an async/await kick lately as I have been dabbling in Windows 8.1 metro style apps.. I took your code and converted it into an asynchronous app.. I did not run this code http://pastebin.com/sTWFcEHw edit: i realize this is way more advanced than you would like right now, but save it, and in 1 year you can come back and laugh at my code 
Check out Glade
Thanks man! Some delicious-looking concepts going on in there. Saved. Will research later. :D
Here's a perfect example, right off the top: string webURL1 = ConfigurationManager.AppSettings["config.webURL1"]; string webURL2 = ConfigurationManager.AppSettings["config.webURL2"]; string webURL3 = ConfigurationManager.AppSettings["config.webURL3"]; See, there is a pattern there. Computers are great at doing boring repetitive tasks. Humans are not. A prime example of when to use a loop so the computer does the hard work, and not you! string[] webURLs = new string[3]; //make an array of strings, essentially a collection of them for (int i = 0; i &lt; webURLs.Length; ++i) { webURLs[i] = ConfigurationManager.AppSettings["config.webURL" + (i + 1).ToString()]; //above, I used string concatenation and the index of the loop to attach the number at the end. } So much shorter! And the computer is doing all the boring repeated tasks! From this point forward, all of your 1,2,3 type stuff should be done within a loop, similar to the above. In fact, you may be able to code the entire process once, as one big loop! That's your homework, son/daughter.
I fucking love you. This comment alone, in context with a piece of my code, really makes a difference and focuses me on how to improve particular things one at a time. I gotta say... when I had posted this right before leaving work, I didn't imagine that you all would turn out to be so amazing. If it made financial sense, I'd gold every last one of you. Thank you.
What have you used CouchDB for and was it hosted on a Windows server? If so, how was the experience? I have been trying to find some real life examples of projects that use(d) CouchDB and .NET but haven't had much luck. 
You're very welcome. I guess all that teaching I've done the last seven years is worth something after all! Anyway, if you have more questions, fire away.
This is absolutely not related to Entity Framework in any way. Either `courseGridView` is `null` (unlikely), or `courseGridView.Columns` is `null` (unlikely) or `courseGridView.Columns["Department"]` is `null` (very likely). Steps you need to do: - Learn to use a debugger to figure out yourself what variable is null. (Hint: Breakpoint using F9) - Stop writing forms applications, start writing console applications and first learn C#! Of course you need to instantiate an instance before you can use it. What would you use if you don't have an instance? Nothing. You instantiate classes using the `new` keyword. **EVERY SINGLE BOOK ABOUT C# WILL TEACH YOU THIS!**
Try this out: http://pastebin.com/Dj11ysFE * moved scraping stuff into SiteScrape class * moved email stuff into Email class * reorganized main to do things in stages (build list of sites, then scrape all, then send email) * renamed some config settings so they made more sense to me * moved email settings into config (see http://msdn.microsoft.com/en-us/library/ms164240(v=vs.110).aspx for a better example) Why: Separating the SiteScrape and Email creates a separation of concerns. SiteScrape does the URL scraping, Email does emailing, and the program just organizes those and spits out messages. Separating them also makes the application more flexible. If at some point in the future you decide to turn this into a Windows form or Web page, you can do it and you only need to write the front end. The back-end code can stay the same.
http://imgs.xkcd.com/comics/random_number.png if you need security: RNGCryptoServiceProvider http://msdn.microsoft.com/en-us/library/system.security.cryptography.rngcryptoserviceprovider.aspx 
[Original Source](http://xkcd.com/221/) **Title:** Random Number **Title-text:** RFC 1149.5 specifies 4 as the standard IEEE-vetted random number. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php?title=221#Explanation) **Stats:** This comic has been referenced 65 time(s), representing 0.3679% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcdcomic/)/[kerfuffle](http://www.reddit.com/r/self/comments/1xdwba/the_history_of_the_rxkcd_kerfuffle/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me)
I'm quite late, and haven't read all the comments, but here's my two cents anyway: https://github.com/DoobieDoctor5000/RPSLS That is my recent submission for /dailyprogrammer I'm no expert. I'm not even an intermediate coder. But if you take a look at my code, I compartmentalized it as much as I thought I could. For example: Program.cs simply calls the Play() function from the Game class. If you take a look at the Game class, it is packed with methods, but the main one is of course the Play() method, which simply calls a bunch of other methods (some of which are in the Prompts class). For me, it's all about breaking my program down into parts. Each part is usually a class, or a method within a class. Once I have the parts made, I assemble them into a machine. So if my Program.cs were the machine, Game.cs would be the engine and Prompts.cs would be miscellaneous parts. Just Ikea your programs.
- Overall inconsistent formatting. - Making classes sealed (e.g. MovieCollection) - Having multiple public classes in one file (e.g. MovieCollection.cs or YIFYProvider.cs) - Using public fields instead of properties (e.g. Movie in MovieCollection.cs) - The whole `MovieCollection` class is pointless, as it just has private fields and a method that does not return anything. - You're using a Singleton `GlobalSettings` class. - You're using an empty destructor in `RenderForm` (wtf, who uses destructor in C#?). - You're having plenty of unused fields (e.g. `RenderForm`). - You're fucking catching **every possible Exception** in ***TorrentCline.cs, line 122*** - without giving the variable `nodes` a sane replacement value! - **Plenty** of other general exception catches without sane error handling! - The class `RSSFeed` is also pointless, as it just has private fields and no methods. - You're using the #region CodeSmell. - Generally no good separation of logic and view. - Hardly any documentation. - You're apparently referencing the libraries directly, instead of using NuGet. - No Unit Tests. This was just a very brief look at it.
Good rule. 
Thanks! Like I said, some of the classes I created I had made with the intent of doing certain things, just never got around to implementing them out further due to time constraints. RenderForm was one of them, I shall commence work on improving the rest. Thanks for the feedback! May as well delete the stuff I never implemented right? Haha
[This](http://channel9.msdn.com/Series/C-Sharp-Fundamentals-Development-for-Absolute-Beginners) video series is a good place to start.
Doing things the 'right way' is an effort to make code robust in the face of change. This probably won't seem important to you right now, but if you do find you have to change your program regularly it'll be worth looking into again.
In my experience the *really* bad programmers never ask for help.
* Deleted the majority of useless files. * Now using NuGet packages * Separated out class's into their own files * CodeSmell removed * Reworking classes's with public fields into properties Thanks for your feedback. Will continue to improve the code with what you've listed
&gt;although the later is milliseconds faster. In what scenario that doesn't involve hundreds of thousands/millions of calls? Put simply: On anything approaching modern hardware, [It does not matter. At all.](http://blog.codinghorror.com/the-sad-tragedy-of-micro-optimization-theater/). You'd have to be running this app continually for years for it to add up to anything approaching the time necessary to change from string.format or even just simple concatenation to a stringbuilder. And even then, this app does what, maybe a hundred, two hundred string concatenations and then exits? The JIT and CLR startup time alone will eat all of that for breakfast. Please - I implore you all. Don't give this kind of micro-optimisation advice to folks who're just learning the programming ropes. I build an app who's sole purpose in life, when you boil it all down, is to do stupidly large amounts of string manipulation. How do we do it? string.Format or concatenation. We've got billions of rows of processed output. We'd spend maybe two or three hours modifying the codebase to switch to stringbuilder, and in 12 months, we'd save *maybe* an hour or two of total of runtime. Even then, it'd be lost in the noise of time lost from upgrades or bugs. The only reason most people should even think about switching to stringbuilder is if it makes your code more legible and easier to understand. 
&gt; If you went from C# to Java how can you deal with the inane amount of boilerplate code you have to write in Java? Can you show us an example? &gt; fact that even the simplest code fragments take up 2-3x more space than C# Again, an example please.
I'm still looking for sensible arguments in your claims. I see no concrete examples of anything, you don't make any practical comparison at all. You keep repeating MS salesman buzzwords, like "improve programmer's productivity", which have no meaning. One more thing: are you talking about Java the language or Java the platform?
Yes.. Java! 
just note though that rand.Next(0,100) will give you a number between 0 and 99, **NOT** between 0 and 100.
Thanks for that link, I'm gonna use that book for my apprenticeship.
cool story bro
This is very useful, thanks!
I havent downloaded, but it looks like this project is a stand-alone application. Any plans on porting it to a VS extension? 
DateTime.Parse("2014-04-09 00:00:00").ToShortDateString() Turns it into this "4/9/2014". I would have to reformat the date as year/month/day, then replace the "/" with "-". It seems like keeping it a string and chopping the characters off the end starting with the space would be a simple solution. I just don't know what methods to use. It must be exactly "2014-04-09" and the end product must be a string.
.ToString("yyyy-MM-dd")
That did it. Thanks to you both.
Thank you so much for posting this! I lost so much time in the previous version of identity trying to do basic things that membership just did. 
Head First C# http://shop.oreilly.com/product/0636920027812.do If you understand C# a little better then that, look up Clean Code. It's a bit more advanced, and will introduce you to a number of new concepts, but it really focuses on making your code clean. An example that pertains to breaking down your code that is based off of clean code can be found here: https://www.youtube.com/watch?v=4LUNr4AeLZM I highly suggest you watch that youtube video, and read Head First C#- both will greatly help. 
Yeah, they have really raised the bar with the new release. More complicated, but does a LOT . .. 
You should learn this for yourself. :) http://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx 
Hey thank you!!! I was just coming here to ask another guy who did this in the app.config but didn't provide the network host specification, so I was about to ask whether I could just put it in. Thanks!!
Great post! I'm really interested to see how well Identity 2.0 will allow for multiple authentication providers (including SAML-based providers) being built and configured directly built in the application.
Don't know much about Webforms (I have worked almost exclusively with MVC), although I imagine it can't be difficult. 
Website pretty much impossible to read on my Lumia 620
I have been trying that. That is what everywhere tells me, but it won't work. I tried something, and it seemed to work. If I can find the code, I will put it here. I needed an integer between 1 and 11.
Found it. This is most of my code. namespace Loading_Thing { public class Game1 : Microsoft.Xna.Framework.Game { GraphicsDeviceManager graphics; SpriteBatch spriteBatch; Rectangle BackgroundImage; Texture2D SlenderMan; SpriteFont Font, Font2; SoundEffect SlenderMusic, Static; String LoadOrStart; String message=""; KeyboardState keyboard; Random fnsia = new Random(); int timer = 0; bool StartUp = true; int X = 300; int R; int Statictimer = 0; public Game1() { graphics = new GraphicsDeviceManager(this); Content.RootDirectory = "Content"; } protected override void Initialize() { SlenderMan = Content.Load&lt;Texture2D&gt;("SlenderMan"); SlenderMusic = Content.Load&lt;SoundEffect&gt;("SlenderMusic"); Static = Content.Load&lt;SoundEffect&gt;("SLenderman static 2"); Font = Content.Load&lt;SpriteFont&gt;("SpriteFont1"); Font2 = Content.Load&lt;SpriteFont&gt;("SpriteFont2"); BackgroundImage = new Rectangle(0, 0, GraphicsDevice.Viewport.Width, GraphicsDevice.Viewport.Height); base.Initialize(); } protected override void LoadContent() { spriteBatch = new SpriteBatch(GraphicsDevice); } protected override void UnloadContent() { } protected override void Update(GameTime gameTime) { if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed) this.Exit(); keyboard = Keyboard.GetState(); timer++; Statictimer++; if (timer &gt;= 1800) LoadOrStart = "Press Start To Begin"; else LoadOrStart = "Loading..."; if (StartUp == true) { SlenderMusic.Play(); StartUp = false; } if (keyboard.IsKeyDown(Keys.Enter) &amp;&amp; timer &gt;= 1800) this.Exit(); if (Statictimer&gt;=X) { Static.Play(); SlenderMan = Content.Load&lt;Texture2D&gt;("images"); X-=10; Statictimer = 0; } else SlenderMan = Content.Load&lt;Texture2D&gt;("SlenderMan"); if (timer == 1670) { Static.Play(); SlenderMan = Content.Load&lt;Texture2D&gt;("images"); } if (timer==1671) SlenderMan = Content.Load&lt;Texture2D&gt;("SlenderMan"); if (timer==1) R = fnsia.Next(11); if (timer == 300) R = fnsia.Next(11); if (timer == 600) R = fnsia.Next(11); if (timer == 900) R = fnsia.Next(11); if (timer == 1200) R = fnsia.Next(11); if (timer == 1500) R = fnsia.Next(11); if (R==1) message="Don't Turn Around"; if (R==2) message="100 children are taken by Him every year"; if (R==3) message="Don't let your children enter the forest after dark"; if (R==4) message = "Don't look or He takes you"; if (R==5) message = "Always watches, no eyes"; if (R==6) message = "Once you see Him, it is too late"; if (R==7) message="You can't run forever"; if (R==8) message="You can never hide"; if (R==9) message="Don't Turn off your flashlight"; if (R==10) message="Don't let your battery die"; if (R==11) message="LEAVE ME ALONE!"; base.Update(gameTime); } protected override void Draw(GameTime gameTime) { GraphicsDevice.Clear(Color.CornflowerBlue); spriteBatch.Begin(); spriteBatch.Draw(SlenderMan, BackgroundImage, Color.White); spriteBatch.DrawString(Font, LoadOrStart, new Vector2(10, 10), Color.White); spriteBatch.DrawString(Font2, message, new Vector2(10, GraphicsDevice.Viewport.Height-30), Color.White); spriteBatch.End(); base.Draw(gameTime); } } } 
You're being unclear. Do you want to turn the string into a DateTime object, but removing the time? Or do you just want the date string, but remove the time string? For the first: DateTime.Parse("2014-04-09 00:00:00", CultureInfo.InvariantCulture).Date; For the second, if you're sure the format is always the same: "2014-04-09 00:00:00".Split(' ')[0] This is more efficient than first parsing it as a DateTime and then making it a string again.
I don't believe anyone (except of beginners) actually ever make #1, #2, #4 and #6..
#3 seems strange to me. It seems to suggest that "==" for strings is wrong, and then goes on to say that "String.Equals(OtherString)" is exactly what == does. The example given doesn't really demonstrate, to me, why that's bad, other than one line basically dismissing "other programmers" as unable to understand that portion of C#. Could anyone clarify why it is "bad" to use == in the context of string comparison?
Same on 1520.. Pinch to [un]zoom doesn't work.
I'm writing a game engine in my spare time. When the time comes to add documentation; I'm gonna seriously take a look at this (I remember thinking the same when you first posted it too)!
Mmhm. It just seems like it would needlessly add visual noise to your comparisons
&gt; I know lots of 9-5 programmers who have been coding for years that would basically fail at most of these. Then these programmers never passed the beginners-stage. &gt; Does anyone know how the T-SQL generated from a LINQ query will be converted if using Equals() rather than ==? Congratulations, you just followed mistake #5 of the article. This entirely depends on the provider that is backed behind the LINQ query. &gt; Im pretty sure == will only do a case insensitive operation if the collation of the target database is set as such. I'm pretty sure both == and `Equals()` will produce in Linq-to-sql and linq-to-entities a simple = comparison, which will work on the databases collation.
"Best practices" say that you should be explicit as to the intent of the comparison: http://msdn.microsoft.com/en-us/library/cc165449.aspx 
The Task libraries are another minefield of common mistakes.
I have those pages bookmarked - could never remember if month is M or if that was for minutes. :) Luckily, ReSharper now gives you some hints when creating format strings. *edit:* Speeliing n' stoff.
Java is very similar to Java :)
#4 is sometimes wrong, you need to know when to use linq and when to not. if you are constantly looping through a game loop and seeing which tiles may be in view, using foreach is a lot faster than using linq. linq shouldn't be used in a loop like that.
Operator overloading is (IMHO) one of C#'s major advantages over its similar competitors. == and other operators are much easier to read at a glance and produce more beautiful code.
I can't go into TOO much detail, but I can tell you that we are running Couchbase on Linux and using it primarily as a long term caching solution, to reduce service calls that would otherwise load records directly from a SQL database. I don't actually know much about the server hardware we are using right now, but I know we have been using "temporary" hardware for the time being (less than 12GB on the server) and it's already meeting our needs well. The .NET client library has been far outperforming RavenDB for us, mostly in terms of memory usage (on the client side). It has been very reliable thus far, we have only had one major issue and it was a serialization problem on our end. That said, we are only hitting Couchbase with less than 20 ops/sec right now since we are still in transition.
In general, implement IDisposable when your class interracts with an unmanaged resource -- such as connections, files, and unmanaged memory -- or contains a field that implements IDisposable. So if your XmlHelper has a field like FileStream, it should implement IDisposable because FileStream implements IDisposable. If it's just a XMLSerializer, then probably not. 
[Some light reading on Stack Overflow](http://stackoverflow.com/a/538238) In short, you should use it when dealing with unmanaged objects or objects that could leave references to other objects. In the best case, the GC finds every one of these references to managed objects. In the average case, these stray references will get cleaned up when you're out of memory and the GC is forced to find everything without a reference. In the worst case, the managed objects will still have references to some master object (like your Singleton! a reason to reconsider using that pattern, btw) and *never* get cleaned up. [More light reading on MSDN](http://msdn.microsoft.com/en-us/library/ms973837.aspx) 
For #2, shouldn't that example not compile? I thought structs couldn't be assigned/compared to null. If that's true, then it should be this, no? Console.WriteLine(point1 == default(Point));
I'm using a memory stream in my XmlHelper but I call it inside a using block, so I think I don't have to dispose of it, right?
How can I write a test code to see if they still have a reference? Like, how can I check my memory to see if that instance is still in use?
With great power comes great responsibility.
Correct, Dispose() automatically gets called at the end of a using block.
Key thing to remember is this: Tasks make it easy to start background work, but there's no free lunch. If you start a Task and don't wait for it to finish, repeatedly, you will eventually run out of threads. If you do this faster than 2/sec, you will run out of ThreadPool threads, since it only expands at 2/sec. Also, this: Task t = Task.Run(() =&gt; LongRunningThing()); bool finishedInTime = t.Wait(TimeSpan.FromSeconds(5)); if (finishedIinTime) { return t.Result; } else { return null; } just leaked a thread until LongRunningThing() actually finishes. Task.Wait(TimeSpan) *is not a timeout mechanism*. Use CancellationTokens for timeouts. On a related note, never, ever do this in ASP.NET: Task t = Task.Run(() =&gt; { LongRunningThing(); if (context.Request.ContentType != "application/json") { // do something } } Anything in HttpContext.Request or .Response is native code under the covers when hosted in IIS. If LongRunningThing() takes long enough that the request is already finished and IIS has disposed those native objects and you touch those objects... kablooie, there goes your worker process.
I fully agree with ya'. Fortunately I've never had to do anything like you're describing, and I would never do that first code example. That's just ASKING for trouble.
Notably, [Roslyn](http://roslyn.codeplex.com/workitem/71) "corrects" struct compares to null to be a compiler warning. [This blog post](http://blog.coverity.com/2014/04/23/warnings-vs-errors/) was submitted a few days ago on /r/csharp about that as well.
Yes, only if it contains a field that implements IDisposable. The word field is chosen very carefully: http://msdn.microsoft.com/en-us/library/ms173118.aspx Using blocks will call dispose for you. The compiler automatically turns the following code: using(var foo = new SomeDisposable()) { ... } into something like: var foo = new SomeDisposable(); try { ... } finally { if (resource != null) ((IDisposable)resource).Dispose(); }
Ohhh. I was wondering why the month was cap. Nice reference material.
I'll try your solution. The end product needs to be a string because I'm using it to generate a url before concatenating it with a few other strings. I never wanted to parse to datetime if I didn't have to because of overhead. 
My example requires the format to be always the same - but mostly so do the others. It simply splits the string into chunks at each space, then take the first chunk. So in result you get everything till the first space (or everything, if there is no space).
This should work, if I've interpreted your situation properly. Feel free to ask any questions. I've taken the approach in which you pass objects from form to form via their constructors. GeneralCode is created in the main form (Form1) and then passed to child forms (Form2 etc). public class GeneralCode { public string MyString { get; set; } } public partial class Form1 : Form { private GeneralCode generalCode; public Form1() { InitializeComponent(); // Instantiate general code. generalCode = new GeneralCode(); generalCode.MyString = "General Code MyString Value"; } private void btnForm2_Click(object sender, EventArgs e) { // Instantiate Form2, passing it the GeneralCode instance. var form2 = new Form2(generalCode); form2.Show(); } } public partial class Form2 : Form { private GeneralCode generalCode; public Form2() { InitializeComponent(); } public Form2(GeneralCode generalCode) : this() { this.generalCode = generalCode; // Apply GeneralCode string to Form2 label. label1.Text = generalCode.MyString; } }
Ya that's perfect. I saw that it splits the string into an array delimited by the space/'s, then returns the string at the zero index. If the format ever changed, that would be an even bigger problem because it's coming from a web service spitting out inconsistent data.
Here's the static class and method I use to create random numbers. Since it's using the cryptography namespace, the distribution is better than just using the System.Random class. If you want a number between 1 and 10, you'd call "RandomNumber.Between(1, 10)". The values passed in the parameters are included as possible return values. Code for RandomNumber.cs using System.Security.Cryptography; namespace MyTools.Numeric { public static class RandomNumber { public static int Between(int minimumValue, int maximumValue) { byte[] randomNumber = new byte[1]; RNGCryptoServiceProvider generator = new RNGCryptoServiceProvider(); generator.GetBytes(randomNumber); double value1 = (Convert.ToDouble(randomNumber[0]) / 255d); double value2 = Math.Round(value1 * (maximumValue - minimumValue)); return (int) (minimumValue + value2); } } }
It actually say so: &gt; Keep in mind, however, there may be a trade-off in terms of performance. In performance-critical scenarios, especially where your iterative code is able to make assumptions about your collection that LINQ cannot, be sure to do a performance comparison between the two methods. So basically it's saying: You should use LINQ all the time, except for the times when you shouldn't...
This worked well, thanks! One question, instead of having the string/label show up as soon as the form loads, how would I get it to show up only when I press a start button within Form2? Edit: also, the string that appears in Form2's label changes, because it's randomly read from a text file. Up to now, it will only show the "General code myString Value" that you set it to. Edit 2: nevermind, I managed to fix it. Thanks anyway! 
In the GUI designer, double click your start button - then in the generated code set label1.Text.
Oh yeah I actually managed that one, thanks anyway. 
Pretty sure you can do it, but it will never be null. Resharper complains if you try to compare a value type to null.
&gt; instead of having the string/label show up as soon as the form loads, how would I get it to show up only when I press a start button within Form2? Yep that's pretty straightforward. Because Form2 has a GeneralCode field (assigned in the constructor) you can access it from any of Form2's methods. Therefore all you need to do is assign the label from a click handler, e.g., public Form2(GeneralCode generalCode) : this() { this.generalCode = generalCode; // Remove label assignment from here. } private void btnStart_Click(object sender, EventArgs e) { // And place it in a click handler. label1.Text = generalCode.MyString; } ------------- Basically a constructor is a method that runs whenever you use the "new" operator to create an instance of a class. You use constructors to initialise the state of your objects, i.e., to assign valid values to them so the object behaves as intended straight away, e.g., var gc = new GeneralCode("Hello world"); public GeneralCode(string myString) { MyString = myString; // initialize data this.status = "Ready"; this.created = DateTime.Now; this.myThings = new List&lt;Thing&gt;(); } -------------- 
Yeah true. I do add a lot of comments to my code to be fair, I've got some near the top explaining the purpose of the class and on each method explaining what they do. I do actually name my properties intuitively, I was just using names like 'myString' just for the purpose of this post. Thanks for the advice anyway!
Thanks, you've been a great help!
It will always be the third number in the string?
Nope I don't... And I need to make some space on my phone to run updates. There's only 550MB left and it complains. Weirdly enough, just over 2GB are shown as "unknown use" in the windows phone app on my computer.
The second, but yes! Edit: yes you're right. It helps if I can count... But hey.... Friday. 
Codemash!
Ah ok. I was hoping you were running CouchDB itself on Windows but that's good to know still. 
My first exposure to LINQ was fixing someone else's buggy code, and all the LINQ parts seemed to be opaque to step-through debugging. Is it still like this? If you have a crash in the middle of a LINQ statement, does it give meaningful information or allow a step-through? I've only used it a few times since the first, and none recently.
Yeah it should be 10 problems you'll eventually run into once or twice when learning the language... Not on going issues
Skip the first sentence (is that a \n at the end). Then count spaces, after you hit the 3rd, put the next chunk into its own buffer, then use string to double. 
Comments don't mend a break in the single responsibility principle.
Picked up c# as a hobby. I don't see how a database table would work for me and haven't found any resources to help. I'm not asking for code really just in need of a direction to take here.
Have a table Orders, have a table OrderItems, have Price and Quantity column in table OrderItems. Done. You need to write down what data you have and what you want to store. The you design your database and normalize it.
That's what I would like to do. but how do i link the two and distinguish what items went to which customer
Crashes Boat on Android. Must be written in C# by the author : p 
Order has a relation to Customer. OrderItem has a relation to Order. Order -&gt; Customer. OrderItem -&gt; Order -&gt; Customer.
looks like a case for a regex 
I dont see "Being too awesome" on here. List is faulty.
This sounds like you simply iterated through the **user folder**, not the **documents folder**.
&gt; What happens if one of the object’s `account.Status` equals “Active” (note the capital A)? Well, if `myAccounts` was a `DbSet` object (that was set up with the default case-insensitive configuration), the where expression would still match that element. However, if `myAccounts` was in an in-memory array, it would not match, and would therefore yield a different result for total. I'd say the author made himself a mistake there. That should either be a bool `.IsActive` or an Enum if there's more than Active/Inactive.
As far as I'm aware, this is still the case unfortunately. While I love LINQ and think it's one of the best parts of C#, I acknowledge that this is a definite downside. Usually what I do is break problematic chained LINQ statements into separate variable assignments. That way you can find the problematic one (it's usually a null reference exception in my experience). Of course, this is harder to do if you don't use the functions but instead use the SQL-style statements. I usually avoid these though because I find them harder to understand exactly what's going on. If somebody has a better way of debugging these cases though, I'd love to hear it as well!
Looks pretty sweet :D
Thanks :)
Yes, it is a stand-alone application and there is a VS extension in the pipeline :) Do you want to include the documentation creation in the VS build process? This is already possible. sharpDox is a console application. The gui is "just" a plugin.
These are special folders. To find them see http://msdn.microsoft.com/en-us/library/14tx8hby(v=vs.110).aspx and http://msdn.microsoft.com/en-us/library/system.environment.specialfolder(v=vs.110).aspx
Not quite. `Enumerable.Count()` first checks to see if the thing it's counting implements `ICollection` or `ICollection&lt;T&gt;`, and uses its `.Count` property if so. Many of the `Enumerable` extension methods do similar things. That said, I agree that this is the wrong place to use `Count()`.
Sure, but he was trying to show how string can be car sensitive sometimes and not on others. Depends on the source of the data
The author could've Used `.Owner` for example, where a string (for a Name) would make sense, instead of using a string for something That should be a boolean/enum
At work we are primarily C#/WPF/Winforms/SQL Server/Web Services, but personally I am also interested in ASP.NET/W8/WP8 as well. Also, I would also be interested on other areas such as architecture and design. Which look at those lists doesn't really narrow it down a whole lot.
If you ever want to get help with any aspect (no tutorials) [dotnetperls](http://www.dotnetperls.com) is the best I have found - it has everything you will need.
Exactly. Not sure what else op is looking for if they already claim to know multiple other languages. Besides some niche or optimization stuff msdn reference works great.
Just note that you should be careful learning C# with your C++ background. They may feel similar but there are many differences that will catch you off guard. It is more like Java. 
That's what I figured too. Also, BIG ENDIAN 4 LYFE, FOOL!
If you want to rotate around an arbitrary point, you're supposed to translate it to that point then translate it back after the rotation - instead you're resetting the X/Y coordinate after the rotation which obviously won't work (because the rotation will modify the position). Also make sure your quaternions are normalized.
I went to devintersection in Orlando a few weeks ago. Was a fun conference with a wide array of topics to wet your appetite, but most of the talks weren't very in depth, more introductory.
Just download the exe. It's a web installer so it will download and install the features that you select. 
Why would an ISO from Microsoft be "dodgy?"
So should I just ignore the ISO? 
I mean in terms of whether I need it or not if you get my jist. Is it just add-ons that I won't really need? 
This seems to work. Obviously need to add error handling. static void Main(string[] args) { var r = new Regex(@"was\s(?&lt;rate&gt;\d+.\d+)"); Match m = r.Match("Received 28971584 bytes in 10.0 seconds.\r\n" + "Receive troughput was 22.10 Mbps."); double rate = double.Parse(m.Groups["rate"].Value); Console.WriteLine("Rate was {0}", rate); // =&gt; Rate was 22.1 Console.ReadKey(false); }
Yea .. its the full install for offline installation.
Really? I mean.. Come on.. Really?
Bit of a basic question? I'm pretty new to c sharp. Excuse my new.
Okay, thanks a lot for the help.
.
I'm curious, what were you were uploading with SignalR? Was this some actual browser thing or just some fun hacky project?
+1 for normalization. Quaternion operations will accumulate error over time and change length, which makes them no longer quaternions and can have strange effects like stretching. 
I don't mean to be rude, but the C# and .NET information available on the internets is VAST as it is a popular language / framework. To be blunt, if all you have found is information which is "brief", then you aren't looking hard enough. As someone experienced with programming already, you will also know that it's better to look for tutorials, pdfs of books, or answers to specific questions.
It's nonsense. == and Equals compile to the same code.
Honestly I don't think it's ambiguous in most cases. Using .Equals() feels to me like the mark of C# code written by a Java programmer.
I'm not sure how I feel about this article overall but I totally agree about the shying away from exceptions bit. I can't count the number of times I've seen advice not to do this or that thing because "it might throw an exception," but the fact is if the exception-causing behavior is something I am judging impossible and not considering I *want* it to throw if I'm wrong.
Learning C# 3.0 is a good book if you're not an experienced programmer (although it's dated I think the explanation is so good that it's still worth reading). If you are I like Programming C# 5.0 by Griffiths.
Yes, I have similar suspicions...but I was being polite.
Is it possible to get a first pass working on a Windows machine first? Just so you don't have to futz with Mono while figuring everything else out. While you're at it, you could also use MSSQL Server Lite instead of SQLite (again, just to start). That might take another potential layer of headaches out until you're ready to confront it. 
Yah, that was one of the biggest obstacles for me yet. My compiler wouldn't identify data aseemblies. Took me forever and ever and ever to tweak around the whole menu and figure out a fix. I use mono.data.SQLite. 
Yah that about it. There are so many layers here that I don't even get started. For hours daily, as I try to figure out the simplest of things, I'm continually dragged into deeper layers of stuff I don't know. I was going to just use linq and collection but then dataset idea made more sense. But now I don't only have to figure out xamarin and c#, but now I also have SQLite to worry about. If you look at my other comment, I tried to break down the task in very simple terms to figure out where I want to concentrate.
Ok that's simple. The CSV is a File generated daily that lists the options table for a stock. This shows volume and Changes. Rather than just reading that one file, I want to put daily data together and then play around with it. I may have this wrong, but I thought a database to keep easily accessible values made more sense. On random, I picked SQLite. Basically, there are a lot of things that I don't know.
For example: https://www.google.com/finance/option_chain?q=MSFT From that page you can open individual option series (april, may, june etc) for all the tables. The CSV file I'm using will have all of that data, all months, on one file, listed month after month. There is a file for each stock Daily. I put all his old data of Daily activity into the database and then stack on with daily updates.
You don't need a database. You need a library which can read and write CSV files. For that I recommend Linq to CSV. Hey, did I mention Linq to CSV yet?
 pictureBox.Image = Image.FromFile("location of image");
Thanks for that, it helped a lot
You'll have to give us more context. Where is the picture in your class? Is name a location of your picture?
I am kind of advertising my own thing here.. but see: https://github.com/Cyber-Studios/SDT It's local storage and it may help you.
Here you go: https://www.dropbox.com/sh/ivh5ar36vwjm4pv/KvA8mdI231 Basically you just need a streamreader and streamwriter
I'm honestly just trying to get used to using class objects more effectively. I've never had much practice with it, so I figured if I force myself to use them, then they would become easier and more natural for me overtime. Thanks for the help though!
You could use a WebRequest or WebClient to do it; either should be fine. [Here](http://stackoverflow.com/questions/4510212/how-i-can-get-web-pages-content-and-save-it-into-the-string-variable) are a few examples.
read up on html agility pack.
Hey Banane9, This sounds like a cool project and I have done some work with irc bots before. Could you explain what this bot does? The diagram also doesn't really help. Thanks
It's a bouncer / client. A bouncer is a relay/proxy between the actual client and the actual server. So to the server it acts like a client, but to the client it just passes on all the messages from the server, making it look like one to the client. I want to put a special focus on supporting mobile connections (ie. Those that drop often), by giving the client the option to specify from which timestamp on it needs the new messages. So for example, if it would receive the last message at 3pm, and then lose connection it would tell the bouncer that it wants everything since then, when reconnecting. Also maybe some support for push notifications a la "You missed x messages!".