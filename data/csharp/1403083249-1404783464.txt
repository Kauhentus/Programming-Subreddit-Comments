i thought blueJ was more for teching new user java than actually developing properly in java.
Try to debug line by line and see if you find anything useful. Also you are abusing all getter's and that is just wrong and hurts to look at.
The Get section of a property is called by the debugger when it updates the UI. For something that complicated, you should probably make it a function instead.
I believe it was "Professional C# 4 and .NET 4.0", IBAN 978-0470502259. And apparently it had roughly 1500 pages.
line-by-line is your best bet, if youj inster the breakpoint and keep using f10 to step over. you should see you eventually loop back to the line MessageBox.Show("File Opened"); This line HAS to be executed again in order for it to keep showing it. Remember that this line will be executed any time the method containing it is called(im assuming there are no if statements or loops involved) so look in areas of the code which are calling this method. is it more than once? is the call embedded in a loop or recursive function? is there a conditional statement which isn't behaving properly?
Was introduced to it by a friend working for microsoft. Felt immediatly in love with it. That was C++ without pointers so what's not to love ? Started for fun (my personal website) then used it for work (CD interface), then more and more for work. Now I'm using it for websites, games, connected devices (netduino), application, general scripting, etc. More or less for everything. 
Xna introduced me. I fiddled with that for a couple years before I started using c# at work. Most of my professional work has been business apps that connect to a db and implement some business logic.
The debugger will execute the Get section of any visible property when it updates the Locals/Immediate/Watch windows.
Apparently, the error came not from the IDE itself but from the project solution file which was corrupted somehow. I still don't know why a corrupt file can cause the IDE to crash but at least I found a solution (deleting the project and creating a new one). Hopefully this will help someone who encounters this problem in the future.
Mine was 1. GML 2. PHP 3. C# Plus some dabbling in C, C++, and recently M68k assembly.
Maybe file is locked, access rights borked..? Hell even running this code twice might do that because you aren't disposing your StreamReader. Init it in a using() {} block, so its IDisposable is called.
v1.0 came out and I sort of knew it was there, but then they release v1.1 and I started looking at it in my spare time at work. Some other employees were also looking at it, and we wrote some reusable code for it -- logging, etc. and that convinced management to go with Java. lol. (no - actually they hired a new CTO and he knew Java and commanded the switch -- from a Microsoft shop to a Java shop. You can imagine how unsuccessful that was) 
Is the breakpoint solid red or a white circle surrounded by a red outline? If it is the second, try rebuilding and run it again. The white circle means the vshost didn't pick up the breakpoint. Also, you don't need that close at the end. The using block takes care of that for you. 
&gt;ASP.NET vNext (and Rosyln) runs on Mono, on both Mac and Linux today. While Mono isn't a project from Microsoft, we'll collaborate with the Mono team, plus Mono will be added to our test matrix. It's our aspiration that it "just work." This approach that they have taken is pretty cool... If it "just works" then it's less headaches to devs.
I had a quick look over the code.... why is all of this in a GET()? your'e hurting my soul! The code needs re factoring and you should be populating your timetable using methods. the get() function should just return the populated object and not do a bunch of other crap. every time youre calling the GET function you're repopulating the object. The object should be populated once and then updated with new information when its needed! Think of it this way... if you had a homework timetable which you were writing to manualy with a pen and paper and you wanted to edit it, would you draw a new timetable if you were to change a subject? no, you erase the old subject and fill in the missing space with the new subject. you only need to draw your timetable once, then you change it, you dont reconstruct it for every change. 
By the time I started learning C# I had already been employed as a programmer for 7 or 8 years. I had used Visual Basic 6.0 and had learned Visual Basic .NET for the last 2 or 3 years. A friend of mine got hired in to the same company, and we were working together on a project. He learned C++ in college, and was having a really hard time adjusting to Visual Basic. He switched over to C#. I had to switch over to C# to collaborate with him. Once I got over some of the syntax differences I liked C# a lot more than VB.NET. 
That wasn't Southern Cross was it? My lecturer told me the same thing.
1. Bourne Shell 2. Awk 3. Perl 4. Visual Basic (5.0/6.0/ASP Classic/Office Macros) 5. Java 6. Visual Basic (.NET) 7. C# 
Now, any suggestions on what to use with SQLite?
Learned c/c++ in school. First job was Delphi. Second job was VB6. Heard the Delphi guy left for Microsoft and was working on something. He made C#. it was the most awesome thing ever and I kicked VB6 to the curb and have been happy ever since.
In my school, the object-oriented language we focused on was Java. While still in school a job opening came to my attention, so I applied and was promptly hired. The language they used was C#, which I had never even heard of prior to getting the job (entry-level). So the first thing I did when I went home was I started programming a scrabble cheater application in C#. Everything I didn't know how to do I looked up then and there, and here I am now 7 years later with a great job and loving every minute of being a software developer!
A for loop is for looping **while a condition** is met (similiar to a while). A foreach is for iterating over a **collection** of elements.
Yeah I am most excited about the fact that I can write ASP.NET on my linux machine privately now. It was always a pain trying to get everything up and running under mono develop. 
&gt; and I don't have to learn a new SQL-like syntax that's just different enough to confuse me when I write DB SQL. That's probably the biggest reason I don't use the query syntax. I always have to look it up, and then when I'm doing some SQL, I have to look up the SQL all over again because I'm trying to use LINQ. I'm not particularly good at SQL, so it's easy for me to get confused.
How do you mean collection of elements? like List etc?
Since it's likely to matter if you use it - struct requires a non-nullable value type. There's weird corner cases here - for example Enum, even though it's descendant of ValueType does not match the struct constraint (but enums do); and you can't use Enum as a base class constraint either (nor can you use Delegate). There's a few others too, but I think those are the one's you're most likely to run up against. 
Interesting, however if preformance was such an issue, and you are doing a lot of memory managing yourself (By for example using object pooling) why even use C#.NET and its GC. Why not just go full on C++ and do the managing yourself, to get a more optimal management out of it? I might have read over this part tho. Still interesting to read, but I'd rather do an Application in C++ if the best possible performance is an issue. Tho it would raise development time considerably. And that is probably the reason you would still use C#.NET ?
Yes, exactly. A list is a collection of items.
With 'for', you most likely end up using indexing of collection. Many collections don't have direct indexing and you end up iterating from beginning to end and that gets progressively slower and slower as index goes larger. You can use iterator (which remembers your place in collection so you rewinding is avoided) in for loop as well, but syntax is if not awkward, well not exactly easily rememberable. I use for loop only when I care about * index (need to save it for some reason) * jumping around in collection, even if 1-2 steps forward * don't actually know much about types in collection (you can do stupid things like foreach(string a in new object[]{1, 2, 3}); it does "as" cast. for everything else foreach. Can't honestly remember when I last used for loop, and I code every workday.
Similar: 1. MSL (mIRC Script) (I know, probably doesn't count) 2. QBASIC (first programming course, kicked my butt) 3. C# Dabbled in C++/Managed before C#. A friend of mine recommended C# over C++/CLI because I was having trouble with it. Dabbled in native C++ too for a game called "Renegade" - made a few server-side plugins - learned super-basic C++ this way. Also dabble in PHP every now and then when I'm bored. Also dabbled in python a little, but only as a scripting language for bash - haven't made anything like a website or an app in python.
Anything that implements the `IEnumerable` interface
The argument I've heard several times (and I agree with), is that this type of performance optimisation may only be needed in 10% of your code. So if you can be more productive in 90% of your development (by using C#/Java), overall it's still a win. I think this is similar to the argument in your last sentence?
My path: OpenOffice.org Scripting Forms Designer -&gt; Liberty/JustBASIC -&gt; Visual Basic Express 2005/2008 -&gt; Visual C#.
Reading the language reference may help. * [foreach](http://msdn.microsoft.com/en-us/library/ttw7t8t6.aspx) * [for](http://msdn.microsoft.com/en-us/library/ch45axte.aspx)
I'd add in-place reverse traversals to that list
Glad you like it. Also just to add, the GC pauses blog post is showing that if you can tolerate pauses of up to 25 msecs (at the 99%) then the .NET GC is just fine, with SustainedLowLatency. It's only if you have really low-tolerances, such as game or high-frequency trading, that you have to go all the way and cut out allocation completely (with object pooling etc).
Usually not the case with the products that I work on. But still something to take into consideration when there is a performance problem:)
One thing I don't see mentioned in here is modifying the collection while traversing it. The collection is immutable when using a foreach loop. For example: foreach (var item in items) { items.Remove(item); } Will throw an invalid operation exception, where this code will work: for (int i = items.Count() - 1; i &gt;= 0; i--) { items.RemoveAt(i); } Now obviously this is a bad example, because you wouldn't iterate over a list in this fashion to remove every element. There are hardly any times where I use an actual for loop to remove something from a list, because most times I can write some Linq or some other code to do it more concisely. But it is important to note that your collection is immutable inside a foreach loop. Edit: Since you're new to programming -- Tl;Dr: You cannot modify a collection in a foreach. It will throw an exception.
Was the CTO fired later? Or did you leave before anything happened to him? o:
This is technically not correct.
It depends on the application, but I think it's fairly true. In many cases you end up limited by I/O, disk write speed, or other factors anyways. I don't think I've ever had issues with the GC, except in one specific case where objects references were left dangling causing a memory leak. I've actually had good luck mixing in some unmanaged code when needed. VC++.NET is kind of a a horrible language, but it can let you do interesting things (like creating managed wrapper classes for old open source C libraries you might find online). Marshalling objects from managed to unmanaged can be a little slow, though, so the overall performance gain depends on how long the C/C++ operation takes. Also, I had good luck one time using the ["unsafe"](http://msdn.microsoft.com/en-us/library/chfa2zb8.aspx) keyword to speed up a slow operation.
Yeah I've used unsafe before, I guess you're refering to something like this http://stackoverflow.com/questions/702188/can-this-code-be-optimised?
Any consideration to using SSRS? It comes with a click once installation for a desktop app (Report Builder) that allows the end user report building. Of course this only works with Microsoft SQL server, but it sounds like it'll do what you need. 
The question is, is it worst than Eclipse + JDT?
Does anyone know how the mono GC compares?
Thanks
For Fun and profit. I was programming in Delphi, VB6, and C++ when C# was announced. I was familiar with the creator, Anders, because he also created Delphi...so I was a fan. Delphi was going to die because Borland couldn't market it, and didn't have the clout of "Microsoft" behind it....and VB6 and C++ were both horrible, horrible languages (yes, you can disagree with that statement, but you are still wrong). A also did a bit of Java, but the language always seems needlessly constrained to me (no properties? really? I still can't believe that one) C# was wonderful (even then, without generics and lambda), and had some of the best minds working on it. So I jumped. I've been working in C# since beta 1. How did I learn: I grabbed the C# Language reference book. What do I do with it: web sites, desktop software, background services, games, etc.
Awesome books. The new one is out for C# 5 and I highly recommend it
Per the MSDN Page The foreach statement repeats a group of embedded statements for each element in an array or an object collection that implements the System.Collections.IEnumerable or System.Collections.Generic.IEnumerable&lt;T&gt; interface.
I left shortly after that. He lasted another 3 years or so - I didn't have the desire in keeping up with him, for obvious reasons. (They ended up spending over $3 million to make the switch) 
I started learning C# in the first year of my Computer Science degree with a Developers Society for games programming. Now I'm employed as a Software Engineer building ASP.NET Web sites &amp; services and mobile apps for the iPhone and iPad using the Xamarin toolchain.
It doesn't matter what the page says (It's simplified), it's still not technically correct. IEnumerable has absolutely nothing to do with this. You can `foreach` over everything that has the `GetEnumerator()` method. It can even be a simple class, it doesn't has to be a collection. void Main() { foreach (var i in new Test()) { Console.WriteLine(i); } } public class Test { public IEnumerator GetEnumerator() { return new List&lt;int&gt; { 1, 2, 3, 4, 5 }.GetEnumerator(); } } Note that the method is **not** returning the list, but an enumerator.
I didn't know that. Funny they did it this way!
Like I said, IEnumerable has absolutely nothing to with this. It doesn't matter that the generic version inherits the non-generic one. What only matters is the IEnumerator interface and the GetEnumerator method.
This is the same the with new `await` keyword. It calls the `GetAwaiter()` method that must return `INotifyCompletion`.
Thanks to everyone who replied. I'm pretty motivated to hit the books when I get home. 
&gt; It doesn't matter what the page says (It's simplified), it's still not technically correct. IEnumerable has absolutely nothing to do with this. Have you submitted a correction to Microsoft then?
There's more to c# than the language. The real wins come from the .net libraries, which aren't all that useable from c++.
After fiddling with VBA macros and a few other programmy things for years, I decided to get a job doing it. I did some research into what was in demand in my area. C# it was.
Well thats what the whole faster development in C# is all about :). But if you want to build an application that is 100% aimed at performance. Then you should not use C#.NET, yes it comes with downsides like not being able to use the .NET libraries. But he already explained that its about optimizing certain areas of code, not the whole application. And thats what I was thinking about as goal, the whole application, not just a part of it.
Are you working on a team or is this something you will be doing on your own? This is a very large and ambitious project for any team much less one person in six months. There are lots of tools available to accomplish what you are looking for such as Tableau, Qlikview, Jaspersoft, and Microstrategy. I don't know of any tools to help with the back end as far as building the query engine but Telerik, DevExpress, and HighCharts all seem to have pretty good visuals. My honest opinion is to go with an off the shelf solution.
You can use the .net runtime in any of several languages (VB, F#, even managed C++). It's a (common) mistake to lump C# and .NET together. &gt; But if you want to build an application that is 100% aimed at performance. Then you should not use C#.NET It's not quite that simple. By your same logic, one could say that if you are building an application that is "100% aimed at performance" you shouldn't use C++ either... you should use assembly. 
I knew Visual Basic 6/.Net at the time and wanted to contribute to [my favorite private server](http://www.dolserver.net/). So I learned C#, oddly enough the only thing I've ever fully contributed were some SQL queries to translate in game entity's strings from French/German to English because they accidentally released a new build without proper localization. I've always wanted to contribute but I don't have a paid account for Dark Age Of Camelot anymore and have no means to contribute new packets, info on existing packets, or handling for said packets :( It's my main programming language now though! Edit: While I learned Visual Basic (first language) through a [book](http://www.amazon.com/Mastering-Visual-Basic-Evangelos-Petroutsos/dp/0782122728); I taught myself C# fairly quickly through Google!
You are correct on the assembly part, but C++ is more in the middle to being handleable and *has a better performance than .NET does. For .NET in C++ I totally forgot that was possible, you are correct. But still, wouldn't it be better performance wise to avoid those? Or can you use C++ with .NET unmanaged? If its usuable unmanaged it could be an option.
Ye callid fa meh http://msdn.microsoft.com/en-us/library/f7fta44c(v=vs.110).aspx :)
I see that your code is called from the startScreen_Activate method. Do you have this set to run from the forms Activated event? If you do, this will be being repeatedly called with any focus change (e.g. if a messagebox pops up like in your NewUser method, or another window). If you want this to run once when the form loads map it to the Loaded event. If you really want it to run every time the form is activated you should put in some check to restrain it running too often.
Cost of implementing: high Value returned by implementing: high Therefore, buy off the shelf.
This is a decent example. For most scenarios (e.g. looping through collections) you can just choose which syntax you prefer and they'll do pretty much the same thing. I tend to use foreach the majority of the time and just use for if I specifically need to know the index of something in the loop or if it makes the code more readable in some way (typically code within a foreach loop reads better).
Yeah, you're right, the Linq and other methods will probably all do the same internally, so you're not really getting away from that necessarily. Same here, I always try and stick with foreach in my day to day code. Very rarely do I find uses for for loops anymore, but they do occur.
If you need to do something on the UI thread you can just call it via the dispatcher. e.g. //do the time consuming preparation on other thread //then when it's prepared and ready... App.Current.Dispatcher.InvokeAsync(() =&gt; { // do stuff on UI thread }); As most of your code there looks to be doing UI stuff it might still get a bit bogged down, but try wrapping the code in your inner loop in a dispatcher call, then at least the UI isn't waiting for the whole loop to finish before updating. e.g. still have CreateGridOfCells running on a separate thread but change it to: ... for (int y... App.Current.Dispatcher.InvokeAsync(() =&gt; { var cell = ... ... map.Add... }); } ... Threading isn't really my strongest point so somebody might have a better way, but that might give you an improvement. I'd maybe go about it a different way though. Instead of creating all your UI elements by hand, maybe have a GridOfCells user control based on an ItemsControl, define a DataTemplate for your grid cell item, then bind the ItemsSource to a collection, and let WPF handle it. Not sure what will work best with the map layout you're looking for on a Canvas. I've mostly used that for populating StackPanel/WrapPanel based stuff so your mileage may vary. I'd typically have say an ItemAdded event on your map class, with the OnAdded method firing the event through the dispatcher. e.g. OnItemAdded(Cell item) { if(this.ItemAdded != null) { App.Current.Dispatcher.InvokeAsync(() =&gt; { this.ItemAdded(this,new MyItemEventArgs(item); }); } } Hope that at least gives you some options to think about if not being too clear ;) 
Thanks for the response, man! I'll definitely look into these things tomorrow when I have some more time to tinker with this. Yeah I used a canvas because I was familiar with it from the book I used to start learning c#.. I wonder if wrap-grid would be simpler...
Ahh, the other guy beat me too it. I'd be really interested to see some comparison figures if you ever feel like looking into it, maybe as a future follow-up to your current article. Great blog though and a very promising start. It's already gone into my bookmarks and I'm looking forward to more.
Either set them up with SSRS (best idea). But if you are working on the cheap, you can always set up an access database with linked tables via odbc. Then your non SQL using end users can use Access to build their queries with all the "user friendly" wizards and forms. Linked tables are not ideal as it does the actual processing on the users machine instead of your SQL server, but it gets the job done.
I've taken to just using a=&gt;. Grew out of initially using different letters each portion of a chain of anonymous functions ie . where (a=&gt;...).select(b=&gt;...).
Depends on usage; multiple SelectMany calls can get messy real quick using method chaining, where as in query syntax it's just multiple from clauses. Likewise with joins or groupings. 
As mentioned there's tools out there that do this and they likely cost a lot less than 6 months of your time. That said, it's a fun project to do and I did a very limited version for a past client. It was...mediocrely user intuitive &gt;_&gt;
I know with unity3D it's kinda terrible but that's targeting mobile. 
Absolutely MSBuild. MSBuild actually has a lot of Tasks that wrap things, including Csc: http://msdn.microsoft.com/en-us/library/s5c8athz.aspx . So either you go with MSBuild, which is very powerful and mature (albeit with a steep-ish learning curve), or have to reinvent the wheel yourself. My question would be though, why not Visual Studio? There are free editions i.e. Express, and you can also get full versions through programs such as DreamSpark and BizSpark. Also, note that the .*proj files are MSBuild files themselves; looking at what they contain, and the Microsoft .targets files they reference, will let you learn all about how the solution and projects are built. Visual Studio does use MSBuild behind the scenes when building (an in-process compiler though). One of the main reasons to use MSBuild is that you can ensure your build process is the same from within the IDE, and the command line / outside of Visual Studio (for example, on your build server).
It needs to be a website and not a desktop application unfortunately.
Just on my own! Yes I understand its a pretty immense project which is why I am looking for ideas. My company is a bit cheap when it comes to paying for things so my boss is aware of the possibility of buying a package but seems to want me to at least give it a good attempt first. If I can get the engine working with some nice classes to create the reports through it wont be hard to knock up a front end website for it, its just nailing the design that I am trying to work out.
Wow that's a nice bit of code, exactly the type of thing that I am trying to implement! I am definately going to check out costings and even if its too expensive for us, have a play about with it and see what they have done. Thankyou :)
&gt;That said, it's a fun project to do Agreed! I want to implement it in a generic way so that it can in theory be set up quickly against any decently designed database.
Agreed but management don't see it that way unfortunately 
There is a [NuGet package](http://www.nuget.org/packages/NotFoundMvc/) that handles this for you.
Please do not redirect on errors, especially not on 404. This is really bad design. I'm typing in the URL... I make a typing mistake, notice it too late, and yeah.. I get redirect to 404. And because it's a redirect I have to type the whole URL again, instead of just fixing my typing mistake. In this case the user is **punished** a mistake, instead of just notifying him. I'm not saying don't show a 404 page. You definitely should do this. But please don't **redirect**.
Have you tried to throw HttpExceptions as written in [this comment](http://stackoverflow.com/questions/13258549/mvc4-custom-404-page#comment25884594_13277015)?
Totally agree with you, +100500
&gt; Still interesting to read, but I'd rather do an Application in C++ if the best possible performance is an issue. Tho it would raise development time considerably. And that is probably the reason you would still use C#.NET ? There are several cases where .NET can actually (at least in theory) outperform a C++ native code application. .NET can (and does) inline functions across libraries. Garbage collection also makes memory allocations trivial (compared to malloc and new, which may do a sweep to find a fitting block) and the GC compacts memory which frees up fragmented areas. .NET also does native code generation in run-time, and the application itself may generate code explicitly. The Regex library (contrary to boost's regex library) can actually produce code in run-time in order to match a regular expression efficiently (with the Compiled flag). So it's not that easy, and C++ is a significantly more complex language than C#.
If you're using CustomErrors you should add `redirectMode="ResponseRewrite"` to it.
Especially those `let` clauses get messy in the method syntax. Closure over previous values is the key, really. Join's by themselves aren't too bad, and neither are longer queries - but once you have joins+longer queries the chance you need earlier values in later expressions rises, and that's messy in method syntax.
Its somewhat academic. I have a vs 2008 license, and know about express (and mono develop), and probably could get a po for an upgrade to vs 2013. But it's also a bit of training, be a better coder, and get more comfortable in powershell, somewhat like software katas. Just wondering if one or the other was the superior command line build option. One advantage if can see this morning would be when others want to build the code, with a .csproj file, they could just use vs, so that's a big point.
Top 1 mistake: - You're using JavaScript.
I have no clue what your salary is but I can assure you that even if it was minimum wage it would be cheaper to buy Tableau Desktop ($999) or any of those other options I mentioned than to spend 6 months developing an internal solution. I'm sure you are an excellent developer but within 6 months there is 0% chance you are going to come close to meeting the functionality of Tableau. My guess would be this project grows a long tail as reporting requirements grow and grow over time. Most small businesses think development is already a sunk cost so anything you work on is free. That's not necessarily false but there is an opportunity cost to everything you spend time one. Is there something more pressing for the company that you can't buy off the shelf for you to work on? Story time: My first job ever was for a small and cheap company. They didn't want to spend $300 - $500/month on Salesforce and so they tasked the development staff (5 software engineers) with building an internal web based CRM. I spent 18 months working on that project before I left and from what I have been told they spent another 12 months in full time development before slowing down. I would estimate that their desire to save $300 - $500/month cost them over half a million dollars plus the opportunity cost of other things we could have been working on. Not telling you to put on your CEO/CFO hat and have a financial discussion with your boss but this is the kind of project that I would be weary to accept. You'll never meet all of the reporting needs in the first go even if you do hit the deadline. In the end it is a difficult proposition to tell your boss that you shouldn't be doing this work. Everyone wants to feel needed by an organization and developing this tool will absolutely make your position stronger. Up to you, obviously.
&gt; For most scenarios (e.g. looping through collections) you can just choose which syntax you prefer and they'll do pretty much the same thing. This is absolutely wrong. They're incredibly different implementations! The `foreach` will iterate over a collection, one element after another is retrieved and the current position is stored in a state machine. But with a `for` you have to refer to other means of retrieven the item, most likely an indexer or a method.. and that's the catch. Besides having an additional method call this method can be (depending on the structure) horribly inefficient.
What, with all of the other options for front end work? Let me fire up JScript.NET or some VBScript so the user can have a great experience....
If you are making web pages you don't really have a choice. 
MSL should count. I did QBasic before MSL and thought it had a similar level of accessibility but it made it even easier to write code that was entertaining. You could write stuff and have it running on mIRC in no time. That's the sort of environment that sucks people into programming initially. No overhead, no fancy tools, very rarely did I encounter someone that lorded their knowledge of MSL over others. It was fun and accessible.
It's absolutely not unrealistic and we do exactly this: Expect our frontend web developers to use TypeScript.
I tried to comment on the article, but got an "Empty CAPTCHA" nastygram when there wasn't even a CAPTCHA on the form. One additional feature of the Javascript `switch` statement is the ability to fall through from one case block to the next. This is not allowed by C#, but is valid in C/C++. (Don't know about Java.) switch (value) { case 1: statement(); case 2: sharedStatement(); break; } In this scenario, case 1 will execute both `statement()` and `sharedStatement()`, while case 2 will only execute `sharedStatement()`.
Which compiles to JavaScript?
The very first thing a C# developer should know about javascript is that the only real similarity is that they both have a C syntax style to them. Other than that C# is an imperative language (although declarative and functional aspects have been built into the language). Javascript is a functional language. Scope is different. Closures are different. Inheritance is different. And more...
Agreed. Only write the things that only you can write ( - dotnetrocks ). Using a battle tested solution is better than developing a solution that you have to support. 
Just because Duff's device exists doesn't mean you need to or ever should use it.
&gt;Erik Meijer: Are you saying you cannot write large programs in JavaScript? &gt;Anders Hejlsberg: No, you can write large programs in JavaScript. You just can’t maintain them. When it comes to JavaScript development, TypeScript makes things so much easier, natural and more readable.
This seems like it would be a source of confusion or bugs to use. There's lots of things JS lets you do that you probably shouldn't. 
This newfangled [Dart](https://www.dartlang.org/) thing looks pretty cool as well. 
Maybe. How this usually ends up being implemented is some kind of chained or nested if statement, which seems just as easy to screw up or misunderstand. *edit to add:* Besides, the point of the article was differences between C# and JS that could catch somebody out. This is definitely one that could be a shock to somebody - regardless of whether *using* it is a good idea or bad.
[Sigh.](http://www.reddit.com/r/java/comments/285ktl/why_java_over_c/ci7sfnt)
I'm really curious about this - I've never used typescript, and to my unintiated eyes it looks like typescript would have an uphill battle here because it only detects errors in typed code - but especially with any javascript experience or external code, the tendency to omit types for brevity would be a danger. Let me put it this way - if 50% of your code has types, then an arbitrary combination of two code elements has only a 25% chance of being typed, and therefore of catching type errors. For code constructs consisting of more than a single consumer of a single value, say, the rates are even worse. With the need for such high coverage to really extract value, isn't the practice going to be that you just don't get value?
That comment will appear to be a total non-sequitur to the uninitiated. duff's device is pretty much plain evil, and quite cool at the same time :-).
50 % is more than nothing. It can detect 50 % more type errors than 0 %. Also you can extend existing libraries with type information (Which is done already for plenty of known libraries like AngularJS or JQuery).
In case anyone didn't know, you can explicitly fall-through in C#: switch (value) { case 1: statement(); goto case 2; case 2: sharedStatement(); break; }
It was an arbitrary example, based on /u/jdh28's statement: &gt; If I need to call a method that has no query syntax like Distinct or ToList Since your question really seems to be "why/when use a List&lt;T&gt; over an Array", there are a lot of reasons, and way more discussion on StackOverflow, so [link](http://stackoverflow.com/questions/434761/array-versus-listt-when-to-use-which).
While I was investigating automated build scripts I came across an interesting combo of using Rake and [Albacore](https://github.com/Albacore/albacore/wiki). Although this uses MSBuild behind the scenes, it makes managing and dealing with MSBuild much easier. I'm not sure if you're willing to write a little ruby, but it might be worth a look.
Coffeescript is awesome too! Works good with existing javascript and fixes most traps in this article 
A couple more notes. &gt; better performance List&lt;T&gt; is implemented [internally](http://referencesource.microsoft.com/#mscorlib/system/collections/generic/list.cs#40) as an array, much like [Java's ArrayList](http://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html), and [.NET's own ArrayList](http://msdn.microsoft.com/en-us/library/system.collections.arraylist.aspx), which was implemented in .NET 1.0, before generics. Point is, both perform bounds-checking, so the fact that List&lt;T&gt; has extra capacity is irrelevant to the [access](http://referencesource.microsoft.com/#mscorlib/system/collections/generic/list.cs#189). Testing confirms the performance difference is negligible (naked array access is usually very slightly faster, but not always). Each access an element in O(1) in ~1 ns. &gt; uses less memory The overhead is 280 bytes. Counting excess capacity isn't fair; you know the exact capacity beforehand with an array. If you don't intend to add or remove items from the List&lt;T&gt; (which would invalidate naked array use anyway), then you also know its exact capacity beforehand and can set it when you instantiate the List&lt;T&gt;. &gt; discourages bad mutability habits a little more [And yet](http://blogs.msdn.com/b/ericlippert/archive/2008/09/22/arrays-considered-somewhat-harmful.aspx), I can fill that array with anything, if you make the mistake of returning it from a class method. Doesn't matter if it's private. That the length is fixed doesn't make it immutable. If you want immutability, go with a [ReadOnlyCollection&lt;T&gt;](http://msdn.microsoft.com/en-us/library/ms132474.aspx). &gt; shorter syntax for the typename where you need to express it explicitly That's not often. Type inference eliminates most need for that. --- There are edge cases where arrays are better, but not many.
I stand corrected. While it is technically possible. Its not something I would give to a beginner when explaining the differences
Interesting, coming from a C# background, I heard a lot about CoffeeScript and went to the homepage to check it out. My first thought was "wow, someone managed to make javascript *worse*". Since then, I have assumed that the people that are adopting CoffeeScript had come from a non-programming background and liked the syntax. I'm surprised to see a C# developer like it.
Generally you'd want to inherit IEnumerable if you're going to be using an Enumerator for what I'd assume are obvious reasons, but it is interesting to learn that it's not a requirement.
Sorry you're right, I phrased that badly. The point I meant to get across was that both methods will perform the same task. In truth the performance difference will be negligible for the majority of tasks you perform. If you need a highly optimized loop then you need to pay more attention to how you do it, but where that isn't the case I'd always go whichever is the more readable.
Yeah you could be on the right track there. I've come across DrawingVisual before but it's not something I've ever used or looked into in depth. Check out the top answer to this Stackoverflow post if you want a few more things to look at. Suggests a few options. http://stackoverflow.com/questions/8713864/high-performance-graphics-using-the-wpf-visual-layer
I have to admit I never really looked into doing high performance graphics in WPF. If you get really stuck it might be worth looking into a library like SlimDX. I believe that can work with WPF but that has it's own learning curve. I've used XNA to do graphics things mostly in the past. That works very well but of course it's not supported any more, although MonoGame is said to be a fairly decent replacement.
How is that an argument? That's like saying you shouldn't use C++ because it compiles to assembly, and assembly is a nightmare to write/read/maintain.
There is a selecteditem property you should be able to bind with on the listview. It will give you a reference to the item selected. Also, there is a selecteditems property for when a user selects multiple entries in your view.
This Hejlsberg guy doesn't know about node.js.
TS lets you define "interfaces" for external JS code to let you use it with your (presumably strongly typed) TS code. Then it's just a matter of discipline -- don't set any types to "any" (TS's catch-all type) or "object" in your TS classes/methods unless you have a really good reason. After all, it's your *own* code you're mainly interested in getting right, not your dependencies. TS addresses a few of this article's points, too: \#1 - The "==" operator matches types like in C#. \#5 - TS allows overloading. \#9 - `this` works like C# inside TS classes. Probably you just shouldn't use it outside a class. :) Personally I'm just dabbling in TS a bit lately. It's pretty sensible so far, and the type system is a lot like C#. I think it's well worth a look.
It is not a hack. It is explicitly documented in the language specification.
This is nothing like the insanity of Duff's device.
I think a lot of the supporters come from Ruby since it integrates well with rails.
1. Basic 2. Pascal 3. Visual Basic 4. Perl 5. PHP 6. Java 1. Javascript 1. VB.net 1. C# 1. Python 1. Scala Not counting a few I only dabbled in for fun
There are files with type definitions available for many libraries (via https://github.com/borisyankov/DefinitelyTyped or as a nuget packages for example). TypeScript is not only static typing but also familiar class-based inheritance model (instead of prototype-based), generics, lambdas and other useful concepts. Of course with static typing comes the IntelliSense support which is a killer feature. I suppose it's good to just play around with it and decide if it fits the needs.
I'm not a huge fan of class-based inheritance. I come from a thoroughly class-based background, but in my experience inheritance is mostly just a good tool to shoot yourself in the foot. What people want are interfaces, and mixins, and in a dynamic language the first is irrelevant, and the second isn't provided by class-based inheritance (and is generally trivial in JS in any case). The remaining uses for inheritance should be covered by composition; note that *every* usage of inheritance can be emulated by interfaces and composition, so if your API's aren't huge, even if you find a use case for inheritance, you're not losing much. I'm skeptical that class-based inheritance is worth much. If anything, javascript's lack of classes deters people from falling into bad habits they've needed elsewhere. The type definition thing sounds neat, though.
The point you need to achieve over 50% coverage to get 25% of the type errors, because a type error is only detected when *two* typed elements interact (and many interactions involve more than two typed elements - `x = a + b` with `a` untyped might as well be entirely untyped.
I stand corrected. But then it still counts: 25 % is more than 0 %. :-) And you'd either start completely typed with TypeScript, or you'd add types more and more to your code base and thus increasing the percentage.
The "this" fix looks really nice, and == is a minor but nice syntactic improvement (though merely using === everywhere in JS isn't a huge trouble)! I don't think I entirely agree that it's your own code you want to get typed right - that's the stuff I know well and tend to make few mistakes in. It's precisely the surface area, my exposed and consumed API's, and the interface between modules I control that I want checked, because it's less well known, and because it's especially nasty when there are changes, and because there's just so many more moving parts. I mean I appreciate the help in my own code, but if it's small, well-factored modules, then it's between the modules where I'm likely to make mistakes, not within.
Access performance of List&lt;&gt; is about twice as slow: List does bounds checking, and the internal array does *again*. It's possible some of that can be elided, but it's unlikely. Also, and this matters more, list has a double derefernce - to access an element, the pointer to the List&lt;&gt; needs to be followed, and then the pointer to the array. This kind of non-sequential access is precisely what modern CPU's aren't so good at. The array has one indirection less. It's noticable. Iteration isn't quite as bad because you're not paying the double indirection as often, and you're also more likely to elide most bounds checks. Counting excess capacity is fair. We're talking about .ToList() and .ToArray() here, and people don't set the capacity - nor do you know the capacity up front. Both implementations need to iteratively grow the underlying array, it's just that one of them needs an extra resize at the end but has no excess capacity; and the other doesn't need that final expensive resize but wastes more memory. Just to give you an idea, I did a quick linqpad benchmark (optimization on aka Release mode): long sum = 0; var sw=Stopwatch.StartNew(); if(false) Parallel.ForEach(Enumerable.Repeat(0, 100000), _=&gt; { var seq = Enumerable.Range(0,123456).ToList(); foreach(var n in seq) sum += n; for(int i=0;i&lt;seq.Count; i++) sum -= seq[i]/3; }); else Parallel.ForEach(Enumerable.Repeat(0, 100000), _=&gt; { var seq = Enumerable.Range(0,123456).ToArray(); foreach(var n in seq) sum += n; for(int i=0;i&lt;seq.Length; i++) sum -= seq[i]/3; }); sw.Elapsed.TotalSeconds.Dump(); The list variant took 135 seconds on my machine (i7-4770k @4.15GHz), and the array variant took 58 seconds. Why Parallel? So the GC overhead matters. sum is just there to discourage the DCE optimizer from just cutting the entire code. Small, 20 element lists/arrays reduce the difference somewhat (likely because general overhead matters more), but the array still wins hands down with 20.3s vs. list's 33.8s. &gt; &gt; discourages bad mutability habits a little more &gt; And yet, I can fill that array with anything, if you make the mistake of returning it from a class method. Doesn't matter if it's private. That the length is fixed doesn't make it immutable. If you want immutability, go with a ReadOnlyCollection&lt;T&gt;. You're right - and yet perfect is the enemy of the good. In practice, array avoids a significant chunk of inadvertent mutations. Also, consider the context - typical linq-using code with .ToList() and .ToArray() that are building new sequences from old ones. I rarely encounter people using indexers to change an existing sequence, without also needing to change the length. If you make length changes impossible, most inadvertent mutations will be caught (and if you "resize" an array, you make a copy, so that's OK too). And while we're talking slow - ReadOnlyCollection is *really* slow (I even wrote a blog post about that 5 years ago: http://eamon.nerbonne.org/2009/02/net-numeric-performance-disappointing.html). I'd love real immutability, but I'll take what I can easily, practically get. I think arrays are significantly more likely to catch inadvertent mutation errors than lists. &gt; &gt; shorter syntax for the typename where you need to express it explicitly &gt; That's not often. Type inference eliminates most need for that. All return and parameters types; and if you use small, one-purpose methods (often considered good design) that might be a considerable number of types. I don't think it's a huge advantage, but then, List&lt;&gt; has *no* advantage, so it's still an easy choice. In external API code, you'll need to consider whether the additional overhead of an array-wrapper is worth it (the new ImmutableArray is pretty good here, but still not perfect) - usually the overhead is acceptable, but not always. It's nice to get what safety you can from the type system, but the .NET type system just doesn't control every aspect of your code. Aliasing, mutability control, thread-safety, null-safety are all nice to have, and despite the fact that .NET supports none of those statically, you can still write fine code - safety is nice, not critical. Array is faster, less typing, and will catch the most typical kind of inadvertent mutation. It's not a panacea, but turn this around: why would you ever choose List&lt;&gt; given those differences? There's only one good reason I can think of: you *want* mutation - and that's fine, and *that's* where you should use list. 
I think it's illustrative that that stackoverflow answer essentially boils down to "you can change the size", when in fact I rarely want to do that. And notably the author himself admits he uses array's heavily. Assuming you don't want to change the sequence length (which in my experience covers well over 95% of usages due to linq), there seem to be only downsides to lists.
Yeah. I guess you're right. I think I'll give it a shot on my next project. I think I'm just a little lazy and wasn't looking forward to add that extra typing (in both senses of the word) for little gain. But by the sound of it, TypeScript adds other advantages too, so hey, why not!
Well, if the list is just showing you the items in the order it sees them in the bound collection, you could probably use the selectedIndex of the list to grab your item since it should be in the same index in the collection. 
Don't get too hanged up on this. Whatever you'll implement you'll regret it later. You will not be seeing then what problems the other solutions would've wrought. Organization here is more descriptive of your minds organization of this project than actual projects, so think about your use cases (are you having lots of different projects using the DB; will you need to reference all the possible dll's you're creating; are these projects standalone exe's that need to be separately deployed; how about testing). Play around with interfaces that you want to have to DB and make final decisions later. When code is new and fresh it's much easier to reorganize than later after you've eaten a bunch of dogma and pushed its agenda until it doesn't fit at all. When you say "fully isolated" I must laugh at your face. You have abstraction but problem with abstractions is that they always leak. First thing that will show you that is if your DB access is a tracking ORM, you'll need to disable that when adding many objects (simple things like populating country information tables). From my perspective the only reason to keep DAO and DB separate is to have some components only dependent on DAO. But in my experience that has been quite imaginary boundary anyways because in the end those components will develop a need for DB as well. So I like to keep db access and any objects for that together; I don't think about them as DB and DAO (model and DTO's in our case) but more like unified layer that may or may be fully used by whoever accesses it. Now I'm not advocating for dumping everything in one project, but I've seen cases where for example single forms were put in their own projects (for a reasonable reason at the time) but it ended up being a shite solution.
&gt; Whatever you'll implement you'll regret it later. Truer words have never been spoken 
Note that you don't even need to return an IEnumerator; just something that follows enumerator's patterns with MoveNext and Current.
or SortedList... :-)
Back when foreach was made there were no generics. Explicitly using IEnumerator however iterators over things typed "Object". This is both potentially type-unsafe if you have more specifically typed collections, but even more critically for MS back then, terribly slow when the collection is a collection of primitives. For example, imagine iterating over and array of ints with IEnumerable/IEnumerator (not their generic counterparts IEnumerable&lt;&gt;/IEnumerator&lt;&gt;) - this would extremely slow by comparison since every int would be boxed.
MSDN's summary isn't wrong, it's just incomplete, and I wouldn't want to muddy the waters with this distinction there. I'm sure if you dig down you'll find some mention of it (in any case, it's not really all that important).
You avoid the stupid foreach cast bug-trap by simply always using var in a foreach (and frankly, I try to use it most places, unless there's some clear reason to highlight the type to the reader).
Ah, true, index is a key as well (!)
The type of "var" variable is then the top level type which in this case is object, which is then useless without further cast. But yeah, pretty theoretical these days since we no longer use bare List:s and mixedtype stores. On the other hand these can creep up again with popularity of schemaless json etc. Food for though.
However - is that a problem? It means that later when you refer to that variable you'll need to explicitly cast, which highlight the fact that, well, the compiler doesn't know the type. But yeah, it's mostly moot since virtually all collections are typed nowadays. Even json I always unpack into typed datastructures - why wouldn't you? It's not like it's a lot of work with JSON.net.
ahh, that makes sense. I'll stick to my current habit then of forbidding ==, that way you're sure even if some untyped code sneaks in.
Of course how one is using the variable depends on how you want it. If I wanted only one type I'd write that type in, and then if(thevar==null)continue; Can't stand blocks containing one single if: foreach (var value in collection) { var asT = value as SomeType; if (asT != null) { ... } } Issue with JSON is that usually the contract is soft when json is used. You can never really trust the other end to keep it up. With typed deserialization things just blow up while with "soft" probing at least something works. And of course that might not be a good thing at all. So pretty much the same as with XML except that was much "easier" to validate against a schema before reading it in.
Do you have a user object you could pass to various sessions? 
I'm hung up on the "various sessions" part. If I have the application open in multiple tabs of the same browser, isn't there only one session shared between all tabs? Is there a way to create separate sessions in one browser?
Actually this put a little more definition to my thoughts about using the user ID as a key to get the data. I'm playing around with storing it in the ViewState instead (since it only needs to be defined in that specific page) but I'm wondering about the performance.
My apologies for not being clear. Take a look at this: http://stackoverflow.com/a/16488382/714186 hope that helps.
1. Sinclair BASIC 2. Amiga BASIC 3. PRIMOS &amp; Prime assembly 4. MS BASIC 5. Visual Basic 1 to 6 6. PowerBasic 7. Java 8. C# Some python, COBOL, Pascal and php in there somewhere.
Do they really want to be logged in as different user in other tabs? You need to maintain some URL/ViewState passing identifier for that. Real solution is to make it possible to just manipulate assosiations of other users as some "admin" user and stay on same users page. AFAIK cookies are per-browser, not per-window (which tabs essentially are) so you can't store session identifiers there.
&gt;Real solution is to make it possible to just manipulate assosiations of other users as some "admin" user and stay on same users page. So that's what we're doing, sorry if it wasn't more clear. For example, I would be logged in as me but I would need to manipulate John Doe's info on one tab and Bob Jones' in another. We can't store John Doe's info in the Session because Bob Jones' page will share that info.
Thanks again for the suggestions and your time. Gonna mess with this some more this afternoon. c# is too fun.. I'm glad I switched from Javascript to this. It was like learning to code in the wild-west over there :D
Yes. 
Consider organising your application by feature rather than by architectural concept. Especially in smaller applications, focusing code around what the app does, rather than the design patterns that construct. Uncle Bob has written about this concept as "the screaming architecture" - http://blog.8thlight.com/uncle-bob/2011/09/30/Screaming-Architecture.html But to give you some simple pointers. Assemblies! - Use one until you need more. Namespaces - Split up by feature or cross cutting function Data access stuff - Use good known libraries (NHibernate, Simple.Data etc) - use thin wrappers around them at best - you'll never really going to get persistence dependence in a reasonable way. Consider reading about the session per request pattern. I'm not sure what your unit of work is (is this a web app?) but injected, unit-of-worked sessions tend to be the least friction in doing database stuff. Splitting contracts / implementations is normally effort for no benefit. Are you using WCF and sharing contracts by their interfaces? If you're not, I can't see much reason to do this. You're not going to just magically switch out your implementation without a nice big fat recompile anyway, better keep them side by side for ease of refactoring and low development friction. Generally, keep your domain model clear and clean, keep your application services or features organised by feature, and keep any framework bindings distinct from the code that orchestrates them.
I tend to find that wrapping NHibernate into IRepository does nothing but reduce the utility of the framework to only the features you've implemented - costing a lot of the power and flexibility. Do you use things like Futures? Or allow the use of custom QueryOver? I've seen over the years that writing a standardised IRepository&lt;T&gt; costs you flexibility in the long run, and just using the naked API and taking the cost of migrating to other ORMs as and when that occurs is more productive. Do you encapsulate any usage of the NH API across your application? I guess if you're just using Get/Load/SaveOrUpdate it's probably not much of an issue.
Design patterns are bug fixes for your programming language or frameworks of choice. They fill the gaps when there is no "obvious" way to approach a problem - "just adding design patterns!" without understanding why isn't a good idea at all. Start from what, not how.
What about hidden fields in the form. 
Yeah. I did a bit of benchmarking for a Game I was working on where I had to save a couple of milliseconds and found it wasn't always cut and dried which is faster. Sometimes the result was counter-intuitive. They do indeed seem to have different implementations but, like you say, the difference is so small for most uses that the performance difference between the two isn't something that would typically influence your design. Even on that particularly tight loop the difference wasn't large enough to take into account.
TW: Patriarchy Please do not say working 
Put all the users into the one session and pass a nvp token to determine which user it is. Although I have a feeling they don't know what they really want. I was investigate further into their request.
Thanks for that. I've been looking for something decent on putting together something relatively simple but I find most articles/samples for tiered applications are either: a) A quick overview of what a tiered application is or b) A huge sprawling behemoth of an app with classes woven like spaghetti
Heya guys! I'm the developer for this collection, so let me know either here or on MSDN if you have any questions about performance or anything. Hope you enjoy :)
Cool idea!
Methinks you are making this app too complex. I had an AD account creation app (including template groups) in about 3 full days.
This has me excited.
Sorry for my newbness, but just to make sure I am clear; The difference between the MultiDictionary and a standard dictionary is the fact that it can have multiple values per key and the interaction between itself and ICollection?
So in what ways is this different from a Lookup&lt;TKey, TValue&gt;?
Your first app? Was that 8 hours a day? Also, how did you specify your AD names? While I'm at it, did you have to do LDAP queries to get your SearchResults objects? Not that I mind it, but just wondering if I'm headed down the right path. Also, maybe 5% complete is shooting a bit low... 
From MSDN: " There is no public constructor to create a new instance of a Lookup&lt;TKey, TElement&gt;. Additionally,Lookup&lt;TKey, TElement&gt; objects are immutable, that is, you cannot add or remove elements or keys from aLookup&lt;TKey, TElement&gt; object after it has been created."
Yup! It can either be conceptualized as a Dictionary&lt;TKey,TValue&gt; that allows multiple values per key, or as a Dictionary&lt;TKey,ICollection&lt;TValue&gt;&gt;. Either is equally correct, although it is functionally more similar to the latter. It also has a bunch of nifty characteristics like indexation never throwing exceptions as well as additional methods to add or remove multiple values on a key, but those can be lumped under "interaction between itself and ICollection" :P If you have any other questions (no matter how newb-y!) don't hesitate to ask!
It's not really nice just posting here your own content. You should be a living part of this community instead of trying to use this sub-reddit as your personal advertisement platform. &gt; There is finally a 'right' way to do singleton lazy instantiation in C#. You're referring to Singleton but then don't use it in your example. &gt; The `Lazy&lt;&gt;` class also has methods for supporting thread safety It doesn't only has methods for supporting thread safety, it's default behavior is thread-safe already. The parameter-less constructor will ensure only one instance is created, even when 50 threads access this at the same time. If you know only one thread will access it and you just want to defer the instantiation then you better use `new Lazy&lt;T&gt;(isThreadSafe: false)`. The other possibility is to pass `LazyThreadSafetyMode.PublicationOnly` to allow multiple instances to be created, but only the first created one will be accessed by all threads. You really could have mentioned this to give your blog post more value, it's not difficult to figure out (simply read the MSDN page). &gt; The only thing I don't like is that you have to say `db.Value` instead of `db` to reference your actual object, but that's really just nit picking. That's why this field is usually wrapped with a property: private Lazy&lt;SoundCloudContext&gt; _databaseContext = new Lazy&lt;SoundCloudContext&gt;(); private SoundCloudContext DatabaseContext { get { return _databaseContext.Value; } }
Hopefully the articles I have linked will be somewhere inbetween. There are quite a few parts to it, but each part is explained well and easy to understand in isolation. Each part builds up on the previous articles, making it easier to get a grasp of the whole thing. 
Can you add values to the ICollection&lt;TValue&gt;? Also when indexing into the MultiDictionary, do you return the same instance of ICollection for the same requested key on multiple calls?
I'm not seeing a lot of value over LINQ and a Dictionary&lt;TKey, List&lt;TValue&gt;&gt;().. So why is this a big deal?
I've been using the HashMultiMap`2 from the F# PowerPack as a semi-official .Net multi dictionary. It has been cumbersome since it was designed for F#. One thing which was very nice was the "Add(key, value)" method. I also appreciated the storage of the first value per key independently since I had a lot of single-value keys. Finally, it surprised me that the Count property returned the number of keys and not the number of values: I had to derive the latter myself. How does MultiDictionary compare to HashMultiMap?
Typed deserialization allows extra fields, and it allows missing fields too (those are set to null, unless you explicitly request JSON.net to consider this a fatal error) - so if you pick your typed representation well, namely to include only properties you might actually use then you won't trip over extras and you can always check for nulls. At some level your code probably makes assumptions about the json, and you might as well encode those in the type. There's little to be gained by not doing so.
Is your KeyNotFoundException actually useful? (vrt. Dictionary's).
Is there a guide somewhere that tells you when to use a certain collection? I mean it's good to have choice and all, but I'd like to make an informed decision. 
Bulk operations :O NIce! ;D
Did you read the article? &gt;The issue with the dictionary of list is nearly every call to the Dictionary has to be wrapped in logic to check the current state of the dictionary before adding/removing/indexing etc.
This looks great - I have used the dict of list construct so many times! Question, does this new type have an efficient conversion to an ILookup? Next you should make the NKeyMultiDictionary that predefines a Tuple for the key. ;)
Thanks! I find myself using this pattern a lot. It will be good not to write it again.
Do you have a detailed plan (=requirements) of what you are creating? Or are you just writing code "as you go"? 
You'll get a solid *it depends* from me. Sometimes you can do it in an hour, sometimes it takes months. It's all about the complexity.
&gt; indexation never throws an exception I'd imagine that's because for any key that doesn't have values, it's just an empty collection.
I'm inclined to agree with others here - I'm willing to bet you are over complicating this thing and don't have well documented requirements and tech planning. I also question your definition of "bare bones".
What is the performance for bulk operations vs using stored procedures, lets say, for a massive update of 1000 records.
Performance may vary a lot for various reasons (number of columns, index, trigger, etc.) but for 1000x record, my benchmark test was around 20x faster.
A dozen people are working on the app I'm building and have been for about a year and half and it's about six months from market - it's a replacement for a twenty year old engineering app. So some of this shit takes time. 
Would be able to remove certain value from a key?
There are lots of code katas online that will help. I also like the nerd dinner tutorial. It's a bit outdated but it will give you some good practice in building a website with mvc.
The free cs50 online course from Harvard has several small projects in C that could be implemented in c#. Very good course in any case.
Do you know if there are any applications there that would involve the use of Forms? I forgot to specify in my original post, but I'd love a mixture of GUI and console applications if possible. Thank you for your help so far!
I didn't know about this website. Thanks for the great resource!
I have a detailed plan of what I need, but no order to write it in, outline of how to layout code, etc. 
Hi, thanks for the feedback! You're right it is kind of sketchy to just show up and post a link to my own blog. Until now I've just been lurking but I thought this would be a good post to contribute to the community and also to get feedback, so again, thanks :D Isn't using a db access in controllers a basic use of a singleton? I suppose it would have been more clear if I used the instance in two or more classes or at least in two or more calls. And yeah, truth is I don't understand much about thread safety, but I saw in the msdn docs about it so I thought I would mention it. And for wrapping the Lazy&lt;&gt; field in a property, that is a great idea! Thanks. Is it okay if I credit you with an update to the post?
&gt; Can you add values to the ICollection&lt;TValue&gt;? Yes, you can. An ICollection&lt;TValue&gt; associated with some TKey that is returned by indexation into the MultiDictionary represents a current *view* of the internal structure of the MultiDictionary and **does** allow modification. You may also remove values from the ICollection, clear it, etc. &gt;Also when indexing into the MultiDictionary, do you return the same instance of ICollection for the same requested key on multiple calls? I'll have to check on Monday to be sure, but I believe the current implementation returns a different ICollection&lt;TValue&gt; every time you index on a key. 
Excel has some .net tools that allow you to manipulate excel files in code. Working with csv files are pretty easy if they are formatted well
sounds a lot like the named value collection, in the specialized collection name space, care to explain the differences? nm that's only for strings. 
ah :( I thought it was a two way map :(
No problem. Happy coding.
That kinda requires that excel is installed on machine where application is deployed, that's often not the case.
https://closedxml.codeplex.com
I've used Aspose Cells for excel files. I believe it reads the whole sheet into memory (rather than streaming), so keep that in mind if you have extremely large files. http://www.aspose.com/.net/excel-component.aspx A co-worker used LumenWorks for some simple CSV stuff many, but I don't have any personal experience with it.
A good way to develop is to always have a working program. You start simple, and you add more and more features and functionality, but at each stage of development it should work and be testable.
Also. http://www.reddit.com/r/dailyprogrammer
Very cool, I found myself needing exactly this data structure yesterday. :)
This is amazing! Do you have any suggestions for implementing a GUI into the challenges? Do you think displaying i/o in a GUI is sufficient or do you have another suggestion? 
You can use OLE DB to read Excel files and treat each sheet like a DataTable. Searching around for "OLEDB Excel" should find lots of examples.
For parsing csv files, use the [Microsoft.VisualBasic.FileIO.TextFieldParser](http://msdn.microsoft.com/en-us/library/microsoft.visualbasic.fileio.textfieldparser.aspx) class. For excel, try [NPOI](https://npoi.codeplex.com/).
EPPlus http://epplus.codeplex.com/
When it comes to parsing csv files i whould recommende to use CsvHelper made by JoshClose... it's really simple to use and and can map easily rows into objects. Link: https://github.com/JoshClose/CsvHelper
Yes. The article says that
I've used this to read Excel with great success (Office not required): [LinqToExcel](https://github.com/paulyoder/LinqToExcel) ([Nuget](http://www.nuget.org/packages/LinqToExcel))
I recently implemented code for reading and writing Excel sheets. First we tried interfacing directly with Excel libraries - but the code was specific to particular versions of Excel, which is no good for anything distributed externally. I ended up using this package: http://spreadsheetlight.com/ This works for xlsx files. If you want to read the older xls format, then you'll need to find a different reader. I believe there are several around. As for CSV - it's pretty trivial. Just write the code to do it yourself.
Depending on which version of Excel you are looking to read, I have used both: Microsoft Open XML SDK: http://msdn.microsoft.com/en-us/library/office/bb448854(v=office.15).aspx and NPOI: https://npoi.codeplex.com/ 
I haven't gotten to the point of even trying any GUI stuff yet. I haven't noticed anyone submit GUI stuff, usually because they post the actual code and the point for most challenge sites and such is the actual program logic. From that point of view GUI code is fluff but nothing keeping you from get the logic stuff then expanding the program later. There are a couple I am going to go back and do that with.
This is my goto as well. Very good, OOP, and fast library for all sorts of flat delimited files.
I've used lumenworks and I think csvhelper is far better and near as fast or faster.
&gt;As for CSV - it's pretty trivial. Just write the code to do it yourself. Famous last words.
I think I'll be doing the same. Thanks for all your help! 
Not sure what the hold up is -- But off the top of my head, with a detailed plan, writing a winforms app that accomplishes this would take me a day (8-10 hours). Writing a web application that does the same thing might take about 2 days to get stood up. This doesn't account for security, and assumes that the infrastructure is already in place to have an external site as well as internal services. If I wasn't already familiar with how this works, I might pad another day or two. If I was working in scrum, assuming it was a single story: "As a site administrator, I need a web page that allows me to create new active directory user accounts, so that I can have a simple clean way to board new users." My estimate would be 5 points (possibly 3), 14 hours (maybe 21). Includes dev testing and writing unit tests.
I read up a bit more and I get what you're saying now. Yeah - Dependency Injection/IoC are almost invariably the better way to go but for small things a singleton can do the trick. I updated my post with a better example. Thanks!
Thanks, I did some more research and I get the difference now. I added 'C# In depth' to my reading list.
CSV is trivial. Load your CSV into a StreamReader, ReadLine().Split(","). Repeat till Peek()==-1.
It's a good exercise in watching out for subtle pitfalls.
Whats bothering you?
You always get double dereferences`*`. It's true that those will be less expensive if cached (you don't always get double cache-misses, that would be terribly expensive), but you still get the double dereference. This matter for things like out-of-order execution windows, instruction densitiy, likelihood the JIT can inline, etc. And the plain perf. numbers back it up - List is twice as slow. `*` if everything is inlined - but don't rely on that even in C++, and certainly not in C# - a smart JIT might elide something. But note that this is to the array's *advantage* relatively, because it's much easier for the JIT to elide in that scenario, since there's just so much less going on. To really elide the List bounds check, for instance, the JIT would need to prove not only that the new index is within the old bounds, but that the old bounds are still valid! Mutability+aliasing make proving this kind of thing tricky for the optimizer; that's why this will only ever work if inlined, and why it's so much simpler in an array (and still not trivial). An array access just doesn't do much. The only relevants bits there are a bounds check and a dereference. If a list adds a function call, an extra bounds check, and an extra dereference, well, that's quite a bit in comparison Lots of code doesn't care, but then, array is also usually a better match for usage, since I don't usually mutate most sequences, so there's just no upside to List&lt;&gt;. You might as well take that fairly irrelevant factor-two of a tiny number speed boost, and in the odd case it'll actually matter. It's not a big thing, but given the rest of the story...
The example you referenced is about querying stuff from database. You want to look at inserts/updates --&gt; http://msdn.microsoft.com/en-us/library/vstudio/bb386870(v=vs.100).aspx and remember to context.SaveChanges() EDIT: Also, if you want to insert a lot of stuff - probably look at http://msdn.microsoft.com/en-us/library/system.data.entity.dbset.addrange(v=vs.113).aspx 
Sorry. When I said "refresh" I meant clearing the cache of the datacontext and putting the current data from the database into it. But it looks like I'm confusing my terms a bit. Thanks for your reply.
Thanks for the replies. I can see I'm getting confused and mixing up terms from different things. I've been trying to use LINQ to Entities but if somebody recommends a better way I'll look at it. Thanks.
Strange.... I was a lecturer at a uni and recommended c# but it wasn't southern cross.
I was thrown into the deep end when I started a job working with the Oracle RightNow package. Before that I was a fairly into Java and lectured in the web languages for a uni.
Ah, I thought you wouldn't after caching. Good to know - thanks. I write quite perf-critical code often, so I'll be sure to use it.
I'd like the docs to link to Lookup/ILookup/ToLookup since those are closely related and may be interchangeable in many scenarios.
It parses any CSV that dosen't have text delimeters in one line of c# + variable declarations. And handling text delimeters can be as simple as replacing the .split call with your own extension method that goes char by char thru the line breaking it at the right places.
Lazy was sold to be as a way to get a dependent library in a constructor. Autofac and I imagine all dependency injection frameeorks play well with it. e.g. class Foo1 { public Foo1(Foo2 foo2); } class Foo2 { public Foo2(Lazy&lt;Foo1&gt; foo1); } Edit: Cannot figure out formatting...
Looks really good, especially the mapping.
If you really want a new one with each iteration, put a using block around the body of the loop. But you probably don't need that.
You probably have to create a new datacontext. It's a very lightweight object so it shouldn't hamper your performance by much.
This class is probably all you will ever need for CSV files http://pastebin.com/VLwUZX81 It follows the same rules as Microsoft Excel for reading CSV documents.
How does this implement **Contains**? Is there a **.Contains(key, value)** or do i have to do a **[key].Contains(value)**. I would expect that you would be able make some performance optimizations with the former of the two?
If you're doing this by the book, you'd be saving your changes TO your context so your context should always have the latest data. When you insert a new record, the ID should be updated. There's no need to requery.
I was thinking of doing that in the loop but I don't know how to automatically name new contexts in the loop. Can I just concatenate (integer).tostring() to the new context names? If I can, how would I do that? 
you don't save the context. It's hard to say without being able to review your complete code so I can only take stabs in the dark. I ran into that problem when I was learning EF and the problem was that I was trying to save to different contexts. The solution was to either detach the context and reattach it at each layer or to implement an abstract factory and unit of work (back then. I don't think you need that with newer versions) to ensure that it was the same instance of the context that was being used. But by design, when you save a new record, your object should be updated with the new key and likewise, your context should be aware of the new change. If not, something is wrong. Also keep in mind that IQueryable is bunch of delayed queries that get executed when they're enumerated, so you might have to force an enumeration to get updated data. I would take a deeper look at your design pattern. My other thought is that if you're trying to do all of this stuff inside a loop, then chances are that it's not working because you're operating on the same data set on every iteration of the loop rather than an updated dataset (don't confuse the context with the data set or the record). But if you re-enumerate the data set to get the new data on each iteration... that's going to get really costly. To be perfectly honest, I would do more research on your approach. The fact that you have to do this kind of logic sounds really smelly to me. If you just want to check if something already exists, then there shouldn't be much work. You only edit things that are returned in a query -- those will have a key. If they don't have a key, then they're new. In newer versions of EF, this should actually be figured out for you, just save and it'll figure it out for you. There's a practice that goes alone with this to make it work, however. So you'll have to be true to it. But, this is one of the reasons I prefer to do this stuff in a stored procedure. And I generally don't like to use ORMs.
...LINQ is just a set of methods to work with collections of data. It doesn't update data by itself, but you can use it to perform an action many items on a collection.
There are methods, like .First() that will always hit the data backend. But then there's .Find() which will lookup (via primary key) and return the "cached" copy in the data context if it's there, otherwise will hit the backend. 
Does V need to be IComparable? &gt; https://github.com/sodlum/KVTree/blob/master/KVTree.cs#L48 Why are you catching the exception? Did you forget to remove it after debugging? &gt; https://github.com/sodlum/KVTree/blob/master/KVTree.cs#L54 You should break apart long ugly statements so they're easier to read, I prefer something like this: set { recursiveSearch( root, new KeyValuePair&lt;K, V&gt;(key, default(V))) .swapNodeData( new Node&lt;KeyValuePair&lt;K, V&gt;&gt;( new KeyValuePair&lt;K, V&gt;(key, value) ) ); } &gt; https://github.com/sodlum/KVTree/blob/master/KVTree.cs#L63 Since nodes in a tree are ordered, recursiveGetAll can be made to return them in order instead of requiring .Sort() &gt; https://github.com/sodlum/KVTree/blob/master/KVTree.cs#L155 Another debug exception catch? If you are testing your code, make a new class that will call KVTree instead of adding new code into the implementation. Look up how to write unit tests. &gt; https://github.com/sodlum/KVTree/blob/master/KVTree.cs#L188 Why are you checking if thing `is Node` ? `is` is used to check if a value is an instance of a *specific* class. If you want to see if a variable has a value, check if it's not null `x != null` &gt; https://github.com/sodlum/KVTree/blob/master/KVTree.cs#L328 ~~TryGetValue should NOT change value if the key is not in the IDictionary!~~ Sorry, I forgot that out parameters always have to be set, this is correct. &gt; https://github.com/sodlum/KVTree/blob/master/KVTree.cs#L380 You have this and some other recursive methods take an accumulator variable, and usually it's passed in an empty one, you can clean this up by separating out the intial case of the recursion into a separate function: public Stack&lt;KeyValuePair&lt;K, V&gt;&gt; recursiveGetAll(Node&lt;KeyValuePair&lt;K, V&gt;&gt; node) { return recursiveGetAll(node, new Stack&lt;KeyValuePair&lt;K, V&gt;&gt;()); } &gt; https://github.com/sodlum/KVTree/blob/master/KVTree.cs#L400 This Comparer class doesn't seem to do very much. &gt; https://github.com/sodlum/KVTree/blob/master/KVTree.cs#L463 What is this check for? If this is meant to prevent you from replacing a node's child once it's assigned, it should throw an exception rather than silently ignore the `set`. &gt; https://github.com/sodlum/KVTree/blob/master/KVTree.cs#L487 There is no need to do `x = default(T)` inside constructors and other initializers, default(T) is what variables are initialized with by default. Same with `= null`. As for hash codes, they are used to speed up and comparing objects. For example strings, to compare strings you have to compare them letter by letter, so if you have a string that's 10000 characters long, and only the last character is different, you have to do 10000 comparisons. Now if you have 500 strings, and you want to check if you have duplicates, you have to compare every string to every other string, and each comparison could require up to 10000 character comparisons. This would be very slow! Instead you create a function that will make a single number for any string, and it will always return the same number for the same string. You can make a function like that by adding up all the characters in the string or something similar. Now you can compare the hash code first, and if it doesn't match, you know the strings can't be equal. Just like that, for some strings you went from 10000 comparisons to just 1. On the other hand, two different strings could have the same hash code, for example if you're adding up letters in "ac", "ca", "bb" give you the same sum. So when you do get matching hash codes, then you have to do a full compare.
Very nice little code review you've done here.
Could you do some proof reading? The text is riddled with grammar mistakes. From the first paragraph: &gt; Recently, one of my colleague*s*, Rahul Rathore, and I *had* a conversation about object oriented techniques, and we both agree that *they took* lots of inspiration from *the* real world. Below is the background of our conversation and what emerged out of *it*. An article with good grammar is a better article :)
&gt; Does V need to be IComparable? I suppose not &gt; Why are you catching the exception? Did you forget to remove it after debugging? It's not that I forgot to remove them. I'm just very inexperienced with exception handling and I wasn't really sure what I could do about throwing unhandled exceptions. As far as I can tell there will always be a case where the Tree will catch an error due to bad data, so I felt it was necessary to leave them in there. Obviously, "Console.WriteLine()" is only specific to consoles, so it wouldn't really help much on a WinForm application. Any advice for having it break gracefully on an error instead of just suddenly stopping? &gt; You should break apart long ugly statements so they're easier to read That's honestly just my personal coding style. I like doing things in a single line if possible. I'll try to make it more readable in the future. &gt; Since nodes in a tree are ordered, recursiveGetAll can be made to return them in order instead of requiring .Sort() Yes, this is indeed true. I had actually forgotten I put that in there. recursiveGetAll returns the node collection from greatest to least though, so I'll need to turn that around for it to make more sense. &gt; Another debug exception catch? Just my lack of exception handling experience bleeding through again. &gt; TryGetValue should NOT change value if the key is not in the IDictionary! I'm not sure exactly what you mean by changing the value in this case. What I've done here is find the node with the matching key and then I return it's value. In my experience, or lack thereof, using the 'out' keyword on a parameter requires that it be set for all cases where a return statement is found. In this case, if the node isn't found, there's no value to be had, so value would need to be set to some default. &gt; You have this and some other recursive methods take an accumulator variable I see your point here and I'll make a note to fix it when I get home this evening. &gt; This Comparer class doesn't seem to do very much It's small, yes, but I'd prefer to have comparison functions separated from the main class. In all honesty, if I could easily create to maintain each one of the regions, I certainly would try. &gt; What is this check for? If this is meant to prevent you from replacing a node's child once it's assigned That's exactly what it's for. I didn't want to have to go through the Node&lt;T&gt; class to create the child and parent nodes, but I didn't want them to be easily modified during runtime, so I made it such that they could only be instantiated once and then they effectively become read only. I do understand your point about silently ignoring the attempt to change it though, so I'll make a note to fix this when I get home. &gt; There is no need to do x = default(T) inside constructors and other initializers This I just did not know. From the looks of it, most of my constructors can either disappear or by stripped to only a few lines. Thanks for your code review, you've definitely helped me out a bit here. Also, thanks for explaining hash codes. Now that I understand their practicality, I may actually be able to put them to use. I think a better way to use them for your example where strings may have the same hash code is instead of just adding up all the values of each character, you could also assign a value to the specific index that character is and multiply it with the value of that character. "ac" would give you 7 where as "ca" would give you 5. "bb" would give you 6. This might have detrimental effects as the numbers could potentially get very large very quickly.
Please do go on, tell me of your approach to handling csv files.
Commented on the blogpost, reposting it here: This post totally missed interfaces. Interfaces is one way to specify 'context'; since classes can implement multiple interfaces they can easy expose different subsets/views of their internals for different usages. This is somewhat more generic than the friend concept since it shifts the emphasis from concrete "friends" (implementation) to more abstract "context" (contract).
I feel like this would get old for two main reasons. 1. I save very frequently 2. I would find it insincere after a while. Half the commits I do I'm disappointed in. "Nice job!" "Ugh not really. But thanks"
This is how the Identity Team did it. I'm looking into why this is, but this is the default implementation, not for Identity Samples, but within Identity framework itself. Note, I think the expectation is that the number of users is not expected to be overly large . . . and if it becomes overly large, then probably Identity framework is less than ideal. On the other hand, one can always customize IdentityUser to use `int`s...
I'm sorry, I'm sure some people will enjoy this, but personally I find this horrendously stupid. For one, as another said, I already have to keep an eye on my extension efficiency with things like Resharper and others slowing down the IDE, but moreover, I just don't care that my editor displays one of three random phrases - it doesn't make me feel encouraged, it's just programmed to do that on save, and as such it means nothing to me. If, on the other hand, it were checking code metrics or something on save, and encouraged you when you wrote code with a high maintainability index or some such, I could see it meaning more to me. If you tell me I'm doing a good job even when my code is crap, it has no meaning.
 &lt;system.webServer&gt; &lt;httpErrors errorMode="Detailed" defaultPath="~/Error/General" defaultResponseMode="ExecuteUrl"&gt; &lt;remove statusCode="404" subStatusCode="-1" /&gt; &lt;add statusCode="404" subStatusCode="-1" path="~/Error/Http404" /&gt; &lt;/httpErrors&gt; &lt;/system.webServer&gt; 
There were a couple of sentences that don't make sense, and I'm pretty sure the example code will throw exceptions at runtime (it names the method PrivateMethodAvlToFriend but tries to call PrivateMethodToFriend or something along those lines).
I recently used closedXML for the first time and I found it to be very helpful. I had a small issue and posted it on their forum and the dev emailed me back with a solution within the hour. 
To agree with you and quote dotnetrocks: "Only code those things that only you can code."
The is keyword is something I found while working on this project. I got a bit over zealous with it. I'm marking it on my lost of things that need yo be changed. 
Man, it's just a joking extension ;)
context.Entry(user).Reload(); You can also use the MergeOption to force a refresh every time lik eso: ObjectQuery _query = Entity.MyEntity; _query.MergeOption = MergeOption.OverwriteChanges; var myEntity = _query.Where(x =&gt; x.Id &gt; 0).ToList();
Yea, I'm allowing my co-worker to use EF against my database. Now I've got to fight with him on every query lest he defaults to calling SELECT * across all my tables.
See, that's why it should run code metrics before it says anything. So sometimes you'll see "Great job!" and other times you'll see "Oh... oh dear.".
Post some code
If the object implements the IDisposable interface, you should call Dispose(). The using block is sweet syntactic sugar that does this for you automatically. If you aren't sure the object in question is disposable, just use Intellisense. Type your variable name and hit the . key. If you see Dispose() in the list, it's disposable and should be disposed of either manually or through a using block. The using block is preferred because it will always dispose the object, even if you put a return inside the block! Neat, huh? And no, setting it to NULL doesn't call Dispose(). If you do this, you are merely releasing the reference. This is a sure way to cause memory leaks. You can set your object to NULL *after* it is disposed, but there is usually no real need to do so; once the object goes out of scope it will be released anyway. 
http://support.microsoft.com/kb/310263 I was using this as a reference. But wasn't sure of the last part where he sets the objects to null.
haha I like it. Until it becomes Hal. "I'm afraid I can't let you save that." 
&gt; This is a sure way to cause memory leaks. More likely to leak connections and file handles than memory.
thanks, unfortunately it doesn't look like Microsoft.Office.Interop.Outlook.Application, MailItem or Recipient implement that.
There are two contains methods - Contains(TKey, TValue) ContainsKey(TKey) You are correct, Contains(TKey, TValue) should be used over [key].Contains(TKey, TValue) if possible. 
&gt; TryGetValue out parameter Ooops, sorry, I forgot that out requires value to be set. Your code is right. &gt; `left is Node...` Did you understand the difference between x is Class and x == null? &gt; Better hash function Sure, that's probably a better hash function, so it will have less false positives and speed up the code some more. It's ok for the numbers too get large, you can just wrap around. Another option is to use XOR instead of addition and wrapping/modulo. &gt; Exceptions Your class *should* be throwing exceptions for when something is failing. Right now in your code, if someone tries to insert a duplicate key, all you get is a message on the console, they have no idea that it failed because it already exists. Throwing the exception is the way to tell code that something failed. If the calling code wants to do something when a failure occurs, then the calling code will catch the exception. Look at what the .Net Dictionary.Add does: http://msdn.microsoft.com/en-us/library/k7z0zy8k(v=vs.110).aspx It throws ArgumentNullException if key is null, and ArgumentException if an element with the same key already exists in the Dictionary&lt;TKey, TValue&gt;. If you are writing a unit test for inserting duplicate values into the KVTree, it would look something like this: var tree = new KVTree&lt;int,int&gt;(); // check that things insert correctly tree.Add(1,2); Assert.IsTrue(tree.ContainsKey(1)); Assert.AreEqual(2, tree[1]); // check that you can't insert a duplicate key try { tree.Add(1, 3); Assert.Fail("Didn't get ArgumentException on duplicate key"); } catch (ArgumentException ex) { // correct exception thrown } catch (Exception ex) { Assert.Fail("Incorrect exception on duplicate key"); } // check that value wasn't changed by inserting duplicate key Assert.AreEqual(2, tree[1]); 
I'll definitely be going back and making some changes on the exceptions. As for the 'is Node' code snippets, I had just discovered the is keyword and got a bit over zealous with it. I'll be updating that when I get home this evening. I really appreciate all your help!
I haven't used the HashMultiMap you've described so I can't offer many useful comparisons unfortunately. * That Add(key,value) functionality is in the MultiDictionary * The MultiDictionary does not store the first value per key independently, but that is an interesting concept. I'll look into the tradeoffs associated with doing that. * The MultiDictionary.Count property returns the number of values, not the number of keys. Hope that helps, Ian 
Does that matter if you aren't reading ranges? Lookups on the user table using the the user id index are always for a single user.
Performance of Dictionary lookups are often very important, since we're mostly used to it being close to O(1). It is possible the First/Rest design of HashMultiMap comes from those considerations. Since the underlying runtime is the same, I'd expect you'd get some benefit from tracking down the author and garnering any experience they have in measuring and refining for perf. Like all perf experience, it won't be directly applicable, but will form a good experience from which to draw.
&gt;Question, does this new type have an efficient conversion to an ILookup? It is not currently associated with ILookup, but I'm looking into having the MultiDictionary implement ILookup&lt;TKey, TValue&gt;. There's also been some feedback asking for an extension method in ILookup (to convert it to a MultiDictionary (i.e. ILookup.ToMultiDicitonary()), which is also something that I'm considering. &gt; Next you should make the NKeyMultiDictionary that predefines a Tuple for the key. ;) I actually considered doing this as my next project, but after working out some of the details I found it to ultimately be an unnecessary data structure. The Dictionary&lt;tuple, data&gt; semantic provides all of the desired functionality, efficiency, and ease of use that I wanted out of a NKeyDictionary without the necessity of an additional data structure. I am working on some more cool stuff though... stay tuned for the next blog post :)
Short story, no you don't need to do that. Long story, ah COM, like a jilted lover you just keep finding a way to get back into my code. When you have a COM object, you've got a kind of 'wrapper' for a COM object, because you want a nice pure .Net object, not a filthy scummy COM one. The wrapper works like any other .Net object it will be elegable for garbage collection as soon as nothing references it, and if it's just a private variable inside a method then odds are this will be as soon as the call returns from that method. However in the waccy, waccy world of COM, this is often not what you want. There is a golden rule with a managed framework like .Net, don't screw about on the GC threads. So COM sometimes violates that. In the same way you'd use a using block to deterministically dispose of the object synchronously (that is to say, you, using your thread, dispose of the thing, rather than letting the GC thread do it). But COM is stubborn and refuses to get with the times. No IDisposable. So you see a bunch of Marshal.ReleaseComObject(foo) stuff, you see people setting the variable to null and sometimes doing horrific GC.Collect 3 times with a GC.WaitForPendingFinalizers thrown in just for good measure. These things are most often a superstitious kind of programming, we think it fixed it, this one time, in this one odd problem, so we'll litter the code with them everywhere. That would be my guess what you've got going on there. Ignore that bad practice, move on with your life.
"Without any dedication"? Really, I added an about box with special thanks to ##Csharp @ freenode
That is not on the homepage you linked. Also: You posted this already. And quite frankly: Your code is still shit. Didn't you learn anything in this time?
This is a project I've been working on for a while (written entirely in C# with no unsafe compile switch - although most of the code could be considered 'unsafe'). It aims to be a modern framework for designing multimedia-based applications. Currently there isn't much code for the actual framework, but I did complete a full interop library for COM and DirectX (including Direct2D, Direct3D, DirectWrite, DirectComposition, DXGI, and WIC). I would appreciate comments, suggestions, and concerns.
Use a memory profiler to see if you really are leaking COM objects. If that's the case, use Marshal.FinalReleaseComObject. 
I wrote what would use over my lunch break. parses your garbage string just fine. I think a lunch break qualifies as trivial. And I am certain it could be cleaned up, made more elegant, but trivial is trivial. public static string[] splitCSV(this string s) { return s.Split(','); } public static string[] splitCSV(this string s, char textdelimeter) { int comma = 0; int nextcomma = 0; int sz = 0; string tmp = "," + s; string[] r = new string[] { }; while (comma != -1) { bool txtdel = false; if (comma+1&lt;tmp.Length &amp;&amp; (char)tmp[comma+1] == textdelimeter) { nextcomma = tmp.IndexOf(textdelimeter+",", comma + 2); comma++; txtdel = true; } else nextcomma = tmp.IndexOf(",", comma + 1); Array.Resize&lt;string&gt;(ref r, ++sz); if (nextcomma != -1) r[sz - 1] = tmp.Substring(comma+1, nextcomma - comma - 1); else if (txtdel &amp;&amp; (char)tmp[tmp.Length-1]==textdelimeter) r[sz - 1] = tmp.Substring(comma + 1, tmp.Length-comma-2); else r[sz - 1] = tmp.Substring(comma+1); if (txtdel &amp;&amp; nextcomma!=-1) comma = nextcomma + 1; else comma = nextcomma; } return r; }
It doesn't handle escapes and comments, nor does it nicely throw them into an object with custom parsing logics. If you're content to write code like you're writing C in 1995, by all means have at it, but I hope I don't end up working with you.
Escapes, comments those aren't a post of any csv file. It's a text format. You want more complicated, you should use something else. Edit: And besides, if you can't go from a string[] to whatever you need (custom objects, whatever else you need) I sincerely doubt you know what you are doing. The discussion was simply that parsing a csv is trivial. It is, it only becomes "non-trivial" when you throw other tasks at the parse that have nothing to do with parsing a csv. My code, and my point is merely to get the data out of the csv into whatever I need to to be, for this discussions purposes I used a string[] which is simple. Btw, get out of here with that 1995 C stuff: * I was coding in C, in 1995 * Is experience now a **bad** thing?
Depends on what I'm building, but it usually takes me somewhere between an hour (simple, &lt; 100 lines) and a few days (multi-class, multiple dependencies, complicated build chain, etc.)
Generally, What about this Code is so bad? (I havnet read through it yet, on mobile) 
&gt; Still learning the ins and outs of C# and .NET &gt; COM Dear god... ---------------- If you're just sending email then it would probably be better to use the System.Net.Mail.SmtpClient: using( var smtp = new SmtpClient() ) { var to = new MailAddress( toAddress, toName ); var from = new MailAddress( fromAddress, fromName ); var email = new MailMessage( from, to ) { Subject = "...", Body = "...", IsBodyHtml = true | false, }; smtp.Send( email ); } All you have to do is set up your SMTP settings either on the SmtpClient object itself, or in the application .config: &lt;configuration&gt; &lt;system.net&gt; &lt;mailSettings&gt; &lt;smtp&gt; &lt;network host="192.168.0.1" port="25"/&gt; &lt;/smtp&gt; &lt;/mailSettings&gt; &lt;/system.net&gt; &lt;/configuration&gt;
CSV is not a standard file format at all. At this point it is simply an acronym to denote a file with fields that are separated by a separator character. There are parsers that help handle all the crazy corner cases you're going to encounter. And no, experience is not a bad thing, refusing to adopt the conventions of new languages and instead writing code like it's straight out of K&amp;R is. As for automatically going from the strings to the objects, again, libraries and frameworks make it much simpler than writing your own mapping code from a string array for every file type you need to parse. Before suggesting people to write their own CSV parsing code, or doing it yourself, maybe you should check out some of the amazing libraries out there that are fully object oriented and handle the breadth of CSV formats, because it doesn't seem like you've done that, whereas I, and others in this thread, have done the same thing you've had and been bitten in the arse.
I actually already implemented it using mail message. The application needs to send out mass emails, but its also easy enough to have it open outlook so that they can be edited if need be. Also why dear god? 
Well... That certainly sounds like an adventure. I'll do my best to ignore the programming voodoo.
If you are still learning .Net, a good question will be, what is the purpose of this class public class Foo { ~Foo() { Thread.SpinWait(int.MaxValue); } } The answer is trolling your friends, by implementing our own finalizer (not to be called a destructor, even if you come from C++ don't be naughty) we ask that the Garbage Collector will call that method when our class is collected, however we then block that thread with a pointless spin! Oh such fun, the reason I mention this, is because I've seen people do similar without realising it. COM interop is going to be hard, you are trying to make the un-managed object behave like it's a good managed object, this is why people get it wrong. If you are doing a lot of work with office automation, I'd recommend learning all about RCW/CCWs. The problem is, that is best done by learning about COM outside of .Net first. 
IIRC, you could also modify (or create your own) POCO entity to have a secondary integer ID field, ala "`int LogicalId`" and in your EF configuration set the primary key to non-clustered and set an index on the `LogicalId` with `IsClustered = true`. *disclaimer: haven't put this into practice yet*
Just keep in mind that it will be dependent on the PC to have Outlook installed. &gt; Also why dear god? Because COM Interop is hell, especially if you're still learning C#. It's one of those things that works well enough that you get comfortable with it, then it turns around and kicks you in the nuts.
How did the name come to place? If I'm not mistaken it's about butterflies :D Sounds like a good project :)
This is software for an Office and a limited number of people at that, so having outlook shouldn't be a problem (at least for the foreseeable future, though I probably won't worry too much about that). C# isn't too bad. I'm familiar with Java so at least I've got that going for me. I was working with automating some worksheets in Excell. At least that wasn't so terrible since What I needed to do was so straight forward.
Don't know how applicable it is, but for multi-threading objects you'd use a `lock` to only have one thread access it at a time. Maybe you can do something like that?
In this case, though, wouldn't it make more sense to dump the `string` / Guid as an ID, and just go with auto-incrementing `int`s? (Honest question - not sure how often fragmentation would become an issue for the typical use case here, and need more info)
I really don't know why the identity framework defaults to a string primary key/user identifier. Most people prefer integers as their primary keys, :(
That sounds like a lot of work. Good luck 🍀!
One of my favorite features in C#. Used correctly, you can make some lovely-to-read code.
Spot the Xamarin app? I've written both HTML5 and Xamarin apps (will never write another HTML5 mobile app again) and while spotting an HTML5 app is easier than swatting an elephant arm's length away, you cannot tell if an app is running on Dalvik or the Mono runtime from a user experience perspective alone. Especially while conforming to Android design guidelines. 
Just updated the repository with most of your suggested changes. Unless I'm mistaken, it actually seems to be running a bit faster.
One thing you should realize is that a lot of the samples and how-to's in the MSDN library are written by interns at Microsoft. While they work, they're not always best-practice. 
For the benefit of all what are the common tasks that a mod has to do? Typically how many hours did you spend moderating before the work change?
One solution is to only surface your mutatable data in one place. You could create a queue of messages that can be handled by one database insert worker. All your mutable data will only be modified by one worker/instance, but it can be surfaced by anyone. Check out the Repository Pattern, and the Producer-Consumer/Actor patterns. Unless you have very high throughput, or extremely real time data requirements, this could work for you.
Code could be much cleaner and you've got a lot of duplicated logic here. Also, why the hell is Backend an embedded resource as well as some Library?
I'm not sure what you're trying to achieve here. In optimistic locking scenarios (like you've described) one update has to be the loser. Inserts don't normally cause concurrency issues. A few suggestions anyway (if you haven't done these already): * A way to decide if you've got stale data is to use a timestamp (in SQL Server, not sure about other dbs) column on your database which will be unique per insert / update across the lifetime of the database. So you (or your ORM) should end up writing updates like UPDATE table SET column = newValue WHERE id = 1 AND Version = 0x00004454. 0 rows will be updated if you have stale data. * Maybe have a more selective caching strategy of only caching relative static data, and let the database handle more volatile data. 
- Bad names like *WindowsFormsApplication1*. - User files like *LoLUpdater.v12.suo* and *Backend.csproj.user* in repository. - Windows files like *Thumbs.db* in repository. - A readme file that says **nothing** except of a link to a homepage. - *.gitignore* only contains direct file names, instead of proper ignore paths like *obj/* or *bin/*. - Project name and folder name differ with *WindowsFormsApplication1* and *Frontend.csproj*. - Plenty of empty lines in a row, like 4 in *Frontend.cs* line 29, line 39, line 41 or line 64. - Using full qualified name instead of short one, even when the namespace is already included like in *Frontend.cs* line 50 and 55. - Using *IntPtr.Size* to differ between 32bit and 64bit, instead of using proper mechanics. Not even placing this into helper method or a property. - No empty lines, everything is just squashed all together - Methods that are way too long and do way too much. No single point of responsibility. - Many duplicate checks for *IntPtr.Size*, like **twice** alone in *Backend.cs, Form1_Load*. - Inconsistent naming, sometimes camel case sometimes pascal case. - Not using **const** when working with **constants**. - No proper indentation, chained called methods are on the same line as the initial call, like in *Backend.cs* line 108. - Sometimes using verbatim-strings for paths, sometimes not. - Not using `Path.Combine()` to combine paths. - Distributing files despite them having a license forbidding this. - Having **worthless** checkin comments like *sas*, *lll*, *dsss* or *ll*. - Not a single unit test. - *Backend* being a *GUI program*. All these mistakes are repeated over and over again. In short: He gives a shit about the quality of his program or his code.
I m not aware that those commands will bypass the EF cache. 
Agreed, I can't say how many times I wanted to extend xUnit's `Assert` class. Perhaps you might want to add your vote to [this uservoice item](http://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/2060313-c-support-static-extension-methods-like-f)?
Thanks! Bookmarked the uservoice item, will upvote it from time to time :)
I've been searching around, and apparently it's because Identity is an abstraction/middleware, so they don't explicitly cater to databases.. I still think it's weird that int is not the default, but at least you could rationalize using string in that context.
It's easier just to use `IIdentityUser&lt;int&gt;` and set your Id as int :P `IIdentityUser` is actually defined like this : public interface IIdentityUser : IIdentityUser&lt;string&gt; { string Id { get; set; } } (or something like that)
Nope. Thing about clustered indexes is that they are sorted and stored in physical order in the database. Each "range" of indices are put in the same page, when you skip a number a new page is allocated for the next range. If all new entries are dissimilar, each key will get its own page. This makes insertions, deletions and queries much less efficient. A simple "SELECT * FROM Foo WHERE BarId = 'someguid'" will cause the database to traverse the entire table just to get a single row, even if you have the key that is supposed to uniquely identity a row, because it still has to look through every page for it.
Thank you so much! I saw some of the basic errors here you where talking about. But not this much. Trying to learn about proper ways to deal with c# so this helps alot. Thank you :-)
All you ever post is self-promotion of mediocre libraries.
&gt; Looking for a current C# dev To clarify, are you specifically looking for someone who uses C# professionally, or just on a regular basis?
Can we get the auto-property initializers now please? Also please with INotifyPropertyChanged auto implemented.
I've thought about this as well. Sounds as a legit solution, although this will slow down our web platform quite significantly. And yes we do have a quite high throughput, but should be handleable by one application.
Thanks a lot! I plan on doing many more posts. Your examples are great. 
In this case, we are assuming that there is not an index on table Foo for BarId? Because that would require a table scan even if the data happened to be stored in order. Or are you saying it would do a table scan even if there *was* an index? That seems crazy, and I don't believe it. Even if the data isn't stored in the same order as the index, the index still exists. Looking up a single record by index is O(log(n)). I would believe that the constant coefficients might be worse, but a full table scan is O(n). In fact, there is a way to test this, which I will do later today. Make a table with 10 million guids in it. Benchmark times to lookup a single record repeatedly. Add an index. Repeat the benchmark. If it's really doing a full table scan the times should be about the same. I don't think they will be. **Edit**: I made two identical tables with a single `uniqueidentifier` column. In one table, that column was the primary key. I inserted two million records in each. Then I timed a lookup for one of the final records inserted in each table. Without the primary key (must use full table scan) it consistently takes about 90 milliseconds. With the primary key (you claim it's still doing a full table scan) I can't measure the time. It reports as 0 milliseconds. This seems fairly conclusive that there is no full table scan necessary for a key lookup on a primary key that's a guid. tl;dr a pk on a guid doesn't force a full table scan for lookups
You might actually be surprised at how fast a producer-consumer backed repository can process new information. The downside is that if it affects surfaced data immediately, users will feel some small amount of "lag" in terms of how fast that change is reflected in the UI.
Nice. Have you done any load test to see if it has any impact on scalability? When developing multithreading applications, we care of make things "chunky rather than chatty", so writing on a buffer and flushing all together probably has also its benefits, since there is no need of scheduling two "flush" operations. I would be great to see the balance of "with" and "without" under heavy load, and see if the rendering improvement is worth it. Cheers.
Does anyone know if you use an Asynchronous Controller if MVC is smart enough to flush when it goes into an await block? Could this be added?
Oh, I thought you wanted to test the posting functionality without having to submit for review. My apologies.
Good grief.
If you walk through the blog this library was based on some articles about improving perceived performance by the same author. Currently on mobile, but I'll dig the links up later. The same amount if threads are consumed, so throughput shouldn't be any different, the profile of the network io will be slightly different, but I'd be amazed if it was different enough for anyone to measure.
I don't believe it does - its not so trivial either because views are rendered later in the MVC pipeline - there isn't anything to flush while you're awaiting.
Agreed; this is pretty worthless.
I've been a developer for nearly 15 years. I love computers more than I love most people. I get computers, and they seem to get me. I have been tinkering with computers since the late 80s as a young child, writing my first program at just 6 years old. Wrote my first game at 11. I only just have an idea of what is happening here. Precision bug and all that. But by golly that is some serious computer nerd shit happening that I am 90% lost on.
TL;DR: The Round-Trip string format ("R") is outputting a different value when an assembly is built with x64 vs x86. This string, when parsed back into a double (or float) should be exactly the same as the input. on an x64 machine, it is not. The cause is undetermined as of writing.
80% of that would become clear by grokking IEEE 754. The rest by reading the SSCLI code.
See here: http://stackoverflow.com/questions/17723626/entity-framework-remove-vs-deleteobject Use `DeleteObject()`
Thanks for the reply. Another question (hope you do not mind), is it possible for me to throw an exception if the object I'm attempting to delete is referenced as a foreign key? I want to not allow this object to be deleted if that is the case. Only non-referenced objects should be able to be deleted.
You wouldn't want to throw an exception, you probably just want to check to see if the object is referenced before deleting it. IIRC deleteobject will throw if its removal results in a constraint violation.
Thanks again mate. After a few more searches using Google I came across this [article](http://stackoverflow.com/questions/13705441/how-to-disable-cascade-delete-for-link-tables-in-ef-code-first) Adding: modelBuilder.Conventions.Remove&lt;OneToManyCascadeDeleteConvention&gt;(); Will throw an exception if the attempted deleted object is being referenced.
They do not. Could it be added? I doubt it would make sense to flush upon an await. I've toyed with a "return yield new View()" syntax, which could work but feels a bit hacky.
davidwhitney is right, flushing early will not affect your threading model. However, David, the difference that flushing early can make can be dramatic, and not only measurable, but noticeable. There are instances though, on particularly lite pages, where it isn't really needed. Any page that queries a database, makes a backend service call, or does any heavy lifting is a great candidate for flushing early.
Now, can you make something that translates the code into music? :D
At least we can accurately represent all binary fractions in decimal :)
I guessing when you say "dramatic" you mean "the content above the portion of the page that requires significant dynamic data can be flushed and rendered to the client while expensive processing is still running". I agree that's dramatic perceived performance, but I'm guessing that time to last byte will be roughly the same, meaning "overall" performance will be roughly the same too - it'll feel faster to render everything, rather than actually being faster.
(also: good package - enjoyed the blogs a few months back)
The Codeplex pages all have big redirect to their own websites purchase now page. On some links a couple of generic promotional lines and then begging for donations. Is that even allowed?
Thanks! And thanks for submitting my post.
It will actually be faster because while the backend processing is occurring, and styles/scripts/images/assets referenced in the flushed HTML segment is being downloaded by the browser. You basically parallelize the work happening on the server, and the downloading and parsing of assets in the browser. 
one thing i like about the method syntax that you can't (afaik) do with the query syntax is to compose an expression. for example, say you have an admin-ish or reporting UI with a bunch of widgets for indicating filter criteria (this.foo == bar AND this.when &gt; yesterday), order criteria, etc. using the method syntax, you can build up a criteria object compositionally, by applying changes from each widget. there might be a good way to do this with the query syntax but i've never seen it.
dear god - if they're iterating the language by a full version number, i hope they're doing more than this.
Buggy code converts to trash, and beautiful code converts to awesome melodies. How to evaluate the code? Just listen it!
&gt; tl;dr a pk on a guid doesn't force a full table scan for lookups Newsequentialid lookup of arbitrary row (250 000 rows) : 00:00:00.3210178 Newid lookup of arbitrary row (250 000 rows) : 00:00:00:3957861 I had to take the first result, because after doing a couple of queries the execution time drops well below 2ms in both instances.. So seems you're right. The difference performance-wise of sequential and non-sequential ID's are apparently fairly negligable. The newid() produces more pages, but not as many more as I'd think (~1250 vs ~850).. I was under the impression that each random insertion would create a new page, but quite obviously that's not the case. Fragmentation was off the chart for NEWID() (99.04% vs 0.78%) but that was expected. I was running this on SQL Server Express by the way. Well, I guess it's good to know that fragmentation probably isn't that big of an issue.. I'd also like to see how using Guid compares to varchar, I'm guessing that's going to be a whole lot slower. I'm going to check that later.
I'd say erroneous code ... Buggy is subjective ;D Then you'd have a reason to hire audiophiles haha 
Actually, if you check [msdn](http://msdn.microsoft.com/en-us/library/dwhawy9k%28v=vs.110%29.aspx), it specifies: "When a Single or Double value is formatted using this specifier, it is first tested using the general format, with 15 digits of precision for a Double and 7 digits of precision for a Single."
Is there a way to get this digest emailed automatically? Unsure if I overlooked that option
http://en.m.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle EDIT: without looking at your code I assumed you meant "shuffle" when you said "jumble". But it looks like your code simply just replaces characters except for space characters with a random character from your a-z char array. with that in mind what I would do is: * put the entire string into a char array * for each element in the char array: * if the character is not a space character, replace that element with a random character from your approved list of characters. * return the entire char array as a string But you have to ask yourself, what are you trying to accomplish here? you talk about it being a code translator; if that is the case, shouldn't the same input always return the same output? EDIT2: basically what elberto said, as far as writing it. But you have to ask yourself the way you want this to actually behave, because it seems to me you don't want "Jumble" to do what "jumble" is actually doing. 
I can only agrre, this must be some of the worst formatted code I've ever seen, and some of the worst optimized and worst written code ever. Look in the file "Backend.cs" to see for yourself.
Algo aside (as mentioned, look at Fisher Yates) you are dong something .Net hates. Strings in .Net are special, they don't go on the same bus as the other kids. They are reference types, but they are also immutable. Immutable just means it can not be modified or changed, programming really improves ones lexicon unlike those lazy arts students.... Anyway, this means if you've got a string, and you are adding one letter to it, you have to create a whole new string, and throw away the old one. I wrote this quickly for you: https://dotnetfiddle.net/979cfD If you look at how bad the memory usage of a string concat is (the += operator is doing a concat), the performance is so poor too, that we can do over 10 times the work in a StringBuilder whilst being faster. Have a play with those for loop repeat count numbers, see how easy it is to hit the memory limit with the concat one too. Bonus Point Time!!! Using big O notation, what is the big O of the string concat vs the stringbuilder, winner gets a beer, assuming they can buy themselves one.
By C# what do you mean? A web application written in C# and Razor ala MVC? A winforms application written in C#? A silverlight application written in C#? A WPF application written in C#? I'm going to assume WPF, which may or may not be helpful to you but anyway: http://msdn.microsoft.com/en-us/library/hh750210.aspx Remember, C# is a language, not a framework.
&gt; Did you take a look at his code? He does not concatenate strings, he works on a char array. string y = null; // snip y += o.ToString(); // snip y += " "; Pretty sure that's string concatenation. Looks like he tries to build things word by word using a char array, but then concatenates strings character-by-character anyway. 'CharArray' never actually gets read from.
Oh, apparently I did not look correctly. Thank you for this correction. :-) But still his solution is running faster than the one from TheAnimus.
Thank you very much
Line 53. What in my post angered you to deserve such a cuntish response? edit: also just to show, using SB is still faster, even if you call ToString(), this fiddle does 100 string builders in half the time it does 10 string concats https://dotnetfiddle.net/IffJjp
Guys, guys.... OK, so this has got a little heated, but I strongly agree with /u/AngularBeginner 's solution. Always use a nice short LINQ statement if by doing so you can avoid many, error-prone lines of code.
My configuration is fine. Actually, the data you see is not garbage exactly. I am sending a raw data from a JPG file over the serial port at that point in the program. The purpose of this function is to discard the rest of the file until I see a *root@(none)* prompt
true, but based on his Alphabet List, I assumed that's all he cared about.
The biggest collection of videos - http://www.youtube.com/results?search_query=mvvm+c%23
I'm not familiar with Ports.DaViniciPort. Have you looked into using the System.IO.Ports.SerialPort class? I have used it extensively communicating with measurement devices and haven't run into any issues. I assume the Ports.DaVinciPort.ReadExisting() is converting the raw data to a string for you? 
Unfortunately, your best option by far is to switch to Java. Your second best option would probably be Xamarin, and in third place probably [dot42](http://www.dot42.com/) which is still in beta. Here's a question on StackOverflow that has decent answers: [Develop Android app using C#](http://stackoverflow.com/questions/10962104/develop-android-app-using-c-sharp)
Xamarin's great. You lose a little bit with the Xamarin android designer. But the runtime is solid and documentation is excellent. You'll almost certainly have to buy the Indie license though if you have any third party libraries. ($299)
any good suggestions for this with no libraries and able to process anything from 100 lines of unquoted csv data to 50,000
Also, just an FYI, here are 2 tools that I find invaluable when trying to develop serial port communication code. First one is free, second cost a little, but it's a great tool to monitor the communications between your code and your device, especially if the communication is bi-directional. http://www.microridge.com/comtestserial.htm http://www.eltima.com/products/serial-port-monitor 
Xamarin can be used as a fairly simple port with a bit of work. the UI redesign is annoying but nothing to worry about. I've been using the free version, but if you know you can make up the cost of the license, the VS addon is worth it.
Backspace and delete are ASCII character codes (0x08 and 0x80 respectively IIRC). It's up to the output device how they are handled. It's likely these values are showing up in the stream. There are other non-printable characters that the console might be doing funny things with too. It's generally a bad idea to dump raw binary data out as character data for this reason.
I'd recommend learning Java anyway. The languages aren't that far off from each other and you'll be able to develop better Android applications anyway. I use Java for Android, but by far prefer C# for Windows development. Knowing one does not mean you can't learn/know the other. 
Read each line into a string (say using [`StringBuilder`](http://msdn.microsoft.com/en-us/library/system.text.stringbuilder.aspx)), then write it to your file using [`File.WriteAllText`](http://msdn.microsoft.com/en-us/library/ms143375%28v=vs.110%29.aspx). Also, you can read in all the lines of your csv file using [`File.ReadAllLines`](http://msdn.microsoft.com/en-us/library/s2tte0y1.aspx) (if you do so, you can use [`File.WriteAllLines`](http://msdn.microsoft.com/en-us/library/92e05ft3%28v=vs.110%29.aspx) instead of `File.WriteAllText`) You can do it more low-level using StreamWriters, but given the issues you're having here, I'd suggest keeping it simple and use the utility methods provided by the [`File`](http://msdn.microsoft.com/en-us/library/system.io.file%28v=vs.110%29.aspx) class whenever possible. Only start going low-level if you intend to _learn_ about how stream reading/writing works or if you have _measurable_ performance issues.
Thank you. Help me out a bit I'm a entry level c# dev but really never had to deal with streams and writing to files as much as I in school built asp.net web forms and win apps, so when using stringbuilder what are the general steps to incorporating that with a stream reader ? 
Console is the same as a writer, so just replace Console.WriteLine with another StreamWriter's WriteLine. You can also copy Streams with [Stream.CopyTo\(Stream\)](http://msdn.microsoft.com/en-us/library/dd782932(v=vs.110\).aspx) But since all you want to do is copy a file, just use File.Copy.
There is an option to sign to RSS feed (with other posts) - http://chodounsky.net/feed/ Do you think an email might be a better option? (it isn't currently available, but I'm thinking about this more and more)
Here is a .gitignore for VS projects: https://github.com/github/gitignore/blob/master/VisualStudio.gitignore
Note: if you do ReadAllLines on a 4GB file, you're going to have a bad time.
It's about 5mb
That's nothing. Feel free to use the `File` methods.
Yes would prefer an email option but RSS is good enough. 
This seems like the best answer by far.
Building up to something larger here, actually what I'd like to do is output information from the csv to another csv with specific information.
Unless "Update(item)" takes a long time you may not see the "updating..." message at all. I'd set up a breakpoint at the Update() line and check lbl_info.Text's value.
Update(item) doesn't take too long at all. It does change. If I add a MessageBox.Show("") just before Update(item) it changes.
If you're building up to something larger, then it's all the more reason to keep it simple. Get it _working_ first with simple, maintainable, refactorable code. Then _afterward_ look for noticeable and measurable bottlenecks. Otherwise you may suffer from [premature optimization](http://en.wikipedia.org/wiki/Premature_optimization#When_to_optimize).
~~He wants~~ They want an introduction to C# for programmers. While this is an excellent book, I would say that it's targeted at people who already know C# at an intermediate level.
Pro C# 5 and the .NET 4.5 Environment
What happens if your read "root" in the first ReadExisting() and then "@(none)" in the second? If you are going to read binary data mixed with text from the port, you should read all of it into a byte[] buffer, and then decode the specific string parts after you figure out where they are in the buffer. Not all binary data has a valid decoding to a character in a particular encoding, control characters can do weird things to how the string looks, especially on the windows console. There are many ways treading arbitrary data as strings can go wrong.
[CLR via C#](http://www.amazon.com/CLR-via-Edition-Developer-Reference/dp/0735667454)
From an MVC perspective this is to indicate that a view is partial. This is more of a visual cue for you the developer
~~right book, wrong time~~ great book, do it * edit: read the title wrong
Yes, you're sending raw bytes to the console. That means it will interpret them according to ASCII -- all those control characters (&lt; 0x20) are likely causing the strange behavior you're seeing. Write a helper routine that accepts a byte array, loops through the array, writing the hex value to a stringbuilder. foreach(var b in myArray) { sb.AppendFormat("{0:X2} ", b); } return sb.ToString(); 
&gt;you'll be able to develop better Android applications anyway. Explain...?
I've been reading [Learning C# 3.0](http://www.amazon.com/Learning-C-3-0-Jesse-Liberty/dp/0596521065/) and it has been a solid introduction to C#. I am coming to it with experience from other languages and find this to be a very straightforward book that does not go to deep addressing basic programming concepts or anything. It is a older book, but I have been in love with the Learning &lt;whatever&gt; O'Reilly book format after I read the Learning Perl book... I just think they are great. Unfortunately 3.0 is the most recent version of Learning C#, but everything seems to still apply to the current version.
Touché
This book is pretty good, I used an older version of it many years ago (Pro C# 3.5 and the .NET 3.5 Framework) and found it great. A good reference for people that already have programming skills. 
Can you elaborate the 'wrong time?'. I've seen this book recommended frequently but haven't read it.
It's not, this guy has no idea what he's talking about. It's always good to know what C# is doing under the hood.
It is a great book but not what I would recommend to a beginner but as o5mfiHTNsH748KVq says I have no idea what I am talking about.
this is a good idea, but could have a better name. what he's getting at is sort of implied by things like onion architecture / ports and adapters architecture, i.e.: * use abstractions (i.e. separate the 'what are we doing?' from the 'how are we doing it right now?') * name your abstractions well (i.e. indicate the purpose clearly) * put your infrastructure somewhere else (and inject it/attach it/apply it as an aspect) so for example in .NET you might have a solution that looks like: * domain model (the objects that you could meaningfully discuss with product owners, UX people, etc), which depend on * service interfaces, which are implemented by * service implementations / infrastructure this way, when someone comes into your code, they can immediately find the 'what is this all about?'-code and ignore the 'oh i see you're doing this with XYZ technology'-code.
And it indicates that the file can't be accessed directly. All other can.
Googling on this subject gave me the following Q&amp;A on Stackoverflow: http://stackoverflow.com/questions/4576548/why-does-razor-layout-cshtml-have-a-leading-underscore-in-file-name So there's reason for it, but kept in MVC for convention.
_Touché
I liked [C# 4.0 Unleashed](http://www.amazon.com/4-0-Unleashed-Bart-De-Smet/dp/0672330792/) a lot. It is a bit lengthy but at the time I was reading it I felt it was organised in such a way I could skip the chapters I already knew or just read the chapters I needed to learn right away 
This sounds like a basic threading issue. If you call the update code on the main UI thread (that is, you don't specifically do it in a different thread), the UI will not be redrawn because the thread is busy with the updates. So you keep changing the Text property, but the interface is only redrawn after the entire method has been executed and only the final value ("List has been updated.") will be visible. When you add the `MessageBox.Show()` call, the execution is halted until the message box is closed, and the UI gets a chance to update in between. The solution is of course to do the updating in another thread, as you suspected. Though your post isn't entirely clear on this point, so we need to clarify what exactly you mean by updating. Do you get all the information on all persons in one request from the website and the `Update()` method only changes the column text in the ListView, or do you make an individual request for each person in each `Update()` call? If it's the former, then the individual "Updating: ..." message will be pointless, because just changing the text in the ListView will be very fast and has to be done on the UI thread anyway. &gt;I've tried using BeginInvoke: BeginInvoke(new Action(() =&gt; lbl_info.Text = "Updating: " + item.SubItems[0].Text)); What this does is instruct the main thread to execute that action the next time it's not busy. If you do the updating from the main thread, that won't work because of course you're blocking the thread yourself and all the actions have to wait to be executed until *after* your update loop has run through. 
Coming in late, but want to add that [Step by Step: Microsoft C# 2013](http://www.amazon.com/Microsoft-Visual-2013-Step-Developer/dp/073568183X/ref=sr_1_2?s=books&amp;ie=UTF8&amp;qid=1403780105&amp;sr=1-2&amp;keywords=C%23) by John Sharp is my recommendation for you. Like you, my .Net experience is with VB.Net and so I'd went out looking for a book exactly like you describe. This book blends follow-along examples with concise theory and got me up and running in C# in short order.
Android is written in Java or some JVM if my foggy old beanpan remembers correctly. To be able to code in C# and produce Android binaries (DEX), we need a C# -&gt; Android compiler, or a mono runtime engine. To be able to code in Java and produce binaries, that work has been done already with ADT by Google. 
Thank you for the help:) now onto working on picking out specific information to write.
Android programming is done in Java. If you want to use C# you'd need a translator, or a C# to Java Byte code compiler. Those sorts of things end up changing your code and many times don't have support for many of the advanced features of the source language. To produce high quality Android applications, it makes sense to do it in language that the SDK supports. 
Can you explain why that is, with actual examples?
That's not how it works. Android programming is done in whatever language you want. It just happens that Google decided to provide tools for Java, but there's nothing to stop people using any language they like providing there is a compiler capable of producing an ARM executable. Android is an OS built around a Linux kernel. Implementation languages are irrelevant. You may as well say "Windows programming is done in C#". But what about Visual Basic? What about C++? What about any language that is able to be compiled for x86 or has a runtime that supports it? &gt;Those sorts of things end up changing your code and many times don't have support for many of the advanced features of the source language Given that you've just said there are "many", tell me an *advanced feature of the source language* that is supported in Java and not Xamarin/C#.
I work with Xamarin on a daily basis developing iOS apps (Very similar experience to devewloping Android apps in this framework) and enjoy it thoroughly. I've also done Android app development in Java and would be happy to do either. The main down side to Xamarin is the cost, which as an independant developer would be a major factor.
The _ is a valid part of an identifier. If _ is the first character it must be followed by another valid character for an identifier. I often use it to indicate private member/variable of an object. 
Depending on OPs level of experience and learning style, you may or may not be correct. When learning a new language, I find hopping into the deep end is a great second step after "Hello World". Programming languages all have a lot in common so the differences among them usually end up on the Intermediate to Advanced side of the spectrum. 
You're right. I very much over-simplified. The official SDK supports Java, that was my point. New features will get into the official SDK well before they get into the tools that support other languages. As for examples of what isn't supported, I can't tell you. I was speaking in general of some porting tools. It's common that not everything is supported, at least not immediately and sometimes never. My mistake if I lost my point in my simplification and made it seem like Android could only be programmed in Java. That's not true at all. In fact, Android has an SDK for Android that supports C++ programming. I was just trying to point out that it may be worth OP's time to learn some Java anyway as you'll get newer API features sooner than waiting for a toolkit that supports C# to have them. 
Android hasn't had any major API releases for a while (although that seems to be about to change with the announcements at Google I/O). The only current relevant example therefore right now is iOS which is expecting a big update soon with iOS 8. The APIs aren't yet out of beta on the Apple side, and yet they're already supported in Xamarin, including all the biggies like HomeKit, SceneKit and others. In fact if you go to the Xamarin official blog right now, they even have a pretty decent tutorial on SceneKit at the top of the page. http://blog.xamarin.com/ Additionally they have had day one support for all iOS APIs since (I believe) iOS 5. The idea that a lot of features never get supported or come very late is simply an outdated view. I totally get that you're trying to give useful advice, and I respect that, but I think probably you need to take a closer look at where Xamarin is these days. It's a very impressive technology.
Thanks for the recommendation - I've been getting really into pluralsight lately.
I will then. I've been using C# for some stuff and Java for others for so long that I never really had a reason to look into toolkits for C# for Android development. 
I strongly recommend it. Android dev with all the native libraries you're used to, plus the whole of the .net base class library, Async-Await for easy multi-threading, and LINQ. What's not to like, eh? And you can re-use 50-70% of your code on iOS and WinPhone as well. Apart from the cost, it's becoming harder and harder to see a good reason *not* to use it these days. 
Lol great edit
I agree with others that there must be hex 0x08 and/or 0x80 being sent from your stream. Since you dump the stream data as a text, it is erasing your printed "two" sometimes. Have you tried reading all of the data and then printing it out only once? you could sleep the thread after the read finish to make sure the "One" "Two" are printed correctly and then look to see if they get erased after you print the data to the screen. On a side note, I don't think your SendEnter function is doing what you think it is. If you want to send the enter key over the serial port, you'll want to do this: Ports.DaVinciPort.WriteLine("\r");
"Functional programming in C#" by Oliver Sturm is absolutely brilliant
Very nice. I was thinking about incorporating ILMerge (or similar) to merge the modules (already reaching 100+) for my current application but this looks way easier. ^Lets ^hope ^it ^works.
Yes, it means this. Also, it does not support portable assemblies. Also, this will increase the memory usage of your program. You'll load each added assembly double (first it'll increase the size of your application, second you still have to load the assembly).
ILMerge is still the better option. With the method described here you'd just have the assembly twice in your memory.
True, though that only makes a few MB more. But afaik ILMerge still has trouble with XAML, so any dll that contains XAML can still not be merged properly (and I am hoping that this Assembly Embedder can properly handle that).
Pentaho
Not sure what the XAML problem is caused by. This "Assembly Embedder" simply adds the second assembly as an embedded resource to your main assembly, and then adds an http://msdn.microsoft.com/en-us/library/system.appdomain.assemblyresolve(v=vs.110).aspx AssemblyResolve event in which case the embedded assembly will be written to disk and then loaded.
Site's being blocked at my workplace: &gt; High Risk Website Blocked &gt; Location: vitevic.com/assembly_embedder.html &gt; Access has been blocked as the threat Mal/HTMLGen-A has been found on this website. &gt; Return to the page you were previously viewing. &gt; &gt; sophos web protection
No, managed assembly will be never written to disk. It's loaded directly from memory.
My bad. It will still be loaded twice.
Thanks guys, I understand now. I mistakenly assumed that the string object converted non-printable characters to question marks since that's what appeared in the console. This actually explains a few other bugs in my program
Thank you for report, this is Sophos web filter false positive. I will send this to Sophos support team. You can see the tool at http://visualstudiogallery.msdn.microsoft.com/a7196a81-67fc-4a26-a88a-b68ef31c2266
DaVinciPort actually is the System.IO.Ports.SerialPort class. I wrapped it up in a static class And thanks for the tools. I'll keep these in mind if I find a need for them
Assembly will be fully loaded only once: when types from the assembly is used. And, yes, you are totally right - main assembly size will be increased (because of new resources). But this resources sections usually stays in paged-pool memory. So if you will profile an application with embedded assembly you will see that virtual memory overhead is minimal. Try it out :)
NGEN knows nothing about embedded dlls. And you can not embed already ngened assembly - this VAE version uses Assembly.Load(...) so such assemblies will not be loaded. You can post feature request on http://visualstudiogallery.msdn.microsoft.com/879d8f7a-88c8-4f96-a8f3-5325fe9dc8e2 theoretically it is possible to load native dll's or ngened assemblies (if at first write them to disk). Or take a look at https://github.com/Fody/Costura - no Visual Studio integration, but more features.
I don't use MVC or anything like that, I'm an XNA developer. But what I use it for is getters and setters, for example when you need to do something everytime a value is set, just make "_Name" private variable and a public "Name" getter/setter. That way you know that _Name isn't a normal variable but one that shouldn't be referenced arbitrarily.
This + the cost of bug fixing, maintenance, adding new features over time, training, documentation, etc. As opposed to off-the-shelf with documentation, with regular upgrades, etc. 
Further, whatever your estimate for fixing it assumes dedicated time. So, you have to factor that up for things like employee turnover, new projects, old maintenance, etc.
Thanks for posting this, this saved our proverbial asses..!!!
Does each employee (or customer) have a unique ID that your company uses that would be known to each individual? (Employee ID, account number etc.) You could easily have them type this into a field on your form along with other contact info (phone number, email?). That would give you a reference of who submitted the item for each request if you needed it...and having two pieces of info would help with potential fat fingering. You could help the user save time by storing those values in a cookie after the first submit so they would be auto-populated next time. There are security concerns at play here though. Personally identifiable information (phone number, address, accountID etc.) sent across the wire in clear text (http) is a bad idea, less so if its only internal but it sounds like this will be publicly exposed. Make sure its published to a secure site (https). Note: having a U/P system would not circumvent the security transmission concerns. 
This is really cool! In the "supports two types of reference" part there's a few inconsistencies, like it being "referenses" in the second one. :)
By far, the simplest solution would be an implementation of the SimpleMembershipProvider. You can have authentication (user/password) and authorization (roles, permissions levels) up and running within an hour or two. http://www.asp.net/web-pages/tutorials/security/16-adding-security-and-membership
You are close enough except for the namespace. A namespace is like a file cabinet where you keep all related blueprints (classes). It provides nothing more than organization.
&gt; It's still good advice, as you say, to have good, well named meaningful abstractions distinct from infrastructure, but that doesn't give your code topology actual meaning or obviousness. i can't imagine any sense in which this is true - can you provide an example? from the linked article: &gt; The reason that good architectures are centered around use-cases is so that architects can safely describe the structures that support those use-cases without committing to frameworks, tools, and environment. this is precisely what onion architecture / ports and adapters architecture are about: design what your application does in some core domain area, and inject the details at composition time. this idea of a "core domain area" is, i think, the only place you could ever look in any architecture to find out what it's about (as opposed to the details of how it is being carried out). there is simply no way to not have code that is about IO, networking, database adaptation, caching, logging, frameworks, etc (unless you use no IO, networking, databases, etc). being able to separate the what from the how is the only way that you can accentuate the what-ness in your architecture. (i'm curious if you agree here.) your idea of a features-based organization is interesting, but i worry that it would not scale well as features grow into the hundreds; or given that a domain concept may have many features (your products list supports sorting, filtering, searching...) and/or a feature may apply to many domain concepts (authorization, billing, performance). would you envision a /product-list-allows-sorting directory and a /billing-when-doing-this-or-something-else directory?
Ah ok. Thank you for the clarification. So to make sure I better undestand it, classes are like the blueprints you use to build a house, variables are the toolbox, and methods are the tools you use. Finally namespaces are the giant file cabinet where you store the blueprints and the toolbox in. Is that more accurate? 
I'll do my best. It's not really the best analogy but if I had to go with it: Variables are materials, methods are tools, classes are a parts order list, objects are an actual crate full of those parts (materials and tools). Variable - a spot to hold a material such as a bin for screws, or a hook for hanging a hammer. You can take the material from the spot, replace it with another one, etc. It is just a place to put it. Method - a single action that you can do. The act of swinging a hammer at a target would be a method called Swing(target). Class - a plan or list of materials and tools that are needed to do a single type of job, and rules about who is allowed to use what. This is not the actual materials themselves, just a list of what they are and where to get them. Object - a crate of materials and tools that matches the Class. You can in fact only see certain tools and things (methods, variables) from this crate, as dictated by the responsibilities listed (in the class). The rest of the tools in the box are hidden from you (private variables and methods), and you know this but you aren't concerned because you can do everything you need to do with what you can see. ~~A namespace would be like the name of the draftsman or organization who drew up the plan / list of materials. If the class was a list of parts for building a desk, it lets you know that this is an Ikea desk and not a desk from somewhere else.~~ Edit: I don't really like my namespace definition because I've convinced myself of some flaws in it, so I'll cross it out.
Yep.
Windows application or ASP.Net page? Sensitive information? - **Really** important because there's a lot of wrong stuff you can do. Intranet? Internet? VPN?
It may cause address space exhaustion on 32bit processes which load many assemblies or have high memory usage. Pages in PE files are always reserved. 
btw, your explanation of object, are you referring to what's otherwise known as scope? Just curious.
arrays are a (simple) type of collection. Collections are buckets to store multiple objects that have similar purpose. Sticking with your construction examples, you might have a Class called Lumber. You app is trying to help track the materials available at a job site so the foreman can ensure guys are not going to stand around waiting for materials. Lumber has properties like length, width, thickness and type (pine, cedar, etc). Each instance of Lumber would be a piece of wood that has been delivered to the site and is available for building. You want to track all the lumber so you would place all the instances of Lumber in a collection. New deliveries add to the collection and as wood is used for building it is removed from the collection. Aswering your question, yes, arrays can be like spreadsheets. Arrays have dimension (often they are just 1) but a 2 dimensional array is how to represent a spreadsheet in a programming language. The first dimension are the rows, 2nd dimension are the columns. In excel you might say Cell A2 + Cell B2 = Cell C2. That would translate into the code spreadhseetArray[0][1] + spreadsheetArray[1][1] = spreadsheetArray[2][1]. Note the index value being 1 lower since in C# (like most programming languages) starts at index 0. That's the super simple way to do spreadhseets but in reality you would use a much more advanced collection since you would run of of memory. Arrays use memory for each object they can store, regardless if anything is stored there or not. Old excel has 65,000 row limit so the array would have been something like: sheet[65000][650000] excel tracks things like like font, colour and other properties so that would use ram of sizeof(cell) * 65000 *65000. That adds up really, really fast. A better collection for a spreadsheet would let you use the same indexing to get the data into and out of the cells but would only take space as needed by what you actually store. Not all spreadsheets use 65,000 rows. Some only use 10. Bring on the ArrayList (http://msdn.microsoft.com/en-us/library/system.collections.arraylist(v=vs.110).aspx). It has an initial size and has a method Add to append more items to the collection.
This might come across as a bit harsh, but it's genuinely not intended to be. I really think you're much better off just forgetting construction and roofing, and simply learning what namespaces, classes, objects, variables, types etc. are and how they work in and of themselves. People come from all kinds of backgrounds and become software developers, but I've never heard of someone having to think of everything in terms of their previous or existing career. You might be able to refer to something as a blueprint or a toolbox, but I think that carries with it a tremendous danger of grossly over simplifying things to a mickey mouse level and ignoring the relevance of each term to computer programming. At the end of the day, you're either bright enough to grasp the concepts as they are, or you're probably going to struggle for an eternity with programming. If I were you, I'd buy a good beginner's book on C# and perhaps one on object orientation too. Alternatively, take out a free trial to Lynda.com or Pluralsight and work through some videos. I know the Lynda one on Object Oriented Design Principles is pretty simple and easy to follow and will lay out most of what you need to know. I think they might use Java, but almost all the concepts will be near identical in C#.
Additionally, the term that you would use to describe what I'm talking about with private/internals being hidden in an object/class is called "encapsulation". Scope sort of controls what you have access to as well, but in a different way than that example.
For the record, even though I gave a response with the construction analogy approach, I totally agree with this answer. I also have had great success with Pluralsight, but I was already quite familiar with programming at the point where I started that.
I'll add that you can think of an array as a bunch of things side by side. In the simplest example, if you want the most trivial (but certainly not the best, for all practices and purposes) structure that can hold 5 objects of type Lumber, that would be Lumber[] lumberArray = new Lumber[5]; This is roughly equivalent to saying: Lumber lumber1; Lumber lumber2; Lumber lumber3; Lumber lumber4; Lumber lumber5; You could access the first element of that with **lumber1**, the second with **lumber2**. Likewise, you can access the first element of that array above with **lumberArray[0]**, and the second with **lumberArray[1]**. The example with the array is a lot more concise than listing out all those variables like in the second example. Most of the time you will not work with an array like I have shown there, because there are a lot of advantages to using other collections such as automatic resizing, speed and ease of use with entry, shifting, removal, searching, etc.
Why store neighbor pointers when they're so easy to calculate? This is the kind of thing properties are great for, the value is always up to date and only calculated when needed! Your 9-way switch can definitely be simplified, just take a look if there's a relation between the 4 values you set, and w and h. You won't even need it with properties, but you should figure it out before you throw it away. The validation can also be simplified a lot, you already know the % operator, and that's all you need to be able to switch between an item's (x,y) coordinate from it's linear index. 
If you can spring a few bucks (and its not many) pluralsight has many many many awesome tutorials on everything a developer could possibly want.
You can find plenty of beginner tutorials here: http://www.asp.net/mvc
&gt;If I were you, I'd buy a good beginner's book on C# and perhaps one on object orientation . I agree with everything he said but i've to emphasize this part more. 1) internet is great and all but books are constructed, complete and progressive guides. 2) C# and OOP are two different things and you'd better learn which concept comes from which one. You'll have easier time finding help for this concept and, the day you try another OOP language, you'll get it faster. 
At the moment, with as much of a struggle as it was to get the neighbor pointers working properly, that's not something I'm looking to change right now. That would essentially require a restructure of the entire back end. My goal at this point is to focus on getting the search algorithm in place so that it can solve itself. After I've figured out how to do that, then I'll see about going back and looking at what I can improve on or remove entirely. The only thing I'd be looking to improve right now is the validation function since it's more or less sloppy code that hacks at it's job.
I would also check out these sites for some good samples and source code: https://aspnet.codeplex.com/SourceControl/latest https://github.com/aspnet/Mvc https://github.com/aspnet Also, after you get going, I would recommend reading up on whats going on with the vNext and project Katana stuff to get an idea of the direction that the asp.net and MVC platforms are heading. *edit: These blogs have some good tutorials on how to do various things in asp.net: http://www.khalidabuhakmeh.com/ http://brockallen.com/ http://odetocode.com/
It'd tremendously help if you could tell us what you are using/doing to render the graphs. :)
I mostly agree with this answer, so I'm replying to it. However, I'll try to give a bit of an explanation as well. First, realize that in programming there are really only two things: variables and functions. That's it. Variables represent the state of something (ex. Height = 6; ). And functions perform operations on change the state of those variables (ex. Grow() { Height += 1; } ) OOP concepts (classes, interfaces, derived classes, namespaces, etc) are just ways to organize those two things better. For example, you might have a class House. That class would hold all of the variables (state) for each house. That way, if you were working on 2 houses, instead of defining variables like: &gt; int HouseOnMainSquareFeet = 1200; &gt; int HouseOn2ndSquareFeet = 1500; &gt; int HouseOnMainNumBedrooms = 3; &gt; int HouseOn2ndNumBedrooms = 4; You could do this instead: &gt; House HouseOnMain = new House(); &gt; HouseOnMain.SquareFeet = 1200; &gt; HouseOnMain.NumBedrooms = 3; &gt; House HouseOn2nd = new House(); &gt; HouseOn2nd.SquareFeet = 1500; &gt; HouseOn2nd.NumBedrooms = 4; The difference is that in the second example, all of the properties for each house are packaged up into a House class. This makes things easier because you can just pass a House to a function and it can access all of that variables for that house. Namespaces are like folders on your computer. You could just dump everything in your root C:\ drive. Or, you could make a Music folder, a Videos folder, a Programs folder, etc. Same thing with Namespaces. Following your construction theme, you might have a Plumbing namespace, that contains a Plumber class, a Pipe class, etc. and a Landscaping namespace that contains a Yard class, and so on. Hope that helps!
http://www.pluralsight.com/training/Courses/TableOfContents/dotnet-csharp-tutorial
You can roll an MVP implementation for WinForms. WPF is usually MVVM.
You can shoehorn WinForms into an MVC style, it just takes a bit more forethought and design.
If i remeber correctly. Facebook uses XMP protocol. Just find the C# XMP client.
That makes sense, thanks for explaining that to me. The update function gets information on a single person, then updates that specific row in the ListView. eg: Update("John"); It receives text back based on the name, so all the information for John will be sent back. Then the listview gets updated
I agree with Saiing: skip these analogies, they hurt more than they help. A Namespace is not a "blueprint type" it is a collection of top level entities (usually classes, interfaces and/or other namespaces). A class is a collection of behaviors. Methods are those behaviors. Variables are where you store data needed for the behaviors. A lot of these things don't have good "real world" analogies because they operate on a different set of constraints. Take a deck of 52 cards. Shuffle them up. Now I want you to sort them. Now go look at all the algorithms that exist for sorting. New ones still get invented every now and then. But just doing it by hand, we probably almost all do it the exact same way because we're not constrained by "memory", "registers" or any of that stuff. I would also strongly suggest doing other C# programming before starting with Unity 3d. To do anything in Unity you either have to use their predefined "event" functions (which behave strangely and do not act like standard C#) or their abuse of enumerations.
Well, I have used Facebook C# SDK so far. So if I use XMP in C#, I'll have to rewrite my app from the beginning. In order to update the status of a user, I need the "publish" permission. And to do that, I need to submit my app for review to Facebook. And to do that, I need to add a platform for my app. The problem is that only Windows 8 Store apps are supported. My app is mainly for Windows 7 
[Try checking this out](http://stackoverflow.com/questions/2058210/update-facebook-status-with-c-sharp)
Polymorphism = Peeing in your toolbox then falling off the roof. Wait, I'm not sure I understand roofing.
It doesn't seem to work with Visual Basic projects... Is there something particular that needs to be done?
Do some things with the things.
I think I see what your problem is: (That is, I'm on the same screen. I don't actually have a solution.) http://imgur.com/bnflGVK When you select the Windows App option, it wants a Windows Store ID, which you don't have. Have you considered telling facebook that your app is a Website instead? That might work on getting you further into the process.
As you can see, there is the option for a website there. But I don't see how that will get me further If you want to go further with 'crazy' ideas, I got plenty of them: I could build a website version of the app and then use that, and once the app is approved the permissions, I can make the website disappear lol and use the app then. But this is such a small app. It's not worth all that effort
http://lmgtfy.com/?q=asp.net+mvc+tutorials
Close-ish-ious. * Namespace: A collection of classes. Hopefully the classes are similar in their purpose, but not necessarily. * Classes: A logical grouping of information to represent a thing. You might have a "Person" class with height/weight/name, or you might have a "House" class with square footage, number of floors, address, etc. * Objects: Classes with their detailed information set. * Variables: Data that is currently in use. * Methods: A set of instructions.
sorry! shit i just realized what i posted, must be the coffee or something. i've updated the question *blush*
 var line = whatever.ReadLine(); line = line.Replace("\t", ""); ParseTheLineWithYourOwnMethod( line );
Link to some code? If you're not splitting on tab in the first place, it should come out as its own word.
If you are a student register to dreamspark and get 3 months free pluralsight code. After that you can start with this cource : http://pluralsight.com/training/courses/TableOfContents?courseName=aspdotnet-mvc5-fundamentals If you don't know C# there are quite well cources out there. Like this is what i would recommend to new C# .net learners : http://pluralsight.com/training/courses/TableOfContents?courseName=aspdotnet-mvc5-fundamentals 
I'm assuming this is some kind of tabular data. Would highly recommend that you check out something like [CSVHelper](https://github.com/JoshClose/CsvHelper) instead of trying to write your own parsing code for tabular data.
I was going to post a similar question to yours but you did that for me :) Anyone have any books they'd recommend on the subject?
When using classic MVC patterns in WinForms the 'controller' is code-behind and the 'view' is the form and the controls on top of it. Note: In classic MVC, the views and controlers are always tightly coupled pairs. Only the models are shared. I guess you could do the same in WPF if you don't use data-binding. But I don't know anyone who works that way.
My favorite http://mvcmusicstore.codeplex.com/
Thank you for your honest answer. It's not so much I'm attached to my previous career, but I personally know how I learn best, and analogies help me the best. I simply chose construction for the sake of simplicity.
As far as I know currently it's for C# only.
Still wayyyyyy too expensive.
Another option is RemObjects C# which allows you to use Java libraries from C# and the RemObjects C# compiler creates Java jar files as output. It has first-class support for Android and iOS. http://www.remobjects.com/elements/hydrogene/
Are there any similar tutorials for MVVM?
Because Scott Hanselman said so. And we all have man crushes on Scott Hanselman.
lol good article
I would suggest looking into the BING API rather than Yahoo. Only because of the fact that Yahoo Search is actually powered by Bing.
Just read this: http://smile.amazon.com/Object-Oriented-Thought-Process-Developers-Library/dp/0321861272/
I am not looking at the Search API, I am looking at some of the proprietary data they have, like Fantasy Sports.
I'm pretty much in agreement with everything here, except the notion that you're either smart enough to "get it" or not. That kind of thinking encourages people to quit early, it doesn't emphasize the *fact* that hard work will see you through. And yes, C# the language is very different from the concept of OOP. C# is more of a *what* I'm using vs. OOP is more of a *how* I'm using to build an application. Here's the **GUIDE** to the C# the language (http://msdn.microsoft.com/en-us/library/67ef8sbd.aspx) Here's the **REFERENCE** to the C# language: http://msdn.microsoft.com/en-us/library/618ayhy6.aspx You'll want to have statement keywords memorized: http://msdn.microsoft.com/en-us/library/xt4z8b0f.aspx Honestly, I'd play around with the C# language before getting into OOP concepts. But if you want a sneak peek it's basically made up of four concepts: **encapsulation, inheritance, abstraction and polymorphism**. And remember OOP is the "how" of programming, but it's not necessary at first. The goal of OOP is to make code easier to read and to change in the future (to maintain) and to limit the amount of code (to avoid making changes in multiple places and avoid typing errors). You don't need to start out by studying OOP. Become familiar with the C# language first, and try to do things the way they're done in examples. After a while of being more familiar, then you can study OOP. MSDN is a bit dry, but it's an excellent resource. And honestly, for some things like the **.NET Framework Class Library**, it's the best thing: http://msdn.microsoft.com/en-us/library/gg145045(v=vs.110).aspx
Sadly, this is true.
Too expensive, and the free version only allows for very very small projects.. Or just add the visual studio support to the indie($300) license. 
Did you apply for a license to redistribute npswf32 and the air dll?
Where do you call check()
Have you ever tried Xamarin Studio?
Just an unrelated tip: When you have basically the same code for multiple events, you can save some code by using one event handler for multiple events/controls and checking the sender argument to find out which object raised the event. Something along those lines: private void button_Click(object sender, EventArgs e) { Button button = (Button)sender; if (clicks == true) { button.Text = "X"; clicks = false; } else { button.Text = "0"; clicks = true; } } And then assign this method to all buttons in the event panel instead of having a separate method for each button.
Thanks, I have just started programming so every tip helps.
So, my xamarin story has stalled for all intents... I created an app using the starter edition, put in on the [play store](https://play.google.com/store/apps/details?id=com.thelogster.biblenotepad.lite) and android store. Now I want to get past the 64Kb limit, which means it's going to cost me $299 (£178), which as a father of two small children, and the sole earner, I just cannot afford. So now I am converting the app to java using eclipse/ADT. Xamarin is really really really good in terms of what you can do with it, but is really bad in terms of price. I've come to the conclusion that xamarin are not really interested in indie developers, and have set their price accordingly. :(
So you're only calling it once. Not after every change. Call it within the click event. And also do like the guy above suggested and assign the same event to all the buttons 
Thanks man, I finally got it to work.
Ugh, so many Acronyms &gt;.&lt;
This would be amazing.
There's no way that i know of to limit the memory space in .net like you can in Java, but you could design your input buffer such that you shouldn't exceed the limit, periodically check your memory usage and adjust the buffer size as needed - combine this with proper disposal and garbage collection and you should be able to keep your usage to a minimum.
Expensive enough that I've developed 6 apps in Java now, and still couldn't justify the cost. I'm not above spending a lot of money on tools that solve problems for me, but this just doesn't solve enough problems for what it costs. 
Ok, so you can try System.Diagnostics.MaxWorkingSet Set it to the number of bytes your want to limit your footprint to.
Considering students only make up a small fraction of real developers, it's too expensive.
Amazing if it also comes with VS Express, for those without the mean to buy VS.
It's not cheap, but it's not meant for hobbyists who are building apps for fun. A business that needs to decide between multiple teams developing in different languages and maintaining separate code bases vs. spending $2000 for a license, that cost makes sense. The amount saved by sharing a lot of the code and being able to move resource in the team between platforms based on need (since it's all c# and using the same tools) is worth it. For indie developers, the license is $300 per platform. If you plan on making money with your app and want to publish it on Android, iPhone and Windows Phone, you will be able to get there much faster and it will be easier to maintain later on, so it might be worth it. If you don't think $600 are worth it, go ahead and build using the native languages. A good C# developer should have no problem to build apps with Java, Objective-C or Swift. I think the added time it will take is worth more than $600, when I look at my hourly rate, if it takes me more than a day to build the iOS/Android versions in their native languages instead of using Xamarin, I'm loosing money. If you're only building apps for fun or only want to use Xamarin because you prefer C# you are not their target customer. They are pricing for professionals who understand the value of using C# for all platforms and being able to share most of the code between those platforms. You can only really call something cheap or expensive based on the value you get out of it. 
I sure wish someone from xamarin would listen to these comments.
That would be amazing for devs, but not amazing for Microsoft, considering the billions of dollars they have invested in Windows Phone.
Is it similar to the OAuth that is included in MVC for Facebook and Google 
Sorry not familiar with the built in oauth client. I "like" doing things the hard way and I implemented it by hand :D
Why I didn't choose Xamarin for my mobile app: http://www.reddit.com/r/programming/comments/1izksj/major_upgrades_to_xamarins_platform_async_is_here/cb9qqyw
Yes, it is. For bedroom hobbyists. But that's their choice. Xamarin targets companies, and development professionals. They're a tools company. That's how they make their money. For a single platform indie license you're essentially looking at $25 a month. For a set of tools that can earn you money. A lot of people on this site probably spend more than that on video games or beer in a month. For companies it's a no-brainer. The cost savings of having a single team working across 3 mobile platforms instead of having to employ 3 separate dedicated native teams renders the licensing cost almost insignificant. Apple offers tools for free to promote their devices. Microsoft offers tools for free to promote their OS and devices. Google does the same. Xamarin has no platform or devices to promote. Their tools are their income. And by all accounts they seem to be running a highly successful business going along exactly as they are right now. If you want to develop apps and you don't want to pay for it, download Xcode or Android Developer Tools. I'm pretty happy with things as they are because, to be blunt, people who do nothing except complain about the price keep Xamarin devs in high demand. My current contract pays $900 a day, so I paid for my licenses in an afternoon's work. How many $50,000 university degrees achieve the same results?
&gt;You are not who they are targeting. Which is why they'll never be the defacto development platform for mobile app development. I am a full time C# developer with 15 years experience, I'm not going to recommend xamarin to anyone because of their restrictive licences costs. Our product team managed to create a mobile app for our platform, but it has not gone anywhere, because of the price. Xamarin should target the indie licence at $100 per platform. It's not like the offer support or anything for it.... they'll clean up overnight, and no-one would use anything else for their app development, for the very reasons you mentioned.
You have that code in a state that other people can view?
I found a workaround, I now how a messagebox saying that they have to install it manually first.
I think the term you're looking for here is Working Set Size - that's the amount of allocated virtual memory that is actually in RAM. And I think I found something for you: [SetProcessWorkingSetSize](http://msdn.microsoft.com/en-us/library/ms686237\(v=vs.85\).aspx). You can provide a minimum and maximum. The p/invoke for it would be something like this: internal enum WorkingSetSizeFlags { /// &lt;summary&gt; /// The working set may fall below the configured minimum value if there is high demand for memory. /// &lt;/summary&gt; MinDisable = 2, /// &lt;summary&gt; /// The working set may not fall below the configured minimum value. /// &lt;/summary&gt; MinEnable = 1, /// &lt;summary&gt; /// The working set may exceed the configured maximum value if there is abundent memory. /// &lt;/summary&gt; MaxDisable = 8, /// &lt;summary&gt; /// The working set may not exceed the configured maximum value. /// &lt;/summary&gt; MaxEnable = 4, } // http://msdn.microsoft.com/en-us/library/ms686237(v=vs.85).aspx [DllImport( "kernel32.dll", SetLastError = true )] internal static extern bool SetProcessWorkingSetSizeEx( IntPtr handle, int min, int max, WorkingSetSizeFlags flags ); private SetLimits() { bool result = SetProcessWorkingSetSizeEx( Process.GetCurrentProcess().Handle, 204800, // the default on systems with 4k pages 50 * 1024 * 1024, WorkingSetSizeFlags.MaxEnable | WorkingSetSizeFlags.MinDisable ); if ( result == false ) { throw new Win32Exception(); } } 
I'm curious if any of these issues have gotten better in the last year or so.
Ah you know I didn't even see /u/ArchangelleTheRapist's reply, System.Diagnostics.MaxWorkingSet is the built-in way to do the above. Docs: http://msdn.microsoft.com/en-us/library/system.diagnostics.process.maxworkingset(v=vs.110).aspx
Why not? If he's running on a production server, but maybe has to process some background stuff that could get big, he wants to make sure this can't accidentally have a big impact on the server's important processes. It's good defensive development. I could think of one really good example - log processing, maybe preprocessing to send them off, compressed, to a central log server. Lots of big files, could very easily get large working set sizes.
&gt; restrictive licences costs That's the first time I've seen that phrase used as a euphemism for "too fucking expensive". 
&gt; The cost savings of having a single team working across 3 mobile platforms instead of having to employ 3 separate dedicated native teams renders the licensing cost almost insignificant. Dead on. I work with Xamarin at my day job and use it on my side project. It is more cost effective for my side project team to build a core app and then code a set of UIs than to try to build multiple, independent apps. And if my UI stays relatively simple, Xamarin.Forms is going to be a huge win.
Not exactly. If the YQL stuff would help you out I could give you that project after I strip it of the MongoDB login info and Azure credentials since it is a personal side project just for fun. Granted there is not a whole lot to gain from it since it is super simple code. The YQL specific stuff is just constructing the proper URL for the data you want and then deserializing the JSON result to an object (tree of objects) that matches the data structure from the request. The OAuth stuff is a bit more complicated. That project is the beginnings of a rewrite of my company's software product and while it is not an official project yet it soon will be. Because of this I am not comfortable handing that project out to anyone outside my company. I could give you snippets of the code if you are having problems with certain portions of the process or I could walk you through the client side process (assume thats what you are trying to implement). OAuth is relatively simple. Send a request (via browser most likely) with your client_id provided by yahoo to you, the scope (what resources you want access to), the URL you want the results redirected to, and what type of authorization you want (code or token). This request is sent to the OAuth server's authorization endpoint. It redirects browser to a page for the user to login to the service (i.e. Facebook) if they aren't logged in. Once the user is logged in the user will usually be redirected to a page that asks them permission to grant your application access to the resources your requested access to if they haven't granted permission previously. Once they login and say you have access, the browser is redirected to your redirect url with either the access code or token you request in the query string or error information if something went wrong. It is best to use the code type vs the token type most of the time. This is because it is meant for the workflow where you are passing credentials from your own server behind your own firewall you control so that your users don't have access to the secrets you need to pass to yahoo to prove you are who you say you are. You want to keep those secrets secret or bad things will happen. So if you asked for a code, you get a code back in the redirect. You then make a request to yahoo's token endpoint url, but this time the request is done from your server instead of from the browser. This request has the request params encoded in a HTTP POST body instead of in a GET query string but in other ways is kinda similar. You will hand it the code you just got from YAHOO plus you send your client id, secret info, and the request type (my memory is failing me as to what the different types are because I only use one of the 4 or 5 types). This request will result in a JSON response with the auth token which is what you are ultimately after. Once you have that token, you pass it to all future requests to YAHOO in the request headers which will tell YAHOO who you are, whose data you want, and that you have access to the resources that you are requesting from their fantasy sports service. I am doing this all from memory so I may not said it all exactly right but that is the basic gist of how OAuth2 works. I haven't messed with it, but if you can get the Microsoft Facebook OAuth implementation to work you will probably be better off. I wrote my own because I wanted to truly understand what it was doing and I was connecting to my own proprietary server instead of a common one like Google, FB etc. But if you want to do your own it wont be toooooo terribly complicated. Writing an OAuth2 server takes much more time than writing the client code to talk to it does and I assume you are only interested in writing the client side code. Anyway sorry I can't just hand you my project with OAuth implemented, but like I said if you have any questions or would like some snippets from parts of the process I can try and see if I can put something together.
I think you are completely off point. It certainly is possible, and my and arch's comment show just that. He isn't interested in restricting the amount of virtual memory is used, just how much physical memory his program uses and he said he was perfectly fine if his program swaps after his limit. There are perfectly good reason for wanting to do this, and I've illustrated them in my comment to you, but you seem to have ignored them. If you're worried that something could go awry with a library you're using that you don't have a lot of control of, or you don't trust your large program, and it's all happening in a critical environment, then it makes perfect sense to set process limits. 
And as a second reply, plenty of programs do play serious memory games like this. SQL server is one of them - the server strives to keep memory as close to full as absolutely possible. As a result, OutOfMemoryExceptions are commonplace in Sql Server. This is one of the big reasons why C# / .Net had to introduce all of the reliability extensions we know and love, like SafeHandles, Constrained Execution Regions, Critical Finalizers, etc, so that certain critical parts of the program could have deterministic behavior even under severe constraints, like calling a method causes an OutOfMemory exception because the method hadn't been JITed yet, and no memory was available because SQL server had it all sucked up in buffers. Do some research on Critical Execution Regions / SafeHandles if you're curious. There are good reasons to play all sorts of memory games in your programs, especially on critical server infrastructure. SQL Server strives to use as much memory as possible, while this guy's program strives to set a hard limit, perhaps to ensure that it can never interfere with anything else on the server. Good luck trying to get a handle on exactly how much memory a C# program uses to execute. How much memory does the C# allocator keep free? How often does the GC run? Exactly how much memory does any given object consume (hint, there's no one number)? What happens if the large object heap has fragmentation? Good luck.
Actually you aren't looking at it the way Microsoft sees it. If they can get a developers to develop for windows phone they are in a better place. How do you do that? You make it so easy to cross develop that when you make your android/iphone app you also publish to the windows store. Microsoft is very pro xamarin for this very reason.
64kb is a ridiculous restriction to have.
Irrelevant if you haven't been granted a license by adobe to use it.
Because it's going to run on our production servers hosted in the cloud, the lighter the memory footprint the better because hosting is expensive and is charged based on usage. During normal usage the app uses about 10mb or ram, which is good; however if someone were to give it 1,000,000 records to process (this can happen, people are idiots) the memory usage spikes, and this could slow everything else down when it uses up limited ram.
I have and its not bad for it being free, but I prefer visual much much more. Let me know if you want me to list the differences for you.
Today's Hobbyist is tomorrow's developer. The only reason you've come as far as you have is because of the tools available to you. A tool's value is inherited ultimately by its ability to persuade use. But yeah, you're right; it is their call of how to decide barriers of entry. 
I can't really say if it has or hasn't since I went native and haven't looked back. I really wanted to like Xamarin, it just wasn't there.
Haven't used VS Express in a while, but if I'm not mistaken it does not support add-ins, so there's no way Xamarin could work there. You would have to buy the much more expensive full version of Visual Studio ti use it.
&gt; Which is why they'll never be the defacto development platform for mobile app development. Why do people seem obsessed with the idea that this is their plan? Frankly, I don't think they could give two shits about $100 indie licenses. It's not their business model. &gt;they'll clean up overnight If you know how to run their business better than they do, how come you're not providing the de facto development platform either? **Xamarin is a commercial product for commercial app development.** I never see people whining about Oracle being expensive and complaining because they want to use it for free instead of MySQL. If you want free, go get Xcode or ADT.
It is a more descriptive name though - because by being too ducking expensive they end up restricting themselves too much. I agree with /u/lju1977 they should have gone cheaper for indies -- do it like [jetbrains does it with Webstorm][webstorm] and charge indies a much cheaper rate than you charge business developers. In the long run it is going to make you a lot more money and it is going to create a viable ecosystem so that there are people actually using your products, that companies can hire. [webstorm]: http://www.jetbrains.com/webstorm/ 
It would be the opposite, actually. MS is the looser in the app market. They want your apps for their phone, badly. Nobody is going exclusively win-phone, so better make it so that they can easily port their code to your phone.
&gt; It's not cheap, but it's not meant for hobbyists who are building apps for fun. And that is why it will remain a niche system. Delphi was decently affordable and was widely popular, back in the day. As a result lots of components were available for it and lots of developers with experience in it were available too. 
&gt; Xamarin has no platform or devices to promote. Their tools are their income. And by all accounts they seem to be running a highly successful business going along exactly as they are right now. Sure, for now. But a) make a decently useful hobbyist system and b) license it so that it can only be used by people who pay with their own money (jetbrains does the same with webstorm) and c) charge a low enough prize that it doesn't scare anyone away. Do those things and they will have a much more useful ecosystem and their customers will have a lot more people to choose from. Don't do it, and risk that somebody else does it for them (using something other than C#). &gt; I'm pretty happy with things as they are because, to be blunt, people who do nothing except complain about the price keep Xamarin devs in high demand. My current contract pays $900 a day, so I paid for my licenses in an afternoon's work. That is great for you, take full advantage of it, but that is not in Xamarins interest. You are a complement to their products, so they should try to commodify you. 
&gt;Why do people seem obsessed with the idea that this is their plan? Why would it *not* be their plan?? I mean, if I wrote a development system, I would want _everyone_ using it.
No platform will ever be the defacto development platform for mobile apps. Just like no platform is the defacto web development platform. The "restrictive license cost" equals the cost of a couple of developer work days for a company. For that cost, they can stick to one team of C# developers instead of two teams of Java and Objective-C. They can share 50-80% of the code in the project between platforms and the cost of long term maintenance drops. This is especially true for companies that have teams of C# developers building desktop software or intranet apps already in place. 
What? My small TCP server app used like 6MB (in task manager). Gonna check how much the multi threaded TM server controller uses since it makes quite a few objects. Edit: It's using just about 10MB as vshost.exe after running for like an hour... Though it doesn't have any real plugins loaded yet, I'd say it's a good start.
&gt;they're main goal is to make money, just like any other company. Which means having people take up the development platform, and getting locked in to the system
Your insistent use of string/String as well as inconsistent capitalization of the local variables (local variables, parameters, and private members are supposed to start with a lowercase letter) annoys the perfectionist in me.
Not necessarily. Do Ferrari want everyone to drive their cars? I doubt it, but they're in business to make money. There is a choice with tooling. You can go down two routes. 1) Have a big corporate buy 20 dual platform enterprise licenses for $40,000. 2) Sell your product for $50 and hope that 800 people buy it. They chose 1. That's their right. It's their business. And it seems to be working pretty well for them. They're not particularly interested in cheap-ass hobbyists. Most serious indie developers can write off the price of their tools against tax anyway. Everyone else is just riding along for free or next to nothing, spend the most time complaining, and generate very little income. Maybe that sounds harsh, but it's business. Added to which, companies like Xamarin aren't entirely about tools anyway. They're also about licensing support. And bedroom hobbyists don't want to spend on support. If you think you can do better, go make a competitor product and sell it for ten bucks. Surely you'll clean up.
It is relevant because I am not redistributing the redistributable, just linking to the download.
I have never used Xamarin - but am interested in trying it out. My main gripe when I looked into it a while ago was the fact that you couldn't use it to design a GUI (specifically for iOS) - so I would still need to buy myself a Mac to install xcode and write it that way (and a different path for android). Is that no longer the case? 
&gt;In order to achieve the same results by giving away their tools at a rock bottom price, they'd need massive numbers of devs to switch I am not suggesting that they canabalize their current customer base - which is largely companies/incorporated entities (your consulting is through an LLC or C corp, right?) - I am suggesting that they do what they are doing now + offering their software to single, named, individuals at 50-100 usd a month for all platforms or at least for one (because once you have something worth working on for one platform, moving to another for a couple thousand dollars is a no-brainer) license invalid if the money you pay the license with is reimbursed (exactly what jetbrains does with their products) from a third-party. Again I am sure they make a lot of money now. I know of few business that don't want to get a lot more customers and the easiest way to do that is to make it easy to get started. As for Oracle, all I ever hear is complaints about the price (which is more like your firstborn than just fucking expensive) and their license requirements. I most admit that I don't understand why anyone use it, other than the "you don't get fired for choosing IBM".
You're right. It's annoying. Will fix it later today. Ok?
At today's money value, I paid around 150€ for Turbo Pascal 1.5 for Windows for the students version! Delphi was priced at similar prices. Were are all those Delphi hobbyists nowadays? 
To quote from his over command: &gt; I think someone who's thumb is currently on the pulse of C# and .net would better serve you all. So only someone using it currently :)
/r/illallowit :)
:)
Students have some other things more important to pay. Look at the price of jetbrains license for student instead and note that they are for life and not for a year. Xamarin for hobbyst and students is just fucked up
They left because the company fucked them over for years. But I get your point, although I remember that you could get older versions of Delphi for relatively little (I got one free).
There were rumors about Microsoft buying Xamarin. I'm not sure Xamarin would go that route again, even if Microsoft is a better situation than Novell was. If it does happen, we'll probably see the full license available to MSDN subscribers (that subscription is very expensive, but BizSpark members will most likely get it too, and that's free for three years). Xamarin Studio is already free. They don't actually charge you for the IDE, they charge you for Xamarin.iOS and Xamarin.Android. Making XS available for free as part of the express family would only be meaningful if they gave an unrestricted license with it (similar to the current indie license). Otherwise, it's exactly what you get now with the free version of Xamarin. I would love it if Xamarin was part of Microsoft. Until last year they were being actively ignored by Microsoft and when that changed it made Xamarin much better (being allowed to use certain libraries and code that they avoided because of IP). While I don't think Xamarin is really expensive, if it was part of my MSDN subscription, those savings can go elsewhere
No longer the case, with Xamarin.Forms. It's a truly write-once run-multiplatform GUI. Unfortunately, one still needs a Mac, as Apple places restrictions on the compilation. I think that's the only limitation.
But we're not playing some nerd game of "ah, but in this particular case" - he said he wants to constrain the memory usage of his program thats running on a **production server** - if I had someone on my team ask me how to do that, I'd pat them on the back for thinking ahead. If someone asked how to do this for any arbitrary program, then yes, I might think more like you and ask why they want to do it. But OP provided some context, and in my mind, that context very easily justifies the request. He posed his question exactly how he should have to get the answer he should get. And why do you have to automatically assume OP is some Jr Dev? Just because he's asking for help on /r/csharp? The guy made a perfectly reasonable request, and it's one that's made frequently for these sort of tasks. Keep in mind, again, that all MaxWorkingSetSize does is change how much virtual memory can be committed (in physical ram) at any one point in time. His program can still allocate 1 GB of memory if it wants, but all but 50 MB of it will be in swap. That means that he doesn't even have to worry about OOM exceptions, just that his program may run slower, which is *exactly* what he asked for.
already fixed but main and factorial are both methods... could improve with this: static void Main(string[] args) { Console.WriteLine("Starting..."); var result = factorial(5); Console.WriteLine(result); Console.ReadLine(); } public long factorial(int n) { if (n == 0) return 1; return n * factorial(n-1); }
That code formatting tho...
Haha I'm leaving it up to the IDE if it's actually going to be used 
You could use an unsigned long instead of a signed long. Unsigned doesn't support negative values, but that won't really matter for factorials. If you do need a negative factorial or anything, you could manage a boolean. It probably won't gain you too much more range with factorials though. Ulongs can store up to 18,446,744,073,709,551,615 versus a long's max positive value of 9,223,372,036,854,775,807. This means a ulong still can't store 21! If you use decimals as /u/ArchangelleTheRapist mentioned, it would still only allow you to store up to 27! You'll want to look into the BigInteger struct: http://msdn.microsoft.com/en-us/library/system.numerics.biginteger(v=vs.110).aspx 
Does your site have .Net 4.0 installed? Big integer was added in 4.0. If you can't get this on your site then you may need to invent your own big integer data structure or use a third party solution.
BigInteger looks pretty sweet. I hadn't encountered this yet. Thanks!
Where exactly are you getting/solving these problems?
Codechef
When you use IDisposables in your class, it should be IDisposable as well and dispose those objects in the dispose method :)
As one who had to develop in Delphi for 12+ years I'd say fucked over is the completely right term. 
Is this some sort of mathematical problem or challenge? Because if it is then it's quite possible that there's a more efficient way of solving it than trying to compute large factorials. I've always felt a bit dirty using BigInteger to solve Project Euler problems.
It says CS2, which is probably C# 2.0. I don't think BigInteger will work in this case.
"Yo dawg, I heard you like methods, so I put a method inside a method" - OP
We had a similar requirement at work some time ago. We ended up creating static methods to return a populated "ADUser" class - passing a flagged enum or string array defining the properties we wanted to load (If you only need the samaccountname and email address, it makes no sense to load 20 properties!). All the calls use "using()" throughout - generally, if you can use using, you should! 
Thanks for that.
Complete thin slices of functionality one at a time. You get more frequent dopamine hits when seeing something work end to end. Also allows faster feedback from anyone who might use the software.
It's difficult to provide an all purpose solution for something like this. Your best bet would be to look up how to create control instances dynamically. This would cover instantiation, addition to the display, setting properties and assigning event handlers. That said, if you're new to programming in general, I'm not sure if this is the best way to learn. You should do something simpler before jumping into the deep end.
This. You can use BigInteger as long as you're at least using .NET Framework 4.0. If you're only using .NET 2.0 - 3.5, you could use the IntX class that is available on CodePlex: http://intx.codeplex.com
You should probably look into learning the basics first, before going into too complicated stuff. You'll just end up frustrated.. but, you probably want to look into multi-page wpf apps: http://azerdark.wordpress.com/2010/04/23/multi-page-application-in-wpf/ 
This could have bad side effects and lead to unwanted results. It could work for some uncommon delimiter like '\^' for instance, but not necessarily for just empty quotes. At that point, OP could do: var line = whatever.ReadLine(); line = line.Replace("\t", "^"); string[] lineSplit = line.Split('^');
Your question is misleading. To add another control, you simply instantiate it and the Add() it to the form or panel. But it looks like what you're really asking is for another screen. It isn't normal to clear the form and then add new controls. You want to create a completely separate form and then have that loaded when you click next. It would help to know what you're using for this (winforms, wpf, html, etc...)
"Remember: the gui should just be a layer representing your data" I think I know what you were trying to say here but allow me to be a bit pedantic and hang on the wording here -- this is the quintessential design trap. A form should not be approached as if it has to represent your data. While it will oftentimes end up that way (e.g. account creation), that is not how you should approach it -- it's much simpler than that. A form is just a tool used to gather information from a user so that the application can do it's job. So for instance, if you're creating an account, then you want to gather all of the info from the user so that it can be stored for later use, but that doesn't mean the form is going to represent your actual data; that could end up being a very confusing form for a user. In context of the OP's question, which should come first? The correct answer is "neither... both..." My approach would probably be to first ask yourself what the minimum amount of information is that you would need in order to perform the query and then build the form first. Many would disagree with me, but here's my reasoning: You need to consider the interaction (aka the user experience or UX). For instance, what if you can't do the query in a single form? What if the user needs to give you some info so that you can give him some info so that he can finish the form before submitting it for the final query? I'm thinking of examples with cascading dropdowns, or even checking if a username is in use before allowing the submission of the form. All of these factors will affect your query, making it harder or simpler depending on the situation. I find that considering the view first could save you a lot of time in the long run. But I digress, I don't full disagree with what Boezie is saying. From a developer's standpoint, we typically hash out the service layer first, creating endpoints that are consumed by a view -- and the service layer has no knowledge of the view's implementation, so the view could change. I personally do not like the design implications that come with the EF culture -- i feel that it causes conflict in the MVC design pattern and RESTful services. Again, I speak of the culture, not the capabilities of the framework. So long as you're remapping your Entity to a DTO before returning it from the controller, then the debate is purely semantic imo. If you were to combine a truly RESTful service with what I was saying earlier about considering the UX, then it won't matter which one you do first which is what I think Boezie is trying to say here. To recap, I only disagree that your forms necessarily represent your data and that you should necessarily do the GUI last.
Well, any recommendation on where I should go with it then? 
I generally work like this data -&gt; repository -&gt; service layer -&gt; controllers/viewmodels -&gt; views. You can enforce a kind of MVC/MVVM pattern in winforms, it just takes discipline. Definitely don't simply treat the form class as your ViewModel either because that mess gets real sticky real fast. That workflow also allows you to nail out a structure before you get too out of hand with front end functionality.
Yeah, the mobile app would just be the one calling the 'register' and 'token' endpoints instead of the browser.
Good article - right now I'm trying to use token authentication with tokens from Microsoft (Live Connect/OneDrive/Whatever its called now), so the user does not have to create yet another account for the service, and the approach is almost identical.
I guess I work a little differently from most posters here - I work in a middle-sized business of about 700 people. I'm generally only given an overall idea of what we want to accomplish, all business logic (how the process will actually work - a different group takes my process and writes ISO documentation off of it) and design (how data is stored in the database, how the user is asked for data) is left to me. In this sense, I've found it easier to implement functionality from the top (the view) down (service -&gt; repo). I refactor my service/repo layers as needed. I generally work on MVC and WPF applications.
/u/dasjestyr has given a correct answer. You do not need to instantiate a new set of controls. You need to link to a different form. All your forms can be created statically through the form designer and linked with each other through the Show() and Hide() methods. That is not very difficult to do either.
How you noticed the changes I made ;-)
I figured it out. I had to manually install the 8.0 SDK. The 8.1 SDK Came with VS2013 update 2. 
PCL requires additional coding (for example Assembly.GetExecutingAssembly() is unavailable when target Win8+Net45+WP80) &amp; testing on all platforms. This is just the first version and PCL support will be in next one (actually it is already implemented, but insufficiently tested yet).
You are correct. Though 8.1 is already available as a ["free" upgrade if you have a dev account](https://dev.windowsphone.com/develop/devpreview). It has many new features that greatly improve it over 8.0 and I highly recommend it (its super stable for a "preview").
ಠ_ಠ.js best.
Yep to both, downloading the 8.0 SDK is right, but the 8.1 preview has so many improvements, it's a no-brainer to upgrade. Be warned, when I did this, the new bluetooth stack they're using has some issues with my car. I'm guessing it's because my car doesn't support some new bluetooth profile version, but it's a bit annoying. Still think the upgrade is worth it.
NAudio or GStreamer sharp. You can also try and "slave" vlc, but I'm not sure if it's a good option. You should also take a look at TagLib#
Bass Audio Library is free for non commercial usage. http://www.un4seen.com/bass.html
Sweet! I got a free DevCenter account through DreamSpark. I am going to see if I can put the developer preview on my phone without having to wait for Verizon! Thanks!
I've got 8.1 running on my Icon. ;)
The way I learned is combining Pluralsight with a college course, along with asking some of the guys at work and maybe a little Stack Overflow - although more often than not, Stack Overflow kinda made stuff worse to be honest. Do you have a project you're working on? If not, maybe you can come up with a simple app idea and then use resources like books, videos, google, and other programmers to keep you going.
Awesome. Thanks for the heads-up on the bluetooth issue!
There are some videos on [Microsoft Virtual Academy](http://www.microsoftvirtualacademy.com/Studies/SearchResult.aspx?q=xaml). For example: - [Designing Your XAML UI with Blend Jump Start ](http://www.microsoftvirtualacademy.com/training-courses/designing-your-xaml-ui-with-blend-jump-start) - [XAML Deep Dive for Windows &amp; Windows Phone Apps Jump Start](http://www.microsoftvirtualacademy.com/training-courses/xaml-deep-dive-for-windows-windows-phone-apps-jump-start) - [Building Apps for Windows Phone 8 Jump Start](http://www.microsoftvirtualacademy.com/training-courses/windows-phone-8-apps-development-jumpstart) They are not 100% about WPF, mostly about XAML, which is the language WPF uses. It might include some silverlight, windows phone, and "windows 8 apps" stuff. But once you understand the concept of XAML, you pretty much know how to make WPF apps
Think about all the possible questions that you could be asked. Grade them as 1) I can nail that now 2) oh, err... 3) huh? Don't waste any time on grades 1 &amp; 3. develop good coherent answers for 2. 
Check the sidebar for the c# for beginners videos by Bob tabor. He has a great video set on wpf and xaml 
You can write a simple music player using WMPLib and Winform or WPF, i wrote one a few days ago! VS Project : https://www.dropbox.com/s/htvm67asxowoejz/UpBeat%20WPF.rar Complied : https://www.dropbox.com/s/gnqedn441zai7ro/UpBeat.rar
Also, I realize there has to be a more efficient way to generate `hintButton` than to recursively call `setHintText` until `hintButton` != `winningButton`, but I can't figure out how to exclude `winningButton` from the possible random numbers. It works for now, but if anyone has a suggestion to clean this up, feel free to share...
&gt; although more often than not, Stack Overflow kinda made stuff worse to be honest. Can you elaborate on this?
You could also look into a framework like Caliburn Micro
Do you have the option of doing it on WPF, I would think that would be easier.
&gt;Visual Studio Pro or more expensive Ha!
It's a shame he hasn't uploaded any videos for a while now, I quite enjoyed watching them
Was free for me :3
Tbh, I would just put the stuff in your button game class into the form if you won't have to change it. For how to link the buttons ho the numbers, just make an array of them and use the number (zero based, so 0-5) as index.
\*Shakes fist\* *Students*
And for a few more years too :D
This is exactly what you are looking for: MCSD. You can find the official exam ref books on Amazon https://www.microsoft.com/learning/en-ca/mcsd-web-apps-certification.aspx
Instead of Dropbox, might I suggest GitHub or CodePlex for hosting your project?
First thing you must realize is that it's not like WinForms. Placing objects on WPF works completely differently than WinForms. WinForms is a Grid. Don't use Grid's in WPF unless you must. Think more like CSS or Android layouts. You declare them in XAML (pretty easy to pick up). MVVM, etc. [github.com/robertbaker/sevenupdate](github.com/robertbaker/sevenupdate) I converted this from WinForms and WPF. My commits and messages are rather shit and basic sorry. The code is good for use, It was written long ago and I learned so much. A UI that looks like Win7 Windows Update. Uses XAML Resources, various layouts.
You can get MSDN (real stuff, no restrictions*) free for 3 years through BizSpark: http://www.microsoft.com/bizspark/ . Everybody has an idea and I don't think they care how much your idea sucks so long as your aren't using it for consulting.
Studied under this guy. Great teacher.
Since ButtonGame is just logic, and could have any number of ways to interact with it, it should not know about Form1. This way Form1 can be replaced with a console or web interface instead of GUI, the labels can be translated independently of logic, etc. Form1 (you should probably rename it to something more descriptive) on the other hand, is a way to interact with ButtonGame, so it should have a reference to ButtonGame. Since Form1 has a reference to ButtonGame, it can call it's functions, get results returned, and access properties, then it can do UI-related things based on those values.
Absolutely agreed re: ButtonGame not knowing Form1 exists. As far as renaming Form1 goes, if you're familiar with refactoring in Visual Studio, please help me out there. Refactoring in console applications happens like nothing, but for whatever reason, refactoring any GUI forms or controls is inexplicably complicated. And I'm still working out the reference to ButtonGame in Form1. Having issues with it at the moment, but making progress. As frustrating as it is at times, the grinding it out, trying 1,000 different ways to make something work, is how I learn best.
Watching them right now, good teacher. Would love to see some new vids uploaded
I actually almost went to school here. Gonna be nice to know what I missed. 
Thanks! 
How are you studying for it? Are you only using books, or did you take any classes?
There are already native interface builders for iOS and android. But the compilation still need a mac.
This will return the tab as char: Convert.ToChar(9) Try myString.Split(Convert.ToChar(9)) See http://www.asciitable.com/
His videos are always top notch and very in depth with the information. The amount of topics he covers is also very refreshing.
Really no-one should call their own namespace "Environment", or any other existing framework namespaces, for that matter. 
Thank you. As someone who's learning C#, this is a great supplement. Cheers! :)
Did not expect to see Jamie on my front page this morning. 
Right click Form1 in the Solution Explorer window, rename (make sure to not lose the .cs extension), and it should rename the file, as well as the class. By "reference" I don't mean a specific concept. ButtonGame needs to record/reference a winningButton, so it has a field for it. Is Form's interaction with ButtonGame the same as ButtonGame's with the winningButton value?
Oh there should be a special place in hell reserved for that. // Create an alias here using Environment = MyNS.Environment; I mean, that should be reserved for trolling your friends only. Actually, now I think of it, that would make a great prank if you added that in sneakily as a build argument, but made it 90% the same as the one you were replacing. That way they would slowly loose their mind *I swear there is a property called xyz*. Almost a good a prank as a script I spent about half a day writing which slowly de-saturated all the colours used on my friends editor settings, he always said his colour scheme was better, so over the course of half a year, all colours faded slowly to grey, it took him about 2 months to notice.
Files exist as a stream. A stream can be thought of like a tape, it has a beginning and an end, but you can't easily cut that tape, and stick it back together. There isn't an easy way of deleting the first say 500bytes from a file, it's easier to create a new one. If however, you aren't changing the total size of the file, it's quite easy to read through each character, replacing it, if it isn't &gt;. So will you be changing the size of the file?
Yes, basically I have a field of text as follows: a=xhxhx b=1234 c=4321 '&gt;' So everytime I run my c#program I want to delete those 3 lines and then start back at the top and have c# go back out and re-populate those lines with the latest values. So the file size will change, so after execution it could look like this. a=1 b=sa c=ert '&gt;' Nice Analogy by the way
If its a small file, you can just load it into memory at once as a string (assuming its plaintext), do the string manipulation and save the changes back. var content = File.ReadAllText("foo.txt"); var end = content.IndexOf('&gt;'); if (end == -1) { /* char not found */ } else { content = content.Substring(end); // add your stuff content = "my text" + content; File.WriteAllText("foo.txt", content); } Though you seem to have some sort of line based file, so you could take advantage of the File.ReadAllLines method, that gives you string[] where each string is an extra line. Assuming the '&gt;' is on its own line, you can just check which string in the array is '&gt;' and replace the stuff before. 
Didn't realize he had uploaded these. I had him as a professor and he did a great job of helping us understand these concepts.
Thanks! Just learned about extension methods this morning before work. Saved.
Code: var fileLines = System.IO.File.ReadAllLines(somePathVar); foreach(var line in fileLines) { if(line != "&gt;") { DO STUFF } else break; } Another example: var fileLines = System.IO.File.ReadAllLines(somePathVar); var endLineIndex = fileLines.IndexOf("&gt;"); for(int i = 0; i &lt; endLineIndex; i++) { fileLines[i] = SOME NEW LOGIC; } When you're done and want to write it back out to the file: System.IO.File.WriteAllLines(somePathVar, fileLines); 
Yes, it is a line based file. The '&gt;' is not on its own line
It's weird that I just discovered him about 24 hours ago when google searching about enumerators and wondered why he didn't have more views. He has a good pace, and unrelatedly I've picked up a lot of keyboard shortcuts from just a few videos. 
genius!
Ditto.
Saving this for later, thank you!
I made a quick example and with *usings* inside or outside, System.Environment was always located. My Environment class was found only if it existed in the exact namespace as the calling code (*usings* placement irrelevant again) using .NET 4.5/Windows 7 x64
is there something like this for lisp or ruby?
The only thing to be careful of is the size of the file, if it's small, only a few meg or less, then using the ReadAllLines will make your life simple, and your code nice and easy to read. If we're talking hundreds of meg to gigabytes, then we will have to be less lazy, and not let the library methods load the whole file into memory as a string.
He was easily one of my favourites (hard pick against Krebs and Walkenhorst)
The amount of crap he gives managed languages and he has this knowledge store?
Just started learning from him. He can be a bit aggressive, but he is a great teacher.
The Microsoft Virtual Academy is pretty good. There is the [Fundamentals for Absolute Beginners](http://www.microsoftvirtualacademy.com/training-courses/c-fundamentals-for-absolute-beginners ) which is more like what you mentioned with loops and hello world. There's also [Programming in C# Jump Start](http://www.microsoftvirtualacademy.com/training-courses/developer-training-with-programming-in-c) which is pretty good. It goes quickly through more complex topics that you can look into more once you've been introduced to them. The guys in the video are unbearably corny and annoying but the topics are interesting. You can just go to the [MVA site](http://www.microsoftvirtualacademy.com/) and they have a whole bunch of topics you can filter courses by.
Have a look at this. https://www.dropbox.com/s/289u2wi4sjvy2pn/Introduction%20to%20C%23%202-7-14.pdf Its instructor led but might be interesting for you. The beginner stuff doesn't happen until about P36 with If statements. let me know, its really for beginner to intermediate.
Okay, maybe it's just the controls that are more difficult to refactor, because that was as easy as in a console app and quite frankly I feel pretty dumb for not giving it a shot. Thanks for pointing that out. Form1 is now ButtonForm. Also, I finally got everything working. You were right about setting the access properties. The frustrating thing is that I started writing the code that way in the beginning and for some reason I decided at 3 in the am that I was on the wrong track and that mindset stuck for the next couple of days. I instantiated an object `ButtonGame newGame = new ButtonGame` in ButtonForm and used that reference to call the two methods which choose the random integers for `winningButton` and `hintButton` inside the constructor for ButtonForm. The event handlers for each radio button call a ButtonGame method which takes a single integer argument (1-5, by button) and returns a string to be displayed indicating whether user picked the winning button or a losing button. The hintLabel stuff was pretty easy once I had the object reference figured out. I'm going to link to a pastebin of the final code in case you're curious what they hell I'm trying to describe, haha. But I appreciate you taking the time to help. 
Checkout [Pluralsight](http://www.reddit.com/r/csharp/comments/288ugp/is_there_a_webforms_aspnet_equivalent_of/ci8tlbq). 
I use VS, along with the built in local IIS that comes with it and a full install of SQL Server. The SQL Server Management Studio is pretty useful, and LINQPad is as well. What would the benefit of having a full local IIS install be?
Visual Studio + Resharper. Those are the fundamental pieces for a .NET developer, IMO. Everything else (SQL Server setup, IIS config, etc) is dependent on the project(s) you are working on. 
thanks for the response, and yes to all of these. i get a single grid line at 1250, which is visible and labeled. whatever i do, i can either have this one gridline or none at all. i don't even need auto-generated gridlines, i'd happily draw them all myself. i'm sure it's just a small dumb error on my side, but i can't figure out where i made it. i could post the source if you want..
ugh, i'm a moron. all i needed to do was to set a 2 base logarithm and now i've got all the pretty gridlines...
VS + Resharper, latest Win SDK, Linqpad, Dotpeek, Hg/Git tools, Notepad++. For professional tooling: dotTrace, dotCover, MemProfiler, NDepend. Most tech which is project specific can be pulled in via NuGet/Chocolatey/Web Platform Installer, so I don't really worry about those up front.
Without an easy way to understand how to apply what I'd found, if it was even applicable at all, my fellow classmates and I wasted hours trying to get something to work that looked like it should but never did. WPF is very finicky in my opinion. Maybe it had to do with version differences, maybe it was badly written, but with SO it's difficult to say. It's some stranger's code that may or may not work that's posted on the internet. If you're already an expert maybe SO is OK, but if you are trying to learn, I would personally recommend programmers steer clear.
Agreed. Makes WPF so much easier to grasp and debug. A better design paradigm IMO.
I prefer having all components of a system installed. So all of the services/servers etc. Only when debugging some production problems that's not repeatable or has really long setup lead time have I done "development" on remote machine and even then it's mostly seeing where things have gone wrong.
Surely you do that pretty much once and then the logic is "done" and you can revert back to iis express?
That type of testing is way more extensive than what is implied by a "smoke test". A Smoke test is simply "Does it turn on without bursting into flames?" (and/or producing smoke, hence the name) Not "Have I set the correct registry value, set MSMQ name and permissions, installed a DLL with checksum X" etc. (Extensive) Post deployment testing, sure. Smoke testing it is not.
Before you walk you gotta crawl. Learning the basics is necessary. If you jump into applied programming, your code will be ugly and you won't be able to solve problems the best way you could. Every tutorial or book which promises making you a good programmer without having to learn the boring basics is lying. It will possibly make you feel like you accomplish something but in the end you will just have inefficient, deprecated or otherwise bad code.
MonoDevelop, lighttpd for asp.net, Git and trusty ol' /bin/bash.
The benefit of full IIS is that your application runs without VS and also alongside one that you're debugging in IIS Express. So for example you can see things for reference from "known good/broken" version. You can also install application multiple times in same full IIS as different hosts/virtuals to have different versions of application.
Why not use Xamarin? Well, the documentation is poor/unfinished, xamarin forms is lacking soo many control components, not enough basic things are implemented (a good http client, json parser, etc). 
Maybe I'm missing something, but this should be the default behavior of the FlowLayoutPanel. It should only show what it can before flowing to a new row / column. Just make sure that you have the .FlowDirection set to LeftToRight.
I've been an avid Gentoo and Debian user for over a decade now, but when working with C# or ASP.NET I could not see myself using anything else but Visual Studio. It becomes an extension of one self :) It's been quite a while since I tried out MonoDevelop - perhaps it's worth a fresh look? There is a lot of Linux tools and utilities I frequently miss when I'm on my Windows machine. I guess it's a tradeoff :)
I couldn't live without the JetBrains tools myself. Haven't really ever tried out Linqpad - perhaps I should. Everybody keeps mentioning it and I guess that's for a reason :)
My usual stack would involve SQL Server and IIS. Visual Studio and ReSharper is, for me, given in any situation. Most of my local development could be done with LocalDB but I'm too used to working with SQL Management Studio that I feel the need to install a full blown SQL Server.
I find that the IIS Express thingy that comes with VS - is it Casandra they're calling it? - is too slow. When I first started out with it, I kept getting errors due to it not shutting down properly by itself. These problem are non-existant (for me at least) with a full local IIS. It might me a psychosomatic effect, but I feel more "in control" with the full IIS since I've never really spent time on learning how the IIS Express thingy works and how to configure it properly.
Amen!
I haven't experienced that with LocalDB - but then again, I really haven't used it extensively since I always end up installing a full MSSQL due to me being inherently used to using SQL Mangement Studio. I've never thought about using VMs for that purpose but that would allow you to keep you "local server stuff" on a separate machine. I've never thought of that it would also allow me to do a more realistic test of the deployment procedure. You've peeked my interest - thanks for that. It must be tried out some time. If it doesn't take several minutes to boot such a VM, containing IIS and SQL Server, I could see myself using it.
Just think of it this way: you'll never make the same mistake again.
I use SSMS with localdb constantly. (localdb)\v11.0, integrated security. Done. Edit: [proof](http://i.imgur.com/7eU9sDv.png)
Make sure that WrapContents is off. I also noticed that after switching WrapContents on and back off, that I had to turn AutoScroll off and back on to get the control to re wrap the content correctly. 
If you want your score to persist across instances of the program (which is the fancy way of saying running it multiple times) then you have to do something to explicitly write that score "someplace". Your public int score {get;set;} is not good for anything except one instance of your Maths class in one run of the program. If the body of your Main were: new Maths().Addition(); new Maths().Addition(); then what you would see is the second run starting your score over from zero. If you declared your score as public static int score, then there will be one in-memory score for all times you new up Maths... within one run of the program (this is the magic of static; use it wisely lest ye get yourself into a programming Sorcerer's Apprentice mess, with rampant broom tasks dumping unwanted water all over). How to persist your score: Simplest: File.ReadLines and File.WriteLines - use a known file name, read the score in (protip: handle the case where the file does not exist), then write it out at the end. Other options: Save as a user setting (see Settings in the project properties), deal with databases
ad 1: are you sure you created a shortcut, and not just moved the file? ad 2: when you update the score you could save it to a file. The simplest way to do this is File.WriteAllText(string path, string contents), and the read it back when the program starts: File.ReadAllText(string path) (both from System.IO). 
If you understand databases as their own thing, and you know SQL, then all you really need to learn is how to deal with them via .NET (your keyword search here is ADO.NET and the System.Data namespace). If you don't understand SQL or relational database principles, then it's a much longer and bumpier ride.
Thanks a lot! I'll check it out when I'm home tonight. The window itself is resizable, would this affect anything? Also, does this re-arrange the elements in the Flowlayoutpanel during runtime? Thanks!
Simple SQL is easy to learn, but you have to know about columns, tables, and rows, and data types for SQL (which despite being a standard, are not exactly standardized across all providers of databases). It's certainly outside the scope of some comments on Reddit to teach; the [W3Schools site](http://www.w3schools.com/sql/) will give you a good introduction to SQL as a language. After that, you have to solve the practical problems like what database do you use, how do you set it up, how do you get your program to identify the database you set up... there are logistics to consider.
Thanks. I'll look into SQL and test the waters. Is W3Schools definetely a good resource to start with? I always hear bad things about that site. 
It really shouldn't. I just dropped a FLP on a form, anchored it, and added 9 groupBoxes to it for testing. I got the expected column / row behavior as I resized (no horizontal scroll bar, and row column count changing based on size). Once I toggled WrapContents, then it behaved the way you are describing (single row, with a horizontal scroll). 
You are absolutely not going to become a qualified DBA through that site. You will learn enough to do some straightforward queries against a generic database, which is fine for starting out. It's probably no good if you need to make an efficient join across multiple tables in Oracle, or figuring out what the best index to support a complex query is and why... but that's very far from where you are right now.
No it was just called 'ConsoleApplication32'. There's an .exe file beneath it though. 
Alright thanks a lot!
If you are doing anything with XML something like XMLSpy is indispensable too. I would also say something like SublimeText is often a lot better than Notepad++.
I think you are looking for something like this. http://www.wpf-tutorial.com/listview-control/listview-data-binding-item-template/
Are you opposed to using data binding? MVVM makes life wonderful.
If you have a framework for it, it's no longer a smoke test.
You could use a gis enabled database and import some shape files for the states. Then use gis functions to find out what shapes the line intersects.
I wish I could convince my boss to go MVC, he needs to let go of his VB6 days
Ouch
IMHO AutoMapper is not even close to being a "framework".
Any tips on how to do this with VS 2010? I was able to get the text area dark but not the actual UI. Half of it is comfortable and the other half burns my retinas.
I do agree
There is a [YAML Serialization Library]( http://www.yaml.org) that will be helpful. Read the YAML file into a data structure that you can [bind to the TreeView](http://www.codeproject.com/Articles/7884/Data-Binding-TreeView-in-C)
I've always thought of a framework as a collection of libraries, but maybe that's too meta.
Don't bother. The list is just thrown together anyway, without a proper evaluation.
That's actually a lot better than what I was thinking of. Most of the data is booleans so I'd have checkboxes on the treeview, but for more complex data areas your idea is much better.
Man do I love CodeProject. Thanks for pointing me in the right direction!
ModernHttpClient for http. Newtonsoft.Json or ServiceStack.Text for json.
Give him an example of what you can do with MVC and how much functionality in shorter time you can ship out if you switch to MVC. Managers love numbers and can't object to cost efficiency!
What does "knowing" mean? Aware of? Capable of developing and deploying using it? All these list links get a pretty quick downvote.
The MSDN site has the [Class Library](http://msdn.microsoft.com/en-us/library/gg145045%28v=vs.110%29.aspx) reference. As far as I can recall, all entries have examples.
I think it's the same in VS 2010 as in VS 2013 (which is what I'm using,) in which case it's under 'Tools' -&gt; 'Options' -&gt; 'Environment' -&gt; 'General'. Over on the right of the Options screen then you'll see 'Color Theme' under Visual Experience. Select Dark. You may then want to modify things like your comment colors etc. to stand out better, but defaults are usually good enough.
Good luck. With that. There's *a lot* of classes.
At one point there were over 5000 types in the framework. I'm sure that's double or triple that by now. 
I'm going to scan through them and learn the one I think are useful. I want to do this, because for example, I was recently creating a very large string by appending pieces to it in a couple of loops. When the size of the loops increased, the appends took a long time. I came across StringBuilder per accident, and it helped me alot. Performance increased tenfold. Only then it struck me how many useful classes and methods I didn't know.
Easier than trying to memorize a billion class uses of which you might use a hundred is to start googling or searching on StackOverflow how to do some common tasks in .Net.
Maybe give [C# in a Nutshell](http://shop.oreilly.com/product/0636920023951.do) a look. IIRC, it goes into many of the useful classes available in the [.NET Standard Libraries](http://en.wikipedia.org/wiki/Standard_Libraries_%28CLI%29) that you'll likely find yourself using day-to-day.
YAY! AT LAST THEY CAVED ON THE ALL CAPS MENUS. Actually I've grown accustomed to them :/
By the way, those looking at [Sharp Tests Ex](http://sharptestex.codeplex.com/) as referenced in this article, the project is mostly inactive. However, a very similar library, [Fluent Assertions](https://github.com/dennisdoomen/FluentAssertions) is still active. Can't really comment on comparing the two (I have not used Sharp Tests Ex), but I have nothing but praise for Fluent Assertions. That coupled with [Moq](https://github.com/Moq/moq4) have made my test Arrange-Act-Assert patterns eloquent, readable and mostly a pleasure to write.
This would work if I had a good manager. But I don't. He's a good guy, but not a good manager, at least when it comes to the development part of team.
Missing Knockout.js
&gt;Redis is an open source caching Framework wat.
Although your binary search algorithm is O(log(n)) I think List&lt;T&gt;.Insert has a worst case of O(n). Perhaps HashSet&lt;T&gt; performs better? Edit: disregard that. I'm stupid.
First: Thanks for posting your code open-source and looking for feedback! ============ Secondly: If you want to go about improving performance, I would suggest: 1) Create a suite of 1-click performance tests as, at minimum a console application, or perhaps even as a unit test application. Strip away the fluff (GUI) so you can minimize any outside influences for measuring your performance _and_ make it easy for peers to run the application. Even for your own sanity, it's much faster and easier to do a 1-click run of tests than to launch the GUI application, then enter a number in a text box, then click a button. This will become more important as you optimize; better to change one thing at a time, then run the test. If you change many things at once, you don't know what affected what and by how much. 2) Standardize your tests with meaningful numbers of iterations: Is 400,000 significant in some way? What about 1,000,000? What about lower numbers like 100, 1,000? Ideally, unless 400,000 is significant, I would keep to powers of 10 so you can measure performance degradation/improvement over consistent jumps (that is, is the performance linearly the same? Will 100,000 be 10 times slower than 10,000? Or does it get disproportionately better/worse as the number of iterations change?) 3) Define your performance goals if possible (how fast is it now, how fast do you want it to be? Why do you want it to be "X" fast?) 4) What do you prefer at this point? Performance or code quality? (this may tie into the above.) If the latter, at this stage you may want to consider moving some work into separate methods (which may be [inlined](http://www.dotnetperls.com/inline-optimization) anyway) that you can individually test/benchmark/optimize independently of the rest of the application. Once all the parts are optimized/tested individually, you can then merge them back into a single method to see if produces any significant performance gains (if it doesn't, you may consider keeping them separate for readability/maintainability/testability) 5) Add some basic tests validating _correctness_ of your inserts: when you start optimizing your inserts, you want to make sure that any optimization you add doesn't accidentally break it. 6) Remove randomization from your tests if possible. From one test to another, it doesn't help if one test skews the values one way or another to reduce/increase the amount of work. Without averaging many tests together, it undermines confidence in your timing results. If you wish, you can build your tests using the [`new Random(int Seed)`](http://msdn.microsoft.com/en-us/library/ctssatww%28v=vs.110%29.aspx) constructor where you pass a fixed seed value: this will produce a "randomly" distributed set of numbers, but it will be the same numbers each time you run the test. This should give you a good sense of confidence from one test to the next as you make changes that the results you see are from your code changes, _not_ from a change of inputs. 7) Consider checking out some [code profilers](https://www.google.ca/search?q=C%23%20.net%20profiler&amp;gws_rd=ssl); they will help immensely for _identifying_ the _causes_ of performance issues. Sometimes it's better to _know_ what's causing a bottleneck rather than look at the code and _assume_ or _guess_ which lines/blocks are inefficient. ============ Thirdly: from a code styling perspective, I'd suggest you consider encapsulation/hiding your `BinaryInsert` fields, or at least making immutable what should be immutable: Instead of public List&lt;int&gt; list; You can have a public indexer to access elements by index, or expose an `IEnumerable&lt;int&gt;` interator, or allow access via a `ReadOnlyCollection&lt;int&gt;` wrapper. Does it make sense to publicly expose the underlying data for modification? public int iterations; public TimeSpan timeElapsed; Unless I'm misunderstanding something, `iterations` and `timeElapsed` (and the other timing code, and validation code) shouldn't be a function of the `BinaryInsert`. These are the responsibility of your performance benchmarking code and your unit testing code. Pull them out from the `BinaryInsert`; leave it only the things it cares about that is, inserting and its backing list. (Though, arguably, you could even move the insertion code to a separate utility class) Also, and this may be my own personal preference (though it seems pretty common), any public members of a class should favour upper camel casing (so `List`, `Iterations`, `TimeElapsed`).
As of .NET 3.5, there were 11,417 types in the framework. [Source](http://blogs.msdn.com/b/brada/archive/2008/03/17/number-of-types-in-the-net-framework.aspx)
Good on you for doing such a thorough write-up. Was in interesting read for me as someone who doesn't know that much about testing or profiling. 
I can't take the time to pick apart the algorithm, but I wanted to share that any time you're doing performance profiling you should be using System.Diagnostics.Stopwatch instead of DateTime. Here's a StackOverflow question explaining why http://stackoverflow.com/questions/2923283/stopwatch-vs-using-system-datetime-now-for-timing-events
This is the way to go. You would need the shapes for the states and a series of points that define the route (with the number of points determining how accurate this is). Postgresql + postgis is fairly easy to get started using, but I can't speak from a c# perspective there. 
Newtonsoft breaks frequently when xamarin updates I've heard. Is that the case still?
You can even download this as a solution file: http://referencesource.microsoft.com/download.html Enjoy :)
Great, but how does that compare to other standard implementations on your computer? How well does it work on ordered and un-ordered data, whats the best case and worst case complexity?
&gt; Common Logging So lets abstract my logging abstraction. I don't care for some of these libraries simply because of the size. Why do I need 200k+ of binary code to conditionally write a line of text to a file (by far the most common use case)? My own logger does the same in 4k of source code.
You could load the page in a browser control and then walk the DOM through that, but that requires that you're in a winforms/wpf environment. The alternative is to find out where the javascript that's generating the DOM is getting its data from, and then read that yourself. Edit: It's using the Google Maps direction service. Google does expose an API for that which you can use via C#
I'll have to test all of that. Just started working on it today.
Someone was saying that I should switch over to LinkedLists...looking into the options.
* Forgot to take those out. Uploaded this really quick at work. * Same thing * I get !foundPlace, but when dealing with false it just seems easy to read (to me) with the "== false"
Noted. I'll switch that out ASAP!
* 1) I get the no gui thing, but I like being able to modify my test cases on the fly instead of doing it in the code. * 2) 400,000 was the largest number that I could run the program without getting too impatient. Was kind of just a design choice for users looking to "test" it. Powers of 10 would be best. * 3) Just need to write them down. Have them all in the back of my head. =P * 4) Performance. Good points. * 5) The validation section actually validates the inserts. * 6) That's something I never thought about. Good idea. * 7) I'll look into them after I get a more "finalized" version. I don't have much experience with IEnumerable...I'll have to look into it. I left the things as public because I wanted this to be something people could learn from rather than just import into a project. You are correct about pulling the validation/performance stuff from the BinaryInsert. I normally do upper camel for public...I don't know why I didn't here. Thanks for the feedback! Very well thought out. =]
Yeah no worries mate anytime. Took me quite a while so I hope you're grateful.
It's close to a religious war to some, a sign of a novice to many... not that those things are mutually exclusive.
I guess it's the assumption that more typing == no0b. Readability is more important to me in most cases.
Yes it does, and I figured out how to finally get the text. Thanks!!
Yep, agree on both points. The "readability" is the religious war I was referencing. For me personally 1) it makes me cringe when I see true/false explicitly used in a boolean expression and 2) after years of doing code reviews, I've only seen really poor performers use that approach. It's a small sample size, but it's hard to ignore personal experience :) That said, like any "religious war" (e.g. whether/how to comment in code, naming conventions, brace placement) the actual use isn't really the issue; it's just important that it's consistent across the code base, whether you're talking open source, enterprise development, etc. So feel free to use whatever works for you, since it's your project!
Your public doesn't do crap though if others use your dll, since your class is *internal* and not public. Meaning it's only accessible to your assembly. It's generally a good idea to specifically add the modifiers you intended.
It's not really meant to be accessed outside of the assembly so it's all good. Right now it was really just supposed to be learning material.
I tend to switch which semantic I use based on the name of the boolean. Something named isTrue I would use !isTrue because it reads out loud as "Not is true" or "Is not true"...vs "Is true is false" or "Is true equals false" sounds absurd.
Time for a new job!
A SortedList already exists in the framework, and would be a good thing to look at first. This is a bad data structure for large volumes of truly random data, since an addition will force the memory move of everything after it, which on average will be half the list. Trees or skip lists will scale better. Actually, so would adding everything to a list and calling sort on it. Your solution probably has a time complexity in the neighborhood of O(N^2), due to the cost of the moves. That ain't great, and 20k operations per second on a modern CPU is pretty slow. For the exact thing you're doing, maybe first consider a simple binary tree.
\^ this exactly.
Same. Asshole dev lead doesn't care himself. Uses excuse of "all the guys would have to learn it too and it's a big undertaking. Besides webforms isn't dead, it's taking all the great features in Mvc. Win." Fucking lifer assholes.
Lifer - That's the issue. I work at a public university, the rest of the devs will probably retire there. My position isn't even funded past 2 more years....
Why is your manager dictating the technologies you use? Lead developer/architect, sure, but that doesn't seem like something your boss should be controlling.
Looking at the source of the page, they are using Google Maps API. Why don't you just use that directly and get the direction steps? https://developers.google.com/maps/documentation/javascript/examples/directions-complex 
dontcha also need to set the entity state to entitystate.deleted ?
Because then he can use someone else's API key and not have to pay for it. 
You should probably try to focus on the quality of what you write too. The respect of good code conventions (like unit testing, dependency injection ...). Good luck!
I was going to say why not control the offset yourself, but then he mentions it at the end. And he's right - it's a PITA. But I suspect it'll be stable across .net releases. If the JITter gets updated, the order might change. 
Very interesting post, thanks for the writeup.
By "C# project" do you mean that all that functionality is in one VS project? Or is it broken up into smaller parts, like libraries and separate UI for different things? Are the parts for editing the database structure separate from parts editing the database data?
That list is fine, and if you can do all that you'll be able to handle most stuff thrown at you. But actual coding is one side of the coin. I'd also make sure you gain a strong understanding of the following: * Agile development (particularly Scrum, Kanban, XP) * SOLID design principles * Unit Testing/TDD (using a common framework such as NUnit) * Design patterns You might also like to investigate complementary technologies like Xamarin (cross-platform mobile dev with C#) and also make sure you're aware current hot topics in the .net/C# world such as, for example, Roslyn. Finally, commercial experience often speaks volumes. I'd suggest perhaps signing up to a site like Elance, and bidding for a couple of quick, easy jobs (even though the money is often pretty low) just to have some real world portfolio work.
Dreamspark ftw :3
Dreamspark isn't legal to use for commercial uses, this presumably is.
So you can't get the newest version of c# for free. Looked at it a few months ago but the website got me a bit confused and I discontinued my attempt at learning again until I get a better comp. but that's another story
Is it? It seems weird to me then, that you can get a windows store account with it too...
Actually, regarding Windows store apps, you are allowed to make and sell those with your dreamspark version I believe, just not anything else.
Can someone explain why Anonymous Methods are useful? When are they used? What problems do they solve?
I agree with the other commentors here. The only caveat I have with this is the sheer amount of work you'll have to go through to get this feature list coded and working. Like Saiing said, agile planning will be critical to cut these features into tasks and completed. I strongly recommend choosing a core list of functionalities, which features are absolutely necessary and work towards that. Plus, doing things correctly over fast (to finish) will add a bundle of time.Good luck! You'll need it.
Did you look here: http://www.visualstudio.com/en-us/downloads/ ?
You can achieve this with reflection. Here is a very basic example of doing this. You can run this in LINQPad (http://www.linqpad.net/ if you have never heard of it. It's an awesome tool that can be used to figure out little snippets like this) and it returns/dumps the integer 1960. Keep in mind that reflection like this is very slow, so if you need to do this many times in a tight loop you will see a significant performance hit. Caching the properties (return of GetProperty(propertyName)) should help somewhat with this, but not significantly. void Main() { var mc = new MyClass(); mc.FirstName = "Jane"; mc.LastName = "Doe"; mc.Inner.DateOfBirth = new DateTime(1960, 2, 13); Object obj = mc; obj = obj.GetType().GetProperty("Inner").GetValue(obj); obj = obj.GetType().GetProperty("DateOfBirth").GetValue(obj); obj = obj.GetType().GetProperty("Year").GetValue(obj); obj.Dump(); } public class MyClass { public MyClass() { this.Inner = new MyInnerClass(); } public String FirstName { get; set; } public String LastName { get; set; } public MyInnerClass Inner { get; set; } } public class MyInnerClass { public DateTime DateOfBirth { get; set; } }
They're essentially just delegates that can be run any time a certain variable is used. It's like in javascript where you can have something like: var thing = function() { //do something }; where anytime thing is referenced, this function is called. Lambda expressions in C# are essentially anonymous methods that are done better without the need for a method body. x =&gt; x % 2 == 0; is essentially the exact same thing as: bool delegate (int x) { return x % 2 == 0; } but obviously the lambda expression is much simpler and much more concise. As far as I can tell, anonymous methods can essentially be replaced with lambda expressions entirely. You can easily use multiple parameters in a lambda expression by surrounding the variables in parenthesis and specifying their types, such as: (int x, char y) =&gt; x == 0; y == 'a'; Don't quote me on the exact syntax for that, but from my understanding, there is no reason to use anonymous methods. Lambda expressions, however, are mostly used in LINQ queries to pull items from a collection that match a certain constraint, as shown: var thing = someCollection.Where(x =&gt; x % someValue == 0).FirstOrDefault; thing will contain the first instance where the condition specified by the lambda expression is true. There are many other uses for it, but they're most prevalent in LINQ queries. 
You mean nth descendant, not child, nth child would be when children is a list: `object.children[n].` Are all the descendants the same type? Then you can use a loop: var current = topObject; for (var i = 0; i &lt; n; i++) { current = current.child; } // current is now the nth descendent 
There are express editions of windows, desktop and web. The other guy posted the link.
Correct. for commercial usage, you can use any express edition, or apply for BizSpark!
Great explanation, thanks.
When considering a candidate, I wouldn't be likely to care about the exact details of what you made. After all, the chance we'll use it as-is simply isn't that large. However, your list is currently focused on features; and that's natural from your perspective. Make sure you also highlight the quality of your work: readable code, at least some tests, well chosen names, small classes+methods where possible, avoiding exceptions, etc. If you get a chance to talk about it, consider talking about challenges you faced writing it, giving you a chance to show off anything that's not easily skimmable (e.g. smart use of generics, code generation, performance). It's OK to make mistakes or have some poor design, especially if you're honest about it and willing to learn from it. In today's job market (though that depends where you are), you're likely to have your choice of jobs anyhow, so most employers really just want to know if you're smart, not insane, and willing to learn. Relevant background knowledge such as C# is a mere bonus. In any case, don't assume any potential employer will actually look at the project past the first page even if they're interested - they won't have too much time.
You're only reading the first line of the response, so you'll never get to the number-containing one. You should also consider using the WebClient class (not 100% sure on name).
You really need to learn one basic thing in programming: Understand what your program is doing. Go step by step through the code and figure out what you're doing. If you'd go through your code step by step you should say that you're actually just reading a single line. Where do you read the rest of the page? Nowhere. Also, a better way to get parse specific elements from a webpage is the HtmlAgilityPack. 
Whenever I do anything web page related I use Beautiful Soup. Works so well. Maybe have a look at their docs. http://www.crummy.com/software/BeautifulSoup/bs4/doc/
I would write a recursive function that returns your desired object. Like this: &gt;object GetChild(object toCheck) &gt;{ &gt; if(blabla) &gt; { &gt; return toCheck; &gt; } &gt; return GetChild(toCheck. Child); &gt;} (I hope the formatting is readable, I'm on mobile)
C# / .NET isn't going anywhere. You can use it on Linux with [Mono](http://www.mono-project.com/Main_Page) as well. Plenty of companies have long time infrastructure built up using Microsoft stack technologies, switching would be expensive and likely not deliver enough value to make up for the change. I think we will likely see more hybrid / polyglot environments though. I'd encourage you to not become entirely fixated on one language though. You should have at least a basic understanding of two or three. 
This, pretty much.
I might be wrong but I don't see the .NET platform losing market share today as compared to say 5 years ago. It's an enterprise platform, just like j2ee, so it's not typically going to be used in non-enterprise environments.
I agree. I don't think a single programmer has the luxury of working in a single language anymore. Do yourself a favor and learn a dynamic language while you learn C#. Learning a different language will expose you to more ideas.
The Honda Civic is a very popular car. That doesn't imply that it's the pinnacle of mechanical engineering achievement, that it's easier to drive, that it's better at towing boats, or that you'll have more success as a professional driver in a Honda Civic. It's popular because it's a good tool for a typical use case at a low price point. If you were an car mechanic, you'd be a fool not to learn something about the model, but I doubt you'll spend your career focused exclusively on the Honda Civic.
I second the opinion that it's not going anywhere. There are loads of companies that rely heavily on Microsoft infrastructure, and without a reason to change, it will stay the same. (Interestingly, in a /r/programming thread a few days ago I was bashed for being pro-c# by a horde of Java lovers)
Learn multiple languages, like at least one every six months or so. You may find if you want to make back end type stuff that writing and deploying .NET on the server is much less enjoyable than many other platforms - at least that's how I feel. Other platforms you could consider: * JVM - similar to .NET, includes Java, Scala and dynamic languages such as Groovy. Many more as well. Has a rich, battle proven collection of libraries. You better love XML * Python - my personal favourite, lovely language (shitty type system). Easy to get started with. Has a large collection of libraries, ranging from covers-everything-writes-half-your-application to gives-you-the-bare-minimum-doesn't-get-in-you-way, notables examples include [Django](https://www.djangoproject.com) and [Flask](http://flask.pocoo.org) * Ruby - not my favourite language by a long shot, but many swear by it. Has the famous [Ruby on Rails]( http://rubyonrails.org) framework, but keep in mind this has equivalents on other languages. Also has micro frameworks like Python, e.g [Sinatra](http://www.sinatrarb.com) * Go - in its infancy, however it is a fantastic language for writing efficient server applications. Shares Python's shitty type system. Go applications generally use the standard library more than big frameworks, often complemented by the [Gorilla toolkit](http://www.gorillatoolkit.org). Make sure to use "golang" instead of "go" when googling * NodeJS - this is a framework/runtime that allows you to use [the world's most fucked up language]( http://blog.glaucus.in/wow-javascript-such-good-conventions-much-sense/) on the server. Many people love it, I would strongly discourage you from using it. It has very good concurrency support, but fortunately this is also present in another [sane language](http://golang.org). Oft-used framework's include [Express](https://github.com/visionmedia/express) and anything else you can find on [this Github account](https://github.com/visionmedia). He/they (it's complicated) contributed over 1% of the packages on NPM (Node package mfbfjdk) * PHP - has many tried and tested frameworks that don't make up for the fact that this spaghetti of a language evolved out of one man's blog and never really moved on
I think it might seem like it with all the startups that can't afford to pay Microsoft prices
So I have never learned C#, but I do know many others, Java, Python, C, c++, etc. Usually any sort of changes made to a language that has been around for awhile like C# will be there just to make more advanced things easier to do. (Making multiple lines of code into just one line of code). That being said you are probably fine with getting the 2010 version. 
Ah silly me, i thought I had it in a do while loop, alright ill try this out, thanks guys! Edit : Works perfectly fine after i add in the do, while, thanks again for identifying my faux pas!
Comparing the table of contents for both editions (assuming it's [this (2010)](http://www.amazon.ca/gp/product/toc/0470563486/ref=dp_toc/187-5697910-9687457?ie=UTF8&amp;n=916520) vs [this (2013)](http://www.amazon.ca/gp/product/toc/1118385365/sr=8-1/qid=1404572454/ref=dp_toc?ie=UTF8&amp;n=916520&amp;qid=1404572454&amp;sr=8-1), the additions for 2013 are: * Book 2, Chapter 11: Improving Productivity with Named and Optional Parameters * Book 3, Chapter 6: Programming Dynamically! * Book 3, Chapter 7: Helping Out with Interop _However_, 2010 seems to have an additional "Book 8" which _also_ includes these same chapters. I'm assuming the content of those chapters are very similar if not identical. As far as I can tell, they're probably mostly identical. I would suspect that the biggest difference would be with "Book IV: A Tour of Visual Studio" in which (I'm assuming you're using Visual Studio 2013) some of the shortcuts/menus might be a bit different. Most likely for the depth the book is going in to, it won't be that much different (and if it is different, probably a quick google will help you find it). **tl;dr Feel free to grab the 2010 edition. The books look nearly identical.** EDIT: And just to comment on what's in there, definitely looks like it'll cover the important bits. The relatively newer stuff (LINQ, async/await, covariance) you can definitely learn online separately once you have a good grasp of the language (and Visual Studio, .NET, environment) fundamentals.
I would think you could use your compsci skills better with C type projects. I am an advocate for C# but that tends to be business class type projects. CompSci tends to be harder, more computational (CPU bound) type projects that need all the power of the system it muster. [TIOBE](http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html), is one vector for seeing language trends and C is often at the top. Yes, C# and Unity, which I've done professionally, is a popular special case. With Microsoft partnering with Unity and Xamarin now, who knows where that will go. If you can master C and C# on Linux, you will go places.
Although marketshare seems to be down, absolute usage numbers are not. The IT industry is still growing and new use-cases that we're automating sometimes require new languages and platforms. There are not less .NET jobs now then there were 10 years ago. But there are also more other type of jobs. If anything, you should be able to have a career in Java, .NET, Ruby, Python .. these days even "exotic" stuff like Haskell or Scala. Don't be afraid to learn what you like the best -- but try to be informed which sector are using which technologies. (you might not like working for certain sectors). In general, if you excell in a language of your choosing, chances are you are going to find a nice job. This advice goes against common 'wisdom' of picking whatever seems to be the most popular, but no framework/language or ecosystem has a monopoly these days. You are are better off learning what you like and focus on what you excell in. It doesn't matter what you pick. What is important is that it fits you, and makes you productive. Then there will always be a good job available. Also, don't pay too much attention to the 'learn every language' generalists. Yes, you should play with lots of languages. But you should also pick one or two where you truly put in a major time/attention investment. If you travel the world in 24 hours, you haven't seen anything. You have to pick some places and stay there and go in deep. It's not enough to play with everything -- you have to pick a few things you want to be better in than anyone else and that takes time and commitment. Finally, everybody's view is very biased. Technologies tend to concentrate around certain use-cases, locations and cultures. If you work in the gaming industry -- you consider Lua and .NET important technologies. If you are working in medical administration type industries .. you might not even have heard of Lua. If you work in science you likely touched Python. If you create iOS games it will seem no one ever uses python for anything. Neither job-adverts nor 'anecdotal evidence' will give you any clue -- just study what you like the most or consider which type of software you want to be working on. If you are good, the job will find you. 
Thanks for the reply! This was very informative. I think the 2010 edition, for cheaper, would be the better option! I'll check my local bookstore to see if they have it in stock, and see what their prices are for both, and make the decision based upon it. Additional question: Are the CDs and such that come with it worth it? I've seen a few used retailers say that the book wouldn't come with the add-ons. I assume this book has some, but I don't see it on the front cover. Is it anything that I'd need? The source-code for the examples seems to be site-based. Thanks!
.Net will be around for a long time, but the important things is learning programming concepts, the language [doesn't really matter](http://www.dawood.in/if-carpenters-were-hired-like-programmers/) all that much
Thanks! That's what I assumed, about the new stuff being more advanced. I'm looking to learn the language piece-by-piece, and get functional code running, so I think the 2010 version is fine for me.
Personally I have a physical copy of Heads First C#, and it is a great book both for beginners and people with a bit more knowledge. It also contains task and things for you to program, so you learn to use the things you have read about, and there are some major projects you can do as-well, that utilizes things you've learned up until it as-well, all-in-all a great book. Haven't read C# for dummies, but I can definitely recommend Heads First C#.
I'll second this. The whole Head First series is pretty great. I went through their Design Patterns a year or two back. Excellent stuff.
Sorry, I haven't read the books so I can't comment much on the quality of content. Good news is that there are tonnes of resources online for you to learn from as well. Take a look at the sidebar of this subreddit for links to some good resources.
For future reference, press enter twice for making nice bullet point lists or to create a new paragraph. :)
licensing costs on asp/mvc? It's a free open source project Or are you talking about hosting costs?
5 years ago it was much closer to death than it is today. It's going though a Renaissance period now.
Linq.
&gt; var current = topObject; &gt; for (var i = 0; i &lt; n; i++) { &gt; current = current.child; &gt; } You should probably make sure that "current" is not null before each iteration.
I'd say one of the features I use most are variables.
LINQ, Lambdas, Reflection (sooo much reflection...)
I've never put a CD that came with a book in a computer. Sometimes they have more material, but usually it's just digital copies of all the examples in the book. Your way of learning might be different, but I learn far better when I manually transcribe the code examples from the book and _read_ and _understand_ every/most lines of code as I transcribe them. If you can learn by opening someone's code and poking at it a bit, then the CD might save you some time. I went through all of C# For Dummies (an older edition than the ones you're looking at) and didn't use the CD.
Specifically what part of LINQ? Just stuff like List&lt;T&gt;.Where/Aggregate/etc., or some of the "deeper" stuff like IQueryable/LINQ2SQL/LINQ2XML/etc.?
Do not buy a "For Dummies" book ever.
Error and constraint checking left as exercise for reader
http://www.reddit.com/r/csharp/comments/29w1i8/im_a_bambi_compsci_student_wondering_about_the/cip9hsw
C# isn't going to anywhere - but it is true that it mostly Microsoft oriented. You can use C# in other platforms by using Mono - but Mono is never going to implement entire .NET framework (parts like Presentation Foundation and Workflow Foundation are never going to be part of Mono). Instead entirely going to C#, you should also learn other languages. C++ is always good, but hard thing to learn. Java is also good - thought it is mostly used only in servers these days. It seems like Oracle doesn't want it to success anymore. For Linux developement you should also learn C. Some understanding of Assembly language is really also helpful (thought you very likely never going to use it in any real projects). More you learn languages - easier it learn new languages. Most of Web servers are running on Linux and going to be running on Linux - so you should look what languages Linux developers are using. PHP, Python and Java much are more popular on Linux web platforms than C#. Java is mostly used in heavy enterprise websites - awhile PHP and Python are used pretty much everywhere. C/C++ is still important support language for Linux web platform developement. After that go ahead and learn other languages too. Good software developer never stop learning new things. 
I see it losing some market share, but not in the sense that companies are moving away from the .NET platform. Established companies have little incentive to completely move away from it and many of these are doing just fine. I say it will lose market share just because more companies are likely to grow on alternative platforms in greater proportions as the industry continues to grow.
Head First Design Patterns is one of my favorite programming books of all time!
LINQ as a whole. There should be no restrictions as it's become one of the best, if not the best feature of C#.NET.
What are you doing with reflection? It's a feature I almost never end up using. In fact, most of the times I've started to use it for something, I've been able to avoid it entirely. Just curious what other people actually use it for in the wild.
Most recent example where I used it was for doing document templates from objects. So if in a document I have "Hello {FirstName}!" and an object with a "FirstName" property or field, it'll do the substitution with the field/properties value. The reason it's done that way is because the object is from an ORM, so this way database fields are being shoved into documents with minimal fuss even if the structure changes. I also use it a lot for working with plugins. One of the projects I'm working on has a pretty in-depth plugin system, so that's all reflection up the wazoo to make that work.
Also... [*fuck php*](/r/lolphp)
Prices of 0$ from bizspark?
Or operators. I use them a lot, too.
*Java runs on more mobile platforms* blablabla Err, not really...
To jump right into PHP, I suggest /r/lolphp :)
Start up costs on Microsoft technologies are fairly low these days. Check out [BizSpark](http://www.microsoft.com/bizspark/).
Me too, but I also use types and namespaces a lot.
Lambdas Linq (the extension methods, not the language query extensions) Async/await.. Holy shit these things are amazing. From network calls to animation. Yield return Amazing stuff.
String.IsNullOrEmpty
The lambda syntax is just so lovely, any other language feels clunky after using it.
.net equivalent of Python's Beautiful Soup is [Html Agility Pack](http://htmlagilitypack.codeplex.com/) ([NuGet link](http://www.nuget.org/packages/HtmlAgilityPack))
What are you doing with reflection for plugins that MEF doesn't already do?
MEF is fine if you have some idea what the plugins are going to look like (since they have to conform to a known interface) before they're loaded. If they're more arbitrary, then much more of the work is done at runtime.
There are also MSDN licenses to consider once you get into heavy development
Mostly because Microsoft has finally embraced the development ecosystem that exists outside of it and stopped trying to force TFS, ASP.NET Web Forms, the word "JScript", etc. down everyone's throats. 
C# spoils you to some extent, but using any other IDE after using VS is just not the same.
ExtensionMethods
Linq and Async/Await. While you could do most of what these features enable before, the amount of code written to achieve the same goal now is ridiculously low 
Generics. Writing a properly working genetic method makes my insides smile
Coldfusion work is still to be found in abundance in government. Coldfusion! C# is going to be around for a very long time, if only for the government investment.
I use the letters and numbers quite a lot. 
var
Apart from all those other languages that support higher-order functions on Enumerables. (Ruby/Haskell/Scala/etc.) ;) LINQ is very well executed, though.
Don't forget rust, C/C++, and D.
String.Format() all the things
&gt; When I use Linq, it's almost always via the extension methods rather than the from..let..where..select syntax. Yeah, that seems to be the consensus through all the different polls and such that have been posted here before
Buffer.BlockCopy
I'm using MonoDevelop more and more now for console type applications. Visual Studio is just too much money, when there is a usable alternative for free.
This. I love committing a change deleting 14 classes and replacing it with a simple generic
Not used enough. So many code bases I've worked on that are checking for the trailing slash.
/r/lolphp is fun too :D
Well, the standard way is: event EventHandler&lt;MyEventArgs&gt; MyEvent; With object sender and EventArgs derivative as T... But I rather roll my own because fuck casting...
This attitude is why i stopped contributing to your reddit api. You're kind of a judgmental douche. I didn't even have to look to know this was you, but, yeah, it definitely is. You place a value judgment on which ide people use, as if that's not emacs v vim 2.0 and your overall attitude is just shitty. You need to grow up.
Google Maps API returns the lat/lng of each point in your journey. Then [reverse geocode](http://stackoverflow.com/a/4013635/564755) those points and grab the state.
We use it for a dynamic workflow runner. It runs workflows mapped to a criteria. When the assemblies are uploaded, we use reflection to discover the workflow, its input arguments and dependencies, then resolve those at runtime.
Yep, they've also open sourced a lot of the foundation technologies. Microsoft of today is completely different. 
Multithread ALL the things!
this
As long as you're familiar with basics of OOP, unless it's gone to hell, the C# in a Nutshell series was for the longest time my reference of choice. One of the authors wrote LINQPad and I always found the books to be worth every penny.
I thought LINQ 2 SQL was out of favor (for EF)?
Is the point of async/await just so you don't have to do Task.ContinueWith ?
Guess I can't argue with that :)
[+1 Funny]
What are you learning for? 2013 will have async and modern Windows stuff in it. The language itself wouldn't be much different, especially not the fundamentals, which I assume are the main things you need. Have a look at a website called Dotnet Perls as well...it is full of really simple, clear examples of all the basics, and will supplement any book reading you do. Microsoft's Virtual Academy is free and has full video courses on C# (and other stuff). I'd spend the extra for the more recent book if I were you (these types of books are really expensive where I live - Australia - so I'd be lucky to get the 2010 version for less than $30-$40 delivered). Dummies books make great references...would be be comfortable in 3 years going to a 2010 reference? I am currently reading Microsoft Visual C# 2013 Step by Step and it's really good. Has clear explanations, and each chapter ends with a 'cheat sheet', which I love because I learned to program with VB.net and keep forgetting the correct way to write out loops and switches in C#!
from what I've seen /r/programming is fairly anti-Microsoft.
Have you seen [Dot42](https://www.dot42.com)? It's an implementation of C# for Android and their core runtime is open source. I think they use pieces of Mono too. Might be worth looking at? 
But linq to object and the related lamda expressions are very nice. Also linq is still used with EF.
Whoa whoa whoa, get your super-advanced techniques out of here
OP made PRAW? I thought that was /u/bboe
using It's as the top of every class I've ever written! Joking aside though: 1. Lambdas 2. Async-await 3. LINQ All three are life changers.
After discovering Aysnc/Await I was so freaking excited. They are amazing! .. then a month ago I had to write something for a PC running .NET 3.0 that could not get the 4.x upgrade. Had to go backwards... made me appreciate aysnc/await so much more.
More people need to heed your advice. Good coders are good coders, regardless of what language they use.
I like HFC# a lot, but sometimes, if you're reasonably competent and just want something explained straightforwardly, you can get a bit bogged down in their *"here are 10 different analogies and witty anecdotes to slog through before we actually explain the nuts and bolts of what we're doing"* approach.
I installed ReSharper and it rendered Visual Studio unusable. Do you have any suggestions, because I do see how it could make someone more productive? To be specific, it took 5-8 minutes for Visual Studio to start. Afterwards it would load a component for about 10 minutes. Then whenever I clicked on something or hovered the mouse over it the cursor didn't even change to the "hand cursor". A lot of "Not Responding" also. 
Looks like noone ment properties (and auto-properties)
Why is he saying 'bye' to so many features?
That's pretty hardcore bro
I love me some semicolons.
Semicolons. I use them the most.
In my company it is used for loading configuration files and then dynamically build types from that. Hard to wrap your head around it, but once you got the idea, it is one of the best concepts ever.
Java developers hate him!
I'm no expert, and this is just pure speculation, but wouldn't setting a ScaleTransform as the RenderTransform do the trick? Or is this wpf only?
LINQ, linq2sql. amazing stuff. 
Yes, that's why I was specifically asking about linq 2 sql. And wondering if it's totally been replaced by EF.
So you know you can view much of the .NET source code here: http://referencesource.microsoft.com It also gives you some decent inline go to definition, find references, that type of stuff.
Considering the amount of good answers the topic on visual studio had, I would say the opposite (or maybe just all love vs)
Thank you. I've corrected it :)
Yes exactly. It transforms the asynchronous code you used to write using other callbacks or promises into regular synchronous code that gets executed like async code.
Yes but the newest version of C# can't be used for anything but metro apps. WTF anyone would want them I don't know. Edit: MS apparently relented on this as /u/badcookies pointed out in a child comment. [Originally they weren't going to include it](http://arstechnica.com/information-technology/2012/05/no-cost-desktop-software-development-is-dead-on-windows-8/) and I hadn't heard they changed their minds.
Every time I've been in a situation that could have used async/await, I find I just end up using the task anyways because there's some other operation I want to run at the same time. I guess it's more useful for I/O stuff?
[Visual Studio Express 2013](http://www.visualstudio.com/en-us/downloads/download-visual-studio-vs.aspx) comes in different flavors. You can install the desktop or the web edition, you are not restricted to Windows Store apps.
Yeah, async and await get confused a lot. async and await have nothing to do with parallel code, and if you are thinking about multi-threading they don't really serve their place. If you are writing a server application on the other hand, and every request ends up hitting the database, it frees up the threads while it's waiting on the database. Similar situation with GUI applications (it solves the whole callbacks not having access to the GUI thread problem as well). As you mention, it shines in I/O situations, where the CPU isn't involved, and might as well do something else while waiting for something to happen. It's just a way to avoid blocking.
Well, they're pretty similar in that regard - whatever follows the await, is essentially a continuation. Syntactically though, once you start trying to do anything remotely complex, async-await results in much more readable code. I'd still argue though that the fundamental point of async await is just to provide syntactic sugar for multithreading without callbacks - it's just another (better?) way of going about it. The fact that ContinueWith provides similar functionality doesn't necessarily negate that.
Now, async/await 
As a guy who codes in VB at work and C# at home, brackets and semicolons are an absolute blessing.
Okay I should be more accurate, you can install the web edition, but you can't make C# apps for normal windows with any express edition.
using D = new System.Dictionary&lt;string, object&gt; Then: DoStuff(new D({"foo", bar})) I don't like scrolling horizontally. 
Did you bother looking? &gt; Visual Studio Express 2013 for Windows Desktop enables the creation of desktop apps in C#, Visual Basic, and C++, and supports Windows Presentation Foundation (WPF), Windows Forms, and Win32.
Two things I use them for: 1) UI. Often enough I need to generate a UI (think property grid) for some classes I won't know about until runtime. Attributes on class properties are great for this. 2) Logging. Combined with .NET's CallerMemberAttribute in 4.5, reflection helps nicely for solving problems retrospectively.
Bizspark. It's brilliant. MS will even consider letting you graduate to bizspark plus and give you a very generous amount of azure hosting. Downside is it is a little bit of a shock when it ends, but if you've made it 5 years and aren't able to afford a MSDN universal sub per dev, then odds are you aren't going to make it anyway.
Praw is a python wrapper, his is .net 
Awesome, it wasn't until I read your comment that I realized they went back to putting it in anyway. But I must defend myself, I read the news on a ton of sites, e.g here is an article: http://arstechnica.com/information-technology/2012/05/no-cost-desktop-software-development-is-dead-on-windows-8/ I am really happy they relented though.
Visual Studio 2014 CTP has a free 200 day licence...
Agreed! I have scratched my head for a while and I think Microsoft is finally realizing that they are no longer calling the shots. It is good to see them move this way. I am hugely excited about Xamarin! The mobile dev world has been much like the wild west for some time and I am a huge proponent of one language for multiple target devices.
I recently bought the Android Xamarin Indie licence for a year. The price would have been worth it to me, if i didnt have to buy another just as expensive one for iPhone. What im not getting in the Indie version is all the good Sql stuff. That would cost me a 1000 bucks. Ive got to say that i really love using Xamarin, though. The designer is nice, the debugging is OK and of course - C# rocks! Your project sounds extremly ambitious, i must say. But im cheering for you! Other than that: I agree with clever-clever on Linq. 
I'm guilty of that myself. "\n" rather trumps it due to brevity and my own laziness, I'm afraid.
Visual Studio Express is free and usable and features most of the basic things (you'll miss the plugin capabilities though)
Is it bad to not use it? (Although I use it if possible)
You should check out AHK. http://www.ahkscript.org
WPF is the best yes, It is still updated. WinForms is maintained but not updated.
You can just open a new project in say VS13 and paste the code.
Thanks. Gotta find my code again then.
&gt; Anyone know the code to automatically press a letter say 'a'? http://msdn.microsoft.com/en-us/library/system.windows.forms.sendkeys.send%28v=vs.110%29.aspx &gt; Anyone know the code to click the left button on the mouse? http://msdn.microsoft.com/en-us/library/windows/desktop/ms646260%28v=vs.85%29.aspx &lt;- DllImport["user32.dll"] &gt; Anyone know the code to move the mouse cursor? Same as above... X &amp; Y &gt; Anyone know the code to read the data in the screen shot buffer? http://msdn.microsoft.com/en-us/library/c2thcsx4%28v=vs.110%29.aspx
Yep, that was one of the projects I saw while looking for something like this. Their newer focus (C#-&gt;Java source code conversion instead of the IL -&gt; DEX they were doing before) seems to be extremely close to what I'm doing with this project. Dot42 definitely seems like a great compliment to SharpSwift (use SS to compile for iOS, then Dot42 for Android)
Thank you.
The problem with Winforms &amp; WPF is that your limited to Windows, and there is no clear path to multiplatform gui using C#. Gtk is an option. Qt is unfortunately not well supported.
Also, a bonus to WPF over WinForms is that WPF is essentially XAML.....and XAML is used for the presentation layer on everything Microsoft does (WPF, Win Phone, Windows 8 Store Apps, the (walking dead) Silverlight) and is also very similar to things like Android markup/xml layouts. 
Please stop posting these. This is not content.
For anyone curious, IsNullOrWhitespace essentially evaluates to IsNullOrEmpty || value.Trim().Length == 0.
I find myself using the function quite a lot, basically whenever dealing with user input.
 value != null &amp;&amp; value.All(Char.IsWhiteSpace)
There is no "standard" GUI environment for C# other then what a given situation dictates. - Want to create a website: go mvc5 - Want to create a nice looking application with all gimmicks (but with a performance penalty on older, low budget computers): go WPF (Warning: DO NOT USE WITH CITRIX OR EQUIVALENT) - Want to create a quick and easy maintainable application which isn't really fancy, but that might be very much ok if all you want is a dry fe; accountant application?: go Winforms (and no, this isn't depricated, it just isn't as fancy and in the spotlights as all else, but it still has its place) - Need cross-platform: go Xamarin Do not go silverlight, that's end-of-line too limited to the number of systems usable ^(this should be under the OP's thread btw...)
Explain? var calc = Enumerable.Range(1, 99) .TakeWhile(x =&gt; x &lt;= 50) .Select(x =&gt; x * x) .Where(p =&gt; p % 2 == 0) .Sum(); is very similar to: (1..100) .take_while { |x| x &lt;= 50} .map { |x| x ** 2 } .select(&amp;:even?) .reduce(:+) or (if you squint): sum $ filter even $ map (^2) $ takeWhile (&lt;= 50) [1..100] I like C#, but my first thought on learning about LINQ was still "Oh awesome, now I can use concise syntax for enumerable processing just like all those other languages I love."
Thats very true. Im using Azure Wams for external stuff, which works in the indie version of Xamarin. And SqlLite is there for local DBs. I guess is was a pure annoyment-keyboard-reflex because of if only being available if i pay a thousand bucks. 
Yes, but that's not what's cool about LINQ or what's special about it. Add a AsQueryable() and you'll notice some magic is happening that you won't find in ruby's enumerable. You will get an IQueryable which has the expression tree that the query represents which you can rewrite or compile to another language if you wish (such as SQL).
Here is an idea I'd like to see implemented: - a gantt chart creator that * makes use of a touch monitor * where I can easily connect a task with its predecessor tasks * and create, split or sub-divide tasks * The output is a gantt chart and the information in a csv or excel file that can be used for other tools like MS project. The idea behind this is that when I start a project I fastly brainstorm tasks and try to make smaller tasks until I can estimate them. For me this is somehow a creative process. A text editor or a big tool like MS project will rather block me there. I use post-it notes but now with touch monitors on the rise I think it can be done with SW.
I can recommend C# 2012 for Programmers (5th Edition) (Deitel Developer Series). I'd say it's much better than one of those Dummies books.
 While I agree, that silverlight does have a limited usage situation, how are the systems usable with silverlight limited? It should work on any windows system with any big browser (some things like windows identity may only be available on ie, but the core is available everywhere). 
I thought about touch support. BTW thanks for the Gantt chart idea. 
I had exactly the same thought. I wrote my own music player for the same reason in C#. I tried several libraries but ended up using the IrrKlang library. One huge problem i encountered was the slider for the position of the music. The standard trackbar in C# can't change it's value to where the mouse clicks. 
I think you nailed it. Typical LINQ-to-Objects are just an [effective use of basic iterators](https://msmvps.com/blogs/jon_skeet/archive/2011/02/23/reimplementing-linq-to-objects-part-45-conclusion-and-list-of-posts.aspx). But the whole expression tree/query analyzer back-end is what gives LINQ some real unique power in the .NET world.
Trying to do animations in WPF make me want to throw my computer out the window.
That's the implementation. Don't need more or less.
The `where T : class` restricts its use to non-value-types. Which, on the face of it makes sense (as value-types are non-nullable). _However_, this means you cannot use the method for [nullable-value-types](http://msdn.microsoft.com/en-us/library/1t3y8s4s.aspx). So you wouldn't be able to use it for `int?` or `MyStruct?` types. EDIT: But part of me likes this use as say, for fluent code contracts. But yeah, kinda sucks in that it adds it to _all_ the intellisense of objects you use.
Well, I guess you could add a further method for Nullable&lt;T&gt;: public static Nullable&lt;T&gt; NotNull&lt;T&gt;(this Nullable&lt;T&gt; extended, string exceptionMessage = null) where T : struct { if (extended == null) throw new NullReferenceException(exceptionMessage ?? "Supplied " + typeof(T).Name + " must not be null!"); else return extended; }
Hi ^ _ ^ !! I said bye to writing all those things manually because AutoFixture provides that functionality for you.
You are 100% correct. I looked into how google's API stuff works and was able to just grab the text from the API instead of fooling around and trying to get it off the page. I found an easy example of this online, but I am not sure what this other comment says about paying for a key? I have not seen anything about that
Could you expand on that? I ended up being able to get the code from google's API. I used a simple example I found on the internet and I did not have to use any type of key to get this information. I don't want to be ripping anyone off 
"Gracefully handle null values" Sidetrack: I really wish would stop treating null as anything other than undefined values that are unexpected. There's no such thing as a "safe" way of handling a null value. In his example, if I got back a hash code value for an object that was null, that would be a serious problem and I want an exception thrown! 
Option types. In the above example, it wouldn't make the problem go away, but it would allow your hash code method to defer to its caller on whether or not the lack of sensible return value is a serious problem or not.
Just a small note to make for you: Strings are not [primitive types](http://msdn.microsoft.com/en-us/library/system.type.isprimitive.aspx) in the context you've laid out, IIRC. I wouldn't go so far as to say: &gt;The primitive data types are also called value data types. Because DateTime, for example, is a value type that *isn't* primitive. I haven't glanced in more detail at your article, but thought I'd throw that out. Just a few pointers!
Google places limits on free usage of their API. If you exceed them, you need to open a business account with them and pay for it. https://developers.google.com/maps/documentation/business/faq#usage_limits 
I think a better question would be why are you attempting to connect between computers? 
Can I ask maybe a silly question? How is this different than adding a handle to assembly resolve and using a line of code to return the assembly from the embedded resource? Or is this just a wrapper for that very thing?
&gt; Async/await I never really appreciated these until I started looking into implementing it in Swift o.0 I think this will probably be one of the hardest features to convert, though it looks like some people [are already trying](https://alastairs-place.net/blog/2014/06/12/async-in-swift/), which is good
Null is an acceptable answer in lots of cases, dereferencing null, is not. Mapping field of a not required object property is the place I'd use "NotNull" extension instead of: if (null == carTemplate.AirCooling) { car.AirCoolingFan = carTemplate.AirCooling.Fan; } Just for conciseness and readability. (of course one could use `car.AirCoolingFan = carTemplate.AirCooling != null ? carTemplate.AirCooling.Fan : null` but it quickly gets nasty for multiple levels of dereferencing)
If you go over 25k requests a day, you'll have to pay for it: https://developers.google.com/maps/usagelimits/?utm_referrer=v3 the limits + pricing are there 
 I'd rather check the type of a valid object than worry - or worse assume - that a null reference means "nothing" instead of "something bad happened". Was the fan info never set? Did the method that gets the fan info run into a problem (i.e. service call failed, database down, etc.) If you can't tell the difference between the two, you shouldn't use it as a valid type. There are several ways of addressing this. Use an Option type. Use a struct of carTemplate.NoFan. I could easily create an object NoFan based on Fan. Now if I get a null value for a fan, I know something bad happened. You can argue that null is acceptable, but I will fight you to the end. I've dealt with too many systems that returned null as a valid return value. Apps would simply stop working, and I'd have to debug through the main app to drill into a WCF service that called another server running a WCF service, that called another WCF service to learn that that this third server had encountered an exception, logged it if I was lucky, then return a "valid" null that got passed up the chain of communication. I'd waste an entire day debugging these issues. If your apps and services cannot distinguish between valid values and a broken state, you're going to have a bad time. There is just no _good_ reason for taking the easy path and using null as a valid value. The only argument I ever hear boils down to "it's acceptable sometimes because it's easier than good OOD". Go ahead, make your case, but it better be something other than laziness. I'd rather spend my time writing an empty object class or an Option extension instead of writing numerous guard clauses because the return object type is ambiguous. 
well that is good to know! Thanks a ton. Haha its just a fun little side project I am working on right now, but if it ever gets bigger, I will for sure look into prices. Thanks a ton!
For null case I use this extension [System.Diagnostics.DebuggerStepThrough] public static TRes Get&lt;TObj, TRes&gt;(this TObj obj, Func&lt;TObj, TRes&gt; getter, TRes def = default(TRes)) { if (obj == null) return def; else return getter(obj); } It allows you to write chains like this: var result = obj1.Get(o=&gt; o.Something) .Get(o=&gt;o.Something2) .Get(o=&gt;o.Method());
Well, you've got point about proper OO model, I've written code that's very typical to ORM layer.
Thank you for the clarification.
And what does null mean in this case? It is carTemplate.AirCooling.None or some kind of error? BTW to shorten your conditional you could use `??` operator.
I didn't write it in this comment, but I meant typical ORM usage. In most Microsoft and .net-based ORMs (like ADO.net or Entity Framework) null means nullable field in database and / or lack of targeted object (either in database, either object is not yet loaded). Actually you can't use ?? in this situation (On purpose I've used such a case, when it's AirCooling which might be null and AirCooling.Fan being the value we want - we could've used it if AirCooling was the object we've needed)
http://msdn.microsoft.com/en-us/library/system.type.isprimitive.aspx Decimal isn't primitive either. String is far from primitive - not only that it's immutable reference type it also has magic that makes the following true: var a = "test"; var b = "test"; return a == b; 
Your string array should really be an object. Its ToString method could return the text you're formatting elsewhere now. Also: Consider using something like gist.github.com for your longer code snippets :)