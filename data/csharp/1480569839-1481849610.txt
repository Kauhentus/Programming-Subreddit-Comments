/u/the_wharbler You seem to only post your own content. Please take note of the Reddit rules regarding self-promotion: https://www.reddit.com/wiki/selfpromotion
&gt; but all the videos just keep saying how much I would benefit from it and how great it is without actually showing anything at all I was actually trying to implement CQRS without an event store and ran into a number of issues when I began to think it through. I knew it was the right thing to do in the long term but couldn't justify a lot of it. Event sourcing shines when working with collaborative data which this system didn't really deal with. Once I backed up, I saw a dance. Once I identified it, I saw that if you can relate to any step of the dance, it kinda justifies the entire dance. Here's the dance, as I see it, in a logical order (although it doesn't really matter). Maybe you can glean something from it: - Monolithic systems are inevitably messy and hard to scale efficiently. Can help this by a fine grained SOA like microservice architecture, which has some other benefits. - Microservices present a problem where disparate services have some reliance on the data of other services. Solve this with an event-drive architecture. Reliant services process events to keep their data in sync. This is facilitated with a service bus. - Event driven architecture present a problem with data consistency as a side effect of eventually-consistent data. If state is updated out of order, unexpected results can happen. Solve this by switching to event sourcing. - Event sourcing presents a problem where data is more reliable, but unqueryable. Events are partitioned by PK only and cannot be joined without some app gymnastics. Solve this with CQRS. In CQRS, the query side is listening to the event stream and inserts denomalized data into one or more view stores in any format that makes sense (projections) - Projections pose an issue when introducing new projections needing historical data. The event store helps here. Instead of lost data or really complicated db gymnastics, simply run a one time process that replays the event store for any relevant entities and let the new denormalizers/handlers pick them up and backfill the new projections. &gt; How do I centralize this command being collected into some persistence pipeline. What does it mean in actual code when the goal is to replay events from event-journal store to reach object states? A service bus. You drop commands onto the service bus, then the handler routes it to the domain, but for the sake of discussion, I'll ignore the actual structure. The domain can tell the bus to save events when appropriate, and that is delegated to a handler elsewhere in the domain to deal with that. To get data to the query side, you have an event listener that listens for a "ThingWasRecorded" event (which is the event being appended to the store) and then uses that data to put denormalized data into a different database which is your "view store" and that can be any implementation (graph, doc, nosql, rdms, etc.) or several implementations. Let's say the command was to debit from an account. The first thing that has to happen is you grab the event stream for the entity out of the store, then new up the account object, then you loop through the events and apply each one to the object -- that gets your object to a current state. Now apply the debit command to the account object, which updates the object state and also saves the debit event to an internal list of *new* events, then persist it back to the event store which will append the new events to the store for that entity. Then when that happens, you'll publish and event (after event is successfully appended), and any handlers on the query side will pick that up and put it where it needs to be. This isn't based on any actual event store (I've never used Akka), it's just the general idea: var events = store.GetEventStream(id); var account = new Account(); if(!events.Any()) { var newAccount = new CreateAccount(); account.Apply(newAccount); // how or when this gets persisted can vary based on requirements } else { // replay events to get current state foreach(var @event in events) { account.Apply(@event); } } account.Apply(debitCommand); store.Save(account); &gt; The state that has really changed is that anywhere I'm using the IMarketRepository there is an additional stock available under GetAll(...), GetOne(...), GetSome(...) methods return value. Now, I'm using Akka Actors to send message to the IMarketRepository telling it to update it's market listings information. What exactly do I store in my event store? Confusing question. Inside of the domain object, you're supposed to use the event to update the object state and also publish an event (see service bus) to the system. One technique that is used for collaborative data, is an in-memory, running segment of all event streams currently in flight. That way anything currently in flight will get the new event as they occur without calling the event store. Then on a schedule, you snapshot the events in memory back to the actual store and reset the in-memory store. I'm not sure I explained that right, but you can use that as a thread to pull on. &gt; What exactly do I store in my event store? Everything that happened. Event for event. I described the process above. &gt; or I could not bother with the new stocks creation but rather just the addition to the IMarketRepository with the assumption that if this stock is showing up in the repo, it must have been created I wouldn't assume. Basically, always ask the event store for all events for an entity. If you get none back, you just don't have anything to apply to the object you're about to new up, in which case you should apply an event called CreateAccount, for example. &gt; Should I be thinking along these lines or am I totally missing the point? If you're doing CQRS, it seems that you're missing a few parts just based on what I read here. For example, there's no updating with events, just appending.
&gt; You mention Event Sourcing, CQRS, and Actors. That's a whole lot of buzzwords, Those aren't buzzwords; they're nomenclature.
&gt; But should I also be storing my actual data...eg StockDayData has open,high,low,close,volume, date(which will be permanently stored in SqlServer) In CQRS with ES, you store the events as they happen in an append-only fashion, but then you have the query side pick up the events and use the data in the message to put them in a data store(s) in whatever format makes sense for that service. So for instance, a projection in the view store (query side) might be called "AccountState" which might include account status and balance. If an event is stored saying that $10 was withdrawn, then a handler on the query side would catch that event, then go to the AccountState table and decrement the balance by $10. So you have a materialized view ready to go which will be used by all consumers of the data. That's a simple example. Your projections could be anything. The point is that the view store(s) collect data in a format that considers how that data is going to be consumed. In other words, not normalized; human readable, usually. This simplifies querying immensely, and increases read performance as a result. Just to clarify, yes, I am saying that each service written under this model will have at least 2 data stores: an event store and one or more view stores.
Was worth a shot. Could also try to reset your VS settings. Or use the "Repair" feature.
Doing a repair was suggested on another thread but I've been avoiding it as this is a fresh install of the software. Something could have gone wrong with the installation though so I'll give those a try. Thanks for the help!
Instructions not clear, got dick stuck in ceiling fan. 
Using a single dictionary would involve constantly filtering prompts. Maybe a graph would be better?
Yup- this is the correct way to accomplish it
Maybe using an Enum and a Switch/Case would help?
Anything showing up in the event logs?
HTML5 Canvas: Somewhat far from your requirements but it is easy to use and I think I have seen somewhere an example with snowflakes (I will post it if I found)
As you said, the usage of concurrency was incorrect. It is now fixed: now, it refers to "maximum amount of parallel operations" and "processed in parallel according to the given limit"
There are different ways: - Reading the ram ( most cheat engines do it ) - Always have the console at the same position, wait 20 seconds -&gt; doMousclickRoutine() - Use an API if it exist ( for csgo there is one to read gamestates())
Hi, Thanks for your reply. I tried to dig in a bit on the gameStates() API. This looks like listener set up when the game has connected to the server. 1. But what I'm trying to do is to launch a replay. For that, I might have to click at different places, input a bunch of keystrokes (MatchID) and then download the replay. Then wait until it is downloaded, then click on the different button to launch replay. 2. How would my script know all these events? If I fall back to mouseRoutines(). Is timeouts the only way to do this? Is there a way I could know if the screen has changed? 3. Is it easy to read the RAM ?
I completely agree with /u/plastikmissile with using a dictionary dotnetpearls always seem to have helpful pages to learn this stuff. https://www.dotnetperls.com/dictionary this page should let you know about building a dictionary and getting values from one. Building a text rpg through cmd sounds like a fun way to get into programming, I'm assuming it was with a lot of echos and GOTO: ? 
Hello, friend! Yes, I know a good and proven website builder servise. I advise to you to use the excellent website builder from http://www.webstarts.com It is an excellent solution for making a website from scratch without doing much effort. You will have a huge set of different and useful tools. Building a website there takes you a couple of minutes. Good luck!
ill look into it thanks!
This seems to be a typo (missing '#') rather than some cheeky remark that C# is generation(s) ahead of C. Did you even read that paragraph? He doesn't mention C anywhere inside of it.
Do you have any errors on startup? You may want to make sure your path variables are not too long. Especially since you said it is a new install.
Okay, there's a windows interface engine in C# that allows you to do this stuff. With an app called spy++, you run it and try to figure out unique information about which button you want to press when, then you send that button a mouse click. This most certainly can be automated, and doesn't need to be hardcoded positions. is pInvoke a pain sometime? Yes. You'll need to look through windows, and the probably loop through child windows to get the item you want before sending it clicks, and then repeat for your new window. http://www.pinvoke.net/default.aspx/
Pet peeve: `if (*condition* == true)` is 100% equivalent to `if (*condition*)`. Don't do that. Don't check for `== false`, either: that's what `!` is for! Return codes aren't *great*, but they are pretty good *and* they're much easier to reason about than exceptions, generally. And it's almost guaranteed to be better than dropping all the user interaction in your copy function with the actual work. At the same time, if everything except `CopySuccessful` is an error caused by (basically) arg validation, it would be more idiomatic to detect each condition and throw a separate exception for each error (you might need to define your own exceptions for this). This would look more like this: private void StartCopy() { if (IsDirectoryEmpty(sourceDir)) { throw new EmptyFolderException(); } // etc // do copy stuff } private void btnStartCopy_Click(object sender, EventArgs e) { try { StartCopy(); MessageBox.Show("Copy Successful!"); } catch (EmptyFolderException e) { MessageBox.Show("Source folder is empty; cannot copy an empty folder. Please try again."); } // more catch statements } ETA: In regards to [error codes vs exceptions](https://blogs.msdn.microsoft.com/oldnewthing/20050114-00/?p=36693). Took me a few minutes to dig up Raymond Chen's article. From only 11 years ago.
You can fix it by using print screen.
I don't think this will work in this case as if it's actually steam it's likely the interface is rendered using OpenGL/DirectX and not using the Windows API at all for buttons. I might have read the question wrong though. It wouldn't be the first time.
Well it started off cool but his code didn't work so what was the point of that?
This is delicious. Expect a long reply once I get my thoughts sorted out
okay I'll give that a shot. With the connection string, I looked up how that's meant to be formatted but every example I've seen has an explicit definition of username + password. Is there a way to use with windows authentication?
I tried going the ADO.NET route but couldn't quite get it and couldn't really find any tutorials on it...yes I'm super noob at this
I have no help for you but just came here to say that Visual Studio 2015 is without a doubt the worst release of Visual Studio ever.
Or you could... you know... press ctrl+c when a Windows dialog is being shown to just copy the formatted text of the message to the clipboard.
I sound all over the place and it just seems like a habit for me. It makes sense because this is my first foray into programming. I've been working on the same project for almost 2 years simply by googling stuff and now I have this giant jig-saw of a design that sometimes feels way to much to handle for my brain. Everything I touch ends up turning into a mind-melt. I know exactly what I'm trying to design and implement so in my head a lot of it makes sense even if I can't get all my thoughts down in words. Programming is the first thing where I've struggled so much to just phrase simple questions. Every time I start asking a question it turns into a ramble. Kinda like this msg... Anyways, I kinda figured some simple case scenarios would benefit from designing and I can now vision through my event source requirements. I still have to figure out the details about its final position within the architecture.
Alt+PrintScr to copy the dialog image to the clipboard. Alternately Windows dialogs support Ctrl+C to copy the formatted text only. That's a simpler workflow, to me.
&gt; Pet peeve: if (*condition* == true) is 100% equivalent to if (*condition*). Don't do that. Don't check for == false, either: that's what ! is for! Out of curiosity, why is this a pet peeve for you? The idiomatic short style and the explicit comparison reduce to the exact same compiled instructions, correct? Therefore, wouldn't the explicit comparison make sense to promote code readability, especially considering you never know who might be looking at that code in the future? I personally see it done both ways by people at many levels, but my preference is to include those sorts of things for the reason above.
My reason for it is that it promotes functionless redundancy and therefore bad code. Otherwise, why stop there? ``` if (((2&gt;1==true)==true)==true) { ... } ```
Yeah, so usually this is known as hooking the graphics API calls and replacing it with your own. See http://spazzarama.com/2011/03/14/c-screen-capture-and-overlays-for-direct3d-9-10-and-11-using-api-hooks/ for an example
This is going to be a wild ride of a thread
In the original post it's if(IsDirectoryEmpty(dir) == true). I don't believe that's more readable than if(IsDirectoryEmpty(dir)). Comparing booleans to true just looks like a misunderstanding of what a boolean expression is, and to me it's a mark of a junior or inexperienced developer. Not in a bad way, it's just something you grow out of as you gain a deeper understanding.
I totally disagree with the current given proposals: * error code * return type I also dislike the linked rant against exceptions. First of all think from a client's point of view that would like to use your API: ``startCopy`` clearly sounds like a **command** and not a query. Therefor it should better not return something. If it would, the client has to deal *immediately* with it! If you cannot solve the problem there or cannot react to it, you will have to return it further or introduce another error management. Both solutions are cumbersome and will clutter your code. I would suggest an ``exception`` here! They are made exactly to solve problems like this. The client is free to ignore it and to leave the handling to upper methods in the call stack or to react immediately to it. Big advantage compared to return code based APIs. One important note independently of which approach you take: Prefer not to make user interaction within your process. It almost always affects testability and reusability in a bad way. So whatever you do, ban user interactions from your functional code. One last thing: Those tests concerning the disk structure are not safe! You just have no control over the FS and therefor those queries will not guarantee anything. So you would probably better catch the OS exceptions and transform them to your own or deal with them directly.
When you say that the value is properly calculated, you mean that you set a breakpoint and examined the value of newImageHeight before and the line executed, right? Because, if tempImageHeight is less than tempImageWidth, `tempImageHeight / tempImageWidth` is going to be 0. Integer division and all that.
 newImageHeight = (tempImageHeight / tempImageWidth) * width; Integer division only produces truncated integers. If you require fractions, you must cast at least one of the operands to a `double` (or another floating point type) first.
hmm, you see, I am so stressed out today I did not realize that. I had to evict my son today. hard day. you're correct. thanks! 
theres a button on your keyboard that says print screen or ptrscr or something similiar. it takes a screenshot. Also the snipping tool is mentioned in other comments
It might be as simple as `Process.MainWindowHandle`. If that doesn't work, you may need to pinvoke [`EnumThreadWindows`](https://msdn.microsoft.com/en-us/library/ms633495.aspx) or something along those lines.
* Alt+Printscreen * Go to imgur.com * Ctrl+V (Yes, you can paste directly into imgur!) * Done
System.Threading.Tasks.Task.Run will spawn a new thread and return an object that will let you wait for that thread to end
No I wasn't using Request["available"] when sending values with ajax. I just tried to use different method(ajax) because Request["available"] was passing in null values. Didn't succeed though. Funnily enough Request["status_message"] for my textbox value is working. No idea why.
I'm going to ask you a favourite question of my development team when we run into things like this: "What problem are you trying to solve?"
This worked. Thanks!
I think it might be way too vague a question to get a whole bunch of responses. I started to type something out, and then realized I need to know way more about what he's talking about.
If you have a class, such as Cat, and it has certain member variables inside that you do not want to publicly expose from outside the scope of the class, you would use what are called Properties in C#. For example: public class Cat { int lives = 9; public int NumberOfLives { get { return lives; } set { lives = value; } } } When you create an instance of Cat, there will be an accessible property called NumberOfLives. You can read or assign to this value by just using an equals sign, rather than the traditional way of using a method to set or read a variable. Also, as a side note, you can do validation from within set. So that if a value is outside a certain range, you can throw an exception or act accordingly. So using this in a program would look like this: void SomeMethod() { Cat felix = new Cat(); felix.NumberOfLives = 8; //felix had an accident felix.NumberOfLives--; //you can use any operator as if it were a variable. He had another accident Console.WriteLine("Felix has {0} lives left.", felix.NumberOfLives); } Hope this helps ;) 
Removed: Rule 4. Bit too broad of a question and not really a question posed anyway. For the most part, if you make a C#-based application (WinForms, WPF, Console) you should be able to do pretty much anything even if it means having to make function calls into the Win32 API or execute other command line functions (like executing a powershell script). No idea what you have to do to achieve those 3 requirements, but it should be possible; you'll just have to do the research online on how to do those in C#/.NET. Also mind you, regarding the forcing of changing passwords and logging information, this might depend on how you're tracking users or what authentication provider you're using.
My tip is to go with dapper which will allow you to smoothly map data comming out from your SQL query. It looks and runs like the standard way of doing it but its just better to work with. http://www.infoworld.com/article/3025784/application-development/how-to-work-with-dapper-in-c.html If you are going to be working alot with web applications i recommend looking into Entity Framework.
That's funny because a pet peeve of mine is sneaky little !'s that you don't spot, giving you the wrong idea about what the code is doing. I almost **always** do == true or == false. if (!isSomethingTrue(foo, bar, fnord) || blahBlahBlah == Blah.Blah) It's easy to miss that exclamation mark. 
/u/FizixMan What do you mean by authentication provider?
I wanted to use it for auditing. So each entity (more than shown above) gets an entry with "Action:create/update", "Timestamp", "User" etc. Since this is needed for more tables I dont want each audited entity have a "Companion table" for audit info, nor extend each table with the same few fields.
Thanks, I did look at MediatR and did actually like it and it certainly has a ton of features, however I wanted to have something much simpler and closer to the metal so-to-speak to meet our low-latency and low GC pressure requirements.
This should help you. http://stackoverflow.com/questions/32669840/im-not-understanding-the-usage-of-c-sharp-get-set-seems-to-be-different-from/32669928
Yeah, I'll be OK. I got it working. Now onto the next piece, encoder options... jpg quality by default is bat shit.
The service in charge of storing the usernames/passwords and authenticating the passwords. Is it Windows? Active Directory? (I guess this is the one) Database? etc.
"Exceptions are for exceptional things" is circular logic, it doesn't mean anything. When doing I/O, there are a lot of "exceptional" circumstances to think about. I'd say OP's enum models at most half of all the things that could go wrong. I mean, there isn't even a status code for a full disk. Or for a timeout due to a failing disk. Or for any security issues. Man, you'd have to be clairvoyant to write that enum properly. When doing I/O it's impossible to rule out all error conditions beforehand, due to the inherent race-conditiony nature of it -- you can check that the disk is not full, but before you can act on that knowledge, some other process can fill it up, and you'll be working with outdated information. Now you'll still get an exception, that you tried so hard to avoid with your cute status codes, and then you're programming with two ways for modeling errors. I say this sucks, and would shoot it down in any code review. 
You are absolutely right and for this reason I am restructuring to use exceptions.
Case 1: You are confusing the class with the instatiation of it. seatA1 is a non-static field, which means it is initialized for every object you create. You need to reference the object created from the UI class. Case 2: "this" references the object the method is executed in. "this.seatA1" is the same as "seatA1". I suspect your are operating outside of your UI object, therefore "seatA1" doesn't exist for the object you want to reference it from.
Time to channel Donald Rumsfeld: &gt; Reports that say that something hasn't happened are always interesting to me, because as we know, there are known knowns; there are things we know we know. We also know there are known unknowns; that is to say we know there are some things we do not know. But there are also unknown unknowns – the ones we don't know we don't know. And if one looks throughout the history of our country and other free countries, it is the latter category that tend to be the difficult ones. * known knowns -&gt; successful handled state changes * known unknowns -&gt; failure handled state changes (notably stuff that a user can reliably fix) * unknown unknowns -&gt; exceptions Stopping the copy because the folder was empty is a condition you can reliably handle with a message to the user... so it shouldn't be an exception Disk becomes full while copy was in process because you were also downloading porn... not a problem that can be reliably checked for and handled, should be an exception.
Yes its Active Directory.
I fully understand where you're coming from, I guess that must just be the odd way my mind processes reading the statement (and I've been doing that for many years now). To my mind, it just deviates from the standard pattern of function calls in statements in .NET languages, an anomaly if you will. Anomalies drive my mind nuts because I keep slowing down looking for something that's wrong, even when I know there's nothing there.
I don't personally know the features/limitations of AD, but I'm sure there are various resources and APIs that you can access. Worst case scenario, if you can do the work with PowerShell, then you can externally invoke those scripts from a C# application. 
ignore him, there's no way he isnt trolling you
probably perhaps even better: var local = _array; var size = _size; var srcIndex = 0; var dstIndex = arrayIndex + size; while (srcIndex &lt; size &amp;&amp; (uint)srcIndex &lt; (uint)local.Length &amp;&amp; (uint)dstIndex &lt; (uint)array.Length) { array[--dstIndex] = local[srcIndex++]; } (it might permit the JIT system to skip bounds checks on the arrays if it is provided guarantees that the variables cannot change)
What are you trying to do with `return char SID`? Update `GETINFO` to have a return type instead of `void`, and reassign that over `SID` in the `button1_Click` event. If you need more help getting into the basics of C#, check out the learning resources in the side bar, or the resources available at /r/learnprogramming and /r/learncsharp.
Well, first, your GETINFO method is doing a void return, but you're then return char SID. Change that to return SID; and change the void to string. Next, when you call GETINFO(SID); change it to SID = GETINFO(SID); That way it will take the return value from GETINFO and make it the string.
There's a code button above the comment box. There's also a formatting help link below it.
Why not bind the button presses to Ajax functions that simply send a defined post?
I actually pinned the snipping tool to my taskbar, so it's no typing. I just have to hit new. But I'm confused why you have trouble figuring out where windows put the tool on your monitor(s). I guess you have quite a lot of screen real estate. For me to use my phone is actually more work, since even if I take the picture, I still have to get it to my computer somehow before I can use it. I usually just email it to myself but I suppose I could use dropbox or something.
Was it working before with this version of VS or was this computer complete VS free before? When does it happen? When you hit New Project? Or when you choose what kind of project and give it a name? If it's when you pick a project type, does it happen for every project type or just specific ones? The default directory for projects still exists and is accessible by VS, right? Did you make any computer changes or anything after you installed this VS install?
I don't know exactly how fast this is, but it's a fun exercise in packing data, anyway. You could actually fit 6 positions in a single "word" in JavaScript, because all ints are actually 53-bit signed floats. If they were 64-bit unsigned ints, you could fit 8. This would allow you to store all piece positions in 6 variables, costing you 318 bytes + whatever overhead the JavaScript VM has for allocating and tracking those value. var positions=[]; function storePosition(position) { positions.push((position[0] &lt;&lt; 4) + position[1]); } function getPosition(index) { var y = positions[index] &amp; 0xF; var x = positions[index] &gt;&gt; 4; return [x, y]; } function translatePosition(index) { var position = getPosition(index); return [ position[0].toString(16), position[1].toString(16) ]; } storePosition([0xE, 0x4]); -&gt; undefined storePosition([0xF, 0x5]); -&gt; undefined storePosition([0xA, 0x1]); -&gt; undefined getPosition(0) -&gt; [14, 4] getPosition(1) -&gt; [15, 5] getPosition(2) -&gt; [10, 1] translatePosition(0) -&gt; ["e", "4"] translatePosition(1) -&gt; ["f", "5"] translatePosition(2) -&gt; ["a", "1"]
I see the problem now. I will fix this bug. Thanks for pointing that out.
LocalDB?
Could you place that in my original code because I am having a hard time understanding where to put it.
In the end, it's different for everyone. I use snipping tool on a laptop that goes from one screen on the move to three screens at my desk. As a result, it could end up anywhere. As for getting the picture to Reddit, I can just hit "Share. . ." on my phone and then click Reddit and boom, versus having to open imgur and ctrl+v it, then copy paste the URL over to Reddit. Honestly, I use snipping tool for everything, because it gives me more control (and pixel-perfect images). But it would, technically, be faster for me to just use my phone. /shrug I'm just playing devil's advocate. I have no problem with people using their phones if it's the way they understand. So long as what they're taking a picture of is readable, I don't see why it's such a big deal. 
Finally somone who understands my point of view :-)
Hey thank you all for replying! While all of your info helped I am still a little bit confused. So am I right in saying that you can use the set; thing to basically give objects properties (which are like little variables attached to the object) and then use get; to like return the value of one of these properties to something (like a method)? Is that the general idea? Also why do we have to put { get; set; } whenever we create the object? Is it to tell the computer that it needs to be able to have properties attached to it? Thank you to everyone and sorry about this - I have a really hard time understanding things on the c# and unity c# manuals online!
&gt;I know it's possible to simply make the protection levels for the methods public, but I heard that it's bad practice to have many public methods and variables, is this true? Are there any other ways I can fix this without changing protection levels to public? Members that the outside needs to access should be public. There is nothing wrong with having public members, you just shouldn't *unnecessarily* expose internals that the outside does *not* need to use. Also, C# has [properties](https://msdn.microsoft.com/en-us/library/x9fsa0sw.aspx) in place of the get/set method pattern.
Ohhhhhhhh I get it now! Thank you everyone who responded!
All the classes are in a single file, and there is no readme.
Just to add to /u/tweq's reply, which is completely correct: A "class" is used to create "objects", and objects do "things" which the outside world can see and control. You've create a class called "Rectangle" which you can use to create Rectangle objects. Rectangle objects have certain things they can do. In your example, you want a rectangle to be able to do something called "getLength" and something called "getWidth", and you want the outside world (classes other than Rectangle, such as MainClass) to be able to have access to those "things". That's what "public" is for. The next step of the puzzle is *how* Rectangles do those things. When you start writing more advanced code, you'll find that in order to do some of the things which some classes need to do, they have to follow some complex processes. This might include calling other methods or changing other properties which are *not* supposed to be used by the outside world. And that's what "private" is for. TL;DR - public is for *what* a class does, private is for *how* it does it. This enables you to change the "how" bit later on without any other class having to be updated, or having to worry about the change in any way.
Also, since the title is "simple-cqrs" I feel like a retard trying to understand it.
&gt; but I heard that it's bad practice to have many public methods and variables, is this true? Define many. Hundred is bad, 20 is OK. It depends on the class. getWidth should definitively be a public method since it is public surface of the rectangle concept.
You're right. It's really not a big deal. Well, unless they print it out, take a picture of it on a table, load it into Word, and email the document. 
&gt; Can I model this differently? You probably would benefit a lot from some variety of model-view-controller architecture. It's not clear if that would be worth refactoring whatever you've got going on in (I assume) WinForms, there, but it would force you to separate your business logic (like all the code validating source and destination directories) from your UI code (all the enable/disable/show/hide/etc stuff involving controls). That would clean this up a bunch and probably let you deal with the business logic itself in a cleaner way. If the current architecture is something you're married to, though, the big thing I think I would do (off the top of my head) is split some of the logic in your StartCopy() method out to separate methods to harvest data from the UI controls, validate the data, and update the UI based on the validity of the data. That would give you something like public void StartCopy() { PictureBox1.visible = false; var copyDriveParameters = ValidateCopyParams(HarvestCopyParams()); if (!copyDriveParameters.IsValid) { HandleCopyValidationError(copyDriveParameters.ErrorCode); } sourceDir = copyDriveParameters.SourceDirectory; listDrivesToCopy = copyDriveParameters.DestinationDirectories; ReenableUI(); backgroundWorker1.RunWorkerAsync(); return; } private CopyParams HarvestCopyParams() { var source = (string) dirsTreeView.SelectedNode?.Tag; var destinations = new List&lt;string&gt;(); PopulateListOfDrives(lstDrives, destinations); return new CopyParams(source, destinations); } private ValidatedCopyParams ValidateCopyParams(CopyParams parameters) { if (string.IsNullOrEmpty(parameters.SourceDirectory)) { return new ValidatedCopyParams(ValidationErrors.NoSourceDir); } var dInfo = new DriveInfo(sourceDir.Substring(0, 2); if (!dInfo.IsReady) { return new ValidatedCopyParams(ValidationErrors.SourceDriveNotReady); } // etc, etc: more validating omitted // everything is fine: return new ValidatedCopyParams(parameters); } private void HandleCopyValidationError(ValidationErrors errorCode) { switch (errorCode) { case ValidationErrors.NoSourceDir: MessageBox.Show("Please select a valid source folder.", "USB Batch Copy", MessageBoxButtons.OK); return; case ValidationErrors.SourceDriveNotReady: case ValidationErrors.SourceDirDoesNotExist: MessageBox.Show("Source folder does not exist, or source drive is not ready. Please try again.", "USB Batch Copy", MessageBoxButtons.OK); dirsTreeView.Nodes.Clear(); PopulateTreeView(dirsTreeView); return; // etc // good practice, because it should be unreachable if you're // switching on enums properly: default: throw new ArgumentOutOfRangeError(); } } private struct CopyParams { public readonly string SourceDir; public readonly List&lt;string&gt; DestinationDirectories; public CopyParams(string source, List&lt;string&gt; destinations) { SourceDirectory = source; DesinationDirectories = destinations; } } private struct ValidatedCopyParams { public readonly string SourceDir; public readonly List&lt;string&gt; DestinationDirectories; public readonly bool IsValid; public readonly ValidationErrors ErrorCode; public ValidatedCopyParams(CopyParams parameters) { SourceDir = parameters.SourceDir; DestinationDirectories = parameters.DestinationDirectories; ErrorCode = ValidationErrors.None; IsValid = true; } public ValidateCopyParams(ValidationErrors errorCode) { if (errorCode == ValidationErrors.None) { throw new ArgumentException(); } SourceDir = string.Empty; DestinationDirectories = new List&lt;string&gt;(); ErrorCode = errorCode; IsValid = false; } } which probably looks really verbose, but should be easier to keep up with, by isolating side effects and making at least parts of it (validation) testable. I don't know if you'd benefit from using a Task instead of a BackgroundWorker. Unfortunately, async and UI stuff is pretty far out of my wheelhouse, so I'm not sure how that one shakes out.
Nice. I gave it a Github star and a tweet.
Sounds like separate classes for file data, PNG/JPG/PDF exporters, database layer, file system interaction, and actual processing logic. Ideally, 1 class per file, and 1 file per class, up to about 500 lines of code. Namespaces below the root each get their own directory. Practically speaking, very small/simple types could be lumped in a single file per directory, but that would be things like small enums and simple POCOs/structs. If a class has to be split across multiple files, try to keep each file cohesive, so that Class.A.cs is all the parts of Class that pertain to responsibility A, Class.B.cs is all the stuff involved with responsibility B, etc.
You do good or interesting work, people should know about it
 Html &lt;div class="jumbotron"&gt; &lt;div class="container"&gt; &lt;div class="row"&gt; &lt;div class="col-md-6 col-md-offset-3"&gt; &lt;form action="#" method="post" role="form" enctype="multipart/form-data" class="facebook-share-box"&gt; &lt;div class="share"&gt; &lt;div class="arrow"&gt;&lt;/div&gt; &lt;div class="panel panel-default"&gt; &lt;div class="panel-heading"&gt; @*&lt;i class="fa fa-file"&gt;&lt;/i&gt;*@ &lt;div class="row"&gt; &lt;div class="col-md-7"&gt; &lt;div class="form-group"&gt; You are: &lt;div class="btn-group "&gt; &lt;div class="btn-group"&gt; &lt;button type="button" name="statusButton" id="statusButton" value="available" class="btn btn-default type "&gt;&lt;span class="available"&gt;Available&lt;/span&gt;&lt;/button&gt; &lt;/div&gt; &lt;div class="btn-group"&gt; &lt;button type="button" name="statusButton" id="statusButton" value="inNeed" class="btn btn-default type "&gt;&lt;span class="inNeed"&gt;In Need&lt;/span&gt;&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="panel-body"&gt; &lt;div class=""&gt; &lt;textarea name="status_message" cols="40" rows="10" id="status_message" class="form-control message" style="height: 62px; overflow: hidden;" placeholder="More Information..."&gt;&lt;/textarea&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="panel-footer"&gt; &lt;div class="row"&gt; &lt;div class="col-md-7"&gt; @*&lt;div class="form-group"&gt; &lt;div class="btn-group"&gt; &lt;button type="button" class="btn btn-default"&gt;&lt;i class="icon icon-map-marker"&gt;&lt;/i&gt; Location&lt;/button&gt; &lt;button type="button" class="btn btn-default"&gt;&lt;i class="icon icon-picture"&gt;&lt;/i&gt; Photo&lt;/button&gt; &lt;/div&gt; &lt;/div&gt;*@ &lt;/div&gt; &lt;div class="col-md-7"&gt; &lt;div class="form-group"&gt; &lt;input type="submit" id="submit" name="submit" value="Post" class="btn btn-primary"&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; jquery $(function(){ $('#submit').on('click',function (e) { e.preventDefault(); var btnValue = $('.btn-group &gt; .btn.active').val(); var statusValue = $('#status_message').val(); var frmData = { ButtonValue: btnValue, StatusValue: statusValue }; $.post("/Home/Index",frmData, function(data, status, jqxhr) { alert($('.btn-group &gt; .btn.active').val()); }); }); }) controller public ActionResult Index() { return View(); } [HttpPost] public ActionResult Index(PostAvailabilityViewModel viewModel) { string id = User.Identity.GetUserId(); // Get the userprofile ApplicationUser user = db.Users.FirstOrDefault(e =&gt; e.Id == id); switch(viewModel.ButtonValue) { case "available": isAvailable = true; isInNeed = false; break; case "inNeed": isAvailable = false; isInNeed = true; break; default: isAvailable = false; isInNeed = false; break; } user.available = isAvailable; user.inNeed = isInNeed; user.extraInfo = viewModel.StatusValue; db.Entry(user).State = EntityState.Modified; db.SaveChanges(); return View(); } If i use e.preventDefault(), the page doesn't refresh but database is updated with correct values. If I don't then it the update is very inconsistent. Sometimes it does, sometimes it doesn't. All this hassle just because I didn't want to use radio buttons because they look ugly. Sigh. 
why is this `+=` instead of `=` &gt; myTextBox.Text += String.Format.... 
After some searching around, I noticed that I was not including an Associate ID tag which is now required to use the API. This made it work: itemSearch.AssociateTag = "mytagstring";
Removed: Rule 4. Plenty of resources available on how to read directory content. Not sure about reading the image metadata effeciently without loading the image into memory. Here's a start though: http://stackoverflow.com/a/2207294/1269654, and http://stackoverflow.com/a/552642/1269654 Outputting the array/text content is fairly trivial. Give it a shot and ask specific questions on how it isn't working.
You are headed in the right direction as a developer if you are thinking this way, remember to keep it up, your code 6 months ago should always suck compared to where you are now. I agree with u/Canthros keep things separate and compartmentalized. Follow SOLID principals to start with then get a bit more functional as you get more comfortable with how they mix. Remember that abstraction is ok and needed, shims, facades and such are often needed to create a clean and usable API on top so don't ignore that glue code and wire directly to things. Finally many disagree but I lean toward interfacing all the things until I get closer to being done with development then i pull out the interfaces that are not really needed. PS - Dependency injection is your friend in OO.
 public static Task&lt;TResult&gt; WithWaitCancellation&lt;TResult&gt;(this Task&lt;TResult&gt; task, CancellationToken cancellationToken) { return task.IsCompleted ? task : WithWaitCancellationInternal(task, cancellationToken); } private static async Task&lt;TResult&gt; WithWaitCancellationInternal&lt;TResult&gt;(Task&lt;TResult&gt; task, CancellationToken cancellationToken) { using (var cancelWaitOnCompletion = new CancellationTokenSource()) using (var linkedTokenSource = CancellationTokenSource.CreateLinkedTokenSource(cancelWaitOnCompletion.Token, cancellationToken)) using (var cancelableTask = Task.Delay(Timeout.Infinite, linkedTokenSource.Token)) { Task completedTask = await Task.WhenAny(task, cancelableTask); if (completedTask == task) { cancelWaitOnCompletion.Cancel(); return await task; } else { cancellationToken.ThrowIfCancellationRequested(); throw new InvalidOperationException("Infinite delay task completed."); } } } Blegh. Surely there is a way to do that with fewer allocations.
Declare things as late as possible. Especially for things like for loop indexes. This keeps your scope clean and makes it easier to reason about what's happening. Consider using var for values initialized where they're declared, especially if you don't care too much about what, exactly, the type of the variable is. If you're referencing types from another namespace, you might want to throw in a using directive at the top of the file so you don't have to repeat the full namespace of the type(s) every time they appear. EncoderParameter and EncoderParameters both implement IDisposable. You should verify whether or not those need to disposed. Ditto for the Bitmap that gets stored in tempImage. Applying those specific recommendations yields something like this: using System.Drawing.Imaging; public class Class1 { public void ExportSlideAsImage(int slideNumber, int width, ImageFormat imageFormat, String fileName, String codec) { var sl = pres.Slides[slideNumber]; var myEncoder = Encoder.Quality; // CONVERT THIS FROM IMAGE FORMAT MIME TYPE -- Do this soon! var myImageCodecInfo = GetEncoderInfo(codec); using (var myEncoderParameter = new EncoderParameter(myEncoder, 100L)) using (var myEncoderParameters = new EncoderParameters(1)) { Size size; using (var tempImage = (Bitmap)sl.GetThumbnail(1f, 1f)) { // Calculate the image Height based bn aspect ration double tempImageWidth = tempImage.Width; double tempImageHeight = tempImage.Height; var newImageHeight = (int)(tempImageHeight / tempImageWidth) * width; var size = new Size(width, newImageHeight); } myEncoderParameters.Param[0] = myEncoderParameter; using (var newImage = new Bitmap(width, newImageHeight)) using (var g = Graphics.FromImage(newImage)) { sl.RenderToGraphics(false, g, size.Width, size.Height); // Save the File. newImage.Save(@fileName, myImageCodecInfo, myEncoderParameters); newImage.Dispose(); } } } private static ImageCodecInfo GetEncoderInfo(String mimeType) { var encoders = ImageCodecInfo.GetImageEncoders(); for (var j = 0; j &lt; encoders.Length; ++j) { if (encoders[j].MimeType == mimeType) { return encoders[j]; } } return null; } } u/Sasken's advice also seems very germane.
I use Visual Studio to develop C# that runs on Windows and Linux...
There's literally nothing else other than .NET Core that can run on Linux
[Mono Project](http://www.mono-project.com/) would like a word.
What YOU are writing is .NET Core. What YOU are writing runs on Linux. That does not mean that &gt; There's literally nothing else other than .NET Core that can run on Linux Because Mono will run on Linux. *Edit*: So to clear up the understanding: I read "There's literally nothing else other than .NET Core..." as meaning ".NET Core is literally the only thing..." whereas you meant "*Besides Mono,* there's literally nothing else other than .NET Core..."
See my edit. Misunderstanding of your statement.
That sounds like a good starting point - thanks! I left work in frustration, but I'll post the exception tomorrow and see if there's help to be had!
It's because I'm working in Linux, and (as far as I know) that's the only option!
Double-check that the code you're editing matches the compiled code that is throwing a (different) exception. In short, you might have a deployment problem you have to solve before you can fix the code problem. 
Yeah that's right, the two exceptions are different. One comes from a missing key (which I think I can resolve fairly easily) and the other comes from some part of the SDS library (I think?) I was starting to lose my shit a bit so I left work, but I'll post the exceptions tomorrow or Monday, hopefully not too late for some help!
Yeah that's a good point - I didn't think of that in my frustration! I'll post them up when j get back to the office on Monday, hopefully not too late for some advice.
Just post a new post it will get more attention
I believe the syntax is correct. Do you have a variable called i declared in the function?
"it gives me errors" isn't helpful. Posting the exact error is. Visual Studio error messages are usually really helpful. Read it (and/or post it here) and I bet the answer will be pretty obvious. So many beginning programmers freak out when they see any errors and they don't think to actually read the error. Most of the time it tells you exactly what you need to fix. In this case I think /u/sphere1337 is probably correct: you haven't declared "i". Which the error message would tell you.
This sounds like exactly the kind of thing I need to do, and that I could do with some help in doing! Perhaps I can post more info and get some help from you Monday?
sorry this is the whole thing using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace HelloWorld { class Program { public static void Main(string[] args) { for (int i = 0; i &lt; 5; i++) { Console.WriteLine($"Hello {i.ToString()}"); } } } } the error is ) expected When I hover over $ it said invalid expression term
What version of the net framework is your project pointed at? 
It definitely is correct; it's called [string interpolation](https://msdn.microsoft.com/nl-nl/library/dn961160.aspx) which is available since [C# 6.0](https://msdn.microsoft.com/en-us/magazine/dn879355.aspx). In fact, I'd recommend it over string.Format or "Hello " + i any day.
Make sure you have any and all updates installed of Visual Studio 2015. String interpolation (as I mentioned in another comment) is supported in VS2015 so it should really work. Maybe target framework in your project settings?
You need to keep up on your chosen language if you don't want to be left behind. Tech moves pretty quick, especially programming and competition grows daily.
Are you certain it's not a .Net Core project? It's a silly question--but who knows, maybe not, since you are TOTALLY new to .Net and we have no idea about the circumstances or the code.
I personally keep my `IQueryable&lt;T&gt;` in the database layer. I never let it leak outside of the repository. As soon as it does, who knows what people will do with it. It's better to return a collection of `T` instead.
I watch SSMS Profiler like a hawk
Would you explain why, please?
&gt;It's my understanding that querying a LinqToSql.MyTable.AsEnumerable() does not pull the entire dataset into local memory immediately like ToArray() I think its only going to be slightly deferred. Its not that different from ToArray(). To be sure that your conditions are executed in sql instead of in memory, stick with IQueryable 
But im using custom Linq extensions and interfaces as generic constraints and the members of which are not supported, it will throw an exception `'Member' has no supported translation to SQL.`
Fewer allocations and more explicit as to what is happening. If cancellation is rare you could even pool the TaskCompletionSource. Looking at the [source](https://referencesource.microsoft.com/#mscorlib/system/threading/Tasks/Task.cs) I believe they end up doing very similar things.
Then why use C#?
I'm not sure what direction you are trying to go in. Maybe your extensions can be rewritten to extend IQueryable instead of IEnumerable, so that they can be translated to SQL. 
The _size and the i++ are known before the for loop starts, so it might be easier to unroll the loop. The while loop is dependent on the variables that get changed inside the loop. 
this has got nothing to do with string interpolation and the version of the .net framework, string interpolation is part of visual studio and not the .net framework. what will break it is the using System.Threading.Tasks; if it's targeting the incorrect framwork. delete that line and run it again, if that works, it's because you are targeting an older framework. you can change the framework by right clicking on the project, ("2nd one down in the solution explorer") and you can see it in the applicaiton tab your code is fine, so make sure you are using vs 2015 and it will run just fine. please note that if you start it and it just disappears it's just because the code is exiting. run it from the command prompt or put console.read after the for loop like so for (int i = 0; i &lt; 5; i++) { Console.WriteLine($"Hello {i.ToString()}"); } Console.Read(); 
I'd love an IDE extension that highlights things in blinking red when they can potentially hit the DB.
https://www.google.co.uk/amp/s/codeblog.jonskeet.uk/2010/09/03/reimplementing-linq-to-objects-part-1-introduction/amp/ 
Is it better?
Yeah. I debated that for a while. I was going to have to reconsile the events true type at some point so the aggregate applies the right action. So I just chose to do it there
You get the json, and go Paste Special in visual studio. No need for json2csharp
Yes, it's more readable and there's no downside to using it. Except maybe if you're abusing it... (ex: I confess to doing things like $"{i}"; vs i.ToString(); ) void PrintPersonInfo(string firstname, string lastname, int age, string gender) { Console.WriteLine("Hello, {0} {1} ! You're pretty hot for a {2} year old {3} !", firstname, lastname, age, gender); // versus: Console.WriteLine($"Hello, {firstname} {lastname} ! You're pretty hot for a {age} year old {gender} !"); // or, for assignment: string output = string.Format("Hello, {0} {1} ! You're pretty hot for a {2} year old {3} !", firstname, lastname, age, gender); Console.WriteLine(output); // versus: output = $"Hello, {firstname} {lastname} ! You're pretty hot for a {age} year old {gender} !"; Console.WriteLine(output); }
I have a basic understanding of them and i know how to compile and decompile them and get MethodInfos from LambdaExpressions by traversing the Body and getting property accessors, but its a weird concept to wrap my head around. My understanding of it is IQueryables use expressions so they can be picked apart by the LinqToSql translator to completely defer logic to server side, but im not 100%.
I see the benefit of using it, the code looks more readable! Thanks for the examples. I'll have to start using it.
Quick Question, Sorry if this sounds stupid, But how would I install Microsoft.Xna to my project?
Don't know; never made an XNA project before. Maybe try the WPF library I linked instead.
Did you use an IDE? Was thinking about fiddling around in Unity. 
That is the type of thing I would say more than a decade ago when I attempted to answer questions in places such as CodeGuru.com. I think however it is not so relevant here; mushmushmush is just asking about a possibility out of curiosity and it seems to me that the fundamental problem is explained enough that we at least have an idea of what it is.
Are you using Entity Framework? You should use it. Many people however will probably say to also use MVC. That is probably a good idea too but there is so much to learn that I have not yet learned about MVC. If you are like me and don't want to use MVC then don't be intimidated when people respond as if you are doing it wrong. When asking questions like this, you should be specific about how you are using the database, whether you are using Entity Framework or not. Also if you don't want to use MVC then say so in the beginning. Also if you need to filter and/or sort the data then it helps to say that too. In WPF we use XAML and XAML has "bindings". Bindings can be done either in XAML or in code. It will be confusing in the beginning. It can be extremely frustrating to find examples because usually they only show pieces, such as they only show the XAML without the associated C# code.
Dude, you can't just talk about a useful extension and not name it!
I just write sql instead. It's difficult to understand all the query optimizations under the hood of linqtosql, and sometimes the sql it generates is just dumb. Of course if you are an expert you will know all the gotchas and special situations which would create this bad sql but I'd rather invest my time into learning proper and real sql. 
You set the items source of the DataGrid like this: ItemsSource="{Binding Files}"&gt; Files is the collection that the DataGrid will load. It can be named whatever you want of course. It's usually found in the viewmodel of the view you have the DataGrid in. In the viewmodel you have to make Files a property and you have to implement INotifyPropertyChanged (there are probably other ways too, but this is the most common one). If you have no idea what I'm talking about you should look into [this](https://www.edx.org/course/introduction-xaml-application-microsoft-dev206-1x) course on edX.
Thanks Process.WaitForInputIdle worked.
Thanks a ton for this. Although, I decided against using enum errorcodes because it's nearly impossible to cover everything. Going to be using exceptions. And yeah, this is using WinForms targeting .NET 4.0 because it's being used on XP machines. I'm not in the IT department, so that's what I have to work with. :P 
Since OP is making "a basic chess board program", efficiency is probably not important here. For a real chess program, with large opening libraries, ending libraries and a multi threaded engine that evaluates billions of positions a second, saving memory can yield a lot of performance benefits.
Where are you stuck? What have you tried to solve this yourself? &gt; Rule 4: Request-for-help posts should be made with effort Also check out http://whathaveyoutried.com
EDIT: Ok i solved how to do the log10 one already, but I don't get how to implement the 10^x.
thank you so much! it worked
This was helpful to me when learning WPF: http://www.wpf-tutorial.com/datagrid-control/introduction/ Also for MVVM: https://www.tutorialspoint.com/mvvm/index.htm
Prefer not to use inheritance unless you're absolutely sure it's the superior option. Every book teaches inheritance as like, the first thing in any OO section. But it should be taught at the end, with a "Warning: Advanced" slapped on it. Reasons: * Inheritance causes code to be *tightly coupled* (i.e. changing one thing in a parent class all the way up the chain forces every other child type that inherits from it to inherit the altered behaviour) * It is an inappropriate tool for modelling most problems (i.e. it might *seem* like `MusicalInstrument -&gt; StringedInstrument -&gt; Piano` is right, but what if you now have an instrument that is both stringed and percussive? Also are all stringed instruments in the world so similar that they can all share some common behaviours?) * It can sometimes include making fields and methods virtual. That is a performance hit (not that you should be concerned about such a micro-optimisation), but more importantly it requires writing code that attempts to handle any possible use of your virtual fields/methods (which usually touch private state) that could possibly occur from a child class or classes. There are times where inheritance is the right choice, but instead you should [prefer composition over inheritance](http://softwareengineering.stackexchange.com/questions/134097/why-should-i-prefer-composition-over-inheritance), and use interfaces instead of abstract classes. You'll often see stupid advice like "an '*is a*' relationship means you should use inheritance, like 'a car *is a* vehicle'". Ignore this. It's better to model things as components, like `public class Car : IPetrolEngineVehicle, IWheeledTransport, IPassengerCarrier` by default. This means you can only address the relevant aspects of an object when needed (e.g. "fill up all the petrol-driven vehicles in this `List&lt;IPetrolEngineVehicle&gt;`") instead of having to somehow cross-cut those concerns in to one big inheritance tree.
`.?` is one of the *null-conditional operators* and came with C#6, that is correct. `??` is the null-coalescing operator and is already present for much longer (not sure which, at least C# 4.0).
&gt; Don't use inheritance. Disagree strongly with this statement, but your further points about composition vs inheritance are very good. Inheritance has *very valuable* uses, and just throwing out a blanket "don't do it ever" is harmful to someone learning. 
My recommendation would be to add a new column for each FK, mark it as nullable/sparse. The latter will save a lot of space if the field is usually null, as it would be in this case.
Yeah that's fair. I also hate it when people speak in absolutes. I've edited the comment.
A good programmer would break up the code and create create functions, procedures, variable names that explains how the code works. So they won't need to write comments as to how the code works. All you have to do is read the code.
I don't think it exists ;)
I wish I knew what the hell I was doing. But, I've been getting paid to write code for 25 years without actually knowing a damn thing. Why start now? Corporate America is so screwed up.
Not true. As long as you are using delayed execution you are using expression trees.
[This event invocation](https://github.com/jorgebay/concurrent-utils/blob/cf598c469dd8441464ec127f9839a12bdc3f3343/src/ConcurrentUtils/JobQueue.cs#L114) is unsafe - someone could unsubscribe between the null check and you raising the event. While we're at it, please keep to the standard .NET event pattern, using the `EventHandler` and `EventHandler&lt;T&gt;` delegates. Overall, looks not too far away from the LimitedConcurrencyLevelTaskScheduler?
It absolutely does. Evaluating that the documentation still matches the modified method should be a bullet point on everyone's DoD Code Review list.
Dammit my reading comprehension skills!
As a seasoned c# developer, how tf does Task/async/await work? Still confused to this day. In fact, here's a direct question: http://imgur.com/a/B4vpo Isn't the alternative version of that code to not use async at all? Like, if nothing in the call can be done on independent threads, why bother applying async-await to the method anyway?
I don't see how it harms readability. And it can save a lot more than eight characters if you have several nested properties.
If you don't want to read the code to know what the method does how do you plan on figuring out what the method does? If the name of the method doesn't tell you what the method actually does then you have to go to the method and read the code of the method to know what it does... Comments are also part of code so if you go to the method to read the comments you are still reading the code and not to mention comments have a real good way of being wrong. 
It sounds like you want to do system testing? I think it would be best to deploy the project to an environment with a known database. Just like if the project was actually in production. Then use a test suite to do requests much like any consumer of the API would. You would have to maintain one script to get a consistent known database. Do you mean to validate the API result against what was read from the database? In that case it seems like you are testing that the API works. Why include database? You should mock the data access and validate the API result against the mocked data. 
The shortest answer is that async can get higher throughput. Made up numbers, but my web server running sync code might manage 2000 requests per second, but my async code might be double that. If you always write async code where you can, then later on when you need higher throughput, you can have it. Worth reading up a lot more though. IO Completion Ports are a thing of beauty that make async genuinely powerful.
Let's take a method as an example: `Match Regex.Match(string input)`. Just looking at the method name... it indicates it attempts to match the input on the regular expression and it returns a "Match" object. That's all I can see from the method name. And now? There's still much information missing. What happens if it doesn't match? Will it return `null`? Will it throw an exception? What happens if I pass `null` as input, is it allowed? Is it forbidden? What other exceptions could this throw and in which cases? I had cases where this throws a timeout exception - where can I find further information on this? The method signature tells me nothing about it. Should I **really** take a look at the source code to figure this out? As you probably know, even "clean" source code can be very complex. And at the time of writing everyone things their code is clean - a year later no one. Looking at the source code disrupts my workflow. Instead of staying **where I'm writing the code** I have to jump to completely other code, another context with it's own pitfalls. And the method will likely call other relevant methods, so I have to jump around further. Why do you think that's the way to go? **I want to focus on the code I'm writing now**, not other code written by other people many years ago, and the IDE supports me with that thanks to the magic of extensive XML documentation. I call the method and the IDE immediately shows me all relevant information. The .NET framework is so great **because** it is extensively documented. Developers can quickly gather necessary information **without having to look at all the code**.
&gt; The shortest answer is that async can get higher throughput. It **can** get higher throughput, but it can also cause less throughput. Async is useful to **utilize the processor when you're waiting for IO operations to complete**.
The top level property should allow accessibility to any piece of it's implementation which should be accessible. Ex: A class with a class instance field with a Dictionary nested in a dictionary. The property that encapsulates the top-level dictionary should have a function to get-by-key the stuff in the bottom level. You should not have to crawl the hierarchy each time you go down a couple levels. The gold standard is to provide access to EVERY piece of the implementation your class encapsulates which should also be accessible. If it shouldn't be exposed it should be private, and without a matching property/getter/means of accessing without reflection.
That's a good clarification, thank you.
My first thought is a `Board` class to represent the state of the board. That would have a array of `Piece`s representing each position on the chessboard. If an item in the array is null, it represents an empty space. The use normal chess notation, e.g. "b2-b4" for the user to enter a move. You parse that, convert "e2" into a position in the array (use a `Position` class to deal with that) and you should find a pawn object (or whatever) in that slot. class Position { public int Row { get; set; } // 0-7 public int Col { get; set; } // 0-7 Position( string boardLocation ) // eg. "e2" { // Need to add in some error checking here. Col = boardLocation[0] - 'e'; Row = boardLocation[1] - '0'; } } class Board { Piece[8][8] State { get; set; } // add constructor to initialise State Piece PieceAt( Position pos ) { return State[ pos.Row ][ pos.Col ]; } } ... // Find piece at e2 Position pos = new Position( "e2" ); Piece p = board.PieceAt( pos ); Or something like that. 
Hey. Thats for taking time to help. Basically do you think the way im going now is wrong. Since you suggesting storing the info differently does that mean. The getting a list instance from user imput isnt feasable.
This x 1000. Consider functions, interfaces and APIs as 'black boxes'. If you're reading the code, no matter how well written, then you're looking at the internals of the black box. Good API documentation just informs a programmer *what* the black box does, with the useful information that /u/AngularBeginner/ identifies (what happens in circumstance X, ranges for input arguments and return values, etc). I feel like if I have to look at code itself to understand a given API call, then the black box model isn't holding up. And also as /u/AngularBeginner says, .net (and Microsoft APIs generally) are always well documented. People rag on MS a lot, but I'll say their programming documentation is generally excellent.
Learn the .Net Framework. C# is one of many languages that you use, but knowing what the Framework can/can't do will help out. Many times I've seen people coding something that the framework already did, they just didn't know about it.
Use LinqPad - Even if you aren't using linq for a task LP is a really simple stripped down IDE with built in linq contexts - no idea how I lived without it. I build projects in VS but LP is where I experiment and play. Embrace testing - it took me far too long to warm up to this. Even if you never actually run a single test it affects the way you code for the better. Single responsibility principle. C# is a very expressive language and it is very tempting to do too much in a given class. Be very, very, deliberate with the purpose of every class - Future you will appreciate it. Take notes - Keep code snippets, notes on how you solved annoying problems, etc. Practice - C# isn't an overly prescriptive language so there are a lot of ways to do the same thing. One of the best exercised you can do is to solve the same problem a few times over - Force yourself to solve it in novel or even stupid ways. It is amazing how much perspective this can give you on the language and the task. Embrace LINQ - LINQ is amazing. Not the tool for every job though. Also Method Synatax is the one true syntax - Don't let those comprehension query syntax heathens tel you otherwise :P Don't go too crazy with inheritence - Prefer interfaces Learn T4 templates - Write code with other code, how awesome and lazy is that? Learn the why behind the guidelines - There is a ton of advice out there, some good, some bad - Most is not applicable to all situations. The reason behind it is a 1000% more important than folowing all the rules all the time. Beware of frameworks that do too much for you - These include a number of 3rd party control toolsets. These are the fucking payday loans of code. You get a lot up front but you seriously pay for it later. Learn to trust your instincts... Bad design usually feels off well before the real problems with it start to manifest. Pay attention to this. Learn the hell out of delegates - Often goes hand in hand with LINQ but they are incredibly powerful on their own. Learn the internals - You can do a ton without knowing how things work under the covers but understanding the CLR, Garbage Collection, Etc will help you take things to the next level. A tool like Windbg may not be needed for most of the bugs you encounter in your career but learning it is hugely valuable. Try out different problem domains - Even within .net / c# the type of coding can vary dramatically. Always try to find developers better than yourself to work with. There is always more to learn and once you are the best developer at your company it is time to look for something new. Don't let yourself stagnate. 
i made something that will convert json -&gt; csv. it's called http://hyperclone.com/, you just email it your file.
From your questions about:Match Regex.Match(string input) is written badly. Just because the .NET framework is nice to work in you can't depend on it and you shouldn't have to be writing in .NET to have clean code either. 
Read up on functional programmings simple basic notions, and try to maintain immutability as much as you can, and also strive towards pure functions. I've been amazed how even a bit of concious effort in this regard made me write much cleaner code. Besides cleaner architecture (if done right), using a functional approach makes threading issues and testability less of a concern. The C# language really supports you in doing so, LINQ is a pretty good example, as well as ImmutableCollections.
Ill provide you with an example monday, dont have my work pc with me. Thanks!!
Yep, good point.
&gt; Since you suggesting storing the info differently I don't know how you're storing the info - you didn't say. &gt; The getting a list instance from user imput isnt feasable. I don't understand what you mean here. What isn't feasible and why? 
IDisposable and usings
I started something similar a week or two back that may be useful. https://github.com/nathanashton/WPFCalendar The repo is not up to date so may be a bit rough, but an example of what you could try.
Thanks :D
Does it? I'm aware of post sharp and fody, but raw c#? 
That is common in php as well. 
&gt; Isn't the alternative version of that code to not use async at all? The alternatives are to either not use async at all, or to use older-style async methods. There have been different incarnations of async in C# going back to .NET 1.0. &gt; if nothing in the call can be done on independent threads, why bother applying async-await to the method anyway? Multiple threads are not the only things that can be taken advantage of by async. I/O and timers are the other main things I can think of. If you call `await client.GetStringAsync()` the important thing that's happening is that control of your program now returns back to whatever is below your current context on the stack. If there's nothing important to do then the programs just waits, but if this is a webapp then now the app is free to accept another request, or if it's a GUI app it's able to repaint the window if the user resizes it. If you were to block the program by calling `client.GetStringAsync().Result` then the window wouldn't be able to repaint if the user resizes it, and you'd have these ugly black regions on the right and bottom sides (if the user increased the size).
Resharper kills my visual studio sometimes. A bunch of my coworkers turned it off because of how slow it makes their VS. 
When learning Async/Await ensure you brush up on what ConfigureAwait(false) does and why it is used and when it should be used.
Sure it does. Spring is aspect oriented, afterall..
I hear you. Every big shop I know is like this. 
do you have examples ? I tend to associate C# AOP with post build code weaving, so either I'm not aware of it in spring or we do not have the same definition of AOP.
When your repo just won't behave and you can't push no matter what... ...Use the --force
The general idea is to avoid extra overhead caused by converting your queryable object to a list. Think about it like this - the first time you use a LINQ method on a collection, it becomes an IQueryable, and when you call ToList in an IQueryable it becomes an IEnumerable. Each conversion takes time and memory. It would not make sense to throw away the IQueryable once you took the time to create one out of a list, especially if you need to end up with a List at the very end. Do all of your LINQ first, then call ToList at the end once if and only if you need a List. Calling `.Where().ToList().Where(x)` is way more work than `.Where(x).Where(y).ToList()`.
What is the difference between ElapsedTicks and Elapsed.Ticks? I always go for the values inside the Elapsed property rather than ElapsedTicks as I had weird issues with ElapsedTicks rather than using Elapsed.Ticks. Whats up with that? Edit: this explains it well http://geekswithblogs.net/BlackRabbitCoder/archive/2012/01/12/c.net-little-pitfalls-stopwatch-ticks-are-not-timespan-ticks.aspx
Lines starting with four spaces are treated like code: if 1 * 2 &lt; 3: print "hello, world!"
Oh boy. 1) Yes, ReSharper is slow as balls. It's still an invaluable tool, but I lose quite a bit of time every day waiting for ReSharper to catch up. 2) EF generates such horribly ugly queries sometimes that I wish I could still write SQL manually. Some things just aren't supported, like full-text search.
Release your event handlers.
Just reformatted the code. Thanks 
&gt; but I lose quite a bit of time every day waiting for ReSharper to catch up. I know, but like, compared to what? Doing the same thing by hand? I guarantee refactoring by hand is slower and more annoying. Resharper isn't perfect, and it *is* slow, but... what's the alternative? Is 'not using it' really a solution? If you spend 20% less time waiting for resharper, and 50% more time writing extra code... did you really win that battle? Ultimately if you're a professional, the code quality benefits you get from forcing people to use resharper out weighs any developer-waiting-for-resharper personal irritations *by far*.
Yes, that's why I put up with it. VS refactoring is catching up rapdily though. Although that certainly isn't perfect either, that damn CodeLens DLL really likes going to 100% CPU (and that's why I disable that). Realistically, I just disable it when I have to do NuGet updates for example. Already takes long enough, ReSharper adds a few hours to that. Sometimes I just close my solution and switch branches using GitExtensions instead of waiting for VS/ReSharper to stop hanging. ReSharper would be massively improved if it didn't block the VS UI thread, or used up its memory. Just run it as a different process with some communication between them FFS.
Can't you do this? public MDIParent1(string role) { if (role != "accounting") { InitializeComponent(); label1.Text = role; } }
I tried making it like this if (role == "accounting") { openToolStripMenu.Enabled = false; } It gave me this error: An unhandled exception of type 'System.NullReferenceException' occurred in Trial.exe Additional information: Object reference not set to an instance of an object.
Best option is to not access shared resources, then the order doesn't matter. :-)
Are you using visual studio to write this? If so, then add a break point on the if statement and step through the code. It's basically that the openToolStripMenu is not initialized, so it's property "Enabled" can't be set to false.
Where do I add the break point? if (role == "accounting") &lt;------- here? { openToolStripMenu.Enabled = false; } &lt;---- or here? InitializeComponent();
You dont think the world will move toward nonrelational object databases?
No? We had the NoSQL fad 2 years ago. It didn't really go anywhere.
It still shows that same error after pressing F10 after the break point. Is my if statement correct? : if (role == "accounting") &lt;------- break point { openToolStripMenu.Enabled = false; InitializeComponent(); label1.Text = role; } } 
But NoSQL (and im talking straight out of my asshole here i have no idea what im talking about and im drunk and on all sorts of drugs) just makes more sense to me. Why cant databases have like objects with structs and each object can have arrays of other objects to have a hierarchy? With sql we need to have ORMs that all sorta suck to give us an emulation of that
Hastebin/pastebin stuff you post here, and you'll get a better response..
Sql without orms is so tedious i couldnt imagine dealing with that, good on ya
This is the stuff I need to know. Thank you. 
You want to look up how "resources" work in C# - that'd be the main way to do localisation. 
They taught QBASIC six years ago? WTF
Well that's not really possible in my case. You need to access the data/models for a game, you first have to load them. Then process them, if the request got fired before they got loaded or process, they would just fail to find anything and that gives a very bad user experience. Just doing a fully async event-driven system worked wonders. (Game Files Loaded, then processing starts, Processing Loaded, Reading starts)
If you design your models immutable, then you'd avoid accidental racing conditions. You'd still have to call in order of course, but you're **forced** to do so - no accidental racing conditions. That's what I was on about. :-)
its fine for a "first programming experience".
Break it down into pieces. You'll need to write a piece to grab the web pages and parse them. (HtmlAgilityPack is great for parsing webpages) Then you'll need a piece to send the serial data to your TRS 200. I'd keep it simple at first and write a basic piece for each and test that they work. Then I'd worry about adding the details after.
Try response.End()
Removed: Rule 4. Feel free to repost it, but include relevant code. Sounds to me though that you just need to re-setup the event handlers for the copied buttons.
When i press 9 on my basic tab it pops up on the textbox, but on the other tab when i press 9 nothing pops up. Same with all the other numbers. EDIT: Oh yes the buttons I press in the advanced tab,it appears on the basic tab textbox. How do I solve it, I can't rename the textbox on the advanced tab to txtResults due to having the same name.
Here is how you can make this even nicer (less duplication): InitializeComponent(); if (role == "accounting") { openToolStripMenu.Enabled = false; } label1.Text = role; Or even: InitializeComponent(); openToolStripMenu.Enabled = role != "accounting"; label1.Text = role;
The subject is so vast that there are even entire books on the subject. Others have mentioned globalization and another term to look for is internationalization.
I hope you are drinking the. Because I see a cup of T. 
As I read it again and again, I read it as "a call is made from application A to application B using a web request. A terminates, but B continues to run." If this is correct, I don't see anyway to stop B from running. A doesn't have access to B's process and a 2nd request to tell it to stop doesn't sound feasible since the thread is already terminated and even then it's a race to see if a "stop doing it" could happen. If the issue is you have some long running task you don't want to continue running if the thread dies, you will most likely need to change the architecture. Depending on what you're trying to achieve you could do something like this: Application A send B a request to do work. A gets back a token that identifies the token. A can then query B if the work is done using the token or if A terminates it can send "stop processing" instruction for that token. B would need to written so that at key points it checks for a cancellation request and rollsback work. Edit: Another thought, rewrite B so that the server is continually checking is the requester is still connecting and stop processing on that. Similar to above, but it removes any modification to A. In both cases, you'll need to have "milestones" you can check for cancellation.
Would you mind going into more detailed explanation. Like code examples of the program I should start with? I'm sorry i don't mean to ask so much, I just have no idea how to even start. Using Xamarian Studio btw.
No worries. Here's some code I have that loads a webpage using System.Net; using System.IO; //I didn't include all the class stuff, just the method. public static string GetPage(string address) { code = 0; try { var request = (HttpWebRequest)WebRequest.Create(address); request.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"; request.ContentType = "text/html; charset=UTF-8"; request.UserAgent = "Mozilla / 5.0(Windows NT 10.0; WOW64; rv: 43.0) Gecko / 20100101 Firefox / 43.0"; request.Host = "thewebsiteurl"; request.Method = "GET"; request.MaximumAutomaticRedirections = 4; request.MaximumResponseHeadersLength = 4; // Set credentials to use for this request. request.Credentials = CredentialCache.DefaultCredentials; using (var response = (HttpWebResponse)request.GetResponse()) { var encoding = Encoding.GetEncoding(response.CharacterSet); using (var responseStream = response.GetResponseStream()) using (var reader = new StreamReader(responseStream, encoding)) return reader.ReadToEnd(); } } catch (WebException e) { HttpWebResponse errorResponse = e.Response as HttpWebResponse; if (e.Status == WebExceptionStatus.ConnectFailure) { errormsg = "Connection failure to system site."; return null; } if (errorResponse == null) { errormsg = "Unknown error trying to connect to system site. " + e.Message; return null; } switch (errorResponse.StatusCode) { case HttpStatusCode.NotFound: errormsg = "not found exception "; code = 404; break; default: errormsg = "a different error:" + e.Message; code = -1; break; } return null; } catch (Exception e) { errormsg = "a different error:" + e.Message; return null; } That reads the web page. To parse it, I use HtmlAgilityPack, which converts it to an xml type document. var doc = new HtmlAgilityPack.HtmlDocument(); doc.LoadHtml(text); You'll need to use NuGet package manager to grab that and add it to the project. From there, I don't have any code that will dump it to the serial port but it's nothing new. stackoverflow has answers on that. http://stackoverflow.com/questions/26116058/how-to-write-binary-data-to-serial-port-in-c-sharp What I would do is build the main program with stubs for the pieces, and fill in the pieces initially with basic processes to do proof of concept. So in your main, if you're using a console app, or wherever you're initiating the process, load the url, extract the data, and call the class/method you're using to send the data over the serial line. You'll also need a piece on the trs 200 to read that data. You might find it easier to just convert the trs200 program to c# on your current machine.
oh yes you are true I wish I could hug you. thank you 
Very classy sir.
index was outside the bounds of the array. error message 
https://msdn.microsoft.com/en-us/library/3zwz4dx3.aspx
 public struct Cup&lt;T&gt; where T : IBrewable, ICaffeinated {
Not all heroes wear capes
Haha it's funny because it's HTML 
can you send another link, this is broken.
Yes it's like you said, but everything happens inside the test itself: the test looks for any SQL scripts to run and then it proceeds with the call to the API. Yes your example would work. In that case I would need a script that inserts a order with field **Processed = 1**. Then I would run the test GetFinishedOrders(). This variation example is very simple and as a solution, it would be possible to include it with the other script that inserts normal orders to avoid a 2nd script. Right now, I can't imagine more complex variations but I have the feeling that I will end up with many scripts in the future. I'm new to integration tests, so I'm open for any suggestions :)
What you mean with a opportunity to test the entire path from service to database? Let's say that I wanted to test my GetOrders action from the OrderController. As a pre-condition, I would need some orders in the DB so the API could return them. What would you do? 
You mean mocks?
 int[] FC = new int[10]; Here you create an array that can hold 10 items. They are at positions FC[0] through to FC[9] inclusive. if (responce == 1 &amp;&amp; FC[FC_Count] &lt;= 10) The above is true if FC == 10, and you go on to do this: FC[FC_Count] = ++FC[FC_Count]; First: this is wrong. Write: ++FC[FC_Count]; instead. Secondly, if `FC_Count` is 10, you'll be incrementing `FC[10]` which is outside the bounds of the array (remember if it's size 10, that is indexes [0] to [9]) int responce; The correct spelling is "response". But it's a poor choice for the variable name anyway. It holds the chosen seating class, so call it something like `seatingClass` instead. int responce2; Numbers on the end of variable names are almost always a very poor choice. You have other bugs in your code too. For example: if (responce == 1 &amp;&amp; FC[FC_Count] &gt; 10) { ... if (responce2 == 2) { `repsonce2` can never be 2 here. It's already inside the `if (responce == 1 ...)` block, so it will be 1 here.
Yes it's the same flow. I now understand your concept. However, the way we do tests, restricts us from calling other actions when we are creating a test for a action. For instance, GetOrders() test can't call CreatOrders() and vice-versa. We develop seperated tests for each controller action. This way we have a more granular level of finding out what is broken and what is working when it comes to controller actions.
Is this a joke?
Well if this is integration testing, surely all the test will do is hit `/orders/create/1` and then do `/orders/get/1` to verify everything works.
https://msdn.microsoft.com/en-us/library/system.convert.frombase64string(v=vs.110).aspx sez the length of the string must be a multiple of four. Your strings are 50 characters long, which is not a multiple of 4. How did you generate the strings? As a guess, Convert.ToBase64String should produce a correct string.
Yeah, that is what I'm using.. string hashValue = Convert.ToBase64String(hashWithSaltBytes); Like I mentioned, I'm using the guys code from the linked article. Maybe you could look at it to see the problem? I'm new to this whole encryption thing.
Keep Calm and \&lt;T\&gt; (*punches self in face*)
Removed: Rule 2, Rule 1. Perhaps your intent isn't actually malicious, but this is bordering on the concept and of course, we can't really verify your intent. Plenty of resources out there probably if you google on how to change various Windows settings via command line or powershell operations. It's also not too much C# related as it is Windows OS hijacking; mostly language agnostic that way.
Have you tried a test without the database? I tried this and it seemed to work. class EncryptPasswordMain { const string TestPassword = "HowNowBrownCow"; const string EncryptionAlgorithm = "SHA512"; static void Main(string[] args) { var encryptedPassword = Helper.ComputeHash(TestPassword, EncryptionAlgorithm, null); var correctPassword = Helper.VerifyHash(TestPassword, EncryptionAlgorithm, encryptedPassword); Console.WriteLine(correctPassword); } } If that works the we can look at your database. You may have already tried this of course.
Figured it out. Very stupid on my part. Was using non-encrypted passwords before this and my stored procedure input size was set to 50 so it was only saving the first 50 characters.
Glad you found the problem.
Love it! 
My understanding is the same as yours. In C#, I rely on factories to generate objects to handle requests. Apsects can be associated with these objects and their methods through frameworks. I agree that it is not the same as having the feature available intrinsically, but it is still a very powerful feature which someone wishing to learn about the hidden powers of C# should understand exist. I've build some really useful DSLs using attributes in this capacity, particularly to access databases or to modify the behavior of web requests in distributed applications. 
Well as I mentioned above this is for a school project and we just need some type of encryption. He did not specify how we need to do it but I understand what you're saying and appreciate the information.
I don't really do PERL. You'd probably need to talk to someone in a PERL subreddit about that.
Have you considered Glass&lt;T&gt; or Bottle&lt;T&gt;?
Wouldn't that not compile because the class would have to implement both of those interfaces?
BUT ALL HEROES USE CAPS, RIGHT? RIIIGHT..?
Why are you limiting it? What if I want to put a soft drink in a mug? Oh heck, even Decaf Coffee (which doesn't implement `ICaffeinated`)
If we're getting literal, you're assuming the interfaces have definitions ;)
Tea? :P
Let's just say it was a leaky abstraction.
Mah multiple inheritance!
yes it is
&gt; Oh heck, even Decaf Coffee Burn the heretic!
💙
I know, but I'm not sure why he misspelled it.
&gt; Secondly, if FC_Count is 10, you'll be incrementing FC[10] which is outside the bounds of the array (remember if it's size 10, that is indexes [0] to [9]) OP initializes FC_Count to 1 and never increments it, so it always points to the second element of FC[]. My guess is that the problem lies with the SeatCount index.
So an outer join?
&gt; //you should use the "using" statement for **almost** all classes that implement IDisposable FTFY, unfortunately. For instance, `Task` should never be disposed. I never dispose `MemoryStream` and the like either, although that's a no-op.
I imagined the situation where you show up with this mug and one of the colleagues you hate tries hard and says its HTML. 
Yeah, and you can make your own too. https://github.com/dotnet/swag 
Only if your coffee is an unboxed value type, really. Then, if Cup&lt;T&gt; were also immutable, taking a drink would mean a new cup with slightly less coffee in it each time. Fortunately, we have a good janitorial staff to handle all the loose drinkware.
 public BraceStyle GetBraceStyle(Commenter other) { Debug.Assert(!other.IsBossOf(this)); // semantically equivalent to BraceStyle.1TBS return BraceStyle.IDoWhatIWant; }
**Solution and project organisation** Code storage: You can use [Git](https://git-scm.com/) to store your code safely on sites like [Github](https://github.com/) &amp;nbsp; More than one solution/project: Sure! Solution is usually a complete application, so you usually have multiple if you're making a suite of applications, for example. Solutions can contain multiple projects. Say you have a database layer and you want to make a form. You could have a project called 'MyApp.Database' and 'MyApp.Form'. You can have projects reference other projects, so you can easily keep things generic. &amp;nbsp; **Projects, libraries, and applications** Class libraries are great for sharing code between projects. I sometimes have a 'Common' project that contains classes and helpers that all other projects require. &amp;nbsp; Console applications: Why would you just stick with console applications? There are so many beautiful things to do! Websites (ASP.NET/API's), Windows Forms, WPF (another API to create windows with). Console applications are useful for learning though, as they are easiest to build and set up. &amp;nbsp; Form applications: With Windows Forms these can indeed be built in the IDE. The actual code behind the Form you write yourself (so how it responds to button clicks, etcetera). These can all be wired up from the graphical form designer though, making building a form quick and easy. An alternative is using WPF (Windows Presentation Foundation, [tutorial here](http://www.wpf-tutorial.com/)) which I would recommend as it's newer and also gets you used to the XAML format (don't worry, you'll learn about that if you pick up WPF). &amp;nbsp; **Target framework/architecture and compatibility** Target framework: Generally the latest one is probably fine. If you're targeting older Windows version you might want to switch to another target framework. You can find out [here](https://msdn.microsoft.com/nl-nl/library/8z6watww%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396) which .NET framework works on which Windows version. &amp;nbsp; Backwards compatible: Not really but most APIs stay the same. There aren't that many breaking changes usually. &amp;nbsp; Targeting for Linux compatibility ad any platform: Now, you'd use [.NET Core](https://www.microsoft.com/net/core), a platform that has just released that is supported on Linux and Mac. Please note that all Windowing APIs are not available in .NET Core. Right now, you cannot make cross platform Forms without Mono. When you want to use a browser, as long as your server uses Windows you can use ASP.NET MVC to build websites. &amp;nbsp; Portable Class Libraries: Yeah you're right, but I don't know much about them myself. Someone else might be able to help you about this one. &amp;nbsp; Portable Console Application: No, but with .NET Core you can. &amp;nbsp; **Fast graphics** Fast graphics in C#: Through external libraries is the easiest. (OpenGL with OpenTK)[https://github.com/opentk/opentk] and (Direct3D with SharpDX)[http://sharpdx.org/] or [SlimDX](https://slimdx.org/). Direct3D probably performs a tiny bit better(?). &amp;nbsp; You can use SharpDX to create a window (RenderForm)[http://www.johanfalk.eu/blog/sharpdx-tutorial-part-2-creating-a-window] which is easier than starting one yourself, however it also possible to use Windows Forms or WPF for launching windows. &amp;nbsp; Here are some additional resources to help you learn C#; * [ASP.NET MVC](http://www.tutorialsteacher.com/mvc/asp.net-mvc-tutorials): MVC tutorial. Might be a bit old but the knowledge here still applies generally. * [Windows Forms](http://csharp.net-informations.com/gui/cs_forms.htm): Windows Forms tutorial * [WPF](http://www.wpf-tutorial.com/): WPF tutorial * [Codingame](https://www.codingame.com/home): Teaches you coding through small games. Some puzzles are quite hard! * [SharpDX](http://www.johanfalk.eu/blog/sharpdx-tutorial-part-1-setting-up-a-sharpdx-project-in-visual-studio-2013): SharpDX tutorial &amp;nbsp; *Disclaimer: I may have messed up some info, sorry but I tried to keep it simple. Please comment to correct any incorrect statement :)*
JetBrains'll be steaming
Shhhhh, stop having different opinions /jk I actually disable the nagging about var because dammit sometimes I just want the type there :P
I more commonly use the type strict declaration anyways and reeallyyyy hate debugging our contractors code riddled with vars. Why do people like var so much? It just adds clutter without clarity.
Thanks! This is some great info! &amp;nbsp; I have some follow up questions and clarifications, if you don't mind. &amp;nbsp; &gt; Code storage: You can use Git to store your code safely on sites like GitHub I use GitHub all the time. I meant something slightly different by my question - specifically when to partition code into different files, projects, and solutions. Let me try providing a hypothetical scenario. Suppose I have 3 modules: * MyToolbox - a set of basic functions that I use in a variety of scenarios, possibly similar to your Common project. * MyCruncher - a driver that crunches a lot of data. * MyGUI - a text (console) GUI object that displays the given data in some presentable format. Now, based off of the conventions that I am familiar with, let's suppose that: * MyToolbox would be a public sealed class with all the functions in it declared as public and static. * MyCruncher would be a protected sealed class, with a single Main function. * MyGUI would be a public unsealed class with a beans design pattern. Now, in C++, I could put all 3 modules into a single file, in a single project, in a single solution, and it would work - in fact, I don't even need a class for the toolbox; the functions can all be declared globally. In Java, I *have* to put each separate class into a separate file. In C#, I believe that, even though I need a class for the toolbox, I can put all the classes into the same file. So my question is: what is the best way to organise this code? Now I probably shouldn't leave it all in one file, so let's say I put each class into a separate file, like I would in Java. Then, would I put all the files in the same project? Or into different projects? Given that MyToolbox and MyGUI are meant to be re-useable, I am guessing that I should put them into a single project, while I put MyCruncher into a separate project? So then, would the project that MyToolbox and MyGUI are in be a Class Library? Or a Shared Project? Would MyCruncher be a Console Application? What happens if I want to make some other driver that uses MyToolbox, would that go into a separate project in the same solution? Or would I put it in another solution? I know these are all very silly questions, but I would like to figure this out early. &amp;nbsp; &gt; Why would you just stick with console applications? &gt; Console applications are useful for learning though, as they are easiest to build and set up. Pretty much this. I don't know much the other kinds of C# and .NET APIs, so I'm sticking with what I DO know - stuff that runs on the console. However, I will definitely read up about the other kinds of APIs, especially from the resources you linked. :) &amp;nbsp; &gt; Please note that all Windowing APIs are not available in .NET Core. I'm a bit confused. You're saying that windowed GUIs (ala javax.swing) cannot be created on other platforms? What about browser applets? &amp;nbsp; &gt; You can use SharpDX to create a window RenderForm which is easier than starting one yourself Can this also be done with OpenGL? &amp;nbsp; Thanks again!
&gt; [var] just adds clutter without clarity. `var` removes type information from a declaration that isn't necessary to understanding the expression. *Personally*, I find this removes a usually-unimportant distraction (explicit types) from the business of what the code is doing.
Been there, done that. By now no one seems to know how to do it or the solutions given do not work for me :/
I guess it comes down to personal preference (or what bosses allow). I find myself expending more energy to translate the general 'var' into its actual type in my head while i'm reading or debugging. Thankfully I get to control my team's ReSharper preferences :) also: &gt; var removes type information from a declaration that isn't necessary to understanding the expression. except when it is
yeah I went there, but it's just a documentation, no tutorials. Thanks anyway !
ok I think I'll do these tutorials. Thanks !
Note that click once does not appear to be the right strategy for our needs. A custom installer was build. The application being deploy needs to run other installers for 3rd party components it uses. And the application in comprised of several executable projects all being deployed in a single installer. 
Serialize the object then deserialize the result into a new object using your favorite serializer. Won't always work the best with deeply nested objects or objects that reference themselves/ parents but for most cases it's good enough. Bonus of making your objects serializable is you now have a way to store state outside of runtime.
Well, if they're empty :P
Meh, they all inherit from IBeverageHolder.
I think the IsCaffeinated property is false in that situation.
Nothing can be funny unless it's 100% true and validated.
A DLL can be unit tested - an EXE not. So I would always strive for a DLL based approach if you have more than a trivial domain layer. On top you just write a simple CLI wrapper around the lib. Another advantage is that you could reuse the DLL for another frontend, say a GUI or a Web Application...
Yeah, so i should directly start with like, let's say, a simple calculator to learn how I/O works, then something about OOP and finally a Lexer ? What would be a good OOP project ? (With Inheritance,Abstract classes,etc)
I don't actually have specific suggestions. Didn't you do OO in C++? If it were me, I would start by reimplementing *that* project, to get a feel for how the languages differ. C#'s generics aren't really like C++'s templates, and C# has some different restrictions on inheritance than C++ (i.e. interfaces and classes are different kinds of types, and you can't multiply inherit classes; and there is only public inheritance).
ok, my interview is in 2 weeks, I think I have enough time. Thanks for your anwser ! 
I need a desktop application, not a website.
You can use an HTML parser such as AngleSharp or HtmlAgilityPack to easily read in the DOM, find and modify the image tags and then save it again. Do note that technically the file extension doesn't have to match the actual file type, what matters is the content type header sent by the server.
trust me, I understand the header info, but in this case, the file types are 100% correct. I am working on some code now, it's ugly, but it'll work. I'll post when I am done. 
Dont worry much about the ones yelling terminology at your face, those are the ones that usually dont code, struct or arrays, you can do it with single ints and giving a number to each position in the board, there are many ways to get around this issue whats important its you understanding the code a few days later. 
Using Xamarin is not a development, it is a tragedy. I moved from xcode and android studio to Xamarin because I hate doing same database programming twice. Initially I created an Xamarin.Forms app but their "multiplatform" implementation is so buggy and getting bugier :-) For example they managed to break the swipe gesture for the iOS table view. It just throws null reference exception on iOS 10 but works for iOS 9. I have reported this but it took them two months to resolve :-) It is definitely not production ready. For everything you have to write custom renderers code for both platforms and most of the time you have to figure out how to go around xamarin's solution for the app to look how it should. Now I left the Xamarin.Forms in the hope I can save most of the backend code. I moved to the Xamarin.iOS/Android and I am reimplementing the UI. It certainly feels more comfortable than Xamarin.Forms, at least I haven't come across any bugs that are making something impossible to code. Still I have to say, most of the time I am not spending on actually writing the code, but on the fighting the xamarin tools. Their implementation of UI designer behaves like failed high school project. Just crashing and loading and controls not being positioned in the right spots... Sorry guys for such a negative post, but this is reality for me. I had to register here just to warn anybody out there who is deciding about which way to go :-) Native is definitely less restraining, less buggy, faster to develop. 
C# has interfaces *and* abstract classes, and neither can be instantiated directly. It also has static classes and structs. And enums and arrays and generics ... This is more-or-less off the top of my head, here: An interface is a purely abstract reference (I'll come back to this in a moment) type that may contain only public properties and methods, and may extend (inherit from) multiple interfaces. It must not extend classes or structs. It must not contain fields, constructors, or types. It must not contain static methods. An interface may be declared as public or internal in its namespace. An interface may not be sealed. Members of an interface may not have an access modifier: interface members are always public. An interface must not have a finalizer. A class is a reference type that may contain public, private, protected, internal, and protected internal fields, methods, properties, constructors, and nested types. It can implement (i.e. inherit from) multiple interfaces, but it may not extend more than one class. It must not extend structs. An abstract class may contain method and property members that are abstract; abstract members may not have bodies. An abstract class must not be sealed or static. A static class may not extend any other types and must contain only static members or nested types. Members of a class that do not have an explicit access modifier (i.e. private, protected, etc) are declared private. A non-static class may have a finalizer. A struct is a value (one moment) type that may contain public, private, and internal fields, methods, properties, constructors, and nested types. It can implement multiple interfaces, but it must not extend any other type. A struct must not be abstract. A struct must not be static (you can declare static fields of a struct, but `public static struct Foo` is right out). A struct must not be sealed (structs can't be extended, so are sealed by default, but `public sealed struct Foo` is right out). Members of a class that do not have an explicit access modifier are declared public. A struct must not have a finalizer. A struct must not declare a default constructor. All declared constructors on a struct must either initialize all fields and properties, or call another constructor to do so. (structs are memory-aligned, and a lot of these limitations reflect that.) Reference vs. value types: In C#, variables that are declared with a reference type contain a typed reference to a corresponding object. Variables declared with a value type contain a value of that type. This affects arg-passing for functions: reference types will be passed by copying references, and value types will be passed by copying values. enums are pretty much like C/C++ enums, IIRC. They're a value type. Arrays are .... arrays are a little weird. Arrays of values and arrays of arrays will probably work more-or-less as you expect. Multidimensional arrays are a wrapper for doing some modulo arithmetic with array indices and may not behave as expected. It's also possible to create arrays with an arbitrary starting index, but .... please, don't. Generics may look, superficially, like templates. They're not as powerful, but tend to serve some pretty similar purposes. You can declare generic interfaces, classes, structs, and methods, with some constraints on the types they'll accept (must be a reference/value type, must implement this or that interface or extend this or that class, must have a default constructor ... not much else, though). I *think* that's the big stuff, but MSDN is really your best guide, here.
That's not entirely true. Things like CEFSharp and GeckoSharp and Awesomium let you render out html/css and interact with it in your C# app. But .net core? That's probably where the SOL happens.
Doesn't look like GeckoSharp is actively maintained anymore, but the other two definitely look like what OP is looking for. CEFSharp functionally works the same way as electron. Nice find!
Though your walking example wouldn't fit this model, since it would increase incrementally, not by percentage I think.
I would create an object. public class DungeonLocation{ public int Id{get;set;} public DungeonType DungeonType {get;set;} public string Dircetions {get;set;} } public enum DungeonType{ Hall, Room, TortureChamber, OPMomRoom } That way you can create a new ones on the fly. Which could be what you are doing with location. I guess I don't understand why you need to know the numbers....It seems to me those should be ids for you location.
I just implement ICloneable, and in the Clone() method use MemberwiseClone. Recursing if needed. So far, it has worked fine. But if your cloneable objects are super complex (not just messenger or DTOs) there might be some tricks needed. 
My go-to projects for a new lang tend to be -- Sieve of Eratosthenes. Conway's Game of Life in the terminal. Lexical parser, often as part of a mathematical expression evaluator. If I'm feeling graphical, I'll utilize the parser to build a GUI calculator with history, or maybe separately build a simple calendar app, something like that. With C# I would definitely recommend a small GUI app to see what the XAML/WPF fuss is all about, as I believe the integration of the GUI tools into the whole language/standard library/Visual Studio experience to be one of the environment's best strengths, beyond the simple joy of using C# itself. If you're interested in GUI after trying out a small project, I'd also recommend a simple local CRUD app to get a feel for what data binding and MVVM is all about, if you're unfamiliar with the idea.
 int[] hallLocations = new int[30]; for(int i = 1; i &lt;= 30; i++) hallLocations[i] = i - 1; And Later: int pos = 0; Location l = new Location(hallLocations[pos++]); { … } 
By using an [enum](https://msdn.microsoft.com/en-us/library/cc138362.aspx) instead of constants, you can save yourself a bunch of typing, don't need to manually define the values, and get some additional compile-time safety. In general it would make sense to separate the map layout and the room definitions to avoid repetition. 
When I will be on my pc I will try this but thank you for the fast response 
Long story made very short: opening a file is expensive, so you shouldn't open and then close a file continuously in a tight loop. If you make StreamWriter's buffer very large relative to the data you're writing and quite small relative to the available system memory, you can save a second off 10k writes.
Heh, I see what you did there :\^)
Hi, this is Scott (the guy who wrote the tutorial you're using). If you're building a large world, I suggest **not** using an ID for each location, and connecting them how I showed in the lessons. Instead, build a map using X and Y coordinates, and modify the location lookup functions to use those coordinates. Here are Location.cs and World.cs files that should give you an idea of how to implement that technique: https://gist.github.com/ScottLilly/5619d3dff37beda907aa21287964dd2e. Let me know if you have any questions (you can leave them here, or on my site).
Good article. It might be a bit easier to read if you use the indexing `Select` overload instead: list.Select((name,idx) =&gt; new { name, position = idx + 1 }) .AsParallel() .ForEach(x =&gt; Console.WriteLine ($"{x.position}: {StringExt.ToSentenceCase(x.name)}")); 
Just quickly glanced at it, so I may be mistaken. But it looks as though you are adding them to the array in the order that they randomly got selected to move, but nothing to do with position it was moved to. So if the first button you moved went into the 8th spot or whatever it would get placed into [0,0] of the array because it was moved first, instead of [1,3].
I think it's called an expression bodied member. It's a shorthand for writing a function with only a single line. In a more traditional syntax it would be: public bool HasLicationToTheNorth() { return World.HasLocationNorthOf(this); } It's part of the syntactic sugar introduced in C# 6
Thanks. I found a few articles on it, and it looks like there's a few C# 6.0 features I've been overlooking. 
Your problem description isn't clear: *"The layout of the board is supposed to be random, [ ... ] the position of each button in the array [is] random too."* Can you phrase that differently/more clearly ? Looking at your code, I'm unclear why you're doing what you're doing. You have an array of buttons, then you choose a random one, swap its screen position with another random one, and move it into the res array; repeat until all buttons have been done. Why all that swapping of positions? Why not just take a random button and move it to your res array? You could remove lines 17-32, and replace line 40 with: // Choose a random button randomButtonIndex = r.Next( buttonlist.Count ); // Put it in the buttons array buttons[ p, q ] = buttonlist[ randomButtonIndex ]; // Remove it from buttonlist buttonlist.RemoveAt( randomButtonIndex ); I think does roughly the same as you have now. Also, lines 42 &amp; 43 do nothing.
Just injecting it in the array with a random number could override a previously injected button in the array; what if r.Next generates the same number twice in a row? The initial though of first generating everything and then swapping makes perfect sense really
It sounds like you are reinventing [AutoMapper](http://automapper.org/)
Break it down into manageable steps. *"i got a number for example 50"* int number = 50; *" it takes a percentage of this number and increases it by that percentage and make a new number out of it."* int percentage = 15; number = number * percentage / 100 *"until it reaches a specific number for example 1000"* This is the trickier bit. The word "until" implies we need to repeat over and over, which means a loop. There are various types of loop in C# - a `for` loop (use when you need a range of numbers, e.g. 1 to 10), a `foreach` loop (used to iterate over items in a set), a `while` loop (which loops while a condition is true), or a `do`/`while` loop, which is the same as a `while` loop, but checks the condition at the end of each iteration, rather than the start. We want to loop while a condition is true (while we haven't met the target), so let's try a `while` loop. We want to keep going until we reach 1000 or, in other words, while number is less than 1000. So let's put all the code so far together: int percentage = 15; int number = 50; while ( number &lt; 1000 ) { number = number * percentage / 100; } Now we're getting somewhere. *"and the program says how many steps it needed to reach this number."* Ok, so we need to count how many times we go round the loop. To do that we need a variable as a counter, which starts off at 0, and increases by 1 every time we go round the loop. So before the loop: int count = 0; And inside the loop, so it happens each time we increase number: count = count + 1; And, after the loop, when we've hit the target, output the result to the user: Console.WriteLine( "Reached target in {0} steps", count ); Now, put it all together into a single program and you get something like this: // Percentage to increase by, each step. int percentage = 15; // Starting number. int number = 50; // Count of how many iterations it takes to reach the target int count = 0; // The target number we want to reach int target = 1000; // Keep going until we hit the target number while ( number &lt; target ) { // Increase number by the desired percentage number = number * percentage / 100; // Keep count of how many iterations it takes to reach the target count = count + 1; } // Show the result to the user. Console.WriteLine( "Number of steps taken to reach {0} was {1}", target, count ); Does that help? 
Actually, no. Writing to memory and then committing to disk is a lot faster (but it requires more RAM, so there's a trade-off). On the original IBM PC, a little chip was introduced called the DMA controller (Direct Memory Access) for the ISA controller. This DMA controller has moved away from the motherboard (which was its original location) over to each individual device. This controller has direct access to system memory which gives it an opportunity to just read or write directly from/to RAM and write to/read from whatever hardware location the program asks for. Large writes are faster, because there's less overhead and less paperwork. You (or the operating system) tells the DMA controller "Please read X bytes from memory location Y and store it at Z" and the DMA controller will do this and send an interrupt to the CPU when it's done. This makes all I/O inherently asynchronous which is something that you'll get a better result of if you don't have to check in all the time. As I said, it's a trade-off, but generally if speed is your main concern you should write as much data to hardware as possible in a single call.
I just spotted this the other day: https://github.com/antmicro/Migrant "Fast and flexible serialization framework usable on undecorated classes." Haven't had a chance to try it out yet though.
Why? Isn't Funtional programming a purpose of F#?
Why not? F# is a "functional first" language, but it incorporates some OO concepts as well. Functional programming style can be useful in almost every language, especially when concurrency is involved.
I am trying to take the input from the first three drop down and, display that info on a new page along with the other 4 things that donot have drop downs created for them.
&gt; String newTempText = tempText.ToLower().Replace("&lt;img src=", "&lt;a href=") + "Link to File&lt;/A&gt;"; The uppercase &lt;/A&gt; doesn't match the start. Also, what are you getting in your `Console.WriteLine("New -&gt; " + newTempText)`? It seems like the old img closing bracket will still be in the line and any alt's, height's, or width's will remain as well. 
Yes, the streamwriter is buffered, so unless you do something crazy like opening and closing the file multiple times during a write, it will flush the buffer when it becomes large enough to be efficient to write to disk.
Just a simple small coding challenge from 1-25 Dec. I think it would be good way to learn a new language. A copy/paste from todays: Something is jamming your communications with Santa. Fortunately, your signal is only partially jammed, and protocol in situations like this is to switch to a simple repetition code to get the message through. In this model, the same message is sent repeatedly. You've recorded the repeating message signal (your puzzle input), but the data seems quite corrupted - almost too badly to recover. Almost. All you need to do is figure out which character is most frequent for each position. For example, suppose you had recorded the following messages: eedadn drvtee eandsr raavrd atevrs tsrnev sdttsa rasrtv nssdts ntnada svetve tesnvt vntsnd vrdear dvrsen enarar The most common character in the first column is e; in the second, a; in the third, s, and so on. Combining these characters returns the error-corrected message, easter. Given the recording in your puzzle input, what is the error-corrected version of the message being sent?
Alternative to attributes that doesn't require reflecting through the type, mainly. A marker interface is easier to check for, and can be used in generic constraints, which *may* be useful in some situations. It would be a distinct code smell in most cases, though.
Cloning is very awkward with AutoMapper. The clone is deep only if you define self-mappings for all possible types. `CreateMissingTypeMaps` doesn't help either.
`ICup&lt;out T&gt;`
it does. I added more coded after, and cleaned it up a bunch. its not really what I want, so I am going to look at an HTML parser. thank ya'll.
Depends on where you live/work. I know in my city C# jobs are every where and Ruby/Python/Java jobs are near non existent.
^ Pretty much this. http://stackoverflow.blog/2016/11/How-Do-Developers-in-New-York-San-Francisco-London-and-Bangalore-Differ/?cb=1
Looking in NYC here too OP.
Believe it or not, the C# industry is pretty strong in the Midwest. You aren't going to make Silicon Valley money, but the cost of living around here is cheap. I'm in the Milwaukee area, and there are no shortages of jobs.
I think if you adjust for cost of living it's definitely comparable
Do you mean you want a cascading drop down that feeds a value into another drop down?
Have you just went on indeed.com and run searches? I just did for my city and c#/java get about the same number of results while ruby/python/swift are not near as popular.
That is what I am trying to do.
This is why I love reddit...
My company is hiring C# and angular people right now. www.checkimhere.com/jobs
I would like to see some timing information on the different approaches, since increasing performance is normally the goal when deciding to parallelize an algorithm.
You should **not** add log4net in your library. That way you will, as you noticed, add a dependency to log4net. I don't remember any library that does logging (just frameworks). If you really think your library would benefit from it, add a custom `ILog` interface and let the user provide one. They can then create adapters for the logging libraries of their choice.
Financial sector is the key, CSB, KUBRA, CPT, BoA, almost all major finance and payment companies use C#. 
Exactly! 
Check out this method : https://msdn.microsoft.com/en-us/library/f956fzw1(v=vs.110).aspx As for the points just capture where the mouse clicks on the panel something like this Point point = panel.PointToClient(Cursor.Position); On the clicked event. You would also want to add in logic for which point is which and how to reset them. 
A C/C++ developer's opinion on C#. No surprises there.
Microsoft
&gt; low as $40,000 starting hahaha.... that's about £31,000... my starting salary was £20,000. I'm on £21,500 a year and a half later. I don't think you realise how well paid living in America is!
I'll let this slide for now, but /u/jkruer01, consider it a warning that if you wish to continue submitting your own content, to also start interacting with other users/posts on reddit outside of your own content/submissions. EDIT: Also, nice to see /u/AngularBeginner practicing/training for his upcoming ~~fascist takeover~~ moderator position.
Yeah, a long time ago. We had an API integration that could take inventory from our system and create an eBay listing, and one that would download invoices. It's probably been like 7 or 8 years since its been used, but I remember their dev forums being really useful. That's when everyone was doing ebay though they seem much less relevant now. It was mostly just filling in context and making an AddItemCall I believe. We had a table with category mappings from our system to theirs, and an html template that would get filled in.
Where in the UK do you work? I did an internship up North for not much less than that..
Thanks The prof in uni only explains the methods a little bit but we have to practice at home. But I have a really hard time understand what to do. I only need to do it for the next 2 months cause after that I want to specialize in databases. I got this now but it seems it still doesnt work public Form1() { InitializeComponent(); } private void panel1_Paint(object sender, PaintEventArgs e) { } private void panel1_Click(object sender, EventArgs e) { Graphics papier = panel1.CreateGraphics(); Brush red = new SolidBrush(Color.Red); Pen redpen = new Pen(red, 5); Point point1 = panel1.PointToClient(Cursor.Position); Point point2 = panel1.PointToClient(Cursor.Position); papier.DrawLine(redpen, point1, point2); }
we are accepting applications from all over right now. The website i provided will give you the requirements and the preferred method of contact. ^__^
My software uses the eBay .NET SDK: https://go.developer.ebay.com/netsdk Download, unzip and add a reference to the assembly. You can then create an API context: using eBay.Service.Call; using eBay.Service.Core.Sdk; using eBay.Service.Core.Soap; var context = new ApiContext { SoapApiServerUrl = "[replace with API url]" }; var apiCredential = new ApiCredential { eBayToken = "[your user token]" }; context.ApiCredential = apiCredential; context.Site = SiteCodeType.UK; Then make calls, passing in the context: var apiCall = new GetOrdersCall(this.apiContext); var orders = apiCall.GetOrdersModifiedBetween(DateTime.UtcNow.AddDays(-1), DateTime.UtcNow, 10, 1);
Second to this, due to MS a huge number of C# jobs to be had here and the surrounding area. Even startups use C# here.
No, you see, if you know C/C++ you instantly also know how not to write poorly performing code. It's magic. ^^^^/s
I am disappointed, i expected a good C# Joke.
I was about to say $40k is about $25k too low for a starting .Net salary. 
Wouldn't you attach the individual viewmodels to their own User Controls and then add those controls to a form?
Texas is a huge .NET hub, primarily enterprise development. Even Java jobs take a back seat to .NET in the state.
FinTech is a huge market for C#/.NET developers, there's a lot of banks and financial institutions with great jobs. But to the question where to find - I think LinkedIn and StackOverflow Jobs are great resources.
C# is not a problem. The language is not that big and the syntax is relatively straightforward. But, unless you have an extraordinary memory, you simply cannot memorize the entire .NET library, all its classes, and usage models. It's simply too big.
Microsoft and the community is doing a great job expanding the .NET ecosystem. .NET core isn't quite there yet, but when it is C# will be totally on par with Java as a viable choice for nearly any platform. 
That first block of code about parallelizing the method is technically not actually making THAT method parallel. private async Task&lt;List&lt;string&gt;&gt; CrawlBingSearchPageAsync(string url) { var result = new List&lt;string&gt; { url }; var doc = await LoadDocumentAsync(url); var searchResultsGrid = GetSearchResultsGrid(doc); if (searchResultsGrid == null) return result; var searchResultsLinks = GetSearchResultsLinks(searchResultsGrid); var tasks = new List&lt;Task&lt;HtmlDocument&gt;&gt;(); foreach (var linkUrl in searchResultsLinks) { result.Add(linkUrl); tasks.Add(LoadDocumentAsync(linkUrl)); } await Task.WhenAll(tasks); return result; } Assuming `LoadDocumentAsync` doesn't spawn threads, this method is logically operating in one asynchronous thread. It just happens to be potentially doing multiple nonblocking IO tasks at the same time. There is still only 0 or 1 C# threads running at any given time. 
I bet Jon Skeet even uses Google from time to time.
From his comment it looks like he is stuck maintaining some WebForms legacy code.
I know that I need to use ReadLine but I'm not quite sure how.
could you cite a few ? (I'm genuinely curious)
It's really easy to write imperformant java code. Taking 2 weeks to optimize java code is crazytown though. I've written 50k+ lines in that time..
Care to share the name of the recruiting agency you use?
Yup, good enough for now. Though in the future (or now) you may want to consider reformatting the requirements to be a bit easier to read. Or consider narrowing them down to the single one or two that's tripping you up.
Read head-first C# before anything. I don't like the Java version, but the c# version is fantastic.
I do work on trains actually. . .
Little late but in my opinion, consulting is the way to go. Going to a Big 4 and working for big clients will give you a chance to work with all sorts of MS ecosystem jobs.
You should talk to your front end guys about that font color. Its kinda hard to read on mobile.
ISerializable is like this. Functionally it doesn't do anything but you can give intend on what another class/interface is made for. Like the original dev could 'promise' this way that all public fields have attribute x on them. Or make sure that a class doesn't have any reference types.
It sounds like you should step through the code in a debugger so you understand what it is doing. If you put the code you pasted inside your if statement...you will continually increment the i variable and then immediately reset it back to zero (on the next iteration of the loop), so it can never have a value greater than 1. Are you familiar with loops? It sounds like you might not understand how they work. Use a debugger, or throw in some Console.WriteLine calls to emit the state of your variables at different places in the code so you can actually understand what your code is doing. I don't mean to be patronizing, but programming requires precision and understanding. Don't guess. 
Basically this, even though I've been a professional developer for several years now, I still spend a fair amount of time Googling stuff. Hell, most of the time I know how to do what I am doing, but I want to know if there's a built in way (or super efficient algorithm) to do it instead of hand-rolling my own solution. The .Net library is just too big to memorize in any short amount of time.
Practice. Write lots of code. Read other peoples code. Its like learning to play an instrument. Start with simple things, don't be afraid to make mistakes or search google. The more you write, the less you'll need google. Look at sites like http://CodeKata.com and https://www.codewars.com/?language=csharp The [r/learning FAQ](https://www.reddit.com/r/learnprogramming/wiki/faq) goes into a lot more detail to help you. 
And you're considered a magical genius, followed by project managers over promising clients and having high expectations of you. 
 r.StoreData(data, standard); Ok so I made this method here which looks like this: public static void StoreData(double[] input, string[] set) { int[] standard = new int[BASE]; standard[0] = int.Parse(set[0]); standard[1] = int.Parse(set[1]); double[] volts; volts = input; } but when I try to use it, it tells me it: cannot be accessed with an instance reference; qualify it with a type name instead. What does that mean? beside that I'm doing something wrong? Would it be better if I made my arrays inside my class instead?
That's a pretty big if, considering how common memory management related security vulnerabilities are... Let me know if you ever meet one of those developers. 
The current startup I work for (I don't want to say who simply because of my reddit comments) does, but beyond that I've interviewed at 4 other startups before I took this job that all were C# focused. Beyond startups I can't recall names for Amazon, Nordstrom, Expedia and K2 all have at various points sent recruiters after me for C# jobs as well.
I want to add to ask for the job description before you take a job from a recruiter. I'm stuck in an SSIS gig after moving from the financial sector doing soft real-time backend c#. The company had a .net developer position on their career page so I assumed that was the job I was applying for since I had no ETL background and didn't even know they were hiring ETL
I checked Apex's website. They had a state listing so I guessed they were national.
&gt; ask for the job description before you take a job Why the hell would you not do that? Yeah ask for a job description. Even if it is a language you know, you still want more details, and there might be things that they don't list on the posting on their site.
&gt; It's really easy to write imperfprmant java code. I hate when I write imperfprmant code. &gt; I've written 50k+ lines in that time. I've written 100k+ lines in that time, but it was all imperfprmant. :(
It was bad enough that he was just awaiting every call instead of kicking of all the tasks, but he definitely list me when he got asynchronous and parallel confused.
Lolol really gotta hammer on that typo don't you?
Wait, what part of C/C++ gives knowledge of a generational copy garbage collector? That would be a pretty unusual setup.
my database form is a public partial class namespace Administrator { public partial class DatabaseBackup : Form { public DatabaseBackup() { InitializeComponent(); }
Do you enjoy your work? It seems like it would be a blast. 
&gt; Jon Skeet &gt; Senior Software Engineer at Google http://stackoverflow.com/users/22656/jon-skeet He *is* Google
Ignoring the fact that his comment has nothing to do with the article, is he right though? I just started my first job as a software developer about 2 months ago, and at times don't even think about memory issues. 
Exactly, he's currently doing this: [SerializeField] private int number; public int Number { get { return number; } set { number = value; } } And he wants this (automatically): [SerializeField] private int number; public int Number { get { return number; } set { number = value; } } 
No one builds "cross plat desktop apps" anymore. And if they do, they're Electron based: Slack, VS Code, Skype, Atom, etc. For all the hand-wringing that iOS devs have done for the past 8 years... the web as a platform won. And now that Web Workers and offline caching are real, it's just a matter of time before 90% of users' app needs are satisfied in-browser.
Web based apps still suck compared to equivalent desktop applications. And they are much more expensive to develop, though deployment is incredibly cheap.
JavaScript is dynamically typed, lacks modules, lacks user controls, lacks real data binding, has an anemic standard library, and requires extensive cross-browser testing. Even CSS is garbage compared to XAML styles. I've seen teams choose to build separate native apps for iOS and Android because it was cheaper than building one app using PhoneGap. To this day I've yet to meet a developer who says, "I'm glad that I'm using Angular, it is so much easier than Silverlight was". But Silverlight is dead now so if we want cross-platform, web stack is our only option.
There's a lot of CLR implementation detail in there which has nothing to do with C/C++ 
&gt;JavaScript is dynamically typed, lacks modules, lacks user controls, lacks real data binding 2. ES6 definitely has modules 3. I don't know what this means or how this relates to anything. WebComponents have been here for years, providing, among other things controls. 4. Is flatly untrue. Reactive frameworks exist, you can directly hook into getters/setters. This is just way off. 5. Boy, you're uh, sure stretching there to go with "anemic standard library" given the existence and prevalence of `npm`. *Besides, VS Code, for example is written in TypeScript which has* **none** *of those downsides.* &gt;Even CSS is garbage compared to XAML styles. And many people building these types of apps use SCSS/Sass. Besides, I don't really share that opinion. And it's a pretty minor point. I mean come on, xaml vs CSS for styling is not something that impacts any bottom line consequentially. &gt;I've seen teams choose to build separate native apps for iOS and Android because it was cheaper than building one app using PhoneGap. Ok? That doesn't mean that it would be cheaper for Slack to build 3+ native clients instead of a single electron app. You think there might be a reason that MS chose to use Electron instead of writing 3 native desktop apps? Surely you can't just dismiss all of that with a single vague anecdote about PhoneGap? &gt;To this day I've yet to meet a developer who says, "I'm glad that I'm using Angular, it is so much easier than Silverlight was". But Silverlight is dead now so if we want cross-platform, web stack is our only option. Oh snap, I've been getting trolled this whole time. Like, besides the obvious troll, Silverlight was never really cross-plat. Here's a response anecdote for you: *I don't know of a single company that shipped a Silverlight app that didn't come to regret it*. And yet, Google and thousands of other people build world-class websites based on Angular/Angular2. /me looks at the username, oh yeah, you're the guy that was a jerk about git even after I linked to the manual showing you how you were wrong. Sheesh.
&gt; As I am somewhat unfamiliar with DLLs, could you please explain why this is the case? No! 😉 But that's just the way it is... so if you wanna strive for unit tests for your domain layer (and perhaps integration tests for your data access layer with a unit testing framework like NUnit), you simply have no choice. Imagine a very simple example for a [BMI](https://en.wikipedia.org/wiki/Body_mass_index) calculator: * create a DLL project with the primary function to calculate the BMI. This is the place, where you put all your *domain specific* code! * create a Unit Test Project (also DLL!), in order to test your *domain code* * create a Console Application for a command line interface (CLI) - perhaps you try this excellent [CommandLine Parser Library](https://github.com/gsscoder/commandline) -, by referencing the domain DLL. * create a GUI project (WinForms, WPF, ...) and reference the domain DLL. When you have completed that example, just play around and imagine further use cases and how you would adapt them? (Another UI, perhaps a web based? No problem, the domain is allready there!) Imagine what happens, when you need more domain functionality? Perhaps you implement different strategies for calculating the BMI. Go ahead an extend your domain layer. Now think a moment, what would happen, when you have put the business logic directly within your CLI *and* your different UI-applications 😉 (And if you don't got the clue allready, just craft that as an alternative way, but put a **falsy formula** in those projects. Then go and fix it!)
Painting doesn't work like that. The Paint event is raised -every time- the control needs repainting, which can occur for a number of reasons. For example if another window/control is covering the panel, and that thing is moved, the control will need to repaint. So the code you have there might draw a line briefly, but it will pretty much be guaranteed to be lost shortly after. Also - never ever use CreateGraphics on a control like that (I'm too lazy to go into why, but trust me). The proper way to do this is to save the coordinates somewhere, call Invalidate on the panel to force it to repaint, and then in the Paint event handler draw line the using the passed (in the PaintEventArgs) Graphics object. Edit: Winforms/GDI is great at memory leaks as well, the SolidBrush you are creating there will be a memory leak. I'd suggest using the built-in Brushes.Red instead.
I only graduated uni about a year and a half ago though. All the current position's advertise around what im on currently if not less.
This article is so generic and high level, I got a nosebleed.
Except that the implementation would be a get only property instead of a method. 
I don't know where to begin. That's the problem. I've googled loads and came to the conclusion to ask on reddit. I was about to try something with powershell files in C:\Program Files\Reference Assemblies\Microsoft. In the instructions it told me to find something called System.management.automation in a folder called WindowsPowerShell but I can't find it and I've tried in many ways to get it to work but it doesn't appear, therefore I'm asking reddit for help.
I'm quite junior myself. Let's inspect his claims. &gt; Also, their ever-higher-level of abstraction has totally removed the programmer's knowledge of the language from the ultimate machine-code ultimately produced. It's certainly easier to not think about what CPU instructions are produced when we write code with high level languages. Having listened to other programmers talk about optimisation ([here](http://www.programmingthrowdown.com/2016/08/episode-57-optimization.html) and [here](https://medium.com/humans-create-software/fast-code-is-not-important-fun-fun-function-27-594ad4daf37b#.joo5plf7f)) it seems that algorithmic optimisation is a step we can use at all layers of abstraction. C code with a O(n^2) runtime won't run faster than O(nlogn) Python code if the input is large enough, even if C is naturally 100x faster. That said I haven't played around with comparing implementations of different algorithms across languages all that much and I'm really speaking out of my ass here, but I do think that this guy is narrowly focused on the issues with high level abstractions while ignoring the benefits. &gt; All high-level coders should also learn low-level coding so they can code for machines, not for people. Doesn't seem like a stupid thing to have up your sleeve.
 i&gt;=14 Yeah, that's not gonna work. I also suspect you'll find string.Split() useful if each line has delimited values of some sort. Also, put the reading in a "using" for guaranteed disposal. 
Are those not for junior positions though? Its worth throwing your cv online and seeing what recruiters think, as awful as that process is.
Yeah junior positions. Starting a new job in the new year, same £21,500. Seems to be the max around the South Yorkshire area for a junior dev unfortunately. Living wage to wage with 0 savings is really bad, I hate it.
Here, take [this MVA course](https://mva.microsoft.com/en-us/training-courses/c-fundamentals-for-absolute-beginners-16169?l=Lvld4EQIC_2706218949) ! Or maybe you prefer [this edX one](https://www.edx.org/course/programming-c-microsoft-dev204x-2)
2-3 seconds?
 using (var reader = new StreamReader(dataFileName)) reader.ReadAllLines() .Select((x, i) =&gt; new { record = x.Split(',').Select((y, j) =&gt; new { field = y, j}, i }) .Aggregate(phoneArray, (x ,y) =&gt; y.record.Aggregate(x, (z, a) =&gt; { z[y.i][a.j] = a.field; return z; })); which I haven't tested but should probably work and won't help you much. Your data file is a comma-separated value file, though. you probably need to be splitting the lines into separate fields, and copying the fields over to phoneArray. Speaking of. Is phoneArray actually declared someplace? if it's not, that would be your first problem: you need to declare it, and you'll need to read in the entire file to determine its dimensions. Edited: missed a couple parens!
The problem is that the only cross-platform native desktop application framework that is production-ready is Qt, and pretty much every single other desktop UI library except Qt and GTK is either abandoned or outright horrible. I am currently working on a WPF application and it feels like Microsoft doesn't give a shit. There's still no official way to set the CultureInfo, and the whole development experience feels *much* harder than with something like React or Vue. When I have to touch the view layer, the thought "this would be *sooo* much easier in React" comes to mind way too often.
That time is not here yet. The browser is still incapable of talking to hardware. And nowhere near as fast or smooth as traditional cross platform apps. 
That is a habit :D
I would start with an existing PowerShell script so you can see something that works and then modify to meet your needs. [This script](https://gallery.technet.microsoft.com/scriptcenter/Get-UserGroups-Get-the-4f6cdf5c) from the [Script Center](https://technet.microsoft.com/en-US/scriptcenter/) looks like a close match.
Rider is not miles ahead of Visual Studio. I use rider because I'm on Linux and I like having intellisense. I wish I had VS though.
Fixed Why do ~~.Net~~ Java developers need glasses? Cause they can't C#. 
Because I was naive and trusted the recruiter. It also didn't cross my mind at the time that they would be hiring me for anything other than .NET/C#. It is a lesson I learned the hard way and I want to make sure others don't make the same dumb mistake.
[Hmm...](http://campusriot.com/wp-content/uploads/2014/04/i-know-some-of-these-words.png) Honestly, I've not worked with this kind of business logic that much. I'm vaguely familiar with it, but most of my experience has been academic or research oriented. Could you ELI5 what you meant? :)
Every recruiter I've ever used automatically sent me the job description without even being asked.
Most have with me as well. This guy just didn't. I'm not sure if it was intentional or not but based on some of the vibes I was getting and now thinking back on it I imagine it was intentional.
They most likely didn't know how to schedule it, and launched it manually every morning. Which tends to further prove that the program was just built by an incompetent, and that its lack of performance was just the consequence of this.
Did you ever tell the company that wasn't the job you thought you were applying for? 
Sorry about that. I will make sure to be more active on other threads. Thanks!
Correct. In the previous post, I created a demo to show how to convert a synchronous API into an asynchronous API. I expected the asynchronous API to scale better but I found out the exact opposite was true. I created this follow up post to explain why that happened. Sorry I wasn't clear.
BTW, thanks for the info. I've been pouring over the resources you linked, and they're quite interesting and informative. I've spent some time fiddling with different project types and playing around with references. If I may ask: since I can create references to console applications that generate EXE outputs, what is the specific advantage of Class Libraries? I like being able to add a driver into my utility modules, in order to check out components of those modules. For example, I want to add a Main function into the MyToolbox class in order to check if all the function in MyToolbox are running as they are supposed to - but I cannot do that with a Class Library. However, if I make MyToolbox a Console Application, then I can do that, AND make references to it.
As mentioned in the article, I awaited every call on purpose so that the comparison between sync and async would be as similar as possible. I also mentioned that in a production appliation I would not do it this way and would recommend kicking off all of the tasks at once. I'm not sure I understand your comment about getting asynchronous and parallel confused. Where/how did I get the two confused?
What code didn't work? The code worked I just didn't get the results that I expected. Isn't that the point of creating content. To share your experience and learn from others? As a developer I run into situations all the time that don't work as I expected them to. I personally think it is very unrealistic that 99% of all tech articles/videos on the web work perfectly 100% the very first time the code is written. I don't know about you, but that hasn't been my experience in the real world. By the way, I found out what the issue was and created a follow up post to share what I learned with others. Hopefully it will help others in the future who run into similar problems. Thanks!
How is is broken? I consider this article a good learning experience and I am glad that I did it. I learned a lot from the research that I did into find out what the problem was and what I needed to do to fix it. I also shared what I learned with others. I'm sorry that you feel it doesn't have any merit. Thanks!
It makes sense to want to test your methods inside MyToolbox, but for that you'd create a separate Console Application again. Why it's bad practice to reference Console Applications from other projects is explained [here](http://stackoverflow.com/a/22836012).
That's the joke.
It sounds like Library projects output unoptimised VM bytecode, while Application projects output optimised ISA bytecode. Is this correct? This way, libraries can be referenced and compiled into optimised ISA bytecode for the target architecture/platform by any application, right?
Thanks I was able to figure out the problems and finish the program.
Is there any benefit to learning WPF over Electron? (thanks for the downvotes) 
You think? It still amazes me how even given the advancement in the language, runtime and processor speeds since Java became viable, using IDEs like Eclipse (or even to an extent IntelliJ) is often as performant as dragging a sack of bricks across a muddy field. Give me VS Code any day of the week.
Something far simpler and more rewarding would be making a simple chat client. Which you could also remake using different protocols.
I am learning C# and for that my method is that I usually have an application in mind and then I try to build it. In this process I encounter new things that I try to learn them. And you are right sometimes I find myself in the middle of something advanced that I need to start learning from the beginning, so I guess you are right, I am a bit ahead of myself. And about bitcoin I have read that and I am mostly reading the documentation here https://bitcoin.org/en/developer-reference I also have a pet project that I am working on while learning here: https://github.com/Coding-Enthusiast/BitcoinTransactionTool For instance I am learning MVVM mostly with this project, and want to eventually change my `ApiServices` class with a P2P service class.
No, it is not necessary, but personally even for small apps I use the MVVM pattern relegiously, just so I don't develop bad habits. It's totally up to you, you do not have to use bindings :)
I could use Microsoft.Office.Interop.Excel but I need to have MS Office installed in the server and I can't do that. I'm seeing that LibreOffice got a headless executable that can do the job but I would need a standalone executable instead of having to install LibreOffice in the server.
I recently solved this problem where I work. We ended up using a visual studio database project to have source control for our database ( schema and migrations only, no data ). In there you can make a seed data project that reference the main db project , and using a post deployment script load seed data files. In the properties, set it up to always drop and recreate and whenever you run it you get a local db set up ready for running tests against. Inside your integration tests, wrap them in a transaction! That way you still have db level validation, but skip having to clean up afterwards. With this approach you can even automate continuous integration with tests through vsts. Our hosted build agent creates its own seeded local db from scratch just before running the tests. 
Is your break point _on_ the line, or _after_? That is, is this line highlighted red: int randomNumber = random.Next(1, 100); Or this line highlighted in red: for (int i = 0; i &lt; 5; i++) If it's the first line, it might report it as 0 as the break point causes the program to break when the line is _hit_, not when it's _executed_. That is, the `random.Next` call hasn't actually run yet to generate the number. Beyond that, I don't see where you reassign the `userGuess` variable. Shouldn't the line `int userGuess = Convert.ToInt32(Console.ReadLine());` be within the `for` loop? EDIT: If you do move that line, then you may need to remove the `Convert.ToInt32(Console.ReadLine());` you have in all the `if` blocks, or instead assign their value to the `userGuess` variable.
Just out of curiosity, do you have any good resources for learning MVVM? I haven't managed to find anything that makes sense to me, mainly because the examples are all over the place.
 No. However, &gt;just wondering if its worth all the extra code for such a simple app? If you are not concerned about scalability, you are probably fine without data binding. I agree with /u/Staatstrojaner, in that it's a good habit to default to data binding. 
Id do something like this if I'm understanding what you want. Pseudo Code: ArrayList $MyArray = new ArrayList(); while (reader.EndOfStream != true) { #Depending on what the line is delimited by change ','. Array $line = reader.ReadLine().Split(',') $MyArray.Add($line) }
I will second that it's a good course. 
VS Code isn't the equivalent of Eclipse. If they stripped Eclipse down to just the bare features of VS Code, it would run much faster. In fact, that's what they are doing for Visual Studio. The next version is going to start like VS Code, then you add in the plugins that you actually need.
Don't hold your breath.
I have a C# script that I want to use methods from a native DLL (I believe its in C++), but these methods are in various classes throughout the DLL. I do not have the source for the DLL however, so I cannot form a C wrapper around it unfortunately 
YEAH i wasnt assigning anything to the Convert.ToInt32(Console.ReadLine()); so what was happening is id guess a number and it would replay with high or low and then if i went to type another number it didnt really register it it just knew what int userGuess was assigned prior to and said too high or too low 4 times in a row before exiting because it only used that first number, it all makes sense now. simple mistake thanks so much it finally works
I don't know if there is a mysql provider for it, but I started by using this when I was attempting to insert a lot of values: https://efbulkinsert.codeplex.com/ Might not match exactly what you are trying to do. As we've used ef more and more, for standard stuff Linq and the default ef stuff is fine, but every time we've wanted more performance, we've done things manually. There are a couple of other things you can do, if you don't go down the bulk insert route. Ensuring your context has context.Configuration.AutoDetectChangesEnabled = false; and manually calling detect changes when you need to: context.ChangeTracker.DetectChanges(); If I'm reading your code right, you have a many to many relationship between tags and images? Do you have scope to change the database, as if you control the many to many mapping table, instead of letting EF handle it, you could do three bulk queries. (They get slightly more complex depending on your pk. Add All images Add/Update all tags Add all imagetag links. I'm happy to go into more detail if you want? 
Alt+PrintScreen copies to clipboard a screenshot of the active window ...
Note that triesLeft variable and the test triesLeft == 0 is pointless since the programs automatically ends after 5 tries because you have an for loop that iterates 5 times. I suggest you convert that variable to constant and update the for like this for (int i = 0; i &lt; TriesLeft; i++) and write the fail message outside the for.
An alternative will be to use Debug features of .net to add logging to your library and have no dependency. See this https://msdn.microsoft.com/en-us/library/system.diagnostics.debug(v=vs.110).aspx
This seems to be a tutorial on how to implement a managed wrapper for a native dll: https://drthitirat.wordpress.com/2013/06/03/use-c-codes-in-a-c-project-wrapping-native-c-with-a-managed-clr-wrapper/ Bonus it export a class that can be used in C# and you can skip C style wrappers and DllImport altogether. Also you can find what to search for there :P
I know this is just an example supposed to illustrate purity and concurrency and does not care about the performance, but please stop abusing ToList(). The code will work just as fine if Format returns and IEnumerable and will be faster and use less memory. In the extreme case when you actually need a formatted List call ToList() on Format method.
You are able to write a c wrapper so long as you have the header files for it, if you don't have them then it's going to be difficult to call it from c# since you don't know what the correct arguments are. When you compile a function called foobar in C, it gets exported as foobar (or sometimes _foobar). When you export a function or member in c++, it gets decorated with symbols, so it ends up mangled. A function called for in a class called bar might end up something like __bar@vfoov. The problem is that it's not standardised, so get has a different one from msvc, and it might change between versions of the same compiler and so on. So it is possible, but it would only work if you looked at what the mangled ended up as, then it would work, but still be difficult. Steam_api is not open source and "mostly" c++, but people still make c wrappers for it so they can use it from c#. 
Well, I don't know how you feel about thread blocking, but seeing as the method as-is already is thread blocking, I think you could put something like this in your `if` block: if (rsp.StatusCode != HttpStatusCode.OK) { if (tries &gt;= maxTries) { //log some stuff //return some error response? Throw an exception? } else { System.Threading.Thread.Sleep(System.TimeSpan.FromSeconds(3)) continue; } } You'll also need a `break` at the end where you read the successful response. Really, I'd suggest you separate your HTTP request concerns and your serialization concerns: protected TaxamoResponse GetTaxamoApi(string taxamoId) { string taxamoUrl = _ppSetting.Taxamo.TaxamoApi + "as/" + taxamoId; string tkn = _ppSetting.Taxamo.PrivateToken; string json = GetJSON(taxomoUrl, tkn); try { return JsonConvert.DeserializeObject&lt;TaxamoResponse&gt;(json); } catch (Exception ex) { //if I can't serialize the data, I'd like to log why return null; } } private static string GetJSON(string requestURL, string tkn) { const int maxTries = 2; int tried = 0; while (tried &lt; maxTries) { tried++; HttpWebRequest req = (HttpWebRequest)WebRequest.Create(requestURL); req.Method = "GET"; req.ContentType = "application/json"; req.Headers.Add("Private-Token", tkn); //try the response try { HttpWebResponse rsp = (HttpWebResponse)req.GetResponse(); if (rsp.StatusCode == HttpStatusCode.OK) { using (Stream str = req.GetResponse().GetResponseStream()) { using (StreamReader sr = new StreamReader(str)) { string json = sr.ReadToEnd(); return json; } } } } //exceptions other than WebException will bubble up because they'd be unexpected catch (WebException ex) { //this throws a 404. I would like to rest a couple seconds, and then try again. if I've hit my max fails, I want to log the error } //we double-check the tries here just so if we aren't "trying" again we don't unnecessarily wait a few seconds if (tried &lt; maxTries) System.Threading.Thread.Sleep(System.TimeSpan.FromSeconds(3)); } //if we get here, it's because we failed to get our request data //log issue //throw exception? } I just wrote that off the top of my head so check for bugs. By moving the logic into its own method, it becomes easier to jump out (using `return`). Also, you didn't specify how you want to handle errors (throwing exceptions or returning an error state/object?) so I'm just assuming exceptions here.
Look into Polly: https://github.com/App-vNext/Polly It's a .net library build exactly for these kinds of purposes. Very flexible also.
The problem is this is a pretty big application and we don't generally just drop libraries in here and there. I'd really like to just keep this with the built in .net stuff. 
I'll look at this. I may talk to our head architect tomorrow too, he generally has good input on these things. We have a custom logger we use for exceptions, which is why I didn't include code there. Thanks
I can help you but I'll need the full code so that I can run it. It's a bit confusing, in its current state. As a starter, I'd suggest renaming the variables a, b, and c to something more meaningful like row or column (whatever they represent). I also found this, which may help you: https://www.codeproject.com/Articles/6557/Sliding-Puzzle-Game
I agree with your edit, it would seem that is what is going on here. system.core was added in 3.5 iirc and 4.5 isn't cumulative with the updates from 3.5. 
&gt; How is it possible that the program is up and running if System.Core is not working correctly? .net loads assemblies only when they are needed. If the System.Core is not present on the machine or cannot be loaded then the first function in your program that uses something from System.Core will fail.
Application.Run();
First thank you so much for helping me. I've been struggling with this for about 10 hours of pure coding time, so my program is now a mangled mess of trying to get things to work. http://pastebin.com/yTzif6z9 I also have form1 designer which is just 16 buttons with names 1-16 text 1-15 and a blank button with just "" as the text. I'm new to C# and graphical programs in general so I've probably done many things wrong. EDIT: I just read through that article. I'm not really sure what is happening in it, I don't know anything about panels but he's definitely done it better than I could.
A for loop is a bad design here. What if he happens to guess the value before 5 tries are up? I'd use while (triesLeft &gt; 0 &amp;&amp; !winGame) with winGame being set to true if he wins. 
Okay, so how would you recommend I go about changing it so it would work properly? I'm not quite sure I understand what is happening there. Edit: So what I can make of it is that if you declare multiple object of the same type and change one of them it changes them all? Edit2: Do you think the best way to go about solving my issue would be to get rid of my Button next, next1 etc. and use the array indexes to reference each button? Sorry for all the questions, this is the first progress I've made in a long while on this. 
I was thinking that the few LINQ related expressions were the problem. Thanks for the edit. Also, do the explicit declarations really matter? Doesn't the compiler take care of "var" types at compile into IL? I'm not sure, but it feels like that wouldn't matter as much as the LINQ stuff.
That's fair. The reason I asked was because this app would solely be used to test the device dll I created. It won't be used in production and I'd like it to be as simple as possible so any bugs will be raised from the dll and not the app itself. Most MVVM tutorials have a good amount of code written which may add some complexity 
Object oriented is more of what I'm used to as I learned Java first. How would I go about doing that? I'm not sure how it would work with buttons 
Hmm, OK I think I understand. Just as a clarification, I am using Xamarin Studio, not Visual Studio.
I don't know the answer for what is best practice but I dealt with some single sign on at a client and the original plan was to use an STS (secure token service) that is trusted by your applications. You can use that to do your authentication. We didn't do windows authentication but you can also use a shared cookie approach if you use the same machine key for both applications to encrypt and decrypt the cookie. Hopefully those terms give you a few more things you can google. 
&gt; while(true) { Console.ReadLine(); } What the fk is this wizardry. It worked. Thank you so much. I have a follow up question, how do I input more questions after the initial question is answered? Example: Queue dramatic effect? No. &lt;Next question&gt; and so forth.
I implemented the while(true) loop and yes it is functionally similar to my web browser example.
First: a Scanner is better for this. Second: use a Map
Most of the basic stuff lives in mscorlib, System.Core mainly contains LINQ and some diagnostics and IO types.
Aside from the obvious differences (console input/output vs. GUI), the language and libraries are the same. There are some intricacies when it comes to multi-threading, but that shouldn't be a concern for a beginner.
You're right about the boxing for sure. Compared to DynamicInvoke though which uses reflection it's a huge performance increase. For the caching, I'm not too sure it makes a measurable difference, as you'd have to cache the generic functions in a dictionary of Delegates, which adds the same level of boxing. Correct me if I'm wrong though
Delegates are a reference type, so they aren't boxed.
I have never used console, and always use forms when coding, especially when learning. Sure for ultra simple things it takes a little more to add a button, textbox and label, but its so much easier to see the code and use it than with console. WPF gives you pretty forms, and are good, but its dead tech, just as much as Forms. Skip it, move to UWP, and then to ASP.net. 
People in charge of web filters never cease to amaze.
If you do think it's miles ahead (which I don't agree with but whatever), install Resharper into Visual Studio and BAM best of both worlds
If you leave off the brace it becomes an open generic! You ruined it!
No it isn't. But then not all Eclipse's features are running simultaneously either. There's no practical reason why it shouldn't be able to simply open a file, display it in the editor window or do dozens of othr things as fast as VS Code. But it can't.
When I use it, it creates a Screenshot (&lt;Number&gt;).jpg in Pictures Image
Open a cmd console, then run your app. that way the console stays alive. When you directly run a console app from Explorer, Windows creates a temp console for you. Which closes when main ends.
Seems kind of pointless to trade a closure allocation for ugly code and a tuple allocation. I'd check `CancellationToken.CanBeCancelled` and just return the original task if it can't, at least in a general purpose library method. Also, can `t.IsFaulted &amp;&amp; t.Exception == null` actually ever be true? And if it is, shouldn't this throw another exception instead of waiting out the cancellation or just never completing?
This is exactly how I am learning c#. Trying to build an application and learning as I encounter challenges.
What kind of garbage is this? &gt; Property initializers works great together with C# 6 primary constructor syntax. That "primary constructor syntax" was scrapped long before the release of C#6.
EDIT: Reply to your earlier comment: would it be possible to instantiate a new object that is the same as say Button next? Or was that just a bad approach in general towards the problem?
This happens on a daily basis, in that it happens a lot, on different computers. On those computers that it happens on it always happens. There is something "broken" about those computers that causes this to happen. &gt; I'd wager it's simply because they don't have the .NET 3.5 runtime installed. Are you saying that they probably have .NET 2.0 and the program is running right up until it bumps into something that is required by .NET 3.5? I didn't realize that was possible.
So it's probably failing when it hits the first LINQ function. So... how is it that a .NET 3.5 targeting program is running without .NET 3.5 installed? I thought that if the customer only had .NET 2.0 it would not launch at all.
Wow, yeah that's ridiculous. 
Well it's partially that we partner with clients who really don't understand technology at all, and have ridiculous requirements. We had to lose an employee because he had to go back to his home country for a while. What we wanted to do was just set up a machine that he'd remote into, so he could continue to work for us. But that got a big nope due to security concerns. He would of been on a dummy machine, which also would of had all the same security crap on it (bit locker, trend micro, etc.) and still would of only been able to work if he was remoted into a machine in the US. But nope, somehow him being in another country instantly makes it not secure enough. 
The bit about only using object initialisers in unit tests because you should instantiate objects with a constructor is pretty rubbish too. Aside from that unless you're only writing to fluff your own ego, an article designed to introduce people to new features that doesn't talk about why you should use them and more importantly when not to, is pretty crappy. Quite a few of those features are double edged swords. The elvis operator in particular can mask really serious design flaws if you overuse it. Delegates can have huge performance costs. Nameof ties a variable name to a semantic meaning which may not be desirable in all situations. Just to name a few.
why not start with C or Assembly then?
Yup. IIRC, .NET 3.5 vs .NET 2.0 runtimes are basically same but with various BCL updates. And since the libraries are dynamically linked and JITted, it means your code will execute fine against earlier versions of the DLLs unless there are signature changes, missing types, or maybe some other reasons. More rarely, you could also run into matching signatures but slight tweaks in implementation behaviour resulting in bugs. I think the safest bet might be to recompile/redistribute the application using (at minimum), the .NET 4.0 framework. This would force client machines to have that level of framework installed. If that's not a viable option, then you'll have to look into forcing client machines to upgrade, at least, to version 3.5.
I don't propose people learning math to start with an abacus, just suggest to not start with a graphing calculator either. 
"Specific" keyword there...you could dedicate a thumb drive, a small one, to this task. Then you could wipe the whole drive every time. By wipe, I mean overwrite the entire drive so the data is not recoverable. The DoD standard is 3 successive wipes, writing over the entire disk with zeros and ones. We used to use BCWipe for this purpose, but it could be done with a custom solution in c#.
Thank you for all of your help! I finally finished it and it works perfectly! http://pastebin.com/ckviniiU I ran through the array backwards to change the positions and it worked like a charm!
Sure, reflection can fuck up basically anything, but if you go out of your way to artificially corrupt the state of an object you deserve any strange bugs you may encounter. I think that race condition should only be a concern if you were to check `Task.Exception` independently of `Task.IsFaulted`. In this case the property is only accessed after the task has signaled that it transitioned into a completed/faulted state, so there shouldn't be an issue.
On mobile and firing from the hip. But anytime I see something like this I immediately think user permissions. 
Most days, very complex inter-related systems, and a lot to think about, screw up too badly and you can kill somebody...
Please don't upload code like this in a zip. No one is gonna take a look. Instead upload the code at a source sharing site like Github.
You need to create a WCF project (or an ASMX one if you must). Within that project, create a service which can be selected from the Add New Item menu. You'll need to add a reference to your DLL and their DLL in this project. Then make the service that you create implement IPullService and have the methods in the service just call the matching methods in your DLL. At this point the development is done (in the sense that it will work) and you can publish it wherever it would need to go. I would point out that what you're doing is not the best method for database access as was mentioned by u/badlife 
Attach is used to add a pre-existing entity that the context could support but isn't being currently tracked by the context.
And if not user permissions, it's also possible you are mis-quoting (not properly double- or quadruple- quoting as necessary). Your @command is: A command-line, inside of a sql statement, inside of another sql statement, inside of a C# string. Also both types of quotes are used both within your command and within these languages (SQL ', C# "). And since all these are nested it is very possible that something is not parsing 100% as you intended. You should check that the "sql job step" content is the same - quotes and all. I'd create it both ways, then use SSMS to "right click on the job that was created -&gt; script job" for both, then compare the output scripts side-by-side. --- Similarly, you can just generate a script in the GUI and execute that manually, instead of letting the GUI execute it for you. You just use the SSMS GUI to "create" the job as normal, then at the VERY END - click "Script.." in the upper left(ish) corner - instead of clicking "ok" at the bottom (which would actually cause SSMS to "create" the job). This "do it manually in the GUI and script it afterwards" trick works for just about anything in SSMS - and generates the exact script SSMS would issue to the database when you clicked "ok". --- 
https://msdn.microsoft.com/en-us/library/system.string.format(v=vs.110).aspx https://msdn.microsoft.com/en-us/library/dn961160.aspx
 public ScoresFile[] file { get; set; } - "files": [
Try changing file to files in your ScoresFileArray, posting the error message would help
The property should be named `files`, with an s, to match the JSON.
Yes its very possable Dokan will let you write to an sftp server, there are also tools that will allow you to map a sftp drive to a drive, look at ssh https://social.msdn.microsoft.com/Forums/vstudio/en-US/a65e47f9-8b90-4d96-9cf3-232ef67ab2f0/automatically-detect-a-cd-and-read-cd-contents?forum=netfxbcl For the cd rom
I'm doing something similar without using powershell. Look in to System.DirectoryServices.AccountManagement For finding and displaying groups of existing AD users. Check out this stackoverflow question http://stackoverflow.com/questions/34001551/ldap-find-groups-for-a-active-directory-user-in-net
C# 6 also added interpolated strings - https://msdn.microsoft.com/en-GB/library/dn961160.aspx EDIT: oops didn't notice he already linked that sorry
Doesn't your installer check for prerequisites?
Everything I know about pinvoke I learned from this site. http://www.pinvoke.net/default.aspx/kernel32/MoveFileWithProgress.html
All jokes aside, going form Java to C# is allot easier transition than going form JavaScript to Python.. Logic is logic, I mean for syntax overall is an easier transition.
For some reason I actually prefer string.Format(). I find it easier to read.
It's in the stdlib, which is part of the language spec. The compiler doesn't do it, but languages aren't just their compilers.
Razor, everywhere I went if the project is new or released after last year. Even older plain ASP.NET projects are being converted to MVC. Same case with EF, newer projects use it, legacies are being converted to EF unless it's far too complex.
Can be a big deal on big projects. I'd get grilled if I submitted something known to be 2x slower to code review
This is approximately correct. in fact testing shows the order is string concat, StringBuilder(a concat with objects), StringFormat(which wraps stringbuilder), Interpolated Strings(which at compile time is converted to a slightly complex String.Format). so obviously the latter will always be faster but that can be relative. By policy my team avoids string.format and Interpolated Strings our application have to be as fast as possible but for others that may not be a concern. 
this is correct
Yea, what %s be %s to read than %s!? could easier this ;)
As someone who's done near full-time angular for 3+ years, not every app is meant to be angular/SPA. So basic Razor MVC is still the right tool for many jobs. A serious app shouldn't use EF for tables (Linq style) in production, although using it to generate code to wrap SQL stored procedures and their results works quite well with minimal overhead.
If I understand you correctly, you're saying that using the + operator to join strings is faster than all other methods of concatenation?
&gt; the speed of interpolation with standard concatenation The same is true when you compare String.Format with standard concatenation. Either way, you pay for parsing the format string.
EF is going EOL more or less because it can't keep up.
Yes, definitely. 
I don't agree that's it better, at least not always. It depends on the situation whether String.Format or interpolation is easier to read, I think. 
Well, there is string interpolation now. 
Here t is the original task, though. 
Tasks are read-only; you need the associated TaskCompletionSource to change their state.
I have introduced EF to new projects at my work, previously everything was done with manual SQL statements and it was a pain and caused a lot of mistakes. 
Razor not so much, occasional injection from a model happens in our projects, but MVC/WebAPI with EF.... a lot....
Correct. I outlined this in the first post the idea was to write a method which can get canceled even when the actual work task is not cancelable. Since .NET has a cooperative cancelation model there is not much you can do if an API author doesn't provide cancelation token support
Can people down voting this post some reasons? Our experience with EF has resulted in its use being prohibited for future projects. It's slow, it's opaque - what exactly is the attraction?
I would suggest learning to write some Windows Universal apps. You will learn all the key concepts for modern C#. XAML, MVVM pattern use, Task and async, attributes/reflection, security, and you will be well on your way to writing xamarin based apps for cross-platform. https://developer.microsoft.com/en-us/windows/apps/develop
Semantics. Languages aren't even their compilers; the compiler is just a single implementation of it. The language is a set of abstractions, syntax, and rules for how they interact. The library is just that - a library. Not a language.
The language spec mandates that a standard library and compiler be present in order to be considered as implementation of the language. If you don't have either of those, you don't have C. You can write a subset of C that never calls the standard library, so your compiled output doesn't need to link against it, but you can also write a subset of C that doesn't use language elements such as unions or enums or macros. They're still part of the language implementation and specification, even unused.
Oh, wow... that is really cool. Mine were very close, I just needed a plural "file**s**" property for my root object. I guess I was sort of oblivious about how JsonConvert.DeserializeObject needs properties named exactly to match its own. I am using Newtonsoft here based on what I've seen elsewhere online, with people recommending it. I will keep that in mind when doing other similar implementations. Thanks!
Are you drunk or something? 
Other than report a bug/provide a pull request...
Do you work for Stack Exchange?
Nope, I've just used Dapper on a lot of projects and have looked through the source code on more than one occasion to understand how it works. 
Thanks for your reply. &gt; maybe walletviewmodel isn't a viewmodel but then the naming is wrong. That is what I also thought. I don't see any `View` using this as a Datacontext so my first thought was that it should be a `Model`. But even in that case shouldn't another class (like a `ServiceClass` or even `MainWindowViewModel`) handle the Load() method and return the `Model[]`? &gt; catching exceptions with empty catch... I think it is this way because of brevity or laziness since this is an example code on how to use the main repository which is a library. The guy seems to be an expert to me which makes it even weirder that the code is this sloppy. 
Hate to be the spoiler here, but your second Logger.Trace statement uses concatenation.
Dapper is great but it can make you really lazy! :) var d = conn.Query("select * from sometable"); //d=dynamic enumerable var v1 = d[0].SomeColumn; var v2 = d[0].AnotherColumn; 
It'd be a lot cooler if you did
Also, to go meta, if you have a lot of data and need it processed quickly, [it's better if it's not text at all](http://wiki.c2.com/?StringlyTyped). 
If you are worried about the performance of string concat why are you doing anything with strings at all? Are they the focus of your application? If you are just using them for logging/debugging use ETW and let a different system handle that for you 'for free'.
For the people who wanted to see project 4 : Void Control, here is a link to download the C# DLL and the source. https://voidcontrols.sourceforge.io/ Not sure if this is the best place to post open source projects, but I plan to make a nuget package.
printf is clearly defined in the C spec.
I typically don't use dynamic but it can be useful for dynamic queries. I try to use strongly typed models as often as possible. 
Yeah that's what I would recommend or do as well
I think the problem is in the do-while loop. The condition employeeData != null is always true, as employeeData does not represent the actual data, but the StreamReader object, which only reads the data. When I handle StreamReaders, I usually use the condition like this employeeData.Peek() != -1 This method looks at the reader's next byte and checks if it's the end of the file.
Serious question: performance aside, why would it be better to not use an ORM and deal with SQL queries and rows?
We're not talking 10ms. We're talking sub 0.1ms.
If you need advanced features from your database software. We use change tracking in SQL server to keep our ElasticSearch instance up to date...running the change tracking queries from an ORM would be painful if it is even possible.
ADO.Net is good, but I find the verbose syntax takes longer to maintain and read through. Null checking when consuming results, for example, is kind of annoying in ADO.Net with dbnull not understanding the newer null operators (coalescing, propagation, etc...). We have a mix of ORM, ADO.Net and Dapper in our codebase across a couple different layers and projects and Dapper has proven to be as reliable as using ADO.Net directly with a lot less typing and at an unoticable performance difference (outside of bulk inserts...it kind of matters there).
You're using edmxs? Just go code-first, that's relatively pain-free. Don't use migrations, they're for retarded children that like blogging.
I have been using entity framework since a long time and I personally love it. I started using it in .NET webforms and now using it in .NET MVC. IMHO, both (MVC &amp; EF) looks good on a resume. You can see entity data models build in EF as centerpiece of communications that collaborate better with many other technologies. EF is not necessarily better or worst that anything else out there. It is basically one way (approach) to accomplish something in a clean manner. EF and MVC is being used in some open-source applications. You may find this helpful: http://www.strivingprogrammers.com/Learn-about-the-open-source-project-that-sets-the-tone-on-how-to-use-Entity-Framework-EF-Code-First-approach Hope it helps!
I'm not very much involved in the project, and it's a beast so I don't know if it would be an option to change the way things have/are being done. I also don't see the value in derogatory imagery here. I'll be sure to pass the word along however, that "a person" on "the internet" thinks everyone involved in the project is retarded. 
Well, I guess your username is self-whatever. Anyways, you don't need to think long and hard about EF migrations (and the ways it could possible work) to see that they're a bad idea. Add to that multiple and unclear DB schema ownership, that idea is getting worse really fast. So if your team didn't see that from miles away, the bad joke might not be a joke.
That definition is wrong-ish. In my opinion optimal use of EF is code-first definitions of schema (ie. your classes look pretty much like DB is designed to look). The other "DB first" approach is letting VS create edmx based on DB schema, but that road is full of pain. DB migrations should then happen by sql-scripting (or whatever you currently use). The limit here is of course that EF has the class layout of your tables and if the schema changes sufficiently, the compiled mapping will no longer work. That would be exact same case even with hand-crafted SQL.
I don't see how *any* solution can actually work if schema changes really much. EF survives schema changes just fine as long as you're not changing mapped and used columns in incompatible ways. You can add new columns (as long as they're either defaulting to some value or you're not inserting into those tables), remove unknown ones, change width and precision. Adding new tables to schema is not a problem (well FK relations from existing ones will get you in trouble but this happens outside of EF as well) Of course if you want to have data integrity on EF level (ie. validating you're not even trying to insert too long strings into nvarchar(30):ies), then you're hosed since those validations are compiled into application. But again, those are pretty much the same for other ORM's. I guess there could be some solutions where you pull "known mapped schema constraints" from runtime DB and validate model against that, but i've not run into such a thing yet. EF Migrations wreak havoc on that because EF assumes (like it is told to) control of database.
Can you provide better context as to when it guesses over 100? At first glance, it doesn't seem like it would, maybe short of users putting in garbage when reporting if the computer guesses too low/high. Maybe try running it through the debugger and putting a conditional breakpoint when the guess is over 100, then working backwards to see what inputs/logic brances were being used that resulted in that.
This would get confused by a blank line at the end, which is not uncommon. 
Please check this out: https://msdn.microsoft.com/en-us/library/system.windows.controls.richtextbox(v=vs.110).aspx try to debug it yourself, it's part of being a developer ;3
Sounds that what he is wanting to and from reading the code so far he wants a class that is like Part that has a name and price. The list box would display the name and when added then the total would change.
I've been moving various internal applications off at various companies for months. It's being moved away from by a LOT of organizations. PS: Wasn't drunk...then.
Man debugging those inner functions could be a nightmare
Exactly, sorry for leaving that information out. I'm trying to figure out how to convert the text in the second listbox so that when you press the "total" button it adds up the prices of all the parts you have chosen.
I would maybe start with actually creating a class for your data like so: public class Part { public string Name { get; set; } public decimal Price { get; set; } } Then you could just initialize your first listbox something like this: public Form1() { InitializeComponent(); listBox1.Items.Add(new Part {Name = "MSI GTX 970", Price = 599.00m}); listBox1.Items.Add(new Part { Name = "AsRock Fatl1ty Z97", Price = 124.00m }); listBox1.Items.Add(new Part { Name = "RoseWill 750W", Price = 65.00m }); listBox1.Items.Add(new Part { Name = "Intel Core I7 4790K", Price = 339.00m }); } Your other code works for the swapping. Then for the total something basic like this: private void button1_Click(object sender, System.EventArgs e) { decimal total = 0; foreach (Part part in listBox2.Items) { total += part.Price; } textBox1.Text = total.ToString(); }
I'm very happy about the switch case improvements. This bring infinite possibilities. Anyone can think of a downside to this ?
Was going to link that.
Thanks, I really appreciate your help with this! I was over complicating things in my mind trying to think of how to implement a string array or getting multiple if-else statements to work out. EDIT: never mind the second question I manged to figure it out. Thanks again BoneKlinkz!
What's the point of tuples if they're mutable? 
What?
http://stackoverflow.com/questions/25098066/what-is-callback-hell-and-how-and-why-rx-solves-it
https://msdn.microsoft.com/en-us/library/sxw2ez55.aspx
When an exception is thrown at the streamreader constructor, it is still null in finally where its accessed again (just an idea, don't know if it actually throws an IOexception or so, but its worth a try) 
I suspect your constructor is declaring a _second, separate_ `scores` local variable and initializing that rather than initializing the class field. That is, I suspect you have something like this: class MyClass { int[] scores; public MyClass() { int[] scores = new int[100]; } } When you should have: class MyClass { int[] scores; public MyClass() { scores = new int[100]; } } Note the removal of the `int[]` variable declaration in the latter code. This can also be written as `this.scores = new int[100];`.
It means you don't have to declare a class to represent data for a method that returns more than 1 value. 
nvm i didnt see the bold lines thingy
I think you're right. This takes those single-use private methods that are usually declared at the class level and declares them right in the calling method instead. 
Functions returning more than one value... I'm really getting tired of them just ignoring basic programming rules. Functions return ONE value. If you need something to change more than ONE value you use a PROCEDURE and use references!! I really wish they would lose the "var" keyword. You should always have to declare your variable types!! I'm also tired of them allowing you to do shitty error checking too!!! They are making dumber and lazier coders by the year.
It is returning one value: a Tuple&lt;&gt;. The change they made was syntactic.
You _really_ need to check out your exception's stack trace or at least post it here. 
Sounds like C# is not your thing bud
Personally I'd have to look at it, but it wasn't the API to EF that I had a problem with, it was its poor functionality and the fact that if two people made changes to it at the same time, someone would get royally screwed when they needed to put their work into version control. My employer wouldn't allow it. Everything had to be mindlessly microsoft-centric. If you had a fabulous API that sat on top of their tools and made things easier... well too bad, you're not allowed to use it, and anything you wrote with it will be thrown out. 
Any OOP background makes it _easier_ to learn. It'd still take a good deal of practical experience to become professionally competent in it though. 
Switch statements make code more fragile. If a sub-type is added at a later date, you have to search through the entire codebase to see if each switch statement needs to be updated. OO exists to prevent this maintainability issue. 
Not sure I see the point of inner functions when lambdas exist.
Inner functions are slightly faster to call, can be recursive, can use yield return.. maybe more.
You will probably find C# FAR simpler, except in a good way. It has less bullshit like C++ does, there tends to be "one way" of doing very particular things unlike C++ where it's a clusterfuck of options. C# is a nicer language basically. It let's you write what you actually want to instead of spending 90% of your development time worrying about implementation details and memory management.
It encourages violation of the open close principle. 
&gt; slightly faster Yeah, very slightly. &gt; recursive. Yeah, I s'pose. You eliminate the lambda "declaration" step for recursion. &gt; yield return Good point. (Although the only reason lambdas don't do this is because it was [too hard to implement.](http://stackoverflow.com/questions/1217729/in-c-why-cant-an-anonymous-method-contain-a-yield-statement))
I'm just tired of reading through shitty code. 
In the switch case example, what happens if the `when` case isn't first?
Case order matters. Based on what I read [here](https://blogs.msdn.microsoft.com/dotnet/2016/08/24/whats-new-in-csharp-7-0/), it seems that cases are evaluated in the order: top-to-bottom, then default (regardless of where it lies in order.)
I think if you're using pattern matching in a switch, you'll already have this in mind. You won't need to worry about backwards compatibility breaking anything since it isn't a breaking change (we don't know the evaluation order of pre-7.0 switches.) If you're writing a new switch, it'll likely be in the forefront of your mind that order matters -- but if the cases start to get a bit absurd, then maybe the problem you're trying to solve might lend itself to some dynamic polymorphism anyways! :)
Are you guys hiring Xamarin developers? Do you have a need for mobile apps in C#? 
Regarding new() and template constraints, [this](http://stackoverflow.com/questions/9741211/restricting-a-generic-type-parameters-to-have-a-specific-constructor/9741812#9741812) is what I was talking about. [This here](http://stackoverflow.com/questions/9741211/restricting-a-generic-type-parameters-to-have-a-specific-constructor/9741812#9741812) is the response that leads me to believe it won't be implemented anytime soon.
Wow, yeah. Eric's post makes a load of sense, but at the same time I could see how I'd be able to use a feature like that. Sure, maybe not 'generic' in the complete sense of the term, but it could definitely get me the behavior I'd want in specific cases (and without the need to define an interface for each different case.) That thread was a good read, thanks for the link! Also, just going back to local functions, I found an old bookmark I had from earlier in the 7.0 design lifecycle that pointed out some things I forgot about that lambdas don't currently offer: - generics (which I suppose was kinda touched on in the iterator talk, and could theoretically be something a lambda could one day do), - ref/out variables (this one would be harder for lambdas due to their ability to live outside of the scope they're created in), - and 'params' (I don't see any reason why lambdas couldn't do this, though. I've never needed it, but now I kinda want it.
I'm not too sure I see where you're going with this... could you provide an example issue?
How do you mean?
In the video, the switch statement executed code depending on whether the object was a Rectangle, Square or Shape. In the future, when somebody adds the Circle type, they're gonna have to dig through all of the code to find **every** switch statement that executes code based on examining the type. With OOD, you execute a method of the derived type by calling the base type's virtual method, which is bound to the derived type's implementation. This eliminates the need to hunt for switch statements which need to be extended for the new type. See?
He means [this](https://en.wikipedia.org/wiki/Open/closed_principle).
Since all previous versions of C# used constants, existing switch statements should not be affected. For the new switch statement, it should be treated similarly to cascading catch blocks in a try catch.
Can't tell if sarcastic or serious.
His argument is a strawman. This is done all the time in C++. It's what makes templates so incredibly powerful. When Eric asks the question "where do we stop?", I would say "why stop?" It is logically consistent to use generics in the fashion he eschews. Regarding changes to IL, I'm sure they could figure out a way to do it without resorting to reflection in compiled code. He even proposes how the user could work around this limitation. If the user can work around it, why can't MSFT implement it? (Also, thanks for the bullet points. Didn't know about `params` being excluded..) Edit: Bad grammar at 2am.
I'd say it depends on what you want. When I started my blog I didn't want to have to worry about all the setup + maintenance of a web server and what have you, so I just got a hosted Wordpress blog. Edit: Also WP has some nice stats built in so you can see where your traffic is coming from. It's not too bad considering the PHP thing :P 
Drink until you forget explicit memory management and pointers. Then, you'll be ready.
That's the problem with any magic strings, which switch statements is an example of. Question is what kind of project warrants a repository from the get go. 
I use github pages and Jekyll. It's free and I can use a custom domain (that's not free obviously)
Switch statements have their place. I do embedded development for fun and I find myself using them more than I do "in the real world." Hard to implement a nice object hierarchy and framework to support it when you only have 1kb of RAM to work with. I still feel dirty about it, though.
Nothing wrong with switch statements if there are just a few AND you know that default is a catch you are looking for. 
The point is now I know it's a Dictionary&lt;string&gt; type. So when I have to use the variable I know what I can do with it. 
Why do you think so? I can still see plenty of uses, even when they're immutable.
I can think of some uses I suppose. But why put such a limit on their functionality when you don't have to? ~95% of what I would want to use them for would require immutability.
Tuples are exclusively immutable in other languages.
I'm pretty sure that they can be asynchronous if you want them to be. (Though you lose the benefits of a local function, as it would have to allocate memory just like an anonymous function or normal async method.) 
They are structs. How often are you going to explicitly create a reference to them? If the answer is "none", which it probably is, then it doesn't matter if they are immutable because you'll always be working with independent copies.
True, but the difference between an immutable struct and a mutable one is very small because of the copy semantics. Mutable structs are only really a problem when you try to return one from a property.
&gt; In the video, the switch statement executed code depending on whether the object was a Rectangle, Square or Shape. Ok, that's an utterly retarded use of type checking and they should be ashamed of themselves.
I started my blog about four years ago in WordPress.com. Its free, easy to mantain and there are pretty good themes. With a fixed calendar, like one post per week, I write about everything that sounds interesting in videogames, space, strange hardware, social networks... So, if you ask me, create the blog, introduce yourself and write!
Why?
Alright, thanks guys! :)
You always know anyway because it's in the declaration, and the IDE will tell you whenever you try and use it or hover over it. Sensible variable names also help. It still says that it's a dictionary in the declaration. 
Deconstruction made much more sense to me after the example of using it on the tuple return value. 
Perhaps you should show us your code, it will help to understand the problem. It's hard to debug why something is failing without context.
+1 to this approach. If you only want a blog, you can skip #2 and go for #5: just redirect your domain to your github pages and run your blog there.
Not really helpful if there is a default case or a catchall base class case, like `shape`.
[removed]
I think there are also limitations in lambdas about `unsafe` and stuff related to the hidden keywords like `__arglist`. One place I think local functions will particularly help is in code relying on partial types spread across a significant number of files. For example Roslyn's C# `LocalRewriter` class: https://github.com/dotnet/roslyn/tree/master/src/Compilers/CSharp/Portable/Lowering/LocalRewriter 
I am a newcomer to C#, I have a Java background. That said, I do not agree with most of these features. &amp;nbsp; Binary literals and digit separators are fine, no issues with them. &amp;nbsp; I do not agree with tuples. Yes I know everyone has moments where it seems to make perfect sense to return tuples, but it's a trap. Classes or even structs are much more appropriate return types. They do not carry semantic information. An `(int, int)` could be `sum` and `count`, or it could be a 2D coordinate. Even if they are named, their interpretation depends on contextual information rather than explicitly enforced by the compiler, leaving huge room for human mistake. Methods operating on them are not encapsulated. Suppose I want to calculate the average by dividing `sum` by `count`. Why would I do it manually, or call a non-class function `Average(int sum, int count)`, when I could just call a method `.Average()` ? Invariants and constraints are not enforced. If I want to calculate the average, `count` can not be 0. When there are not enough data points to calculate the average, an exception should be thrown that indicates this, rather than a generic `DivideByZeroException`, or worse, a silent error. &amp;nbsp; Local functions are a horrible idea. They allow entire classes to hide in functions. If you ever feel the need to declare functions operating on local variables, it is a huge indicator that you actually need to encapsulate those variables in a class, with appropriate methods operating on them. There is even a refactoring operation that solves this antipattern, *Extract To Method Object* or *Replace Method With Method Object*. Scoping of local variables tend to cause a lot of issues for refactoring operations, local functions that depend on the scope of local variables are pretty much guaranteed to become unrefactorable piles of mess. &amp;nbsp; Pattern matching is similar to `instanceof` from C++. Its limitations are the same, static type checks or dynamic polymorphism are much preferred. `PrintStars(int i)` or `o.PrintStars()` if we adhere to the example. &amp;nbsp; Switch on types: NO. NO. NO. JUST NO. Switch on constants and enums are perfectly fine. Switch on dynamic, extendible, polymorphic types are NOT ACCEPTABLE. It takes only one new (sub)class to render all of your switch statements obsolete. As others have said, if you want to add a new `Circle` shape, you have to go through your entire codebase, find any switch statement that checks for shapes, and update them. This is a maintenance nightmare, even if you have full access to the codebase. Polymorphism is a much better solution than scattering your logic all over the codebase. Possible fixes for the example are `shape.WriteDescriptionLine()` or `WriteLine(shape.Description())`. 
CPP is not lower level. It has more levels.
having to mouse or use my keyboard doesn't really help with clean code now does it? What if you have to print it out and show it at a meeting or something? Mouse and keyboard won't help you there now will it? 
But that's how it must be used. Some specific cases for some specific objects and default should handle any object. Look at LINQ "Last()" method, for example. If enumerable is an array or list, it can easily get last element, but if it's of unknown type - then the only way is to iterate over entire sequence. 
Use a local variable, eg int userid = Userid(); var checkuser = db.Users.FirstOrDefault(i =&gt; i.Id == userid );
That makes sense I suppose. We just write stored procedures instead of having to performance tune EF.
I mean to say that relying on the warning for an unmatched case is not helpful if you are trying to avoid a maintenance issue *and* you have a default catchall base class. 
A lot
The task you create in Method1 is never finishing, because you never even started it. Do not create Tasks yourself with `new Task&lt;T&gt;(..)`.
* Think about using a logging framework instead of Console.WriteLine. That way you can easily switch to alternate outputs or turn it off. * Don't hardcode e.g. URLs into your code. Use configurations classes, files or both. * Think about what happens if your code fails. You have no error handling. Thus I believe you have not tested your code thoroughly. Unit-Testing. 
No. Do not use `Thread.Sleep()` with async, **ever**. That will **block** the thread, making it do **nothing**. What do you want to achieve? Create a fake delay? Then use `await Task.Delay(1000);`.
Why? What's the point of that? Your method is marked as `async`, that means a task is already created. Just return `true`: public async Task&lt;bool&gt; Method1() { return true; } Alternative in a non-async version you can return a immediately finished task: public Task&lt;bool&gt; Method1() { return Task.FromResult(true); }
OP's response : &gt; Not how delicious that you were so quick to help me with solved problem !. Many times thank you and hope you will give me a +1 for questions. Seriously, wth!
added my simple code above. this is the code that outputs everything to textbox but i wanted to limit it string s = process.StandardOutput.ReadToEnd(); richTextBoxLogs.Text = s;
I'm sorry, but print it out and show it at a meeting? What year do you think it is?
And this is why the Stackoverflow community get so much abuse, for closing questions like this. Things that could have been easily answered with a tiny amount of research. 
I see local functions as a good way to delineate argument validation from method logic. Especially in cases where I'm being passed a complex object with multiple attributes that need validating, having a local IsValid method can help cleanly separate that check.
For yield functions, you actually want to split the difference the other way, so that the validation can occur when the function is called, instead of when the yielded collection is evaluated. I think that's something that u/AngularBeginner has gone on about, before.
Line 60 and 61. You have declared j twice. Once outside the for loop and once inside the for loop. So when you use j the program would not know which one. Try giving the outer j variable a different name. Hopefully that helps, have fun programming in c#
I can't really tell what's causing it to skip over this line. Hopefully someone can help.
Are you certain they're not executing? Did you set a breakpoint? I suspect they **are executed**, but you're just getting an exception that is then swallowed (and printed in the output). The exception occurs because you perform a UI operation (show a MessageBox), but you're not on the UI thread as the timer by default does not marshal back to the UI thread.
Can you confirm it ever goes into the else if on the first line of the above posted code? Does the readline happen? Can you throw in a Debug.Writeline to give any sample output? Just to first confirm that please and I'd have a better idea 
What is "transform" defined as?
I'm also a newb, but to share some things I think might be useful: * I don't see any error trapping or handling ("try" and "catch") * If you can set breakpoints and step through the code, this can show you where it is failing * If you can't step through the code in real time, you can at least try printing values to a log, or console. That way you can see where it fails by judging which points in code it reaches, and what values are being compared in those If statements Since it never reaches the if/else (otherwise, one of those has to run run) we know it's hit an exception and quit before that point. While you're still debugging, I would recommend just breakpoints and printing out information so you can determine where it fails and why. Hopefully when running in debug mode the console or something like Visual Studio should tell you the Exception it hit?
That might work to some degree, but there will be a lot of false positives. It would fail completely for a black and white photographer or comic book artist, for example. This is actually a pretty diverse and complicated field. It also depends on the desired properties of the algorithm and the kind and size of the image set it's being used on. Calculating color averages can work (although I'd probably go with more samples, like a 6x6 grid or something), but there are many other approaches like edge and feature detection. 
how would I do that. sorry, I have done c# before. I'm actually trying to learn from a tutorial but this part isn't working for me :( 
I'm sorry, I don't really know. I'm learning from a tutorial as I don't know c# 
thank you so very much! It's fixed!
I just had a simple and probably dumb idea. What about comparing two images pixel by pixel? And when some arbitrary threshold of similarity is reached(80%, 90%?) - we know that images are similar. Of course this will be thrown off if two images are completely same but one has a black border one pixel wide or is shifted to a side couple of pixels, but then we can detect that, and do comparsion afterwards I've done some "least significant bit" steganography with c#, where i modified each pixel of the image, and it didn't take much time even for hundreds of reasonably big images. like 2 to 5 seconds per image processed. It might actually save a significant amount of time depending primarily on download times we cut for redundant pictures.
Desktop-side you'd be best served by learning UWP or WPF/XAML. Web-side learn WebApi or MVC. That said, don't dump enormous amounts of time into learning all the ins and outs of one framework. Learn enough that you can speak about it intelligently and admit where your gaps are. Frameworks change all the time, and most are useful for accomplishing different tasks. It's not not worthwhile dedicating yourself completely to a single one and ignoring all others. Save the in-depth learning for when you find a job which uses that particular framework 
Thanks. it helped fix the big issue. I took line 60 out and now there are no errors. That is now out of the way. Now comes the problem --&gt; Program asks for a name to be entered (line 58) Console.WriteLine("Please give the student's name you wish to search for"); string searchname = Console.ReadLine(); The string is stored in searchname as I understand...I wanted a for loop to cycle through the names array, find it and output the grade, but its obviously not doing it. I will keep thinking about how to get this working, hope I dont get stuck
This is probablly not the best idea, because you can only compare images of the same size, so there is nothing you can do if the image was cropped or scaled.
I suspect the problem is in your initialisation of `scores`, but you haven't shown that part, so it's hard to be sure. Some other observations about your code: for (int i = 0; i &lt; scores.Length; i++) { count++; } That's the same as saying: count = count + scores.Length; or, more succinctly: count += scores.Length; Then in StanDev(): double count2 = scores.Length; Variable names with a number tacked on the end are a poor choice. (Naming things is something I tend to go on about a lot, because I feel it's an important topic. Naming your variables, classes and methods correctly can save on a whole lot of commenting, make your code easier to understand and thus more likely to be bug free, and easier to maintain). There is no other variable in that method called `count`, so you could call it `count` and the compiler would be quite happy, but it would be confusing to the reader because there's already a field with that name. I'd encourage you to find a better name for it, or even do without it. There's nothing wrong with using `scores.Length` in the 2 places you used `count2` - in fact it actually makes the code more readable. It's obvious what this does: double scoresAverage = scoresSum / scores.Length; but not quite so obvious what this does: double average = sum / count2; See what a difference a change of names can make? In `Ranges()` you have this: if (scores[i] &lt; 40) { // ... } else if (scores[i] &gt;= 40 &amp;&amp; scores[i]&lt;50) You don't need that 1st check in the `else` line; you've already determined that `scores[i]` isn't less that 40, because it didn't enter the initial `if`. So you could write it as: if (scores[i] &lt; 40) { // ... } else if (scores[i]&lt;50) and so on for all the `else` conditions. public string Histogram() { // ... return Histogram(); } That can't be right - the method `Histogram()` is calling the method `Histogram()`, which then calls `Histogram()` ... You need to think about what this method should actually return. Also, you need a newline after each of your histogram bars - at the moment you're just writing lots of `*`, all on the same line. Hope that helps, even though it didn't address your question. 
I won't disagree, but any modern framework has (should have) a fashion of async. It's coming down to people not knowing how to use it. This is r/csharp though
Why are you expecting 2 seconds? 
Lol await and async are far far superior to CompletableFuture, but CF IS really cool.
I'm not going to go into any more detail, but look at the User.Identity object. How could you use that object or **its properties** in your controller to filter the data appropriately? Good luck
&gt; If the execution of the callback exceeds the interval time it should not execute again. If you expect an operation to be done in under x seconds, why would you let it continue? I'd would halt it and throw an exception. I get what you are trying to do, we do something very similar at work. I can't remember the exact implementation off the top of my head though.
I've probably worded that poorly. I mean the callback should only execute one at a time.
As /u/psi- said, use code first POCOs to build the EF context but ignore migrations/scaffolding - build the database through handcrafted SQL or some other solution. Code first is by far a better solution than edmx (which has been removed from EF Core) but you aren't going to want automatic migrations when the DB is shared between multiple crossplatform applications. If the schema changes, you'd have to update your Dapper config or stored procs anyway so it's not particularly challenging to use EF that way. What we did was use the [EF Power Tools](https://msdn.microsoft.com/en-us/library/jj593170(v=vs.113\).aspx) extension, which comes with a "Reverse Engineer Code First" button from an existing database. I suppose you could do another reverse engineer every time your DB schema changes, but I typically just update the mappings by hand if we add columns or tables to the database.
Did you download and/or include a reference to the correct version of the Digital Persona DPFP.dll?
Did you include them as a reference to your project? Is your project type a compatible one for those dlls? (e.g., you aren't building a Silverlight application but using full desktop .NET dlls?)
¯\\\_(ツ)_/¯ Whichever one contains the `DPFP.Capture.EventHandler`. Try referencing one of them at a time or all of them at once. If that doesn't work, consult the documentation.
I highly recommend reading Concurrency in C# cookbook, the book is mostly recipes but the accompanying text is a great primer of async. Then you should follow with Async in C# 5.0 to get more complete idea of what async is and how to use it.
It looks like mostly you have syntax problems, but also are unfamiliar with how loops increment. - You have no brackets for your `if` statement. - You have no brackets for your `else` statement. - Your `j++` after your `if` is not what you want. The loop already increments this integer at the end of each loop, before checking if it meets the conditions to start again. By incrementing manually you are skipping all the odd entries of the array. (It technically doesn't necessarily increment at the end of each loop. What it does is it runs the code that is the third statement in the parenthases right after the `for`, in this case (and most cases), that code is `j++`.) Since you don't need the `j++` inside your `if`, you might realize that there is no reason to have an else. Instead you can just check `if (searchname == names[j])` and print your grades from there. You might also want to add `break;` after that, which would stop you from continuing to check the rest of the array after your student has been found. But you were very close! I think if you just add the brackets to surround the if statement and the else statement (see your other ifs earlier in the program), your program should work as long as the name you search for is stored on an even index of your array. 
Set some breakpoints, figure out what line is throwing the error.
This is far from enough information to even begin to help you understand your error. Your compiler is telling you exactly what line it is failing on. Provide more details on your exception rather than just some abstract information and someone may help lead you in the right path. 
You can write bad code in any language or framework. Dapper is not different.
Make use of this somehow, gives you a percentage difference between images: https://www.imagemagick.org/script/index.php
Thank you! I will have to try this out 
thanks, I changed the != to equals ==. I'll try to grasp what I'M doing wrong with the searchname. 
When you get an exception, it comes complete with a stack trace, which will show you exactly which line of your code generated the exception. This is important information that you didn't include in your post. You also didn't include most of the code so we have no idea even where this exception might be thrown. To quote from a [StackOverflow](http://stackoverflow.com/questions/4281425/how-to-avoid-a-system-runtime-interopservices-comexception) post that was the first result when I googled the exception, "You could try breaking when the exception is thrown. Go to **Debug &gt; Exceptions...** and use the **Find...** option to locate `System.Runtime.InteropServices.COMException`. Tick the option to break when it's thrown and then debug your application. Hopefully it will break somewhere meaningful and you'll be able to trace back and find the source of the error."
Thanks for the lengthy help. I tried and failed :(. I added some code with the hope of making this work, got a little further I believe.... Console.WriteLine("Please give the student's name you wish to search for"); string searchname = Console.ReadLine(); string foundname; for (int j = 0; j &lt; names.Length; j++) { if (searchname == names[j]) { foundname = names[j]; break; } } Console.WriteLine("{0}'s grade is {1}", foundname, grades[j]); Console.ReadKey(); } } } 
ok nevermind previous entry, its all working now :).
Removed: Rule 4. Please include the full exception message and stack trace with your post, and possibly include more context. Also, try to limit the code posted to the relevant portions. Take the advice of the other posters and see if you can figure it out; if you can't, feel free to repost the question but take into account the above.
Thats php
On the php front: - stop mixing mysql_ functions with PDO. - stop ending php only files w/ ?&gt; so there's no accidental whitespace at the end of a file - don't mix html and php in php files. separation of concerns. this also applies to any language and not just PHP. Try something like [mustache](https://github.com/bobthecow/mustache.php) which is cross language since you're working with C# you can use the same templates with C# - use prepare() method from PDO instead of your overly done escape string because prepare is all you need to sanitize data being passed to the db.
Show us how it's done
Did you want to comment on my comment? Because right now you commented on your own posting.
I had that issue last week when trying to sign up with both Firefox &amp; ms edge, worked OK in chrome though
Also if you write `unsafe`, you are probably doing it wrong. 
Because they've proven to be inferior to proper "code" focused experiences, over and over again.
You are right, unfortunately they have. Most development tools/platforms also continue to optimize creation over change. The speed of understanding what is built is as or more important than the speed of building the first version of it. I just think we should continue pushing for readability, and visual editors should help in that. 
Not the answer i'm looking for. I want to print outputs in textbox as logs so they can see if the action has failed or not, without reporting Windows version and my inputs. Right now i'm using &gt;&gt; \"" + path + "\""); to save output as .txt file but i prefer live logs and i got some requests about it. I guess i have to ask stackoverflow or microsoft forum for better answer
Try creating the paragraphs on the UI thread.
 //other (invalid thread) //dont create contrils here //Dispatcher.Invoke(() =&gt; { //create usercontrol from here //add usercontrol //everything in here is treated/works as UI-Thread-Code });
To the `Invoke` method you're passing a lambda that does one thing: Add the paragraph to the blocks. Instead of doing only one thing, try doing multiple things and create the objects within the lambda. I don't know if that solves your problem, but it's worth a try.
Thank you for the help, sincerely. 
The only reason you're getting versions in your output is because you're running `cmd` which you don't need to.
Thank you for this information. I got everything working thankfully, but I will say I clearly need to look more into {}. I don't understand clearly why you can use them in this case as I've never written them beyond the obvious opening namespaces, functions etc. Seeing it be used in cases that cause this ({}); Confuses me quite often right now. Is there any phrase you can think of I could google to look further into this?
"blocks", "scope", "curly braces" For a few aspects of C#, you can declare single-line methods or sections without the curly braces. For example: if (shouldDoSomething) DoSomething(); Even though there are no curly braces here, it's equivalent to this: if (shouldDoSomething) { DoSomething(); } But if you wanted to have two or more lines in that `if` block, you _need_ the curly braces: if (shouldDoSomething) DoSomething(); AlsoDoThisThing(); //BAD! Not actually part of the `if` block! if (shouldDoSomething) { DoSomething(); AlsoDoThisThing(); //this is good, will only execute within the `if` block } Same thing with the lambda call. When you just have `() =&gt; chatBoxBackup.Document.Blocks.Add(myParagraph)`, you're really creating a 1-line function with that bit of code. The curly braces are implied, but you can still include them if you wish: `() =&gt; {chatBoxBackup.Document.Blocks.Add(myParagraph);}` at which point it's treated like a multi-line function. I would pick up any introductory book to C#; they _should_ go over this and scoping (I would hope).
I'll never understand why it's always "student and grades". Are the teachers that academic and removed from reality they think that is a "good" way of making them learn C#?
Mocks (or stubs or fakes or etc) are used as substitutes for dependencies you either have limited control over or which have side effects which are undesirable for testing (e. g. database operations are relatively slow and can take a lot of time to set up or clean up after). This might include file system operations, date/time, database adapters, web services that aren't part of your project/solution, and so on. So, you create a mock to present exactly the conditions that would trigger the use case you're testing. You probably wouldn't create a mock object of a DTO, but you would mock up the repository the DTO was supposed to be passed to.
what would you suggest as a good problem? The one I have to make now is one that reads the winning lottery numbers for every week since 1957 from a file and selects the most picked numbers. Sounds tough to me and more exciting than the students and grades thing.
What about the good old? void DoSomething(bool a, bool b) { if(a) if(b) return; else Console.WriteLine("Gah!!"); } idk about C#, but languages like C cause problems when you do stuff like this, cause is the else clause part of the first or the second if statement? iirc it is compiler dependent. With C#, you just have the C# compiler, the DotNet Core compiler which presumably works just like the normal C# one since it is Microsoft, and the Mono compiler which hopefully works the same way the other two do. Either way, it is best to keep braces. This is the one and only thing I like about Python, etc, and that is that it forces you to use indentation correctly to assert scope, stopping stuff like this happening.
The purpose of a unit test is to test a single unit of work, not multiple dependencies. By using "real" code in dependencies you're no longer testing method X() but also Y() and Z() which exist in your dependency. The point of mocking is that you don't want to actually execute code outside the thing you're testing. 
For fast GDI bitmap manipulation there's [`Bitmap.LockBits`](https://msdn.microsoft.com/en-us/library/5ey6h79d.aspx), which lets you access the raw bytes of a bitmap. From there you just need to calculate the offset for the line (y*stride) and copy the section to your new bitmap.
I've actually found about using lockbits, but I'm a bit unsure of how to use it. Would you lock the destination bitmap at the start and then going through every source bitmap locking, copying and unlocking, unlocking the destination bitmap when you've gotten all the data? Thanks for the help btw!
Yeah, I've never totally got why auto-properties are better than plain fields. I suppose it might make it easier to, say, customise the Get method later if it's already a property. Though even saying that, I'm not sure how it would make a difference. 
First, I've run a WordPress blog and they never turn out all that great. A lot of fussing and updating and tweaking and installing random plugins and themes. Though I wouldn't let the PHP put you off - you never actually need to tangle with it, it's a platform, effectively. If I were to do it again, I'd consider some less customisable, prettier solution like Tumblr (free) or SquareSpace (fairly cheap). Second, if you want to use your .net skills, my friend raves about Umbraco as a CMS for .net. I dunno about hosting it... maybe you could use those free Azure credits that Microsoft hands out with MSDN these days. 
So after sleeping on it over night, I figured this one out. In my final test, the callback function incremented the counter and then attempted to wait for 2 seconds. If you look at the Time callback implementation, you will see I was spinning while the counter was less than 1 then calling Stop. So test would actually stop and continue before the wait ever executed. Basically, my test was bad because the wait never happens in the context of the test... To fix it all I needed to do was literally swap the wait and the increment. I updated the main post with my corrected code. It all passes now. Thanks for all the replies folks.
I don't think that works with .NET Core or with non-SQL Server databases.
 private static int GetGuess() { int guess = 0; try { guess = Convert.ToInt32(Console.ReadLine()); } catch (Exception) { Console.WriteLine("You did not enter a valid guess."); GetGuess(); } return guess; } How about a tutorial on recursive code and stack overflow exceptions? ;)
~~Using `Convert.ToInt32` on a char doesn't try to interpret the character as a number, it just returns the codepoint.~~ Shows how well I know the API. Same idea, different reason.
`Console.Read()` returns a numerical value of a `char` typed as an `int`. You probably want `Console.ReadLine()`.
You appear to be literally insane.
In case anyone wants to delve into the mind of the mentally unstable: https://www.reddit.com/r/cscareerquestions/comments/5hhhl3/lt_cmdr_jason_wesley_crusher_lind_reporting_for/ https://www.reddit.com/r/cscareerquestions/comments/4swsvh/jason_wesley_crusher_lind_seems_to_be_here_to_stay/ https://www.reddit.com/r/cscareerquestions/comments/4bsgrl/am_i_crazy_to_present_myself_as_a_wesley_crusher/ 
You can't even spell the Game of Thrones character names correctly. SHAME 
If I had to guess, given his comment history on Reddit, not just severely mentally ill. Off his meds (or on the wrong meds, or probably self-medicating because he knows better than everyone in his twisted world view), and probably entirely sociopathic and manipulative when he's 'well,' to boot.
Nadella didn't think I was that crazy. He responded to one of my emails in 7 minutes.
Did you even read my LinkedIn?
Basically they want you to initiate the options form from the main form. You could use the dialog function and set the parent form reference. All public &amp; internal properties would be visible to set from options. However you would have to cast it from the base type to the super type. https://msdn.microsoft.com/en-us/library/aa984373(v=vs.71).aspx http://stackoverflow.com/questions/2217716/set-the-parent-of-a-form You are right though. This is a very poor way to pass the data between forms. And is never ever ever used in a production app...... Unless you are in a hurry. 
I reminded him of my recommendation to make ScottGu Chief Software Architect when RayO resigned (to Ballmer who also replied to that email) and he said Thank you Jason: Sent from my Windows 10 Phone
Thanks a ton, I'll try this out!
Why not timers and/or elapsed time from previous frame cycle?
You have no idea how professional I take LinkedIn. I have 322 connections, 3 of which are retired USAF Generals and I'm a second degree connection of William T Lord who only has 23. My last position was Lead Solutions Architect at United Airlines. I have 16 exceptional recommendations. I don't stalk anyone esp someone as worthless as you seem to be. 
An easy way to do this is using a TextureBrush. You can create a TextureBrush for each region from each bitmap that you need and use the brush to draw that region on screen. Should go faster that getpixel/setpixel.
I'm currently learning C# as my 3rd language and this is my first dive into the boilerplate style of programming. You're site could be enormously beneficial to someone like me, can you post a link? P.s don't pay any attention to the obsessive compulsive programmers out there. They're a toxic breed.
*I don't stalk anyone esp someone as worthless as you seem to be.* Says the guy who's evidently stalking "Tom Evans", "Theresa Morden" and "Amanda Morden." Who the fuck are they, anyway? How many restraining orders do they have against you so far?
CSharp will do that to you
*Tom Evans is the retired CEO of Bankrate and Geocities who hired me when I was 11 for equity as the community leader of Hollywood* Geocities was breaking child labour laws? Holeeeee schiiiit lol. *I broke up Teresa's abusive marriage 3 years ago and we haven't talked since* I notice you didn't answer the question about restraining orders. I'll take your response as being "more than one." Do the authorities know you're cyberstalking these women? What about Tom Evans? Has he called the cops on you yet, or does he not know where you live?
We use them in background threads when there is no work to be done. We were originally using ManualResetEvents for controlling background thread control but the performance of a while loop with a thread.yield inside is much better and more consistent.
Thanks for the information everyone. I got some quotes, and I guess I seriously underestimated the costs involved in hiring a programmer so I gotta try to figure it out myself or do without lol. Thanks again!
Jason Lawrence Lind 414.788.2820 W2773 County Rd HH Cambria, WI 53923 Lind@Yahoo.com No orders of protection, no criminal record, military security clearance
https://www.asp.net/get-started For web development, the most mature and popular framework is the ASP.NET MVC, and would be worth learning. MS is pushing its new "Core" framework which, for lack of a better way of putting it, is just the "new" framework that has been pared down to be just what you need without the ENTIRE battleship of .NET. If you're going to start new, I would definitely just follow their tutorials, and you won't go wrong. https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-mvc-app/start-mvc "Entity Framework" is just MS's Object Relational Mapper for turning SQL queries/commands into C# objects and vice versa. EF is fairly mature, but most folks will complain (again) about it being bloated and filled with things you don't need. It is also ripe for misuse and failure if you don't understand the role of an ORM, and I've seen real world apps that failed and had to be rewritten because the author just didn't get it. Personally, I've had better success with light-weight ORM's like Stack Overflow's Dapper, where it is much harder to shoot yourself in the foot with the API. Webforms are still alive and well, primarily for those who do Sharepoint. IMHO, it's not something you want to invest your time in, as these technologies are a dead-end. Yes, companies still use them, but the only companies sticking with it are ones that can't afford to switch to something else. Overall, if you're looking to be a web developer, I'd say that your best investment is in open standards. Don't be afraid to look at frameworks like Angular, and Google's Polymer, as well as nodeJS for the backend. There will always be C# jobs for Enterprise developers, but the web (and MS) are moving towards technologies that better support the open standards and not proprietary frameworks. 
&gt; What say you? Is this coding style worth needing a ruler and sharp eyes to read method arguments? Or can I make the argument that the compiler optimizes away the temp variables? It doesn't. You can see this, a little test showing the compiled code for both versions: .method public hidebysig static void Main() cil managed { .entrypoint // Code size 14 (0xe) .maxstack 2 .locals init (class TestNamespace.ClassA V_0) IL_0000: newobj instance void TestNamespace.ClassA::.ctor() IL_0005: stloc.0 IL_0006: ldloc.0 IL_0007: newobj instance void TestNamespace.ClassB::.ctor(class TestNamespace.ClassA) IL_000c: pop IL_000d: ret } // end of method Test::Main // -- Versus -- .method public hidebysig static void Main() cil managed { .entrypoint // Code size 12 (0xc) .maxstack 8 IL_0000: newobj instance void TestNamespace.ClassA::.ctor() IL_0005: newobj instance void TestNamespace.ClassB::.ctor(class TestNamespace.ClassA) IL_000a: pop IL_000b: ret } // end of method Test::Main You can see the second version (without the temp variables) doesn't store the resulting object on the stack. All of that said, when profiling a few million calls to the different versions showed no measurable difference of time calling the two versions. Pushing and pulling from the stack is very efficient in .NET, it's certainly more efficient than hiding a bug in a single line of code that you can't sanely debug.
Probably the most entertaining thing you'll read in a while. Could be titled "When cyberstalker meets sociopath meets off-his-meds cray-cray."
...waits for the "Admiral Nash" mentored me tale.
As a counterpoint, I've done the same comparison, but let the JIT run - the code is the same: First, temp variables: Thing thing = ThingMaker(); 00007FF97F560502 sub esp,20h 00007FF97F560505 mov rcx,7FF97F458A50h 00007FF97F56050F call 00007FF9DEB52510 00007FF97F560514 mov rsi,rax Widget widget = WidgetMaker(); 00007FF97F560517 mov rcx,7FF97F458B00h 00007FF97F560521 call 00007FF9DEB52510 00007FF97F560526 mov rcx,rax widget.DoWork( thing ); 00007FF97F560529 mov rdx,rsi 00007FF97F56052C mov rax,7FF97F560100h 00007FF97F560536 add rsp,20h 00007FF97F56053A pop rsi 00007FF97F56053B jmp rax Second, no temp variables (line breaks added for clarity): WidgetMaker().DoWork( ThingMaker() ); 00007FF97F550502 sub esp,20h 00007FF97F550505 mov rcx,7FF97F448AB0h 00007FF97F55050F call 00007FF9DEB52510 00007FF97F550514 mov rsi,rax 00007FF97F550517 mov rcx,7FF97F448B60h 00007FF97F550521 call 00007FF9DEB52510 00007FF97F550526 mov rdx,rax 00007FF97F550529 mov rcx,rsi 00007FF97F55052C mov rax,7FF97F5500D8h 00007FF97F550536 add rsp,20h 00007FF97F55053A pop rsi 00007FF97F55053B jmp rax The code is identical.
How about a tutorial on interacting with/over USB in c#? There isn't much at all online about it save a few libraries that seem dead now and windows runtime docs.
Nothing wrong with temp variables, generally. If you find yourself creating a LOT of temp variables in your code (say 4 or more) it's often a sign that the code using those variables should be extracted into a function. In other words, most of the time if you have a ton of temp variables then you also have a really long function which could possibly be refactored into a few smaller functions.
You're right, of course. I was thinking of VBScript, which is different than VB.
Ah yes, that I would agree. Though I have to say I'm surprised that no one made a "Iron VBScript" for porting all of that old classic ASP code onto the .NET runtime.
Use temp variables. They make debugging easier. Your "team lead" doesn't know what he is talking about.
Next step: polish your resume. Time to level up, you've outgrown your current job.
&gt; our team lead REJECTS any code submitted with temp variables because it's "wasteful and inefficient". Your team lead is crazy and doesn't know what he's doing.
&gt; our team lead REJECTS any code submitted with temp variables because it's "wasteful and inefficient" Then he has no idea what he's talking about. The examples you gave will produce exactly the same IL (when optimization is turned on). The only difference is in readability and maintainability which is always debatable and preferential.
At least the latter. He might not be clinically crazy :p
It may or may not produce the same IL, but it will produce the same machine code at any rate, post-JIT compile. 
The factory often acts like a poor man's service locator. It doesn't have to, but when I see them chained as in this example it's pretty clear that's what's happening. With dependency injection you generally inject the actual dependencies, not factories that then have to go off and create them. (I particularly dislike this pattern because the factories hide what the actual dependencies are. Obfuscation is rarely a benefit in my book.) When dependency injection is done especially well, your dependencies are essentially immutable and offered to the rest of the application via an aggregate root that was created during application startup. 
I would be surprised if it had the same IL, if for no other reason than IL is only minimally optimized. Most of the heavy lifting is off-loaded on the AOT or JIT compiler.
Just pretend you are working in JavaScript, where removing whitespace is an optimization technique. (And not just for network bandwidth.)
Thank you for such helpful material and please do not stop! Why not make a loyalty card app or a simple calculator app? Maybe a super simple app that communicates with a server? Just a suggestion.
Instead of using all those temp variables, and calling all those factory methods you really should look into using a dependency injection framework. If you can get your team lead to accept that though. [https://msdn.microsoft.com/library/ff647202.aspx](Unity) works splendidly, but is not being developed much anymore, as far as i know. There is a fine framework build into .net core if you can go that way, and probably some other framework for .net non-core.
There are many valid use cases for injecting factories; for example if you're maintaining a collection of dependent objects. You need a way of creating new instances without assuming any concrete types. Technically this could be achieved by injecting the IoC object directly, but that in itself is a code smell. Would recommend the Dependency Injection in .NET book if anyone's interested in best practice.
This... Also in genereal the less is going on in one line of code, the easier it is for the compiler to optimize. So yes, things that have to run a lot/fast should be simplyfied as much as possible. When I started out I asked my "Mentor" how to write fast code. He said that if I read readable code I usually get everything else with it, maintainability, readability, speed etc. In the last 2 decades since then I have found this to be true.
https://www.reddit.com/wiki/selfpromotion
&gt; Sadly, we're homegrowing applications all the time in a ridiculous number of languages (php, asp, asp.Net, C++, C#, VB, VB.Net, Breeze, angular, javascript, etc.), all depending on one legacy db that's been growing without a true direction for 17 years. Make it available through one interface for all the other projects
Could be a "throwaway" reddit account that links to his real identity. While he's a regular user on another account where he maintains anonymity and contributes to this subreddit in other ways? Also he's contributing content to this subreddit that people seem to upvote thus indicate that they like it and it belongs? He seems to respond to user comments on his posts.
Nay
That seems like the kind of kind of thing that management would have been all over if they knew it was an option, which any reasonable dev would have kept their mouth shut about knowing they've finally found a way out of that hell that management will accept.
He said those exact words? Oh man, that sucks. Actually, he sucks. It's just a temp. Did he ever heard about DI libraries? ffs... I guess, what you could do to make him happy, and just a bit happier yourself is this: var result = transmogrifier.DoSomething( barFactory.Create( fooFactory.Create(), blahFactory.Create(yaddaFactory.Create()), someValue, anotherValue; ) ) Although if he complained about using temp variable, I would expect him to worry about some indentation, fearing it would make the program uncompatible with previous Windows versions.
Situational. But in the event that they are unneeded, compilers will optimize them out. But in most cases "yay". The way my coding style is, if it's used in more than 1 spot, it gets a temp variable.
Not IMO. The code in the example is explicitly testing for *different* interfaces. Rather than a switch statement, the Strategy Pattern should be used to allow for N implementations, without modification to the code. A violation of LSP might occur in a similar pattern though. For example, if it was necessary to test the type of shape in order to calculate the area then that would be a clear violation. Since all Shapes have areas, it should not be necessary to know the instance type in order to calculate the area. Of course, no one writes "real" code this way and examples this contrived will always have weaknesses :).
It may or may not (depending on your naming and preference) also look better to used named parameter passing, e.g. var result = transmogrifier.DoSomething( bar: barFactory.Create( foo: fooFactory.Create(), blah: blahFactory.Create( yadda: yaddaFactory.Create()), someValue: someValue, anotherValue: anotherValue ); ) ) edit: fixed to use c# syntax.
How exactly do the compilers optimize it? I believe you, just am curious.
FWIW: the syntax uses a colon, not an equals sign: var result = transmogrifier.DoSomething( bar : barFactory.Create( foo: fooFactory.Create(), blah: blahFactory.Create( yadda: yaddaFactory.Create()), someValue: someValue, anotherValue: anotherValue ) );
Thanks for the correction, it's early here ☺️
You code for readability. &gt;but our team lead REJECTS any code submitted with temp variables because it's "wasteful and inefficient". The guy has no idea what he's talking about. Compiler will optimise that.
CLR is intrepreted in realtine and transpiled to native instructions. While this is happening it makes all kinds of tweaks at runtime. Also the compiler does some magic at compile-time.
I would like to help but if you could give us some information on your problems. What do you not understand?
If you left a job over every idiot you worked with you'd be moving a lot. The grass is always greener, and I've never found a place that is without it's issues. We have a small sliver of a view into this guy's work environment, hard to judge from just that.
Your team lead is a fucking idiot. Variables in cases like these allow you to keep lines short and sweet, to inject names which can help make your code easier to read still, and "waste" is an extremely poor excuse.
Removed: Rule 3.
I prefer creating 'temp' variables because it helps me understand when something is complex to construct. That tells me I'm mis-applying IoC if the creation code is anywhere but in the bootstrapping. For example, let's look at your last line, where *transmogrifier.DoSomething()* is called. In production code, I'd change the *Transmogrifier* class to take *BarFactory*, *FooFactory*, and *blahFactory* as dependencies, so the call site would become: transmogrifier.DoSomething(someValue, anotherValue); I can contrive situations where I'll bend this rule, but I consider 'I pass temporary instances to another thing' to be a smell.
Then why don't you explain it to me genius. Every time I encounter it I end up having to struggle to figure out what the fuck I can do with variable and it usually involves some sort of crappy annoying type cast! 
I see. Thanks for the response, I'll bare that in mind in the future
I see, thank-you for responding. I'll play around with it until the desired behaviour is achieved and bare that all in mind in the future.
Noted. Thanks
I agree there is a gap between beginner tutorials and advanced ones. I am trying to make each tutorial I create to build on the previous. Do you think a road map of content from beginner to advanced would be helpful?
You do can. 
My other buttons just doesnt work 
You could use ASP.NET almost exactly like ASP, even in the webforms days. It wasn't what the default templates would do, but you could do it. The biggest problem would be that ASP/VBS would probably depend on a lot of COM objects and using those would be different in VB.Net. And the MS docs certainly did imply that WebForms was the way to go.
Hope it wasn't too confusing, but I tried to add some explanation to what was going wrong. Good luck with your coding!
https://msdn.microsoft.com/en-us/library/1k1skd40(v=vs.110).aspx https://msdn.microsoft.com/en-us/library/zdtaw1bw(v=vs.110).aspx https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx https://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx
Removed: Rule 4. Feel free to repost or edit, but you'll need to include more context and a better description of what you're trying to achieve and what the current incorrect behaviour of your application is.
You don't need a factory. A simple lambda is going to be far more flexible for you users. See ConcurrentDictionary.GetOrAdd for an example. https://msdn.microsoft.com/en-us/library/ee378677(v=vs.110).aspx And why can't you just call the constructor? Factories can be useful when you need to conditionally look up a pre-existing value, but if you creating a new one each time that's why constructors exist. *** Remember, in the GoF Design Patterns book, the Abstract Factory pattern wasn't just "hey, lets recreate constructors in an inconvenient fashion". It was a way to construct a set of related classes. See DbProviderFactory for an example https://msdn.microsoft.com/en-us/library/system.data.common.dbproviderfactory(v=vs.110).aspx
Fair enough.
He's given you the tools; make an attempt. If you run into issues, feel free to post what code you have, and what it's currently doing or not doing.
The whole exception could and should be avoided by using `TryParse` instead of `Convert.ToInt32`.
I used to use temp variables a lot. They help when you're debugging because you can see intermediate results rather than just, one of these 6 things threw an exception, and I can't tell what was null. And they *can* also help readability when you name them well. I don't use them as often anymore, though. When I'm debugging, it's not that hard to deconstruct a dense line of code if something is going wrong inside of it. Yeah, it's annoying, but it's not that much of a time sink or distraction compared to the total cost of fixing the bug. And as others pointed out, using line breaks can greatly help readability and make the call not look so dense. I also make use of named parameters, which does as much for readability as named temp variables. So something like: var result = transmogrifier.DoSomething( barFactory.Create( frobnicator: fooFactory.Create(), encabulator: blahFactory.Create(yaddaFactory.Create()), baz: someValue, quux: anotherValue); Assuming that it's not obvious from context that `fooFactory` is providing a frobnicator and `blahFactory` is providing an encabulator, and that `someValue` and `anotherValue` are literals or shouldn't already be named `baz` and `quux`. All this being said, I rarely if ever refactor temp variables down to single statements unless the code is just a complete mess, and I wouldn't put it down in a code review. The only exception is when methods start getting really long, and you assign a variable and don't use it for another 20 lines or so, then things start looking like spaghetti. That's not the temp variable's fault, you could just move it to right before where it's used, but if you do it the more compact way, you tend not to run into that issue in the first place.
Thank you for this
Yeah, I thought the same when I was writing it. I've tried reading a few of those papers and I realise I understand such a small amount!!
Thanks, glad you liked it
I doubt it very very much.
Inefficient? Performance-wise? That should be easy enough to benchmark for a test suite or two.
A road map for sure would be helpful.
 if (new string[]{"q","w","e","r","t"}.Contains(str)) { }
As Ramdrist mentioned, a road map that's allows other to up-vote would be helpful. Also a newsletter for me to subscribe to would be awesome :)
Look into the System.IO namespace and the StreamReader class. That should help you on your way.
I've taken a fair amount c# online tutorials and not a single one has used a switch statement. Seems odd that something that powerful gets no live in tutorials. I still have never used one... 
Also the File.WriteAllText method, also in the System.IO namespace. 
if anyone could write atleast some of the code for me id be a happy man
Removed: Rule 4. Plenty of resources available (one mentioned here) on how to read/write text files, as I'm sure there are resources available in your class. Make an attempt, then if you have issues, feel free to post a specific question, and include the relevant code that you have at that point.
I don't have a newsletter yet but I do have an email list you can subscribe to and get updates for when I post new articles. You can get on that list by entering your email at the bottom of most posts. If I created a newsletter, what type of content would you like to receive?
Technically you can program forever and never ever use a switch statement. So I guess since they're avoidable people don't go too heavy into focusing on them but if you search for a tutorial on them you'll find plenty. So maybe you're just watching the wrong tutorials too. 
I used a switch instead of the first one; What's the reasoning behind not using switch as opposed to the first method?
Switch is what I needed, thanks! It needed to be if x is equal to 1 or 2 or 3 or 4 or 5 but have different code ran for each possible value
Yeah the same logic was behind the entire statement but I went with a switch statement instead. It's quite easier to type that out.
I could have worded the thread a little bit better but I needed different code ran for each possible value (Q,W,E,R,T). I used a Switch Statement as its exactly what was needed. Thanks for the post though!
According to this stack overflow guy there really is no reason... http://stackoverflow.com/questions/767821/is-else-if-faster-than-switch-case &gt;"The results show that the switch statement is faster to execute than the if-else-if ladder. This is due to the compiler's ability to optimize the switch statement. In the case of the if-else-if ladder, the code must process each if statement in the order determined by the programmer. However, because each case within a switch statement does not rely on earlier cases, the compiler is able to re-order the testing in such a way as to provide the fastest execution." However, there are cases where you would likely want to write an if else sequence. One example is a situation where you know 99% of the time, the first condition or second condition is always going to be met. This really depends on what you are dealing with though because if you have a 10 deep if else block and the 10th condition gets hit even once, this is going to cause you a more dramatic slow down than the additional cost a switch statement may or may not incur by it doing optimizations for you... Bottom line is do whatever you feel is more readable unless you have a specific reason to be splitting hairs. 
Personal preference, it doesn't matter. Some languages do not have switch statements. It's good to know how to use and understand both. (I personally like using switches when many of the cases perform the same action because they can be very concise). It is also important to realize that in many languages, switch statements by default "fall through" to the next case if you omit the "break;" statement. C# doesn't allow this implicitly, except for the trivial case I showed. Ordinarily if you want to fall-through to the next case in C# you have to say "goto case 2;" In other languages, like C++ or Java, that is not the case and switch statement may be considered by some to be more prone to error. Speed considerations are irrelevant unless you are writing code where you know speed is a major concern, and in that case there are likely many many other factors to consider. Note, some people may say switch statements are faster because they use "jump tables" but that is compiler specific and may only apply when you switch on a set of known discrete values such as an enumeration. 
The syntax would be `str.inpuy == "x" &amp;&amp; str.input != "y"`, but the second clause is completely redundant in that, since, if the string is "x", it will of course not be "y".
without cmd, my code does not work
Well it depends if you're using configuration files from an older project or if you create a new one in VS 2017 RC. I had no issues at all with creating a new project and deploy it both to IIS or docker
I do if("qwert".Contains(str)) { }
If the compiler can reason that the variable does not escape the scope in which it is declared, it can be inlined. And for the JIT, the example is in a comment further up. 
You get issues when you start doing **anything** beyond the standard stuff. For example, how do you change the configuration to target .NET Core **and** .NET 4.6.2? Or how do you switch to the standalone distribution model?
&gt; At work, some of our code for the danish modules are written in danish, which works fine now... let's hope we don't hire foreigners or outsource some jobs :p. I would hate to read our danish language in the source files at my work, some of our student coders used to mix danish and english in which is annyoing to read :P
Also, switch statements are only *really* faster when the statement count is large. Honestly, though, it's a micro optimization that the majority of people shouldn't worry about. Use what you like. 
Have you had a chance to see the new switch statements coming with c#7? They look fantastic; being able to switch on basically anything, even with expressions. Looks cool. I'm sure there will be tutorials which will cover that! Lol.
Thank you! One of my biggest issues was not knowing a clever search term for my problem. I'm sure these will help!
This, the Arduino does the USB stuff for you, has the side effect that you can have 20 or so buttons or 'couple of switches
No problem. I typically use the language, followed by frame work and a couple words about the problem... so in this case: c# tpl timeout task tpl = task parallel library
I haven't, very minor coder here. Mainly just a manipulator, haha I'll look into the switches though because they look very convenient. 
In the newsletter I would expect you to tell me what tutorial you're releasing and any upcoming in the future.
Perhaps you can create a Converter and pass to it the BookAuthors array and return the string with all authors.
If you want to check time-consumption of you program, you should look into the [Stopwatch Class](https://msdn.microsoft.com/en-us/library/system.diagnostics.stopwatch(v=vs.110%29.aspx) and/or look into [performance profiling](https://msdn.microsoft.com/en-us/library/ms182372.aspx).
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/dot_net_development] [Client.Download not direct links? \[Xpost \/r\/csharp\]](https://np.reddit.com/r/dot_NET_Development/comments/5i41cc/clientdownload_not_direct_links_xpost_rcsharp/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
do it in a loop, each iteration launch a Task&lt;&gt; to do the work, and wait on the Task for X amount of time. If the timeout kicks in, kill the task, and let the loop continue. 
[removed]
I think people are over complicating this. basic devices are pretty cheap (couple of cents really). I would use a HID compatible device such as FT260 and use c# standard libraries to identify and use the device. here's what you need to know. USB PinOut: http://www.hobbytronics.co.uk/usb-connector-pinout FT260 data sheet: http://www.ftdichip.com/Support/Documents/DataSheets/ICs/DS_FT260.pdf C# library to use: https://msdn.microsoft.com/en-us/library/system.io.ports.serialport.aspx this should be everything you need to know. the driver is standard on any operating system. Good luck I'd love see what you build!
Thank you so much 
The issue is that the web page redirects to the download after loading. So when you hit `client.DownloadFile("https://www.malwarebytes.com/mwb-download/thankyou/")` you're probably just downloading the rendered HTML of that "Thank You" page. (EDIT: So naturally, the exe would be considered "corrupted" because it's actually HTML.) Instead maybe try hitting the URL "https://downloads.malwarebytes.com/file/mb3/" or "https://data-cdn.mbamupdates.com/web/mb3-setup-consumer-3.0.4.1269.exe".
With some of the other files i required the url is a temp one as it only lasts 10 mins is it possible to grab the redirect url and then use that?
I'm not sure I can answer all of your questions, and I'm somewhat new to this myself, so I'll try and give you an overview of my understanding (mostly as an exercise for my self). **Scope**: The DataContext of an control is "inherited" to all it's child controls, so if a Grid is inside a Grid inside a Grid etc... all those Grids have the same DataContext, lets call it ViewModel1. This "master" DataContext can be defined in the code-behind or with a binding. ViewModel1 is just a class and has public properties such as ShouldBeVisible, so for any control inside these Grids you can for example bind the visibility to this property directly (with the appropriate converter if ShouldBeVisible is a bool) - i.e. something like &lt;Button Visibility="{Binding ShouldBevisible, Converter={StaticResource BooleanToVisibilityConverter}}" &gt;"button stuff"&lt;/Button&gt; Now if ViewModel1 has a public property that is ViewModel2, then you can specify the DataContext of a "sub Grid" to be that ViewModel2 only, i.e. &lt;Grid DataContext="{Binding ViewModel2}"&gt;"stuff"&lt;/Grid&gt; That way you don't have to bind to ViewModel2.PropertyHere inside that Grid and can just bind directly to PropertyHere inside this "sub Grid". **XAML vs. Code Behind**: From what I understand here the advantage of doing bindings in XAML, or rather "doing as little as possible in Code Behind" is testability. It is easier to write testable code if you don't rely on stuff (like click handlers) in the code behind. **Paths and Sources**: This image helped me understand this a little better. http://blog.scottlogic.com/archive/2012/04/BindingMarkup.png (from http://blog.scottlogic.com/2012/04/20/everything-you-wanted-to-know-about-databinding-in-wpf-silverlight-and-wp7-part-two.html) Element names come into play if you are doing Relative bindings, i.e you want to bind to a property of another named element. Say you have a TextBox and a Grid below it and you want the Gird to define the width of the textbox, you could give the Grid a name and bind to the actual width of the textbox to it - i.e. &lt;TextBox Width="{Binding ActualWidth, ElementName=PART_ExamTypeGrid}" &gt;"Textbox stuff"&lt;/TextBox&gt; &lt;Grid x:Name="PART_ExamTypeGrid" &gt;"Stuff inside grid"&lt;/Grid&gt; **What??**: As far as I know, these are just any classes you define. I don't think they have to be any special type of object, it's just that if they don't define the public properties you are trying to bind to, then the binding will not work - i.e. if ShouldBeVisible is missing from whatever class the DataContext is set to, then the binding would fail (you get a console errors for these usually) and the object would probably not display (depends on if you define a fallback value, etc...) 
&gt;Scope: The DataContext of an control is "inherited" to all it's child controls, so if a Grid is inside a Grid inside a Grid etc... all those Grids have the same DataContext, lets call it ViewModel1. This "master" DataContext can be defined in the code-behind or with a binding. ViewModel1 is just a class and has public properties such as ShouldBeVisible, so for any control inside these Grids you can for example bind the visibility to this property directly (with the appropriate converter if ShouldBeVisible is a bool) Ok, cool. I guess my follow up would be, what Objects do you have access to set as your DataContext from that control? I assume it has to be an object or data that's been defined inside that specific Control. So, ViewModel1 would have been created inside the Control where all the grids are defined? Not sure if this question makes sense or is so seemingly obvious. What I'm trying to clarify is the relationship between the User Controls I'm making and what Objects I have access to set my DataContext to from those Controls. Does that make sense? I wouldn't be able to set my DataContext for UserControl 1 to a bit of data or an object that exists only in UserControl 2, right? &gt;Paths and Sources: This image helped me understand this a little better. http://blog.scottlogic.com/archive/2012/04/BindingMarkup.png Element names come into play if you are doing Relative bindings, i.e you want to bind to a property of another named element. Say you have a TextBox and a Grid below it and you want the Gird to define the width of the textbox, you could give the Grid a name and bind to the actual width of the textbox to it In your example, what exactly does ActualWidth represent? I get that this is taking the value of the PART_ExamTypeGrid Framework Element and setting the Width of the TextBox to that, but I'm confused as to what ActualWidth is doing. Also, wouldn't it be {Binding Path=ActualWidth? This is one of the things I'm having trouble understanding, sometimes Paths are set, sometimes they're not. Sometimes Sources are set, sometimes they're not. Then there are StaticResources as well. Just a lot of different things going on. 
Are you outputting the data to the sound card or do you want to analyze "what you hear"?
&gt;It sets your DataContext to be your window or form. Ok, so at that point I have access to bind to any object or data that has been declared inside that simple Window or User Control? The thing I'm trying to understand is, once I've set the DataContext, what all am I able to access with my Bindings in XAML vai Source and Path? &gt;For example you may use a source when you need to travel up the visual tree from the DataContext of an item in an ItemsSource to your main DataContext. Would you be able to provide a bit more detailed example of this by chance? I'm having difficulty conceptualizing this simple example. &gt;Finally DataContexts can indeed be set to anything (as it is just an object), but should almost always be set to be a proper viewmodel. It may not be obvious as a WPF beginner, but WPF really does work better in a proper MVVM environment. I think this is one of my biggest issues thusfar honestly, the lack of understanding of MVVM. I've been messing around in WPF but I don't believe I'm implementing anything in an MVVM structure...mostly because I'm not keenly aware of what that is. I don't believe I'm doing anything to follow this pattern though, which leaves me wondering if there's a lot more reading up that I need to do before trying to move forward. I'm able to get things working...but having difficulty understanding what the proper setup for some of this stuff should be.
Have a look at the WasapiLoopbackCapture class.
&gt; Note: A few of the simplifications to the project files are not included in the update that we are making available today, but we plan to include them in a later update. I still have *some* hope. But you are probably right.
&gt; The thing I'm trying to understand is, once I've set the DataContext, what all am I able to access with my Bindings in XAML vai Source and Path? &gt; You are able to access any *property* that has been set to `public` on your `DataContext` object. `Public` properties and *only* `public` properties are available to you. Methods and fields are not. It's very common, especially for beginners, to try to bind to a field and then wonder why your binding is not working. Behind the scenes WPF uses reflection during the binding process to find these things. If it can't find the right signature then it will fail to complete the binding. I actually view this is a bit of a flaw with WPF because it leaves a lot of `public` properties exposed when normally I'd prefer to define them as `internal`. (This comes up in commercial software when you'd like your program to be at least a little resistant to reverse engineering. The web guys get off easier here.) &gt; Would you be able to provide a bit more detailed example of this by chance? I'm having difficulty conceptualizing this simple example. Consider the following XAML: &lt;Window x:Class="TestWindow" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" DataContext="{Binding RelativeSource={RelativeSource Self}}" SizeToContent="WidthAndHeight"&gt; &lt;DockPanel&gt; &lt;TextBlock Text="{Binding Header}" HorizontalAlignment="Center" DockPanel.Dock="Top"&gt; &lt;ListBox ItemsSource="{Binding ListItems}" DockPanel.Dock="Top"&gt; &lt;ListBox.ItemTemplate&gt; &lt;DataTemplate&gt; &lt;Grid&gt; &lt;Grid.ColumnDefinitions&gt; &lt;ColumnDefinition Width="Auto"/&gt; &lt;ColumnDefinition Width="*"/&gt; &lt;/Grid.ColumnDefinitions&gt; &lt;TextBlock Text="{Binding Header, RelativeSource={RelativeSource AncestorType=Window}}" Grid.Column="0" /&gt; &lt;TextBlock Text="{Binding}" Grid.Column="1" /&gt; &lt;/Grid&gt; &lt;/DataTemplate&gt; &lt;/ListBox.ItemTemplate&gt; &lt;/ListBox&gt; &lt;/DockPanel&gt; &lt;/Window&gt; `DataContext="{Binding RelativeSource={RelativeSource Self}}"` is the XAML way of saying `DataContext=this` Now in the code behind of your window add the following properties: `public string Header { get; private set; } = "Header Text";` `public ObservableCollection&lt;string&gt; ListItems { get; private set; } = new ObservableCollection&lt;string&gt;() { "one", "two", "three" };` Pardon any syntax errors, I'm writing this up in Notepad++. Now then you'll see three bindings in here. The first binding will bind to the `Header` property in your `Window`'s `DataContext`. This is your ordinary kind of binding that you'll use the most. It is equivalent to saying `{Binding Path=Header}`. Now on to the second and third bindings. When you use a `ListBox` each item gets its `DataContext` set to the item is it bound to. In this case I've used an `ObservableCollection` of type string, so we are only binding to strings. In common practice you usually define a `class` that has various properties on it that you will bind to instead of just using a `string`. The second binding, then, looks like the first one with the addition of a `RelativeSource` attribute. Here I'm telling the binding to go up the visual tree until it finds a `Window` element and use that element's `DataContext` as its `DataContext` for the binding. The third binding is a bit of a special case, but it works here. Here I'm telling it to bind to its `DataContext`. Since the `DataContext` of each `ListBox` item is just a `string` this works out ok for us. If we had a more complex `class` backing the item then we'd want a path that corresponds to the property we defined in the `class`. I don't have any good sources for how to learn MVVM, but hopefully someone else will come along with some. I mostly learned by doing and copious consulting with StackedOverflow.
... do stuff ... is what he's trying to break out of if it's taking too long. He wouldn't know it's taking too long until after the fact. 
Could you be a bit more specific about what you mean? For example in WPF etc you can have MVVM which uses service location for VMs. But you can also use DI for this kind of stuff (using Ninject or something). 
When it's not *necessary*, it shouldn't be used.
Does it have to be USB? if the connection has to be USB but the rest can be whatever you like then the easiest way to do this (not necessarily the cheapest ) that I can think of would be: * Get a USB -&gt; serial converter. * Make a loopback connection on the serial end with your switch in between where you crossover the RX/TX. * you can now use the easy serial port classes to transmit an output and detect when you have an input. * get some logic to dictate when the input is no longer coming in (because you flicked the switch to off) and show on the GUI. you wont fry your motherboard or usb ports... you wont need to do any electronics apart from solder 2/4 wires and wont need to program an arduino unit!
Libusbsharp?
That's exactly what I'm using the service locator pattern for, and that is exactly how I implemented it. My question was about your general thoughts on the service locator pattern.
Any alternative solutions? I'm aware of MEF but eh...I had terrible performance issues with it
You can use whatever language you want so its not C# specifically but project euler is pretty cool if you have any interest in Maths, basically its solving math problems with code e.g. problem 4 is find the largest palindrome made from the product of two 3-digit numbers. They get more difficult as you go on and you have to think about performance on the more difficult ones especially for things like prime numbers and factorisation https://projecteuler.net/archives
Lots of edits for formatting**
Adding a reference should be same-same in both. However, make sure that you're actually calling the service (WCF/Web/etc) from within the thread created in your OnStart override, and not the main program thread. 
No
Why are you writing the bytes to a file before writing the file to the Response vs writing the byte array directly to the Response? Response.BinaryWrite(Map.Doc); or Response.OutputStream.Write(Map.Doc, 0, Map.Doc.Length); 
Interested in hearing about how you ended up implementing this!
`int i = 0;` doesn't seem to be used anywhere. In this line: intMaximum = lstFirstName.Items.Count &amp; lstLastName.Items.Count &amp; lstCard.Items.Count &amp; lstPhoneNumber.Items.Count; You are doing a bitwise AND operation, which isn't what you want. Instead you should be getting the minimum Count value so you do not get an IndexOutOfBounds exception. You could try something like this (using System.Linq): int maxIndex = new int[] { lstFirstName.Items.Count, lstLastName.Items.Count, lstCard.Items.Count, lstPhoneNumber.Items.Count }.Min(); The intIndex should have an `int` or `var` in front of it. For the output, you need to add `.ToString()` to `.Items`, and include the other listbox items, e.g. : string output = $"{lstFirstName.Items[intIndex].ToString()}, {lstLastName.Items[intIndex].ToString()}, {lstCard.Items[intIndex].ToString()} {lstPhoneNumber.Items[intIndex].ToString()}"; customersStreamWriter.WriteLine(output); 
/u/Capitalist_P-I-G, This is the standard approach for what you want to do. You can get fancy, but in the real world this is how it is done. When you show the Options dialog from the Tickets dialog, your parent Tickets dialog maintains a reference to the child Options dialog. When users close that dialog, it still exists, it's just hidden. You can read any of the values out of it you want the parent Tickets dialog to know about. P.S. the same works if you were to use `Show` instead of `ShowDialog` so that they would both be editable at the same time. You would only need to move around some of the variables in the sample /u/TheManFromOregon provided.
Never figured much out. Still in the testing phase. I just move the bin folder over and just run it a bunch of times.
Thanks for the insights!
Amazingly, or maybe foreboding, but my experience introducing the service locator pattern was about the same. I ended up ripping it out in favor of DI a year later though.
Hm, interesting. I'll keep that in mind, thanks.
I tried Response.BinaryWrite(Map.Doc); and got the same result. (I get a small blank box). I'll certainly look into both of these more tomorrow. Thank you.
To properly format your code you need to: - Have one empty line between code and regular text. - Indent every line by 4 spaces.
Check the app.config files to make sure they have the same service binding configuration. 
that exactly what i did in the end. thanks.
The only other suggestion that I have is to add response headers. Response.AddHeader("Content-Type", Map.DocMIMEType); Response.AddHeader("Content-Disposition", $"inline;filename=\"{Map.ImageFileName}\""); Response.AddHeader("Content-Length", Map.Doc.Length.ToString()); Response.BinaryWrite(Map.Doc); Use your browser's developer tools to examine the Response to see what your browser is actually receiving.
Doesnt this mean that it will be in sync? Shouldnt you do something like Task a = A(); Task b = B(); Task c = C(); await a; await b; await c; Then the B before A might happen. Correct me if I am wrong.
I have a helper method that uses Dapper to return the resultset from a sproc: private IEnumerable&lt;T&gt; GetSprocResults&lt;T&gt;(string sprocName, object param) { IEnumerable&lt;T&gt; ret = null; using (IDbConnection conn = GetConnection()) { ret = conn.Query&lt;T&gt;(sprocName, param, commandType: CommandType.StoredProcedure); } return ret; } Then I'd call it something like this: IEnumerable&lt;SubscriptionRequestsByClientIDTypedViewRow&gt; r = GetSprocResults&lt;SubscriptionRequestsByClientIDTypedViewRow&gt;("dbo.usp_GET_SUBSCRIPTION_REQUESTS_BY_CLIENT_ID", new {CLIENT_ID = clientId}); return r.ToList();
Yes cancellation tokens would be best, but depending on what hes doing that might not be possible. Either just killing the thread hard, or letting it run abandoned in the background would work though. 
[I would go with `Task.WhenAll(a, b, c)`](http://stackoverflow.com/questions/18310996/why-should-i-prefer-single-await-task-whenall-over-multiple-awaits) like /u/_mainEvent mentioned.
TheNewBoston on YouTube will show you switch statements. 
Rachel Lim's articles are very good. e.g. [A Simple MVVM Example](https://rachel53461.wordpress.com/2011/05/08/simplemvvmexample/) With MVVM your ViewModel is typically set as your DataContext, then you bind in XAML to properties on the ViewModel. The key advantage with binding in XAML is that once you have the bindings set up properly, you can just work with basic classes in your ViewModel - no messing around trying to find specific cells in DataGrids, manually tracking the current item or other fiddly UI stuff. e.g. you set the DataContext to point to your ViewModel, bind a DataGrid to a collection on the ViewModel, bind SelectedItem to a property on your ViewModel, then whenever you change your selection in the UI, the internals pass through and update your 'current item' property on your ViewModel. Don't get put off by MVVM. At it's core it's a very simple idea. It just looks complicated when you start reading up on various frameworks, etc. You don't need all that when you're starting off. In basic terms, View is your XAML window/usercontrol, Models are your basic classes and the ViewModel is a class holding references to your models, that you generally set as the DataContext in your View. Rachel also has followup articles for navigation, etc. Work through those and it should start to make sense.
To make the options form come up, in your load event you should use something like: OptionsForm form = new OptionsForm(); . Once you have this it should be a simple form.Show(); . So a basic summary of what you have to do is create an instance of OptionsForm. Then with the created object you should call the Show() method. Hope this helps.
Thanks!
No problem. 
This is possible https://www.dotnetperls.com/dllimport
I think you are asking if you can write a C# class to wrap the native dll and produce a managed .net dll that invokes the native dll... You might want to check this [MSDN article](https://msdn.microsoft.com/en-us/library/ms235281.aspx) out to get started. 
It would be helpful if you provided the stripped down class declarations, I'm not sure if I understand your description. You could have a look at the visitor pattern.
I've tried your suggestions; still no luck. If I use "Response.WriteFile("FileOnSystemPath");" everything works fine. This leads me to believe the issue is with the byte array. But ... that same byte array works in VB.Net.
Thanks for your reply. 
I'm an amateur web designer, and usually for convenience I use Bootstrap's column layouts to organize my pages for mobile/desktop viewing. http://getbootstrap.com/css/#grid
That links got all you need, you're most likely already using bootstrap since it comes in default with .net - mvc projects.
&gt; For more information about numeric format specifiers, see [Standard Numeric Format Strings](https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110\).aspx) and [Custom Numeric Format Strings](https://msdn.microsoft.com/en-us/library/0c899ak8(v=vs.110\).aspx). Within the former, in the row for "x" or "X": &gt; Result: A hexadecimal string. &gt; Supported by: Integral types only. &gt; Precision specifier: Number of digits in the result string. &gt; More information: [The HexaDecimal ("X") Format Specifier](https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110\).aspx#XFormatString). Clicking for more info: &gt; ##The Hexadecimal ("X") Format Specifier &gt; &gt; The hexadecimal ("X") format specifier converts a number to a string of hexadecimal digits. The case of the format specifier indicates whether to use uppercase or lowercase characters for hexadecimal digits that are greater than 9. For example, use "X" to produce "ABCDEF", and "x" to produce "abcdef". This format is supported only for integral types. &gt; &gt; The precision specifier indicates the minimum number of digits desired in the resulting string. If required, the number is padded with zeros to its left to produce the number of digits given by the precision specifier. &gt; &gt; The result string is not affected by the formatting information of the current [NumberFormatInfo](https://msdn.microsoft.com/en-us/library/system.globalization.numberformatinfo(v=vs.110\).aspx) object. &gt; &gt; The following example formats [Int32](https://msdn.microsoft.com/en-us/library/system.int32(v=vs.110\).aspx) values with the hexadecimal format specifier. &gt; &gt; int value; &gt; &gt; value = 0x2045e; &gt; Console.WriteLine(value.ToString("x")); &gt; // Displays 2045e &gt; Console.WriteLine(value.ToString("X")); &gt; // Displays 2045E &gt; Console.WriteLine(value.ToString("X8")); &gt; // Displays 0002045E &gt; &gt; value = 123456789; &gt; Console.WriteLine(value.ToString("X")); &gt; // Displays 75BCD15 &gt; Console.WriteLine(value.ToString("X2")); &gt; // Displays 75BCD15
Over a hundred dollars for a stepper motor with an Ethernet port? Ehh. You can get similar functionality for under $20 if you do some creative eBay shopping.
What have you tried so far?
What code have you written so far, and where did you get stuck? 
Just set the imaginary part to zero and it should work fine. =) Check [this ](https://www.reddit.com/r/csharp/comments/30mv0v/fastest_way_to_achieve_this/)out
I basically didn't write any code because I'm stumped on what method to use. I have a hunch it has to do with string parsing but idk
Awesome, will try. Thanks!
You can try googling you post name, first result is: http://stackoverflow.com/questions/2460542/using-different-versions-of-the-same-assembly-in-the-same-folder 
&gt;Does anyone know a possible cause or solution to this? Sounds like an infinite loop. Run the program until it stops responding and then put in break points in one of the loops. If it breaks, then you can check if, for example, sample_count is less than 0.
I would like but we can't use it. It runs on linux and we have windows dll dependencies.
During Reinvent a couple of weeks ago.
Cool, I just learned Python to get my Lambda Functions to work a month ago. This should be a lot better. If it is like the Python API it should be pretty easy to get setup.
I'm ready to use it ASAP - we have an extremely lumpy demand for some of our services (like 2000% spikes that last less than a minute). I'm really hoping that lambda is suitable for handling these peaks.
I'm using it on Azure functions for a while already. I see no point in using AWS.
This is not a clickbait. I am my self a C# programmer and I thought this could interested you. A TCP/IP compatible servo motor in this price range is novel. Imagine, take a piece of wood, two of this Motors, one WiFi router and one IP-Cam and you get your own mobile robot. The rest you program in C#. This robot is running completely in C#: https://www.youtube.com/watch?v=k47auAHhDr4 The motors are getting commanded every millisecond, I used a Thread.Sleep(0) in a C# Thread and calculated the time consumption by my self.
+1. Some web devs look down on bootstrap because it makes sites look too generic, but I think for business-oriented software there is something to be said for consistency. Plus, there are plenty of free or commercial bootstrap themes that can make your site look a bit more polished.
Compared to javascript I found other languages to be much slower. Granted, this was before they officially supported .net core but even java was the same. From my understanding this is due to the containers booting up and there are some hacks to keep them awake. Seeing as its a price by time service it makes more sense to just build these services in javascript
AWS vs Azure is religious thing for some. Some developers who use AWS would laugh at any other suggestion. Such devs cannot use Azure functions. 
Many thanks for a good and concice answer! Let's say that you actually wanted Task B to be able to execute if Task A is blocking on some i/o, what would the best / clearest pattern be to acheive it?
That's not a good idea, as C# handles multiple same assemblies very poorly. The best solution is definitely a binding redirect as OP is trying to do. I'm not sure why it's not working, but you need to make sure the newest of the two assemblies is the one ending up in the target folder.
Just run them both before awaiting like in the example: var a = A(); // starts running A, possibly in the background. var b = B(); // starts running B, not affected by/waiting for A. ... await Task.WhenAll(a, b); // to wait for both. or just two await lines.
Writing JavaScript in this way is long gone. If you have more than a few hundred lines of JavaScript you'll likely running your code through some sort of build tool (eg. babel) which will transpile and uglify it with the correct settings. If anyone is using TypeScript then this will already be happening.
True.
Node has a faster startup time than the JVM. That's why I write my lambdas in node. How does .net perform?
It's considerably better if you're trying to write a cost-effective high volume API, or entire website, serverless, since Azure's limitations make that effectively a bad idea. Container recycling is manageable once you understand how it works.
I didn't say it was wrong, just that OP's original question code had it all setup synchronously. Sorry if I sounded too snarky in my first reply :)
Who in their right minds would want to use Bing Search for... well, anything?
Many cases do require such searches, e.g. you want a desktop app that search sth and do custom actions such as file/foldder renaming.
Here's something I knocked up in Linqpad, I've tried to simplify this as much as possible, but in reality the classes are much more numerous, and more complex. I'm looking for a more elegant solution to: public IEnumerable&lt;ParsedValue&gt; GetParsedValues(TComplex tComplex) and public void SetParsedValues(TComplex tComplex, ParsedValue value) ---- void Main() { var tComplex = new TComplex(); tComplex.AType = new AType(); tComplex.AType.ParsedValue = ParsedValue.Explicit; tComplex.BType = new BType(); tComplex.BType.ParsedValue = ParsedValue.Interpreted; tComplex.BType.DTypes = Enumerable.Range(0, 5).Select(i =&gt; new DType { ParsedValue = (ParsedValue)(i % 4)} ).ToList(); tComplex.CTypes = Enumerable.Range(0, 10).Select(i =&gt; new CType { Id = i, ParsedValue = ParsedValue.Guessed} ).ToList(); tComplex.Dump(); GetParsedValues(tComplex).Dump(); SetParsedValues(tComplex, ParsedValue.Interpreted); GetParsedValues(tComplex).All(x =&gt; x == ParsedValue.Explicit).Dump(); tComplex.Dump(); } // Define other methods and classes here public IEnumerable&lt;ParsedValue&gt; GetParsedValues(TComplex tComplex) { yield return tComplex.AType.ParsedValue; yield return tComplex.BType.ParsedValue; foreach(var dType in tComplex.BType.DTypes) { yield return dType.ParsedValue; } foreach(var cType in tComplex.CTypes) { yield return cType.ParsedValue; } } public void SetParsedValues(TComplex tComplex, ParsedValue value) { tComplex.AType.ParsedValue = value; tComplex.BType.ParsedValue = value; foreach(var dType in tComplex.BType.DTypes) { dType.ParsedValue = value; } foreach(var cType in tComplex.CTypes) { cType.ParsedValue = value; } } public enum ParsedValue { Parsed, Interpreted, Guessed, Explicit } public class TComplex { public AType AType { get; set; } public BType BType { get; set; } public IList&lt;CType&gt; CTypes { get; set; } } public class AType { public int AInteger { get; set; } public int BInteger { get; set; } public string AString { get; set; } public ParsedValue ParsedValue { get; set; } } public class BType { public string AString { get; set; } public IList&lt;DType&gt; DTypes { get; set; } public ParsedValue ParsedValue { get; set; } } public class CType { public int Id { get; set; } public string Value { get; set; } public ParsedValue ParsedValue { get; set; } } public class DType { public string Value { get; set; } public ParsedValue ParsedValue { get; set; } } edit: formatting code
Make sure you're running your Service under a user account with network access.
Sorry to disappoint you, but that reply isn't by someone from Microsoft, I know because it's by me!! (your post is what motivated me to write my blog post, so thanks!) (In case you're wondering, I'm marked as a "Member" because I'm part of the '.NET Foundation'. I work on BenchmarkDotNet which was recently added, see https://dotnetfoundation.org/blog/welcome-benchmarkdotnet)
Oh, interesting... So this BenchmarkDotNet thing (not Benchmark.NET?)... what can it do that I can't accomplish with standard profiling tools?
BenchmarkDotNet is a (micro) benchmarking tool, not a profiler. Although it does report memory allocations, which I guess do make it look like one! There's a nice summary of what it does at http://benchmarkdotnet.org/ and http://mattwarren.org/2016/02/17/adventures-in-benchmarking-memory-allocations/, but the TL;DR is that is makes it easy for you to write accurate benchmarks
There is some discussion about this [on Github](https://github.com/dotnet/roslyn/issues/115). Personally, I think it would be a nice to have, but not terribly important. Generally speaking, methods shouldn't be so complex that you have trouble keeping track of what is mutable anyway.
It's rare to do that much manual construction, try using a lightweight helper library like https://github.com/StackExchange/dapper-dot-net
Monadic parsers and IEnumerables, maybe.
Bytes, I assume. Perhaps I'm missing something, but I'm not sure how you'd put a timestamp in 4 bits.
If doing it in the cloud isn't out of the realm of possibility, look into Azure Web Jobs, Functions or Batch. These all allow you to run distributed code without having to worry about managing the VMs or the OS, and you can scale them or up down at will. So, i.e.: you're only paying for the VMs when you actually need them, and you can scale up to run big jobs and scale down when things are quiet. Web Jobs can respond to messages posted to a queue the scheduling and work distribution piece is done automatically.
Hmm, I suppose I just don't understand the difference between benchmarking and profiling. Care to enlighten me?
Yeah got that =) Found the cause of the other bit - the first for-loop is causing the crash...
Its video search with live preview is slightly better than google's. That is about it.
Practical difference is that benchmarking is the macro view on profiling. Usually what you call profiling is a view into where in code in a single solution the time/memory went to. In benchmark you have several solutions and you get data on which one behaves in most suitable way over your dataset.
&gt;It is impractical becaus it takes quite a lot of code to create just a data class with a bunch of immutable properties (that are initialized in the constructor). It could be a *little* better, but it's really not bad. What were you hoping for? class MyClass { public int MyProp1 { get; private set; } public int MyProp2 { get; private set; } public MyClass(int p1, int p2) { this.MyProp1 = p1; this.MyProp2 = p2; } } 
It's useful for startup scripts and small tools. I use it fairly often to make one off CLI programs to do things I'd otherwise do manually.
[Record types](https://github.com/dotnet/roslyn/blob/features/records/docs/features/records.md) have been proposed to address this, although there still seem to be a lot of unresolved design decisions.
It's not too hard to define very simple types, but for anything more advanced you quickly end up with long constructor lists, and ugly code for creating objects since you can't use the nicer and safer object and collection initializer syntax. And unless you force yourself to explicitly specify parameter names everywhere, you have non-obvious code like `new Foo(1, 2, true, false)`. It gets worse when you have nested types. It's also inconvenient to create modified copies of immutable objects like this since you end up with code like `var changed = new Foo(original.X, original.Y, newValue, original.Z);`. It's not *terrible*, but there's a lot of boilerplate that could be avoided. By the way, you can have true read-only (or rather getter-only) auto properties since C#6, i.e. int Foo { get; }
We have several hundred builds definitions for a single tfvc repo. Every time we branch, every build def for the new branch is programmatically created with very fine work space mappings using a powershell script. 
Nice. You can PM me if you have any other problems with NAudio, I've used it quite a bit especially in DSP applications
It is okay. I just like coding 😊
We're being downvoted, lets huddle together for warmth!
I don't think the whole `DateTime.UtcNow`+ `Stopwatch` thing is a good idea. It doesn't really solve the lack of accuracy, it just pretends it isn't there. Especially in a multithreaded scenario, one thread could access `Clock.UtcNow` at the beginning of the worst-case 15ms interval, and when another thread accesses it ~15ms later it could be getting the same pseudo-improved time. And the resynchronization can probably produce out-of-order results.
&gt; if(dt.Rows.Count == 0) lblError.Text = "Customer Record Not Found"; thank you! that worked. 
That solves some of these issues, but then it's even more boilerplate you need to write.
[button_Click takes 2 parameters, sender and args.](http://www.dumpt.com/img/viewer.php?file=d9xgjze54cxw91f30abj.png) Unless you use those args in the click handler, just do button_Click(null, null)
Thank you, I for some reason was stuck on the idea that it meant the local sender inside the code shown. Thank you for the help.
You can only put that on globals, it would be great if we could use that on locals also. The underlying implementation would be very different though, readonly is restricted to instantiation on initialisation of the class whereas a local could be instantiated wherever. 
Ahh, yes. You are correct, I've only ever used it on fields that get initialized via the constructor. Now that I understand it better, yes I would like this. Not a huge need, but it would be nice. Along with the [**immutable keyword**](https://github.com/dotnet/roslyn/issues/159).
You can omit the `private set` -- properties without a `set` are readonly (and assignable from ctor)
The suggestion by //u/StaticUser123 will work, but a cleaner solution is to extract the Button_Click code into a separate function then call that from your Window KeyDown event handler. That way you're not calling a "Click" event directly from your code which is kind of hokey. So your button click handler will just call another function ("doButtonClick() or whatever) then your Window Keydown handler will call doButtonClick() as well. This only works if your button click handler doesn't use its parameters of course, otherwise you're just moving the problem from one function to another.
 var rand = new Random(); var separator = new byte[]{0x1b, 0x03, 0x00, 0x00}; byte[] bytes = new byte[] { 0x1b, 0x02} .Concat(Enumerable.Range(0,100).Select(i =&gt; (byte) rand.Next(0,128))) .Concat(separator) .ToArray(); // split by string method. I feel lazy for doing this, but it probably represents what the bytes originally were var separatorString = System.Text.Encoding.ASCII.GetString(separator); var x = System.Text.Encoding.ASCII.GetString(bytes) .Split(new string[] {separatorString}, StringSplitOptions.RemoveEmptyEntries) .Select(s =&gt; System.Text.Encoding.ASCII.GetBytes(s)) .Select(logBytes =&gt; new LogItem(logBytes)) .ToList(); Your log item class will store the bytes or parse them into properties.
While I agree, he most likely double-clicked the button to get the handler, and won't add anything regardless. Crossed my mind to mention it, but figured I'd stay realistic. &gt; This only works if your button click handler doesn't use its parameters of course If he has to ask about this issue, he isn't ;)
I remember needing to look into this for some trading applications we were writing in .NET. Turns out this is MUCH harder than even described here. IIRC you need to write your own library as nothing in the .NET stack really allows for a high degree of multi-threaded accuracy. This was many years ago for me but IIRC we abandoned the part of the design that relied on precise timing and re-worked the server side so it was not needed.
Your article is great! But you don't explain what's FastMember doing under the hood. If it's not reflection, and it's not IL, and it's not expression trees, then what is it?
Mostly use it in a CI/CD context for automatiing build steps and deployments.
Add a break point after user and user2 are instantiated. Step through and inspect as you go. Verify that UserManager.Create was successful.