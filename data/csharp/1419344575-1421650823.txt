&gt; Yes, both snippets do essentially the same thing in that they run code on a thread-pool thread. `new Thread(..)` creates a new thread. It's not taken from a thread-pool.
Oops, you're right. Got confused with QueueUserWorkItem. Been a while since I used those.
Can happen. Just remember: new-ing a thread new-s a thread!
ok thanks! i'll look for windows hosting and test task scheduler
XamarinStore.Droid
You can get it if you build the [XamarinStore app](https://github.com/xamarin/xamarin-store-app) after changing a certain variable in the code, running the app in an emulator (or real device). 
You are close. For a long running task, like yours, you would want to start the task as follows. Task.Factory.StartNew(() =&gt; { Work(client); }, TaskCreationOptions.LongRunning); by specifiying the LongRunning option, the task will likely be run in its own thread.
Double check to make sure you dragged your room prefab to the script in Unity and that you have a "floor" as part of the prefab. 99% of my null reference errors in Unity are because I forgot to drag something over. 
Tasks are great in that we substitute their creation pattern in unit tests so that they run synchronously in that context. Much more difficult to do so with threads.
When [Jon Skeet](http://stackoverflow.com/users/22656/jon-skeet) answers a thread I wonder why others even bother to reply 
The hidden field is no different from any other field. What seems to be the problem? 
Always use tasks. In Stephen Cleary's [book](http://www.amazon.com/Concurrency-C-Cookbook-Stephen-Cleary/dp/1449367569/ref=sr_1_1?ie=UTF8&amp;qid=1419361891&amp;sr=8-1&amp;keywords=concurrency+in+c%23) he even writes "As soon as you type new Thread(), it’s over; your project already has legacy code."
&gt; there's a bit of a circlejerk on stackoverflow I agree. Post a question at your peril.
No need to mock out tasks, this is the beauty of it. Instead of creating tasks like: Task myCoolTask = Task.Factory.StartNew(()=&gt;DoStuff()); You can do ICanCreateTasks taskProvider=...; Task myCoolTask = taskProvider.CreateTask(()=&gt;DoStuff()); And then implement a normal ICanCreateTasks that does normal Task.Factory.StartNew and another fake that execute the delegate synchronously using taskcompletionsource var tcs = new TaskCompletionSource&lt;object&gt;(); action(); tcs.SetResult(null); return tcs.Task; You can read more about it here: http://softwareblog.alcedo.com/post/2012/01/24/TaskCompletionSource-in-real-life-(part-1-of-2).aspx
That's not necessarily the issue - I ask questions all the time and get plenty of good answers. The secret is *don't ask a shitty question that's been asked a hundred times before*. If the question has been asked before it's already been answered. Use one of those answers. If none of those answers are suitable, then ask the question.
You can make a fake completed task with [Task.FromResult](http://msdn.microsoft.com/en-us/library/hh194922\(v=vs.110\).aspx) This is what you do to mock out classes/interfaces that have async methods that return tasks (that return the actual result).
According to the [The Docs](http://msdn.microsoft.com/en-us/library/system.net.sockets.tcplistener.accepttcpclient%28v=vs.110%29.aspx) "AcceptTcpClient is a blocking method" i.e. it ties up a thread, potentially the Ui thread, busy waiting. You may prefer [AcceptTcpClientAsync](http://msdn.microsoft.com/en-us/library/system.net.sockets.tcplistener.accepttcpclientasync\(v=vs.110\).aspx)
I disagree. Never have I felt that Jon Skeet hasn't answered a question in a very complete and understandable way. He usually does have the best answer and deserves the upvote... I think people just don't upvote other people's answers enough. 
Yeah, but as usual, people who speak in absolutes in programming are wrong. There are plenty of good cases for using threads over the task pool.
Actually, there's only one use case where a thread is a better choice than Task: an STA thread for COM interop.
What is your point? Handling network IO is fantastic place to give a hint to the scheduler that it probably shouldn't run the task on the thread pool since it could quickly exhaust it. If there are synchronous operations inside Work(), then the LongRunning flag is appropriate. A bunch of new connections doing synchronous IO can easily starve the threadpool, but if you need to do profiling to convince yourself of that, then by all means, don't use the flag.
What about when you need more direct control? Setting thread affinities and priorities? Or when you want more control over the dormancy of your worker threads? Or when you want to control the ownership of those threads? A private thread pool with master/slave setup? I just don't see it, sorry.
The thrill of the challenge
If you're using a factory, could you also use a IThreadFactory or some other custom class as well to mock threads in this manner? Perhaps im missing something though, im not as familiar with tasks. I shall do some poking around Edit: I suppose this also means you need to mock the thread that you execute
Here you go! This is all the code for that one form. http://pastebin.com/uDbD9tr5
comboBox.SelectedItem
Tasks are fine for 99% of the parallel cases which are essentially, "do this work and that work in the most parallel way possible." Things like game engines might actually need Thread, because a specific timing is more important than easy maintenance and maximum parallelization. 
Um, no. I've got plenty of code that relies on threads that never terminate for the life of the application. I don't want those running through the Task infrastructure. What does it even mean to wait on a Task that can never complete? 
Don't forget thread local storage. We don't use it often, but sometimes it is required.
Just FYI, if your doing wpf like this and not using the mvvm pattern, you're basically doing fancy looking winforms. There's no good reason to do what they're doing in that link and lots of good reasons not to. Do yourself a favor and learn mvvm. 
Im not sure if this is going to fix it, but try changing your tick event to look like this: I really dont know why it would be counting down by two, its very strange. It seems like 'ive ran into that same problem before and i was able to fix it by changing my -- decrementer to be the actual long form counter = (counter -1 ); private void timer1_Tick(object sender, EventArgs e) { if (textBox1.Text != "0") { counter = (counter - 1); } else { this.Hide(); Form SetChoice = new SetChoice(); SetChoice.Show(); counter = 60; } }
Exactly. Asking an SO question is a measure of last resort - do your homework!
Every time I am doing MVVM patterns I have a feeling of doing JEE back in the 1.3 days. I can't get around the required boilerplate, text based properties and lack of framework support. To the point each project ends up creating their own MVVM framework. 
Where I was working a few years ago we had Jon Skeet come in and do a talk. He said that when he's answering questions he on SO and wants to check that code he has posted compiles and works he writes the answer in a text editor and runs csc from the command line as that way he can have an answer submitted in the time it takes Visual Studio to start up and create a new solution.
No need to use text based properties. I believe you can use reflections.
No you cannot. This is why .NET 4.5 introduced CallerMemberName to ease a bit the pain of implementing INotifyPropertyChanged interface. 
Think less of the actual forms and timers, and more about how you want the game to actually flow. Then think of the data models you would initially need. Then start thinking about the logic to make it all happen. Then start thinking about the actual UI or engine implementation. It might even be helpful to go through a "what if I made this a text-based console game" thought exercise first. " I want the timer to be more like a money counter" So have a money object or variable that increments or decrements on timer or button events. private decimal _money = 0.0; void moneyTimer_elaped(...) { _money += 1; CheckSpendingOptions(); } void CheckSpendingOptions() { buyBalloonButton.Enabled = buyBalloonButton.Enabled || _money &gt;= 5000; buyJetButton.Enabled = buyJetButtonEnabled || _money &gt;= 10000; } void buyBalloonButton_Click(...) { _money -= 100; } ...I'm not sure what you mean in your last paragraph.
Thanks. I am really new to coding so i don't really think like a programmer would about stuff. But i just wanted to spend a day trying stuff out instead of watching and reading 1000 videos and pages on stuff.
&gt; Are there any other IDE's I should consider for C#? Not really. There are a few other ways to write/compile C#, but none are as good as VS. The other methods are usually used for odd situations like when you need to compile in a weird environment or something. &gt;•Are there any "must have" free plugins I should consider? There's one to enable touch scrolling. Works awesome on my Surface Pro 3. &gt;•Do you 'sign in' to VS 2013? Eh, if you want to use Team Foundation Server and that sort of thing, you do. &gt;•I plain on developing for win/linux/mac. Is there anything that I should avoid or do to make sure it's compatible? You are probably looking at the Mono stuff. Xamarine and Unity might also be helpful. Sorry I'm not more help here.
Alternative IDEs are (Sharp Develop)[http://www.icsharpcode.net/opensource/sd/] and (Mono Develop)[http://www.monodevelop.com] I think Mono Develop works on Linux but it's nowhere near as mature as VS.
Use compiler statements for holding the window open #if DEBUG Console.WriteLine("Hit enter to exit"); Console.ReadLine(); #endif That code will only execute if you are running it in debug mode. When you compile it in "Release" it won't be included.
the console doesn't close automatically when you run the code with Ctrl+F5
No, it isn't wise to ignore socket exceptions, because those indicated that some problems have occurred which you need to fix. I've noticed that you're trying to both Tcp and Udp Sockets and it seems to me that the Udp Socket does not have any mechanism to re-send the lost packets. (See FileSocket.cs) For TCP Socket, I would recommend using TCPClient and GetStream method instead of UDP/TCP raw Socket to make sense out of the code and if possible leave UDP out (you'll need to write your protocol that guarantee some reliability for UDP protocol, because I've noticed that you're trying to transmit file size and file name through this socket without any guarantee that the packet would arrive.) If you cannot dismiss the use of UDP protocol, then try looking into [Reliable UDP Project](https://rudp.codeplex.com/). (Or create a wrapper class for [MaidSafe R-UDP Project](https://github.com/maidsafe/MaidSafe-RUDP) which I assume to be a mature project by now.) With the talk of sockets aside, let talk about how you transmit your data in a stream. Normally, it's fine to append an unsigned 32 bits integer in front of the serialized class of information to indicate how big your serialized class are (which can contains your file name, path, length of file and so forth.) And then you're free to append your file stream thereafter. (Hence you don't need 2 sockets for this.) [Check NetSerializer 2](https://github.com/smalinin/netserializer2) for your normal network serialization option. As for cryptography, I've noticed that you've tried reimplementing Diffie-Hellman key exchange, I would like to suggest that you look into [Bouncy Castle Crypto Library](http://www.bouncycastle.org/csharp/) and this [Github Clone of Bouncy Castle](https://github.com/bcgit/bc-csharp) for this purpose. Mostly, because it supports Elliptic Curve Cryptography which might be of a benefit to you. I cannot pinpoint the exact exception that you might be getting, so I'll need more information to help, but for now, I've covered a large subject about the problems you might face in Network Programming which hopefully you could try out few of the things I suggested to resolve some of the problems with your program.
&gt; resharper There's also [CodeMaid](http://www.codemaid.net/), which might be helpful. &lt;/thread&gt;
* SQL tool for a bunch of nontechnical testers working on an accounting program that stores everything in a database. Before this dev always asked people to install management studio even for the more minor inquiries, so they didn't have to pass sqlcmd statements. This let even the most non technical tester give db info in bugs without the overhead in MS. There are other small sql tools out there, but this was specifically tailored to their wants as I made it in house. * First itteration had a simple database compare algorithm for testing. The MS version had a lot more parameters and config options that would confuse a lot of out testers. I made this work around their setups without much interaction on their part besides starting it. * I've been trying to turn it into a general utility interface to hold all the smaller utilities we build for customers. The one offs, give them an easily implementable api and UI to work with that is simple and easy to understand. * Took a 4 month class and just started writing small programs to do minor things. Eventually started adding more and more features. The SQL thing was my first big project with sort of a deadline. Been languishing ever since as scope creep gets the better of me.
Scope creep is the worst, *but it's so damn fun to do it!*
* Mostly the usual CRUD LOB apps. The most visible are a bunch of eGovernment services still in use in one of the largest cities in Saudi Arabia. I'm no longer at that agency but it still gives me a kick to know the systems I designed still exist in some form. * Really depends on the application. I've used stuff like memoization to lessen the effects of repetitive iterations. * I made a simple ray tracer from scratch that also supported (limited) animation to create videos. * Came over from VB.NET by basically googling the differences. VB.NET I learned from online courses and MSDN books (freely provided by MS to my employer) back when it was still in BETA 1.0. 
If the process ends, the window closes, debugger or no debugger.
Keep in mind that most of (good) programming is design. Start with basic thoughts on your broad goals, then drill down into details of parts with screen mockups, then drill down into the logical workflow (maybe even pseudo-code), and after all that is done THEN it is time to start coding. And after coding is done you basically start that process over for revising.
* A micro-twitter client * Nothing much, it just wrap twitter-api in a GUI * noone * it's natural the switch from java to c# 
I started a linq-to-YAML project. Didn't get very far, though.
What kept you from finishing it?
That's definitely true. I wanted to look at c# after I took a Java course in college. I literally just sat down and started writing it without much trouble.
I built an audio-triggered busy light for my last job so people would know I couldn't hear them if they talked to me (i always wore headphones and people would start talking to me and I'd have to make them start over). The device itself was a teensy, and then a simple little app on it that responded to a couple different keypresses, a C# windows service that sent those keypresses based on the master volume of my computer, and then a little WPF control interface which could change the color of the LED, or change the mode (always off/always on/responsive). It was pretty neat. I have also been "working on" (that is to say, sometimes thinking about but rarely writing any code) a game. The game itself is designed, and I have a prototype physical copy, but in terms of a digital version I just have some of the database done. It is a class based team battle game using standard playing cards, and the digital version will be asynchronous multi-player (players send their actions to the server via Web service, think Words with Friends), and ideally I can make it cross platform, Html5, possibly iOS and Android native apps, but it's never going to get done at my current rate (which, as I mentioned is essentially zero).
* Lots of misc small utilities to help people at work (registry or sql stuff). Some stuff that does administrative stuff in ssrs. Magic the gathering card inventory app. * nothing really comes to mind. * utility that migrates reports in report server (helps people at work daily). Also an old utility I wrote when I first started using c# that would go through mailboxes in exhange 2003 and remove or manipulate items (workaround for a bug in some exhange integration ) * at home in my free time around 2006. Started with some O'Reilly learn c# 2005 book. 
My most recent personal projects have been [MimeKit](https://github.com/jstedfast/MimeKit) and [MailKit](https://github.com/jstedfast/MailKit). I was planning to build a cross-platform mail client on top of them, but I kinda burned out. Luckily I managed to get both libraries into a very usable state before I did, so at least someone else could pick up where I left off and build a mail client on top of MimeKit and MailKit. I sorta feel like everything I do is brute forcing, but I probably consider things to be brute force that others wouldn't. You'd probably find plenty of advanced hacks in my code if you look. I learned C# by doing, I never really bothered to read a book - I just dove into [monodevelop](https://github.com/mono/monodevelop) source code back in early 2007 to try and add some features that I was going crazy not having (like Smart Indent, mostly). There's still a lot of C# that I would say I don't know, or am at least fairly "new" to, but it's fairly easy to pick up and learn in my experience (then again, I had a fairly strong C background).
Time. And I lost interest.
Linq 2 Csv was a good one. Automatically parsed csv to objects aswell. Working on a framework to allow instant resume of application from where it was when it was closed / crashed out.
* Still in progress Manga Reader/Download/Library - https://mymanga.codeplex.com/ * Not sure... * Above project. * Self taught for above project. 
Just use Console.ReadLine (); it will stop the console 
This seems like it would come in handy at work. I know a few people I work with would love to have something like this.
Thank you so much for the help with my work! I am really only having problems with the implementation of the Diffie-Hellman process inside DHKTSchedule.cs. In this class I lay out a suggested course of action. The problem arises after both tcp handshakes are sent and received, the program can lock up, not transmitting anything. Other times primes and bases are sent. This is really the only exception I am dealing with. Again thanks for your previous advice!
There are a lot of things about c# that I haven't really delved into much so far. I still have yet to wrap my head around threading and asynchronous programming. Most of what I work on at home is [project euler problems](http://projecteuler.net/problems), so it keeps me busy every so often. I haven't built anything truly complex yet. The only thing I've really built for myself because I needed it was a timer that I use to track how long it takes me to solve a rubix cube. It writes entries into a db table and averages out the results. Haven't touched my cube in a while though, so I'm a little rusty. I mentioned brute forcing mainly because of the work I've done towards the project euler problems which pretty much forces you to find clever solutions to the problems. I think probably the most notable one that I found a way to avoid brute forcing was [problem 67](https://projecteuler.net/problem=67) where instead of taking the most obvious approach of counting down from the top of the tree, I started at the bottom and took the values that added to the highest sum. It's not too impressive, but I was proud of myself for it at least. So far, my favorite project that I worked on was a variation of the 15 piece sliding puzzle game. It took a while for me to figure out a decent approach that wasn't over the top at first, but I've broken it down more than a few times and started from scratch on it multiple times. My current version is probably the best to date, but I never did completely finish it up. I wanted to write an algorithm that would have the puzzle solve itself, but AI is another thing I've had trouble wrapping my head around. I mentioned in another comment how I learned c#, but it really came down to me using a bunch of youtube videos to learn Java for a college course. After finally grasping some of the most basic concepts of oop, c# was just... easy. After learning Java, I just sat down with my laptop open, opened up mono and started writing some simple c# programs. The syntax is close enough to Java that it felt really natural to shift back and forth between the two. Out of every language I've used, I'd definitely say c# is my absolute favorite! At work, I use VB.NET, which isn't *too* bad considering it compiles to the exact same thing c# does, but if I had the opportunity to take c# instead of VB.NET at work, I'd jump on it.
Depends. Do you want a job or do you just want to educate yourself?
 At work I've built enterprise software interfacing with IBM Cognos. In my free time I've made a joke language, a few libraries for bringing functional programming to c# and am working on a site that allows users to modify PDFs. More so design patterns rather than algorithms. Not really sure which project I'm most proud of. Probably my pdf site if I actually launch it. I am self taught C# and started in 2009. Since then I have been a professional developer for 3 years using C# daily and am almost done with my Masters in CS
&gt;&gt;•Do you 'sign in' to VS 2013? &gt;Eh, if you want to use Team Foundation Server and that sort of thing, you do. Not exactly. It'll sync your visual studio settings to your outlook account but you can connect to team foundation server without signing in.
Expression Blend is just a tool for writing the xaml (WPF code). It's comparable to writing a web page using a tool, instead of using notepad. Is the tool necessary? No, but it's nice to have, and makes the process faster. From a learning perspective, I found it more useful to learn how to write WPF by hand before learning how to use Expression Blend. Now I know what Blend is doing, and more importantly, I can tweak the generated code if I need to because I understand what's going on behind the scenes. There is value in knowing both WPF and Blend. Day to day, you'll likely use Blend and Visual Studio for your layouts, but without learning WPF first, you may not know what's really going on behind the scenes.
Wox * A launcher for windows https://github.com/qianlifeng/wox * Nothing much, using a lot of multiple thread * Wox * By making some tools using winform since 2010
Anyone can teach themselves C# using Visual Studio and Google. Are you looking for a degree to get a job or do you want to learn how to program?
I'm writing an old subscription/payment software that my company made several years ago to ASP.NET MVC and learning while doing. This is my first C# project. My intro was a OOP course for 5 days. I've only been doing this when there is any free time in work (project has been going on for about a year and is soon ready for full testing). :)
That one gave me a bit of a struggle as well, but it was actually really simple when I finally got it. I don't remember how I solved it, I believe I still brute forced it, but it can be solved very quickly using the [Sieve of Eratosthenese](http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes). I actually only solved 67 because there's a similar problem in the earlier sections that uses a smaller data set. 67 just forces you to use something other than a brute force method. I've worked my way through 60 of them so far, but problem 60 is giving me a headache at this point. I've been trying to find a way around brute forcing the solution, but I haven't been able to. A brute force approach requires 5 for loops. All nested. Ew. EDIT: Here's my solution for problem 3 if you're interested. If not, well then don't read it. I was experimenting with 'yield' at the time. class Primes { private long limit; private long largestPrimeFactor; public Primes(long input) { limit = input; largestPrimeFactor = getPrimes().Max(); } public long getFactor() { return largestPrimeFactor; } private IEnumerable&lt;long&gt; getPrimes() { foreach(long number in Enumerable.Range(2, (int)Math.Sqrt(limit)).Where(x =&gt; limit % x == 0)) { if (isPrime(number)) yield return number; if (isPrime(limit / number)) yield return limit / number; } } private bool isPrime(long input) { if (input == 1) return false; if (input == 2) return true; return Enumerable.Range(2, (int)Math.Sqrt(input)).Where(x =&gt; input % x == 0).Count() &lt; 1; } }
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Sieve of Eratosthenes**](https://en.wikipedia.org/wiki/Sieve%20of%20Eratosthenes): [](#sfw) --- &gt; &gt;In [mathematics](https://en.wikipedia.org/wiki/Mathematics), the __[sieve](https://en.wikipedia.org/wiki/Sieve_theory) of Eratosthenes__ ([Greek](https://en.wikipedia.org/wiki/Greek_language): κόσκινον Ἐρατοσθένους), one of a number of [prime number sieves](https://en.wikipedia.org/wiki/Generating_primes#Prime_sieves), is a simple, ancient [algorithm](https://en.wikipedia.org/wiki/Algorithm) for finding all [prime numbers](https://en.wikipedia.org/wiki/Prime_number) up to any given limit. It does so by iteratively marking as [composite](https://en.wikipedia.org/wiki/Composite_number) (i.e. not prime) the multiples of each prime, starting with the multiples of 2. &gt;The multiples of a given prime are generated as a sequence of numbers starting from that prime, with [constant difference between them](https://en.wikipedia.org/wiki/Arithmetic_progression) which is equal to that prime. This is the sieve's key distinction from using [trial division](https://en.wikipedia.org/wiki/Trial_division) to sequentially test each candidate number for divisibility by each prime. &gt;The sieve of Eratosthenes is one of the most efficient ways to find all of the smaller primes (below 10 million or so). It is named after [Eratosthenes of Cyrene](https://en.wikipedia.org/wiki/Eratosthenes), a [Greek mathematician](https://en.wikipedia.org/wiki/Greek_mathematics); although none of his works have survived, the sieve was described and attributed to Eratosthenes in the *[Introduction to Arithmetic](https://en.wikipedia.org/wiki/Introduction_to_Arithmetic)* by [Nicomachus](https://en.wikipedia.org/wiki/Nicomachus). &gt;==== &gt;[**Image from article**](https://i.imgur.com/1izJiG1.gif) [^(i)](https://commons.wikimedia.org/wiki/File:Sieve_of_Eratosthenes_animation.gif) --- ^Interesting: [^Sieve ^of ^Atkin](https://en.wikipedia.org/wiki/Sieve_of_Atkin) ^| [^Wheel ^factorization](https://en.wikipedia.org/wiki/Wheel_factorization) ^| [^Sieve ^of ^Sundaram](https://en.wikipedia.org/wiki/Sieve_of_Sundaram) ^| [^Eratosthenes](https://en.wikipedia.org/wiki/Eratosthenes) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cn4pwll) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cn4pwll)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
I've implemented rest services in both WCF and Web API. Web API is much easier and abstracts a lot of boilerplate work that is required with WCF when it comes to creating a REST service. Personally, I would put all the business logic in another assembly. Then use WCF to create a SOAP facade and Web API as a REST facade. Proper abstraction and layering can keep your application very clean while still allowing you to take advantage of features of both web API and WCF. Just my opinion though.
If you're talking about C# specifically: . . . if there's a CS department, then they'll have classes for programming. In addition to those classes, they should have available a short synopsis of each class that SHOULD detail what language will be used for the class' assignments. To be honest, many (though not all) Universities will probably lean towards Java programming instead of C#. If it is used, the basics class will probably be "Concepts of Object Oriented Programming" or something. For Computer Science in general: If the University has a CS department, then they'll have a list of classes that, if the department head isn't completely inept, will take you through the basics of everything. - Definitely take "Data Structures" or something similar to it, because everyone should have to learn the inane bullshit that is linked-lists, queues of linked-lists, deques of linked-lists, linked-lists of linked-lists, etc. . . [EDIT for seriousness: This is kinda important. I'm surprised it's an elective at some schools instead of a basic requirement] - Some sort of class like "Analysis of Algorithms" or "Algorithmic Analysis" would be something to opt for if it's not one of the required classes. It SHOULD help you to find more efficient methods of doing many tasks . . . the keyword here is "SHOULD." 
I'm writing a suite of desktop applications for world building and game management for tabletop RPGs. I'm also working on a generic platform for making desktop card games. I also have a handful of side items but those are my big ones. 
Thank you for the reply. I appreciate the response. This is what I'm currently doing. Just want to make sure I'm not over complicating the application layers and making it harder on myself.
What the OP said. You don't wan't to be doing REST in WCF at this point when the WebApi stuff is so much cleaner. And the business logic should be abstracted from the interface wrapper.
Your projects have literally enabled mine to work. If I had enough patience, I'd probably help you out.
&gt; Unfinished/unreleased educational-only server emulators for Ragnarok Online, Diablo III, and various other games. (I learned A LOT about programming from these projects!) If you don't mind me asking, where did you learn how to do this? I've been really interested in learning how to emulate a server but I never knew where to start :P
What? Markdown has built in support for it. Four leading spaces, or encapsulate within accent graves (\`). \`code starts here and ends here\` becomes `code starts here and ends here`
If you can't easily multi-line code block, that's horrible. 
That's fair, I guess our definition of *easily* differs a little bit.
Came here to say just that. Also, it supports SOAP11, SOAP12, CSV, JSV, JSON and POX with no work. 
Definitely going to try this out, looks neat. Thanks!
I recently remembered my stereo has a serial port and evidently there is not a program to use it, just all the specs. So I'm writing one. It will work in local mode manipulating the stereo attached to the serial port, it will also work in a client-server mode so I can control it from any PC in the house.
I don't want to have to edit my code to have four spaces in front of every single line. Sure, most of them do, but the first line of a function definition isn't going to be indented. So if I indent that line, then I have to indent every other single line. Seems like someone who wasn't a coder invented that markup concept. Why not just be able to throw a tag at the start and another at the end to handle wrapping? I donno. Seems bad.
## What kinds of things have you guys built? Lots of things. I've done cell tower configurators for a telecommunications company, insurance filings, unclaimed property management, text editors, some games, a ton of utility functions. I've also helped with Debian's packaging of C#, though not nearly as most of them. ## What algorithms have you done to avoid brute forcing some problem? I write programs that write unit tests. :) ## What project are you most proud of? There are two of them. The first is my long term project. I'm writing a text editor designed for authors that is inspired by Visual Studio and ReSharper. Basically, I want all the lovely R# keyboard shortcuts for writing so I could rename a character, find usages, auto-fix grammar, and good navigation. This is going to take me a few years, but I'm getting there. The other is a recent project that leads into above where I'm writing a Markdown parser that emits events like XmlReader instead of the more typical "convert to HTML" that most libraries do. Mainly because I use Markdown for my writing. ## Where, how did you learn c#? I've pretty much stuck in the C family of languages since 1981 or so. As they showed up, I learned them. The year that C# came out, I ended up picking up a book on it and thought it was pretty... but not interesting. It wasn't until Mono came out when I realized it could fulfill Java's promise of Write Once, Run Anywhere. Then I got a couple jobs doing it and I've pretty much been writing it since.
+1 SOAP is a beast. You can do REST with WCF... but it inherits all the SOAP beastliness anyways. You don't want to be tweaking something on the SOAP side and have it incomprehensibly break your REST side with weird, SOAP-ish error messages. Like /u/AshylarrySC said, proper logical seperation with **separate** facades for REST and SOAP in the appropriate technologies.
I want to learn how to program. But a job would be great to.
I want both. I really love learning and teaching myself. But i would think getting a degree would make finding a job with my skills a little easier in the start.
I'd use Task.Run, but it makes no difference in this case. In the current implementation, LongRunning will always create a new thread for the task.
Agreed, although in the current implementation you can use the LongRunning flag to make your code run in a thread anyway.
If you will at some point consider an external tool to test your WCF and REST services, send me a message. Im the developer of [WcfStorm and WcfStorm.Rest](http://www.wcfstorm.com) and i can set you up with a pretty good discount
#####&amp;#009; ######&amp;#009; ####&amp;#009; Section 5. [**Closed-form expression**](https://en.wikipedia.org/wiki/Fibonacci_number#Closed-form_expression) of article [**Fibonacci number**](https://en.wikipedia.org/wiki/Fibonacci%20number): [](#sfw) --- &gt; &gt;Like every sequence defined by a [linear recurrence with constant coefficients](https://en.wikipedia.org/wiki/Linear_Recurrence_Sequence), the Fibonacci numbers have a [closed-form solution](https://en.wikipedia.org/wiki/Closed_form_expression). It has become known as __[Binet](https://en.wikipedia.org/wiki/Jacques_Philippe_Marie_Binet)'s formula__, even though it was already known by [Abraham de Moivre](https://en.wikipedia.org/wiki/Abraham_de_Moivre): &gt;&gt; &gt;where &gt; --- ^Interesting: [^Metallic ^mean](https://en.wikipedia.org/wiki/Metallic_mean) ^| [^Carmichael's ^theorem](https://en.wikipedia.org/wiki/Carmichael%27s_theorem) ^| [^Fibonacci](https://en.wikipedia.org/wiki/Fibonacci) ^| [^1,000,000,000](https://en.wikipedia.org/wiki/1,000,000,000) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cn4xcu5) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cn4xcu5)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Great answer. Putting the business logic in separate assembly in any solution allows you to throw together another front end/api really easily.
Seconded: data structures and algorithms will help you whatever the underlying tech is. IMO they are the two most important pillars, the two other ones being architecture and knowledge of a specific tech.
Hey, Merry Christmas for you too. :) The whole implementation of the class is correct. As seen below: #region Poor Man's DI protected void Application_Start() { MvcApplication.RegisterRoutes(RouteTable.Routes); var controllerFactory = new CommerceControllerFactory(); ControllerBuilder.Current.SetControllerFactory( controllerFactory); } #endregion That class is the core of the Composition Root, considering it is using "Poor Man's DI" (for arguments sake), it's supposed to have a lot of *new* &gt; Then it would probably be best if there existed a separate Composition Root project where you have a reference to the DI framework / library which you will delegate the responsibility for matching the implementation to the interface and injecting it at runtime. Yes, that is the solution that was brought up on the StackOverflow question I posted. But in the book, I don't recall the author talking about a standalone project just for the Composition Root, and the solution posted by him on SO, also doesn't seem 100% optimal, because he would be tying the Composition Root with a specific implementation of the UI. Since they are in the same project. &gt; Maybe it's an example that will later get re-factored to more loosely couple the concerns? Maybe this is the reason. But I'm not sure.
Yes, using "Poor Man's DI" is the reason why there isn't a more loose coupling here. You can never really get around a tighter coupling by using "Poor Man's DI", and honestly I've never seen a reason to try to do so. The object building your dependency graph must have reference to the dependencies it resolves, so having the UI also act as the composition root is the "root" problem, no pun intended. I'm not a big fan of doing it like his StackOverflow answer either, because what sense does it make to have a composition root and views in the same project? He does mention moving the logic in the controllers out to its own project, but that suggests a thick controller instead of a thin one and that's not a great situation either. After I sit down for dinner I'll try to share something for you. Edit: To completely avoid a reference to DataAccess in the UI project you will need to use a level of indirection like [this](http://i.imgur.com/vWZDfB6.png), which requires a real IoC container. 
Awesome. This makes sense. I'm currently writing my SOAP services on the business side of the wire and my REST services with WebAPI on the client side of the wire. The way you describe is exactly what I'm doing and this solidifies this method for me. Thanks!
I did look at ServiceStack before I started coding the application in WCF and I was over analyzing my options. I chose WCF over ServiceStack because WCF is maintained by Microsoft and my company has support through them. Plus purchasing something right now was out of the cards. Plus there is the old IT saying - "Nobody ever got fired for buying Microsoft" ;)
Looks like you need a RepositoryFactory or maybe a RepositoryAbstractFactory instead of clogging up GetControllerInstance() with all of those tightly coupled repository instances.
Can you explain a bit about your R# templates? I haven't heard of R#, is it a C# wrapper around the R statistics project? I'm assuming not, because that's wholly unrelated to generating null checking statements. Your project sounds interesting, and I'm currently looking for ways to template some boilerplate code in a C# project.
Any chance you could post some of the code?
R# is [Resharper](https://www.jetbrains.com/resharper/). It's a plugin for Visual Studio by JetBrains. It makes almost everything about working with VS a little bit (or **a lot**) better. The templates thing is a really small feature, but it's nice when you need it. YouCast is just a thing I wanted for myself (and I've been using it everyday since) but I though other people might need it too so I made it open source and public.
I'd say most developers write XAML by hand. Blend is good, but it's definitely a designer's tool. Even after producing some stuff with Blend, you may want to go back and rewrite the XAML by hand to clean it up.
sure.. will do when I get home 
What does [GetLastWin32Error](http://msdn.microsoft.com/en-us/library/system.runtime.interopservices.marshal.getlastwin32error%28vs.80%29.aspx) return? Keep in mind you need to use the DllImportAttribute.SetLastError attribute to get this information (it mentions that in the link)
Yes you can http://stackoverflow.com/questions/141370/inotifypropertychanged-property-name-hardcode-vs-reflection
Start with /u/salvinger's suggestion and see what GetLastWin32Error returns. Memory for an application is divided into regions. Some are read-only, others are totally inaccessible at all. It sounds like the process you are reading from is disposing of objects (resulting in that region in memory clearing itself or being reallocated for other purposes), and then later instantiating those objects again resulting in the information you're looking for moving to another region in memory. There are api function calls which allow you to get a map of a process's memory regions and their read-only/writable status. (I don't recall their names off hand, I can post again when I get home if you'd like). *Ninja Edit: Some programs and games intentionally do this in order to prevent memory manipulation. If you tell me what kind of program you are trying to manipulate memory for, I can give you some pointers maybe?*
Why would you downvote this, it's widely used as a way to hold the console open?
Tryhards :)
&gt; The other is a recent project that leads into above where I'm writing a Markdown parser that emits events like XmlReader instead of the more typical "convert to HTML" that most libraries do. Mainly because I use Markdown for my writing. This sounds pretty cool. Is it on github by any chance?
Always makes me happy to hear that my libraries are enabling other developers to scratch their own itches :-)
https://github.com/dmoonfire/mfgames-text-markup-cil Of course. I'm slowly going through the CommonMark specification for TDD. Mainly fumbling since I'm not using their state machine, but making it up as I go. I figured I will have most of it working by end of January, at least that's my goal before bringing it up to the 0.13 version of the specification. I did write a parser for the CommonMark spec to convert it into NUnit tests. :) Because there are hundreds of examples and I'm lazy.
Hi Guys, I used the GetLastError and could "solve" the problem, but I just don't understand why, just some guess work in the understanding. So the error that generated was 6.. which was ERROR_INVALID_HANDLE. I had a class called MemoryManager, which I had set the handle to not keeping asking the process from it.. but it seems that the handle of the process change and I cant save it on a variable. this is what i had: public MemoryManager(IntPtr handler){ mHandler = handler; } so now Im not saving the handler anymore to a variable and it works just fine. Seems like this pointer changes after some time / requests. Thanks for the help 
You probably need to use safe handles. See this blog post for some details. http://blogs.msdn.com/b/shawnfa/archive/2004/08/12/213808.aspx
while debugging? you can try the immediate window
Not OP but from the code in Main.cs the program: * Get's a list of ports from System.IO.Ports and populates a combobox with the results * When the user clicks connect it creates an object of the SerialPort class using an overload that takes the port name and baud rate. It then sets some of the object's properties, hooks into the SerialDataReceivedEventHandler event handler, and opens the connection * Any time serial data is received the data received event will fire and it will print a line to the log text box. * Any time the send button is pressed the text from the "Write" textbox is sent using the port object. ~~The question I have is, why was a delegate used? I'm not very knowledgeable about them so maybe I just need to study delegates in more detail but it seems like the Serial Data Received event handler could have written to the log text box directly.~~ /u/ricodued answered my question Couple of notes for OP: * I'm guessing the label "Bound Rate" and txtBoundRate text box are referring to the Baud Rate, in which case they're named wrong * The Baud Rate from the user is used when creating the port object (passed through one of the constructor overloads), then hard coded in the next line ("port.BaudRate = 9600") 
The delegate is run to properly update the textbox using the UI thread rather than the thread that raised the event. [From MSDN:](http://msdn.microsoft.com/en-us/library/system.io.ports.serialport.datareceived%28v=vs.110%29.aspx) &gt;The DataReceived event is raised on a secondary thread when data is received from the SerialPort object. Because this event is raised on a secondary thread, and not the main thread, attempting to modify some elements in the main thread, such as UI elements, could raise a threading exception. If it is necessary to modify elements in the main Form or Control, post change requests back using Invoke, which will do the work on the proper thread.
You can edit variables when hovering over it while the execution is paused. Or you can use the Autos, Locals, and Watch windows. If you want to re-execute a piece of code, you can drag the yellow arrow on the left (where breakpoints are located) to the specific line. But actually editing code without compiling is not usually possible. (There may be project types where it works, but I haven't done it before) 
I don't use the normal keyboard shortcuts (a stubborn reminder of a previous career using Delphi), what command is Crtl-F5? 
Visual Studio has Edit and Continue which works out pretty well as long as you avoid some of its limitations. It can be found under Tools / Options/ Debugger (I believe, I don't have it open). I use it pretty heavily to trace through code, figure out what doesn't work, set the next statement to above what I'm fixing, and then fix it. As I said, it has some limitations. I think it plays well with 32-bit but not I'm not sure about 64-bit. I had to change my NUnit classes to 32-bit to get it working, but I haven't tried since we migrated to VS2013. Web debugging had some trouble, I believe that they fixed it with the latest VS2013, I seem to recall reading about it. This doesn't work with constants. However, if you are tweaking, having a singleton variables class is useful (plus you can allow overrides from a file or a in-game console like Oblivion) because you can then set it using the techniques the others talk about (hover over the value, change it, then continue).
Editing without pausing the execution seems to be of limited value to me. Game loops are the only scenario I can imagine where that would be useful. Seems you could pretty easily put buttons in your game to "make tweaks to constants" and see the results without pausing. Other than game loops code doesn't usually run in infinite loops. **Edit: You may not know that you can set conditional breakpoints in visual studio. Right click on the break point and click "Condition". A dialog box will come up. Put an evaluation into the box. If the evaluation comes back true the breakpoint will stop, if the evaluation comes in false the breakpoint will not stop. So if you put something like "loopCount % 10000 == 1" the breakpoint will only stop on every 10,000th iteration.**
Could this be an implementation of Miller-Rabin algorithm? Like this (http://blog.softwx.net/2013/08/deterministic-miller-rabin-primality.html)
Does it also modify variables?
Not sure, I found it in [here](http://www.mathblog.dk/project-euler-60-primes-concatenate/) in the source code. I implement the same code for the rest of the project, but this guys method for determining if a number is prime is several orders of magnitude faster than mine. EDIT: for comparison, this is how I've always found primes public static bool isPrime(this int num) { if (num &lt; 2) return false; if (num == 2) return true; return !Enumerable.Range(3, (int)Math.sqrt(num)).Any(n =&gt; num % n == 0); }
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Sieve of Eratosthenes**](https://en.wikipedia.org/wiki/Sieve%20of%20Eratosthenes): [](#sfw) --- &gt; &gt;In [mathematics](https://en.wikipedia.org/wiki/Mathematics), the __[sieve](https://en.wikipedia.org/wiki/Sieve_theory) of Eratosthenes__ ([Greek](https://en.wikipedia.org/wiki/Greek_language): κόσκινον Ἐρατοσθένους), one of a number of [prime number sieves](https://en.wikipedia.org/wiki/Generating_primes#Prime_sieves), is a simple, ancient [algorithm](https://en.wikipedia.org/wiki/Algorithm) for finding all [prime numbers](https://en.wikipedia.org/wiki/Prime_number) up to any given limit. It does so by iteratively marking as [composite](https://en.wikipedia.org/wiki/Composite_number) (i.e. not prime) the multiples of each prime, starting with the multiples of 2. &gt;The multiples of a given prime are generated as a sequence of numbers starting from that prime, with [constant difference between them](https://en.wikipedia.org/wiki/Arithmetic_progression) which is equal to that prime. This is the sieve's key distinction from using [trial division](https://en.wikipedia.org/wiki/Trial_division) to sequentially test each candidate number for divisibility by each prime. &gt;The sieve of Eratosthenes is one of the most efficient ways to find all of the smaller primes (below 10 million or so). It is named after [Eratosthenes of Cyrene](https://en.wikipedia.org/wiki/Eratosthenes), a [Greek mathematician](https://en.wikipedia.org/wiki/Greek_mathematics); although none of his works have survived, the sieve was described and attributed to Eratosthenes in the *[Introduction to Arithmetic](https://en.wikipedia.org/wiki/Introduction_to_Arithmetic)* by [Nicomachus](https://en.wikipedia.org/wiki/Nicomachus). &gt;==== &gt;[**Image from article**](https://i.imgur.com/1c4hDVz.gif) [^(i)](https://commons.wikimedia.org/wiki/File:Sieve_of_Eratosthenes_animation.gif) --- ^Interesting: [^Sieve ^of ^Atkin](https://en.wikipedia.org/wiki/Sieve_of_Atkin) ^| [^Wheel ^factorization](https://en.wikipedia.org/wiki/Wheel_factorization) ^| [^Sieve ^of ^Sundaram](https://en.wikipedia.org/wiki/Sieve_of_Sundaram) ^| [^Eratosthenes](https://en.wikipedia.org/wiki/Eratosthenes) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cn5uei3) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cn5uei3)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Interesting link, thanks for sharing.
I've got the sieve implemented on my end already, but it won't be able to handle numbers higher than the limit that was originally applied to it and running it for every number otherwise would slow down the whole process.
You run it once, and store the result. 
* I am building a lib to manage playlist in c#. It is my first lib. Any help is welcome. I called it [Playlist#](https://github.com/aloisdg/PlaylistSharp). * A learn a lot about managing color for a windows phone app. It was great. * My windows phone app about color I guess. I abandoned it because I didnt have the time to update it and I lost the code. I am not proud of the ending ... * Internet stuff : msdn / blog / code project / c# corner etc. 
The code in your question looks like an implementation of Miller-Rabin. But he's using 2 and 3 as witnesses, and I think that will only give correct answers up to 1,373,653. 
10 digits isn't a very long number. But I hear what you are saying. I would... Calc the Sieve for primes up to n, and return a List&lt;int&gt; of primes, p . Find the the largest of the concated test numbers, t. Calc the Sieve from n to squareroot(t), passing in p, to pre-load the bit array, returning an updated list p. with this list, you can your .Any() test. You could actually run the .Any() test, with the smaller prime list, and only calc the bigger list if t doesn't fail, since 2,3,5,7,11,13, etc will catch a lot of the low hanging fruit.
This looks like an implementation of [Fermat's Little Theorem](http://www.wikiwand.com/en/Fermat%27s_little_theorem). See [Fermat Primality Test](http://www.wikiwand.com/en/Fermat_primality_test), except instead of randomly choosing `a`, this implementation chooses 2 and 3 as tests.
&gt; buyBalloonButton.Enabled = buyBalloonButton.Enabled || _money &gt;= 5000; &gt; buyJetButton.Enabled = buyJetButtonEnabled || _money &gt;= 10000; Wow, I'm learning programming but I have never seen this, what does it do? My brain is telling me it's assigning whatever the button's state already is, or money is above 5000..?
You can also use Console.ReadKey(); -just press random key to close console or Console.Read(); - press enter to close console. I'm beginner also, just trying to help with that "console closes too fast problem" I usually use Console.ReadLine(); when i need to get user input.
Don't forget to HTML encode your placeholder values, else your business users will sneak in a &gt; and really screw up your formatting. I have seen outlook just remove chunks of invalid html to send to the mail clients. copy = placeHolders.Aggregate(copy, (current, placeHolder) =&gt; current.Replace(string.Format("$[{0}]", placeHolder.Key), string.Format("{0}", placeHolder.Value))); 
Don't take this as disrespectful, but there's some alternatives to your approach: - You shouldn't embed images into the email, instead use regular images hosted on a web server. Embedding the images bloats the size of the email, and doesn't help anything. - There are better ways to handle "templates", such as Razor: http://lukencode.com/2011/04/30/fluent-email-now-supporting-razor-syntax-for-templates/ , using http://razorengine.codeplex.com/ to drive the magic. You can store your emails in actual .cshtml files, and put view logic in there if needed, and let Razor handle HTML encoding values. This also allows you to make actual ViewModels for your emails. - You didn't cover making plain text Alternate Views, which you should do, because it helps with anti-spam protection on email clients. You lose points on most anti-spam engines if you don't have a plaintext view. The best method I’ve come up with is using PreMailer (the .NET implementation: https://www.nuget.org/packages/PreMailer.Net ) - which takes in HTML and spits out pre-mailed (aka, styles in-lined) HTML and plain text versions. Viola. - If this is for a “non-personal” site, I would suggest using a third-party emailer, such as http://www.mailgun.com/ - you just pass them the HTML, subject, to/from, and they handle the rest, and their API will even allow you to handle replies if you’d like. You also get benefits such as knowing when email fails to deliver (via API), if they opened it (if you use their feature for that), etc. 
Thank you for your answer. The reason to take a look to Winforms is to not left voids in my knowledge of C#because some old projects stills use WinForms, but I plan to move to WPF soon. I sure will check Dapper.
This is a great academic exercise to unpack how email works, but in practice i would recommend http://aboutcode.net/postal/ 
WinForms doesn't have a template/theme system like WPF does. It is a thin wrapper on top of the native Windows API. If you want to customize your controls and stuff, you'll basically have to write theming code by hand. Also, make sure the classes whose properties get bound to the UI implement INotifyPropertyChanged. This is the core of the data binding system for both WinForms and WPF.
That's exactly it. So if the button starts disabled it will stay disabled until after reaching $x, then it will stay enabled. It's functionally the same as if(_money &gt;= 5000) buyBalloonButton.Enabled = true;
currently building a ASP.net and c# Console application combination to manage the Data transfer between about 6 SQL instances, it should scale well however and is starting to creep towards DBA maintenance work also. thinking it should probably really be a windows-service rather than a Console app but will approach that later 
Well that's a bummer, I thought winforms had to have a "designer" that I could modify [How they produce this?](http://www.codeproject.com/KB/miscctrl/AsyncDataloading/Screen01.JPG) I'll check the INotifyPropertyChanged and see, thanks for your answer.
&gt; How Entity framework perform in real medium or big size apps? Has anyone experience some poor results using this new ORM? If you just use the default and insert a million things in the same transaction you're going to have a bad time. There's some tricks you can do with context.Configuration.AutoDetectChangesEnabled = false; to speed up when you have a lot of inserts. Just google for "entity framework insert performance". 
Yeah I have been reading about bulk operations and all that and the article mention that setting. So I guess that beside those default settings and bulk operations EF is as good as other ORMs. Thanks for your answer.
So bad design on Microsoft behalf, is just the minimum we can expect as developer is to customize those wizards or template. WPF looks more flexible especially when using Blend
If you're using SQL Server then EF is a good choice. But if you are using something else then do some investigations first to see that the support is there. 
I'll do that, step by step and let the project "ask" for what it needs
I'm starting with SQL Server but in the future I want to make a app with MySQL but I read that the free connector for MySQL is not that good and that the paying ones are better, will see.
That's cool -- haven't come across that package before. I would disagree with sticking email headers in the cshtml file (doesn't make sense to me... that stuff should be part of a base class that all the view models inherit from, if you want somewhere central to set/store it). But everything else looks great!
That's very interesting, thank you for explaining it!
Thank you for the feedback. This post is specifically for requirements of sending HTML body emails with images embedded. 
It's good to write your own implementations for practice/learning, but in production, I would suggest something along the lines of the ImageResizer package: https://www.nuget.org/packages/ImageResizer/
Good point. I'll update. Thank you for the feedback.
I am pretty sure you can actually do a base class
ORM: Great for getting something up and running. Not so hot for large apps (highly complex data relationships, more than 5 updates every 10 seconds) Second the motion for Dapper. Very close to raw ADO.NET speed, but with much less pain. Winforms: Sorry to have to tell you that if you want them to look nice, you'll have to tweak them manually. 
1. The best bet is probably to create a UI class library for the personalized controls. E.G.: public class AcmeTextBox : System.Windows.Forms.Button { public AcmeTextBox() { BackColor = System.Drawing.Color.LightSteelBlue; } } If you then include that project in another solution and build, VS2013 will automagically add a section to the toolbar tab named "&lt;ProjectName&gt; Components", which you can then drag and drop your controls from like the other native controls. Not sure how far back that sort of intelligent behavior on the part of VS goes, though. 2. Updating things in winforms is a bit of a bear. Really it depends on what you're updating. Data controls tend to have a .Update member, whereas controls (and the form itsself) has a .Refresh member that forces updates to be drawn. Also note that some controls (here's looking at you, TableLayoutPanel) have a mechanism like .SuspendLayout and .ResumeLayout that should respectively be called before and after doing updates for the sake of efficiency. 3. EF is one component of ADO.NET. Linq to SQL and DataSets are other components. EF is generally the slowest of them as well. Before that taints your opinion however, understand that the choice to use an ORM or non-extremely specific custom written tool is *ipso facto* the choice to sacrifice performance for cleaner, more maintainable, easier to write code. Regrettably I don't have much experience in using EF or NH on large scale operations, but it is my understanding that their performance hit is generally worth it. If you follow a good repository pattern for your data, you should be able to do everything in the big ORM and just build a new repository implementation with a more efficient tool later if performance becomes a problem. 4. Honestly, I don't think there is a wrong choice between EF and NH. I've used the former with MySQL to great success, while I'm currently implementing Fluent NHibernate in a project because everything else I've tried has been a royal PITA to get working with Oracle in my environment. As stated before, EF is part of ADO.NET, which also offers Linq to SQL. It's less flexible and requires more work to set up, but is generally much faster. EF and NH both look great on resumes because they're probably the most widely used tools. 5. I would assume you're talking about EF here. EF has a high start up cost because the entire configuration is interpreted the first time you create your context. If you initialize the context on a button event, you should see that the first time is very slow, but after the first call it is much, much faster. There are ways around this which you should be able to find with a quick search.
&gt;The reason to take a look to Winforms is to not left voids in my knowledge of C#because some old projects stills use WinForms Yeah, but that's a bit like focusing on learning the ins and outs of IRQs and which ISA slots share them.
Salt+Encrypt is really the best solution. And even then, it will only slow down a determined hacker. If they can grab a copy of the application, they can decompile it and run the decryption algorithm manually.
So if the application is open source, it doesn't matter at all right? Or can I use something like an "private" computer key to encrypt the salt? Or is that to much work for no extra security? 
Have you used the datagridview.Sort() method to sort by this invisible DisplayMember column?
Best way is to P/Invoke into system services for secure credential storage. See e.g. MonoDevelop's [MacKeychainPasswordProvider](https://github.com/mono/monodevelop/blob/7c51ae11c323d429c10acd22169373927217198f/main/src/addins/MacPlatform/MacKeychainPasswordProvider.cs) and [WindowsSecureStoragePasswordProvider](https://github.com/mono/monodevelop/blob/7c51ae11c323d429c10acd22169373927217198f/main/src/addins/WindowsPlatform/WindowsPlatform/WindowsSecureStoragePasswordProvider.cs). Not sure whether any of the Linux desktops have an equivalent.
If you intend on the file being transformed (i.e. encrypted/decrypted) on the same machine, you can make use of hardware specific information, like device serial numbers or MAC addresses.
Alright, I'll use that then. 
FYI, if you deploy the configuration file with your application, hardware-specific encryption will require that you maintain a separate config in source control for each server or a transformation step before deploying which will make deployments slightly more complicated (though not to the point where it isn't worth doing).
That won't be the point, because I'm going to use an UI package that also needs separated deployment 
Forgive me for my little knowledge, but why is that the best way instead of creating an file by myself? (I'm also trying to learn/understand every aspect of this "problem") 
Good start. I would suggest making your editor font larger, the text is hard to read even at full screen. I found a good starting point are the [C# Fundamentals for Absolute Beginners](http://www.microsoftvirtualacademy.com/training-courses/c-fundamentals-for-absolute-beginners) video series by Bob Tabor. They are free to download and I still refer to them. Please continue to post more videos. I think it is important for someone to teach and share what they learn. It reinforces understanding of the topic and you usually learn more on the subject in return. My teaching skills are severely lacking.
The problem with creating a file yourself is the key needs to also be stored somewhere if it is not being provided by the user every time. I see below it is suggested to use something like a HDD serial number. No matter how you do this, it will not actually be secure and simply makes it a bit annoying to get the password. Pidgin wrote a nice article on it about their configuration files, https://developer.pidgin.im/wiki/PlainTextPasswords The built-in keychains in both Windows and Linux are enforced by the OS for security, based on the logged in user. While not 100% fool-proof, it's definitely more secure than using an easily gotten password. In Windows, I've written files to the computer and then set attributes to encrypt them and limit access to other users also. Windows handles the encryption, it is secure, and the user doesn't need to manage a password.
Also MVCMailer (google it, on mobile and lazy). Both take about the same as far as set up time, I do lean more towards Postal though just for personal preference. Use either one and the products from Zurb to make your emails nice then you are good to go! Don't hand code emails anymore!
Use public and private keys.
'programing' is, oddly, an acceptable spelling. It might be the normal spelling where OP is, though I learned to read and write in England and that spelling seems messed up to me! 
I do a similar thing with my blog (http:/www.grogansoft.com/blog/). I write the blog posts to solidify and share what I learn. I feel I get a much better understanding when I write something up. It also forces me to research what I'm saying so I don't inadvertently say anything dumb.
Working on a GTK# GUI for an automation tool I wrote in F# that takes an Apple VPP License Spreadsheet (XLS) and partitions it based on a list of desired filenames and a respective code amount. I'm almost ready to publish it (already used it at my job) and while I'll release it for free I'm hoping I can get donations, so I can afford to publish it on the OSX app store and purchase a months subscription of Xamarin.Mac to write a GUI that can be published to said app store. Other than shell scripts and MS Access stuff I've done, this project is my first useful programming endeavor. It took me awhile to complete the main program as I was learning F# and trying to implement the best functional design patterns while doing so. The GTK# part is done in C# and the interop is handled pretty smoothly with delegates (although it took me awhile to figure out how to make language agnostic delegates). The project is at https://github.com/thenamescarlos/VPPlist-Buddy 
This is exactly my thought process. I think the best way to learn is to teach as well, because in order to teach you must be able to grasp the concepts.
You can solve the font size problem easily by typing "presenton" into the search bar in the top right part of visual studio. This activates presentation mode. You type "presentoff" to turn it off. You may need productivity power tools for this. You did for vs2012, but I can't remember if you need it for vs2013. You should probably get power tools anyway. It's great
It is interesting that they used dllimports instead of using dbus to communicate with keyring. Kwallet for example has dbus bindings ( or whatever you call them ) and I strongly suspect that gnome keyring does 
I agree that you can make interesting things with WinForm designer, but what I meant is the drag-and-drop from the DataSources, is a very easy way to implement a CRUD form but it lacks in customization. We always end up with the same style of controls, you can change them but it have to be done one by one and form by form, it should be a way to change the template IMO. Thankfully this is a test project.
You can use reflection to get the types from all loaded assemblies and you can use reflection to check for existence of constructor, properties, methods... But do you really need this? This sounds like a very fishy and ugly design and will most likely end up in an mess that can't be maintained anymore. And you have to be careful with refactoring then.
The idea is to have an external json file with lists of objects and data to send to the constructor. At runtime I load the schema and search for a matching class for each object type. If new types are added later, they can simply be added with a DLL, rather than re-building the app which would otherwise have to know all the types beforehand. In PHP I can do this by "registering" classes at load time into a map, then they can be found at runtime. It's pretty easy and works well. Not unmanageable at all.
Great tip, thanks!
That makes a lot more sense, now. I understand how it increments the last two numbers based on literal time of compilation. How do minor and major change? Are those strictly manual, since VS can't necessarily tell when I've made a ground breaking change? Also, thanks for clearing stuff up.
I've also been looking for this for quite a while and I believe that major/minor changes you have to do manually.
A little different approach to the others recommended here. Set up a domain controller and create the user accounts there and then authenticate the users against it.
/u/vani_999 is correct and you had answered your own question. VS cannot know what defines breaking changes so it is up to you/team to decide the Major and Minor numbers. The other reason why VS won't auto-increment the Major and Minor numbers is those values are used when checking type compatibility (COM, possibly within .NET itself). More on this: http://msdn.microsoft.com/en-us/library/system.reflection.assemblyversionattribute%28v=vs.110%29.aspx
If you just need something dead simple, you could even make this happen without WCF, open ports what not: 1. Create a website, when the "button" is clicked, you store this signal at the site (either db, or write to a file, ..) 2. Have a script running as scheduled task on your pc that checks if the signal is given, example in powershell: $webClient = new-object System.Net.WebClient $output = $webClient.DownloadString("http://yoururlwithsignalhere") if ($output -like "*YOURSIGNALWORDINTHERESPONSE*") { "signal found, shutting down" Stop-Computer } else { "no signal found" } 
In my opinion you should back off of databases and ORMs if you arr just starting to program. You should aquire some experience in C# with or without win forms and then move onto WPF. Get familiar with that and then start up on MVVM only after getting some decent experience with these should you start with EF or another ORM. I think you are rushing and skipping teaching yourself important skills.
A small correction: it is just a matter of time till he runs into a brick wall, turns around, wanders for a while and then finally run into it, so it's better if he learns about it earlier :d
Why not just skip 80℅ of the boilerplate and just use something like Caliburn.Micro?
&gt; When the NDesk.DBus library and C# 2.0 build environment is detected, gnome-keyring-sharp will be built with D-Bus support. It looks like the API I linked to supports dbus, but I haven't tried it.
Actually, going back to your idea, it looks like it might be [doable with attributes](http://stackoverflow.com/questions/607178/how-enumerate-all-classes-with-custom-class-attribute).
Didn't you read my answer? "Might be doable"? It is doable, with reflection (like used in the SO post).
Thanks, that's very helpful.
How are you adding the extra DLLs? I assume your main application doesn't know that these "plugin" DLLs exist when they're compiled. One option, in that case, is to list all DLL files in a given directory, [Assembly.Load](http://msdn.microsoft.com/en-us/library/system.reflection.assembly.loadfrom.aspx) them, and [iterate through the types](http://msdn.microsoft.com/en-us/library/system.reflection.assembly.gettypes.aspx) in the assembly to find those that implement a specific interface or contain an attribute. Once you have the types, you can store those in a dictionary if you want and when you want to create an instance you can use [Activator.CreateInstance](http://msdn.microsoft.com/en-us/library/system.activator.createinstance%28v=vs.110%29.aspx) to create a new instance of the type. If you want to try something more advanced, an alternative to Activator is [compiled lambda expressions](http://vagif.bloggingabout.net/2010/04/02/dont-use-activator-createinstance-or-constructorinfo-invoke-use-compiled-lambda-expressions/) but those require you to build expression trees which adds some mental complexity.
Look into MEF, it was basically built for this exact task. Allows composability at runtime.
Activator.CreateInstance See http://stackoverflow.com/questions/1288310/activator-createinstance-how-to-create-instances-of-classes-that-have-paramete
Thanks, that's a good breakdown. Hadn't got to the point of loading DLLs yet but was going to have to figure this part out too.
That's indeed an different approach. But probably not suitable for my little problem. But that is my fault I guess, that I wasn't clear enough. The user credentials that will be stored are credentials to access sql servers, so that they can manage them. Having said that, I do think that your approach is good (maybe the best), but not for this project. 
While using let can really make your LINQ queries more readable you can also use it as a break-point inside them to run code for debugging/logging/other reasons: var progressReportingQuery = from c in customers let progress = c =&gt; { Console.WriteLine("Processing customer {}", c.Id); return true; } select c; When I decide to execute this query, I'll get a nice progress report of the query for debugging/logging purposes. Of course you can modify this for all kinds of other use cases. Edit: However for the love of God, don't use this functionality to add state changing actions inside your LINQ query (remember, the let statement will be executed when you actually enumerate over the query). It is similar in nature as to modifying a list directly while iterating over it. LINQ was designed as a projection/selection tool, and should be used that way. Instead, place any business-related code inside a foreach-loop that iterates over an enumerable.
Nice video - clear explanation and examples! I really need to set aside a few days and just really dig into LINQ - any suggestions for a best practices video or article?
I personally like the method syntax because it feels a lot more like a functional or powershell-esque object transformation pipeline, rather than a sql-like query. That said, I do like the query syntax when working with EF or Linq to SQL, but I've been using dapper and straight SQL for that layer recently anyway, so...
If you're not familiar with linq I suggest learning all it has to offer before going into best practices. Try c# in a nutshell or similar books. Might find linq videos on pluralsight. I'm not sure about resources for linq best practices though. 
SQL is a functional programming language. Also it seems to me that the query syntax is closer to languages like Haskell and F# except that with these languages you could actually build the query syntax rather than have it in the compiler.
I cant decide which frustrates me more, the original comment or the fact you validated it by saying you simplified your explanation of what that hack still doesn't get.
While that works, I think adding an [IEnumerable extension method](http://blog.nem.ec/2014/04/29/dump-progress/) to record progress is a better approach (although it doesn't mesh as well with Query syntax).
&gt; SQL is a functional programming language. No. SQL is a declarative language. 
Only the DDL is declarative. The query language is imperative since it has mutable variables, loops and a very poor concept of functions.
Create a Dictionary&lt;string, Type&gt;. Use Activator.CreateInstance to create a instance of the type looked up from the map.
To be honest I have very little interest in arguing about the differences. In any case all that SQL does is filter, map, fold, etc. - basically the LINQ operators.
Thanks for the rec - I've used LINQ over the past few years but have pretty much been self taught. I'd just like a best practices video to correct any/all of the bad habits/practices that I've most likely learned :)
If this is true I assume its to make sure apps don't drain the battery too much of mobile devices (including laptops). What are you being limited to by the way?
Store apps are frame-limited to 60fps.
INTO allows you to move a projection into a new context, "Query continuation". It's a way to break up complex queries that might otherwise require you to create multiple queries using local variables and join them later. In other words, it's a shortcut for progressive querying. It can also help readability. 
I think what's best to do is not use a generic repository at all. Entity Framework is already a repository, so all you're really doing is adding an extra layer of abstraction. [This post](http://rob.conery.io/2014/03/04/repositories-and-unitofwork-are-not-a-good-idea/) makes a pretty good case against it, with the worst offender being a generic IRepository&lt;T&gt; Instead, I like to use the [CQRS](http://martinfowler.com/bliki/CQRS.html) and mediator pattern, specifically the [ShortBus](https://github.com/mhinze/ShortBus) implementation. It lets you define commands and queries, with associated handlers to process your requests, and then use EF directly inside the handler. I view a "Unit of Work" as being some task that I want to accomplish (place an order and send the user a confirmation email), as opposed to just an Insert operation being the unit of work. 
Thanks Executer
Ok well, it was an assumption on my part, based on the fact that the majority of people using the repository pattern are doing so for EF (or something inspired by EF), and based on your post this is clearly something database related. So whether it's EF, some other ORM, RavenDB, or whatever, it's still relevant. You asked what the _best_ thing to do was, and since this is a beginner level question, I thought maybe it'd be worthwhile to offer an alternative direction. 
That's a pretty dumb statement. You asked what was _best_, and I offered an alternate pattern. No need to get so pissy, especially since this question has been asked hundreds of times on stackoverflow. 
I'm not really sure I'm digging myself a hole, since none of this affects me in any way, other than I'll just be sure not to offer you any future advice. I wasn't an ass until your rather dickish first response, and hence why I threw in the beginner jab. My first comment I tried to provide plenty of sources, with one being one of the most detailed posts about _the very thing you're working with_, and a whole section on the very question you asked. &gt; Sometimes when I insert into a repo, I have an identity column in a database which gets populated, requiring me to retrieve the newly submitted data. and a whole section in the article titled "I Needed The New Customer ID" The pattern I provided is for more than just EF (I'm not sure why you're hung up on the entity framework portion. It's just an ORM...). 
+1 from me just because you put yourself out there and gave it a go! I've been blogging, writing articles and tutorials, doing live talks at user groups and code camps for several years. It's the best way to help yourself learn and solidify your own knowledge as well as share it with others. There is nothing wrong with wanting to teach as you learn. In fact, I've found that it's actually desired by the content consumers. Why? Because when you're teaching while you learn, you're able to teach at a level closer to the viewer versus a seasoned expert who will take many things for granted. I did a Ruby &amp; Rails for .NET developers for Pluralsight. I built that course as I learned rails and it was the most successful courses I built for Pluralsight. As far as your videos, I'd suggest speaking louder and slower. Have a confident voice. I highly recommend getting a good microphone and setting up your environment to reduce echo and white noise. For all my video work I use a Blue Yeti microphone which is about $100 on Amazon. A lot of other authors use a Rode Podcaster. there are plenty of good options though. I also pad my desk and walls with bedding foam to improve the quality. Learn how to use Audacity (A free audio tool) to remove white noise and fix issues. Audio (IMO) is the most important aspect of a video. Good content with poor audio kills it. Feel free to message me and I'll be more than happy to help you setup. 
I believe a single M is the "euro" version while the MM version is the "US" version. At least, that's what I've always been led to believe. 
I think you should try changing to index of for posb and not last index of. I'm not next to a computer so I can't test this but I think that should solve it 
Break the problem down into smaller pieces. WPF doesn't have anything to do with connecting to and modifying databases. The only thing WPF is for is making fancy UIs. The business logic of your application, the things that perform the actual tasks your application is designed to do, should basically be completely separate from the UI. Look at the MVVM pattern, this is how WPF applications are supposed to be designed.
Thank you for the swift reply, however I have a lot of divs before the classextra which I think are disturbing with it because when I run it I end up getting nothing when using IndexOf instead of LastIndexOf.
Thx again for the swift reply however how would I split the string at posA because posA is only defined in the extension method not in the main code?
I used this library to build a really basic query language for an app i was working on. it was a while ago now, but i do remember that once i understood it, it was much easier to get things done with re-linq than if i had had to roll my own on top of the linq ASTs. i'd recommend it if you have the need, but caution that both linq providers and re-linq are a bit tough to wrap your head around. probably a bit easier now that you could look at ef7 or nhibernate for examples. 
If you're parsing HTML, I'd strongly recommend using the [HTML Agility Pack](https://www.nuget.org/packages/HtmlAgilityPack) library. It is available via [NuGet](https://www.nuget.org/) as well.
Modify the extension method, or write your own, that uses IndexOf instead of LastIndexOf. But yeah, reaally you should use [Html Agility Pack](http://htmlagilitypack.codeplex.com/). For the sake of whoever has to inherit your code, even if that person is you a few months from now.
The harder part would be to wake your pc up. If it's shut down and not plugged into ethernet there is no way. 
Stop using indexOf. You have no guarantee that the page won't change in some manner that destroys that index. It only takes a single extra word anywhere in the page to break your index. Let me put it another way. You are trying to parse HTML with a regex. You do not parse HTML with a regex: http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454
+1 for HtmlAgilityPack. It's great.
I strongly suggest doing this. HTML is no fun to parse. You might be lucky, if it's only one site/page you have to parse, is it XHTML by any chance? If so, you can load it as XML and use XPath. If not, HtmlAgilityPack is a pretty great library.
If you're intent on string parsing, then it sounds like it's time you looked into Regex. Regex does a bit of the thinking for you - you just need to provide the search pattern. Otherwise, look into HtmlAgilityPack, like /u/PhonicUK said. EDIT: I misread the intent of OP. I thought OP was simply parsing a single string of html content. If you're trying to search an entire html document, then you certainly don't want to use Regex to parse the document.
So by 'linq-ifying' you mean adding extension methods onto existing classes that would support similar functionality like Where or AsParallel? Or does this actually allow you to write in query syntax?
Thank you for your kind responses. I will try out the methods you have sent me and give you my results later. 😃
Please refer to [this](http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags) stackoverflow answer regarding parsing html with regex.
Crypto library found at http://obscur.me . I taught myself C#
I think the idea that "never use regex with HTML" is a little wrong. If you are effectively parsing the entire document, then sure don't use regex since it's not designed for that sort of thing and you will have a bad time. However if you are searching for a regular expression, such as "&lt;div class=\"Username\"&gt;(?&lt;Name&gt;.*?)&lt;/div&gt;" then I don't really see the harm You don't care about the other nodes, you just want to get the username out of the text document. It won't break any more frequently than actually parsing the entire document (div can change to span or label, or the class may change, or the entire parent directory may change which would destroy a complete parse but not the regular expression). No matter how you try to read someone else's document without a contract you cannot do it in such a way that the other part can't break your code so keep it simple and within the requirements of the code. Yes we all know HTML, like most programming languages, is not a regular expression and you will have a bad time parsing the document using regex, but it *is* a text document and it *does have* regular expressions that you *can* match with regex. Sure your code may, and probably will break, but using HTML Agility Pack wont actually save you in that regard anyway. The author of the document is entitled to do any changes they want, including rewriting stylesheets, changing tags, ids and rerouting. If you want to match for a regular expression use regular expressions. If you are parsing a document (in fact almost any language at all. HTML isn't special in this regard.) don't use regular expressions. It's a pattern matching tool, not a parser generator.
If you need breakpoints in your LINQ queries you've got other problems. This is a hack to avoid dealing with them. That, and Console.WriteLine is an all-together different approach to debugging than using breakpoints. This is clearly not the type of code one should have in production. I do realize it's an over simplified example.
Sorry, what I meant was that your post was about powerful stuff. OC was about using a language construct as a debugging mechanism.
My first development position consisted of me writing screen-scraping document-grabbing plugins for a huge knowledge-discovery system. We used HtmlAgilityPack and it worked great, even when the HTML was badly formed...most of the time. If that fails, OP can always go learn regex real quick!
I'm with you. I think usually using regex is a bad idea when dealing with HTML / XML / etc., but there are situations where it can be quicker and easier to just roll with some regex.
Looks good. Subscribed. I'm learning C# this year too. Posting daily [here](http://learncsharpblog.wordpress.com/) 
define them outside the method 
The problem with that is that when I try to compile them outside the method, a lot of errors throw up.
If by file you mean the class that the OnLoginCompleted function belongs too, just define the variables at the top of the class instead of in the function like this: public class ClassName{ double buy; double sell; string buy1; string buy2; ... public override void OnLoginCompleted(){ ... } } This will make them properties of the class that will be available to any functions within the class. Also, try to use more descriptive names than buy1 or sell1, It's a really bad habit that will make your code hard to read.
when you call them again in the OnLoginCompleted function, did you remove the type and just assign them? Like this: buy = baseprice - (baseprice * buymult); buy1 = buy.ToString(); instead of this: double buy = baseprice - (baseprice * buymult); string buy1 = buy.ToString();
Thanks for your help :)
Hijacking this thread a little. I know HTML and XML but very little about XHTML. If I found a webpage written in XHTML then I could parse it with XDocument and LINQ to XML like I can with an ordinary XML file? If that's the case why on earth is the none X version of HTML still in existence because the XML version is surely easier to parse than plain HTML?
You can use a static class to access them: public static class Variables { public static int Buy1 { get; set; } } Variables.Buy1 = 12; You can also use a singleton: public static class Variables { static Variables() { Instance = new Variables(); } public static Variables Instance { get; set; } public int Buy1 { get; set; } } Variables.Instance.Buy1 = 12; The latter is more flexible if you ever need to swap out logic. More so if you use an interface. public interface IVariables { Buy1 { get; set; } } public static class Variables : IVariables { static Variables() { Instance = new Variables(); } public static IVariables Instance { get; set; } public int Buy1 { get; set; } } Variables.Instance.Buy1 = 12; 
Can also be done via Reflection.Emit, as shown here: var getter = new DynamicMethod(string.Concat("Ctor", type.Name),type, new Type[0]); var generator = getter.GetILGenerator(); generator.Emit(OpCodes.Newobj, type.GetConstructors()[0]); generator.Emit(OpCodes.Ret); return getter.CreateDelegate(typeof(Func&lt;object&gt;)) as Func&lt;object&gt;; And performance can be further improved by caching the returned function for later re-use.
Yes, if it's well-formed XHTML then you can parse it as XML, XDocument, LINQ and all. If you're dealing with HTML and not XHTML, then HtmlAgilityPack basically converts the SGML into the same structure as XML and provides XPath querying on top of it. XHTML is really nice if you need to scrape a site (and you're confident it's valid XHTML all the time), but I can't really think of any practical benefits for sites to provide XHTML content instead of HTML content. XHTML 1.0 became a recommendation in 2000. At that point there were a lot of web sites, applications and frameworks/stacks already out there, and since it's tough to make a strong case for moving to XHTML, adoption has been fairly low. I'd guess at least 10-20% of websites render XHTML, so it has seen some adoption. 
I should have known the " Captured Variables" one thanks to javascript and ajax calls. 
Yes I agree Console.WriteLine is not really a debugging approach, but it is as you pointed out an intentionally simplified example. There are a few examples where you might want to debug production LINQ queries and I've ran into them. One would be projections and specifically formatting DateTimes. Another would be subqueries, let comes in really handy when your linq query includes a subquery. Somepeople would rather have that in a stored proc and for some situations that may work, others thats overkill and hard to unit test. Others would say use two linq queries but again that's inefficient. Being able to see the generated SQL and ensure that the linq query it generates is another reason to debug. Yes I know there are tools that can do that by profiling, but sometimes it's easier to just step into the debugger. It's also useful for debugging linq to object method calls inside linq queries. So no if you have breakpoints you don't have problems, you have a real production application.
&gt; might want to debug production Oh, I see. We are in very different worlds. I have no more access to the production data my code operates on than you (i.e., compared to your access to my data). Also, I don't use LINQ to generate SQL. I made too many assumptions, my bad.
Some of these descriptions are a bit lacking or slightly miss the real reasoning, so here's my take: **Dynamic Mess** public void Main() { byte b = 1; dynamic d = b; Console.WriteLine(d.GetType()); d += 1; Console.WriteLine(d.GetType()); } In this case, the value `b` of type `byte` is cast over to `dynamic`. This means that the type of `d` starts as `byte`, causing the first `WriteLine` call to show `byte` as the type. The description says that the type change is due to the lack of a `+=` operator on the `byte` type, but this isn't really true. Integer constants with no suffix default to the `Int32` type, which means that the `d += 1` line actually adds an `Int32` to a `byte`, which resolves to the `Int32` type, hence why the second `WriteLine` call shows `Int32`. **IEnumerable nuance** public void Main() { GetChars(null); Console.WriteLine("done!"); } static IEnumerable&lt;char&gt; GetChars(string input) { if (input == null) throw new ArgumentNullException(input); foreach (char c in input) yield return c; } The title of this one is misleading. It has nothing to do with `IEnumerable` per-se, but rather the fact that the `yield` keyword causes execution to be deferred until the returned enumerator is actually enumerated. Think of it like a generator of lambda expressions which are individually executed on each evaluated iteration, rather than a normal synchronous method. **Captured Variables** public void Main() { var actions = new List&lt;Action&gt;(); for(int i = 0; i &lt; 5; i++) actions.Add(() =&gt; Console.WriteLine(i)); foreach (var action in actions) action(); } The description is correct on this one. The `Action` type wraps a lambda expression which operates on the local `i` variable. However, the values of `i` are not captured during the first loop, so when the expressions are evaluated afterwards, the value of `i` *at that point* is used, hence five lots of 5. **Parameter Reference** public void Main() { DoSomething(1); } void DoSomething(object x) { Console.WriteLine("DoSomething(object x)"); } void DoSomething&lt;T&gt;(params T[] x) { Console.WriteLine("DoSomething&lt;T&gt;(params T[] x)"); } Again, the description on this one is correct, but it doesn't really explain why we see the `&lt;T&gt;` rather than `object`, beyond "because of the spec". The non-generic method with the `object` parameter would require the `Int32` value type to be boxed into an object, whereas the generic method doesn't require any boxing, hence the preference. **EDIT:** What I mean to say here is that conversion down to the base `object` type requires a type conversion (boxing into an object), whereas making `Int32` the type identity of `T` allows for a direct type match. As far as I'm aware, generic identity changes hold precedence over type casting.
Description and Flags for me. Category for NUnit tests. I also write a good number of custom attributes as I need them.
Unary operators are not defined for byte, short etc. There is no instruction set to perform operation on a byte type. Rather the instruction set for int type is used for the operation on boolean, byte, char, and short types. So even instead of adding 1 I add another byte value, its still going to return Int. Check out this snippet http://www.volatileread.com/UtilityLibrary/SnippetCompiler?id=5187
I think the problem is the author explains it all in one lines, but I wouldnt say he is wrong. For example for Dynamic types example, There is no instruction set to perform the + operation on a byte type and the compiler uses the instruction set for int type for the operation. You say that its because 1 is inferred as an integer. Change that to a byte variable, and you will see it is still an Integer. 
More please! Bunch of stuff I didn't know
I think in later versions of C#they changed the behaviour, so it will now print 0 to 4 out.
Pure tells ReSharper and profilers that a method does not mutate visible state. ReSharper will then warn you if you forget an assignment from a pure method call since not using the return value is nonsensical.
As someone who reviews code portfolios I'd say it shouldn't matter. Though bear in mind that VS15 isn't actually "out", being a preview and all. No sane person will (should?) let you write production code in it. But knowing what's coming in C# is a very good thing, IMO.
So using C# 6 would not be OK for freelancing work, right? I'd imagine I am going to miss C# 6 a lot if I want to write a project in C# 5 for a client. That is also holding me back on trying it.
For me is the Flag, and the Obsolete - but the second one (luckily) more rarely used... :D
For personal projects it should be fine. If you are working for a client however, I would highly avoid using C# 6 until it is officially released. By using unreleased/test implementations of things for clients you can potentially create unforeseen and non-fixable issues for them. The stability and quality of the product outweigh any benefits you get from going with the latest tech. Most places avoid upgrading to the newest tech for a while because even officially released software has bugs in it. But as I've said before, for personal projects it's great to experiment! You will be a little a head of the curve when C# 6 becomes more widely adopted. And after all, part of the fun of programming is always learning something new!
Ah! Thanks! The only one I didn't understand was "Captured Values". I kept saying *"But i is out of scope, how can it have any value at all?!"*. Now I see that I overlooked that the assignment was inside a lambda expression. **Edit:** Nope, I'm still confused. If the Lambda was called against an array of 5 integers it would make sense to me. But since it's called 5 different times with a single integer I don't understand why it has a "memory" of "i". The only thing that would make sense to me is if the variable i didn't go out of scope when we expected it to. A pointer to i is stored in the List, but at the time of evaluation why don't we get an exception for pointing to a variable that's out of scope. Unless this just exploits a bug in the .NET framework and it allows you to reference a variable that's out of scope. Would this protect "i" from the garbage collector, or does the Action delegate keep a local (local-global?!?!) copy of "i"? 
ComVisible to hide Generics and incompatible properties in our libraries from a COM consumer. Custom attributes as needed. 
**unless** project is slated to be released after C#6 will be released. Then the client might appreciate the benefit of more "modern" code, and using the "beta" to do the initial build/design could be beneficial.
Thank you for your comment. Not sure how you could assess that the content was mediocre without actually taking the course and going through almost three hours of content! Is this how you usually make judgment about online courses? In regards to the video quality, this is an issue on Udemy. Preview videos do not have an option to enable HD. All the videos are captured at 1080 and are crystal clear. If you had read the existing students testimonials, you would have found out :) Yes there are free resources for everything on web, not just c#. But many students often need a course that is properly designed with learning in mind. This way they won't need to look at ten different websites to understand the core of a topic. I have designed all the lectures, their orders and the examples with "student in mind", ensuring that they will learn all the topics with ease and won't be confused along the way. Plus an additional benefit of udemy courses, especially compared to free resources or even plural sight, is the students discussions area. Students who need additional help, ask their questions and the instructor is there to assist them in their learning process. That's the reason some people prefer to pay an additional cost (whether $19 or in some cases even $199 or more) for the support they get. I'm one of active students on plural sight and I never got this luxury from any of the "industry expert" instructors as you mentioned. Also, on udemy, many instructors often create additional lectures based on students needs and their questions. All enrolled students get these additional material for free, and that's yet another reason they prefer to pay for a course with dedicated support. Udemy's $10m revenue for 2014 also verifies that. If I was in your shoes, I would spend my time getting to know one's course first before writing a long opinionated comment! :) 
Yeah, Pure is pretty awesome with immutable objects.
I've actually used Obsolete to handle a Int32 to Int64 conversion problem. We used to have a `int` data type but we needed to move it to `long` because we ran out of space. The problem was that C# has a helpful implicit conversion from int to long, so when we hit the &gt; 3B numbers, things were breaking. I got around it by creating a second constructor. public InternalId(long id) {} [Obsolete("Trying to sent a Int32 into a Int64-based identifier.")] public InternalId(int id) { throw new Exception("Trying to sent a Int32 into a Int64-based identifier."); } It did wonders for catching the problems at compile time.
Sorry but architecture has got nothing to do with a programming language! If what you mean by "architecture" is actually "design", my course is not about design patterns with C#! It's the c# language itself. I teach the c# language constructs, and not design patterns. The reason the course is titled c# advanced is that from the perspective of someone who has zero experience with c#, there is quite a large number of concepts that they need to learn: variables and constants, expressions, operators, value types and reference types, conditionals, loop constructs, enums, arrays, strings, structs, classes, interfaces, etc. If one doesn't master these concepts, they are not gonna grasp delegates, events, LINQ, etc. That's why I have separated the latter into the advanced category and I'm also releasing another course where I cover the fundamentals. This is purely my personal preference of structuring the c# language concepts. One may combine all these into one course, but I believe in smaller and more focused courses (single responsibility principle) as opposed to a large heavy course (god object). People tend to complete smaller books and courses more often than heavy 900-page books or 20-hour video courses. So my course is about advanced c# language constructs and not design patterns. Advanced c# doesn't mean design patterns or unit testing or ASP.NET MVC! It's purely advanced c# constructs! Plus, design patterns got nothing to do with c# either! That's a totally separate topic. One can implement design patterns (GoF design patterns more specifically) with any object-oriented programming languages. To do that, they need a deep understanding of their preferred programming language constructs, and that's where my c# advanced course comes into the picture. 
We compile with All Warnings as Errors for the project, so it was effectively the same thing. But being explicit would be better. Learned something new myself.
Besides the ones already mentioned, you might sometimes also have to use the [**STAThread**](http://msdn.microsoft.com/en-us/library/system.stathreadattribute%28v=vs.110%29.aspx) attribute (above the 'Main' method of the program). This specifies that your program should use single-threaded apartment mode (instead of the default, multithreaded) to communicate with COM components. Most often you'll see this when writing Windows Forms applications, which require a single-threaded apartment mode to communicate with useful Windows features like the clipboard, drag-and-drop functionality, and dialogs. It's possible to write a Windows Forms application without including the STAThread attribute if you don't make use of those features that require it, but [it's not recommended](http://blogs.msdn.com/b/jfoscoding/archive/2005/04/07/406341.aspx) and weird stuff will probably happen if you exclude it. In essence though, you need this attribute at your entry point whenever you want to communicate with COM components that use STA.
I don't use many of the built ins outside of the MVC pipeline attributes and Flags. I've been making heavy use of PostSharp aspects lately though, which are implemented via attributes that provide binding sites for code to be injected during post-compilation IL Weaving. I've built whole modules (performance/system status monitoring, diffable auditing) out of PostSharp aspects that require nothing but an attribute to be tagged into a few strategic places
Do it. C#6 is pretty stable. My last job (last month) didn't want me using vs 2013, it was too cutting edge. It's been out for over a year! They were still using web forms, blah! My best job wants to build mvc6. I'm a guy who uses betas and nightlies. While its true caution should be taken, I see no reason not to use it. People who are scared of software upgrades, tend not to truly understand software and what can actually break with the changes. I once changed a true to a false and they wanted a full regression test. It was stupid, I knew that change wouldn't break anything. I was ignoring the browsers request for cache updates using a bcl method. But they don't understand how things work and what it can break. Needless to say, I stopped conforming to clients legacy tendencies. I choose clients and employers that fit with my believes. The industry is moving faster. If you're not on the new thing every year, you're being left behind
I guess you have a point. There maybe some benefit to doing it this way. The question I would ask is, is it worth building a major piece of software on a beta tech, even if your project is going to be done after the tech reaches full maturity? I can see it maybe worth waiting until the C# 6.0 issues are all are hammered out. I would hate to work on a large project hampered by issues stemming from issues caused by C# 6.0. Imagine coming across a C# bug that completely stops or seriously effects development. You have developers sitting around, being paid, trying to fix an issue they normal would not have had. It really comes down to if you want and can afford to take the risk.
Think of a lambda as a way of emitting a series of IL instructions and storing them in an object. When you create a lambda which contains `Console.WriteLine(i);`, what it's actually doing is emitting an instruction that pushes the internal ID of the local variable `i` onto the evaluation stack, then another instruction which calls `[mscorlib]System.Console::WriteLine(Int32)`. This creation of a lambda occurs on the first loop, but the lambda is not *executed* on the first loop. After the first loop finishes, the `i` variable contains 5. Whereas `i` is scoped to the loop in terms of what you'd expect from C# code, IL doesn't hold such a distinction and just scopes all locals to the method. The scope limitation for locals within elements of a method is artificially enforced by the compiler. Since the compiler doesn't enforce scope in lambdas (at least in this case), the code is considered valid, and the IL can reference the local without problems. The lambdas we created earlier are executed within the second loop. They reference the `i` local, which contains the value 5, and therefore prints five lots of 5. The important distinction here is *capture*. The code shown doesn't capture the value of `i`, but rather the reference to the local variable. If the lambda took a parameter (e.g. `(n) =&gt; Console.WriteLine(n);`) then the value of `i` can be captured into `n` when the lambda is executed.
The null check isn't called because the yielded `IEnumerable` is never iterated against. Think of it like wrapping the whole method in a lambda, such that the lambda is called when `IEnumerable.Next()` is triggered. If the `IEnumerable` is never enumerated, then the lambda expression is never executed, hence the lack of exception.
&gt; While its true caution should be taken, I see no reason not to use it. How about utilizing new features that don't actually end up in the release. Or having technical difficulties in unsupported beta code. How about permanently messing up your windows installation on your dev box because the beta you installed won't uninstall properly. Those are all pretty big reasons right there. 
If you are just doing portfolio stuff and things of that nature then go for it. I would avoid 2015 and C#6 for production or user-facing code until after it's left preview stages, though.
Right, that's my understanding as well. But what's driving me nuts is if it's not referencing the int until the execution then that int should be out of scope by then. Meaning this is some kind of trick to reference a variable out of scope.
Thank you very much. Mind.blown.
Woo! I got em all.
&gt; So using C# 6 would not be OK for freelancing work, right? Depends on the nature of your work. As others have said, using unreleased anything in production is generally a bad idea. If you're not giving the client any source code then you could probably get away with it as the underlying MSIL is no different. If you're giving them the source code, then chances are they'd have requirements of their own you'll have to meet. You might end up targeting an older .net framework, for example. That shouldn't stop you from using C# 6 but it's something to consider.
As someone still using VS2010 and being somewhat upset about having to move to 2013: Yes, sure, C# 6 has some nice new features, making for cleaner code, etc. But at the end of the day, do you *need* it? Probably not, so I'd suggest sticking with 5 until it's been out for a bit and receives a bit wider adoption. Because in the end, your job is to create quality software that's maintainable. You can do that with any language, so stop being lazy and get on with it; 6.0 may be a nice help, but it's not going to be a day and night difference. If I were tasked with cleaning up your mess and found out I had to install a preview version of VS to get your shit to compile, there would be some pretty rude words said about you!
&gt; still using VS2010 and being somewhat upset about having to move to 2013 Why is that? I can't think of any way in which 2010 is better than 2013.
There were some popular 3rd party extensions to VS that didn't make the transition from 2010 to 2013 gracefully. Never ran into them myself.
Could someone pretty please ELI5 why would someone use something other than Visual Studio on Windows? What are the benefits of switching to a different IDE. Thank you very much.
Personally for a task like this, I would at least put the research in to be able to find and read the hash manually. If the hash is all you end up needing, that's that.
Be careful not to end up in this situation: http://stackoverflow.com/questions/27449854/moving-away-from-primary-constructors
Well maybe you want every programming language and platform you work on to be hackable in the same tooling. So VI or Emacs or Sublime would be a good choice, perhaps. 
SED
&gt; How about utilizing new features that don't actually end up in the release. Not going to happen at this point, they are prepping for release. It's not an early Alpha anymore... However this is tragic. http://stackoverflow.com/questions/27449854/moving-away-from-primary-constructors &gt; Or having technical difficulties in unsupported beta code. C# 6 is all compiler related. The code he writes won't have some weird issues. He might have some IDE trouble, but VS2013 can give you problems too. Again he isn't writing a business application, so this is a low risk if something breaks, usually it can be fixed. &gt;How about permanently messing up your windows installation on your dev box because the beta you installed won't uninstall properly. Install it in a VM if that's such a concern. My machine won't install Win Updates anymore, I don't have 2015 installed either, some update last month broke dism. Your machine can get hosed by almost anything. I don't see that has a big reason not to do this. To each their own, some of us like living on the bleeding edge and personally I update NuGet packages, .NET updates, etc without second thought. Haven't run into an issue yet. Again, I don't do that for an employer, but for myself I do. The biggest change in 2015 isn't C# 6. It's the solution files. If you want to use 2015, you do so presuming you won't ever downgrade. If he can do that, then I see no real issues besides 'this MIGHT happen'. Microsoft software is a bit better than it was 10 years ago ;)
Color theme editor: https://visualstudiogallery.msdn.microsoft.com/20cd93a2-c435-4d00-a797-499f16402378 Title case menus instructions: http://blogs.msdn.com/b/zainnab/archive/2013/08/21/visual-studio-2013-turn-off-the-uppercase-menu.aspx What else you got?
Which should be totally fine anyways, since lots of displays don't refresh faster, meaning everything above would be wasted.
Route in MVC and WebAPI.
You could probably do worse than [Noda Time](http://nodatime.org/). Jon Skeet is one of the major contributors. He uses Noda Time code as examples in several of his lectures and blog posts. There's also the [.NET Framework](http://referencesource.microsoft.com/) itself of course. 
i'd say look at a library thats easy to understand what it does... log4net or one of the other logging libraries? Maybe Dapper for something a bit more complex.
If you want to try it out, someone has forked ServiceStack and put binaries up on Nuget. I'll let you look around for it. I would recommend you only use that fork as an extended trial. When you pay for the ServiceStack license, what you are really getting is customer support from Demis, the creator. It's always nice to be able to fire off an email to the creator of the framework and get an answer back very quickly.
Yeah but they are very complex projects I wouldn't be able to understand haha :)
Inertia? A hilarious hate for anything even remotely related to MS' post-Win7 style (you know, flatter than flat with blocks of colour dabbed here and there)? Perhaps the realization that I'd like to spend more time *writing code* than fussing about my IDE?
Samples, not a library, but provide them.
Even in 2010 (and other IDEs) I spend time setting things up the way I like, then I'm done forever. Just keep in mind that you're capping yourself at framework 4.0 
Not really. You can use the [Ref12 Extension](https://visualstudiogallery.msdn.microsoft.com/f89b27c5-7d7b-4059-adde-7ccc709fa86e), then when you see some internal .NET library, just F12 away. Oh the String thingy, wonder how they work? F12, Generic List, how does it handle adding and removing stuff, F12, Dictionary, how it retrieve and store stuff so fast, F12. The big bonus is you know these stuff are reasonably fast and general enough to handle whatever we throw at them.
Take a look here http://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqlcommand.parameters.aspx
The technically-correct answer is that you should use [query parameters](http://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqlcommand.parameters%28v=vs.110%29.aspx) for this. But, if thisID is an integer, your query isn't really dangerous. The reason it would be unsafe is if thisID is a string where users can change that value to perform a [sql injection](http://en.wikipedia.org/wiki/SQL_injection) attack. If it's an integer, there's really no attack vector. Though I will say, if it's a desktop app connecting directly to a database, then the more important attack (IMHO) is that you've probably got your DB connection info in the config file? The person could take that info out of your config file and simply connect directly to your database through SSMS if they wanted to do something malicious.
Using query parameters is still better in this case because SQL Server will cache the query plan instead of compiling a query plan each time the query is run, leading to better performance. Always using query parameters is a good habit to get into. OP should consider using [Dapper](https://github.com/StackExchange/dapper-dot-net) when using SQL. It's easier to work with than DataAdapters, CommandBuilders, SqlParameters, etc.
Thanks. I'm not using the config file for the DB connection string. I've got it in each .cs file, which I thought was amateurish of me.
Yeah, Dapper is good stuff... It's nice to understand SQL Parameters at a base level, but once you have a basic grasp on that, I'd move quickly towards Dapper and never look back. The thin layer of simplification it gives you in mapping values to/from a database have an extreme effect on productivity.
If this is an application for end users then you should never connect directly to a database from it, but instead setup a webapi for it to talk to. It is very simple to extract strings from a .net application. Let the webapi talk to the db for the end users. You can then add some simple authentication and rbac, to the webapi, pass around the userprinciple, add a log filter and have basic security baked into everything that the end users have access to do.
Whatever the problem is, that code doesn't show it. 
I'll check that out, thank you! Is it fairly uncommon to handle API keys this way in c#?
First thing I did when I woke up was work on my project lol
It's not just playing with the culture, you can exit any query with the right string from the ui. Best to avoid it all and just parameterized it. And you get the performance benefits when reusing the query too!
My 2 advices' 1. Use linq to SQL 2. If you don't like 1 then wrap the query in a store procedure and call the SP. 
I disagree on his restrictions on use of var and dynamic. Var makes code MORE readable and amenable to change IMO and dynamic can enable some cool things, for instance SignalR and user-customizable web sites without having to define new types all over. It can also help when creating certain interfaces, say an adapter for a chat bot to different chat providers (irc, hipchat, slack, xmmp, etc.) Where each adapter supports some number of message options but are only exposed to consumer code via interfaces.
It is so uncommon that I have never heard of it before. If you have a client side service, then it should acquire the relevant keys, which should be limited and have an expiration date, from a web service. Web services can put them in an app.config (there are other ways), but when you commit to a public repo, you should replace it with something along the lines of PUT YOUR OWN HERE!. That or the most appropriate development only key you know of.
Obligatory post... http://xkcd.com/327/
[Image](http://imgs.xkcd.com/comics/exploits_of_a_mom.png) **Title:** Exploits of a Mom **Title-text:** Her daughter is named Help I'm trapped in a driver's license factory. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php?title=327#Explanation) **Stats:** This comic has been referenced 492 times, representing 1.0696% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_cnbvu5c)
http://stackoverflow.com/a/5615697/476309
I googled it and got similar answers but I'm interested in getting the % sign into my database. c# decimal type formats don't work in sql database. 
Also, there is differences in parameter format depending on the data source. With MS SQL/CE: command.CommandText = "Select * from tblUsers WHERE UserID = @id"; command.Parameters.AddWithValue("@id", id); but with OLE DB/ODBC you would do "WHERE UserID = ?". When adding the parameters, you need to add them in the order in which the positional markers (?) appear, if you have more than one parameter (example. 'WHERE SomeThing&gt;? AND Visible=?'). With named parametes (@id) it doesn't matter. http://msdn.microsoft.com/en-us/library/yy6y35y8.aspx &gt;Working with Parameter Placeholders &gt;The syntax for parameter placeholders depends on the data source. The .NET Framework data providers handle naming and specifying parameters and parameter placeholders differently. This syntax is customized to a specific data source, as described in the following table. * System.Data.SqlClient: Uses named parameters in the format @parametername. * System.Data.OleDb: Uses positional parameter markers indicated by a question mark (?). * System.Data.Odbc: Uses positional parameter markers indicated by a question mark (?). * System.Data.OracleClient: Uses named parameters in the format :parmname (or parmname). 
A true fraction is a number that is limited to the 1-0 range. If it is valid for you to have values larger then 100% then any fraction is ok.
http://stackoverflow.com/questions/120083/how-do-i-alter-the-precision-of-a-decimal-column-in-sql-server This should do what you need
And it is abstraction you don't need. You simply cannot abstract something so complex as data access and data sources change extremely rarely. It is better to abstract individual queries and commands than the data source.
There tons of ways to achieve this, the two easiest ways would be with a Grid, like you said. Or you could use nested Stackpanels to achieve the stacking. But you should also think about how you want rescaling to work, and how you want to handle long, maybe even multi line values. How you want to handle that should be key in deciding what layout elements you want to use. Also, you should read into Data Templates (http://msdn.microsoft.com/en-us/library/ms745683%28v=vs.110%29.aspx) they are incredibly useful when it comes to binding Models or Viemodels to the UI.
&gt;Use linq to SQL I thought that wasn't supported any more. Although I understand it still works. &gt;If you don't like 1 then wrap the query in a store procedure and call the SP. I'll have a look at that. I'll just have to do a Google on how to call the SP from C#. Thanks.
Well, if you have a generic repository, you can easily replace the data source by creating a new implementation and injecting that instead of the old one and everything that uses the repository doesn't even have to know about that. That is what I meant by abstracting away the data source. The repository becomes the data source as far as all of the other classes are concerned. Also, you can have a lot of different generic repository implementations that support different data sources. You might even be able to switch from MSSQL to carrier pigeons at runtime :D Also unit testing is another reason to use the generic repository pattern. 
With the new K runtime thingo, you don't have to worry about .csproj files no more if you don't want to!
I agree. `List&lt;int&gt; listOfInt = new List&lt;int&gt;()` is just typing the same information three times. It is not more readable it just adds a lot of noise to the code.
Well I wasn't talking specifically about OP's implementation. I personally don't like the repository returning IQueriable since that kinda defeats the purpose of the abstraction. I think it is better to return ICollection or IEnumerable. What other leaks are there? I am also using this pattern in a project and I want to know a bit more. I still have time to switch if you can convince me.
I second that. Though i do find it useful, it does get in the way by enforcing coding styles, which are just a matter of personal preference. And if i I don't listen to it, it will torture my eyes with squiggly lines. It also changes the much better default intellisense. Back to the main question, why I find it useful: * It helps write code faster by automatic code generation (e.g converting loops to LINQ, writing GetHashCode &amp; Equals etc) * It helps you find potential bugs. E.g It will highlight possible null reference exceptions, that you may have missed. * Additionally it also helps you find performance implications for some code. E.g if you are enumerating multiple times, and enumerator has to run heavy code each time, it will tell you. * Quickly go to Implementation (for interfaces) and find usages (slightly better than VS) * Finding redundant code and namespaces.
Thanks.
Hey I just did this for the first time in Python a few months ago. So the best way I've found to do this depends on how much data you have to send and how often. If it's a fairly low load I've found that wrapping the data in JSON and sending it over a string to be a fairly good way of doing it. I wrote a simple container for the data like so (please ignore shitty coding style): class Header: def __init__(self, clientID, reqtype): self.clientID = clientID self.reqtype = reqtype def getClientID(self): return self.clientID def getReqType(self): return self.reqtype def toString(self): return "{\"clientID\" : \"" + str(self.clientID) + "\", \"reqtype\" : \"" + self.reqtype + "\"}" class DataFrame: def __init__(self, header, d = {}): self.dict = d self.header = header def toString(self): string = "{" if len(self.dict) &gt; 0: for key in self.dict: if type(self.dict[key]) == list: string += "\"" + str(key) + "\" : " + str(self.dict[key]) + "," else: string += "\"" + str(key) + "\" : \"" + str(self.dict[key]) + "\"," string = string[0:-1] string += "}" return "{\"header\" : " + self.header.toString() + ", \"data\" : " + string + "}" And whenever I want to send data, I create a DataFrame object, pass it in a Header object and a dictionary containing key:value corresponding to the data I want to send. I made this for a game, so an example would be: socket.send(DataFrame(Header("ConnectToGame", "1"), {playerID: 1, gameID: 25}).toString()) This one line creates the objects, converts it to a string for sending it over a socket, and sends it. On the server side, the server would recreate the data from the JSON sent. In the above example, the client would send exactly this string: "{header: {clientID: 1, reqtype: 'ConnectToGame'}, data: {playerID: 1, gameID: 25}}" Which has all the data the server needs. I then parse it for the "reqtype" string and do the operations necessary on the server based on that (This is where you would do the SQL functions) It might be worth it to include a "framesize" variable in the Header if you are sending larger amounts of data so when you create the read buffer on the socket there isn't an overflow.
Yes, using the parameters.add or even addwithValue will protect you from sql injection. (Assuming that the query isn't built with string concatenation that would render that all moot) Here is an example of [that](http://taylorza.blogspot.com/2009/04/sql-injection-are-parameterized-queries.html).
I don't want to be a downer, but this method opens your app up to a large amount of security issues. People can record the data your app is sending, and then craft their own packets to exploit some of the issues. Making a client/server connection is very complex, and you really don't want to recreate the wheel. for python, I would suggest implementing REST using tornado or flask. I don't know the domain you plan on using this app, but I've found that any time there is client server communication, there is always someone who is looking to exploit it. 
How do you plan on resolving which users have which access/update rights?
Thanks, man! I know the way I did it isn't the best, and I'm always looking to improve. That being said wouldn't it be fairly easy to wrap the toString with some sort of encryption and send that over? Or is there still a huge security hole there i'm not thinking of?
Thanks! I never considered the read buffer problem, but I guess if the data is encrypted you don't know how much data is transferred until you get an EOF. Good shit, man. You gave me a lot of stuff to Google.
http://pastebin.com/qcwrNm4Y
it really is not clear what you are attempting are you performing a simple ETL in which case should you not be using SSIS? alternatively as others have mentioned REST, or frankly something as simple as a console app may do. what exactly are you trying to perform? 
In a sense it's similar to a multiplayer chess application with logging, spectator mode.
From one of your comments I saw you want to build a multiplayer application, in that case you might want to take a look at real-time web frameworks such as [SignalR](http://signalr.net/) or [Socket.IO](https://github.com/Automattic/socket.io/wiki). There are numerous other frameworks for this as well, just google for [Real-Time Web Framework](https://www.google.ie/?gws_rd=ssl#q=real+time+web+framework). I can personally vouch for SignalR as I'm currently using it to build a multiplayer web app, the learning curve has been insignificant (for someone that knows ASP.NET), it provides client APIs for almost every major platform you can think of (browsers, .NET clients, Android, iOS via Xamarin etc.), so in case you later want your client to be a web app for example, the communication protocol shouldn't need to change.
I need something that's real time
[There are SIMD libraries for .NET now on NuGet](http://www.nuget.org/packages/System.Numerics.Vectors/1.1.6-beta), just in case you wanted to play with them. ;)
Matlab wasn't really built for speed though. If you want a similar syntax to matlab, take a look at Julia.
Matlab language itself? No. But at least to my recollection, the core concept behind Matlab is to have an interactive environment that wraps some *very* fast Fortran (or C?) matrix and linear algebra libraries. Everything else that's been hung outside of that is considerably slower. So for operating on arrays and matrices it should be pretty sporty, and I recall that being the typical demo given in my early engineering classes. But what was skipped over is, "Oh but by the way, actually parsing the data in or out of the environment might be painfully slow."
*In theory*, yes; however, the entire thing is built on Java, so speed is kind of a false start. However, Java is many times faster than Matlab. Matlab is so terrible it makes Java IO seem fast by comparison! ~~And that's not all, oh no. The Matlab interpreter, its environment, and the code it's running all get a whopping total of 1GB in which to perform; 2 if you set up your environment variables up cleverly. Of course, the JVM can handle much more than this, but Matlab, because it's *only* available as a 32-bit executable, simply cannot comprehend any amount of memory larger than 4GB, and even that it will choke on for some reason unknown to me. By the way, since Matlab offers only one value type -- double -- with no way (that I know of) to adjust it for memory constraints or mathematical precision, I can tell you that that space is enough to comfortably work on about 250,000 numbers at a time. 250,000! Can you imagine a serious engineering application where you could get *any* meaningful calculations done with less than a quarter of a million variables?~~ **[Edit: Boy howdy was I wrong here. This whole passage is pretty embarrassing in light of comments below]** Not that it much matters, since this interpreter wouldn't be able to do any calculations on those values in any reasonable amount of time. In case you were still wondering, no, it's not just IO that's slow -- even the "optimized" math backend is pitifully, painfully, unreasonably bad at the only thing it purports to do. I hate Matlab.
&gt; In theory, yes; however, the entire thing is built on Java, so speed is kind of a false start. I'm under the impression Matlab currently incorporates the LAPACK libraries... so while yes, I could imagine collecting up the input data might be slow... should still be executing the linear algebra math natively through those underlying binaries, no? &gt; Matlab, because it's only available as a 32-bit executable Oh? I have both 32-bit and 64-bit installs of R2013b on my machine (need to sometimes build .NET assemblies 32-bit for compatibility reasons). &gt; I can tell you that that space is enough to comfortably work on about 250,000 numbers at a time. Say we do have only 2 GB to work with. A double is 8 bytes, yes? 2 GB / 8 byte = 250,000,000. And though I've since moved all the code to C#, in the past I'd use Matlab to post process some logged data... 1000 channels for 30 seconds at 100 Hz which is 3 million right there. &gt; I hate Matlab. I've certainly become less enamored with it since learning other languages... but I still like it for a lot of things. Even a slow computation is better than having to re-write existing off-the-shelf libraries.
Anything that lives on a server. Nobody cares if it takes an extra 200 ms to spin up your web service.
A preview is not a release.
Hi OP. Interesting post. I'd also like to point out SIMD is available for .NET. Check out the Yeppp! Library which can run on a wide number of architectures and used from a number of languages. Also the teams at Microsoft have recently been working on SIMD as part of .NET too. 
This is great. Thanks for sharing
I'm confused. I saw something about trying the new C# features online here a while back and it was catch (something) when (condition) but in your link its catch (something) if (condition)... Is it already clear which one is going in production or are they going to be exchangeable? 
It's apples to oranges 
If anyone is wondering, [here](http://www.ahuwanya.net/blog/post/Exploring-C-Sharp-6) is a similar post from a few weeks ago which is also worth a read.
Seems like overkill to me, and I'm not sure about your reasoning for the time complexity analysis. While it's not perfect, I'd go with something more simple that doesn't require you to store a potentially massive list of numbers: private static bool IsFibonacciNumber(int numberToCheck) { if (numberToCheck == 1) { return true; } int fibMinusTwo = 1; int fibCurrent = 1; int fibMinusOne; while (fibCurrent &lt;= numberToCheck) { fibMinusOne = fibCurrent; fibCurrent = fibMinusTwo + fibMinusOne; if (fibCurrent == numberToCheck) { return true; } fibMinusTwo = fibMinusOne; }
How does this online code runner thing work?
Which are both fruit. I prefer oranges.
The list of numbers is not as "potentially massive" as you might think. Only 94 Fibonacci numbers can fit in a 64 bit integer, and only 48 can fit in a 32 bit integer.
Fair point! Still unnecessary though?
This is just the new T() method in IL instead of C# though. You can use expression trees to generate similar IL.
It's worth pointing out that the using new T() in a generic class where T has the "new()" constraint, is the same as using Activator.CreateInstance.
Not sure but I think c++. Its the most cross platform language as of now.
Sql 
It's good to know a functional language, and since you're a C# developer F# is a good choice.
It depends whether you're going in the direct of systems programming or front end programming. I use a heavy combination of C# and JavaScript, both of which are extremely popular. If I wanted to go in the other direction I'd learn C++.
Agree with the Java/Type Script bit, but not really Python. I've been programming all sorts since I was a child (BBC Model B) but I just don't enjoy Python. Also with TypeScript or JavaScript, always, please, read *JavaScript the Good Parts* it's about as big as a pamphlet, and half the issues with JavaScript are because it looks so familiar and people think *nah I don't need to learn this language, I know so many others* but because it's such a minefield in a quagmire people should make extra effort to be careful.
Javascript (along with popular frameworks) probably. It's widely popular for web UI and would give you a wider knowledge base of possible work. 
I'm not sure that F# is really a great option for future employability. If C# goes anywhere it will probably be because the clr went with it, not because everyone decided to jump to F#. Perhaps if everything had to be done functionally, it might make sense, but if that's the case then surely Haskell is what you'd want.
Based on the current project I've been assigned to and can't get away from? VB.Net. Don't EVER tell your employer you know VB.
What do you mean exactly by "secure future". Some people still use COBOL - so one could assume that C# will be used in 2050s. 
If you are a web application developer hedge with Java. The role Java and C# fill as server side languages that can do heavy lifting isn't going away anytime soon. If you know both your skills are very portable as there is a large demand for Java work as well. This is especially important if you are consulting or building custom solutions for large organizations where you are the last person to get a say in the environment. You won't enjoy it, but if you were asking for recommendations of another language that is pleasant to work with, I wouldn't be recommending Java. I would not be concerned about C# having a future. The future is looking especially bright with the recent open source movement and vNext. However, I would be concerned about limiting yourself as an "X developer", where X is any language. 
Thanks for that. Your reply sounds interesting.
Developer of what? In Mechanical engineering I feel like MATLAB and C++ have helped for job security and overall productivity. If it were web development it'd be totally different!
On that note, don't tell them you know SSRS either. I had to leave a job because my SSRS experience made me the 'reports guy'.
Use "" for the empty string. Single quotes need exactly one character between them. '' doesn't make any sense. Try 'A' or 'z' or '%' or '.' instead. 
Xamarin is quite expensive. It's pretty nice though although their start is much slower than the one of Java Android Runtime apps.
I wish my company felt those were as valuable as everyone else seems to. All of our VB is getting moved to C# as requests for changes come in and the SSRS we have seems to be moving to SQR for some reason. 
&gt; I've been programming all sorts since I was a child (BBC Model B) but I just don't enjoy Python. Same. I always feel bad for this, especially since one of the major reasons comes down to the fact that I hate the idea of a language telling me how to indent *even though* I actually indent that way all the time in other languages.
I'll take a moment to explain why I'm downvoting. Basically Python is just another informally specified scripting language, defined by it's (two, incompatible) implementation. It's blub for the 201x era. Learn something that changes you. Learn prolog or scheme or haskell or clojure or smalltalk or lisp or forth or c or factor or joy or ocaml or elixir or something interesting and different. But for god's sake not blub. 
&gt; the basics of Java He already knows C#.
1.) Decompile the VB.net dll to C# 2.) Clean up and compile 3.) Continue to write in C# 3.) Profit
You shouldn't want to learn a language, framework, whatever to secure a future. You should learn them because they excite you, it interests you, it solves a problem for you. Different languages have different benefits. That being said, its pretty easy to spot this trend. Just look at the trend reports from GitHub on languages. You can easily see JavaScript has been sharply increasing, mostly due to Node.js and more SPA type of applications.
You don't need it for SQL Injection protection but you also mention that it does html encoding. Maybe you need it for XSS protection.
I read some of your code. Honestly, that is some of the nicest C# I've seen in a long time. I wish I had a position to hire you for. Except, please don't use magic numbers &gt;for (int v = 1; v &lt; 7; ++v) { &gt; int d = from.Counts[v] - to.Counts[v]; Please use someone like From.Counts.Length instead. It just helps stop bugs in the long run. 
A lot of people here are saying SQL or Javascript, and the rationale behind that is because "everything is going Web-based". While these are useful skills to have now, the entire Web platform is chaotic and fluctuating constantly, knowing the language of the Web (Javascript) doesn't do you much good when the tooling changes every other day. Learning languages is easy, learning tooling, frameworks, techniques is hard. If you really want a language that's going to keep your future secure, go learn **F#**. It's a slow transition, but the enterprise world is coming to realize the productivity, performance and stability benefits that functional languages bring, but I don't see a lot of them dropping their heavy investment in Windows as an application platform either. The problem is, functional programming is such a dramatic leap from the imperative and object-oriented styles we have become accustomed to, if you don't start trying to pick up on them now you may find yourself left in the dust in the not so distant future.
Soul crushing?! It's one of the most straight forward, stable, universal languages of all time... Please explain!
Javascript, as others have said. But note that "security" is an elusive thing for developers. A few years ago a lot of devs were learning PHP, then Ruby or Flash. Some stalwarts learned Java and/or C++, which will be around for a long time. But if you're learning C# and JS, that's great... just be prepared to learn the next new thing that comes along in a few years.
I would say that your program should try to establish connection until it becomes unreasonable. So after 10 reconnect attempts. After that it is up to you. You can have it sit and try another 10 reconnect attempts every x number of minutes or close out of the program. Either way i recommend that it should report to you, in some way that it lost connection (like a message box or console output) and log what the exception was. Maybe throw in some more data in there like sustained connection time was and what time it dropped connection. Those things might help you debug your connection problems (which maybe caused by external factors like network)
YEPPP was really freaking cool, except the fact it was begging for a wrapper to help pack things.
Personally I think a smart choice is to always focus on a server side language, Web language, and database language. For me right know it's C#, angularjs, and entity framework (for use with SQL server)
I think the CLR has a strong future, which means both C# and F# will too. I've been getting into F# recently and I have to say I *love* it. F# seems like a very pragmatic language to use. You get all the beautiful functional features from languages like Haskell, but you don't lose your imperative and OO abilities so you can continue to use your existing .NET API knowledge. It also allows for writing very nice DSLs, which is one of the things that helped to make Ruby so popular among its fans. With such a nice syntax and a strong existing .NET ecosphere, and with things going the way they are with .NET Core and Mono now, I think it's not much of a stretch to see F# become a popular language for web development in a few years. I imagine a beautiful feature where I could write a web server backend in F# on Mac with postgresql as my database, deploy to Linux, use something like Pit or Funscript to compile Javascript from F#, and develop mobile apps in F#.
Things I love about SQL: Tri-valent logic schema (I'm a math nerd) All my work can be done in one procedurally generated line. Seriously, I could teach my 1 yo daughter SQL. Great readability. I guess that's it... There are alternatives, they're just also called SQL.
Yeah, but who has time for that? Step 2 could take hours depending on how it's written. heaven forbid it was a winform.
Wow, that is plain nasty. While it may be at a useful point it is obfuscating the code quite a lot.
Maybe it's just me, but if someone works as a C# developer, I take (basic) SQL knowledge for granted.
I wish it were. It's more difficult than it should be to find people proficient in both.
Learn more about C#. It's a solid language with wide adoption and powers some of the most interesting new technologies. It has a powerhouse company behind it that constantly innovates it, and the productivity tools are amazing. Learn a productivity tool if anything, like Resharper. Learn language-agnostic best practices like design patterns, SOLID, TDD, etc. Those can be applied wherever you go. You've already learned the hard part about programming (logic, flow, mathematics, algorithms, all that good stuff). Learning a new language is mostly a matter of googling "how to do x in y". HTML and javascript are important, it's a web world out there.
It depends on what kind of development you've been doing. If you've been working with ASP.NET, then probably other web things like PHP, JavaScript (although I'd recommend using TypeScript), etc. Possibly Java as well, but for the most part it's extremely similar to C# so you're better off learning what you're going to use in Java prior to applying for something. For just general software or game development, C++ is unfortunately your best bet, and it's definitely something you'll need to spend some time on to get used to if your first/primary language has been C#.
Why F# and not Haskell (which seems far more popular)?
Many enterprises already have a heavy investment in Microsoft infrastructure, and a large amount of legacy .Net code they wish to continue leveraging. F# is the easiest move these companies can make into the functional programming future, as it allows them to leverage their existing investments. Haskell is a great language, it has the most expressive type system I've seen and a great and active community, but unless you are starting from scratch or you work in a shop that has more of a *NIX-friendly attitude you're going to have a lot more luck with F#.
Overall, it looks pretty good. I would consider using more interfaces so you can unit test the code more. Keep in mind static classes static methods are difficult to test. Good job
F# has run on mono since the beginning. You can use NancyFX and the data libraries to build an F# web app right now.
'\0'
Yes, but Mono hasn't been a great performer as a web server so far. Hopefully it will improve, partly through open sourcing of .NET Core and partly through other improvements.
I'll learn IL before I bother with PHP.
MongoDB is a pretty solid non-SQL alternative.
Ditto on String.Empty is better. 
Jane Street Capital is one company that is using nothing but functional (OCaml). I know that some companies use other functional languages as well but Jane Street is the only one that I know of that uses 100%
But that is a library and not part of the language. If you use Java that has built in cross platform.
I consider a language to be "cross-platform" if it can run on any platform given a trivial set of assumptions. For example, Java can run anywhere you can install a JVM - which is everywhere.
I had a short lived stint at a company with a large web services suite (500+ projects in the main solution). Every single code file was once in vb but had been converted to 'c#' using an automated tool. The result was a HUGE redundant mess of spaghetti code with OO principles completely tossed out the window. I mean why even convert to c# if you're not even going to try to use it right. Anyway I applaud your team for at least taking an conversation approach that sounds reasonable instead of choosing the fast and 'easy' route.
That's reasonable, although the equivalent statement for C/C++ would probably be that it can run anywhere so long as you have a compiler and linker that support the target environment, and none of your code relies on platform-specific APIs, quirks or oddities, which is far more strict than Java's "Does it have a JVM?" requirement.
&gt; I still have never seen a real-world example using functional programming. Can you point me to what a single-screen application (with the UI) might look like? Web or desktop? There's a few notable GTK+ applications written in Haskell, including a Haskell IDE, but like everything there's a lot more interesting work going on with web development. &gt; I read quite a bit on Haskell and it's clear it provides a number of functions OOTB but what about APIs for Haskell? Do they exist? Haskell has a package manager called Cabal that is similar to Rubygems, NuGet, Maven, etc. There's a pretty large selection of packages out there, and it's growing fairly rapidly. It's still not up to par with Maven Central or Rubygems because the community is nowhere near as large, but most of what you would likely want is there. &gt; How about a servlet or similar server-side request processing example in functional programming? How about working with images, documents, or really any content at all in functional programming? I'm curious to see actual, real-world examples. Haskell has a low-level API called WAI, or Web Application Interface, which is similar to Ruby's Rack or the Java Servlet specification. It defines a low-level interface to which applications can be written and then deployed with different adapters (FastCGI, an embedded HTTP server, etc). You probably wouldn't want to work with this directly, but there's quite a few higher level web frameworks available, namely Yesod and happstack. &gt; but I could whip out a simple client-server web application in Java and JSP in about 30 minutes You are loading the next question, likely inadvertently, but I want to address this quickly before I answer. You can whip out a simple application in Java EE in 30 minutes because you've spent years with the technology; for a long time it'd take me 30 minutes just to get my pom.xml setup with my dependencies and start bootstrapping my project, and I'm sure you weren't much different. Experience makes the different in all things. &gt; Could I do the same in Haskell? You will need to know the language and tools first, but yes, it's entirely possible to throw up a simple application in Haskell in 30 minutes. Just don't expect to do it off the bat, even the beginners tutorial in rails allowed for an entire hour to scaffold a simple CRUD page.
Come up with a project and just do it. The biggest pain with learning a new language, and especially one with a dramatically different paradigm is having a reason to stick with it. If you are just futzing around it's easy to say "that's neat" and quit, when you have a goal and can see milestones along the way it's much easier to see your progress and discover the tools and techniques needed to reach your goals. Maybe you can find a new web project you'd like to try, or maybe there's a class library you use that could use some attention that you could rewrite. The best part about F# is that it's still a CLR language, so you can take your time by writing parts of your solution in it and slowly moving more things over from C# as time goes by.
I'm still trying to get assembly down. 
Oh god, I am in the exact same spot and I don't even know it very well. Still somehow I have become the "reports guy". 
&gt; My understanding is that F# would fall under the Microsoft stack so it probably doesn't make sense for me to dive into at this time. F# and Haskell are both in the same family of languages anyway, the main reason I touted F# was simply because it's compatible with existing Microsoft shops, if you're not in the Microsoft serfdom then go full out with Haskell :)
&gt; •One class per file. No way I'm going to do this for classes like "Sixes" (see PositionEvaluators.cs). That said, I could have put fixed number evaluators and greedy pattern evaluators in separate files. EDIT: &gt; also, I've personally moved away from comments, to Uncle Bob's advice of "good code should read like well written prose". I generally agree. Still, I like to document how the class is meant to be used. This is especially important if there is a "calling protocol", like "cannot call X before Y". This *can* be enforced by having methods return interfaces containing only methods valid to be called on the current object state. Often I feel it's an overkill though. 
Commenting should be more "why" instead of "what" Commenting things like GetNextRandomValue() with // gets the next number in from the random sequence Is pretty much useless, the comment offers no more information, and just adds noise to the code file.
&gt; I read some of your code. Honestly, that is some of the nicest C# I've seen in a long time. Wow. Thanks! &gt; Except, please don't use magic numbers Ya, I agree. Though there was/is a long line of thought behind deciding to use magic numbers.
&gt; Imagine you are reading a code file, I'm not convinced. VS IDE has superb navigation features, so there's no way I'm going to get confused. Creating a dozen files, each with a 5-line definition each written according to the same "template" is totally pointless and makes it very impractical to navigate around. 
&gt;VS IDE has superb navigation features, so there's no way I'm going to get confused. Give it a few years, and working on a team with multiple developers :)
You can make the setter private (initialise it in constructor) and the collection of type ObservableCollection&lt;Customer&gt; which can then be observed in class which holds the reference. This means that consumers can't change the reference to your collection and any change to the collection can then be validated. Sorry if it's a bit light in detail, am happy to expand.
This is a neat idea. Though it doesn't help me find the code that modifies this collection, it solves all the other issues - thanks!
I don't think this would help find the one or two places that modify a collection, amongst the hundreds of places that just read it but your suggestion has given me a quick and dirty idea that would... I could temporarily change the property to be an IEnumerable instead of an ObservableCollection, then find the compile errors.
Don't take my comments about F# as dispersions on the language - it's great, but the CLR limits it a bit (no higher order types/type constructors/type classes/ML Functors). I like F# as well - it has nice notation, and things like FParsec are amazing when compared to writing parsers by hand in C#. My comment regards future employability: I don't think that as a career move learning F# would be the way to go :)
It's a little too verbose if you ask me. C# is much more concise and consistent.
I found this while working on an XSS project. I'm hardening all our code. Conceptually I have a problem with a method called SQLSafe() doing anything XSS related(it currently tries to do both SQL injection and XSS stuff). After reading a lot of blogs, I'm becoming a member of the crowd which says it's a bad idea to save html encoded data to the database. Encoding should be done on output. http://lukeplant.me.uk/blog/posts/why-escape-on-input-is-a-bad-idea/ 
Yes, I am in this camp too after doing it the other way for years. Of course encoding on input does not excuse SQLSafe method that does html encoding and definitely you can do things by encoding on input and this probably reduces the change that you will forget to encode somewhere but you are likely to have quite a few other bugs. In any case my point was that simply removing it may result in an unsecure system if users expected stuff to be encoded and did not encode on output. If you remove it you will need to go through all the places where data is output and ensure it is encoded.
Makes sense. I hope that changes, but as things stand right now I think you're right.
This is supposed to be the standard pattern for collection properties in C#, but far too few developers know about it. 
I generally opt for choking anyone that puts more than one class in a file. That "superb navigation" doesn't mean jack when you're rushing to find a problem and one simple keystroke can mean you miss a declaration.
So I guess more specifically my problem is this: I have 2 types of projects, 1. Work Projects and 2. Home Projects. As we all know, home projects have a way of kinda falling by the wayside while work projects must be completed and its tougher to take a gamble on a new language. Especially when I'm not sure of what F# can accomplish. 90% of what I do is MVC or writing small apps to interact with our database. I also want to incorporate but I wonder where it has use in my life and where it benefits me over C#. Maybe this is just a pointless train of though but I'm really looking for a reason to dig my hooks into F# and I just can't rationalize it beyond "it's good for your future"
It's good for your present too. F# tends to be much clearer and more concise than other CLR languages, and discouraging side effects leads to more probably correct (less buggy) code. Try using it in your business layer if you can, that's where you'd see the most benefit trying to retrofit an existing workflow.
Read the .NET Framework Design Guidelines, it's full of good stuff.
Best case scenario you have Stockholm Syndrome.
Cool it's very very similar to how [KoaJS](http://koajs.com/) handles middleware.
Damn i love your articles! Well written and a nice introduction to a subject I've been looking for a nice overview of. Keep up the good work! 
VB6/VBscript, YUCK! (We have a large amount of VB6/Asp classic legacy code, written by non-programmers from when the company was young...)
It would help you if you labelled your chart better. Conditions labelled 'I3' really don't help us understand the meaning of the chart. Model the gate closing as a constantly re-evaluating loop with conditional branches (after all, that's how it'll be implemented) - see [this image](http://upload.wikimedia.org/wikipedia/commons/a/a6/Graf7_03.png) from [this french wikipedia page on grafcet](http://translate.google.com/translate?hl=en&amp;sl=fr&amp;u=http://fr.wikipedia.org/wiki/Grafcet&amp;prev=search). LOOP: is light barrier broken? yes: open gate goto EXIT-LOOP no: is gate closed? yes: goto EXIT-LOOP no: continue closing gate goto LOOP EXIT-LOOP Also, this i **really** off-topic for this subreddit. Don't you have better resources for this sort of material, like your classmates, teachers, reference material, etc? 
First of all, thank you for posting! I know this was very off topic, but I was really desperate and I didnt know where else to post (It is a very niche topic). We had this topic in class for like 2 hours and we never had discussed anything except that there is a main loop, we have conditions to proceed to the next step and the steps in itself. It may be that our teacher just forgot, that we never actually discussed this. As for I3 it is just Input3. (It would make sense in my description, but it is in german and it would take a while to translate) I will try to add this in the chart. Thanks very much again!!
I had not heard this (about OWIN/Katana being replaced. Source? I thought is was going to be there, but that the implementation maight be a little different. Damn. I guess there is THIS: https://lbadri.wordpress.com/2014/11/01/asp-net-vnext-middleware-versus-owinkatana-middleware/ UPDATE: [This post](http://blogs.msdn.com/b/webdev/archive/2014/11/14/katana-asp-net-5-and-bridging-the-gap.aspx) clears things up. Looks like Katana has been fully integrated into vNext, and the implementation may change a bit, but the pipeline/middleware construction concepts remain valid (and even more important to understand, going forward). 
Thanks!
Isn't OWIN the very reason that vNext ASP.NET 5 code can run under IIS, Kestrel, and self hosting environments? I was under the impression that OWIN defined the interfaces that allowed vNext to become IIS agnostic.
I've used experimental mono builds - I can vouch that buggy JIT compilers are lots of fun
OK. forgive me for misleading but I should have said more specifically KATANA. http://stackoverflow.com/questions/20524060/how-to-explain-katana-and-owin-in-simple-words-and-uses
If your requirements demand any sort of user level security (one user should not see another users data without logging in), it is never a good idea to pass userId as you have rightly decided. As to your last question, I would still not pass the userid in the url but rather figure it out from the identity framework as to who has logged in (I am assuming you are using cookies or tokens). I designed an application which needed user level security and loggin in using oAuth Tokens and WEB API and it works fine. We even ended up plugging token expiry logic into the OWIN pipeline so that we can expire tokens (oAuth does not support sliding expiration)
If I understand correctly, yes. Katana is integrated fully into ASP.NET 5. Some of the implementation details change a little, but all of the primary concepts apply. 
&gt; and one simple keystroke can mean you miss a declaration Are you using Notepad to program or do you use VS as a way more expensive Notepad?
The only difference between starting the application directly from the Windows Explorer and by using a shortcut is the **working directory**. When you use relative paths in your application they are always relative to the working directory, not relative to the executable. Check if you have somewhere relative paths.
Add basic auth module, then add an [Authorize] tag to the function in question asking them to login in for that function then use the username to pass to your sp or configure response or boot them out?
&gt; Really the same kind of rules of thumb as auto in C++. Because the keywords do exactly the same. It's a matter of taste, really. I use var always (unless not possible).
Application.StartupPath.ToString() I'd say is the issue, wherever you start your exe might not be near your mdf file? So it can't talk to it. 
I just tried starting the app after putting the method call in the this: public DisplayStartForm() It started much more quickly (less than 10 seconds), i.e. with it reading the values from the database table
&gt; I assume you weren't aware of the syntax change from using System.Math; to using static System.Math; I didn't know about that either; where was it mentioned? The "language features" page still features the old syntax.
I'm actually not really sure... I got it from a guy on twitter who's part of the Resharper team. He starts his mornings by going over the latest Roslyn commits.
https://www.google.co.uk/#q=c%23+asp+mvc+sql+tutorial Yields: http://www.asp.net/mvc/overview/getting-started/introduction/creating-a-connection-string http://www.asp.net/mvc/overview/older-versions-1/models-(data)/creating-model-classes-with-linq-to-sql-cs http://www.w3schools.com/aspnet/mvc_app.asp 
Same here, it is a nice way to do simple mappings (which don't really require configuration), but once you get to something interesting you probably shouldn't be using it.
I have no idea what this question means. Variables are just blocks of memory local to a program. Are you asking how to do a POST to a PHP form, with values supplied by your program? 
Yup. If you are just starting out I will recommend the [Cooking With Unity](https://www.youtube.com/playlist?list=PLlHjNcdoyw6UK30xrTUhjM-usQOOE5jhN) That's how I got started with Unity.
That's some grade A humbleness. 
"have you come across any online?": github.com and codeplex.com. As far as creating your own, you appear to be doing it right. Extracting libraries from an existing codebase and refactoring to make it more reusable is a lot better than trying to create a reusable library from requirements.
In addition to SO, they have their own Q&amp;A site that's generally worth checking: http://answers.unity3d.com/index.html
Yes, but often they end up a fully-fledged projects instead of just snippets (like my project for cross-platform path manipulation). When I'm working on other projects, sometimes I'll think "gosh, I wish it was easier to do X in C#" and then I'll take a break to write a library for it. Of course, no one but me ever uses them ;)
Is is possible to participate in a simple open source project without much knowledge? I mean, understanding the language syntax but without real programming experience, aiming to acquire that? I'm new to programming, read tutorials and did some exercises, but i feel i'm stuck and don't know how to keep moving forward.
Maybe the file is in use by another process?
I'd get my ass handed to me if I used 3rd party libraries without going through a full software requisition process which is unlikely to be approved and the chances of getting it if it's free and open source are almost zero... My employers have a phobia of open source. 
Seriously. "Upload variables" could mean just about anything.
If you ever have a file that ant be deleted, look up unlocked, but I'm guessing this is something you're trying to script?
There's a book I'm reading to learn it at the moment. "Learning C# Programming With Unity 3D" It's by Alex Okita, and he's welcome to people pirating it, but you know buy off amazon if you can. Also has the assets tutorials for free on github with a link to them so you can follow along easily. :D It's proving very helpful, and it's great to have a book to come back to later to remember that little bit of script and how it worked.
&gt; I found that because of the nature of my work a lot of my programs had a lot of similar code so I've decided to make a class file which I import into all new projects. A point of good software development even outside of making some common Utilities library. Any time you feel like you're copy/pasting or doing the same thing over and over... it should just *feel wrong.* Opportunity for refactoring.
The problem has come back again. Now I'm getting this error message: "Visual Studio Just-In-Time Debugger" "An unhandled Microsoft .NET Framework Exception occured..." [8744]. I'll look at Application.StartupPath.ToString() as you suggest.
Have you double checked the permissions?
The exe file and the mdf file are in the same folder. But I'll look at your suggestion.
I tried increasing the timeout in the connection string (stored in the startup form) from 30 to 120. It started with no error messages and it took over 90 seconds to start. Increasing the timeout seems like a dirty fix though. But could that mean I don't have enough memory in my laptop? Its running Windows 8.1 in 4 gig of memory and the memory usage after a fresh boot is 51%. I'll look at other ways of setting my path, as suggested by mynoduesp and nemec. I'm using the Service-Based database in Visual Studio Community 2013.
Yup! I use my utilities class all the time, I haven't updated it in a while though. It covers basic stuff I use a lot, most of it is very simple. * Dynamic Property * Enum Utilities * FileStream Save * IQueryableSearch * String Conversions [naspinski.utilities](https://www.nuget.org/packages/Naspinski.Utilities) [documentation](https://naspinski.codeplex.com/documentation) 
"Service-based database" isn't a thing.
http://msdn.microsoft.com/en-us/library/ms233763.aspx That links describes how to add a service-based database.
You should really dispose of your SerialPort instance, as it inherits from IDiposable
Your question is not appropriate for the C# **language** subreddit and as such has been removed. I encourage you however to check out /r/learnprogramming and to read their [guidelines for asking questions](http://www.reddit.com/r/learnprogramming/wiki/index#toc_1) (along with the content in their sidebar) and post your question there. To give you a bit of a pointer, ComboBoxes have an [`Items`](http://msdn.microsoft.com/en-us/library/system.windows.forms.combobox.items%28v=vs.110%29.aspx) collection that you can iterate on and find the number of matches. Furthermore you can listen to the ComboBox's [`OnSelectedItemChanged`](http://msdn.microsoft.com/en-us/library/system.windows.forms.combobox.onselecteditemchanged%28v=vs.110%29.aspx) event to update the label. (note that I've linked you to the WinForms version of a ComboBox; you didn't specify what environment you're in, but the ComboBoxes from each one behave similarly with similar members)
You can also publish to a local directory and reference that as a nugget repository.
Yes - though you have to call the stored procedure from CSharp. Have you considered NHibernate or Entity Framework - since that would provide an nice Object-oriented abstraction for your C# code to work with?
Would I get better performance by calling a stored procedure from C# rather than doing the query from C# itself? I've heard of NHibernate but I haven't tried it. I have tried the Entity Framework but I couldn't get it to insert properly when I had join tables. I kept getting repeated entries in one table. Plus I couldn't get it to speed up without causing errors. I tried looking at articles by Julie Lerman but she didn't seem to have one that dealt with inserting into databases that have join tables.
LocalDB is only for development. It only works when you're running your application from Visual Studio. Just FYI.
I would go with a Web API rather than WCF simply because WCF is so unwieldy. You could also go with direct sockets but I suspect you're opting for a webservice because it's much easier to work with.
As some one who works with WCF a lot, I concur. As such a person, I still fight with it constantly to behave the way I want it to. It's the next best thing when you need to do things beyond the scope of Web API, but if you don't need to much beyond asking for and submitting data, Web API has a lot less baggage to deal with.
I'd agree... Web API is also really easy to host using the [OWIN Self-Host package](http://www.nuget.org/packages/Microsoft.AspNet.WebApi.OwinSelfHost)
What the other posters have said is true, but if you mean what I think you mean, the easiest answer is probably to have your program (whatever you want to do the "uploading") give the "variables" as URL parameters to your PHP site. For example, if your PHP script is at http://fakesite.com/blarg.php, have your C# app open the browser to http://fakesite.com/blarg.php?var1name=var1value&amp;var2name=var2value&amp;var3name=var3value Note that the PHP website won't retain the variables for other users -- they'll only have those values when the site is loaded with those URL parameters. If you need to do something like upload some text to the PHP site which will then be displayed to all users visiting the site, you'll need to do something else, like one of /u/foamz's options.
Have you thought about using SignalR? If you need more details, let me know what kinds of communication you need to send back/forth and I'll be happy to expand a bit! :)
I did not know that LocalDB was also known as "service-based database". Sorry about that.
Ok. Should I use something like SQLite then?
Did you include Game1 in your cells file? Are they in the same namespace? I have more questions, but they're mainly about style choice over actual implementation. 
You are referring to the `CellSize` property of the `Game1` class, instead of referring to `CellSize` of a `Game1` object instance. You can only refer to static properties this way (not recommended in this case). You probably have to dive a little bit deeper into object oriented programming to learn the difference. Here's a link to get you started: [http://www.tutorialspoint.com/csharp/csharp_classes.htm](http://www.tutorialspoint.com/csharp/csharp_classes.htm). After that, there are a lot of links in the sidebar that can help you out.
So, I don't see anywhere in your Cells class that actually declares an instance of the Game1 class. If that's the case, the way you are trying to access 'CellSize' on the Game1 class is as though it is a STATIC member of that class. In order to access public members that aren't static, you need to either pass in an instance of Game1 or create a new one in your Cells class. I hope that helps!
What you're asking is **way** too vague for us to answer. If you don't even have a clue on how to start with something like this in c#, I suggest you drop the idea and learn some more about c# in general. Maybe start with something easier like Game Maker or something like that. I don't know if game maker is still around or anything, but if you can't even get started with this on your own there's no point to continue.
Check out this video: http://www.gamefromscratch.com/post/2015/01/06/LibGDX-Video-Tutorial-Scene2D-Actors-and-Actions.aspx
you're right, I dont know what I was thinking (I wasnt apparently)...could you please look at [this](http://gamedevelopment.tutsplus.com/tutorials/creating-life-conways-game-of-life--gamedev-558), the first bit of code. in the constructor of the Cells class, he called "Game1.CellSize" , Game1" object is not declared in the cell class. where is it declared then?
I know a good amout of C#, I'm just asking for the most effecient ways of drawing and collision detection...
I know how to google but i can't find anything on the questions
Yeah, but this will help you understand the mechanics of what you are trying to do.
If you're using static orbits, I actually have the code written (albeit in JavaScript) on my web site. I can snipe it and send it to you, if you like. It's very easy to convert to C#.
Ummh why not? if you want to of cause
ik
Check out Windows Presentation Foundation 4.5 Cookbook by Pavel Yosifovich. It starts from the very basics of WPF.
Well, for something as simple as a ball you can simply override a form's paint event and draw it in there. And collision detection is merely checking wether a point that is r pixels away from the ball's center "is inside" another shape. Again, "drawing" and "detecting collision" is too vague to answer/google. You want to detect collision with what? Rectangles? Opaque pixels in an image? You want to draw fancy 3D balls or flat 2D ones? GPU accelerated? ... You could look for games like pong, made in C#. There's balls and they bounce of stuff. It could get you started.
Thank you!
You're welcome. 
Rather than setting file attributes to normal, just set it to not read only with a bitwise operation, saves you a step, and if you cared it also preserves other attributes. For example, on a FileInfo: file.Attributes = file.Attributes &amp; ~FileAttributes.ReadOnly
Scrumdumpster
I've been using C# for almost a decade and haven't noticed this 'service-based database' thing before. Then again, I don't remember the last time I've done anything with databases from a C# project. It's usually through SSMS or a database project.
Not sure if you are still looking for a book, but I own this one and I really like it. https://www.google.com/url?sa=t&amp;source=web&amp;rct=j&amp;ei=pemtVPjGN4jboASy54H4Bw&amp;url=http://www.amazon.com/Programming-WPF-Chris-Sells/dp/0596510373&amp;ved=0CBwQFjAA&amp;usg=AFQjCNEUS564892pYODydH4c00lTQt2HNg&amp;sig2=IupvV8EHhAQcaKUpWB1Crg
The Hanselmen. Or ctor
Not all people are in the position to spend fifty dollars on a book we can get for free, friend.
Sharpie_in_my_butt?
I've been looking at IL more lately out of curiosity. Really it seems pretty straightforward.
Seal Wolf Team Alpha Six
I've read about SignalR earlier, but never used it. I thought that was used to return realtime updates to multiple web clients?
The best team name possible would be the "Master Batters" 
&lt;/thread&gt;
Talk to us on Jabbr.net There are a large variety of rooms. https://jabbr.net/#/rooms/general-chat is a good starting place. A lot of it is off-topic, but if you wanna talk code, we're always game! I'm Stachu there.
No *looking around* without registration? 
I've tried to reversing some "security features" of some obfuscated code. It's actually quiet straight forward. 
&gt; Talking about C# by itself tends to be academic for the most part and so you're going to have a much smaller audience. Sure, I know. I just have no interest in web technologies, or enterprise libraries. Much more interested in learning about the CLR, FCL, IL, C#, etc. Apart from occasional blogs (Eric Lippert's is good), books, and searching for things that interest me on Google, there's nothing in any way of a community that's visible to me.
Thanks for the tip, I'll haunt it tonight. Seems a bit like IRC so far.
if there is even a small group perhaps we can get a sub going
What, you mean a pure C# group?
That's a null byte character..
Why are you using a lambda over an abstract (or virtual if you want a default) method that has to be overridden?
That seems kind of cool! I am going to look into it thank you! :D
I was going to call you out on creating a utility class then I actually looked at your code and noticed you use Extension methods, much nicer. 
gang of four
I'm not sure what exactly to call it but something with more a focus on patterns and practices not necessarily married to a deployment or UI platform. Many questions, examples and discussions on implementation often take the use of something like MVC4 or WPF and deployment on IIS as a given and very often implement limited patterns beyond what is established by that framework or API. While this is great for getting an application going quickly it can often be challenging to use out-of-box stuff and get all your best practices in play (such as encapsulation, clean testing, etc). Also perhaps advanced dev topics that dig into using the in-built capabilities of the framework and portable libraries more. I guess something more .NET arch/design based may be what I am thinking. Perhaps we have something that applies or perhaps I am misunderstanding where the interest is. 
RabbitMQ is nice for this multiple language bindings http://www.rabbitmq.com/
Sorry my English isn't the best and I translated it from my native language :/. If I could write it better, I would.
pwned
I am really growing to love this subreddit.
If both are .NET, check out remoting, it is extremely simple to use. 
Can you elaborate on why?
Last time I checked if a string starts with a null byte character it means empty string, unless my memory is fogged. Do you have the answer?
I see. I have never used it, but I've thus far had a lot of great experience with AutoFac. I also consider the XML config a downside after having dealt with XML IoC configs in Java.
It seems like MQ is an extremely useful service that no one uses because no one seems to know what it is.
We used MQSeries at a previous job. What a beast that thing was.
I would use UDP to send a small message to a remote application listening on a specific port. This way you can be on 2 machines if you want.
There is an open security buliten with using .NET remoting...
Did you just post a video that explains how download a file from sourceforge?
I see... As pointed out in the other comment, the lambda actually seems to make it worse in combination with the static constructor.
Well, if you have null-terminated strings, just a null byte should be an empty string (because there's no characters in front of it), but given that you're trying to use it as a character and that it's also kind of part of the string, it's arguably a character too. :) Hope that explanation is understandable \^^
Another option is to read the stdout of another process using [Process.BeginOutputReadLine](http://msdn.microsoft.com/en-us/library/system.diagnostics.process.beginoutputreadline%28v=vs.110%29.aspx) This is super useful when, for instance, you have a third party command prompt based tool that you'd like to utilize for some purpose in your program. It's event driven so no constant polling required either.
I think it's in the video description, but having watched the vid it's like eight lines of code using a webcontrol. It's nothing you could use in a real app since it violates FB's TOS.
[ZeroMQ](http://zeromq.org/) is another simple solution.
I don't think so, but it's been over two years since I looked at it so I could be wrong. I do recall that it starts from basics and is quite easy to read. Personally I lose attention very quickly when reading technical books so the ones that are easily taken in are a real boon.
Much obliged.
This is true in context of allowing inheritance. The author stated (in the article comments) that they would be updating it to discuss sealing the classes and preventing inheritance. Personally, I feel I would _want_ semantic types to be sealed immutable types, treated similarly as structs. But definitely, the use of the static constructor to set the delegate is confusing right now; the article would definitely be improved by clarifying _why_ it was designed the way it was (especially when a virtual/abstract method would be immediately more obvious and familiar to more developers)
Yea, for performance I'd want an actual struct too... No need for "pointer chasing"
Awesome; consider yourself on my RSS feeder :)
No one's your friend, guy.
I don't see how bi-dimensional arrays could be used in what there asking for... enum DonationCategory { Food = 0, Clothes = 1, Medication = 2 } struct CatProduct { public int Weight { get; set; } public int Volume { get; set; } public string Note { get; set; } public DonationCategory[] Category { get; set; } } static void Main(string[] args) { Console.WriteLine("Fancy title here..."); int totalDonations = 0; CatProduct[] catProducts = new CatProduct[500]; for (int i = 0; i &lt; catProducts.Length; i++) { totalDonations++; Console.WriteLine("Please enter donation information."); CatProduct donation = new CatProduct(); donation.Category = new DonationCategory[3]; for (int j = 0; j &lt; donation.Category.Length; j++) { Console.WriteLine("Donation Category {0}:\n Press 1 for Food\tPress 2 for Clothes\tPress 3 for Medication", j); switch (Console.ReadLine()) { case "1": donation.Category[j] = DonationCategory.Food; break; case "2": donation.Category[j] = DonationCategory.Clothes; break; case "3": donation.Category[j] = DonationCategory.Medication; break; } Console.WriteLine("Are there other categories in your donation? Press 1 for YES\tPress 2 for NO"); if (Console.ReadLine() == "2") { break; } } Console.WriteLine("What is the weight of this donation?"); int weight = 0; if (int.TryParse(Console.ReadLine(), out weight)) { donation.Weight = weight; } Console.WriteLine("What is the volume of this donation?"); int volume = 0; if (int.TryParse(Console.ReadLine(), out volume)) { donation.Volume = volume; } Console.WriteLine("Any notes to add?"); donation.Note = Console.ReadLine(); Console.WriteLine("Do you have other donations to make? Press 1 for YES\tPress 2 for NO"); if (Console.ReadLine() == "2") { break; } } Console.WriteLine("You made {0} donations today!", totalDonations); Console.WriteLine("Press ENTER to exit!"); Console.Read(); }
No one has mentioned [SignalR](http://signalr.net/) yet? 
If you are able to get something working, I'd love to hear about it.
I'm not your guy, buddy!
1. Your running your code in a while loop set to true, so it won't stop looping. 2. Every time it runs a new loop your variables are reset to either null or "", so your if statement is also going to be true everytime Suggestions: - Try not running the code in a while loop - Instead of using another string as a conditional statement you can use a Boolean instead, looks a little cleaner. - I'd recommend in your if statement to also check if your reading stream in null or empty before writing it out to another file 
I should have posted it, but I was on mobile. Check out this security bulletin: https://technet.microsoft.com/en-us/library/security/MS14-072 You should be fine if security is enabled. 
Glad you figured it out! You should also be able to use the Aggregate extension to do what you want: var lastDate = Convert.ToDateTime(LastDateInRecord); var newFiles = fileList.SkipWhile(a =&gt; Convert.ToDateTime(a.Key) &lt;= lastDate) .AsEnumerable() .Aggregate(new SortedList&lt;string, string&gt;(), (curr, next) =&gt; curr.Add(next.Key, next.Value));
When I take the UsedData string out of the while-loop I get the error HistoryFile.txt is being used which I didn't used to be getting and when I made UsedData = null, I got object reference not set to an instance of an object. I sort of understand the problem here but am completely clueless how to solve it. But thank you for your quick response!
I'm not your buddy, pal!
You're opening your StreamReader inside the while loop, so you're re-opening the file every time you loop. The data you read will be the same every time. Also, your loop will never end. Try a structure like this: using (StreamReader SR1 = new StreamReader(blah blah blah)) using (StreamWriter SW1 = new StreamWriter(blah blah blah)) { string UsedData = ""; while (!SR1.EndOfStream) { string Data = SR1.ReadLine(); // etc... } }
instead of while(true), try while(!SR1.EndOfStream)
It reminds me of CTEs.
yea, this is the easiest quick solution
I see a few problems. One, the while loop needs to end. You're code is just going to loop infinitely. Two, you need to move SR1, SW1, and UsedData *outside* of the scope of the loop. As it stands, each iteration is going to have two problems: 1) The streamreader is basically resetting every time, so you're basically reading the first line of the file over and over. 2) UsedData is being reinitialized each time, so it'll never contain whatever is in Data. Finally, you want the line: UsedData = Data; To be: UsedData += Data; Or something similar. As you have it now, UsedData is being replaced with Data. You want Data to be appended to it. As an aside, don't forget to actually *do* something in your catch block.
&gt; Earlier it caused me so much trouble because I didn't realize it will only skip until it can't and then it just returns all of the rest. Um, you do know about the Where function, right?
This is probably something best suited for c++ 
Oh well then. Answer OPs question. 
I don't mean to alarm you, but that domain name is the same as your user name. Edit: also, thanks. I've been looking for how to do this for a while.
Yah, the data is fed into the sortedlist from an already sorted state. Until now I never really understood the use of AsEnumerable. Now it makes sense. I still havent come across a problem that needed AsQueryable. Or the parameter IEqualitycomparer. What kind of problems could require using those?
Please give a description about your library, and what kind of help you need. From everyone's point of view, you're just self-promoting. Please edit your post!
Why UDP? I suggested TCP for the additional security, I'm curious if there are any advantages by using UDP? I know it CAN be faster sometimes, but that shouldn't really matter on a local machine. It does not guarantee the right order of the send messages and it does not send a message again, if it get's lost or corrupted on it's way. TCP guarantees both. There are more security aspects to TCP but these are the main ones that normally indicate that TCP is the better choice in many scenarios.
Hi, thanks for the tip and expecially for the blog post! I tried both your suggestions, but I still have some problems: ~~WinUsbNet gives me a TypeLoadException~~ lesson learned: never name your assembly like a required dll. The code from your blog post seems to be missing Win32Hid, is it also a Win8.1 exclusive thing or am I just missing a reference? I'll start experimenting with winusbnet a bit now that it works, thanks! *Edit: winusbnet also seems to require some drivers from windows thata need to be installed. I could not get it to recognize the device
Hi, It seems like your solution might be similar to /u/antiduh 's solution. I'll just give winusbnet a try and when it doesn't work, I'd love to hear about your solution. Thanks!
He did, actually. I too think that this is a great job for C#. After all, I'm not writing a driver, I am building up ontop of an existing one.
I forgot to paste the code. :l Give me a minute. Edit: All done, should be up.
Thanks! So far I didn't have any success though. Do I need to send the setup packet myself? Could you provide some example code that does some control transfers?
It's not inconsistent. It selects the same way every time. The user just has to understand the rules of selection. How is that different from any other system? EDIT: look, it's easy. Downvotes are for when comments don't add to the discussion, it's not an "I don't like this/agree" button. If you disagree show a case where it is "inconsistent." You can't. You downvote because you have a petty approach to dealing with rational argument.
From [here](http://msdn.microsoft.com/en-us/library/jj823172%28v=vs.110%29.aspx): &gt;Use ASP.NET Web API if you are creating and designing new REST-style services. I haven't used WCF much, but my impression is that it is more of an enterprise-oriented framework that allows you to expose your API via different protocols (HTTP, TCP, UDP, etc). Web API is purpose-built for creating REST APIs. I think you're on the right track with your decision to use Web API. With respect to Dapper vs EF, there are a few things to consider. Dapper is, in my opinion, simpler to use than entity framework. What EF is really good at is allowing you to persist deep, hierarchical data structures without having to write a ton of code yourself. Where I work, we use Dapper when we want a quick way to read/write relatively flat data structures, and we use EF where we want to read/write larger, nested structures with child collections and "navigation properties". If the data served up by your API is relatively flat, small pieces of data, Dapper might be a good fit. If you have big, deep, nested structures, EF might be the way to go. Are you the creator/maintainer of the database you're working with? If you are, and you're not a database guru, EF "Code First" can help you build a database schema from your model code, including adding some of the right indexes, etc. It can also help you update your database with necessary changes given changes you make to your model code. Do you already have an existing database, or is part of your work to create that database? Is the schema pretty well-defined and static, or do you anticipate a lot of flux?
kogi has a great answer, this is the first stop to reusable code. I am also a fan of using WCF services if you want to get a little more advanced. I'm assuming that your clients have to send it somewhere so you will need a server running anyway. If you plan ahead well enough you can update the WCF code at any time and it also has built in versioning and will take care of probably what you already wrote which is the passing of information from client to the server.
Thanks for wanting to share your program. Could you put it on github? I imagine most will not necessarily want to grab your .exe file from a filesharing website...
I just added it to github: https://github.com/2000korosh/https---github.com-2000korosh-SimplifiedCMD
Use any recent version of Visual Studio, I can recommend the Visual Studio 2013 Community edition - it's equal to Premium edition in terms of features. Use the latest available version of IIS, I believe it's 8.0 (but 7.5 would be fine too). I recommend using Entity Framework Code First for your ORM; with your background I believe you'll find the framework familiar and learn migrations in no time. Visit http://www.restapitutorial.com/ and read up on useful RESTful API guidelines and afterwards do a quick tutorial on Web API 2 in .NET. 
I would be the one creating the database. I don't expect more than 4 tables, with two being "glue" tables (a_has_b, etc.).
or just use VS Community Edition :)
This could be an option. I was disappointed in the previous free versions of VS, mostly because they didn't support all of the testing features, and disallowed 3rd party plug-ins that provided the missing functionality. It looks like the Community Edition is on par with Professional.
Nancy and Dapper rock for an API service. Super lightweight and fast. If you're mainly doing HTTP these are great choices. Pluralsight has a great overview of building APIs that covers these an a few others. Worth signing up for 7 day trial to view. 
I've recently done a couple of APIs on Azure using Nancy + Dapper. I definitely recommend it just based on my experience, but even more so if it feels familiar to you from your time with Flask. I'd personally avoid WCF or Entity Framework, as they're heavy weight and really just a different way of thinking.
Do you mean covariance/contravariance, or the concept of class invariants?
Don't you need a registered business though?
I understand the subject but I am completely unable to explain it. I will defer to [this series of posts by Eric Lippert](http://blogs.msdn.com/b/ericlippert/archive/tags/covariance+and+contravariance/), his writing about it is much more concise than I could ever be. Start at the bottom of that page and work your way up. In general if there's something I want to know about C#, I head straight to one of [Eric's](http://blogs.msdn.com/b/ericlippert/) [blogs](http://ericlippert.com/).
I'd definitely just use WebAPI as opposed to Nancy. It's your first go-around with .NET so stick to the basics. There's no reason to get bogged down in the overhead and complexity of WCF for a typical HTTP API. Dapper's great for speed but I dislike writing queries as strings and LINQ support isn't great. I do use Dapper but only when speed is the most critical requirement in the data layer. EF isn't perfect for every scenario but there's a ton of documentation and nuget extensions and IDE tooling for it. There are a million sample applications and tutorials walking through a basic WebAPI + EF application, so it shouldn't be hard to get up and running.
If Unity's your only exposure to C#, you should learn about the newer language features that Unity lacks (like Linq, async/await, really everything .NET 3.5-4.5).
I don't understand what they mean by "compiler emits the code for all the type safety". The type doesn't get formally resolved like var but the compiler emits type checking code for a type that's not formally evaluated, *confused*.
What Framework should you use for building APIs? That depends. Are you needing to provide endpoints on anything other than HTTP/S? Do you need a very high level of control over exact message formatting, authentication, or headers? Do you need to provide SOAP endpoints, provide a WSDL or conform to an existing WSDL? If the answer to all of the above is 'no', then the new WebAPI functionality is great for providing lightweight APIs with XML or JSON payloads. If you answered yes to the above, then WCF is where its at. WCF is notoriously painful to configure, because it can be made to do pretty much anything. Basic stuff though like not applying field-order sensitivity to JSON payloads can require you to reimplement serious amounts of code. As for the ORM side of things: Entity Framework can do most things, and it provides a convenient set of tools for managing a schema. However, it will give you a lot of rope with which to hang yourself. I'm not sure I could ever recommend Entity Framework for any serious project. I would strongly suggest that you learn to maintain a schema separately from your code, although certainly also under source control. The Visual Studio SQL Database project is pretty handy for that. For ORMs then I'd recommend Dapper or Insight. You can do a certain amount of code generation from tables and views. 
The thing is, when there's still more than one candidate constructor left, the [Windsor documentation itself](http://docs.castleproject.org/%28X%281%29S%28epfy5s55spzolc554fd5wp45%29%29/Default.aspx?Page=How-constructor-is-selected&amp;NS=Windsor) states: &gt; * If there are more than one greediest constructor, it will use any of them. It is undefined which one and you should not depend on Windsor always picking the same. Now, I have no idea how that works out in practice, but to me that's the very definition of "inconsistency". Also, for the record, I haven't downvoted you. I'm actually pretty interested in this topic, since I still have a little trouble wrapping my head around it.
how excactly do i generate this .dll so it exports the whole thing in an .dll instead of an .exe file? The Mozilla Crash Reporter has Forms for example and I'm not sure if that's supportet by dlls
I don't want to make games.... I just wanna try out some things in C#
Also see this (considerably more complex than ELI5) blog post that explains in depth, including the theory, covariance and contravariance in generic types context: http://tomasp.net/blog/variance-explained.aspx/
It's part of their opening up. They go to where the users are, not wait for the users to come to them. Same reason why they'll use NPM for frontend development with ASP.NET 5.
Fair enough and good point, but I don't really remember then ever having a competitor to NPM though?
.Net is already 2 up on Java 1) You can remember who currently owns .Net. It hasn't changed. 2) You can install .Net without getting a sleazy attempt at driveby install of browser crapware. Oh, and the generics were in the platform first and better.
Mmm... but with the frontend stuff, can they follow the developers every six weeks? That world is so hyper-trendy, it's kind of nice to have a "grown up in the room", where you can count on a stack being stable for at least 12 months.
They aren't that agile (as in "fast", not the development model) But git is here to stay. There are no really good competitos. And arguably GitHub is also going to be here for a looong time. 
Yep, Java has some things up on .Net too, mostly around cross-platform support. Look at where MS is going right now - squarely after these things. But is running WPF apps on *windows* machines still a thing? I used to love WPF, but I turned to the web. WFP has so much good in it, but hasn't been worked on much in recent years. 
NuGet is great for getting .Net binaries. It's not so good as a delivery mechanism for .js and .css files. So yes, NuGet is (ab)used to do the same thing as NPM. 
Oh, no doubt. Moving to git is a no-brainer, and even the move to GitHub hosting makes sense. By "frontend stuff", I was referring to the adoption of NPM over NuGet. That world is so fad driven and ADHD. Do you use Require.js, or Browerify, or this week's new module standard? Do you manage it all with Grunt, or Gulp, or next Tuesday's thing? With the Node.js universe in the middle of forking, will NPM itself even still be relevant a couple of years from now? On one hand, as a predominantly server-side guy, I sorta understand throwing your hands up and saying, "You kids do whatever you want". But I feel terrible for the poor devs who are going to maintain today's code five years from now. Everything on the front-end right now revolves around a Silicon Valley startup mindset of, "You'll just re-write this in two years anyway, right?". Unfortunately, the lifespan of applications in most larger companies (i.e. Microsoft shops) is longer than that. It's kinda worrying to see Microsoft embrace more trendy things, and step back from its traditional role of being the thing you could count on for long-term stability (err... more or less).
My whole love of C# came when Mono was first announced. Ever since, I've treated it as "write once, run anywhere". Yeah, you don't do things like WPF, but I'm okay with that, it works great and it has been solid for years. Being open about it just makes me happy. I'm glad that they are open-sourcing it too, I hated the ".NET is evil, Java is better" argument that has been going on for years on the Linux side. Despite the fact that Sun had locked Java down to much that you couldn't really do anything with it. The having an ECMA standard wasn't an argument either. Now, with these changes, I hope that they will accept it a little more.
Yes, WPF updates are coming in the next release of .NET and VS.
ohh, pull requests. sweet.
Silverlight paved the way. The tech exists, its just not out of the oven.
NuGet repository can contain any file you want, including .js and .css. Granted, having it auto-update the bundling is beyond my knowledge.
&gt; Sun had locked Java down That's one of the more scary parts.
&gt; It fills an important niche (desktop apps) which isn't going away anytime soon. Yes, which makes it odd that it gets so little love.
http://blogs.msdn.com/b/dotnet/archive/2014/11/12/the-roadmap-for-wpf.aspx
I'd call Visual Studio their cash cow for making money off of .Net, with it being one of the main IDEs.
That's a bit better, but it's not exactly a radical and inspiring goal. Scott Barnes' comments on that blog post about "roadmap vs release notes" and WPF being in "caretaker mode" as a legacy technology are relevant. This is all a bit puzzling to me as a better desktop UI toolkit than WPF hasn't come along, but there it is. maybe the focus on web technologies has drained all the energy out of this area. 
Screen Saver... Now there's something I haven't heard in years.
To expand on this answer; OP has essentially done int | uint Which doesn't make much sense when you come to the sign bit. Hence the warning (not an error, I think?). To fix it, he probably wants to change the `(x &lt;&lt; c)` to `(unsigned &lt;&lt; c)`.
I really hope the OSS community does better than WPF. It really sucks quite badly. Due to the obsession with XAML it has poor support for programmatic GUIs. Check out the code required to do a multicolumn list with WPF from F#: let multiColumnList columns contents onSelection = let gridView = Controls.GridView() let list = Controls.ListView(View=gridView) let column index header = let binding = Data.Binding(sprintf "[%d]" index) Controls.GridViewColumn(Header=header, DisplayMemberBinding=binding) |&gt; gridView.Columns.Add Seq.iteri column columns list.ItemsSource &lt;- [|for row in contents -&gt; [|for elt in row -&gt; box elt|]|] list.SelectionChanged.Add onSelection list 
&gt; This is all a bit puzzling to me as a better desktop UI toolkit than WPF hasn't come along WinForms Grid was ~10,000x faster than WPF grid in an application I wrote for a client once. 
Then youtube is your go to spot for tutorials galore.
Thanks very much :) And i can just reference it in my other projects? so like i make a dynamic project called someCoolProjet.dll i can just use it by writing "using someCoolProjet;" and when someCoolProjet contains someCoolMethod i can just do someCoolMethod(); without having to write anything? that would be really really great
Thanks very much :) And i can just reference it in my other projects? so like i make a dynamic project called someCoolProjet.dll i can just use it by writing "using someCoolProjet;" and when someCoolProjet contains someCoolMethod i can just do someCoolMethod(); without having to write anything? that would be really really great
WCF not WPF WPF / XAML should be used though in favor of winforms.
I hear it all the time, but they really mean wallpaper...
Yeah, it seems codeplex is winding down. I have a friend who used to work on it, but he got moved to VSO
Flying toasters..... *remember*.....
I think it's interesting how Microsoft opted for the simple approach of using an executable with a different extension then calling it with command line switches, instead of making a framework/another API on which it interacts with. One of the few cases of simplicity working well, IMO.
&gt;&gt; ...using Visual Studio .NET Why are they using such old software? (MS dropped the ".NET" moniker from Visual Studio with the 2005 release. The 2002 and 2003 releases were the only versions to include it.)
...nobody else finds it insane to use Windows Forms for creating a screensaver?
Me too. I'm too stuck in my ways to even begin learning wpf :(
cross-platform obviously:)
I don't see that happening, just because it's tied so heavily to DirectX.
Me too. I can slap together very professional looking apps in no time with winforms. Wpf just makes my head hurt.
&gt; Your source isn't that bad I hate it. &gt; I do like XAML Oh God, no. I hate XAML. It is literally more verbose than F# because of all the close tags and it is not statically typed (unless you pull in more tools and more complexity). And no generics?! I might as well use Cobol or, erm, Golang. I've built a really nice typesafe GUI library for F# that wraps WPF. Let's me do awesome stuff with just a few lines of code. Coming from Linux the main advantage is hardware accelerated 2D and 3D graphics that work reliably between machines. 
Some features are mostly syntactic sugar (expression-bodied members, string interpolation, nameof), some complete what felt a bit like unfinished work (getter-only auto-properties, await in catch and finally) or expand existing features in a natural way (using static, index initializers). Some expose expressiveness from IL that C# didn’t previously surface (exception filters, parameterless constructors in structs). Some are almost just “bug fixes” to the design, and you’ll hardly know that you’re making use of them (improved overload resolution, extension Add methods in collection initializers).
Insane sounds a bit harsh for a project that is targeted at beginners. Winforms works perfectly for that. You can still upgrade to wpf later on.
To be fair, screen savers were never about saving power, they were about preventing burn-in on old monitors (i.e. CRTs) that used to have that problem. If being environmentally friendly was the objective, they would just turn their monitors off. Not really sure what screensavers are for today, they're just a left-over novelty that some people enjoy I guess.
I'm not your pal, friend!
To each their own. I like the verbose nature.. it lets me drill into the tinest details.
For real. This article is from Nov '14.. got my hopes up that there was something new going on.
It being a program was also highly exploitable for a while. 
What is your sticking point? Variables? Loops? If-Then? Input? Output? Classes / Methods? Event handlers? LINQ? Don't say "all of the above".
There is actually a wealth of information linked here on reddit for learning resources. It's a real gold mine. Start here: http://reddit.com/r/learnprogramming
I was just thinking about how I thought I was the only one still doing this... Currently brushing up on HTML &amp; CSS and learning Javascript so I can just skip whatever is next for desktop development. If I'm going to have to learn something new, it's going to be whatever runs on everything. :P
What's your recs for Classes/Methods. I understand them, I can use them (from library's), but I can never structure my own well it seems.
Making the screen go to sleep (or just plain black) would also prevent burn in. 
If you are using DB first with Entity Framework, then you should have a edmx file somewhere in your solution that contains the classes that were generated for you. I am sure there is a way to rebuild your database from that but I can't remember since it has been a while since I had to do it. Edit: Found it. You need to open the edmx in the designer, right click some empty space and click Generate database from model. This should do the trick. Good luck.
Pluralsight
http://www.microsoftvirtualacademy.com Not all of these have code samples, though.
Can you write C++?
I would suggest using Freeimage, which supports DNG to render the DNG to a System.Drawing.Image. then load it in a win form or whatever 
I guess (like almost always) someone somewhere tried to do that before, that means there surely is some kind of library out there that can do this for you. Maybe even something on codeplex if you are lucky.
I've used DevExpress for about 4 years now. It's an excellent grid and very flexible. I think a lot of their WPF controls are really wrapped port of the winforms controls and not everything lends itself to MVVM very well. That said it is possible to do everything with the grid in a MVVM pattern and the grid is very fast and good with big data sets. Overall very happy with devexpress and their support is very good so long as you supply sample projects. If you don't supply a sample project it can be quite lacking. The rest of the controls they have cover pretty much everything you'd ever want to do and they look and perform very well. They've been very good for us in terms of our reputation with the end users.
I don't know if you're the blog author, but *thank you* for posting this. This paragraph: &gt; Secondly, the templates knit together complete, ready-to-run applications in such a way that a whole lot appears to happen "by magic" behind the scenes, and it can be difficult to understand how these individual pieces fit together. This begins to matter when we want to customize our application, cut out unwanted components, or take a different architectural approach to building our application describes my situation *exactly*. I haven't even read past this point. All I know is if the blog can shine even a little light on what it just described, I'll be very happy.
Thanks for your feedback and tips. I definitely plan on narrowing it down to just a couple and doing a trial for just those. I don't have the luxury of a lot of time to test but I am afforded some time. 
Virtual Academy is like trying to concentrate on a movie while your wise-guy friend wants to make a bunch of lame jokes. I end up leaving because they spend so much time trying to be funny that they don't teach anything. When I want humor, I watch Friends on netflix (can I THROW any more exceptions?!?). when I want to learn, I watch John Skeet on Pluralsight. 
Yeah I'm pretty familiar with it.
Not to mention there is a very active /r/learnprogramming community who stay in #learnprogramming in Freenode who would be more than happy to help. We have a mentoring community set up as well at /r/lpmc, #lpmc, and www.lpmc.io 
I found a documentation about it. [Click here to go to the Documentation from code.msdn.microsoft.com](https://code.msdn.microsoft.com/windowsapps/Lock-screen-apps-sample-9843dc3a) **Description:** This sample shows how an app can have a presence on the lock screen—the screen that is shown when the computer is locked—with a badge to provide basic status information or a tile to provide more detailed status. An app can also send toast notifications to the lock screen. All apps that are granted a lock screen presence also have the ability to perform background tasks.
Sounds like you need a a healthy dose of: practice. We've *all* been there. Keep going over the basics. Each time changing something different. Also helps instead of copy &amp; pasting the example, to type it out. When I first started. I had no idea where I'd be by this point and yet all I started out with was different kind of print statements and eventually built onto that. Used loops and variables to increment. Programming is just as much a skill as learning a new language. I'd also recommend /r/learnprogramming for any basic questions. Or hell, send a message to me if you have a quick question or two 
Maybe you shouldn't ask for criticism if you're going to whine about said criticism. The people here code in real environments, and when you're in a real environment and have to actually understand what the retard before you was doing very quickly (in this case, you), it is very easy to skip over something like multiple classes inside of a file. And every developer I have ever known would want to throw you out of the window because of it.
Tried the robotics thing up there and I cringed so yea, I need some more professional stuff
Unfortunately he is way too basic. Compare it to learning to walk when I already have my jet engine licence
Just spent the last few days digging through vnext and was considering putting a post together "from the ground up" style. Seems others are just as bewildered about the amount of magic that goes on in these stacks.
I'm currently using Telerik UI for WPF. I really like their controls, and the documentation is adequate. Their dev team is also good about replying to forum posts. I tried Infragistics and DevExpress prior to purchasing Telerik, IMHO Telerik is easier to use. Most of these libraries have free trials, I'd suggest downloading a few and see which one meets your needs.
When you say "pass information" what do you mean? Perhaps review the [related post](http://typecastexception.com/post/2015/01/04/ASPNET-Understanding-OWIN-Katana-and-the-Middleware-Pipeline.aspx) which explains OWIN/Katana in a little more detail. Specifically, check out the concept of the [Environment Dictionary](http://typecastexception.com/post/2015/01/04/ASPNET-Understanding-OWIN-Katana-and-the-Middleware-Pipeline.aspx#What-is-OWIN--and-Why-Do-I-Care-). I also found the [OWIN specification](http://owin.org/spec/spec/owin-1.0.0.html) very helpful.
I've used the DevExpress grid fairly comprehensively over the years and these days it's pretty good, but there are plenty of things it does that aren't very MVVM friendly. Things like applying a custom comparer to a column or adding a custom total summary involve handling events and putting your logic into the event handlers. It's not terribly difficult to add custom attached behaviours to do that stuff in a better way, but I've had to write various workarounds like this to make it play nicely in an MVVM situation.
Yeah, I think the earliest you get access is in the call to Configuration. Likely your very first peice of middleware in the pipeline would take a config argument, after reading from the IAppBuilder.Properties dictionary to ascertain what config info you could about the server/environment, and then write to the environment dictionary. 
If I understand correctly, you still have to plug in that piece of middleware to the pipeline in Startup.Configuration. That means the implementation of the startup class is server dependent, and I'm not sure if that's recommended. Currently, for projects I am working with, I have a static holder class that contains everything that should be passed from Server to owin middlewares. The server implementation would populate that static holder and the middlewares would read from it. I'm not sure if that's a good way to handle this situation either, but I'm going with it because it would allow me to have a Startup class that does not depend on server.
Ah... interesting. Got any code you could put on Github? 
The assignment requires for me to have try/catch block, loops, if/else or switch, basically I need to make w/e I want but it has to have all of these included... 
Thanks for your feedback. JSON# provides functionality that is available in JSON.NET. I thought it best to separate JSON# into a separate library, rather than bloat the JSON.NET codebase with overloaded methods, that might cause confusion. JSON# is designed specifically for scenarios when performance-optimised code is necessary (which I would argue, is every situation). There's a clear separation of concerns there, IMO, which is why the library is separate.
That's a shill answer. If you think that it should apply to every situation (and talking performance it probably should) and it out performs json.net, then contact them about an overhaul. If not an overhaul, a performance specific overload could be easily designed to avoid bloat. I'd venture you just want your project to be separated for ego reasons. There is no logical reason not to improve an open source project that is as popular as json.net so I only imagine your reasons are emotional instead. 
The logical reason is outlined in the blog post. Specifically, avoiding the .NET Framework's Large Object Heap. There are several JSON libraries targeting the .NET Framework, designed by many people who chose not to merge their libraries with JSON.NET, all presumably for emotional reasons.
&gt; We have Infragistics and every one hates it. They do a fantastic job of making simple things complicated as all fuck. If you can get things working, they look ok but it's such a pain in the ass to get working the way you want. We're trying to get Infragistics out of our codebase as much as possible now. Actually, I use infragistics a lot and used telerik in the past. Basically, for me it's the same, it's not really the tool suite which matter but the way you use it.
As far as I know, even though the APIs may be stateless, the code itself isn't, e.g. static members are only initialized on the very first call. Try adding your lib to [this benchmark](http://theburningmonk.com/2014/09/binary-and-json-benchmarks-updated/), it covers quite a lot of libraries.
I do not believe this submission is appropriate for the **C# language** subreddit and as such it has been removed. I do encourage you to resubmit it to a more relevant subreddit (off the top of my head, perhaps /r/programming, /r/sysadmin, /r/dotnet, /r/webdev).
I think they _do_ have a place. You just need to be judicious about when you use them. 
Has it to be a Windows Forms application? Otherwise i would suggest a simple number guess game for a console application. The application generates a number between 1 and 100. You have to guess which number was generated. Everytime you enter a number, the application gives you a hint if your guess is above or below. In this game you will have a loop for the game, a if/else block for evaluating your input (above, below, ..), than you can integrate a try/catch for parsing your input to an int-value and handle the exception (FormatException) wich a warning like "only numbers allowed". Pseudocode: generate number while number not found get input try parse input to int evaluate input if above "number is lower if below "number is higher if found "you won" catch exception "only numbers allowed" loop 
It isn't an issue about when you use paramaterless struct constructors, but rather where you use the structs that have paramaterless constructors. Create an array of them and the constructor won't run. This means your struct needs to be valid for both cases. That said, I will admit that it is fairly rare to work with raw arrays these days.
Thanks for the comment. Good question; ISerializable returns a SerializationInfo that mostly pertains to .NET assemblies, whereas I need to return properties specific to the JSON# library, designed to avoid Reflection and assembly metadata. Essentially, IHaveSerializableProperties and ISerializable have very different purposes.
Why the misspelled IHaveSerialisableProperties? From what I see, it's a matter of semantic... They both contains a string and a value. Usually, you have no Reflection involved when using ISerializable; you have to implement a GetObjectData and a specific constructor to avoid using reflection. 
Just use Topshelf, which is available on nuget. 
User profile
This is not really a programming concept.
Thank you. I will confirm that the behavior is exactly the same and update the document. Unless, of course, you want to submit a pull request before that. 
This is definitely NOT Jon Skeet. Nice try pal.
http://msdn.microsoft.com/en-us/library/2y3fs9xs%28v=vs.140%29.aspx
Which wouldn't help in this case, since it's best practice to ignore local copies of database files used for testing. Otherwise you run the risk of exploding the size of your repository. You'd still need to regenerate the files on any new machine. 
It's not *exactly* the same. Even using a bare `throw` mutates the line number of the current frame of the stack trace.
It is as close to being the same as the differences in the await in catch/finally example. 
This is the conclusion I came to too. Someone helped me out an Issue and we came up with try { try { throw new AggregateException(); } catch (AggregateException ex) { if (ex.Data.Count &gt; 1) { // Handle the AggregateException } else { throw; } } } catch (Exception ex) { // Handle the general Exception } Thoughts?
As a side note, you could use something like [ToLower()](http://msdn.microsoft.com/en-us/library/system.string.tolower\(v=vs.110\).aspx) when validating the user input.
Nested try/catch blocks were the only direct comparison I could think of when I read the article. I don't think anyone in their right mind would write this, however, haha. 
I said it was malicious... I don't see anything wrong with this as long as I'm not trying to be sneaky or purposefully try to infect people. Which I'm not. I'm asking for **help**.
If you don't even know to not link things like this in public and tell people to download them, you're probably not going to understand how this works in the first place. Don't post this crap online. Get it off your system immediately and tell your friend to stop downloading shady shit.
**NuGet:** Don't quote me here, but I believe you should be able to create a `.nuspec` file and define something like this to support multiple frameworks: &lt;files&gt; &lt;file src="bin\Release\net40\assemblyName.dll" target="lib\net40\assemblyname.dll" /&gt; &lt;file src="bin\Release\net35\assemblyName.dll" target="lib\net35\assemblyname.dll" /&gt; ... &lt;/files&gt; ---- **Serialization**: What kind of format do you want to end up with? If it's plaintext, go with [Json.NET](http://james.newtonking.com/json). If it's binary, go with [Protobuf-NET](https://code.google.com/p/protobuf-net/). Both are very fast, widely used, and well-documented.
Try Encoding.ASCII instead.
Pre C#6 [Dictionary Initialisation](http://msdn.microsoft.com/en-us/library/bb531208.aspx) doesn't have to be as long winded as he suggests: var postData = new Dictionary&lt;string, string&gt;(); postData["username"] = "admin"; postData["password"] = "password"; postData["authToken"] = "123"; can be abbreviated to var postData = new Dictionary&lt;string, string&gt;() { { "username", "admin" }, { "password", "password" }, { "authToken", "123" } }; (Edit: pedantic spacing)
I swear, anyone into LINQ and / or NCRUNCH might as well be vegans for how much we yap...
How do you imagine OpenCL would boost performance? OpenTK has OpenCL bindings I think.
Just report it.
You just have to know that arrays initialize with default(T) not new T(). That hasn't changed. It's not like arrays of classes initializes all elements with the default constructor, so why should structs?
Arrays have never initialized to the default constructor. Neither for structs nor classes, so I don't understand how this can be confusing. Arrays initialize to default(T) and that will not change. You now just have the option of a default constructor whereas C# would earlier just translate that to default(T) it will now have the possibility of invoking a specified constructor. It has nothing to do with arrays.
Uhm.. What? "Hardcore coders"? "WAG"? And LINQ statements per semicolon? I write more non-LINQ statements than LINQ-statements, and they're also terminated with a semicolon. So it must be less than 1.
Hello @yumz , I know I can create the nuspec using this format, but the problem appears when I have to generate all the binaries in an automatized way. I've followed "tutorials" to modify the .csproj and .sln files in order to allow different builds on one click, but all I obtain is breaking the whole solution u.u . 
string hash; using(SHA1CryptoServiceProvider sha1 = new SHA1CryptoServiceProvider()) { hash = Convert.ToBase64String(sha1.ComputeHash(byteArray)); } [Source](http://stackoverflow.com/questions/800463/c-sharp-create-a-hash-for-a-byte-array-or-image)
default(MyStruct) isn't used much, perhaps, but an array of structs might be, and that'll do the same. I don't understand this C# 6 addition either.
&gt; So is the difference now that it will run the constructor for each index? I don't think so, no. Then it would have to call default ctors for reference types as well, which obviously makes no sense.
What about uninitialized local struct variables? Will it call the ctor on those? It's not very obvious what will happen.
Yep, you just manipulate the registry keys. Here's a gist from an app I maintain https://gist.github.com/davidwhitney/e96f6fc5659975252be0 
&gt; Hardcore developer for me is someone who takes 10 year legacy code without documentation or any logical structure an can make sense of it. That's called **archeology developer**.
Uninitialized local class variables are not allowed. As for fields, with classes you can't go myField.mySubField when myField isn't initialized, which you *can* with structs since they are always initialized. So structs *are* in fact quite different.
Good one, I'll need to adopt this term for some tasks that I do.
There's no C# content in this article. It's more appropriate for /r/webdev. What's this gawd-awful annoying login box all about too? http://i.imgur.com/bBYCBlH.jpg
When I don't understand something in c# I always look for Jon Skeet's explanation. This isn't exactly what you asked but I think it covers a lot of the bases: http://stackoverflow.com/questions/3690239/var-a-type-or-a-keyword
Because for not all structures will default provide a sane value. Rational or quaternion for example. 
I've never testing JSON# in an AOT context. Let me get back to you on this. Theoretically it shouldn't have an impact, given that JSON# doesn't interact with assembly metadata, so whether it runs in a JIT or AOT context shouldn't matter. I'll be benchmarking JSON# more heavily in the near future, and I'll consider AOT systems while doing so.
Yes. I'l be adding a more thorough suite of benchmarks in the near future. Large POCOs ar esomewhat out of band in terms of this solution. The LOH issue that JSON# specifically treats is one where the serialised JSON is stored as a string. Instead, JSON# uses streams and deferred execution to keep heap objects small as possible. If your POCO is inherently large, a JSON parser won't be much help, regardless. I'd be interested to see your library; is it on Github?
http://en.wiktionary.org/wiki/serialisable Yes, they both deal with key-value pairs. I implemented the custom serialisable (or serializable) interface to cater for the recursive design used during the serialisation of complex POCOs.
&gt; Hardcore developer for me is someone who takes 10 year legacy code without documentation or any logical structure an can make sense of it. My job often involves reading uncommented THEOS BASIC code written in the 80's and creating a C# program that performs the same function... It's uncommented because a developer in 2003 apparently was big on the whole "self-documenting" thing... but I suppose failed to realize that you can't easily make code that deals with databases via huge integer-indexed matrices very readable with just code. 
&gt; Yes. I'l be adding a more thorough suite of benchmarks in the near future. Large POCOs ar esomewhat out of band in terms of this solution. The LOH issue that JSON# specifically treats is one where the serialised JSON is stored as a string. Instead, JSON# uses streams and deferred execution to keep heap objects small as possible. I see. Mine was designed to be simplistic, so it is not developed for that purpose, and would read the entire string in order to tokenize it. &gt; I'd be interested to see your library; is it on Github? Yes. It's part of a standalone-webserver component (for use in services etc.). The reason I didn't use JSON.NET was that it was supposed to "just work" and if you have any special needs you are supposed to change it with another better suited library. I however made a lot of effort to keep it from boxing value types to remove some GC pressure. But during profiling the most expensive process by far was the tokenization. https://github.com/GeirGrusom/WebShard/tree/master/WebShard/Serialization/Json You can check the (admittedly ad hoc) SpeedTest unit test for the JSON deserializer which was what I used for profiling.
Hey, if you've got to get it done, you've got to get it done. I'd be really curious to see how the compiler implements filtered catches, because if I understand correctly, they'll have to unwind the call stack to evaluate the filter condition, which effectively means the compiler is emitting nested try-catch blocks for you. And even with exception filters, you still may want to use the 'bare throw' pattern if your filter is non-trivial; though I suppose you could then stuff your filter into a function and then invoke it inside the conditional. 
There is an asset for Unity3D that modifies JSON.NET to work on AOT, which by default it won't work. I saw some recent benchmarks that showed Protobuf 8x faster than JSON.NET which is similar to the performance you are seeing right now with yours which is very impressive.
Thank you. Yes, I'll definitely have a look at that. 
C# is great for some things, but based writing browser-automation based tests isn't one of them (unless it's the only language your team knows).
&gt; op.PenisLength == int.MinValue; For that expression to evaluate to true, you would have to assign op.PenisLength = Int32.MinValue; Assigning op.PenisLength the value of Int32.MinValue would result in: throw new ArgumentOutOfRangeException("PenisLength", "Value for a length must be &gt;= 0");
Can you assign a private setter from any member in the same class on an auto-property with no declared backing field? (honestly don't know if that's possible) But yeah, I understand that it's not exactly the same.
You have to talk to VS to get it to output multiple files and include them in the solution. That's the crux of the problem.
In the cases I've used this the output files, although multiple, were the same ones each time, so I added them manually once, the actual updates are fine.
I believe you can connect to Facebook from Skype, right? And all skype conversations are saved in a local database, right? There you go.
I personally put everything in view models. I only use ViewBag for page titles.
personally I would say never use viewbag for anything... put it in the model... I even put titles in a section.
I only use the ViewBag for quick testing as it's dynamic. Other than that everything should go in a View Model, no exceptions IMO.
I can't change the above code, that's how it is implemented in our production environment. I need a way to get the same results in Python. I need to understand exactly how these functions are doing the math.
I'm seeing a lot of hate for ViewBag, but it has it's uses. For small amounts of data very specific to a view that isn't complex enough to need a model, it is fine. As a general rule, if the value you're storing is used by one view and only one view, only to display something on the page, use ViewBag. Otherwise, make a model.
I sometimes use it to pass data from one view to a partial view if the partial view is used by multiple other views. Not that I am proud of that.
I don't think so. You would need to use GroupBy(). 
I struggled with this recently as a novice C# coder and came up with a fairly simple solution using delegates. I have changed some of my code around and given an example of how/ what to do. Let me know if this works for you. http://pastebin.com/bHfEhPtW
Oh wow. Okay. That was half what I imagined and the other half exactly what I needed. Thank you very much.
Glad it could help! Took me several days to figure it out myself. The code is a bit crude and could be cleaned up, but it works well. Thanks for the gold! My first gilded comment :-p
Only time I ever use ViewBag is when I'm prototyping and feeling lazy. 
I would say a progress bar is an extremely UI-centric concept. IMO there's no harm it living close to the form, or a UI specific class library. 
If you go into your Facebook settings there is an option to download all your data. Messages are part of that. Obviously this won't work if you need the data to be up to date at all times, but if it's for a book then you probably won't need it to be. 
The Facebook Messenger app must use a private API for chat. You could decompile the Android client and reverse engineer the API for your own use.
I use it when I want to pass common data to a layout that's shared among views in instances where my models can't all inherit from some master model base class. Even then, if I need to pass multiple properties for whatever reason (page title, page keywords, page description), I'll use a container class to do it so I only have to pass one object around in the ViewBag to limit type safety issues. I can't think of a reason I would want to use ViewBag outside of layouts though.
Except for quick testing ;)
You're not far off; you can leave off the second parameter. filename.Substring(filename.Length - 4); 
Thank you, both. It is very disconcerting not knowing how to do the simplest thing. #bitching 
Stick with it. I got a job with a C# shop after doing VB for 8+ years. I failed the written test during the interview, but told them I knew the .NET framework. I was hired, and it didn't take me long to get going. I used a VB -&gt; C# cheat sheet for a few weeks, and it all worked out. 
wow taking a MVC asp.net course in college and my teacher loves Viewbag. He wants to pass everything through it, it seems.
Thanks for the encouragement :)
I think it doesn't look too bad, it'll compile and that's a good start. In response to your question about "{ get; set; }", the first thing you need to know is that there's two types of "class variables", there are Fields and Properties. Fields are variables on the class, properties are (usually) a pair of methods, a getter and a setter. When writing a property it's *very* common to write something like the following: private int thisIsAField; public int ThisIsAProperty { get { return thisIsAField; } set { thisIsAField = value; } } In fact, it's so common Microsoft decided to make it easier for us by adding a short form for defining properties. So the above could be written like this: public int ThisIsAProperty { get; set; } The short form works in the same way, but the field is hidden and can only be accessed via the property. Some other thoughts on your code: 1. Perhaps "getFileType" should have a return type of "docTypes", it'd make it easier when referencing it, so you don't have to understand what each int value is. 2. Use *System.IO.Path.GetExtension* to get the extension of the file rather than substring, it'll be more reliable and won't throw an extension for files with very short names like your call to substring will. Hope this helps a little bit, if you have any more questions feel free to ask.
That's how I did it. I parsed the html file with a Powershell script and just outputted a text file with the messages. 
Were you by chance wanting to get the extension of the file?
Cool, two things learned. Good luck!
As a rule of thumb, if other classes need to access the value then use a property, if only the current class does then use a field. So properties are public and fields are private. There's some good reasons for this, both technical and conceptual, I can go into more detail if you like, but I'm on my phone so I right now.
1. Have one class/enum/struct/delegate per file. 2. Make the method `getFileType()` return the enum directly. 3. **Please** use PascalCase naming convention over camelCase. Most of C# code, including the .NET framework, follows this convention. 4. Yoo're using `filename.Substring(flename.Length - 4)` without checking whether the filename is even 4 characters long. It will throw an exception. This is a rather poor way anyway - what if the extension is longer than 3 characters? Check out the `Path` class - it has methods to retrieve the extension of a file (which very well can be non-existant). 5. Give your switch an `default` instruction. This way you do not need to initialize your `doctype` variable. 6. Your `docTypes` enum has no visiblity modifier (private, public, etc). It's (imo) good style to always explicit define a visiblity. 7. Your properties in the `File` and `Page` class have no visibility modifier. Same as 6. 8. Your class `File` has a single **private** method that is nowhere used. It can't be used from outside the class, but inside it's nowhere used. 9. Since your method is not accessing any instance members it can be made **static**. 10. Perhaps you want the method to operate on the local property `filename`, instead of having to pass a parameter? This would make number 9 obsolete. 11. Don't cast the enum to int always in your method. Use the enum directly. If the method really needs to return an int, only cast it at the end where you actually return the value. 12. Start being a code-style-nazi now. There should be a space after the enum value `other` - perhaps even all values on own lines. After the property `width` in the `Page` class is an empty line that can be deleted.
Not bad! Your question about getters and setters actually segues perfectly into a bit of your code that could use some refactoring. Consider: public enum DocTypes { Tif, Pdf, Other } public class DocumentFile { // Properties should have getters and sometimes setters. // *Generally*, properties are public, fields are private. public string FileName { get; set; } public int PageCount { get; set; } public int FileSize { get; set; } // Note that a field doesn't have getters or setters, can be initialized // inline and is camelCase rather than PascalCase. private readonly Dictionary&lt;string, DocTypes&gt; typeMap = new Dictionary&lt;string, DocTypes&gt; { { ".tif", DocTypes.Tif }, { ".pdf", DocTypes.Pdf } }; public DocTypes DocType { // Note that we've got a public property with only a getter (no setter), // which effectively makes it a read-only property. get { if (String.IsNullOrWhiteSpace(FileName)) { // Maybe throw an exception here? throw new InvalidOperationException("File name is empty."); } var extension = Regex.Match(FileName, @"\.[a-zA-Z]{3}"); if (!extension.Success) { // Maybe throw an exception here? throw new InvalidOperationException("File name is invalid."); } DocTypes type; // Try to find and capture a ".xxx" extension if (typeMap.TryGetValue(extension.Captures[0].Value, out type)) { return type; } else { return DocTypes.Other; } } } } All that said, `System.IO` includes all sorts of helpful stuff for dealing with files (like the `File` and `Directory` and `Path` classes). So, eventually, it may be worth your time to explore the tools the framework has to offer rather than reinventing the wheel. But, for now, carry on and good start!
Ah good point, I keep thinking of anonymous objects used via `dynamic` (which always uses dynamic dispatch). I have a feeling that even code using `IDynamicObject` still goes through dynamic dispatch and the DLR, but I'm not entirely sure. It'd be good to disassemble some code using ViewBag and see what the actual compiler-generated code is :)
Wait til you discover LINQ. Then you'll feel like a god.
Just imagine almost evertything in this framework has objects that extrapolate stuff like this ;)
If you're really stuck write it in vb and convert it to c#, not the best tool and doesn't always work but you'll see how it should be written in c# http://www.developerfusion.com/tools/convert/vb-to-csharp/
Because OP didn't link to the source... http://www.thoughtclusters.com/2012/01/how-many-hours-can-a-programmer-program/
Well that is one of the shortest ways you could do it. Otherwise you also could extend the StringClass, but that might be a bit of overdoing it ^ ^ Something like this (not tested): public static class StringExtension { public static string GetRightChars(this string str, int num) { if(num &gt;= str.Length) return str; return str.Substring(str.Length - num); } }
Thank you. Let me know if I can help implementing JSON# in your game. GerSerializableProperties returns a custom object that is comprised of a collection of basic properties, as well as a list of serialisors to facilitate recursive serialisation. The serialisors in this case are effectively JSON writers.
The column definition isn't actually part of the visual tree. You need to have a named visual element in that column that you can target: &lt;Grid Name="test" Grid.Row="2"&gt; &lt;Grid.ColumnDefinitions&gt; &lt;ColumnDefinition Width="7*"/&gt; &lt;ColumnDefinition Width="3*"/&gt; &lt;/Grid.ColumnDefinitions&gt; &lt;Grid Name="leftGrid" Grid.Column="0"&gt; ... &lt;/Grid&gt; &lt;Grid Grid.Column="1" Name="rightGrid"&gt; ... &lt;/Grid&gt; &lt;/Grid&gt; Then you should be able to target the element. A column definition isn't a visual element, just a definition to help the WPF engine lay out the content.
Thanks ArchangelleTheRapist. In my case, I need my left and right `grids` to adhere to a ratio. I can't set a `Grid` `width` using `*` so I resorted to defining the `width` in the `ColumnDefinition`. Is there any way I can get my `Animation` to act on the `ColumnDefinition` width?
Are you trying to change the size of the grid while maintaining that ratio?
WinForms
To anyone else that is reading this in the future; you probably want System.IO.Path.GetExtension(filename); instead (might not always be 4 chars, might not always be there at all, ...).
I'm learning C# after coming from Python. Imagine my dismay when I learned I would have to type that instead of this in Python: filename[-4:]
This is pretty sweet. need to try it out. Could help us do away with windows and IIS entirely!
Python has the advantage of doing "easy" things obviously. Printing a List of ints for debugging is as easy as `Print list`. I wish .ToString() was as smart; oh well. I'd trade all of python's "easiness" for C#'s strong typing though, holy crap. It is so nice knowing you have "correct" code.
Create two style templates and a template selector. The trigger property on the selector is the IsMouseOver.
Hey hey hey. I'm not looking to start any arguments here. Just relating to the #struggle with OP.
Ach, sorry if that came off combative. Just acknowledging a weakness of C# and advocating a strength. I learned C# after Python too. Discovering Intellisense made me drop all qualms about strong typing and my favorite language switched from Python to C#. I suppose when I learn F#, my favorite language will switch again. But still a student of C# for now!
Agreed! This can reduce the cost of setting up a cloud server significantly. That a great step forward.
ViewBag is fine. Jesus. It's not slow, it's a major piece of MVC, and Microsoft isn't dumb. ;) Maybe you've re-used a Model in a couple places. But on one specific view, you need to pass a certain piece of data that makes no sense to be passed to other views using the same model... enter the ViewBag! It's called the ViewBag for a reason, it's great for giving a little piece of info to the View. Another example is error reporting. Do you want to put an "Error" string in all your models? I guess you could. Or you could put it in the ViewBag, where it belongs. Yes, where it belongs. It doesn't belong in your ProductModel, because that's for holding Product information. Not for holding error strings. The ViewBag is the superior option in many cases. My suggestion: first ask yourself "Conceptually, does this belong in my model?" Usually it does. But if not, it might go in the ViewBag.
Where exactly are you stuck? Do you understand what an array is?? Post is a bit confusing to me. As far as the "for" loop 💩 its pretty simple. In the example, for(int I =0; I &lt; 3; i++), what this is saying is declare variable I as 0. If I is less then 3, execute the statement of code that follows. After executing, increment I. Try making a simple for loop and printing out I to the console and see what happens 
Lack of comments.
I'm impressed as hell by the community of coders here at reddit. It's a real gold mine.
I'm stuck in implementing some kind of array in the above mentioned code, and by some kind I mean any kind. I know to some degree what an array is, the main problem is I don't know how to use it :P 
http://msdn.microsoft.com/en-us/library/aa287601(v=vs.71).aspx Read through that. There's also a small tutorial, albeit dense, with some code that demonstrates how to use it: http://msdn.microsoft.com/en-us/library/aa288453%28v=vs.71%29.aspx I'd also highly recommend downloading the C# Yellow Book in the sidebar and going through that with your class.
Interesting! I'm used to the .net framework, but I'll be sure to check Nim out. Thanks!
Consigning yourself to one technology will doom you. Languages can rise to power and die in less than 10 years. C# will probably last a bit longer, but you'd be a fool to tell people you're a ".NET Developer". Learn solid software engineering principles, and you'll find that whatever language you're using is a really minor factor. 
I think the language has staying power but limiting yourself to a single language will hurt you in the long run. Different languages have different patterns that they follow which can help you see different solutions.
What if you find one particular language more appealing to you than others? In this case, C#.
Still, think of and brand yourself as a Software Developer specializing in C#, not a C# Developer. This is **especially** important for C#, as the entire philosophy is .NET is that the runtime is more important than the language. MS unabashedly adds features from other languages into C#.
http://www.dotnetperls.com/random-string
Nobody has answered your 2nd question yet, so I'll take a shot. It's generally bad to have logic in your view. It's hard to test code that's in a view, and the view should only be responsible for rendering your data. I prefer to use a static method somewhere to do that. I usually make it an extension method of the HtmlHelper class, something like this: namespace CustomHelpers; public static class YoloHelper { public static string YoloFor(this HtmlHelper html, string keyword) { if (keyword == "Yolo") { return "&lt;span&gt; Yolo &lt;/span&gt;"; } return string.Empty; } } Then in your view: @using CustomHelpers; @Html.YoloFor(ViewBag.keyword) 
There is no Image class in [System.Drawing.Imaging](http://msdn.microsoft.com/en-us/library/system.drawing.imaging\(v=vs.110\).aspx). The Image class lives in [System.Drawing](http://msdn.microsoft.com/en-us/library/System.Drawing\(v=vs.110\).aspx). You only need the 2nd using statement you have there. The following code compiles and runs just fine assuming the image file exists and is valid: using System.Drawing; namespace ImagingTest { class Program { static void Main(string[] args) { var image = Image.FromFile("MyFile.jpg"); } } } Of course if you're using other things besides the Image class, maybe things that live in the System or System.Drawing.Imaging namespaces then you'll need to import them as well, just like you would in VB.Net. Namespaces in C# work just like they do in VB.
Okay, thanks. Looks like I do need to include Imaging, i.e. The name 'FrameDimension' does not exist in this context. It's referring to this: Image DocImage = Image.FromFile(filename); count = DocImage.GetFrameCount(FrameDimension.Page); 
~~Can I ask something, why does this have to be an array? Is it some sort of principle of things? Like a point of an assignment perhaps~~(note to self, must read question first). From what I got you need to record number of wins, losses and ties and then display it on exit? If I understood you correctly and we MUST use arrays then let's do this: We will have an array of ints, where myArr[0] is going to be where we store wins, myArr[1] is where losses go and myArr[2] I guess for ties. So when you win you go myArr[0] += 1; When you loose, predictably it will be myArr[1] += 1; And at this point you can guess how we are handling ties, right? So for your output on exit, go something like System.Console.ICantRememberThisSyntax.WriteLine("Wins Losses Ties"): and then for(int i = 0; i &lt;3 ; i++) { System.Console.ICantRememberThisSyntax.Write(myArr[i]); } I know this is a really weird solution, but really you have no need to use arrays or any collections so it is sort of forced. Are you sure your teacher had not explained loops and already giving you collections like arrays? Do your homework kids, it will help paying bills maybe.
I've met many VB "coders" - I'd say that's the one exception. It's easy to be a VB hack, not so much in C#, or other languages - because someone can come straight from the old VB days of none OOP VB, and VBA in Office... into VB.Net.... And they bring all the baggage. That's why VB coders get paid less than C# coders.
Too many companies want an experienced &lt;language name here&gt; software developer. It seems hordes of developers are at the whim of how well businesses are doing that use a particular language... just statistical noise. This year 40% of available jobs are for seasoned C++ developers, but next year, it's JavaScript... businesses don't want a programmer - they want a &lt;language&gt; programmer...... For instance - for cloud computing - the next big thing, Web developers are well in there, and so are distributed DB devs. 
Ahh, I wondered where all the hate for VB came from...especially when VB can be mechanically translated into C#. Now I get to do the same stuff, except with braces....
Because MSFT likes to pull the carpet away from under your feet and you got nothing to stand on. I went from VB3 to VB6...not too terrible, but each version was a pain to change your code. Then ASP was OK and that took a while to learn. EDIT: I really miss the days of just needing a text editor to code! Then .NET comes out in 2003 (or so) and VB.NET was the new language...it was behind most of their products. Very good. The beginning was tough: lots and lots of deprecation. And now they decided that VB is for kids and everything is going to C#.
This is just something I threw together in LINQPad in 10 minutes, it offers also being able to choose upper/lower case characters as well as numbers and special characters. Seems more clean than using Path.GetRandomFileName() void Main() { GenerateRandomString(8, false, true, true, false).Dump(); GenerateRandomString(8, true, true, true, false).Dump(); GenerateRandomString(8, true, false, false, false).Dump(); GenerateRandomString(8, true, true, true, true).Dump(); GenerateRandomString(16, true, false, true, false).Dump(); GenerateRandomString(16, true, true, false, false).Dump(); GenerateRandomString(16, false, true, true, true).Dump(); GenerateRandomString(16, false, false, true, false).Dump(); GenerateRandomString(16, true, false, false, false).Dump(); GenerateRandomString(16, true, true, true, true).Dump(); GenerateRandomString(16, false, true, false, false).Dump(); GenerateRandomString(16, true, true, true, true).Dump(); } // Define other methods and classes here private static string _lowercase = "abcdefghijklmnopqrstuvwxyz"; private static string _uppercase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"; private static string _numbers = "0123456789"; private static string _special = ",;:=?./+&amp;é'(§è!çà)-|@#{}$*_µ£ù%"; private string GenerateRandomString(int length, bool lowercase, bool uppercase, bool numbers, bool special) { var temp = string.Empty; if (lowercase) temp += _lowercase; if (uppercase) temp += _uppercase; if (numbers) temp += _numbers; if (special) temp += _special; if (temp.Length == 0) return string.Empty; var randomSource = temp; var randomString = new StringBuilder(); for (int i = 0; i &lt; length; i++) { randomString.Append(randomSource[RandomWrapper.Random.Next(0, randomSource.Length)]); } return randomString.ToString(); } public static class RandomWrapper { public static Random Random = new Random(); } Edit: removed extension method "Scramble".
Really? A public extension method for string?
*Anything useful in the Web world
Patterns. You have to know them all.
&gt; something I threw together in LINQPad in 10 minutes Honestly, you don't even need to scramble the input string from which random characters are picked. My bad. I just felt like all the other options that were given here were seriously lacking (I mean, GetRandomFileName, *really*?), while this is not something that is difficult on any level.
&gt; but you'd be a fool to tell people you're a ".NET Developer" Why? That's pretty much my job for the last 8 years. Doesn't mean that's who I am as a person :p
You're applying for a junior position. There are million things you never saw - and that's okay. No one expects from a junior to know everything. Know the basics, know where to find more information, admit when you don't know something (but then describe how you'd go on about retrieving this information.
&gt;Just because someone developed in VB or VBA does not make him/her a bad developer, and just because someone uses C# does make him/her great. I think they were merely saying that it's easier to get away with being shoddy with VB. I learned to program with VB.net, and now I use (and prefer) C#. I find that something about the language *guides* me to seek good structure. That said, I'm a total amateur, so...
Theres lots of stuff out there these days to help you prep for the technical side, I suggest spending as much time as possible going through these: [leetcode](http://leetcode.com/) also [oj leetcode](https://oj.leetcode.com/) http://www.prepjob.com/jobQuestion/.NET%20Developer http://shoveitfizzbuzz.com/2011/08/just-released-net-interview-prep-lite-free/ some more interview prep: http://maxnoy.com/interviews.html just do a couple of searches on /r/programming and /r/csharp and you'll find this. most important thing is to be honest and yourself, remember that personality fit is 50% of the reason people hire, so don't let your nerves get the better of you. 
Vectors in coding are the same as they are in math. It's a line with both a magnitude and direction. There's a x,y,z space laid out on the screen, and an origin at 0,0,0. When you define a vector you're defining the magnitude in each direction and the length is a function of those magnitudes. Vector(1.0) Has a magnitude in the x direction of 1. The y and z magnitudes are explicitly zero. The magnitude is: f(x) = |sqrt(x^2 + y^2 + z^2)| = |sqrt(1+0+0)| = 1 And Vector(1.0,1.0) Has a magnitude in the x and y directions of 1, an implicit magnitude of 0 in the z direction and an overall length of |sqrt(1+1+0)| = |sqrt(2)| The overall magnitude is always positive. Edit: dumbing down Think of movement, no matter what direction you're moving, we always say that your velocity (speed) is positive. Moving in reverse at 5mph, your speed is still 5mph. No matter what direction you're moving, you can never have a negative speed. That speed is composed of three different directions. Forward/backward, left/right and up/down. If you're moving forward/backward at 5mph, then that generates a speed of 5mph. But what if you jump? Now you have another direction in which you're moving, up/down in addition to forward/backward. Say you want to never go faster than 5mph in whatever direction you're traveling, well, now you've added another direction to the vector that describes your speed, upwards. To maintain that 5mph, your speed in the forward/backward direction has to go down. It's all about right triangles and Pythagoras. The magnitude of a vector is the number of steps along each axis. The magnitude is the length of a line from the origin to the intersection of those points in space. In a 2d plane, you get a right triangle, in a 3d plane you get two, with one side of second being the hypotenuse of the first.
If you fail the interview they will kill you. Be scared!
This is strange. I had opposite results on my machine.
Wait... So you are telling me that a new tool was developed and people preferred it more?!?! /s I also started with QBASIC and transitioned into VB. Honestly using C# at work these days is a treat in comparison. Now I'm enjoying F# for my side projects, and I'm excited to see what will come after F#. Back to your point though, I was super bitter when XNA went to the wayside.
Don't worry about it, they have seen your CV and know you don't have experience and they are interviewing you anyway. That means they are looking for a junior they can train up. I've never once hired somebody based on where they knew a particular technology. Relax and try to enjoy it. Good Luck!
By the way, if you have questions/concerns like these, you may want to check out /r/cscareerquestions.
Nice esprit de synthèse.picking a new language should not be hard, for the majority of commonly used languages. I'm not talking about a perl to Haskell transition...
understand how enumerables work learn the yield keyword extension methods how linq works nuget **If web** How mvc works How owin works Admit when you don't know something don't bullshit they can tell. 
Sql is unrelated to the question
Yeah, but it'd be the same in VB.Net. If you wanted to use both Image and FrameDimension you'd have to import both namespaces.
I could use a break today. I've interviewed many c# developers starting with a 20-30 minute phone screen. If you PM me your number, I'll call you and test your skills. My strategy is usually to ask what you've worked on or built yourself (in school or your last gig or whatever) and then ask you more and more probing questions about specifics of how it works and why it works that way and why you didn't consider an alternate way. And calvinr is correct: "enumerables, yield, extension methods, linq" - you should basically know all the language constructs, keywords and syntax cold as well as OOP principles (PIE). You should also know basic file i/o, network i/o, data types and sql - it's hard to imagine even a simple app that doesn't make use of all of the above. Anyway, PM me if you want a live quiz. 
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**T-shaped skills**](https://en.wikipedia.org/wiki/T-shaped%20skills): [](#sfw) --- &gt; &gt;The concept of __T-shaped skills__, or __T-shaped persons__ is a [metaphor](https://en.wikipedia.org/wiki/Metaphor) used in job [recruitment](https://en.wikipedia.org/wiki/Recruitment) to describe the abilities of persons in the [workforce](https://en.wikipedia.org/wiki/Workforce). The vertical bar on the *T* represents the depth of related skills and expertise in a single field, whereas the horizontal bar is the ability to collaborate across disciplines with experts in other areas and to apply knowledge in areas of expertise other than one's own. &gt;The earliest reference is by David Guest in 1991. [Tim Brown](https://en.wikipedia.org/wiki/Tim_Brown) [*[disambiguation needed](http://dispenser.homenet.org/~dispenser/cgi-bin/dab_solver.py?page=T-shaped_skills&amp;editintro=Template:Disambiguation_needed/editintro&amp;client=Template:Dn)*], CEO of the [IDEO](https://en.wikipedia.org/wiki/IDEO) design consultancy defended this approach to résumé assessment as a method to build [interdisciplinary](https://en.wikipedia.org/wiki/Interdisciplinary) work teams for creative processes. &gt; --- ^Interesting: [^Glossary ^of ^shapes ^with ^metaphorical ^names](https://en.wikipedia.org/wiki/Glossary_of_shapes_with_metaphorical_names) ^| [^Institute ^of ^Finance ^and ^International ^Management](https://en.wikipedia.org/wiki/Institute_of_Finance_and_International_Management) ^| [^Vishwakarma ^Institute ^of ^Management](https://en.wikipedia.org/wiki/Vishwakarma_Institute_of_Management) ^| [^Tee-ball](https://en.wikipedia.org/wiki/Tee-ball) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cnqypsj) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cnqypsj)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
For this particular piece of code, there is some redundancy going on here. For instance you have: int pagecount and public int PageCount which you can wrap into one. The question is, do you want to run this code every time that you want to get a page count? For instance, assuming that the file will not change while you are using it, you could calculate the page count once and store the result. So in your constructor, you can run the logic of figuring out the page count and then just return that for PageCount. If you make changes to the document and the page number changes, you can update the page counter for every time the page number changes and avoid querying every time *get* is called on PageCount Also C# will mark anything that doesn't have access qualifier (so, private, public, protected) will default it to private. I personally explicitly write out "private" to make it clear, but: private string filename; int pagecount { get; set; } are both private. Sticking to particular convention, whether you specify private or not, makes the code a little more intuitive. Good job though! This looks really good. Keep up the great work!
You need to make them like you. This may be obvious to you, but it really wasn't for me sadly. I thought my GPA, my awards, and my skills would be enough to set me apart from other candidates (what else could they measure us on?). I'm a pretty introverted guy and at the time didn't see much reason to turn strangers into friends. So I treated each interview sort of like a test. They'd ask questions and I'd answer the best I could. Make sure i had solid answers for questions like 'what is your greatness weakness?' or 'Why do you like developing software?', and all that. It's all crap. Make the interviewer like you. You should try to get the interviewer talking more than you. Ask them questions about their self. How long have they been with the company? Do they like it there? If you can see pictures or objects in their office, maybe it'll give you insight into their hobbies or interests. Maybe ask them about their weekend. Create an amount of _familiarity and rapport_ between you and the interviewer(s). Read How to Win Friends and Influence People. It sounds trite, but it really does help. 
Others have explained what Vectors are for, but if you perhaps divulge where you're getting stuck then we might be able to provide more information. Where are you encountering Vectors that is confusing you?
It's strange, but that shouldn't need to be specified given that his machine's regional settings are set to Danish. Both of those properties default to the [System.Globalization.CultureInfo.DefaultThreadCurrentCulture property](http://msdn.microsoft.com/en-us/library/system.globalization.cultureinfo.defaultthreadcurrentculture.aspx) and [System.Globalization.CultureInfo.DefaultThreadCurrentUICulture property](http://msdn.microsoft.com/en-us/library/system.globalization.cultureinfo.defaultthreadcurrentuiculture.aspx) (respectively) if they are not set explicitly. And those System.Globalization properties default to the Windows settings, unless set explicitly. So either somewhere the CultureInfo is being set explicitly in the application somewhere, or the Windows settings are not actually set to Danish, or the Windows settings are set correctly but are not the same as what OP desires (quite possible). Strange. OP, please do let us know what it turns out to be, I'm curious. 
Chances are you're not going to be expected to build systems from the ground up, on your own. You'll be joining a team that has a constant (daily) cycle of code -&gt; test -&gt; commit -&gt; deploy. They'll probably already have a codebase in place that you'll be adding to and therefore you'll have implicit guidelines / standards to adhere to. I dare say that you'll be teamed up with other developers when you first start, anyway. However, If you can familiarise yourself with source control systems (GIT, SVN, TFS, etc), testing tools (NUnit), an IDE (Visual Studio for C#) then you'll stand a good chance. There will probably be a test at the interview to gauge your coding ability but if it's for an entry level position it'll just be a test on the basics (OO, simple algorithms, design, patterns, etc.). Overall, just show that you're resourceful but willing to ask for help when needed. It's an scary and exciting time for you my friend. I envy you. Good luck.
As of .NET 4.5, you can do this at the AppDomain level rather than at the thread level: var ci = CultureInfo.CreateSpecificCulture("da-DK"); CultureInfo.DefaultThreadCurrentCulture = ci; CultureInfo.DefaultThreadCurrentUICulture = ci; You need the `System.Globalization` namespace.
You need to cast your 'integer' variable to an int, then add it to your list. Also, I would probably use List&lt;int&gt; instead of ArrayList.
C# allows the old ways of classic VB and Java to propagate as well. 
It has the word 'basic' in the name and encourages non-professionals use it. So basically it is just vainity.
&gt; Unless you've decided that you will only do .NET work, in which case good luck when it dies in 15-20 years. Well to be fair in 15-20 years after .NET falls by the wayside (presumably), there will be large, enterprise companies with deep wallets who need .NET developers to maintain their aging, mission critical software. Effectively the same deal as COBOL. 
I've sat on both sides of that table. Just tell them if you don't know something they ask, but that you're confident in your ability to learn and adapt quickly. Reassure them that in hiring you, they're hiring a worker not a drain on resources. Exude quiet unassuming confidence. They'd be lucky to have you as part of the team. Also don't wet yourself, that's a bad start. 
Or: string result = string.Concat(foo.Skip(foo.Length - 4).Take(4)); 
which is pretty much the same as the first. I'll see myself out...
Maybe break it into two pieces. I'd start by writing a console application that accepts input and then requests the necessary information from your SQL database. Next I'd muster up the courage to start reading about Microsoft Word integration. This part may be tough depending on what you need. Here's a short tutorial: https://www.add-in-express.com/creating-addins-blog/2013/09/06/working-with-word-templates/ I think if you break it apart like this you'll find it's a lot more manageable.
Sounds to me like the sort of thing you would use VBA to do, any reason you're using c#?
Can confirm, pretty much how I got my first programming job, enthusiasm and an eagerness to self develop go a long way in junior positions. Of course without knowledge of at least the basics you won't get very far!
I had this more envisioned of use in my own app for looking up a dictionary. Currently, users are required to install a japanese keyboard to search for a japanese word or term. I've seen other apps with the conversion feature and it was convenient, but I finally got around to making it. But yea, you're right. As far as going to kanji, I'll just leave that up to the platform lol **edit** and thank you for the fix. I forgot what ftfy meant lol. Much appreciated.
I finally worked it out. Turns out `Storyboard.Target="{Binding ElementName=rightGrid}"` wasn't actually binding correctly. I simply changed this to: Storyboard.TargetName="rightGrid"` I had been overlooking the error that was appearing on my console during `runtime`. Hope this saves some time for somebody.
Agree. I think the ViewBag is perfect for showing error messages.
They turned me into a newt!
Try this walkthrough: http://msdn.microsoft.com/en-us/library/office/ff196606.aspx
Not the OP, but thanks for this list. Been planning the jump from former SysAdmin to C# developer. It's clear to me I have a bit to learn still.
You could try using CUDAfy.NET for graphics card calculations (contrary to the name it also supports OpenCL). I'll take a look at your lib later to see how it is :)
It automatically seeds itself with DateTime.Now
Look into modifying the controltemplate for the button. Should be a lot easier to completely redefine the elements that make up the button and give access to the triggers for things like mouseover Quick google for an example: https://gist.github.com/markheath/c8189790270b8615625d
You may need to take a look at "Office Developer Tools" provided in Visual Studio. I have never used it though.
As much as it pains me I think I'm with Marknumskull on this one. I would follow the path of doing it in Visual Basic for Applications unless you run into something that you just can't do with it. I will say though that if your boss is going to want more of these reports you might want to convince him to put in Sql Server Reporting Services. It'll make your life much easier in the long run. Note: I work with these technologies on a regular basis. When writing code I write about 50/50 C#/VB.NET. I also use SSRS daily. What you're trying to do (reporting) is a big part of my life. 
There are a lot of things to take into account with the facebook api. Assuming you have everything set up correctly with your facebook app and you have a working API key that is correctly getting data back, can you please post an example of what the result object looks like? I am familiar with a few facebook responses but not any with a category value. 
Don't forget: must read question first
What?! How can they even think that would be convincing.
Video shot with my phone showing a set of active plots: - https://www.youtube.com/watch?v=cxwAuKGpEv8 - https://www.youtube.com/watch?v=h2_vuM9F9Ik (in blue) These videos show an earlier build with functionality which still exists but is slated for an update. - https://www.youtube.com/watch?v=KJN5slhHI8Q (mini node-attached displays - Draggable) - https://www.youtube.com/watch?v=mVvdqBSlsxQ (physics-enabled nodes) - https://www.youtube.com/watch?v=DS6QDPc9XrM (old charged nodes demo)
Yeah there is, if you build a word template in .net each user would need to install that template, not so good if you need to distribute across a network. VBA doesn't use the .net framework which makes it much more limited in what it can do,however, you can write exactly what OP needs using it and there is no install required for end users. Another option is to create a com lib with c# which does all the work,but again, that will need distributed to all users. In my opinion VBA, as rough and old as it is, is probably the best option.
Thanks.
OpenTK is much more than just an OpenGL binding for C#, and [it does have OpenCL bindings as well](https://github.com/opentk/opentk/tree/develop/Source/OpenTK/Compute).
Looks nice so far :D. 
Yum!
Others have answered your question already, but I might add that you should really take a look at what you're doing and reconsider it. I'm assuming that you're (somewhat) new to programming. I'm not sure what you're trying to accomplish with this code, but it's probably not a very good solution to your problem... you don't want such a fundamental property of files such as 'FileSize' to _only_ return the actual filesize if it's a PDF or TIF file. My guess is that you're using it to act as a sort of filter so that you only end up working with PDF and TIF files. What will happen when you need to expand your program to work with other types of files though? Long after you forget the specifics of this property's implementation, you'll have to figure out why in the world your code isn't working with RTF files, only to find that you hardcoded a filetype requirement into one of the essential properties of a file object. OOP is all about encapsulation. You want to keep the static, unchanging parts of your code separate from the parts that are subject to change in the future. So my advice to you is to get rid of the switch in your FileSize code and return a proper size for any type of file. Put the code that checks if it's a PDF or TIF file wherever you first read the files in. Edit: And in general, keep logic out of your properties as much as possible. You don't want any side effects and you don't want conditions in them. You want them to be as straightforward as possible. Another word of advice, as far as naming conventions go, a property should not have 'Get' in its name, as that's implied by the existence of its getter. Properties are a really beautiful thing about C#. When working with Java you have a lot of ugly Get[variable] and Set[variable] methods, but C# has boiled it down to reduce such repetition. Don't let that go to waste. Edit edit: And one last thing, I really recommend that you learn a functional language to better understand the nature of function composition. Learning a functional language will really help you avoid these kinds of situations. Check out [Learn You a Haskell for Great Good!](http://learnyouahaskell.com/chapters) if you have the time/drive.
I personally dont like specifying this in front of class properties/functions, but that is more of a style issue I think. For naming [I usually follow Microsofts conventions](http://1code.codeplex.com/wikipage?title=All-In-One%20Code%20Framework%20Coding%20Standards) There is a link there to download the document. Naming conventions in section 4.4. Here is a quick picture that shows most of it: http://i.imgur.com/6KtbH7L.png 
Awesome! Love the smoothness.
Why XmlDocument instead of the newer XDocument?
I don't have time now to do a full look, but from what I've seen from looking at a few classes, there are issues. Ex, in Graph.cs you have a Dispose method, but don't implement IDisposable. And, in that Dispose, you are clearing out 2 lists that don't hold any objects that need to be disposed. So, you have absolutely no need for a Dispose method. Some other obvious issues that I see: you have no tests, virtually no comments, some methods are VERY long, some classes have no behavior, just data and LOTS of static classes. I don't mean to be a jerk, but you asked what I think. I think you have lots of refactoring and code cleanup to do. 
I appreciate you taking the time to address my question and provide advice. Please do understand that not everything I copy/paste from Visual Studio to reddit is production grade shrink wrapped code. Please also understand this is one snippet of code among a larger project (rather a larger idea at this time). There's a very good reason why I am looking at only tif and pdf files, because that is the intention of my program. I can go into more detail if you're genuinely interested but I was attempting to be concise. Thank you
Thank you. This is exactly the type of advice I'm looking for. You're absolutely right. In fact, the Graph.cs (an associated rendering code) is in a complete state of disarray which is why it's disabled in the demo. It's due for an entire re-write since I've gutted so much of it. As for tests, I'll be sure to build some into future demo projects, I was going to save it for later but I'll bump it up on the schedule. I'll also get some more documentation in there too. 
Thanks! If you do delve into the code, Ignore the Graph.cs and Render.cs code. That's going to be re-written next.
I'll get on it! Thanks.
Thank you!
That's because you jumped. Had you gone through each update one at a time you would have said each year, "cool, that fixes half my problems". The jump from 2 to 6 seemed like it fixed everything.
I agree completely, I am merely sharing experience in the hopes that someone learns something from it. Please do not take my comment as some sort of insult. I fully understand what kind of code occurs during the fledgling process, but given your commenting style and question I assumed you were a novice and not merely rushing.
Yes, everyone here has been very helpful and encouraging. My code is going to look amateurish while I learn it. Like many programmers I have a bit of OCD. *Nothing* is "going out the door" until it both looks and operates correctly :) 
The convention at my company in this case would be to have the internal private variable be the same as the property name, but with a lower case starting letter. i.e.: public long FileSize { get { ... return fileSize } } However, I don't think it matters all that much. Leaving it as "filesize" is fine, because it's still descriptive of what you're doing in the code. The most important thing is to remain consistent throughout the project.
I can't C# 
This is a pretty fundamental thing not to understand. You should probably read an intro book on C#. To answer your question, 'filename' is a field that has been declared at class instance-level scope (directly in the body of the DocFile class). That means it exists before the constructor function is run. Where it is declared in the class body doesn't matter, as long as it's been declared at class instance scope (as opposed to method scope, in the body of a method).
&gt; This is a pretty fundamental thing not to understand. You should probably read an intro book on C#. I recognized that already in my initial post. Thank you.
And actually, this is a nuanced point introduction books/tutorials don't explicitly make. Rather than thinking of the code, reading it from top to bottom, think of context and scope. The reason it works is because filename falls immediately inside the definition of the class and so its scope is valid anywhere therein. The example is just as valid written this way: public class DocFile { private string filename; public DocFile(string name) { filename = name; } }
Yep, that's basically what I said.
Pretty exactly how it would be done.
Sorry, I had to type it out myself. Reinforcement :)
Ah yeah, C# is light years ahead.
Because internally it doesn't matter which is declared on what line, the compiler deals with it all.
I figured since it was Saturday and I am just loafing around the house that I would spend a few minutes on this in LinqPad. I am not that proud of the **Parent.Parent.Attribute** call, but its a bit more optimized than the original post. var filterClause = new string[] { "NotApplicable", "Installed" }; var updates = XDocument.Load(@"C:\temp\wsus.xml").Descendants("UpdateStatus") .Descendants("Update") .Where(x =&gt; !filterClause.Contains(x.Attribute("Status").Value)) .Select(x =&gt; new { ComputerName = (string)x.Parent.Parent.Attribute("Name"), UpdateName = (string)x.Attribute("Title"), UpdateStatus = (string)x.Attribute("Status"), }); foreach(var pc in updates) { Console.WriteLine(pc.ComputerName + " : " + pc.UpdateName + " : " + pc.UpdateStatus); //SaveUpdateInformation(pc.ComputerName, pc.UpdateName, pc.UpdateStatus); }
Ya, scope man. It's all about scope.
If the names don't get too long I always try to use the unit too: FileSizeInBytes, FileAgeInSeconds, DaysSinceCreation ... and skip the comment.
Oh, just force of habit I suppose, no.
Nice, there is definitely a niche for powerful real time charting capabilities.
&gt; I need to know why this works You sound like a brat
"fileSize" is fine. Or you could just do this.. you shouldn't have that local anyways. public long FileSize //Method to return size of file { get { switch (Type) { case DocType.tif: case DocType.pdf: FileInfo f = new FileInfo(filename); //Get FileInfo return f.Length; default: return 0; } } }
I'm never able to decide whether or not words like "filename" or "filesize" should be camelcased as one word or two. I try to keep consistent through a single project, but I know I flip flop between projects.
Thank you! The Brat 
Just know that this is NOT the case within the scope of say a method, in regards to local method variables, though the compiler will happily tell you that. This is due to the same reason. Member variables are initialized before the constructor, and all meta data of the class (methods, properties, etc.) is already known so there is no chicken and egg problem there. Code within a method though is of course executed in sequence and must be in order. 
If you can't at least write some basic CRUD/DML in SQL you won't go very far in C#. Most positions I think expect some T-SQL and PL/SQL on top of that. T-SQL and PL/SQL are clearly programming languages. 
&gt;While I am not new to programming I am new to C# and for practical purposes, OOP in general. If you are coming from C, I can see why this is a little strange. When languages like C#, Java, etc. came about, they completely reworked the way the compiler approaches compilation. In C, things need to either be declared before they are used or forward declared. So a function needs to be forward declared if it's definition is not available before it's calling number line. The compiler needs to know "I am expecting to see the definition to this at some point", which requires input from the programmer. I am not an expert on compilers, but the compiler for C# will link variables, functions, classes regardless of where and what order they are defined in. This was made possible when they avoided the .h/.c file relationship; instead linker simply needs to look in the .cs files for definitions. There is also no such thing a *function* in C#, rather instead they are *methods* which are packaged into classes (whether they are static or not), making the linking phase much simpler. In other words, before running through the following line: filename = name; the linker already knows about the existence and where it's defined.
When the PART line is encountered switch the processing method to a new delegate based on the PART number?
Sorry, I'm not really following that :/
I'm just trying to figure out how to set up the logic behind it (if/while/foreach commands and checks). Basically when I say xxx yyy and zzz I mean different code being exucted. 
Easy way for you... not terribly elegant. If it's formatted with just "PART X" on the line then this would work. If the 'PART' is mixed in a line then you would need to read one character at a time into a 6 char buffer.... Anyways something like this. int part=1; string line; Streamreader sr = new Streamreader(path); while( sr.peek() &gt; -1) { line = sr.readline(); if(line=="PART 2\r\n") part=2; if(line=="PART 3\r\n") part=3 switch(part) { case 1: somefunction(line); break; case 2: someotherfunction(line); break; case 3: somethirdfunction(line); break; } }
What exactly is because I "jumped"?
 thanks, that fixed it
What does the code for SaveGame look like?
This isn't really even nitpicking, but pretty much standard. Methods, do things.
this is one of the few times i fundamentally disagree with Mark Seemann: * decompose your composition root to adhere to the single responsibility principle * feel free to reuse the components in different applications his argument is, if you have a hairball of coupling, you shouldn't reuse it. this is correct; but you should not have a highly-coupled hairball in the first place. if you have two applications that are similar enough that you're considering reusing your composition root, you should do what you would do with *any other class:* extract and reuse what is common.
can I turn an arrayofInt1 into an arrayofInt at loadtime? I googled a couple of references to similat issues Japanese http://translate.google.com.au/translate?hl=en&amp;sl=ja&amp;u=http://melan260.net/%3Fp%3D551&amp;prev=search Vaguely similar http://stackoverflow.com/questions/7165375/use-generate-methods-signatures-with-int-insted-of-arrayofint-on-net-web-serv 
You can certainly learn to how program C# by resources online. There are many books, videos, and websites dedicated to this. Finding a job however is another issue. Most software companies require formal education. However, if you build something and actually demonstrate it at your job interview, then you stand a better chance of getting hired.
Becoming a C# developer means that you primarily focus on using .NET technologies. This does not mean that you only need to know 1 programming language. If you want to become a web developer, then you will also need to learn HTML, CSS, Javascript and JQuery, C#, and technologies like ASP.NET MVC, Entity Framework among others. I cannot say where C# will be 15 years from now, but currently there is a good demand for C# developers in the workplace worldwide (especially in Great Britain).
I believe there is an attribute that can allow control of the name that is generated.
Yep. Was going to say this. Unlike in C, the C# compiler doesn't read a source file strictly from the top-down. So there's no need to define variables &amp; methods before they're used. You could define your constructors at the bottom of the class if that's something you like to do. 
Hah, yes, just what I wanted to see if people knew in my question. Still - some courses don't make that distinction.
No, that is completely wrong. It has nothing to do with whether it's compiled or interpreted.
That's a pretty good analogy for scope that will get you really far.
Whenever you have questions about the language itself, you can check the specification. `c:\Program Files (x86)\Microsoft Visual Studio 12.0\VC#\Specifications\1033\CSharp Language Specification.docx`
Your question could be a bit misleading. Originally I thought you were talking about the .NET class [CollectionView](http://msdn.microsoft.com/en-us/library/system.windows.data.collectionview%28v=vs.110%29.aspx). A couple seconds of research in the DevEx doc looks like you can't just add BarButtonItems as a child element under RibbonPageGroup. You have to build them in the BarManager, then use "links" to them within the ribbon control. https://documentation.devexpress.com/#WPF/CustomDocument8174 
On a side note, I would consider calling your user control a "PersonView" so it's more specific and less generic.
I can add BarButtonItem to RibbonPage, that's how I am doing on the CollectionView. Also, the whole point is that I don't have one &lt;Entity&gt;CollectionView for each entity. I want to have a basic CollectionView which can be fine tuned. The issue I am having is how should I create the properties on my CollectionView in order to be able to extend the aspects I talked about.
* Press F12 or use the context menu and click Navigate to Definition. * Turn on native code debugging in the debug options * Go to the Debug -&gt; Exception Settings and check all of the unchecked "throw exception" boxes * Install the auto-code completion plugin that searches sample code for what you're trying to do https://visualstudiogallery.msdn.microsoft.com/4934b087-e6cc-44dd-b992-a71f00a2a6df * Download the optional help files to your machine * Start tinkering
This is wrong on 2 levels: * Most if not all modern interpreted languages will allow referencing things before they are declared in the scope of an object/module. * C isn't an interpreted language - quite the opposite - but C does *not* support calling functions before they are declared.
Okay, I think I see what you are saying now. Sounds like you will want to expose some Dependency Properties on your "CollectionView". You could expose a property with the type of "RibbonPage". Otherwise you could build your "CollectionView" with a default set of button options (i.e. Add, Edit, Delete, etc.) then expose the commands that bind to those buttons via Dependency Properties.
Thanks! Didn't know of that file. 
I think your priorities are wrong. Neither should be processor-intensive enough for you to worry about.
Agreed. If possible, OP should use an event handler to set the bool. Otherwise, my money would be on setting the bool every loop instead of an If statement. I'm no expert about how the .NET runtime optimizes these things, but on an Assembly level it would be a lot more efficient.
This looks fantastic! I have been working on a [toolkit for neural networks](https://github.com/StevenGann/NeuralToolkit) and had been trying to find a good way of visualizing the network. Mind if I use this library in my project? There's no license on your project.
Where were you when I was doing my senior design project? We built a robot controlled by EMG sensors and the team wanted the raw sensor input displayed like this. I was the only programmer. The robot literally burst into flames during the expo, by by golly my GUI and signal processing code were freaking perfect.
Not 100% sure what you are trying to do, but write a simple test doing both types of checks or whatever and run it like 100000 times and see which is faster.
Would this work? x:Name="CollectionUserControl"&gt; &lt;dxmvvm:Interaction.Behaviors&gt; &lt;dx:DXMessageBoxService /&gt; &lt;/dxmvvm:Interaction.Behaviors&gt; &lt;Grid&gt; &lt;dxb:BarManager&gt; &lt;DockPanel&gt; &lt;dxr:RibbonControl x:Name="Ribbon" RibbonStyle="Office2010" DockPanel.Dock="Top"&gt; &lt;dxr:RibbonDefaultPageCategory Caption="defaultCategory"&gt; &lt;dxr:RibbonPage Caption="Home" RibbonPageGroup="{Binding RibbonPageGroup, ElementName=CollectionUserControl}"&gt;
Set it every time, its faster to set a value than compare one and then eventually set it. But couldn't you just use an event?
The property which holds the groups, "Groups", doesn't have a setter, so I can't write a markup like that.
http://www.codeproject.com/Articles/274461/Very-fast-screen-capture-using-DirectX-in-Csharp If you're going to try and cap the screen, you can't use GDI, it's too slow. DirectX should do the trick, and should even work if there's a full screen game playing. 
Was just going to post that link but you beat me to it lol. Good article, and a much better method over GDI.
It's a game loop so shouldn't I just check for input every loop?
Is there a reason you're using a game loop instead of an event-driven approach? Look into the difference between polling and interrupts. For events that happen at most a few times per second (such as a click being released), you'll get better performance out of events than a polling loop.
&gt; Well, you obviously cant write something like this: &gt; new typeof(string)(); Sure you can, just slightly different: Activator.CreateInstance(Type.GetType("MyType"))
This works great!!!! thanks you! 
This SO post should guide you in the right direction: http://stackoverflow.com/questions/2078914/c-sharp-dynamic-generic-type 
What he means is why not create a new class, overriding the panel class. On phone so forgive my formatting but: public class MyPanel:Panel { public int MyValue{get;set;} } edit fixed formatting
TIL about DBA responsibilities, thanks. Like I said in another answer, I think the fact that english is not my first language (and my general difficulties to convey a tone via text) are hurting the discussion, so please ask if you doubt about my intentions. My initial point was that SQL and C# are far from the same kind of tools. My present usage of "same kind" would consider C# and Java as similar, ie. I can imagine a lot of applications where one language or the other would fit equally (for a given notion of "equally"). In this case, I interpreted OP's question as concerning "similar" languages, potential alternatives, which is why I called SQL "irrelevant" *to this specific question*. I am a c# dev, I do know and use SQL, but consider it as rather an orthogonal solution to c# than an alternative. Same thing for XAML. I would answered the same thing if someone had answered with a specific algorithm name. I hope this is clearer than my previous answers.
Thanks for the link! I'm on Code Project every day, but I never found this article. I'll test it ASAP, but I'm guessing this will only work of DirectX application? If so, I assume I'd need to support OpenGL seperately, which I was trying to avoid by using GDI. Surely, regardless of the API used, there's some universal point where the full contents of the monitor are kept.
Thanks a lot! ;)
FYI this is known as the [factory method design pattern](http://en.wikipedia.org/wiki/Factory_method_pattern#C.23), in case you ever hear that phrase thrown around.
#####&amp;#009; ######&amp;#009; ####&amp;#009; Section 5. [**C#**](https://en.wikipedia.org/wiki/Factory_method_pattern#C.23) of article [**Factory method pattern**](https://en.wikipedia.org/wiki/Factory%20method%20pattern): [](#sfw) --- &gt; &gt;Factory pattern deals with the instantiation of object without exposing the instantiation logic. In other words, a Factory is actually a creator of objects which have common interface. &gt;In the above code you can see the creation of one interface called IPeople and implemented two classes from it as Villagers and CityPeople. Based on the type passed into the factory object, We are sending back the original concrete object as the Interface IPeople. &gt;A Factory method is just an addition to Factory class. It creates the object of the class through interfaces but on the other hand, it also lets the subclass to decide which class to be instantiated. &gt; --- ^Interesting: [^Abstract ^factory ^pattern](https://en.wikipedia.org/wiki/Abstract_factory_pattern) ^| [^Creational ^pattern](https://en.wikipedia.org/wiki/Creational_pattern) ^| [^Builder ^pattern](https://en.wikipedia.org/wiki/Builder_pattern) ^| [^Factory ^\(object-oriented ^programming)](https://en.wikipedia.org/wiki/Factory_\(object-oriented_programming\)) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cnteduy) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cnteduy)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Server Side. I have an N-Tier design with a Business Layer, Client Layer, Data Layer and Hosting Layer.
Have you looked at a library like AutoMapper to convert between DTOs and Entities? You can set up complex mappings to do the grouping and calculation there.
For our Dapper projects we have the connection data stored in the configuration file (web.config or app.config). We then have a binding setup to IDbConnection in our IoC container that gets injected into our repositories.
Yup. Depending on how you use the bool and the compiler it might be optimized to fit in a register, whereas the conditional (if not optimized away) could possibly cause branch prediction in the processor, which slows down modern processors quite a bit. That said, it only matters if you are really *really* crunching for speed and you are trying to hand-optimize, which is unlikely.
The unity 3D game engine uses C# for scripting. There really isn't anything better than the prospect of creating games that can motivate kids to learn programming.