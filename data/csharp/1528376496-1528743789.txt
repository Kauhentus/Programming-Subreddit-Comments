This is actually a feature I'm really interested in trying. We've got some greener Devs on the team and it might be really useful for helping them through some issues.
I've had a lot of fun pair programming new features in Angular 6 with another developer. It becomes a race to see if they can finish their change before I save all files and the Angular app won't load because he was in the middle of typing when I saved. Seriously though, it makes collaboration a ton of fun. I really dig it!
Title should say that this is an Early Access Build.
Given my assumption (which admittedly might be wrong) that there likely aren't that many Delphi programmers out there, especially relative to C#, I think you've got a good reason for making the arguments. A business has to consider the long-term maintenance costs along with employee satisfaction.
What a pointless criticism. You know a lot of Visual Studio is written in C++, right? 
It's not my primary tool. GCC on Linux is. Even if it were, though, it's not just the $500, but $500 every couple of years. And that is just one tool I need to get my work done. Of all the software I use, ranging from VS to Photoshop to Office, VS is the most expensive. I don't take any business expense lightly. But I really didn't mean to harp on the cost. My original comment really was only meant to point out that releasing new versions of the tools so frequently was quite likely just to earn money. Usually, there isn't that much with each release to justify the cost.
While I agree that it's a pointless criticism, the relationship between C++ and C# is fundamentally different from the relationship between Java and C#.
I think a lot of people prefer a highly-capable, feature-rich, free IDE. You don't need to be a fanboy for those qualities to be attractive.
I think you might be doing the tests wrong then. It's probably the hardest part of automated testing in my opinion is making durable tests. You still program to the interface just like normal. I'll try to get some resources on that and send that to you. 
I take it that you did read the article I linked. http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html
How does the relationship between c# and c++ benefit each other in a way that Java and c# dont?
I'm confused by your comment. Are you saying that you would benefit from 64bit because you're constantly maxing out memory or are you saying something else?
Yes please.
Bear in mind that the bar to attain here isn't "how does it benefit the user" (because the IDE language shouldn't matter), but "how does the pairing of languages emotionally impact a developer". Again, I am NOT saying this is a valid way to choose an IDE, just that mixing Java and C# does feel a little squicky at an emotional level. To me, and to certain others.
Personally I liked writing the addons for rider; the skills to be pretty transferable and things just seem to work the way you expect them to.
What do the add-ons do?
helping to navigate our the companies code base to find what you are looking for 
Neat! Sounds useful. Large code bases can be a bitch.
Yes, I'm saying, I would totally benefit because I see that VS is limited by memory constraints
This is something i also love about rider, it is amazing at loading the codebase relatively fast. Once you get past the indexing everything just seems so smooth whereas visual studio just felt continually clunky.
You actually did. Your comment is phrased like people complaining just don't know what for and why they want 64bit. Looks like you have not been hit with VS slowing down/crashing/whatever just near 2Gb mem usage. See [KillianDrake](https://www.reddit.com/user/KillianDrake) comment for example
I don't understand your comment - and I don't understand its relation to the discussion about the reason for MS to release major updates every two years.
You can either put people on writing a 64 bit version which might not have too many benefits, or put them on other features which will be more useful (in their eyes) and earn more money. It's a company after all :) 
You shouldn't use one article from an opinionated Rails developer to decide how you should be doing things. Even if you don't do TDD, there's value in test-first development, even if it's just setting up simple integration style tests.
I found the guy from marketing
No, I just made a conjecture about the fact that I don't believe most of the people who pile into every discussion with "64\-bit" as their first comment actually know how or why they would benefit, or if they would benefit at all. What the fuck does this have to do with my personal experience or whether VS crashes/slows down for me? It's you who is projecting here. You can disagree with my opinion all you want, but don't tell me why I make particular observations. Additionally, I was very careful to say "most people" and not "all people" which to any intelligent person should imply that yes, some people specific workloads may see some improvement.
You're missing the point entirely. The problem is Java/JVM itself, not being a language other than C#! The problem is running a IDE in a JVM taking a performance hit and being a resource hog pointlessly. If it were a Java IDE, it makes sense since you need to use the JVM anyway. But Rider is running in a JVM because it's just recycled version of IntelliJ (Java IDE).
Have you disabled codelens? 
Possibly. They haven't decided yet if that'll even ship on Windows 7, and even if it does, there's probably plenty of third-party stuff that makes it hard to work with in practice.
I believe this sub-thread is focused on the statement: &gt;Personally I wouldn't go with MS but give Rider a chance... And the follow-up: &gt;Lots of fanboys who aren't capable of thinking and reasoning about things I wasn't referring to MS's release schedule, nor would I usually make an IDE decision based on release schedules.
That can be true, while it is a lot faster now after a few updates. If you don't use giant plugins like ReSharper (which isn't all that usefull in 2017) it's extremely fast.
I'm pretty sure the cast to object which uses the non overloaded version of == was put to prevent exactly this sort of code. Overloading some operator and using it directly is one thing (although it's a bad idea in most cases) but changing the behavior of the conditional access operator by overloading some other operator would have been a extremely dumb.
Come to think of it, this would probably be amazing for CS classes.
Ah OK. No it was related to the downvotes because we said the main motivation is money. I don't do IDE decisions based upon release schedules 😉
&gt; But Rider is running in a JVM because it's just recycled version of IntelliJ (Java IDE). You say that like IntelliJ is a bad IDE. It's not.
Ok yeah, that makes sense. I want ReSharper to not suck as much. I think it has to run out of process currently because of the memory limitations.
I have developed [https://freesnippingtool.com/](https://freesnippingtool.com/), site with php and software using c#.
Thankfully no, but I have had many meetings with them and I'm certain that we speak different languages.
&gt; the final build for ios requires a mac As does any on device debugging, and up uploading to the store.
I will, I'll let you know how it goes
Oh no, I love it for Java. Way better than eclipse.
You could start with a simple website? Are you looking for a project to get involved with or to start one yourself? You could always try and find a project on github that you could contribute to and its a great way to start looking at code written by other people.
If the function accepts a `string` argument, they are exactly the same. You can, however, have "magic strings" that use `FormattableString` as a parameter. https://www.infoq.com/news/2017/09/EF-Core-2.0-4
Checkout courses too, if you're into games try this one [https://www.pluralsight.com/paths/unity\-game\-development\-core\-skills](https://www.pluralsight.com/paths/unity-game-development-core-skills)
Hmm, that's interesting. The article speaks of it being dangerous for SQL as it doesn't give it compiler warnings but for something as the example I should be okay to use it correct? I just am using it to print strings.
It also identifies addons specific to certain builds, like installers etc
Yes, both should produce the same result. {{$"{DateTime.Now}: {t}"}} is just syntactic sugar for {{String.Format("{0}: {1}", DateTime.Now, t)} You can read about string interpolation here: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated
string interpolation is fun, and I highly recommend it unless you have a good reason to use String.Format (such as the magic strings mentioned elsewhere). In my experience it's far easier to read something like $"{DateTime.Now}: {t}" than String.Format("{0}: {1}",DateTime.Now, t). As you've suspected, during runtime they produce the same thing.
This is crazy. This makes it so much easier to manage. Do you know of any other "syntatic sugars" for csharp? Only one I can think of is expression bodied methods.
I’ve had some cases where string format was more clear, but not many. And have options is great
Well, there's a lot of syntactic sugar, both newer and older. Extension methods are syntactic sugar for static methods so that instead of `Something.Method(someInstance, 32)` you have `someInstance.Method(32)` as if it were its own method. Auto-generated properties are syntactic sugar too. The fact that you can only say `{ get; set; }` and it creates a private backing field for you. The `nameof` operator is some sort of syntactic sugar that brings refactoring benefits with it. You could say the new [value tuples](https://msdn.microsoft.com/en-us/magazine/mt493248.aspx) are syntactic sugar for `out` parameters.
string.format being clearer than interpolation is covered under "good reasons" :)
First thing I do on a new VS installation.
Yea. It's a great idea in general and I use it all over the place. I just don't like how they use it in EF Core.
The Safe Navigation Operator is pretty cool var foo = new Foo(); foo?.getParent()?.getName(); will not throw null object reference exception if foo or result of getParent() are null
Pair programming is quite possibly the most ridiculous software engineering fad of the past 40 years. The only use for it is if you can pair 2 net-negative programmers and subsequently make them less productive.
64 bit will nearly always be faster. There are a ton of compiler optimizations that can occur in 64 bit that can't in 32. Not only does it allow VS to use more memory (which it does cap out quite often), it could take advantage of the compiler optimizations for parallelization (which will help nearly everything visual studio does) as well as allow in\-process plugins to expand more, so re\-sharper won't feel like a thorn in the side. I would love to see these blog posts you're referring to.
It’s dangerous for SQL because of SQL injection attacks, you should read up about those. 
Use Entity framework + stored procedures and you'll be fine 
 No where does it state it's a fully new program lol? This is probably the same visual studio just with some breaking changes. It's how they do semver. (2017 is version 15, 2019 is version 16, etc.)
Try the MS Direct3D tutorial series https://msdn.microsoft.com/en-us/library/ms920749.aspx
I don't disagree with you. I still hold to my point though that most devs won't see a huge difference.
Ok, i started with using 2017 version :D, i just thought they are completely different, thanks for information!
\&gt; No, I just made a conjecture about the fact that I don't **believe** So, you are exactly extrapolating your experiences to others. People pile every discussion because having this memory limitation is fucking infuriating. \&gt; Additionally, I was very careful to say "most people" and not "all people" like you have some papers for these "most people"? If no, any intelligent person would directly dump your arguments 
Honestly, I think 64bit would even help them find and fix those mem leaks in preview version for example.
String interpolation ($) also allows the same formatting strings String.Format allows. Debug.Log($"{DateTime.Now:dd/MM/yyyy}");
Non-Modal Quick Watch window please. That's all I've wanted for the past 15 years.
wait is VS 2017 not 64 bit?
And I thought our biggest codebase at 20ish? projects was big lel
&gt; 64-bit version of VSCode well, electron is alot different than the C++ COM API (guessing) codebase they got for VS... so idk what the claim is here.
It can be situational, but very beneficial when applied to the right issues. Dismissing it out of hand is missing out. For example, when I started my most recent job, my coworker and I did pair programming together on everything for the first 3 months. It quickly got me over the logistical hurdles of the programming environment, gave me an accelerated practical way of learning the business domain, and quickly got me up to speed on our coding standards and best practices. It was also a bonding experience in that I now knew exactly how to work well with my partner and developed a sense of trust in his work. Did I mention that he was actually my subordinate? We work really well together without a lot of discussion because I already know how he thinks and it was because we paired. I would highly recommend this practice whenever you bring a new developer on board. Not forever, but long enough until you feel like they get it. Are you developing a new library or a new architecture? Why make decisions in a vacuum? Pair up with someone and discuss the issues you face as you go. You'd be surprised at how well this works. 
Wtf
It’s not just code lens though. I use fsharp too and had to just go in and uncheck everything in the settings to even type without it freezing. Code lens isn’t so bad these days.
Yes, there are many C# / ASP.NET jobs out there.
There are, but every language goes in and out of popularity. It's pretty much mandatory that people in this industry learn new languages over the course of their work. 
C# is a widely used language, it's worth using and decent starting point. I think I recently saw that something like 30 or 40% of job listings are looking for familiarity with C#. C++ is also good to learn and it's similar to C# in syntax, so it's not overly confusing to learn both at the same time. If you get free time mess around with other styles of languages, like Python, XML and Java, which are also widely used tools to have in your tool belt.
In my program we started with Java and went from that to C#. I love the C# though! And I’ve been interested in learning C++ too. Thanks so much!
How do you predict which ones will go in and out of popularity? Are there places you can check to find out and learn so you can get a head-start on learning them before they boom in popularity?
Thank you! That helps a lot
yes
&gt;How do you predict which ones will go in and out of popularity? You can't &gt;re there places you can check to find out and learn so you can get a head-start on learning them before they boom in popularity? Just get good at programming, learn 2 or 3 languages that are sufficiently different, and you will be able to switch languages very easily in the future, no matter what comes along. C#, C, Go, would be a good combo, or C#, Rust, and F#, or C#, Javascript, and Python. whatever interests you. Once you've seen a few languages across the spectrum you grok most of the ideas that are out there. 
Yes, but C# + JavaScript or C# + SQL is much, much better.
Nope, which means SSMS isn't either. Drives me nuts. 
All of the things you mention can be covered by proper team communication and don't require pair programming.
&gt; C++/CLI might be coming to .NET Core as well Oh man that would be huge!
The yearly Stack Overflow developer survey can provide some insight into which languages are most popular. https://insights.stackoverflow.com/survey/2018/#technology
Wow thank you!
Yes. The beauty of C# is you can do desktop (Mac, PC, Linux), mobile (Xarmarin: iOS, Android), games (Unity3D), and now even potentially the browser client (as Blazor matures). I think momentum is gaining for C# since Microsoft open sourced .NET, and Oracle seems to be doing what it can to slowly kill off Java.
Hey, random guy here, I did some college Java classes before I even knew what C# looked like, and they're definitely similar. Hope it works out for you too!
C\+\+ syntax is similar to C#, but programming in C\+\+ is polar opposite of how you program in C#. It would be extremely confusing learning those two at the same time.
My college started us with C++ and we moved into a mix of C++, Java, C# about 6 months in. I didn't find it too different. C++ required understanding pointers and memory management, but overall the basics were the same. You have a main that executes when you run, you make functions, classes, variables and piece them together to handle inputs, perform actions and spit out outputs. C# has it's differences and C++ is a bit more involved, especially with dynamic memory management, but I didn't find it hard to learn both at basically the same time.
Just as an FYI, you are able to use the community edition for closed-source commercial purposes (including selling the software you write) as long as it's 5 or fewer developers, and you turn over less than 1m USD (or equivalent) per year. Thought I'd clear that up just in case you are paying for something you don't actually need to.
That's because you went from low level to high level. If you know C++, GC'd languages will be a breeze. No such luxury going other way _ Being used to GC and suddenly having to manage memory urself
Data seeding: https://docs.microsoft.com/en-us/ef/core/modeling/data-seeding
It’s a good one to know, but knowing good fundamentals is more important than which languages you know. I’ve been hired for jobs using languages I’ve never used before just because I could demonstrate knowing all the other stuff besides the specifics of a given programming language.
Hope so it’s currently paying my bills!
I've never heard anyone call them "enumerator lists" before, typically people call them just "enum". From what little I've seen your book seems kind of badly/confusingly written, to be honest. Anyway, if you want the `Enum` class to give you, say, the names of the values in the enum, you need to tell it *which* enum you want to know about. You can find some [examples in the documentation](https://docs.microsoft.com/en-us/dotnet/api/system.enum.getnames?view=netframework-4.7#System_Enum_GetNames_System_Type_). Also: [typeof](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/typeof)
If you go with C# and Javascript, you're not going to have any real problems for the foreseeable future. 
I'm not missing the point, you never made it. If you want to criticize the performance of Rider, that's fine, but it really doesn't sound like that's your issue. I've used other Jetbrains products and they've been more performant than Visual Studio.
They're also fundamentally irrelevant.
I loved when they introduced this. So much nicer looking then if (foo != null) { var parent = foo.getParent(); if (parent != null) { string name = parent.getName(); //Do something with name } } Now I could something like: Console.WriteLine(foo?.getParent()?.getName() ?? "(No information available)");
Fine, think what you want. You're clearly one of those people who thinks they know the minds and intentions of others than they do, so there's no point in arguing with that kind of arrogance.
It's from the book C# programming in easy steps, here's the section I got it from: https://i.imgur.com/IvyhkCp.png I think it was called enumerator lists to make it easier for beginners to know what the author is talking about. I know what the Enum class does I just want to know what it means when the data type of the list must be an "argument" for the Enum class to work with enums.
Typescript is a great compliment to C#. At many jobs the two are used in tandem: Typescript on the browser (with popular frameworks like Angular/React/Vue) and C# on the server-side. It makes you a double-threat.
There are a lot of opportunities currently in C#, but programming languages are always evolving. I've been programming professionally for 20 years and I've had jobs in all these languages: COBOL, Perl, Java, JavaScript, Ruby, and C#, so being able to get up to speed in any language is more important than knowing any specific language
It mimicks the opinion I've had for years. And it's the rails creator and also a mention another pdf article at the bottom. People have their own opinions, that's why I said above not everyone considers unit tests useful as per the subject of this article. There's a big difference between unit tests and integration tests.
Everyone wants 10 years of Angular
&gt;What does requiring the data type of the list as an "argument" mean? Arguments are values passed into a function. Let's consider one of the methods that works with Enums: https://docs.microsoft.com/en-us/dotnet/api/system.enum.getnames?view=netframework-4.7.2 This is a public (meaning usable by other assemblies) static (meaning you don't need an instance of the Enum class to use the method) that returns an array of strings. The method is named 'GetNames'. It takes one argument of type Type (named 'enumType). 'Type' is one of those words used for multiple things; there is a concept of [types](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/types/) and there's a class named [Type](https://msdn.microsoft.com/en-us/library/system.type(v=vs.110).aspx) that represents information related to a given type. As an aside, it's important to use and remember the standardized terminology for things, because discussing programming becomes impossible when different people use the same words to mean different things. Becoming familiar with the terminology is an important part of learning any language. &gt;And why must the list name be assigned as an argument to the "typeof() method"? Because each defined enum has a different type, and the way to get the Type object corresponding to it is to call the typeof() method passing in a reference to the enum you want information for.
C# and Java are widely popular backend languages at the moment. You can't go wrong with either of them. For browsers, JavaScript is the de-facto standard. So a good combination will be C# + JavaScript. Also, Python is pretty popular among Data Scientists which is pretty hot at the moment. There are a few niche languages like F#, Elixir, Elm etc. which I encourage you to learn but not as your main language. When you become a seasoned developer you can decide for yourself whether you want to make one of those languages your main language. The thing is, technologies will change and you have to continously adapt too. But it is not that difficult unless you go off to Himalayas for 10 years.
I saw it here https://twitter.com/matthewwarren/status/997054590796300288
Try r# w/o VS. It's called rider and it works really nice even on u series processors.
C# + SQL + Javascript + basic HTML is pretty much a foolproof way to get tons of job opportunities. The above means you can be a full stack, desktop and web developer as well, whatever the job requires.
See, this guy gets it! Why doesn't MS?
Most new projects will not use Katana/Owin and will just use standard [ASP.NET](https://ASP.NET) Core conventions. Real time projects (if I understand your question) will use SignalR or Websocket middleware as desired.
Thanks for your response
I would pay to have my C++ and even C# builds with some cloud speed up. An i7 or Xeon at work isn't fast enough to avoid waiting times.
I still don’t really understand what a framework is — is it just like a set of libraries? I worked with Entity Framework as my entry point to C# (hobbyist) and that was kind of the vibe I got but most of the stuff I do is in Python with sklearn/pandas/numpy and you don’t hear much about frameworks on that end it seems. 
Ya. That's certainly different going from manually managing memory from a garbage collector language. But that's really just one aspect. Going from C# to C++ might be a bit harder, but if you take a few weeks to study memory management and pointers, the rest should fall into place. And remember, you can functionally use C++ without dynamic memory or pointers to get started and learn a bit before diving fully into it.
Befriend the three kings and you'll never have money worries as long as you live: * C# * SQL * JavaScript 
create a PowerShell script in the root of the repository that does the restore. it's local development concern that needs to be done infrequently. add the instructions to the README.md. making it easier to drop and reset your local database should remove the friction/alleviate the concerns of the team. it sounds like too much data to change into seed action via EF. 
C# is also a great language to learn if your main job isn't a software developer. I work in Engineering a recently wrote a program to read text in PDF's for document transmittals and another to find and replace strings in multiple HTML files. It was surprisingly easy to pick up! I made the mistake of trying to learn VB first based on a recommendation from a co-worker, but quickly realized there's about 10x the support online for C# than VB.
&gt; Oracle seems to be doing what it can to slowly kill off Java It had a lot of market penetration and even more potential, but Oracle pissed it away. If they had treated Java like Microsoft treated C#, Java would own the world right now.
op is probably doing the needful
As much as I love Typescript, OP should focus on JavaScript because Typescript is a wrapper around JavaScript.
I just finished AP Computer Science A on my high school virtual school, which is pretty much a Java course. 
Yes there are plenty of jobs in C# but I’ve noticed a growing trend towards MVC so I’d definitely be learning that. I started in PHP and for a job needed to learn Android to make some apps and then started playing with C# which I grew to love. Now I’m mainly C# based and currently working on posting all of my existing projects over from PHP.
However, if he’s already familiar with C# it is such an easy step that there’s no reason not to use TypeScript. Also, in my experience it feels like such a step back if you just use plain albeit modern Javascript (async/await etc.). I’ve been using React with TypeScript for a while now and our dev teams haven’t had much difficulty using it over vanilla ES6/ES7.
The best part of c# is that when transitioning to javascript, it will feel pretty much like c# lite with a few quirks, IMO.
&gt; I think it was called enumerator lists to make it easier for beginners to know what the author is talking about. I think the authors need to work on their use of language. Have a look at the doc for GetName and it might help you understand. https://msdn.microsoft.com/en-us/library/system.enum.getname(v=vs.110).aspx
Definitely. I just graduated and I’ve already found and interviewed for a fair number of opportunities as a C# developer. Make sure you’re familiar with .NET and SQL though, I haven’t found a C# development job that didn’t ask for proficiency in both. 
I have seen that too and currently learning MVC5. 
At least in the Denver area, if you know C#/SQL/HTML then you will literally always have a job unless Microsoft takes an incredible, sustained dumb on the language. Because, even if that happens, many companies will be stuck with the current stack for decades.
&gt;I still don’t really understand what a framework is I don't blame you! Sometimes I struggle with this term myself. Sometimes the word itself can be somewhat abused and I often see it applied as a coverall term for a lot of different things. [I quite like this Quora answer, which gives a couple of different perspectives.](https://www.quora.com/What-is-a-framework-in-programming-1?no_redirect=1) 
I have a lot of success using paired programming with junior developers, especially those fresh out of college. It really only needs to be done for the first couple of assignments before you start loosening the leash.
I wouldn't say that's exactly true. Some languages like C, C++, Java, and C# are so ubiquitous that even if no new projects came out for them, they'd still be massively popular for decades.
Definitely, although it seems that certain cities have preferences for C# or Java. Chicago for example has a massive market for C# devs, and it's not that hard to find one paying 6 figures once you become experienced.
Yes. I haven't had to actually go out and apply for a job in a long time. The last 3 I've had (2 contract and my current full-time) have been from companies or recruiters reaching out to me.
&gt;To be honest, I don't think most of the people screaming "64\-bit" even know (which is probably your point when you asked). They just assume 64\-bit equals more performant because well
Thanks for the update. Please keep us informed about any other libraries you don't like.
GUI automation with 3rd Party tools
If you have rewriting tools, yep. Sadly, those haven't been supported in a while. But, for the future, that's probably the best way to do it. 
It posted before I was finished typing, it was ann accident I had much more to write
Excellent points. Static analysis can emit warnings or errors at runtime that a constraint may or will be violated in the code that is calling a method. Now, one could argue that you could just check for if/throw blocks at the very beginning of a method and assume those are preconditions, and the Code Contracts tools did have an option to do that, but a conservative analysis really has to assume that throwing a exception is part of the method contract. Using code contracts makes the intent clear, if any code that calls a method and violates the contract, it can be flagged as a compile time error. 
"few"
And C# + SQL + JavaScript better 
I'm of mixed opinion here. At this point the type system in Typescript is complex enough that I have a hard time calling just a wrapper around TypeScript.
What kind of things is C# used for in industry?
Short answer: Yes, definitely, at least for now. Long answer: Most developers end up as polyglots, as certain languages and frameworks are better suited to certain tasks - square peg, round hole, etc. However, C# is extremely versatile, and fits a lot of use cases. The last three jobs I've worked have all had their primary codebase written in C#. That said, even as a C# dev, don't expect to end up writing just that all day - you will still need to have either experience with or the ability to learn popular supporting languages such as JavaScript (plus one or more of its "hot" frameworks), SQL, maybe Python - the specifics really depend on the exact role.
While I agree that C# is infinitely superior to Java, I disagree about Oracle killing off Java -- it was SUN that did that. Oracle actually breathed new life into it. Not enough, IMO, but way more than Sun managed. 
Depends what you want to do and where you are. The only real school near us teaches primarily .net so that's what most of the local businesses work in. C# is a little different to some smaller languages due to the fact its so widely used and so heavily backed my MS etc, so there will be work for most of your lifetime, but its worth exploring other languages that might compliment it (eg something like Go, Python, even F#) as the more tools you have the more ways you can tackle a problem. My whole career has been 90% Net and 10% stuff like JS with some other scripting style languages here and there. The main thing I learn is really tech stacks, stuff like message queues or non sql dB systems. The most important thing is to do what you enjoy, programming is a hard job, the last thing you want to do is burn yourself out doing hard work you don't even enjoy on a good day. 
This pretty much sums it up. Learning the principles and general logic of how most programming languages work is going to be more important than memorizing syntax. Syntax is important obviously, but being a good programmer involves constantly learning and improving 
I got some recuiter spam the other day that wanted 10 years of Angular 5. 🤷‍♂️
At least enough SQL to understand what something like EF is doing under the hood Ave why your query takes ten minutes to execute because of how EF generated it. 
not sure, I'll revert to you with promptness
Can confirm, this is how we are doing a lot of our newer projects.
I don't think that word means what they think it means.
I think you mean typescript. 
Momentum is lowering. Stack overflow survey (best data available) has c# down from 4th to 8th place in popularity. The future are progressive web apps and things like Electron, whenever some people like it or not.
Same here. It is also paying for my honeymoon.
What kind of things do you have to develop? 
1. Make a conjecture about general attitudes 2. Tell someone what they think, and after they tell you you’re wrong, still insist on it. 1. Me. 2. You.
That's how Sun treated Java until it was bought by Oracle... That purchase happened around the same time that Microsoft opened up. Net
Suing Google for the Android use of Java APIs is a surefire way to kill its growth outside of server-side, officially-blessed runtimes.
&gt; Stack overflow survey (best data available) While it may be the best data publicly available, it isn't good data. StackOverflow is biased against mature languages, because people ask fewer questions (and thus don't go to StackOverflow) for problems they can easily find answers to. New languages with poor documentation are over-represented on StackOverflow, for the same reason.
he said survey, not stackflow activity analysis
&gt;Momentum is lowering. Stack overflow survey (best data available) has c# down from 4th to 8th place in popularity Yes but this is lumped in with things like JavaScript, HTML and CSS. It's not a good representation of actual language usage IMO. &gt; The future are progressive web apps C# is not a front end language so this is not relevant and also, C# can easily be incorporated to build the APIs that PWAs rely upon.
I disagree, looks like the author is using "enumerator list" to refer to the enum type itself while an enum is a variable typed to the enum type. Enums can be a pretty confusing concept for beginners so using this distinction can be helpful for clarifying whether we're talking about the type (list of enum values) or a variable typed to that type (one enum value).
But there's usually a dip that you have to be able to weather. Look at C++. Never really went out of style completely, but there was a period where there were far more experienced C++ programmers than *new* jobs needing C++ programmers. If you were an entry-level programmer looking for a job doing C++, you'd be competing with tons of people who had been doing it for 5+ years at minimum. Of course, if you can weather that dip, you'll get to where C++ is now. The older programmers retire, the other programmers move up, and now it's really hard for companies to find programmers to work on C++.
I started working as Asp. Net core developer recently. It was first time I had to use JavaScript. JS is disgusting hell.
&gt; You can't You can't guess what will remain popular, but some languages you know are going to go out of fashion. PHP, for instance, has no redeeming qualities other than ubiquity. A language like that always drops in popularity when something else gets ubiquitous enough without having the same critical flaws. Languages tied to a specific vendor product generally go out of fashion once that product loses popularity. I wouldn't invest my career in PL/SQL unless you want to be a DBA. Languages with performance problems that don't really solve any specific problem better than other languages are usually doomed to future niche status, as well.
as a programmer versed in C++ and C# , how can I improve?
A Framework is basically a set of tools, libraries, and sometimes even reusable products in a given language. Django is a python framework (and also a product). The boundaries are kind of blurry, obviously. A library that provides functions that solve a narrow problem (like Math) usually isn't called a Framework. A set of math libraries and orchestration libraries all bundled and designed together to help do Machine Learning would be a framework.
It's not even syntax - it's *libraries*. It takes me a day to learn syntax and then I'm always spending weeks or months learning what functions do what.
Even the survey is biased towards visitors to stack overflow, which is a population biased towards people asking and answering questions.
Then call it the ["enumeration type"](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/enumeration-types) or something. Both "enumerator" and "list" have important and completely unrelated meanings in C#/.NET. I've googled the term out of curiousity and found excerpts from the book, and the terminology is a mess. With sentences like *"Many of these require the data type of the list as an argument so this can usefully be assigned to a var variable by specifying the list name as an argument to the typeof( ) method."* it's no wonder OP is confused. The author seems to crap these books out by the dozen, so I suppose the quality shouldn't be a surprise.,
Good point! And honestly you can go a long way with basic programming knowledge and a lot of google
I agree with this. Seeing "kids" coming I to companies promoting TypeScript because it is "better", easier to test and will have less errors then vanilla JavaScript. Then 6 months later reviewing to the TS code from the guy and see that nothing of the promotion is there. No tests, it is not even written testable. It has more errors that one would have with vanilla JavaScript. Turned out it was a guy just wanting to use the latest without knowing the basics of JavaScript.
Cross compatibility always wins (see Java). And industry is moving away from Java virtual machine to browsers. 
Being a good developer is what gets you the best jobs, and part of that is knowing a wide set of languages and tools and being able to apply ideas from Language A within Language B. But yes, C# is a language with plenty of good ideas and is fairly open to incorporating good ideas from other languages.
Yes, especially now with .net core being in a good spot. Most of my contracts come from companies who want to get off of windows server, so I refactor their .net framework projects to core where they can get more bang for their buck scaling out linux servers. 
It depends on the framework. Angular is a set of libraries but more importantly a set of patterns. It doesn't help you much on a small problem but it is intended to make it easier to reliably scale. 
You can always use SQL and/or the command line to trigger the database restore.
Last I heard, ASP.NET Core is based on the Owin standard.
&gt;arrogance No, you
I tried it and I liked it but it still lacks needed VS features. Rider just better splits UI and bg work so you can still type/change tabs/do smth while R# host is trying to find an answer to universe questions. But still at has its autocomplete freezes.
&gt; JavaScript Can I settle for TypeScript?
actually, probably not. most jobs involve a fair amount of legacy code maintenance (in my experience anyway). you can code new stuff and refactor in Typescript, but there is going to be some crusty javascript you need to bugfix somewhere along the way. I switched jobs after 10 years in the industry and ended up adding new features to 16-bit assembly code in an early assignment (yuck). 
Sorry, should have had an explicit /s.
hah, live and learn :) javascript has a few neat features but overall I'm not a fan. 
10 years on an Enterprise System built-in vb.net web forms and jquery. Luckily today I also get to work on a similar system in c-sharp. Net core MVC with Vue Js I'm still fond of VB though. Don't judge. 
JS is just a really different language than what you've previously used. It's entirely possible to write good JS, it's just not easy to directly translate your existing skills to it. Also, DOM manipulation sucks because the DOM is a mess. Frameworks have made a lot of that better but it's really only abstracting that mess away. That's not a JS problem though. 
Current [ASP.NET](https://ASP.NET) Core documentation implies that you need to use an adapter to run OWIN on [ASP.NET](https://ASP.NET) Core, or [ASP.NET](https://ASP.NET) Core on an OWIN server. There is a middleware with a an appBuilder.UseOwin() that is also mentioned in documentation, but I am not under the impression that any of those approaches are typical or popular in [ASP.NET](https://ASP.NET) Core projects or templates today.
Thank you.
Sorry for dumb question, but what is EF?
Currently been employed as a .NET developer for 3 years now. So yes, there is a market.
&gt; Is it a language worth focusing on with lots of potential jobs attached to it or should I use it as a stepping stone to other languages? Yes.
Yes. Yes. Absolutely yes. There is a huge shortage of MVC (the .NET/C# kind) web developers.
Entity Framework. 
Lol, or not.
If the internet ever goes away I'm screwed!
Entity framework
I guess after coding for 10 years, all the languages look the same.
Entity Framework
As much as I love the discussion, /u/elavir should keep in mind that the natural bias of this subreddit is towards C#.
Looks like David Fowler said in late 2014 on twitter that vNext would deprecate OWIN, but its still available with adapters. I'm guessing there were enough squeaky wheels to keep it alive.
I love the advice I’ve received though!
Yes for the most part. And depends on where you live. I think in silicon valley/bay area, C# is not very common.
I am just about to rewrite a shit UI that came from a contractor and I REALLY want to use blazor. I hope it keeps gaining steam
Makes sense to be honest. The idea that you could write an abstract interface, not even an abstract class, that complex that would cover all scenarios was rather arrogant.
In a gist, what did Oracle do to Java?
It's not a dumb question if asked in earnest. 
You can from the main searchbox, but apparently there's no longer a UI option for it. putting `subreddit:csharp` in the search terms would just search this subreddit, for example.
The pace of Java development slowed down considerably when Oracle bought Sun. A few good things have come out with Java under Oracle's rein, but they're few and far between... the most notable being a new Date/Time library and finally adding something comparable to .NET References to the language itself (as opposed to using Maven).
Truth. This covers all of what 90% of the people I work with use. 
Removed: Rule 3, Rule 4.
Yes, maybe it’s just my area but here in Texas anyways the .NET market is huge. I’m a recruiter who specializes in .NET developers and the market is so big that in my firm we have 4 .NET(C#) recruiters versus just two recruiters who specialize in basically all open source technologies. Javascript is another big one, just about every hiring manager I speak to wants to see a programmer who’s good with javascript. Not super technical, don’t flame me, just got excited bc I saw something I could actually comment on lol 
I have based my career on it and gained more tools and experience from there. I have never had trouble finding work within 3 weeks of trying unless i wanted to wait for better. .net is very useful. Of course dont be afraid to try it all when you have the opportunity. Learn a web technology along the way. Hey typescript for instance with angular and node. Writes like C# but compiles to javascript. Can do anything.
Don't forget ASP.NET is huge in enterprise, and ASP.NET Core is very up-and-coming. 
(Being serious here) do you mean vanilla JavaScript or JavaScript + the top libraries? I'm asking because my JavaScript knowledge is lacking and am curious on how I should learn it.
May you never encounter a project that requires EF. If you do, code-first your way unto a new opportunity.
###`using` Statement The `using` statement is actually just syntactic sugar for a `try/finally`. using (var obj = new SomeDisposable()) { obj.doThings(); } This is roughly equivalent to: var obj = new SomeDisposable(); try { obj.doThings(obj); } finally { obj.Dispose(); } ###Local Functions Local functions are syntactic sugar. Take the following: void SomeFunction () { someLocal(); void someLocal () { doThings(); } } This is roughly equivalent to: void SomeFunction () { var someLocal = () =&gt; doThings(); someLocal(); } The compiler takes your local function and turns it into a delegate scoped to the outer function. C# has a ton more! 
Is that really thing or are you joking? Because when I can, I always just write straight SQL but recently started moving away from it so I don't get left behind tech wise. I haven't noticed EF taking a long time (yet...)
But, I started liking JS because of TS. Maybe because I've worked with a lot of static\-typed languages ?
Coding 20 years, and it's all syntax. The concepts are generally the same, you just need to understand how X is done in this language. 
Been a developer for 20+ years, and have always been microsoft stack. Make good money for my region and never had a problem finding a job
I've seen ef generate some nasty queries, but 10 minutes is an exaggeration. My favorite game to play with EF is "what subquery does this take generate" 
lol ... I kind of wish we did code first and had data migration fixtures. But we do source controlled sql scripts, which isn't bad. Generating the needed models can be a pain but if you do whitelisting and only take in the tables you 100% need it's not so bad. There's been talk of breaking up the database into smaller ones, but I'm not holding my breath on that. 
I doubt we'll see a production ready version of Blazor in less than a year or two - assuming the project doesn't get abandoned; it only recently graduated from experimental. Depending on your tolerance for running non-release code, you might have to wait a bit. I'm hoping it picks up too, but I'm not expecting we'll try to integrate it into any of my company's website UIs anytime soon.
You are right. Thanks! 
ASP.net core is a lot of fun to develop with. It's so straightforward and lightweight compared to full framework ASP.net. I love that I can finally start porting things to ASP.net core so I can publish them to Linux nodes rather than continuing to be reliant on Windows for everything.
buy a few courses from udemy IMO taht or just do the following games, in ascending difficulty for games - tic tac toe - snake - 1942 etc for more non-games things here are a few ideas: - nhl/football/whatever sport "database" - ASP MVC Core 2.0 or ASP MVC 5 - magic the gathering/card game "database" - some game you like, make a wiki like site much alike wowiki or the likes.
Learn vanilla first. Learn node. Then learn whatever just library will be hot this year before being worthless.
C# is Microsoft's premier language. I'm actually learning it. I don't see why you wouldn't have trouble finding a job with that skill.
Wow, Microsoft is helping you to move over to Linux. Who woulda thought..
Just a few years ago, I wouldn't have believed it. I'm really pleased with their current support for open source, cloud, mobile, Linux, etc... Hopefully they'll continue that directiom.
honeymoon.Pay();
I've used C# to automate some xml work and it was pretty simple. I just found out that C# has autohotkey wrappers. You can do a lot with that.
We'll see if they kill their open source goodwill streak with the Github acquisition. Will they leave it be and let it grow, or gut it and get everyone over to Teams.
Do you have a guiding path for a beginner? Perhaps which should someone learn first, and some suggested resources? Ty in advance.
Dapper.net changed my life in a lot of positive ways. Not sure what’s out there today, but progressive migrations to something similar may be possible.
I have about 16 years experience now. I used to be a consultant and if you'd like to work in the corporate world, the two most popular that I've seen are Java and C#. There aren't a whole lot of jobs where you need both (though currently I actually do use both in my job), but either is a good choice. Also as many have said pick up ECMAScript 6 (modern JavaScript) since it has become in much heavier use on web, mobile apps and desktop apps. Above all, the key is to be flexible and willing to say "let's try" when asked if something is possible. I've worked on so many different languages and frameworks now that I'm not sure I can remember all of them.
It was actually a very smart move by Microsoft IMHO. We never would have invested in ASP.NET if we were constrained to Windows Server, because our entire infrastructure was already based on Linux (mainly RHEL). Rather than jumping ship to another framework, we now use ASP.NET Core and pay for VS licenses via MSDN subscriptions and MS partnerships. Microsoft effectively lost he theoretical profits from a few Windows Server licences (that they probably wouldn't have had anyway), and instead gained a bunch of VS licenses and investment in their platform. I'm sure many will be lured into the click and deploy ease of use offered by Azure as well. 
Great insight and use case.
No type definition problems? No problems with advanced webpack features needed tweaking? dynamic imports? No problems when doing server side rendering of React? Webpack aliasing. I eventually found solutions for many of the troubles I had, but saying I didn't have much difficulty is a stretch (I might be dumber than your average programmer though)
I really hope this catches on, it looks really cool. The name is a bit awkward though, sounds like something an edgy teen would come up with.
Right. I'm not sure how far along Electron.NET is, but you could use it to create your app in ASP.NET Core. I think there's previewer tools out there too, but I'm not sure how compatible they would be. Another option you can research is GTK# . GTK has an XML based design tool call Glade.
It would be nice to have free standing functions too. Why I have to declare a class just to create a function is beyond me. 
I wouldn't mind VS2017 having constant updates if they made the updates smaller. I mean all the recent updates (even the minor ones) have been over 4GB each.
The one big thing C# lacks right now is mature enterprise libraries. Hystrix for example, actually... most of Netflixs stack. Other things are also currently sparse in the .net space due to the previous windows only nature. It's changing and doesn't effect current students to much, but .Nets future is going to depend on how the community adopts it over the next few years. If few do, the quality of the core frameworks won't matter. Also, biases need to be overcome. Lots of companies have a "no Microsoft" policy that prevents adoption even in cases that make sense. Leaders need to adopt to the new path of Microsoft.
Yes definitely
C# is great and there are many opportunities for C# programmers, for sure. Once you have the basics of logic and problem solving with procedural and functional languages, be sure to speed a lot of time learning design patterns. This is really where you'll learn to cross into other languages and libraries within languages you know. 
Yes enough job opportunities. Same goes for Java. Do not be afraid to try other languages, they broaden your “view” on how to code things. (Or rather the possibilities).
I think it's a play on Razor, the server-side rendering language for MVC.
Having used Babel on a Webpack \+ React project as well as TypeScript I can say that they're quite comparable. I've had colleagues pulling their hair out trying to make Babel happy at times. In general both communities are strong and you can easily resolve problems by doing a few google searches. I know about the problems you've run into though because I've had to overcome them myself (all except dynamic imports). Where TypeScript has mainly helped us is when a newbie is introducing bad code\- it just won't let them. :\-)
Yeah, that's pretty obvious, but it doesn't make it sound any better. I'm not too fond of the name Razor either. Don't get me started on Razor pages. I guess Microsoft just isn't very good at naming things. 
If I tried to do any part of my job limited to the kind of SQL EF is capable of producing, I'd be a shriveled husk before the month was out.
I've got 10 years of Angular, and I majored in time travel in college.
I think a colleague of me wrote a mod for Rust. It's possible with C#, I think [Oxide](https://oxidemod.org/downloads/oxide-for-rust.1659/) is the API for it
Fuck that, no. Instead move everything relevant into child-processes, and make THOSE 64 bit. Not the VS main process.
I came from an SQL background into a C# web stack career, and that set me up so well. Entity Framework is lovely but it's incredibly useful to know what's happening under-the-hood with the SQL.
How do you do desktop Linux with C# ?
Using .net core. you run a .net core application using `dotnet YourDotNetApplication.dll` (The dotnet cli can start both .exe and . dll assemblies.) See [https://docs.microsoft.com/en\-us/dotnet/core/linux\-prerequisites?tabs=netcore2x](https://docs.microsoft.com/en-us/dotnet/core/linux-prerequisites?tabs=netcore2x) Also see [https://opensource.com/article/17/11/net\-linux](https://opensource.com/article/17/11/net-linux)
Really bad article! (Sometimes I really don't understand why people must write about stuff where so much *good* resources exist!) The introduction trys to explain what unit testing and TDD is. In about five sentences... Way too short and unprecise and too abstract for a novice, uninteresting for a developer with basic knowledge about unit testing. So it would be better to focus on the *technical* aspect of the title: Introduce both frameworks! At the TDD explanation he fails to explain the very important *refactoring* step. His diagram appears false to me too. The actual *demonstration* of the two frameworks appears very short and superficial. The example code is kinda dumb and has a logical error integrated (anyone has more experience than 15 years? Poor dev... You will earn 0 bucks 😈) The author even hasn't given good names to his tests - kinda poor quality! My recommendation: Ignore this attempt and get yourself a copy of Roy Osheroves book "the art of unit testing". 
Don't learn language or framework at first. Learn how things work, how you should architecture your code. You should also learn what is clean code. Languages are just a way to do thing and you will try many languages, many frameworks and libraries. Be open and it will be good for you. To answer your question, I think Microsoft technologies are worth learning. You should also try JavaScript as it's the main web language.
Thank God. I'm one year out of college and these three things (actually Typescript/Angular2+ instead of JS) are pretty much all we use. There's some legacy ASPX but avoid it like the plague. Good to know I'm working with valuable technology. 
That's something we will see in the future :) Teams is not exactly what GitHub does though, and I doubt they would gut Github... The thing I fear is that they'll add too much Microsoft stuff and integration to stuff like Azure and Teams that it becomes useless for people using stuff that's not Microsoft related (Java, Python, stuff like that...). But I have good faith, ever since Nadella became CEO they've been doing great stuff so.. We'll see :D 
I've found learning (and thus often relying) on ECMA5+ to be detrimental in some cases since a lot of companies still support horrible, godforsaken browsers like IE which don't fully support those stadards. You might write something completely valid by modern standards that works in Chrome, FF, and maybe even Edge, just to find out it doesn't work in IE11 and you have to completely redesign your templates and styles. For some applications it might be fine to tell your users to just use another browser, but some enterprise customers are hard set in their ways and not supporting a certain browser can mean ~~losing a large client~~ you have to support IE11. 
Code something you want made
Yeah, because making the architecture more difficult to work around nothing is such a great idea.
Oh ok I thought you were referring to running with a desktop GUI which afaik isn't possible. Though I've seen a project called Avalonia which claims to give you a WPF-like cross platform experience, but it's still experimental.
Naming is one of two most difficult problems in computer science.
The book has some poor phrasing (for example, you probably don’t want to refer to the `const` declaration as a “container”, since that’s something completely different in OOP terms), and I think it focuses on the wrong stuff. Where C# enums shine is predefined selections of values. That means, for example, that VS will auto suggest all of those values as you start typing code that pertains to an enum type. Try typing `switch`, hitting tab twice, and then typing the name of a variable whose type is an enum. It’ll precipitate the possible values as `case` blocks. Pretty cool! But as far as requiring an argument goes, the book is right. Unfortunate, `System.Enum` isn’t generic and is a little ugly to work with. If you want to to helper stuff like iterate all possible values or an enum, you can’t to myStatus.GetValues(); you have to do Enum.GetValues(myStatus.GetType()). If you want to parse a string as an enum value, you have to even cast the result `(Status)Enum.Parse(typeof(Status), "SomeValue")`. Pretty ugly. They’re also quite limited compared to those in Swift and Java, where you can do stuff like adding your own methods and attaching additional information to a value. And they don’t even allow implicit casts, which is a blessing and a curse at once. But still, use them!
Destop applications are possible. You can use OpenTK or GTK# for developing GUI in linux! It is possible that WPF will be multiplatform in the next mayor .Net core version.
I love EF but I always write my own code, db and mappings. I never let it automagically generate anything.
As it is "just" a wrapper, then he should use it. 
If EF is generating complex queries, you're probably not using EF right. It's just for loading and saving entities. The data tables should reflect the entities.
Wasn't it named Blazor bevor MS took over the project? 
&gt; I've never heard anyone call them "enumerator lists" before, typically people call them just "enums". Short for "enumerations".
Well, it's a bit more, but for methods that don't otherwise support it, it's just sugar as you say.
&gt; It is possible that WPF will be multiplatform in the next mayor .Net core version. Not a chance in hell.
Well yeah, it's in the top 5 languages worldwide popularity-wise by any decent metric. C#, SQL Server, HTML, JS will stand you a long way.
&gt; A language that aims to learn from the mistakes of C#. # &gt; //Statements of any sort do not need semicolon ends ... I wish you all the best...
That was long ago and the branch is protected so changing is a pain
And it's still evolving
I think if you want to interest any developer (coder is such a negative term, at least in my dev community; pretty much an equivalent of code-monkey) worth their salt in your project, I would honestly recommend at the very least providing a meaningful readme file on your repo. Explain the purpose of your project, show how it helps; show which "mistakes" of C# you're intending to address (and how); potentially explain how it's going to be interpreted/executed. At the moment it looks (subjective opinion) like 'hey, I'm new to C# but there are some thing I don't like (semicolons!), so how hard is it to write my own language, huh?', which is not something I (nor most people IMHO) would be willing to participate in.
another pattern is like var items = myObj?.InnerObj?.SomeCollection ?? Enumerable.Empty&lt;T&gt;(); super helpful when dealing with EF and navigation properties
and cache coherency
And here it is in a gist: [https://gist.github.com/leewalkergm/9be7098bef1f789de60b13dfbdfd9184](https://gist.github.com/leewalkergm/9be7098bef1f789de60b13dfbdfd9184)
Fair point, I would actually like to have you be part of the team, plus semicolons etc aren't required, and I don't have many issue with csharp anyway
Let me restate what I've said previously: I wish you all the best... Worst case scenario is you'll learn a lot about development - which is something I can sincerely wish to any developer.
You can run custom sql, in the migration phase. Maby this link can help -&gt; https://www.learnentityframeworkcore.com/migrations
I don't see how that would work. Also, isn't Microsoft focusing more on UWP now? I develop UWP software, because it seems easier than figuring out how to make an installer for WPF or Windows Forms applications.
And off by one errors
Your code isn't formatted well, so it's hard to read (for future, please ensure there are 4 spaces in front of every line of code). But I think I can see the problem. It's with this line: public delegate Action&lt;int&gt; OnBallHit(int i); You're confusing two things here. What you're saying is that `OnBallHit` delegates will return an `Action&lt;int&gt;` - but `PlayBounce` returns void, so it doesn't satisfy that requirement. What you meant was: public delegate void OnBallHit(int i); The thing you're getting confused over is that `Action` is a *replacement* for the `delegate` keyword - you wouldn't normally use the two together. So an alternative way of writing this would be: // No need for a delegate called OnBallHit public static Action&lt;int&gt; ballHit; Disclaimer: this is based on my knowledge of C#. I don't use Unity, so it's possible Unity might do things differently to standard C# in a way that I'm not aware of.
 public delegate Action&lt;int&gt; OnBallHit(int i); So any method that matches your delegate should return `Action&lt;int&gt;`; your method returns `void` and there's a mismatch. Guessing what you're trying to achieve (you've just provided the code and error, not the reasons), I would assume you might want to try: public static Action&lt;int&gt; ballHit; //Action&lt;int&gt; is already a delegate type or better yet (again - guessing here): public static event Action&lt;int&gt; ballHit;
 public delegate Action&lt;int&gt; OnBallHit(int i); What you do here is declare a delegate type that says it *returns* an `Action&lt;int&gt;` delegate. You want either `delegate void OnBallHit(int i);` *or* `public static Action&lt;int&gt; ballHit;` Also, you're using delegates in an event-like pattern, but you're not using [the actual `event` keyword](https://msdn.microsoft.com/en-us/library/5z57dxz2%28v=vs.100%29.aspx). 
Java is the easiest language that I know to write software in. It's pretty boring for me, but it is the easiest. But, I will not write anything in that language since they won that lawsuit with google. I think google should use .NET now instead.
I know those. Give me money, I'm poor.
Bad bot.
It can take a long time if the relational database is very large, and the server is not a massive data farm.
Basically they let go of all the programmers and got lawyers instead. Instead of improving and encouraging the adoption of the language, they tried to squeeze the big companies using it for as much money as they could. "Here's an open platform for everyone to power the future! Psyche, you owe us billions of dollars now!"
Seriously? This pays? Dude, I'm running an SQLite database in my application that I'm giving away for free.
I went for C#/C++. Works for me.
Well that's cool. I would rather use GTK# too, since it also works on Windows.
Yeah. Have the sms's save as a text file. Add the text files name to a List, which contains all of the SMS's. Delete the database, then recreate an empty database file with the same name as the one deleted. Then copy the list over to the database.
Even paid VS queues take ages.
You need to learn programming logic. I learned programming logic from "Simple Program Design A Step\-by\-Step Approach Fifth Edition, by Lesley Anne Robertson." If you do not learn programming logic, then writing in any language is not going to go very far. When do you want to use nested loops? It depends on what you want to do. If you write a program to be a clock, then you could use a nested loop which consists of probably four loops, one for each digit. It wouldn't have to be a nested loop. It just depends on how you make the design. I recommend not nesting a loop too many times, because it can get confusing. A loop that has a lot of sekection control structures might be a better choice. Selection control structures are the IF ELSE statements. Maybe a loop that contains a switch would be even easier than that, depending on what you are working with. The switch in C# is not free to do as much as the switch in C\+\+, but if you can use it, then it saves the amount of code that you write. I highly recommend studying a programming logic book, or online videos if you can't get a good book on it. The book I mentioned learning from was great. I use the stuff I learned from it, every day.
throw new CantAffordException();
I'm cool with learning that, but is something wrong with SQLite? I use SQLite right now.
Popular opinion is against you bud. 
You're suggesting nuking the db for each update? This pains me... Plus, if OP doesn't have access to his db from his method (which also isn't true, he just doesn't know how to do it yet) then how would he trigger the db rebuild?
And if you knew COBOL/FORTRAN in the mid 90s you could ride a golden surfboard on a tidal wave of cash working for the banks. It's all relative.
haha I run a virtual desktop to my laptop with Visual Studio. I like C#, but I might just wait until more things are available on Linux, once I'm done with this UWP software that I'm almost done with. 
You have a couple options: 1. Write to the db directly. All you need is the connection string, it doesn't matter whether your code is in ASP. NET, a console app, a class library, or anything else. Using SqlClient you can write to your database. 2. (Generally preferable) Write a small API in your web app that can accept the SMS data you'd like to store and writes it to the database. This allows the web app to act as a gatekeeper for the database.
Is there a shell script that can build this easily?
Haskell sends its regards 
I'm not using Linux so I only have experience building it on Windows.
Not from Apple's perspective.
I did say generally. 😁
Thank you both so much! That was exactly my problem, I was thinking of Actions and Funcs were more like static for some reason, like that it made delegates work differently, rather then being a different kind of delegates, shows what I get for trying to code on lack of sleep 
Are you saying that even with Babel this is an issue? I realize I didn't say that in my answer, but it's implied in the corporate world that legacy browser support is very important for anything public facing.
Thank you both so much! That was exactly my problem, I was thinking of Actions and Funcs were more like static for some reason, like that it made delegates work differently, rather then being a different kind of delegates, shows what I get for trying to code on lack of sleep Sorry about the code, I'm usually the only one who looks at my code so I guess I've developed some bad habits
C#/.NET has more openings in Texas than even Java. 
"You're suggesting nuking the db for each update?" Yeah, because it's a simple way to do it. "This pains me... Plus, if OP doesn't have access to his db from his method (which also isn't true, he just doesn't know how to do it yet) then how would he trigger the db rebuild?" Well, I don't know how he would have a database in the first place, if he didn't know how to build it. "How would he trigger the db rebuild?" The same way he built it. Here, I'll write how to do the tasks that I said: You may need to get the SQLite\-pcl.net nuget package. You will need to reference SQLite.Net, SQLite.Net.Attributes, and Visual C\+\+ 2015 Redistributable, for what ever platform you are developing for. This is to create the database. private async void BuildDataBase { // You could set a value to true once the database is created. Pretend that globalStorage // is for a class of variables that you might want to use globally. You don't need to do it // like this. I'm just doing it for the example. globalStorage.Created = true; if (_SmsInfo.Length &gt; 1) { using (SQLiteConnection conn = await OpenOrRecreateConnection()) { conn.CreateTable&lt;SmsInfo&gt;(); foreach (var info in _SmsInfo) { conn.InsertOrReplace(info); } } } else { _SmsInfo = _DefaultSmsInfo; using (SQLiteConnection conn = await OpenOrRecreateConnection()) { conn.CreateTable&lt;SmsInfo&gt;(); foreach (var info in _SmsInfo) { conn.InsertOrReplace(info); } } } using (SQLiteConnection conn = await OpenOrRecreateConnection()) { conn.CreateTable&lt;SmsInfo&gt;(); foreach (var info in _SmsInfo) { conn.InsertOrReplace(info); } } } If the database were already built, and it contained values, then he would need to copy the values to a blank list: public async void DataBase_To_List() { using (SQLiteConnection conn = await OpenOrRecreateConnection()) { var infos = from p in conn.Table&lt;SmsInfo&gt;() select p; var dates = string.Join(",", infos.Select(t =&gt; $"{t.Serial_Number}")); int index = 0; string[] entries = numbers.Split(','); foreach (var attribute in numbers) { int lengthEntries = entries.Length; if(index &lt; lengthEntries) { _SmsInfo.ElementAt(index).Serial_Number = entries[index]; } index++; } } } If the list has been updated, then he could delete the database, and recreate it: // ReCreate needs to be set to true public async void RecreateAndOpenDB() { using (SQLiteConnection conn = await OpenOrRecreateConnection(true)) { conn.CreateTable&lt;SmsInfo&gt;(); foreach (var info in _SmsInfo) { conn.InsertOrReplace(info); } } } private async Task&lt;SQLiteConnection&gt; OpenOrRecreateConnection(bool ReCreate = false) { var filename = "sms.db"; var folder = ApplicationData.Current.LocalFolder; if (ReCreate) { var file = await folder.TryGetItemAsync(filename); if (file != null) { await file.DeleteAsync(); } } var sqlpath = Path.Combine(folder.Path, filename); return new SQLiteConnection(new SQLite.Net.Platform.WinRT.SQLitePlatformWinRT(), sqlpath); } 
Only psychopaths love JavaScript. Unfortunately it became the metaphorical glue of the Internet by accident and now we all have to learn it.
Understand the basics of javascript like how to create functions and flow control. Understand JSON and the anonymous nature of JS. I consider jQuery a "basic" part of JavaScript at this point because it's so common. So learn that too. After that become comfortable using frameworks on a case by case basis. The number of frameworks for JavaScript that are born and die every month makes it impossible to master any of them. Instead you need to master the concept of learning frameworks.
Oh lol, I missed that part. Why not just use Visual Studio since you use Windows?
Actually, I meant to ask the other person that.
&gt;Is there a shell script that can build this easily?
If you are starting from ground zero and learning without a context like a business need or course requirement, I would focus on JavaScript first. Youtube is a great resource for learning software development. There are millions of tutorial videos. Start off with the "fake it till you make it mentality". Just fire up a video and do exactly what they do. Don't even try to understand why they are doing it, just do it. Pause the video when necessary because they will usually be typing much faster than you can. Over time you will start to recognize why they are doing what they are doing. Concepts will start to "click". Remember that anyone can be an expert at anything if they spend 5,000 hours doing it.
Jquery is better. You can replace all the crusty Javascript with it. 
JavaScript is a new addition for me. I used to do exclusively windows desktop and server development for 20 years. But when I started to look for jobs it became obvious that the world is moving to web clients rather than thick windows clients. I became aware of JavaScript back when it was called LiveScript. I, like you, ignored it. Once I was forced to learn it I was awestruck at what JavaScript had become. It's now the most important language in the world. It's still a shitty language but at this point JavaScript **is** the web.
They have integrated Visual Studio with GIT repositories, made a Visual Studio run on MAC, Visual Studio Code is free and runs on MS, Linux &amp; Mac. They have really opened up.
Yes, because by understanding TypeScript you can *do* Javascript if you need too. No one would turn down a TypeScript dev for a javascript position.
As a resource, I HIGHLY recommend pluralsight’s course on c# events and delegates, really helped me.
Great, now we can have another youtube javascript expert enter the workforce... That's what we need more javascript patterns like: switch(!!0){ case myFunction(xx); case myFunction2(yyy); } Sorry, I'm a sour old man.
Study design patterns. I recommend Head First Design Patterns, Design Patterns for Dummies and THEN use the bible Gang Of Four. GoF is a very hard read for non computer science majors who are just starting to understand design patterns but it's considered the go to for that knowledge.
I wish you would have said that before I wrote my example. I didn't know about SqlClient, and I haven't written any web apps yet. I just gave a solution that I would know how to do, since no one else was saying anything.
Honestly, SQL alone can sign your paycheck. C# at least isn't torture, though. Skip JavaScript. (For the love of all that is good and holy, let that shit die.)
&gt;&gt; A language that aims to learn from the mistakes of C#. &gt; &gt;&gt; //Statements of any sort do not need semicolon ends Lol, explicit statement terminators are not an error. 
What languages have you previously worked on design for? As /u/decPL said .. &gt; Explain the purpose of your project, show how it helps; show which "mistakes" of C# you're intending to address (and how);
Yes, there's really a lot. I once made the mistake to post my CV with a phone number, got 58 calls on just the first day (I live in a multi\-million citizens city). I have changed jobs only a few times, but it has never taken me more than a week to get an offer and more than 2 weeks to get an offer that ticks enough checkboxes (i'm very picky). Pro\-tip: specialise in one area (e.g. desktop, mobile, or web back\-end). I see comments claiming you can develop for all kinds of platforms, which is technically true, but career\-wise being meh in many platforms is much worse than being great in one platform. Even being full\-stack is not a good approach if you want to work on serious projects (as in not small sites for local SMEs). It's hard enough to stay up to date with just [ASP.NET](https://ASP.NET) and its related tools, architectures (MVC, actors, mediators, etc), and platforms (e.g. Azure stuff), you don't want to also try to keep up with browser quirks \+ HTML/CSS/JS stuff all the time. Trying to do full\-stack will considerably limit your expertise in BE and FE specifically.
I have never designed a language
This is great! I really like this library 
Assembly + Razor = Assemblezor = blezor = blazor???? idk
Entity framework is the way to go for extension and dase of use. 
&gt;For the love of all that is good and holy, let that shit die. If you see some of my other posts in this thread you'll see I agree with you but concede that it ain't goin' anywhere. It's snowballed out of control, completely by accident. At this point the WWW is more JavaScript than HTML.
Yeah. If I dont know how to do something, I'll sometimes write a quick console app that displays the output result. Once I get it to do what I want, then I'll copy and paste it into my software. But, sometimes if someone's code that I have seen online does something that I don't understand yet, and there are a lot of pieces that I have to figure out for each piece, and I want to do something specific, like create a process that works diffferently; then I will sometimes create a GUI with buttons for the current tasks that are performed. I will add code to each task that displays a result of that task, and I will sometimes break a task down even further so that I have everything separated. Then I write out the logic of what I want to do on paper, using the names of the buttons.
Is the contract created when you post it?
Browser + Razor = Blazor. Source: https://github.com/aspnet/Blazor/wiki/FAQ
As a C# developer I can tell you that I am constantly being bukake'd by job offers. Having said that, there is a wide range of job quality. There are a some great job opportunities out there. However, for every great opportunity there, there are about 20 terrible ones. Before you start looking for work, take the time to think about what field you wanna work in. You probably wont get it right the first time but that is okay!
You have the same specs as my PC, and better specs than my laptop. Nothing has taken 10 seconds. You might have too many apps running at the same time, or too many tabs opened in a web browser that is open at the same time... I don't know. But, that's weird.
I did a job for about nine months with JavaScript. I hated it. It's not that I hate the language - it's a great language. It's the insane infrastructure behind it, the 200 libraries that get pulled in when you a website. Plus it had SQL, a non-standard standard language. I'm in CAD now, it's C++ and C#. I'm happy. The games stuff I play around with in my spare time is C# or GDscript (like Python).
oooh that makes sense now. Microsoft usually has very bureaucratic names like: asp.NET, SQL server studio, internet information services, Can't complain about a creative fun name. Blazor could have easily been name: Microsoft Browser Assembler
Indeed. I've learned to mostly keep to the server side and let the newbies deal with the UI. What's even sadder than the fact that we're all sentenced to an eternity in hell supporting Javascript is that originally, JS was meant to be something of a "how-to" in creating a scripting language for web pages. Remember when IE supported in-page VB script? *That was **supposed** to be a thing.* That wasn't just Microsoft's same-old embrace/extend/extinguish routine. The idea at the time was for there to be any number of client-side language plugins for browsers that supported NPAPI. There was no technical reason why there couldn't have been a C# runtime interpreter plugin for ActiveX or NPAPI. After all, `&lt;script type="blahblahblah"&gt;` exists for a reason. Now, Google and Mozilla have gone and murdered NPAPI. Javascript has to be integrated directly into the browser, since PPAPI can't do a lot of what NPAPI did (for security reasons, which is legit). Honestly, though, Javascript is the devil we know. Imagine what unholy mess could be inflicted upon us by language-elitist hipster devs if they could make an even more annoying language than Javascript...
Clearly, it should be Asszor.
&gt; Why Browser + Razor != Brazor, I have no clue. Sounds too similar to Brazzers lmao 
Awesome project but damn compilation is so slow.. 
xamarin has a preliminary gtk# backend. so in theory you could use that and get a wpf-like experience. never tried it though. you'll never get wpf on mac or linux though.
just fyi: Enum.Parse&lt;T&gt;("someValue") is built in now
Why does this even exist.
Unless you are using an EF adapter you will need to build the SQL queries and commands in a somewhat old fashioned manner compared to CF. Rather than a translated LINQ query as you see in many examples you will need to build an SQL query string and pass it along to a query or command. Look at the SQLiteConnection object and dig for the Query, ExeucteScalar, CreateCommand to do your reads or SQL commands and look toward Insert, Delete and Update to alter/add data. Note that your primary key column must remain unchanged if you want to update a record. The best thing to do is to only issue SQL commands for changes (such as new or changed records) rather than re-writing the whole collection. Rather you just need to keep in mind that you have 2 representations of your data you are keeping 1 is data archived on the DB the other is the in-memory collection the user is working with. When the user adds a record your code needs to update both the DB and the in-memory collection. Depending on the size of your collection (ie if its smaller) you can cheat some here and rather than poke the in-memory collection you can wipe it and reload it with a fresh query. As a heads up, its ok to use/bind to the collections and types returned from SQLItes library directly, unlike EF the returned data does not have any kind of "live" connection to the stored data. I still put everything in observable as it makes everything automatic when you write code that modifies the collection. 
Except in the case of when it is used as a `FormattableString` because then the consuming side can see what parts are the string literal and what is the data and can process then differently. e.g. the link above which explains how EF can turn a interpolated string into a parameterized query. Personally I would still advice against using it that way because the producing side can't see the difference and might lead to people thinking it is safe to use everywhere.
Data column names have to be unique. [https://msdn.microsoft.com/en\-us/library/55b10992&amp;#37;28v=vs.110&amp;#37;29.aspx?f=255&amp;MSPPError=\-2147217396](https://msdn.microsoft.com/en-us/library/55b10992%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396)
It has that StarMunchkiny feel to it if you ask me. 
Thank you very much. Your kind answer was very helpful! What you suggest, doing the SQL Querys with SQLiteCommands, is what I am doing right now, and it seems to work well. I've had a look at EF, but it seems to be troublesome with SQLite, and since I need to user to work with different database\-files, I would have to really dig in deeply, and at the moment it doesn't even seem to be possible, from what I know about EF and SQLite For the problem with the changing data. So I'm having my in\-memory\-collection being updated as user is editing the values, and it works fine. It's good to know that the extra work with the ListCollectionView is not neccessary. The problem is: I don't like the idea of instantly updating the databases fields each time the user changes them. I would prefer if he had a save command to use, once he is satisfied with his modifications, and if he's not he can simply revert the DataGrid to the state it was like when he started working.
Make a base interface with a bool IsDirty. When the model changes mark it dirty. Then you just troll through the records marked dirty (new and changed would be dirty), update the DB, make any necessary in-memory changes and mark them clean.
Just as food for thought. What we do is we fire the DB change right away on a background thread using TPL. Updates of small amount of data are very quick, you get hit when you are dealing with 1000's of records or large blobs you are trying to load up. 
Yeah, all 2 downvotes one of which is obviously from the guy I disagree with. Clearly the world has spoken.
Does this not work with Visual Studio for Mac?
Thanks for the suggestion. I'll try that right now.
Yeah, it's more than a wrapper. But IMO it's similar to telling him to learn jQuery before learning JavaScript. 
I'm not saying typescript is unnecessary. I'm saying for someone new to programming (like OP), learn the basics first. 
String interpolation ($) was added in C# 6, if you are using older versions you have to stick with String.Format() :P
No, it's like saying someone needs to learn assembly before they learn C. jQuery is just a library; you can't use it without JavaScript. But TypeScript is a full programming language. You can use it exclusively and never touch JavaScript.
No, please. Our dumb OEMs are stuck with ActiveX controls and some unholy COMs that barely work on modern 64 bit machine (we compile them as x86). I don't think that it would go well if I tried to add control from 2003 to toolbox in 64bit VS... Welcome to security industry.
The minimum viable code for this (assuming you are using Entity Framework) is: [HttpPost] public async Task&lt;IActionResult&gt; PostContract([FromBody] Contract contract) { if (!ModelState.IsValid) { return BadRequest(ModelState); } var customer = _context.Customers.FirstOrDefault(cust =&gt; cust.Id == contract.customerId) if(customer is null) { return NotFound(); } customer.Contracts.Add(contract); await _context.SaveChangesAsync(); return CreatedAtAction("GetContract", new { id = contract.Id }, contract); } But you're losing a ton of maintainability by using your entity framework types as your DTOs. Look into [AutoMapper](https://automapper.org/) and definining separate (though usually very similar) objects for API models and database records. Decoupling the DTOs from the underlying data models makes it possible to have much more granular control over what clients are allowed to do while retaining the option to vastly change the underlying storage logic without impacting your external contract. Also, following REST patterns can make your API more intuitive; rather than posting a child contract to www.yourapp.com/Contracts that includes the id as part of the model, consider changing the route to www.yourapp.com/Customers/{customerId}/Contracts and leaving the customer id (and especially the contract id!) out of the contract model that gets posted to your API. This helps focus model validation on the posted values and lets separate logic handle whether the user posting the contract has access to the particular customer they're trying to add a contract to. That code would look more like: public class ContractRecord { public int Id { get; set; } public string Type { get; set; } public int CustomerId { get; set; } public Customer Customer { get; set; } } public class PostContractDTO { [Required] public string Type { get; set; } } public class ContractDTO { public int Id { get; set; } public string Type { get; set; } public Customer Customer { get; set; } } [HttpPost("/customers/{customerId}/contracts)] public async Task&lt;IActionResult&gt; PostContract([FromBody] PostContractDTO contract, [FromRoute]long customerId) { if (!ModelState.IsValid) { return BadRequest(ModelState); } var customer = _context.Customers.FirstOrDefault(cust =&gt; cust.Id == customerId) if(customer is null) { return NotFound(); } var contractRecord = Mapper.Map&lt;ContractRecord&gt;(contract); customer.Contracts.Add(contractRecord); await _context.SaveChangesAsync(); var contractDTO = Mapper.Map&lt;ContractDTO&gt;(contractRecord) return CreatedAtAction("GetContract", new { id = contract.Id }, contractDTO ); } Of course, this may be overkill for a simple proof of concept or school project.
It's all about WHEN the increment happens. If you say "output t++" what the compiler actually does is this: output t, then add one to t. If you say "output ++t" the compiler does the reverse: add one to t, then output it. To avoid confusion, you could rewrite the code this way and then it'd be perfectly clear: t++; Console.Write("{0} ", t); I always use the ++ and -- operators on a line of their own. I never combine them with other code, to avoid confusion. Just think of it as a shortcut for writing "t = t + 1;" and use it that way. You'd never put that line of code inside another line of code. 
`t++` almost means `t = t + 1`, except that the value of the expression is the *old* value of `t`. `++t`, on the other hand, increments t and evaluates to the *new* values of `t`. Examples: ``` int t = 1; int x = (t = t + 1); // t and x are both 2 t = 1; int y = t++; // t is 2, y is 1 t = 1; int z = ++t; // t and z are both 2 ``` 
You're the real MVP ; ), one more question what does the spc-- at the end of the loop do? 
Just subtracts 1 from spc. 
Hi, No, nothing is wrong with SQLite, it is awesome, but if you want a NoSQL database for you app, or you want to try something new and judge by your self which one you prefer. Give a try to LiteDB.
Current project I’m on is target marketing so things like what offers to send people based on past spending habits. It’s an MVC web front end using a big data service to do the allocating of offers (which is a pain in the ass to work with) we are moving the front end to Azure web apps with the end goal being converting the whole thing into micro services 
I've run WinForms projects on Linux via Mono.
There's also `?[]` for indexers; sadly `dict?["foo"]` will still throw an exception if the dictionary exists but doesn't contain the "foo" key...
fixed in current version: https://github.com/BornToBeRoot/NETworkManager/releases/latest
fixed in current version: https://github.com/BornToBeRoot/NETworkManager/releases/latest
That's not technically correct. The increment always happens before the rest of the expression is evaluated. 
Yes, but then you wouldn't want to. I heard you can get Workman's Comp for having to use JavaScript if you know TypeScript. (/s)
int i = 0; int j = i++; //j=0 int j = ++i; //j=1
Hi guys. I’m fairly new to .NET and programming in general. What will Visual Studio 2019 actually do for those like me who are starting out in programming?
So you have components that don't work unless you install the 32 bit version. So sad for you. Same situation in Office.
There are only two hard problems in distributed systems: 2. Exactly\-once delivery 1. Guaranteed order of messages 2. Exactly\-once delivery 
I wonder if they should just stop teaching the ++ and -- operators in programming courses. I've been doing this for over 30 years and still get the subtleties wrong. Just teach the students to use x += 1 and let them learn about ++ by themselves if they're keeners. It's just a source of confusion and subtle bugs which is why my policy is to always use it on its own line other than in "for" loops and similar constructs. I can never look at a line of code like x++ = --y without having to REALLY think about it. (And imho only an asshole would write that line of code!). Don't get me wrong - if I see somebody use x += 1 or x = x + 1 in production code I will think it looks amateurish. I would always want to see x++ instead just because it's what I'm used to. But I don't know if it's necessary for a novice student to use that syntax.
you are not safe for employment. 
To extend on this answer (which I agree with) you need to break that huge line of code up into some nice bite-sized pieces. It's impossible to debug that monstrosity. Extract some terms and build the final equation out of those terms. That way you can look at the interim results and figure out where the problem is. Nobody can read that. I doubt even you can, and you wrote it.
Well, it might be offered as x86/x64 at first but later x64 only i guess. That will be a problem. And we are not alone in this problem. But yes, x64 is way to go, even if companies like us run into problems. That's only way to push OEMs to update their SDKs because nobody will buy products and extended support. Question for you - why you don't break up this huge SLN to multiple smaller ones? Client in one, server in other...? You will cut build times, search and memory use.
Aww, we scared him away.
They shouldn't stop teaching prefix and postfix incrementing, but they should stop teaching that there's a difference that matters.
Not much more than any previous version for beginners most likely, but any version is good for learning .NET dev. For example the intellisense is great. When it comes out, might as well use it.
[Blazor and WebAssembly](http://blog.stevensanderson.com/2017/11/05/blazor-on-mono/) might change that. perhaps we will never lose javascript altogether, but maybe WebAssembly will add a lot more language agnosticism. 
Worked for me with no setup. Install the extension and intellisense items have stars next to them, meaning it is working. Do you not see that?
We use OWIN/Katana but it's because our project was started 4 and a half years ago and we haven't swapped to .NET Core yet (on the docket for this year). It's not recommended for new projects.
 Check your version of 2017, it currently only is supported on Visual Studio 2017 15.7 preview 5 or higher. 
More intellisense supportability is always a great thing! Thanks for letting me know :)
A is 65 (decimal) in ASCII. So to convert from hex (0x41 == decimal 65 == 'A' in ASCII) Use a table to convert from Hex to Decimal then to what character that decimal number represents. https://www.bing.com/images/search?q=ascii+chart+table
Ah damn, that's what it is. I'm not on the preview 5 version. THANK YOU!! I don't know why I'm having so much trouble finding information about it on Google or Bing.
Part 1: Convert int to ascii: You have an integer type(e.g. int, byte). You want the ascii character. Just cast the integer type to char: `char asciiChar = (char) asciiInt;` Part 2: Convert hex string to int: You have a string that is a hexadecimal representation of an int. Use `int.Parse(numberString, NumberStyles.HexNumber)`
&gt;I have the data being sorted correctly What data types are involved here? Are you trying to convert a string representation of hex into an ascii string?
I don't have the stars, yeah. Another user in the thread pointed out that it was my Visual Studio version. I didn't realize the extension only works on the preview right now. :) Thanks so much for the help though.
God damn that was thorough as shit, really solid read. My team is moving towards the use of docker and I think that's great but I had a lot of question marks on how to debug inside the container and this answered many of them. Thanks.
Rule 4.
Oh. Yes hah I separated the hex that represents the address and the hex that represents the value. And now what I have left is 20k array with hex values . Values are all strings atm.
This is helpful but I have 20k lines 
You can imagine the PreIncrement (++x) and PostIncrement (x++) functions as something like this, if you were to pass a reference (pointer) to x to the function. The confusion comes from the difference between the *value of an expression* and the *side effects* of the expression: static int PreIncrement(ref int x) { x = x + 1; return x; } static void PostIncrement(ref int x) { int temp = x; x = x + 1; return temp; }
Yeah, I don't think there's much point to having the operators in a language nowadays if you don't want to do things like C++ iterators. Swift for example (since v3) actually doesn't even have ++ and -- operators anymore: https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md 
Does part two convert the hex into a decimal representation or an ascii. Or are they the same. Idk why I cant grasp this concept . Lol
I am kind of thinking that actually, yes how the data is being returned from SQL can be right in the middle of this. Data normalization is important. The columns should not be named the same first in any situation whether this is for presentation or not. This is basically a report, name them like how they will be displayed. You could always write your own stored proc to pull the data in the row by row in the format your XML data table is expecting. Otherwise it looks like there is a piece of the puzzle missing here. You are showing your code that has your data stuffed in an object, ret, it looks like, the datatable definition that is the destination for the data that need more specific column names, but where is the code that you are using to map the data from the data object ret into a new datarow and then into the data table. You may need to do some internal looping/linq to complete each datarow. My unfamiliarity with ClosedXML is probably not helping me in case it is doing anything behind the scenes or in code that you haven't shown.
Part 2 converts a string representing a hexadecimal number, into an int. For example int val = int.Parse("A", NumberStyles.HexNumber); // val will be (decimal) 10. 
Because it would be TOO helpful for Microsoft to put that anywhere on the main page, the marketplace page, or the FAQ, yay for obfuscation!
There's like, 30 clients and 50 server side components. The app takes 150 machines in its prod environment. It's huge. 8 Sql servers. 25 databases. It runs classic asp. Vb6. C++. Web forms. Mvc. 3, 4 and 5. Now ASP .net core. React. Dozens of WCF services. Wcf rest services. Msmq. It's 25 years old at this point. Has bits of everything. Mostly unmaintained for the last 5. I'm taking on that mission. Much of it hasn't been rebuilt in a decade Every app traverses across the databases. Linked servers are set up. Apps hardcoded to use these. Stored procedures cross databases and servers, and then come back again. So, step #1 is to get it all building at the same time. In the right order. So tests can be built. So I can start breaking some of these dependencies. But until then, it's going too be big. That was probably TMI but I got on a roll.
Okay cool thanks for the info
Huh? There's a significant difference. 
Why does people want to use katana where we can use iis instead?? Sry I am a new learner I just want to know the real scenario
Removed: Rule 4.
&gt; I wonder if they should just stop teaching the ++ and -- operators in programming courses. We teach many things not because the students should incorporate them into their code but because they will see it in existing code. The *goto* is a prime example. I teach it, then I tell them to never use it. 
&gt;Values are all strings atm. Is that one string per character represented in hex, or are these strings with multiple characters in hex representation? &gt;Yes hah I separated the hex that represents the address and the hex that represents the value I have no idea what you're talking about here. These sorts of things are a lot easier to help with when you provide some code and/or a sample of the data you're working with; there are as many ways to interpret what you've said so far as there are people willing to help. In general, your strategy should be to find a chain of transformations that lead from the data format you have to the data format you want. You might use [a method to parse an int from a string](https://msdn.microsoft.com/en-us/library/c09yxbyt(v=vs.110\).aspx) (specifying the AllowHexadecimal NumberStyle argument), then [a method to convert an int to a byte array](https://msdn.microsoft.com/en-us/library/de8fssa4(v=vs.110\).aspx), then [a method to convert a byte array to an ASCII string](https://msdn.microsoft.com/en-us/library/38b953c8(v=vs.110\).aspx). Some of those steps may require splitting and/or aggregating the results of the previous step before feeding into the next step. You may end up with code that looks like: using System.Linq; [...] ASCIIEncoding ascii = new ASCIIEncoding(); return string.Concat(hexArray .Select(hexValue =&gt; Int32.Parse(hexValue, NumberStyles.AllowHexSpecifier)) .Select(intRepresentation =&gt; BitConverter.GetBytes(intRepresentation)) .Select(rawByteArray =&gt; ascii.GetString(rawByteArray, 0, rawByteArray.Length)) .ToArray() ); 
Not in .NET Framework 4.7.2 it isn't. In .NET Core 2.0 and up, yes.
My first college programming course was in Pascal (this was 1984 or so). I was a self-taught programmer using Basic on an Apple ][. So of course all of my programs had GOTO's everywhere. We were given some programming task in class and I had to scour the documentation for how to do GOTO's in Pascal. For some reason he hadn't taught us that yet (even though how could you possibly program without it??). The instructor got a kick out of my "solution" but opened my eyes to the glory of structured programming (wow, a while loop!).
Throwing an exception is not a bad thing; this is not JavaScript.
The local function does not get converted to a delegate instance; it is converted to either a static or non\-static private member (depending on whether or not 'this' references were used in the method body). Technically speaking, this is more performant, although by a small amount.
That's interesting, because it would imply that I would be able to see the function when reflecting over the type. I might experiment with this later.
Pretend you're a dog walker. You walk dogs. You don't care if the dog is a Poodle or a Beagle. https://dotnetfiddle.net/eklz0H
This is incorrect as written. The second assignment, j should be 2.
When you want to share functionality between concrete classes, or something has an is-a relationshipm use a base class. In general, interfaces should describe what something is *capable of doing*, and classes should describe what something *is*.
Typically, when you have a group of related types that need to share behavior and be operated on as if they were all the same thing. It's not super common in a lot of problem domains, actually.
Knowing *how* things work is a lot easier than knowing *when* to use them, as you've found it. Some of it is just experience you need to gain over time\-\-making the wrong choices and learning from them. Typically, I'd avoid base classes when an interface would work just as well. It's a principle called *prefer composition over inheritance*. It's more maintainable to have different implementations build on top of each other through an interface than direct inheritance: ```csharp public interface IFooRepository { public Task&lt;IReadOnlyCollection&lt;Foo&gt;&gt; GetFoosAsync() } public sealed class SqlFooRepository : IFooRepository { public Task&lt;IReadOnlyCollection&lt;Foo&gt;&gt; GetFoosAsync() { // Do your SQL query here and return the results } } public sealed CachingFooRepository : IFooRepository { private IFooRepository _impl; public CachingFooRepository(IFooRepository implementation) { _impl = implementation; } public async Task&lt;IReadOnlyCollection&lt;Foo&gt;&gt; GetFoosAsync() { // Search cache, and if not found, do this: return await _impl.GetFoosAsync(); } } ``` You can imagine using a base class for this, but the logic is just going to change in each layer (GetFoosAsync). Now, when to use a base class? When the logic stays largely the same. Here's a simplified, real-life life example I made earlier this year for parsing a configuration file and reading out the values. All of the logic about validating the configuration, parsing it, etc. was done in the abstract class, but getting strongly-typed values out of it was delegated through abstract methods. This kept the actual implementations very slim. ```csharp public abstract class AbstractConfigurationLoader&lt;T&gt; { IConfiguration _cfg; protected AbstractConfigurationLoader(IConfiguration cfg) { _cfg = cfg; } public sealed T GetValue(string id) { if (_cfg.Version &gt;= this.MinimumVersion &amp;&amp; _cfg.Version &lt; this.MaximumVersion) { throw new Exception("This configuration file is not of a supported version."); } return this.Parse(_cfg.GetSection(this.Section)[id]); } protected abstract Version MinimumVersion {get;} protected abstract Version MaximumVersion {get;} protected abstract T Parse(ConfigurationValue value); } public sealed class DatabaseServerConfigurationLoader : AbstractConfigurationLoader&lt;DatabaseServer&gt; { public DatabaseServerConfigurationLoader(IConfiguration cfg) : base(cfg) {} protected Version MinimumVersion =&gt; new Version(1,0); protected Version MaximumVersion =&gt; new Version(2,0); protected DatabaseServer Parse(ConfigurationValue value) { // Do some work, return DatabaseSever } } ```
If everything is abstract, and they share nothing in common, this really ought to be an interface (`IWalkable`). Then a dog walker could walk anything that implements the interface (children, iguanas, but not cats, which can't be instructed to walk).
updated my original comment with shared behaviour (e.g., Sleep()).
People are going to give you a bunch of BS about dogs and cats or foo and bar. Screw that. Lets look at some real code. **** Lets say you have two classes. One handles treating memory as a stream, the other handles treating files as a stream. Let's call them `System.IO.MemoryStream` and `System.IO.FileStream`. Over time you realize that half the code they use are exactly the same. Also, every time you add something to one you paste the same code into the other. So you create a base class called `System.IO.Stream`. https://msdn.microsoft.com/en-us/library/system.io.stream(v=vs.110).aspx 
“prefer composition over inheritance “ I was just saying yesterday that I don't see base classes in New code any more and interfaces instead. Now I know why 😀
That's just plain stupid. You don't create whole new classes for Poodle and Beagle.
Four leading spaces is used by reddit for showing code. 
Why not use `IStream` instead? They could have, but it would mean that they couldn't later add new methods like `ReadAsync`. 
I'm in new Reddit, and it shows just fine. I switched back, and I can see that old Reddit doesn't support Markdown. That's unfortunate.
Interesting. Reddit does use markdown, though not necessarily the same version.
Why not? Their Walk() implementations could be different.
My guess is that this also has something to do with dependency injection becoming more and more prevalent in the industry (I never really saw it in use when I started 8 years ago; now, it's the standard). People are taught to use interfaces for dependencies, and they just proliferated. Now, that being said, interfaces are also bad if you take them to the extreme. I see a lot of developers who create a class and an interface together every single time (`MyClass` and `IMyClass`). That's not a sane way of doing things and locks the API surface down forever (since you can't change an interface without making a breaking change). Also bad is when developers create interfaces over classes that have behavior that can't be substituted\-\-if all `FooService` does is return a projection of `IFooRepository`'s data, then you don't need an interface for `FooService`.
This is Scott. I'm guessing you're the person who left a comment on the lesson earlier today. I'll paste my reply here. There are two main reasons for using a base class: 1. Because we don’t want to have duplicate classes/properties in the classes that would be child classes. In future lessons, we are going to add some new functions to LivingCreature. By adding it in the base class, we do not need to add it to all the child classes. This saves us time and makes it less-likely to have bugs. Copy-pasting code into multiple classes is a common source of bugs. Sometimes a programmer forgets to copy all the changes to the classes that would be children (when you don’t use a base class). Then, that class “mysteriously” acts differently. By making the change to the base class, we can be certain the change appears in all the other (child) classes. 2. We want to have an Inventory property that contains a list of Item objects. Because HealingPotion inherits from Item, we can store a HealingPotion object in a property whose datatype is HealingPotion OR is Item. So, our Inventory property can be a List of Item objects. If we didn’t do use the base class, we would need to have separate properties for WeaponInventory (to hold Weapon objects) and HealingPotionInventory (to hold HealingPotion objects), etc. There are other ways to handle this. But, since this is in a course meant for beginners, it's mostly to demonstrate how base classes work, so you get familiar with it. If you look at the WPF course (starting at lesson 12.1), you'll see how to do simple "composition over inheritance" - which is a bit more advanced.
VS is an IDE. It’s a tool that can help with your productivity, such as generating skeleton code from simple classes to large projects. Other commonly used features include code auto completion, syntax highlight, code refactoring, and program debugging. If you are new to programming, I think you should try to use text editors instead to get used to the basic structures of programming.
A good exercise is to provide a spaghetti-like program and have them fix it by replacing all the gotos. I do this in my C# classes. 
They aren't. The only thing that's different is a string property. Moreover, do you have any idea of the number of dog breeds there are? Are you seriously going to create a class for each and every one? The worst thing you can do as an instructor is offer bad examples. It just leads people astray. If you can't invent a good example, then use one from the standard library.
https://www.reddit.com/r/learncsharp/comments/8ppnk0/opens_csv_file_takes_hex_string_converts_to_ascii/?utm_source=reddit-android Here is the code and the sample text with a brief description of what its doing 
I take it you hadn't heard of Edsger Dijkstra's "Go To Considered Harmful" letter yet?
Im trying to understand what this code does. . Select hex value changes it into an int but after that I dont know what the number styles does and allow hexspec does. . Is changing the int Into the ascii value. At the int representation. . Adds these values to an array. I'm trying to study linq rn. 
I was an Applesoft Basic programmer. Applesoft Basic consisted of gotos and addition and that was about it ;)
I'm probably going to get downvoted for this, as it is a little bit radical. Generally, inheritance is an anti-pattern of OOP, a vestigial member (heh) left over from the 1990s. It's a lazy solution which can be avoided by clever polymorphism. However, there are specific cases where it is useful. These can be identified by being Liskov Substitution Principle compliant and not easily replaced by a polymorphism-composition solution. * Working with Discriminated Unions (O/RM Table Per Hierarchy Mapping) * Certain UI frameworks, where components are pre-implemented and you just inherit and customize. * Enforcing consistency across a domain model. In almost every case, excessive inheritance results in problems elsewhere in the code. Favor polymorphism over inheritance. Further reading on design principles and patterns: https://en.wikipedia.org/wiki/SOLID https://en.wikipedia.org/wiki/Single_responsibility_principle https://en.wikipedia.org/wiki/Open/closed_principle https://en.wikipedia.org/wiki/Liskov_substitution_principle https://en.wikipedia.org/wiki/Interface_segregation_principle https://en.wikipedia.org/wiki/Dependency_inversion_principle https://en.wikipedia.org/wiki/GRASP_(object-oriented_design) 
That behavior of interfacing everything is an artifact of test-driven development -- where you have to mock everything, you need an interface for everything.
PC laptop + visual studio. You have an iPhone and use Xamarin Live app to test. To deploy to the Apple store you use a hosted service to build/deploy your app. Or you get an iMac on the cheap to build (which is more expensive/hassle). Unless you’re an Apple fanboy.
This is just an example. If I have a client that operates a business that consists solely of caring for Beagles and Poodles, using a class for each is fine. On the day the client wants to take care of every dog breed, I can refactor the code to accommodate that. Code is a function of developer time and business requirements. There's no ultimate way to solve a problem.
Wish the devs who worked on the code base prior to arriving at my current job figured that out sooner....
I think you should mention that first point can be easilly replaced with simple composition and second with interfaces. I don't think composition over inheritance is more advanced topic.
I would argue number 2 is a much better than reason than number 1. Code reuse can be accomplished with simpler to reason about patterns like composition/delegation. Inheritance is great when you have types with diverging functionality but are at some level conceptually the same.
I posted about a few of them here: https://blog.nem.ec/2014/01/01/magic-methods-c-sharp/
There is no justification for requiring a code change just to support a new breed of dog. And you should be ashamed for even suggesting that this is a reasonable design.
Not a single one of those actually addresses the question. 
&gt;There is no justification for requiring a code change just to support a new breed of dog That's why the dog walker's method signature is: public void WalkDog(Dog dog) and not public void WalkDog(Beagle dog) or public void WalkDog(Poodle dog)
c# specifically runs on a virtual machine, so you really shouldn't care what CPU you are using (as long as it's supported by the CLR, c#'s VM). so no there are no differences between the 64-bit and 32-bit stuff, unless you are trying to compile to native with CoreRT or something.
Link to this thing you're talking about?
https://stackoverflow.com/questions/21557459/search-value-in-csv-file-using-c-sharp
That only works if the row is a static length. My row's lengths change.
And are you going to be on standby when your client says they can't enter a new customer's dog because the system can't find the `HalfDobermanQuarterIrshSetterQuarterBeagle` class? 
&gt;In almost every case, excessive inheritance results in problems elsewhere in the code. Favor polymorphism over inheritance.
A system that accepts Dogs can accomodate a HalfDobermanQuarterIrshSetterQuarterBeagle as long as HalfDobermanQuarterIrshSetterQuarterBeagle inherits from Dog.
Except that class doesn't exist yet because you didn't anticipate that the client's customer would have that specific breed. Seriously, this isn't a complex issue. It is impossible for you to create a class for every possible breed. Therefore, breeds shouldn't be differentiated by classes. Especially when it is so obviously easy to differentiate breeds using a string property on a single Dog class without inheritance.
Yes.
Can link me the working source? Tnx
Before you learn how to code, you need to learn how to Google. I put the key words in (out of interest) and came back with 6 or 7 options.
Hahaha lol 😀 tried it and failed
Nah.
Stop being a help vampire. 
What would be the difference between this and the build-in Docker support in VS2017?
use a csv library, e. g. CsvHelper, to read the file. When you get a row that has the code you want return that row. If you know that the csv file never is going to be GB large you can read the whole file at once an loop thru the content in memory [https://joshclose.github.io/CsvHelper/](https://joshclose.github.io/CsvHelper/)
[Google](http://lmgtfy.com/?q=C%23+read+pdf) 
rofl
Search dapper on github and learn how to work with database crud operations, look into dapper.contrib for generic methods like get, update, insert, delete and setting primary keys on poco classes. When working with multiple records pass in transaction...
As you mentioned Xamarin, you should look at what (if any) Android emulator you want to use. Last time I did Android dev, Intel HAXM (or similar) provided a significant performance boost.
I am on mobile so didn't checkout the entire thing. I have noticed that you have logic in your controller. The logic should be in the service. So controller =&gt; service =&gt; repository
I agree with you bro. With interpolation we do not have to count all the indexes.
Ah cmon nobody can help ???
I'm about to head to bed so didn't get to look it completely over, but in your CattleCompanion API your Update method is a huge code smell and looks like a severe pain in the ass if you were to ever have to update it a year from now trying to remember why all that logic exists.
There are two ways I know of: - [VistaMenu](https://wyday.com/vistamenu/) (requires using the `MainMenu` classes - outdated and fewer features) - [NativeRenderer](https://stackoverflow.com/a/13690796/7475278) (does not mimic the behavior of a native menu completely perfectly, especially when using custom visual styles)
The whole point of the ? operator is to say that although this usually throws an exception in this case we want you to just return null.
I hear you on that. I have been doing C# for about two years now and the code base I have is similar, a mix of MVC web forms and console apps all with different design patterns and approaches. I have found unpicking it and learning what it is suppose to do has been the best approach. Once I know what data goes where and why I can confidently change it. An added bonus of such a wide and varied scope of design means I have learnt all sorts of new things and gained experience in that tech. 
I've always had great success starting from the beginning and just walking through the code while taking notes on where data goes in and where it goes out. Good luck debugging!
My approach is usually to try to refractor the code first just moving variables and renaming methods and or variables, rest curing code into something you feel is more understandable. Once that is done you get sort of a high level understanding of the code and then you can go in and refractor even more rewriting entire sections of code to fit something that you yourself understand and are able to maintain. I also find it useful to add comments to section of code that I don't rewrite just to remind myself next time I look at this legacy code what that section was doing. 
I like xunit. Be sure to include that.
Like others have said, both AMD and Intel will work fine because of the .Net Runtime abstraction. From my experience, one of the main factors that determines which CPU to choose, is clock speed. It seems like there’s a direct correlation between compile time and processor clock speed, as long as you have enough cores to take of non-compile work.
Not that I know of, but if using ubuntu or similar, then this blog post will help you to build it with little fuss: https://kvssoft.wordpress.com/2016/12/13/building-monodevelop-on-ubuntu/. Last time I checked, 7.6 is not in good shape, but 7.5 works well for me, apart from the apparent syntax highlighting issues that frankly I haven't noticed.
Why the quotes around Visual Studio?
I corrected the column names to be unique, and I am able to move past the original error/exception that was thrown. I should have thought of that, because I would have gotten an error if I tried to add three columns into my database with the same name. I knew it had to be something simple that I was overlooking 
I had a look at his account and not only was he also using Python 8 days ago, but was on one of the upwork sites. How can he expect to be getting paid to do anything if he can't google or even program? This pisses me off because the times I have tired those sites they never go with me, despite being specific in the proposal and covering all the points they mention, while also asking for clarification on some of their less clear points (e.g. they usually have bad english). But no, instead they go with people like OP who post vague one sentence shit like "i will accomplish this task in 1 day" or "we work do the needful together in 3rd days". Infuriating.
I'm going to assume that you have a list of features and bugs to fix and that someone is paying for you to do it. Read around a topic when you get to it. Don't just copy and paste solutions from stack overflow. Head first design patterns is a great book. Also whichever Skeet C# book is the latest. Study study study. I've been coding .net since 1.1 and I'm still learning. Don't change something unless you have to. Boy scout instead: when you need to change something, leave it tidier than you found it. Be honest with management. Don't give an estimate until you know what it is you have to do. Tell them you'll get back to them. They'll press you, say no. Your experience in other platforms will come in handy but not for estimates. Go slow at first; you're not going to have the pace you did in other environments. Work out which bits of the domain are going to kill the company if you mess them up (ask someone). Wrap them in unit/integration tests to protect yourself. If you find yourself asking "what I'm doing send really complex, there must be a better way" then there usually is. Refactoring by abstraction works well when you're changing something. Google it. In many .net apps the design pattern is the last word on a class name. For example SchedulingStrategy would implement the Strategy pattern. Martin Fowler is a great resource for that. Hope that helps.
Unit tests and regression tests. Those are key to ensuring functionality continues consistently during refactoring. They also promote good design and act as self documenting code. It’s also a real courtesy to other developers on the team or those who inherit the codebase in the future. Unfortunately well covered code is usually the rarity. 
As a recent college graduate (not US though), I've found myself working with VB apps, webforms, winforms, MVC projects in the past few months I've been employed. Luckily I could start my own project in Angular/.net core but that's another story. What I basically do, and I never really got time for this but i have to do it, is just look at what I have to change in the code base, try to find the starting point and just debug through the entire thing (page/method/business case). That way I can see where the variables come from, how they get filled up, what functions are called &amp; where/why, where data is being get or passed through etc... That gives me at least an overview of what's going on if no one explains it to me, and in most cases it's not even enough and time is still wasted trying to figure out what the hell is going on &amp; how it's built... 
Because "Visual Studio for Mac" is based on MonoDevelop rather than the Visual Studio.
If you don't want to use external libraries you could .split() the CSV by newline into a collection, check which index starts with the code and then return that index. Just a quick dirty solution.
I fully agree. Raw single thread speed is so often overlooked. So many times have I experienced systems running visibly slower on super expensive Xeons, than on my i7 development PC. Off course those 30+ core Xeons are all about paralelization, but often in cloud providers only provide the choice for nr of cores, disregarding what their speed actually is. 
Okay. As long as they're contributing code back to the base then they can call it whatever they like I think.
yeah, just scribbling the code flow on a piece of A4 paper is also my goto method for analyzing debugging unknown code. Most of the time - once you have structured everything on a piece of paper - you don't need it anymore because you understood the underlying "logic" of the codebase
Subject sounded very interesting. But the post felt far to short. 
Yeah totally agree but I tried to point out the most common mistake people make while using async await rather than going through various other complex issues. However will try to elaborate more in future posts.
I almost never use inheritance these days. There is a saying, "favour composition over inheritance", which means that shared functionality is better off in a shared helper class or similar, rather than shared methods in a base class. Composition makes unit testing easier, it makes it easier when your realise that functionality could be useful outside of the inherited class structure, and just in general creates less coupling. I tend to write less and less "frameworkish" solutions where you try to shoehorn your whole code base into some big convoluted mold. Instead, I write many small, independent, decoupled "modules", because I find it easier to maintain and faster to implement. Inheritance does not really have a place in the small independent modules. Reusability is achieved by breaking out utility/infrastructure in its own module with very narrow surface area in the form of a single interface. I use inheritance in the sense that I of course inherit from MVC's Controller, AuthorizeAttribute and so on, but I never create my own base classes anymore. 
sounds like almost all code bases I have had deal with - techniques I have found useful: Make notes of things in code you find that appear key, especially record flows through code. I find making notes seems to make it stick in memory better, especially writing it as opposed to cut and pasting. Refactoring - when you have a complex method, refactor it by just moving groups of lines than appear to an obvious methods into a new method with sensible name and calling it. This seems to make it easier to understand, even if you don't eventually check in refactored version. 
One thing I do is start a new branch and try to refactor it. That forces me to understand what's going on. Even if my refactoring ends up making the code worse, I can just abandon that branch and I'll still have gained insight into the program.
I just started a new job that's all C#, and came from vb.net and a bunch of other languages. It's a little unsettling at first, but just hang in there and everything will be fine in a few weeks.
I just changed jobs a few months ago I went from barely using c# and using RPG, and PHP. My proficiency has jumped in less than a year. My advice is pick up some books do a project you love and you'll be there in no time brother.
There is a "experimental" word in the name.
Thanks I'll start with them.
Get some kind of automated testing methodology in place. Hopefully, there are unit tests. If not, try and find a way to build some. Run tests, make a change, and then run the same tests again. This will tell you if any of your changes broke any tests. Start small. Don't make big, sweeping changes right away. Maybe refactor a method or two to start. Don't try and refactor the entire architecture until little, easier changes are out of the way. And test, test, test.
You do both
Perhaps. Let me know what you find. If you look at the IL output, you should be able to see the function, although it has an unspeakable (invalid) name, so it may not be available in reflection.
They did for the `System.Data` namespace in .NET. If I recall correctly, they didn't in .NET Core because the interface versions lacked all of the async methods.
&gt; most of the code was kinda messy, overcomplicated,scattered all over the place with all sorts of "newness" being used Don't be quick to judge. On the surface, C# often looks over-complicated and scattered all over the place (-or- it may just be an advanced design you've never seen before.) Is it n-tier? or MVC like? Good separation of concerns? Good use of Interfaces and/or Abstract base classes? Does it make good use of Dependency Injection? Does it have Unit Tests with close to 100% code coverage? If so, use that to your advantage. 
While I was writing it, I threw up in my mouth a little. I was torn whether or not to put Mother and Father Ids on Cows themselves or create an association/junction table with relationships. I was trying to keep things simple and went with the first approach but I am going to refactor that before I deploy. If I do an association table, I was planning to do something along the lines of Id, CowId, Cow2Id, and Relationship. If I do this, is it ok to have "magic strings" as the relationship column -- like Child, Mother, Father etc -- or is it better to have those point to another table called Relationship types? I don't like the idea of magic strings but its an extra join that would have to be made every single time. Is it worth it?
Maybe controllers are my missing step as I'm constantly wondering where I should put the logic that doesn't seem to fit in the controller or the repository. I finished several of Mosh's courses on MVC 5 and he never mentioned services at all (on the back end) but I've heard the pattern mentioned in passing. I'm really unsure how to take advantage of them but I will look into it later today. Do you have any good resources off the top of your head?
Experienced programmer: Generally I'll start with small refactorings - remove duplication, break up large code blocks to smaller ones. During that process a tipping point will be reached and patterns start to become clear. Then I can start to consider how maintainable/expandable the project really is and start thinking about migration into other patterns 
I was going to build it, but I'm on my Fedora distro at the moment. Mono put it in the repo for CentOS which Fedora uses. So, thanks for the link! I wouldn't have seen that.
Good news! 7.5 is available for Fedora, if the mono instructions are followed until the instructions fail. Once they fail, use dnfdragora and look for the stuff that's version 7.5. You have to scroll down pretty far, because the button to organize the results by version number does not work. But it installs, and appears to work just fine. Get everything that is the latest 7.5.something.
The title and content of this article are completely divorced. "Escape asynchronous hell" = "tasks start as soon as they return" wat
I made an app that only lets users type their credit card information, with a button that says big surprise. They see the surprise in their bank statements.
Just kidding.
I feel like maybe that should be an enum?
Think of your controller as merely directing traffic (like an air traffic controller). If you do that right you should never have to unit test your controllers themselves.
I’m new to C# so I don’t know how that fits in. Is there a relationship type enum that is it’s own model? And then I say Relationship.Type = RelationshipType.Mother ? Basically use the enum instead of a string every time?
I'm making a UWP app right now, but it's totally free with no ads. It is absolutely not junk, like a lot of free ones that I have seen. I think it's a great alternative to Java, but for Windows devices. There is a high potential to profit from developing for UWP, if the app itself has a high potential for profit. Plus, microsoft won't sue you for using C#, but Oracle might sue for using Java lol. 
I know everything.
Yeah, basically you'd have a model that looks like this: enum Relationship { Mother, Father, Sibling }
Dude, just learn UWP. You don't have to make an installer for UWP apps. I'm not sure about winForm apps, but UWP apps use XAML, which is pretty much xml that just lays out the UI. It's real simple. I finished my C# course in a week in Febuary, and started learning UWP. Now I'm almost done with my first software application. I would have been finished a lot sooner, but I wanted to make something that turned out to be pretty tough to figure out, due to the variety of information on image binding which isn't shown in examples very well a lot of the time.
Thank you about stating that general rule, i didn't know about that. Correct me if i'm wrong here, but by using an interface, don't we have to copy the code that's shared to both implementations? 
I haven't had any issues that I haven't been able to solve yet. I like XAML. It's great for building UI's.
Depends on how you write your code. It's hard to know what the right way might be at times, but there's definitely wrong ways to design your code.
Curl up in a ball. Try not to cry. Cry anyway.
Hi, I have no idea how to achieve that, but I definitely waiting for someone providing and answer! 
As an experienced C# developer. From what you describe, you start by banging your head in the desk, tear your hair out. Then you scream "why mere!!". After that you start reading and try to figure out what the hell the code is doing.
Depends if the code lives inside the classes or outside. 
My main problem with that update code though wasn't the magic strings, it was all of the if statements scattered all over the place. I feel like you can use reflection to check the values up front if they are null or 0 and send back a BadRequest right off the bat if any of them are. From there I would try to find a way to potentially not call your database 5 different times in one Update on getting data back - that needs to be 1 GET instead to get all the data you need (maybe you need another API method to do that). If the Id passed in doesn't return any records that should be the only time you should be returning NotFound.
Game not compiled?
The WPF course is at: https://scottlilly.com/build-a-cwpf-rpg/. I'm still creating lessons for it, so it isn't "complete" yet. It's more of a "watch how I'm coding this" series. It's also best for people who have a little programming experience. The Windows Forms course was written for complete beginners. But, the WPF series has a better architecture (it starts with Model-View-ViewModel) than the Windows Forms project and gets into things like composition over inheritance and interfaces.
Your GetCowsInRelationship is also odd since you're solely checking if that relationship is siblings or not. In that case don't you want your api path to simply be "{id}/siblings" ? Then instead of 2 calls to the database couldn't you just do var siblings = _unitOfWork.Cattle.GetSiblings(new Cow {Id = id}); And if that returns nothing, you return NotFound - and if it does you return Ok(siblings) The returning BadRequest at the end is just a bad way of doing it... these methods should always end with a return OK.
If the code is exactly the same in other cases, shouldn't that be pulled out into its own object?
Bug fixes and unit tests. If there are any areas with little to no test coverage get some unit tests written for them. If there are bugs in your backlog start picking them up. Whenever I start work on a new project these are always the first things I start on.
Well, the fact that I organized the relationships the way that I did made updating the relationships extremely convoluted and that led to the awkward conditionals. I need to have a way to only update the mother or only update the father relationship. From my understanding of a typical API, I shouldn’t have to send all of the values of the cow to update the cow, right? So some of the values would be null because I’m only updating the mother id. And if I want to remove the mother Id then I can’t set it to null because then it wouldn’t do anything at all. So my workaround was setting it to 0 if I want to remove it. However, if I use an association table, it makes all of that much simpler. I’m no longer updating the cow, I’m updating the relationship. And if I wanted to remove the mother, I would be using a delete request, which makes a lot more sense anyways since I am deleting the relationship from Cow rather than updating Cow. Cow is staying the same. 
That sounds good. I’m in the process of learning proper url templates for APIs and I couldn’t decide between your suggestion and my failed implementation of a query url. 
Yeah, maybe it's redesigning how that system works. All I know is if I see all of those conditionals, I'm just thinking of all of the bugs you're going to introduce.
Experienced C# programmer here, so obviously I'm biased, but I have heard qualms like this about my own code. "What are all these fancy features you're using? Doesn't it make the code harder to read?" etc type questions, from people who claim to be experienced C# programmers, but who apparently stopped learning in 2008. Either that, or they assume that Java experience == C# experience (it does not). C# is a distinct language, and has had many quality of life features added over the years. Proper use of these features becomes baked into the idea of idiomatic C#. If you don't know how to read and write idiomatic C#, it might be hard to work through the code. But this is true for any language. So my response to people with these qualms is usually "learn the damn language, most of these features have been around for 5 or even 10 years". Of course without seeing the code it's impossible to say if this is the case for your codebase, but certainly you should still actually sit down and learn how these features work and why they're used. Maybe even do a quick search on the history of the language to see how new they actually are. Based on my experience with other devs, I have a feeling that these are not bleeding edge features being used, but like I said before, features that have been in the language for quite a while. *C# in Depth* by Jon Skeet is one of the best resources for learning about all the non\-trivial features of the language. It covers the evolution of certain idioms to give a bit of context to some of the newer features. If you pick up a copy, I recommend going through [Manning's early access program](https://www.manning.com/books/c-sharp-in-depth-fourth-edition), as the book is currently being updated for a 4th edition. TL;DR \- Stop whining and learn the damn language.
But why do you have to use different classes? You'd think they'd include the default windows one as an option in the properties menu.
I actually found a better way, you right click in the toolbox and select Choose Items... then in .net framework components, you find MainMenu then add it and you have a standard windows menu. I don't think it uses vistamenu.
When you work under a budget or have to generate a quote, how do you deal with estimates given to management? I struggle with this but all the other advice makes sense to me. 
Although yes knowing language specific constructs is a pro. Writing maintainable code is a different subject. Then again, regardless of syntax, i would say learn design patterns and principles. Read a lot of code and try to recognize the responsibility/pattern. From there things get a lot easier to figure out. Writing shitty code is language agnostic :)
What's the process? Who has given the estimate?
If I’m tasked with a new project I have to provide an estimate or quote before any work is done. We don’t get paid otherwise. 
Do you get given a spec? If so, decompose the spec into tasks you can estimate and then sum all the pieces and add 50%. When you give an estimate, always provide with a confidence. All forecasts should have a confidence, even estimates!
Honestly this is a recipe for an ugly codebase. Just refactor your shared stuff out to a shared assembly and then put your client stuff and server stuff in different assemblies that call into the shared assembly where required. I.e.: any piece of code that works the same way for the server and client is in the shared assembly. Only code that's specific to the server is in the server assembly, etc. 
Yes and no. On completely new projects where a client just wants say, something that doesn’t exist, no spec. Other times, a complete redesign of existing applications, spec is vague. Splitting into tasks is what I have been doing. 50% is a good one to add thanks. I tend to overestimate to account for any gotchas later on. 
Re #1: How do you avoid collisions when modifying a base class that is already the root of an inheritance chain. For example, your have a base class Foo that defines a method A(), and a class: Bar : Foo that implements a method B(). How do you go about adding Foo.B() later down the road without breaking Bar?
Sure, there's the Windows app driver on github.
No spec = no estimates. If the customers can't be arsed to explain what they want as user stories or scribbles on paper then tell them that you'll be finished when you're finished. [To the wife readership] We need to act like professionals and craftspersons, it's not good enough just to throw a number and hope for the best. Say "I don't know enough to give you an estimate". Ait is unprofessional to allow yourself to be bullied into work. You are the expert. You're the one with the skill. Stand up for yourselves!
You don't need to be an ass about it. Perhaps the fella found code written by some average developer who doesn't follow any standards. There is a LOT of bad code out there, and it happens in C# just as well as any other language. Therefore I believe there is a chance he's run into some shitty code. Having said that, yes, learn the language before making assumptions, but don't be an ass to someone while telling them to learn it.
Hm. I've got about 12-ish years of C# programming under me, now, and I was, once, a pretty green programmer with naught but a BS in CS and wee bits of practical C++, Java, ASP Classic, SQL and Crystal Reports (about which: ew) to fall back on, when I was learning C# for my job. Try to start with small changes and bug fixes, learning the codebase through debugging and reading. Ask for assistance from more experienced team members with the early stuff, if you can, because it can be difficult to know where to start. Try to keep in mind if the person you're asking is more experienced as a programmer, with this code base, or with the company or project culture than you are, so you can tailor your questions and interpret their answers appropriately. Encapsulate. Sometimes, the best thing you can do is build your new thing off in its own little corner and route the flow of data through it and back out to where it came from. It insulates you from the existing system *and* vice-versa, and can keep your new code testable even if the rest of the system is a big ball of mud. Keep an eye on conventions and standards, and try to use them. It'll help you get used to currently-unfamiliar ways of doing things, and help keep your additions and changes readable to other team members. I hope you've got a source control system.
Use the program before looking at the code. Open it, log in, mess around, try to understand how it works, what it does, what's its limitations etc. Try really hard to understand the program. Then you go to the code. Debug it, try to recognize at the code the behavior you saw on the program, change minor things to see if it affects what you think it should affects. In simple words: Hack that shit out. In time you'll feel confident enough to start your actual tasks.
Debugger is your friend
I'm in the same boat as you, I'm learning C# currently by going through pluralsite's C# API tutorials with SQL and then I'll move onto a Angular 6. At least that's the plan so far. One thing worth clarifying is if you have to use AngularJS or if you should instead use one of the other angular versions based on Typescript. Perhaps start with the API first and keep going from there. Not much of advice, more like encouragement from a fellow student but keep it up and I look forward to what other people post here too!
Can't you determine which cows are siblings by checking to see if they have identical mothers or fathers?
I'm looking forward to pilot my learning through pluralsight. I learned AngularJS 1.x. Also looking forward to encouragement from you and other developers. Thanks. 
Just poking around at random code files and stumbling on Cow.cs: * Why are the methods to remove a cow's parents in Cow.cs called "Delete"? Shouldn't they be called "Remove" because they're not actually deleting the parent cows? * Also related to removing parents: shouldn't the delete methods set Father/Mother to null in addition to setting the IDs to null? Do you need both the ID and the object reference? I thought EF could handle things with just the reference and not the ID...
Yep, that would actually make a lot more sense.
No idea what you're actually looking at from your description. But it kinda sounds to me like a "realistic", mature system. In most scenarios I've seen in actual ops work, that system has probably had multiple devs touching it over the years. Each dev thinks their preferred pattern is the best, and each dev brings varying levels of skills to the system. Thus you end up with a system that is sort of non-sensical and all over the place. I like to think of project work like working in a new car factory and ops/maintenance work like being the mechanic. One is much more structured and organized, the other is just do I need what it takes to get your system back on the road again.
I've used Entity Framework on a number of WPF projects with SQLite database. It's really the fastest way to get up and running.
I like learning from good real-world examples of complicated apps. Here's an example Angular app: https://github.com/gothinkster/angular-realworld-example-app I use these .NET Core C# API guidelines when writing APIs that get consumed by the Angular client: https://github.com/Microsoft/api-guidelines Here's are examples of a .NET web applications: https://github.com/DaniJG/BlogPlayground https://github.com/aspnet/MusicStore
It's not really possible in this case, since this code is meant for game entities where the server is authoritative. Let's say an entity has a Health property, whose getter is meant to be accessible both on the server and client, but its setter should be only used on the server, otherwise it would throw a Net.ServerNotActiveException.
They released 15.7 and Intellicode at Build 2018, and the product page for the later states it requires 15.7. No reason to be running a preview build for something that was officially released a month ago, and no reason to list out what obsolete preview builds a new feature is capable of running on.
Removed: Rule 4.
Removed: Rule 4. You'll have to include code or fix your OBJ model to remove the extra mesh.
.NET Core is just a trimmed down version of .NET Framework which can run on Linux or Mac.
Yup, saw that coming so bad that i actually avoid async/await. Which is probably overkill but whatever 😁
Two interfaces IWritableEntity, IReadableEntity. Server side implementation has more logic and whatnot in it and implements both interfaces. Client side is just a data struct/class. Shared interfaces, specialized implementation. 
I have over 60 Projects on GitHub, and I am totally unable to understand and use MVVM in my code. Will this help with that?
Hrm.. you're not by chance serializing these entities and expecting them to behave differently when interacted with on the server vs. on the client are you? That way, madness lies. You should know that the 'private' scope in .NET is for compile-time enforcement only. There's nothing to keep, for instance, a lazy programmer from using AutoMapper (or just reflection in general) to write to your private property. Similar to what /u/sunzoo wrote, here's another approach: #region This code lives in the shared library public class Thing : IReadOnlyThing { // Internal constructor means you can't just new up a Thing from outside this assembly internal Thing() { } public string MyProperty { get; set; } } // The client cannot new up a new Thing instance. It must use the factory, // which only returns a read-only interface public class ClientThingFactory { public static IReadOnlyThing GetThing() { return new Thing(); } } #endregion // Interface to provide read-only access to an instance of Thing public interface IReadOnlyThing { string MyProperty { get; } } }
That’s pretty much why I left my last job. A lot of state funded projects have more leeway in terms of providing my own estimates so things are a lot easier to guesstimate. Customers that’s don’t know what they want suddenly k ow what they need when I give them a pricey quote. 
C# isn't supposed to be used like C, there isn't supposed to be 3000+ lines in a file, usually. It's supposed to be split up into multiple classes, to make everything easier. If you know java, it's a little like that. From what you have in your description, I have no idea what you even mean. You'll have to elaborate or put screenshots in your post
Should I create another post with the code now ?
Another option would be to simply build client and server versions of your shared library. The server code is surrounded by #IF .. #ENDIF conditional compilation constants. Some people hate that stuff, but it does work.
I really don't even see this as a problem. Hell is definitely not the right word for this. Before async/await, this just would've been written synchronously. While using async/await in this pattern is *slightly* less performant than the sync version (probably not even noticeably), writing it this way makes converting it to be run in parallel *very* easy to convert to. Compare that to the effort it would take to make this concurrent from the sync approach without async/await.
You can edit your post with the code you're using, and if it's sufficient I'll restore the post.
Async await hell arises if we not use it properly in first place. Im not against using async await, Im just pointing out the common mistake people make while using async await that creates hell for them. Async await is a really helpful tool and should be adopted wherever possible.
Saying hell more doesn't mean you've shown how it's hell. It's not.
My point is that this isn't hell, it's not even really negative. Compared to the default thing someone would write without async/await, it would just be sync. Negatives here are extremely minor. Compare this to callback hell, where you would get into huge deeply nested scenarios that make reading and following the code very difficult. Compare to dll hell that requires an enormous amount of time debugging and figuring out issues loading dependencies. Using async/await in this way involves very little performance impact, little to no increase in cognitive load, no real difference in debugging (I guess stack traces might be minorly annoying if you aren't used to it?). This just isn't really anything to do with async/await and it's not hell at all. It's not as performant as it could be because it's not making use of concurrency, but believe it or not, even the changes you've described are not necessarily enough to make this concurrent (depending on the implementation of the inner functions, it could still be all synchronous).
You avoid async/await entirely? That is like saying you avoid LINQ, Tasks, and databases.
I tested it out with the following code: class Program { static void Main(string[] args) { var T = typeof(Tester); var Members = T.FindMembers(MemberTypes.All, BindingFlags.Static | BindingFlags.NonPublic, (a, b) =&gt; true, null); foreach (var Member in Members) { if (Member is MethodInfo Method) { Console.WriteLine($"Invoking '{Method.Name}' . . . \r\n"); Method.Invoke(null, new object[] { }); } } Console.ReadLine(); } } class Tester { void Outer (bool a) { if (a) Inner(); void Inner () { Console.WriteLine("You've invoked a local function."); } } } This produces the following output: Invoking '&lt;Outer&gt;g__Inner|0_0' . . . You've invoked a local function. I don't really see a use for reflecting over 'local' functions at this point, but little tricks like these always come in handy when you are trying to hide some magic behind closed curtains.
Not quite, those don't impose semantic changes in how you could against things
I find that trying to understand the purpose of the overall app and it's features a good starting point and then concentrate on specific sections of code in isolation until you get it, that way you end up "specialising" in one area after another until you have the whole picture.
I have been a contractor for many years and I have seen lots of screw ups. In fact that is often the reason I'm called. Calling attention to bad code rarely accomplishes anything constructive although sometimes it feels good to do it. Unless your client or employer explicitly asks it definitely does not impress them if you document bad code and prove with one thousand percent certainty that it is suboptimal or just plain wrong. Best thing to do is just be quiet and do your job. Turn it into a learning experience. This type of thing is going to happen again and again throughout your career. If it doesn't you are probably starting to get old and obsolete.
Good to know. I'll need to look into that. That said, it may just be worth it to stick with Intel, even though the threadripper AMD's look so tempting. 
Im thinking I'll just remain with Intel at this point. 
Ok done.
Thanks, but it looks kinda irrelevant to the issue you're describing. If the github repo owner said your mesh has overlapping/duplicate geometry, then shouldn't you fix that? Garbage-in-garbage-out?
&gt;because of the .Net Runtime abstraction wat 
&gt;c# runs on a virtual machine, so you really shouldn't care what CPU you are using wat 
You need a mac to compile ios apps, even with Xamarin. 
Thats not true. .NET Core has got a lot of optimizations and is about to get new features faster than .NET Framework.
Similar to what others have said, you really ought to factor out shared logic and separate your client/server code. This could be done with interfaces, decorators, subclassing, etc. It will eliminate this issue, and make things *much* easier in the future. Looking at it from a development side, rather than security (which will be a nightmare with this model), imagine you have some entities that do not exist on the client side but do on the server- with this chimera approach to classes, you have to constantly keep track of two distinct states in your head so that you don't accidentally use a null reference. If you had an abstract class in a separate library, shared by the client and server but implemented as distinct subclasses there would be much less possibility of trying to access fields/properties/methods that don't exist. Ultimately it will save you a lot of time in the future spent debugging.
ASP.NET: Works on (full) .Net framework (windows "only"). You can choose between MVC (fine) , WebForms (old), WebPages (not good)... ASP.NET is slowly dying (in favor of core version) ASP.NET Core: Opensource replacement for ASP.NET. Works on .net core (multi-platform). You can choose between MVC (fine for bigger projects), RazorPages (mishmash of MVC, WebForms (good parts) and WebPages(good parts)...).. ASP.NET MVC and ASP.NET core MVC make same things (no front-end back-end distinguish between these)... .Net developer is broad term. If they say ASP.NET MVC (no "core") they probably mean ASP.NET MVC 5 (newest version), but maybe they just forget to update their job offer.. 
First of all be clear that there is the .NET Framework, which only runs on the Windows platform, and .NET Core, which is cross-platform but does not have quite all of the features of .NET Framework. 1. ASP.Net Core MVC is a part of ASP.NET Core. The MVC portion is useful when building web APIs and web application using the Model-View-Controller pattern. 2. If we are talking about front-end Javascript on a web app, then you would usually load the necessary JS files into the view. I've included Javascript in my projects as a part of the same codebase. 3. Yes, they are likely looking for someone familiar with ASP.NET MVC5 on the .Net Framework. But honestly the programming between the two frameworks is going to be largely the same.
How do you mean garbage in out ?
Basically, you're feeding the OBJ importer an OBJ file with incorrect overlapping geometry, so the output from it is also incorrect. You'd need to fix the underlying OBJ file and remove the errant geometry.
To do that , I have to open the broken .obj and modify them (manually)?
&gt;The best thing to do is to only issue SQL commands for changes (such as new or changed records) rather than re-writing the whole collection. Rather you just need to keep in mind that you have 2 representations of your data you are keeping 1 is data archived on the DB the other is the in-memory collection the user is working with. When the user adds a record your code needs to update both the DB and the in-memory collection. Cannot over-emphasize the importance of this here. This is all-around great advice, though.... 
I assume so, or use a separate 3D modelling program.
This is a student project and I have to fix this in a given time. And not the .obj , rather my c# code.
Maybe try reposting your question, but include: 1. The code you're using to load 2. The OBJ file you're loading (upload it somewhere, maybe pastebin) 3. The MTL file associated with the OBJ file 4. The github library you're using (that has the `ModelImporter` and associated classes) Ideally, provide a [Minimal, Complete, and Verifiable example](https://stackoverflow.com/help/mcve) with which we can reproduce what you're seeing.
.NET Core is a runtime/framework like .NET Framework and Mono are. Unlike .NET Framework, it's more lightweight; like Mono, it's available on multiple platforms and open-source. ASP.NET is the umbrella term of what Microsoft traditionally calls all their .NET-based web stuff. Mostly server-side (the 's' in ASP), but that's not quite true any more. ASP.NET MVC is an MVC framework for .NET (like Ruby on Rails). ASP.NET Core MVC is the newest version of that, and (for now) exists on both .NET Core and .NET Framework. ASP.NET Web API is a web API framework (like SOAP or WCF). MVC is server-side rendering of a web page, where M is your data model, V is the view (the page that gets rendered), and C the controller that interacts between the M and the V. Web API, on the other hand, does not render pages, but exists for web services; it is not typically user-invoked.
Have you read this: https://github.com/dotnet/roslyn/wiki/How-To-Write-a-C%23-Analyzer-and-Code-Fix
.NET Core is a new runtime for .NET. It's the cool new kid in town. There's a lot of things .NET Framework does out of the box that .NET Core can't yet do, such as run WPF applications, but on the other hand, .NET Core: * can run on Linux and macOS * is newer — it has some optimizations .NET Framework doesn't, and even some API features (such as `Enum.Parse&lt;T&gt;`) * is a lot slimmer, as you are expected to ship the libraries you need as part of your app
That would be composition and is often what you should do instead of inheritance. However, it wouldn't make public methods part of the object itself, and in this case, that would make for a poor API.
&gt; I'm probably going to get downvoted for this, as it is a little bit radical. I didn't downvote you, but I don't know why you posted seven random links in there. It's a bit of an exaggeration to call inheritance an anti-pattern, but it _has_ been overused in the past.
The enum parsing is really quite neat. Makes doing stuff through json much more readable
Man, I need to be working on other things, but this was interesting. Haven't had an excuse to dive into Roslyn. using Microsoft.CodeAnalysis; using Microsoft.CodeAnalysis.CSharp; using Microsoft.CodeAnalysis.CSharp.Syntax; using Microsoft.CodeAnalysis.Diagnostics; using System.Collections.Immutable; using System.Linq; namespace ServerRule { [DiagnosticAnalyzer(LanguageNames.CSharp)] public class ServerRuleAnalyzer : DiagnosticAnalyzer { public const string DiagnosticId = "ServerRule"; // You can change these strings in the Resources.resx file. If you do not want your analyzer to be localize-able, you can use regular strings for Title and MessageFormat. // See https://github.com/dotnet/roslyn/blob/master/docs/analyzers/Localizing%20Analyzers.md for more on localization private static readonly LocalizableString Title = "Call to [Server] not checking if on server."; private static readonly LocalizableString MessageFormat = "Illegal server call."; private static readonly LocalizableString Description = "Calls to methods with a [Server] attribute need to be an if(Net.IsServer) block."; private const string Category = "Server"; private static DiagnosticDescriptor Rule = new DiagnosticDescriptor(DiagnosticId, Title, MessageFormat, Category, DiagnosticSeverity.Error, isEnabledByDefault: true, description: Description); public override ImmutableArray&lt;DiagnosticDescriptor&gt; SupportedDiagnostics { get { return ImmutableArray.Create(Rule); } } public override void Initialize(AnalysisContext context) { // TODO: Consider registering other actions that act on syntax instead of or in addition to symbols // See https://github.com/dotnet/roslyn/blob/master/docs/analyzers/Analyzer%20Actions%20Semantics.md for more information context.RegisterSyntaxNodeAction(AnalyzeNode, SyntaxKind.InvocationExpression); } private void AnalyzeNode(SyntaxNodeAnalysisContext context) { var invocationExpr = (InvocationExpressionSyntax)context.Node; var memberSymbol = context.SemanticModel.GetSymbolInfo(invocationExpr).Symbol as IMethodSymbol; var attributes = memberSymbol.GetAttributes(); // Check if the expression being called has a [Server] attribute. if(attributes.Any(x =&gt; x.ToString() == "TestConsoleApp.ServerAttribute")) { // Walk up the syntax tree until we reach a method declaration. var node = invocationExpr.Parent; while(!node.IsKind(SyntaxKind.MethodDeclaration)) { // If...we get an if statement, check it. if(node.IsKind(SyntaxKind.IfStatement)) { if ((node as IfStatementSyntax).Condition.ToString() == "Net.IsServer") { // Good to go. Call to method with [Server] attribute is somewhere in a if(Net.IsServer) block. return; } } node = node.Parent; } // If we're here, it means the expression isn't in an if(Net.IsServer) block. var diagnostic = Diagnostic.Create(Rule, invocationExpr.GetLocation()); context.ReportDiagnostic(diagnostic); } } } } Here is the bulk of the rule, so you can see how to dive into the attributes and make sure the expression is in an if(Net.IsServer) block. It's fragile, but it's a starting point. The attribute name needs to match the real name. The `Net.IsServer` check should also really be checking the expression to make sure it's the right call and not just some other `Net.IsServer` (unlikely, but an issue). No code fixing yet. I'll be at work for a few hours, but let me know if you have any questions, and I'll see if I can answer.
&gt;Done sir.Hope somebody can find the solution on the coding basis.
This really is the best answer for how you should think about it in a language-agnostic way. Just imagine those methods being aggressively inlined. For anyone who wants to dive into what *really* happens under the hood in C#-specific way: The first thing you need to know is that, unlike C++, in C#, there is only one unary `++` operator, and it is strictly pass-by-value. You can't explicitly invoke it (or any other operator), but for `uint` it would be defined as: public static uint operator ++(int x) { return x + 1; } To give you both prefix and postfix versions, the compiler just tacks on some relevant preamble/postamble code for you. When you make the statement `var j = ++i` this is translated into: var temp = i.operator++(); i = temp; var j = temp; And for `var j = i++`: var temp = i.operator++(); var j = i; // remember, operator++() doesn't modify i i = temp; So take for instance, this lovely and totally readable code: uint i = 0xDEADBEEF; var j = ++i + i++; Here is the corresponding monodis output with my annotation of how this would decompile: // uint i = 0xDEADBEEF; IL_0001: ldc.i4 -559038737 IL_0006: stloc.0 // var ret1 = i + 1; IL_0007: ldloc.0 IL_0008: ldc.i4.1 IL_0009: add // var arg1; // i = arg1 = ret1; IL_000a: dup IL_000b: stloc.0 // var ret2 = i; IL_000c: ldloc.0 // var ret2 = i + 1; IL_000d: dup IL_000e: ldc.i4.1 IL_000f: add // i = ret2; IL_0010: stloc.0 // var ret3 = arg1 + arg2; IL_0011: add // j = ret3; IL_0012: stloc.1 IL_0013: ret Or more succinctly: uint i = 0xDEADBEEF; var ret1 = i + 1; var arg1; i = arg1 = ret1; var arg2 = i; var ret2 = i + 1; i = ret2; var ret3 = arg1 + arg2; j = ret3; It's a very literal translation. `ret1` and `ret2` hold the temporary returns of the two calls to `operator ++(uint)` while `arg1` and `arg2` hold the temporary evaluations for the two arguments of `operator +(uint, uint)`. Finally, `ret3` holds the temporary return of `operator +(uint, uint)`. As you can see, the only difference between prefix and postfix `++` is when it assigns the temporary return to the receiver (in this case `arg1` and `arg2`). Even in "Release" mode, the only difference is that the `arg1` temporary is optimized away since we can use `ret1` directly. You can also see another feature of C#: (by specification!) arguments are evaluated left-to-right. So in the statement: var j = ++i + i++; All side-effects of `++i` are guaranteed to be complete before `i++` is evaluated. Fun fact: In C++ there is no guarantee. if you try to do this: int i = 1; int j = ++i + i++; Any modern, standards-compliant compiler *should* emit a warning like this one from `clang`: warning: multiple unsequenced modifications to 'i' [-Wunsequenced] The answer you get back will still *typically* be the left-to-right evaluation you'd expect, but don't count on it. You're at the mercy of the compiler deciding to do whatever they think is logical in the face of undefined behavior. Moreover, there are serious limits to how deeply the compiler can detect this kind of issue. Suppose instead that you have: int j = Foo(x) + Bar(y) It may well be that `Foo(x)` and `Bar(y)` are entangled by their side-effects (ex. by both modifying some kind of shared/global state (blech!), in which case the compiler cannot save you from yourself. All of which highlights why mutability and side-effects are maybe not all they're cracked up to be ;)
Or FileHelpers (our preferred tool for exports, more powerful than CsvHelper). Although I found CsvHelper to be easier to deal with when I was only looking for a single field in a CSV file.
Those public methods would be removed, right? Split the dependencies for testability, then façade if needed.
This is mostly for convenience, just so it's harder to accidentally call server\-only code which could break stuff, such as by throwing an exception and then stopping execution of the rest of the code inside event hooks (e.g. entity initialization). Regarding the netcode, I made a special type for networked variables, which are automatically synced on a client / server tick when modified. While the server handles most of the important game logic, the client still uses the synced data for rendering / informational purposes (e.g. displaying the amount of liquid inside a container). While you could easily modify the clientside code, it wouldn't be much of a use, since you'd be only changing the data locally \- the server would just reject the received synced data, as the variable is still set as server\-only (or the client doesn't have the authority over the entity explicitly set on the server).
&gt; is about to get new features faster than .NET Framework. Source?
The links aren't random. There were carefully selected as they all support my point. 
It's not meant to be used as a security measure at all \- it's just an utility to avoid making mistakes when calling server\-only or client\-only code.
https://github.com/dotnet/standard/issues/682
There already is a non\-networked type of an entity for local purposes only. The analyzer rule is mostly to be used to quickly spot client\-only code that may cause problems when executed on server (and vice versa), such as when creating textures during runtime on a command line\-only server.
Thanks for pointing me to a new library for csv (\+\+) files. I will have a look and see what I think. [https://www.filehelpers.net/](https://www.filehelpers.net/)
Thanks! I'll try this out.
It might. Sometimes, I just need to hear something a slightly different way (or for the tenth) time, and suddenly it's clear. I also have a separate post that covers MVVM here: https://scottlilly.com/c-design-patterns-mvvm-model-view-viewmodel/
When you’re explaining something to a beginner, I think it’s fair to say core is a trimmed down version of .net framework, that runs on windows and Linux, especially since that was Microsoft’s stated goal for .net core.
If you're asking, "Is there any way to prevent this?", I believe the compiler will give you a warning or error that the child class needs a "new". Personally, I try not to use "new" in child classes to override functions in the base class. If you're asking, "What can I do when I want to do this?", that would depend on what B() does and if/how the other child classes need to do B(). If all the child classes need to do B(), with the exact same logic, I'd move B() into the base class. If they all need to implement B(), but do their own logic, you can use composition instead of inheritance and store the appropriate command object (from the Command design pattern) in each child class. If only some of the child classes need to do B(), and you want the other classes that use the children class to know if the child object can do B(), you might create an ICanDoB interface and have the appropriate child classes implement it. I guess the real (non-)answer is to that would be to familiarize yourself with these different techniques, so you can make the choice that best fits your application.
Well trimmed down has a negative sound to it, but its actually the way to go for new web apps.
To add to that, inheritance can be thought of as a special case of composition where each subclass contains an instance of its base class. You see shades of this in the way a subclass constructor must first call the base class constructor first.
&gt; Split the dependencies for testability That doesn't necessarily make it more testable. In fact, it can make it harder to test because you've increased the surface area and the number of cross-class interactions. Beyond that is the matter of virtual and abstract functions. 
Nope, however for me, honestly, I haven't found it super useful. I already know what I want when I type something in, so it being at the top doesn't really help because I'm already typing past it, and it's INCREDIBLY annoying in the watch window. If you do string.IsNullOrEmpty in the watch window, the star gets posted in the stupid window as well as a character, which obviously isn't valid. It just tries to post the whole string from the intellisense box apparently.
Trimmed down meaning they cut out all of the legacy forms crap that isn’t used in MVC apps.
Just to add/clarify something here regarding .Net Core and .Net Framework: .Net Core is the newer, leaner, cross-platform framework, which is being developed aggressively and is intended to have a greater future scope/focus, where as .Net Framework is the "classic" framework which is more mature and, as a result, more feature-rich, and Windows-centric. Both implement .Net Standard, which specifices the basics that all variations of .Net must implement. As we all know, Microsoft love confusing naming/versioning (XBox-&gt; XBox 360 -&gt; XBox One... Windows Vista -&gt; 7 -&gt; 8 -&gt; 8.1 -&gt; 10 etc) unfortunately, so it's always worth clarifying/double-checking exactly what people are referring to.
I asked the question a bit in haste and appreciate your answer. I suppose at the core of my question is this: when do you consider a class to be "done" in the sense that it could be safely inherited from without danger of modifications to base class breaking your code To frame my question differently, do you consider it safe to extend a class that you don't have direct control over? Would you consider it safe to inherit from SqlConnection with the potential to have problems in the future should modifications be made that collide with your new class?
Also, what is your policy on calling "base" on virtual methods that you want/need to override?
For the bonus problem: What's wrong with `Either&lt;int, int&gt;`? You are still encoding extra information (namely 1 extra bit of information). It can also come up from a mapping/bind with the `x → Either&lt;A,x&gt;` monad (basically, `Either` with the one of the type arguments fixed is a monad).
Array elements are always initialized to the default value for the type. For a struct, the default value is *never* null. When I was tinkering with my own option type, I implemented it as a struct with a boolean, IsSome. The default constructor defaults IsSome to false, which pretty much works. F#'s Option&lt;T&gt; has some trickiness going on that lets it treat null as though it were a valid instance for certain operations--the decompiled code does some checking of `this == null`, etc. I think you're stuck with this approach unless you're willing to wait for non-nullable references in (hopefully) C# 8 or wait for them to take another run at allowing developers to override default struct constructors. I don't believe there is any way to constrain a generic parameter to *not* be a particular type, no.
You really shouldn’t. 
There simply isn't any good solution in C#. Reference types can be null, value types have default constructors. The main options I see are - add an initialized flag in the struct like you suggested - make `Some&lt;T&gt;` a reference type and only use extension methods with built-in null checks on it instead of instance methods (but that means having no properties) - use static analysis to detect `Some&lt;T&gt;` arrays, fields, default values, etc. - wait for (non-)nullable reference types, whenever they come out (but even those have caveats) - expect that users of your library don't deliberately shoot themselves in the foot &gt;For whatever reason, C#'s type system does not consider newly created array elements to be uninitialized variables (does anyone know why?). Well, mainly simply because the spec says so. The assignment requirement for local variables is the odd one out, rather than the standard. This is also allowed, mind you: class Foo { Some&lt;string&gt; field; public Some&lt;string&gt; GetSome1() =&gt; field; public Some&lt;string&gt; GetSome2() =&gt; default; } I don't think it would even be possible to make it any other way, since arrays are reference types. Local analysis in `Bar()` couldn't catch something like void Foo() =&gt; Bar(new int[10]); void Bar(int[] a) =&gt; Console.WriteLine(a[0]); The only option would be to completely forbid passing a not fully assigned array out of a method, assigning it to any field, calling any method on it, etc. And there's the question of how you even could statically determine full assignment of an array. Collection initializers are easy, a very simple `for (int i ...)` *might* be able to be analyzed, but in anything with a moderately more complicated control flow (including exceptions) it wouldn't be possible for the compiler to guarantee full assignment, which combined with the previous point would make arrays extremely hard to use.
I try to avoid that. I've worked on one or two projects where that was in the existing code (I mostly do corporate contract programming). In those cases, I follow their standards and practices. But, my mind sees the function in the base class and assumes that is what happens in all child classes. It tends to forget there may be some additional handling in some of the child classes. IMO, this technique breaks the principle of "do the least surprising thing". In this case, I'd probably go with composition and a command design pattern object that I set in the child class and have the function execute that command object. Then, I can easily see in the object's constructor that I'm setting the action to a NormalLogic object in some child classes, and a SpecialLogic object in others. I've also been looking more into Aspect-Oriented Programming lately - Fody.NET, in particular. In some situations, you might be able to put the base class' standard logic into an aspect and set an attribute on the appropriate child classes' functions.
Should I also have a gender enum? At the moment my values are “M” and “F”.
For the first part, I'm probably not the best person to ask. I rarely work on anything that has a public API or gets released as a stand-alone library where I need to worry about making breaking changes. If/when I change a base class, we're probably making other changes that will cause us to need to do a complete rebuild, complete test, and deploy a full new version of the app. Looking at it the way you framed it in the second paragraph, I wouldn't create a class that inherits from SqlConnection (for example). I'd create a class that uses the Builder design pattern (or maybe the Wrapper or Facade) pattern. The rest of my app would call the Builder class, which would create the correct SqlConnection object. Then, if SqlConnection ever changed, I'd only need to modify the Builder class - hopefully. I had this experience with a program when Microsoft changed their Email classes (I think that was back in .NET 1.1). We didn't originally have a Builder class. So, when we upgraded the Framework version for the solution, it broke our program in several places. If we had an EmailBuilder class, we only would have needed to change how that one class constructed the Email object, instead of fixing it in a dozen places.
Thanks for giving references links. This will help me a lot. 
Your formatting isn't working so the code is hard to read. You are setting an int `Flag` to a hard-coded value (1) and then switching against that int, so it will always execute `case 1` and nothing else. I don't understand the intent of the code, but perhaps you wanted to send which case to run as a parameter into the function instead, or something like that?
&gt;Hi. Just curious how did you find those Mosh's courses ? Are they any good ? 
So there's two answers to that, one is very type-theoretical and I'm not very well qualified to answer it (I know just enough type theory to be dangerous, and even less category theory...). The other is somewhat theoretical, but more practical. ## Theory Issue On the type theory side of things, what `Either` represents is alternately referred to as a "sum type", "discriminated union" or a "disjoint union". It represents a value that comes from one of several sets, *and encodes which set it came from*. If any of the sets are identical, we can no longer say *which* source set the value came from, and the type falls apart (it is no longer discriminated). for instance, in ML-based languages like OCaml and F#, it is not legal to do this: type foo = Bar of int | Bar of int;; In the case of OCaml, this fails with: Error: Two constructors are named Bar ## Practical Issue From a practical point of view, you *can* work around the theoretical objection in some languages. In a language like C# that allows for method overloading, you would need to make sure that your left and right injection methods have distinct signatures. However, this is just encouraging people to do things that simply aren't good practice. For instance, you might imagine a function that returns an `int` value when successful, and returns an `int` error code on failure. Therefore, they'd like to return an `Either&lt;int, int&gt;`. At face value, that isn't entirely unreasonable. But the fact that we can't do it with a "pure" disjoint union gives us a hint that there's a problem with our thinking: The concept of an error status code is something more specific than the concept of an `int`. So why are we representing both with the same type? We really shouldn't be. Much of the madness that was [Hungarian notation](https://en.wikipedia.org/wiki/Hungarian_notation) was driven by the fact that many values -- let's say width and height -- have the same unit/type, but represent semantically different things. The idea of Hungarian notion wasn't bad, just the implementation. Variable name prefixes are cumbersome and subject to human error. This is problem that *ought* to be solved by the type system and enforced by the compiler. We can do this simply by composition. In my hypothetical error code example, don't return an integer error code. Instead, return an error type that contains an integer. In the process, the `Either` conundrum evaporates: `Either&lt;ErrorType, int&gt;` is perfectly legal. In languages with much stronger type systems (ex. OCaml, F#), it's kind of suspect to be throwing around primitive types at all unless you really are computing on context-less numbers. And really, much of the impetus behind monads is augmenting types with some context. Even then, the type system can still fail you. I can't seem to find it right now, but I once watched a really interesting lecture/video about creating software that would prevent something like the [Mars Climate Orbiter](https://en.wikipedia.org/wiki/Mars_Climate_Orbiter) debacle from ever happening again. The particular issue of confusing a metric value for imperial value is easily solvable through composition. A `Meter&lt;float&gt;` is statically different from a `Foot&lt;float&gt;`, and wrapping them in a discriminated union forces you to deal with either eventuality. But there's an even stickier widget: energy and torque have the same units. And isomorphically, any type that you create to house these values can be instantiated with values that were intended for the other. I want to say that the conclusion that such is currently impossible to catch even in strong, statically typed languages like F# and OCaml, but don't quote me on that.
Another reason it's fragile is that something like `if(Net.IsServer &amp;&amp; IsSomethingElse)` wouldn't be recognized.
&gt; (both of these are effectively just renamed null reference exceptions, though) Yeah, that thought has crossed my mind several times. Any way you slice it, you can't statically detect passing `null` into something that doesn't allow `null` because the language simply doesn't have that feature. Even so, I feel like *anything* is better and more specific than a `NullReferenceException`, even if it's just `ArgumentNullException`. Your points about arrays make sense, though. I guess the real question is why arrays don't exactly follow RAII principles. This seems like a very solvable problem: don't allow the declaration of uninitialized arrays. Either the declaration must include an array initializer, or the underlying type must have a default constructor that will be called, or you must provide a delegate to be applied to each element. I suppose that's not done for efficiency reasons (nothing is faster than good ol' `memset`...) One question, though. What did you mean by this: &gt; only use extension methods with built-in null checks on it instead of instance methods (but that means having no properties) My two-argument `SelectMany()` method checks for a `null` value in the `this Some&lt;T&gt; source` argument and then returns `source.Bind(resultSelector)`. This might return `null`, but I wouldn't really consider that my problem to solve. It's just a problem that I have to deal with in the three-argument version. That was the easy-to-miss `null` check that I alluded to. Even after checking that non of its arguments are `null`, you still have to check that the inner selector delegate does kick back a `null` before you try to pass its internal value to the result selector delegate.
&gt; Array elements are always initialized to the default value for the type. For a struct, the default value is never null. The struct is never `null`, but it's fields absolutely can be, which is basically the issue. If `T` is a reference type, the `Value` property's automatic field gets initialized to `null`, which is exactly what I don't want. Structs are expressly forbidden from having a default constructor, and even if they did, I'm not sure it would matter for array initialization: arrays of reference types don't have the default constructor called for each element. &gt; When I was tinkering with my own option type, I implemented it as a struct with a boolean, IsSome. The default constructor defaults IsSome to false, which pretty much works. My `Option&lt;T&gt;` type is just a thin wrapper around an internal `Either&lt;Nothing, T&gt;` instance, where `Nothing` is just a singleton type that represent, well...nothing. That's slightly different from your implementation, but the result is the same. The `Either&lt;L, R&gt;` type's internal field is `IsRight`, which defaults to `false`, so by extension, `Option&lt;T&gt;` defaults to `IsNone == true`. &gt; I think you're stuck with this approach unless you're willing to wait for non-nullable references in (hopefully) C# 8 or wait for them to take another run at allowing developers to override default struct constructors. This is going to sound weird, but this is mostly just for "fun" and my own internal uses, so I'm fine with just plowing ahead with it. I take it that non-nullable references are on the table for C# 8, then? That's good to hear.
Yes, don't hardcode "magic values". This is exactly the type of thing a Enum is for :)
## ML Like languages Well, if we look at languages like F# and OCaml(I don't know much OCaml or F#, but I know enough F# to go by), we can also look at Haskell. In Haskell, the following is defined in the standard library: data Either a b = Left a | Right b And it's perfectly valid to have a value of type `Either Int Int`, or `Either String String`. You can use the `Left` constructor to signify a *failed* computation, with some extra information (for example, `Either String a` could represent a computation that may fail with some error string, and it's perfectly valid for such a computation to return a `String`). Notice how there are two value constructors for `Either a b`: there's `Left :: a -&gt; Either a b`, and there's `Right :: b -&gt; Either a b`. We can define the `Monad` instance as such instance Monad (Either a) where return b = Right b e &gt;&gt;= f = case e of Left a -&gt; Left a Right b -&gt; f b ## Some Theory The `Either` type is indeed considered a sum type, that is, it's a coproduct in the category of types with functions as morphisms. (If we look at types as sets, the category **Set**, so I'll use that category below). The coproduct in **Set** is defined for any pair of sets A and B, and results in their disjoint union. What disjoint union here means, is that we *remember* which set each element came from, basically we can see it as `{ (x, 0) | x ∈ A } U { (y, 1) | x ∈ B }`. This is well defined even for the case where A = B. ## Some motivating examples, using Haskell and C# Let's look against at `Either String String`, or in C# `Either&lt;string, string&gt;`. What can we do with it? What is it good for? We can use that type as a return type of a function to signify to the caller "This function can fail, and it will give you a message string in that case". So basically an amped up Option type, since we have some information as to why the computation failed. An example is for instance is an operation that takes a number and returns a list composed of that number, that number of times, we can have that return either the the list, or return an error state with a message (similar to throwing an exception with a message, except we can compose such computation easily with Bind/SelectMany/(&gt;&gt;=) ) After that operation we want that list in string form(say, convert it to JSON to send over the network). Haskell: replicateEither :: Int -&gt; IO (Either String [Int]) replicateEither x | x &lt; 0 = Left "Can't create a list with negative number of elements" | otherwise = Right (replicate x x) C#: static Either&lt;string,List&lt;int&gt;&gt; ReplicateEither(int x) { if (x &lt; 0) return Left&lt;string, List&lt;int&gt;&gt;("Can't create a list with negative number of elements"); else return Right&lt;string, List&lt;int&gt;&gt;(Enumerable.Repeat(x, x).ToList()); } Now we want to convert - say a list of 4 4's - into JSON, since Either&lt;A,B&gt; is a Monad, it's also a Functor, so we can map over it with Select/fmap, so to convert to JSON (assuming a function `toJSON :: [Int] -&gt; String`, or in C# `string ToJSON(List&lt;int&gt;)`). In Haskell we will write `fmap toJSON (replicateEither 4)`, and this will have the type `Either String String`, with the `Left` and `Right` constructors clearly indicating completely different results. In C# we will write `ReplicateEither(4).Select(ToJSON)`, and this will have the type `Either&lt;string, string&gt;`, again with the `Left` and `Right` variants clearly indicating completely different results. (and we can even pattern match in switch statements on them in some implementations of `Either` in C#!) ## Summary If we look at use-cases, there are use-cases(like having a simple error message as a possible result, or maybe an error code). If we look at the theory, it allows for a disjoint union of a set with itself. (Yes, I am aware that it's usually more useful to use a better data structure than a string to tell users of our code what went wrong, but what if the computation we are doing is itself a computation *of that exception type*, and an exception may occur during that computation?)
No, my implementation is strictly local. I'm too lazy to bother with github, and it's mainly for tinkering.
Isn't the Maybe or Option type a two values type? Some&lt;T&gt;/Just&lt;T&gt; or None/Empty. What you are doing is not a Maybe type, you are implementing a Nullable type. An Option/Maybe type is like a sum type in F# type Option = | Some of 'T | None You can implement an Option type as a class (using the visitor pattern) or like a struct (with a "IsSome" bool).
Reworking it right now, of course I'm not going to use it straight away. However, it's really helpful as an example.
You're right, I should clarify that you are forbidden from have an *explicit* default constructor. I've never looked at the msil for the implicit default constructor, but I wouldn't be surprised if it's just a no-op.
I think wires might have gotten crossed somewhere. My OP was about a `Some&lt;T&gt;`/`Just&lt;T&gt;` type, not an `Option&lt;T&gt;/Maybe&lt;T&gt;` type. But I do also have an `Option&lt;T&gt;` (alluded to in [one of my replies](https://www.reddit.com/r/csharp/comments/8px0al/how_would_you_solve_this_design_issue_for_a_somet/e0evd1t/)). As you say, it's a two-value type. Specifically, it's a wrapper around an `Either&lt;Nothing, T&gt;` instance of my `Either&lt;L, R&gt;` monad.
Windows PowerShell 2, 3, 4, 5.1 PowerShell Core 6, 6.0.2
FWIW, mine winds up looking something like this: public struct Option&lt;T&gt; { public static readonly Option&lt;T&gt; None = default(Option&lt;T&gt;); internal T InternalValue { get; } public bool HasValue { get; } public T Value =&gt; HasValue ? InternalValue : throw new InvalidOperationException(); public Option(T value) =&gt; (HasValue, InternalValue) = (ReferenceEquals(null, value), value); public static implicit operator Option&lt;T&gt;(T x) =&gt; new Option&lt;T&gt;(x); public static explicit operator T(Option&lt;T&gt; x) =&gt; x.Value; } public static class Option { public static Option&lt;T&gt; Some&lt;T&gt;(T x) =&gt; x; public static Option&lt;T&gt; None&lt;T&gt;() =&gt; Option&lt;T&gt;.None; public static Option&lt;U&gt; Select&lt;T, U&gt;(this Option&lt;T&gt; x, Func&lt;T, U&gt; f) =&gt; x.HasValue ? f(x.InternalValue) : None&lt;U&gt;(); public static Option&lt;U&gt; SelectMany&lt;T, U&gt;(this Option&lt;T&gt; x, Func&lt;T, Option&lt;U&gt;&gt; f) =&gt; x.HasValue ? f(x.InternalValue) : None&lt;U&gt;(); public static Option&lt;V&gt; SelectMany&lt;T, U, V&gt;(this Option&lt;T&gt; x, Func&lt;T, Option&lt;U&gt;&gt; f, Func&lt;T, U, V&gt; g) =&gt; x.HasValue &amp;&amp; f(x.InternalValue) is var y &amp;&amp; y.HasValue ? g(x.InternalValue, y.InternalValue) : None&lt;V&gt;(); } with most of the boilerplate (various comparison interface, ToString(), etc) and decency in style left out for brevity. And assuming I didn't botch something reimplementing from fuzzily remembered principles. I doubt there's anything especially magical here, though.
&gt; is a lot slimmer, as you are expected to ship the libraries you need as part of your app The [runtime store](https://docs.microsoft.com/en-us/dotnet/core/deploying/runtime-store)(doc is outdated for 2.1) can take care of most of the core dependencies for you by preinstalling them on the target machine so they can be reused.
They are a good starting point but they are far from perfect and they don't cover everything (as you can see above). I would recommend the 3 courses on pluralsight over "The Complete ASP.NET MVC 5 Course" on Udemy. The Udemy one is severely incomplete as Mosh constantly refers to things he's going to cover later in the course that he never gets around to covering. Thankfully he covers that stuff in the Pluralsight course. I cannot speak to his .NET Core courses.
I was thinking in terms of deleting the relationship but I agree that they should be called remove in this context. I am refactoring that completely.
await Task.WhenAll(tasks...) 
I attempted to use Relationships instead of having the mother and father on Cow. I ended up smashing my head on my keyboard for 3 hours trying to update the database. When I add a Relationships to Cow, I get the error "The relationship 'CattleCompanion.Persistence.Relationship_Cow1' was not loaded because the type 'CattleCompanion.Persistence.Cow' is not available." After doing some searching I *think* this is because I cannot have a collection that uses to self referencing FKs according to this SO [question](https://stackoverflow.com/questions/5559043/entity-framework-code-first-two-foreign-keys-from-same-table). After some contemplation I decided that I really wouldn't have any other relationships than Parent-Child so having a Parents collection and a Children collection on Cow would be a good solution. Unfortunately that gave me a new error concerning multiple cascade paths. Despite explicitly setting WillCascadeOnDelete to false in my configurations, I was not able to get rid of this error. I tried every possible combination I could find online and the migration sets it to true every time.
doesn't c# compile to an executable that needs a runtime (CLR) to execute? in this case, isn't the CLR a virtual machine?
Every time you call `Avançar` you reset `Flag` to 1. Move the declaration of `Flag` outside of the method and into the class body.
'var' is strictly syntactical sugar. The code you provided will compile down to the same IL as if you had specified 'int i = 0' instead.
It is all a matter of opinion. Within a for loop it is much more obvious to someone else reading your code, when it comes to the type that you assign as the iterator. In foreach loops it is sometimes nice to place ‘var’ as the keyword if you don’t know the type, and then let visual studio recommend the type for you as the iterator and then replace it so that it is clearer to anyone reading your code.
So terminology is pretty important here. A field refers to a member variable in a class, where a local refers to a variable that is (aptly) local to a method. Even if other documentation refers to these notions differently, this is how Visual Studio will refer to them in intellisense. Now, if you're truly using a field, don't. It's best to keep variables that are local to a single method local to that method: don't promote variables beyond that for no reason. Based on your sample, this advice doesn't apply to your question, because you're using a local, but it's useful nonetheless. Second, it literally doesn't matter how many locals you create of a particular type. The C# compiler will - in release builds - optimize down to the number required to perform the method computation. The runtime (it doesn't really matter which one) will make further optimizations. You're going to need that induction variable in any iteration problem. If you later use a second for loop, even if the variable has a different name (mostly in release builds), the actual stack reference will very often be the same (i.e., if you iterate on i, and then later on j, you'll end up with one variable for both, because they're scoped separately). In general, don't try to optimize your use of variables; that's what the compiler does. Instead, make sure the logic makes sense, and you're using the correct algorithm or data structure for the problem (i.e., don't use a list when a dictionary is the obviously correct choice). Your optimizations are things the compiler is probably already doing for you, is doing better than you most of the time, and are probably making your code harder to read (reusing the same variable six times in different contexts requires readers to keep each context in their immediate memory, which is strenuous). Never underestimate the cost of cognitive load on the reader.
Just a note here: putting classes into structs may result in some severe memory problems: [https://docs.microsoft.com/en\-us/dotnet/standard/design\-guidelines/choosing\-between\-class\-and\-struct](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/choosing-between-class-and-struct)
I'll second the idea in your edit. You're not *required* to define i within the loop structure, but it is the preferred way to do it in virtually every language. 
Unfortunately I haven't touched EF in years so I'm not going to be a whole lot of help there :(
It's the same as \`Python 2.7\`. Or \`Python 3\` (depending on how you feel about them). When someone asks you what is \`Python 2.7\`, you will explain that it is a specific version of the interpretor for the python language, i imagine. Kind of the same applies to .net core.
What specifically are you referring to?
Instance of a struct being over 16 bytes.
That’s alright; thank you for all of your help so far. May I ask why you haven’t used EF?
Current job we integrate with a lot of legacy system and databases that don't play or perform well with EF - so we use Dapper. I've gotten to the point where I prefer it.
You have Web API and MVC. These both run on .NET Framework and .NET Core. On .NET Core, you would call them ASP.NET Core MVC or ASP.NET Core Web API. You use MVC for creating a website and Web API for creating.. a web API, or web service. JavaScript is a part of the View in M**V**C. The View contains HTML, CSS and JavaScript. It's the client-side stuff. MVC 5 was the last version of MVC for the .NET Framework. MVC beyond that uses .NET Core. There are differences between these. .NET Framework runs on Windows, .NET Core runs on Windows, and some macOS and Linux versions/distros. There's also Mono, which is Xamarin's version of .NET Framework for various platforms.
Putting a "class into a struct" is just a reference, though. The 16 bytes also aren't a dogmatic law, just a guideline. And it's not a memory problem, just slightly more time spent on copying variables/parameters.
The command line build, test, and deploy to AWS is pretty sweet, and totally awesome from a CI perspective. 
Thanks for the detailed response. It's been a while since I messed with OCaml so it didn't quite dawn on me what the nature of failure really was. And as an aside, F# is *essentially* OCaml#, or so I've been told. Now I'm left wondering whether the memory layout of instance of a type like: `type Whatever = Foo int | Bar int` actually has distinct `int` fields, or if it's internally more like a C union. Anyway, color me convinced. Your explanation of a disjoint set "clicked", and I can see some meaningful use cases, now. I think I'll refactor by subclassing `Either&lt;L, R&gt;` into `Left&lt;L, R&gt;` and `Right&lt;L, R&gt;`, which in any case makes for a smaller struct/class and more palatable syntax sugar. With left and right being distinct types, you should be able to do something like: "hello".ToLeft&lt;int&gt;() And the compiler will be able to automatically infer `ToLeft&lt;string, int&gt;(...)`. With respect to the "aside theory", I feel like this makes Curry–Howard isomorphism easier to accept, but at the same time it's all the more spooky for that. Also, since a static type is uninhabitable, I wonder if I could get any useful mileage out of having a static `Void` type in C#. Hmm... 
We still use subversion, what we do in our company is every chage/feature we create new branch and then when it's ready senior programmer (me) will go through all changes (code review) before it's merged to main branch. Currently I'm the only senior programmer but if we had more then all of them should do a code review before branch is merged. 
Find the process and kill it? 
Whether the fields are separate or not is implementation detail which you usually don't get into when writing high-level functional languages like Haskell/OCaml/F#. There's a problem in C#, there's no uninhabitable type. `struct`s can't be static, and `static class`es can be `null`, thus every type in C# has at least 1 inhabitant.(at least until we get the nullable reference type that's supposed to come with C#8, in which case you can have types that are inhabitable, at least within the realm of C# compilation, since they aren't going to change .NET to make reference types non-nullable unless stated otherwise... this ended up being long parentheses)
You need to implement keyhooks, in that case. They listen globally for key strokes and you can map your app to exit when such an event is triggered. 
We really need a pinned thread for this /u/FizixMan it seems to get asked every week.
&gt; Im not a fan so far of the Microsoft provided docs, they are to idk Microsofty for my taste. What does this even mean? Have you actually seen how annoying the MSDN docs are compared to the new really good doc site?
As an (ex) Haskell programmer, this is one of the first things I looked for in C# - but thinking in this way isn't quite right for an imperative language like C# even if it does have very nice Haskell-inspired features in the form of Linq &amp; lazy iterators. The thing that you are looking for is called **existence based processing**, which is the imperative-programming equivalent of Some&lt;T&gt; or Either&lt;L, R&gt;. Consider this: How often do you deal with a *single* Some&lt;T&gt; or a *single* Either&lt;L, R&gt; in your program on its own? Is it not the case that you are usually processing many of them at the same time? (If it really *is* the case that you are dealing with occasional individual values, then yes, unfortunately, `null` is the correct way of signalling an absence of value). A better way (which also ends up with code that does less branching and so is faster) is to write your code in a way such that, when it comes to processing T, L, and R types, you have collections of them that you *already know* will be valid objects, even if this involves restructuring your data, or an extra processing step: http://www.dataorienteddesign.com/dodmain/node4.html (btw, I'm not saying you should go full-on data oriented, that link is mostly for low-level game programmers, but the approaches can be watered down slightly and combined with good object-oriented design for nice data organisation) Either that, or use F#.
&gt; is a lot slimmer, as you are expected to ship the libraries you need as part of your app This I wasn't aware of. So a .NET Core application won't require the target computer to have a .NET Core runtime installed?
Imho async/await as a concept is glorious. But the loss in performance is actually not all that "slight" as people would have you believe. The danger lies in the naive approach to measuring performance, simply timing how long it takes ignores most of the problem. If you measure like that then sure, you only pay a relatively small price (but even that is often too much in really performance sensitive code). Every async method is essentially the allocation of a statemachine. And once the call is done, the statemachine is thrown away of course. This leads to some pretty intense pressure on the garbage collector, which will eventually come to collect all those `Enumerator`s, `Task`, and depending on how you code, also a ton of delegates/Actions/Funcs, each with their own captured variables... Now, obviously async-await tends to "grow" through the call stack, so you actually have tons of nested Tasks (and Enumerators behind the scenes) as well... So, the GC comes and cleans up the mess created by all those allocations, and when that happens you pay the **real** price for the nice async-await constructions. Now obviously you won't care in a "normal" desktop application. But if you're using Unity (for games) or if you're working with some code that needs to maintain high throughput (some server application) then all those slightly suboptimal patterns can become "death by a thousand cuts". 
Absolutely agree, definitely a big asterisk next to my comments on performance impact being slight. In a typical web application or desktop application (or anything other than a game or a high performance application) it can generally be ignored since the costs relative to the duration the async calls being made are often insignificant, and there exist benefits for things like typical web apps by returning the thread to the thread pool to process another request.
AngularJS is legacy, are you sure you don't want to learn the new one?
How well does it work?
Whats the new really good docs site? IMHO microsoft provided docs have gone south since .net first came on the scene. 
If you said that at the start it would have saved at least some objection.
Yes, but, you can compile code on an AMD machine in something like C or C++ and it will run on intel just fine as well, and vice versa. 
Enabling a TextBox may affect focus. You should try to always use Focus() last.
Have you actually used it?
No which is why im asking. Microsoft documents used to be amazing 15 odd years ago. Between then and now i stopped installing the msdn and kind of gave up.
Give them a try. https://docs.microsoft.com/en-gb/ https://docs.microsoft.com/en-us/dotnet/api/?view=netcore-2.1 
I am always willing to take new knowledge, as technology progress so fast. 
Probably best. AngularJS isn't used for greenfield development so any job you get with it will be just legacy and maintenance.
It's just not the C# way. I get what you're trying to do, but you have to accept that C# does things in a certain way. Good ways in my opinion, but I also get why they're frustrating at times for people coming from a different ecosystem. This is a bit different though, you're trying to enforce API documentation through language features. Assuming this code will be consumed by others, i.e. it's an api for "people", then you're going to struggle to convey your intent. Generic constraints have value but I always push back towards keeping it simple and within the bounds of the implementing language's design goals. Build useful examples of how your API/Framework/convention will work in some integration tests and provide concise documentation about why you're trying to achieve what you're trying to achieve. Finally, let people abuse your code. It makes it flexible and informs your design choices for the next version. You absolutely can't control developers. We're all separatists while operating under some sort of unionist flag. 
You may like [Microsoft Virtual Academy](https://mva.microsoft.com/product-training/visual-studio-courses#!jobf=Developer&amp;lang=1033).
AngelSix has a "WPF UI Programming" video series. I watched the first few, and they were well done. https://www.youtube.com/channel/UCJ3AxeCHGPZkMi3kRfCuiHw
sort of, right? I mean that depends on how you compile it and stuff. if you're using some compiler that is AMD specific and takes advantage of AMD instructions that are not in the x86/x64 instruction set, or even if some compiler exists that claims to be compatible but uses extension instructions on an intel cpu that are only available to that generation of CPU, you won't get a functioning executable in other places. i mean my main point is, when you're writing C# you're generally writing for the VM it executes on, the CLR. you don't need to care if you're intel or AMD. you generally do in a language that compiles to bare machine code that is written in C/C++ and you are writing non-trivial code that needs to be aware of the different arch types (since you don't know what code the compiler is going to compile down into on the machine instruction level).
It makes the code easier to read knowing that 'i' can only be used inside that particular loop and nowhere else. It's handy if you have more than one loop in a function, because you can use 'i' again later in another loop, not having to worry about its past or future.
There are already some very good answers here, but I thought I'd add a few thoughts of my own anyway. Regarding `Some&lt;T&gt;`, C# unfortunately limits how useful this can be in practice: if `Some&lt;T&gt;` is a class, it can be null itself and you don't win anything in terms of null safety, but if it is a struct, it will always have a default constructor, making it impossible to ensure that the inner value isn't null. As such, from a practical perspective, `Some&lt;T&gt;` probably doesn't add a lot of value in terms of guarantees. Now, if practical usefulness is less of a concern, and we instead consider the theoretical/learning aspects important, these two edge cases probably do not matter much. Even so, if your implementation of `Some&lt;T&gt;` is to be an actual monad (basically the Identity monad), you cannot (in theory at least) disallow null, as this breaks the monad laws. Let us take the left identity law as an example, which states that: `Some(x).Bind(F)` should be equivalent to `F(x)` However, if we throw an ArgumentNullException when constructing `Some(null)`, we can see that if: `x = null` &amp;&amp; `F(x) =&gt; Some(x ?? "123")`. we get: `Some(null).Bind(x =&gt; x ?? "123")` on one side, which throws an ArgumentNullException, and `Some (null ?? "123")` on the other side, which returns `Some("123")`. As such, the law isn't really satisfied unless we allow null values inside our `Some&lt;T&gt;` implementation, which may or may not matter, depending on your learning goals etc. From a practical point of view, this tends not to matter in most cases, but every once in a while you might write some general purpose transformations which expect the laws to be satisfied, only to see these explode when used, due to an interim null value somewhere in the chain. I maintain a C# Option type implementation ([Optional](https://github.com/nlkl/Optional)), and had to make a similar decision (as the same laws break, if we don't allow the Some case in an `Option&lt;T&gt;` to contain a null value). In the end, I decided the satisfy the laws, and therefore allow null values (e.g. Some(null)), but even so this is definitely the most controversial aspect of the implementation, and the one that I receive the most questions about. In practice, however, this turns out to be much less of a problem than one might be tempted to think. The additional modelling power that an explicit `Option&lt;T&gt;` provides, means that nulls are used much less frequently than would otherwise be the case, as there are no longer any legitimate reason to do so (except for interop with other libraries). With a bit of diligence (compared to having it 100% compiler enforced), it is certainly possible to avoid the vast majority of null reference exceptions in my experience. I have a lot more to say about this, but will spare you for now.
I am speaking under correction, but I believe this can be achieved using the pro version. The paid for versions support nuget packages.
Break the problem down in smaller parts. Solve one small part at a time, and then put it together and you have your solution.
What is her definition of the developer ethics and mindset?
She never told me. She just tell me frankly. It seems it brings my confidence down. 
Find out what it is then post it here.
I have pro and nothing obvious
Use a piece of paper and a pen, and visualize what you have, and how you are gonna transform what you have into what you need. A blackboard is also super nice.
Unless you need the variable to exist outside the scope of the function I would declare it inline only.
This is very interesting, thanks for the writeup &gt; All of which highlights why mutability and side-effects are maybe not all they're cracked up to be ;) I agree and this is why I only use ++ or -- where they are very unambiguous and standard, usually when the result of the expression is not used
I end up with multiple solutions that on their own sound good but when put together break down or are just too complicated.
I imagine you could follow [this sample][] as a template, calling it with the assembly that is currently running. [this sample]: https://github.com/xunit/samples.xunit/blob/master/TestRunner/Program.cs 
There's an example image in the Readme 
Just went through the first video. Very good so far. Looks like a great series. Thanks for the suggestion.
Thanks for the suggestion. Some interesting videos there.
Probably the best way to learn any new language is to write a tiny app that does only does one thing, which is whatever thing you're trying to learn. Why not just try it out and see what happens?
What the hell are you asking? I honestly have no idea, is English your second language? No offense.
&gt; As such, the law isn't really satisfied unless we allow null values inside our Some&lt;T&gt; implementation, which may or may not matter, depending on your learning goals etc. Hmm. I hadn't considered that edge case of left identity. In roaming here and there, I saw other implementations of `Some/Just&lt;T&gt;` that had `IsSome` or `HasValue` properties, and it struck me as odd, given what `Some&lt;T&gt;` is supposed to represent, but perhaps that explains it. So, if someone stuffs a `null` into your `Option&lt;T&gt;`, does it initialize to left-sided, or do you just accept it as being "some null"? Thanks for the food for though. I'm going to be going back to drawing board for a bit to deal with several things brought up here. I might just ditch the `Some&lt;T&gt;` type outright, as it seems there's really no good way to "one-up" the type system in that regard.
I share your parenthetical problem. &gt; Whether the fields are separate or not is implementation detail which you usually don't get into when writing high-level functional languages like Haskell/OCaml/F#. Oh sure, I just have an interest in compiler construction. And I know that `ocamlc` can do some very tight optimizations. I guess I'm just chronically curious. &gt; and `static classes` can be `null` Can they? I just tried it and I get: Cannot declare a variable of static type 'Foo' And likewise: 'Foo': array elements cannot be of static type 'Foo': static types cannot be used as parameters Is there a trick I haven't thought of?
I've just used linqpad and brought in FluentAssertions or Shouldly for doing some quick assertion. Never needed the full ceremony of creating Facts
Can you give some examples? That you're reapplying patterns you've seen elsewhere is good, perhaps those elegant solutions you never think of are just using ideas you haven't seen before? As we grow more experienced our mental toolbox grows, and we gather more patterns that springs to our mind when faced with a new problem. When this happens to you, try thinking about what makes the solution good, and add its methods to your toolbox, notice where you can use it elsewhere.
Yeah I hadn't thought of doing the assertions on their own, thanks.
This is all a huge aside, but: I guess I'm not really from any particular ecosystem. And to the extent that I am, I've done far more imperative programming in C-like languages than anything else. Every language makes tradeoffs, of course. I just like to examine the design decisions of a given language and see how the envelope can be pushed. Because let's be honest: after a few years, every popular language is kludges all the way down. The `System.Collections.Immutable` package is a good example. The C# language designers chose not to implement const correctness. I don't know the exact reasoning for that choice, but I suspect it mostly boils down to C# (as a language) being more directly descended from Java syntax, than C++. But with the resurgence of functional languages and the rise of desktop multi-core processors, there's been a renewed interest in the virtues of immutability. Whatever the reasoning was, that design decision seems a little questionable with our 20/20 hindsight. Immutability is a nice thing to have, but since C# doesn't have const correctness, there's no "glue" between the operational semantics of immutability and the static semantics of the language. But you can make an API like `System.Collections.Immutable`, and *under the assumption that the API does what it claims*, no program that passes static type checking will ever mutate an immutable object. The kludge, of course, is that the compiler cannot guarantee that the API actually delivers on its promise of immutability. But in a limited and kludgey way, you can still eke an additional degree of type safety out of the system without modifying the language. So that's basically where my little monad collection sits. I'm partly motivated by the academic exercise, and partly by the desire to have something in my arsenal to show prospective employers that I can understand and execute some higher-level concepts that are perhaps a little beyond what most not-quite-done-with-grad-school students can do. The fact that I have an immediate use case for it is just the cherry on top. I highly doubt that anyone is going to be using it other than to receive some results from the other components of my library. For instance, if someone asks me to `GetMyCustomObjectTypeById(x)`, and there is no such object in the `MyParentCustomObject` instance, what's the proper response? Return `null`? Blech. Throw an exception? This is a library. I don't know what "the other guy" considers exceptional. Personally, I'm of the mind that errors should be detected as soon as possible. There's a perfectly good `Contains(x)` method, so if *I* were consuming this library, I'd appreciate an immediate exception because something has already gone very wrong with my code if I'm ever asking for something that doesn't exist. I'd rather it blow up immediately than much later, in an non-obvious place where I finally discovered that I have an unexpected `null`. But in the spirit of "you can't control developers", I'm not going to enforce my philosophy on client code. An `Option/Maybe&lt;T&gt;` type is a good meet-in-the-middle compromise. I'm not require to return `null`s, and the client isn't required to treat non-answers as exceptional, they just have to acknowledge the possibility and handle it however they care to.
Sorry if I'm misunderstanding, but are you suggesting that that `for int i` is favoured over `foreach` even if we don't need to use the index? If that's true, that's completely new to me - when I see `for int i` instead of `foreach` I immediately look for where the index is used
No, not at all. OP is counting up to `NumberOfRays`, not `rays.Length` or `rays.Count`, so given what little context we have it wouldn't even be possible to use a foreach loop in this scenario.
Right, yeah, I see what you mean 
If it's just three casings - You can check ascii value of first and second chars if they are in upper range. If first char is lower, ToLower() mapping result. If both are upper, ToUpper() mapping result. If first is upper, second is lower, ToLower() result mapping then replace first char with ToUpper(). If you have to support more than those three states, you would probably need an IsUpper Boolean array that analyizes source and maps to output. 
This sounds good. I'll go with this for now.
Right, forgot you can't even declare variables of that type, but then you can't really use it in the same way you can use `Void` in haskell, since you *can* define the function `absurd :: Void -&gt; a`
Also as soon as I need an 'else if', I start looking into using a function or switch statement. If you are statically mapping inputs to outputs, put them in case insensitive hash or dictionary. 
I don't quite understand the situation. If you're writing code in a project, you should ideally always accompany it with a test project for tests. And if you want to write a test, you're going to want to keep one at some point no? You're going to have to take the hit of creating that test project at some point.
Could use some more description. Interesting though!
Senior programmer here - First off is if I write code that Junior folks don't understand, then they can't fix my bugs or change the design if required. Complex unreadable code is not a sign of expertise. It's a sign of unmaintainable code. So what do I do when I run into it? Same as suggested above. Isolated code you don't understand. Run in a debugger or better yet in unit test. Build unit test if it doesn't exist. Document the code inline as you understand it. This is not only for you, but anyone else (including future you) that needs to maintain it. Finally ask others if you don't understand. Worst question is the one not asked.
Along with the advice listed above you can put your if statement in a switch statement for readability 
you could create a dictionary of the definitions or whatever ``` Dictionary&lt;string, string&gt; replacements = new Dictionary&lt;string, string&gt; { {"one", "first"}, {"two", "second"}, {"three", "third"} }; string output = string.Empty; foreach (var kvp in replacements) { if (kvp.Key.ToLower() == input.ToLower()) { output = kvp.Value; break; } } // do whatever with the output ```
But it's not yet in a project, hence I want to unit test some concepts.... don't see what's so hard about that.
Make a project template? New project is fast. 
Could you change your model to where you only have a single enum of LED Colors, so just Red, Green, Blue, and then where your rows are modeled, you would I’m assuming have collections of rows, each row containing an enum property for red, green, or blue?
Neither, if you'll have more rows you'll have to add more enum types. Better separate it into row and status. public enum LedStatus { Green, Red } struct BoardLed { public int Row { get; set; } public LedStatus Status { get; set; } }
Ah, I missed the part that you're also designing these concepts in LINQPad. I think you're stretching the use of LINQPad here. As long as your have your project under source control, you should have no fear of designing your concepts in some code. You could even create a scratch code project if you'd like. To me, LINQPad is something you want to use for quick snippets of code you want to quickly execute. Writing full pieces of code and then tests in it is a little much, I'd say. But if you really want to do it, don't let me stop you.
You write beautifully btw and I genuinely get what you're attempting to do. I really don't want to sound like "that guy" but we have conventions for these hugely annoying problems. First and foremost is reminding Tony Hoare that he should have made better decisions (jk /bow sir) and more practically treating exceptions as exceptional and writing code that guards against null at the "outer" layer to save anyone caring about them once the parameters get through the door. We do have things like the [NotNull] attribute which helps in that direction. I think we'll see more immutability support coming, there's already stuff in 7.2 around this area, and in version N... we might get non-nullable reference types too :) I've just signed up again to Reddit (thus the V2) so it's nice that you're the first person I've interacted with properly :) 
Your code is a hidden dictionary. Just initialize static one and use it.
This is how you communicate? No wonder you're struggling.
Yeah I think something like that will work. Each row has 2 LED's though, one being red the other green.
Quickest thing I could hack up, but is this what you're looking for? static string SameCaseReplace(string input, string output) { if (input.All(c =&gt; char.IsUpper(c))) return output.ToUpper(); if (input.All(c =&gt; char.IsLower(c))) return output.ToLower(); if (char.IsUpper(input[0]) &amp;&amp; input.Skip(1).All(c =&gt; char.IsLower(c))) { var titledFirstChar = output[0].ToString().ToUpper(); var restLowercase = output.Skip(1).Aggregate("", (s, c) =&gt; s + c); return titledFirstChar + restLowercase; } return output; // Not sure what your failure state should be in case it's some weird case, so... } 
See my other reply.
why are you forcing to have an enum for the row. It's against logic and is impractical. just use int, or uint in your case because there are no negative rows.
Well... there's only one version of this hardware and it has five rows. What's wrong with an enum for this exactly? I don't see at all how it's "against logic"?
Nothing wrong - in this very case. But if you use it, it is very likely you will use it later as it forms a bad habit. It is a waste of code to use an enum where an int would be just as expressive and easy to use.
You could argue that passing an int is not as good because you will need to handle out of range issues if the hardware is not supported. If op does require the scale issue you describe then a different solution of modelling boards would be better, where each board is a specification of how many rows etc 
I see both sides, I'm not sure which option to go with.
Humans don't invent solutions out of thin air. We apply concepts we've seen elsewhere to solve problems. If you don't know the solution to the problem at hand, maybe it's because you haven't seen the solution yet. As you go along, you begin to see everything as the abstract concepts you've accumulated, which can be applied elsewhere as pieces of your programatic machine. When confronted with a problem, you may begin to think of many ways in which you can combine the accumulated abstract concept pieces to build a program or machine to solve the problem at hand. Never expect yourself to create a solution which requires a concept which is not yet in your tool belt.
Go with what ever makes sense to you and is simpler. 
https://www.reddit.com/r/learncsharp/comments/8q1k5f/html_search_bar_access/
Why not a list of enums (red, green) with the index representing the row?
You still need to handle out of range issues with an enum. There’s nothing stopping me casting -1 or 240 to that enum type and passing that in.
I would recommend you to first understand how the search you want to automate works. Go on the website and open the developer tools of you browser. Just watch for the http requests and catch the one for the search. You will be able to see the result too. This is the request you need to mimic. Using C# you can use the HttpClient to create a request with the parameters you want and execute the research. This solution is the simplest but there could be some problem concerning security. Especially if the search system as a security system (or if you need to login). As an alternative : Another solution would to embed the website using a browser object and automate the process to access the search and run it. But for that it would depend many things.
yes, yes indeed.....I like fishing and fishing analogies. Time to try a different lure at a different pond.
That is true but to me that’s a different issue anyway as it simply can’t cast to that enum as it won’t resolve to an undefined type.
IIRC it’ll cast just fine, it takes on the value of the int and just doesn’t have a matching enum value for you to check against.
Ah I must be working on too much c# then because it doesn’t resolve on that hah.
Can you expand on that a bit? I can't visualise how you mean.
Yeah but it's still makes for a better API - you should always range check enum arguments anyway.
I understand how the automation should work....SHOULD lol...I've written out my pesudocode for it a few times. Can you elaborate some more on the watching the requests come in...I've gone to a websites page and pulled up the developer tools...do I need to click on a particular item or buttons to watch these requests? 
I second /u/SzejkM8's solution. Enum for row makes no sense.
 public enum LEDrow { red, green } Then declare and populate a list of LEDrow variables. 
Depending your browser. Here is one for Google chrome : https://developers.google.com/web/tools/chrome-devtools/network-performance/reference This link will help you understand the network tool. With this you will be able to see the request but you need to understand the HTTP protocol. What compose a HTTP request : header, body. How to make a request : verb and Url. Then you have the response. There is a whole bunch to learn about the matter but, for your purpose, just getting the minimum should be fine for starters. Wikipedia will give you the basics understanding of the protocol. Try it by yourself to see :) https://en.m.wikipedia.org/wiki/Hypertext_Transfer_Protocol
Non-Mobile link: https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^191302
Good bot
OHHH I love side projects!!! But that will certainly help and so does having the proper terminology so I can ask the right questions with the right phrases. Thank you I appreciate it greatly! 
"async/await hell".. click-bait worthy buzzwords.
You are welcome. Don't hesitate to ask for more if its not enough.
Thank you for the open door...I won't
Do you mean: switch (mytext.ToUpper() { case "ONE": ... case "TWO: ... } ..? Then you can just test for one case?
This is what I ended up with for now.
This is not bad either to recognize the case, but when I want to convert to that case it doesn't work anymore, right?
Is there any advantage of using "switch" over "if" besides readability?
I'm seeing a lot of explanations of what .NET Core is with respect to .NET, but in case you're not even sure of what .NET is: It's not unlike the Java runtime, if you're familiar with that. Whether you code in C#, F#, or VB.NET, you always have access to the standard .NET classes and methods. Think stuff like Console.WriteLine. Before .NET you had to make system calls directly and make sure to compile your application specifically for your target architecture because the machine code to tell the OS to print to screen on an x86 is different from on an ARM processor. With .NET you don't need to worry about the target machine's architecture; as long as it can run .NET your application will run as expected. .NET Core makes this even nicer because the goal is to play nicely with Linux and MacOS. Its goal is to let you write your program once and have it run on Windows, Mac, and Linux without any need to adjust your code to suit the OS or even to recompile.
C# was designed to minimize impact of a changing base class. But in general, I subclass classes that were designed for it.
The docs I use from Microsoft all come with simple code samples that really help. Not sure how much more helpful you can make it.
Then if you target different hardware you have to change code instead of changing a constant
Does each LED have a specific meaning?
As an aside, you shouldn't be using unsigned numbers *simply* because some value shouldn't be negative. Especially since having the value default to negative is a nifty way to find or report issues. Unsigned should pretty much only be used when explicitly needed, such as for compatibility in some binary structure or when doing bit operations (since signed bit operations can be weird/complicated/wrong). There's a lot of discussions on this topic (although admittedly most are based on C or C++).
Actually that is my primary gripe. So i went straight to the help on collections to find an example where they didnt provide sample code and what do you know they do now! Back in the day they didnt used to.
I would change LEDrow to LedRow 
That makes it so much clearer now. I appreciate the time everyone took to help flesh out my understanding. Just found this community and it’s already paying off. 
You can also use x.Equals(y, StringComparison.OrdinalIgnoreCase ) to see if they match, rather than converting anything with toLower().
In the same process? Normal events would work fine. Different process? Appservice connection between the two
It just takes time and experience. If you just started woodworking a week ago you might be able to build a chair, but a year from now, you can do it with without screws and make it look super clean.
You have the choice. You can either package the runtime or not which would require the user to have it installed.
No
Not really, I tried it a year or so ago, and it was very complicated, the way you access Visual Studio stuff like the name of the currently open solution, etc.
VistaMenu is just a component that extends the MainMenu control.
The documentation for creating extensions and project systems is piss poor. I've had a moderate amount of success by following existing examples that other people have written. The DocProject by Eric Woodruff has pretty great visual studio integration and it's open source on GitHub. I might also have some links I can post when I get to my computer.
When you start numbering variable names or enum values (1,2,3,4,...), you're almost always solving the problem the wrong way. There is no reason to enforce an enum here. While you're right that you don't need negative values for the row index, there's no reason to use an uint for a number that won't go over 4 (if you're zero indexing). Uints allow for larger int values, they don't reduce data size. Better approaches would be to use a List/array of 10 items, or use a List&lt;Tuple&lt;LedStatus,LedStatus&gt;&gt; **only if knowing that two LEDs are on the same line is significant information**.
If that's your opinion, then you should range check an int anyway. Why needlessly lock down yoyr API with a fixed number of LEDs or rows? The consumer of your API should configure how many rows/LEDs there are themselves.
BTW, you could make them [[Flags]](https://msdn.microsoft.com/en-us/library/system.flagsattribute(v=vs.110%29.aspx) if you want to store all 10 LEDs in a single int.
If the order isn't important, and you don't want to separate row+color, my personal preference would be: public enum StatusBoardLed { Red_0, Red_1, Red_2, Red_3, Red_4, Green_0, Green_1, Green_2, Green_3, Green_4 }
My apologies, I should have been more specific. I just picked up C#, and I'm a hobbyist programmer at best, so I'm just completely unaware of how to address the new view from the current view. Can you give me a short example snippet code behind and XAML from each page? Or a tutorial link? Thank you!
You could use something like Selenium to automate the browser actions and get stuff off the pages
I'm confused by the loop... Why not just use string output; if (replacements.TryGetValue(input, out output)) // do whatever with the output
oh yeah very true, sorry been using other languages that don't have that :(
Read up on T4 templates, this seems like a pretty straightforward application for them.
Roslyn and T4 templates are going to be your best bet. Roslyn for the code analysis to deconstruct your existing code, and T4 templates to generate the code. It's rather straight forward, you can create partial classes off of the partial class the T4 template file generates to add properties to it. Just know that C# meta programming is pretty sloppy compared to other languages so try not to rely on it too much. 
Disclaimer: I just read the first part of your post that said you hadn't found a monad library in C# that satisfied you. Have you looked into LanguageExt by Louthy? It's a pretty fully fleshed out library that includes monads such as Option, Maybe, Either, Try, and many many more. You could possibly use it to study someone's approach on monads in C# as well.
Enums are for "things which are not already numbers", e.g. "Fruit", "StatusCode" or "DateTimeKind", that is: things that are of different kind. A row-number is already a number, and not of different kind from one to the next. So the enum would not add any value to your code, it'd just make it more rigid. What you need to decide is whether you want the first row to be index 0, or row number 1. Then add ann assertion in your code to make sure it is always within range. Also, don't use an unsigned number unless there is a very good reason to do so (a value being "never negative" is not one of them).
Check out Mads Kristensen's GitHub. He wrote WebEssentials. https://github.com/madskristensen
&gt;When you start numbering variable names or enum values (1,2,3,4,...), you're almost always solving the problem the wrong way. This is the same rule of thumb I use.
TypeScript has all those cool JavaScript features but better because superset. In fact, most legacy codes can easily start migrating to TypeScript.
His blog refer to this site: https://github.com/Microsoft/VSSDK-Extensibility-Samples 
that is why I mentioned refactoring. but yes, the point is valid that since all javascript is valid typescript, it is less difficult to move between them. I would still wager that plenty of old javascript will live on because it is too much trouble to refactor. 
If you want to learn C#, I won't recommend starting with GUI apps! Start with a book focusing on the language, like the yellow book. Or do you have profound knowledge of another language with similar paradigms? Then of course you can easily start with more advanced topics. 
And adds a dependency to Visual Studio.
I've already done a good course on C# and I have previous programming experience. I just want to see how the code fits into a desktop app and how the interface is built. 
Opinion piece. I might get down voted to hell for this but... I don't like code generators, I have found that you tend to end up with sloppy domain models. When I am designing the API I am thinking about the big picture. When I am writing the API I am thinking about it's structure. If I am writing tests I am looking for simplicity. Translating the domain into view models makes me think about it again. When I get to the Java side I get to think about it a last time. By the end of that process I have had a good look at what we are trying to do and how we are modelling it. Okay that doesn't sound very good when I put it like that. But really it's not a lot of work and I can type pretty fast and generally don't make mistakes, so your fuel economy will vary. At the end of the day we are paid to think, not churn out tons of code. I say this because pretty much every auto generated code I've ever seen has been at best rough. Chances are I am going to be ignored, so if all else fails, throw away your auto code generator when you have gone live. Don't make the maintenance developers have to maintain what ever you used. At that point its a pain in the arse.
In your original code you convert it using the same variable name anyway. If you still need the original variable name, create a new variable and keep the text box value. The dictionary solution further up looked the better solution to me.
Look into nswag
The only exception here is algebra.
Erm wat
If you want to create code from code: Use Roslyn to parse the existing C# code. If you want to create code from assemblies: Just write a custom console application and use Reflection to get the data you want. For generating source: Just.. forget about shit like T4. It's not worth the problems. Forget about Roslyn, the API is just awkward to use for creating code. In the most cases simple solutions using `string.Format` is more than enough.
If you insist on using this solution I would recommend you make the enum flags. For example: public enum StatusBoardLeds { Row1Red = 1 &lt;&lt; 0, Row1Green = 1 &lt;&lt; 1, Row2Red = 1 &lt;&lt; 2, Row2Green = 1 &lt;&lt; 3, Row3Red = 1 &lt;&lt; 4, Row3Green = 1 &lt;&lt; 5, Row4Red = 1 &lt;&lt; 6, Row4Green = 1 &lt;&lt; 7, Row5Red = 1 &lt;&lt; 8, Row5Green = 1 &lt;&lt; 9 } This way, your functions can change multiple LEDs as required without enumerables. If you are unfamiliar with this, here is how it works: WriteLed(Row1Green | Row2Red, true); This would turn Row1Green and Row2Red on by decomposing the argument like so: void WriteLed (StatusBoardLeds leds, bool value) { if (Contains(leds, StatusBoardLeds.Row1Red)) // set Row 1 Red to value if (Contains(leds, StatusBoardLeds.Row1Green)) // and so on ... bool Contains (StatusBoardLeds leds, StatusBoardLeds single) { return (leds &amp; single) &gt; 0; } }
&gt; For whatever reason, C#'s type system does not consider newly created array elements to be uninitialized variables (does anyone know why?) Yes, it would be hard to enforce safety if it did, so verified IL must explicitly zero out all struct instances it allocates, and this goes for C# as well. As a consequence, there is no such thing as an uninitialized struct instance (or reference, for that matter).
&gt; I know ternary conditional operator but what is it actual doing? If you know it, why are you asking? If the expression in the first operand evaluates to true, the entire expression evaluates to the second operand, otherwise to the third operand.
You're doing an opensource project?
It's an inline if statement. The part to the left of the ? is the condition to be satisfied, the part to the right of the ? is the code run if true, the part after the : is the code run if false.
From my understanding it is a short hand return statement. It follows a simple pattern of (CONDITION) ? WHAT TO RETURN IF TRUE : WHAT TO RETURN IF FALSE 
It’s just syntactic sugar for an if statement. bothEven = ((n1 % 2 == 0) &amp;&amp; (n2 % 2 == 0)) ? true : false; is short-hand for if ((n1 % 2 == 0) &amp;&amp; (n2 % 2 == 0)) { bothEven = true; } else { bothEven = false; }
It doesn't do anything. They could just have said: bothEven = ((n1 % 2 == 0) &amp;&amp; (n2 % 2 == 0)) I cringe the same way when someone writes: if (b == true) It's ridiculous. Just say: if (b) 
If you know what it is, and you google it,you get this: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/conditional-operator It explains it rather clearly, and shows an example of what it's doing long form. 
 if (false.Equals(b))
As a teacher of programming I hate it when concepts like this are introduced too early. It confuses the crap out of some new students. Ensure you always explain why it works.
What I love most about code like this is that the compiler is just like "I see what you did there! Now here's my simplification."
I had to spin up my own functional\-style code\-generation library for SharpVk, because of the complexity and scale of the output; the library is [here](https://github.com/FacticiusVir/SharpVk/tree/master/src/SharpVk.Emit), and you can see it in use [here](https://github.com/FacticiusVir/SharpVk/blob/master/src/SharpVk.Generator/Emission/ExceptionEmitter.cs). It's not polished for public release but hopefully might give you some ideas if you choose to roll your own.
 if (new BooleanEqualityComparer().Initialize().Equals(b, Constants.True))
If [statement] is true? Then do this : otherwise do this. In this case the first one is gathering if both entered numbers are evenly divided by 2 using modulus. If both evenly divide by 2 then the bool is set to true. The next one then says: if the bool is true then write out that they're even. Otherwise write out that they are false. You could definitely shorten this up, but that's the gist of it. 
my b-hole clenched a lil
This first one is redundant use of the ternary conditional operator, which might be why you are confused. bothEven = ((n1 % 2 == 0) &amp;&amp; (n2 % 2 == 0)) ? true : false; is the same as bothEven = ((n1 % 2 == 0) &amp;&amp; (n2 % 2 == 0)); 
It doesn’t need to return anything at all, could just execute code
I think it is important to note that it is more of a if **expression** than an if **statement**. Evaluating expression gives you back some value. It might not be the case with any statement. 
Good point.
And then remove all the obsolete brackets
Thank you 
What I love is that it sometimes pisses away my super clever methods just to replace it with a lot of redundancy. And it's faster.
Thanks. I've contributed to his editor config project late last year. I wanted to build off more fundamentals. But your right, I could probably learn a lot from studying his code. 
Nice find. Thank you. 
It actually has to return something as you can only use it in a if-statement or assignment (and similar things).
True dat
&gt;Is there any advantage of using "switch" over "if" besides readability? Sometimes. With enough cases (with some compilers), `switch` over a bunch of string cases will do a really fast lookup (binary search I think it was?) based on the hashes of the hardcoded cases. Technically, an `if` / `else if` chain could do the same, but I don't **think** that current compilers spend the time trying to recognize this pattern to do the same.
That makes sense thanks!
Because the compiler is much better in code optimization than we are. That's why I try to focus in algorithmic optimization and clarity.
I’ll have to give it a try, admittedly I only use it for assignment or testing conditions 
Your boolean hole?
&gt; if it is solely for the for loop then is it okay to do this? Not only okay, but also desirable. You should avoid reusing variables for different purposes and you should favor short logical sections of code, so keeping the scopre of your variables as short as possible is a good practice. It's nice when I look at a loop and I see that the control variable is declared into the loop header, because it means that this control variable won't affect and wasn't affected by any surrounding code. It simplifies the understanding of the loop and of the method as a whole.
If both conditions is == 0 Then botheven = true otherwise false this is what Question mark do 
&gt; how you even could statically determine full assignment of an array Long story short: That's the halting problem and we are not going to solve it.
That's a *pretty nice* collection of articles. Thank you!
It doesn’t have to return anything. It just has to be a valid expression if you replace the entire thing with either end of the :. You can use it for assignment (as above), you could use it as a parameter to a function or a constructor, you could use it in an if statement (if you wanted).
Yes
&gt; When you press Enter, you will see that the program will be shut down and all objects will be destroyed. It **may** be destroyed, but it doesn't **has** to. Relying on the destructor to be called is very bad practice.
If I'm checking for truthiness I'll omit the constant, but if I'm checking for falsiness I'll add it: if (b) I think is fine if (b == false) I think is superior to if (!b) In terms of readability.
&gt; doesn't **has** to This should be &gt; doesn't **have** to
I think the shortest answer here is that you won't be able to follow that tutorial on Mac.
lol
Visual Studio for Mac comes with support for .Net Core only, and .Net Core does not support WinForms. You will have to use Windows to follow that tutorial unfortunately.
if (BooleanEqualityComparerFactory.GetComparerInstance().Initialize(BooleanEqualityComparerConfig.GetConfig()) .Equals(Convert.ToBoolean(b), Constants.True))
Thank you
(Tables fucked up when I posted, sorry I don't know how to fix it)
true
Personally I would use an int. One less type, no need to cast back to int for range checks etc. If all you want is a number use an integer.
Pass in the logged in doctor's ID instead of the role name, than find out the user's role based on the ID that was passed in.
Pass in the logged in doctor's ID instead of the role name, than find out the user's role based on the ID that was passed in.
I'm thinking about applying this tutorial to Unity, which I'm quite familliar with. Do you believe it's possible?
It's not a good blog post all around. The example is terrible, and the post doesn't even explain the use cases in which one might need a Destructor in C#. In a majority of cases, the garbage collector takes care of object destruction for you. As /u/AngularBeginner pointed out, object destruction in GC'ed languages is generally non-deterministic - you cannot predict when the object is going to be destroyed and therefore you should never rely on the dtor to release resources. When using resources like FileIO or Network connections, either manually call Dispose() or, even better, enclose in a "using" block. Don't try to look for reasons to implement a destructor (really, a "finalizer" in C#)... you'll almost certainly do it wrong. 
When i experimented with destructors, it got called some random time after it was no longer used. But if i used a dispose interface instead, the dispose method gets called immediatly it leaves the scope. Makes sense if one look at how the disposable pattern works (spoiler: the code `using(var foo = new Foo) { ... }` is a disguised `try { ... } finally { foo.Dispose(); }` block). But what could cause a destructor to not be called at all?
&gt; But what could cause a destructor to not be called at all? Read [When Everything You Know Is Wrong Part I](https://ericlippert.com/2015/05/18/when-everything-you-know-is-wrong-part-one/) and [Part II](https://ericlippert.com/2015/05/21/when-everything-you-know-is-wrong-part-two/).
Only reason I've ever found to implement a finalizer is a last-ditch attempt to spot leaked resources in my game engine (e.g. print a message in the finalizer if you're being finalized without having being properly disposed). Debug build only as they're a performance drain too.
How would it differentiate the doctor's ID from the Practice ID thats needed if the user is a receptionist?
Okay, no. Visual Studio for Mac comes with support for .net Core, .net Standard and the full mono framework. The challenge here is that native System.Windows.Forms does not exist on Mac. Once again, mono framework to the rescue in the form of [MWF](http://www.mono-project.com/docs/gui/winforms/) . This is unsupported and no maintained any more. You can however use [Eto](https://github.com/picoe/Eto), [XWT](https://github.com/mono/xwt) or even Xamarin to build GUI applications on Mac which will be cross platform compatible.
Can you rule out the possibility that on of the items in iaoList is null?
\` iaoList\[2\].Name\` will throw an exception if \`iaoList\` only contains 2 items.
In most cases its still returning a value, either to assign or as a parameter, its returning something based on the condition passed.
Well, it seems that when you create iaoList variable you are only filling data till index 1, aren't you?
While in this case weird, the Equals method might not be he same as the == operator. Potentially given a class that is designed poorly, == is not the same as Equals which is not the same as "is"
Found the Enterprise Architect!
My bad, thanks for clarifying.
It‘s a ternary operator and it‘s structured like this: Predicate ? ValueIfTrue : ValueIfFalse
What I am wanting to achieve in this is if there are 3 spots, fill up to index 2, if there are not 3 spots, make index 2 an empty string/replace with the text I have 
&gt;what could cause a destructor to not be called at all? I can think of two ways. First, if you call `GC.SuppressFinalize(object)`, the finalizer for "object" won't run. This is common when implementing IDisposable. Second, if the program runs and terminates quickly enough and without using enough memory to cause memory pressure to force the GC to run, the finalizers *might* not run because Windows (and presumably other OSes too) *could* simply invalidate/free the process' memory block.
It *represents* a value. It doesn't *return* it. Returning, again, has a specific meaning, specifically returning from a function in a return statement.
See my edit above. The answer here is based in count property.
Fair enough, I take your point that return maybe miss leading if you are referring to the keyword.
For your ternary expression I would use the built in String wrapper to check the null case: String.IsNullOrEmpty(iaoList\[2\].Name) ? "No other IAO" : iaoList\[2\].Name Are you also 100&amp;#37; sure that your types are matching? Is .Name a string?
Yeah, that's the main thing. I find it helpful (especially for novices) to avoid ambiguous language. So when we're trying to establish "return" as meaning something specific (and they may be new to that word being used in that way), it helps to *only* use it in that way. English is a fickle beast, though, so it's tough to do that all the time.
Let me try this and I will edit the post if the same exception pops
Let me try this and I will edit the post if the same exception pops
Let me try this and I will edit the post if the same exception pops
Doesn't the receptionist have a ReceptionistID or UserID or something? Just pass that in.
you're essentially asking how to run a windows application on a Mac :) Answer is, BootCamp into windows and get VS2017.
&gt; my output window states that the Count=2. BUT, when I get to dr[8] this is where I get an exception thrown. If Count = 2, then iaoList[2] will throw an exception because there is no item with index 2. You should do something like: dr[8] = iaoList.Count == 2 ? "No other IAO" : iaoList[2].Name; As an aside, it would have been really helpful here if you had posted the actual exception message, as well as ideally a complete, working example that we can actually copy into Visual Studio and run (or at the very least, some clarification about what sysRec.IAOs is). It just happened that by including the fact that Count=2, I could see the problem, but you didn't help yourself by not providing a working example.
Alright! That count property was bogging me! I've already said this but I think OP didn't understand.
No worries, this is how we learn. We get involved in a community.
A **very** important difference, even when not overloaded: var a = false; string b = null; var situation1 = a == b; //false var situation2 = b == a; //false var situation3 = a.Equals(b); //false var situation4 = b.Equals(a); //NullReferenceException 
I understand that without the specific expression thrown, my question doe not make a lot sense, but your code snippet works perfectly for me. 
Yes it is a string
You can add it as a property of the shortcut, or you can call SetCurrentProcessExplicitAppUserModelID() before you show any UI to set the App user Model ID. [see here](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) 
Removed: Rule 7.
You could pass in the ID and do a search, OR you could add a temporary cookie when the user signs in that differentiates between patients, doctors, etc. Then you pass in both the ID and the cookie and you have a smaller searching range (you know which table to search)
right click dll project and goto add. add reference. add reference to main project. you can also add a DAL project for just your entity framework database stuff. then add reference to the DAL in the main project and dll project.
&gt; I would recommend the 3 courses on pluralsight What ones are these? Its something I'm going to have to learn after I've gone over the c# basics again!
I will write this at times: &gt; if (b == true) Works great in [ternary logic](https://en.wikipedia.org/wiki/Three-valued_logic) statemenst. (If `b` is of type `Nullable&lt;bool&gt;`). 
If the size of ``iaoList`` (terrible name btw) is variable, why refer to *fix* indices at all? Why don't you collect only existing ones? 
how do I add it to the property of the shortcut? Is it listed as an argument? In the properties window of the shortcut, I don't see anywhere to add custom properties.
You can use NUnit with LINQPad https://stackoverflow.com/questions/45310571/run-nunit-test-fixture-programmatically
&gt; I dont know what the number styles does and allow hexspec does. Then you should follow the links in my post to the MSDN pages about those functions and classes. Becoming familiar with how to navigate documentation for the language you're using is very helpful.
I've fixed the link in my comment. It goes into more detail on both methods. It is under the "Where to Assign an AppUserModelID" header.
Consider posting questions like this to r/learncsharp. When asking for help on an error, please include the exception (at least its type and message, if you can). Your last line should probably be something like dr[8] = iaoList.Length &gt; 2 ? iaoList[2].Name : "No other IAO"; because you're overstepping the bounds of the array. You could also use something like dr[8] = iaoList.ElementAtOrDefault(2)?.Name ?? "No other IAO"; but that may be a bit much to absorb, right now.
&gt; C# does not permit static classes as type parameters I'm having one of those "oh, yeah..." moments. I just *know* I considered doing something like this once before, but I couldn't remember why I gave it up. That was the issue. Which, now that I think about it, is kind of odd. I wonder why that's forbidden in the first place. Is it just "that's dumb. Don't do that", or is there something about the technical implementation of generics in C# that actually requires instantiability?
I am being a bit of a dick, but it's even more of a ternary operator ;) 
Honestly, I'd create an enum that describes all possible statuses and then write a business/service class that decides which LEDs to light up based on the provided status. If more than one status can be allowed, you can use the `Flags` attribute to combine statuses.
Do you teach syntatic sugar? I am trying to remember from University, but I don't think I really every had a teacher talk about syntatic sugar for the exact reason you mentioned. Actually aside from intro courses, I don't remember a class that used anything but language agnostic concepts. Always the underlying concept, data structure, or algorithm that could be applied anywhere. Boiler plate is always better to explain a concept I guess.
Thank you. I really struggle not to write walls of text, though, even when I'm consciously trying not to. I probably sound more insistent on a 1:1 mapping of "standard" monads into C# than I really am. Honestly, I do realize that's a fool's errand. It's more just: since I'm doing this anyway, how close can one get? What are the tradeoffs? For instance, I learned elsewhere in this thread that if you forbid nulls in your Either monads, you can't quite satisfy left identity. That's an interesting choice. Do you break formal monadism or do you rely on a "please don't stuff nulls in here" convention? I'm leaning towards the latter now, if that makes you feel better :p &gt; I've just signed up again to Reddit (thus the V2) so it's nice that you're the first person I've interacted with properly :) You know, I should probably really definitely make an alternate reddit account for serious business. I've had to catch myself a few times before I linked one of my public repos, etc. I don't so much care about random people on the internet knowing my real name -- it's the other way around that wigs me out. Not that I've been up to anything sinister, just uh....yeah.
I've seen it, and in other circumstances I'd probably use it. But it's a little bit "gonzo" for my purposes. There's maybe 3 or 4 monads I'd actually be interested in using. The other kind of universal issue is that I'm writing library code, and my library will actually be returning these objects to client code. So if I use someone else's monad library, that's foisting an additional runtime dependency on the consumer. Similarly, I'm really trying to keep my library CLS compliant, and since these objects will show up in my public interfaces, that means they need to be CLS compliant too. It might be that LanguageExt is implicitly compliant, but just finding out would be a chore in of itself.
You discovered the ternary operator! expression ? itIsTrue : itIsFalse where "expression" returns/evaluates to a bool That's the equivalent of if(expression) { return itIsTrue; } else { return isIsFalse; } In a ternary expression you can plug whatever you want into the "isIsTrue" and "isIsFalse" slots. string username = IsAWeeb() ? "Ryuko" : "John" // if IsAWeeb() returns true, username will have a value of Ryuko IsSad() ? StayInBed() : GetOutOfBed() // If IsSad() returns true, StayInBed() will run but don't use ternary for complex logic, that gets messy quickly.
I'm a wall of texter myself so I feel the pain :) It works out sometimes and I quite enjoy it so bleh. I always try to encourage people to try stuff, because that's where all the real progress comes. There's no reason you couldn't come up with a new and elegant approach that other haven't. Worst case, you merely learn stuff :) I rage quit last time. I sort of regret it, but then again it's nice to start afresh. I know the feeling though :) 
&gt; Console.WriteLine(bothEven ? "there're numbers bothEven" : "there's a number odd"); IMHO, it is clearer: Console.WriteLine(bothEven ? "there're numbers bothEven" : "there's a number odd");
You discovered the ternary operator! expression ? itIsTrue : itIsFalse where "expression" returns/evaluates to a bool. That's the equivalent of if(expression) { return itIsTrue; } else { return isIsFalse; } In a ternary expression you can plug whatever you want into the "isIsTrue" and "isIsFalse" slots. string username = IsAWeeb() ? "Ryuko" : "John" // if IsAWeeb() returns true, username will have a value of Ryuko IsSad() ? StayInBed() : GetOutOfBed() // If IsSad() returns true, StayInBed() will run but don't use ternary for complex logic, that gets messy quickly. 
There are many people here that will probably be able to give you some deep in depth points, but from my experience there are a few things that C# does really well that makes a programmer's life much easier. 1. System.Linq. I would say that 50&amp;#37; of my day is spent dealing with List\&lt;SomeType\&gt; objects. However, 99.9999&amp;#37; of the time there will be a need to filter, sort, order, or trim this list. This is where Linq expressions come in. If you are not familiar to the C# lambda syntax, or lambdas as whole I would look [here](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/lambda-expressions). These lambda expressions allow you to apply expressions over lists in order to accomplish your goal. 2. Use Generics. C# dominates Java in its syntax when it comes to Generics. The use of a Type T allows you to not have to write the same method over and over again for each specific class that you create. Instead you can implement a generic method that takes a type T and can transform it by using the .GetProperties method. This will allow you to work with at the Type level, increasing code re usability. 3. Live, Love, Learn Visual Studio. Visual Studio will be your best friend whenever developing in C#. It isn't a bold claim to state that VS is the best IDE for its specific language. The debugger is incredible... use it, it will be your friend. Learn about the ability to attach to a process to debug actively running web applications, or use the internal debugger for console applications. My honest opinion when moving to a new language or when you are new to programming is to learn to use the debugger first, you'll get a peak under the hood and see how the language operates as you step through your executing code. Just my thoughts. Cheers!
Best thing you could ever possibly do is gain experience. Start building applications to solve small problems you need solved, reproduce applications want to try your hand at, join an open source project, ect. When you come across a problem or something you don't know how to do, research how to do THAT and iron that down. Move forward. As you go project to project, you'll gain two very important real world skills you'll need to have asna software developer. Resourcefulness and the ability to think abstract. The knowledge of C# syntax and how to do different types of applications will be a unavoidable byproduct of making software as you go. Throw those projects on a public git of your choice and built a portfolio. This will get you to "hit the market running" so hard it won't even matter if you get a degree.
Role-based authorization should not be enforced by the sort of front-end logic that you're writing. Instead, stop accessing the db context directly from your controllers and helpers and use Data Access Layer methods that, for example, look like this: public IEnumerable&lt;Claim&gt; GetClaims(User user) //role shouldn't be a string { //implement your logic here } The benefit of doing this is so that every time you access claims, you think about who is accessing the data. Using this architecture will make all your code more permissions-aware. In addition, it will make it easy to log user changes (like "last modified by") if you ever decide to do so.
Those are ternary operators. A Google Search can explain it better than I can.
It is a ternary operator. Basically an inline if/else statement read it like this: (if condition) ? true : false string.IsNullorEmpty("") ? "Is empty" : "Is not empty"
I think Mosh only has 3 MVC courses on there.
I should probably rephrase. Immediately initializing the array elements when the array is declared makes sense. The issue is that, short of using a full-blown array initializer, the compiler blindly initializes elements without respect to the programmer's intent or control (unless they use a full-blown array initializer). Even where allowed, explicit default constructors are not called for performance reasons. Acquiring an array of null references and then *really* initializing them later is a common case, and you want to make the common case fast. But that means there's often this divide between what the compiler considers to be an "initialized" element (ex. null string reference) and what the programmer would consider to be a meaningfully initialized element. If the goal of type checking is to aid in program correctness, this is less than ideal (but certainly not unique to C#). \/u/tweq gave a [good explanation](https://www.reddit.com/r/csharp/comments/8px0al/how_would_you_solve_this_design_issue_for_a_somet/e0eqwfg/) of why it's not practical to track initialization of individual array elements anywhere else except at declaration time. I just wish there were a simple toggle to inform the compiler that you would like to initialize the array with `new Foo()` instead of `memset`, if you don't mind the performance overhead, and that structs would also be allowed to have an explicit default constructor. The default field values that you get with arrays of structs are sometimes undesirable.
I'm more confused about the (a != 1) &amp; (a % 2 != 0) bit
Thank you so much! Awesome advice!
I agree with everything you said but I *very enthusiastically agree* with "never negative" not being a sufficient reason to use an unsigned type over its signed equivalent.
Awesome! Thanks for the info!
Preach it!
Personally I would integrate in .NET authorization manager and create custom user principal models. Roles can be managed in the data store and you can use attributes for a lot of what you do as it has built in AOP hooks.
(a % 2 != 0 ) should return false, which would return Even. Looks right to me.
but (b % 2 != 0 ) also returns false when it should return odd since 3 is an odd numbers.
&gt; `(a != 1) ?` That's just a boolean comparison: Does `a` not equal `1`? &gt; `(a % 2 != 0) ?` Same here: Does `a` modulo `2` not equal `0`?
I think flags are the way to go to but you should use one int flag per row and store them in an array (or a List).
a != 1: If the value of a IS 1 then we choose the lefthand side of the ":" because the statement (a != 1) evaluates to true. This means that we assign verb to be "are". If the statement was false then we choose the righthand side. This is essentially and If\-Else condition.. string verb = ""; if(a != 1){ 
Using `!=` makes it a bit harder to understand, because now you have an extra negative to deal with in your head (`!=` "if-true-do-this"), but it's "if false", and ugh. Try flipping the conditions and get rid of the `!=` and see if that helps: (variable == 1) ? if-true-do-this : if-false-do-this; string parity = (a % 2 == 0) ? " Even " : " Odd "; parity = (b % 2 == 0) ? " Even " : " Odd "; These checks are basically saying, if the number is divisible by `2`, then it's an even number. `%` is the [remainder operator](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/remainder-operator). It will take the number `a` (or `b`), divide it by `2`, and return the remainder. So if `a` is `5`, it will divide by `2` an return the remainder `1`. In this case, any odd number will return `1`, any even number will return `0` (because `2` evenly divides into any even number).
What are you confused about? It's quite straightforward. Imagine instead of `a` it's `numberOfItems` and you're building a line of text. You want it to say "There **is** 1 item in your cart" if `numberOfItems=1` or "There **are** 12 items in your cart" if `numberOfItems=12` and that is exactly what it is doing. &gt; However, applying this logic doesn't work for: &gt; &gt; string parity = (a % 2 != 0) ? " Odd " : " Even "; Yes it does. If `a` is divisible by 2 then `a % 2 == 0` and this will return " Even ". If `a` is not divisible by 2 then `a % 2 == 1` and this will return " Odd ". It does exactly what you'd expect.
since the values of (a % 2 != 0) &amp; (b % 2 != 0) are both not 0 then that must mean I choose the right-hand side for both, though this is clearly wrong.....
If you're using WinForms, can't you just use [NotifyIcon](https://msdn.microsoft.com/en-us/library/system.windows.forms.notifyicon.aspx) to do what you want? Way easier
I just ran your code and it worked fine. http://rextester.com/MOCVF16637
It makes sense now. Thanks!
It makes sense now. Thanks!
if a = 8 then a&amp;#37;2 = 0. and b &amp;#37; 2 = 1. So a is Even for the first assignment of parity. The second assignment of parity is b&amp;#37;2 = 1 we take the leftside of the expression and assign parity to "Odd". Im confused on your question.
No problem. It's not your fault. I believe those learning materials/examples should not be using a `!=` for the condition expression. There's enough going on as it is when learning the [conditional operator.](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/conditional-operator) If in the future you run into headaches learning new features or concepts, see if you can do the same to reduce any unnecessary complexities where possible.
BooleanEqualityComparerConfig needs to implement an interface so we can properly unit test it. and inject that interface into the main class (container) resolution
I figured it out now. Since a is 8 it will divide by 2 and return remainder 0 (no remainder). Any even number will return 0 remainder &amp; any odd number will return 1 remainder. I was confused by the 0 &amp; 1 on the right-hand side as I wasn't sure how the code was able to figure out whether something is even or odd. 
Correct
I disagree. `!b` is better.
Three pieces of advice. Check that your List contains enough indexes. Check for both null and empty. Put the affirmative first rather than in the "else". Note the trick with "&amp;&amp;". C# (and 99% of programming languages) will not execute the second half of the evaluation if the first half of the evaluation fails and they are joined with an "&amp;&amp;". It won't evaluate the second half because the first half already failed and there is no need. This is a good way to get around pesky null reference exceptions. dr[8] = (iaoList.Count &gt;= 3 &amp;&amp; !String.IsNullOrEmpty(iaoList[2].Name)) ? iaoList[2].Name : "No other IAO";//IAO 
FileSystemWatcher.Path expects a directory name, not a file name, so you should pass it "D:\" rather than "D:\goodbye.txt". More practically, path.Substring(0, path.LastIndexOf('\')) if you want to continue to use path as a full file path.
This is the direction i would also recommend. Maybe look into Identity Server 4 as well. Easy to host in a container. Then you can leverage .Net middleware if you are using .Net Core.
I had difficulty when I was trying to do this on an old project. The use of edmx requires the use of strange (to me) connection strings. It didn't help that each project in the old solution had its own copy of the edmx and they were not in sync. I abandoned the edmx and used the wizard to generate a code-first context from the existing database (in a separate dll) which made using the same one from multiple projects normal. 
Thanks for the opinion. I've never written a code generator before, but it was suggested to me by my coworkers who have written many and rely upon them heavily. I am in a position where what I need to accomplish is a massive ask and I haven't been given much time. I appreciate the perspective of being able to think about each and every piece and I think that's very important. I'll take your opinion into consideration as I am of a similar opinion. However, for the basic structure of my classes, I think it might help my sanity if there is a quick way to stub out the different class files I need when working on a new route and then fill in the blanks from there.
This looks interesting. Thanks for the suggestion. I was considering building something similar to the NSwagStudio portion, so this could be a nice shortcut. Thanks
The last one starts a new thread and the delay runs in that thread I guess
Do the first. The 2nd is making two tasks and the 3rd is non-blocking and will finish immediately, due to no await or .GetAwaiter().GetResult(). / .Result Also, be careful of putting aync on action delegates as well because in almost every case, it will be async void and therefore be non-blocking. It isn't in the examples, but just be sure to watch out for that.
Thanks for the tip. I was considering relying on `$"{stuff}other stuff"` string interpolation pretty heavily if I went the custom route.
Oh, the issue was with the modulus operator. Modulus will return the integer remainder or the number if the divisor is greater. IE 24%25 = 24. Other examples: 24%9 = 6 22%4 = 2 2% 5555 = 2
You can make it a after build event with .net core too for really 0 effort api access generation, that changes when the entry/model changes.
Thanks for the suggestion. My coworkers also suggested T4 templates, but I hadn't heard of Roslyn before.
🤣
It's short hand for an if else statement
Let's break these down. await Task.Run(() =&gt; { return Task.Delay(1000); }); // also wait 1 sec. My guess: it is same as previous line 1. Create a thread to run the function `{ return Task.Delay(1000); }` 2. Return the Task object from the function (the Delay task) 3. Wait for the Task object to finish . await Task.Run(() =&gt; { Task.Delay(1000); });// do NOT wait - WHY?? 1. Create a thread to run the function `{ var ignoredResult = Task.Delay(1000); }` 2. Return a Task that says a the function was run. Which is to say, the Delay task was created and then ignored. 3. Wait for the Task object to finish. Again, just the creation of the Delay task. You are not waiting for the Delay task to complete, you just want it created. 
Are you referring to this line? watcher.Path = Path.GetDirectoryName(path); Path.GetDirectoryName(path) equals to "D:".
You missed one await Task.Run(async () =&gt; { await Task.Delay(1000); }); 1. Create a thread to run the function { await Task.Delay(1000); } 2. Return a Task that says a the function was run. Which is to say, the Delay task was created and waited upon. 3. The (logical) thread created in step 1 waits for the Delay to finish 4. Meanwhile, a original (logical) thread waits for Task.Run to finish, meaning its waiting for the new (logical) thread to finish. *** Warning: When I say "(logical) thread" I'm talking about our pretend threads that C# uses to make async code readable. That's separate from the hardware or "real" threads such as the one created by Task.Run. Warning 2: Task.Run doesn't actually create a hardware thread, it gets one from the thread pool. Unless the pool is empty. Or you have overridden the thread scheduler... [yea, it gets messy if you want to be precise.]
Check the [ReferenceSource](https://referencesource.microsoft.com/#mscorlib/system/threading/Tasks/Task.cs,5fb80297e082b8d6). Task.Delay relies on a DelayPromise, which is an implementation of Task&lt;VoidTaskResult&gt;; after a timer finishes counting out the delay, the task's status is set to complete and the main thread (blocked by the await) continues. &gt;await Task.Run(() =&gt; { return Task.Delay(1000); }); Because you pass in a function rather than an action, this will use [this Run overload](https://referencesource.microsoft.com/#mscorlib/system/threading/Tasks/Task.cs,dfda5bcaec09a128) and unwrap the inner promise (returned by Task.Delay), meaning your awaiter is just waiting on the Task.Delay call. This is essentially your first case with some unnecessary extra function calls wrapped around it. &gt;await Task.Run(() =&gt; { Task.Delay(1000); });// do NOT wait - WHY?? Because you pass in an action (no return value), [this Run overload](https://referencesource.microsoft.com/#mscorlib/system/threading/Tasks/Task.cs,89fc01f3bb88eed9) is used, which just starts that action as a task and then returns the task tracking the action. Of course, the only thing this action does is *start* (and in no way wait for) a Task.Delay() call. So as soon as the Task.Delay() *starts* (not finishes), the task your awaiter is waiting for finishes. edit: furthermore, I expect that await Task.Run(() =&gt; Task.Delay(1000);); will work the same as the first case, because it will be interpreted as a function returning the result of the Task.Delay() call rather than an action.
You sure can! And it still uses the Windows 10 notification system rather than the classic NotifyIcon popup people assume. It was a nice surprise when porting my Windows 7 app over.
Not quite. Since nothing is awaiting the task created by `Task.Delay`, the delay happens on a 3rd logical thread\*. Not the original thread nor the thread created by `Task.Run`. \*: To be pedantic, it's not really a 3rd thread at all but a timer callback. But sometimes the small lies makes the bigger truth easier to understand. 