Check out [Building a Web App with ASP.NET Core, MVC 6, EF Core, and Angular](https://www.pluralsight.com/courses/aspdotnetcore-efcore-bootstrap-angular-web-app) by Shawn Wildermuth. He uses .Net Core 1.1 and VS2017. There's lot of really valuable content. Unfortunately, like most courses, some of it is out of date, and I wouldn't recommend following along if you're using .Net Core 2.0, but if you use the same tools as he uses it's really a great course.
If you think applying the D in SOLID is hero Derp too much java then I suggest you stick to /r/learnprogramming and learn OOP and unit testing. I'm being serious. You are not a developer if you really don't see the value in unit tests and unit tests that don't randomly fail because someone ran it at the wrong time of day.
&gt; If you want a method implementation, do so in an abstract class that inherits from the interface. That does not work for the issues they're trying to solve.
I've done some ASP.NET Core, and due to the huge amounts of changes between versions, I really think it's better to stick with .NET Framework for now. I don't think any of the Core technologies are ready yet. It's not as nice to work with as the full framework. To get started with ASP.NET, see here: https://www.youtube.com/watch?v=-pzwRwYlXMw&amp;list=PL6n9fhu94yhVm6S8I2xd6nYz2ZORd7X2v This is an ASP.NET MVC 4 tutorial. We are currently on MVC 5 for the full framework. MVC 4 and 5 are very compatible, but the main things you will notice is that 5 just does more. You will see that some parts of what he does in MVC 4 are easier in MVC 5. This is a fantastic tutorial. After this, you could follow the Web API tutorial: https://www.youtube.com/watch?v=0pcM6teVdKk&amp;list=PL6n9fhu94yhW7yoUOGNOfHurUE6bpOO2b This is also great, but MVC should come first. 
if we're being pedantic, nothing in there is java. * IInterface is C# style not Java (java ecosystem goes Sample and SampleImpl, where the first is the name of the interface and the latter is the implementation) * Documenation is not JDoc * Java standard is getPropertyName not GetPropertyName (Binding libraries use isX,getX &amp; setX as standard for reflection binding for example)
Don't forget dotnet is a JIT ecosystem. Compilation of C# code only generates intermediate language (IL) that is the compiled JustInTime in runtime to actual native instruction sets. That's what this library does. At runtime it reads the pre-Jitted intermediate language and copies it to the shim object.
You shouldn't take everything as a personal insult, which is also an important quality in software development... Also while it's generally a good idea to always make your code as testable as possible, there is such a thing as test induced design damage. The overuse of DI in my opinion often makes your code harder to understand especially if you "replace" basic system functionality. It's still possible to easily test you code using Fakes or comparable frameworks/libs without overusing (NOT "not using") DI.
Hi allinighshoe, I am using separate classes as I have created the cards so far using separate interfaces: High Cards: public struct HighCard { public readonly HighType High; public readonly SuitType Suit; public HighCard(SuitType suit, HighType high) { Suit = suit; High = high; } public string DisplayValue() { return $"{Suit.ToString()} {High}"; } } Number Cards: public struct Card { public readonly SuitType Suit; public readonly int Value; public Card(SuitType suit, int value) { Suit = suit; Value = value; } public string DisplayValue() { return $"{Suit.ToString()} {Value}"; } } 
Pose basically follows the execution of the code. Stubs are generated method calls, virtual calls and even constructor calls. The virtual call stub is able to determine at runtime on which type the virtual methods was called
Brilliant, thank-you for the reply form_d_k I will experiment with the code above! 
Sounds like a much better approach, thank-you for the response esilyo! 
Fantastic FizixMan! thank-you for the suggestion, I will experiment with the above. Have a nice day! 
I think you need to rethink how you interact with other humans. They're not out to get you.
Is this suitable for secure isolation when the loaded code inside the isolation context might be malicious (i.e. actively trying to get around your isolation)?
I use simple injector. You can certainly do what you want with it. Check the docs, the advanced section: https://simpleinjector.readthedocs.io/en/latest/advanced.html#registration-of-open-generic-types ``` var diceRollAssemblies = new[] { typeof(IDiceRolls).Assembly }; container.RegisterCollection(typeof(IDiceRolls), diceRollAssemblies ); ``` Constructor inject as follows: ``` public void MyCtor(IEnumerable&lt;IDiceRolls&gt; diceRolls) { } ``` 
Not sure if anyone's said this yet, but good job. This shit's cool, you should write a blog post about its internals and post that here.
I did try copy both of the answers, none works :|
Interfaces are a whole different thing. But why use separate classes why not just number them 1-13 and change how you display the face cards to the user?
If you are going to inject, try injecting a `Func&lt;DateTime&gt;` (or a `delegate DateTime GetCurrentTime()`) - you won't need a mocking framework and your code will be simpler. 
Removed: Spam. Please familiarize yourself with the [Guidelines for self-promotion on reddit](https://www.reddit.com/wiki/selfpromotion).
I'd assumed that no substitutions were made outside of the initial PoseContext.Isolate (e.g. inside any called functions/ methods) - but something you wrote below makes me pause and wonder if I'm wrong. Does it rewrite called methods/ functions, too?
I definitely will. I learnt so much about the internals of the .NET Runtime while building this library, info the whole community could benefit from
Yes it rewrites called methods/constructors as well, right down to the internal C# code of the runtime. This ensures that it covers every possible place a shimmed method could be called so expected functionality remains the same across the entire execution of whatever code is in PoseContext.Isolate
Wow! Apologies for doubting you in the first place!! :-)
Oh no there's no sort of security provided with this library. Isolation here simply means you get to provide a custom implementation for a method called within the PoseContext. Other functionality stays the same
Surely you just create an IFly and ISwim no need to attach these to bird or fish. But your argument is completely valid just pointing out a solution to your example :P
I understand how it works, but I'm thinking of a use-case like setting custom implementations for file IO calls that sandbox the requested paths to preapproved locations, and blocking the use of anything in `System.Net` or `System.Diagnostics`.
There seems to be a trend to *traits* - pure interfaces seems to be considered cumbersome and just a need by a weak type system. I like this modern approach, as it fosters *composition*!
I wish they would just implement multiple inheritance. I really dislike the idea of code in an interface.
What about card with value = 2?
I'm assuming you haven't had the same issues because of line of work but I can definitely understand this due to my current job. An example would be leaving a production PC to run a soak test on some new hardware product, coming in to work after the weekend to find out your experiment or test failed due to a forced restart can be very disappointing. There are certainly ways to avoid it but it's still an inconvenience.
I'm just impressed that everyone answered this question in 1-2 sentences, because in the reality it takes days of discussions to make this decision.
Bahaha, figures in light of [my comment here](https://www.reddit.com/r/csharp/comments/75qpsx/help_is_it_possible_to_create_generic_list_using/do8yvjo/). Fixed.
Definitely. This use case is one of the reasons I built the library. Currently working on a PoC in-memory filesystem that works by replacing calls to `System.IO` classes
That's why I don't like the feature. It gives people who don't know better *one more way* to use inheritance where composition is appropriate. The spec makes it clear it's a tool with narrow purpose, but I guarantee you every newbie tutorial/book is going to treat it like a form of inheritance. And I'm really bitter I still have to manually implement INotifyPropertyChanged on all of my damn ViewModels. We got auto-properties in what, 2005? I can't remember, because in half my types I can't use them because they don't support one of the most important interfaces in the framework.
Does this actually work in unit tests with .net corr 2.0 on linux?
If I understand you correctly then "context based injection" is something you could check out.
Well you're running into all these problems because you're using the wrong tool for the job.
So, you're looking to write a C# program that will monitor all outgoing HTTP traffic on a machine (and/or the entire local network)? Maybe check out [Fiddler](http://www.telerik.com/fiddler) as a standalone program, or if you really want it integrated with C#.NET, there's [FiddlerCore](http://www.telerik.com/fiddler/fiddlercore) which provides an API you can use.
What will be the difference between an abstract Class and an Interface?
I following Pluralsight kind of religiously.... so, it's up to you whether you want to wait a couple of weeks, but both Scott Allen and Shawn Wildermuth have finished updating their courses to .Net Core 2.0... it's just currently going through the review process. One might even appear next week. As for the suggestion to stick with .NET Framework, I would disagree and say that .Net Core 2.0 is finally a mature enough version of the framework to use.
If you want to sniff traffic on the machine, then you want to use some sort of traffic sniffing library. Winpcap has been the favorite library for this for years, and is what is used by Wireshark to get packets. There's a c# library to use winpcap here: https://github.com/PcapDotNet/Pcap.Net Once you have that, you tell it to start sniffing packets on whatever interfaces you want, give it a filter so it only matches http packets, and off you go. If you want to sniff https, you're going to have to get the browser to accept one of your certs as a root cert, which you will then use to man in the middle all https traffic.
Abstract classes can have implemented properties fields and methods, public ,private or any other access modify. With this change interfaces can only implement public methods 
You can find the answer in the post itself.
&gt; Default interface implementations can not provide state, they only can provide method implementation. Working under the assumption that default implementations can access other things declared in the same interface, consider this: interface IDriveable { void Drive() { Console.WriteLine(EngineSound); } string EngineSound { get; set; } } interface IHonkable { void Honk() { Console.WriteLine(HornSound); } string HornSound { get; set; } } class Car : IDriveable, IHonkable { public string EngineSound { get; set; } public string HornSound { get; set; } } Hard to deny it's MI-like - the state is in the properties even if the class has to implement them.
https://github.com/electricessence/Open.Disposable.ObjectPool/blob/master/source/SimpleObjectPool.cs * the virtual method `_onTaken` is only run in the `TryTake` method (not in `TakeAsync`); is this debug code? Perhaps that method should be named better, `_onTakenFromImmediatePool`? * in `TryTake` the task juggling and `if (await Task.WhenAny(taken, generated) == generated &amp;&amp; !generated.Result)` statement looks wrong to me (I'm not extremely comfortable with TPL, there might be invariants I don't know about). * line 133: `pool.Complete(); // No more... You're done...`, pool can be null in the call from 143 if `ClearAndDisposeContents` gets called more than once (perhaps if `Dump()` is called on multiple threads?) * the function call `Give(items);` on line 231 should be inlined to remove an unnecessary allocation https://github.com/electricessence/Open.Disposable.ObjectPool/blob/master/source/RecyclableObjectPool.cs * a constructor overload should be provided that takes an options class for the `ExecutionDataflowBlockOptions` object (perhaps in the base class as well?) https://github.com/electricessence/Open.Disposable.ObjectPool/blob/master/source/ObjectPool.cs * On line 74, and 77 I don't like how it gets `Count` twice in a row. I'd consider a local variable assigned on the previous line and updated at the end of the while loop.
The functionality has been available for many versions it was just not a default. Oddly last night I ran into an issue claiming I had duplicate compiled views (by name) even though the entire codebase just has 1 and had to temporarily disable them. 
[All hail Nutella!](https://iwsmt-content-ok2nbdvvyp8jbrhdp.stackpathdns.com/December-20-2011-04-55-28-14439801195.jpg)
I write all kinds of apps, except gui apps. I wrote realtime stream processing, APIs, console apps for batch processing, reactive distributed webjobs, database queries and SProcs, data movement and processing pipelines, etc. This all takes place on azure for the most part. But every company I've worked for, save one, has segregated the backend and front end developers, be in HTML5, or WPF. I find front end tedious, so I chose to focus on backend work, which I find interesting, harder, and more rewarding.
 Right, but now the functionality is default from .Net Core 2.0 onwards. Though the functionality is there for a long time, many people were not aware of this. It is good to have this as a default feature.
If your AppGlobal.User.Shows dynamically updates during program execution, it's going to need to implement some form of notification mechanism in the static shows collection (i.e. notification of Add, Remove, and Update). This can be implemented through the use of events.
I'm having a difficult time getting this to run in .NET 4.6.1+. The following code works fine in .net core but throws an exception in .NET framework: static void Main(string[] args) { Shim consoleShim = Shim.Replace(() =&gt; System.Console.WriteLine(Is.A&lt;string&gt;())).With( delegate(string s) { System.Console.WriteLine("Something else"); }); PoseContext.Isolate(() =&gt; { System.Console.WriteLine("Hello World!"); }, consoleShim); } The exception: System.Reflection.TargetInvocationException occurred HResult=0x80131604 Message=Exception has been thrown by the target of an invocation. Source=mscorlib StackTrace: at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor) at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments) at System.Delegate.DynamicInvokeImpl(Object[] args) at Pose.PoseContext.Isolate(Action entryPoint, Shim[] shims) at Pose.Console.NetFramework.Program.Main(String[] args) in C:\dev\junk\PoseSample\Pose.Console.NetFramework\Program.cs:line 18 Inner Exception 1: MethodAccessException: Attempt by method 'DynamicClass.dynamic_Pose.Console.NetFramework.Program+&lt;&gt;c_&lt;Main&gt;b__0_1(&lt;&gt;c)' to access method 'DynamicClass.dynamic_Pose.Console.NetFramework.Program+&lt;&gt;c_&lt;Main&gt;b__0_1(&lt;&gt;c)' failed. Is there something I've missed or set up incorrectly to get this to work?
 What? You could have your project stored in specific areas on both desktop AND web services... 
Thanks will take a look. Please post this as an issue on the repo so I can easily keep track of it
 I work with a group that has Avalon Edit and Visual Studio Intellisense running on android, we are waiting for this issue: https://github.com/dotnet/core-setup/issues/1651 to be finished, once it is the app can be released and you'll be able to compile .net core directly on your phone without web services. As of right now, the only possible way to do this would be through a web service, and most IDE's for C# (Visual Studio, Visual Studio Code) run on a framework that does not work on Mobile. Visual Studio Code uses Electron, which will probably never run for mobile, so. Until we can release our app, the closest you'll get is watching for c9.io to make an app to connect to their services (doesn't work at all on mobile atm)
FWIW, [this](https://github.com/dotnet/csharplang/blob/master/proposals/default-interface-methods.md) is the current proposal for this feature.
Instance fields, constructors, and destructors: an abstract class may have them, an interface cannot. Interface members also default to public access, while class members would still be private by default.
It's going to be abused. It's still a useful feature in dealing with recurring patterns that represent common, cross-cutting concerns, like, say, IDisposable, or for extending existing interfaces without breaking entire class hierarchies or introducing new interfaces or abstract types (see: IDb*). I think it's a valuable feature, but it's going to require some tight control on use for a while.
Debatable. I'm not crazy about the addition of non-virtual methods to interface types, but it is a significant improvement to extending interfaces vs. adding extension methods or introducing abstract classes.
You could if everything weren't locked down. My customers usually don't have internet access. When I visit them, all cell phones are checked in at the door. 
I think it's interesting. It has some big value for things like, say, IDisposable, where it can centralize or eliminate some commonly written and subtly error-prone boilerplate. There is some definite potential for abuse, which is potentially troubling. What *does* bother me is the way it introduces non-virtual methods to interfaces. That seems like it has the potential to break a bunch of things around, say, unit tests. More upsides, though: If type-cast and other operator declarations are allowed, it could allow things like public interface IConvertibleTo&lt;T&gt; { protected T Convert(); public static explicit operator T(IConvertibleTo&lt;T&gt; x) =&gt; x.Convert(); } or public interface ISummable&lt;T&gt; where T : ISummable&lt;T&gt; { protected T Add(T x); public static operator+(T x, T y) =&gt; x.Add(y); } which seems useful for making certain assumptions about types.
 People do it all the time with Java and AIDE, so that is a non-issue.
```AppGlobal.User.Shows``` only updates in some places, such as what you mentioned - add, delete and update. For the events, would it just be a simple call to update the Collection.Source with the same code, such as this: Collection.Source = AppGlobal.User.Shows.Select(show =&gt; new ShowViewModel(show));
I've only skimmed the proposal, but it looks like there's a compiler error if two methods with the same signature are inherited from different interfaces and no 'most specific override' can be determined between them. In that case, you have to resolve it in code with an override in your type or explicit implementation or something.
I don't really know how to feel about this. I can see a big trouble side where you put the default in and then don't override the default when you actually needed to since it will build with no errors from the start. Base class already gives us this ability but you would need to write the same code twice for different base classes. That would result in creating a 3rd class to house the code which is really this interface method skipping the base class. However, the base class is very explicit in the objects that are inheriting from it so you know those classes should get that implementation since there can be only one. With interface methods you are making a very risky gesture that any class that uses this will be the same.
You would still need to call .Refresh() in order to notify the UI that it needs to update.
While others have assumed you actually want to listen in on the network level, I'll suggest just writing a proxy and setting up your system/web browser to use it for all requests. Then you can do whatever you like with the http traffic. See https://github.com/MrDesjardins/SimpleHttpProxy For an example.
As you already have C experience I'd recommend something concise like this one from O'Reilly https://www.amazon.com/gp/aw/d/1491927062/ref=mp_s_a_1_2?ie=UTF8&amp;qid=1507834704&amp;sr=8-2&amp;pi=AC_SX236_SY340_QL65&amp;keywords=oreilly+c%23&amp;dpPl=1&amp;dpID=51BVywgEdlL&amp;ref=plSrch
Hi youngdestroyers, that card value is being set in a loop: public ICollection&lt;Card&gt; CreateCards() { //var cards = new List&lt;Card&gt;(); List&lt;Card&gt; cards = new List&lt;Card&gt;(); for (int i = 2; i &lt;= 10; i++) { cards.Add(new Card(SuitType.Hearts, i)); cards.Add(new Card(SuitType.Clubs, i)); cards.Add(new Card(SuitType.Diamonds, i)); cards.Add(new Card(SuitType.Spades, i)); } return cards; }
The first and the third are the same (OK, there are some arcane differences but it's safe to think of them as being the same). The variable "empty" contains a valid string and you can do whatever you want with that variable: concatenate it to another, find its length, etc. The second line means the variable "empty" doesn't contain a valid string yet. Any attempt to use that variable other than to assign it a value will give you a null reference exception.
"" and string.Empty are equal thanks to compiler trickery and they are a string with zero length null means there is no string at all
Okay, thanks for all the help :)
So basically now we have multiple inheritance...
It should have been default from the beginning. There's literally no reason to not make them default on publish. Or do people enjoy initial site loads taking a long time needlessly?
The most critical difference is that var s = null; var x = s.Substring(0); throws a NullReferenceException. `null` is a non-value, and it's usually not valid to ask it to do things. `""` and `string.Empty` are practically the same thing.
When I write/read `string.Empty` I interpret it as: 1. This is a string type, 2. and hell yes it's meant to be empty! `""` could be interpreted as either an empty string or a typo.
&gt; there are some arcane differences That is where we were hitting a snag. The field was populated with "", and threw an error, while string.Empty let it go through. It saw that it had something in the variable, and blew up. While string.Empty, it saw the variable was 'empty' 
Can't believe most of you noobs split your code into different files. Once you are done coding you should put everything into the same file for performance. It compiles and runs faster. 
What is the implementation of `AddUserAsync`?.
You need to add an /s, We both know there are enough noobs who'd actually believe that. 
will do 
There is a bit of an explanation when you check the source: https://referencesource.microsoft.com/#mscorlib/system/string.cs,69 That could explain that case maybe 
It's part of the Azure graph 'rest' API wrapper, I don't know what it's doing behind the scenes. 
According [SQLite](https://www.sqlite.org/amalgamation.html) it can make it run faster. &gt; Over 100 separate source files are concatenated into a single large files of C-code named "sqlite3.c" and called "the amalgamation". The amalgamation contains everything an application needs to embed SQLite. The amalgamation file is more than 180,000 lines long and over 6 megabytes in size. &gt; Combining all the code for SQLite into one big file makes SQLite easier to deploy — there is just one file to keep track of. And because all code is in a single translation unit, compilers can do better inter-procedure optimization resulting in machine code that is between 5% and 10% faster.
The C# Players Guide Third Edition
I like boobs.
A few things. Your code as written shouldn't be blocking the main thread. Other controls on the form should be able to fire, based solely on what you've posted here. If your form is indeed blocking (not allowing other clicks etc...) there must be something else doing it. Also, NewUserProxy should return Task, not be void. Try to reserve returning void on async methods for event handlers only.
After sleeping on it. I've gone even more overboard, but in a better direction I think. Getting rid of a lot of unnecessary stuff and providing more choice through base/sub classes. My new rules: 1) Let the GC handle disposing. 2) No need for a clear/dump in the non-trimmed classes. (I may make a separated class called ObjectPoolTrimmer that can be used for pools with counts.). 3) If the consumer is concerned about constructing and recycling times, then offer Async methods to allow for deferring. With these rules, a lot of code is obsolete and I will do some serious cleanup and then reply again.
While you do seem to have a bit of a misunderstanding of how `async` works (the `_createButton_Click`/`NewUserProxy` separation makes no difference), I don't see anything in the code you posted that should freeze the application. If you replace `await AddUserAsync(newUser)` with `await Task.Delay(5000)`, does the freeze still occur? Are you sure `AddUserAsync` is actually the Azure API method itself and not another wrapper method? Just wondering because it isn't qualified with a client object or whatever.
Really the key is here: &gt; because all code is in a single translation unit, compilers can do better inter-procedure optimization resulting in machine code that is between 5% and 10% faster. The problem is that link-time optimizations haven't been around forever, so SQLite got around that problem by just compiling everything into one object by using one source file. I'd be curious to see the difference in performance between single-file SQLite and mutli-file SQLite with LTO turned on.
We all had to learn and made plenty of mistakes while doing so. If it helps, the more you do it the more you get used to figuring out whats wrong, the better you get at not making the simpler mistakes, and the easier it is to think through what you want things to do. Just getting in the practice really is a big part of it.
I don't have a recommendation for you but if your project is in Unity you may want to find a book that focuses on C# in Unity. The last I had heard, Unity did not use the latest version of C# so a newer book may have things that would not be available to you. That may not be the case any more, but something to look into just in case.
Don't use `async void` unless you absolutely need to! Use `async Task` instead. The only time you need to use `async void` is for event handlers (i.e. the button_Click method itself could be `async void`) &gt; I was under the assumption that when I call an async method it's supposed to allow the parent method to continue A common misconception. `async` and multi-threading are intertwined, but not the same thing. An `async` method ***runs synchronously*** until it hits the first `await` call, at which point it yields back to the caller. When the `await`-ed call finishes, the `async` method resumes on another thread (highly simplified explanation). First, try changing NewUserProxy() to `async Task` and see what happens. The simplest way to do what you want is to have the button_Click call var t = Task.Run(NewUserProxy); and then never call `t.Wait()`. However, that is not the proper way to do background operations, as you will have problems if there are exceptions thrown by un-waited tasks and serious ThreadPool problems if you start using that pattern everywhere and background tasks created this way start piling up. And it becomes an absolute race condition disaster if you access any shared state in such background tasks. What is the "proper way" to fire off a background task? Well, it depends on the GUI/Web framework you're using.
Thanks for the heads up.
Yeah, I try to always use String.Empty. I don't even know why anymore, I just figure that if it's there then there's probably a reason.
I have three C# books, and they are all great (and different from each other): 1) Microsoft C# 2013 Step-by-Step - this is a great all-in-one book that teaches how to use Visual Studio, how to program, and of course the C# language and .Net. Great all round book, but probably too basic for you (I don't know enough of C or C++ to know if this book would be useful to you). 2) C# In Depth - A great read about the life of C# from version 1 to the most recent version, going over all the changes to the language and why those changes were made to improve the language. Might be good to help get your head around why C# does certain things the way it does, but won't teach you how to use the language at all. 3) C# 5 Pocket Reference - This is a great little book that just covers the syntax in a quick reference way, with examples showing how to code things correctly in C#. This would be useful, as you already know how to code, but will find the C# syntax unfamiliar sometimes. --------------- A book I don't have but hear a lot about is C# in a Nutshell. The C# Pocket Reference is actually a (very) condensed version of In a Nutshell. Don't be fooled by the title - the Nutshell book us huge, and likely covers everything you need to know. ------------------ Keep in mind that you won't need to use the more recent language features in a Unity project, so you will be able to get a book that covers an older version of C# if you want to save money. I got the C# 5 Pocket Reference for about 1/5 the price of the C# 6 version via eBay. -------------------------------- Unity has a lot of quirks of its own, and its own master class (MonoBehaviour). I have a Unity blog for beginners, where you can learn how Unity does things: http://unity.grogansoft.com/ The Pong tutorial will teach you all the core basics in a few hours, and you will pick up some simple C# coding while you're at it. 
"" and .empty is a string value but empty. Null is literally nothing. 
Nice! I'm sending this to a couple students I know who are just picking up C#. This kind of thing is useful, even if it feels redundant. I pretty much learned everything I know from short and sweet articles about random topics like this.
Just make your own REPL console app. It takes less than five minutes.
If you just want to check for emptiness, use string.IsNullOrEmpty(s) or string.IsNullOrWhitespace(s) (if a string of only white space should be considered empty), then you don't have to worry about the minutiae. 
Thanks a ton for the taking the time to comment. Extremely helpful. Leaning towards Nutshell at the moment and the pong tutorial sounds perfect.
Succinct.
The newer Visual Studios have one built-in. Look for "C# interactive" or something like that in the View menu. Outside of VS, RoslynPad is useful for a quick test or whatever, or the more capable LinqPad if you don't mind paying. There are a million more Roslyn-based apps, VS Code plugins, websites, etc.
I think you are looking for "image map" . I haven't seen them used in a long time but here is the info https://www.w3schools.com/tags/tag_map.asp
Thanks for reading and sharing it! I really appreciate it.
Ran into the same issue with CUDA code and LTO not working for it - we had a huge performance difference if we #included everything into a single file (it was at least 50%) because there were a bunch of small functions that needed to be inlined. This was a couple of years ago now so maybe NVIDIA's CUDA compiler supports LTO now. It was a pretty big pain because it meant code changes forced a full recompile (since the code was very performance-oriented there usually wasn't much value running the incrementally built code).
Is there a different way I should go about doing It? That link seems to be more about html and css.
I do have my own REPL, just wondering if there's some popular framework for smaller scale needs like a text output or diagnostic window. 
Ah, there it is. C# Interactive sitting right under my nose the whole time. That's exactly what I needed! Thank you.
[LinqPad](http://www.linqpad.net/) is great for this.
As my history shows I only read 50% of the post before thinking I have an answer so I missed the UMP part .. and have 0 history with UMP but if you have access to the mouse events you should be able to get the coordinates clicked and just assign each component of the image a rect and check if rect.contains(yourmousecoords) 
I'm surprised how unpopular var is...
Your title really strongly implies that it was new to .net core 2
 string empty = ""; This tells the compiler to grab some memory, and put a string with no characters in it there. Then, make "empty" point at that. string empty = null This tells the compiler to make "empty" point at nothing at all. There is no string. string empty = string.Empty This tells the compiler to point at an *existing* string with zero characters that the framework in in charge of. The string class is set up so that while "" isn't string.Empty, unless you're doing some very wacky stuff you shouldn't even run into a situation where it matters. Generally though, you should use string.Empty as it's clearer.
It might, actually. IIRC, the Cuda compiler is built off of LLVM because LLVM is BSD licensed. There was a time when LLVM didn't have LTO, and it probably took a while after it did pick up LTO for CUDA to upgrade to the new code base. If I were you, I'd give it a shot with today's CUDA compiler and see. There's a good chance it has picked up support.
/u/NiveaGeForce Has the 2,000 device limit been confirmed? Mine's still 10, it seems like it was a very small number of users who got the increase.
For bonus points, select the code you want to run, right click it and select "Execute in interactive" :D (or use the shortcut CTRL+K,CTRL+K or CTRL+E,CTRL+E)
I'll second this. I know of a game addon that someone wrote for Dead by Daylight that uses WinPCap (albeit via Java) to see your ping in that game. The game's devs finally added a ping indicator in the most recent major update... over a year after the game launched.
what do you use to make code snippets?
Can the injected assembly also just run code that has nothing to do with the vicitm and therefore be "hidden" from AV scanners?
TIL the majority of C# coders on GitHub have bad taste in code styles.
String.Empty seems like the same thing as making a global constant variable named TEN that is set to 10. Seems like unnecessary abstraction?
That's... very strange. Since .NET 2.0, 'string.Empty' is literally just a constant that equals `""`. From .NET 2.0 upwards, they are equivalent, and are interned at compile time to the same instance. If you use `""` in your code at compile time, it should reference equal string.Empty. The only interesting thing about string.Empty is that it is treated a little bit special by the CLR for COM interop, and that's it (see reference source below). Are you sure that you're variable was actually equivalent to the literal `""`, or was it a string *containing* two double quote characters (`"\"\""`)?
 Button1.enabled = !(string.isnullemptyorwhitespace(combobox1.selecteditem) || string.ianullemptyorwhitespace(textbox2.text)); Typed from my phone so so the caps are off but this is the easiest. 
Nice shortcut. I actually ordered a mouse with 12 macro side-buttons just because it makes my life easier in VS. Jump to definition, view fix suggestions, check styling/formatting, etc...
I use it basically anytime I call a constructor. Whenever I have to use a OO tool I just can't get over how dumb the `MyClass myClass = new MyClass()` pattern is, and var makes it a little better.
Unfortunately when I enter that I get a large number of errors. &gt; private void comboBox1_SelectedIndexChanged(object sender, EventArgs e) { Button1.enabled = !(string.isnullemptyorwhitespace(combobox1.selecteditem) || string.ianullemptyorwhitespace(textbox2.text)); } 
String empty = “” is slightly different than string.empty. “” is declared as an object while string.empty is not. Try and set an optional variable to string.empty and it will throw an error. String.empty is more efficient, although you won’t notice the gains it’s so minimal. Null is a non existence. 
There's [repl.it](http://repl.it).
Normally I ignore beginner level articles like this, but your presentation style was really good so I'm learning how to better write tutorials.
It's [`String.IsNullOrWhiteSpace`](https://msdn.microsoft.com/en-us/library/system.string.isnullorwhitespace%28v=vs.110%29.aspx). And you may need to cast `combobox1.SelectedItem` to `string` (assuming that the values for it are strings).
What does Thread.Sleep(-1) do? I'm assuming it's an thread locker, but how does it work?
-1 = `Timeout.Infinite`. It's just sleeping forever.
What mechanism is used for sleeping? Is code still executing or is it paused on an OS level?
 String.empty is not a constant, it's a static readonly field. That's why you can't use 'string.Empty' as an optional param default value. You have to use "".
I honestly am surprised the Tabs vs Spaces has that much for 'Tabs' considering the default behavior of Visual Studio is to place multiple spaces in place of every Tab (iirc unless I changed something and forgot).
It's paused at an OS level. `Thread.Sleep()` actually yields the thread and the OS transitions the state from Running to Waiting, and won't schedule it to run again until some external event wakes it back up. The exact semantics of how that all happens differs by operating system, but it works pretty similarly to how the OS handles a blocking IO request, except the event is a system timer expiring instead of an IO operation completing. 
Trying to put business logic into Entity Framework models seems misguided to me. As far as I'm concerned, they serve one purpose and one purpose only - to represent the underlying database model. Simply put, EF models are _not_ domain models and trying to mix those two concerns (persistence and business logic) would be a major code smell IMHO.
Great article. I agree with everything there. Anemic domain models are incredibly prevalent in the dotnet world. I've seen them in just about every business I've worked at. I think the reason that this is the case is because any Entity Framework tutorial you look at has a anemic domain model. Here's the example from the first link on google "entity framework tutorial". http://www.entityframeworktutorial.net/code-first/simple-code-first-example.aspx `public class Student { public Student() { } public int StudentID { get; set; } public string StudentName { get; set; } public DateTime? DateOfBirth { get; set; } public byte[] Photo { get; set; } public decimal Height { get; set; } public float Weight { get; set; } public Standard Standard { get; set; } }`
Why? Is it a fundamental problem with EF's design? A correctible problem? Prior to the invention of EF it was standard practice to have domain models that directly interacted with the database. What changed?
That's why I am working on my own ORM. One of the first things on my list was support for immutable objects and non-default constructors. (Though it did take me awhile to remove the associated boilerplate.)
How is this **any** different from the way we have it now already? Only difference is that you have the method implementation in the interface. The property situation is the same as we have it already. Does that mean we have MI already? No, it does not.
My head developer in my first job used to say: treat null as it's own data type And that wording made it a lot clearer to me.
That's my attitude, but back in the .NET 2 era using String.Empty was wildly popular. I didn't understand it then and I don't understand it now.
&gt; “” is declared as a *constant* while string.empty is not FTFY 
Is it a problem at all? I don't see why you would want to mix database persistence with business logic. Separating concerns helps keep code readable and maintainable, and persistence and business logic are separate concerns that shouldn't be mixed. I assume what you're talking about is the Active Record pattern. The most obvious problem with that is that since it too mixes business logic and persistence, it makes it very difficult (if possible) to unit test.
I use a Wordpress plugin called Enlighter. 
Ok so I'm working on releasing a few variations on ObjectPools of which are all derived from feedback in this thread. Major ones: * ```ConcurrentBagObjectPool&lt;T&gt;``` Pretty straight forward. * ```OptimisticArrayObjectPool&lt;T&gt;``` Roslyn Implementation. * ```BufferBlockObjectPool&lt;T&gt;``` A variation that is a bit more async focused. * ```LinkedListObjectPool&lt;T&gt;``` Simple lock on add and remove. Here's the test I'm using: const int TEST_COUNT = 100000; static void Benchmark&lt;T&gt;(IObjectPool&lt;T&gt; pool) where T : class { var tank = new ConcurrentBag&lt;T&gt;(); // This will have an effect on performance measurement, but hopefully consistently. int remaining = 0; using (pool) { Parallel.For(0, TEST_COUNT, i =&gt; tank.Add(pool.Take())); Parallel.ForEach(tank, e =&gt; pool.Give(e)); while (pool.TryTake() != null) { remaining++; } } //Console.WriteLine("Remaining: {0}", remaining); Assert.IsTrue(remaining!=0); } Not necessarily a perfect benchmark. But it simply: Where N is TEST_COUNT; * Takes N (in parallel) * Gives N (in paralle) * Empties remaining in pool. * Disposes the pool. * Asserts that something was removed. Now where this get's interesting is: * ```LinkedListObjectPool&lt;T&gt;``` 0.058 seconds * ```ConcurrentBagObjectPool&lt;T&gt;``` 0.122 seconds * ```BufferBlockObjectPool&lt;T&gt;``` 0.879 seconds * ```OptimisticArrayObjectPool&lt;T&gt;``` 22.0 seconds. I'll release the code shortly, but I think it's what you can expect from any ObjectPool with these underlying collections. I'm a bit shocked at the Roslyn's performance but I see why. It's not meant for large pools since it searches through an entire array for a potential entry. Probably is lightning fast for very small sizes. But larger pools it suffers heavily. This seems to scale reasonably since I experienced the same behavior at N = 10000.
Your own ORM .. geez. Sure you can do it but there are so many edge cases... 
Yes I fully agree. Having business logic in the model is a total violation of SRP: the model is for data. That's it. Just because people used to like the terrible active record pattern doesn't mean we need to make the same mistake in the 21st century. Data and logic need to be separate. What's worse is the people that like mixing them and violating SRP and a dozen other OOP principles then go on to call it "anemic" as though its a bad thing. In their mind it is. Realistically it should be called the thin model approach or the fucking common sense approach. Really I couldn't agree with you more and I wish I could upvote it 10x. You've described it in a better way than I have.
I agree with this article. I think it's also worth pointing out that if you use Code First From Database (or if you use Database First, but I think that's all but dead now), the automatically generated classes are all marked "partial". This means you can add to them in a different file, without fear of losing your changes if your schema ever changes and you have to re-build the auto-generated stuff. As an aside - I was going to say that some of the examples won't work, but then I tried them, and they do. What magic is Entity Framework doing? If I mark a constructor as "private", surely that means it can only be called from methods within the same class (typically some kind of factory method)? Yet EF seems to be able to call the private constructor even though it's not in the same class... how does it do this???
Databases can't store everything, so you likely need seperate classes anyway to restructure your data into a database friendly format. 
https://github.com/electricessence/Open.Disposable.ObjectPool/tree/master/source Latest variations based upon all the feedback in this thread. The ```LinkedListObjectPool&lt;T&gt;``` is probably the overall performance winner for pools over 200-300 in capacity. But ```ConcurrentBagObjectPool&lt;T&gt;``` isn't far behind. ```OptimisticArrayObjectPool&lt;T&gt;``` is blinding fast below 200-300 capacity. (I think there's a way to improve it to work with larger capacities). And ```BufferBlockObjectPool&lt;T&gt;``` is interesting in it's own that it could potentially improve performance for longer running generator factories and/or recycler methods.
String.Empty is a static readonly field of the System.String class. When the String class is first accessed, its static constructor sets its Empty field equal to the string literal "". So They both represent an empty string i.e. a string which contains no characters.However, they are treated differently by the compiler in that "" is a constant but String.Empty is not. 
Just a shower thought, I wonder if anyone has looked up the source code for C# and thought to themselves "I'm looking for the source code not some project in C# that MS is working on."
Personally, I use it for readability.
Everything changed :) Prior to EF we had ado.net, prior to that ado (Talking MS tech's here). Architectures were almost always either 2 tier or 3 tier. 2 tier has a thick client talking directly to the database, 3 tier has an intermediate server. There has been at least 15 years of progress since then. I say progress, I spoke to someone only recently who's project mandates that all business logic must go in a stored procedure... in the database... So some people clearly haven't moved on :) The biggest problem is that it won't scale very much. The database doesn't have to represent the domain model at all. It might represent an event store for example which records events that mutated the domain model. Where it works more traditionally as a repository of entities, ensuring the entity is valid in a scalable system probably can't be done with code inside the entity without mixing a bunch of concerns. These validations would have to occur down stream, so you're left with a subset of validations on the EF entities themselves. This leads to coherency issues and clashes. EF says the car must have a gearbox, down stream Tesla says it doesn't. In a scalable system writing to and reading from the database is usually an isolated process. The more things that can talk directly to the database the more problems you're going to have with managing performance. So having the validation tied to code that's tied to EF means you can't validate the entity downstream. This all assumes your entities are tied to EF. New versions of EF work with pocos obviously so theoretically you can share the pocos. This contravenes various architectural guidelines. Broadly speaking it's because your domain model becomes a monolith instead of respecting bounded contexts. So for scalable systems the role of EF is different, it doesn't need to know about the domain model. I'm arguing for scalability, if you don't want or need it and your domain model fits in the database neatly then your approach will work, for some values of "work" The testability issues mentioned below are real but can be mitigated if you do go that route.
CLR via C# https://www.amazon.co.uk/CLR-via-Developer-Reference-Paperback/dp/0735667454/ref=sr_1_2?ie=UTF8&amp;qid=1507884857&amp;sr=8-2&amp;keywords=CLR+via+C%23 
You can inject any code you like, but I can't recommend this for AV evasion. The injector uses system calls that are very suspicious and I would expect any intrusive AV to block these calls or at least inform the user via scary red box with a lot of exclamation marks. Accessing other processes directly will be a huge red flag for any security software installed. Another thing is that you won't gain anything by injecting into another process from the OS's perspective. You need to have at least as many privileges as the injectee, so no privilege escalation is happening.
I don't agree entirely there. I feel that there should always be implied /declared functionality using parent classes (e.g. having a generic data-logic wrapper/repo class that constrains all types to a base class or interface to ensure specific functionality or fields) and attributes (which themselves or other functions that check for these attributes contain the actual logic). I agree that having logic and methods within the data class should be used sparingly (if you're accessing the data using LINQ-to-Entities you can't rely on those methods as they won't work in the database context), but having the data classes describing the data only and having the logic defined elsewhere would make more work when both implementing and when another developer is going through and finding how the application interacts with those types
Okay, I have updated the title of my post to remove the confusion. Thanks anyways
Dude why, why not just have these as conventions when using Entity Framework?
&gt; I also think that it's not always a bad thing to have fields in there that aren't mapped to the data-model (e.g. something needs to be stored as JSON in the database so that it can then be sent to a view as an object) You mean have the EF model contain properties that are not actually stored in the database, but generated or deserialized from other data that is? I'm not sure why you would ever want to do that though. That sounds like a view model concern.
That's why I said it should be done carefully It's also one of the many reasons why I've been wanting to rebuild one of my projects at work for a loooooong time :P
Totally agree. When i first saw the article, I was like "I know all this", but still liked how things are presented.
U need an action (any who used Delphi knows it) but above all that u need to name your controls
I don't understand why people won't use it. It basically makes duck typing possible in the language.
I dunno man, I like to maintain strict SoC in all of my projects
If you like to have fun while reading, then you can look for :- https://www.amazon.com/Head-First-Learners-Real-World-Programming/dp/1449343503/ref=lp_697342_1_9/146-9411145-7455651?s=books&amp;ie=UTF8&amp;qid=1507891088&amp;sr=1-9 but for serious reader(I have kept in mind you as a starter) i would say : https://www.amazon.com/Sams-Teach-Yourself-21-Days/dp/0672320711/ref=sr_1_12?s=books&amp;ie=UTF8&amp;qid=1507891289&amp;sr=1-12
You are conflating your persistence layer with your domain layer. If you follow the principles of ddd and have a well defined bounded context, and well designed aggregate roots, then your repositories should never return a plain old EF object. They should return a proper domain aggregate, business logic and all, that is completely separate from your persistence layer. The job of the repository is to mediate that relationship and control how your aggregate is persisted. 
The problem is a misunderstanding of what EF is for - it only replaces your direct, untyped, adhoc, database access via SQLConnection, with well defined types. 
EF is a persistence model. The needs your domain and the needs your database put on your data are different. Your database wants things like ids but chances are your domain doesn't have the concept of an id. Or, if it does, it's probably not the autoinc seq you'll likely use in the database. The worst thing that ORMs have done is co-opt the term model. 
If you want to better understand async/await in C#, I recommend [this video](https://www.youtube.com/watch?v=H4EmfpsYcfs) by Mads Torgensen, the C# program manager at Microsoft. There are quite a few useful patterns discussed and also examples of "gotcha" code that will get you in trouble (like using "async void" on anything that's not an event handler.)
That's supposed to be the whole point of EF. 
What is? Putting business logic into EF models, or for models to represent the database model?
&gt; I was like "I know all this" So was Picard
I'm the maintainer, and the answer is - almost none at all. The only reason I'm not using the `EditorFeatures` NuGet is because it's not a netstandard library (RoslynPad is cross-platform), and because it depends on other Visual Studio libraries. Note that some APIs copied (such as signature help) are only public shims since they are internal in Roslyn. You can use RoslynPad.Roslyn directly and build your own editor, or use RoslynPad.Editor.Windows which integrates AvalonEdit (an open source WPF editor). There's also a preview of an editor for a cross-platform UI framework named Avalonia.
Longer than expected, but it sounds worth it, thank you :)
I was under the impression that async void could be used for anything you didn't care about receiving a response from or tracking, but switching to using Task isn't an issue, thanks.
&gt; While you do seem to have a bit of a misunderstanding of how async works (the _createButton_Click/NewUserProxy separation makes no difference), I don't see anything in the code you posted that should freeze the application. Lets say I want to change a textbox based on the results of a method. The method is started when I press a button. The button itself isn't async, right? If I could make it async that would be interesting. So I can't have the code to change the textbox *in* the button code, and I don't want that code in the method I'm calling, so I need to have another method somewhere, either an event that the async method calls back later or in a separated method as I did. I'm going through some materials from other people to get a better understanding of this system. 
I think I figured out the blocking part, I cleaned the code up instead of just copying and pasting it when I posted, in doing so I changed the await AddUserAsync(newUser); it *was* AddUserAsync(newUser).Wait();. I changed it to make it look better. I didn't think that would block because it was already under an await call, but after reading other suggestions I'm pretty sure that was the problem (and it seems ok now).
I think you should random string (100 characters) as a secret key in the server, and use it to generate JWT Token for each client. In the token you can put more information like userId, ipAddress... Client need to include this token to the request, and then you can validate them.
I implemented an OAuth 2.0 solution using [this article](http://bitoftech.net/2014/10/27/json-web-token-asp-net-web-api-2-jwt-owin-authorization-server/) as a starting off point. It uses OWIN as the middleware which is used to generate the JWT tokens. It also uses ASP.NET Identity to manage the users. This was the only article, that I found, that really explained well what was going on and how each piece works. I had to do a little bit more to implement refresh tokens. I know you said you were not working with .NET core but in case you move to that Pluralsight has a course called [Getting Started with ASP.NET Core and OAuth](https://app.pluralsight.com/library/courses/asp-dot-net-core-oauth/table-of-contents) that looked pretty good. I think they have a trial subscription for 14 days. I really like the JWT token approach because you can include roles right in the token and the token is signed cryptographic ally so you can be sure it has not been tampered with. I hope this helps you out.
I am not familiar with the RedditSharp library but have worked with similar products in the past. Is it possible that each top level post comes with a list of children posts in the object? It's possible that RedditSharp may be taking a flattened list from the Reddit API and loading it into the objects before giving it to you.
Using the entities as your primary business objects. 
Each `Comment` has a property `More` containing`More.Children` but this is null for every comment, even ones I know have children. 
Source on that? It may be possible to do so, but IMHO it's very bad practice and will almost inevitably result in an unholy mess unless the application is extremely simple.
&gt; I really like the JWT token approach because you can include roles right in the token and the token is signed cryptographically so you can be sure it has not been tampered with. Agreed we are currently in process of converting to OAuth for our enterprise authentication API, the ability to include roles and other authorization info is key to allowing us to use it with all of our applications and API's. The fact it's language agnostic is very attractive as well. 
I use `csharp` included with Mono; it has quirks, but I can quickly have it open in a terminal anywhere.
I think you may be overestimating your abilities and underestimating the complexity of your task. Programming is hard, learning is boring. 
The method the button calls on click is just a method like any other really. It's an event handler, and it's perfectly fine to make it async. In that case, you would probably return void on the event - but it can be async from there down with no need to separate the logic into another method if the only goal there is to make it async. Personally, I don't like to put much code in my event handlers, and prefer them to call methods that handle logic, but there is no performance difference. 
http://www.wpf-tutorial.com/xaml/what-is-xaml/
What exactly is it that you do not understand? 
"Event-driven architecture" is fairly straightforward, and it doesn't require anything more than a basic understanding of delegates/events (unless you want to add additional layers of complexity into your event system). As the name suggests, "*event driven programming is where the overall flow of the application is controlled by user generated events*" or "*Event-driven architecture (EDA), is a software architecture pattern promoting the production, detection, consumption of, and reaction to events.*" If you've ever worked on a winforms GUI application, you've worked with event-driven architecture. It sits idle until certain events happen -- a button click, text entered, etc. Those events "control the flow of the application." 
Reflection allows you to call private functions in a full trust environment. (At higher security levels things get trickier.)
Not as many as you might think. Edge cases arise from the features you chose to implement. You can skip a lot of them if you avoid stuff like deep object graph support. 
No, active record takes it too far the other direction.
Now you are violating the encapsulation principle by putting things that should be in the same place such as properties and validation in separate classes. 
&gt; The database doesn't have to represent the domain model at all. It might represent an event store for example which records events that mutated the domain model. If anything its gone in the opposite direction with us being more likely to have to a one-to-one mapping between classes and tables. Back when I was still writing VB code in the 90's, such a mapping was virtually unheard of. 
Why should the application know or care if the object are returning is an EF object?
Have you ever tried calling a constructor using EF? It's a right pain in the ass. 
But what else do you need to do other than populate its members? Why are you even calling constructors on an object within the DbContext? For insertion you can just create the object outside the context and then insert, for querying the query returns the objects anyway.
Absolutely, a class per table is fine but you're defining a model of your persisted data which I guess would be one bounded context, not your whole domain model. The exception to that would be where your whole domain is small and fits into a database sized application. I'm quite hazy about what I did in the 90's, I'm pretty certain it wasn't my best work :) Do you remember Technet arriving through the post on about a bazillion CDs? :)
I didn't have a TechNet subscription myself by I remember staring at the binders with envy with visiting a customer. I wish I still had my copies of the Visual Studio.NET betas with home-made labels. It was always exciting to get one of those in the mail.
Lets say you are loading a lookup table from the database. You want it to be represented by an immutable object so that you can safely share it across the application without risk of concurrency errors. 
How does `var` enable duck typing? All it does is infer types of variables...
We got a boxed copy (just one) of Visual Studio.NET in the office and I remember everyone standing around staring at it reverently :)
It allows me to not give a duck what a function returns as long as it quacks.
Automapper is pretty popular for this. I typically keep ef model pocos in an assembly called Entities, view models in a feature folder under the controllers/views that use them (see feature folders) and maps that transform to/from entities/view models in a folder called maps under each feature folder.
That's actualy the .net framework source code though. But sometimes you encounter strange behaviour from the framework, and if you are really curious about it, you can see how it exactly works instead of it being a black box.
Yeah, I know it's actually the .net framework, I was just lazy. ._.
To test it (mock)?
your absolutely right, its just going to be an unnecessary abstraction. If you add in the amount of time it would actually take to refactor a concrete type into an interface then often they just don't make sense.
&gt;The button itself isn't async, right? Not sure what you're asking. Classes and objects aren't `async`, methods can be `async` (including methods used as event handlers). &gt;So I can't have the code to change the textbox in the button code Why not? This would work just fine, and run virtually identically to your existing code: private async void _createButton_Click(object sender, EventArgs e) { var user = await CreateUser(); if (user != null) { MessageBox.Show("User Created:" + " " + user.DisplayName); } else { MessageBox.Show("Failed to create user"); } }
You don't need interfaces in your situation. Interfaces are useful to add a layer of abstraction between different components, so that you can change one part of the system without having to change the code of, and recompile, the other. If your whole system is a self-contained piece of software, you can always just add interfaces when you need them, and there's little reason to do it any sooner. On the other hand, if you were publishing a public API, then moving from having no interfaces to using them would be a breaking change and therefore you might have preferred to start with interfaces to begin with.
If you’re using some form of dependency injection, then having interfaces for your services seems like the standard pattern.
If you are doing unit testing, having interfaces gives you a purely virtual type to inject a mock implementation with. This may allow you to easily do automated testing of things like your business layer, without having to stand up a whole database or a test harness for a remote web service to connect to.
`async void` is *only* for things that must have a void return signature and must be async. i.e. EventHandlers. If you use `async Task` and don't `await` or `.Wait()` the task, then you'll get a compiler warning for an abandoned Task. And there's a reason for that. Firing off a Task in the background and ignoring it is not a robust way to do background operations. Look to adding a WorkItem (custom class with all the info you need to complete the work) to a Queue. In other words, use the Producer/Consumer pattern. BlockingCollection&lt;T&gt; is the common way to do that in C#. https://msdn.microsoft.com/en-us/library/dd267312(v=vs.110).aspx
Here is a screenshot: [image](https://imgur.com/a/ZrStV)
A pretty standard way is to upload images https://imgur.com and then you can just paste the link to the image here.
I did that in my comment, can you see it?
Right click, refactor, extract interface. Yeah, that's a real barrier to entry.
I can now! Oopsie!
I've deleted my comment and updated the post. thanks :)
* Testing * It decouples the implementation of a service from the definition of what it supports, making it easier to see at a glance what each service does * While you think you'll never have a second implementation, that may change.
TIL - thanks!
Since this has been answered(to mock out your db layer to test business logic), I'm going to ask another question. How many of you guys mock out your business logic services too? Two places I've worked now ALSO create interfaces for these services. It seems like an extra layer we don't need. We're never going to change our business logic(ok maybe, but we wouldn't have two implementations of biz logic), and the business logic is the exact thing we're testing, so why all the interfaces?
It's easier to test and is best practice. Believe me, it makes your code so much easier to manage and expand if you ever do change it and makes the different parts more re-useable.
No I'm not.
the video that /u/JakDrako linked to [Below](https://www.reddit.com/r/csharp/comments/75zrmp/async_programming_i_need_some_guidance/dob4ojn/) gave a lot of information. Don't use async void (and why), the events from the UI can be made async to get rid of my helper methods, and async does not run in a parallel thread. I certainly understand it much better now!
&gt; Why should the application know or care? Because if your entities are being passed around as EF objects, any change to a persisted value for any reason will be implicitly saved to the database. Implicit is bad, mmkay? Implicit means that determining why a database change happened is impossible - any context.savechanges could have caused it. It violates SoC and while it is convenient, it's a lazy way of avoiding writing a proper domain layer. 
Lots of feedback: * You're giving too much UI importance to XML stuff that most users don't care about. Managing radio stations is going to be a low percentage task compared to selecting stations and controlling the audio. Make the audio control and station selection paramount, and use a secondary menus for the mundane features. * You're wasting a lot of space. White space is a valuable UI tool but not for something as basic as a music player. * Some of your labels are left aligned, some are center aligned. Some labels are redundant to the button text. Be cognizant of vertical and horizontal swim lines and how text is aligned with other text. * You have the radio stations being managed via selection and a separate action. Why not let the radio stations be managed inline? It's more intuitive (if you've used a smart phone in the last decade). * Make the whole are of the app a drag and drop target. Nobody is going to do that anyway. * No comment of the textures and colors. It can all be interchangeable skins; just nail the usability and the graphical stuff is gravy. Here's a quick mock-up I did in balsamiq to illustrate some of my points. https://imgur.com/7CnVVVs 
I've done rdlc for PDFs and a custom report definition engine to generate both excel and csv. excel can use apply. csv has many 3rd party you can use.
Until you get out of the mindset that you write the code for exactly what you need at the moment, you will never understand what the interface is for. It's not a matter of YAGNI, and shouting that as an argument against interfaces is a misuse and misunderstanding of the principle. I suspect you're not really writing interfaces, you're coding the implementation and then creating the interface from that. Stop focusing on the behavior of the system for a second. Think about the architecture and what you need the smaller systems to do in isolation, as well as how they communicate with each other. Then, write interfaces for them. Once that's done, *now* code on the implementations and think about behavior only within that implementation. It's not only about being able to swap out new implementations. It's not only about unit testing. It's about making your code flexible, and by proxy: *making your code not suck to maintain*.
The debugger is your friend. Step through the code and look at player.SoundLocation after you set it. Then make sure the file is actually there. My guess is that Environment.CurrentDirectory isn't what you think it is. Assumptions are always bad. That's what the debugger is for: to tell you what your code is actually doing as opposed to what you THINK it's doing.
+1. I implemented our auth system based on the same article with jwt, and it's working very well. The api in question is a internal Backend and sure - individual users don't need to login to it, but it's been incredibly helpful for debugging and analytics to have all the jwts information available. 
When the program compiles, files are not copied to the output directory by default. Only compiled files are by default. To copy the audio file, first select it in the solution explorer. Then in the Properties window (not the Properties item in your solution explorer), make sure that the *Copy to Output Directory* is set to either copy the file each time or if the file was updated. Does that solve the problem?
Exactly this! While many of the developers I've worked with can appreciate a clean architecture and understand the usefulness of interfaces, when it comes to designing one they struggle on this exact concept. So often components are implemented and then an interface generated dependent on the implementation details, rather than being designed on the purpose of the component, and this always makes it a hassle to modify later when requirements change.
do string fileToPlay = Environment.CurrentDirectory + @"\m.wav"; player.SoundLocation = fileToPlay; To see if it's trying to play the correct file.
By the time it gets put of the repository layer the context should have already been closed.
Now promise me you'll not actually do that unless it's a last resort.
https://docs.microsoft.com/en-us/dotnet/framework/wpf/getting-started/walkthrough-my-first-wpf-desktop-application
Is there like a method that flattens all comments on a post?
No I'm not.
No I'm not.
Good point about implicit saves. One of the biggest problems in EF IMO. A source of many hard to find bugs. EF can be configured with tracking off but it's on by default. I like dapper orm because of this. Without implicit saves, OP's approach doesn't violate srp. 
Nothing about this has much to do with interfaces as a C# language concept. You can have a clear interface in the API sense without ever using the `interface` keyword.
Automapper is great. Don't forget to unit test your mappings, they are a part of the application logic.
A **delegate** describes a method signature - what types it takes as arguments and what type it returns. An **event** declares a property that will be used to invoke one or more methods that conform to that signature. An **event handler** is a method with that signature that will respond to the event. So step one is to create your delegate: public delegate void MyDelegate (object sender, EventArgs e); Step two is to create the event: public class MyClass { public event MyDelegate MyEvent; } Step three is to create the event handler: private void MyEventHandler (object sender, EventArgs e) { // do stuff } Now you have to *subscribe* to the event: MyClass myInstance = new MyClass(); myInstance.MyEvent += MyEventHandler; And finally, somewhere within MyClass you would fire off your event: MyEvent(this, new EventArgs()); When you do this, any methods that have subscribed to your event will be executed in the order in which they were subscribed. That's the high-level overview... where are you stuck? 
So instead of constructing a fully valid domain object, you break all references within your entity. If an order has many details and you detach and return the order how can you be sure the details collection isn't null? Methinks you should have read Martin Fowler Anemic Domain article a bit more: &gt;It's also worth emphasizing that putting behavior into the domain objects should not contradict the solid approach of using layering to separate domain logic from such things as persistence and presentation responsibilities. 
The business logic rules may not change, but one you could potentially refactor some code there and you want to be certain that while the code changed, the behavior did not. In that case it is useful to have solid test coverage
This is a very hard question to answer, and I felt the same way one time. If you aren't writing unit tests, and if you aren't writing them "properly", and you aren't using dependency injection, you can very easily fail to see the value of an interface. The #1 problem I tend to have with concrete classes, even simple ones, is they take parameters. Here's a skeleton for a really simple database class: public class Database { public Database( Credentials credentials, ServerAddress serverAddress, ConnectionOptions options ) { ... } public virtual void Save(Customer customer) { ... } public virtual Customer[] LoadAll() { ... } public virtual Customer Find(string name) { ... } } When I'm trying to write tests that use this, I'm going to want to write a mocked version of it so I can control how it works. That means I want to be able to add stuff like this: public bool WasSaveCalled { get; private set; } public override void Save(Customer customer) { WasSaveCalled = true; } But to get there, I have a problem. The base class calls for three constructor parameters. My derived class has to provide those. Sometimes it's this simple: public class MockDatabase { public MockDatabase() : base(null, null, null) { ... } But often it's not. I'm usually making use of those parameters to do things, so my test has to create valid arguments for all of those objects. They might have dependencies of their own, and it can sometimes be difficult to synthesize a value. Someone out there is reading this and screaming, "Use a mock library like Moq!" That doesn't really solve the problem. Moq has to deal with that base class constructor as well, so I have to tell Moq what objects to provide for it. Further: I write software for Xamarin Forms. We haven't quite been able to get Moq working on iOS or Android yet. It might not be possible. So I have to work with more primitive tools. In the context of this single problem, it seems trivial. I'm looking at production code that has 14 parameters in its constructor. Some of those objects have 5+ parameters to THEIR constructors. To test some of my types, I have to build half the object graph of my damn application. There are some good reasons I'm in that state, and some bad. Our project is in flux. So what do we do? Well, imagine if we had this instead: public interface IDatabase { void Save(Customer customer); Customer[] LoadAll(); Customer Find(string name); } That's MUCH easier to work with in the context of my test. I can implement the interface without worrying about things like, "How do I make Credentials that are considered valid?" or "Did the ConnectionOptions I set up have the right values? That's been one of the biggest benefits to having interfaces I have found. There are many other architectural benefits, but I've saved myself hundreds of hours of tedium in tests by wrapping damn near everything I write with an interface. I don't know how our project could be as large as it is and as well-tested as it is without them. 
while it might not solve your problem, you should use System.IO.Path.Combine to combine paths.
Not to mention that adding an interface on class creation means that you typically have to add every method back to that interface manually.
I get really sick of deleting these. I wish people would stop writing them :)
When you star the program from VS, the current directory will be bin/Debug most likely, and your audio file is not there. You need it to be copied next to the exe that was built in bin/Debug, as the other commenter suggested. 
Since "for testing" seems to be a common response here I want to remind everyone about shims https://msdn.microsoft.com/en-us/library/hh549176.aspx
Your suggestion is literally the opposite of test driven development. TDD = you write code for exactly what you need at the moment. Which ironically is where 99.99% of my interfaces come from. You dont need to think about the micro architecture of smaller systems, they evolve organically, if they suck (and start to smell) you refactor them. The tests are what makes your code flexable.
I tend to use the helper to generate the new method on the interface, then another helper to implement it in the class. It would still be one less step without the interface :)
Can you explain? Are you deleting interfaces you think are useless? 
wow ok so Interfaces aren't generally a necessity unless your interested in Testing, Lifecycle, and Modularity. An interface is great when I want to create a database provider and my code will always request the same things from that provider. If I create an interface I can generate a unit test for that provider to ensure my results are always the same. Later I can trade out that provider using the same interface and test again. The data solution I am using I am using might might become very dated or I have scaled out of that provider since I used an interface I can easily change out my data solution. It is important to note data isnt the only reason for an interface I could have multiple Middle-ware solutions such like authentication I have seen many implementation that allow me to pick which provider of authentication I use depending on options that all share a single interface (log in with google or use our login). Interface also make developing as a team much easier since I can build an interface and unit test of what I expect your code to provide. If you are writing an application with just you and don't expect the application to persist long into the future then you may not need to create interfaces.
Write something. Create a project. Put it on github and link it on LinkedIn. It could be a library doing something useful, or a full application. 
F10 F10 F10 F10 F10 null reference *shit* 
I'm not going to guarantee this is the way to do things, but this gets the point across: ** A Game ** Let's say you're making a game. You have an `InWorldObject` class that represents characters, food, furniture, doors, etc. For enemies, players, monsters, etc., you have a subclass called `Actor`. That will have all sorts of characteristics, like inventory &amp; health. Now, actors aren't the same as other `InWorldObject` types. They should, for example, be able to attack. &amp;nbsp; So you might have something like this: &amp;nbsp; public class Actor : InWorldObject, IAttacker { public int Health { get; } public List&lt;ICarryable&gt; Inventory { get; } = new List&lt;ICarryable&gt;(); public List&lt;ICarryable&gt; InventoryInHand { get; } = new List&lt;ICarryable&gt;(); public virtual int Attack(IAttackable target) { /* Attack code might be different depending on the actor type.*/ } } &amp;nbsp; When an `Actor` attacks, you might want several things to happen: - Determine what in-hand inventory item(s) are used to attack with. - Determine if the attacker hits the target. - Determine the damage done. &amp;nbsp; Now you want attacks to cause one or more of the following to happen, dependent on factors: - Cause the target to be injured or die. - Cause a number to appear on the screen to indicate damage done. - Cause text to display, indicating the result of the attack (*dodged*, *critical*, etc.). - Play sound effects based on the attacker, the target, weapon used, damage done, etc. - Cause the weapon used to break. - Cause the screen to shake, depending on damage done. &amp;nbsp; If you handled all of that through an `Attack` method, things could very complex. Here is where events come into play. &amp;nbsp; ** Events ** You'd want to create an event called `Attacks`. This event is *raised* anywhere you think is needed (from a `MagicSpell`, from an `Actor` that can parry, or even from a `Trap`). Anytime the event is raised, you want methods to be called. But how would C# know what methods those are? Simple: it uses delegates to handle events. Delegates are *kind of* like types. Events are declared with a delegate that describes the message signature of a method that handles those events. You would add an event and a delegate to `IAttacker`. Here is the standard convention: delegate void AttackHandler(object sender, AttackEventArgs args); event AttackHandler Attacks; This says that any method you want to handle an attack will look `AttackHandler`, and anytime you raise an `Attacks` event, those are the kinds of methods that will be called. Here are some example event handlers you could use: public void OnAttack(object sender, AttackEventArgs args) { } public void OnAttacked(object sender, AttackEventArgs args) { } public void OnMagicAttack(object sender, AttackEventArgs args) { } public void OnHits(object sender, AttackEventArgs args) { } public void OnHit(object sender, AttackEventArgs args) { } 
I've become really sceptical of automapper and apps that have very similar View and Domain objects. If the Domain and View really are that similar, why have the arbitrary separation of n-tier? On the other hand, if the domain is complex, I have to wonder if the app is too View-focused, persisting data in a way that doesn't really make sense for the Domain. Check your model and make sure it makes sense. If the domain is simple, don't be afraid to be pragmatic and use the same object for view and persistence. 
For the record - that's not my downvote ;P Shims allow you to actually test a piece of code that could not be tested otherwise (though that's a code smell right there). Interfaces allow you to test your code in isolation, which means you can have a high degree of confidence that your code will work even if you substitute the dependent component for something else. As with everything in testing (or programming in general) - it's a question of balancing the time you wish to spend writing the code, the cost of maintaining it and it's reliability. But saying you don't need interfaces for tests because shims exist is like saying you never need to carry your keys with you if you've got a crowbar...
First of all, let me ask why you are specifically looking for a C# job? If you can get into an associates program, learning the fundamentals of computer science and web development will do eons more for you than just picking a language and going for it (others may disagree, just my opinion). Now, on the other hand you obviously do need a language to stick with to get very in depth, so picking c# and going to pluralsight or something like that will help you immensely as well but then you have to ask yourself again "why c#?". What do you want to do? If it's web development, do you like backend work? Do you know what REST API's are and how they work? Do you know any SQL? Do you understand object oriented programming at more than a superficial level? You'll need to be able to answer those questions and realize they apply to many, many different languages you can use for back end oop development. On the other hand, do you think you might like front end work? If you don't have a halfway decent grasp on HTML, css and JavaScript - I would say go work on that immediately. *take this with a huge grain of salt* but JavaScript is probably the most applicable, useful thing a web developer can know today in 2017. To maybe answer your question more clearly: absolutely there is. You just need to ask yourself what you really think you'll like doing, and learn as much about it as you can from the ground up. C# is the fucking bee's knees but if I was getting paid to write python or java I would probably say the same thing. The point is there's a ton of language agnostic stuff that you should really be focusing on, and if you keep working on that and stay determined and apply, apply, apply, you're bound to get in somewhere eventually. Regardless of whether or not you have a degree. Also, learn git yesterday and try to get involved in some projects when you feel ready. 
Sure, I for one had very limited exposure to C# in college and I'm programming in it for the past 13 years. Most small software houses I know (though mind you - my knowledge might be a bit stale, so apply a pinch of salt) will happily hire a student part-time, so I don't see them not hiring a non-student provided he has a basic grasp of development. You might need to reign your expectations in (that's the problem with a majority of college IT graduates around here - their expectations/experience ratio is pretty gross), but it seems doable. YMMV of course.
Yeah because you probably shouldn’t just do that lol, at least not without consulting other developers working on the project...its likely that those interfaces are there for code architectural reasons
I mainly want to do application development, though I know that can be done with web languages. It is probably too early for me to be deciding what language I like. I've only seen a few videos of C# (and did the tutorial projects in Visual Studio). But it captures my interest a lot more than the few hours I've spent in HTML and CSS. But like I said, a few tutorial videos might not be enough time. I've done some very basic tutorials in C++. I like it a lot so far, but I'm barely past ifs loops. So not enough time there either. All I know is that I want to work in a language that has solving logic problems. My limited knowledge of HTML tells me that I want something deeper than just setting margins, hyperlink lists, and formatting text. I might like back end. I'm certainly no designer. So far, my degree plan has Javascript next semester. Maybe that will be what I'm looking for. Thank you much for your advice!
That is good to hear. Thank you for the info.
I am not completely sure of your question, so if my answer is not what you need... UWP **are** desktop** apps, as opposed to Web. They can also be run on Windows 10 Mobile (although that is effectively dead) You cannot create an installer for UWP apps as they are required to be downloaded from the store. There is a work around for this in order for apps to be tested in house, so you can get around it that way.
They don't have to be published through the store. You can give anyone the XAP file and they can use that to install it.
Sorry I wasnt sire how to word it. But yeah I was talking about having like a .exe file and installer. Like most programs I can download right now. 
tis okay, so yea you cannot create an installer for a UWP app. This might help you: https://docs.microsoft.com/en-us/windows/uwp/packaging/packaging-uwp-apps
SSRS is terrible. They've been superceded by PowerBI which is way better and easier to implement.
no you cannot, use WPF
Just keep in mind (generally speaking and from my experience) professors will pick a language so they have a medium they can teach topics within, not the other way around. It is absurd what can be accomplished with JavaScript these days, I would definitely challenge you to spend the time going above and beyond what you're learning in class though, there's essentially infinite resources available for free on the web. If you have a free visual studio dev account (which it sounds like you do) I would absolutely recommend using the three month free trial to pluralsight subscription they give you. There's hours and hours and hours of solid gold lessons about everything on there. 
Ty FizixMan, you may also be more interested in String.IsNullOrEmpty(), but it depends on what you are trying to do. button1.Enabled = !( String.IsNullOrWhiteSpace(textBox2.Text) || String.IsNullOrWhiteSpace(comboBox1.SelectedItem as string));
Well yeah, programmers this days tend to work harder, not smarter :D
Is the author AWOL? Might be a good thing to open an issue for.
Shawn Wildermuth just updated his Core and Angular class to Target 2.0. might be worth a look
It's being maintained by someone else. I'll do that, good idea.
Funny you should mention this, because the 2017.5 preview advertises a backward step feature.
I sometimes use interfaces to do functions on different classes that share a property or two. You can make the parameter of a method of type ISomeInterface and pass in any class that implements that interface. 
In local functions I can definitely consider using tuples because they aren't exposed to public api. Makes it pretty easy to pass data around
Holy shit for real? That would be insanely awesome.... is it like one step or as many as you want? 
Ok, fair enough, but in that case I could use a Private class. Or am I missing your point?
There will never be a language you like the most. They aren't like a wife. You don't meet "the one". You'll meet and learn lots of languages. Languages that don't even exist yet. You should aspire to be able to apply programming principles and methodology, and pick up new languages with ease. 
You may have code that references another business component. If you don't use interfaces there, you can't mock that call and you're testing much more than you have/want to.
Yes, but one caveat: they only run on Windows 10.
I'm mostly the same way but... If you're writing something that's 'script-y' like a throwaway console app, tuples and var fit pretty well
Ok, thanks. I tend to be more explicit always because of one of my [Rose Rules of Development:](http://www.blissgig.com/default.aspx?id=22) Temp things become permanent. So therefore I try to avoid the later pain. Not that I think tuples are BAD, I just try to think of what MIGHT happen to avoid deal with crap later.
**You can use Tuple to replace Dictionary , if you want a Key with multiple Values. ***Can use to store Data on Global variable, so rather declaring variables in multiple constant can store them as a single Tuple. ****Obviously returning multiple values from a function. Also I have covered more info on Tuples here https://www.youtube.com/watch?v=zgvRDhetFps 
Thanks, I'll take a look. I do disagree with the Global Variable as I came from VB (long ago!) and use of that type of pattern just has problems. In that case I would have an available class where data could be stored for the app. I'll take a peek at the video, thank you again for the info
Easy, make two classes, one for the summary and one with a details collection. Or I should say this is easy for ORMs that don't assume a one to one mapping between classes and tables. 
Try pronouncing it "finite ordered list" then see if you come up with any uses.
Why are you being downvotes, your 100% right. UWP is cool and all, but it’s a logistic and permission nightmare, store or not. Can’t access hardware and even intensive resources. Its a glorified silver light app for your “desktop.”
The real answer is yes they can run on Windows 10, but you should really just use wpf. 
&gt;Skeuomorphism wat
I have read the sentence multiple times and I still don't get the point you are making, please elaborate. (I'm tired, or I could be dense)
There's a group of people on this sub that are absolute zealots about UWP.
If this data structure is something I'm going to reuse, then a class is valid. While you could make a private struct to remove this argument, a tuple won't generate garbage like a class. Tuple signals to other devs that this structure is only to pass more data around at the same time. A class/structs to me signals that there is a relationship between the data in the structure (which is often the case, but not always)
Thank you for your feedback, it makes a lot of sense, I appreciate. I think I'll put the XML stuff on a separate tab and the player controls underneath the screen listing the radios. I like your mock up. &gt;You have the radio stations being managed via selection and a separate action. Why not let the radio stations be managed inline? It's more intuitive (if you've used a smart phone in the last decade). Yes it makes sense, I'll see how I can add a remove button on each line, would it make sense to have it as the first element before the radio name? I'm using a datagrid and sometimes the data might extend to the right using a scrollbar. 
It's just a repeating control. You can right align the delete button and then have any text overflow go to ellipsis 
There are trade-offs whichever approach you take. Having said that, I'm not convinced that we need to reach for interfaces and by extension mock objects **even for testing** as our go-to technique. We should also consider other approaches ... Let's say you have code like this: public DataModel MyServiceMethod() { var data = _repository.GetSomeData(); // process data return processedData; } The typical advice is to use an interface to make this unit testable: public void MyServiceMethodTest() { var mockRepo = new Mock&lt;IRepository&gt;(); mockRepo.Setup(x=&gt; x.GetSomeData()).Returns(data); var service = new Service(mockRepo.Object); var result = service.MyServiceMethod() Assert.That(result, Is.Whatever); } It'd be nicer if we could do something like this: **refactor code so that logic is isolated** public DataModel ProcessData(DataModel data) { // process data return processedData; } and now that the dependencies are out of the picture, you can just unit test the logic that you care about: public void MyServiceMethodTest() { var serviceHelper = new ServiceHelper(); var result = serviceHelper.ProcessData(data) Assert.That(result, Is.Whatever); } Cleaner code, cleaner tests. It would be ideal if you can do a refactoring like that, but don't be dogmatic about it; do it if it works for your situation, of course. As for the original ServiceMethod - why not target that with integration tests? That would probably be more valuable than a unit test anyway, especially if the service method acts more as an orchestrator and you keep your business logic isolated from your external dependencies. Sometimes using interfaces and mock objects is OK too, but I just think it should be more toward the bottom than the top of our list of techniques to use ...
Lazy is good. You have a computer that does your thinking for you. Stop spending time thinking about things computers will think about for you. Dictionary&lt;string, Widget&gt; widgets = new Dictionary&lt;string, Widget&gt;(); var widgets = new Dictionary&lt;string, Widget&gt;(); Which one is better? The ```var``` declaration of course. Why do you need to say it twice? The computer already knows what it is. When you change it next sprint, you'll have to change it twice on one line. You're wasting time ```repeating yourself```. The rule is ```Don't Repeat Yourself (DRY)```. Now tuples. Tuples are amazing things. You get all the benefits of strong typing with none of the downsides. Say you're working on a new super dictionary class. This is just theoretical here, bear with me. You want to implement the try-get pattern, but don't want to use ```out``` parameters (because out parameters are evil). public (bool: success, T value) TryGet(string key) { if(!HasKey(key)) return (false, null); return (true, Get(key)); } Now you call it like this: var result = myDictionary.TryGet(key); if(var.success) { DoSomething(var.value); } You get: * All of the benefits of strong type checking * To avoid using the anti-pattern of ```out``` parameters * To type less * To make your code more readable and less error-prone * The benefits of letting your compiler handle the low-level thinking for you. * To avoid polluting the namespace with useless classes that you're literally never going to ```new``` up on your own. Without Tuples and var you'll have do to something like this: MyDictionary.TryResult result = myDictionary.TryGet(key); But why do you care that what you're getting is a ```MyDictionary.TryResult```? Why go through the extra hassle of defining a whole new nested (or even worse: non-nested!) type that's literally only going to be used once for one function ever? You shouldn't. You're a software developer. **EMBRACE YOUR INNER LAZINESS**. The best programmers I know are lazy. The non-lazy programmers are the ones who create 3-tiered enterprise applications simply to compare two date values in Javascript\*. They're the ones who spend 80 hours a week writing 100,000kloc files to parse an XML file and don't understand that they could have done it in 4 lines of recursion\*. They're the ones who re-invent the wheel every time. To put it simply: If you're a developer who isn't lazy... *I don't trust you*. Computers make your life easier at every opportunity. The best developers are the ones who recognize this fact and strive to get the computer to do the most work for them as possible, because they recognize that the computer is better at doing it than we are. \* True stories. 
My father never used powered windows when his cars had them. "If I use them, they're just going to break," he would say. He got into an accident one day trying to roll down his window by hand while driving. But at least the power windows still worked.
Also unnecessary the vast majority of the time. It's not like DI requires it.
It relies on IntelliTrace, so only Enterprise get it https://blogs.msdn.microsoft.com/visualstudio/2017/10/12/step-back-while-debugging-with-intellitrace/
If they really were necessary, it would break the code base in a very obvious way. 
[removed]
Powe BI ftw
Yea, I've been people do that. And it's crap. The whole point of writing unit tests is that you can then use those units in other places. 
Ahaha, I started his 1.1 version a couple of days ago! Should I start over with 2.0?
We're building a spa with an api-back end. We use different api-models for request and response. Really makes sense.
What's with the fear of writing tests? 
&gt; wow ok so Interfaces aren't generally a necessity unless your interested in Testing, Lifecycle, and Modularity. Yea, I can do all of that without interfaces. 
Ding, ding, doing. Someone actually gets it.
One way of going about it would be to wildcard include your sound files as EmbeddedResources. This way you wouldn't need to worry about having the folder structure of your assets within your bin and messing with the following "Find my process" members: Environment.CurrentDirectory, Directory.GetCurrentDirectory(), Path.GetDirectoryName(Process.GetCurrentProcess().MainModule.FileName). Then use some sort of AssemblyResource loader to pull them into your application. You could also use a .tt template to read your project and generate an enum list of names for your assets as well. This is basically recreating the Resource.resx at this point though. &lt;ItemGroup&gt; &lt;EmbeddedResource Include="**/*.wav" /&gt; &lt;/ItemGroup&gt; public static async Task&lt;IDictionary&lt;string, string&gt;&gt; Load(Assembly assembly, string fileExtension) { IDictionary&lt;string, string&gt; Resources = new Dictionary&lt;string, string&gt;(); var resourceNames = assembly.GetManifestResourceNames().Where(x =&gt; x.EndsWith(fileExtension)); foreach (var resource in resourceNames) { using (var resourceStream = assembly.GetManifestResourceStream(resource)) using (var reader = new StreamReader(resourceStream)) { var data = await reader.ReadToEndAsync(); Resources.Add(Path.GetFileNameWithoutExtension(resource).Replace($"{assembly.GetName().Name}.", string.Empty), data); } } return Resources; }
1. Testing 2. Dependency Injection (which also applies to 1)
for most purposes, an "API key" is either used like a username, or it's used like a password. you submit it once to get a token that controls actual permissions within the system. occasionally, you use multiple keys with the same username and password to differentiate between multiple access levels under a user/password combination, or different 'applications' that the same 3rd party might use on different servers.
How is an out parameter an anti-pattern?
And if OP hasn't realized it, the database is really important to mock. Otherwise testing is really hard. You basically have to do a lot more setup or depend solely on integration tests. Tests will be harder to write and slower to run. Mocking would let you ensure that you can unit test anything that depends on the database while only having to setup what the used DB methods need to return. Personally, I have a hard time even remembering how I managed before I learned how to use mocking.
I *think* he might be alluding to the fact that you wouldn't wrap a list in a class every time you need to store data. That's all a tuple is...a list of data.
https://msdn.microsoft.com/en-us/library/ms182131.aspx It's awful and you should never use it. I automatically reject all checkins that use it. Bad. Bad bad bad.
I obviously can't speak for the poster, but I've seen developers who were taught to use interfaces (but without any guidance about when not to use interfaces) blindly create them for. every. class. I have three-property POCOs that implement an interface that matches that POCO exactly that implements an interface that just has the primary key. It's thoughtless design that really hampers our ability to iterate (these being packages that rest at the bottom of our development stack, so the interfaces are immutable).
Well some people do have changes to business logic or different implementations. You had it right there in your post. If you are sure that's not you then you're gravy.
That msdn page just basically says don't use them because they're "not widely understood". I understand them just fine. It doesn't give a real reason (that I could find) not to use out?? If it's truly a bad pattern.. I wanna know why! :P Thank you for bringing to my attention, though. I'll start looking for anything in the use of out that might be a bad bad bad pattern.
So, a Tuple is 'lighter-weight' than a class/struct? Memory-wise or something?
If you test your service alone with everything else mocked, it's a unit test. If you inject actual implementation of your dependencies, it's an integration test. Both types are really useful, but if I had to choose, I'd go with unit testing. 
We standardized on DevExpress Reporting in 2015 after exploring and eventually passing on SSRS. I'm pretty happy with the decision. We only use it for PDFs though. For generic Excel spreadsheets, EPPlus makes it easy to turn data into xlsx. Because our system outputs a lot of different reports in various tabular and serialized formats, we have a separate library of output format factories (e.g. ExcelFormatFactory&lt;T&gt;) that implement a common interface. T is a collection of some POCO clsss. For tabular data, the factory reflects the class properties and builds an intermediate DataTable with typed columns. We have some custom attributes that tell the factory what properties to ignore and if there is an alternate label for each column. For serialized output formats we just serialize the collection directly. One key aspect for us is that the same generic collection that gets fed to the output format factory can also be used for the DevExpress PDF report, meaning the report data object is not dependent on the format. One query/object builder per report makes managing and maintaining the data outputs a lot easier. Though DevExpress does create Excel, we don't use it. On the rare occasion we've needed more advanced Excel features than straight dump with some automatic formatting, we've gone to Open XML. It's full featured but not fun or easy to work with and it makes for extremely dense code. 
If you use Valuetuple, then you are not allocating on the heap. Look at difference between Value type and Reference type to get more information. ValueTupe is a struct
You're too focused on labels and not focused enough on the effectiveness of the tests.
What? That's not what I said at all. 
You're afraid of testing too much. You think if a test spans more than one class it isn't comprehensible. You've probably never written an end to end test in your life and think an "integration test" is when you test two classes at the same time. Maybe that doesn't describe you personally, but it does for more than half the people in this forum.
As a partner in a small dev/consultancy shop, I can tell you we hire all the talented devs we can get our hands on - and that includes students. If you're skilled, there's a job for you. I'm on Copenhagen, Denmark, so things may look different where you are located. A tip: doing projects outside school curriculum goes a long way towards demonstrating a lot of the things employers are looking for in a hire. 
I understand that, but why an interface for that business service? If I need to test that the behavior of that business service did not change an interface doesn't seem to matter.
[removed]
OK so I'd also argue that for simple cases with multiple return values, tuples will be more readable than creating a class. Compare the dictionary example from that other guy: public (bool success, T value) TryGet&lt;T&gt;(string key) { if(!HasKey(key)) return (false, null); return (true, Get(key)); } compare this to: public class TryGetResult&lt;T&gt; { public bool Success { get; set; } public T Value { get; set; } } public TryGetResult TryGet&lt;T&gt;(string key) { if(!HasKey(key)) return (false, null); return new TryGetResult&lt;T&gt; { Success: true, Value: Get(key) }; } If you're trying to consume the dictionary library, public (bool success, T value) TryGet&lt;T&gt;(string key) { tells you instantly exactly what you're getting, whereas you have to check what is in TryGetResult to see what you're getting out of TryGet. Not to mention that with the tuple you get nice quality of life stuff like the ability to choose to assign the result to two different variables inline with the function call instead of spreading it out over 3 lines. Obviously if for some god-forsaken reason you're returning something with 10 different fields you should use a class rather than a tuple. In the past I used tuples in methods to e.g. store intermediary results and break up LINQ into understandable bits. e.g. var singlePartMeaningfulName = input.select((element, i) =&gt; Tuple.Create(i, doMutation(element)) var finalDataLookupOrSomething = singlePartMeaningfulName.ToDictionary(t =&gt; t.Item1, t =&gt; t.Item2) but these days I'd use an anonymous type: var singlePartMeaningfulName = input.select((element, i) =&gt; new { i, abc: doMutation(element) } I wouldn't consider defining a class for that kind of intermediate result to provide any enhanced readability at all, so they're just useless code to rewrite when you decide to change things. I guess in a similar fashion, TryGetResult definitely doesn't enhance readability and doesn't provide any more safety so again it's just useless lines of code. Good if you're paid by LOC I guess... 
Dear god you come across as a cunt. You don't seem to know what a unit test is. It's different from an integration test. Both have their place. Yes, I've written both. Quite often. It's not about being afraid, it's about separation of concern. When I'm testing a calculator, I don't care how we came to the state that allows the data to be calculated. I just want to feed in some data that I have control over so I can test the result. The other stuff is tested differently. Maybe you want a separate test that does test that it all works together. All that is possible if you separate your business components from each other with interfaces. It's a little bit of work for a lot of flexibility.
Personally, I just always write a quick extension so that I can just do s.IsEmpty().
Because out and ref parameters breaks closures (lambdas). Your API decision forces the caller to adapt in more things than just the call, and that's a poor API.
What do you mean by this? &gt;The spec makes it clear it's a tool with narrow purpose, but I guarantee you every newbie tutorial/book is going to treat it like a form of inheritance. This example is how people who haven't studied a lot of software engineering texts write code. It's a pit of failure for them. 
What nonsense. I’m glad I don’t work with programmers who blindly follow dogma about what line of code is and isn’t allowed. 
I have been using UWP to create apps to run on RPi for a while now. super convenient way to make fairly elaborate programs to run on them.
Actually you can, the store is not required in any way.
Which for most people is fine and it does bring many advantages.
&gt;You cannot create an installer for UWP apps as they are required to be downloaded from the store This is 100% false. You can totally create an installer and not distribute via the optional store. 
Do you know what other cool stuff Enterprise has?
Which hardware you can't access? Or intensive resources? You can even call Win32 APIs... 
Until we have proper pattern matching (like in F#), I still consider out variables the better API than the variant you propose with a temporary variable. That's just a crutch.
desktop clearly means proper desktop
/u/Woolbrick said not to repeat yourself, and the computer knows what you're saying so it's fine... but I agree with not using *var*, and I think the point is, it makes things **more clear to yourself**. I find it easier to tell, at a glance, what I'm working with if I don't use the *var* keyword; so I only ever use *var* for anonymous types. I very rarely use Tuples in C#. Certainly less often than I use *var*. I do tend to create a class to return things from. I find that, as someone who also does a lot of API development, this is a helpful strategy anyway as you then have a class to use with your client apps when you fetch that data from the server. I also find that having a named type helps to keep things clear. I don't think that doing this is re-inventing the wheel, and doing this doesn't mean you write tonnes and tonnes of code to do simple tasks. Your class will probably only be a few lines and it increases the clarity of what you've done. **And as John Carmack said; do re-invent the wheel, because that's how we get better wheels ;-)**
It's a pluralaight course
How can that bring any advantages? 
&gt; None of these services will ever have more than one implementation, That you know of.
Stating the name of the type twice isn't being explicit, it's being redundant. Use var.
UWP are exe files. And I don't know why people say you can't create an installer for them. You totally can - in fact during development they create an install PowerShell script for you. You property shouldn't though because then you have to care about updates yourself while the store does this for your users.
Code maps while debugging. Really cool &amp; useful when you're struggling to figure out an extensive code base written by someone else, whether how it actually works, fixing an obscure bug or trying to add a feature. But as you become more familiar with the codebase.. probably not that useful. I guess it's nice to ask for Enterprise license if your company get a volume discount from other licensing, but it's hard to justify the price difference from Professional license. Especially if you consider you could get Supercharger, Resharper, Oz Code and other niceties for the difference. 
&gt; ok maybe, but we wouldn't have two implementations of biz logic And then you have to keep something for backwards compatibility while also offering an improved version and then you do. 
TDD is not some kind of god given rule. I for one am not interested in doing TDD as it yields meh designs/architectures in my experience since the refactoring step is often left out due to being too much work for no functional gains. 
https://docs.microsoft.com/en-us/visualstudio/code-quality/ca1021-avoid-out-parameters &gt; **Cause**: &gt; A public or protected method in a public type has an out parameter. So the guideline is not talking about: * internal types * private/internal methods in public types * static functions When I saw value tuples, my immediate thought was also, no more out parameters. Then I tried converting all my try pattern methods and the code became a mess. if (cheapParser.TryParse(obj, out var cheapResult)) { } else if (expensiveParser.TryParse(obj, out var expensiveResult)) { } else { } If I wanted to do the same only with value tuples I would have two options as I see it: var cheap = cheapParser.Parse(obj); if (cheap.success) { } var expensive = expensiveParser.Parse(obj); if (expensive.success) { } if(!cheap.success &amp;&amp; !expensive.success) { } or var cheap = cheapParser.Parse(obj); if(cheap.success) { } else { var expensive = expensiveParser.Parse(obj); if(expensive.success) { } else { } } I know I prefer the first one using out parameters, especially with C#7 inline declaration. Side note: C++17 has [if statement with initializer](http://en.cppreference.com/w/cpp/language/if#If_Statements_with_Initializer) if (auto it = m.find(10); it != m.end()) { return it-&gt;size(); }
Var is extremely useful when you have a really long type. I'd rather not type ConcurrentDictionary&lt;String, ConcurrentBag&lt;SomeGenericWhatever&lt;SomeValueType&gt;&gt;&gt; twice or more. IIRC it's also smart enough to use the most specific common ancestor of the types that are assigned to it. So if you have something like: class A {} class B : A {} class C : A {} Then in this case: var foo = new B(); foo will be of type B, but if you have this: var foo = condition ? new B() : new C(); then foo will be of type A.
Out parameters have issues, but they're fundamentally the clearest mechanism for try methods. There's a reason they're always done that way. 
The key use for tuples is when you have a type which exists within a single method, but which can't use an anonymous type for whatever reason. Creating a class in these circumstances is just ugly, but other mechanisms don't work. Decomposition also makes them particularly nice for certain kinds of method returns where multiple values are created by the same algorithm, and used at the same time, but aren't related long enough after the method call to keep them together. Using a tuple for something like a point is silly, but if you might want to immediately separate the horizontal and vertical components of a move after calculating them. 
Lazy has its advantages, and ceremony is a great place to have unforced errors (witness eight million incorrect implementations of the singleton pattern, or the IDisposable interface). I don't feel like the .Net 4.0 Tuple&lt;T1, T2, etc&gt; type is tremendously useful, but there have been a handful of times I really just needed something like Pair&lt;T1, T2&gt;, and, for that, it fits the bill. So does the newer ValueTuple, though, and it comes with some improved syntax. Where stuff like this shines really isn't in things like public APIs (especially if/when we get record types, which ought to replace tuples for most externally visible use) as much as anonymous methods like LINQ selectors or private/internal methods. Tuples make it trivial to return two or three or four pieces of information where you were returning one. And var is awesome.
That looks cool. Would be nice when documenting code.
Thanks for your thoughts. I would like you to expand on why var is awesome
Interesting thought, I will ponder your point
&gt; as John Carmack said; do re-invent the wheel, because that's how we get better wheels ;-) Nicely stated. Thank you for your thoughts
Can you provide a link, some info, instead of just a contrary statement. If you are right, then wonderful.
UWP is proper desktop...
Thank you **very** much for the detailed response, it is very helpful for me to understand the value of tuples. Have a great weekend
ah, thank you for the clarification.
It's all in the documentation and not hidden at all, its 3am here and I'm going to sleep but I'm sure you can find it if you want to. Just look up UWP deployment stuff. I find it annoying that you can't be bothered to look up the info yourself to be honest. You clearly haven't even read the documentation. If i get a chance tomorrow i might write a blog post on it that shows how to do it and that has all the documentation links. For now just take a look at the default powershell script that built packages bundle with to get started.
"the correct application of out and refparameters requires intermediate design and coding skills."
I appreciate the detailed response. While I do agree about the point about being lazy, ie: why memorize everything when I can look up what I need when I need it, however the point of code is not that the computer can read it, but that other developers can. I really, REALLY do get the point you and a few others have stated about the redundancy. I will give thought to that. **I** will not use it in cases such as: var i = 0; vs int i = 0; But for others, I get your point and I will give it thought
There are countless security advantages. You can't get a virus from a store delivered UWP app. They run with a virtualized registry that is both good for long term system performance and removes the chance of registry errors occurring over time. The run under a virtualized sandboxed filesystem that requires secure permissions to leave. Because of the registry and filesystem changes (as well as a few others) you can actually uninstall UWP applications without leaving crap behind. (almost every program ever made leave loads of crap after uninstall). Seamless auto updating. Built in secure payment processing rather than you having to trust random apps and websites. And probably way more that i cant think of right now.
I suppose 'awesome' is overselling it, but var reduces ceremony in declarations by letting the compiler infer the type from the right hand expression, instead of requiring the programmer to figure it out themselves By the same mechanism, var reduces errors. I don't think I can dig up the articles, but there's some weird quirks to LINQ to SQL and IEnumerable&lt;T&gt; that more or less goes away by using var instead of relying on the developer to get the type right. Using var everywhere makes refactoring more straightforward, because you are less likely to have to visit some downstream declaration to change a variable type to match a changed return type. Using var consistently makes situations that require the variable be a different type than the expression both explicit and obvious, since you've either added an explicit type cast or you declared the variable's type explicitly. var isn't *dynamic* typing, so it preserve's C# static typing and all the niceties that come with being able to make assumptions about the type of value you're using. var lets me think less about what a variable needs to be, and focus more on what I need to do with it.
Thank you, good point. I will give that some thought as it makes good sense
it also helps the developer realize what should be part of the public interface (public interface does not mean 3rd party. in the onion layer model each layer is the customer of the layer it wraps around) and what should have been in another class anyways
&gt; var lets me think less about what a variable needs to be, and focus more on what I need to do with it. Interesting point. Thank you. My point about not using var is that that code should be explicit and not a guessing game. The point made in posts here about the redundancy of some declarations is valid and I get it. Having ClassName x = new ClassName(); vs var x = new ClassName(); I see, however when I see var x; //I am left thinking wtf is this? So again, thank you very much for the detailed info
You're annoyed that I can't be bothered to look up the point you are attempting to prove? Yea, no. Don't bother to reply to me, I have already blocked you.
Pretty much what this guy said.... If I can delete an interface and it doesnt break shit, it was tits on a bull. - Sorry have been deleting code for the last year, I am some what dishevelled 
I wasn't trying to prove anything just giving you the correct answer. I have given you more than enough info to work out how it is done and what the limitations of it are. Seriously stop being so lazy. If you don't want to take my answer at face value you don't have to. It's not like the documentation is a secret...
Exactly - out means the method is expected to assign a value before returning. Not hard to grasp the concept. If you've got more than two on the signature - yeah maybe you ought to look at what you're doing, and perhaps create a POCO for it. Or decompose your function as it may be trying to do too much. 
If I can delete an interface it wasn't needed... If I can delete 50 interfaces, generally the code just got a shit load easier to understand. The key here is if I can delete an interface it really wasn't needed so someone is pulling their dick and writing code for no reason. Code costs money, every single line of code that you have to maintain costs... At the end of the day complex, unnecessary, obfuscated code costs the organisation pure hard cash and generally IMHO interfaces help create unnecessary obfuscated code.
I am a pragmatic programmer, I don't use TDD all the time. But when I do it is really god damn productive. If you haven't worked that out I am sorry to say you are missing something. Good luck for you, I hope one day you work out where TDD actually works.
You can't have var x; so that's a moot point. 
See, I don't use var at all so I did not know. Thanks for the clarification
Hang on, what do the cool kids do now without mocks or stubs?
&gt; You can't get a virus from a store delivered UWP app There is only one form of delivery which cannot deliver viruses: *no* delivery.
Opposite in some ways, supporting in others. Interface first development ties up nicely with TDD because you can define an interface (the contract and thus the unit test plan), and then create the implementation while testing said implementation. e.g. I need to create an encoder that can convert a string from format X to Y. I will need the following interface (if I don't already from having other string encoder implementations). IStringEncoder { string Encode(string); } I now can safely say for the piece of functionality I am creating (a string encoder), I need a module that takes a string and returns the encoded equivalent. I now can safely say my unit test will be to have a source string, encode it, and assert the resultant string is formatted as expected. In fact, I can write the entire unit test based on the interface without writing a single line of implementation code (but of course the test would be worthless at this stage). Once this is done, I can now write an implementation for an XStringYEncoder. I can now initialize my IStringEncoder with an XStringYEncoder instance in the unit test and it should pass if the contract is satisfied.
But 0 will always be an int, it's an int.. it wouldn't be a decimal or float or anything else unless you typed 0m, 0f, 0d, (byte)0
Sorry, but in this case I just want to be explicit. It may be just my problem, but in this area I don't want to change. The value of var x = new ClassName(); //I get it, but I'm gonna have to be explicit for base types. Have a good weekend
lmao
I am not much for TDD either (I usually would manually verify and unit tests come much later if at all - I know, bad practice but it's justified in most areas because I know the design will majorly change in a short while). When you say "the refactoring step" is often left out, is this maybe an indication that the unit test wasn't a unit of functionality? It sounds like what's happening is "We want to develop high level feature X", and then a unit test is wrote for feature X rather than identifying what low level units make up feature X and making unit tests for those.
If you're writing the interface from the implementation then you're doing it wrong, you're just taking the negatives of both methods with that approach. Identify functionality -&gt; Create interface declaring expected functionality -&gt; Create implementation As far as keeping them in sync, most modern IDEs or extensions will do this for you: Create implementation class skeleton -&gt; Add " : IMyInterface", right click and implement interface -&gt; Method signatures are added Right click property name on interface -&gt; Rename -&gt; Implementation name will update too (depending on IDE)
Oh man, Microsoft has some explaining to do to you regarding Int.TryParse() and pretty much ANY CopyTo fuction regarding streams.
Lazy and efficient are two different things. Lazy creates more work down the road for the sake of less now. In the case of var, you are at supreme murcy of your IDE and itellisense. Let's say someone is looking at a class and method in a source file on bitbucket or git. They are trying what the hell "CustomerID" is because they aren't sure if it's an int, a string, or a custom class due to some weird compiling errors they are getting in a non-visual studio setting. They look it up... Oh great...: var CustomerID = CustomerInfo.GetID(); Well.... Time to find the method GetID and see what that returns... OR String CustomerID = CustonerInfo.GetID(); Well, now you know why int was not casting. Time to use Int.TryParse( out int) to fix that dumb issue a lazy programmer caused by using a string instead of an int. Etc. Var is nice scripting or in a private function. Not to be used everywhere because it's faster typing. That's lazy and lazy = waste of time.
I'd say it's more of an indication of wrong time management. "It works, so why do you want to get time to refactor?"
Wow I hope you're never on my team. "I didn't want to change" are you serious with that shit? When you join an existing team, you adapt to their conventions. Period. 
I have that excellent book as well, but WinForms data-binding is only a pale shadow of what is possible in WPF/UWP.
It's worth noting that Tuples are immutable, so there are in fact some downsides depending on how you use them.
&gt;they're fundamentally the clearest mechanism for try methods. Debatable. Maybe&lt;T&gt; is an alternative.
Well, var x; isn't actually valid. You can only use var to declare something when you are also initializing to a value at the same time, so var x = someObject.SomeMethod(someArgument); and x is the result of SomeMethod on someObject, given someArgument. If you're using Visual Studio, you can mouse over the name of SomeMethod and let Intellisense pop up the method's signature for to find out the type, or you could mouse over x and get the same thing (IIRC). I just find that, most of the time, it doesn't matter too much, even if it's not explicit from the code.
&gt;there's some weird quirks to LINQ to SQL and IEnumerable&lt;T&gt; that more or less goes away by using var instead of relying on the developer to get the type right. IEnumerable vs IQueryable, IIRC. Has to do with when the expression tree is "reified" into a sequence of values (or a sequence of requests to an SQL server in Linq To SQL)
Thank you for expressing why var often felt like a splinter to me. Using it judiciously is best.
Someone else just mentioned that "var x;" isn't valid, thanks for the confirmation. See, I don't use it so how would I know? As for the pop-up intellisense, I hear you, I really do. However I **REALLY** don't want to guess. I want to read the code line by line, not object by object. As in; "what the heck is x, let me take the time to mouse over it." But that's now I FEEL, and if others want to do that, or a company's standard is that, then I can adapt. And truly, I do appreciate the pov.
I didn't say I wouldn't change, in fact my posts state otherwise. There are patterns that I have grown accustom to over the past 20 years, and if someone has a good REASON that yea, it's my responsibility to change/adapt. Sometimes an argument is given to me as; "this is how I FEEL it should be, so YOU should change." and that's just not logical. If there is a reason, or value then yea I should change. Some of the items stated in these posts give me pause to think about my patterns, which is why I made the thread. As for ; when I join a team I HAVE to adapt to their conventions... well that's not an absolute. Their patterns could be wrong or bad. Imagine I am leading a team and you come in with a better idea and I am saying do it my way because it's my way. I'd be wrong. Just because someone is new to the team doesn't ALWAYS mean that they should adapt to the old pattern. See, we're both talking about best practices and I do appreciate what you are stating.
So what's the problem with being lazy?
&gt; var widgets = new Dictionary&lt;string, Widget&gt;(); Can I vote for C# to get a dictionary initializer syntax so I don't have to type `new Dictionary&lt;..., ...&gt;` all the time? ;)
Depends. I got into computers in the 80s as it allowed me to control drum machines and synthesizers. I could play something and then edit my bad performance or change the sound. That's good lazy, as it allowed me choices. Writing bad code, bad logic because someone is too lazy to think a process through, that's bad lazy.
I don't see how tuples fall into that 2nd category. It just gets rid of pointless work.
The posts here enlighten me to the value of the once-off situations. My concern is that **I** don't know when a function is only going to return those set of values and/or when I will only need a tuple and not a class. Maybe later the function can be refactored, but I like to think ahead. I am sure that sometimes I am wrong and wasting some time thinking ahead... Sadly, there is not going to be **ONE** pattern that always works. (drats)
How so? Immutability is an upside. Functional programming techniques have proven time and time again that they eliminate errors. out/ref parameters break that paradigm in an incredibly bad way. 
I think management where I work is maybe a bit more relaxed if that's the case. :P Usually I'd be free to do as much refactoring as I want for the ticket I'm working on unless I personally decide that there isn't much time (upcoming release) or I know it'll be a more appropriate target for refactoring whenever I start work on a different ticket.
Unfortunately then you run into the null-or-undefined problem. In a dictionary, there's 3 states for any given key: 1. Object exists in dictionary. 2. Key exists in dictionary, object is null. 3. Key does not exist in dictionary. Maybe&lt;T&gt; doesn't tell you the difference between 2 and 3. Sure it can be tested with another lookup via HasKey(), and in many cases the difference isn't meaningful. But there are those cases where it is, so a boolean value must be used somewhere in the process. Would have been so much better if C# had non-nullable types by default. I'm afraid that's only ever going to be solved with a half-measure though. 
shims and fakes, possibly? honestly, once you can do dependency injection without interfaces, you just do that. interfaces help if you need to shim out entire classes, but you very rarely need that for unit testing. maybe more for integration testing, but you could just as easily use subclasses as interfaces at that point. they both do the job of making sure you didn't forget any functions exist in your testing objects.
Unity supports C# 6 &amp; .NET 4.6. I'm not aware of any Unity book that covers C# in depth and that you could use as a programming reference, but there are plenty of introductory books. For in depth C# books I like C# in a Nutshell and Essential C#. 
What is your favorite keyword? Also, this is what /r/amathenedit is for (though this topic might not get so much attention over there)
What's most unbelievable bug you've encountered in production code? (Flair: "Knows Nothing") 
`yield` I could have posted this in /r/amathenedit, but then I'd have to give up my mod abuse powers.
Yes, and with the Fall Creators Update (finally - ugh) you can target .NET Standard 2.0 - allowing access to Database APIs such as SQLConnection.
What's your favourite access modifier? 
Around 10 years ago, back when I was a junior/idiot dev, I had some code running in ASP.NET. For whatever reason it was randomly crashing. I added some logging code and it stopped crashing, removed the logging code and it crashed again. Never knew how/why, and we left the logging code in there indefinitely. The ASP.NET site was still running up until about a year ago too.
If you need evidence, Adobe Experience Design is a UWP desktop app only available through Creative Cloud: http://www.adobe.com/products/experience-design.html
Not only can you, but you should. UWP apps are much more secure by design, and in the near future, it will be the only type of software people will want to install on Windows.
`internal protected` for sure. I think I only legitimately used it once or twice, but when I did [it felt great](https://i.imgur.com/QONVIyz.gif).
The OP needs more than an app that someone says is UWP, they need info on How To. I have ZERO problem being wrong, but something has to be more than; "Because I said so." even if that someone is me. That's all. The other person stated a point without evidence, and when I asked I got; "go look", yea, fuck off to that attitude. If I assert a point I give evidence and link to that. I would SWEAR that UWP apps had to go through the store, and if they don't have to then YEA. I'm happy to know the right answer, even if it didn't come from me.
You just package it and put it on the Internet for download. An APPX is the output of compiling a UWP app, and it installs when you double click on it. There's no need for an "installer", because that's just part of how APPXs work. An APPX contains everything you need to run a UWP app, whereas an EXE needs an installer in order to make registry changes, create shortcuts, expand files, etc. None of that is needed.
Interesting.
What language did C# copy most from?
Well, this is true of malware, but not specifically a virus. For example: Most Chrome extensions are malicious. I strongly recommend people do not use Chrome extensions, or better yet, just don't use Chrome. But, you can just remove a Chrome extension and then it's completely gone. It can't make itself unremovable, and it can't spread to other PCs. It may be spyware and adware, but it's not a virus. UWP apps are the same way. You could have an app that collects your data and sends it elsewhere in secret, and that is malware. But it can be easily removed.
I suppose the best of both worlds of C++ and Java.
 Well for once, I can't seem to find a way to access a Depth Sensor. They made it impossible to create a UWP application that could supports future USB devices, or even the ones currently in the market, since I am fairly certain that most of them don't have the specialised drivers required. So its less about hate, and more about questioning UWP design approach. Instead of making it a potential replacement for WPF, they made it a complete niche product.
Why can't Maybe&lt;T&gt; return a number value? As I imagine it, `null` absolutely *is* a valid value for an object. For your 3 states: 1. Maybe&lt;T&gt;.HasValue == true, Maybe&lt;T&gt;.Value is some object of type T 2. Maybe&lt;T&gt;.HasValue == true, Maybe&lt;T&gt;.Value == null 3. Maybe&lt;T&gt;.HasValue == false
That didn't turn out how I expected, haha. Never mind. Flair me with, err... I dunno. "Expert Beginner" maybe. ¯\_(ツ)_/¯
How do you usually deal with other languages having intellisense? I think i use it a bit too much as a crutch for figuring out what i can do with what
So I'm developing a game in C# and my class library will have many entities, classes and interfaces. What are your thoughts about using the Factory Model?
Amazing, the bug was only present if nothing was there to observe it. Shrodinger's Bug. 
Sorry, I don't understand the question. Did you accidentally a word somewhere?
Ah. I thought you were referring to the Haskell "Maybe" monad, which is functionally identical to Nullable&lt;T&gt;; where the invariant ```HasValue := Value != null``` is always true. You're proposing a new type where ```HasValue``` can have a value independent of the nullity of Value. I suppose that could work. 
Do you mean factory pattern?
What are your thoughts on .NET Core and the direction Microsoft is going?
Unfortunately due to poor administration I've had to leave.
It's a great concept for novices learning, but probably overused and/or unnecessarily applied.
What is your top least favourite programming language?
It's great, but I hope it doesn't just become yet another .NET abandonware.
What's missing from the classes under Windows.Devices.Usb to do anything you want with USB?
The UWP sandbox is not impenetrable. There have been multiple security fixes related to sandbox escape allowing apps to access any system level permissions.
 return this.NationalLeagueTeams().SingleOrDefault(t =&gt; t.Name.Equals(teamName, StringComparison.OrdinalIgnoreCase));
I think he means how do you find working with other languages that have piss poor IDE support and therefore terrible intellisense-like functionality.
I'm not comparing team names. I'm returning whether or not two teams are in the same division (East, Central or West)
XAML. It seems like you have to know the magic way of putting the unrelated jigsaw pieces together that fit in the most unintuitive and confusing way possible.
Okay, I get that. Thanks.
"cars can't go into reverse" "Sure they can, check the manual on how to change gears" "Do you have any proof?" "Yeah, it's in the manual. I don't have the page number, can't you just check the table of contents at the beginning" "BURDEN OF PROOF! REEEEEEE"
This is not what I was hoping you'd reply with! I was hoping you'd say for example Java so I could then edit mine to "What language do you prefer over C#?" &gt;:(
These are typically known as https://en.wikipedia.org/wiki/Heisenbug
These are typically known as https://en.wikipedia.org/wiki/Heisenbug
hm, you can use Kinect with UWP. Also, maybe you can load DLLs now, as System.Reflection.Assembly.LoadFile(); is there on Fall Creators Update (it's part of .NET Standard 2). Anyway, you always could do that, it would just not pass store certification. 
&gt; If I assert a point I give evidence and link to that. I would SWEAR that UWP apps had to go through the store Actually it seems like the only "evidence" of your assertion thus far has been you swear it with 0 links to prove it.
Java is boring. (Fixed my answer btw)
Didn’t turn out as good as expected but oh well Flair: Recovering PHP Victim
They are not in fact the HasKey/GetValue up there is making two ContainsKey calls, and wouldn’t work in a MT solution
There is no full recovery from PHP.
What would I mark a method in an abstract if I didn’t want the class inheriting to override?
Nothing at all; it's like that by default.
If you were tasked to make ant species API/website available for free to the public would you store all the data encrypted or plaintext? Would encryption even be necessary if the data was freely available? (Flair requested: 50 years of C# experience)
 I can't even get the Depth sensor to be visible under Windows.Devices.Usb and in any case this doesn't really help them with being accessible using OpenNI. With kinect is would be propably possible, but limiting it so much isn't really the answer. 
Uhhhh... Sorry but that’s not correct. 
[removed]
At the risk of exposing my dumb-dumbness, maybe I misunderstood the question: public abstract class BaseClass { public void CantOverride() { } }
A method in an abstract class will not be overridden in the subclass by default, unless that was also an abstract method (which wasn't specified)
1. GetTeamByName is comparing two strings. 2. IEnumberable is your friend learn it well. 3. You could have solved your issue by using FirstOrDefault in this method as well. Unlike SingleOrDefault it FoD doesn’t throw an exception. 
You can still override with “new” on the method. Use “sealed” to disallow anything. 
That's good, at least the next hackers will have trouble reading it.
Correct, I said something, there are those who say I am wrong, which is fine. (really!) But it can't be MY way just because I say so, nor anyone elses just because they say so. Stating: "look it up in the documentation" is so vague as to say; "look it up online" and basically worthless. I did provide, last night, a link on how to get around the issue I THOUGHT I knew, so as to give OP something. But let's play it this way; "If I am wrong, there is NO way for me to prove I am wrong." If there is a way, and I **SHOULD** be looking into "distributing APPX" as another person here posted, but I have had other concerns today. Not a cop-out, simply a statement of **I** have not taken the time when someone gave me something SPECIFIC to research, as opposed to; "look it up". A clue, a link, something is all we should offer each person looking for info. I made a couple of UWP apps last year and then moved into VR, so YEA my experience is minimal and no one should take just my word for it.
I think you missed your reply target. And sorry for misunderstanding the question. Fun fact, I've never used the `sealed` keyword on a method before.
Of course there are job available in the market. But of course the devil is in the details. Your location will dictate the desire for the skill set. In Dallas there’s a ton of jobs for .net developers, and has been for a long time. In other areas of the country it could be java or something else. Start looking at Indeed/monster/etc to get a feel for the demand in your area. Once you understand the demand start looking into different fields. Are you interested in healthcare, financial, or oil/gas/energy fields? Houston has a high desire or geologist/software engineer s, Dallas financial and healthcare. Healthcare has government mandated overheads HIPPA, etc that the other two don’t, so keep that in mind. Healthcare tends to be more long term and stable, the energy sector fluctuates based on gas prices, with financial somewhere in between. 
I’ve been doing this for a long time and I’ve never used it. I think MS put it in there just to fuck with devs in interviews. 
Side story. A relative of mine, working for the government (IIRC, in some IT department), had her password emailed to her "encrypted". The instructions for decrypting it was basically selecting the "encrypted" text, and switching the font from wingdings to Times New Roman. She was not impressed.
What’s the difference between a regular button and radio button ? 
Clearly I don’t know how to use Reddit Mobile. Delete my non-sense if needed. 
..and to make my point on WHY I thought what I did, here is a link to a MS page that states that apps are to be uploaded OR they can be side loaded [link](https://docs.microsoft.com/en-us/windows/uwp/packaging/packaging-uwp-apps) I believe this is what I posted yesterday. The statement of side loading gave me the IMPRESSION that what I had previously known to still be true. That does not mean I AM right, only what I inferred from the info I gathered yesterday and last year. Can I be wrong? **OF COURSE** Am I? No one has GIVEN me that info, so I have to go look for it. That's kinda sucky comunication... but hey, someone did say APPX and I can go look with that (as I stated in the other post) I am ONLY saying; "Go look it up" is just not of value. We all need more info than that. Have a good evening
I guess I don't know how to get into .NET when the colleges don't seem to teach it. They focus on general C++, as far as I can tell. So is .NET all self taught? I really don't know anything about the path.
If we're in story time... When I was working in the military they passed around excel documents of people's PII all the time. It was stupidly standard practice and really the only way to uniquely identify anyone was with their SSN. Anyways, for some reason I cannot remember now I needed the document dump for our squadron (~200 people). I specifically stated I did not need the SSNs (and a host of other PII). The excel document I got from the lady was absolutely massive. Far bigger than I expected. So I go digging into it to find out why... and come to realize that it was the full data dump for the entire base (10000+ people) with everyone not in my squadron having their row 'hidden' and the columns I said I didn't need 'hidden.' [Contacted the lady to let her know this and come to find out thats been her goto way to sanitize excel documents for years. ](https://media.giphy.com/media/mHjBdBZuqBvJC/giphy.gif)
Generally, a regular one is for an action, the other is for selection. As an aside, if you're my boss, you like to style them in the most confusing way possible.
I got asked in an interview how many lines of code was "right" for a method. What's your limit for that? (flair: Usually wrong) 
This one's my favorite.
Thanks, I understand. From the sounds of it Find, SingleOrDefault, FirstOrDefault have their own use cases. I will be making heavy use of IEnumberable and Lists in my project.
God fucking damnit. Double-wammy with the SSN identification. Had a client that would send us confidential, customer private information to us and we would generate some reporting for them. As per _their_ security policies (which were fine), we setup a local secure site for them to transfer the data over HTTPS, and zip _encrypted_ (using 3rd party encryption). That's all well and good. They proceed to send the data, via email, unencrypted, unzipped, as Excel and txt files. I wish I could say it only happened the one time.
'most' people don't run windows 10, and especially businesses don't run windows 10 (yet). A typical LoB desktop app is better off with WPF. 
And even if it's a method result, a quick mouse over will tell you the type. 
Sounds like a job for a custom rule on their email server to catch those emails and return a 'bad dog, &lt;smacks snout&gt;' return email before it ever leaves their environment.
Yes it is.
That's not overriding, that's hiding.
What are you commenting on? :p If you're replying to something specific, use the "reply" link, otherwise it just ends up here and people won't know what you're talking about.
New does not override, it hides. There's a big difference.
How do you declare a 64 bit floating point variable used to measure penetration?
Fair enough. 
In my experience, exactly 21393 lines. This exists in my production code. It was not auto-generated code. https://www.youtube.com/watch?v=RkEXGgdqMz8&amp;t=56
Fair enough. 
Good point. I guess when it comes to refactoring, the more a tuple return type is used, the more work it is to refactor. Whereas a class return type only needs to be refactored in the places the particular field is accessed. 
I’m dumb. I found the stupid button to reply. I literally ruined this thread that I thought was pretty cool. This is what happens when some old dad stops lurking. 😜
`long penetration` -------------- /r/me_irl
I've used hiding it in some very niche circumstances to clean up and make some APIs more typesafe. But purely for internal use and selected circumstances. In that sense, it was a pretty great use of the feature and possibly it's intended usage. I agree though that its misuse isn't ideal.
what are you missing in c# that other languages have?
Don't worry, no harm done, and you'll get used to it.
You could do: (bool success, CheapType result) cheap; (bool success, ExpensiveType result) expensive; if((cheap = cheapParser.Parse(obj)).success) { } else if((expensive = expensiveParser.Parse(obj)).sucesss) { } else { } Not quite as nice as being able to declare the variable in the if-statement, but about as compact as the out-example.
Records.
I don't necessarily agree that they're by default the clearest mechanism. It seems equally likely that they were used by necessity as the ValueTuple type is fairly new, and the previous Tuple type was not particularly user friendly
Vinyl obviously
That's a 64 bit integer type, not floating point, but I'll do what I can with it...
Wow. You set me up good too. In my defense, I'm an idiot.
For some reason this reminds me of a nifty feature of Java that C# is sadly lacking: methods in enums. Would be nice to be able to have methods/properties in enums so you don't have to use the "static readonly properties" hack just because your enumerated values aren't simplistic...
Yep, my question for `double penetration` was going to be "What's your favorite kind of porn?" ;)
Having to go back and mock a database model that was never set up for it is a giant PITA too.
To further my point, I could be wrong. What I am talking about here, basically, is the allocation/cost of time. A Tuple is quick and if there is likely to be no reason to change that in the near future, if a quick thought says the small price I pay now is worth the POTENTIAL changes later, then I get the value. It's about knowing when something is of what level of value. This is why I tend to be programmatically pessimistic. ie: "What is the worse that could happen? If I just do this now, because this is not likely to change." Then I get the value. If it's done now because it's the quick/easy solution. RunAway! I have seen too much quick/dirty to last a lifetime, but that's just me. 
When should I use the `yield` keyword? Also I'd like to be `LINQ - God of queries`
I always disliked that idea. I believe in reading code as if it where a phrase, sentence, etc and if I have to stop to find out what a "word" is then the code becomes so much more hard to read. Which is why I developed [my variation](http://www.blissgig.com/default.aspx?id=17) of the Hungarian Convention SO long ago. It made the code easier for me to read. But yea, if I am being redundant... there is no real value, that I can think of, in doing that. So for everyone here who has made that point, thank you.
Whenever you can! It's my favourite!
I avoid SingleOrDefault like the plague - it's an assumption that results in exceptions being thrown when the assumption is false. You can check for .Any(t =&gt; t.X == value) before SingleOrDefault, but then you're checking the list twice, which isn't good for performance. I'd much rather use: var result = collection.FirstOrDefault(t =&gt; t.X == value) if (result != null) { //... } 
What's the biggest development team you have worked on? Were some in the group not living up to expectations, or did everyone just do their best to get the job done? 
What's your least favorite keyword?
Only very small, 3-4 including myself. Everyone does their best. Management, as always, is the most frustrating.
I have some questions about your assertions (no pun intended) &gt; I now can safely say for the piece of functionality I am creating (a string encoder), I need a module that takes a string and returns the encoded equivalent. How does using an interface make it safer? &gt; I now can safely say my unit test will be to have a source string, encode it, and assert the resultant string is formatted as expected. In fact, I can write the entire unit test based on the interface without writing a single line of implementation code (but of course the test would be worthless at this stage). These 2 sentences seem to be contradictory. How can you assert that the resultant string is formatted as expected, when there's no implementation yet? I get how an interface can let you switch out at runtime which encoder you want to use, but how does this help you with unit testing? Wouldn't you want to just target the concrete implementation to verify that the encoding algorithms for each encoder produces the expected results. 
[`from`](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/from-clause)
you don't ever assign it. search for discountAmount = (note, when you find it, it has to be BEFORE you use it.)
Local variables arent initialized. You need to assign it a value beforehand. IE: decimal discountLabel = 0; Member variables *are* initialized though (direct fields of an object) 
&gt; 51393 lines With that much coke you ought to be hand-compiling your code.
rip
Oh okay. That helped and it doesn't give me an error anymore. Thanks! c:
Alright, that worked and the error is gone. Thank you for the tip! c:
"If you would write an OS from scratch, what language would you use?" ?
Bruh
no problem! 
Basically that, im somewhat new to programming and feel spoiled by vs
I'll clarify 1 part first - I think it fits together well with TDD as far as workflow is concerned, I don't think what I've wrote above is any reason to definitely choose TDD or interfaces. 1) Wording here wasn't the best. Using an interface doesn't make it safer. Starting out by writing the contract can be useful because it prevents you from thinking about the implementation and instead you think about the inputs and outputs to a module. An interface is not necessary here. I could equally write the concrete class (complete with method signatures) and leave the methods with no contained statements. The main point I'm trying to make here is that you think about the ins and outs of a system without the internals, which gives you a blueprint for the next part of development. 2) The test using the interface would not pass (if it even compiles) at that point. The unit test could be wrote (and would fail) based on the contract. The point I was trying to make there is that if you know what the input and output of a system is, you should be able to write the test for that module (whether or not the module works as intended yet) because you know exactly what call is being tested. Also, in that scenario I was also assuming a first implementation: - Design unit X - Identify inputs and outputs to X - Write interface - Create unit test - Create/update concrete implementation - Run test to see if it passes (repeat this step and the previous step until it passes) - Receive requirement for new implementation - Create test almost identical to previous implementation test (likely changing only the assertion and the initialisation) - Etc. One last time though - I don't personally do this, I was just pointing out how coding to interfaces can help influence the developers workflow when it comes to TDD.
How many times have you actually needed to write a Fibonacci algorithm for C# production code?
I have a massive list of customers classes; assuming the fields exist, how do I use linq to find a collection of those within 'distance' of ten, that I 'usedBefore' and then have those results ordered by 'price' and 'quality'? Flair: 'causes segfaults'
Why does this example https://netmq.readthedocs.io/en/latest/transports/#pgm using (var pub = new PublisherSocket()) using (var sub1 = new SubscriberSocket()) using (var sub2 = new SubscriberSocket()) Not compile?
Some people might answer with [goto](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/goto)
Literally, zero.
¯\\\_(ツ)_/¯ ------------- Serious answer though, have you tried using jQuery?
LINQ’s FirstOrDefault() method is basically the same as the Find() method on List&lt;T&gt;. Just FWIW.
You need a body for the last `using` block. Also, be sure to include `using NetMQ` and `using NetMQ.Sockets` directives.
In those cases where I want to have tests for a private method, I make it internal and add an `InternalsVisibleTo` to allow the test project to access it.
Pretty sure a lot of people who are _old_ to programming feel spoiled by VS too. Trust me, you aren't missing out on anything.
Serious content - we had a similar problem in some C++ code from a firm we acquired. They had written a 50,000 line switch statement[0]. The only way it compiled was after a clean boot of the computer, and then it wasn't guaranteed. We told them to refactor it, so they split it into two 25,000 line switch statements. An improvement .. the compiler no longer barfed .. but not exactly what we meant. [0] "It just got bigger over time" 
This question requires you to answer in the form of a question like in Jeopardy: "Every object in c# must be an instance of this OO construct"
I'm trying to remember, what was it called when you build a parent class, and then build a child class off of it. The child class can do anything its parent can do, but you can add functionality to the child. Or if you change anything in the parent, the child automatically gets the new changes too.
Oi, what were they switching on? Every possible 16bit integer value? Serious content - Reminds me of back when I was ~~young and stupid~~ a junior dev, I had a similar issue a couple times in Flash ActionScript. I'd run into an error complaining about some "32k" limit because the class/method was absurdly large. My solution was, of course, to break up the class/methods into two separate classes.
Inheritance.
What is `System.Object`?
Also, your if statements should be before the calculation, but after the declaration, otherwise your calculation will always use the default of 0.
I guess I don't even have to change the original text :)
Was there some async code happening? I'm guessing you had a race condition. The code where you had the logs was winning the race which caused the bug. Log statements are generally slow, so adding them in caused your code to slow down giving you the desired functionality. 
Ha e you tried to XML serialize into string?
&gt; One last time though - I don't personally do this, I was just pointing out how coding to interfaces can help influence the developers workflow when it comes to TDD. ah, ok, got it ... thank you for clarifying. If one were to do TDD, I think it would be useful to apply it against the unit (encoder in this example)...
How often should I be using interfaces?
As often as they bring you value.
Oh, alright! That's good to know. Thank you very much once again! :D
Question 1. What is the most basic thing to understand about Coding in general?
Question 2. How do i start coding? i see things like Using System, and weird phrases, but what do they mean?
Question 3. what is a syntax? is it just like A, B = C? Or is it just like A, B, C and that makes something happen?
l
Well, shoot
These are incredibly vague/wide ranging questions. Just pick a tutorial and start working through it and google terms you don't understand. /r/csharp's sidebar and pinned thread contain various links to get you started.
Damn, thats vague? i thought that would be a little too much lol
It was a message-based system, and rather than putting the implementation of each received message off in it's own class, most of it was inside each case statement. So it really inflated the line count.
Removed: Rule 4. As tweq said, these aren't ideal questions to ask. Best to dive in with the various learning resources available here. You can also check out /r/learnprogramming and their resources/help. If you do run into specific C# questions, as long as they don't violate Rule 4, feel free to ask. But do attempt to do some research and make an attempt before asking.
Sorry, im just confused about everything, i just wanted to ask questions to see if it would make something click in my head, but oh well.
Syntax is the basic rules of the language. To make an analogy with English, we expect sentences to end with a punctuation mark, first letters to be capitalized, and possessive words (usually) are suffixed with 's. C# has rules like, statements/lines ending with a semi-colon, code blocks wrapped with curly braces, invoking methods using parenthesis.
Dive into the learning resources in the sidebar, google, /r/learnprogramming, or grab an introduction to C# programming book and work your way through it. They'll teach these aspects bit by bit.
It's ok. Like we said, there's a plethora of learning resources and tutorials out there. Dive in!
OOOHH, so its like a Proper coding sentence
Yes, exactly. They're the grammatical rules you follow in order for the computer (compiler) to understand what you want it to do.
Wow, i feel dumb, i have a feeling im going to have that feeling alot when learning to code, am i haha.
Hah, don't worry about it. You'll run into a few "aha!" moments as you learn I'm sure. Everyone has to learn what these concepts are for the first time at some point.
Can be done with the `IsEnabled` property.
Yes of course, this made me very excited, im going to get a good night sleep and go at it again tomorrow. Im excited.
Removed: Rule 4.
I didn't intend to come into this thread and learn anything new but hot damn if I didn't just. Finally having a name for this is wonderful.
I did use the Enabled and set the button to false but the buttons are still not disabled, why could they not be disabling ?
Tell us how you feel about out parameters... Flair: CLR Novice
They're fine, if _out_dated.
The issue is when T is a primitive type, which happens all the time. You're now boxing and unboxing your type every single time you perform this check completely unnecessarily. If you're iterating over a large number of items that's a huge performance hit. 
What do you mean? If T is primitive (eg. Maybe&lt;int&gt;) then Maybe&lt;int&gt;.Value is of type int (no boxing?) 
Sure, but your example is that of an extremely sophisticated exploit done for a competition, likely comparable to a nation-state level attack in it's complexity. Compared to hacking your PC through a conventional Win32 app, you're talking about an *extremely* unlikely scenario.
What is dependency injection? Explain in layman’s terms.
What is dependency injection? Explain in layman’s terms.
What is dependency injection? Explain in layman’s terms.
from is actually terrible. Agree.
`IEnumerable&lt;T&gt;` is what you return when the intent of your method is to return a collection/array that's going to be iterated over.
I disagree with your viewpoints on var.. I mainly use it because it is adaptable down the road when you refactor code. But yah, I do use Intellisense when I need to look it up, so I see where you're coming from there..
&gt; Immutability is an upside. For sure!
lol.. hope he's okay though really.
Flair: Works on my Box. When is the best time to deploy to production environments?
The maybe is a box, and if you're going to have sane semantics in terms of null you're probably going to box the value too. As to implementing your own maybe, that's just about the worst idea possible. 
I like balls. I can throw them, bounce them, catch them. Any kind of balls; I don't even want to know what kind of balls they are. But I don't want to get my own balls. I let someone else get the balls for me.
Yes.
Omg are you me from the future?!? I've been having this very situation in a server app I've been writing to manage some embedded devices over a network.
We make all our LoB applications in UWP and have for around 9 months or so. We have ported them all over from WPF to the new modern API's and now distribute via a enterprise store via the windows store. Its actually really elegant.
Laughing at yourself I take it?
While technically true I am sure you would agree that the store delivery method combined with the UWP sandbox is 1000's of times more secure than legacy applications.
What do you think makes code "good"?
&gt;The maybe is a box I'm not sure what you mean by "a box", then. Generally "boxing" refers to converting an object to/from a base type or interface. Using a generic parameter allows you to store the value/object in a field of its own type (so there's no boxing or conversion) &gt;if you're going to have sane semantics in terms of null Only if the type is nullable. That's why it's a generic. &gt;As to implementing your own maybe, that's just about the worst idea possible. Why? It's not like it's a particularly complex pattern. Next you'll be telling me that imementing the Singleton pattern is a bad idea.
Readability, maintainability, and expressiveness.
Yes, you're converting from a base type to an object that stores the value of the base type and back. What do you think your maybe is? It's an object storing the primitive type. If it's a struct it's passed by value so it's even worse. Maybe is one of those things that only really makes sense as a part of the language. It's got a lot of semantic edge cases that have to be handled. I doubt you've handled ten percent of them, at which point it's just something to trip people up. Don't call it maybe unless you're going to do it properly. You've decreased performance, made it more fragile and complicated and you haven't actually solved any of the complexity that try with an put introduces. All because you don't like the syntax of out?
&gt;If it's a struct it's passed by value so it's even worse. I dount an extra 4 bytes is going to make a big difference in practice &gt;You've decreased performance, [citation needed] &gt;you haven't actually solved any of the complexity that try with an put introduces. All because you don't like the syntax of out? I find the ”bool TryGet(out value)" syntax both awkward to use and to write, although "out var val" is a bit nicer.
You've done an extra 2 allocations and deallocations every time you create that structure. That's a performance hit. 
Is it better to use LINQ rather than just Command Objects? For example, I have this Command Object code: //Insert row into TableJoin table SqlCommand cmdTableInsert = new SqlCommand(); cmdTableInsert.CommandType = System.Data.CommandType.Text; cmdTableInsert.CommandText = "INSERT INTO Table1 (thisID, thatID)" + "VALUES (@qryThisID, @qryThatID)"; cmdTableInsert.Parameters.AddWithValue("@qryThisID", qryThisID); cmdTableInsert.Parameters.AddWithValue("@qryThatID", qryThatID); cmdTableInsert.Connection = conn; cmdTableInsert.ExecuteNonQuery(); Would the LINQ equivalent be just as fast or would there be a noticeable difference in speed?
What's this sub about? Flair: Level 64 programmer
I’m a student in second year, I already know C, C++, Python, and Java, should I start learning C# now or wait sometime? Also since it’s mainly OOP like Java, will it be easier for me to learn it?
That's great, but if your company doesn't run windows 10, or that customers of your software don't run windows 10, UWP is a no-go. I also don't really understand what's elegant of having to distribute software through the windows store. An app that's used internally shouldn't be needing any windows store to get distributed, windows domains have proper mechanisms for installing software on the go without them
Yes.
She doesn’t say the same
Do you live outside of USA? Is the decimal separator a point or a comma, or... If this is the case you either have to replace the point with whatever is your decimal separator or change the culture var d = Convert.ToDecimal("1.2345", new CultureInfo("en-US")); 
You may not understand how a private store works on the windows store. Basically you get your own organization and/or user group tabs at the top of the store homepage and you can use Group Policy to remove the default tabs of the store so it just shows your companies tabs and in each tab is all the applications that you as a user have access to. Based on your permissions etc... We have 12 internal apps that are all distributed using this method. It handles permissions quite well, and automatically updates all the applications with zero effort. And it lets the user install applications that he has the permissions for without needing any sort of admin privileges and without getting malware etc... Also another benefit is that you can add non internal applications to the company "store". We have 25 licenses for Paint.net via this method for instance that can be installed by our employees if and when they need it. Also remember that you don't *have* to distribute these applications via the store. You can also use the automatically generated installer or build your own.
The pedantic me differentiates between &gt; You can't get a virus from a store delivered UWP app. and &gt; It's *extremely* unlikely to get a virus from a store delivered UWP app.
Works on my machine is the Dev motto. Come over to my QA machine and I’ll show you the reality. 
HEY! I wasn't sure if other people did this I set up custom transport rules at a credit union that pattern matched SSN credit card numbers and our newer account number format (our old ones were terrible sometimes being just the members SSN). We could get our e-com people to stop emailing PII no matter how many times we told them or how many tools we provided them to do it another way. 
I know you've found a fix, but I wanted to explain two crucial things that will cause you endless grief if you don't fix them at this point in your learning: - Each statement within a method generally happens in order. There's no point doing the line that starts with `totalWithDiscount = ...` until *after* your multiple `if` statements, because the `discountAmount` variable needs to be set *before* you do your calculation. **This is a really crucial point - if you don't get this, you're going to struggle!** - Even just swapping the order around wouldn't work in this case, because although *you* might know that the variable has been set, the *compiler* might not know. Consider this: int a = &lt;some number&gt;, b; if (a &lt; 0) { b = 0; } else if (a &gt;= 0) { b = 1; } int c = b; // Gives an error because b is not assigned You and I both know that one or the other of the `b=...` statements *has* to run, because either `a &lt; 0` or `a &gt;= 0` *must* be true. But the compiler doesn't know that. The compiler will consider that, after the `if/else if`, b is not defined, because it believes there may be a case where neither the `if` or the `else if` will run. To fix this, the best thing is to change the `else if` to `else`. This makes it clear to the compiler (and also to anyone else who's reading your code) that one or the other block *must* run, because that's what `else` on its own means. The other option is to do what /u/joshjje suggested and initialise it to 0 - that's the better option for a default value if the `if` statements aren't intended to always have an option that runs. Good luck!
whats your opinion of .net core?
I dont think we deserve that criticism. Lloyd went to far in an already offtopic gender politics discussion. Since he went to far in a lot of other situations too, he got demoted. Not even banned. There is no poor administration involved. Everything was well thinked through. But the fact that you talk about us in this manner after staying with us for MONTHS and even publicly saying that you think we´re a great community is kind of disappointing. I wasnt involved in this whole thing, but reading this, i can totally get why black and obsi decided to demote you. You had the chance to talk to me all the time if you had the courage, you know for a fact that I listen to people that feel treated unfair. Did you do it? No. And then i have to read how you bullshit-talk us on reddit. Appreciated, mate. 
Laughing at you for being a shill and believing that a shitty uwp app designed for phones and xbox is somehow equivalent to a traditional desktop application.
Haha the bullshit is strong with you.
QA and DEV thinking each other are wrong since 1957
I would expect VS to use system settings first, did you try that?
No.
Back in uni (almost 15 years ago) I learned C++ to a basic-intermediate level, done nothing since. How should I start again? Basic tutorials are too easy to keep me engaged, I understand variables, loops, objects inheritance etc, but never tied them together in a real project. More advanced tutorials are too hard, its been a very long time!
I don't feel spoiled, I feel like everyone should have the same level of IDE.
If I join John Carmack's team, then yes. If I join Joe Blow's team and Joe Blow doesn't know what he's talking about, then not necessarily. Often, you'll find the entire team might feel a different way and it's just Joe Blow who is the problem.
https://msdn.microsoft.com/en-us/library/dn237345.aspx The Map Mode is great
You don't need to rely on college degrees in order to get a job in software development. You can teach yourself the skills required. Just make projects and put them on bitbucket/GitHub. It also shows that you can learn like you would on the iob.
Keep thinking that shill.
Oh absolutely there is, see the retard who keeps replying to me. He's some kind of shill.
Advantages and disadvantages of using lambda expressions? 
Removed: Rule 4. You'll need to dive in and start making an attempt. Probably a good starting point you can look into converting each letter of the string to a `char`. With that, you can convert it to an integer, do whatever Afinne Cipher math you want to "encrypt" it, then convert it back to a character. For example: string input = "text"; string output = ""; foreach(char letter in input) { int letterNumber = (int)letter; letterNumber = letterNumber + 1; //Afinne Cipher math char encryptedLetter = (char)letterNumber; output = output + encryptedLetter; } Console.WriteLine(output); //outputs "ufyu" To decrypt it, do basically the same thing but reverse the math.
Yes, dive in using LINQ instead. If you do it right, there should be no meaningful impact of speed. Can't comment on using it with dynamic GUIs because I've never tried; I separate my database access and UI concerns.
C#. Except on April 1st when it's about /u/angularbeginner.
Sure, dive in whenever you like. It borrows many similar concepts from those languages.
It's great, but has room for improvement.
Most importantly, find a subject/program area that interests you. Ideally something that will be useful for you. Start with that and the learning resources will just be a tool, not a burden.
/r/unexpectedcommunism
Advantages: yes. Disadvantages: no.
I recently had a reverse Heisenberg in an Android app I was writing for a class assignment. The app itself ran perfectly well *until I set a breakpoint* inside a method that had a switch nested inside an if. No breakpoint, app runs flawlessly. Set breakpoint on any case, app reliably crashes. Perfectly valid code, no apparent bugs. I still don't understand. 
As another student (web design with a side order of dev), do learn C#. Lots of .net jobs out there from what I hear, at least in my area (MI). I started with C# and then got the basics of PHP; now I'm taking a mobile app course and learning Java/Android. The switch to C# should be pretty trivial for you. There are some differences, of course, but much of Java as Android uses it has been fairly familiar to me so far, even after a couple years away from C#. From what I've seen, the differences between Java and C# are largely matters of syntax, at least at the level I'm learning. I'm sure there are greater differences as you delve deeper into it, but you really shouldn't have trouble with C# if you already know Java.
Thanks for posting!
Yes, smells like a decimal separator issue - try out this culture specific overload: Convert.ToDecimal(lblLat.Text, new System.Globalization.CultureInfo("en-US"));
&gt; I don't like doing == comparison for strings ;) Found the Java dev
Do you think there is a Sub Reddit that would allow me to ask questions like these? for example on this website on at this point - http://www.learncs.org/en/Arrays - but do the first and second example do the same thing? like i with it explained more.
I had a plugin at one point that made the scrollbar wider. Forget the name though. 
Right click on the scroll bar. There are some options there to change the style. Like you want to see code outline there, that's how.
I think this approach is going to fall apart with EF Migrations. Can anyone confirm?
Lots of resources at /r/learnprogramming. They might be open to answering questions you have.
In visual studio 2017 at least, refactoring code without var is just as easy. But I can see your point there as well.
It looks like the right one has ReSharper enabled, and left doesn't. As you can see the file status icon (Green box) at the top of the scroll bar of the right one. Try Disabling Resharper, and restarting VS
And that's why "pedantic" is generally considered a negative trait. ;) The highlight point is, UWP is drastically safer than not-UWP, and that developers should lean in favor of UWP where practical/possible.
On a Mac you can write C# with Visual Studio Code or Visual Studio for Mac and run it with .NET Core.
Do I have to pay for that?
Dual boot into windows would be my suggestion instead of trying to hackintosh it in. Thats what I did when I was at a job that exclusively coded C# for windows desktops but my manager in his infinite wisdom decided we needed MacBook Pros because he was a disciple of Apple.
just edited my comment to include that. Everything except Rider is free.
What the fudge! I did not know it was free. I just downloaded Xamarin (I believe). But how come it's free when I saw something like this? https://www.visualstudio.com/vs/pricing/
Did you use BootCamp or VMs?
I often use Rider or VS Code or use Windows trough parallels(if the project is using winforms/otherwise relies on Windows)
Should I switch to Windows to lessen the complication? I haven't tried Parallels.
EF migrations are not enough if you work with procedures and views.
I don't have audio right now so pardon my question, but why would you combine EF migrations with SSDT? The latter is a far superior tool in every way (assuming you are targeting SQL Server). I've used it happily for years and VS 2017 fixed my last major pain point. 
More on ssdt https://www.infoq.com/ssdt
BootCamp iirc but this was roughly 10 years ago. It definitely wasn't a VM.
Professional and Enterprise editions have a lot of 'nice to haves,' especially in a corporate or business environment. The community editions dont have these and are free.
That's for the enterprise versions. For "students, open-source and individual developers" Visual Studio for Mac, Xamarin, and regular Visual Studio are free to use. Visual Studio Code is free no matter what I believe.
I totally recommend JetBrains Rider. Since you're a student, you can use their products for free.
Most courses don't ask you to build GUIs or access specific windows services, you should be fine on Mac. If you ever run into that situation, you just have to use windows on a virtual machine (such as Parallels), copy your app and you're good to continue.
You will have a better experience with C# on Windows, but as others have said, Microsoft does support macOS as a development environment.
Sounds like a neat idea for toddlers learning to write. I do wonder why you would target Kinect though. Surely the install base of active Kinect users is extremely small these days? Microsoft have basically disowned the technology now from what I see. Perhaps you would be better developing this for tablets, the kids could use their fingers to trace the letters on the screen. 
Does anyone have experience with putting table data into version control? Some of our tables have static data, and Database projects in Visual Studio does not support versioning the data. It would be nice to be able to synchronize db -&gt; project with Data Compare
Xamarin (purchased by Microsoft) got rebranded as Visual Studio for Mac. The paid tiers of Visual Studio have extra features and tools, but you can get by just fine with the free version, especially if it's for a course.
This is amazing. I just signed up using my university email address and it say "You are now entitled to use JetBrains products for free." But school uses Microsoft Visual Studio on Windows. Would it cause any problem if transfer files from school to my mac? Since I will use Rider for Mac?
I see. I think I just have to try it first on my mac and see if I will encounter problem.
I see. As long as I will not have any compatibility issue, then I am okay with it. Since I don't want to spend money again to buy for a new laptop (Windows) just to work with C# and other languages.
.Net Core projects will work as it’s a cross platform framework. Older (4.6 and back) won’t work on your MacBook as they are tied to windows. Might be a good idea what version of .Net your school plans to use. 
Yes, it's just for learning. But eventually, we will be creating a system as our thesis and I hope I won't encounter any issue with the free version.
I think they are using the latest version. In this case it would be compatible with my Mac?
You should really find out if they are using an older version. Ideally you’ll want .net core or (slightly less ideally) mono. Anything that’s 4.x or lower = windows. 
Okay, I will have to find out. That means I will have to get Parallels if they are using "Anything that’s 4.x or lower"?
Yes. Or bootcamp. Personally I prefer bootcamp. 
I have a Macbook Air 128GB (SSD). How will bootcamp work in terms of storage of Windows?
Just understand that a class will be focusing on .Net Framework. Not .Net Core or Mono (which is what Visual Studio for Mac uses). That means that there WILL be things that won't match your class. Yes, the language will be the same but the environment will not.
This is really a good suggestion. It may have issue with Framework as what I already heard at school but would it solve the problem if I use Boot Camp?
You really don't. Maybe&lt;T&gt; works the same as Nullable&lt;T&gt;, ie. it has a HasValue and a Value. HasValue can be true even if Value is null unless you somehow specifically implement it to not allow that.
I use c# on a macbook, let me know if you have issues. 
Put your windows on something like this: https://www.amazon.com/SanDisk-Ultra-SDCZ43-128G-GAM46-Newest-Version/dp/B01BGTG2A0/ref=sr_1_6?s=pc&amp;ie=UTF8&amp;qid=1508092046&amp;sr=1-6&amp;refinements=p_n_size_browse-bin%3A10285018011 you can leave it in.
If you are learning, or a business with less than 5 developers using it, or a business with less than 30 employees (I think it was 30), you are ok. The problem is if you need to do desktop apps, winforms or WPF, in those cases you will need visual studio for windows. In that case you could also run a virtual machine with windows, also free for student, most colleges can give you a free license, and even for visual studio enterprise versions.
What VM can you recommend?
Have you done any socket related programming? It's great fun, and you may learn something! :) 
I have been using virtualbox for almost 10 years without a problem, and is completely free.
Is it like Parallels? Like you can switch to Windows easily? Because I was already thinking of getting Parallels.
Yes, usually you can have in one desktop and swipe to the other one. It’s from Oracle, so it’s well made and maintained. Maybe the UI is uglier, but it’s free and works great.
Okay. I will try this and I hope it is seamless as Parallels.
Ah! Another good point is that is multi platform, it runs exactly the same on Linux or windows, and you can easily copy and paste a VM created on a Mac and run it on virtual box for windows or whatever. ;)
That's really nice. I just hope that when I program on Virtual Box (Windows) I won't have any compatibility issue anymore. How much RAM do you have on your Mac? It is asking me how much RAM do I allot for Virtual Box
I have a 2011 MacBook Pro with 8Gbs. I usually give the VMs between 4 and 6.
Can you debug from VM?
I can vouch for hangfire as well. Had it up and running in a matter of minutes. The only thing you have to remember is to pass in an identifier for the object, rather than the object itself. As the data could've changed (and it's possible that the tasks are executed days after being queued).
Yep, I do it all the time. 1. Create a post-deployment script. 2. Populate a temp table with the desired data. 3. Use a merger statement to update the real table to match. SSDT in VS 2017 applies post deployment scripts before adding FK constraints, so the timing works.
You can do anything, is 100% like a windows pc.
Well, if you use Boot Camp, then it's just Windows. 
I don't know about boot camp but you can always use a virtual machine with windows :) Look for either VirtualBox or VmWare Workstation 12 player. Both are free. You just need to get a copy of windows but you school/university should be able to provide that (the alternative is grab a copy of windows and crack it)
That is really cool. It is really nice that most VMs have student discount. I just have to choose which one.
VMWare I believe is not free. Though I get discount because I am a student.
They have both versions :) the player is free, however finding it can be dificult. Try this [link](https://my.vmware.com/en/web/vmware/free#desktop_end_user_computing/vmware_workstation_player/12_0)
I see. But I use a Mac. I should use their Fusion tho. 
Dev here, around 15 years exp in the MS stack — I use a MBP for my day to day work via parallels. Recently in the past two years more and more VSCode, integrating VS for Mac into my work flow, used rider preview. Overall, I find that there is a huge amount of productivity gained in going this route and a ton of possibilities — Windows acting up? Roll back to a snapshot. Want to code up a Mac or iOS app using C#? Xamarin is built into VS4M You could go this route on Windows, by using a VM - Hyper-V has gotten better but there’s still a bunch of annoyances using a laptop when Parallels works so seamlessly in comparison. 
I think, yes, I would go with VM (Parallels, VMware, or Virtual Box). Though, I’m using Macbook Air. Is this an issue? Since we know MBP is much powerful. 
Ah I see, I thought the player would run on Windows and Mac :( Fusion costs a lot... But you can give a try to VirtualBox and see if it works :) I used it in the past both on Windows host and Linux host and never had a problem.
Alright. Thank you so much. I will definitely give it a try. 
A lot of schools provide all the software that you need for free through Microsoft Imagine. I got thousands of dollars worth of software for free. You get to keep everything after you leave too. 
Thank you so much for this advice. 
It depends on the college, country and course. It is taught in colleges (including good colleges) around the world. It's a bit misleading though because when we hire graduates we don't really care if they've studied C# during their studies, we really want bright, articulate, keen. The key skill they need to develop while at college is learning how to learn. The problem with a graduate who has programming skills is, they rarely learned anything practical. It's getting better but generally the bonus you get from knowing some programming is offset by having to break the bad habits they picked up while doing so. Don't let that put you off getting a degree, it's possibly worth it depending from where and how well you do (do well or don't go). There was a study recently that showed CS degrees on average did not pay for themselves, but that is on average. You can get hired as a junior without college. You need to show the same things I listed above, the difference here is that it makes more sense to show those qualities by investing your time in programming. Good luck
Exactly. It's an assumption that, if it's wrong, denotes something you didn't foresee when you wrote the program. It's kind of the point of an exception, right?
With a VM, ram is your friend. If you only have 4 in your air, the experience isnt’t going to be so great - especially with resource hungry Visual Studio. 8GB you might be ok - there are definitely times I wish Apple offered more than 16GB max in the MBP, but it’s more Intel’s fault on that. 
I have 8GB and not sure if it is enough. Is Air upgradable to 16GB? I’m thinking of switching to rMBP. But maybe Air is okay for students. 
I concur
I found the Learn Roslyn Now series, by Josh Varty, realy usefull: https://joshvarty.wordpress.com/learn-roslyn-now/ 
Boot camp or even just a VM would be enough.
I hope VM is seamless with Macbook Air
I'm a C# dev....
&gt; I'm a C# dev It was a joke. I've people who are mainly Java devs coming to C#, and they all do comparisons with .Equals(). &gt; I'd rather explicitly state OrdinalIgnoreCase (As there are times where strings should be compared with different settings). Most of the times I do string comparisons, I expect an exact match, so == is appropriate.
What advantages does LINQ have over the code I’ve shown?
I was assuming he wanted at least something back. FirstOrDefault would be good if there is a use case for no results. I realized after I commented that this is test code anyway. Do what you want really.
Assuming we're taking about something like EntityFramework, it provides type safety, parsing/conversion, and database query construction. Nice to not have to think about SQL queries. No string literals for columns, so it minimizes duplication and makes changes easier in that sense. I would recommend any developer get their feet wet with a database abstraction layer at some point. After that, you can go further by putting database I/O into a dedicated service layer and further decouple your database from your application (if worthwhile).
Depends on the course. If it's the newer .Net Core bits, then native OSX will be fine. If it's the Windows only .Net Framework 4.X then you probably want to run a VM or similar.
I used Parallels mostly while at uni, but use Vs/Rider on Mac nowadays, as a beginner I’d recommend parallels indeed. Parallels is paid, but there are ways around that. If you like it, buy it once you’ve got a job and have the money for it (that’s what I did) 
Can u explain the title of the program (Software Estimator)? I like it how u come up with a name for a schoolassignment but it doesn't make anynsense 
Here's a 10-min video explanation of how to setup a database project: http://osmyn.com/post/How-to-create-a-Visual-Studio-2013-Database-Project-in-10-Minutes!
I use the free version professionally, we have a licence for a paid version i just couldnt be arsed hunting it down. The only thing i miss is code coverage, i really should work out how to get that again.
Thank you so much for the coding advice! I will remember to keep things in order in the code. I really appreciate it!
Oh sorry, I meant to say it was called a Software Price Estimator. Hopefully that makes sense : (
In my opinion - a developer should be minimising their assumptions, and coding defensively - attempting to foresee alternative/common scenarios such as: * A dictionary doesn't contain a specific key * A collection doesn't have the matching item being sought * A database table doesn't have a matching item being requested
How seemless do you mean? It would perform like having windows and Mac OS running at the same time, vs booting into Windows. Depending on the VM software used, copy and paste and filesharing between them works fine.
We have a B2B ecommerce app we built in-house that uses change tracking, views, and EF. For this, EF migrations work...OKish. You have to delete the changes to views when it tries to apply them as changes to your tables (that don't exist) and replace it with a SQL method call that recreates the view in question. We've since replaced big chunks of our EF code with Dapper or ADO.NET calls directly and I think I'd use SSDT or an in-house tool to manage migrations in the future if I had it to do over.
Holy shit, this is awesome. Thank you so much!
Can someone recommend a way I can version control Mongo DB?
Couple reasons come to mind, but they seem pretty niche to me: * You want tables owned by each application to be managed by EF migrations, but shared tables or replicated backend tables to be controlled by SSDT. * Your development and data modeling teams are separate for some reason and the EF Migrations are turned on just as a way to failfast and force developers to update their model to out of sync changes to the database model made by the data team. * You hate everyone involved in development and IT operations, and you have control over tooling decisions.
&gt; Assuming we're taking about something like EntityFramework I’m not using the EntityFramework, just command objects. So would the comparison still apply?
I don't have a source, but EF is the implementation of a collection of patterns that deal with object-relational impedance mismatch. Read Patterns of Enterprise Application Architecture to help understand the background of a system like EF and some alternative patterns that solve the same problems. Of course you could hide EF models inside your data layer, and I've worked on applications that do just that. Your EF models essentially become database DTOs. These days I find my applications always have an API layer which usually necessitates data contract Dtos. I try to follow the 2 Dtos rule, where if you have more than 2 sets of Dtos in your application, consider that you're doing it wrong. IMO you should embrace EF as you business logic layer, if you're going to use it. If you don't like your business logic having a massive dependency on DbContext you can abstract your data access using a Repository pattern on top. Then your business logic and tests have much more simple and predictable set of dependencies. If you don't want to embrace it, you might be better off using something more light weight like a Query Object and Dapper. That's what I've been doing lately and I love it. 
I have a bunch of articles on my blog about analyzers that may be helpful. Note that some of the tooling screenshots may be out of date, as they were written in 2015. https://johnkoerner.com/csharp/creating-your-first-code-analyzer/ https://johnkoerner.com/csharp/working-with-types-in-your-analyzer/ https://johnkoerner.com/csharp/code%20analysis/roslyn/creating-a-code-fix-that-fixes-comments/ For more, look at the archives starting in June 2015: https://johnkoerner.com/archive/
Not sure. To be honest, I've been lucky enough not to have to deal with SQL command objects in any significant capacity. So I don't know how LINQ applies to them directly. I would say that generally speaking, LINQ is a pretty useful tool to have. It's a good thing to understand and be able to leverage.
I'm having troubles learning the codebase and domain at a new job because of lack of documentation, How can I fix this / get myself up to speed?
Thank you for this. I’ll check with my school first. 
For #1, you can tell SSDT to not drop tables that it doesn't recognize. Though I would recommend a separate database on the same server. (Or would EF shit itself over cross-database joins too?)
I’m thinking of Parallels. VMware or Virtual Box. 
Okay. Thank you. I hope it is not laggy or slow. 
Probably not too late for SSDT. The only time I couldn't get it to work on a legacy database was when there were circular references between databases. EF migrations can't create anything that annoying.
That's a very interesting question that I'm kicking myself for never asking before.
This is usable. I also run VirtualBox, running Win10, on a MacBook for [my C# development](https://github.com/nazuke/SEOMacroscope). I started off on SharpDevelop, but have recently switched to the community version of MS Visual Studio (needed more 64 bit support). Make sure you have plenty of RAM on your Mac. I usually give the VM 4GB. More would be nicer. You can flip back and forth between the VM and any other application on your Mac in the same way as regular applications, it's nothing special; no dual-booting required. 
Nifty. Might need to check out SSDT more for some future projects. Only solution to #3 is to grab an old IBM keyboard by the cord and mordhau the offender?
If you're using PostgreSQL, I recommend [migra](https://github.com/djrobstep/migra). Schema diffs are the way to go.
Not sure if I can help you there. Probably best to talk to your team. Maybe asking in /r/cscareerquestions can help.
 yield break :P
That was applicable in VS 2012, Developer Essentials I think. Its now baked right into VS as of 2013, simply right click on the scroll bar to pick your preference.
OK. I’ll look up some LINQ tutorials. Thanks.
Thank you! I've been looking for something like that for ages!
Unity can run on anything
Others probably gave you an answer, but... what is the "correct format" to you?
As another guy said, "var" gets rid of the ceremony in "var x=whatever". In a **vast** majority of cases, 'x' has the type of whatever is on te right - so why write it out? "var" is also about how proficient one is in reading the code, or experienced with the codebase. Having that type on the left helps when I am not good with the codebase, but is noise/cognitive load when I am.
I love you too sweetie.
Just get a real computer bro
&gt; SingleOrDefault has the advantage of throwing an exception if more than one result comes back (if it truly is an exceptional case) and returning the default value (null for reference types) if there are none found. And the disadvantage that it's much slower. `FirstOrDefault` will stop iterating when the first matching element is found. `SingleOrDefault` has to iterate the complete enumeration to make sure at most one matching element is present. Understand the difference, be aware of advantages **and** disadvantages, then choose wisely what matches your use case most.
https://github.com/electricessence/Open.Disposable.ObjectPools New repo has multiple implementations of ObjectPools and benchmarks of performant ones. The Roslyn variation (```OptimisticArrayObjectPool```) is the winner but not by any significant margin. When allowing for an interlocked version of it (```InterlockedArrayObjectPool```) it barely loses and is almost always within the margin of error. After a lot more testing and refinement, I was surprised to see these two perform very well at higher capacities.
Can someone elaborate on pattern matching features that C# is missing compared to F#? 
List implements IEnumerable you can pass Lists to IEnumerable objects and it will work Use IEnumerable when you just want people to iterate through your list without making all of the List methods avialable for use (like .add .remove and stuff). For example when you are passing a list of objects from your model to your view in MVC then you rarely want to pass a complete List model with all its methods avialable, you just pass it as IEnumerable.
your problem is scope you are trying to assign value to totalWithNoDiscount by doing math on DiscountAmount which isint assigned yet (it has no value). Move your calculation section to the bottom of the method and it will work.
What's the difference between those VS?
The most obvious thing is tuple (or perhaps general structural) deconstruction. So you can't currently say `case (var x, 17):` or similar.
Invariant culture is probably better.
Tuples aren't immutable.
Repost: https://www.reddit.com/r/csharp/comments/6aio1x/10_visual_studio_tips_you_wish_you_knew_10_years/ And **still** a complete bullshit click-bait title.
I had a use case for tuple last week which would be a little bit painful without: An organization can have many child organizations. A user was part of an organization. I made a service that could query whether the user was part of an organization (or more importantly, if an organization was a descendant of another organization). I used MemoryCache and used a tuple for key: `(rootOrganization : IOrganization, organization : Organization)`. Simple. No helper classes needed since `ValueTuple` implements `GetHashCode` and `Equals`.
They in fact predate even the original (reference) Tuple type.
&gt; tips you wish you knew 10 years ago ... &gt; 1 . Go To (Control+Comma) VS2017 Pick one
* Install .NET https://www.microsoft.com/net/core#macos * Initialize some code * Install VS Code https://code.visualstudio.com/ then open the project folder with VS Code. Keep the wallet in your pocket! VSCode is great for PHP and Java too. just open a project and it will ask you to install appropriate plugin to support debugging etc.
I actually think the `bool TryFoo(out Foo result)` is better than returning a tuple. Simply because you can do this: if(TryFoo(out var result)) Bar(result) vs. var result = TryFoo(); if(result.success) Bar(result.value);
I must do a kinect application for this module, if there are simpler solutions for this then i would have done them already and no point in posting here. thanks for the reply though.
C# strings aren't fully Unicode aware, though, so `é == `is false, `"é".Equals("é", StringComparison.Ordinal)` is false but `"é".Equals("é", StringComparison.InvariantCulture)` is true. Here the first é is unicode character 0xe9 (LATIN SMALL LETTER E WITH ACUTE) and the second is an e (0x65) followed by character 0x0301 (COMBINING ACUTE ACCENT).
How can you label C# software developers sharing their knowledge on programming as a spam-account? 
Removed: Spam.
&gt; And still a bullshit click-bait title. Meh.... yeah the title was bad, but the points were still ok.
Removed: Rule 7, spam.
Thank you so much for this. Do you think Macbook Air with 8GB ram is sufficient for this?
Oh cool, sorry I didn't realise it was something that was assigned to you.
Active patterns, though that's mainly syntactical sugar and operator overloading. We also don't have matching on discriminated unions, but we don't have discriminated unions, so ...
If you develop a service you can use it from outside your WPF application, maybe a mobile app or a new version of your desktop app (without losing all your database queries).
And tuple matching.
u/cryo mentioned tuple decomposition, so I didn't bother. We do have guard conditions in switch cases (i. e. switch (x) { case var y when y &gt; 0: return 1; case var y when y = 0: return 0; case default: return -1; } ), though.
A real world example! Thank you VERY much (I have long worked by example instead of theory)
&gt; Having that type on the left helps when I am not good with the codebase, but is noise/cognitive load when I am. This! This is my concern. When I started development (way back when) I noticed that when I came back to **MY** code it took a bit to grasp wth I was doing. This is why I learned about naming conventions, patterns, etc to make it easier to read. Those who have mentioned that not using var makes the line redundant; ClassName x = new ClassName(): Have a valid point, and I appreciate the info. Sadly, I have spent most of the last 20 years working alone or working with others who were SO much worse. Hence the reason I ask questions like this, crowd source the question. Thank you very much
No support for .NET Standard or .NET Core.
Being in the middle of a massive port from NHibernate to web services, I say it's much better to go with the service route up front. Security for a direct database connection is difficult to get right. It's more difficult to authenticate users. And there's a greater chance of breaking things during upgrades. Services shield you from those troubles for a bit of extra code. Your data access code has to move from the application to the service. Your application just needs a bit of glue to call the service. And Visual Studio makes the task very easy.
No problem. Did it help you understand better?
Does `int.TryParse` accept string input alone, too? 
Nothing on WPF :(
I'm not sure I've ever needed to compare user strings this way. Usually, with user strings what I do is search, and depending on the system I may have a more complex library handling that already.
I'm the founder of https://keygen.sh, a software licensing and distribution API. I too thought all of the other solutions were annoying, so I've tried to make something a little bit better. :)
Well, if its a desktop app you may not want to potentially expose db keys (even though you are on your intranet), a good way to avoid this is to use WCF services or a webapi to a server that gets to securely talk with your SQL server. If I were to make a webapp (also only available via your intranet) i would definitely use EF. 
Is it supposed to be called leightweight? Gonna be honest, it hurt to read that so I didn't look past the title... Sorry :(
&gt; For some reason Ask your leader to explain the reasons and voice any concerns based on that. It might be to maintain common architecture with other apps, or to fit in with upgrade plans, or any number of things. You can't make an informed decision without the full picture.
Lack of recursion during the pattern matching (should be in C# 8). Lack of record types and union types (not directly related to pattern matching itself, but lack of these features restricts drastically the applicability of the feature).
Good point.
I know this is an old thread, but I thought I'd chime in with a solution I've been bootstrapping called https://keygen.sh. It's an easy to use JSON API for software licensing that also supports licensed product distribution. I built it because I thought licensing has notoriously been way too much of a headache to implement and almost every solution I came across looked outdated and/or for enterprise companies. Hopefully it helps some other devs out. :)
It will simply fly! My 6 yo MBP with 8gb ram works great. Haven't had to goto my desktop for weeks and I don't miss Visual Studio. 
It will simply fly! My 6 yo MBP with 8gb ram works great. Haven't had to goto my desktop for weeks and I don't miss Visual Studio. 
If you want something that just takes a string and returns and int, int.Parse() does that without any out parameters.
Hi. Do you think I should get 2016 MBP based model without touch bar or 2015 MBP
As others have said, the article you linked does not actually identify out parameters as an [anti-pattern](https://en.wikipedia.org/wiki/Anti-pattern). The article more or less says that they are dangerous because you are now working with pointers which is a difficult and error prone concept in computer programming. Moreover the article says to **Avoid** out and ref parameters, specifically when your code is going to be used by a general audience. I personally love the TryParse methods for input validation. Every once in a while I find it useful to use a ref or out param in the code I personally write.
Thanks! I'm going to have a look a this soon... 
Do we really need another RPC framework in .NET? What niche are you trying to fill?
Last week was Windows Developer day, UWP is the future, regardless how developers might be dragging their feet.
Using a service helps isolate and control security concerns too. 
If adoption is low it can't really be the future.
Quick review. Repeated issues are not repeated here. - README.md: Please don't link to homepages with advertisement for tutorials. Make use of the Wiki functionality on Github. - README.md: The first entry in the "Getting started" section is no link. - RPC.cs, #43: Avoid public static properties of mutable data structures. Make it private, or use a property if you need public access. - RPC.cs, #43: Do you really need this public? Isn't internal enough? Limit the public API. - RPC.cs, #43: You provide async API, but have a public mutable list. Lists are not thread-safe! This seems like a ticking time bomb. - RPC.cs, #121: Avoid extension methods on general system types such as `ArraySegment&lt;byte&gt;`. You likely think it's a neat API, but it just bloats the API surface of the types. - RPC.cs, #121: The method is named `IsRPC` - shouldn't it be `IsRPCMessage`? And if we follow common naming conventions it should be `IsRpcMessage`, because three-letter abbreviations are not written in caps. - RPC.cs, #124: Full blown deserialization seems like a really wasteful approach to check if something "is". What's the use case for this? If someone checks if it's an "RPC", will he immediately parse it? In that case it'll always result in double deserialization. - RPC.cs, #155 &amp; #167: Why are you returning an array and calling `ToArray`? Use lists and `ToList`, it's more efficient. Or just an `IEnumerable&lt;T&gt;`. - RPC.cs, #157-162: You can streamline this code by just writing `var tasks = binders.Select(b =&gt; b.CallAsync(functionExpression)).ToList()`. - RPCSettings.cs, #36: Static settings are an absolutely no-go. Kills the possibility for parallel unit tests immediately. Makes unit testing in general a pain in the ass. This actually counts for all static state, including the static list in RPC.cs. - RPCSettings.cs, #73 &amp; #89: Personally I'm really not fond of throwing exceptions in properties, especially not in settings classes. Instead make this whole class non-static, then accept arguments in the constructor and validate everything there. Make it immutable then. Once constructed you can be sure it's valid. - RPCSettings.cs, #73 &amp; 89: When you use `Argument*Exception`s, pass the argument name to the constructor. - Client.cs, #92: Do absolutely not re-throw exceptions like this! You lose the entire original call stack. If you want to throw an exception on, write `throw;`, not `throw ex;`. If you explicitly want a new call-stack, create a new exception and pass `ex` to the constructor for the `InnerException`. - Connection.cs, #139: You provide an async API, and then do the worst: You block. Wtf? Use `await`! Don't write blocking code in async API! - Connection.cs, #136: This method, and many other methods, are very large. Split them up, make them smaller. - Connection.cs, #170: Don't use `Debug.WriteLine` or `Console.WriteLine` in your library. Things like this make me immediately remove the library. Don't pollute the output with your information that I likely do not want. Instead provide a logging interface (or use a common one) and let me pass my logger, if I need logs. - Connection.cs, #180: What bollocks is this? Why are you throwing valuable exception information away? No way should you just generally use the most inner exception. This is just nasty. - Helper.cs, #34: "Helper" is generally a code-smell word that says nothing. It says "*I have no frigging idea how to call this*". - Helper.cs, #42: Don't pollute the public API surface of your library with methods like this. You need it for your library, use `internal`. Don't bring more to the table than the intended functionality of your library. If everyone does this, I end up with 20 `ToString` methods in my application. - Binder.cs, #75: Since `Object` is only ever set in the constructor, you can leave away the setter completely. - BinderBase.cs, #36 &amp; #48 &amp; #60: Multiple types per file is generally code smell. I'd have only expected a `BinderBase` in this file. If I'd be looking for `IBinder`, I'd have at most looked at "Binder.cs", but never at "BinderBase.cs". - BinderBase.cs, 101: Having a class `BinderBase` that implements `IBinder`, and **also** having a `Binder` class that inherits from `BinderBase` is really weird. Why don't you remove the `Binder`, rename `BinderBase` and use it directly? Likely `Binder` does something more that `BinderBase` does not, in which case it should be reflected in the name. - LocalInvoker.cs, #61: Do not throw `Exception`. That should only be used as a base class for new exception types. Instead throw an `InvalidOperationException` or a custom one. - LocalInvoker.cs, #61: What is an "object type"? This error message is nonsensical. - LocalInvoker.cs, #64: The `DefaultIfEmpty` call is completely useless. It does nothing in this case. - LocalInvoker.cs, #73: In line #60 you forbid interfaces, now you say "*the interface must not*". Make up your mind. - LocalInvoker.cs, #85 &amp; #88: You're looking up the `functionName` twice. Instead use `TryGet` and check the return value. - LocalInvoker.cs, #98 &amp; #99 &amp; #104 &amp; #109: You're actually looking `functionName` up 6 times.. Dictionary lookups are cheap, but not THAT cheap. This is trivial to optimize: Use variables! - Messages.cs, #32: According to best practices structs should be immutable. Protects from nasty catches when someone does not realize it's a struct and tries to mutate it. - WebsocketRPC.csproj: Use the new csproj format, it's great! - You're writing a library that provides async functionality, but you never call `ConfigureAwait(false)`. You should add it to all your `await` statements. Your library should not care on which synchronization context it's being continued. - You have a lot of public methods, but never check the sanity of input arguments. Add some `null` checks and throw `ArgumentNullException` in the beginning of your method, instead of letting the user potentially run into a `NullReferenceException` somewhere in the middle of your method. - Your documentation is useless in a lot of locations. Stuff like `&lt;returns&gt;Binder.&lt;/returns&gt;` and `&lt;typeparam name="TObj"&gt;Object type.&lt;/typeparam&gt;` tells one **nothing**, you could leave it away and it would be the same (actually better). - Your documentation is consistent. For methods returning `Task` you write "*The RPC task*", but for methods returning `Task&lt;TResult[]&gt;` you write "*The collection of results*". In both cases you return a task. - You haven't written a single unit tests. While the presence of unit tests does not ensure that a library works correctly, it's still more reliable than having no tests at all. Libraries without a single automated test will never be used by me. - Why not targeting .NET Standard? 
Given that WPF doesn't get any real updates besides bug fixes, and all new APIs in Windows 10 are only available via UWP, adoption will come.
UWP failed to be the future as soon as windows 10 arrived and shifted focus back to desktop. Winforms FTW!
All new Windows 10 desktop APIs are UWP only.
That's the dying last gasp of a windows leadership that never learns trying to force it. 
That deserves some sort of gold star for effort if ever anything did!
It is when it is the only real option. WPF hasn't been really truly supported in a while. Nothing official but lack of updates should be a clear sign.
To be fair, I haven't even considered .Net Core until .Net Standard 2.0 was released and now that Framework 4.7.1 supports it. We're still happily running everything on full framework, but now that .Net Standard 2.0 contains all the APIs we need, we can start targeting it.
If you read the detail it's a leightweight weboskcets framework. I assume it's from the people who brought us berrrks. 
Does it need to fill a niche? You learn best by doing and RPC is always nuanced by connection management issues. If OP learned something, and after /u/AngularBeginner's bug post above he will have learned a butt load.
He's just mentioning that the example is wrong on the page. The posted posted non-compilable examples.
Thanks for the detailed report. I appreciate your effort; I will look into that definitely.
Is there a case where I should avoid using local functions? The only case I can currently come up with, is if you want to edit a method in ENC having a local function. I guess because the closure of the local function, I cannot introduce new variables without ENC is unable to continue. My current workaound is to step outside the method in order to edit it. 
Maybe, maybe not, if the page linked by OP is any indication. Desktop applications are last priority. I work in a WPF shop. We are not trying to get the company to shift to UWP rather we are interested in web UI and services.
And without the user accepting the proper permissions, your program is completely neutered. How many times have you had an Android or IOS app become useless, due to a user that thought they were smarter than they are, disabling everything because they think they are security conscious? UWP is cool in concept, and for a ton of applications, it is the best, but for a desktop app, especially in a commercial environment, it doesn't hold a light compared to WPF or even Winforms.
Have u debugged the code? If u did then it should have been obvious why there was an error
404
Funny throughout this journey I started working on something similar, License Management is something every commercial application needs. Why the hell do I have to keep making my own portals to manage it? I'll take a look!
Console.ReadLine(SekunderTillTid(totalAntalSekunder)); should be something like var totalAntalSekunder = Console.ReadLine(); SekunderTillTid(totalAntalSekunder); 
LOL. Actually one of the best things that I think it was right, it's the mobile permissions and I think that even Win32 should have lol. Security should be in first place, ever. 
If you've already been using Parallels, just stick with it. I use VirtualBox, but Parallels ought to work just as well. As others have said, though, C# on a Mac is not a problem, until you want to do anything using WinForms or WPF. Then you'll need to switch to Window, and Windows in virtual machine works fine.
&gt; lack of updates &gt; not supported Every single .NET since 3.0 has had WPF updates. Stop talking out of your arse.
You can call UWP API's from console applications so.
If I would run VM on Mac. Is MBP with 8GB ram and 256SSD, sufficient?
Hi. I would appreciate if you could help regarding the following: RPC.cs, #124: The library supports custom user messaging along with RPC messages. IsRpcMessage should allow a user to filter out received messages from the RPC ones. Does this make sense ? RPCSettings.cs, #36: static settings: I used them for the simplicity - nothing has to be instantiated. How can I retain the simplicity, but to improve the design ? Connection.cs, #139: A cancellation token does not support a registration of an async method, that is why I used Wait(). Is there a chance to avoid that ? Your documentation is consistent....: What doc should be appropriate ? Thank you for your effort. What do you think for the overall design (thoughts, comments) ? P.S. The context related to the library has been removed (for the time being).
I am a big proponent of using var, but your second example is the case where I would be opposed to it. To me, if it's not immediately clear what the type is, it should be explicitly stated. Just my 2 cents.
&gt; good practices in regard to Web Forms The Best Web Forms practice is not to use Web Forms.
I know, but it’s not my decision :/
Yes it has, but little ones, just a few bug fixes and high-DPI support. https://docs.microsoft.com/en-us/dotnet/framework/whats-new Lets not ilude ourselves where the wind is blowing. They might change course, as they have done so many times in the past, but judging by the recent Windows developer day, it won't change any time soon.
Probably best to refer to MSDN on this one. https://www.asp.net/web-forms/overview
Haha that's funny. So I started on Keygen after building a licensing server one too many times for various clients. Usually, in-house licensing servers end up being subpar UX-wise and don't have all the feature you need, since most projects don't have the budget for a "good" licensing server to be built, so they end up with "hacky but good enough". So I eventually sat down and wrote something that myself and other devs can utilize. Let me know if there are any features that the API is missing once you get around to checking it out!
I avoid the Parse methods like the plague. Almost always better to use TryParse, check on the result, and return an error if need be.
Follow general web and app development practices, * write as less code as possible in the code-behind, * keep business login separate, don't interact with UI element from the business logic, * if an ajax request works then don't do full page postback or very least use partial page postback. * if possible apply Post-redirect-get rule * finish the project asap and forget web-forms and never do such projects again :P
I don't have the time ATM to look through this (and probably not the expertise) but you'll find people are probably more open to helping if you put the code on github as a gist (or even start using it for source control and let people contribute?) Or there's other things that are much better for big sections of code like pastebin. This is better for people than trying to read it on Reddit and most people prefer these options to downloading a file
It is probably possible that some existing code depends on the allocations of a lambda. Surely that is a sign of bigger issues though. There might be an argument to be made to not use a local function which captures a variable inside a method that is already using lambdas that capture variables for the sake of consistency. I think the biggest argument for not using a local function instead of a lambda is because a local function cannot be declared inline as part of a larger statement like a linq statement. If I was writing something like: bool M(int x) { foreach (var c in myCollection.TakeWhile(i =&gt; !IsValid(i, x))) { ... } ... } I likely wouldn't rewrite it to use a local function...
First, you should really avoid goto... for the most part you should try to pretend that keyword never existed... but, if it works it works... As far as I can tell though, It looks like you are using Timers from the System.Windows.Forms namespace... I see a lot Timer.Enabled=true... but no timer.start() 
May just want to mention to the decision maker that Microsoft will abandon Web Forms. They might have already - just look at the VS versions the articles posted by /u/mynoduesp above. They did the same thing with Silverlight before announcing EOL not supporting it on their latest browser. I would love to help more here but as far as best practices they are all the old articles released in 2010 and before, nothing has been updated recently so you'll be looking at old websites. I just looked at some aspx pages since i have a hybrid Web Forms/MVC website and I just cringe. The main thing I have is hacks (like accessing elements by id can be a bit painful when it comes to lists) and other tricks necessary for web forms. Other than that with the back end you can use fairly normal patterns and practices. There is the [Microsoft Patterns and Practices enterprise library](https://entlib.codeplex.com/) but I found that to be a bit bulky for anything besides huge projects. Can you do a hybrid with aspx pages and MVC? If so that might be the way to go. All depends on why you are forced to use web forms. 
Yeah i know, but the try pattern has an out parameter as far as i know and i was wondering if this is valid somehow or just a random imaginary example (the only way to ignore it should be the new `_` keyword) 
I would definitely consider creating any new library projects as netstandard 1.x to begin with and only target a full framework (or even netstandard 2.0) if you actually need to. 
Removed: Rule 4. You'll need to simplify the code you have to a smaller, more relevant sample, and publish the source code (say via a gist or github) rather than a zip archive.
Exactly :) wasn't too sure about it though (like 95%, but you never know) 
The need is pretty easy to come by. That said, NHibernate is a very established library and needs .Net Standard 2.0 (and maybe more - not sure if all the capability is there for runtime proxy generation yet).
I don't disagree at all, I just mean to say that you should target the lowest API you can, it's a lot easier to increase later than decrease.
Have you tried the wtsapi32 functions? On my phone but there should be a handful of libraries out there that wrap that functionality up. Should have methods to query, disconnect and logoff I believe
What pros/cons does NHibernate have over EF?
Until Windows 7 market share becomes negligible I doubt that WPF will dissapear.
Having updates is not the same has having meaningful ones.
https://github.com/nhibernate/nhibernate-core/pull/633
What do you need help with specifically? We're not going to do your homework for you...
it's pretty much everything because my teacher only has an hour and 15's to do nothing to help any of us in class and a lot of people are quiting this guys class too. Just point me in a direction or something i don't know or don't help. 
Yeah, this is even easier in C# 7 now that they let us declare a variable to use for the out parameter in the arguments.
What have you tried so far? For example, are you stuck on reading a user input? Or are you having issue determining what percentage to use? I’ll give you a little advise on breaking the problem into smaller parts. Ask end user for input. Validate input. Store input Use if else statement to determine percentage Multiply input times correct percentage Display results 
Unfortunately we arent using vs17 at work yet, but I made a generic TryGet extension method that works with all of them. Something like bool TryGet&lt;T&gt;(this object anObject, Func&lt;string, T&gt; aGetFunction) with overloads to use an out parameter and return a bool instead, optional default value if failed, and so on. Then its just someValue.TryGet(int.Parse)
Removed: Rule 4. Given what you said about the class/instructor, you may have to dive in and do some self learning. Check out the learning resources in the sidebar, google, and /r/learnprogramming. The latter subreddit of which is a pretty good place to start.
Removed: Rule 4.
You need to learn how to use the debugger. Read up on debugging with Visual Studio, how to set breakpoints, how to break on exceptions, how to inspect local variables, etc. This is beginner 101 stuff, someone giving you an answer isnt going to help you.
That is a good point. Definitely learned this lesson the hard way.
But the thing is, I know where the error occurs and I know that i need to instance that object I'm using in my foreach loop. I know I should instance it on my Produto class, so the foreach can use that object to search the items, but I don't know where to go from there. I know what I should do, but not how to do it.. I'm kinda stuck on that part
Just a shot in the dark here... Can you set the ItemsSource directly on the Context Menu instead of the Items Control? Like this: &lt;ContextMenu x:Key... ItemsSource=... I'm not near a PC at the moment but I can help more later tonight.
* Use sane architecture. Separate logic from UI. Heck you can actually do MVC. * Disable Viewstate and learn to work without it. * If you have to use controls, use only controls that output clean HTML. So use Repeater instead of Datagrid.
That makes a lot of sense, thank you!
For one, in NHibernate (unless it's changed), you have to map every column from your POCO to your data store.
MFC forever!
Yeah that's true actually. It was a lot worse when you had to declare the out param separately
Here's what we use from NH not yet found in EF (as far as I can tell): * Mapping of System.Enum types * No foreign key properties on model * Mapping of collections of values * Mapping collections of any object (via &lt;any /&gt;) * Custom key generation strategy (modified Guid Comb) * Mapping structural value types (structs) * Custom value types (structs) * Custom collection types * By-default stateless sessions * Granular session lifecycle interception (EF6 has basic, but not enough) * Proxy generation control and interception * Tight integration with Lucene.Net * Pluggable handlers for expanding LINQ query provider capabilities There's probably others I'm forgetting. The basic reason we stick with NH is that it is still more competent in supporting a more pure Domain Driven Design approach, and our domain model is very rich and compute-oriented so this makes sense. We use every one of the above features. The big missing feature was full-stack async (async down to the DB providers, to take advantage of async IO calls), which v5.0 now provides.
In your controller you need to pass IEnumerable&lt;Estoque.Models.Produto&gt; into the View.
Alright, well I've gotten the Context Menu to work but WPF doesn't seem to like binding to the Column Visibility. Maybe your converter is better than mine. Also found this article which might be helpful: http://www.c-sharpcorner.com/uploadfile/dpatra/hideun-hide-columns-using-context-menu-in-datagrid-in-wpf/ &lt;DataGrid x:Name="view_DataGridView" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" ContextMenu="{DynamicResource cm_DataGridHeader}"&gt; &lt;DataGrid.Resources&gt; &lt;BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"&gt;&lt;/BooleanToVisibilityConverter&gt; &lt;ContextMenu x:Key="cm_DataGridHeader" ItemsSource="{Binding Columns, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGrid}}" Margin="5"&gt; &lt;ContextMenu.ItemTemplate&gt; &lt;DataTemplate&gt; &lt;MenuItem Header="{Binding Header}" IsCheckable="True" IsChecked="{Binding Visibility, Converter={StaticResource BooleanToVisibilityConverter}, Mode=TwoWay}" /&gt; &lt;/DataTemplate&gt; &lt;/ContextMenu.ItemTemplate&gt; &lt;/ContextMenu&gt; &lt;/DataGrid.Resources&gt; &lt;DataGrid.Columns&gt; &lt;DataGridTextColumn Header="Header 1" /&gt; &lt;DataGridTextColumn Header="Header 2"/&gt; &lt;DataGridTextColumn Header="Header 3" /&gt; &lt;/DataGrid.Columns&gt; &lt;/DataGrid&gt; 
Yeah, they sent me the message loud and clear after I invested a year or two in WPF: "Windows isn't a stable platform, go work on something else lol".
Don't worry u/somedepressivenerd , I remember my first beer too. Have a glass of water and you'll feel better in the morning.
Not true. We have many properties not mapped.
EF supports Enum mapping.
I give each of my applications a unique SQL login then store the whole connection string in an environment variable on the server. This way my source control is free of secrets, and the string can change between production and development. I make them unique and least-privilege because environment variables aren't encrypted and can be accessed by anyone on the server. I'm not sure this is best practice so I'd love to hear what everyone else is doing.
Don't tell anyone else
Removed: Rule 4.
Thanks for the correction. Updated.
Specifically for SQL Server, we use Windows Authentication and avoid SQL logins for this reason.
Model is null. Read up on MVC and how to pass data between the controller and the view and you will figure out &lt;i&gt;why&lt;/i&gt; Model is null. 
I deploy the connection string into the app/web config upon deployment and then perform a config section encryption after that. 
If you go through all of this trouble to store your passwords in plain text, why wouldn't you just leave your connection string in the web config file? I fail to see any advantage to this approach other than one step of obfuscation.
1. Make sure the Model is not null. 2. Make sure that the item in Model is not null (I doubt this is a problem) 3. Make sure that modelItem is not null. Those are my guesses from what you've given us here. Without more to look at it is difficult to assess the problem.
Do you have any links to some good guides on config encryption
[This article has a good in-depth look at exactly that.](https://msdn.microsoft.com/en-us/library/53tyfkaw(v=vs.110).aspx)
Standard way I've seen at my job (cloud computing startup): use a keyvault (we use Azure key vault) to store all your keys, secrets, etc. Pull latest version and retry pull if they fail to authenticate. Store the key to the key vault in an environment variable on the prod machine and your machine, NOT in any source code; don't even think that hashing and storing in a config file is good because you're just creating a Rube Goldberg machine. The thing about keys is that if someone wants yours, they'll get it. The key vault gives you a great single portal to disable any key at any time. If your server gets compromised, you can revoke all keys asap.
I remeber reading the same about DirectX 9 and Windows XP.
If you're using the new door net core then use Secret Manager. https://docs.microsoft.com/en-us/aspnet/core/security/app-secrets?tabs=visual-studio
For programming. Is 8GB ram enough?
appsettings.Production.json
Your link does not work. &gt; The resource you are looking for has been removed, had its name changed, or is temporarily unavailable.
The whole domain appears to be undergoing maintenance: https://blogs.msdn.microsoft.com/
Secret Manager is only for dev usage? I haven't found a good solution for Core secret storage in production.
/u/FizixMan: Rule suggestions: Forbid links with referrer.
By just reading your function signature it looks like you're checking whether `anObject is string` and try/catching around `int.Parse` with `return false` in the `catch`. I hope I'm wrong. 
You can store it in a config file that gets ignored by git.
That’s what I normally do just for simplicity. At times when using azure sql server I have checked in a ps1 script to prompt for user login and then use that to fetch their credentials from the vault. Painless for new checkouts but never in the repo. 
Always a bit odd that these post have a thumbnail of someone’s social media/profile pic. 
Agreed, haha.
Hey, Wow, I completely forgot about the ItemsSource, haha. So indeed it does show and work - visibility gets toggled, but it does not look the same as a default ContextMenu with IsCheckable on some MenuItems. My Converter is pretty simple: [ValueConversion(typeof(Visibility), typeof(bool))] public class VisibilityToBoolConverter : IValueConverter { public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture) { return (Visibility)value == Visibility.Visible; } public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture) { if ((bool)value) return Visibility.Visible; else return Visibility.Collapsed; } } [ContextMenu](https://i.imgur.com/lYqDMHk.png) - i hovered over one of the options and you can see the amount of extra space. Any idea why its like that?
A quick review. - Helpers.cs: It's generally code smell to have multiple types per file. Place each type in its own file. - Helpers.cs, #14: The term `Helpers` indicates code smell. It usually means "*I have no idea how to name this*". - Helpers.cs, #14: Please do not have such classes `public`. It pollutes the API surface of your library. Your library now brings way more to the table than wanted. If I want this proxy functionality, I suddenly also have `Helpers.GetReferencingAssemblies`. Imagine every library does this and suddenly you have 50 of these methods. Just make your internal types `internal`. - Helpers.cs, #24: ~~Is it really a good idea to have your library / your middleware to immediately load all assemblies? I'm not certain how other libraries, including MVC, do this.~~ Checked it. MVC Core does the same. But it also allows to configure a provider that lets one select the assemblies that are loaded, a good idea for your next version. - Helpers.cs, #33: Same as before, don't pollute the global public API space. - Helpers.cs, #42: This check for multiple HTTP methods seems rather limited. Can't you just check if `Body == null`? Or check the `CanRead` / `Length` properties of the stream? - Helpers.cs, #56: If you just check `requestMessage.Content` once for `null`, you can skip the entire `foreach` loop. Like this you check for `null` needlessly in every iteration. - Helpers.cs, #70: Always newing a `HttpClient` is not such a good idea, numerous articles online about it. Instead let the user pass a provider instance, e.g. a `HttpClientProvider`. - Helpers.cs, #96: This method is nasty and huge. Split it up into smaller parts. Take a look how the other ASP.NET Core libraries do it (usually specifying a middleware class). - ProxyRouteAttribute.cs, #23: This method is very huge and messy too. Split it up into smaller chunks. - ProxyRouteAttribute.cs, #34: Don't throw `Exception` directly. This class should only be used as a base class. Either use something like `InvalidOperationException` or create your own exception type. - Write some unit tests, you don't have a single one. - Your license says copyright 2016, but all commits are from 11 days ago. - You're writing a library with async API, but you never specify `ConfigureAwait(false)`. Library authors should specify `CA(false)` at every `await` statement. Your library should not be depending on which synchronization context the method continues. - Provide a NuGet package. :-)
It's the github profile pic :)
[removed]
Removed: Spam.
This submission is clearly spam, Rule 3 breaking. I think forbidding referral URLs can be covered by Rule 6 and added a clause there. Probably won't come up much, but worthwhile having. Thanks.
Removed: Rule 4. Assuming this is WPF, you can set the string/number format (including thousands separator) in the binding: https://stackoverflow.com/a/18362876/1269654
Jesus christ. I am scared and yet somehow intrigued by the idea of showing you some of my projects.
Is this any better? static bool TryGet&lt;TIn, TOut&gt;(this TIn anObject, Func&lt;TIn, TOut&gt; aGetFunction /*, out TOut output1.. */) But you still have to declare the variables before calling it with C#6- so what is the point of this? Is it a generic try-pattern wrapper method with overloads for every single possible case? 
It's only meant as constructive critique for improvement. And a lot of things are surely subjective. I'm not the only one in this sub-reddit that reviews code from time to time.
what
It's not actually written backwards, it contains the special Unicode character RIGHT-TO-LEFT OVERRIDE which reverses the visual display order but does not affect how the compiler interprets the string. Also, `System.out.print` is probably Java, not C#.
It's up now for me.
Yes, it's Java and yes, you're a good developer (thanks for the observation) :)
It is now. It was not 5 hours ago. Likely maintenance, as /u/Spooge_Bob said.
No worries, I just thought I would let you know encase you wanted to read it :)
Just keep in mind that nobodys code is perfect. At I have a colleague I really trust and we both do great work but every time we put our own code up for review we wonder what we got wrong. There is a few "noob" thrown around now and again haha.
Even if you do web forms perfectly, it will still look like an antiquated, horrible project to everyone else. You are asking the equivalent of "What is the right way to style my wife's mullet?".
My take regarding NHibernate vs EF Pros: * Much more expressive mapping * CRUD operations with root entities feels more natural * More databases supported * More utility and contribution projects * Very mature product Cons: * The Documentation. It is often out of date and missing key details. * Error messages at runtime can be confusing * Doesn't run on .NET Core or .NET Standard * Setting up model bindings takes longer and is more time consuming to refactor * Its development moves slowly (compared to .NET Core EF, for example) * WAY too many ways to do the same thing. Understanding which way you want to query and which way to setup your bindings when the documentation is out of date is painful.
I run a VM with 8GB of RAM - it's not lightning fast, but it gets the job done. 256GB is a little tight, but it depends what else you use the computer for - my VM has a 100GB hard drive, but it only takes up 35GB of my physical storage because it expands as it fills up. That would be nearly 15% of your total storage. It's not impossible, but don't expect to store tons of video or music on your Mac.
I know Virtualization but haven’t tried it. Just quick question about VM. If do you Windows VM on Mac then you create a project in Visual Studio, can you save it on your external hard drive instead of taking space on internal storage?
Dudeyoureallyneedtoworkonyourformatting.
"AspNetCore.Proxy" The package name and namespace are a bit too generic.
&gt; You're writing a library with async API, but you never specify ConfigureAwait(false). Library authors should specify CA(false) at every await statement. Your library should not be depending on which synchronization context the method continues. Just to expand on this, in ASP.NET Core you don't need ConfigureAwait(false): &gt; Since there is no context anymore, there’s no need for ConfigureAwait(false). Any code that knows it’s running under ASP.NET Core does not need to explicitly avoid its context. In fact, the ASP.NET Core team themselves have dropped the use of ConfigureAwait(false). http://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html However, as the author wrote you should still use it anyways: &gt; However, I still recommend that you use it in your core libraries - anything that may be reused in other applications. If you have code in a library that may also run in a UI app, or legacy ASP.NET app, or anywhere else there may be a context, then you should still use ConfigureAwait(false) in that library.
Yes, you can. One option would be to configure your VM so that its virtual hard drive is stored on your external drive. That way, the whole of Windows, all the system files, and everything you save in Windows will be stored within a single, large file on your external hard drive. The other option is to allow your virtual machine shared access to the external hard drive, or a folder on the external hard drive. That way, the external hard drive will appear within the virtual machine as an external drive, and you can read files on it and write files to it like any other external drive.
Correct, in order to test the business service itself you don't need an interface for it. But is that business service used from others business services? In order to correctly unit tests other classes that rely on this one, it'll need an interface you can mock. But if this is service is not a dependency for anything else, then creating an interface is not needed.
Removed: Rule 3, Rule 4.
That is still just going to be a `try {...} catch {}` thing. And it is not contravariant. If I had to write such a method, I would do something like: public static TOut TryGet&lt;TIn, TOut&gt;(TIn input, Func&lt;TIn, TOut&gt; fn, out bool success) { try { success = true; return fn(input); } catch (Exception e) { Debug.WriteLine(e); success = false; return default(TOut); } } and feel dirty... A better method would be a TryGet* wrapper itself: public delegate bool TryFunc&lt;T&gt;(string input, out T output); public static TOut TryGet&lt;TOut&gt;(string input, TryFunc&lt;TOut&gt; fn/*, out bool success*/) { TOut o; /* success = */ fn(input, out o); //or reduce one line with new output variables return o; } 
Never seen someone as happy as OP in that picture.
What, in your opinion, makes a "good first question"? Are you looking for easy questions to answer in order to build your reputation? Easy questions are either duplicates or get answered right away. If you want to contribute meaningfully to the knowledge base of stack overflow, then first you have to acquire some useful knowledge that doesn't already exist on stack overflow. What are you an expert in? If you just want points, search for the tag of whatever language/framework/library you know the best and wait for questions you can answer and answer them as quickly as possible. Try to research and answer ones you don't know if it's something you don't know but can figure out quickly. A lot of questions can be answered quickly with a REPL. You'll also learn a little doing this, but most of the questions are going to be duplicates unless you have some niche expertise.
Yeah that's my point, you can't really do this smoothly. it's always easier to just use the normal try catch block or try patterns and writing over complicated semi-generic "helper" methods makes it even less readable imo
you monster! I suppose you start your day with a little COM+ bridging too.
It looks scary, but most of his concerns could be fixed in less than an hour. And they'd save far more time than that in reduced confusion. 
This is why I like RaSharper and StyleCop so much. The rules aren't always perfect and sometimes they are cumbersome but everyone's code looks very similar and we are all grading by the same rules.
More info: HttpClient: https://www.infoq.com/news/2016/09/HttpClient Designing with exceptions: https://www.infoq.com/articles/Exceptions-API-Design 
No, but lately you've been the best one at doing it.
Can you elaborate on what exactly you mean by exporting? Do you mean extracting as in building a specific part of your solution? Or extracting as in literally moving projects from one solution to another?
What I'm trying to do is make a clean copy of my solution to store on a USB stick without all the excluded projects (to give it someone else or use it on another computer). I could just copy and paste the whole solution folder but it also copies the folders of projects that are not in use. I'm trying to copy my solution just how it is presented in visual studio (without having to manually delete the folders/files that are not being used).
I came here for this
There's lots of competition for major tags - questions are generally either simple and answered very quickly or difficult to answer and have stumped many before you. Have a dig through the [tags](https://stackoverflow.com/tags) to look for more focused tags you have experience with and look for questions to answer that way, e.g. less common libraries you've used. You may then start to see questions you think you can work on an answer for. e.g. I used the filehelpers library for a couple of projects so gained a bit of knowledge of some of the gotchas. If I now search on the filehelpers tag, I see some questions going back a month or two that I could probably solve with a bit of work. Understand that you're not looking only for things you can answer off the top of your head. Very simple questions like that will be answered quickly. Look instead for issues you understand then go away and do the work. Create your own sample code and test that it works before posting and give a good quality answer. And don't be put off by questions that are older, even if you feel the person asking has long since figured it out. If you can provide a good answer, it will be helpful for people later searching for the same issue (this is the main strength of StackOverflow - not as tech support hotline but a reference library of problems/solutions).
Alright! Thank you so much. I got it. 
Projects were never really meant to live in different solution. yes you can import them into other solutions but its a quality meh experience. Best you can do is copy the whole solution folder. open the copied solution seperately (given that you never hardcoded any full path into your sln/csproj) and remove the unrelated projects. As for the future, try to keep yo sln files clean. Dont use it as a workspace. Its a container for all code related to software project.
My solution in Visual Studio is clean, it only contains the projects that are valid and used. This is because I have unloaded or excluded previous projects from my solution (not deleting them), all is fine in visual studio. When I open the solution folder on the drive all my previous projects that are no longer in use are still contained in the solution folder. My question is, is there a way to make a copy of the solution that I see in visual studio without having to delete manually all the project folders that I have unloaded/excluded? 
&gt; My question is, is there a way to make a copy of the solution that I see in visual studio without having to delete manually all the project folders that I have unloaded/excluded? No. Because what you do is very untypical.
Then why is the option of excluding or unloading a project even available in Visual Studio? Why is there an ability to show unused files when we could just delete them in the first place?
It sounds like you want to reuse code in one project for another. What i have done in this scenario is create a separate project with minimal dependencies and then create nuget packages with the compiled code. The i open up the child project and reference the parent via nuget. 
[KeyVault](https://azure.microsoft.com/en-us/services/key-vault/) or something equivalent. Disclaimer: I am biased towards Azure but I'm pretty sure that AWS, Google, et al, all have equivalent services if that's your cup of tea.
Webforms can be used inside a project with MVC. At least this was possible a few years ago. What this means is you can move your code into an MVC project and migrate code to the new way when possible.
I work for a consulting company that mostly does projects for government. All the .Net projects use Oracle (because governments generally do). My previous job was SQL Server and I miss it SO much. Oracle is fine, but SQL Server is so much less bureaucratic. 
because people get cranky when you remove features. Source control exist so we can stop commenting out old code because we might want to revert and in your case so you can delete old projects that you no longer need.
Echoing this sentiment for SQL Server: use service accounts with integrated security (over an encrypted connection) whenever possible.
.NET developer here. Our primary database stack is Oracle, primarily for legacy reasons. I work for a large TV broadcasting company, and predictably enough the business doesn't want us replacing a database stack that has driven the core of our infrastructure for decades. New projects, however, are being steered away from Oracle towards MSSQL/MySQL, however obviously we have to maintain our legacy systems so I don't see Oracle going away entirely anytime soon for us.
that's my whole point, I want to be able to export my solution without the old projects that are excluded while having them sit somewhere after I do that.
All the stuff that you don't need for the project should just be taken out of version control. If you use git there is gitignore etc 
Thanks, I didn't think about that. I appreciate.
thanks for your feedback but no, I'm trying to copy a solution without the unused projects not doing it manually.
Not professionally, but I have played around with some .NET and MySQL projects at home.
I work with .Net mainly using PostgreSQL. I believe that my organization chose it because it's free, it's powerful, and it's widely supported. Our databases are not particularly large.
FXCop, a.k.a. Visual Studio Code Analysis, is far superior to StyleCop in my opinion. I don't like the latter whining about stuff that should be handled by the code formatter.
It always felt like a weird API choice, it feels wrong the number of times you need to slap ConfigureAwait(false) in. I can't think of a better solution though, not one that wouldn't mess up working in a context sensitive environment.
It could be a project level setting. Normally you want all or nothing.
Oracle10 for consulting projects, i.e. not my stack. I prefer MS SQL Server, Oracle seems to hate developers by convention and the IDE is bad. I hear Oracle finally supports long table/column names in 11 but still no schema namespaces. PostGreSQL in a few places for nicer spatial queries supposedly, also not my stack. I'll count ORMs too.. Dapper because architect has a crush on SQL and strings. NHibernate 2 for a legacy app which requires docs from Internet Archive. EF6 thank god As a consultant you never know what stack you'll be on next.
https://stackoverflow.com/questions/9419780/javascript-show-hide-password
I use Postgres in my projects as well.
Oracle 12c still limits identifiers to 30 characters but the next release of 12c will support long names (finally). And yeah, Oracle really does hate developers. I switch between Oracle (current employer) and SQL Server (previous employer who I still do a bit of work on the side for) and SQL Server is so much easier to use. Some of that is familiarity, sure, but a lot is just that there are so many fewer hoops to jump through.
Yeah I thought about that, but it would be a nightmare in code of equal utility for either type of solution. That's where almost all the solutions break down. It would have to be backward compatible somehow too. 
Few different choices for a few different offerings. I've worked on a project that used Oracle as the db, mostly because of legacy reasons. The decision was made almost 20 years ago and there's really no going back at this point. Another project I work on uses postgres because of it's superior spatial query support. MSSQL supports spatial queries, but postgres seems to have better tooling support, and more extensions, allowing for a better working experience.
&gt; Dapper because architect has a crush on SQL and strings I have to admit I feel the same as your architect :-) Curious though to hear a different point of view on what things you don't like about it.
I use Postgres for my company as well. It's free, it's open source, not having to run on Windows / SQL Server means that you can get a server twice as powerful for the same price, and Npgsql works well so far.
Not at work, we have MSSQL server there. At home, because I didn't want to pay my provider extra for a MSSQL instance, I use MySQL.
FxCop/Visual Studio Code Analysis does managed code analysis while StyleCop does a static code analysis. There may be some overlap in findings but they both compliment each other to make a better product.
I write reuse libraries for other teams to consume. Our data source layer supports Oracle, MongoDb, SQL Server, MS Access, Entity Framework, SQLite, and a REST Web Service. I prefer SQL Server for the same reason as you and the access permissions always seem to be a little easier. We were recently asked if we would add support for NHibernate so it's on the list to add as well as we've been wanting to add PostgreSQL now that a few teams are starting to adopt it.
I'm yet to be an expert in anything haha but that's some good suggestions thanks
&gt; Our databases are not particularly large. To me, that's really the only time I'd start looking at other options outside of MSSQL
Thanks will try this solution
Thanks 
I primarily use SQL Azure but also use Redshift with spectrum. We're doing that for storing and querying large amounts of data that will not fit in our 1TB limited SQL Azure instance.
We work with our own framework that currently has an esent database behind it. We have a relatively small database that needs very fast read and writes this seems to do the trick. I can't say exactly why it was chosen though 
SQL Server Developer edition is free. It's full-featured. You just can't use it on a production server. https://www.microsoft.com/en-us/sql-server/sql-server-downloads 
&gt; Helpers.cs, #56: If you just check requestMessage.Content once for null, you can skip the entire foreach loop. Like this you check for null needlessly in every iteration. The headers still need to be added whether or not there's content, but the check could probably be made more clear.