The theory and concepts (e.g MV* patterns for the GUI) will translate well, but the specific application will differ. Once you understand the theory using Java, it's not hard to find an example of the practical application in C#.
Just by itself? I did that once for something really simple with no visuals. But how do you put in like images or videos. Wouldn't it be easier using some kind of framework or toolkit to do stuff with?
It really depends on what you want to build? Do you have an Idea for a project ?
I plan on taking this course, but do you know which course exactly? He has very similar courses. I was actually going to take a new course he just released, which is learning C# with Net.core or something since it's more up to date. Although I started Bob Tabors course because it's for absolute beginners which I am. And even though it might be counterproductive to take two intro C# courses, I feel like I may need it since I think I'm going to have trouble grasping programming.
I currently work as a Interactive Media Software Developer, which usually means my software is more visual heavy. So animations, fancy effects, and whatnot. Though I try to make small games in my free time. I've only ever managed to publish one, that was made in Unity.
&gt; Your return should be List. No. A return should still be IList (or something even more specific, ICollection or even just IEnumerable). Otherwise, you are leaking your implementation details outside your class\method.
Interesting! How easy would it be to read a kml file using this?
thats what i just said lol. are you on drugs or something
What about if you need RemoveAt or something else? Im not sure how specifying the exact return type makes it leaking implementation details
The name of the class isn't an "implementation detail". The code inside the class is the implementation. I swear, I'll never understand this irrational fear of class names. It's just a list. You don't need to hide that fact.
&gt; Fuck you. You don't deserve access to that method. I can't help but think that is how people like that feel.
Okay that’s pretty much what I figured. Would I have an easier time working on multithreading C# projects after having some multithreaded Java experience or do they way they handle it differ too much?
No, never return a materialized list as IEnumerable. IEnumerable has a specific connotation. It says to the reader "this performs processing each time you read it. You must copy it into your own list if you want to read it multiple times"
It's not the "name" that's important it's that you are forcing a concrete implementation onto your consumer. &gt; I swear, I'll never understand this irrational fear of class names. That's because you assume the name is the thing... it isn't. It's the concrete implementation that is. The only exception to that are generally base types like integers and strings. &gt; It's just a list. It's a specific KIND of list... that's the problem. &gt; You don't need to hide that fact. Yes, you do. Because if you internally need to change it for some reason it would require a **breaking change** to the consumer. Whereas if you instead returned IList (originally) than your INTERNAL use of List can change to anything you want and as long as it implements IList the consumer would never need to know. This is basic information hiding and is a core principal of OO design.
Well if you wann keep messing with game dev you should check out mono game which is a C# framework. From google - MonoGame is a free C# framework used by game developers to make games for multiple platforms and other systems. It is also used to make Windows and Windows Phone games run on other systems. It supports iOS, Android, MacOS, tvOS, Linux, PlayStation 4, PlayStation Vita, Xbox One and Nintendo Switch. http://www.monogame.net/ I messed with mono game before and it was pretty straight forward . I liked it better then unity because I was trying to focus just on code instead of using tools(which isn’t a bad thing just the way I wann go about it) And also a lot of people recommend it over unity for 2-d game dev I also recently started learning the ASP.net core framework for building web applications. I’m following this tutorial which is pretty easy to follow https://youtu.be/4IgC2Q5-yDE The reason for learning this is to build a point of sales web app for my final school project. You can hop on github and click the explore tab and just check out what others are doing, find something cool, clone it and hack away.
They still have the freedom of converting the abstract to something concrete if the abstract implementation doesn't offer them a specific implementation they might need. (x.ToList() for instance.) The fact is you wouldn't (couldn't) know that. The key thing to understand and follow is that you don't leak to them what you are using internally. This way, as things change over time, you reduce or eliminate the possibility of a braking change to them as the consumer of your "thing". So, you use List internally all you want but if you are exposing an API to a consumer (basically any public method input or return value or any public property) you should use an abstraction. (The only exceptions to that are generally the base data types — strings, integers, etc.)
&gt; No, never return a materialized list as IEnumerable. There are quite a few times you will specifically want that. Particularly if you are chaining things... without that technique LINQ wouldn't exist. The whole technique of delayed execution is predicated on passing through IEnumerables and using generators. So... you are patently incorrect on that statement. &gt; IEnumerable has a specific connotation. It says to the reader "this performs processing each time you read it. You must copy it into your own list if you want to read it multiple times" Yes, precisely. But here is the key thing, they can augment it as a pass-through preserving the delayed execution until some later point. Frequently that is exactly what you want to offer to them. Thereby letting them decide when is the "final" moment that it gets iterated.
LINQ functions such as ToList() actually do return a List&lt;T&gt;. LINQ functions that return IEnumerable don't return lists, they return something that can be used to generate a list. If you enumerate it twice, it has to apply all of the steps in the process twice.
&gt; you are forcing a concrete implementation onto your consumer. Nonsense. The consumer can choose to accept the return as the class, as a base class, or as any interface it exposes. By being specific in your return type you offer the greatest possible choice to the consumer.
&gt; Whereas if you instead returned IList (originally) than your INTERNAL use of List can change to anything you want and as long as it implements IList the consumer would never need to know. You aren't going to do that. That never actually happens and you know it. Now if we were talking about an arbitrary class that you created, call it Widget, then maybe you are going to change it. But you don't have to change the name. You can always just change the implementation details, which again are the contents of the methods. Or you can subclass it.
&gt; LINQ functions such as ToList() actually do return a List&lt;T&gt;. That wasn't the kind of stuff I was referring to. I was referring to things like Where or Select that allow you to add something to the expression tree and have it evaluated at a later time (in the case of Where a filter). [Besides, there's a good reason that ToList returns the concrete list rather than an abstraction, its very purpose is to produce the concrete from the abstract.] &gt; LINQ functions that return IEnumerable don't return lists, Of course... that's why I said your statement was patently incorrect. There are lots of times you want to return IEnumerable from a method (like Where). &gt; If you enumerate it twice, it has to apply all of the steps in the process twice. Congrats, you have correctly identified the outcome of delayed execution and the reason it needs to be handled correctly. Lists should only be "returned" from an API when two conditions can be met, when the data-set involved can be fully realized and indexes are required... beyond that a more efficient structure should be used. I'm confused if you are misunderstanding how LINQ works or are just unclear on the principles I'm talking about.
&gt; It's a specific KIND of list... that's the problem. It's the only kind of list. Unless you are using strongly named classes (FooCollection), this is literally the only kind of list you will ever see in any typical C# application. There are other collection types, but you cannot substitute a ReadonlyLisy or ImmutableList for a List. And it would be pointless to return an ObservableCollection as a List. There is a Linked List, but you damn well better tell the consumer that because they have to be accessed in a specific way to avoid massive performance problems. So no, your whole "it's a specific kind of list" argument is invalid.
It's a matter of intent. If my API has a List&lt;T&gt; and wanted to return it, it could return it as... * `List&lt;T&gt;` * `IList&lt;T&gt;`, which lets me change the implementation later to use something more efficient in the future and still allows the full set of List operations * `IEnumerable&lt;T&gt;`, which lets me change the implementation later to something more efficient in the future, but only allow iterating over what I've returned There are other return types you could use too, but I don't see much of a point in discussing `ICollection&lt;T&gt;` or `IReadOnlyCollection&lt;T&gt;` as you might as well just use `IEnumerable&lt;T&gt;` instead.
&gt; They still have the freedom of converting the abstract to something concrete if the abstract implementation doesn't offer them a specific implementation they might need. (x.ToList() for instance.) The fact is you wouldn't (couldn't) know that. So even though you are returning a perfectly good list, you are forcing them to pay for copying it into another list. Why? So you can later change it to another list type that doesn't actually exist?
&gt; There are lots of times you want to return IEnumerable from a method (like Where). Where does not return a list. How is it that you don't know this?
If you are exploiting delayed execution, you shouldn't be returning a `materialized list`, because a materialized list *isn't delayed*. I don't think you really understand what you're arguing about.
I said don't return lists as IEnumerable. LINQ does not return lists as IEnumerable. So where exactly am I "wrong"?
&gt; which lets me change the implementation later to use something more efficient For example? Quick, name something that has the same semantics as List&lt;T&gt; that you have actually used in the past 6 months.
IReadOnlyCollection says "this is a materialized collection that doesn't support indexing. You can safely enumerate it multiple times" An IEnumerable is not guaranteed to be safe to reenumerate.
&gt; You aren't going to do that. That never actually happens and you know it. Then you aren't working on projects that evolve over time. Most do. I have had it happen lots where a poor choice (sometimes even on my part) led to breaking changes that could have been otherwise avoided. Thankfully, after so many years I've learned my lesson and my code and the code from the teams I run tend to allow change with little ripple effect as a result of following core OOD and the SOLID principles. &gt; You can always just change the implementation details, It's that change that causes the breaking change though. That's what you want to avoid. Again... I'm only referring to what is EXPOSED to the consumer of Widget. Widget is free to use List internally all it wants. I'll even allow it to be used as an input or return on "protected internal" methods (but not just "protected" methods... again to keep the breaking changes to a minimum). Now if the Widget class is marked internal rather than public (which really should be the default for all new classes) than it doesn't matter. As I keep saying, I'm only talking about EXPOSED things (classes, methods, and properties). What I'm espousing here are some of the basic principles of good API\ABI design. MS themselves have admitted that some of the legacy "issue" with the BCL (that they are still struggling with fixing today) were because when .NET 1.0 was created our industry didn't really have good standards and ideals on how to design API's well. We have learned a **LOT** since then, and they now have the very same standards I'm recommending here... for very sound reasons from very hard lessons.
Considering that I work in Java as often as I do in C#, are you sure you want me to answer that question?
There is no reason to use Winforms in 2019. There wasn't even a reason in 2009. WPF is easier, faster, and looks better.
`List&lt;T&gt;` is a dynamically sized array. It's a handy default choice of collection when you need one and don't have any overriding concerns that argue for, e. g., `Dictionary&lt;K,V&gt;` or `HashSet&lt;T&gt;` or whatever, instead. `IList&lt;T&gt;` is an interface type that describes a set contracts that would be fulfilled by a collection that provides, e. g., random access to elements of the collection by a positional index. You use it either to request a type that fulfills those promises, or to indicate that your type fulfills those promises.
Answer for C#, since context matters.
FastList&lt;T&gt; from Nez (an extension to Monogame). It’s basically just a list but it has faster removals because they’re unstable. Obviously this is not fit for all situations, and I actually agree with your point, but I just wanted to play devils advocate.
&gt; The consumer can choose to accept the return as the class, as a base class, or as any interface it exposes. Um... no. If you return List&lt;T&gt; they receive it as List&lt;T&gt;. They can cast it to those others, but they are still getting a List&lt;T&gt;. Regardless, the issue isn't how they "receive" it. The issue is that later when you come in and need to change your internal algorithm for some reason... say to SortedList&lt;T&gt; or MyNewFancyList&lt;T&gt; or whatever, you now are stuck either converting internally to match what you exposed before (which undoubtedly takes more time and\or memory) or passing on a breaking change to the consumer. &gt; By being specific in your return type you offer the greatest possible choice to the consumer. It's the LEAST possible choice. You are binding them into your specific implementation choice. Your implementation details. You want your return type to be as generic as possible but not so generic as to lose functionality they will *likely* need. For instance, if it is not likely they are going to need to use the indexes of the result you shouldn't expose even IList&lt;T&gt; but instead ICollection&lt;T&gt; or even IEnumerable&lt;T&gt;. Again, be as generic as you can while retaining the needed functionality for the consumer. If you want your consumer to receive a type of "fruit" don't pass them an "apple" pass them the IFruit interface instead.
I've been working with .NET since version 1 was in its second beta. My current project has been ongoing since people actually thought WF was a good idea. How many times have I seen the list class change? Once, when ArrayList was replaced by List&lt;T&gt;. Nearly 2 decades and countless projects and it changed one time, industry wide, about 14 years ago.
Cool. It's good to have that knowledge in my back pocket.
Sorry... my bad, I read the lower-case "list" to be the abstract concept of a "set of things" and not the concrete "List" type. So, am I to understand you are talking about some method that is internally using a List&lt;T&gt;? Then, yes... in that case the method should simply return IList&lt;T&gt; if the consumer needs the indexes or ICollection&lt;T&gt; if not.
&gt; If you are exploiting delayed execution, you shouldn't be returning a "materialized list", because a materialized list isn't delayed. Exactly. &gt; I don't think you really understand what you're arguing about. I'm an expert in this field. You are using some of my code.
I worked for a job that started me as a senior web dev on a junior salary. But I had just left my first job as a jr dev so it was a big title jump and I knew what I was doing (programming since I was 9). My point is they thought my salary was good. But the title jump looked good on my resume. I used the experience to jump my salary 65% at a new job in less than 1.5 years and then another 20% from there. Imo, get experience anyway anyhow. Use them as a stepping ladder to higher plateaus.
I got a job as a jr SharePoint Developer and I didn't even know what SharePoint was ... I didn't lie either. Sometimes an employer wants someone fresh for dirt cheap and in such cases op is perfect.
SortedList? Really? You are going with SortedList? If you return a SortedList as an IList you are going to seriously piss people off. It doesn't obey the IList contract. People who insert items into it won't be able to read those items back out because they will be in the wrong place. Fortunately the built-in version of SortedList does not implement the IList interface. https://docs.microsoft.com/en-us/dotnet/api/system.collections.sortedlist?view=netframework-4.8 If you can't think of a single alternative implementation of IList&lt;T&gt;, then why are you using it as a return type?
`IList&lt;T&gt;` is a special case of no for me, just because `Array&lt;T&gt;` implements it. `((IList&lt;string&gt;)new string[0]).Add("foo");` compiles but throws. So I always use `ICollection&lt;T&gt;` or just `List&lt;T&gt;`.
What's the context term for a list with delayed execution? Like the opposite of the term "materialized list"? I want to say "query", but that means something specific in LINQ.
&gt; in that case the method should simply return IList&lt;T&gt; if the consumer needs the indexes or ICollection&lt;T&gt; if not. You don't have access to that information. If you are building a library for someone else you can't know how they will want to use it. Which is why I strongly recommend that you be as specific as possible so they have as much flexibility as you can offer them.
&gt; So even though you are returning a perfectly good list, you are forcing them to pay for copying it into another list. No. Return IList&lt;T&gt; if you need them to have a real list with indexes and all the fixin's. But if they don't need that stuff don't return it and expose more than is needed. Be as generic as you can without losing necessary functionality. There are two things that this recommendation is predicated on. One has to do with a more "functional programming" model which admittedly a lot of people struggle with. C#, to its credit, mixes the traditional with the functional things quite well. But there are still many people using C# that haven't fully groked the functional parts yet. Secondly, has to do with old-school OO design principles — chiefly information hiding. The consumer would only need to call ToList() in very specific situations. Part of what you as the API designer would need to consider is how likely is the consumer going to need to do that. The vast majority of the time they are simply going to loop over your list and "do" something with each item. No need for indexes. No need for the (very few) methods on List&lt;T&gt; that aren't available on IList&lt;T&gt;. Even then I would advocate for returning ICollection&lt;T&gt; unless it is known that indexes are going to be needed (and further IEnumerble&lt;T&gt; if Count isn't needed). &gt; So you can later change it to another list type that doesn't actually exist? There are LOTS of list types my friend. First there is just the abstract concept of a "list of things" a generic array. But even if you just limit it to things that implement IList&lt;T&gt; there isn't just the one.
&gt; It's the only kind of list. No, it most certainly is not. &gt; So no, your whole "it's a specific kind of list" argument is invalid. Sorry, you are just factually incorrect.
To add to that, technically you are supposed to check IsReadonly before modifying an IList. And ICollection.IsReadonly has a different meaning than ICollection&lt;T&gt;.IsReadonly so you need to check the right one depending on if you are doing an Add or Replace. It truly is a broken interface.
Don't use it. It's a useless crutch at best.
&gt; You don't have access to that information. You are the designer of the API... you should and most importantly are in charge of the "intent" of your method and how it is to be used. &gt; If you are building a library for someone else you can't know how they will want to use it. Again, you should. You are the one providing the functionality... what is the intended use? Is it for them to be able to grab an item out of the "array" by index? Is it to loop over your list and perform some work? You had better know what the intended use is. &gt; Which is why I strongly recommend that you be as specific as possible Then you will create breaking changes MUCH more often in situations that could have been easily avoided. They don't lose flexibility... they however are driven by your intent and suffer when you must change things internally in a later version.
Scott Allen's is end to end. Starting at the beginning and ending with in depth details of extension methods and LINQ among other things. I forget the specific course titles. Check the table of contents. I would probably do Net core but it should not matter since his original course will all be relevant. He doesn't get windows environment specicifc. Tabors course is good but very basic and too slow for me since I have been slinging code for a long time. I had my son go through Tabors course at one time and I sat with him for a lot of it. Tabor is on Pluralsight and Microsoft Learning if I recall correctly. The Microsoft videos are free.
That's not a valid argument. Your only choice is to either 1. Accept my claim 2. disprove my claim with an actual example Merely shouting "you're wrong" isn't going to convince anyone
&gt; You had better know what the intended use is. No I don't because the List class already supports all of that for me. You are asking me to make an assumption that doesn't need to be made.
Visual studio and .net core. I think that answers this vague question?
That's kinda why I might need tabors course first. I might have ADHD, and my attention span is making it difficult to learn this stuff unfortunately, especially when learning through video. But yea I can imagine it wouldn't be good if you've already been doing programming, and most of all pluralsight content being better for someone in your position. It's something I will heavily utilize after tabors course because I have it for free. I don't think tabor is on pluralsight, last time I checked at least.
&gt; Really? You are going with SortedList? It was an example and no I wasn't referring to that specific SortedList. I also offered MyNewFancyList&lt;T&gt; which obviously isn't a real example. I think you understand that I wasn't talking about concrete specifics but the theory of hiding the implementation detail. List&lt;T&gt; is (one of) the concrete implementation detail, IList&lt;T&gt; is the abstraction. &gt; If you return a SortedList as an IList you are going to seriously piss people off. They wouldn't know... **that's the whole point**. I hid my implementation detail from them. They would simply have a list that was in order.
And yet you still haven't been able to name one. Well you tried, but failed because SortedList isn't an IList&lt;T&gt;. So much for being an "expert". I'm done here, your ignorance bores me.
&gt; Once, when ArrayList was replaced by List&lt;T&gt;. Well, you were lucky then to only have it crop up once. Still... it is an exact example of what I'm talking about. I've seen this kind of thing crop up a LOT more than just once. Admittedly, most often with other peoples implementations, but still. Besides, I'm not just talking about List here. I'm talking about the general concept of returning abstractiosn rather than concrete types as much as possible. Basic information hiding. If you have used .NET for that long then you must know of the massive amounts of pain that we have had trying to transmogrify the BCL to better support change over time. I am sure you have suffered a number of breaking changes from those changes, and while they may not have been due to List... they were due to the same sin regardless.
The way I say it is that every public method, property (which are really just methods), and field in your API is a liability. You're exposing your interface to chimpanzees smashing on the keyboard, so each and every avenue of access is potentially something that your consumers will twiddle in a way that you didn't test. If you return an IList&lt;T&gt;, you're saying, "I'm giving you a result collection that can be *efficiently* counted and accessed by index, and always fits entirely in memory conveniently." And what happens if your consumers start bitching about "I call your API with `searchText: "*", maxResults: ulong.MaxValue, iKnowWhatImDoing: true, noReally:true` and now I'm getting out of memory!? Your software sucks!". Now, if you want to stream items as they come in over the network, Hyperbole aside, if you're making an API for others to consume, then it is absolutely critical that you return the minimal possible interface because you're signing a contract with your callers that you won't break their code with a breaking change to the interface. If you're just writing a Repository for your own code or some such, then return whatever you want because you're a right-click -&gt; refactor away from changing it when the need arises. But then, why is your Repository `public` instead of `internal`?
If you can't argue with concrete specifics then you have no argument. And if you can't understand why returning a list that doesn't actually behave like a normal list is a problem then you should not be writing code.
New pattern is for an `async` method to take in an optional `IProgress&lt;T&gt;` instance. You can use the built in concrete `Progress&lt;T&gt;` class.
&gt; Still... it is an exact example of what I'm talking about. No it's not. It can't be because IList&lt;T&gt; and IEnumerable&lt;T&gt; didn't exist before 2.0 so the return types were changed as well.
&gt; If you can't argue with concrete specifics then you have no argument. Sure I can. I'm talking about the theory of implementation hiding. It's not a difficult concept. &gt; And if you can't understand why returning a list that doesn't actually behave like a normal list Who said that? You said that... I didn't. In all situations I was talking about returning an IList&lt;T&gt;... but if internally I am using something else that implements IList&lt;T&gt; you don't need to be aware of what that is. That is the crux of the argument. Also... I'm not just talking about lists. This is a general principle of returning abstractions rather than concrete types as much as possible (and tangentially for having those abstractions be as generic as is practicable).
"&gt; If you return an IList&lt;T&gt;, you're saying, "I'm giving you a result collection that can be efficiently counted and accessed by index, and always fits entirely in memory conveniently." A List&lt;T&gt; says the same thing.
&gt; No, never return a materialized list as IEnumerable. "Never" is far too strong of a word, here. &gt; It says to the reader "this performs processing each time you read it. You must copy it into your own list if you want to read it multiple times" No, it says, "you can enumerate this once, forward-only, and that's all I guarantee". "Copy it into your own list" is a side-effect of that. Returning an ICollection or more, however, implies that "this not only fits in memory, but you can enumerate it multiple times". What that means is that you return the interface that you are guaranteeing, and no more. If you're writing a method that is meant for high-performance and only dealing with small amounts of results that fit in memory, then yeah, you want to return the materialized collection itself. If you're not guaranteeing that it is always and forever going to fit nicely in memory or be materialized entirely before being returned but your current implementation just so happens to be a materialized collection, then return only IEnumerable&lt;T&gt;.
I'll accept that argument, with the caveat that it is a rare situation beyond the scope of the original question.
Didn't mean to hurt your ego, sorry.
&gt; The way I say it is that every public method, property (which are really just methods), and field in your API is a liability. Exactly. &gt; You're exposing your interface to chimpanzees smashing on the keyboard, Exactly. Especially given that often times that "chimpanzee" will be you six months later. &gt; If you return an IList&lt;T&gt;, you're saying, "I'm giving you a result collection that can be efficiently counted and accessed by index, and always fits entirely in memory conveniently." Exactly. Yes. &gt; Hyperbole aside, if you're making an API for others to consume, then it is absolutely critical that you return the minimal possible interface because you're signing a contract with your callers that you won't break their code with a breaking change to the interface. Exactly. The most generic result you can give them without removing necessary functionality they need to effectively (and ideally efficiently) use your class or method. &gt; If you're just writing a Repository for your own code or some such, then return whatever you want because you're a right-click -&gt; refactor away from changing it when the need arises. Yeah. This is why I say it is only public (and usually protected) things where this kind of stuff matters. Internal or "protected internal" it just doesn't matter for the very reason you mentioned... you are in control of the entire "world" in that case. &gt; But then, why is your Repository public instead of internal? Yeah. I really wish that MS had changed the defaults. You should have to explicitly mark things public. [I did suggest it once but as usual backward compatibility and consistency were deemed more important - which I don't necessarily disagree with.] Eric Lippert said that while it wouldn't break anything per se it would cause surprises for a lot of developers. Changes in "implicit" defaults are the kind of thing that sneak up on you. I don't disagree with that at all but still would be a nice change for .NET in the long run. In the end, for most of the teams I run with C# we'll configure ReSharper so the new class template makes it internal anyway so no big deal. [Although, I don't really work in C# anymore much these days.]
&gt; If you are building a library for someone else you can't know how they will want to use it. &gt; &gt; ... &gt; &gt; Which is why I strongly recommend that you be as specific as possible so they have as much flexibility as you can offer them. Returning a `List&lt;T&gt;` instead of an `IEnumerable&lt;T&gt;` isn't offering them flexibility! It's locking your implementation into a materialized list that fits in memory and can't stream results from a slow IEnumerable input. Having multiple methods for different implementations (e.g. `IEnumerable&lt;T&gt; ProcessItems(IEnumerable&lt;T&gt; source)` vs. `List&lt;T&gt; ProcessAllItems(IEnumerable&lt;T&gt; source)`) would be "flexibility", but you're explicitly signing up for the added complexity rather than implicitly.
If my list doesn't fit into memory then I've had a lot of other problems going on. Don't optimize for a situation that's not going to happen.
&gt; Well you tried, but failed because SortedList isn't an IList&lt;T&gt;. As I said, I wasn't referring to that SortedList specifically... just an off-the-top-of-my-head example of something that could exist and be used. As for other examples there are some... ArrayList being the most common. &gt; So much for being an "expert". Oh well. I guess 30 years just isn't enough for some people.
&gt; No I don't because the List class already supports all of that for me. So return IList&lt;T&gt; and be happy. But if your data set grows or the conditions of your situation change... breaking changes will come. Being more generic is the better way to go I assure you. &gt; You are asking me to make an assumption that doesn't need to be made. I'm asking you to at least THINK about it. For a lot of classes that itself would be an improvement. All to often people just throw code around without much thought.
&gt; What's the correct term for a list with delayed execution? An *enumerable*. Or, explicitly and more specifically, `Lazy&lt;List&lt;T&gt;`. An enumerable doesn't specify whether it's lazy or not, because the caller can always materialize it if they want to force it to be non-lazy.
ArrayList? WTF? I know I said I was done but you are just too hilarious. ArrayList doesn't expose IEnumerable&lt;T&gt; or List&lt;T&gt;. So it isn't even an option. At least spend 5 Seconds to look up the definition of the interface and pick something that's actually on the list. I know that you got allergic reaction when it comes to actually using real code but come on, try not to be a parody of yourself. https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ilist-1?view=netframework-4.8
Except that you are. There are other classes that implement IList. ArrayList being one. But more importantly you could create one if needed. I have written a number of classes over the years that implemented IList&lt;T&gt; so that I could be as efficient as I could in my internal implementation and expose just the functionality my consumer needed. Although, to be fair I rarely return IList and generally stick to the ICollection or IEnumerable variants.
&gt; ArrayList doesn't expose IEnumerable&lt;T&gt; or List&lt;T&gt;. It exposes IList. You are being a bit to literal.
&gt; An enumerable doesn't specify whether it's lazy or not, Which is why it isn't the answer to my question
&gt; You aren't going to do that. That never actually happens and you know it. That's in large part due to the fact that `IList&lt;T&gt;` is too big of an interface to start with, and is thus tied pretty much exclusively to the built-in `List&lt;T&gt;` implementation. And the fact that C# developers tend to just jump to `List&lt;T&gt;` for everything. `IEnumerable&lt;T&gt;` implementations change quite often. `ICollection&lt;T&gt;` and `IDictionary&lt;K,V&gt;` less often, but not exactly unheard of.
Nobody uses IList. It has been obsolete since IList&lt;T&gt; was introduced 14 years ago. Are you actually a C# programmer? Or you just visiting from some other programming language?
Yes, I have to agree with that.
&gt; Are you actually a C# programmer? More than that. I worked at MS for a time so, as I said before, you are using some of my code. &gt; Or you just visiting from some other programming language? No... although, being fair I haven't used C# for a couple of years now. None of what I'm talking about is really even that specific to C#. As I said in another response to you... you are being to literal and think you have found a "gotcha" which is sad really. What I'm talking about is a core OO concept of information hiding and using C# and this topic as illustration of why IList&lt;T&gt; should nearly always be returned instead of List&lt;T&gt; (answering OPs question). I do wonder why you are having such a difficult time having the conceptual (a.k.a. abstract) conversation about the topic. Usually developers grasp abstractions really well which is why I jumped to abstract examples to explain the theory. This would be the same principle for Java, Python, C, C++, and a number of other statically typed OO languages.
[Adobe XD](https://adobe.com/products/xd.html), and the upcoming [Adobe Project Gemini](https://theblog.adobe.com/introducing-project-gemini/).
I wouldn't even think of it as "materialized list". Using Linq, you're really just querying something that implements some interface (IEnumerable&lt;T&gt;). Notice how all of the Linq extension methods do not mutate the source, similar to a sql select query?
Of course I'm being literal. The original question was about List&lt;T&gt; vs IList&lt;T&gt;. You can't answer the question without talking about them. If you think knowing junior level information about collection classes is "playing gotcha" then I shudder to think about what your code quality was.
Well no, a materialized list is what you get after you call ToList(). It's something that you can directly see in memory.
&gt; Returning a List&lt;T&gt; instead of an IEnumerable&lt;T&gt; isn't offering them flexibility! It's locking your implementation into a materialized list that fits in memory and can't stream results from a slow IEnumerable input Those aren't contradictory statements. Offering more flexibility to the consumer often means reducing the flexibility afforded to the library and vise-versa.
&gt; Don't optimize for a situation that's not going to happen *Unless that optimization/feature is cheap and doesn't take much time to make. Also it's fairly common now for people to want to stream data in apps as opposed to load gigs of csv data like its 2008.
List&lt;T&gt; says that (because it implements the interface), and more
I guess I should've narrowed it down to toolkits, frameworks and engines though I always get confused on those terminologies. What's the difference between them?
If that's your domain, cool. I used to do that a lot too. But since the original question was about List&lt;T&gt;, I still think it is borderline off topic. You and I may deal with that stuff all the time, but most people never get remotely close to it.
The "more" is useful. For example the high performance struct based enumerator.
&gt; The original question was about List&lt;T&gt; vs IList&lt;T&gt;. You can't answer the question without talking about them. I did but then you came along and things spun off in a completely different direction. So, I tried to focus on the concept and somewhere along the line you were less interested in understanding what I was saying and instead looking past the concept I was discussing and looking for concrete specifics I wasn't even talking about (a.k.a. strawman). Rather than talk about the concept you want to be pedantic and talk about the concrete implementation... well we can't because OP didn't provide that. He asked a generic question, so I'm providing him or her a well-informed expert opinion guided by industry best practices and principles like OO design and SOLID design. Basic "Uncle Bob" kind of stuff. The argument I was making to OP and to you is quite simple. However, you seem to have taken umbrage against points I wasn't making or specifics that I was using generically. &gt; If you think knowing junior level information about collection classes is "playing gotcha" then I shudder to think about what your code quality was. Again, you are using it now. Besides, my metrics were and still are way above industry averages. There are reasons. Us old guys learned the lessons the hard way that you kids come along and argue against. I started coding and delivering production stuff before there even was the "world wide web". 30 years is a LONG time in this industry. I'm now a multi-millionaire (precisely because of my expertise in delivering good products) and continue to work simply because I love coding and working with technology. Information hiding is not like a "new" thing and is certainly not "controversial". So, I still fail to see how you feel I have "wronged" you in some way. [I am making that last deduction because this has to be at least the third if not fourth post where you have resorted to ad hominem.]
Why IEnumerable only? Task&lt;T&gt;, Func&lt;T&gt;, all of these things have a something in common. While I don't think there is a specific name for types that are both lazily evaluated and implement IEnumerable, the term to describe IEnumerable and other similar types that wrap types of T are known as [monads] (https://ericlippert.com/2013/02/25/monads-part-two/).
 **4.Request-for-help posts should be made with effort** Make sure any code is properly formatted, explain what you have tried, and where applicable try to create a [Minimal, Complete, and Verifiable Example](http://stackoverflow.com/help/mcve). Be clear and courteous. If a question that could have been easily Googled is asked without indicating what and why those typical results didn't work, it will be removed. Help posts that have had little effort put into them will be removed at the discretion of the moderators.
If your method uses a List internally, and returns that as IList, the enumerator and indexing members for IList are still the implementations defined on List. If you want the caller to have those benefits, they will, unless/until: The caller casts the collection into something else. You change your implementation to return something else that implements IList. Using IList as the return type allows such an internal change to not be a breaking change.
&gt; If your method uses a List internally, and returns that as IList, the enumerator and indexing members for IList are still the implementations defined on List. &gt; What about the other methods exposed by List&lt;T&gt;? What if I want to use Sort, which unlike OrderBy doesn't allocate memory? &gt; You change your implementation to return something else that implements IList. Such as? People have often said that, but virtually no one can think of a valid example. *** If we follow the Framework Design Guidelines, we should be returning a strongly named class (e.g. CustomerCollection instead of List&lt;Customer&gt;). This would allow freedom to change the implementation and add members without introducing breaking changes.
Which is the optimization? Returning the materialized list so the caller doesn't "have to" copy it to their own list, or sticking to the lowest necessary interface? What if 99% of the time they're just going to `foreach` it? *It depends*, of course. If you are defining an **abstract API**, then you should stick to the most abstract interface. If you're writing a **tool for a specific purpose**, such as a graphics library or a crypto library that deals in chunks of data, then a concrete type is more appropriate... but should also come with extensive documentation on its use and performance characteristics. In fact, that's a good litmus test. Are you going to feel the need to document the ins and outs of the performance implications of the use of your method? No? Keep it abstract (i.e. lowest interface). &gt; But since the original question was about List&lt;T&gt; List&lt;T&gt; is the catch-all collection that everyone starts with. Anyone asking the difference between List&lt;T&gt; and IList&lt;T&gt; could probably use the detailed explanation.
&gt; Or better yet, FooCollection which inherits from CollectionBase&lt;Foo&gt;. The latter is a "strongly named" collection and should be preferred for public APIs. No, never do this unless there's a really good reason for this. I hate these pointless wrappers. Dozens of types of collections are available but you force me to learn your custom collection? Why?
Yep. Should have been separate interfaces for enumerability, mutability, and indexed. At minimum. `List&lt;T&gt;` being a big multi-tool for everything comes at a cost. There are a lot of C# developers out there who have no idea why `myList.Insert(2, foo)` in a list with 100,000 items is a performance killer.
I disagree: the reason you shouldn't store plaintext passwords in the DB is that the DB could get hacked. For the very same reason, you should not store plain refresh tokens. If the DB gets hacked, the intruder also has the user agent data, and could forge the request. This is easily prevented by storing a salted hash. But of course, the other measures you mentioned are also valid and important.
I'm guessing because the inner implementation is essentially an ArrayList or std::vector and as a result of inserting like that it causes the array to realloc?
You can pre-assign the new size of that helps identifying the perf issue.
Bcrypt vs. Pbkdf2 an open discussion :) I mentioned Pbkdf2, because it's the official NIST recommendation. Also it's part of the .NET Core standard library. If you use enough iterations (recommendation is 10000, I believe...), it should be fairly secure. Even more as we're talking about random refresh tokens (and not potentially weak user passwords...), so the attacker really needs to do brute Force. But bcrypt is certainly a good alternative too, of course.
Assuming you’re trying to reverse endianness, which is what I assume from the other comments, why don’t you use BitConverter’s GetBytes method, reverse the array, and then pass that to ToDouble?
Your approach also comes with a different set of problems, that is why Microsoft recommends returning the most specific implementation you reasonably can. If you return a list via IList or IEnumerable the enumerator will allocate. When you would return a List this would not happen. Furthermore I would argue that if you decide to replace the return type with another collection type you probably could get away with only changing the methods return type if you use var to assign the function call result to a local variable. As long as the replacing collection implements the relevant interfaces (ICollection, IList) you perhaps don't have to change a thing.
There's nothing really to learn, as it just inherits from the normal collection base class. Many of them even inherit from List&lt;T&gt; itself. As for the benefit... well that depends on the nature of the API. Working with System.Data would suck if we didn't have SqlParameterCollection.AddWithValue. In other cases I would agree that just returning List&lt;T&gt; would sufficient. In the case of my open source libraries, I'm more diligent about using strongly named classes in my public APIs. Because if I do need to add a method, I'm going to want to add it properly and not just try to tack it onto an extension method that may or may not be seen by the user.
At least we finally have the IReadOnlyXxx interfaces. As much as possible I use them instead of IList for my parameters.
I don't understand what you're asking? If you need to dispose a subscription whose lifetime is required for the duration of that ViewModel then sure implement IDisposbale and dispose it there?
lol nah you just responded in a very idiotic way which doesnt make sense
Unity, with the amazing Jetbrains Rider as an IDE.
These days, for any new application, always WPF
Yeah that was my point. Usually when view closes, do you execute something on vm or let it dispose by itself.. like do you manually control unsubscribe time or let gc call dispose
With a return type of `List&lt;T&gt;` instead of `IList&lt;T&gt;`, you're not leaking implementation details, but you're restricting future implementation changes. I generally prefer `IEnumerable&lt;T&gt;` return types because the caller can decide whether to get the list into memory all at once&amp;mdash;or what kind of container to put the items in, be it an `IList&lt;T&gt;`&amp;mdash;which you can get with `l as IList&lt;T&gt; ?? l.ToList()` to avoid re-allocating a list or `List&lt;T&gt;`, which you can get with `l as List&lt;T&gt;`&amp;mdash;or pack it into your own `List&lt;T&gt;` if the object wasn't even a `List&lt;T&gt;` in the first place. I never use the "extra" methods of `List&lt;T&gt;` (e.g. `ForEach`) and `RemoveAt` is part of the `IList&lt;T&gt;` interface.
&gt; Yeah. I really wish that MS had changed the defaults. You should have to explicitly mark things public. Isn't this working this way? Classes and structs are internal by default if no keyword is provided, and that's how it works in VS template.
Understood. In my case I have a content presenter that binds the current ViewModel. I have a navigation service that determines the current ViewModel. If I navigate the content presenter takes care of what view should be displayed for that ViewModel. It's up to me to dispose of the previous view when I navigate to the next one. I hope this helps.
I use my fingers and my eyes. Sometimes my brain as well.
TypeConverters for frameworks. WPF uses specific custom collections for all the types like DoubleCollection and PointCollection. This allows for easy built-in string-interpretation into collections. There's nothing for you to learn, you just use the Add method and pass it around like a collection, while the framework code can do its magic with minimal reflection.
Since you’re inserting near the start it needs to move most of its elements to make room. Even if it has enough preallocated space not to need to be reallocated.
&gt; I generally prefer IEnumerable&lt;T&gt; return types because the caller can decide whether to get the list into memory all at once Can you elaborate how the caller is able to decide that? If im getting this right, the way you instantiate the data structure will choose it.
No, you said: &gt;the point of blazor is to use C# and existing .net library to do your logic without needing to manually interact with Javscript DOM manipulation should be purely from C#. I could equally ask if *you’re* on drugs, since that barely qualifies as a sentence. My guess is there’s supposed to be a period between “Javscript” and “DOM”. In which case your second sentence is wrong. DOM manipulation is straight up impossible from C#.
WPF sucks. WinForms for life!
Not clear what your question is. If you need heavy DOM manipulation, you’ll need heavy JS interop. You probably want to wrap as much of it as possible in components.
Advocating Winforms in 2019 is like advocating IE6 Just stop it, people.
&gt; technically you are supposed to check IsReadonly before modifying an IList That said, and given that List&lt;T&gt; explicitly implements that property (i.e., can't see that property except through an IList&lt;T&gt; or ICollection&lt;T&gt; reference), it would seem MS is giving us a hint to return the interface, not the concrete type.
Yes, for server use it's not free..
Advocating Winforms in 2019 is like advocating IE6 Just stop it, guys.
&gt; No matter the job or industry, I keep running into winforms. I've rarely had to touch WPF. Because you keep advocating legacy technology, maybe? Have you considered the amount of pain and suffering you're putting on people who eventually want to customize their controls and look of the application which is an absolutely monumental task in forms, but they refuse to try wpf because "winforms is what I'm familiar with" ? The people who eventually give up on that futile mission will just move away from desktop entirely and do another generic web app. Help the community; friends don't let friends use winforms. Promote WPF and help desktop thrive.
Arrays. Immutablearray. Immutablelist. Bitarray. Bitvector. All you can trust from an IList implementation is that it is enumerable, indexable and has a count.
Got it. Navigation service takes responsibility of cleaning up. Thanks.
Oh, sure. But I mean, why do I need the view in MVC if all I'll ever have is a view managed by a frontend framework? MVC will serve the first page and then API's to be able to talk to the backend. Much of the .NET MVC would never be used. That's what slightly confusing me.
&gt;15 years &gt;Mostly Winforms I think those two things are not independent. WPF is more recent and is therefore less likely to be seen or adopted by companies.
My view: my experience with Java is limited, but C# has the TPL which is just awesome. It's an abstraction over the thread pool that makes asynchronous programming much easier. It's usually what people use instead of threads. AFAIK Java doesn't have something similar to the TPL though, so that might be a difference.
WPF is the professional standard for modern apps. If you're doing legacy then you'll find Winforms but any new app should be done in WPF, and in the near future ideally be done in WPF in .Net Core 3. Winforms is legacy and will not be updated so people should stop using it for new stuff.
That does not seem to be the case, at least for .NET framework 4.8: https://referencesource.microsoft.com/#System.Core/System/Linq/Enumerable.cs,783a052330e7d48d,references
Because you put type inside &lt;&gt; and not parameter like it's done when using ()
The &lt;&gt; denotes a generic type T, which will be the eventual type of the list.
The angled brackets refer to genetics. The really simplified version is that in the same way that you can pass a variable into a function as an argument using Function( variable ), you can similarly pass a TYPE into a CLASS using generics. List&lt;String&gt; says you are creating an instance of the list class which is intended to contain Strings. The &lt;String&gt; generic that you provide is passed in to the definition of the class (usually with the convention of assigning it to the generic variable “T”). Then, in the class code, you can use T to refer to the generic type that was passed in. This feature allows you to then write methods which either specifically accept or return objects of type T. This can make your class instanced easier to work with. Additionally, you can have multiple generic types (e.g., key-value pair classes), and you can impose restrictions of the types of generic values that can be used (e.g., must implement an interface or class). That’s the quick, dirty, not-entirely-correct-but-good-enough-to-get-the-idea version. I’m sure someone else can explain it much better, but I hope it’s helpful. :)
This is exactly the explanation I was looking for! Quick and to the point. Thank you good sir!
In every language I've seen an insertion in a dynamic array has to move every element after the insertion. Should be somewhat common knowledge.
Okay cool I’ll hav ego look into the differences more I guess. Luckily my school does offer some C# in the form of Unity games and simulations. Thanks for your help!
My pleasure! Hopefully the google machine will give you a better idea with some nice examples. This is just off the top of my head after a few drinks, having most recently using C# about a year ago, so my answer’s probably far from perfect. Good luck on your programming adventures! Even with its misgivings, C# is a nice language, and .NET has some neat aspects to it. I’ve fallen into Python land but I think you’ll enjoy what C# has to offer!
I'm so glad that the software I write, doesn't require me to handle these theoretical issues.
You could try to duplicate an existing product that you use. Pick a feature and implement it, then extend the app by adding more features
You wanna use IList wherever you can, and wherever you use IList you should try to use IEnumerable
Then the callsite can call ToList. But you don't want to force your subclasses to return lists.
I want to sort of summarize what became very long discussions. ## The Philosophically Right Answer /u/Jestar342 and /u/grauenwolf kicked off this line of discussion. Normally, an API is good if it works at the highest possible level of abstraction. `List&lt;T&gt;` is a specific implementation of `IList&lt;T&gt;`, with particular behaviors. If your API takes `IList&lt;T&gt;` as parameters and returns it from functions, you're free to choose whatever concrete type you want to return. So from that view, most of your APIs should be using `IList&lt;T&gt;`. ## The Snag However, Microsoft did a very bad job designing and implementing this interface. They decided that read-only list types should also implement the interface. So if you want to use `Add()` on `IList&lt;T&gt;`, you're supposed to check `IsReadOnly` first. That's against most people's concept of "a list". Worse, there is a different concept of read-only between arrays and some read-only collections, so even if you check the property you can't be sure what it means. The 'L' in SOLID is for "Liskov Substitution Principle". When it's followed, you can trust that every implementation of an interface is interchangeable without adverse side effects. Since `IList&lt;T&gt;` has optional features with ambiguous definitions, it does NOT follow LSP and that makes it more difficult to use. `IEnumerable&lt;T&gt;` is a better example of an interface and LINQ works so well because it is so tightly constrained to one definition. So in practical application, almost no one uses `IList&lt;T&gt;` for parameter/return types instead of `List&lt;T&gt;`. It's too likely for some customer to try one of the weirder types and get mad that you throw an exception. ## The Paranoia There's a much longer thread that starts with /u/BCdotWHAT's post a layer of comments down from grauenwolf making some good points. You can derive from `List&lt;T&gt;`. The most common reason is to make a better name for a type, but it also gives you the ability to override methods or add new helpers. Overriding methods like that should be done with high caution. `List&lt;T&gt;` has a fairly complicated interface definition and it's easy to make mistakes. If you make mistakes, the people who use your custom collection type are going to encounter weird bugs because of LSV: if you say you're a `List&lt;T&gt;`, they expect you to behave the same as a `List&lt;T&gt;`. Some people have been burned so hard by abuse of inheritance they feel the pain constantly, like Frodo's wound from the Morgul blade. They have vowed to never inflict that pain on another developer again in their lifetime and *never* extend types by inheritance like this. They aren't wrong. There are other ways. All of those other ways mean a user can't be confused when your `DefinitelyNotAList&lt;T&gt;` doesn't behave like a `List&lt;T&gt;` in some circumstance. But like every design decision, it has the potential to make your codebase harder to use than if you'd derived. So be pragmatic, and understand *why* it hurts someone else if you derive a new `List&lt;T&gt;` type and override methods. It hurts if you: * Throw exceptions where a `List&lt;T&gt;` wouldn't. * Return a value a `List&lt;T&gt;` wouldn't. * Have side-effects a `List&lt;T&gt;` wouldn't. * Example: "This is a list of bytes that represent UTF-8 characters, so I overrode the indexer to return a `char` and there might be fewer items than `Count` implies, but if you call `GetEnumerator()` you'll iterate over each byte." Basically, if you derive from a type and override its behavior, you're sort of committing to writing a unit test for the full contract of everything you override and ensuring that every unit test passes in both your derived type and the base class. People who use inheritance well understand this and stick to very simple contracts so this is easier. `IList&lt;T&gt;` and `List&lt;T&gt;` have relatively complex contracts. The risk is exacerbated since lists are so widely used in .NET code. So "NEVER derive from `List&lt;T&gt;` and extend it" is *wrong*, but I think "AVOID deriving..." is correct. It's hard to do it right, so often it's better to not do it at all. ## Executive Summary * This question should have a simple answer, but these interfaces make for a good lesson about API design due to their mistakes. * Practically speaking, you can forget `IList&lt;T&gt;` exists. * But in general, if an interface *and* concrete type are available, you should depend on the interface. (That's a part of the 'D' in SOLID: Dependency Inversion tells us, "Depend on abstractions, not concretions." But it assumes the abstractions follow SOLID.) * If you commit any of the sins that are discussed in the longer thread, it is legal for your users to murder you. Keep that in mind.
May I ask what type of development you did so far with C# ? I was in a similar position several years ago, so based on my experience, here is a list of things you could try: 1) These days most fields have a subfield with "computational" as a prefix, where you can write code related to that field. For example if you studied Physics you could look into computational physics. I would recommend doing some courses if needed to get up to speed in these areas and make the transition into coding. This way you won't have to join a meaningless competition with a compsci major. And you could, in the end, contribute something unique to the coding community from your non-cs background. 2) In parallel, I would strongly recommend coming up with projects of your own or trying to work on open source projects. It's a good way to learn. Coming from a non-cs background myself, when I interviewed for my first coding job, I knew the answers to their questions because of the projects I worked on, and not because I learnt it in a class. I wish you good luck !
What do you use?
Thank you for the advice, I am actually looking into free online courses atm, so atleast I can say I have a qualification at the end of it. In terms of my development projects, I have mostly experimented with building little games, but I am now learning .Net framework as that makes me more employable. I just feel it will take me forever to make any meaningful progress given my current job - but its better than nothing.
People are explaining *what it does* but I want to answer another facet of your question. Why *did* C# choose to use `List&lt;T&gt;` instead of `List(T)`? It turns out VB .NET chose to use parenthesis. Generic types in VB .NET look like `List(T)`. The reason is philosophical. VB is based on a philosophy that tries to use words over symbols when possible, and doesn't want to use too many symbols. C# chose a different goal. It's based on a philosophy that prefers to use unique symbols for different concepts. Here's a line of C# where that stands out against VB: int item = GetItem&lt;int&gt;(items[3]); The VB version is: Dim item As Integer = GetItem(Of Integer)(items(3)) Look how many different things parenthesis are doing in that one line of VB .NET! They represent: * A function's generic type parameter. * A function's parameter list. * An array indexer. The keyword `Of` had to be introduced for generic type parameters because otherwise the compiler couldn't tell if you wanted to define a type parameter or a parameter list! It's also unclear, without context, whether `items` is a delegate I'm calling or a collection type with an indexer, isn't it? Compare that to the C# line. * The type parameters are between `&lt;&gt;`. * The function parameters are between `()`. * The indexing is done with `[]`. So it turns out sometimes, VB's focus on simplicity makes things *more* complex. C# avoids this problem by using more symbols. That's why it's `List&lt;T&gt;` instead of `List(T)`.
It's much harder to learn
No? Winforms is on .Net core which means Microsoft still cares.
It isn't though. You can have the exact same workflow as winforms, close the xaml if you want and work in the designer. There's no reason to use forms.
OP said "professionally". What you described is not professional. If you want to use WPF for real applications then gotta do xaml, databinding, mvvm...
Yeah, stuff you can't even do in Winforms. By this distinction professional winforms is *way harder* to achieve the same result.
Why are you comparing the two? Winforms is for simpler applications and wpf is for complex applications
Because wpf can make simple applications too, with the exact same approach, only you're left with something that can more easily be refactored.
ToString is a method which to be implemented by a type. Using the index syntax returns an Object which may have a real type behind the scenes. It's best to use the typed getters generally.
The reason I have strong opinions about this is because I still saw the forms kind of un-maintainable crap being produced at my workplace. The devs sure were good at convincing managers it was the right approach. I tried fighting it in the beginning but all concerns were dismissed. So I started ignoring it; "let the managers feel the burn once issues crop up." Alias, I was the one given the tasks to fix those bugs. Literally just trash being thrown my way from decisions I opposed in the first place. No thank you, let the people who made the mess clean it up, I warned about this exact situation and I have better things to do. MVVM would've at least given us some separation of concerns, but here we are in 2019 producing more ui-dependent spaghetti code people can't be bothered to refactor, so shit is being copy-pasted around with minor tweaks in feature additions. On cruise ships. Have a nice trip.
By typed getters, you're talking about `.GetInt32()` and `.GetString()`, is that correct?
Don't bother with framework, learn .net core. And tbh an online class certificate isn't going to carry much weight with prospective employers. I'd want to see projects that you've built and see how well you can explain your design decisions. I'd also want to see how well you understand data structures, algorithms etc.
&gt;&gt; technically you are supposed to check IsReadonly before modifying an IList &gt; &gt;That said, and given that List&lt;T&gt; explicitly implements that property (i.e., can't see that property except through an IList&lt;T&gt; or ICollection&lt;T&gt; reference), it would seem MS is giving us a hint to return the interface, not the concrete type. I'd venture that the reason why it's explicitly implemented is because there's no reason to check it on a variable of type `List&lt;T&gt;`: the answer is defined to be `false` on that type.
Yes
Thank you! I'll try that out
Thank you! And I apologize for the ignorance.
Join an open-source project.
Very nice! Yes, I can definitely understand an employer wanting fresh and cheap.
Thank you for taking your time for this in depth explanation. It helps me really understand the concepts better!
&gt; Some suggests that you can use GUID for this one but others say that GUID has a pattern. In the end, it’s up to you to decide what to use. It's not hard: If your tokens can be guessed, then your security can be broken. The only thing that has no structure and cannot be guessed is a random number. If something has structure or follows a pattern, then it is by definition not a random number, and thus, is insecure. Guids have structure and so are insecure. For an article about a core security primitive, you should not use such lose and fast statements as "egh, do what you want". There is only one secure way here, and it is complete randomness.
Makes sense. Plus in today's booming economy, there's definitely a shortage of developers, even in large cities. Keep learning and get the hell out of wherever you're at. Developers are making 80-120K where I'm at and there's high demand!
lol so you are basically targetting my grammar now okay bro, you guys are really crazy lmfao. you basically just said what i said but in a kore tryhard fashion. probably had to open a laptop just to respond to this hahah get a life idiot
In C there was only (). Then C++ introduced templates that use &lt;&gt;. C# generics are based on C++ templates so C# kept the &lt;&gt; syntax, even though templates and generics are quite different.
&gt; lol so you are basically targetting my grammar now okay bro No. I’m targeting the low effort you put into writing that post. I’m doing do largely because you, in turn, have been attacking OP. Instead of doing that, try working on your writing skills.
This is a great response. Many thanks for writing this.
Microsoft needs to provide an upgrade path from .NET Framework into .NET 3.0, otherwise those shops will never migrate. VB 6 Runtime is still being kept up to date with latest Windows versions, that doesn't mean one should start a new application on it.
Microsoft just published the WinUI 3.0 (nee UWP) roadmap at build.
I think given the high demand for programmers the degree or qualification is not as necessary as the experience. I think the best way to get some experience is to do some real project because classes tend to solve a problem that is designed for the given lecture but real life is different. You should think of an application for a given purpose for yourself (or solve some problem at your work with software). Create some requirements whitout thinking about if you can do it or not and then try to implement it. If you are stuck with a specific problem you can ask for help on stackoverflow or here. One of the most important skill is solving problems with some Google magic. Also I recommend .net core and mostly web applications seems to be the trend now. Keep going, there are a lot of developer job out there and some companies are willing to hire someone with limited experience and train them. I trained such employees at my previous job and I have colleauges at my current job with similar situation. The most important in this situation is the willingness to learn if your teammates see that then you will be fine. Development is an awesome job if you are interested so keep pursuing it.
Put them in a panel and set the IsEnabled property of the panel based on the state of the selection criteria. That’s what I do lol
As someone who's been through this ringer, my recommendation is to start in tech support and work your way up. I've just moved into a "support developer" position, based on my work over the last two years, and while it's been a grind given I started with zero technical knowledge, I've dug my heels in, worked hard, and impressed people in my company enough to push me up the ladder. If you're prepared to accept going back to the bottom rung of the career ladder, you can work in the field and build yourself up while learning on the job. &amp;#x200B; I took the time in my career to learn SQL, Python, C# and other skills, and they paid off for me. I would recommend doing the same.
thanks man! appreciate it alot
They're expensive, but you could try a boot camp to really bootstrap your education. A lot of them have good networking opportunities also. Lambda school has a very interesting financial situation where they'll pay you a monthly stipend and you pay it off when you get a job. Something to be weary of is that none of this is super easy and you'll probably need to do some learning after you get your first job. That's not to say it's hard, but you're gonna need to be prepared to work for it. We just hired two boot camp devs and they're turning out pretty well. As others have said, we need devs badly and if you have the drive and some work to show, we'll probably hire you. I come from an IS background because I thought CS would be too hard. I'm currently going back and learning computer science things to enrich my development with programming. I started with a web dev tutorial from Microsoft on .net framework. I'm sure there is one for core as well. The MS one was pretty good so I'd start there.
https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/guidelines-for-collections
Just webpack and plain-old JavaScript. ReactJs.NET just muddies the waters.
Hmm, difficult to answer without more information. ListBox and ListView both have a GroupStyle property and you can add the default GroupStyle, but you first have to group your collection. If you have a combobox and then a label/textbox form in a grid next to it then binding the ComboBox.ItemSource to the collection, and set the Grid.DataContext to the same collection you can get automatic synch by setting the ComboBox.IsSynchronizedWithCurrentItem to true.
If MS really wanted us to return IList&lt;T&gt;, then why doesn't LINQ's ToList() return an IList&lt;T&gt;?
Winforms has a place, a small one, but important one. My app at work is 75% WPF and 25% WinForms. We use WinForms for the grids since WPF grids just couldn't match the refresh rate of WinForms, this included control vendors supplying tuned examples. WPF is great, I love it, but the binding engine has lots of issue once you get around 10k bindings which is really easy to get to with a grid with a large number if columns and rows.
Overall I found this to be interesting and compelling, but I have two objections. &gt; Normally, an API is good if it works at the highest possible level of abstraction. I feel our industry is overly obsessed with abstractions. Having the right abstraction is far more important than having the highest possible abstraction. Moreover, `IList&lt;T&gt;` isn't really an abstraction over `List&lt;T&gt;`. It doesn't simplify any of the methods, it just hides some of them. An abstraction is something like `File.ReadAllLines()` which simplifies the `File.Open` and the related stream-handling logic. &gt; So "NEVER derive from List&lt;T&gt; and extend it" is wrong, but I think "AVOID deriving..." is correct. It's hard to do it right, so often it's better to not do it at all. This is a minor point, but according to the **NET Framework Design Guidelines**, `Collection&lt;T&gt;` is the recommended base class for custom collections. It acts like `List&lt;T&gt;`, but provides the necessary hooks to do override it correctly.
Sure. I also generally use generators rather than instantiating a list. So, instead of: public IEnumerable&lt;T&gt; GetStuff&lt;T&gt;() { var result = new List&lt;T&gt;(); result.Add(_stuff1); result.Add(_stuff2); return result; } I write: public IEnumerable&lt;T&gt; GetStuff&lt;T&gt;() { yield return _stuff1; yield return _stuff2; } I'm not sure whether that answers your question.
&gt; It turns out VB .NET chose to use parenthesis. Generic types in VB .NET look like `List(T)`. Small correction: `List(Of T)`
The UK based company I work for takes in apprentices once a year. AFAIK they pay for you to get a degree and have you gain in-house experience as well as a small salary. In return you have to work a few years for the place after getting your degree. We've taken in people that wanted to retrain and that have been around the same age as you. Point being that there are ways to get into development. Try and get into an apprenticeship. Try getting into manual QA to get your foot in the door and work your way up from there. It is possible. Good luck.
It is in .Net Core: https://github.com/dotnet/corefx/blob/master/src/System.Linq/src/System/Linq/ToCollection.cs#L20 which calls here: https://github.com/dotnet/corefx/blob/a10890f4ffe0fadf090c922578ba0e606ebdd16c/src/Common/src/System/Collections/Generic/EnumerableHelpers.Linq.cs#L110 which uses this helper class: https://github.com/dotnet/corefx/blob/a10890f4ffe0fadf090c922578ba0e606ebdd16c/src/Common/src/System/Collections/Generic/LargeArrayBuilder.cs#L69
Anything that has a mature linux toolchain.
It was just a thought, really. I'm in agreement the interface is broken. The fact that we're supposed to check a property to determine whether Add/Remove/Clear can be called has always been weird to me, not to mention the ambiguity between IsReadOnly meaning you can't Add/Remove but you can modify contents by index, or in some cases maybe you can't.
VB looks so sexy, close to Ada, Pascal.
I tried my hand at this four years ago. https://github.com/ariugwu/mudz I keep telling myself I'm going to get back into it but, you know.....life. Maybe you'll find it helpful. My dream was to build something from scratch every year, let people follow the commits and videos as they liked.
That's an interesting change, thanks for making me aware of this!
&gt; Isn't this working this way? Classes and structs are internal by default if no keyword is provided, and that's how it works in VS template. Admittedly, it has been at least 2 years since I checked so it is possible they (finally) changed it. But last I saw, and I'm certain from the early days through at least 4.0, if you used the built-in templates your class was public by default. If they did change it, great! That's what I had argued to be done for quite some time. While I haven't used C# in a little over 2 years I haven't been involved with the C# team in a lot longer than that, I was arguing my case pre 4.0 days.
This seems to be largely covered by C#8's pattern matching expressions: var x = GetObj().Property.Property.value switch { var value when condition(value) =&gt; value, _ when otherCondition =&gt; "foo", _ =&gt; null } https://github.com/dotnet/csharplang/blob/master/proposals/csharp-8.0/patterns.md https://devblogs.microsoft.com/dotnet/do-more-with-patterns-in-c-8-0/
Alternatively just a local method.
That only applies for the specific case of switching on a value. Expression blocks would allow pretty much any type of control flow
&gt; A similarly functioning syntax can already be achieved by using local functions. However, this isn't the greatest option, because closures can be messy, and they screw with variable lifetimes. Plus, defining a function only to use it a single time looks kinda gross.
Closures of local methods are structs. They don't mess up the lifetime.
I use telerik, it plays nicely with MVVM. Their support is good from when I trialed it. Never used devexpress, though.
The difference is that you never use `IList&lt;T&gt;`, because it's useless.
Honestly I love how constructive and friendly this sub is :)
Also +10 on python land. There with you buddy!!!
Because they themselves know that `IList&lt;T&gt;` is useless.
Correct question: "When do I use `IEnumerable&lt;T&gt;` vs `List&lt;T&gt;`?" Answer: Use the former for public APIs that return a collection. Use the latter for internal APIs that return a collection.
What's wrong with int x = condition ? value1 : otherCondition ? value2 : value3;
That only supports one type of branching logic. Expression blocks would support any type of control flow.
Yes, that's always the way it's been for C#. (VB has different defaults, which make no sense.)
/\\
WCF (server-side) actually has been [open sourced](https://github.com/CoreWCF/CoreWCF) just a few days ago. So if you have an existing WCF service and want to target .Net core and don't want a rewrite, this might be a good migration path. Here's the related [announcement](https://devblogs.microsoft.com/dotnet/supporting-the-community-with-wf-and-wcf-oss-projects/) for it. Quite curious from here on where WCF will go (new feature-wise, perf etc...) after they make it production ready.
Man, I was in the same place at 28. I was government consultant, and did some programming here and there. I started a project on the side,pounding that keyboard every night. I finally got.a real.programmong jobs about 3 years later. I credit that side project with getting me the job, because I had practical things to say from the experience of teaching myself and solving real world problems. Before I started the side project, I read books and watched courses, doing countless little projects. But though I was exposed to a lot of theory, I didn't really understand the WHY behind things until I got away from following along with tutorial projects and was doing something on my own. Key things to learn are: * Some front end tech. You can go web dev here, if you want to do that sort of work, but it's a broader body of things to learn. Or go winforms or wpf. These are still used for tools, interal apps and legacy apps. (My first job was porting an old winform apps to mvc4) * Learn MVVC - this pattern is useful in many places, and if you come to grips with it you will be well on your way to learning how to architect things * Learn sql, because everything is data, and sql is everywhere But the key thing is to start building a real thing, and stop doing tutorials. And put your time in. I eventually worked in big and small companies and a few game studios. I attritbute my career to the lessons learned during that initial ass kicking. Good luck
In your example of ecpression blocks, I would use something like `yield` instead of `return`, as `return` always returns from the enclosing nethod or function. And for using expressions, I would use something different too, like `with` for example, as the `using` keyword already has a well defined meaning in C#, that of automatically disposing disposable objects at the end of its scope. And indeed, C# 8.0 will have using expressions.
Removed: Rule 4
One thing about Java is that Sun/Oracle/JCP seem to hate adding new things to the standard library, instead relying on third parties to write it. Heck, Java Enterprise Edition is literally a bunch of specs created by the JCP that have no implementations shipped with Java.
I thought that `using` wasn't the best keyword, but I couldn't think of anything else. `with` definitely makes more sense. Also, the `using` declarations in c# 8.0 are completely different from what I have proposed here. Unless there's a different feature that I'm not aware of. Thanks for the feedback!
I don't see the need for new syntax. If you need to use this in 2+ places, an extension method, a logic processor or a type seems the right way to implement this.
Usually you have a set of possible styles assigned to unique identifiers (in database: primary keys), could be an integer for example. Hairstyle 1 has Id 0 and so on. You just save which character uses which hairstyle (character x -&gt; hairstyle id y) and not all the information about the hairstyle for each character. All depends on the complexity of your game of course. Take a look at relational databases
Codemaid or the built in code fixes with an editorconfig file can get you fairly far, but you can't really define custom actions. Roslynator has a parser library in addition to their plug-ins, and that could be a good place to start for implementing things like the comments at the end of braces. I'm 95% sure that my Visual Studio shows matching top snippet in a little pop-up when you mouse over a closing brace. Is that not good enough?
&gt; Is there such a role, where someone would take me on to develop my C# on the job Problem is, in order to do that I have to take experienced developers off of productive work and have them attempt to teach you. That's expensive, both in terms of salary and opportunity cost. Who do you suppose gets paid more - a teacher at your university, or a senior developer? It might also cost in employee satisfaction. I didn't hire teachers. I hired developers. In general, they will neither enjoy nor be good at teaching. I don't even have the slightest clue if you'll amount to anything. This is all risk and expense from the employer's point of view. I'm not a charity and I'm not a bootcamp. You're not even at a junior level. The chances of you finding a situation like this are slim to none - and I'm saying that from the U.S. From what I understand the U.K. values software development much less, making it even less likely you'll find someone to front that cost and risk just to possibly get a developer in a chair.
I started as a developer at 27. I had a degree in Chemistry and since graduating I'd managed a bar. I taught myself C# and threw myself into the job market. It is doable...**however** it isn't easy and I was lucky to have no dependents and an understanding partner who was willing to move wherever I could find work. Also you will have to start from the bottom and that most likely means a pay cut. If you excel your pay should bump up fast but at first it can be low. Best of luck to you!
ok bro
I think you should not be embedding your scripts in _Host.cshtml. Have your js (divided into different files based on purpose) in wwwroot and use the script tag to reference it. The jquery library (ugh, I would probably look for an alternative) function can be put in a separate file and called from C# when rendering is done, so call the JS method from [`OnAfterRenderAsync`](https://www.c-sharpcorner.com/article/life-cycle-methods-of-component-in-blazor/) method of your component.
Why, yes, it shows popups with hints and all. But it needs to be done too often. Thank you for the recommendations! Will try them as soon as VS will done updating.
https://www.sqlite.org/docs.html
Now a thought come about a feature like Code Lens thus the sources won't be annoying for the people around me. And since it's an extension, tiny labels on the minimap and different colors of background for scopes in the both map and working area.
Oh no... [https://i.imgur.com/WtK9qMe.png](https://i.imgur.com/WtK9qMe.png)
That's absolutely possible, but it'd be a lot more work if you had to do it from scratch. I'm not sure what sort of extensions are currently available.
Hey there all... there is a great little tutorial for this here [http://rbwhitaker.wikidot.com/c-sharp-using-generics](http://rbwhitaker.wikidot.com/c-sharp-using-generics) A friend showed me the tutorial ( [http://rbwhitaker.wikidot.com/c-sharp-tutorials](http://rbwhitaker.wikidot.com/c-sharp-tutorials) ). I finished a game in unity last month and still realised that there was alot that i did not understand about c# so i did this tutorial. It is not youtube which is a relief to me really, it is nice plain text with no ads. He site covers the making of games by the way. Also, great answers below (or above?)
How long is the load time when the cache is cold?
I am hosting it on a low end free tier configuration in Azure, so it's not super fast. However, it doesn't matter to the performance of my site since I only call the function at build time before generating static html that I serve to visitors.
The function is called as part of the build process described here: https://www.syntaxsuccess.com/viewarticle/server-side-rendering
It's not ignorance if you're trying to learn it. It only ignorance if you refuse to learn it or think you are better off not learning it. Questioning for best practices is a great way to learn.
I got it right later. It still looks "like" `List(T)`.
That is a good point about the enumerator garbage in certain cases. Your last point is something I disagree with, though. Using var in that way should be avoided when possible in my opinion. It is possible that a refactor such as you describe compiles but breaks behavior, but is also easier to read (for me) when the type is explicitly on one side or the other.
Dotnet Format ist making its way into the vli with 3.0. give it a try.
It's only because I've already written this particular one, my friend. ¯\\\_(ツ)\_/¯
Here's something to get you started. I'm on mobile, so sorry in advance for any errors. static string[] hairStyles = { "bald", "black", "brown", "blonde", "red" }; int selectedHairStyle = 0; public void button2_Click(object sender, EventArgs e) { selectedHairStyle++; } Lots of possible improvements here, but this is just to show the basic idea is that the possible hair styles and the selected hair style will be defined outside the method and the method with simple update which one is selected.
Codemaid is a miracle! It does a lot of dirty work. [Supercharger](https://marketplace.visualstudio.com/items?itemName=MichaelKissBG8.Supercharger) has shown its potential , when it comes to navigation. It does a lot, but it feels too, idk, loud? I'll return to it in future, but this day is for Codemaid.
Thank you! Definitely a huge step towards the idea of a custom extension.
There are only one way to find out is the cat still alive. I mean, open the box.
Thank you so much, I will make sure to try this!
Removed: Rule 5.
Oh god, a Nuget package too? Now you're just encouraging people to do terrible things.
If you're choosing to write software in Javascript, then performance is almost certainly of secondary (or less) importance.
[Learn .NET](https://dotnet.microsoft.com/learn) This should be a good place to start.
[https://studyblazor.com/](https://studyblazor.com/)
Once upon a time I thought that anything written in assembly would be faster than C or C++. I was wrong. Good algorithm beats lower level programming language almost every time. Do not switch to other language if you are not 100% sure that you need it. By the way if you write DLL in C++ and call it from C# then calls themselves may be much slower than simple C# calls. You could lose performance on something you did not even consider as an issue.
1. Official Tutorial on ASP .NET Core: [https://docs.microsoft.com/en-us/aspnet/core/getting-started/](https://docs.microsoft.com/en-us/aspnet/core/getting-started/) 2. Official docs on Blazor: [https://docs.microsoft.com/en-us/aspnet/core/blazor/](https://docs.microsoft.com/en-us/aspnet/core/blazor/) 3. Build 2019 video (great Blazor demo!) [https://youtu.be/y7LAbdoNBJA](https://youtu.be/y7LAbdoNBJA)
Are these akin to AWS Lambdas?
Yes, this is pretty much the Azure variant of AWS Lambdas
This is just a closure with slightly different syntax.
Sweet. I can see this being super useful compared to AWS Lambdas. Just compile your C# into CLR and upload to Azure. Compared to Python where you need to make sure you package up all your dependencies and upload them to the Lambdas. That can be real tricky...
How do comments help with memory issues?
I do a lot of work in .net. What is Blazor?
 Blazor - New .Net core UI framework for SPA
&gt; SQLcustID.CommandText = "Select ID from Customer where business_name = '" + CustomerListBox.Text + "';"; Noooo! That's a serious security vulnerability. See "SQL Injection Attack" for details, or just search for "Michael's Pizza" to watch it fail. This is what you need to write, SQLcustID.CommandText = "Select ID from Customer where business_name = @business_name;"; SQLcustID.Parameters.AddWithValue("@business_name", CustomerListBox.Text);
Yes, you can read all of those fields at once. See the "FindByName" example here: https://grauenwolf.github.io/DotNet-ORM-Cookbook/SingleModelRepositories.htm#ado.net Your SQL is going to be "SELECT ID, Address, City, State, ... FROM ...
If you want to simplify even further, look into Dapper to handle your SQL to C# translation. https://dapper-tutorial.net/
Ah, web development. OP’s post was phrased in a way that sounded like he was interested in .net stuff in general
So something like angular?
Check out Mosh Hamedani on programmingwithmosh.com or Bob Tabor's devu.com
A closure is turned into a struct or class which turns any variables referenced by it into fields. The code in the closure is then turned into a method as a member of that type. This wouldn't generate invisible types or turn anything into a field or method. This wouldn't do any of that.
If you don't want to make major changes, follow other suggestions in this thread. If you want to learn more (i mean *quite amount of things*), you can look into: 1. MVVM pattern: You should move to WPF since it contains this feature natively. First, create a ViewModel for your UI. It is is a data class that contains the properties that displayed in your UI. Probably like so `public class CustomerViewModel` `{` `public string BusNumber { get; set; }` `public string Phone { get; set; }` `// and the remaining` `}` 2. Then, you bind the properties for your UI components to the properties in XAML. Something like this `&lt;TextBox Name="BusNumberTextBox" Text="{Binding BusNumber}" /&gt;` 3. Use Entity Framework. Then you can do query using LINQ like `this.DataContext = databaseContext.Customers` `.Where(c =&gt; c.business_name == CustomerListBox.Text)` `.Select(new CustomerViewModel` `{` `ViewModelProperty1 = Property1InDatabaseTable,` `ViewModelProperty2 = Property2InDatabaseTable` `}` use join where appropriate You will need to learn WPF MVVM Bindings, Entity Framework and Linq. These will make your work much cleaner in the future.
Lets just say that the non-generic version of `List&lt;T&gt;` is named `ArrayList` for a reason... Well, technically two reasons as the original non-generic collections largely share their names with Java 1.1's collections.
Unless you got a job making a Blazor app, I certainly would not consider that the most important thing to be learning.
That's one way of implementing a closure. A closure is an abstract concept, though, not a particular data structure.
Why don't you like dapper? Dapper is amazing imo. It's super easy to use and performance is great too.
&gt; VB's focus on simplicity makes things more complex. More complex for the compiler, but a lot less for the reader who only needs to learn one convention.
Have you looked in System.Net.WebSockets and System.Web.WebSockets? They're part of the framework.
It brings .net "in general" to web.
There are some great suggestions in here already. Here is some more detail for you. &gt; I *should* be using ExecuteScalar when I want to put these values in different boxes, right? No. Here is what you should do: * Use a single SELECT statement and use a parameter for business\_name: &amp;#8203; Select ID, address, city, state, zip, phone, fax, contact_name, email from Customer where business_name = @business_name * As above, use a parameter (for security reasons): &amp;#8203; command.Parameters.AddWithValue("business_name", CustomerListBox.Text); * If you want to stick to a pure [ADO.NET](https://ADO.NET) solution, use command.ExecuteReader instead of command.ExecuteScalar even if you are only reading one row: &amp;#8203; using (var reader = command.ExecuteReader()) { var result = reader.MoveNext(); if (!result) { throw new DataException("Record not found"); } var recordcustID = reader.GetValue(reader.GetOrdinal("ID")).ToString(); var recordAddy = reader.GetValue(reader.GetOrdinal("address")).ToString(); // ... etc ... } * As above, be aware of objects that implement `IDisposable`. The `using` statement above automatically calls `reader.Dispose()` when it goes out of scope, even if an exception is thrown. Make sure the `SqlConnection` is disposed or you might eventually starve the connection pool. You should also make sure the `SqlCommand` is disposed too because it implements `IDisposable`, although I'm fairly sure for the command object it doesn't really do anything. * Consider using Dapper instead of [ADO.NET](https://ADO.NET). It simplifies parameters and reading results. It will make the code even shorter. The code could be written in only a few lines with Dapper, not counting the lines to write the class for the returned record. &amp;#8203; var customer = connection.QuerySingle&lt;Customer&gt;( "Select ID, address, city, state, zip, phone, fax, contact_name, email " + "from Customer where business_name = @business_name", new { business_name = CustomerListBox.Text // this is the parameter } ) Dapper eliminates the reader and command objects so there is no need to call `Dispose` on anything but the `SqlConnection`. * There are many more general improvements that can be done even in my own code (such as using constants instead of literal strings for `GetOrdinal`). I hope that helps!
Thanks for letting me know, I completely missed this announcement. I will keep an eye on this project.
I wonder if SQL interfaces should just drop all string queries completely and only use combinators. Otherwise basic vulnerabilities will recur forever.
I haven't. Strange how I've missed them. Thanks!
Don't sell yourself short, my link didn't include any explaination.
Using "using" or "return" just confuses everything. having a bit of code that uses your return statement, and the proper return statement would be nasty. Adding new keywords is risky as it will break any existing code that uses those keywords as variables. If your code contains things like "obj.Property.Property.value", then you have bad code. You should not be chasing values down a chain of properties. Finally, you could probably knock together a snippet that inserts the code you want. Have a read of [the snippet documentation](https://docs.microsoft.com/en-us/visualstudio/ide/walkthrough-creating-a-code-snippet?view=vs-2019)
Fingers crossed :)
I would like to use just a raw SQL connection since this is my first project with it
Off the bat you should minimize the variables; any paired&lt;T, T&gt; would do because you get the logic. But if you wanna go down that road, the SqlCommand initializations could go straight to conn.CreateCommand().
Then you'll be seriously limited in the queries you can write, and you'll always lag behind.
Why do you think combinators would limit you beyond not allowing quoting vulnerabilities?
I learned a lot from [sqlitetutorial.com](https://sqlitetutorial.com), hope it helps!
I think the site is offline
More interesting concept, but not production ready yet. Blazor executes c# code in the browser using WASM.
As does any .net web platform. It’s still a very specific application of .net
Because SQL is a fairly complex language. It likely is possible to represent a large set in combinators, but it wouldn't be practical by far.
Meh, if there are no ownership issues the whole discussion becomes mood anyways, although you could argue that you should return ICollection so that you can change the implementation without breaking calling code.
Any .net web platform provides .net runtime in webassembly?
I'm aware of SQL complexity. I disagree with your assessment of expressive power of combinators.
So you learn smelting to build a new chair? Just so you can start by smelting your own screw driver, and screws instead of just buying the right tools of the home Depot? I would always recommend learning how things work from the top down. Know the concept and usage, then follow the chain down later if you're still interested
Not quite right. VB.NET came about as a way to coerce VB6 developers into .NET. I spent some time at Microsoft looking at some of their tools which claimed to translate VB6 into VB.NET back when it was released. It only worked for very simple use cases. Slightly later a key compatibility requirement was with Office. This is part of the reason VB.NET had optional parameters way before C#. Office development used to be (mostly) done in VBA, which was VB for Applications. You could also use C++ for certain things, but ignore that for now. That's basically it. VB.NET hangs around for historical reasons, but most developers made a switch to C# asap because it made it harder to think like a VB6 developer.
Wait, what's SPA?
I suggest you follow microsoft developers channel on you tube too
Single Page Application. Basically you create a single page, and leverage javascript (or a framework) to load content into your page, and handle routing, dynamically
I really want to know this too. I built a label printing service, and it would be super slick to have the windows service reliably communicate with a user's browser (through a hub that everything else is connected to) around print job status, and giving the user the ability to pass commands back to the service via websockets. I have a temporary work-around that posts to a web service, which then drops into a queue of messages that's read by the hub, and forwards to the user... but it doesn't feel good.
another layer of translation, C# =&gt; WASM =&gt; Javascript. Idk its a goer myself but maybe it wont suck.
Basically, what everyone has always done with Javascript, but now with a shiny new acronym.
WASM runs directly on the browser and isn't transpiled into JavaScript.
Yeah, basically. It's popular within an MVC.net project, since javascript can talk directly to a controller.
I wanted to learn it so that I *can* try and get a job involving Blazor. I was trying to get ahead of the curve. I don't know much JavaScript, but I feel that coding C# is much easier. Blazor is client-side C# like if it were JavaScript, right? What do you mean "Blazor app?"
Its gonna ping back to Javascript at some point though isn't it? Otherwise the browsers are going to have to reimplement all the bindings and such.
I'm in the same boat as you.
That's easy just `blazor.execute().bind(this)` I kid. I kid.
IIRC there is some level of interop between WASM and JS.
So, put up an example. There’s a reason most libraries use strings to express raw SQL. It’s not safe and secure, but flexible.
Hi You can look through sample code for it here: [https://download.sterlingtrader.com/documents/sterling\_api\_examples.rar](https://download.sterlingtrader.com/documents/sterling_api_examples.rar) Good luck! Let me know if u need help with that.
What do you mean by ping back? Wasm is designed to run alongside javascript currently, not replace it. There is no transpiling or anything though, just an interop between the 2.
What do you mean? JavaScript can always talk directly to a controller with network requests...
JavaScript used to be much more heavily used on a page by page basis i.e. each page was still a separate network request.
Unless your client has a websocket that is publishing to a SignalR hub that is externally available for you to listen to, you'll want to use the System.Net.WebSockets instead.
Websocket-sharp should still work fine for that simple use case. It's not maintained but it's basically feature complete. There's a full port to Core - I'm using it in a Core 2.2 project to consume real-time updates.
A quick google shows one: https://github.com/vivainio/SqlFrags I'm surprised there aren't more for .NET.
You might learn it and still not get a job with it if it turns out there are no jobs with it :)
I think that's what I said? MVC.net projects are popular because you can build controllers and talk to them directly with javascript. Does my previous comment imply something else?
For the first jobs to arrive that require Blazor I think we have another 5 years ahead. Companies are slow. Very. Slow. Even startups won't use experimental stuff in production.
Glad somebody else noticed that. That gave me heart palpitations.
Unless you are experienced, you wouldn’t get the job. If you want a path, learn razor with javascript, then transition to blazor upon its release. Blazor still requires javascript bindings and will for awhile as people won’t rewrite their existing large frameworks.
Blazor can be both or either client/server side. The best thing about blazor- no js. It uses SignalR and you dont even need to be bothered by ajax calls (for no postback).
SqlFrags looks more effort to write, harder to read, and probably lacking lots of syntax, compared to a simple string.
You probably can't use SignalR because SignalR is its own custom framework built on top of the we socket protocol. If you don't implement it on both ends, SignalR won't work.
The posts which are saying it's not there because it's a console app are wrong - I use this in console apps all the time. I think the problem, though, is that you've created a **.Net Core** console app. In .Net Core, you need to do these steps by typing commands into the Package Manager Console - there is no wizard to help you. If you want to add Entity Framework in this way, it needs to be a .Net Framework app - and that applies to console apps or to any other kind of app at all.
oh, that is interesting. Not having to learn or keep up with angular would be great. We don't use it much at my current employer so I haven't dug too much into it.
\+ Upvoted. &amp;#x200B; I can't really argue with any of that - certainly wish I could! I appreciate the honesty.
While you're not wrong, you've changed the scope and theme of my post. For the topic at hand, I'm discussing overarching VB design philosophies that borrow from ideas that guided the BASIC syntax and were even part of the original decisions made in designing C. You're trying to steer it to, "Why Microsoft decided to support VB .NET and maintain late binding" but that's off-topic when we're discussing why parenthesis were overloaded with a new role. I know it's tempting to, "Well, actually...", but when you do it ask yourself if you're helping support the current topic or if you're steering the conversation somewhere else. The former is good, the latter is know-it-all behavior.
Mind giving some examples of un c# code?
It’s always a bad idea to connect your application directly to the database. You would have to expose database credentials, and it would open up your application to ‘unprotected’ access (of user information, for example). If the database user also has write access to the database, you’re pretty much _asking_ to be hacked or defaced.
WASM is already embedded is all of the browsers. C# compiles to a WASM binary, then that is executed in the browser. You can interop with JS if you need to. But as far as functionality it would replace the need for databinding frameworks like angular, vue, or react.
Yeah, but in c# instead of js
What do you mean by "connecting directly to the database"? For backend apps (MVC, web API's, WCF, etc), you can connect directly to the DB (hopefully through a data-access layer). For front-end apps (angular, desktop apps like winforms and WCF, etc.), they *must* go through some backend service to read and write data to a database. The backend should be authenticating and authorizing users to control user access to resources like the database.
Removed: Rule 4. What errors and exceptions? I don't believe you can arbitrarily insert blank lines using the built-in automated behaviour. But you can implement `IXmlSerializable` and read/write the explicit elements and attributes that you need: https://docs.microsoft.com/en-us/dotnet/api/system.xml.serialization.ixmlserializable https://stackoverflow.com/questions/279534/proper-way-to-implement-ixmlserializable https://www.codeproject.com/Articles/43237/How-to-Implement-IXmlSerializable-Correctly
This is a very, very subjective opinion. At one time, when I did a lot of *both* VB .NET and C#, I could lay out an entire essay of situations where VB makes it very hard to tell what's going on. But let's stick to the scope of this subject. Here's some lines of C# that do different things. int value = something[3]; // an array index. int value = something(3); // delegate or method call int value = something[3][3]; // Jagged array index. int value = something(3)[3]; // Array index of a value returned by a function. int value = something[3](3); // Delegate call on the return value of an array index. Here's the 4 equivalents in VB .NET: Dim value as Integer = something(3) = something(3) = something(3)(3) = something(3)(3) = something(3)(3) Notice something? In VB, identical lines can mean different things based on context. You can't tell if a set of parenthesis is meant to be a parameter list or an index operation unless you know the types of everything involved. This is especially tricky when the options are set to enable late binding and non-strict typing. That's why C# chose to use different symbols for different operations. "Better" here is a philosophical argument. It's "users have to learn fewer symbols" vs. "users can understand context". The only thing I feel like noting beyond that is users still have to learn the differences between array indexing, multidimensional array indexing, calling methods/delegates, etc. whether or not different symbols are used. (Some of those syntax choices are code smells as is, but learning what hurts is separate from learning what's possible.)
I’ve used this with success recently. Shouldn’t need anything else to get a consumer up and running.
Hosting a WPF control means that *within* the control you would have animations and decorations and such as you wish, but you wouldn't get WPF features to apply to that control. For example, if you host a WPF Button, you aren't going to be able to storyboard or animate the button on the Windows Form. Placement and Anchoring rules are still dictated by Windows Forms in that case.
If you feel more comfortable with C# than F#, what \[SqlServer, MySql, PostgreSql, Oracle, SQLite, or Firebird\]-specific SQL syntax SqlKata can't express? Let's collapse the probabilities. Edit: here are the docs for your convenience: [https://sqlkata.com/docs](https://sqlkata.com/docs)
&gt; I wanted to learn it so that I can try and get a job involving Blazor. There aren't any. It's too early. And there's certainly no guarantee it will ever become popular or provide a job market. It's also different enough from everything else that those skills aren't very transferable. &gt; What do you mean "Blazor app?" An application made using Blazor..
There is only translation to web assembly, and considering all c# code is also translated to run on the server I don't think there is much to be concerned about here beyond it being relatively new.
While I agree with a lot of the other comments here about blazor jobs needing more time, I still think blazor is an incredibly valuable tool which radically speeds up development, and would recommend it highly for personal projects too.
I’m not a very good programmer but I would think that you could store your random numbers in an array then nest some for each loops to search your user numbers one at a time against the random number array then have the loop add each bingo to another array then you can output the bingos array
If you have a browser part absolutely use SignalR no question about it.
In the comment I replied to, you claimed that one should prefer to return a 'more specific' type like 'ICollection or IEnumerable' over a more concrete one like FooCollection, to avoid 'leaking your implementation details'. I don't think this response really understands encapsulation or information hiding as principles (either should be satisfiable by returning a custom collection), and I'm having trouble deciding if you are using 'specific' in a term-of-art sort of way or have just gotten it backwards and meant 'more general' (which seems wrong, but it's the interpretation that is obvious from the common usage). Regardless, I think this misunderstand FooCollection to be a specific type built for internal use and exposed out of convenience, where it's probably intended to describe a type explicitly built for composing contracts to be returned to the consumer. FooCollection *should* be as specific or general as the original developer intended, and changing its implementation shouldn't be regarded as a breaking change, unless it also changes the public behavior it exposes. This seems like OO 101, though, and something you ought to be grokking if you're as smart as you claim. &gt; I'm an expert in this field. You don't seem like it, and I can't tell if the problem is that you aren't willing/able to follow the argument you were presented with, or if you just can't make yourself understood. &gt; You are using some of my code. Not relevant.
`Array.IndexOf()` would probably be useful, combined with a loop. Or if you want to go the LINQ route there’s `Intersect()`.
I mean something like connected mode or entity framework.
Will check it out. Thanks!
I solved the matter. It wasn't complicated at all, as I thought. One classmate managed to give me a hint. The Start/Restart game button had just to be defined similarly to the GameArea loader method. The game over method, on the other side, required a Bricks.Count object which was the one I precisely didn't know at all. This counter determined the bool function to finish the game or not. But it was necessary a trigger in case the game finished. For that I just set the case true for when I hit A or D (control buttons for the game) the first time after the brick amount became 0.
Still working on [CryptoTrader.Tax](https://www.cryptotrader.tax) which is a tax calculator for cryptocurrency traders. Have been able to learn a lot about microservices in .net core along the way!
&gt; You can't tell if a set of parenthesis is meant to be a parameter list or an index operation unless you know the types of everything involved. Ah, but with the exception of true arrays, an index operation is just a function call. So the contends of the parens are still arguments either way. In C# we have this concept of a default indexer with its own special syntax. In VB, we have methods. And a property is just a pair of methods. And that pair of methods can have parameters. myCollection.Items(5) = "A" One pair of methods can be marked as the default property, removing a little bit of verbosity. myCollection(5) = "A" And we made it back to C#'s default indexer, but via a very different route.
That's an incorrect reading of history. A lot of developers happily moved to VB.NET, as it had a lot of things we wanted like multi-threading and real inheritance. Exception based error handling was also a nice surprise. Many of use were bitching and moaning about backwards compatibility, but we dealt with it. Yes, there were also a lot that jumped directly to C#. But it wasn't until a few years later that it started to become clear that MS wasn't going to support VB as a first class language. That's when the mass migration started.
To me it implied that SPAs are popular withing an [MVC.net](https://MVC.net) project because javascript can talk directly to a controller (it was in direct reply to someone talking about SPAs) My issue with that was that javascript can always talk directly to a controller, so I don't see why your comment was specific to SPA's. Sorry if I misunderstood!
Take a look at [https://docs.microsoft.com/en-us/dotnet/api/microsoft.lync.model.conversation.conversationmanager?view=lync-client](https://docs.microsoft.com/en-us/dotnet/api/microsoft.lync.model.conversation.conversationmanager?view=lync-client). &amp;#x200B; We use that to integrate with Skype currently.
:) I get what you're saying, I was trying to add some historical basis for a lot of the language design decisions. Remember that generics came after VB.NET or C# were first minted. Constraining the topic is reasonable, but letting it breath is also helpful.
Good news. I have been meaning to have a play with it for a while now and never quite seem to get around to it :)
Gotcha. I meant that an MVC project is popular when building an SPA, because you'll have controllers as server side end points for javascript to communicate with.
&gt; Even startups won't use experimental stuff in production. Blazor is no longer experimental No way will it take Blazor five years to get to 1.0 status Our shop which caters to startups uses 1.0 status projects in the JS world all the time.
I'm going by what I remember at the time. The people I spoke to and worked with were initially taken with the notion of VB.NET as we came from VB6, but most skipped it or moved to C'# pretty damn quickly. You know, I can't even remember where we used to discuss this stuff back then. Was it Google groups? Did they inherit Usenet or something? Sooo long ago :) I wouldn't say it happened overnight either, we're talking 20 odd years ago. I think the last time I saw someone actively using VB.NET would have been around 2007, and as above that was an Outlook add-in. At around the same time I was doing IRTDServer stuff with Excel, but in C#. Anyway, I'm not saying you're wrong. I imagine there were a few routes people took and I imagine we each coalesced around the people with similar views, but I know from my time at Microsoft that VB.NET was specifically introduced to encourage migration from VB6 to .NET. (BTW, I didn't work there, I spent weeks working with them on behalf of my company).
Originally .NET was supposed to just be the next runtime for VB. Then they got the idea to make the runtime universal, kinda like COM on steroids. That's what opened the door for experimenting with Cool, which eventually became C#. So in a way, C# stole VB's birthright. Something to keep in mind is that this wasn't VB's first major break. The transition from VB 3 to 4 was very painful, and every version introduced a different database access technology. (DAO, RDO, ADO)
You aren't virtualizing your grid then. It's a setting you can toggle on and you'll get way better performance than your winforms.
I mean, WPF has been around since 2006. It's not that much newer than WinForms, especially as that was 13 years ago.
Thanks for the response! I'll give this a shot and report back
Ah right, you mean like as an API rather than traditional .net MVC (with razor views etc). Makes sense now!
:) I didn't know that. Actually I possibly sort of did, but probably not in such detail. I kind of remember J# being a response to the uprising of Java, and I'll be damned if I remember when that came about. I can't remember VB3 or 4. I must have been there, but I was not a proper developer back then. I did maintenance type things in various languages and systems. Did you ever see Advanced revelation (ARev)? That was way ahead of the curve in many ways. &amp;#x200B; Anyway, I'm disappearing down nostalgia lane, so I'll shut up :)
&gt;JS world okay
Very well written!
Correct. You can use an API controller, or a standard MVC controller. I typically leave API controllers out of the mix unless I'm authenticating outside of the application, or require access from another application.
Because you mentioned Blazor and some c# developers are afraid of their shadow with new tech you've gotten t very few answers. A great place to start is here &amp;#x200B; [https://visualstudio.microsoft.com/dev-essentials/](https://visualstudio.microsoft.com/dev-essentials/) and then use it to get a free month of Pluralsight. Blazor and .net core 3.0) isn't released yet so their won't be much there for blazor but it will catch you up on Pages and [asp.net](https://asp.net) core 2.2 which is a solid base for [asp.net](https://asp.et) core 3.0 and blazor. From there a link you have already been given is a good start [https://docs.microsoft.com/en-us/aspnet/core/blazor/?view=aspnetcore-3.0](https://docs.microsoft.com/en-us/aspnet/core/blazor/?view=aspnetcore-3.0) as with any not released yet software Googling and searching on youtube is a good way to go. As for jobs. I think a lot of the responses are overly pessimistic. Of course there are no companies advertising jobs for Blazor yet but that doesn't mean its a poor investment to learn for your career. A) There is no such thing as a separate Blazor project. MS has brought it right into [asp.net](https://asp.net) core. Learning Blazor is part of learning [asp.net](https://asp.net) core 3.0. B) Because of point A jobs advertised in the future that use Blazor may not even use the term blazor. They'll expect you to now [asp.net](https://asp.net) core which includes Blazor. C) Blazor is just C# Many companies use C# No company will be using Blazor for the next five years? Really?? so why are a few popping up now already [https://www.indeed.com/jobs?q=blazor&amp;l=](https://www.indeed.com/jobs?q=blazor&amp;l=)
Yep and they pay in the same Green currency all jobs do and care about using any tech that works - .net is finally in a position for startups to find viable.
A .net core containerized microservice application with angular, signalR and a proper message broker like rabbitMQ has been the best stack for years now.
Ye but what ya gonna do when it don't work properly? I hope your WASM is good.
Java sucks compared to C#... Here is just a small subset of things that C# has that Java doesn't have or doesn't do well in comparison (as far as I'm aware): - Delegates - Local functions - Structs - Alias (using static) - runtime compilation (via Linq expressions) - ref/out parameters - stack memory allocation - value tuple syntax - XML documentation (much better than Java docs IMO) - variable assignment in lambdas expressions (Java doesn't appear to allow local capture variable assignment) - goto statements - "#region" preprocessor directive - "#if" preprocessor directives - operator overloading (+,-,*,/) - extension methods - "nameof" keyword Most of those are language features... I'm not even going into much of functionality available in the core frameworks. And there is a huge feature being proposed in C# 9.0 that if adopted will add "Shapes" to the language. Shapes are essentially extensionable interfaces that allow instance and static members. Personally, the lack of delegates in Java is a deal breaker by itself. I will never use Java until they add better functional programming support.
&gt; J# being a response to the uprising of Java, and I'll be damned if I remember when that came about. J# was released with .NET 1.0. It was based on Java 1.1, which was already obsolete, so it had no chance of actually getting Java developers to move over. Before that was J++, which was real Java + Events &amp; COM. P.S. WTF do I remember this old, useless crap?
wrong URL lol now it's fixed
.net core has been rarely used for true start ups compared to node and other platforms. Thats not even debatable for anyone that knows the startup space. The main reason for that is ecosystem and development time for MVPs. You are getting into a stack argument regarding what is technically superior. Thats a common misconception when applied to startups. Startups have real world business considerations that seldom break down to what is most superior but what gets them investment dollars and market share in a necessary time frame.
Microsoft doesn't care they just don't want the enterprise customers to flat out leave. And they've always been believers of long term support. But don't mistake that for caring about Winforms or WPF. They would drop both in a hart beat over UWP if they could.
Just found this great article on C# Generics, so I thought it belong here along the other answers :) [https://www.c-sharpcorner.com/UploadFile/deveshomar/basic-of-generic-class-in-C-Sharp/](https://www.c-sharpcorner.com/UploadFile/deveshomar/basic-of-generic-class-in-C-Sharp/)
Note that one benefits of SignalR is that it adapts to the features present on both sides - if one side doesn't support websockets then in tries another way down to polling. Said that, it isn't very suitable for your case.
Ok thanks
Well that's exactly what I wanted to prove my point: Startups don't care about technical superiority. That's why I see Blazor in 3-5 years in companies not earlier. They will rather go with the latest JS Framework, be it Vue or anything else coming in the next years. Real world businesses use things that work. And they know they have good support and they have worked at the past for other companies.
I much prefer API + SPA rather than mixing 2 front end frameworks in the same project (like your MVC spa approach) but each to their own!
well, since you want to tell the user how many bingos they got, instead of having a bool for "win" you should have an int for "numberOfBingos" and then you can check if that's &gt;0 or not. That leaves the question of how to figure out the numberOfBingos, which I'll leave unanswered for now but if you're still stuck let me know
When did you feel comfortable applying for a C# job being self-taught? When did you feel your skills were good enough to use 9-5?
This worked out of the fucking box. Thank you! I will try implementing this same functionality with an alternative library as well!
As long as it is a backend app (MVC, web api, etc.), then you can connect to the DB directly as long as you can authorize users to be able to access it. Don't do this for front-end apps. Entity Framework is the recommended way to go but isn't required.
Yeah kind of stuck. Having been working with this assignment for a lot of hours and can't really figure out that last part. Can't really figure out how to see numberOfBingos..
thanks for respond. But I m still confused about "don't do this for front-end apps". what can I do then if I have a database?
F# has this feature, basically. It's super nice.
Have you tried using the path C:\ ? I haven't tried this, but in theory it should work. My gut feeling is that it's going to cause a LOT of overhead on your PC though. Files are changing all the time on your hard drive (temp files being created/deleted, etc.)
Lol :) Yes, I remember J++ now :) &amp;#x200B; If we don't remember the past we will repeat its mistakes. So I'm getting you bubble wrapped ;)
Do you have a lab/TA (teacher assistant) to help you?
Took me about 3 months before I started sending applications. That was probably a bit soon but luckily I found a company who were happy to train as long as you had the basics and the enthusiasm
Cool insights! Thanks
Thanks for the explanations in the thread
Been here, suffered this. Give up and: - Use Slack. It has Webhooks. - Use Teams. It has Webhooks. - Use pretty much anything else. They have Webhooks. We use Skype every day. I want to control my LIFX lights when I'm in a call. No hope.
Fair enough
Yeah, it's an online course. Will ask them afterwards on Thursday when the assignment is supposed to be complete. We can't ask for help really, they only give grades on the assignments. You get to go through an online book that is supposed to cover the basics of c#.
Wait until you see Rust 😎 https://doc.rust-lang.org/std/fs/struct.File.html use std::fs::File; use std::io::prelude::*; fn main() -&gt; std::io::Result&lt;()&gt; { let mut file = File::create("foo.txt")?; file.write_all(b"Hello, world!")?; Ok(()) }
You can skip angular.
Ah ok. And do I need to learn javascript in great depth? As I am new to Javascript.
Does one guess that is in the random array equal a win? And thus you can end the program? If so, your code would be like: for (int i = 0; i &lt; userGuesses.Length; i++) { for (int j = 0; j &lt; randomArray.Length; j++) { if (userGuesses[i] == randomArray[j]) { Console.WriteLine("Guess found!"); return; } } } if you need to sum up all the correct guesses make an int and increment it (like the i++ in the for loops)
Nah not really. Just the basics are fine. Id recommend to maybe stick with ASP MVC 5 and EntityFramework 6 - as these have been around for like 7 years and have great documentation/stack overflow answers/results in the web. ASP Net Core 1.0, 2.0, and 2.1 are kind of a mess for learning how to do XYZ since they kind of moved around a lot as the ASP Net core was maturing.
Ah I wish I could but I’m using Mac so it’s not option for me. But yeah you’re right, there seems to be more grey areas with ASP.NET Core in terms of learning everything. Guess I gotta deal with it... Thanks!
Thanks man! Will try it out tomorrow after work. Just want a way for the program to randomize 10 numbers and then check them against the 10 numbers the user has entered. Then see how many of them match and give the user a message of which were the same. Also how many bingos they got. We are supposed to use vectors and for-loop in this assignment.
If it is a front-end app, then the front-end app makes requests for database operations via the backend app (which authorizes the requesting user). Front-end apps are hosted on the user's machine (browser, desktop app, etc.). Backend apps are hosted on a remote server. Some web project templates in visual studio are actually comprised of both (i.e angular + web api).
The question is a little bit confusing. There's a couple of things to consider and even the easy answer has a couple of facets. But I'm going to guess since you mentioned MVC Core and React you're writing a web application. Here's how that sorts out. The MVC part of your application is ASP .NET and will run on *your* server. That C# code always runs on your machine so it can connect to the database. I'm not using the word "safely" because safety is a function of how you design your SQL. The React part of your application is JS and will run on *someone else's* machine. It should *not* connect directly to your database. Either it should get all of its information from when your ASP application generates the page, or if it has to make requests for more information it should have to do so through an API. The reason for this is connecting to the DB requires credentials, and you do *not* want credentials on the client machine. You might think, "But my application user doesn't have access to bad things!" is enough. The problem is part of the credentials involve the IP and port needed to knock on your server's door. If there is an exploit that allows an attacker to trick your server into being a different user, they can and will wreck you. So anything that a user who isn't you needs to touch should do so through an API. The API code is technically you, running on your server, so it can connect directly to the database.
Using the List class would probably be best IMO. That way you can add items to it pretty easily and dont have to worry about an array/vector indexes and avoid index out of bounds errors. https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1?redirectedfrom=MSDN&amp;view=netframework-4.8 you'd create a List&lt;int&gt; and then do like `randomInts.Add(random.Next(1,25));` to add randoms to it or user guesses in a similar fashiuon
Ok, let's start with an easier problem. If you only had one user-entered number, and one bingo number, you would know how to determine if it was a bingo, right? Ok, so in your assignment you have a bunch of user numbers and a bunch of bingo numbers, so we need to find a way to go from many numbers to only one number. By using a for loop, you can go through a bunch of numbers one by one. So you can use a for loop on your user numbers to take it down to one at a time, and you can use another loop to take your bingo numbers down to one at a time.
I suggest Discord and Telegram to this list. Discord can anything that Skype can, but it's also allows you to create severs with chat and voice channels and it has a nice API for bots and also webhooks. Telegram is more a mobile thing. But has also a very nice API
What's with the question marks?
Okay now I wonder how that works. Do you get all the fence and then just filter by file path? Or does it only generate events for what you're watching?
As long as the filters are set as described, it probably won’t be too much overhead. It probably won’t be that useful either, as: * you can’t rely exclusively on a file system watcher to catch all created files (it might be fine for these file types in particular, though) * Finder/Explorer will just recreate those files as needed * you’re not really solving any problem You can always [disable DSStore creation](http://osxdaily.com/2010/02/03/how-to-prevent-ds_store-file-creation/) on network volumes but… I’ve never understood what problem that solves. Storage? Performance?
Fuck if I know. I tried learning rust but the syntax really irks me. rather just write modern C++ with smart pointers and more modern practices. I think its like the `?.` nullable ref operator thingy in C#
Hey man, &amp;#x200B; Here's my issue with your license. I work for a big company. They want to have clear and defined licensing terms and they're willing to pay for it. I personally wouldn't try something without being able to test it first. &amp;#x200B; So I'm stuck in the, do I go with PostSharp which is too much, or with Fody which is just right but has a weird license that I can't personally pay for (even though I would) because I'm only on this contract for a few months more. At which point I'm personally off the contract and no one would be paying you for it anymore. &amp;#x200B; I LOVE LOVE LOVE what you're trying to do, but I wanted you to know why I personally struggle to support you with this model. I recently saw that CockroachDB did something similar and like their approach. Anyway, Not a lawyer so I can't say what license to use, but I want to pay you to put your code in this project, I just don't know how the company can do that. P.S. I'm going to work with company to see if we can sponsor project or something IDK but your code would save us a ton of time writing generic logging code with IL manipulation.
&gt;Well that's exactly what I wanted to prove my point: On the contrary You defeated your own point not provided any proof. By doubling down in comparison to the JS world you proved you are wrong. The Js world does not take 3-5 years to start using a framework or package and startups clearly use the JS ecosystem &gt; They will rather go with the latest JS Framework, A substantial amount of the programming world still dislikes JS. Since I have established startups use JS and node frameworks and packages relatively fast your claim it takes years for startups to start using new tech is defeated. Dislike in Js and no long time needed for startup adoption means we will start to see companies begin going in to asp.net core 3.0 and Blazor within months after release. Doesn't seem you understand what Blazor is . Its not a separate project to be adopted. its part of core 3.0. Saying its going to take 3 -5 years for startup companies using and adopting asp.net core to use what is in fact included in asp.net core 3.0 is nonsensical. As a matter of fact there are companies already stepping into Blazor even before its released officially and yep hiring with Blazor in mind. https://www.indeed.com/q-blazor-jobs.html SO much for &gt;the first jobs to arrive that require Blazor I think we have another 5 years ahead
I know this isn't the answer you came looking for, and ignore me if this practise is something that has been considered by a team and worked into your companies way of working but personally I'd hate to work on code with that many comments. Comments by design are supposed to tell us something that we can't infer by ourselves and 9 times out of 10, sensible method names combined with a good ide and proper seperation of concerns with methods and layers should accomplish the same. Your comments about the end of a class or namespace are inferred from your ide via highlighting and i would smell something iffy with my code if i had too many usings, loops, if statments or switches that i couldn't easily see where my class ends. This is usually done by negating an if statement for example checking if a variable is null upfront and returning an exception rather than nesting a lot of if statements together. Todo comments are generally fine, but should highlight functionality that is actually todo in a small space of time. Future functionality is best left to whatever ticket managing system you use. Real method names and smaller methods makes everything simpler again, so having a method called GetProductById in a database layer shouldn't really need a comment above it to figure out what it does. Obviously if you're creating a library then you want full intellisense then that's a necessary evil. Have a look at Robert Martins blog for code comments. Hopefully it can describe more.
Too much love
Probably about the same as trying to debug IL. I expect Microsoft did their job, which I feel is a pretty safe bet given the history behind .NET, although if they didn't I'll just write a test to demonstrate the issue and submit a bug on GitHub. If the bug is in something truly urgent / critical I'll have someone on the team with that experience work on it, or bring in a contractor for a few hours, it's really not that difficult nor that large of a concern in day to day business.
I just have this experience of the The Compact Framework where they ported a thing on one platform to an entirely different one and it was a world of NotImplementedException and having to dig into the internals to get shit done. Lets hope I'm wrong on this but I feel like the draw of C# on the browser feels too silver-bullety.
Removed: PVS Studio is permanently blacklisted.
How are you binding the source to the file? Do you have to perform any I/O foreach file load? How did you use the dispatchertimer, that doesn't sound right as I have a lag-free experience with nothing but a listbox bound to a list of fileinfo objects and a mediaelement with its source bound to selecteditem. Debugger does say I am jumping up into 400-600mb+ memory when changing selections on mp4 files with 70-270 mb sizes.
I can see where that experience would influence your perspective. So far I haven't run into anything like that, fingers crossed going forward.
https://doc.rust-lang.org/rust-by-example/std/result/question_mark.html ? is used at the end of an expression returning a Result, and is equivalent to a match expression, where the Err(err) branch expands to an early Err(From::from(err)), and the Ok(ok) branch expands to an ok expression.
I would learn git / source control.
If they want to stick to Winform in the long term, learn .net core 3.0. Source control, continuous integration, continuous deployment, test framework, unit testing will give you a good perspective on the software lifecycle. I've been developing C# application since the version 1.0 and still loving it. The broad range of applications that you can develop is awesome.
Is this blazingly fast safe error handling then? 🤔 (Im joking, but thx anyways. Rust just isn't for me I think. Rather just program in superior C# :D )
I am with this guy. Best advice. Even if they don't use git / source control yet, getting them to use it makes you a very valuable asset to have.
Sure, you can watch a drive's root directory. You shouldn't have to worry too much about bogging down your system in the process. Just make sure to set the notify filters to as narrow as you can while still accomplishing what you need. Monitor, though. Some systems will handle this shotgun approach better than others. I've done quite a bit with FSW over the years. One thing I've noticed is some processes like to create a 0-byte file then come around later to write to it (even if it's just a few ms later). If, in the meantime, you have caught a create event and deleted the file, it's possible you could be triggering errors in those processes (e.g. if they are assuming the file they just created is still there). Probably they are handling the errors gracefully, but you could potentially be adding a little overhead to *those* processes and to the system overall by extension. Probably not a big deal, but something to consider. Worst case scenario is you catch a create, delete the file, the process which created the file comes around to write to it and says, "Hey, my file's gone. I need to create it again." Round and round she goes. :) In any case, do you definitely have a need to watch the whole drive and delete these files in real time? Or can you scan for them and delete them periodically? It does seem a little overkill to set up a windows service to do this (but then, I don't know your exact needs so I could certainly be wrong.) It might be that a simple script run on the task scheduler could suffice.
What is a good resource to learn git and source control?
fwiw this is how rust works. everything is an expression. it's a bit to digest when coming from c#, but it works out great.
Make sure you encrypt that database, don't want to fail your assignment for a HIPPA violation. :P
1. Download git 2. Search for a beginner's guide either written or video 3. Follow the guide and create your first repo and commits 4. Find out how to undo things and look at the history 5. Find out how remote repositories work and services using remote repos like github, azure devops, gitlab 6. Use one of these services to push your repo onto it / pull your repo to computer/folder 7. Learn how to make branches, merges, pull requests 8. You have learned how to use git well enough to work with it 9. ... 10. Learn advanced things like git branch strategies, advanced commands like rebase, etc.
Follow the coding conventions set out by your peers or, at the very least, learn this - https://github.com/ktaranov/naming-convention/blob/master/C%23%20Coding%20Standards%20and%20Naming%20Conventions.md
Official website: git-scm.com Open an account on github or on Azure DevOps and start playing around. Azure DevOps Source Control documentation: https://docs.microsoft.com/en-us/azure/devops/user-guide/source-control?view=azure-devops
First you need to decide domain boundaries. If your objects have high cohesion, they probably belong in the same domain/micro service. If you’re going to include a list of exams on the student class, just realize that you’ll need a table in your student MS to map it to the exam. The exams would be defined in your other microservice I would imagine. Your classes may not look as you’ve outlined, unless you decide that students and exams belong in the same domain.
There's only one way to access the data a micro-service owns and that's through the microservice. You must make the necessary API calls and provision some discovery system to allow both systems to communicate. Here's a couple of tips: - I know this is a test and all, but don't fragment into too many services. There's such a thing as micro services that are too small. What you should instead do is architecture your code in such a way that when a split is necessary, you can do it easily, and ensure your servers are horizontally scalable. - The tricky part about micro services is service discovery. Invest time into solutions like consul or load balancers to allow services to talk to each other.
This will sound weird but: have a peek at WPF and get a feel for how MVVM works. While you're at it, also review the Task API, though in my *humble* opinion the Event-Based Asynchronous pattern was made for WinForms. Here's some longer justifications. Separation of Concerns is a big deal in modern application development. WinForms doesn't really make that apparent. If you have a peek at WPF and MVVM, you'll get a feel for ways you can put logic in nice little classes to help your UI concerns stay separate. Don't do this, and after a few years you'll start to feel why I said it was important. The main problem is WinForms data binding isn't as sophisticated as WPF's and doesn't really help you separate concerns. So anyone who did a pattern like MVVM with WinForms (they probably called it MVC due to the time) had to write some janky middle layers and most people decided "software engineering is for dumb nerds" as a result. They're wrong. That aside, it's also important to understand, very early, how to do the heavy lifting on worker threads and safely update the UI without hanging it. That's why I suggested looking at Tasks and the Event-Based Asynchronous Pattern (what a long name!). The sooner you learn how to do that, the better. Surprise third suggestion: start reading about unit testing and good overall design. Pick up *The Art of Unit Testing*. Look into books like *Head-First Design Patterns*, or *Clean Code*, or honestly *Working Effectively with Legacy Code*. All of them are about the process of trying to write your code like it's a lot of tiny, single-purpose units that work together to do one thing. It sounds so simple, but people fight against it. My final advice: buy a notebook. As soon as you can, just dive into the team's code and take notes. Figure out what form starts first. What happens before it displays? How do you get from there to other forms? Draw a map. When I was younger, I liked trying to describe the app like a choose your own adventure. Now that I'm older I'm surprised how well it works. You'll impress the heck out of people if you can quickly sort out how the app's put together and start knowing where code needs to go before they explain it to you. Oh, also: if you notice they AREN'T using MVVM/MVC/whatever patterns, and AREN'T unit testing, and AREN'T doing asynchronous code well... you can try to advocate for better practices, but they might not take kindly to the new guy telling them everything's wrong. Probably better to stay quiet, get yourself some experience from them, and keep in mind you can use that experience to find a better place later.
If you don't know it yet I think it would be best to learn well SOLID, Design Patterns and Domain Driven Design, in this order.
Hey, thank you for the feedback. It's not about my preferences tho, but rather limits.
Web stuff is a weird mishmash and it can feel like you need to know a bewildering amount of things to even get started. But if all you have is ASP .NET Core, some basic knowledge of HTML, and some basic knowledge of CSS, you can get pretty far. JS is for making things *nicer*. You don't *need* it to write a fully-functioning app. One of the bigger things it can do for you is validate things client-side in a form so the user knows they made some error without having to wait for a page reload cycle. It also lets you show/hide things in response to user clicks and a lot of other neat little UI tricks that it's perfectly acceptable to omit when doing school projects, which are usually more about hitting all the major concepts than making something that looks like a real site. Angular builds on that. It's like jamming an entire website into one giant page. So instead of having "a login page" and "an appointment search page" and "a confirmation page", the user downloads every page plus a lot of JS that tells it which page to load first and how to talk the web browser into displaying an entire new page without actually reloading. Since there's not a natural server-client cycle, you have to learn new mechanisms to talk to the server rather than Form posts, which is what you'd learn from simple HTML and JS. I think you should write a few small applications before building up to this one, and after this project's success you can look at Angular. It will make a lot more sense when you already understand how to write a web application. You'll also appreciate a lot of its features more. My experience was after I'd played around a lot with ASP .NET MVC and Razor Pages, it felt awkward to host an Angular page from an ASP .NET application. What I mean is I felt like ASP .NET Core has two concerns. One is "serving web pages that can be dynamically generated by this app" and the other is "being an API for clients". The parts that can dynamically generate web pages are *basically* doing everything Angular was designed to do, they just do it on the client instead of the server. That has benefits and costs. If you use Angular, it seems more sensible you'd do the entirety of the HTML in that, then serve that generated page, and only use ASP .NET for the API that page will interact with.
There are no grey areas with .net core. For a school project just the basics of javascript is fine but if you want to be employable you can never be too good with javascript. The mvc frameworks are going by the wayside. I'd not spend too much time on those.
[https://dev.to/unseenwizzard/learn-git-concepts-not-commands-4gjc](https://dev.to/unseenwizzard/learn-git-concepts-not-commands-4gjc)
Check this out, it is plug and play but you can examine source for the implementation details. https://github.com/Sustainsys/Saml2
Adding keywords shouldn't break anything; they could be applicable only when using an expression block, which means they couldn't possibly affect old code. That's how the `await` keyword was added without breaking anything: it only works in an `async` method. Also, your 2nd paragraph seems pretty dogmatic. You can't just make a general statement of "this kind of code is always bad". Everything depends on context. Code snippets don't solve anything here. They're just a slightly faster way of writing code.
I don't mean to offend anyone, but software developer professionally is one of the worst jobs I ever had, costumers make unreal requests and are constantly changing their minds, making development extremely frustrating. You're going to lose your mind, is the best way to say it, best of luck in your career.
I follow pretty much everything in that link already. Only exception I think is I preface private variable names with m_. Not sure where I got it from...
Hmmm. While I'm not an expert, I am familiar with everything you said, and have at least dabbled in it.
I'm lucky in this regard, I wasnt hired just as a programmer, but more of a person who would be using this program, but also knows how to program. Additionally, I'm keeping current on networking stuff, and can and probably go back to it once I'm done with this job.
It does use the [event-based async API internally](https://referencesource.microsoft.com/#System.Data/fx/src/data/System/Data/SqlClient/SqlCommand.cs,2489), so it doesn't change much. But it is probably safer to use their implementation as it is more likely to be correct (and tested).
I personally really like Sublime Merge, a repository tool where you can easily view your commits/pushes. It’s free and has served me well.
 Entity Framework is unfortunately becoming a necessity for getting some jobs. With that being said it’s not hard to use and learn about. I think you should learn about Azure. Start with Web Apps, then Functions, then Service Bus and Storage. Learn how to use CosmosDB as its use will grow as it is Microsoft’s distributed database offering. Being proficient in a front end JavaScript framework would help you gain employment. Maybe learn Angular. When you learn how to use this you will need to learn a back end offering such as Web.API to do your REST calls, that is pretty simple to pick up if you have done MVC. And if you don’t know the principles of SOLID code you should probably learn them or brush up on them if you do. If you have an app that’s working you could add DI to it and refactor it to be SOLID. That would get you very familiar with those concepts and adding DI to an existing app is good fun.
I'm assuming you are part of a team and you are a junior programmer. The most important thing to do is master your product's stack. A common pitfall is for new programmers to want to apply new technology to a legacy product. Your job, short-term, is to contribute to the product as it exists now, rather than what it would be if you had the chance to re-write it. You mentioned Winforms, which is an older but still capable technology. What is the back end? If there is a database, be sure to know the fundamentals of SQL. If there is a web service, understand what the web methods are doing and what the request and response payloads are. A network tool like Fiddler is good for this. you can also try /r/cscareerquestions since many of its users are new programmers or people offering advice to them.
Dirty c++. That's where you got your member variables. It's still common enough in c# that it won't look totally out of place but usually private fields are just _ prefixed
I've been doing C# for a couple users (fell into it from powershell) and while I love it, MVVM still hurts my head. I can't for the life of me seem to wrap my brain around it.
I think I was just out of high school and wanted to learn programming, so I bought a J# book cause Java was the hotness on the internet. That was a mistake. Took me about oh....15 years to come back to programming :P
Here's a way to look at it. Think about an oven. A digital oven with a display on it. Part of that display's job is telling you what temperature is inside the oven. The way it knows is there's a device called a thermistor in the oven that can measure the temperature. But. The thermistor talks to the oven in voltage ranges. At 100 degrees F, it might read 0.4V. Maybe the top of its range is 500 degrees F, at which it reads 2.0V. And the display isn't so easy, either. It's a 7-segment display so displaying a "4" means knowing to turn on 4 specific segments. It would be a nightmare to write code that has to say: * Every second: * Read the voltage. * Convert the voltage to a temperature. * For each digit in the temperature: * Clear a digit. * Look up the segments to display. * Set the right segments to on. That's what I call "ball of mud" code, because it's mixing up the logic (reading a temperature) with display (the segments). If the oven people want to change the display, they have to update this routine. If they want to change the thermistor, they have to update this routine. And if we're trying to represent this in a form/window, we have to keep in mind we might be moving on and off the UI thread. So. We don't want to write it that way. Instead, we make a thing that gets a temperature reading *in degrees*, since that's what we want. And we make a thing that has a `Temperature` property that raises an event when it changes. That's the `OvenViewModel`! The point of a ViewModel is to hide some ugliness of the lower layers and present something that's friendly to the UI via properties that raise events when they change. So I've probably got a worker thread that reads the thermistor, converts the voltage to a temperature, then transitions to the UI thread so it can set the `Temperature` property to the value in degrees. On the UI side, it's a pain to think about the seven-segment display. So I write the logic to update it once, but have that control exposed as a `Temperature` dependency property of type integer. Then, I use data binding to bind the control's `Temperature` to the ViewModel's `Temperature`. Now the algorithm looks like this: * Every second: * Read the temperature. * Update the property. When the view model changes, it raises an event. The UI is listening for that event (because of data binding), and will change the control's `Temperature` property. That triggers all the messy stuff to update a seven-segment display. That isolates the logic! Now, if I try a new thermistor with new voltage ranges, all I have to do is update the part that goes from voltage-&gt;temperature. Setting the property still updates the display. And if I swap out the display for something fancier (or less fancy), it still works if it still has a `Temperature` property. And now, my code to go from thermistor voltage to a temperature isn't part of the Form/Window. So I can write unit tests that exercise it to be sure it works. That's MVVM in a nutshell. It lets you write your logic with no UI so you can test it easily. That's the Model. Then it lets you write a UI that can display... something. Your controls want to bind to a set of properties. That's the View. In between is glue. The ViewModel's job is to have the set of properties the View wants, and to do what it takes to update them as the Model changes. Sometimes, everything's so simple people just write more like VVM: skipping a formal ViewModel for each type. All that matters is you write your code like real hardware: sensors put out voltages, which gets converted to real values by things like speedometers. They're naturally separate, and our code should follow that!
Both of your comments here are woefully underrated dude. Kudos for the obvious wealth of experience you've had that have given you all this knowledge! Really well explained and absolutely bang-on. Do you blog/write/teach?
&gt; If your method uses a List internally, and returns that as IList, the enumerator and indexing members for IList are still the implementations defined on List. True in a sense, but there is still a non-negligible performance difference between the two. You will have to call `List&lt;T&gt;`'s boxing `GetEnumerator` overload if you have an `IList&lt;T&gt;`, which will generate garbage and be measurably slower in general. There are also other differences which affect performance, like interface dispatch and lack of ref access (arrays).
Code Academy has a nice little git walkthrough. https://www.codecademy.com/learn/learn-git
Sounds like you had a bad job. A bad job doesn't make a bad career.
My advice is to see if they have documented anything on said program. I have never come across full documentation or up to date documentation in my professional projects from clients. I have come across user manuals but that is a different thing. When something needs a change, make a change order with some time added for testing and refactoring. Clients stop flip flopping when a contract shows stuff is guaranteed to be delayed. It is important to check how bad the source code is. If it is really bad then calculate refactoring or loads of unit testing into your deliverables. I also suggest letting senior members check your edits or additions because they’ll show you better ways and hopefully advise you.
Learn to comment your code and write meaningful commit messages (i hope you already use git). Working in a team is different than working alone on projects. I know, this is something unpopular among c# teams, but do unit testing (and other testing types). Most teams i know doesn't enforce tests. Be better. :-)
I have a built in path to where all the videos using: String path = AppDomain.CurrentDomain.BaseDirectory; then path = path.Remove(path.Length - 10); then path = path + @"Resources\". this creates a path right to the folder with all the videos, then in another object I have the video name saved(e.g video.m4v), then I simply create a new Uri and make that the source. There is not I/O. The way it works is that when the video starts playing I start a DispatcherTimer, which is always checking if the current video is about to end, and when it ends it switches to the chosen video(which is chosen using a button before the video ends), it feels very smooth until the actual switch.
Thanks very much for your long and thorough response. Whew, that's a big list. I'll bite off some bits and get going, thank-you.
Message/property chains are considered a code smell, although don't confuse property chains with fluent syntax. We're not talking about something like LINQ here, rather, cases where we're digging down into nested objects. You're quite right about async await, it's a good point. They're not terrible proposals, I guess there's some similarity with inline out variables in C# 7, but I didn't read it and think to myself that my life would become any better if they were adopted.
Thanks. Is there a part 2 somewhere?)
I'd cross out JavaScript from your list and would concentrate on learning blazor, but overall very good list!
Few things which may have already been covered: 1. Git / source control 2. Dependency Injection 3. Common snippets for whatever DB provider you will be using 4. If you don't know already (OOP principles and SOLID principles))
Thanks alot for the example. Everything became clear now. U know what would be perfect? If you actually created a sample state-of-the-art project to exemplify how you create such divisions in code and how you call it. Perhaps just a simple button to set the temperature and a label to display it, but with the perfect division code wise. Thank you!
Start with improving what you only in basics, continue with learning things you know that you don't know. Then you'll automatically learn about more things you don't know and it continues.
&gt;DispatcherTimer MediaElement already has a clock built in, I think the creation of the Uri and the string manipulations might be happening on the UI thread and causes the slight skips. Let the media itself tell you state instead of trying to do this externally. &gt; Reasons for using a [DispatcherTimer](https://docs.microsoft.com/en-us/dotnet/api/system.windows.threading.dispatchertimer?view=netframework-4.8) as opposed to a [System.Timers.Timer](https://docs.microsoft.com/en-us/dotnet/api/system.timers.timer?view=netframework-4.8) are that the [DispatcherTimer](https://docs.microsoft.com/en-us/dotnet/api/system.windows.threading.dispatchertimer?view=netframework-4.8) runs on the same thread as the [Dispatcher](https://docs.microsoft.com/en-us/dotnet/api/system.windows.threading.dispatcher?view=netframework-4.8) and a [DispatcherPriority](https://docs.microsoft.com/en-us/dotnet/api/system.windows.threading.dispatcherpriority?view=netframework-4.8) This means any event handling happens on the ui thread, hence the slight lag. Maybe use data binding instead?
Start with .net core.
I think JavaScript will be around for quite a while.
no no no no no no no no ASP.NET Core is mature enough, has decent docs and community behind it.
With web assembly there is no need to use JavaScript. https://innative.dev/news/introducing-innative/
Just did the same thing 3 weeks ago. My advice would be to plan your work (pseudo code) and then ask for input from a colleague / superior early on. It’s easier to prevent mistakes than it is to fix them when source control is involved, especially if it’s a big team.
At first I was using a Timer, but since I need to call methods that use the UI it gave me an error, so i added Dispatcher.Invoke inside that timer, and it was the same lag. you are saying that I don't need to run a timer but can use the built in clock in MediaElement?(will I be able to run a piece of code every time the clock gets updated?)
Here's the lag-test I did, no timers here just basic selection functionality. I try not to mess too much with timers, avoid them if I can. Check this yourself to see if normal bindings are causing you lag. &amp;#x200B; &lt;Grid&gt; &lt;Grid.ColumnDefinitions&gt; &lt;ColumnDefinition Width="3*"/&gt; &lt;ColumnDefinition Width="2*"/&gt; &lt;/Grid.ColumnDefinitions&gt; &lt;ListBox Name="FileList" ItemsSource="{Binding Files}" DisplayMemberPath="Name" Margin="10" Grid.Column="1" /&gt; &lt;Border BorderBrush="Black" BorderThickness="1" Margin="10" Grid.Column="0"&gt; &lt;MediaElement Source="{Binding ElementName=FileList, Path=SelectedItem.FullName}"/&gt; &lt;/Border&gt; &lt;/Grid&gt; //Codebehind: public partial class MainWindow : Window { public MainWindow() { InitializeComponent(); DataContext = this; LoadFiles(); } private void LoadFiles() { var path = Environment.GetFolderPath(Environment.SpecialFolder.MyVideos); var dir = new DirectoryInfo(path); foreach (var item in dir.GetFiles("*", SearchOption.AllDirectories)) Files.Add(item); } public ObservableCollection&lt;FileInfo&gt; Files { get; } = new ObservableCollection&lt;FileInfo&gt;(); }
&gt; provision some discovery system What would your recommend be on this. They way I was trying to achieve it is have a reference to the object I’d in the other service so I can just call the api
Yay! 20 year jaded veteran here: His advice is generally my advice. Good luck!
Just tested it, it also has a 0.5 second~ freeze when switching videos. I guess I will just use two mediaelements so I can preload the video file, and bring it to from when I want to play that video. Would that work?
Do you still get delay if you set the IsAsync=true in the selecteditem binding?
I am hoping to one day become a C# developer too, I am currently trying to teach myself how to enter the intermediate level of understanding. Congratulations, mate!
That sounds great but for the moment JavaScript is still required. How long until all browsers allow this? What about older browsers? What about DOM manipulation?
When u use the examples of a student and exam service it sounds like you are just taking the nouns and turning these into different services. I would suggest this isnt what you want to do and as it will lead to exactly the issues you have run into and more. Sadly I don't have any links/videos readily available atm.
No worries. If its something that's been considered then your limits are your limits. &amp;#x200B; Unfortunately I can't really recommend anything as we try to stick to MS standard as much as possible - Sorry!
Job market has inertia Also if you know C# and HTML/JS it would be very easy to pick up Blazor, so learning it now is a bit of a time waste
All major browsers(Firefox, chrome, safari, edge) works with web assembly. DOM manipulation should be available in future, but afaik nothing concrete yet.
Yes so JavaScript will be around for quite a while yet.
C# is used less for UI development nowdays. You might want to look into Web Api and micro services.
The best place for it is MSDN. But I strongly recommend to read ASP.NET Core by Andrew Lock. This is the best book about .net core that I have ever read.
Have to say it will, at least 5 to 10 years until it will be replaced.
yup. I literally made an entire new project and copied your code, its the exact same. I think the main problem is the way the MediaElement loads the video, it takes it around a second to load the video, freezing the UI in the process. It makes the transition look choppy, and unsmooth.
Ok, got it. I will search for this book.
Your receive endpoint and consumer isn’t defined. Remember it’s a contract to publish and then consume an interface. So set up your publisher to publish a class the implements IMessage and a consumer endpoint that consumes the same contract. Rather than think about a consumer “reading” think about it “listening”. If you publish without any listeners, you’ll notice that RabbitMq just discards the message. So “reading” is really the wrong way to think about this.
This is by far the best article I’ve found to learn about the request pipeline and middleware pipeline. Once you start running the diagnostics you really start to see how this all hooks together. https://andrewlock.net/understanding-your-middleware-pipeline-with-the-middleware-analysis-package/ I used this because I had a middleware request processing ordering issue when reading the body. It helped me understand what the problem was and I gained a lot more out of the process by doing so.
i just tried testing a new project with two media players loading the video when the program starts, and simply switching between who is visible and who isn't, it still lags when switching. I basically put two video files in the project file. It should show one video, and when you press a key on the keyboard should switch to another video. It does so, but there is a second or so of a delay. &lt;Grid&gt; &lt;MediaElement x:Name="one" LoadedBehavior="Manual"/&gt; &lt;MediaElement x:Name="two" LoadedBehavior="Manual"/&gt; &lt;/Grid&gt; //Codebehind public partial class MainWindow : Window { InitializeComponent(); String Path = AppDomain.CurrentDomain.BaseDirectory; Path = Path.Remove(Path.Length - 10); one.Visibility = Visibility.Visible; two.Visibility = Visibility.Collapsed; one.Source = new Uri(Path + "purple.m4v"); two.Source = new Uri(Path + "orange.m4v"); one.Play(); } protected override void OnKeyDown(KeyEventArgs e) { base.OnKeyDown(e); one.Visibility = Visibility.Collapsed; two.Visibility = Visibility.Visible; two.Play(); one.Pause(); }
WPF is generally slow. Overall performance sucks in comparison, loading times navigation times etc. &amp;#x200B; Winforms is snappy and perfect for small applications.
&gt;ViewModel public class ViewModel { public ObservableCollection&lt;FileInfo&gt; Files { get; } = new ObservableCollection&lt;FileInfo&gt;(); // This can also be exposed as an ICommand for total decoupling, but it's not strictly necessary. // public ICommand ProcessCommand { get; } = new RelayCommand(ProcessFiles); public void ProcessFiles() { foreach(var file in Files){ // logic } } } &gt;WPF &lt;Window.DataContext&gt; &lt;local:ViewModel /&gt; &lt;/Window.DataContext&gt; &lt;StackPanel&gt; &lt;ListBox ItemsSource="{Binding Files}" DisplayMemberPath="Name" /&gt; &lt;!-- Command binding for total decoupling Missing ProcessCommand doesn't break the application --&gt; &lt;Button Margin="10" Command="{Binding ProcessCommand}" /&gt; &lt;!-- // Handler in codebehind, just if(this.DataContext is ViewModel vm){ vm.ProcessFiles(); } --&gt; &lt;Button Margin="10" Click="ProcessFilesClick" /&gt; &lt;/StackPanel&gt; Now this UI can use that functionality, but I can also create a console app and use the viewmodel logic like &gt;Console static void Main() { // zero WPF UI dependency to use logic var vm = new ViewModel(); vm.ProcessFiles(); }
I think this [course](https://www.udemy.com/course/the-complete-junior-to-senior-web-developer-roadmap/) is what are you looking for.
As far as I understand, this article is more about middleware, not full request pipeline and how it handles under the hood.
I don't normally work with wpf so take this with a grain of salt but.. Couldn't you just create 2 instances of mediaelement, and just toggle their visibility on and off to switch which video is being displayed?
You directly posted your SO question here as well? Why not have at least some patience and give SO a chance?
I just published this, [Lexical.Localization](http://lexical.fi/Localization/docs/Tutorial/index.html), localization class library as an alternative to .resx files. It addresses many minute and some very large features, such as allowing translator to choose pluralization rules, easy extensibility over every aspect, context-free localization files. And it's especially designed for localizing class libraries, which may not know what kind of environments the library will be be used in. Will it be linked to project with or without IStringLocalizer. How will the application deployer put together the localization files, as embedded, from database, from file provider?
What a fantastic writeup! Thank you so much for taking the time to reply. &amp;#x200B; I'm a bit more positive now, there are of course some issues which make learning Xamarin a bit of an obstacle (namely having to rely on a 3rd party design tools and unreliable documentation), but I hope things will get better.
I'm using VS2019 and Xamarin 4.0.0.482894.
MSDN doesn't exist anymore
\&gt; like sites is 4chan or 8chan's "bad image" o Just say, 'it's an image board about kittens and puppies' 🐱‍🏍🐱‍
They are one and the same. The default middleware added using .AddMvc() for example, is just an extension method around app.Use().
Your problem is more to do with instance management and dependency injection than the SFTP client.
Recommend learning Task based Asynchronous Pattern (TAP) and not to bother with learning EAP as it's a legacy model
[sobs in wpf] There are still desktop application developers out here. Dozens of us!
Learn Unit Testing. First because you have to, and then because you want to.
Do you have any tips on how to solve this?
I would suggest LINQ: dict.OrderBy(x =&gt; x.Value.Depth);
Yeah, you can say that, but a big surface area of .NET (particularly third-party components) still uses EAP or IAsyncResult. Heck, I'm using Xamarin.Auth right now and instead of a task-based pattern it uses an event-based pattern for its flow. There are some technical reasons why a Task wouldn't work very well in this case. It helps to know how it works if you plan on writing apps.
&gt;software developer professionally is one of the worst jobs You need to have the right mindset. You are being paid to deal with their bullshit. Be dispassionate about it. Accept that priority changes and moving goal posts are part of the process. Subtly remind them that you're here to do whatever they need, but the more rework and task switching the longer it takes and the more it costs them. You also may just need to find a different company to work at.
Do you need them permanently sorted that way? If so, keep a ordered list of FooBar objects alongside your dictionary. The dictionary will still have the same keys but the values will be the indices of the FooBar on the new list.
I would like to and have made a reminder to work on it but it will take a while. I have a feeling, based on your username, you'd rather see a WinForms/WPF example? My primary work is Xamarin and I work on a Mac. I have *some* access to a Windows machine, but not a lot, so doing something on a Windows-only framework is a bit of a bother. I *could* try it from memory but I have a strict "don't write a tutorial if you didn't build the code" policy.
I'm not familiar with NInject in particular, but it sounds like: * you're asking NInject to inject the _same_ instance of the SFTP client in multiple places, * that SFTP client stores, in its state, its current directory. I'm not sure why this calls for dependency injection at all, but if it does, you still want multiple instances. Or to use an SFTP client that's stateless.
Stop sharing instances of the client on multiple threads. Which SFTP Client are you using? SSH.net is a commonly used library.
It sounds like the problem you are running into is around how SFTP works. Imagine using SSH to connect to your server, that creates one "session" as if you are typing into the terminal locally. Now imagine creating a thread to go to a certain directory and delete all of the files, while in parallel on another thread going to a different directory and searching files for a given word. Since you only have one session, all of those commands are going to be sent to the same commandline prompt in a random order. SFTP works similarly, and it sounds like you are using one session globally. I believe how most SFTP clients work is that they make several simultaneous independent connections to the same server and then use each of those for different tasks. Depending on how your code is setup, you could replace your single SFTP session instance with a pool of them. When you connect to the server successfully, connect a few more times and keep all of the connections in a list. Then when part of your code needs to, say, list the files in a directory, that part of the code grabs a session from the pool (using a mutex or something to prevent consistency issues), uses it, and returns it again when it's done.
IMHO you're approaching it from an incorrect end - first research what kind of support for face recognition there is on the market, then consider how you could integrate it with your app and which technology/programming language is best to use.
I'd like to but can't promise it unless you'd like a Xamarin Forms example, some of what you asked for is big. If I do a full-tilt "state-of-the-art" example things get weird. That'd imply including an IoC container and (maybe) writing a navigation framework. Those look very silly in a small application, which is why it's really hard to learn how to use them. If it's WinForms it's even more complex because it takes the most "glue" to get things done. Again, that means the introduction of some framework code and that means I end up with more "do this before you start" code than the rest of the application! That's *further* compounded by I have easiest access to Macs, and there isn't a (likely familiar to you) UI framework for C# I can use on a Mac that'll also work on a Windows machine. Tutorials that require you to install extra junk really suck, so I avoid them. So maybe "this week", but don't hold me to it! I'm pretty busy over the next couple of days.
The LINQ answer appears to be gone. I assume it was some variation on `dict.OrderBy(kvp =&gt; kvp.Value.Depth)`, though?
Given your background it sounds like you May have some DB experience already? If so that will be a huge feather in your cap, DB work often gets less attention in programming circles as a lot of people don’t find it as “sexy” as some of the other parts of the stack, but it is absolutely mission critical to a stable application. Owning those responsibilities, or even just offering to help is a great way to make your name. Good luck in the new role friend!
You are correct, it is overkill but it just sounded like an interesting program to make :)
I'm using the SSH.net, what do you think I should do? Create n x SFTP instances of the client, and inject each for each "task"?
Yes, I pointed the path to D:\\ and it works great when I create a file in D:\\ but it didn't react when I created in D:\\Temp. Is there some property I have to set to make it recursive?
I am not familiar with the exact syntax of ninject so you may have to research this a bit further (in Autofac this is very simple to do). Instead of injecting a SFTP Client, inject a function that creates a SFTP Client. Then, in your download method, create new instances as needed. public class MyDownloader { private Func&lt;ISFTPClient&gt; sftpClientFactory; public MyDownloader(Func&lt;ISFTPClient&gt; sftpClientFactory) { this.sftpClientFactory = sftpClientFactory; // Inject a factory } public async Task Download(List&lt;string&gt; fileNames) { List&lt;Task&gt; tasks = new List&lt;Task&gt;(); foreach(string fileName in fileNames) { ISFTPClient client = sftpClientFactory(); // create a new client from the factory tasks.Add(client.Download(fileName)); } await tasks.WhenAll(); } }
I did set my Mac to disable it, yet apparently it ignores my setting because I still find random .DS\_Store files on my directories. The problem it solves is my annoyance being high, lol. I'm forty-four years old, so I came up during the days when there was only command line environments. I still am in love with command prompts, so I routinely do my file management via "DOS". It's VERY aggravating when I go to use TAB completion and one of those annoying files pops up, and I can't just do "del thumbs.db" as I first have to use attrib to remove the flags protecting it. I have a batch file that does that and removes the file so all I have to do is type "thumbs" and it wipes it out, but I want to remove even that step. My system is a 5ghz i7 with a Samsung 960 Pro M.2 SSD, I don't think there will be much impact to performance. I agree with doublestop that this whole idea is swatting a fly with a sledgehammer, lol, but it sounded like something fun to try :)
It generates events for the various types of activity you tell it to monitor, then there is also a filter to narrow the scope of what it reacts to. Like you can have it only react if a Word document is deleted for example.
Azure have something like face recognition. The search term you'd need then is face *detection* as you don't need to recognize them as an individual. https://docs.microsoft.com/en-us/azure/cognitive-services/face/overview Saw other real time projects: https://www.codeproject.com/Articles/239849/Multiple-face-detection-and-recognition-in-real http://csharplearners.com/tag/face-detection/
Please provide a test example of Texte_Caractéristiques.Text.
Here you go: &gt; var normalOrderedDictionary = dict.Cast&lt;DictionaryEntry&gt;() &gt; .OrderBy(r =&gt; ((FooBar)r.Value).Depth) &gt; .ToDictionary(c =&gt; c.Key, d =&gt; d.Value);
&gt; I still am in love with command prompts, so I routinely do my file management via "DOS". It's VERY aggravating when I go to use TAB completion and one of those annoying files pops up It's kind of unfortunate that hidden files show up in tab completion.
I've found the easiest solution is to go simple and use dns and load balancer. In your local environment, plain old localhost:port using http. Let the load balancer in production deal with the complexities. AWS for example takes care of your https certificates and load balancing, and you can load your config files straight from S3.
Removed: Rule 4.
You might consider using a queue to manage the SFTP tasks. You'd then inject a manager class that has a private SFTP client and processes queue messages one at a time. It's generally a bad idea to try to do multiple file transfers between the same servers at the same time unless you are confident that you have considered all of the challenges. You at least want to have a way to limit the number of active connections/operations or you will almost certainly run into new errors. Another way to think of this: if you can't have multiple clients, then you probably also can't have multiple simultaneous operations.
You are using contains? Then that may be your issue. If you need exact matches try varOne.ToLowerInvariant() == varTwo.ToLowerInvariant() Then 'ábC' will compare against 'Abc' and will return true as they are the same in lowercase. It will return false if 'ABC' is compared against 'ABCD' in lower case. Is this what you were looking for?
The book is phenomenal. You'll learn more about the pipeline than you ever thought you needed (especially MVC filters, which act like a pipeline within a pipeline). So well written.
Why do you say it's a bad idea to do multiple transfers in parallel? It happens all the time - in fact your web browser did it when you came to this page. True it's a bad idea to overload a server with requests but transferring files in parallel is common.
Why are you using Dependency Injection when you don’t need it?
I'm working on a project using Cloud Firestore (via the GCP console, not the Firebase console) and I'm using WinForms (.NET 4.8.) Google's "official" way of handling auth is to set a local environment variable pointing to a local JSON file with your credentials. Can someone PLEASE do a write-up on custom authentication from WinForms (C#) to Cloud Firestore?
Can't the new switch expressions do this?
Correct. I’d raise separate instances for each thread / task. If you’re in the same directory it seems not to matter, so you could reduce the instance count based on how many directories you’re currently traversing. You could use a dictionary where the key is the directory name and item is the instance and then add and remove items from the dictionary as you start / finish with the directory. Have you searched the Github issue list or raised a question against that Github project? It might be a known issue and there’s more than likely a way around it. It would seem like a common task that you’re trying to accomplish. I’m on mobile otherwise I’d look for you but on larger Github projects I find the Github issues tool to be the best way to get support.
It's a bad idea if you're not sure about what you're doing. I love how many tools we have for parallel and async workflows now, but there's no reason to assume you should scale by default, especially when you're working with a technology like SFTP that wasn't really designed for it.
This is git specific, but this is a great site to learn git https://learngitbranching.js.org
Stuff like model binding, routes, controller creation and so on?
Look at the String.Contains() method. [https://docs.microsoft.com/en-us/dotnet/api/system.string.contains?view=netframework-4.8](https://docs.microsoft.com/en-us/dotnet/api/system.string.contains?view=netframework-4.8) P.S. Tu peux me contacter en privé si tu ne t'en sors pas.
WPF is not slow. In no way, is it slow. I have no idea where some of you get that idea. There was a time 5-6 years ago that layout management was done by the CPU that bottlenecked it. It hasn't been that way for a long time now, and in nearly every scenario now, wpf is faster by default.
Unorthodox but makes sense in a huge codebase and when the team is disciplined. You'll also find that classes auto-generated by Entity Framework are partial to allow developers to customise them without risking their particulars overwritten when the classes are re-generated, that is, they can just add the other "parts" with the business logic that they need for their EF models. In hindsight, this is what we should have done with our current solution with nearly one thousand classes.
I have feeling OP has over engineered the problem at hand. Why so many classes acessing sftp server? He should enable add trace log to see what actually is happening.
I don't know if it has a name, but I do not like it. For type/file organization, I *always*: * Have no more than one top-level type in each .cs file * Have the folder structure exactly match the namespace the top-level type is in * Have the file name exactly match the name of the top-level type &amp;#x200B; I have not yet heard of any good justifications for doing anything differently. &amp;#x200B; As for the partial classes, does each class actually have multiple partial definitions? If not, the `partial` keyword doesn't actually do anything and could likely be removed.
yes - fewest I've seen is 4 partial class definitions
Multi-dimensional arrays occupy contiguous memory for all elements. Jagged arrays do not. You cannot say "jagged arrays are faster" or "multi-dimensional arrays are faster" without further context. It is unlikely that the speed of array lookups is significant. As always, benchmark.
I've used partial classes myself, but way back when CSLA was a bit more ... viable. The necessity there was to separate the data access code from the business objects for use in the back end, while the public structure of the object and its business rules were shared (linked files) in the front and back end.
Exactly. It’s all middleware, just Microsoft’s. It works in the same way as you writing your own. That’s what’s so cool about it. You can vie all of the source code on Github.
Just sharing more thoughts. For organizing partial class definitions, I think file names are a little more subjective. I might do something like: * `Dog.cs` \- contains everything not split out into separate partial classes * `Dog.Eating.cs` \- contains everything related to eating * `Dog.Socializing.cs` \- contains everything related to interacting with other animals
That is at least discoverable, but that's not what's going on here. There is literally a file called something like Entities that just has a namespace and an empty partial of every entity in the project. No additional interfaces or anything. Except for one class - it has an implemented method that is actually doing some kind of business logic completely apart from the rest of the class and I have no idea why it's there.
Never used CSLA myself, so I cannot comment. Partial classes seem appropriate mostly when part of the class is generated by a tool and the rest is left to the developer. I suppose extending that approach, you could use partials to separate idiomatic code from general code.
FYI - MSDN was officially replaced by docs.microsoft.com.
Just pointing out that .NET 5 is still **a long time** away.
https://stackoverflow.com/questions/468832/why-are-multi-dimensional-arrays-in-net-slower-than-normal-arrays
Hm, ok, sounds great. I’ll check it, thank you! :)
If the target framework of the library is .net standard 2.0, yes.
The way i do it: Install it in a .net core project using nuget. If there is a warning in the error/warning window saying something like "this package was restored using .net framework 4.7 but the project targets .net core 2.2" then the author has not made it compatible with .net core and you could end up with runtime errors in production
That's only for an expression that switches on a value and returns something based on it. An expression block would allow any kind of control flow
I don't understand sorry. Why are you using 2d arrays for this? Can't you just use: yoctometers = array\[meters\]; Maybe you need a Dictionary&lt;,&gt;? I am missing something....
I think somebody was just playing around a bit. Possibly tool-assisted. This pattern most probably doesn‘t make sense as excluding the file wouldn‘t yield a compilable version (if the interface is used somewhere). The only remotely reasonable point would be that the project is structured in microprojects and exclusion of one microproject still yields a (functionally reduced) compilable solution. And instead of using mapper to go from one domain space to another one can use these partial classes. Still one wouldn‘t merge the interface with the implementations as the projects yields the encapsulation and not the file level. On the first glance this looks like a clean approach but it really isn‘t.
you haven't posted a class of type "SelectListGroup", so impossible to say
Is that something that is created in the model or controller?
I'm assuming you're using EF code-first, i.e. your code defines the database structure. As your data model changes, you'll need to add migrations in order to update the database structure. If you are getting an error about keys it will be an issue with your model/database: SelectListGroup is referring to a type that will/should be defined in your models
This is exactly what not to do - take someone else's micro-benchmark out of context and then treat it as some immutable fact. Worse, it's a poorly designed benchmark. Even worse, it was performed on a legacy compiler that's no longer in general use and is almost certainly not what you will compile your .Net code with today.
I thought that was the whole purpose of setting up the specific SelectList functions though. Is SelectListGroup an annotation or function call?
would either be an annotation such as "[Table("dbo.DemographicsSurvey")]" which overrides the class name as the table name, (DemographicsSurvey in this case), or the class name itself if it doesn't have this annotation. Unless I'm missing something... Side note: your code here is poorly formatted which makes it quite difficult to read and lowers the chance of people helping. Would also advise to look into some "how-to"s of code-first in EF
Here is the project: https://github.com/ZacharyPatten/Towel Dictionaries are slow for this topic. They have to compute a hash code and look it up in an array/buckets. The jagged/multi arrays are ideal because the units are stored as enum values which have no overhead when casting to int for array look ups.
I have updated the post with a link to a github account
On mobile, so pardon the syntax errors and poor formatting, but you could just say: Int numBingos = userInputs.Where(input=&gt;randomNumbers.Contains(input)).Count(); This gets the subset of userInputs where the number is also contained by your list of random numbers, then outputs the total count
Are you describing something like this : [tuts](https://www.jerriepelser.com/blog/using-option-groups-with-mvc6-select-taghelper/)
This. One class per file, and the folder structure matches the namespace. I have to hammer this into every new dev's mind. It's way easier to maintain and understand. I have a love/hate relationship with partial classes. One of the platforms we use forces them on us...other than that, I'm not a fan.
No, to me it seems that EF thinks you have defined a table called "SelectListGroup" somewhere. I'd investigate why it thinks that.
Partial classes are a sure sign that Single Responsibility Principle is being violated. The only legit use I’ve come across for it is to allow extension of generated code without editing the generated file.
Relavant stack: https://stackoverflow.com/questions/2477839/are-cs-partial-classes-bad-design Big take away comment: &gt;One of the most legitimate and useful reasons is to encourage the separation of automatically generated code and your own custom extensions to it. For instance, it's common to have an automatically generated form code from some kind of designer, but you usually want to add your own specific behavior to it. This way, if you regenerate the automatic-code portion, you're not touching the part that has your specific extensions. &gt;That said, it's quite possible to have too much of a good thing. Some tips: Don't make your classes partialfor the sake of being partial. Don't put partial classes anywhere except besides one another. If you have to jump to a completely unrelated section of the project to see the other half of the class, you're probably doing it wrong. Don't use partial as a technique to obscure the size of the class. If you're breaking up your classes with partial because they're too big, you should revisit the Single Responsibility Principle. If you have three or more partialfragments for the same class, it's almost a guarantee that you're abusing partial. Two is the typical upper bound of reasonableness, and it's generally used to segment automatically-generated code from handwritten code.
I will try and post a more detailed comment later when in front of a PC. I think you are mixing the concept of ViewModel and Entity. I assume that SelectListGroup is the base class of SelectList. EF doesn't know what a SelectList is, it only really deals with primitive values. Try defining an entity with enums they will translate to int in the database schema. Then use Automapper or manually convert the entities to your view model. It seems like a lot more work but the extra control it gives will be worth it in the end. Exposing your database entities to the web is generally considered bad practice. If it's just an exercise then you could mark the SelectLists with the [NotMapped] attribute and create other int or enum properties to hold the actual values. Then in the cshtml when you define the drop down specify the SelectList and the property or corresponds to. I'll find some links an update this comment when I can.
This is the right idea... like, it's almost exactly the code I was typing out... it's almost creepy.
I may need to clarify my thought process. I think I am getting stuck on different areas that I am trying to create with this model. I have 7 different areas of demographics that I am trying to gather. The first round that I went through is/was to create those seven different areas in their own table as a lookup table. And then create a "survey" table that got references from the user ID and attach a survey id that I could later pick up and display on an admin page. &amp;#x200B; In this case that I described, would this be the best way and then create a viewmodel that basically combines the survey table with the 7 areas? And if so, what would be the best protocol to create dropdown views of those items in the viewmodel? I am wanting to have predefined points for users to select from, so would I need to hardcode them in?
I might do this if there was an established code base and I needed to graft on some otherwise independent feature that needed to be implemented by a fixed set of classes for technical/performance reasons. That way I was keeping the related code together so it would be easier to find and modify together, as opposed to spreading it around in separate files with the bulk of each class definition.
You can look at the source of HttpFactory on how to manage instances. It’s open source. DI is good but using the factory pattern like MS do will make all your troubles go away. Plus you manage instances in the factory regardless of how many places it was created. The factory is a singleton. That is very important. Injection the factory. Look at named instances in particular. You could name them as directories and any class that needs to work on that directory calls create with that instance name. If it’s setup it just gives it back. If not it creates it.l and gives it back. It’s really cool and discovered that recently.
No. It’s good to use DI for IoC since it’s SOLID. But the implementation may be misunderstood. Managing connection contexts is a bit tricky. Look at NetCore HttpClientFactory. It’s awesome !
Yeah. I'm aware it will be a while before .Net 5. I just wanted to try and avoid changing array types in the future of my project. Thanks for the stack overflow link. I slightly modified their tests so that all the methods take the "l1" and "l2" values (to make the testing more fair) and changed the delegates to all be Action so they are all the same delegate type. The .Net Core version is actually slower on average than the .Net Framework version on my machine. Also, for all testing the jagged array was slightly faster on average, but the difference in performance with the array types is much higher in .Net Framework than .Net Core. I was expecting .Net Core to be faster. :/ That is interesting.
Will the error code be in the same spot each time where you could do a substring? Lowers maintainability but increases performance.
I looked the page but still can't fully wrap my head on why a 2d array. Something about \[meters\]\[hours\]? Anyway. Multidimensional arrays are faster than jagged because all the rows/columns are same size. If you have to check for bounds yourself, because some values of the array are not valid, it may not matter wich to use. I have not tested it. But people say that more important than that is how to access the data. Aling the data to the arrays to iterate over them. No random access.
Okay, so say &amp;#x200B; if (string.contains(substring) &amp;#x200B; { printline(rest of string) } &amp;#x200B; Is that what you mean?
Something like that, assuming performance isn’t critical.
That'll work. Thanks!
I think I'll do an array rather than a dictionary. Does that sound reasonable?
&gt;How would I know if these libraries are compatible with .NET Framework and .NET Core? VS (NuGet in particular) will tell you. If the library is compiled against .NET Standard, you're good to go. If it's compiled against .NET Framework _only_, you _might_ still be fine, but it can't really be determined at compile time. In that case, you'll receive a warning in your Error List.
I would use a dictionary because then you can search by key and get value when you have a match. Also, there might be some fancy linq stuff you can do, I’m just not versed in linq
Alright cool. Thanks!
I'm with /u/yeusk on this one. I don't understand the need for arrays. Have you actually run benchmark lookups on Dictionary&lt;,&gt; compared to arrays? From what I remember Dictionary has a ton of optimizations just for speed and is one of the best performing collections for lookups. I'm also not entirely sure why your using a collection for conversions in the first place. Conversions are calculations. Maybe if you expect the same inputs to be multiple times and you want to cache the result, but then you're taking a guess at the usage pattern and causing memory bloat when the caller could easily choose to implement caching on thier end of they wanted
If the error code is always at the start of the string you could use StartsWith() which should be slightly more efficient than Contains(). And you definitely don't want to use an array. Use a List if you don't need the functionality that a Dictionary gives you.
Code Gen. They used a tool to (one time only) generate a partial for every class and only added additional code to one. Someone forgot YAGNI
&gt;IoC Oh damn. I was thinking it would be something simple. I haven't touched C# for some years now (i regret it and miss it so much! Been coding Delphi over the last 2 years, also amazing!). Back then i was using mainly Windows Forms and later Xamarin Forms. So anything you can provide, it's ok! I appreciate everything! Thanks alot.
Optional booleans can just be booleans; they will just be set to false if there is no value while deserializing. I'd prefer this over a nullable boolean. `Rated` could be `object`. You could then cast it to the correct type in the code: ``` var ratedCustomType = item.Rated as CustomType; var ratedBoolean = item.Rated as bool; // If ratedCustomType is not null, it will be the object. Otherwise it will be the boolean. ``` Hopefully this helps! I would really really really recommend fixing the json, though, if possible! Having multiple types for a field can be very very annoying to work with!
What do you mean by remove it in particular instance? You still have to define some condition for that instance. Or do you mean you want it removed in a particular place in your code and only there? Why not use the AutoMapper and then clear those properties you want ignored by hand? You can use conditions in AutoMapper mapping definitions too...
&gt; What do you mean by remove it in particular instance? You still have to define some condition for that instance. Or do you mean you want it removed in a particular place in your code and only there? The latter, in a particular place in the code. Sorry for the confusion, that was the Spanish in me! &gt; Why not use the AutoMapper and then clear those properties you want ignored by hand? How can I achieve this? Any pointers? &gt; You can use conditions in AutoMapper mapping definitions too... I tried with `ConfigureMap` and `Ignore()` but it didn't work (most likely due to my own ignorance). Thanks!
Well, there's a bunch of extra effort for a tutorial-type post. First I have to write the app. Then I have to figure out a logical order to explain it. Then I have to annotate the parts I think are important and try to explain what they are and how they do what I want. That's usually too big and I try to cut it, get upset with it, and start over. Repeat 2-3 times and I get a successful post ;) Also some wiggle room because "put this on github" seems like a good plan but I haven't set up my GH keys on that machine yet, it probably doesn't have a git client, etc. etc.
If the code always starts at the same position and is the same length you could just use the Substring method that takes a start index and length as arguments this will then return your code to do with as you please and either just print that or have a hastset of known codes and check if that hashset contains the parsed code before print it
Probably not the best answer so YMMV. I would make a blank .net core project, add it as a dependency and try calling a method from it. Not sure if you might be able to get some working for windows and not Linux though. I've been able to use the National Instruments DAQ drivers on a .net core application even though they don't officially support it.
Have a look at the tutorial posted by triumphover it shows how to get the select list into your html. Also have a look at this stackoverflow question [https://stackoverflow.com/questions/41740638/using-enum-for-dropdown-list-in-asp-net-mvc-core](https://stackoverflow.com/questions/41740638/using-enum-for-dropdown-list-in-asp-net-mvc-core). Essentially on your can only need to specify the properties you want storing in the database you can remove the lists. As an example Change \[EnumDataType(typeof(slHearing))\] public SelectList HearingList { get; set; } To \[EnumDataType(typeof(slHearing))\] public Hearing Hearing { get; set; } and in your cshtml use the tag helper to specify the valid values &lt;select asp-for="Hearing" asp-items="Html.GetEnumSelectList&lt;Hearing&gt;()"&gt; &amp;#x200B; You should also split into a data entity and view model as I mentioned before but it isn't essential.
You guys seem to be under the impression that measurement values are being used as indexes in the arrays. This is not the case. Unit types (not measurement values) are used as the indeces. The arrays store delegates for performing the conversions. The 2D arrays are "Func&lt;T, T&gt;[][]" types. To get the conversion from meters to yards, I'm doing this under the hood: Func&lt;T, T&gt; conversion = Length&lt;T&gt;.Table[(int)Length.Units.Meters][(int)Length.Units.Yards]; result = conversion(VALUE); "Length.Units.Meters" is an enum value representing the units the measurement is in (not the numeric measurement value). The code is allowing generic mathematics. It works with any numeric type (double, float, decimal, BigRational, etc.). The conversion table is built in the static constructor of the measurement type. The storing of these delegates inside a data-structures/collection (in this case a 2D array) is required because we are dealing with generic types (which are resolved at runtime not compile time). Dictionaries are not as fast as array look ups. So, the question becomes what is the fastest implementation of a 2D array? (The purpose of the post) Everything I'm seeing is pointing to Jagged arrays being slightly faster... But I was curious if anyone had proof to show otherwise (ex: random access could result in multi arrays being faster... But I am not sure)
I'd map the `rated` field to an `int?` (or `double?` depending) and set it to `null` if `rated` is false. If you're using Json.Net, the best way is probably to write a small `JsonConverter` and apply it to the `rated` property with `JsonConverterAttribute`. The converter just needs to check if the current token is a boolean or the start of an object and then call the serializer again if it's an object.
Good idea, but it doesnt function (was also my first idea). &amp;#x200B; Here the mock code: public class Status { public int id { get; set; } public bool favorite { get; set; } public object rated { get; set; } public bool watchlist { get; set; } } &amp;#x200B; public class ValueWrapper { public int value { get; set; } } &amp;#x200B; class Program { static void Main(string\[\] args) { &amp;#x200B; Status status = new Status { id = 550, favorite = true, rated = new ValueWrapper { value = 8 }, watchlist = false }; string json = JsonConvert.SerializeObject(status); Console.WriteLine(json); // outputs correct json as expected &amp;#x200B; var x = JsonConvert.DeserializeObject&lt;Status&gt;(json); // succeeds &amp;#x200B; if (x.rated != (object)false) // true { ValueWrapper wrapper = x.rated as ValueWrapper; // does not cast (returns null) &amp;#x200B; // Console.WriteLine(wrapper.value); // this would dereference a null ptr } &amp;#x200B; Console.WriteLine(x.rated.GetType()); //output: Newtonsoft.Json.Linq.JObject } }
There’s nothing “solid” about passing an `SftpClient` around across multiple classes. No amount of DI, IoC or other silver bullets will make that a good design. Instantiate the client where it’s actually needed, make its lifetime as short as possible, and don’t share it across different tasks. That’ll fix the original problem, improve memory use, reduce network overhead, and be cleaner.
Thanks I will look into that! I am not familiar with configuring/customizing Newtonsoft.Json. If I define my objects as such `class ValueWrapper {int value {get;set;}}` `public class Status` `{` `public int id { get; set; }` `public bool favorite { get; set; }` `public ValueWrapper rated { get; set; }` `public bool watchlist { get; set; }` `}` Is there perhepas a Json attribute for the `rated` property so that if the JsonDeserializer would fault at deserializing that field (because it reads a boolean value) than it should just initialize the rated property as null? &amp;#x200B; So basically if providing a value to a property would fault bc of incompatible property type and Json token type, than the property should default to null..
Ah. That makes some more sense. That does make me wonder about using a collection at all. Are the conversion methods added or removed dynamically? If not, then why not a class containing the conversion methods? It's guaranteed to be faster than an array lookup, if it fits your pattern better you can call to the right one by using a helper method with an enum, and you can override the methods as long as they're marked virtual.
Couple notes: Once selectedHairStyle is larger than the bounds of your array, the button will break. Best to use: selectedHairStyle = selectedHairStyle % hairStyles.Length; after incrementing selectedHairStyle. Also, an enum probably makes more sense than an array of strings in this context.
https://www.newtonsoft.com/json/help/html/SerializationErrorHandling.htm
Place 2 MediaElemebt controls and switch between them, while 1 is playing load video in the 2, and just switch Visibility so it will appear instant.
Check out Dapper. There's tons of examples online. It's super fast, it's free, and it was developed by the Stack Overflow community.
Your best reference for anything C# related is generally the MSDN documentation. For DB interaction in .NET, I'd start by looking into the Entity framework: https://docs.microsoft.com/en-us/ef/
Ok 👌 good luck with that 🥶
Ugh, years ago someone used partial to "refactor" a class of many thousands of lines into half a dozen separate files. I can't imagine how long it took them or what the hell they thought they were doing. &amp;#x200B; /endrant
I agree completely with your tips. I've seen partial classes used to great effect not for any code reason but for side effects related to source control. Some classes may have methods that have some hardcore critical functionality that could require special attention due to its critical nature. Splitting those operations into a file (one of X partials of the same class) allows for much tighter change control tracking through git; changes and updates are easier to spot while inspecting history and rules/scripts written to flag/warn people if said files are edited in a pull request etc. An edge case to be sure and not one that should be employed too often but is a nice trick if needed.
Tried that, didnt work either.
Thanks you very much!
If you can share code maybe i can help. Anyway Windows allows only 4 instances at a time to be displayed and play on screen so you are good.
If I understand it correctly from your example, your dictionary would have error codes as keys and error messages as values. E.g. var errorDictionary = new Dictionary&lt;int,string&gt;(); errorDictionary.Add(100, "This is an error message"); //etc... Next you want to search through a string (called myString below for simplicity) and check if it contains any error codes var codes = errorDictionary.Keys.Where(key=&gt;myString.Contains(key.ToString())); That will give you an IEnumerable&lt;int&gt; containing all the known error codes found in myString. If you want the messages for those strings you can say var messages = codes.Select(code=&gt;errorDictionary[code]);
Ill pm you when tommorow
Hard coded members on classes are not an option. It would require you map enum values to hard coded methods. Mapping enum values to a hard coded member would be slow and would bloat the code (thousands of lines of branching logic to handle all the unit combinations). A switch statement is usually compiled into a dictionary, which is slower than array look ups. So we can't use a switch statement to map the enum values to hard coded values. Branching "if" statements would again result in thousands of lines of code. Let's say there are 20 values in the Length.Units enum. This would result in an average of [20 / 2 + 20 / 2 = 20] average "if" statements in order to match the Length.Units enum to hard coded methods. I'm not sure how 20 "if" statements compare to an array look up, but I bet the array look up is faster. The array look up is definitely the way to go. There is another C# library that does unit conversion called "UnitsNet" and they are doing the hard coded method approach you are sugguesting, and it resulted in slower, bloated code compared to my current implementation in my project.
I've done that with code I've inherited. It's not ideal, but the class in question was nearly 6k lines of code when I received it. Separating it into partial classes allowed me to group related functionality without getting overwhelmed scrolling through one enormous file, and doing so made it easy to see when functionality could be isolated well enough to refactor it into a separate class. If I'd had the time/budget, it would have been great to properly refactor it, but partial classes helped me move in the right direction without sinking more time into it than the client was willing to pay for.
Does the SSH.Net package support this?
A quick google suggests that may be the way an OrderedDictionary is implemented under the hood actually. Not sure though!
See, this is what I'm talking about. I have a post made up, but reddit limits replies to 10k characters and it's currently 14,443. I'll do some editing tomorrow.
ahaha, that actually reminded me of good old [https://pastebin.com/](https://pastebin.com/) ! I used it alot back then, not sure what's the limitations though.
Switch statements used to be compiled to Dictionaries. Roslyn compiles them to hash codes and does a numeric switch/jump. I totally get the code bloat concern though
Thanks for the info about the switch statements. I'll have to look into that now. I almost never used switch statements in the past, but if they changed it in roslyn, they might actually be useful now.
I think what you are asking for is [inline mapping](https://docs.automapper.org/en/stable/Inline-Mapping.html). In that Action/Method/Class, create a new mapping which you feed into the Mapper.Map() call. So for example, you could: var source = new Employee(); return Mapper.Map&lt;Employee, EmployeeDTO&gt;(source, opt =&gt; ConfigureMap().ForMember(dest =&gt; dest.Address, m =&gt; m.Ignore()); If you plan on using this mapping in more than one place, you could create a class that you inject with DI that does the mapping for you using the same code. For example something like `public EmployeeDTO Map(Employee);` as a signature.
I think what you are asking for is [inline mapping](https://docs.automapper.org/en/stable/Inline-Mapping.html). In that Action/Method/Class, create a new mapping which you feed into the Mapper.Map() call. So for example, you could: var source = new Employee(); return Mapper.Map&lt;Employee, EmployeeDTO&gt;(source, opt =&gt; ConfigureMap().ForMember(dest =&gt; dest.Address, m =&gt; m.Ignore()); If you plan on using this mapping in more than one place, you could create a class that you inject with DI that does the mapping for you using the same code. For example something like `public EmployeeDTO Map(Employee);` as a signature.
I will actually keep this in mind for the future, good tip! I actually got it working with my own wrapper and everything so it worked out well.
Instead of getting new page/block blob references, couldn't you just cast? Actually, does IListBlobItem have DeleteIfExists? You could just do &gt;&gt;&gt;if(item is CloudBlobDirectory) { await DeleteBlobAsync(containerName, item.name); } else { item.DeleteIfExists(); }
I don't believe `IListBlockItem` has `DeleteIfExists()`; &amp;#x200B; My understanding is that `DeleteIfExists()` applies only to `CloudBlob` References (i.e `CloudPageBlob`s and `CloudBlockBlob`s)
This is a new documentation that was shipped back in May. I'm posting here to see if there is interest in me posting new content from the docs. If you think this is not /r/csharp worthy content, let me know. &amp;#x200B; Full disclosure: I'm a Cloud Advocate at Microsoft.
You're right. So if(item is CloudBlobDirectory) { await DeleteBlobAsync(containerName, item.name); } else { (item as CloudBlob).DeleteIfExists(); }
Step N+1, curse the fact that your interfaces are now bloated. I'm no fan of SOLID in general, but SRP can and should be applied to the design of interfaces.
Yeah, I have to say that this sort of implementation, coupled with good documentation of course, would have made the big project at my company far, far easier to understand. They use dependency injection for a huge number of things and the code base is so large and, um, opaque that pretty much the only way you can figure out what's actually implementing some of the interfaces you run into is to download all of the code, build and run it locally out of IIS (theres a bunch of web.config files you have to change but it can be done), and debug it so you can step into the call to the interface in question. If we had this in place we could at least make it a requirement that when devs add their partial class they have to include documentation as to where the rest of it is.
I'm a fan of this. Pretty much the equivalent of Steve Klabnik posting updates of Rust to /r/programming and/or /r/rust
So a docs update would be appreciated. Awesome! I'll poke internally to see what's new and what's coming. 😄
 &gt;I have a list of codes with what the code means. This should be a read only dictionary with &lt;int,string&gt; &amp;#x200B; &gt; I'm looking to do a loop with a [string.compare](https://string.compare/), where I will look for the error code and if it is there, I'll print the error code that matches. &amp;#x200B; You need to write a function that return an integer or (array of integer). You could use [Int.TryParse](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/types/how-to-convert-a-string-to-a-number) and String Split function to achieve this.
I looked at tried running the sample code and the DLL hasn't been able to work properly, you think you can give it a shot perhaps you can get it to work?
Nice article - thanks!
&gt; add it as a dependency and try calling a method from it Even if that works, you could call another method from the same assembly and have it fail. You need to test everything you're going to use if you want to be sure.
This is the answer. I just did something similar and there is quite a lot of control to be had over the serialization/deserialization process.
Before I'd have done this with an abstract class. What's the technical difference? In architectural design there doesn't seem to be one?
Cool
So that's just a guess. But I think the moment you insert something, the DataSource is overwritten. How should it know what to use? Do you want a DataSource or do you want your custom Item? How should it handle itself when the DataSource changes? e.g. new items added 7 deleted? So basically when you select a dataSource you bind your control to this collection. If you want to add something you need to add it to the collection. So basically make another step in between. But the items first into a Collection. Set the collection to be the DataSource. Then add another item to the collection.
You could implement multiple interfaces in a class, but only inherit from one abstract class.
I'd be fairly surprised if you found such specific learning materials. Apart from learning the language in general for which there are countless resources (the sidebar and pinned thread contain some), you'll want to look at the documentation and vendor websites for your devices to find out if they offer any SDKs, what kind of connectivity they support (serial, USB, custom protocols or standardized stuff like SCPI, etc.) and go from there.
I like the idea. I generally have no clue when new tutorial content gets posted on MSDN, and I'm more likely to see it here than on Twiter.
Ah right. Always forget about that. Thanks!
I like it! Sometimes I forget the documentation isn’t useless anymore.
Would this feature introduce problem when mocking an interface? If a method which has a default implementation is invoked during a unit test and that method’s logic is not relevant to the test, is this not introducing a dependency?
I was gonna say entity framework as well. A pointer here is look at devart's entity developer. It can make it pretty darned easy.
It “depends”
You could probably add your "--Select Penalty--" option by adding it to the original SQL... SELECT 0, '--Select Penalty--' UNION ALL Select ID, Pen_Name from penalties or thereabouts should do it Then there would be the issue to sort the values so the '--Select Penalty--' is first then others sorted by name, maybe something like ORDER BY CASE WHEN ID = 0 THEN ID ELSE Pen_Name END
Use Dapper or ServiceStack.OrmLite. Only use EntityFramework if you specifically need the features it provides.
Yeah, I had guessed it is a fairly niche focus. Thanks for the information, any help is a step in the right direction.
Yeah it's always going to hitch. Anyone telling you it won't just isn't very perceptive. The actual video loading isn't completely async I don't think even when you specify async. It still chokes the UI thread.
Although true, you can still accomplish the same idea with composition. Default interface implementation is definitely more convenient, however. Personally, I'm not a fan just yet. It sort of loads the argument against composition in some respects and creates a possible mini-diamond-pattern in C#, which C# promised to solve with single inheritance and interfaces. What if you have multiple interfaces with a default implementation of a method with the same name? Probably won't happen often, but it's possible (especially if you don't have control over all the contracts). Only way around that would explicit implementation, which leads to multiple interface references to the same instance or public helpers with unique names to sort it all out. That's being super nitpicky, I fully admit. It's probably a rare (if ever) scenario. I'm still not sold, though. I'm sure with time I'll get used to it and find ways to use it and become a fan. Adapt or die, right? :)
It will be interesting to see how that pans out. It's a default implementation and a class can override it with an explicit implementation. It stands to reason mocking libraries should be able to cope with that. At the same time it's not a traditional override like we're used to, so maybe it'll throw mock developers a few curve balls. Personally, I'm not entirely sold on the idea. I lived through some horrors of diamond inheritance a long time ago and I still have some shell shock over it. I know this won't be quite the same but there's still the possibility we'll see some diamond patterns creep into our codebases (in a language that originally promised to solve that problem with single inheritance and interfaces... oh my.) :D Oh well, adapt or die!
Default interface. The worst idea by the Microsoft team.
So there is no way to make it fully async?
You’re entity object should not be the sNe object as your mvc model. They have different meanings and uses. EF is trying to persist the SelectListGroup to its own store within the database, and since you haven’t mapped that object it’s complaining-about it. Separate the EF object from your MVC few. Or and this is bad practice you can add EF attribute Ignore to those side properties...
If you find a way let me know. I could never figure it out (if it's possible). Now that WPF is open source, we might be able to see what's going on with the control.
Begin by writing basic send/scan/query methods using VISA drivers. This is good practice and when you get these basic building blocks working you can build data collection routines / automated calibration / etc. I've been programming in the metrology field for about 15 years now using C#/.NET and it's really rewarding seeing your creation being the brain that controls a system of unrelated measurement devices to produce a result. Unfortunately there are not many resources to help a beginner. Download and install VISA drivers from Agilent/Keysight or National Instruments. VISA documentation and VISA32.DLL are usually installed with it. Read relevant parts of the documentation and I think one of the two driver sets comes with a C# wrapper with the basic functions already written. But again, it's good practice to write these yourself, or at least wrap the wrapper with methods that open a session/sends command/scans for response/closes session and then returns the response. Hope this helps.
Chances are the body of the lambda is optimized out when the JIT inlines the operator and realizes you're just assigning a value to an unused local variable. Debug mode disables optimizations.
Looks like you are correct. The exception is indeed thrown, so there is no problem with `checked` keyword. https://i.imgur.com/vzWilDP.jpg Is there a way to fix this test?
Dunno what unit testing framework you're using, but if `Assert.Throws` has an overload that accepts a `Func&lt;T&gt;` an easy solution would be to change the lambda to return the casted integer. The JIT won't eliminate the code if it can't be sure the value isn't used. There's also the [`MethodImplAttribute`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.methodimplattribute), but since attributes can't be applied to lambdas that would be somewhat ugly.
What about making one video out of two and then changing the position instead of switching videos?
It is Xunit and it has a `Throws&lt;T&gt;(Func&lt;object&gt; testCode)` function but I'm not sure how to use it. Did the following but it has the same issue (no exception): Assert.Throws&lt;OverflowException&gt;(() =&gt; { return (int)di; });
Quoted from the article: &gt; Imagine a documentation site such as docs.microsoft.com or StackOverflow any other site with readmes/tutorials – providing an in-browser C# REPL so that you can play around with the types/examples straight away – that could be extremely valuable. That appears to be the aim of Microsoft's [Try .NET project](https://dotnet.microsoft.com/platform/try-dotnet).
Because I want to have different video options
That makes more sense that the disaster I saw :)
Huh, turns out RyuJIT indeed doesn't do overflow checking under certain circumstances for inlined static methods that convert from `uint` to `int`. Seems like a bug to me, although I'm surprised I couldn't find anything about it in a quick search.
Yeah, the same tests had no issues with other casts to `byte` `ushort` etc!
I don’t know of any way to do this easily without using some libraries. If you are willing to change code, there’s a avro or protobuf that you might use. Otherwise, I guess you could write a small function that splits the array in 3 parts and convert the bytes to their respective type (two doubles and one byte) and pass them to the constructor of your class (or use properties or a builder or whatever else). Personally I’d just parse the array as this solution seems very simple.
&gt; you're asking NInject to inject the same instance of the SFTP client in multiple places, &gt; that SFTP client stores, in its state, its current directory. What does it mean to use a SFTP Client that is stateless? I'm using the SSH.NET atm, I injected with dependency injection myself, so I won't have to create a new instance each time I need to access something.
hello, I am using SSH.net library, what do you suggest I should do?
&gt; What does it mean to use a SFTP Client that is stateless? As I said, what appears to be happening is that the current working directory is part of the client instance’s state. But you reuse that instance, concurrently, so you can’t rely on what that property is set to. &gt; so I won’t have to create a new instance each time I need to access something. Why don’t you want to create instances? Is it to avoid setting the configuration? Maybe you should put the client *config* in your DI container. Is it to pool connections together?
See my other answer to you!
Interfaces still behave the same way. Mocking libraries will continue to work just fine. DIM can not contain stare, so the diamond of death can not occur.
&gt; HttpFactory Do you mind helping me with this? I'm pretty much a beginner and could use some help / guide on how this works. Your answer atleast sounds really reasonable to try.
Yea sure mate. Any support this. Please read some material about Factory pattern to try and understand the pattern. Gang Of Four design patterns is industry standard but at least two articles of some sort. Just understand the concept and conventions. There was some code posted here before which is on the right track. HttpFactory should be something you use as a guideline for code needed. Some some features. PM when you read some things about it.
you can search blobs by prefix where prefix is your folder name. and then delete them all public async Task&lt;bool&gt; DeleteBlobsInDirectoryAsync(string containerName, string blobName) { var cloudBlobContainer = \_blobClient.GetContainerReference(containerName); BlobContinuationToken blobContinuationToken = null; do { //searches blobs by prefix var blobs = await cloudBlobContainer.ListBlobsSegmentedAsync(blobName, blobContinuationToken); blobContinuationToken = blobs.ContinuationToken; foreach (var item in blobs.Results) { if (item is CloudBlob blob) { await blob.DeleteAsync(); } } } while (blobContinuationToken != null); return true; }
I have fixed it for you; I am using `long` instead of `int` for `Rated` because `JsonConvert` apparently deserializes the object to `long`. You might be able to find a setting to change this; or otherwise you can just cast it to an integer if you want to use an integer :) Here's the code: class Program { static void Main(string[] args) { var statusWithLong = new Status { Id = 550, Favorite = true, Rated = new StatusRatedValueWrapper { Value = 8 }, Watchlist = false }; var statusWithBool = new Status { Id = 550, Favorite = true, Rated = new StatusRatedValueWrapper { Value = true }, Watchlist = false }; var jsonLong = JsonConvert.SerializeObject(statusWithLong); var jsonBool = JsonConvert.SerializeObject(statusWithBool); Console.WriteLine($"Serialized long: {jsonLong}"); Console.WriteLine($"Serialized bool: {jsonBool}"); Console.WriteLine("-----------------"); var deserializedStatusLong = JsonConvert.DeserializeObject&lt;Status&gt;(jsonLong); var deserializedStatusBool = JsonConvert.DeserializeObject&lt;Status&gt;(jsonBool); if (deserializedStatusLong.Rated?.Value is long) { Console.WriteLine($"Deserialized long: {deserializedStatusLong.Rated.Value}"); } if (deserializedStatusBool.Rated?.Value is bool) { Console.WriteLine($"Deserialized bool: {deserializedStatusBool.Rated.Value}"); } Console.ReadKey(); } } public class Status { public int Id { get; set; } public bool Favorite { get; set; } public StatusRatedValueWrapper Rated { get; set; } public bool Watchlist { get; set; } } public class StatusRatedValueWrapper { public object Value { get; set; } }
Thank you very much Sander, I will try that out later today!
And are you legally allowed to share this code?
From most nested outwards. Create objects that represent the branching. When the tree is complete reduce the objects.
You really quit because of this? Code like that was my daily business, since we developed our PLC code in C++ and had a compiler convert it to SLC, Ladder, STX and so on. And yes, we had to use constants for true/false there as well in order to be able to switch the PLC manufacturer without changing the code.
And what about the nested for loops? There are 4 of them in this screenshot alone
Refactor to method. Replace side effects with returns where possible. Fix the variable and member names with better descriptive names without Hungarian notation noise. Find and kill the person who wrote it.
I mean there were other factors, but this was representative of the work I had to do. I was learning nothing except shoveling water out of a sinking ship. This was in the financial industry so a mistake in code change could result in millions of dollars in loss, and it just wasn't worth it.
Also, there's [OzCode](https://marketplace.visualstudio.com/items?itemName=CodeValueLtd.OzCode) Which is quite handy (especially for debugging LINQ) and offers a 14 day free trial (no signup needed!) Only works on Visual Studio, not VS Code
Huge respect for OzCode, but it's not free. :)
true that :) There are free MVP licenses, Open Source licenses and heavily discounted student subscriptions, though... and the free trial, which is something!
Edit: so apparently a lot of you are wayyyy smarter than I am and would have stayed at this job. &amp;nbsp; Let's see your refactored version of the code that I posted.
In all honesty? No. But IP is mainly to keep companies from stealing each other's code / software, and I'm 1000% sure nobody would ever want to steal this heap of shit. And what does your simple "step by step" refactoring of this code look like? Could you even pseudocode it here?
Why are you using AutoMapper
Honestly, if the correctness of the code is that vital, and it isn't unit tested so far up the asshole that even the most determined proctologist couldn't find it, then clearly there is a problem with the development process. No accountant worth their salt would handle big figures without some form of double ledger accounting (at least, I assume they wouldn't).
Welcome to Wall Street, where so much mission critical code is in Excel VBA macros and can't be in Git due to the binary file composition :)
Holy christ
This looks like the code I'm used to as well. Offshore can really do a number if onshore isn't doing proper code review.
Yeah I would quit too if I had to use a light IDE theme.
You probably shouldn't have admitted that online. That's a really bad day waiting to happen.
Haha you maybe right, thankfully I don't have any self-identifying information on Reddit, and I also don't see any company wanting to claim this horseshit code as theirs!
I’m “offshore”, and I’ve seen so much shit made by unsupervised or stubborn “onshore” in the last decade, it’s not even funny.
It's still breaking the rules though and shows you have no care about the company you work for
Not trying to brag, but I've seen worse. I also quit after a year. Life is too short for this kind of sh**.
If the complexity is necessary then at least move each loop to its own method. So method Foo() might loop over some list, and within that loop make a call to Bar() which in turn has a loop. Sometimes it's possible to improve the algorithm to reduce loop nesting, sometimes it's not worth it.
The last step is the most important.
I probably care MUCH more for companies I worked for than they cared about me.
Sorry mate I didn't mean to imply that horrific coding is only performed by offshore developers. I've also had incredible offshore resources as well idiotic onshore coders on my teams.
ReEEeE inSErT liGhT tHeME JoKe hErE
Dude you literally have a [video](https://www.reddit.com/r/golf/comments/aao22y/looking_for_swing_tips_please_driver/) that shows not just your face but your entire body... You can also tell for the subreddits you post to that your fiance job was probably in NYC. If I can find that out in 30 secs someone can find a hell of a lot more if they wanted to.
Not this again.
If you can move pretty much everything else out of the way, 4 nested loops isn't necessarily too bad. It's not the prettiest thing ever, but it's not code gore.
Definitely start by writing some tests. I assume this pile of randomly-assorted symbols doesn't have any. Write as many tests as possible, cover every piece of logic and as many combinations as you can. Then, just write it again in a new notepad tab. It'll end up so much better and the tests cover your mistaken &gt; for &gt;=, or ! for !! type mistakes.
I'll note that, thanks sir for watching my back :)
Link to concatenated code : https://pastebin.com/McWaXcqc
Speaking of offshore. Currently in working for a very large bank and my current project is done offshore on contract. The code quality is not this bad but it's not great either. I'm contemplating on quitting (because of various reasons) and one of the reasons is offshore contracts it's very hard to manage and communicate with those guys.
Read Michael Feathers' Legacy Code book. And keep invoicing them.
The job market where I live is heavily skewed towards developers, leaving because of this kind of thing is entirely reasonable if it causes you distress. There's basically two ways you can tackle this kind of thing, you can take the lead and force the team to improve the situation which also helps climb you up the career ladder, or you can leave to a place that is a more relaxed environment. You have no obligation to suffer on behalf of a business. Ever.
Yes I actually bought that book and read it, explicitly for this job! But step #1 he says is to cover legacy code with unit tests, which sadly (yet predictably) management wouldn't allow time for.
Yup! Agreed. A lot of the offshore that write this is fresher's that vendors add last minute. Onshore is responsible to guide them and teach them how to do. In my last project, they would check in psuedo code and merge after PR for onshore to work on. I pushed back, but onshore vendors just merged. So sad to see how bad codebases can get.
I've not used this, but perhaps [Marshal.PtrToStructure](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.ptrtostructure?view=netframework-4.8) is what you are looking for?
Code should never 'make you quit' not being allowed to fix the code...fair enough. Write tests...refactor...fix tests...repeat...It's really pretty straightforward to fix this sort of thing if your business supports the process. In this case that code is really not maintainable and is a massive time sink for any changes Any half-decent manager would recognise that. Wild guess...you had a shitty manager who didn't care beyond picking up their paycheck?
Regional bank in the southeast US? If so, I can feel your pain! Offshoring sucks. It's chiseling away at the middle class in one country in an effort to exploit the cheap labor of another country. Especially in IT.
No offense but to me that sounds like more headache. The mental tracing that is required to loop through Method A, which loops through Method B, which loops through Method C which loops through Method D? And within those loops are also If's and else's...I'm not sure if that really helps.
Created it for a uni credit project. I was wondering what you guys thought? Any tips/criticisms welcome. Link to concatenated code: https://pastebin.com/McWaXcqc
This is a great candidate for r/programminghorror
Well the thing is, if something like that already causes someone to suffer and quit his job, I might have difficulties having him working for me as a "developer" anyways. Depends on the definition of the position.
Tip: never use a modal dialog of any sort to tell the user that the action has succeeded.
&gt;shitty manager who didn't care beyond picking up their paycheck Welcome to Wall St/finance! Agree 100% with what you said btw. Basically everybody down the totem pole wasn't willing to pay for the technical debt, and kept hiring new tech leads to heap their insane debt onto without giving them time to fix the issues.
Haha, none taken. Depending on why you're tracing, you're right, it can be awful. Well-chosen method names can help quite a bit, with the idea that I should be able to tell what the top loop accomplishes just by looking at its guts. If I care about how the next level down works, then I can look at that. Simple in theory, hard to do well. I'm a big fan of Clean Code by Robert Martin where he covers situations just like this. I'd highly recommend the book if you haven't read it.
100% one of the best coding books around. I've hosted a few lunch &amp; learns where I presented this material to junior team members.
Ya, this really isn't that bad at all. Looks like finance or something. Try looping through xbrl files. If you quit because of this, you may as well quit programming all together. How do you know this from offshore anyway? I've had a lot of offshore developers Who were fantastic.
That's why you create unit tests ? Ha, I knew this was fintech code. This is seriously nothing.
Can’t blame you.
Did you just hate the codebase or there was time pressure where you had to explain that you can't do the job because of the quality of the codebase? Were you allowed to slowly fix it? Did you have QA person to test the changes you apply so that you are not solely responsible for bugs? I personally don't care that much about bad codebase as long as I am allowed to fix it and it doesn't result in pressure on me (i.e. management understands the situation)
&gt; I was learning nothing &gt; I definitely don't have your depth of experience in legacy code maintenance / refactoring. That was something you could have learned. Programming isn't always about steady progression. Sometimes you pay someone else's technical debt, sometimes you do new stuff. Either way you are going to learn something. Shoveling shit is part of any job.
I’m guessing you’re not familiar with version control, and services like Github, Gitlab, Bitbucket? If you want to share source code those would be very much more useful and using version control is a good idea always.
Just for the records, returning early is not a pattern to follow blindly. Especially when handling ressources it can be a pita.
I mean maybe you are right however this post does not make you look like you do. This could cause a lot of issues not just for you but the company you work for as well
Good one
Can you explain further please? I have always tried to return early...
Sorry, though concatenating the code would be easier for you guys. Github link : https://github.com/mr360/IMS
Why is this "nothing"?
In regards to me seeing much, much worse.
There's also Skype4COM. Dunno if it still works though... I still have the old help file somewhere.
My last job we offshored the off shore guys, we had India as our primary offshoring location until it started to become expensive, we started sending that work to the Philippines for even less. Previously every site had two IT guys, that dropped down to 1 and they took away domain admin rights and made all the local guys admins over their site ou... I mean they should have but this is back before people cared about security. Now local IT is backup operations and anything you cant fix over the phone.
Having to manage code like this is like if you were a auto mechanic, and your boss gave you a burned out car and was like, “we want to change the oil on this.” And you want to change the oil, but even if you did somehow work around the rest of the car/engine being destroyed, it is still burned out. And when you suggest purchasing a new car, they’re like “just refactor it and write some tests” wait, the metaphor failed.
Congrats I guess? i am sorry if this isn't up to your standards of horrific code.
It's good for cases where you wouldn't expect the method to continue, like bad parameters. In small, clean methods it's OK for the trivial cases (like 0 in Fibonacci sequences). These kinds of things are handled before the main body l of the method. But in a method of 10 lines or more a return in the middle will be quite easy to miss and can be quite confusing.
That doesn't work for me, still is returning the `Address` property in the JSON body. I totally forgot to mention, but I already tried the inline mapping as you suggested (my bad, didn't clarify that!). I was under the impression that what I did was wrong, but it was just exactly as you wrote (sansn an `opt.` before the `ConfigureMap` method, otherwise it won't find it). Thanks for the suggestion, though!
bottom line is the project is legally MIT. ie no one is going to sue you for using it, even if you dont pay. I want MIT so that people can re-use the code in any way. [https://github.com/Fody/Home/blob/master/pages/licensing-patron-faq.md#honesty-system--enforcement](https://github.com/Fody/Home/blob/master/pages/licensing-patron-faq.md#honesty-system--enforcement)
It wasn't my call, it was decided by the senior devs. As far as I know, they want flexibility on the code.
What platform did you use to write PLC code in C++? Just curious!
Looks like typical legacy code for me.
This does help, I appreciate the input. I’ve been playing around with the idea of purchasing an older Tektronix TDS O-Scope so I have something to play with at home while I’m learning. Do you recommend a specific piece of equipment or publication to utilize and learn on?
since we're in /r/csharp I'll leave aside other reasons valid for other languages / systems (f.e. when you don't have GC, or when you need continuous cycle time, or whatever). Just a quick example, imagine you have one method which is being called hundreds of times throughout your whole program, and you want to add a debug log message for its return value. If you have 15 return points throughout the method, you are basically left with two choices: either you add the log message at 15 points, or you add a wrapper method, which does the logging, and call that one instead, which might lead you to other troubles. If your method is SESE, you add the log message before the return statement. I'm not saying it's wrong, and I use it a lot, however, there are two sides to every medal, and I personally frequently feel multi-exit makes extending existing code which you don't know too well a bit harder.
I always think of it as "return early" is fine, "return as soon as possible" isn't.
While there are PLCs which have native C support (B&amp;R), we had a self developed compiler.
That's not a bad way of thinking about it.
just introduce a bug and put in your 2 weeks notice.
You don't believe that your former employees lawyers are not smart enough to being proceedings &amp; then start legal process against Reddit &amp; Imgur ??
On the contrary, for sure if they wanted to they would probably find and identify me. However I just don't think it anywhere close to the sphere of probability for that to happen in the real world, especially given that this code is both meaningless and reprehensible.
I actually work for one of the big PLC manufacturers and that was one of my first thoughts. We have a massive 20+ year old codebase in C/C++ that lets engineers create PLC programs via GUI.
If you can change ABC to a struct, [Unsafe.As](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe.as?view=netcore-3.0#System_Runtime_CompilerServices_Unsafe_As__2___0__) should work. var abc = Unsafe.As&lt;byte, ABC&gt;(ref array[0]);
&gt;quit my high-paying job in finance I worked with code like this in low-paying jobs in finance. Nested 'ifs' are classic.
&gt;Looks like finance or something. Yup. Sell-side Wall St. &gt;If you quit because of this, you may as well quit programming all together. I didn't and continue to do quite well.
More like they tell you the code base will be rewritten in 5 years so maintenance programming is a waste of time, just patch it. And in 5 years there's no budget to rewrite.
&gt;But in a method of 10 lines or more a return in the middle will be quite easy to miss and can be quite confusing I'm racking my brain and I can't think of any real world cases of this besides returning a default value.
PM me your email address and I’ll send you some source code to get you started. As for equipment to practice on, yeah, the cheapest remote controllable, new or used, oscope or multimeter you can find or borrow.
&gt;If I care about how the next level down works, then I can look at that And has there ever been in instance in your career, where you didn't navigate to that code? I'm gonna bet no. Yes you need to name the methods precisely and accurately; that doesn't exempt you from having to look at the implementation, especially if that is in your own firm's codebase.
Your probably right especially if you don't have a NDA in place with liquidated damages.
General approach is to write unit tests until the method has 100% code coverage. Then print it out on paper, annotate it with documentation about what it's doing and why, delete the original method body and start over, re-implementing to your annotated documentation like you're working in a clean room with the unit tests as guide. But that's probably overkill as this example really isn't all that bad as far as fixing it goes. From quick look at it much of this logic needs to be encapsulated in the objects that own these collections, most of the `is collection != null` should be fixed by just ensuring that collections are always initialized, and you don't need to check if a collection has elements before looping through it if all you are going to do is loop through it for **0** iterations. That alone eliminates most of your levels of nesting. So better object design initializing collections, encapsulation, and replace primitive control structures with LINQ. By the way, you should have anonymized by replacing variable names. It would have taken like 2 minutes.
He also goes on to describe how to handle untestable code. Like 90% of the book is about untestable code.
We had a guy quit (well really just not show up on day two) because our system had some legacy VB6 in it. Not that he was being asked to interact with it, just that it was there....
If you ended up with 15 possible outcomes, your function's cyclomatic complexity is through the roof and is probably at risk of turning into Skynet.
Dude I wish this was the code I had to debug. We don't have to deal with jumping across threads or over the network, there's no event framework, there's no complex useless injection abstraction, nothing is being hidden. I could refactor this into helper methods in an hour and live in bliss.
Absolutely. An example based on code I recently worked with: ``` public List&lt;Foo&gt; GetResults() { List&lt;Foo&gt; results; foreach(var thing in things) { var monthlyResult = GetMonthlyResult(); var yearToDateResult = GetYtdResult(); var concatenatedResult = ConcatenateResults(monthlyResult, yearlyResult); results.Add(concatenatedResult); } return results; } ``` The first two method calls in the loop might have loops themselves, but if I'm debugging I might find that my issue is in the 3rd method. If those first two methods were instead inlined, the loop would be large and hard to read, making it more difficult to get to the part I'm interested in. Edit: on mobile, formatting might need work.
Gather related lines of code in a method into their own method. Gather related methods into their own class. Make sure you get a second set of eyes to review the flow, as I've found it easy to get lost in the weeds after throwing an 800 line method into the refactoring wood-chipper and coming out with 20 methods and 3 new classes.
&gt; was created before git According to text they've started writing it around when git was initially released. According to Wikipedia it was first released 1.5 years after git was...
I'd hate to be the guy who has to find where the missing closing curly brace is.
Searching for an item within a loop, returning once found. Preferred: assigned to a variable once found, break, return variable at the end of method. (Though even this pattern is superceded by any number of LINQ enumerable extensions)
when do you ever need to do `!!` in C#?
How is that even remotely confusing, you're just returning exactly what is expected from the caller and not causing longer processing times by looping any more than necessary.
How many times is this thing breaking the Single Responsibility Principle? 15 times it sounds like.
Removed: Rule 2 (posting proprietary code), self-doxxing. Don't take it personally OP. I'm of two minds whether to let this stay up or not. Good luck moving onto your next job. You can also consider posting/ranting at /r/cscareerquestions or /r/programminghorror.
not at all?
Thank you so much! The continuation does what now?
Hey, at least it seems to use `Nullable&lt;T&gt;`. One of the projects I worked on used magic values like `DOUBLE_NULL = Double.MinValue` to represent nulls, and every other week there'd be a bug where some code path doesn't check for that "null" and a customer receives a bill for a negative bazillion dollars or whatever.
You can also have a struct implement an interface, but not an abstract class. (Though that's probably not something that comes up often.)
I don't think this introduces problems unless it's possible to add non-virtual, public members to an interface. That was possible at certain points in the proposal, but I don't know if that's part of the final result--I don't *think* it is (but I'm not sure how to confirm--github proposal seems to be gone, MSDN language ref isn't updated, I don't have access to C# 8 to test, and I really don't have time to crawl through the repo and grok enough of the compiler to tell from that). As long as you can override everything public about the interface, mocks should work exactly as they did before. Additionally: IIRC, this feature is one of the ones that isn't supported on Framework. In the short term, at least, it's only going to matter if you're on Core.
when you call cloudBlobContainer.ListBlobsSegmentedAsync(blobName, blobContinuationToken); the property ContuiationToken will be null if the result set is empty. This method is simple but does result in excess requests.
&gt;ListBlobsSegmentedAsync if you have a lot of blobs, this method will return only a bunch of them. ContinuationToken indicates that there are more blobs
PM sent, thank you for all the help.
Exactly. I fully support not working for companies that don’t prioritize good practices, which would prevent this from happening. If we all just refuse the work, then the market will correct this behavior in companies. I know some people probably don’t care, they’re okay just coding in whatever environment. For me though (for better or worse) working with this kind of code is like emotional abuse. I like to take pride in my work, and I derive a lot of my motivation from doing good work. Working in code like this literally depresses and demotivates me..
So why not just use ListBlobs()? Why use a function that only returns some blobs and not all of them? Just genuinely curious!
There's always someone willing to do it for a buck less, and they do not care about reading the code in 2 years they won't be around to see.
That's unfortunate, we were having some lively conversation.
Your solution is rife with UX problems. 1. No password protection with user entry 1. Codes with no explanations 1. Lack of lookups for things like the customer Id 1. Lack of date/time pickers for date entry 1. Missing field definitions for payment details 1. Annoyingly frequent dialogs I could go on.
Why stop at two `!!` exclamation marks? https://stackoverflow.com/a/18512432/1269654
Hate to break it to you, but every company you go to is going to have some crummy code and sometimes crummy developers. You should ask yourself if you are willing to deal with this spaghetti versus that other spaghetti.
&gt; and even has its own distributions of Mono haha
Yeah, csv helper will do the trick. It’s a pretty straightforward problem like you’re thinking. Use csv helper to read in the document, make the changes, use csv helper to write back to original or make a new copy. Honestly, you could probably do this without csv helper if you wanted. That’s kind of the nature of CSVs. They’re created so that you can easily read/write them.
This is the real picture https://www.mono-project.com/news/2019/02/13/plastic-scm-a-full-version-control-stack-built-with-mono/
I was thinking the same thing, that CsvHelper may not be required but I haven’t been able to find much in the way of help/examples online for this particular task. I’m sure it’s been done to death though.
what if you have 1K blobs? or 10K? it's not efficient to get them all in one operation
Imagine you are calculating a value, and you have a longish method to do that. Someone debugging the method might want to know the return value, so they stick a breakpoint at the end of the method. But let's imagine that under certain conditions the calculation is different (not trivial, just different) so there is an if to handle that specific situation, and in that block there is a return. The return in the middle of the method is missed, so they get confused about why the breakpoint isn't hit. The more potential exit points a method has, the more confusing it generally is, so a good pattern to follow is one-entry-one-exit, where you start at the top and end at the bottom. There are exceptions to this, such as parameter validations and trivial returns (which should be in an obvious section at the start of the method), and selection lists (for example, a switch where each case is just a return). Similarly, in short clean methods it's not as big a problem. Some ways to deal with the situation I describe could be: * set a return value and return that at the end. You can set a breakpoint at the end of the method with confidence you'll hit the breakpoint. * make different methods to handle the different cases so the alternative calculation of the value becomes trivial
I don't agree with picking one language and sticking with it, and more significantly, there are some languages that are a mess but that you will probably need to learn anyway. The Electron framework combines a web client and server in one package and offers a stupid easy way to re-purpose web devs (oh my god JavaScript and the DOM are both a mess) into programmers for all Electron-supported platforms because the online version of the program and the "native" version for Windows, Mac, Linux, etc. are basically identical, differing only in the underlying Electron client/server stuff. If you have ever used Discord's online version and then used Discord's "native" version you can install on your computer, you've seen Electron in action. The downside of this is that web programming is awful (take the awful mess that is CSS and then try to programmatically modify it and not end up with an inexplicable mess of displaced page elements, woo!) and the field is full of mediocre "devs" whose biggest skill is JavaScripting their way into a mess, but it's only partly their fault because they're being asked to cut trees with blunt saws and stretched piano wires. .......but because Electron so handily solves all of the cross-platform issues, it's in widespread use and "is the future of programming." A bleak future, but one that doesn't require knowing the quirks of every target platform and littering their C/C++ with #ifdefs to handle special corner cases. It's faster to develop an Electron "app" that sits on top of an embedded Chromium core than to write fast and light system-specific code, plus that development can coincide with the actual web app, so even though JavaScript, CSS, and the DOM are nasty things, *you almost certainly need to learn how to build web apps with them.* Remember that it doesn't matter what you like, what matters is what employers want you to do. You can learn Erlang but most employers probably won't use Erlang for anything, so don't expect that to help you get a job. Aside from all that, most jobs are obtained through person-to-person networking. You're more likely to find a job through common connections than to get one via an application. Many jobs exist which are never even listed online, especially for small local firms. You need to find ways to meet other people doing stuff similar to what you want to do, acquaint yourself with them, and when their boss asks them if they know a guy that can handle a job they need to create, "yeah, I know a guy, here's u/Mymar's number."
Ah, gotcha. That makes sense. Thank you for the clarification! You were a huge help.
Holy shit. I've wanted this inside Visual Studio since forever. Sometimes I get the app running just so I can set a breakpoint in order to get access to interactive mode, but that doesn't do generics or lambdas etc, this does. Invariably the thing I wanted to try/test/confirm isn't supported in interactive mode. Now I can use this website or iframe.
pretty cool, looks like it's using blazor to compile code to webassembly.
Follow up: will this work if there are other "directories" inside the directory that is trying to be deleted?
It is cool. I saw the launch video and at first couldn't see the point. It took me an hour or two to realise the majesty of it all.
Split to get the data into an array, then Join to get it back into CSV. Piece of cake :)
I'm not sure where I sit on my problems with this document. The example demonstrates how to use the feature, but some of the things it does are *terrible practices* for non-trivial application development. I cringed here: &gt; The most natural way to add this functionality is to enhance the ICustomer interface with a method to apply any loyalty discount. This design suggestion caused concern among experienced developers: "Interfaces are immutable once they've been released! No. That's not what the experienced developers worried about. The experienced developers would have said, "It is not the `ICustomer` interface's job to calculate loyalty discounts. There should be some other type repsonsible for calculating discounts." This isn't just Single Responssibility Principle speaking, it's `Code Complete` arguing that types should be data *or* logic but never both. (This is at odds with some of the foundations people learn in OOP, but the more code I write the more I agree with it.) I think the experienced developers would further point out that "loyalty discount" is likely to change often and isn't even the only kind of discount we want to apply. The right approach is to create something that knows about what kinds of discounts we apply. It can take an `ICustomer` and any number of other things as an input, decide what discounts matter, decide what logic to use, and apply it. So I haven't even made it to the part of the article where we define a default implementation and I'm already strongly against our rationale. Then I got to "the library author wrote a test..." but... it's not a test? There's no assertion. It prints a line to the console, and doesn't even indicate what value was expected. There's a whole paragraph about how now that the default implementation's in place, I have to be careful how I cast my types in unit tests. This paragraph was superflous: if I bothered to make an `ICustomer` then my code probably shouldn't be using `SimpleCustomer`. If the "experienced developer" was smart enough to want to use inheritance-based polymorphism to let different `ICustomer` implementations apply discounts differently, they'd know this. Apparently they don't. Which makes me more confident in my initial assertions that they aren't very experienced. Now we get to: &gt; You can provide a better upgrade experience for more customers by providing a way to set those parameters. Let's add a static method that sets those three parameters controlling the default implementation: Oh. So we want to be able to change our implementation in the future and we realize if we do that, we break the interface. So now we're adding static interface members to control how an instance method behaves. That won't be confusing at all in our program, right? It'd be better expressed as instance properties. And now our `ICustomer` interface is even more confusing. It's the data to represent a customer AND the data to represent how loyalty discounts are calculated AND the logic to calculate loyalty discounts. Oof. If, instead, I had my imaginary framework for applying discounts, I'd handle this parameterization by creating a parameterized loyalty discount. The things not already using it won't have to change. The things that need it can opt in. I can provide multiple versions without anyone who doesn't use them being aware. I can make a version that different instances of the same time use with different parameters. I'll never have to yell at someone for using the static method to change the parameters for their type without realizing it was going to affect 40 other types. So I didn't learn anything other than "this is a tool that is easily misused to enable poor design choices". This isn't an example of "safely updating an interface". It's an example of "creating a coupling that will cause a maintenance nightmare". What worries me is people aren't going to sigh and say "at least I can see the syntax for default interface implementations". They're going to read this and think, "These are design practices supported by Microsoft." Someone out there is going to make the mistakes in that article and argue with a developer like me that "Microsoft said this was good". Microsoft should do better in their examples. If the aim is *just* to demonstrate the syntax, do so without attaching "this is a good practice" or "experienced developers think this way". If the goal is to show how to safely update an interface with new methods, your first hurdle's going to be convincing me an interface should do two different things.
What's weird is if I look at the HTML source, I see all the proper options and values, however, no matter what I select for `penaltyBox.SelectedValue`, it returns 0
I've been developing for over 13 years, I know. This was superlative however, with too much stress that wasn't worth it.
I know this is a csharp subreddit, but do you have to use csharp? You could do this in one line with something like sed or awk. Something like : awk '{$2="xxxxxxxxxx"}1' file Where *file* is the name of the file and *2* is the column to replace and *"xxxxxxxxxx"* is what you want to replace it with.
Why is needing to know EF unfortunate? Having ORM knowledge and knowing WHEN to use ORM frameworks, direct SQL or SP calls is an important skill set that many do not have, which IMO is more unfortunate.
1,3,4,5,6. It is a school project, so the IMS ux was not the main concern nor was it intended to be used in any commercial environment. It was mainly there to show off IMS core. If it was to be used in an applicable environment then those points would be a given. 2 .I thought that the code was self-explanatory. Could you elaborate on what section of code required further context?
I would say yes
« Overall Plastic SCM sums more than 1.5 million lines of code and 95% of them written in C# » Unless they’re counting mono itself in there that seems like a disproportionately large product
It is huge but it runs lightning fast: https://www.plasticscm.com/games/performance/high-latency-network
Could you explain what makes this so great? I’m not sure I understand the application!
Hit a breakpoint and find a null object. More than likely you are missing a join somewhere and you’re trying to populate a view model from a domain object that hasn’t been fully hydrated. My money is that the exception is happening somewhere in your View file.
1. Create a new DirectoryInfo instance, passing the path of the folder 2. Call the GetFiles() method of the DirectoryInfo instance to get an array of filenames matching that pattern 3. Take the first element returned, as well as handling the case where there are no matches.
I will do that, so that i can walk through it, but I am getting the null reference at: @Html.DropDownListFor(model =&gt; model.Genders, new SelectList(Model.Genders, "GenderID", "GenderVal"), "", new { @class = "form-control" }) &amp;#x200B; Which is the first part of the View &amp;#x200B; &amp;#x200B; Edit: &amp;#x200B; The null reference gets caught on: var ages = \_service.GetAges();
You should be able to drop a breakpoint in the view on that line and look at what is in the `Genders` array. More than likely it is null or GenderID or GenderVal is null.
FYI Visual Studio has a REPL for C#, you can access it under View &gt; Other Windows &gt; C# interactive
Okay, so I threw a breakpoint on my edit portion of my previous comment, and it is throwing the null on my \_service tag saying that is null. Is it due to the fact that I have it &amp;#x200B; private SurveryService \_service; instead of private readonly SurveryService \_service;?
Ah. That’s because `_service` is probably null. Where do you instantiate it at? Are you using Dependency Injection?
From my point of view this could be very useful for university lectures where professor could show everything live in his web site that could be visited later at home.
I think that is my problem, I have yet to do so in my controller. I will create that instance and post if that is the root of my error
Entity framework is awesome for anything besides big data. I use it frequently at work and in private projects.
I would have been pretty happy with some BNF and brief explanation, honestly. The example provided is small and very contrived, so I can't really tell if it illustrates the whole feature (however poorly) or it just demonstrates a trivial case.
But those two things are orthogonal, i really don’t see 1.5million of &lt;what&gt; you can put in a scm
I suggest you try RoslynPad, it's available on the Windows Store as well as with a standalone installer. I've been using it for a long time for trying out stuff, it even has Nuget support for your snippets.
 Mono is .NET compliant, as long as you're not using something specific to Mono, if the user has .Net Framework installed, it should just work. You aren't telling us what "isn't working". Do you get run time throws? Windows says it's not an executable format?
That's probably because you've never built a version control system with several cross platform GUIs, LAN client and server and Cloud client and server...
It just doesn't execute, I tried on various windows machines, first without .net installed, then after installing .net it didn't work as well and after installed gtk# from monodevelop website it didn't work as well. You can try my project if you want to see what's wrong, download it here: https://dnd.bernardopiedade.com It's not open-source but I can get you the source code if you want
My guess is that the slowness is caused by your try/catch blocks. Using try/catch to catch InvalidCastException is a sloppy way to go about retrieving these values. You already know the fields being returned, and their types according to their column indices. Adjust your code accordingly.
Hooray!
Readily available on YouTube.
If you don’t know you can just say you don’t know, but i’ve architected fairly large systems and i don’t see how i’d go from « please build us a very fast scm » to « here are your 1.5million lines of code » unless you count framework code (like mono’s source or generated code etc). Programming is getting less and less verbose and 1.5million lines is a lot today, i’m just wondering where they went (maybe it did more than scm etc?) otherwise seems huge
Okay I wi try that. Is there a way to get all the values as a string? So if the value in the database is an integer it will automatically return it as a string with .GetString(n)? I am saving it all as a string anyway
Cast/Convert the fields as a varchar/nvarchar in your sql query.
Well, you know which columns you're querying and which types they are, there shouldn't be any need for trial and error casting and string conversions. Exceptions are pretty slow and shouldn't be used for non-exceptional control flow. If you really need to dynamically determine the type of the returned columns, you can use `GetFieldType`. `DbDataReader` also has indexers that return any value regardless of type. Also, always use `Decimal` for money.
Use a data adapter/data table. You'll remove the need for looping and type conversion.
Yes because the initial DataSource binding changes the text value inside the dropdown. But after inserting, there is no more binding. The text no longer is associated with any data - it's just text. Try my approach with storing it in a collection first.
Found it on YouTube a little while after posting this. Thank you!
Never do work in a catch other than critical cleanup/recovery from failure type stuff. Never use the exception handler framerwork as a way of routing logic, you are adding a ton of overhead when you do this as with every thrown exception the runtime needs to build that exception. This includes a stack trace and meta-data that all must be collected before even executing whats in the catch block.
Addons for sure, maybe bays, customer for sure as well. You enter C000 for the customer. There's a goofy message box that says it was found, but that tells you nothing. What if you heard C000 but the person said E000 and you entered it in wrong? You wouldn't be able to look and see, and then ask "I thought this was for XYZ Company?" and thereby discover the mistake until you generated the sales order. I'm struggling with one thing though. You're asking for tips and criticisms, you show only the UX, but then you say the UX isn't the main concern. So what's the point of your post?
&gt; Found it on YouTube Thanks for posting the link so other people benefit from your research. /s On [this page](https://www.youtube.com/watch?v=sQurwqK0JNE) the third comment has the list of subjects with links to the videos.
And you can load your code into by right clicking on a project and choosing initialise c# interactive
I'm on mobile or I would.
This gets posted here quite frequently...
In the simplest case, it's not really confusing. But as soon as the loop might have conditionals causing you to sometimes assign a value, and sometimes return null followed by logic after the loop that you expect to always occur, but didn't because you overlooked that there was a return within the loop... This is a contrived example, and realistically it's pretty quick to figure out but I've seen those mid-loop returns cause "expected" code not to run before. So as a rule of thumb, I try to either return from a method almost immediately or at the end.
Thanks, I solved my problem by removing the try catch blocks, but I might need the versatility of my old solution, so then I will look into data tables.
&gt;Exceptions are pretty slow and shouldn't be used for non-exceptional control flow. Thanks, this was indeed the problem! I am a bit inexperienced so I thought I could get away with try catch blocks.
Thanks so much for your reply. I replaced my try catch blocks and now it is working wonderful!
Or you could use [LINQPad](https://www.linqpad.net/), with better visualisation, save/load snippets, etc.
An alternative is RosylnPad - a free OSS "clone" of linqpad of sorts https://roslynpad.net/
The easiest way is to just watch [This video.](https://www.youtube.com/watch?v=E-W8e2C1Zwo) She makes it really clear how and why it's great. When I first saw it, I was really skeptical. I expected it to be a Javadocs type PoS, but it's not. It can be a LinqPad in the browser, or a [https://jsfiddle.net/](https://jsfiddle.net/) for .NET. You can use it to teach a group. You just point them at a web page rather than installing Core and an editor, etc. If you write documentation you can embed some .NET code in a Markdown file and it will run in your Markdown. Think of that in terms of documentation. Instead of seeing an example of the code that doesn't run, you can hit go and it will run. Change it and you can see the changes run. They're trying to integrate it into nuget.org so you can try packages before downloading them. And as it integrates with the documentation you can try a nuget package as part of its documentation. Watch the video, it's 12 minutes long :)
Blog posts describing how to do XYZ. Maybe integration on Stack Overflow or other code question websites to demo how something can be done in C# right in the browser, without you copying pasting to your desktop computer
Is this another one or always the same?
He has his own website at bobtabor.com. You can buy each indivual course or get a subscription. I have a lifetime subscription and it is absolutely fantastic.
This fixed my issue. Thank you for your help
What dotnet version are you targeting? When you say "just doesn't execute" how are you trying to run it?
version 4.x . We tried by terminal, with admin privileges, every way possible
You are right, I didn't pretend to sound arrogant and I did, sorry for that. Though, Google for example is over 2 billion lines of code does that seem too big to you?
So sad they took down MVA. Another good course (which I was in the middle of) was Programming in C# JumpStart which I found here https://channel9.msdn.com/Series/Programming-in-C-Jump-Start
And you get no message at all on the command line? That might mean it's running and exiting immediately. You could also try compiling it on the Windows machine using VS Community and see how that goes.
Google is thouthands of project, not just the search engine, and i’m sure even just listing all their projects would take quite a large page, so it sounds &lt;i don’t know&gt; to me because i have no idea how many projects they have and how many of them are large. Google (the product, search engine only, not the company and myriads of other products) i expect to be peanuts compared to those 2 billion lines
There are different discords, but this one gets posted the most.
Nope, nothing. My teacher tried that, he couldn't even open the files on vs, because it doesn't read gtk or something
But what for? :) I mean there are dozens of different powerful and/or fluent ORMs
Looks great!
 queryresults.Add(Convert.ToString(reader[i]));
Jesus Christ get off your high horse
Do they somehow generate money from this?
I've built several systems that have a similar amount of pieces, with considerably more and diverse functionality than a vcs/scm, and all of them were a fraction of 1.5M lines of code. A solid fraction, but still about 1M lines short of that. They also took several years to reach that size.
I know its a massive burden for a first-worlder to hold down a finger copy url, switch apps, then paste in reddit unless you are using both the youtube AND reddit app themselves. thats a BIG YIKES from me dawg
Thank you so much, this works even better than my first solution that I got from this post
"ábC" and "Abc" actually aren't equal, so your example doesn't work. But that aside, there's a nicer way to make this comparison. `"ábC".Equals("Abc", StringComparison.InvariantCultureIgnoreCase)` [`OrdinalIgnoreCase` is another good choice in some cases](https://docs.microsoft.com/en-us/dotnet/api/system.stringcomparer.ordinalignorecase?view=netframework-4.8). &gt; This is most appropriate when comparing strings that are generated programmatically or when comparing case-insensitive resources such as paths and filenames.
Would you fuck off
I believe this discussion about the code base size is futile, tbh, especially when performance – even compared to its competitors – is one of Plastic’s main capabilities.
What's your problem, it takes 3 seconds to find it on Youtube.
Some people (including me) have negative opinions about ORMs.
i actually think WinForms looks clunky and outdated by default. WPF look way more modern and is faster too - by default.
It took you longer to type this than it would for you to do the work you're describing. You've become the thing you hate.
what is the contents of Gender? why not just make it a select list of Male, Female, or Other?
*We’ve also extended “Windows Authentication” onto Linux and macOS. Previously this authentication type was limited to IIS and HttpSys, but now Kestrel has the ability to use Negotiate, Kerberos, and NTLM on Windows, Linux, and macOS for Windows domain joined hosts by using the Microsoft.AspNetCore.Authentication.Negotiate nuget package.* Nice!
Who cares what language their VCS is written in? Why is embedding a forked Mono a good thing? Dozens of VCS were (actually) written before git - RCS, CVS, etc; they sucked. Is this just an advertisement?
Hell yeah code trimming! It's a nice feature of SmartAssembly that has nothing to do with obfuscation. Nice to see it in the linker.
Woah! That’s huge
If you like VSCode, then stick with it. It's good, given you're working in all dotnet core stuff. If you're working on Windows, though, you might wanna try Visual Studio. It has some really nice things, especially the debugger.
That isn't completely correct. Imagine this scenario: errorDictionary.Add(100, "Authorization failure"); errorDictionary.Add(42, "Some other error"); var myString = "100, The user '42' is not authorized for resource 'permissions'."; Your code will return error codes 100 **and** 42. OP needs to ensure those strings are structured so he can correctly parse the error code every time. `String.Contains` just isn't sufficient for what he needs.
True- my example assumes that every number in the string is an error code. If that is not the case, you'd need a well-defined set of rules governing where you expect an error code If it's as simple as the example you gave, you can get the code from the message with: var code = string.Split(':')[0].Trim(); But if the rules are more complex, it might be time to use Regex Edit: actually it's worse. If "100" appears in the string, you'd get a false positive from error codes "1" and "10" with my original code, so you might be better off just starting with Regex in the first place.
Visual Studio is a full IDE and has more features than VS Code. If you are on Windows I would switch to Visual Studio. Visual Studio has a built in compiler / debugger.
To the best of my knowledge, AutoMapper doesn't allow for conditional mapping based on consumer logic, though it does allow conditional mapping based on the source object. This is, probably, due to the fact that mapping logic is cached in AutoMapper and conditional mapping would probably be really weird to implement with a perdormant cache. What I've done with APIs, DTOs, and automapper in the past is to have one fat domain model mapped to thin DTOs, basically one per route so that I could specifically control what properties are accepted or returned from what route. These DTOs would generally heavily favor inheritance, and I'd get a lot of value out of Automappers inherited mapping features.
&gt;but this is more pros than cons. Noice! &amp;#x200B; FYI, Microsoft has a .Net Standard build of ConfigurationManager on NuGet: [https://www.nuget.org/packages/System.Configuration.ConfigurationManager](https://www.nuget.org/packages/System.Configuration.ConfigurationManager)
Also ReadyToRun compiling with the jit already done.
Visual studio! Way better than VS Code. VS code is great and all, but its like driving a Toyota Camry when you can drive a Lambo/Bugatti like Visual Studio -https://visualstudio.microsoft.com/
Shut up
Powerful.
It's missing from all the Visual Studios I have installed at home (Community 2013, Express etc), but at work I see VS2019 Pro has it. Cool.
I'm a long time Visual Studio user going way back. I love the IDE over all the others I've tried. That said, if VSCode is working for you there's no point in changing. Once your applications start getting complicated you might want to give Visual Studio a try to see if it makes your work easier.
A Google search tells me that it's been shipping with VS Community and above since VS2015. I think it only came with Roslyn at first though, so maybe your installation didn't have it. It's pretty neat either way.
Yeah, been looking forward to this. Bit of shame it's apparently only down to 28MB for Hello World, but I'm guessing we'll see improvements as time goes on.
The AzureServiceTokenProvider is handling providing your token. It works its way down in trying to get you a token: attempts to use Managed Service Identity (so if you have MSI enabled on your Azure resource), Visual Studio authentication, Azure CLI, then finally integrated windows auth. When creating the keyvault client, it is creating a callback to where it will attempt to get that token. If you set a breakpoint, you can see this being called when it grabs the list of secrets when you cann .AddAzureKeyVault. The code can be found here: [AzureServiceTokenProvider](https://github.com/Azure/azure-sdk-for-net/blob/master/src/SdkCommon/AppAuthentication/Azure.Services.AppAuthentication/AzureServiceTokenProvider.cs)
This is the real feature I'm hype about. Makes auto-scaling that much more efficient.
I appreciate your opinion, however I wasn't talking about whether ORMs were a good approach or not. It was purely on knowledge of ORMs and when to use them. If you decide to not use it in greenfield projects, I'm cool with that. However if an existing app uses an approach, I would expect my team to know (or learn) how to support and maintain it.
https://www.youtube.com/playlist?list=PLsrZV8shpwjMkG96rkKLdNiX02S5LPIqS
There is no way Microsoft removed the content for MVA.
Removed: Rule 5.
Probably not all, but some.
It is really about the supporr behind it. Git is so popular now and it works so well its hard to picture something else gaining popularity. This was written 14 years ago and hasn't gained any traction. Why now?
Give Rider by JetBrains a try it’s pretty awesome!
Thats what she sai... Ill find my own way out.
What do you see setting the Checked property of the button?
Imo use both vscode and visual studio. You can actually open a solution folder in vscode and visual studio at the same time. I do all my c#, data tools, debugging etc in visual studio. I do all my js and html in vscode. We tend to have cold fusion and python files in our solutions too which makes vscode ideal. It's a lot to grasp but both of them play together nicely. I never use just one.
D'oh, I figured it out. I simply put this code in: if (i == 0) { btnPizza.PerformClick(); }
Don't forget to sign the attendance sheet and Karen's birthday card.
HTTP/2 support. Nice. Is there any reason why an app with modern clients and no legacy systems to connect to *wouldn't* use this? I don't know jack about multiplex gigaquad capacitors, but compressed headers sounds like a good thing to me.
I will say that csv helper makes handling rows very simple so I’d just use it if your having trouble handling it yourself. It will definitely do the trick for you.
It requires HTTPS, so there is a bit of negotiation when initiating a connection. There might be a few use cases where a websocket would have better performance and latency (e.g. streaming data), but I can't think of any reason why it would be bad to have HTTP2 turned on and the default option for new [ASP.NET](https://ASP.NET) Core projects.
Our application is using an Apache proxy to do automatic Kerberos with domain users. I wonder if the built-in support in Kestrel will fail gracefully, or still prompt users with a user/pass basic auth dialog if they're not on the domain.
You can't send me to Yemen! I'm a paper salesman for gosh's sake! I sell paper!
I'm hyped for this one. This is I think what they meant with JIT and AOT working together on .Net 5 to get the best of both worlds. AOT for perf improvements while JIT still exists so that we can do stuff like Emit dlls via `Reflection.Emit` and also Expression compilations.
&gt; While I understand that good unit tests ideally have one assert statement. It's also helpful to realize that mstest can be used for more than just unit testing. There's nothing wrong with writing integration tests in mstest.
&gt;You can improve the startup time of your .NET Core application by compiling your application assemblies as ReadyToRun (R2R) format. &amp;#x200B; &gt;IL-only Application: &gt; &gt;Startup time: **1.9** seconds &amp;#x200B; &gt;With ReadyToRun images: &gt; &gt;Startup time: **1.3** seconds.
Agreed, but I didn’t want to be long winded.
You missed a chance at greatness by not naming a package about multiple asserts, in a single unit test, “AbsoluteUnit Test”.
Hey, VSCode and Visual Studio are the same thing but has a little different. If you only want to do code and see your output as a Console, you can use VSCode, it's good for it. But if you want to look your output such as Winforms, WPF or do the data, It's better to use Visual Studio. Visual Studio is a complete IDE. Also VScode is complete but not like Visual Studio. For example, Visual Studio full version for WEB, DESKTOP and Web is near 40Gb but VSCode is maybe 200Mb and you can download what you want. However, I use Visual Studio (Complete version) for my work and projects.
Wait until 3.0.0
Code gives you all those with extensions. The only thing I don't do in code is UWP work now, which is rare. Anything else is 100% in code. Then again I'm very comfortable with editor + command line. I realize not everyone is.
I work at Unity (we do a lot of C#..) and started off on Visual Studio. Nowadays, I spend all of my time between VSCode and Jetbrains Rider. VSCode is a fantastic piece of software, but the intellisense and debugger aren't there yet. Still, it is (surprisingly) responsive, gets brilliant updates every month, I can sync my settings between machines and the extension ecosystem is tops (I do all of my git work entirely inside of it now!). I usually have 4-5 instances of VSCode open at any given point. Rider, on the other hand, provides a crazy amount of refactoring, intellisense and - arguably - the best C# debugger out there. It's UI is kinda a trainwreck, but when you need to refactor or debug, it is the best you can find. &amp;#x200B; Anyway, VSCode/Rider if you want my two cents. I still go back to Visual Studio for all my native (C++) needs though.
I echo some other people’s thoughts of using both. I use Code when I want to edit code files and push them to a repository. I use Visual Studio when I need to run and debug a project. One thing I haven’t seen mentioned is the price associated with Visual Studio. Code is free for all to use, but the free version of Visual Studio (Community) has restrictions on who can use it for what. From: https://visualstudio.microsoft.com/vs/community/ “ Usage For individuals Any individual developer can use Visual Studio Community for Mac to create their own free or paid apps. For organizations An unlimited number of users within an organization can use Visual Studio Community for Mac for the following scenarios: in a classroom learning environment, for academic research, or for contributing to open source projects. For all other usage scenarios: In non-enterprise organizations, up to five users can use Visual Studio Community for Mac. In enterprise organizations (meaning those with &gt;250 PCs or &gt;$1 Million US Dollars in annual revenue), no use is permitted beyond the open source, academic research, and classroom learning environment scenarios described above. “
Lets start with the basics... System.Data is your jumping off point for everything database related. This name space has several key interfaces that you will use with any database connection. Weather thats Oracle, DB2, MySql or Sql Server. These are IDbConnection - used to initialize a connection to a database, requires a connection string and had a few methods like Open and Close. This interface also implements IDisposable allowing you to wrap the call within a using statement. IDbCommand - once a dv connection is open you might want to do something with it, this interface is your gatewaybto all the things related to querying, updating etc... Interestingly enough, IDbConnection exposed a method to Create the DbCommand object. Requires you supply a connect object, unless you used the aforementioned method to create this object. Requires a command text string, this is your sql statement you want to execute. Notable methods ExecuteNonQuery - executes statements that dont have a return. Like updates, deletes, or other calls. ExecuteScalar - returns a single object result. executes statements that have exactly one result. ExecuteReader - returns an IDataReader object. Used to read results from the data source. Those are the core methods you ned to know about. Others like DataAdapters are really wrappers around these core objects, and have additional overhead that should be avoided. System.Data.Common This name space is an additional layer up from the base interfaces, and provides abstract base classes and factory methods that can obfuscate different data sources. These additional classes also provide Async functionality that is lacking at the interface layer. These are, DbConmection DbCommand DbDataReader With these classes you HAVE to use the CreateDBCommand method from the Connection as it can/does create provider (MySql, Sql Server...) specific objects. Then there are provider specific name spaces. System.Data.SqlClient System.Data.Whatever(its always sql for me)... You should use the factory implementations from common when ever possible. Avoid fluffy stuff like Adapters etc. This is from my phone so sorry for formatting or errors
Who ever wrote that API should never be allowed to program ever again. Its stupid javascript shit like that is just horrible to maintain in any other language. It seems this has already been answered, bit my suggestion would be to create a custom handler for this object. This examples shows how to create a custom deserializer for your needs. https://stackoverflow.com/questions/40439290/custom-deserialization-using-json-net
&gt;and are “ready to run” without any additional work on client machines. That’s a major improvement, and also an important win for climate change. is this a new pasta or something
For C# visual studio all the way, vs code is only good enough for small projects. Omnisharp starts not working randomly, starts not seeing tests, starts showing errors that don't exist and all the other problems I failed to mention. VSCode is good for js/ts development but for C# it's just not there yet.
I was most surprised that he was mentioning ".NET Core 5.0". All this versioning seems to even confuse the Microsoft Program Managers.
Im currently developing a mobile poker app, with 2 of my buddies.
Visual Studio is the best IDE, i love it...
Try both and use whatever you prefer. I like the simplicity and speed of VS Code. I like using the terminal to run commands while coding and I like developing on Linux, but I also understand people's love is Visual Studio. Everything set up and ready out of the box, everything just a UI click away, the huge number of options to do things automatically so you don't need to type commands etc. It's two different experiences for two different people.
Where did you read that? It's not on the OP
Note that option 2-4 are not universally applicable to LINQ.
It's moving so fast! There's a real air of enthusiasm around this project. .NET Core, its siblings like Blazor, and VS Code are among my favorites from Microsoft right now. They seem to hold a higher pace and higher standard than much of the operating system (i.e. above the internals) itself. ReadyToRun sounds a bit like a sneak peek of what's to come in .NET 5 with the improved API coverage for .NET Native!
You're right. Just tested it there. This works too.. string varOne = "ábC "; string varTwo = "Abc"; bool result = false; if (String.Compare(varOne.ToLowerInvariant().Trim(), varTwo.ToLowerInvariant().Trim(), CultureInfo.CurrentCulture, CompareOptions.IgnoreNonSpace) == 0) { // both strings are equal result = true; }
Nope, event and observer do work differently under the covers. Events always trigger through the chain on the same thread. Observable allows for operations on one thread to be observed on the other thread without expensive event broadcasting or dealing with the details of threading. This becomes very relevant for thick client applications particularly WPF. Use of observable is the quickest and easiest way to make a C# UI that does not halt the UI when processing operations. There are some other good uses for it to, though WPF is likely the most common usage.
Events *are* the Observable pattern. The implementation details differ. There are some problems with how events are implemented in C#. If you start a new project stick to some other implementation, like Rx.
Hehe, luckily someone in the sub found a reupload on YouTube :D
Nice someone did a reupload after Microsoft doing their crap again. Thanks OP! :)
It's available on the page which details the [changes to ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-preview-6/).
You're right that option #2 (breakpoint in lambda) won't work for LINQ to SQL or LINQ to XML or whatever I don't see why option #3 (log-middleware) shouldn't work Option #4 (oz-code) works for LINQ to SQL with entity framework (most common I believe), but won't work for other providers
This method seems to achieve a similar thing for test framework agnostic assertions with very little code.
&gt; I don't see why option #3 (log-middleware) shouldn't work Because the log statements won't be translatable for the majority of LINQ providers.
In my opinion, Rider is amazing tool and has more features than visual studio. Especially if you are using Rider with Resharper.
I used your library for a moment. And now I have problem that I don't know how to solve it. My comsumer consumes a queue with prefetchCount 120 as sample. It is a long-task and when it is handling that task, I pushed the same long-task to it, I saw in management tool that the queue immediately get that message. But it didn't handle it until the previous task is done and marked "Acked". So that I application cannot run simultaneously. But if I open that application 1 more, it means it will create 1 more consumers with the same prefetchCount 120. At this time, when it can handle simultaneously 2 tasks in the same time. So i wonder why the prefetchCount of the consumer that get the message without handling ? Of course, more consumer means more handle simultaneously.
It runs on WASM, so good luck with anything that requires threads.
Thanks
its more like using a hilux to transport stuff, when you could use a mack truck. sure, it works, but there are tools specifically designed for it
I am also an intern w/o much experience but I would recommend Crystal Reports. Look into it over [here](http://csharp.net-informations.com/crystal-reports/csharp-crystal-reports-stepbystep.htm)
Post a gist.github.com and PM me the url so I can read your sample code.
Removed: blogspam.
&gt; While I understand that good unit tests ideally have one assert statement. More accurately it's supposed to assert one thing, not have one assert statement.
Reported for rule 6 violation
&gt; Because the log statements won't be translatable for the majority of LINQ providers. Maybe I'm missing something, but the log statements are between the regular LINQ operations. They don't work with expression trees and don't need to translate. I checked with a small entity framework project and the log-middleware does work \`\`\` var students = ctx.Students //DbSet&lt;Student&gt; .LogLINQ("source", e =&gt; e.FirstName) .Where(st =&gt; st.Age &gt; 20) .LogLINQ("where", e =&gt; e.FirstName) .ToArray(); \`\`\`
I can shed some light on how OzCode works with IQueryables (I'm OzCode's founder and CTO). The way it works is that it eagerly loads the sources of the query from the DB (the same overhead as if you were to .ToList() it), and then does the same visualization as we do for LINQ to Objects. The advantage to this is that it works fairly well out-of-the-box with most LINQ providers and even custom ones we never tested it against. The disadvantages are (A) if there are weird subtleties to how the LINQ query is interpreted that differ from the standard practice, those won't be reflected in the visualization (B) if the query is taking data from a database table that's huge (tens of millions of rows), the LINQ debugging feature might be way too slow. The workaround to this is to simply add a .ToList() somewhere in the middle of the query, for example after a .Where() clause which filters the results down to a more manageable size (let's say, tens of thousands of rows). When the LINQ debugging feature kicks in and sees the query is part IQueryable and part IEnumerable, it will then only take the part after the .ToList(), and so things will be much faster.
Spot on. And I second RX, it's nice. You can fire events on different threads, either all handlers, or even spam each handler to a different thread if that's your thing.
I joined earlier today and these guys have been really helpful. They went beyond my request and pinpointed the errors in my (programming) ways. Felt obligated to post here sharing my experience. Thanks for providing this platform.
Search around `[StructLayout(LayoutKind.Sequential)]` and `Marshal.PtrToStructure&lt;Class&gt;(gcHandle.AddrOfPinnedObject())`
Also, try using English names for class field / methods or dialog controls. You will be better off ready to work in the software industry with code and teams from all over the world (even if your team is only composed of French people, it is a good things to do)
Your `LogLINQ` method works on `IEnumerable` and will force an early evaluation of the query. That means your `.Where()` won't be translated anymore, it will operate in-memory. Depending on your LINQ provider this means the way your predicate is evaluated can differ (e.g. case-sensitivity for strings).
&gt; (A) if there are weird subtleties to how the LINQ query is interpreted that differ from the standard practice, those won't be reflected in the visualization This is exactly the disadvantage I mean. For example a database can operate case-insensitive on strings. But if you evaluate the predicates of a `Where()` in-memory, then you won't know about the configuration of the database (or the subtleties of the provider), and likely the string comparison will be case-sensitive. So it shows you a wrong picture of reality.
Ok, I understand what you're saying. I'll update the article, Thanks!
Almost like they were trying to do old-school header file declarations.
Two other options to look at: Telerik Reporting - similar to use as crystal reports, very easy to use designer. Smaller learning curve than List and Label or Crystal, in my opinion. List and Label (combit) - Has some very good options for printing and exporting from a design preview. Bigger learning curve than crystal or Telerik, but in my opinion well worth it if you have a customer facing application. Gives customers options to export your report into many formats (pdf, xlsx,docs,png,etc.). Recently switched to this tool at my company because of the fantastic print options. If you ever foresee needing to be able to easily print to different printer trays or have other complex printing requirements, this would be an option to explore. They both have around similar functionality when it comes to figures/charts/graphs.
This makes sense.