No, but I work remotely and it's an international company so the location wouldn't do you much good anyway haha
Sadly that's a really good point.
You can build (not run) all wpf, winforms and more on Linux using net framework. With the WindowsDesktop sdk they also put up the reference packages for framework on nuget.
What's the point of this comment? At least the guy is humble enough to point out his own mistake *and* post about it on a public forum. Whereas it seems all you're doing is trying to put him down. I can live with seeing harsh criticism if it's still constructive but this isn't constructive at all.
&gt; You can build (not run) Not sure why you'd even bring this up, then. You're essentially cross-compiling. &gt; all wpf, winforms and more on Linux using net framework. There is no .NET Framework on Linux. There is Mono and .NET Core.
What do you mean?
With lots of functional languages, you can specify that something is either a type A or a type B, often written as `A | B`. Often referred to as discriminated unions. It's not something that only functional languages can have, but it does seem to show up there more often. Typescript has them, for example.
Interested in knowing more details about ActionResult&lt;T&gt;. I've always wondered how this type can accept almost everything you throw at it.
There are some good functional libraries for C# (functional extensions for instance). They provide unions and everything needed.
About ActionResult :P
You can compile a .NET Framework (yes classic ol .net framework... not mono.. not core) on linux for about 2 months. Previously you couldn't even build a thing for .net framework, no PresentationBuildTasks, no Reference Packages... which reduced the amount of CI service providers to essentially one or two while the entire devops world was moving towards compiling on docker runners flourishing alltogether. With Reference packages available you are able to test using core, but also deliver .net framework binaries. Any library with some old WCF types et al was forced to be built on windows. It's not anymore. I bring this up, because you cannot do that in the Apple ecosystem. You cannot compile for IOS without an apple device.
A wild [`volatile`](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/volatile) appears!
`ActionResult&lt;T&gt;` is represented with class hierarchy with types like `NoContent`, `Ok` and so on, which is a bit of boilerplate. Instead you could've just done it in F# like this: ``` type ActionResult&lt;'T&gt; = | NoContent | BadRequest | Ok of 'T | NotFound ``` Which is much shorter, but more importantly, easier to read: you see all the possible cases in 1 place.
I don't need to know that to use the languaje.
I really hope you are not in any leading position. To have you for a boss would be hard life.
And taking no one down is like couple of first weeks in kindergarten.
helped me understand a bit of it and solved the nullable type, thanks.
I had the same problem a few weeks ago and simply changed the last if from `if (result != 0)` to `if (result != 0 &amp;&amp; result != 1219)`, assuming that error 1219 means the network path is already connected and I can already access it.
My point stands? Obviously he's been using the language for 3 years already without knowing this information.
Putting some time into researching Data-Oriented Design. Might poke around with Unity a bit after seeing [this presentation about the Entity Component System](https://www.youtube.com/watch?v=p65Yt20pw0g). As a side-library for work, I'd like to make one that wraps some TPL libraries in order to make some of the interop/CLI/PInvoke stuff we work on have simple `async`/`await` semantics on the ViewModel side. The work would probably look like a simple FIFO with only one level of concurrency per pipeline, but we'd be able to put some progress bar in a minibar and let the user mess about with something else in the meantime. People are doing some wonky stuff with off-thread work and locks in order to make that work right now, and I'd like to make an easy way for them to refactor that to a separate class or two. Probably going to play with some katas in other languages for expanding programming knowledge.
related blog posts for others: https://byterot.blogspot.com/2016/07/singleton-httpclient-dns.html https://softwareengineering.stackexchange.com/questions/330364/should-we-create-a-new-single-instance-of-httpclient-for-all-requests
Yes ASP MVC 5 is a great stable start - https://docs.microsoft.com/en-us/aspnet/mvc/overview/getting-started/introduction/getting-started there is ASP MVC Core 2.2 as the newer stuff, but Id say MVC 5 has the best most stable documentation for new comers.
This is too advanced of a concept for a newbie imo. having the int be a static field above the Main method is the best solution imo.
Saving this for future projects
As already said the using will dispose the remoteFileStream instance, not the ftpclient, but furthermore, since StreamReader Dispose() also disposes the provided stream a single using block is enough: using (var reader = new StreamReader(ftpclient.OpenRead(filePath))) { Data.Add(await ParseFromRemoteFile(reader)); }
Please format!
That's why I love C# &lt;3 The way I write C#, you'd think it was Lisp.
Uninitiated here. What's a union type?
thanks, I haven't noticed.
Investigate the [claim check pattern(https://docs.microsoft.com/en-us/azure/architecture/patterns/claim-check).
In a somewhat pedantic sort of way, C# passes everything by value, unless otherwise specified with `ref` or `out` (or `in`, but that's new). It's just that reference types (i. e. classes, but also arrays) are *stored* as references and *the reference* is passed by value. That said, that's pretty much what people mean when they talk about a language being pass-by-reference, because *most* types in C# are reference types, and there's not a built-in way to pass a referred object by value (i. e. by copying the object instead of the reference).
It is not like most people use volatile a hundred times a day.
As a C# programmer?
Interestingly if you follow some good practices and structure your code well you rarely need to care about this. For example if you use an immutable type then you don't really care if it is a reference or value (other than the performance implications).
I realize that, but there's a lot of C# developers who don't understand what exactly it does and when is the appropriate time to use it. It's probably one of the most misunderstood C# features/keywords out there. I'm just making a joke in context.
The proper term for what C# does is called "[pass by sharing](https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing )"
You're passing the entire number into the Tens() method, which may have seemed like a good idea in order to catch eleven, twelve, etc, but 832 will not match a '30' in there. If the user enters 30 as the entire number that's the only way it will output the word "thirty". Same goes for forty, fifty etc, you are comparing for the entire number to equal 40, 50, etc to get a word match otherwise you get nothing for that part.
Not sure why you get downvoted, maybe people taking it as hostile without further context given? While some languages may abstract away it away, the difference between value/reference types is core principal in *programming*, not just C# (which does not abstract it away at all, it is nearly required to use it correctly). That said, it is indeed very surprising that someone who has been using it for 3+ years (not counting if there is previous experience with other languages) does not know it. This is not said with animosity or any negative connotations of the person. It may less surprising if we were talking about a language like Ruby or something where it is less obvious. This is C#, where the using the it incorrectly will cause your code to fail and/or simply not work. One would assume at some point it would be learned trying to debug non-working code.
 unsafe
Wait till you discover that recursion is just a while loop with a stack. And sometimes you don’t even need the stack.
To be fair, [Microsoft themselves weren't even sure for the longest time](https://github.com/dotnet/docs/issues/5206) it seems...
Personally, I would just query the house. If you are using Entity Framework, you have to query for the furniture anyway prior to updating it. Fetching the room and house can be done in the same query. So either way, its still only one round trip to the database. The extra joins overhead is fairly negligible IMO. Of course you can denormalize your database by storing the userId in each record, but that sounds like premature optimization to me.
I’m not sure how proper it is when &gt; However, the term "call by sharing" is not in common use; the terminology is inconsistent across different sources. Call by value seems clear enough, as long as you remember that a reference is a value.
I mean, that doesn’t seem like a very profound discovery?
As other users have indicated, you're not disposing the object you've injected, you're disposing a freshly created stream, so you should be good. However if you want to read about the topic of how to handle different IDisposable cases with DI, this is covered in the book *Dependency Injection Principles, Practices, and Patterns* from roughly page 245 to 255. The argument presented in the book is that you should only be injecting abstractions, and since IDisposable is an implementation detail, your abstractions shouldn't implement IDisposable. An interface that implements IDisposable indicates that you're leaking some info about a specific implementation into the abstraction. Concrete instances of IDisposable created in your composition root are supposed to be cleaned up by the composer. So if your concrete ftpClient implements IDisposable (which I assume it does), it should be disposed in the composition root when the application is done using it. And as another user mentioned, in the case of an ftp or http client class, you're typically going to keep it alive for the life of the app anyway. This probably depends on which DI framework you're using, but I believe it's typical for the composer to be disposable. So you can stick it in a using block, and any IDisposable dependencies you use in the app will be disposed along with the composer.
I'm going to use the terms Sum Type and Product Type, but just substitute in "union type" and "class" if that makes it easier. A Product Type is something every programmer is probably familiar with even if the name doesn't ring a bell. These are things that represent multiple properties co-existing at the same time. public class Foo { public int Bar; public long Baz; } This is a product type that represents _all_ combinations of int and long. The number of possible Foo instances is `Int32.MaxValue * Int64.MaxValue`. Since the number of possible values is calculated using multiplication, it's called a Product Type. Sum Types on the other hand represent multiple possible values, but only one actually exists. I'm gonna use some fictional C# syntax: public class SumFoo { public int | long Bar; } This means that `SumFoo.Bar` could be an int or a long, but only one of them. The number of possible `SumFoo` instances is `Int32.MaxValue * Int64.MaxValue` (realistically just int64 but that's besides the point) and hence the name Sum Type (because discovering the total number of instances is a function of addition). Where these are useful are dealing with things like Optional. You've probably used `Nullable&lt;T&gt;` before which has the same idea but it's really just a degenerate Optional. But both represent that I might _something_ or _nothing_ but never both at the same time. You only know once you interact with it and open Schroedinger's box (so to speak). The reason why they're useful is we can essentially return multiple different types from the same function but constrain them in a type safe way and we're generally forced to consider every possible outcome. Unlike say Python where I can return a list, a dict or an int based on how I'm feeling (not to bag on python). So we can do things like declare a sum type that represents a successful outcome or an error state (this is Either of you're familiar with Haskell) and we need to now consider both outcomes rather than throw an exception and hope someone catches it. You can also do things like represent recursive structures with them. You can have something like `type List t = Cons t List t | Nil` (sorry to switch syntax) where Cons is a cell containing a t and another List element and Nil is the end of the list. So you can build a linked list by just going `Cons(1, Cons(2, Nil))` and that's it.
&gt; functional programming in a object oriented language It's kind of the present.
It’s basically for a multithreaded free-for-all, where anyone can write to it at any time. You’re reaching for that 3 and then suddenly it turns into a negative infinity in your hands. It tells the optimizer to not be tweaking and optimizing it, to ensure that all reads are in real-time.
a short hand I always like to use is: using (var remoteFileStream = ftpclient.OpenRead(filePath)) using (var reader = new StreamReader(remoteFileStream)) { Data.Add(await ParseFromRemoteFile(reader)); } However, your code looks fine.
&gt; it will just reference a different object But if you assign a value type to it, this doesn’t apply, right?
It all depends on what you want to model. Continuing your analogy, only [Mom, Dad] can modify all of the house. [Kid1] can modify Kid1's room. Kid1 can _move_ furniture in any room except MasterBedroom, but they cant _add_ or _remove_ furniture. Etc. How you model this internally depends on what ACLs you need.
You don't usually assign value types to reference types. When you do decide to do that, it uses a process called boxing, which I hope you already got to read about. The main thing here is that the value is wrapped by a reference type "box" so the semantics are completely reference like. Due to boxing performance considerations, one should try to avoid that (and there are good ways within the language for that, e.g. generics)
Well I knew the difference. `Array.Sort` vs `IEnumerable.OrderBy` is pretty easy to figure out. It’s just that when I Googled “how to store a reference in a property”, StackOverflow said you have to use delegates.
I actually only needed to read a file. There was no use for me to map thst network shared. I used system.io.file.readbyte(utloffile). I just needed that one line.
Does AngleSharp have any easy to read documentations or tutorials because I have gone through the GitHub and their website. Things are hard to follow and confusing. I don't even know where to start
\` OrderBy \` isn't pass-by-value, it just happens to return a new object without modifying the source one.
It's not as simple as signing it. See my comment on this post https://www.reddit.com/r/csharp/comments/9jceoc/code_signing_and_smartscreen/
Just to clarify, the life cycle of the HTTP client isn't the life cycle of the application per see, as the client won't refetch DNS during its life cycle. It's also not the life cycle of the request because sockets don't have a managed life cycle. It really is quite a bit more complicated depending on your requirements. Currently the Httpclientfactory in defaults to a new client after five minutes, though of course if your applications lifespan is short or you're happy to do an app pool recycle when you change DNS you can set it longer or not use it at all.
I agree. The more experienced I get, the less I use ```ref``` and ```out```.
I think it's the fundamentals of programming in C#. If they don't learn it today, they will need to in a week or so. So why not now?
I am surprised that is all. Reference/value is a core concept of c# that should be taugth early. After learning what variables and a methods are.
They had it already. Tinyclr I believe is a fork of .netmf 4.2 or 3 I forget. MS didn't update the project in like 5 years or something, they just don't care for it. That said I think they dropped the ball. Imagine having a common framework and being able to write for your favorite mcu in c#. Iot is only going to continue to evolve and then they will be forever playing catch up as they had with mobile.
[removed]
Comprehensiveness and conciseness are the two specialties of [**70-483 Dumps PDF**](https://www.exam4help.com/microsoft/70-483-dumps.html) which attracted me the most. It was because of these qualities that I aced my IT certification by the first attempt. [**70-483 Study material**](https://sites.google.com/site/microsoft70483dumps/) does not have any other match and is the best .I will also say thanks to Exam4Help.com for offering such an excellent dumps material for preparation. 70-483 dumps material is a key to success which can bring a definite success.
Said a crack whore...
Dude, par for the course. I just hate when dev sites are blacklisted by default and I have to submit s request to some dude to open it up. Give me the tools to do my job!
Thanks, that's very informative comment. I've heard that getting a code signing standard certificate will take 2 to 3 weeks. Do you know if that's accurate? I'm thinking Comodo.
I'm trying to support a new paradigm. Dysfunctional Programming. Need help on specs.
I've used Prism, Caliburn Micro and MVVMCross and my favorite of the three is Prism. I didn't really liked MVVMCross because it was too much focused on Xamarin and a single view "phylosophy", thus making composite or modular applications was not straightforward in WPF or UWP. Since it's too focused on Xamarin the level of abstraction seems to be best of the three (because it's kinda the simplest platform) so sharing code between platforms is easier. &amp;#x200B; Caliburn Micro is pretty great and the easier to use of the three. Composition of views is really easy to achieve by binding a viewModel instance to a x:Name property in a control although the framework doesn't support modularity by default. The event aggregator is also easier to use although it's simplicity may force you to create payload objects in order to make use of it. The level of abstraction is also good, sharing code between platforms is easy. &amp;#x200B; Prism is probably the hardest to learn but is also the framework with the best documentation. The author himself has a youtube channel with some tutorials. Prism is designed to make modular applications, so composition and modularity comes out of the box. It also integrates and offers abstraction of a DI Container (Dryloc, Unity, etc) so you don't have to worry about dependencies in your modules. However, it separates part of the abstraction (mainly how the NavigationService) between Desktop (WPF/UWP) and Xamarin(Mobile), this forces you to inherit from a shared library (for example a viewModels library) only because you need to implement platform specific Navigation. So, shared code between platforms is basically the same except for certain implementations like the navigation. I like Prism more out of the three because even tho it forces me to create more files because i need to make platform specific implementations (thus making the project "bigger", although the files are small), the modularity design outweighs pretty much everything IMO, including it being the hardest to learn (although you can learn it in days if you put your mind in it). A modular application is way easier to develop, maintain and understand in the long term.
The genetic parameter seems to mean nothing (perhaps grips with swagger?). It'll take an object anyway.
What is the request size? Asp Core has default limit per request. https://github.com/aspnet/Announcements/issues/267
Can you explain what you mean by "it's abstracted away"? Value/references types are not abstracted away at all in C#, in any sense of the word as it pertains to programming, unless I am totally misunderstanding what you meant. It is a core principle and requirement to use the language correctly. The only real "abstraction" is a lack of a pointer operators, unless you only write pure methods. There are multiple commonly used keywords and language features directly related to and only relevant to the difference between the two, as well as compiler warning and code inspection warnings that would have been prevalent unless disabled or ignored.
I learn C# for a few months and I still get lost with all those .NET Core, ASP.NET, Razor Pages, WebForms vs MVC pages and so on, and so on. Sometimes I find a solution that I'm trying to apply for 30 minutes to my project, just to discover that it doesn't fit to the architecture/framework I have followed so far. With Python it was way easier in this this area for some reason, with C# everything blends together for me.
IOT devices are usually small micro controllers. While technically c# can run on anything, .net can’t run on anything that small. I don’t think there’s much of a market here
similar content is in the licensing FAQ [https://github.com/Fody/Home/blob/master/pages/licensing-patron-faq.md#do-i-need-to-be-a-patron-to-raise-an-issue](https://github.com/Fody/Home/blob/master/pages/licensing-patron-faq.md#do-i-need-to-be-a-patron-to-raise-an-issue) &amp;#x200B; \&gt; Yes. You must be a Patron to be a user of Fody. As such if you are raising an issue (question, bug or feature request) and you are not a Patron, the issue may not be actively triaged, and eventually closed as stale. Issues from non-Patrons, that are bugs and are highly likely to effect the larger Fody user base, may justify the effort and be handled.
sounds like a solid cult mentality you have.
I don't know if you are aware of this but WebForms is the name of a specific web framework for .NET. It is on its way out although it was king for a decade. Don't do Razor Pages, build regular application with controllers, services, viewmodels and views.
it's actually abstracted away in c#, I'm not sure there's any c++ developers that wouldn't know about value and ref
I understand why you can get lost between Web Forms, Razor Pages and MVC but being lost about .NET Core and ASP.NET is worrisome.
use asp.net core 2+ . you can do controller - services - repository layers. there's no controller in razor pages but you can page - services - repository. razor pages is very similar to webforms, provides an easy way to build web pages. you can also use razorpages in asp.net core. welcome to c# world
They provide implicit cast operators, a weird `IConvertToActionResult` interface, and `ActionResult&lt;T&gt;` actually stores two values: a result of `T`, and another `ActionResult` (non-generic) instance. But actually only one of those two is used. So instead of cleanly having two different types for the different cases (which union types would allow) they create a single type that has more than necessary properties, where one is used in case A, and the other is used in case B.
Not a good one evidently
Do you know some good articles that would help me arrange all that stuff in my head better? Reading Wikipiedia or random articles on the web doesn't help that much as everything seems to be a framework which is a part of some other framework, which is similiar to another framework but actually runs on completely different framework.
It doest throw exception. The size is 5mb max. I decided to resize the image , size went down to 200kb. Still takes about 10 seconds to transfer, but now its working
Thanks. This worked!
Very cool ! WinForms ain't dead ! With .NET Core 3 around the corner, I wonder if you'll gain some performance benefits. After all, .NET Core is described by MS as being way faster than .NET Framework.
Id like to disagree with you here, usually when you use razor pages, you are using MVC. This means, you can actually implement the Controller, Service and Repository pattern aswell. Razor is just another way to render HTML.
If you use certain advanced features you should learn about some compiler/machine level optimizations. In the same way if you use reference types you should definitely learn how reference types work and it's unlikely you can avoid them as a professional developer. The fact he has been coding for 3 years doesn't justify anything.
nah, it seems you don't know about razor pages. I'm not referring to razor views in mvc
nah, it seems you don't know about razor pages. I'm not referring to razor views in mvc
Ah ok then, what are razor pages then?
Ah ok, probaply we are talking about different things. What are razor pages?
it's another way of building web apps with .net core, in fact the identity in dotnet core uses razor pages. find out more https://docs.microsoft.com/en-us/aspnet/core/razor-pages/?view=aspnetcore-2.2&amp;tabs=visual-studio
The C# code presented in this article is called the Anemic domain model. There is a great course on pluralsight for refactoring this style to a rich domain model. This is a really interesting article and I think I will finally look into FP but I wanted to point out that there is also an OPP version that would make sense too.
Node/JS is fairly mature at this point. There is a lot of libraries (check out npm package repository). The ecosystem is super chaotic though. There is a tendency towards smaller libraries and tools which have to be combined together. I often feel like I am combining lego bricks that don't entirely fit together. Choosing the right brick is also often difficult if you are not well familiar with the ecosystem. The 'fashion' among the community also changes rapidly, though that is more the case in JS front end development (try looking up how to work with CSS in React, that illustrates the whole concept nicely). On the other hand, everything is a lot more customizable. It is also great to be able to share code between front and back ends. As a language, JS is completely different that it once was. It is now genuinely pleasant to work with. It also feels quite familiar to a C# developer, having adopted some language features from there (collection generators, async await etc.). They also sort of ditched the prototype nonsense and do have normal OOP features now. I can't imagine working with a team on a massive JS codebase though, the language's dynamic nature hides a lot of errors and dilutes the implicit contracts between different parts of the codebase and makes understanding other people's code difficult. TypeScript helps big time with the scaling pains. TypeScript is pretty amazing actually. While its type checking is compilation-time only, its type system is incredibly powerful. After working with it, I would love to see much more duck typing, union types and conditional types in C#. The tooling is good in general. VS Code is great (not as powerful as the big VS howeber). There are also multiple code checking tools, test runners, coverage tools, build tools etc. The notes about the ecosystem do apply here though, you will spend some time trying to make the pieces work together. The platform is well supported on various services (eg. CI platforms), often better than .Net. Any API that supports .Net usually supports JS too. There are things that I do miss though. One is first class LINQ-to-objects (there are similar libraries for JS, but they don't integrate well with the ecosystem), the other is proper multithreading. JS is simply not suitable for CPU heavy tasks right now.
sounds like you would enjoy f#
One easy way to get past SmartScreen would be msix and using your Microsoft Store cert. But that is only on Windows 10 and even some UWP apps trigger SmartScreen I think.
I don't know of any specifically. A quick bingle throws up a few results. If you have specific questions ask on here or StackOverflow.
Coming from a full Microsoft shop (.net c#, on prem windows servers) and now working entirely serverless using aws lambdas, typescript, and serverless stack , the hardest thing for me has been leaving behind VS, primarily when it comes to debugging. I use vscode and we use typescript so the code is pretty similar to c#, but I've yet to find a way to attach my vscode debugger to my lambdas when running locally.
Async/await is what finally made programming in JS bearable for me.
Look at “Webstorm” as it has all that resharper stuff but focused on non ms web stacks
That's brutal - do you just log everything instead?
What you're talking about here is the difference between data **normalization** vs **denormalization**. Normalization is (I'm paraphrasing) when you only have a single copy of every piece of information in your database. House has a UserId, Room has a HouseId, Furniture has a RoomId, etc. Denormalization is when you can have copies of individual data items. In a denormalized scheme, Furniture can have a UserId, HouseId and RoomId together (also, you can have multiple "Furniture" tables, each one designed for a specific query, so you always know you can get exactly what you want as quickly and easily as possible). Normalized data has a number of advantages: it's quick and easy to write (especially if you're using an ORM like EntityFramework), it generally uses less disk space, and it is easier to keep consistent. If I want to assign a house to a new user, I only have to update House.UserId and I'm done. If the data is denormalized and I want to assign a house to a new user, I have to start a transaction, update the House, all the Rooms in that house, and all the furniture in those rooms, and then I have to handle rollback on error, and I'll have to handle cases where House.UserId is not the same as Room.UserId (such as a broken update, or somebody updating the database directly without going through your application, or a race condition with two people saving at the same time, etc). Denormalized data, on the other hand has the advantage that it tends to be much easier and faster to query. You gain this speed by trading in some disk space and some insert/update complexity. However, it's an optimization that you probably don't need right now. **Normalized data is probably what you want**, for right now anyway. So the real question to ask is, what is the volume of reads and writes to your system, both in absolute terms and compared to one another? If you're making a sort-of-generic CRUD API where users are manually doing some inserts/updates/deletes on House and it's children, and if you're not having to support huge numbers of concurrent reads on the data, I would say that you stick with the normalized version and be done with it. House has UserId, and if you want to get Furniture for a User, you have to join House-&gt;Room-&gt;Furniture for every query. It's probably going to be plenty fast for you. *IF you have to support a huge number of reads compared to your writes to the point where read performance and table locks are killing your DB* you'll probably want denormalized data structures. Your writes get more complicated, but you should make up for that by saving performance on every single ready. *IF if you have to support a huge number of users (millions per hour) with a huge number of reads compared to writes,* you'll probably end up with two databases: a normalized, write-optimized "primary" database and a denormalized, read-optimized "secondary" database, and some sort of eventing/triggering/polling solution to copy data from one to the other in a timely manner. Notice also that "read-optimized secondary data store" is basically just a longer way of saying "cache", which can be very easy to implement, especially in MVC/WebApi. If you need any more details on any of these topics, please don't hesitate to ask. Data storage is a huge and deeply interesting topic, and this all barely scratches the surface of it.
It's the fucking best - It feels sooo familiar now. Only having to switch my naming from Promise something to Task something in order not to offend Frontend guys bothers me hehe
Yes, Java with Eclipse, Android with Java/C++, Windows with C++ / Visual Studio. Depends on the target OS, customer requirement with backend systems. From all of them only Android makes me cry, Google thinks everyone is using a gamer workstation as Dev machine given resource requirements, and some stuff on Android architecture makes classical J2EE even feel well designed.
If f# had any sort of backing or major use, maybe. As of now, quite the irrelevant language.
For my projects, I have been going with your former options in both cases. One of the benefits for doing this from my side is that it’s easy to find the appropriate test project due to alphabetical. However, one of the issues I have run into with doing this though is file path length limit.
I don’t get why this sub largely thinks it’s blasphemous to use an IDE without “Visual Studio” in the name. Like there’s other IDEs in the sea, Webstorm is great.
&gt;nonsense protoypes &gt;finally oop protoypes make data so flexible/extensible though e.g. middleware.
I always include the full name for my solution in my individual projects. So for me, I would call it Newtonsoft.Json.Tests and Newtonsoft.Json.Benchmark. For sub-namespaces, I would not use Newtonsoft.Json.Tests.Converters but instead Newtonsoft.Json.Converters.Tests because it is much more logical and less confusing, at least for me. Then I would have a bunch of different projects like Newtonsoft.Json.Converters.Models, Newtonsoft.Json.Converters.Middleware and so on.
we have it in large scale production use at work. making us money.
Thanks for your answer, it really helped me. I think I will stick with the normalized approach.
&gt; Newtonsoft.Json.Converters.Tests For some reason I was under the impression that the namespace names had to be the same as project name followed by something! I just tested this and it looks pretty good. Thanks.
I've just switched jobs and I'm having to get used to AWS too. Can you use LocalStack to emulate lambdas?
In terms of actually relevant companies, last I checked, Jet.com was the only one using it. I sure as hell wouldn’t jump into it with that little corporate usage.
https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-nginx?view=aspnetcore-2.2
ASP.NET Core has no such method. You're looking for `response.Body.WriteAsync(..)`.
I go with the latter. The namespace includes the project name (which has the `.Tests` suffix), and the folders match the folders of the project beign tested. In the folders I add `Tests` to the filename, and the filename having the same name as class I'm testing. This applies to unit testing only obviously.
Dell, Olo.com, Aig. Those just come to mind without looking. Not sure what 'relevant' means in terms of a company to you though.
It's strange to me but understandable if you never tried to do a more structured tutorial/course/book
Oh i see. Thx for the tip friend
Classes in js are just sugar for prototypes anyways. They didn't go anywhere.
.NET Core is THE framework that contains a bunch of things including the runtime, the compilers, the standard libraries and some other tools. It is equivalent to what you download when you get Python (with Python you get the interpreter and standard libraries). .NET Core is newer cross-platform versions which breaks some backward compatibility, the older version is known as .NET Framework. A future version will be renamed to simply .NET (5 initially presumably will have more numbers in the future). Think of this as Python 2 vs Python 3 except that it doesn't break that much things and migration happens much faster than the Python 3 disaster. There are other flavors of .NET like Mono, Unity (somewhat based on Mono), Silverlight, XNA, UWP, etc. Most of these are special purpose flavors for example Unity is for game development. Usually this involves some changes to the runtime and a very specific subset of the standard library. I don't think Python has an equivalent, as to my knowledge it is rarely used for such things. ASP.NET is the web framework on top of .NET frameworks (there are actually alternatives but they are rarely used in the industry). ASP.NET is a request/response pipeline for HTTP. It can parse HTTP and provide useful classes to represent cookies, headers and so on. Multiple frameworks have been built on top of ASP.NET and they usually contain ASP.NET in their full name such as ASP.NET Web Forms, ASP.NET MVC, ASP.NET Razor Pages, ASP.NET Web API... The version of ASP.NET that runs on top of .NET Core is called ASP.NET Core (actually ASP.NET Core 2 can run on top of the full .NET Framework but you should not care about that just use the Core stuff because this is the future and even the present). Frameworks like Web Forms, MVC and Razor Pages usually deal with generating HTML and/or JSON to get web pages. These are similar to Django (admittedly I am not familiar with how far Django spans maybe it is ASP.NET + one of the others). They use different ways to achieve that. You can forget about Web Forms, it doesn't run on Core. It had a pretty good run being the dominant .NET web framework for a decade and I hold the unpopular opinion that its main idea around components was superior to the current alternatives (MVC, Razor Pages) but it is just history + legacy projects these days. Also note that depending on the context you should make a difference between "I need to build a web form" and "Web Forms the framework". You can build a web form with any of these technologies as they all do web and generate HTML. These leaves us with MVC and Razor Pages on top of ASP.NET Core on top of .NET Core. I personally think Razor Pages is crap and people should not waste their time with it. It is banned in my projects. Sadly MS is advertising it and you will see it in templates and examples. Razor Pages is basically PHP mode for ASP.NET where you create a file and start putting HTML (via the Razor syntax) and code to handle Get/Post requests. Each file gets an URL and that's it. ASP.NET Core MVC follows the MVC pattern where you have controllers, views and it can also do API (i.e. return JSON without a view). This should be conceptually similar to Django (again I never touched Django). The views for MVC also use the Razor syntax, the same one from Razor pages. Razor is that thing that allows you to mix HTML and C# to more easily generate HTML to serve to the client. That's basically it. One of the harder things to understand is .NET Standard. Back to the Python 2 vs Python 3 disaster - everyone had to port their libraries and do either 2 or 3 or maintain two separate versions. .NET Standard is a way in .NET to have a single library work on different versions of the framework. If you do .NET Core and the library says .NET standard then you are fine, the latest .NET Core always supports the latest .NET standard and you can use this library, no matter which version of the standard it targets. Assuming that you care about web development (and not games, mobile or desktop) just do .NET Core 2 (in a couple of months 3), ASP.NET Core 2 (soon to be 3), ASP.NET Core MVC and be aware of Razor Pages because of all the examples and templates that you might need to look at. Only look at other frameworks (like the .NET Framework or desktop things like WPF) if you actually need them. Be aware that Web Forms and pre-Core ASP.NET MVC exists so that you could ignore search results which are not about Core. Feel free to ask more if this is not clear.
Neither of those have ever said they use f# to my knowledge. By “relevant” I mean to avoid the no-names. A small shop using f# exclusively isn’t exactly relevant to the ecosystem of the language.
i know they use f# because i am working at one and interviewed at the other. “no name” doesn’t have a lot of meaning either. companies you never hears about can be very large or contribute a lot to the ecosystem.
I've been poking around the .NET Core source and it really fucks me off. They will have one file with half a dozen classes in, each in a different namespace. The logical grouping sort of (and I stress the "sort of") makes sense, but it's a PITA to find stuff. I was looking for the source of ValueTask the other day. I should just be able to walk down the namespace directories until I find it, but no. &amp;#x200B; I have not contributed, but I feel slightly better, so you have contributed to me :)
Have you tried [www.google.com](https://www.google.com) ?
Yup. But I want an effective website. Not "pay for full lesson" shit
Take a look at this, there are some tutorials https://docs.microsoft.com/en-us/dotnet/csharp/ https://docs.microsoft.com/en-us/dotnet/csharp/tutorials/index
Ty
Yes, as polyglot developer, Java, Android, C++. Java the language is still catching up with C# features, but then you have GraalVM, multiple JVM implementations, multiple kinds of hardware with some kind of JVM on them, and a plethora of open source to chose from. You get to choose between Netbeans, Eclipse and InteliJ. I usually go with Eclipse, used to be a Netbeans fan, but its destiny is kind of uncertain nowadays. Android, its Java variant could be called J^++ as homage, Kotlin is now officially the future. Then you get some APIs that are only exposed via the NDK. If you want first class tooling you need to use Android Studio, which Google designs in such a way that seems everyone is using a gamer workstation given its requirements. Builds are famously slow, every IO tends to reboot the platform in some way and the NDK seems to be done in a way to steer people from actually using it. Then C++, well it is the companion for anything I need to step out of .NET (C++/CLI, C++/CX, C++/WinRT), or Java for that matter. The best experience is when using something like Visual Studio, alongside vcpkg. Anything else suffers from lack of official package manager, and there are the famous build times.
Just because a few companies use it for some projects does not mean its in wide spread use or relevant. You know most of those companies probably have hundreds if not thousands of apps internally and externally facing that are not using F#.
I dont get that feeling at all. If anything I see tons of praise for Rider all the time. I think most of it just because VS on mac is such a heaping shit pile.
I don’t know what threads you’re in, but I do rarely see Rider, or any IDE other than VS, mentioned. All I’ve seen is people acting like VS is the only IDE in existence.
Download an IDE, I use VS Code, and follow tutorials, using the c# docs as a guide and resource.
This guy is right. It's like betting on Ruby when they're is literally no momentum behind these two languages. Yes Microsoft still adds features and it's a very loved language by its users (myself included). But I don't believe in it.
But it works very differently. For example you can't have a promise that returns a promise (e.g. like Task.WhenAny).
Same. I like F#, it’s neat, used to be way ahead of the times, but now? It’s a second class citizen, and doesn’t really have much use.
I'd wish for proper backing from Microsoft, but that's still a distant dream.
Yeah I agree with the namespacing. I enjoy working with js and hope they do not shoehorn any paradigms into the language.
What you need in this case is the C# Docs and a guided list of what you need to learn to become competent on C#. The best way to answer this question is to know why you want to learn C#. To get started you need to know" in order" Variables Order of operations If statements Switch statements While loops Do while loops Methods Arrays Multidimensional arrays Recursion Casting and parsing Debugging in Visual Studios [at this point if you are using a different ide you need to switch to Visual Studios. It's part of the power of C#] Class and objects Static vs instance methods and variables WinForm Unit test That should be enough to get you started and having is equal to what is typically taught in a CS Course 1 on C#. For deeper learning: Structs Inheritance Using statements System.IO LinQ Vars, dynamic, and objective type. Nuget packages Api calls with C# NewtonSoft Extension methods Using databases with C# For very deep learning in C#: Asp.net WPF Blazor and web assembly I've likely forgot a few things here and there, but this is more than enough to get you started. Especially if you can get very comfortable with the first list
I think a software engineer needs to know some mobile in this day and age so I dabble in Android Development with Kotlin. Eventually, I'd like to use Kotlin for cross platform. I don't trust React Native, Xamarin or Flutter.
You can use the "StatusCodePages" middleware. [You can find the documentation here.](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/error-handling?view=aspnetcore-2.2#usestatuscodepages-with-lambda) However, it doesn't seem to be possible to provide a handler **only** for the 404 page. Alternatively, if you want to do it manually, you can just register your own middleware / handler **last** in your `Startup.Configure` method, and do whatever 404 handling you want in there.
I have tried both but prefer using the CLI. It is more in the spirit of Angular. But if you know Angular, once the project is set up, it no longer matters how it was so.
What about the node_modules folder that gets generated? are all those modules needed? what do you do?
It contains the packages required for Angular, and there are *a lot*. That is just how things are in the JS world *shrug* You do not have to commit them to your repository because you can restore them with the command `npm i`. (I think you're better off asking these questions in /r/angular.)
I did and I got a sarcastic response...
node modules are like the nuget packages of .NET. In the front-end world, packages are very very small. There's a package that is called `IsArray`and it contains ~1 line of code that checks if an object is an array. There are also packages like "left pad" that allow a developer to to pad a character on a string to the left. Because ALL these packages are so small, packages sometimes depend on other small packages which depend on other small packages. That is why a new angular project already has to install SOOO many packages. Nuget packages are different. The C# world has a good default library and we don't need small packages to do basic things; it's already in our language.
Sometimes, there are free courses at [Udemy](udemy.com), check it out!
&gt; The C# world has a good default library My usual argument for recommending .NET Core/Framework for new projects.
Thank you!
Languages are often a matter of personal preference and taste. I was watching a lecture on YouTube a couple of days ago and the guy made a really good point: all programming boils down to telling the CPU to move data between registers, so you want the language (and paradigm) that best helps you understand the problem domain most easily and expressively. We really only have two broad ways of making those representations - either objects "talking" to each other, or functions mapping input to outputs. The languages that are really well-enjoyed by their developers - Python, F#, Rust - all seem to me to have in common that they allow you to interpolate those alternative views of the word really easily. As an example, I started looking at functional programming, dabbled a bit in Haskell, moved on to F# and through that found a whole new perspective on JavaScript (and even SQL). JavaScript, viewed functionally, has some basic data structures (object literals and arrays) with which you can express a huge amount of complexity...and no prototypes at all! But if you try to use it to do "Gang of Four"-style design patterns it's ugly and makes your life hard. If you wanted the career route, Java, Python or JavaScript would be the way to go. If you want to really broaden your horizons and see programming in a whole new way, F#, Haskell, Scala. You might not use these languages much in everyday life, but they'll change your view of programming. But the more programming you know, the more you realise it's all the same stuff...languages are just a matter of where you put semicolons and parentheses!
I'm now working in a Java8 + Cassandra environment after spending many many many years primarily with C# and SQL Server. Java is incredibly frustrating in its verbosity - but IntelliJ is very very good and I don't miss Visual Studio too much anymore. It makes me want to give Rider a crack next time I'm back in the C# space. &amp;#x200B; Java's library ecosystem is huge and it's hard to know what is the right tool (eg which HttpClient to use) for various every day requirements. The build ecosystem is also large and varied (Ant, Maven, Gradle, Buck/Bazel), but it certainly feels more powerful than MSBuild. &amp;#x200B; Making Java tolerable relies quite heavily on annotations, eg using something like Lombok to automatically generate getters and setters, builders, etc. Annotations are similar to C# attributes but javac by default includes a way to process these at compile time (similar to PostSharp). IntelliJ has support for these which means that you can write stuff like &amp;#x200B; `@Data` `public class Dog {` `private final int legCount;` `}` &amp;#x200B; and firstly, Lombok will automatically generate public getLegCount() and setLegCount(int value) methods - but IntelliJ will also know that they exist when suggesting methods on an instance of Dog. &amp;#x200B; So where C# has improved the language to make a lot of this stuff redundant, this approach offers some flexibility - for instance AFAIK Dagger2 is a compile-time dependency injection framework for Java that uses annotations to build a dependency graph at compile-time.
That somewhat doesn't surprise me
Haha, how come? It was my first time ever posting there.
Makes me a little bit sad watching VSCode installer copying it's billions of npm dependencies on every update
I think giving him advice unrelated to the compiler error will just distract from the assignment.
There's a framework called Avalonia that lets you write non-Windows GUI applications, but it's still in beta, and very scarce on documentation
But the assignment likely isn’t “get this to compile”...
Do you currently know any languages or is c# your first?
Why vs code over visual studio community for c#?
Programming hasn't changed in 50 years. Languages only remove abilities (in a good way). Language preference is just about expression really. That's it.
Interesting pattern
There's a minority of developers out there with some kinda complex about being more knowledgeable about something than other people, and they'll take any chance they can get to gloat about it. I've not come across many, if any .NET Devs in the enterprise sphere like this - but I have seen a couple of egos JavaScript Devs in enterprise, could very well be my bias though (15 years or there abouts in the field).
You need to provide more details. What do you mean by mouse rotation angle. What platform i.e. WinForms/WPF. Etc
Winforms. Rotate the rectangle to face the mouse position
Do note that MVVM and DI aren't strictly required. My fear is that learning two new design patterns *on top* of a new framework would be too much at once. It may be better to start by learning *just* WPF, then learn how to introduce MVVM into it.
No, but the critical thing he needs to understand here is *why* this code won't compile.
You can't rotate controls in Winforms, you should use WPF
Maybe try [https://math.stackexchange.com/questions/1201337/finding-the-angle-between-two-points](https://math.stackexchange.com/questions/1201337/finding-the-angle-between-two-points) for the angle part
Dude why you waste your time saying something you don't even do a research on?
Maybe you should do research on it then?
1. Oh sorry my Lord, if you already knew the answer then why did you ask the question in the first place? 2. [PictureBox class](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.picturebox?view=netframework-4.8), do you see a rotation property?
That's literally what I'm doing right now. I dont know, maybe reddit isn't the right website for making questions.
Dude there's literally a rectangle in the title of the question, where did you get the picturebox from?
Umm, "Rectangle" is not a Winforms control. If you meant to rotate a rectangle drawn using the Graphics.Draw method maybe you could've said it, don't be so salty my boy
C# is quite versatile. You can write just about anything in it, but here are some things I'd rather not use it for: * Front-end web pages. This is the domain of JavaScript. While it's certainly *possible* to compile C# into WebAssembly and use it in place of JavaScript, you'd need to send the entire .net core VM with your web page, just so you can run a little bit of C#. * Cross-platform GUI applications. C# can make Windows-only GUI apps just fine, using WPF or UWP. If you want to make something cross-platform, your best option is Avalonia, but it's still pretty new. * Mobile Apps. Again it's *possible*, but not fun. The official way is to use Xamarin, but Xamarin is...well, frustrating to use. If I ever need to write an Android app, I'd just bite the bullet and use Java or Kotlin.
Exactly. Then you why did you bring Winforms control up? I said it in the title but ok I guess. Not worthy of my time to be salty my boy
An user asked: &gt;You need to provide more details. What do you mean by mouse rotation angle. What platform i.e. WinForms/WPF. Etc And you responded: &gt;Winforms That's why I brought it up, not knowing you meant a drawn Rectangle
&gt; Also, when I create Angular native apps through CLI, why are there so many node_modules?? are they all needed? Welcome to "The Javascript ecosystem", home of the [is-odd](https://www.npmjs.com/package/is-odd) package that gets 750k+ downloads a week, his ugly cousin [is-even](https://www.npmjs.com/package/is-even) which only gets around 50k downloads a week and then there's always [is-thirteen](https://github.com/jezen/is-thirteen) which happens to have 13 downloads this week as of the time I'm typing this. Supporters will say it's not really that bad, critics will say it's even worse. I'm just waiting for someone to publish a package named 'do-i-have-too-many-dependencies' and a separate one named 'do-i-need-more-dependencies' which simply count your installed node modules and tell you if you're doing javascript correctly.
Anyway, [this](System_Drawing_Graphics_RotateTransform_System_Single_) will answer your question
Angular CLI just comes with more setup for you. I use Vue primarily, but you can create a very basic app “using Vue” with just a few packages. However, the CLI will likely generate a far more robust app because that’s what more developers use. Just cut away the faff you don’t need from packages.json. At most, spend a couple minutes reading up on each package, and cut away things that you don’t think you need. If anything goes awry, add the packages back in.
As someone that still uses razor and jQuery, I'm still scratching my head on why all the added complexity of something like Angular is so much better.
Most languages have good default libraries. JS is just in a unique spot where it’s utilized by everyone with an internet connection. Deprecating and adding new methods is a monumental task.
No, you can not. Access to that information is luckily limited. What would you even need that for, except for spying?
Thank you for this detailed answer! I will save it to my notes and probably come back to it quite a few times!
Removed: Rule 4.
Removed: Rule 5.
Questions are fine here, though we ask that there's enough information to reasonably provide an answer, and (where applicable) we expect users to take an initiative to do their own research say via Google or StackOverflow before asking people to take time out of their day to answer questions here. Ideally, they include the articles or documentation or StackOverflow answers that they found and why they didn't solve their issue.
Removed: Rule 5.
Because I like it, and its easy to jump over to linux and be in the same IDE. Does anything I need it to.
Also JS packages are distributed as the entire source and lots of extra files, compared to compiled files in Nuget releases. This is the major source of bloat.
How are you drawing the rectangle? AFAIK there's no Rectangle control and if there was you probably wouldn't be able to rotate it anyway. Having said that you could create your own control and use Draw/FillPolygon and calculate your 4 points. &amp;#x200B; Of course if you were using the superior WPF you could just add a RotateTransform 😛
Don't understand why people are like this. Half the time they don't know what they're talking about. Had someone the other day say "I didn't think stack overflow exceptions could occur anymore." in about the most arrogant tone they could.
Need a service layer first. Then that layer accesses the database layer
You can add the folder+files to your test project, and make sure to mark the files as Content, and to copy always to the output directory. &amp;#x200B; Once you do that your /bin/debug folder will have a folder for Images, that you can now work with.
You might not need the framework. I'm more familiar with react and redux, but IMHO frameworks generally (can) make complicated things much simpler, while making simple things more complicated. But I think a lot of people tend to use them when they don't really need to, just because they think they're "supposed to" or something.
Mock is your friend :)
&gt; **2 - Will WCF be usable in the coming years? How long before it becomes unusable on the latest versions of Windows and Server?** Specifically on this point, .NET Framework is supported as a component of Windows. So if you deployed your WCF app on Windows Server 2019 (which is a long-term support release), WCF on .NET Framework 4.8, on Windows Server 2019 would be supported for at least 10 years. [https://dotnet.microsoft.com/platform/support/policy/dotnet-framework](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)
Many Thanks!
if you look at the issues for the git repo, i think the guy is being a wind up merchant.
In unit tests, you should always mock dependencies (APIs, databases, file system, packages or any other complex classes) Your tests should be predictable and repeatable. Read about mocking and stubing, you'll discover a new world of possibilities! It will seems overwhelming at first but once you are use to it, you will never go back
I was just about to bring up interlocking, good work!
Assuming your code is broken up enough that you can support mocking, [IO Abstractions](https://github.com/System-IO-Abstractions/System.IO.Abstractions) can save you sometime and effort. Your unit tests shouldn't care what your filesystem is like, it should only care about the code you write.
I personally do the same thing. It works just right.
I'd suggest you to build one at a time and not start with an overwhelming/multi faceted project. Start with the easiest one, climb up as you go. One at a time let's you focus more, pick the right approach and tooling for it. On completing that one you get satisfaction and confidence which are extremely important while learning.
That's what i did while C++ but I decided to do things differently while learning C#.
Debugging/Testing full serverless with lambdas is tricky. I've tried a couple options: flight recording and playback, mocking the lambdas, or having a test stack that you log. At the end of the day, you need to commit to one you like.
I know you're a total beginner and these are fine tasks to learn the real basics, but most of these seem too easy. Calculator is just a form with controls, using standard operations for the calculations. Converting to binary is probably a few lines of code at most. Generating random numbers is a single line of code. What I would suggest is do these anyway, but maybe find projects that are a bit meatier to work on that has some challenge to it which will throw you out your comfort zone and make you learn bits of everything, such as a Winforms program that lets you select a directory and organise photos in that directory by the date taken, or a program that does some simple webscraping. Make sure you learn about functions; how to return data from functions; loops; recursion; datatypes; converting between different data types; classes (very useful for general "objects"/models) which you can pass around in code. Then move onto more intermediate things like inheritance, interfaces, how to structure your code in a way that makes it more manageable (MVC "architecture" is good for that). Once you get the basics of them, start a project of your choice. Make it a long rewarding project that solves a problem and put as much stuff that youve learnt into it as you can. And then a bit later on look into coding an LL1 parser/generator that will parse a mathematical expression and then evaluate that expression with some recursion. Then you'll have a proper calculator that can handle bracketed expressions, unary operations, logical and/or, bitwise and/or, bitshifting operations and whatever else you want :)
I will definitely look into all of that. I recently decided to watch a YouTube video on Winforms too so that would help tremendously.
I'd suggest mock, unless the creation of the temp files is the functionality you're testing. There is a method to create a temporary directory (get temporary folder or something like that) that will just ask the operating system for a folder name somewhere in the temp space. You could use that, create the folder, put your files then clean it all up in the cleanup method. Fair warning, Io tends to get a little whonky by keeping folders in use, etc. I'd suggest you steer towards mocking any io if at all possible.
This, an approach which relies on files on the disk like this will give you a huge headache in a CI pipeline if you ever need to use one.
It sounds to me like you're trying to test the .NET library's file handling. That's unnecessary. What you should do, is mock that dependency, and rather test that your code invokes the dependency in the manner you want.
u is a scoped to that method, when the method ends the variable is lost, you need to make the variable scoped to the class. Also don't name your class "Task" it collides with a name used in other parts of .NET and you could end up confusing things.
If you're looking for a challenge, try a TicTacToe game with a computer opponent. There are ways you can do it that are moderately easy, but you can also go pretty deep with it.
I definitely prefer to use CLI because using the .NET template, the node packages are a bit out of date and I was running into issues when attempting to update them. Using CLI gives latest versions and no extra work.
Or Sudoku
This is 100% correct. Based on your method name, this looks like a winforms application. Your task variable "u" (and I agree, change this name immediately, task is a very commonly used type) should be a property of the Form that you are coding against. So move that entire declaration up to just under the class declaration if you are going to want to persist a value between calls.
&gt;You do not have to commit them to your repository More than that, you absolutely should not commit them to your repository.
Getting information from a push up notification straight to my computer.
With the current salaries offered for front-end developers, they can afford to be arrogant. /s
F# is the sort of language you use for the specific components where it makes sense. A lot of its use is probably hidden deep in backends. For example, I've been on a job interview at Barclays and they said that a lot of my work would involve F#.
You should avoid reading dev.to then. That site is full of articles written by developers who think they are coming up with great ideas, apparently unaware that they are talking about things that have already been solved.
This is the right answer. Use abstractions
I'm going to give an unpopular opinion here, but avoid mocks when possible. In my experience, it's usually a lot more practical to just copy files on a test run and use that, instead of setting up a filesystem abstraction. Never had any issues with CI as some people claim here. Remember your users are not using your mocks. Think about what gives confidence in your tests.
What platform?
Depends, some CI pipelines will handle writing files to disk, but if nothing else it's a bad practice because your tests will be slow and your tests scope will include any errors your file system provides (e.g. permission errors, out of space, file not found, etc.). But OP didn't say if he's doing integration tests or unit test (or whether he knows to distinguish between them), we've all assumed he's making a unit test.
You should learn the difference between `value type` and `reference type` to understand this.
I find that with experience I have been able to identify the need for a programming pattern earlier but not always immediately. It’s still rare that the first solution is the final one as much can change throughout game development such as design requirements, technology’s and trends. Therefore its more important to have a code base that is not closed to change. A great place to start is learning programming patterns. The classic GOF book (Design Patterns: Elements of Reusable Object-Oriented Software) is great but I remember finding it difficult to relate to game programming problems. Game programming patterns is a good for matching design patterns to game related problems. It’s also free to read online. https://gameprogrammingpatterns.com I would also recommend Clean Code series by R.C.Martin, he explains how to identify code that can be improved upon and maintaining a code base that allows for easy modification.
https://www.youtube.com/playlist?list=PLrW43fNmjaQVYF4zgsD0oL9Iv6u23PI6M I would highly highly recommend this video series, he assumes a basic knowledge of C# as he also has a C# Basics series. But that covers things like making a calculator, functions, data types, classes etc. The WPF series that I have suggested is amazing. It will cover everything the person above has suggested and more. You’ll look at MVVM code structure as well as bindings and how to use databases. The end result is designing a C# chat application, that is of a professional level. The quality of the videos is astounding imo and it’s shocking that he has given 40+ hours of high quality teaching material for FREE.
Even if `u` was scoped to the class it would not work because he makes a `new` one every time.
In this case you can use a messenger. This is a singleton (doesn't have to be a singleton as sometimes you want to have private messengers, but run with me on this). On the singleton you can send a message or register to receive messages. So here, each menu/submenu sends a message saying things like "Hey! someone just clicked on the Inventory button!". Meanwhile, when the game starts, a UI factory will register to listen for messages. The UI factory receives the message sent above, understands that someone wants to show the inventory, and shows it. For submenus on menus, just have a menu class and a MenuItem base class. From MenuItem create two subclasses, one MenuItemAction, the other MenuItemSubMenu. Compose your graph of menu items. If someone clicks on a SubMenu, the menu system will know it needs to show that submenu. If the user clicks on an action, it sends a message. &amp;#x200B; Any help?
Android
Urrghhh elitism in programming groups shouldn't be s thing but sadly it's still prevalent.
https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#getActiveNotifications%28%29
I use F# for my play projects. It has a high learning curve and most of the framework libraries feel incomplete but trying to get things running with F# has made me a better C# programmer. It forces you to handle most of the edge cases and I've been starting to notice the same things in my C# code.
Mocks are useful, but they really should only be at Unit Test Level - unit testing shouldn't be your only testing but some seem to think that that is.
It sounds to me you are talking of more of [Integration/System](https://en.wikipedia.org/wiki/Software_testing#Testing_levels) style testing where the two frameworks you are looking at are Unit Test (a layer down - Pytest sounds a broader test framework). While you can use them for such, you probably will have to do a lot more work to make it happen - such as copy files in Test Setup methods (could make very slow though). There are other alternatives -[Testing Tools and Frameworks for .NET](https://github.com/dariusz-wozniak/List-of-Testing-Tools-and-Frameworks-for-.NET) so may be worth looking for something better suited. Ideally for testing you have several layers - Unit Tests check small blocks of code,Integration Tests to check the blocks work together and system testing to test whole system
Add tests to your projects
!remindme 24 hours
On line 3 you are creating the object called u. On line 10 you are exiting the method. After that, the u variable will be freed When you call the method again, on line 3 you create a new object called u again. It's not the same u. It's a new u because the old one got freed. At this point, the old value doesn't reside inside u anymore because it's a new instance of your Task class.
I will be messaging you on [**2019-07-08 10:54:34 UTC**](http://www.wolframalpha.com/input/?i=2019-07-08%2010:54:34%20UTC%20To%20Local%20Time) to remind you of [**this link**](https://np.reddit.com/r/csharp/comments/ca4pvo/good_unit_test_examples/et5yf71/) [**CLICK THIS LINK**](https://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=%5Bhttps%3A%2F%2Fwww.reddit.com%2Fr%2Fcsharp%2Fcomments%2Fca4pvo%2Fgood_unit_test_examples%2Fet5yf71%2F%5D%0A%0ARemindMe%21%202019-07-08%2010%3A54%3A34) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](https://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete%20Comment&amp;message=Delete%21%20ca4pvo) ***** |[^(Info)](https://np.reddit.com/r/RemindMeBot/comments/c5l9ie/remindmebot_info_v20/)|[^(Custom)](https://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=%5BLink%20or%20message%20inside%20square%20brackets%5D%0A%0ARemindMe%21%20Time%20period%20here)|[^(Your Reminders)](https://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List%20Of%20Reminders&amp;message=MyReminders%21)|[^(Feedback)](https://np.reddit.com/message/compose/?to=Watchful1&amp;subject=Feedback)| |-|-|-|-|
https://www.youtube.com/watch?v=ub3P8c87cwk Tim Corey has an excellent tutorial on the types of Unit Tests you should be writing.
XUnit has an idea that's similar to pytest's fixtures. [IClassFixture](https://xunit.net/docs/shared-context) will let you inject some helper into the class. It's not as clean as `tmpdir` but you can create a helper that can create a temporary file structure and then implement a cleanup method on it that's called in the test class's Dispose method. But I'm also gonna echo isolating file system access as much as possible and using an abstraction (stream is pretty good) for passing that data around. Given we don't know what you're doing other than poking at some images so it might not be possible.
Check out The Art of Unit Testing by Roy Osherove
Potentially unpopular opinion, but you should only mock inconvenient dependencies. Databases, file system, RPC, have it at work the mocks and fakes and stubs and spies and whatever else name they have. But if there's a dependency that's just data in, data out then I prefer to just use that rather than attempting to fake it.
pytest is pretty similar to other test frameworks, you can use it from unit tests all the way up to end to end testing with selenium (god rest your soul). What OP is talking about is something similar to XUnit's IClassFixture. You can write helper functions that you declare as arguments to your test and they're injected at test time. They can be simple things like "inject this particular mock for me" or more complex things that manage some dependency's lifetime. Specifically tmpdir let's you create temporary directories and files and when the test exits, tmpdir vacuums up all that crap. It's a really nice testing framework if you're ever working in Python. I liked it so much that I completely forget that the unittest module is part of the stdlib (mostly because unittest is hot trash if you want to do anything beyond basic testing)
I agree with this. The book has many good (and bad) examples and really goes into depth on the considerations you should be making when writing unit tests.
In the onclick event for your button you can create a new instance of the secondary form, then use Show() method of that form. var newform = new FormName(); newform.Show();
[removed]
Here's a project with ~500 unit tests: https://github.com/jpdillingham/Soulseek.NET Coverage was at [100%](https://codecov.io/gh/jpdillingham/Soulseek.NET) for a while but there's some refactoring going on at the moment. Of particular interest are a few Adapter classes in the Tcp namespace, ([TcpClientAdapter](https://github.com/jpdillingham/Soulseek.NET/blob/master/src/Soulseek/Tcp/TcpClientAdapter.cs) for instance) that demonstrate how to apply the Adapter pattern to classes that lack interfaces so they can be injected and therefore mocked in tests.
 !remindme 24 hours
Well I know only a little little bit python and html. So yeah it is my first serious language that I wanna learn.
A simple 3d animation created in C# using CUDA (AleaGPU) and OpenGL (OpenGL Dot Net). First I load a shape from an stl file. Then for each voxel in a defined voxel space I display a little cube. Those cubes have a size calculated based on the distance from the shape and are rotated accordingly to the normal vector of the nearest face of that shape. [Github repo](https://github.com/TomaszRewak/RotatingVoxels) [Youtube video](https://www.youtube.com/watch?v=oOUW2xM0GMM)
I can think of three areas: - desktop apps with WPF - mobile development with Xamarin - games with Unity
For most serial port reading and parsing I use a pattern in which one thread receives bytes from the serial port and enqueues them into a thread safe queue, handling any in-band control sequences, IO exceptions, etc. Another thread dequeues bytes from the queue and parses them and does whatever with them (writing to a file, for example). This pattern ensures that data is brought out of the OS/hardware buffers and into the program’s context as soon as possible. Since your data rate is so low and your parsing is so simple you would be fine doing it all in one thread. But I would probably use a pattern like I described anyway, even if just for separation of concerns.
Instead of \`request.GetResponse()\`, use \`await request.GetResponseAsync()\`
Since you're using WinForms, use a BackgroundWorker. https://www.c-sharpcorner.com/UploadFile/mahesh/backgroundworker-in-C-Sharp/
Have you got any book suggestions or associated reading regarding your final point? I'm reading the players guide at the moment, will that introduce me to design principles and common patterns?
There are many ways to handle producer/consumer scenarios. There's `System.Threading.Tasks.Dataflow` which allows you to model your code as "blocks" that link to each other. This simplifies modeling a pipeline in which your execution branches. Your input might get sent to both a to a direct and fast byte-dump as a file, while at the same time passing it on to a different block that handles slower decoding. [Here's an example that I found for that.](https://jack-vanlightly.com/blog/2018/4/18/processing-pipelines-series-tpl-dataflow) It's kinda cool as it's easily extendable by adding new blocks at the processing stage level, without disrupting any of the other blocks and their processing. There's the `System.IO.Pipelines` which allows for a very optimized way of reading byte streams without allocation costs, and then there's the `System.Threading.Channels` which gives you the same type of reader/writer API but allows for custom types rather than just byte sequences.
!metoo
!remindme 24 hours
Or... async &amp; await.
That works too. However BackgroundWorker has the advantage of being specifically designed to work with WinForms. Want to make a progress bar for instance? Super easy with BackgroundWorker.
I want to reinforce the "abstractions" answers. A file is "just" a stream of bytes. Your reference images probably have some interesting quality on which your code operates. It can be fiddly and difficult, but if you can pare the reference images down to *just* the interesting things you'd like to test, you're golden. Make files with just those bytes, encode them as strings, and now they can be data files in your tests. This isn't "ideal" since normally you'd want test data to be human-readable, but not everything's corporate database tables, right? If you believe the file on disk would have those same bytes, you have to believe the program would behave the same way whether the bytes come from the filesystem or memory! I've done similar things with code that needed to parse streams with JSON in them. I knew what kind of JSON I wanted to test, so I didn't need files. Instead, I either used Newtonsoft to build the JSON from an object defined in the tests, or for cases like "subtly invalid JSON" I hard-coded a string with the error I wanted. If you can't pare the image data down that way, maybe you should just relax and use the filesystem. That's not a *unit* test, technically, it's an *integration* test, but sometimes it takes too much effort to satisfy our philosophies. If it's not slow and brittle to use the filesystem, then you're not facing the reasons we complain about doing so. Don't make that decision lightly, but if you weigh the risks and find them acceptable that's sort of *why* experience is valued.
I agree with you but for a slightly different reason. Half of `await`'s utility and 90% of its pitfalls are because it's *also* designed to capture and return to the UI thread. I still prefer `BackgroundWorker` in WinForms if only because I don't have to ask, every line, if I need to decorate my method with `async` or if I can call `.ConfigureAwait(false)`.
&gt; Want to make a progress bar for instance? Super easy with BackgroundWorker. Super easy with `Progress` and async/await too. async Task DoStuff() { var progress = new Progress&lt;int&gt;(percent =&gt; { // Update UI myProgressBar.Value = percent; }); await DoStuffAsync(); progress.Report(20); await DoMoreStuffAsync(); progress.Report(50); // etc... }
You shouldn't write unit tests for the sake of writing unit tests. If it isn't clear how your code should be unit tested, that probably means it doesn't need them.
I'm myself somewhat of a beginner on the topic but I believe you should have a look at ZeroMq and NetMq (a native C# implementation of ZeroMq). It makes working with sockets a walk in the park!
Check this NuGet package I just made: https://www.nuget.org/packages/pepoluan.xoshiro/1.1.0 Here's a result: rnd1 = System.Random 100000 iterations 5000 arrsize 00:00:09.1798885 seconds rnd2 = XoShiRo128starstar, Random-compatible 100000 iterations 5000 arrsize 00:00:05.7140616 seconds rnd3 = XoShiRo128starstar, Unleashed Mode 100000 iterations 5000 arrsize 00:00:04.7247645 seconds rnd4 = XoShiRo256starstar, Unleashed Mode 100000 iterations 5000 arrsize 00:00:07.9084972 seconds Source code available: https://bitbucket.org/pepoluan/xoshiroprng.net/src/default/
Oh man, this looks really interesting but could be at the moment a bit overkill for my purpose. I will definitely look into and go through that example. Thanks!
Thanks for the resources! That’s a great answer. I’ve looked at that game programming site in the past, but it’s been a while; maybe time for a second go-round.
Hey, thanks for that! Yes, I’d thought about building it through messages that way. Functionally, what I’ve already implemented is following the Singleton pattern, for sure - just thinking about smart ways to put together the rest. I appreciate the thought!
Hey, thanks for that! Yes, I’d thought about building it through messages that way. Functionally, what I’ve already implemented is following the Singleton pattern, for sure - just thinking about smart ways to put together the rest. I appreciate the thought!
Do you think this is applicable still when I would do maybe a measurement over 1 hour with 20kHz. This would mean I get 343MB into that queue. Of course the other thread gets the information out and would either display or save it into a file. I'm a bit unsure how to handle creating those two tasks inside my EventHandler
Slightly dated but classic: xUnit Test Patterns: Refactoring Test Code by Gerard Meszaros. The main purpose of the unit test is to protect against changes that may break the code. If tests prevent bugs from getting out then tests are great.
I agree. That was my first thought but I did not know how to make the declaration global.
Yes it is a form. I changed "u" to "operatorTask". How do I make it a property on the form? I presume that will make operatorTask global?
That's what I thought. However, I could find no examples of it being reused between calls.
It's more to do with runtime distribution I think. For example, you might have two libraries that use different versions of the same dependency, and there are breaking changes between those versions. So you could e.g. repackage one of the libraries so that its dependency is embedded inside it, allowing you to use both of the libraries at runtime without a version conflict. Or you might want to ship an app that has all the dependencies embedded in the executable, so that you only have to ship a single file.
This plus backend services, web apis and with .net core i think it can be used for most stuff, even performance heavy applications.
You are right. I just simplified them as Web Applications. Also Machine Learing is in Preview now! Check [ML.Net](https://ML.Net)
 public partial class Form1 : Form { public Form1() { InitializeComponent(); } // This is a the form level property or My Custom Task public MyCustomTask OperatorTask { get; set; } // This initializes your MyCustomTask property during the form load event private void Form1_Load(object sender, EventArgs e) { this.OperatorTask = new MyCustomTask() { Time = DateTime.Now }; } // This will now assing the form level prop the value of taskstarttime private void RadioButton_Checked_2(object sender, EventArgs e) { DateTime TaskStartTime = DateTime.Now; // build string. get u.time string taskText = "Part Prep," + DateTime.Now + "," + GetTime(this.OperatorTask.Time, TaskStartTime); myText.Text = myText.Text + "\n" + taskText; // set u.time with TaskStartTime value for the next time I call it. this.OperatorTask.Time = TaskStartTime; } } /// &lt;summary&gt; /// This is what we are telling you to rename. Having an object named Task is going to make your code confusing later /// &lt;/summary&gt; public class MyCustomTask { public DateTime Time { get; set; } }
https://stackoverflow.com/a/36642852
Your client and server code seem to be backward, also, you open the connection, write to it, then close it. You should keep the connection open for the duration of the session. I'm on my phone so I can't really show you an example but perhaps later.
&gt; If it isn't clear how your code should be unit tested, that probably means it doesn't need them. That's a bold claim. I would treat "It isn't clear how your code should be unit tested" to mean it very likely is in need of refactoring.
I believe with your help I solved the problem. Moving Task operatorTask = new Task(); just below the MainWindow class is allowing the value to be persistent between calls.
True, but not in this case. The program is now set up as a network data tester, and the server is always sending messages whenever something happens. I tried to set it up as a thread but that didnt really work all that well.
&gt;NetMq Oh that looks easy as all hell! Will try to set it up with that when school starts again, this should make it way easier to maintain as well. Thanks!
I'm already using async and await and its still blocking.
I had a library for this. It let you apply Linq expressions to observable collectives and materialize another observable collection that properly raised events. Olinq Look on my GitHub. Wasabii Will update with better links when I'm not in a crappy phone.
Try the C# Yellow Book by Rob Miles. I found it very helpful as a beginner and new editions are released regularly.
Not for your `GetResponse()` call, which is most likely where it is blocking?
I partially agree with you. The point stands that you don't need to know everything about the language to use the language. You can make valid programs without knowing how reference types work, but it will help you to know about them. Also, it will help you to know how the language is used by the machine it's run on and how it's compiled. Only in certain cases will this knowledge have uses. The reference knowledge will be needed more often. However, I have been on several projects where knowledge of how IL is generated was important. Mainly for very tight loops and how certain things pressure the GC. I found out at those points that not very many people know much about the language at all. Most people learn in a very ad-hoc fashion. I didn't harp on my colleagues for not knowing about certain things. I had done work in this area before and gladly did it again while attempting to teach them some things along the way. Without knowing more about the person posting, I'd suggest the same thing. Don't judge before you know more.
Because you're still having blocking calls. Those don't magically disappear.
Create a [CollectionViewSource](https://docs.microsoft.com/en-us/dotnet/api/system.windows.data.collectionviewsource?view=netframework-4.8) for your collection, tell it how to sort/filter, and bind to that instead to the collection. I *think* that will work better than trying to avoid update notifications or other fancy things. Almost nobody knows about CollectionViewSource!
&gt; It is a core principle and requirement to use the language correctly. For whom? These are subjective. The question is really 'How correct' must you use the language before others consider you a 'real' developer. That's really what we are arguing. If you are a solo developer just trying to get something done, does it really matter if you are using the language 'correctly' or not as long as the end product works and operates within your budget? No &gt; Can you explain what you mean by "it's abstracted away"? In most cases using a Value vs. Reference type will have no bearing on the code. It also requires him to be running some type of Code Inspection and care about Compiler Warnings. However, it's very logical that if he runs the code and it 'works' for him that he ignore some/most of those warnings. There is also no 'smoking gun' to tell Value vs. Reference types apart besides the word 'Struct' vs 'Class' in most cases. Yo do not usually interact with them differently and in most cases you will see no differences in using one vs the other. There are numerous ways to conflate the two.
That’s completely true. Excessively abstract naming may lead to confusion between different code pieces or even the language native methods/keywords. I would strongly recommend to use both, namespaces &amp; a more specific naming convention
I’ve tried a few books, The C# Players Guide 3.0 is by far my favorite.
https://old.reddit.com/r/csharp/comments/c5prdc/interfaces/
Say you have a function that wants to take in something like a hash table. You don't care WHICH hash table, it takes in. You just want something with a couple functions. A function to give a key and get back a value, and a function to add a key and a value. The particular implementation doesn't matter to you, and you want users of your function to be free to use implementations optimized for their use case. &amp;#x200B; Then your function can take an interface. All the interface says is "you have to pass me something that implements these two functions I expect". Then anything implementing that interface can be passed to your function.
It helps in defining contracts. Let's take the example of a door; your house has many doors. But they all share the same interface of having a lock, door handle, latch etc. So, in this case, an interface is only a way of defining the attributes and functionality of a door. But when you actually create each door, you would customise it to the room or area that door is installed at. For example tour front door might have a more fancy lock, wood etc, while your backyard for is basic. But both doors are functionally the same.
I think Head First C# by Andrew Stellman is pretty good as long as ur going to learn how to code games. I also recommend "c# in a nutshell" to keep on ur side may help you a lot.
Multidimensional arrays are great at storing a map/grid. (You could argue a List&lt;Vector3&gt;, but I digress...)
Your statement is not Pythonic.
Compare it to adapters for cables in a computer, like USB. The USB is the interface, and there are multiple implementations for it.
One of many reasons is to increase flexibility and reusability of code. Say you had a method that accepts a collection of strings and prints each one out to the console. If your parameter was defined as an array of strings then someone with a list or a hash set is out of luck and is forced to cast it to an array. // Only works with array public void Print(string[] thingies) { // Loop through and write } Why force consumers to use a very specific type when all you need is to be able to iterate the collection? // Works on any collection that implements the interface IEnumerable: hash set, list, array, etc public void Print(IEnumerable&lt;string&gt; thingies) { // Loop through and write }
Not sure why you're at the bottom, but this is the correct answer. Just cast the return to an `HttpWebRequest` after the `await`: `HttpWebResponse response = (HttpWebResponse)await request.GetResponseAsync();`
- You should avoid naming your classes like very common .NET types, e.g. `Random`. - `IRandom64` extending `IRandom` (Which seems to be the 32bit variant) doesn't make much sense. Just keep them split (and adjust the name), or put them together. - Same with the "U"-variants. - Don't throw a `NotSupportedException` in your `SplitMix64.FillArray32` method. Instead make the `FoldMethod` read-only (getter only), check the value in the constructor and throw an `ArgumentOutOfRangeException`. - Why accept a `long` in your `SplitMix64` constructor, when you're just going to cast it anyway? Just accept an unsigned long. - It's uncommon to have multiple types per file. Common approach is one type per file. - So many unnecessary allocations. For example in `Xoshiro32Base.NextBytes` - why are you using `BitConverter.GetBytes` to get the bytes? You already have a byte array allocated, just re-use it. - Comments like "Not sure if needed, but we put it here" don't increase trust in the code base. - Abstract and virtual methods can not be inlined. Your `MethodImplOptions.AggressiveInlining` does nothing in all these cases. - Don't just guess if aggressive inlining makes sense. Measure it, profile it.
Some companies need some of their apps to run without an internet connection, like ours. I guess if I was to tragically pass away, then they'd have to find someone else that knew WPF, so I guess it's possible, but web &amp; mobile are far more desirable in general
There are a lot of jobs in larger corporations that use a lot of C# internally. These are often not software/tech companies tho. I’ve worked for a bunch of companies the used .net to “wire” a bunch of services and tasks together (one was a tractor dealership).
You really shouldn't create a new class named Task. That's the name of a commonly used c# type and so you would have to qualify which one you mean if you want to use both. But more importantly it makes it confusing for someone else to read your code.
This is your answer OP.
I think people saying "It's a contract!" are kind of missing the point. That's just another buzzword that is equally as obtuse as "interface" to someone new and does nothing to help someone understand what it is or how it should be used. Chill with the regurgitation, provide some examples lol. An interface is a way to describe *what* something should be able to do. So if you look at some common interfaces that come by default in C#, look at IComparable: it's an object that you should be able to compare with other similar objects. Anything flagged as IComparable should have a CompareTo function. Now, this alone isn't *too* useful. How is this more useful than just defining it on the class without the interface? Well, there are two huge benefits to it that I see right off. 1) Swapping out implementations. This pairs with Dependency Injection, in that you can say "when I pass in an IDataAccess object to a constructor method, I want to use the DataAccessImplementation class." So you make an interface that gives you a "Read" function. You pass in IDataAccess, and then you register "TextFileDataAccess" as the one to be injected. You have a dozen controllers that accept the IDataAccess, and they're all able to use it to call ".Read" and get data from your text file. But then you realize this scales *terribly,* and change it to use a true database. Instead of making a dozen changes in your controllers to take the new "SQLDataAccess" implementation, you make sure your SQLDataAccess implements IDataAccess and you swap out the registered dependency. Much cleaner and quicker. 2) Generics paired with generic constraints for an interface. For example, say you want to make a generic class: SortableCollection&lt;T&gt;, that takes a collection of type "T" (any type) and sorts them. One problem: we don't know what T is. It could be ANY object, how do we know which elements should go first and which could go last? Interfaces to the rescue: we can say "where T : IComparable". This tells us that T will have a "CompareTo" method that we can call and it will tell us which elements are greater than others. "T"'s type gains the methods of that interface within our generic class, which is incredibly valuable. (small note that inheritance can solve this problem as well, but interfaces tend to be a lot more flexible. If inheritance is a suitable choice, then the problem is probably better solved with a function in the parent class rather than a generic class). ------------------- There's probably a lot more that could be said about it, but this is around where my knowledge sits for now lol. Hope it helps!
Shouldn't you use some base abstract class in that situation?
"C# In Depth" is a good resource but, as the name suggests, it does go really in-depth about the language and it's features. This book is probably a good compliment to other resources for when you want detailed information.
Did you mention web applications? I hope [ML.net](https://ML.net) becomes awesome. To me it kinda feels like EF for machine learning, and i cant decide if that is good or bad yet.
If your question is about real world usage, then consider this example. Say your class needs to use a database. The type of the db client can either be a specific implementation (a class) like a PostgreSQL client, or it can be an independent abstraction (an interface). If it's an interface, then you can decide what actual client to use it with, e.g. SQLite for a local app and SQL Server for a server app. Now your class works with both app types without ever touching it. That way, you can put it in a class library and share it as a nuget package that knows nothing about what actual db it will be used with. The same benefit extends to unit testing. In short, you only test your method (unit) by faking its dependencies (a db client, etc.). The test doesn't pass any real implementation to it but creates a fake one. You may do this by creating an empty class (a stub), but in practice, this is done quickly with tools like Moq.
Not really, OP mentioned &gt; areas other than the web &amp;#x200B; I hope for that too. I'm so excited
Agree with you completely. Never once witnessed a student light up in recognition after "it's a contract" yet its almost universally used to describe it.
If it isn't clear how your code should be unit tested, you probably need to refactor.
OK. This is pretty deep. I'm going to steal the metaphor *Head First Design Patterns* used. I think that book covers it really, really well. But first I want to get something out of the way. Yes, this is confusing. Anyone who tells you it's easy is wrong. Part of the problem is OOP is way more complex than we say it is. You can write philosophically perfect OOP code that is impossible to maintain. I don't think enough people admit that. Anyway. Interfaces. It all really comes down to the fact that when we design our types, we're trying to write a coherent way to tell stories about what they do. Remember, inheritance is an "IS A" relationship. If you decide to write a `Fly()` inside some abstract `Bird` class, and `Sparrow` is a `Bird`, then you know a Sparrow can fly because it IS A Bird. In a program about *just* birds, that's fine. Obviously all of your birds can fly. So it makes sense that your `Fly()` logic starts with the root of all birds. But what if there are more than birds, in your program, or your set of birds is very extensive? We can end up in some bad situations: * Penguins don't Fly(). They Swim(). * Ostriches don't Fly(). * Flying Fish Fly(). Yowch. If we want to assert that Fly() belongs to Birds, I've already found 3 special cases we have to be careful about. It turns out, for certain definitions of "bird", not all birds can fly. And it turns out, in some programs, not everything that can fly is a bird, and not everything that can swim is a fish. If we stick with inheritance, that's hard. If a base class has `Fly()`, that means *everything* with that base class has to be able to fly. If a base class has `Swim()`, then EVERYTHING that derives from it has to swim. If a base class has `Fly()`, then EVERYTHING that derives from it has to fly. So it gets hard, in those circumstances, to think of an entire zoo where `Bird` defines `Fly()`, since there are a lot of exceptions. BUT. It is also valid to say, "In this program, I'm only going to consider birds that fly". If that's true, you don't need interfaces. If not, you need them. That's where interfaces come in. If inheritance is "IS A", interface implementation is "CAN". An interface tells you that a type can do something. So with an interface, we may still have a `Bird` base class. There are qualities of birds that are common. They always have feathers. They always lay eggs. They always have beaks. We can also mark *the birds that fly* as implementing `IFly`. That gives us the flexibility to say things like: * "Not all Birds can Fly()." * "Some non-fish animals Swim()." * "Platypus is weird as heck. Seriously. But this is what it can do." So if we didn't have interfaces, it's hard to imagine a zoo program that can put "everything that can fly" in one array. It can't be a `Bird[]`, because it has to include some fish and mammals. With interfaces, we're able to say, "This is the set of things that can Fly()" without being limited by the inheritance hierarchy. If we take a step back and talk about that in more stuffy software engineering terms: Inheritance turns out to be problematic. It's taught as a means for code reuse, but it's only valid for *behavior* reuse. And it's very context-sensitive. We talk about "comparing apples and oranges" like it's a bad thing, but if your program is about "round fruits" then it turns out apples and oranges are basically the same thing. Abstraction is a hell of a drug. Interfaces give us a way out. Instead of talking in very strict, broad strokes, interfaces let us talk about very specific behaviors. If I care about "fish", I probably want a class. If I care about "things that swim", I probably want an interface. It takes a HUGE amount of insight and experience to understand that difference. You're not alone for being confused, and it's not abnormal.
Fairly simple idea: write an initial battery of tests, covering any public method that isn’t just an immediate return of data. Then, write new tests every time you find errors. It might not lead to the most comprehensive test suite, but it’s effective and efficient.
His example started fine but then, you're right, it derailed when he went into describing several types of doors. The better example is that a house has a door. So does a car. And a submarine if you're loose with your definition of "door." But those things aren't connected in any meaningful way (like you would expect with an abstract class's inherited relationship). All they have in common is that they have doors. But if you wanted to make a DoorManager class that closed and opened doors, you don't want to make a new definition for every single object that might have a door, and you can't use a base class since these things don't share a common parent. But if you make sure they all implement IHasDoor, then you can use your DoorManager to open the doors of houses, cars, and submarines alike, all with the same method.
&gt; Is it something that I need more experience in OOP to fully appreciate and understand? Yes
xUnit also lets you inject dynamic data to each test by extending `DataAttribute`. I've used it for loading data from resources and then modifying it on the fly.
 var view = CollectionViewSource.GetDefaultView(yourcollection); view.SortDescriptions.Add(new System.ComponentModel.SortDescription("Date", System.ComponentModel.ListSortDirection.Ascending));
Well not global but in your case scoped to view class you're in. Just make it a field of the class.
It seems that this question gets asked every 10 days or so, maybe it should be in a FAQ or something?
I would use a thread with read using a fixed size buffer(probably multiple of the 5 bytes). When the data comes in you should be able to convert it to ascii and write it to a file on the same thread. Then just read the next buffer. You will take up one thread entirely, so no async and not using data available property/event. But probably it is simple and effective in this case. Be sure to set a time out though to prevent the thread from totally blocking when nothing is received.
Cool never knew Soulseek was open source. Used it waaaay back in the day before streaming was a to thing. 👍
This is what I was looking for. Thank you, you've helped a lot.
In my experience, the corporate world is going to web apps for as much internal software as possible. - It allows them to extend the life of their deployed hardware (desktops/laptops), since the only real demand in them is a web browser which have fairly low requirements. - It allows for cheaper deployed hardware, see above. - It simplifies the deployment process why deploy to 1-5k desktops when you can deploy to 1-4 servers. - It simplifies the setup/maintenance of the deployed hardware. If a user only uses web apps, the replacing their computer is a matter of transferring their favorites. It also means they can use any other computer in a pinch. While there is some corporate dev of desktop apps, I see those as exceptions instead of the norm. Like another poster said, you can develop phone apps and games, if that interests you.
You're very good at explaining things
Thought as much. I still want to understand as much as I can grasp at this moment though
I found this article posted in one of these dotnet/c# reddits. It’s about naming interfaces and not prefixing with I. Personally this helped me a lot with understanding the interfaces I was creating. Maybe it might give you further insight. https://developer.okta.com/blog/2019/06/25/iinterface-considered-harmful
That was seriously great to read. I feel like I've got a much better understanding of it. Thank you very much.
I haven’t read any of the other comments so forgive me if this has already been said. I like to think of it as a way for two different machines to talk to one another. If you define the interface and your app knows about that interface and someone else creates a class that inherits from the interface, now your app knows how to use that persons class just by looking at the interface. So let’s say you want to write to a database, or a to a file on disk, or to html. You can define an interface that does read() write() save(). And someone else can come up with all the logic for doing those things with a database: now you can plug it into your app wherever you need to write to a database and your app doesn’t need to be reconfigured. It already knows how to do these things because of the interface. So now it’s easily swappable when you want to save to a file instead of the database, your code doesn’t change. The deeper concept is hidden in the SOLID principles of OOP. When you want to abide by the Dependency inversion principle (the D in solid) you do this with interfaces. Related concepts are dependency inversion, dependency injection, and dependency injection container.
Others already answered about async/await, but another question: why are you using WebRequest and not HttpClient? Same capabilities, newer, cleaner API. Async from the get-go.
Well I guess I'd say an interface is the most abstract you can make an idea. An `abstract class` is useful for when you have a general idea of *what* something is, and it should have some base-functionality that everything else derives from. Example: `Vehicle` is an abstract idea. It could be a car, a plane or a boat. But they all probably have an `Engine`, which the Vehicle class says they must implement. &amp;#x200B; An `interface` is even more abstract and generally describes what something *does.* When are they most useful? When others use your code. If you write *your* code with methods that accept an interface, then others can pass in their own classes with custom logic that implement that interface. Basically you allow your own code to use other people's code, without having to know what that code is going to be. &amp;#x200B; Interfaces don't have immediately obvious advantages when anyone who will ever use the code is yourself, but once you start sharing code or using other people's code then interfaces are invaluable as they are an explicit way to tell others "if your class has these methods my code can use your code."
Slighlty different approach why they are useful when using collections when using completely different objects that need something in common Lets say you have a list of objects. A car.. a Table and a Tree. Theyre all completely different objects. However they all need drawing to the screen. So they all use the interface IDraw. As part of using the IDraw interface they must have a method called DrawMe. We can now create a list of IDraw obects. And because each IDraw object must have a method called DrawMe we can go: foreach (IDraw iDraw in iDrawList) IDraw.DrawMe
A very good example of an interface is a wall outlet. What can you plug into a wall outlet? Well, anything that meets the wiring requirements. For example, if you have 3 different lamps you know that they will all work with the wall outlet. The outlet is the interface, and the components are the lamps.
https://github.com/xamarin/Xamarin.Forms/issues/2193
\[ApprovalTests\]([https://github.com/approvals/approvaltests.net](https://github.com/approvals/approvaltests.net)) is well unit tested.
AngularBeginner? Somehow I very much doubt that.
I've got this. &amp;#x200B; An interface is something you put on every single service within your application, especially if you don't actually do unit testing. It helps with both your line count and obfuscating the application for other develoeprs trying to steal your jobs. /s
Most (all?) of the big open source projects we use every day have good test coverage. You might checkout github for Autofac, AutoMapper, App Metrics, NLog, Entity Framework Core, Identity Server 4 and so on.
When you pass any object around, you KNOW you can use the ToString() method. Every class, struct and enum in C# suppports that. Well, what if you wanted to guarantee that everything you received supported TurnOn() and TurnOff() as well? You would write a method like this: `public void GiveToy(IIsTurnOffAndOnable toyWithSwitch)` `{` `...` `}` and define the interface like this: `public interface IIsTurnOffAndOnable` `{` `void TurnOn();` `void TurnOff();` `}` That way, only objects that can be turned on and off can be passed to GiveToy(); Now, people are free to give all sorts of toys, providing that can be turned on and off!
Not at all - please see my top level answer. Interfaces are quite simple.
Ok, now code it out, plz. For OP.
A great analogy for an interface a coworker used is a power outlet. If your application needs power, you do not need to know how the power is generated, if it’s solar, wind, coal, or a generator. You only need to know how to plug into a power source. If something changes with that power source, your code does not need to change because your are still only required to know what it takes to plug into the source.
Is there much demand for desktop apps that couldn't be developed for web browsers? (I know you can do most anything with other languages but I'm just wondering if from an application perspective why organizations would use desktop over web-based?)
&gt; The only exceptions I'm willing to accept is when dealing with IO. Also anything that relies on randomness. And arguably many more scenarios.
https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/foreach-in
What if they already clicked once? Do you want to open a second form? Should it be modal?
Thanks I'm adding this to my list.
After researching several suggestions I've decided to start with this when I'm done with Codecademy. Thanks.
Thanks I will look at getting this once I've got a solid foundation to build on.
Lots of complicated answers here. Let's say you want to do some logging. You have developed a class with a few logging methods and then you inject this class into objects that you want to log from within. It's called Logger. Then you're like "hey, it'd be really nice to be able to change out the medium for logging. I want to send all this to a file!". So what you can do here is make an interface class called ILogger or something that defines those few methods used to log but because it's an interface you leave it just as a declaration of a method (return type, method name, parameters). You then replace the type of loggers you're sending into your objects to ILogger instead of just Logger or something. Then you go and create your FileLogger class which extends ILogger. You write the interface methods to send all your data out to a file. Then you go to test this that and realize it is really inconvenient to read a file to assert the logging is happening correctly. So you mock this ILogger class into a MockLogger class which you can take all your incoming messages and store them in lists to be compared later for accuracy. All of this will work because you do not need to explicitly say what kind of Logger is going into your classes, but because you're injecting an "ILogger" the implementation becomes a runtime concern. Note that my example goes over dependency injection which makes use of interfaces extensively and is considered a good practice in modern software development.
Another small thing that I would add about the flexibility of interfaces vs inheritance. Classes can only inherit from one other class, but they can implement multiple interfaces. Inheritance is great if you only need one "level" of additional functionality, but interfaces are great to share similar functionality among classes that may not have obvious similarities. A common example that I use is in video games. Your video game might have standard enemies, bosses, minibosses, etc. Most likely you will have each of these enemy types inherit from a single "Enemy" class to add some basic functionality such as HP or movement speed. Your game might also have objects such as crates or walls that inherit from a class called "WorldObject." Even though it may not be obvious, we may want to share functionality between the enemies and the world objects. What if we want the environment to be destructible so we can smash the crates? This is a great place to implement an interface. You can make an interface called 'IKillable" that is implemented by both the crates, and the enemy units. When the player reduces an enemy to 0HP the IKillable interface can remove the enemy from view, and when the player smashes the crate the IKillable interface can remove the crate from view. Even though hitting enemies and units might seem like two different actions, the process of taking them out of the playing field can recycle some of the code via an interface. Interfaces are also useful for making callbacks. You can place an instance of an interface in Class A, and then get a reference to that instance within Class B. Every time class A calls one of the interface's functions, class B will automatically be notified of the changes via the reference to Class A's interface object.
An example that really helped me that I use in the real-world is: Imagine you need to access some data, and it comes from a database...for now anyway. To do this, we create an IDataAccessor which has a method, let's call it Get(int id) and it takes an integer id. Now that you have an interface with one method signature, you create your implementation. We'll call it DatabaseDataAccessor (ignore the bad name). This implementation will retrieve the data from a database by implementing the IDataAccessor.Get(int id) method. Now say later you want to retrieve the data from another source, maybe a web service or a file. You simply need to create another implementation of the interface, call it FileDataAccessor and it can do its data retrieval from a file. Now you can use this new FileDataAccessor by injecting it into whatever is using it and you don't really need to make any other changes because it satisfies the contract of the implementation. This is a very simple example, and maybe not a great one, but it sort of helped me learn about interfaces on a basic level and I'm now starting to learn even more about them as I work with them more and more.
Interfaces specify a specific way that, whatever implements them, and whatever consumes them, should interact with one another. This lets you completely change out the functionality (or even the entire class) under the hood, without needing to worry about updating whatever's interacting with it at an interface level. It's okay if you don't quite understand their benefit yet, that comes with experience.
I can give a perspective on interfaces in terms of gamedev. So in the games I program I use interfaces fairly often, for instance when I want an object to be interactable by the player I use IInteractable. This could apply for a ladder, a chest, a npc. A ladder can be climbed, a chest can be opened, a npc may be a character... and so forth, they all serve a different purpose, yet they share the fact that they can be interacted with and react to it differently. An interface is nice to simply say that the class can do Interaction with the player, with an obligation for implement code for it. Without having to increase the complexity of your inheritance tree, or obscuring that the functionality is available behind inheritance. Also it's just a lot harder to add the functionality for different objects coming from a different base. Which is also why they are a nice alternative if inheritance is not possible at all due to closed source.
It's written by Jon Skeet, you've probably (even unknowingly) seen questions answered by him on Stack Overflow. He's a pretty prolific contributor to the C# community.
I have used it for exactly this. We had to support multiple years, so older years were using older versions of the same dependencies, and we needed to put all of them in the same folder to be loaded dynamically. Worked a treat.
C# 7.0 in a Nutshell is my personal fav c# book
I love head first
Just as a follow on here - I tackled this problem today, and did it like a stack. &amp;#x200B; Basically, I had a list of menus (all implementing an IMenu interface). Whenever you call one, it pauses if the game isn't paused, and then does it's merry menu stuff; then, when you click a sub-menu, it adds that one to the stack. And then the next. Any button press that would dismiss the menu dismisses the top item on the stack, rather than all of them or something like that. Fairly simple in the end, and because I did it through interfaces, my 'OnActivate' and 'Dismiss' methods can be customized to do anything that needs doing per menu type (at this point, generic and 'list of things' (what I call 'inventory') specific). I thought that it was a reasonable solution, but again - that's just a shot in the dark. It feels modular and easy to interact with. &amp;#x200B; I guess the criteria to judge on is really whether or not I can happily go about adding content to my game easily after the system is in place, or whether I need to spend ages doing a bunch of exceptions or adding if statements or things like that. This is really pretty plug'n'play now, like the level generation code I wrote earlier, and so I guess that feels like a successful outcome - I'm just not experienced enough to really know yet!
The best way to learn is by making projects. And a project where you have an end goal in mind is ideal. You do all the little tutorials out there, but the real learning is making a project, figuring things out when you get stuck, learning program flow. Then you will realise when its finished that you could have done it heaps better and different to get the same result, and you can use what you learned on your next project. If you have something in mind to make then try it
Interfaces are used for polymorphism, the idea that an object can be of more than one type. If you have two classes that implement the same interface, you can have a method that has the interface as in input parameter, and then that method will accept either of your classes that implement that interface as input. This prevents you from having two duplicate methods for each of your two classes. Interfaces, along with abstract classes which are also used for polymorphism, are important for large complex projects with lots of classes that benefit from being grouped together with the same interface/abstract class, but for smaller projects they are often not applicable.
Asking for an interface is a way of saying "I don't care what you give me, as long as it can do these things". (Generic constraints can do the same sort of thing, but are more complicated and come with some additional advantages and tradeoffs.)
You need to wrap Console.WriteLine in a foreach block to print out each title individually, it doesn't know how to handle the object you've given it. `foreach (var title in titles) { Console.WriteLine(title); }` This will always be the case when you have an IEnumerable&lt;string&gt; You might have to change your first line to `var config = Configuration.Default.WithDefaultLoader();` I did anyway.
Thanks! Also what difference does Configuration.Default.WithDefaultLoader()make? Because I have also seen stuff like .WithCss() and .WithJavaScript()
&gt;What made you decide to go with this book? Just curious. I'm in the same predicament and came across your post. I'm doing a free course on Udemy at the moment, have lots of YouTube vids bookmarked and have notes from an online course at a local college. My head is spinning from the number of books out there for beginners.
IF you're open to using new frameworks, check out [signalR](https://dotnet.microsoft.com/apps/aspnet/real-time). &amp;#x200B; While chat is often used as an example, you can do a whole lot more. Any time a user refreshes a web page to see new data, or the page implements Ajax long polling to retrieve new data, it's candidate for using SignalR. SignalR also enables completely new types of applications that require high frequency updates from the server, e.g. real-time gaming.
Probably because most people done understand what a contract is, that is to say “a list of requirements to be fulfilled”
One of my favorite questions to ask people I'm interviewing is "what's the difference between an Interface and an Abstract Class?" Almost nobody remembers, which shows you how commonly they're used. # What they have in common Either one is not instantiate-able on its own, you have to subclass it to make an instance. The point is that you can make a method (function) that takes the interface or abstract class as its input type, and all subclasses of that can be taken in by that method. This lets you program more easily when you have similar things you need to do similar functions. Like, if you have method Accelerate(vehicle foo) and you have interface vehicle it might have subclasses boat, plane, and car, but they can all accelerate. # How they're different An interface doesn't contain any code, it just specifies the names of inputs and some required functions. An abstract class can actually implement some functions (although you can override this implementation in subclasses).
Probably, but OP didn't specify what behavior they wanted other than display a form.
I’d do the MVC honestly, Xamarin was very frustrating for me when I first started. If you’re interested in delving into C# more, Xamarin will just create extra speed bumps.
You will learn mobile specific things along side C#. If you are doing Xamarin Forms you will learn the MVVM ways. That is how all the tutorials and examples are given as it's the right way for that. Plus there are most certainly enough examples to meet your basic goals. MVVM / Forms isn't a bad thing but that won't exactly translate to RESTful service experience. As a Xamarin Developer with RESTful experience I just don't see the direct translation but it might offer some insight. It's helpful to know different "stacks". Mobile will consume RESTful services. If this would deliver on satisfying your creativity then do it. You will learn a lot and learn about C# in a way you enjoy. Just remember to break your project down into obtainable goals. Keep the end goal in mind but make it obtainable through steps. Finally I'd suggest sticking with Forms if you don't have any native experience and want a simple CRUD application. Xamarin Native development is great but also requires a bit more knowledge about each platform. Also stick with MVVM pattern if you do Forms.
Your variable `data` doesn't exist outside of `Button2_Click`. If you want to access it in a different method, make it a class-level variable by declaring it outside of a method.
There are a lot of great responses here. I didn’t read though 100%, so I may be repeating here but I think it’s worth referring to concepts of cohesion and coupling, specifically coupling. Coupling refers to how classes interact with each other. Coupling can be described as “tight” or “loose”. Generally the goal is to have loose coupling. I won’t go into great detail on what constitutes loose coupling, there are plenty of resources out there that discuss the concept. Basically, you want to limit as much as possible what classes know about each other (so use few public members). The members of a class that are public and therefore meant to be consumed (called by other code) can be defined in an interface. The interface documents explicitly the minimum list of public members on the class. This is why people say an interface is a contract. Other code, potentially code you don’t own, depends on the public method signatures and properties in your class. By using an interface you’re having the compiler check to make sure you’ve included all the right stuff on your class that other classes expect to be able to call.
&gt; Also anything that relies on randomness. In most cases the "dependence" on randomness can be abstracted away using dependency injection and tested easily.
``` public interface IFly { void Fly(); } public class Parrot : Bird, IFly { } public class FlyingFish : Fish, ISwim, IFly { } public int Main() { var petey = new Parrot(); petey.Fly(); var flipper = new FlyingFish(); flipper.Swim(); flipper.Fly(); var flyingThings = new List&lt;IFly&gt;(); flyingThings.Add(petey); flyinfThings.Add(flipper); foreach (var thing in flyingThings) { thing.Fly(); } } ```
[removed]
I learned Xamarin for work last year after having been a C# dev for three years. Xamarin isn't bad, but it's difficult to get into (unless they've completely overhauled the documentation, which I doubt). I would recommend doing the MVC site first, and try Xamarin down the road.
It's important that the UI thread stays responsive during the recording of the measurement because the user is supposed to be able to stop it by a click on a button. &amp;#x200B; But I think with the first part of your answer your hit a problem of my implementation, I need to buffer the incoming data accordingly and I'm not sure how to do it well. How do I determine the right buffer size when I have no clue if the measurement will be with 1Hz for 3 seconds (so just 15 Bytes) or 1 hour with 20kHz (so 360MB)
Good points! I'll do a refactor over the next few days. Thanks!
Head First Design Patterns, probably the most valuable book a developper could read. With Clean Code.
I will sound really harsh but I think there is some sort of documentation. Also the library you use is open source. You can just read the source code. If I want to answer, I'll have to read the doc and the source. You can do it too ! :)
It took me a while to get interfaces properly cemented in my head. The lightbulb moment was when a tutorial I was reading actually used the interfaces in a loop. I much prefer simple, clear, coded examples over wordy explanations.
&gt; "we shouldn't be needing this guard since the result should fell within the wanted range, but just in case the result falls outside the wanted range, we loop around and do another pull." ... that's a reason to completely remove the loop, and add more unit tests. &gt; and might even dial back on "AggressiveInlining" You should, because I'm certain you were just guessing on adding it. Probably after your last post, and you thought "huh, sounds good I guess, just gonna spam it everywhere".
&gt; redditor for 5 years Also, once a beginner in Angular, but always an expert in C#. :-P And nowadays I'm not a beginner in Angular either, and I'm aware of how much of a shit framework it is and I stay far away from it. No money is worth the pain I had with that framework.
Pretty sure Wikipedia has an API.
The proper name for “class-level variable” is field, by the way (in C#).
Some comments are giving very clear explanations on what interfaces actually do. Now I think it could be interesting to explain how they can be used in a day to day programming job. At my company we use a lot of interfaces and very little inheritance. This is because we have testability in mind and want our services to be "mockable". For instance, let's say I want to unit-test the method `GetCustomerDetails` in my class `CustomerService`. This class has a dependency on some other service's method `GetOrdersByCustomerId` which will handily return the orders a customer made. In production (i.e. when the website runs for real users), the actual implementation of `GetOrdersByCustomerId` will be in `OrdersService` class which will be calling some other repository class, performing database calls etc. But during tests, I do not want this implementation to be called, right ? A basic rule in unit-testing is that my unit test must only actually execute what the `GetCustomerDetails` method does. In order to obtain this isolation, I need to be able to replace the behavior of `GetOrdersByCustomerId` so it returns a fake array I would define for my test; then I would be able to check in my assertions that `GetCustomerDetails` actually did set the orders in my returned customer object. This need for flexibility, i.e. being able to swap between production implementation and mock implementation is what drives the need for interfaces. `CustomerService` must not depend directly on `OrdersService`, but instead on _something_ which CAN get me orders from a customer id. I create an `IReturnOrdersFromACustomerId` interface, with one single method signature : ```csharp IEnumerable&lt;Order&gt; GetOrdersBeCustomerId(int customerId); ``` `OrdersService` must implement it, it is actually the real implementation. Now `CustomerService` will no longer depend on `OrdersService` but on `IReturnOrdersFromACustomerId` instead : `GetCustomerDetails` will be calling _something_ that returns orders. I don't want to know what the actual implementation is because I know it can change depending on the context. What this IS must not impact me but what it CAN do, will. `IReturnOrdersFromACustomerId` provides the strict minimum info I need to represent what either `OrdersService` or a mock can do, without forcing me to commit to one of the implementation. In fact, them being interchangeable is actually what I need ! Now, I can create a fake implementation of `GetOrdersBeCustomerId` based on my test need, e.g. I want to test when the customer never ordered anything : ```csharp public class FakeOrders : IReturnOrdersFromACustomerId { IEnumerable&lt;Order&gt; GetOrdersBeCustomerId(int customerId) { return new List&lt;Order&gt;(); } } ``` IRL, you would use a Mock framework but that would have complexified the explanation :) I hope this could bring a different way of explaining uses of interfaces !
Here's a comment I posted a while back with an example, hope it's helpful: A better way to think of interfaces is that they are "contracts" In your example you have public interface IShape { public void Draw(); public void Erase(); } public class Circle : IShape { public void Draw() { //draw a circle } public void Erase() { //erase a circle } } public class Square : IShape { public void Draw() { //draw a square } public void Erase() { //erase a square } } Now let's say you have a client (piece of code that consumes the above) public class Canvas { private IShape _shape; public Canvas(IShape shape) { _shape=shape; } void Run() { _shape.Draw(); // do other stuff _shape.Erase(); } } Canvas no longer cares about the *implementation* of your shapes. It only cares that the your shape classes have fulfilled their contract by implementing all methods, otherwise you can't compile. I'm still learning about this stuff, but I believe this is called inversion of control. Now if your shapes didn't implement IShape then Canvas couldn't use both or it would have to handle each class separately. IShape abstracts away the behavior of your shape classes so that whatever classes use it don't have to worry about every single implementation of IShape.
I really think the proposals here are overkill. We're talking about roughly 100 kb/s of data here. There is no need for complicated producer/consumer shenanigans. Unless there are serious timing complications that have not been mentioned here, I'd just fire up a background thread that constantly reads from the serial port and only writes to the file if a boolean flag is set by some click event handler. What you should *not*, under any circumstances do, is to read and write stuff directly in your UI thread. That's just asking for trouble.
If OP doesn't understand scopes, "class-level variable" may be easier to understand than just saying "make it a field."
I always try to explain it with a lightswitch. It's the simplest human-machine interface I know. For example, the light switch alone can do nothing; it still needs the implementation; the lights. Imagine you have a lot of different lights in your house. You don't want to know how much power each individual light needs, what circuit the utilize and generally how they work. You want to activate the light. And that's exactly what the interface is for: exposing functionality by abstracting complexity to a hidden layer. The interface simply describes what you can do, but not how. Just like the lightswitch, you don't know what's going on behind it, but you know that switching it will turn on the light - because that's what the interface describes. Even if you upgrade your lights in your house and swap a lot of the electronics, generally do a lot of work, the interface most of time will stay the same. You can have the best or the worst lamps in the history of lampmaking, but there'd still be a switch controlling it. For me it's not even an analogy, it's exactly the same. An interface in code and in reallife - they don't have many differences. So i'm sure that's why it was named this way :)
It's not really a complicated problem unless there are requirements that are not made explicit (like "absolutely no data may be collected after user clicks the 'stop' button). Just have a small buffer and write once or twice per second. That should happen in a background thread and not in the UI, though.
There’s not really any reason to use multithreading. Everything in the game happens at specific intervals so just go with that. Make a system that runs the code at specific intervals and if you don’t want to do anything at that moment count ticks until you want to do something. That’s how games usually work. They have a timer (for example 60Hz) and everything is done with that. Much simpler.
Thank you for your reply. Could you please elaborate more on your answer. How can I move the player, enemies, and bullet all simultaneously, because there is only one Console.Write? Sorry, I am a complete beginner and have a very little idea. If you can guide me to other similar game repos built on console, that would be great.
There is a Console.Clear() method (I think) where you can purge the whole screen. After that "redraw" everything. Alternatively, you can start with WinForms. Might be easier, might be harder.
It's a way of saying, "Hey, I can do this thing! don't worry about the details, just trust me" Imagine a database layer, instead of using SqlDatabaseProvider, you would use IDatabaseProvider, that way (theoretically) you could switch to a different database without breaking any code.
I know this is way off on a tangent, but why console? I appreciate a lot of people start coding with simple console apps, but jumping into a space invaders game isn't really a good fit. If you want to work with a game loop in C#, but still build from scratch and learn as you go, take a look at monogame. It's a pretty solid framework and works great for 2D sprite-based shooters which is exactly the kind of thing you need.
To be honest, this is a part of my test for the development job. Recruiter specifically asked me to use Console to build this game.
I pretty much came to .NET and C# through Xamarin. I was a developer previously for 20 years in other languages, perhaps I had a head start, but it's fine. Go for it. MVC is a framework just like Xamarin. You have to pick one, so might as well be the one you actually have a goal in. The only caveat I'd say is occasionally Xamarin can be a bit fiddly and throw up odd errors which aren't always in developer code, so you can spend a bit of time banging your head against the wall when actually it's not your fault but an underlying platform issue. But figuring stuff like that out is a valuable skill in itself.
I think redrawing the whole screen after clearing is a bit of an issue performance wise. And it's not premature optimisation, either. Console is terrible at refreshing the screen. I'd say it's more efficient to clear the bounding rectangle (write spaces in it?) and redraw in the next location.
- Don't close and reopen the file on every write. - Don't allocate a new buffer for every read. - Get rid of the async stuff in the handler, it serves no purpose as SerialPort.DataReceived will be invoked from a worker thread anyway, and will most likely just slow things down.
Have you ever played the old Space Invaders with the crappy refresh rate. I'd just sell it as a feature, not a bug. ;-)
I haven't really used .NET Core, so I can't judge that too much, but for .Net Framework, the System.Console class is pretty slow when it comes to writing text in the default console window (conhost). You can speed console output speed up dramatically if you use P/Invoke to the Kernel32 DLL's writeconsole methods (for example [writeconsoleoutputcharacter](https://docs.microsoft.com/en-us/windows/console/writeconsoleoutputcharacter)). https://www.pinvoke.net is a useful resource if you're unsure how to best translate datetypes. The game itself should probably be seen as a grid-based system, with each grid cell representing one console character. That way, things like collission would just be to check if a bullet is about to move to a grid cell occupied by an enemy. As for threading, I'd say one thread for input and one thread for game logic, in order to let the game progress without awaiting input.
What makes you think they would read the FAQ?
&gt;An interface doesn't contain any code, it just specifies the names of inputs and some required functions. This will change with C# 8.0, and it was never an important point of interfaces.
So games usually use a game loop. First you update everything then you draw everything and potentially wait if you're doing a fixed frame rate. Most games aim for 60 frames per second but for this you could likely get away with way less.
&gt; and it was never an important point of interfaces. It's only literally the *only* thing that makes an interface different from an abstract class, so if you make it so interfaces have code, you might as well just do away with interfaces and only have abstract classes.
It would at least make the best reply to the question into a one-liner.
&gt; It's only literally the only thing that makes an interface different from an abstract class Uhhh... no. Abstract classes can contain state, interfaces can not.
Ahh yeah, the classic recruitment coding challenges that you will never encounter in the real world. If I were the hiring manager, I'd probably be more inclined to hire you if you came back with "why would I do that?" Mind you, if I were the hiring manager I would set such a stupid task in the first place.
&gt; Uhhh... no. Abstract classes can contain state, interfaces can not. That's only true because abstract classes can contain code, interfaces cannot. If you make interfaces able to contain code, they can maintain state. I did language design professionally for over 4 years. I actually know the difference between an interface an an abstract class. I don't see a problem with eliminating interfaces - hell, the languages I built had neither - I just have a problem with calling it an interface when you allow it to have code.
What makes you think that would change anything? Literally the first response to this question was me pointing to a previous threat where this was discussed at lengths. https://www.reddit.com/r/csharp/comments/ca9u4o/can_someone_eli5_the_purpose_of_an_interface_for/et72nt8/
Run things in a loop while(!exit) { NonblockingKeyboardCheck(); MovePlayer(); MoveBullets(); CheckCollisions(); MoveEnemy(); UpdateScreen(); Sleep(x); }
Run things in a loop while(!exit) { NonblockingKeyboardCheck(); MovePlayer(); MoveBullets(); CheckCollisions(); MoveEnemy(); UpdateScreen(); Sleep(x); }
&gt; If you make interfaces able to contain code, they can maintain state. No, those two are not strictly related. You should check our DIM of C# 8.0.
&gt; Literally the first response to this question It depends on what you mean by "first". I sort comments by top, and I hadn't even seen that one.
&gt; No, those two are not strictly related. They are unless the language is really fucked up. It sounds like they're making some changes to C# that are distinctly not for the better. I may reluctantly have to build a compiler for my languages again. :/
Chronologically the first.
Then do both! You can be lazy and just copy this approach: [https://github.com/NikolayIT/CSharpConsoleGames](https://github.com/NikolayIT/CSharpConsoleGames/blob/master/PingPong/Program.cs) But when I hire developers I really want to see how they divided the problem in smaller tasks. I want to see how and why they used OO design. Did they use compositions / interfaces / dependency injection? Did they test their code? I also look into their coding style / "code cleanliless". Besides how they code, I want to see how they communicate. There is no rule that you are not allowed to ask your recruiter to find out why she/he wants the "Console" and what she/he wants to see in the code . Learn to implement what the customer really wants. ....sorry I'm getting off topic.
A bit more the design patterns route but my favourite is a plug, very simple interface that provides some service (current) that the implementation (appliance) can use. Then there are adaptors that change from one plug socket to another socket, or change the voltage. Even the names are pretty similar
At my place, WPF is used because it provides visualisations of warehousing logistics in real-time. These kind of interfaces don't need any of the hassle/quirks of HTML/CSS, they're designed for a very specific job.
If you enjoy punching yourself in the dick, then Xamarin is a great starting point.
I believe you need to declare your variable in the class first and then assign it in the button2 click event and finally show the variable in button click 3. This is known as scoping or scopes within c#
Do you feel that way about Web api or mvc? Lol
&gt; They are unless the language is really fucked up. Having a non-virtual method does not require you to store any state.
No, either of those are *much* easier to get started with than MVVM and all of the Xamarin nuances. Just getting the development tools set up for Xamarin is a frustrating nightmare, and good luck getting the app to work on more than one platform. If you're set on mobile, I'd look at Ionic or React Native.
&gt; ... that's a reason to completely remove the loop, and add more unit tests. Unit tests won't cut it, because it depends so much on the behavior of the floating point libraries. Formally we can prove that `(ulong) * 1.0/(ulong.MaxValue + 1)` will _not_ exceed 1, and will _not_ be negative. But a bug elsewhere can damage this assumption (especially if the floating point library was 'optimized' by doing bit-twiddling). Hence, this is a defensive test that guarantees the results to be within expected parameters. &gt; It's nothing exotic, it's here to stay. It would require conditional code paths to keep support for older frameworks, yes, but it's what would really bring performance. It's exotic from net452's point of view, and not needed. I am not for the maximum performance, but Just Enough™ performance. Which I _already_ got with my code without needing to do conditional code paths. Keeping code simple is a very important factor toward maintainability. And for me, maintainability &gt;&gt; utmost performance, especially if target performance had already been achieved. &gt; You should, because I'm certain you were just guessing on adding it. Probably after your last post, and you thought "huh, sounds good I guess, just gonna spam it everywhere". I'm not "spamming it everywhere", just where it might make sense. Yes, I might have been guessing, but a smart guess based on experience and understanding of program flow.
I’m not set on mobile, I think I’m going to just go the route of making the app I want as a rest service, getting more familiar with c# and web api is the main goal, so why should I deviate from that honestly. I just want to know enough to start contributing to my team. Thanks for the feedback!
&gt;WinForms. Might be easier, might be harder. Not really, if you clear the screen, it can rewrite it pretty fast.
&gt; It's exotic from net452's point of view An outdated framework from 2014, several major versions back... &gt; Yes, I might have been guessing, but a smart guess based on experience and understanding of program flow. Understanding of `AggressiveInlining` is also important, not only the program flow. `AggressiveInlining` can be deteriorate to the performance as well. It's not always an improvement.
Also, if you're looking for just an HTML parser, you can check out my project which I made for this exact purpose. I made a thread a few days ago about it: https://redd.it/c93md2 It's a lot less opinionated so you would have much fewer options to think about, but you'll also have to handle your navigation yourself (via HttpClient).
You realize .Net Framework is being replaced by Core, right? Core will evolve into ".Net 5" and seal its fate. https://devblogs.microsoft.com/dotnet/introducing-net-5/ It would be wise to get off the Framework wagon as soon as you can. If you need WinForms or otherwise check out Core 3's preview. Core 3 will reach GA in a few months.
You'd want to selectively overwrite lines by moving the cursor via `Console.SetCursorPosition()` [docs](https://docs.microsoft.com/en-us/dotnet/api/system.console.setcursorposition?view=netframework-4.8) and then overwriting the existing text.
\- Each of your object should have X and Y properties to know where they are. \- Each time your game loop fires (timer), you should draw your objects where they should appear (at their X and Y position) \- To make something move, just change X and Y. \- You may want to have XSpeed and YSpeed. \- Multithread is not necessary.
If the main goal is learning C#, I would not bother with any front end. You can create an API with simple crud functionality. Later, you can add authentication and maybe create a consumer app that uses your API.
"is being" and "will" means "not yet". And the fact is that a LOT of software currently runs using .Net Framework 4.5.2. And will still run for the foreseeable future. After all, for the things I put in in my library, I'm not using any features that will be deprecated/obsoleted any time soon.
Thanks for your comment. If I want to run the game on 30FPS, what should be the timer for the loop?
Why don't you use lambdas with dot net core? We are using it, and it behaves just like a website.
I've never done a console game. Usually, you just run at maximum FPS, meaning that your game loop is not driven by a timer, but a never ending while loop. Doing this, you need to manage the time difference between the last time you drew the screen to make the game run at a fixed speed. &amp;#x200B; The Timer in C# is set using milliseconds. 333 ms will result in something close to 30 FPS. Play around with this value until you find the best value. You can even make the game run faster (higher levels, power ups, etc) by lowering this value.
Then your timer should fire 30 times a second. That would be about once every 33 milliseconds.
&gt; file or are you only able to read it? If the former is possible, you should look into XML serialization. The idea is that you can turn a class Hi. Super late reply but thanks alot for the tips regarding the use of var. &amp;#x200B; I'll have a read into what you have said. &amp;#x200B; I've since created a few more applications, so I'll make post once I've got them polished using some of the feedback in this thread.
I don't get it, are you opposed to recruiter quizzes in general, or just this example? Both are legitimate positions, but this task seems reasonable to me. Using Console is going to be no harder than graphics primitives - and probably easier.
Sure, just additional information.
333 ms would be 3 FPS. 33.33 will result in about 30 FPS.
Right. My bad. Looks like I can't divide.
AngleSharp is great - I'm always flummoxed by people still breaking their ass on HtmlAgilityPack which is ancient and only supports awful XPath notation. I'm not sure if AngleSharp is actively developed anymore, but with the advent of spans, UTF8 strings and Pipelines - web scraping could probably get much much cheaper &amp; faster in .NET
Recruiting coding challenges aren't strictly about keeping it "real world". Just because your presentation layer is the console doesn't mean you can't demonstrate your skill and expertise as a developer. Are you sticking to best practices? Using the right data structures? Writing spaghetti or clean, abstracted code? And since it is the console, and many people don't have deep experience in it, are you willing to learn and apply what you already know in a new context? All of these are qualities you want in a new team member, but if you as a candidate feel like this is a bullshit exercise... choose not to apply. The company has probably thought this exercise through, and knows what it wants out of it. To push back on it, is fairly insulting, and I doubt I'd entertain someone who took that route.
I'm currently one of those people breaking their ass with HAP+xpath. I don't know anything about how to write CSS (which is what I always hear about being the strong suit of AngleSharp) and I'm not scraping CSS. Can you sell me on AngleSharp?
This is a fairly well worn tweet, but it sort of sums up my feelings about recruiter challenges: https://twitter.com/mxcl/status/608682016205344768?s=20 If I do ask for a coding test, I usually do an hour of pair programming with the candidate on a relevant exercise based on something my team has been working on recently.
Understood, you're just opposed to these kinds of quizzes. Fair complaint. I think whiteboard exercises are really useful for a certain kind of interrogation, but lousy for others. Lots of people freeze up when asked to perform in front of a group, but are fine talking through their problem solving strategies.
I wouldn't say completely opposed - I think if they work for others that's great. They're just not something I find works for me.
there are libraries made for making console applications. for something as simple as space invaders, these could be useful: gui.cs, curses sharp, etc. curses is a linux CLI UI library, so searching ".net curses" would show some more. if you want to create your own, its also very simple to do. you can look at my project where i was playing with creating a windows console graphics engine (not very performant). https://github.com/ckarcz/GraphicsEngine/tree/master/GraphicsEngine/Graphics IConsoleWindow is the contract to the console window, and there are two implementations: the .net console API, and the win32 API. most games use a sort of Engine' pattern, where there is loop that does 1. Update Scene Logic (play location, etc) 2. Render Scene (draw the updated state of the game/scene). https://github.com/ckarcz/GraphicsEngine/blob/master/GraphicsEngine/Engine/ConsoleEngine.cs
Both of your explanations helped me understand interfaces way better than any of my college professors could, thanks.
You might need an Enemies class. A container class for all your enemies (minus the flying saucer). When one side of the block of enemies hits the side, they *all* change direction. And the specific enemies that determine that is going to change as you cut through them.
You can't share the settings, so you have to manually make sure every dev uses the same settings. Better is to use FxCop and StyleCop analyzers, as their settings are committed in your sscs. But there are plenty of other analyzers too.
Use CursesSharp library instead of Console.Write
I have used nDepend for this once. It's an expensive product but depending on how important it is, you could use that as a build step in your build pipeline. I've created a blog post about this: [Code Analysis with nDepend](https://blog.johnverbiest.be/code/code%20analysis/2019/05/13/static-code-analysis-with-ndepend/) If you need any help or more info, just shout out to me
There is an excellent course on Udemy that costs just $9.95 USD and walks you through the basics.... https://www.udemy.com/csharp-tutorial-for-beginners/learn/lecture/2169336?start=15#overview I recommend it.
Instead of multi-threading, I suggest you read a bit about the Game Loop: [http://gameprogrammingpatterns.com/game-loop.html](http://gameprogrammingpatterns.com/game-loop.html)
Say you have two classes that you want to be able to talk to each other. They might be on two completely different computers talking over the internet. An interface gives you a standardized way of letting one class initiate communication to the class that has the interface. So you could completely rewrite the class that has the interface, but keep the interface unchanged (the function names and signatures stay the same) and the other class (the one that initiates contact, the one without the interface) doesn't have to be updated to account for any new changes. Yes, you could do it without the interface, but the interface forces you to adhere to the standard, and many classes are set up to communicate with the interface itself rather than the class that the interface is used on. It's basically a method of enforcing standardization.
this was posted to r/coolgithubprojects recently https://github.com/liammcd/invadescii it's C, but maybe it can help you.
I don't know what would be best in your case, but personally I use Entity Framework. It's a fantastic tool that basically scans selected database objects (tables, views, functions, stored procedures) and creates C# classes that mimic their structure. You can then use those classes (along with EF tools) to grab data out of the database and it's already in Collection objects that have the same structure as your DB tables (or some other structure if you want. You'll want to learn how to do Anonymous Types for this if you don't already). You can do more complex things queries like joins and group bys using a system called LINQ. This is a collection of functions specifically for querying data and can be used either with queries that are similar (although not identical) to standard SQL queries, or with lambda function. They both work the same under the hood so use whichever one you feel more comfortable with.
Along with other people's advice to not use multithreading, probably the strongest argument against using it in my opinion is the concept of determinism. A bullet being fired by an IFighter will likely want to be updated on the first set of updates in your game loops (once again, as others have suggested). If you're doing things multithreaded, there is a possibility this behavior becomes at the pleasure of the operating system and not a set "this, then that" (determinism) behavior. &amp;#x200B; Also, AFAIK, System.Console isn't fancy enough to support what you're wanting to do. You'll probably want to look into a 2D graphics library and start off by drawing your game objects as colored squares or something.
Pick your favorite simple arcade game and create a clone of it. Put in as much detail as you want and don't feel you need to limit yourself to the game as your remember it. Change it around any way you like.
&gt; You can't share the settings ... huh? Sure you can share the settings. Create an appropriate `.ruleset` file and reference it in your project file.
We're mainly trying to find something that comes with vs but thanks I'll look into this
Than k yo so much Hypersapien , I really appreciate it !
 ☜(ﾟヮﾟ☜)
As a note... I excluded pages that only had fixed typos and/or minor changes. Although important for the overall quality, there are no points in highlighting those.
FxCop and other Roslyn Analyzer are what you're looking for. But be aware: Those are **very opinionated** and required additional configuration. Don't just blindly accept the default configurations.
I recommend starting here: https://github.com/dotnet/roslyn-analyzers
Yeah it sounds like you may need a bit more training on SoC and dependency injection. Essentially, any "dependence" on anything can be abstracted away and injected. That will allow you to control the behavior of that dependency so that you can test the dependent class separately of the dependency. It takes some practice when you're first drawing those lines, but it's much better in the end. In fact encountering scenarios as you described should be your first tell that you could use a refactor. It's super rare that something can't be refactored to be testable
The IDE warnings can't be shared though...
What are "IDE warnings" for you?
All the warnings prefixed with IDE (instead of CA)
Isn't FxCop the same as the code analysis these days?
When teaching yourself anything, not just C#, you need to pick a topic that you think would be easy, like, really easy, and do it. Start with hello world. I'm serious. Setting up a Dev environment and running the code is step 1 and doing something boring like that is a good way to do it. Then, if you have some programming experience, pick a project you've already done in another language and do it again in C#. Baby steps, baby steps! I like the card game idea, but I would shoot for even easier than that. You need to be honest with where you are as a programmer and start below that bar. If you're learning C# for specific reasons, look into what they are and pick an easy easy project to do. YouTube has a million intro projects to work along with and poking at them is also a great way to learn. Tl;Dr: Start easy, watch YouTube, set your bar lower than you think. Baby steps.
I think a great example on why an interface is used is to look at all the extensions in the System.Linq namespace. They all use IEnumerable&lt;T&gt;. Essentially ANY class that implements IEnumerable&lt;T&gt; can be used in Linq. This is why things like Lists, Collections, Dictionaries, Arrays, etc. all work with Linq. If you made your own class that implemented IEnumerable&lt;T&gt;, then it, too, can work with any System.Linq method. You create an interface and many classes that implement that interface, then, in theory, any method that takes that interface type as an argument, could allow any class that implemented that interface to be used in that method. The method doesn't need to know how the instance of the class works, or even where it came from, or how it was defined, except that it supports a specific ***behavior***.
FxCop and StyleCop are code analyzers and provide more rules than the built-in ones
My understanding that it's an attempt to replicate the traits feature in other languages such as rust. Traits are similar to interfaces in that they show that a class can be used in a particular way, much like how IComparable says that your class will have comparison operations. The difference is that with traits you can supply a default implementation that is only overriden when necessary - for instance, you might be happy for an equality check to always be by reference, except for a particular class where a full property equivalence check is required.
But how does it differ to an abstract class?
In sharp this is particularly useful to know as you may 'inherit' from two interfaces that have the same method signature but different return values. CSharp has special syntax to hell resolve the ambiguity. A place you run into this a lot, sadly, is with .NET's collection interfaces. Particularly with the 'Add' and 'Remove' methods. Sometimes they return void sometimes they return booleans. Since a few of them actually get integrated into the semantics of the language, it is often desired to integrate with multiple collection interfaces with different return values for their adds and removes. This is something you cannot easily accomplish with an abstract class due to only being able to inherit from one base.
They are not the same thing unfortunately. A property is simply not a field
You can implement many of them (unlike classes which have a single parent class). E.g. you could have default implementations of both IEnumerable and IComparable, but if they were abstract classes, you wouldn't be able to use both of them.
First off I would suggest you separate your game loop / update loop and your draw loop. Maintain a list of all game objects. Each object should have a Position (X an Y), Rotation (angle around the Z axis), Scale (X an Y), an Update method, and a Draw method. Go through your list and call update on all of your objects. This is where game logic happens. Check for inputs and move, are there any collisions, what is health, etc... Once your simulation step above is complete you can go through your Draw loop by traversing the same list and calling Draw(). This should handle painting your current state to the screen. You can also have fields to hold the draw depth so you can order things how you want. Or you can just draw them in what ever order you need. If you need to add a new game objects, just instantiate then and as to the list. If you need to destroy them just remove then from the list. Also, games update on time. Notice how it doesn't matter how crappy your computer is, the game still will move units at units per second. It might not Draw them smooth but the positions are accurate. The is accomplished by having all movements calculated by the previous frames time to run the loop. If you need to move at one unit per second and you know the last frame took 0.016 seconds you can just multiply the desired units per second times the previous frames time. So just create a DateTime.now before your loop and after your loop. Subtract the first from the second to get your frame time. Press that into your update or just update a static car to hold it for the next frame. By calculating that frame time you can and achieve a desired frame time. If you want 60 updates per second (60Hz =~16.6ms) and your frame took 10ms to run, you can sleep for the remaining 6.6ms. Now that you have separate simulation (Update loop) steps and draw steps you can call them as you see fit. You could also have all of your simulation running on a background thread and your main thread can just handle the Draw. The should also allow you to move from console app easier as you only need to change how your screen draws and not the logic.
Thenewboston is doing C#? I used a few of his videos learning C++ over 5 years ago and that guy saved my butt!
It's (almost) normal multiple inheritance. The only trick is that instead of fields you store state in a ConditionalWeakTable.
A property is just short hand notation for some methods (one in this case). Interfaces can’t specify fields at all.
Huh? Argh, they can store state? That’s... a bit horrifying.
Under the hood, there are "fields" and "properties". Anything with a getter and/or setter is a "property". If it doesn't have that it is a "field" and completely works different in the IL generated from the compiler. Since the interface defines "Bar" with a setter, it is a property, so a property must be used to satisfy the interface implementation in the class.
People will swear up and down that they can't. But the truth of the matter is that people will try anyways. I keep beating the drum about the ConditionalWeakTable not because I think it's good idea. Rather, because if I don't people will just use a normal dictionary and leak memory.
`readonly` is a modifier that applies to fields, and properties are actually one or two (i. e. a `get` and/or a `set`) methods with special names that are bundled together with special syntax to *look* like a field. On the upside, you *can* use an autoproperty for this, and an autoproperty with no `set` will get you to pretty much the same place: public class Foo : IFoo { // Yep! public readonly object Bar { get; } } Interfaces aren't allowed to declare storage (that is, fields), but they can declare properties, which are abstractions that *may* involve storage.
Right :).
Also, *if I have this correctly*, if your class implements, for example, two interfaces with the same method name/signature, the default implementation used is based on which interface is expected at runtime. example public interface IOne { void Thing() { // Do something } } public interface IOne { void Thing() { // Do something completely different } } public class MyClass: IOne, ITwo { // do not provide implmentation for either IOne.Thing() or ITwo,Thing() } public static class Program() { var x = new MyClass(); (x as IOne).Thing(); // Do something (x as ITwo).Thing(); // Do something completely different }
This is my understanding as well
I've never seen a use-case it that couldn't be handled with an extension method and optional interface. For example, the `Enumerable.Count()` extension method can be overridden by implementing `ICollection&lt;T&gt;`.
Programmatically check the native resolution of the display on load and set the form size to that resolution. You should also remove form borders if you haven't already.
Not so fun fact: .NET Framework will not support this feature. This means that either .NET Standard does not support it OR .NET Standard 3.x doesn't include .NET Framework.
Just because you can write it in a single line doesn't mean you should. I can't tell you how many times I felt I was a genius by writing a shit ton in one single line only to have to break it up to debug.
Good effort. It looks like a lot of work has been done, and you've done a butt load too :)
From what I found this book has a considerable number of people who stated that after many attempts to delve into learning c# and not being successful they found this book. They say this book presents the information in an easy to take in way and is a great starting point. That's what made me choose this to get started. I've also added a couple others in these comments for when I am finished with it.
And `x.Thing()` won't compile because the method was never explicitly added to the classes public interface.
If I decide to get a book I'll be getting it too actually. I did some research and it's got quite good reviews.
I remember our last discussion on this, and largely agree. I wonder why something so \*very\* niche (and controversial) has been pushed in lieu of something like the equivalent of \`typedef\` in C++ but with strong compiler checks. I'd love to alias-away an \`int\` to something like \`EntityId\` and have the compiler error if I try to use them interchangeably, but I couldn't see if that was even in a roadmap....
I'll be honest with you... it's partly a bunch of bash scripts and git commands tied together with duct tape and a bit of manual work. Wasn't easy but I'm happy that you like it!
Honestly the Console is going to be a tough challenge. You can use Console.Clear to empty the field and then redraw everything pretty quickly, but it's gonna be janky. Might fit the space invaders theme just fine though. You should be able to use a multi-dimensional array to track the (x,y) positions of bullets, enemies, etc. The real challenge in the console is going to be the fact that your entire game is going to basically be one big string parsing exercise, and the fact that you can't lock the console's dimensions (at least that I know of.) Users can scale the window up or down at any time which will throw the dimensions of your playing field off. You could maybe check the size on every refresh of the screen and reset it to the default, but I still think it will give a window where things can be screwed up big time.
&gt; I'd love to alias-away an `int` to something like `EntityId` Yes please.
[Automation](https://imgs.xkcd.com/comics/automation.png) ;)
Seems to be [this repo](https://github.com/AngleSharp/AngleSharp.Samples)
What you need is an OR/M tool. There's several out there. EF (entity framework) being the most popular. If you like to use SQL queries a lot, there's dapper. If it's an MVC project, there's a lot of built in scaffolding for EF which makes life more easier.
The thing is, there is a separate proposal for "shapes" that addresses the need for traits. https://www.infoq.com/news/2017/04/DotNet-Type-Classes/
It's not a big problem, I think, if u have a .net standart application migrating to .net core or back to .net framework won't be hard.
Thank you for condensing this information for us.
Typo public object Bar { get; }
But I don't think that .net standard 3.x doesn't include .net framework, it will be kinda strange, cause .net standard was projected to be intersection of core and framework. Or am I wrong?
This is where VB's syntax is interesting: public readonly Bar as object public readonly property Bar as object As you can see from the example above, the difference between a field and an auto-property is the `property` keyword. The rest of the line remains the same.
Last I checked, the question was still being debated by Microsoft.
The documentation for all things .NET has really improved over the last year or so (and I thought it was pretty good before). One thing I'd really like to see (maybe I just haven't found it?) is a landing page to find a roadmap or "coming soon" list of big efforts underway across all of .NET. Just to pick a few examples, Blazor, the build/publish improvements in .NET Core 3.0 (single-file-executable, ready to run, tiered compilation) and automated ML. I have to go to three different places to get overviews of the work going on there and that's if I know what to look for... discovering what's going on can be really tough across the many teams with different release schedules. There are so many projects going on that I'd like to follow it sometimes feels like drinking from a firehose bookmarking and scanning across the different projects' github sites/issues, documentation, etc... And each group seems to have adopted their own format or location for how to track upcoming work (some easier to find and digest than others). Maybe a bullet-point under each section [here](https://docs.microsoft.com/en-us/dotnet/) titled something like "Coming Soon" would do the trick? I'm not looking for any more detail than what's being provided and it doesn't have to include every change coming up, just the big ticket items. It would be really nice if once a month when I have the thought "I wonder what new stuff is coming soon" I could hit a single page to start figuring that out. Anyway, thanks and keep up the good work.
I'd love to see them rewrite the Identity docs, the standard seems to change every few months.
But isn't that what default interface implementation in c#8.0 is for? So interfaces defined with an implementation have an implementation in the class if the class doesn't explicitly provide an implementation for it (again, the interface member must have an default implementation in the interface)?
Oh! This is a great idea! Let me take that feedback and bring it to the docs team! Your "Coming Soon" section is great! I'll send them a link to your comments!
Yep. Thank you for the correction!
I think the best first thing to do is abandon the concept of using threads at all. It is always best to write something in a way that is easy to understand first, *then* start changing it to make it perform better if it isn't fast enough. That way, when it's broken, your code is in an easy-to-understand state. Games are a good lesson in separation of concerns, but no one really preaches them as such. What I mean is every game loop looks like this: * For each frame: * Handle user input. * Update the game's state. * Render the game's state. What is "the game's state"? It's all the data about the game. The score. The player's location. The invaders and their properties such as direction and location. The bullets. It's nice to keep it all in one tidy place, because this is what rendering looks like: void Render(GameState state) That's it. Render's job is to put one frame on the screen, and the game state is one frame. That means the screen is a View and the game state is its Model, in architectural terms. It's the game loop's job to look sort of like this: GameState HandleFrame(GameState oldState) { // Handle user input... // Do invader/bullet AI... // Determine if the game is over... return new GameState(...); } So every game's "loop" can look like this: while (true) { var oldState = State; State = HandleFrame(oldState); Render(State); } If you add threads to this, it gets tricky. To keep your game state sane, you need to know what order everything updates. That way you can be sure that everything is in the "right" position before you check if bullets have hit anything. If they happen in different orders every frame, you'll see that sometimes bullets that should hit miss, or sometimes invaders get killed when they shouldn't, or sometimes the player loses when they shouldn't. It's not a good idea. So you'd have to write code to make sure your threads stay in sync and run in a particular order. But that raises a question: if you're going to write code to ensure the threads never run at the same time and always run in one order, why bother with threads at all? Odds are having threads will make your program harder to write *and* slower. "Real" game engines get a timestamp every frame. They look at how much time has passed and decide how much to update. While exceptionally large and complex games will use threads as part of this, they have crazypants requirements and you can worry about that when you're trying to write games at that level. As is, we know Space Invaders ran on 8-bit microcontrollers in the 1970s so we have plenty of computing power. Anyway, the idea is to pick your framerate. Let's say we want 60fps. That means every time 0.06s passes, we want to update a frame. If the system's really bogged down, we might get back an odd amount like 0.15ms. Now we know 2 frames have passed, so unless we want the game to look like it slowed down, we have to simulate multiples! We also have to mind the extra .03ms there. Some games use coordinate-based movement in a way that you can logically render "half a frame" worth of movement. But our space invaders move in a grid and so will our player, so it doesn't make as much sense. But also think about Space Invaders: not everything updates every frame. The bullets move faster than the invaders themselves. In the real game, the bullets move in smaller pixel amounts while the invaders teleport around. So there's definitely a concept of "not everything gets updated every frame". So a pseudocode game loop for your game might look like: * If the game isn't over: * Get a timestamp. * If it has been &gt;= 0.06s since the last frame: * Figure out how many frames have passed. * For each frame: * Determine what keys have been pressed. * Update the game state: * Update each bullet's location if they should move. * Update each invader's location if they should move. * Update the player ship's location. * Check if the player bullet and invaders are in the same place and if so: * Kill the invader. * Remove the bullet. * Check if any invader bullet and the player ship are in the same place and if so: * The game is over. * Remove any out-of-bounds bullets. * If the invaders are on the player's row, the game is over. * Render: * Clear the screen. * Draw the score line. * Draw each row, putting a character where the bullets and invaders are. * Draw the player's ship. Update, THEN draw. You can't draw WHILE you are updating. That wastes time in almost all circumstances. For example, if you draw every bullet as soon as you move it, you have to check if it's out of bounds earlier or risk seeing flashes of out-of-bounds bullets on the screen. It's easier to get the input, use it to update the state, then draw the state. Keep it simple.
I have already done that. It scales perfectly on win10, but on the raspi it does not scale at all. It displays exactly like in the VS Designer .
I am personally learning by doing. I thought of a project I would like to do, set everything up and then worked myself through tutorials or just single google searches for my specific needs I have. I think I am going forward pretty decent on my learning :D
Interesting. /u/Vidyogamasta has an excellent answer, I thought it would be too detailed for someone who just heard about the concept.
.net framework will not implement standard 3.x ever. The future is .NET 5. There is no more .net core or .net framework after .net core 3.0 and framework 4.8. just .NET 5 which is essentially core becoming the main runtime. 5 will also incorporate Mono. There will be 1 main run time, meaning the standard becomes less important
Same. I recently started in c#, and trying to build a web scraper is kinda like a first project for me. I have been sold on AngleSharp by most people on the csharp sub, but it is still a bit hard to grasp for me since there isn't like a set or fully laid out documentation for it, so it is a bit vague. How did you familiarize yourself with AngleSharp and become good at it?
link is bad. have to log in first.
I fixed it... https://www.udemy.com/csharp-tutorial-for-beginners/
great- its mosh so i highly recommend it!
What frameworks would you recommend these days, obviously just asking for your opinion ?
I have good experience with ReactJS. I have heard good things about VueJS, but haven't had a chance to use it myself yet.
You can try some serial number system with an activation key based on asymmetric encryption. (Just keep the private key secure) And have a simple web service that keeps track on registrations. You should be able to code something like this in one or two days if you know what you are doing.
I would not recommend Xamarin as a beginner. It looks great when you start but when you want to get the details right you run into roadblocks. Try something with WPF for Windows. You can apply the same design patterns you would use in Xamarin, like MVVM (I would recommand ReactiveUI to support this)
The issue with interfaces without default methods is that any library that offers interfaces can never ever add anything to existing interfaces without breaking the code for all users of the library. So if you wanted to add functionality you'd have to create an all new interface, but then you'd have to support overloads for multiple interfaces on all receiving methods. It gets very messy very fast. With default interface methods new methods can be added to library interfaces without breaking the code of all library users. Even if the default method just throws a NotImplementedException, it would at least compile and users of the interface would only have to implement the method if they wanted to use the new functionality.
Really depends what your building. Is it an offline app. Is it a webservice. How do you want to monitor use of license?
Thanks for sharing , I am using Vue for side projects(Vue cli/UI is great) and about half lway through learning react... Just asking as I was offered some contract work using angular and it seems a tad verbose(just looking at this project), what in your opinion are the worst aspects of angular ?
How are you setting the fullscreen? Did you try doing this in your `Shown` event? this.Bounds = Screen.PrimaryScreen.Bounds
No benchmarks for a library that's intended for higher performance over the library it's being compared to? The first example that is transformed into 5 selects makes me wonder.
I know this is a post about dotnet but I've been trying to get a working azure devops ui extension going where I add a page to the build summary and I just can't find any modern tutorial, guidance or docs about it. All I can find are instructionless and incomplete 'samples' that haven't been maintained and do stuff like check in the azure devops sdk's and node_modules folders. I don't suppose you are in contact with anyone on the team for those docs?
Thank you very much for this summary! It's a great opportunity to see all these changes which you are doing.
Me personally? No. My teammates includes Donovan Brown, Damian Brady, Abel Wang, and Jessica Dean among others. I'll link them your comment and see what they come up with.
Ahh, I was thinking "wait, you can apply readonly to a public property??"
This is awesome!! Thanks for putting this together. I’ll def like these once a month.
You took me for a whirl there! :o Instead of an anonymous backing field for the property I could just have a read-only one. Just can't enforce that behavior.
well the json you posted is not an array, it has multiple properties with each property being an array. Looks like you are trying to deserialize that into a *single* array, which will not work.
If you aren't already, you should use Visual Studio as your development environment. It has an awesome feature called Intellisense, where you it will suggest code to you as you type (not intrusively, I might add)
I'll start googling that route. Thank you for pointing me in a direction.
It looks like it can deserialize into a **Dictionary&lt;string, double\[\]&gt;** or **Dictionary&lt;string, decimal\[\]&gt;**
Awesome! Thanks :)
Start off really simple (first 6 digits of sha hash of email address+salt). Having a keygen posted to Usenet is a nice problem to have.. if it goes there , spend money to solve the problems.
Didnt really have much say in the matter. Our client wanted js since thats what their devs use in house, but I did push for Typescript, which has been wonderful coming from C#. And while I might have initially opted for .net core I think now having worked in TS and knowing that .net core has some of the slower(slowest?) cold boot times with lambdas, I'm pretty happy with the TS+node stack.
WRITE MORE CODES.
&gt; what in your opinion are the worst aspects of angular ? - The dependency on classes. - The use of magic-string selectors. - The binding system. - Their template system. - Angular Forms. - Angular Forms. - The verbosity of literally everything.
It will work if you remove the brackets from the class type you are deserializing to. The brackets imply it’s supposed to be creating an array of that class whereas the json you provided is just one instance of that class, not an array. Also, you’ll want to remove the brackets from the class definitions for the time stamp and value properties. Again, you are telling the code to expect an array but instead you are returning single instances of an item (albeit a list of them). Finally, you will want to update the definition for timestamp to an int64 since those values in your example Json data will overflow an int32.
I can do all the coding but I am not familiar with we services. Thanks for suggesting
It's an online app and monitoring should also be done online
This was solved with extension methods, but they have some limitations.
Check the form's property 'MaximumSize'.
Thanks for chiming in. I found a site that generates the code necessary to parse the JSON.
Thanks for chiming in. I found a site that generates the code necessary to parse the JSON.
&gt; Even if the default method just throws a NotImplementedException, it would at least compile and users of the interface would only have to implement the method if they wanted to use the new functionality. No. Just no. Users of the interface don't implement the method. Users of the interface use the method, so you are just littering the code with landmines for them to trigger. You've made the interface much, much harder to use because previously working classes are now violating the interface's contract. And there is no way to see which methods are broken by looking at the code. For implementers of your interface, there is no warning from the compiler that a method is missing. So you could go for several revisions without realizing that your customers are pissed at you. You are promoting my worst-case scenario for this feature as an advantage.
Sorry about that. I am not entirely sure what problem you're attempting to solve, however. `readonly`, as a storage modifier, is basically an implementation detail. If you're worried about implementors not filling out your interface correctly, you may want to take a closer look at how you're using the interface. If nothing else, documentation would at least express your intent.
If you're deploying to a Linux server environment, I expect that you can easily run your code in that environment while still in the debugger.
In general, I find the tools and UI on Linux to be easier than Windows. I use four virtual desktops (Control-F1 through F4), plus I know the various text manipulation tools (sed, grep) that I use for doing things. Yeah, I could use an IDE for that, but it just works the way I want to. On the server side, Linux runs well on lower powered hardware for longer. So it is reasonable to have a 10-15 year old server that has gotten patches because it just works. Also, it is easier to lock down for me and everything is scriptable. In general, I prefer Linux because I'm comfortable with it and I like the tooling. Also, most of my focus is backend and web, so I don't need to concern myself with GUI. The thing I miss is Resharper but I'm saving up for Rider which also works out pretty well. Or I use Visual Studio Code.
You can start an extra thread, the things I described should not be done in the UI thread because then basically your app hangs. You can try to use a buffer of 5000 bytes. And use timeouts for when the rate is low. You will need to check for partial packets, since the last sample might not be received entirely yet.
Every argument for coding in a Mac applies to Linux. For example: 1) The programs you develop on Linux and Mac will work well in a cloud server environment without you doing extra checks or taking extra precautions. This is big since Linux hosting is cheap and everywhere. 2) Front end coding is easier in Linux and Mac since the automation tools "work out of the box" in the standard way. Nearly every single Javascript tool is designed with Mac and Linux in mind first. 3) Much of the workflow on Linux and Mac and tools will be the same... so if you can't afford or do not want to pay the Apple premium the Linux environment will do the job nicely. 4) You have more control over what runs on Linux. For example, you can tailor your programs environment to just have the bare processes needed to boot so your program can use more resources and not have to fight with an antivirus program or any other conflicting application. 5) You can test exactly what will run on the server since you control your coding environment more in Linux. You can create a custom image and deploy it to the cloud without purchasing additional licenses. This is a common practice. 6) Again with the internet... the internet runs on Linux for the most part. Knowing a Linux environment well allows you lots of control and comfort in troubleshooting future problems. The "cloud" is often just a bunch of virtual Linux servers. 7) If you like coding robotics, hardware, small devices, etc... the open source nature of Linux allows you to code whatever you want on the device without any trouble beyond knowing how and deploy it without worry. This is another big win. 8) A C# program developed in Linux with .NET Core or Mono works in Mac and Windows too.
no coding reasons. I assume all the preferences are related to personal opinions about which SO you prefer. for deploying I have to say that do it in linux was easier than expected, but coding... nothing more simple than windows
Because most of the internet runs on it, and it will be the place where your code ends up being deployed. Because the toolchains and software for linux are very mature, and you typically only have to learn how to do something once. Because it gives you more control over your computer. Because all of the fun programming toys come out for it first.
The biggest reason for it being a big deal is that it offers a considerable cost savings when it comes to hosting things like web applications. A Windows install has a license cost and relatively speaking has a huge foot print in terms of server resources. A Windows server core install with no GUI will take about 10 GB. Linux on the other hand can run you 500 MB give or take a bit depending upon which distro and options you throw on. We’re headed toward/ are in a world where people no longer house their web servers on premises. They’re off in the cloud and those cloud providers charge you for disk space. The less you use the smaller your monthly bill and the higher your profits.
I personally use Linux on my home computer, but that's rare. I'll give a few reasons why, professionally, you might want to know Linux: 1. It's cheaper. If your company is using virtualization to run many VM images as part of your infrastructure, it is cheaper to run Linux VMs than Windows VMs. This is true whether you're running the images as part of your on-premises infrastructure or if you're running VMs in a hosted/cloud environment. Also it's cheaper if all your developer machines are running linux instead of needing a windows license for every developer, every tester, etc. 2. It's more well-adapted to programming, usually (though not for C#/.NET, at least until .NET Core 3.0, hopefully). If you're a C# coder you want VisualStudio (which, again, plays into the "it's cheaper" argument above) but for almost every other programming language ecosystem the tooling and features are better on Linux. Python and Ruby, for example, are second-class citizens on Windows but are much more natural, first-class members on Linux and the tooling shows (some of this situation has improved over the years, but the difference is still obvious to a daily user of these things). 3. For the reasons listed above, a lot of infrastructural software is written on Linux, better tested on Linux, better supported on Linux. Things like Kafka, RabbitMQ, Docker, PostgreSQL, MySql, NginX, ElasticSearch, etc all only work reliably on Linux or work significantly better over there. Git is linux-native and works better there without a compatibility layer. Linux also has a better terminal/shell situation for the most part (though PowerShell and the new Windows Terminal are, hopefully, narrowing the gap) It's not a perfect situation over there on Linux, the lack of VisualStudio is probably going to be a major blocker for you as a C# developer, though VisualStudio Code does run quite well on Linux and is making good strides. Hopefully, if .NET Core 3.0 covers enough ground that VisualStudio can eventually be ported to run on Linux, maybe there won't be anything stopping us anymore.
&gt; A Windows server core install with no GUI will take about 10 GB. Linux on the other hand can run you 500 MB give or take a bit depending upon which distro and options you throw on. How much is that in actual dollars? Don't get me wrong, I think you make a good point about licensing fees. But worrying about a few cents of hard drive space takes away from your overall argument.
Given the Linux flavours are the dominant server platform. (Even in Microsoft's Azure cloud, most servers are running Linux) it makes sense to match your development environment to your target. As such, a vast array of development tooling and packages were built on Linux (and Mac) to support this. These days many of those tools are coming to windows. Including a full Linux kernel! As a developer I can almost guarantee you'll touch Linux regularly unless you very intentionally force your work and career towards windows development. Even then I'm sure it would be hard to avoid. Because Linux is open source and customisable it had many flavours designed specifically for server and cloud use. Such as redhat. And most containers are aimed around Linux rather than Windows.
1. Personal preference 2. Many people prefer to run the same OS on their dev machine that their app will end up running on. And since many people write webapps and webapps run on Linux, they use Linux machines
CSS is basically just a language whose only purpose is to "select" HTML and then apply styles to it. So when we talk about using CSS for web scraping we are referring to just the selecting part. If you ever used jQuery, you've used CSS selectors. I believe AngleSharp supports most of the CSS selector standard (at least the useful parts). If you want to select all the links you query for "a". If you want all links inside of li tags (at any depth), you put in "li a". Want that link to be a direct descentent of li? then "li &gt; a". You can find id's using #id or classes using .classname If you are absolutely unfamiliar with CSS, it's worth learning - it's heaps easier for searching HTML than XPath.
I had professors in college that would constantly talk shit about windows. These were guys who had never worked outside of academia and never produced anything remotely successful as windows, and yet they constantly talked about how awful it was Many students picked up this rhetoric without any sort of fact check. So a lot of people liked Linux just because they were told to like it. Ironically, many of them also struggled with everything being in a terminal (limited GUI)
Well I was already familiar with CSS. So I just looked at the examples &amp; samples to figure out how to load HTML (I eventually settled on using HttpClient to get the HTML as a string and passing it as a string to AngleSharp). Then with that HTML, it was just using the API: QuerySelector or QuerySelectorAll. If you're familiar with jQuery or CSS, it's the the same thing. Also it's very easy to work with LINQ to grab lists of elements, applying filters to narrow things down and then either .TextContent (for text content) or .Value (for attributes) to grab the raw data and store it into classes that convert the strings into .NET types.
No idea. I’ve never had to pay the bill. Just parroting the reasoning supplied by others for why they want to use Linux over Windows in such situations. Depending upon your usage, those pennies can add up. It’s kinda like stocks. If the share price goes up 5 cents it’s no big deal. Unless of course you own a million shares. In which case we’re talking about a $50,000 gain. If you work in an environment where small moves like that have a significant impact in the aggregate then you start to see the appeal.
https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/foreach-in
Jetbrains Rider IDE. Yes it costs money, but it is so good.
Because Unix based operating systems run the majority of the devices in the world.
Hey thanks for the help! I tried selectRow.ForEach(Console.WriteLine); And it worked! However, I only get "Purple" returned. &lt;ENT&gt;Purple&lt;/ENT&gt; I am trying to get all the siblings right, High, Purple, Null, High
On Azure, a managed disk is 0.05 USD per GB per month. A 16 GB MicroSD card costs 4 USD on Amazon. Storage space is so cheap that it almost never enters into the conversation.
No reason from a coding perspective really, but you will probably deploy to a linux server and understanding the infrastructure and command line tools is a big bonus for troubleshooting issues.
FYI Windows has multiple desktops by default. `Win + ctrl + D` to create a new desktop.
Type aliases please. Had a bug today that would've been prevented by this (swapped two ints in a method call, whoops)
It's not just the few dollars a year of storage costs. That larger footprint means it also takes longer to spin up a new instance. If you're dynamically ramping up your servers to deal with load, that means you can respond faster with Linux. Similarly, backups and restores will be faster. Also, while $6/year isn't much, it isn't nothing when you have 100 servers. It is a very small portion of your overall costs, though.
It does but i've never found the experience as fluid as; tiling window managers such as i3, Gnome, KDE or even Mac OS.
600/year across 100 servers? That's practically a rounding error. Start times may be more interesting. But only if they are significant. If we're talking 45 secs vs 115 secs then I don't care. And larger isn't necessarily slower, a lot depends on how much of that is actually loaded. We need benchmarks here. Backups sound good until you consider modern deployment practices where a read-only docker image is used. There just isn't anything to backup from production; you already have it in your last deployment folder.
How are you running Winforms on Linux? Wine?
Because basically 90% of the world runs on Linux. Trust me. Most strong stable backends aren't windows. Mac doesn't even count in that sense.
As suggested, read the source code, also get familiar with tools like ILSpy (or dnSpy/DotPeek/Reflector/JustDecompile) for decompilation.
 Same I learned objective language from the NewBoston as well! Lol
Not to say that other replies are incorrect but you don't need to code or deploy on Linux (when using .NET). As a matter of fact most .NET devs don't do that.
&gt;I’ve never met anyone who actually uses Linux You use Linux all the time, you're just not aware of it. Much of the internet (Reddit included) runs on some flavor of Linux, and do many of the L3 smart switches routing your network traffic. And if you want to get really specific, Andriod is Linux, and MacOS is a first cousin knock-off of Linux as well. Long story short, the knowledge you will gain learning the LAMP stack or SH will come in handy forever.
I always suggest [Essential C# Book](https://www.amazon.com/Essential-7-0-Addison-Wesley-Microsoft-Technology/dp/1509303588) two simple reason 1) This book identify section with for beginner and advanced learner 2)Almost each section has their stand alone example &amp;#x200B; When I was new to C#, I would spend everyday 15 to 20 minutes on each section read it, type the code, run the code. You will not only learn C# but also learn .NET libraries. For example, the code base I used to work, previous developer used two string with + sign and "\\" to create new network path. From this book I learn there is [Path.Combine](https://docs.microsoft.com/en-us/dotnet/api/system.io.path.combine?view=netframework-4.8) can be used to build new paths. Now you may ask both code works so what's the point. The point is when you use Path.Combine the code is more readable, second now with .NET core out you can easily convert code to run on cross platform. With C# you can do many thing many way, the ultimate goal is to write maintainable (readable code). Once you gone basic and OO and some Async stuff you can start reading [C# in Depth by Jon Skeet](https://www.manning.com/books/c-sharp-in-depth-fourth-edition) to get deeper understanding C#. &amp;#x200B; Once you are comfortable, you should learn Unit Test and TDD with a testing frame work. I would also spend some time with [Mark Seemann's Encapsulation &amp; SOLID](https://app.pluralsight.com/library/courses/encapsulation-solid/table-of-contents) course from Pluralsight.
&gt; As a developer I can almost guarantee you'll touch Linux regularly unless you very intentionally force your work and career towards windows development. Even then I'm sure it would be hard to avoid. I wonder how you define "force". I've logged into a Linux server once for 13 years of professional development. I work with .NET because I like it but I don't feel like put any effort in intentionally forcing my career there. It is a simple thing - I have experience with .NET, companies make me offers for .NET which are better than offers for other technologies because I am experienced with .NET and not with the other technologies. I can probably switch to Java in a couple of months if need be.
I was told to like it, I wanted to like it and then they told me games on Linux suck. Back to Windows and never looked back.
Do yourself a favor and do that Linux course at your college. Linux is a much more natural and headache free coding environment. Besides that, even if you do end up coding on Windows, you will deploy your apps on Linux, the dockers you will create will run on Linux. Knowing Linux and its shell/bash is a must for any software developer.
There are a bunch of relatively small &amp; unprofessional solutions out there that are quite affordable. 961API is a good example of this: [https://www.961api.com/](https://www.961api.com/) &amp;#x200B; Depending on who you're licensing your software to, obfuscation is equally important.
Don’t use RSA. It’s too easy to use wrong, and difficult to use correctly. Go with Elliptic Curve or DSA instead. https://blog.trailofbits.com/2019/07/08/fuck-rsa/
I’ve tried to pick it up a few times, but I just don’t “get” terminals. I don’t understand why people would navigate directories in a terminal or use Vim when things like explorer and visual studio exist. We’ve spent 20 years making nice GUIs, why throw all of that away? We had a lot of projects that “had to be done in Linux” and I’d just use windows and finish in half the time.
Ah, that makes a lot more sense now as to why CSS is always mentioned in regards to AngleSharp. My current app has a ton of xpath rules for HAP so I converted the first few over to CSS selectors. One of them is cleaner but most really are about the same level of esoteric syntax, just a new unfamiliar one. Seeing that AngleSharp has a JS extension that runs jint is pretty awesome. I don't think I'll switch from HAP at present, but I now feel like I have a better picture of what A# is supposed to offer and I'll keep it in mind.
My company is currently moving large parts of our existing compute to containers, and the difference between Windows and Linux is incredible - multiple minutes vs 2 seconds.
Seconded, I’m a professional C# developer and probably haven’t loaded Windows or Visual Studio in several months
This’ll help you: https://stackoverflow.com/a/7262658
Let's say you have 10 levels of "weight" so it can be +/- 5, right? Generate a random float for each weight +1. So for +5 weight you generate 6 floats. Then pick the highest value. If the weight is +1 generate 2 floats and return the highest. For negative do the same thing but pick the lowest value. Weighted -3 generate 4 floats and pick the lowest. &amp;#x200B; If this is something you do often I'd probably put the method in a static class with a static field for your Random() instance. &amp;#x200B; static class RandomFloat { private static readonly Random rndm = new Random(); public static float Weighted(int weight) { if(weight == 0) return (float)rndm.NextDouble(); double[] options = new double[Math.Abs(weight) +1]; for(int i = 0; i &lt; options.Length; i++){ options[i] = rndm.NextDouble(); } return weight &gt; 0 ? options.Max() : options.Min(); } } I just scratched that out quick and make no guarantees that it even compiles.
It's not just about cost. Lots of servers run redhat which they pay for anyway. It's just a better and faster os.
I find building my own tool chain on Linux for the various jobs I've done over the years to be a lot more convenient. The "Linux Desktop Environment as the IDE" feeling is really nice once you know your way around the command line and have built up a repository for regular use. Windows has lots of the same advantages, but I know that IDEs in particular have been much more rigid. If you've programmed in Java (and C# has a lot of analogies with this), you're aware of how much a set up IDE can help you. In fact, I say programming in Java (and C#) is painful without an IDE set up around it. But lots of other programming languages just don't have the fuss and muss that those two have and you get a lot more freedom (for better or for worse) to put your code to file. I've always found the tools for linking and compiling to be more intuitive in Linux compared with, for example, Code::Blocks for C++ for Windows.
Nearly everything I have ever made has run on Linux. It depends on the purpose of your application. Some bonuses about Linux, out of the box with RedHat you get python and C++ while you need to jump through a few hoops on Windows. In many cases, the things I make are on networks that do not have internet access and I am not allowed to install anything. Having everything supported out of the box in Linux makes deployment much easier. Grids and computing clusters are usually Linux based. Git and svn are also out of the box for Linux. Windows makes you dance for them. Could go on, but it really depends on your application. C# in Linux doesn’t make much sense since you would likely push for python, JavaScript or something else. Linux is still worth knowing though, like it or not it is a really popular OS.
SylphyHorn (Store app) adds the missing keystrokes and various visuals to Win 10 desktops. The end result definitely beats Mac OS for me. In my experience, Linux Mint has the best support, but the difference is not that significant.
Thank you very much. This is very helpful. I have few questions: 1. How can I determine which keys have been pressed in a specific frame? Should I implement a list and add all the keystrokes there and erase it in every loop? But this also doesn't give me the keys pressed in a single frame? Or should I update the matrix on every time a key is pressed and when it's time to render the game I just check the matrix? 2. If two frames have passed since the last loop, and I update two frames in the current one which will require longer time, won't the game be slower and slower as the game progresses? Forgive me if these questions are too silly, I am a beginner trying to understand..
&gt;C# in Linux doesn’t make much sense All our new C#/.NET work is deployed on Linux. I'd argue that .NET Core on Linux is better at scale than Python or JS, even if that is just purely on performance.
So, I run servers. Deploying to linux halves my costs on most cloud providers. And frankly, its just easier to work with than windows.
Yep same with me - I've always been .Net (and before that, classic ASP) - so always microsoft. I've never actually used linux, except for a long time ago at uni. However I believe now my companies .Net core services are being deployed to linux docker containers in the interest of saving money.
It depends what you're asking. If you mean coding \*in\* Linux, well there's no point really, just preference. I think Visual Studio is the best IDE for C# so I code in Windows (among other reasons). If you mean coding \*for\* Linux, Linux is generally better for running services on. Has lower overhead, more stable, better I/O performance, etc. The beauty is, with .NET Core you can code on Windows for Linux, like I do.
It's faster. I don't have to take my hands from my keyboard (never). Don't have to wait 30 seconds for a gui to load. I have more control. I know exactly what is happening to any given time. It's easier to program tools for the terminal so there are many tools developed specifically for the terminal that might never get a GUI. You might finish something on Windows in half the time, but that is because you don't know how to utilize Linux. You underestimate how much time you can safe because you don't have to wait for a GUI to load or never have to put your hands of the keyboard and move a mouse across the screen. Why do you think we have shortcuts for most of the things we have to do on a regular basis? (And yet, not everyone utilizes these. I don't use them all either. I can memorize a command, even if I don't use them much, but memorizing these cryptic key-bindings? I'm happy I can remember the ones that I use often) Don't get me wrong, VS is awesome and easy, but this easy comes with downsides, too. There are reasons programmers a thousand times more talented and competent than you and me use the Terminal and Linux on a daily basis.
That's an argument I can stand behind.
This is only true if you develop applications that don't use a GUI. I've yet to find a decent GUI Framework for C# on Linux. I hope it will get better with WPF being open source and people maybe trying to port it to Linux or developing something equal to WPF with the help of it's source code.
Thanks!
_1,'ד,,'רנםוך
That's a gross exaggeration. Windows is far more popular than Linux for hosting internal web applications. It's only on the public web where Linux dominates. Even when I worked for Amazon they had me building .NET apps on top of IIS and SQL Server.
Ram is another story. It ain't cheap.
People who have worked on Windows itself will be the first to tell you that Windows itself is a complete mess. Backwards compatibility for 20 *years* does not come cheap. They pay for it with technical debt.
how can I implement the NonBLockingKeyboardCheck()?
Glad to hear it. I have not done any C# in Linux due to the install issues I mentioned. In terms of performance, I would rather have C# but am locked to python on Linux for a number of reasons. Initial question was asking about programming in Linux in general, did not intend to throw rocks at C# on a C# sub.
Fuck yea. It is so miserly on RAM that my SQL Server VMs often have less of it than my laptop.
This. I don't think OP considered the massive prevalence of Linux in the server landscape. While the average user would probably be using Windows or Mac on their client, a large amount of servers run Linux. Also, you'd be surprised how many people in the programming sphere use Linux personally. Maybe not so much .NET developers, but many people prefer Linux for its customizability and how lightweight it can be.
how tf you close it
See back in the day. Around Pre 1990. All server based applications were basically business applications because those were the only ones that could afford computers. All those systems and applications ran on Unix. So if you worked on computers before 1990 then you used Unix. In layman terms Linux is a flavor of Unix basically next generation Unix. Therefore it would make perfect sense for all those Unix applications to migrate to Linux. Back in the early 2000's Linux was making waves because it was pivital in starting the open source community. It was the magical four letter word FREE! You could do whatever the hell you wanted to it. Which is why the Android OS is basically Linux. Another thing to recognize is that all those legacy applications there's a lot of them and they make billions and trillions of dollars. There's programs that were written in the 80's and 90's that people are terrified to leave because all their success was highly dependent on that code written in the 80's and 90's. It's old, but works and it works well. So what a lot of companies have done is just slap a modern UI onto it and they can continue to use their applications that were written in the 80's and 90's. This is why Linux is so predominant in the business community. This is why Red Hat was sold to IBM for 34 Billion dollars.
 if (Console.KeyAvailable) { ConsoleKeyInfo key = Console.ReadKey(true); switch (key.Key) { case ConsoleKey.LeftArrow : // do something break; case ConsoleKey.RightArrow : // do something break; // etc, etc default: break; } }
Im a .NET developer, I havent personally used windows for 2 years now. I love C# because it was my first, not because micro-softy shitdoze has me drinking the flavor-aide.
Same here, although I haven't developed anything in C# (or any other language really), since switching to Linux. What IDE/editor do you use? Do you develop exclusively on .Net Core or do you work with Mono?
That only matters if you're writing thick client apps. If you're writing server-side code, c# is nice. I've been working on a web project, written in c# on linux. Surprisingly nice. VSCode is a decently functional IDE (although I still miss vim...)
[removed]
You have to actually implement the interface in your class. C# interfaces are contracts instead of psudeo-abstract bases.
Linux servers are cheaper to run on AWS and Azure. GUI-less Linux does not need UI so less app updates and faster startup time. It is easier to access them remotely as SSH ports are never blocked by corp firewalls when all windows RDP port are. Startup time in the cloud are also faster because of no GUI. On the negative side devs tend to make the rat nests of scripts on linux. Also there is still some residual arrogance towards windows from linux/mac devs.
 **Virtual Desktop Shortcuts** * **Windows**\+Ctrl+D: Create a new **virtual desktop** and switch to it. * **Windows**\+Ctrl+F4: Close the current **virtual desktop**. * **Windows**\+Ctrl+Left/Right: Switch to the **virtual desktop** on the left or right.
Ha, tell that to our VB.NET framework 4.0 library!
I would suggest to read Head First C# books. It's quite interesting and go through all the fundamentals of the language in not boring way. Also, I watched Mosh's tutorial on Programming with Mosh youtube channel. He also have some very good C# and .NET related courses in Udemy. In youtube, another channel I follow for all C# things is IAmTimCorey. Check him out too. Good luck!
Ctrl+win+ arrows to switch Win+tab to get the bigger brother of alt+tab
&gt; Most strong stable backends aren't windows. The servers I have at work have years of uptime, and they're all on Windows Server 2008RC2, except for the MacOS server. Oddly enough, our workload is better suited for Linux servers (given that the vast majority of our applications are written in Java) but as far as I understood, sysops doesn't know how Linux works.
So, have you been running windows vm's in linux or is all your production code running on linux too?
Windows virtual desktops are still _very_ far behind pretty much any Linux DE's implementation.
In my personal stint with linux, Rider was the obvious choice, but fairly expensive, VSCode and Dotnet Core are decent enough. I believe monodevelop still exists in one form or another as well
I've tried to pick up windows a few times but I just don't "get" guis. I don't understand why people would navigate directories in a file explorer or use atom when things like bash and vim exist. We've spent 40+ years making nice terminal tools, why throw all of that away? The non-snarky response to you is that some people just prefer working in terminals for many reasons. The biggest reason I prefer working in a terminal is the composition it offers. I needed to find every project that has a particular string in some terraform. I didn't care what specific files it showed up in, just that the project had the string present: `rg -ttf -g '!project-i-dont-care-about/*' -l | cut -d'/' -f1 | sort | uniq` gave me everything I needed and it took me about fifteen seconds to build that and then I can further manipulate it if needed, whereas I'm not sure how I'd even begin doing that in a file explorer gui. As for vim, it's the defacto standard for editors on Linux. There's been once in fifteen years that I was surprised to not find vim pre-installed and honestly that was my fault for picking the wrong centos server image. And when you're shelled into your DHCP server at 1am trying to figure out an IP exhaustion issue, you're gonna want a tool you know like the back of your hand and gives you all the raw, dumb power you need to get Netflix working again before the missus wakes up. I'm sure I could've handled both of these in a gui, but likely no where near as fast. If you want to use guis, that's cool. But don't think people that don't use them are some sort of Luddite cult. Most of us run guis as well for various things (at least until I figure out how to get twitch to play in bash :p).
You are mixing things here. IComparable is an interface that has a method CompareTo(object obj) this interface is used to give an object the ability to be compared against another object. IComparer is an interface which defines a method Compare(object obj1, object ob2) which is used to create an alternative comparison between objects, which can be used to sort them for example. Here you can read good article which cover both: [https://support.microsoft.com/en-gb/help/320727/how-to-use-the-icomparable-and-icomparer-interfaces-in-visual-c](https://support.microsoft.com/en-gb/help/320727/how-to-use-the-icomparable-and-icomparer-interfaces-in-visual-c)
The biggest thing for me is being able to add interface methods in a library without breaking builds on the user's end. And you can do this pretty safely usually by just having the new method map to an existing one. Especially useful if you are planning to deprecate old methods and want a migration path.
I was under the impression that .NET Standard is mostly going away with the new .NET 5.
&gt; Why would anyone use Linux over Windows or Mac, specifically for coding? Preference. I'm much more at home in a Linux environment (specifically Debian/Ubuntu flavors) even if it means occasionally needing to debug some dumb driver issue that, yes, would just work on another os.
That may happen, but Microsoft has been unclear on their long-term plans. A lot depends on what happens with Unity and Mono.
Good questions! **(1)** Input handling is always sort of complex, and very unique to the environment you choose. Console applications see input differently than WinForms, WPF has its own way, and even in DirectX I get the feeling there are at least two approaches. Anyway, let me walk you through what there is to know about console input. The funny thing about programming is every solution tends to create other problems. Did you see Into the Spiderverse? The parts that talked about how Spider-Man always gets back up? This is like writing a dang program. You'll reach for the easiest tool, only to find out it doesn't work at all. I'm not a wizard. I've just tried and failed a lot. Here's some shortcuts. Go to docs.microsoft.com. Look for the Console class. Click on EVERYTHING. Just read what they do. It doesn't matter if you don't understand. Just seeing what's there is the first step. A big chunk of the methods involve treating input as a Stream. That's nice when you're working with text, but for a game that's not quite right. That leaves us with only a few tools. In Windows Forms and WPF, we can tell when a key is down, when a key is up, or if a key has been "pressed", which involves down THEN up. In the console, more or less we only get that "press" concept. `ReadLine()` is out. It will sit there and wait until it gets Enter, and that's a weird way to play Space Invaders. `KeyAvailable` is interesting. It tells us if there's at least one keypress that hasn't been processed yet. We can also do that with `Read()`. It returns an `Int32` that will be -1 if no key was pressed. But this is a frustrating path. The `Int32` represents a `char`, but pop quiz: which `char` is a left arrow? I've tried to answer that question, and believe me, it's not as easy as you think. That leads us to `ReadKey()`. It returns a `ConsoleKeyInfo`, which is complicated but more useful than an `Int32`. It tells us it knows a `ConsoleKey.LeftArrow` was pressed instead of the mess that `Read()` does. One quirk is if you care about Alt, Ctrl, or Shift, those are "Modifier Keys". You have to check the `Modiifers` property for those, and the documentation has a good example of how to use that. Since it's a "flags" enum, there's a trick. Anyway. Let's think. The only keys that matter to Space Invaders are a "left", "right", and "fire" button. That's `ConsoleKey.LeftArrow`, `ConsoleKey.RightArrow`, and maybe `ConsoleKey.Enter`. So we can make a type to represent the input state: class InputState { public bool Left { get; set; } public bool Right { get; set; } public bool Fire { get; set; } } Now, note, it's possible (but maybe weird) that two or more keys could have been pressed. So if we want the state, we have to check a few times. We have to be careful, because if we call `ReadKey()` before a key is available, it will block our program. So it ends up looking like this: InputState GetInput() { var state = new InputState(); while (Console.KeyAvailable) { switch (Console.ReadKey(false)) { case ConsoleKey.LeftArrow: state.Left = true; break; case ConsoleKey.RightArrow: state.Right = true; break; case ConsoleKey.Enter: state.Fire = true; break; } } return state; } Practically speaking, if a user can push like 20 keys per frame this might be too slow, but that's not realistic. It's more likely they can't push more than one key per frame or, worse, they might push every key at the same time. The parts of the code that handle input should be ready for that. I don't know how this handles holding a key. It may not. If it doesn't, well, this is one of the tougher parts of programming: sometimes you find out you can't do what you want, and you have to settle for "close enough". **(2)** This is only true if the system is so strained it can't handle one update per frame forever. For a game like Space Invaders this is really unlikely on modern computers. (True story: the invaders get faster as you kill more on the original hardware. This wasn't by design. But the CPU was so slow on the original hardware, every 2-3 extra invaders caused a perceptible extra delay per frame! So as you killed more invaders, it had less to do, and they appeared to move faster! Sometimes bugs are features.) Basically, this is a bad case. "For some reason, the computer is so slow it can't handle updating the game state every frame." The reason you try to do multiple updates per frame is if you're clever, you can do 2 frames in roughly the same time as one frame. If an alien moves once every 5 frames, we know our last frame was 3, and 2 have passed, we're on a 5th frame and we can move the aliens. That's not "twice as much time". We aren't moving them twice. Now, the bullets in "real" Space Invaders might move 1 pixel per frame. But, again, that's not hard to deal with. If 1 frame passed, you can move the bullet 1 pixel. If 3 frames passed, that's 3 pixels. But this is where things can get bad. What if like, 20 frames pass? It starts to get possible a bullet can be moved all the way through an invader before we check for collisions. Oops. That's one good reason to do one frame at a time. Most of our frames will be spent doing nothing if we move invaders every X frames and bullets every Y frames. We could make that even more clever: if we know bullets OR invaders haven't moved, it's probably not worth checking for collisions again. But. Space Invaders is very simple. It allows one player bullet, about 20 invaders, and I think about 3 invader bullets on the screen. That's 24 possible calculations. My computer was made in 2010 and it can do 4.6 *billion* calculations per second with both of its cores. Updating the game state might take about 300 calculations if we're very not-optimized. I think it's fair to say (300 / 4,600,000,000) &lt; (1 / 60). We're safe. That's the thing about game development, though. Eventually you'll need to do more things in a frame than can fit. That's when you have to start doing *weird* things to make it work. For example, I know a little about how Minecraft works. It renders as fast as it can, it doesn't try to shoot for a particular framerate. But the world operates on a timer that says there are 10 "ticks" per second. Some things HAVE to be updated every tick, and when a lot of them are loaded you get lag. To help fight that, some things *aren't* updated every tick. Instead, there's about a 10% chance per tick that they'll do their thing. So if 5 creepers are on-screen, not all of them are "thinking" every second. They might sit still for a long time. But that makes sense in many situations, so you don't notice! There are too many tricks for one person to learn. Some are easy to understand like the Minecraft one. Others are magic. John Carmack invented new ways to do *math* when developing Quake. The explanation of "the Carmack number", which is key to fast square roots, is simply, "It's the first number I tried that worked." So don't let something silly like, "I don't think this will work" stop you from trying. If you try and fail, you'll learn something. You won't learn anything by not trying. Get messy. Make mistakes.
So in this scenario, which one would be appropriate to use ? Incomparable or IComparer?
How do I implement the interface for this specific purpose ?
C# is likely the language I use most, and for the longest time I was somewhat stuck on Windows due to the frameworks, and Visual Studio having no equal at the time for C# coding. With .NET Core reaching a mature state (not a Mono fan personally), and JetBrain's Rider (basically the IDE version of ReSharper), I don't even bother keeping a dual-boot anymore. Microsoft is putting all of its support behind .NET Core, which is Microsoft way of killing the Windows-only .NET Framework without saying it (they never do). There are plenty of IDEs if that isn't your thing, but for me, it was intuitive since I already knew all the Resharper/VS key bindings, etc. That is all a bit off on a tangent, but you might often hear about C# development not being great on anything other than Windows. For a while that was very true, and C# was tightly bound to Windows, but that has not been the case for the past few years now, so ignore anyone who says otherwise today, it simply means they are not keeping up with technology.
Look at the docs for Any() when providing a predicate/ func: https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.any?view=netframework-4.8 Also probably better to get into the habit of using foreach keyword and not the ForEach extension method.
So what would your strategy be for concretions exactly.. Blobs, flat files, or databases. You don't seem to disagree with the fact this is how it is. I speak of containers as a supplant to app domain concerns and you call this garbage. Have you considered PCI-constraints? Or any security? I honestly need to know why you think I just speak garbage, because these are real concerns when you model applications in an environment that attempts to protect it's data through defense in depth. You tell me how you handle an environment like this because you are obviously 'verysmart'. Maybe I can learn something, I am both confrontational and honest.
 class NodeComparer : IComparer&lt;Node&gt; { private const int EPS = 1337; public int Compare(Node node1, Node node2) { if (Math.Abs(node1.Value - node2.Value) &lt; EPS) return 0; return (node1.Value - node2.Value) &gt; 0 ? +1 : -1; } } private NodeComparer comparer = new NodeComparer();
The basic learning tape that came with my commodore C16. Since then: Internet is cheap and at least medicrore quality.
Half of Azure is Linux. When Windows own cloud service is becoming dominated by Linux, that says something. In production, for content delivery, for science, or for anything that might need heavy customization, people use Linux. Windows Server has some great Microsoft tie-ins if you're administering a big business with lots of Windows machines: Active Directory and Cloud 360 are huge if you work at a place where you have to wear a tie. But for development type stuff, Linux is the standard bearer. That said, C# is a Microsoft thing, so while it compiles on Linux just fine, you're going to be encountering mostly Windows guys down that route.
IDK but try Microsoft's own guide? [https://docs.microsoft.com/en-us/dotnet/csharp/](https://docs.microsoft.com/en-us/dotnet/csharp/)
When you get used to typing instructions especially shortcuts you can do things surprisingly fast, its just there is a major learning curve when compared to GUIs. I'm a windows / gui guy all the way, but I can appreciate why people do it. Also people don't want to give up what they've learnt.
Really though. The public school system does their best to find ways to gouge college students wallets as much as they can. I can find the book elsewhere as a used rental for as low as $30 for the semester. Why don't I do that? Those used rentals don't come with the proprietary software keys that I'm only going to use for this semester's class, and there's no way to buy the key separately. So it's sold as a $300 package at my schools library.
Oh, thank you. I'll check it out.
Weeeell... Soon you'll be able to add default method implementations to interfaces, so... ¯\\\\\_(ツ)\_/¯
Everyone you know uses Linux on such a regular basis it's not even funny. Everyone tends to think of Linux as some obscure desktop operating system for bearded individuals who rarely venture outside, however most if the internet runs on Linux. Every single android phone runs on Linux at the core, Mac OS is built on Darwin which is a FreeBSD clone (this is a *nix based OS). Your bank stores most of their infrastructure on Linux. I would say developing for Linux is a huge plus on any Resume.
What software is it for? Also is anything else covered besides C#? I've read my share of programming books and the most expensive one was 60€ or so and generally they're cheaper than that
Personally I don't use shortcuts for virtual desktops. I prefer to bind two keys on mouse (I usually have more than regular mouse) to going left/right and I have opened at least four desktops which fill when it's needed.
Oh, I was mistaken, nearly $200*. Still too expensive for me right now. The book is "Visual C# How to Program" in parentheses it says "Bind-In access" which is unfortunately a requirement that the used books don't come with. I can't find much information on it. I assume it's some kind of software key, because this isn't the first time I've had a run-in with curriculum requiring some kind of software key.
I'd really search online what that key is for because I kinda suspect it's money you don't need to spend. There are a multitude of other books out there. I'd also check that the book already covers C#8 because that's coming out this year (I'm going to buy a book on it that's released on the 26th)
FxCop is the replacement for the old static code analysis.
Honestly this so much, having spent 10 years writing windows apps. Your horizons are so limited in a Microsoft ecosystem
Some people believe: Less queries == better performance. Tho in the example he writes: &gt; -- MULTIPLE QUERIES, HUGE MANATEES So I assume he just accidentally stumbled into client-side evaluation, which is a poor comparison.
IComparable if this is the always used/canonical ordering mechanism for Nodes. IComparer if it is a one-off/special case you need in part of your code. For instance: int implements IComparable&lt;int&gt; because there is a well-defined ordering of integers. If I need to have all odd integers before even integers, I would implement IComparer&lt;int&gt; and use it in the place where I need it.
Yeah, the books most recent release was in 2017, and that's the edition that we're supposed to be getting, so I doubt it, but upon a second look, I've found a website that has a used copy that includes the access code for $94, so that's a win at least.
Technically it doesn't say higher performance, just better translation. But yeah, that could impact performance, hopefully for the better, so it should include benchmarks.
Did you just call Mach/BSD a knock off of Linux?
Doesn't say which databases it supports.
Simple answer is the OS is a lot more hackable than Windows when you need it to be, and as a consequence, a lot of developer tools, libraries, etc have been created for Linux (which is a self-compounding cycle). tbh as an OS Linux isn't really all that innovative, although performance-wise it does beat the alternatives.
macOS is most definitely not a "first cousin knockoff" of Linux, man. Put some respect on BSD's name.
yeaaaa no
Linux is used in many iot devices and embedded systems in general. My TV uses a Linux kernel I recently found out lol
I hate to be *that* guy, but I'm reasonably sure that you are asking the wrong question. I think the question you want answered is: "How do I create anonymous classes in C#". Unfortunately, this is impossible. As a rule of thumb, you use anonymous *functions* instead of anonymous *classes* in most situations. ``Employees.Sort((a,b) =&gt; a.Name.CompareTo(b.Name));`` for example. There are very few situations where an implementation of IComparable or IEqualityComparer is really necessary, and in those cases, you have to write an ordinary class that implements the interface.
I wouldn't say a must have but it's nice to have a basic understanding and solid stackoverflow search capabilities ;0. I work exactly as you say I code on Win as its my default system but Linux on server (well I used to have dual boot), every time I work a bit more I push things around just to use terminal tools of linux to search through docs and so on I wish Win had these tools so much I could cry. I advocate this guys reason it's really convinient to do just the basics in Linux it goes miles in your development.
Just look at Azure. Same compute/memory plan for Linux is ~25% cheaper in general.
[www.libgen.io](https://www.libgen.io) Practically any book there is
Hmmm, I might be completely wrong (it's been a long time since my first CS course), but you shouldn't worry so much about the language. I mean, if it's your first one, yeah, it matters more. But most imperative, C-syntax languages are very similar, even more so from a CS 101 perspective. So you could try to learn some Java (C# is a better Java :-) ) if you find resources more easily. If you want to see what a *real* :-p CS 101 course looks like, check this out: https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book.html (full text of the book available for free) and https://www.youtube.com/playlist?list=PLE18841CABEA24090 (videos from 1986 when this course was taught at HP IIRC and they recorded it). SICP is a really interesting and influential book, with a very interesting distribution of reviews on Amazon - mostly ones and fives, people seem to either love it or hate it. You might hate it, but you won't know unless you check it out ;-) I think it's best to try and watch one or two of the lectures to form a quick opinion. Another language independent, important book is https://www.amazon.com/Introduction-Algorithms-3rd-MIT-Press/dp/0262033844. My point is you shouldn't focus on a particular language or tech stack in college (you'll get to do that a lot on the job), but instead, try to study interesting stuff (which will help later as you'll be better equipped to recognize ideas, patterns and designs).
I'll just say convinience. I use Win as my main system while servers are Linux based (centos). I can't even recall how many times I wished to have Linux tools on Win just to go easily with a simple command through all docs to find pieces of string in a very quick manner, change things like that and so on. The terminal is such a powerful tool that it elevates your work to another level. I like both systems especially since I like to develop games for fun and such and majority of games and programs are made for windows with very good support I use Windows otherwise I'd be only Linux user. Now dont' get me wrong I'm by far no Linux poweruser I barely now any basics to move around and such, I use stackoverflow a lot to find things out and such but even that bare minimum made a huge difference to my work. I don't think it makes much of a difference while you study but the moment you start doing more intensive work or just work with a lot of data, files, ... you will find yourself very frustrated on Windows while with even just a basic Linux usage you will feel and most importantly work way better. There are virtual environment so you can just try working with linux on windows for a while and see for yourself.
with your use case you have a point. however, at the end of the day the power of command line interfaces is that they're text-based. that means as long as you can do it by text it's both flexible (you can extend functionality by simply writing text) and it's prone to automation (if you can type it, a computer can too), unlike GUI:s where a programmer has to update the code behind the button to extend the functionality and automation has to be written completely from the ground up. I think people praise terminals a bit too much though. up until the point where I got my first server I had never had to use the terminal for much besides the occasional "the only way to fix this in Windows is to run these 27 commands in PowerShell" or unfucking a git push. but once you enter the world of devops you will get very familiar with a terminal because devops and servers go hand in hand, and servers and CLI go hand in hand.
That doesn't hold up for SSD though - not making an argument here, just worth to note
For .net MVC, I recommend you asphostportal. They are not too expensive, around $5/month if you host website with MSSQL database. You can consider them. My advise, never go with free hosting.
&gt;Many people prefer to run the same OS on their dev machine that their app will end up running on This is not preference, this is sanity...
Yeah, at my college, both C# and Java are requirements for my degree (I'm not sure if I want to go to University just yet, so I'm working towards a transfer degree, and a non-transfer AAS in Software Development. The AAS is where the two languages are required) C# and Java are also the only courses that my college offers. Since I have a web background anyways, C# and Java make sense anyways.
I know, haha I get most of my books there, unfortunately, the book in question, while being available on libgen, is only available in older editions and therefore older versions of C#. So they won't be particularly helpful.
Yess, i tried implementing something similar. I was calling the Compare method as [`IComparer.Compare`](https://IComparer.Compare)`(Node N1, Node N2)` By the way, your code works fine, thank you for teaching me something new today!:)
/roll fucking eyes so hard &amp;#x200B; \&gt; MacOS is a first cousin knock-off of Linux as well &amp;#x200B; Linux Is Not UniX, but macOS, which is Unix, is still a knock of a literal unix \*\*clone\*\*
Yeah, well you know, that's just like uuuhh your opinion man.
It depends.. If you are coding an app or a game that depends on Windows then you should use Windows of course. But if you are not, then I recommend Linux over Windows. I like C# and I can develop apps in my Linux system using .Net Core. And you don't need Visual Studio for that. Visual Studio Code is enough with extensions. Its almost like an IDE. Its your choice of course, some people doesn't like Linux because they are not familiar with that.
Everything in the gui is a single action. I can rename every file, that fits a specific criteria, recursively, all in a single command in a terminal. how long would that take in windows?
sure, there‘s enough space to post your own.
Because the automatic wallpaper resizing on linux (mint) is better than windows, duh. Ok on a more serious note: * It just feels more productive * Higher degree of customizability * Less problems with installing packages in my experience * Better UI (matter of taste of course) * Fuck microsoft * Open source
Well, its a library that provides the infrastructure needed to build powerful LINQ query providers for SQL databases. So it needs an implementation for each database. There is one example for sql server, called Impatient.EntityFrameworkCore.SqlServer.
I use linux and I can honestly say windows is a terrible operating system. I use linux because it's faster, more memory efficient, superior file system, package manager, sane terminal that uses badh instead if batch, distros, customizability, freedom/open source, Unix core like a sane os, doesn't have Microsoft spyware, doesn't have start menu adware like in Windows 10, etc. Linux is an objectively better operating system. It has built in support for great tools like gcc, git, &amp; ssh. It has more coding options available and is honestly more enjoyable than windows. I switched over after being a long time windows user and haven't looked back. Why do you use Windows? You asked why I use linux, so I'll direct the question back to you. The only benefit I see to windows is superior .NET support (but mono exists for Linux), better video game support (less relevant with emulators like wine), or if you're using NVIDIA (since linux support of NVIDIA can be kind if mixed). Hope this answered your question. Cheers :)
That's not true though anymore with wine. You should give linux another chance. It is far superior in many aspects to windows.
Using GUIs instead of CLI is the equivalent of writing programs in Scratch instead of a normal programming language
I feel like you are cherrypicking the arguments against linux quite heavily. There are many arguments that can be made as to why you should use linux over windows.
Coding is definitely easier on linux. You have a package manager that supports many gnu technology much better than windows, built in git cli, and built in ssh. Most development platforms are built with linux in mind.
 I don't have much alternatives, given that Linux is free, run well on arm(Raspberry)/X86, and that it is well free. Also i can cross compile for Windows, and even Wine test that the Windows version is most likely to work as intended. So i really don't see any good reason, not to use Linux for coding. I can understand why you would use Windows for gaming purpose though, but i don't even do that.
All you need for Linux is to install gcc and you're done. Vim and git are preinstalled for most distros.
What are your thoughts on Rider for C#?
Totally agree. Especially fuck Microsoft. I use linux because I'd rather not have adware and spyware in my operating system.
I'm an emacs user myself, but I've always been fond of quick config edits in vim, proper development in emacs. It works for me. The real takeaway is that the IDE in Linux is using the tools and building the directories how you want to. Lots of Windows development tends to be automated creation of files through some program. In Linux you build tools yourself and automate the processes you find yourself doing too often, which is really good practice for why you program in the first place. Linux as a development environment encourages you to think about your creation process with the same attitude as you think about the project you're working on. For some people, that works well, for others it's a lot of overhead.
What I like about vim is how fast it runs. I mostly use C and C++ for about 85% of my code these days and the tooling on Windows is a nightmare, but a breeze on linux.
Especially these days
Cannot really agree with that, for beginners not definitely. have to deal with packages and terminal commands in your first days is, how to say this... disgusting. Once you're an expert, I don't think it matters but at least for the initial set up of what you need to code windows is millions time better, easier and simpler. In addition to that VS for Linux is not the best option, Rider works fine, not gonna lie, but VS 2019 community is better in my opinion (for windows).
Another funny thing is my windows laptop which I use for testing software too powerful for my shitty little one running linux runs slower and freezes more often. A twice as good computer running Windows is slower than a freegreek laptop running linux. That says a lot about why I use linux 90% of the time.
I was never a fan of VS so it wasn't a big loss for me, but I always found setting up tools easier on linux even as a beginner. Have you tried to install opencv on Windows. I'm convinced it's impossible and have up. It was not difficult to set up and link on linux though.
But is this good to do if I'm injecting SFTpClient through constructor dependency injection?
What is your recommendation on solving this?
&gt; What is your recommendation on solving this? What is your recommendation on solving this?
This is the kind of bullshit elitism that puts me off from the whole environment
1. Learn the IDisposable pattern. 2. Perfer encapsulation to DI unless you have a specific need to inject alternate implementations. 3. Prefer thread-safe classes that acquire and release dependencies as needed.
Too late, I now have even more reasons to use Windows being a .NET dev. Also while a lot more games work on Linux these days there are some that don't or work in inferior ways which means I still need Windows and it is not like I will be like "yeah, wait for me to reboot" when friends ask to switch games.
Especially these days
You'll either want to use a Nuget package like Newtonsoft.json and deserialize it to a class or build your own Json reader using generic types with reflection. The former would be easier as a new developer in C#.
I have no idea how that would get value 5, but you really should show the code you’re using if there’s a problem
Sorry if that sounded elitist, that wasn't my point at all. I use windows and GUIs every day at work and sometimes at home, so I'm not doubting of the quality of work that can be done with GUIs. What I was trying to point out is the difference in user experience, not the quality of the work done with them. When you're using CLI you are closer to the OS, you have more freedom and flexibility just like when using code instead of some block-diagram programming software like scratch. In the end it's just a matter of taste, if you just care about programming but not about how the OS that runs it works then GUIs are totally fine. But I love understanding and manipulating the whole environment on which my programs run, so CLI is just a go-to for me. Hope that makes sense, sorry that I wasn't super clearn in my previous message.
I think a lot of people won't admit this, but part of it is that coding in Linux makes you feel like you are part of an elite hacker club, whereas coding in Windows makes you feel like a boring corporate drone.
I hear this all the time, but I'm yet to see any Linux Server, the majorly of corporations here use Windows Server 2008. I've seen however a few attemps to switch to Linux over the years, and all of them failed due to poor results in early testing.
Solving what exactly? Performance issues?
Still doesn't make sense to develop on Linux.
Yeah I was surprised it showed the value as 5 too. There is a fair few lines of code so I don't wanna flood the page with it but basically with the code I have created an HttpResonseMessage object and using .Content.ReadAsAsync&lt;CharacterModel&gt;(); to map the returned JSON to my character model class. The code for that looks like this: using (HttpResponseMessage response = await ApiHelper.ApiClient.GetAsync(url)) { if (response.IsSuccessStatusCode) { CharacterModel character = await response.Content.ReadAsAsync&lt;CharacterModel&gt;(); return character; } } Then my class model looks like this: public class CharacterModel { public string Attr1 public string Attr2 } The JSON looks like this: "Attr1": "XXXX", "Attr2":{ "id": 5, "Name": "Answer" } I don't understand how I can map the values within Attr2 to my class property
I develop on Wi dows and test in WSL, so... I guess I agree?
Sure you should *test* application close to production server, but what difference does it make to write it?
Ok that code is completely different. The attribute names at least match. Don’t modify examples to be very different from the actual code if you need to modify them You need to make another class that has the properties Attr2 has and make Attr2 that type. public class CharacterModel { public string Attr1; public Attr2Model Attr2; } public class Attr2Model { public string ID; public string Name; }
Oh that makes sense. A lot simpler than what was going through my head, didn't half confuse myself. Thanks.
Are you dealing mostly with clients using servers for file sharing, active directory etc.? Windows is definitely more prevalent for those cases in my experience, but it's a different story when it comes to hosting things like web applications. [According to W3Techs](https://w3techs.com/technologies/overview/operating_system/all), Unix based servers host 70.1% of the internet's websites.
I don't think Windows provides native functionality to remap the shortcut, but if you have a fancy mouse there's probably an option in its software to work around it with macros.
LOL! ...are you serious??? Like, 95% of the web runs on linux servers... Maybe you are not hired to do any linux work, because you obviously have no fucking clue what you are even talking about, and wouldnt know what to do...?
As someone who works pretty much exclusively on Windows, what are its shortcomings compared to Linux regarding virtual desktops? Just out of curiosity.
Yep, thats it. I'm using logitech mouse (m560) which gives this possibility. It requires their software but I can live with that.
There is no point to it. https://www.youtube.com/watch?v=rmsIZUuBoQs
Linux is a mess too. https://www.youtube.com/watch?v=rmsIZUuBoQs
The thing that stops me is that there's no Visual Studio for Linux yet, Visual Studio Code isn't anywhere near as good for C# (in my opinion), and MonoDevelop can't debug .NET Core. Thankfully there's little I need to test in Linux and I can start a Docker container if I need to.
I work at a manufacturing plant and we run a mixed environment. Windows for AD-DS, workstations and fileshares etc. running on top of Hyper-V, and Linux for a lot of our operations management. Spinning up a new Linux VM is much faster and resource efficient, and a hell of a lot cheaper, than using Windows. Running dotnet core services in Docker has made life a lot easier.
There is JetBrains Rider which is usable but not quite as good as VS
OK, so I can find out by searching NuGet. The website could just say. (It's only SQL server for now.) Unfortunately we use PostgreSQL, which isn't supported.
Windows sucks. Linux sucks. Everything sucks.
&gt;Maybe you are not hired to do any linux work, because you obviously have no fucking clue what you are even talking about, and wouldnt know what to do...? I find that extremely rude, especially when I have experience in both Windows and Linux. You talking as if handling Linux needs it's own science, when they both easy to manage, maybe it's you who doesn't know.
I looked at that but I mainly wanted it for doing personal projects at home to try out a break from Windows. It's just cheaper to use Visual Studio on Windows with that use case, unfortunately.
Is as you said AD-DS, workstations and filesharing.
Mostly for AD-DS, not web pages (they use third parties for their websites).
Just to clarify: you *can* create anonymous classes in C#, but anonymous types cannot extend other classes or interfaces.
Aproximatelly 90% of the world servers are Linux, and everything runs on servers, so it's a pretty big deal.
Interesting tutorial, but if you are going to do this for other than academic purposes, you can set up something similar in minutes with TPL Dataflow blocks.
As many other people have pointed out, linux is used heavily in some environments. For instance, I'm not sure it is possible to do bioinformatics without using linux. The reason I personaly code in linux is that the cluster computers I'm going to run my code on all use linux, and I think this is essentially always true for all high performance computing.
I like to use http://json2csharp.com/ for converting json to classes and then nugget for deserialization. It usually handles everything perfectly.
Thanks. This is actually Part 1 of a series. I'm going to have part 2 (and maybe 3) with TPL Dataflow implementation and some others.
Second Newtonsoft JSON. Check out custom converters for mapping to an existing class like that.
I would get VS Enterprise if your college works with Microsoft to get that to you for free. You should try &amp; learn organically by doing projects such as phone books, calculators, small word based games etc. From there try &amp; do a bunch of beginner projects in the language &amp; do a lot of research. That way you'll be exposed to the language features &amp; know about when you should use them.
Awesome. I'll check all of that out. Thank you.
&gt; JetBrain's Rider I see this mentioned a lot, but looking into it, are people really paying a subscription service for their IDE these days?? I use VS at work and altho I have a macbook at home and have used VSCode for some .NET Core stuff, its nowhere near as good as VS. Windows just seems like the best env for me to develop c# stuff, but this is purely bc of the IDE.
Especially these days
The use cases for anonymous types in C# are so orthogonal to anonymous classes in Java that they do not count here :)
Extensibility is the biggest one. Things like: - Opening apps on a specific desktop - Moving apps to a specific desktop - Moving to a specific desktop - The ability to have separate desktops per viewport - Swapping desktops And that's even before exposed APIs.
If you're coding in windows and deploying to a linux server, there is also a good chance something's will not work the exact same. The file system, permissions, and lots of other things are simply different. Detecting these bugs in production is difficult. Docker also runs natively on linux and it is the future of sw deployment.
I love Linux, it's my preferred OS. I have a windows box, MacBook (work issued), and a cheap Linux laptop. The cheap laptop is my perfect dev machine. Technical it dual boots windows, but I never use it. A windows machine will slowly slow down over time, especially if it's your personal machine and you install everything on it, also depending on the language you use the support can be lacking (Ruby is a pain on windows). A MacBook is overpriced and I hate the shortcuts that effect you at at OS level. Linux is customizable and lightweight. And since most servers run on Linux it's nice to run on a comparable machine. When .NET core came out y was super excited to no longer need a windows machine for development. And cost was significantly lower for deployment.
Multiple inheritance here we go... This is going to be a glorious cluster fuck. Better than giving a design patterns book to a junior programer.
Probably UWP, as it was designed explicilty to be modern and have a great UX on mobile devices. It also uses XAML for front, with subtle differences between WPF XAML code and UWP one, but if you have experience with WPF you should get used to it fairly quickly.
Guys, visual studio can literally paste json as classes. { "One": "Working", "Two":{ "id": 5, "Name": "Answer" } } Visual Studio - Edit - Paste Special - Paste JSON as classes
I took a Linux course one semester as part of Computer Science and the most important thing I learned was to use the Terminal, which has served me well and made me a more effective developer in some cases, as well as more effective at just using and navigating a computer in general. It will also make it easier for you to setup a custom Linux server, which is most likely going to be super useful as well. I don't think there's any real advantage to actually doing your coding in Linux though. One could argue that having the Terminal at your disposal is powerful, but personally I use MacOS as my main OS, which has a very powerful Terminal of its' own, which is basically identical to the Linux Terminal and Windows is about to get a Terminal upgrade as well, so I don't think this is a big deal. During this course I also got really into computer security and penetration testing though, which I think is actually better done on Linux, as a lot of the tools are only available or more easily available on Linux and many of them are predominantly used in the Terminal. The course ended with a 24 hour "Capture the Flag" in "Jeopardy Style", where our teacher had setup a bunch of computer security tasks for us to crack, using the knowledge we had gained from the course, to earn points to win a prize, which was super fun.
Perhaps you should add a disclaimer that this isn't related `System.IO.Pipelines`
 [https://en.wikipedia.org/wiki/C\_Sharp\_(programming\_language)](https://en.wikipedia.org/wiki/C_Sharp_(programming_language))
Hello, higher education software engineer here. The key is typically is for some proprietary learning / quizzing environment. Many have special ways to turn in homework using the key provided. Not all professors use they key, and not all professors use the book so when I was in school I would typically email the professor before hand and ask if I needed both. Also, u/brionispoptart I would check with your prof before getting a different book as he may be using the practice examples out of the textbook.
https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-version-history and related pages.
Span&lt;T&gt; is compatible with .Net 4.5, you just need to use the System.Memory nuget package.
Same. After 10 years of getting used to GNU/Linux, everything my coworkers ask about on Windows is either answered with, "Well, first I'd install Cygwin", or "It's very simple on Linux." &amp;#x200B; Turns out pipelines that process text files still fits a lot of use cases.
The book "C# In Depth" by Jon Skeet is really good if you want an -in-depth run through from someone who really knows his stuff.
Any visual in WPF can be completely replaced, there's no end to the customizations one can do. I'd go with that.
Would you choose it over UWP? Why?
Oh yeah, I wouldn't use another text book, I'm just looking to get some practice in before the class starts. Thanks for the info. As soon as I get access to the classes syllabus, I'm gonna email my professor and see if I need that key, which may or may not save me money, but that doesn't solve the need that I have now, to get a head start. I'm just asking for good source material to start with for self study. Any tips at all would be appreciated.
Frankly I haven't tried UWP, but from what I've read it does limit you somewhat.
This exact scenario is one of the triggers that make me install Powershell on a new Linux box.
Or he's been using exclusively .NET Core
I'm of the opposite opinion, I've run Rider full time instead of VS for work and personal. I keep VS installed and up to date just in case, but that case hasn't happened yet. If you're on Linux or on a Mac then Rider is a k brainier. If you're on Windows you have the freedom of choice.
Checkout the C# Players Guide 3.0, I’m a fan. Just enough fluff to keep it interesting. Pretty cheap as well.
The touch device runs windows or Android / ios? If it has a mobile OS, go with Xamarin, or some web technology - .net core + react/angular/vue. If it runs windows, i would definitely choose wpf over uwp, it has severe limitations on libraries, functions, method of package distribution and so on. If you have already wpf experience, then it is definitely an easy decision.
Or maybe even the new Channels? I've not used Channels yet but its being sold as a "lower overhead" version of Dataflow from what I can tell.
I'm glad you figured it out but for the love of God give your variables meaningful names.
In short functions, I don't typically give them long names, as they're next to their type declaration and the purpose is documented in some comment lingering nearby...
I'll think about it a bit, didn't think it will be confusing
I want to add two things here, first: Those two URIs are different ("pack://..." vs. "/Wpf"). Since I did not use Wpf recently I cannot recall the exact Pack-URI formats Second: Did you inspect the constructed path (e.g. by saving it to a variable) to make sure it is assembly correctly
What about: result = List\_a.Where(s =&gt; List\_b.Contains(s));
Why would different applications have the same connection string though? Are they not at least keeping their operational data in separate schemas?
UWP is somewhat unclear how it will look like post WinUI 3, but it's already clear it doesn't go away. Knowing XAML also lets you make Xamarin apps. Although it's primary for mobile, there's some support for desktop (even Linux in preview).
Packages should not be committed, they will be restored anyway if they are not found. If you like convenience and are working with Visual Studio, you can use [this gitignore](https://github.com/github/gitignore/blob/master/VisualStudio.gitignore) file for your project.
It's better to self document through good names then use comments. Ideally you can just read through code and understand. That code is a total mess. If someone else or you in several months come back to it it's going to look like nonsense. Your team mates will hate you if you right code like this. It doesn't even take extra time really.
Hi, Sorry, I had to figure out, on how to get the constructed path. Like I mentioned, I am very new to c#. The Constructed Path is: &amp;#x200B; pack://application:,,,/WpfApp2;component/images/exchange.png &amp;#x200B; what seems to be right for me. from the folder Structure /images/exchange.png is correct.
Check out [https://gitignore.io/](https://gitignore.io/) to get a basic `.gitignore` file going. But to answer your question more directly: A few people choose to check those files in for the case when nuget is down or to ensure you always get the exact same copy as everyone else is using. However, most people (including myself) consider the downsides of repository bloat and noisy commits to be significant and choose to _not_ check them in. My recommendation is to not check them in and they will be automatically downloaded by Visual Studio when you do a package restore (in VS2019, this happens automatically on build)
Mono
I will!
Will try it out
Instead of saving the connection strings in the config file, save the path to the file that contains the connection string.
Unfortunately I've never tried, but if it's anything like Jetbrain's CLion I'm sure it's very good.
Quite right.
 [https://docs.microsoft.com/en-us/windows/win32/uxguide/ctrl-drop](https://docs.microsoft.com/en-us/windows/win32/uxguide/ctrl-drop)
"internal sealed class TcpClientAdapter : ITcpClient" What do you mean by lacking interfaces?
I believe that is a Property Sheet. Not sure if it is built-in to winforms tho.
Does the constructed path work if you add it to xaml or use the xaml path from code? This would hint that one of the paths is not working for some reason...
Yuuup. If I were reviewing this code in a PR, I'd definitely call this out.
Welcome to a holy war! Part of why this answer is complicated is various facets of the discussion change dramatically from year to year and even month to month. The short answer is "It's bewilderingly hard to figure out how much it will cost to run either platform accurately, so you make a guess based on what other people have done." A long time ago, it was easy. Windows was a workstation-focused OS and Linux was server-focused. Windows was bad at being a server, very bad. So nobody wrote server software for it because it was easier to write a good Linux server. So a lot of people used Linux servers because Windows sucked at it. Then Windows got better at it. MS also tried to invest in tools that would make maintaining lots of Windows servers easier. This made the argument more complex, because: * Linux is (usually) free as in beer, you just pay for the developers and IT staff. * Windows costs money to license, but Microsoft argued it's easier to find people who can use their tools effectively (and thus it's cheaper to hire Windows developers.) That's the core of what STILL makes it hard to answer. You don't know how much your developers are going to REALLY cost until your project's underway. The Microsoft side of the boat has price tag after price tag before you've even hired the developers. But if you go about looking for a seasoned Linux developer, it's likely you'll find it's harder to find one, they demand a higher salary, and because of those two things it's also likely they might get poached away. So again, the argument usually focuses on these two arguments: * Using the MS stack means you pay a lot of money up-front for licensing, but you save money and time on development costs. * Using the Linux stack means you don't pay much at all up-front, but you require more expensive development and maintenance efforts. There's also the "you can fork Linux and update the source yourself" argument, but I think that matters to so few people it's just not worth discussing. Now there are enough MS stack success stories it makes a stronger case. You can find people who have implemented just about every kind of project on both Linux or Windows that can show you why making a different choice would've cost them more. Usually if you dig deep, you find out the reason is, "We already had experience with this stack and didn't have to hire new people." Note your personal experience is influencing your opinon. You've probably been a Windows user for a long time, and most people you know are Windows users. You're taking courses to use the MS tools. (MS pays schools money and gives generous discounts to get them to pick MS tools over open-source alternatives.) You are surrounded by people who know and use Windows, so it feels like Windows is a great solution. To evaluate it vs. Linux, you'd not just have to take one course, you'd have to spend a few years trying projects. You probably don't have that much time. So it's easier to just assume you'll do OK with the MS solution and pay the costs because money is worth a lot less than time.
These applications are connecting to a database of another 3rd party application to extract data
ok, now it get's weird. In the Preview window of visual Studio it is showing, using the constructed path. However, If I run the application, there is no image shown (and / but no error-message as well).
Yikes, good luck.
Not too unrealistic if he's using ASP.NET Core
You mean in the code. I have a directory map to where the connection strings are saved?
and like dynamic I will likely find a use for it but its going to be rare simply due to the mess these concepts can make if misused. Its going to end up having me stuff interfaces in a project the junior staff cant touch and I will likely be rejecting it in code reviews quite a bit as there are not a ton of reasons you would want to lean on this very hard.
You can also copy the JSON, then go to Edit &gt; Paste Special &gt; JSON as Class
Windows servers cost double the amount compared to Linux servers in AWS
Is the image is set to embedded resource in the properties window?
Your git ignore should ensure that you never see anything inside packages/
Sorry, where do I find this Property? I could only find Ressources, this is set to collection
That's a bit harsh, you have projects that your junior staff has to work with but cannot access?
It will run windows. Wouldnt it be more futureproof to use UWP? (Are they not developing new features so they can get rid of those limitations?)
I’ve solved a similar problem in 3 different ways. 1. Store the connection strings in a DB that the apps have access to. 2. Azure key vault 3. A small web service that will return the current connection string on demand. For all of these, you need to cache the value in your local app to improve performance. But also consider having some way of invalidating that cache if you intend to change the string without restarting the app.
Works perfectly. Thank you
sometimes yes, this is usually security or safety related stuff (industrial automation) that are dealt with by certain teams for liability reasons. i had one case where there was a core logic team that management was paranoid about as it contained their patented secret sauce.
Two common places to keep the connection string are the App.config file, or the registry. If the applications are meant to be run by users, you might consider writing an ASP.NET Core Web API to run centrally, and have your client applications talk to the web api instead of SQL directly.
Workarounds for multiple inheritance, since you can't do that with abstract classes
&gt; That code is a total mess Why? Besides the variable names.
&gt;Put some respect on BSD's name Nah. The only people who care about the distinction between Unix and Linux are a bunch of sweaty neckbeards who also want you to know that it really should be GNU/Linux cause linux is just the kernel and .... nobody fucking cares, Stallman. The real Unix is long dead (thanks SCO/Caldera). Every other derivative is exactly that. Cousin is a fair characterization, and so is knock off, since most of the useful software that runs on BSD (other than Apple's closed source everything) is GPL/MIT software written for Linux. I think BSD gets the appropriate amount of respect.
ok, I'll do it using: MemoryStream ms = new MemoryStream(); FileStream stream = new FileStream(Directory.GetParent(Directory.GetCurrentDirectory()).Parent.FullName + @"\Images\exchange.png", FileMode.Open, FileAccess.Read); ms.SetLength(stream.Length); stream.Read(ms.GetBuffer(), 0, (int)stream.Length); BitmapImage src = new BitmapImage(); src.BeginInit(); src.StreamSource = ms; src.EndInit(); imagea.Stretch = Stretch.UniformToFill; imagea.Source = src; I try to figure out, what that exactly does, but it is working, and I can see my image :) &amp;#x200B; Thank you for your help! :)
Roll your eyes all you want. BSD free rides off the FOSS and Linux communities and has for over a decade.
I dont have any knowledge about web api. Does it matter where the applications are stored? I mean does the web api needs to be in the same location? Some of the applications are meant to be run on an adhoc basis. Some are automatically scheduled to run.
C# in a Nutshell 7.0 is a good reference book. You can also briefly read through it to get a fairly good understanding of the language.
Yes, I did.
It's one way to do it. In your code, in all your projects, you read (in the config file if you want) the path to the file that holds the connection string. In your code, when you need the connection string, you read the path to the file, read that file and get the connectionstring.
If the applications are only run as a scheduled task or by an admin, don't bother with making a web api. I only mentioned it because it's common for people to have user applications all connecting to the same SQL database which can be a security/reliability/concurrency concern. In your case I would use the app.config file - do a search for C# app.config connection string and I'm sure you'll get some solid examples.
But Mach, BSD and NextSTEP are all older than Linux... They derive from UNIX.
Haha funny reading about this trick, I found it some 6-7 years ago while working on a pub/sub. We were one upping our performance with a friend finding new tricks to beat the other and I ended up coming with this fast clr type dictionary as I called it. You can check my latest use of it [here](https://github.com/Doraku/DefaultEcs/blob/master/source/DefaultEcs/Technical/Publisher.cs) if someone is interested.
Also planned in next part :) It's more like \`BlockingCollection\`, but has \`async/await\` API and better performance
wrong solution again :(
Yes. And Linux also derives from Unix, and has a huge community of developers writing software that pretty much makes up the entire library of software that people would care to use in 2019 (ignoring Apple for the moment). Are you running your BSD instance with no GPL software? No Gnome, no KDE? No XFCE? No LibreOffice? Didn't think so. The distinction only matters to purists like yourself, and the rest of us will just refer to it by "who won", which is Linux.
Seeing as you use Linq2Xml, you can use ElementsAfterSelf() and ElementsBeforeSelf()
"trick"
The other comments so far are correct, don't check-in packages. But in a broader sense, avoid checking in all compiled files. Anything that the compiler is going to rebuild anyway typically isn't worth checking in. Any little change in the compiled file will make git treat it as a change that needs to be managed. You should only care if the source that you control changes. A .gitignore file for Visual studio or dotnet will tell git (and you) which files it can safely ignore.
What country are you working in, just curious?
Refer to the images in [this post](https://stackoverflow.com/a/39368856)
US
&gt; Are you running your BSD instance with no GPL software? No Gnome, no KDE? No XFCE? No LibreOffice? macOS doesn't come with any of the above, so yes
Oh, you're an apple fanboy, not a BSD fanboy, my bad. Yawn. Still don't care.
How bad is cloning or modifying one of them? List_a.Where(s =&gt; List_b.Remove(s))
Well. * Get VS Community * Watch all the Bob Tabor vids (available on this channel since MS took down MVA: https://www.youtube.com/watch?v=Uuso89yJ0Ek) * Read through The Yellow Book. * Do small projects inbetween.
&gt; The only people who care about the distinction between Unix and Linux are a bunch of sweaty neckbeards who also want you to know that it really should be GNU/Linux cause linux is just the kernel and .... nobody fucking cares, Stallman. That literally does not make any sense, but I suppose you can say anything as long as it even infinitesimally relates to the point &gt; since most of the useful software that runs on BSD (other than Apple's closed source everything) is GPL/MIT software written for Linux Imagine trying to make this about open source when Unix is literally closed-source software
What even are you on about
Just look at it dude. What does VisitW mean? That name tells me nothing about what the function does. What do any of those parameters mean? What is full about? I should be able to read that through quickly and understand it. Without any prior knowledge that is literally just a collection of random words and symbols.
Nothing like starting every day off with smart ass comments from AngularAsshole.
I don't get the down votes... You raise good points and your comment was scoped to your background. Your comment was relevant to the conversation and you were not being an arsehole. Down voters please explain?
Yes yes, we all know you are the lord and savior of programming. No one can forget with your daily smart ass comments.
Intersect does give you common elements. You want the overlapping in the same count though, which is different. Use a Dictionary&lt;string, int&gt; and min of every element
And a int Counter = 0. Increment 'Counter' and only trigger game over when 'Counter' == 3
For sure. If an intern wrote this we'd sit down and have a serious chat. If a proper developer wrote this I'd be questioning their position at the company.
Well, consider I have an abstract base class. I could force some field to be read-only with a private setter. But \`readonly\` expresses intention far better in my opinion, and avoids me (or anyone else) modifying the base class and assigning new data to that field, at least without putting some thought into it.
Ok, so it is just the names. VisitW visits the array elements for writing (there's the VisitR function that, well, visits them for reading). For such a function, we need a way to set the elements (System.Func), and we might want to operate only in a sub-rectangle instead of the entire 2D array (rect). Everything makes sense with a bit of context (e.g., more function ending with capital R/W, and lots of array functions having an optional rect parameter), and I do have the context, and it makes sense to me. If it stops making sense down the line, then I know it's unclear and fix things. But (I think) you cannot easily preempt it from the beginning with "what am I taking for granted right now?". That's what you need other people for to point out.
Shouldn't they be using \`nameof\` instead of hard-coding the string in the \`Table\` attribute? &amp;#x200B; Also, if I need to do reflection, I either use a static constructor or collect a dictionary with types as a key. If I need to find out if a type has an attribute or not, I check the dictionary to see if reflection info has already been collected and, if not, do it once. I can't think of why you would need to keep reflecting on a type more than once.
`List\_a.Intersect(List\_b)` does work; `{aa,ab,bb}` *is* all the common elements as 'ab' and 'ab' are identical. If you want to define the first and second instances as separate items you will need to change them like so: var indexed_list_a = List_a.GroupBy(e=&gt;e).SelectMany(g =&gt; g.Select((e, i) =&gt; new { e, i })); var indexed_list_b = List_b.GroupBy(e=&gt;e).SelectMany(g =&gt; g.Select ((e, i) =&gt; new { e, i })); var result_list = indexed_list_a.Intersect(indexed_list_b).Select(e=&gt;e.e).ToList();
And that's a very typical client. You can definitely spend your career never seeing Linux in production when your client base is the typical office setting business. The more technically oriented sectors are a very different story.
Hi, maybe I misunderstood, but could this not be done with [System.Collections.Generic.KeyedByTypeCollection&lt;TItem&gt;](https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.keyedbytypecollection-1?view=netframework-4.8) ? Or is the performance not good enough? (it’s been weeks since I read any code)
Yeah it will make sense with context that's my point. You know that but what about people who have never seen the code. What if your away or have left the company. Why not call it VisitWrite and VisitRead. Why not give func and proper name.
The Aggregate method could do it. It iterates through a list and passes along a second aggregate list you can use in the "for each element in the source" section. So you would run Aggregate over the Intersect result. You'd start with an empty result list and for each intersection element, you would add it to the aggregate collection a number of times equal to the lesser number of occurrences in the source lists.
&gt; Reflection is slow Not anymore, especially if you're retrieving the same objects or types over multiple calls. It's actually surprisingly fast in .NET 4.0 and up. Java, on the other hand...
That's changing in C# 8
Here's a correct and efficient way to do it. var listA = "aa,ab,ab,ac,bb,bb,bb,bbbd".Split(','); var listB = "aa,aa,ab,ab,bb,bb,de".Split(','); var lookA = listA.ToLookup(l =&gt; l); var lookB = listB.ToLookup(l =&gt; l); var result = new List&lt;string&gt;(); foreach (var el in lookA) { int count = Math.Min(el.Count(), lookB[el.Key].Count()); result.AddRange(Enumerable.Repeat(el.Key, count)); } foreach (var el in result) Console.WriteLine(el); [Try it online!](https://tio.run/##bZLBagIxEIbPu08xeDEL27yAVahSeqhC0UIP4iGbna6hMbFJ1iLFZ9/ObtzWiiGX/Pz/N5NJpL@T1mHT1F6ZClZHH3A3Si9PfK7M55U0s1qjDMoaz5/QoFNylKZSC@/hxdnKiR18p4kPIigJB6tKWAhlmA@OKOsNCFf5rLUkB@FAKx8eYAwDIXJRdFvmRfG7i3LAV3utAhvmw2x0kZr2qT4YIyX@D8B59UlrP9p6XV3@aud0rvdMw3gC@o9P6vTsmt5wXUEd@loH8hv8gjll7uNtJ6wjvtOYhdwCa72oQZnYRpxCokwAaWvTAhYibPmCxoWaJk0ay/LYzZqUZzxuerkjJ7EyfyjLpTAVskdT79CJQiNf4h5FYDGWxwoxdbrs/0ZzEZrBjN7YEunNqYD0FZBgLeCUnprmBw "C# (.NET Core) – Try It Online")
I store a string in the `appsettings.json` file that points at an environment variable and implement a `TryGetValueByProxy` extension method to get the value at startup.
Are you sure? He gives benchmarks that show reflection is atrociously slow compared to even a naive optimization. | Method | Mean | Error | StdDev | Rank | |----------- |-------------:|------------:|------------:|-----:| | Reflection | 5,426.419 ns | 120.0703 ns | 328.6905 ns | 3 | | Dictionary | 32.038 ns | 0.1739 ns | 0.1627 ns | 2 | | Inner | 3.844 ns | 0.0532 ns | 0.0471 ns | 1 |
+1 It is exactly what OP needs, a journey through C sharp but focusing on the newer features from buildup to LINQ onwards
I've used VS for years and am struggling to get Rider set up the way I want it. One feature I really, really like is the ability to see "highlighted" words in the map bar. I have no idea how to accomplish this in Rider and I don't think it's actually possible. And I can't turn off the stupid warning yellows on the map either :(
I should clarify - the first execution is slow, subsequent are always quite fast. I'm a little confused by the terminology he's using: he has nanoseconds in the chart, but refers to milliseconds in the text below it. He doesn't specify how many times he ran the test after compilation. If we're truly talking milliseconds, I have a hard time believing that we're talking 5.4 *seconds* for the reflection call on multiple executions. If we're talking about nanoseconds, 0.005426 milliseconds is not atrociously slow.
If the property isn't `virtual`, your base class's descendants won't be able to tinker with its implementation, anyway. (They can *hide* it, but there's no stopping that.) If somebody can modify the base class's definition, there's really no amount of safeguarding that will prevent them from breaking things downstream. If the killer's already in the house, it doesn't matter so much how many or how strong are the deadbolts on your front door. I tend to think it comes out in about the same place. I. e. public abstract class Foo { public object Bar { get; } // not a private setter, but no setter protected Foo(object bar) { Bar = bar; } } seems (to me) to be semantically equivalent to public abstract class Foo { public readonly object Bar; protected Foo(object bar) { Bar = bar; } } in addition to being *almost* identical syntactically.
He's using BenchmarkDotNet, one of the most comprehensive and sound benchmarking tools. It's generally safe to say that most of the benchmarking gotchas have been accounted for. Feel free to reproduce his results if you'd like. &gt; I'm a little confused by the terminology he's using: he has nanoseconds in the chart, but refers to milliseconds in the text below it. He does confuse the units in his text. I chose to trust the BenchmarkDotNet output, since it appears to be copied verbatim and is a highly analyzed tool. &gt; If we're talking about nanoseconds, 0.005426 milliseconds is not atrociously slow. If I only had to invoke it once, then yeah, I'd agree I don't care about 5400 nanoseconds vs 3. However, this type of lookup can be performed hundreds of thousands of times a second depending on the application, which is why relative, not absolute, performance matters. It's ~1427 times slower than his trick, and ~169 times slower than a naive dictionary. I think that qualifies as atrociously slow, by any objective standard. I'll never understand why someone would argue against performance improvements that are simple to implement.
&gt; I check the dictionary `TypeName&lt;T&gt;.ValueField` is *much* faster than `dictionaryObject[typeof(T)]` when `dictionaryObject` is a `Dictionary&lt;K, V&gt;`, much less a `ConcurrentDictionary&lt;K, V&gt;`. It won't matter for *most* code, but when it does matter using a generic type is hands down a big win over a dictionary keyed on the type or type name.
In winforms that would be a PropertyGrid component.
I was looking at that but couldn't figure out how to get it to work. var startNode = document .Descendants("ROW") .Descendants() .Where(s =&gt; s.Value == "UN1088"); var prevNodes = startNode.ElementsBeforeSelf().ToList(); Gives the error: 'IEnumerable&lt;XElement&gt;' does not contain a defintion for 'ElementsBeforeSelf' and no accessible extension method 'ElementsBeforeSelf accepting a first argument of type 'IEnumerable&lt;XElement&gt;' could be found
Right now every app is using app.config. But that is only specific for each application. I am wandering if something similar to this but a more centralized one. My end goal is to only edit one file that is being used by all the application.
Thanks for the feedback on the units, I'll fix it!
Is this a legacy project? A global packages folder has been the standard for at least a couple of years, so by default you wouldn't even have a packages folder along side your project.
Sorry for the spurious issue on your github, I wrote that just as you wrote this comment.
Interesting, not sure how that is implemented, but I think using the last code sample I could recreate this class. I'll give it a try when I have time and compare the performance
nameof could be used of the table has the same name as the class, but in my example the table is plural while the class is singular.
If all the applications are running on the same machine, then I'd probably just pick a spot in the registry to keep it. Make your own key in HKLM:\SOFTWARE and store a string value with the connection string. If you're storing credentials there, you should consider changing your connection string and application so that the current user is used instead.
For me, I’ve chosen it over UWP due to restrictions and limited functionality. Granted, I haven’t tried uwp since last year so maybe it got better, but for now I’m really content with WPF and already have my own controls to make it looks very much like a UWP application.
oh yeah, this particular project has been around since at least 2015 I believe
In theory yes. In reality, Default Interface Methods are a ham-fisted way of creating extension methods. You can't do anything with them that you couldn't already do with an extension method without introducing a `NotImplementedException`, which is even than a normal breaking change because you don't get any compiler warnings.
thanks a lot, The visual studio gitignore immediately cleaned everything up.
I'm not arguing against his implementation, at all, and I'm not sure where you're getting this. My only point is that I believe there's a misconception that .NET reflection is slower than it is, and I think this should be clarified.
I did it !!!!!!!!! Thhaaaanks
*Sigh*. This would not be a pull request. This is copy-paste of 10 lines of code to illustrate a problem, just that. It's not a show-off and it's not for further sharing/collaboration. I did not submit this for code review. Why is my proficiency (or if I'm a proper developer) implicitly questioned, twice? Do people have nothing better to do but judge from atop their high horses? Yes, you're right about "func" and a few other things, and yes, you have several English language mistakes and yet I'm not judging you for that because, hey, they are *irrelevant* to what you're trying to communicate.
The author said reflection was slow, and then showed it was slow. You took issue with his statement that reflection is slow, even though he showed that objectively that reflection is slow for this workload. What gives? You say reflection is not slow, and provide no evidence or argument to back that claim up. What use is your opinion if it's just a bare opinion? Can you provide an example where reflection is a faster approach to solving some problem? So far you haven't bothered to, other than just repeating your opinion.
r is a rectangle y0, x0, y1, x1 are coordinates v is a vector &amp;#x200B; Could it be spelled out better? Sure, but, maaaaan, have I seen way worse, this isn't too bad.
If I'm understanding what you mean by "map bar" correctly (like the one in VS Code), Rider only has the skinny bar that's default in VS but that most definitely does show you highlighted words in green in it. The yellow warnings can be disabled via the yellow lightbulb (or Alt + Enter) and then choose "Inspection -&gt; Configure Inspection Severity -&gt; Do Not Show" for each type of warning. Or if you want something more global you can turn down the Inspection Checking to "Syntax" using the the little head in the bottom right hand corner.
 if (ball.IntersectsWith(rectangle) || ball2.IntersectsWith(rectangle)) { }
"502 Bad Gateway"
Your if clause must have one set of parenthesis surrounding all other parenthesis
The compiler is trying to tell you exactly what is wrong. You should always consider trying to figure out what the message is actually saying. In this case, you're trying to use a member of 'XElement' called 'ElementsBeforeSelf()'. However, 'startNode' isn't an XElement. Rather, it's an 'IEnumerable&lt;XElement&gt;' - Which represents a group of zero or more XElements. You can't call 'ElementsBeforeSelf' on such a group - Rather, you want to call it on the elements of said group. It might be prudent to have a go with 'Select', and it's probably currently very convenient sibling: 'SelectMany'.
This is all fine until you run into CCTV, security barriers, access control and (generally) security sector... Whole thing quickly devolves into activex, various sdk-s built against visual cpp 2008, dongles that emulate lpt ports and xp/server 2008 as recommend environment. Real world is scary, dark and stuck in '00.
Another significant limitation of this is that it relies on the compile-time generic type, which can be problematic in combination with inheritance. Lets say you're writing an XML serializer and want to serialize a model like this: abstract class Entry { public string Name { get; set; } } [XmlElement("file")] class File : Entry { public string Contents { get; set; } } [XmlElement("folder")] class Folder : Entry { public List&lt;Entry&gt; Entries { get; set; } }
That worked smoothly thanks
Thanks !!! It went well
The ol' reddit hug-o-death, seems like.
Fixed a typo, took down the server. Oh well...
lol it’s working now fyi
 [https://quicktype.io/](https://quicktype.io/)
That is on the site. But I think the more important feature is the possibility to build your own query translators.
You need to implement Equals in your "item" class or provide an EqualityComparer to the Intersect method.
Ahh.
This seems a lot like waxing your car to make it more fuel efficient.
Oh yeah, I forgot I did find that the other day. The setting must've reset when my computer rebooted or something. Thanks. Another weird thing that just happened is that I'm debugging and my exception variable is null. I don't even know how that's possible (it's not possible). But the IDE isn't giving me the value even though the runtime knows it's set.
lmao and usually those boooks are junk compared to mainstream teach yourself language X books
Yeah v is but what is it used for? I know it's type. That doesn't give any context. Calling it defaultVector would be a lot clearer.
Look at the end of the day it's a bad habit and doesn't matter what the code is for there's no reason to make it harder to read. And if you're posting it to others for help you definitely want it to be as easy as possible. I was just trying to give some advice.
As an example - If you use var you are no longer tied to the return type. Say you call a method that returns a string, requirements change and it’s now a custom object - you don’t need to change your variable. I generally use var for most things. I usually use Test Driven Development so my methods often start very different to how they end.
In C++ it prevents your code from looking really ugly with angle brackets all over the place. In C# I think var serves as a way to reduce cognitive load to people interested in reading your code. Code written in VAR Style looks cleaner to me.
&gt; Say you call a method that returns a string, requirements change and it’s now a custom object - you don’t need to change your variable. Is there any benefit to doing this instead of using a *dynamic* return type?
Can't help there I'm afraid, never seen that happen with either VS or Rider.
It depends on the project. Generally it's easier to say var myListOfStuff = new Dictionary&lt;string, string&gt;(); than Dictionary&lt;string, string&gt; myListOfStuff = new Dictionary&lt;string, string&gt;(); Sometimes you may be working with a library or custom stuff and things can get quite long.
I admittedly use "var" often. Instead of explicitly declaring the type in code, the type is determined ***at compile time***. Ultimately, the generated code from the compile is identical. Also variables declared with "var" are subject to the same type compilation issues just if you had put in the type name in code. var x = new MyObject(); // x is type of MyObject now x = 356; // compile error can't assign 356 to a variable of type MyObject (operator overloads nonwithstanding) &amp;#x200B; I use it when the type of the object is either 1) can be implicitly determined from visual usage. or 2) the type is not really that important for someone to understand when looking at the code. To be honest, I use it everywhere (as possible), as I'm lazy. The other use is for anonymous types: "var x = new { Test = "this", SomeNumber = 5 };" - That, at compile time, makes a new type for the scope of that variable. In this case you HAVE to use "var" as you would not have access to the type name when writing the code, "x" is still type safe and type determined at ***compile time***. Trying to assign anything else to "x", here, except for another anonymous object with the same exact signature, would give you a compile error.
The reason I went with the doors in a house example was because, at least here at my place, you don't get doors with all the fitments done already. You have to find and fit the right latches, locks etc for each door. So, I thought it is a good example.
Thanks for your input. I'm afraid that I'd start using var as a crutch or out of laziness. The other use is for anonymous types: "var x = new \{ Test = "this", SomeNumber = 5 \};" - That, at compile time, makes a new type for the scope of that variable. I've never seen anonymous types before. If you ran the above code, would you be able to access Test and SomeNumber by referencing x.This and X.SomeNumber? And, would x be the C\# equivalent of a union in regular old C? Thanks
Imho the writing is on the wall, in bold, double underlined and in italics for desktop apps. Coming from a winforms background the most promising technology around now is react and redux with typescript. Only a matter of time before the backend is JavaScript based too. I'm not making this leap yet, c# is still quality for API stuff,
That is a pretty impressive explanation.
Yes essentially you just created an object with compiler making some automatically generated type name. Infact you can use x.GetType() to get the type of it at runtime. You can reflect into it and use it like another other object instance. The real issue is that the type and, especially, the instance is generally only available in the method scope, as there is no straightforward way of accessing the type at run time to generate more instances. You can even make anonymous arrays of objects as long as all the anonymous objects in the array all have the same field (and type for each field). This is how LINQ works for quick, temporary, type-safe projections of enumerable data.
I bookmarked this for reading later because I thought it was about System.IO.Pipelines so the title at least is confusing.
I'm an old guy too. Not punch card-era, but my first professional programming job (30+ years ago) involved a fair amount of Cobol and C. I also think "var" is lazy. I will always (ALWAYS) write string x = "test" as opposed to var x = "test". I pretty much only use var for anonymous types. A lot of the time I will type the code in as "var" then change it to the proper type afterward (usually a code helper will do this for me). But I realize that at least part of this is just me being stubborn and old school.
And despite my general dislike of "var", anonymous types are awesome. So much better than having to write a bunch of stupid little classes just for one-time use like this. So I can live with "var" if it means I get anonymous types :)
Also note: MyObject x = new MyObject(); vs var x = new MyObject(); will compile to the *exact* same IL code
I'm a bit wary of haphazardly throwing weak typing around. This isn't JavaScript, var should only be used in a few select places. &amp;#x200B; If your method returns a string, assign it to a damn string. Makes it much more clear what's happening.
&gt; A few people choose to check those files in for the case when nuget is down or to ensure you always get the exact same copy as everyone else is using. You can use a basic Windows fileshare as a NuGet repository for your company/team if you don't want to take the time to set up one of the private NuGet servers. There's no excuse for putting packages in source control IMO
If you ever used the following code: var name = GetName(); if(name.ToLower() == "nemec") { //do something } And your custom object doesn't have a `ToLower` method, compiling will produce an error rather than silently failing, as it would with `dynamic`. Of course this also means the promise of "you don't need to change your variable" is not always true.
The whole terminal environment, while it's definitely [rather obtuse in many ways for very historical reasons](https://www.linusakesson.net/programming/tty/), is still the basic interface available for a huge amount of really important software. Text interfaces and the environment variable / flags systems are relatively simple to work with for developers, and more importantly: computers don't like working GUIs, humans do, and it's worth remembering that a whole lot of software is successful because it can be integrated well with other software. And at least in my experience: if you have to use the terminal enough in order to work with software that requires it, you end up getting the same sense of familiarity and the level of ability to 'just know' how to make something work the way you'd like it to with terminal programs. It's a different means of interacting with the computer, and probably harder for humans to adapt to than the GUI way, but it is nonetheless a way you can learn and become comfortable with in time, and if you do so you'll even find things that are much easier to do in the terminal world than in the GUI way in the same way the GUI way is obviously better at representing data and interactions visually.
You misunderstand what var means. It is not weak typing or dynamic typing. It is just as strong and static as writing the actual type name. Main difference is that the compiler looks at the right side, figures the type (just as it would do without the var) and substitutes that for the left side. And then that type is ”written in stone”. The main benefits (IMO) are less repetition, slightly less code to read and process for me, and that it pressures me to name things correctly and meaningfully.
I am assuming you need this for a class, so I did two pretty basic versions [here](https://tio.run/##hZFNS8QwEIbPya8Yemqh9g9UhdWDlxVEDx7EQ5rOdgNpgpnsiiz97XX6JV0VNpAX5oPnzUw0XWkfsO8PZFwDL18UsS3lOiq2xn38St17a1FH4x0VD@gwGF1Kqa0igqfgm6BakCcpKKpoNBy9qeFRGZdSDIx5ewcVGspACm4SW0PxeqrcguVgAzfg8BPWhTSDEyRKJTlrtVI9aFX91apOoMuZLwbm3SXmORnyM1qNIwvmI0RAOtj4L7P8aWPvHW9X6T3MkwOBcdOMw/Tj@MLs0vGFvFYXeUuUUpYNhbE6WxWbuuZ8Oaam9mds/RGXZCeHe8l6gmWLNTuSt1i8BhORP3qhMayTXd9/Aw). AllCommon compares list A to list B. If item A is found in list B, item A is added to the result list and removed from the B list. AllCommonIntersect uses the Intersect method when comparing A to B.
&gt; 1) can be implicitly determined from visual usage. or 2) the type is not really that important for someone to understand when looking at the code It also makes editing later easier; also IMO its a good way to catch some code smells. If the code is unreadable due to "too much" use of the var keyword its a red flag that you may need to re-factor the code as it is very likely you are doing too much in a single method or class.
If your organization doesn't have code standards regarding it, use it as often as you want. If we all listened to grey beards we would be declaring all our variables a the top of our methods and liberally using `goto`. Some things aren't worth worrying about, and with modern IDEs, I think "when to use var" is one of those niggling, little details. &amp;#x200B; If you want to know what some of the C# gurus think on the subject, [Jon Skeet](https://stackoverflow.com/a/236886) and Eric Lippert think using `var` is perfectly fine. &gt; Implicitly typed locals are just one small way in which you can deemphasize the how and thereby emphasize the what. - Eric Lippert
Kinda hard to freeride when aiming for BSD or MIT licensing and trying to avoid even GPL licensing.
This is a quicker alternative to using a dictionary.
The KeyedByTypeCollection&lt;&gt; uses the KeyedCollection&lt;&gt; as base class and makes it easy to manage types. It is however not faster than using a Dictionary. &amp;#x200B; The reason it is slower is explained in this StackOverflow post (along with many more valid points and differences): [https://stackoverflow.com/questions/7566657/dictionary-or-keyedcollection](https://stackoverflow.com/questions/7566657/dictionary-or-keyedcollection) I quote: &gt;KeyedCollection keeps your items in the order in which they are added (the first item added is at index 0 and the last added is at the last index). Dictionary does not (or at least it is never guaranteed to do so). &gt; &gt;This extra benefit of KeyedCollection does have a small performance cost. Under the covers, you pay the cost of maintaining both a Dictionary and a List.
It was just a comment. I stand by it. It wasn't a criticism of the author's article overall, and certainly not you. You seem to be making it personal. You enjoy arguing with strangers on the internet, don't you? Good luck.
Use something like React (see [Skype UWP app](https://www.windowscentral.com/microsoft-updating-its-skype-app-windows-10-new-design-and-more) for example) or Xamarin if you want cross platform support. Otherwise, UWP works fine. People say UWP is restricted, but since you are going to have full control over the touch screen device, you can [open a TCP connection to your Win32 app](https://docs.microsoft.com/en-us/uwp/schemas/appxpackage/uapmanifestschema/element-uap4-loopbackaccessrules) installed with full admin access and do whatever you want.
&gt;The real issue is that the type and, especially, the instance is generally only available in the method scope, as there is no straightforward way of accessing the type at run time to generate more instances. That's not entirely true, there is syntax now to declare these types for returning. This will compile and callers can use the .This and .SomeNumber property on the returning tuple. Alternatively you can assign directly to two variables on return. public (string This, int SomeNumber) GetTuple() { return new { This = "That", SomeNumber = 5 }; }
(Sorry this so long...) I understand that from like eg C/C++ perspective one should be explicit and avoid things like this. But with your example string x = ”test” the type is already clearly visible as the value is quoted, and it is not needed on the left side when reading the code (by human or compiler). I don’t like to add things in code when they do not add value and leaving them out doesn’t make it any less clear or understandable. The benefits of course become more evident with things like functions returning instances of more complex types. I could write List&lt;Customer&gt; customerList = GetCustomerList(); Or I could write var customers = GetCustomers(); And the code is shorter and nicer. Sure, I don’t see it is a List&lt;T&gt; but the naming is suggestive and the and your ide tools tell you that instantly with just a mouse hover. When coding I actually think about stuff like that and if something doesn’t seem evident and discoverable, I change the naming or refactor slightly or sometimes even add the full type instead of var. (though this is not often)
That isn't really an anonymous type, though. I think it is a ValueTuple and uses syntactic sugar to process "field names" as under the hood the property/field names are actually "Item1", "Item2", etc. Anonymous types are actual types with public fields given the actual name you give each field (and will look like that in the generated IL). While it solves a similar issue, I don't think this generates a type at compile time and treated quite a bit differently by the compiler. (going by memory here)
Surprisingly many people (that code .NET for a living) still are confused about things like var, dynamic, even Object. Some look back to VB and think var is like Dim or Variant.
"var" is syntactic sugar. It is still completely statically typed. "var x = new MyClass();" compiles to the ***same*** ***exact*** ***code*** as "MyClass x = new MyClass();". and in either case "x" is now restricted at compile time to the type of "MyClass". now, using "dynamic" is weak typing...
Why would it be a crutch? It produces the same result with less code so yes it is lazy, but lazy is a positive attribute in programming.
"dynamic" is run time weak-typing. "var" is syntactic sugar that is a shortcut for not having to specifically code the type name, but is always statically typed (the compiler inferences the type on the RHS of the assignment). "var" and "dynamic" are VERY VERY different. In fact, with intellisense, if you hover over "var", it will show the type name of the variable being declared. You get all the intellisense you normally would. "dynamic" does not do any of this, method/property resolution is resolved at run time.
You asserted your opinion, provided no argument or evidence for your opinion, and did so in the face of objective evidence that indicated the complete opposite of your opinion. Gunderson: Reflection is slow. Gunderson: Here's evidence. You: Reflection isn't slow anymore, I swear. You: &lt;crickets&gt; What the hell did you think would happen?
I'm seeing some misinformation in this thread. The var keyword tells the compiler to infer the type of the variable, the variable is still statically typed. The type of the first value assigned to that variable will be used as the type of the variable (if the compiler can infer it, otherwise you don't use var). &amp;#x200B; Those who say this is "lazy" are out of touch. Why don't they write their own compilers, frameworks, and operating systems while they are at it? Hope they aren't touching those "lazy" generics either, because the compiler creates classes for those under the hood. &amp;#x200B; It's all personal preference at the end, but I always use var when possible: * Easier to write * Easier to read (less shit to read) * In many/most cases the type name is redundant, i.e: * **List&lt;string&gt;** myFavoritePornUris = new **List&lt;string&gt;**(); * var myFavoritePornUris = new **List&lt;string&gt;**(); * If you struggle looking up the types of a bunch of variables you can use that as a signal to refactor something getting a bit big for its britches * Easier refactoring (no extra variable definitions to update)
Had to do this once when there was no other option (win ce, mobile). Use your panels to show/hide but you may have to write a traffic cop type of monitoring class which keeps track of what is on top or exposed or visible or enabled but yeah, do it at the panel level then at the component level when necessary. You may have to use the topmost property lots, zorder and reposition the panels as needed with top/left values. &amp;#x200B; This was a side-project by my full time employer and I lead the team, wrote the codes and databases, interfaced with other ancient junk, and all sorts of stuff you weren't supposed to do at the time. Paid off my car and all of my bills with the cha ching. &amp;#x200B; If you have any question, i'll try to remember what i did. It was a very long time ago. &amp;#x200B; Happy coding!
Complete the C# Yellow Book, then the Pluralsight C# path, and then pick a .Net specialization path on Pluralsight. Plus mix in reading, as a reference, C# in a Nutshell, and C# in Depth.
Create an integer such as hitcounter. At the beginning hitcounter = 0, after each hit, just add one to the hitcounter. then check if hitcounter is 3.
It is impossible to disallow null, which is why the language doesn't have this feature. Because memory doesn't come from nowhere and must have some value upon allocation. What would it be for a reference if not null? Or for a struct if not 0? Even the new [non-nullable reference types in C# 8](https://devblogs.microsoft.com/dotnet/nullable-reference-types-in-csharp/) are just a static analysis tool and same for any other language with \`Option&lt;T&gt;\`. But is a very promising way of forbidding null, just understand it is a compiler feature and there is no other way.
&gt; Also names like v and r. The name should tell me what it's used for not it's type. Like defaultVector would be way more useful. It's not default vector. It's really a temporary variable, and the whole lambda is a throwaway thing to test perlin noise, really. So, thinking of a suitable long descriptive variable name like perlinSampleCoordinates, where I just use them in the next line as ... perlin sampling coordinates, and that's it, well, it's redundant. For a function that's going to get deleted real soon. &gt; And if you're posting it to others for help you definitely want it to be as easy as possible I was providing a minimal context for the compile error, I did not want anybody to try and understand what the function was doing. I'm experienced (&gt;10 years), mostly solo programming though, even profesionally, as the job title does not always contain "programmer".
I understand, the reason I'm trying to create this is to force a developer to always explicitly handle the possibility that the value is None. Right now i'm looking into using implicit conversions so that if someone tries to return null, when the function's return type is Option&lt;T&gt;, it gets turned into None&lt;T&gt;, but it doesn't seem to really work
An important implementation detail is that `None == null`.
I just keep thinking Asp.net web form controls. Pretty much same principle.
Yo. I am always looking for C# friends
&gt;An important implementation detail is that None == null. Didn't think of that! But it seems that for a switch statement, you'd need an explicit case for null and one for None, unless i'm misstaken?
 Yeah I see it now. Didn't spot the increases before. Is that a performance thing? How much of that is c#?
I know. But read through that article, it describes all the really hard challenges to make this work, and even why it STILL doesn't sometimes.
I really prefer client-side Blazor, and regard server-side only as a stopgap (though it has some nice properties like fast startup, so a mixed mode is also worth trying out).
Have a look at Language-Ext on GitHub.
According to Microsoft, Linux is more popular than windows on *Azure*. https://www.zdnet.com/google-amp/article/microsoft-developer-reveals-linux-is-now-more-used-on-azure-than-windows-server/ "Linux is largely what runs enterprise computing both on in-house servers and on the cloud."
Thanks, I actually liked your recommendations what I've found on google most of them are about game engines and game development but I'm not really into that. But I am too lazy to read books, unfortunately... I will try but I think I'm not gonna last long I prefer video materials.
Because it's factually incorrect?
I’d be up for working on something. I have done c# as a hobby for a few years but never worked on a a project with others.
The type of the variable declared with \`var\` is known at compile-time and cannot change, so it's essentially just a way to avoid boilerplate. To me, there's no reason to ever explicitly specify the type unless the compiler needs it as a hint. Some languages with stronger type systems than C# let you leave out all type hints and still statically guarantee the types in your program are correct at compile time, and using \`var\` is similar to that.
Out of curiosity, do you work with Node? If so, do you have a degree or was it just self-learning?
Yes I work with node and I've self-learned it
The concept? Basically, when you and to harnest the power of your multicore processor, you will need to create other threads. That is really usefull when you are in a UI of some kind. Then you have a button that performs a heavy job. During that time, your app UI will be frozen. If you use async and wait, the problem is solved.
I see. What I use to learn C# is [this](https://www.edx.org/course/introduction-to-c-2)
Thanks
You can try that yourself. create a method with Thread.Sleep(5000)
async await isn't really interested in threads. You can await a task that instantly returns a completed task, no additional threads.
I'm (90%) sure that the implementation uses threads.
I say that because I find easier to just use threads instead of async and await. The result is the same.
Follow the shop's coding standard. Var is most useful (i.e. needed) when using LINQ queries, as the result is often not known until runtime. Static typing falls down in that situation. However your punch-card-era coworker is also correct - using var when you don't need to *is* lazy and forces the reader to hover their mouse over the right side of the declaration/assignment to figure out what the type is. In other words, it's use imposes a cognitive burden on the future maintenance programmer (who might be you).
In order to really appreciate where your knowledge gap lies, we need to know what is confusing to you. An await _can_ be thought of as nothing more than this: *Original Code* var theNumberTen = await Task.FromResult(10); That can be translated as: Task.FromResult(10).ContinueWith(antecedent =&gt; { var theNumberTen = antecedent.Result; }); Ignore the tasks and threads entirely, as async and await can work entirely synchronously. There is some complexity in understanding the `SynchronizationContext` surrounding this code, but at a high level, it's simply turning code that would be nested callbacks into inline code. Another sample: var theNumber10 = await Task.FromResult(10); var theNumber20 = await Task.FromResult(20); This could be thought of this way: Task.FromResult(10).ContinueWith(antecedentOne =&gt; { var theNumberTen = antecedentOne.Result; Task.FromResult(20).ContinueWith(antecedentTwo =&gt; { var theNumberTwenty = antecedentTwo.Result; }); }); You can see how the callbacks and wireup will get significantly more complex as more "awaiting" is needed. Regarding the "asynchronous" aspect of the code, await signals the "thread" is paused waiting on the awaitable, and can be re-used for other processing until the awaitable signals it is complete (or faulted). This completes entirely synchrously: // generates a warning, since no await is used internally public async Task&lt;int&gt; SomeMethodAsync() { return 10; } var theNumberTen = await SomeMethodAsync();
Are you on discord? Its pretty good for c# help. If you look for popular youtube tutorial peoples, their discord should have a programing help channel
Structs can't be null. That's really the key here. `public struct Option&lt;T&gt; {}` handles the bull issue, especially if the default constructor creates a `None`
&gt; How much of that is c#? What do you mean?