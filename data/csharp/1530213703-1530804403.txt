Ah sorry, should've pointed out at start that I don't use a proxy and I have my firewall off (just for testing purposes). It's a direct modem connection. Also, VS+NuGet works flawlessly in a Windows VM I use for testing (using VirtualBox), so for now I install the required packages using VS in a VM, then copy the solution locally which of course is a hassle... I feel there is something with my local PC network configuration that NuGet doesn't like, but I have no idea what might be the problem. I don't have any issues with my PC apart from this one.
&gt; Interfaces remain contracts with this change. The nature of the contract itself changes though - there are two sides in a contract, and this blurs that distinction. The problem is that you can add a method to an interface with a default implementation, and that implementation gets passed to classes which inherit that interface. This separation of behavior from classes means that classes which inherit interfaces may also inherit behavior which you don't actually want. Let's say you have an interface `IData` with a few abstract methods. One implementation is `PublicDisplayInfo` and another implementation is `DecryptedPrivateDisplayInfo`. Later in the project development, another programmer notices they are writing a lot of repetitive string formatting code in the various `IData` implementations to prettify displaying to a terminal. So to reduce work, they add a `ToDisplayFormat()` method to `IData` with a default implementation. `DecryptedPrivateDisplayInfo` inherits that default implementation. However: the business requirement is NOT that `DecryptedPrivateDisplayInfo` prettifies the data in the display, but instead shows "**********", unless the user specifically marks a "display private data" option. So by providing a default implementation to an interface, you propagated the wrong business logic down the line, in a way that's difficult to track backwards. And it's easy to make a mistake like this, since all the other `IData`s need a standard prettified string. A developer who doesn't really understand what `DecryptedPrivateDisplayInfo` is doing - and might not even know it exists! - can still change its behavior. I know there are protections against this in the feature proposal. But they aren't as restrictive as the good old purely abstract .NET interface. And these sorts of confusing inheritance bugs have bitten a lot of projects in non-.NET languages. IMO the rigid organization of abstraction in .NET makes the overall application architecture much easier to reason about, even if it involves a bit of repetitive code, or even a .tt tool. To me, this change feels like it would put more architectural organization in devs' heads and less in the code itself, and the impact this would have on *teamwork* has been a bit understated in the debate. So while it might be a productivity boost for a one-person team (I've written code like that), I think it could lead to maintainability nightmares in an organizational setting.
I don't know about your question, but I use BearLibTerminal in .NET Core for an ASCII renderer. All you have to do is pull the [Compatibility nuget package](https://docs.microsoft.com/en-us/dotnet/core/porting/windows-compat-pack)
The issue lies in the fact that there isn't one single source of a console in Linux. What the console does, how it looks, how it treats the output streams from a program... it's all down to which terminal program you're using. In Windows, there's one console, and it's built into the kernel - this is not the case on Linux and Mac. The code you have relies entirely on the way the Windows console works with data. There is no guarantee a Linux console does the same thing. Just as a quick example, my terminal font, size, columns, cell size, etc, are all determined by my terminal program or my system theme. It's the same thing in Windows, but it works because Windows only has one console. My recommendation is to use an existing ASCII graphics library that deals with this in some other way, or write a System.Console-based version.
Once you pinvoke Windows DLLs, your app is pretty much stuck to Windows.
Have you been installing via the visual studio UI or the package manager console? If you've been using the UI, you might try using the 'nuget' CLI commands; if those fail in the same way then at least you've ruled out Visual Studio as the source of the problem.
Also, read the Windows Store TOS. My hunch is they will have issues with this unless have specific permission to do so
The manual is still a work in progress but here is the project they are working towards, I used a template. It runs an sqlite db. https://github.com/Netchicken/VisitorManagement 
Assuming this is .Net and you are using forms. https://msdn.microsoft.com/en-us/library/system.windows.forms.control.dragover(v=vs.110).aspx
Didn't know about that, thanks. But I only gave one example, to not throw a bunch of code on here. It's ApplicationData.Current.LocalFolder; that I need to find something else for. 
Thanks for the help. I'll play with this in a little while. Does this not use, Windows.Storage? 
Not yet, because the user currently must edit the three class files, to upload a course that is desired. As soon as I have that part ready, so that nothing needs to be coded for a course, it will be available for free in the store. 
I've tried both ways, doesn't work either way. For the record, NuGet used to work fine for me, but something (VS update or something else?) at some point broke it. 
No, it uses the same System.IO that's been in there since the beginning. Note that this assumes that you may have to adapt the rest of the code to rely on this assumption that the file resides in (your platform's equivalent of) the local user application data special folder.
I want to support reddit by allowing ads to show up, but this company's ads were the last straw: I installed an ad blocker.
He is using WPF.
Thanks!
lol I have a little more work to do for the UI style. It looks a little different now than it does in the picture. I might change it to look more like the calculator app.
Yea, but that's no problem because I have the PInvocables class in a DLL all on it's own, I'd just create a different DLL with the mac/linux pinvokes and link to the different one based on which platform I am targeting. I'm starting to think that I'll likely have to create 2 or three versions for linux/mac (On for each of a set of 'popular' terminals and System.console fallback in case none of the expected terminals are available... like a software render fallback from an opengl wrapper or some such. 
That's a good idea... I'll look into that if I can't get a native console solution working. 
Been using Swashbuckle for a while now. So far I must say that it’s great. Haven’t figured out how to make Swagger retrieve OAuth 2.0 refresh tokens though 
Implement your own 'console' if it's not available. Essentially a cut down/optimised System.Console.
&gt; toggling the console visibility on and off What does this mean? Hiding the window? Unlikely you will have success doing that on Linux, because it would be different for every terminal program and, unlike on Windows, there are lots. &gt; be able to set the font I think this will be a similar problem.. lots of ways to do it for different terminals. The rest you may be able to get away with pinvoking ncurses: https://www.gnu.org/software/ncurses/
Hay. Sorry this is a little off topic. I've recently started using different UI packages (Metro UI,etc) for WinForm applications from Nuget.when I publish an application I get an error saying the UI library needs to be added to THE GAC ( Global cache). How do I go about this? YouTube is filled with a ton of video.. 
Shameless plug incoming: You can't do this with normal DllImport unless you override the assemby resolution logic, which tends to get messy quick. This is a severe deficit with .NET Core, however, I've written a library that solves most of these issues. I've got a guide here, http://sharkman.asuscomm.com/blog/an-introduction-to-adl/ and you can get the source on git https://github.com/Firwood-Software/AdvanceDLSupport and the package from NuGet.
Nice concept really a time saver. 
You aren't going to be able to just swap out kernel32.dll for some Linux/Mac Libraries. In many cases you won't be able to achieve what you want with external library calls. As an example, GetConsoleWindow() on Windows retrieves the window handle of the console window. Linux doesn't have Window handles, Windows are handled by the desktop environment/X11. So that has no equivalent. Otherwise: [ShowWindow Function](https://msdn.microsoft.com/en-us/library/windows/desktop/ms633548%28v=vs.85%29.aspx?f=255&amp;MSPPError=-2147217396) Of course the Window Handle isn't something we'd be able to utilize here but your wrapper doesn't expose the Handle so that's good. On Linux window management is done differently by each desktop environment. Generally, you interact with the Desktop environment by invoking specific command line applications with specific arguments; those are effectively the "API"; Gnome for example has DBUS, KDE you can interact with kdotool, and so on. Each one is different. I can't find the OS X equivalents with a quick search, but I would imagine somebody more experienced with OS X would have a good idea. And that is *just for ShowWindow*! That's probably the simplest thing you have in that class! You might be able to do some of the others like changing fonts via the same API routines (DBUS/kdotool/wmctrl calls), but others are going to be wildly different. in some respects the "Linux API" is more or less the C Standard library- WriteConsoleInput() is roughly equivalent to say _putch from the C standard libraries- but you don't have access to the C standard libraries from C#. 
XD I should probably read the title.
^The linked tweet was tweeted by [@lucasmeijer](https://twitter.com/lucasmeijer) on Jun 27, 2018 21:21:41 UTC (22 Retweets | 149 Favorites) ------------------------------------------------- Loving our hackweek project: "C\# without dotnet". running language feature rich c\# program in 4kb compressed, including runtime &amp;amp; gc. ------------------------------------------------- ^^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •
Good bot
Can you self host this?
I don't know of one, and I recently read about compiling C# on Linux. Also, it seems like a very un-Microsoft and un-corporate thing to do, so I have further doubts. Why do you want to do this?
Convenience
Sure. If I remember, I'll add it to the description for next month's.
Well, the dependencies for a single development system for C# must be several gigabytes. If all dependencies for many platforms were packaged in a binary its size would multiply and become utterly massive. I'm thinking this is infeasible and therefore not been done. I really think development suites are already quite bit when minimally installed on a single system.
When I say portable it's just the lack of an installer, really. For example, I can just copy Android Studio to a folder and symlink the configuration folder, it's not everything inside the same base root folder. I know (from reading the web) the C# environment is a huge beast so I don't even dare trying to do the same thing haha.
Why not use a different language of writing a custom implementation of mscorlib? I can understand if this is for learning but seems like a major liability for production. 
Google gcutil. I think the command is gcutil install &lt;path to dll&gt;
I would look into https://github.com/dotnet/docs/blob/master/docs/core/tools/dotnet-install-script.md Installs dotnet core into specified directory, the script first downloads zip/tarball file which would be portable. 
This is a huge step forward. As far I know this is an experimental project, maybe it will be a product. Computing is turning huge, it will running on several devices types, on several cenarios, requiriments. A tiny almost full feature runtime has place in our world. C# everywehre even on a microenviroment. Other language to comply with these requiriments would be C ou C++, maybe Rust. Really? It would be a step back.
Monodevelop
Rust &gt; c#
&gt;don't allow storing heap objects into static fields Is this so you can manage all object lifetimes with scopes? It's not a huge restriction but I'm just curious as to why it exists. This is really cool stuff though. 
As a web developer this looks like hell to me, but maybe I'm wrong. I am always sceptical about GUIs that produces code. Is this design responsive? Is the code it produces maintainable? How do you add animations? Can you reuse design code in other parts of the app, or do you need to paint it all over again every time? It just feels very limiting watching you click buttons and drag sliders, compared to something like css where there's really no limitations (even if it has a stripper learning curve). Again I might be wrong. The design looked good in the end though.
How is this different from .NET Micro Framework?
Unfortunately not working on F#.
Temporarly. It is work in progress 
Excelent work, by the brief browsing it is so much more intuitive, informative and faster too.
Thanks for your insight
Yeah, I'm aware. But it's a clear and sad sign of Microsoft how much they care and want to support F#. There clearly is no talk between the C# and the F# teams. The C# team runs ahead with whatever they feel like and make use of nasty hacks like using a special `ObsoleteAttribute` that is filtered in newer compiler versions.
\&gt; I'm thinking this is infeasible and therefore not been done I have USB sticks with several gigs on them. \&gt; I really think development suites are already quite big when minimally installed on a single system. The compiler I learned to program on was 16k. Not gigs, not megs, kilobytes. The fact that Visual Studio is so huge is inexcusable. Yes, it's great, but it's still inexcusable. 
Changes for Span are merged in F#; Span is a stackonly type and it and `ref struct`s are marked `Obsolete` so they error at compile time for compilers that can't enforce that rule; rather than pointing at potentially unrelated memory at runtime due to GC moves; which would be very dangerous and hard to diagnose.
They're merged now - way too late. And I understand why they're marked as such, but adding a general purpose attribute to a type that is being filtered out is just a nasty hack because they don't spend time for better solutions.
&gt; way too late Span only was properly released less than a month ago?
For starters: * it's not .NET. It's C# without .NET. * .NET Micro Framework is basically dead.
And work on F# support has only started a month ago. But the coming Span feature was well known before. That's what I mean when I say they don't talk with each other.
Proposal to support Span and ref structs in F# started 4 months ago? https://github.com/fsharp/fslang-suggestions/issues/648
The mssql lib has been sufficient enough for our needs for two years. I’m sure there might be some edge cases, but typical CRUD operations seem rather safe. 
Why are you doing these things.at all... Creating a file via PInvoke? Trying to moving. The console window? Why? First moving the console. Assume there is no window on linux, why you feel you need to do this even in windows is beyond me, simply don’t do it. Creating a file, .net has you covered you do not need a file handle. Reading and writing console input, why can’t you use Console.Readline/ReadKey and Console.Write? PInvoke should be an absolute last resort. 
No, Windows 8 and 10, default to .Net 4, and you have to manually enable 3.5. 
I’m not a fan of top shelf. It adds a dependency that you simply do not need. Creating a windows service is as simple as extending the Servicebase class found in the System.process assembly. https://github.com/jcanady20/ReportHost/blob/master/ReportHost/Service/ReportService.cs All you need to do is wire up the start and stop actions. Once that class is created, next wire the the Main method to launch your service. https://github.com/jcanady20/ReportHost/blob/master/ReportHost/Program.cs In this main we’re checking the environment, if a user has started the app it runs in interactive mode, else it starts the services. Using the base class ServiceBase.Run method. If you want help installing the service take a look at this helper class. This helper requires a reference to System.Configuration.Installer assembly. https://github.com/jcanady20/ReportHost/blob/master/ReportHost/ServiceInstaller.cs And to execute the install and uninstall commands. https://github.com/jcanady20/ReportHost/blob/master/ReportHost/ServiceHelper.cs 
[This page](https://github.com/dotnet/standard/blob/master/docs/metaphor.md) shows it in terms of a development metaphor .NET 4.6.1 and above effectively implement .NET Standard 2.0, as does .NET Core 2.0 and above. If you have a library that conforms to .NET Standard 2.0 then you should be able to reference it from any of those versions. What in particular isn't working? 
You can consider .NET Standard as an interface and .NET Framework and .NET Core as implementations of that interface.
There's a caveat to that regarding configuration files as can be seen in the updated post description, but out of the box without enabling the features - correct.
I hope to understand this one day.
ah, I had it set as .NET F/W 4.5 I was getting an error before &gt;Severity Code Description Project File Line Suppression State Error Project '..\Tweety\Tweety.csproj' targets 'netstandard1.3'. It cannot be referenced by a project that targets '.NETFramework,Version=v4.5'. WindowsFormsApp1 It compiles now but the code doesn't seem to work. Guess I'll have to try do a little more digging. Do you happen to know any other c# twitter libraries for the new API? 
Based on the context of the tweet it looks like it is for running user game scripts like for a mod engine or something like that. In that context C# is probably better than Rust because there are more people who understand C#, the language is pretty beginner friendly, and most advanced developers in game dev are probably familiar with C++...which while unlike C#, is more like C# than Rust.
I'm a beginner so I don't really know what you're talking about, is there any tutorial that is as simple as [this](https://mobiusstraits.com/2018/02/06/using-topshelf-to-create-easily-create-a-net-windows-service/)?
They made a version of C# with constraints (no .net libraries, no reflection and no static variables) where all of the objects are thrown away after the call to run the C# code. That makes running C# have a very small footprint and very easy to reason about its memory effects...things that stop C# from being used in many ad-hoc, scripting, and embedded, and near realtime situations today.
Really great and useful project. But jesus fucking christ do some refactoring ! This is a mangrovia code. I will try to make some cleaning for you
So why did c# need all of that shit in the first place?
Hate the design. I can intuit the hour, it's the minutes that usually make the difference to me, so I'd rehash the interior and perhaps make the planetoids more distinct. It's great to see Blend utilised though. It's damn powerful.
That was a bit snarky, you've done good work :)
Think of it more like a visual HTML editor. It's mostly doing visual tooling. The actual code is done separately. This is one of those "true enough" explanations. There are exceptions.
MSBuild has a standalone installer, but I'm not sure if you can just xcopy it without using the installer. https://stackoverflow.com/questions/25506178/getting-msbuild-exe-without-installing-visual-studio
That shit is really useful for most services and desktop/web/mobile applications...which is where C# is used most today. In other words, C# is good at what it does, but someone wanted to try and made it good at one thing that it typically doesn't do.
&gt; all memory is garbage by definition This guy is my kind of developer
The simplest advice is don't try to do it this way. Don't try and force the test framework into uncomfortable positions. Address the problems in your code and let the test framework do really simple things well. You're abusing state. This is a common mistake, so don't feel bad about it. We went through a phase in the... 00's where everything was a bloody singleton. Focus on why this is happening and then make the code stop doing it.
`--interpreter`
Here's how I keep it straight. Think about LEGO instructions. There is a list of bricks you need, and how they should be assembled to get the required result. So the instructions for the Death Star are not the Death Star. But it doesn't matter if you buy a Death Star kit or individually find all the bricks, so long as you use the right bricks and assemble them according to those instructions you have "The Death Star". You *could* make substitutions, but then it becomes "your Death Star" or something else, and you can't say what you have is what those instructions indicate. In theory, all things that are built with those instructions should be identical and interchangeable. .NET Standard represents those instructions. It's a documentation of the API and tools that represent an implementation, but it is not an implementation. There is an older set of instructions, called "the Base Class Libraries" (BCL), that also represents instructions for something like .NET Standard but more oriented at PCs, not the wider set of devices .NET Standard supports. Part of why .NET Standard exists is it's too hard to have "the BCL, but don't use these parts" when trying to design something like Xamarin Forms. So: * "The .NET Framework", is Microsoft's Windows-only implementation of a lot of things. It implements the BCL, and it implements .NET Standard. It also implements a lot of other things. * Mono's original goal was to implement the BCL for all platforms. It has expanded to be a .NET Standard implementation as well. There are implementations for Windows, Mac, and Linux.. It also implements some things beyond the BCL and the .NET Standard, but also lacks some things outside of those we tend to expect from the .NET Framework. (Like Windows Forms.) * .NET Core is Microsoft's cross-platform implementation of .NET Standard. It's different from "the .NET Framework" in many ways. I'm not sure if it promises to implement the BCL, and it definitely doesn't support everything "the .NET Framework" does. But that does mean it works on Mac/Windows/Linux. * Xamarin is a strange implementation of the BCL (and working on .NET Standard) that's designed to run on iOS and Android. Because of that, it wasn't a "complete" BCL and attempting to use some features could fail. .NET Standard makes it easier to understand if you're compatible with Xamarin because it clearly defines which versions are compatible with Xamarin and those omit the incompatible things. That means each of the three implementations are more of a "Death Star plus extras" in our metaphor. If you write an app to ".NET Standard", it should run correctly on any of those three implementations. This is particularly useful because for a long time, .NET Core was inadequate for many people, but they knew it would be adequate someday. .NET Standard let them start writing code in a way that would work on .NET Core when it became adequate, but use the .NET Framework while it wasn't. Compatibility works only in terms of .NET Standard. That means: * If you write code using .NET Standard, any implementation of .NET Standard should be able to use it. * If you write code using the .NET Framework, Mono, or .NET core: in theory if you're careful and use ONLY .NET Standard things, you can get other .NET Standard things to run it. But if you use anything outside of .NET Standard, it will fail. Applications have to pick "an implementation" like Mono. Libraries can just pick ".NET Standard". So things like NuGet packages tend to be adopting it, but for writing an actual app you need to decide which to use.
Exactly, and title is a bit click bait, of course, but it is true (probably :P )
Never heard of mutation testing. It sounds interesting, but also like something like formal verification and fuzzers. IE, the domain of other people who have less pressing fires to put out in production or less featured/deadline oriented managers. 
There's no correct path of course, but C# should fit nicely for you. Esp if you have extensive PS experience, then the .NET runtime is a natural next progression step. And C# is the lingauge franca for .NET, so obviously good :-) As for resources, I started back in the dark ages, so nothing I have real experience using, but Pluralsight has loads of amazing content. But I'd suggest google and browsing around for and evening and picking some course website, there's so many these days.
Nailed it. Complete with potentially differing behavior per implementation, including PlatformNotSupportedExceptions when the interface is implemented, but the behavior or functionality is not. 
It doesn't *need* them, but if need were our criteria, we'd all be writing programs for literal Turing machines or the lambda calculus.
Having a platform that's split in two is NEVER a good idea. Even if the split only enables new scenarios, it's still incredibly noisy and confusing for the users of the platform. The whole iojs/nodejs split was annoying as well (and frankly, those platforms are "small" compared to .net). Seems reasonable as well, let all the old legacy be supported by closed-sourced extensions (or whatever) to the open source platform.
So, I know this is a weird sub to ask this question in, but why do you love C# so much? Don't me wrong, I like C# too, but I don't see any properties it has that would make it so much better than starting from a different language that already runs without a host runtime and writing your own GC. Follow-up question: Has anyone done a similar effort for java?
We ship it some time already in mono, it's available as `--interpreter` as flag. For Xamarin.iOS it will take some while to do the tooling around it and polish the interpreter further. Blazor (C# in the browser via Webassembly) already uses the interpreter. 
&gt;The actual code is done separately. So it doesn't create code to represent the styling? Is this just used like Photoshop is to create a prototype layout? I don't know how XAML works really, but I have yet not seen a single visual html/css editor that generates good, maintainable code.
Services by default can not enter act with the user desktop. They are meant to be anonymous background processes. Displaying notifications would be the wrong usage for services. Use a standard desktop application, wpf Winford’s etc that minimizes to the task tray. 
Thanks! Does that run on Safari mobile? Might be a temp fix; our system is very clean. 
Use uwp and override the preparecontainerforoverride() to dynamically fetch emails when user actually scrolls into them. 
https://github.com/dotnet/corert
https://github.com/dotnet/corert/tree/master/samples/HelloWorld
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/rustjerk] [u\/gahagg is bold enough to claim that Rust &gt; C# on r\/csharp](https://www.reddit.com/r/rustjerk/comments/8uu8xd/ugahagg_is_bold_enough_to_claim_that_rust_c_on/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
You can tie them together like this: public class GameEvent : ScriptableObject { public object Parameter { get; protected set; } } public class GameEvent&lt;T&gt; : GameEvent { public new T Parameter { get { return (T)base.Parameter; } protected set { base.Parameter = value; } } The new property hides the old one, so it's essentially typesafe so long as you don't screw up `GameEvent&lt;T&gt;`. 
Put simply - in the split out version, your test class Test1 derives from BaseClass. In BaseClass, the private variable "extent" is declared but never initialised, so your Test01 throws a NullReferenceException. The fact you do initialise this variable in BaseClass2 is irrelevant as it is not part of the your Test1 class. BaseClass is part of of your Test1 class as it is the parent (or super) class. 
Can you whip up a mockup example of how your code would use `GameEvent.Parameter` in practice? You can definitely elevate it, but it would become a `public object Parameter {get;}` essentially, losing type safety. Depending on your intended use case scenario, this may be perfectly fine. Otherwise, if your code just has a `GameEvent`, I don't know how you could get its `Parameter` as the "correct type" without casting.
Personal opinion: C# is the current goldylocks language. It's right in the middle - not too verbose, not too succint - just the right amount of functionality and versatility to write code quickly with just the right amount of hand holding. It also helps that VS is such a great IDE for writing C# in.
The issue here is pretty much nothing to do with misusing the test framework, and more to do with fundamentally misunderstanding inheritance in C#. I'd focus on that first before worrying about the test framework.
Awesome thanks! I've started looking on solo learn and some of it does feel quite easy to understand, of course I'm still on the basic stages but it's definitely very exciting. Do you have any good examples of a first program to look into making? I feel the best way I learn is by doing. 
Well, why does your customer want to manually select the items at all? Wouldn't it be be better to give him some selection tools like: company name, range in miles/kilometers, city, post code or something like that? I think features like select all / unselect all / inverse selection could be integrated into a context menu because i guess these won't be used often. The first three comboboxes could be removed and placed before the actual data grid is shown. Sort of like an assistant where you first select the campaign, then the e-mail and lastly the big list with all the possible recipients. HTH.
Mutation testing is a really useful tool to answer the question "are my tests any good?" For example, say you have something like this: bool GreaterThanTen(int x) { return x &gt; 10; } Assert.Equals(GreaterThanTen(15), true); Assert.Equals(GreaterThanTen(5), false); Mutation testing might change this to be `return x &gt;= 10`, or `return x &gt; 13`. Either way, it would then report back and say "hey, I changed the behavior of your method, but your tests still pass". On its own, this might seem like it's not very useful, or is more effort than it is worth. However, consider using this as part of your automatic testing/continuous integration. If you gate on "has the number of surviving mutants gone up", you have quite an easy way to see if new tests/changes are well tested. The idea is that - if you change the code, and your tests still pass, there's possibly something missing.
The issue here is based in the way Unity3D works, that is, inability to serialize generics. Scriptable object is a serialized asset type inside unity. I want to allow assigning of references of type GameEvent, but some classes will need to get the correct parameter type. I guess the client, since it knows what type of game event to expect, will have no option but to cast down to the correct type in any case, so moving it up won't help me too much.
&gt;Is there a way to define this property in the base GameEvent class, so that a reference to GameEvent, which is actually a GameEvent&lt;T&gt; will return correct type, without casting? Absolutely not. &gt;I want to have the Parameter property be a part of the parent GameEvent class, so that it is accessible from clients of the class no matter which type of GameEvent / GameEvent&lt;T&gt; it is in runtime. Essentially, GameEvent is the same as GameEvent&lt;void&gt;, I.E. it has no parameters. Do you have a compelling reason to have an inheritance relationship between these classes? Because it doesn't seem like a good candidate for inheritance. At best, they may be able to share an abstract GameEventBase class. 
This might be the best way to go about it. References to GameEvent will still provide the correct value to clients, and if the client is expecting a GameEvent&lt;T&gt;, it will be type-safe, and the cast (which I guess there is no way to avoid) will be hidden. Thank you!
To answer your last question, "no". The entire point of using generics is to get the "correct type, without casting". If you can't do that (and sometimes you can't - that's ok), you'll have to cast. Just listen to /u/FizixMan and /u/grauenwolf 
Is that not what I said? The trouble is the test frameworks all include weird ass functionality to support weird ass edge cases. So don't fix the tests, fix the code and make the tests simpler.
I have to do this a lot. It's the best way to have both an untyped collection of `GameEvent` objects and still allow for strongly typed `GameEvent&lt;T&gt;` objects where beneficial. 
My first real program was at university (I started late I guess), was a language recognizer that used a simple compression algorithm ala lempel-ziv and by examining the word dictionaries distribution it could guess languages fairly accurately. If that sounds fun, google for some first year comp-sci assignments. Should give you plenty to do. If you'd rather something less abstract, go follow a course, they're almost always building some demo website or application, which you can usually build further upon :)
&gt;Do you have a compelling reason to have an inheritance relationship between these classes? Because it doesn't seem like a good candidate for inheritance. At best, they may be able to share an abstract GameEventBase class. Like [/u/grauenwolf](https://www.reddit.com/u/grauenwolf) said, it is beneficial in some cases, especially when you take into account this is done within the constraints of Unity3D, which means you cannot serialize generic references. I want to be able and attach references in the inspector to all types of GameEvents, and have the client decide what to do with the parameter passed.
Why not use an IGameEvent interface?
Yep. wanted to see if there is some trick I can do to get around the issue within the scope of Unity which adds some more constraints to the plate
This is a desktop app written in WPF correct? Paging isn't really meant for desktop apps, its for web pages. How many rows of data are you working with here?
C# is Java Done Right ^T^M. Just very easy to do many things, although most is Windows specific. Also, VisualStudio is an amazing IDE that no other language can even hope to contend with.
Yes, but Xamarin... 
That is a valid alternative. Which is better in this particular situation depends on additional information such as whether or not `GameEvent` has other fields or methods.
thanks for that. this makes more sense now as to why the author chose .NET standard and also why I couldn't use it with a .NET fraamework 4.5 winforms app.
It creates XAML (Basically XML with a specific schema), and XAML is compiled into code later. This process works well. It's a bit long winded to describe, so I'll limit my description to how we sort of expect people to use it. XAML is XML based and describes code basically. You can never write any XAML and just use code, but XAML makes it a lot easier and provides separation from the code. You'll know MVC from Javascript frameworks of old and new. XAML based systems tend to use a pattern called MVVM. The distinction is moot really, it's the same old separation of concerns we've seen before. Each XAML thing has a DataContext. This is inherited down the chain. So you set the DataContext of a Window to a class instance ViewModel and each of its controls will have access to it because it's inherited and be able to bind to it (I.e. use it bidirectionally, update if it changes, and update it if they change or click, etc). So a button &lt;Button Command="{Binding YoWhyYouHittinMeDogCommand}" Content="Bop" &gt; will create a button which will look for something on the DataContext class (We call them ViewModels) that implements ICommand and is called YoWhyYouHittinMeDogCommand. That command will allow the code to enable or disable the control it's connected to and to launch code when it is triggered. At this point, Blend doesn't need to know about the ViewModel, and one of the benefits is that the ViewModel can be developed in isolated by a "real" coder. In reality it's a bit more crossed over than that if you get clever UI people :) The idea is that you could have a UI specialist build the UI, set up the resources and graphics. Because the concerns are separate, i.e. Clicking, viewing and other UI specific bits are separate from the code that does stuff when you click, or gets stuff from a server for you to view, you can have a totally separate developer build a ViewModel that handles all the code stuff. The benefit is that when the user of the system says "I want a slider not a text box" the UI guy can make that change. Honestly, in reality we usually merge the two roles, but I've known a few UI guys who just did Blend work. One of my favourites was a woman called, ... Let's call her Lara, who would make amazing UI stuff and then build a whole test rig to ensure it operated well before killing people stealing her antiquities. So the analogy is sort of right and sort of wrong. 
It's not a C# interpreter, it's an IL one. You still need to compile.
Yeah, I'm not as on top of .NET versions as I used to be but I think it's safe to say 4.5 predated .NET Standard and can't implement it. It's not that WinForms apps can't use .NET Standard, it's that you have to start with a .NET Standard-compatible framework. Then the .NET Standard library you use is like the "add on" to the Death Star, and WinForms is like "the unconnected stuff I added".
If I run it as a console application is there a way I can deploy it on a users desktop so that the file cannot be accessed or moved by the user without admin privilege? It should run automatically.
I think you misunderstood what I meant. Maybe I wasn't clear enough. When I said code I meant XAML code. This GUI creates XAML code, and I'm questioning how good that XAML code really turns out to be. As I mentioned in my comment, I have not yet seen a single HTML/CSS generator at least that outputs good code, but maybe Blend is an exeption and actually produces high quality maintainable code that you don't need to have a GUI to tweak if you didn't want to. Like, what if you didn't want to use Blend for some reason, could you open up the XAML code and easily work with it directly? It's the same with dragging stuff from the toolbox into a UWP/WPF app, the XAML becomes super messy.
No I get it (I think) XAML is always compiled to code. If you build a UI in XAML, WPF, UWP, Silverlight, you write the code I pointed out and it turns that into OO code. It's a surprisingly simple process. The quality of that code is as good as any code you could knock out by replicating that hierarchy. XAML maps to code simply. Its conventions represent code rather than being interpretations of them. As an example &lt;UserControl ... blah&gt; &lt;UserControl.Resources&gt; &lt;Kitten Name="peeps" /&gt; ... This directly translates to a usercontrol class that has a class of type Kitten instantiated and added to its Resources collection AND sets its Name property to Peeps. Does that make sense? Honestly I have a niche of stuff I explain well, and this one always makes me feel like I'm talking to a lost Spaniard :)
No, that's not what I am talking about. I am talking about the XAML that is being generated by the GUI. Not the code that the XAML gets compiled to.
afk there's a bug in Safari, so Blazor doesn't work there currently. A fix by Apple is the pipeline though. every other major browser works 
Gotcha, sorry. The XAML generate is clean. XAML was designed from the top down to represent Code, specifically UI's cleanly, so there are few optimisations you can sneak in there. It ties in with the "Don't make the UI crazy complicated" logic, but ultimately it outputs XAML and you can do what you like with it after. XAML is always compiled into .NET code, so &lt;Button&gt;boo&lt;/Button&gt; literally just instantiates a class called Button and sets its .Content to "Boo". It's absurdly simple. You can directly code any XAML in a .NET language if that helps and without having to make any decisions. Sorry I was being a dumbass, It's weird trying to understand where someone is coming from right? 
The name might get confused with the C++ package manager "Conan".
No worries. I am still not 100% sold on it. Since the auto generated XAML in visual studio is pretty bad as far as I have seen. How does Blend create responsive designs for example? Like, if you manually wrote the XAML you would put things in grids and panels, right? And you'd use dynamic widths, etc. All auto generated XAML that I have seen has fixed values that sucks for responsiveness. And the XAML is usually unmaintainable for larger apps. Now i am not a XAML expert by any means, but that's just my experience with it. Last time I worked with XAML I wanted to blow my brains out. I think I spent an hour just trying to delete the default animation effect from a button. And then I gave up. After that I haven't touched it at all. I also highly disliked that you put the styling on the actual controls. It feels like inlining css i style tags in HTML, which is an anti pattern.
Would that not be ok if the result is interpreted and does not go to native instructions?
Actually fitting widths and heights is shockingly complicated! I really wish they'd just add some less primitive properties. Actually I could build some extensions to do that (I won't, far too lazy). The XAML generates adequate code. As I said you can read a UserControl and literally code it line by line. The declarative UI part is never the bottleneck to performance. Here it mirrors HTML in a browser. It follows some conventions to allow us access in code behind, but really it's up to it what it does. I do get the pain of overriding default behaviours. They screwed up royally in the way they communicated styles and templates and doubly royally in the way you had to get access to the base styles to see wtf they were doing. Once you get past that (without killing anyone) it all becomes much more intuitive. It's not HTML, it's thankfully not CSS. Personally I think it's way better. There are similarities though :)
&gt; the code doesn't seem to work. If you give us a bit more information, we might be able to help you figure that out.
I've been beating around the bush because there are a bunch of issues here, but ultimately it's just code expressed as XML. &lt;ClassName PropertyName="hi!"&gt; &lt;ClassName2 (set to Content of Parent) /&gt; &lt;ClassName/&gt; You can intuit the exact code that will be generated from this. var a = new ClassName { PropertyName = "hi!" }; a.Content = new ClassName2(); / or inline it above. It is literally just a way of making hierarchies of classes. The underlying framework deals with the rendering, in the same way the browser paints a div.
I think I'll just stick with html and css for now. Maybe I'll try XAML again in the future if I want to create an app. My personal opinion is that css is far easier, less verbose and more flexibile than XAML. But maybe I only think that because I want full control over my design. Css allows for total control without many compromises, you just got to understand how it works. Anyway, thanks for the talk, gtg now.
Why the vertical layout but stretched horizontally? Why the Button to show the selected Group? ComboBox SelectedItem should just show. Why are you labeling the function of the comboboxes outside of the comboboxes? is their default state just empty? why drag to sort? make the Grid headers do the sorting...like a togglebutton This is a VERY basic and ugly but functional layout example you could go with: https://imgur.com/a/mAXCrXK
Stick with CSS for now, honestly if you don't have a need for it, XAML is just a headache. I felt the same way going the other direction. CSS is clunky and weird compared to XAML in my mind :) Make software work, that's the key :) 
Roslyn API?
I specifically remember reading that they will not add a "plugin" aspect to Roslyn because they don't want people going and making a custom incompatible version of C#.
Besides the experimental CoreRT you can bundle a plattform specific CLR. This will create an executable that can run without any additional dependencies, but it's kinda big (roughly 100mb) https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd
It still doesn't change the fact there's the compile cycle. All the interpreter does it take the JIT out of the equation.
I think you might want to try to go the other way. public class GameEvent&lt;T&gt; { Public T Parameter{get;protected set;} } pu
Sounds like you want to use AutoMapper
Note that it doesn't currently create a single executable, it creates a folder full of files.
 No it's not. This has nothing to do with a test framework, much less 'misusing' it. He has a \[OneTimeSetUp\] in one class, and not the one he actual inherits from, so it's never instantiated.
That is also a part of my framework. Problem here again is the inability in unity to assign interface references inside the inspector. The whole issue arises from the way unity serializes references anyways. And the desire to give designers a strongly typed way to assign things in editor. 
With a JIT readily available, what’s the reason to go for an interpreter?
Don't forget that it's also very much in development and a superbly active project overall. Constantly throw new syntactic sugar, new features, improving and refining, etc.
Ok, so you're working in the area, answer these questions: 1) What did you do on your projects. Limit your answer to 3 lines, or 2 sentences. 2) What would you change in the projects you work on? Limit your answer as above. 3) How do you feel your team relate to you. Limit your answer to 1 sentence. 
Do you know T when you are deserializing? Can you deserialize it directly to GameEvent&lt;T&gt; using the data that was created by serializing the non-generic version? 
I don't know why they chose a confusing series of name. I probably would have gone with .NET Framework for Windows, .NET Framework Cross-Platform, and .NET Framework Core. That's descriptive enough &amp; easily shortened to .NET Win, .NET CP, and .NET Core.
You could try to find some certification practice-exams and see how you do with no extra preparation.
I created a new project with framework 4.6.1, referenced the Tweety project I downloaded from GitHub, and c&amp;p the code to register webhook from the [tweety page](https://github.com/mmgrt/Tweety): TweetyAuthContext authContext = new Tweety.Authentication.TweetyAuthContext(){AccessSecret = ACCESS_TOKEN_SECRET,AccessToken = ACCESS_TOKEN,ConsumerKey = CONSUMER_KEY,ConsumerSecret = CONSUMER_SECRET}; WebhooksManager webhooksManager = new WebhooksManager(authContext); var result = webhooksManager.RegisterWebhook("https://something.com/Twitbot"); when debugging it seems to stop running at that last line and I can't get it to step into RegisterWebhook to see what the problem is. If I run the exe in the debug folder I get [this](https://imgur.com/1M2Xumg) error. a little confused to say the least
Yes, but that would fix the Apple restriction part, no?
That doesn’t help, it has to do with being able to assign references directly in the inspector. If a class is generic it won’t show up. Which means I have to create concrete classes for each T. Which in that case, no point in having generics. 
The ExcelDataReader nuget package can help you *read* data from an excel workbook without having excel installed. Use your database and database library of choice to put it into a database.
If you have a Pluralsight account (really everyone should, there's a ton of useful stuff there for a mere $300/yr), you can take different skills tests that will assess your abilities within certain areas.
Hello, thanks for replying and in response to your questions: 1. I created an angular frontend app which communicated with a .net web api backend to get all the required data including: security, user management, data access and storage. 2. I would change the data access layer of the projects I worked on by implementing the repository pattern which would enable better encapsulation and testability. 3. A team would provide a support system in helping to more effectively achieve the project requirements. 
I just read a post which mentioned the Exam-70-483 and I am now trying to find some practice tests to see how I do. Thank you. # 
Removed: Rule 4. You'll have to make an attempt and try to post only the relevant code. Also, your manipulations to the `DateTime` values using calls like `AddDays` or `AddHours` return a _new_ `DateTime` with the new values and keeps the old `DateTime` unchanged. So your code should look like: DateTime Today = DateTime.Today; Today = Today.AddDays(1); Today = Today.AddHours(Convert.ToDouble(Notification[0, 0].Substring(0, 2))); Today = Today.AddMinutes(Convert.ToDouble(Notification[0, 0].Substring(2, 2))); Today = Today.AddSeconds(Convert.ToDouble(Notification[0, 0].Substring(4, 2))); Or you can do it all in one line: DateTime Today = DateTime.Today .AddDays(1) .AddHours(Convert.ToDouble(Notification[0, 0].Substring(0, 2))) .AddMinutes(Convert.ToDouble(Notification[0, 0].Substring(2, 2))) .AddSeconds(Convert.ToDouble(Notification[0, 0].Substring(4, 2))); 
What's the unhanded exception? (Click the details button).
I have done quite a few Pluralsight courses but when I look at some of the job role requirements I still feel like I am a long way off and I end up asking myself do people really know about all these different things. That's why I wanted a way to test myself to see the level that I am at.
Find jobs that do the sorts of things you want to do, apply, and try to get in. If you don't have all the exact skills necessary to do precisely what they need on day one... well, it's just you and basically everyone in tech! If you are confident that you can learn and adapt quickly, and willing to put in the work, that's about as good as it gets. Alternatively, if you find yourself not getting gigs because you're failing certain types of questions, this will answer the question of where you need to improve better than any sort of skills test would.
Quite a long message: ------------------------ See the end of this message for details on invoking just-in-time (JIT) debugging instead of this dialog box. ************** Exception Text ************** System.IO.FileNotFoundException: Could not load file or assembly 'System.Net.Http, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified. File name: 'System.Net.Http, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' at Tweety.Webhooks.WebhooksManager.RegisterWebhook(String url) at DotNetStandardTest.Form1.RegisterWebhook() in F:\Dev\Tweety-master\DotNetStandardTest\Form1.cs:line 54 at DotNetStandardTest.Form1.Form1_Load(Object sender, EventArgs e) in F:\Dev\Tweety-master\DotNetStandardTest\Form1.cs:line 36 at System.Windows.Forms.Form.OnLoad(EventArgs e) at System.Windows.Forms.Form.OnCreateControl() at System.Windows.Forms.Control.CreateControl(Boolean fIgnoreVisible) at System.Windows.Forms.Control.CreateControl() at System.Windows.Forms.Control.WmShowWindow(Message&amp; m) at System.Windows.Forms.Control.WndProc(Message&amp; m) at System.Windows.Forms.ScrollableControl.WndProc(Message&amp; m) at System.Windows.Forms.Form.WmShowWindow(Message&amp; m) at System.Windows.Forms.Form.WndProc(Message&amp; m) at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message&amp; m) at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message&amp; m) at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam) WRN: Assembly binding logging is turned OFF. To enable assembly bind failure logging, set the registry value [HKLM\Software\Microsoft\Fusion!EnableLog] (DWORD) to 1. Note: There is some performance penalty associated with assembly bind failure logging. To turn this feature off, remove the registry value [HKLM\Software\Microsoft\Fusion!EnableLog]. ************** Loaded Assemblies ************** mscorlib Assembly Version: 4.0.0.0 Win32 Version: 4.7.2558.0 built by: NET471REL1 CodeBase: file:///C:/Windows/Microsoft.NET/Framework/v4.0.30319/mscorlib.dll ---------------------------------------- DotNetStandardTest Assembly Version: 1.0.0.0 Win32 Version: 1.0.0.0 CodeBase: file:///F:/Dev/Tweety-master/DotNetStandardTest/bin/Debug/DotNetStandardTest.exe ---------------------------------------- System.Windows.Forms Assembly Version: 4.0.0.0 Win32 Version: 4.7.2558.0 built by: NET471REL1 CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System.Windows.Forms/v4.0_4.0.0.0__b77a5c561934e089/System.Windows.Forms.dll ---------------------------------------- System Assembly Version: 4.0.0.0 Win32 Version: 4.7.2558.0 built by: NET471REL1 CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System/v4.0_4.0.0.0__b77a5c561934e089/System.dll ---------------------------------------- System.Drawing Assembly Version: 4.0.0.0 Win32 Version: 4.7.2558.0 built by: NET471REL1 CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System.Drawing/v4.0_4.0.0.0__b03f5f7f11d50a3a/System.Drawing.dll ---------------------------------------- System.Configuration Assembly Version: 4.0.0.0 Win32 Version: 4.7.2558.0 built by: NET471REL1 CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System.Configuration/v4.0_4.0.0.0__b03f5f7f11d50a3a/System.Configuration.dll ---------------------------------------- System.Core Assembly Version: 4.0.0.0 Win32 Version: 4.7.2558.0 built by: NET471REL1 CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System.Core/v4.0_4.0.0.0__b77a5c561934e089/System.Core.dll ---------------------------------------- System.Xml Assembly Version: 4.0.0.0 Win32 Version: 4.7.2612.0 built by: NET471REL1LAST_B CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System.Xml/v4.0_4.0.0.0__b77a5c561934e089/System.Xml.dll ---------------------------------------- Tweety Assembly Version: 1.0.0.0 Win32 Version: 1.0.0.0 CodeBase: file:///F:/Dev/Tweety-master/DotNetStandardTest/bin/Debug/Tweety.DLL ---------------------------------------- System.Runtime Assembly Version: 4.0.0.0 Win32 Version: 4.7.2558.0 CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System.Runtime/v4.0_4.0.0.0__b03f5f7f11d50a3a/System.Runtime.dll ---------------------------------------- System.Threading.Tasks Assembly Version: 4.0.0.0 Win32 Version: 4.7.2558.0 CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System.Threading.Tasks/v4.0_4.0.0.0__b03f5f7f11d50a3a/System.Threading.Tasks.dll ---------------------------------------- ************** JIT Debugging ************** To enable just-in-time (JIT) debugging, the .config file for this application or computer (machine.config) must have the jitDebugging value set in the system.windows.forms section. The application must also be compiled with debugging enabled. For example: &lt;configuration&gt; &lt;system.windows.forms jitDebugging="true" /&gt; &lt;/configuration&gt; When JIT debugging is enabled, any unhandled exception will be sent to the JIT debugger registered on the computer rather than be handled by this dialog box. 
You're welcome, happy cake day
I guess you tried this...https://forum.unity.com/threads/how-do-you-get-a-generic-template-class-to-show-in-the-inspector.341367/ The concrete class inheriting the generic would at least be simpler that writing each out by hand, you could probably generate the code for them.
I don't really see the disadvantage, aesthetics aside. 
haha I didn't even realize ... thanks 
Ok, so take the pluralsight Skill IQ test and find out. 
Okay, this is an easy enough thing to fix! Open the references you have in the Visual studio project and remove System.Net.Http, i.e. project =&gt; add reference =&gt; remove the reference. Note I'm NOT talking about Nuget at this point, this is a hard reference to the .net Framework System.Net.Http. Next, open your nuget package manager and if you haven't got a reference to the Nuget version of System.Net.Http, add it. If you already have a reference to it, remove it and add it again. Hit rebuild and run. 
I write code a lot faster with Resharper or IntelliJ IDE. But if you want a ton of features then VS is the best. 
Yeah. That’s my current implementation, just make classes that cover my basic usages. I wanted to see if our collective brains have a nicer more generic solution, even ones that I can allow designers to quickly create any kind of event they want without needing a programmer. I’ll just have to make an wizard to allow them to generate any type of event they want, one that will make a concrete class. 
I recently started applying to C# jobs both junior and intermediate positions but sometimes even the scope of the junior positions seem to be much more than I know. That's why I have been wondering about my knowledge level.
PluralSight has an assessment tool built in for C# and a few other languages. It's not by any means a standard way of testing, but after having my team take the tests I've found that they were fairly accurate as far as my team went. You can get 3 months free with a Visual Studio Dev Essentials account and you would find the assessments here: [https://app.pluralsight.com/paths/skills](https://app.pluralsight.com/paths/skills)
ah lovely. I got a similar message for newtonsoft. Did the same steps to sort that out but now am getting another error. How does one go about knowing how to deal with these sorts of errors? See the end of this message for details on invoking just-in-time (JIT) debugging instead of this dialog box. ************** Exception Text ************** System.AggregateException: One or more errors occurred. ---&gt; System.Configuration.ConfigurationErrorsException: Configuration system failed to initialize ---&gt; System.Configuration.ConfigurationErrorsException: Unrecognized configuration section dependentAssembly. (F:\Dev\Tweety-master\DotNetStandardTest\bin\Debug\DotNetStandardTest.exe.Config line 6) at System.Configuration.ConfigurationSchemaErrors.ThrowIfErrors(Boolean ignoreLocal) at System.Configuration.BaseConfigurationRecord.ThrowIfParseErrors(ConfigurationSchemaErrors schemaErrors) at System.Configuration.BaseConfigurationRecord.ThrowIfInitErrors() at System.Configuration.ClientConfigurationSystem.EnsureInit(String configKey) --- End of inner exception stack trace --- at System.Configuration.ConfigurationManager.PrepareConfigSystem() at System.Configuration.ConfigurationManager.GetSection(String sectionName) at System.Configuration.PrivilegedConfigurationManager.GetSection(String sectionName) at System.Net.Configuration.SettingsSectionInternal.get_Section() at System.Net.Http.HttpClientHandler..ctor() at System.Net.Http.HttpClient..ctor() at Tweety.Webhooks.WebhooksManager.&lt;RegisterWebhook&gt;d__6.MoveNext() in F:\Dev\Tweety-master\Tweety\Webhooks\WebhooksManager.cs:line 86 --- End of inner exception stack trace --- at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions) at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification) at System.Threading.Tasks.Task`1.get_Result() at DotNetStandardTest.Form1.RegisterWebhook() in F:\Dev\Tweety-master\DotNetStandardTest\Form1.cs:line 56 at DotNetStandardTest.Form1.Form1_Load(Object sender, EventArgs e) in F:\Dev\Tweety-master\DotNetStandardTest\Form1.cs:line 36 at System.Windows.Forms.Form.OnLoad(EventArgs e) at System.Windows.Forms.Form.OnCreateControl() at System.Windows.Forms.Control.CreateControl(Boolean fIgnoreVisible) at System.Windows.Forms.Control.CreateControl() at System.Windows.Forms.Control.WmShowWindow(Message&amp; m) at System.Windows.Forms.Control.WndProc(Message&amp; m) at System.Windows.Forms.ScrollableControl.WndProc(Message&amp; m) at System.Windows.Forms.Form.WmShowWindow(Message&amp; m) at System.Windows.Forms.Form.WndProc(Message&amp; m) at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message&amp; m) at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message&amp; m) at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam) ---&gt; (Inner Exception #0) System.Configuration.ConfigurationErrorsException: Configuration system failed to initialize ---&gt; System.Configuration.ConfigurationErrorsException: Unrecognized configuration section dependentAssembly. (F:\Dev\Tweety-master\DotNetStandardTest\bin\Debug\DotNetStandardTest.exe.Config line 6) at System.Configuration.ConfigurationSchemaErrors.ThrowIfErrors(Boolean ignoreLocal) at System.Configuration.BaseConfigurationRecord.ThrowIfParseErrors(ConfigurationSchemaErrors schemaErrors) at System.Configuration.BaseConfigurationRecord.ThrowIfInitErrors() at System.Configuration.ClientConfigurationSystem.EnsureInit(String configKey) --- End of inner exception stack trace --- at System.Configuration.ConfigurationManager.PrepareConfigSystem() at System.Configuration.ConfigurationManager.GetSection(String sectionName) at System.Configuration.PrivilegedConfigurationManager.GetSection(String sectionName) at System.Net.Configuration.SettingsSectionInternal.get_Section() at System.Net.Http.HttpClientHandler..ctor() at System.Net.Http.HttpClient..ctor() at Tweety.Webhooks.WebhooksManager.&lt;RegisterWebhook&gt;d__6.MoveNext() in F:\Dev\Tweety-master\Tweety\Webhooks\WebhooksManager.cs:line 86&lt;--- 
So just for the record. Visual Studio currently has around \[8.5k plugins\]([https://marketplace.visualstudio.com/search?target=VS&amp;category=All&amp;#37;20categories&amp;vsVersion=&amp;sortBy=Downloads](https://marketplace.visualstudio.com/search?target=VS&amp;category=All%20categories&amp;vsVersion=&amp;sortBy=Downloads)) while IntelliJ has around \[3.4k plugins\]([https://plugins.jetbrains.com/search?correctionAllowed=true&amp;pr=&amp;orderBy=&amp;search=](https://plugins.jetbrains.com/search?correctionAllowed=true&amp;pr=&amp;orderBy=&amp;search=)).
That's a completely different error you've got now :) What these errors are called are "Stack traces" and they're basically how the system reports an error it couldn't deal with. What happens is at some really low level it throws an error, but the code above it can't handle it - however, it can add additional information to the trace that can help you. This goes on and on up the chain until you get to your code - if you wrap it in a try/catch and catch "Exception", you'll catch this - and that allows you to handle it more gracefully instead of killing your application. However there's a bit more to exception handling that you should look into (it's bad practice to catch ALL Exceptions, you should only catch the ones you can deal with and let the ones you can't deal with bubble up). The easiest thing to do is just read them line by line until something sticks out. For this one, it specifically says this: &gt; Unrecognized configuration section dependentAssembly. (F:\Dev\Tweety-master\DotNetStandardTest\bin\Debug\DotNetStandardTest.exe.Config line 6) So what's on Line 6 of your exe.config file? There's a problem in there. Sometimes a tool like https://staxmanade.com/ExceptionMessageBeautifier/ can help make them easier to read.
Why would that be good? 
Many companies often put out job descriptions that are a wish list for the "ideal" candidates, but they very often settle for a candidate that's not 100% what they described.The only caveats to that are when government contracts are involved (where the government stipulates everything) or when looking at jobs with major tech companies (who are more honest in their requirements). Simply put, there are not enough people out there with the vast and varied experience these companies wish to acquire, and anyone who *does* tick every box is often worth more money elsewhere (and is aware of that fact). If you can legitimately meet 75%+ of a job's listed requirements, I'd say it's worth at least sending an email inquiry. Doubly so if they put a lot of emphasis on a particular area where you definitely meet the qualifications. And when I say legitimately, I mean 100% no BS and no stretching of the facts ("well 6 years and 8 months is basically 7 years" sort of thing).
Hopefully it will be used for faster on device deployment during debug! Hot reload plz. Or maybe selectively trade performance for smaller app sizes on release builds, I currently already disable xamlc for xamarin forms on iOS due to the fact apples encryption of code section massively increases quoted app store size.
What you sent me definitely works. I made a little test with Microsoft's .Net Core. But, for some reason MonoDevelop does not want to use it.
Any .Net implementation (including .Net Framework) can reference .Net Standard libraries, as long as you have high enough version. In this case, [Tweety is a .Net Standard 1.3 library](https://www.fuget.org/packages/Tweety/), which, according to [this table](https://docs.microsoft.com/en-us/dotnet/standard/net-standard#net-implementation-support) means that you can reference it if your application targets .Net Framework 4.6 or higher.
There's tools that let you combine a folder into a single executable
&gt; referenced the Tweety project I downloaded from GitHub Is there any reason why you're not using NuGet to reference it?
The problem is the excel contains data from 4 different data tables. I have to put it into the right stuff. The keyword here is to make it dynamical - an tool which imports my excel is easy but how do I fit it into my database by code ?
Dude! get on with it, just apply. When you get the job you want you'll find most people are winging it. With five years experience and a good resume, if you can write competent code you'll be into a senior job.
You might try using SQL Server Integration Services, which is designed for scenarios like that. There are many similar products you might look for as well. Otherwise, yes, it's possible, it just may not be easy or very reliable. A solution that parses the Excel as a CSV and uses an Entity Framework model of the database to look for matching tables and columns (perhaps using reflection to get property names and instantiate arbitrary objects) could work. But you're probably better off using an existing solution.
Thanks men! I also thought about an csv Import which try’s to check in which database my data could fit or asks the user. No I want to write it by my own for our company so we can modify it to our needs
This is the "recommended" way for .NET Core. Use the install script to acquire the version of the .NET SDK that you need, unzip it to your desired location, and run. This is what we do for CI on the vast majority of the dotnet repositories. -- Tanner Gooding, developer on the .NET CLI/SDK team 
Also is that that the case? The article seems to imply it is not, or only under the hood which is fine for iOS.
And ISerializationCallbackReceiver only works with the game UI, not the Inspector?
Visual Studio with all components (which includes SDKs, header files, compilers, libraries, tools, documentation, VM images, templates, etc) can get huge. The Core Editor, by itself, is only a ~500MB install. If you want just that plus the core managed desktop tools you sit at ~1.25GB (in the latest update). 
The issue isn't serialization per-se, it is actually the inability to serialize and assign interfaces in the inspector's object field. So you can't have a field of type IGameEvent and allow dragging in an object that has a component that implements that interface. Furthermore, it won't really solve the main issue, which is allowing derived types that allow strongly typed parameters, (which also are assigned in the inspector). Unity's own "Event" system has the same issues, you have to make concrete classes so they serialize, and you can't easily use them to pass parameters.
I second this. Its a decent enough tool.
Read this Programmer Competency Matrix and evaluate yourself: http://sijinjoseph.com/programmer-competency-matrix/ It's not C# specific, but should still apply to you.
Thanks. I just took the c# iq test on PluralSight and got 175 which puts me in the 66 percentile. If I worked on your team, how would you interpret this?
I did just now. I got 175 which puts me in the 66th percentile. 
Net native.
Thanks. I will read through it.
I am tempted by this however most of my skills these days are in real time interactive systems and I have a feeling plural sight is for more generalist roles such as web apps etc Does it have courses on computational theory etc?
Sorry, but this wasn't clear. Is it a custom Roslyn fork with custom backend, a completely new interpreter, compiler, does MSIL get interpreted, jitted, etc... As you can see, there are many questions open and the question for the difference between .net mf and this seems legitimate to me. I know very well what .net mf is, but I don't know what this is that the tweet talked about.
Spent 15 minutes trying to figure out what's wrong with (status &amp; Status.Hungry) == 4 compared to the correct answer (status &amp; Status.Hungry) != 0 While technically the correct answer is more correct in practice I'd argue that (status &amp; Status.Hungry) == Status.Hungry is better than both
`status.HasFlag(Status.Hungry)`
Yeah, but I assume the test was made before that method existed. I actually remember when it was added I was like "finally".
There's no such thing as "Enterprise level", and "Junior, Intermediate, Senior" are all relative terms that will mean different things at each company. Read the job spec, if it sounds like you can do 75% of the stuff on it, apply. VERY basic rules: - Graduate roles require no work experience. You're expected to have fundamental knowledge from a degree. You are taught everything apart from the basics - Junior roles require no work experience, or minimal experience. You are expected to be able to complete assigned tasks on existing projects with moderate assistance - Intermediate (or where no level is specified) require perhaps 3-5+ years experience. You are expected to be able to complete most tasks independently with minimal assistance, and assist junior developers sometimes, and to work on new projects - "Senior" roles are 5-7+ years experience at most places, 10+ at a few places that don't have any non-managerial levels above senior. You are expected to be able to work independently and supervisor junior/intermediate roles, and take a primary role in developing new projects
Take your longest chained IEnumerable/LINQ methods line. Divide by 20. If you get over 100% you’re the best C# programmer who ever lived.
No need to overcomplicate things. Just do it the most natural way: EnterpriseStatusCheckerFactory.CreateInstance(typeof(Status),status).SetValidate((s)=&gt;s==Status.Hungry).RunValidation()
Can do it with Mono and mkbundle https://dotnetcoretutorials.com/2018/03/22/bundling-mono-with-a-net-executable-using-mkbundle-on-windows/
Like what? I've looked for this before and couldn't find anything.
I'm not sure whether I love the Big-O notation to describe the competencies, or hate it
Most people are winging. Glad this is first response. Some of the code I see at work is like...WHAT THE FUCK IS THIS? my favorite is the naming of variables of what it is, service is service not what type of service etc Or iterations of ridiculous Big O counts in controllers , end rant. Thanks for the response :D
I had a coworker who named a variable tableRowTable because it was a DataTable of TableRows. Like wut? Or vx and xy as other DataTables. It was refactored quickly. Once we figured out wth it was doing. 
Needs full .net and nunit :/
Mid level. However those tests typically reflect knowledge in specific frameworks used in c#; and if it had any questions on remoting, wcf, mef or winforms, that test is rubbish
What i look in the developers when doing the interviews is understanding of the fundamental tech (e.g. explain ssl; how http works; what types of authentication are there; what are headers/body; what is boxing; how does gc work; etc); ability to use the tools (loved it when in vs215 microsoft moved asp.net project templates - all those people turned up saying how they love the latest versions and couldn’t find the templates); And ability to think and come up with solutions (e.g. here’s some broken code, fix it in front of me; or, here is a problem, but not a spec, tell me what kind of system we can build to sell the customer who has this problem)
Target Windows 10 (Desktop, Laptop, Tablet, Mobile, IoT, HoloLens, Xbox One) + iOS + Android + Web Assembly... via UWP. This could easily be the next disruption to mobile app development.
That method is notoriously slow for what it does.
Check if SignalR is an alternative for your project.
To be fair I look back at code I wrote six weeks ago and sometimes feel that way. The biggest thing I learned is that there is always room for improvement and that criticism, especially constructive and supportive, is worth its weight in gold. We all suffer the impostor syndrome to some degree or another. 
Don't listen to this, 300 a year is ridiculously overpriced 
in addition to everyone else's suggestioks, you can contact a recruiter and take a c# test
LOL yup. I interviewed for a mid level position and was offered a senior. I was kinda like "wtf" in my head, but it all worked out. Apparently I know a shit load more than I think I did lol 
Like this? public abstract class GameEvent : ScriptableObject { public abstract object Parameter { get; protected set; } } public class GameEvent&lt;T&gt; : GameEvent { public override object Parameter { get { return TypedParameter; } protected set { TypedParameter = (T)value; } } public T TypedParameter { get; protected set; } }
 :D Woot, this is one of the .NET Core 2.1 performance improvements ! &gt; In .NET Core 2.1 Enum.HasFlag is now a JIT intrinsic, such that the JIT generates the same quality code you would write by hand if you were doing manual bit flag testing. @ https://blogs.msdn.microsoft.com/dotnet/2018/04/18/performance-improvements-in-net-core-2-1/ Good news, for those fortunate to be working with the latest bits anyhow, heh...
Man, I was in a similar position. I taught myself how to code and did it for work for a few years being a lone dev. I wound up applying for a senior position and was super nervous that I was a bad coder. Turns out I wrote better code than like 90% of the other devs. Just go for it and hope for the best!
Yes you are on the right track. This link should get you going. Make the "Chat Server" and "Chat Client". http://csharp.net-informations.com/communications/csharp-chat-server.htm
We all value our tools differently I suppose, but for me $300 a year is a pittance price for unlimited access to curated, centralized knowledge. Just spending 20 hours per month (one hour per workday) is enough to teach me something over the course of a year that I can parlay into at least a factor of 10x the cost, so I think it's a great investment.
One of the best things I've done for my career was apply for a job I was not qualified for. I had years of experience but had never gotten into things like generics, interfaces, linq, etc. I read some chapters in a book, enough to understand the concepts, and then applied for jobs. When I answered questions correctly I would tell them when my knowledge was pretty from reading and not experience, I told them I was not qualified but wanted a job where I could learn these aspects of C# well. I was hired specifically because of my enthusiasm to learn. And I spent the next 4 years building the Walgreen's rewards program with a small but very talented team. I learned a ton and became an asset to the team. If I had only ever applied for jobs I already knew how to do I would have missed the most valuable learning years since my first years on the job. So read one of those books. There will be plenty you don't know, and you'll get an idea of how much you do know vs. how much you have to learn. And then apply for those jobs with the confidence that you can rise to the challenge. After all, 5 years experience in full stack development will have taught you plenty. Much of what's missing is just syntax or additional language features, but those are easy to learn once you know how to code.
That's 1.25GB I don't have to spare.
Shouldn't that be status?.Hungry now? And even ignoring that it should be &amp;&amp; not &amp; If that's one of the test questions that test is worthless.
Depending on what dbms you're using, it may be able to import Excel already. I know SQL Server has this ability built in. I assume the express version (free) can do this. 
Oh, this will work. Thanks.
No, &amp; is correct when looking at enum flags, because you're doing bitwise math. https://www.alanzucconi.com/2015/07/26/enum-flags-and-bitwise-operators/
Fair enough, wasn't enough context there in the post to know what those objects represented.
Yeah, I chuckled when I saw it and quickly moved on. :)
I’m sure it’s a jokey I’m just not sure yet whether I enjoyed the joke
the c# test is specifically for the c# language. User and web interfaces are covered in other tests.
Yeah it is a question from the test that was linked. The answer seems ambiguous.
Well, if that's the case, you might be a victim of Nerd Sniping: https://www.xkcd.com/356/?
I may consider it later because this is mostly for educational purposes
To be fair, it is an extremely common pattern and should be immediately recognizable to anyone who has worked with flag enums in C#.
thanks, i guess this should get me going
Unless you only use it a couple times a year, it's definitely worth it. To put it in perspective, $300 will only get you one 3 credit hour class at my local community college.
Great, I hope that goes some way to answering your question. Some of the topics tested are a little obscure but but you should also now have an idea of what topics you can go away and learn. 
Enough. Just apply.
Start explaining it to people. Especially on online forums. Simplifying it for beginners will assist your learning. And experienced people will quickly point out when you go wrong. 
A quick visit to codewars maybe, otherwise you can just test your self in a real world scenario like applying for a job and so on. 
I'm eager to find out it, and I agree, it's awesome for short lived apps or context in apps, it's something like regions.
.NET MF is not exactly dead (and there active alternatives to replace what MF is), but this new experimental kid is almost the opposite. It's is C# with .NET, but without a huge CLR. It's is obviously native.
Not exactly. It has .NET libraries, or will have, but a tidy one. It has static variables with restrictions. Some details above is very speculative.
I could answer you if I would understand qaht is your point, and why you think it needs a differente language, or which benefits we would get.
Why you think I posted this? ;)
Maybe. It is an experiment. We will see.
As Shia LaBeouf would say: "Just do it!". Try to answer C# questions on stackoverflow (or forums etc.). During the process of writing stuff down or expaining it verbally you will find stuff you thought you knew but actually didn't ;-)
Not really. You must have skipped the step adding the compiler in (the myget feed step adds this)
I think you got your title wrong... You got two answers of people telling you how to dumb things down for other people, answering the question your title suggests. But your post actually asks, if I didn't get it wrong, "how can I become an expert at C# internals that other people would/could consult?" I'm interested in the second answer too :-) I don't have a reference to recommend though...
You are correct
It's all about problem solving more than it is language features or even writing efficient code. 
Three things come to mind: 1. Learn C (the original one) and work with real memory, not just the C# sandbox. This helped me a lot when it comes to understand how C#, the connections to native code and internals in general work. 2. Make heavy use of Reference Source. There are two reference sources currently. One being [https://referencesource.microsoft.com/](https://referencesource.microsoft.com/) and the other one a [GitHub repo by Microsoft](https://github.com/Microsoft/referencesource). Whenever behaviour is unclear or curiousity strikes, I go there and learn something. 3. Decompile your code. Use dotPeek or ILSpy to see what the compiler does with your code and then you understand what steps each line of your own code requires. I'm not the one who reads a lot of books about coding, so I can't give you any pointers when it comes to reading, but there are probably some nice books out there which cover a lot about the language and its internals.
Was just going to suggest SignalR
If you use CoreRT, you will. But I was responding to someone who suggested creating a self-contained .Net Core application.
Learn another language like Python. Then, learn JavaScript. Then, learn F#. &amp;nbsp; **It is a life-long learning**. Don’t limit yourself to one language. Another benefit to learning other languages is that you start to see patterns, pros &amp; cons of language design, and differences in frameworks. &amp;nbsp; All in all, you become a better programmer. You start to see the big picture. That is when you become better able to explain things to other people.
Jeffery Richter's book, "CLR Via C#" is a pretty good deep dive into.net. It's a little old now (don't know if there is a new version or not), but a lot of the underlying concepts should still be the same.
Well I guess great minds think alike ;)
[removed]
Pretty sure a version of this for .NET Core was shown at Build by Scott Hunter.
Use HtmlAgility pack. It’s dirt simple. 
Maybe not what you're looking for, but if I remember correctly, the command-line C# compiler, (csc.exe) is included with the standard .NET Framework, which already comes installed with Windows. Maybe MSBuild is as well, I don't remember. So you could just make a small batch file to compile your code without any extra tool.
I'm not sure how it is for other programmers, but I've spent more time reading [language specifications](https://www.microsoft.com/en-us/download/details.aspx?id=7029) than I have any books by actual authors. Most of the books I've only skimmed through. But specifications is for syntax. It doesn't teach any theory or architecture (if you're going more for a lead dev/architect role) which can be important in the industries I've worked mostly (business and finance). You'll find in most shops these days, "theory" is often not followed. The old ways of having a lot of structure are rare, at least from what I've seen (and hopefully someone else can chime in here), and have been replaced with *hacking* which is better defined as *jerry-rigging*.
I wouldn't worry too much about your language proficiency, there are more important things like your personality, workflow, interest and generic software development 
The honest truth is - you probably never will. I don't mean that as an insult, I never will either. I've got 10 years of professional experience and if I'm straight with you....I'm no better now than I was with 3. I have more experiences, but I forget them. Many times, I've sat down and said, 'Okay, I'm going to be an expert' and I'd get some book like `C# in Depth` by Jon Skeet and I'd put in my time. One year later....it's like I never read it at all. Most people are just like me. This is also why you see a lot of job specs that require 2-3 or even 5 years experience for senior roles, but nobody cares if you have 10 years or 15 years of experience. I even went back to school and picked up a masters degree in computer science thinking it would help make me an expert. It didn't. Not at all. I did great in my classes, but five years later, it's like I never took it at all. After a while I was convinced my problem was just my memory failing. I could read a chapter from C# in Depth and for the next month, I could give you an amazingly eloquent explanation on the relationship between events and delegates in C#. Like, I literally remember thinking how cool it all was, but I don't remember the specifics. Now I'm back to my year-one understanding which is, 'Umm, an event is like a specific type of delegate....I think?' I've tried every piece of advice people have posted so far. 'Explain to others...' - yeah, I've done that. Didn't help. I'm in the top 3% on StackOverflow but guess what, 99% of people who ask for help online don't care about the deep internals of C#. They want a code snippet. And 99% of the questions don't require any knowledge of the deep internals of C#. I've read books, I've taken classes, I've even taught classes. I did a very good presentation that went reasonably deep on all the new C# 6.0 features. I made flashcards, memorized all of them, and had some very subtle but important distinctions to call out. It was a kick ass presentation. I had side-by-sides with code, and then I broke it down into the IL and everything....people loved it. I don't remember any of those important distinctions now. Learn other languages? Personally, I think that's terrible advice. I spent (wasted) so much time learning Python. Read a book, read forums, did all of my programming assignments for class in Python, did the first 50 Project Eulers in Python.....do you know what I remember of Python? Not a damn thing. I mean, really. I remember I was able to get Visual Studio to run Python. I remember the spacing mattered. That's it. But I still have all my assignments and pet projects I made in Python and it's like a stranger wrote it. You've got six years of experience. And maybe you haven't focused on the C# internals yet, but are you known as a rockstar developer? Do people constantly ask you questions about the project? Are you able to answer questions about the specifics of how parts of your project was written, even the parts written by others? If you answered 'yes' to all of those, you're a better developer than I am. And sure, you just need to start looking at C# more closely. Head over to https://github.com/dotnet/csharplang and make it happen. But if you answered 'no' - if you are just a valuable member of your current team but not leaps and bounds ahead of everyone else...realize that you only have a limited capacity of useful information you can handle. And that unless you plan on joining the C# language team, a deep dive into truly understanding C# (and the related knowledge that you'd need about languages in general) is probably just a wealth of information that you won't be able to use in a meaningful way. The reason why so many successful developers with six years of experience can't answer questions about the internals of C# is that....we don't really need to know them. The situations where those things matter are so few and far between that most of us go our entire careers without learning them. We're focused on regular boring stuff like business rules and requirements and bug fixes....and when those crazy edge-cases do come up, usually it's trivial to just avoid it completely or turn to online resources where experts will give us free advice on how to do it - like Jon Skeet answering questions on StackOverflow. Depending on your career goals, your efforts are probably better directed elsewhere. Having said all that: C# Language: https://github.com/dotnet/csharplang C# Language Spec: https://github.com/dotnet/csharplang/tree/master/spec Roslyn: https://github.com/dotnet/roslyn Dotnet Core https://github.com/dotnet/core I think those are the best places to start. The README.md's have links to tutorials and blogs. If you like books, I would recommend C# In Depth (4th edition) and the CLR via C# book. I haven't read the CLR via C# book, but it's probably worth mentioning that there are probably some differences between the old CLR and the .net core CLR (https://github.com/dotnet/coreclr) - C# the language is the same, but as C# developers so much of what we do depends on the .net framework/.net core/.net standard and that's a bit transitional at the moment. 
Use `SelectNodes` from HtmlAgilityPack: var htmlDoc = new HtmlDocument(); htmlDoc.LoadHtml("&lt;html&gt;&lt;body&gt;&lt;img src='image1.png'/&gt;&lt;img src='image2.png'/&gt;&lt;/body&gt;&lt;/html&gt;"); var imgNodes= htmlDoc.DocumentNode.SelectNodes("//img"); var imgSrcs = imgNodes.Select(pNode =&gt; pNode.Attributes["src"].Value); Console.WriteLine(string.Join(",", imgSrcs));
That's amazing 😀
You just made me feel much better of my skill level and where I perceive I should be. Thank you for managing my expectations. That said, here’s to a lifetime of learning and forgetting. I love this process. Cheers!
The major recent features that are more than syntax changes are `ref` returns/locals, `ref struct`s and their main beneficiary `Span&lt;T&gt;`. This is a quite complex topic and only slowly making its way into the .NET world, but you may want to at least be aware of spans. Pattern matching and tuples are "just" syntax, but still significant additions. There's also `in` parameters and `readonly` structs, dunno if you'd classify those as syntax sugar. 
This answer should have more upvotes.
Dont forget that windows also caches thumbnails and icons too. If you are rapidly changing/testing it might be using an older outdated version of the icon which doesn't have the desired size you added into a newer version of the ico file. https://www.thewindowsclub.com/rebuild-icon-clear-thumbnail-cache-windows-10 fwiw, you can use gimp to make the ico as well. You place each dimension on a layer and can export it as a correctly formatted ico file.
&gt;I think you got your title wrong... You got two answers of people telling you how to dumb things down for other people, answering the question your title suggests. But your post actually asks, if I didn't get it wrong, "how can I become an expert at C# internals that other people would/could consult?" The ole 'if you don't use it, you lose it' is so true, BUT it's always easier to learn the second time around so there is some benefit of your extra studies. You might not be able to answer a python-related question, but if you had to use python again it would be much easier for you to pick it up. 
Agreed
Do you have a Computer Science degree? That is the information you need to learn, in order to truly understand what computers are doing -- theoretically speaking.
Make sure you know what a managed heap is and what the garbage collector is. Also you'll want be able to speak to way async IO is important. 
No it shouldn't. Not being able to remember something like the relationship between events and delegates isn't, in my experience, "normal" or something one should accept. It's mediocre at best. That's not even a complex subject. Maybe if it's a language or framework you never actually work in, but if your day to day is c# and you see no difference in your knowledge between 3 and 10 years that's a problem. 10 years of working experience should have you learning, recalling, and utilizing shit tons of additional knowledge.
I know that. I avoid it when I document it very well (e.g. complete XML headers on everything that belongs to a certain module). It gives me a feeling of completeness somehow. 
Tests are a way of protecting you against your future self. 
The while keyword is lowercase, the true literal is also lower case.
Codewars is great! I can improve my skills while checking my code against different solutions! Thank you! 
If I make FirstInit &amp; everything that uses it also static then [this](https://i.imgur.com/0xiYbVn.png) part of the code turns red
Well did you make Notification, AddNotification, etc also static.
Ya, if you want to understand more you will need to read or watch videos about networking protocols. TCP (Transmission Control Protocol), IP(Internet Protocol), DNS (Domain Name System) at the bare minimum, as those are the main ones in play here. 
So what is the relationship between events and delegates and why is it so simple?
Books and courses don't work so well for me, I need to have concrete problem to solve. What works for me is to build things myself, while studying the source code of similar solutions. Use GitHub and a decompiler more than Stackoverflow and how-to guides. To really get down to the core of how things work, I have found performance tweaking and micro optimizations to be a great catalyst for deeper learning. Try building a JSON serializer or a DI library or something else constrained and specific. Then benchmark it against existing libraries and try to beat them. I guarantee you'll learn a lot about reflection, expressions, memory allocation, etc. 
The coding problems I solve are so large, I think for a long time about a solution, write some design documents, and then my entire team spends the next year or two implementing the solution I created. We don't have \*time\* to go back and second guess the decisions I made 2 days ago, we're still implementing the decisions I made 14 months ago. At some point I learned not to be myopic when designing my software, to give up some efficiency in exchange for future expandability in most things. So when I left one of my recent employers, I spent a week teaching them about the design and all the things that had been designed into it from the start that hadn't been implemented yet, and they were astonished that the features had anticipated all of their needs for the foreseeable future and then some. 
I agree. I work with people in my company that have 5, 10, 15+ years of experience and they are absolutely brilliant. It totally depends on the person and how much you remember the nitty gritty details. But I think what is more important is less the details but rather the overarching design or patterns being utilized. I wouldn’t expect some developer with 1-2 years of experience to design a whole backend system by themselves, but I sure as hell would expect that from someone with 5-10 years of experience 
Guaranteed, there are plenty of things that are "not even a complex subject" that you do not remember. You just don't know that you have forgotten them because, well, you have forgotten them. The human brain is a computer and like any computer it has limitations. As its operator, it is important to know these limitations. You just aren't going to remember things that you don't do frequently and there is no way to do ALL the things regularly enough without completely sacrificing every functional part of your life and going insane. 
I go through this much more frequently when I'm learning something new. When I first started with C#, I would rewrite the same programs over and over again because I would learn something new that simplified or improved old code. Now that I've been doing it for a while, I still search for ways to improve but I trust my old code much more than I did as a beginner.
Here's what I did: [https://pastebin.com/hLSzPpJt](https://pastebin.com/hLSzPpJt) I still have some red lines though [https://i.imgur.com/WlIx95U.png](https://i.imgur.com/WlIx95U.png). Will those go away once I add more days to the code?
Semicolon after while means you actually have a scopeless statementless while loop. The scope you have after it isn't actually applied to the while loop.
As I thought: all of your global variables (not really globals but you called them that way) and AddNotification are still instance fields/methods. They need to be static. You really should move all of that stuff into a new class and just use the Main method to create an instance of that and run it.
&gt; we don't really need to know them [the specifics of C#-s internals] That's kinda the point of high level languages, that you shouldn't need to k ow how it works under the hood to be able to use it correctly and efficiently. That's not always possible tho, but the general aim is this.
&gt; Not being able to remember something like the relationship between events and delegates isn't, in my experience, "normal" or something one should accept Either I did a poor job of explaining, or you are intentionally misrepresenting my point. The superficial difference between events and delegates is trivial and I would expect any new hire to know when to use an event vs. a delegate. But OP isn't talking about understanding the very basics of C# that we'd expect new hires to know. He wants to be an expert. He wants to be able to explain the internals. That means fully understanding delegates, fully understanding events and being able to compare and contrast both. So I ask you....how many new hires can explain how System.MulticaseDelegate is used and it's relation to System.Delegate? How many can explain the history of them and the argument behind merging those two types together? How many know that BeginInvoke/EndInvoke is optional according to the CLI specification, but that C# delegate types always provide them? Or can explain the various rules when combining delegates? Or how the static Delegate.Combine method is used? What about return values when combining multiple delegates? Or what specifically changed in C# 2.0 and also in C# 4.0 that affect thread-safe events? I've interviewed a lot of C# developers and very, very few would be able to explain all of it. Maybe you can, but that would make you a rockstar developer. Jon Skeet is a rockstar developer - a certifiable expert and he used almost FIVE THOUSAND words to explain the difference between a delegate and an event. http://csharpindepth.com/Articles/Chapter2/Events.aspx?printable=true And even he glosses over some of this. The fact that you said &gt; That's not even a complex subject. Makes me think you are underestimating the amount of complexity that goes on behind the scenes. That or you are greatly overestimating the abilities of the average developer. 
CLR via C# is an excellent book written well by an expert who used to work on the CLR. Also 80%+ of it applies to .NET Core. (Assembly loading is one difference)
Consider contributing to .NET Core. There’s lots of easily accessible tasks, you’ll better understand how .NET works, and you’ll get code reviews from experts plus resume material. https://github.com/dotnet/corefx
Some of us remember everything. So, it's possible the OP will, too?
Some of us remember everything. It's possible the OP will too?
Events are a list of delegates. It's important because there are threading concerns.
I would say that theory is not that useful, and I'm a tg
For me it was reading documentation front to back, including a good chunk of the C# specification, that made the difference. When I check stackoverflow for how to do a thing, then I just learn how to do that thing. When I study documentation, I *really* get an understanding of how things fit together.
What about ValueTask? 
You can always read the language specification and proposals on github. There's also reading the compiler output (MSIL), which is also very informative. Lambda expressions and bugs seem very magical until you look at how the compiler actually makes it all possible. Same with async and await. Understanding how things like locks get implemented are also useful. It's helpful to know what's going on with the c# compiler, but you also want to learn about what the clr is doing under the hood. For that, open the dotnet/coreclr repo on github, and read the book of the runtime (it's in markdown, so you can read it all on github). There's other things too. The c# compiler does a lot of compile-time optimization. You'll see this when you view the il. There are also tools like dotPeek and ILSpy that will allow you to do this but view c# code. Ive found that doing this analysis has made me a better programmer. Id also look outside of c#. F# will introduce certain ideas that are possible in c# but not necessarily easy. Understanding the c# language is helpful, but ideas tend to be ubiquitous. 
Looks like you're lacking some fundamental knowledge (as you said you're self thought, so there are things you've missed not visited CS university) Stop digging into C# and try other things. Other platforms, other languages, other programming paradigms. Take a look at Scheme, Lisp, Python, ML/OCaml/F#/Haskell, Prolog, Go to understand what are the other ways to do things. Go to lower level with C/C++/Rust, go even lower and try to construct ALU and register memory with basic logic gates. Play with some PIC controllers. All this things will show you that C# isn't only way to do things right, you'll see the place of C# relative to other tools, and that's how you'll get answers why things are the way they are, how that solutions better/worse than other, what issues are there... Being able to things in perspective, to see wider angle and broader field is the key to "level up" as professional
This actually makes me feel alot better somehow :D I just finished with my apprenticeship in Germany. A shortened one to two years. And after that two years of just learning the basics and having no real life experience, I wonder how I'm supposed to get a job as a professional. Most companies are searching for people with at least 5 years of experience, and most of the time you have to have experience in more than 3 languages, and also frameworks etc. There is no company that is searching for "junior developers who wish to. Learn" or something like that. But honestly right after finishing my apprenticeship I don't really feel like I could just get a job and start coding like it's nothing at all. I hope to become A pro like you guys not to far in the future, and At least at the moment I couldn't care less about understanding the core, if the code does what it's supposed to do 😅 but it's a but reassuring that even to you guys it's like with everything else. You forget what you don't use. 
I have different advice: don't focus on understanding the inner complexities of the language and framework unless you have a need to know them. The most valuable skill I have developed in my 20 years in software is being able to largely ignore what the client says they want, find out what kind of problem they have and are trying to solve, determine if that is the true problem or just a symptom of a bigger problem, and ultimately provide a solution that dramatically improves their situation and solves the true problem. And many times, that bigger, better solution is simpler and less costly than what they asked for. I recently had a user come to me and say, "OK, I'll tell you what I was thinking, and like always you'll tell me why I'm wrong and what we should do instead." I explained that it's not that she's wrong, it's just my job to get to the root problem and my experience knowing what can and can't be done in a reasonable amount of time. My boss later told me he wished he'd recorded my response. Most users think they are the experts on their job and therefore the most qualified to design a solution. But it's my job to become a bit of an expert in their job as well as software development. If you've never said to a client/user, "I could do that, but X would be easier and be far more efficient," and heard, "You can do THAT? That would be amazing!" then that's the kind of skill you need to develop. One example, someone asked me to add two columns to a very old report. I could have just done that but I asked some questions and found out this person's while job every month was combining a bunch of unrelated reports into a big spreadsheet that was always late. I automated the creation of that report and had it run nightly and get emailed to the CFO instead. Thankfully there was plenty of other work he was now able to do, which he enjoyed more, and the company was able to monitor its business financials much better from than on. Nobody asked if it could be done before, I didn't even know they had that report. I could have just added the columns, but as I said, users almost never ask for what they really need. 
Agreed. Maybe because of the nature of C# being the flagship language of a (these days) multi-platform runtime, people think their knowledge of the language internals is lacking when in reality, it could be them getting in to edge cases where CLR internals come in to play.
Great write up!
I'm not a c# dev si I can't help you figure the internals, but getting back to the roots of object oriented programming and the design patterns created by the gang of four and their motivation to exist can help you understand why some of your best practices exist and what they optimise / help avoid
I never trust Past Me. He was obviously lazy and stupid and had no respect for my time. Seriously though, looking at code again with fresh eyes often highlights its flaws. But, on the flip side, ask yourself what the payoff of refactoring really is. If the code works and its shortcomings are contained, leave it. If it's a design choice that will influence the rest of the project, change it. Some bad code is more infectious than others.
In any other thread, I'd be like, 'Yeah, sure that's a reasonable answer' - but in this context... How is that any different than a MulticastDelegate? &gt; A MulticastDelegate has a linked list of delegates, called an invocation list, consisting of one or more elements. When a multicast delegate is invoked, the delegates in the invocation list are called synchronously in the order in which they appear. If an error occurs during execution of the list then an exception is thrown. https://msdn.microsoft.com/en-us/library/system.multicastdelegate(v=vs.110).aspx 
I don’t have time for a full code review right now, but one major point is that you seem to have a misunderstanding about the date methods you’re using, which means none of your logic works. DateTime.AddHours and AddMinutes, AddSeconds etc. all return a new DateTime object that has the appropriate time added on. Your DateTime objects are never changed after all the methods you call in them, so none of the timer stuff will work right now.
Find me a cross platform binary C# compiler that is less than 4GB and I'll be very impressed and surprised. You aren't impressing anyone with your tales of GB USB keys and 16k compilers. We all know you're very smart. Much smarter than bloated enterprise C# compilers. Maybe you should make your own.
Or the simpler facts that "while" and "true" are case sensitive :p
If you have access to a *nix command line, look into using curl and grep to search for the src attribute. 
Well installers juggle the trade-off between size and processing time. An installation process uses the processor to build all the files we need. So there might be one file that is 100MB, and the installation process modifies nine sections of it, each modification just a few KB maybe. Without an installation process, you'd have to have separate copies of all permutations of the 100MB file. I'm really interested to know how many permutations you'd need... but the combinatorics would probably explode if you really wanted to support many platforms and configurations.
I tend to spend a lot of time getting the interfaces and encapsulation right. Sure, the implementation from past me might be a dogs breakfast. But as long as it looks nice from the outside, present doesn't care. 
Now that I have a QA team with actual testing by other people, I rewrite or at least update code fairly frequently and don't mind a bit. It's nice to know that I've left code better than it was. That said, I don't just go in and toss things up just for the sake of change. It needs to be an actual definable improvement.
&gt; none of the solutions I've found have been able to return more than a single image url. Show us what you tried
Whether it is 1 day or 5 years, it depends on how much I have learned in the time . There's often quirks or restrictions I wasn't aware of in the past, the code use case has changed, or a new library came along that could reduce how much code is necessary. But for the most part, my past self is pretty reliable.
I actually ended up using your course on pluralsight in the end (And going to look at some of your others - mostly around database deployment and functional concepts in C#). it was useful! I'm quite used to Anemic Domain Models by now. Where you typically just have data structures and then a domain layer ('services') That's the only way I've ever seen it done in the wild in all honesty.
&gt; Go to lower level with C/C++/Rust, go even lower and try to construct ALU and register memory with basic logic gates. Play with some PIC controllers. Also, when you're playing with other code, look at the assembly it generates. I don't think there's anything quite as good as [compiler explorer](https://godbolt.org) for C# (that's online), but if you want to compare implementations of common algorithms between optimisation levels and even languages, use it.
What about js? In dev tools console of webpage, run this: `var imgsArr = document.getElementsByTagName('img'); var imgSrcs = []; [].forEach.call(imgsArr, function(img) { imgSrcs.push(img.src); }); imgSrcs;` Now, imgSrcs should contain a list of all the img source urls on page
One of the most valuable comments related to programming on reddit. 
This. While knowledge of recent language additions are useful, and generally good command of a language is a valuable skill, no good interviewer will focus too much on those particulars. They'll worry about your team skills, your _conceptual_ understanding of software development, etc. In fact, an argument can be made that you shouldn't focus too much on one language. You'll probably run into other languages during the course of your career, and don't want to limit yourself too much. Same goes for the stack: don't limit yourself too much to, say, .NET Framework — also explore completely different stuff such as Ruby on Rails, Swift, … That said, since I don't see them mentioned yet, C# 6.0's string interpolation and null-conditional operator are also hugely useful additions.
Agreed just saying the theme in the response was “we’re all human, no ones any better just go for it”
Out of curiosity, what is your motivation for learning this? I've been using C# for years and never really for a use for knowing most of this stuff, and when it does come up there normally a solution someone else has found. I think the difficulty may be that internally there is a ton of stuff going on that it's impossible to master it all. One small thing may have years worth of things to learn if you go really into depth
You've got a stray ; after your while. This is closing it off as a complete statement, and as a result the curly braces afterwards have become a separate code block. Drop that, your "break" is now within the loop, and the red lines disappear.
If you're just doing a string search you might as well fetch the page as a string and regex it from inside the c# script.
I use angle sharp which let's you query with jQuery like selectors. Very easy.
I made this when I was playing with .NET Core - https://github.com/brendanmckenzie/website-checker It gets a list of links on a page, could easily be adapted to list images. It uses Regex (which I'm well aware isn't always the best way to parse HTML) rather than HTMLAgilityPack
I'll post a list of what I tried with the results soon. It seems like HTMLAgilityPack should be easy from what I'm reading so I'm sure it's something I'm doing wrong.
&gt;5.0? I’d say pattern matching, PLINQ, string interpolation, async try/catch and null propagation. Those are all features I use on a day to day basis that have been released since 6.0. Little syntactic shortcuts like using pattern matching to extend the `is` keyword for quick safe casts are great ways to show you pay attention to the evolution of the language: if(input is int count) return count; Above performs a type check on `input` and casts and assigns to the variable `count` if the type check succeeds. Before 7.0 that would require 3 lines and a null check. I’d say understanding how and when to use async/await is important too. Too many people *still* equate async/await to parallelism when it simply isn’t! You can utilise `await` to wait on a parallel execution, but simply marking a method async and making it return a `Task&lt;T&gt;` won’t make it magically asynchronous. I see people making that mistake all the time when explaining async/await in interviews. The new `ValueTuple` looks pretty cool too, and class deconstruction as well.
&gt; although most is Windows specific This always mystifies me but i keep my trap shut. But considering this is /r/csharp, i'll ask this time. What are you referring to here ? Visual Studio ? Mono / MCS has been around ~14 years - only a couple years younger than .NET Framework. 
&gt; The superficial difference between events and delegates is trivial and I would expect any new hire to know when to use an event vs. a delegate. &gt; &gt; But OP isn't talking about understanding the very basics of C# that we'd expect new hires to know. He wants to be an expert. He wants to be able to explain the internals. That means fully understanding delegates, fully understanding events and being able to compare and contrast both. That is not how you related your own experience. You stated that you were &gt;back to my year-one understanding which is, 'Umm, an event is like a specific type of delegate....I think? I think in an attempt to make a (perfectly valid) point, you may have distorted some facts to fit your narrative. Which happens to the best of us, but it's not this user's fault for identifying the inconsistency.
It's interesting that multicast delegates are synchronous and sequential, since in networking multicasting is sending data to multiple users at the same time, usually over UDP.
This, or selenium if you need to login to access the page
I guess I disagree - I think that most C# developers cannot verbalize the differences between an event and a delegate beyond the superficial....and if you asked them to describe it, a response of &gt; Umm, an event is like a specific type of delegate....I think? Would be a totally reasonable normal answer. According to en.wikibooks.org and a bunch of other online sources, you'll see that's how they describe it: &gt; An event is a special kind of delegate that facilitates event-driven programming. https://en.wikibooks.org/wiki/C_Sharp_Programming/Delegates_and_Events So yes, prior to this thread, my understanding of how events are implemented, with regards to delegates, is '*an event is like a specific type of delegate*' Now, I could tell you a little bit more about events themselves. 'Well you know, they signify that something has happened, you can subscribe and unsubscribe, multiple subscribers can subscribe to the same event, with old school Winforms you'd have events that followed the 'object sender, eventargs e' pattern, etc, etc.... But none of that is about how it relates to a delegate. Without brushing up like I did in this thread, if you asked me yesterday: * Delegates are like function pointers * Events are like a special type of delegate That's really it
The notion of "superficiality" is one you've added ex post facto; it's unreasonable to expect people to read your original comment with that in mind.
You might try watching Jeff Fritz's old twitch streams, he gives a lot of background info as he codes and has some great guests as well. https://www.twitch.tv/csharpfritz Also, I've got to through Coding Blocks out there since you mentioned podcasts. Not strictly C# based, but heavily influenced...although I'm a bit biased ;) https://www.codingblocks.net/
Thank you for explaining this. As someone making a career change in their mid 30's into IT/Development, its nice to see the other skills necessary besides knowing the syntax of the code my application was written in. 
If Status.Hungry evaluates to 4, then wouldn't the first one work too?
Can you expand on the async/await part?
There is some big ego hidden in the text.
I mean, I don’t trust present self either, but the reality is I try to solve a problem to the best of my ability. If I end up finding a better way to do it, I make a todo for myself so I remember it next time I have to work on that area of the system. I don’t immediately rewrite code because it’s just another idea that may or may not work, and if it’s already tested and in productions, I’m not going to fight it. 
For podcasts, Coding Blocks and .Net Rocks are really solid. 
I am a senior programmer with over 40 years of experience, and I design systems that handle hundreds of millions of transactions per day. I manage staffs of programmers, I'm not just another grunt. The people who work for me (programmers, QA, business analysts) come in the door as junior people and when we leave the company they get jobs as senior people elsewhere, and for decades after they turn to me for advice about both programming and their careers. My systems have helped ensure the health of hundreds of millions of people and helped ensure the authenticity of tens of billions of products. I think I have more than earned the right to have a little ego about my work. 
Or he's just good at his job. Being aware of one's skill doesn't translate to ego.
&gt; We all know you're very smart. Much smarter than the creators of bloated enterprise C# compilers. Maybe you should make your own. Come back in a month when you're done. Actually it's funny that you say that, because I spent 4.5 years doing language design, and the guys I worked with used Visual Studio as the canonical example of bloatware in development kits. Our entire dev kit with everything included was a few hundred K. &gt; You don't seem to understand how installations of development tools work. Well, given that I did it for a living, yes, actually, I rather suspect *you* are the one who doesn't understand how they work. I am prepared to accept the fact that there is no non-bloated installation of a C# dev kit. I don't have to like it. 
Guess it depends on the type of work being done, I've got 20 years experience and couldn't answer those questions with anything but something very vague, and have never been asked about them in any interview or assignment. I'm sure it's all good to know but if you're not using that stuff regularly then it's kind of moot.
&gt;used Visual Studio as the canonical example of bloatware in development kits You can't seem to make up your mind on whether it is impossibly bloated (and OP won't find a solution) or whether compilers in 2018 take up just 12 bytes. So which is it?
Practice makes perfect. There really aren't any shortcuts, just read the docs and practice. 
Sometimes I do, but never with 2 days old code... I'm a perfectionist, which some people might think it's a good thing, but it's actually a kind of mental paralysis: if I think my way of doing something is not good enough, I sometimes read entire books to learn better ways. And it's not like I actually learn everything. I forget most of it as soon as I implement that one particular problem correctly. &amp;nbsp; What I found that works for me is to modularise as much as possible. I create a dll that encompasses an arbitrary part of the project (since I program for fun, I don't need to follow those strict lines of what each group of modules should do, then I test it to see if it's decent, and then I never look at its code again. &amp;nbsp; The process of writing it is still hard a struggle, but after it's done and compiled, I can manage to not think about it.
&gt;I am prepared to accept the fact that there is no non-bloated installation of a C# dev kit. I don't have to like it. Nobody was telling you to like it. I suggest you stop bragging about how small your compiler was, and how large your USB keys are. It's definitely not helping the OP at all. It's obvious you did not work on a compiler that was anything like the decades of bloat in the C# compiler. If you worked on a massive enterprise compiler, please let me know and drop some details. It would add a lot to this conversation. But I have my doubts that your experience is relevant, or you'd have done that.
Neat. Do you recommend any blogs or articles explaining how development tools are installed on different platforms? How the files are unpacked and built? As a programmer I don't know as much about this as I'd like.
That's a shame... So many things have shortcuts. Do you think maybe it's because the community doesn't very much care about the mini language? Besides, MS documentation on LINQ doesn't include the latest language features. I know they have a limited amount of men-power to do stuff, and they focus on what's most interesting to them or the community, but I really wish someone would make a *LINQ: from Dummy To Expert in 30 days* or something :P
I found Resharper handy, quite some time ago, but do keep in mind that there are some advantages to method syntax over query syntax--it can be less verbose, give you greater/more explicit control over closures, and it may look more consistent when you inevitably have to drop into method syntax for stuff that's not covered by query syntax (i.e. First(), Max(), Aggregate(), indexed Select() overloads, etc). And there's a [lot of stuff in Enumerable](https://msdn.microsoft.com/en-us/library/system.linq.enumerable.aspx), much of which doesn't have query syntax.
I don't see the local **n** being declared or initialised anywhere. Also, it looks like you're making that more complicated than you could. Just some timers firing events would be easier to manage, maintain and spot mistakes.
My favorite reference is here: https://code.msdn.microsoft.com/101-LINQ-Samples-3fb9811b I tended to learn something new when I needed it rather than trying to learn it all at once. But after awhile I had a pretty good handle on it. 
C# 7 in a nutshell has several chapters on Luna and all the operators, helped me a lot
What's Luna? I got C# 5.0 In A Nutshell. No money to buy a new one for the moment. I don't work yet.
Wow, 101??? I just bookmarked that.
I don't know a definitive guide but one thing I will say is MANY do not understand the algorithmic efficiency of LINQ. Have a think about the way you construct queries and force evaluation as you can very easily blow out performance due to not understanding the consequences of premature evaluation.
Yes, I know you have to fall back to the extension methods, but maybe, if we liked the mini language more, the devs would give us more stuff to do with it. The idea behind LINQ is for it to be declarative instead of imperative. With computer tech advancing as fast as it is, I think JIT compilers would be much more capable than us in writing imperatives in a decade or so. We should learn soon to tell the compiler **what** we want it to do, and let it decide **how** it will accomplish that. Plus I think MSIL will be supported by hardware pretty soon. 
Yeah, I do it sometimes cause I know my code is on github and I don’t want someone to look at it and go “wtf was he thinking!” lol. However unlikely that is. I’ve been coding solo for a while, and I always have this nagging feeling that my code isn’t ‘right’ and that I’m missing something obvious that anyone with “*corporate experience*” would do differently. In reality, my shit works, is fast enough, isn’t overly verbose, and has good documentation. There are always thing to improve on, but I’m sure, in large part, its fine. 
It's because that's not how this world works. You don't shortcut your way into knowledge. You have to learn by doing, and it takes time.
I do worry about that, but I think the JIT compilers of the future will allow us to be sloppy. That's not what I'm aiming for, but I'm not very worried about extreme performance, more than I am about the beauty of my code (and who among us doesn't look at a well written piece of C# code and just marvels at its elegance when compared to C++, Java or Visual C++). &amp;nbsp; I want to know how to write the queries. If I later find out they suck compared to alternatives, I'll get rid of them. As an extreme example, it's just like speaking Icelandic. 300 thousand people need to know it. The rest of us learn it for the pleasure of it.
I know it's not ideal, but you can download the PDF of the books off Library Genesis, and maybe buy it when you can afford it. 
I know, but I'm talking about things like... for example there are great guides on how to play the guitar, some even for particular songs or styles (I happen to play the guitar. Badly. Still, I can play *Should I Stay Or Should I Go*, *Revolution 1*, and a bunch of other songs. Trying to learn *Death Letter* but I don't think it's possible). But there are no such things for the LINQ mini language (maybe there are, I still gotta check the **101 LINQ Samples in C#** someone linked in here)
Is that a virus free thing?
Well, I only got side projects. My current project is to build a D&amp;D 3.5 Helper that's actually perfect, able to handle Unearthed Arcana and any publications under the Open Game License. Still dealing with the logic of it. Will need MAJOR help with the database stuff. 
http://linqsamples.com/ is a helpful resource. It's a cheatsheet type page that categorizes the different linq statements into how they used and provides example.
The framework is something you can choose (at least when working on a Windows PC and running Visual Studio). It includes extensions for platforms that really commit to .NET, like windows itself. The core is a standard. Anyone who wants to support .NET **has to** implement all the core features. &amp;nbsp; On the other hand, the framework gets new classes to its common class library, new language extensions and stuff like that, that are not part of the standard. So, if you try to declare something like a List&lt;(string, int)&gt; using the standard (the core) you wouldn't be able to, but you would with the 7.1 framework. &amp;nbsp; (The alternative for would be to declare a List&lt;Tuple&lt;string, int&gt;&gt;)
Starting up on on again/off again side project a free API for MMA data including fight cards, fighters, records, etc. I wrote the scraper around 1.5 years ago (WinForm/CLI app) and all the data is stored in a MySql DB. I wrote the REST API part of it roughly 1 year ago... Then my wife gave birth to out daughter so of course, my free time disappeared. Since then, I run the scrapers after all events and it syncs all the data I need bit haven't added new features. I am coming into some free time so I'm going to rewrite it all from scratch for .net core - everything from the scraper to the user friendly frontend. I figure it will be a great way to a) learn .net core and b) step up my web dev game, since at work I'm only doing back end projects.
Another one for my bookmarks. Tyvm
\&gt; if it's not broken, don't fix it This is a cost/benefit thing. But in many cases you're right. If you modify code there's a chance you're introducing one or more bugs, and therefore that code needs tested again. When you account for all that additional effort (devs often forget the testing effort) its easy to make refactoring work like this a net-negative. Unless the code is \_really\_ bad (will hinder future developers from working with it), or you need to rearchitect something to support some new feature, it's often not worth it. 
This isn't really a step-by-step suggestion, but go download Linqpad. Pay the man and unlock it; it's worth it. Alternately, you can use RoslynPad, which is isn't exactly the *same*, but cool in its own right; one reason is that RoslynPad follows the c# script syntax that you use with c# interactive (csi) which is damn handy for those short little applets that don't really warrant a full-on Visual Studio project. (Where RoslynPad loses ground is mainly UI strangeness.)
Sounds like your company heard the Microservice buzzword and told you to go build that without understanding why you would even build a Microservice to begin with. 1. Microservices IMO are simply just APIs calling APIs. 2. I honestly can't think of a reason why something would be too big to not be able to break it down. I mean, this is the whole point of Microservices... 3. Yes... plenty of books out there and I'm sure plenty of good resources you can Google. Probably some good pluralsight courses. 4. Rabbit MQ is not a service bus. It's a storage queue. It supports FIFO and is usually good for one service (although I know not everyone uses it that way) to pull a message from it if the message needs to be processed in order. A service bus is more of a pub/sub style system where multiple services can subscribe to it's messaging. 5. You'd probably put it in the same place you normally would... but it would likely be a separate project. 6. There's nothing wrong with keeping a single database. Although depending on how you want to architect it you usually want each microsservice to have it's own data store so it's a completely separate entity.
We're transitioning from a monolithic service bus to a microservice architecture ourselves. 1 - Our microservices are dll's 4 - We use MSMQ (Microsoft Message Queuing ) 5 - Our data access code has stayed in the core ESB with the business logic moved out to the microservice. 6 - Following on 5, because our data access is still in the core esb we can have as many databases as we want. A lot of those questions will be specific to your architecture (e.g. how many databases you want or how to break up your code) and without know a lot more about your requirements they're kinda impossible to answer
These shallow guides may give you a great crash course/intro to playing to guitar, or writing nice LINQ queries.. but posts asks "how do I become fluent in LINQ". DuoLingo is a great app for learning the basics of spoken languages, but there is no "level" in duolingo for being completely fluent, because even the app creators know that you need to spend time speaking in a language to get all the quirks and really be fluent. Writing software is no different. So no.. like /u/dastrn says, there's no shortcut to becoming fluent in LINQ or any programming construct (C#, C++, SQL, etc). 
Having them be in DLLs aren't really microservices... that's just shared libraries using the plugin architecture. Which is a fine way of doing things, but it's not a microservice.
thats true, thanks for the clarification
Sounds way cooler than mine lol! Well, I don't mind, there's no shame in being a geek these days.
I love LINQ. :) I'm not aware of any resources like you're talking about, but I think your next step depends on where you're at. Start by replacing all your loops. All of them. Occasionally you'll think you NEED a loop instead of LINQ, or that you need to resort to the dread .ForEach() method. You almost certainly don't. Part of that, by the way, is building IEnumerable LINQ extensions to perform such custom tasks, such as permutating. This yields valuable insight into the relationship between loops and LINQ. Another part will be dealing with non-generic collections that require the query language style. This is tremendously powerful and sometimes it's the only way to get your data into the shape you need it. You need to be comfortable moving between the functional progressions and the query language. At some point, you'll want to start understanding how reflection and LINQ interact. Stop mapping components and start decorating with attributes. Building LINQ + Reflection-based classes that transform data + filters-as-method-calls into IEnumerable&lt;T&gt; result classes. Get lazy. Start hating ViewModels and other classes that exist purely as intermediates between UI and data classes. The power of LINQ is the ability to propagate data while retaining the choice of when to care what that data actually is. But start by replacing all your loops.
Hey I’ve been trying to get started on a program go assist on travel in dnd by keeping track of food, time and random encounters. Dnd is great inspiration for programs.
Is your project on GitHub? I'm looking for a opensourcr project to contribute to...
It isn't. I don't even know how to handle GitHub properly. But I'd love it if it were.
The LINQ extension methods are also considered declarative, which makes sense because the LINQ syntax is just sugar for a few of the extension methods. A foreach loop, for example, would be imperative. I second the Resharper suggestion because it automatically translates back and forth, sometimes producing really mind-bending LINQ code that can be enlightening as you learn -- but also demonstrating that imperative code can sometimes be more intelligible and easier to debug than declarative. 
Get Resharper and let it re-tool your for(each) loops. I learned a lot of it that way.
I kinda of ignored that cause I don't know what Resharper is. I'll take a look at it tomorrow. Hope it's free.
It's not free, but the 30 day trial is long enough for this purpose. :)
This article does a better job of explaining it than I could here: https://www.wintellect.com/tasks-are-still-not-threads-and-async-is-not-parallel/
I'm about done with the Linux version. The Linux one will let anyone add a course, directly from the user interface. It's pretty much the same code, so that part will be ready in the UWP version within a day of the Linux version having it. It will be in the store once it has it. The name in the store is, "Dartomic GLIDE".
.NET Core is your best bet. You just copy the code to a folder, and enter "dotnet run" in the terminal emulator.
You should be my older brother! You're a natural born LINQ mentor.
Try iditect excel component, it can [create, read, edit pivot table in c#](http://www.iditect.com/tutorial/excel-pivottable/)
Resharper is a paid tool. So I heard. I'm afraid I have no money to spend on anything, as I'm not yet employed. (Also, wouldn't like to get pirated stuff. Not saying that you'd suggest that, but just so anyone else who sees this thread know I do not aproove of piracy.
Not so sure about your answer for number 4. At least in azure, service bus supports queues, topics (pub/sub) and hubs, for different styles of messaging flow. But to answer op's question, service bus can definitely be used for service to service communication.
What kind of artist do you need?
You can try it for free for 30 days.
https://guides.github.com/activities/hello-world/ Take a look, pretty simple... Message me if you need help...
Most of this is included in LinqPad. Best way to learn and test Linq imo
They should have answered these questions. I'm guessing they're playing buzzword bingo. 1) each is supposed to be deployable anywhere. Depending on tech that might mean you can deploy anywhere that has the supporting tech installed, or "Docker" 2)This is interpreted differently depending on how fast the consulant can run. The functional code should be separate, it's only communicating by messages after all, but share code ffs. If you need to format a key in a specific way, don't write that code 90 times. 3) Lots of beginnger level stuff, after that it usually turns into regret. These regret videos are still worth watching. 4) I build my own for various reasons, Rabbit are good, others include MSMQ (fucking shite), Tibco, Redis (has a pubsub built in) and countless others. Azure Service bus is ok, but if you're not deploying to Azure, skip it.Akka.Net does this quite well. I'd recommend it depending on your needs. I use a mix of Akka, Redis and Rabbit. 5) You persist the data at the point it needs to be persisted. Sounds patronising, but you ask the question "What happens if I don't save this now and predicate my next action on its success??" 6) DDD will help here (a bit) you can spread your databases about and use their common aggregate route as sn indicator of what and where to save something. For simplicity. bung it all in the same DB. You don't even know about AR yet, so just make some code work. Your environment sounds a bit toxic, address that sooner rather than later.
There are many reasons to stick with the extension methods. * More consistent with the standard C# language. * Easier to read for old and new programmers. * Better for composing queries that span deferred to in memory execution. * Better for large complex queries in general where you sub-select objects. * If you write your own extension methods, they will fit right in with the other extension methods. Example var myOrders = ctx.Orders .Where(o =&gt; o.UserID == myUserID) .ToLookup(o =&gt; o.StatusID, o =&gt; new { o.Product.Name, o.ShippingDate });
That shits gangster. Thanks homie.
Thanks 💫
&gt; I adore LINQ with its contextual keywords. I know it all gets compiled into extension method calls, but I just think the mini language is so elegant! To each his own, I guess. I strongly dislike the query syntax; it feels so off compared to the rest of the language. I always just use method calls directly. &gt; I don’t think many people share this same love for the LINQ mini language as I do, but I’ll risk to ask anyway. Is there a comprehensive step by step way to becoming really good LINQ? It’s the same as with everything else, I think, with the added benefit of LINQ just being translated into code. Step one is to carefully read the documentation. 
Hey man .. thank you so much for the reply!. I am already reading documentation explaining how to do the binding in a uwp app. thanks for the advice
You're right, of course, but I think Microsoft wished to take a step further with the query mini language, and I think that, should have we supported it, declarative coding would be much more advanced, and, in the end, it will be the norm, as we simply tell an AI what we want it to be done, and it puts the algorithm together and compiles it to whatever device it needs to run on.
Hey. I've started on doing a .net core implementation of the Adobe sign api, the current implementation is only for java and js. I also hope to target framework also at some point. 
I found that the C# section on Codewards.com has a lot of challenges that are solved by LINQ. You might find that to be a way to force you to learn new functions instead of just reading about it and hoping you remember. Good luck!
1. Our microservices are built as dlls, but those dlls are containerized and ran on docker instances. 2. While this sounds good in theory and is a good rule, in practice you will have services that depend on each other. I say be mindful of it, but don't treat it as gospel. Fact is that information needs to be shared sometimes. The billing service group has to know the value of an order. The shopping cart service group needs to build the order. Sure, you can combine them into a "checkout" group, but then say the customer support group needs to show it to an agent. No matter how you slice it, dependencies will always exist. When 2 different logical groups continuously depend on each other it's time to re-evaluate, but a single uni or bi-directional dependency is normal. 3. I don't have any resources others haven't already mentioned, sorry 4. We actually do not utilize a event bus. For our purposes it worked better to either use internal secured HTTPS calls or AWS SQS, SNS, Kinesis etc.. We evaluate how the service needs to communicate and pick whatever makes the most sense. 5. The key point about microservices is their tiny scope. They should deal with a single concern, nothing more. Because of that, most of the microservices I've created are a single solution with 3 projects - Web, Logic+Data and Test. 6. As I mentioned on 2 - dependencies will always exist. That being said, we try to avoid sharing access to underlying data stores whenever possible, instead preferring to route requests for data through the same microservice that wrote it. There are exceptions, of course. It really comes down to what makes the most sense in the given scenario. Regarding the single DAL project -- I honestly get the feeling that maybe microservices are not a good fit for whatever you are working on. About 1 1/2 years ago I was working at a relatively small e-commerce company and was evaluating microservices, and I had pretty much the same questions as you after reading about them. We had a monolithic backend api, strongly tied to a monolithic database and I mulled over how microservices could be useful. I think microservices aren't that great for OLTP or small companies. Don't get me wrong, they can be used for small, isolated services, but probably not on anything that involves the 1 big db. Now I work on one of the web's most popular websites, heavily leveraging microservices and the biggest benefits have been scaling up and down clusters, deploying the entire stack to different environments and / or regions and keeping the codebase maintainable.
Yes they both work but only one is considered correct
So I have done the Binding and Items are displayed when I add them. but I need the app to reload the items from previous sessions alongside the selected images .. I cant seem to find a way to figure that part out!
Working on cross-platform app for managing users/roles on sites using [ASP.NET](https://ASP.NET) Core Identity.
&gt; A service bus is more of a pub/sub style system where multiple services can subscribe to it's messaging. I believe RabbitMQ can do this as well https://www.rabbitmq.com/tutorials/tutorial-three-python.html
Don't start your project thinking microservices are the answer. Think before you code. Model out your domain (Google domain driven development) then break your domain up into logical subdomains. If you've got more than a few with well established boundaries, microservices are probably a good fit. For example, say you're doing an online store. You may have a product domain, a customer domain, a shipping location domain, a shopping cart domain, and an inventory domain. Those domains"connect" to each other but are separate concepts, so you might break your services down along those boundaries. "No dependencies" means each service is responsible for managing its domain. Your cart service doesn't care what a customer is, it just knows that its carts have a customer. It does no modification of that customer. Domain events are used to publish events that other services will listen to in order to trigger those modifications. As far as one database, your services shouldn't care if they share a DB with another service. We do this at my job by using SQL Server schemas to segregate them. That way, if a service needs its own instance, you can do that, but if it's a lesser used service, it can share an instance. In dev, it all goes into one DB.
For us: 1 Services are .exes. We use TopShelf so they can either be windows services or cmd apps. In the end we went with running them from the command line with task scheduler as that makes CI much easier. Each service has 3 projects, interface, app and test. 2 Our services have dependencies on other services. We have a Registry service that keeps the location of each service so an service using app only needs to know the message type and the location of the registry 3 4 We use RabbitMq with MassTransit. 5 We have a base library that contains a basic repository. Services using DB access include the library create a new repository descending from the base class. As our services are currently pretty simple we don't use complicated DAL 6 Put data in the logical place for it. Currently we use a single DB for most of the services but will create new DBs as required. We have some services used for communicating between apps so they will use the DB for the appropriate app/ 
We are working on a new project that might have 5k to 10k users, 500 concurrent at any time of the day. 2. My point was "Even after breaking the system into logical groups, what if a specific microservice needs to be broken down further, will that not induce common dependencies in the different blocks?" 3. Okay, I will check Pluralsight for this. 4. I am not quite sure what we would need for the message bus, RabbitMQ is something that popped up on a quick Google search and hence the query. I will also have a look at MSMQ as /u/Riajnor suggested. 6. Yeah, initially we will be making a monolith and then later breaking it into microservices as needed.
The project requirements state a capacity of 5k to 10k users. 500 concurrent at a time. 4. Okay, the project that we used as a reference is the eShopOnContainers application on Github, it states that we use an Event bus for inter Service communication. How do you evaluate how the service needs to communicate? I was of the assumption that HTTP was the preferred (may be the only) way to communicate? 5. In this case, web would contain different UI framework projects, Logic project will contain different services and Data different classes for different services, is it? The idea is that we use a monolithic database to start with, keeping in mind that we might have to break the database into smaller databases, if required in the future. This project is not based on e-commerce but has OLTP. Why are microservices not great for OLTP, the reference on github essentially uses a e-commerce application.
I used to think that sharing Id would also be a dependency that must be avoided. You are right, an entity from a different service must not be modifiable by one service, we are doing that. 
Thanks, will check MSMQ and ESB. 
5. That would mean, separate projects for each service, thanks. What is AR. Environment is not toxic, do not have seniors though.
 &gt;Having them be in DLLs aren't really microservices This is an entire thread of people missing the point. Regarding the thing I just quoted, **it doesn't matter**. Take an aspnet core rest API. You can target .Net framework and run an exe, you can target .NET Core and run dotnet my.dll. You can write a C program that responds to http messages on port 80, you can use service remoting. It doesn't matter. People miss the point of microservices. You don't *do* microservices. You end up with microservices if they fit your domain the best. If a monolith is what fits your domain the best trying to force microservices will end in misery.
I don't think your company truly understands the consequences of a microservices architecture. Although I am not sure if you are using .NET Core yet, but I think you may want to start with [Microsoft's .NET microservices e-book page]( https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/index). It does have a complete [suite of example microservices](https://github.com/dotnet-architecture/eShopOnContainers). This example could help you understand how microservices work and interact. If you haven't already, I recommend [some understanding of DDD](https://domainlanguage.com/) to understand some of the more advanced Microsoft tutorials ( [like this one](https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/microservice-ddd-cqrs-patterns/) ). Maybe that could help you understand better how microservices can fit into your company ( or maybe not). 
&gt; What does STAT mean? ASAP
‘STAT’ just means ‘this is needed quickly’
Nerd fact: Stat is actually just a shortening of the Latin word “statim” which means immediately. 
Lots of these questions can only be answered by answering more questions. If your company requires micro-service scale then it is big enough for you to delegate these concerns to some software architects. Propose this to your management. If they can’t satisfy that then you’re going to have to educate yourself as a microservices architect. There are so many different approaches but I would recommend learning how to use [Docker with ASP.NET Core](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/docker/?view=aspnetcore-2.1) to start with. If you’re looking at using a service bus then I wouldn’t look at using ASP.NET Core but instead plain .NET core programs running as services in Windows or Linux which interface with the bus. A service bus technology I saw being used at massive scale within BSkyB was Apache Kafka.
Is that a loop?!
Yes, we will be using .NET Core for this. eShopOnContainers application on GitHub by Microsoft is being used as a reference. And, the architect suggests that we will be using DDD. Management suggests that once this architecture is finalized we should be using the same architecture for all future web projects, is it the right thing to do? This project suggests a capacity of 5-10k users, however other company projects made till date had a Max user cap of 500. At what level of complexity, user wise does Microservices become a preferred architecture? Company has mostly CRUD apps, nothing on the computation side.
For Microservices, we are creating Core 2 API with EF Core. I believe they can be integrated with service bus. For frontend, we are using third party controls with jQuery on top of Core 2.1 runtime.
They won't have it on the first day.
I will add "needs a real architect". We have architects in our company, but I have the feeling these guys have no idea what they are doing : our domains are fucked or non-existant, we have a copy of the same information across so much systems, and they are trying too much to push us into the "cloud" in "micro-services". During our last yearly IT conference, the chief architect said over the mic "I ask 3 questions when I interview architects: 1- Do you like technologie? 2- Do you want to work in IT? 3- Is it Ok if you have to do some overtime?" I think we are fucked...
Get [LINQPad](https://www.linqpad.net) I use this program every day at work really helps with seeing how stuff works in isolation you can even download and run samples the free version is ok but it’s really worth spending a bit and get the pro licence
They've known about this for 3 years!
&gt; Management suggests that once this architecture is finalized we should be using the same architecture for all future web projects, is it the right thing to do? The "same architecture" has different interpretations. Do you mean Windows vs Linux (as in deployment and/ or development architecture)? Or maybe code level? I think that is short sighted to simply force one technology without evaluating the others. So, as long as your management is open to new ideas, I see no reason to start with familiar technology first. &gt; At what level of complexity, user wise does Microservices become a preferred architecture? I personally try to identify the need first. Measure, collect data, and get user feedback. Your existing architecture still matters. So, if you find yourself needed to apply DDD first, then I think the need to implement new microservices goes to the back-burner. Refactor those existing CRUD rourines toward DDD patterns probably should be first. Microservices are really just an implementation detail. 
The compiler can't fix everything, since some problems might require changes to the behaviour of your program in order to fix.
Ok. I understand that now. Thanks. I agree also, the == Status.Hungry is more correct.
Don’t build it as a monolith first. It defeats the entire purpose of microservices. 
If you're a student, you can get it for free actually. Also, for startups you'll get 50% off. Just check https://www.jetbrains.com/resharper/buy/#edition=discounts
&gt; We should learn soon to tell the compiler what we want it to do, and let it decide how it will accomplish that. I am pretty sure we already do that: it's the essence of how optimizations work. The compiler will never be omniscient, however. AFAIK, there is some built-in support in the compiler to optimize LINQ queries by doing things like combining consecutive where clauses or calls. Whether the C# language designers are interested in expanding the size of the LINQ query language, I couldn't say. My impression is that it's good enough &gt; Plus I think MSIL will be supported by hardware pretty soon. Given the existence of .Net Native compilation, I don't know how likely that is, really. FWIW: Resharper is a large Visual Studio extension that brings with it a bunch of new tools and features, including the (fairly minor) ability to translate some expressions between LINQ query syntax, LINQ method chains, and even standard loops. A personal license is pretty expensive, but an academic one is free (so: good news, if you're a student).
This is good ol‘ YAGNI vs. DRY again. Don’t make microservices for the sake of microservices; it’s what an architecture astronaut would do. It’s fine to start with a monolith, then break components off as needed.
I always think the same but a couple of times I tried to rewrite it better and halfway through realized the reason I wrote it the original way. Now I trust myself. I also learned to use the greatest kind of comments - noobs comment what - experienced programmers comment why - masters comment why NOT I became a master of comments so I put these why not comments so more often than not I am blocked in attempts to rewrite by my own comments.
I guess I disagree with that. In the context of my post I said that: I'm a developer with 10 years of experience / a masters degree in CS / regularly made attempts to achieve an 'expert' level of understanding. The specific example was that &gt; I could read a chapter from C# in Depth and for the next month, I could give you an amazingly eloquent explanation on the relationship between events and delegates in C#. Like, I literally remember thinking how cool it all was, but I don't remember the specifics. Now I'm back to my year-one understanding which is, 'Umm, an event is like a specific type of delegate....I think?' My (attempted) point isn't that I'm a terrible developer who can't work with delegates or events. It was that, while I could read the chapter or section on events and delegates and, for a short-time, eloquently explain the relationship between them, but after some years of time, I've returned to my 'year-one understanding' of the relationship between events and delegates. A professional developer with ~one year of experience isn't going to be able to eloquently explain the relationship between events and delegates. I don't think I've moved the goal posts of added the concept of superficiality after the fact. I think it's entirely reasonable for people to assume that a year-one professional software developer should be able to *use* events and delegates; but that they would not be able to eloquently explain the relationship between them. I don't think any of this contradicts my original post.
Seems like you're a teenager enthusiastic about the results of programming, but completely unenthusiastic about all the work it takes to become good at it. I'd advise you to keep this a hobby and try to stay out of it as a career. You'll be turned off by what it actually takes to be a good developer.
Haha, yes. The only metric that I know of is "Have they already developed similar systems before?" I figure, learning these things won't hurt, sure there is a lot to learn butI am hoping I will be able to do that eventually.
Don't worry about it. It's not super uncommon for companies to wrap a mid level description under a junior title. If they are serious about hiring someone with junior level pay they will accept someone without the mid level requirements. The worst they can do if you apply is say no.
The question is not whether it is reasonable for someone to understand what you meant (it is), but whether it is reasonable for someone to have interpreted it differently (which it also is). That's my opinion, in any case. If we disagree, we disagree.
an async method returns a task. you should handle the error if it occurs, and you should provide feedback of whether the task completed or not. So I wouldn't call it shoot-and-forget. The user can close the console before the task completes. oh, and the async-await keywords aren't meant for multi threaded operations, but to release the working thread while an IO operation is performed. Learn the difference.
&gt; An async method returns a task. you should handle the error if it occurs, and you should provide feedback of whether the task completed or not. So I wouldn't call it shoot-and-forget. I don't in this particular case. I want to fire off a web request, and I honestly don't care whether it succeeds. (I know there are non-async methods for this, but bear with me. Replace it with another async method in your mind, if you must.) &gt; The user can close the console before the task completes. This is not a user-facing application. &gt; oh, and the async-await keywords aren't meant for multi threaded operations, but to release the working thread while an IO operation is performed. Learn the difference. `Task.Run` disagrees with you.
Usually when I need to make an fire &amp; forget call with tasks. I just spawn a detached child task. Which should run until it's complete. (on a cellphone now, so I'm not sure if this will look good at all or if it's correct) 
Do you use `Task.Run`? Or some other mechanism?
See my edited answer, I kind of f*ed up whilst typing ^ ^
You do not need to await or even reference the task for it to complete. Nothing you do to a started `Task` instance has any effect on how it executes. You generally *should* await all tasks to catch exceptions however, even if it's just for logging.
So, you would do this even if the target method was itself an `async` method?
I'm a fan of Kafka instead of RabbitMQ.
Yes, it will return an answer (depending on what you do in the method) nearly instantly. Due to all working being done in the detached child task
My concern is that calling `await` on it effectively blocks on that `Task`. I know the overall program doesn't, but that specific method will halt until it receives an answer, and that's what I'm trying to avoid. I could check it in a non-blocking manner such as glancing at its `IsCompleted` property or something.
I've seen `Task.Factory` a few places. I think I need to read up on it.
I disagree. Unless you're rebuilding an existing system with a team that has experience in microservices, it's better to go monolith first. And when I say monolith, I don't mean build 100% and then split it. After starting as a monolith, after awhile the bottlenecks of the growing system should start to become apparent as the team learns how the application functions as a whole. I find this gives much better results than trying to anticipate it all up front. That usually results in an overly-granular splitting of services. Microservices are very useful, but each new service has a bit of overhead associated with it in terms of configuration, setup, build pipelines, etc. Splitting things apart as small as you can just because someone whispered the word "microservices" is cargo-cult programming. Splitting services apart because you have data that says your login endpoint is getting hammered the most and slowing down the system is and informed decision with concrete measurable goals.
Yeah, Service Buses themselves can also do message queueing on top of what I said. I just don't think RabbitMQ supports all the additional things a service bus do, which was the point I was trying to make.
You can but you may want to await somewhere in your code just to make sure its done. You can wrap a task in a task if you want to have a fire-and-forget with a timeout or failure event chain attached.
I'm not sure how I missed the point when you basically said the same thing I did, just in a slightly different way.
What if I genuinely don't care if it fails?
I believe they should build the monolith first, because it sounds like this company is just playing buzzword BINGO with Microservices without understanding why they would even need them to begin with.
Oh boy, this is a solution looking for a problem isn't it? Build a monolith prototype and then decide which pieces should live as isolated services. I get it, in the era of Netflix blogging about their architecture, microservices are all the rage and monoliths are evil. You don't work for Netflix. I realize this is probably out of your hands. Management and architects may be telling you to do this. In that case, godspeed my friend, this is going to be a rough project to work on. Starting a new project with microservices is a pretty strong indicator of premature optimization.
Do you care if it runs at all?
Haha fair question. I do care that it _tries_ because I know it will succeed much of the time. When it doesn't, there is literally nothing I can do about it even if the program informed me about it.
You can but you may want to await somewhere in your code just to make sure its done. You can wrap a task in a task if you want to have a fire-and-forget with a timeout or failure event chain attached. 
Does the program not terminate (Like a console app or asp.net/mvc)? As long as it stays running you can do this, otherwise your don't care code may never run.
In my particular case, yes, it is a long-running console app that just runs in the background forever.
Don’t. Use Task.Run, which is the new way. 
Haha relax. Right as you said this, I had just found the MSDN docs, and they indeed say to favor `Task.Run` now.
I understand your concern, but there are contradicting suggestions here, some day build monolith and then create Microservices, others say build with Microservices in mind. I am leaving it on the architect I guess, whatever he suggests.
Since you are in the context of a console app I have to ask why you want to do a fire and forget? If you do not await the task then it's possible for the app to close before the task finishes. Some of the other answers here leave off a really important fact about doing fire and forget in this manner. If you do not observe the exception from this task in some manner your process will crash. https://blogs.msdn.microsoft.com/pfxteam/2009/06/01/tasks-and-unhandled-exceptions/ Consider these things before you do async void or even trying to do fire and forget in a console app. 
Even the simplest linq queries are sometimes massively inefficient compared to what is capable with C# code, let alone what the machine is capable of. Example: * using Linq's Sum method on 100,000 floats: 541 us, 48bytes allocated * A simple for loop: 53.8 us, 0 bytes allocated * A SIMD for loop: 9.7 us, 0 bytes allocated Linq is cool but it is not super efficient, so a deep understanding of when it causes performance problems and when it doesn't (sometimes it even helps) is a key part of being really good at Linq.
In a web context (not sure if this applies to core) you should always await an async call. If you don't, then IIS can clean up your task/thread without letting it complete
Need the code.
What's the point of this method returning a Task&lt;bool&gt; instead of just Task? And further, why is this returning a Task at all instead of just being marked as void? Other people already mentioned using Task.Run() instead of TaskFactory, but I'm not sure why if your goal is a fire and forget that you'd have the caller fumbling around with having to handle a task and waste the overhead to probably "await" the result of this method.
In the unlikely event that I do start caring, what if I don't want the particular async call to not halt the calling code (at the `await` site)? Should I use `Task.Run` instead?
Read 'building microservices' from oreilly
If you just want to fire a web request you have no reason to use async-awaits. Just initiate the web request and ignore the task that it returns. async-await provides you the ability to release the current thread you're running on, to do other things. It has a very different goal than, say, running multiple threads in parallel and waiting for them to finish. Async-awaits is ideal for web applications (because you release your thread to work on another requests until the IO operations completes). As others pointed out, Task.Run is probably what you're after. 
For this kind of thing, Hangfire is your friend
yup. I don't understand what they're trying to accomplish there.
Glad you found it useful! Yeah, that's the standard way of doing enterprise level software nowadays (and always has been). You wouldn't believe how much more productive you become when you adopt this technique in conjunction with proper unit testing techniques.
I agree with the OP that the keywords and the syntax is nice, but I also completely agree with this comment. Having to mix extension methods with keywords is ugly imo. It's a shame there isn't a way to make your own keywords for LINQ somehow.
It's somewhat misleading to say that it blocks; it is in fact a non-blocking operation. The compiler creates a state machine that allows execution to return to the awaited operation when it completes; the thread is (or at least can be - it's somewhat complicated) freed up to do other things, which is why it's non-blocking.
You don't when you 'fire and forget'. But I see you are talking about server side process. So I guess it would be fine to use Task.Run (I do).
As I said, it was an example on how we're doing it. Keep in mind that my example does not include a complete picture on how this has been implemented at our end (why we're returning a Task&lt;bool&gt; for example).
Take a look at DataFlowBlocks. They allow you to essentially fire &amp; forget tasks by sending them to a data flow pipeline without blocking until completion. They also give you a lot of options for how they're executed and for terminating the data flow.
About the non blocking part: Not quite true, it depends. A task is the promise to do some work, and return some result (eventually). Awaiting a task just means that you wait till the result comes back. This could be instant (if the task already finished), or it could take a while. But you can also add synchronous code inside of a task method, and that will just execute the moment you call await (well, also not true, it's when you call the Task method). If all you have is synchronous code, and no "true" async tasks (IE one that uses system resources to await some task to return) then it will be a blocking task. One might wonder what the use of a synchronous task is: * To satisfy a Task interface because it just returns a simple result and doesn't require any IO work for instance * To return cached values inside of the task since it was called before (although you could also reuse the created task in this case)
I'm writing an [Elevator](https://github.com/cobrce/Elevator) simulator to be automated by a PLC, the interface uses WPF to draw three doors and an arrow (that shows the position of the elevator), the communication with the PLC/PLCsimulator is done through plugins (I actually wrote 2, [DummyPlcPlugin](https://github.com/cobrce/Elevator/tree/master/DummyPlcPlugin) that simulate a PLC, and [Step7PlcsimPlugin](https://github.com/cobrce/Elevator/tree/master/Step7PlcsimPlugin) that connects to Siemens plcsim)
This is old and might not be what you are looking for, but I thought this was really helpful: https://codeblog.jonskeet.uk/2010/09/03/reimplementing-linq-to-objects-part-1-introduction/ &gt; The plan is to reimplement the whole of LINQ to Objects, explaining each method (or group of methods) in a blog post. I’m going to try to make the code itself production quality, but I’m not going to include any XML documentation – if I’m already writing up how things work, I don’t want to do everything twice. I’ll include optimizations where appropriate, hopefully doing better than LINQ to Objects itself. If you are looking for a higher level 'How to do X with LINQ' thought https://code.msdn.microsoft.com/101-LINQ-Samples-3fb9811b was pretty nice. (I see that someone else linked it, so +1 for them) 
You mean when you move away from that way of doing enterprise level development and instead moving to richer domain models?
Right. That's the point I was poorly making. The program/thread doesn't block, but that particular method is blocked until the task in question completes, and that's what I don't want. The method containing the fired-and-forgotten call needs to keep going. I don't want it to wait for the result.
If your afraid of your code I don’t think I want to go near it either. 😏 There are legitimate reasons to change code other that performance or bugs. Driver updates (Mongodb, others) external reference updates and any security related issues that come up. 
Why not use Task.Run()?
If you want to fire it off and keep going, mark the method async, but don't await it, just capture its returned task, say in a class field or something. You can use the methods of Task to check for completion and/or wait on it at a later time.
Well, that's part of my question. Does it make sense to call `Task.Run(() =&gt; ProcessAsync())`?
I hadn’t heard the term “Architecture Astronaut” before, so I read the Joel Spolsky post that I assume originated it... I know he was writing from a 2001 perspective, but it’s so cringey to read it in 2018. He comes across as one of those guys that said “there’s a market for about five computers in the world”. I get that the real spirit of his post was less about whether there would be any lasting impact of emerging platforms and more about focusing on useful product/user-oriented features. But in the 17 years since he wrote that, platforms and developer-oriented features have actually become practically inextricable from the success of products and business processes. And they’re often even plainly visible to users: think OAuth, iCloud, cross-app tasks/sharing/hooks, IoT... Users are tangibly interacting with platform-level stuff now, in ways that are hardly “as interesting to me as learning that my supermarket uses trucks to get things from the warehouse”. It also annoyed me that he incorrectly called platforms/tools/frameworks “architectures”... Your architecture is what *your product’s codebase itself* has, not what tools you used to build it — which, in turn, have their own architectures.
Well again, it does except for the fact that you need to deal with error handling.
Will post it tonight!
I'd probably have the empty catch inside the method itself.
If the task is synchronous, then still the await isn't blocking. It just means that the task will already have completed, synchronously, before the await happens.
An asynchronous method should be awaited at some point, or it may not be completed. It sounds that what you want to do is to enqueue work on the thread pool.
That may be what I end up doing. My only beef with `Task.Run` is makes yet another `Task`. I don't want something else I can `await`. I just want the job to run. So, I may go back to `ThreadPool` calls for these kinds of jobs. Is there documentation that confirms your first statement? That was my exact fear with just calling the async method and moving on without `await`.
Unless `ProcessAsync` is actually (partly) synchronous, it makes no sense to do that. 
As for the exception part, that I know for a fact. At least on the .NET Framework. As for the completion part, I'm not entirely sure. I think it's possible to write write an awaitable (not a task - not all awaitables are tasks) that requires waiting to complete. Don't know whether that violates any contract associated with async/await though. It doesn't feel good though to fire off an awaitable and not wait for it. Leaves a bad taste...
As a DevOps consultant I like to ask people what problem they're trying to solve. We're coming hot off of one client that shared database tables between different web services without regard for how that creates interdependencies on the table format. They were pretty frozen in place with stuff backing up due to an unrelated dependency on ops demanding a huge downtime window for the product. "What problem are you trying to solve with microservices?" In that client's case they needed to actually isolate out their concerns properly because the cross-domain dependency list was a spaghetti bowl. They didn't have any qualms about creating new additional dependencies in there either. The main C# solution had 134 projects and was planned to grow. We taught their architecture team to write out API specs that the devs were taught to treat as the word of god. The only way you were allowed to communicate with a service was via the API. Each new service became a separate git repo so it was difficult to make cross-references between them even. The new project they're building has needed a little "Do those really belong together?" prodding but it's gotten better. &gt;As far as one database, your services shouldn't care if they share a DB with another service. We do this at my job by using SQL Server schemas to segregate them. I would simplify this to "The underlying database software is abstracted out. Don't worry about where your database lives. Worry about the fact that nothing else is allowed to talk to it." We had the same question with our client, "But doesn't that mean we have to pay for a bunch of SQL server instances in Azure????" Well no, you can put them in separate schemas on the same machine, but that's an optimization you can concern yourself with later. For now focus on just making them separate.
I don't know if Spolsky originated the term, but it appears that way. &gt;But in the 17 years since he wrote that, platforms and developer-oriented features have actually become practically inextricable from the success of products and business processes. I don't see this at all. &gt; And they’re often even plainly visible to users: think OAuth, iCloud, cross-app tasks/sharing/hooks, IoT. I sincerely doubt more than 0.01% of users have ever heard of, much less care about, what "OAuth" is. Nor should they have to. And really, go thirty years back, and you might bring up OLE and AppleScript as equivalent examples. They're sort of there, and you can use them yourself if you're so inclined, but you probably don't want or need to. &gt;It also annoyed me that he incorrectly called platforms/tools/frameworks “architectures”... Your architecture is what your product’s codebase itself has, not what tools you used to build it — which, in turn, have their own architectures. The toolchain and stack you build upon is part of the architecture. It doesn't matter if you wrote it yourself; it matters that you could've chosen a different one (including one that you did write yourself). In any case, this has strayed quite a bit from the point. Deciding ahead of time that your app needs to be divided into tons of microservices is a bad choice, just like the opposite of not thinking _at all_ about how to structure your app ahead of time is also a poor choice (or non-explicit choice, as the case may often be). Don't overengineer. Don't underengineer.
It is almost always wrong to not `await` or `.Wait()` or otherwise check the result of a Task. It starts with this *incorrect* assumption: "I want to fire off some work in the background, *but I don't really care* what happens to it after that." The assumption is incorrect because *you really should care*. Threads are not an infinite resource. ThreadPool threads are even more limited. If you are not awaiting/Waiting the Tasks you are creating, you *will* eventually run into threadpool starvation problems under load when requests are coming in to your system faster than the "fire-and-forget" tasks complete. And these can be difficult to debug if you don't know what you're looking for, because trivial little `await` and `Task.Run` operations elsewhere can start taking forever to complete and you're thinking "why the hell is WriteLineAsync() taking 30 seconds!?!?!?". And all of these stalled and waiting-for-threadpool-thread tasks can do really shitty things to GC performance. The good news is that it's not really that hard to do the right thing. On the simple side, there is `ThreadPool.QueueUserWorkItem`. On the more definitive side, there is the producer/consumer pattern with `BlockingCollection&lt;T&gt;`.
Do you care if it's stalling forever and eating up all your ThreadPool threads, preventing your other async operations from starting?
You can use something like `ContinueWith` to handle any potential exceptions without blocking. More [here](https://stackoverflow.com/questions/15522900/how-to-safely-call-an-async-method-in-c-sharp-without-await). 
You're correct at an architectural level, but I have a web request that fires once every 10 seconds. I could keep the `Task` around and check its `IsCompleted` property before launching another one, but I honestly have no need to `await` or `Wait()` its result. I just don't. So, while I appreciate the technical insight, answers along the lines of "you have to care" aren't helpful.
And therein lies the crux of this whole thread. People seem split on the proper way to approach this.
&gt; Should I use Task.Run instead? Task.Run uses a ThreadPool thread. Not such a bad thing, as that's what the ThreadPool is for. However, it gets problematic for fire-and-forget. * The ThreadPool starts out small. Like 20 threads (or maybe 20 * # of cores, I forget). * The ThreadPool will grow on demand, but only at *2 threads per second*. * If your fire-and-forget operation starts taking too long, you can end up consuming ThreadPool threads faster than the ThreadPool will add new ones. * Your fire-and-forget operation *will* start taking too long at 3:00am on your day off when some network hardware somewhere in the pipeline starts doing some hostile thing like resetting TCP connections in a loop or some shit. Suddenly, your simple task that always finishes in 1 second is now taking 45 seconds.
It may make sense to have tasks report back to a queue of some kind so you have what amounts to a running log of tasks as they're completed and can easily identify orphaned tasks.
This is not good. Please don't do this. Look into the producer/consumer pattern with `BlockingCollection&lt;T&gt;` instead. Or TPL DataFlow.
That's good to know. In my situation, I fire off a web request every 10 seconds, and I'm fine adding a bit of code checking to see if the previous one is still running. What I don't want is that method awaiting the result. I don't want that method _stopping_ for that request. I want the request to do its thing separately. I know there are synchronous web request APIs and other ways to solve this specific problem, but I'm still interested in the answer as it relates to `async` and `await`. If it were something other than a web request, I still have use for fire-and-forget scenarios.
If the request fires once every 10 seconds and the web request starts taking more than 10 seconds to complete (which it can, due to network issues and the remote host having degraded performance), then you'll eventually run out of threads. At the very least, make sure your timeout is set below the 10 second repeat frequency. The only advantage to fire-and-forget with Task.Run() is that it's easy to type. ThreadPool.QueueUserWorkItem is not hard. BlockingCollection&lt;T&gt; is useful for more complicated situations.
I would consider a security issue to be the most severe form of broken.
I'd be surprised if this particular request ever exceeded half a second given the setup, but yes, those are good to keep in mind. I'm leaning toward `Task.Run()` at this point because, as I said, I can just query `Task.IsCompleted` before firing off a new one.
async/await does not have anything to do with background work, directly. It was created because *multithreading correctly is hard*. async/await lets you write code in a synchronous way that lets the overall system make maximum use of threads and cores. Think of it as DoFirstPart(); yield to other threads while asynchronous stuff happens. Continue(); It allows the system to do more things in parallel, but the `async` method itself acts like a blocking operation.
I know. I'm transitioning how I approach problem-solving. I come from a background of old-fashioned thread management. (In fact, I'm working on a job system for a game project in C++.) I held off on learning `async` and `await` when I saw that it necessitated having `async` all the way down to `Main`.
1) They are whatever you want them to be. dll,exe or anything else that does what needs to be done. 2) This is an alarm bell that tells you that something is wrong with the architecture. This is where you stop and spend time, wondering "what are we doing wrong". 3) The book by Sam Newman 4) Do not think about this yet, figure out what you need and then find the right tools. There are lot of alternatives, spend time on research - choosing the right tool for you is not something that can be defined until you know how everything is supposed to be solved. 6) At least every service should be deployable on its own. I think you need to spend some time understanding what is important and what is not important at this stage. Create a draft of the services, look for stuff that makes it complicated and that creates dependencies. Follow the rules at first, and keep in mind that stuff that breaks the "rules" often is an indication that something is wrong somewhere. But then don't be afraid to break the "rules", but know why you are doing it. 
You're still using the wrong tool for the job. Use a `SemaphorSlim` or a `Mutex` to make sure only one request operates at a time. &gt; I'd be surprised if this particular request ever exceeded half a second given the setup Whatever can go wrong will eventually go wrong. There's no such thing as webrequests that will never, ever start performing badly. Too many points for something to go wrong. Your own networking hardware, all the hardware between you and the destination, the destination hardware, and the possibility that the destination will get updated with broken code. Now, this may not be important enough for you to care, as you're in a console app doing finite work rather than responding to user requests. But do consider what would happen if that remote host started stalling and never responding.
How is it throwaway code quality if I may ask? I read your earlier answer about filling up the threadpool. But what if that is not a concern?
Mutex inside the F&amp;F job or outside?
If you're storing user activity, how is that not a concern? Are you responding to user requests, or is this is an offline console app? What if the store fails? What if simultaneous requests are operating for the same user? How do you handle errors? The only advantage of your code is that it's simple. There are proper ways to do it that are not hard.
1. It's a web app 2. If it fails to store anything, it doesn't matter (non crucial data) 3. It only stores activity based on specific endpoints. So no it won't be simultaneous requests for the same user 4. Errors are being thrown into our logs (our failrate is way below 1% (1 out of 2million requests fails according to application insight). And those only occurs during our automatic downscale at late evenings. A small side note here: We only save activity for the last 90 days. Any activity passed that gets erased by TTL. Sure it might be simple and may cause some scaling issues further down the road. But for now we're in a happy place with how it works. Thank you tho for mentioning BlockingCollection (haven't heard or read about it before).
Task.Run() when not awaited does just that, it also usually forces the operation to run on another thread. 
Well not to be a pedant but 'compile time-enforceable constraints happen all the time'? Defined by the business? In 30+ years I've not felt the need and certainly never heard such a request. You're not getting confused with a DB schema or something?
Not only that, but also some things cease to exist after the request. In a typical DI setup you may end up trying to use a disposed dependency. It might be something as simple as an IDisposable from a using block. But that applies to multithreading in general.
Any max concurrency? For example if you want it to run in the background, log errors and only have max 1 active, this can be a good pattern: class MyClass { private Task _lastAsync = Task.CompletedTask; public async Task MethodAsync() { // ... try { await } catch (Exception ex) { // Log } _lastAsync = BackgroundAsync(); // return ...; // If Task&lt;T&gt; } private async Task BackgroundAsync() { // ... } } 
No, but DBs offering it adds insult to the injury. Requirements like "the amount in a line item should at least be 1, and at most be 99" happen all the time. We just currently encode them in the view or model. Being able to encode them as part of the type itself would be a huge boon, as it could enable compile-time checks. The compiler could, for instance, discover a bug where your line item still exists but has an amount of zero (or worse, a negative one).
I think the bigger danger is knowing when your DI container does the disposal for you. Many containers will automatically dispose objects when the scope (often tied to the request) finishes. If you have an async Task then it may try to access a disposed resource if it isn't explicitly awaited 
It depends on your version of .net what will happen. To be safe, I would suggest calling ContinueWith on the task. You can choose the right arguments to only run if there's an exception, etc, but in older versions of .net, I'm pretty sure an exception would kill the entire app if it wasn't handled.
This is the right answer. There's a lot of crap info in this thread.
`Task.Run(() =&gt; ProcessAsync())` would do nothing to address your question. That's just wrapping one previously unawaited task into a new unawaited task and making a trip through the thread pool for no reason.
Why is Linq's Sum method so inefficient?
Does {Binding ChangeValue} not work? I'm a little pain killered right now so I may have misinterpreted he code.
Don't be a dick dude. That's such shitty advice.
Stop posting. This is exactly how to turn people off this community. Post useful, relevant information that the younger audience can learn from, instead of telling them, as a teenager, to "keep this a hobby" Fuck some people are stupid. OP: As many other people have posted - practice, practice, practice. Rote learning the syntax will not help, you need to know how yo apply it, where to apply it, and when to apply it. I'd recommend starting a project where you require heavy data manipulation and focus on using LINQ. This is the most effective way you will learn. Practical experience. Good luck :) 
It uses delegates is the reason I would say. You have to call a delegate to get the value to sum rather than a + operation against a member.
I suppose the thing you want is `Task.Run(async ()=&gt; { await YourAsync(); });`
Interesting. Do you have a link to official doc for that behavior? Thanks.
Don't do it. It will bring vs to its knees. There are plenty of free extensions hat do most of the same stuff and don't destroy performance. Things like codemaid and roslynator. 
Hmm, sounds a bit dys*functional*. Pun intended.
Iterators in C# have overhead, best way to see why is go look at the source for linq. Sometimes this overhead doesn't matter much - if you are doing a ton of work in each iteration then who cares if you waste a few nanoseconds per iteration. 
Nice.
The first thing I think when I complete a project is all the things I could do better haha the thing is you learn so much along the way you want to go back and rewrite it all. Chances are you don't have the time for that. So you move on and refactor when you can.
I can't code in less then the latest there are so many language features I miss.
Do you care about the result? If so you need to await or have it self handled . If not but you still want error checking, just do a ContinueWith and log the result or exception or what ever you need. You can also use ContinueWith to follow up with all your handling code if you want it to be fire and forget
[Video](https://www.youtube.com/watch?v=97WxCmMut1k) I've been working on game taking place in space. One of the reasons I'm working on this is that I was always annoyed that in pretty much all strategy games that I have played planets never moved, even if several years pass in those games (like in Stellaris). I'm hoping to have a working and playable prototype by the end of the month. It's more advanced than it looks - a lot of simulation doesn't have the code yet to display it (like galaxy view), but it's there. Almost everything is done in C#. The only thing that isn't is shader (written in HLSL) - it's used to display planet textures as spheres.
Tail non-awaited tasks with a .ContinueWith that handles exception (e.g. by logging or showing a message to user)
The correct thing to do here is to do a continuewith on the task returned by your long running operation. The delegate to the continuewith call receives the original task that you kicked off as a parameter. You then inspect the Task.IsFaulted property to check if the task failed. The above approach does exactly what you want - run something asynchronously without blocking your calling thread and allows you to complete the caller. There is no additional task created like in Task.Run. It also allows you to inspect the Task after it completed and log a status or the exception that your long running operation failed with. Remember though that in an asp.net context your fire and forget operation may never run or may get killed for no reason of yours, if asp.net decides to shut the appdomain down. From your description I sense youre ok with this.
The default behaviour for unobserved task exceptions (exceptions occurring in background tasks) is to be silently swallowed (since .NET 4.5, when async/await was introduced). https://blogs.msdn.microsoft.com/pfxteam/2011/09/28/task-exception-handling-in-net-4-5/
Oh! Well, I was bitten by the crash'n'burn on .NET 4.0. Had no idea they relaxed the rules on this! I take it this is how .NET Core handles unobserved exceptions as well?
Either use a for loop or call the linq method ToList / ToArray to foreach a copy of the list.
Yep, exactly.
Why not check it in a non-blocking manner?
So I was right.
This is pretty high level for a beginner. And I feel that you may get discouraged by it. Try some beginner projects before you move into working with tcp. Even I don’t like tcp and I have a couple of years under my belt with c#
[here is a fun memory leak / problem we had](https://stackoverflow.com/a/51015875/73135) solution was to call the async job using .ContinueWith(t =&gt; { }, TaskContinuationOptions.OnlyOnFaulted)
Hangfire is great. Fire and forget, with a dashboard to view jobs and you can easily retry failed jobs.
[https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity?view=aspnetcore-2.1&amp;tabs=visual-studio&amp;#37;2Caspnetcore2x](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity?view=aspnetcore-2.1&amp;tabs=visual-studio%2Caspnetcore2x)
this looks like the approach i would recommend as well.
For basic individual user accounts, most is decribed in the tutorial that wightnoise posted and your tutorial, for web api you will probably want to use JWT tokens, i used this tutorial https://wildermuth.com/2018/04/10/Using-JwtBearer-Authentication-in-an-API-only-ASP-NET-Core-Project pay attention to [Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme)] which tells the class which type of auth to use, there are also a few starter projects on github like https://github.com/Longfld/ASPNETcoreAngularJWT. 
&gt; Do I have to find the binding for the view's DataContext? i've always dealt like it that way yeah, as the datatemplate within your binding is just a model but you want to use a command from a viewmodel the easiest way i've gone about doing this is just setting an x:name to the top element to e.g. here its your window, then in command set something like {Binding ElementName={that name}, Path=DataContext.ChangeValue} to get access to the model element you may either want to pass it as a CommandParameter (probably the easiest) or make use of a container has a SelectedItem or set your own SelectedItem property on hovering over an item or ...
Wondering why you say this. Task.Run returns a task... just like YourAsync already does.
FUD kneecapped Mono for years.
Mutex is an OS-level threading primitive, so SemaphorSlim is probably more appropriate if you don't need cross-process exclusion. Inside the F&amp;F job, you "wait" on the Semaphore and then release it when the request is finished. That way, it will block if and while the previous request is still running. *However*, it will then immediately do the next requests. So if a request stalled for 30 seconds, you end up doing 3 requests back-to-back. If you really only want to do it once every 10 seconds, then a `Timer` is more appropriate.
 &gt; I think there are so many ways to solve certain problems that it's easy to look at your solution from the past and also think of another way to solve that problem even though it has no benefit to the overall project. In other words, the previously solved problem, even two days ago, it old, stale, and you've thought of another way to solve it that's fresh, new. That's actually **great** (assuming you can afford the time to do that) because you will learn a LOT about each of the solutions and their (sometimes not so obvious) side-effects and disadvantages. Some solutions appear nice (for example they're really fast), but have disadvantages that you only later discover, like being very inflexible, or locking you into a very specific way of doing things. Picking the right type of solution/approach correctly the first time is pretty much impossible, because you probably only know some rough requirements, so all potential approaches look equally good. Only through lots of time, learning, trial-and-error you build a "database" of the intricate details that differentiate the solutions. Don't be too hard on yourself! What you're doing - this "rewriting" - is an extremely good way to learn. IMHO it is the quickest way to become an expert! # My view: I recently noticed a similar thing but I came to a different conclusion than you. At least in the cases where I noticed that recently, the difference between my old and new solution was that I had more information when crafting the newer solution. The problem and requirements for potential solutions have become more defined. # Simplified example: Using a third-party UI framework, I had to implement special DragDrop functionality for a sort of script editor. You can select multiple statements, and drag them into a new container (while making sure that statements can't be dragged into themselves). So I made some classes (DragDropController/DropTarget/DragDropable/...) to represent everything. A few weeks later we realized that we also need DragDrop functionality for a different kind of editor; a graph-based one ([see this image to get a rough idea](https://docs.aws.amazon.com/lumberyard/latest/releasenotes/images/script-canvas-x-axis-movement.png)); where you can connect some ports/sockets between graph-nodes. Now the problem seems similar (drag-drop) but it requires a completely different implementation, since connecting ports in a graph is something completely different. # Conclusion: It's not so much that I don't trust my old code, but sometimes it can't be reused because the differences in requirements might just be too much. 
Don't get disheartened. Roles like that do exist, They are just often obscured by people who work in HR not wanting to take risks. Case in point: My current employer hired 2 graduate students to come do Powershell automation style work. Granted its not the same level of complexity as C#, But is DotNet based and is challenging in its own right. The important part is perseverance. If you want it bad enough you'll find something :) best of luck!
I wouldn't say I'm *literally* a beginer - I know the language, I'm just at the point where I need to actually build something in order to keep learning.
Well if you’re determined go for this, but in my opinion tcp isn’t used in many normal applications. Things like web requesting and such are a lot more practical and I dare say fun to learn 
I was gonna go for building an API like this after Im done with the chat but i dont really have any ideas abt what i could build
If you have a favourite game check if they have a web api. You can easily create a program to track your stats. (I did this myself with runescape)
&gt;At some point, you'll want to start understanding how reflection and LINQ interact. Stop mapping components and start decorating with attributes. Building LINQ + Reflection-based classes that transform data + filters-as-method-calls into IEnumerable&lt;T&gt; result classes. I'm very curious to know what you mean by this. Do you have a practical example that implements a LINQ-based data mapper pattern using reflection that is statically typed? 
Thank you :) 
What exactly do you mean with this? Setting two entry points for your application? I don't think that is possible, as an application only has one entry point. What are you trying to acieve with this?
&gt; Why the vertical layout but stretched horizontally? Because the DevExpress grid that shows the contacts is enormous and the client wants all those fields visible. &gt; Why the Button to show the selected Group? ComboBox SelectedItem should just show. I was having trouble with the property update; this was the only viable alternative. &gt; Why are you labeling the function of the comboboxes outside of the comboboxes? is their default state just empty? Pretty much yes, until an item is selected in a different combobox (Email combobox is empty until it gets populated with emails from the Campaign selection). I realize this is contrary to the issue of the button being there. &gt; why drag to sort? make the Grid headers do the sorting...like a togglebutton. It's DevExpress; I don't know or care how to change its built in functionality. Frankly using it at all is a massive ball ache that I'd rather not deal with but since I don't know how to handle selection of records in a standard datagrid, here we are. &gt; Clear Selection is almost redundant as a click on the checkbox Column header should select all/deselect all. Client wanted the button. &gt; This is a VERY basic and ugly but functional layout example you could go with: https://imgur.com/a/mAXCrXK grid can go top or bottom doesn't matter. Nav Buttons are visually more pleasing if the align with the send mail button but will be further away from the rest of the navigation if you do that. To quote my client: *doesn't have to be fancy.* I quite like that arrangement actually. I'm sure with the theming that DevExpress forces on you when you use it, it might look fairly decent and it sure as hell is organized a LOT better than what I've got currently. Thanks.
To help with load times (my pc is very slow so large datasets can take quite a while) the client has opted to split his data into collections of 2000 rows. I'm reducing scrolling that has to be done by only taking 500 rows per "page" though now I think of it, Excel doesn't split up data this way in a worksheet so maybe I shouldn't either... Only thing is the client said he tends to work on a collection in different sessions over a number of days so its tricky to know where he left off last time if there isn't some sort of mechanism in place like this (thats also why the bookmarking feature).
&gt; Why the vertical layout but stretched horizontally? Because the DevExpress grid that shows the contacts is enormous and the client wants all those fields visible. &gt; Why the Button to show the selected Group? ComboBox SelectedItem should just show. I was having trouble with the property update; this was the only viable alternative. &gt; Why are you labeling the function of the comboboxes outside of the comboboxes? is their default state just empty? Pretty much yes, until an item is selected in a different combobox (Email combobox is empty until it gets populated with emails from the Campaign selection). I realize this is contrary to the issue of the button being there. &gt; why drag to sort? make the Grid headers do the sorting...like a togglebutton. It's DevExpress; I don't know or care how to change its built in functionality. Frankly using it at all is a massive ball ache that I'd rather not deal with but since I don't know how to handle selection of records in a standard datagrid, here we are. &gt; Clear Selection is almost redundant as a click on the checkbox Column header should select all/deselect all. Client wanted the button. &gt; This is a VERY basic and ugly but functional layout example you could go with: https://imgur.com/a/mAXCrXK grid can go top or bottom doesn't matter. Nav Buttons are visually more pleasing if the align with the send mail button but will be further away from the rest of the navigation if you do that. To quote my client: *doesn't have to be fancy.* I quite like that arrangement actually. I'm sure with the theming that DevExpress forces on you when you use it, it might look fairly decent and it sure as hell is organized a LOT better than what I've got currently. Thanks.
&gt; Well, why does your customer want to manually select the items at all? Wouldn't it be be better to give him some selection tools like: company name, range in miles/kilometers, city, post code or something like that? He does all of that selection before this point. He's got his reasoning for it which I frankly can't be arsed to remember of recite right now... He wants it this way and that's pretty much that; I've got to make it work.
Unrelated, but maybe you could use NSSM instead 
Does it support .Net Core yet? Last I checked it hadn't been updated.
Yeah it does, support for .net core was added in the 1.6.0 release
&gt; Why the Button to show the selected Group? ComboBox SelectedItem should just show. &gt; &gt; I was having trouble with the property update; this was the only viable alternative. Actually in redesigning now I've remembered what the problem is... Contacts load asynchronously: var contacts = await Dal.Instance.Contacts.ListAsync(SelectedGroup.Id, PageNumber); And I can't do an async load on a property change... At least, I don't know how to. With this in mind, I'll stick the Load Contacts button in under the ComboBox until I have a better option here.
&gt; We had a monolithic backend api, strongly tied to a monolithic database and I mulled over how microservices could be useful. That exact thing is happening where I am now. I put that on the backburner and I am kind of hoping they will forget about it. :)
Yeah this reeks of XY problem from a hundred yards
Last night I created a json parser for .Net :D It was much easier than I though because Json has a very small spec (less than 3.5K words) https://github.com/encrypt0r/Wile
Are you sure? http://seriot.ch/parsing_json.php
Going with your screenshot as a basis, I like this much more than the old layout. I'd appreciate your thoughts [https://i.imgur.com/7IVpSx7.png](https://i.imgur.com/7IVpSx7.png)
Yeah, this is the coolest thing I've seen today... Great work. I love it
https://www.reddit.com/r/csharp/comments/8ujlgg/introducing_fugetorg/
Well, sure creating a production-grade parser is very hard. But creating something that works 95% reliable is good enough for me, it's a side project after all. 
Well u instalt Xamarin yourself, and it shows you how mutch it is when you install it so... whats the point? 
I no longer use Xamarin, and it's actually not Xamarin's fault. Most of space was taken by Android (SDK, NDK, Emulator images...) I am glad that I can remove them now :D
Yes but android (sdk ndk etc) is whats being instalt when xam is instalt
&gt; ...it seems to me that most essential features were added by C# 5.0 (e.g. delegates, linq, async/await) and everything beyond that is mostly syntactic sugar. You're mostly right here, although some big changes like Pattern Matching and Tuples. If you're comfortable with C#, you should be able to catch up on features past 5.0 by studying these page: [C#6](https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-6), [C#7](https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7)
Thanks a lot. This works like charm! I can now pass the ValueModel to the Command as a CommandParameter. Now I think I need to pass another parameter since I want to increase the value-property as the mouse is moving up the Y-axis and decrease it, as it is moving down. How do I get these informations transported? Or should I access them directly in my viewmodel? That doesn't feel very mvvm-ish to me.
I think it is possible because it works in Visual Studio. In VS I right click my project and selsect properties. There I can set the entry point and it works as expected. I can't figure out how to do this in Rider. 
I wasn’t trying to challenge your argument, rather support it. 
Do you care if the operation completes, if it fails, or if it succeeds? Simply creating the Task will start the task. If you don't await the task then your application could stop while the Task is in the middle of execution. You don't have to await it. I would still suggest using a continuation for logging or awaiting the Task at the very end. You could hold them in a list or using something like TPL Dataflow to process each task and then complete / await the Dataflow block at the end.
Removed: Duplicate.
Removed: Rule 2.
Good to know but I would never decide to optimize my code based on compiler quirks. Unless that code is very frequently run and performance improvement is worth the effort.
You should understand that if you truncate your database logs you will no longer be able to do a point-in-time restore of your database. You should set up regular FULL backups of your database in order to preserve your data. Also if you want your logs to *STAY* small - you can. From SQL Management studio, open a connection and run: "use master; ALTER DATABASE [database_name_goes_here] SET RECOVERY SIMPLE;". This will cause the DB engine to automatically truncate your DB log file after EVERY SINGLE QUERY. Again you lose point-in-time restorability. 
Thank you for your reply, a here is a bit more context: These databases were mainly for development purposes and were not production databases. And I should have been clearer about this: I didn't remove the log files I changed the recovery model to simple which shrunk the logs quite a bit.
I've done a few in different environments. I'm trying to think of what I could give you. Here is a project to implement generic search functionality compatible with Entity Framework. You take whatever class contains your search data, decorate it with attributes that relate to a data class, and the search query object does the matching and gets the results for you along with paging &amp; sorting functionality. https://github.com/dipique/SearchQuery I have another project (which I haven't decoupled into its own repository) that is built on that builds an MVC-based user interface just from an object. To go from a new data class to having a full add/edit/create/search interface, complete with the ability to have dropdowns for selection from a list of options and the ability to govern which fields are visible, editable, searchable, etc, you just need to: create a controller that inherits from a base controller, initialize with any settings, create a generic viewmodel, ViewModel, and create a generic View. Everything else is wired up automatically so adding new screens is as easy as setting up the initial object.
I’m not sure I fully understand but when you find that the ID exists on the page create a string with an update query, “UPDATE (table name) SET STATUS = “item found” WHERE ID = 10;” then do ExecuteNonQuery. Check this example for reference: https://stackoverflow.com/questions/19956533/sql-insert-query-using-c-sharp
Fair enough - I figured you were a dev - which is why I mentioned what I did. Most dev's that I know, know literally nothing about SQL and most don't care/want to (which is why things like LINQ exist). Most dev's that I know also do not create a fresh new database to work with on every build. In which case, even a dev could stand to lose a reasonable amount of "work" if they lost their local db. Anyway it sounds like you actually *DO* know a fair bit about SQL. Maybe my post can help somebody else with the same problem. 
Damn this is such a cool language.
Just with the lite on details of 500+ concurrent users, this can easily be satisfied with a search layer such as Solr and a Caching like Redis. None of that is micro services and is entirely scalable well beyond 500+ users. I just finished the book Designing Data Intensive Applications. It is a long read and would help you make informed decisions: https://www.amazon.com/Designing-Data-Intensive-Applications-Reliable-Maintainable/dp/1449373321/ref=sr_1_1?ie=UTF8&amp;qid=1530545923&amp;sr=8-1&amp;keywords=designing+data+intensive+applications+by+martin+kleppmann 
The real question is, why?
How is this harmulf or malicious? This is a single player mod to a fucking video game ffs
You're a self righteous piece of shit, i hope someone someday will kill you slowly
&gt; MS documentation on LINQ doesn't include the latest language features I beg your pardon? What part of [this](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/getting-started-with-linq) seems incomplete to you?
Probably ought to have explained that in the first place; at a cursory glance, it looked like aimbotting. I would have happily restored the post. But given your disrespectful tone and response, it'll stay removed. I suggest you make an attempt at the change yourself (you stated you attempted to modify it yourself but was not successful, so you should include the code of your attempt). Post that attempt, and include the disclaimer that this is for a single-player mod use, maybe over at /r/learnprogramming or /r/learncsharp. But probably best place to post it would be: /r/GameMods or /r/GTAV_Mods.
Thanks, will check it out. Ours is a small shop. So, focus is also on building an architecture in a set of technologies that can be learnt easily and are in sync with the current stack of the company. 
I'm a beginner and soon wanted to do some things with SQL so it is a good thing to know
Interesting. I've long had a custom duplex stream in my personal utility library- wondering if I can finally retire that in favor of this system library.
Do yourself a HUGE favor and read through one or more of the following MCSE cert books: Database Development * 70-761 * 70-762 Database Administration * 70-764 * 70-765 Or, better yet, get both certs - it's 4 books + 4 exams. . I can tell you this, being a DBA for double-digit years: * The number of "code" developers (.net / java / python / etc..) that have even a minimal amount of SQL knowledge is EXTREMELY small (by 'minimal' I mean 'outside of how to write/execute a simple SELECT / INSERT / UPDATE / DELETE statement'). * The number of "code" developers who have to work extensively on a daily/weekly basis with SQL databases is *EXTREMELY HIGH*. Literally EVERYTHING nowadays runs on a database. Often times those are SQL based. * There are non-trivial order-of-magnitude type synergies that can be exploited when both code and the database are used and coded *PROPERLY*. Yes I realize the word 'synergies' makes me sound like a clueless Pointy-Haired-Boss or a greedy Wall Street M&amp;A hack. * Each and every single time I've come across a "code" developer who had extensive knowledge of "the dark side" (database) - they have been indispensable to their employers and have basically been able to dictate their salaries (to some degree). These are the guys who quickly become "team leads" (or higher) aka "the technical guy who knows the most about the most stuff that our app runs on" aka "the guy who we can't let leave our company - we'd need 3 or 4 people to replace everything he does". 
If you have a Pluralsight subscription (or can sign up for something that gives a free Pluralsight trial like VS Dev Essentials), I have some recommendations [here](https://www.reddit.com/r/csharp/comments/8l4n01/what_courses_do_you_recommend_taking_on/dzghw8o/) for C# Pluralsight courses.
I'm 13 so the employment stuff doesn't affect me that much but good to know for the future and I'm not that sure what synergies even means (mainly because I'm not a native english speaker)
Best of luck to you :) 
This is awesome! Thanks
I mean, if you don't want a fully integrated IDE and instead just want a command line experience, the latest .NET SDK sits at just under 300MB (and includes C#, VB, F#, msbuild, templates, props/targets, etc). If you want just the runtime + C# compiler (no msbuild, props/targets, etc) you are sitting at ~65mb. If you want just the C# compiler and its dependencies you are sitting at like 10mb. All of these are comparable to other modern toolchains. 
The actual C# compiler is small, it only grows in size when you add in an IDE or other supporting build tools: https://www.reddit.com/r/csharp/comments/8upwbz/portable_c_compiler/e1o2ljy/
The Microsoft .NET landing page is probably your best best for finding the relevant info (outside of your favorite search engine): https://www.microsoft.com/net/
You mean like viasfora? I use it for nested brace colors but haven't paid too much attention to everything it does. [https://viasfora.com/](https://viasfora.com/)
You also have the option of using things like VSCode, VIM, nano, Notepad++, etc (if you want an IDE with a smaller footprint, but also with significantly less functionality).
I would interpret it as a good candidate for a jr or mid level role depending on how much work experience you have, keep at it. They have some great courses on there, I would suggest checking out the C# Learning Path and just running all the way through. I believe that you can take another assessment in a few months, if not, just email them and they'll likely help you out. You should have no issue finding a job with that level of competency. 
There are only a few assessments on there now, but they have been adding more recently. It may help to get in contact with them and express your interest in that particular assessment.
I love articles that go through the thought process and tools, it's often more useful than the content.
I would tend to agree, the last line of code you have there is best practice, as you are using an enum rather than an arbitrary number. It is much more readable that way.
I absolutely agree, you miss 100&amp;#37; of the shots you don't take. Additionally, they may like you for another role even if you do not get the one that you are applying for. 
Same here! I learned a lot from this. Enjoyed it!
Rather than be condescending, you could offer some advice on how OP could improve.
It's a personal side project but it's really for making my work easier ... which is cheating for the topic but here goes: At work we use a third party application to track some major statistics. It's a huge company and i'm just working at a branch office. There is this weird fucking abismal (to only me) situation going on where no branch has API access to that software... BUT it's a "web" (intranet) application. So any webapp is an API if you can figure out how to emulate a browser and parse it right? So i'm working on that. It's horrible but fun O-o. Atm i'm deadlocked at calling a specific js function that oddly yields a different result in selenium than a "real browser" (for lack of better words). It's really weird. Also remote debugging sucks. 
I could say the same, no worries. Internet chatz 
Surely tho that doesn't include dependencies like development C++?
What is the use of two entry points to your application? 
PLINQ is older than 6.0, pretty sure
Array.asSpan() You had me at ass pan. 
I've been using `Span&lt;T&gt;` for about a while now from the System.Memory alpha preview package; it is one of the coolest types I've used in a while. I'm so happy to see it finally hitting the release build.
you should just interact with the db directly from code rather than using the sqlite cli. this seems to be a pretty decent guide: http://blog.tigrangasparian.com/2012/02/09/getting-started-with-sqlite-in-c-part-one/
Oh great. $50 off a minimum of $1,099 (individual).
Thank you. I've read that guide. The thing is I want to have the application using as little 'non-standard libraries' as possible but I guess that will not work for me. If no alternative arrives I will give up and use the library. 
It should either be - Executable: CMD.exe - Parameters: **/C** sqlite3.exe my.db ... or - Executable: sqlite3.exe - Parameters: my.db ...
Yep, that's right.
Publishing a `standalone` version of `csc.exe` for .NET Core (cross plat) currently produces 95.8mb of artifacts: * One 77kb host (csc.exe) * 7.09mb of Roslyn libraries (csc.dll, Microsoft.CodeAnalysis.dll, etc) * 8.9mb for the CLR runtime (coreclr.dll, clrjit.dll, etc) * 53.0mb for the CoreFX libraries (mscorlib, etc) * Many of these, such as System.Net.Http aren't actually needed, but are copied to the output anyways (there is a bug tracking this) * 3.8mb of localization data (so chinese, russian, etc language packs) * 4.3mb of documentation files * 140kb of config files * 19.8mb of pdbs (debug metadata) When you cut out all the "unneeded" stuff, you sit at somewhere around 20mb. If you AOT it using CoreRT, you sit even smaller (it was around 10mb, last time I checked and is possibly smaller now)
Most of the additional data (such as the CoreFX libraries and the CLR runtime) are also shared across the entire SDK, so it is a one time cost for a lot of tools
This is important.
By not using the sqlite provider you are using way less standard libraries tho. System.data.sqlite is an accepted non-microsoft system library for a reason.
Well I'm very surprised. What about C++? Why does installing .NET also add that on? I don't quite see how C# could compile without those large installations too.
Have you tried with RedirectStandardError enabled?
When people say modern compilers are really great at optimizing, posts like this makes me hesitant to believe them. I would have incorrectly assumed they all produced the same assembly.
The HasFlags method was very slow until .NET Core 2.1 where it is recognized and optimized by the JIT itself.
[The sidebar has a good video series on the basics of C#](https://mva.microsoft.com/en-US/training-courses/c-fundamentals-for-absolute-beginners-16169?l=Lvld4EQIC_2706218949) [VS Dev Essentials](https://visualstudio.microsoft.com/dev-essentials/) can get you a trial account for Pluralsight, which is a great resource for video training. For recommendations on specific Pluralsight videos for C#, see [this comment](https://www.reddit.com/r/csharp/comments/8l4n01/what_courses_do_you_recommend_taking_on/dzghw8o/). Do you mean a company that primarily uses Microsoft technology, or a job with Microsoft itself? If you're going to be working for Microsoft, they'll provide a Pluralsight account once you've joined as well. I learned C# before JS, but there are a number of similarities in syntax (especially for things that have been added recently to both languages), but it can be difficult to bridge the gap in language fundamentals; Object-oriented design can be very different from JS, and Microsoft has a lot of object-oriented traditionalists.
How else are you going to get developers to switch to something else if you don't give them an incentive?
How do you plan to release for iOS ? dylib cannot be present in iOS release bundle.
Ditto, I'm not a library guy but have found some great uses for it. It's super elegant, given how low-level it is. 
I don't understand how calling a CLI from your code is better then using a "non-standard library"? It seems a bit ridiculous. If you are so insistent on using the command line just write a batch file or powershell script. 
This website was absolutely amazing when I started. https://www.dotnetperls.com/ It’s so well explained, I never misunderstood a thing he taught.
https://www.infoworld.com/article/3025784/application-development/how-to-work-with-dapper-in-c.html
I've been a C# dev for about three years now and I'm embarrassed to say I don't know when I would actually use these types. I've mainly done web development if that matters, but I have done other stuff as well.
You could easily knock out the 3 basic C# classes from Microsoft on this website [Edx Online Classes](https://www.edx.org/) 
A good arch will be able to teach you what you need to know. Either via mentoring the senior devs who mentor you, or direct mentoring. Your arch and/or lead dev need to provide some guidelines for what they want to see ASAP.
&gt; It’s fine to start with a monolith, then break components off as needed. Only if the dev team is extremely diligent about how they are writing their code. 
&gt; Now I work on one of the web's most popular websites, heavily leveraging microservices and the biggest benefits have been scaling up and down clusters, deploying the entire stack to different environments and / or regions and keeping the codebase maintainable. Those are all the real reasons to go microservice. *Especially* the last one. Microservices can make it a lot easier to do blue/green deploys in environments where servers are at a premium. With the right code-glue (or load balancer) in place I can update my API with minimal or no downtime on the frontend. 
I'm also a newbie dev and I am kind of confused about the usefulness of Span. I see it talked about a lot but I am having trouble understanding the difference between this and then just allocating a new object for some subset of elements in an array. I get that Spans in general reduce code and there is no real need to re-allocate memory or even have multiple references to the same object... but I might be missing some other usefulness? To me it seems like it solves boilerplate code. I have not seen anyone asking for Spans before though.
i feel like i'd need a concrete example of what you want done for me to give you a helpful hint (which is probably useless for you, sorry) modifying the models in the viewmodel is completely fine and for a lot of things it wouldnt make sense unless you do this unless im misunderstanding what you're writing, as not all data from models is driven directly by databinded user input e.g. press a button to fire a command to fetch info on a page and you want to display it, what would you do? Simplest thing would be to have a Text property or something on your viewmodel where you save that information to, the change in the text property is reflected somewhere where you bound to that in XAML just make sure all the properties on your model and viewmodel that youd want to display have some mechanism of RaisePropertyChanged(PropertyName) from implementing INotifyPropertyChanged to reflect any changes to the UI done in the viewmodel, MVVMLight ViewModelBase and ObservableObject both implement that and have a helpful Set(() =&gt; PropertyName, ref _propertyName, value) for you to use as for passing what would be multiple parameters in the commandparameter, well, you can do a few tricky things again i think i'd just have to see what youre doing to see if you actually need to do that
&gt; just allocating a new object This kinda stuff makes a *huge* difference at scale.
[WizTree](https://antibody-software.com/web/software/software/wiztree-finds-the-files-and-folders-using-the-most-disk-space-on-your-hard-drive/) is so much faster than WinDirStat, and has been updated much more recently.
Another thing it's good for is performance, especially with string manipulation. In Avalonia we've been starting to add Span usage internally, and even with just the slow-span implementation on .NET Core 2.0.7 we're able to use between 10-15% of the original memory for those specific features.
Here's an exercise for you: * Consider a data set with ten columns and ten million records. At average 100 bytes per field, that works out to about a gigabyte of data. * Load the data into memory as a List&lt;T&gt; where T is a class representing a record. At a disk access rate of 10 megabyte per second, that works out to about 100s load time. * Filter the set, eliminating about 1% of records. Notice that your memory allocation increases (by a lot) and there is a significant wait time as it is allocated and (when approaching constraints) paged swapped to disk, plus GC time. * Your machine learning library needs an array of arrays of primitive types. Convert the List&lt;T&gt; into the columnwise format. Notice that your memory allocation increases (by a lot) and there is a significant wait time as it is allocated and (when approaching constraints) paged swapped to disk, plus GC time. * What if you could perform the filtering and shaping operations without memory allocation or garbage collection, just by passing around pointers? This is how C++ and C programmers kick .NET's ass. If only there was a managed .NET way of doing these operations without memory allocation... Enter Span&lt;T&gt;.
They're geared heavily towards high performance code, mainly to prevent array allocations and the need for copying buffers. This is very important in game engines, simulation, image editing programs, and web servers. In web development you're unlikely to need to use these types directly,however, if you're using ASP.NET Core with Kestrel, a significant chunk of its performance (and safety) comes from using Span&lt;T&gt; to quickly shuffle data out of a low level buffer and through a parser as quickly as possible.
The last few years have just brought one awesome feature after another. I don't know how I wrote code before the [?.](https://en.wikipedia.org/wiki/Safe_navigation_operator#C#) operator, pattern matching, or `await`. Object deconstruction is rapidly finding its way into my code and I suspect that `Span&lt;T&gt;` will eventually as well.
Linq is my favorite thing.
Feel free to pillage my MSSQL code from here, might help with constructing queries, executing them, and returning useful data. [https://github.com/jchristn/databasewrapper](https://github.com/jchristn/databasewrapper)
Feel free to pillage some code from two of my projects: [https://github.com/bigqio/bigq](https://github.com/bigqio/bigq) (messaging) and [https://github.com/jchristn/watsontcp](https://github.com/jchristn/watsontcp) (TCP-based messaging with integrated framing)
I had to script an import of a Csv dump from some 3rd party contract software we used. I needed nearly every column, and I could figure most of them out (they came without headers), but there was one column that was all 1s. I kept it, titled the column “The Number One” (right in the middle of columns like “Signed Date”, “Bonus Commitment”, etc). The number one will live on forever, cause I can guarantee nobody will want or know how to remove it lol. Just one little piece of my legacy at a company I didn’t enjoy working for.
Well, I will admit this is supposed to be a cheat sheet. I wanted to have my application on a usb drive, come to work, plug it in, extract data, go home, plug it in, play with the data. But everyone here seem to think using cli with c# isn't the best ideea so I will simply install the library on all my PCs(less of a headache). 
As the last commit was in 2011... yes, it's outdated and dead.
BTW, what's "SoC" in this context? System on a Chip"? If it's not relevant, perhaps have that at the end as an interest? I think this has already been said, but you're going to have a slim CV, so don't pad it. Do however show HOW you use the technology. Break it into sections: You should have a few paragraphs at the top which say you're keen and list your tecnologies in msost useful/most experieneced order: i.e. "Motivated self taught C# develop familiar with [ASP.NET](https://ASP.NET) Core, .NET Core and Standard 2, WPF, ... " Don't forget tools, we like tools, so if you use Git, polish up your git, figure out out pull requests, push, rebase, origin, all that crap. Then, as you have no job history, give an example of how you used each of the above, and how they fit together. "I built a WPF to to make mX Query requests designed to parse DNS packets *and does something with them* &lt;--- don't forget we code for a reaason, Then perhaps list qualifications if any. If they're awful or historical, you can leave them off or keep it simple. Mine just says things like "passed English, Maths,..." Also innclude here, probably at the front, which parts of which certification you are working towards (I.e. which books read, how far you are from taking the exams. Finally, and briefly list any relevant hobbies, a contact address, email, phone number, and if you feel brave your git repo address (Tidy up in there first).
There are a couple of two page primers on the Microsoft site. Just read those, or ask the agent (if you got the interview through an agent) Which version of C# (not CLR) they use. He may not know, but will know how to ask them. But seriously, just This microsoft page contains a few pages on each language version, I've linked to 6, just work up the side bar. Probably don't need to memorise it, just be aware its there and what the big ticket items are. It always takes people a period of time to adjust, so don't sweat it.
cheers, I'll check them out!
LINQ is so embedded into the language now that I forgot it didn't even exist before 3.5. Damn.
Check out iamtimcorey for the basics. You should learn how to build an API and how to use them. Best of luck my friend
Hey thanks for the reply and advice. Was that question about SoC aimed at myself? 
I've just googled SOC without camel case and understand where your coming from. SoC or Separation of Concerns is a fairly common design principle which involves separating code into sections which concern one thing. https://en.m.wikipedia.org/wiki/Separation_of_concerns
Non-Mobile link: https://en.wikipedia.org/wiki/Separation_of_concerns *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^196789
Ah well done. I thought it was system on a chip briefly, but with the rise of Arduino, et all, it's not surpsing :) If you're up for some SoC, have a look at SOLID. That comes up in interviews a lot.
 You use ... ConfigureAwait(false). This will prevent the thread (if one is used from marshalling back to the thread with affinity (i.e. ASP or WPF, other places that have affinity. Await doesn't "block" the thread continues doing stuff, i.e. processing events in WPF, and when the task is ready it postsback an answer tp the affine thread. Also, tasks are not threads. Just because you wait on a task does not mean it happened asynchronously.
Why do you need to install the library on any pics? Just have the dll included when you compile your program.
It's probably obvious I am new to this. I have to admit that this option didn't occur to me but I looked into it and have the solution. Thank you!
Pluralsight is a great place as well as YouTube and Stackoverflow. I found by trying to build something it was raising questions I didn't know to ask or look for, so subsequently went looking for the answers on YouTube or Stackoverflow which taught me a load more than I was expecting! I was in exactly the same boat last year and I set myself the task of building something (anything!!) and it prepared me really well for my first job. Whatever you do though, good luck with it!
**ZetPDF for .NETSDK is a PDF document creation component that enables your .NET applications to read, write and manipulate PDF documents without using Acrobat. Get more info visit here:** [**https://zetpdf.com/**](https://zetpdf.com/)
message me if you put the project into Github, I will have a look if I can help.
I second this site. I never used to the site to learn from start to finish, because I had a mentor to help get me started into C#. But when ever I needed to learn something new programming related or about how to implement a feature in C#, this was a great resource that provided good explanations and a code examples of just about everything you'll use in the language.
My current side project is a HEMA Tournament Manager that is entirely offline using local XML files to save data. It's pretty much fully featured at the moment and has managed a few tournaments already without any problems, but now I'm at the part of a project I suck at - finishing... I've still got a todo list in Trello as long as my arm of various UI/UX improvements, customization/configuration options, documentation (hahahahahahaha :'( ), and cosmetic stuff (logos, graphs, etc.). But because the functionality is pretty much all complete, I can't motivate myself to continue (pretty sure it'll sit in the 0.8.x build for the rest of time!) The only feature I have left to implement is a better way to support multiclient setups. Currently it involves moving the file from one client to another completing results for that bracket/pool, then merging the results together on one client. I want an offline solution that's easy to set up, and I'm drawing blanks on how to improve it. Hooray for development limbo!
No UWP is a set of windows-only and mostly native libraries. 
No, it’s Windows only. It relies on OS support. See https://blogs.msdn.microsoft.com/dotnet/2017/10/10/announcing-uwp-support-for-net-standard-2-0/
Thanks for your time and energy. I'm sorry for not expressing myself clearly. I try it harder this time :-) The Model has just two properties, and INotifyPropertyChanged is implemented. The important one ist a value of type double. I have this TextBox inside a DataTemplate which is bound to an instance of that model inside the viewmodel. The TextBox.Text is bound to its value-property with mode set to TwoWay. I want the user to be able to change that value by clicking inside the texbox, and dragging the mouse up or down. In order to do that I have created that RelayCommand to execute a method. Inside the method, I want to check which direction the mouse moves on the y-axis. Aslong as the user drags the mouse up, the bound value will be incremented, alsong as the user drags it down it will be decremented. You helped me a big time with the first steps: how to pass the DataTemplates Binding (which is the instance of the model I guess) as CommandParameter, so I can access the double-property. Now all I am missing is how to get those mouse-properties for the method to change the value. Can this somehow be passed from XAML, or would you get the mouse-properties somewhere else?
Basically reasonably robust activation/licencing works something like this: * Client generates a unique hardware ID based on information gathered from the machine (MAC, motherboard/hdd/cpu serial numbers, etc) * Client sends this unique ID along with some kind of licence identifier (a key) to a remote system (either via internet or any other mean) * The server looks up the licence from the identifier, and prepares a payload containing information such as the expiry date, and other details of the licence such as who owns it and any applicable restrictions - the payload is then encrypted using reversible encryption where the unique hardware ID is the encryption key. * The encrypted payload is cryptographically signed and sent to the client. This way the client can verify it came from you. * The client verifies the signature of the payload against a known public key, and decrypts the payload using its unique hardware ID. If either of these verifications fail then the licence has either been moved or tampered with. When activating over the internet communications should be done over HTTPS using a pinned certificate to prevent MITM attacks. You may want to phone home periodically using the same method. If the system clock is tampered with to attempt to extend the time allowed then the HTTPS negotiation will fail and you'll know that they're trying to bypass the restriction.
Speaking from experience on PirateBay in the 00s, offline software can and will be cracked. You need a trusted content server to validate against in order to deliver secure DRM.
I'm not sure if I'm understanding you correctly, but it sounds like many of the points you raise concern the security of administration software used internally by your company. This seems like a comparatively minor priority unless you're actually worried hackers or rogue employees will issue illegitimate licenses and sell them on the black market or something. If your company already has AD network credentials, just use that. If someone actually compromises your databases, you probably have bigger problems than software piracy. As for the client/customer side, am I assuming correctly that customers run multiple tollgates requiring multiple licenses? If so, what prevents your apparently unscrupulous business partners from using one license on an arbitrary number of machines? If they're offline you can't phone home to determine if a license has already been used. You will need to somehow uniquely identify the machine the license is for, which will require some kind of back and forth communication. It'll probably come down to generating a license request on the customer device based on a randomly generated id or hardware id, having the customer send that to your company, and sending back a unique license. Of course this is much more administrative effort and raises further questions, e.g. - is the customer clever enough to find the random id and copy it to other machines - what do you do if the id changes due to hardware replacements or other maintenance - does this process have to be automated so your customer's technicians don't have to make multiple trips to each toll booth and wait for your company to reply - what if the customer turns back the system clock each time the license is about to expire As for the key storage, you should be using asymmetric encryption. The customer software only contains the public key used to decrypt the license, your company keeps the private key used to generate them. I would assume that commercial licensing solutions that can do all of this already exist.
When I was first learning C# this is what I thought streams worked like. Good to finally see this in the framework.
No, UWP is Windows-only. There is another option, though. Avalonia UI is a XAML based cross-platform UI for dotnet core. It doesn't have full XAML support, but you can already so quite a lot with it. [https://github.com/AvaloniaUI/Avalonia](https://github.com/AvaloniaUI/Avalonia)
So I was able to spend more time digging in this morning and found the issue. The documentation for scriptcs/scripty is not clear when using the \#r syntax for referencing a library exactly what's needed. Supposedly if the library is in the \bin\debug folder the library would be found. Unfortunately that's not the case and you need to provide the complete path relative to the location of the script. Hopefully this helps somebody.
However: because UWP has a reasonably well-defined API, it’s theoretically possible to build a wine-like UWP host running .Net Core in any Linux-flavored GUI shell. That would be a huge undertaking, but if Microsoft ever felt the need to target Linux for their store, they might do it. I doubt it, though. 
Removed: Rule 3
Plaform Uno is UWP everywhere http://platform.uno/ though not Linux as of yet; only iOS, Android, UWP (Windows), Wasm
Truthfully I'm not sure... I always wanted to work in security programming since I started in this industry but I never really learned much about such things; my wheelhouse is web dev which has frameworks and such in place for concerns like this so I don't have to think about them really... In any case, thanks for your input; it's given me a lot to think about and I'll raise things with my boss as needed for his input on how he'd like to address certain issues. I'll try to address some of your queries as best I can: &gt; I'm not sure if I'm understanding you correctly, but it sounds like many of the points you raise concern the security of administration software used internally by your company. My concern is the license issuing software and while boss trusts most of us with such things because of how long we've been around, there's new people coming in and out fairly often and you don't know what they're about so best to keep every part of this whole thing locked down as much as possible. &gt; If someone actually compromises your databases, you probably have bigger problems than software piracy. All the same, better not take any chances... I leave the database security up to the boss. &gt; As for the client/customer side, am I assuming correctly that customers run multiple tollgates requiring multiple licenses? If so, what prevents your apparently unscrupulous business partners from using one license on an arbitrary number of machines? Correct, but each tollgate runs its own offline installation of the software that manages it (I don't have the foggiest clue what that software does) which the boss will update to implement this licensing. The way I see it, each license GUID id corresponds to a tollgate GUID id and both of these values will be encrypted so they can't be changed without breaking the intended system. A new, uncorrupted license file will have to be issued so they'll have to come to us to get it. Then we know something's up and they're trying to fuck with our stuff. As for interchangeability, if the license GUID doesn't correspond with the tollgate GUID, same applies; they'll need a new license file and getting one won't even mean updating their validity period either so it would just be a warning to us that they're fiddling. &gt; If they're offline you can't phone home to determine if a license has already been used. You will need to somehow uniquely identify the machine the license is for, which will require some kind of back and forth communication. The clients can call us to get a new license file. I'm not sure about the logistics of installing it but that's outside of my scope of work for this project. &gt; is the customer clever enough to find the random id and copy it to other machines I'm told yes, that's why we generate a file here and essentially inform the machine what it is (for lack of a better way to put it). If any license data that doesn't correspond with what we say is presented, it'll just break that system and we'll have to go in and fix it. &gt; does this process have to be automated so your customer's technicians don't have to make multiple trips to each toll booth and wait for your company to reply No, in fact it's probably better for us if they have no involvement in anything to do with the licensing whatsoever.
I haven't had the need to implement licensing yet but thanks for that well thought out post. Took a good deal from it.
It doesn't, the C++ toolchain is separate and not included with the .NET SDK. It is not part of the workloads for .NET in Visual Studio either. Wondering what lead you to believe that it was? Unless perhaps you are referring to the C Runtime, which is one of the following (depending on version you are using and how the native bits, like CoreCLR, were compiled): * Shipped with Windows as an external library * Distributed as an external library with the program * Statically linked into the native library being built In the first two cases, it is ~700k. In the last case, it depends on how much of the library is being used, but should be (generally speaking) less than the external case.
Is there a reason you are rolling your own licensing system? There are quite a few robust software licensing and code protection systems out there. PhonicUK gave a decent overview of some of the aspects but honestly it barely scratches the surface of the work involved if you want something remotely secure. There are people who spend their entire career writing these systems (myself among them) and guaranteeing their security as much as humanly possible and even then no system is 100% uncrackable. While I do understand that it's an interesting challenge, it doesn't really justify re-inventing the wheel. I'm not going to pimp my own company but I do recommend looking around at what is out there. One tip is to look for a system that involves some form of code protection if you don't want the end customer to be able to simply decompile and stub out your licensing logic.
If someone had an idea for a useful app that doesn't exist yet, it seems unlikely they would simply give it to a bunch of college kids to use as a stepping stone to a Y Combinator startup. 
This has been solved 10x over, don't create your own. A quick google search landed this: https://www.flexera.com/products/software-monetization/flexnet-licensing.html 
How about on-demand recycling. Users click a button on a mobile app to indicate they have a recycling load. When enough people in a given geolocation are ready, you can route a truck to pick it up. You can use the Google Maps api for most of the complex sounding mapping/routing parts. You'll need a mobile app and perhaps some sort of server to host the data. Every time a new notice from a mobile user comes in, you run a check against the queue and if criteria are met you send an email or something. 
Thank you for the idea 🙏🙌
Here is one of my personal problems: I have no idea what is recycleable and what is not. What is garbage and what is compost. Maybe there could be an app that using image recognition could tell me what to do with my garbage and which bin should I use. It also could use some database to tell which packing materials are more harmful to environment and would let user pick stuff that is packed better. Just an idea with cloud microservice backend, mobile front-end, image recognition, maybe some AI. 
Thank you for sharing 🙌
Try look at this : https://appharbor.com/ 
This is funny. Ideas are a dime a dozen. Execution matters. 
how about a capstone idea generator?
I'm pretty sure that FlexNet is C only, so not easily integrated into a C# application.
Work in progress but very active: https://github.com/richardschneider/net-ipfs-engine 
If ideas were a dime a dozen, rampant app cloning in app stores wouldn't be prevalent. Execution only matters if you're not first-to-market. 
This was just an example. Not endorsing any product.
Good luck with your startup then ;)
But is it restructed to ipfs?
Now that's interesting. That may fit a use case I have for a project. Last night I was reading up on fussing a UWP app with Xamarin somehow. The goal was to have(more or less) one code base, but deploy on Windows and Android. (Maybe iOS, but I don't think this project cares that much about it.)
&gt;i ended up being selected for a Microsoft program You got offered a job at Microsoft or some other company working with Microsoft technology?
I get the idea of wanting students to solve a real-world problem, but requiring it to be something that doesn't exist yet seems silly. A capstone project should be more about execution, and less about creativity. The vast majority of graduates will go on to work at an established company, working with existing systems. As much as it's idolized, founding the next great startup is not the track that most people will end up on...
The project property StartupObject is used to control the main method of the app.
&gt;WRT encryption, my biggest concern is hard coding or storing a decryption key somewhere. If anyone manages to decompile even the tollgate application, they'd be able to get the key and gain access to the encrypted data. Dotfuscator will stop or atleast make that much harder. If your app uses multiple binaries (an exe and a dll for instance) look into DLL signing as-well, you don't want someone to be able to knock together a quick hacked DLL that outputs the key into a text file at runtime or something. I've seen similar used to crack security in desktop applications before.
Hey, everyone here is already giving great advice, so I just want to say congrats on your first gig, and don't give up when you run into tough problems!
**ZetPDF Library for .NET offers you a modern, simple, fast, flexible and powerful tool to create complex and stylish PDF documents in your applications with just a few lines of code. Using the high quality PDF conversion engine you can easily design a document &amp; modify the document. Get more details visit here:** [**https://zetpdf.com/**](https://zetpdf.com/) 
Instead of image recognition you could use a barcode reader API and look it up against a UPC database. That would be far easier and probably more accurate. You could also add filters that could be configured on the phone for what for what recyclable [types](https://en.wikipedia.org/wiki/Resin_identification_code) are accepted by your local recycling center. This is just a class project, so don't overdo it, but configure a few UPC codes and their corresponding RIC in a database. Read the barcode. Look up the RIC. Check it against the local recycling center policy filter the user has configured. Output a recycle or trash decision. Take in some of your configured recyclables when you demo it.
Spend a day thinking critically about every action... waking up, dress up, cleanup, food, commute, chores, and tasks. What if you had some hardware or app that could A) Remind you when to do something B) Do it for you C) Checkmark it has completed It doesn't have to be any bigger than simply automating your avocado toast every morning. Might mock certain elements, but the key is to build a project from concept/ideas into a well planned development with a completed demo.
Very cool project. Thanks for sharing. Would love the linux support though. I know competitors like xamarin forms (with gtk), Avalonia are working on it bit it's still pre release. There's a paid xmal framework as well Noesis (noesidengine) bit too pricey for me
https://pdos.csail.mit.edu/archive/scigen/
So....do you have EF in your project? EF is only a small part of .NET Core. 
A consultant that hires people for microsoft in this case.
Thank you! and i hope to be saying the same thing to someone else some day too, you know, passing it down.
I know - but I was thinking porting the solution project by project .... does that make sence?
I have ported several web applications to .NET Core. They may or may not be considered "large" applications. Any MVC controllers will have some differences but are mainly just a matter of chugging through some easy and mundane changes. I don't know that I'd say there's really a standard way to port EF6 to EF Core. Your queries might be able to move with no changes. Or they might require several subtle changes. Things like lazy loading may not work as expected anymore. Places where you had to use AsEnumerable() or similar functions in the past may not be necessary in EF Core. I don't believe DBFunctions exist anymore, and date comparisons have become easier if I recall correctly. I should mention that for each of my applications I started a new solution under a new source control instead of trying to upgrade the projects in place. 
Thats exactly those kind of input I hoped getting - by starting this discussion. Thx
Sounds like a great use-case for a message queue, if that's feasible to integrate with your current app.
You don't have to do everything at once. You can use ASP.NET Core architecture/nuget but still target full .NET Framework and keep using any .NET libraries including EF 6. Or go the other way. Use EF Core in the old ASP.NET
&gt; One tip is to look for a system that involves some form of code protection if you don't want the end customer to be able to simply decompile and stub out your licensing logic. It is super easy to decompile un-obfuscated .Net code and patch it. There's a particular commercial library I use in a ~25k request per minute web app that has a horrible bottleneck on a named system mutex in the licensing code. It's obfuscated, but the obfuscation isn't particularly good and it was still very easy to locate the appropriate code and skip the license check with a small edit to the MSIL. I pay for the library, and I had some discussion with them about the issue, but ultimately they did little to remedy it. I'd prefer to just use an alternative, but it does some black magic with font rendering that I haven't been able to duplicate, so I use the patched version.
The Microsoft sites are pretty comprehensive, there is also codeproject that has a ton of .net tutorials. Edx offers free courses and I believe someone mentioned in another thread that Visual Studio Dev Essentials offers a trial subscription to Pluralsite that has awesome courses.
I'll go ahead an expose my ignorance here. What are the core use cases for pipelines?
I see. So a vendor for MS. Don't worry, you'll learn on the job.
Low level, high performance data IO. Where you used to implement Stream, you can now instead implement Pipeline. Most of us have never had to implement a new Stream, only used existing implementations. The same will be true for Pipelines, except fewer APIs will support pipelines.
Barcodes are great but in many cases they are not there. Plastic forks, napkins, plastic bags or paper plates do not have any barcodes most of the time. 
Gotcha. Thanks!
What the fuck, do you know how much work a project like that would be? Great way to waste time in a dead end project that will rot in GitHub and never be used
Sure, but image recognition would be pretty unreliable at determining the composition of an item and I suspect it would be way more work than what could reasonably be expected as a class project. 
Working on a [Bethesda modding library](https://github.com/Noggog/Mutagen) which will be used to import/analyze and create new mods based on existing ones. Will be using that to eventually add Git versioning support to Bethesda mods, and then revamping some of my older projects like [Automatic Variants](https://www.nexusmods.com/skyrim/mods/21377).
You're allocating a lot of objects, so the runtime constantly needs more memory and checks if it can free any space up before allocating new memory. A garbage collection doesn't necessarily mean that there any objects to be collected, the GC doesn't know if there are any until it actually runs and looks for them.
Awesome, that makes a lot of sense. Is there a way to give it a heads up that we're about to create a truckload of new stuff? DotTrace is saying ~76% of my time is spent in the GC in that set of code. Is that just the way of the world for an allocation heavy timeperiod?
Universal WINDOWS Platform
It is possible, but only in newer versions of the runtime (and not guaranteed): https://msdn.microsoft.com/en-us/library/system.gc.trystartnogcregion.aspx
I agree, this does seem possible.
eh? libp2p was a c# implementation of ipfs.
Ha ha ha. Chill out dude :) 
There are a couple of ways to influence the GC. [GC.NoGCRegion](https://docs.microsoft.com/en-us/dotnet/api/system.gc.trystartnogcregion) does exactly this, but it's meant for critical sections without many allocations. This won't work if you allocate hundreds of MBs. There is also `GCSettings.LatencyMode` and the `&lt;gcServer&gt;` and `&lt;gcConcurrent&gt;` configuration values, which allow you to influence the way the GC runs (but not actually turn it off/pause it).
Writing own image recognition would be silly. I would use Bing APIs or AWS or Google cloud services for that. I would define capabilities of my app based on capabilities of API in use. If they can determine composition then great and if not then whatever possible is fine. 
More nuanced than that. At Build it was announced that Windows Forms/WPF/UWP would all be coming to .Net Core 3 on *Windows* only. There are currently no plans to extend that support to non-Windows platforms. However there have been hints that if there was enough demand then a port to other platforms might be considered.
The first problem looks like a mismatch between the serialized JSON and your model. The second problem looks like a mismatch between your model and the model's ORM. In both cases I can't say what the problem is without seeing the model and sample input. 
When you deserialize to List&lt;ICallbackDataManager&gt;, the records in the list will contain only the properties defined on ICallbackDataManager. If your OtherDataCallbackModel implements ICallbackDataManager, an object of type OtherDataCallbackModel can be used as an instance of ICallbackDataManager, *but not the reverse*. You can't pass an ICallbackDataManager into a method expecting an OtherDataCallbackModel. Also, you're using SaveDataAsync like a static method, but it doesn't appear to be static. &gt;I've created an interface file Interfaces and files have nothing to do with each other. Naming a file IFile does nothing. Did you define an interface or not? Could you show that definition? What you probably need is a generic method (maybe with a type restriction): public interface IRecord { string Name { get; } } public interface IWebhookDTO&lt;TRecord&gt; { string Id { get; } TRecord ConvertToRecord(); } public static class SaveDataExtensions { public static async Task&lt;bool&gt; SaveDataAsync&lt;TInput, TRecord&gt;(this List&lt;TInput&gt; toInsert) where TInput: IWebhookDTO&lt;TRecord&gt; where TRecord: IRecord { using (myDatabase db = new myDatabase()) //Assuming this is EntityFramework { var table = db.Set&lt;TRecord&gt;(); Parallel.Foreach(toInsert, (receivedData) =&gt; { if(await table.FirstOrDefaultAsync(x =&gt; x.Name.Equals(record.Id))) { table.Add(receivedData.ConvertToRecord()); } } ); var savedRecords = db.SaveChangesAsync(); return savedRecords == toInsert.Count; } } } public class WebhookController { private async Task&lt;ActionResult&gt; WebhookImplementation&lt;TInput, TRecord&gt;(string data) where TInput: IWebhookDTO&lt;TRecord&gt; where TRecord: IRecord { string resultMessage = "Success"; try { List&lt;TInput&gt; deserializedData = JsonConvert.DeserializeObject&lt;List&lt;TInput&gt;&gt;(data); bool result = await SaveDataExtensions.SaveDataAsync&lt;TInput, TRecord&gt;(deserializedData); } catch (Exception ex) { resultMessage = $"Failed to sync. Error."; } return Content(resultMessage); } public Task&lt;ActionResult&gt; PersonWebhook(string personData) =&gt; WebhookImplementation&lt;PersonDTO, PersonRecord&gt;(personData); public Task&lt;ActionResult&gt; CarWebhook(string carData) =&gt; WebhookImplementation&lt;CarDTO, CarRecord&gt;(carData); } Also, you usually don't want to do things like: foreach (var record in records) { [...] db.SaveChanges(); } Because that results in an additional round trip to the database for each record. 
Hey buddy I know how to resolve this. What you are looking for is the following. How to read from mySQL using ADO connection. Also how your code is set up you will be prone for SQL injections. There are multiple ways of accomplishing what you're doing so the resources online often are all over the place. Hit me up if you still need help. Id lobe to help.
Shop for a 3^rd party licensing system. But realize they only really stop the stupid thieves. Your best protection will be via a strong business contract. 
is it pipe dreams or pipe streams?
If you try to implement an IRC style chat (even extremely simple) you will quickly realize how hard it is to handle torn messages especially if you don't want to spawn a thread for each of your clients.
EF Core is not only different from EF6 it is significantly worse. Queries simply don't work or generate absurd SQL. I can suggest the following migration path - migrate to ASP.NET Core on top of .NET Framework and use your existing DL/BL. Then in the future when MS ports EF6 to .NET Standard use that to migrate to .NET Core. Then wait 5 more years till EF Core catches up. Note that migrating to ASP.NET Core is not entirely painless either but at least it is reasonably easy to verify that things work.
&gt;The first problem looks like a mismatch between the serialized JSON and your model. Well, yes. But I'm not sure how to write it so it matches.
The interface is just: public interface ICallbackDataManager { Task&lt;bool&gt; SaveDataAsync&lt;T&gt;(List&lt;T&gt; data); } &gt;Because that results in an additional round trip to the database for each record. Not really an issue. Each call will likely only be one record anyway. It's just that the calling service can send multiples at a time if the data starts to stack. 99.999% of the time it won't with this data though. The advantage of doing it this way is that it doesn't break all the record saves if one happens be be bad. Thanks for your help. I'm going to have to ready this over a few hours to absorb it. 
I tried Making an Avalonia app on MacOS and while it works... I can’t see myself voluntarily spending any more time there. Visual Studio on Windows does so much that it makes the Mac experience feel like a waste of time.
IPFS uses libp2p so I am guessing that this library also has to implement the libp2p functionality which is not restricted to IPFS. But to be sure you can contact the author.
Anything you roll yourself without a ton of work will probably not stand up to much. No matter what you do at some point you're going to have some kind of IsLisenced() method somewhere; the IT department at the other company could always just decompile and change that method to always return true. You could obfuscate your code, but it probably wont help that much if they care to put in any effort. So then, your practical alternatives are to either just do something simple and easy* and hope it's enough to dissuade them, or go all in on security either by hiring a specialist or buying something. *hopefully a little cleverer than checking the system clock, but not that much.
You could try http://www.monodevelop.com. Gtk# took a little getting used to, but it was a fairly easy learning curve. If you don't mind web tech, you could try https://electronjs.org. It gets a lot of hate, but I've really enjoyed working with it. I much prefer TypeScript over JavaScript, so I'm glad it supports it.
Is there many to many support for EF Core yet?
\[Creating chart in excel using c#\]([http://www.iditect.com/tutorial/excel-chart/](http://www.iditect.com/tutorial/excel-chart/)) is the best choice, as excel worksheet can contains the chart data or table data. it's more intuitive to view the data compare to the chart view.
Does your object have to be a class, or can it be a `struct`? If it’s a `struct`, you’ll only have a single allocation for the `ret` array.
No. You still have to create the intermediary object. 
It still works that way: using (var stream = new FileStream(imagePath, FileMode.Open)) { var result = service.SendTweetWithMedia(new SendTweetWithMediaOptions { Status = message, Images = new Dictionary&lt;string, Stream&gt; { { message, stream } } }); Where message is the text above the posted image.
It depends on the situation. It was more about the understanding about why for overall knowledge rather than one specific problem I was having
I did something like this, sort of. What I did was have the remote pc require the user to login at least once. Once they do, it stores the login name, date of login, and expiration date, in the registry, along with a encrypted string which is the encrypted version of the other date, using a one-way encryption. When the app is started, it checks that the values will encrypt back to the same string. If it doesn't, it knows the user screwed with it, and invalidates the login. If the date does encrypt, then the expiration date will pass and the login will be invalidated. Sure, you could break this by hex editing the code, or by setting the date back. For our app, it didn't seem likely too many people would do that. For your app, if you have only a few customers and it's expensive, you'd probably want to take steps to prevent those two situations.
* If you're in the US and you deactivate a system that causes business disruption, at least one of you is going to end up in court. Make sure you're an actual W2 employee and that you have whatever your boss wants you to do in writing. If you're a consultant, your insurance company isn't going to want to touch this. * Nothing you put on the client side will remain secret/safe/whatever forever. If you need permanent control, you'll need to keep critical portions of the system on your side as remote services.
&gt; Is there a reason you are rolling your own licensing system? The downside of using popular software to do it is that those are probably going to be the ones people will try to crack most often, and then spread. A licensing system created for just one system is only going to have a much smaller audience of people who will try to crack it.
Others have already given great answers on how to implement this, but let me emphasize a little more what a pyrrhic war you'll be fighting. Suppose you _do_ have users who try to circumvent your licensing: * how much do you have to invest until they stop trying? The authentication scheme described here will surely take a few person-days already. As you harden it, there's another several person-days. That's a decently expensive feature. What could you have done _instead_ in the meantime? Improved quality? Add a feature that actually _benefits the legitimate user_? * and for what, anyway? Does hardening it deter the user? Perhaps. Does it make them realize the error of their ways and buy your software, though? Probably not. And if it does, will it ever be a good business relationship? Almost certainly not. (In fact, you may even want to sue them once you have their identity. Off to a great start!) So _before_, you had no paying customer here. And now, you still don't, but instead _you_ invested hundreds or thousands of dollars into trying to make that customer pay. * it's a cat-and-mouse game. You obfuscate the code. They reverse-engineer the relevant bits anyway. You move from boolean License.IsValid() towards something timestamp-based. They run your app inside a virtual machine whose time resets. You detect virtual machines. They patch their virtual machine to be harder to detect. * oh, and now you've obfuscated your code. The next time a paying customer has a support ticket, they send you a stacktrace. Only it's completely messed up. Ah, you say, but the obfuscation software is smart enough to go two-way! Well good luck with that when the customer has the stacktrace on their screen and are trying to read it to you over a poor cellular conncetion on the phone. Don't do code obfuscation. The person who will be affected the most by it is _you_. You will never win this, and even if you do, you'll have spent tons of time and money and gained absolutely nothing. That doesn't mean you shouldn't do some licensing schemes at all. Just don't fall into the trap to invest a lot of effort. PhonicUK's scheme, for example, is plenty!
Target .net core, and that should make it portable.
Json.net bro. Shits lit 
I think your bullets are all correct except the last one. VS17 nuget browser does not restrict packages to what is supported by your targeted framework. Many times I try to install packages that are not compatible and get an error.
Well that's a bummer. Is there any way to tell up-front whether it's gonna work? Like, the Newtonsoft.Json package is the only one I'm really concerned with right now, and it's got notes on dependencies (there are none) for .NET Standard 2.0 so I'm going to assume that means it'll build OK?
&gt;I've been chasing my tail for long enough trying to get Python to package GUI-driven executables nicely that I'm giving strong consideration to C# for the first time in about a decade, and this is the first time I've really looked at the practical considerations of writing in a .NET language. I'm hoping someone can tell me whether I'm on the right track with these thoughts: &gt; &gt;* For an application that doesn't need much more than making get/post/put requests, parsing JSON and reading and writing XML, and taking a little input from the user via a GUI, there's no need for anything more than .NET Standard 2.0 and WinForms. As far as I know, .net standard is only for libraries. It's kinda the lowest common denominator amongst net core, net runtime and others. Whether you use winforms or not depends on how visually appealing you want it to be. Generally it'll work on other platforms, but not look good. It also isn't available for dotnet core. Wpf will almost certainly be Windows only forever. You could also have a Web app as your front end, but then you might as well use javascript for your project. You might be able to find a c# wrapper for a popular cross platform library. &gt;* That combination of .NET Standard 2.0 and WinForms is what I should choose for broadest compatibility given that I don't need to require anyone use anything more modern. Unless you need xp, I believe all dotnet versions support vista and upwards. Mono will run on most or all unixes, and dotnet core does have supported Linux versions, but its the most commonly used ones. &gt;* It would also be the best bet to port to Linux via mono as it's been around the longest (that I can target in VS17). Mono and dotnet core are packaged differently, dotnet core generally requires you to package it up when you deploy. Dotnet core has code from dotnet standard, so only its Linux support is fairly new. &gt;* If I use VS17, the integrated NuGet browser will restrict the available packages to stuff within the scope of the targeted framework that I set when setting the solution properties, and I don't need to worry about inadvertently building something that will target a higher framework version. I believe so, I've never encountered an issue with it so far. When installing using the gui, it will tell you the supported versions. &gt;Is all of that correct or at least a reasonable opinion? TLDR. Use the latest dotnet runtime that mono supports with winforms, or use dotnet core with a cross platform gui library. 
If your lucky and the package is relatively new it will list which frameworks it supports under the dependencies part of the nuget listing. So packages unfortunately don't list it. Newtonsoft.Json supports nearly every framework so you should have no problem.
Shame there doesn't seem to be any good documentation or tutorials for it though. It looks cool.
For max ease and compatibility as well as future proofing you should use UWP with .net Standard 2.0 Then you can use something like http://platform.uno to get seamless access to many extra platforms. If you don't want to use UWP, at least use WPF... winforms is ancient and horrible to use and develop for.
Mono is another simple solution.
The second answer of your link appears to have a solution. Change the Foreground color of the PlaceHolder textblock from LightGray to something else. 
Just hijacking this thread to say one thing : you should preferably do things in xaml and not in the code behind. I can understand why you want to tho :D
I've often wondered this. I think I read somewhere the scaling up on a single SignalR box is more performant than using their scaleout on SQL server or redis. That said, I opted for being in the same project so that it was easier to setup multiple web servers for load balancing, and therefore I use the redis backplane. It works well, but I can stress it out. Would love to hear other's opinions on this, and be corrected if I'm wrong. 
.net core apps are compatible with the latest version of mono.
It’s a pain first but with more complex desktop applications it’s much easier to set everything related to appearance in xaml
How would you scale you single box when you reach the connection limit for signalR?
My application is heavy on the messages per second metric but low on the number of users, so not entirely sure to be honest, I am not familiar with the connection limit. Wouldn't the connection limit be down to Owin or even the OS and not signalr itself anyway? 
If you can't relocate it through the software, try creating a Junction to another drive. It works for most things, just not some shitty fuckwitted MS stuff &gt;_&lt; Looking at you VS team.
Some of your information is way out of date. We use images of databases for test purposes multiple times an hour. DBA's are bloody brilliant to have around. I've been fighting for one at my place of work for a while. But, don't underestimate what we non-DBA types know about SQL. I wouldn't hire that sort of DBA. You genuinely sound bitter. Get over it.
Rijndael is a block cipher, it operates on fixed size pieces of data. If your data does not completely fill the final block, padding bytes are be added. `PaddingMode.Zeroes` does what it says, but when decrypting the algorithm can't tell if any trailing zero bytes are padding or part of the original data. To use this, you must store the original length of the data and trim it appropriately after decryption. PKCS7 is more clever, it's possible to tell what part of the final block is padding so it's automatically removed.
Yes I know, it really is sometimes a pain in the ass! 
As you probably know, the message needs to be padded in order to have a whole number of blocks (with a block being 128 bits/16 bytes). When you pad with 0's, there's no way of telling the padding zeroes from any zeroes that the message might have ended with _before_ padding. So, the zeroes that the padding adds before encryption simply aren't removed at all after decrypting - because any amount of those 0's could be part of the message. PKCS7 instead sets each padding byte to the length of the padding. That way, reading from the end of the message towards the beginning, it knows how many bytes are padding - if it sees: ff 3e 18 29 ba b6 01 08 98 19 2a 98 6b 03 03 03 ... it knows to remove those last 3 bytes. In addition, it _always_ adds padding - even if your message is already a multiple of 16 bytes. Otherwise, once again, it wouldn't be able to tell if the last byte indicates the length of the padding, or is simply the last byte of an unpadded message. All of the built-in padding schemes work like this. X923 only puts the padding length in the last byte of the block, filling the rest with 0's. ISO-10126 also stores the padding as the last byte, but uses random data for the rest of the padding. There are other possible schemes than those. One is to add a single 1-bit and _then_ zeroes - and, once again, always pad the message, even if it "doesn't need it". That way, after decryption, the padding can be removed simply by throwing all 0 bits out, starting from the back, until one finds a 1-bit. Then it knows it's reached the start of the padding, and the next bit is part of the message. The only difference to zero padding is that 1-bit - but that's enough to make the difference that we can now distinguish the message from the padding.
&gt; Does it make them realize the error of their ways and buy your software, though? Probably not. &gt; So before, you had no paying customer here. And now, you still don't, but instead you invested hundreds or thousands of dollars into trying to make that customer pay. Actually that isn't the case. The software we're licensing is already in use at a lot of locations throughout Africa. The issue is that the people using it are using it but they're not paying for it. So the idea here is to actually break or cleanly disable the software where a license has expired or where it has been tampered with ostensibly to prevent them from using the software if they're trying to use it without paying. &gt; it's a cat-and-mouse game. You obfuscate the code. They reverse-engineer the relevant bits anyway. You move from boolean License.IsValid() towards something timestamp-based. They run your app inside a virtual machine whose time resets. You detect virtual machines. They patch their virtual machine to be harder to detect. I did mention the issue of changing the system clock to get ahead of the expiry date on the license to my boss. He said there is some time sync code written into the existing system that will cause it to fail if there is any discrepancy. He didn't go into detail and I didn't care to ask for more. I was satisfied there's sufficient countermeasures to address this kind of tampering. &gt; That doesn't mean you shouldn't do some licensing schemes at all. Just don't fall into the trap to invest a lot of effort. PhonicUK's scheme, for example, is plenty! The effort so far is "write an app that generates some kind of "license" object. I have a schema for this object. Encrypt that data (I've already written encrypt/decrypt functions using the Rijndael algorithm built into the .NET Framework). That's my part. The bossman will do the rest. This is what he wants, whether or not its the best approach I don't know but its a minor effort to harden this thing a bit more so if it doesn't work we can evaluate and try something else.
Wow! Really wish this existed when I was doing my 3D graphics class in C# with OpenGL last year
I have heard rumors of WPFs demise. I know that doesn't mean much if I'm using WinForms instead, but the Microsoft I know has a preferred new way of doing things and a crusty old way they'll support for another decade. It is cool to know that Uno exists, for the purposes of this project the thing will only ever need to live on Windows and Linux because it's a companion app for software that's only on those two.
I don't think Wpf will fully die for a fairly long time, but Uwp is mostly backwards compatible with the code and xaml for wpf anyway. I don't think Uno supports Linux yet anyway. 
UWP would also lock out Windows 7 (and Vista) users right?
The correct syntax would be int age; String x = Console. ReadLine(); age = int.Parse(x); Console.WriteLine(age);
Thanks, but what does ‘int.Parse’ do? Because I would’ve just put: ‘age = int(x);
Hmm I never thought about that. We haven't targeted anything older than 10 for well over a year now. I kinda forgot that some places hadn't made the jump yet. But yeah it wouldn't work on 7
Sorry for missing this out. In Short - C# has types and every variable should accept only values of its type. ReadLine returns a string and it should be converted to a integer. You can Do this with int.Parse. But beware, not every string can be converted to int (see definition of TryParse()) I hope i could explain this understandably C: 
Removed: Rule 7.
Yes, thank you.
Parse and its buddy TryParse attempt to convert the input value into another type. So y = int.Parse(x) will attempt to convert x into an int and store the value in y. I don't use Parse that often, usually favoring TryParse, which works like: int.TryParse(x, out int y). This will attempt to convert the value of x into an int and store the resulting value into y. If it can't Parse successfully, y will be null, rather than throwing an error. What you're suggesting would look like: age = (int)x, which is casting which doesn't do any real conversion. It just says, "treat x as an int." This could cause some unexpected results so stick to parsing or converting to be safe.
Wine quality is so subjective on a person to person basis. I'm skeptical of the "real worldness" of this exercise. Just because you can predict something doesn't mean it's doing the right thing, it needs to be grounded in reality. 
Dunno if you have control over your incoming content but if you do, fix that or in reverse and fix your model
You can try running it with Mono, or make the project target .NET Core instead which supports Linux.
Is this comment about a removed comment or about the original link?
The link was removed.
Ok. Can you elaborate a bit on your decision? The link is meant for beginners...
Sorry read your post wrong. You say you use the redis backplane then you will have no issues adding another box when needed. If you are on the core version you just need to make sure you use sticky sessions in the load balancer as that is now a requirement.
From the [rule details page:](https://www.reddit.com/r/csharp/about/rules) &gt; content should be relatively current (that is, not terribly obsolete or outdated), and there should be sufficient content to be worthwhile to readers. The submitted link basically amounted to "install the C# extension for Visual Studio Code", which is also found by googling "Visual Studio Code C#" or any other common Visual Studio Code learning materials and has been around for about 3 years now. Your other article submissions were OK and had enough worthwhile original content to spark some good discussion and be worthwhile. This particular submission doesn't though. Further exacerbating it is the fact that 100% of your submitted links are promoting your own content/website/blog. This alone wouldn't be enough to remove the link, especially since you actively comment and engage in other posts/threads, but it does reduce the amount of leniency applied when considering if a post should be removed or kept.
Understood. Thanks for clarifying. 
I did. It produced a few json's and a dll. Is the dll actually runnable on Linux if I flag it as executable, or are there magic configuration options or other files I need?
You don't. It is annoying that the functionality is not included in the Xamarin Forms picker. You have to manually add the items to the picker. 
Because your page isn't your binding context, viewmodel is. Either move `users` to your viewmodel or update the binding declaration so it targets your page.
That worked! Thanks! I built in VS, targeted Linux and ran it with dotnet appname. That's amazing. After all these years.
Why dont you want to use Xaml? This particular issue is very easy in XAML and is already built into the text box control IIRC.
Missing semicolons after the first writeline and the int.parse(). Also some weird "" but I don't know if thats reddit or you.
It’s reddit lol, thanks for the help I’m learning :p
I have control over it, but I'm not sure how I can fix that.
Hey, just did what you said and the error is: ‘Console’ does not contain a definition for Readline.??
Its ReadLine, case sensitive.
Just did that, now it says: ‘cannot convert method group ReadLine to non-delegate type string. Did you intend to invoke the method?
Missing parenthesis, you should really look up the basics.
Console.WriteLine(“How old are you?”); int age; string x = Console.ReadLine(); age = int.Parse(x); Console.WriteLine(“You are {0}”, age);
I have :p sorry just forgot them.
Console.WriteLine("How old are you?"); int age; string x = Console.ReadLine(); age = int.Parse(x); Console.WriteLine($"You are {age}");
The JSON is an array, so you need to deserialize it into a list or array, not just a single RootObject object.
Among the experts it really isn't all that subjective. Personal taste is a factor but quality can generally be agreed upon.
At one point that was true, but the picker supports an itemsource just like a listview, it includes a displaytext binding too.
This
I'm not clear on which deserialization call is throwing the error. Just reading your code, once you deserialize 'text' into type 'Rootobject', you shouldn't need to do any more deserialization. Could you clarify which line is throwing the error?
So I changed my code slightly and Convert the array list. But now I am not sure how to take a particular data from the list. I was trying to call Temperature method to display the temperature by using var temp = result.data.Temperature but I got another error message, that it is not a part of my list. Do you know what I did wrong? var result = JsonConvert.DeserializeObject&lt;List&lt;Class1&gt;&gt;(text); 
JsonConvert.DeserializeObject&lt;List&lt;RootObj&gt;&gt;(somedata) 
You have to select the first Item in the list, so instead of `var temp = result.data.Temperature` it would be `var temp = result[0].data.Temperature`
Hello, this line is throwing the error: `Rootobject ro = JsonConvert.DeserializeObject&lt;Rootobject&gt;(text);` 
On the last line, you need to use string.Format() or interpolated string $"".
&gt;var temp = result\[0\].data.Temperature I used your line and in the console my output is: "ConsoleApp2.Temperature". I was expecting the real value from the JSON data.. Sorry I am really a beginner but I want to understand it. 
I just realised every line made this error...
One big negative of UWP: app runs in a sandbox. For some apps that may not be a problem but if app needs to access file from anywhere on the disk then it is a problem. Simple utility such as WinRar or WinZip could not be implemented as UWP. I hope I am wrong. 
I've used WiX for the last 5 years or so - You need a little knowledge of MSI (components, folders, keys, products, upgrades etc.) but it's free, comprehensive, integrates into VS and TFS build. Because it's entirely XML based it's really easy to track changes through source control. The built in UI support (if you need a UI) is fairly standard, but it does the job in the vast majority of cases. In the one case where I needed a custom UI for my installer I used the WiX bootstrapper to deploy the .NET framework then c# and either WPF or Winforms to create the installer UI. Disclaimer: I hate InstallShield with a fiery passion (so I'm biased) - I've lost count of the number of issues the company has had with it where the solution was 'pay us $X,000 for the latest version where we've fixed this problem'
 UWP apps do not need any 3rd party installers. VS can create installation package and system even does updates automatically. On a negative side such apps have to go through Microsoft Store which takes a while to setup. For old desktop apps VS had setup project type for a while but sometime around 2010 (?) this type of project was dropped and Wix toolkit was recommended as replacement. I currently use it for some of my old apps but it is not pleasant to use. 
I've used the Visual Studio Installer Projects extension for basic installers. It adds back the functionality that was included up to 2013 for vdproj files. For more complicated installers, like ones that need drivers or firewall exceptions, I use WIX. It's a lot more work to generate the XML but you have control over literally everything. There is a nice extension called WAX that helps with some of the drudgery.
What's happening here is that your 'text' wants to deserialize into a list/array of object 'Class1`. Once you do that, you will have a list/array of length 1, and all of the data will be there. The further deserializations are unnecessary.
So your C# class for the json data is a bit weird, the temperature data would be under `result[0].data.Temperature.data._20180704130500`. The problem is that the `_20180704130500` field would need to change every time you get new data, as the date and time would change. So instead of just pasting the JSON as a class, you're going to have to manually create a class and customize the deserializing.
Ok. I changed it slightly and now I have `var result = JsonConvert.DeserializeObject&lt;List&lt;Class1&gt;&gt;(text);` `var temp = result[0].data.Temperature;` `Console.WriteLine(temp);` I was expecting the real date and temperature though as it is taken from the sensor in real time, but instead of that my output is only "ConsoleApp2.Temperature"
You are wrong. The app is sandboxed but certain operations (like file access, network access etc...) can get out of the sandbox with the correct permissions. So you can still show the user file pickers and handle open file events with UWP apps. There are many zip and rar utilities on the store that do it, its not difficult at all. (in fact its almost the exact same code as you would write for WPF)
See /u/Archerofyail's answer above.
Oh no... What I was trying to achieve to get the real-time (updated) data without writing anything manually. Do you have any idea or advice how to fix it please?
I dropped the class Data1 and changed the Temperature class to: public class Temperature `{` `public Dictionary&lt;DateTime, float&gt; data { get; set; }` `public Meta meta { get; set; }` `}` To get the real time data... But I still have the same message as earlier "consoleApp2.Temperature"
Oh yea sorry I haven't see that
I am happy to be wrong on this one :) Now why can't I drag and drop random txt or jpg files on Edge? Edge is UWP app. How can I give it permissions to open all files?
First get the dictionary: var dict = result[0].data.Temperature.data; Then use LINQ to get the first KeyValue-pair from the ditionary, and take the Value part of the pair: var temperature = dict.First().Value;
The developers get to decide what file types can be handled in drag and drop scenarios. There is a good chance edge just doesn't understand those filetypes. 
So you can try doing something similar to [this page](https://www.newtonsoft.com/json/help/html/SerializingJSONFragments.htm), and select just the temperature data, if that's all you need. Just create a JObject: JObject data = JObject.Parse(text); Then find the data: var tempToken = data["data"].First.First.First; Then split the info by the colon separator: 
It's working now! Thank you so much for help 
It would be interesting to see if this would work with the mono port to webassembly.
&gt;This will attempt to convert the value of x into an int and store the resulting value into y. If it can't Parse successfully, y will be null, rather than throwing an error. `int` can't be null, so the result of a failed parse would be 0
We use InnoSetup and it's fine.
Thank you, the example above your is working but I will try this one as well. It is nice to know a few ways of getting the data :) 
I recommend using Wix\# which is a C\# wrapper for Wix and it makes writing an installer so much easier! You can even make bootstrappers in WPF to make them look really good, professional and polished!
I dont think that approach is going to work. Since the time to compute X is longer than the frequency with which data changes, you will keep restarting the computation and compute will never finish since the data keeps getting updated. What you could do is have one operation that pushes data to a queue, then multiple worker roles that read off the queue and do the calculation. This way you can scale up the number of workers at the amount of time from new data available to computation done is as short as possible. The only way to keep that time low is 1. pick up the work as soon as data is ready and 2. compute as fast as possible.
Blind tests on so called experts indicate they can't distinguish cheap wine from expensive wine. There's also doubt on their ability to judge the same wine consistently. If they can't even identify the same wine as the same quality after different tests, how can they agree on a quality factor?
What Compute x is really doing is taking a hash adding a nonce and then doing sha256 until the hash spells out "Testtesttestxxx". I need to do this on the newest dataset. There is no problem if i have to start from zero again So i guess i can really use approach 2 as you said. 
&gt; But I'm not sure what I need to do about ConvertToRecord(). Each class that implements the IWebhookDTO will need to implement ConvertToRecord. All it does is convert from your data transfer type to your database record type. From your original code, if you were to refactor to match this pattern, your OtherDataCallbackModel would look more like: public class OtherDataCallbackModel : IWebhookDTO&lt;OtherDataModel&gt; { //Properties, other methods, etc. public OtherDataModel ConvertToRecord() =&gt; new OtherDataModel() { Id = this.Id, Created = DateTime.Now // I assume other shared properties would exist for most of these tables }; } Though you might look into things like AutoMapper for copying shared properties without needing to write the code yourself. &gt;I'm guessing that the "db.Set&lt;TRecord&gt;();" code will write to the correct table. If you're using entity framework, yes, it will find the table that stores records of type TRecord, which gets determined by the generic type argument of SaveDataAsync. If you're using another another ORM, it may or may not have an equivalent method, but you can implement one yourself with a switch statement, you'd just have to update it whenever you add a table to your database.
I'd wrap the compute thread in it's own class and tie that thread to a [cancellation token](https://msdn.microsoft.com/en-us/library/dd997289(v=vs.110\).aspx). When new data comes in, send out the cancellation notice, create a new instance of the compute class with the new data, then kick off that thread. Rinse, repeat.
 if (Console.ReadLine() = (“No”)) Console.WriteLine(“Cool, Goodbye.”);
There’s still an error. ‘The left side of an assignment must be a variable, property or indexer.’
What you presumably WANT the code to do: if the result of Console.ReadLine() is "No" then write "Cool, Goodbye." to the console. What you actually have written: if the result of assigning "No" to Console.ReadLine() is true, do nothing, then write "Cool, Goodbye" to the console. Instead of posting tiny snippets like this to receive assistance you might want to use the language references available to learn how these constructs you are using actually work. I'd suggest you start with learning the difference between = and ==.
Removed: Rule 4. You'll have to start making an effort to resolve these minor syntax errors. Learn to use the compiler error messages to figure out the problems. If you still run into issues after googling the error message and making an effort to resolve it, then feel free to post but please indent/format your code for display on reddit (put 4 spaces at the beginning of each line) and include the relevant error messages you're receiving.
Thanks. Not part of the question but what are the plans are brackets / parenthesis after Console.Readline for? What goes in them, because I know Console.Writeline parenthesis’ holds the string it writes.
That cast just gets you a compile error.
https://www.neowin.net/news/microsoft-releases-windows-10-sdk-insider-preview-build-17704 https://www.youtube.com/watch?v=FKCX4Rzfysk
Do you know if Avalonia is meant to be a recreation of WPF baring resources or is it just inspired by it? I'm tempted to contribute if the aim is to replicate WPF fully. It'd be nice to create apps that are portable on a managed platform without the abomination that is Swing.
Dude, seriously? Please tell me you are joking? I'm not sure what your assumptions were as you were reading my post(s), but I meant absolutely nothing negative / whiny / complainy / bitter in that post at all. I was responding to a novice/beginner developer who had mentioned that my previous post (2 levels up "parent") was actually helpful to him. Since he was a novice and was interested in .NET development (and the OP referenced MSSQL in "how" link in the original post), I thought that I'd offer some advice on how to make himself a better developer (and more valuable / indispensable to his employer) - by learning about how SQL works low-level, and by learning proper database design methodologies - even though it's not necessarily "core" to his position/title (C# developer). There is no debating that this is good advice. A good C# developer who knows SQL like the back of his hand is worth more than a C# developer who can barely write a SELECT query with a JOIN. More knowledge is better than less knowledge - especially when it's pertinent knowledge to the task at hand (C# dev). Since he is a beginner, I figured that it might not be obvious to him that almost everything is database-backed nowadays, and that simply learning how to write C# without SQL knowledge is probably not the best way to go at this point. It's also fair for me to assume that, as a beginner developer with basically no knowledge of SQL, that he would *ALSO* not have knowledge of SQL backup chains and recovery models and their implications on restorability of said backups - so I gave some helpful details on how that works on the back end and what caveats you need to watch out for (that was in my first post). More seriously - if you happen to be a dev who does know SQL (and you probably are, by necessity, since you don't have a DBA), then Congratulations! You are in the EXTREMELY small group of people who know a lot about both dev and database. Pat yourself on the back and buy yourself a beer, you've earned it! Anyway - I'm not really sure how you got "bitter" out of a post full of helpful advice on how to improve as a developer, and what modern code looks like (compared to what you'd read in a textbook).
[Console.ReadLine()](https://msdn.microsoft.com/en-us/library/system.console.readline%28v=vs.110%29.aspx), as well as Console.WriteLine(), is a method of C#'s Console, as opposed to a property. Methods *can*, but do not have to, take parameters/arguments. And since a Class/Object can have a method *and* a property with the same name the parentheses are necessary to differentiate. Looking at [this guideline](https://msdn.microsoft.com/en-us/library/ms229054\(v=vs.100\).aspx) you can start to see the differences in where you should use methods vs properties. Console.WriteLine() and Console.ReadLine() are relatively slow, the latter w a i t i n g o n u s e r i n p u t slow. It also returns a different result (depending on user input) each time it is called.
If your app can be installed in the user's AppData, you can try [Squirrel](https://github.com/Squirrel/Squirrel.Windows) it has been created by the GitHub team for github for windows. It's really easy to implement, it's just creating a nuget package and hosting it somewhere. 
For the love of god, whatever you do, use something that produces valid MSI installers.
Is this something you can use .NET core for? SHA256 performance is greatly improved in the newer versions, and 2.1 has lower allocations for SHA256 than 2.0 (Which will help in a scenario like this with a lot of repeated operations). Given that you said you need to stop the old computation, You can do approach 1 in your OP just fine. /u/Krieger08026 has good advice as far as cancelling the old computation. DO make sure to properly dispose the `CancellationTokenSource` used, otherwise you will leak memory. Approach 2 is technically doable. [Shitty code here](http://share.linqpad.net/iwfij2.linq). Note that while it is DOABLE, I wouldn't suggest it in most cases. The locking is something you can pay a penalty for, and you have to take into consideration the way that I'm making sure to grab the value at the start of my operation. Also note that this approach is most idiot-proof if you stick to value types (strings included in this statement). 
I deployed a core console app so i guess iam using core 2.0. 
Do this: Download the latest "DataPowerTools" nuget - https://www.nuget.org/packages/DataPowerTools (it has 0 dependencies) and make sure you have referenced System.Data.SqlClient var conn = new SQLiteConnection("Data Source=:memory:"); var reader = Csv.Read(filePath); using (conn) using (reader) { conn.Open(); await reader.BulkInsert(conn, destinationtable, DatabaseEngine.Sqlite, new GenericBulkCopyOptions { BatchSize = 1 //best performance for in-mem }); } done. performance is great too.
 if (int.TryParse(Console.ReadLine(), out int age)) { Console.WriteLine(age); }
Edge does not handle htm and html files either so no proper drag'n'drop. I would love to see UWP app that can do the most stuff regular apps can do like open any file or handle dropped files but so far have not seen anything. 
I am not quite sure what you mean. Do you happen to have an example of how it works? I have added a new Model User.cs, and a ViewModel UsersViewModel, but I am not sure how to bind them. (GitHub code updated with what I tried)
This looked promising at /build, but I haven't tried it myself. https://github.com/Microsoft/msix-packaging
Thanks for the tip. Only makes sense to use sticky session. Just for this reason alone you will have to have this separate from your rest api if you want round robin load balancing there. 
Try [ClickOnce](https://docs.microsoft.com/en-us/visualstudio/deployment/clickonce-security-and-deployment). The installers it creates are the best I've ever used, period. It also supports automatic updates.
Good advice is no different when given to the beginner or the expert. The only difference is the effort required to break it down into chunks for them. That's not insulting, it's how we all learned. Sorry if I came in a bit hard on you. I've had my share of bad DBA's too, mostly arrogant to the point of being avoided. I shouldn't have grouped you in with them, and please don't stop helping people because I snapped at you. I got "bitter" because that's how the people I've dealt with were, so when I hear things that sound like them I assume bitter. It's mirrorworld I know. Seriously though, I am an angry sod at the best of times and feel like some moronic protector of the novice. Blame my parents :) Do take on board what I said technically, not so much the "you're a pain but we love you bit" but the imaging we need to run automated tests and near infinite environments prepopulated. I get where you're coming from though, so no animosity. I'm back on Reddit again after a while away which always means someone or something will trigger me :D
I will definitely check that out. Thanks!
Nice. Thanks. I'll play around with this until I understand it better, and incorporate it. Much appreciated.
Is this an education site yeah? If it is the Pluralsight is the best programming and general IT education site out there. It's not free but if you use it it's worth the cash
Good point... Got so caught up in writing an example I forgot some basics!
My typing got ahead of my logic.... Yeah, you're totally right. I would just presume that compile errors are unexpected, as well, and so are undesirable. Either way, you're right. 
Do you have any education? Experience? Do you have any sort of networking available at places with developer positions? 
Happens to all of us. Have a good one, man
You too! Happy Traitors' Day if you're in the US!
There is no industry measurement for this.. It's just an influencing factor; especially for a junior position. Even if you do have a computer science education background, you will know nothing about how the industry really works; which is fully expected to need to be taught to junior positions. Coding experience is similar in that it may show you understand the principles, but will likely not be using or understanding best practices and design patterns.
I haven't seen any examples of WebGL running on mono's wasm port yet, but I'm also interested in it. I have a feeling that usable WebGL on wasm is quite far off, based on the current state of things, though.
This sounds like an [X-Y Problem](https://mywiki.wooledge.org/XyProblem) if I've ever heard one (I have). A few questions to answer: * What sort of data are you downloading? * What sort of computations are you doing on it? * Why is this data ever-changing? * And why does the data upload need to be cancelled and the computation need to be re-done before uploading? This sounds like a strange problem to have, which is what makes me think that this is probably an X-Y Problem. If you explain more concretely what you're trying to do, the commenters in this thread will likely have a better solution to your underlying problem than the one you've come up with.
Iam building a blockchain. So i need to download the newest block, compute a fitting hash and then upload it. If someone finds a new block i need to calculate the newst block based on the new block
Adding to this, there's a tool called Burn that can be used with WiX to make Métro-style installers.
AppX does not need the Store
Old bump but much thanks for this post. I can now add some more high quality resources to my collection! 
Atleast 1. 
I'm a fan of InnoSetup as well. Has amazing extensions and even if it doesn't, it is easy to develop one. 
I just migrated several installation instances to wix from installshield recently. Their product doesn't add any value if you're building the software yourself. It's okay for re packaging, but even then, I'd find a different solution. 
I just did compiler for assembly for PIC16 microcontrollers and WPF chat application with server and got mainly asp.net core job and learned it along the way. Reading existing codebase and then adding features is really easy way of learning new stuff. Even though this is my first programming job i am getting almost twice the money my peers get from their jobs. Now i am leaving this job and i will work for startup in finances. I am 18 and i do study telecommunications. So go ahead. Just apply for a job.
SimpleJson is a single file c# library that I've used that works pretty well. I recommended it to the developers of Blazor and they are currently using it.
The main reason is the text boxes in question appear based on an event, so there is no code for them in XAML.
I would but the text boxes appear/disappear on an event, which I handled using the code behind. I couldn't figure out how to do this in XAML.
This is possible, but you'll be doing a lot of handling of the threads yourself Main consideration: If the DownloadData refreshes every 2 seconds forever, what do you want to do? This is the main driver of how you'll handle thing It sounds like you're doing something like cryptocurrency mining? In which case you'd presumably discard the old block data (the download) every time it updates. As such, you could just check the download data every 3 seconds (although you'd be better off pushing the data when it changes, rather than polling for it), and then just abort the worker thread and start another when it changes. Pseudocode (I won't bother with class wrappers or fleshing out the thread starting) Data currentData; List&lt;Thread&gt; threadList = new List&lt;Thread&gt;(); int threadCount = 4; // Or whatever while (run) { // Retrieve the current nonse Data newData = await GetDataAsync(); // Only take action if the nonse has changed if(newData != currentData) { currentData = newData; // Stop all current threads foreach(Thread t in threadList) { t.Remove(t); t.Abort(); } // Method that starts x threads with the new data, and adds them to threadList startThreads(threadCount, newData); } }
Only learning purpose. I think i gathered enought opinions about this theme. Ill stick to abort everything and restarting the task with cancelation tokens. 
I second Squirrel. We're using it for a couple of apps and it works great. 
I usually do zip files or use this if they need an MSI https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.MicrosoftVisualStudio2017InstallerProjects
.NET Core and Mono are both distinct runtimes. Did you mean that they both implement .net standard 2.0, or did you mean that you can run [ASP.NET](https://ASP.NET) Core on both? (and is that last one even true?)
Great thing about C#. You don't need to recompile on Linux for command line programs. Compile on Windows, run there, copy the exe to Linux and run there with 'mono &lt;blah&gt;.exe' 
Maybe a threading issue? Try using `System.Timers.Timer` instead of `System.Threading.Timer`: https://stackoverflow.com/a/12535731/564755 http://robertgreiner.com/2010/06/using-stopwatches-and-timers-in-net/ &gt; System.Timers.Timer &gt;This Timer is a server-based timer which executes Elapsed events over a recurring interval. The key here, is that this timer generates recurring events in an application.
You could make it a windows service instead of a console application.
For 1k users, how would you use SignalR. A simple implementation will work? Or we will have to take care of multiple things?
Now fixed (thanks for your help)
You should start learning binding, command pattern and mvvm. Try to avoid codebehind as much as possible and use viewmodels, so you can stay decoupled and test your ui and logic seperately (or even let different teams develop different parts). 
You can also just use Windows task scheduler to run the console application every 10 minutes.
Sure, the reason I brought it up is because OP seemed to be having issues running it as a console app and was already using a timer in the application.
Curious why you think you need C/C++ for performance. It sounds like a lot of tasks/threading for parallel computation as well as async goodness that C# excels at. When you factor in network latency, any supposed advantage by C/C++ is outweighed by the higher level abstractions that C# provides in letting you write clean concise code. 
1k users is peanuts..1 hub instance should be more then good.
Funnily enough Squirrel's tag line is: "Squirrel: It's like ClickOnce but Works™" Have you had experience with both? I've only used Squirrel but wondering if I'm missing out anything compared to clickonce https://github.com/Squirrel/Squirrel.Windows
Guys, since a lot of the same answers seem to touch on the same point I'll address it myself: I think we should let AI try until they succeed in being Just In Time compilers than anything we could possibly write. This is one of the things I'll focus on when I'm in college: how to make an AI write/optimise code better than any human could. Once we get there, The Singularity is like just turning a corner.
Thank you! I will certainly check it out, I did this to learn something new and checking out other people's implementation surely is a great way to see what you could've done better.
Looks nice! However, on the github page its mentioned it requires mono. Does it also work with .NET Framework and/or .NET Core?
Once you get used to Wix there is A LOT that can be done with it. However getting to the level required to know how to do such things takes dedication and a very quiet study place!
You could make a XAML view with a textbox and said hint text, then make a controller containing the view appear and disappear on events.
I found this in [the wiki](https://github.com/jpbruyere/Crow/wiki): &gt; For now, only Mono is supported. The MSIL code generation through dynamic methods require somme flexibility of the .net implementation that only mono offers at this time, but maybe in a near future, microsoft will release a more permissibe implementation of the Dynamic method creation.
Different from Wix or InstallShield?
InstallShield. I've never found it to add enough value to justify using over some other tools I've used. 
What elements are you looking for? There are a lot of online learning sites, all of them different and with different types and styles of course. What about highbrow appeals?
Remember to make the timer static. It can be garbage collected.
Just starting to learn C#. beginning with a [UWP personalization app](https://github.com/moutasem1989/ActiveDynamicWall). There is different things I want this app to do. fist (something already done) is change wallpaper based on a specified time. I am reading now on how to make it absorb Image collections and apply them based on time of the day!. something for the future is change wallpaper based on both time of the day and weather (and add pre-made themes to the app). still long way ahead ! 
You're probably missing ItemDisplayBinding property of the picker. &lt;Picker x:Name="PickerName" ItemDisplayBinding="{Binding .}"/&gt; 
You mean package the speech engine into ur own application?? Which speech engine? Probably against tos anyway. Recommend you look into azure text to speech.
Yes, I meant packaging the speech engine in with the application. I meant the Microsoft ones - they're freely available to install, but I wanted to take the hassle of installing them away from the user. Thanks for the info re Azure - I hadn't heard of it but will check it out.
Does it need to be installed via Windows Features in the controlpanel? If so you can install those features via Powershell (Enable-WindowsOptionalFeature command). You can do with with a installer application (run as admin). If its a seperate install you can bundle that installer with you app. If its free I don't see a problem.
Great, thanks for the info - I'll look into using Powershell - sounds like a good idea to have a separate installer for the speech engines, so they have the option of installing themselves , or installing through the separate installer program. 
Probably want to look at something like highcharts/stockchart
Chart.js has a plugin for candlestick charts
I've used [Live Charts](https://lvcharts.net/) and [Oxyplot](http://www.oxyplot.org/) before and both are pretty good. The documentation for Oxyplot needs updating by the look of it, but it appears to have a [CandleStickSeries](http://docs.oxyplot.org/en/latest/models/series/CandleStickSeries.html).
Thanks, I'll check it out.
Excellent, I'll take a look. Thanks for responding
Thanks for the recommendation. I've heard good things about Oxyplot, so I'll have another look. Do you know if you can draw custom trendlines on top of an existing chart?
[Google Charts](https://developers.google.com/chart/interactive/docs/gallery/candlestickchart)
...why?
Thanks, I'll take a look.
Get's the encryption key off site and into a 3rd party system. Makes (in some ways) the system more secure. Storing keys (even encrypted) anywhere near the data is always a bad idea.
Why not use an actual password manager? You can store encryption keys in them.
Are you talking about creating some kind of private blockchain or using an existing public one? Because in the first case I don't know what would distinguish this from existing key management solutions, and in the latter case separating the key from the data by putting the key in the public isn't exactly helpful.
Resilience, less dependency on a(nother) 3rd party system, cost (could be tens of thousands of users). 
You can add as many series as you like to an Oxyplot chart. Just define a new series (e.g. [LineSeries](http://docs.oxyplot.org/en/latest/models/series/LineSeries.html)) for each trendline you require. It might even be easier to use a [FunctionSeries](http://docs.oxyplot.org/en/latest/models/series/FunctionSeries.html) and supply a straight line equation with the relevant parameters - that way it would save you adding each point manually.
thinking Private blockchain. The key itself would be encrypted before going into the blockchain and then password protected. Not set on this. Just exploring the idea and the pros and cons.
Thanks mate, I've already started playing around with it, and it looks like this could be a winner for me. I'm having problems getting the line series to appear (I've got the candlesticks showing up). I'm probably doing something stupid, but I'm sure I'll work it out. Thanks for your help, I really appreciate it :)
As soon as you have 16 projects in github, you are officially a jr. developer. It takes 256 to become a senior developer. 1024 and you're officially a neckbeard. ;) kidding.
No one is recommending you do this in application code. These are mostly framework engineers trying to improve the performance of the platform itself, where it does matter.
I've just looked at one of my projects and the general idea is: * Create a PlotModel * Add your axes (e.g. a LinearAxis for both X and Y) to the PlotModel * Add your series (LineSeries, FunctionSeries, etc.) to your PlotModel * Add your PlotModel to your PlotView * Call plotModel.InvalidatePlot(true) to update the display 
When I hear that comment it is usually people talking about C/C++ and its ability to cull unused code or auto vectorize. I usually don't hear the same thought espoused about intermediate compilation that is later Jitted.
Cheers mate
If you want something today that isn't experimental, you'll need to use [MONO's AOT](http://www.mono-project.com/docs/advanced/aot/). I'm more excited for corert myself, but who knows when that will be ready.
As others have said, there is no magic number. In fact, if you code poorly, your public portfolio could *inhibit* you from getting a job. What you need are *sufficient examples of codebases* that have been authored by you wherein you showcase what is expected of an entry-level programmer. If you have a particular industry in mind, your codebases should reflect that. For example, if you want to get into game development, your codebases should be geared towards games. Likewise, if you want to get into web development, your codebases should be geared towards web apps. Of course, there's nothing wrong with mixing up your code base (some games, some web apps) and, IMHO, that would actually look better since it shows you are capable of learning many different things. At the very least, it would behoove you to have a "full-stack" application in your portfolio. This will include a database, a service/business/domain layer and a presentation layer. For C#, a common stack would be a MVC web app with a service/business layer that performs operations on a MSSQL database (SQL Server RDBMS) to achieve what is required within the scope of the application. Many times entity framework is used for an ORM. In short, the number of codebases you've authored and their size is largely irrelevant -- you need to show that you are a competent programmer that can work with a team.
And where do you store the key for the private blockchain?
We currently store the master encryption key on a different system but that won't scale to where we want. Blockchain may be an alternative that could scale and still be secure.
Do you understand what a blockchain is and what it does? It sounds like you've heard of this new shiny technology and want to use it, without having a real use case for it. A blockchain works great for money because it assumes the parties involved don't trust each other, and the mining rewards incentivize people to follow the rules. For anything that involves managing stuff within a single company, it's just a lot of overhead without any real benefit. You can watch this video to understand what a blockchain does in simple terms, and decide if you really need to use this technology: https://www.youtube.com/watch?v=bBC-nXj3Ng4