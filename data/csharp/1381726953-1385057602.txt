Rijndael is not a hashing scheme, it's an encryption scheme (or Cipher, if you will). Encryption (Ciphers) and Hashing are two different things. If you're after something secure, look at [BCrypt](http://bcrypt.codeplex.com/) and use a high work factor - it should take seconds to generate the hash on a modern machine. 
Short version: No. Don't encrypt passwords, hash them. You should never need to decrypt a user's password, even if they forget it, just have them reset it rather than telling them what it is. If you encrypt passwords rather than hash them, then in all likelihood if your database becomes compromised, the attacked will be able to decrypt every single password taken in a short period of time. Longer version: You don't need "the most secure way possible", because that solution involves having truly random numbers generated from quantum computing, as well as hashing algorithms which are infeasibly computationally intense, and can't run on GPUs, and probably run on dedicated physical hardware, and the precise details of the algorithm are a closely guarded secret developed by the NSA for internal purposes. You'll never get anything that good, but you probably will never need it. Use something standard but good. [This article](https://crackstation.net/hashing-security.htm) does a pretty decent job of explaining the basics, and he even has [some source code](https://crackstation.net/hashing-security.htm#aspsourcecode) in C# which is good enough for most use cases. Security through obscurity has merits, but ultimately what's important is having random seeds per user, and a slow cryptographic hashing function. Here's some real number examples for you. According to [Xato](https://xato.net/passwords/more-top-worst-passwords/#.Ult34VCfj14) &gt; 91% have a password from the top 1000 passwords That means if an attacker knows the salt, the hash, and the hashing algorithm, that by testing merely 1000 predefined passwords, they can accurately obtain a user's password 91% of the time. If the hashing algorithm takes 100 ms to compute, then it would take approximately 100 seconds to get a password 91% of the time. If you have 10,000 users, then an attacker could get 9,100 passwords in 11.5 days. If you have 100,000 users it would take 115 days. This isn't terrible, but the longer it takes to compute a hash, the better. If it takes one second (10 times as much) those numbers become 115 days and 1150 days respectively. Ultimately it's still up to the users to have a good password, rather than a completely shitty one, but having good password security significantly reduces the odds that a user will become a victim before they can be informed and change their password. 
Others have pointed out the cryptographic issues. There's an issue with how you handle strings that's problematic too. Simply using Encoding.UTF8.GetString() on things that aren't UTF8 byte arrays won't always return a useful string. Importantly for this context, two different byte arrays can actually resolve to the same string. It's also not reversible for random blobs of data. TL;DR: If you must store a byte array as a string, do so as something like a hex string or base64 encoding. static void Example() { string examp1 = Encoding.UTF8.GetString(new byte[] { 0xfe, 0xfa }); string examp2 = Encoding.UTF8.GetString(new byte[] { 0xfe, 0xf0 }); Debug.Assert(examp1 != examp2); // This blows up Random rnd = new Random(); byte[] buffer = new byte[1024]; rnd.NextBytes(buffer); string converted = Encoding.UTF8.GetString(buffer); byte[] copy = Encoding.UTF8.GetBytes(converted); Debug.Assert(copy.Length == buffer.Length); // This blows up too for (int i = 0; i &lt; buffer.Length; i++) { Debug.Assert(buffer[i] == copy[i]); // And so does this } } 
&gt; But, having a "unique" salt per user is probably better It's absolutely better, because in the case of your database getting leaked, they can't crack the whole database easily. It'd take a significant amount of time per password running a rainbow-tables attack, as opposed to running a single lookup and seeing if any of the hashes match. Think of it this way: 1. I hack your database, and get its entire contents 1. Each user has the same salt, so I can run a rainbow table lookup with said salt 1. I match the rainbow-table result to a hashed password in the database. If it matches any of the rows, I have an account I can get into. If you have unique hashes, you have to run a new rainbow table attack PER USER. It's much, much slower.
Byte array is a perfectly fine representation of encrypted data. I cannot imagine a circumstance that demands the encrypted data as a text string since the encrypted data should never leave the password system. OP can use SequenceEquals to check two arrays for equality.
Just thought how I would go about adding in upgrades for this game. I thought about using a switch case but I'm not exactly sure.
http://blogs.msdn.com/b/cdnstudents/archive/2013/10/07/visual-studio-tips-selection-shortcuts-for-lazy-coders.aspx lol I know more shortcuts than they discussed, guess I am lazier than the author **or** I am more efficient because I work faster.
Also I would like to know how you guys structure unit test projects. And slow integration test projects.
I wouldn't recommend that book to a beginner though.
Agreed - for myself, something project specific will be Foo.Testing in a separate project. I'll dig up some library code on some typical tests on my end.
Do both. Site + user salt
Pointers is a datatype supported by C, C++ and C# (in unsafe context). Generally you wouldn't want to use it, but some interop functionality may require it to get any decent performance (e.g. real-time procedural rendering of System.Drawing.Bitmap) Pointer syntax in C# is basically similar to C, although there are quite a few constraints. Generally you cannot have a pointer to a managed object (but you can marshal a managed object, or make the Garbage Collector pin it in memory) Pointers are declared with the asterisk modifier: int* ptr; Which is a pointer to an integer. To get the address of a variable in local scope you can use the ampersand unary operator which returns the address of the operand: int* ptr = &amp;someInteger; To read from a pointer you can use the asterisk unary operator: int someValue = *ptr; Pointers also support indexing: ptr[100] = 50; // Write 50 at the memory address ptr + 100 * sizeof(int) int value = ptr[100] // Read the integer at ptr + 100 * sizeof(int) To get the pointer to an array you can use the fixed syntax: int[] array = new int[100]; fixed(int* ptr = array) { // The array has been pinned by the garbage collector. } You can also use the GCHandle for this, which is more leanient on the data (you cannot use generics with fixed): GCHandle handle = GCHandle.Alloc(array, GCHandleType.Pinned); try { int* ptr = (int*)handle.AddrOfPinnedObject(); } finally { handle.Free(); // ! Important to always free the GCHandle ! } Pointers allow arithmetic. An integer pointer will increment in order of four (sizeof(int)). Therefore they can be used to read and write arrays in a fairly easy manner. That's a C# pointer crash course. But generally, don't use them unless you have a good reason.
It depends strongly upon the application. One project I work on has no direct end users, we move data around via a bunch of services. * **Foo.Common** Common business logic, shared by all services/apps. This includes database model, data access, and all the various business logic stuff. It's one giant assembly. * **Foo.Services.ServiceN** Service {N} - Windows Services. Nothing except minimal bootstrapping code. * **Foo.Apps.AppN** Administrative applications. Also nothing except minimal bootstrapping code. * **Foo.Database** SQL Server Database Project. Contains all Foo.* schema tables/sprocs/udf/udts/etc. * **Foo.Common.Tests** Unit test code. Tests everything in Common. * **Foo.QA.Database** QA Database schema stuff, mostly controlled by the QA team. * **Foo.QA.Tests** Integration test code, mostly controlled by the QA team. Others are more like the example in the OP. Our common assembly is large, but internally it's split up into namespaces/folders by logical area of responsibility. We could split them to different assemblies, but there's no compelling reason to do so. We've added and removed entire namespaces and major pieces of code that would be candidates for being individual assemblies enough times that we'd have a bunch of dead projects. 
Is this sufficient to converting the byte array to a string? RNGCryptoServiceProvider provider = new RNGCryptoServiceProvider(); byte[] randomNumber = new byte[16]; provider.GetBytes(randomNumber); string salt = System.Convert.ToBase64String(randomNumber, 0, randomNumber.Length);
If you look at my edit, I have used BCrypt. Could you let me know if its a secure implementation? Thanks
If you look at my edit, I have used BCrypt. Could you let me know if its a secure implementation? Thanks
Keep in mind that the salt should be unique when you concat the username and an hardcoded string per user (because your username is unique in the db). This way, two user with the same password won't have the same hash.
Most databases has a varbinary or equivalent storage type for byte arrays. Although this does depend on the database. But in any case: encrypted data is not text. You cannot convert it to UTF-8 and expect a sane result. It may even crash because the data does not fill a unicode code point correctly. Indeed, the documentation claims that such a case will throw ArgumentException. If your database does not support binaries, use Convert.ToBase64String (if the database does not do the conversion for you)
Yep, that's perfectly fine.
Sure I think I have implemented the converting from byte array to string as shown 2 comments below?
Yes that's fine.
I had to come back to this thread and thank you. I loved this tutorial series. It was awesome. The guy is very easy to understand and I learned a lot from watching these videos. If you have any other sources like this that maybe go into a bit more of the advanced concepts I would greatly appreciate it.
Of course it depends, but my basic structure (for windows applications) often is something like: **Foo.GUI** **Foo.BL** **Foo.DAL** **Foo.Console** (I prefer to test stuff in the console) **Foo.Shared** (just like your Foo.Common combined with Foo.Entities) **Foo.Testing** (for Unit Tests... ok, I am lying a bit here, I often create that, but just won't use it)
I like to use the [Onion Architecture](http://jeffreypalermo.com/blog/the-onion-architecture-part-1/), or something similar to it at least I usually build my solutions as follows. **Foo** - Contains all core functionality. Only references the Foo.Entities project everything else is abstracted. It could be called Foo.Core, but I like to just call it Foo because it really defines what Foo is everything else is in support of Foo. If that makes any sense... **Foo.Entities** - Contains domain models and interfaces for abstracting data, infrastructure, and third party services for the core. **Foo.Data** - Contains data implementations. Only references the Foo.Entities project **Foo.Infrastructure** - Optional, If needed will contain implementations for infrastructure and third party services. Only references the Foo.Entities. **Foo.Web** - Contains Web UI. Typically this wouldn't reference any projects directly and would use the service project to access that application, but that is only if the application is large enough to warrant having web services. This also allows really loose coupling between the application and the UI which will allow for easily changing front-end or back-end technology. **Foo.Web.Services** - Contains Web Service implementations. Should be fairly simple only making calls to the Foo project and manage dependencies. References Foo, Foo.Entities, Foo.Data, Foo.Utilities and Foo.Infrastructure **Foo.Services** - Optional, If needed will contain any background services. Same as Foo.Web.Services, should only call into functionality implemented in Foo and manage dependencies. **Foo.Utilities** - Optional, If needed will contain utility/helper classes and extension methods that will be used throughout all parts of the application. **Foo.Tests** - Contains unit test that should run all the time. **Foo.Tests.Integration** - Contains integration test. I began splitting these up to make test automation simpler since integration test isn't something that should be run all the time. 
SecureString is pretty much only useful if you can guarantee the string value itself is never entered into memory. ie: If the value is already in a string variable, then SecureString won't prevent someone from accessing the in-memory value if they really want to.
BL?
{ProjectName} - classes,methods etc common to all functionality goes in here {ProjectName.FunctionalityCategoryNamespace} - specialised stuff goes in its own namespace, with continuing namespaces being defined for more specialised functionality that doesn't have dependencies on namespaces adjacent to it on the same "level" of the hierarchy or deeper. {ProjectName.Tests} {ProjectName.Tests.{FunctionalityCategoryNamespace}
I would assume "Business Logic".
I use solution folders for some separation: #**SUPPORT** * *Product.Database* - Schema, upgrade scripts, notes bitching about shitty DB schema if I'm not allowed to touch it. Never actually referenced in the products, only used when pushing updates. #**LIB** * *Company.Common* - Common-use functionality across multiple products. Mostly extensions. Is a project reference early in dev and becomes a local .dll reference later. * *Product.Models* - Data models, POCOs, Common enumerations. * *Product.Repositories* - Database contexts and repositories. * *Product.Contracts* - Interfaces and parameter-models used for those interfaces. Lubricates the edges around repositories and operations for ease of intrusion and extrusion. Ha ha ha, sex metaphor. * *Product.Operations* - Business logic * *Product.Services* - (if needed) service endpoint wrappers around business logic. Mostly tooled around WCF. #**RUNTIME** * *Product.[tech]* - The actual UI. Generally WPF for client-side apps, or MVC for web apps. * *Product.ServiceHost* - (if needed) WCF service host with unity factories supporting it. #**TEST** * *Product.Test.[library]* - Unit test libraries. One test library for each used library. Models, Repositories, Contracts are all kind of "dumb" as far as logic goes, so ~85% of test ends up being split between Operations and the UI.
Ahh of course.
Business Logic / Layer
Theres a course in Coursera about game design in C# using xna... It is in progress so you probably cant get credit for it, but see if you can still enroll to have access to the videos and assignments.
XNA is dead, so you won't want to start with that. Maybe start with Unity? There are some videos on the Windows Phone Developer Site that show you how to start game development with Unity on Windows Phone.
Take a look at MonoGame. It is an open source implementation of XNA that is cross-platform: http://www.monogame.net/ While XNA is dead, MonoGame is not.
There was a good .net rocks episode on game dev (http://m.dotnetrocks.com/show.aspx?showNum=910). They were using http://www.fetzenet.de/blog/?page_id=697 Duality and seemed to like it a lot.
Dead, perhaps, but it's still useful. It's still the same level of usefulness it was before Microsoft said "We're out"
Wait, is there an error in the 4th row of that data type table? It says: | ushort | 16 | 0 to 2^8 - 1 But shouldn't it be: | ushort | 16 | 0 to 2^16 - 1 | ? 
I can help you out with a code snippet, but just answer me this: Given the incoming sentence: "Tell me the weather for tomorrow", what would the keyword(s) be that you'd want to have? EDIT: I'm going to guess you'll want "weather" and "tomorrow" based on your original query - I forgot you had mentioned that. 
yeah pretty much that is the most basic of commands. I have already gotten current weather as well as forecast parsing set up. so basically keywords would be weather (narrows to current or forecast) then keyword tomorrow narrows it to forecast parsing. etc. im having trouble getting the string separation to work at the moment. I am using the following. public void language_parse(string Input) { char[] delimiterChars = { ' ', ',', '.', ':' }; string[] words = Input.Split(delimiterChars); foreach (string s in words) { commandReadout.Text = commandReadout.Text + s + Environment.NewLine; //this is the window in my program that shows a running log of input &amp; output. } } Just pulled this off of MSDN to try and it does not seem to be working at all
I think this line: commandReadout.Text = commandReadout.Text + s + Environment.NewLine; Should be: commandReadout.Text += commandReadout.Text + s + Environment.NewLine; Note the += operator, so you don't lose previous information in the commandReadout control. EDIT: Here is a snippet that is extensible for other actions you might want to do as well. Check it out: http://pastebin.com/xhwzzBWG
&gt;float and double are represented internally in base 2, that is, it can only represent precisely base 2 numbers, while decimal is represented in base 10, that is, it can represent all numbers precisely Nitpick: This is false. Just say that float/double are base-2 representations and decimal is a base-10 representation. There are numbers which can't be precisely represented in base 10, too.
When you cast a string to an array of ints you will get the ascii values of each char, in this case 51 and 52 which are chars '3' and '4' respectively. You need to cast the interest back to chars before returning/showing them.
You're correct. Float and double are IEEE754
Thank you for the feedback, I already fixed these 'bugs'.
what you're doing here is to convert your string into an ASCII (probably, I didn't check what encoding C# uses specifically) character value array. Now, the digits 0-9 have values 0x30 - 0x39 in ASCII (48 - 57 in decimal). So, if you want to keep your code you could do the following inside the for-loop: newNumber[i] = lastNumber[i] - 0x30; which should then do what you want it to. Note that this only works because the digits 0-9 come after each other in ASCII (and all it's derivatives).
Nice post thanks for posting, I'm getting into C# and this is really helpfull, coming from Java.
Wat
I guess this is what you have? var input = 2; // I asume thats what the 2 was for? double write = number * 10 + input; szam = write; // not sure what this is for? label1.Text = write.ToString(); When you press the button, you need to register that. For example, introduce a class variable boolean: private _isNegative = false; When you click the comma button, you set it to true: button_onCommaClick(object sender, e args) { _isNegative = true; } Then you can just add a check to your existing code: var input = 2; double write = number * 10 + input; if(_isNegative) { write /= 10; // divide by 10 again } szam = write; // not sure what this is for? label1.Text = write.ToString();
My guess is that in his locale, "," is the decimal separator, which in the US is ".". He's attempting to register "," to mean "digits after this should be part of the fractional part of this number."
There's an off-by-one error in here. This: public static byte[] Memory = new byte[UInt16.MaxValue]; will initialize an array of 65535 bytes, but 65536 bytes are addressable. A Pointer initialized with the value 65535 (0xFFFF) would cause an invalid array index on read or write. public static byte[] Memory = new byte[UInt16.MaxValue + 1]; would work fine.
Thanks,this is exactly the situation (I live in Hungary)
With the help of Ronsijm,i was able to write a good code :) if (kicsiszam == true) { double kiirnivalo = szam * 10 + 2; szam = kiirnivalo; label1.Text = kiirnivalo.ToString(); } else { helyiertek = helyiertek + 1; double kiirnivalo = szam + 2 / (Math.Pow(10, helyiertek)); szam = kiirnivalo; label1.Text = kiirnivalo.ToString(); } kicsiszam is a bool,registering if i hit the "," or not,kiirnivalo is the number the label will show,szam is "number" and i need helyiertek so when i hit "2" the second time(after hitting "," it will add 0,02,not 0,2 Thanks :) 
I am not sure what I am doing wrong but I could not get that snipit to work in a console application or when added to a forms application. It would just return nothing.
Short Answer: No.
Copy and paste this code into the main method of a console app, with nothing else: char[] delimiterChars = { ' ', ',', '.', ':' }; string[] words = Input.Split(delimiterChars); foreach (string s in words) { Console.WriteLine(s); } Console.ReadLine(); Ninja Edit: Also, you should really use WPF instead of Forms unless you have a specific need. WinForms is very much deprecated.
Thanks for the great article, I've built a couple of poor-mans fluent interfaces for internal use, but never enforced grammar. Nice use of interfaces. By the way, I noticed a typo under 'Executing/Ending methods': 'fluent' is spelt 'fleunt'. 
Why do people delete their comments and/or their profiles? Can someone please care to explain it to me? I'm relatively new to reddit, but I've seen this so many times...
http://msdn.microsoft.com/en-us/library/system.web.httprequestbase.userlanguages.aspx Basically it is based on what the browser is sending. If you rely on the thread culture, it will pretty much always end badly. The same is true if you are doing things in WPF. The InvariantCulture is just syntactic sugar for *doing it the US way* which is completely pants on head retarded way of doing it.
This is a really bad way of serializing DateTimes. The problem is a DateTime contains more info, you are storing it in a human readable format, but haven't defined what that format has to be. Never do that. DateTime is way more complex that the simple date time string, it includes timezone and other calendar logic. Effectively your limiting your code for an arbitrary reason, coded yourself into a corner if you will. You would be much better off using one of the serialization frameworks. Why roll your own!
Hurt pride
Thanks. I learn the same way. Show a practical, real-life use, and it will stick in my mind better.
If you're going to be using an intermediary variable to cache the result of the Find All operation, doesn't it defeat the whole purpose of offering a fluent interface? 
In this example, the intent is that baseQuery itself is never executed. It's equivalent to: var aThroughM = Find.All("Person").WithLastName(Criteria.Between("A", "M")).Go(); var nThroughZ = Find.All("Person").WithLastName(Criteria.Between("N", "Z")).Go(); You're right that this use case doesn't read like English. But that's not the part of fluent interfaces that I care most about- it's the ability to finely control what can be called when through the use of interface types. Reading like English in the absence of subqueries is icing on the cake.
Thanks. Looks like I need to get an editor before my next post. :)
It stops working, just like every other trial out there with the tiny exception of winrar. Maybe just go to express... Maybe ask better questions?
Do you need features that aren't available in the Express edition?
I don't have the money to buy it. But is the express version free? Or just another 30 days worth of trial
It's free http://www.microsoft.com/visualstudio/eng/products/visual-studio-express-products
Express is free, forever! It has most of the useful features of full VS with the exception of a few refactoring tools. It most likely has all you need.
Free-free. If you go to a school, check with your IT dept. They may have free MSDNA licenses for you (MicroSoft Developer Network for Academia I believe it the full name).
Purchase it if you thought it was a good product based on the trial? 
Is their any major feature that would make it significantly harder to code without?
There's no extension support, that might be an issue (well there is extension support but only Microsoft-signed ones.)
What are the requirements exactly? Just a website?
You say that you get a bunch of features for free but in reality you have to pay 45$ a year for a website. Is that correct?
This is my first ever blog post, so any comments / criticisms are welcome. :) And of course, feel free to share it!
I thought this was a neat post. Although the things you mentioned were definitely geared for niche applications, I still find them interesting regardless. I'd be interested in seeing a post like this about F# (my personal favorite)
You know, I see F# mentioned more and more lately yet I've never even looked at it. I suppose I don't do much mathematical or financial stuff...
It's been a long time since I really learned anything about C# from an article like this, but you had several things that were new to me. Nice job!
Hey, this is a great post! I just want to let you know that it may even help me out with the problem I've posted about in these two links: http://stackoverflow.com/questions/19415717/using-c-sharp-extension-methods-on-not-in-nested-classes-to-establish-a-common http://stackoverflow.com/questions/19415498/faking-composition-and-a-common-interface-with-inheritance I'm wondering if we can instead use interfaces (somehow, I'm not sure just looking at the code) to enforce these rules and decorations instead of using inheritance in the quirky way we are now. Any thoughts?
Congratulations. This is the first of innumerable articles with the same title that actually contained more than one thing I didn't know about C#.
Not sure how fair #4 is. An optimizer can in theory recognize that there's no point in you allocating the array on the heap. No references are escaped, and it never leaves the scope of the method. The JIT optimizer could recognize this and allocate it on the stack.
Start moving your code from your code-behind of the form to classes of their own. For example, all code pertaining to 'Tab1' should be moved to a 'CbfTab1' class. Pseudo code below, assuming a Form Form1, a tab control with a tab named Tab1, and a button on Tab1 name Btn1: public class Form1 : Form { private CbfTab1 cbfTab1; public Form1() { this.cbfTab1 = new CbfTab1(this); this.tab1Btn1.Click += this.tab1Btn1.Btn1ClickHandler; } private void Btn1ClickHandler(object sender, ClickEventArgs e) { this.cbfTab1.Btn1Cmd(); } } and so on. If possible, I'd look into doing this project in WPF and take advantage of the great data-binding system available in that language.
With the exception you can have a more logical message on it.
It doesn't. Current versions of the .NET framework don't do that much with escape analysis. The speed is about the same because allocating arrays doesn't take much more effort than bumping up the heap pointer. His benchmark likely isn't structured in such a way that it would cause much GC pressure, so they appear equivalent. For high-throughput applications, avoiding heap allocations can produce a large savings, due to the reduced GC pressure. That isn't obvious in microbenchmarks, since GC might not be triggered. Stackalloc is also a very efficient way of working with unmanaged memory. Allocating an array and then pinning it does terrible things to the GC, since it has to work around the pinned regions. If you're working with small fixed-size structs or buffers, stackalloc can make a huge difference.
It can probably be useful for reverse engineering or memory management
Oh I have no fucking clue how I would use it. But now I'll be looking for a way... muahaha.
/r/ReverseEngineering is pretty interesting
F# is a niche language if anything! But it's very fun!
Your ghetto dependency injection was funny :)
That's actually a fantastic article that's perfect for me. Awesome, thanks. 
Agree, hence my suggestion of WPF. I've never seen a clean way to separate layers in WinForms as cleanly as what you can do in WPF, so I offered a pattern I'd seen elsewhere. I also kind of got the impression he was relatively new to a 'separation of concerns' mindset, so I wanted to offer something he could follow relatively easily. I do appreciate the feedback though.
Thanks :) It can go a long way. The hardest part is of course to get the exact process sizes and locations, then you can do... everything &gt;:)
Hey, just wondering... do you know how to perform a memory scan to look for the offsets from within your code instead of using CE? Something like watching a processes memory for a certain pattern till the correct value is found? Also, would there be a way to alter the length of the string in your example? Like how do you actually operate on the datatypes?
This was a really great article! Heck, #10 could have been an article all on its own as far as I'm concerned. Its a really interesting concept to create your own custom async types, I may try it out at some point if I can think of any. Do you have any recommendations? Perhaps games programming with lots of actors?
MasonOfWords already described it well below; but in reality that was just a quick example I made to demonstrate the generic constraints on an extension method. :)
Hi SarSha, I think for me there are at least three useful ways of using them. 1. As a simple way of making you classes contain a common attribute. ie make and empty interface IMyEmptyInterface then to see if the class that was passed in matches the interfaces just go if (c is IMyEmptyInterface ) { do-stuff();} 2. Say you have a few classes that don't inherit from each other but you want then to ask them the last time modified. You could make them all a of common interface with a property modified. Then you function can take any class of type ILastAccessed and just find it's modified time by calling the property. interface ILastAccessed {Modified {get;}} 3. Finally and probably the primary reason, say you are developing a library with another party and you need to agree on what you can and cannot do. The interface provides the calls and properties you can use but hide how they are gathered. With 3 one common model is writing an app that can have plug-ins. These plug-ins can assist your app but they need a way to get and send information to your core application. Save and Load for example. They don't need to know how you Save and Load and you don't need to know what they do to the info before sending it back as long as it conforms to the interface. 
More on ILNumerics: http://ilnumerics.net/media/pdf/Numeric-Computing-for-Industry-ILNumerics-White-Paper.pdf
Point 4 has in fact been shown to be invalid (although not for escape analysis reasons, like Mason pointed out, but because of other shortcomings). There's a response here: http://blogs.microsoft.co.il/blogs/sasha/archive/2013/10/17/on-stackalloc-performance-and-the-large-object-heap.aspx
Lets say your app requires the use of a database, but you don't necessarily care where the data comes from, as long as your app gets the data it should be happy, right ? So you create a interface with the things you need for your app, such as methods to retrieve and save data you are going to use in your app. Then someone comes around and tells you you need to use an access database. Great, so you create a class that implements your interface with all the code relevant for working with an access database. You give your program the class and it knows what methods it can call because an interface ensures that a class implements those methods. Then someone suggests that you use a MySQL database. Instead of changing your program that already works, you can just create another class with code relevant to MySQL databases and pass that to your app. See what I am getting at ? You can create an app and write all the logic without having to modify it to change a datasource. a different and more practical example that I am plagiarizing from somewhere is this: Imagine a car, It has an interface, a steering wheel, an accelerator and a brake. If I can use those things I can drive any car that has those things. It doesn't matter if the engine is petrol,diesel,steam,hydrogen,nuclear,coal,wood,solar,electric,natural gas,compressed air or magic. All I care about is that the steering wheel turns the car, and that the accelerator makes me accelerate and that the brake makes me slow down. In summary, an interface is when you need to know that a class can do something, but don't care how it does it.
There is an extra "h" in that word 
Gotcha. To echo what others have said, this was a really good post. Thanks for sharing.
Thanks!
hmm good point I was trying to get something specific about the computer that the software is installed against to secure the activation key against and went with the HDD serial. Any suggestions on something that would be less likely to upgrade? the software is aimed at a certain market that arent typically too tech savvy and it is an eLeraning program so wouldn't be used again and again I also realise its not possible to make it pirate proof i just want to make it hard enough for non techy people to crack
I meant as in 1 to many
Look at the DataReader class http://msdn.microsoft.com/en-us/library/haa3afyz.aspx
Email address. * Store the email in the registry * Send it to the web service when the app starts * Log the IP address * If they log in from someplace new, either require them to re-enter the email or send a confirmation code to the email and force them to enter it on the app.
This really doesn't have anything to do with WPF. The code for authentication/activation should really be separated from your UI. That way you can make changes to one with minimal breaking changes to the other, and can reuse it for more than one product or purpose.
Anyplace where you have multiple "providers" and one or more "consumers". /u/Blindsniper45 gives one good example. Another (contrived): public interface INamed { string First {get;} string Last {get;} } public class Employer : INamed { public string First { get; set; } public string Last { get; set; } ...and other stuff... } public class Employee : INamed { public string First { get; set; } public string Last { get; set; } ...and other stuff... } public class Customer : INamed { public string First { get; set; } public string Last { get; set; } ...and other stuff... } public string FormatName(INamed person) { return string.Format("{0}, {1}", person.Last, person.First); } In this case the Employer, Employee, and Customer classes are the "providers" and the FormatName method is the "consumer". Now you don't care whether someone is an Employer, Employee, or Customer, you will always format their name in a consistent way. It saves repetitive code and makes modification easier. Bonus: you can also use extensions so it looks a little cleaner later -- public static class INamedExtensions { public static string FormatName(this INamed person) { return string.Format("{0}, {1}", person.Last, person.First); } } ... later ... var custName = customer.FormatName();
I'm thinking that if you know what the data type is you should be able to marshal that into a c# type? Then you could manipulate the array size. That would be awesome. I wish I played more computer games so I could use this stuff.
Where did you see self-modifying code ?
I think that is what I am doing. For example my program works similar to a recipe program. I have a "cake" object which holds a list of "ingredient" objects. I also have a sqlite database which tracks the relationships. The "cake" class and "ingredient" class hold all of the code that creates the relationships in the database as well as pulling back information about the objects to display on the form. In my form I am just saying if you click this button add this ingredient to that cake, ect. Is there a different way to separate the business logic? The biggest issue is the build up of code due to having multiple tabs to handle all the editing of "cake" and "ingredients" in the database. 
I think this may be the answer I was looking for. Although I am not sure what Cbf stands for. 
They've done a lot to improve the quality and speed of development to keep up with faster evolving practices and technologies. Check out this great session at /build/ this year, that uses their own teams as dogfood for their techniques: http://channel9.msdn.com/Events/TechEd/NorthAmerica/2013/DEV-B212
Code Behind the Form
MVC is a framework built around a design pattern. You can learn the framework (and we all know frameworks come and go) or learn the design pattern and how to implement it outside of a framework. 
Now press F6. &gt;&lt;
Like learning everything else... first hit the Wikipedia page on the subject (TDD)... then google the related keywords (NUnit, Fakes/Mocks)... from that spread out and google the terms from those pages (SpecFlow, Gherkin, Inversion of Control/Dependency Injection). 
SSD also made a big difference for me. I don't think Visual Assist helps things, but it's an essential for me when using C++.
That's true but also fairly nonsensical. You're not going to get very familiar with the pattern unless you work with it a lot, and you're only going to do that in one of the frameworks that implements it (ASP MVC, NancyFx, ServiceStack being among the best-known ones in .Net). Then your skills are transferable to other frameworks, and languages, and this is a good thing. Are you really going to "implement it outside of a framework". The lowest level "no framework" you can go in .Net on IIS is to write your own IHttpHandler. Are you really going to do that? It's a bold move. If so, you might be actually making your own framework. You're certainly making a lot of work for yourself. This may be a work of genius on your part, or .. not. 
Yeah, I think that should give a much better user experience. 
He specified working with the .NET Framework. [Here](http://www.codeproject.com/Articles/383153/The-Model-View-Controller-MVC-Pattern-with-Csharp) is an example using winforms, but your response illustrates my point quite well. &gt;Could you give me an example of the MVC pattern implemented and serving web pages MVC is a design pattern that Microsoft took and built a framework around. Microsofts MVC framework is not *the* MVC design pattern. As you can see in my link, MVC has applications outside of web development. I think it is important for college grads to understand what is going on under the covers. In my experience, intimate knowledge with a particular framework has never helped me solve a problem. Good understanding of what is going on under the covers and a debugger have been more than adequate. 
&gt; Microsofts MVC framework is not the MVC design pattern Well, clearly. I mentioned two other implementations of MVC for serving web pages in .Net above. Yes, I've used them all. There are several others in the .Net Web space *alone*, which I chose not to mention as they aren't that important. I've used some of them too. "understanding of what is going on under the covers" and the abstract form of the pattern is important, so is knowing a few of the frameworks that you would use in an actual job. And the second thing is a path to the first. 
Hell yea, Bootstrap!
Back in the day, I learned from Robert "Uncle Bob" Martin's, "Agile Software Development, Principles, Patterns, and Practices" book, along with seeing him and some of the other Agile founders at conferences and training sessions. IIRC, most of the code samples were in Java, which should be easy for a C# programmer to follow. He has some other good stuff, but IMO, he can be overly-dogmatic and often seems to write blog posts with the exclusive purpose of starting a controversy - where he can ultimately declare himself "the winner". I also liked Kent Beck and Ron Jeffries' books. Whatever you read, I caution you that some people treat Agile, or their particular interpretation of it, like a religion. Get the knowledge you need, make your own judgements about what helps you (after you really try out the practices), and ignore the bloviations of the people trying to feed their wallets and/or egos.
Which tools would you have concerns with? The only ones that I know that are "new" (in the ASP.NET world) is the SignalR support, and EF6 being detatched from the cadence of VS. Haven't played with the new ASP.NET, I am bound to .NET 4.0.
So - why I should upgrade my visual studio 2010 to 2013?
~~DO NOT BE COCKY~~ ~~ASK QUESTIONS~~ ~~DO NOT CHANGE ANYTHING YOU DO NOT HAVE A FULL HANDLE OF BEING ABLE TO TEST~~ ~~FOR THE LOVE OF GOD, ASK QUESTIONS~~ edit: Hmm.. it appears as though I posted to the wrong thread! Whoops! It was meant for a cscareer thread about a brand new dev.
Thanks for this! I had planned to make the appending to log a method after I learned how to create methods but I just haven't gotten around to it yet.
What do you mean detached fromtp the cadence? 
There is no limit so you are probably doing something wrong, but it is hard to say what without looking at the code.
http://pastebin.com/TmdagGFM
Actually, the limit is actually 256 Terabytes per file as of Win 8. Design limit is 16 exabytes.
I get the error code "Length cannot be less than zero." on line "string link = sourceCode.Substring(startIndex, endIndex - startIndex);"
Much better live editing of websites Xaml intellisense Better debugging
Knew I missed a few...thanks!
length is the second parameter of Substring, which in this case is endIndex - startIndex. Try setting a breakpoint there and inspecting both values to figure out what's going wrong.
So you're saying VS2013 is the stable VS2012? Sounds about right to me.
Anything specific that's confusing you?
Not really, coming to this from mainly LUA it just all seems really foreign and I wanted to make sure I wasn't making an awful mistake but I found a nice video series on it that I'm watching now and it's starting to make more sense than the books
Lua is pretty c-like, so C# shouldn't get on top of you syntactically, once you familiarize yourself with common keywords. Lua can be written in an object-oriented fashion, but it sounds like you haven't done that so far. the extremely short version is that object-orientation is the combining of related data and behavior into one piece of software, and encapsulating inner details that other software doesn't need to know about; that's really all there is to it.
GetResponseStream. Something with the web that limits things. There is no limit.
take a look at [head first java](http://www.amazon.com/Head-First-Java-2nd-Edition/dp/0596009208) and [head first c#](http://www.amazon.com/Head-First-C-Jennifer-Greene/dp/1449343503). i learned object-oriented programming from head first java, but was implementing object-oriented code in another language, which is one example of how good the book explains the general concepts. it is far better than head first c# in terms of explaining object-oriented concepts and is likely better than most books, but head first c# gets you a lot of hands on experience with visual studio and c#. reading head first java first and then moving to head first c# wouldn't be a bad approach, in my opinion.
OOP is conceptually simple, but sometimes difficult to explain to someone with either no context, or a completely different context. Then there comes a moment when the proverbial lightbulb goes on, and it all begins to make sense. C# is a very friendly language to learn, yet is also very powerful once you have mastered the basics. and takes a lot of its core syntax from the larger family of C-syntax languages (which include, to varying degrees, Java and JS). Keep at it, and as soon as you can, try to build something useful, or even better, re-build something you built in another language. That way, you already know much of the logic you are trying to implement, and can focus on the new characteristics of the C# language and OOP paradigm instead. 
[This SO Answer](http://stackoverflow.com/a/5945597) seems pretty appropriate. Copy the "RunAsSTAThread" function into your project, then do whatever you need to do to the clipboard as a lambda when you call it. Also, *everything* has an entry method somewhere, even applications that live in the task tray. If you're using a service, then running the service as a STA thread can cause problems, it's better to use the linked method. If you're using WinForms or WPF then the main application thread is already STA by default.
Thanks a bunch, that solved my problem,
Not sure what you mean to be honest. I'm fairly new to this so I am still learning. The way I am currently doing things is via a method called input_parse which is essentially a bunch of if statements with keywords tied to the string.contains method. That works for some things but with multiple keywords in one string it performs both actions. So I am trying to get something a little more versatile set up.
You could try a [natural language parser library](http://sharpnlp.codeplex.com/).
This could work, but it seems the project may be abandoned. Is there a video or any documentation on how to implement and use this?
You could probably benefit a lot from using LINQ to query your list objects here. 
You need to initialize your list. Right now, your list variable is pointing to an empty memory spot. In your class constructor, or wherever you are using the list, put in a MyList = new List&lt;MyType&gt;() ;
Move `List&lt;BaseShip&gt; ships = new List&lt;BaseShip&gt;();` outside of the constructor, but still inside the class. The `ships` object is going out of scope as soon as the Fleet constructor is done running. ie: public class Fleet { List&lt;BaseShip&gt; ships = new List&lt;BaseShip&gt;(); Fleet() { rand = r; initFleet(); } private void initFleet() { //... } }
In the constructor, you're initializing a local variable "ships" to be the new list, rather than the Fleet's instance variable. Drop the type declaration to initialize the instance variable, or even better, you can add the " = new List&lt;BaseShip&gt;" to the instance variable declaration in the class body.
eg. private List&lt;BaseShip&gt; ships; when i am declaring my variables used within the class?
Where are you passing in a Ship object? Could you post a bit more code so we can see clearly what is going on? Maybe a gist. If you set a breakpoint for the 'ships.Add()' call, is the ships object null there? 
I'd recommend the basics from searching around, maybe checking out a video on youtube. Figure out how to setup a project using MSTest and one using NUnit (maybe XUnit as well). Do a basic TDD Kata (fizz buzz, etc). Learn about using fakes/mocks/stubs (NSubstitute is good). C# Specific book, new version out in November: [The Art of Unit Testing: With Examples in .NET](http://www.amazon.com/The-Art-Unit-Testing-Examples/dp/1617290890/ref=dp_ob_title_bk) Get the pre-release here if you want: [The Art of Unit Testing: With Examples in .NET](http://www.manning.com/osherove2/) 
Yes, as jeremywho is suggesting. You can initialise most of your instance variables in this way (fleetName, shipsLost, numships (although ints will be 0 by default, anyway); only rand needs to be set within the body of the constructor.
thanks, I'll start figuring that out
Also, shouldn't there be a List&lt;Sale&gt; field in the Salesperson class? How else will you link the sales to the people who made them?
Might need a unique ID number for each salesperson to deal with people having the same name.
**So now I've got a way to sort the sales in the program method** class Program { static void Main(string[] args) { var sales = new List&lt;Sale&gt;(); sales.Add(new Sale() {saleDate = new DateTime(10), totalSales = 1}); var q = from s in sales group s by new { s.saleDate.Month, s.saleDate.Year } into g // Sorth by date and add to total sales select new { Month = String.Format("{0:MM/yy}", new DateTime(g.Key.Year, g.Key.Month, 1)), quantity = g.Sum(o =&gt; o.totalSales) }; } } }
Just started reinstalling Windows, so I don't have Visual Studio set up. I can guarantee you this won't compile. It should give you an idea where to start, though. public class Sale{ public DateTime saleDate { get; set; } public Decimal SaleAmount {get; set;} public Sale(){ saleDate = DateTime.Now.ToString(); } //Then the salesPerson class public class SalesPerson{ private string name; public List&lt;Sale&gt; sales; } //And finally the list in the main program public class Program{ static SaleHandler myHandler; static void Main(string[] args){ myHandler = new SaleHandler(); } static void AddSale(SalesPerson thePerson, Sale theSale){ myHandler.AddSale(thePerson, theSale) } static long GetSalesPerSalesPerson(SalesPerson thePerson){ //good luck //return something } static long GetTotalSales(){ //iterate over thePeople list in myHandler, call GetSalesPerSalesPerson &amp; do a count on their sales list //return something } static double AverageSales(){ //you can do this! //return double } static double AverageSalesPerSalesPerson(SalesPerson thePerson){ //you can do this too! //return double } } public class SaleHandler{ List&lt;SalesPerson&gt; thePeople; public SaleHandler(){ thePeople = new List&lt;SalesPerson&gt; } public void AddSale(SalesPerson thePerson, Sale theSale){ if(thePeople.Where(t =&gt; t.name == thePerson.name).toList().Count &gt; 0){ var aSale = new Sale(); var aPerson = thePeople.First(t=&gt; t.name == thePerson.name); aPerson.sales.Add(aSale); } } } I feel like I just did something horrible. My apologies for the LINQ. Do a little googling and see how LINQ to collections works.
Hosed up AddSale. Fixededed. Edit #3: Fixed again. public class SaleHandler{ List&lt;SalesPerson&gt; thePeople; public SaleHandler(){ thePeople = new List&lt;SalesPerson&gt; } public void AddSale(SalesPerson thePerson, Sale theSale){ if(thePeople.Where(t =&gt; t.name == thePerson.name).toList().Count == 0) thePeople.Add(thePerson); thePerson.sales.Add(theSale); } }
It's got to be something stupid I'm just missing. I keep getting SaleHander.thePeople is inaccessible due to it's protection level.
This is what happens when I code without an IDE.
Ah ok. I thought it was already public since SaleHandler is public, but I went and specified the list as public as well and it works now. public class SaleHandler { public List&lt;SalesPerson&gt; thePeople;
Right, it's a good idea for me to work out these little things until I get a good grip on them. Thanks so much for the help man, I would have been entirely lost otherwise...
No problem. Happy to help.
Could explain how I would do this or link me to some information on this.
Do you have any links to info on how to do this? I tried looking up AST but most seem to just be conceptual explanations.
I'm on mobile right now but I can give you a quick overview. LINQ is part of .NET. It essentially is extensions for querying objects (think SQL for objects). You could eliminate a bunch of loops and if statements by using LINQ. It will clean up your code and streamline the process. This isn't a full solution, more of something to consider in your code. 
The data grid is probably the least work for the functionality you are looking for. You can also use a repeater and put labels or text boxes in. If your data is dynamic width you can even do it pragmatically. Check out the OnItemDataBind events to hook it all up.
[StackOverflow](http://stackoverflow.com/questions/3575560/winforms-datagridview-alternative) discussion on the topic
Awesome. I didn't think to look up from the DataGridView direction! ListView will actually work for some of what I need.
Thanks, that's probably what I'll do for the stuff that needs to use live data, and probably ListView for the few others.
Started out great, ended with "Functional is better" taste. FP and OOP are *not* opposing concepts. They can intermingle and, as long as you put a little thought into your design, do so quite well.
I just want to shout out to /u/jakubgarfield. He's always on top of things, and contributes to this sub quite a bit! 
Agreed. I'm still learning linq actively, so I'm not 100% versed in the best practices. A unique id could be generated in the handler class on adding a sale, while also storing that id in a property in the salesperson. 
It looks like you're using WPF? #**If your source is an object collection:** public class SourceRow { string Column01 {get;set;} string Column02 {get;set;} string Column03 {get;set;} } &lt;DataGrid x:Name="grid"&gt; &lt;DataGrid.Columns&gt; &lt;DataGridTextColumn Header="First Column" Binding="{Binding Column01}"/&gt; &lt;DataGridTextColumn Header="Second Column" Binding="{Binding Column02}"/&gt; &lt;DataGridTextColumn Header="Third Column" Binding="{Binding Column03}"/&gt; &lt;/DataGrid.Columns&gt; &lt;/DataGrid&gt; CODE BEHIND: //collection is a List&lt;SourceRow&gt; or Array&lt;SourceRow&gt; or IEnumerable&lt;SourceRow&gt; ... etc grid.ItemsSource = collection; #**If your source is a 2D array:** That's a bit more complicated, unfortunately. Most of the answers I've seen involve translating the array into a collection of classes, which brings you back to the above solution. You can use LINQ to make it a little easier. Using the same DataGrid XAML definition: // collection is string[][] grid.ItemsSource = collection.Select(x =&gt; new{Column01=x[0], Column02=x[1], Column03=x[2]});
I would put both into two collections and use `IntersectsWith()`. I'm not at my computer so that might not be the right method name, but it's close.
You can use a regular expression. Replace all non-vowels with empty characters and count what's left. int vowelCount = Regex.Replace(word, @"[^aeiouAEIOU]", "").Length;
Of course, that has made it far more simpler. Thanks.
This code is grouping the results but there is no sort going on. I would recommend a few changes to the code. var q = from s in sales group s by new DateTime(s.saleDate.Year, s.saleDate.Month, 1) into g // Keep the key as a DateTime orderby g.Key // here's the sort select new { Month = g.Key.ToString("MM/yy"), // since the key is still a DateTime we can simplify writing out the month/year. quantity = g.Sum(o =&gt; o.totalSales) }; 
Can I suggest a different approach? Create a class to hold the contact information, then store that class in a Dictionary or List. For example (I've just keyed this in, not checked it, so there may be typos): public class ContactInfo { public string FirstName { get; set; } public string LastName { get; set; } public string PhoneNumber { get; set; } } Dictionary&lt;string, ContactInfo&gt; contacts = new Dictionary&lt;string, ContactInfo&gt;(); or List&lt;ContactInfo&gt; contacts = new List&lt;ContactInfo&gt;(); The thing with a Dictionary is that the key, in this case *string*, has to be unique. Here is a simple example on [using a Dictionary](http://www.dotnetperls.com/dictionary). Here is [one for a List](http://www.dotnetperls.com/list). One final comment. Why do you need to have a switch statement for the menu? Can't you just add an event handler to each of the menu items?
You probably want to make a "Contact" class that has a name and a number property. Then you would have one Contact array rather than two. You should also look at List&lt;T&gt; rather than array. List&lt;T&gt; does automatic re-sizing as well as a few other things that arrays don't do.
You should try and think about it in an [OOP](http://en.wikipedia.org/wiki/Object-oriented_programming) way. What you need to do is *add*, *remove* and *list* *contacts*. So you need a Contact class that holds information about a *name* and a *number*. class Contact { public string Name; public string Number; } You want a collection of these contacts that makes it easy for you to *add* and *remove* contacts. One good collection for this kind of thing is a List: List&lt;Contact&gt; contacts = new List&lt;Contact&gt;(); var bob = new Contact { Name = "Bob", Number = "123 4512345" }; contacts.Add(bob); contacts.Remove(bob); You probably want to [override ToString()](http://msdn.microsoft.com/en-us/library/ms173154.aspx) in the Contact class to make it easier to list the contacts in the console: foreach(var c in contacts) Console.WriteLine(c); 
Thanks for the reply, I think I follow to a certain extent, however we have only just started talking about methods and classes and haven't touched upon dictionaries or lists at all yet. I will look into them and see what I can learn. I am only using the switch statement for the menu because we have covered that so far and it worked well in a previous program so I was thinking of going along the same lines. I am not sure what you mean by an event handler? Thank you for your help.
Thanks for the comment. Are lists quite similar to arrays? I haven't yet looked into them but as I said in reply to another suggestion i'll get on it now. Thanks for helping.
Thanks for the reply the code example is really useful, So from your example I could replace var bob = new contact { name = "bob" } etc with name = Console.Writeline? and do the same for the number too? Thanks for helping.
Try a [HashSet](http://msdn.microsoft.com/en-us/library/bb359438.aspx) instead of an array: static int CountVowelsLINQy(string word) { HashSet&lt;char&gt; vowels = new HashSet&lt;char&gt; { 'a', 'e', 'i', 'o', 'u' }; return word.Count(c =&gt; vowels.Contains(c)); } If you really, really want to use an array then you just need to loop once more: static int CountVowels(string word) { char[] vowels = { 'a', 'e', 'i', 'o', 'u' }; int vowelQuantity = 0; for (int i = 0; i &lt; word.Length; i++) { for (int j = 0; j &lt; vowels.Length; j++) { if (word[i] == vowels[j]) { vowelQuantity++; break; } } } return vowelQuantity; }
Think of lists as arrays with additional features. List&lt;int&gt; numbersList = new List&lt;int&gt;(); Is basically the same as int[] numbersArray = new int[SIZE]; List initially has a size of 0 so you would need to add the elements to it. numbersList .add(5); numbersList .add(4); You can access the elements in the list in the same way that you can with arrays. int num = numbersList[1]; You can have a list of any type just like arrays.
No, try and read the link about overriding ToString(). What I meant was you do this: class Contact { public string Name; public string Number; public override string ToString() { return String.Format("Name: {0}, Number: {1}", Name, Number); } } Then if you do this: foreach(var c in contacts) Console.WriteLine(c); You get this in the console: Name: Bob, Number: 123 4512345 Name: John, Number: 643 523423
OK thanks that makes sense I'm going to get familiar with them and give it a go. Thanks.
Seriously, dont do that :) Hacking this problem with a regex won't teach you anything about working with collections and it is an inefficient solution anyway.
OK thank you. I'll read the link and try a few examples. 
List and array are pretty similar in the way you use them. The difference is that with an array when you size it to say, 12 places, when you need a 13th place you have to make a new array and copy the old array into the new one. With a list, it will automagically expand to give you more space. Also, lists are typed so when you declare a list (List&lt;int&gt; myList = new List&lt;int&gt;()) it will not allow you to put anything other than the type into it. That also means that when you get items back out of your list they are already of the declared type. 
It sounds like you are just getting your feet wet programming wise. There are several good responses already, so I won't add another. Just wanted to let you know that if you ever need help, I am available. I am a software engineer by trade, so I am sure I will be able to help. Send me a message and I will give you my email address.
word.Count(v =&gt; vowels.Contains(v))
While effective solutions, the responses I'm seeing are quite advanced for someone so new to programming. I really think you'd be better off taking smaller steps. Keeping it simple, I would suggest using string arrays for both. Remember that any number that will not be used in calculation is better stored as text. Also, you're on the right track with the parallel arrays, but rather than standard arrays, you would be better off with dynamic arrays (Lists). From here, you can save user input, then add it to your arrays. Ex: string phone = Console.Readline(); phoneList.Add(phone); Just make sure you have your Lists declared globally so that your loop doesn't mess them up (Check out msdn for List syntax).
You're on the right track. This approach will probably just be confusing at this point, as you're not likely to cover these concepts in class anytime soon. Edit: I assumed you were taking a class. If not, it's still quite a leap, but the sooner you come to think of things in terms of OOP, the better.
I think this is the best answer, but I'd suggest one correction: word.Count(v =&gt; vowels.Contains(Char.ToLower(v))) I think it's easier if the vowels collection only includes lower case characters, particularly if it is later extended to include extended vowels as well.
Alternatively... int vowelCount = Regex.Matches( word, "[aeiou]", RegexOptions.IgnoreCase ).Count;
Good correction, thanks. I agree with your point.
Not trying to be anal, but you should always avoid ToLower and ToUpper as a solution for case insensitive operations. Look at the answer on this thread: http://stackoverflow.com/questions/444798/case-insensitive-containsstring Years ago i had the same issue on a live system deployed on Turkish locale: I've learned my lesson since then. 
Dispatcher - http://msdn.microsoft.com/en-us/library/system.windows.threading.dispatcher.aspx The thread running the dispatcher will basically become a worker thread that you queue tasks from other threads. The creation will look something like this... Dispatcher dispatcher; Thread workerThread = new Thread(new ThreadStart( () =&gt; { dispatcher = System.Windows.Threading.Dispatcher.CurrentDispatcher; System.Windows.Threading.Dispatcher.Run(); })); In your case you would use invoke once the dispatcher thread is setup to run the code on the workerThread which will wait until the task is completed. dispatcher.Invoke(() =&gt; longRunningFunction()); 
If you are on .net 4.5 you can use Task in place of your thread and async/await to write the execution flow as if it was sequential (the compiler takes care of all the heavy lifting). Warning: there are several gotchas with async and await: they seem deceptively simple to use but you have to truly understand how they work or you can dig yourself in a hole very easily. You can start reading about it here: http://tech.pro/tutorial/1180/asynchronous-programming-in-c-using-async-and-await
Just the other day I was looking for a way to run the latest Mono on Linux and couldn't find packages anywhere for Ubuntu. Open SUSE has recent packages but even it doesn't have the latest. It looks to me that Xamarin has basically given up on Linux, maybe due to lack of demand.
this is exactly a use of the Task based pattern, as a previous user mentions. Google 'C# async task'. In this case, your worker thread will call an async method and await on the result. Also, you don't need .NET 4.5 - there's a NuGet package for .NET 4 for the async framework.
Yes, More info on MSDN for [TaskFactory.StartNew](http://msdn.microsoft.com/en-us/library/dd321439.aspx)
I appreciate the help, thank you.
What is even the point of having it done synchronously? Why not just do it in the calling thread???
watabit asked for a way to do it "as if" it is on the same thread which I assumed meant blocking but you could easily switch to the BeginInvoke function instead for async. 
upvoted. Even though it seems beyond what they have been taught so far, it's still the ideal method. I use this method myself, and also attach the data class instances (eg. ContactInfo) to the appropriate UI elements. Usually they become a Tag property of a ListViewItem or TreeViewNode.
Actually, I'm on my mobile, but from memory I'm fairly sure the answer is actually no. It schedules the task for execution. In fact, for very short running tasks it will complete synchronously (on the same thread) when you call .Wait(). You need to specify the (LongRunning) option, or the new thread scheduler to guarantee it runs on a different thread. The default is to pick a thread from the thread pool, which is of limited number. The TPL is heavily optimised, and there are many situations where (for performance) completes synchronously, in fact the corollary to LongRunning is ExecuteSynchronously. Also as a beginner I wouldn't recommend using TPL directly and instead use async/await that were added in .Net 4.5. The new language keywords were added to simplify the use of TPL and allow you to write asynchronous code pseudo-synchronously.
The problem is mixing APM code with Task code. When you start a new task, the Task object implements IAsyncResult. This task does not contain the state object you passed into Task.Factory.StartNew but an internal state object from the Task infrastructure. Even if it did, when you call ContinueWith, you return a completely different task than you originally passed your state object to. If you are using .Net 4.5, it is often easier to just use Task based service contracts as it's easy to tie yourself in knots using the APM model. One thing which I think is worth asking, why do you need to use Async? Is it to fulfill client code requirements? The code you are executing in your Task is synchronous, so you don't get any savings in your threadpool from calling async I/O code. In fact, with what you are doing, using Async will be slower, use more threads, more memory and more CPU. Did you know you can implement your service synchronously, and generate Async client code to use the service. So your client can use the Begin/End pattern, and the service be completely synchronous in implementation.
The recent Task class has made this paradigm simpler, as other people have commented. To do it from more fundamental principles you can probably get away with just using the Monitor class: class Program { private Object syncLock = new Object(); void WorkAsync() { Monitor.Enter(syncLock); try { // do async stuff... } finally { Monitor.Exit(syncLock); } } void Main() { WorkAsync(); if (!Monitor.Wait(syncLock, 1000)) throw new Exception("Thread timed out"); // it's good practice to have a time out on blocking method calls } } Using the Monitor class in the try/finally configuration is the same thing as wrapping code in a lock(syncLock) block, ie: void Work() { lock(syncLock) { // do stuff... } }
IMO async/await can bite you in the arse a lot harder than using TPL's Tasks. I've edited my commend above to specify long running. 
Agreed, however the OP was clearly new to TPL and async/await is targeted at such users. The main downsides of async/await are the reduced control and the cost of an async method call, meaning that the approach taken should consider stack depth/call count. I don't use async/await inside libraries where you should configure the scheduling but it is fine in library consumers.
~~Closing the oz-code site made another one appear. That's not a good sign.~~ This happened once but I can't make it happen again. Put it down to IE weirdness?
Hi! That's not supposed to happen, not at all! Could you tell me exactly what you did to have that happen?
I opened the oz-code site in a new tab in ie8 (that's all we're allowed to use at work) then closed the tab. When I closed the tab another ie window opened. When I closed that one *another* ie window opened. That one stayed dead when I closed it. I can try to do it again if you want?
I... would really appreciate it (frankly, I don't think we've tested it in IE8, I'll definitely check what's going on). Did the new tab point to oz-code.com, or any other website? Thanks!
I can't make it happen again so I've ammended my original comment. Yes it did point to oz-code.com each time. It looks kinda broken in IE8 but that's not surprising to me.
Advertising
Change your interface to simply be: public interface IControlChannelCallback { [...] [OperationContract] int DownloadFile(string filename, byte[] buffer, int position, int count); } Then in your service reference properties in your client, tick the box "Allow generation of asynchronous operations" and your generated client will have the Begin and End methods you have been using. The Sync/Async nature of the operation is transposed onto the wire, it's simply a message in one direction, followed by another message which comes back in the other direction which is associated with the first one. The Sync/Async nature is purely the programming model to communicate between the WCF infrastructure and your client/service. If you really want to write your code Async on the server, change your contract to be: public interface IControlChannelCallback { [...] [OperationContract] Task&lt;int&gt; DownloadFile(string filename, byte[] buffer, int position, int count); } And return your task from the method. This only works when using .Net 4.5 or later. 4.0 and earlier, you need to use the APM model or go synchronous.
What does the =&gt; symbol mean? Where would I learn more about it? Thanks!
I wrote up a pretty all inclusive ircbot that you could take a look at and possibly use parts of. https://github.com/uncled1023/IRCBot
This looks really awesome but sadly I can't use it at work =( stuck on VS 2008 for the foreseeable future 
Ancient as fuck. 
Not now that I've changed the comments!
ya company is cheap we have a couple lics for 2012 but my boss wont let use them till all our developers are covered we dont have an MSDN account which kinda blows would be nice to be able to upgrade every version 
I wouldn't worry about it *if* you can pinpoint the issue to IE8.
I'm PInvoking to some native code that has a requirement that it runs on another thread from some other native code I'm running.
In this case it is a part of a Lambda expression. For this I would recommend reading Jon Skeets "C# in Depth".
Uncle Bob has a intro written as a dialogue here: http://www.objectmentor.com/resources/articles/xpepisode.htm The examples are in Java though but that should hardly be a problem to understand for someone who knows C#.
Those little worms are your best friends.
I changed my code as you said would be the correct way if I really needed to use async and arranged this, exactly as you said: public Task&lt;int&gt; DownloadFile(string filename, byte[] buffer, int position, int count) { var task = Task&lt;int&gt;.Factory.StartNew(() =&gt; { using (var stream = File.OpenRead(filename)) { stream.Position = position; return stream.Read(buffer, 0, count); } }); return task; } private async void downloadToolStripMenuItem_Click(object sender, EventArgs e) { var state = new ServiceStreamReaderStateObject(); await _client.Callback.DownloadFile(@"E:\file.wmv", state.Buffer, 0, state.Buffer.Length); } But the buffer is still coming empty
What libraries?I'm just curious.
It's some of my company's internal code. It has a bunch of thread local state, so I can't run two instances on the same thread.
No, but it does look very much like an easy to use ILMerge. .Net Assemblies can contain multiple modules, though C# doesn't support them natively in language. This tool and ILMerge effectively use this feature to combine assemblies into a single one. It's actually not as hard as you might think to write your own code to do this with Mono.Cecil, or even easier to create a build task to call ILMerge to do this as part of your release build, making the process seamless and automatic. However, the cost in your time of doing it yourself is probably more than the cost of this product, so there's that.
You seem to be good at writing algorithms, but I would suggest you to read a bit about OOP and design patterns. In general, I think books are the best resource, followed by written online tutorials. I experience videos as annoying, as you don't see what you get at the beginning. You said you don't know about the meaning of your code structure. I suggest that you look up what methods or fields are, those are just names for things you obviously already use a lot. When you know them, you should learn what interesting things you can do with them via OOP. For any questions about .NET you can search the MSDN.
C# is great for desktop apps. But off late I've felt it's even more powerful for web apps, thanks to ASP.NET MVC4. Figure out the fundamentals of Web applications, learn to use databases, understand RESTful architecture, learn ASP.NET, learn to love JavaScript, learn web frameworks. Building web applications is arguably a clean modern way to solve pragmatic problems. 
Can you explain your question a little better please? What you are saying doesn't really make sense to me.
On a form I have a button that sets the textboxs data and updates my class properties. Once the form has been cleared I have use the value of the methods to update the textboxes again but I'm not sure how to using the get/set method
Thanks! ... but I'd prefer not to disable the feature ... I want to change the background/foreground colors, so I can still read them, even if I click on em ... yes, VS C#
ya our problem is we dont have enough lics to cover all of our developers so if he assigns work on a project and all the 2012+ devs are busy on other work he can't assign the work to the person with 2008 etc we are eventually planning to upgrade but we don't have a time frame as of yet need to convince upper management that the expense is worth it, and they don't like spending money, we are viewed as overhead since we don't directly result in profit 
The get and sets are not methods you call as other methods. Like this: http://pastebin.com/C9Fux86H
I owe you a beer! I got confused on that one ... unlike some others, it allows me to "set" both background and foreground ... however, the foreground color is completely ignored focusing more intently on it now, (with an otherwise black background), I set it to a very dark shade of gray ... feature works precisely as expected, now (albeit, still ignoring the foreground color, which would otherwise be even better, still) sure would be nice if they'd give an "edit color" in the right-click context menu ... then, as quick as ya see a color ya don't like, right-click, "edit color", boom!
I think, somewhere along the line, I chose "dark theme" ... and everything about the ui was dark ... everything! at some point, everything except the code changed to off-white ... that's fine otherwise, I explicitly set my colors for the more common items (*i.e. plain text, identifiers, keywords*) ... black background all in all, I can't really complain ... I went from 2005 to 2012, updating my major project from 2.0 to 3.5 ... recompiling and debugging ... in about half a day ... just a little fine tuning, now
 static bool Contains(string value, char search, StringComparison comparison) { return string.IndexOf(value, search, comparison) &gt;= 0; } static int CountVowels(string word) { return word.Count(letter =&gt; Contains("aeiou", letter, StringComparison.OrdinalIgnoreCase)); } // ---- OR ---- static int CountVowels(string word) { int count = 0 foreach(var letter in word) { if(Contains("aeiou", letter, StringComparison.OrdinalIgnoreCase)) count += 1; } return count; } It's kind of a cheap trick to use string.IndexOf to do a case-insensitive check, but it should work.
I have never been happy with the way VS handles theming and color customization. I've nearly given up on most of it. The "Dark" theme in VS2013 is quite nice though - I've only switched fonts in it so far.
Thanks a million for that! Its exactly what I have been trying to do but have been going around it the wrong way. Thanks to all who helped, it really did help!
[**@msdev**](https://twitter.com/msdev): &gt;[2013-10-23 16:00:01 UTC](https://twitter.com/msdev/status/393044144702373888) &gt;Why do Java developers wear glasses? Answer --&amp;gt; [*pic.twitter.com*](http://pbs.twimg.com/media/BXRfkRRIcAA6AQ7.png) [^[Imgur]](http://i.imgur.com/H7zFeWj.png) ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/1p2cca%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](http://www.reddit.com/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
I didn't go through all the code in detail to be honest (so there might be other issues) but your problem is that - as you suspected - you are locking on the wrong things. In your Raucher class you lock on the **_locker** variable, while your dealer class uses **this**. This means that your producer (Dealer) and your consumers (Raucher) are not locking the same resource hence you deadlock. The documentation on the [Monitor](http://msdn.microsoft.com/en-us/library/de0542zz.aspx) class is pretty clear and you might want to take a look at it. I feel that the code could also be cleaned a bit, but that would be pushing it too far for a reddit comment :) Good luck!
thanks for your replay, but I already got it fixed :) it was the issue with locker object ^^
Good! Sorry I was a bit late on this :)
It's also missing IEquatable&lt;T&gt;, which lets you avoid boxing.
Assuming you're reading a value from something like Textbox1.Text, you can do something like this: double myval; Double.TryParse(Textbox1.Text, out myval); if (myval &gt; 0 || myval &lt;= 100) return; /* invalid input error */ // do something with myval here // This should handle empty input since you're looking between 1-100. myval == 0 if Textbox1.Text is not a valid number or empty. 
It's not really clear exactly what you're having trouble with here. Can you post some code so we can see what you've already done?
Software development as a whole are going towards web applications. You can use your C# knowledge as a base for writing more complex websites that does calculations on the server, ie back-end. Check out ASP.NET MVC. There is an extreme lack of competent back-end developers in the world, so if you go that route you're set for life. /r/webdev /r/ASPNET 
Ideally, you should use a CustomValidator. At the simplest level, you could as well use an exception that extends ApplicationException. What exactly you should use greatly depends on what you're trying to validate and how.
You should check the "value" object in the setter. Check if it's correct, and if not throw an exception or set the value to something else. For preventing the property to be empty, set a default value in your constructor.
DataAnnotations [Range(1.0, 100.0)] public Double SomeVal {get;set;} Exceptions private Double someVal; public Double SomeVal { get { return someVal; } set { if(value &lt; 1 || value &gt; 100) throw new OutOfRangeException("Must be between 1 and 100"); someVal = value; } } 
Wait is this WPF? MVC? WinForm?
Judging from the other post that I responded to, I'm guessing that this is still WinForms. There's a few ways. * Handle validation on the fly inside change event handlers for each input (i.e. [TextChanged event](http://msdn.microsoft.com/en-us/library/system.windows.forms.control.textchanged\(v=vs.110\).aspx)) * Handle validation after each input has lost focus with the [LostFocus event](http://msdn.microsoft.com/en-us/library/system.windows.forms.control.lostfocus\(v=vs.110\).aspx) * Handle validation after the user clicks the "OK" button, but before you close the dialog. * Handle validation after returning the DialogResult to the calling form. But, the best way (IMO): 1) Put an [Error Provider](http://msdn.microsoft.com/en-us/library/system.windows.forms.errorprovider.aspx) on your form. For the examples, I'm going to say you have a TextBox named **txtName** and an error provider named **erpValidation**. 2) Set the [CausesValidation property](http://msdn.microsoft.com/en-us/library/system.windows.forms.control.causesvalidation.aspx) on your inputs to true. 3) Handle the [Validating event](http://msdn.microsoft.com/en-us/library/system.windows.forms.control.validating\(v=vs.110\).aspx) for each of your inputs. Set your error messages here, and make sure you cancel the validating event if there is an issue. private void txtName_Validating(object sender, System.ComponentModel.CancelEventArgs e) { var input = (TextBox)sender; if(input.Text == "Larry") { erpValidation.SetError(input, "Haha, nobodys name is Larry. You must be drunk."); e.Cancel = true; } } 4) Handle the [Validated event](http://msdn.microsoft.com/en-us/library/system.windows.forms.control.validated\(v=vs.110\).aspx) for each of your inputs. This is what happens when validation is successful, so this is where you clear any validation messages. Bonus: this example will actually work for *all* controls that are using validation, so you can set the handlers for each of them to the same method. private void Control_Validated(object sender, System.EventArgs e) { erpValidation.SetError(sender, ""); } 5) Check the errors *before* you set the DialogResult to OK. private void btnOk_Click(object sender, [arguments]) { if(erpValidation.GetError(txtName) != "") return; this.DialogResult = DialogResult.OK; this.Close(); } If you do all that, then your validation will be in place, and the user will get a nice little red * next to an input when there's a problem, and I think a tooltip with the issue was well.
just compile it..they probably don't provide linux builds anymore because it makes more sense to let distro do it. Cant be blamed if your distro is lazy though :)
"this" should work. What happened when you tried it? Also, you're calling EntityList.Remove() in the constructor... which shouldn't compile.
this refers to itself, so no problem there. The problem might be that you're trying to assign the result of EntityList.Remove() (which is a boolean) to this.EntityList, which is not a boolean. Also, Remove() take a parameter, which might be why another reason why it does not work.
Also, on a more "conventions"/advice topic (so slightly unrelated to your issue), you are calling EntityList.Remove() without checking if it's not null. Not a big issue per se, but... well... NullReferenceException are quite common in .net, even when you're sure that it will never be null. And then your naming convention is a bit unorthodox as you are mixing lowerCamelCase and UpperCamelCase for your parameters. I'd advise sticking to one casing (lowerCamelCase in that case), so you don't even have to bother using "this" (as it would become EntityList = entityList)
sry i forgot to add "this" in the thread. i deleted it from my code when it didnt work and forgot to add it back when made this post. ill fix it. anyway someone helped me! thanks anyway!
Thanks! I was sure it just returned the same List, just without that object. and i did give Remove() a parameter in my code (this), but i deleted it since it didnt work and forgot to put it back when i made the post.
Thanks but even though it seems a little tedious, i prefer using the keyword this. it's a lot easier to see, and it helps me understand my code a lot better.
You are initializing phoneDirectoryString at the beginning of the program when phoneDirectory is still empty. Items are added to the list just fine, but you don't see anything in the output because phoneDirectoryString was already initialized. Just remove phoneDirectoryString altogether and do the join in your case 3 of the switch with the current list contents.
Keep an eye on this link. I got some good feedback on Twitter and will be updating the content a bit to account for lessons learned by others who have shipped Source-Only packages
It's been a while since I've gone heavily into memory usage issues with C#, but have you made sure you've called .Dispose() on all IDisposable objects? Some hide the interface, so it might be necessary to dig into the documentation. Another issue I encountered was the garbage collector in .NET wasn't very aggressive unless you starting running low on memory. Everyone shrieks at the suggestion that you throw a GC.Collect() in your code, but it might be worth a try to see if that resolves your issue.
* Change "Task.Factory.StartNew(new Action(() =&gt;" to "Task.Factory.StartNew( () =&gt;" * Remove comparisons (==) comparing to true; it is redundant. * "var computerInfo = new Microsoft.VisualBasic.Devices.ComputerInfo();" * Avoid using Thread.Sleep(); Use Task.Delay or Timers if possible.
All of those seem like good suggestions and I plan on cleaning my code up soonish :-) But I don't seem how any of those would cause memory issues?
Still looking through the code :)
Ahh awesome! I just went through my code and removed all the "new action()" in my code. Not really sure why that was there in the first place. 
See below: private void btnSettings_Click(object sender, RoutedEventArgs e) { //Use this to open the settings page Settings SettingsForm = new Settings(this); SettingsForm.ShowDialog(); SettingsForm = null; // ADD THIS CODE } Event handlers keep created objects alive until the handler is de-registered. Since you can't really do that here, you should set your objects to null to allow for garbage collection. Source: (http://blogs.msdn.com/b/jgoldb/archive/2008/02/04/finding-memory-leaks-in-wpf-based-applications.aspx)
Ahh nice catch! I actually thought I had nulled out everything that needed to be. That one must have managed to slip by.
Agree with asdfman2000 -- steadily increasing memory usage is a sure sign of a memory leak. You should almost never have to invoke a GC collection cycle manually - the garbage collector in .net runtime is very good, unless you're off doing something "weird". To help you find all the places where you (likely) missed calling Dispose(), run FXCop, a static code analyzer from Microsoft. It's now built into Visual Studio (but the lower editions of VS.NET don't get all the features) http://msdn.microsoft.com/en-us/library/dd264939(v=vs.110).aspx Click "Run Code Analysis" from the Analyze menu. The error you're most concerned with is CA2000 -- this is the one relating to memory not being released. Note that it does sometimes give you false positives for CA2000, but it's still worthwhile to investigate what it flags just to make sure. 
Just ran a Code Analysis on my full solution and received 1 warning (CA2241) which was referencing a string.format() being used in my weather class. Other than that nothing else was returned. Thanks for showing me that option though, hadn't ever heard of it.
Weird mine didn't return that. However it makes sense since I'm never actually disposing it. But yes, I wouldn't think that would be the cause seeing as I only ever create it once
(http://stackoverflow.com/questions/8815895/why-is-thread-sleep-so-harmful) gives some good answers. 
[Google](https://www.google.com/search?newwindow=1&amp;q=avoid+thread.sleep) thread blocking, application messages are not pumped, timing issues.. (.NET 4.5 has Task.Delay designed for use with Tasks). If you Thread.Sleep in your UI thread, it will be unresponsive during those calls.
They're called in a separate thread so I didn't see the hold up in the UI, but there were definitely notable timing issues. Thanks for the advice, I'll fix my code once I can. 
I ran the performance explorer and it said cpuCounter.NextValue(); was creating a lot of memory, so I googled this: https://www.google.com/search?newwindow=1&amp;q=performancecounter.nextvalue+memory+leak a lead.. maybe?
In this particular example, the instance SettingsForm won't be kept alive due to the fact that it was created in a single activation context of the event handler which dies after the method btnSettings_Click returns, causing the variable to fall out of scope and get garbage collected. Now you still do have problems with event handlers causing memory leaks, but in your example the containing class of this method is the object that's kept in scope. Instead, make sure you de-register the event handler as required using: btnSettings.Click -= new RoutedEventHandler(btnSettings_Click)
Use a [memory profiler](http://stackoverflow.com/questions/399847/net-memory-profiling-tools).
Very interesting , will definitely see if that makes a difference. 
This. A profiler will immediately pinpoint things that would be exceedingly difficult to find manually.
Thanks for the response! My understanding of Tasks and using Task.Factory.StartNew() is that calling it multiple times still only restults in one task being ran? I've actually spam clicked refresh on the weather and no problems seem to occur. If I'm wrong please correct me though http://blogs.msdn.com/b/pfxteam/archive/2010/06/13/10024153.aspx
this is a WPF application. WPF windows don't implement IDisposable, so a using statement won't dispose of the window. If it were windows forms, you'd be absolutely right.
https://developers.facebook.com/ 
Go get yourself a copy of Code Complete by McConnell. Take time to really go through it. That book goes over things like creating functions and naming variables (not just the syntax, but the purpose and strategy). (Yes, there's a chapter on naming variables. Read it). After you've read that one, get a copy of Murach's Asp.Net book. Pay special attention to the database section. (Note, you can get a copy of sql express and sql management studio express for free). From there, it's either learning more about SQL (Murach also has a great book on that), or on the Web stack, such as HTML, CSS, and JavaScript. 
awesome, thanks. Yeah I got visual studio free from dreamspark (my wife is a student) and I think they offer SQL server 2012 as well as windows server 2012 free.
You want your WPF application to use the Windows Store Apps menu? I'm not aware of a native way to do that. In fact you shouldn't want to do that because desktop applications are expected to behave in a different way than Windows Store applications. Your users wouldn't know that they're supposed to look there for information. Anyway, if you're dead set on it you'll have to do it yourself. Or maybe someone's already built a library to do it.
Hm, seems like I forgot a few things in my question, my bad!!! I want that "menu" to behave kind of like this http://cdn2.tnwcdn.com/wp-content/blogs.dir/1/files/2013/02/IMG_2981-220x330.png Where it's "static" and doesn't move around. But I want it with a more, Windows 8 feel. What would be the best approach to this? I hope this gives a more clear explanation of what I'm going for.. Sorry if I was unclear in the first place. 
If you want your WPF desktop app to have a Windows 8 feel, I can sincerely recommend [Modern UI for WPF](http://mui.codeplex.com/).
C# is not Java
Try just using "id" instead of "gallery" or "galleryid" and the id should get passed as a parameter to your controller.
You could do that, but looking at OPs photoit seems to be missing many of the qualities of a WPF menu control. It literally looks like a simple stack of buttons. So sure, you could restyle a menu control but I think a stack panel of buttons is simpler.
Use a TabControl with TabStripPlacement="Left" &lt;Grid&gt; &lt;TabControl TabStripPlacement="Left"&gt; &lt;TabItem Header="Item 1"&gt; &lt;Grid&gt; &lt;Label Content="Item 1 Content Here" /&gt; &lt;/Grid&gt; &lt;/TabItem&gt; &lt;TabItem Header="Item 2"&gt; &lt;Grid&gt; &lt;Label Content="Item 2 Content Here" /&gt; &lt;/Grid&gt; &lt;/TabItem&gt; &lt;TabItem Header="Item 3"&gt; &lt;Grid&gt; &lt;Label Content="Item 3 Content Here" /&gt; &lt;/Grid&gt; &lt;/TabItem&gt; &lt;/TabControl&gt; &lt;/Grid&gt; Using [MahApps.Metro](http://mahapps.com/MahApps.Metro/) looks like this: http://i.imgur.com/xPi9j1M.png
what?
Wait, so I need to de-register that event? Even if at some point it will be used again?
No, only de-register it when you're not going to use it anymore. If you're going to use it again, keep it registered. De-registering it will allow the object where the event handler method lives to fall out of scope and get garbage collected even when the event source is still in scope.
Ahh gotcha, that's what I thought. Shouldn't have a problem with that in my code anywhere. Thanks for clearing that up
The reason you cannot access your gallery argument in code-behind using `RouteData.Values[]` is because you haven't sent it any values. Yes, they appear on the querystring, but you've not sent those values via the routing mechanism. Map the route like this: routes.MapPageRoute("AbstractPainting", "Abstract-Painting", "~/portfolio/default.aspx",null, new RouteValueDictionary{{"gallery"="1"}}); I'm not sure at the moment, but I suspect you can use an anonymous object like `new {gallery=1}` as the last argument. Try it; perhaps it will work, perhaps not.
That's my same understanding of tasks. However, when you have a while(true) loop inside the task, obviously the task will never stop. So a new task was being created each time you entered the RightMouseButtonUp listener. I had only ran into an issue with right-clicking the weather location. After investigating, it just looked like additional (infinite loop tasks) were being created, when the real intention was to simply update the data one-time and wait for the Thread.Sleep(90000) to finish before updating again. When I tested it, I licked the refresh weather listener ~100 times and noticed a large difference in performance. Both with updating the GUI components and trying to get any other action to occur.
Are you using .NET 4.5 or something lower? The solution would be different depending on your version of .NET. For .NET 4.5, I believe there is a metro style already applied to WPF controls by default. For .NET 4.0 and below, using a third party library (I enjoy using Metro: http://mui.codeplex.com/), may be your best bet. As you wont have to recreate all of the default component styles / behaviors.
Interesting! Gonna implement some of your suggestions in a bit 
check out pluralsight. Most (all?) of the courses have projects that go along with them and is totally worth the subscription cost.
I'm sure you know this, but that point applies to *all* methods. Extension methods are just a special form of static method and both static + instance methods can use generics and constraints.
thanks... i solved it, i forgot that i messed with hosts file... :( and that was all that i took to get it working again... ("exotic behaviour" my ass! LOL) 
Personally, I just learned it from setting myself some simple projects and googling how to do it. I'm awful with reading to learn. I'm better just getting stuck in to something. Start with 'hello world' and take it from there.
check out one of these: http://mahapps.com/MahApps.Metro/ http://mui.codeplex.com/
Seconded. I have my current job thanks to Scott Allen's fantastic c#/asp.net tutorials. I was well on my way in learning by text tutorials, but his video tutorials are top notch.
Thirded, both for Pluralsight and for Scott Allen. Plus they have other excellent stuff on VS2013, VS2012, .NET in general, etc.
Have you ever learnt another programming language, or is this your first? Are you familiar with object oriented programming?
Came here to say this. Even as a more senior developer, I find it invaluable and well worth the $30 monthly expense for the basic subscription. When I want to learn a new language, new javascript framework, etc., I go check if there is a pluralsight course first. The courses are usually pretty easy to follow and most will walk you through building out an example application to leverage the tools that you'll be learning int he course. Once you understand the basics of the language, my other suggestion would be to pick an ambitious project (a desktop app, web app, etc). Select some basic features, some mid level features, and some advanced features, then make that project your pet and work it as much as you can. Someone showing you code and explaining why it works is great and helpful, but the real lessons in how to write code come from trying to figure why the 15 lines of code you just wrote arent working, or why your database call isnt returning any results. Debugging is the ultimate learning tool.
The post has been updated, as promised,
Ive programmed in COBOL RPG and Vax Basic. This will be my first serious venture into an OOL. Ive read a fair amount on C# and it makes alot of sense but sometime when looking at the code I have difficulties reading it, alot of commands added together, so I thinking its an experience issue. Which I assume I can help with some homework.
What exactly are you having trouble with? What does your code look like so far? The question you've asked is very broad, and has been answered many times before on the internet. More specific questions would clarify what exactly you need help with.
Why do so many of the polymorphism examples involve animals? I've seen dogs, deer, fleas, dinosaurs, etc. But it's rare to see an example of something you actually would use in a project. How about classes like SQLDAL, XMLDAL, etc., that inherit from an abstract class called DAL. And how about methods such as GetCustomerByID and GetCustomersByCountry? To start with, create a central function that returns an object of type DAL which contains an if statement to instantiate it with one of the other types. That gives you the ability to call GetCustomersByID without knowing or caring what the database is that is providing the data. 
Resharper is awesome... We use Unity for DI/IoC stuff.
I'll have to let someone fill you in on the details, but Resharper is *fantastic*, it's got a frankly awesome variety of tools that makes working in VS unbelievably fun. Refactoring is easy, the autocomplete is more terse, variable naming rules, style suggestions, there's so much more. Admittedly, I've only got a few years of experience with C# so maybe there's more tools like it, but my god, it's awesome. The next version is supposed to have some of the capability but for C++ as well. That's something I'll have to believe it when I see it. 
Just the first three that I thought of: * **Entity Framework** - Pretty much the standard for small data-driven apps. * **Nuget Package Manager** - Automatic updates? Yes please. * **Resharper** - My productivity has pretty much doubled since I started using this. 
ReSharper, NUnit and NSubstitute. Other than that I try to keep dependencies to a minimum.
Dapper, light and fast data access layer.
Agreed on Resharper. It is the only tool I miss when I'm coding at home. I've tried unity and castle windsor for IoC and I find castle windsor slightly easier to set up. Obviously the setup is only a one time cost. IIRC there's an OS project to create a common interface for the various containers to inherit so you can swap them in and out easily. I don't know if it ever got off the ground though.
Yeah, reading about it is good, but practice practice practice. What I love about OOP is that it's pretty much how people think (or at least how I think). Whenever I'm stuck, I try to think how I would do it in my head, and usually it's something similar. Google helps a lot too (stackoverflow most of the time tho). Once you get your head around it, you'll do just find. Also, Visual Studio helps you out a lot of times. I think the best you can do is start working on a project by yourself or with someone on the similar level in C# as you. That helps a LOT. You get to learn new stuff every single time, and being forced to keep up with the other person. That's all that came to my mind at the moment. Sorry for late answer. Have fun in C#. 
I have doubts about anyone who doesn't answer this question with: Beyond Compare http://www.scootersoftware.com/
They had a sale last year around Christmas (I think) where it was significantly cheaper, I think a C# personal license was around $35. Hopefully they have similar offer this year! I just found the announcement. It was only a 24 hour sale, but was 75% off: [24 Hour Sale](http://blog.jetbrains.com/blog/2012/12/20/jetbrains-end-of-the-world-clearance-sale-24-hours-only/)
Constructive feedback greatly appreciated, especially if I got anything wrong . . . 
**ReSharper**, which must have about tripled my productivity. **PostSharp**, because it's amazing just how many repetitive coding tasks I could stuff into aspects and handle automagically once I started doing it. That, and I have a lot of custom constraints for checking that my implementations of common patterns are not only correct but also consistent. **dotPeek**, because third-party library problems get much, much simpler with a good decompiler. Apart from that, I've been stuffing commonly-used idioms, handy helper functions, and other particularly useful bits of code written and/or cribbed from elsewhere into a personal reference assembly for years, now. Wouldn't start coding without that, for sure.
This is the really best updating where users would like to use.
You also can get out of memory errors when you request too many handles. (System.Drawing calls can be really bad for this, being based on GDI+)
Damn, I was visiting my step family, so I missed it. Let's hope they will do it again. For that price I would not hesitate one millisecond. 
Oh god, yes. Beyond Compare is the best file/directory diff visualizer I've used. We use Unity Game Engine at my job, and it's absolutely essential for merging branches.
Oh, awesome. I'll check it out. Thanks!
&gt; Apart from that, I've been stuffing commonly-used idioms, handy helper functions, and other particularly useful bits of code written and/or cribbed from elsewhere into a personal reference assembly for years, now. Wouldn't start coding without that, for sure. Oh, that's a great idea. I do a lot of game-dev related work, so lots of the useful bits of code I write have different graphics-library/game-dev-framework dependencies. Still, I imagine I could start setting aside different utility libraries for different frameworks.
That's cute, but I don't see a huge difference between DateTime.Now - 1.Weeks() - 3.Days() + 14.Minutes(); and DateTime.Now.AddDays(-10).AddMinutes(14); and I'd rather not have intellisense popping up with weeks, days, minutes, etc when I'm working with integers.
Most of mine's in one assembly because it depends either on just core framework stuff or else on extensions that I use absolutely everywhere (Reactive Extensions - hey, I should probably have mentioned Reactive Extensions up above, too - for example), and I don't want to have _too_ many dependencies of my own, but I do have a couple of secondary assemblies for specific things with dependencies I don't want to carry around everywhere like, say, all my WPF utility code, or my Entity Framework utility code, and suchlike. If I were starting over again right from today, I'd probably take a bunch of the stuff in my main assembly and put it in a Portable Class Library, anticipating using it in Windows 8 apps, etc., but it's a bit late now. Maybe I'll refactor it one of these days.
I've never heard a problem described as "pragmatic"
Lack of solving them I guess.
Dump log4net and use NLog. Don't get me wrong, log4net is great, but it is still in its heart a port of a very old version of log4j - outdated and clunky. For example, how do you get asynchronous logging in log4net? You either implement your own appender or use a dubious 3rd-party library. How do you get asynchronous logging in NLog? You add async="true" to configuration...
Resharper prices **ಠ_ಠ** 
Why did you choose log4net over say ETW? Myself I've not really seen the advantage of Log4Net, it doesn't offer much over Trace (in fact it limits a lot of debugging options that use the trace infrastructure, such as WPF). It also doesn't help things if you want to log in relation to DI/IoC. ie: I have many TransformForNextSystemBase instances, it is useful to know what the containing object is.
CodeMaid VS add in. Clean code formatting + complexity analysis via Spade. OzCode beta VS add in. Search datasets in real time + lots of other debug goodies.
Totally worth it. Plus, who knows, you may end up authoring some windows 8 phone apps and make back on your investment.
Just to add a few * VsVim --text editor extension * AllMargins &amp; CaretMargin --code visualization * CodeMaid -- code cleanup, the spade tool for visualization 
LOL. Just saying it's usually the solutions that fit the definition
Yes, it is mandatory in C#. This is different from C/C++, where cases could "fall through" to the following block. You can still have multiple cases that apply to the same block, but each block must be terminated with a `break;` - for example: switch (myVar) { case 1: case 2: some_code(); break; // Mandatory - no fall-through case 3: some_other_code(); break; // Mandatory - no fall-through default: default_code(); break; } (Or, as /u/centurijon pointed out, return also works instead of break - any control flow that exits the switch entirely.)
This should not have been downvoted. People shouldn't be discouraged from figuring out simple things on their own if they're able to, and suggesting that you learn things on your own isn't wrong in any way. 
#Formatted private void ValideerPersoon2() { String sUserName = txtUsername.Text; switch (sUserName) { case “Ivo": MessageBoxShow("Welcome, Ivo! How are you today?"); imgPerson.Source = new Bitmaplmage(new Uri(AppDomain.CurrentDomain.BaseDirectory + “idp.jpg")); break; case “Bieke”: MessageBoxShow("Welcome, Bieke! How are you today?"); imgPerson.Source = new Bitmaplmage(new Uri(AppDomain.CurrentDomain.BaseDirectory + “bms.jpg")); break; default: MessageBox.Show(”Sorry, I don't recognize you.”); this.Close(); break; } } Yes and no. It is possible to flow from one case statement into the next if there is no break. However, you can use other statements (like return) to exit the switch statement, and take advantage of not using break. ex: private string GetWelcomeMessage(string name) { switch(name) { case "Ivo": case "Bieke": return string.Format("Welcome, {0}! How are you today?", name); default: return "Sorry, I don't recognize you."; } }
Thanks! Given, my answer was short and could have given a bit more explanation, but I can see how some people might have thought it was rude. One of my favorite things about programming is that you can very frequently answer your own question just by giving your idea a shot and seeing if it works. Just gotta explore on your own!
I'm currently learning C# and this book is my first text resource. It's a great primer so far, about 75% through it. 
i've got a similar list to yours, but now i write all my tests with XBehave, FluentAssertions and FakeitEasy. My test code reads like poetry!
Check out Splunk. There is no better product than Splunk, but I don't know if they have a free version.
Resharper value &gt; Resharper price
Besides the required love for Resharper, these are my 'go to' tools. * Subversion/TortoiseSVN (since I don't want to pay for a private GitHub repo) * Visual SVN plug-in for Visual Studio * DotCover * MSTest I need to spend some time with the ORMs and DI tools. I looked at several of them when they first came out, and wasn't overly impressed. So I stuck with my own libraries that I kept using from project to project. However, I expect they're much better now and deserve a second look.
OK, you may stop being the retard now http://stackoverflow.com/questions/10859173/how-to-disable-all-caps-menu-titles-in-visual-studio or http://blogs.msdn.com/b/zainnab/archive/2012/06/14/turn-off-the-uppercase-menu-in-visual-studio-2012.aspx p.s. have you heard of google? It helps you solve problems (even retarded ones).
Haha, okay, I'll check it out. Thanks for the suggestion.
Hadn't seen XBehave before. Looks cool. The reason I'm trying out SpecFlow is because the way they break out the Gherkin file. We've found a couple tools at work that can parse that file and build it into our documentation that the junior devs, business experts, etc. can look at. Not sure if it's going to stay but it's something we're trying for now.
64bit does help a lot, at least in blowing out the virtual address space. You'll still swap if you go trying to gobble up massive contiguous blocks though.
[Dapper](https://code.google.com/p/dapper-dot-net/) for fast database access. [NDesk.Options](http://www.ndesk.org/Options) for command line argument parsing. [NUnit](http://www.nunit.org/) for unit testing. [Microsoft.VisualBasic.FileIO.TextFieldParser](http://msdn.microsoft.com/en-us/library/microsoft.visualbasic.fileio.textfieldparser%28v=vs.110%29.aspx) for parsing csv files. It's in the framework but relatively few people know about it because it's buried in the Microsoft.VisualBasic namespace, which is perfectly usable from C#. [NLog](http://nlog-project.org/) for logging. [Common.Logging](http://netcommon.sourceforge.net/) for a logging abstraction. [Json.NET](http://james.newtonking.com/json) for serializing and deserializing JSON. [MiscUtil](http://www.yoda.arachsys.com/csharp/miscutil/) for some useful classes like a ProjectionComparer that lets you create an IComparer&lt;T&gt; with just a lambda instead of writing a full class that implements IComparer&lt;T&gt;. [dbsc](https://github.com/LHCGreg/dbsc) for version-controlling databases and deploying database updates. I may be biased because I am the author, but at work we really can't live without it. [Excel DNA](https://exceldna.codeplex.com/) for writing Excel extensions in C#. No more VBA, no more writing a .NET dll that needs to be COM registered and writing VBA that calls the .NET dll. You can code and debug in Visual Studio, use your favorite source control, and xcopy deploy a .xll file + some .NET dlls, or pack it all into one .xll file. You can write custom ribbon menus, functions that are callable from cell formulas, and macros. [MiniProfiler](http://miniprofiler.com/) for profiling web pages and ajax calls, including database queries. [NodaTime](http://nodatime.org/) for a better date and time API than the built-in classes.
Jquery
This is something everyone goes on about eg with SpecFlow and Greg Young's Simple.Testing, the idea that you generate human readable test results that business analysts and product owners can sign off on. I liked the idea more than i did the implementation, in practice nobody gave a shit about reading my spec output. 
Viemu for vim key bindings in VS and SQL Server Management Studio 
If you specify the view name, you can also specify the master page the view will render with in the controller. &gt;return View("Details", "_CustomerALayout", model); You can then work out the master page to use programatically for each request. The downside to this is that it has to be implemented for every route in every controller.
For my suggestion, I am going to respond as though you are providing the application to customera and then to customerb in separate environments. Create an abstract class where the methods can be overridden on a customer specific basis. Then, you create sub-projects which build a dll which can be used as a plugin. The sub-projects should override the necessary methods in the base abstract class. Then, when you publish to each environment you can utilize the customer specific code. If you'd like a more in depth example or better explanation I'd be happy to offer up more detail. 
I'm a total newbie to MVC so constructive feedback isn't in my pay grade. Just wanted to say thank you for the time you put into these posts!
Why not just include different CSS/images in the two web applications? Then you aren't deploying one customers design to the other. Edit: if you really want to do it that way you could have an AppSetting like "ThemedContentBase" and prepend that to urls of all CSS/images that will be themed. The app setting could possibly change a cdn in the future. 
p4merge for file diffing?
This article was surprisingly informative. Too bad there is no way to make normal humans understand any of it. As a side note, his reference to extended and expanded memory takes me back to reading my 'Undocumented DOS' book and how reading the parts on EMS and XMS a good dozen times helped not at all :)
I wouldn't do this at all, it's kludgy at best, and sloppy and unprofessional at worst. What you want to do is create a single app that has a single generic set of images and layouts. Then for each customer, you deploy, and part of the deploy is to copy over the customer specific resources. This method scales to any number of customers.
[Git Source Control Provider](https://github.com/yysun/Git-Source-Control-Provider) - Git source control in Visual Studio. [Posh-Git](https://github.com/dahlbyk/posh-git) - PowerShell git integration. [Meld](http://meldmerge.org/) [NCrunch](http://www.ncrunch.net/) - Excellent unit-test runner that continuously runs unit-tests for changed code and gives test results on the fly in the margin.
In what cities are you looking for training?
Cool man, I've always been interested in SoundClouds API. I'll take a look at it tomorrow for sure!
Little late, but I would setup my css links in the Layout page like this: src="/css/@user.Customer/default.css" Based on the user logged in, it would pull the right css file. Good luck.
It's definitely one of my favorite API's, super easy to work with.
Yeah that was my first thought, but it feels a bit pre MVC. I was hoping for some new pattern. Anyway, one huge advantage is that I would be able to run selected customer skin/brand i VS. Would speed up the process a lot compared to deploying for final result.
Hey, I am kind of interested in the book. I have read head first c#, do you think this is an appropriate second book or should I read a more involved/professional c# book before delving into these topics? If you have no opinion that's ok too.
Hey, thanks for showing interest! I'm biased of course but I'll try to give you a good answer! "Head First C#" is great and if you read the latest edition there are some topics that intersect with what I've written about in my book. However, the good part (and the main reason for the title) is that you have a 'smorgasbord' of topics to choose from. There are a lot of different, independent chapters that talk about different problems and different concepts. Such as parallel programming, asynchronous programming, inversion of control, how to improve your code quality and much more. With that said, I definitely think you will find good value in reading this after "Head First C#", even with the topics that do intersect their written from a different point of view. I've heard from both beginners and experienced programmers that got different things out of the book and found that it was of great value to them. If you do get the book, I'd be happy to hear what you think about it!
This is actually pretty awesome. Fast internet but a below-par PC, or just want to spin up some clean VM's for development? Here you go. An aside: Is the use of those images in Azure free, or do I need licenses, some subscription, or...?
You need an MSDN subscription linked with your Azure I believe.
There's a delicate balance going on here. He's got a Surface 2+TC and an MSDN subscription. (Surface 2)$450 + (Type Cover 2)$130 + (MSDN VS 1st year)$1200 = $1780 He could have gone with a Pro 2+TC, a retail copy of VS, and Office 365. (Pro 2)$900 + (Type Cover 2)$130 + (VS)$700 + (Office)$100 = $1830 Both of those numbers can go up depending on the MSDN subscription type and the model of Pro 2/VS version... but at the end of the day Microsoft priced out these two options fairly well. Its rather surprising.
A caveat to this is the annual renewal for the MSDN is at least $800... and that far outweighs the 365 renewal of $100. But really an MSDN subscription is its own reward.
Need MSDN but can't afford it? Register a business name (usually about $12 bucks at your county registrar) and sign up for [Microsoft BizSpark](http://www.microsoft.com/bizspark/). Hooray, free MSDN to help get your business up and running. 
Why not go straight to the source http://msdn.microsoft.com/en-us/library/aa288436(v=vs.71).aspx ?
If you know how to program already, the C# 5.0 Pocket Reference by O'Reilly is really good to have on hand.
Anybody know if remote desktop is feasible for playing some non-graphic intensive games like Paradox Interactive games? (EUIV, Victoria 2, etc.)
why do you want to add office to the pro 2 cost? Most developers can get by with google docs or heck even wordpad 
...why there? You could just host it locally on a small VM/server. You probably don't even need Windows for most stuff - if you're a keyboard commando like me, I'm 100% satisfied with tmux, vim, and mono.
He added Office on the Pro because the RT comes with Office for free. If you already had Office 365 on fewer than five PCs, it would be free for you too (assuming 365 Home Premium). 
Depending on what you want to do with it, you might want to consider taking a .Net course or tutorials. I found that learning the basics of the programming language and the basics of the framework/IDE was more productive and applicable for me (since most of the work I do is building CRUD applications using Visual Studio) than focusing on just the language. I was fortunate that a coworker who is a very experienced programmer was teaching a .Net class and it was convenient for me to take it. Just knowing the tricks and quirks of the IDE and watching someone experienced walk through certain setups, etc... was helpful to me. For me, that was enough to get me started in an entry level job and from there I can learn more from coworkers and projects and from hobby stuff I built as well.
Sweet. Microsoft video that can't play on Windows Phone. 
Minus Scott Hanselman? Haha. 
I added office since his work conditions included MS Outlook. (edit: "getting by" is not something I strive for in my professional environment. Office's track record is simply too proven to go with anything else.)
The Surface 2 runs Windows RT on an ARM Processor. It has no VM capabilities and does not allow other OS's to be installed.
The Linux box still needs to be remote. That would still cost you money (for good rack space), or a home machine. You asked why he couldn't run everything locally and I answered that.
s/locally/in your home
I would suggest Pluralsight's courses on .NET/C#. One month @ $29.99 packs more bang for the buck then damn near any other learning method (in my humble, yet experienced opinion.) http://pluralsight.com/training
BisSpark
I would love to have automatic implementation of INotifyPropertyChanged, but 600 euros? Ouch.
Both that post and your name are adorable.
Or just pay by the hour.
I really needed this. Thanks for posting.
[Dotnetperls.com](http://www.dotnetperls.com/) is a great resource with nice examples, a good search feature and not "too much" information. Give it a peek!
The first half of this talk was invaluable to my current project and I will be making code changes on Monday. The second half was interesting, but lost me a little! Thanks for posting :-)
I use a LINQPad script for this. I enter all the properties I need and it copies the properties with INotiftyPropertyChange implemented to the clipboard as plain text. Saves me incalculable amounts of tedium!
This is by far the easiest and quickest way to get started. It's not free, but I use this as a resource for many things, and I've been writing code professionally for C# before the C# beta.
its sad that windows device makers havent fixed a problem that has been fixed on apple hardware for a while
Don't learn a programming language. Learn how to program.
Too much C# to remember, but my favorite is one which broke the compiler: http://share.linqpad.net/3xrow3.linq. The exception should not be thrown in this code, but it is. [The bug is documented on StackOverflow](http://stackoverflow.com/questions/5188671/c-sharp-implicit-conversion-to-system-double-with-a-nullable-struct-via-compiler) with an interesting commentary by Eric Lippert.
Probably my [pointer based stack](https://gist.github.com/Measter/3435785#file-pointerstack-cs).
Didn't write it, but I used dotPeek to reverse engineer a library that had been written in F# back into C#. We no longer had the F# source, and no one left at the company knows the language anyway. It's absolutely unmaintainable. But it compiles and works... 
Close, it's the C# compiler which broke, the IL is generated into x86 faithfully.
I once saw this: var myValue = null as string; All so they could use var... :/
I have a coworker who once wrote a 200 line if-statement. I'm not saying that his code within the if was 200 lines, his if statement was actually 200 lines. if(cond1 &amp;&amp; cond2 || (cond3 || cond4) &amp;&amp; cond5...ad nauseum) It usually failed and was a nightmare to debug. I had another coworker who had a fabled "God Button". We write a lot of .NET and often write little test and maintenance pages. We use these on multiple sites. He decided to write a button that he can put onto any page and just adds more code to figure out its current context, then execute what he wants. It's now up to about 10000 lines of unmanageable, unmaintainable code that only works in certain ways on certain sites during certain conditions. All you have to do is press the button. He used it on Production once...brought down two live sites. 
Ow.
&gt; pointer based stack What were the performance differences? 
You wanted bad code, but this is insane in the fact that it launched an entire open source product that has changed Web API. It isn't mine FYI. Here's the problem background : AttributeRouting needs to search types in your assembly to see if they should have routes mapped to them, there is all different types of configuration, context and precedence. Here's the secret sauce of the whole project--You should be able to read it. https://github.com/mccalltd/AttributeRouting/blob/master/src/AttributeRouting/Framework/AttributeReflector.cs#L32 I found it because I had to debug the project to figure out why a certain configuration was failing. Fizzbuzz in one line of LINQ http://derreckdean.wordpress.com/2011/05/09/fizzbuzz-in-one-line-c-linq/ 
It gets even simpler if you pay attention to casing and pluralization.
In order to learn LINQ, i wrote a single query that solved a sudoku. Highly inefficient for the workstations of those days, even visual studio went catatonic while opening it. Used to take 20-40secs on a P4 to solve the sudoku. For something that i have written professionally, i have recently written a well documented class with numerous 10-20 line LINQs, which i am sure would be a reason for a headache to someone who would have to maintain it in the future. So i would have to refactor, and rewrite the entire class.
var uses whatever given data type (implicit data type), so it would be 'string' in the above example. (Although, `as` throws exceptions if it throws an exception so, omg wtf) But srsly, why cast null as string, especially via the `as` keyword? is (string)null not good enough?
Maybe naming the object in the list Student, and the argument student would have been easier, especially because the word "get" implies you're doing a method of some kind. List&lt;Student&gt; getStudents = this.GetStudents(student);
My skills of deduction tell me that the author quite possibly wanted to retrieve the list of students, am I correct in my assumption?
[Here](http://www.reddit.com/r/csharp/comments/ykpc0/ive_done_something_horrific_a_pointer_based_stack/c5xi5hy) are the results of the benchmark I ran.
I second the CLR via C#. I picked it up when someone said you couldn't be a true C# developer without reading it and I think I might agree now. Crazy informative book on the internal workings of the CLR and C#.
`List&lt;Student&gt; students = this.GetStudents(student);` Gotta be complete then.
Agree with CLR via C#, some of it is really interesting.
I have this one too and really like it.
He still has a job?
Enlighten me, what is the SEO downsides to an SPA?
As an F# dev, I'm curious. Can you provide any more information, e.g. who wrote it? 
Because the content is pretty much entirely created on the client via javascript and AJAX calls, there just isn't much there to index.
Effective C# (Wagner) and More Effective C# (also Wagner)
I also [found a solution](http://corejavadeveloperexamples.blogspot.com/2012/05/bank-ocr-java-example.html) to this specific prompt in Java, though I have no experience in that language
I think I went from a good developer to a great one due to CLR via C#. Is C# in depth really worth it after reading CLR via?
To be quite honest though, `var myValue = null as string;` is pretty clever (albeit terrible coding practice). I've certainly never thought of that, but maybe that's a good thing.
Assuming you have an abstract class `Pet`, and you want to have a collection of dogs, cats, fish, etc., all which inherit from `Pet`, you would do: Pet[] pets = new Pet[] { new Dog(), new Cat(), new Fish(), ... }; Here's a quick example: class PolymorphsimExample { static void Main(string[] args) { Pet[] pets = new Pet[] { new Dog(), new Cat() }; foreach (Pet pet in pets) pet.Speak(); Console.ReadLine(); } } abstract class Pet { public abstract void Speak(); } class Dog : Pet { public Dog() { } public override void Speak() { Console.WriteLine("Woof"); } } class Cat : Pet { public Cat() { } public override void Speak() { Console.WriteLine("Meow"); } } The output would be: Woof Meow
Beneficial if their main goal is to bring in more hobbyists. Open source vs free would mean the possibility of running Visual Studio on Mac or Linux.
if you're a newbie then Head First C# is my recommendation.
Like MonoDevelop?
Yes, but better.
Have you tried [Expresso](http://www.ultrapico.com/expresso.htm)?
Looking at that code just to try and explain it for you...you're not parsing the entire number with a regex. The number of backreferences and lookaheads and such involved to parse the entire thing with a regex would be ungodly levels of painful. Instead, here's what that (not very efficient) code does: Rather than using Regex to match anything, it's just using a regex to split the string into groups of three characters. (see the following lines:) &gt; String bankAcctRegEx = ".{3}"; &gt; Pattern actPattern = Pattern.compile(bankAcctRegEx); Then, it essentially re-combines the first, tenth, and nineteeth groups back together to get a string for the first number, second, eleventh, and twentieth groups to get a string containing the second number, and so on. Finally, in the Bank OCR constants section is defines constants such as String OCR_ONE = " | | "; which it compares to the strings it created above to figure out the numbers. This works. It's also pretty inefficient. There's no reason to use a regex just to split up the string into chucks of three characters. There's also a LOT of code there for a fairly simple task, but that's also just kind of what Java does. Anyway, I DO think you'll need to hardcode in constants for the representation of each character...but I don't think a Regex is the best tool for this particular task. What would I do? I'd probably do a similar thing, end up with a list of 9 strings, each containing on of the OCR strings defined in that Java file...In the Java code above, first thing I'd do would be replace a lot of the matching code with some simple substrings. I'd also not hardcode the values for the lengths of the numbers, just in case. There's no reason for them to be hardcoded, so why do it? If I were to do this in C#, I'd also likely make use of the fact that the String class implements IEnumerable&lt;char&gt; and therefore gets all the associated Extension methods (see how beautifully long this list of methods is http://msdn.microsoft.com/en-us/library/system.string(v=vs.110).aspx). I'd use those extension methods to transform the original string into groups of 9-character strings with significantly less code.
 while (programming() &amp;&amp; usingRegex) { problems++; } Jokes aside, any tool that can give you an analysis of an expression will probably be useful. Also, given that this looks like a practice exercise, maybe you should write your own pattern matching routines? You might find it easier to progress through the user stories that way.
Nope, sorry. It seems like it should, right? You don't have to write pass-through methods on the derived class to access public methods on the base class after all. It means you have to cascade changes to every derived type whenever you change the parameters on a class. This is one of the reasons I like to use IoC.
Agreed. That's why I said it would be beneficial if their main goal is to bring in more hobbyists. This obviously isn't their main goal since the windows lock-in is very profitable.
Find in files command in editor. it truly is life saver when you're looking for references 
What is your question? 
Just how to do those problems. I missed class for those review problems so I have to go back through my notes but was looking for help on here. 
Visual Studio has a nice template for MVC that includes a basic user management system, and there are plenty of tutorials out there on extending this. Maybe worth basing it of that?
Are you in the right subreddit? It looks like the questions are asking for answers in C, not C#, which is a completely different language, and one that doesn't support fixed-length array arguments in function signatures.
I read C# 4.0 in a Nutshell and loved it. As someone from more procedural languages (C, Fortran, Python) it was a great intro to pure object oriented language concepts.
There are several ways to do it, but the one I prefer is to create an interface with properties for each distinct data item, then have both your live data class and your mock data class implement the interface. Write any code or test that uses the data against the interface, except for the code that instantiates one of the implementing classes. Example: public interface IData { string Name { get; } int Id { get; } } ... public class DataMock : IData { public string Name { get; set; } public int Id { get; set; } } ... public class DataProvider : IData { ... public string Name { /* code that queries real data here */ } }
Why does he want you to roll your own membership provider? ASP membership does a great job and you can extend it. Many people thought about it and it is solid. Its just a waste of resources building your own. Sounds like your manager is a developer and not very good at prioritizing work. 
Take a look at Unity, it's a Microsoft developed IOC container for dependency injection. A nice way to wrap this up would be with a mock implementation of a service, which implements the same service interface but returns mocks under the covers. Using something like unity, you can switch out your service for a live one with a single line of code change in the bootstrap. There's lots of documentation of this online, otherwise I could help point you further tomorrow. Worth noting dependency injection offers huge benefits for unit testability too. Good luck.
I get the basic concept but how do I choose between DataMock and DataProvider in my web form? I 
This sounds like a question about dependency injection, i.e., how to get an instance of IData for something that needs it. A common pattern for this is a factory object that encapsulates the details of creating an appropriate object for the circumstances--perhaps it has one method for creating a "real" data provider and one for creating a testing mock.
I would highly recommend you look into asp.net simple membership. It does all of those things you want out of the box. It is pretty simple to setup too. 
The Managed Extensibility Framework works well as a DI/IoC container as well and is standard with .Net.
Yeah, I was thinking that. I just am not the best with the entity framework, so that's the only reason I'm kinda nervous for MVC. However I've been looking at other ORM's and am found a few that I'm gonna look deeper into. 
The first think I always do in new project - is membership implementation, just because we usually need to store user info in db with other data, it's a 10 min job actually, 1h to get into maybe. MSDN has a good article about it.
Open Source, free tools, new technologies adoption.
StackOverflow is a programming site, not a C# site, there are people with different backgrounds there.
Interfaces for data objects is a bit on the extreme side. Normally just setting interfaces for the services and their methods is enough. public interface IExternalService { ExternalFoo GetFoo(int id); int WriteFoo(ExternalFoo foo); } ..and then our implementation defines how to actually connect to the service. As long as you can construct the objects being returned, this should be sufficient. 
C# in depth by Jon Skeet, amazing, gave me a lot of info about how the language is evolving.
Depending on your IOC Framework (You are using an IOC framework, right?), you can bind/rebind based on a configuration value. Normally you don't change this at runtime - you'd change a configuration value and restart the application. 
If the support guy is his main objection, ASP membership already has a bunch of stored procedures to manage users. ASP membership isn't my favorite thing but it's really hard to argue that it's worth rolling your own. Normally part of the boss' job is to discourage junior devs from re-inventing the wheel. It's a little weird that he's on the other side of the fence here.
My answer kind of depends on your design. The overall answer is 'use an IoC pattern', along with 'use dependency injection'. Those are simple enough to google. But, I'd like to offer up that your 'mock data' should not be used to actually run the application - it should be used for unit testing. Integration testing should point to a test database. Production should point to the live database. So, when you run your app (actually running it, F5 in VS), it should be hitting a database. When you're unit testing, your IoC resolves to the static mock data.
There's no realistic membership implementation where manually adding users straight from the db is practical, even one you build. In any implementation, there's bound to be multiple associative tables managing the users, and adding data manually into these tables is going to be prone to errors. Storing passwords in plain text, which is what it appears you're alluding to when you said they don't want to hash passwords, is a horrible idea. There are plenty of ways to manage users / reset passwords and such and still hash them. ASP.net's built in membership provider is great, and redoing all that work doesn't make much sense. I kind of feel bad for you that you're being asked to do this kind of work as your first job out of school.
Wouldn't it just be enough to make the IP+port configurable and standup a mock server? I think that approach would probably have the least impact on your overall architecture.
Haha fuck man, I'm pretty sure they like to reinvent the wheel on damn near everything. I tried to explain that ASP.NET membership has this functionality out of the box and he was like, well I want it to be Database driven... lolz. Its kinda a pain having to do shit so crazy, some days I question why I work where I do. Appreciate the input, will be taking the ASP membership route. 
You don't *have* to dive into dependency injection to do this. I will sometimes simply create a property that under normal running conditions uses a default implementation of the interface. In unit tests I override the default instance with a mock implementation prior to running tests. Implementation looks something like this: private IData data; public IData Data { get{ if(data == null) { data = new RealData(); } return data; } set { data = value; } } Edit: Sorry about the crappy formatting. On a phone. 
I think the repo would be better with a couple screenshots and a Read Me file. 
You can blow your brains out learning IoC or just use a repository pattern. But you should still learn IoC :)
I'll try to get those up tomorrow. Luckily the app is pretty simple to use
IoC definitely blew my mind. There are some great libraries out there. I like AutoCAD and its various integration libraries at the moment.
I see your point, however I wont be able to reach production data or test data in some time. Therefor I would like to develop as much as possible before.
Check out mono.
This is exactly what I want to achieve. No I don't use any IOC Framework. Yet. 
Microsoft .NET framework is Microsoft's implementation of CLR (Common Language Runtime) environment. CLR does't have all latest marketing department ideas - for e.g. WPF is not part of CLR. Mono implements CLR and then [some extra features from .NET](http://www.mono-project.com/Compatibility) (but it is missing features like WPF - and likely never going to get them). In other hands Mono also have their own extensions to CLR that are not found .NET - for e.g. GTK toolkit and Mono for Android framework. 
In a nutshell, yes. When you write code in C#, it will get compiled into what is called CLR. This CLR code is interpreted by a virtual machine that runs on your OS. In a windows environment, installing the .NET framework provides you with a virtual machine that can run this CLR. On other platforms, what you need to do is install a virtual machine which can run the CLR code. Mono is one such package which can do this. One of the great things about the .NET stack is that it supports multiple languages. You can write code in any of these languages, and directly convert it into any of the other languages from the CLR code. It allows for complete interoperability as well so that while writing C# code, you could, for example, call a method written in a different language and then pass the results into yet another method in a different language. This can happen because all the languages get compiled into the CLR code in between (CLR = common language runtime). So in your case, the code you wrote in the windows environment will produce a .dll file, which you can directly reference or run code natively from the .dll or .exe in a windows environment. To go to a new environment, you will likely need to bring the source code over (.CS files) and recompile your project using the Mono package into whatever file types the system requires. There may be extra steps (I haven't used Mono before) but in general that's how it should work. You may need to search online for any additional configuration steps, and which files and types are portable.
I'm passssword, switched accounts bc this is the one I posted the code in. http://www.reddit.com/r/juggling/comments/1ps1kt/consub_personal_pattern_database/ When I made the new project, in the creation wizard, I selected Windows Form Application, not WPF. So should mono be able to handle the converting of it to something that can be complied on OS X or Linux? or both?
Way not to tell us anything about Mole in that page. I still have no idea what it does.
The Yellow Book by Rob Miles.
Thanks for the suggestion :)
Plural sight, learnvisualstudio.net, cbtnuggets 
The long and short of it is it's possible to use Mono to run your code on other operating systems, but you personally may not have the knowledge necessary to do it. Mono is not a turn-key solution. You need to know which libraries are implemented and which aren't. There is a lot of configuration and tweaking and if you are just getting started it's probably more than you want to bite off right now.
It depends on your objective. If your objective is to learn C#, unity is just going to complicate things. If your objective is to learn C# for the purposes of Unity scripting, then you're doing it right. 
+1 for Pluralsight. Learn the basics of the OOP and C#, build the test projects in the Pluralsight courses, then pick a pet project that has a range of features and work on it as much as you can. In my personal opinion, the best way to learn is to fail. You will write code that doesnt work. You will try so hard to accomplish a task, but everything you do results in failure. Overcoming those hurdles can sometimes require loads of research and debugging, but that is what is going to help you learn. Another benefit about this process is that you might not find the exact solution to your problem right away, but you'll find solutions to other problems you don't even have yet. Eventually, you'll run in to an issue and remember something you read that seems applicable, and voila!
Thank you! All I read was "Mole does debugging" and I thought "Good debugging is built into Visual Studio, I don't need this at all".
Can WCF be implemented in a existing winforms app?
Best way to learn programming is always to do it, http://www.asp.net/ is a great place to start, click on the "Learn" tab and check out the tutorials, lots of good information for starting out with any of the frameworks that build up from c#. If you end up going into a career oriented around programming in c# you are going to want to have a good overview of them all. Here's how I would rate them (I program c# for a living, and make good money too). * Web Forms - Old, still useful to learn for maintaining / modifying older sites however. * MVC - Current technology, good place to start learning how to apply c#. * WebPages/Razor - Used with MVC, you'll need to know at least the basics for any UI work. * Mobile and Single Page Apps - Both use either an MVC or Webforms back-end, good to learn but not necessary for the most part. * Web API - Great system, nothing you will probably use for a long time though. * Entity Framework - What most c# app's use, definitely good to know, but not the best ORM really as it's slow compared to most.
A windows forms app should run multi-platform just fine when run under Mono. However something like Unity or GTK# would likely be better UI frameworks for cross-platform UI's. Or you can just host a server and make your UI web based which eliminates a lot of cross-platform UI issues. 
I think .net is not in a bad position there. It might be behind Java, but still ahead of 90% of the other platforms. The main problem I see is the Windows lock-in, especially Windows server.
It seems that WCF is not the solution for my problem. What i'm trying to create its an app that will listen to several incoming connections from a website that will send html code that must be sent to a local printer, and all of this to avoid showing printer dialogs.
Is C# your first foray into programming? Or do you have some other experience already? If it is your first time programming, ditch the unity engine. While it provides some great stuff, it is just going to REALLY complicate things for you. I am going to assume this is your first time programming. I would recommend starting off with a simple application, such as a calculator. While learning this, educate yourself on the following: * Types and how they are different (int vs long, string vs char, etc). * Arrays * Object vs Static methods * Reference types vs value types * BONUS: Polymorphism * BONUS: Inheritance Really for a large portion of programming it is the CONCEPTS that are important. After you have the concept of how these things actually work, most of learning is just syntax.
have you checked Pluralsight yet?
Can you rephrase that as it doesn't quite make sense. A web server won't be creating connections to your app, you create connections to it. Second, web servers implement HTTP, so while you may not need WCF, you might be able to use HttpClient class. WCF speaks fluent HTTP, so I think it might still be a perfect solution for you. 
It sounds like you are just trying to print remotely. Pretty sure Sockets is *not* what you should be using here.
Either add [MethodImpl(MethodImplOptions.NoOptimization)] as a method attribute, or make the variable volatile
Thanks, but `[MethodImpl(MethodImplOptions.NoOptimization)]` does not work because of [this](http://stackoverflow.com/a/5105798) and I've also tried with volatile by adding a `static volatile int` class member, but when I try to use it I get an error: `you can only take the address of unfixed expression inside of a fixed statement initializer`. It's an interesting little puzzle :)
I am in a similar situation, though I do know a bit of C++, enough to build very simple apps. 
I came to say to just program and program and program... but it looks like People have already said it. So oh well... Hows life going? Dating anyone nice?
Let's not forget the MSDN's [.Net framework class library](http://msdn.microsoft.com/en-us/library/gg145045%28v=vs.110%29.aspx) and [C# language reference](http://msdn.microsoft.com/en-us/library/kx37x362.aspx).
Just code... Go to a site which has coding puzzles and start solving them in c#. Screw ASP.Net and unity, start with console applications, get your OOP concepts in place, learn a bit of advanced c#, and then pick up ASP.Net/Unity.
so if the guy on a mac downloads Mono, and he downloads my c# code, should he be able to run my code with Mono? Or do I download Mono on my windows machine and do something with Mono to make my code usable on his Mac?
Pm me if you have any questions! I'm still learning myself, but know enough to help a fellow developer out! 
What does the IL claim it is doing on &amp;iType if the variable is culled? There is a IntPtr.Zero you can use instead of ptrEmpty.
That doesn't really make sense... WCF should be perfect for handling incoming or outgoing connections because that's what it was built for.
If you just want to execute some throwaway code without building a large project, look at [LinqPad](http://www.linqpad.net/) It's pretty much the best .NET development companion ever. Even if you don't necessarily work with databases all the time.
The sidebar has a bunch of links for getting started.
Yeah, sorry I'm still learning english. What I'm trying to do is print remotely. The website is not creating connections as you pointed it out... the connection is made through [jQuery.ajax()](http://api.jquery.com/jQuery.ajax/) to the localhost and certain port that my app is listening to. So is a client made connection. And this is working fine but I haven't been able to send a correct response to the jQuery.ajax() so that it can notify the user that everything went ok. I hope this is more clear.
I worked through the book when I was learning.
It says here http://msdn.microsoft.com/en-us/library/bb514961(v=vs.90).aspx that the wcf service must be hosted by a web application to be exposed to client script. So in my limited knowledge about wcf, apart from installing my app in all the client machines I will have to install this wcf service, a step that I think I can avoid if I knew how to correctly send a response to jQuery.ajax().
I think we're getting all mixed up over things that probably don't apply to you. So your client connects to your web server right? What kind of interface does the server expose?
Or perhaps a list of objects which get student?
You could count only full stops followed by a whitespace or end of file.
Ha, so simple. Thanks!
If you wanted to be really thorough, you could also catch instances of input like see attached reference (p. 75) for more information by keeping a stack of parentheses or something and only accepting new sentences if the stack is empty (push on "(", pop on ")"), or by enforcing a minimum length for sentences.
Split the string on '. ' and see how big the array is. 
You could always [get fancy](http://sharpnlp.codeplex.com/) and use a natural language processor to do sentence splitting.. :D
&gt; keeping a stack of parentheses that’s a nice idea (although it requires you to actually iterate through the string yourself instead of just calling `str.Split(...).Count` or something like that, but depending on where the text is coming from, it could break if the text’s author forgot to close some parentheses; if the text comes from a book or some other publication, that’s unlikely to happen, but if the text comes from some other place (e. g. some internet forum (like reddit), that could become a problem.
Welcome To C#. This is an algorithm problem. Rather than a language implementation thing. Looking for RegEx examples, we can implement it like so: var sentences = Regex.Split(input, @"(?&lt;=[\.!\?])\s+"); However as mentioned in this SO post: http://stackoverflow.com/questions/4957226/split-text-into-sentences-in-c-sharp some languages such as Thai don't follow these rules. It's a really interesting human language parsing issue. Don't limit yourself just to C#!
The stackoverflow discussion you linked has nothing to do with what you're seeing - it has to do with laziness in iterator methods, not addresses of variables. Have you tried using filmund's `fixed` declaration?
Dr. Seuss disagrees; his very name brings this to its knees!
If this was stackoverflow I'd mark your answer as the best.
Yes i tried, it behaves exactly the same. Tghe only thing that works is `mono -O=all,-deadce cs_example.exe`. 
Apt: *Some people, when confronted with a problem, think "I know, I'll use regular expressions." Now they have two problems.* - Jamie Zawinski 
How do you know that the optimization removes the variable? It's kind of hard to believe since it would generate illegal IL or cause a stack imbalance if it was. The function call would have to include a ldloca.s 0 instruction which would require that there actually was a variable at location 0. If it does not exist, the instruction would not make sense. I'm more inclined to believe that there is a marshalling issue with the function getNamedVarType than the compiler removing the variable iType. edit:checking the definition. If you change the wrapper, you can use out int instead of [Out]Int32* type. The function would no longer need to be marked unsafe and there is no way the compiler can get that wrong. If you still get an error, it has to be something else (perhaps the string is incorrectly marshalled, or nullptr is not an acceptable context argument)
Exceptions: - Questions? - Exclamations! - Loud exclamation!!! - Loud question!? - Ellipsis... - Rhetoric question?... - True sarcasm⸮ - poor grammer edit: shitty, useless grammer bot caus spam.
&gt;Exceptions: - Questions? - Exclamations! - Loud exclamation!!! - Loud question!? - Ellipsis... - Rhetoric question?... - True sarcasm⸮ - poor __grammar__ FTFY
&gt;Exceptions: &gt;- Questions? &gt;- Exclamations! &gt;- Loud exclamation!!! &gt;- Loud question!? &gt;- Ellipsis... &gt;- Rhetoric question?... &gt;- True sarcasm⸮ &gt;- poor __grammar__ FTFY
&gt;Exceptions: &gt;- Questions? &gt;- Exclamations! &gt;- Loud exclamation!!! &gt;- Loud question!? &gt;- Ellipsis... &gt;- Rhetoric question?... &gt;- True sarcasm⸮ &gt;- poor __grammar__ FTFY
I have created the FFT via Matlab: http://imgur.com/wMLGHHk Then I created the DFT via C# and Zedgraph: http://imgur.com/uRU31Pu Which one is correct? (Should be the same I think but isn't.) They have the same fundamental oscillation frequency (50 hertz) and same overtones: 250, 350, 550, 650 But the amplitudes are different :/ edit: Can someone do a FFT/DFT of the signal and post the result?
I assumed that is what happened because it works when I add -O=all,-deadce. But you are right, it seems to be some kind of marshaling issue: The native function getNamedVariableType calls two other native functions: getVarAddressFromName and getVarType, forwarding to them its pointer arguments (like [here](http://forge.scilab.org/index.php/p/sCiMake/source/tree/f1c2c71516c4b7224fdac1de2c69788835a8bfe9/scilab-5.2.0/modules/api_scilab/src/cpp/api_common.cpp)). If I replace the getNamedVariableType call in the wrapper with the two more low-level native calls, then this bit starts working, and it fails further along the path, in the method createNamedMatrixOfBoolean. Stacktrace: at &lt;unknown&gt; &lt;0xffffffff&gt; at (wrapper managed-to-native) object.__icall_wrapper_mono_marshal_free (intptr) &lt;IL 0x0000d, 0xffffffff&gt; at (wrapper managed-to-native) DotNetScilab.Scilab_cs_wrapper.createNamedMatrixOfBoolean (intptr,string,int,int,int[]) &lt;IL 0x0003c, 0xffffffff&gt; I suspect it fails every time an imported native method calls other native methods within its body, due to some native pointer marshaling issue that I don't understand. So now the problem is: how to fix the marshaling? Some tip on the web suggested wrapping every unsafe native call in a managed delegate, but that would also require a lot of code changes in the cs wrapper. Is there maybe a simpler solution? 
They'll be different by a scaling factor involving sqrt(2*pi) and the number of elements (4002). 
I don't understand why the amplitudes at 550 and 650 are different. One is higher than the other and vice versa in other scenario. So I think I did a programming mistake somewhere but I still can't find it. In matlab I did the FFT with the fft method and in C# I used DFT from AForge.Math FourierTransform. (Still unsure what the difference between those two is. There is a FFT function in FourierTransform but it is not usuable since my array is not a power of 2. (2^n))
I have plotted both in Matlab and in C# over more than 1 period and the FFT/DFT result is as it was before. FFT over 1 period in Matlab is identical to FFT over 4 periods in Matlab DFT over 1 period in C# is identicl to DFT over 4 periods in C# So I think it is not a matter of elements. They are slightly different (because I generated them differently; one are generated in Matlab the other ones in C#) but when I am saving the elements from C# in a .txt file and import them into Matlab and let it plot the plots are identical. So it shouldn't matter. Now I don't know which FT is wrong/right. One of these two plots (C# vs Matlab) must be wrong I think. Can someone create a FT of Istrtmp so I can compare?
Being an 'accomplished C# programmer' just means you know how to use a hammer. What you really should aim for, is being an accomplished system designer. Knowing the tools is only a fraction of the equation. Proper planning, design and architecture means so much more to a successful project. "I know C# well" isnt the same as "I know how to build and deliver a system to your specification, on time, and under budget". This article is rubbish. Successful projects were completed long before C# ever came along.
I would say that JavaScript actually complements C#, I constantly use JavaScript and libraries like jQuery for a better user experience. JS definitely has some career opportunities, GrooveShark for instance is built on it (I have a friend who works for them). C# though I've seen to have far more demand, and having JS experience is a definite plus for any C# position that deals with front end (user interface) work.
A guy I used to work with taped that under my monitors. I had that Oriely book on regexes on my desk, but FML, that decision I made of using a regex to parse a series of horrifically growing in complexity command line arguments was a bad one, a really, really bad one.
As other have said, this advice applies to more than just C#, but it also applies to more than just programming. That said, it's still good advice.
Are you trying to say that regular expressions is not a good tool to use in this case...? Do you think they are ever useful...?
I second this. I recently tested the speed of HTTP based services with WCF on a local WiFi network and there is almost no latency. I created a tablet app that communicates with my desktop to provide touch based commands that are then sent through a MIDI signal.. there was no issue at all with speed, it feels real time.
I been using wcf for all kinds of things, including provisioning services. Really easy to implement as well!
"Client/Sever" typically refers to an architecture where a desktop client is deployed to multiple workstations and connects to a shared remote database. This would be a very simple model for you as well: * A central SQL server database. * A "Bowling Lane" application which connects to the database and dumps data into it. * A "Front Desk" application which monitors the data in the database and updates itself accordingly. Since this seems to be a learning project for you, for bonus points you can figure out how to use SQL Server to push notification to the Front Desk application rather that have the app polling the database for updates.
ZeroMQ.
Check out MVC Web API
I though about that as well, but won't it be better if only the front desk app will have access to the database? So the database won't have much requests from multiply apps. Is it possible to the lane app to send a "Game" object for example that contain all the data about that round, then store it in the database.
I've learned to never say never about any programming practice. ;) From my experience, regular expressions are good for simple command line tools like sed, and perl one liners when you're working through a command prompt. It's also useful for find/replaces in your IDE where you are doing something where you leverage a delimiter and backreference to get the job done. On the other hand, regexes in code I pretty much avoid given the ratio of times they've caused pain vs the amount of time they *initially* save. I think the problem of email address parsing underscores this perfectly. It seems trivial at first and you write the simple regex that looks for the @ and the &lt; &gt; block for the display name. It works, then you realize that there's all these edge cases and things that you need to account for. The useful little imp becomes the patron hellspawn demon-saint of unreadable code. Here is the regex that completely and correctly parses an email address according to the RFC: (yes, keep scrolling to the right.) (?:[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\]) Yeah, nightmare. I used FParsec in the F# world for a minute which is a based on Haskell's Parsec. It really changed how I look at parsing. It's not a perfect solution but this paradigm makes strides towards achieving a happy medium between clarity and having the same parsing operators that make regular expressions attractive. (There's NParsec for C# but I've not used it yet.) 
I'm curious. Is this what you used?
You could do that however it would be easier to write a DB handler that can post the data to the DB itself. You could infact write one class that contains all the functions for both the client and server side then include that in both programs to call the function. At a slightly higher level, you could go further and wrap that up in a DLL to handle the DB posts. The advantage I'd say is that traffic isn't posted to the server which has a listener open then has to run a seperate function file the data in to a DB. Either way the data is posted over the network. If you're worried abour security you could set a separate user up for the Client side which can only update tblGames. Limatations: Depending on what OS and DB you're running, your concurrent connections to the DB might be limited. That said, the Clients only need to connect at the time they're posting data back to the DB or collecting data from it.
&gt; From my experience, regular expressions are good for simple command line tools like sed, and perl one liners when you're working through a command prompt. It's also useful for find/replaces in your IDE where you are doing something where you leverage a delimiter and backreference to get the job done. This seems like an arbitrary distinction. &gt; On the other hand, regexes in code I pretty much avoid given the ratio of times they've caused pain vs the amount of time they initially save. What do you mean by pain? I've never had regular expressions cause "pain". They have always made things easier when I have used them. &gt; I think the problem of email address parsing underscores this perfectly. This is always the example I see people use when they argue against using regular expressions, but it is really an invalid and disingenuous argument. The fact of the matter is that there is almost never a need to validate an email address completely. If we are just talking about in terms of validating user input, then usually just checking for 'something@something' is sufficient. The times it would need to be checked against the RFC spec are few and far between. &gt; Here is the regex that completely and correctly parses an email address according to the RFC: (yes, keep scrolling to the right.) This is another invalid and disingenuous argument. "Look how long and messy that is!". Sure, it's long and messy and complex. So is a lot of code. This isn't more complicated than it needs to be. It is as complicated as it is. Yes, it could be expressed in some other form that might be easier to read or understand, but that is not the point. This argument is like looking at a program's assembly code representation and pointing out how long and hard to read it is. The above is a regular expression "program" to parse an email address according to RFC spec. This could be compiled and only expressed once in many languages. Even in those that don't offer compiled regular expressions, it could still simply be used as a constant. &gt; Yeah, nightmare. I used FParsec in the F# world for a minute which is a based on Haskell's Parsec. It really changed how I look at parsing. It's not a perfect solution but this paradigm makes strides towards achieving a happy medium between clarity and having the same parsing operators that make regular expressions attractive. (There's NParsec for C# but I've not used it yet.) Regular expressions generally aren't intended for parsing in the way I think you are using the word. Checking to see if an email address is valid is more validation than true parsing. Regular expressions are for pattern matching, so if you need to check to see if a string matches a pattern that describes a valid email address, that is what regular expressions are for. If you are trying to parse it to get its parts, then sure, you might want to use something else if you aren't comfortable with regular expressions. 
 You make the gloomy days a little less gloomy 
I'm not going to do your homework for you. Split on a regex that is all of those characters and then a space 
&gt; I though about that as well, but won't it be better if only the front desk app will have access to the database? Why? The database can handle it and the context you described is a private network so security isn't an issue. You can create a service layer using WCF or even Web API if you want the learning experience, but were this a "real world" scenario I would view it as adding complexity for no benefit. Now, that said, if you want to have fun do something like this: * "Lane" app that gets and sends information to an App server via WCF * App server that exposes services to get and upload data * App server is also an Event Hub that allows one or more "Front Desk" apps to register and receive events (via something like WCF Callbacks) * Database is running on App server, invisible to anything except the WCF services. So when the Lane app send data, the services persist it in the database and then send a notification any registered Front desk app so they can update themselves. It's overkill for the situation, but that does sound like more fun doesn't it? You should also note that this isn't "client/server" architecture anymore, it's more like "n-tier". 
Yes. Sounds like a lot of fun. But learning all of that is too time consuming at the moment, I also taking a course for the MCSD cert and we are about to start two courses next week (HTML, Algorithms and Complexity), so as much as learning MVC sounds fun (Already downloaded videos and books about it) i won't have the time. I will still only let the desk app access to the database just so i can play with the TCP objects a bit. Thanks :)
 Mayby try a client / server framework instead. Out of every 10 people I know who have tried serious socket programming about 7-8 of them mess it up badly.
&gt;A few things come to mind are deployment, concurrency management, inefficient cache management and the fact that not all developers are created equal. All of these point make the case for keeping things as simple as possible and the only thing simpler than a 2-tier application is a single user desktop app. Case and point: * Deployment: only scripts to deploy on the database server, and a desktop client to update. No app server to update makes one less deployment step, hence simpler. The best here would be a web app, but it's does not fit the scenario. * Concurrency management: SQL Server handles this, just need to make sure you pick a good transaction isolation model (this is true in any architecture model anyway). * Inefficient cache management: SQL Server handles this for you. * Not all developers are created equal: which makes the case for keeping things simple. Client -&gt; Database is simpler than Client -&gt; App Server -&gt; Database In the end, the choice should be driven by things like time, budget, and operating environment. A small bowling alley has a limited budget and a relatively simple environment. An international financial institutions has deeper pockets and a more complex environment. Just my $0.02
Welcome to C# :) You can use LINQ. "Hi there! What's up? Nothing.".Count(s =&gt; s == '?' || s == '!' || s == '.'); or char[] fullStops = { '?', '!', '.' }; "Hi there! What's up? Nothing.".Count(s =&gt; fullStops.Contains(s));
Only thing I'd disagree with is the avoiding being a jack of all trades. Becoming an accomplished programmer does include knowing which language or tool is best for solving your problem.
Have you considered writing a Web Client front end, and using WebSockets?
I would hope that coding for small bowling alley is not a typical "real life" scenario. I work in a small shop. 5 Developers with up to 100 users. But even in this environment, I would still try my best with n-tier because: * Deployment: frequent change in business logic can happens in app-tier. No more re-deployment of desktop client. * Concurrency Management: I meant to say concurrent State Management. Not a easy thing to do without a workflow engine let alone database only. * How does SQL Server handles caching??? * While introducing overheads, concept of n-tier is not difficult to grasp. When tiers are separated, it forces us to define and strategize better interfaces between the app tier and front tier. The app tier can validate and **not relying** on the validations performed by the front tier therefore making your system more robust. I agree with your assessment that there is a time and place for everything. But looking back 6 years, I got this feeling that we could have avoided many pitfalls if we use n-tiers design as default and give special consideration to the simpler 2 tier design when necessary.
Don't have time to read all comments, so I'll just throw it here: Antlr. I dunno if v4 can generate C# lexer/parser, but you can use v3 for it no problem. It will be a nice learning experience. It's a biiiit shooting a fly with a cannon, but if you want to be reaaly sure you get it right it's probably the right way.
ASP.NET mvc is very loosely coupled, you do not need to use EFframework if you do not want to, you can define you models as whatever you want. Microsoft made mvc this way so you can easily integrate it with legacy systems and databases.
Look into messaging technologies like ActiveMQ, MSMQ etc and the Pub/Sub model. Essentially, you have Publishers that push information out, and Subscribers that pull information in and they each use a Topic to talk about the same thing. For example, you'd have a Message topic, each client has a Publisher that pushes their messages out to all the other Subscribers that listen on the topic and receive data published to it.
Sounds like like something SignalR should be able to handle, although I'm not sure how an implementation with a Windows app would work. 
This post makes no sense. There's no fundemental difference between code running in a Console app, WinForms app, or web app. They are all executing code on the CLR, and you back end code should run exactly the same. You could start by telling us what specific errors you are encountering, and/or what you think is different between MVC and other platforms that is causing a problem.
If you are using EF, I would recommend looking into WCF Data Services. It basically wraps your context in an odata restful api. Your client can be a webui or a c#. If you go webui take a look at jaydata for consumption in javascript.
Duplex Services might be able to work for you: http://msdn.microsoft.com/en-us/library/ms731064(v=vs.110).aspx
MassTransit rocks. We use it on top of RabbitMq and I am loving life away from WSDLs and WCF configuration hell.
Homework... I'm noting that your algorithm is incorrect, and so is regex-split as well. "The price of the item is $1.50 Mr. Bond. Would you like something else with that? No? Then get Out! Thank you, come again."
English doesn't even follow these rules. Lists, titles, abbreviations, quotes, parenthesis and the fact that period is the decimal separator will break this implementation. I don't think regex is the way to go at all.
You are right! Only now I've noticed the original struct uses a `char*`, and not an `int*`. Apparently, changing the api_Err to: [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)] public unsafe struct api_Err { public int iErr; public int iMsgCount; public fixed char pstructMsg[5]; } fixes the problem. Thanks! 
You could set the Thread.Priority to Highest (may require administrative privileges) although: &gt; Operating systems are not required to honor the priority of a thread. Also I'm not sure how effective it is. http://msdn.microsoft.com/en-us/library/system.threading.thread.priority(v=vs.110).aspx 
You have to do some synchronization, see http://msdn.microsoft.com/en-us/library/system.threading.eventwaithandle%28v=vs.110%29.aspx
That can't really be predicted. One thing you could do is use `Thread.Join()` from the calling thread to wait for the child thread to finish execution.
Definitely this. If you are trying to make sure that your thread executes all the instructions before any other thread can do something else then look at synchronization primitives like Monitor. 
Windows isn't a real time operating system. (Aka It doesn't garantee that it won't switch to any other thread when running). If you don't want to switch to any of your threads you can look at synchronizing methods for c# (there's another post on that, but you can also google for semaphor and mutex).
Chances are if this is truly a problem you need to solve; managed languages are probably the wrong tool for the job. Ignoring your host OS, the framework could pause execution at any moment for garbage collection. 
No. There is generally instruction on processors to disable interrupts. However there are also interrupts that don't obey even that (NMI). Generally on Windows as a normal process you don't get to call the interrupt disabling instruction. The whole process switching happens usually in two ways, either you make a call that goes into kernel and that always checks if you are eligible to continue after your call is done or a timer interrupt happens while in your code and again kernel decides if you should be resumed for the rest of your slice.
Maybe the resource is unavailable on the thread you are invoking it on? I have limited experience on mono for Linux, but at least on Windows, GUI operations must happen on the GUI thread. Typically you dispatch the creation of the window to the GUI thread using Invoke (Windows Forms) or Dispatcher (WPF).
&gt; Maybe the resource is unavailable on the thread you are invoking it on? I have limited experience on mono for Linux, but at least on Windows, GUI operations must happen on the GUI thread. Typically you dispatch the creation of the window to the GUI thread using Invoke (Windows Forms) or Dispatcher (WPF). See that was my first thought as well, but it works about 70% of the time. I'm sure it's some mono-specific implementation but I can't figure out *what*. 
Really if using EF and just trying to expose the data w/o business logic on the backend then this, http://msdn.microsoft.com/en-us/library/hh487257(v=vs.103).aspx, is a simpler choice.
There is nothing simple about EF.
To be fair this is just a wcf wrapper around EF. It exposes full crud operations around each dbset in the context.
Are you trying to spawn a new window from within the worker thread? I am not big on GDK however this is generally a no-no for most UI frameworks in .NET. Generally your worker process needs to signal that it is done and then have a delegate in the main thread spawn the window.
So I figured it out. The responses below were correct, the threading was the issue. I'm used to Background Worker threads doing things automatically for me in .net, so when they conked out in Mono, I was confused. The solution was to use : Gtk.Application.Invoke(delegate { // CreateWindowHere }); So by using (what I assume is an anonymous delegate, I'm not really a code expert so I'm not 100% on that) the code above it 100% of the time creates the window. One caveat: I have a .DeleteEvent for the window and that had to be put in the delegate with the create, otherwise it failed 50% of the time causing a fatal error. (The event causes backgroundworker to re-fire, which re-creates a window essentially preventing the window from being closed). Thank you to /r/Sarcastinator (who has an awesome user name) and /r/Manticor (from one user with a fantasy creature as a handle to another, great choice), you both helped me a lot here!
OK so what I have is a C# MVC4 project in Visual Studio 2010. My desktop is Windows 7 Professional 64 bit. Now, I have both ODAC 32 bit and 64 bit installs on here (with xcopy for easy deployment). I can easily create a console or winforms app that will connect to an Oracle database using ODAC (Oracle.DataAccess.Client). In order for it to work though, I have to set the build configuration to use x64 and that makes sense, but "Any CPU" does not work, VS complains about the build target not matching. Now, if I try to create an MVC4 site and use ODAC and change the build target to x64, it just won't work. I deployed to a 64 bit server and made sure the App Pool in IIS is set to 64 bit but it doesn't seem to matter. Do this make more sense? I totally brain-farted last night and really should have thought out what I wanted to say instead of being impulsive.
This is not a "problem" you need to solve. Thinking you need to solve this "problem" is in fact a symptom of another problem. 
Wow, that made me dizzy.
While in most cases the correct answer is to use synchronization to guarantee certain things are thread safe, and let the operating system choose when to run which pieces of code (it's much better at making these decisions than you are), if you actually do need to have fine-grained control over when certain pieces of code start/stop running relative to each other, but want to still time-division multiplex them, you can use [fibers](http://en.wikipedia.org/wiki/Fiber_(computer_science\)).
I did some work with message queues at my dayjob (WebSphere MQ and TIBCO). I guess it makes sense - host has to process incoming events first come - first serve, and queue is exactly that. I wasn't really considering it at all, but now that I do think about it, asynchronous design seems like **the** way to do it. Thx :)
Instances will be on different machines over internet ;)
SignalR sounds great, though I think I won't be going browser route. Or maybe I will? That thing kinda eliminates the 'cons' I was seeing in implementing as a website :D
Yes and No? What you can do is use a semaphore. How it works is basically this. 2 threads share a token. Each thread can wait for the token, and each thread can release the token. Think of it like operating a cannon. * Person A is responsible for loading the cannon. * Person B is responsible for firing the cannon. You clearly can't fire the cannon in the middle of a reload, and you clearly can't reload in the middle of firing. * Person A WAITS for the cannon to become available to load. * Person B WAITS for the cannon to become loaded. * Person A LOADS the cannon * Person A SIGNALS person B that the cannon is ready to fire. * Person A grabs another cannon ball and some more black powder. * Person B FIRES the cannon. * Person B SIGNALS that the cannon is ready to be loaded again * Person B AIMS the cannon at the next target. http://msdn.microsoft.com/en-us/library/system.threading.semaphore(v=vs.110).aspx
For teams that have coders and testers, unit testing is a perfect opportunity for paired programming with a coder and a tester. This type of activity gives testers confidence in the application by understanding how some of the very specific, unit level cases are tested for the various seams in an application and the chunks of logic within an application. As a tester, I've had great experience working closely with coders in developing unit tests. While I'm not a great coder, I can certainly help developers come up with cases we should test that they can easily and quickly develop. This also helps me know what I don't need to waste my time manually testing so I can get to the more "interesting" cases that are not unit-testable or difficult to unit test.
I believe SignalR has a self-host option, meaning that updates from a server can broadcast to a console or windows app as well as a web browser. There is no reason you can't offer both. edit: Random googleage finds a [StackOverflow answer about a SignalR console app](http://stackoverflow.com/questions/11140164/signalr-console-app-example)
Leave it to the C# community to down vote me to oblivion... There are problems which require this level of control. Chances are you will be writing code in assembly or C if this is your world. I agree the OP is very likely doing something terribly wrong if she/he is trying to do this on the .NET Framework.
Not without jumping through serious hoops. Let's think about what it'd be like if this were true. Since Windows is a multi-tasking OS, this means that your thread would consume 100% of a CPU, making it unavailable for other threads/processes. If you're running a multi-core or multi-processor machine, you can still do things like move the mouse. If it's a uniprocessor, your mouse will freeze, your network will become unresponsive, and any disk I/O not commanded by your thread won't happen (which means you won't get access to the swap file). 
Unit testing looks good when you apply it to simple algorithms. However how can you use it when drawing data from databases where the test is of the integrity of the sql and not the data the is coming back?
Are you asking how you can unit test sql queries?
What kind of code is this?,console app? I haven't tried packaging c# code into an installer before, however, at the very least, I'd expect some shared library to be present in the package. Can you provide more details?
Well, databese queries in general in C# eg: I am using entity at the moment and want to try unit testing but my program is db driven so I don't know what the expected answer always is, which makes it hard to compare to an actual answer. I gather there is a collections comparison as well I could use but havn't had time to look into it.
You should use backing fields for your properties. A [backing field]( http://msdn.microsoft.com/en-us/library/ms173118.aspx) will create the accessor, mutator and a private variable for you and allows for cleaner code. Try : public static double DriveTotal { get; set; } Line 66 is a good candidate to use String.Format (or use the Console.WriteLine overload that allows to format strings), unless performance is an issue. Similarly to the recommendation above, the startMessage variable could be a StringBuilder. 
Anyone have links to unit testing more complex real world software. Every time I see these posts its for dead simple code. I do all wpf stuff at work and a lot of times the small plugins I make seem impossible to properly unit test.
Agreed. Look for &lt;SolutionName&gt;\&lt;ProjectName&gt;\bin\Release or &lt;SolutionName&gt;\&lt;ProjectName&gt;\bin\Debug (preferably Release). All user needs is .NET framework you built against (which you can verify by checking project properties) and the files (*.exe and *.dll) located in that folder.
Maybe what you need is a mocking framework? I can recommend Moq https://code.google.com/p/moq/wiki/QuickStart Otherwise maybe it would help to read up on TDD/BDD/mocking/dependency injection/IoC containers
Your example would be accomplished using reflection. However, that would come with a significant performance hit. Reflection is not cheap, and using it in an update loop will cause noticeable lag. I would suggest you look into the Observer pattern or the C# event model. 
Your pseudo code would not do what you want. You could query the assembly metadata using reflection, yes, but that would only give you the class definitions. There wouldnt be any way of calling the instance methods this way. While there are many ways of solving your task at hand, you claim to be a neophyte csharper. In that case I would suggest keeping it simple. public interface IGameObject{ void Update(); } Maintain a list of ALL game objects in a manager class as you create them. Each "tick"/"render pass"/etc, iterate the list and call Update() on all of your objects. This won't solve the issue of your objects taking too long to update and freezing the renderer if they are on the same thread, but thats a different problem altogether.
What i do in my project is simple, but might be considered wrong (not sure on this part, would like an experienced comment). I have an Entity class, which, among everything else has a virtual Update method. In global FrameUpdate() method i call each entity's own Update(). I can later derive from Entity class in my game and override the Update method to achieve the same results as in Unity.
That sounds like the result I am trying to achieve, could you go into more detail about who you accomplish this?
I should have mentioned this is how I am doing it currently; I dump it all in a list through a registry method in a Manager object. But I don't like it. It's clunky and requires a lot more micromanagement than I want to achieve. I would be interested to hear about the other ways you have mentioned.
The observer pattern is something I examined briefly. I will look into it again.
Well others have mentioned some of them like the observer pattern, the .net event pattern, publish/subscribe pattern; but these are all really just abstractions around a manager with a list of things to iterate. Whether the manager maintains a list of things and iterates it, or invokes an event (which is just a multicast delegate which maintains its own list of things to iterate) doesnt make a huge difference in the end. Stick with what you can easily understand and modify for now and worry about optimizations later. Also, your manager doesnt have to manage EVERYTHING; each game object can manage its own list of behaviors that it iterates. public class Entity : IGameObject { public virtual void Update(){ // iterate and update my behaviors } } Just remember that if you code it in a way that you cant understand how it works, you wont be able to fix it when it stops working.
You have to build your project before you distribute it. Source code files (with ".cs" extension) are designed for your (programmer's) use only, and you never, never should give them away. After you build your project, Visual Studio creates binary files in a specified directory, typically "...YourProject/bin/Debug" or "...YourProject/bin/Release". Those files are the completed application you wrote, and you should distribute them with all used libraries and dlls (like jdaero said, either solely archived or embedded into an installer - [InnoSetup](http://www.innosetup.com/isinfo.php) is a perfect tool for creating those). You should note that .NET is officially supported on Windows platform only. That means, when you compile your application (or assemble the final product), you should always note that it's targeted for .NET, and it won't run on any other platform that doesn't have .NET resources and framework installed. Typically, when a user tries to run .NET application on Windows without having the framework on their machine, a warning message will pop up giving them an opportunity to install required files. Installing .NET on an offline machine is a pain in the ass though, but it's installed by default in Windows 8, so it depends on the OS version, too. Also mind the compatibilities, because, for example, a .NET 3.5 application won't run in the .NET 4 runtime.
You use a test db and test data so that you know exactly what the response should be. This is integration level though. Otherwise you can just make a local version, manipulate locally and check logic results locally. For the integration step, a common scheme for db dependent testing is: * Insert data * Get data and assert it matches what was passed in * Get all data and assert there is nothing passed in other than what you just passed in * Manipulate data * Get expected data and assert it matches * Get all data and assert there is nothing unexpected * Delete data * Get all data and assert there is nothing there.
Unit testing is pretty awesome. You should check out the Visual Studio Unit Testing tools though. They are pretty kick ass and they integrate natively into the rest of Visual Studio, TFS, etc.
Every object in my engine is derived from Entity class. Among everything else it includes an empty virtual method called Update. I store all my entities in a collection to operate them later within the engine. Every OpenGL frame update i call every entity's (from the list) Update() method. The method itself can be overriden when i derive from Entity class. For example: class Ship : Entity { //blablabla public override void Update() { //whatever i want to do here } } Edit: Formatting
What is the error and where (stacktrace would be nice)? That can help me find it without digging into the code. You said in an else, but there is only 1 else, and I don`t see a possible exception there.
 MessageBox.Show("Preencha todos os campos", "Erro"); "fill in all fields" in portuguese but i've already solved this 
And what happens when the front desk wants to push out and update? Lets say someone is being rowdy and you want to stop their game, what do you do? 
And how would rest work when the front desk needs to push to the client?
Maybe you are looking at the big picture (the pluglin as a whole) and so it makes it difficult for you to come up with a good test for it. If that is the case, I suggest you to look at the isolated methods of your plugin, and write unit tests for each of the public methods that compose your plugin, because they are the interface of your plugin with other parts of the system, and can also be viewed as the services that this plugin offer for other objects. If you test all of these interfaces you will be sure that the plugin can be used in any part of your system, because you will have already verified if it works as expected. You should test it in a way that it shows it will work no matter in what another system it may be used, either yours or a third part system. Testing the interfaces / services / public methods of your plugin can show you that, and it can be made with unit testing.
sockets doesn't require a constant connection. You see nothing wrong with constant poll? ad you are asking for the front desk comp to be a web server. so lets say you have 20 lanes. you now have 20 computers constantly polling a the front desk for updates? why do you see this a s a benefit to sockets? 
System.Threading.Thread.Sleep http://msdn.microsoft.com/en-us/library/d00bd51t(v=vs.110).aspx
Simplification of deployment and code to maintain. How often do you need to poll, once a minute should be good enough. If the client is a in a web browser then the code will actually live on the server. I guess it really depends on your needs, do you need real time communication? Are you trusting the client to establish the connection or will it be two way? If only the client will establish the connection then you will need to save the message to be delivered into some mailbox or message queue for the case where the message is pushed and the client isn't connected. If you want to push with to the client only have the client make the connection then you will need an established connection to push that message on.
so you are asking the front desk to host a web server. now you are saying the client could be in a web browser, what happens when someone spills beer front the front desk computer (now webserver) ? This is a bowling alley. And no you don't trust the client. &gt; Simplification of deployment and code to maintain this is only true in a website scenario which doesn't work for machines that need to run offline in case there is a connection issue or the front desk comp is destroyed. The lane computers need to always work, always or you lose money. Have you seen those ancient white registers in a Wendy's restaurant? You know why they don't have fancy touch screens, because those things work even when they lose power. Those things don't break. they are one solid device so they can be abused. They store their transactions for when the back office drops out. When it comes back online they feed it what they have stored. You can't take enterprise development type thinking and deploy it to retail.
I think you have lost the original topic of the OP. You are arguing much bigger architecture assumptions that could very well work, but I won't be typing them out on here. For your argument you might as well just issue an abacus to each bowler and take it away when you want to kick them out. That thing is solid and will definitely work even when the earth is hit by an EMP. 
Thank you so much for that in-depth post. I appreciate that. I took your advice and tried InnoSetup and it did the job for me so easily. Then I realized just how horrendous and un-user-friendly the Visual Studio package installers are! Again, thanks a ton!
Minor correction: the code that the compiler creates is actually called IL (Intermediate Language); the CLR is the Run-time itself that runs the IL code.
'cus you are or'ing when you should be and'ing I expect... it will pass the second test because grade is &gt;= 40 - you'll never get past that.
You need an "and" (&amp;&amp;) instead of "or" (||).
You also have multiple statements that could be true. For example, let's say grade = 50. That satisfies else if ((grade &gt;= 40) || (grade &lt;= 50)) and also satisfies else if ((grade &gt;= 50) || (grade &lt;= 60)). You should change one of the comparisons to not include the 50.
Thanks for all the responses I now realise my mistake. Thank you all for the help.
How would a switch statement work with those inequalities?
It isn't much diff than an if statement but it is clearer what is happening with a switch statement.
Something turns me on about LINQ on an in-code string...
Express is free. What edition are you looking for?
I dunno - I want to be able to develop C# without any restrictions or limitations. I think I want the professional edition. At the moment I'm still trying to figure out what one version offers compared to another. I'd also prefer to get my hands on the CDs/DVDs instead of needing to rely on a download or subscription.
You can develop in C# without restrictions or limitations if you use notepad. :)
http://en.wikipedia.org/wiki/Microsoft_Visual_Studio#Editions_feature_grid If your goal is just C# development then Express should do it but it is only available as a download, as far as I know. There are programs like Dreamspark and Bizspark that get you free licenses. If you're a student then academic licenses are super cheap.
You should check out BizSpark: http://www.microsoft.com/bizspark/about/ if you need VS for a project you are starting. There is also DreamSpark for students :https://www.dreamspark.com/Product/Product.aspx?productid=72 Alternatively, you could try Xamarin Studio. If I were you, I'd start using Express and when you find a particular feature that you need (say, you want ReSharper or need to do architectural design), upgrade. The biggest issue with Express editions is that you'll need separate Express installs to do Windows development vs. Web vs. Phone development as all of these features are bundled in the paid editions. http://www.microsoft.com/visualstudio/eng/downloads#d-2013-express As far as I know, you when you purchase your MSDN subscription for a paid edition, you have an option to get a CD mailed to you. As far as Express, I think that is download only.
holy crap - I had no idea there were alternative environments. (although I did try mono a while ago) Have you tried any of the alternative C# environments? I didn't really care for mono, my beef was the compiler was not very informative (I was using unity - so the unity environment worked nice to help me debug)... but I would like to be able to use the C# environment for more than just unity development.
Thank you for the suggestion on bizspark - I will check this out for sure!
that's just cruel!
A lot of universities participate in Microsoft Dreamspark where you can get a free copy of visual studio.
[sharpdevelop](http://www.icsharpcode.net/opensource/sd/) is nice; Not as good as VS but...its free and is still under development
SharpDevelop is basically an open source VS. I love it. It's also written in C#
Pretty sure Unit Test projects are available in Express versions though
Find someone whose university participates in Microsoft Dreamspark, and have them sign up using their school email address. Then download and use the software
I actually haven't had a chance to use any. I've been lucky to always have a license for VStudio for the last 20 years.
My my... I had no idea Carl Sagan was also a programmer.
I got it free when I was a student. But I suppose you don't want to do that to get a copy
Visual Studio Professional without MSDN is most cost efficient way to get VS. If you have older version then there SHOULD BE limited upgrade offer available for 99$ this month and ending January 31, 2014 (Haven't saw those yet...). If you are just trying to learn C# - then don't waste your money. Use Visual Studio express or SharpDevelop.
You can't use an inequality, or any other predicate, in a `case` statement.
Terrible idea actually. Microsoft has apparently sued over this a few times.
One thing to note about MSDN's CD/DVD option is that you'll typically have to wait weeks before you receive media. Fortunately most products are available as an ISO download for burning to your own media. That said, it is easier to install from the non-ISO image. I'd have to ask some if my coworkers about whether BizSpark and DreamSpark even offer physical media. How bad is your internet connection?
Especially be cautious if your friend has an .edu address and uses it to obtain DreamSpark, but works in an administrative/business department of the school. I have heard of Microsoft asking DreamSpark subscribers months into the program to prove academic status. I suspect this happened to one of my coworkers, because one day he suddenly decided he "needed" to register for a class. Microsoft is also cracking down on schools. My school is finding it tougher and tougher to prove "academic use" in the admin areas.
The article is a little long, and I do a lot of hand-holding for potential newcomers. Constructive feedback is actively appreciated, especially if I am propagating bad info . . .
I tried it out and I guess never used it like that. I thought the acceptable switch value could be a broader range. I usually use switch for enums and numbers so never actually tried what I was say. Doh.
Overall good introduction to speech synthesis. Although I would use SpeechSynthesizer.SpeakAsyncCancel(Prompt prompt) or SpeechSynthesizer.SpeakAsyncCancelAll() instead of just disposing the SpeechSynthesizer object in order to stop the async speak.
Hmm, this could be a loaded question. Does the instructor think JUST the methods should be moved to another CS file or does the instructor think they should be in their own class? In C# you can have a class definition in multiple CS files. So it would depend what the instructor actually wants you to achieve. The instructor is most likely wanting you to separate certain types of logic from other types of logic. For example if you were going to call into a database, you would most likely want to abstract the database calls from UI logic. That way if you wanted to switch out the database, you are only replacing the data layer rather than changing the UI logic. A perfect example of this is in either a web form or win form application. You have a form that has a designer to make the UI. There is a designer cs file that is created which has objects that are linked to the elements in the UI. You also have a code behind cs file that would include your events and methods. Both files are contain a partial class definition. They are separated because the designer file is auto generated by the IDE whereas the code behind file you are writing. At compile time they are combined into one file, but in visual studio they are kept logically apart. (All of this is also assuming you are using .net 2.0 or higher, which I would assume you are...) You can read more about partial classes at: http://msdn.microsoft.com/en-us/library/wa80x488(v=vs.110).aspx tl;dr There may not be enough information to determine what the instructor actually wants from you. Moving methods to a second cs file can mean a lot of things
A few more answers.... I think I'm right on all these... &gt;Which of the following is an invalid variable name in C#?# &gt;Mixed up It has a space. &gt;A=5, B=11 and C=9, &gt;Console.WriteLine (“Answer = {0}”,B+A+4*C); Order of operations is important here. 11 + 5 + 4 * 9 = 11 + 5 + 36 = 52 "Answer = 52" will be printed. &gt;Which of the following is a reserved word in C#? &gt;Char The others have different casing than the reserved words. &gt;Which of the following is a valid C# assignment statement? &gt;value=value+1; == is a comparision operator. x+2=x; is not an assignment. 
I used the reverse of this (taking speech and using it to convert to keystrokes) with my Steam Voice Driver application. Was a fun little project, until I posted the code and people posted how bad my practices are. 
The post is long, but I really appreciate the chapters at the top. Great for reading during my lunch! I referenced your article in my [latest post](http://thedailydeveloper.com/extending-asp-net-mvc5-identity-and-role-based-auth/) as well!
This is pretty interesting, I didn't know there was a speech synthesizer in .NET.
I'm curious - what sort of problems would need this sort of capability?
Microsoft is a strange place to interview for. I can't say that the interviews I've had with them would lend themselves to finding these things out about you. 
The article is very accurate. Very often we can train someone who is interested in technology and understands why it is important. Even if they are not a great coder; style issues and bad habits can be corrected through code review and a culture of best practices. Most of the time in interviews we are looking at your ability to problem solve and your attitude/presence. That of course does not mean don't worry about your coding skills but it also means that you can be a superstar coder but if you are a cowboy who does not like to play with others you are going to have a hard time.
Yeah, I honestly do not think that these things were sought after attributes after my round of interviews with them.
Yeah, it was Looong! :-) Trying to hit a fine line and cover everything a newcomer would want to know, as well as keep it of interest to intermediate folks. Thanks for reading!
And the first loop would be a for and the second one a while (both would work, just a bit different) The difference between while {} and do while is that the first one checks the statement at the beginning too, while the latter always runs at least once 
Is there a library for that somewhere?
Same library actually. https://github.com/FallenWyvern/SteamVoiceDriver
MSDN : http://msdn.microsoft.com/en-us/library/microsoft.speech.recognition(v=office.14).aspx For those who don't want to look through my shitty code.
It's neat. As someone who's used both speech classes (synth and recog) it's essentially Kinect.
There is an entire field of computer science called [real-time]( http://en.m.wikipedia.org/wiki/Real-time_computing). The systems running the space shuttle are a great example of when it is probably not a good thing if the scheduler in your OS pauses execution of your application.
An interface implies a contract, that you promise the class will provide the interface's methods and properties. There is no way to inherit from an interface without fulfilling that contract. There are two ways you might "group" classes without using an interface. The simplest thing is to have them in the same namespace. If that is impractical, an attribute might be better. You can then use reflection to find all classes that are decorated with that attribute. 
Just keep in mind that those interfaces imply that the class can DO that. A Burnable interface would probably have a Burn() method, and every class that implements it will need that. And a monster interface might have a "scariness" property and everything that implements it would need to implement it. It's more than just grouping, it is stating that a class is capable of doing something.
Interfaces are my least favorite way to define an object or functionality. I find abstract classes to be superior in many ways. Abstract classes don't have to do anything: abstract class Food{} is a complete and valid class. Now you can have : abstract class ReadyToEat : Food {} and abstract class NeedToCook : Food { public void abstract PrepareFood(); } which begets: class Pizza: NeedToCook {} class Gum : ReadyToEat{} And now you can hold them all in List&lt;Food&gt; and test them with: foreach(Food foodItem in FoodItemList) { if (foodItem is NeedToCook) { NeedToCook myNextMeal = foodItem as NeedToCook; myNextMeal.PrepareFood(); } } The only time I use interfaces is when something other than C# needs to talk to my code.
Hm. Well, if you really intend to treat them all as `Food`, then no. Think of it this way: if `Gum` shouldn't be implementing `PrepareFood`, then it really shouldn't be a `Food` in the first place. Much in the same way that you wouldn't implement `Food` for class `Crowbar`. Either you need to rethink your interface, or create a different one to supplement your `Food`, perhaps `Chewable`.
What's the benefit of abstract vs plain inheritance? Like Class: Food -Method: AddHP(); Class ReadyToEat: Food -Method: Chew(); Class NeedToCook : Food -Method: Preparefood(); I could still hold them in a list called &lt;Food&gt; couldn't I? If so, I could still do a foreach and the rest of that... unless the iterator.mynextmeal.PrepareFood(); would fail because Gum doesn't have it... or because Food doesn't have it? Honestly, my job has me programming C# and I love it, but I feel like i'm limiting myself by sticking with stuff I know so I'm trying to stretch out into finding out what I'm not using (Interfaces, Abstract Classes, Linq) and try to just use them in little fun projects.
Yep, you can inherit from (implement) multiple interfaces. And then if you have a method MoveAll(Non_Static_Character[] allCharacters), you'll be able to safely loop through all the items in that array and call their Move() method without knowing if they are a Player of a BigMonster.
Well Gum is still food (perhaps all food gives you HP back, if it were a game) but some food has a "Roast()" method which refines that food to provide more HP. In that case, traditional inheritance would probably work better than an interface, because Gum doesn't have Roast so it isn't homogeneous to the rest of Food the interface is a bad idea. But then my mind goes "What if I have a bigger generic class like food that gum and meat each inherit from but the food class implements an interface? How can I use that?"... I don't know if anyone WOULD, but because you CAN it makes me want to think of interesting things to do with it.
Allow me to be lazy (from MSDN): &gt; Abstract classes are closely related to interfaces. They are classes that cannot be instantiated, and are frequently either partially implemented, or not at all implemented. One key difference between abstract classes and interfaces is that a class may implement an unlimited number of interfaces, but may inherit from only one abstract (or any other kind of) class. A class that is derived from an abstract class may still implement interfaces. Abstract classes are useful when creating components because they allow you specify an invariant level of functionality in some methods, but leave the implementation of other methods until a specific implementation of that class is needed. They also version well, because if additional functionality is needed in derived classes, it can be added to the base class without breaking code. I have only once found the "may inherit from only one abstract (or any other kind of) class" to be a hindrance, but the fact I could have default implementations over-weighed the trouble it caused. Really, how many times have you been in a TreeView and said to yourself "This Node really needs two parent Nodes"? Adopting that paradigm makes inheritance easier to visualize.
*Really, how many times have you been in a TreeView and said to yourself "This Node really needs two parent Nodes"?* Oh god, if I had a nickle for every time that happened... I'd not have a single nickle. I guess I still don't see the point of an abstract. I can inherit from a full class (and still have the 1 inheritance limit)... it's just not "done" yet. I'm sure it's like polymorphism, one of those things where you won't really get it until you've tried using it once.
Sometimes it just makes more sense to derive from an abstract class that intentionally leaves some functionality not implemented... For example, you can have class Cat and Dog derive from abstract base class Animal which leaves out some species specific implementations, or you can have class Dog derive from a fully implemented Cat class. But a Dog is not a Cat... 
&gt; I guess I still don't see the point of an abstract. I can inherit from a full class There's no benefit to inheriting from an abstract class over a concrete class. But you're thinking about it from the wrong point of view. Think about it from the other side. You're the one *writing* the class that will be inherited. You can implement all the functionality that depends on things all the child classes will definitely have in common, but you don't know all the details of how the child classes will be implemented. You know they'll have *something* that CalculatesFuzzyLogicDecision(), but you have no idea how they will do that calculation. So you declare CalculateFuzzy() as abstract and implement your own FindBestPath() assuming it's been implemented. Abstract classes can't be instantiated and child classes must implement abstract methods, so you know it'll be implemented before it's called.
It sounds like you're just talking about separate IEdible and IRoastable interfaces. Everything that is food implements IEdible; only some food implements IRoastable.
It sounds to me like this is a case where your base interface isn't well defined and is causing some confusion. Perhaps a situation like this would be more reasonable interface IFood { public double HP { get; } } interface IRoastableFood : IFood { public void Roast(); } public class Gum : IFood { public Gum() { HP = 5; } public double HP { get; private set; } } public class Chicken : IRoastableFood { private bool hasBeenRoasted; public Chicken() { HP = 25; hasBeenRoasted = false; } public double HP { get; private set; } public void Roast() { if(hasBeenRoasted) HP = 0; // Burnt the Chicken!! HP *= 1.2; hasBeenRoasted = true; } } Obviously this is just a basic example but hopefully it sets up a situation where you can see how these interfaces can be strung together to create a dynamic set of objects and interfaces. A few ways you could improve this * Add a GetEaten() method to the IFood interface that returns the HP, but sets it to 0 first so that it can't be eaten more than once. * Create an IChewableFood that inherits IFood and adds a Chew() method. The chew method returns a fraction of the HP each time it gets called until there is no remaining HP. This would be great for the Gum class to implement. * Create the IPlayer interface that has a method called Eat(IFood) which takes in a food object and can eat it, thus giving the HP to the player. And so on and so forth. 
Actually that's a great example. Thank you.
Well, you'd need it if you were writing family tree software. Regarding abstract classes: I basically never use them in user-facing software. Everywhere I would have used an abstract class to provide functionality, I have been able to do without (especially by putting extension methods on interfaces). -------- That said, I do use abstract classes when I am writing unit tests. If I have several implementors of an interface INeedToBeTested, and all of those implementors have to pass the same tests, I make an abstract class that 1. has a property of type INeedToBeTested 2. doesn't initialize that property 3. defines all the tests that an implementor of INeedToBeTested should pass Then, for each implementor of INeedToBeTested, just define a subclass of the base test class, and all that subclass does is set the INeedToBeTested property in its constructor. For my setup (VS, Resharper, and NUnit tests) this all works nicely, allowing me to see which implementors fail which tests, defined with a minimum of verbosity.
Awesome. I'm glad this thread wasn't downvoted/flamed or redirected to StackOverflow. I love that you guys can take my theoretical questions and just throw out excellent examples like this. I was worried by not having a definite question, but wanting a discussion, wouldn't have worked as well. All this interface stuff is makin' me itch to make a game. I think I'll throw something simple out just for fun and practice.
Sealed is important for when you're developing a class library or API that other developers will be using. If you're writing code that only you use then of course you could just remember that you don't want to inherit that class. However it's still not a bad practice to use the sealed keyword that way if months down the road you revisit some old code you can at least remember that there was a reason you made it that way.
I would consider that bolt-on functionality a great use of Interfaces. &gt;Often, you write your APIs to use interfaces, but provide an abstract class that provides the common implementation of the interface. Here, it would depend on the consumers/users of the 'API'. It's a literal, exposed-to-the outside-world, everybody-welcome API, yes, use interfaces. However, if it's just another frequently-used, rarely-updated module in my internal company project, I'm gonna skip making an Interface for it. 
*It's entirely possible you've never had to write an API for yourself* Not just possible, that's a fact! The team I work with is tiny (10 people, of which 4 are programmers and everyone else is business or support) and each of us has specialities so when we integrate our components, it's not like traditionally exposing an API. So, I've had socket listeners that allow control of my application over local networks, from my co-workers phone app. I don't consider that an API, although I still had to write a doc up describing how to properly send me data. But it's a good tool in the toolbox, and an extra thing I can think about when designing my applications.
You cannot always make mocks of abstract classes because they may contain non-virtual members.
Interfaces make testing far easier - allowing you to set contracts between different components of your application (or even steps in business logic) and isolate them from one another. I've got an AccountManagement class, it needs to load a customer from the database, ensure that the who requested it was authorised to access the customer, change some value on a customer, and then store the updated customer back in the database. If I separate the database access and authorization from the AccountManagement into specific contracts, I can use mocking frameworks like Moq to specify expected behaviour on-demand. (Caution: wall of text, sorry) Here's an example: interface IDataStore { Customer GetCustomerById(int id); void UpdateCustomer(Customer customer); } interface ICustomerAuthorizationService { bool IsUserPermittedAccessToCustomer(User user, Customer customer); } public class AccountManagement { IDataStore _dataStore; ICustomerAuthorizationService _customerAuthService; public AccountManagement(IDataStore dataStore, ICustomerAuthorizationService customerAuthService) { _dataStore = dataStore; _customerAuthService = customerAuthService; } void ResetCustomerBalanceOwing(User user, int customerId) { var customer = _dataStore.GetCustomerById(customerId); if (!_customerAuthService.IsUserPermittedAccessToCustomer(user, customer)) { throw new AuthorizationException("User is not permitted access to customer", user, customer); } customer.BalanceOwing = 0; _dataStore.UpdateCustomer(customer); } } Then I can define my unit tests like so: public class TestAccountManagement { [Test] public void WhenUserIsPermittedAccessToCustomerUpdateBalanceOwing() { int customerId = 5; int expectedBalance = 0; var customer = new Customer { BalanceOwing = 5 }; var user = new User(); var dataStore = new Mock&lt;IDataStore&gt;(); dataStore.Setup(s=&gt;s.GetCustomerById(customerId)).Returns(customer); var customerAuthService = new Mock&lt;ICustomerAuthorizationService&gt;(); customerAuthService.Setup(s=&gt;s.IsUserPermittedAccessToCustomer(user,customer)).Returns(true); var accountManagement = new AccountManagement(dataStore.Object, customerAuthService.Object); accountManagement.ResetCustomerBalanceOwing(user, customerId); Assert.That(customer.BalanceOwing, Is.EqualTo(expectedBalance)); customerAuthService.Verify(v=&gt;v.UpdateCustomer(customer), Times.Once()); } [Test] public void WhenUserIsNotPermittedAccessThrowAuthExceptionAndDontUpdateCustomer() { int customerId = 5; int expectedBalance = 5; var customer = new Customer { BalanceOwing = 5 }; var user = new User(); var dataStore = new Mock&lt;IDataStore&gt;(); dataStore.Setup(s=&gt;s.GetCustomerById(customerId)).Returns(customer); var customerAuthService = new Mock&lt;ICustomerAuthorizationService&gt;(); customerAuthService.Setup(s=&gt;s.IsUserPermittedAccessToCustomer(user,customer)).Returns(false); var accountManagement = new AccountMAnagement(dataStore.Object, customerAuthService.Object); Assert.Throws&lt;AuthorizationException&gt;(() =&gt; accountManagement.ResetCustomerBalanceOwing(user, customerId)); Assert.That(customer.BalanceOwing, Is.EqualTo(expectedBalance)); customerAuthService.Verify(v=&gt;v.UpdateCustomer(customer), Times.Never()); } } When I get a bug report that the system crashes if they give an invalid customerId (oops, no null checking!) then it's easy enough to mock that behaviour from the database. If I need to change the database access - maybe we're switching backends, or we need to change the model, or optimise the query used to load data, then I don't need to modify other parts of the system. 
What you need is more than one interface. I would recommend a Food interface that contains shared methods from all three and then have an abstract class or interface that inherits from food called preparable that only pizza and burger inherit from. It would be a pretty poor design if gum told the program it is preparable when in fact it is only a food and is not preparable. You just need to make sure that each interface has methods that accurately describe it. This way all three would be seen as a food but pizza and burger would be seen as both a food and preparable. Also this would mean that if something is preparable it also has to be a food.
Suppose your SUT (system under test) is a Person object that has a method Eat(IFood foodToEat). You can use a mocking framework to create an mock implementation of IFood to pass to the Person's Eat method. You're not testing the interface, you're testing the Person object (e.g., to see how it behaves depending on what kind of IFood is passed in) and just mocking the Person's dependencies.
This thread is making me hungry.
Mmmm... Windows and Linux aren't real-time operating systems though; so I guess that's why you were being downvoted.
I found a missing ; on line 26 And using the normal parse it will crash if it's not valid, use tryparse or a try catch block. The comment with end while is fine
How is this different from making that single test datadriven? var values[] = new { { 0, false}, { -1, false} , {1, false} {-2, true} ...;} foreach(var case in values) Assert.IsTrue(case[0].IsEven() == case[1]); 
First of all, please stop with these real world nonsense examples. Fine, gum might be considered a food by some even though "preparation" just requires unwrapping it, but who cares? What kind of program do you plan to write that any of this will matter? The problem with what your doing is that there are a million insights you could have about how to do what you want, but all of them are meaningless. Better is real world examples of what could actually occur in code. So imagine I have a method that takes a "list like object", traverses it and builds some kind of relationship between them. Do I *have* to have a List as in: BuildRelations(List&lt;SomeObject&gt; list) { } ? Most likely not, I could get away with just something that acts like a list: BuildRelations(IList&lt;SomeObject&gt; list) { } Or maybe IList is even too specific. If I'm just traversing the "list" once via, say, a foreach, then the only functionality I'm using is enumeration. So: BuildRelations(IEnumerator&lt;SomeObject&gt; list) { } So getting back to your example, no you can't say "I'm only going to implement a part of this Interface" (which as others have mentioned, would better be called a "contract"). What you actually do in practice is to make your interfaces/contracts more granular. Repository pattern example: public interface IRepository&lt;T, Tid&gt; { IList&lt;T&gt; GetAll(); T Get(Tid id); void Update(T obj); void Delete(T obj); void Delete(Tid id); } public interface ILinqRepository&lt;T, Tid&gt; : IRepository&lt;T, Tid&gt; { IList&lt;T&gt; GetMatching(LinqExpression exp); void DeleteMatching(LinqExpression exp); } public interface ISQLRepository&lt;T, Tid&gt; : IRepository&lt;T, Tid&gt; { IList&lt;T&gt; GetMatching(string sql); void DeleteMatching(string sql); } Now you can implement a class that implements just IRespository, or you could implement the Linq repository (which includes IRepository) or you could even implement both Linq and SQL in the same class. Clients, however, should be dealing with your class through one of those interfaces so they wouldn't be aware of all the methods your class actually provides, nor should they be.
Your approach will not give a test result for every case if one of them fails.
&gt; What kind of program do you plan to write that any of this will matter? Well, none. I'm looking into the theory, the base, of how interfaces work. I've got a few tutorials online on implementation, and can see how you use it but I like throwing out ideas. "Can you do this, what if you do this?" sort of stuff.
Well, hopefully the rest of what I said was helpful. It's just these "model real world" examples are dangerous because they lead you into nonsensical complexity that you could avoid if you saw OO as a way to arrange code and not as a way to model the real world (e.g. "Ok, I have a 'bird' base class, and I added a 'fly' method. But now I'm trying to implement a 'chicken' class, what do I do!").
One of the big advantages to interfaces vs an inheritable parent is that you can have multiple interfaces to describe something. That said, if you need something like an interface with less stuff then just make a smaller interface. Think about it: The purpose of an interface is to define a set of methods and properties that are publicly available. So downstream, when you make a call to these things, what method will you call? You're looking at an *IFood* interface, so you **know** that the class will have a *PrepareFood()* method in it. However, you **won't know** (and shouldn't care) whether it's a pizza, a burger, or gum. So, break apart your interfaces a bit more: public interface IEdible { void Ingest(); } public interface IPreparedFood : IEdible { void Prepare(); } And, all that said, you could consider taking the gum out of the wrapper as "preparing" it.
does it matter? edit: in any case for debugging you'll need to setup a way to catch the case that got broken.
It looks pretty cool. I really like the live updating of views in the browser. For anyone who's bought the upgrade version: What proof does it ask to check that you have 2012?
Line 7 is missing a comma Line 8 is missing an int Line 13 should be Console.WriteLine Line 14 has no Int32.Parse Line 16 needs a second totalmark after the or Line 26 is missing a ; (mentioned above) Line 32 should be ++ instead of -- (you've already circled this one) Line 41 should be WriteLine instead of writeline Line 48 should be {0} instead of {1} (you've already circled this one) Line 51 missing } (you've already circled this one) Edits: Adding them as I find them.
Glad I'm not the only one haha
Was annoyed that the event stream wouldn't play for me. Null something or other error. Oh well, I'm sure I'll get whatever what's new information from other sources, but it is sometimes nice to be spoon fed. Hopefully someone posts a youtube, or there is an archive...
Don't worry, he meant to say Notepad++.
How do you generate your list of numbers? I could be completely wrong here, but if it's a random list, then what's wrong is this: You instantiate an instance of Random, loop through your array, and pull off a random number to generate your list. When you instantiate a second Random instance for your shuffleArray method, the two instances probably have the same seed value. From the MSDN: http://msdn.microsoft.com/en-us/library/system.random(v=vs.110).aspx &gt;However, because the clock has finite resolution, using the parameterless constructor to create different Random objects in close succession creates random number generators that produce identical sequences of random numbers. If your code executes very quickly, the second Random you create -- the one in your shuffleArray function -- will generate the exact same sequence of random numbers as your first Random instance (the one that built the list of numbers). This is, of course, assuming that your number list is randomly generated. An easy solution is to use the same Random object for both the list generation and the shuffling. That way they will give a different sequence of random numbers.
Confirmed. I reproduced the method in VS2012. When I put a breakpoint before calling `shuffleArray` I could not reproduce the problem. After I saw your comment I removed that breakpoint and experienced the same issue as OP.
This is the current contents of my Main method. Would you suggest I simply send the same rand object to my shuffleArray function as opposed to creating a new one in that function? Algorithms alg = new Algorithms(); int[] numList = new int[1000]; int index; Random rand = new Random(); for (index = 0; index &lt; numList.Length; index++) { numList[index] = rand.Next (1000) + 1; } alg.shuffleArray(numList); EDIT: That worked! Thank you for your help!
In addition to that, the Random.Next() method already will not return the upper bound. So doing Random.Next(9) will only return 0 to 8. As an aside, your shuffle algorithm is flawed; you should be doing randIndex = rand.Next(cursor, numList.Length); Doing it the way you have there will result in n^n possible swap sequences, while there are only n! possible permutations. See [here](http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#Implementation_errors).
You're welcome! Also see MEaster's comment. Your shuffling algorithm is biased towards certain shuffles and isn't truly random.
&gt; (e. g. some internet forum (like reddit), that could become a problem. (I see what you did there.
This is indeed great news! Do you have a link to the article? Edit: never mind, I'm just too tired, found the info
I wasn't aware I had forgotten it, I will edit the post. Thanks! 
Internet Explorer. Of course
Will this finally shut up the 'Mono isn't safe?' folks?
Now it'll be proven to be unsafe, because MS supports it! 
I don't think I've ever heard any dev say that. But jeeze, I hope so.
I agree with jpfed, and this is in-line with the I in SOLID (interface segregation principle).
This!
If your Business is new you can get Bizspark like already mentioned. If you have an established business then the Action Pack Developement and Design is worth a look.
What is going on with me?? I am starting to like Microsoft!? Help!
I used chrome, worked for me
&gt; Today we released the following portable libraries with our new license, on NuGet.org: Not familiar with xamarin's tools for VS, what was the options that a developer had before this announcement to for example use an httpclient in their project? other oss implementations ?
Mono has not implemented WPF. You can read [here](http://www.mono-project.com/WPF) about it. There is however a GUI framework called [Xwt](https://github.com/mono/xwt) for cross platform development. It can use WPF as its backend.
So this means you can develop in a browser with the same functionality as visual studio? 
Hmmm, what's in the NSync repo?
It's a joke. There's a project that was originally called NSync, then renamed to Shimmer (and again renamed to Squirrel). I told the devs that they should have stayed with NSync because it was a good name, so I forked it and changed the name back. But they were right, the google-fu on the NSync name was no good. https://github.com/Squirrel/Squirrel.Windows
I like the idea of these online programs being available. But I don't like it because it reminds me of the enclosed restrictiveness of mobile/iOS. As a nerd and developer, I do most things on my desktop because of the customization and efficiency available for power-users.
Ill be following this closely. This is simply awesome.
Very interesting.. I was trying to get this going last night without any tutorials. I was going in through the azure management tutorial and trying to link vs online to my account but kept running into eligibility issues with my MSDN ultimate account. (in the app services section). Anyways, it'll try this tonight and hopefully get better results..
Except you will get a null reference exception from within the extensi on method, as the incoming value parameter is null and you are then using that parameter in the return statement. 
You are right, it not a good example. I'll change it.
This x 1000. Despite the confusing configuration system, WCF is great. Using WSDLs and service references it's almost plug &amp; play, but I prefer a custom service client or channel factory that I can bundle and re-use with minimal effort.
Hard to say with just the code snippet provided, but are you making sure that the task returned by your await line has completed before inspecting the buffer's contents? Code will continue to execute past an await line while the awaited code is being processed.
Set the SelectedItem property of the tab control to the tab page you want to switch to.
If your tab control is `tabControl` and the page you want to switch to is `tabPage`, then you would do this: tabControl.SelectedItem = tabPage; This would go in the Click event handler of your button.
thanks for the help. 
In the solution explorer right click where you want the new file to go then select: 1. Add 2. New Item 3. Code File It's more likely that your lecturer meant the methods should go into a separate *class* rather than plain .cs file. It's usual to group related methods into distinct classes and have one class per file. To add a new class follow the instructions above but select Class.. for the 2nd step. Methods in classes need to be marked as *public* in order to be callable from other classes. **EDIT:** If you post your code I think someone could help you refactor it fairly easily.
[They should probably fix that](http://i.imgur.com/knW2DzX.png)
&gt; The "Learn fast be adaptive" point is nonsense on many levels. First of all, companies don't switch between programming languages on a monthly basic. They usually never switch. If someone is an expert in C#, its intellectual waste to ask him to be adaptive and learn python. Just hire a python expert instead. If you work at a smaller place (admittedly not MS) that just isn't practical or realistic. My company can't hire enough people to handle all their initiatives, really, let alone an expert every time they need to touch something in a new programming language. Anyway, no language is as hard as the first one. &gt; The other two paragraphs are just a bunch of buzzwords until he gets to the Experience life chapter, which is just nonsense. If you're from marketing or management thats a great guy. Interesting people know other interesting people, so when you know a guy that races a corvette, or was a professional snowboarder, thats just great. But if you're a developer and you have to work with his code, all of those irrelevant things are actually irrelevant... I think the point here is that there's more to hiring than just coding skills. Jobs are, after all, partially social; who wants to spend 40 hours a week with a person with no social graces whatsoever whose *only interest* is programming?
Check below for the parsec flavored options I offered below.
Rewrite the script in C# using the corresponding .NET APIs?
Are there ways of hooking into Exchange with C# that doesn't involve powershell? I searched around before but only ever found references to powershell.
I have no idea why I didn't come across that when doing research. I'm going to check into EWS. 
MainPage is a partial class. This means that what you are showing is only part of the definition. Are you sure there isn't a definition of Initialize in this other part?
For me, part of it is being able to take advantage of the Microsoft dev tools from non-Microsoft operating systems. I guess separating dev os from hosting so means MS can remain relevant even if worst comes to worse and their desktop platform slumps in market share. 
My advice would be just to go for Express. There really aren't many limitations until you start needing profiling and testing stuff. You can download it as an ISO and burn your own disk. Once you find you're missing something you need upgrade then.
What do you prefer for nUnit instead of built in MSTest?
I came back to the problem after taking a break and tried to run the program but now I am getting a different error. It involves "InitializeComponent" and it may have to do with what you are saying. I'm still learning about classes and definitions but it sounds like what you're saying is that MainPage is a partial class, meaning that it is made up of multiple definitions, and there is a definition that is missing. When I use the Error list it says **Type 'Save_The_Humans.MainPage' already defines a member called 'InitializeComponent' with the same parameter types**. Here is the code for "MainPage.g.i.cs": //// EDITEDOUT\2013\Projects\Save The Humans\Save The Humans\MainPage.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "B4F19F35E368C68E9AF322F2608F8A71" //------------------------------------------------------------------------------ // &lt;auto-generated&gt; // This code was generated by a tool. // // Changes to this file may cause incorrect behavior and will be lost if // the code is regenerated. // &lt;/auto-generated&gt; //------------------------------------------------------------------------------ namespace Save_The_Humans { partial class MainPage : global::Windows.UI.Xaml.Controls.Page { [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 4.0.0.0")] private global::Windows.UI.Xaml.Controls.Page pageRoot; [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 4.0.0.0")] private global::Windows.UI.Xaml.Controls.Button startButton; [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 4.0.0.0")] private global::Windows.UI.Xaml.Controls.Canvas playArea; [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 4.0.0.0")] private global::Windows.UI.Xaml.Controls.StackPanel human; [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 4.0.0.0")] private global::Windows.UI.Xaml.Controls.TextBox gameOverText; [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 4.0.0.0")] private global::Windows.UI.Xaml.Shapes.Rectangle target; [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 4.0.0.0")] private global::Windows.UI.Xaml.Controls.Button backButton; [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 4.0.0.0")] private global::Windows.UI.Xaml.Controls.TextBlock pageTitle; [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 4.0.0.0")] private bool _contentLoaded; [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 4.0.0.0")] [global::System.Diagnostics.DebuggerNonUserCodeAttribute()] public void InitializeComponent() { if (_contentLoaded) return; _contentLoaded = true; global::Windows.UI.Xaml.Application.LoadComponent(this, new global::System.Uri("ms-appx:///MainPage.xaml"), global::Windows.UI.Xaml.Controls.Primitives.ComponentResourceLocation.Application); pageRoot = (global::Windows.UI.Xaml.Controls.Page)this.FindName("pageRoot"); startButton = (global::Windows.UI.Xaml.Controls.Button)this.FindName("startButton"); playArea = (global::Windows.UI.Xaml.Controls.Canvas)this.FindName("playArea"); human = (global::Windows.UI.Xaml.Controls.StackPanel)this.FindName("human"); gameOverText = (global::Windows.UI.Xaml.Controls.TextBox)this.FindName("gameOverText"); target = (global::Windows.UI.Xaml.Shapes.Rectangle)this.FindName("target"); backButton = (global::Windows.UI.Xaml.Controls.Button)this.FindName("backButton"); pageTitle = (global::Windows.UI.Xaml.Controls.TextBlock)this.FindName("pageTitle"); } } } 
centurijon is correct. You need to delete this from your MainPage class - private void InitializeComponent() { throw new NotImplementedException(); } It's already being defined in the generated partial class code so you now have a duplicate method.
EDIT: I deleted *private void InitializeComponent() { throw new NotImplementedException(); }* from the .xaml.cs and now have a completely different error. It's starting to seem like I just made some major mistakes when trying to follow along so I might go back and start from scratch. The new error is: &gt; Error 1 'Save_The_Humans.MainPage' does not contain a definition for 'TextBlock_SelectionChanged' and no extension method 'TextBlock_SelectionChanged' accepting a first argument of type 'Save_The_Humans.MainPage' could be found (are you missing a using directive or an assembly reference?) C:\Users\Derek\Documents\Visual Studio 2013\Projects\Save The Humans\Save The Humans\Save The Humans.xaml 62 97 Save The Humans 
That error means that a control has an event handler pointing to a method that doesn't exist. Check the .xaml file. One of your controls has a SelectionChanged handler like SelectionChanged="TextBlock_SelectionChanged" You can remove that handler, or add the method to your MainPage class.
&gt; Even if you work for a smaller company, is there really much need to be able to switch to a different programming language? The smaller companies I worked for usually stuck with one language to do projects in Well, look, a lot of the time you're not starting from scratch but building on top of or extending something else. My main thing is C# but I also have written, at work, Perl, Python, VBA, Powershell, JavaScript, and probably some others, and also I sometimes work on things that are more properly the role of a sysadmin than a software developer. Some of those have been longer projects but most have them have been of short enough duration that by the time you found someone to do it I could have finished it even with my limited understanding of the technologies. If you're starting a whole new project I suppose it's a different story, and I suppose it's also a different story if you're at a company where making software is the main thing rather than in service of other objectives. Still, being able to say "Oh, this needs to be Python? Go hire a Python wizard" is a luxury not afforded to every company (this is especially true in the world of nonprofits). Anyway, it certainly doesn't *hurt* to be adaptable; even popular languages are constantly evolving and some languages that are popular today are probably not going to be around or very important in 20 years.
Some pros and cons. Pros for NUnit would be these: **Test Cases** [TestCase(1)] public void TestMethod(int value) { // value gets 1 } **I also like the newer assert syntax** Old: Assert.AreEqual(expected, actual); // is that right? or does actual go first? Newer: Assert.That(actual, Is.EqualTo(expected)); **Also, things like exceptions during an act:** Assert.Throws&lt;ArgumentException&gt;( ()=&gt; testingclass.Act() ); **Inheritance** Honestly, this is a VERY edge case scenario and test classes shouldn't normally inherit, but I did have issues with inheritance and order of methods with MSTest. I can't remember any specifics, but sufficed to say, I bailed on it quite fast. **Pros for MSTest?** **Integration with Visual Studio for running tests** Running tests do not require anything special like Reshaper **Integration with Visual Studio for code coverage** Yeah, I believe there's some code coverage percentage that gets put into VS. ... Yeah, I bottomed out on MSTest a bit, I honestly haven't used it that much. In any case, that's off my experience of just recently retrying MSTest. I really don't mind constructive feedback if I'm wrong! :)
For future reference post code on something with at least some formatting or syntax highlighting. It's impossible to read like this. 
Also, include *all* error messages.
One of the issues about MSTest is that it is only compatible with Visual Studio. If it happens some day that you may have to use another IDE you won't be able to run the tests anymore. NUnit, in other hand, is not tied to any specific IDE, so you could change for Sharp Developer, for example, and still be able to run all of the tests.
I haven't had any speed issues with it, and you don't need VS installed just the test agent: http://www.microsoft.com/en-us/download/details.aspx?displaylang=en&amp;id=1334
You can use the MS Test Agent: http://www.microsoft.com/en-us/download/details.aspx?displaylang=en&amp;id=1334 But not sure how that would work inside another IDE.
PART II of this tutorial is now avaliable at http://redd.it/1qpuxn.
Next step is to read the IL
I am not really sure what you are testing for. I took your code as-is and .NET's implementation and pit them against each other - once with GetBit vs. Get and once with SetBit vs. Set. In both cases, your implementation was faster than .NETs. Can you post your test code? I may be testing something completely incorrect. **Here are the results I see (ignore the first set of numbers in each test):** *Test for setting..* *CLR BitArray took: 0* *Custom BitArray took: 0* *CLR BitArray took: 8476* *Custom BitArray took: 6006* *Test for getting entire array.* *CLR BitArray took: 0* *Custom BitArray took: 0* *CLR BitArray took: 4238* *Custom BitArray took: 3425* *Press any key to continue . . .* **Here's my code:** using System; using System.Collections; using System.Collections.Generic; using System.Diagnostics; using System.Linq; using System.Text; using System.Threading.Tasks; namespace ConsoleApplication6 { class MyBits96 { public uint Part0; public uint Part1; public uint Part2; public void SetBit(int Bit) { if (Bit &lt;= 31) Part0 |= 1U &lt;&lt; Bit; else if (Bit &lt;= 63) Part1 |= 1U &lt;&lt; Bit - 32; else Part2 |= 1U &lt;&lt; Bit - 64; } public uint GetBit(int Bit) { if (Bit &lt;= 31) return Part0 &amp; (1U &lt;&lt; Bit); else if (Bit &lt;= 63) return Part1 &amp; (1U &lt;&lt; (Bit - 32)); else return Part2 &amp; (1U &lt;&lt; (Bit - 64)); } } class Program { static void Main(string[] args) { Console.WriteLine("Test for setting.."); DoIt(100); DoIt(1000000000); Console.WriteLine("Test for getting entire array."); DoIt2(100); DoIt2(10000000); } private static void DoIt(int p) { BitArray a = new BitArray(96); Stopwatch watch = Stopwatch.StartNew(); for (int i = 0; i &lt; p; i++) { a.Set(i % 96, true); } Console.WriteLine("CLR BitArray took: {0}", watch.ElapsedMilliseconds); MyBits96 b = new MyBits96(); watch = Stopwatch.StartNew(); for (int i = 0; i &lt; p; i++) { b.SetBit(i % 96); } Console.WriteLine("Custom BitArray took: {0}", watch.ElapsedMilliseconds); } private static void DoIt2(int p) { BitArray a = new BitArray(96); Stopwatch watch = Stopwatch.StartNew(); for (int i = 0; i &lt; p; i++) { for (int j = 0; j &lt; 96; j++) { a.Get(j); } } Console.WriteLine("CLR BitArray took: {0}", watch.ElapsedMilliseconds); MyBits96 b = new MyBits96(); watch = Stopwatch.StartNew(); for (int i = 0; i &lt; p; i++) { for (int j = 0; j &lt; 96; j++) { b.GetBit(j); } } Console.WriteLine("Custom BitArray took: {0}", watch.ElapsedMilliseconds); } } } 
Microsoft's implementation uses an array of ints, rather than individual fields. This means that their Set implementation looks a bit like this (courtesy of [JetBrains dotPeek](http://www.jetbrains.com/decompiler/)): public void Set(int index, bool value) { if (value) this.m_array[index / 32] |= 1 &lt;&lt; index % 32; else this.m_array[index / 32] &amp;= ~(1 &lt;&lt; index % 32); } This means that they don't need to branch to figure out what int to manipulate, which in something this simple is going to make a significant difference.
How would I go about doing that?
No speed issues? [Here, have some random benchmarks.](http://borntocode.co.uk/post/mstest-vs-nunit-run-times) If MSTest is working for you and you have no need to test for exceptions in a sane way, that's cool. I'll just say that making the move from MSTest to NUnit for us was pretty much a matter of a simple find and replace and including some packages and we haven't looked back since, so I'm woefully out of date on what MSTest is bringing to the table over other testing frameworks, other than a certain amount of sadness. The tooling was aggressively shitty enough in the past that I'd advise everyone to look elsewhere for testing needs to be fulfilled first, but if you have something working for you, why not?
&gt;I need to be able to quickly tell if a bitarray is all zeroes or all ones. You can do this without creating your own BitArray: var allFalse = array.Cast&lt;bool&gt;().All(x =&gt; !x); var allTrue = array.Cast&lt;bool&gt;().All(x =&gt; x); I'm not sure on the "quickly" part - that will depend on how often you call it and what your definition of "quickly" is for the project. There are almost definitely faster solutions, but this will logically get you the results you need without having to create your own BitArray class. Run a few speed tests and see what you think.
And, extending this, you could easily make a custom BitArray with the logic that you need: public bool AllZeros() { return this.m_array.All(v =&gt; v == 0); } public bool AllOnes() { // this is probably the wrong value to check for, // but I'm too lazy to look up what a 'full' Int32 will look like in hex // and if the BitArray is using signed or unsigned integers return this.m_array.All(v =&gt; v == 0xFFFFFFFF); }
It's an array of signed ints, which surprised me slightly. There's also Int32.MaxValue for those who can't remember that an Int32 has 32 bits, and 4 bits = 1 hex digit ;)
"You aren't seeing the forest through the trees." You're calling a method on a Node (*this*), and passing in the Node you want to insert (*Node theNode*) and the position that you want to place it (*int target*). Then you iterate *from the current Node* and stop when you hit the end of the list, or reach the target position. BUT you aren't considering where the list actually starts. You need to start iterating *from the head of the list* instead of from the current Node. Other than that it's not too bad. It could be cleaned up a little, but for coursework you're doing well. IMO Make two classes: 1. Node - Pretty much as you have it, but *without* the constructors or insert method 2. NodeList - Keeps track of *managing* the list. Meaning that it has a variable (or property) for the header, and a *void Insert(int position, int value)* method will go here. ------ One note: this == null Cannot happen. Think about it - you can't call a method on an object that doesn't exist, so *this* can never be null. Remove your checks that involve *this* and *null* ---- Edit: if I guessed wrong, and this isn't coursework, the you can use a *List&lt;int&gt;* which already has an *InsertAt* method.
True. Though it does make me wonder just how much slower a for loop would be in this case.
+1 for the advice to split into two classes. Following the single responsibility pattern takes a bit practice, but pays big dividends later.
No. Worst case you are wasting 32 bit of register space when doing the calculation. Best case you can reserve the other half of the register to do something else. So in the end it is no worse than on a 32 bit processor.
I tried using longs and yes they are significantly slower. Even factoring in that you need less "parts".
Yes, Linq is completely unsuitable. I'm writing a game and speed is of the essence - I'm doing tens of millions of these per second. Linq is significantly slower. It also has side effects - greatly increases hidden garbage. I've used linq before for several things and rewriting them without using Linq resulted in a good speed increase and less garbage. I agree, Linq is great, but as syntactic sugar. For sheer performance it's best not to use it.
I suspect it might be slow, however I'm going to give it a shot and let you know. I'm using this tens of millions (decillions?) of times a second so it has to be fast and with low garbage generation as it's part of a game.
Thanks, this is great info! Hmm.. the are using signed bits! I thought that would effect the MSB but it seems you can get away with it...interesting!
What's the best way to do that?
Thank you! Will look. Edit: The simple count they use and the linq counts are too slow, unfortunately...
Those benchmarks were for VS 2010, they rewrote a lot of how MSTest and VS testing worked with 2012. You seem to just want to bash it though. Also testing for exceptions with ExpectedExceptionAttribute works fine for me, I'd be controlling what caused the exception with NSubstitute (or your fav here) so not sure why that isn't "sane". Anyway, I was just trying to see some of the Pros of NUnit vs VS 2012/2013 MSTest. Also looking at using SpecFlow or another BDD tool instead. I use nCrunch so my tests are always just running in the background so thats another reason I haven't even looked at any speed issues (and its been made much faster since 2010 : http://blogs.msdn.com/b/visualstudioalm/archive/2012/03/13/what-s-new-for-mstest-unit-tests-in-visual-studio-11-beta.aspx)
Use a for loop instead of linq then, its the same logic check
http://ilspy.net/
That might be your problem op. I am running ship. My system is a 3 yo xps15. Core i7. Nothing special.
It's worth noting that the app appears to run fine so far. According to the book there should be no error messages so I wanted to check in and see what I might have done incorrectly. 
Still too slow. The idea is, if I write my own class, when checking for all zeroes I can just test the underlying "chunks" instead of checking bit by bit.
Release or debug shouldn't make this kind of difference. IE, the total times of each might change, but the relation of each - that one is faster than the other - should not change. This is what I am puzzled by.
That's exactly what I'm talking about. public bool AllZeroes() { for(int idx = 0; idx &lt; m_array.Length; idx++) if(m_array[idx] != 0) return false; return true; } public bool AllOnes() { for(int idx = 0; idx &lt; m_array.Length; idx++) if(m_array[idx] != 0xFFFFFFFF) return false; return true; } You're checking whole integers at a time. That means 32x less loop iterations than checking each bit individually. If you want to make it more fasterer then duplicate the same logic using an int64 instead of int32, but then you could hit hardware limitations on some machines. Either way you do it, you have to be aware of edge cases. Namely when the number of flags you're checking isn't a multiple of 32. AllZeroes will be the same, but AllOnes will need to check against a special number either at the beginning or end of the loop, depending on your implementation.
I ran it in debug at first and it made a huge difference - for setting it , it took 8 seconds vs 17 seconds (your way taking 17) but on release it was 5 seconds vs 3 seconds (your way now taking 3 seconds and being the fastest). The getting was similar.
I don't think that would make the difference. Yes I am running debug, but that should just make my total times both slower than yours, not change the relation of the times. My PC is a 6yo Core I5-2320@3.00ghz. About half the speed of yours!
Try it. When running debug, only your code is running as such. So while the test code itself and the class you wrote both run with debug checks, the bit array code does not (it's compiled and ngened using release) Best guess right now for me is that that's what causing it.
I didn't know this existed. Thank you very much!
I put a final sample up top, and it works for edge cases too... 
Interesting thought .... will try. Edit: Tried it, and couldn't find a measurable difference.... 
You're the second person to get this kind of result, so I'm inclined to believe you. Will try. Edit: Strange.... ran in release mode and cannot find a measurable difference (I'm using stopwatch...)
What version of .net are you using?
Bear in mind that I skipped the code that checks that `index` is in the right range, and checks that the BitArray isn't modified as it's being enumerated over. If you skip these, yeah you're going to get better performance.
It was me trying to replicate something from a class I took 6 or so months ago. I wanted to use it with out anything built into the language like that. Thanks a ton. 
Check out [Media Browser](https://github.com/MediaBrowser/MediaBrowser/issues). I stumbled upon it today and plan on trying to get involved. There are plenty of Mac Apps written in C#, but I don't think there are many Mac-only C# apps. Most of these are Open Source and cross-platform. While you're at it look at [OpenRA](https://github.com/OpenRA/OpenRA) if you're wanting to see something powerful from C#.
I've done a sketch implementation using a parametrized `Count&lt;T&gt;`, which made bytecount manipulations available as extension methods on `Count&lt;byte&gt;`. The point was as part of a larger sketch of splitting numeric types into ordinals (`Ix&lt;T&gt;`) and cardinals (`Count&lt;T&gt;`), which is quite fun when you can have quicksort typecheck fully. The problem is you really need framework support for it to be really useful :)
What have you tried?
It depends on what you're doing. In this case yes, but if you're doing the `AllZeroes`/`AllOnes` often then using `long` should be faster than `int` for that.
The JIT actually compiles these into shift arithemtic instructions so it shouldn't matter.
You're going to have to post your code for me to help you.
&gt; Finally, the argument that the JIT converts the operations to bit shifts is dangerous for tons of reasons - not least that there are many versions of JIT (including Mono) and this is a library class that can run against multiple .NET versions. Most importantly, you should nevet expect the JIT to do the work for you, you should instead be explicit. The bitshift "optimization" doesn't optimize the code, so therefore go for readability since it is basically pointless. He could even write x / (1024 * 1024) and it would make no difference at all. This is the oldest optimization trick in the book so give the JIT-compiler authors a little credit. edit: Conclusion: do research before implementing optimizations. Don't assume anything from the compiler.
I appreciate the feedback. 1. Can you elaborate on the string formatter being too slow? I'm not entirely sure how I could make it faster. 2. I was unaware that fields are better than properties in terms of speed. I always figured properties utilized fields under the hood and were syntactic sugar. 3. I see your point about storing the divided value in properties. I guess the trade off is CPU cycles vs memory footprint, and the cycles are negligible relative to the memory footprint. 4. I initially had bits as a ulong. However, I switched it to a long thinking it might be of use to allow negative values when calculating things like file storage in a SaaS where user input is common place. Example: var total = ByteSize.FromMegaBytes(100); var remaining = total - ByteSize.FromKiloBytes(myFile.SizeKBs); if(remaining &gt; 0) Allow(); else Deny(); I've never had to think about optimizations to this extent in C#. Do you have any resources you can share on this topic?
&gt; I was unaware that fields are better than properties in terms of speed. I always figured properties utilized fields under the hood and were syntactic sugar. You are right. Properties will often get inlined, [even across assemblies]( http://bytes.com/topic/c-sharp/answers/235407-inline-compilation-across-different-assemblies).
&gt;Conclusion: do research before implementing optimizations. I've been coding .NET for 12 years and specialise in library performance tuning. My decade of research assures me that you should never make any assumpptions about the JIT (POI the JIT and compiler are completely different things - the compiler definitely doesn't optimism this) &gt;Don't assume anything from the compiler. Bit confused as that's exactly my point. As I've written numerous IL rewritters I'm pretty confident want IL the compiler produces, but we were talking about the JIT which works on IL-&gt;native. My original recommendation stands, don't make assumptions be explicit.
Like I said, moving from one to the other is largely a matter of find and replace. If you have to deal with exceptions in any sane way, a mere method-level attribute is not doing it. With NUnit/xUnit/any first-class test framework, you get Assert.Throws&lt;Exception&gt; that returns an exception object to you so you can, say, make sure that a phrase exists in the exception message (without copying and pasting the complete exception message) or verify that the custom exception thrown wraps an underlying exception in .InnerException. I also use NCrunch for tests. If VS were to replicate its functionality as a first-class citizen of the IDE, I'd absolutely consider dumping NUnit to move back to it.
By your own admission, (and as I already explained) whether the division optimises to a bitshift is compilation option dependent. Therefore the only way to guarantee you always use a bitshift and not a div is to code it as such. Thats why the framework developers (BCL &amp; MFL) are always explicit (you can confirm this yourself). As such it's good practice and not code smell. Something I can demonstrate without resorting to name calling and insult.
&gt;I appreciate the feedback. My pleasure. &gt;1. Can you elaborate on the string formatter being too slow? I'm not entirely sure how I could make it faster. Performing multiple IndexOf on the same string is very slow, slower still as you wrap in a dynamically created lambda call. A simple switch statement would be faster and more readable. &gt;2. I was unaware that fields are better than properties in terms of speed. I always figured properties utilized fields under the hood and were syntactic sugar. Your using auto properties which do indeed create a field under the hood, but wrap access to that field essentially in a method call. &gt;3. I see your point about storing the divided value in properties. I guess the trade off is CPU cycles vs memory footprint, and the cycles are negligible relative to the memory footprint. Only real-use analysis could determine the pros and Con's, but my gut is to go with sparing memory in this instance. &gt;4. I initially had bits as a ulong. However, I switched it to a long thinking it might be of use to allow negative values when calculating things like file storage in a SaaS where user input is common place. Example: &gt; var total = ByteSize.FromMegaBytes(100); var remaining = total - ByteSize.FromKiloBytes(myFile.SizeKBs); &gt; if(remaining &gt; 0) Allow(); else Deny(); If you ignore the method calls (again too much call stack depth for a simple library) then I would think a non-negative implementation is preferable, but its up to you as to desired use cases. &gt;I've never had to think about optimizations to this extent in C#. Do you have any resources you can share on this topic? Sadly no, I've spent a lot of time writing tests and seeing for myself. The difference between a read only field and a property is surprisingly large. 
Name calling?... There is nothing personal here. I am against premature optimization that targets micro-optimizations like this, especially when the gains are largely questionable coupled with the fact that the structure here is a whooping 512-bit in order to represent a 64-bit integer with postfixing. Now there's your optimization opportunity!
To be fair I mentioned that in my original post.
&gt; Sadly no, I've spent a lot of time writing tests and seeing for myself. The difference between a read only field and a property is surprisingly large. Can you supply such a test? I wrote a test that shows negligible performance penalty. Over 10000000 iterations of increment from reading the value without optimizations give this result (timer ticks): Readonly public field: 17876 Wrapped readonly public field: 17872 Auto property: 17871 Maybe my test is wrong though. But I would call that negligible. public class FooClass { public readonly int _theValue; public int TheValue { get { return _theValue; }} public int AutoValue { get; private set; } public FooClass() { _theValue = 1000; AutoValue = 1000; } } [TestFixture] public class Testy { [Test] public void SpeedTest() { const int iterations = 10000000; unchecked { for (int j = 0; j &lt; 2; j++) // Twice to remove JIT penalty. { var foo = new FooClass(); int value; value = 0; var readOnlySpeed = System.Diagnostics.Stopwatch.StartNew(); for (int i = 0; i &lt; iterations; i++) { value += foo._theValue; } readOnlySpeed.Stop(); Console.WriteLine("{0}\n", value); value = 0; var wrappedSpeed = System.Diagnostics.Stopwatch.StartNew(); for (int i = 0; i &lt; iterations; i++) { value += foo.TheValue; } wrappedSpeed.Stop(); Console.WriteLine("{0}\n", value); value = 0; var autoSpeed = System.Diagnostics.Stopwatch.StartNew(); for (int i = 0; i &lt; iterations; i++) { value += foo.AutoValue; } autoSpeed.Stop(); Console.WriteLine("{0}\n", value); Console.WriteLine("Readonly public field: {0}\n", readOnlySpeed.ElapsedTicks); Console.WriteLine("Wrapped readonly public field: {0}\n", wrappedSpeed.ElapsedTicks); Console.WriteLine("Auto property: {0}\n", autoSpeed.ElapsedTicks); } } } }
Indeed you did. Sorry about that.
**\&gt;Real-World Example** **\&gt;Random fictitious arguments** I mean, I get that you don't want to put your personal or company code as a blog example, but (_importantArgument, (_,x,y) =&gt; x; &gt;y) is not a real world example. Edit: changed 'nonsense' -&gt; 'arguments'. Bad call in retrospect.
Agreed. Don't use bit shifts, it's harder to read. The math encodes the intention more clearly and give more overall benefit than the micro-optimization, even if the jitter didn't do it for us.
With regards to the fictitious argument? I wanted a way to illustrate that switching to lambda expressions wasn't going to affect passing dependencies down. My apologies if that wasn't conveyed properly.
Your code is fine, it's also a good example of the difference the JIT can make when taking IL and turning it into native code. If you were to run this same code on a debug code, or run the release mode code in debug mode (VS by default will switch off JIT optimisation on module load whilst debugging) you will see a marked difference - despite there being no difference between release and debug IL. Your example also shows how hard performance analysis is, this test is pretty much meaningless due to the error size, and lack of real world application, and ultimately performance is mostly an engineering rather than design problem. However, I've learnt (the hard way) over the years, never to make assumptions about what the JIT will or won't do in any particular situation, largely because it's almost entirely undocumented, and subject to frequent changes. For example, there's some pretty good articles on the JIT method inlining optimisation, but even that has been tweaked in the latest version of the CLR (and we now have more control with the MethodImpl attribute). I know that using a readonly field is ALWAYS as fast, and that using properties are NORMALLY as fast (in release builds and with JIT optimisation on), however I've never seen properties be faster. I therefore tend to lean towards the 'be explicit' style of coding - as you can see in this thread there's other schools of thought. That said, fields cannot be used to implement interfaces, and are considered bad practice in libraries as they are not future proof. Properties allow you to change the implementation without breaking any dependencies (though in reality, rebuilding against a field&lt;-&gt;property change normally doesn't require code changes - except access via reflection/expression APIs).
In conclusion, I wouldn't personally implement this as a class, instead I would create a set of extension methods on either byte[], ICollection, long and/or ulong. Static methods (and hence extension methods) have the highest performance, and I'm not sure the class is of use in of itself. Extension methods would add no additional memory pressure and provide more integration points. IMHO
It's supported as well as MS SQL I believe. Entity Framework can interface with MySQL as well.
Works fine. The drivers don't have any bugs that I've come across yet. 
I concur. I use [this one](http://dev.mysql.com/downloads/connector/net/) and haven't had any trouble.
Rock solid. I had to create a high performance c# app cluster talking to a wicked fast mysql cluster. If you can think it, it can do it, no problem. 
Yup most objects like commands and connections are disposable.
As others have said, it's well supported. We use it for an enterprise-level project that includes a modestly popular website (120 mil users) and CMS. I have some complaints about MySql's replication features but those are not related to the C# interface.
[This may be of use.](http://dev.mysql.com/tech-resources/articles/mysql-installer-for-windows.html)
I'm actually planning to do this project on Mono.
try cleaning then rentering debug or deleting your bin &amp; obj folders for a guaranteed fresh build if that doesn't work try this as well http://stackoverflow.com/questions/7021116/c-sharp-vs2010-entering-break-mode-failed
Linq To SQL is pretty much dead and has been mostly replaced by entity framework even DbLinq is getting a bit dated now and hasn't had a release in 4 years and would be debatable if it works with the latst versions of most databases 
You cannot rely on a readonly field being faster than the property, but it creates some architectural issues. In my opinion, code optimizarion should be optimizing the general algorithm, not whether or not to expose a field. The test at least shows that you cannot rely on the public readonly field being faster, so why expose it at all? The importance of readonly isn't that its faster, but that it ensures that the value does not change. Any speed benefit is a bonus.
Check your build configurations to make sure the project is being built when you build the solution. Make sure to check all configurations (Debug, Release, etc...). Sometimes projects get left out of the build configurations and you are working with stale DLLs. You can check the build output in the console to verify if your project is being built each time.
Good lawd that's a lot of traffic!
I do agree that DbLinq hasn't been maintained, and that LinqToSQL is slowly fading away. But IMHO LinqToSQL is more productive when there's an existing database. So it's not dead; yet.
I believe the hip editor is now sublime text. Get with the brogram!
I'm not really following what you're actually proposing to do. When we had a project that used nhibernate, we ended up calling stored procs (t-sql and sqlclr) via direct SqlCommand calls. Some of those returned table valued data and AFAIR we parsed that via DataTable. I think the reasoning for this arrangement was that nhibernate didn't bring anything of value into this (this was before getting table valued data from sprocs). If you have code for the external dll then yes you can debug it.
Not a long comment as don't have time, but Linq-To-SQL can be (easily) configured to use stored procedures for update/create/delete etc. as opposed to it generating the sql itself. It also handles calling stored procedures to retrieve queriable database objects as well as procedures returning single values etc.
Thank you for the tips. I'll try these as soon as I am back home. 
Based on what I've read from this article, it's pretty clear how to write unit test code with NUnit (the example given is very easy to understand). It sounds like a good way to make and run tests. The example is a little too simple for my purposes though... I'm having some problems coming up with tests to write for the software I'm making at work. The code I'm writing at work uses WinForms and Entity Data Model. The only way I've been able to test so far is with functional testing (running the program, clicking buttons, checking output on the GUI and in the backend, running debugger, etc). It's worked out pretty well so far, but I'd rather have a more automated and reliable way of testing, as well as learn how to use NUnit. How would I write Unit Tests for code that is largely text manipulation and storage? Also, most of my code is in delegate functions (hooked up to event handlers) in a form. I hope I'm making sense. Any help would be appreciated. Thanks!
Neat. I'm curious why you stopped at tera, rather than implementing the remainder of the SI prefixes?
Seems like a lot of work to not use a Semaphore.
Pluralsight has some of the best tutorials I have seen, hands down. The only thing is you have to pay, but it's well worth it, trust me.
I figured Tera was a big enough prefix. Peta and beyond didn't seem of practical use (at least for now!). I think that `System.TimeSpan` follows the same logic and stops at years as opposed to going to decades, centuries, millenniums, eons etc. 
I'll try taking a look. Thanks for it ;) 
Visual Studio.
Most ORMs (that I have seen) give this set of abilities, so this doesn't really surprise me. I probably didn't ask the right one, but this didn't really get at my question(s). Thanks for your input, nonetheless.
You are making a ton of sense here. I am probably just opening a can of worms by introducing an unnecessary tool. If it wasn't for the nice code base it produces, I wouldn't have really considered it. I believe there might be a performance benefit as well when returning large sets of objects. I think the right thing to do is take your advice and abandon it for this project. I know my team will probably appreciate it. Your assumption about the app developers going apeshit with their own SQL has been brought up. I tried to fight it already and lost. I should also mention they don't know what TDD is. If the pay wasn't so good I would have been long gone by now. I am trying to remain unbiased and implement their technologies but it's really making me nervous given what I know and what they appear to be clueless about.
Appreciate your response. I did something like this in a personal project and it seemed like a lot of grunt work but it was fast as hell. Based on my research you can't really get any faster than straight ado.net, which is pretty close to this I think.
By the way, the mapping is actually to a set of scalar values that make up an incomplete domain object rather than just 1 scalar value. I don't know if that makes you change your thoughts but it's a pretty key point in this dilemma.
If the proc only returns half the properties of the custom object, I am pretty sure the cast would throw an exception. If it didn't, I'd probably use this method all day long and not want to use NHibernate. I don't want to create a different object for every single proc if I can avoid it. A lot of them return the same objects or parts of an object that make up the whole. NH lets you map a set of scalars to xyz object even if all of the properties aren't returned by the proc...and that's exactly how I am using it, but it just seems kinda unnatural. Thoughts? This is a key point in the discussion I believe.
Yea, you'll have to define an class for each unique stored proc result signature, since it's going to map the results to an object. &gt; I am pretty sure the cast would throw an exception Actually, I don't think it will since you're specifying the same type in the SqlQuery call. Feel free to verify with a quick test, but I believe that it just leaves the "unknown" properties at their default. If it does then you can add a conversion layer, which is one more layer of classes, but may actually be better since it will add some flex room between your database and your data models: // I'm not sure if the compiler will complain without the call to Cast&lt;CustomDbClass&gt;() or not... return context.Database .SqlQuery(typeof(CustomDbClass), sqlQuery) .Select(x =&gt; new CustomModelClass(x)) .ToList();
Therein lies the crux of the problem! At least with NH, the code was easier to manage, but it also has its pitfalls as well based on what I have seen and based on the feedback in this thread. There doesn't seem to be a best of both worlds approach or a silver bullet that developers go to.
Different people will give you different responses. But I love my ORM. It adds a nice layer of flexibility between your data models and your database, and handles most (if not all) of the DB gruntwork for you. Combine it with dependency injection principles (like Unity) and then you can completely swap it out when you need to run tests, or demo, or experiment with different database types. Case in point: I made a small-ish personal app for budgeting that uses SQLite for the DB and Entity Framework for working with it. If I needed to I could convert it to run on MS-SQL in about 15 minutes, and the only thing that would change is my .config file. I don't care about interacting with the database because I don't need to care about it. (In production projects there are times where I *do* care, but they're pretty limited and so far the benefits have outweighed any costs). You end up doing a little more work in the beginning, getting your models set up, but save yourself **a ton** of hassle and time during testing and maintenance. If everything you call in the DB is basically stored procs then you're pretty much stuck either defining your own objects or using [Microsoft's data source designers](http://msdn.microsoft.com/en-us/data/gg699321.aspx). If you're mostly writing to/reading from tables then you can use the designers to create the objects (entities) for you, or look into [T4 templates](http://stackoverflow.com/questions/10126871/entity-framework-generating-classes) to generate the objects (POCO) for you, or create them on your own (also POCO).
I work for a really big company that will never change DBMS, so I'm not sure this adds any value for me. What else is there to consider?
I am not really worried about the poco generation part, just trying to figure out the best approach in a broader scope.
Ease of testing and maintenance are still the biggest benefits of ORMs. If you're doing enterprise work then (IMO) it's the best way to go.
Not necessarily each result, but each result signature. spOldProcedureOne -&gt; Select FirstName, LastName, CustomerId From ... spOldProcedureTwo -&gt; Select FirstName, LastName, CustomerId From ... spOldProcedureThree -&gt; Select CustomerId From ... Procs 1 &amp; 2 can use the same object since they have the same signature (field name and data type), proc 3 will need to be different. Hundreds or thousands of stored procs seems... excessive... for a single DB, but that's just my opinion. (DBs are for storing data, executables are for manipulating data with logic, so keep your logic in code and keep your data warehouse free of it). Especially if the stored procs are just acting as views, then you should've been using *actual* views instead.
I don't want to use one if there's going to be a bunch of gotchas, especially if people on my team don't want it to begin with. They have an old way of doing things and it seems as if I am going to have to go back to it. I'm pretty new there, so this was the one f the first things I thought of to push things in the "right" direction. Maybe there is bigger fish to fry.
While I support this, no one else does. I'm fighting a losing battle here.
I left a company that was pretty cutting edge to go work here about 6 months ago. It was a trade off because now I have more time away from work to focus on home and personal affairs. I am enjoying the new freedoms I have, but it makes me kinda nervous that I am the youngest and also the most experienced person on the team in terms of good coding practices.
DispatcherTimer, like Timer, is pretty simple: you set it up with an interval and hook up a handler to its Tick event, and call Start to go and Stop to stop. The difference is in how the system calls that handler, and how it relates to other parts of the UI. At the heart of every Windows application is the message loop, where the application continually checks for messages (mouse events, window events, timer events, etc.) queued by the system and dispatches them to various handlers. Dispatcher is the abstraction that the .NET Application object uses to run its message loop. .NET UIs add the wrinkle that changes to UI objects must happen in a single thread, the thread in which the Dispatcher is running. DispatcherTimer callbacks are invoked by the Dispatcher directly, so they don't require any cross-thread dispatching. The main thing to be aware of is that because the callbacks are serviced along with all other events, the timing is not guaranteed to be completely accurate. Thus, you should probably check the system time when updating your UI rather than assuming a constant time step.
I actually looked at Dapper and I really want to try it out. Thanks for your feedback.
You still haven't posted any errors, stack traces, or any other useful information to let people help solve your problem.
new editors too I believe such as the new less editor/compiler 
Yes and I saw a Hanselman tweet mentioning SASS support as well in the first VS 2013 update
Perfect! I was thinking it would be closer to a Java approach to multithreading which was absolutely unnecessarily complex with listeners and such. The built in stuff handlers are much nicer in C#. I got it working before I saw your response but it's exactly what I ended up doing. The details you provided also helped me understand the documentation. Thanks for the help!
I just downloaded it and for some reason it took a very long time to download and then it took a very long time (overnight) to install. I installed it to a VM (VMWare Workstation), so maybe there are issues there. It also seemed to have a bunch of install errors and then didn't run. I'll have to look at the log. Edit: I installed it, it would start up and then crash. I figured out that if I were able to open the project window very quickly, it wouldn't crash and after that it stopped crashing.
 public static int ExtractNumber(string input) { var stripped = input.Where(c =&gt; c &gt;= '0' &amp;&amp; c &lt;= '9'); var toParse = new string(stripped.ToArray()); return int.Parse(toParse); }
I know some people are excited about this feature also. http://blogs.msdn.com/b/webdev/archive/2013/06/28/browser-link-feature-in-visual-studio-preview-2013.aspx
Regular expressions are awesome for this. As a console application: http://pastebin.com/TQrVpmk0
if you can use Regular Expressions to replace. using System.Text; //... public static int ExtractNumber(string s) { string cleanS = Regex.Replace(s, "[\^\\\\d]", ""); // replace any non digit \\d with nothing "" return Int32.parse(cleanS); }
I have been going to a nhibernet course given by ayende rahien at the beginning of the month and he mentioned something along the line of "you don't want to use sprocs with nhibernet if you can avoid it". And I agree. Doesn't seem to make much sense to use it in the OPs case. 
 string input = "LLLLLLL 9 LLLL"; StringBuilder sb = new StringBuilder(); foreach (var character in input) { if (!char.IsNumber(character)) { sb.Append(character); } }
Most people will suggest Regex but I suggest you never use Regex and especially not while you are trying to learn a language. There are built in c# functions you can use to check if the value of a character is a digit or not. I could write out a single line that would solve your problem for you but that would defeat the purpose of you learning how to do it yourself. Your thinking of looping through an array of characters is a good place to start. If you can better explain in pseudo code what you are trying to accomplish I will help you further but I am not going to write the code for you.
Not to be rude, but this sounds like a school assignment. While a Regular Expression will do the job handily, this really sounds like an assignment that is meant to you help you understand "for loops" and "arrays". So, is this a school assignment? and can you tell me what topics they are trying to help you learn? 
A general way to filter the string, passing the logic to the filter. Later, when specs change, the call can be changed to the new logic: // string with just numbers FilterString(value, (char c) =&gt; c &gt;= '0' &amp; c &lt;= '9'); // string with no numbers FilterString(value, (char c) =&gt; c &lt; '0' | c &gt; '9'); static private string FilterString(string Value, Func&lt;char, bool&gt; FuncFilter) { return new string(Value.Where(FuncFilter).ToArray()); } 
Bitch please... Do your own homework.
 private int serverNumber = 7; private int alarmID = 10; private void button2_Click(object sender, EventArgs e) { serverNumber = 7; alarmID = 10; textBox1.Text = string.Format("The alarm id from video server number {0} is {1}", serverNumber, alarmID; } private void button1_Click(object sender, EventArgs e) { textBox1.Text = string.Format("Alarm id {0} has been received from video server number {1}", alarmID, serverNumber); } private void textBox1_TextChanged(object sender, EventArgs e) { } private void button3_Click(object sender, EventArgs e) { textBox2.Text = serverNumber.ToString(); textBox3.Text = alarmID.ToString(); } Try and think about your problems from another angle before resorting to Regex. Regex is truly only suited for situations where you don't have control over the text/values you're being given. In this case, you know 10 and 7. So instead of parsing them, I pulled them out into variables and used them as I needed. The assignments in the first event handler are simply examples. (Also, some editing)
Is that actually what that method does though? Here's the first line of the link I copied: &gt;"Searches the specified input string for the first occurrence of the regular expression specified in the Regex constructor."
You will have a terrible time if you depend on the user entering correctly formatted strings. A more pertinent solution would be to give the user only an interface to change the numbers. I will say: I'm not at all certain what problem you're trying to solve, but I'm almost fairly certain you don't need Regex to solve it.
I'm not clear on what the objective is. Do you just need to capture any numbers in the string? Or do you need to intelligently parse the string to find an important number like the "alarm id" like some kind of natural language interpreter? If it's the latter that's way too complicated of a problem for a beginning exercise unless the strings are hard coded to just those two variation. If you just need to capture numbers look at the Split() method of String, and then look at int.TryParse();
Try this in your button3_Click handler: var match = Regex.Match(textBox1.Text, @"[a-z\s]*([0-9]+)[a-z\s]+([0-9]+)[a-z\s]*"); int Number = Int32.Parse(match.Groups[1].Value); textBox2.Text = Convert.ToString(Number); int Number1 = Int32.Parse(match.Groups[2].Value); textBox3.Text = Convert.ToString(Number1); I don't know exactly what you're doing that you need to take this in as a string instead of gathering two numbers from the user, maybe it's a speech command? Either way, I'd imagine there are many better ways of doing this.
Oh, that's pretty easy then. Just tokenize the string string[] myarr = textBox1.Text.Split(' '); Check the first word, and take the correct number accordingly: string answer = ""; if(myarr[0] == "Alarm") { answer = myarr[2]; } else { answer = myarr[9]; } 
If the goal is to pull the first two numbers out of a string: MatchCollection matches = Regex.Matches(text, @"\d+"); if (matches.Count &lt; 2) throw new Exception("Herpity derpity"); int number1 = Convert.ToInt32(matches[0].Value); int number2 = Convert.ToInt32(matches[1].Value);
Also, while regex is definitely not needed for a problem that simple, your problem is you didn't set your search criteria to be "greedy". That's why it only returned the "1" instead of "10". Use something like \d{1,3} to capture a number between 1 and 3 characters long.
If you're certain that these two sentences are going to be the only ones to expect, then this will work: string serverNumber; string alarmId; Match match1 = Regex.Match(textBox1.Text, @"The alarm id from video server number (\d+) is (\d+)"); Match match2 = Regex.Match(textBox1.Text, @"Alarm id (\d+) has been recieved from video server number (\d+)"); if (match1.Groups.Count &gt; 1) { serverNumber = match1.Groups[1].Value; alarmId = match1.Groups[2].Value; } else if (match2.Groups.Count &gt; 1) { serverNumber = match2.Groups[2].Value; alarmId = match2.Groups[1].Value; } else { throw new InvalidOperationException("Input string does not match an appropriate format."); } textBox2.Text = serverNumber; textBox3.Text = alarmId; 
Elaborating on /u/vinkento answer: int serverNumber = 0; int alarmId = 0; MatchCollection matches = Regex.Matches (text, @"\d+"); if (matches.Count &lt; 2) throw new Exception ("Herpity derpity"); if (text.IndexOf ("alarm") &gt; text.IndexOf ("server")) { serverNumber = Convert.ToInt32 (matches [0].Value); alarmId = Convert.ToInt32 (matches [1].Value); } else { alarmId = Convert.ToInt32 (matches [0].Value); serverNumber = Convert.ToInt32 (matches [1].Value); } Console.WriteLine( "Alarm ID: " + alarmId.ToString() ); Console.WriteLine( "Server Number: " + serverNumber.ToString() ); Edit: Assumes "alarm" and "server" will be in text string. Should also be text.ToLower().IndexOf("alarm"), etc. 
Scroll all the way to the bottom for some solid examples: http://msdn.microsoft.com/en-us/library/system.security.cryptography.rijndaelmanaged(v=VS.100).aspx
The first question that comes to mind is whether you want to make it unreadable or encrypt it. If you just want to make it unreadable, you could take each letter as ascii number, pluss on 5 and then back to text again. Quick coding and pretty easy on the computer. Or you could hash it with md5 or some form of hashing. If you where to encrypt it you should probably read up on encrypting with c# as I'm sure those tutorials will give you a MUCH better answer than at reddit. If you really want to make several texts unreadable, you could make a encryption with salt (random generated string of numbers) for each file with the salt at the start of each file (looks like part of the file anyways.) Computerphile on YouTube have recently put out a lot of videos lately explaining these principles very clearly :-)
Rijndael is great.. so easy to use. It's AES by the way, so it's teh bestest if you're worried about quality
Sorry if I sound harsh, but you should reread on the encryption. Hashes are not really related to encryption; they're just kind of signature but not even close. Salting files does not make any sense here, it's only for multiple very short, low information texts (passwords) so their hashes are not vulnerable to rainbow table attack (same table can't be reused for multiple passwords/pw database).
Not a problem. I wasn't thinking strait. Was thinking that hashing would scramble the text, and then you could de-hash it later on, instead of encryption. Thinking it would save cpu cycles too, rather than running a "large" algorithm for encrypting and then decrypting. 
The goal of a hash is to not be able to take a hash a get back to its original form like encryption.
On the user's own machine, you can't prevent them from staging an attack on your software. The best you can do is raise the stakes a bit so that casuals don't try it. So, any form of reversible encryption or even obfuscation would do at that point. ROT128 and a checksum would be enough. However, if you're storing sensitive information and have to verify it via a remote server, then you don't store the information itself on the user's machine, but rather store an artifact (like a guid) and keep the information on your server. Standard rules regarding security apply so maybe use asp.net's basic user authentication stuff. Lastly, if the information *is* authentication information, like a bunch of username and passwords being stored for automatic login on some kind of shared PC or kiosk, then consider architecting around storing session tokens instead of passwords, so that the tokens can be revoked without forcing the user to come up with a new password.
&gt;Entity Framework can interface with MySQL as well. Do you have a quote on this? AFAIK it only works with MSSQL because it was designed specifically for it.
I still remember looking at the xkcd about aes encryption... damn... just got a headache thinking back to it... 
Try String.IsNullOrWhiteSpace(txtName.Text)
If the Text property is a string it should work without an issue.
There's a couple nifty methods in .NET: string.IsNullOrEmtpy(someText) and string.IsNullOrWhiteSpace(someText) // .NET 4.0+ only I would recommend you use those when checking to see if a textbox is empty.
Maybe I'm failing to see the real issue here, but this seems like an easy problem. So you want to make sure a name is entered, and a checkbox is check, then if the txtOther is empty, to pop up a text box. Breaking down your logic I would do it something like this: else if ((String.IsNullOrEmpty(txtName.Text) != true &amp;&amp; chkOther.Checked == true) &amp;&amp; String.IsNullOrEmpty(txtOther.Text) == true) { display messagebox } 
This looks awesome. But One thing I'm not clear on is exactly how this works? If you have a linq statement do you just have to add the AsQueryExpr() extension method to the from clause and things get faster? Does the optomization happen at runtime? Will the first call to the linq query be slow? 