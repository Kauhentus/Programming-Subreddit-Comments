if rider had codelens i'd consider it but it doesn't.
What extensions are you using?
just tried and it doesn't work :/ also it's weird that the manufacturer selectlist isn't populated when I'm passing in a value already preselected for the ATID id which is for another list of asset types, the manufacturer list doesn't start working until you click on a new assettype from the ATID id. 
Could you try this benchmark please, so I can put your results on that page? https://github.com/tugrul512bit/Cekirdekler/wiki/Benchmarks:-Post-your-1D-NBODY-scores thank you for your time.
so I just realized that I have the line $("#ATID").change(function () { so that's why when it initially loads, it won't populate the manufacturer list because you never click on the ATID select list and changed anything, is there a way to change this so that right when the page loads it gets the current value and populates the list right away?
Pretty sure all of your code is executing on a "per-request basis" when running in mvc, so unless you're saying you just shouldn't save state in objects in any of your code, I think it does matter whether or not it's a singleton.
*No offense but you sound like an old person*...And I am the rude one?
Definitely. I write all of my controllers and service classes to be thread-safe. The only pre-request state is in the model objects that get passed into, or returned by, the services. Except, of course, HttpContext. But I hear that's gone as well in ASP.NET Core.
As far as I'm concerned, the only purpose of the Controller class is to deal with all of the HttpContext interaction. Nothing below it should even know that HttpContext exists, while the Controller itself shouldn't know about the database, file system, etc.
&gt; If a class is a singleton you can't save per-request state in it, and if it is scoped to the request you can. What I'm trying (and apparently failing, sorry!) to say is that just because you CAN have class-level request state saved in a scoped request doesn't mean you should. My point was simply that if it's feasible to do so, even in scoped classes you should try to avoid saving request state unless you can't avoid it. If you do that, it then no longer matters if you're in a scoped object or a singleton, since the behavior is the same. And yes, controllers will maintain state at the class level, holding onto services and whatnot, but those are all within the same singleton-like scope. One controller holds onto one service whichs holds onto one dbContext, backend proxy, etc, for their lifetime. But what each of those components do **per request** shouldn't be stored anywhere but rather be passed along as part of the request chain. Really the long and the short of what I'm trying to say is that I don't necessarily agree with the OP articles approach of encapsulating transient state with helper objects since I feel in most cases you could achieve the same effect by passing that state around with your data directly and avoid the extra overhead of additional classes.
&gt; The only real downside I've found to thise approach is for methods which take in data, there's not a very straight-forward way to unit test Model State validation. I don't bother with that anyways. All of my models have a Validate method that can be called by the service classes. That way I can actually unit test my validation rules. And I can always use exception filters to turn argument exceptions into HTTP status codes. 
You definitely are. /u/b1ackcat is saying that within an instance of a controller (or middleware) you shouldn't be saving state across requests, because one request shouldn't affect the next.
That's the point... in order to make sure you aren't saving state across requests you do need to be aware of whether you are dealing with a singleton or an instance that is scoped to the request. He is trying to say it shouldn't matter whether you are dealing with a singleton or not because you shouldn't be saving state, which is wrong. There will be plenty of instances you will save state in an object during the lifetime of the request, as long as that object is not a singleton. For example, you can save state in a controller because it isn't a singleton. Any class level properties you use to store services for example will not affect other requests.
1) XNA seems pretty feature complete to me, and Monogame doesn't seem to bring any new features to the table that I care about. 2) You install 4 redists if you haven't already and a single .vsix. Last time I used Monogame it was _a lot_ more work than that especially if you wanted to get any sort of content pipeline 3) I never used the Xbox Live stuff from XNA in the first place, like multiplayer and avatars I'm not telling any new developer to use XNA or Monogame, I was simply saying there's no reason for me to change over
Team Foundation Server Online.
Never used it, but NPOI is the .NET version of the popular Apache POI library: https://github.com/tonyqus/npoi 
Yea, and if you can't use await then fallback to using ManualResetEvent
Maybe you could use interop to convert the xls to xlsx... http://stackoverflow.com/questions/18904561/programmatically-convert-excel-2003-files-to-2007/18904633#18904633
No don't use these shitty thirdy part libraries that become Office dependency nightmares. Just use the Open XML SDK right from Microsoft.
Yes, I will never understand why people insist on trying to use interop ALL the time for these tasks. Not only is it a huge hack, it means you need Office installed on a server. I also agree with the XLSX too, fuck people who insist on trying to use XLS, even Office 2003 has a plugin available that lets you export XLSX. I've seen it before, where I once worked we had to allow XLS and XLSX for basically no reason other than some lazy fuck at a client office couldn't be bothered to export to a different format once a month.
Give a unique parent id to each child and then match them?
To my mind, any method parameter not marked `out` is an "in" parameter (in fact, the `in` keyword is used for exactly that in HLSL). That doesn't describe what that modifier actually does to the passed value, nor does it communicate that you're passing a constant reference. The keyword implies it does something it actually doesn't, and completely omits any indication of what it actually does do. That's bad. `const ref`, for example, clearly communicates that you're passing a reference and that said reference cannot be changed (and as a bonus it's analogous to the C++ equivalent). It just makes no sense to not reuse the `ref` keyword, if only for consistency's sake.
Removed: Rule 3. There's nothing in this that's C#-specific, and it reads basically as a plug for csharpdigest.net.
What do you mean "computed property"? You mean a property that runs some calculation? For example: public class Length { private double LengthInMillimetres; //"computed property"??? public double Inches { get { return LengthInMillimetres / 25.4; } set { LengthInMillimetres = value * 25.4; } } //backing public double Millimetres { get { return LengthInMillimetres; } set { LengthInMillimetres = value; } } }
I use Linq in my main work everyday. I will use it in every code where perf is not critic.
I use it as a replacement for SQL however in areas where there are performance issues I usually drop down to sql. Though the performance issues are more likely related to the fact I'm using the ancient linq2sql with change tracking turned on.
Multiple times a day. Both on top of Entity Framework and to do things with collections.
I use Linq almost daily at work. It's really confusing and annoying at first, but once you get a hang of it you really appreciate the flexiblity it offers.
I use LINQ so frequently, mostly in its extension-methods form, that it feels weird to ever be without. - if you're writing foreach loops that are 1-2 lines long, use LINQ - if you manipulate collections (arrays, dictionaries, lists, etc), use LINQ - if you try to see if a collection contains an item, LINQ .Any() - if your code is designed properly, it most likely uses IEnumerable, and if you use IEnumerable LINQ is second hand. - if you use EF, use LINQ Secondly, I use LINQPad. *A lot*. I see my colleagues barbarically use SQL to retrieve one set at a time and it's just painful to deal with something that doesn't automatically traverse table relationships for you. 
pretty much every day. as a trivial example, transforming collections of objects into other objects is fairly common. so, you might write a function like this: public List&lt;SomeType&gt; ConvertExample(List&lt;SomeOtherType&gt; listOfOtherType) { var results = new List&lt;SomeType&gt;(); foreach (var thing in listOfOtherType) { results.Add(new SomeType { SomeProperty = thing.SomeOtherProperty }); } return results; } where, i'd probably write something like this: public List&lt;SomeType&gt; ConvertExample(List&lt;SomeOtherType&gt; listOfOtherType) =&gt; listOfOtherType .Select(t =&gt; new SomeType { SomeProperty = t.SomeOtherProperty }) .ToList();
You're missing out. LINQ is _so_ powerful for list manipulation. As others have said, I would use the extension methods when possible. It can take a little bit of practice to start thinking functionally, but once you do, it will be hard to imagine life without it. 
I use it every day and it is utterly wonderful. I agree that it can be very intimidating when you first start, but once you *get* it, you would never go back. Honestly, though, I learnt LINQ (and good coding practice and variable naming conventions and..and..) because Resharper kept telling me I should. With every collection manipulation I did, it would say "Hmm - why not try it this way". When you can write code like this, why would you do it any other way? var rabbitJoyList = rabbits.Skip(1).Take(5).OrderBy(rabbit =&gt; rabbit.Name).Select(rabbitName =&gt; $"I have a bunny called {rabbitName}!").ToList();
More than I should? :)
Yup I'm also in the "extension method syntax" camp. I find the SQL-ish syntax hard to read. Which is ironic since most days I write more actual SQL than anything else...
Almost every time there's an IEnumerable
Anytime I want to find objects in a collection.
All the time when performance is non critical.
Use it, but remember the basics of complexity time. Linq with the correct data structure for your task is great. Linq with the incorrect data structure is woeful. Example is if you have a frequent Any lookup. Use a dictionary and not a list...
The line between IDEs and Editors is kind of blurry when comparing Visual Studio / Rider / Visual Studio Code. Sure, it does not come with the kitchen and sink ( and all the baggage ) but i am hard press to remember a lot of missing features in Visual Studio Code. And this comes from a guy who is a die hard Jetbrain product user. Visual Studio Code + OmniSharp work perfectly for building, debugging etc ... At worst you lose some features like default templates and more code hinting like Rider. And yea, there is no nice interface for nuget packets downloading. On the other hand, because its a bit more manual work, the projects tend to be more "clean". For instance the Firefox plugin did not work with my combination of .NetCore 2.0 + Rider. Where as with Visual Studio Code it worked perfectly. Simply because the way Rider relied upon .NetCore1 and it conflicted with the assembly files ( same files, different versions ). Hell, with the Omnisharp plugin and Visual Studio Code you even got Visual Studios Code Lens. A feature that Rider is missing. The OmniSharp C# plugin is actually maintained and developer by Microsoft, same as with VSC. So you can expect to see over time more VS features to creep into VSC.
Honestly, most SDET will just be writing tests, not doing Devops type of stuff. 
I use it every day though I do not like it. It is very confusing for groupings and summarizes 
Almost any time I work with collections, but I almost never use the query syntax. 
All the time. Sometimes on normal collections, sometimes on actual SQL databases. Still amazed how well that works... Just today I looked at this long linq statement and how it got compiled into a huge SQL query with expressions I didn't even know yet. And I still don't know what monads are, but apparently when I use SelectMany then I'm using a monad bind function.
True, LINQ doesn't let you get away with not knowing your data structures.
I can't even remember the last time I use for/foreach loops😂
LINQPad is a godsend, especially if you're stuck in an older database with shitty SQL. My last job had me working with an older version of Oracle. I was in a similar situation as you, where my co-workers were writing SQL by hand to query the database and I was just pointing LINQPad to the EF assembly from our app.
Can you elaborate on this? I've used it in some relatively high traffic applications and haven't noticed any serious performance issues. I always check for n+1 queries. 
I'm using it with MSSQL 2016, which is far from shitty, but I still cannot be bother to spend 10 minutes crafting a SQL joining 10 tables, when I can simply explore the values straight from one table. Godsend indeed.
I only avoid it when I have to break out of a loop
 var result = listOfOtherType.ConvertAll(t =&gt; new SomeType { SomeProperty = t.SomeOtherProperty }); [List.ConvertAll() is part of the framework.](https://msdn.microsoft.com/en-us/library/73fe8cwf.aspx) (But we get your point. 😉)
Linq is not just Linq-to-Sql.
All the time except in performance critical sections.
I use VS Code with .Net Core
? Visual Studio 2017 Product Family System Requirements says that the software is compatible with Windows 7 SP1 (+ security updates).
I openly admit I am rude. That doesn't change that you are too.
Sounds like you just need version control for your project. You should do a little research on version control software and what it is, why it exists, etc. Then pick a VCS. Git is probably the most popular and Visual Studio has basic support for it. Here is a great way to get familiar with Git https://try.github.io/ Once you have version control you just need somewhere to host your repository so that your whole team can access it. For that you can use GitHub, BitBucket or Visual Studio Team Services. Azure can be used to host the actual website and integrates with Visual Studio well. You can basically right click your project and click Publish once it's all set up. All of the above can be done for free.
Fair enough. Again, I'm confident if XNA is already set up there really is no reason to change over. Since it is part of the requirements of an upcoming educational project, I need to get XNA working as well and haven't really looked into Monogame a lot.
I use Visual Studio Community 2015 with Win7 and don't have any problems. If you're just starting out, don't worry that you don't have the absolute latest and greatest.... you're a long way from pushing C# to it's limits. 
Thanks, I'll give the older version a try.
Same, it works fine on both 7 and 8.1 for me, using Visual Studio 2015 and 2017 OP, you've gone wrong somewhere - show us some screenshots of what you're seeing 
That's weird. Maybe it's a bug?
We are using linq2sql as well at the moment we are looking to switch to ef or linq2db soon.
It's like a drug
I think that might be offered because there is enough extra key strokes involved with changing public int a{get;set;} to int _a; public int a { get{ return _a; } set { _a=value; } } And it happens often enough that the resharp guys thought it would be helpful. 
Visualstudio.com. Gets you a TFS team project with up to 5 users for free. You can use Git or TFSVC for version control for free. 
As much as possible is the only answer. edit: Seriously though, as much as possible. There are times where performance may be an issue (although the things I write aren't performance sensitive) so use your best judgement.
I really wish I used it more than I do. I rely a lot on my SQL stored procedures to do most of that bulk
Yes, I use LINQ all the time. It is a metalanguage for constructs commonly found in functional languages that also lets you express relational database (i.e. SQL-like) thoughts. There is a small performance cost to pay (it has to construct a state machine; raw for loops do not), but the conceptual clarity it brings to the problem of manipulating collections is often worth it. Your operations will be so much more elegant, brief and readable. It really pays off when you have to do complex data manipulation and have to get it right. The only times you wouldn't use LINQ is if your code is extremely performance sensitive or if you are only doing simple iterations over a collection.
LINQ is super concise and useful. I can have an IEnumerable and perform 5 different manipulations on the set in like 20 seconds and 5 super clean lines. It's a godsend.
Like everyone else has said, I use it for manipulating collections. It provides quick and easy solutions for a slew of common problems. I'll throw in two recent examples: &amp;nbsp; Just recently, I was answering a question here about parsing polynomials from strings. After throwing together a regex to put the polynomial data into a list of structs, I defined this LINQ statement to combine the terms with the same exponent: return (from term in terms group term by term.exponent into grouped select new Term { exponent = grouped.Key, coefficient = grouped.Sum(t =&gt; t.coefficient) }).ToList(); &amp;nbsp; And a while ago at work I needed to take four dictionaries of data from different sources and combine them together into a single collection. var data = from vin in vins from area in areas from bay in bays from filter in filters where vin.Key.Id == area.Key.Id &amp;&amp; vin.Key.Id == bay.Key.Id &amp;&amp; vin.Key.Id == filter.Key.Id &amp;&amp; filter.Value != "true" select new string[] {vin.Value, area.Value, bay.Value }; &amp;nbsp; Linq provided quite pleasant solutions to these situations, and I often enough find more situations to apply it to.
I use linq all the time
Constantly. But I use the lambda syntax exclusively. I just can't handle seeing "select from where" in my C#. Bad enough in sql.
Visual Studio Code - Does not support debugging multiple applications at once. - Can't deal with projects or solutions (it only handles folders). - Extensibility is very limited. - You can't even place two tabs below each other. Only next to each other. - Can't print files. It's progressing nicely, but still far behind something I'd consider IDE level. Until a few versions ago you could not even find and replace across files.
I never even use it to query a database. It is superb for quick snippets, prototyping, or any kind of data query and manipulation. The data sources I tend to query and manipulate in LINQPad are various JSON, CSV, and Excel files.
&gt; I don't use it as a SQL replacement like some do. I'm still "old school" where I use stored procedures for all data manipulation. Stored Procs are much faster when you're dealing with large data sets. (I had a table that added 200 million records a day in one database... we needed stored procs for certain tasks.) However, for everyday purposes LINQ on a resultset from EF or NHibernate works fine, is fast to program, exists within the existing code base, and is readily comprehensible by the next programmer who comes along that needs to read and understand your code. (They don't have to *find* your stored proc or know SQL enough to figure it out.) Also having the code in one place makes it more easily translated for a business person to read, which can help ensure the code is compliant with needs. 
So my experience is mostly with EF6, so I guess keep that in mind. But I used it for a project with a pretty big domain, lots of lookup tables and a few core takes with lots of columns. It was ok at first, but as the domain grew, the start up time was getting longer and longer. It drove me nuts that to pull back like 6 records on the first page, it would be like 10-20 seconds. I've heard they made perf a priority with the version in core, but I haven't used. I've been searching for something like linq2db, just for fast reads to populate a grid. And having linq was a requirement. 
I do a lot of telemetry processing, so I write a TON of LINQ. I feel like it's a good thing to be familiar with, as it makes working with collections insanely simple. The extensions, in particular, make everything a breeze.
Thank you greatly! To my shame I must admit I had forgotten this exists.
I presume you have a list of Car, so by the glory of [LINQ](https://msdn.microsoft.com/en-us/library/bb397933.aspx), here goes : var listOfColor = cars.Select(c =&gt; c.color).Distinct().ToArray(); When you get the color input as integer (assuming you display the selection as zero-based list), here's how to get the car's that fit var carsOfCurrentColor = cars.Where(c =&gt; c.color == colors[selection]); Now you need the total price of those cars var priceSum = carsOfCurrentColor.Sum(c =&gt; c.price); FYI, if you're dealing with monetary value, stick to [decimal](https://stackoverflow.com/questions/803225/when-should-i-use-double-instead-of-decimal), the [double accuracy](http://stackoverflow.com/a/316731/529282) is too low for that
So, after reading these comments, there seem to be (at least) four parts: * Extension methods such as "Any()": I have been using these from time to time, but not often. * Query such as "where" or "select": I have seen this from time to time, but did not try to use it, as all these keywords looked weird to me. * LINQ to SQL: I did not know this existed. It seems useful. Are you using this instead of plain SQL often? * LINQ to XML: I did not know this existed. Is it useful?
I use LINQ in every single method I write that is longer than 20 lines of code. If it's less than 20 lines of code, there's still probably LINQ in it.
I've used LINQ and P-LINQ against object collections measuring **hundreds of millions** of objects (numerous gigabytes of memory in length). In only two situtations did **profiling** show LINQ to be a bottle neck that I replaced with handwritten loops. 
They had used C# for varying amounts of time between 1 and 6 years (I had three years experience with it myself), and none of them was a recent college grad. 
&gt; If your .NET/C# app works with an RDBMS and doesn't use EF, you're doing it wrong. You could still use your business rules instead of querying the database.
L2S is superior to EF, especially if you use sqlmetal Dapper + Dapper.Extensions is a better modern tool.
I use Linq for work across the following languages: - OData API - SQL - SQLite - Azure management API - Azure Storage Account Based on the needs of my job i need to connect to one or multiple instances and run reports against all, C# with Linq can be great as you have learned one method of querying form multiple environments, I highly recommend it for anyone that is using some of the above.
Do you have a List&lt;Car&gt; or Car[]?
My class is not static because I am using the Main Class to read in the inventory from the user. If you mean is there anything in my Car list, then no. Once again thank you very much, I am feeling stupid here. I first tried to do a for loop with an if statement but I kept getting zero until I realize while. I spent two hours trying to think of a way to keep the total.
You are missing out on one of the simplest, easiest and most powerful ways to make your code... simpler, easier, and more powerful. I'd go so far as to say that you're only a low (skill) level developer until you master LINQ for common usage scenarios. *Some of it*, however, is just obscure and not all that useful. However, map (Select), filter (Where) are elementary and extremely useful. It may require some rethinking in order to internalize concepts that are usually associated with functional programming, but it should by no means be a problem and you're likely to see the advantages very quickly once you get rid of nasty nested loops, temporary lists etc. 
Holy crap I don't know what happened but I closed out of the solutions file to open another and I just went back in and the program is working!! Thank you so much!!!!
[Another example from Stack Overflow](http://stackoverflow.com/a/43373835/1248177) (OP wants a non LINQ solution, so I provide it for fun).
At first I was very sceptical about line, however after years of using it, I got so use to it, that it actually is making me lazy. :(
I dislike that it has gotten this "special status" and called LINQ and all that fanciness, since what people mostly call LINQ (properly LINQ-to-objects) is not much more than some methods that operate on general collections. Most languages have that without a flashy name.
I can. It was when I needed to show whether or not LINQ was slower than for-each. 
If you like Dapper then you may find Chain to be even better. https://github.com/docevaad/Chain/wiki/A-Chain-comparison-to-Dapper You'll typically get Dapper-like performance (sometimes better, usually slightly worse) without all of the manual SQL generation. 
I just want to clarify that the advice here should definitely not be "don't use Linq in performance-critical" code. I know that's not really what you're saying, but I fear it's how it might be read. LINQ allows you to very succinctly express concepts that would otherwise be written with repetitive boilerplate code. It's a library that offers higher-level abstractions that encapsulate common tasks. If you use it, your code is cleaner and more readable and you end up with far fewer hand-written loops and fewer mini-methods like "GetFirstPerson()". If you discover a performance bottleneck -- and by "discover", I mean that you used a tool to verify that the bottleneck is actually in LINQ -- then consider dropping the abstraction level of the performance-critical section of code. Naturally, you should mark that section with a comment so no-one undoes the performance optimization. I've done this less than a handful of times. 
The thing about Dapper is that it isn't really modern. That's what we used to do before NHibernate and EF were created. 
LINQ to XML weirdly covers a number of XML datatypes as well, which have nothing to do with LINQ except they lend themselves a bit better to using LINQ-like patterns. I think the marketing teams got too much power in this. I just think of them as XElement, XAttribute etc. and forget that it's supposed to be "LINQ to XML".
LINQ to SQL is deprecated. You are supposed to use Entity Framework instead, but that has a lot of problems. 
I'm an EX SQL dev and I find linq really hard to get the hang of. it is hard to describe but I find it too unspecific, but that's not true once I see what exactly it's doing. Do you have any advice on learning Linq from MSSQL? The standard linq queries make much more sense than the lambda queries to me. 
When I worked with C#, I used it (especially in the extension method form) all the time. It's comfortable as hell. Java finally has something similar since 1.8 but sometimes I have to work in 1.7 and manipulating collections without it is a huge PITA.
LINQ translates precisely to standard loops in the CLR. It's syntactic sugar. Delicious syntactic sugar.
Interesting. Might have to give this a go next project. The perf comparisons were interesting. Especially that EF 7 is way slower than 6. 
Oh cool. Thanks for the example. That's very interesting. If I have say 30 textbox to fill out wouldn't Tortuga Chain be doing 30 round trips to the database to pull the information where a dataset is one round trip?
I agree with /u/Liam2349 - this is a decision that has to be made for each application. One thing I'd point out, though, is that many tutorials, etc, simplify the bits they're *not* teaching you so you can concentrate on the bits they *are* teaching you. I would **in general** agree with you that I probably wouldn't do it this way (but there are exceptions), but could it be that the tutorial has done it this way because it keeps the forms stuff simple, and allows you to concentrate just on how they interact with the database?
I feel that the query syntax (from m in coll select...) obfuscates the actual goings on of LINQ. LINQ is really just a series of transformations for collections and aggregators for collections. For example, .Where takes a collection and returns a subset of it. .Select is a literal 1-to-1 transform. .Union simply appends a set to another. One thing that helped me greatly in learning it was to use a lot of variables and only one operation at a time. For example, instead of doing 'var x = collectionOfCustomers.Where(x =&gt; x.C_ID.StartsWith("1")).SelectMany(x =&gt; x.PhoneNumberCollection).Where(x =&gt; x.StartsWith("(317)"));' I prefer to split it up into several operations. Since LINQ is a lazy as it can be, it only makes it more readable. It doesn't eat more memory or increase the workload to do: var customersWithId = collectionOfCustomers.Where(x =&gt; x.C_ID.StartsWith("1")); var customerPhoneNumbers = customersWithId.SelectMany(x =&gt; x.PhoneNumberCollection); var localPhoneNumbers = customerPhoneNumbers.Where(x =&gt; x.StartsWith("(317)")); It may just be me, but it helps my thinking to get the sets very distinctly separated.
These methods in order: https://msdn.microsoft.com/en-us/library/system.object.gettype(v=vs.110).aspx https://msdn.microsoft.com/en-us/library/8zz808e6(v=vs.110).aspx https://msdn.microsoft.com/en-us/library/a89hcwhh(v=vs.110).aspx
If there are large number of objects, LINQ is unlikely to be a relative burden, but if there are a large number of calls, it can be.
You can connect the debugger to a live instance, it's particularly easy with Azure websites, but you can configure any site for this I think: https://blogs.msdn.microsoft.com/webdev/2013/11/04/remote-debugging-a-window-azure-web-site-with-visual-studio-2013/ You could also add a page that compiles and executes code using Roslyn, and dumps the results. Or an endpoint that accepts serialized delegates and executes them, then returns you the responses. None of these are really good ideas, but they are possible!
Constantly.
Thanks! appreciate it
In all fairness, I use LINQ all the time but I always find myself having to look up syntax. Something about it just doesn't stick with me for some reason. It just feels unnatural somehow. If I was in an interview situation and was asked to provide a solution off the top of my head I'd probably go the safe route too, despite the fact that I would undoubtedly use LINQ in the same real life scenario. I'd probably just have to look it up first.
That's a silly statement. That's like saying graph or object databases aren't modern because their was stuff done with them in the 70s before relational became the defecto standard because a megabyte was thousands of dollars.
An option that more compactly emulates the switch would be to use a `Dictionary&lt;string, Executable&gt;`, where `Executable` is an interface implemented by each of the classes the can be executed in this way. You store a reference to each class in the `Dictionary` with the key being the name the user enters. Then the code is just: // Setup Dictionary&lt;string, Executable&gt; lookup = ...; // Add all of the references ... // Execution // lookup[name].Execute(); This assume that name as already been validated, but this is the basic example to get the point across.
You might try the following, when the page first loads, right after you set the initial value. This is assuming your list of ATID options is populated. It won't work if you do this before the list is populated. $("#ATID").trigger('change'); This will (should) trigger the 'change' event on the ATID element. 
Does exactly what it says on the tin....You haven't declared the variable 'result' in all instances. You need to either initialise the variable on creation (int result = 0;) or add an assignment (result = 0;) in your Switch statements default: operation. 
Cool, I will have to look into that! I wonder if a similar strategy works for desktop applications/services?
You can always use Task.ContinueWith if you want to terrorize yourself and others with your cryptic callback event-style coding skills.
There's a project i maintain on github called MetaLinq that you can use to serialise lambdas.
If you're pulling large object graphs with EF just to display stuff, you might want to consider flattening those using views and POCOs/Value Objects. EF shines when you rely on it's object tracking through context, which in all honesty mostly applies on the save/persist path of code.
LINQ-related, to a degree, but my favorite problem for interviews of senior candidates is asking them write FizzBuzz using no loops or conditionals.
Thabk you so much! Now it works, I just have to make it so I can input the entire equation on a sing line instead of doing '5 +5' 
I think missing features are being added back
Use LINQ every day. It's amazing. You can basically swap out any foreach with a cleaner linq statement. It's less code and therefore less defect prone.
I havent used this personally but it sounds pretty cool, Intellitrace standalone collector https://msdn.microsoft.com/en-us/library/hh398365.aspx If you end up using it, report back as I am curious if it's any good You need Vis Studio Enterprise for this
Visual Studio ships with Remote Debugger, which is a small program that can be installed on host running the application. This allows VS to attach debugger to that machine. You will need compilation symbols from that specific build of software to be on that host (in correct paths). Another way is to use one of the live.sysinternals.com programs to create a snapshot of running program (ie. memory dump that isn't terminal to the program) and analyze it later with any debugger than can read .dmp files (windbg, VS debugger).
All day every day. 
Impossible!
I actually figured it out but I'll try this also. so if I do this, will it continually trigger change even after the first time? so basically it's going to work the same as me just putting .change except this will do it also automatically upon load?
Any CLR process can be remotely attached to, we do it sometimes for windows services running in production. Fun fact, NCrunch remote debugs programs running on the local machine whenever debugging is started. Check the debug menu of VS, make sure the compiled code is up-to-date. 
You make a good point. If you have the experience to make it work in game dev it sounds like you have two viable options. Just comes down to what you want more. Good luck :)
Since C# 6: `Guid selectionId = menu.SelectedValue ?? Guid.Empty;` IIRC, target .NET version doesn't matter as it just gets compiled to the equivalent conditional, but you do need C# 6.
Thank you. Any advice is appreciated.
&gt; EF/NHibernate are nasty bloated, though. Sure they are. They're also powerful and easy, so if you aren't time critical or memory critical, they're good choices. 
If you could pseudocode it, there's no excuse. I don't care if a candidate remembers the exact name of something, if they can say "there's a thing that does *this* and it's called something like *this*." And I tell them so.
What reflection can offer, here, is the ability to wire up the methods automatically. It's still *substantially* improved by using an interface or abstract class, instead of programming wholly by convention, but it could still eliminate some otherwise tedious messing around.
Excellent addition. I will definitely have to add LINQpad to my toolbox 
Agreed - but it is definitely a POLA violation and "convention-based" is massively overhyped in my opinion.
&gt; in order to make sure you aren't saving state across requests you do need to be aware of whether you are dealing with a singleton or an instance that is scoped to the request. You have that exactly backwards. In order to safely store pre-request data in the object, you need to know if it is an instance that is scoped to the request. If you aren't storing pre-request data, it doesn't matter if it is a singleton or not.
The result variable is of type int. You cannot assign a string to a variable of type int. 
I like tfsvc personally. But it can lead problems on large active projects. That's when git and it's pull requests start to come in handy. 
heh, well, ranty isn't terrible, but it may not be the best method of presentation.
I've used the MMA mentioned in that link in the first note, and it does as advertised. This is with our own VMs hosting Windows Server and apps in IIS. Install requires the apps to recycle, but to start and stop monitoring is just power shell commands after that. It's also the Agent used by SCOM now, but can be run without the whole infrastructure needed behind it.
Although I would agree, it would make more sense if it was a string, since OP is just calling ToString() on result anyway and then OP could just assign result '???' or even better assign it something like 'Error 1' and have documentation for each error code. 
The best arguments in favor, I think, are that it probably best matches developers' expectations, and that it's very difficult to predict which parts ought to be virtual. These arguments are strong, in part, because they're understandable to most anybody, across multiple levels of experience. The arguments against have to do with performance and maintenance, which are details that either require specialized knowledge or substantial experience to really understand and appreciate, and which are open to a certain amount of subjectivity and contextual judgment.
Difficult to automate, but interesting nevertheless.
Was thinking this might be the best solution.
I was really looking hard at ravendb till I saw the license and pricing. Either AGPL your code, or pay 10grand for a 1 time payment for 4 cores and zero/community support, production 24/7 brings it to 21K in price! Can almost buy 7 mssql licenses for that.. So Postresql with an adapter on top and same functions and... free!
Yeah I had a project I wanted to use it for, and I didn't expect to make money on, but could have bought a real license if I did. But I didn't want to release my source code obviously, and that took Raven totally out of the running. 
You should be passing the ViewModel into the view not the model. Also you should be doing all of those queries in the controller or anywhere else besides the ViewModel. A ViewModel should not contain much if any logic.
This is not far from what I've already got. Performance is not adequate.
&gt; Console.Error.WriteLine thank you sir
IKVM was a wonderful product that really helped us in all situations where a reference implementation was only available as jar. I really hope that the Java 9 release (with the modules) still takes some time, because we now need some time to search for an alternative.
You can use Trace.WriteLine and/or Debug.WriteLine. They're similar except that Debug does not get included in builds that aren't debug, where as Trace will run in your release code. Implement a "Trace listener" to output those messages in whatever format you like (which can be hooked to telemetry like ETW, or written to a log file, or even just mirrored to the Console). 
but also *can* you just bind it to the class object and it's just considered bad practice? or does it have to be binded to the viewmodel object.
If you give the view model a constructor that accepts a parameter then you also need to create a constructor without any. 
Is it strange to anyone else that C# methods are non-virtual by default while the class itself is non-sealed by default? Those feel contrary. I like the C# default of non-virtual. I kind of wish all classes were sealed by default too. I should have to invite extension.
That would violate the open-closed principle. No, you should not have to invite extension. You should have to invite change (method overriding may change the behavior of the class), but you should really not care about whether someone creates a subtype with a few additional methods.
I learn something everyday. +1.
In SOLID design principles, the O is for Open Closed. If you understand Open Closed, you understand why you elect for open by choice, closed by default. Additionally looking at long term support for libraries that are distributed, once something is opened, closing it causes code breaking changes for anyone who uses it. 
Yeah its a bit messy. I had a few hundred outlook messages with excel attachments and i was able to use regexrenamer, extract all, then do a search for all files, sort by size, and i just grabbed all the substantially sized files and regexrenamed back into .xslx. i certainly wouldnt wanna write code to try to accomplish that lol, but it worked for my purposes. Good luck!
I wasn't aware of that syntax. I'll have to try it out. I don't practice a ton with "new" C# features since I don't get to use any fun "new" C# features at work. Our production servers are so far behind the times that I'm scared to put anything "new" in the code base. My boss is an old guy that's been doing WinForms since back when WinForms were "cool" and gets mad at any code he doesn't recognize right off the bat. (All quotation marks and accompanying "teenage" eye-rolls fully intended.)
Yeah, I like his blog but he posts almost every day and it's a *liiiiittle bit* quantity-over-quality. Still, when he's writing about more technical stuff (rather than opinion/API design) it can be pretty nice.
did you ever figure this out? With C you need three things for this 1 You must declare the variable. 2 You must assign the variable a value. 3 You print the variable. In your code, you do #1 and #2 at the same time. The problem is that you're doing it within the brackets of an if statement. So that means it's a local variable and only exists within those brackets... If you declared your variable right about the if statement, you could use it outside of the brackets... string output = "Declare me"; if (input == "quit") { output = "Goodbye."; } else { output = "You entered " + input + "."; } Console.WriteLine(output); 
I think I'd have words with a developer who performed a .ToList() before narrowing down their results. It's right up there with .Where().FirstOrDefault()....
It's a great tool, but the capture process is a system resource hog. It's not something you want to have running in the background unless you REALLY need it. The dump files get massive very quickly and even a beefy server runs slow when we turn on a capture. We usually only run it in coordination with an affected customer for 1-2 minutes at a time. 
Which is a process I definitely like. People forget the names of methods or libraries and whatnot, but if they're at least *aware* of them they can probably look them up pretty quickly. I haven't done front end work for over a year at my current gig, but the stuff I'm on basically has me writing jQuery to handle little things here and there. I'd forgotten the shorthand syntax for waiting on the entire document to be loaded, so I simply googled, "jquery document ready shorthand" and bam, there it was.
In the case of performance critical code you're right, but outside of that I don't think it's a *completely* unreasonable argument to make. If the LINQ method is just a shorter way of expressing the longer way of doing something, and that longer way has an optimization that's included in a future version of the framework for that LINQ method, then you get that optimization with no further work on your part.
I mean yeah that's definitely true, but you mentioned it being used as an argument for linq, which is just bizarre to me. It's definitely not something you can rely on, it's just a nice little perk if it does happen to occur. So as an argument for using LINQ, it's pretty weak. 
A few things I notice on a very brief glance: - **DO ABSOLUTELY NOT OVERRIDE THE SERVER CERTIFICAT VALIDATION CALLBACK!!!** This is something that a **library** should **never** do. Your change will affect the whole application, not just your library. You should not disable certificate validation checks entirely for the program. **You're introducing hidden security risks into applications by using your library!** And frankly, with LetsEncrypt here nowadays there is no excuse for not having a valid SSL certificate. - It's very uncommon to have another .sln file in a nested folder (Example). Why not have it all part of one solution? - You're using a weird documentation format, that will **not** be recognized by C#. So essentially all your library methods are undocumented. Look up XMLDoc - you might not like the format, but it's the standard documentation format and the only supported one. If you use XML Doc, then the XML documentiaton will be bundled with the NuGet package and will be available to consumers. With your format, it won't. - Consider using `ConfigureAwait(false)` on await calls, because you're writing a library and you seemingly don't require a synchronization context. - You have "commented out" code (e.g. AsyncConnector 108-127). You're using source control: Just remove the code. Don't comment it out. - You have a lot of nested calls, e.g. `MethodA(MethodB(MethodC))`. Really consider introducing variables to store the values temporary. It makes the code easier to debug and to read - the compiled output will be the same. - You have `*.rej` files committed to source control. Don't commit those files, they're rejected versions from merge conflicts. - You're using folders that are not at the same time namespaces, that's very discouraged. The folders should generally represent the namespace. - You have **very generic public names**, e.g. `Connection`. Consider being more specific. Personally I dislike it if I add a library and suddenly I have a bunch of generic names, even when they're in a namespace. This is very debatable tho. - You often have `Get-` and `Set-` methods. Why not use properties? **Especially** when those methods do **nothing** more than setting and getting the value from... a property. - You very often create instances of classes just to call an instance method on it, then throw the instance away (e.g. `Nis.cs` the `new AsyncConnector.GetAsync`). If the class contains no state, make it static. There's no need to create garbage. - Sometimes you're making `await` calls in loops. Consider executing those `await` calls in parallel. It will likely improve performance. - Do not have classes like `GetAsync` or `PostAsync`. Those are methods, not classes. - Avoid nested public classes. If they're public, it means they're used outsides of the parent class, so it's warranted that they should be in the namespace directly. **Do not misuse the nesting classes feature as namespaces.** - Now I notice you're not using namespaces **at all**. You always just have the base namespace, even override a ReSharper warning noticing you that you shouldn't do that. You shouldn't do that. Use namespaces to structure the classes. - Do not commit `Newtonsoft.Json.dll` to source control! This is a huge no-go. You essentially ship a copy of the Newtonsoft.Json library **within your library**, while most people **already have it** as a dependency. Instead your NuGet package should declare that it has a dependency on Newtonsoft.Json - then NuGet will retrieve it **when necessary** (when it's not already there). Not sure about the others, I don't know them and I don't know if there's already NuGet packages for them. 
Such a shame
After some soul-searching and a lot of Amaretto (don't judge) while reading the implementation for DataTable and DataRow and DataRowCollection, I went with references to parent inside child. This way I can do the fun infinite loop you can with DataTables: dt.Rows[idx].Table.Rows[...].Table... (this is just a joke). Realistically this was the solution that had the least amount of overhead in logics and smallest in terms of data flying about. 
I'm 'old school' and swear by Stored Procedures and pure SQL syntax, and only use LINQ when I'm actually dealing with collections. I have many stored procedures that do more than just CRUD operations and have logic in them, plus there's a minor performance loss when using LINQ as a substitute to pure SQL. I often get fellow programmers ask me "Lol, how does it feel to have to reïnvent the wheel and having to write custom queries with many joins every single time?", which is bullcrap. I don't write all my queries completely from scratch every single time, obviously after programming for many, many years, I have scripts that generate 90 to 100% of the query to which I just have to add some finishing touches. Basically. The same script also generates my Interface, my model and a Repository, sort of how Entity Framework does. Except I don't use Entity Framework and I've been doing it like this from when Entity Framework wasn't even a thing (Pre .NET 2.0 era). I manage some applications that deal with millions of records per day. Using LINQ excessively (and especially as a replacement to pure SQL) would be a huge bottleneck and performance loss.
I found this ages ago, I use it to allow dragging outlook attachments into my application: https://gist.github.com/MattyBoy4444/521547
Thanks for that. Any usage instructions, couldn't find any in that link.
I've written a weekend-quality Reed Solomon implementation, which does some finite field arithmetic. It might serve as a good place to start, maybe some of the code is useful to you. https://github.com/antiduh/ErrorCorrection
One thing I thought about writing was try to avoid that pattern. There are many better options, with CQRS being one of the best alternatives. I find the main issues with the repository pattern are you abstract away all your good ORM features (e.g. Queryables, Projection) and as an app grows it gets really difficult to work with - you'll have tons of methods on your repositories. 
If you aren't married to EF then I'd consider going with Dapper or Petapoco instead. You know SQL and it will be easy to leverage the existing views and stored procedures. I also second the CQRS pattern recommendation over the repo pattern. If you have complex UI look at using VueJS over jQuery, it's fast to pick up and much easier to organize your client side code with.
Job requirement. Not by choice. 
Much much easier. Dapper is more query focused, but Dapper-Extensions adds full CRUD support. Petapoco does all out of the box. If you want something to build all your classes from the database then Petapoco includes a T4 generator that will do that for you. One of the bigger things you get from EF is the ability to query the database with LINQ instead of SQL, which is more useful if you don't know SQL but IMO comes at a big price. Most of the EF examples around show how easy it is to get up and running on simple projects but in the real world, especially enterprise level, you'll either need to find an EF expert for your team or your going to spend a crazy amount of time trying to get EF to work the way you want. For context: I've got 27 years of professional dev experience, 11 years of it is on the .Net stack working for a variety of companies include billion dollar corporations.
I can't imagine anything being easier than EF, and EF is Microsoft's recommended data access layer.
Consider angular2 over MVC. 
ExtremeOptimization or Math.NET
Thought about angular 2 but I want to reuse a lot of the sites Javascript and html and I think going to angular 2 all that would change. Also another thing to learn isn't ideal. Trying to stick to what we know. But thanks for the input. 
I'll check it out. I've been playing with linq and getting the hang of it but it has me worried when we get to our more complex queries. Just not sure how of a pain it will be for ef and linq to do these. If dapper is more of like writing Sql then that could be a good choice. It seems like we will need custom view models for most pages anyway so the import of ef tables might not even help much. But I am not sure exactly how all that works just yet. 
That sounds like a hard task, and I would look for ways to make it less steep, e.g. hire at least one person who has .Net web experience, and start with small experiments that can be discarded or have the architecture changed without huge effort as you learn.
&gt; Will probably transition all stored procedures Why? ASP.Net does not require this, and neither does SQL server. It doesn't make a performance difference over cached parameterized queries. If you have DBAs who really want it from an access control or manageablity point of view then fine, let them do it. But otherwise, I don't see a need.
That was our first request and it won't happen before we start. But ideally that would great! 
Only reason is since it would be easier for us not having to convert it. Most likely we won't end up with any stored procedures, but it's an option. 
If you're not too familiar with c# and .net, a pretty helpful tool is Resharper. It's been a huge help to some teammates that have moved from other languages to work on our c# apps.
Thanks, will look more into it. I checked it out a few days ago but really didn't understand what it was for. 
You can read his twitter feed from.here: http://www.ikvm.net/ The latest seems to be something about IntPtr, but I don't understand the details.
I really hate hard coding SQL in an application, there is so much room for stupid mistakes and errors and it can be a pain to refactor. I usually use EF for basic stuff and when it gets more complex I write a stored procedure and add it to the DbContext manually with a wrapper.
&gt; transition all stored procedures &gt; Most likely we won't end up with any stored procedures Ah, I first read that as "transition *to* all stored procedures" i.e. only sprocs allowed. Anyway, there's no compelling argument to go either way as far as ASP is concerned. You can have either sprocs, queries or a mix of both.
It's just a visual studio extension that enhances and adds dozens of visual studio features like improved shortcuts and better code completion and detection plus a bunch of little tools that may be useful. I can't use VS without it anymore. 
I've been doing something similar for the last couple of years. I would recommend you keep your razor to a minimum, and write most of the views in a javascript client-side framework of some kind (aurelia, react, vue?). Choosing a framework is a "scary" question which can take a lot of time. My recommendation is to just pick one of the most popular ones and stick with it. Use ajax, and create rest apis to communicate with the server (via MVC 5). Check if SignalR is avaliable for .NET Core by now. If it is, use it. I would also recomment using typescript or flow for type-support in the javascript. Will make your life easier when the application grows big and you start changing functionality. Set up a build server. Use a linting tool (eslint, tslint). Create unit tests and spec tests (check out selenium, specflow). Use resharper. It may take some time to get used to, but it will teach you alot about C#. Check out Dapper. Check out LLBLGEN. Make decisions and stick to them. Use LESS or SASS (or similar) for css.
I was only outlining the arguments, not lending my support to either.
Why do you recommend keeping razor to minimum? I just started learning Asp.net and I'm curious about your experience.
For speed. Razor is awesome for generating html, but you want to avoid postbacks and use ajax instead. And razor cannot do anything for you on the client side, so you would have to postback to get any updates with razor. Use a javascript framework instead.
&gt; That's why we originally said ef. It's back by and maintained by Microsoft so it must be the way to go. why 'must' it be the way to go? They have had almost 60 people working on EF back in EF 5, and they couldn't do much more than what I could do with [LLBLGen Pro](https://www.llblgen.com) on my own. Their framework is seriously slow and the EF6 path is not really well maintained (the team currently has 10 people working on it and they almost all work on EF core). EF Core is still very buggy and fixes they've made for bugs I've filed 3 months ago are delayed till EF core 2.0 is released which is after the summer. I don't know about you, but that's not really software you can depend on. Also, that MS works on it doesn't mean it will stay forever. There are plenty of technologies within .NET they've released in the past 14 years which are dead today. My advice (as a developer of ORMs for .NET for 14 years now): don't use EF, use what is reliable and you can depend on it: Frameworks where bugs are fixed quickly and it doesn't move its cheese when they feel like it. 
Thanks. Will definitely keep this in mind. 
I remember using IKVM to use a Java SAML implementation when there wasn't a good (free) one in .Net. So long, IKVM.
 SELECT * FROM articles Wow, that's insane.
&gt;I find the main issues with the repository pattern are you abstract away all your good ORM features (e.g. Queryables, Projection) So don't use the repository pattern for read-only actions, only writing.
&gt; Most of the EF examples around show how easy it is to get up &gt; and running on simple projects but in the real world, especially enterprise level, you'll either need to find an EF expert for your team or your going to spend a crazy amount of time trying to get EF to work the way you want. Really good point. I am struggling with implementing it in any large scale applications. I am a recent LinqToSql convert so all of this is obviously teaching me that i dont understand far too much shit about data layer design and the amount of possible roads to take and patterns i've tried out and thought i have a decent ground to stand on, but then another blog points out why thats completely wrong and you may as well scrap it and start over. Part of the issue is i have to interact with an existing extremely large SQL database that is so poorly structured that its actually an impressive new level of incompetence. Not a single relational constraint or defined mappings on any tables, no views, "null" where not appropriate, no consistency on naming conventions, duplicate data all over the place... Its like a 400-table+ excel sheel with plenty of the tables holding 50Mil+ records each. Ugh. Not a very good "intro to EF" project... That being said, I cannot write complex SQL queries. the syntax is such that it makes it difficult for me to follow the structure and flow of the data, whereas with Linq I always understand the logical shape of the data before and after the IQueryable transformation, making chained Linq statements so much cleaner and well-defined to me. Id love to be able to really write good, complex SQL Queries, but i always end up getting annoyed by the syntax and the weird inconsistencies, it seems so thrown together to me
That's quite informative, thanks! I will definitely look into Ajax (and perhaps js as well, however I was hoping to avoid it)
NPoco is a fork of Petapoco that supports basic LINQ-style queries. For more complex queries I usually write and test my queries in SQL Management Studio and then paste them into my code. IMO investing time into SQL will always pay off, I think it'd be faster to get good at SQL than learning all the EF quirks, plus it's portable to any relational DB and it'll help you in performance tuning EF because you understand more about what EF is executing. Finally, there are many useful SQL things that just aren't possible in EF. Especially with a legacy DB like you've got, which seems to be more the norm than exception.
You will still write sql for complex queries, reports etc. they will just be sprocs, and called from EF
Yes.
Can confirm the last part, having worked with the Java Stream API. Don't get me wrong, it's certainly quite nice and civilized, but it's a shadow of what LINQ has grown to become. Also, flashy names? You do know what an acronym is, yes? Language INtegrated Query. It does exactly what it says on the tin.
&gt; you might as well get the server to do the rendering too, it's a lot more powerful Being 'more powerful' isn't really the issue. A modern computer/portable device can easily cope with the task of turning JSON into HTML. Bottlenecks are more likely going to be on the connection (in which case server-side HTML generation is definitely worse as it'll result in more data being sent), and on the browser rendering (which, in many cases will be faster with a frontend framework - adding/removing items to a list for example). What's more, I think the separation between business and display logic that you force upon yourself when using a frontend framework is valuable in codebase maintainability.
Haven't made the jump yet, but I have heard that.
I tested this, it does exactly what you want. On a side note, does anyone know how to get a VSTO addin to work in Outlook, without running Outlook as Administrator? The sample addin I used to test this would get an error on startup if I wasn't admin. private void Do_DragEnter(object sender, DragEventArgs e) { e.Effect = DragDropEffects.Copy; } private void Do_DragDrop(object sender, DragEventArgs e) { if (e.Data != null) { if (e.Data.GetDataPresent("csv")) { var csvBytes = e.Data.GetData("csv") as MemoryStream; if (csvBytes != null) { var csvString = Encoding.Unicode.GetString(csvBytes.ToArray()); if (!string.IsNullOrEmpty(csvString)) { var entryIds = csvString.Split(','); if (entryIds.Length &gt; 0) { var sb = new StringBuilder(); foreach (var entryId in entryIds) { var mi = ThisAddIn.Instance.Application.Session.GetItemFromID(entryId) as MailItem; if (mi != null) { sb.AppendLine(mi.Subject); } } textBox1.Text = sb.ToString(); } } } } } }
&gt; I usually write and test my queries in SQL Management Studio and then paste them into my code. This is something we do at work, I wish that there was SQL syntax highlighting with inline SQL although I don't know how that would be possible. 
Okay, nm. Looks like OpenXML is good for other office doc types as well, and also lacks the dependency on an installed office application.
This is the approach I usually take. I am NOT a fan of leaving SQL queries in the code. I find it incredibly difficult to manage especially when you have larger teams. You don't have compile time checking; you don't have syntax validation. Sure if you just select * everything it is hard to mess up; but that is hardly efficient. I just cannot agree with SELECT * XXX. That is just bleh. You'd not do that in a stored procedure; why would it be okay in code?
I know. EF works beautifully in a code first, new database design and creation context. Writing a set of extensible, statistical anlytics queries for data modeling sounded like a hell of a fun project to take on until i looked at the database. The dude wasn't a DBO or SQL expert, but then again neither am I, you gotta at least try to learn more than the absolute bare minimum. It would have made his life a million times easier too if he just read up on simple relational database theory for a minute before you just go creating more and more useless tables with the only means of creating associations being nearest neighbor timestamps with a threshold, it could have been really an interesting project
[You don't need javascript frameworks to do ajax with razor.](https://msdn.microsoft.com/en-us/library/system.web.mvc.ajax.ajaxextensions.beginform\(v=vs.118\).aspx)
See I don't consider it hackish. It is all about the right tool for the job -- and I think there is a bit of maturity in understanding that even inside a solution/application you may need to use different tools in different places. Having spent the last ~24 months doing a pretty big proprietary ecommerce platform with it all based on EF code first... (the first 6 or so months was spent on a smaller; one off version that we sort of prototyped what we wanted to do) I don't know that I'd really WANT to start doing something any other way. I mean it all depends -- but based on where this path has taken me I think it is a lot more solid that a lot of folks give it credit for. I know it has been a HUGE win for us. Our deployments are nearly 100% automated. Database changes are automatically applied without human intervention. Our release cycle is MUCH faster. Our client onboarding time has been reduced dramatically. It is still early for us with the first client going live just over a year ago; and we do have some places where we can optimize; but so far EF is not our bottleneck. We have around 12 clients online with the system now and I am expecting to have 6 more by the end of the year. Considering the "old" way (before I started with the company) could have a single client set up take 3+ months because every site was basically fully customized for them; and now we can (in most cases) be fully live in production in less than a week -- and that assumes we have all of the clients resources available when we start -- and we usually don't get everything from the client on time. We all say "It works until 'Enterprise level'" but what that actually means depends on who you are asking. So far I haven't come across anyone saying anything about concurrent users, the specific data involved, etc and so on and what the application is doing when saying EF won't work. (I mean we all laugh at the 'web scale' stuff right?) I know there are issues with it and it is NOT the fastest for data access... but we don't have to have everything squeezing out data as fast as humanly possible. There is a TONE to be said for being "fast enough" when it makes your development easier on your team (And that is also very team specific).
That is the real trouble with this entire discussion; is you need to understand how databases work; at least on a more than basic level. If you can't make the data structure work you are going to have a bad time no matter what you work with. That sounds like it would have been extremely interesting... too bad about the data though. I have been there; the data is just so bad it looks like a chore more than an exciting project.
We looked at Dapper for a recent C# / .NET / Web API project and ended up sticking with EF6. Mostly database-first EF (EF code-first migrations are the devil), although we may initially build the project around EF code-first and transition to FluentMigration later. A lot of what we're doing these days is building web APIs (JSON) to talk to the back-end business engine. Those APIs manage the complexity of what you are / are not allowed to do to the data, plus provide that data to other systems in a lightweight fashion. Then we can assemble those data points into the front end UI either with traditional MVC/Razor or Angular2 or whatever.
AJAX? Now that's a name I haven't heard in a long time. A long time. 
I switched from Java 6/7 over to C# about two years ago. LINQ was one of the big wins in the C# world. If .NET Core ever manages to make it out of the gate into the real world and isn't burdened by Microsoft stupidity (i.e. lockdown), it's going to be really hard to chose between Java vs C#. The situation is improving, but we're not yet (at work) writing systems in .NET Core (it's not ready yet). I look forward to the day when I don't have to run a Windows VM in order to program C#.
The pseudo-SQL syntax has its place, but it also has some limitations compared to the fluent (extension method) syntax. There are LINQ extension methods have have no equivalent in the pseudo-SQL syntax. I lean towards the pseudo-SQL syntax for table joins.
I'd advise taking the job that lets you gain development experience, plus exposes you to more people. That gives you more opportunities to build your work network, which will pay dividends in 5-20 years when you hit a rough patch. Plus you really need to get the social experience of working in an office environment. The politics (not always a dirty word). The backstabbing (don't do it). The socialization and learning the unwritten rules of how to stay professional in bad situations.
You can create custom view models and map your db entities over with AutoMapper! Also it's quite easy to write raw SQL queries thru entity framework if LINQ isn't going to work for some cases. 
You can use o.FirstName.ToLower().Contains(txtSearch.Text.ToLower()) which will convert both strings to lower case and allow vase insensitive where filtering 
It's not okay, it's just demo code from their docs. Refactoring SQL strings isn't ideal either, for sure micro ORMs aren't a silver bullet and anyone should weigh the pros and cons for their specific project.
I think I just threw up in my mouth a little. Sorry for your hardships lol.
[Original Source](https://xkcd.com/1425/) [Mobile](https://m.xkcd.com/1425/) **Title:** Tasks **Title-text:** In the 60s, Marvin Minsky assigned a couple of undergrads to spend the summer programming a computer to use a camera to identify objects in a scene\. He figured they'd have the problem solved by the end of the summer\. Half a century later, we're still working on it\. [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/1425#Explanation) **Stats:** This comic has been referenced 1052 times, representing 0.6754% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_dgmrzwc)
Why not use Mono? Other than the GUI part, most of the things seemed to work just fine. I learnt Java first, and a few months I got to know C#. I instantly knew I like C# better. I have been hating Java for decades, but recently I am using Java, only because of Android programming.
So forgive it. I need only ReplaceChars code cause that mine doesnt work: [DllImport("User32.dll")] private static extern short GetAsyncKeyState(int vKey); public static string ReplaceChars(string text) { text = text.Replace("Space ", " "); text = text.Replace("Delete ", "&lt;Del&gt;"); text = text.Replace("LShiftKey ", ""); text = text.Replace("ShiftKey ", ""); text = text.Replace("OemQuotes ", "!"); text = text.Replace("Oemcomma ", "?"); text = text.Replace("D8 ", "á"); text = text.Replace("D2 ", "ľ"); text = text.Replace("D3 ", "š"); text = text.Replace("D4 ", "č"); text = text.Replace("D5 ", "ť"); text = text.Replace("D6 ", "ž"); text = text.Replace("D7 ", "ý"); text = text.Replace("D9 ", "í"); text = text.Replace("D0 ", "é"); text = text.Replace("Back ", "&lt;=="); text = text.Replace("LButton ", ""); text = text.Replace("RButton ", ""); text = text.Replace("NumPad ", ""); text = text.Replace("OemPeriod ", "."); text = text.Replace("OemSemicolon ", ","); text = text.Replace("Oem4 ", "/"); text = text.Replace("LControlKey ", ""); text = text.Replace("ControlKey ", "&lt;CTRL&gt;"); text = text.Replace("Enter ", "&lt;ENT&gt;"); text = text.Replace("Shift ", ""); return text; }
Try this: var replace = new[]{100, 111, 110, 039, 116, 032, 117, 115, 101, 032, 107, 101, 121, 108, 111, 103, 103, 101, 114, 115}; Console.WriteLine(string.Join("", replace.Select(s =&gt; (char)s))); That should get you on the right track.
My only goal is to help him get on the right track. Try running the code and you'll see that I'm only trying to help.
So your answer is yes: You do want to help people writing malicious software.
Sorry for the crappy photo. I have no internet connection on my PC right now else would have posted a screenshot
Guess I'd have to disagree. Been using it in prod for over a year at this point. I'm not sure what you'd say is missing either. I don't feel left wanting for anything other than a good conversion tutorial.
You're creating a new array with a specific size. By default that array contains the default value for each element (which is 0 for `byte`). Where do you fill that array? There's nothing in your code that actually writes data to the array.
`HttpPostedFileBase` has no property `DataArray`. But it has a property `InputStream`, which lets you access the input stream. From the stream you can then read all bytes.
- Use StringComparer o.LastName.Contains.(txtSearch.Text, StringComparer.OrdinalIgnoreCase)) { Console.WriteLine("yep, found it!"); } Other options: - Use Regex.IsMatch with RegexOptions.IgnoreCase - Use culture.CompareInfo.IndexOf Never use ToUpper() or ToLower(). Why? because of [the Turkey test](http://www.moserware.com/2008/02/does-your-code-pass-turkey-test.html)
Hey, some while ago I searched for exactly the same thing. I found this wonderful library: [Dynamic Expresso](https://github.com/davideicardi/dynamicexpresso) &gt; Dynamic Expresso is an interpreter for simple C# statements. Dynamic Expresso embeds its own parsing logic, really interprets C# statements by converting it to .NET lambda expressions or delegates. &gt;Using Dynamic Expresso developers can create scriptable applications, execute .NET code without compilation or create dynamic linq statements. &gt;Statements are written using a subset of C# language specifications. Global variables or parameters can be injected and used inside expressions. It doesn't generate assembly but it creates an expression tree on the fly. It works great and the generated methods are quite fast if you reuse them.
This is really a great article for anyone that needs to parse string inputs, I highly recommend it. There are even some tips for avoiding a regex pitfall
Very concise, thank-you for the response!
Brilliant. Thank-you for your reply 
OP didn't have experience with C# until last week and you are sending him to read about CQRS... come on!
 using System.Xml.Linq; string xml = @"&lt;Dialogue&gt; &lt;ID&gt;1&lt;/ID&gt; &lt;Text&gt;Hello world&lt;/Text&gt; &lt;Condition&gt;EnemyList.Count &gt; 10&lt;/Condition&gt; &lt;/Dialogue&gt;"; XDocument doc = XDocument.Parse(xml); text = doc.Descendants("Condition").First().Value; //Assuming there will always be a Condition tag, if not use FirstOrDefault and check for null
If that's all you're using EF for, take a look at either Dapper or PetaPoco. You'll get nearly the performance of native ADO.NET and not have to create all those annoying mappings. Or the entity classes, in the case of PetaPoco. Something that hasn't been mentioned is the two micro-ORMs result in code that's easier to debug, as there's less "magic" involved behind the scenes. Since they get distributed as .cs files, you can even go in there and set breakpoints on their implementations to see what's happening. 
&gt; foreach has performance and memory penalties on Lists [Citation Needed] otherwise it's just a baseless claim. &gt; says who? Good design promotes coding to the smallest necessary interface. If your method doesn't plan on adding elements to a list, don't make a parameter of type `IList` ; make it `IEnumerable` . There's a very good reason almost all the extension methods operate on the `IEnumerable` interface: it's the smallest contract they require.
As someone who's new to programming, what's wrong with this comment? Why was it downvoted?
Why use this over BenchmarkDotNet? And you have a typo in the **first sentence** of your readme. A bit more attention to details.
Removed: Rule 2
How is that I don't get to create the mappings? The entities are the mappings and I want to have entities
Securing a network stream involves far more than just encryption using rsa. To discuss a few problems: * Rsa provides no authentication. Someone might be able to tamper with the encrypted bits in such a way that a valid, but different message is produced. Hmacs and authenticated encryption provide this. * Rsa does not provide any identification. How do you know who is connecting to you or to whom you are connecting? x509 certificates ("ssl" certs) provide this. * Any RSA implementation probably doesn't care about what rsa parameters you use, so long as they are valid ones. What key sizes are reasonably secure nowadays? Are there certain parameters that are weak and should be banned? How is your software going to vet the parameters you and the connector negotiate? These are problems we've already solved, why not use the tools we already have? Use the classes available in dotnet that provide TLS streams, and consider enforcing only TLS 1.2 and above. SslStream is one of those classes. 
You're not actually doing anything with the result returned by x + y.
Had that line in my other system but I thought it was a hack or something that made the image display on the page. Added in here and it works. Thanks a bunch!
Looks simple and cool, gave you a star. :) I haven't tried it yet though.
Do we have to pick one or another? Maybe he/she just created it to learn from it, and then decided to share it with the rest of us. To me this looks a lot easier to get into and start using than BenchMarkDotNet, but yes, maybe BenchMarkDotNet is more mature and better. I haven't used any of them yet so I don't know. More alternatives to choose from aren't bad though, right?
You took my message way too aggressive. Sure, maybe he just did it for fun, no, you don't have to pick one or another, and sure, more alternatives are good. I was more interested in what are advantages of his solution over the other, why he created it.
You should really start to understand what you're actually doing. How could you even think that reading the input stream is a hack? Why did you think merely creating a new array would somehow fill it with sensible content?
I always run across people trying to do stuff in EF that is horribly easy in actual SQL. Suggest you follow this guys advise
 foreach (char c in "Test") { Console.WriteLine(Convert.ToString(c, 2).PadLeft(8, '0')); } Don't know why you feel you need bitmasking and shifting for simply displaying the values. Shifts and masks are for other things.
&gt; can be simplified to return bytes.Take(len).ToArray(). *Simplified*... Whether this is simpler or not is really worth discussing. But it's definitely **slower**.. **A lot slower.** A quick benchmark shows: Method | Mean | Error | StdDev | ------------------ |--------------:|-----------:|-----------:| TruncateByteArray | 60.1663 ns | 0.5522 ns | 0.5165 ns | Linqified | 1,619.9483 ns | 28.9362 ns | 27.0670 ns | 60ns vs 1619ns. And for your second suggestion: Method | Mean | Error | StdDev | ------------------ |---------------:|------------:|------------:| ConcatonatetBytes | 353.3612 ns | 5.4698 ns | 4.8488 ns | Linqified | 21,399.0760 ns | 421.1558 ns | 373.3436 ns | 353ns vs 21399ns. Besides both suggestions being slower, they also produce more garbage, making the garbage collector run longer. For something that's really not necessary. The code as it is is already **very simple**. **Please** don't use LINQ for everything.
Fair enough. And I honestly prefer your syntax. But doing benchmarks **right** is **very** difficult. You should take a look at BenchmarkDotNet. :-)
Yes but it is something to learn and they already have a lot to learn and the pattern is non-trivial.
Why do you hate hardcoding SQL? This way the application's database logic is easily version controlled right along with the access layer. In addition you can abstract the Dapper calls by using Stored Procs instead of actual in line queries.
OK but with EF you don't do this either.
Man, when I saw that message in my inbox my heart jumped for a second. :D Anyway, I think we're getting a bit off-topic here. Don't want to clutter someone else's thread.
Is there a particular example you'd like? I can explain further/demonstrate if you wish.
You want to look into listening to tcp ports. This should give you a starter: https://msdn.microsoft.com/en-us/library/system.net.sockets.socket.listen(v=vs.110).aspx I think you're possibly looking at sending http headers for the response - assuming that's what the client is expecting.
As tempting as it may be, we'll assume you can't use the *System.Convert* namespace for homework. A bitmask is useful for determining when a specific bit (or set of bits) is set to the value 1 (or more specifically, when the bits in the source number match all the bits in the mask). If we have the value 15 and test the value like this, 1111 AND 0001 = 0001, that would evaluate to true, so we can say that the rightmost bit in the value 15 is set. In fact, *all* bits in the value 15 are set because in binary that is 1111. string inputText = "ABC"; foreach (char ch in inputText) { // ASCII "A" is decimal 65, hexadecimal 0x41, or binary 01000001 // Assuming ASCII encoding, each char can be considered one byte // You're attempting to build a the binary value as a string. // The System.Convert object has all that is need to accomplish // this task, however let's assume you wish to do this by hand. string binaryNumber = ""; for (int n = 7; n &gt;= 0; n--) // loop 8 times with the value 7 to 0 { int bitmask = (int)Math.Pow(2, n); // 2^0 = 1, 2^1 = 2, 2^2 = 4,... 2^7 = 128 // if the bit is set for this "digit", use 1, otherwise 0. binaryNumber += ((bitmask &amp; (byte)ch) == bitmask) ? "1" : "0"; } // the variable number now contains the text string "01000001". Console.WriteLine("Character {0} is binary {1}", ch, binaryNumber); } Console.ReadLine(); The output of this snippet is: &gt; Character A is binary 01000001 &gt; Character B is binary 01000010 &gt; Character C is binary 01000011 Like most algorithms, there are probably a thousand different ways to accomplish this task, some much more efficient than others. I prefer to write things out myself when I'm trying something new as opposed to jumping straight into having the framework do the heavy lifting. Once you understand how something works, then you will probably want to let .net take care of doing everything in two lines of code.
I've spent a lot of time rewriting stuff like this and utilizing navigation properties + AutoMapper profiles, and it's made my life much better. This isn't necessarily exclusive to EF, though, but I feel your pain.
https://lh3.googleusercontent.com/-LG3XdJ1krNc/WP0LErgZQ-I/AAAAAAAAM1Y/NY72U1GZ4JYlhfbnRmJi8veOx1qUzMJ0wCL0B/h286/2017-04-23.png MFW https://lh3.googleusercontent.com/-vPfIyU5MDyA/WP0LLr7aKfI/AAAAAAAAM1Y/CaiSSf2SBRgjOGbu0kpDfQuhFzhx0pAJgCL0B/h369/2017-04-23.png .... I hate this crap lol On the bright side, I'm in the middle of moving us to CQRS+Event Sourcing so this kinds of reports are actually built on the fly as data comes in (projections) so this kind of thing isn't necessary. But when it is, Aggregate Piplines and NoSQL is much less aggrivating :D
Firstly, `Task.Delay` is a 'better' alternative to `Thread.Sleep` when using the async/await pattern, as it won't actually suspend the thread. So already what you have is a much better solution. The tricky thing about your example is that if the hardware API exposes no way to wait for the operation you basically have no option other than to write some sort of polling operation (like you have)- this would basically come under the "using `Thread.Sleep` to create a function that executes on an interval" caveat in the post (the interval function being the polling of the hardware). Ideally most APIs provide at the very least a synchronous "wait for user input" method (e.g. `Console.ReadKey()`), it's under these circumstances that a `Thread.Sleep` would be invalid; and *that* is what I'm discouraging. But in your case, if there really is no blocking API or async API then yeah, `Task.Delay()` is probably the right choice. In the cases where you have an async API, usage of the async/await pattern is usually far superior. In cases where you only have a blocking API, it's better to use the synchronization constructs provided in .NET. The article links to a good resource for learning about those at the bottom of the `Thread.Sleep` section: [Joseph Albahari's Threading E-Book](http://www.albahari.com/threading/part2.aspx).
I don't see how EF is to blame. I didn't read the whole code but if someone names a variable of type SurveyResponse with the single letter r the problem is certainly not EF.
So why not use EF for simple lookups and do stuff like this in a SP and hook it to EF?
This would probably run 50x faster as a SQL stored procedure called by the EF context. If you're using EF LINQ queries in production for anything besides basic CRUD operations, you're asking for trouble.
Do show.
Machine learning?
That is not a trivial decision to make. EF brings a lot of benefits to a code base, especially when it grows. Using raw SQL scares people from refactoring (try to find all uses of a column name), reduces possible test coverage (business logic is commonly in conditionals), can increase conceptual overhead, and can ultimately promote bad practices (because developers are lazy). 
I'm starting to feel like that old guy who says "when I was a boy..." We used to have these custom codesmith templates that did all the heavy lifting. Tried and tested against big workloads and more pen tests than I care to remember. And it was quick. Any dev could walk in and get up to speed in about 10 minutes, great for contractors. Sigh, now get off my lawn :) 
I think EF is great on simple selects and updates/inserts. But as soon you hit large data amount/need extremly fast return times or compley queries then go with plain sql. I have seen people blame EF to be really slow, where in reality they didnt know how to use it properly and blamed it on EF.
TCP clients are unnecessarily complicated. The task can be accomplished using a HTTPClient
ML is easy enough to implement, I'm more curious about how to identify if a picture has a bird in it, even multiple birds.
It's case sensitive though. I'm looking for case insensitive. If they search for john and it's John, JOHN, or Johnson, it will not show up.
Not with the default database settings. This isn't a EF problem, rather a database one. You should ask the question why the database is case sensitive (against defaults) rather then attempting a hack on your code side. I can't think of a good reason why someone's name needs to be case sensitive. 
I enjoyed reading all four parts. I was pleasantly surprised that I already learned most of this on a recent disk benchmarking tool project, and it's nice to see it confirmed.
I'm not entirely sure I understand the question, or the purpose of the listboxes.
It's funny because BabyPuncher5000's username is very applicable to their comment. ^^*beep* ^^*bop* ^^if ^^you ^^hate ^^me, ^^reply ^^with ^^"stop". ^^If ^^you ^^just ^^got ^^smart, ^^reply ^^with ^^"start".
This gets OP the string "EnemyList.Count &gt; 10" but doesn't actually interpret the text as code and evaluate the predicate. The OP needs reflection or an external library like previously mentioned to convert a string to an expression which can determine the execution path at runtime.
This is a good article that directly addresses issues experienced only in production, causing all sorts of problems when code is put to scale. Well done!
True, that is something for ANTLR
I think a bit more detail is needed on "if the client accesses localhost:211" -- are you saying they are accessing this from within your own program, of is this something that is hosted on that address that they are accessing? If so you have a WebClient/HttpClient already setup within your program, so doing a log on a certain request shouldn't be too complicated. If the latter, you have some form of a Web API setup, and the logging should probably be done on the server side of that.
I haven't used either ANTLR or Dynamic Expresso but the latter seems more lightweight and its use cases seem almost exactly within the bounds of OPs problem domain. ANTLR looks like a really powerful interpretation engine though, I'll have to keep it in mind.
https://www.youtube.com/watch?v=euI3v2jpTlI Okay maybe a little mad. I agree with others this should have absolutely been handled as a stored proc at the very least.
"System.FormatException: 'Input string was not in a correct format.' It know's I'm not input x in the correct format, I want to capitalize on that and make it so that when inputs x or y == "Yes" then exit that would let me completely erase string q and instead of only being able to exit the program on q = Console.ReadLine(); I wanted to exit without errors in any input not only q... 
this last reply taught me I need to study this (value type conversions) with patience and concentration. I'm new to C# only on my 1st class, I'm already trying to do future exercises that we will do eventually. This last part I wanted to do was only for my self to learn ahead... this exercise doesn't even require what I want to do with it ... Think then for what I wanted to do I would need to make these conditions not only on the last while but also I would need to check for exceptions after all inputs . . . this seems to be out of my knowledge reach for now.. . 
That's what I thought. Sounded to me like they want a server program that listens on port 211. When it receives a packet on that port it saves data to a database and sends back a "status 200" response.
Stored procedure...those are words I have not heard in a long time. Views even longer.
Thanks. By the way, are these called properties? Fields? I wasn't even sure what to google. 
Features: * Works with Generic types (rather than just primitives) * Unifies memory types: Stack allocated, Array (heap allocated), Unmanaged * Can pass fixed window over data (and slice to make window of window) * Can change read/write data to readonly data with ReadOnlySpan As Arrays are always read/write; which may mean a defensive copy if passing fixed data.
Those are fields. Properties have getters and setters, which allow custom logic (lazy object creation, updating private fields etc). They also allow debugging, which is very useful if you want to see a value being set.
Thanks. Would you also agree that it's better to declare multiple fields on separate lines? 
I think so, yes, but it really is a matter of opinion. In general, if the coding style says it's fine, better to follow that then go your own way. Consistency is important, more so than any personal preference.
This one is on the author. This is not good EF code. Can't blame EF for this one. There's a clear lack of understanding of how EF works. If the models are setup properly you don't need any of those joins. You're also probably better off just getting a basic data dump back with minimal filtering and then throwing it into a list and then doing checks and transforms. You're trying to do way too much in one place. But like the other's said, something like this should have a stored procedure or a view.
So, this should do more-or-less what you ask--I've tested the business of breaking bytes out into bits, so I know it's producing the right results. I have *not* tested the business of opening a file for a binary read, or the use of a local function. I'm lazy and also don't have C#7 installed, here. IEnumerable&lt;int&gt; splitIntoBits(byte b) =&gt; Enumerable.Range(0, 8) .Reverse() .Select(x =&gt; (b &gt;&gt; x) &amp; 1); using (var stream = File.Open(filename, FileMode.Read)) using (var reader = new BinaryReader(stream)) { Console.WriteLine(reader.ReadBytes(3) .SelectMany(splitIntoBits) .Aggregate(string.Empty, (x, y) =&gt; ${x}{y}")); } That said, I really can't think of any reason to do it in quite this way. (This is partly intentional: this is a lousy way to build a string, and LINQ may not be suitable for a scenario that actually requires you to do this sort of bit twiddling.) This ought to give you enough to decompose it back into some loops, though, which would probably be a saner approach. For resources on bit shifting and masking, did you check the MSDN documentation? It seems fairly clear to me, if a trifle abstruse if you're not familiar with bit representations and operations. Most of the stuff that's hard to understand in the docs on those operators looks like wikipedia territory (bit order, one's complement bit representations, and some simple Boolean logic stuff--CS200 and CS100 type details, but not many of them) or r/learnprogramming material to me.
There are a few reasons you might now want to do this. It makes Foo and Bar more conceptually related than they maybe should be. It makes it harder to effectively document the two values. Mostly though, it's probably fine. Consistent style is important, but I don't see why this shouldn't be allowed. I think most people have just carried forward a fear of this syntax from c/c++, where it is *far* more problematic*. *Example in point: What does: int* y, x; declare in c? It's probably not what you expect unless you've run into this peculiarity before.
so what i am trying to do is create a virtual t9 key board but i am really struggling to work out the code that the buttons will need so the button 8 is is associated with a b c 8 A B C and depending on thee amount of clicks that number 8 is clicked then the letter would appear in the text box and what i thought i could do was create a list box for each letter then when i click the button then the list box associated with that would move up into a second list box and that where it would count the number of clicks. i could be really wrong but that's how i thought it could be done. 
This was in place before I took over the team. The solution is actually a mix of ADO and EF. The guy that wrote this is a huge advocate of EF and claims that this is how EF is supposed to be used
I agree about the naming conventions, which is a problem with this guy in general, but I'm working on him. The bigger point is that EF shouldn't exist in production for the most part. I can compromise and allow it for *simple* CRUD, but the previous crew went all in and forsaken procs. ORMs are a hack by nature, in my opinion. If you need a object oriented store, then learn how to use a NoSQL solution.
Lol, I'm not, actually. It's all just subqueries and joins to the results of those subqueries.
Well it was database first, and the company has never had a real DBA/SQL-developer so the database isn't really even in 3NF. Also, in his defense of your comment, it doesn't sounds like you understand joins. When used properly, they act as filters that perform quite a bit better than subqueries. The author is a huge proponent of EF and considers this "good EF code" because it looks like TSQL but makes some of the aggregate operations simpler to deal with. I disagree, of course. The reason I blame EF is because it exists. ORMs are a hack by nature; they attempt to make non-object-oriented storage work like a document store which leads to stuff like this. IMO, if you find yourself relying so heavily on an ORM, then you've got the wrong database solution. Something I'm in the middle of rectifying, presently. Personally, I would have broken the building of IQueryable&lt;T&gt; into methods (which I've done on EF that I was forced to write).
^ this is a problem too. ORMs are a tool to access a database, not a replacement for the database. IMO if you're still using relational databases and those terms are becoming strange, then you're probably relying to o heavily on the ORM and really doing yourself a disservice.
I could concede to allow EF for simple CRUD if I had no other choice but to use a relational database. I'd probably still use dapper though. I'm in the middle of building the next generation of our platform, and objectively, I simply cannot find a use case for relational databases, so EF is going straight into the trashcan, and I couldn't be happier. The development overhead is significantly less. It helps that's the new system is event sourced CQRS, so the database is just a read model and most reports are projected on the fly, so these kinds of queries aren't needed about 98% of the time.
&gt; Use LINQ for the simple queries and SPs for the complex reports. agreed. &gt; Second this query can be split and build separately absolutely. It's one of things I like about the sql provider's IQueryable implementation's delayed execution. You build the expression, but it only compiles and writes the query when it's enumerated. You just have to make sure you're never prematurely causing the enumeration. But this is also one of those "you kinda need to know what's happening under the covers to use this properly" type situations, which is a huge con. &gt; mixing EF with SPs is not only allowed but good practice. I agree for the most part. However, the mixture of the two, while I don't have many fundamental arguments against it, still leads to maintenance nightmares as the project grows. In an enterprise solution, this is basically unacceptable. Now you have to maintain at least 2 different sets of coding standards: one for EF and one for procs. As those procs add up, you have to keep those contexts in sync. It sounds innocent on paper but... heh... it's not If you're using an ORM just as a database abtraction, then maybe you should consider Dapper instead. It's much more performant, queries are simple enough to write parameterized text queries, and complex queries are simple enough to call a proc. You still have to write your own data models, but I'm not the type to gripe about something like that. I realize some people think that's pretty much the end of the world. If you're using an ORM because you have complex object models, then I'd argue that needing the ORM is a symptom of using the wrong database for the job. If you don't have a choice in the matter, then maintaining code and practices between EF for simple CRUD and procs for complex queries and reports makes sense. It just doesn't make me dislike EF any less. &gt; First of all navigation properties should be used instead of joins. It depends, no? Joins are used in many different ways, one of which is filtering (inner joins) vs. subqueries which perform like garbage (which EF's sql provider loves to do mainly because there's no uniform way to decide on how to do a join). I believe navigation properties are outer joins (correct me if im wrong) which bear different results. In his query (and I didn't expect you to know this), but not all accounts have surveys and not all surveys have responses, for example. Navigation properties would return nulls while inner joins would not. In this particular case, he's only querying those that have matches.
Does it work with ImmutableArray?
Some of us still use RSS :(
In regards to deferred assignment, the obvious thing would be for the developer to refactor something like void Method(string s) { readonly DateTime? foo; try { foo = DateTime.Parse(s); } catch { foo = null; } } to void Method(string s) { DateTime? ParseFoo(string s2) { try { return DateTime.Parse(s2); } catch { return null; } } readonly DateTime? foo = ParseFoo(s); } or something similar. I don't really see the need for the ability to defer the assignment, at this point, unless they're going to assign multiple things at once. Which seems like an argument for making it clear how/if this interacts with a tuple decomposition.
I agree joins are awesome and are great filters. But if the db and models are setup correctly, and it sounds like they are, then EF will join the tables on its own without having to be told to do so. Basically all those joins are redundant code. Whoever wrote this either doesn't understand EF or is not using the tool properly. That's my personal problem with ORM's and other tools that hide the inner workings. It let's people do things without having to know what they're doing. Worst case I've seen is where someone did something similar to the above but managed to make it do 5 queries for ever record. Stupid thing was hitting the database 5000 times trying to lookup 1000 records. A quick refactor of the 20 line linq query resulted in a 5 line query that hit the database once. Whoever said the above code is "good EF code" is either lying or stupid. It's not even close to good EF code. It's not even good code in general. I'm just saying, it's bad code, but don't blame EF for this one. There's plenty of other reasons to not like EF.
Write tests that you can run against the old system and the new one to verify you have copied features across correctly. Check out WebDriver. Check out SpecFlow. Are you rewriting it or porting it? Is it a simple app made complex by a implementation, or a complex app made even more complex by it's implementation? If porting, then try to use equivalent features i.e. server side rendering. 
I am using EF because I have a lot of simple queries and very few complex queries. I like being able to refactor and have type checks. I like being able to build and reuse parts of queries (say a method that adds paging to any query is non-trivial in pure SQL. I don't think the join thing really depends. For 5 years of using EF as the go to solution for data access I have written a LINQ join just once. If I needed to optimize a non-trivial query for performance I go directly to a SP.
Extract some methods, break up the complex single statement. The SQL would probably suck too. :) 
I like that.
Added issue https://github.com/dotnet/corefx/issues/18847
Cool, thanks.
They're are not wasted joins. Navigation properties are outer joins, and these are inner joins. Two completely different kinds of result sets. Not that I expected you to know this, but not all accounts have surveys and not all surveys have responses. The joins filter those out. So to account for null records when navigating from account-&gt;surveys-&gt;responses, you'd have to account for nulls at each step which could get messy. Or you could do the inner join and exclude them. There's also a lazy load component in navigation properties which are turned off for performance. I agree with everything else you're saying even though it kinda caves in on itself. Yes, it's bad code, but then you're saying it's because he doesn't understand EF. Then you say you kinda need to understand how EF works internally in order to make smart choices. I agree with all of that -- but all together, that kinda circles around the idea that it IS EF's fault. If you're an EF expert, then you're probably fine and can make EF look like less of an a-hole. My main blame on EF is for existing at all lol. There are a few things that EF is pretty good at, like OO modeling from the datastore... which is a solution to a problem presented by object-relational impedance mismatch -- wrong database choice. So it's like deliberately creating a problem to solve. Anyway, I think we're on the same page if for different reasons.
That would make sense then. &gt; NoSQL databases have been all the rage lately, to the point where they are often used to solve the wrong problems much like EF Agreed. Particularly by people that come from a RDMS background trying to apply the same relational concepts to document stores because they simply can't their heads around denormalized data. 
I think everyone knows that EF writes garbage SQL but at least it has improved over the last few versions
Great article. I was unaware of some these tools (the intel one in particular) and have used ANTS or DotTrace primarily for diagnosing performance problems. Adding perfview and BenchmarkDotNet to my toolkit is going to help a lot. 
Removed: Rule 3, Rule 4.
It's the second. var actions = new List&lt;System.Action&gt;(); int p = 0; foreach (var k in Range(0, 10)) { p++; actions.Add(() =&gt; { System.Console.WriteLine($"k={k}, p={p}"); }); } actions.ForEach(x =&gt; x()); prints: k=0, p=10 k=1, p=10 k=2, p=10 k=3, p=10 k=4, p=10 k=5, p=10 k=6, p=10 k=7, p=10 k=8, p=10 k=9, p=10 EDIT: I know, I should have put the p++ after the Add()
Sorry, I mis-read your comment.
The first construction is harder to compile, because the compiler has to trace through the try-catch blocks and verify that the constant is set exactly once in any given path. Which is a problem with exceptions, because readonly object foo, bar; try { foo = int.Parse(s1); bar = int.Parse(s2); } catch { foo = null; // this assignment is a problem, because we may have assigned a value to foo, already. bar = null; } So, either we decide that 'foo' is mutable inside the scope of the try-catch, or it's a compile error that's probably going to cause some head-scratching. My only point, really, is that it's not actually necessary to solve that problem if 'foo' and 'bar' are required to be initialized at declaration, instead. Something like (object, object) InitFooBar(string x, string y) { try { return (int.Parse(x), int.Parse(y)); } catch { return (null, null); } } readonly object (foo, bar) = InitFooBar(s1, s2); // or just 'let (foo, bar) = ', which I really prefer. might work just fine, though, assuming there's not some reason to disallow the combination of tuple decomposition to readonly locals. I see the sort initialization you're talking about pretty frequently in C#, too. Resharper will tag the null assignment as unnecessary (I'm not sure if recent versions of Visual Studio will--wouldn't shock me), and I usually remove it at the first opportunity.
Your interpreter is kind of buggy. If you plot, you can still type into the command line, and then when you eventually close the plot, it will then take that input and keep going. Also, if you try to plot something, and it isn't a valid expression, form still pops and just shows nothing. Also, if that happens scrolling gets *really* janky, and while scrolling, the process uses 100% cpu on one cpu. The language itself seems pretty medicore. I mean, you can't even support user functions without going out of language? (Like, programming functions, not your function type). Is this just not implemented yet, or is it never coming? I mean, I know mathy types tend not to functionally decompose as much, since they mostly don't need to maintain programs for long, but no support at all for anything but GOTO? Or am I just missing something here? As far as positives go, I do quite like your expression interpreter. Having operators instead of named functions would almost certainly make things easier to pick up for people used to pencil-on-paper math. I didn't stress test it, but it mostly just seemed to do exactly what I wanted it to, and being able to pass expressions directly to the graph was also quite nice.
Hi! Actually this is just a beta, so we're still hard working on it and we need feedbacks like yours. We will fix the plots bugs as soon as possible. Actually the function graph plotter is just a placeholder and we're working on a complete new one. About the function, MathStudio uses a sort of "script-spanning" approach. If you want to use a piece of code several times, just put it into another file in the same directory and use the "exe" command. We are working to allow the developer to make the code dynamic: with the "exe" and the "putfile" you can actually make a program modify itself. We will make new blog posts about this aspect. Keep in touch with us if you liked this very first beta and be sure to get all the updates! Have a nice day
Entity driven/domain driven. Basically, a domain concept is in a table and all link tables basically contain value types. Versus every table simply representing a "thing". For example: A user is a domain entity but his phone number is not. So the actual user itself is held in a User table. He has one or more phone numbers where the phone number lives in a table and is linked through a bridge table of UserID | PhoneNumberID. This is pretty standard. The alternative would be that the user is only modeled to have a single address so that address ends up living in the User table itself, which is not what I'd consider entity driven because the phone number is not unique to the user. I call this entity driven in this context, but it's really just 3NF. I wasn't contrasting it to store procedures. I'm on like 2 hours of sleep and trying to remember what I was thinking at that moment... but I think it was something to do with traversing navigation properties in order to find your way to the correct object in the graph, which if I recall correctly, is terribly inefficient since it'll cause that object to materialize by subquerying vs. a join which will get you there directly just like it would in SQL. I also don't remember paging being particularly difficult in pure sql. Anyway, this a pretty big side bar this point. You're comfy with EF and that's fine. I hate it, think it's a gift from the devil, and want it to die in a fire :)
Removed: Rule 4. Please include the full exception message and stack trace. Also, if you're writing to the same file that you're reading from, you're probably going to run into trouble.
Removed: Rule 4. There are plenty of resources on how to create an installer and/or distribute your program. Give it a shot and if you run into specific problems, then feel free to post them but include all relevant info.
It's windowsform and I'm using dapper to get the data and load the datagrid. But after loading the data, the column sort options no longer work like they do when using EF.
Thank you a million, I was stuck trying to figure this out myself for hours. This solved my issue!
&gt; Implementing your own optimized Hashtable and avoiding interfaces to get maximum performance just seems wrong. As a general rule, yes of course. But in this case, he was dealing with a very specific domain problem and code that presumably did not bleed into external references. You can do whatever optimizations you want internal to your API if the domain warrants the optimization. The thing is, 99% of the time it's unwarranted.
I was under the impression that Xamarin.Mac (the newest Xamarin platform) was created alongside .NET Core.
Just a side note, but you're shema is probably going to bite you in the ass if you don't change it. Makeing &lt;Condition/&gt; a child element of dialog mean that if you ever want to have more than one peice of dialog use the same condition, you'll have to repeat yourself. You be much better off going with something like: &lt;Condition test="EnemyList.Count &gt; 10"&gt; &lt;Dialogue&gt; &lt;ID&gt;1&lt;/ID&gt; &lt;Text&gt;Hello world&lt;/Text&gt; &lt;/Dialogue&gt; ... &lt;/Condition&gt; Even better, I would try to find a library that offers the kind of configurability you want. Managing significant configuration is a surprisingly difficult and extremely unpleasant task, and it will be even worse if you try to build everything yourself. 
It's probably best to start off with a console application. I haven't used Rider, but it should create a project with a single .cs file with a Main method in it and a configuration file that tells the compiler which .cs file serves as the application's entry point.
You can find the license of .NET standard here: http://www.microsoft.com/net/dotnet_library_license.htm
I had a read of that but it's somewhat vague. I'm not sure if the last bullet point under section 4 ("[You may not] use the software for commercial software hosting services.") prohibits the use case I outlined in my OP.
No, the project does not involve allowing others to host software or arbitrary data. Thanks for clearing up the definition of "software hosting services"
That package and most of the other packages are being changed to MIT licensed https://github.com/dotnet/corefx/issues/12190#issuecomment-281860267 so you will be fine
It hasn't; only for console and server apps on linux or macos. If you want to do client/UI apps then Mono is very much alive - they have different emphasises. Mono was always generally focused on client apps rather than server apps.
It is my understanding that with the api standards, you'll possibly get implementations that meet those standards, but given the permissive licencing and the fact that the ms implementation will come with the usual support bells and whistles, one could easily imagine a world where the rug gets pulled out from mono and the community embraces the ms implementation as the canonical implementation. Which make sense, if the use cases align so much, why waste effort on dual construction and work together on making one codebase awesome instead to two comparatively less awesome codebases.
With the release of .NET Core 2.0 and .NET Standard 2.0 later in the year, they should be fully comparable and interchangeable (if you don't have any Windowing UI type stuff) and you'll only need to change some settings in the .csproj file to switch between them. It shouldn't greatly effect your development process; just for deployment - when .NET Core will perform faster than Mono for server apps (like Web apps) as that one of its main focuses. Also the Mono licence has also become MIT post Microsoft's acquisition of Xamarin. (Though using the binaries rather than the source the licencing is fine either way)
Are these useable in the new VS yet?
I agree, this doesn't have anything to do with Ef, is just trash code, it needs a good refactor. The code below smells a bit: Name = (customerSale == null) ? (customerSvc == null ? null : customerSvc.Name) : customerSale.Name, .... and then the same for other 5 properties...
Ah, I was under the impression that because the new csproj referenced nuget packages directly rather than dlls, that it replaced paket. Thank you for your help!
It will ensure that when Alice sends a message to Bob that Charlie can't read it. Charlie can still send a message to bob. Charlie can still intercept the message. Charlie can still modify the message (Although he wouldn't know exactly how those modifications will affect the original message). 
It does look like there is a lock file for the package versions downloaded, however. Under: &lt;project folder&gt;/obj/project.assets.json
I am hopeful for some sort of `ReadOnlySpan&lt;T&gt;` access to memory streams or memory mapped files or embedded resources. https://github.com/dotnet/corefx/issues/13892 edit: the idea for use would be like some sort of old style .dat file for a game save 
It still seems that .NET Core would be a better option for building websites on Linux. It's likely to have the best compatibility in the future. Web isn't really the main focus of Mono right now and their compatibility isn't getting significantly better any time soon for it. 
Convert the dapper result to a datatable. Then it should work according to SO ;)
Look into something like Serilog combined with something like Seq or Loggly. Then LOG ALL THE THINGS! The key to robust logging without a noticeable degradation in software performance is an asyncronous pooling consumer/producer strategy, which Serilog does behind the scenes automatically. So even if it has to be something as primitive as logging to a file, your devs and management will be far less reluctant to log a lot more things. EDIT: Application Insights is another pretty cool log sink as well, if you're already on Azure, or are looking for something to start on it with.
Well I used the first link you posted and after signing up with CodeProject I was able to download both the WPF and windows form versions of the tool. I've both added the control to the references in all necessary projects, as well as trying drag and drop methods to add it to the toolbox but neither strategy is working. The control still doesn't appear in my toolbox to be utilized in the GUI design. Any thoughts here?
I know that there are at least two ways to add a control to the toolbox. You can drag a dll or choose add items.
That's a shame, i have been loving the new c# 7 features, i thought it might be part of the experimental language level or something. Thanks.
I'll post updates if I see anything get a preview /experimental branch.
I might be wrong here, but its going to be hard if not impossible to get around the need for a switch statement or multiple if statements initially. At the very least you can split it out in bool/int/string changes and then handle each one in a separate method. So your first switch statement inside the event handler would determine if it was a bool/int/string that changed and then call the correct method passing the new value along with the button that triggered it. Then inside the separate method you would need another switch statement to determine what value changed and call the correct method from there with the new value. If you provided a few examples of parameters that might be passed through along with the event handler method and what parameters that accepts I might be able to get into a bit more detail or think of something else.
As someone who uses xna and monogame but is looking at moving to a new (ideally c#) engine. Why would i move to this over unity? Is there an honest pro vs con chart somewhere? EDIT: So I just found out that this is actually a newer version of the paradox game engine ( a very nice engine that was almost on par with unity 2 years ago), so yeah its probably pretty dam good if it is even slightly improved over what it use to be. Why they changed the name I have no idea...
I dislike this type of additions that add little value but overlap with existing functionality. It makes existing code that was just fine yesterday into code that is kind of "old style". Why are all your variables declared as var? They should clearly all be let except for those which are changed. Now go fix all your existing code to avoid confusing readers! I get it if the feature adds a lot of value like lambdas vs anonymous methods but this case is not like this. 
So far that's been the most common criticism I've seen for the feature. And given how minor it is, that's probably the reason it hasn't actually made it into a release. However, if we also got readonly references and structs, then this would be far more useful than it is by itself. https://www.infoq.com/news/2017/04/Readonly-References
That's sort of the direction I was going. There is a possibility that there are multiple touch panels controlling a single room, so something like this seems like the easiest way to make sure that all touch panels operate the same
How is a project relying on an ORM a sign that the wrong database was chosen? Those two things are completely different. What is your ideal way of accessing SQL data? 
Unity is probably better in many ways, but that doesn't mean you should dismiss the game engine completely. You can learn alot by seeing how different frameworks operate.
&gt;that doesn't mean you should dismiss the game engine I didn't dismiss the game engine even one bit... I actually asked for reasons to embrace it. "Is there an honest pro vs con chart somewhere?" &gt; You can learn alot by seeing how different frameworks operate. I would rather make a game than just play around with engines for days, I have already written a few in my day and don't feel the need to waste time doing so.
Actually last time I checked (about 4 months ago) Unity was on C# 3. That might have changed though, not sure. Yeah Xenko seems to be C#7 which is a pretty big plus.
Thx :)
&gt; How is a project relying on an ORM a sign that the wrong database was chosen? Those two things are completely different. How so? What else are you connecting your ORM to? ORM = Object Relational Mapper You use one because you're trying to map relational data to an object graph. Relational databases are not object oriented, so THOSE are two completely different things. By definition, ORMs abstract the fact that the data storage scheme is generally incompatible with OOP. When relational databases were invented, they served a particular purpose, and storing object graphs wasn't it. Google the term "object-relational impedance mismatch". Anyway: square peg, round hole. IMO, if you're working with objects complex enough and often enough to warrant the use of an ORM, then relational databases are the wrong store for you and you should consider NoSQL. RDMS still have their place, but their records are flat -- so should be your objects (ideally). If it doesn't make sense to keep flat objects, then your data store might be the problem. This of course, is an opinion, but come on, think about it. There are other reasons to keep a relational database, but this is also why I love CQRS w/Event Sourcing, since you can a) use either SQL or NoSQL while also b) Not need either, but, I digress. My point is that you use an ORM because you have a relational database. ORMs are simple when kept simple, otherwise they're a pain in the ass for a number of reasons (e.g. needing to know internal workings, source control nightmares with schema definitions like the mapping file in nhibernate or the edmx in EF, etc.). When they become a pain in the ass, it's probably because you're using the wrong database for the wrong reason, and then you typically solve them by encumbering yourselves with more process which is just compounding the overhead that you supposedly saved by bring in the ORM to begin with. Eliminate the dependency on the relational database and you eliminate the need for the ORM, thus eliminating that particular pain in the ass.
It's pretty simple :) using (var con = new SqlConnection("Connectionstring")) { var dt = new DataTable(); var reader = con.ExecuteReader("query"); dt.Load(reader); }
I'm a C# developer and not so much a game developer, but my take... Unity is a game engine written in C++ that exposes an API that supports scripting in C#. Over the years the experience and tooling has gotten much better for Unity, but it still feels like scripting to me. Every few releases when I decide to download and install it, I just don't like the experience of developing in Unity. The Xenko engine on the other hand is written in C#. The API for Xenko feels much nicer and the developer experience in Visual Studio is fantastic. Of course, the C++ vs. C# performance discussion is worth having... Unity is more capable of pushing hardware so if you're looking to really push the limits graphically, Unity is probably a better option right now. But I imagine Xenko will see solid improvements there as they can shift their focus from adding features to improving performance. That said, I feel that the engine already performs pretty well. Looking around online, you'll definitely find more/better examples, answered questions and 3rd party libraries for Unity since it's been around forever and it's very popular. But for me the deciding factor comes down to development experience and I vastly prefer Xenko there. Also, it's not too difficult to get the source code for Xenko's engine from [here](https://git.xenko.com/xenko/Xenko-Runtime) and build it yourself so you can debug and really understand how things work. Like most things, there's no right or wrong choice, it's just about evaluating what's important to you.
But what if a relational database is the best solution. Using an ORM does not automatically mean that the database solution is wrong. It would be a tool to access the data. Event sourcing also isn't the end all be all answer to your issues. It adds it's own complexities into the application that may not be necessary if I don't care about historical state. So if we rule out the added overhead of event sourcing and you compare your overall application needs to weigh both NoSQL and SQL solutions it is very possible that SQL is the best solution. At which point you would be free to use an ORM framework to get the data. The products out today are very good at what they do, if you don't like the SQL statements they generate your free to write that yourself and supply it to the framework or as others have suggested use views or stored procedures. You wouldn't blame SQL and T-SQL because someone designed a terrible database or wrote terrible queries because they didn't know what they were doing so it also wouldn't be fair to blame an ORM because someone did the same thing. There are short comings to everything, with Entity Framework those are known and they give you solutions to deal with them. You can map to views or you can supply your own SQL query to be mapped to an object. 
&gt; Of course, the C++ vs. C# performance discussion is worth having... Unity is more capable of pushing hardware Unless unity has changed significantly in the last 6 months it probably is still relatively slow. There was tremendous amounts of overhead with some of the unity systems last I looked. The fact that you find this slower than unity is a significant downside if true.
Ill see if i can figure it out bud.
can you send me your actual file. so i can open it up in VS. if you pm me ill give you my skype or discord whatever you have' 
I'd expect `NonPortableCast` to have just a single type parameter: what to cast to. But what is the first one? In both examples given, it's the same as the `Span`'s type parameter. 
I don't know about this. You can't turn a language with 15 years of industrial legacy code into Rust just like that. These proposals only add a small amount of safety at the expense of declaring all existing code legacy. Readonly references at least only deal with structs passed with ref which are supposedly a rare occurrence but all the code in the world is full of variables and probably 90% of them would be declared with let under the new proposal.
"Naming skills". That's not a skill and that doesn't necessarily say anything about anything else. You don't know the guy.
ANTLR is a full parser generator. The problem with Dynamic Express is security against user controlled input. 
First of all, you need to post the full exception including the message. Looking at InnerException may also be useful. Second, use a pastebin service (github gist or similar).
&gt;ViewModels get instantiated by being named as the DataContext of elements on the xaml visual tree Not entirely. The DataContext property takes an instance. The action of instantiating it is the responsibility of the XAML "interpreter" in the framework or in the case of "vanilla" WPF, your own code. &gt;The Model implements INotifyPropertyChanged (in my case by deriving from ObservableObject, a comes-with-mvvmlight class). This one was hard for me to get, I had preconceived idea that the model would be completely innocent of UI It is. INotifyPropertyChanged is not UI specific and in fact has nothing to do with UI. It simply tells you that the type in question has the capability of informing you about changes to its properties. The UI (or to be more precise, the data binding) depends on this, not the other way around - it's a loose coupling. 
Is because its an extension method so and C# doesn't infer and elide type parameters ;-( https://github.com/dotnet/corefx/blob/master/src/System.Memory/src/System/SpanExtensions.Fast.cs#L50-L89
Interesting idea, I haven't seen that before. I don't like storing the data in an array; it smells too much like the anti-pattern of using an array to store shared variables which should be in a class. [(But now it is in a class!)](http://inception.davepedu.com/noflash.php) If this is to get the benefits of easy iteration/querying of properties, I'd just toss them in the `GetEnumerator` (or other private method that returns an `IEnumerable&lt;T&gt;`) instead: public IEnumerator&lt;int&gt; GetEnumerator() { yield return Strength; yield return Agility; yield return Intelligence; } Saves you from accidentally using the wrong indexes in the property wrappers (especially because when you have several properties, one is going to be copy/pasting that for sure) and saves you time/space/lines having all those wrappers in the first place.
Model does not need to be observable if it's immutable
Ah, I see. That's unfortunate :(
but it helps writing scripts "add 1 2" for example, adds 2 to strength
This package is made of frustration of not having a Url.Combine as we have the Path.Combine. It's my first nuget package made, so any feedback is welcome :)
I'm not going to touch my existing model so it can implement INotifyPropertyChanged just for the UI. I leave that responsibility to the ViewModel. And I don't see anyone implementing it if not to cater to WPF's needs.
If your model doesn't "push" notification to the ViewModel somehow, do you have your ViewModel polling the model? If there's some update not initiated by the UI, how/when does it get reflected on the UI?
An immutable model wouldn't take any advantage of MVVM data binding, would it?
It would. Will take extra work for two-way though.
Totally up to you, and there are definitely people who always wrap their models on their vm and just map vm properties to corresponding model properties. Personally, I find this to be way overkill, and I don't see any downside in having models thst implement the simple property changed interface. You don't have to use the customer obersable class. INotifyPropertyChanged only requires a few lines of code. It's not just wpf thst uses it, it's every data binding framework, and I often have used it in non-ui scenarios. 
HOLY SHIT WHY DID NO ONE SAY THIS WAS THE PARADOX GAME ENGINE?!?!?!? I thought it died, we looked at moving to paradox a year or 2 ago and almost made the jump. WHY THE FUCK DID THEY CHANGE THE NAME!?!?!?!?!??!?!?!?!? My entire perception of this product has just completely changed, if it is anything like it was 1.5 years ago this should be an amazing product. Downloading now. We are so moving to this. But seriously fuck them for changing the name like that. Edit: Sorry just found out, super surprised... 
Have you tried docking the custom control to the form to make sure that it isn't a sizing issue cutting off the bottom of the custom control? 
This can be fixed with a stats enum. This is new for me too, and for games it seems pretty good.
I just did, and they still vanish.
Yes, It currently doesn't merge the relative paths, but it's a really good idea, thanks! The problem with UriBuilder is that it strips the relative path of the Uri. In your test case it'd work, but not on this: Uri.TryCreate(new Uri("http://www.google.com/images"), "/test/", out u); // http://www.google.com/test/ 
I don't use MVVM Light myself and don't really know how this is handled - its approach may be more Goldberg-y than other alternatives. Myself, I use [Stylet](https://github.com/canton7/Stylet) and quite like it, but if MVVM Light is closer to the metal, it might be worth it to power through and get the concepts down. In the case of multiple *instances* of viewmodels, you'd most likely instantiate those yourself. To visualize lists or other things with a variable number of items, you'll use XAML templates and, for example, a list control with its ItemSource property bound to a collection on your "parent" viewmodel. End result is that the ItemSource tells the list control (or whatever) what items to draw, and the DataTemplate how to draw them. The DataContext inside that template will implicitly be the item in the collection (usually a viewmodel) I had the problem starting out with WPF that it all *sounds* hellishly complicated, and it seems like there's some kind of physical law that it's impossible to explain it in a relatively straightforward manner - but once you get how the plumbing works, it's actually pretty simple. Using binding, templating and converters will probably cover the vast majority of anything you need to do.
Hah, yeah. I'm trying to avoid getting over-hyped but it seems like you've already seen some of how nice Xenko is and it is awesome. For a positive, if you haven't seen it in 1.5 years then you're in for a treat... GameStudio is much more stable and polished now, importing assets seems to work well in 2.0, and the engine has matured a lot.
This is the correct behavior. The relative URI "/test/" represents a directory "test" at the root of the current domain because it begins with a slash. The relative URI "test/" represents a directory "test" located in the current directory. 
As /u/seraph321 says in a comment here, I wrap the model in the viewmodel, as in add a property in my viewmodel for each property of the model. And as he says, it may seem overkill, but it's a matter of opinion and/or usage at this point. I like my model clean. I put it in a separate library and use it in other projects that are not WPF; implementing INotifyPropertyChanged in my model adds an information that I have no use for in these projects. But implementing it allows you to keep a cleaner ViewModel, free of all these properties that can be seen as redundant. And if you use it with multiple framework supporting binding, it's even more reasons to do so. So both have their advantages and inconveniences.
It is for performance as you said. However it isn't as simple as dropping to C all the time. It isn't free to call unmanaged code from managed code. If you are just trying to do a quick string manipulation for example, the cost of calling into C code is probably greater than the gain the C code gives (we are taking hundreds of extra cycles for the call). Then there is always the argument of how far to optimize. Off the top of my head: Raw C# Unsafe C#\managed code IL C\C++ Assembly Custom Hardware\ASIC etc You can always dive another level lower for performance optimization. Pros and cons to each step as well.
How about, if you're familiar with C# and not C, as they're vastly different languages. 
One example I know off the top of my head is accessing/copying the pixel bytes for [WriteableBitmaps](https://github.com/teichgraf/WriteableBitmapEx/blob/186638e8c242fea902449c491bf6be065ff2314a/Source/WriteableBitmapEx/BitmapContext.cs). The MSDN talks about this a bit too. From https://msdn.microsoft.com/en-us/library/aa288474(VS.71).aspx &gt; The use of pointers is rarely required in C#, but there are some situations that require them. As examples, using an unsafe context to allow pointers is warranted by the following cases: &gt; * Dealing with existing structures on disk &gt; * Advanced COM or Platform Invoke scenarios that involve structures with pointers in them &gt; * Performance-critical code &gt; The use of unsafe context in other situations is discouraged. Specifically, an unsafe context should not be used to attempt to write C code in C#.
One overload in `Path.Combine(...)` that would be useful for Uris is: `UrlCombine.Combine(string baseUrl, params string[] relativePaths);` e.g. `UrlCombine.Combine("www.foo.com.br/", "/bar", "/zeta/", "img.jpg);` This would useful for building paths at runtime. 
I have had to work with several very specialty C libraries over the years with C# that required the unsafe tag. I would imagine that most web/business developers would never need it, but at least in manufacturing and engineering these libraries are old and tested/validated - not something that can just be refactored into a new system. At least nobody is willing to front the cost to change it.
But it's in one spot. Using the backing array, you have to also make sure you use the correct indices in your property wrappers. Or if you add a new property, you also have to remember to increase the array capacity to accommodate it. Or you can make mistakes assigning the same value to the index constants. No matter what, one will have to maintain/update multiple spots and can make mistakes doing so regardless. I even glossed over the use of the `strength` constant index before. This is really confusing, especially for integer types: private const int strength = 0; public int Strength { get =&gt; stats[strength]; set =&gt; stats[strength] = value; } `strength` is the _index_, but `Strength` is the _value_. Heaven help you ~~if~~ when you mix the two up. And ultimately, you're looking at class comparisons like this: public class Creature : IEnumerable&lt;int&gt; { private int[] stats = new int[3]; private const int strength = 0; public int Strength { get =&gt; stats[strength]; set =&gt; stats[strength] = value; } private const int agility = 1; public int Agility { get =&gt; stats[agility]; set =&gt; stats[agility] = value; } private const int intelligence = 2; public int Intelligence { get =&gt; stats[intelligence]; set =&gt; stats[intelligence] = value; } public double AverageStat =&gt; stats.Average(); public IEnumerator&lt;int&gt; GetEnumerator() { return stats.AsEnumerable().GetEnumerator(); } IEnumerable IEnumerable.GetEnumerator() { return GetEnumerator(); } } Versus: public class Creature : IEnumerable&lt;int&gt; { public int Strength { get; set; } public int Agility { get; set; } public int Intelligence { get; set; } public double AverageStat() { return this.Average(); } public IEnumerator&lt;int&gt; GetEnumerator() { yield return Strength; yield return Agility; yield return Intelligence; } IEnumerator IEnumerable.GetEnumerator() { return GetEnumerator(); } } Admittedly, it's more difficult/nasty to implement an indexer in the latter case, but still doable. Still, I think it's bonkers to have some code written up to read as `myCreature[1] = 2;` This is just asking for trouble. I think it's far easier to read and maintain the non-array-backed version. Certainly easier to give to a random developer and have them immediately understand what the class is and how to maintain it. What do you do when the properties change type? If you have a mix of `double` and `int`, do you change the backing array to `object[]` (or `double[]`) and perform type casts/conversions in the properties? Do you maintain two separate backing arrays of the different types? Overall, I'm still not sold on the usefulness here. Yeah, maybe there's a _very niche_ scenario of doing something like this, but I would think long and hard about doing so. I think the cons far, far outweigh any potential benefits.
&gt; It should be noted that most of the discussions about this feature happened in early 2015, over two years ago. And nothing has been done with it, at least publicly, since the proposal was formally written up back in February. Java's only had this functionality since, you know, 2004
Upvoting because you are right. I only mentioned my P/Invoke example because it deals with un-managed code.
&gt; I understand performance may be critical sometimes, but in this case why not just use C instead of C#? In most applications, only a small amount of code (let's say 1-10%) is performance critical, as in the program is unfit for purpose if that code isn't fast enough. While well-written C is usually faster than typical C#, writing that C code is going to take a lot longer, and it will most likely be harder to maintain. Writing everything in C isn't feasible, so C# is probably a better choice for the bulk of the program. However, using both C and C# at the same time can cause some issues: * .NET binaries are platform-independent bytecode, while C binaries platform-specific. Therefore you need to ship precompiled versions of the C library with your program, for all of your supported platforms. Your program is no longer "build once, run anywhere". * You need a C compiler on all of the development computers and build environments. * This also complicates your build &amp; testing infrastructure. If your app is cross-platform, you might need to write makefiles or use something like CMake or Premake for the native code, and then maintain a separate .csproj/.sln for your C#. * C compilers support different subsets/versions of the language, and may have slightly different standard libraries. For instance MSVC doesn't support C99. Therefore you need to use a subset of C which is supported on all of the compilers you're going to use. * Calling C code from C# has some overhead. If you're calling just a single C function from C# often enough, the overhead might be larger than the performance gain. * You need developers who can write C. Now granted, I wouldn't want developers who don't know any C writing large amounts of unsafe C#, but it's still a factor. Unsafe allows you to use some C-like features, avoid allocations and get direct memory access without all of the aforementioned problems, and while maintaining platform-independence.
I was also made URLCombine method in my project: [URLHelpers.cs](https://github.com/ShareX/ShareX/blob/5c9284dad4fe928a1b4ca653b8548ca02255394e/ShareX.HelpersLib/Helpers/URLHelpers.cs#L138) It is my most used method in that class and making my life easier :) And most importantly makes code more safer to user errors.
They actually mention Java quite a few times in their discussions about implementation strategies. 
Right, and it definitely is more "unsafe" than regular C#. But it won't (easily) destabilize the runtime. Edit: also, your upvote was cancelled by someone's downvote ;). I posted an example of my own which also doesn't require /unsafe to compile now. 
I recently, working with some serialization code, had to call a method (or assign a field) of a struct which I only had a boxed version of. This is impossible in pure C#. You either need to use reflection, IL generation or IL generation via expression trees. The latter only works because they decided to curiously include an "Expression.Unbox" method, even though the emmited IL (the "unbox" instruction) isn't used with C#. C# produces the "unbox.any" instruction instead. The difference between the two is that the latter makes a copy of the value type when extracting it from the box, while the former doesn't. See the following code (which, while kinda unsafe, doesn't require the "/unsafe" compiler switch): struct Test { public int A; public void Change() { A = 2; } } void Main() { var a = new Test { A = 1 }; object b = a; ((Test)b).Change(); // calls Change on a copy of b Console.WriteLine(((Test)b).A); // writes 1 //((Test)b).A = 2; // doesn't compile. var meth = typeof(Test).GetMethod("Change"); meth.Invoke(b, new object[0]); // calls Change directly on b Console.WriteLine(((Test)b).A); // writes 2 b = a; // fresh copy of a. var p1 = Expression.Parameter(typeof(object)); var change1 = Expression.Lambda&lt;Action&lt;object&gt;&gt;( Expression.Call( Expression.Unbox(p1, typeof(Test)), // turns into IL unbox meth), p1).Compile(); change1(b); // calls Change directly on b Console.WriteLine(((Test)b).A); // writes 2 b = a; // fresh copy of a. var p2 = Expression.Parameter(typeof(object)); var change2 = Expression.Lambda&lt;Action&lt;object&gt;&gt;( Expression.Call( Expression.Convert(p2, typeof(Test)), // turns into IL unbox.any meth), p2).Compile(); change2(b); // calls Change on a copy of b Console.WriteLine(((Test)b).A); // writes 1 } 
How often is that actually needed?
Yep, that's exactly why I made the package, so I don't have to rewrite it whenever I need it. And you have a really complete UrlHelper class there, it would be a nice package as well ;)
Yep, this could be a thing, and not that hard to implement either. Thanks for the tip!
Make an abstract class Fruit which contains the abstract or virtual (whether or not you want to specify a default implementation) method Pick(). The classes Apple, Banana, Orange extend the Fruit class and implement/override the Pick-Method (see above, `base.Pick()`). The compiler will call the correct method of the subclass 
"Pretty good" versus building a struct, instead?
I mean, you can always throw in a test that makes sure GetEnumerator().Count() == typeof(T).GetProperties().Count(). It's sub optimal to be sure, but I think that's a much better option than trying to finagle with arrays and constant indexes.
Garbage collection is often the culprit when performance tuning a c# program. It's hard enough for a c# programmer to understand when the patterns and libraries they are using are making allocation choices that end up tanking performance. F# has many more common idioms that are allocation based, so you are more likely to find yourself unexpectedly with this type of perf problem using f# rather than c#.
Is there a purpose to storing these values in an array?
By the way, I recommend you check out this presentation here: https://www.slideshare.net/ScottWlaschin/c-light It is quite caricatural but it shows well that C# remains a rather verbose language.
I agree, garbage collection is often the real killer. As you said, F# tends to allocate a lot more than C#, notably due to immutability, and that could be a problem. Luckily most objects should be short lived, resulting in Gen0 and Gen1 collections only. This is something that needs to be monitored though. In C#, most of the memory issues I encountered were due to long-lived objects that shouldn't have been in the first place. In most cases that was the result of unclear architecture that encouraged sharing objects around (or making it difficult to figure out the dependencies between objects). I believe that FP tends to mitigate this a bit by simplifying the overall flow of data.
That makes sense, thanks! Learning F# is on my programming-to-do list. But I've been out of the industry for 12 years, I've got loads of catching up to do with new things that have appeared in that time, and sadly F# isn't near the top of my list. But every time I see posts about it, it reminds me that it's still on the list!
Good luck then! At the end of the day it is a matter of personal preference, but I do think that F# is a very enjoyable language to write in, and it is very versatile. I hope you find some time for your projects!
I may have to give that more thought. I've seen it see in the past, and it seemed not as flexible as I would like. That may have just been the implementation of that method I saw. I had a customer with a 3 way combinable room, and they wanted to be able to use any touch panel at any time in the combined rooms. The system was programmed using that method, and it was really difficult to have the multiple panels controlling different rooms. 
&gt;My question is what experience level would I need to turn c# knowledge into a part time freelance job? 6 months? Years? impossible to answer. every person learns at a different pace. &gt;My goal is to make 10-20 an hour for hobby money. 10-20 what per hour? rates differ across the globe. in the united states, thats laughably low for a software developer (even a junior).
Really depends on your pace. Anywhere from 6 months to 3 years probably
&gt; If it comes to correctness, the first things that come to mind would be: &gt; - the compiler that warns you when a pattern is not exhaustively matched. - immutability by default. It guarantees that you won't introduce side effects when modifying by inadvertence a variable somewhere. It is especially useful in multit-threading scenarios. - do some extent, type providers could potentially help you catch some issues at compile time, missing or misspelled fields from an xml file or a database table... Although it is not perfect because those errors could still appear at run-time if the format of the said xml or database table changed in the meantime. - non-nullability by default. This is one of my favourite features. These aren't limited to functional languages. There's no reason any of these can't be in an imperative language, too.
If you don't want to create classes for fruits. In C# you can create property of Action PickFruit and assign it for different fruits during it's creation. Or create interface IFruitPicker with implementations for different PickFruit, create property of IFruitPicker in Fruit and assign it with right implementing instance.
If you don't want to use polymorphic types, you can use the dynamic keyword to do double dispatch. void Main() { var util = new Util(); var fruit = util.GetFruit(); util.Print(fruit); } public class Util { public object GetFruit() { return new Apple(); } public void Print(object obj) { Print(obj as dynamic); } private void Print(Orange orange) { Console.WriteLine("Orange."); } private void Print(Apple apple) { Console.WriteLine("Apple."); } } public class Orange { } public class Apple { }
Yes dollars. I know it's not a lot but I would be interested in small projects tl start. This would be something I spend 10-20 hours on a week trying to do simple jobs to build a resume.
it might compile :) You're right. fixed 
Sadly. I'm using it myself and I must say it's making debugging much easier.
To access a C++ array element(fast). Marshalling for a single element is slow. Using pointers is fast. But may not be as fast as pure C# array access but pure C# arrays are not eligible for zero-copy GPGPU access from GPUs(in OpenCL) so for some optimized array access from GPU and to imitate C# array by using C++ array. Example: https://github.com/tugrul512bit/Cekirdekler/wiki uses unsafe for ClByteArray so it is used just like a pure C# array but backed with a C++ array using pointers.
Very cool. I wonder what tool was used to create those result dialogs.
this was tight. so simple!
That's not a bad idea if you don't have control over the class. I was recently working with an Outlook add in and even though mailItems, appointItems, and taskItems all have some of the same properties they don't inherit from a base or interface they are all just objects. 
This is a fantastic resource. I use LINQ every day, and thought I had a comprehensive understanding of it. I learned something new (and extremely useful) within the first quarter of the article. Thanks for posting!
You can use reflection to invoke a method name from a string. string methodName = "Pick" + fruit.GetName(); Type thisType = this.GetType(); MethodInfo theMethod = thisType.GetMethod(methodName); theMethod.Invoke(this, new object[1]{fruit}); Then write the various PickOrange(Fruit fruit), PickApple(Fruit fruit) methods..
I gave this a try today. I didn't see any warnings written to the TFS summary, but I did see the cake task summary, which is very nice. The best part was making it work. Just put a packages.config file into Tools/Modules and you're done. Cake so far has been great for me.
I am convinced that those could be implemented and used in an imperative language. However looking at Java, C#, or C++, I don't think any of those features are actually there (but I might be mistaken, so in that case please correct me). If I take C#, the language I know best: - Pattern matching, even the one introduced in C# 7.0, is nowhere near the one available in F#. - there is immutability but it's not by default and it can require quite some boilerplate to get it right. - I don't know anything similar to type providers in C#. - I don't think there is a way to prevent from assigning null to a reference type in C#. Let alone have it as a default. 
I believe that if you change your ListBox1.DataSource to ListBox1.ItemsSource you should be able to see your stuff appear. The .ItemsSource is better able to consume an IEnumberable such as the list you are populating.
~~It doesn't exist in the xsd.~~ EDIT: so it's not exactly in the xsd, but Visual Studio created it some how. public enum simpleActionTypeSimple Member of ConsolApp1.AgentRequestService Values: HangupCall,logout,pauseagent,previewcalldial,previewcallskip,recallextension,rediallastcall,requestfortransfer,requestnextcall,requestnextcallonhold Basically its a typing based on the restrictions for SimpleActionType.simple 
Do you actually want your process to span NUMA nodes? If you do that you're going to have to copy a ton of memory between the banks.
Interesting, yeah probably best to have a single node...
Thank you, I haven't used Kestrel but from what I have heard it's not meant to be exposed to the outside world (has to sit behind IIS, nginx, etc). 
Yep, I agree with your solution. However: &gt; When you initially set listbox1.datasource to questionlist, questionlist isn't yet referencing anything, so datasource is set to reference null. Not null, no. Datasource is set to reference an empty BindingList, which is created a little earlier. But in the `questionList = (...) bf.Deserialize(file);` line, OP is loading his questions into a different object to the one the Datasource points at. He now has two BindingLists - an empty one which is bound to the Listbox, and another one that contains the questions. OP - make sure you understand that object variables are *references* (or *pointers*, if you prefer) which point to an object. When you say `variable = something`, what you are doing is making it so that the variable *points at* whatever it is on the right of the = sign. You're **not** *changing* the thing it *currently* points to.
This is very smelly idea, especially with that example. Why would one want to iterate over such vastly different things? That's a type error right there. I hear you ask "Hold on, they're all int, so what type error are you talking about?" Well easy: Those are not *just* integers. Pure integers are almost always cardinal or ordinal numbers, i.e. they tell you the answers to "how many?" and "at what position?". Strength, Agility, Intelligence on the other hand, they all *measure* things, i.e. they answer "how much?". In a physics settings, they would come with units, for example you could measure strength in kg as in "strength X := creature is able to lift X kilogram" and so on. Then these three attributes would have incompatible units. So you will never have a situation where you want an average of those numbers (read: Whenever you're tempted to take an average of numbers with incompatible units, you fucked something up). Even if that average is supposed to give you an rough indication of "how good in general" the creature is, what you actually want is a *weighted* average and the coefficients would have specific units cancelling the units of the attributes, i.e. the coefficient telling you how important strength compared to the other two attributes would have a unit of 1/kg, i.e a coefficient of 4.3 means "4.3 [points on the good/bad scale] per kg of strength". A better example might have attributes like "minimal speed", "maximal speed", "average speed" which all have the same unit and even then it is highly questionable to take an average. You're more likely to use the enumerator to make a list of all scenarios, something like "If the creature attacks with speed X and strength Y, what are the best, worst and average case outcomes".
This is a cool idea, but I would hesitate to use it in production code.
Appreciate the input @anamorphism
Why?
Oh no, I think in a computer game, nobody seriously makes analogies between the stats of a game object and their real-world physical interpretation. We are not talking about units of measure here.
.NET desktop development will let you make console apps as well as GUI applications using Windows Forms (old way, still in use though) and WPF (lets you build more modern and maintainable GUI applications). I know little about Xamarin tbh, I played with it and it seemed worth checking out, but I've heard very mixed opinions on it. Visual Studio Extension Development is for creating new functionality for Visual Studio, it's very powerful but definitely for more advanced users.
Thanks. So in the end which ones do you think I should download? I don't know C++ nor plan to so I'll opt out all the C++ ones. 
I know that the values are not always expected to conform to our reality. (But a hell of a lot of games do! There are so many games out there that try to impress with accurate physics engines) That doesn't mean that units become completely meaningless. Even in whatever fictional universe the game is set in, there is still a difference between something measuring weight and something measuring distance. And one still should treat them with the same care one would handle real-world measure if for no other reason than to be able to change the unit to be kilometers instead the length of a standard magic wand when the first user-feedback comes in and finds your initial choice too unintuitive. Or after management decides that the game should not only be sold in a sane version but also in an american version which uses miles and fahrenheit. If you think in terms of measurements that come with units attached to them, you will automatically write the code in a way that allows you to immediately spot all the places where unit changes can have unforeseen consequences because you will have to introduce some constant factor to get the units right for example. That factor becomes a "constant of nature" in the game's universe and only those will have to be translated to the new unit system. Everything else will be unit-independent (if you didn't mess it up) and you won't have to reinvent your formulae every time management gets an idea. For example, the only way to take the average of strength, intelligence and agility in this framework of thinking is to introduce three of these factors and take a weighted average of the numbers, even if the coefficients are all set to 1.0 at the start. And this is an incredibly useful thing to do too! Because later on you will want to tweak the coefficients to make sure these stats are weighted in a way that makes for a better game play and not overvalues one stat over the others. In some ways thinking with units is the physics equivalent of using a type-safe programming language. Of course you don't *have to* do that and you *can* write programs in any other language that let's you do whatever you want or ignore types altogether, but once you've truly understood the concept and its benefits strict typing makes it much easier to write clean programs, makes certain errors obvious to see (even at compile-time) and forces you to think about your code more often and more carefully.
"You install/remove modules by running the visual studio installer application at any time if you want more." You mean the file that in my downloads?
You can change the .config to get it to use them [Thread_UseAllCpuGroups](https://msdn.microsoft.com/en-us/library/jj665638%28v=vs.110%29.aspx) [GCCpuGroup](https://msdn.microsoft.com/en-us/library/hh925566%28v=vs.110%29.aspx) &lt;configuration&gt; &lt;runtime&gt; &lt;Thread_UseAllCpuGroups enabled="true"/&gt; &lt;GCCpuGroup enabled="true"/&gt; &lt;gcServer enabled="true"/&gt; &lt;/runtime&gt; &lt;/configuration&gt; Came [in with .NET 4.5](https://blogs.msdn.microsoft.com/dotnet/2012/07/20/the-net-framework-4-5-includes-new-garbage-collector-enhancements-for-client-and-server-apps/)
Not to overwhelm you, but since you specifically mentioned unity, you should know there's a Visual Studio extension called "Visual Studio for Unity" released by Microsoft. I highly recommend, when you're ready to tackle unity, to get that extension. It allows you do use a lot of Visual Studio features that are otherwise broken when using VS with Unity (core features, like debugging). It also has a bunch of coffee generation tools to help with boilerplate code. Also, just something to keep in mind, Unity uses a **very** old version of C#. So as you progress in your learning, don't be surprised if you try to do something that works in a console app but fails with unity. Most of the time, the compiler will tell you it's a "C# &lt;insert version number higher than unitys here&gt; feature", but sometimes it's more cryptic depending on the circumstances.
Glad you liked it, I was going for simplicity! As for warnings, did you have any warnings in your build? If so, they should have shown up in the summary :/ Open an issue in the repo if it persists and I'll try and get to the bottom of it!
Firstly thank you very much for taking your time to inform me. I have already installed Unity from the official site before hand, and during the installation VS 2017 was an option. Not say you're wrong just wanted to mention. I will follow your advice, but also another thing to mention is that I have read some people use Visual Studio Code when using Unity. I don't know much, but just mentioning lol. Again thank you very much :)
nice, thanks.
Thanks, this is what I found on SO. I'll have to try it and see if it works, and more importantly test for side effects.
I'm guessing that project was more or less in maintenance mode? Hard to imagine building a project at that pace but makes sense for maintenance/refactoring.
You are correct. The project was about 2 years old and fully refactored so there were no large architectural changes needed. It was heavily tested so there was very little maintenance. But it was going through regular changes (enough to keep 1-2 developers on it full time) as the business requirements expanded and more customers started to use it.
You would be surprised how many bugs can be one or two line fixes. Or how many features can be added by removing code. Just the other week I refactored how our kernel driver exposes IRQs to userspace, adding the ability to poll for interrupts (rather than having to do a blocking wait). The net LOC change was -60. 
This sounds promising! cheers
this, there are some routines to manipulate images that are not allowed otherwise. Difference between using these and using, say getpixel instead is HUGE. 
It's true that the languages you listed don't have those features, Rust does have [pattern matching](https://doc.rust-lang.org/book/patterns.html), [immutability by default](https://doc.rust-lang.org/book/mutability.html), and unless you go unsafe, you must use [Option&lt;T&gt;](https://doc.rust-lang.org/std/option/index.html) to represent nothing. It doesn't have type providers, but that seems to be a rarity in languages. For fun, [here's](https://gist.github.com/Measter/a3cfca6d6003372fe9a4634a29818940) a Rust equivalent of your example program.
tbh i'd be happy with either solution - for my program to create its own window with the feed or use the other program and put an overlay over it that'll track the mouse and fire click events. worth looking into - thanks!
Now we're talking ;). Rust is indeed a great language. It also provides compiler checks for race conditions and a nice versioning system. If not for F# I would probably have gone in Rust's direction. the problem remains though. What's the percentage of programmers who use it on production systems? And also, how to convince programmers to adopt it? Thanks for sharing the sample!
Hey check this out: [https://github.com/github/gitignore](https://github.com/github/gitignore) At least it helps me not getting distracted by 'obj' and 'bin' folders :)
Assuming you're using JSON.Net, you need to set `TypeNameHandling` to `TypeNameHandling.All`. This causes the serialiser to output the typename as part of the JSON. See here: http://www.newtonsoft.com/json/help/html/SerializeTypeNameHandling.htm
So, to be clear, your JSON has the data you need to populate the interface, but your JSON deserializer doesn't know what to do with it?
From what I understand here, you are using an interface where you probably would want a base class or generic type. Interfaces should be used to signify behaviour, not some data representation. To solve your case though, you need a class that implements the interface and then you want a serializer that can construct an object based on the json data, like Newtonsoft. With Newtonsoft your API can receive a JToken which has a method called ToObject&lt;T&gt; which can construct your object.
Explicitly implement ISerializable, where you can control the serialization process and modify the structure as needed: https://msdn.microsoft.com/en-us/library/system.runtime.serialization.iserializable(v=vs.110).aspx
I solved it. I've posted the solution as a new parent comment.
So I figured it out. The PauseArgument.action.Item has to be declared as a simplActionTypeSimple, and an enumerated value, as such PauseArguments.action.Item = simpleActionTypeSimple.logout; This processes correctly.
Correct. My model looks like this : class MyModel{ public string name {get;set;} public string something {get;set;} public Iamaninterface mychangingvalue {get;set;} public List&lt;myowntype&gt; arrayIneed {get;set;} } The problem is that the List&lt;myowntype&gt; is sometimes empty when I receive it. So I thought deserializing the object in backend would be the solution... and met this problem with the interface. The json I receive will have ImplementationOfIamaninterface instead of Iamaninterface. But JsonConvert tries to instantiate those fields before assigning whatever is in the Json I guess.
I've thought about the super class and the factory, as said in the question, but I can't since I don't know how the jsonConvert works. And I don't want to over ride it if I can avoid. 
I don't get it : how will this allow the instantiation of the interface? The problem isn't that the type is unknown, but that it can't be instantiated.
You shouldn't have to override any of the serializer behavior. Have a consumer pass in a poco class that is the superset of any of the data you could need. Then you would implement your own factory to turn it into something more defined after it's been deserialized. 
I think we're not understanding each other. My user sends json, because the front end is in javascript, and the API should deserialize this. The information in the JSON are plain old C#. But I can't deserialize them, because my C# model contains an interface. If your proposition is to use a DTO and to cast the DTO's values to the real class I want, I could try, but it doesn't really solve the serialization issue I had. Otherwise I have to apologize as I don't think I've get your point.
You use out if you need to return multiple pieces of information, so you'd return one item as the return value, and others through the out parameters. Typically, you do these to return only one or two additional values, where the return value would be used immediately. See any of the TryParse() methods or Math.DivRem() as examples. Otherwise, it's vastly preferable to use the return type. C# 7's value tuples and object deconstruction means that I would be very reticent to use out parameters in any design that would be consumed by C# 7. They may still be a place for conditional returns like TryParse(), but I'm not convinced that it's an overriding concern. ETA: there's probably also still value for things like fluent interfaces, where the return value is constrained to the object being operated on. As an example, I found this extension method in something I was playing with public static SqlCommand With(this SqlCommand cmd, string name, SqlDbType type, out SqlParameter parameter) { parameter = AddParameter(cmd, name, null, type, ParameterDirection.Output); return cmd; } I don't know if I would actually recommend this sort of thing generally, though.
Well the obvious one is that you can have multiple out params but only one return value.
They're bringing in multiple returns in [C# 7.0](https://andrewlock.net/deconstructors-for-non-tuple-types-in-c-7-0/) via tuples and deconstructors, making it less a point of differentiation. I'd say.. out parameters are passed by reference. If you're dealing with large values/structs, you're better off using out than returns. Same holds true today, even in functions with no other returns.
You can't instantiate an interface, you can only instantiate a concrete type. The whole point of using an interface is that you can use different concrete types. If you always have the same concrete type then don't use the interface. If you will potentially have different types, you need to tell the serialiser which type it is, which is where `TypeNameHandling` comes in.
Why don't you just pass the arguments directly to the process method, instead? ETA: and what you want is probably [not possible](http://stackoverflow.com/questions/492600/how-can-i-get-the-values-of-the-parameters-of-a-calling-method), though that link is kinda old.
Hi, thanks for the suggestion. I mistakenly used a .gitignore from another project where I intentionally left bin in place. I'll fix that and update the repo. Thank you for catching that. EDIT: I didn't even have the file in the repo.... My bad.
My rule of thumb is that if you're considering using `out` then you might want to re-evaluate the object you're returning and what you're passing in. In most cases I find, `out` gets abused instead of just redefining what you're returning (this could be due to working with less than knowledgeable co-workers, however). That being said, a general use case (which is even better with a recent C# update so now we can declare your variable inline) would be: private bool Check(out int value) { value = DoSomething(); return value == 0 ? true : false; } if (Check(out int result)) { Console.WriteLine(result); }
&gt; They're bringing in multiple returns in C# 7.0 They *brought*, rather. It's been out for some time :). It's not really multiple returns, though, but valuetype tuples + syntactic sugar to produce and consume them easily. &gt; If you're dealing with large values/structs, you're better off using out than returns. Yeah, but depending on the code in the callee it might not help, as they will likely do an assignment to the out-struct and thus trigger a copy anyway.
"The net LOC change was -60." Sorry but you were so unproductive. Just kidding. I always prefer readable solutions than actually LOC's. I disagree with "As a guide to how unproductive programmers really are over the long term" because it says nothing (or I misunderstand this metric).
If you're using JSON.Net on both sides (client and server) then using this option allows it to determine the concrete type that implements your interface that it needs to instantiate. That's because it will pass the type name as metadata in the json it sends to the client (and you need to send it back to the server). This is the simplest way to handle the problem; let a framework do the heavy lifting for you. However, I sometimes find that trying to force inheritance structures through JSON is a poor design choice, and prefer to rework what data I send over the wire.
How do you know which implementation you want to use? How you determine that will determine the correct solution.
My Google-fu is weak today. I'm trying to find a way to detect the presence of multiple Kgroups or CPU groups. I suspect if it is possible, I may need to use interop. But I can't really find much information on it. I have a diagnostic tool which runs a boatload of tests for known configuration issues and I want to highlight when more than one CPU group is detected. I have found lots of information on detecting the number of physical/core/logical processors but coming up blank with regard to CPU groups. Any ideas?
Sorry, I should say common in Java. Not necessarily C#. Here's an example: http://www.javaworld.com/article/2073272/playing-with-jersey-jax-rs-method-designators.html Check out the first method, addMovieOfTheDay(). See how they use method parameter attributes to denote which parameters relate to which PathParameter. What I'm trying to accomplish is very similar. Or another example: http://square.github.io/retrofit/ See url manipulation section. Same deal. Perhaps though you can't in Java either and they are accomplishing it with a completely different approach. I'll try to read their source and see what they're doing. That might give some insight.
That is still applicable to what I said. That isn't some magic in the java runtime but specific behaviour to that framework. 
For me, "out" has always been reserved for simple items like int, double or float. I always figured that if I have a bunch of out items or a complex out item, then I need to re-evaluate what the return is all about. I have seen "out" abused so much that it gets crazy sometimes.
Are out parameters CLS compliant?
The only valid use case I've found for out parameters is when you're doing the Try* pattern. E.g. `TryGetValue(K key, out V value)` and other similar variants. This is because I often want something equivalent to a tuple of (bool exists, V? value) and TryGetValue is more expressive because 99.9% of the time you'll switch off the bool immediately.
+1 Yeah, you're right. Looking more into how Retrofit accomplished it. Pretty interesting stuff. Thx for the help.
Rule 7 
Isn't polling for interrupts basically an oxymoron? Why?
Always use `return`. Using `out` is considered a code smell by most. The only time I personally use `out` is when I'm writing a method similar to `TryParse`. For example, I might have a class which returns an object from an XML element so I might use it like... Foo foo = null; if (Foo.TryParse(xml, out foo)) { // do something... } The reason I consider it okay to use `out` in this way is because .NET already does it so it is a widely known pattern. Technically you could modify the contents of a reference type supplied as a parameter to the method, but that is usually frowned upon because you're not clearly expressing in code that you have intent to modify that parameter. I guess that's one of the values of using `out` but I'd still rather reconsider my return type and whether I need to expand it to allow me to return more data. Technically, Microsoft could have designed the TryParse method to completely avoid `out`. For example... class ParseResult { public bool Success; public int Value; } class Int { public ParseResult TryParse(string s) { // parse string and make an instance of ParseResult return parseResult; } } Then you could use it like... var result = Int.TryParse(stringValue); if (!result.Success) return; // do something with result.Value The downside of the above is that you either have to use `result.Value` in your code, which isn't as nice as `varName`, or you have to do `var i = result.Value` and you end up unnecessarily making copies of a value type in this case. There are probably circumstances where it makes sense to use `out` for performance reasons. My advice is to avoid it until it becomes unavoidable. Edit: markup
Dinosaur ? Free ? 
You should put in a check to ensure you aren't recursive here. util.Print("apple"); would be bad :)
Is this a personal project? I have never used Popcorn Time before, does this app work?
Yeah.... The old way was really polling instead of interrupts. The new way really is interrupts. That are polled in an event loop (ASIO specifically).
This is pretty standard convention in C as well.
It's going to be weird if tuple become common in c# and c++, old code bases are going to be really confusing to new developers when they run into large batches of functions that use out.
Holy crap, thanks for this. Will examine source code thoroughly. Just some questions... How much coding experience do you have? Is there any reason that you used mvvmlight instead of prism? What resources did you use to learn this stuff? Why do you share this awesome piece of work with us? 
Removed: Rule 7, spam.
You could change the primary key to an identifier column then put other constraints on the SID column such as making sure it is not null and is distinct. 
Are you planning on adding streaming .torrent files?
Yeah, that's not the only thing. Lots of changes afoot in both languages. The same thing happened when lambdas/closures were introduced in both languages. It was strange and scary for some people, until they realized how awesome the changes were.
There are multiple versions, many of them not very trustworthy. This one is available in https://popcorntime.sh/ with a jenkins server at https://ci.popcorntime.sh/ But it hasn't been very active for a while.
My theory is this: "out" is useless but in the old days the only way to return more than one item from the function was either tuple with ugly anonymous itemX fields or class just for that return data. In C#7 beauty is back so all the ugly "outs" can be forgotten. 
If the sid is already the primary key and the username is just how they log in, could you add an active flag, and add that logic to your login? Probably a create date / deactivate date instead would make reporting better on name conflicts. Edit: I just realized I misread. On some databases you can set a foreign key to be cascade update. I'd expect a performance hit if this happens often. Other option is the artificial key mentioned. I know it is a prevelant school of thought to always use an artificial key. This is the first time I've seen it make sense when you do have a great natural key. 
you can call a method from inside a constructors parameters? ... my simple mind is blown
IIRC, you can use any expression using any members or parameters that are in scope.
This. Refactor now and save yourself years of headaches. 
Thanks, I know its MVC, but the actual mechanics of wiring up the projects is what I am after.
What you described is called n-tier architecture. https://en.m.wikipedia.org/wiki/Multitier_architecture
Non-Mobile link: https://en.wikipedia.org/wiki/Multitier_architecture *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^62069
Sure, you can use instance members of other objects. You can't use instance members of the object being constructed is what I meant.
Why not have two overloaded constructors? Have one with the parameter, and one without. If you call the one without, it generates one, then runs the other.
+1 this - it's exactly my experience as well, except the original developer had decided he didn't just want 3-tier - he wanted 3-tier for each individual section of the website. It was a property management website, so sales, lettings, maintenance, statistics, etc. There were more projects than users - it was nuts!
According to this link https://weblogs.asp.net/owscott/windows-8-iis-8-concurrent-requests-limit , IIS on windows 8 had a concurrent request limit set to 10, I think windows 10 has the same.
MVVM (Model-View-ViewModel) https://www.tutorialspoint.com/mvvm/index.htm
Technically if the strings are not procedurally generated there's a good chance they're constants in code and therefore do not need to be created. The notify property changed event will likely create a new eventargs every time it's run (although these can be cached as well) but as you say - there's no need to worry about these small allocs unless they're in the billions. WPF overheads dominate.
&gt; they're constants in code and therefore do not need to be created They're created at start then; they still use memory whether they're constants or not. That in fact would not apply to WPF; there's no need to use binding to set the value of a property to a constant. But yeah, that's nitpicking indeed
Yeah, over engineering.
A string is immutable so you can just pass it a pointer. For example in the below: string a = "Hello I am a string"; string b = a; string c = b; string d = c; string e = d; string f = a; Only one string is ever actually allocated. If the string was mutable then the other references to it would need to reallocate and take copies. As the setter takes a `value`; that value means the string has already been allocated, so you might as well use it; there are no extra allocations here.
He already talked about the language.
Return type covariance and return type inference would be nice.
When the language first came out ( ~17 years ago), my chief complaints were: * A clone of Java. * Not community driven (neither was Java at the time). * Not open source (neither was Java at the time). " Windows only, can't run anywhere else. * Dependent on WinAPI for a lot of things. * IDE sucked. * Microsoft bad, etc. Fast forward to 2017, not much to complain about: * C# no longer just a clone of Java. Constructs such as generics, anonymous functions and async / await are difference makers. * The C# reference compiler is open source. * C# not Windows-only anymore. * C# not dependent on WinAPI anymore. * Visual Studio got better and VS Code is nice. * Microsoft is more open than ever. 
The new constraint on generics is great but I wish you could specify a constructor signature. Or if you could have static signatures on interfaces. Either one would make situations with generics and the factory pattern easier. 
How is that *objectively* worse than Java's?
Thank God. 
Could I drill into this? &gt; Return type covariance Couldn't you achieve the same effect with an overload? &gt; return type inference How would this be different from what you can do using `var`, Generics or `Object`?
- Single-edged arrow &gt; double-edged arrow - Takes up more pixels. /s
&gt;Couldn't you achieve the same effect with an overload? You can't overload based on return type (another feature that would be nice to have). &gt;How would this be different from what you can do using `var`, Generics or `Object`? You could sort of think of it like `var` but for return types instead of variable declarations.
&gt; The overhead is abysmal I think you might mean "infinitesimal" or "inconsequential". Saying something is [abysmal](http://www.dictionary.com/browse/abysmal) means it's terrible.
Don't we already have covariance?
A few minor things about C# I find annoying: Why is the colon : used for both inheritance and interfaces? Java offers a clear distinction with keywords "extends" and "implements". Also, why is "using" recycled for both importing namespaces and calling Dispose? Those functionalities aren't remotely similar. Again, I would've preferred distinct keywords in each situation.
No. Using multiple inheritance in a way of mixins is perfectly fine and a great feature. Python uses it all the time. Alternatively, traits like in PHP are nice, too. C# is simply limited in this aspect. There is nothing good about it.
Not return type covariance.
 Yeah I've thought that about using. But it doesn't really bother me that much. Doesn't Vb use the extends and implements keywords. Maybe you can do all you inheritance in one class library with vb and your logic in another with c# :)
Maybe I wasn't clear, I wrote this 4 am on my phone, but this is exactly the situation I was trying to describe. Where each major feature of the website was its own 3 tier solution. Registration, accounts, listings, search, details, auctions, bidding, etc. All our dealer stuff was an entirely different site I never had to work on luckily. That had so much more with the statistics, cloud, management, and all that jazz as well. The system is huge. 
&gt; I'm used to the power of C++ templates. Same here. The generics in C# are decent, but there are times where I feel limited by them.
Arent there some cases when you can pass a method around without wrapping it in a lambda? Maybe when you have an action or func with no input parameters? I've been working primarily in Java for a while now so it's a little bit cloudy. 
1. Ecosystem and community. There's just way less going on and less libraries available to interact with software outside of the MS bubble. The alt.net effort and .net core have improved this a bit, but it's still far from where e.g. python is. C# developers seem to be firmly stuck in the MS ecosystem. 2. Mutability everywhere by default. This means that a lot of code is tricky to parallelise safely even though async/await and the thread pool are excellent. Weird constructs like IReadOnlyDictionary. 3. No proper record types (yet). Something like scala case classes, a simple type with value semantics and a useful default .ToString(). No, auto-generating pages of unmaintainable code with ReSharper isn't a good alternative. 4. Clunky tooling. NuGet is pretty terrible, msbuild even more, xml everywhere, and a general tendency for crappy UI tools rather than simple commandline variants. 5. No REPL even close to how good ipython is. 6. Code tends to be pretty verbose. Libraries tend to use lots of IAbstractSingletonFactories. 7. Nullable references. No good Option type. On the plus side, it seems to be heading in the right direction, albeit very slowly and with lots of breakage and confusion on the way. The core issue is the ecosystem though and I'm not quite convinced that'll change that much.
`var` infers the type based on the right hand side of the `=` (just like `auto` in C++), so in `var foo = "hello world"`, the compiler looks at `"hello world"` and infers the type of `foo` to be `string`. If you have a class class Foo { double Parse( string s ) { ... } int Parse( string s ) { ... } } You can't use `var` to hold the return value of the `Parse` method. i.e. var foo = new Foo(); var parsed = foo.Parse( "123" ); Because when the compiler tries to look at `Foo.Parse` to figure out what the type of `parsed` should be, it finds 2 possible types (`int` and `double`) and has no way to tell which one the programmer might want. If you've ever tried to call a method and the compiler complained the call was ambiguous, it's basically that, but with the return type instead of the parameter types.
Here are example that should elaborate. There's a very good reason that the method signature doesn't include the return type. int doIt () { return 7; } string doIt () { return "seven"; } int a = doIt(); // would be inferred 7 string b = doIt(); // would be inferred "seven" var c = doIt(); // ? void what (int i) {} void what (string s) {} what(doIt()); // ?
Because you'd have to declare the type expected to be returned from the method. Otherwise the compiler would have multiple methods to choose and no way to narrow to just one.
An can't you do pseudo-mixins with interfaces and generic methods? I've never used those in practice before but I don't see any major problems with it. 
I do a lot of scientific computing with c# and I agree. I want to see more Fortanisms implemented.
I miss const-correctness from c++ and I also don't like the dispose pattern.
Const correctness ftw.
You could do what I did - just use F#.
I'm just learning c# and coming from php and cold fusion background. The thing I hate the most so far is the errors. Unless there is a setting somewhere that can tell me more details on the errors I am missing. But I'd like them to always tell me what file, line number, and a little more detail on what's going on. Visual Studio 2015 and c# just doesn't seem to give the info I need for errors like the other 2 languages I've worked with do. Most likely I am just using it wrong or don't know how to read the errors correctly yet though. 
I think the fact that Sun was not willing to separate the "language" from the "platform" forced Microsoft's hand.l to create a separate language. 
I generally agree with all of this, especially on the open source community and cross platform points. Compared to Python or Java, the open source library support is seriously lacking. And while I would love to deploy C# code to Linux, it's still not quite there. I've found the .NET core project very confusing and largely focused on ASP.NET, which is not really interesting to me.
No algebraic datatypes, pattern matching, TCO, type inference, REPL or autogenerated equality, comparison, hashing, pretty printing and serialization functions. **EDIT**: I am actually just describing F# there but I'd like many features over and above F# too. I am ashamed to see monochrome fixed-width font REPLs in this day and age (Ceefax did better in the 1970s!) so I'd like a full color REPL with integrated graphics and sound more like the notebook interface of Mathematica. By graphics I mean not only free form pixel, voxel and vector graphics but also integrated visualization tools not just line, bar and pie charts but graph layout and every other visualization too. I'd like to be able to drop into a graphical language when it suits me (e.g. rebalancing red-black trees is always expressed diagrammatically in text books but then you have to write monochrome fixed-width font textual code using ASCII art to create make-believe arrows and so on). I'd like collaborative programming with infinite undo and a full audit trail on changes. I'd like data integrated into the code so I can build a database or spreadsheet into my Visual Studio projects and have a strongly statically typed interface to it. Oh, and I'd like all the code to be on Github all the time so instead of Debian apt or Nuget or whatever you just refer to a Github project to pull in anything you want. And I want all of this running flawlessly on a Raspberry Pi. 
I don't know, seems pretty straightforward to me (implementing disposable). 
You mean like how keyword "this" is used for this.MyProperty and also for constructor's this()? Not a fan of that either. Although how often does this() get used in real world situations? I'd wager it's quite rare.
Waiting for better Immutability support. Sure, F# could be used, but that's mixing two worlds and not always doable. Also (shameless plug) here is a poor man's way to implement immutable types with a spread operator: https://github.com/MihaMarkic/Righthand.Immutable/blob/master/README.md
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [MihaMarkic/Righthand.Immutable/.../**README.md** (master → 4cd597b)](https://github.com/MihaMarkic/Righthand.Immutable/blob/4cd597bfbd507e134ee15670f4f2263d8fdbdf27/README.md) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dgwwaga.)^.
There is also VS for Mac (improved Xamarin Studio). 
Do you not have code reviews? I know it doesn't fix everything, but you should not be letting interns check anything in that wouldn't meet the bar for a full time developer.
I dislike the language being to platform specific. It has gotten less and less in the last years, but if I create a project in Xamarin Studio (Mono) on macOS it's gonna be different from a Project in Visual Studio on Windows. Which makes googling really hard. .NET core is a step in the right direction. Also I don't know if that's a C# complaint or IDE, but I hate how Visual Studio or other IDEs abstract the filesystem. Like I delete a file (atleast I think I do) and find out it's still there when I browse via Finder/Explorer. Idk if other IDEs or languages do it similar, but I never had such issues with stuff like nodejs, python, Go, PHP, ...
I wish it had support for typedefs, like C. So I could have descriptive type names for types that are just primitives. It makes the code more readable and safe. It makes questions like "Is the first int the account Id or customer id?" Go away and enforced by the compiler. 
Stack Trace on exceptions tells you everything
Wow, that kinda sounds like a cool hack, I'll have to try it next week. Never thought of working around a table by creating a view with the same name. Can't be a permanent solution in our environment as I can't trust it to survive an upgrade or reinstall, but cool solution none the less!
Well that and the Cease and Desist letter.
Not really, if strings were a value type then you'd have all sorts of problems where anything that contained a string would be of an undefined size and they'd always be copied and are generally quite long, so slow to use. So in likelyhood you'd choose string to be a reference type. (Or a value type wrapper over an array, which would be pretty much the same) Since you are passing around references to the original if they were mutable you'd either be in all sorts of pain, pass out an error message, message is altered by caller; next error message is the changed one. Pass out name of control, caller adds something to the end control name is changed without any cohesion; alter string used for dictionary key; equality against that key no longer match the hash it was added to the dictionary on. At that point you'd need to be doing a defensive copy on the strings to stop everything failing apart; which would mean lots of copies and allocations for the strings.
Yes there are code reviews. But there are also deadlines and quick and dirty things that "can be fixed later, but right now we need this out". Also the are like 7 authorized code reviewers and, well, they're all their own person. You only need to get your change approved by at least 2 of them. The other 5 likely won't even see it because they're busy. It's also not usually the interns who are the offenders because they're under constant scrutiny and rarely can get any bad code committed. It's your co worker who primarily works on a different project but needs to make a change in your project for whatever thing they are working on. In our case, we have projects that indirectly reference business logic assemblies from earlier than 2010. Basically a project referenced that assembly way back when, then a project referenced that assembly, then a project referenced that assembly, etc. Then you get where we are today not quite sure why you're dependent on that assembly. Sure, you can spend time and figure out why, but you're busy and right now it works soooo In the projects that generate those old assemblies youre afraid to touch existing public methods because you're unsure of the dependencies, so you create new. For instance, just the other day someone changed a method signature to take a String instead of a URI and broke 4 other 3-tier solutions unknowingly. So after getting latest, the next time someone tries to load one of those solutions they'll be met with all kinds of compiler errors. This could have been prevented if they kept all the logic private in the project they're working on or added a well defined utility function to the utilities/framework project. 
It is, but it gets a bit repetitive. Using SafeHandles for native interop is even more boilerplate. I always end up copying the code from somewhere else, or using snippets.
He's on/off helpful. I believe it was in 2015 he decided he had a thing for me and so harassed and insulted me on every post I made over several months and I don't mean just posts in this sub. I believe I sent a complaint of harassment against him to the FBI for it.
Not quite sure what you're getting at. `Action`, `Func`, `Predicate`, and other `delegate` types already accept methods directly (like `Int32.Parse`). My issue is having to use a lambda to use instance methods (`stringList.Select( s =&gt; s.ToUpper() )`), or write a new class to do it. static class StringEx { public static string ToUpper( string s ) =&gt; s.ToUpper(); } var strings = stringList.Select( StringEx.ToUpper ); As I understand it, the point of Java's method references is to avoid both cases by just writing `String::toUpperCase`.
5\. How about C#Interactive? csi.exe (nuget: Microsoft.Net.Compilers) 
I'd love to see both record types and discriminated unions in C#. Then if feel less compelled to learn F# 
[Lawsuit](http://www.techlawjournal.com/courts/sunwvmsft/Default.htm), actually.
Garbage collection is a drain on CPU cycles and the language has very poor concurrency support when compared to Rust. (I'm a C# coder by trade and a Rust coder at home)
Swift has all variables, value-type or reference-type, be non-nullable by default, and have to be explicitly stated to be nullable. I wish C# had this. Extension classes would be nice. Return type covariance. Surprised the language libraries don't already include a BigDecimal type. It would make sense if operators would reverse the passed members if the first member doesn't include an overload for the operator and the second member. An example of how this would be useful is if you implement your own numeric type, like a Fractional type or BigDecimal. Although I could see how this might cause problems that may have to be worked around, I think. I'd like to be able to overload more operators than just the standard ones, to the same level as Swift. At the same time, it would be nice if C# would make use of operators for methods/concepts common across wildly different types of objects. As an example, delegates and events sort-of set up += as an "Add to" operators for types that can contain things, which sort-of fits in with what it's used for with numeric and string types - but that isn't carried over to other types where it would make just as much sense, particularly collections. Multiple inheritance. I really don't think the diamond problem is a legitimate argument against having multiple inheritance in situations where it wouldn't occur - and even where it did occur, you could force the writer to override it and include a warning about caller expecting one behaviour if thinking about one parent class and another if thinking about the other where classes use the same method name for conceptually different functionality. The option to specify a backing type for enums other than primitive types, and access members as though you were accessing an object of the type directly. Although this can be perfectly emulated with a sealed constructorless class with final static variables of the same type, so eh. I wish C#'s events were a library type rather than essentially a language-level alias of delegate types. Were there an IEvent&lt;T&gt; where T : EventArgs interface that Event&lt;T&gt; where T : EventArgs implemented, I'd be able to implement my own events that worked at the same level as native events, rather than having to create my own interfaces/classes that have no relation to proper events, just to add extra features such as cancelability, listener priority, or event cascadence. ^((is that a word?)) More a complaint about the situation around the compiler than the language itself, but I wish that IL programs had a different file suffix from other executable programs (take Java's .jars, for instance), and that cross-platform support was better. That is, that the mono APIs (that Microsoft now manage since buying Xamarin) matched the Windows .Net APIs across other platforms completely, and that IL apps could be opened in the same way as regular applications with no extra work from the developer(s) and without confusion with other Windows non-IL apps that may not be intended to run on other platforms. Although this may not be entirely unintentional, since Microsoft do have incentive to make applications that run on their primary operating system framework not run on other platforms flawlessly - although a reason isn't really an excuse.
Sort of. Microsoft tried to build a version of Java that only worked on Windows machines. That's what Sun objected to.
Nothing in comparison to other languages, but I REALLY want interfaces to support statics.
..but it's not a fact. Read [this](http://www.windowsdevcenter.com/pub/a/oreilly/windows/news/hejlsberg_0800.html) interview with Anders Hejlsberg from around the time C# was released. His team considered all kinds of languages during the initial language design. Java was certainly one of them, but Hejlsberg considered C# closer to C++. Both languages were heavily influenced by C/C++, so of course there are some similarities. Straight from the horse's mouth: &gt;**Osborn**: I've been looking at press stories about C# [pronounced "See sharp"] and notice that many of them seem to lead with the observation -- or perhaps the theory -- that C# is either a clone of or a Microsoft replacement for Java. If you could write the headlines, what would you like people to say about the language? &gt; **Hejlsberg**: First of all, C# is not a Java clone. In the design of C#, we looked at a lot of languages. We looked at C++, we looked at Java, at Modula 2, C, and we looked at Smalltalk. There are just so many languages that have the same core ideas that we're interested in, such as deep object-orientation, object-simplification, and so on. &gt;One of the key differences between C# and these other languages, particularly Java, is that we tried to stay much closer to C++ in our design. C# borrows most of its operators, keywords, and statements directly from C++. We have also kept a number of language features that Java dropped. Why are there no enums in Java, for example? I mean, what's the rationale for cutting those? Enums are clearly a meaningful concept in C++. We've preserved enums in C# and made them type-safe as well. In C#, enums are not just integers. They're actually strongly typed value types that derive from System.Enum in the .NET base-class library. An enum of type "foo" is not interchangeable with an enum of type "bar" without a cast. I think that's an important difference. We've also preserved operator overloading and type conversions. Our whole structure for name spaces is much closer to C++.
&gt;Option&lt;T&gt; from the language-ext library is pretty solid, but requires an additional dependency. I'm curious what advantage this has given that C# types are nullable by default. 
Only reference types are nullable, `Option&lt;T&gt;` is a value type.
&gt; It has REPL and type inference. Pattern matching is supported in c#7. Yeah, C# has some crippled knock-offs. I'm talking about the real thing. Here is a function to swap a (generic) pair in OCaml and F#: let swap (a, b) = (b, a) No need to annotate all of those generic types: they are inferred automatically for you. &gt; if it was really important, it would already been done I don't use C# precisely because it lacks many really important features. But, hey, at least C# finally got generics. :-) &gt; Even java dosen't have it after all this years. Java is the language that brought garbage collection to the unwashed masses over two decades ago. I didn't consider Java innovative 20 years ago, much less today. Java is perhaps the slowest evolving of the mainstream languages. Even C++ evolved faster than Java. The Java guys are more interesting in adding dynamic invoke to support dynamically typed languages (because they're all closet Lispers) than implementing tail call optimisation, much to the disappointment of the Clojure and Scala crowds... &gt; What do you mean by algebraic datatypes? Never heard of it :S Algebraic datatypes are sum and product types. Sum types are like union types from C. Product types are like structs. To get some idea of what these features are good for look at [this example](https://codereview.stackexchange.com/questions/11804/symbolic-derivative-in-c). I also wrote up some OCaml examples on the [type system](http://www.ffconsultancy.com/ocaml/benefits/type_system.html), [variant types](http://www.ffconsultancy.com/ocaml/benefits/variants.html), [pattern matching](http://www.ffconsultancy.com/ocaml/benefits/pattern_matching.html) and [an interpreter](http://www.ffconsultancy.com/ocaml/benefits/interpreter.html). 
Well, Hejlsberg was wrong.
Yep, got pointed out in another comment already
Top 10 Worst C# Features by Eric Lippert: http://www.informit.com/articles/article.aspx?p=2425867 I do not agree with every regret Eric mentioned, but still this is a very interesting article.
He was the lead designer of the language. He's forgotten more about language design than most people will ever know. You can say he was *lying*, but you can't say he was wrong.
[Which is better, return or out](http://stackoverflow.com/questions/810797/which-is-better-return-value-or-out-parameter) Sticking with returns helps with testing and method chaining. TryParse is a good example for using an out, because the return value of a parse is pass or throw an exception. Since it can throw exceptions, we need to handle that with a Try {} Catch {}, and that can be ugly. The TryParse() simplifies our code for us here.
Is there something wrong with `Nullable&lt;T&gt;`?
I'm not familiar with option types but seems like nullable value types are what you want? Plus the null propagating and coalescing operators int? i
Not really. In the worst case they get collected eventually even if you don't dispose them explicitly.
Most of the time you care only about managed resources and adding dispose for them is pretty easy. It's a bit more complicated with unmanaged resources,true,but then again not that much. 
Using a refactoring/helper tool like CodeRush makes that a breeze. 
Or heck, with Roslyn it's not hard to write your own refactor that does that. 
Some things: - Lack of primitive type aliasing. I recently had to switch all coordinates in a project from int32 to int64... what a pain :( - Lack of syntactic sugar for Type t; new t() or even worse, Type t. SomeGenericClass&lt;t&gt;.Blah() means a lot of verbose code. You only really run into this problem in certain domains (e.g. serializers). - Also, out refs in async should be a thing. It's not semantically equivalent the second you have async, but outs really should have been syntactic sugar for returning tuples, and that would have made this possible.
Yeah, im pretty certain that the limit is 10 on Windows 10, we made some benchmarks at work as well and came to the same conclusion. Also, it seems like other people are having the same problem(see last reply here) https://forums.asp.net/t/2100558.aspx?concurrent+connections+on+windows+pro+10+IIS
It doesn't solve the problems, but these to projects might help you overcome some of the problems: https://github.com/antiufo/roslyn-linq-rewrite &gt; This tool compiles C# code by first rewriting the syntax trees of LINQ expressions using plain procedural code, minimizing allocations and dynamic dispatch. https://github.com/jackmott/LinqFaster &gt; Linq-like extension functions for arrays and List&lt;T&gt; that are faster and allocate less. LinqFaster now includes all relevant Linq extension methods, and many SIMD and parallel enhanced extension methos are available as well in separate projects and nuget packages. 
IDisposable is a patch on the lack of determistic object clean-up in C#. It's a kludge, and it's quirky enough that there's a 50-50 chance any particular article about how to implement it is actually 100% correct.
Great project buddy. Lovely UI. Loved the fact that you listed your dependencies. How long did this take you to build from A-Z? From a C# dev to another
does this apply ? `using customerID = System.Int32;` you'd still be able to pass in ints and int literals, but you get the intellisense at least. i use it for shortening generics &amp; dictionary types sometimes. (maybe i'm missing something obvious, it's been a long day.) edit: ah yes i am forgetting something, it is per-file so it is still a bit of a PITA.
Thanks for your help. Looks like I will be spending some time setting up odata batching.
Thanks
You can't use ^ , besides that, I haven't had many problems with it. Sometimes a tiny typo can give you a million errors, but that happens in many other languages as well. 
Per file though =(. I've seen entire libraries put thousands of lines into one file and do "using X = System.Int32" for example... 
&gt; a constructor is a static method that a class uses to construct objects of its own type I think I see where you're coming from, but I prefer them being separate (like providing a special purpose `IEqualityComparer` vs overriding the equals method). I would love to get "first class" constructors, though, like we have for regular methods. I think those could really push IoC Containers and Factories to another level.
yeah i forgot that tidbit somehow... *kinda* search&amp;replace refactorable but icky for large projects. pretty half-assed i guess - maybe it will be improved somehow, one can only hope.
Interesting. Thanks for the details. 
Oh look, you troll this sub as well as /r/Windows10. Big surprise...
Create a seperate list containing the objects and assign that to the DataSource property of the listbox. Any specific reason you're using a struct and not a class?
The stigma of being a microsoft language
Inconsistent application of CamelCase in standard practice.
* IIRC T can't be a reference type * You aren't required to check HasValue before accessing the value (other languages with options usually enforce this) Nullable&lt;T&gt; is a half measure, which makes sense. It's meant for sql interoperability. 
I mean, all a string is is an array of Chars. You can roll your own if you really want to (though, I don't know why you would).
I think this is describing string interning? The common language runtime conserves string storage by maintaining a table, called the intern pool, that contains a single reference to each unique literal string declared or created programmatically in your program. Consequently, an instance of a literal string with a particular value only exists once in the system.
UWP won't run on Win7, so either make a native looking web app or use WPF/WinForms. I think WPF is the better option between the two, which may be because I like the declarative nature of XML.
So does F#. let l = Dictionary() l.Add("x", 1) // l is now Dictionary&lt;string, int&gt;
Rebranded Xamarin Studio
Extentions: Kotlin: fun String.doSomething() { this.nanana } C# namespace AAA { public static class StringExts { public static void DoSomething(this String str) { str.nanana; } } }
In package manager console did you run these two commands? &gt; Add-Migration &gt; Update-Database 
I did not, I just followed tutorial to the letter. I don't even know what package manager is. I'll look into if, thanks. 
I know, but it kind of feels like a wasted opportunity not being like that from the beginning, specially given that before Java über alles craziness , the majority of type safe languages already used AOT compilation to native code, with support for static and dynamic linking. Just be aware that CoreRT development has been placed in the back burner as they shifted resources to make .NET Standard 2.0, and they plan to get back to it after the 2.0 release. You check it here, I think it is the right video, did not watch it again. https://blogs.msdn.microsoft.com/dotnet/2016/11/08/the-week-in-net-on-net-on-corert-amp-net-native-enums-net-ylands-markdown-monster/
Aren't those commands for Code First only? He stated Model First. That's using the edmx designer. 
Can you share the generated sql? Seems that it's creating the tables in a different db from the one you are checking. 
This is a dumb question, but are you refreshing the server explorer view? If executing the SQL says the tables exist then you are either looking at the wrong database in server explorer, or you are looking at stale data...I don't believe it updates automatically.
Oh right, well in that case I don't think EF will create your columns for you.
Yeah, you'll be running those commands quite often.
I have been reading [The C# Player's Guide](http://starboundsoftware.com/books/c-sharp/) and also watching [this series on UWP c#dev from Bob Tabor](https://channel9.msdn.com/Series/Windows-10-development-for-absolute-beginners?page=1). I had also previously read [HeadFirst c#](http://shop.oreilly.com/product/0636920027812.do) a while back and enjoyed working through all the exercises, though when I did that one it was for windows 8.1 store apps. 
It has additional features like support for .NET Core, so not just rebranded. 
The vast majority of people understand that C# was a clone of Java. It's not controversial.
[Xamarin.Forms](https://www.xamarin.com/forms) is probably closest?
I'm pretty sure the xor operator works just fine. Could you elaborate?
I know how it's done, and even if I didn't, it's explained on MSDN, no need to give a half-arsed explanation. I gave you an example why it's **more** straightforward in C++/CLI, are you claiming it is not? Or are you just butthurt that "your" language isn't better in every conceivable way? Or are you just trying to have a last word?
I did, right after I tried database first. Sorry I thought I implied it with "one problem after the next" I just chose model first because that is where i'm at and it's just one thing. I don't think do it another way is a good answer or even a work around. I'm pretty sure I'm doing something wrong, I'm not a total noob but pretty much. Thank's for your suggestion anyway, I appreciate it.
No current DB: https://msdn.microsoft.com/en-us/library/jj193542(v=vs.113).aspx Existing DB: https://msdn.microsoft.com/en-us/library/jj200620(v=vs.113).aspx
Yeah, sorry, the .NET redist is correct. 
I'll do some testing soon and let you know what the situation was. I hope you're wrong about the .NET, really hoping I can get away with making this as simple and lightweight as possible. 
C# required. Net installed. You can try. Net core, that can be bundled with your program, I wouldn't call it lightweight though. Windows will update to the latest. Net version using Windows update, so it might be a non issue. 
Because you aren't modifying each Warrior's health, you're passing *copies* of the *value* of their health in your Attack method. You need to read up on the difference between reference types and value types.
These articles are fantastic. If you missed the previous one on F# for C# devs definitely check it out http://connelhooley.uk/language/f-sharp/ Between these two articles and Rider getting F# support things are finally starting to click for me with F#
[Free Option](https://www.codeproject.com/Articles/848637/Nested-DataGridView-in-windows-forms-csharp). Probably has some quirks. Everything else I know of is paid. You can Google for hierarchical grid control.
Harbour
Interfaces not supporting statics is a pain. To mock statics I either need to write a wrapper class (blergh) or just make them non-static. A very minor complaint, really :) 
There are multiple semantic errors in your program. 1. Health can never be 0 because your if statement has a strict inequality as the condition. 2. `Odin.Attack(Odin.attack, Bahamut.Health);` is not what you want. When you call `Attack`, `this` is Odin. So, Odin's health will now be equal to Bahamut's health minus Odin's attack.
When you call Odin.Attack(Odin.attack, Bahamut.Health); are you expecting this to affect the Health property of Bahamut? It won't - you are passing an int value into the Attack method of Odin.Attack. This method then affects the health of Odin, not Bahamut. this.Health = warriorHealth - warriorAttack In other words, in your example, in pseudo-code it would be: this (meaning Odin as you called Odin.Attack).Health = 1000 - 100 (the int values you pass in). Then the same thing happens with Bahamut's attack - this is why it LOOKs like they share the same health, but they don't - your code is just updating the wrong warrior's health during the attack method. You would need to pass a reference to the warrior object who's health should be affected, e.g. Odin.Attack(Bahamut); ...and change your Attack method to something like: public void Attack(Warrior enemy) { enemy.Health = enemy.Health - this.attack; } Also, remove the if check in the Health setter to stop the infinite loop. The output will [then look like this](http://i.imgur.com/4Xy2WGu.jpg)
The point of the Option type is to express that something either has a value or doesn't in a type safe way instead of just using null. So this begs the question, what is wrong with null? Any reference type can be null. To be more explicit, any reference (memory address) pointing to a memory location on the heap can be null. The heart of the problem is that null doesn't make sense most of the time for reference types that we are passing around, and yet reference types have this extra state that one mistake could put it in and we won't find out until runtime. There have been [proposals](https://gist.github.com/olmobrutall/31d2abafe0b21b017d56) that also touch on this problem by arguing for non-nullable reference types in C#, which would allow us to get compile time errors vs run-time errors. Imagine for a moment if null was not even an option for reference types. This means no null checking would need to be done. No checking the API documentation on some library method call to see if it might pull the rug out from under you under some condition and give you null (assuming all those conditions are documented). Note the same can be said for exceptions if you express errors as a Result type. A Result is a lot like Option, it either has the result or an error. When you actually want none or nothing is a valid return type, then you would use something like Option. Option is more type safe because unlike null it's None value can only be assigned to another Option type. Null can be assigned to any reference type and has a tendency to propagate around and rear it's head under unexpected conditions during runtime. It's very easy to forget to check for null or be unaware under what conditions something might be null. Note that nullable types in C# is meant for value types (where you cannot assign null) to express having no value, much like Option. However, nullable doesn't work for reference types. See the generic type constraint below in [nullable.cs](https://referencesource.microsoft.com/#mscorlib/system/nullable.cs,e67a3be36534413d) public struct Nullable&lt;T&gt; where T : struct Vs [Option.cs](https://github.com/louthy/language-ext/blob/master/LanguageExt.Core/DataTypes/Option/Option.cs) public struct Option&lt;A&gt; : IEnumerable&lt;A&gt;, IOptional, IEquatable&lt;Option&lt;A&gt;&gt;, IComparable&lt;Option&lt;A&gt;&gt; { Downsides? Well, at least with this library, it seems the only way to do anything or get the value is by using a lambda expression, which will be a lot slower in a high performance scenario than the typical TryGet pattern in C#. There are other libraries such as [Optional](https://github.com/nlkl/Optional), which at least gives you the ability to do (var value = option.ValueOr(10);). I also don't see either of these making use of C# 7 pattern matching yet. I'll also say this, null reference is very much a language design issue (watch this: [Null References: The Billion Dollar Mistake](https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare) where he talks about some of the language design aspects of it). It really helps if the language doesn't allow null references like in Rust, and provide extensive support for Option and Result types ([see Rust Error Handling](https://doc.rust-lang.org/book/error-handling.html). That link gives some good examples of situations you will likely run into when you start using Option and Result. You'll start wanting something like the bind operator in F# and Haskell. I suggest watching [Functional programming design patterns by Scott Wlaschin](https://www.reddit.com/r/programming/comments/61kt36/functional_programming_design_patterns_by_scott/), which goes into this around 32:55. This language-ext library probably has everything you need, but you may run into some resistance attempting to write C# in that style in a team of non-functional programmers. Finally, I just want to point out something that anyone who might be reading might be thinking, "I still don't see the big deal with null. I rarely get null reference exceptions.". Last year when I was still in college and I even played around with Haskell and I didn't really see a huge benefit of Haskell's Maybe (i.e. Option) type vs null in practice. However, now that I work with production code and witness nearly on a daily basis run-time exceptions caused by null references coming across our message broker, I see what the big deal is. This is an entire class of errors that could be eliminated simply in the design of the language at no significant performance loss if done correctly (see Rust). However, having said all that you can greatly reduce null reference exceptions through team discipline of never returning null on purpose (use TryGet pattern) and good testing practices. edit: add bit about the non-nullable ref type proposal
An unrelated issue: you should *not* be creating a new `Random` instance local to `Block`. You should instead use a single instance at the `Warrior` level or higher and call `Next()` as needed. Contrary to the name, you don't want `Random` to be random, but pseudo-random, such that a given seed value will produce the same sequence of outputs. The parameterless constructor `Random()` gets its seed from the system clock, which is unpredictable and—worse yet—will produce the same seed if called multiple times in quick succession.
Typically this​ is done by using a viewmodel to be an in between for the view and business logic. The term is mvvm, but the general idea is you modify that class and bind the view to it
It's also poor form to have a property read a different value from what you set. Throw an exception if it's out of range and this bug would have been self evident immediately.
&gt; Option&lt;T&gt; just seem like bandaids with potential significant downsides (eg. Why isn't null considered a possible valid value for T, even if not by default) I agree it seems like a bandaid, but perhaps for a different reason. Are you asking why you can't get null out of something like this: string bob = null; var x = Option&lt;string&gt;.Some(bob); x ends up being None in the above code, given that library. Having some give you null sort of defeats the whole purpose of using Option in the first place. I agree though it seems like a bandaid mainly because it's not really idiomatic C# and there's no built in support for it. Plus it can be annoying to have a third party library dependency that I need to take the time to look through to see if and when it is casting and boxing values. Plus despite all that it can be doubly hard to get a team to adopt the practice where there is already so much support in C# for dealing with null (null propagation and coalescing operators). I guess what I really wish would happen, in the case of C#, is non-nullable references with compile time checking. However, a built in Option struct may still have a use if it plays well with Linq. &gt;why not throw an exception or return an "empty" object instead? Well, in the case that is not exceptional and you're in a loop. The creation of so many objects is going to cause a lot of GC pressure and slow down. This is why Try get is fast because you don't have to create an object unless it's necessary. If Option is implemented as a struct, then it's None value is just a value on the stack and is fast as well. When you're not in a loop it can make sense to return an empty collection. However even if you're not in a loop and not returning a collection, then creating an object with say a empty constructor and having some property (IsNull) to tell you whether it has some value or not is possible. In fact, I see this quite a bit at work. However, I would argue this is a bit of a violation of the [single responsibility principle](https://en.wikipedia.org/wiki/Single_responsibility_principle) and/or [separation of concerns](https://en.wikipedia.org/wiki/Separation_of_concerns). It really make sense to have a generic struct that handles this responsibility and protects against null vs having to remember to check some property. 
Hey, I like it. That didn't really occur to me, and it seems it would serve a lot of use cases. I would definitely attempt that sort of pattern where it makes sense vs taking on another 3rd party dependency. 
Mobile only though.
You can use log4net? 
If it's not possible with elmah then have to settle for that or serilog i guess.
Why do. You put so. Many periods? It makes it very hard to parse your. Sentence.
&gt; Not really, if strings were a value type then you'd have all sorts of problems where anything that contained a string would be of an undefined size and they'd always be copied and are generally quite long, so slow to use. That depends on how much they are value types, so to say. They could easily be a value type box over a reference type, e.g. struct X { SomeRefType y; } (plus some methods). This is used e.g. in Swift for arrays (and strings, probably). Of course Swift can do more exact copying (offensive?) since it's reference counted.
Multiple using statements are fine like this: using (var x=new...) using (var y= new...) { // work here }
The one on MSDN is correct. One can just repeat it all the time (yes, that's suboptimal, see what I wrote about C++/CLI complier doing it right).
Works on Windows and [macOS (in preview)](https://blog.xamarin.com/preview-bringing-macos-to-xamarin-forms/) also. They just talk about mobile more. Also [Gnome for linux](https://twitter.com/migueldeicaza/status/852623345371811842) is coming 
No. However there is no problem with calling virtual methods from the object being constructed from inside the constructor, which can also be quite problematic. Or, my favorite; for some reason this is fine: static int A = B; // A is 0, because B is 0 at this point. static int B = 3; // B is now 3. static int C = B; // C is 3. 
The response is in a format called [JSON](https://en.wikipedia.org/wiki/JSON), you can use [JSON.net](http://www.newtonsoft.com/json) to deserialize it.
[removed]
If you go to "Solution explorer", right click the Project you want to distribute, select "properties". A new Page will be shown, there is a tab called "Application"... in that tab there is a configuration value "Target Framework". If you choose a framework that is a "client profile" then you can ship just the exe and dlls and any other req. resources. But if it isn't the client profile then the end user will need .net framework redistributable. If you had three applications each using the same .net non-client profile framework the user will only need to install the .net redistributable once. 
[WinForms's DataGridView has a Sort() method.](https://msdn.microsoft.com/en-us/library/0868ft3z.aspx) [Apparently, it's more complicated with WPF.](http://stackoverflow.com/questions/16956251/sort-a-wpf-datagrid-programmatically) GUI stuff's not really my wheelhouse, this seems fairly google-able.
Like MVVM? Would [this](https://www.codeproject.com/articles/165368/wpf-mvvm-quick-start-tutorial) be a good example?
To elaborate on this response you would use something like the below code to accomplish this once you import the library via NuGet. var json = JObject.Parse(result); Console.WriteLine(json["file"]);
I usually refrain from giving exact solutions like that because then it just gets copied and pasted without any thought.
You have a point, with copy pasting you don't learn anything
Both. Devil is in detail and I don't want to think about trivial details if I can help it. Can you answer my question though? 
Great, thank you.
Some ideas: * authenticate using battle.net authentication * let user accounts pick what kind of progression they are most interested in - for pug checking, I imagine Heroic is probably more important than Mythic * Have a look at warcraftlogs character lookup (here it is for Bapez: https://www.warcraftlogs.com/rankings/character/21833794/latest/). I'm not sure if there's a lookup you can do there that could help you. * If you add authentication you could give a simple "better than you" or "worse than you" sort of grade to the person, and then you'd know whether to invite them.
What is your issue? Is your check box not firing your cbContacted_onCheckChanged event? 
It isn't firing my update command. I'll update my post, sorry.
Its been a long time since I've used webforms or the grid view but i dont think an ASP:CheckBox has CommandName/CommandArgument properties does it??? Wont you have to call the update directly from the OnCheckedChanged event? Try removing it and see if it will fire correctly. 
The if statement is probably more efficient, as it doesn't have to create a list object, add the other values to it, and then walk through the list to do the comparison. A HashSet&lt;T&gt; would be slightly more efficient than a List&lt;T&gt;, FWIW, but for a list of comparison values that short, the if is probably fastest. If you had many entries and expected to add new ones regularly due to changing requirements, it might make sense to statically build a HashSet&lt;T&gt; containing the values that shouldn't trigger a refresh, and use that in your method. You could even use a properly chosen string comparer to get rid of the ToLower() call. private static readonly HashSet&lt;string&gt; s_noRefreshValues = new HashSet(StringComparer.InvariantCultureIgnoreCase)&lt;string&gt; { "value1", "value2", "value3" }; // meanwhile string userValue = DataGrid.GetCellValue(); if (!noRefreshValues.Contains(userValue)) { /* do stuff */ } All that said, this doesn't sound like a context where performance is likely to be *that* critical.
My main C# project currently is my website: [[teknik.io Source](https://git.teknik.io/Teknikode/Teknik)] Right now, my main issue is figuring out a weird IIS issue where it isn't respecting my minBytesPerSecond config setting. &gt;:( [[Server Fault Link](https://serverfault.com/questions/846574/iis-10-not-respecting-minbytespersecond-option-in-applicationhost-config)] My most recent accomplishment (in my eyes) is a stream wrapper to allow random access read/write of the stream while decrypting/encrypting using AES in CTR mode. So now I can just create the stream and it will encrypt/decrypt at any portion of the stream. :D [[Stream Wrapper](https://git.teknik.io/Teknikode/Teknik/src/master/Utilities/Utilities/Cryptography/AesCounterStream.cs)] [[AES Counter Mode](https://git.teknik.io/Teknikode/Teknik/src/master/Utilities/Utilities/Cryptography/AesCounterMode.cs)] [[AES Managed Wrapper](https://git.teknik.io/Teknikode/Teknik/src/master/Utilities/Utilities/Cryptography/AesCounterManaged.cs)]
Oh nice, thanks! I didn't know about HashSet.
You're probably right, actually. Even if it executes in the same time (debatable), it's probably using more memory. Regardless, if you've only got three elements, total, ever ... the raw comparisons probably win out.
I'm working on [Breakneck Install](http://www.breakneckinstall.com), which is an application to create windows installation packages. I'm in the midst of re doing the UI and am generating MSI files (and appx for windows 10) instead of an exe
I wish you could edit titles after submitting. :P
&gt; are there any technical differences &gt; Obviously they are technically the same. o.O
 if (boolValue) return; if (otherBoolValue) { /* do something */ } is exactly the same as: if (boolValue) return; else if (otherBoolValue) { /* do something */ }
Not only are both functionally the same, but both _literally compile_ to the exact same IL: IL_0000: ldarg.1 IL_0001: ldarg.2 IL_0002: bne.un.s IL_0005 IL_0004: ret IL_0005: ldarg.3 IL_0006: ldarg.s 04 IL_0008: pop IL_0009: pop IL_000A: ret That said, in terms of maintainability, it could go either way. If the `if (someVariable == someValue) return;` check serves basically as input validation, like a code contract, then it's a nice way of separating that concern with the meat-and-potatoes of the method. "Here's my validation, and there's my algorithm/work". But if there's a more significant relationship between the two `if` blocks, then it might make sense to keep them together as related concepts. For example, `if (angle &gt; 90) { //stuff, return } else if (angle &lt; 0) { //other stuff }` it might read better. It also helps protect against changes in the future or logical bugs where you don't abort/leave the method with a `return` in the first block, and you end up accidentally running both blocks. _Generally speaking_, I would argue that if you aren't returning values from the method, and you're just using `return;` as a way to avoid using an `else`, it's probably not the best use of this style. If you're using the `if (check) return;` as a validation/abort step before proceeding with the core algorithm, then that's perfectly acceptable and probably best.
Awesome! :) That was exactly the answer I was looking for.
If its fast, possibly, but im not a pugger
I guess you're right, it's implied that it will be set. But that being said, is the logic residing in the controller okay? Thank you!
I don't have any links to anything I've done. I have literally only made one windows form application which I use at work. It's a simple ticket routing application with buttons for the common resolving agencies. It just copies the RA to clipboard on button press. It also has two other text boxes; one which opens a URL to check the status of an inputed request order and another to reopen a remedy ticket which was closed. The next app I want to write is one which adds asset tag info from a share point database to an excel spreadsheet. We send hundreds of laptops off to recycling and need to add the computer info to the shipment. Very excited about app #2!
Data analysis. Working in the stock market the best data is the stuff hardest to use, so I do alot of PDF parsing and nlp in combination with various api's
Unity3D. Not as exciting as some of you.
I've always been curious about programming/automating for the stock market. Any tips for where to look to get started?
I use C# to write cross-platform mobile apps (using the Xamarin platform) and web service backends. I also use C# extensively for hobby programming, it's a nice blend of being easy to be productive in (the language has lots of great features and .NET is a very mature library) while reasonably performant.
That was the answer, I was referring to you stating that it's hard to remember and complicated. Which is not IMO. Is it nicer in your sample/language? Yes. It's a big difference? No,even more so because disposable objects are not that common. Is C# my language? No. 
I'm mostly an 'end-to-end' web developer, meaning I build web applications from scratch, from database all the way until the front-end. Occasionally I have to make a WinForms, UWP or console application. At our company we have 8 big, enterprise (SaaS) applications all built in the Microsoft Stack (with here and there a few legacy applications written in classic ASP, PHP and Visual Basic that are currently being rewritten), and we're currently making an API to extract data from them. Fun times.
Unityyyy
Visual Studio at work, Unity at home...
Rewriting some back-end stuff that was written in C++
Everything? Job related: * Worked on a web platform for calculating power lines and installations in factories/homes (safety, recommended wire thickness and such). * Worked on a trading/financial platform for livestock exchanges, slaughterhouses and such. Both web, mobile as well as desktop applications. * Now working for a firm that makes software for all aspects of hospitals, full solution. Personal use: * Small tools for problems I encounter (like migrating from one password manager to another) * AI problems/funsies 
Mostly projects that require a bit of forethought. I mainly use Python for hacky scripts since I can just open a text editor and immediately start banging out code rather than waiting for VS to open. Also anything that requires a UI, since it becomes tiring to write a UI without at least a hint of visual feedback. C# is also very good for Windows-specific stuff since marshalling is taken care of and there's little cross-platform dependency.
Don't just say 'i solved it' and not say how. That doesn't help people who find this post later on. https://xkcd.com/979/ https://imgs.xkcd.com/comics/wisdom_of_the_ancients.png
[Original Source](https://xkcd.com/979/) [Mobile](https://m.xkcd.com/979/) **Title:** Wisdom of the Ancients **Title-text:** All long help threads should have a sticky globally\-editable post at the top saying 'DEAR PEOPLE FROM THE FUTURE\: Here's what we've figured out so far \.\.\.' [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/979#Explanation) **Stats:** This comic has been referenced 2026 times, representing 1.2937% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_dh0sr2z)
I thought this was a /r/shittyprogramming post when I clicked it.
viemodel.bookingTime.AddHours(-2); Edit: In the future just use [google](https://www.google.de/search?q=how+to+subtract+hours+from+datetime+in+c%23&amp;oq=How+do+i+subtract+hours+from+DateTime%3F&amp;aqs=chrome.2.69i57j0l5.1830j0j1&amp;sourceid=chrome&amp;ie=UTF-8)
Be very careful doing math and comparisons on DateTime objects, you probably need to convert to UTC to avoid all sorts of issues with daylight savings time, etc. Read the following article: https://msdn.microsoft.com/en-us/library/bb546099(v=vs.110).aspx 
Custom desktop app development. WPF for GUI, less demanding back-ends in C#, for computation-heavy apps I interop with C/C++.
I also love python for hacky scripts, specially when I need to do something in linux. However, on windows, I recently discovered the C# REPL which works just like the python interpreter :) In case you never heard of it, just open a developer command prompt and type "csi". It can even run *.cs files. BTW, in linux, if you use mono, the command is called "csharp".
WebApi and maybe game development with Monogame. Also, I had a nice experience manipulating excel with ClosedXML. It uses OpenXML but it's waaaay easier. I don't know if it has all resources you need, though.
&gt;This method does not change the value of this DateTime. Instead, it returns a new DateTime whose value is the result of this operation. [Source](https://msdn.microsoft.com/en-us/library/ae6246z1.aspx#Anchor_1)
Network communication and storage I/O hardly seem like few and far between use cases. Are you working on things that do neither?
Job Related: We're writing a platform for processing HIPAA ASC X12 837 EDI Documents Personal: Re-writing software that creates Windows Installers (MSI) called Breakneck Install. There is a current version that is junky and uses NSIS as the backend rather than an actual MSI so I'm re-writing to use MSI (and Appx for Windows 10). I'd love some beta testers if anybody is interested in a free copy!
Each control has a "Modifier" property that is usually private. Set this property to "public" in order for the control to be publically accessible. However, you do break encapsulation by doing so. It would be better desig to wrap the functionality of the control you want to access in an interface/class and make that publically available instead. While you should be using the MVP pattern, another way of doing what I just said above is to add public methods and properties to Form1 that exposes the logic and functionality of Form2. For example, you might have a public method on Form1 like "public void SetText(string text)". Inside Form1 within the implementation details of said method, you could then write "Form2.SetText(text)" which has its own implementation details within Form2 as well. While this, to me, is somewhat of a codesmell, this illustrates the idea of Form1 exposing functionality of Form2 without exposing Form2. But do me a favor and look at the MVP pattern. It is a much better way to organize presentation code when using WinForms. It takes more upfront work but the benefits far outweigh the initial development cost.
God I wish Rider will be released asap. It's decent already but there is a plant of problems. I have so much hate to VS size and its slowdowns. I don't know how it can take so much space when IntelliJ IDEA takes around 400 mb. My current VS already took 11 GB on my SSD and it bring so much sh*t to my system and slows it so much I don't even want to speak about it. Also windows takes around 20 gb and MS Office about 10. It's almost 60 GB SSD only for OS + IDE + Office and all of this "drive C ony". Can someone explain why I should spend 60 GB SSD on development environment when my collegues with Linux + IntelliJ + OpenOffice spending 5? I actually hate MS so much for that and will switch to Rider at the second it will be released.
Lol. Here it goes. A while ago, we switched our cats' litter from sand to sawdust pellets, since they smell nicer, make less dust and, yes, they're more friendly with the environment. However, we had no idea how our cats will react to it. So I figured "I know, I'll point a webcam towards the litterbox and see what goes on in there". However, it quickly became obvious we'd be out of our minds to actually review hours upon hours of video footage. So I figured "I know, I'll do some motion detection to get images only when they're in there". However, I couldn't find anything suitable, so I went ahead and wrote my own. Started off based on a WPF sample app that used a webcam capture library. So i reproduced that in my app. Now, for the motion detection part. What it did was calculate the checksum of the pixels in the frame, about three times per second. However, since there was no point loading the CPU with the fullsize capture processing, I'd first resize the picture to 128x96, then perform the calculation. So, say the sum of the RGB values in one frame was 20.000. If in the next frame, the pixels would be different by a certain amount (I think I ended up using about 5%), then it meant something entered the frame, and I'd start taking snapshots (three per second). Once two consecutive frames were less than 5% different, I'd stop recording again. tl;dr: wrote motion detection to watch our cats take dumps.
Same. All game development for me. First straight c#, then xna, then monogame and now unity! 
I was using it for internal business applications for work, website development with.net mvc, and simple hobby game development with xna or slimdx. But I actually stopped using it completely. I switched to Linux. Now I use a mix of c++ and node+TypeScript for work and I switched to c++ for hobby games. I haven't found a productive workflow for c# in Linux yet and I'm working with a smaller percentage of Windows uses every month it seems. My company is moving to Linux and osx more and more.
Funnily enough: most of the time, no library at all :) I try to find websites that offer AI challenges, like this (very old) one from Google http://ants.aichallenge.org/ and participate. And for example an AI for https://en.wikipedia.org/wiki/Dots_and_Boxes. (was an AI assignment from college I had fun with, converted it from C++ to C# and tried to make it smarter). I like implementing stuff from zero if you know what I mean, but I also haven't really had a need for a library as well. Haven't yet done things which require a neural net for example (which would probably be something I'd find a library for to get started).
Solution: CheckBox cannot handle OnRowCommand or CommandName, so I threw everything into OnCheckChanged: [ASCX in my gridview] &lt;asp:TemplateField HeaderText="Contacted" ItemStyle-HorizontalAlign="Center" HeaderStyle-HorizontalAlign="center"&gt; &lt;ItemTemplate&gt; &lt;asp:CheckBox ID="cbContacted" Checked='&lt;%# Eval("Contacted").ToString().Equals("C") %&gt;' AutoPostBack="True" OnCheckedChanged="cbContacted_onCheckChanged" runat="server" /&gt; &lt;/ItemTemplate&gt; &lt;/asp:TemplateField&gt; [.CS] - with commenting for easier reading protected void cbContacted_onCheckChanged(object sender, EventArgs e) { GridViewRow nRowIndex = (GridViewRow)(((CheckBox)sender).NamingContainer); //gets the row i want to work with CheckBox cbContacted = (CheckBox)sender; //all the data in the checkbox (checked or not) string StudentID = nRowIndex.Cells[01].Text; //gives me the specific data the column i want to work with if (cbContacted.Checked) //checks if checked or not { dsApplicants.UpdateCommand = "UPDATE CUS_Orient_applicants SET Contacted = 'C' where StudentID = " + StudentID; dsApplicants.Update(); lblDeletedResults.Text += string.Format("You have contacted StudentID: {0}", StudentID); lblDeletedResults.Visible = true; } else { dsApplicants.UpdateCommand = "UPDATE CUS_Orient_applicants SET Contacted = '' where StudentID = " + StudentID; dsApplicants.Update(); lblDeletedResults.Text += string.Format("You have uncontacted StudentID: {0}", StudentID); lblDeletedResults.Visible = true; } } Dear future, I hope this helps you out. Also, if you use this code for a time-machine; I want in on that. 
Building a webapi for a mongodb
WebAPI 2.0, EF6, Data Models &amp; Service Architecture.
Middleware b2b data integration for about 4 years now. Started out web dev and did it for over 10 years. Wanted to try something new...
I use it for work in doing insurance and building the website. At home, I've been learning Xamarin to make Android apps in C# and F#. (C# has better support for it and is easier to use for that task, btw)
I've used it for Unity2D. However, more recently, I've been playing with Visual Studio and building Windows applications. I've been doing the same with Java and WindowsBuilder in Eclipse, but so far I've found Visual Studio and C# to be a lot friendlier to use.
Line Of Business applications, data services and an E-Commerce Front end. Very exciting stuff! 
That's really the route I've been considering/working towards. I've had some success using wolframalpha's API, but a requirement for our software is that it not require an internet connection, so that is pretty much moot.
School. After this week I hope I never have to write code again.
You can probably leave off the `[Required]` attribute on `Bar` as the other person said, but also omit the setter off of `Bar`. [Required] public string Foo { get; set; } public string Bar =&gt; Calculate(Foo); public string Calculate(string foo) { return foo.ToUpper(); } In this context, `=&gt;` is equivalent to `get{return ...}`
Nah, the correct answer is: you want to have the last word. Sure, you can have it. Bye!
Git as it has many third-party integrations that will be useful later on!
making cookies
I'm prefer C# for private use and Desktop applications but I'm working as Java developer.
Sounds shit https://www.ispyconnect.com/userguide-motion-detection.aspx
I work at a company that does software and hardware for the medical sector. We would use C# for any non legacy applications we're developing for use in clinics. This includes image processing (although some is done using HLSL as pixel shaders), user interfaces, services for data commitment, security and authentication services, and interfacing with hardware (with firmware in the hardware wrote in C).
Thanks!
I've used it professionally to solve fiddly problems in my business to create a set of tools to solve a particular problem or translate output/input from different systems. Works wonders for saving money by bringing these solutions in house rather than hiring contractors or consultants Also used it to automate about 90% of my Ops tasks (previously working on archaic batch schedules which required alot of manual intervention when things went wrong. Remarkable what you can achieve with proper error codes and logic)
Epicor ERP developer. I develop a bunch of customizations to the system and they are all written in C#/LINQ. 
No no, it was looking for shit
At work - building phone and web systems, data transfer reports and various bits of integration to and from our clients. At home - mainly games in Unity, extensions for Unity, and any little utility programs I need
Your problems: 1. You should abstract the responses to either an interface or abstract class and then have your response types implement the abstraction. Then you can change your GetResponse method to return the abstraction which would remove the issue with the first point. public static IResponse GetResponse(string RequestType); 2. The creation of the response models should be (again) abstracted out using an established design pattern. A factory seems like an ideal solution for this.
amazing! i want to build one now. 
Ive managed to create some ML models that can predict direction and % movements with some success. havent traded on them but i will say that i did not use any technical indicators and had to make a ton of features and use other data points as well.
Just curious: what made you switch from Monogame to Unity? I'm a bit afraid of (well, not afraid but afraid of being annoyed by) Unity's designer and was doing XNA a lot back in 2010 and was thinking about doing some gamedev for fun again.
Frankly because making your own 3d engine(even thought unity is much much more than just a method of doing 3d) is a pain in the ass. I used to be really anal and thought anyone whom doesn't make their own engines is a noob. God how naive was i. I can make a game in a few hours what would've taken me months doing it all myself. Using a full fledged engine like unity means you focus almost entirely on just creating and refining rather than reinventing the wheel over and over again for every small thing you want to do. 
Please correct if I'm wrong here but is the biggest difference not the fact that If (condition == true) { //Do stuff 1 } Else if (condition2 == true) { //Do stuff 2 } Will only ever excute 'Do stuff 1' OR 'Do stuff 2' as the else if only executes if the first if condition fails. However If (condition == true) { //Do stuff 1 } if (condition2 == true) { //Do stuff 2 } can excute 'Do stuff 1' AND 'Do stuff 2'. A real world of example of this might be an enum with flags (there are loads more but that's what made me think of this) Am I wrong?
sounds like we're in the same boat. im surrounded by clueless people who get paid alot more than me so i can make their lives easier.
For the abstractions in part 1 I'd probably organize it like the following: https://dotnetfiddle.net/uLay1c This way you're coding to an interface so anything that implements that interface can potentially be returned. I included an abstract base class as both of your concrete models shared common ground (the sort by property in this case) but you could just as easily have the responses implement the interface directly. For part 2, it looks like the switch was just moved to your factory class. Depending on how big this code will get and how extensible you need it to be you're probably ok with the switch statement. Another option is to have some sort of lookup table that maps the response descriptions ("One", "Two", etc) to a type in the factory. The factory then would simply grab the type for that description and instantiate it for the return value. You'd have to worry about populating that lookup though which might be more than you really want. The nice thing about the lookup table is you could populate it through reflection or a database or whatever for more flexibility.
I'm not arguing there is zero benefit to it, but in just about any codebase I see that's started up in the last few years, there's just endless await/async even for the most mundane of methods.
The .NET Framework 4.7 is supported on the following Windows versions: * Windows 10 Creators Update (included in-box) * Windows 10 Anniversary Update * Windows 8.1 * Windows 7 SP1 The .NET Framework 4.7 is supported on the following Windows Server versions: * Windows Server 2016 * Windows Server 2012 R2 * Windows Server 2012 * Windows Server 2008 R2 SP1
Nice approach, thanks for the feedback!
Seems like you're responding to inappropriate overuse of async/await with an inappropriate general hatred of async/await. Can you give an example of a method that does network communication or storage I/O that should not use async/await? I'm genuinely curious. I strongly agree that not all methods should be async/await. CPU-bound operations (other than maybe UI-level event handlers) should generally not use async/await. I/O-bound operations typically benefit from async/await. It makes it much easier to do more work with fewer threads. One example WCF service I made was able to handle the same number of requests per second with 20 threads instead of the 118 threads that were spun up without async/await. To get similar results using Event-Based Asynchronous Programming or the older Asynchronous Programming Model could require ~20 lines of boilerplate code compared to just adding `await` to the call.
lol me too. I was like "Oh cool they are developing the book in the open, that's neat"
lol, this is what happens you aren't smart enough to get a job in a real tech company
That tells me there is a dependency inversion problem, where you've got otherwise pure business logic dependent on external services. That is an easy way for async to infect other code. On the plus side, it is a heck of a lot easier to see the dependency issues and fix them since they are all labeled with `async`.
&gt; Web development is highly marketed and the vast majority of job offers I hear about reference Angular lately. And I'm talking about jobs specifically for a .Net dev. It's not uncommon to have an Angular / React frontend running with a C# WebAPI backend.
Beginner myself, my interpretation is that coding to the interface will increase your flexibility. Sometimes you will need a list, sometimes an array. Since both inherit from IEnumerable&lt;T&gt; the contract doesn't car which ends up being used, whereas if you received an array instead of innumerable you end up with the problem of not being able to extend it It's more akin to receiving the schematics for a car but being able to make it a Honda List &lt;T&gt; or a Ford Array. Since not all data streams are compatible breaking it down to the more basic components allow you to lift restrictions on the incoming data versus saying I need exactly 5 instances of Toyota because the array isn't extensible. You can instead say "I need cars." And determine what to do with those cars after receiving them.
Is template 10 currently only supported in vs 2015? I am having a hard time finding it in the extension manager in vs 2017 pro.
I think you're noodling too hard on the idea. Generics and interfaces are two different concepts. If we take Toyota as the metaphor: the object is Radio, the interface is IRadio. You write a specification that an aftermarket parts manufacturer needs to conform to in order to interface with the car. There are things like volume controls, channel change, media change, etc - these are all things you would have to implement in your connection through the wire harness. If you didn't you would break the interface and bad things would happen. On Generics, there's much much more to them than just List&lt;T&gt; and IEnumerable&lt;T&gt;. It's a way of handling multi inheritance while still requiring single class inheritance. Specifically to your question, there's a lot of IEnumberable implementations that don't have an Add&lt;T&gt;() method, Remove&lt;T&gt;() method, etc - collections and lists are very different when rubber meets road. If you've ever worked with IQueryable&lt;T&gt; and it's downstream interfaces, (where you can have Expression &lt;Func&lt;T,bool&gt;&gt; ) for delayed executions, or when you talk about async behavior, etc, there's a lot more to it than basic examples you see all over the net. For me ( as an architect) , I always take a specific approach. If I return data that should not be modified, it's in an array. if I expect the data to be modified, it's List&lt;T&gt;. Make sense? I'm happy to discuss more if you'd like :)
Very cool that they have an issues label dedicated to first time contributors. Great way to lower the barrier of entry. 
I'm working on my Dungeons and Dragons 5e tracker. it's a winforms application made for DM's that allows them to make combat a lot easier. With this software a DM doesn't have to sort initiative order anymore and a lot of features like death saves/conditions are present, too. The code quality is pretty bad since I just wrote it quicjly for friends, but I'm planning on rewriting it with WPF or at least better with Winforms. Support for mac/linux has also been requested so I might have to make a web version. If anyone wants to contribute, check out the open issues. New feature requests are also welcome! [Github repo here](https://www.github.com/sander1095/DnDCombatTracker) 
I should read things better...
You could also add a feature request on the math.net github repo, maybe even with a pull request of your implementation if you build something. 
After extensive searching and testing it turns out the closing form tag on my my master page was missing it's &gt;! 
Ah, the "easy" tag. Reminds me my very first week in my very first job out of university. "You'll be working on this bespoke till system. It crashes whenever they have more than 100 credit card transactions in a day. It should be easy to fix - there'll be an array somewhere with a size of 100. Just increase it to 5000." Turned out, the third-party messaging system we were using was crashing when we sent messages over a certain size, and that size happened to correspond to roughly 100 credit card transactions. I had to change the client code to split the messages up into smaller chunks, then change the server to reassemble the chunks. Took me a couple of weeks. Not quite the "easy" problem it was supposed to be! Of course that's not a common thing to happen - but it does happen occasionally, because you can't know if something really is easy until you look into it. Great article though, I wish I had more time to look into participating!
I've only been working in C# for about half a year, and what I'm doing isn't that big. As a lerning exercise, I'm working on an IRC bot. Firstly to learn a bit about IRC protocols, secondly to learn to work with APIs. At the moment it greets people that talk to it, acts as a magic eightball, can (sort of) quote De Bello Gallico and tell you what host a shortened bitly link goes to. The plan is to do the same for links shortened by Google, and to add some sort of system to add loot we got in a DnD game to a file. Ideally I'd also add a system so we know who knows what, and what those things do.
https://github.com/dotnet/roslyn/wiki/Scripting-API-Samples
Here is another I've used a few times. http://www.csscript.net/index.html
Certainly not. All things that are IEnumerable&lt;T&gt; have some underlying concrete type, for instance List&lt;T&gt;.
Really? I haven't seen that at all. Is that at your work, or from 3rd-party code on GitHub or somewhere? 
Go and Node.Js ... Does this have any relation to C#?
You can reference the compiler assemblies, and just compile the code. Below is an example. Note that this can be very dangerous, as people can put arbitrary code in their script that is malicious, deleting files, reading sensitive data and sending it somewhere, etc. Preventing such malicious scripting is a very difficult problem. It helps to make the compiled code implement a given interface or descend from a base class, otherwise you won't know what to call. CSharpCodeProvider codeProvider = new CSharpCodeProvider(new Dictionary&lt;string, string&gt;() { { "CompilerVersion", "v3.5" } }); //codeProvider. ICodeCompiler icc = codeProvider.CreateCompiler(); CompilerParameters parameters = new CompilerParameters(); parameters.GenerateExecutable = false; parameters.GenerateInMemory = true; parameters.CompilerOptions = string.Format("/lib:\"{0}\"", Application.StartupPath); parameters.ReferencedAssemblies.Add("System.dll"); parameters.ReferencedAssemblies.Add("System.Core.dll"); CompilerResults results = icc.CompileAssemblyFromSource(parameters, Source); DLL.CreateInstance(t.FullName, false, BindingFlags.Default, null, new object[] { engine }, null, null);
&gt; Support for C# 7 and VB 15, including ValueTuple Mic drop
Yup. Chances are the code will be better written and more optimized than you could anyways. Will it be the best code over written? No. But it's much easier to optimize something that already exists and is heavily documented then do re do it all over. All that matters in the end is the game. The player will choose a more fun game coded in frigging scratch if they enjoy it more than your gsme.. Even if you've engine took you 5 generations to program and is suited exactly to your game
Can you include the code you're using to send the SMTP email? Just taking a guess, if you're using the API in `System.Net.Mail`, have you set the [`MailMessage.IsBodyHtml` property](https://msdn.microsoft.com/en-us/library/system.net.mail.mailmessage.isbodyhtml.aspx) to `true`?
Nice debugging my man. Remember to not document the issue so the next junior has the same problem
not strictly true, you can do this too ( and it's great for long large sets where you're filtering): ` private IEnumerable&lt;int&gt; GetValues() { for (int index = 1; index &lt; 20; index++) yield return index; } `
(not OP) this is valid syntax: ` private IEnumerable&lt;int&gt; GetValues() { for (int index = 1; index &lt; 20; index++) yield return index; } `
That also gets compiled into a class implementing `IEnumerable&lt;T&gt;`.
Oh cool. I was wondering if that project was ever going to be restarted. It was part of the Roslyn preview, but didn't make the 1.0 release.
BTW, this is pre-rosylyn code. This will likely still work, but you might want to switch to roslyn. The newer code should be fairly similar. 
More of a reference/index than a development guide, but seems useful. Definitely worth a bookmark.
Interfaces are designed to allow reusability without binding your methods to a specific implementation. Imagine if you were trying to get a license to drive vehicles. Do you want a license for `IVehicle` or do you want a license to drive only one implementation of a vehicle? Eg. utilizing the `ICollection&lt;T&gt;` interface can ensure that you can switch between a `List&lt;T&gt;`, `HashSet&lt;T&gt;`, `YouReallyLikeCookiesCollection&lt;T&gt;`, and whatever else may arise without having to change extensive portions of your code base. &gt; But MS built the Generic Collection framework using these interfaces, and now best practice is to use the actual interfaces and not the Collection itself. The interface doesn't have any logic and can't be initialized by itself. So at some point you have to initialize a collection that implements that shiny interface you are attempting to use. &gt; Will List&lt;T&gt; etc become obsolete? Unlikely. There will be more specialized collections but the general purpose List is very performant for most applications. &gt; Are Collections actually used much in industry? Extensively. There isn't any point in reinventing the wheel.
Subtract vert from your objects y coordinate.
Capture "vert" from the user and apply it to however you're drawing on the screen. We need more information and at least a basic effort to help.
Removed: Rule 4. Unfortunately, what you have available to us is too vague. Either post more information, and ideally code of your attempts.
Plenty of resources online for scripting Unity and moving GameObjects. For example: http://answers.unity3d.com/questions/505385/how-do-i-move-an-object-in-c.html
Yeah I didn't realize that I was doing that until I just looked at the code this morning. Removed the string overload on each and it worked as needed.Thank you so much for your help. 
agreed - IL generation does all kinds of crazy under the hood! In case anyone is interested and lurking, [here's] (http://csharpindepth.com/Articles/Chapter6/IteratorBlockImplementation.aspx?printable=true) what we're talking about. 
A hard copy of ".NET Framework Development Guide"? I am very familiar with ".NET Framework Design Guidelines", but I haven't heard of this other book.
Ah, I wonder if you need the PowerShell Tools installed... it looks like you can install it via NuGet as well... as /u/Jt8786 suggested: https://www.nuget.org/packages/System.Management.Automation
GET http://localhost:8000/test/person?_max_results=1&amp;_index_start=1&amp;_order_by=ORDER%20BY%20created%20DESC I'm going to assume this is very likely to suffer from SQL injection. I appreciate that your database would be internal access only, but you should still seriously consider some security practices, otherwise someone could easily drop your databases!
The database client class I'm using will pass the clause through sanitization logic before using it which will safeguard it from injection. Cheers!
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [jchristn/DatabaseWrapper/.../**DatabaseClient.cs** (master → 7ef4543)](https://github.com/jchristn/DatabaseWrapper/blob/7ef4543a4233940985b95b04e8a00377140d00dd/DatabaseWrapper/DatabaseClient.cs) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dh3a5h4.)^.
Yes - thank you, I just noticed that too. Just changed that! Thanks for pointing it out. Also if there are other things that I should be checking please let me know!
It works, thankyou so much, ive been trying to fix that for an hour
They're also creating new stuff here: https://www.microsoft.com/net/architecture It's not complete yet but looks helpful so far.
Add nuget package: https://www.nuget.org/packages/Microsoft.PowerShell.5.ReferenceAssemblies/ add these: using System.Management.Automation; using System.Collections.ObjectModel; And then run something like this: Collection&lt;PSObject&gt; testMailNickName = PowerShell.Create() .AddCommand("Get-ADUser") .AddParameter("Filter", "*") .AddParameter("ResultSetSize", "1") .AddParameter("Properties", "mailNickName") .AddParameter("Server", domain) .Invoke(); 
I think they want to make it very clear that c#7 tuples are able to be used with 4.7 and the developer pack for VS2015. Being able to return multiple objects from a method without needing to use stupid fluff wrappers is a huge deal.
I don't disagree. It's a narrow use case where you have a simple system that just needs to access a database over HTTP, and of course on an internal/private network (until there's some authentication layer). Cheers @LibertyIsNotFree!
Lawl, I literally said "everything" out loud when I read the title question
If it's purpose it to string together throw away apps without needing any middleware at all, perhaps some quick and dirty report displays that are bonded with some javascript &amp; json charting tools then I can definitely support this.
"Hate" 
[removed]
Create a class like SharedMovies that exposes a public **static** property of ObservableCollection&lt;Movie&gt; then use LINQ to write filters against it with Where() and what have you. If you want search that's a little fancier look into the levenshtein distance or jaro winkler distance algorithms for doing actual text search and not simple matching.
Maybe he just ran out of coffee
yep yep - said the same thing in a different comment. All the IL / compiler tricks are interesting to pull back the hood some - had to learn quite a bit of the guts with all the roslyn code we use at work. I was ( in my head, but neglected to type it up) drawing a distinct difference between work we have to do, and work that the compiler does for us. Sorry for the confusion :)
I'm working on a Roslyn based API documentation builder. Yes, I know there is NDoc, Sandcastle, Doxygen et. al., but instead of building a folder of generated HTML content or compiled help files, it will interface with a data source and output the comment metadata in a well defined structure. In part 2, there will be a web API that will serve the documentation to an angular app (or some type of SPA) that can be browsed to view the class library documentation. 
There's quite a bit of unsafe code in the standard .NET classes - Strings, StringBuilders etc. It's usually done when important to be fast. Hopefully when this stuff is written the trade off isn't making it faster by making it less safe - it's between making it faster, but then having to vary the code is correct by testing, visual inspection etc. 
Or just [download all the source](https://referencesource.microsoft.com/download.html) to your machine and take advantage of Visual Studio's navigation features/intellisense.
It's common to inject into the controller a single object, say, `IQueryRunner` which has an execute method on it: Execute TResult(TCriteria criteria) {} You'd obviously only want to implement this once so it would be generic. Using the TCritera and the TResult, it locates a query handler which implements IQuery&lt;ICriteria,IResult). The handler has a method which is called to execute the query. The QueryRunner usually locates the correct query by requesting it from the DOI container. The advantage is you don't have to add many new constructor parameters to your controller. One disadvantage is that you either have to write tests ( possibly integration tests ), to make sure that all the queries can be located - otherwise you first find out there's a problem at run time. It can also be hard to see where a particular query is located. The Mediatr package makes this easier. I don't really see any practical difference between this and the "service locator" pattern, which is considered an anti-pattern by a lot of people (e.g. Mark Seaman). I think he'd be happer if you did inject a separate query handler into the controller for each query - this would give erorrs much earier - e.g. if you've forgotten to create a query, the controller can't be constructed. I'm not sure either way. I've used the Mediatr technique and home rolled ones like it for a while and find that it's ok.
Nice work! Are you familiar with [OData, from microsoft](https://docs.microsoft.com/en-us/aspnet/web-api/overview/odata-support-in-aspnet-web-api/odata-v4/create-an-odata-v4-endpoint)? It looks similar. It allows you to issue queries like GET http://some-url/People?$filter=FirstName eq 'Scott' And get back a JSON or XML response of the entities.
Thank you @Blazeix! Yes indeed :) I was wanting something standalone that runs as a lightweight independent process.
I don't know much about this book or specific unity versions but there's a REALLY good Udemy series on Unity. I watched half of it so far just out of curiosity without even following along on my computer. Very in depth and you make several different styles of games from text based, all the way up to 3D first person. https://www.udemy.com/unitycourse/
This is a REALLY bad idea. I cannot stress enough how **BAD** this is. This is the type of command that allows a SQL injection attack. If I were to run your "search" with the following command: ' EXEC sp_msforeachtable 'ALTER TABLE ? NOCHECK CONSTRAINT all' EXEC sp_msforeachtable 'DROP TABLE ?' -- Then I would drop all of the tables in your database. I could also create a query to dump all passwords(please don't store plain text passwords) to the search results, or do many other nefarious things. Please consider using an ORM like EntityFramework or at least parameterizing your queries. [SQL Injection](https://www.youtube.com/watch?v=_jKylhJtPmI) [Parameterized queries](https://www.mssqltips.com/sqlservertip/2981/using-parameters-for-sql-server-queries-and-stored-procedures/) edit: typo on Constraint
I think it's been around a while now. It's super easy to run scripts from code too.
I've heard really good things about CS-Script too.
I kind of assumed when I saw '%@parameterName%' in the command text, the next line (which wasn't provided in OP) would have been the parameter definition which wasn't working? Is there any way the OP text as written could have allowed SQL injection? If the query text was $"... AND '%{variableName}%'" then I could easily see the SQL injection risk. Even if this particular example by OP isn't prone to injection, there's no harm in raising the awareness either way :)
It's served me well so far. Though figuring out how to ensure that it has all of the needed references was a pain in the ass. https://github.com/docevaad/Chain/blob/master/Tortuga.Chain/Tortuga.Chain.CompiledMaterializers.source/shared/CompiledMaterializers.cs See CreateBuilder and AugmentScriptEvaluator for how I use it.
&gt; OData Shutters... We tried this in 2014 (so, some time ago) and the limitations were IMMENSE... At the time at least, it was far more trouble than it was worth as we ended up with the (dumb as shit) OData crap plus the stuff we actually needed. Come deployment day, very little OData calls were left but the bastard was still in there...
Unity has already started and completed an entire major version cycle (5.x) since that book was written. I'd get a newer book or do an online course.
I agree getting the using statement working would be great as well! It is good that they are collecting data on which rude edits are being made, I'm sure the data is quite skewed since we learn which edits are not allowed and avoid doing them while using E&amp;C.
Thank you! We do our best!
Okay. So, can you tell me where I did that? Or is it automatically? And, if I create another API, let's say it's called "ToTest", how would I get that to response?
oh! Ok I see! That makes sense ^^^in ^^^some ^^^way Thanks for your answer!
To add: If I make another controller "DogController", could I call this controller like this ".../api/Dog" even if it's in the same solution? Or does it only allow one controller?
Yes. With api/Dog and api/Contact because they are independent objects
Great! Thanks for you help! :) 
Oh, one last question: If I have 2 functions in the ContactController, say "FunctionOne" and "FunctionTwo". Do I call them like ".../api/Contact/FunctionOne" and ".../api/Contact/FunctionTwo"?
Hi ForeGoreAlGore, Have you tried the tutorial's on https://unity3d.com/learn/tutorials? Made with Unity 5.x and c#, also fun to follow!
Or [Patterns and practices](https://msdn.microsoft.com/en-us/library/ff921345.aspx) which has a lot of good (and some old but good in its day) guidance.
Does Math.Net Numerics have what you need? 
Do you have SQL profiler installed? It's really great to use so you can see exactly what is being passed to the SQL server.
Nope, first time I've ever used sql, kinda rushing the topic last minute and didn't have a lot of time to play
it usually installs by default settings on sql express I believe, if you get any issues between the application and the SQl server you can use it to see the query as it's passed to the server. You can then run it in the SQL server and see the error message the SQL server gives you which can be more informative than the Visual studio error messages. Just worth knowing if you ever come across a similar issue, it makes troubleshooting the problem a lot easier.
Ahhh nice, thanks, I'll use that next time
NP, If you want someone to go through some of what you're doing before you submit it and provide some suggestions PM me I don't mind looking though, I've made lots of c# ASP/winforms/uwp applications working with SQL and it's my favourite part of development :)
First thing that springs to my mind is that the filter should probably exclude the FluentAssertions libraries in the same way it excludes the xUnit ones - otherwise OpenCover might try searching for the source for FluentAssertions. Just a thought anyway.
How do I tell VS where the source is so navigate to class finds it?
of course
Ohh, sorry. I will pay more attention next time :(
Message status only changes for that user when they mark it as read? Is it important to only have one copy of the message in the system? Maybe an aggregate for user, aggregate for message, and then a VO in the user with the message id and read status. Depending on your scale, I might consider physically delivering a message to each user instead. 
I would say go for it if you own it. Just know that it is outdated ... Which you already know!. You have two options. Download an older version and work with that, or download the current version and research when something doesn't work or is different. You need to gain knowledge somehow, this is as good of a place as any (for example I wanted to learn JavaScript for Unity so I picked up a really old OOP JavaScript book from the library. It was more than enough to get started. Now I use C# exclusively because it is more powerful but it was a good starting point).
I would add a UserMessage because regardless of how the message is distributed there is an action with associated state for each user-message combination. 
&gt;Message status only changes for that user when they mark it as read? Yes. &gt;Is it important to only have one copy of the message in the system? Yes. &gt;Maybe an aggregate for user, aggregate for message, and then a VO in the user with the message id and read status I'm thinking so ... But I can not see how to represent AggregateRoot, User and Message And how they communicate. To make things simple do not use EventSoursing I put two lines of code |one option. class classNotifications : IAggregate { private List&lt;classMessageEntity&gt; lstMessage = new List&lt;classMessageEntity&gt;(); public classNotifications() public void AddMesage(classMessageEntity paramMessage) { public void MarkAsMessageToReadFromUsername(string paramMessageId, string paramUserName) } |or two options. class classMessageEntity : IEntity { private Guid mID; private string mCreate; private string mMessage; private bool mRead; private string mUserName; public classMessageEntity(Guid paramID, string paramCreate, string paramMessage, bool paramRead, string paramUserName) public string Created { get { return this.mCreate; } } public string Message { get { return this.mMessage; } } public Guid Id { get { return this.mID; } } public bool Read { get { return this.mRead; } } public string UserName { get { return this.mUserName; } } public static classMessageEntity Create(string paramMessage, string paramUserName) internal void MarkAsRead() } Are proofs 
"Sees the message instantly" is a misdirect and 4 and 5 look identical unless 5 indicates that you can send a message without being logged onto the system. 4 and 5 discuss "connect" and "logged into", you need to establish if those mean the same thing. "press a button" is a misdirect. The user may press a button now, but that's irrelevant. The user can send a message. And as I replied to ExpatFriets below, each user can mark a message as read, so you need a related entity representing UserMessage (Is this message read by this user?). How that entity is implemented depends on various things. 
But UserMessage (Ok...) is An AggregateRoot?
Little Bobby Tables strikes again.
Once you start writing the APIs, look into the Swashbuckle/Swagger Nuget packages or something similar. I was shown these tools and they have changed my life. 
NSwag is also good.
https://www.packtpub.com/packt/offers/free-learning?reg=1 Unity 5.X cookbook free today
This is as bad as it gets, super vulnerable to sql injection. I would recommend using EF with parameters / raw sql: using (var context = new NorthwindDBEntities()) { context.Database.ExecuteSqlCommand(@" UPDATE dbo.Customers SET Name = 'Test' WHERE Id = @id ", new SqlParameter("id", 1)); } That would give you an update... and to bind SQL to objects automagically: DbRawSqlQuery&lt;CustomerInfo&gt;data=db.Database.SqlQuery&lt;CustomerInfo&gt; ("select customerid,companyname,contactname,country from customers where country=@p0", "USA"); where the obj is: public class CustomerInfo { public string CustomerID { get; set; } public string CompanyName { get; set; } public string ContactName { get; set; } public string Country { get; set; } } read here for more info, but I find it saves me hours over writing procedures all over the shop: http://www.entityframeworktutorial.net/EntityFramework4.3/raw-sql-query-in-entity-framework.aspx
Another vote for NSwag. Very easy to use.
Removed: Rule 4. Make an attempt and get something working. Don't worry about efficiency at first. Unless you're working with many megabytes of data and need it to be done ridiculously fast, likely whatever you come up with will be fairly efficient. Just try breaking the words up by spaces, removing punctuation, then looping from `1..Count-1` grabbing the `Nth-1` and `Nth` word and adding the pair of them to some collection.
So.... your structure is a little weird. If I was using this library in production code, would expect to be able to do something like var dnsArray = new MXLookup("google.com", "8.8.8.8"); where the MXLookup class is doing everything behind the scenes and returning an array of results. Each of those results would probably be something like Tuple&lt;int, string&gt; to hold Preference and Hostname (could be a custom object type if there are more properties you want to return for each result). Also, there is no need to invent an Error class. I would create [custom Exception classes](https://msdn.microsoft.com/en-us/library/87cdya3t.aspx) and actually throw these Exceptions, rather than silently failing in your Lookup() method and forcing more lines of code to check the errors after the fact. Hope that helps!
This helps hugely and thank you so much for spending time to take a look at what I've done. Still along way to go but I suppose It could of been worse. 
It's either could **HAVE** or could**'VE**, but never could **OF**. See [Grammar Errors](http://www.grammarerrors.com/grammar/could-of-would-of-should-of/) for more information.
This sounds great it's just I live in the middle of nowhere (it's a 20min car drive for milk) so I doubt this will be as local as I'm hoping.
Every days a school day
Since you didn't include the link ;) https://xkcd.com/327/
Avoid constructors that do work even if its not async. I've got one bit of code that I maintain where all the work is done from the constructor. It can be really strange to debug; when the debugger is attached sometimes it enters the code more than once. It looks kind of odd to have code that seem to do nothing with an object it creates: new DoSomeWork("work parameter"); 
Keep the hope up, but I have to be honest with you, it'll be a bit hard. If you had picked other language/platform (Node, Rails, Python), it might be easier to have access to remote work. You'll tend to find C# used more in larger companies (enterprise). These companies are less likely to allow for remote work - they tend to want their people on premises. If moving is not an option, and you don't live close to a large city where there is a higher likelihood to find such companies, your quest to find C# work might not be as easy. Middle of nowhere is more amenable to contract type of work, and for junior positions that is something easier to find on other platforms (see Upwork, Freelancer, etc). Either way, best of luck! 
C# is one skill, but having experiences with the various frameworks is where you will really start ticking off enough boxes to get through the door at most companies. * MVC * WebAPI/REST * SOAP/WCF * EF &amp; Sql Also getting familiarity with topics like * Unit testing (nunit, mstest, etc) * Dependency injection/Inversion of control * Design patterns (Read the Gang of Four book) 
Thank you for your in-depth response. It makes a lot of sense especially learning about other technologies which utilise C#. Although not at the forefront of my mind, I do feel pretty confident with web languages like JavaScript, HTML, CSS and I have recently touched on ASP.NET using MVC 5 it's just the fundamentals are hard to stick in if your not doing this on a daily basis. Microsoft Cert for C# seems interesting to work towards mainly due to its learning structure. I'm already MCSA in Server 2012 and kind of wishing I invested that money into this :-/ Thanks again! 
&gt; Avoid constructors that do work You heard it here first, folks. Don't write code that works because else you lose job security!
Hey there. That would be much appreciated if you get the chance. I'm in West Wales...as far west as you can go but we're considering a move to central England in the next year or so. 
Here's hoping! Thank You!
I would update your MXLookup project to use common C# naming conventions if you're using it as part of your resume. I wouldn't not-hire you because of it, but it's a simple change that'll have a big bump on first-impressions. https://msdn.microsoft.com/en-us/library/ms229043(v=vs.110).aspx Some people don't care or use their own hybrid convention on their team, but for the sake of interviewing, you probably want to stick to the official convention.
It'll be fine to get you started. Any gaps can then be filled by Unit's tutorials and API documentation.
I wasn't aware of this. So pretty much everything should be Pascal apart from a parameter? I can understand I for interface but this seems strange with readability in mind. I'm so used to doing underscores for private fields, but if it's going to cause problems with me getting a job, then it looks like I'm going to need to kick this habit.
Try var something = new IEnumerable&lt;whatever&gt;(); and see if that compiles. 
One of the primary benefits of interfaces is being able to mock objects and unit test easily (which will greatly increase your coding velocity btw). Most of these guys here that don't really understand interfaces aren't doing unit testing. Go master UT, and you'll kill two birds with one stone.
Or if you're unit testing. 
I used to do a ton of hiring at a major US financial firm. If you weren't totally useless, I'd probably give you a shot, and if you were next to totally useless, but I liked you and thought you were ambitious and were going to work hard, I'd hire you then too. Just make sure that if you're going to an interview you're not wasting the interviewers time (they probably have other stuff they'd rather be doing). Make sure you can answer basic questions about OOP and things like that. Also, having a git repo is miles ahead of what most junior guys come in with. That's an excellent starting point. 
I do some basic/intermediate C# in Windows Form Applications and I also want to lean Mobile Development, also looking to learn Java this Summer to help with that, as well as to "add" to C#. I do have Xamarin installed and such, I tried using some of the "getting Started" videos, but they're not the best. Do you any material you could point me in the direction of?
Day's
While I hadn't considered unit testing as a reason to code to the interface it makes sense why developing my tests dont require hoops. Thanks!
My pleasure, and word from a guy that's been there - GET THAT UT DOWN! You'll have a major head up against the guys that were too lazy to take the time to really master it. A lot of guys think of unit testing as an afterthought that just tacks on work to their projects, but if you're doing it right, UT should not only make your code more robust, but should actually contract the amount of time it takes to develop something. 
As long as you understand the basic programming concepts, loops, classes, logic etc. You're qualified for a junior position in my opinion. Have more confidence in yourself. Go on as many interviews as you can. Don't be afraid of being turned down. Half of the battle is just mastering the interview process.
I head up a c# team in Lancaster in the north west and judging from what you've said I know (not just near here) this would be more than enough for a foot in the door at some places. Hell if you're ever looking around Lancaster give me a shout and I'll see what we can do
daze
I'm not sure if this will help ypu but this book helped me alot. It won't solve your question (for that you need to understand how web frameworks and how an http request is processed) but will help to give you a better picture. [here](https://pages.apigee.com/rs/apigee/images/api-design-ebook-2012-03.pdf)
In addition methods should be named with verbs and classes with nouns. A class called Send is a bad practice. Also avoid variable names such as "obj" if you have a Validate object (which really should be Validator) consider naming the variable with the same name (i.e. validator) rather than validatorObj.
Not sure if this helps, but I was in the same position. I was an IT and telecommunications specialist and network guy for a long time. Fell in love with development and went back to school. Now I've been in the industry for about 3 years and loving every minute. You can do it. Hang in there!
Hmm yeah...um...no, VS is good enough for me.
Ye, but I think it's better to present a professional picture first to not blow any opportunities. Personally I have no problems with it, but if I was looking to hire someone to work for me and my customers I might choose the guy who doesn't have a profile picture of himself on the toilet. :)
No mention of a community edition :( I really hoped there'd be one...
you're absolutely right! I wasn't clear on my response ( sorry!) - if you look at my other comments you'll see that I was delineating between work a developer had to make, and work that the compiler does for you. The yield return syntax is especially useful for late evaluation of a potentially expensive operation with large data sets. You can see in detail [here](http://csharpindepth.com/Articles/Chapter6/IteratorBlockImplementation.aspx?printable=true) - the compiler takes your non implementation and compiles it into a class that uses labels/ goto statements( something that I would never recommend for a team) and does the majority of the heavy lifting for you. Another simple example would be: ` private IEnumerable&lt;int&gt; GetValues() { yield return 1; yield return 2; yield return 3; } ` no concrete implementation required, almost like magic! We don't use it that often, but there's times when it's really useful. Cases where I have a million items going in, 100K going out and then I need to do an heavy IO involved additional transform or operation on the data ,etc. ( we're in the financial sector, swimming in data). It can give a nice performance boost over a linq query or a looping filter where your'e just thrashing the GC for no good reason. Cheers! 
Adding to this. Read/listen to the books or ebooks on clean code by uncle Bob (Robert Martin), they'll save you a lot of learning via peer review 
Anything by Patrick Dussud. * [Inside Garbage Collection](https://channel9.msdn.com/Shows/Going+Deep/E2E-Erik-Meijer-and-Patrick-Dussud-Inside-Garbage-Collection) * [Garbage Collection: Past, Present, and Future](https://channel9.msdn.com/Shows/Going+Deep/E2E-Erik-Meijer-and-Patrick-Dussud-Inside-Garbage-Collection) * [Managing Garbage Collection](https://channel9.msdn.com/Shows/Behind+The+Code/Patrick-Dussud-Managing-Garbage-Collection) 
With this attitude, you should be able to learn any language and fit into any team you want.
you can most likely find some on www.meetup.com in your city
I started with Python and moved into a position using C#. The biggest difference for me was learning about object-oriented programming, since Python (and I think PHP?) lend themselves to fairly procedural code. As a side note, design patterns won't mean a whole lot to you until you've gained some experience with OOP. One thing I'd add is that I think it's a fairly common convention for only private properties to start with an underscore - public would just start with a lowercase letter. Generally I think your code looks good. I think your IT background gives you an advantage - you seem more comfortable with networking and byte-level operations than about half of the developers I've seen. I think you've got the table-stakes requirement for technical skill, so the only things left to do are bring your resume around to a bunch of places and interview well.
You're right, I haven't seen code like that in a long time, I didn't even notice the @. It does look like he's using a parameter. 
This. SQL injection is scary but there's way to much FUD here. I have yet to see evidence that the OP's implemention is at risk.
http://mattwarren.org The blog isn't GC specific but some very very in depth articles about the GC going back several years.
Could you please suggest me a more up to date book, of similar kind? Thanks
There's an open source license, which is absolutely fine.
https://github.com/K1tson/MXLookup/blob/master/MX/MXRead.cs#L67 It isn't entirely obvious what the side effects of checkFlags() may be; specifically, I wouldn't have guessed from the method name that you're mutating the state of your custom public static Error class. That's a minor critique and items like this would be discussed in a friendly code review on a pull request from a feature branch. Looking over your library, I would give you an on-site interview. What is your current salary as a Sr. IT engineer? What are Jr. developer salaries like in your market?
I'd love to see that one in as well.
Check nuget, there might be this package. Other way: build and add reference on your main project to builded dll
Can raspberry pi run Ubuntu? 
Holy shit it is on nuget. Does nuget index like...every single github project or something? 
We know the relevant xkcd
With .net core not everyone has the choice of VS. I'll get it for sure.
Yeah, not trying to say they don't have OSS/Education options like always. Community licenses are great for newbies looking to pick things up, though, and there's really nothing for them here.
Assuming that you are using Visual Studio. RedditSharp is a project! You can clone it or just download it. If you download it remember to right click on the zip file and select Properties - Unblock, and then unzip it otherwise Visual Studio will complain... Then you open your solution, which has one (more) project, and right click on the solution name. Select Add Existing project and browse to the RedditSharp directory and select the project file. You then have to add a reference to this project in your project and a using statement. Look at the TestRedditSharp project. Now when you compile your project the RedditSharp project will also be compiled and included in your output directory. Hope this helps! 
You are right – most developers don't worry about the impact of GC. But that said, most developers are working on business application (forms, asp.net, reporting, etc). Not even large scale business applications have issue with GC. Games, algorithmic trading and some other "real-time" applications on the other hand need to care as the pause time and frequency might impact the user experience in a game or decisions in trading. In general people in those fields try not to allocate too many objects and are aware of the memory consumption (pass one big object by ref mostly). Btw. there are some new features coming in the next [C# version (7.2)](https://medium.com/@jakubgarfield/c-7-0-and-beyond-with-mads-torgersen-36c44a047024) that will give you better low-level performance with safety benefits of not using pointers directly.
Next thing you know, they're taking away our semicolons 
Now, I can't directly answer your question, but imho it's useful in general to know how the GC behaves, even if it's just a rough outline. This kind of 'background knowledge' tends to shape my way of coding, even if just by small tendencies, and in regard to the GC, I think it's useful to be able to look at code and think "Ah, the GCs not going to like that very much.". Of course, if it really matters what the GC does in that specific case is a whole other question. So, tangentially to your question, in general, I would just classify "learning about the GC" as "broadening your knowledge" :)
So what sort of project do you make it in? How do you wire in the front end? It looks facinating.
Previously it caused a compilation error: bool b = false; int i = 5; int? n = b ? i : null; &gt; CS0173 Type of conditional expression cannot be determined because there is no implicit conversion between 'int' and '&lt;null&gt;' The fix is to explicitly cast to `Nullable&lt;int&gt;`: bool b = false; int i = 5; int? n = b ? i : (int?)null; It doesn't matter if you cast the `null` or the `i`.
Okay thank you :) 
Good advice, but I would add that this would in no way prevent me from hiring a junior, especially compared to someone with no code to review.
It's already a project! When you add it to the solution it will import the project as is. Don't create a new project for RedditSharp! After adding it do a compile so that Visual Studio will recognize the new project. To wire it in the front end you just add a reference to the RedditSharp project. Right click on References on you front end project and select add Reference and go to Project and select RedditSharp. Then it's "best" to add a Using statement to the file where you will use RedditSharp. See TestRedditSharp. Now you can use it...
There was a page with C# 7.1, 7.2, 8.0 roadmap on GitHub but I can't find it right now. Anyone know where it is?
Does anyone have a link to the proposal/design of the new pattern matching syntax thats coming? 
I'm in the middle of nowhere too (Herefordshire) but there's some good meet up groups around here, surprisingly, as /u/mycall said, check out meetup.com.
Firstly, thank you so much for spending time to go through my code. Lots of great feedback to take in and all of it makes perfect sense. I'm just throwing all these points (along with others mentioned) into a spreadsheet and will make the changes. 
&gt;C devs used to joke about C++'s performance in the mid-90's and now all major C compilers are written in C++. Kind of? Virtual function call overheads still exist even now. That's not really a consequence of compilation, just a language design choice. If a compiler produces efficient binaries from C source code, it doesn't really matter whether it's written in Assembly, C++ or even JavaScript.
https://github.com/dotnet/csharplang
Alright mate, I'm a few years younger than you and a was almost in the exact situation you're currently in. Like you, I also worked as an IT engineer after getting my bachelors in IT and about 2-3 years later realized that I wanted to be a developer. I wont bore you with the details, but long story short I was lucky enough that my company was looking for C# developers and I managed to make the switch internally without a severe pay cut. You've already received a ton of great info on coding styles, best practices and overall general advice. There are a couple of things I want to reiterate - being a good developer is not just about knowing how to code. You need to know the core, the theory, design patterns and frameworks - how it all ties in together. For me personally, that was the more difficult part to understand. [This might give you a quick overview if you're still interested in becoming a C# backend/web developer](http://enterwell.net/become-c-sharp-backend-developer/). [Sign up for Visual Studio dev essentials](https://www.visualstudio.com/dev-essentials/) for free software and 3 months of free access to Pluralsight. Once you're on Pluralsight, check out anything that interests you, I'd recommend the [C#](https://app.pluralsight.com/paths/skill/csharp) and [ASP.NET MVC 5](https://app.pluralsight.com/paths/skill/mvc5) paths. Be sure to check out the following books: * **Foundations of Programming** by Karl Seguin (language agnostic) * **Clean code** by Robert C. Martin (language agnostic) * Pro ASP Net MVC 5 by Adam Freeman Check out these links: * [What .NET Developers ought to know to start in 2017](http://www.hanselman.com/blog/WhatNETDevelopersOughtToKnowToStartIn2017.aspx) - ~~gloss through to get a basic understanding of the different components of the .NET ecosystem~~ alright, this might be a bit too technical for a junior, come back to this when you're willing to know the "inner workings" of .NET * [Getting Started with Entity Framework 6 Code First using MVC 5](https://docs.microsoft.com/en-us/aspnet/mvc/overview/getting-started/getting-started-with-ef-using-mvc/creating-an-entity-framework-data-model-for-an-asp-net-mvc-application) - use this to learn a bit about EntityFramework, although most of this will be covered in the pluralsight courses or the Pro ASP Net MVC 5 book. * [10 Good Practices for ASP.NET MVC Apps](http://www.codemag.com/article/1405071) - bookmark this and come back to it once you've done a few MVC tutorials I've seen someone say that you should look into MS certifications for .Net development. While that is solid advice, I wouldn't say it's necessary to throw down money to become a junior developer. The certifications are not all that simple and most of the time it's just C# or .NET specifics or details. I wouldn't worry about certifications until later - stick to the basics for know. Try to maintain your 10 - 12 hour/week routine. Whatever you do, **be consistent,** it's really important when you're still new to all of this. You've received a ton of info, so naturally you'll feel a bit overwhelmed. If I were you, I'd start with the easier stuff - refactor your existing code to adhere to the coding styles and guidelines. This will help you later on because you'll know how to do things the right way from the get-go. Then, start with the books or video tutorials, whichever you prefer. **I recommend you absolutely check out the books that I bolded out.** Follow the coding advice you've been given, read up on the theory, do a couple more personal projects and I guarantee you'll be able to find employment as a junior within the next 6-9 months. Good luck!
And even if one does do it, only optimize if the profiler says it is worth it in the overall use case.
Maybe it was this one - https://github.com/dotnet/csharplang/blob/master/Language-Version-History.md However if this is one of these two pages then they have been edited. The one I remember had C# 7.1, 7.2 and 8.0 in it
Great advise thank you! I'm lucky to already hold a Pluralsight account which is free with company I work for so I've put a lot time into the C# Fundamentals (Scott Allen is an amazing teacher!). I will definitely check out the books if they don't break the bank. 
Model 2 B and newer can. Can also run C# programs with Mono.
You're very welcome! Definitely pick up that book. I've worked at places that gave junior devs a copy when they start because it is such a great learning tool.
Huh? This has nothing to do with that? Im simply asking for help and tips for a new project -.-
I'm currently reading that. The book is pretty good and makes a lot of sense even though I never coded in Java. 
What is the benefit of using this compared to VS with R#?
Is there any way you can implement the WCF service [the manual way?](http://www.codemag.com/Article/0809101) The svcutil is good for people who are new to WCF and just want to get a service up and running ASAP, but dealing with the service reference is a pain in the ass, especially when working with version control systems. I've had great success manually setting up the WCF service. The downside is that you have to write your own data contracts but I am OK with this. In fact, at my work, we use svcutil and, since we weren't writing our own data contracts, our service reference gets bloated with "dc*" objects which are basically just duplicates of our already-existing DTOs.
I've tried one of the EAP versions because I was curious myself. I was able to develop my current WPF app. The XAML editor is just a xml editor (which is enough for me). I didn't try live reloading etc. 
 public int ProcessThisStuff(int input) { int ProcessThis(int ix) { return 42 + ix; } int ProcessThat(int x) { return 109 + x; } return ProcessThat((ProcessThis(input))); } This is so nasty. Just pure nastyness. &gt; public int FIXED_WEIGTH = 44; Constants should not be public. They should be private or internal. Or in a private/internal class. &gt; Don't use the var keyboard Keyword is probably meant. And absolutely use `var` when you just instantiate a new object on the right side of the expression. &gt; Don't overdo it with with static methods. Static methods are perfectly fine and reasonable, as long as they're pure. Static state is problematic. &gt; public MyUberType SuperProperty =&gt; return mySuperPropertyField; This will not compile. &gt; I use tabs for indentation because tabs are configurable while spaces aren't. This only makes sense if you have a clear formatting guidelines. Don't break multiple arguments to new lines, or if you do, also add a break before the first argument. Otherwise you cause unreadable code. This whole post seems rushed and not very well thought out.
nice! good code is language independent
Eh. Most of this is highly subjective bike-shedding, especially stuff about whitespace and brace style (I think you're wrong about both, but such is the stuff of programming religious wars). I think mandatory braces is good style for most stuff, though, and it's worth noting that tuples have some trade-offs when it comes to public APIs and binary compatibility that may not make them suitable for general use across assembly boundaries.
You are probably referring to this one: https://github.com/dotnet/roslyn/blob/master/docs/Language%20Feature%20Status.md
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [dotnet/roslyn/.../**Language%20Feature%20Status.md** (master → e08df4c)](https://github.com/dotnet/roslyn/blob/e08df4c4eb89d7c8bf913b28fc866a8b983c3f3d/docs/Language%20Feature%20Status.md) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dh60xq1.)^.
&gt;thanks to a better type system, the compiler has many more opportunities to apply better optimization algorithms. Maybe it makes it *easier*, but any compiler written in a turing-complete language should be able to be duplicated (give the same output for the same input) in any other turing-complete language.
.cs ? Are you talking about the extension of the file ? Anyway the extension is just a convention, you can have any extension you want or no extension at all, the compiler doesn't care
Overall looks fine for personal use. A few points which i feel differently about. &gt;Don't use the var keyboard (unless you write a LINQ query which returns a anonymous object because var is the only thing &gt; you can use in this situation). var stuff = GetMyStuff(); &gt; This code can't be understood at first glance. You're writing code in a strong typed language and the actual type is not &gt; visible there. Writing var doesn't makes it less strongly typed, and not everything needs to be understood at a glance, people can easily know the return type by hovering over the function, especially when using VS. Also consider the following case, which one would you prefer. IsolatedStorageFileStream someName = new IsolatedStorageFileStream(); or var someName = new IsolatedStorageFileStream(); ---------- if(condition == false) { return stuff; } Why not if(!condition) return stuff; Looks more readable and reduces unnecessary lines of code. ----- public string Age { get;set;} There is nothing wrong with understanding this auto property. Unless you have getters setters implemented, this is fine. Suppose you have 20 such properties in a class. With expanded getters setters you won't be even able to scan the whole class at a glance. 
Okay thanks! ".cs" it is!
The model you get will depend on your specific needs. [This is one of the most common models you'll encounter](https://www.adafruit.com/product/751). You can find it already wired for USB if you need it. 
 Constants should be named the same as any other public property. Constants should use the const keyword. You should be careful about exposing any public constants and consider readonly instead as the value of the constants may still be copied at compile time to the code consuming your code. Use the var keyword by default, if your code is not clear enough, then you can put the actual type to clarify it. Put auto properties on one line, only put newlines if there is logic: public string Age { get;set;} 
Probably referring to the match statement and additional patterns included in the original proposal
This really needs some text, a table of contents and some pointers on the "starting points" for each one. Even then, it doesn't really add anything new, but on the bright side it was probably useful for you to implement.
Removed: Spam.
I don't work on Project Rider but I'd guess it has to do w/ a combination of licensing requirements and cross-platform abilities.
VS + Resharper won't run on mac and competition doesn't hurt :)
Awesome, glad this is changed! Left a comment moaning about this on a code review this week - we need to move to C#7! 
Always use var unless you cannot. If your code is unreadable or not understandable to you or others because the type is missing, then you've got problems that a type name is not going to fix. Choosing good names for variables and methods is all you need to make any line of code clear.
I don't think you could go wrong reading the Design Patterns book by the Gang of Four. If you wanted to start small and work your way up I'd suggest learning the following in order. - [Memento](https://en.wikipedia.org/wiki/Memento_pattern) - [[Facade](https://en.wikipedia.org/wiki/Facade_pattern) - [Singleton](https://en.wikipedia.org/wiki/Singleton_pattern) - [Factory Method](https://en.wikipedia.org/wiki/Factory_method_pattern) - [Bridge](https://en.wikipedia.org/wiki/Bridge_pattern) - [Decorator](https://en.wikipedia.org/wiki/Decorator_pattern) Those are all pretty handy patterns that aren't too crazy to wrap your head around.
You create the view model in your code behind. It is essentially a class with some properties. You then set your data context to the view model `this.DataContext = myViewModel` Whenever your `myViewModel` is changed, anything bound to the properties of the view model will also change. You need to go into the XAML and set your control properties to the properties of your view model. A text box's text property would look something like this: `Text="{Binding Path=MyProperty}"` The entire example looks like this: public partial class MainWindow : Window { public MainWindow() { InitializeComponent(); Thing viewModel = new Thing(); this.DataContext = viewModel; } } class Thing { public string Name { get; set; } = "Joe"; } and your XAML: &lt;Window x:Class="WpfApp1.MainWindow" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:local="clr-namespace:WpfApp1" mc:Ignorable="d" Title="MainWindow" Height="350" Width="525"&gt; &lt;Grid&gt; &lt;TextBox Text="{Binding Path=Name}" /&gt; &lt;/Grid&gt; &lt;/Window&gt;
In addition to the reference source, you can use a de-compiler to see what is in the dll version you have http://ilspy.net/
How is this even possible... I'm too lazy to type `if` by myself :)
So why aren't C compilers capable of achieving the same performance as Fortran for vectorized optimizations?
These are all reasonably well-known design patterns. If they're new to *you*, I don't blame you - resources do exist, but the concept of a design pattern is not always introduced the way it should be, and it does of course require some background knowledge - ideally you will, like me, have fucked up enough designs before reading about these, in order to see how brilliant some of them are and recognize which specific problems they solve. That being said - some of these are rather "Java-y": artifacts of particular limitations of Java that don't squeeze you quite as hard in terms of designing your programs in C#. The functional-style things you can do in C# already makes certain things like Strategy "mildly" obsolete (though you may still want to use it in some cases, it's no longer an absolute must), just as an example. I read "Head First Design Patterns" a few years ago. It's based on Java, but it might be the single most useful programming book I've read.
[removed]