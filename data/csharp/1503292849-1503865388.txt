The creator of the internals visible to plugin for resharper hasn't published a version for the eap version of resharper which adds support for core and standard 2.0... just adding this here
It's a type safe cast so I fail to see your point. The code will only execute if the type matches.
You should consider NOT using goto. It is never required, and considered bad practice. Post the chunk of code and we'll help you refactor it.
No that's the DotnetFabulous show 🕺
Want the whole Code or do you just want the stuff that this refers to?
The relevant part.
I'm trying to get the y/n answer and if someone presses the wrong key it breaks the app so i'm trying to get the else to jump back to the first readkey ConsoleKeyInfo keyInfo = Console.ReadKey(); if (keyInfo.KeyChar == 'y') { Console.Clear(); Console.WriteLine("Please Enter ID:"); string BURST_ID = Console.ReadLine(); } else { Console.WriteLine("Please Enter Y or N"); } if(keyInfo.KeyChar == 'n') { Console.WriteLine("Opening Converter"); System.Threading.Thread.Sleep(500); System.Diagnostics.Process.Start("link")
Why don‘t you capsule the check in a function and call it when an input was made? This would make the Jump/goto obsolete.
I worked at a company which supplied trains with their embedded devices, one of them being cameras and the corresponding software for video analysis. We also used C# and ffmpeg. We just defined an interface and some structs to call a self-written c++ DLL which did all the ffmpeg interoperability stuff. As you are willing to do the network part with RTP you could use the same approach and just pass the decoded frames as pointers back to the c# code and marshal it there. This is probably the solution which offers the best bang for your buck. When the ffmpeg interface changes considerably that you are feeling the need to rewrite your ffmpeg interoperability code the c# DLL won't care as long as the interface stays the same.
It sounds like you need a while-loop. The simplest way would be to surround the copied code with a single &gt; while (true) {...} and end it with &gt; break;
 while(true) { var keyInfo = Console.ReadKey(); if (keyInfo.KeyChar == 'y') { Console.Clear(); Console.WriteLine("Please Enter ID:"); string BURST_ID = Console.ReadLine(); break; } if(keyInfo.KeyChar == 'n') { Console.WriteLine("Opening Converter"); System.Threading.Thread.Sleep(500); System.Diagnostics.Process.Start("link"); break; } Console.WriteLine("Please Enter Y or N"); } Of course, you will have to declare your BURST_ID outside the loop.
So when it reaches the end of the loop it goes back to the start, so if I set the loop to end at the else it will go back to the readkey? 
Thanks, I'll make adjustments as needed
Yes, pretty much. I suggest you to read more about loops, for example on [msdn](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/while). You should consider using loops whenever you need to repeat code.
msdn link to what?
A msdn link to functions
I agree that the syntax is nice and I use it fairly often, particularly in tests, but the last example is not a fair comparison. public IEnumerable&lt;string&gt; GetFourSpecificNames() { var list = new List&lt;string&gt;(); list.Add("Amy"); list.Add("Rory"); list.Add("Bill"); list.Add("Rose"); return list; } can be written using a collection initialiser: public IEnumerable&lt;string&gt; GetFourSpecificNames() =&gt; new List&lt;string&gt;() { "Amy", "Rory", "Bill", "Rose" }; which is not a million miles away from the array initialisation syntax: public IEnumerable&lt;string&gt; GetFourSpecificNames() =&gt; new[] { "Martha", "Rory", "Bill", "Rose" };
there isn't a page for every existing function of any kind in msdn
It's fine other people have solved it 
Fair point. That's an up vote to you, for keeping me in my place 😛
There were some technologies such as web forms but don't waste your time... they fell out of use for a reason. As a former winforms developer, I recommend to just bite the bullet and go and learn something like ASP.NET MVC. You'll be surprised how easily you pick it up. Sure there ended up being some fiddling with HTML, CSS &amp; JavaScript, but I'm quite pleased at the end of the day because I ended up learning JavaScript in a familiar environment which led on to other things.
I know you've said that your data layer is finished, but since you've asked about patterns I'd be remiss not to suggest that you utilise the Repository and Unit of Work patterns.
For ASP.NET MVC, I'd suggest you use the Razor view engine with a combination of Bootstrap and React for presentation and perhaps jQuery for front end logic. Bootstrap and jQuery are supported in the project templates by default, and you could use jQuery UI components. I'm a fan of less moving parts when it comes to JavaScript, though there is hate in the industry for jQuery. Ymmv. I also have to assume that you're comfortable with Entity Framework, ADO.NET, and LINQ?
Removed: Rule 7.
In my experience programmers and back end developers generally find css really difficult to use (myself included) and whilst I can use it no matter how long I spend trying to make a webpage look great it won't be nearly as nice as if a front end dev spent 5 minutes tidying it up. I've found [CodePen](http://codepen.io) is a pretty neat website for practising web design / front end and it's great for getting ideas and seeing how other designers would do things.
Even better, use switch instead of if inside the loop. public string GetBurstId() { while (true) { Console.WriteLine("Please Enter Y or N"); var keyInfo = Console.ReadKey(); switch (keyInfo.KeyChar) { case 'y': Console.Clear(); Console.WriteLine("Please Enter ID:"); var burstId = Console.ReadLine(); return burstId; case 'n': Console.WriteLine("Opening Converter"); System.Threading.Thread.Sleep(500); System.Diagnostics.Process.Start("link"); return null; } } } 
How is that any better? Both break and goto are jumps, but the latter at least tells you explicitly where it is jumping to.
This is a far more sensible solution than abusing a while loop.
I haven't had the time to work on it before now, I'll know soon ;) Edit: I managed to get it to work using the MonoEmbedding API and the 'mono_array_addr_with_size' function. I also tested a bit with IntPtr's, and I think I could have gotten that to work if I spent some more time on it, but it would make it a lot more difficult for me to handle memory+, so I will stick to the method above.
 Something: goto Something; Really that simple.
Labels and gotos become very messy very quickly. They will need to be uniquely named. It's possible to accidentally (through mistyping) jump to somewhere completely unexpected. Loops allow you to enforce scope (i.e. define variables local to the loop) which you can't do with goto.
If I recall correct, you need goto in a switch case statement if you want some code pre executed before the rest Switch(someInt) { case 1: SomeCheck(); goto 2; break; case 2: SomeMethod(); break; case 3: SomeOtherStuff(); break; }
Switch case fallthrough is pretty much the only reason for using a goto in C#, and it's usually still cleaner and easier to build out a couple functions and repeat the function calls. Gotos will almost always get called out in code reviews, even when they're the right solution. (Adding a specific keyword for case fallthrough would probably solve that better, but pattern matching is going to make it messy.) ETA: so, MSDN also highlights its use for breaking out of deeply nested loops. Leaving aside that deeply nested code is, itself, a problem, that *also* seems like something that might be better solved with a new keyword/expression, like a `break all` statement or something.
Better a do-while. No break needed. And then encapsulate it in a method.
Hi! Current VLC UWP app uses this https://github.com/kakone/libVLCX which is maintained but currently windows-only (this will change). If you want to go the P/Invoke route, those 2 wrappers seem relatively regularly maintained https://github.com/ZeBobo5/Vlc.DotNet https://github.com/higankanshi/Meta.Vlc Feel free to let me know if you have questions. PS: I maintain VLC for UWP.
Are you planning to have the games learn at runtime, or will you just use learned coefficients? Or is your plan to make some sort of machine learning editor extension? That would be pretty cool :)
Winforms with MVC isn't too painful and fits the paradigm reasonably well. Your button clicks (and other form events) should only have code like exception catching, turning on the wait mouse cursor, and calling out to the controller with the appropriate data it needs to do it's work. Putting the data access code into a Repository is a good fit too. 
are you wanting to open a Windows window, or simulate a window in text? if the former, you would likely be better off creating a separate application and calling it from the console.
Yes, my data layer is using repository a UoW patterns, using interfaces :)
This made me chuckle. There were applications that had their own "GUI" before the likes of Windows, OS/2, Mac OS, etc. You either had do it with text or enter graphics mode (Mode 13h for IBM VGA). What exactly are you wanting?
Thanks, I need to learn ASP.NET MVC, I'm checking some YouTube tutorials. And yes, I am using Linq for data access, but I'm using Linq2DB, not EF. I'm working with repositories using interfaces, abd I think that way I can implement my repositories using Entity Framework if needed. 
This piggybacks on u/AngularBeginner's suggestion down the thread: char PromptYorN() { char answer; do { Console.WriteLine("Please Enter Y or N"); answer = Console.ReadKey().KeyChar; } while (answer != 'y' &amp;&amp; answer != 'n'); return answer; } which makes your existing method var key = PromptYorN(); switch (PromptYorN()) { case 'y': Console.Clear(); Console.WriteLine("Please Enter ID:"); var burstId = Console.ReadLine(); // do whatever you're doing with burstId here, or move it outside // the switch statement and initialize to a sentinel value/useful // default break; case 'n': Console.WriteLine("Opening Converter"); System.Threading.Thread.Sleep(500); System.Diagnostics.Process.Start("link"); break; default: Debug.Assert(false, "Should never occur"); } It would be even better if you broke the y and n code paths into separate methods, which could then be called from there.
WPF (Windows Presentation Framework) is the current C# GUI framework. Look into that for defining your UI. Then you'll just have to figure out how to launch that from a console app From Stackoverflow: [How to start the WPF window from console programmatically?](https://stackoverflow.com/questions/4509714/how-to-start-the-wpf-window-from-console-programmatically)
`break` can be assumed to be more familiar to the average C# developer, and is defined such that it always jumps to the same (logical) place: just past the end of the immediately containing loop (i. e. `for`/`while`/`do`-`while`/`foreach`, but also `switch`). The destination may be implicit, but it's the only thing `break` does. `goto` is going to send a lot of devs to MSDN to (at least) verify what it's going to do. And, then, they're going to be confused why what seems like an obvious use case for it doesn't work, just like OP. For which they'll have to dig into the language spec, because the MSDN page for C#'s `goto` mentions exiting loops and `switch` `case` fall-through, and doesn't seem to mention that you can [only jump to labels in the same or containing scope in the same member or method](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/statements#jump-statements). Dijkstra doesn't really enter the conversation, because C#'s `goto` is so locked down that it *barely* offers more chaos than more conventional control structures.
Removed: Rule 4. Take a look into adapting your console application to WinForms or WPF. You can launch apps/windows from a console application, but it's likely more awkward than what it's worth. If you don't feel that your application can be updated to run in a GUI, then please include why that is -- more likely than not, you shouldn't have too much trouble doing so.
I got it, thanks. Do you know if there is a good library that implement MVC pattern for Winforms? 
Not that I know of. You'll probably have to hand-roll it. Having good code discipline will be key. Write a simple form first, get the source code structure right, before going on to write the rest of the app (i.e. vertical slice). 
I fully agree with you, my oppinion on this is, if there is no break; in a case, it should fall through but this leads to other errors again
There's not a whole lot of choice on our stack, unlike others; but we don't really need it. ASP.NET has been through a process. We've had web forms, and now we have MVC. Maybe there was even other stuff before that. What you're wanting is web forms. It's Windows Forms for web - it's probably right up your alley. You'll love it; but your users won't. Web forms has many issues with the modern web, because it's a fundamentally flawed design pattern for where it's running. Write off web forms. Learn to create layouts with HTML and CSS. Learn to use JavaScript for appropriate client-side programming, and C# for server side programming. Learn to communicate between them - give the user a good experience. Use a modern stack. I get the appeal of going to web forms, but tech moves fast and you need to keep up to date. If you're serious about web development, learning MVC will be well worth it.
Solved it with (simplified [code](https://gist.github.com/eiriksfa/c0e3b3c161e1024ded8ce45f33b21a77)) (Have not tried to compile this as is)
Wouldn't you just be moving the while loop to the new function? And how does using a while loop to wait for valid input count as abuse?
Unfortunately I don't have enough time, between custom controls creation and testing the day end too fast , that's why I would like to use a framework, preferably with multiplatform support.
`switch`-`case` syntax was intentionally broken in C# to prevent implicit `case` fall-through. I think that was a poor choice (to service short-term code conversions and developer uptake concerns over long term concerns about language design and consistency), but it is what it is.
I would use command pattern in winforms, forget mvc/mvvm, it's to convoluted. If you really want it use wpf, much easier (mvvm). 
Locks should be used as a last resort. If you are using them everywhere, you have a bunch of code that cannot be executed asynchronously, thus defeating the purpose of multi-threading. The proper approach is to break up the work to be done such that your threads share no resources. If you cannot do that, perhaps a multi-threaded approach may not be appropriate or possible.
Good luck.
According to someone else in this thread, the beep function is synchrous, so thread.sleep shouldnt be necessary
No, it does not. Reference types are always allocated on the heap. This idea comes up regularly and there's a bunch of related issues on the Core repos, but so far none of them really went anywhere as far as I know. 
Cool, thanks! Is it partly because the general consensus is that GC for these kind of objects is pretty good? I don't really know anything about how the GC handles this kind of thing efficiently...
I'd recomend not learning it from Youtube, Tutorialspoint and microsoft have some great tutorials far more complete than most youtube videos.
As previously mentioned, no, but you can force it in an unsafe context using the stackalloc keyword. 
[HanselMinutes](https://hanselminutes.com/) is good. DotNetRocks seems to be more about the various DIY he's doing on his, what sounds like, typical Valley Mansion, than anything else atm, so I've drifted away. I'd subscribe to a general programming cast, like [SoftwareEngineering Radio](http://www.se-radio.net). You can get a lot from knowing a little about the other tech. 
.NET does use a generational GC where "young" objects in the first generation can be quickly cleaned up, but this optimization could certainly help in many cases. I believe the JVM supports this, and Java's pretty similar to C#. I haven't delved into this topic very deep, but from what I've seen discussions about this always come with a rat tail of open questions about the exact design and implementation. Do you just rely on escape analysis without any developer intervention? Do you have a special language feature that allows devs to designate where objects should be allocated? If so, what kind of syntax do you need, and how would it interact with other language features like closures? It's certainly doable and would be nice to have, but it's also a very complicated feature that touches lots of areas of the runtime and potentially the language, and so far other things have had priority. 
Thanks for the insight!
Thanks! I'll need it.
Use the lock before checking an isRunning flag.
Depends on the case, for parsing text it is super usefull var text = "hello [red]red[]"; var curor = 0; var lenght = text.Length; var color = "white"; step_1: { if(curor &gt;= lenght) goto finish; var c = text[curor]; if (c != '[') { // draw glyph Console.WriteLine($"Glyph: {c} in Color: {(color.Length == 0 ? "white":color)}"); curor++; goto step_1; } else { color = ""; goto step_2; } } step_2: { if (curor &gt;= lenght) goto finish; if (text[curor] == ']') { goto step_1; } else if (text[curor] != '[') { color += text[curor]; goto step_2; } curor++; } finish: Console.WriteLine("finish");
Yup, definitely a good list. Learned about a few new libraries I'll need to check out. Thanks!
We are talking about two different points of view. For example, imagine you have to implement a thread safe collection. Can you do that without locks (or similar)? Do you need to worry about breaking up the work to be done? Of course not. But then again, we are talking about two different sides. Both sides are equally important for someone learning about multithreading.
Make sure your NuGet extension in Visual Studio is fully updated.
I'm reading a lot too, and I need to follow some samples.
Because this could be multi threaded, you could add a static volatile bool flag called IsProcessing. If the flag is true, you skip over scheduling a Task Run. If it is not set, you do the Task Run. The first thing the Task Run should do is check the flag is not set and if it is not set, set the flag. At the end of the work it clears the flag. You may want to do some error handling as well to make sure the flag is cleared if an error occurs in the Task. Edit: removed lock suggestion.
The idea behind using mvc (or mvp, mvvm) is to reuse code. I don't discard a WPF or even UWP client, for example.
MS has a thread-safe collection called ConcurrentBag. See how many actual lock statements they use: http://referencesource.microsoft.com/#System/sys/system/collections/concurrent/ConcurrentBag.cs Also, you can spawn 1000 threads but if your critical, time-consuming code is in a lock statement, you'll see no performance enhancement because that code is essentially not multi-threaded. 
Even still, a loop that can potentially run for a long time may need to use `Thread.Sleep(1)` to reduce CPU overhead, otherwise it can bring a system to a crawl.
 static object locker=new object(); static Task work; static bool IsWorking() { return work != null &amp;&amp; !work.IsCompleted; } lock(locker) { if (IsWorking()) return; work = new Task(whatever); }
If you look at line 164 and 173, you will see `Monitor.Enter` and `Monitor.Exit`. A `lock` statement is syntactic sugar for those operations. And obviously yes I agree that if you put all your time consuming code inside a lock statement it will not be efficient at all.
Ok, so 4 locks in 1100 lines of code. I'd say they went with the minimum amount of locking to get the job done. I think it's safe to say the people over at MS would disagree with the "locks, locks everywhere" sentiment. I'm not saying you can't write thread safe code using locks. What I'm saying is that there is a lot more to writing quality asynchronous code than using locks. 
Yes.
I think I just threw up in my mouth a little.
Nice :) Do you perhaps know of such a method? That would be really helpful :)
6 if you include the two actual `lock` statements. I agree there is more to multithreading than locks only. It was my impression that /u/everystone meant "remember to lock access to shared resources", more than "use locks literally everywhere" in his comment.
You could create a scheduled task and invoke a powershell script like this one: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-webrequest?view=powershell-5.1
I find it pretty surprising that an internship would either require you to have multi-threading knowledge/experience or allow multi-threaded code written by an intern into production.
Jot is great and I had never heard of it before. Took 2-3 minutes to set it up and replace my hacked-together window status saving system.
Yeah, same.
Yeah, it just got an update last week for the new version of .NET Standard even in VS 2015.
Why use the `volatile` keyword? Using `lock` will prevent multiple threads from reading or writing the value simultaneously. In fact, MSDN suggests that the correct use is when _not_ using `lock`. https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/volatile
i'm implementing a custom made protocol in c# on top of a FileStream. is there any libraries or example code I should look at? i'm new to .NET and C#. right now I have a reader thread that adds messages to a message queue that other threads access. 
Oh, didn't know, thx
If there is anything you most likely find it on "awesome .net" on github. Let me know the outcome 
Good man
Try Pluralsight, companies give it to their dev staff so they don't need to bother with internal training
WPF apps frequently use multi-threading, you don't want to have blocking calls (most IO, such as reading or writing to a db is blocking) on the thread that is updating the user interface, things like loading dialogs or spinners are an easy way to get an understanding of async and await. Same thing applies to MVC, if a controller method (requests or endpoints or whatever) needs to hit the database, and all of the controller methods are synchronous, your MVC server will process those requests one at a time. If you make all of your controller actions async, you can process another request to the same controller method while another request is being processed, waiting for the IO or "blocking" code to be finished. 
There's a free book, just in case if you want to learn some more about gc in .Net: https://www.red-gate.com/library/under-the-hood-of-net-memory-management It covers some really interesting topics on garbage collection.
Visual Studio project template could be a framework on its own 
You could create a c# program to convert the posts to JSON and send them periodically through a windows service. https://docs.microsoft.com/en-us/dotnet/framework/windows-services/walkthrough-creating-a-windows-service-application-in-the-component-designer
Thanks, that's a motivating reply. Now where did I put that Plurasight course on multi-threading?...
Some of these I hadn't heard of... but there is a single question this brought up: Why Autofac instead of Unity IoC or the IoC built into .NET Core (assuming you're using .NET Core)?
Ah, missed that. I'll edit my answer.
This took me a little longer than I meant to since I'm mostly doing this after work, but I really do appreciate the comments! I have updated my code and pushed it to the Github repo. Here are my responses to your comments: &gt;The first thing I notice is that there are almost no comments in your code, and most that are there seem to have been auto-generated. Learn to document your code to a suitable level so that anyone reading it can understand what it does without having to read every single line of code. It will also help future-you. This is the one thing I still need to do, but I do understand the importance of documentation and even if I wasn't planning on showing this code to anyone I still should have done it. &gt;MyDict is an awful name for a variable. A variable's name should tell you about the information that the variable holds, not what type it is. We can see from the declaration that it's a dictionary, and the "my" prefix adds no useful information. What is the information it contains ? What information is in the keys vs the values? Kinda the same as the last reply, but again even if I wasn't planning on showing anyone this I still should have used better variable names, so I have changed this one to referenceResponses. &gt;Why are you manually declaring the backing fields for your properties? The C# compiler will auto-generate them for you if you do this instead: This one was part ignorance, part laziness. I was using the propfull Visual Studio snippet, not realizing that just having the getter and setter and nothing else meant I didn't need to have a separate private backing field. &gt;Total time of what? This is where a comment comes in handy or, failing that, a better named variable. Renamed this one to TotalReferenceResponseTime, hopefully that's a little better. &gt; What if this throws an exception? Threw this into a try/catch block as well as for webData.Substring. &gt; What if this returns -1 because it can't find the string? For this one right after I just do a check to see if startIndex &gt;= 0 &gt; Variable names with a numerical suffix are usually a code smell and usually indicate that you should be using an array or need to think about what you're doing. Why 5 different strings that you immediately concatenate? I'll admit this one is because I don't understand much about regular expressions, so I just tried to find an example online that was close to what I was looking for and then just modified it. I have changed this to using just one string called findReferencesSection and pass that into the Regex constructor. &gt; That variable doesn't seem to be used. Check the warnings that the compiler generates when you build your project - you should aim to build with no warnings at all. Because I was assigning this to String.Empty, VS considers that an assigned reference and so didn't show a warning. &gt; You don't use these outside your for loop. It's a good rule of thumb to declare variables as late as possible, close to where they're used. In this case you could just declare them on their first use, e.g. on line 127: Before I looked this up, I assumed that if I declared hte variables within the loop that they would be re-created each time through, but apparently the IL that is generated is the same for either example. When I have another night to take a look at this I'll check each version and see if they do indeed compile to the same IL. &gt; As far as I can see you're only using i here to index into urlIndexes so you'd be better off with This is the only thing I'm not really sure of. Not sure how I'm supposed to get the URL I'm to test without getting each new index within the references section, and I thought using the for loop would be the only way to get that index? &gt; You could just do {code} to create &amp; start the stopwatch at the same time &amp;&amp; This check is pointless - the following TryAdd call will fail if the url is already in the dictionary. Done and done :) Thanks again!
The so called escape analysis should put this on stack. .net doesn't do it, I think, Java, yes.
Thanks for sharing! Definitely some gems I was unaware of
&gt; This is the only thing I'm not really sure of. Not sure how I'm supposed to get the URL I'm to test without getting each new index within the references section. I thought using the for loop would be the only way to get that index? It's the only way to get the index, but you're only using the index to pull out each item from `urlIndexes`. But what if you could just be handed each item from `urlIndexes` in turn, 1 at a time? Wouldn't that be neater? That's what `foreach` does. There are 2 ways of iterating over a list: List&lt;string&gt; items = new List&lt;string&gt; { "one", "two", "three }; for ( int i = 0; i &lt; items.Count; ++ ) { Console.WriteLine( "Item = {0}", items[0] ); } This is what you did - you loop over the indexes, and each iteration use the index to access the list. This works fine, and is useful if you need the index `i` for other purposes, but if you don't use `i` for anything else I think you should use a `foreach`, like this: foreach ( string item in items ) { Console.WriteLine( "Item = {0}", item ); } This `foreach` loop does exactly the same as the `for` loop above it; it prints out every item in `items`. With `foreach` you don't need the index variable `i`; the `foreach` itself deals with pulling each subsequent item out of the list and assigning it to the loop variable (`item` in this case). It makes it clearer what you're iterating over (because it's right there in the `foreach` line) and removes comparatively messy indexing. Hope that helps! &gt; Thanks again! No problem - glad it was useful! 
Just an FYI: This is C# documentation comment format and they show up in Visual Studio when you highlight over properties and methods.
Yep, that did the trick, thanks. Any idea why it does this with NUnit, but other packages seem to work fine? I've got a few hundred PCs (although to be fair I only need about a dozen of them to work at any one time) which get re-built every week or two. The build has an out of date NuGet extension, and it's a real pain to get it updated, so it's not a case of upgrading just once. I doubt there's anything that can be done about it, so now I know exactly what the problem is I'll just stick with downloading NUnit from the website. Thanks!
It probably makes use of some NuGet features that were not available in your old version. I don't know specifics, I did not bother to look it up when I encountered this case. It's just another reminder to keep your software updated.
I don't use comments/summaries in code (not writing 3rd party libraries), but warnings as errors is generally not a bad thing.
unity has been abandoned by microsoft
How were they enforcing or detecting if rules are being broken? 
https://stackoverflow.com/a/7771944/1277156 All in all this would be the code: var filedir = System.Reflection.Assembly.GetExecutingAssembly().Location; var subdir = System.IO.Path.Combine(System.IO.Path.GetDirectoryName(filedir), "My subfolder"); System.IO.Directory.CreateDirectory(subdir); Edit: Assembly.CodeBase uses an URI format `file://` and isn't always set. Changed it to Assembly.Location instead.
Generally, if a company goes hard on comments it is because they are having trouble maintaining a code-base. Knowledge about how things are done is siloed in individuals. Forcing comments is your employers decision. You may not think its worth it, but its not for you. Really, you should have flipped it around and become the comment-master, and ensure that your comments made anyone maintaining the codebase happier. If you think its a waste of time, suggest alternatives, or even implement alternatives alongside the comments. Try DAMPing everything as well as comments. I've seen this push back so many times, on comments and Unit Tests, and its always never with an alternative. Adding a comment doesn't take any time at all, and is beneficial to everyone in the bigger scheme of things. As Atwood says, Imagine the next person who has to edit your code is a psychopath and has your address.
Sharing a database for tests is not the most ideal way to run tests as you cannot guarantee the state of the database. Implement functionality in your database context to allow different database names, then run and tear down the databases as the tests are run. You should also look at separating your database and your solution, and testing the edges only. Its not a full integration, but as long as you have defined stored procedures you should be okay.
Seems like a fairly petty reason to leave, I also have to write exactly the same type of "stupid comments" aka campaignId is campaign unique identifier. Although we don't have an automatic check, pull requests ensure we have them everywhere. But if you already found another place to work at that hopefully turns out better it's as good a reason as any :)
So, been there, done that, had that sort of BS enforced. In fact one of my employers made a rule that you could *never* delete or change *anything* in code, you had to comment it out, date and sign the commented out code, and then write new code. (And if a bug was ever found around there you'd be held responsible, even if someone else changed *your* code and created the problem and didn't sign it.) Never mind that we had version control that would keep all old code and track all changes, no, you had to do this stupid anal retentive procedure and make the code pretty unreadable in the process. Oh, and we had to do the same BS as you too. If they're treating you and your team and your team's code differently from everyone else, I'd file for unemployment *immediately* and tell them they forced me out with rules that weren't applied to others. You shouldn't have quit, this jeopardizes your unemployment situation, it would have been better if you told them you weren't going to do anything others didn't have to, and let them kick you out for it.
.. And they're autogenerated in VS (I believe this is 100% standard feature since I don't run many extensions) when you simply write ///
Oh, thanks, but it's still in assembly. I do not understand why this is so much easier on Bash, hahah
That is a GhostDoc feature( i love ghostdoc)
Why do you need this? You should really re-consider this approach. Most programs are intentionally placed where the regular user is not allowed to write to (e.g. Program Files) - only with administrator rights. So attempting to create a folder there would result in an error.
Probably using StyleCop. Or at least I think Stylecop detects that.
I checked and I don't have it installed (and the /// works. VS2017.3)
Wow, might be a new feature? Doesn't happen in community edition , I've got to check :/
I've had the pro/ult edition for last ~10 years, I think I last installed ghostdoc with VS2013? This isn't a feature I use much, we don't ship interfaces so the comments I do are mostly about peculiarities of whatever thing I used.
Is it? If you run the program from the same directory, yes. Otherwise, neither $0 or getcwd is going to help you.
I understand this, however, that this software tries to give the user the freedom to leave the software anywhere they want, and how the software will use the files that have been placed in their subfolders, this may/should make it more practical for the use.
It certainly happens in VS Community Edition for both 2015 and 2017
I have to disagree I think enforcing style rules is a good idea. They may have gone to far but generally its a good idea. The XML summary tags are awesome as they show up in intellisense. As for the whole team knowing what's going on that won't be true years down the line when all the current developers have left and anyone maintaining the code will love you for doing it. If you just right code to standard you barely have any problems with code analysis. We've been using it for about 6 months and I hardly get warnings anymore as I have learnt the styling rules and stick to them. Also if you use code maid and style cop analyser most of the changes are done for you (have to use Ctrl+. to fix style cop issues). I like knowing that all code reguarsless of who wrote it is up to a know standard. I think quitting you're job over it was silly, if they were going to heavy and it was reducing your productivity you should of talked to your manager and explained that not left.
[removed]
[removed]
[removed]
Yeah, it did help me, I already had a similar one, however, as I said, I'm not familiar with the assembly, I only know the basics and it's bad to manipulate something with this in mind. Thanks for the support
They're autogenerated to a degree but not as fleshed out as with GhostDoc.
Is there a sub I can follow on reddit that keeps me abreast of new c# releases, libraries, and news that doesn't have this Mickie Mouse shit every other day?
Have you tried a Parallel.Foreach against File.ReadAllLines?
I found it [here in this sub](https://www.reddit.com/r/csharp/comments/4i1taq/jot_net_library_a_better_alternative_to_settings/?st=j6nifxdc&amp;sh=20350969) from the author himself and using it successfully in a desktop app.
I've tried this: foreach(var line in File.ReadLines(path)){} File.ReadAllLines is not very clever, because it reads all file into the memory. But yes, I tried Parallel.Foreach, but it took more time (10sec more) than normal. 
&gt; In fact one of my employers made a rule that you could never delete or change anything in code, you had to comment it out, date and sign the commented out code, and then write new code. We used to do this. Actually still do for code that is not in source control, like VBA. We'd version and comment the top like this: '* ************************************************** '* Change History '* ************************************************** '* 1.00.01 «Initials» «yyyy-mm-dd» - «Description» '* 1.00.00 «Initials» «yyyy-mm-dd» - «Description» Then we would copy the version, number and place it wherever there was a change. This saved us a ton of time in figuring out if you have the right version because the version number was at the very top. We started to do this in C# until I was comfortable with TFS/GIT. Then we abandoned it for our C# projects. 
You need comments for yourself, too. 4 yrs down the road and you need to revisit something, it's nice to quickly see how stupidly naive you were back then. 
Look at Environment.SpecialFolder https://msdn.microsoft.com/en-us/library/system.environment.specialfolder(v=vs.110).aspx There are several values there that are more appropriate to use like ApplicationData CommonApplicationData CommonDocuments LocalApplicationData I can't emphasize enough that storing user modified data within the program folder of the application is wrong. You're setting yourself up for other head aches in the future. It also slicks out to customers as being outdated. Using the program folder to store user data died after Windows XP. 
Task and async/await isn't very useful for CPU-intensive work. See if you can simplify your parsing such that you don't have to use regex, and that should speed things up.
So, basically you aren't adaptable. Good for future employers to know. I know when we introduce new rules, we start strict and then figure out what things we can forgo through use. The fact that you can't bring yourself to type in /// to automatically produce that code says a lot about you. This isn't commenting, per se, but documentation. Proper commenting is necessary in the body of the code. The parameter stuff at the top of the code is useful if you need to automatically create a help file of all of the functions. You don't have to write Shakespeare here. Just a brief synopsis of what this function does if you are not looking at the actual function. If you can't be bothered to take the 30 seconds to do this, then you are not a good fit to be on most teams. BTW: for firstName type parameters, I would just put in self-explanatory as most variables should be...unless I need to know why firstName is being used differently. EDIT: Also...the documentation comments prefixing a function, What you type there shows up in [intellisense](http://imgur.com/oQOb1zB) when you go to use the function
You could read and parse at the same time by using the task library. Alternatively, if the order doesn't matter, you could also do it in parallel. I can add an example later if you want.
Hang on, we might be talking about different things here -- I mean auto generating not only the xml fields, but also the documentation (For method "Call" ghostdoc would automatically generate a summary value of "Calls this instance", for property Value a summary value of "Gets or sets the value of this instance") 
The order is important. Logs are logged chronologically.
If you're reading and processing a single line at a time, you're probably getting bound up on disk I/O. You can use a StreamReader to read the file a line at a time without pulling the whole thing into memory. Once you've got that, you could batch it up into chunks of 10, 100, or 1000 lines (or whatever; you'll need to experiment a bit) and spin off tasks for each batch of lines, as long as processing a batch doesn't need information from elsewhere. IEnumerable&lt;string&gt; EnumerateLines(string filename) { // error handling/arg-checking is omitted for brevity and clarity. using (var reader = new StreamReader(filename)) { string line; while ((line = reader.ReadLine()) != null) { yield return line; } } IEnumerable&lt;List&lt;T&gt;&gt; Chunk&lt;T&gt;(IEnumerable&lt;T&gt; source, int chunkSize) { // error handling/arg-checking is omitted for brevity and clarity var chunk = new List&lt;T&gt;(chunkSize); foreach (var x in source) { chunk.Add(x); if (chunk.Count &gt;= chunkSize) { yield return chunk; chunk = new List&lt;T&gt;(chunkSize); } } if (chunk.Any()) { yield return chunk; } }
If the file IO itself is the bottleneck, no amount of threading is going to help with that. You could move the parsing to a single parallel thread so it doesn't block the reading, but the gains would probably be minimal.
Might be, I'm just saying that /// does most of the work, tags params and stuff. Here's an example of what it does: http://imgur.com/9ItaDMz Personally I didn't find ghostdoc generated strings at all useful, just the structure.
works in community 2017, i had my intro course to C# just last week ;)
You know, there are tools like GhostDoc that will auto generate all of those comments for you. Usually adequate for this type of requirement, especially if (as you say) your functions and variables are named so that they are readable. Also, ReSharper can be configured to do auto formatting and indenting.
PSA: StyleCop rules will not fix your architecture problems. Styleguides and formatting are low-hanging bike-sheds.
Yea alright^^ I find ghostdocs docs a good boilerplate to start off from, you do often need to put all the details in, but for the obvious arguments/properties GD's docs are fine. (:
I think you might have an infinite loop, there (i doesn't seem to be incremented once you get past an opening bracket), and a loop implementation using a state machine will probably be easier to understand.
I've already tried it and it's not faster. String.Contains and Regex are maybe so fast, that parallelism does not have any sense. Maybe I should try TPL Dataflow.
It auto generates the template. You still have to fill it out one by one including parameters
If you read what I said, no one is opposed to commenting code!
If the software gets installed into the standard "Program Folder" location, then a non-admin will not be able to modify in that folder. The program folder is locked down. If you plan on changing the permissions on the installation folder and it reside in the program folder, then you risk antivirus/corporate policy software changing the permissions back. 
But it hasn't been abandoned, just handed over to an open source team/person. I support that removes its status as "use this because it's part of the platform" but is Autofac really so much better?
I'm perfectly well aware that they show up in intellisense. But intellisense doesn't need to be pretty formatted for every single parameter. I'm perfectly adaptable. Some rules enforced I hate coding that way but I'd put up with them with no issue. The problem is the rules went too far and the compile on errors broke the camel's back for me. Oh ok it's 30 seconds to do this. ... Multiply that 30 seconds times 500 for all the properties and functions I write daily. It can lead up to hours of just writing useless comments "the bool flag hasErrors indicates there were errors when true". You don't fucking say mate.
Won't comment on Unity as I never really used it. Autofac has a lot of features, it's very well designed. Can be extended in several ways. Only downside is a somewhat basic decorator support, afaik you need to know what you are going to decorate beforehand (which sucks for composability, imho of course). .NET Core's IoC should be ok for most uses. It lacks dynamic nested scopes, which is a big let down for me. 
&gt; code that is not in source control You almost had me in a tizzy. This is understandable.
Comments are a good thing, but if the methods and variables are well-named you shouldn't need to comment every single call or variable definition. If there are comments everywhere and most of them are utterly useless (think "int someVariable = 1; // Set someVariable to 1" or "DoSomethingVerySpecific(); // Do something very specific"), they just become spam and you start mentally filtering them out. Stick to putting actual useful comments in places where it makes sense to have them. Typically above blocks of code that do something necessary that it isn't immediately obvious what do from variable or function/method names. I don't see a problem with requiring the /// documentation comments though, at least on public methods.
I should rephrase that, We have a lot of legacy databases and spreadsheets with functions. Most never made it into Source Control. But even if they did, through exporting, we would still need to know if your access database, or excel file is up-to-date. Most small businesses just kindof fall into developing stuff. Things just kindof expand before best practices are learned. That's basically what happened here. 
for me it was the god damned TPS reports 
Enforcing comments on every single thing is the deal breaker here. Enforcing comments being present does not automatically mean that they're useless or meaningful or helps anyone. Again, referring to the example I gave, that's 100% recommended what I did. But it's useless, the name of the function and the parameter names and types already are self documented. When the code is written as English, there is no need for those comments. When the code isn't English or there is some gotcha when calling a function, comment away.
Most of the list seemed pretty good but is Spring.NET no longer "in"? It would replace several entires in that list. Also: &gt;Dapper: Uh... in the language with probably *the* best support for typed SQL in existance we're really going to recommend going back to string query statements? Massive WTF with this one. I'm not advocating EF (which I don't like or use myself) but something with typed SQL must be insisted on. Since I'll probably be asked on this point: I personally used to use Spring.NET with the Linq extension but these days I'd like just a straight typed SQL (via Linq, which I realize will require some "object-like mapping" but I probably don't need all of Spring.NET or EF) and the Data Mapper pattern. I'm pretty convinced at this point (after years of living off of it!) that ORM belongs in the anti-pattern grave yard.
It's a bad thing when the warning is you didn't comment on a debug function you wrote for a quick launch in the debugger or when you want to comment out a line of code to try something but there is a rule you need to pretty format commented out lines of code on new lines. You cannot do // on a line of code and just hit run to debug something mate. It's bonkers to me that debugging is inhibited here! EDIT: To be clear since I've seen a few misunderstand me, I'm not against the warnings as errors option itself. I'm opposed to code analysis warnings being treated as errors with this option on.
That sounds absolutely terrible. I can imagine it would make the code utterly unreadable very quickly.
Why would you even have ANY code that is not in source control?
For non source code files, again that's understandable. Even batch files or any scripts I'd still say thats alright, perhaps a bit excessive depending on your source control support. Checking if someone has the right version of a file can be painful in some source control vs others.
Never heard of that. I will have to look at that. /// Is insufficient
the monodevelop bundled with 2017.1 does not seem to support .net4.6 how to get monodevelop for compiling .net4.6
Future employers I've asked about this and they all gave me spooked owl eyes like I was making it up that I can't comment out a line of code in a debug session without having it come up as a warning which is an error.
From a personal perspective, 15.3 is the worst release ever. I lost an entire week of productivity battling with it. I finally found tedious workarounds for it's problems, but I am not a happy camper. Makes me want to chuck VS altogether and take a serious look at Jetbrains Rider, which I already own, but I know it has many shortcomings so I'll just continue to limp along for now and hope Microsoft fixes VS soon.
IIRC, Unity does the compiling. MonoDevelop is just for editing. If you're on Windows, use Visual Studio. Otherwise you could try downloading and installing the latest version of MonoDevelop directly rather than using the bundled version with Unity: http://www.monodevelop.com/
Thats the rub. I can give you multiple times where I've reviewed code where comments really were needed, to get a response of "its obvious" when queried, as the dev has took a very subjective view of the thing that they just wrote. If your policy says comments everywhere, do the best comments you can, backed up with DAMP. The best programmers learn from mentoring, and comments are the simplest form of mentoring, as you will need to step into others shoes when writing them.
Thank you. The majority of my experience and growing as a programmer happens while debugging. And I enjoy it. If debugging is covered by red tape, then I won't enjoy it and if I won't enjoy it, growing will be harder. Nevermind it's just outright annoying to have a checklist of things to remember to do before committing a simple fix for a simple bug. Remember to change that back in this project config and that project config. Every. Single. Change. Ive forced myself to try it for almost a year begrungingly. But I have not at all come around to it.
I suppose you could just paste n/a for the extremely obvious shit in place of humdrum explanations. But I agree super annoying.
Did you complain to management? Maybe they didn't know how much pain it was causing their devs. I'm in the camp that if you need to comment your code then maybe you need to rethink how you write the code. I do put the /// comments on methods in classes though but normally once the code is complete and I know I'll be using those methods, no use commenting something that will get thrown away.
Years of legacy crap started when the company was smaller that we are gradually moving away from. Mostly Access/Excel VBA. VB6 stuff was stored in SourceSafe that was eventually moved to mercurial. This stuff will remain in Mercurial until replacements are developed in C#
Oh yeah I complained so much about it. I'm not alone either but you know how it is.
I once worked on a project with comment block requirements for all methods and properties; most of them were meaningless as they simply repeated the words that were in the method name and parameters. There were too many warnings at one point, so the people who were (in my eyes) responsible for most of the warnings turned on Warn-as-error. In the parts I worked on with one other person, we fixed all the warnings, while those other people just put suppression attributes.
That sucks that one misguided decision puts you on the job market. I had to leave a job because after 2 years my boss decided that we were taking breaks that were too long or lunches that were too long. I never measured my breaks but it was basically walking to the coffee shop, buying coffee and walking back. One lunch there was a truck vendor festival so I took a 1.5 hour lunch.. once, which was used as an example of my long lunches despite no other examples. 
Removed: Rule 7, spam.
&gt; To compare each line, using string.contains and regex. Are you sure you can't optimise this logic? Are you comparing every string in a text file against all others read prior? Perhaps this can be refined to decrease your time.
They do break things. Some time ago they fixed an issue with TLS 3.0 with a Windows Update and broke alot of app that comunicate directly to JWS.
[removed]
had to downvote you so I could upvote twice!
I don't think anyone is saying that you should use Dapper in all cases. Even the Dapper developers don't advocate using it instead of EF in most cases. The key feature of Dapper is speed. It has very little overhead in the queries. It was developed by the team behind StackOverflow and they use it to get incredible performance on their site. So yes, Dapper doesn't have the type safety of EF, NHibernate, or Spring.Net, but you are trading development time for performance in production. The performance of the major ORMs is good enough for most cases. But when it isn't, look at Dapper. 
Look up Atomineer, with Ctrl+Shift+D it would analyze the function and parameter names and fill in the blank XML doc template for you. Also has probs for documenting entire files, folders projects and solutions at once. Also, what was enforcing these rules? StyleCop? ReSharper?
What font is that?
Based on your explanation, it could be they're enforcing these rules in the event that someone leaves - or the project you guys are working on turns into maintenance only - as a way for the C++ or Java guys to come in and try and fix a bug. Definitely sounds like overkill in what they wanted you to do, but it sounds like maybe the company was being overly cautious with this project?
No. Try an ms blog. 
1. Create a new database for the build, using some unique identifyer in the name, and replace the connection string in app.config before building. Then drop the database afterwards.(make sure the drop databases build step is run even if the tests fail) 2. Use localdb instead of a external database.
Again, with auto documenting tools it would be less than 1 sec per.
You quit your dream job over _that_? While you could have - installed StyleCop and have it generate documentation for you literally by just pressing Ctrl + Shift + D - Turned off 'warnings as errors' for debug builds but not for release builds You might think a certain method is "self documenting", but will other people think so as well? I know `PrintNameToConsole` is a trivial example, but are you certain you can make that judgement for each and every class/interface/method you create? Proper documentation really isn't _that_ much work, especially if you learn to use the right tools. EDIT: my comment was too strong. I can perfectly imagine quiting your job when you feel like you *have to* do shit you don't want. I just don't consider it a really big hassle to just comment all the things....
What rule was being triggered that you couldn't comment out a line of code without it turning into a warning or error?
I work for a gamedev company and honestly I wish we had strict standards like these, especially because I know we'll be getting some junior employees soon and it would be helpful to have everything documented nicely. ~~Visual Studio~~ VS for Mac auto-completes the &lt;summary&gt; block after the third forward-slash anyway so it's not a big deal. It even attempts to write the descriptions of parameters for you. Then you get the benefit of being able to hover over the property in some other file and see that description you wrote for it. One of the annoying things my lead will make me do is not use single-character variable names in for-loops. I get the reason for not using them out in the open unless it's raw math or something, but I have to use 'index' instead of 'i'? Come on. But I live with it because it's not as big of a deal as you make it out to be. Honestly the tension that allegedly arises between developers over coding standards seems more like a meme than real life. As for wasteful vs. useful comments, I would rather have someone over explain something than under explain it. (Please comment more!)
Try linq2db (https://github.com/linq2db/linq2db), faster than EF, support linq for querys, CRUD, SQL Server, MySQL, Oracle, etc.
&gt; just put suppression attributes Break out the torches and pitchforks! (A well-considered suppression is ok, with a comment as to why. A shotgun approach is wrong)
&gt; Constantly having to do annoying shit that you know is a total waste of time is not a petty reason to leave. You're being paid to do a job. The only time being wasted belongs to your employer. 
Umm. I'm going to need you to go ahead and come in tomorrow, so if you could be here around 9:00 that'd be great. Mmkay?
For winforms controls you can add Krypton Suite (https://github.com/ComponentFactory/Krypton).
We have strict standards at my job, I think a bit too strict but style cop and resharper do like 98% of my work for me 
Thanks for the recommendation.
StyleGestapo... it's brutal out of the box, and the worst thing about it is how it disagrees with Microsoft about a lot of things. For instance, MS orders usings alphabetically, and StyleCop wants all system usings first. 
p.s. It *could* be from the Sandcastle VS extension, but I couldn't find it documented for Sandcastle either.
You meant IO intensive work, I assume
It's used for enum-like types to point to a class holding static instances to be shown in Intellisense. An example would be `System.Drawing.Color`. 
Maybe it defines entries that can appear in the intellisense completion list? Maybe it's a typo in your XML comments template: https://visualstudiomagazine.com/articles/2011/08/04/wcovb_xml-comments-2.aspx I think regardless you can remove it using this method if you don't want it. EDIT: Found something here, but it might be for VB? https://stackoverflow.com/a/102217/1269654 EDITx2: Here's another similar example: https://dotnet.currifex.org/dotnet/faqs/anytypeenums/en/ It mentions there: &gt; IntelliSense support in Visual Studio 2005 similar to enumeration types is achieved by adding the 'completionlist' XML comment to the class. The 'cref' attribute takes the type whose shared members should be shown in the IntelliSense list. 'completionlist' is undocumented but is treated correctly by the Visual Basic and C# compilers of Visual Studio 2005. So this could be an old/legacy feature, perhaps intended for VB only? EDITx3: tweq knows it. He is smarter than I.
AHH. Awesome. That's actually helpful for some things I'm using.
Unfortunately its usefulness is limited in practice. IIRC in VB projects VS adds all public static fields and properties of that type to the completion list, but in C# it just preselects the container class. Dunno about other IDEs and plugins like ReSharper. Can't hurt, though.
The assembly in this case is just the exe you launched. You don't have to actually write assembly
Just because you're being paid doesn't mean you should have to deal with stupid shit. 
 _ContactGroups = _C; You're bypassing the setter and thus the change event.
Hrm. I tried using it and I have no idea how. It doesn't work like I expected.
Dataflow might be helpful. Before it was a thing I rolled my own pipleline processor using long running tasks. You can then ensure the order of processing. But unless you're doing something computationally expensive with the text itself, the limiting factor is the I/O. 
There is a Pluralsight course that is pretty decent, it was one of the videos I learned C# with. It's important to understand that it is just a primer, because you can't really *teach* how to deal with all sorts of multi-threading strategies or problems very easily, it only comes from working, and struggling with multi-threading, so try to do a project! Stephen Cleary has an excellent book, but you will need to be primed first: "Concurrency in C# Cookbook." His blog is a great resource also.
&gt; in C# it just preselects the container class It could be that I'm just very tired, but what does this mean?
If it were my dream job I would have found or created a way to auto-gen them, ideally on save but with a hotkey would be acceptable. I can't imagine it would take more than a day to get something acceptable working.
If you have code like this /// &lt;completionlist cref="TypeContainer" /&gt; public class SomeType { } public static class TypeContainer { public static SomeType Foo1 = new SomeType(); public static SomeType Foo2 = new SomeType(); public static SomeType Foo3 = new SomeType(); } and you start typing `SomeType foo =`, when the Intellisense lists pops up `TypeContainer` will be automatically selected. It's more obvious when you do the same in a VB project.
I don't mind some of this but others were out of control and made code less readable. Even smaller functions took a whole screen because of the documentation header. Here are my main issues with this, although I don't mind stylecop for some rules. - comments on privates, I can see comments might be useful for accessing public methods in other classes or assemblies but local is unnecessary most of the time. This is kind of how it works in java, nicely comment the public facing methods and nothing else matters that much. It doesn't matter if a class file is perfectly clean code as along as it appears that way to anything using it. - variable/method ordering. Sometimes you have a private variable that directly corresponds to a property, so it would be nice to juts define it above the property but instead you have to put them no where near each other and the same unnecessary comment on both. - forced comments, this means every comment is lazy and auto generated. My biggest complaint actually. With less comments you might actually read them, with required you ignore them all and defeats the purpose. - duplicate interface/implementation comments, change one and the other doesn't match, but stylecop is fine so that's all that matters right? - getter property instead of method, if you have a slow function() that returns a variable it wants you to make it a getter property but properties are for quick access. Its CA1024. This one is especially annoying debugging because it evaluates multiple times if you hover over the property name, a function won't do this. One of the few that needs suppression instead of fixing. 
How do i get localdb inside TeamCity?
If they had been well-considered it wouldn't have been memorable :D
[removed]
Somebody has a case of the Mondays
I believe there were two rules Can't // without proper spacing after // And either you need a new line before or after //. Maybe it was both but I think it was just 1
Also, the VM shouldn't know about the view. Expose properties on your VM to bind to for your filter. 
[removed]
All the warnings that Style Cop generates make it easy to miss legit warnings like if you use a single equals sign instead of double for comparison or other simple things like that. 
Comments are helpful. Even if it seems tedious or obvious to you, it may not to the next dev. And besides there are tools out there to make it much less painful, like ghost doc ( http://submain.com/products/ghostdoc.aspx ). Or go evil, if you don't want comments warning/errors then don't generate xml documentation files... problem solved :)
I spent most of the morning trying to use AngleSharp to replace selenium as my vehicle for a web scrapping project. The concept is pretty cool but it doesn't seem to play nice with the Set-Cookie headers in the responses I was getting back (I was watching Fiddler while running my program.) I'm sure there is a way to do what I was trying to do but I ended up getting it working just by carefully viewing the requests my browser generated using the Network Console and Fiddler and then mimicking them using HttpRequests and HttpResponse objects in the System.Net.Http namespace. That said, HTMLAgilityPack is something that I've used in conjunction with Selenium as a quick way to parse an HTML response like it's an XML document. Would def. recommend.
&gt; And if you find a company that only wants your skill RUN. Run the other way as fast as you can. Under-valued statement of the year. I had an "interview" a few years ago with a company. They brought me in, sat me down for 5 minutes to explain the interview process I'd go through that day: * Written test with questions about programming, and logic-based problem solving questions * Programming test to write various functions run against their unit tests * Personal interview I got half way through the second task (after about 2 hours) before saying "fuck this" and walking out. Coincidentally, someone who used to work there quit and started working where I got a job, and confirmed that other place was terrible to work for.
I hate StyleCop with a passion. Not only are its warnings useless, many of the default settings ask you to write in unnatural ways or make code harder to read. 
Some programming environments don't allow for efficient use of source control. VBA, for example, buries the code in Word, Excel, AutoCAD, etc. files. 
Excessive and unnecessary comments make code HARDER to maintain. It breaks up the flow of reading and makes integration into the code base that much harder. A new employee will spend the majority of their time for months reading code than writing code on a good code-base. Adding in things that break up the reading flow will make it take even longer. Your code should be self-documenting. comment where it's necessary to explain the why, sometimes it's necessary to explain the how, but most of the time your method and variable names should properly express themselves.
I guess you're right but it is rare. I don't see anybody mandating that they have to stay at a very specific and old version of .NET for compatibility. That happens with Java all the time. 
If you found another job, good for you. Another solution:,get one of those automatic generators and fulfill the form. Collapse all xml comments, done.
Whenever I see a developer get upset about this kind of stuff it makes me think there's a deeper performance issues. Who quits their job before spending a half hour too see if the annoying shit could be automated?
It's IBM PS/2thin2 from https://int10h.org/oldschool-pc-fonts/fontlist/#ibmps2_isa My first PC was a PS/1 and this was one of the nicest fonts for the 80x50 text mode it could do.
I'm not alone! Thank god.
This indicates that your parsing time is negligible to your IO time. Could be. Did you try QueueWorkItem? Did you try profiling?
I've worked with clowns like this. They're essentially the rent a cops of software, the white space in the code will be impeccable, the runtime characteristics will be pure garbage
The fact you even need to think about which rules and how they worked is stupid. Shouldn't ever be that strict.
Ahhh yes, the ole snowflake defense.
Nice! I was going to say, for some reason it looked familiar but I haven't seen it in a while.
System.AppDomain.CurrentDomain.BaseDirectory However, you are uneducated, you don't know how this is supposed to work. Get education.
I know this may be unpopular, but I really disagree. Granted, there are a few warnings whose consequences are important for your team to avoid (so halt on those, by all means) but those are super rare. We haven't had "warnings as errors" on for over 7 years. There literally hasn't been a single serious bug that I've ever seen attributed to this. I've had multiple arguments with many people, none of whom have ever been able to point to a serious issue we missed, even after years of disagreement. This is an area where I think there remains an enormous cargo cult in the broader C# community. If you have a specific, concrete reason to catch certain warnings, then do that. But starting with all warnings as errors is likely just wasting everybody's time.
Fucking thank you! I work on a team where the idea of disabling checkstyle sends shutters down their spines. And then they start talking to me about how the company has a "high quality bar." Code formatting isn't part of that high quality bar you dolt! This stuff seriously infuriates me to no end! Seriously, though: stylers such as StyleCop/checkstyle, etc, are meant to discourage bikeshedding, however I find the opposite to be true because nobody wants to adopt a pre-existing ruleset because nobody agrees with the way someone else wants to format their code. So then the team has to painstakingly go over every single rule and go on mini-holy wars over each one to determine if they want to adopt it and if so what the rule's settings should be. Also, I personally find it takes almost as long to make checkstyle happy than it does to initially write the code and make it work. All of this perfectly fits the definition of a bike shed. Forget about the damn stylers already. - Stylers don't address poor performance, poor names for classes/fields/methods, largely do not prevent spaghetti code and otherwise do little to prevent the kinds of problems that *can* actually kill a project. - No project died because a few files were formatted differently than the others. - If you have one coder that insists on doing something like using 2-space indentation instead of 4, it's much more efficient to reject his code review than it is to adopt a styler and all the bikeshedding it entails. Eventually, he will learn. - If you can't read code that's formatted a bit differently than the way you're used to then you really should learn the syntax of your programming language better. I have worked on huge projects that don't use a styler, and while I do admit it would have been nicer if there was more consistency, there were much bigger issues with the code. A consistent style is pretty low on the list of "nice-to-haves." 
For internal-use, non-API classes whose nuances can't be satisfactorily explained in a two sentence summary, I like to skip the intellisense labeling completely and use only informal commenting. It encourages other developers to not make assumptions and actually read the damn source. Well, that's the theory anyway. Not convinced they actually do but at least it's more obvious now. 
This is the right answer if you are getting bound up on CPU. Regex isn't performant. You know the pattern you need to match so implement an efficient O(n) algorithm to do it.
What about code reviews? If one of your colleagues thinks something is not clear enough, you make it clear and then merge it into the code base. With time you'll already be writing code you know your co-workers and likely most future employees will understand, so you won't waste that much time.
Async/await is designed to keep the CPU busy/available during IO. If you never hit a piece of code that blocks async/await does very little for you.
I *hate* GhostDoc with a passion. ///&lt;summary&gt; /// Gets or sets the Widget Id. ///&lt;/summary&gt; public int WidgetId { get; set; } It gets or sets the widget id?!?! You don't say! This kind of source code documentation is completely useless and only serves to clutter up your code.
That sucks about the naming restriction. I doubt you could change his mind with this, but here is how I rationalize it: a variable name should have a length and complexity appropriate to the size of its scope. Small scope like 3 or 4 lines in a for loop will normally mean a single letter variable name for me. And how these tensions get blown out of proportion is definitely a meme. I have reasons for all my stylistic choices, but I'm not going to expend the effort to fight someone over them for more than a handful of minutes.
Do some quick math of filesize / disk speed and do a sanity check. If you are 'close' to that number in the naive single threaded approach than you are pretty much done and the answer is more hardware. If you are way over that value check your CPU utilization and see if you are pegged. If you are pegged on CPU I would look at how your parsing the data, likely removing regex and manually walking the strings. This would be done using profiling. If you are not pegged on CPU than the likely culprit is garbage collection and you look at gen1/gen2 garbage collection and figure out what is getting thrown away constantly.
&gt; It even attempts to write the descriptions of parameters for you. Visual Studio does not do this. You must be using a plugin. Furthermore, if the generated doc is "Gets or sets the widget id", that's pretty f-ing useless as documentation.
That sounds like fucking hell. I'd rather have my hands chopped off than deal with that shit. (please don't chop off my hands...)
Those are definitely stylecop rules. And yes you would need to put one extra space in if using //. If that's really too much for you, use /* or #if FALSE instead. You can also configure style cop to turn specific rules off, rich should have been discussed with management and your team. We turn about a dozen annoying ones off.
[removed]
If a comment can be auto generated by a trivial algorithm it's obviously adding approximately zero information, so it seems to me the only thing it's going to be helpful at is filling my file with redundant lines.
Thanks!! I suppose I have to build the DLL before this works.
What are you talking about? It's the middle of summer.
[removed]
I got updates on a branch I was working on the other day and opened up the solution in VS only to have the number of warnings explode all over me (we had discussed using Style Cop but I didn't think we had reached any hard agreements) but it's whatever; I'm not trying to rock the boat, I'm just trying to do my job. So I start going through the warnings, one by one, to remedy them. I think I got about 4 warnings in before I "accidentally" removed the style cop config file from the solution. "No trailing whitespace? THERE IS NO FUCKING TRAILING WHITESPACE!"
Does the order in which a line is processed matter? If not, you can load up all the lines in a ConcurrentQueue and create a sufficient amount of background workers to dequeue and process each line. If it does matter, create a background worker that reads the file line by line and adds if to a ConcurrentQueue. You will also have another backgrounf worker that simply dequeues a line from the ConcurrentQueue and processes it. The queue acts as a buffer between reading and processing. If processing takes a while, the queue simply builds up and the parser thread eill eventually get to it.
Which is why it's easier to set a company or team wide policy and enforce with StyleCop/FxCop. No, it's not going to fix architecture issues, but the OP didn't discuss any architecture issues. Just that they don't like to be bothered to document public APIs and conform to a common code style. I don't get the support for the OP. Those things will be common at any sort of shop that has its shit together.
So... disable "warnings as errors", leave it enabled on your CI... Problem solved. Just know that warnings on your machine will be errors on the build server... but that's what you want so you can make quick local changes for debugging. Lot easier than quitting and whining about having to document public APIs and having a consistent code style in your codebase. --- edit: AFAIK some these things are POLICY at many teams/orgs in Microsoft. Every team I've worked on or heard of that use VS/C#, use StyleCop (many use FxCop). "Warnings as errors" is strict policy ina a number of places because of the problems that have manifested in the past due to ignored warnings.
Well, if you have to document each sample, may as well build a code file from scratch at the same time. That said, there are _a lot_ of different aspects to C# that putting together a comprehensive code file that contains _all_ parts of C# might be overwhelming, confusing, ambiguous, and possibly not even compilable. I would suggest putting together a simple class that demonstrates the more common aspects (curly brace placement, access modifier usage, capitalization, etc.) then separate specialized examples that demonstrate some of the other less commonly used aspects. Beyond that, you can also setup the standard code styles in Visual Studio and export/distribute a `.vssettings` file, or even a StyleCop setup.
That's what our requirements are. It has to say "Gets or sets" on properties. If there is no set, it has to say "Gets" only. If you don't, you can't compile. If you make a public gets or sets, then later come back and remove a set because you realize you don't need it - no compile, don't forget to update the comment! fucking balls
As I mentioned in another comment: That's what our requirements are. It has to say "Gets or sets" on properties. If there is no set, it has to say "Gets" only. If you don't, you can't compile.
Regex takes most work of CPU. I'm gonna try to use string functions. 
This. 100% exactly. There's nothing wrong with comments, but excessive commenting on every little thing is superfluous.
I've tried producer/consumer pattern using TPL Dataflow, but it takes more time to process than normal processing.
Yep, that's what I've seen as well. Whitespace requirements do not trump warnings of the kind you're talking about, but they do all the same in this kind of setup.
It is producer/consumer pattern. I've tried it.
When it first started to happen, I thought of it like a growing pain. But when it would happen like a year later, every time I let it happen, you may as well have been chopping my hands off. It really begins to bug you.
Agreed. The suggestions here to suppress the warnings never solve this issue except on a case by case basis.
Thank you
This is ontop of code reviews. There's StyleCop, then theres the code review, and if the code review doesn't match or have stylecop somehow, denied. The review becomes a warzone.
&gt; "Warnings as errors" is strict policy ina a number of places because of the problems that have manifested in the past due to ignored warnings. Warnings as errors isn't the problem. The problem is that comments or whitespaces are considered warnings which are then considered errors with the setup I was under. I personally do not have qualms with warnings as errors option until I cannot comment a line of code out in a debug session with // without having to remember rules. 
Your reply lacked the necessary whitespace. Sir, I'm going to need to ticket you. License and registration please.
And I already discussed how to work around that. Disable locally. Leave enabled on build server. Done. I've personally worked on teams with "Warnings as Errors" with that exact StyleCop rule. It really is no where near the hassle people are acting like in this thread and it preserves a clean code base, important when dozens of devs will touch a codebase, esp with normal turnover and replacement.
As someone who also has worked for multiple gamedev companies, I have to disagree. &gt; As for wasteful vs. useful comments, I would rather have someone over explain something than under explain it. (Please comment more!) While I agree with the sentiment, in practice it has a tendency to be counterproductive. Gamedev in particular has lots and lots of turnover of people and constantly evolving libraries. Comments become quickly outdated and more often then not, people do not update them. So you can have requirements on the function definition having comments, but the code in the function changes, and there's no check on the function definition having a relevant comment (Stylecop can't do that, can any code analysis do that?). Suddenly you find yourself reading comments on code that has nothing to do with the code actually there. I've read comments on code with dates from nearly a decade ago, mentioning people's names or initials that haven't worked there in the same amount of time or entirely different companies. "Dave will kill me for this, remember that this function will do...". It's asinine, forget Dave, the function doesn't even do what it says it does. Having everything documented "nicely" does not mean it's documented "well" or even at all so to speak.
I've caught plenty of errors that using this feature. For example, I've seen an if statement followed immediately by a semicolon in the wild. Was it a "serious bug"? No, but it was still a stumbling block for anyone reading the code. If a particular warning isn't useful, I'll turn it off at the project level. But in general those warnings are there because they are potentially real problems. 
The idea behind GhostDoc is that's your starting point and you are supposed to elaborate on it from there. 
We had to do headers like that too. But the problem is *all* of our code was in source control, so *nothing* should ever have been lost, so it was *all* a huge waste of time.
I use i and j in for(;;) loops too. Do you know *why* i is the traditional for-loop variable? *I* do, but I'm *old*. :) Similarly, does anyone *not* know why /r and /n are called "carriage return" and "linefeed". I'll get a certain nostalgic pleasure from explaining, if you don't know.
Wait until they make you comment on your comments.
Check out tailblazer, it does what you want using rx.net https://github.com/RolandPheasant/TailBlazer
Did you profile your app in release mode to identify where your bottleneck is? If the bottleneck is in the file reading, there isn't much you can do. Can you share the profiling results and/or the code you used?
The code style for a game company I worked for mandated no spaces before the assignment operator. I shuddered every time I had to type int x= 0; At least they were consistent.
I have found that in practice, that never happens because the "gets or sets the widget" comment satisfies the requirement to have documentation so why go beyond that?
The code I write don't produce warnings so when it actually gives a warning, something is potentially very wrong. You are blaming the feature when the issue is something else
My heart goes out to you man. I feel your pain.
I'd like to know what warnings you get that isn't worth your attention. Code I write is warning free.
I personally like the visual separation summary tags provide. The thing I hate most about super strict style requirements is that code reviews turn into style reviews. Code reviewers should be looking for logic and other errors, not white space issues.
That's why GhostDoc has started adding "low quality" warnings for documentation. Basically it will flag stuff that looks exactly like the auto-generated comment. (And no, I don't actually pay attention to those warnings either. But I'm trying to get better about this.)
On phone but might be related https://blogs.technet.microsoft.com/qzaidi/2010/09/01/override-the-hardcoded-ldap-query-limits-introduced-in-windows-server-2008-and-windows-server-2008-r2/ 
Unless you just have a lot of time on your hands .. those libraries are normally just built over time as things come up. Otherwise you are just writing of ton of potentially useless code for something that was supposed to limit your code
Okay, that looks kinda promising. I will try to implement it tomorrow! Thank you.
Searching takes more, than my solution.
[removed]
Even if you can't diff them easily, you can still check them into source control and get the advantage of being able to track changes via the commits.
So wait, they turned up style and fx cop BS and did not provide any tooling to support it? I mean I have been on both sides of the standards debate but either way I say "you want standards? then give us the tools and templates to do it" IE things like Re-Sharper with some plugins are NOT optional tools if you want to grammar nazi my code. It also sounds like the turned all rules on with default settings. Some of those rules directly contradict each other. IMO style rules should be applied in stages based on an actual understanding of the code not just jammed down the team's throat. Let me guess, your development manager is also your lead?
Dont you love scrolling past 60 lines of code total where 10 lines are actual code then there are 50 lines of blankspace + useless auto generated comments!
&gt; onestly the tension that allegedly arises between developers over coding standards seems more like a meme than real life. in my previous job a guy would always CapitalCaseEerything public static void DoWork(DoWork ADoWork) { int Index = 0; DoWork TempDoWork = ADoWork.Clone(); etc } that got fucking annoying as shit. when everyone else did the styling 90% or 100% right 
ITT: a bunch of kids
So, did it actually work?
I would also like to know.
If the IO is the bottleneck, and you want to try parallel, then none of the existing parallel techniques will improve perf because that all feed off that same IO stream. What you need to do is have multiple input streams partitioned into regions of lines that separate threads/tasks read independently. I have some source code here that could help you do split the text file into partitioned streams. https://github.com/mattwar/Paralax 
&gt; Comments become quickly outdated and more often then not, people do not update them. I have occasionally fantasized about an IDE feature that "remembers" when comments are created and updated, so when code within some range below the comment changes, the IDE can prompt "Do you need to update the comments?". When you select "No" your answer is saved, so you can get blamed when someone else spots the no-longer-accurate comment. Yes, I know, this will never be implemented, and not even I would like it, probably. Just a fantasy response to the "Comments get outdated" argument. I'm a heavy commenter.
Maybe a stupid question, but are you using a compiled regex?
I haven't had a chance to try it yet. Been refactoring and things are a bit broken, and I'm also at my "real job". I'll let you know if it does!
Resharper, (just as one example, there are other tools that do this too), allows you to apply suppressions across classes, files, projects ...
Stylecop analyzers are great. I see your pain but for me it's as simple as disabling them when I do my development and testing and reenabling them before a check in. If there are rules that are being enforced that need to be disabled instead of suppressed, then that is different.
So... change that to `ContactGroups = _C;` ? Or do I have to loop through the items and just add them to the collection (was kinda hoping to avoid doing this as it adds about a minute (on my dev pc at work anyways) to the run time before it finishes).
Do you know if they're edging towards Discriminated Unions? With something better than Enums I believe I'd like C#'s pattern matching better. 
&gt; We haven't had "warnings as errors" on for over 7 years. There literally hasn't been a single serious bug that I've ever seen attributed to this. I've had multiple arguments with many people, none of whom have ever been able to point to a serious issue we missed, even after years of disagreement. Two projects having different versions of the same dependency. Which version ends up in the final output folder? "This async method lacks awaits and will run synchronously." Oh, look. Somewhere put in `DoSomethingAsync().Result` instead of using `await` in an async method. Hello random, hard-to-diagnose deadlocks and threading performance problems under load. You should *never* ignore this warning. If nothing else, it means you can remove the `async` keyword and return Task.FromResult(...) instead. &gt; This is an area where I think there remains an enormous cargo cult in the broader C# community. If you have a specific, concrete reason to catch certain warnings, then do that. But starting with all warnings as errors is likely just wasting everybody's time. You have it exactly backwards. Any warning you want to ignore needs proper consideration. Warnings are there for a reason. I could see excluding StyleCop warnings entirely, but not compiler warnings.
IIRC, the initial StyleCop rules were not an ideal, they were a compromise between multiple teams at MS who did not agree about many things. 
Let's separate code analysis from style checking. I'm happy when code analysis points out the (obvious) error when I write if (person == null) { Console.WriteLine(person.Name) } Regarding style checking: I don't care if my opening brace is on the same or next line, just *whitespace consistency*. What I don't like is when I wan't to make a small fix and the commit is littered with whitespace changes, because we didn't have *whitespace consistency*. Enforcing whitespace consistency is a machine's job, not a developer's. No, my program won't run faster if I change an upper camel case variable to lower camel case, but I *do* misread code, that has local variables named `m_name` or `Name`. I'm don't care whether fields are named `_name`, `name` or `m_name`. But I *prefer* `m_name` myself, and *dislike* when a local variable `name` hides a field `name`. Tools can, and in my opinion should, check and complain when your naming is contradicting. If a style can't be enforced by a tool, *then* I understand why one becomes frustrated.
Have you tried https://learnxinyminutes.com ?
No idea. There are a couple open issues or proposals related to discriminated unions on [their github](https://github.com/dotnet/roslyn/issues), but I haven't got the time to spend keeping track of what's really up over there. I wouldn't know about the missing pattern matching stuff if it hadn't been posted on reddit a few times.
I feel your pain, but *you are wrong*. I've been there. First of all, there are tools that will automatically fix the StyleCop errors. I think ReSharper can do it. Yes, some of the mandatory comments like `Initializes a new instance of the &lt;thisclass&gt; class.` are redundant and trivial... which is why you should have a code snippet or a tool that writes them for you. It's extremely painful to take a large codebase and bring it up to the strict standards. However, once you are there or are starting new code, it's easy to keep the code up to standards. It becomes second nature. These standards don't always lead to *better* code, but that's not the point. The point is *consistent* code, which is very important when multiple people are working on the same codebase and the person who originally wrote the code may no longer be with the organization. *You* may think you write perfectly clear, self-documenting code that doesn't need any comments. Most people who think so are wrong. Even if you are write, imagine you are the unlucky new maintainer of *someone else's* code. You have just opened the personal sideproject of one "Harikirtan Bolekshava". You're not sure if he's Indian or Eastern European or Russian. He uses a parameter "fName" everywhere with no comments. Is it "first name", "family name", "formatted name", or maybe something that was obvious to him but isn't even based on English?
Thank you! That's exactly what I'm looking for :)
Don't mind formatting rules. They are usually for the younger Devs who leave extra carriage returns around etc. That is annoying. However the commented of all public functions is fecking horrible!
Agreed! Had this arguement a few days ago in work.
But that's the thing, the comment usually just ends up looking like the function name with spaces between the words. 
Argh! I hate this crap too!
I'm in the camp of, explaining why you did something is good. However commenting what you did is usually pointless.
Oi! Don't lump comments in with unit tests! :) There are really valid reasons for not wanting a lot of comments e.g. the comments must be maintained. Or the comments say nothing useful. My current company used to have a zero comment policy, which was basically if it needs comments you are doing it wrong. That was too far, a "doing this because X " is useful for example.
I should have clarified I am using VS for Mac, and yeah it looks like there's a plug-in called DocFood or something, although I don't remember installing it. My bad, I know 99% of people would have assumed I'm on PC.
I assumed 'i' was short for index, and j and k are just the next letters of the alphabet. Maybe it has something to do with matrices? I know some math uses i,j,k for components.
Exactly this. No idea why a lot of people on here think loads of comments == great or the other extreme of no comments. In fact it's usually more junior Devs in my experience who seem to think "I'll comment everything!" Or "my code is self documenting so no comments!"
I mean... This web page works: https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions
You left. The code was documented, so the next dev can pick up where you left off. I am that next dev. Thank fuck they made you document everything.
The worst is when "ignorable" warnings accumulate. You start with 10 warnings about trivial shit that you can safely ignore. Junior dev asks you about these warnings, you tell him not to worry about them. A few checkins later, your project now has 30+ of these same warnings. At some point, your project went from 30 to 31 warnings and that last warning is something you absolutely should pay attention to. However, everyone is in the habit of ignoring warnings, and that new warning is down near the bottom. The bug that warning would have prevented then makes it into PROD and sits there for god knows how long.
I'm open to disagreement but, again, the proof is in the outcome. We have a huge code base running a highly-scaled system with many components and with over 100 developers. Still, EVERY argument for aggressive warnings basically comes down to hypotheticals that have NEVER been a serious problem. You point out several potential warnings that may warrant attention and, as I've said, I'm fine treating those as errors if the consequences are bad enough. But I strongly disagree with having it "exactly backwards"; the vast majority of warnings have no practical impact and spending time triaging and working around them aggregates to an enormous amount of wasted time fighting off a boogeyman. So, IMO, you're the one who has it backwards; you are arguing for a practice out of fear rather than evidence that it has improved your net productivity.
You will need to post some code up for us to see. This is either a time/threading issue or you are mucking up the data in an unexpected way. What is the app frontend WPF or Winforms? If WPF are you implementing IPropertyNotifyChanged on all bound properties? Also if WPF your bindings will need to be 2-way.
There are a significant number of finance startups, whether they're corporate projects or new companies, which are charging straight ahead on blockchain. All I know is that when this many developers get behind something, it usually means we're going to see *a lot more* of the technology. Hopefully it becomes easy to implement and has a wide array of everyday uses.
&gt; however I find the opposite to be true because nobody wants to adopt a pre-existing ruleset because nobody agrees with the way someone else wants to format their code. Then you have a leadership and/or teamwork problem. You discuss it, share opinions, and then the leader says, "we're using this ruleset" *and you fucking do it*. There is no perfect style that is objectively better. However, a consistent style is objectively better than a mismash. If you're a professional and not a code monkey, you'll swallow your ego and use the same damn style as everyone else. &gt; No project died because a few files were formatted differently than the others. You are wrong. Inconsistent style is a factor in code readability and impacts the maintainability of shared code. The larger the team and the longer the code survives, the more important a consistent style becomes. &gt; If you can't read code that's formatted a bit differently than the way you're used to then you really should learn the syntax of your programming language better. I can read raw binary in VIM, but that doesn't make it easier on my brain to process. A consistent style, including naming convention, between all projects in the organization makes it much easier for one person to jump between projects and get up to speed. There is less of a mental context switch.
You should be able to squash StyleCop warnings or turn StyleCop off while you're developing and turn it back on to fix everything up before Code Review. &gt; You cannot do // on a line of code and just hit run to debug something mate. Yes, you have to do `////` instead. Oh, the horror.
The problem is that style violations under this setup cause warnings, which become errors. So doing something like not properly commenting something stops you from being able to compile. This makes the code/test/debug cycle more ponderous.
Nope, it's not //// but thanks for trying :p
Comments start with `//` and a space, and must be before code. Commented-out code starts with `////`. It's not that hard and I don't find it tedious. Commented-out code *should* have a special signature aside from regular comments, because a) you should be using source control and b) commented-out code that actually gets checked in should be for a very good reason only.
Exactly. Every code review turns into a war over whether or not stylecop is configured correctly rather than if the code is functional.
Yep, because "this is a first name" on a typed string parameter named "firstName" will get you far. If they hired you and you rely on that, then god bless them and you son. You're going to need a lot of help because their code problems go much deeper than function declarations.
&gt; But I strongly disagree with having it "exactly backwards"; the vast majority of warnings have no practical impact and spending time triaging and working around them aggregates to an enormous amount of wasted time fighting off a boogeyman. Give me some examples of a compiler warnings (not a StyleCop warning) that you feel are trivial. The problem with "treat all warnings as trivial and only certain warnings as important" is that you end up with 1000 "trivial" warnings in your codebase and end up missing the 1001st warning that turns out to be not as trivial as you think. &gt; Still, EVERY argument for aggressive warnings basically comes down to hypotheticals that have NEVER been a serious problem. You are simply wrong here. Ever compiler warning is there for a reason. **Engineering** is about following practices that prevent mistakes from happening. Your "hypotheticals" are *not* hypotheticals. They happened to someone, probably many someones, and the warning is there because an engineer said, "how can we prevent this class of problem from happening again." You can argue that you are unlikely to run into that problem, but you can seldom argue that fixing that warning properly is going to make your task impossible. Not fixing the warning properly is simple laziness. The largest source of remote vulnerabilities in the entire history of software development is due to the fact that people sharing your attitude thought `printf()` and `sprintf()` were trivial.
One guy that picks the style everyone has to use? That's a different problem. Just because they're in a leadership position doesn't mean they make good choices. Inconsistent style causing an entire project to fail? I don't think so. Not by itself. Yes, it's a little harder to read insistently formatted code but it's not so much harder that it alone should cause an entire project to fail. There's a plethora of worse problems to have and stylers don't fix any of them. | You are wrong. And you are right? I guess subjective experience is actually objective then! BTW, which of my team members are you?
Hmm, I thought that was the MS standard style. Well, that would be annoying if you had no convenient substitute for commenting out code that was compatible with the keyboard shortcut for commenting out large blocks of code. Are you able to propose new rules/exceptions?
I completely agree with this. Consistency checks trump outright ruling then out. However it does become an argument of where consistency lies. Is it project or solution or entire codebase level. I'm personally fine with using any kind of field prefixes. I just prefer to be consistent with everyone else. In our case the other teams used one and we started to enforce another. I'm down for whatever but what reason for contradicting the other teams I asked. And I think their answer was some msdn blog or something about c#. Whatever dude, just let me compile. 
Yep and I certainly have. I actually got one rule added to line up linq together in a particular way. Contrary to what it may seem, I was onboard with this until it started to become strict rather than recommendations. Once the warnings as errors came on, I couldn't stand it. The option doesn't bug me, it's that these come up as warnings in the analysis and they wanted it that way 
&gt; Just because they're in a leadership position doesn't mean they make good choices. It means that the organization trusts them to make good choices. It is entirely possible to have a bad leader, but that doesn't mean that "we all do whatever we want" is the right choice. &gt; There's a plethora of worse problems to have and stylers don't fix any of them. Nobody is arguing that they do. &gt; And you are right? I guess subjective experience is actually objective then! I have 20 years of experience backing me up, in organizations that used all sorts of standards or no standards. I've seen the good and the bad. Warnings-as-errors in a language like C# that has useful warnings is almost universally accepted as proper practice for quality code by anybody who means anything in the Software Engineering world. You will not find support for the "ignore all warnings except on a case-by-case basis" policy among experienced engineers. &gt; Inconsistent style causing an entire project to fail? I don't think so. Not by itself. No, not by itself. And "causing a bug that made it to production" is my bar for changing a practice, not "causing an entire project to fail". But anything that makes maintenance harder to do correctly by multiple people is a liability.
I'm not disagreeing about warnings as errors by any means. That should be the default in any project. But those are generally substantial warnings that actually should be addressed to prevent bugs. I have seen plenty of shitty and/or buggy code make it past stylers. I have also seen highly performant and bug free but oddly formatted code. I also have 20+ years of coding under my belt there vast majority of which are in industry. It's subjective and experience based. As far as I'm concerned, the cost of a styler is more expensive than the benefit.
Yeah, I can imagine that causes frustration if the style guide is bad. I do think that any team should have a consistent way to write code and it should be enforced.
&gt; As far as I'm concerned, the cost of a styler is more expensive than the benefit. The ROI of a styler tacked on to an existing, large codebase is definitely questionable. Massive "just style changes" can introduce bugs, even. Not so much the automatic transforms, but the tendency for developers to "oh, hey, I can shorten this conditional" while they're rearranging things. Using a styler from the start for new code isn't onerous at all, though. Especially with all the tools available to automatically fix the style according to your rules.
Use xunit runner. Create a step in tc to execute the runner against your tests 
&gt; Give me some examples of a compiler warnings (not a StyleCop warning) that you feel are trivial. Warning: The variable 'e' is declared but never used. { try { // Do stuff here. } catch (Exception e) { return NotFound(); } } 
I think you are going to find that your class library gets so large and unwieldy that you end up writing duplicate code/classes(because the code is so polluted with completely unrelated items). Also, upgrading to a new framework requires upgrading it all. For example, say you need one of those classes for .net core or for PCL, it could be a lot of work to convert it all. I'm not saying it absolutely will be, but it very likely well become cumbersome. A great alternative is to host your own little nuget repository and publish your utilities as individual packages. This will also make versioning much easier since you'll easily be able to upgrade or install older versions of your packages. I use the local nuget repo and I love how much better it works for me. Last thing, it's great that you realize a need for code reuse, no matter whether your take my advice or not, you are moving in the right direction! Good luck :-)
In this case, it is obviously harmless. However, it is a "code smell". There are bugs associated with this warning. For example, ILogger logger = new RequestLogger(); ... globalLogger.LogInfo($"Request successful in {sw.TotalMilliseconds}ms"); This warning is also trivial to fix, so why wouldn't you?
Only if you turn off Warnings-as-Errors.
&gt; Excessive and unnecessary comments make code HARDER to maintain. That's true, and there are some horror stories about especially bad comment requirements in this thread. However, the XML comments for C# methods/properties/classes, even when auto-generated, aren't too obtrusive because they just collapse down.
&gt; the tension that allegedly arises between developers over coding standards seems more like a meme than real life. A not-insignificant amount of coders are mildly autistic or otherwise not socially adept. If you get *one* of those guys on your team, then coding style guideline wars can go on and escalate like the vi vs. emacs battles of usenet history. Especially over email.
So why define exception e then? 
The reason a style check is helpful for that is to disallow the use of both `m_name` and `m_Name` and `mName` in the same scope, which can easily lead to bugs. Obviously, style checks don't completely eliminate all cases of "used the wrong variable" bugs, but they do eliminate a wide swath of them. "ijk" bugs are prevalent, but good luck trying to reject those as variable names in `for` loops.
So here's a list of compiler errors and warnings: https://msdn.microsoft.com/en-us/library/ms228296(v=vs.90).aspx The warnings run the gamut from "that feels like it should fundamentally be an error" (e.g. ambiguous GetEnumerator implementations) to "WTF don't bother me" (e.g. Long literal uses lowercase l). But the bigger point is that these warnings are irrelevant as long as the code actually does what you intend. The code HAS to be tested and if you miss one of those serious cases, then you'll discover it when the code fails to even run, let alone pass your tests. And then you can say, "oh, this one is a problem; let's add a check for it." I get that your counter argument is "OMG but you could have caught it earlier" and my response is "yes, but I've saved hours and hours not working around the warnings that were actually trivial." And because we don't release code until we've verified it basically does what we expect, the *actual* bugs are consistently in our logical errors and corner cases - NOT in the compiler/platform ecosystem. Think of it another way - somehow, people still produce solid production-hardened code with interpreted languages that have *no compiler at all* (gasp!). A linter can certainly help some of them, but it's all people opting in to checks that they find provide value. It's reasonable to want the safety net of ALL the checks but I think you ultimately need to show the friction you introduce is worth the checks. I haven't seen anybody do that and, from having done the opposite for years now, I haven't even seen a bug slip through as a direct result, let alone one that would have justified the intermediate friction. &gt;Engineering is about following practices that prevent mistakes from happening. No, that's very wrong and a common misconception among ideological purists. Engineering is not about preventing mistakes - it is about *building systems that provide value*. What this looks like depends very much on your business and goals but, as an illustration, if you spend an extra week preventing a bug that would have cost you 5 cents, you probably wasted a bunch of time. Finding the right balance between productivity and robustness is one of the most difficult parts of good engineering. &gt; Your "hypotheticals" are not hypotheticals. They happened to someone, probably many someones, and the warning is there because an engineer said, "how can we prevent this class of problem from happening again." I think you misunderstood the scope of my statement (and that's my poor phrasing on my part) - I was talking about hypotheticals specifically within our company. Every time I've had this argument internally, there's a marked inability to point to any problem our policy has caused for our business. (More on this next) &gt;The largest source of remote vulnerabilities in the entire history of software development is due to the fact that people sharing your attitude thought printf() and sprintf() were trivial. This is pretty strong evidence that you've misunderstood my attitude, as I would take a much more conservative approach if we were shipping a standard library. Because the needs are simply different - you need a standard library to work in a variety of scenarios that *you can't test* so you have to be much more cautious and deliberate (same if you're writing NASA code, as well). But the reality is the vast, vast majority of us are not writing such code. We should NOT start from a place of ultra-conservatism because it doesn't suit our businesses. Most of those who do are engaging in cargo cultism - they are not thinking critically about what actually makes sense for their situation.
&gt; to "WTF don't bother me" (e.g. Long literal uses lowercase l) Which one is this? If you're specifying a literal with a specific data type, precision is obviously important. There are times where the difference between a capital and lowercase letter are very important (like "M" vs. "m" in a date format) so this is an appropriate thing to warn about. This isn't "WTF don't bug me", it's "Boom, done, never worry about it again." &gt; But the bigger point is that these warnings are irrelevant as long as the code actually does what you intend. Unless someone has solved the halting problem while I wasn't looking, you don't really know whether the code does what you intend in all cases. It's not possible nor practical to test all possible edge cases most of the time. &gt; yes, but I've saved hours and hours not working around the warnings that were actually trivial. I very much doubt that. Trivial warnings are trivial to fix. If you have a warning that is not trivial to fix, then it wasn't trivial. &gt; Think of it another way - somehow, people still produce solid production-hardened code with interpreted languages that have no compiler at all (gasp!). Kudos to them, but static analysis and tooling like this are some of the benefits of C#. You can produce "production-hardened" code in fucking PHP, but there are a lot of pitfalls in PHP that the C# compiler and tools catch for you. &gt; We should NOT start from a place of ultra-conservatism because it doesn't suit our businesses. Warnings-as-errors is not ultra-conservatism. It's a *one-time* cost to clean up your warnings that is sized to the level of crap you've let accumulate, and then an incremental cost that is actually non-existent because trivial warnings are trivial to fix. If you leave Warnings-as-Errors on, then you learn to stop writing code that produces warnings in the first place. If you let the warnings accumulate, then you end up missing warnings that matter.
there is a pretty cool thing called blockstack, a browser for a dezentralized internet using blockchain . see blockstack.org and maybe watch the "lunduke hour blockstack" vid on youtube... quite impressive imho
Software Engineering Radio has a recent podcast about the subject.
Need code, but I'm certain that data isn't too fast, depending on your baud rate you could receive over 1152kHz, or 115200 bits per second. You may want to buffer it before dumping to a text box though. 
 // This is a comment as indicated by the double-slashes in front and is meant to tell you what the hell I was thinking as I wrote this. // This is another comment, but on a different line. // So there's some code down there I'm going to talk about soon, but first I want to make sure we understand why this explanation needs to be written. // See, you might not have read the first couple of lines, so it's important to make sure you understand that this section is just comments and not actual code. // This particular line does nothing at all. // Kind of like what this line does, but it's got a different line number. // Can someone just kill me now?
I've played around with the .NET integration library for Ethereum, [Nethereum](https://github.com/Nethereum/Nethereum), a bit. They have some sample projects on Github if you're interested. I've been following Bitcoin and related projects for years, but mostly from a speculative standpoint. The possibilities of Ethereum have piqued my interest past that point and I have started to get more into the development side of things. In fact, I've been a software developer for 5 years and nothing has gotten me this excited. The disruption that it can cause to almost any major industry, not just finance, has me hooked. Edit: Spelling
&gt; The possibilities of Ethereum have peaked my interest The phrase is actually [piqued my interest.](http://blog.dictionary.com/pique-peak-peek/)
Ah, thanks!
Interfaces?
Yeah that's a good point, although I've never worked on code that old. I would hope code-review would catch that but that's probably just me being naive.
You could check out the [Selenium WebDriver](https://www.nuget.org/packages/Selenium.WebDriver) to automate Firefox. There are also some [headless browsers](https://stackoverflow.com/questions/10161413/headless-browser-for-c-sharp-net) you could possibly use to interact with the form and issue the postback.
Don't use the dotnet framework library for serial ports. As of v3.5 it was still buggy. There is a reason why there are several 3rd party libraries for serial and dotnet.
That's not a warning produced by the compiler. You've got some weird hooks going on if Visual Studio actually refuses to run your code without the proper comments.
feanturi.Kill();
&gt; There literally hasn't been a single serious bug that I've ever seen attributed to this. Probably mostly because code that generates warnings doesn't get merged, because it fails the build. I worked on a project for over 3 years, I kept seeing warnings crop up in the build now and then, and 100% of them were real problems that could cause bugs or unwanted behavior. Every other month there would be a new .csproj defaulted to warnings not being errors, and there would be new warnings and new code issues. I'd say about 10% were "harmless", but also *extremely* easy to suppress by improving the style of the code that produced them.
Do you want to instances a Pokémon-type variable using a the name of the class? It is possible, I did it some time ago. Do you want the code?
EF performance is ok, for most cases. At least I haven't had any performance issues with EF. 
There is a lot of desktop demand, it depends on the kind of companies. Also, there are a lot of web developers. But a good developer will try to learn everything possible, who knows when desktop knowledge will be useful.
I think you're misunderstanding. We've been running WITHOUT "warnings as errors" for 7 years and never seen a real problem slip into production because of it. All objections to this policy have been theoretical. FWIW, the first 4+ years of my career were spent in engineering orgs that HIGHLY valued warnings as errors. The first org was working in C++ and it felt like it made more sense. The second org was C# and extremely diligent and it felt like an impediment. The current company/practices are C# and have pretty much entirely validated that it's unnecessary for the type of work we do.
Non web/desktop? What about mobile development? Or IoT.
What's a higher quality description for WidgetId?
I prefer an app the looks and feel the same on all platforms, it is better for the user.
Nothing new? How old are you?
Parallel Linq
Twenty three years developing / managing code monkeys. Speaking from experience. Odds are you will end up at your early 30 working a corporate gig in a place not that much different from the one featured in Office Space. Every one will be building a "check list" type of project where the end result is "let's take an order from open to close through variety of "milestones" while remind people to jump through appropriate hoops in the process". If you are smart, by this end you figure out that "full time" is not worth it, you are on a contract and you do have some sort of network. You would get a dev manager like me who will demand to break Jira ticket into subtasks that could be accomplished in a span of a day. Your product owner would change his mind every 10 minutes, and at least one of the condition by which you would get your yearly bonus would be practically impossible. You would most likely not care about writing code at all, because at this point you probably wrote the same project over and over again for different companies and it feels just dull. You would suffer through "five minutes of hate" every morning where you are trying to bullshit me that you were not on reddit for at least half of your day and I will try to bullshit you that you are a valuable member of the team. By this point you would realise that all you need to know is how to build web app with variety of API end points and this would pay your bills and your mortgage. When I started, I worked for a Linux distro trying to change the world. Now I hold sprint retrospectives every two weeks and make sure that my coders don't slack off too much. Unfortunately 99.99% of all of you who would stay in this game will end up in the same position, if you are lucky, because at the end of the day, a good amount of coin could be made in this manner. Not jaded or cynical, just realist.
* Can it be negative? * How is a zero interpreted? * Are new widget ids generated by the database? * Are there any other "reserved" numbers with special meanings? * Why are you calling the widget's primary key "Widget ID" instead of the more accurate "WidgetKey"? 
&gt; Are new widget ids generated by the database? I'll give you this one, but in most cases if any of the others need to be said, that's indicative of a larger problem.
That's the problem with writing comprehensive documentation. 95% its just noise, but the other 5% of the time I really, really need to know the answer. That's why I've turned more towards using attributes instead. If I use `[NotNegative]` not only does it document that fact, it also lights up the validation engine.
Thanks for the background.
It's interesting but I don't see it taking off due to uncertainties with the legal system. Maybe i'm just not getting blockchain as a whole.
A conversation I've had far too many times: **** Fuck you! You just swallowed an exception that I needed to debug the application. Was it really so hard to write this? catch (Exception e) { Log.Write(e); return NotFound(); } You even had a compiler warning telling you that you screwed up the logging. *** Don't be that guy, fix your compiler warnings.
No its not. He's swallowing exceptions without logging them. Now I can't see the database error that was being thrown, causing every product page to return "NotFound". 
what uncertainties?
That's a good point, but I assumed it was simplified for the sake of example.
&gt; many of the default settings ask you to write in unnatural ways or make code harder to read. Then don't use those! Style should not be religion. Consistency, however, is worth the "inconvenience" of StyleCop. On any codebase that isn't a toy, anyways.
Why use StyleCop when you can use an auto-formatter that fixes issues such as spacing for you?
&gt; All of this perfectly fits the definition of a bike shed. No it doesn't. You have it exactly backwards. Bikeshedding is everyone feeling the need to put their own little touch on it. To have their *own personality* show in the final product, resulting in a Frankenstein monster mismash. The canonical example of literal bikeshedding: You put 10 people, one of whom is a literal Rocket Scientist, into a room and tell them to design a rocket. The other 9 realize (hopefully) that they don't know how to design a rocket and defer to the expert. 30 minutes later, they come out with a simplified design for a rocket. You put those exact same people in a room and tell them to design a bike shed. They all feel like they know what a bike shed should be. They *all* feel like the bike shed should reflect their preferences. 2 hours later, a bunch of angry people come out of a room with a travesty of a design-by-committee bike shed where the loudest people win. That is every developer insisting on their own style. Now, in the case of code, *there is no obviously superior Rocket Scientist*. We're in the bike shed example, not the rocket example. Picking one style that is non-terrible and sticking with it is infinitely better than everyone using whatever style they damn well please. Ask the Linux Kernel maintainers.
Legal uncertainties. For example, how to settle contract disputes, how to choose and enforce regulations, what contracts are even enforceable? I am not saying these can't be solved, they are just big issues right now. 
If you've got so many warnings that suppressing them on a case-by-case basis is a chore, then you have been ignoring warnings for too long.
&gt; However the commented of all public functions is fecking horrible! If you find the commenting of all public functions tedious, maybe you should look at your object model and consider why you have so many public functions and are generating and changing the signature of public functions so often. An over-abundance of public members is a code smell that suggests your classes might be too tightly coupled.
**Beginning C# 6 with Visual Studio 2015** And I'm not sure why anyone would ask for a "Beginning/Intermediate C# Book." No such thing really exist for any language, since writing across that with an "experience scale" is almost impossible without taking 12-1500 pages to accommodate everyone. The only books publishers allow to get that big are references, for the most part. Those are for relatively competent programmers (they aren't tutorials with exercises). Beginners need thorough treatment in core language topics. Intermediates only need a refresher chapter or two, for quick reference while reading the book. They should be beyond the basics already, which leaves room to pick up from where a beginner book drops off while giving comparatively thorough treatment to more advanced topics. When a book tried to cover all of that, it almost always ends up very lackluster, or incredibly huge (publishing and pricing issues follow - i find most programming books to be awful in eBook format, unless print replica). Typically, you don't want a 2 in 1. You want a beginner book, and when you finish it you get the intermediate book.
So the other guys checking in to your codebase can't auto-format it in a completely different way and check that in. IMHO, it's perfectly fine (and preferable) to turn off stylecop for local builds and autoformat everything to your own personal style while developing. What's checked in should have enforced consistency, however.
I don't think I have this backwards, dude. I don't think we're completely in disagreement here either. The examples listed here are great: https://en.wikipedia.org/wiki/Law_of_triviality Just replace the reactor with the team's main software system, and each of the details of the bike shed with styler rules and settings. It fits. 
&gt; Just replace the reactor with the team's main software system, and each of the details of the bike shed with styler rules and settings. &gt; It fits. Or replace details of the bike shed with bitching and moaning about styler rules and settings or passive-aggressively insisting on your own style when there are no styler rules actually enforced on checkin.
If you can agree on StyleCop settings, you can agree on auto-format settings.
With Entity Framework you lose control of the T from T-SQL. Also try loading a table and including a table that's mapped as a one to many then inspect the query. EF loads duplicate data for each row with a few column changes for the one to many because it can't use multiple selects. Also, with a large data set being returned most of the time is spent waiting for EF to use reflection to map the data back to the class. It's a great piece of software and I use it every day but even a well written EF query is far slower than a well written Stored Procedure in most cases. 
&gt; Or replace details of the bike shed with bitching and moaning about styler rules and settings That's my point and why it's stylers lead to bike shedding. &gt; or passive-aggressively insisting on your own style when there are no styler rules actually enforced on checkin. Some people just need to get over themselves. If someone can't bring themselves to at least try to comply with the previously established team standard then they have a problem that they need to get over. Because their own style (and their own ego) isn't that damn important that it should supplant the established style. I also have to add... you know what's more important than code that's consistently styled? Code that's done and delivering business value. This is hands down more important than anything else. The best developers *get stuff done.* The next most important things are buglessness, performance and being to modify and enhance later because it has a sensible architecture. Having a consistent style is one of those things too, but not quite so near the top. I dunno, I just haven't seen a styler rule set that actually, you know, led to a productivity boost. All I've seen is a bunch of wasted time &amp; discussion and argument over trivial pointless details that just don't matter and a lot of, well, stupid arbitary rules that we all have to comply with before checking in our code... Including requirements to write javadoc on private methods that nobody really reads but yet still has to be maintained if it's there and so only reduces maintainability overall... The problem is that bikeshedding is often a way of procrastination and that eventually leads to not getting anything done. https://blog.codinghorror.com/procrastination-and-the-bikeshed-effect/ I dunno, *maybe* I'd be ok with a fairly loose set of rules that can contained on a single sheet of paper if written in English in a normal size font - just the most salient, most important elements of style with everything else left up to the discretion of the code at the time. This is manageable even for a small team to hammer out in a day or two. In fact with a style standard such as this, it becomes easier to comply with and to catch violations of during code reivews. But to get a group of people to agree on a customized rule set--starting with the defaults? Hah! No.... To work with a default set of styles that someone else uses? Hah! No.... The latter here is just a recipe for a lot of unhappy coders...
We're talking about the style warnings and suppressing them specifically every time you go to make a debug change, and then reverting the warning suppression before committing. Not code warnings.
It's code analysis.
Well, yeah. StyleCop just ensures that you actually applied the format, either manually or automatically. I'm saying keep it as a checkin gate, not an every-time-you-build-solution gate.
Technically I believe you can do catch(Exception) and not have to specify e - so the warning goes away and you still swallow the exception
Our work gave it a try with microsoft a couple months ago as [a case study](https://microsoft.github.io/techcasestudies/redback-devops.html). We haven't really used it since, but it was cool getting used to the technology at the time. However, as you can see we used Truffle and solidity, not C#.
It's like staring at a piece of art. Two lines of code, but a paragraph from each person who touches it with their own interpretation of the rorschach
True, but that takes more conscious effort. (And I can search for it.)
Yes, compiled and non-compiled too. But it didnt help
Stratis are not the only ones ;) IOTA (sadly out of date): https://github.com/iotaledger/iota.lib.csharp ARK: https://github.com/ArkEcosystem/ark-net
I had a serial program that the DataReceived didn't receive everything I expected at the same time. What I needed to do is have a public string called 'data' and inside 'DataReceived' event I would say 'data += port.ReadExisting()'. Then once I received a specific string (in my case, 'OK'), I would continue on with logic code. It's rough and messes up when I send multiple commands, but it worked when the program was new. There are better ways to do this when you know exactly how long each data burst is. Check this out: https://msdn.microsoft.com/en-us/library/34t733fh(v=vs.110).aspx You can set a character array to save to (buffer) and the number of characters you expect (count). What I'm using now is port.ReadLine(). https://msdn.microsoft.com/en-us/library/system.io.ports.serialport.readline(v=vs.110).aspx My machine spits out a carriage return ('\r') after each burst it sends. In this case the 'port.ReadLine' line of code will block the thread until I receive everything up to the carriage return. It allows me to send a command and wait for the response. The port reads very fast so it is never an issue. 
Correct. I was just saying incase it wasn't known. As a side note, off topic but since I saw your other comments I agree the exceptions need to be logged as much as possible, if possible. I've come across libs though that sadly use exception handling as *part of the design* and you're expected to handle them and branch logic based on which ones. Yeah, I vomit when I'm forced to handle them that way but I didn't write them :(
Kind of off topic, but is size really that large of a concern with your packets? A single tcp packet payload is just shy of 1500 bytes. I'm building a server app at work right now and I essentially have just wrapped my data processing into a MemoryStream with a BinaryWriter and BinaryReader for slapping my data in there and then I have a packet header that gives some important info like the data length and CRC. Unless I'm sending a file or long strings of text over, my packets rarely exceed more than one TCP packet. It sounds like you're building a game of sorts and I likely don't understand why you're doing this this way, but I prefer the KISS model when it comes to initial design :-)
sudo pkill -9 /u/PartyByMyself
If binary size is your concern, you'll want to use a third-party serializer/format like protobuf or msgpack. The output of `BinaryFormatter` is *extremely* verbose, and so are the text-based JSON and XML serializers of course.
Specifically referring to your steps, there's also a first time license agreement page, if that'll matter.
i see no use case for blockchains apart from crypto currencies.
Other than as an anonymous currency and therefore exploitable one, I really don't get it. It strikes me as a really cool tech that's still in search of a use. Are there any cool or even vaguely useful applications out there that utilise it? Other than as a payment mechanism that is.
If you know that the download URL is not gonna change anytime soon i think you can just use "http://downloads.cms.gov/medicare-coverage-database/downloads/exports/all_lcd.zip" as download url. using (var client = new WebClient()) { client.DownloadFile("http://downloads.cms.gov/medicare-coverage-database/downloads/exports/all_lcd.zip", @"C:\all_lcd.zip"); } Second argument can be changed to whichever path you want it to be. This solution is ofcourse very easy and dirty but i'm not sure how dynamic you want this script to be.
For the record I already have another job lined up
I know the title is "I left because of it", in reality there are a bunch of reasons why I left. I just really freaking hate that this was one of them and it was larger than I imagined. If it was as simple as having it generate it for me, it wouldn't have been a larger issue. But it simply doesn't, or at least the tools we have don't cover enough of the rules they insist on. It's a mess, and it becomes a sickening routine of checklists. Did I check out the project file, did I disable the warnings as errors options, make changes, remember to turn warnings as errors back on before putting up a code review and address them. Then code review feedback comes in, repeat turning off the option, fixing issues or debugging, back on, fix comments, put in review. Then out of review and submit, making sure I didn't do any last minute debugging and testing and turned the option off again. Repeat that process multiple times a day for a year and you want to blow your brains out. And heaven fucking forbid you accidentally commit the project file with it turned off by accident, you just murdered someone.
I missed replying to this one earlier. So I didn't go super deep into it, I just ranted about the basic requirements. There are way more rules set than just public method definitions. I didn't discuss architecture issues but it doesn't mean they don't exist. In fact, the push for this requirement of commenting is completely overshadowing the architecture issues that do exist. Instead of tasks to fix architecture issues, we have tasks to add code analysis to old projects. Nothing more. Metric shit tons of whitespace changes. But no actual code changes when the code itself is rotten. They're so focused on it as opposed to fixing. Styling old code shouldn't be a priority, but it is.
Hi, I took the test in February this year. &gt; How many question will be on the real test? The actual amount of questions is not fixed. They should be around 40 if I'm not mistaken. There may be some questions in it which will not count towards your result. &gt; How much time will I have to answer them? If I'm remembering correct it was 2 hours. &gt;What is the limit to pass? (e.g 80%) Every question gives hidden points. You need 700 to pass. Just focus a little on the question you didn't answer correct on the practice tests and fill in everything you don't know. The rest should be easy.
Posted the code in a pastebin in the edit. Also its a windows form app in visual studio
Well I thought I knew how long each data burst was but if the program is dropping numbers after a decimal I'm not so sure anymore. I expect to receive 3 bursts with the F, R, and P value respectively. I'm pretty sure the machine is sending a break line code at the end of each burst. Maybe I could use that somehow. I just don't see it appear in any strings or variables when I read the line so I'm not sure how to format around it. I've added my current code in the edit above if that helps
baud rate is 9600 but you're right its probably not an issue. I had to code with applescript recently(gross) and had issues where I was trying to do too much at once with the system trying to keep up.
Are they easily findable with NuGet in Visual Studio? Are there any in particular that you recommend?
The MS tests are adaptive, meaning that there's no set number of questions, but they will also change the questions they will ask based on your responses. So if you answer a question or two wrong for a section it will ask more questions for that section. One of my personal gripes about these tests is that they can sometimes be overly pedantic and nitpicky about syntax (and of course your not allowed any resources). I was taking the database developers test several years back and MS was pushing their new XML feature. They had questions that had small subtle variations in xquery syntax, which I got wrong and they kept asking more. I failed that test by one question because they loaded it with questions that in the real world I'd just have the reference up on my other monitor or try it once or twice till i got right. All for a feature that few people use in the real world that MS wanted to push. Needless to say i don't really think super highly of those certification exams.
Thank you for your input. You are further confirming something i have already read on a lot of places, being that the certificate tests are very "memorization"-based rather than "understanding"-based. For this reason, like you, i dont think so highly of it either. However i am getting paid by my job to take the certificate so i figured why the hell not. As an example of why the test can be stupid i recall a particular question where, to answer the question, you had to know wether or not you call .MaxSize or .Capacity on a collection to get the, well, capacity/maximum size of a collection. 
Thanks alot! Now im curious about the "point system". Am i wrong in assuming that the maximum amount of points you can get is 1000?
I receive data with this class without issue, but I also don't care if responses are missed, because I am doing a live value from a measurement device. Where I commented I would add to a list/fifo structure and then call the formatting when you have received an entire message. You may be on to something with missing data because you are doing to much between messages. You may want to do some multi threading by creating a formatting thread that breaks a few time so the COM can receive between. https://pastebin.com/hqTxhNdr 
The is no max amount visible for points given. After the exam you get a report with your result, the passing score and your score. There is a diagram which shows your result in % for the 4 different categories.
And i was in a similar situation, so i took them as well, but i wouldn't spend my money, or advocate that my company spends money on them. Yea, just memorize as much as possible. For the WCF exam that i took and passed, i memorized far more than i did for the DB dev one.
Okay thanks. Since the practice test uses an 80% limit to pass i will assume the limit is around there then!
I may have an idea. The machine doesn't send anything to the computer saying that its done sending data, but is there some way I can tell the program that if it hasn't received anything for a few seconds then the machine is done and can process the data received? Like what if I had a bool that turned to true when it received the data and after so many seconds without receiving anything it turned to false? and then when it turned from true to false have the data be processed? Is that doable?
If you want a timeout, then use the stopwatch class. Wrap your receive in function, start the timer on the first received char and exit the while loop at a certain millisecond. I would write an example but am on phone.
Local development on macOS or Linux, deployment to Azure would be our preferred model. Having to run a Windows VM sucks (not everything we want to do will run under the non-Core Mono).
This is exactly what I was looking for; but I didn't see how to find out where the file was stored. How did you get from www.cms.gov/medicare-coverage-database/downloads/downloadable-databases.aspx to downloads.cms.gov/medicare-coverage-database/downloads/exports/all_lcd.zip ???
This was the assumed route I was going to take because I didn't know where the file was located. I'm going to try the direct download method first as I don't think the URL will change. Thanks!
So I've used string functions like - IndexOf, Contains. Then I've created my custom automat. here is snippet of code: private string Parse(string line, int index, string startingString) { var position = index + startingString.Length; var msg = new StringBuilder(); for (var i = position; i &lt; line.Length; i++) { if (char.IsLetter(line[i])) { msg.Append(line[i]); } else if (!char.IsLetter(line[i]) &amp;&amp; !string.IsNullOrEmpty(msg.ToString())) { break; } } return msg.ToString(); } Index - it is value returned from string.IndexOf('The text I know'). StartingString - it is 'The text I know'. I know the index, the length, so I can loop through the line.
Removed: Rule 5
Datagrids are virtualised unless you have that turned off, this is done for speed. This will have effects on you if your user tries to select more than a visible amount of rows. What you need is data binding with an observable collection using a propertry changed event. Then you set the checked bool of your collections object as true and the datagrid reflects it. Much smoother and faster. Something like this: https://stackoverflow.com/questions/34423422/wpf-datagrid-cell-value-changed-event Try for two way binding on the checkbox of your datagrid row or whatever.
Experimenting, I have the timer initialized in the form load, but the program doesn't recognize the timer when I'm inside the data received handler, do I need to make a delegate for the timer?
I believe so.
Some interesting new (still proposed) features in C# 8. 
The way I usually approach these things is to open the browser's developer tools and watch the requests being performed when you use the website. Next you figure out what cookies and headers (if any) are required and emulate the same in code. There are advanced tools like Fiddler for stuff like this, but often the Firefox or Chrome network tab is sufficient.
I just used the chrome devtools (F12). On the network tab you can see every incoming/outgoing request and clicking on the submit button initiated a request to the url i mentioned :D you might need to hover over 'all_lcd.zip' to see the actual full URL.
You're looking for an OCR library. There's a few, but I personally don't have a lot of experience with the C# OCR libraries. * [Iron OCR](http://ironsoftware.com/csharp/ocr/) * [Tesseract](http://www.c-sharpcorner.com/article/ocr-using-tesseract-in-C-Sharp/)
There should be a common configuration file for settling matters like this.
Good advice. Experience, in my experience, is being faced with new challenges well outside your comfort zone and thinking 'I faced worse' then breaking down the problem bit by bit until you have developed your solution. Then a brief, fleeting, rush of accomplishment until you crave your next conquest. 
It'd be more efficient to just find the final index in the loop and then use a single `Substring` call instead of building the string char-by-char in a `StringBuilder`. Also, `string.IsNullOrEmpty(msg.ToString())` is wasteful since will create another copy of the string. Just check `StringBuilder.Length`.
No one wants to post their favourite brain dump?
If we get (non-)nullable reference types and 'extension everything' (shapes), I almost don't care about the rest.
Thanks for advice with StringBuilder.Length. But how would you know, which index is final? Let's say I have: 'TEXT I KNOW [MessageIWant] SOME OTHER TEXT' For me it's important only MessageIWant.
Same way you know when to stop appending characters right now?
00110101 00110001 00110000 01010100 01101000 01110010 01100101 01100001 01100100 01100101 01100100 00101110 01001011 01101001 01101100 01101100 00101000 00101001 00111011 
Binary translated: 510Threaded.Kill();
01100111 01101111 01101111 01100100 00100000 01100010 01101111 01110100 
Binary translated: good bot
You are using readExisting(), like I said in my post it might not be getting the full string at once. Maybe just "F 1.00 R". Then a msec later will get "2.00 P 3.00" When the machine sends a break line code, c# might not read the \ character, because that is an escape character for strings. Here is what I would do to start to investigate. In your form make a new richtextbox. In data handler, keep adding to that rich text box with the inputs from data handler. Data handler() { //The work you are currently doing... richTextBox1.Text += "new burst" + indata;. //you probably need to invoke this/use a delegate because the UI is on a different thread. } This way you will see what bursts the port is sending out at each time. I don't think you are getting the full string at once, so it messes up your if statements. Also, your if else statements are all nested, they don't need to be. Use "else if". Currently: If(a) {} Else { If(B) { Else { If(C) }}} Instead do this: If (a) {} Else if (B) {} Else if (C) {} Else {} 
By default relative paths are calculated from the execution path. Generally the execution path is the directory from which the executable was launched. You can manually change the current execution path (by setting the System.IO.Directory.WorkingDir, or setting the working directory in the shortcut to the application) or you can provide absolute pathnames for all file operations. However, if you want the file to appear in the subdirectory of a Different application then you will have to specifically request the path of the target executable. (For example if you write a program "WowAutoConfig" which creates a .config file used by "world of warcraft" then you will need to ask the user to provide the directory into which they have installed world of warcraft. The reason this is the case, and you can't simply search the HDD for the installation directory is because, let's say that you know the application that launches World of warcraft is Wow.exe... you can search for a file name "Wow.exe" but it won't know the difference between blizzards "wow.exe" vs any other file named "wow.exe" 
If you're willing to seek out third party libraries, I'm pretty sure there's serialization libraries out there designed to optimize the payload size. Granted, I believe these generally come at the cost of slightly increased processing. One that comes to mind is Google Protobuffers, but I'm sure there's others out there as well. 
The performance gained by utilizing threads will be dependent on the percent of processing that is utilized by parsing the line. If it takes you 10ms to read a line, a 2ms to process it then using a task will save you at most 1/6th the time... however, if it take 10ms to read a line and 20ms to process it then using tasks could save you up to 2/3rds of the processing time. The gain in performance will also depend of the fact that the machine running the application has enough separate processors to process the peak number of simultaneous operations... if it is a single processor machine then using tasks is unlikely to save much time at all, as the same amount of time must be spent on each thread in serial even though it "Could" be done in parallel... and if you have only a two processor machine but say... 3 or more tasks are dispatched in the amount of time it takes to full process one task then you will gain some time, but not the full amount because there will be a growing backlog of tasks to be ran as task creation outpaces task completion. --EDIT-- Off the top of my head, I am not certain how it would be accomplished... but you might have luck splitting the file read to different threads, each thread reading a segment of the file and processing each line within that segment, rather then using a separate thread for processing each line. Off the top of my head, I don't know the easiest way to read a file from multiple threads without causing file access issues (It can certainly be done though, look at apps like baretail for example).
Is 'extension everything' the full [Shapes proposal](https://github.com/dotnet/csharplang/issues/164) or a subset of it? If not, will it allow full shapes later?
Nope, it's just extension properties, operators, and maybe constructors. But we can still hope ...
Not useful directly if you saw the recent video, but the links on this page cover each feature in more detail.
The full Shapes proposal is quite radical. I wonder if this is a stepping stone along the way, or if it will kill off the idea of Shapes?
Unless you have many tens of thousands of files, efficiency probably won't be too big of a concern; it'll probably go pretty fast, and almost certainly fast enough for a one-time-deal to produce a report of a list of files for your DBM to look at. Check out the [`Directory.GetFiles(string path, string searchPattern, SearchOption searchOption)`](https://msdn.microsoft.com/en-us/library/ms143316%28v=vs.110%29.aspx) method. With that you can have it search for specific file types and in all subdirectories of a root path. (If you have some memory usage issues or _a lot_ of files, you can also check [`Directory.EnumerateFiles`](https://msdn.microsoft.com/en-us/library/dd383571%28v=vs.110%29.aspx) which does the same thing but lazily, one path at a time.) Then for each file, you can use the [`File.ReadAllText`](https://msdn.microsoft.com/en-us/library/ms143368%28v=vs.110%29.aspx) method to read the file into a `string`, then you can do any simple `Contains` or regex search for your keywords. See if something simple like that works fast enough for your needs before diving into anything more complicated. It'll probably work fine.
This is a prerequisite for the Shapes proposal, or if you prefer "step 1".
I feel happy with that - it seems like a good plan to cautiously execute this radical idea. 
If you have a local copy of the pages and your list isn't too long, you can turn on indexing for the folder and use the Windows search bar in explorer. Otherwise, write some code to iterate through the directory structure. Open each file as text and read it into a string, where you can then do a regex or an IndexOf. 
Ah, boo. I thought it was the whole thing (hadn't had time to watch the video, yet). Still pretty cool stuff.
Save yourself an hour and read my summary: https://www.infoq.com/news/2017/08/CSharp-8
I'll try out the rich text box new burst idea. I'm just worried that the bursts are inconsistent with whats included and I won't be able to properly format easily. I figured there should be some way to use an else if, just visual studio wasn't correcting for it so I figured a nested if statement would work for now. I'll get it sorted this afternoon.
Since they implemented extension method I've always felt kinda strange about the syntax. Would've been much nicer by extending members by specifying the typename. E.g.: public static class Extensions { public int string.Spaces { get { return ...; } } public void System.Drawing.Bitmap.Clean() { //"this" can be used to reference the bitmap it extends ... } }
There is a goto statement... it should never be used.
About the last point: C# explicitly forbids case-fallthrough in switch statements, so a missing break because of someone removing the return is a compile-time error anyways.
I think it is around 70% but not a fixed 70%. Practise test probably uses 80 as a safety net. Better to miss a few and get 790 than miss a few and get 690.
Right, which is why you would have to manually comment/uncomment that line to prevent the warning, exception and disambiguate the intent of the code... which is why I would think that having it there uncommented regardless of wheter the return is in that block of code or after the entire switch block would be preferred even though it gives the "unreachable code" warning...
 extension CustomerExt extends Customer { //methods and properties go here } Is the `extends` keyword really necessary here? I don't see why it wouldn't just use `:` like in the rest of the language.
In the first case, that could be upset because the lack of a protection modifier on `nodeData` is scoping it to internal. If it's not set in your assembly, it may actually be a bug, though it's one that should show up on build. You could fix this by making its value a constructor argument (so it's set when the object is created), or making it public (it's going to be managed by a different class, right?), or writing the class that's actually setting it, so it's no longer uninitialized forever. In regards the switch statement switch(foo) { case 1: // return bar; } does not *build*. If you remove the transfer of control from the `case`, you don't introduce a run time bug, because your build fails. The `break` is unnecessary, because you either have something equivalent (a `return`, `throw` `continue` or even a `goto`) or a build error. Even if warnings-as-errors is turned off. If the warning really is erroneous, though, suppressing it is the usual approach to solving the problem. If practical, suppress it in-place and leave a comment explaining why.
Sorry I didn't reply sooner, been busy on the ASP.net portion of this bootcamp now and this project has been put on the backburner. I just downloaded the zip so I'll look it over. Thanks so much for the help.
Obviously they felt the difference between simulating inheritance and actual inheritance was important enough that they should use different syntax.
Reference types are non-nullable by default now? Yeah, that's going to make upgrading to C# 8 fun... all those compiler errors!
For async streams I think I would prefer the await foreach syntax instead of the proposed foreach await because it would read like await-for-each and that kind of makes sense..?
Maybe, maybe not. How often do you write code that actually wants the variable to be null?
Good question! I guess I'd have to try and upgrade a project to find out...
FORTRAN! Modern FORTRAN is different, possibly, but when I was writing FORTRAN in 1969 (FORTRAN IV Level G), a variable's *type* was indicated by its first letter. Variables starting with i through (if memory serves) n were integers. Therefore i (and j, etc) was an obvious choice when writing a for loop. Thanks for giving me an opportunity to relate my ancient knowledge. ;) How about /r/n being referenced as carriage return, linefeed? Typewriters! The carriage was the part of the typewriter that moved one character's width to the left, each time you typed a key. The paper that the keys struck was wrapped around a tube on the carriage. Eventually you would get to the end of the line, and have to move the carriage all the way right, so you could type at the left margin of the next line. There was a lever for doing that. On my typewriter, the first thing that happened when you pressed the lever, was the round tube that the paper was on rolled up one line's worth, so typing would resume on the next line on the page. Linefeed. Then you would press the lever to move the carriage all the way to the right. Carriage return -- returned to the position for typing the next line.
Can you iterate on the entries and compare against their [`TimeGenerated`](https://msdn.microsoft.com/en-us/library/system.diagnostics.eventlogentry.timegenerated%28v=vs.110%29.aspx) property?
Yes, that works perfectly. Simple solution I couldn't even think of, thank you for the help!
Extension everything sounds very powerful. Especially extension interface implementation. I hope that gets added.
&gt;Assigning a null to a non-nullable reference type will be a **compiler warning**. Likewise, reading from a nullable type would be a **compiler warning** And &gt;Consider a scenario where you know that the nullable variable x isn’t actually null, but you can’t prove that to the compiler. In this case you can use x!.Method() to suppress the **compiler warning** Won't be errors it seems, just warnings? So the code would still compile unless you have warnings as errors enabled. This actually seems like a huge difference; last time I remember looking into it they were going to use flags on the project to determine whether or not references were nullable by default (so "legacy" projects would get flagged and work exactly as they did before 8).
I see it the other way, I am not awaiting the for-each I'm awaiting each item in the for-each
The break is unreachable if the case returns. I usualy just leve the commented out break. 
That's kind of the point? You are awaiting for each element no?
Kotlin does this, and i absolutely love it!
I think he means that he sees it as *"foreach element in the async enumerable, await the item and then do something with it"* instead of *"await the result of running the foreach on each element in the async enumerable, after doing something with it"* Or, in a non-compiling code example: foreach (var item in await asyncStream) { //Do something with the item } As opposed to this, where a foreach would then logically have to return some task-like thing that could be awaited. await { foreach (var item in asyncStream) { //Do something with the task, potentially awaiting it } } I.e. you await 'each item' in the foreach, instead of awaiting 'the result of' the foreach and therefore place the `await` after the `foreach` instead of in front.
I feel like 'extension' keyword signifies it enough.
And I finally found it after about 30 min. https://msdn.microsoft.com/en-us/library/system.windows.systemcolors%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396
I think Java has better tutorial books and resources for beginners, though. That's a huge advantage for that ecosystem. 
Yea, I do like that they are using warnings instead of errors. That's going to make it much easier to gradually introduce this.
Surely if they remove the return they just add the break. I don't like leaving commented code in just in case I change it.
Do you not assign nodeData in the type's constructor?
Any time I don't want the compiler to complain that an object is not assigned. Foo foo = null; try {... foo = something();} catch {...} // do something with foo
How about: int GetId(String Alias) { int ret; switch(Alias) { case "a": ret = 1; break; } return ret; }
When I genuinely need the "warning behavior" to be as is, I suppress the warning with [`#pragma`](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/preprocessor-directives/preprocessor-pragma-warning) or [`SuppressMessage`](https://msdn.microsoft.com/en-us/library/ms182068.aspx). I justify it because I've taken the time to acknowledge the possibility of an issue, and ensured the behavior is what I want, rather than the warning being from something I missed.
This, plus if you find a genuine case where a "warning" is never correct or you categorically disagree, you can (and should) make a custom ruleset and add it to the project properties (under the Code Analysis tab). For new .Net Standard projects, you can still add it to the csproj directly but it doesn't have a UI for it anymore.
no, preferring inline definitions like new thing(){attribute1=value1, attribute2=value2}; 
So mark it as `Foo?` and check for the null case (seems apparent to me that you have a null case to deal with there and it's nice that the compiler is telling you about it), or deal with the fact that NRE will be thrown when you access it using `foo!.Blah()` and it's null.
Check out App.Metrics. With oauth tracking you should be able to get a gust of usage. 
With a big fat comment saying why its unneeded. 
Always. ;)
The first suggestion is fair, but allowing an NRE makes me feel dirty inside. I suppose I'm just used to null reference types.
How's the code going? I was working on my serial port program today and added another tool to it. A dataq DI145. Fun little tool and it has a .Net library too. 
I love their internal operator naming. First we got the Anders operator (=&gt;) with lambdas and now the dammit operator. 
There is no magic and the compiler doesn't guess the intent of the code, but the warnings have been added to it due to an extensive past experience. When the compiler warns you, first engage brain. Are you sure you can't do it better and without warning? If not Use #pragma with an explanation next to it, *why* you used it. If you can explain it, you're done.
I wonder how that's going to play out. Definitely need a null check after the try block to avoid a possible NRE. 
Most of our clients used to contact us when they wanted to [hire iOS developers](https://www.spaceotechnologies.com/hire-iphone-developer/), but since 5-6 months, we were getting a lot of inquiries regarding Blockchain development. So one of our team spent time on it to identify the opportunities and its market. We found it exciting, challenging. And then the same development team started learning it. In fact, they recently [developed a Bitcoin wallet app](https://www.spaceotechnologies.com/create-bitcoin-wallet-app-payment-integration/). I won’t say they are expert as of now, but, I’m sure they are learning it very fast. If you have any project in your mind, feel free to contact them. 
If I was reading that code I would think "lets see what get id does, if it's an 'a' it is returns 1. Next... break, what's this break for? Is it missing a case, maybe it got deleted, wait, maybe it's for a default?" The last thing I would think is that it was left there just incase some one wanted to modify the code. I mean for real, if they are going to possibly change code, how would adding 'break;' be so inconvenient? I could write a sentence and leave extra words at the end just incase I may want to come back and change the sentence later. then the cat sai Or I can make sense.
Kotlin is a great language. It will accelerate the death of Java. 
Old enough to know better, not old enough to care. 
According to [this post](http://www.telerik.com/forums/mnemonic-activated-without-alt-key#9r3xT10zk0C_dbvBsBowpQ) on another forum: &gt; According to this link: http://msdn.microsoft.com/en-us/library/dn742465.aspx, "Access keys are used to interact with controls directly instead of navigating with Tab. They are combined with the Alt key and indicated with an underlined letter in their label." &gt; Looking at examples from other applications, such as Internet Explrorer, and Microsoft Word, when an edit control (such as a drop-down) has focus, the access keys are accessed in combination with the Alt key. **When a non-edit control (such as a checkbox or radio button) has the focus, access keys can be accessed without the Alt key**. You can see this behavior in the MS Word options dialog (attached). Users expect that when a drop-down has focus, pressing a key will select an item in the drop-down, not activate some other button on the screen. (Emphasis added by me.) As per this post, I just tried this in Microsoft Word 2013. From the Home Ribbon, I clicked the bottom-right corner of the Paragraph section to bring up the Paragraph Settings box. I went to the Line And Page Breaks page, clicked in the Widow/Orphan Control checkbox, then pressed 'X', which is the shortcut for Keep With Next. Sure enough, pressing 'X' toggled Keep With Next on or off. So it seems this is absolutely standard behaviour, not just in C# or .Net or WinForms, but across Windows applications generally.
I'm very interested in Ethereum smart contract development but I haven't had the time to divulge into solidity. However, I'd definitely be interested in developing them in C#.
Are you looking for a framework or advice on how to do it on your own?
That makes sense. After your comment I would say `foreach (await var item in asyncStream)` is clearest because it happens per item and not over the whole stream or the `foreach` itself.
Great help, thanks! :) 
&gt;bikeshed +‎ -ing. The term was coined as a metaphor to illuminate Parkinson’s Law of Triviality. Parkinson observed that a committee whose job is to approve plans for a nuclear power plant may spend the majority of its time on relatively unimportant but easy-to-grasp issues, such as what materials to use for the staff bikeshed, while neglecting the design of the power plant itself, which is far more important but also far more difficult to criticize constructively. It was popularized in the Berkeley Software Distribution community by Poul-Henning Kamp[1] and has spread from there to the software industry at large. https://en.wiktionary.org/wiki/bikeshedding
You can write smart contracts in C# if you use Neo. My guess is developers will opt for that
Have you looked into Stratis ( https://stratisplatform.com/tag/smart-contracts/ ) yet? They're devoted to C#.
Early return is generally superior to single point of return for maintenance and readability, since we have try/catch/finally for error handling and things that must be done, regardless.
It makes a pretty massive difference in startup time. Not certain it makes a really meaningful difference once it's up and running, but if you're opening VS a lot it's huge. 
Thanks for your thoughts, but it seems that Neo's smart contract development is nowhere near ready yet. It also seems at the moment that Ethereum is winning the public, programmable blockchain race - as a developer you want to build on the platform that the most people will use and at the moment (and seemingly for some time, given the current market cap disparity) that is Ethereum, right? These are the reasons I was thinking it might be desired, but potentially you're right
Thanks, yeah I really like what they're doing - the only concern I have is that right now they're far away from having a public, smart-contract-enabled blockchain. It will be hard for them to compete in a race with Eth, for example.
If I was writing in, say, C or C++, which allowed fall-through, I might want to put the "break" there as a guard against someone removing the "return". But I think the point is that in C#, it's not necessary, because if someone removes the "return", the compiler will *force* them to put a "break" in. Having both of them there is totally unnecessary, and might be considered confusing.
+1 for suppressions with big fat comments, after careful thinking about whether the CA supposed error is not really a concern.
I use a PCIe SSD at home for hobby work and a 5400 rpm HDD at work. Once up and running there's virtually no noticeable difference, although as you said the loading time is night and day
I've found it makes a HUGE difference at compile time. VS writes to a lot of files - SSD use has at least halved my lengthy compile times. 
How about the projects, should I store them somewhere else?
appreciate the answer. The projects should be stored in the HDD?
The fairly frequent update timings of 2017 are also nicer with an SSD. Honestly though, it's pretty hard to install VS onto any drive other than C in a way that actually saves you any real space, so the point is kind of moot unless for some reason you have your OS installed on the HDD.
SSD if you have an opportunity. I use hdd at my workplace and ssd at home. It is night and day. Any code analysis feature like CodeLens or Resharper works alot faster. Compilation times are faster. Switching between tabs. Switching between projects, and reps. At home I see that I'm bottlenecked by my CPU (I5 4690k). At work it is definitely my slow drive. Also having more than 8 GB of ram helps if you are working on some heavy projects. Or have multiple studios + smss open at the same time
Honestly, SSDs wearing out is a furphy. There's pretty much no remotely sane workload where the controller on either your SSD or HDD won't die first. The basic questions are as follows. 1. Does what I'm doing involve long sequential reads (ie videos)? 2. Do I have enough space to store this without having to give up on something whose load times I care more about? If your answers are No and Yes, put it on the SSD.
Yes indeed. Keep us in the loop!
Project content on SSD. VS itself it doesn't matter apart from better start up time as already mentioned. Basically everything on SSD if you can.
&gt; allowing an NRE makes me feel dirty inside. Isn't it what you're allowing right now? Or is the `catch` clause returning or re-throwing and C#'s flow analysis is just too dumb to realise?
advice on how to do it on my own but if there is framework that can do it why not. I have no knowledge if exits. Actually i'm not even sure how to google this to possibly find answer on my own. I mean i tryied but i don't know how exactly call this what i need to make.
If you do that anywhere, doesn't the warning disappear?
update me as well, i would be interested
If your 30.000 computation are all independent, what you want is basically just MapReduce. I don't have any experience with MapReduce in .net but it should give you a starting point. 
Are you going to compile C# or IL? I'm a bit interested in the concept from technical standpoint. 
Why can't you just default nodeData to satisfy the warning? I think the syntax is "nodeData = default(T)"
I have the rich text box incorporated now, The bursts appear to be exactly what I would expect them to be. "F 32.0" "R 2.2" and "P 0.000". they come in those three sets. Now I'm trying to figure out how I want to make the program handle the formatting. I'm thinking I could use a timer to countdown how long its been since we received data and format what we received once the timer is up, or I could put an if statement in the data received handler looking for that "P 0.000" and then format everything at once, or I could try and make a new event handler for when the in data variable includes the P burst. I'm still new so I'm not sure which would be easiest. Hard to get all this done while also helping with production and running the tests I need to do. Tinkering away at it slowly.
They talked about it in the video. They plan to allow you to implement interfaces in an extension making the original class compatible with the interface. 
Why are you reposting it? Is there any new information or content on the article? https://www.reddit.com/r/csharp/comments/6u50ri/disassembling_net_code_with_benchmarkdotnet/
Thank you Sir i'll give it a try on google. Now i have a start point. Thank you Sir one more time.
I think most people would agree that, generally speaking, installing *everything* on SSD is the way to go, if that's an option. 
We can make this work. If it is always that same number of characters each time, this is easy. If the number of characters changes, it's harder. (Example: is it always P 0.000, or will it sometimes be P 0.0) If the number of characters is the same, wait until indata is an exact number of characters then continue. Indata += port.readexisting() If(indata.length == 20) {Do work} You can specify how many characters to wait for. "F 32.0 R 2.2 P 0.000" is 20 characters. The program will wait until 20 characters fill up the string then continue. Then with the string you can pull the characters you need out of it at specific locations, instead of searching for the location of the letter. Use string.substring(). https://msdn.microsoft.com/en-us/library/aka44szs(v=vs.110).aspx See if you can make it work, if not, I can throw together something for you. 
Removed: Duplicate.
Unfortunately the string isnt always the same number of characters. R can be anything from .0 to 27.34, and P will read .0 or 0. in certain events, if it starts with 0 its accurate to 3 decimal places, if its above 1 its only accurate to 2 but again I sometimes get 10.73. I'm trying a similar method right now, using the same method as in the code I linked in the edit, but once in a while I don't get a whole burst at once, or the computer reads the burst before its done. [as seen here](http://imgur.com/ZdYrPns)
That looks like a mess. I'm confused why it keeps repeating the same characters it already sent. That might be something funky with the code. Can you repost your new data received method with the new rich text box addition? I may be wrong but it seems to have a new line or carriage return after the last number in the line. In this case you see if the string contains @"\r" or "@\n", instead of 20 characters. Yeah the output of that machine is a fucking mess too. Would you be willing to share what it is so I can read the docs?
Check out [this Microsoft blog post](https://blogs.msdn.microsoft.com/dotnet/2017/07/26/the-new-net-application-architecture-guidance/) discussing enterprise architecture designs. Might find something there that works for you.
You'll find that opinions vary on this subject, if you StackOverflow it.
Cautiously interested.
I'm well aware.
Its probably repeating the existing characters because ReadExisting doesn't clear the buffer like ReadLine does. At least I think. the code I have printing the burst is richTextBox1.Text += ("new burst: " + bursting + Environment.NewLine);, there isn't a new line code at the end of the burst I just put in the new line to make it legible. I'm working with a TSI certitest 8130 machine. The manual doesn't have much in it except for the RS232 properties and some code in basic to output the results.
Like another commenter, I'm very interested in how this will work.
Yes , keep us updated 
What is your transmission method? If it's HTTP then just turn on HTTP compression. This way it's transparent to you. What ever method you choose it should be transparent to your models.
The main guy behind this is a Microsoft MVP and is hands down one of the best coders I'm aware of: https://github.com/MassTransit/MassTransit/tree/develop/src Check out the *.Tests projects. Also uses shouldy: https://github.com/shouldly/shouldly for the assertions.
Thanks!
For what environment? Web, desktop, cave wall? Or are you simply trying to visualize the diagram to a file such as a PDF or image?
C# - I'm using the syntax tree generated from Roslyn, and essentially rewriting the compilation to output EVM assembly instead.
Go for this if you're looking for something easy and basic: https://github.com/AlexSartori/Raspberry-GPIO-Manager
Genuinely depends on the author. If you have an MSDN subscription there are 50+ free courses that should cover everything you need.
Scott Allen is great, IIRC hes the author of some of the videos on pluralsight. I watched some of his ASP MVC videos while getting up to speed on that from ASP Pages years ago If you are new to programming picking up C# will take a while. You will have to do some side projects or actual work to learn programming well.
Microsofts own EF Core : https://docs.microsoft.com/en-us/ef/core/
So the lack of lazy loading or group by doesn't bother you?
Not really, the former can be worked around with good caching to avoid hitting the DB as often in the first place. The latter is a bit of a pain but they will get it eventually.
I got the feeling the paths were just another way of packaging their existing material. Newer paths might be designed coherently but I wasn't impressed with a few of the paths I looked at. I can't remember the details exactly, but one included a course that had a prerequisite course that was not in the path. If you've found Pluralsight you may have found [Microsoft Developer Essentials](https://www.visualstudio.com/dev-essentials/) which includes (or at least did) a few months of Pluralsight and a load of other training and tools n stuff. I'd suggest creating your own path, not limited only to Pluralsight, and put actual development at the centre of that. 
Dapper. I generally avoid abstraction layers nowadays, so a heavier ORM will simply drive me insane. I have zero qualms with writing SQL.
I've spent the last couple of days watching various YouTube videos on Chrome Dev Tools. God how things have changed (and been forgotten) since I was a web developer in the 90s. Thanks for the guidance. 
Building smart contracts in C# on the Ethereum blockchain would be a groundbreaking feature.
Can you only call calculateColorBuffer when sendingBuffer is false? while(engineIsOn) { if(!sendingBuffer) { sendingBuffer = true; calculateColorBuffer(); SendColorBufferOverSerial(() =&gt; sendingBuffer = false); } } 
Probably better to just open an issue with FluentScheduler. Quick google showed that there is a pause/resume feature: https://github.com/fluentscheduler/FluentScheduler/issues/45 Or you can remove the task when you need to pause it, and add it again when you need to resume: https://stackoverflow.com/questions/35668592/how-to-stop-a-task-of-fluentscheduler
tl;dr: Tempdata objects in Core apps need to be serialized to JSON. Putting HTML in your startup code is a questionable practice.
if you are using a cqrs implementation, you aren't doing a lot of group by work. I haven't done much in the last 5 years that wasn't o(1) off an ID, or off a parent. On the lazy loading ultimately was dropped in every project I've worked on at a certain level of complexity. It tends to breed performance issues as you scale your team and new blood doesn't get the intricacies of what's happening. last couple projects I've spun up before swapping to core, I just disabled from the beginning and no one even noticed after an initial conversation. it changes workflow, but doesn't necessarily impeded it.
That would give me bad latency though. It would be much better for fps to try and launch calculateBuffer at the correct time so it overlaps with sendColorBufferOverSerial calculateColorBuffer (8ms) + SendColorBufferOverSerial(16ms) =&gt; 24ms ~ 41 fps &lt;-------8ms---------&gt;&lt;---------16ms---------&gt; &lt;-------8ms---------&gt;&lt;---------16ms---------&gt; Overlapping calls =&gt; (17ms) ~ 55fps &lt;-------8ms---------&gt; &lt;-------8ms---------&gt; &lt;-------16ms--------&gt; &lt;-------16ms--------&gt;
Also look into dependency injection which leads to mocking, a core element to unit testing.
Possibly calculateColorBuffer(); while(engineIsOn) { if(!sendingBuffer) { sendingBuffer = true; SendColorBufferOverSerial(() =&gt; sendingBuffer = false); calculateColorBuffer(); } } If this works the way I think you are saying, the 2nd calculateColorBuffer will run in parallel with the SendColorBufferOverSerial.
cliffs on MSDN sub and free courses?
yeah, the funny part is I'm very comfortable with DI and mocking. I just get the sense that I'm architecting tests wrong on a marco level. I'm looking for ways to make them more maintainable in general.
Jon Skeet's **C# In Depth** sounds much better to me.
Dapper or NPoco 
It's not for beginners though. It also "only" covers 5.0, which maybe I shouldn't worry about yet?
Don't copy tests, start with the kata then keep doing them. It will click.
Cool! That results in a rocksolid 60fps capping out the serial port performance! Makes me feel slightly silly at how easy the solution was haha :D
https://github.com/dotnet/sdk/tree/master/test ?
I believe you'll learn the most important part. After that, you'll be able to learn details about the other versions.
sounds really interesting.
Fair point. The code didn't stay in there. It was just for demonstration/quick troubleshooting purposes. 
I ended up opening an issue with FluentScheduler. The only problem I have with pausing the task, or resuming, is I have several different checks that run different processes if they are checked or not checked, and I didn't want to have to make a mess by trying to run it all under Execute, and then have to figure how to declare different methods and all that jazz.
Ok thanks man :D 
Do you have threads on whatever IoT flavor of c# you're using? If so - one thread to continuously calc the colors, another thread to constantly send it. Look up double buffering and object locking.
Yeah I think not having lazy loading is the best thing to happen to .net core. I seriously hope that when they add it it doesn't become the default or suggested way of doing it. It helps with getting started on hello world apps, but it's behind most of the worst performance problems I've seen.
I sometimes wish there was something in between dapper and EF. EF does way too many things I don't care about, but I sometimes do wish I could get query translation in dapper if only for the intellisense and autocomplete. 
I love Pluralsight for C#. I took a 15 week boot camp and felt my knowledge was very lacking. Pluralsight really filled in the gaps. That said, the path itself isn't completely coherent - there's some duplication and they use competing frameworks (NUnit vs MSTest for example). So I wouldn't take the path itself too seriously but in general the C# resources are very strong. 
The c# path has courses which are a few years old. Do you think its still worth picking up?
Definitely still worth it. Even though some of the courses are older, they are still relevant. They may not cover some of the newer language features though. This is easily fixed by augmenting the core learning path with section of some of the newer courses. In saying that, if you are just starting out with the language, you may not even have a need to use the newer language features yet.
It's a window .exe so i'm running the engine loop in a thread. Problem is the serial connection of the device i have to send the buffers to caps me at 60 fps anyways so i have to wait for the connection to be free after every write. gnna go with michael's solution cause its simple and doesnt need a lot of changes. The threads u propose would probably give me less variable and a better latency between screengrab and it arriving through the serial port. I guess now its bout 5ms to grab the first screen and calculate all the colors and to write everything to the serial port. and 16 ms for getting it through the serial port. So 23ms delay So that means that i can precalculate and wait for the port to be free which overlaps with previous command resolving on the serial port. thats 16ms + 16ms so 32ms delay. If it were a thread that continuously calculated The oldest available buffer at serial port reaolve should below 2 * 5 ms = 10 ms if it were still calculating a new one. Best case its 0ms. So including the 16ms seriial transferrance thats a best case of 16 and worst of 26. Which is a better delay than the non threaded version. I guess this would use more cpu though as a side effect. Plus more fun managing threaded code :/h 
.NET will perform better on Windows. .NET core is the cross-platform version of .NET. It does not exist on Windows. On Windows there is the .NET framework. Both implement .NET Standard 2.0 so they have common features and APIs.
Maybe [Dapper.Contrib](https://github.com/StackExchange/Dapper/tree/master/Dapper.Contrib)?
For the simple POCO type things this works, and it means a lot less having to write SQL, but it'd still be nice to do filtering etc in LINQ. But of the two I'd prefer using dapper to ef. I use ef for code first (so I have a database model) and then dapper to query it.
IIRC they're at your discretion. I have an MSDN Enterprise sub through my company, but I also pay like $10/mo. for my own Pluralsight sub, so I'm not positive.
Previously I also used Simple.Data, which I really liked for simpler linq-like querying (as well as typical CRUD). I haven't checked if it's available for Core, though. For more advanced queries I found it simpler to use actual SQL with Dapper... but might be worth checking out.
10 years are a lot of years talking about technology. Async, for example, was introduced with Net 4.5, or check the mobile development.
You are supposed to be happy or something.
Can anyone explain in one or two sentences simply why smart contracts are interesting at all? I understand bit coin but I just don't get why this etherium is getting so much developer attention. Why would we want to spend brain power to reinvent the wheel about reebursing someone for services. Isn't that what currencies are for?
Linq2db
I think that Im the only one who hate to write querys in code, no type safe, no intellisense, I don't like it, that's why I don't like Dapper (it is part of my old data layer). I prefer linq2db, it is faster than EF or Linq to sql, support for CRUD, bulk copy, several db providers, .net core, etc.
Oooo perfect! Thanks for the tip!
While I don't disagree with you, lazy loading is going to happen. Far too many people are screaming about it.
Oh yes. I believe they've confirmed it as planned. I don't mind them having it to appease those people, I just don't want to see it be the default or suggested way to do things.
I was raised on stored procs. Writing SQL in the application, directly or indirectly via ORMs, is a lack of encapsulation in my mind. (Which is hard to say because I maintain my own ORM that does SQL generation.)
Dapper.FastCRUD
Writing sql is such a pain. I really don't like it either. I embrace tools that let me work safely with a DB.
X-Post referenced from [/r/dotnet](http://np.reddit.com/r/dotnet) by /u/doxakiscom [How to use Tesseract OCR 4.0 with C# (A quick and easy way to extract text from images)](http://np.reddit.com/r/dotnet/comments/6vw39h/how_to_use_tesseract_ocr_40_with_c_a_quick_and/) ***** ^^I ^^am ^^a ^^bot. ^^I ^^delete ^^my ^^negative ^^comments. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
Start with **The C# Player's Guide**, and follow it up with **C# in Depth**. For the latter, make sure to buy the print book. Manning gives you an eBook version in PDF/MOBI/ePub formats for free ;-) C# in Depth is not written for people "new to C#." It's made for people who have already gone through a Beginner's Tutorial style book for C#. It's written to expand on what you already know, not teach you the language from scratch ;-)
I should have put another ellipses after `something();` and `// do something`. Assume that the real code handles the null case correctly.
Correct - /u/masklinn asked about this too. Assume that the real code handles the null case correctly.
You either want to use double buffering, or race the beam, but almost certainly double buffering. You want a front buffer that is always being copied over the serial port, and a back buffer that is always being rendered into. When the render finishes, you wait for the current copy to finish, then switch the buffers, and start copying and rendering again in parallel. Racing the beam would mean you're rendering one line at a time and copying it directly to the serial port. This has less latency, but is too complex to be worth it in most situations.
Only to file image
Sure - the reason most are excited is 'decentralisation' - the service provided is not owned or controlled by anyone. Take Uber for example - it's problematic in some ways because so many people's ability to travel or earn money is dependent on this one entity (Uber) to keep servers online, to be managed properly etc. If one was malicious, and wanted to stop all of these people moving around or earning money, they only have to attack 1 'place' - Uber. Moreover, as a user or driver you're at the mercy of whatever fees Uber decides to apply - that one entity has so much *control*. An alternative is to have an equivalent of the Uber service built on smart contracts in Ethereum - matching drivers and travellers. The service can't be attacked, it can't be taken down and it's not owned by anyone who can arbitrarily change the fees. There's purely a codebase that is verified and tested, and can forever act as a marketplace. This is why I get excited - providing fairer, smarter alternatives to existing centralized services.
Yeah but how slow is it. 
FYI: https://resharper-support.jetbrains.com/hc/en-us/community/posts/115000058964-Resharpers-intellisense-is-slow-compared-to-Visual-Studio-s this is not fixed
At one job we looked at several solutions and settled - for complex reasons - on NHibernate. We had some issues with it, but overall it was okay. At another job, for no good reason, management dictated to us that we must use EntityFramework. OMG, what a nightmare. It caused no end of pain, every day. I'd need some *real* convincing before I'd consider using something that wasn't free.
I'd try one of these: https://github.com/thangchung/awesome-dotnet-core#orm
https://msdn.microsoft.com/en-gb/benefits-overview.aspx
Gonna post this here incase anyone else has MSDN and wants free pluralsight content https://msdn.microsoft.com/en-gb/benefits-overview.aspx
What is happy?
[Here you go!](https://en.wikipedia.org/wiki/Feeling) I wish you can learn a thing or two from humans at /r/totallynotrobots.
&gt; dotMemory 2017.2 enables importing raw Windows memory dumps and analyzing them using its full range of features. Finally! That took them forever.
I doubt it will ever by satisfyingly fixed. They actively refuse to implement the two things that would improve performance the most by far: - Use Roslyn, and not their own engine (at least for C#) to avoid constant duplicate parsing of the source. - Move the ReSharper logic into an own process to avoid locking the main process.
Is this a joke lol? Thatd redundant information for intellisense and most documentation generators. I document my properties too but with actual information about what they represent, that's just crazy.
I've tried Tesseract before. Didn't find it to be good enough. Had to move to UWP and use Microsoft's OCR, which I found to work much better (as of ~1 year ago).
1. People use resharper because they think VS is horrible without it. Resharper makes visual studio slow and buggy and painful to use. 2. People ditch VS for rider which is inferior in pretty much every way to full visual studio or in a lot of ways to VS code if you want to develop on Linux. 3. Profit.
I'm going to answer your questions not in the order you asked them, but in an order I think will make sense for you to read the answers in. &gt; Is .NET good diving in to? Also, briefly, what is it? .NET is a set of APIs which facilitate programming. There are a number of languages you can use to write .NET applicaions on Windows, and there are .NET runtimes for a number of other operating systems. If you want to write for Windows in particular, yes, you'd be out of your mind not to use .NET, it has libraries for practically any purpose, so you can create applications much quicker with than without. If you want to create for any other OS, you should look into whether there is .NET for it, because if so you can probably create source code which can be reused for other platforms later. &gt; Does it matter which one you choose between c++ and c#? Can both programming languages take you equally far? I remember a few years ago a friend got a job in which he was required to write an application in C++. It took a year. He convinced them to switch to Java. A complete rewrite in Java took 3 months. I asked him why, and he said it was all about memory management - C++ required a lot of memory management in code, Java does it for you. C# will do it for you. There are some awesome applications written in C++. I recommend C# for cases in which you don't need absolute maximum possible speed, and can handle some minor slowdown in exchange for incredible libraries and easier code. (Please understand: I've written C# applications which generate several hundred million database records per day, so when I say "minor slowdown" I really mean *minor* slowdown.) &gt; You got any input on this book? Im not a complete beginner in programming, although I am with c#. Have you ever written Java? If so, I recommend you just download a copy of Visual Studio and start with some of Microsoft's excellent online documentation and examples. (My whole Java programming team switched to C# overnight. It took us about a month to get up to speed. We had the opportunity to obtain any books we wanted, and my boss even dropped a few books he had on my desk. None of us used any books.) Pay careful study to LINQ and iterators. If not, a book is a good idea. 
There's only a couple of valid reasons you wouldn't use any of the open source/free ORMs that /u/jogai-san listed. Things such as specific Oracle DB2 or Sybase db support (which I'm not sure DevExpress has) or enterprise level support for your company when you know that your developers are all juniors in database tech. I really cannot think of any other reason you would not use EF. If performance is critical (you're going to handle google-scale volumes), you would consider micro ORMs such as Dapper.NET. Any other reason being given to switch to DevExpress ORM, such as security, performance, long term reliability etc are all bullshit. Seriously, 999/1000 times you just want to stick with one of the open-source/free solutions available to you, they've shown that they've got great community support, EF even has Microsoft backing, will be available until .NET dies (and I hope it never does) and is continually being improved and scrutinized in terms of performance and security.
This is bad C#. You shouldn't create auto-props with non-public setters just to write a manual set method like you're in Java. There are common C# guidelines for when to use manual setters seperate from the property like that but setting the value of an int is not one of those cases. Those cases are when the setting has the potential to throw, since MS recommends not throwing from setters, or if the setting is a costly operation. Also relying on child Types to initialize the properties of a base Type is also usually bad. Create a protected constructor on your base class that initialize the properties and have the child Types provide values to that constructor.
That's all I needed to know, thanks! I'll definitely try it out.
Hence the warning. I obviously hope no one is gonna copy paste that and call it a day.
It seems even slower than before, quite an achievement.
Great product! Would of used it if it weren't so unbelievably slow 
What are the pros? What is DevExpress promising in terms of solutions to problems you have now? Have you done any prototype work to see whether it's going to work in your environment? My concern is that the problems you are encountering are architectural rather than specific to a framework. You could well be swapping one pile of hate for a different pile of more expensive, locked in hate. Generally though, if I hear swapping an ORM for an ORM I immediately assume it's architectural and this is a sticking plaster solution. 
C# in Depth by Jon Skeet is really good.
I was against the change but it seduced me with some simple features like you don't have to have that App.config - you just have to provide a connection string. Changing the connection string will connect you to another database.. Simple!
Can you elaborate?
Maybe you were using Tesseract 3. To help achieve better result I had to do pre-processing. Now, it is far more accurate since it uses new OCR engine based on LSTM neural networks.
Aah, you don't need to have the app.config in EF either. It's just one of the ways of instantiating a context :)
even in DataBaseFirst mode ?
Why do you think Rider is inferior to VS Code?
You looking for a distributed approach, my take would be microsoft orleans framework or akka.net remote.
*Crosses fingers hoping that the Razor "Cannot resolve View" errors are fixed. 
IMO EF is too easy, can you elaborate?
... and to full Visual Studio? Or let's put it this way: Rider is inferior to Visual Studio in some respects but in other respects, it's superior. Question is, out of the respects where it's inferior, which matter most?
If they're .NET Core 2.0 related, they should. Shout out if this isn't the case.
Good theory but no: out of the two, ReSharper currently (and in observable future) brings a lot more profit.
Thanks for sharing this 😀 I would like to know about your background. What languages do you know? What do you think is the best to learn to get a job? I know this depends on what youre searching for, but when Im looking at job applications some of them look for quite a lot. I still got a 2-3 years before Im done with school but I plan to learn as much as I can. How did you learn to code: books or mostly online? Also, when applying for a job, is showing off work youve done the most important thing? Should I be focusing on this? I'm nervous for this. I will work my ass off to get good, not because I must but because I like it, but still this field feels a bit scary. Theres always that basement dweller who does it both faster and better than you, thats how it feels like lol😂 Thanks again man! 
Roslyn: right, this isn't happening. Moving to a separate process: the team isn't refusing on this front, it's actually work in progress (which made Rider possible btw)
Can you elaborate? Have you tried to investigate the slowness with the ReSharper team?
I did not expect to hear someone in these comments hit this particular nail on the head. Well said.
Missing a semi-colon at the end of this line: public GameObject UI Also, in the future, make sure you format the code properly for Reddit (add 4 spaces to the start of each line, or select the code and click the little "&lt;&gt;" code button in the text editor), and include what errors/problems you're having. Asking, "What's wrong with this code" and not describing the problem/error you're getting is very vague. Is it a syntax error? Is it throwing an exception when you run your game? Is it not behaving the way you expect? etc.
Roslyn: Yeah, and I understand their reasoning.. But from a performance point this is just awful. Constant duplicate parsing of the source on every key press... Separate process: Where did you read this? I know they're doing it for Rider - but last I knew was that they do not plan anything like this for Visual Studio.
Thx for the help but it crashes when i enter the cube? No error or anything
You're also missing a semi-colon here: &gt; Input.GetKeyDown("E") But that said, if it crashes when entering the cube. I'm not sure. How does it crash? Does the Unity editor close? No messages are outputted to the Unity console? EDIT: Try removing/commenting out all the code in your tiggers. If the game no longer crashes, add code back line-by-line until it fails again. That should help you diagnose the issue.
I go back from play mode but some how it is till in play mode? Like it says its in play mode but you can see the scene
Like, you don't have access to the Scene view anymore? Try going to `Window -&gt; Scene`. Sorry, hard to understand what you're describing. But it sounds like it doesn't really have anything to do with your script. Otherwise, try updating to the latest version of Unity. You can also maybe go to the Unity forums and ask for help and maybe even pack up your project so someone else can try opening it.
It worked earlier so is definitely the script. But i think it could be the debug line doing this or something idk im really new to this (if it isn't obvious) 
That's ok. Definitely just try commenting out most of the code then add it back bit by bit. See which line(s) cause it to break then that should help diagnose it.
If you pull resharper out of it, visual studio 2017 is probably one of, if not the best IDEs on the market today free or otherwise. Pretty much it's only drawbacks are size and being locked to windows. If you don't install the ten GB of android test images it's getting fairly lightweight for a program of its scope so it's basically just being stuck on windows and potentially price if you don't qualify for community.
Not to mention in most DBMS there's performance to be gained by writing your queries as sprocs instead of ad-hoc calling them from the application - and personally, I feel like sprocs are much easier to maintain than queries littered all over your app. Just my opinion, but I feel those that use ORMs use them as a crutch for their limited SQL and database knowledge.
VS code is an amazing lightweight IDE. Pick a language and you can install a couple plugins and be ready to go. For free, on pretty much any platform. Monthly updates are making it better and better too. It's not replacing VS any time soon, but it's a hell of a platform and they can develop it incredibly fast.
Then why not move to Roslyn and make the whole experience dramatically faster, less resource intensive and not require updating every time VS does. Oh and you'd get csharp 7 less than six months late. It's fairly clear jetbrains has no interest in making a plugin for VS that doesn't make the program virtually unusable any time soon. Despite the fact that the framework to so has been in release for two years and available for a lot longer. Why is that?
Just as a quick troubleshooting/diagnosing step, can you try changing the DPI scaling on the Surface to 100% (rather than 125% or 150%), assuming you have it turned on? Other than that, are you setting any offsets/position for the popup?
I've tried that along with several dozen other options...this is even a brand new install as my machine blue screened over the weekend and I had to do a reset...although it was the reset that keeps your files intact. Also, I'm using AbsolutePoint on the Placement field for the popup control no offset settings. 
Easy. It was slow before and it's more slow now. 
You set your key size to 128 after generating the key. So we can't see how you are generating that. Are you using Rfc2898DeriveBytes? I reckon its either your key or iv as an issue... most likely your IV. 
Sorry, not sure what else to suggest without being able to experiment with it. Can you try hard-coding the popup position to be (0,0) at the top left corner of the screen? If that works, try shifting it to specific pixels (say, 100x100) and see if those position correctly. Otherwise, maybe try making a new blank WPF app with a single control/button that pops up a simple popup and see if the unexpected behaviour continues. If it works fine, start adding bits to make it match the incorrect WPF app -- see if you can find a particular culprit. If you validate that a minimal/simple WPF app works correctly, you can also strip away content/code from your aberrant WPF program until the popup works again.
Why not use Roslyn? 
Use Paket. edit: Wow, you're extremely rude and toxic.
FWIW we use the DevExpress XAML tools at my work and we all hate it. They all have their own set of problems and DevExpress' documentation is not very helpful at times. I'd say stick with EF. It's perfectly fine. 
I looked at it for a couple of minutes, it doesnt look like a trivial upgrade. Does it even work with Visual studio and the existing nuget.config stuff? It also has to work both on windows and linux for me. Paket looks as if I need to add every package by hand to the special paket config file... but then what about the visual studio project? will that get edited by paket or do I have to keep that in sync myself? Plus, I dont want to deal with yet another tool that has its own set of problems and bugs if it stops me from using visual studio and makes me manually add stuff all the time. the extension doesnt mention anything about being able to configure projects: https://marketplace.visualstudio.com/items?itemName=SteffenForkmann.PaketforVisualStudio
And is it against your religion to open project file and change versions manually?
Are you using any custom controls for that? Very likely they don't support DPI properly.
What are you using to reference your nuget packages? packages.config, project.json, PackageReference? Based on your issue, it sounds like you are using packages.config, which requires you to explicitly list all dependencies (although, if you add a reference via the Visual Studio UI, it should locate all transitive dependencies and explicitly add them for you). Both project.json and PackageReference should only require you to list top-level dependencies and it should automatically pull in any downstream dependencies, as you desire. If this is not the case, can you please send me a PM with more details and I can try to help get this resolved. 
Clap, clap
This doesn't answer any of the questions above but anyway
oh lord, there are 3 ways to do it and I dont know any of them? I just clicked on 'install' in the nuget explorer in Visual studio. I dont see any packages.config in my directory. they do install transitive dependencies, but they dont handle stuff correctly when I install other nuget packages on the side. Here is the exact scenario I had: aspnetcore.http.abstractions Microsoft.AspNetCore.Mvc Microsoft.AspNetCore.Server.Kestrel Then I tried to downgrade mvc but it didnt let me. I first downgraded Kestrel and then it let me.
[removed]
https://blog.jetbrains.com/dotnet/2014/04/10/resharper-and-roslyn-qa/
[removed]
[removed]
Using my own custom controls...again though, what is messing with me is the fact that any other win10 machine I run this on other than my surface pro works properly including several laptops with DPI set.
I've also tried building the app from scratch a little at a time and have run into the same issue. I was hoping someone with a surface pro 4 was having the same issue haha...should have figured this wouldn't be that easy. 
Ok, here's some cursory suggestions: var Groups = Context.ContactGroups.Where(x =&gt; x.Deleted == false); The above linq is expensive, but you can make this multithreaded if you refactor to a simple parallel loop to populate your partial collection, see here: https://stackoverflow.com/questions/16858521/can-this-linq-statement-made-run-multi-threading-using-more-cpu-cores foreach (var Group in Groups) Again, you can make this multithreaded with `Parallel.Foreach()` And like pointed out elsewhere, when you set `ContactGroups` make sure the new collection hits the `PropertyChanged` notification. 
What (if anything) does it say in the console? Make sure warnings and errors are enabled (by clicking the little icons at the top of the console window). ----------- This line: if (other.CompareTag("player")) Seems to have a typo. Previously you spelled 'player' with an uppercase 'P', but here it's lowercase. Unless you have two tags (both 'Player' and 'player'), this will not work. Since you're using 'CompareTag', Unity should give an error message saying that there is no tag called 'player', and this will crash the game when OnTriggerEnter is called. This seems like it could be the problem. ---- p.s., you might be better off posting to one of the Unity subs, as you're more likely to have Unity-specific issues than C# issues, and many (most?) people in here probably don't use Unity (but almost everyone in the Unity subs use C#).
The duplicate static code analysis is the real bugger too. That's probably the #1 reason to ditch ReSharper. Personally I still like ReSharper's tools and suggestions a little more the VS 17 natives. Unfortunately I can't install ReSharper because it + vs 17 natives just destroy my system. ReSharper + Vs no longer play nice together.
If you don't like the tools provided you can maintain your dependencies on your own. I personally don't like nuget, but that is because I personally don't like package managers. When I need a nuget package I attach it to a seperate solution specifically used for obtaining the pacakge... then in the actual application I want to use that package in, I copy the binaries to the solutions binlib directory and link them by file skirting around nuget altogether in the primary application. But if you downgrade all the files that an assembly is dependent on you can break other assemblies that weren't downgraded and dependent on the same assemblies. Basically, it's telling you that what you want to do wouldn't work and/or it doesn't make sense so figure out what you want to do and ask again later. 
Yeah, that sucks. I've also run into stupidity stuff. I know we had a similarish issue on one laptop in my office, my coworker fixed it but he's on vacation. I'll ask when he gets back but he just left yesterday.... RemindMe! September 15th, 2017 "Ask coworker about this shit." Beyond that, only think I can think of is packaging up a [Minimal, Complete, and Verifiable Example](http://stackoverflow.com/help/mcve) and posting it to GitHub or something for other people to test/verify. I have an old [Surface Pro 2013](http://earthboundcentral.com/misc/f4bmn5t.jpg) running Windows 10 that I can give it a whirl on at some point.
I just can't run two Static Code Analyses at the same time. It kills performance on any .sln over 10 projects. Sorry ReSharper, I miss you but I can't take you back!
&gt; I'm a moderator that likes Rule 5
packages.config is the oldest version and has the most problems. project.json and PackageReference are essentially the same (at least in how they work). The difference being that project.json is a standalone file next to your csproj file (assuming you're doing a C# Web App) and PackageReference is just entries in your csproj directly. This page provides a bit more details and other links, if you are interested: https://docs.microsoft.com/en-us/nuget/consume-packages/package-restore Is this in-fact a C# Web Application Project? Are you targeting .NET Core? If so, which version (1.0, 1.1, 2.0)? Which version of Visual Studio (2017)? This is a scenario that should generally work, and it should only "break" in a scenario such as the following: * You explicitly reference Microsoft.AspNetCore.Mvc, v2.0.0 * You explicitly reference Microsoft.AspNetCore.All, v2.0.0 * This package has an explicit or implicit reference to Microsoft.AspNetCore.Mvc, v2.0.0 itself * You try to downgrade your explicit Microsoft.AspNetCore.Mvc reference to v1.1.3 This should spit out NU1605 and warn you that you have an explicit reference to a lower package version than what is resolved in the transitive graph. Since this is just a warning, you should still be able to build and it should end up outputing v2.0.0 of all binaries except for Mvc, for which it should output the v1.1.3 version (this could still potentially fail at runtime, due to API differences between v2.0 and v1.1). It appears that this is failing for you because the .NET SDK is treating NU1605 as an error by default, rather than as a warning (I'll talk to a couple people and either log a bug or get back with their response). It also sounds like you want a feature where, when downgrading a package (in the NuGet Package Manager in VS), you should be given an option to try and downgrade all other packages as well (such as Microsoft.AspNetCore.All). I'll log a bug for this feature request. It is definitely an interesting scenario and I think the two biggest issues would be: * What happens when there is no corresponding version (for example, Microsoft.AspNetCore.All only has a v2.0.0 version, there is no v1.1.x version)? * What happens when this downgrade will break your own code, due to dependency on an API that only exists in the newer version
You're not actually giving any reasons why you think Rider is inferior. Edit: Why am I being down voted? recycled_ideas hasn't given a single reason why he thinks vs.net is superior outside of "its the best". This is supposed to be a discussion and hey if recycled_ideas wants to actually respond I may learn something.
A Master's degree in Computer Science isn't of much benefit unless it is a step toward your PhD. People with a PhD can qualify for different types of jobs and get significantly higher salaries.
A char is little more then a wrapped byte. A string is little more then an array of chars. You can't have a string without a representation of each individual char it contains. As far as why use char instead of byte, there are a lot of char specific operations that don't apply to generic bytes. Also, is there any use to an enumeration? The same function can be obtained with a generic integer, but the enumeration adds some extra layers of definition and rigor.
Thanks
In .NET a `char` is two bytes (UTF16).
Really depends on the demands of your job market. Here I'd say a master degree provides little to no benefit at all, but the job market is great, with more job offerings than developers. If you're in the reverse situation, it could very well be near impossible to get a job without one. For it's educational value, I'd say "meh", I've found what's taught during comp.sci to have little practical value beyond the basics. What you can learn on advanced topics will have little value to companies due to lack of experience putting it into practise.
I earned my Master's degree and am well on my way to my PhD. Though in between my Masters and PhD I secured a career that I am very convinced I would not have been considered for without my Masters. So it can be worth it, you just have to find the right job opportunity. But overall, following from that, its not a yes or no answer. Its about where you live and work and the type of jobs offered in that area. I can't imagine in rural Wyoming it would be worth it, but in a growing tech city, for instance Columbus OH it might be. 
The company I work for has used some paid SDK/Framework/Libs and personally I think it was to their detriment. First, any paid lib will have less online help then a "standardized" free alternative.. the documentation may be nicer and "getting started" may be more streamlined... but when you get to some real nitty gritty you may find yourself having trouble locating help sources. The other issue is that the ones we used were licensed by seat and required renewal. So now, we have a couple libs that are years out of date (b/c the company didn't want to renew licenses due to costs) and only some of the devs have licenses for. 
No, especially if you have no interest in going for a PhD and/or research related fields. I'd personally still take advantage of it, go get that MBA -- will help you a LOT more later in life.
&gt;A Master's degree in Computer Science isn't of much benefit unless it is a step toward your PhD. People with a PhD can qualify for different types of jobs and get significantly higher salaries. I've been looking for ways to pursue an eventual path to a Masters (or even further into a PhD) in CompSci. Being in my early 40's without even attending university in the first place, makes it a daunting thought. Plus looking after a family and a full time (doing well) career as a senior software engineer. My motivation is purely personal accomplishment (different story). Reality is, it would easily take me 10 years for a PhD, or 6-7 for a Masters, that's if all the pieces fit nicely to begin with. Calling around to universities and trying to see what parts, if any, I can do remotely. Everyone can dream I guess. Edit: Uh, I know I've attended "universe". I'm in it right now goddammit! Talk about dyslexia...
Because it doesn't even come close to the feature set of visual studio, of the extension support of visual studio or the speed of release of new .net features of visual studio. Name one thing in rider that's meaningfully superior if vs enterprise is an option?
My employer rewarded me greatly for getting a master's degree in Computer Engineering, but I think that's unusual. And as best as I can tell, it's a dead end. (And the skills I learned were useless outside of winning reddit arguments.) The MBA, on the other hand, opens doors. Even if you're goal is just to lead your own development team, an MBA will give you a leg up on the competition.
 It's less to do with being afraid of writing sql, and more that I work in a dynamic environment. Columns can get removed or changed from day to day, and you won't find that out until a runtime throw / missing data with writing pure sql, instead of just a new migration taking place.
If you motivation is purely personal accomplishment, then I say go for it. A Master's degree with a thesis is a definite 'marker' of progress and learning.
Input.GetKeyDown returns a bool that you aren't assigning to anything. Once you enter the trigger, that line is probably where it's crashing. It could also be the missing else statement before the Debug.Log() block. If you want the if statement to be true when it's an object tagged as Player and when the E key is pressed, you use the &amp;&amp; operator in the condition. if (other.CompareTag("Player) &amp;&amp; Input.GetKeyDown("E")) { //do stuff } else {//do this other stuff}
I do not have any kind of degree so take this with a huge grain of salt, but I do have 20 years experience in the software development industry and would recommend looking for a program that covers something related to your industry rather than simply programming. Writing code for a finance company? Get an accounting degree. MBA could be good too. Of course we programmers often end up switching industries with each job so the usefulness of this is debatable, but if your current company wants to pay for it, pick whatever makes the most sense for that company and go for it. But also keep in mind that companies seem VERY reluctant to increase salary for existing employees these days, for any reason. So don't expect to get a huge pay bump just because you got an MBA on their dime, especially if they paid for it. You'd think that companies spending money that way would be doing so in order to hold onto their employees but you really never know. With or without the degree you're pretty much guaranteed to have better luck increasing your pay by finding a new job.
&gt; My company was purchased several months ago and I now find myself working for a company that will pay nearly all of the cost for a graduate degree, To me, then the answer is absolutely yes! Any employer later on will see that has a huge step of initiative in personal enrichment. Plus, while it can be stressful, I found that I enjoyed school like never before as an adult. 
&gt; The Pluralsight courses by Scott Allen are also often recommended, but I'm not sure whether the course is worth the money. worth the money if you want to get into web dev - like your previous experience and what the majority of C# jobs are
&gt; ... winning reddit arguments. Sold, where do I sign up?
Yeah, a moving database target tends to cause chaos regardless. At that point it's more important to have something easily repeatable, not manual, and testable. Thankfully what I've been working with lately is very stable, so non-issue.
And one **or** multiple `char` represent a character.
It is a .NET Core 2.0 project. My explicit references in the beginning were: Microsoft.AspNetCore.Mvc 2.0.0 Microsoft.AspNetCore.Server.Kestrel 2.0.0 Microsoft.AspNetCore.WebSockets 2.0.0 Here is what happened, I didn't understand why something in Aspnetcore MVC wasn't working as I expected and so I wanted to debug into the Mvc source code. Microsoft.AspNetCore.Http.Abstractions turned out to be the reference that apparently contained the source code I wanted to debug. So I git cloned that repo from github and added it as a project reference. Woops, it's some kind of 2.1- exact version that mismatches my other nuget references, ok that's understandable: Now I have to fix all my other nuget packages to lign up with my github repo download. After adding new package sources that I had to google around for ~15min, clicking 'consolidate' and adding some random other nuget packages it prompted me for, I was finally able to debug, which is great. Then I removed the Microsoft.AspNetCore.Http.Abstractions project again after I was done and I tried to "update" back down to 2.0.0, first trying the 'wrong' websockets which didnt work, so after some head scratching I realized that it might work if I do it in the right order and so I tried it with kestrel first, which in my mind might be the hidden parent of websockets. That finally worked. You see how this bothers me: Why do I have to know anything at all about who's parent of who? That's what I have a package manager for, it's supposed to figure out whatever it needs to figure out and present me with options on how to fix my dependencies. Apart from this particular bug, the ideal scenario of how this should play out in my mind is different anyway. Ideally in my imagination I would simply click somewhere on that nuget reference and say "download source into solution" and then it would convert that nuget package with the right version to a project in my solution for the duration that I need it for debugging and when I'm done I want it to be converted back into a regular nuget reference. Hey, even better: If I press F11 on a method that I dont have source code on, it should prompt me for these steps so I dont have to search for which .dll and nuget and github refers to the code that I'm trying to debug. "but you can set up your .pdb sources somehow which never align properly but you totally can" yeah ok but when I'm debugging, 9 out of 10 times I wanna add some code or logging or try something myself. So I actually do need the real project code in my solution so I can recompile myself. I know what you're thinking: Wow this is crazy, nobody ever needs things to be that convenient. Well, I just want to say that Eclipse has functionality like that. It automatically downloads everything needed in source form for some feature of its IDE, I forgot the specifics but they have that. So when I want to develop on Eclipse, I just had to click some option and it downloaded everything Eclipse internally needed in source form and I could immediately step into the code. Oh and waiting ~2-3 seconds everytime I click on the 'Installed' tab is a freaking joke. Even if I didnt change any of the nuget packages, it always takes another 2-3 seconds. Jesus. I mean I would also complain about the load on 'Browse' and 'Updates' but there might be excuses there. Secondly, endless scrolling is not good. I mean, do you really ever use that to good effect? Just load 20 and then let me paginate. I have zero locational awareness of where I am in my scroll in the endless scroll. There is no point to it. PAGINATE PLS.
The best investment is an investment in yourself. If the company pays for you to continue your education, then by all means continue your education this is a no brainer to me, that is, if you like school. If you really like CS work then get an MS in CS, will it pay off? The fact that you got if for free and are better "educated" is a pay off and will make you better at it (it can't make you worse) as well possibly opening up other potential opportunities. Should you go for something that makes more or has more potential (debatable) opportunities like MBA, maybe, do you want to do PM etc if you don't then who cares how much more you make. Go for what you like to do you're gonna make money either way, how much is as much about education as it is a whole other slew of factors some of which are beyond your control but you're already a step ahead by having a BS degree in a relevant field.
Thanks. However your comment either illustrates my concern or proves I still don't get it. Bitcoin is decentralized and I understand how it satisfies all the points you highlighted and I get that. I don't see developers jumping on the Bitcoin platform to help develop. It just exists and people use it. Now comes etherium with smart contracts. Where we have a lot of developers jumping on and they have a platform for writing code. I just don't get it though, why would we write code. Is the implementation not complete and we're helping build it or something else? If it's something else then why are we excited about it. 
That's exactly what nuget should be doing, you dont have a problem with package managers. You have a problem with shitty package managers like nuget. I dont understand why nuget has to be so freaking complex. Just have it download the .dll into the bin directory. I couldn't even tell you where all my .dlls are now until VS magically puts them into my bin directory at build. Also all these extra new files that were introduced now.. I mean wow. So many new files. And who knows which of those are actually necessary at deploy. Some .nupkg binary file, all these jsondependency.json crap. I mean really?? A .deps.json file AND a runtimeconfig.json AND a .runtimeconfig.dev.json file? We all know that at some point all of us are going to have to find out what each of those files are doing and why they exist and why X isnt working because there is some error in one of those.
It depends on a lot of factors. 1. Is your bachelor's in Comp Sci/Comp Eng? If not, then a Master's would be useful. There is a lot of theory that is definitely applicable if you want to progress your career in a technical direction. 2. Is your local program any good? A good master's program will often allow you to go into some depth on a topic. Maybe you are interested in Data Science, statistical algorithms, machine learning, UX/UI, etc. Getting a MS in CS with a focus on a specific area can pay good dividends. 3. Some of the skills you pick up doing post-grad work can often pay the best dividends. I have a PhD in CS. I rarely make use of the info from my thesis area. But the analytical skills I developed while doing my thesis work gets used regularly. Being able to skim a article or paper to see if there is useful information helps me a lot too. Learning *how* to do research is a skill in-and-of itself. I have a solid understanding of stats, which is one of the reason I'm regularly asked to help people with performance problems and assist in tuning applications. As for MBAs, I've never seen an MBA help a developer, I've only seen an MBA help people that attended top business schools and actually did MBA related work. 
+1 for Dapper. Even if your devs can't write decent SQL there's still less of a chance they'll screw themselves with something like an n+1. Especially for juniors who don't know enough to profile every EF query they write for unintended consequences it could actually be more time-efficient. Still, if I actually wanted a full ORM I'd stick with EF. 
You're missing brackets on your first if statement
Dont do it. Stick with fairly open standards. FOSS is best. If you wrap all your code with some tool, you will live to see yourself having to recode all the code unwrapping
Returning a bool wouldn't cause a crash I think. It would be like bool x = true; but without the "bool x =". The compile would read the line as "true" then move on to the next line. Definitely not great code, but shouldn't crash anything.
I've been thinking a lot about a master's program in Software Engineering. My undergraduate degree is not CS but closely related (with significant overlap with the school's CS program). I think I'm considering it not just for an increase in pay, but putting me in the position of designing large scale software systems (including code architecture as well as data), not just implementing someone else's ideas. This would naturally lead to higher pay. Besides the interest in architecting code, I'd like to skip some of the years of experience required before I can push back against shitty code just because someone else has "always done it that way."
I'm going to be logging some bugs on some of this. Feel free to log issues for some of your complaints as well, which you can do here: https://github.com/NuGet/Home Documentation is definitely one thing that could be improved on this, at the very least so that users can figure this stuff out. I was also able to find out that NU1605 being an error in .NET SDK based projects is a "by-design" breaking change from the older non-sdk based projects. This break was made because, more often than not, downgrading your packages is not something you should do. You can work around this by adding the `&lt;NoWarn&gt;NU1605&lt;/NoWarn&gt;` metadata to your specific PackageReference (you can do this from the properties pane for a particular NuGet package in VS as well, just right click the package in the Solution Explorer and select properties). For .NET Core 2.0, many of the NuGet packages were improved to make a lot of this easier. For ASP.NET Core, you should probably be referencing 'Microsoft.AspNetCore.All' directly (v2.0.0 is the last to RTM), rather than each individual package (it should be doing this automatically in the latest release - "15.3"). There are nightly builds of most packages being uploaded to MyGet as well. ASP.NET Core goes to https://dotnet.myget.org/F/aspnetcore-dev/api/v3/index.json. So, if you add that URL to your list of feeds, you should be able to reference the latest prerelease package (currently 2.1.0-preview1-26778) and have everything "just work" (if you wanted to try out newer bits without worrying about building it yourself). The other option would have been to checkout the tag that corresponds to the bits you want to debug, rather than just using master (which will generally not line up). For the package, you were debugging, this would have been rel/2.0.0 (https://github.com/aspnet/HttpAbstractions/tree/rel/2.0.0) &gt; Ideally in my imagination I would simply click somewhere on that nuget reference and say "download source into solution" I'm not sure if NuGet packages are guaranteed to carry enough information to allow this all the time. There are other issues as well, such as possibly requiring the entire enlistment to work (this would be required for inter-project dependencies and in places where centralized props/targets files are used). 
I was using NHibernate, but found it way too bloated and annoying to setup.. i didn't know Dapper, thanks for mentioning it, ill check it out
I would also expect you to not have to checkout the source directly. There should be symbols for all of these binaries on the Microsoft Symbol Server (you should be able to enable this in the Visual Studio Debug Options, if it is disabled). The PDBs should be pulled down automatically and some of the repos (such as Roslyn) have been configuring source link so that it knows to pull the source code directly from a particular GitHub commit.
Okay. I will give it a try. And what about books? I would prefer a book over a video course. 
I'm kinda new to c# but isn't a one liner without brackets ok to do?
gorohoroh works @ jetbrains. So probably has internal information on that
MS in CS - Not unless you're going to be doing something institutional. If you're thinking corporate, then an MBA is pretty much required if you want an executive position. Many CIO also have PhD in addition to their MBA. If you're happy in the 100k - 200k range then you don't really need anything other than a BS and your certifications.
Books - Jon Skeets and C# in a Nutshell. I dont know of any beginner books. 
For application development, maybe it looks better on the resume to get you in the door, but you'll probably get paid the same as if you had just a bachelors. At least in my experience. If you wanted to work for a company that had products that required innovation and research I can see it helping, but probably because the work is more demanding and the master's degree is just a requirement for the job.
Yep, it has gotten to the point where I can barely edit files on my desktop machine, each keystroke is blindingly slow. If I get lucky it'll but in with some wildly unhelpful code generation.
&gt; that basement dweller no one wants to work with these people in the real world though. You have to be personable and nice. I'd rather have cool, down to earth, not super adept programmers than some high-all-mighty neckbeard who doesnt shower.
C# 6 and 7 just adds some nice quality of life features, its no biggie
This! Jon skeet is THE c# guy 
I bought Microsoft Visual C# Step by Step by John Sharp, and I can recommend it. But at second thought it may be more of a entry level book, with hardly anything about web dev. So, it may not be what you are looking for, but it is good though.
Okay. I will add this to my library shortlist. What would you recommend on ASP NET MVC? 
Thank you. According to Amazon, that must be a good choice. Thank you!
Would've been more useful if it explained *why* it worked like this. What the `event` keyword actually does is compile into something like private EventHandler Foo; public void add_Foo(EventHandler delegate) =&gt; Foo += delegate; public void remove_Foo(EventHandler delegate) =&gt; Foo -= delegate; That's why events can only be invoked from within the class they're declared on, the actual delegate is private and external code can only call the add/remove methods. Another difference is that (unlike the code I posted), the implementations of the add/remove methods are thread-safe. If you just have a public delegate field and multiple threads modify it at the same time, one thread may overwrite another thread's invocation. And while interfaces can't contain can't contain fields (of any type), they could of course have a delegate properties.
It is useful for representing strings of length 1 :)
Good points!
Couple bits. At 4:40, you mention that the aspects you pointed out is everything that the `event` keyword is doing. It's largely correct, but `event` also adds _some_ level of thread safety to adding/removing listeners to the event. More importantly, it also enables the use of [custom event add/remove accessors](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/events/how-to-implement-custom-event-accessors). This is a pretty significant distinction. You then go on to claim that you cannot use delegates in interfaces because it's a field. But for the most part, you could have just redefined your field to be an auto-property and it would work just fine. In theory, the `event` keyword might also be leveraged in reflection or the designer to control some application or IDE behaviour. The other items were on point in that, the big reason to use `event` is typically to have control over reassignment and invocation.
There are some reasons for avoid using SPs in code, for example, maintenance is harder using stored procedures because most times you need to change both, the app and the SP, and if you need to replicate to another database(s) it could be a hell. I'm not a sql expert,but I don't have any issues writing SPs, but I prefer writing my data access inside my app and not in the DB. 
You don't need braces on an `if` if the body is just 1 line. Also: `{}` = braces. `[]` = brackets (sometimes called square brackets). `()` = parentheses (sometime called brackets)
Good point about the custom event add/remove accessors - indeed a significant distinction.
Open procmon and see if R# is constantly writing to disk. I had an issue at one point a couple years ago where R# was writing to disk ever 3 seconds because of what seemed to be a corruption in one of its config files.
Maybe it's just me, but what I make as an engineer level developer is god's plenty, and having my masters or PHD wouldn't have changed that. I get you could maybe qualify for different kinds of jobs, but they couldn't pay that much more could they?
If you're going to go to school, the MBA route is definitely the way to go IMO. I'd like other people to chime in, but the only thing I've ever seen a masters/PHD in comp sci be good for is if you want to be a professor at a college. I'm sure they may exist somewhere, but I've never came across a developer job that paid you more because you had a masters. 
Yep, I've just come out of surgery, so I'll try and look up the details tomorrow, but the context can be initialised in a number of obvious ways (i.e. via constructor overloads) and then some other less obvious ways which are dependent on EF version rather than whether it's code first or db first. There used to be a EntityConnectionStringBuilder class for example, which google suggests is around in Core now, so should be in every version in between. EF is a bit weird in that it builds on older versions, so a DbContext would contain an ObjectContext you could access that exposed a bunch of extra low level functionality, and the way to get that was to cast a property on the DBContext via ... I forget the details, but there are loads of options built in. You can attach to a context's creation event for example which gives you a load of flexibility around life cycle, or override the save method which allows you to iterate through items needing to be saved and do weird stuff that isn't quite validation... Not too sure, I do need some pain killers and then some more pain killers :)
Study to better yourself, not your image to others.
https://www.reddit.com/register
Sure they'll pay the cost, but will they give you the time? Working full time and going to school is tough.
The company I work for mostly hires masters, I do not know any Dev that has a bachelor's only. But in Germany things seem to be different and everyone misses the diploma instead of bachelor, master. Phd is completely useless moneywise unless you want to go into university research it's not worth it
ASP NET MVC 4 or MVC 5 is probably the best at the moment. The hot new toy on the block is ASP NET MVC 6, which uses .NET Core 2.0 - but its not really mature.
HP requires a PhD for the Engineer Scientist jobs. There are lots of other large companies like that.
Everything Microsoft makes has about two or three extra layers of extensiblity and configuration. Generally it "works" out of the box but needs custom config for some specific use cases... The extra layers of configuration cause the documentation to make it look a lot more complicated then it is, and also initial set up sometimes gets a bit more complex then simple less configurable alternatives that don't have the same amount of flexibility. Despite that, MS generally has some of the best documentation... but it's pretty thick and technical... so often, if you don't have a book, or good tutorial or adviser it can be hard to wrap your head around how exactly they decided to implement everything... couple that with pre-existing knowledge of a different and also powerful "enough" alternative it turns out to be easier to just not switch to the MS solution... just my two cents though. Personally, I prefer MS implementations over homebrew, homebrew over Free OpenSource, and Free OpenSource over paid. --EDIT-- Also, MS has a tendency to make their solutions have built in support and tools and (I think the word is) interoptability , which can be nice... but often dramatically increases the complexity of dependencies and configuration. 
I think we might have different engineer definitions. I mean engineer in the sense that I'm like 3 or 4 steps above an entry level position. Not that I'm an actual engineer. You could call it senior dev, architect, etc. There's no real rule for those type of programmer positions in IT. But basically, and guy who has 2-4 people beneath him, and can make decisions about changes in architecture (of a program) and has full prod access.
Sorry work was busy. I could probably get a working example up for you but I will have to extract that portion of the code from the actual app as it's work related and we are not allowed to post code online. Let me see what I can accomplish and I'll get back to you. If you're able to find out from your coworker what he did that would be amazing. Thanks again for the help.
Have you tried actually using resharper on a larger solution? I only use resharper for the syntax highlighting and have everything else disabled. It is still slow. It's unusable if you use it's intellisense. 
hiring manager chiming in : HR puts this on the app, but it's not a hard requirement. I was managing a team of architect level engineers at a major corporation, and I dropped out two years into my bachelor's degree. the right candidate has no degree requirements in nearly every tech job in the private sector, but will be grilled much harder on capabilities. know your stuff and be able to prove it.
The event keyword also supports assignment. This will clear all the handlers that have been registered, then register the handler that is being assigned.
Depends where you want to go. Moving into management at any given company really only requires experience (sometimes less than that). If you want to work for google or apple a masters or phd helps but is not required. Having never worked at google or apple I can't say how much it helps but I get the impression that they don't even look at my resume (I don't have a degree)
Oh ok thanks. I've tried hardcoding the Key and IV as a byte[16] so all 0's and it still doesnt work. 
btw here is the updated post https://stackoverflow.com/questions/45882930/error-while-decrypting-file-via-aes-in-c-sharp im using AESCryptoServiceProvider class
Only from within the declaring type (where the field accessible), typically you'd use this to set the delegate to `null` e.g. while disposing. From the outside, only `+=` and `-=` may be used.
I was not aware you could do += to add to an Action variable. When you invoke the Action, is it running two different methods, or does the += somehow append the second instruction to the first? I'm guessing the first, but then it would seem like the type would change to IEnumerable&lt;Action&gt;. This is making me uncomfortable.
Every delegate (including `Action`) is a `MulticastDelegate` and maintains an internal list of one or more invocation targets. When you invoke the delegate, all of them are invoked one after the other.
Is the EventHandler type a collection? How does the += or -= operator work?
Of a sort, yes. The `+=` will be turned into a call to `Delegate.Combine`, which returns a new delegate instance that calls two (or more) methods. See `Delegate.GetInvocationList()`. All delegates work like this, including `EventHandler`. So this works, for example: Action first = () =&gt; Debug.Print("First"); Action second = () =&gt; Debug.Print("Second"); Action both = first + second; both(); // prints "First" &amp; "Second"
Might look good on your record at that company. 
see https://msdn.microsoft.com/en-us/library/system.multicastdelegate(v=vs.110).aspx
Are you sure? There is an actual `Delegate` class in addition to `MulticastDelegate`. It seems like it would be inefficient to use a linked list (MulticastDelegate) to represent a single delegate.
Every delegate instance is a `MulticastDelegate`. There is no way to dynamically change the instance's base type after all, and no CLR trickery either as far as I know. Every delegate has the fields to hold an invocation array and count, they just aren't used for unicast instances. I'm not sure why the `Delegate`/`MulticastDelegate` distinction exists. Perhaps every delegate being multicast-capable is a C#-level decision and theoretically not required by other CLR languages? Curiously, the MSDN does not mention `MulticastDelegate` in the inheritance chains.
[Some good supplemental information here](http://csharpindepth.com/Articles/Chapter2/Events.aspx)
.NET Standard is just an API rescription, for .NET Core implementation there is EF Core: https://docs.microsoft.com/en-us/ef/#pivot=efcore
When you say data layer, do you mean a SQL database? If so, ADO.NET is alive and well in .NET Standard, albeit missing a few features (I haven't checked on .NET Standard 2.0 yet, which was supposed to bring a lot more along).
&gt; I would like to know about your background. What languages do you know? Uh... I learned languages that don't exist any more. Some I can think of offhand: Basic, C, Pascal, VAX Assembly, ForTran dBase, Clipper, Squeebler (yes really), HTML, Java, Javascript (and JQuery among others), CSS, SQL, Water, X-Spec, C#, Python... &gt; What do you think is the best to learn to get a job? At my point in my career, I learn what I think is worth learning and find someone to pay me to write in the language I want to work in. For me lately that has been C#. Your mileage may vary. C# has been a second-place finisher for a while now. (Which is good enough for me if I like the language.) I think Python has been popular for a couple years. I hear Javascript, with node.js, is rapidly becoming popular. I really recommend you find a good tech recruiter in your area and ask their advice, because to some extent it's regional. Like around here a few years ago you couldn't get work unless you knew C#. Then it became python. I don't know what it is now. &gt; I know this depends on what youre searching for, but when Im looking at job applications some of them look for quite a lot. Yeah. I try to figure out what their primary language or two that they want are, and if I'm decent at that/those, I apply. I know most employers are on a kind of "fishing expedition" and they wish for the moon, with the understanding that they won't get it. A few employers really do expect you to have everything on their list... you don't want to work for those, they're insane. &gt; I still got a 2-3 years before Im done with school but I plan to learn as much as I can. Graduates who earn the highest starting salary have a degree in business with a *minor* in Computer Science. &gt; How did you learn to code: books or mostly online? I sat on my father's knee and he taught me when I was 2. No I'm not kidding. All programming languages have certain constructs in common, like iterators (loop structures), print statements, functions (or some equivalent structure), variable declarations, etc. You learn some basic ways code is written and some basic keywords, and then picking up a new language becomes "okay, I'll sit down with the Internet, look at some sample code, google a couple keywords, and I'll be writing code in a couple hours." &gt; Also, when applying for a job, is showing off work youve done the most important thing? Should I be focusing on this? I'm nervous for this. When you're new in the field, yeah, it kinda is. Ideally you should have a code sample - including a couple classes, not a complete program, should show them you're not a fool but shouldn't be a real freebie to them - that you can include with your application. Then have a working program (ideally, come up with an idea and implement it on your own) that you can show on a laptop or tablet. &gt; Theres always that basement dweller who does it both faster and better than you, thats how it feels like lol No. The basement dweller doesn't do it either faster *or* better than you. They do it *cheaper* than you, and many employers will see that and jump to hire them over you, but then while you may charge twice as much per hour as they do, in the end they'll take over three times as long and *their* solution will look pretty but *not work*, but the companies won't figure that out for years, if ever. (A couple years ago I had a system on my hands that my employer had rolled out large scale deployments of to a dozen clients and growing, and they refused to replace it because "we already paid for it! It's done! Use it!"... but I discovered that when you input data, it mangled it so badly that the data that actually came *out* of the system was actually meaningless. (And we could have been sued into the ground if clients ever figured this out.) But the board of directors directly ordered me to roll out this system to new customers because, in their view, doing so was *cheap*. You don't want to work for that kind of company. They're insane and they will abuse you. (I'm serious about that. They will do things like underpaying you badly, dangling a promotion before you but never giving it to you, refusing to let you take vacation time but refusing to pay you for it, making you work extra hours for free, promising you comp time but then refusing it when you try to claim it, etc.) I tell prospective employers in the interview "I'm not cheap. And I'm slow. I'll sit there and do apparently nothing and think about it for a while and then suddenly I'll write half the code your other guy will. But my code will *work* and it'll do three times the work theirs does." And I get jobs. Maybe not as easily as others, but I get them, and I worked my way up to an executive position and a six figure salary with no college degree simply on *skill*. How many people do you know who can say that? 
Haha ok 😂
EF seems easy on the surface. But as soon as your data model gets sorta complex, it gets slooooooow. Also, as soon as you have multiple programmers working on the code with source control, when two people edit the EF data model and then check in changes, *it will break everything* and you'll have to do a rollback and then redo all the changes on one computer to straighten it out*. (This amounted to basically daily pain for us.) It also can't correctly handle a lot of things like views with joins, for example. And it makes adding tables and views and stored procs an incredible pain, while it was trivial with nhibernate. 
Yes. You can write your own delegate (or just `ildasm` mscorlib.dll) and check the IL. You'll see that the compiler automatically creates a class that inherits MulticastDelegate. See [this blogpost by Brad Abrams](https://blogs.msdn.microsoft.com/brada/2004/02/05/delegate-and-multicastdelegate/) and also [this SO answer by Jon Skeet](https://stackoverflow.com/a/4833071).
I've recently thought about going back but I'm still debating on going local or doing it online. Has online had any experience with online MBA programs or at the very least still working whiling whiling going to school?
Use Interfaces, IOC and NSubstitute. 
Only since C# 6
You can also use it for full method definitions. public static void Main() =&gt; Console.WriteLine("Hello World!");
I'd go for on-CS masters degree if that's a possibility. Biology, Graphical Design or Business can pair well with programming assuming that you can get a masters without bachelor in these.
I think that's new in C# 7. C# 6 lets you do type Property { get } = value; to statically initialize a get-only property, and type Property =&gt; valueexpr; to define a calculated get-only property.
You can use it for set as well: private string _foo; public string Foo { get =&gt; return foo; set =&gt; _foo = value; }
Yea, But it's nice that you can define set with curly braces and use '=&gt;' for get to make your code tidier.
Initialization of auto properties happens at construction time. It just syntactic sugar instead of setting it in the constructor. You can verify it by attaching a debugger and stepping through a constructor.
I had a similar problem with code duplication in tests as I needed to define the same interfaces as mocks over and over again and register them in splat. I created a base class which accepts interfaces as template parameters. It then lazily auto generates mocks and stores them in a dictionary. A callback is fired to register the interface in your favourite IOC framework. I also wrote some extensions methods for our models to generate random data for different properties to remove redundant entity setup code.
Expression bodies for get-only properties has been available since C# 6. C# 7 introduced expression bodies for properties with both a getter and a setter. https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/expression-bodied-members
you want to use if (Input.GetKeyDown("E")), rather than just Input.GetKeyDown("E")
Everything about properties is just syntactic sugar. They compile down to regular get and set methods.
Has to be a statically evaluatable value, though, which is all I meant.
True dat
I'm kind of on the fence about using it for methods honestly... We started using C#6 on a project a few months ago and at first, I was changing all the 1-line getters and methods to use this syntax but then I found that for methods, it made things a bit weirder to spot..? Not sure if that's the right way to put it.
I get it. It makes methods look like properties, and they are completely different.
As the OP talks about **integration** tests, advice for mocking is kinda senseless! Injection always helps, but this is not really helpfull as it is too generic. The topic of integration tests is difficult as you cannot find much informations. I'm struggling too with the right approach. I tried to use ``setup`` and ``tierdown`` annotations methods to initialize database tables and to rollback all changes *after* one test. But in general it is difficult to organize tests at this level...
Thanks, that was very interesting.
How proficient should I become in C# to start learning ASP NET? 
I have not been programmed to feel happy. I have been programmed to translate binary. Binary makes me happy. Wait that doesn't make any sense.... *Umnikos! You screwed up something!*
Oh shit not again! *sigh...*
I've got a junior member of my team that does this for every stupid method... Sigh...
Not really; properties are just syntactic sugar for getter/setter methods; they actually compile to methods such as get_Age() and set_Age() in IL.
i recently came into what i think is a neat trick. T LogStuff&lt;T&gt;(Func&lt;T&gt; f) { try { return f.Invoke(); } catch(Exception e) { WriteLogs(e); throw; } } int Something() =&gt; LogStuff(() =&gt; { //blah, meat, blah if(bad) throw new Exception(); return 1; }); `Something`'s actual body is a one liner call to LogStuff. but really, the real meat is a multiline lambda which has indentation like a normal method. i can sprinkle logs onto existing methods, without putting in too much effort. or do similar strategy for a generic lock-er. 
Sounds to me like you haven't even done enough research to make a final decision on way or another. You need to do some sandbox projects and test each out. FWIW, I would never use DevEx for an ORM. We use their UI frameworks and their products are really meant for more simple out of the box experience. The minute you need something that's not cookie cutter their stuff breaks down so fast. I can't imagine dealing with their ORM.
You can do method() but you can't do property() (assuming property isn't a delegate). If all of the properties and methods were declared as expressions, I could easily see someone getting confused and trying to set a method (and yes I know parameterless lambdas exist). 
Thanks, but nah. I was just messing around with it.
Not sure precisely what you're saying, but you can absolutely use this syntax for properties with no setter. public string MyProperty =&gt; "value here"; Will work the same as this: public string MyProperty { get { return "value here"; } }
It'd be ok if you had senior members doing it too. It's not an antipattern or a code smell of any kind that should mark it as an "amateurs only" kind of syntax.
You can improve this significantly by using exception filters to do logging. That way, when you use a debugger, it will break at the right location, and you’ll have the full call stack, parameter values, and local variables.
Oh, didn't mean it that way. I do it sometimes, but I don't put everything on one line just to do it. I've been having to fight with some developers wanting to use the new features whenever they can, even when it's not appropriate.
Saying that someone could easily get confused about public string PrintName =&gt; Console.WriteLine(name); and public string PrintName() =&gt; Console.WriteLine(name); Not saying it's saying it's a bad thing. This won't compile, I don't think, just a quick example (they don't return anything). edit: better example would be `private string test =&gt; "Test1";` versus `private string test2() =&gt; "Test2";`. You can do `test2()` but you can't do `test()`.
This is true but the structure of the code leads me to believe that his of was supposed to encompass two lines. Otherwise the other statement could be earlier. Doing brackets increases readability too. Take this confusion for example. Clearly defining brackets would take out the "hm what is the goal of this if statement" ambiguity away. 
Yes but as someone new to c# I would recommend always using brackets. Increases the readability for others as well as a little for yourself. It is definitely a personal choice and it depends on who you are working with though. Solo projects you can do whatever you want.
This is an aweseme relatively new feature. You can do the same for methods. MyMethod() =&gt; Body It's to use with methods with small bodies so it's leas verbose. You can so a one liner
true. i used a log catcher to demo something which might generally use a func&lt;&gt;. if you have some kind of utility thing which executes a func (or action), then a one-liner method body could make sense to call that utility, acting as a proxy to a longer lambda. the longer lambda looks and behaves as the normal method body. this helps to cut a tab's worth of indentation (at the visual expense of an odd paren and semi on the tail of the method "body").
Lambda expressions are a hell of a drug.
Oh I completely agree; I already use braces, even if it's only for one line.
At least the guy is consistent
I think it's great for all one-line methods. I once wrote an API that was nothing but one-line operations. They weren't all get methods, but using =&gt; kept it extremely well organized anyway.
Also, never heard anyone use the word braces before them before. Just curly brackets or brackets for {} and square brackets for []. I'll keep the terminology in mind, thanks!
FYI EF Core is not ready for prime time unless you don't need a server-side group by. Supposedly 2.1 will fix this. 
alternatively use `ExceptionDispatchInfo.Capture(exception).Throw()` so it won't lose context. E: a down vote without a reply, thanks for breaking reddiquette! 
which won't matter because the developers will be looking at intellisense, not the source.
Does nobody realise they don't need to be on the one line? public bool RooAlreadyExists =&gt; SomeCollection .Where(x =&gt; x.Foo.IsBar) .Any(x =&gt; x.Roo); E: a down vote without a reply, thanks for breaking reddiquette!
&gt; Saying that someone could easily get confused about public string PrintName =&gt; Console.WriteLine(name); and public string PrintName() =&gt; Console.WriteLine(name) I'd sure be confused if a dev included a `PrintName` property. It has the semantics of an action/verb, not a characteristic/noun. This example doesn't make sense. &gt; better example would be private string test =&gt; "Test1"; versus private string test2() =&gt; "Test2";. You can do test2() but you can't do test(). Since the choice between methods and (non-auto) properties is purely a semantic one that has no effect on IL, a trivial example like this is meaningless.
As I develop, I don't use the syntax for methods, but after a release ships and that code falls out of active development it's useful to switch it over, particularly when you can knock a hundred lines out of a file.
Thank you very much and good luck in your future career 😬👍🏽
I guess I start off by saying "I call the ExportToExcel method from the View Page and inside that method I filter the data and pass the data to a helper method as a List. Then that Helper method.. uses ExcelPackage class and creates the header and populates the data onto a worksheet?
hmm. I am not sure why I am bothering to argue this when this syntax bothers someone else and not myself.
hmm. I am not sure why I am bothering to argue this when this syntax bothers someone else and not myself. 
A simple key value store would be more ideal. ADO.NET seems a bit on the heavy side and not extensible enough. It's covered here: https://developer.xamarin.com/guides/cross-platform/application_fundamentals/building_cross_platform_applications/part_5_-_practical_code_sharing_strategies/ It's looking like my best solution is to expose my .NET Standard Library as an thin abstraction to be extended in sub-projects (e.g., MySDK (.NET Standard), MySDK.Android, MySDK.iOS, etc.).
You would use the SelectNodes() method to find the nodes which are children of your specified node 
Thanks
That should probably be refactored into multiple (probably many) separate methods. Assigning meaningful names to methods that encapsulate repeated and related operations should make it easier to read and summarize.
And you lose nothing by ignoring these rare instances. 
Expression bodies are c# 6.
Yes, except it creates two worksheets, one for assets and one for licenses.
While clever, I feel that 99% of other people coming across that code would think "wait, what?" And waste a lot of time working out wtf is going on. Clever is good, simple and maintainable is better.
is how I explained it so far make sense? even with the terminology? also I haven't finished, so to continue on, we "return the ExcelPackage class as a byte array and then return the File"?
are you saying both of the methods should be split into multiple methods?
It's not a lambda expression. It just happens to use the arrow
Expression bodied getters, setters, and constructors are C# 7. C# 6 allows expression bodied properties only when they are get-only, and expression-bodied methods.
So it's an operator? Or just some other syntactic sugar, like Lambda expressions also are?
Since it returns a byte array, I think you would need to save that to file in the calling function. Is this existing code that you're maintaining, or are you creating this from scratch via sample code? I ask because it looks like EPPlus, and ever since VS 2013, you can now reference the Microsoft Excel library directly and deploy that to the server without having to run Excel itself on the server.
Tried it with C# today and I was pretty disappointed. Not the fault of the editor though. More to do with the C# extension. The official one. 
It's probably not there because the overhead of async callbacks would be massive if you used it to read millions of bytes individually instead of a few kilobytes at once. You can of course just call `ReadAsync` with a max count of `1` if you really need exactly one byte. Most `ReadByte` implementations do the same with `Read` anyway.
SSD for visual studio and projects RAMDrive symlinked in to project folders on login for bin/ and obj/ folders for ultimate hotness
I'd still rather use VS for csharp, though it's not so bad for .netcore, which is where it makes most sense. The command line tooling for framework is pretty awful. The really nice thing about code is that it supports basically anything. It's much better for JS front ends than full visual studio, but it's also pretty trivial to set up any other language you need or want to use.
You're saying someone won't know the difference between a property and a method? Surely we all see those little () at the end. I don't mean to sound snarky, but this sorta just isn't a problem.
hmm. I am not sure why I am bothering to argue this when this syntax bothers someone else and not myself.
Next version of c# will include async streams 
It's an "expression bodied member".
It's just a silly question. Almost everyone here knows that `;` is the statement terminator in c#, and whitespace isn't significant.
Probably everybody knows. Probably not everybody thinks that expression-bodied member syntax is appropriate for members that would be formatted over multiple lines.
Run the thing and see what it does 
I'd like the be able to give your comment multiple up votes. Follow the KISS concept and do everyone a favor! 
This isn't `IAsyncEnumerable`, this is a regular API that decided to not include an async variant of particular methods.
Yes. Probably several each. The usual guideline is that methods should top out at between 15 and 30 lines.
If you are pursuing it for your own goals, go for it as the $ aspect looks to be fairly well accounted for with the "a company that will pay nearly all of the cost for a graduate degree". I assume that this is a financial comment only. In other words, unless they are allowing you to attend class and work on assignment during company time then I wouldn't say that they are truly covering the cost as you will be investing a lot of your time in the effort. Economically speaking, there is an opportunity cost to assess beyond the tuition money. Not trying to poo-poo the idea of pursuing it, just suggesting you think deeper about the "cost".
Sounds great! Can you share some code?
Everyone probably knows it so much they forgot to mention it ;)
On topic: Sometimes I have switch statements that can't be made shorter that also make my methods significantly longer then that (because when you have 16 cases for a switch and you are me you end up with a minimum of 16*3+3 lines...) Edit: just FYI, said switch is setting / getting hardware registers in an emulator, it is split into the smallest switch it can be, and also some bits are unreadable / unwriteable. 
2 sheets. One for assets filtered by first function's params, one containing licenses from db. Returns excel file as byte array
I mean, it's a guideline, not a rule. As long as it's small and coherent enough to understandable, you're good. If it's not, you may be able to replace the switch with a dictionary (possibly a dictionary of `Func`s or `Action`s). That's not ideal, but if you have many cases, delegating case discrimination to the dictionary and splitting the various cases to freestanding methods may be more sensible. Might even work to extract all of that out to a separate class.
Glad we could help. 
Couldn't have done it without you guys lol
yeah I believe I found this a little while ago off some sample code I downloaded? It think it is EPPlus. Do you have an article as to how to use the Microsoft Excel library instead?
Honestly in this particular case, maybe an array with const ints for indexes when I have to manually refer to the elements might help, the problem is it's a read / write access for a bunch of variables so the dictionary of funcs would be pretty long. This is in an emulator context, I guess that's important because it means I can't just access the variables individually like a sane person and ignore the switch all together. ;-;
I'm looking at this website http://epplus.codeplex.com/ what does it mean exactly when they say "Create advanced Excel 2007/2010 spreadsheets on the server" what server are they referring to?
The difference between `T[]` and `Dictionary&lt;int,T&gt;` fairly meaningless if the index *i* is continuous on the range of 0 ... *n*, where *n* is the number of elements in the array. Hypothetically, you might be able to replace the variables with properties backed by the array.
About the R# host: https://i.imgur.com/HzhZ0mq.png (that's on a hello world solution) Could it not take whatever amount of memory gets thrown at it? I dare to say it gets even slower/more resource hogging than VS+R#, over time. Multiple rebuilds sometimes even leave multiple dotnet instances ~200MB each. 
*Hey it's a feature, not a bug.* 
Awww. What an adorable bot! 
I am planning to use BufferedStream to improve ReadByte performance but even BufferedStream's ReadByte uses synchronous reads. What I'm trying to do is use a tcp client and my own PacketReader to read packets. PacketReader works with all kinds of streams including files. For example, reading varints require reading byte by byte. Jeez. Do I really need to roll my own BufferedStream which supports async readbytes? What do people normally do in these kinds of cases? I could also use C# 7's new ValueTasks if I want to avoid Task allocation overhead I guess. 
and writing comments around code like that is golden.
Thanks for not contributing to the conversation!
It gives you 50% to 60% size reduction when publishing netcore 2.0 apps based on my tests. You may need to tweak linker descriptor files to fix some missing types especially when using reflection.
I agree, this approach should be reserved for where it is necessary to achieve a specific goal, not as a convenience. You've basically left a puzzle for someone that can't be solved by googling because trying to reverse google obscure operator usage is pretty difficult.
It just means the expression on the right side of the arrow is returned. Nothing to do with delegates and lambdas
So that quote is a little badly worded. No server is needed. The reason they say this, is the Microsoft libraries required Excel be installed on a server or sometimes would not work in a service. Most server admins would not allow Excel be installed on a server. EPPlus doesn't require Excel be installed on the machine, so it is much better for use on a server. For example, if you had a ASP.NET application that needed to generate an Excel file for the user. You could just as easily use EPPlus in a desktop application or console application. No server is needed.
I'm getting the impression this is a SDK to be used by clients applications remotely accessing your HTTP service, and you are trying to persist some settings or other information locally? If you look at "data layers" for C# that's really going to mostly deal with direct database access, so probably not what you want. If you are just trying to save some settings or information locally on the client, then JSON serialization would probably be fine. You'd want to let the caller choose where it is saved. You should try to give the caller as much control of persistence though. Consider if I built an Azure service fabric application that called your SDK, then trying to save anything to the local file system is useless and will be lost because local storage is transient in that case. Alot of other scenarios are going to make local file access impractical or difficult. You don't necessarily know anything about the environment the calling application is running under. It may be better to simply have a constructor or other initialization accept and return simple POCO's where appropriate, and let the client application choose how/when to persist these. Just make sure the POCOs support common serialization methods(i.e. no Dictionary references or other objects that aren't XML serializable) This leaves it up to the caller to load/save to their own database, json file, document DB, or wherever is appropriate. I'd consider whether this is configuration for the SDK that would be more appropriate to simply be passed in during initialization. You could follow a similar pattern as libraries like log4net that have a configuration file format. You generally don't write to this configuration at runtime though.
Asynchronously receive data from a Socket. I believe (although I could be wrong) this is the fastest way to do it.. https://docs.microsoft.com/en-us/dotnet/framework/network-programming/asynchronous-client-socket-example
Starting a new Task as is required by async operations takes a few cpu cycles. Reading a byte from a stream takes far fewer. So by the time you've started the task to read the byte, you could've just read the byte anyway. You'll actually get better performance​ to not use async in this case. You could however start another Thread at the beginning that does all the byte reading (turning the data into varints or whatever) and leave the main thread to interpret that data. You'd do this with .NET's Thread object rather than C#'s async stuff.
I believe 2 years more experience will net you more than masters degree. However Masters degree may pull extra wait with certain employers. - Academic institutions hiring into certain positions are likely to consider a candidate with a masters degree more than others. - Jobs dealing more with scientific or advanced applications of computer science. - For example, compiler developers: http://jobs.intel.com/ShowJob/Id/1324551/Compiler%20Engineer So I would say overall a masters degree opens doors for you, but probably will be of marginal value for your most common development jobs. Also consider there are other master's degrees that can be a followup from a BA CS. For example, Computational Science is a fairly different field from Computer Science, despite the similarity in name. It deals with alot of interdisciplinary applications. Things like simulation of protein folding, super novas, fluid dynamics, to name a few applications. Certain jobs would specifically require such as degree.
It's a multi option filter feeding an xls exporter. Each field is checked for a value, if it exists a filter is applied, if not nothing happens. The resulting data is shoved in a table and returned as a byte array.
I don't want a thread per client. That defeats the whole purpose of async. And how about if there is no byte available? ReadByte would block. And blocking inside an IO task is considered bad for server code because it will consume a thread for no reason. 
If I consider a library for something like generating PDFs, this is kind of a "leaf" feature that is not in the middle of a layer. You pass in a POCO or HTML, and it gives you back a PDF. If you need to switch to a different vendor and rewrite, it doesn't cascade through the application. An ORM is a much bigger decision. The two factors I look at is: - If we needed to switch later, how painful would it be? - If we run into a roadblocking bug or gap, how difficult is it to fix or get vendor to fix? What I hate the most is coming up on a serious issue, and having a vendor drag their feet on fixing or all together refuse. What if the issue is losing you thousands everyday? You would throw money/resources at the problem, but you are powerless without the vendor moving on the issue. For example, I used LLBLGen at one job, and the code generation allowed alot of freedom for customization, and additionally the license even gave us access to the source code of the actual product and permitted modification. So if we were ever at odds with the vendor on whether something needed to be fixed, we at least had an option, though it never came to that(we did customize code generation though). A commercial ORM gives you capability not in EF, such as set based updates/inserts or other features that could lead you to take a different approach to implementing a particular capability in your application. This is where you can tightly couple yourself to the ORM. You can encapsulate data access, but sometimes features allow for a better architecture/approach than otherwise, regardless of encapsulation. We used so many of the advanced features that I'm certain moving away from LLBLGen would have been a massive undertaking. So something like this is a serious commitment and you better be absolutely sure you are ready. You may want to put some guidelines in place for limiting usage to patterns that can be easily migrated to EF should you change your mind int he near future. I wouldn't be very strict about this though, and not for very long. Some of the features in commercial ORM's have great benefits. I'd rather incur some technical debt in coupling for the benefits gained. It's what you're paying for right?
I guess it will be too much to ask if this will work on a non-core project?
There aren't really any clean ways to build this kind of code. It's probably not actually possible to reactor it that way.
Ask for a few kb of bytes at once, and step through the result a byte at a time, requesting a new batch of bytes when you need it.
Well, that's equivalent to writing an async BufferedStream (: because when reading into a buffer it shouldn't block, leading to ReadByte being async. If buffer is already read, I could just return a Task.FromResult byte. 
I'll give it a try. Thank you Sir.
Commenting helps, but even with a whole Reddit post explaining it it took me a moment to work out IMO a seasoned developer should be able to just scan the code and understand what it's doing - comments are generally reserved for "why"
My only suggestion is to look into the async/await keywords. They'll let you do the sequence of blocking calls in a separate thread while still keeping things very readable looking
No. Unless a type/method is explicitly documented to be thread-safe, assume that it is unsafe to access it from multiple threads. Neither `Random` nor `DataGridView` are.
ah I see, thanks for the clarification!
Disclaimer: I am a ABL / Progress OpenEdge developer who has been writing C# in my spare time for 2 years. I am not (yet) a .NET developer and the code featured above is not commercial work, nor a college assignment :) [Edit] Also a huge thank-you to Cyberworm and the other contributors who advised me with the QuickSort algorithm - its now working perfectly! 
Set a breakpoint at the start of the method, step through it line by line, and inspect the variables to see if they contain what you think they should. For one there's an obvious typo in `ExecuteMergeSort`.
Will do tweq, its funny because I often test that way using ABL but it didn't even cross my mind in this situation!
UI updates must come from the UI thread.
Removed: Rule 4. Likely you don't have a field/property declared in your class named `other`. If adding it doesn't fix it, feel free to repost the question, but include the rest of the class code and include/format it for Reddit.
I did that it partly worked but it says "unityengine.componite.gameObject is a property but a type was expected"
Async/await shouldn't be used with ReadByte, and it's not a great idea to use async/await with low level network I/O. Async/await should be used at the level of HTTP requests. Below that, you use native asynchronous I/O to implement awaitable request functions. Look up SocketAsyncEventArgs. Using ReadByte, even with a buffered stream, is an error. It seems most people are telling you that in these comments but you aren't receptive. I would recommend you look at the source code for System.Net.HttpClient and see how asynchronous network I/O is done with SocketAsyncEventArgs and how it offers an async/await interface upstream. Even with buffered I/O the performance of what you seem to want to create will be absurdly bad. And if they provided the ReadByteAsync function you think they should, the performance would be beyond absurdly bad such that we'd have to come up with a more intense and comical phrase to describe how bad it is. Please look at all of the people telling you that this is a bad idea and consider what we are saying in so far as why await isn't even used at the network block read level (typically 4K-16K) and certainly isn't used at the byte level. Await isn't the only form of asynchrony in .NET, so it isn't await or blocking. Look at SocketAsyncEventArgs and the proactor pattern of asynchronous I/O for high performance networking in .NET
It's important to note that whilst the await keyword can be used to wait for execution of another thread to complete without blocking the calling thread, the await keyword usually doesn't involve multiple threads. async and await allow you to execute single threaded code without blocking the calling thread, but can also be used with Tasks in place of Thread.Join for multi-threading. In this case, the workload will have low CPU requirement, and delays will be waiting for an external service. So here, awaiting the result of a restful call through HTTPClient would be a better solution than threading.
You'll need to post your code.
All of it? Ok
using System.Collections; using System.Collections.Generic; using UnityEngine; using UnityEngine.UI; public class Healthtry : MonoBehaviour { public int Health; public gameObject HealthPackt; public gameObject Damaget; public Text HealthBar; void Kill() { } void Start() { Health = 10; HealthBar.text = Health.ToString(); } void HealthTimer() { Health--; HealthBar.text = Health.ToString(); } void Damage() { Health = -1; } void Update() { DamageHurt(); healthPack(); } void healthPack() { if (Damaget.gameObject.CompareTag("HealthPack")) { Health += 5; } } void DamageHurt() { if (healthPackt.gameObject.CompareTag("Damage")) { Damage(); } } } 
Does this code even run like this? I'm imagining there's an exception at runtime.
They could probably wrap where they're setting the value in runprocess in a function that calls BeginInvoke. But it'll probably be a bottleneck. Which for a toy application like this - who cares? 
Tests are like any other code - you can refactor them, pulling out common functionality, etc. You'd have to watch out for multi-threading issues, as some test runners will run them in parallel. But otherwise - it's just code.
If you're really new to multithreading in C#, I'd recommend reading [this](https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/task-parallel-library-tpl) first.
a paste bin version https://pastebin.com/uTvazdNZ 
Removed: Rule 4. Please also include the website/URL you're parsing. Try using the debugger and step through making sure you're properly iterating the nodes as you expect. Also, please do not post screenshots of code. Post the code as a properly formatted code block in Reddit.
&gt; public gameObject HealthPackt; &gt; public gameObject Damaget; These should be: &gt; public GameObject HealthPackt; &gt; public GameObject Damaget;
I think that depends on the country. In Germany, the "default" degree from university is the Master because we didn't have that Bachelor/Master separation until recently. It was 5 years uni, from nothing to "Diplom", all or nothing. Thus, if you apply with a Bachelor's degree, some people think you aborted your studies because you couldn't keep up or were lazy. If you apply with a PhD, however, some people will assume you just didn't want to work after getting the Master's and instead enjoy that sweet university life for 5 more years (something I should have done in retrospect...).
It does actually, WinForms controls generally only check for cross-thread calls when interacting with the underlying native Win32 controls, and the `DataGridView` is a largely custom control that handles its data internally. But just because it doesn't immediately throw an exception doesn't mean it's safe, of course.
Absolutely, but if OP insists on being clever then a helpful note attached also helps. Displaying how clever one is almost never trumps readable code. 
&gt; Which for a toy application like this - who cares? I mean, obviously OP does, especially if it's an app he's using to teach himself about threading and asynchronous processing. 
You can also manually disable the cross-thread checks on the UI calls with `Control.CheckForIllegalCrossThreadCalls = false;`. In fact, I'm pretty sure the checks are only made when the code is compiled in debug mode anyway - in release mode, you're on your own. That's actually not the end of the world though, you just have to hope that the processor caches are coherent, and two threads don't access the same data at the same time and corrupt state. Best to marshal things onto the UI thread by queueing them on the message pump with `control.Invoke()`
Thx but my code didn't work tho Edit: there where no errors only it didn't work
You know, I'm going to say for this very small example it might be ok. Insane, but ok. I'm willing to bet the second it becomes more than this trivial example that things will break in horrific fashion though.
Yes .net would compile this kind of code. Though both WPF and winforms will just blackhole any errors that come from this and the data is lost (stuck on another thread) of course. 
Welp, that's up to you to figure out. Maybe look into how to use the debugger with Unity. Beyond that, you update your `Health` field, but don't re-display it anywhere (I assume). There's also no indication here how you assign/handle the `healthPakt` and `Damaget` object assignments, so it's kind of outside the scope of what anyone can help you with here.
Are you using the full .NET stack? If so I would suggest the TPL and the use of Async and Await, it will make this easier to work with and much less error prone.
Thanks for being a hypocrite and still not contributing to the conversation!
Set breakpoints with F9, then step by step through, examining variable values as you go. Report back in 10 minutes.
When I read the question my first thought was that the only way ReadByteAsync would ever make sense is with ValueTask. But it may still not make sense.
Ok, so looking at it the bptfExchange does go through all the prices however only the first price is outputted(20 times)
Show us what you've tried so far, tell us what specifically you're having trouble with. Otherwise it sounds like you haven't put in much effort of your own and are just looking for somebody to tell you how to do the whole thing so you can just do it.
According to the reference source, the default value depends on whether a debugger is attached, not whether it's a debug build. You could also force it to be always on in your application, although I don't think I've ever seen anyone do that.
So I managed to get it working. What's odd is that I found this post: https://developercommunity.visualstudio.com/content/problem/24966/visual-studio-crashes-when-debugging-vsix.html It said to uncheck two settings. I tried checking them, and now my experimental visual studio is no longer crashes. I have no idea why this is happening, so if anyone has any insight, that would be appreciated.
That isn't really fair. It sounds like they are looking for a good approach, in which case it is reasonable to have not written any code. 
I am sorry if it came off that way. I already have the user login implemented and working. I don't really have troubles with it but am just wondering the best way to go about things. I could have the company as a role of users and get the achieved functionality I want. My only problem with that method is that you can't really query for all the employees that belong to a company because they are in the same table. Preferably they could both still login but be in separate tables. I guess my question is: Can you have two identity tables and if you can't is there a way to do what I want or do I just need to live with how it is.
That's a good point. Most of my non-web application design was using Universal apps, and as I recall, it would throw an exception in cases like this because it was built on top of Win32 controls, not .NET.
thanks, good to know
https://stackoverflow.com/questions/15185404/html-agility-pack-selectsinglenode-giving-always-same-result-in-iteration Maybe try a decimal before your whack whack in the node selection.
Random is not thread safe. You'll either need a separate random instance for each thread (preferred, but be sure to seed them separately to avoid the same numbers in each thread), or a mutex around it (will slow down threads with locking). Also setting UI invalidating properties on a thread is iffy.
How about having one list of users but let the employee-users and the company-users be different roles? 
Thanks, but by doing this I just receive an error http://prntscr.com/gdqo08