Oh no, you can use VB and F# too. Or the IronPython/IronRuby offerings if that's more your speed. Hell, it doesn't even need to be .NET based. But it does need a well written standard library instead of the shit show that is JavaScript. 
&gt; Honestly, I've been a web programmer since 1998, and let me tell you, web site companies demand that most of the function of their site be running on their hardware where they can control it Wow. You have ***no*** client-side applications whatsoever? I used to make jokes about being able to work on email when the internet connection fails because I use outlook. This hasn't changed, though more often than not these days it's not "don't have internet connectivity" - it's "the wireless here sucks" and/or "gmail is flaking out"
This is probably a bit out of date but I was a developer back in 2010. Got a uni degree to get in and just wanted something extra so I looked at ms certs. I bought the exam prep book and you have to remember things like all the methods and properties of all the basic drawing classes. I don't think there's a single real world application for this. If you've got that head that's good at memorisation and taking exams I'd say give it a shot but otherwise real world examples of good design would be more beneficial I think.
JS is one of those things that started as a "hack" and stayed that way for a while. Glad we're finally moving on.
Targetting multiple platforms isn't a new problem. It's a good part of the reason why they made Java in the first place, and that was more than twenty years ago. Even before that there were companies providing software on multiple operating systems. As to the current solution. Take a look at visual studio code. Have you in twenty years seen a desktop application roll out features that fast and have them hit as many platforms simultaneously with every release? I sure as fuck haven't. I couldn't give a fuck about memory usage honestly. It's not applicable on mobile anyway and my PC has more than enough. The new world of development is scary. It changes a lot and some things we're used to aren't easy or sometimes even available, but it's not going back to the old ways.
I'll just say that I have library lag. How in the world can you write something that has long term scalability and support if the newest hottest JavaScript library(or framework) moves the needle so far away from what you learned just five years ago? Sooner or later , especially if you are an in-house dev working on a large long-term solution, you either get way out of wack with emerging tech or your software starts to look as though Google and Facebook took a shit and smeared it across your UI layer. Please don't ask me to explain my node_modules folder to another dev. It's kind of like looking in my toilet.
My experience: I firmly believe that I wouldn't have the job I do without having taken the MS test I did. I phrased that carefully, though. I took a beta test in TSQL. In beta tests, you don't get your score until weeks or months after the test. I took the test while I was job searching, then interviewed for and landed my current job, and then got my score a couple months later. But the studying for and the taking of the test prepared me for the interview in a way that I don't think I could have gotten any other way. Even if you have experience, there are always tools you use all the time and tools you forget about. And there are a host of things that are bad practices that you definitely want to forget about but you need to know about anyway. So while I was in the interview, I really cleaned house on the SQL portion. There were five senior guys in there who couldn't quiz me enough. I hear people who are kind of down on these tests, but whether or not you end up actually listing it on your resume, I think it can be a good value.
[removed]
I learned some skills as an experienced c# developer that studied for an MCSD exam. There were parts I hadn't used in the field. Many companies don't care. It's not going to be a full course on the right way to code. Consulting firms are more likely to be interested in a certificate.
I hope not. I have very serious privacy, security, user control, and ad content concerns with Web Assembly.
Removed: Rule 5.
I actually enjoy writing Typescript. Used it with React (was OK), now with Angular (even better). The thing that makes frontend a nightmare is the whole messy ecosystem including, but not only Javascript. When using Typescript the language is the smallest problem. However, C# as a typed language paired with Visual Studio would be an substantial improvement over Typescript.
Your sample code wouldn't even compile. 
&gt; Wow. You have no client-side applications whatsoever? I've never had a Fortune 500 company *ever* ask for any client-side code except for Flash, and that only to look pretty. (I've had to talk them *out* of that one.) But if I even want to use JQuery, they want to nix it and I have to fight with them about it usually for *months*. (This is particularly fun when they want "drop down menus" that react instantly and look very exciting but think they can get away with not actually letting you write any actual *code* to make it happen.) I've written *enormous* client-side applications, but they fought me tooth and nail about it every step of the way. And it was all in Javascript. And there weren't frequent ties with the server, it loaded it all onto the client, worked with the user, then did one bulk XML upload to the server.
Entity Framework isn't always the best option. Maybe they require more performance than Entity Framework can provide?
&gt; wat? I am not a language expert but this is not true at all historically. So, you're not a language expert but you just know all about it? &gt; Javascript is nice and all but up until recently it had no concept of concurrency that includes node. 1) I've met very few programmers qualified to write concurrent code. 2) Node is *supposed* to not be concurrent. That's supposed to be a *feature* of it, that you know that when your request hits the server it will be handled non-concurrently and thus not incur the overhead of a concurrent server and thus will run more quickly. &gt; It has been a major performance restraint either because the community had a poor understanding of what happens when you use == instead of === and even still == is only bad because of the awful equivalency function that's run when you use it in ES5. 3) The community's poor understanding is the community's problem, not necessarily a languahe flaw. 4) You're talking about an implementation problem, not a language design problem. &gt; It hogs memory of the browser and sometimes doesn't want to let it go. Furthermore node has the same problems on the server side. Another implementation problem, again, not a language problem... you need to understand that just because a child uses poor grammar don't mean da English be broke. &gt; another issue is its lack of real concept of scope makes it very hard to develop on a large scale with a large team in a modular way. And how often do teams sufficiently large to worry about problems write code, and do so with insufficient programming rules such that they fail to ensure they won't cause problems? My experience is that large programming teams rarely exist, and they don't have to get very large at all to cause problems with scope if they aren't keeping an eye on style. It's bad programming technique rather than bad language. You're basically claiming that it's more important that the language restrict its programmers in the way you think will help your concept of how things should work, than it is that the language be easy to work with. I don't agree. &gt; JavaScript isn't a bad language but to say its been less problematic is crazy. So, you're not an expert language designer, but you know enough to call one crazy?
&gt; But, as you rightly said, it trumps having to work with different languages. Now with WebAssembly we'll be able to build web applications with languages that perform much better than JS outside of the browser. Seems to me like it is just another way of saying "here's another language to add to the mix." A guy I know once sat down and figured out that to write a web application you need to know... * HTML for the front end layout * CSS for the front end styling * Javascript for the front end interactivity * A back end language like C# or Python or Perl for the back end logic * SQL for the database * HTTP for debugging ... and quite possibly something else like SOAP to connect a front end and back end via web services, these days, if your client/employer is demanding a service oriented architecture (which they often demand not actually knowing what it is, but because they think the words sound great and businessy to them). So we sat down and wrote a whole new language that allowed you to write the whole thing in one language and never have to deal with learning *yet another* language to make it go. The result? Nobody was interested, because everyone wanted to fight for their petty fiefdoms of why *their* language is better than *your* language for back end work. So it sure feels to me like "webassembly" is just flavor-of-the-week for web technologies. 
Ultimately it's a matter of clarifying dependencies and that's very difficult to do without source code. Do C1,C2,C3 affect the state of the base class? Presumably so if they're not static. Can the effect of those methods be separated from the other base class machinations? If so, you might try extract them into their own classes and injecting them as necessary into the subclasses. My gut reaction is that option a) allows for reuse at the expense of creating a nightmare base class. It's the easy approach and one of the reasons legacy code is full of nightmares. The general idea of passing functionality in ala option b) is more elegant imo but it's more difficult because you've gotta sort out what uses what first. 
&gt; gotta sort out what uses what first. Didn't get this. Could you elaborate, please?
You could make a public static class that contains public static methods. Then if your classes are separate files within the same solution then just add using static namespace.class to call your methods 
I suggested option b) required isolating the behaviour of C1,2,3. Once that is done, it's fairly easy to inject them as required. However, working out how to extract/isolate methods like C1,2,3 that may have stateful effects is not a simple problem that can be answered generally. Apologies if my elaboration is more gibberish. Again, it's difficult to be specific without seeing the code.
I'm not that surprised - I may have missed an async keyword - and could be other errors scattered about. It wasn't supposed to be a full compilable application - just an example
Tangible projects for sure. I've hired a few developers and have never asked about certs nor have I ever heard of others asking for certs. I'd hire a dev with projects and no certs without a second thought, but would never hire a dev with no projects and every cert imaginable 
Dependency over inheritance!! 
I get the impression MonoGame is the conventional replacement and have never heard of FNA, what's the difference? I know that MonoGame just has something you install on your development machine and it sets VS up with templates and build targets.
can't use static as I need to maintain state.
This is true. MonoGame and FNA almost identical code-wise and can be interchanged almost seamlessley, but MonoGame is the one endorsed by the XNA team and with an active community behind it.
Right. I wonder what the reason for FNA is then?
Be a bit careful with that sort of attitude. The fundamental reality is that the ownership of projects coded outside of work time is a seriously grey area outside of California and Europe. A lot of contracts have IP clauses, as they should, and most are fairly broadly written. Contributions to open source projects can poison a project if copyright isn't clear. This expectation that everyone has a project portfolio is kind of ridiculous honestly.
I don't know really. Probably intended as a competing standard that never caught on.
Thanks for the comments and suggestions! I initially choose FNA against MonoGame because I searched back in /r/csharp and the comments from a year ago were more in favor of FNA. (red a lot of problems with MonoGame). Now I tried MonoGame, and it really installed a Project Template into VS17 and at least the initial (empty) built is working. I will coninue with MonoGame... 
Look at the following code you've written: foreach (var line in lines) { if (c.Id() == ReadInput) { Console.WriteLine("match!"); } What you're doing is going through each line *in the input file*. Earlier on, you wrote: List&lt;string&gt; lines = File.ReadAllLines(filePath).ToList(); So the `lines` variable contains the raw text from your input file. What you intended to do, I'm sure, was go through the collection of Customer objects, which you called `client`: foreach (Customer c in client) { if (c.Id == ReadInput) // Note that there is no () after a property, only after a method { Console.WriteLine("match!"); } The trick that you haven't learned yet, but you're learning here, is to keep track of the data type and contents of each variable. Hope that helps! (N.b. if I know this sub, you'll soon start seeing other people suggesting solutions using Linq. I agree with them - using Linq *would* be better, but *only* once you've mastered the basics. Learn to do it with a `foreach` loop for now. Once you've mastered that, know that there are better ways of doing the same thing with less work, but you need to master the fundamentals of programming right now, and loops is one of those fundaments.)
Cheers for the quick reply! I have done as suggested but now i get the error, operator '==' cannot be applied to operands of type 'int' and 'string'. Error aside this has still taught me the importance of learning the fundamentals and keeping note of variable data so thank you! Edit. So i changed the line if (c.Id == ReadInput) to: if (c.Id.Equals(ReadInput)) Which rids the code of error, however in practice, when i run the program and input a legitimate ID, i always get "No Match" (also repeats this line 10 times, unsure why). Is there something im missing? And when the code does match the ID with the object, how would i have it display all the properties of that specific object? Thanks again. 
The qualifications are a step towards specialisation. Similar to how a Cisco certified network engineer might diversify into Juniper. If you actually look at the back of a book from an MCSD subject you'll see that they're designed for people already in the industry, having been there for at least two years. You'll get a lot of white noise on this subject, however a combination of MCSD and quantifiable project work would be the best bet if you want to work in a Microsoft house. If you are looking for work at software houses whom only care about open source backed development with a C# or Microsoft backbone, you'll probably get the negativity. Imo they're beyond useful, and they actually carry more weight than degrees and project work, at least where I'm from. It shows a deep understanding of the language and ecosystem if accompanied by a portfolio of work, which is *not* taught in that depth in a degree (if at all). My suggestion though, don't rush it. Get that real world experience first.
You can go to advanced for individual package selection to solve this.
How much state are we talking about here? Can you get away with using Singletons?
In the new installer you can either install whole "workloads" (e.g. ASP.NET Web Development) which comes with pre-configured components, or just install individual components. Instead of selecting the workload, just install the individual components. http://imgur.com/a/di8UF
Thanks - but I don't see an "advanced" option. I see a "summary" section where I can choose what look like more advanced options, but as per [this screenshot](http://imgur.com/a/kHlEN), .Net Core is listed under ASP.Net, but is *not* listed as optional?
Thanks - I've got that screen, but as per your screenshot, there is no way to de-select the .Net Core option. The only ones that can be de-selected are those under the "Optional" section, starting with .Net Framework 4-4.6 development tools?
What I suggested was to de-select the workload, and instead install the individual components that you want. The workload is a just a pre-configured group of components that Microsoft thinks you most likely want.
It's also for efficiency, code reuse, and future extensibility. The web api can be used by any project; ASP.NET, mobile, desktop. Saves having to implement the same damned code on multiple platforms. Others have already mentioned keeping the controller code slim. Regarding the 1:1 mapping. Think of the services as helpers. Maintains decoupling between layers and separation of concerns. I haven't seen the code so I cannot speculate whether it's overkill, but just wait until you inherit a shit storm project that doesn't follow those fundamentals, you'll think back to this one and wish all projects were like it.
A ``VipClient`` is already a ``Client``. The following line is perfectly valid: Client client = new VipClient(); If you want ``Client.Status`` to be able to differentiate between them (not strictly necessary as you can instead do ``if (client is VipClient)`` for type checking), then you could instead do something like this: public class Client { public Client() { } public String FirstName { get; set; } public String LastName { get; set; } public String DateOfBirth { get; set; } public int Id { get; set; } public decimal Balance { get; set; } public virtual bool IsVip { get { return false; } } public String Status { get { return this.IsVip ? "VIP" : "Not VIP"; } } } public class VipClient : Client { public override bool IsVip { get { return true; } } } Of course, if you're using C# 6 or newer, you can swap out the ``get``-only properties like this: public String Status =&gt; this.IsVip ? "VIP" : "Not VIP";
Brilliant - just tried it and it seems to work! I need to spend a bit more time with it to make sure I get everything installed that I need, but it looks like this is the solution. Thank you!
Ah i see, i havent used 'virtual bool' before so ill have a further look into that also, thank you for your help!
The inner exception says: FileNotFoundException: Could not find file 'c:\users\kandur\documents\visual studio 2017\Projects\Game1\Game1\bin\Windows\x86\Debug\Content\WhiteDot.xnb'. Why is it looking for a WhiteDot.xnb instead of WhiteDot.png??
[I just package the binaries with my repo currently](https://github.com/Tyrrrz/YoutubeMusicDownloader). The nuget packages either didn't work well or offered very little to be worth it so I just ended up wrapping the executable in [CliWrap](https://github.com/Tyrrrz/CliWrap).
There's also the c# wrapper from here https://www.nrecosite.com/video_converter_net.aspx that's free for the non dotnet core version. Personally I go with the package the binaries approach, or download the latest builds from the app.
Do the classes ``A`` through ``E`` show an "is-a" relationship with ``BaseClass`` (e.g. an ``Apple`` is-a ``Fruit``), or is it a "has-a" relationship (e.g. a ``Car`` has-an ``Engine``)? If it's the second one, passing in the instance of ``BaseClass`` is probably the easiest way to do it. Otherwise, you could try something like this: * Make ``A`` through ``E`` inherit from ``BaseClass``. * Define interfaces ``ICommonMethod1`` through ``ICommonMethod3`` which specify their respective methods ``C1()`` to ``C3()``. * Make ``A`` through ``E`` implement their required ``ICommonMethodX`` interfaces by delegating the method calls to a property of type ``ICommonMethodX``. * Make a ``BaseClassCommonMethodX`` class for each ``ICommonMethodX`` interface that takes an instance of a ``BaseClass`` in its constructor, and then define the behaviour of the ``CX()`` methods. * Make the constructors for ``A`` through ``E`` create new instances of the appropriate ``BaseClassCommonX`` classes, passing in ``this`` as the instance of ``BaseClass``. This will give you something like this: public class BaseClass { public bool IsX(); public float GetY(); public string GetZ(); } public interface ICommonMethod1 { public void C1(); } public interface ICommonMethod2 { public void C2(); } public interface ICommonMethod3 { public void C3(); } // apply this structure to other ICommonMethodX interfaces public class BaseClassCommonMethod1 { private BaseClass _baseClass; public BaseClassCommonMethod1(BaseClass baseClass) { _baseClass = baseClass; } public void C1() { // perform C1 logic using _baseClass } } // apply this structure to other classes B, C, D, E public class A : BaseClass, ICommonMethod1, ICommonMethod2 { private ICommonMethod1 _commonMethod1; private ICommonMethod2 _commonMethod2; public A() { _commonMethod1 = new BaseClassCommonMethod1(this); _commonMethod2 = new BaseClassCommonMethod2(this); } public void C1() { _commonMethod1.C1(); } public void C2() { _commonMethod2.C2(); } }
The ``virtual`` keyword just means that a method's body can be changed by subclasses. A property ``X`` under-the-hood gets compiled into ``set_X()`` and ``get_X()`` methods, which means their logic can be altered using the ``override`` keyword.
OK, I got it working by using an .xnb file as asset. I did the png -&gt; xnb file conversion with converter: https://github.com/sullerandras/png_to_xnb
Maybe I'm missing something, but why aren't you using the MonoGame Pipeline tool?
Hi, I've managed to import nreco into the project however can't understand the syntax they provided. I want to convert a video into a sequence of images. var ffmpeg = new NReco.VideoConverter.FFMpegConverter(); for(int i=0; i&lt;5; i++) { ffmpeg.GetVideoThumbnail("C:\\example.mp4", "image_" + i + ".png"); } This won't work as it will probably return the same image.
Thanks for the advice! I didnt use I because I didnt know it existed :)
Hi. I have tried adding the binaries from FFMPEG into my project and used this code: ProcessStartInfo ffmpeg = new ProcessStartInfo(); ffmpeg.CreateNoWindow = false; ffmpeg.UseShellExecute = false; ffmpeg.FileName = "\ffmpeg\ffmpeg.exe"; ffmpeg.Arguments = "-i example.mp4 -r 500 -f image2 image-%04.png"; ffmpeg.RedirectStandardOutput = true; Process x = Process.Start(ffmpeg); However this returns an error at the final line: System.ComponentModel.Win32Exception was unhandled Edit: Build settings is already set to "Any CPU" 
Did the exception have any message attached to it?
How about some answers?
Found the error, forgot to copy the ffmpeg.exe into the folder :-/ Finally worked.
You don't assign the result of the `Console.ReadKey()` call within the `while` loop change this Console.ReadKey(); if (result.KeyChar == '9') { /// } to this result = Console.ReadKey(); if (result.KeyChar == '9') { /// } To return to the main menu you'll need to use the `return` keyword.
Thank you. Looks like this is ultimately what I would end up in doing. But is there any harm in passing 'this' to another class and let it operate on it? I mean is it an acceptable way? Or a bad design?
Thats done the trick thank you very much!
I can not find this pipeline tool (only integrated into VS as "new project template" which does not work for me as displayed on YT.) Do you happen to have a link to the Pipeline.exe? Thanks! BR Fullduplex
Like all things, passing in ``this`` as a parameter can be abused, but it's not an inherently bad practice. For example, ``List&lt;T&gt;`` will pass itself as a reference to its enumerator when ``GetEnumerator()`` is called, so that an exception can be thrown if the list is changed during enumeration (such as a ``foreach`` loop).
I switched to software development last year, working in projects related to some state institutions. Though I can put them in my cv, I am not sure if they are valuable since the title is "network administrator". They don't need a network admin but a developer however they don't have an extra position for that, so I worked as a network administrator while doing some dotnet development including backend in WCF and frontend in both WPF and WebForms. Under these circumstances, I believe the MCS* certification is a way to prove your ability and proficiency. But this is an edge case as you see.
My two cents here. I think certifications mostly lost their value nowadays. No one that I know look or care for them in resumes, basically due to so many bad candidates with MCS*** stuff on their resume. When you actually ask them stuff or ask them to write something, they just can't do it. The problem with certification is that you mostly memorize the answers just to pass the test. I myself have an MCSD, that I got it from investing something like 40 hours of study. The test itself is pretty poor and don't actually prove anything. Ask me now if I remember all that stuff? Pretty much nothing, just things that I actually work with. My opinion is that if you can show actual work, like your Git repos, full of interesting stuff that you wrote, or, a nice profile on Stackoverflow that would count a LOT more than a couple of MS certifications. Invest your time on getting an online presence: Github, create a blog, help on developers Q&amp;A sites like Stackoverflow and so on. That will help you improve your skills and show you are an active developer. That is way more guaranteed to land you a job. One interesting thing you could do is: Try finding any open source project that are looking or needing contributors and start to help them. You learn a lot by reading others code. You can take a look here: http://up-for-grabs.net/#/ 
Look at this https://www.nrecosite.com/doc/NReco.VideoConverter/
`Id` is an int, while `ReadInput` is a string. You'll need to convert one of them to match the other, for instance: `if (c.Id.ToString() == ReadInput)`
Alternatively, he could do this instead: result = Console.ReadKey(); While (result.KeyChar != '9') { Console.WriteLine("Key Press is Invalid, Try again"); result = Console.ReadKey(); } Console.WriteLine("now returning to main menu"); 
You can make a utility class with common methods. Your classes still have state, but can use the common static methods for a calculation or some kind of output.
&gt;2) Why is everything in the API async? And then why does everything await for results? Await doesn't mean what you think. I can't explain it better than stackoverflow: https://stackoverflow.com/questions/14455293/how-and-when-to-use-async-and-await 
&gt; you'll need to use the return keyword. Unless this is all encapsulated in one big sub/function/while loop, in which case he probably wants to use the **break** keyword to only leave the while loop where the 9 key is expected.
I'm not sure I totally understand what you're saying. You don't have to own a project to be able to speak to it. I wouldn't need to see the code to be able to tell if something has actually built the thing. It's usually blatantly obvious after a few questions about the design, architecture, tech stack, and why they made certain decisions, whether or not a developer actually had any experience building something. A certification doesn't tell you any of that and doesn't allow a candidate to speak to any of that. Just my 2c
You don't have to own the codengo speak to it, but you do to share it, which is what most people want from a portfolio. I can talk about my work, but I can't show it to you without my employer's consent. It's often not clear who would own anything I did in my free time or whether I could release it to anyone. I'm not at all alone.
Agreed, but you don't need to be able to share it to talk about how you built something. Maybe "project" is the wrong word, and it seems that you think I'm arguing to see somebody's source code. I'm not, but I'd rather have a developer have real world/practical experience building something, and in my opinion, certifications aren't sufficient. It'd be like somebody reading a book that explains how to be a surgeon. I really doubt memorizing the book alone means the person would be a halfway decent doctor.
I assumed you wanted the standard github profile.
I didn't know about entity framework. I haven't programmed in probably 5+ years, and just recently decided to switch majors from CIs to CS. I'm just trying to get back in to programming before school starts. So this is almost all kind of new to me, haha.
Why did i even bother answering
I'd suggest you make sure to have a working version of MonoGame. If you do, you can find your project content file (Content.mgcb) in the solution explorer, in a folder named "Content". From there, you can open it and add any ressource you need for your project from the pipeline tool. If you haven't already, take some time to read MonoGame's documentation, especially this: http://www.monogame.net/documentation/?page=Using_The_Pipeline_Tool
I tried it and just did not work, I gave up on that. I dont know whether I do something the wrong way or perhaps the problem is, that I use VS2017 instead of some older version. With the PNG files I dont have a problem, since the below linked png to xnb is working flawless... What I am missing is to make SpireFonts. Do you know a standalone tool which is working? I tried many, but they all want to link with XNA 4.0 DLL-s, which I dont have...
At this point, your best bet is to take it to the MonoGame forums: http://community.monogame.net/
I believe that the idea of VS2017 is to bring .NET Core as their main framework for development, so it comes bundle with it. If you want to do pure .NET Framework development, then you can use VS2015. Even better, you can tech .NET Core instead of .NET Framework, which is almost the same in the case of a console application.
Been a web dev for 2 years now, we young devs are just as grumpy about this as you.
Sorry don't have much time to post a detailed answer. Look into Keyed Services. http://docs.autofac.org/en/latest/advanced/keyed-services.html
I owe you a beer! Thanks mate, that did the trick perfectly.
The first thing I notice is that there are almost no comments in your code, and most that are there seem to have been auto-generated. Learn to document your code to a suitable level so that anyone reading it can understand what it does without having to read every single line of code. It will also help future-you. public static ConcurrentDictionary&lt;string, string&gt; MyDict `MyDict` is an awful name for a variable. A variable's name should tell you about the information that the variable holds, not what type it is. We can see from the declaration that it's a dictionary, and the "my" prefix adds no useful information. What is the information it contains ? What information is in the keys vs the values? private bool _TextBlockVisible; public bool TextBlockVisible { get { return _TextBlockVisible; } set { _TextBlockVisible = value; } } Why are you manually declaring the backing fields for your properties? The C# compiler will auto-generate them for you if you do this instead: public bool TextBlockVisible { get; set; } That's much more readable. There are times when you need to do something clever in a get or set, which in turn means you need to manually declare the backing field, but in your code you don't need that. public static string totalTime Total time of what? This is where a comment comes in handy or, failing that, a better named variable. byte[] raw = wc.DownloadData(URLToTest); What if this throws an exception? int startIndex = webData.IndexOf(@"Edit section: References"); What if this returns -1 because it can't find the string? string re1 = "(&lt;)"; // Any Single Character 1 string re2 = "(.)"; // Any Single Character 2 string re3 = "(o)"; // Any Single Character 3 string re4 = "(l)"; // Any Single Character 4 string re5 = "(&gt;)"; // Any Single Character 5 Regex r = new Regex(re1 + re2 + re3 + re4 + re5, ... Variable names with a numerical suffix are usually a [code smell](https://en.wikipedia.org/wiki/Code_smell) and usually indicate that you should be using an array or need to think about what you're doing. Why 5 different strings that you immediately concatenate? string returnString = String.Empty; That variable doesn't seem to be used. Check the warnings that the compiler generates when you build your project - you should aim to build with no warnings at all. string referenceFinder = String.Empty; ... string URL = String.Empty; You don't use these outside your `for` loop. It's a good rule of thumb to declare variables as late as possible, close to where they're used. In this case you could just declare them on their first use, e.g. on line 127: string URL = referenceFinder.Substring(0, referenceFinder.IndexOf('"')); Then you have: for(int i = 0; i &lt; urlIndexes.Count; i++) As far as I can see you're only using `i` here to index into `urlIndexes` so you'd be better off with foreach ( int urlIndex in urlIndexes ) In this bit of code: Stopwatch testingTime = new Stopwatch(); ConcurrentDictionary&lt;string, string&gt; referenceList = new ConcurrentDictionary&lt;string, string&gt;(); testingTime.Start(); You could just do: ConcurrentDictionary&lt;string, string&gt; referenceList = new ConcurrentDictionary&lt;string, string&gt;(); Stopwatch testingTime = Stopwatch.StartNew(); to create &amp; start the stopwatch at the same time. if (!responseList.ContainsKey(URL)) This check is pointless - the following TryAdd call will fail if the url is already in the dictionary. Hope that helps! 
You don't need to convert the file. If you add the asset's location to the Content.mgcb it'll convert it when it compiles. Here's an example from a png I've added to the project (in content.mgcb): (hashtag)begin Images/BackgroundBit_D.png /importer:TextureImporter /processor:TextureProcessor /processorParam:ColorKeyColor=255,0,255,255 /processorParam:ColorKeyEnabled=True /processorParam:GenerateMipmaps=False /processorParam:PremultiplyAlpha=True /processorParam:ResizeToPowerOfTwo=False /processorParam:MakeSquare=False /processorParam:TextureFormat=Color /build:Images/BackgroundBit_D.png Replace (hashtag) with a hashtag. Reddit formatting..
so you have a choice between using entity framework or to continue with crap ways of programming. Even using DataSet designer is a plus to concatenating shite strings.
I only got to try it out now but it doesn't seem to work, I genuinely am at a loss as to why. 
I've seen this often, but it always just reads like a ghetto attempt at code contracts...
Well, the language doesn't have actual code contracts (at least not in a non-beta state), so I guess it's better than nothing? The pattern is also used by the framework internally, and in CancellationToken.ThrowIfCancellationRequested.
Not a language feature sure, but contracts have been in the framework for years now? Ref: https://docs.microsoft.com/en-us/dotnet/framework/debug-trace-profile/code-contracts https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.contracts?view=netframework-4.7 https://github.com/Microsoft/CodeContracts Personally don't use them, so not sure how effective they are (and granted, they seem a little.. unmaintained, looking through the issues).
I use similar code for code contracts: Ensure.NotNull(myArgument, nameof(myArgument)) With ReSharper annotations it will also inform me that the second string argument must be an argument name, and that this check verifies the absence of null. But I'd never use such a pattern for regular business logic, like the article does with `ThrowNotFoundIfNull` and the `HttpResponseException`.
The Microsoft/CodeContracts project is basically dead. It has been for a long time. It was always labelled as research.
I do wonder if non-nullable reference types (coming soon!) are going to sweep away a lot of usage of these kinds of libraries too. Doesn't get all of the types of contract-ey things, but goes a long way.
Bind autofac to a factory class, but create the factory class using autofac, get autofac to inject HttpContext or equivalent in the constructor, and based on context, resolve the correct provider from the container. I mean, it's probably a bit of a smell, but if there's a class called PaymentProviderSelectionFactory or something like that, the obviousness is right there - everything is still being created by the factory, you're just plumbing in a bit of logic in between.
If you are only interested in Syntax Highlighting, https://github.com/PavelTorgashov/FastColoredTextBox and https://github.com/icsharpcode/AvalonEdit might be a better bet. ANTLR is probably more suited if you decide to do Semantic Analysis/Highlighting of your code (to generate a hashtable of classes/structs/types for tooltips for instance). I would be interested to see how you used ANTLR for highlighting (if your code is available) as I am trying to do something similar for a C# editor written in C# where I am trying to replace Omnisharp/Roslyn (don't like Omnisharp as I want to have something inside my app and I want to replace Roslyn because it requires me to have MSBuild installed if I decide to parse solution files). 
So how would you return that 404 when the client sends an id that does not exist?
Code Contracts are definitely superior but most codebases do not use code contracts. Also even with code contracts you sometimes need actual code to throw exceptions. I don't see how code contracts will solve the Web API case for.
Why not public static void ThrowIf&lt;TException&gt;(bool bla) where TException : Exception{..} 
I can imagine that if someone is very new to coding your response would go right over their head. I appreciate wanting to teach the best ways to do something but everyone has to learn the basics first. 
Because you repeat the if statements everywhere which is repeated code.
I am not the author of the post, but I'll answer anyway. Personally, I would not use exceptions at all. Exceptions are used to model exceptional behavior, when you want your application to just fail and recover. Looking up an item which does not exist is nothing exceptional, and probably quite a common occurrence. Instead, I would write my controller method like this: public IActionResult GetUser(string id) { var user = userRepository.ById(id); if (user == null) { return NotFound(); } return Ok(user); } I could avoid the null-check by using an [`Maybe`](https://github.com/jb55/Data.Maybe.cs)-type: public IActionResult GetUser(string id) =&gt; userRepository .ById(id) .Map&lt;IActionResult&gt;(user =&gt; Ok(user)) .Or(() =&gt; NotFound());
Its better than writing an own method for every Exception i want to throw ( there is exactly one if statement in this method) 
I would try to replace Parallel.For with Async versions of methods, download of a website is IO bound and therefore Async versions are prefered
The point is that you throw the same exception on the same condition multiple times.
I have tried your approach and I disagree that it is better. First of all there is value in indicating that the method returns an User. I think it is better from pure C# perspective but even if it was not the killer feature is API documentation. Tools like Swashbuckle look at the return type of your actions to generate Swagger. By writing the method like this you have thrown away one of the most useful tools in API development. P.S. BTW I am the author of the original blogpost. 
Hmm maybe write a static class with helper methods for very frequent conditions? 
When I determined that the ID does not exist, I have my result, so I return the result. I do not misuse exceptions for regular business flow control. For an API a 404 is a regular and completely expected use-case - nothing exceptional.
They are my number 1 anticipated feature, and they will remove so much defensive boilerplate code.
Real shame. They had promise.
Code Contracts are useful for pre-conditions like null checks. But the author is suggesting to use exceptions as regular flow-control for business logic, wrapped in utility functions. Code Contracts does not fit this use-case.
Static class is one way to write these types of methods. Putting them in a base class is another way.
I disagree. I think 404 is close to exceptional case for an API and is a fine case for exceptions. In addition if you return some kind of action result instead of say a Comment object you are handicapping tools like Swashbuckle which cannot autogenerate docs and swagger from your actions.
Being the current up and coming development platform from Microsoft, it seemed like a natural progression back when I started using it in 2008 or so, as the company I work for used mostly VB6 before that. I had not, and still haven't used Java, and all I've seen and heard of it seems to indicate that it serves more or less the same purposes as C#, but is worse.
&gt; I disagree. I think 404 is close to exceptional case for an API and is a fine case for exceptions. We can surely agree to disagree. In my opinion a 404 is absolutely an expected cases. Elements get deleted all the time, and people can have old links stored to elements not existing anymore. That's not an exceptional case. &gt; In addition if you return some kind of action result instead of say a Comment object you are handicapping tools like Swashbuckle which cannot autogenerate docs and swagger from your actions. By returning the object directly you are also handicapped, even more than with an action result object. Can you cleanly document that your action can return a 404? Can it document that it possibly returns a 301 in some cases, or a 204 in other cases? No, it can't. The exception is hidden away in the method body. For these cases you need additional information, often provided via attributes. This is supported even by Swashbuckle. I take the example code from /u/allansson and adjust it: [SwaggerResponse(HttpStatusCode.OK, Type = typeof(User))] [SwaggerResponse(HttpStatusCode.NotFound)] [SwaggerResponse(HttpStatusCode.BadRequest, "Negative ID")] public IActionResult GetUser(string id) { if (id &lt; 0) { return BadRequest(); } User user = userRepository.ById(id); if (user == null) { return NotFound(); } return Ok(user); } This is superior to the exception case. The code clearly shows what different return values you have - directly there, not in some obscure helper methods. Swagger supports it and documents all possible different use-cases (but granted, you can do this with the exception way too).
I don't see how this is superior. You just typed more things by hand. What I do to document the different response statuses is that I type them by hand in the remarks section. Your suggestion requires typing more things by hand and adding library specific attributes all over your API (although I don't mind this as much but it is another small downside)
this is an example of a generic `ThrowIf` implementation which uses a helper method to avoid duplication, but also allows simple `booleans` as condition (yeah it's ugly but i think you get the point) class Program { static void Main(string[] args) { int[] bla = {3, 2, 1, 0}; for (var i = 0; i &lt; int.MaxValue; i++) { ThrowIf&lt;IndexOutOfRangeException&gt;(IsOuttaBounds(i, bla.Length)); //common condition, using static method to avoid duplicates HopefullyNotZero(i); } } static void HopefullyNotZero(int x) { ThrowIf&lt;ItIsZeroGodDamnItException&gt;(x == 0, "peter"); //very specific condition, doesnt need an own method Console.WriteLine($"{x} is not zero, yippiee"); } } static class ThrowHelper { public static void ThrowIf&lt;TException&gt;(bool condition, params object[] arguments) where TException : Exception { //ugly code ahead, may throw an exception while throwing an exception (use the new() constraint..?) if (condition) throw typeof(TException).GetConstructor(arguments.Select(x =&gt; x.GetType()).ToArray()).Invoke(arguments) as TException; } public static bool IsOuttaBounds(int x, int length) =&gt; (x &lt; 0 || x &gt;= length); } class ItIsZeroGodDamnItException : Exception { public readonly string PersonToBlame; public ItIsZeroGodDamnItException(string name) : base($"it's {name}'s fault") =&gt; PersonToBlame = name; }
It is mainly for people that had games created in XNA that wanted to port them to other desktop platforms (like mac and linux). This is why it focuses on creating a replacement of XNA and not an improvement. see also http://fna-xna.github.io/
my problem is that this project/program is split over many threads so that new people need to read the whole code instead of asking the ones that already know what this is about. of course you can't answer responses in three different threads with the same topic but different people 
Ultimately you need a virtual microphone device. Implementing your own is not easy since you basically need to implement a device driver, but there are various software that create a loopback between a virtual audio device and a virtual microphone, so you can just output audio normally to a specific device and it'll be fed back into the pretend microphone for other applications to pick up. "VB-Cable" is one I've seen come up regularly, although I haven't used it myself. Another option might be to interact with the Discord API directly. I know there is a well developed C# library for that (Discord.Net), but I don't know if it supports VOIP and how easy or difficult this approach would be compared to the other one.
One would really hope.
&gt; I don't see how this is superior. You just typed more things by hand. Then yo will likely never see it. :-) I hope others don't use exceptions for flow control. You can surely argue about the pros- and cons of this approach. &gt; What I do to document the different response statuses is that I type them by hand in the remarks section. Your suggestion requires typing more things by hand and adding library specific attributes all over your API (although I don't mind this as much but it is another small downside) That is the second part. Using the attributes will actually make Swashbuckle (and other tools) recognize that you can have a different result than the "Ok" one. By just adding it to the remarks section, you may have mentioned it... but tools like Swashbuckle have no idea this can be the case. According to them the API **always** returns Ok. They don't parse the content of the remarks section (something generally written in plain English). This is without argue better - and it's irrelevant from the previous point to use exceptions for flow-control or not.
&gt;In practice, this should cut down on internet traffic and allow more mining efficiency. Are you currently bottlenecked by your internet traffic?
To get rid of all the ModelState.IsValid you could create an action filter and decorate the controller with it.
Using reflection for this seems like a nasty solution. Using a Func seems preferable (it would offer type safety, for instance), and might even perform better. public static void ThrowIf&lt;T&gt;(bool f, Func&lt;T&gt; createError) where T : Exception { if (f) { throw createError(); } } ThrowIfOutOfRange(int x, int min, int max) =&gt; ThrowIf(x &lt; min || x &gt; max, () =&gt; new IndexOutOfRangeException()); An overload like `void ThrowIf&lt;T&gt;(bool f) where T : Exception, new() =&gt; ThrowIf(f, () =&gt; new T());` would cover your simple case, and it doesn't require much more code at the callsite than what you've got, there.
Are account IDs unique among all your customers? If so, you can use a Dictionary. var customers = new Dictionary&lt;int, Customer&gt;(); When you create your customers, add them to the dictionary instead: var customer = new Customer(); //parse array and set properties like before customers.Add(customer.ID, customer); And then, later on, when you are requesting the ID: var id = Int32.Parse(ReadInput); If (customers.ContainsKey(id)) { var customer = customers[id]; //do stuff } else { //customer doesn't exist } As /u/LondonPilot said, you are looping on the lines which we don't believe is what you intended. What are you trying to accomplish, exactly?
Hmm I have to check what the generated swagger looks like with attributes. Still have to write the OK return type elsewhere and not where it actually should be - in the return type of the method.
Before you turn off .net core I would consider why you want to. If there's no specific reason you're using the full .Net framework (specific packages that don't have core-ready versions available, for example), I'd just teach them .Net core. It's the more future-facing technology now that Microsoft is having a crack at being multiplatform. 
Why do you think solely the ok-return type should be the return type of the method, when you actually can have multiple different return values? Ok is not the only legitimate option in the majority of APIs. You have multiple different possible return values. You'd need something like a discriminated union, which is not part of the C# language. It can be implemented by having a common base type... In which case we are back to something akin `ActionResult`.
Please don't recommend Dataset designer to anyone we still use it at work and just hearing its name makes me shudder. 
If you use it like this, beware of hidden allocations in form of closures if you use an argument in the creator-delegate.
You should use neither A nor B. What you want is an interface extension method. https://stackoverflow.com/questions/2770333/can-extension-methods-be-applied-to-interfaces If it is true that these methods are common enough to reuse code, you put that code in an interface extension method. Then in your classes you can mix and match inheritance via different interfaces. 
Possible closures seemed preferable to definite allocations from the arg array and reflection code, but YMMV. That said, I would strongly recommend overloads for arg-passing to mitigate that problem.
Because for me responses are either success or exception. Non-success responses are the HTTP equivalent of exception. And yes if we had discriminated unions in C# there may be better representations of the result.
&gt; Non-success responses are the HTTP equivalent of exception. In many APIs there are multiple success return values. If you have a case where you either have a success value (200 OK), or no value (204 No Content) - will you throw an exception for the second? Even if it's technically a success and no error? Same with redirects. Those are not errors - will you throw exceptions for them? How do you differ between server errors (5xx) and user-errors (4xx)?
Hmmm I don't know why I never thought of that. Do you happen to have an example?
Look up the memento design pattern. This is what you want for an undo / redo system
No Content is also success value (and as it happens is returned by Web API when your return type is void or Task). Differences between 5xx and 4xx errors are simply different exceptions but in practice 5xx errors are handled automatically in a general error handler and not in each action. I have not given much thought to the redirects to be honest. I can't recall ever needing one in an API (unlike MVC actions)
 public class ValidateModelAttribute : ActionFilterAttribute { public override void OnActionExecuting(ActionExecutingContext context) { base.OnActionExecuting(context); if (context.ActionArguments.Any(arg =&gt; arg.Value == null)) context.Result = new BadRequestResult(); if (!context.ModelState.IsValid) context.Result = new BadRequestObjectResult(context.ModelState); } } usage: [ValidateModel] [Route("users")] public class UsersController : Controller 
&gt; No Content is also success value (and as it happens is returned by Web API when your return type is void or Task). You avoided the question. A method where **both** a value (200 Ok) and no content (204 No Content) can be returned. And using `null` is no option, as the value can be value type, and `null` can be a valid value too. Also where **both** a result and a redirect is possible.
I really don't like this pattern and think the best solution is still to throw the thing by yourself and don't pass it to 13 delegates and generics just to save one line of code. the reflection implementation was short and delivered the functionality i wanted (i loove reflection) , but i wouldn't do any of this in a real program nor would i recommend it. Your solution may work, but is it really worth the trouble? You could as well just write if(IsOuttaBounds()) throw new IndexOutOfRangeException() ; 
I have never encountered such a case in practice. I would probably revert to using ActionResults. A related question is what happens if you can return two different objects as a 200 OK
Can it be done as some kind of filter that is automatically applied to every action until you opt out with a negative attribute?
it's almost always the case that you would want to validate the model. you could apply it to every controller by adding it to the global filters. services.AddMvc(options =&gt; { options.Filters.Add(new ValidateModelAttribute()); }); I am not sure whether you can opt out of it by applying another attribute, when you set context.Result you short-circuit the filter pipeline, Other filters won't get executed. [Filters.](https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/filters)
So... You are handicapping yourself. :-P
Reflection is probably slower and is *definitely* less readable. &gt; You could as well just write [if expression] Yes, you could, but if you're writing that all over, there's some benefit to wrapping it up into a common method. Something like ThrowIf isn't tremendously useful *by itself*, but it is handy for encapsulating the pattern behind contract assertions. At that point, if it's already there, why not use it?
I'd treat it like lowering the level of abstraction because the abstraction leaks in this specific case.
I will look at it for my next project. In a couple of occasions I have hit a case where if validation fails I still have to do something and construct very specific validation errors.
In theory, you could already avoid nullable stuff already, with strong enough developer practice. Scala's types are *technically* nullable for Java interoperability, but null is considered utterly reprehensible practice, with `Option[T]` preferred (it's either `Some[T]` or `None`). In web frameworks (well, the Play Framework at least), you would differentiate between required and optional parameters by using either `T` directly or `Option[T]`. It's just assumed that any type, `T`, is not null. Because if it is, you either are working with Java and should know what you're doing (and using wrappers, ideally) or you're a shitty Scala programmer. For whatever reason, C# lacks such a type. It can be provided via libraries. Unfortunately, the lack of establishing this as a language best practice (namely avoidance of `null` like the plague that it is) from the start means most libraries will taint your source code. Even the feature of non-nullable references isn't really gonna change things considerably because there's still the issue that you can never know if a regular reference can be null or not (and libraries will be slow as hell to change, if they even can). I find it unfortunate that more languages haven't gotten into the `Option` pattern. It's very common in functional languages. Java did introduce such a type in Java 8, but it's not widely used. Most languages are completely lacking such a thing.
as i said i know reflection comes straight out of performance &amp; readability hell and your solution is definitely better, but what is the point of a generic throw helper if it is encapsulated in a non generic method? if this is what we want i would just write a static class with methods for each exception and maybe different overloads, import it statically and cry myself to sleep
I like it, but on Linux it trailed a little bit behind on the .NET support which means I couldn't use the latest and greatest that VS2017 has. The refactorings are pretty good, the interface is decently zippy. It is definitely a IDE verses editor (Atom is my other environment). Overall, I use it as often as my other C# environment (VS2017). It is pricey, but it is also rather new so it will take a while for it to mature. There are definitely rough edges on it. Price wise? Not entirely sure, it was too much for me (until the boy gets out of day care) so I switched back to VS2017 (and Atom) until then.
Compared to what the OP has done, we really cannot understate the difficulty of implementing this. OP's so far done the easy part. Except possibly the option of routing an output device automatically to a virtual mic using pre-existing software. That might be easy enough, although I've never looked into it personally, so can't say (but you'd have to do quite a few steps of setup, since the audio output can't just go to the regular speaker, since then it would get mixed with any other audio, and discord is most commonly used by gamers). Honestly, they might want to consider just running this app on another device and playing it through the speaker and having an actual hardware mic pick that up. A lot of people do have an extra device that could be used for that.
I've always used Visual Studio, so either I'm not aware of what "the refactorings" are, or I've just been spoiled by always having refactoring in VS. I have heard about that talked about a lot in Rider. What is that, exactly? My understanding that it's basically just renaming of variables throughout all of the documents, no? I'm not familiar with Atom, but yeah, on the price point I just can't afford that. Probably ever. $350 to start, then $200 / year in perpetuity, whether talking about a major new upgrade or simple bugfixes? That's outrageous. I'm not a fan of how bloated VS has become, and how difficult it is to just do a simple upgrade of a simple feature, and even how buggy it's becoming, often requiring an IDE restart when you start getting vague, untraceable errors, but as an indy dev, I'll be sticking with it as long as I can't afford to even *try* the alternatives.
Does it come with the normal ultimate subscription?
You probably *should* stick it in a static class, and you should write methods for common checks in your code. The value is that methods like this, given decent, readable names, are more comprehensible than if blocks repeated throughout. You might have to check the contents of the method once, but it shouldn't change between invocations, so you only have to examine the arguments on future calls. You could also make these conditionally compiled so they don't have to be in the release build. I don't really get the allergy to encapsulating repeated code. You can go too far, sure, but this ought to be an improvement over dozens of raw ifs scattered through your codebase, if it's used judiciously.
To take a slightly more complicated case: a user is trying to update a field belonging to a specific id. If the id does not exist, would you still not throw an exception? What if the user entered an incorrect value? For normal query operations it's fine to return null because you're expecting a result, but for commands which should be one-directional (void) traffic you are kinda painting yourself into a corner. I think both answers have valid real-world applications.
Doesn't appear to. Looks like there's now [an "Ultimate+Rider" option that's more expensive](https://www.jetbrains.com/store/?fromMenu#edition=personal). *Edit: Seriously... Why would you downvote the correct answer, and upvote the wrong one, folks?*
For individuals, it's $139/year with de-escalation every year. It's a pretty good price for an IDE. There is also perpetual fallback if you choose not to continue -- that is, if you end the subscription at any time (minimum 12 months), you get to own the bytes for the last version you bought forever. I don't know, but this seems like one of the sanest software subscription models out there.
Ah, well this changes things significantly. I just assumed if you killed your subscription the IDE would cease working. So basically it's $139 for an IDE. But you can get cheaper "upgrades" IF you buy the "latest version" each year. That makes much more sense. Thanks! So any experience with Rider and how it compares to VS?
Yes.
Yeah, JetBrains is a pretty good company when it comes to treating their developers right. They also give discounts for students and OSS projects.
Yeah, that was the point that bummed me out. :)
No, you'd still return 404 since an item with that id does not exist. A 404 response is not an exception.
&gt; I would be interested to see how you used ANTLR for highlighting (if your code is available) as I am trying to do something similar for a C# editor Sure. My code is open-source and available here: https://github.com/jamesqo/Repository. The code I'm using to highlight Java (which is the only lang I've implemented so far) is available [here](https://github.com/jamesqo/Repository/blob/master/Repository.Editor/Internal/Java/Highlighting/JavaHighlighter.VisitMethods.cs). The part of the app that uses it is [here](https://github.com/jamesqo/Repository/blob/master/Repository/EditFileActivity.cs#L109). To see it in action, if you have an Android phone &amp; Xamarin tools installed, open the solution in VS and debug it on your phone. Then open any `.java` file in the app. Once you do that, the highlighting will kick in. If you don't have an Android phone, you'll have to look through the code manually. Feel free to PM me any questions you have, though.
[y u do dis](http://i.imgur.com/1GKHj9k.png)
I've used Rider on Linux and currently use VS on Windows. My Rider experience is not extensive so take what I say with a pinch of salt. Rider is currently the best IDE available for .NET platform running on non-Windows OSes. It's leagues ahead of MonoDevelop. For Windows, I feel VS is still the more polished, better integrated product. But not by much -- Rider as it is, is a solid product, and one that is actually pleasant to code in. Rider is still a new product, so it has room to grow. I expect it will get better if the market picks it up. This would depend on the success of .NET core etc. I don't expect a massive exodus from VS to Rider on Windows, so Rider's market would primarily be among non-Windows developers. I ardently hope that Rider does well. I've always been impressed by IntelliJ, and I consider many of JetBrains' tools best of class. 
I used it through a good chunk of early access, and loved it enough to pay for it the day it came out of early access. 
Hopefully less crashing, less intellisense not working, less debugging not working, less profiler not working, less memory snapshots not working, and less building hanging VS. I'll stick with VS 2015 as much as possible till 2017 is marginally more stable than Windows ME.
Yep, I agree with this entirely. I think the anti-pattern that I see in C# land most often is primitive obsession - people don't create types for the data that they're passing around, therefore they have a bunch of data flowing through methods that could potentially be in an invalid state. Stronger usage of types, types that can't be created invalid, and the knowledge that if a type is created it is "structurally correct" solves a huge amount of this kind of boilerplate rote cruft in loads of apps.
&gt; To take a slightly more complicated case: a user is trying to update a field belonging to a specific id. If the id does not exist, would you still not throw an exception? What if the user entered an incorrect value? If the item does not exist I'd simply return a 404 (Not Found), because a resource was attempted be accessed that does not exist. Every time user input is involved errors are an expected case. In case of invalid data I'd simply return a `BadRequest`-result object. &gt; For normal query operations it's fine to return null because you're expecting a result, but for commands which should be one-directional (void) traffic you are kinda painting yourself into a corner. Not sure what you refer to. `null` can be a valid result - it's a different value than the absence of a value in HTTP (204 - No Content). It seems that both you and the original author use HTTP just as a means for remote procedure calls, but not making use of the HTTP protocol itself.
i agree but i must say that i dislike this specific case of forced encapsulation
The best examples to glean research from is either the memento pattern, event sourcing, or redux. Having looked into those myself, I can tell you that you will need to refactor. I personally don't like relegating control to an Event Store or Store as in event sourcing or redux; I just don't see storing the entire app state as a scale able design pattern. I boil complex objects down to isolate where clients can issue changes and where immutable (re: serializeable) data gets changes. Let events handle everything else.
Next release will probably be "Microsoft DotNet Core SDK 2.1" just to further infuriate you.
Somehow I don't doubt that haha. I only noticed it because my `dotnet --version` command was still showing 1.0.4 after installing 2.0, so I went into apps &amp; features to see if it was there and it wasn't, so I restarted and it still wasn't working. In the end, I actually just needed the x86 version.
Looking forward to learning. Enjoying asp.net core so far.
&gt; Not sure what you refer to. null can be a valid result - it's a different value than the absence of a value in HTTP (204 - No Content). Void operations don't return anything. So there is nothing to check for null. You could say that the method should not return void, but there can be reasons for that. If any method in the chain returns void, then the only way to return a 404 to the end user is by throwing a handled exception, and then catching it in a middleware (.NET Core), controller or error handlers. There is nothing inherently wrong with using exceptions for non-exceptional code if they are handled correctly. &gt; It seems that both you and the original author use HTTP just as a means for remote procedure calls, but not making use of the HTTP protocol itself. 'Expected' exceptions can be handled by middleware or error handlers to return a custom result (404, forbidden, bad request).
Hmm not really sure if I agree with your advice here in the context of design. Syntactically it is fine, of course. When I design base classes, I don't design it in such a way that design accomodations are made for specific subclasses in mind. What I am saying is that I wouldn't implement the "IsVIP" property in these examples. While I don't think it breaks Liskov substitution by itself, I feel as though your suggestion would encourage it. Do you agree or disagree?
Disagree. While Scala is fine because it has Option from the start, Java's Option is the worst of both worlds. You get slowly adapting libraries and annoying wrappers that are not enforced by the compiler. If C# introduces nullability tracking libraries will eventually adapt. The time it will take will be comparable to libraries in Java adopting Option.
As /u/VoxUmbra said, subclasses can access the public and protected members of its base class. What will the VIPClient be doing that other clients wouldn't be doing? Should there be a VIPClient subclass, or can Client classes just have an "IsVIP" property that informs the client class how to behave?
No, that's not what I'm concerned with. I think the efficiency of finding solutions to the current work/has problem would be much higher if multiple miners work on the same problem at the same time, versus them all getting different work. 
I've used this wrapper and it works quite well: [MediaToolKit](https://github.com/AydinAdn/MediaToolkit/) You can install it via the package manager in Visual Studio.
At first they split references to tiny parts, and now they are creating AspNetCore.All metapackage again. They walk in a circle.
RazorPages and mvc controllers. Two paradigms in one framework. Is it really worth it?
There is actually a pretty strong argument for: if (arg1 == null) { ThrowHelper.ArgumentNull(nameof(arg1)); } and similar checks where * the if-expression doesn't involve a virtual method call * the if statement body is a static method call that actually throws the exception * the method containing this if statement is small and will not be a virtual call That is that this code is much more likely to hit a pattern that gets optimized during JIT than alternatives. This example code: static void HopefullyNotZero(int x) { ThrowIf&lt;ItIsZeroGodDamnItException&gt;(x == 0, "peter"); //very specific condition, doesnt need an own method Console.WriteLine($"{x} is not zero, yippiee"); } May get optimized such that the methods calling it instead inline the IL here instead of making an actual function call. In this case, that optimized code will still make 3 calls and the first one cannot be inlined because it contains a throw statement (which can make the local environment observable, so inlining is prevented). The first alternative static void HopefullyNotZero(int x) { if (x == 0) throw new ItIsZeroGodDamnItException("peter"); Console.WriteLine($"{x} is not zero, yippiee"); } cannot be inlined because the method body here contains a throw statement. A second alternative: static void HopefullyNotZero(int x) { if (x == 0) BlamePeter(); Console.WriteLine($"{x} is not zero, yippiee"); } static void BlamePeter() =&gt; throw new ItIsZeroGodDamnItException("peter"); May inline `HopefullyNotZero(x)` into the caller (and `string.Format` and `Console.WriteLine(...)`) and the executed code might not actually make any calls.
http://docs.autofac.org/en/latest/register/registration.html#selection-of-an-implementation-by-parameter-value 
Been using it for a few hours today with ASP &amp; WPF and it seems better overall. Still need to test it out with my Xamarin projects since those were the worst.
As someone who studied for the certs, I'll go one further and say that it's more important to understand good OOP, which the cert books don't teach. If you can demonstrate that you understand topics like the difference between inheritance vs. composition, the 5 principles of SOLID, Inversion of Control (IoC) &amp; Dependency Injection(DI), and be able to write good unit tests or practice TDD - you'll be miles ahead of other "junior" coders vying for attention. If you can demonstrate these concepts on github, you have some proof that you can do more than just pass a few tests. 
They are providing options now. Nothing wrong with that.
[removed]
Wasn't it supposed to come out on September 18th? Not complaining since I've been waiting for this thing come out of the preview stage for a long time, just curious.
I'm actually kind of enjoying the direction it's all going - what specifically are you wondering is worth it? 
Thank you
Thank you
It's mind boggling to me how often VS2017 hangs, crashes, features stop working, presents cryptic error messages. It was clearly released before it was ready.
I'll be honest, Java's `Optional&lt;T&gt;` (and its variants `OptionalInt`, `OptionalLong`, and `OptionalDouble`) struck me as a response to .NET's `Nullable&lt;T&gt;` rather than a fully thought out option system.
There's one major problem that I can see with this pattern: It makes the code easier for you to read, but makes the code harder to read for someone else who has to maintain the code. In your simpler `RemoveAt` example, to read the code, I would need to start reading the `RemoveAt` method, then jump over to the `ThrowIfIndexInvalid` method, then jump back to the `RemoveAt` method. In other words, you're sacrificing one form of readability to promote another form of readability instead.
That argument can be applied to literally every usage of a method call.
I don't see anything about the underscore refactoring crash but I think that was slated for 15.3?
For me Razor Pages is the shitty PHP style get started quick thing. I vow to never use it in any project that I am responsible for.
This version also supports C# 7.1. No new big features so it wasn't even mentioned in the blog post.
Any help would be greatly appreciated! Many thanks, Elliot 
[removed]
Have you used them? I personally love the Razor view engine.
 Yes there is, tooling is a massive industry... in the industry... and nearly every company has a plethora of tools made for them to speed up development / QA jobs.
No I haven't. I have vowed to never use them :) I don't mind the Razor view engine especially now that it has tag helpers
Let me know how Xamarin goes, that's my main reason for holding off still.
Nowhere in that code are you sorting the list. All you're doing in the "for" loop in your QSort() function is finding the median of the list (I believe). In order to sort the list, you'd actually have to be updating the list somewhere. Also, the reason it's removing the commas is because you Split it by commas then output the resulting list. I assume this is for an assignment, because if it isn't then you can just sort the list using List.Sort().
&gt; The .NET Core team is now producing ARM32 builds for .NET Core 2.0+. These builds are great for using on Raspberry Pi. These builds are not yet supported by Microsoft and have preview status. I hope that this .NET Core 2 preview is easy to install on RasPi Linux.
7-8years ago I worked with code gear rad studio(c/c++ dev). Trust me, vs is a dream in comparison. Once I had 12 crash to desktop, all work lost, before lunch. Agree that vs 2017 is a bit buggy, but it could be a lot worse, if that's any comfort :/
I was under the assumption that this would suffice: for (int i = 0; i &lt; QuickList.Count; i++) { int currentmin = Int32.MaxValue; if(piv &lt; QuickList[i]) { currentmin = QuickList[i]; } Output.Text = String.Join(Environment.NewLine, QuickList); } Have you got any suggestions? 
You'll never use the pages but you don't mind the engine. I see what you mean now and in hindsight I'm close to the same perspective. (Whatever variety of) JavaScript front end of DOM manipulation backed by the engine is the way I roll too. I did think you were writing off the entire framework :)
I immediately created a spa angular project. I'm really looking forward to digging my teeth into the new angular. It's really great to see live updates of c# and js code on the fly. I noticed they have react templates as well. Very cool.
Nowhere in that code are you changing the list. All you're doing is finding "currentmin". Which I believe is the median of the list. My suggestion, assuming this is a course assignment and not a real project, is to review the QuickSort algorithm and implement it. I'm not going to do your assignment for you.
Nothing in there is changing the list. Take another look at whatever your source is for the quicksort algorithm. There should be some assignments or removals and insertions to the list to move items around.
Problem 2: once your list is sorted you need to separate the items in the output with a comma, the String.join is just parroting back the contents of your list otherwise.
I'm actually an aspiring .NET developer, and currently work with ABL. Thanks for your input none the less.
Alright, alright I'll go back to the drawing board. Thanks for your help Canthros
In that case, I strongly recommend you use the built-in List.Sort() method instead of trying to implement QuickSort yourself. Why reinvent the wheel?
Hopefully they improved the contrast when running with the dark palette. As an older dev, lots of highlighting was hard to see.
Fuck me mate, I'm just doing it for fun. I understand the power of LINQ and how widely used it is, I just wanted to see if I could write a sorting algorithm...
So far no new issues. Debugging from a cold start takes a long time still and loading the designer view of a layout still takes about 15 seconds, but the XML intellisense works reasonably well now. I also haven't run into the issue where objects or keywords that are normally colored, such as classes, turn into black text and cannot be hovered over, so I hope that's fixed too.
* Switch `while (loggedIn == false)` to just `while (!loggedIn)`. Anytime you're evaluating a boolean, you don't need a comparison operator. * Try to get into the habit of using `Environment.NewLine` instead of `\n` since it will return a platform-specific newline character. Doesn't really matter in this context, but still. * Put your classes inside the namespace. * Local variables are camelCase `bool LoginCheck` should be `bool loginCheck` 
Well there's not much code there, but here's few improvements you can make: * In your AddUser method, use [object initializer](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/object-and-collection-initializers). * In your CheckLogin method, you could probably use a LINQ query, such as Where or Any instead of using foreach and looping through all users in the database. * You should also avoid using the "static" keyword everywhere, in a program this small it doesn't really matter but with anything larger you want to avoid these. * Read up on [namespaces](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/namespaces/using-namespaces). Not sure if you're already doing this and just simplified the code so it's easier to read on pastebin, but if not then look them up. 
Sometimes you might have a seriously small project where the only UI is a single CRUD page or something. Nothing wrong with it, just another tool.
* Yeah, still really trying to get an understanding of namespaces, classes (static, public, private etc.), among many other things obviously. Another things I don't quite get is set; and get; in variables, and why to us e them, when to use them, and should they be used with a public, private class (and when to use private vs public classes). I'll continue learning, and hopefully soon it will click! + I think this is what you were referring to when you said to use an ObjectInitializer: `db.Users.Add(new LoginSystem.User() {Username = username, Password = password, LastLogin = System.DateTime.Now });` + I'll have to learn about LINQ queries as I honestly don't know anything about them.
* Yeah, the variable naming was an oversight on my part, and just something I missed on that one variable (all the others appear to be in camelCase). * the `while(!VarName)` has always confused me, haha. It's why I tend to use an operator, but I will work on that. * Lastly, I will make sure to use `Enviroment.NewLine` instead of `\n`.
Ok this is actually a good point, i yield (return) 
Ahh you again :) I would recommend implementing bubble and selection sort first and then try quicksort. Remember : small, but steady steps ! 
Yes, this means that an application running in IIS crashed.
I can't seem to figure this one out - I am receiving these error when attempting to start debugging my ASP.NET WebApi application (.NET 4.5.2). I'm not sure what I did to trigger the error - I was only editing code, then the next time I launched the application in debug mode the error began. All my applications are throwing this error when launched, and even a new, empty ASP.NET MVC app throws the error. I've googled around and nothing has resolved my issues. Here is what I've tried so far: - Reboot machine - Restart IIS - Recycle app pool - Change application app pool in IIS - Remove site from IIS and re-create - Changed ApplicationPoolIdentiy property - Inspected Event Viewer/IIS logs, not finding useful or relevant info - Publishing to different site on IIS - Changing the project’s target framework version - Creating a new default ASP.NET web application (same error) 
I would personally not attempt to make a game just yet. That's jumping into the deep end and you may get very frustrated very quickly. I think people sometimes get into programming because they love video games, and then get discouraged with programming because they try to make a game right out of the gate. Making a game requires a deep understanding of computer science. Also, games is a really small subset of computer programming as a whole. 99.9% of programmers don't make games. What I would recommend is to make a C# console app that solves some sort of problem or does some task on your computer. Maybe something that runs once a day and deletes all .zip files in your download folder that are older than 7 days or something. Baby steps - apply what you learned about variables, classes, methods, data types, etc into a simple utility program for your PC.
Not so sure about the whole "identifying zip file" thing.
Repair or reinstall VS if it won't even work on new projects. I've had similar issues that have been resolved that way. 
I have done this and will show it in my updated code once it's ready for posting. Thanks!
I've dabbled a little bit using [Advanced Installer](http://www.advancedinstaller.com/) a while ago. I can't really say how well it compares to the other two options you listed, but maybe it's a viable alternative to consider.
So? Do something else. Build a simple blog. Write a game in the console. Not all games require fancy graphics or physics. Look into writing a MUD. 
When I was helping a previous employer transition to MVC and C# from Webforms and VB, I wrote a little administration app for a team using Razor. Was absolutely perfect for the project and made it plenty easy to setup CRUD pages quickly, or alter them if the requirements changed.
I mean, I don't know how to delete files in C#. Is the C# Fundamental from Microsoft Virtual Academy different or something?
&gt; I'm scared that if I get into C# game development, I would be going in with not enough knowledge. And...? So what? What's the worst that happens - you get stuck for a bit and have to figure it out or ask for some help? At some point you just have to dive in. Programming, software engineering, game development - they're all creative ventures, not following a cook book. You'll learn more the more you get your feet wet. Only way to grow is to start getting out of your comfort zone. 
There is a whole lot of internet, my friend. All kinds of documentation. Tutorials are great, but knowing how to do something outside of a tutorial is the key to being a programmer. You dig? You can look up how to delete a file within C#. In so doing, you might find it more interesting (or efficient or easier) to write something useful in Python. Or C. Or Swift. The possibilities are endless. 
My experience with WiX has been pretty good so far. One of the advantages is being able to make an entirely custom installer UI using WPF (and even UI frameworks). You can add custom actions which can help clean up items that may have been downloaded after install, or do pretty much whatever you need, since you can write them in C#. 
Look up pseudo coding. What it is and how it helps. For your problem of "I don't know how to delete a file using C#" Function deleteZip() { If(fileEndsIn .zip &amp;&amp; isOlderThan. 86hours){ Delete.file; } Return deleteZip() 
I've seen something like this error when I have an app that has &lt;requestedExecutionLevel level="requireAdministrator" uiAccess="false" /&gt; set in it's manifest and I launched VS normally instead of as administrator. That manifest entry is a pain for debugging.
I use it daily for work and have had no problems. 
 using System; using System.IO; class Test { public static void Main() { // Get the current directory. string path = (@"C:\getdirectorytestplsignore"); Environment.CurrentDirectory = path; Console.WriteLine(Environment.CurrentDirectory); Console.ReadLine(); } } Well, that's a start.
* [SOLID Programming Principles](https://www.codeproject.com/Tips/1033646/SOLID-Principle-with-Csharp-Example) This is by far the most important bullet in this list. Most design decisions are derived from these principles. * [Environment.NewLine](https://stackoverflow.com/questions/1015766/difference-between-n-and-environment-newline) * [Encapsulation](https://en.wikipedia.org/wiki/Encapsulation_(computer_programming\)) * ["Object is a..." vs "Object has a..."](https://stackoverflow.com/questions/2218937/has-a-is-a-terminology-in-object-oriented-language) * [.NET Design Patterns](http://www.dofactory.com/net/design-patterns) * [Value types have a default value. Reference types have a default value of null](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/default-values-table) * [Pascal, Camel and Upper cases and when to use.](https://msdn.microsoft.com/en-us/library/x2dbyw72(v=vs.71\).aspx) * Use `while (!loggedIn)` instead of `while (loggedIn == false)` * [String.Format](https://msdn.microsoft.com/en-us/library/system.string.format(v=vs.110\).aspx) Some of the bullets above I felt would be useful to you even if they weren't directly related to this code review. Let's look at your code: class Program { static void Main(string[] args) { //use Environment.NewLine. Console.WriteLine operates much line String.Format so we take advantage of it here as well. Unautherized -&gt; Unauthorized (spelling) Console.WriteLine("This is a protected system. Unauthorized access is strictly prohibited. Please login or exit.{0}", Environment.NewLine); bool loggedIn; //default value for a bool is false while (!loggedIn) //use this instead of while (loggedIn == false) { loggedIn = Verification.Login(); } Console.ReadKey(); } } Let's make an interface for that login system... interface ILoginSystem { IList&lt;User&gt; Users { get; } void SaveChanges(); } Now, I don't know what the LoginSystems class looks like, but it could look something like this: class LoginSystems : ILoginSystem { public IList&lt;User&gt; Users { get; private set; } = new List&lt;User&gt;(); public void SaveChanges() { //do stuff } } Now that we have that squared away, let's *inject* the LoginSystems class into the database class. This is known as dependency-injection and removes the coupling between the Database class and the concrete implementation of LoginSystems in favor of the interface. class Database { private ILoginSystem LoginSystem { get; set; } public Database(ILoginSystem loginSystem) { this.LoginSystem = loginSystem; } //Removed static modifier public void AddUser(string username, string password) { var newUser = new LoginSystem.User(); //use camel case for variables. Also, the 'var' keyword is syntax sugar if you don't want to declare the type twice newUser.Username = username; newUser.Password = password; newUser.LastLogin = System.DateTime.Now; LoginSystem.Users.Add(NewUser); LoginSystem.SaveChanges(); } //Removed static modifier public bool CheckLogin(string username, string password) { foreach (var user in LoginSystem.Users) { //use .Equals instead of == when comparing strings if (user.Username.Equals(username) &amp;&amp; user.Password.Equals(password)) { Console.WriteLine("{0}You have been successfully logged in.", Environment.NewLine); return true; } } //moved this outside of the loop. At this point, the login failed anyway Console.WriteLine("{0}Your username/password is incorrect. Please try again.", Environment.NewLine); return false; } } We can remove the Verification class from the equation altogether. We don't really need it. Here is the new Program class: class Program { static void Main(string[] args) { var db = new Database(new LoginSystem.LoginSystems()); //use Environment.NewLine. Console.WriteLine operates much line String.Format so we take advantage of it here as well. Unautherized -&gt; Unauthorized (spelling) Console.WriteLine("This is a protected system. Unauthorized access is strictly prohibited. Please login or exit.{0}", Environment.NewLine); while (true) { Console.Write("Username: "); var userName = Console.ReadLine(); Console.Write("Password: "); var password = Console.ReadLine(); if (db.CheckLogin(userName, password)) { break; } } Console.ReadKey(); } } There's a lot more there we could improve upon but that should help for now. We'll save password encryption for another day. 
I've had an unrelenting wave of issues with VS 2017 that I don't have with VS 2015: * If I'm making a lot of small code changes then building, it will hang ~every 5th build and I have to restart VS. * Intellisense will stop working after switching the targeted framework and isn't fixed till I restart VS. * Memory profiling is hit or miss, I usually have to try 10-15 times (not exaggerating) to get it to "stick" and actually collect profiling info. * When debugging, snapshots don't work at all, they always hang and VS will popup an error that a debugging session is taking too long with the only option being to abort. * The auto-select feature of intellisense randomly turns itself off. * Switching targeted frameworks is hit or miss, sometimes it works sometimes it doesn't and every using statement stops working. Multiple installs on multiple devices.
Forgive me for being blind, but I didn't see where you instantiated any vip customers
Your overrides look fine, however you are not using them. Take a look at your importer. You are setting the status (although your status set method is blank so it is probably not doing what you expect). But you are never actually creating an instance of your VIP Customer. I would start there.
Wow. Thank you for putting in so much time, and effort in to your reply. I'll definitely look in to all of that tomorrow, but right now my head feels like it's gonna explode.
Ah sorry im very new to c#, i assumed that because VIPCustomer is derived from customer it would instantiate using the same properties, would i fix this by simply adding something like VIPCustomer newVIPCustomer = new VIPCustomer(); newVIPCustomer.FirstName = entries[0]; newVIPCustomer.LastName = entries[1]; newVIPCustomer.DateOfBirth = entries[2]; newVIPCustomer.Id = Int32.Parse(entries[3]); newVIPCustomer.Balance = Decimal.Parse(entries[4]); newVIPCustomer.Status = entries[5]; client.Add(newVIPCustomer); to the main code? 
They're not taking away the tiny parts, so what are you complaining about?
Pretty much. You'll need to determine when to make a customer and when to make a VIP customer
[removed]
I kind of see what you are getting at here but am still having a little trouble, would i be creating objects for both Customer and VipCustomer within the same instatiating process? Could i do something like while (true) if (Status == nonVIP) { //create new Customer } else { //create new VipCustomer } Your help is appreciated! edit: if it helps, the lines within the txt file which create the objects look like this Jack,Sparrow,03-12-1982,10,14.00,VIP Shania,Twayne,08-12-1954,11,1722.00,nonVIP Steve,Jobs,22-11-19676,12,66.00,nonVIP Tyrian,Lanister,10-10-1999,13,894.50,nonVIP With the final entry (VIP or nonVIP) being the factor that decides whether a object for Customer or VipCustomer is created.
An alternative I've had to use is NSIS 3. It does the job for both silent and graphical installers. The good: - It's free - It's rather fast - The documentation is decent. - It can make small installers (lzma) - Many programs use it so there are a lot of examples around - You can pretty much customize everything if you want to - It has a linux port if you have to build windows installers on linux - There are some useful plugins around The bad: - The scripting language feels like a mix between assembly and batch, people who've never done C or assembly before usually hate it. Marcos do mitigate that a bit by adding higher level control flow instructions and by allowing to share code between installer and uninstaller, but you may still end up with few devs willing to learn how to use it. - The linux port build is a bit unreliable depending on the distro/version. 
Sorry - I deleted the comment by mistake. From memory: ____ You need is to choose the objects to create inside your loop going through the file. You can either use: newCustomer = new Customer() or newCustomer = new VipCustomer() when you're inside the loop - when you know how to choose which is a Vip and which isn't. Polymorphism means you can declare a variable with type base class: Customer newCustomer; Then you are free to create objects that are that base class or any derived class: newCustomer = new Customer(); or newCustomer = new VipCustomer(); ____ 
&gt; would i be creating objects for both Customer and VipCustomer within the same instatiating process? Yes - this is exactly the point. You use the information you've read in to choose which class to create. Note you haven't created the object yet so we can't look at properties like `Status` - it hasn't been set yet if ( &lt;file line contents meet this condition&gt; ) { newCustomer = new Customer(); } else { newCustomer = new VipCustomer(); } You're list is a list of `Customer` type objects so it will allow you to add `VipCustomer` objects too.
That's what I thought along with others due to this video [here](https://m.youtube.com/watch?v=fGxGeP7b8j0).
When I looked at this some months ago, I found the docs to be quite limited. Do you know of any good tutorials?
I use them for validation rules on fields , name for targets on source objects, index values in arrays etc. 
That would amount to a controller with 4-5 actions. BTW in the past few years I was more than happy to use WebForms for such a project. It's just that RazorPages feel like the worst of both worlds
Could anyone give me a good example of Razor Pages use?
For generating pages from data but not wanting to have to jump around a bunch of files? I.e. it's a kind of data-centric / data-first approach. Fuck you Microsoft, I just keep giving you guys free ideas. 
when you publish, only the needed parts will be included
if you don't add a wildcard character to the Direcotry.GetFiles() then you are asking for the file called .zip Just that. If you write "*.zip" you are asking for all the files that ends with .zip Why did you want to delete the wild card character?
We unfortunately just had to look around and find articles/blog posts/etc that were specific to our issues at the time. The documentation is lacking, so we found that we just had to look stuff up on a case by case basis. 
I was testing it and realize that some extension like .zipf would also work. I needed to find a way to only select .zip files.
Questionmark can be used to get exact matches on file extensions if I recall correctly. Not at home, but you could try "*?.zip" as search pattern.
I may have to do some searching again then. I need an installer for a project I'm working on, and though the Visual Studio Installer Projects are easy to use, I'm not a big fan of their styling.
It still throws the IndexOutOfRangeException exception.
learn how to debug
Just when you think your writing a bleeding edge core application. Hey guys, v2 is out...
Commands don't need to be void calls. The user will want to know if their command has been accepted or not. To borrow the HTTP spec for a moment.. 200, 201, 202 etc. are perfectly valid response codes for commands as well as requests.
See my other reply. There's no reason whatsoever that command calls must be void. `CommandAccepted` or `CommandRejected` are useful and valid (examples of) return types to use. Commands are validated just like any other input, so it is invaluable to handle that validation and its results like any other input.
Yeah that's how the object initializer works, once you understand how namespaces work you can simplify it just to something like this: db.Users.Add(new User { Username = username, Password = password, LastLogin = DateTime.Now }); 
From MSDN &gt; If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, "*.xls" returns both "book.xls" and "book.xlsx" &gt; In all other cases, the method returns files that exactly match the specified extension. For example, "*.ai" returns "file.ai" but not "file.aif" Lol, I guess zip is 3 char long, so it will return zipf I guess you can use LINQ to filter out zipf files
Startups get 50% discounts, students &amp; teachers get all of their tools for free, non commercial OSS projects get Rider and plenty of other tools for free. This is somewhat comparable to BizSpark for startups, ~~DreamSpark~~ Microsoft Imagine for academics and Community for OSS, but Microsoft have far more money to burn compared to JetBrains
zipList = Directory.GetFiles(path, ".zip").Where(filename -&gt; filename.EndsWith(".zip")); It'll give you an IEnumerable (rather than a list), but you can always ToList it.
No reason whatsoever? What about consistency? Legacy? Preference? Strict contracts? I can think of at least 10 reasons why a method could return void. Returning enums / status values just adds additional complexion. Often I also want a message to go along with it. Now I'm stuck returning fluff status objects which need to be checked in 10 different methods on the call chain which could also be a thrown exception which is handled neatly by pluggable middleware. 
An internal command should not return anything resembling an HTTP status code. Let your controllers worry about HTTP codes, and let your code either succeed (resulting in a 200, 201, 202, etc) or fail (resulting in a 304, 500, 404, 418, etc). How you want to fail is up to you.
I "borrowed" HTTP for example's sake. Don't take it so literally. 
Nothing you have listed there suggests anything about having to use void calls. Returning enums is also something I haven't suggested and you are now twisting and putting words in my mouth. I even explicitly said "types".
If you want to use MVVM. For instance when you're using a microservices approach where you already don't have that much need for controllers because all your processing is in a central API, which you can just call from your fat model. It's also slightly simpler to get into for new programmers, and IMHO better seperates your business logic from your UI logic (because the controller handles both the model and the results from your business logic, it can become a point of contention between frontend teams and core development teams. Anyway, more options are always great. 
I'm not putting words into your mouth, you need either an enum or boolean to see if the operation failed or not.
I was with you until you said more options are always great. I'm also crying a little bit inside as they added datasets. If I see another vb developer use data sets I'm going to take up commercial cooking or gardening.
If ziplist has no items it will throw the exception as you are trying to access the first item (which doesn't exist)
Little typo in readme - think you have pasted a sentence in twice.
No, you don't. Polymorphism is a thing.
core v2 is source compatible with v1
Unfortunately it's a class (due to a language limitation), so I'd personally not use it. But I'm definitely a fan of value / semantic types.
Most code has input and an output, it's easy to follow the flow of method calls. But exceptions are disruptive, as they can terminate an entire call stack from somewhere within a few method calls down. That's the reason for the good habit to say "don't use exceptions for business logic or control flow". It's similar to a goto-statement.
This is why the convention is to name the method with Throw. Everyone knows that this is effectively a return.
 public class RootObject { public int sequence { get; set; } public List&lt;List&lt;object&gt;&gt; bids { get; set; } public List&lt;List&lt;object&gt;&gt; asks { get; set; } } No guarantees this would work, however this was generated using http://json2csharp.com/ which I've used before (obviously some renaming needed) to generate classes to deserialize some JSON I've got
OK, so I've just tested this in VS2017 and it deserialises OK for me - https://gist.github.com/dashdotat/cea253fa93507288e18317f77df43a46
Removed: Rule 4. Feel free to repost it, but please include the class you used for your attempt, and the error message you get. Or if you edit it in, let me know and I'll restore the post.
Interesting, I know I been struggling to capture output in the past. Will have a look at this.
[Amazon](https://www.amazon.co.uk/WiX-3-6-Developers-Windows-Installer/dp/1782160426/ref=pd_sbs_14_1?_encoding=UTF8&amp;psc=1&amp;refRID=TBHR279Z641M94Y5C1RS) I have found this book extremely helpful, its simplistic but covers the full breadth of the WiX toolset
Is it me or does it boot like 4 times faster?
* WiX uses XML markup based configurations which can be checked and reviewed in source control / code review workflows, InstallShield is far less easy to review * WiX is completely free, installshield has licensing costs (under most conditions)
Yep
I've submitted a PR to remove it.
As others have said, 200/year isn't much when the thing actually gets updates, and that also includes *all* other tools and IDEs Including ReSharper (if you still stick with VS)! So, i would avoid a single IDE purchase at all costs and just buy the universal. I have never used Rider, so I would say you should get the trial and *really* try it out. I mean, full time use, not just a little. If you like it then go all in on their tools with the Ultimate subscription. They are all similarly high quality and share a common base (the IDEs at least). FWIW I use IntelliJ, PyCharm, DataGrip, and VsCode mostly, with a little bit of Web/Php Storm when I run across one of those. I have 8 of their IDEs installed; I'm so damn happy there is Rider; when we start doing .net core on osx/linux we have a proper IDE and not MonoDevelop. 
Honestly, those two bullets alone should justify the switch. However, there are a few more: * WiX is open source on github. I've had to use it a few times to learn how to do a few things. * You can make your own bootstrapper app with wpf, winforms, or even a console program if you wanted to (you shouldn't but technically it is possible). * Wix libraries allow us to reuse installer files.
Awesome thanks. I tried that and a gazillion other ways to format the class. Must be something else I am doing.
Thanks for giving me a direction to look in
Everyone pretty much has the pros to WiX so here are some cons: * There aren't any free VS designers (like installshield) for WiX projects so most of what you'll be doing is going to be in xml files or in your custom bootstrapper assembly. * WiX has a very steep learning curve. A basic msi is pretty easy to learn how to do, but any of the advanced stuff like service install, autoharvesting with heat, custom actions, custom bootstrapper app, scheduling, how to fix a registry you inevitably screwed up with a flawed msi (i.e orphaned registry entries...biggest pain in the ass let me tell you), learning how to debug an installer via logs, understanding the msi technology itself, integrating it into your build and release processes, proper versioning techniques, and more all takes considerable amount of time. * Searching for help kinda sucks. The official docs don't have very good examples and some things still need examples. Many stack overflow posts are rather old and outdated which either completely makes the info obsolete or there are better ways of doing things now. You also have to pretty much search for "wix toolset" for anything because of the existence of the completely unrelated wix website builder and hosting bullshit. With that said, we made the switch from installshield to wix. The source control and code review benefits of wix were a fairly major factor. Another factor was the fact that no one took the time to understand our installshield installers (which were causing deployment issues) and assigning me to transition us to wix would give me time to learn wix and installer tech in general and was ultimately more beneficial than attempting to learn from the IS installers that were developed by people who had no idea what they were doing. The biggest factor, I believe, was the licensing issue since installshield nickels and dimes you and puts things behind paywalls that honestly should come with the license you bought (i.e being able to include new dependencies, from the designer, that came out after your IS version like a new .NET framework. You can still install newer stuff but you have to do what feels like hacking). One of the benefits that I haven't seen is the ability to reuse fragment files and other things via a wix library, something I don't think is possible via IS (although I could be mistaken).
I hate to be this guy but am I the only one that feels "doom and gloom" whenever I see the weekly I'm writing an app for the banks but I'm completely new to programming post ? 
Are you complaining about forward progress? I mean if you've been watching we've known this was coming for a while?
It´s not a course, but this article doesn´t only focus on Parallel programming. It´s a good start point. http://www.albahari.com/threading/
You didn't show how Foo implements IThing... it looks like Foo Doesn't actually implement IThink, but instead accepts an IThing as a parameter and when the IThink methods are called on FOO, it calls that method on _interfaceThing.. I think it is meant to work something like... public interface IThing { bool SendMessage(String msg) } public EmailMsger:IThing { public bool SendMsg(String msg){/*Send msg via email*/} } public SMSMsger:IThing { public bool SendMsg(String msg){/*Send msg via sms*/} } public class GenericMessenger:IThing { IThing msgImplementation{Get;set;} public GenericMessenger(IThing implementation) { msgImplementation = implementation; } public bool SendMsg(String msg){msgImplementation.SendMsg(msg);} } Now you can have a list of GenericMessenger, some of which send messages by email and some of which send by sms... but the consuming logic doesn't care which is which because the API is identical. 
`Foo` must *implement* everything defined in `IThing`, so you need to add 2 methods to Foo bool SendTextMessage(string 1, string 2, string 3); bool SendTextMessage(string 1, string 2); I have no idea about the logic of your project, but since you already have a private object of type `IThing` passed into `Foo`'s constructor, that should be pretty easy, right? 
Apologies, SomeMethod and SendText are the same methods. It was a slight edit mistake.
Usually VS Updates are in the notifications tab but I don't see anything there. Is there a link we are supposed to use to get 15.3?
The [Microsoft Virtual Acadamy](https://mva.microsoft.com/training-topics/c-app-development#!level=Beginner&amp;jobf=Developer&amp;lang=1033) courses are a good place to start. There is *a lot* of information there from beginner to more advanced courses.
Is there an easy way to create self-hosted REST API? No razors no spas, just a simple REST API. I need coffee.
&gt; I mostly struggle on how to get items to talk to each other. What do you mean with `items`? How objects can talk to each other (instances of a C# class)?
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/fsharp] [.Net Core 2.0 vs Java - Performance Notes](https://np.reddit.com/r/fsharp/comments/6tul53/net_core_20_vs_java_performance_notes/) - [/r/programming] [.Net Core 2.0 vs Java - Performance Notes • r\/csharp](https://np.reddit.com/r/programming/comments/6twpif/net_core_20_vs_java_performance_notes_rcsharp/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
OP, i had the same struggle in bootcamp and found the online course by Bob Tabor to be best. He speaks and relates very nicley. Plus he is the go to guy bu Microsoft itself for teaching. There is a free series from him and a 50 dollar course that has more content. Devu.com
I got it from opening the installer. It installs over VS2017 rather than the preview if you are using that will need to switch to regular?
`dotnet new webapi` https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-new?tabs=netcore2x
Maybe it's just me but I find bootcamps to be fairly bad. You learn the what but not the why leaving you will a inadequate understanding of what you are doing 
One thing that strikes me is: c# uses more memory in 7 out of 10 cases. Based on Java's reputation I would have assumed the opposite.
Good bot
Thank you michaelquinlan for voting on TotesMessenger. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://goodbot-badbot.herokuapp.com/). *** ^^Even ^^if ^^I ^^don't ^^reply ^^to ^^your ^^comment, ^^I'm ^^still ^^listening ^^for ^^votes. ^^Check ^^the ^^webpage ^^to ^^see ^^if ^^your ^^vote ^^registered!
Duh! The installer. Thank you. Still odd I never got the notification but oh well.
Combine these elements: - `Task.Run` to kick off async processing to a new thread. - `SemaphoreSlim` to limit the amount of concurrent processes. - `ConcurrentQueue` to queue new jobs. The last one can later be switched out with a remote queue solution (e.g. a service bus).
Yeah that's what I will likely be doing today - I don't really want to waste anymore time tracking this down.
Guess: The JVM needs to run pretty lean to make room for the bloated Spring and JEE libraries.
People think it's worth less because it's free. There were broken links the last time I looked at it but I feel that some development is learning how to find what you need in msdn documentation. 
High contrast is explicitly mentioned in the link. 
I highly recommend looking into learning the TPL: Task Parallel Library. https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/task-parallel-library-tpl It is MS's attempt at uncomplicating multi-threaded &amp; asynchronous programming by encapsulating the hardest parts of doing these things into API's that are easily accessible and understood. If you insist on programming with threads I can guarantee that you have a long hard road ahead of you and that you will get it wrong at some point. There are many courses for TPL on pluralsight. 
&gt; This surprised me as I was under the impression .Net Core 2.0 performance would be very good. I was not. What gave you that impression? .Net Core is new and open source so I figured there will be some time before it matures. Also, one thing you didn't mention is how you are compiling your test cases. Part of the allure of .Net Core, for myself at least, is not that it would be better at JIT compilation than Java, but that native assemblies could eventually be compiled from a single, cross-platform codebase. If these are stats derived from native executables, then that would be surprising.
Your first problem is that you cannot prompt a download when you are sending a POST request. I've had the same problem recently and in [this](https://stackoverflow.com/questions/44520852/how-to-return-a-zip-file-via-ajax-that-prompts-for-download) post I describe how I fixed it.
If it's in-process you don't even really need the `ConcurrentQueue`, the semaphore will manage a queue of waiting tasks on its own.
Example one is already wrong as it's telling me to use string builder in this case: Their code: string tech = "tech"; string dot = "."; string io = "io"; // fix this to include the glued string My code: return tech + dot + io; --- [Response] Using StringBuilder, You would have built your string in the most efficient way! Try to initialize a StringBuilder instance and then use Append to glue the strings. Don't forget to import the namespace System.Text. --- The general rule is that simple concatenation is better until you're going to be concatenating roughly 10 or more items, then you want to think about using string builder. This is **ESPECIALLY** true in this case since all three strings are string literals and therefore the compiler will, for 99% sure, convert these values to constants to begin with.
If you go to the site he improved the tests for, you can see that they are doing a CLI 'dotnet build', but that isn't useful without being able to see what their project file looks like.
For situations where the performance of a class isn't sufficient, I would suggest hand rolling struct based value object classes.
If you ever use something like Json.NET, you'll decorate your model properties with attributes, most unit test frameworks use attributes to denote tests and test properties. ASP.NET uses attributes to define http routing. It's one of those things you don't need often, but can be very useful in the right situations.
Removed: Spam, Rule 7. Tech.io is on notice due to spam. Considering your account history, consider yourself on _very thin ice_ as well. EDIT: And Rule 7 violations. String vs StringBuilder is a horse that has been thoroughly beaten over the past decade or so.
I am using Rider as my daily driver, using VS2017 only to check in code and publish. Rider is snappier, leaner (by 4-6 GB), and has the best intellisense built right in. It's a work in progress, and it has some warts, but man I love using it. An IDE shouldn't require a brand new, maxed-out machine to run it. Looking at you, VS...
It's actually one link further away, but mentioned it in terms of high-contrast used with screen readers and for people with very little sight at all. I just need a little more contrast than what they had previously. 
I agree with everything here. I love JetBrains, and I love Rider. If it's already this good, wow, can't wait for what it becomes...
ok thanks. I'll have to get to learning this stuff now(); 
Same, none of our work computers got the notification, but it's easy enough to pull up in the installer.
Pluralsight has some good courses, but he seems to be looking for a more university style course, with labs, assignments, etc. Most universities are Java first, which is why I'm not having much luck.
Yeah, I don't if you're going to find anything like that. If your friend is already a working developer, I would hope that they can take programming concepts and apply them without being forced through a specific example.
Did you happen to see this version of k-nucleotide: https://github.com/damageboy/shame/tree/master/shame which should score around 7s
The problem with a lot of these benchmarks is that they are on Linux. .NET should be tested on its home platform - Windows. I'm not against testing .NET on any platform that can run it, but you're going to test it and definitively say "this one is faster than this other one", then you should probably test them where they will perform best. For .NET, I suspect this will be Windows.
The main selling point of .NET Core is that it's cross-platform and runs on Linux - it's purpose is to make .NET a real alternative to Java for Linux/MacOS environments. If it doesn't perform well on Linux, it has limited value.
&gt;&gt; This surprised me as I was under the impression .Net Core 2.0 performance would be very good. &gt;I was not. What gave you that impression? .Net Core is new and open source so I figured there will be some time before it matures. Is it not? It looks pretty good to me. This comment is the first thing I read and I went into the article expecting it to be at least 2x slower - but it's on par, I would say...
Why does reordering from longest to shortest improve the time on the Regex test?
Do yourself a favour and get a PluralSight subscription and learn from the .Net stuff they have. 
What's an IEnumerable? I'm new to programming. 
I know the main attraction of .NET Core is to be cross-platform, and like I said, testing it on Linux is fine... but the purpose of .NET Core isn't to NOT run on Windows, so why do all these tests always target Linux? I know the answer - it's because Linux servers are more commonly used than Windows servers, so the people doing the tests probably can't test on Windows; but having a test on the non-primary platform and saying "x runs this fast", and acting like that's the definitive answer, could be misleading. If you're going to run tests on Linux and other Unix-based operating systems - great! However I suspect that Windows performance will still be better, so that's probably where the main .NET tests should take place. Windows is still a highly relevant place for .NET, and .NET Core doesn't have less value if it runs better on Windows than Linux.
So in C# Microsoft adopted the prefix I- to mean Interface. An IEnumerable is something that can be enumerated (you can step through it and it has an order). Lists are examples of IEnumerables, but Lists can do more than IEnumerables (you can add and remove from lists, whereas IEnumerables are effectively immutable). IEnumerable is a generic collection - so really saying it's an IEnumerable is short-hand. What I think you get is actually an IEnumerable&lt;string&gt; (an "IEnumerable of strings"). So long as you don't need to do List things with it, you can go ahead and use it. If you needed to add things to it, or remove things from it, then I'd recommend calling the .ToList&lt;string&gt;() method on the IEnumerable which would give you a list back. I hope that helps!
multithreading [Long Short Short] on 2 Threads: T1: [--------LONG-1----------] T2: [--SHORT-2-][----SHORT-3-] multithreading [Short Short Long] on 2 Threads: T1: [--SHORT-1-][--------LONG-1----------] T2: [----SHORT-2] 
Not allowed to write your own dictionary. Its why I'm annoyed at the Java obscure lib one.
Thank-you Cyberworm, you're actually the only one here giving constructive criticism. Cheers for the reply :)
Not witty and very unhelpful.
If u did a debugsession you would have noticed that nothing changed to the list. Debugging is a vital part of programming, it's more than writing code and see if it works
You could simplify that to EndsWith("p") so it only has to check one character, not the 3 extras.
True - although that might not filter out files ending with ".zipp"
Oh snap
I'd argue that .NET Core doesn't really have a home platform. That's the point. It was a complete rewrite.
&gt; It was a complete rewrite. It's not. It's a fork of the .NET Framework, with certain Windows specific parts removed or replaced.
Look up ternary operator
Fun fact: It's called the "Conditional operator". It just happens to be the only ternary operator in C#.
Java gets a bad name because it's a language everyone can use. The game engine Unity has this problem as well.
The conditional operator actually uses two symbols ? and : It's very similar to an if statement. a ? b : c If a is true, evaluate b, else evaluate c.
It's not a fork of the .Net Framework, the origin is from Silverlight.
&gt; .Net Core is new It's a new product, but not a completely new codebase. .Net Core shares a lot of its code with .Net Framework. Most optimizations that are in .Net Framework should be in .Net Core too.
That's not necessarily a bad thing. With garbage-collected languages, the more memory you use, the less often you have to run the GC, which increases performance. It becomes a problem if other memory-intensive applications are running on the same machine, but I believe .Net can detect that and decrease the amount of memory it uses.
If you're going to use .Net Core in production, are you going to run it on a Linux server or a Windows server? I think that in most cases, the answer is going to be "Linux", so benchmarking that makes perfect sense to me. Also, I would like to see any claim about Windows being a primary platform for .Net Core. I'm pretty sure you're not going to find that in any official document.
.net core has MORE optimizations than framework right now. cmon guys. 
.net core has performance enhancements over .net framework, its the most mature .net stuff there is right now. 
No, there are many reasons to use .NET Core on Windows. In most cases, .NET Core directly replaces .NET Framework for Console and Web applications, which are in abundance on Windows. .NET Core improves performance in both of these application types. Linux is more popular with web servers by a large margin, but .NET Core is not only ASP.NET Core. In a similar way, Windows is much more popular than Linux for regular use. It's not just about "servers". I've already read that ASP.NET Core on Windows can serve more requests per second than it can on Linux: https://www.ageofascent.com/2016/02/18/asp-net-core-exeeds-1-15-million-requests-12-6-gbps/ I think it's a reasonable assumption that Windows will also be more performant in other areas with this stack. So if you're going to test .NET Core and compare it to Java, then test .NET Core on its best platform. That's all I'm saying. Don't test it on a second-rate platform (in terms of .NET Core performance) and show it like its a definitive comparison to Java, when Windows will probably run it better. That's it.
I guess C gets an exception? or are libraries that are widely used in the ecosystem ok? 
&gt; .Net having better parallel libraries. The Java code just doesn't use the truly awesome parallel processing constructs in the JDK; instead, it uses the ~15-year-old classes for some reason.
this is a benchmark, that tests everything on linux. if you don't like .nets results there, you can make a new benchmark, or improve .net on linux. don't think it would be any different for these kinds of tests anyway 
Only in part though. If they were identical .Net Standard would have been status quo from the beginning of .Net Core, but it wasn't. Up until now there has been a lot of differences that wouldn't quite permit a common code base to cross over, but .Net Standard *is* growing according to Core's [roadmap](https://github.com/dotnet/core/blob/master/roadmap.md), so, it's getting there.
Watch this series: https://www.youtube.com/watch?v=SXmVym6L8dw&amp;list=PLAC325451207E3105 
Bob Tabor is a great teacher. [This](https://mva.microsoft.com/en-US/training-courses/c-fundamentals-for-absolute-beginners-16169?l=Lvld4EQIC_2706218949) course series is a very solid foundation. His lessons are clear, concise, and have a logical progression. Plus he doesn't trip over his own code and/or words. HIGHLY recommend.
Yeah. For example one of our projects is to make a survey generator winform. It needs to save entered questions to a list, fill a combo box with the list to create a survey, then all the questions picked(5 of them) should carry over to to the survey page. I can get questions saved to the list, but can't populate the combo box. 
Yeah that's essentially been my experience so far. I have a brain full of code but no clue when and why to use it. 
I believe the biggest difference between .Net Framework and .Net Core code is that .Net Core is cross-platform. So, .Net Standard 1.x didn't contain many APIs in part because Microsoft didn't want to spend the time porting them to Linux and macOS.
It's often better to use a script runner tool like RoundHouse or DbUp than EF migrationa when in production. I made a tool a few years ago which would diff two DBs (i.e. the prod db schema and my development dB) and generate the necessary scripts
I'm not saying I don't like the results of .NET in this benchmark. The results are irrelevant. I'm attempting to say that it may not be a good representation of .NET Core. I'm attempting to convey that .NET Core will likely perform better on Windows, and many of these tests are on Linux, which is never shown as a key detail. It's ".NET Core 2.0 vs Java" - implying the platform is irrelevant, when it's not. We already know ASP.NET Core performs better on Windows than Linux. The OS is a key detail that is often hidden away. There is not one mention of Linux or Windows in that entire article. 
&gt;We already know ASP.NET Core performs better on Windows than Linux For stuff like this that just crunches math you think it will matter much? Tempted to run a few of them tonight. If I don't play gothic 2. Anyway, benchmark game runs on linux. such is life. 
&gt; its the most mature .net stuff there is right now. I'm not sure I'd say it's the most *mature*, it's pretty young and there's still a lot of changes to come. However I agree, it's pretty fast too.
Running program like this: C:\&gt;myprogram.exe "first argument" "second argument" is running it with two arguments: first argument and second argument with no quotation marks. If you want quotation marks to be part of the arguments, you have to escape them (\"). In other words, neither "?" operator nor Console.Write() remove the quotation marks, they get removed before arguments are even passed to your program.
seems to use something called khash.h. Yes you can use anything well known that can be accessed from a package manager.
&gt; .NET should be tested on its home platform - Windows. And what is Java's home platform, then? The important thing isn't which platform the tests are run on, it's that the test is fair. You cannot fairly test two things by changing more than two parameters.
So just minimizing idle time on the second thread while the first thread does the last LONG... Thanks!
Feel free to improve the Java code, then? I suspect it's using the old stuff because it's faster in these particular benchmarks. If not, submit yourself a pull request making them faster. The faster you make Java, the faster someone will want to make .net - and we all win.
Hey, first of all you need to know the difference between dotnetcore and dotnet. Dotnetcore is kind of recent and it might be the reason ur book doesn't talk about. To be direct: dotnetcore allows C# to run on lot of OS instead of Windows-only before. In fact, a dotnetcore Lib will be used for dotnetcore projects only. Ps: don't worry about differences between dotnet and dotnetcore, they're pretty small, so you can follow your book withouth the feeling of learning something useless/deprecated 
&gt; .NET Core directly replaces .NET Framework for Console and Web applications, which are in abundance on Windows. Console applications are in abundance on Windows? I don't think so. I've been programming using .Net on Windows for quite a while, and I've properly started using .Net console applications only since the `dotnet` CLI came out. And web applications are going to use ASP.NET, so .Net Core is not a direct replacement. You would have to rewrite the application to use ASP.NET Core instead. &gt; .NET Core is not only ASP.NET Core. So what else is there?
Bad bot
I think you're missing my point. I'm not saying that the test isn't fair - not at all. I'm saying it's a misrepresentation of .NET Core from an overall performance standpoint. As I've said, it's absolutely fine to test .NET Core on Linux - that's not the issue. It is fair to test .NET Core vs Java on Linux - great! That's not the problem. See my other reply: https://www.reddit.com/r/csharp/comments/6tuklb/net_core_20_vs_java_performance_notes/dlo7d6x/ 
Yes, actually. I do think math performance matters. I did monte-carlo simulations in .NET Core as part of my degree, because it ran at 30x the speed of my Python version. It ran more than twice as fast under .NET Core as it did under .NET Framework. These differences are important. I understand that these benchmarks are usually on Linux, but from a scientific standpoint, it's a test with poor justification by detail omission. 
Derek Banas has a pretty comprehensive series on C#, as well as some stuff on CSS, Javascript, etc https://www.youtube.com/watch?v=0p0JLFZj2C8&amp;list=PLGLfVvz_LVvRX6xK1oi0reKci6ignjdSa
Get the All Products Pack for $249 and you get... all products, including Rider. Not expensive at all.
&gt; .NET Core is not only ASP.NET Core. &gt; &gt; So what else is there? A lot: https://docs.microsoft.com/en-us/dotnet/api/?view=netcore-2.0
I don't know. I know that they changed the way `Console.Beep` worked to use your sound drivers to simulate the beep rather than accessing the [old school PC motherboard speaker](http://img.bhs4.com/08/a/08ae334954135b4247f5664e2e5616eb76d4e681_large.jpg) on later versions of Windows, so maybe something is going on there. On my Windows 10, I can definitely reproduce (more or less) what you're reporting, though on mine it more like just stops beeping altogether. If I choose 25ms, I get something more reminiscent of what you have with a bunch of normal beeps, then random ones. I get other various popping/artifacts or different timing/gaps with different millisecond values. At about 100ms, I get it working pretty consistently. I don't see anything in the MSDN documentation. I don't have high hopes that someone here will have an answer. I suspect you might actually get lucky posting this on StackOverflow though. EDIT: I should add that in my tests, the loop was still continuing fine (I was printing out a counter), so it's not like the `Console.Beep` method call was hanging the program between beeps. EDITx2: You should try using a frequency value other than 37hz. That's 37 times per second, and really hard to hear. And at that frequency (37 times per second), it's entirely plausible (I suppose? I am not a sound engineer) that for 10ms beeps, you're not going to hear anything because the 10ms is between the 37hz frequency (read: 27ms long frequency). Plus if you're listening for the \*pop\*, I think that's an artifact trying to reproduce the old motherboard speaker. It might all still be moot though. I still get similar behaviour for higher, more audible frequencies. It might just be that 10ms is too short a burst to be practical for the software/hardware implementation.
&gt; I can get questions saved to the list, but can't populate the combo box. Check the examples here for WinForms combo boxes: https://msdn.microsoft.com/en-us/library/system.windows.forms.combobox(v=vs.110).aspx#Anchor_8 Also note how things in ComboBox.Items are displayed: https://msdn.microsoft.com/en-us/library/system.windows.forms.combobox.items(v=vs.110).aspx You'd need to post some code for more specific help.
Works for me, albeit I didn't use the NuGet command line. Instead I right-clicked on the project in the Solution Explorer and chose "Manage NuGet Packages" and installed it through there. Perhaps your console application is targeting an incompatible/old version of the .NET Framework?
Its not a misrepresentation in the slightest, .net core doesn't treat windows any better than Linux, in fact .net core was primarily designed to target Linux (containers). Let me ask you another question - have you actually ran the benchmarks on both Windows and Linux and if so, were there any performance differences?
Wait, wait; you're both right! Both Silverlight *and* .NET Core are specialized forks from the .NET Framework's code!
Technically I believe Java's home platform is Solaris :P Though I'm not sure anybody actually uses it any more. 
https://www.dropbox.com/sh/awe51oai6zfm0rn/AADvkaMVn_0J6ciKrC1h1eu1a?dl=0 I've added a sample (VS 2017) project where there are 2 win forms. 1 dummy form with a `generate` button that sends questions to the survey form which dynamically adds comboboxes with questions. It's not the whole solution (:P) but it showcases how you can send data over to another form.
that isn't what i meant. I mean i don't expect that pure number crunching perf would change much on .net core on windows anyway. 
Time to port .net core to Solaris, then!
From [Wikipedia](https://en.wikipedia.org/wiki/%3F:) &gt; Although many ternary operators are possible, the conditional operator is so common, and other ternary operators so rare, that the conditional operator is commonly referred to as *the* ternary operator. I mean, it's also the only ternary operator in C, C++, Java, JavaScript, etc.
Bad bot
&gt; out ways outweighs btw
"boot"camp not educationcamp
Fun fact: In K&amp;R C Programming book, its called the ternary operator.
My actual CS associates basically says this. JVM is an amazing piece of engineering. Spring and JEE -&gt; trashfire. 
Pluralsight is the way to go. Quality education and well, well worth the money.
FYI in C# "asdf" == "asdf" is fine. == and .Equals do the same thing. https://stackoverflow.com/questions/1659097/why-would-you-use-string-equals-over &gt; The string type represents a sequence of zero or more Unicode characters. string is an alias for String in the .NET Framework. &gt;Although string is a reference type, the equality operators (== and !=) are defined to compare the values of string objects, not references. This makes testing for string equality more intuitive. For example: C#
thanks fixed
Deadlock for sure.
&gt; `while(!VarName)` this might seem like syntactic sugar, but once you are more experienced, you'll be using it :) I'd stick to `var == false` for a while for more readable code so you can spot your bugs as a beginner. 
That's just the API. In the vast majority of cases, that API is going to be used from ASP.NET Core applications.
While that's true to some degree, many of the libraries for Java are ridiculously complicated and I'm surprised that anyone can manage to get things done with them. 
So you can write your own dictionary so long as you put it up on NuGet under someone else's name? Lovely bit of bullshit there.
My laptop with an i5 4something (laptop CPU mind you) with 8GB of ram runs browsers + VS 2015 fine...
Np, nice write up!
sorry? I've seen the moderator reject someone trying to use a package with low download numbers.
He is looking for a more formal course. It's too bad that the big online course sites are so light on C#.
The "" are stripped automatically when parsing the arguments. for the rest see the ternary operator stuff below.
Bad bot
I would think it has something to do with the fact that you are putting out a 10ms beep much more often than once every 10ms.... Might be getting some issues with throughput of request... the buffer likely isn't very large so there might be some kind of memory thrashing going on as the request queue size increases... 
They don't have support for Roslyn analyzers other than that it is pretty nice.
Bad bot
No. The point is not to represent .NET Core in its best light on its home platform. The point is to have the competition hosted on a platform where different implementations can be compared in a controlled way. Using GNU/Linux with available source makes a lot of sense in that way. If .NET Core is not optimized there then: Improve the implementation or not. Also it's called benchmarks game for a reason.
? Is "if" : is the else for example If(I==0) X=5 Else X=4 Is equivalent to X= (I==0) ? 5 :4; It's just short hand 
That sucks.
You can see the other responses as to what the ? operator actually is, but neither Console.Write or a conditional operator will remove quote marks. They are most likely removed by a parser when the args are first added to the array (or when sent to your executable from the OS), so they were probably never present in args at all. Quotes in command line arguments can be complicated as you're dealing with both the OS shell parser and the .NET parser.
There's an argument that you should *also* test .NET Core on Windows, but I don't buy that that's the *only* valid comparison. There are a lot of factors besides performance that go into a choice of target platforms.
I'm not saying it's the only valid comparison.
That's certainly strange. Maybe try calling the C++ function in another test app? It'd be interesting to work out whether this is due to C#'s implementation or an issue in Windows (10) itself.
Yes, many of the libraries are complicated and over-engineered etc. But there's a large number of awesome libraries. When you have such huge ecosystem, you'll almost inevitable end up with both of them.
Language? Most probably something like: "Unknown command: " + yourInput; 
Bad bot
How do you recognize (in code) the input commands that you do support? Perhaps there's a way to tack on a "otherwise, print an error" following the code for identifying the user's choice, using a code structure you already know... (In beginning programming we use an if/else if/else if .../else structure for mutually exclusive conditions. Each if statement identifies one of the possible conditions, and the final else is the "in all other cases, do this.")
Well it's C#. Yes but how do I make the code recognize it as an Unknown command? I feel like the citing of the command makes it a bit difficult because it has to recognize that the entire word/sentence is not what I intended them to write, repeat it after them and say it's wrong. It's so damn difficult to explain it but it's in every oldschool text based game. &gt; SHOOT PISTOL? I DON'T KNOW WHAT THAT MEANS.
A switch statement is generally going to be the easiest way of handling this. https://www.tutorialspoint.com/csharp/switch_statement_in_csharp.htm What you would do is basically take the command the user input, then run it against a switch statement that either looks for a regular expression or wildcard match (so if command starts with "move" then proceed with the "move" block and find what they put after it... if they put "move west" then check to see if west is valid, if so, move that way, otherwise return an error). The "default" branch of the switch block is when none of the other ones match, so that's where your unknown command branch would go.
Switch statements on strings can't use pattern matching... The cases must be string literals.
Its the most mature for performance, I think is what he meant. Its obviously pretty fresh in every other context.
You could try to store all possible commands in a dictionary &lt;string, string&gt;. For example you have key "shoot", and value would be "gun". You could store items in another dictionary. Key "pistol", value "gun". If they match up, command should be valid. Use [yourDictionaryObject].tryGetValue or something like that. It will return true, if this dictionary contains the value, and put it in out variable. It'll return false otherwise. You shouldn't worry too much about dictionary lookup speed. It's hash based, not checking every single item like array or list. First dictionary would have key value pairs like: "Eat", "Edible" "Attack", "Creature" "Move", "Direction" Second one: "Bread", "Edible" "Spider", "Creature" "West", "Direction"
Oh wow. I've been spoiled with PowerShell's `switch -regex` and `-wildcard` matching...
Yes, we built an app and found it ran faster on windows server than on linux. Result? Our .net core asp is running on windows server in live
I hope you aren't offended, but I believe you are wrong. The more memory pressure there is, the more often it will garbage collect and the longer each GC generation 2 + collection will take as it has to trace through all the objects in the heap.
Some of these benchmarks will get faster with SIMD support improvements in the future. 
PLINQ is probably easier to use, and can manage max number of threads executing with a single parameter. Read through this link and then look for some examples and see if it works for you: https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/introduction-to-plinq You should probably catch exceptions during processing and if its an exception you can't handle, then you can clear the status on processing the document so that it isn't stuck in a 'processing' status.
Unity deserves its reputation.
If you're just starting out with C# (and on Windows), stick with .NET Framework. That's what your book is implicitly using.
Actually I am, .net 1.0 was released what a year ago? So you do any reasonable sized project and it's already out dated before you get to release it. Don't get me wrong, I love some of the stuff they are implementing, and I will be porting 3 applications immediately. But the churn is real and I hope they slow the hell down.
But you knew this was coming when you started with 1.0. And it is source compatible... so what is the big issue here?
Bad bot
It could be queuing up the beep commands as fast as it can and not actually blocking the thread for that duration. Try using a timer or making the thread sleep for the same duration after the beep command.
It's already broken my first project that I tried to upgrade. I didn't get any further as I have to reinstall 2017 because the upgrade didn't work.
TBH i haven't had a lot of luck with .net core.... Part of it was my fault for jumping on the bandwagon early beta when everything was in flux... It is 'compatible' but it's already breaking shit in my existing 1.0 projects.
and i would consider visiting the wikipedia article about Quicksort, it's pseudo code may be helpfull, too (Quicksort is recursive btw, your implementation looks more or less like SelectionSort) 
I've just started using Spring Boot for a Rest API (for the first time - the decision for Java was made by others, I chose Spring) and so far I'm quite impressed. Not sure where the bad reputation comes from. I'm still not a fan of ORMs but JPA with hibernate works reasonably well so far and is a massive time saver - but I must say that I've only done some standard stuff. That might be the thing with Spring: Seems to be perfect for getting **standard** stuff to production.
Bummer; I've been waiting for 2.0 to do anything other than dork around with various "hello world" apps. I didn't see a real reason to jump before. too much was changing and the tooling wasn't all there either. What sorta stuff is breaking?
Spring Boot is a huge improvement over the older versions of Spring. Especially the ones from the era where everything required massive amounts of XML configuration. 
Is the JDK open source? Genuine question here, thought oracle had a strangle hold on the language and tooling?
I'm using v4.5
What do you mean by `reads posted data`? Are you talking about crawling from the web or calling an API? You could use `ThreadPool` to do your server work on background.
yeah but is anyone factoring in all the time the JVM has to parse up that old dinosaur concept of "CLASSPATH" and com.some.silly.folder.nomenclature.that.adds.Nothing.class?
Why? Unity wasn't the one making Steam Greenlight desert island zombie survival games, its users were.
Its garbage collector is shit, its mono version is ancient and far slower than modern versions of .NET , the APIs are inconsistent and patch versions are riddled with bugs and regressions and incompatibility. It's getting better but it's the worst runtime I've ever worked in.
Do you mean something like this? var listOfCommands = new List&lt;string&gt;() { "get", "open", "speak", "look" }; var input = Console.ReadLine().Split(' '); if (!listOfCommands.Contains(input[0])) { Console.WriteLine("Sorry, I don't know what '{0}' means.", input); } This assumes you have no spaces in your allowed commands. It splits the input on spaces (which gives you an array of each word), then checks the first element of that array (meaning, the first word of the input) against the list of allowed commands. If you're making something as simple as you say you are, this is probably good enough.
Fair enough. Unity was built around something like Mono 2.6... and for Mono a lot has changed since since 2011.
Yeah, pretty much. It's not 100% but you could get away with using the OpenJDK in most cases. I couldn't tell ya what hasn't been open sourced yet, but from what I understand they're pretty specific and niche things. Kind of a "you'll know if you need it" deal. It also only relatively recently became a thing on Windows. It's typically the default JDK for Linux.
Yeah, but there is also openjdk for example.
&gt; I suspect it's using the old stuff because it's faster in these particular benchmarks. Doubt it. Probably for stability reasons.
&gt; So if you're going to test .NET Core and compare it to Java, then test .NET Core on its best platform. Java doesn't have "best" platform, so it's not a fair comparison.
Thanks nealpro and also Blackout-42 for your guidance. I will stick to .NET Framework for now. I got really puzzled, when I selected the Class Library (.NET Standard), and tried to use it from a Console App (.NET Framework), which I thought should work. However, although my class library did nothing more than a Console.WriteLine. I got the same error as [here](https://github.com/dotnet/standard/issues/202). I will steer clear of .NET Standard or .NET Core for the time being. 
They do have some pretty good courses, but the ones where they are in that studio and talk like you are five years old really gets on my nerves.
That's not the same thing. I asked if you ran these benchmarks.
Waiting for an answer too. I'm having a problem now, automating db deployment. I wanted to encourage my manager to use EF in our future project. And I would like to know it's capabilities on this matter. 
Respectfully, without taking traces of the GC activity of both you're also guessing. .NET may be GCing far less often, which is why it appears to be holding on to more memory. Without data it's not a useful conversation.
Directly from Google: .NET Framework is the "full" or "traditional" flavor of .NET that's distributed with Windows. Use this when you are building a desktop Windows app or working with ASP.NET 4.5/4.6. .NET Core is cross-platform .NET that can run on Windows, Mac, and Linux. Use this when you want to build applications that can run on any platform, including Docker. Xamarin (Mono) is used for building mobile apps that can run on iOS, Android, or Windows Phone devices. A common point of confusion is where ASP.NET Core fits in. ASP.NET Core can run on top of either .NET Framework or .NET Core.
I second this. If you login to Microsoft Dev Essentials you can get 3 months Pluralsight trial for free.
I'd use a switch statement. They're very easy to understand. You program specifically for the input you expect and include a default statement to handle all unsupported cases. https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/switch By the way, the Microsoft language reference is a wicked resource.
Try looking into WebAPI. [This](https://www.asp.net/web-api) and [This](http://www.gokhansengun.com/asp-net-mvc-and-web-api-comparison-of-async-or-sync-actions/) may be helpful to read.
Some impressive speedups, glad to see it's competing well with Java. So my only gripe with this article is that it's a bit of an unfair battle since no one is trying to improve the Java versions to compete with the new .Net Core programs. Some of the techniques used to speedup the .Net Core version would probably help the Java version too.
.NET will sometimes run my entire program for quite some time without ever GCing. As long as there is sufficient memory in the system this can improve performance quite a bit. GC slows things down. No point doing it if you don't need to. 
If the author is capable of learning by himself this IMHO is the best solution.
I know for sure that a Spring application can work with 64 megabytes of RAM because I am running one like that. I am pretty sure that this can further be reduced. Most of the criticisms come from the default heap size.
&gt; You cannot fairly test two things by changing more than two parameters. Yes you can. You just need a spanning basis. 
Fair comment, some of things I did could be tried out on the Java programs. The Java code has had more optimizations with the C# being close to a port from Java. I think I just levelled it up a little. Parallel efficiency is where I think most improvement comes from. There are lots of good options here in .Net. I'm not sure if Java is doing the best it can.
If the tests were done on 64 bit then I think it helps that Java can keep references 32-bit in many cases, especially for reference-heavy things. Not sure whether .NET Core can do so yet.
They will be migrated over to the full .NET Framework in time; .NET Core started out as a fork but I don't think they can directly merge back anymore.
I've tried modifying the mandelbrot version for Java to be more similar to the C# version and to use the parallel streams from Java 8. Got a minor improvement locally, so have submitted the change to be updated. Other benchmarks might benefit similarly.
Yes to WebAPI. Simple implementation for reading POST data, but it also has the flexibility to expand if your needs do. 
 Implement one yourself there should be a shitload of examples if you Google "HTTP Server C# example". 
From a technical standpoint I think the effects and systems they have empowered less expert developers with far outweigh any ivory tower code criticisms. If it's on an old Mono as is suggested in the comments, I do hope that is updated just to flush out security flaws in old runtimes.
This seems like it could be what I wanted! Thanks a lot for writing it down for me!
AFAIK that ancient mono version was due to license woes. When Microsoft re-licensed mono under the MIT, some folks hoped unity would upgrade. (Mono was LGPL before) (Related: It's a bit ironic that it took Microsoft to buy Xamarin until we saw a more permissive license for mono.)
I guess the Timeout should rather be a `TimeSpan` instead of a `double`.
System.* is, at least in big chunks, a re-implementation. Roslyn should be the same for both core and framework. The coreclr itself is a bit complex. I know that ryujit is used in both core and framework, but not about the rest of the runtime. CoreCLR was also heavily optimized by MS and community devs. Only MS can tell if these performance improvements found their way to framework. I guess ryujit changes could have made it?
/u/AnthonyLloyd any performance differences between .NET Core 2.0 on windows vs linux, im just curious
I think you misunderstood. I was talking about the runtime using more memory so that it can run GC less often, not about the user code allocating more.
Meanwhile people forget multithreading. Threads in linux are guaranteed to be less efficient than on Windows, for historical reasons. There are *many* optimizations in place that are Windows-only, that's one of the reasons why ASP.Net Core on Windows is quite a bit faster - it depends mostly on efficient threading &amp; ThreadPool. 
So we put it here on reddit first and generate some downloads :)
TPL DataFlow would be the perfect fit for OP's task. https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/dataflow-task-parallel-library TL/DR you can declare a max degree of parallelism (5 in your case) and queue is also build in
.NET Core has no home platform.
ScriptCS is something I've been messing around with. WebAPI is legit, no doubt but it can be a bit heavy handed when you pull together a full fledged solution. ScriptCS has a WebAPI module that I got off the ground in less than 30 lines of code. [link](https://github.com/scriptcs-contrib/scriptcs-webapi)
My negative view of Java isn't as much about the apps that have been created or the language itself as it is the runtime. Frequently there are vulnerabilities found and trying to update to a newer version of the runtime often breaks existing software. I've not known .NET to break software when a security update has been applied. Source: I'm a software developer that has also done significant amounts of time on a help desk. 
sorry I can't tell. You'd need to run windows and linux on the same box. I did see a lot of differences for n-body between my machines and the test server. Often I thought I had 3-5% improvement that didn't show on the test box. Could be linux or machine difference.
Try Kestrel Web Server, works great with regular and Core https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel?tabs=aspnetcore1x
Should overload EndsWith with OrdinalIgnoreCase as well. 
How do we go from a List with a ListBox to a TextBox.Text in your code? Likely, you wanted a header displayed inside the List Box. But, ListBox in the gui designer is plain text. It doesn't run c# code like this, however you can run code to achieve this. Usually do this for listbox's anyways in a method.
Need to start using System.Ben, that'll blow all of those benchmarks out of the water.
As others have said, the '?' is the ternary operator. The quotes are removed by the framework code which parses the argument list - putting things inside of quotes is how text with spaces is used as a single argument. That loop is just printing the arguments to the console one at a time, the '?' operator is used to add a space after all but the last one (hint: look up `string.Join`, it's a cleaner way to do this). If you want to add quotes, you can. The simplest way is to add a temp variable above `Console.Write` and append quotes around the argument, then write the variable. Since you're still learning, I'll let you code that out. 
Consider trying this approach, [non-blocking system beep](https://stackoverflow.com/questions/2751686/how-can-i-execute-a-non-blocking-system-beep]
Like everyone else said - ternary/conditional operator. One way to make them more easily understood is to split the parts across lines with some indention: customer.IsActive ? "Active" : "Inactive" 
I'm not referring to an absolute memory amount. I said memory pressure, which is one of the metrics the runtime uses to determine when to GC 2nd generation objects.
Right, which is why I said memory pressure and not memory usage. Pressure can kick off second generation GCs, whereas memory usage that doesn't affect the pressure greatly will not.
Nancyfx framework. 
Having gone from C# to Java recently... I can honestly say I hope C# takes off on Linux. Never mind performance, give an API that is consistent and (mostly) sane. And, please, give me an IDE that isn't a chaotic mess (IDEA) or unstable as hell (Eclipse). In some ways, I feel sad - Java had great potential, but C# feels so much easier to work with...
First of all I am not sure is ethical make bot like this. Either way in my opinion you should parse html file as click like button based by some rules you define. Not hardcore like position of the mouse. I recommend looking into html agility pack or selenium if html is generated with JavaScript.
Tbh, I'm not as good as a programmer so theres no way I could bring this out as a good bot, just boredom, thank you for the help :)
Not the same as a benchmark , but for our purposed windows was, surprisingly, faster. That's all I need to know for our application
Whenever you have a loop that could potentially iterate very quickly (and potentially for a very long time), you should add `Thread.Sleep(1)` within the loop. This frees up the CPU scheduler to run other instructions. To illustrate, create a simple console program with the following main method: static Main(string[] args) { while (true) { Console.WriteLine("Looping..."); } } Open task manager. Now, run the simple console app. Notice the CPU usage for your simple console app. Now, change the main method to look like this: static Main(string[] args) { while (true) { Console.WriteLine("Looping..."); Thread.Sleep(1); } } Open task manager, run the console app, and note the CPU usage. See the difference? I don't know how this will affect the beeps, but see how adding `Thread.Sleep(1)` makes your program behave.
First, this probably violates the Instagram EULA. Second, you're better off using IG's private API. Their public API is kind of pain to use and the private API is much more straightforward.
Console.Beep is synchronous, which means it blocks the current thread while it is running. Windows manages threads for each CPU and the scheduling of threads on the CPU is non-deterministic. Basically, you're not going to get predictable behavior from a loop with synchronous (blocking) actions in a single process. https://msdn.microsoft.com/en-us/library/8hftfeyw(v=vs.110).aspx https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx If you really want to produce a specific tone, you need to use DirectX. 
***edit - missed a word*** Where can I find these differences? I've done some searching online and have not found a good site. I am also going the self taught route since I have already gone to college and don't plan on shelling out any more money. I am currently learning via the text C# 6.0 in a Nutshell, Devu.com, and Microsoft.com. I was planning on making some ledger software since I am an accountant by trade to put on my resume (via a github link) in order to show my efforts and self-learning. Are the differences so minute at the beginner level that I wouldn't have any trouble just diving in and creating a server based web app (i.e., are these mostly behind the scenes and would go unnoticed by a newby like I)?
They purposefully trade memory for speed when needed. 
Just get the element and click that 
If you did want to do it this way, you could use something like Selenium, and find the elements using xpath or css selectors. Using the "private Instagram API" is probably much, much easier though. Something like this: https://github.com/a-legotin/InstaSharper
I will give u some example that I currently have in mind: the I/O treatment differs a bit. You cannot call the close(); method in dotnetcore when u finished the reading of a file (and all I/O entities I guess) due to different files handling between Unix/Windows. So you'll use the "using" keyword (I let you look on internet for example) which do the same work but which is implemented on dotnet and dotnetcore both. Another example, I made some socket programming few days ago and I saw that asynchronous methods aren't implemented in the same way on dotnet and dotnetcore. But this cases are rare and very easy to repair, so do not think it could be a real problem for you projects Good day guys 
Thank you for the quick reply! I'll just dive in and I imagine I will run into things that will have specific solutions online (e.g., if I am unable to use a method developed in .Net Core that I was previously able to use in .Net).
I don't know about .NET Core. The .NET Framework on Windows certainly can, I've had to on many occasions when working with C style DLLs.
One more question regarding transitioning from ASP.Net to Core. It sounds like online they are removing Web Forms. I'm not worried about the drag and drop interface for new users, but I was wondering if using ViewStates and the event handlers and working on html in the .aspx file and the server side .cs files side by side be applicable? Will the user of server controls be different? I've been using the free devu.com text class for asp.net web applications (C# fundamentals). It has been somewhat painful, because I have already learned a lot of the syntax for the C# language (helping with the server side), but setting up websites with web forms has been engaging. I'm concerned that everything new I learn via this course for the most part will have been a loss.
If you use the web browser control you can search for specific elements on the page, specifically the like button, and then invoke a click on it. 
That's awesome, and I have had a similar experience with VS2015. But I mentioned VS2017, not VS2015, and they are somewhat different animals. 
Probably because VS2017 went all muh NODE.JS crazy or some webscale shit... When you start VS2017 now - a node.js runtime is also started. Fun shit!
I created Watson Webserver to create simple async HTTP servers. May fit your need: https://github.com/jchristn/watsonwebserver It's also in NuGet: https://www.nuget.org/packages/Watson/
Removed: Rule 6, spam.
Just gonna say, I'd be surprised if there isn't a way to leverage jquery's click emulation to loop through all of the like buttons. 
That's been [unsupported](https://blogs.msdn.microsoft.com/dotnet/2015/12/09/support-ending-for-the-net-framework-4-4-5-and-4-5-1/) since January 2016.
why/how is this spam?
Almost 100% of your postings are related to your product. Please review the below resources and adjust your conduct accordingly. Reddit and /r/csharp does not exist as a platform to exclusively promote/market your own content. * https://www.reddithelp.com/en/categories/rules-reporting/account-and-community-restrictions/what-constitutes-spam-am-i-spammer * https://www.reddit.com/wiki/selfpromotion
 It doesn't matter which you choose, but if you want to go to .net standard and .net core, you should update your versions. .Net standard and core 2 just came out, if you get those, all of those issues should be fixed.
I think OP meant memory used by .NET, so they can store more memory before it being collected. .NET allows programs to use a shitton of memory to increase performance, but control the total memory used by all the .NET processes.
Spring is a massive improvement over older versions of Spring. Boot is just some opinionated defaults and autoconfiguration.
I made a [small project](https://pastebin.com/7W8mTBzY) to try this thing, but I have a problem. If I write alert(result) I can see the content of the file, but if I use the commented line, nothing happen (result.location is undefined). Why? And can the download start without being redirected to a new page?
This looks absolutely perfect, and I think is going to save me a ton of time!!! Thanks so much, already got this bad boy up and running and solving my issue! You made my day, and free up hours of my time, thanks again!
Not sure why you're being downvoted because you're spot on. .NET never handles the parsing of quoted arguments - as far as I'm aware, this is managed by [CommandLineToArgvW](https://msdn.microsoft.com/en-us/library/bb776391.aspx) before the .NET framework is ever even invoked.
Defaults matter a lot.
Hi @dbuzz111, I'm so happy to hear that! If you have any issues or need any help, don't hesitate to ask. Also if there are enhancements that you think would make sense for the broader community, let me know :) Cheers!
[Cheers!](http://i.imgur.com/4Ev4dPs.gif) To nights we will never remember, with the friends we will never forget
Yes. I like it a lot, actually, and have been trying to use it all the time instead of Visual Studio for the last month. If you have a ReSharper ultimate subscription, it’s only a small price on top of that. Otherwise it’s a bit pricy, yeah. 
Yeah It's working now, admittedly, not in the way that a QuickSort algorithm should. I having trouble finding a way of applying changes to the list throughout iterations - hence why recursive sorting isn't featured in my code. I'll keep trying! Thank-you once again for the helpful response Cyberworm, wish there were more people on this thread like you! Elliot 
Bad bot
Is there a reason these need to be stored in a single enumeration? Or could you refactor into subgroups that meet your needs while also falling within 64 bits?
In the current version of Unity you can run with an experimental integration of Net 4.6.
The reason is simply that it would be very impractical to have to start adding additional enums and check all of them manually. Presumably I'd have to add multiple component mask arrays to the entity system and pass around one parameter for each enum in every method that deals with component masks. I haven't tried it, so not 100% sure if it would even be reasonably doable, but even if it is possible it would almost certainly result in some pretty horrible code.
 enumComponentMask |= (ComponentType) bit; componentBitMask |= new BitMask(bits: new[] {bit}); intComponentMask |= (1 &lt;&lt; bit); This difference will lead to a vastly different number of flag matches and array writes, that probably explains the discrepancy between plain int and enum timings.
How so? Do you mean in that specific code, or in the benchmark methods? That specific code is in the constructor, which will only be run once and is not being timed, so nothing in it should affect the times. It's just for generating the benchmark data.
It's generating *different* benchmark data for enums and ints, because you only do the shift for the ints but not the enums. That controls how often the `continue` is hit in the benchmark methods and thus the times.
Ah, indeed. You're right. D'oh. How'd I miss that. Yeah, this changes things a lot. The enum benchmark was completely off, and after fixing it the difference between int and enum seems pretty negligible and the difference between both and my BitMask implementation significantly smaller.
That is pretty cool. Mind if I use it?
Not at all. Go ahead. I'm still trying to find a way to optimize it more, but with the (hopefully) correct benchmark, it's at least only about twice as slow as a plain enum. Gets a bit worse when I change it to use longs though, so I'm hoping I'll find a way to get it closer to enum speed.
First off, I'll admit that I only read the first 50 pages of your post so please bear with me. :) Why do you need more than 64-bits? I can't imagine a scenario where you would see any sort of performance improvement by exceeding the physical limitations of the hardware you're running on and what JIT can do for your primitives. Can you provide a concrete scenario that would justify this requirement? FWIW, I don't mean to sound negative or shoot down the effort, it's an interesting academic exercise. But I fail to see how this might be practical. Edit: downvoted for asking for more info?
The `continue` doesn't look like it does anything. It just skips the rest of the current iteration, which is nearly a noop in terms of runtime.
If you have 65 flags would be a good reason.
I am not sure to be honest. I need to reinstall visual studio 2017 because that broke as well. Unfortunately I cant install and work at the same time. 
Sure. If the limit was 10^99 flags, then having 10^99 + 1 flags would be a reason. But I'm asking for real-world rationale. I can't think of any contrived scenario myself aside from something silly like trying to have an flaggable enum of all crayola colors ever made (which would be better served by RGB anyway). Maybe there is very good reason out there. I'd like to know.
Oops, you're absolutely right about it being synchronous. Last time I created audio files in C# like a tone generator, I ended up writing raw [WAV (RIFF)](https://en.wikipedia.org/wiki/WAV#Specification) data which could either be saved to disk and opened up in other programs, or streamed directly to [System.Media.SoundPlayer](https://msdn.microsoft.com/en-us/library/system.media.soundplayer(v=vs.110\).aspx) if I wanted to hear it.
He's describing an [entity-component system](https://en.wikipedia.org/wiki/Entity%E2%80%93component%E2%80%93system). Essentially, you use a bitmask to turn off a component for an entity and each "flag" in the bitmask is an entity. So 64 flags would leave you the ability to hold only 64 objects in a game. Games typically have _thousands_ of objects in the game.
Most sorting algorithms rely on value swapping, try something like this public static void Swap(this int[] arr, int a, int b) { int temp = arr[a]; arr[a] = arr[b]; arr[b] = temp; } You can use it as an extension method in a static class and call it like this someArray.Swap(2,4); (written on smartphone, code may be shit) 
video is deleted :c
Or just a [HashSet](https://msdn.microsoft.com/en-us/library/bb359438(v=vs.110\).aspx). Edit: Lol why was this downvoted?
It gives 64 different kinds of components, not 64 objects. But it's a stupid way to do it regardless.
Thanks again! Loving your package, everything is there and both solid and fast. Just adding the finishing touches on my project, some logging. One question is how do I use the HttpRequest.Headers param? I see it is a dictionary, but can you point me at the references? Thanks again! Edit: just trying to fill out a simple log; LogManager.AppendLog("Request: Activate, ClientIP: "+req.SourceIp+ " ClientPort: "+req.SourcePort+ " URL: "+ req.FullUrl + " Headers: " + req.Headers + " Agent: " + req.Useragent + " KeepAlive: " + req.Keepalive); Edit, Edit: Anyway to do HTTPs? 
There are high-performance ECS frameworks like artemis-odb that use BitArrays to hold entities-of-components and/or components-of-entities. Either way, it's most decidedly *not* a "stupid way to do it".
This thread is why I am so glad I joined this sub Reddit. I love experiments and discussions like this. Thank you
That sort of stuff typically requires JS libraries nowadays. There are some packages that will do forms based on Razor syntax (or tag helpers for ASP.NET Core), but you have to write your own JS for that stuff. Web Forms are dead, MVC is what you want now. `.cshtml` is the extension for Razor views. Microsoft has [a great tutorial](https://docs.microsoft.com/en-us/aspnet/core/getting-started) for MVC. (By the way: this is your tall friend, the one you play Overwatch with. :) )
Here are a few suggestions I have and none of them may appeal to you. 1) dedicate as much time to studying the hell out of everything you can to be as prepared as possible. Having as much knowledge as you can is going to be the only help you can have in the face of lacking experience. 2) search like hell for contract jobs or open source things you can contribute to. By contributing to things on GitHub you will build usable experience you can put on your resume despite not getting paid. 3) Learn more languages and sell your ability to learn. I have helped hire a number of developers who didn't know the language we needed at all. They were just good at coding and were willing to learn. The basics are the same. 4) Be ready to move. It sounds like you may not be in a great tech market. Places like San Francisco, Seattle, LA, and Washington DC have more opportunities available. I have worked in the software industry for 18 years. It has ups and downs in hiring cycles and popular technologies. What is true now, may be different next year. From what I see in SF if you want to be effective and code in C# (my personal favorite) Learn Xamarin and develop some cross platform mobile code, or contribute to as many open source projects as you can. That second thing is the single best resume builder without having a job. It teaches you, gives you real world code to work on, and it looks good besides. 
Plot twist!
This is not how things works. Since you want to prompt the user to download the file with a POST request, you have to create another GET ActionResult and redirect the useto that ActionResult in the success of your POST request. It goes like this. You send the data you need the send via POST request and on the success callback of your POST request you redirect the user to the other ActionResult, which serves the file. Check the accepted answer in the link I gave to StackOverFlow. I describe everything there.
For normal flags, I would agree. You'd probably never need more than 64-bits. However, in an entity-component system like the one I'm using, the bitmask is used to quickly determine which components a particular entity has without doing slow operations going through every component array individually to check whether a component of that type exists for the entity. The idea is that each behavior any entity can have should have its own system, and often a corresponding component to hold data related specifically to that particular behavior, in order to allow easy composition of behaviors (in stark contrast to an inheritance-based system) and clean separation of concerns. Needless to say, the number of different components will quickly increase as you add more behaviors.
If you know of a more performant way of querying which entities have a particular set of components, I'd love to hear it.
&gt; It just skips the rest of the current iteration ... which affects the benchmark time.
Are you good enough? If you are, you should be able to demonstrate that via your knowledge, and portfolio. If you don't have this yet, then you should be working hard to develop it as previously recommended. Which tangential technology you choose to focus on really depends on where your interests are. If mobile apps are exciting to you, Xamarin is a great choice. Also remember that not everyone wants the same old app or website or whatever. There are a lot of companies with very specialized needs who don't expect you to start with existing knowledge of their problem domain or any particular stack. For instance, in the physical security space, there are a number of software companies with open API's and SDK's who are desperate for more devs to write integrations into other applications in that ecosystem. In my experience, it's not very hard, and most of the people doing it now are really, really bad at it.
It may be a bit late to act on this advice, but here it is anyway: I studied Software Engineering at university, but I also took the option to extend my course by one year and apply for an optional industrial placement (basically an internship) for additional credit. Now, the university gave me a little help in finding contact details for companies that might be interested, but at the end of the day the onus was on me as a student to find somewhere to accept me. I ran into pretty much the same issue as you are having now; nobody was interested in taking on a student (not even a grad at that point) with no experience in the business, and the ones that did were fiercely competitive (think 20+ applicants for one internship). Eventually I got my foot in the door when interviewing at a smaller company (basically a start-up) and I spent the following year there learning the ropes. Then, when it came to apply for "real" jobs after I graduated, I found myself in a much better position that I was in previously, and landed my first serious development gig fairly easily. You may or may not find it easier to look for something similar, it depends entirely on the type of companies in your area. Other than that, the best advice I can offer is to hit up training sites like PluralSight to develop the skills you think are affecting your interview prospects. If you can back up these skills with real world examples, e.g. a github repo of personal projects that showcase your work, or (even better) contributions to open source projects, that is also extremely valuable.
He is, but I can see his point. Doing a university style course is different from a set of articles. Some people learn by doing, some prefer a more formal approach. I was introduced to parallel programming in university, but with .NET (and somewhat Java and JS), the constructs are now very different. I learned about semaphores, monitors, and the like. Most languages support the basics (often via OS support), but with TPL, concurrent data structures and the like C# is a very different beast. Learning via a university course in Java will help somewhat, so there is that.
All that proves is your application ran faster on Windows. There's a myriad of reasons why that might be the case and a distinct possibility that the equivalent Java application also would have ran faster on Windows. Compare like for like.
I would actually want to know how good would be with .NET Native. 
To be fair they should compare .NET Core to Java on Windows and then on Linux. The results may differ but both comparisons would be interesting. IF the Windows version of .NET Core were twice as fast as Java on Linux then a lot of companies should start thinking about using Windows more. I assume it isn't but saying that the comparisons don't have any value is a bit strange.
Job postings usually ask for more than they require. No harm in applying anyway if you want the job.
Each Crayola has a unique name like "SlightlyUnnaturalSkinTone" so an enum type could work. Also, they should be stored as CMYK because they're a print medium not an on screen medium. I'm seriously just messing with you though, I only got this far in the comments because I was asking the same questions as you :)
other people may disagree but i don't think stuff like microsoft certs are super valued for programming except for just icing just apply for jobs, half the time the people writing up the position description are lazy and just spray technologies in there for no reason, and actually applying for stuff will give you experience interviewing learning all of the JS frameworks is not worthwhile, the flavour of the month changes so quickly it's not worth the effort, but getting to grips with the basics of the popular 3 or 4 and getting a deeper understanding of say react is definitely worth it so you can at least talk from a position of some knowledge the other suggestions here seem pretty right on the money as well
Sorry, but I still can't understand. Why can't I set myTest() to [HttpGet] and only do the last part like [this](https://pastebin.com/dSg363BY) then?
You already know what they want. Just put yourself in their position for one second. What would you want if you were hiring someone? Look, without any degrees I became a senior software engineer from a security admin. The way I did it, and IMO the best way to do it, is to show that you can set proper expectations and solve problems. Figure out what these companies are looking for. And don't listen to their "5 years experience in BLAH." That doesn't mean anything. they are just weeding people out so they get more qualified candidates. Every employer is different. 1. Figure out what that company wants in a developer. 2. Embody the kind of developer they want through study, practice or adopting that value system. 3. Create things or do projects that demonstrate what that employer wants. 4. Interview and show them you are their perfect candidate. 
I agree, certs are not valued as a whole. 
Yes - don't query.
Just because it's fast doesn't mean it's not stupid. What if I told you it could be even faster, and also expandable and moddable?
How would you suggest going about avoiding it? I suppose it would be possible to store a dictionary using every single possible component mask as its key and an array of entity IDs as its value and make sure every one of its arrays get updated every time an entity is created or a component added or removed. Whether or not it would be faster overall, I don't know, but it would for sure cause an extreme increase in work being done for every entity component mask change, and IMHO doing that sounds severely iffy and inelegant.
They changed the way they roll out updates. They release gradually to the batches of customers, according to the MS guys it has something to do with collecting feedback. You would get the notification at some point. Installer is the solution for people who want it sooner.
Then stop jerking around and explain your wonder method.
No, don't do that. You don't need to store a list of what components an entity has anywhere. You have a set of systems, and you give each system the entity and it's components only once, when the entity is created. If the system needs to use a specific component, it will have to hang onto it itself. After that you never query an entity set - the entities don't actually exist. They are just an id that the various systems happen to agree refers to the same thing.
Show them that you're going to be a programmer whether it's a career or not, and they'll hire you. When we hire, we're looking for people who seem to love programming. Who pour their free time into learning, who study on pluralsight or a similar programming course hub. We're not always looking for people who already have experience or a load of technical expertise. But we *are* looking for junior devs (and interns. don't for a second think you're too good for an internship at a small shop) who show *capacity* for learning. We'll give you a short technical interview. We'll have you fix a bug in a practice app we put together. We might have you write a unit test (just learn MSTest stuff, or maybe Moq). We might ask you questions about data structures to see what you've studied. But I can tell you this: unless you're applying *waaay* over your head, we're not rejecting candidates who don't know the data structures well if they show a capacity for learning it, and they show a willingness to tell us "I don't know. I'll have to look it up." I'd suggest applying for all the entry level opportunities you can and just go through the interview process a bit. It's ok if you are applying a little before you are ready. Get a couple interviews under your belt and study whatever they ask you for a bit before the next one. It'll pay off when you're applying for the job you really want.
It depends on the industry you want to get into. I think the most versatile and easiest thing to tack on to your current knowledge is web frontend. Don't worry about which js framework(if any) you learn as long as you learn Javascript. C# developers are in demand. Also, if you want to work in web development in a Microsoft shop, it sucks but you might want to get familiar with older web stacks like ASP/VBscript. In my experience a lot of jobs involve slowly upgrading terrible legacy tools, and it helps to be able to understand the old code. Other than that, learn a lot about T-SQL, managing IIS, and getting familiar with active directory and powershell might help. It really depends on the company, just practice a lot and you'll be able to pick up new languages/technologies pretty fast eventually. 
Even though Liam2349 already said this, I wanted to note it again because it's important: companies (or HR) cram everything possible into job descriptions. They want magical unicorns who can do everything and are willing to work for 20k a year. The best things you can do are a combination of what other people have said: start fiddling with a side project. showing that you can build something on your own time is worthwhile. Keep applying--make them tell you "no." Don't feel like you have to learn every single thing in existence before you can get hired. Build a basic web app with mvc, EF, and *one* js framework, but don't feel you have to learn every mentioned js framework. Etc. Better to have one demo project (or two, and post it on github so they can look at it and ask you questions about it) than to go crazy trying to meet unrealistic demands in a job description. Sometimes I've even had hiring managers tell me to basically ignore the posted description because that's just what HR made them post. Apply, have phone/in-person interviews with the actual hiring managers, and if they ask you a question you don't know, don't ever say "I don't know" to it twice. (aka, learn about it between interviews). I don't feel the microsoft certs are worthwhile.
&gt; If the system needs to use a specific component, it will have to hang onto it itself. Do you know of any ECS framework that does this? Coupling components to systems instead of to entities/IDs makes little sense.
Is there a reason you can't use the built in http clients, HttpClient, HttpWebRequest, WebClient, etc? All those support https requests ootb 
If you can afford it, go for any free practice at some company for 3-6 months. They may hire you for salary after this time. If not then you already have this precious enterprise experience that you'll not get on any university. I did it this way (with small company) and am currently senior software developer. Btw, the language is not that important. The general understanding of software development and problem solving is crucial. Try to do some private projects. Like game in unity or XNA (both uses C#) so you can get some practice in real life problems solving.
Why do you need to implement the client entirely instead of using the existing WebClient?
wait... i AM using HttpWebRequest (i'm actually implementing a REST client)... are you telling me that all those objects are handling one way SSL authentication out of the box? fuck. my. life. Thank you, kind stranger
Yes, just point it to https and you're done
&gt; half the time the people writing up the position description [...] just spray technologies in there for no reason This right here. A department separate from mine put up a job listing last year which requested candidates be familiar with Postgres. My company is a decent-sized enterprise, so I've run into quite a few database systems; however, I've never once seen any department using Postgres (unfortunately). I have no idea why Postgres experience was requested, but whoever they hired would definitely not be using Postgres.
&gt;you give each system the entity and it's components only once, when the entity is created That won't work, as components can be added or removed at runtime. &gt;They are just an id that the various systems happen to agree refers to the same thing. True. I suppose I could add the ability for a system to subscribe to a specific bitmask and then have the entity system maintain separate component ID lists for each bitmask that has at least one subscriber. That would reduce the number of required bitmask checks to only against the subscribed bitmasks when an entity is created or a component is added or removed.
Removed: Rule 4. Feel free to repost, but include the relevant code that's causing the error so we can help. Usually the compiler is pretty good about where the syntax errors are, though sometimes it can be off.
Seen, sorry about that. I would post the code but honestly have no fucking idea what part it is and I didn't want a massive wall of text.
I've been retraining into front end development, and have been using [treehouse](http://teamtreehouse.com). I highly recommend it as a way to pickup HTML, CSS, and JavaScript. More generally, are you applying for jobs and getting declined, or seeing jobs and deciding that you don't apply?
Bit flags make the most sense in scenarios where the actual implementations are (or can be) dense: they can be a combination of any or all of the flag values. Flag values that are mutually exclusive from one another reduce the density, and therefore the usefulness of using bit flags. I haven't seen your actual data or how you're using it, so I can't comment on that specifically.
You just need some programming knowledge of any language to get into it. Nothing more. Everyone who keeps talking about personal projects or side projects is silly as fuck. SE is not different from any other job so why would you spend free time to create something? I don't see doctors performing surgery for free in his own time at home or a construction worker building a house in his free time to show a potential employer. Just be good enough. Ask in interviews why you aren't suited etc. It is most likely something personal and not your knowledge. 
* Doctors typically (always?) go through residency which is OJT and experience. * If a president wanted to build a wall, would the president be more inclined to look at general contractors who have experience building walls or a general contractor who has no experience? * A construction worker is in a totally different ball game than a software engineer. Construction workers can't afford to build a house for funsies. Software engineers can literally build a program from their house, with a cheap computer, in an AC controlled environment, completely naked. A portfolio for a construction worker is silly but a portfolio for a general contractor is not. * Think of the artist who merely states they can paint vs the artist that shows they can paint. Who is more impressive from an employer's perspective? * Working on side projects to beef up your portfolio not only impresses potential employers but also has the amazing side-effect of *actually improving your ability to engineer software.* * In light of what you said and in light of all my points above, I must say that your comment "Everyone who keeps talking... is silly as fuck" makes me cringe and feel embarassed for you.
Create a GitHub account and just start writing apps. Personally I've got a cookbook website, an app that creates test data, a sample app implementing queues in azure etc... it will show a lot more than a resume will. A bit of knowedge like react or knockout with CSS, HTML will help get past the JavaScript barrier. Azure will get you past the cloud barrier. It will also give you something to talk about in an interview. Forget the certs, it's rare for a good dev to use them.
This, No developer will have full knowledge of every technology listed in a job spec, most companies throw everything they can think of into them. If you have a general knowledge of C#, sql and javascript thats enough to apply for pretty much any .Net job. the tech screen phone call is all that really matters to the people doing the hiring, as thats when they find out for sure if you have a clue.
I wouldn't expect college grads to have commercial development experience. I also wouldn't expect a college grad to get a remote job. If you can, move to where the jobs are after school. As others have said, job postings are often wish lists, not requirements. I'd take that a step farther and say you should consider jobs in programming languages you don't know. A college grad with knowledge of Object Oriented Programming, MVC, ORMs, SQL and other programming concepts is about as useful even in a language they haven't learned yet. Also if you can, pick a side project for yourself. This will do 3 things. * 1) Help you choose a focus for additional learning: web/desktop/mobile. * 2) Open up a potential job working for yourself. * 3) Show employers you can think strategically, not just tactically in a codebase. Good luck and let us know what you do and how it turns out!
Try removing/commenting out chunks of code until you identify the culprit. (Make a backup first!) Is Visual Studio not providing any red squiggles or relevant compiler errors?
Applying for jobs right now with about 4 years experience in programming... I have no confidence at all after reading the job requirements for most applications. Ahhh. But I do recall I didn't meet the requirements for most of the jobs I held before either.
Depending on the case you could also override and use Equals (it's done automatically for anonymous types). On a more general note, if you (impersonal you) use LINQ and this case is not immediately obvious, you should probably do some more learning before using LINQ in serious code. Understanding a minimum what's going on under the hood will make this clear as day. It will also save you big headaches in the future. 
Unless it's a senior position, most companies just want to make sure you aren't completely incompetent and not a tough personality to work with. You'll do fine! 
I'm sorry to say this, but this is a really obtuse way to say some elementary stuff: 1. Of course members of lazily evaluated enumerables are gonna be recalculated every time they're enumerated. That's what lazily evaluated means. 2. Of course that just because two object of reference type were created the same way doesn't mean they are equal. That's what reference type means. 3. Why do the examples have to be so obtuse? This, I think is a better demonstration of the post's message. int[] seed = {0}; var source = seed.Select(a =&gt;new []{a}); Debug.Assert(source.First() != source.First()); EDIT: changed tuple to array cause that makes it more obvious
I see .NET Framework becoming just Windows specific libraries on top of .NET Coreclr long term
Can an entity have a single component multiple times (and could that be refactored to be avoided)? If not, you can have a fixed-size array and just check null-ness (and even in the multiple times case, the array could be to linked lists). Basically, each component type has an index from an enum, then your array is the size of possible values in the enum. This, of course, depends on how you're modelling your ECS classes - as in, many components vs few components.
Thanks for taking the time to explain and not just downvoting. I think I understand a bit more ... but not intrinsically (obviously). There is just something about trying to use bit flags on a data type that exceeds the physical hardware data block size that has a code smell to it. You may eventually achieve the API you want (and there is value to that) but this approach seems inherently non-optimal. 
It would seem that the code works correctly, but its the wrong code for what you are trying to do.
&gt; He eventually ended up in the defense industry and is now being well compensated for using Python. defense industry with python NOOOOOOOOOO 
Simple rule is don't iterate over enumerables multiple times. Also, make use of LINQ's .Join() method rather than repeatedly calling .Single. 
One way this can be clearly demonstrated is with random numbers or ordering a list randomly. It's easier to demonstrate that .Select(x =&gt; random.Next()) or .OrderBy(x =&gt; random.Next()) produces different values when evaluated twice. Compared to demonstrating that a normal projection produces the same data but with different reference equality. I do think it's an important concept that can be missed by some. I have written code in the past that was wrong because of this, and so have many of my coworkers. I think it's a common gotcha, although one you're likely to encounter and learn quite early.
Danger, Will Robinson! https://motherboard.vice.com/en_us/article/wnjwb4/the-myspace-worm-that-changed-the-internet-forever
They're good from a team level to ensure a baseline coding standard if one doesn't exist. If you're the sort of person that has trouble with learning without a goal they may help also. Microsoft Gold partners sometimes need a specific number of certified employees, so that could open you up to those specific areas.
I'm with you, this seems incredibly obvious.
Junior and remote usually don't go together, sorry....
Think of them as a single line "if" statement.
One thing this example doesn't do (though it might be implicit in the implementation) is explicitly specify for what purpose* the "endorsement" can be used. Obviously you wouldn't want the owner of this endorsement to be able to add another endorsement for google.com at the top of this chain and have it be trusted even though it has a valid chain to the root. FooEndorser might also not want ChildEndorser to be able to endorse further intermediate endorsers but only single endorsements. Another important consideration (in a practical implementation) would be revocation of invalid/stolen endorsements. X.509 certs also have the ability to form multiple parallel trust chains. This is useful since not every client necessary trusts the same CAs. For example, Let's Encrypt's certs are cross signed by another CA, which allowed them to be widely supported from the start.
We ask for experience in everything. We expect our junior programmers to understand basic concepts in c#, anything else is a bonus
I've got it and have returned to it several times. Firstly when I was new to programming (and loved it) and I would honestly say helped me get my first job using a different language but still using OO. However later I went back to it to learn C# and it was terrible. Its so slow going and honestly a little insulting when you know the principles but want to learn the syntax and nuances of the language. TLDR : If you know .NET or OO skip it and get a reference book. Otherwise its a great introduction to OO and programming in general. 
Logging. Examples are System.Diagnostics.Trace (included with .NET), Log4Net, NLog (many more).
Hi @dbuzz111, yes Watson supports SSL. You'll need to load the certificate into your OS and set the constructor Boolean to true for the SSL parameter. When logging the request headers, you'll have to iterate the dictionary, i.e. foreach (KeyValuePair&lt;string, string&gt; curr in req.Headers) { headerString += curr.Key + ": " + curr.Value + Environment.Newline; } or something similar.
Not really related, but C# 6 In a nutshell is really good, buy that book after you buy a beginner book /learn C# 
 If you enjoy the content, it's worth it. Head First is designed to help beginners conceptualize concepts and stay engaged through creative explanations. It works well, and it's good for a complete beginner to have a structured resource like this. Also, consider downloading C# Yellow Book, it's a free book for new programmers to understand the basics.
All you're going to be expected to do as a junior C# dev is understand basic coding and know how to learn. When I got a junior dev position, they were asking for C#, HTML/CSS, JavaScript, AngularJS, MS-SQL, DB2 SQL, and TFS experience. Not much of it really mattered. They never once asked for a portfolio. I was not asked to write code on a whiteboard. I was given a VERY basic set of questions based on some C# and SQL code. Because I had been in an internship and another full-time programming job for a short time after school and could speak intelligently about code, they jumped at the chance to give me exactly what I asked for in terms of salary (higher than they first mentioned). If you're going to graduate soon and you don't have an internship lined up, do it now.
some advice for a graduating job seeker: fresh grads have the upper hand in a job hunt. HR loves u. use all recruiting resources provided to you through your school. you get this advantage once for every break in your curriculum (summer internship for example) and after every degree you complete: bachelors, masters, etc. microsoft has legions of evangelists, specialists, etc. if you search eventbrite, meetup, and others to find c# related events or groups, you'll find the local network. firms dont hire skillsets, they hire people! and my last missive: on the way out of college, you're thinking from an academic POV. try thinking about programming as a trade and your IDE as a toolbox. meditate on a practice honing your tools and developing good habits and routines. pick up a copy of The Pragmatic Programmer for some inspiration. good luck!
It's written for beginners so depending on your level of programming knowledge, you may find yourself skimming a lot. Actually working through the exercises can be frustrating if you're the type that says "Well why'd they do it that way.... this other way would be better!" so you change it. Then you find out that change doesn't work when they circle back to your modified project to build on it and you have to change everything back. All in all, I give it a thumbs up. It's quite good for what it is.
Interesting. I hadn't really considered the idea of branching "endorsers" figuring each "Endorsement" from the chain would be separate, but it would certainly make sense. As for the "what it can be used for" thing, I would assume this would be covered by each "block" being signed, no? Any change to any block would invalidate the signature of that block. Maybe I'm misunderstanding what you mean? I also like the point of disallowing a "child" endorser from being able to spawn additional children. That makes perfect sense. 
&gt; As for the "what it can be used for" thing, I would assume this would be covered by each "block" being signed, no? Any change to any block would invalidate the signature of that block. Maybe I'm misunderstanding what you mean? I don't mean changing the block's URL value, I mean prepending another block like it but for for a different domain at the start of the document and acting like "Friendly Name Of Owner" was another endorser. You do mention that the version header and white space are part of the signed block so depending on the implementation and parsing logic this wouldn't necessarily work, I just figured I'd mention the possibility.
Then you either don't add or remove components (honestly why would you?) Or you tell the systems when you do this.
They have a good example here: https://docs.microsoft.com/en-us/dotnet/framework/reflection-and-codedom/how-to-define-and-execute-dynamic-methods
I thought it was pretty decent but labored the point a little in places and could have covered more material if they were a bit more concise.
Ah, gotcha. No, *everything* is part of the signed block, including the Name/ID, keybits, publickey, valid, endorsedby, and EndorsedId. Each signature "signs" the entire block above it, and is created by the "EdorsedBy" person (the idea being that each EndorsedBy could have multiple Id's, each Id representing a unique key).
&gt;Can an entity have a single component multiple times Not in my ECS, no. It currently only supports one component of each type. If that wasn't the case, I don't think using component masks to check for them would work either. &gt;If not, you can have a fixed-size array and just check null-ness Of course, this would work, but it would mean checking each component array you're querying for, and would almost certainly be incredibly slow compared to using a single bitmask check. &gt;Basically, each component type has an index from an enum, then your array is the size of possible values in the enum. The way I currently have it, each type of component has its own fixed-size array, all of which are stored in a dictionary with the component type as its key. The arrays are created by the constructor, based on a list of component types gotten using reflection in the entity system class' static constructor. The dictionary is only used in the systems' constructors once per component type to get a reference to the component arrays it requires, and for some infrequent operations in the entity system itself.
I'd love it if there was a cleaner, more elegant and equally fast or faster way of doing such checks, but as far as I know there isn't.
In order to be able to enable/disable specific behaviors during gameplay. It isn't something that's being done frequently at the moment, but it's useful in some cases. One of the things I'm using it for right now is to temporarily enable a trail (shadow/motion blur effect) for the player character during dodges.
Updated main post with a loop-less plain field implementation.
Bob Tabor is great, I highly recommend him as well.
&gt; Then you either don't add or remove components (honestly why would you?) If you can't answer that question yourself, then you're either arguing from a position of disingenuity, or are using a conceptualization of entity-component and entity-system relationships that goes against every major ECS framework I can think of. Certainly all of the Ashley- and Artemis-like frameworks, as well as Entitas (which, AFAIK, decouples systems *entirely*). To repeat my question to you, do you know of any framework that couples either entities or components to systems?
VS2017 runs *much* better than VS2015 for me on a Mid-Range Laptop.
If you add FFMPEG to your PATH (Windows) you don't even need the FFMPEG exe in the same folder as your exe. audioStream.StartInfo = new ProcessStartInfo { FileName = "cmd.exe", Arguments = "/C youtube-dl -o - " + song + " | ffmpeg -i pipe:0 -ac 2 -f s16le -ar 48000 pipe:1", UseShellExecute = false, RedirectStandardOutput = true, CreateNoWindow = true }; Here I'm piping YouTube-DL into FFMPEG, but it's the same concept.
If you like the presentation and pacing, then get it. All the head first stuff is pretty good for starting from zero. It gets some flack because if you generally know things but want to go deeper, it's quite lacking. And some people don't like the general lighthearted format of the series. But to get from zero up to the basics, it's perfectly fine.
I didn't like it - I thought the demo examples were the most boring thing ever. I prefer the 'C# Player's Guide' as a beginner book. I really thought he explained the concepts very well and for whatever reason was able to get through pretty much the entirety of it, which is a first for me as I don't usually have much stamina for these things. https://www.amazon.com/C-Players-Guide-3rd/dp/0985580135 I remember I got the first edition a few years ago and I took the time to message RB Whitaker at the time how good I thought his book was. It is on to the third edition now so other people must agree. 
The "In a nutshell" series did wonders when I made the jump from ASP Classic to object oriented programming. Very well done books. 
It walks a very thin line through a very dense forest, and leaves you with the impression that you are a programmer. On the other hand what it does, it does well. But it can't replace time and effort. 
Instead of cell.text look at cell.controls. The gridview cell represents the td in the html. The value is being edited in a control embedded in the td. Otherwise, that link has everything you need.
If you are using web forms, at what part of the life cycle of the page are you looking for EntryGrid.Rows[0].Cells[2].Text ?
I hade to use that book for school and i absolutly hated the way it tries to teach you C#. This book does not begin with how it should begin (maybe a bit of history or just start with the datatypes). The book just let's you do things without explaining what you are doing, when it tries to explain things it just uses a comic text balloon at the side. Sometimes the comic text balloon is relevant and sometimes not. 
Well this one is really obvious though. Of course a lazily evaluated sequence is lazily evaluated.
By the way - you can also use the .ToString() method on the request itself and it will dump the request to the console in a structured/reasonable form :)
Head-ON, apply directly to forehead!
I'd agree that this approach seems clumsy. If I understand you correctly you're trying to store information against the type itself, which isn't really appropriate. I don't have enough information to answer fully - if you can either pastebin or give some additional description of what you're doing that would be helpful. In the meantime it sounds like what you need is a wrapper class. I expect that you could use a class i.e. RecordTypeWrapper (with a member property for the type) and RecordTypeWrapper&lt;T&gt; : RecordTypeWrapper to encapsulate your type and the MainRecordInfo that you need to store. If you do this make sure to override GetHashCode and Equals on RecordTypeWrapper so it still plays nice with the dictionary.
Why didn't you get an internship this summer?
They aren't dude should've done an internship this summer.
&gt;zoo of JavaScript libraries Haha that is such a great and accurate description
If you really want to learn C# try Daniel Solis's book.
https://www.codeproject.com/Articles/19513/Dynamic-But-Fast-The-Tale-of-Three-Monkeys-A-Wolf implements an IDataRecord to object generator via hand coding, reflection, and last DynamicMethod. Here's the industrial strength version: https://github.com/StackExchange/Dapper/blob/610d8f65bcf1d72dbe083305b6cb018ef89a5126/Dapper/SqlMapper.cs#L2386
There were none available, except for some boring math-related stuff.
Hey I don't have the code with me, I'm on mobile but I've done this multiple times. Search for the "datatable" type variable in google and dump your data from your query right in a datatable variable. (i.e.: write a query that gets all the rows and columns you need at once - one row is also ok...) Then parse through that variable with your code. Much easier than trying incremental SQL statements on the fly. You can use the datatable variable very easily in C#. Almost like an array. 
Thanks again, I've got everything rocking out nicely your package was such a pleasure to work with. I've still not tried SSL and your comment about loading the cert. into my OS sounds funny as a Linux guy, but I will take a stab at that next. Thanks yet again, much appreciated!
I have a NuGet library called DatabaseWrapper that will make this easy for you. It returns a DataTable and dynamically builds sanitized queries for you. Works with MySQL, MSSQL, and PostgreSQL. Source: https://github.com/jchristn/databasewrapper NuGet: https://www.nuget.org/packages/DatabaseWrapper/
My pleasure @dbuzz111. Are you running on Linux with Mono? If so, note that you may have to load root certificates: https://github.com/aspnet/docs/issues/184 Mono and SSL are rather tricky. You may find it easier to just run HTTP on Watson and sit behind nginx or something. If you're running on Windows, the process is pretty straight forward. I put together a walk-through for of my other projects that uses Watson here: https://github.com/kvpbase/storage-server/wiki/Configuring-SSL-Support-on-Windows
I always like to access the columns by name. while (dataReader.Read()) { str.Add(dataReader["Size"].ToString()); str.Add(dataReader["Shape"].ToString()); str.Add(dataReader["Origin"].ToString()); str.Add(dataReader["Color"].ToString()); str.Add(dataReader["Weight"].ToString()); } Truthfully I have no idea if that works for MySQL, but I've done it a million times with MS SQL. Also, reading data into a list of strings is a terrible way to do it. Especially here, that code will create a mess if there is more than one row. Build a class.
Yup and that is fantastic, except how does one translate that to a method?
&gt; I ran into some compiler bug Try not to get into the habit of blaming the compiler. Compiler bugs exist, but are extremely rare. Most likely it's your code. &gt; Why did I need to input the OverDrawCheck() method again on 20 and 35 I just did a quick glance at your code. You are accessing Lists p1 and p2 via indexes, but your OverDrawCheck is checking the Player1 and Player2 stacks. Your for loop is exiting based on the value of result, but it doesn't look like you ever bounds check the value of i versus the p1 and p2 Count properties.
&gt; I just want to return a List&lt;string&gt; and then use it as List[0] [1] for the column items from the select. You're probably wanting to return List&lt;List&lt;string&gt;&gt; to get values using List[0][1] something like this: public List&lt;List&lt;string&gt;&gt; Select_List(string query) { List&lt;List&lt;string&gt;&gt; rows = new List&lt;List&lt;string&gt;&gt;(); if (this.OpenConnection() == true) { MySqlCommand cmd = new MySqlCommand(query, connection); MySqlDataReader dataReader = cmd.ExecuteReader(); while (dataReader.Read()) { List&lt;string&gt; columns = new List&lt;string&gt;(); for(int i=0; i &lt; dataReader.FieldCount; i++) { columns.Add(dataReader.GetString(i)); } rows.Add(columns); } dataReader.Close(); this.CloseConnection(); return rows; } else { return rows; } } And if you want to read by columns instead of rows: public List&lt;List&lt;string&gt;&gt; Select_List(string query) { List&lt;List&lt;string&gt;&gt; columns = new List&lt;List&lt;string&gt;&gt;(); if (this.OpenConnection() == true) { MySqlCommand cmd = new MySqlCommand(query, connection); MySqlDataReader dataReader = cmd.ExecuteReader(); for (int i = 0; i &lt; dataReader.FieldCount; i++) { columns.Add(new List&lt;string&gt;()); } while (dataReader.Read()) { for (int i = 0; i &lt; dataReader.FieldCount; i++) { columns[i].Add(dataReader.GetString(i)); } } dataReader.Close(); this.CloseConnection(); return columns; } else { return columns; } } ** haven't actually compiled so some modification may be necessary 
This doesn’t remove the need for reflection, but I’ve also seen attributes used for this. For instance, MEF uses this approach. It’s at least a bit more syntactically sane because that’s what attributes are designed for, whereas your use of static properties is unconventional. Aside from that, I wonder if you couldn’t turn this into a virtual method somehow. I’d have to know more about the larger architecture to know how that would look. 
Do you actually *need* the `MainRecordInfo` to be a static property on the type? My usual solution is to store it elsewhere, e.g. a `ConcurrentDictionary&lt;Type, MainRecordInfo&gt;` (encapsulated in some other type). There is one way to differentiate static members on inherited types, sometimes known as the "curiously recurring template pattern": abstract class MainRecord&lt;T&gt; where T : MainRecord&lt;T&gt; { public static MainRecordInfo Info { get; protected set; } } class FooRecord : MainRecord&lt;FooRecord&gt; { } class BarRecord : MainRecord&lt;BarRecord&gt; { } Here, `FooRecord.Info` and `BarRecord.Info` are two different properties that can hold different data. It's not ideal, though, because there is no easy way to get this to work with inheritance chains (if you wanted to inherit from `FooRecord` again), and technically nothing stops you from declaring a `FooRecord : MainRecord&lt;BarRecord&gt;`.
to respond to your first comment, I wasn't trying to "place blame." I am very well aware that machines don't make mistakes and simply do what we program and tell them to do. It was an unrelated comment that I threw in related to my fatigue related to something earlier. You seem to be "splitting hairs" at this point over semantics.
You should read this documentation: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/routing
Good luck getting help with that attitude.
We could probably both use some help :)
This isn't a problem with routing, but with your startup project configuration. Visual Studio has a setting that automatically opens Chrome and navigates to a set url, you need to change it. However, you're currently missing the `api` prefix in your template. You need to add it: template: "api/{controller=posts}/{action=Get}/{id?}"); You might want to look at [routing attributes](https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/routing#attribute-routing), with which you can define the route directly on the controller/method and not a seperate template. 
I think it was pretty good. It certainly is for beginners but has a few advanced topics from time to time. Its just silly enough to keep your attention too. If you like more cut and dry then it might not be the book for you. 
Thanks, I will try that!
You need an object type (class or struct) capable of storing all those fields as members/properties. So, an object of type Inventory that has the properties: Size, Shape, Colour and so on. And instead of a list of strings, you have a list of &lt;Inventory&gt; that you fill with populated instances of objects inside your while loop.
Er, to help others here, could you respond to his feedback? I'd rather not debug code you've already fixed!
John Sharp's [Microsoft Visual C# Step by Step](https://www.amazon.com/Microsoft-Visual-Step-Developer-Reference/dp/1509301046/ref=sr_1_1?ie=UTF8&amp;qid=1503051925&amp;sr=8-1&amp;keywords=c%23+step+by+step) is a great book. It teaches beginner, intermediate, and advanced concepts.
Yep, look for a file called launch.json
Thanks
Removed: Rule 3. Maybe /r/webdev or /r/netsec can help.
Badly formatted blogspam stolen from https://www.mikesdotnetting.com/article/46/c-regular-expressions-cheat-sheet, with parts of the intro copied from the MSDN.
It's like his name was meant for this.
&gt; The data is loaded to the gridview when the search button is pressed. I am trying to read the data from the gridview when the submit button is pressed. The stackoverflow post has me deeply confused as to what control I am actually searching for, or how I find the control ID 
My attempt to use the FindControl has me getting an error of Description 'Control' does not contain a definition for 'Text' and no extension method 'Text' accepting a first argument of type 'Control' could be found (are you missing a using directive or an assembly reference?) The code I am using for this is GridViewRow row = EntryGrid.SelectedRow; row.Cells[0].FindControl("Social Security Number").Text; "Social Security Number" is the name of the column. Am I completely misunderstanding what I am supposed to be using for the control ID portion of this? 
Most of these patterns are what I'd call antipatterns and code smell.
Some men are just destined for greatness
[CLR Via C#](https://www.amazon.com/CLR-via-4th-Developer-Reference/dp/0735667454) is a really good book to have handy.
You should put a pause on doing any programming involving databases and learn programming instead. When you're ready, then go back to databases. 
Looks really cool! I am going to give that a try today. Thanks alot!
Thanks for the tip, I've been looking at Datatables a bit this morning. I feel like right now I love them and hate them but gonna write some code and try them out!
Thanks alot!
Thanks, this looks like a great drop into solution to my messed up code. Thanks again!!!
After leaving it after 3rd chapter last year, I decided to start from the beginning. Am I the only one that thinks it's **extremely distracting**? So much pictures, many diagrams, my head is close to exploding by overload when I try to read this. However, I might not be the appropriate target, since I've got some Python and C++ experience.
Thanks, I found it in the project properties, under "Debug/Launch Browser". 
....right but you said it produces an empty string. Hence why I asked that question.. You are already *deeply confused*, by your own admission, with a possible answer that really is a little hacky to begin with. And quite honestly what you just did was a massive dick thing to do *especially* when asking for help. 
Yes, do as much as you can.
Type safety is an antipattern?
Casting isn't exactly the hallmark of type safety...
I'll put a note at the top to close it, the code is sloppy and is operating correctly from what I can tell. I was just trying to understand why I needed to add those two additional lines. Thanks for taking a look.
Take advices here with grain of salt as you are in c sharp subreddit. Most people would recommend learning csharp.
His point is why is a Dev getting themselves into situations that require this type of code? If this pattern is seen, something else isn't designed right.
Pattern matching is really useful for compilers and interop with dynamic data. Same as reflection. They all have their uses.
Are all parts of you "program" in the same address space / process?
Holy cow! This is so similar to the SqlTable class I built for my job, right down to the operator class!
You lived a blessed career if you've never found a legitimate use case for these things.
Not really. I've just listened to people with true skills, emulated them, and finally learned myself. It's a continuing effort, which is not a blessing, but a self realized goal.
I don't think /u/jorgensigvardsson is concerned with pattern matching. He or she is concerned with the examples given, such as `obj is "Hello World"`, which they view as anti-patterns. Which I strongly agree with.
What is your end goal? To learn the ins and outs of C# by getting certified? I know Java's cert is fantastic for that. I never took it but I know people who did said it was so in-depth. As for C# cert I haven't taken it either and don't know if it's as good as Java's certifications. If you are looking to get hired somewhere I wouldn't get certified for that. Being a good fit for a team is the benchmark most companies are looking for. Your programming skills are second to that. And if you find a company that only wants your skill RUN. Run the other way as fast as you can. They are looking to burn you out and throw you away. Here's what I did in my career. I learned the technology and the languages as much as I can. I spent all my free time studying, learning and creating. Then for my employers I always try and figure out what they want most from someone. I never used my job description to define me; that is a trap. What are the pain points your boss has and how can you use your skills you're learning to alleviate that pain. They will love you. People want to work with people they can trust to get the job done. People who set good expectations, bring up issues early and are always thinking about their needs and how they can serve them and the business better. This has served me well. You are your own brand. Take care of it by taking care of others. 
&gt; What is your end goal? To learn the ins and outs of C# by getting certified? I know Java's cert is fantastic for that. Yes, something along those lines. I study best if I have a distinct goal I am working towards, and "Pass the certification exam" is certainly a concrete enough goal, plus it comes with the side bonus of having evidence of my abilities, that I'm not just a hack who can't fizzbuzz.
That's great! Nothing wrong with that if you can sell yourself well with it. Just know that most people may not value it. Let them know you by your results you produce. 
Why couldn't they just copy F#'s pattern matching?
 static void DemoParse(object obj) { if (obj is string str &amp;&amp; int.TryParse(str, out int num)) { Console.WriteLine(num); } } I guess beauty is in the eye of the beholder. This looks anything but beautiful to me. 
Look up routing attributes, I use nothing else but.
The use of ```is``` is the new pattern matching feature in C# 7. ```obj is "Hello World"``` is not valid C# 6. 
&gt; A portfolio for a construction worker is silly but a portfolio for a general contractor is not. This isn't quite true. Where do contractor references come from? If you're starting out in the construction field, you must be putting together a list of projects worked on along with pictures to show employers/clients. While I also don't agree with the "silly as fuck" comment, I've been a professional software engineer for over 20 years. I can count on one hand the number of open source projects I've contributed to, and for good reason. I don't work for free. I do, however, work on interesting things in my (albeit limited) spare time these days. Not so much for honing my skillset, but rather to build on it -- e.g. how to code a web service client in C# using HttpClient. Now that I've learned that, while I can't necessarily list it as professional experience, I can discuss the project and technology intelligently in an interview or even just discussing the technology with colleagues. 
Sometimes you need to return multiple types of data and don't have a meaningfully close, common ancestor. This would be cleaner with discriminated union types, but the implementation of *that* would probably just wrap up something similar. Ideally, though, you should be designing your APIs in such a way as to avoid type-sniffing. It just isn't always possible/practical.
Sounds like you are doing a homework assignment. Try /r/learncsharp, for example.
&gt; ConcurrentDictionary&lt;Type, MainRecordInfo&gt; I actually have a high-level `DataHandler`class that has a static dictionary containing record type information. I forgot about that, but I'm thinking of doing is to store information there and encapsulate all metadata in some `RecordMetadata` object or something.
I think I figured out a good way to do things. I have a high-level singleton that controls how data is read. I forgot I had a static dictionary there containing record types. I need to change it so it contains all the type data I want to cache.
I think I figured out a good way to do this. I have a high-level singleton that controls how data is read. I forgot it contained a static dictionary with record types as values. I'll change that so it's an encapsulation of type information.
There are several cases where pattern matching is genuinely useful that I have encountered so far: - Working with subclasses (the good old "if tree node is leaf do X otherwise Y", for example while working with something like Roslyn or XElement). - Handling IO in sine scenarios (for example, you want to implement a method which less the caller write something/anything into a spreadsheet cell, do you accept object as a argument, but still need to do some internal logic based on what exactly that something is). - It is sweet when working with dynamic, though not necessary (which admittedly applies to all the examples above, being syntax sugar and all). I've never had to do something like "x is 100". To be honest, pattern matching truly shines in combination with other functional features (and a bit more liberal type system).
They're sort of working on it; a bunch of pattern-matching stuff was deferred to a later release.
They're pretty contrived examples, as these 'look at this new feature' articles tend to have, and don't benefit much from the new feature, or demonstrate good practice in their use. You could use it in situations where existing API designs require you to accept an object (something like XPathNavigator.Evaluate(), say) to dispatch type-safe overloads where appropriate, turning this var o = nav.Evaluate(xpath); if (o == null) { // deal with null value return; } if (o is bool) { var boolValue = (bool) o; // do bool things return; } if (o is double) { var doubleValue = (double) o; // do numeric things } var stringVal = o as string; if (o != null) { // do string things return; } var navValue = o as XPathNodeIterator; if (o != null) { // do nodeset things return; } // deal with values that shouldn't be possible into this switch (nav.Evaluate(xpath)) { case null: // deal with null value return; case bool boolVal: // do bool things; return; case double doubleVal: // do numeric things return; case string stringVal: // do string things return; case XPathNodeIterator: // do nodeset things return; default: // deal with values that shouldn't be possible } This isn't a *monumental* improvement, but it does get rid of the explicit intermediate value, the explicit type casting/sniffing, and so forth, and wrap it into a common set of syntax that works without having know if it's a value or reference type. As another example, the usual implementation for overriding Equals(object) becomes public override bool Equals(object other) =&gt; other is Thing thing &amp;&amp; Equals(thing); instead of public override bool Equals(object other) { if (ReferenceEquals(null, other)) { return false; } var thing = other as Thing; if (ReferenceEquals(null, thing)) { return false; } return Equals(thing); } Again, not a huge benefit, but it reduces a lot of common ceremony to something that doesn't have to be thought about. I think the decompiled code is valuable, since it demonstrates that it still boils down to ugly type-sniffery, which is important to know for reasoning about performance characteristics. With that in mind, pattern matching still has all the performance issues likely to go with type-sniffing, but at least it bundles up the mechanics in a way that makes the type detection and conversion impossible to screw up. *edited to shrink the Equals(object) implementation a bit.
I created a high-level singleton that controls how data is read, and I forgot it had a static dictionary with record types as values. You're right about using a wrapper; I'll use that as a value instead.
One line to say if the object is a string and the string is parsable to an int, then do something with that int isn't beautiful? Before the same thing would be: static void DemoParse(object obj) { if (obj is string) { int num; if (int.TryParse(obj as string, out num)) { Console.WriteLine(num); } } } Far worse in my opinion. A nested if for one thing.
yes, all parts are in the same process. The two relevant parts of the code will run on the same thread, even.
&gt; a I apologize if I came across wrong. I am not really sure what you mean by what point in the pages life cycle ? The overall flow is supposed to go Person opens page, person enters last name and password, person presses search button. Then Their record shows up in the Gridview if it exists, otherwise they press the new signup button. Then when they press the submit button, if it is not a new record, the values from the gridview should be read into string variables to populate an UPDATE statement, if the new record button was pressed, pressing the submit button should instead use the variables to populate an INSERT statement. The submit button has a protected void Button3_Click(object sender, EventArgs e) 
Ya think? 
I've found that Unity C# tutorials are a really fun way to improve C# skills and ending up with something that you can show off. It also gives you good experience with developing for a full, practical system; practical experience with the code.
Every time a page is ran it goes through what is called a life cycle. Just as with windows forms, WPF. etc. Meaning each time the page is loaded, it reruns the select query for that gridview. If you are trying to read the gridview before it is even databound, it will come up blank. https://msdn.microsoft.com/en-us/library/ms178472.aspx 
Then you should simply be able to return a pinned IntPtr or unsafe void* from you function. 
It might seem counterproductive to do such a thing when you have object orientation available to you, because why wouldn't you push all specialized behavior for different types into a type hierarchy with virtual methods? The truth is it is never really the case that the type hierarchy is the best place to put all specialized behavior. It often depends on how closely tied the objects and the algorithm or processes that operate on them are, and how you expect your software to grow going forward. For example, if the type hierarchy is meant to represent an open set of types with a closed set of operations (such as in the world of plug-ins, adapters, contracts, providers, etc), object orientation may be just what you need. It lets you easily grow to more implementations of the same contracts so your software can adapt. However, if the opposite is true, and the type hierarchy is meant to represent a closed set of types to be used by an open set of operations (such as in the world of protocols and data transfer), then it doesn't make sense to distribute the specialized behaviors into the objects because the object's definition is finite, but the types of operations you might want to apply to them in the future is not. 
Careful not to get burnt out. Id suggest making toy programs, maybe a simple wiki-like "database" site for a game/hobby you love. Or a simple game like Snake, Pong, etc, but add some complexity to it (levels, more than 1 ball/snake, etc)
Ok. So in that case, how can I tell when a postback is occurring / the page is reloaded? 
I gained a ton from the C# in a nutshell book from O'Reilly. Still keep it around as a reference but I am only 6 months in as a developer.
I've done some unity C# stuff before, but I'm worried, since game design paradigms are antithetical to business models, where reliability and scalability are important.
I think you might have some misconceptions about game design and business models. The only really big paradigm difference is that games prioritize maximizing processing speed over accuracy. A lot of the same design patterns and paradigms are used in both fields.
Could you give an example of when you've had to return multiple types of data? Generally, I've only seen methods that return an expected type or an error type (error message, status code, etc.), which can easily be encapsulated in custom return type or now can be handled via Tuples.
No really, your post isn't even a coherent reply to my post. Who even mentioned C#6? How is it even a doubt that everyone reading understands that is what pattern matching is? Why didn't you try answering the specific point of those examples of constant matching in the article are terrible?
You could do something like static void DemoParse(object obj) { int num; if (obj is string &amp;&amp; int.TryParse(obj as string, out num)) { Console.WriteLine(num); } } But you don't even need the `is` static void DemoParse(object obj) { int num; if (int.TryParse(obj as string, out num)) { Console.WriteLine(num); } } 
Certificates are not really evidence than you can program well in C#. They just mean you can memorise.
Anything Jon Skeet writes; C# In Depth is excellent. I have the third edition, which has been instrumental in helping me wrap my head around async/await, complex use of delegates, etc. He's an excellent writer in general. And, I see there's now a fourth edition: https://www.manning.com/books/c-sharp-in-depth-fourth-edition If you get it, I'd look forward to hearing about it.
Is that a good thing or a bad thing?! :) Hope it's useful for you @revocdeb!
Our entire application at my current job is based on dynamic data interop. These 'anti-pattern features' as you called them are huge quality of life improvements to a developer who has to work with dynamics constantly. Like it or not, dynamic interop is becoming popular due to how easy it is to write safely now with the help of tools like Resharper, Postsharp, and C#'s own new controls from the past 3 versions. It still boils down to static typed Intermediate Language, but it is written dynamically. Can you not understand how useful that is? Your career truly is blessed if you don't have to use these features. They're not always done by choice, but by necessity. Good developers will do what is necessary in a clean, safe, and fast way. Bad code is not synonymous with the usage of new language features to simplify common problems at scale. Or did you think that they just released this feature for fun? It's common enough to be a major change, so clearly the C# development team knows that a lot of people need it. 
Me, specifically? I don't think I've had to, but it's also nasty to deal with, so we take (sometimes great) effort to avoid it. I have had to make use of XPathNavigator.Evaluate() which returns any of bool, double, string, and XPathNodeIterator.
Universal message bus. You need to send messages down it which can contain literally any form of data. If I receive a `(dynamic)message.Count` down the bus then I need to react without asking the sender about every little detail of their implementation. Let's say the message they sent is a `ICountTicks` custom interface with custom properties; that is easier to react to using a simple `case (message is ICountTicks):`
But without examples like this, most people would never see the need to use the feature. ;)
I'm having issues building .NET Core 2.0 apps in TFS as well. I'm not sure if my situation is related to yours or not, but I'm seeing the following error message: &gt;error : The version of Microsoft.NET.Sdk used by this project is insufficient to support references to libraries targeting .NET Standard 1.5 or higher. Please install version 2.0 or higher of the .NET Core SDK. I'm trying to figure out if I can just install the .NET Core 2.0 SDK on my build server or if I have to configure TFS to work with it too. Did you have to do anything special to get the .NET Core 2.0 SDK working in TFS? I'm running TFS 2017 Update 2, BTW Edit: Solving the issue was as simple as installing the .NET Core 2.0 SDK on the build server.
Don't get burnt out, but C# will be useful to you pretty much universally going forward. The .NET Core 2.0 is a big deal. Check out [C# compiling PHP](http://www.wpdotnet.com/) for some neat insight as to why you might want this skill. 
How is this free? It's a business. How do they make money?
Get a Pluralsight subscription and do their full coursework on C# if you need a goal to work toward. That will set you up for success 100x better than any certificate. You get some free Pluralsight access with a Microsoft Dev Essentials account (which is free). Try that out first if you're uncertain. I guarantee you won't find a better learning website out there for C#; I've been self teaching it for half a decade now and can't find anything better.
So, what happens if you set a static ViewBag value? Like ViewBag.Test = 10; Then in the view @ViewBag.Test Simple debug thing, but it'll help eliminate problems with the viewbag. And does the value get set in the viewbag when you debug your index function? 
BTW I added more details on the SSL installation process on Windows here: https://github.com/jchristn/WatsonWebserver/wiki/Using-SSL-on-Windows
This sounds interesting. Would it be something like this -&gt; https://stackoverflow.com/questions/15527985/what-is-void-in-c ? 
Oh wait I see what is going on here... You are setting the EditIndex to 0.. So instead of this: EntryGrid.Rows[0].Cells[2].Text Change it to this: TextBox tmptextbox = ((TextBox)EntryGrid.Rows[0].Cells[2].Controls[0]); string result = tmptextbox.Text(); Basically when you put the editindex to zero it creates a new textbox control in the cell.. so you have to cast that control to a textbox to read it. As the cell doesn't have text in it it has a textbox..
In my completely nonexistent experience you need at least two different directories to avoid naming overlapp and stonewalled pointers 
I just figured I'd stop by to let you know that I also have yet to find a better way to do what you're doing. The confusion in this thread is understandable, based on my own reaction the first time I saw bitmasks for entity components.
I don't buy that. Good examples are a plenty.
Thank you very much. I played around with using the HTTPListener for SSL and "proxying" it to port 80 of Watson, it kinda worked, but was stupid (: Implemented your original suggestion of NGINX (well I used Apache in my case) and just put that in front for the SSL. Thanks again
You would think, turns out I just suck... (; Thanks for the sub, looks like some good stuff for me to learn over there. 
Good examples would lead to only using it when appropriate instead of seeing it as a golden hammer. :P 
Here's a sample of my War Game, [https://dotnetfiddle.net/bjwzjV](https://dotnetfiddle.net/bjwzjV). It's not polished, but hoping it helps with your refactoring and code progress by giving some examples within your context.
Is it just me or is "pattern matching" a really bad name for this feature? When I think of pattern matching, I think of searching for strings inside other strings using regex...
You’ll need to use Console.ReadKey() - this has an overload which prevents the key from being shown, as described [here](https://msdn.microsoft.com/en-us/library/x3h8xffw(v=vs.110).aspx). Then, you can read each key, and if the key is acceptable, allow it to be shown and add it to the input string that you’ll build. If the key is not acceptable, simply prevent it from being shown.
Huge thanks, I appreciate it. The link is broken
How would you check for stonewall though if the compilation is serverside without assembly?
My bad, I assumed it was a Clint side problem as the server has completely access to the resources anyway. In that case a work around would be possible, just call a breakdown. PM me your code, and I could take a look at it
I will try that, thanks
Are you guys drunk?
I'd expand to say single line if/else statement. If the evaluation is true do the thing on the left side of the colon, else do the right side.
And if a user hits backspace? Arrow keys? Enter? you want to manage every scenario a user can do?
It does make coding somewhere more interesting, not to mention gives some interesting new angles. I found this masterwork while drunk: -- spreadsheet magic -- requires import Control.Monad.Instances let loeb x = fmap ($ loeb x) x in loeb [ (!!5), const 3, liftM2 (+) (!!0) (!!1), (*2) . (!!2), length, const 17]
https://msdn.microsoft.com/en-us/library/x3h8xffw(v=vs.110).aspx I think Reddit gets confused because there are parentheses in the link. Copy+paste from here rather than clicking if necessary and it should work.
&lt;3 Haskell
If only it compared with Elixir's pattern matching.
It’s not trivial, I agree. It’s the only way I know to do what OP asked though. But if you know a better way that would be great.
Shoulda specified, this is completely unrelated to the current problem it was just to show the value of drunk googling
Sorry for derailing your question, I just realized my first response is unrelated to your question. Was thinking of another topic from earlier. Disadvantages of drunk googling
Well, the simplest example of it improving code is using conditionals in a switch on a complex object. Before, you could only use constants. switch (myList) { case List&lt;Goose&gt; l when l.Count == 1: return "goose"; case List&lt;Goose&gt; l when l.Count &gt; 1000: return "metric shit-ton of geese"; case List&lt;Goose&gt; l when l.Count &gt; 500: return "invasion of geese"; default: return "geese"; }
Please don't hurt me for hijacking your thread to ask another question! I have such a difficult time reading any programming book cover to cover, even if they have good examples. This is because the examples always seem a bit standalone. Can anyone recommend books that walk you along using the technologies by building a single application? Thanks in advance!
Use Char.IsDigit Put your readlines inside of while loops that check if the inputs are valid. Something like while (!validinput) { } Parse the characters in the input string validating with IsDigit. If they fail the check issue an error message (age must be only numbers), repeat the console.ReadLine until you get a valid answer then set validinput = true and exit the while loop. Use IsLetter to validate the chars making up the name string . convert the strings to Char Arrays to make this code easier to write and so you don't have to deal with the end of string. String to Char Array: https://msdn.microsoft.com/en-us/library/2c7h58e5(v=vs.110).aspx Char.IsDigit: https://msdn.microsoft.com/en-us/library/7f0ddtxh(v=vs.110).aspx 
https://www.youtube.com/watch?v=Y02ccL4-_K4&amp;list=PL6n9fhu94yhW7yoUOGNOfHurUE6bpOO2b&amp;index=22 It's good.
I find this hard to believe. Either way, this is why you are up shit Creek without a paddle. See if you can land one for during the school year. So easy to get a job after an internship.
You're right, it doesn't like parenthesis. You can manually replace them with %28 and %29. I don't like it because I fairly regularly post links to the MSDN documentation. There's probably some shortcut/utility to do this automatically, but I don't know what it is.
When a link uses parantheses, you have to escape the closing bracket in the link with a back slash. Edit: Link seems to work anyway
Using string.Substring will almost certainly be the easiest way of doing this. However, the key to your quandary will be the modulo operator ( % ). It will perform a division by the right-hand value and return the remainder. There are multiple implementations in various languages, but here's a few picks: https://stackoverflow.com/questions/32016815/split-integer-into-two-separate-integers https://stackoverflow.com/questions/9914216/how-do-i-separate-an-integer-into-separate-digits-in-an-array-in-javascript https://stackoverflow.com/questions/3389264/how-to-get-the-separate-digits-of-an-int-number
I feel like this is providing a lazy way for devs used to dynamically typed languages to solve problems that are more adequately solved by features like inheritance and interfaces.
You can use division and modulo to manipulate the number. Example: void Main() { var n = 123456; while (n &gt; 0) { Console.WriteLine(GetTwoDigits(ref n)); } } int GetTwoDigits(ref int number) { var n = number % 10; number = number / 10; n = (number % 10) * 10 + n; number = number / 10; return n; } This produces 56, 34, 12 (numbers are in the wrong order, but it should give you enough to proceed from here...) You can get the number of digits in a number using: Math.Floor(Math.Log10(n)+1); Which could be useful to get the number in the proper order.
12=floor(123456/10000)%100 34=floor(123456/100)%100 56=floor(123456/1)%100 Similarly, if you want, from the integer A=A(N)A(N-1)...A(1)A(0), the "subinteger" A(n)...A(m), you do: floor(A/10^(m))%(10^(n-m+1))
BASIC authentication isn't supported by .net core, so you'll have to write your own authentication middleware.
i think you interpreted "can't write" differently than most people did and went with the approach of preventing that input from showing up in the first place. i would imagine s/he's just after how to validate the input after it's been entered and re-prompting if the input contains invalid characters. so something like: var isValid = inputname.All(Char.IsLetter); is probably more appropriate. 
Thanks guys! I forgot about the modulus operator! I'll give it a go with that in mind!
How, exactly, are you going to not 'couple' components with systems? Do you think a rigid body component can possibly not know about the physics engine or vice versa? Of course they do - that's the point. Your 'component' is just some data. "This object has a rigid body of these dimensions, this mass, this etc" and what the physics system does with it is up to it. Once the entity is created, the component ceases to exist in any reasonable sense. It's just some data tied to a specific ID that the physics engine is storing whichever way is best for it.
You can make a method to simplify the code, from all the validation stuff. Here's a quick sample, [https://dotnetfiddle.net/yEu2H5](https://dotnetfiddle.net/yEu2H5).
Or find a way to do it that doesn't involve adding or removing components at runtime. Or - just tell the systems whenever a component is added or destroyed. You're so focused on making this operation efficient that you're not seeing what you lose by forcing the systems to handle components in such a specific way. Most of your behavior logic will benefit from having the data that is specific to them *not* stored in a 'component' class. Components exist to describe what an entity is, but once the entity is created, you shouldn't ever need to query what components an entity has or even fetch some specific component. Just fire off messages and let the appropriate system worry about it.
A bunch of small programs is a PITA like you say. Maybe an even bigger 'issue' is that the other devs don't stand with this idea. I think you should definitely have a meeting where you can discuss this and set goals that you all (and your boss) agree on otherwise you risk getting others angry. - Projects that are the same but app.config differs should be configurable through a settings menu or preferably do this automatically if possible. - Make sure there's no (major/100 lines) duplicate code. Create a shared .dll/codebase and change the small program to use the new code base slowly over time. - Long term fase out smaller applications with a general purpose one if it makes sense to do so. Doing this is also a PITA but maintenance is sooo much easier if you have to just change a few lines one time.
IMO it's better to do a little calculation in the view than to use the viewbag. Just don't go overboard and write like a 50 line script to run there. Viewbag always smells like global variables to me, kind of a last resort.
You don’t need the first referenceequals, as “as” returns null when input is null. 
&gt; How, exactly, are you going to not 'couple' components with systems? By not forcing systems to store or "hang onto" components as you describe here: &gt; If the system needs to use a specific component, it will have to hang onto it itself. I cannot think of a single ECS framework that does this, which is why I keep asking you for an example—I'm very curious to see how this would be implemented. Every ECS I've ever seen links components to an Entity instance and/or an int ID, not to a System. &gt; Do you think a rigid body component can possibly not know about the physics engine or vice versa? Of course they do - that's the point. Your 'component' is just some data. "This object has a rigid body of these dimensions, this mass, this etc" and what the physics system does with it is up to it. I agree with all of this. It's beside the argument. &gt; It's just some data tied to a specific ID that the physics engine is storing whichever way is best for it. And if a System other than "the physics engine" needs to read the rigid body component. There's not a 1:1 relationship between Systems and Component types.
[removed]
Hey! Thanks for all the advice. Regarding the app.config files, these are not programs that users interact with, but are automated tasks run through the Windows Scheduler 99% of the time. So I was hoping to change them from using customer specific configuration, and instead have a single copy of the application, where the scheduler passes the path to a configuration file instead. 
I &lt;3 new docs site..... there's probably a bunch of stuff not moved over yet tho, who knows. https://docs.microsoft.com/en-us/dotnet/api/system.console.readkey
A plain link always works afaik but if you use a custom text with []() you need to escape the `)` chars in the URL with a `\` like `\)` as you said. [Example link](https://msdn.microsoft.com/en-us/library/x3h8xffw(v=vs.110\).aspx) ^^see ^^comment ^^source
Automate as much of the building, testing and deploying as possible. That takes some of the pain out of management. Your deployment target can be a versioned nuget package or a versioned release zip file, or webdeploy package etc. Vsts or TFS has this tooling as well as other platforms like Jenkins. Artifactory is a good repository server, TFS package management is coming along as well. Then, refactor, refactor, refactor. 
You can also create a custom class, so it's easier to work with in certain cases. Here's an example, [https://dotnetfiddle.net/LC6plN](https://dotnetfiddle.net/LC6plN)
Thanks this is great and much easier to call!
Wouldn't this output 6, 5, 4, 3, 2, 1? If you want 2 digits you'd mod and divide by 100
If you want to split an integer into parts by defining chunksize from leftmost digit: https://dotnetfiddle.net/a0AhyS This can be a lot simplified and I think would be easier if we take it from the rightmost integer, can be combined together to get the desired multi chunk capabilities. 
This is beautiful.
Actually I was wrong. I was using Team Services, not TFS. And I solved that problem with .NET Core Tool installer task, just settings was wrong. .NET Core Tool installer task by default has option Runtime, but it should be switched to SDK. Now I can build .NET Core 2.0!!!
Do you have a code review process in place? That's a great way to find the "oh, you implemented this thing that is already in the general library" problem.
IdentityServer samples are the best place for anything introductory to IdentityServer. https://github.com/IdentityServer/IdentityServer4.Samples IdentityServer itself is a auth server platform. If you don't want to build the auth server that will grant the auth tokens, you really don't need to look into it. If you are only into authorizing the users, a very over the top read is here for asp.net core 2.0:https://digitalmccullough.com/posts/aspnetcore-auth-system-demystified.html For your specific purpose: 1. Authenticating the auth tokens depends on the token scheme and whether the api trusts the respective auth server or not. If you are using JWT, you can always use a JWT validation middleware: https://blogs.msdn.microsoft.com/webdev/2017/04/06/jwt-validation-and-authorization-in-asp-net-core/ 2. For basic authentication using api keys in, you have to write the middleware yourself. 3. After your middleware is ready you can use the Authorize attribute yourself with the policies you want. 
No, there arent code reviews, but this sounds like a fantastic idea. I was thinking of writing release notes which everyone would have to contribute to, so you can pick up on whats new. Thanks for the idea!
A good number of components are used by more than one system - for example, my Position component is probably used in a majority of the systems for various purposes, and I generally want to avoid coupling systems directly to each other. Of course there are ways to avoid using an ECS at all, but then I would also lose the advantage of simplicity that comes with it. I do intend to try out the subscription idea I mentioned earlier though. If that works, it would significantly reduce the amount of bitmask queries needed, since the existing bitmasks being queried by systems would be known by the entity system and could be updated up front only when entities or components change.
Abstract the max speed stuff out to a speed controller class that could be static or just make sure there is one of them. Then you make a static method in the base villian that takes a villian type argument and returns max speed from the speed controller. The speed controller then implements all your speed logic. Just a suggestion, not sure if it will work perfectly for you though as you wouldnt be able to change be the speed of individual instances of villian if you needed to 
While you can't make `abstract static` methods/variables, you *can* make `protected abstract` read-only properties that reference a constant value in each class. As I recall, abstract properties are always virtual.
That would be "Strategy pattern" right? 
Can you please give a short example?
My knowledge of the named patterns is poor, I'm afraid so I have no idea .I plan to read up on them though 
Alternatively, you can use a ViewModel instead of a straight up Model (or list of Models in this case) in your View. Then again, for only one additional property, that's probably overkill.
No, it outputs 56, 34 and 12. It just gets 1 digit at a time, then does a "* 10 + n"... there are 2 "% 10" in the function.
Why not just have a Villian which HAS something that describes them as Plain, Evil, or Deadly? IVillian has an IVillianCharacterOrientation, of which there are three implementations PlainCharacterOrientation, EvilVillianOrientation, and DeadlyVillianOrientation. IVillianCharacterOrientation has a property MaxSpeed and SetSpeed(Speed speed). Get away from all of this weird inheritance and use composition instead! 
&gt; Do you think a rigid body component can possibly not know about the physics engine or vice versa? In the case of my ECS, components don't know anything about any systems - they are just a collection of data that's used by one or more systems. Systems need to know of the components they use of course, but not the other way around.
Kinda. See this video of MS for strategy pattern, they even use Superheros a an example: https://www.youtube.com/watch?v=L8VbNk2tO18
Dunno why everyone is going crazy on their patterns and stuff. public abstract class Villain { public int Speed { get; protected set; } public int MaxSpeed {get; protected set; } public void SetSpeed(int newSpeed) } public class EvilVillain : Villain { public EvilVillain() { Speed = YourValuesClass.EvilVillainBaseSpeed; MaxSpeed = YourValuesClass.EvilVillainMaxSpeed; } public override SetSpeed(int newSpeed) { Speed = Math.Max(MaxSpeed, newSpeed); } } this is probably pseudo code, and I'm pretty sure you have to cast the Math.Max's result, but the idea is here. Or is there something I didn't understand? **edit:** in fact, SetSpeed should be directly in Villain (since it already has Speed and MaxSpeed), so the inheriting classes wouldn't have a lot to do except changing some numbers. So as the others said, composition would be the correct way to go to avoid having a ton of classes that just change a few numbers. 
The ViewBag has dynamic properties, and so they do not work with intellisense. You should still be able to write "@ViewBag.Heaviest" to write that value within your view.
+1 for composition over inheritance, but you're still overcomplicating it by using the strategy pattern. I would go for a simple enum since we're not trying to set different behaviour (which is the purpose of the strategy pattern), but different property values. I would only make two types: Villain and VillainSpeed(Enum). 
If a derived class needs no new members than it isn't worth it to add extra inheritance complexity to your code. It's much more easier to just instantiate one type than having *very* similar types doing the same thing but with different numbers. And like /u/amirrorbehind said, use composition like what Unity does with its components (through an Entity Component System).
I'd recommend Head First Design Patterns, someone implemented all the examples and put them on[ github](https://github.com/bethrobson/Head-First-Design-Patterns/tree/master/src/headfirst/designpatterns). As you'll see the strategy pattern is not really the correct way to do this since its purpose is to switch behaviours, whereas OP's problem is setting different property values.
This seems like the best way to go about it to me. I think the core problem was dealing with constants when properties seem perfect for this.
I'm blind lmao, code formatting looks horrible in a phone
I would highly recommend this playlist: https://www.youtube.com/playlist?list=PL2Q8rFbm-4ruplp2SRUTQjZaFfxh-knS0 You will build a REAL APPLICATION and not just theory from scratch. 
Did it work?
TIL you can use protected on your properties. Only been writing c# for a few months after working in Delphi for a year after college :-)
a readonly property is one which defines a `{ get; }`, but no `{ set; }`. a protected abstract readonly one looks like: abstract class villain { protected abstract int MaxSpeed {get;} } each subclass is then obliged to define MaxSpeed, and could like so: class plainVillain : villain { protected override int MaxSpeed =&gt; 1; } class evilVillain : villain { protected override int MaxSpeed =&gt; 2; } class deadlyVillain : villain { protected override int MaxSpeed =&gt; 3; }
Well, the Villains will have different movement patterns, that is the idea behind the different classes. Each class will use a same named movement method but the method will call different movement behaviors. 
+1 too! Inheritance is insanely powerful but you can get yourself into a mess fast. Composition means that your code, your human readable code remains readable. Imagine a free years ahead right clicking all those variables then going up the chain to find exactly what your looking for. It's a pain in the arse - unless you have this beautiful structure that describes itself with little to no effort. In which case you win. You'll feel the right solution, don't force it because you think you should :) well done too, you're seeing things envelop before your eyes and that's a fine thing.
Thanks for the reply, I had another resource to look at that provided the challenge. I just wanted to understand why my specific layout was breaking 10% of the time without the two added lines. I know my code looks a lil bizarre and was poorly formatted.
There's a library called gstreamer. It doesn't have C# bindings out of the box ( some mono ones, but I never got them working), but I've used it before to run h.264 to a wpf app. You'll have to run it through C++ CLR, but once there, it'll run fine in c#. 
Maybe using one of the libraries that embed chrome and use that is play video files?
I have a voucher provided by the city I live in. I qualify for the free voucher because I was laid off by my previous employer.
Will do. 
Had a ton of issues figuring out why the Latest VS 15.3 Update broke my Xamarin .NET Standard project. Hope this helps someone else. Seems that Project.JSON isn't being read anymore for "Fall Back" frameworks, you must change the .csproj file instead.
chrome doesn't play video. 
Thanks, I've looked at it too. GStreamer even in C is mostly a mess and broken more often than not, but thanks for the suggestion.
Yeahhh Microsoft went back to csproj for .NET Core too so this makes sense 
Unless it's compiled properly What? Don't downvote based on opinions. Chromium/CEF can be compiled to play videos using proprietary codecs, but there's a legal obstacle regarding that
There are lots of resources on this. I'd start with learning to use async/await and Task.Run, along with Parallel.ForEach, and threadsafe collections like ConcurrentDictionary, ConcurrentBag etc, and sync/signalling tools like ManualResetEvent and EventWaitHandles. That should get you started. I would read up a little, then practice making multithreaded applications, and study more in depth as you go.
I would also suggest Jon Skeet's C# In Depth to read about (all things C#, but especially) multithreading and async/await. 
ok thanks.
thanks
CancellationTokenSource is a good one too, for when you want to safely stop a running task by supplying it with a CancellationToken.
If there is one thing I'm getting tired of its breakages after breakages. It's never ending with VS2017 and .NET Standard.
That quote is directly from the "I work in HR and I have no fucking idea what this means, I'll just copy and paste" handbook. Start by getting a solid foundation of asynchronous techniques in .NET and then build further from there.
https://stephencleary.com/book/ is what you need.
Been more than 20 minutes. He dead.
Large value types are heap allocated? Source?
And once you understand all of these concepts, start reading up on side effects and how to mitigate them.
Reading an earlier comment I'd definitely set up a meeting to discuss this matter on how it can be improved with the other developers. I presume you're using visual studio? Therefore, I'd suggest looking into setting up TFS (Team Foundation Server) and just research on it but I think that would suit what you're looking for. These are some of my other suggestions: 1) Set up a dev server (if you've not done so already)- this just makes it's easier to access all your projects (visual studio projects) from one place. 2) Structure your folders - what I mean with this is put your projects into relevantly named folders, so they're easy to find and update. 3) Create .dll files - creating .dll files is so useful! Rather than having 5 files to updated you could simply update a single .dll file and all programs that use the specific .dll file would be updated using the new code. 4) Create a shared folder for published applications / projects - this just keeps the visual studio project files separate from published apps (.exes) etc... there is a plugin that allows you bundle .dll and others files into one .exe I think it's called fosy or something. This would help reduce the amount of files in a published app folder. I hope this all makes sense and that it's useful in some way :) Any questions about my comment just ask :) 
I learn best from books, but be careful with this one; it gives you good patterns but glosses over a lot of things, namely in-depth workings and nontrivial examples (which makes a lot of the stuff like "okay I know how to use this but why should I use it and when"). Not a bad book but it's not for beginners, more of a good reference to have onhand. Unfortunately I don't have any better recommendations.
Being knowledgeable in the area of multi threading is basically being able to avoid shooting yourself in the foot, which is waaay to easy to do with all the syntactic sugar available in c#
This would be great! 
I'd argue the syntactic sugar (async/await, lock, etc) helps more than it hurts.
Lots of people do async outside of MVC requests and neglect important details like cancellation tokens to handle graceful shutdowns or handling errors in the threadpool - making it easier to do async programming also makes it easier to overlook these things if you're used to MVC handling these details for you.
Maybe, but there's no way it's easier to get it right using Thread.Start or background threads and older synchronization primitives. There are only more programmers (like myself) dipping their toes in async programming which means there's probably overall fewer years of experience on average when you round up everyone calling themselves an async programming. Thus more mistakes, but only because it is more accessible now. Not because it's more prone to error than the old methods.
Quite useful (and free!) ebook on multithreading from author of the "C# in a Nutshell": http://www.albahari.com/threading/
You're mostly right, but that's part of why I see it as "dangerous" at this level of accessibility. You could shoot yourself in the foot with the classic threadpool or Thread.Start - but things like error handling were more obvious because you didn't have a popular web framework teaching you to use them and silently handle all the hard stuff on your behalf. I know WTF I'm doing with threads and I STILL hit gotchas with Tasks and async/await because the TPL tries so hard to hide shit behind the scenes.
Was this broken in the 15.3 update or the 15.3.1 update? If the former, have you installed the latter and checked if that fixed the problem? Granted 15.3.1's patch notes don't mention anything about it fixing Xamarin.
That's true outside of MVC as well. It can be really frustrating to have the TPL swallow your exceptions whole, leaving you to wonder why your program isn't behaving the way you'd expect.
Rather amusing considering in .Net 2.0 managed threads would abort the application, with the reasoning that silently trapped exceptions would cause confusion as to why an application was misbehaving. They sure managed to violate the principal of least surprise there with the TPL...
project.json is still a thing?
Seems to be a removal more than a "break" afaik. The plan has been to migrate away from project.json for some time. Edit: No 15.3.1 didn't fix it.
Doesn't seem like it anymore :)
I hope someone posts a good result we have tried many video players at work for our wpf application and none seem to work that great. I think our best result we found was using a libvlc wrapper. 
Python in unity? 
At intern-level they shouldn't be expecting too much. Just get some practice with async/await and tasks, maybe a bit of Parallel.For, and you should be golden.
I've been doing asynchronous programming since C++. I know there is a curmudgeon reaction to these new ways of handling multi-threading with these newer objects. I've taught people how to create multi-threaded stuff using the worker thread and it seemed much easier to walk them through it with a closer to the metal approach. I could introduce them to the simple form, and then add one complication (what if you need to shut the program down while the worker thread is still executing?) at a time. By the end, they had a good grasp of what all the parts did. But they did have to remember to add all the parts, so they ended up copying my boilerplate objects. So the newer syntactic sugar probably is good to make sure they don't forget to include the important bits, but it seems to make it harder for them to grasp. I'm not sure the chosen terms are as good as they could be, because I'm constantly having to say, "By X they mean Y". Good idea, poor UX for the programmer.
Why do things seem to act a bit weird in multithreaded code? Sometimes I'll have an if statement with 3 conditions which all need to return true, yet the last one always returns false even though it should be true...
It's hard to say without looking at the source. If you're relying on shared properties/fields, you could have a race condition or might be passing a value type to a method and expecting to be able to update it like a reference type.
I greatly disagree, especially in a game dev scenarios. Async/await is the bane of my existence. I much prefer tasks with callbacks for handleing async tasks.
Might not be quite what you're looking for, but you could have a look at libmpv: [here](https://github.com/mpv-player/mpv-examples/tree/master/libmpv) and [here](https://mpv.io/manual/stable/#embedding-into-other-programs-libmpv).
Learning async/multithreaded is easy. There isn't that much to it. What's complicated is the particularities of each real life project and understanding each one well enough to figure out how multithreading benefits it. Go with the resources the other commenters mentioned, but do not be disillusioned once you land a job and realise your knowledge will only matter about 20% (in the "I know these words" sense) once faced with the actual code. It's just the way it is. And it's the way it'll be each time. Experience, however, will help you get up to speed faster, each time.
Dotnetrocks and MSDevShow should feature in your podcast aggregator 👍
Could you not create a MovementPattern class and pass it in the constructor then just call something like pattern.Move(this) in your movement method.
Locks. Locks everywhere
ability to not deadlock
Hey! Thank you for all the advice. I'll respond in bullet form that matches your own list: 1) We do have several dev servers. Basically a bunch of virtual machines that we can remote into. We have a Bonobo Git Server set up with all our repositories on one of these. 2) Totally agree! Recently, just before I joined, a naming convention was put in place, which I refactor any program I touch into using. 3) We're actually trying to avoid this by directly referencing. I brought up the concern that we'd have to fix any code breaking from directly referencing a library. This would be highly problematic, if I change 40 different applications that reference the same library every time I change it. I've set up a NuGet feed instead, where the .dll file is now versioned. It means there are no automatic, instant updates for any program that uses the .dll file, but that's preferred in our case, I feel. I'd be happiest, if most of the applications work without having to worry about any updates that's come as a result of lots of changes during the months since it was last changed. I mostly use references to .dll files when it comes to several projects in the same solution that rely on each other. Such as a Unit Test project relying on the project that you want to test. 4) Thankfully don't think we need to be that concerned about bundling into a single .exe file, but we'll definitely need to separate builds and deployments. My hope was to just use the development server for building, and then deploying to the production server. I'm honestly not quite sure how to do this, never done anything like it before. Read something about using SCP for this. I mean I have OUR-DEVELOPMENT-SERVER, which builds the projects and is in the same network group as OUR-PRODUCTION-SERVER, whose file storage I want to put the newly built executables on. Regarding TFS, I have used it once actually, but I think there'd be too much overlap between our other tools and TFS even if it looks great. We already have a Git server for versioning and JIRA for task management. Now I've successfully set up a Jenkins server that can handle the build and deployment step. So do you think TFS will be necessary then? I'd also love to hear any thoughts you have on my responses to the bulletin points. Thanks again for the help!
Channel9 could be usefull too
For something more general but with folks who primarily use C#, give CodingBlocks a look in! Recently they've focused a lot on coding patterns, clean code, domain driven design.
[This blog post](http://benbowen.blog/post/cmmics_iii/) might help.
&gt; it gives you good patterns but glosses over a lot of things, namely in-depth workings and nontrivial examples Can you expand on that?
Removed: Rule 4. There are a few APIs out there, and they usually have examples. Here's a good one I found: https://github.com/CrustyJew/RedditSharp Dive in and give it a shot. If you run into specific issues that you cannot resolve, feel free to post them with the relevant code.
This sounds like an in-house deal, not a development shop. Good luck. I used to use Click-Once for deployment in a similar situation, where I was the only developer without any support of a team. It's not too bad, but it's limited and over simplified, which is ironically the same reason why I used it (I didn't have enough time to mess around with install shield or alternatives). All-in-all the situation was a nightmare, and it's also the main reason why I'm now re-tooling for web applications. 
The book is structured so that for each topic, it states a generic problem, then shows a solution which is some example code, then a discussion about the aforementioned block of code. A lot of programming books have a big overarching demo project that each topic builds upon, and I find that makes it easier to see how things fit in the big picture. Here, all the examples are in a vacuum so assembling the pieces is a little more difficult. The other thing is that it covers a ton of material in &lt;200 pages, and just goes very fast. Its first chapter (18 pages) introduces different types of concurrency then goes over async concepts with broad strokes. One example is that it introduces contexts but doesn't go far in depth to say what they really are and what to do with them, and I remember that being very confusing for me when I read it. It also never really shows what async code lowers to, and that's something that I at least would have found incredibly helpful. It's setup so that there are "see also" bits here and there to go forward and backeard to different topics. It's not really meant to be read front to back, it's a reference. So all in all it's not a bad book but I couldn't recommend it to a beginner because I went into it knowing more or less nothing about concurrency and came out still pretty confused.
Can you post the affected code? Are you able to reproduce this behavior in a simple project? I can't imagine why/how that might happen, and my first guess is that there is something else wrong with your logic.
Yep, you're absolutely right. I mentioned that I'm using Unity3d, and it's one of their methods that seems to be the problem. Specifically, using MonoScript.GetClass. When I compare the types directly, there's no issue.
&gt; This sounds like an in-house deal, not a development shop. I'm sorry, what exactly does this mean?
If dealing with MVC, be aware of how the controllers are created. If they are singletons are there member variables that give them state. I've seen quite a few bugs (not just in c#) around this. It is possible to get race conditions and locking problems when this happens. 
There are businesses which hire developers to produce in-house software for their use, and there are businesses which specialize in producing software. Those are two very different things, mostly, and the scenario you described does not sound like a development shop, whose business it is to develop software.
Ah, that is sort of correct. The team I've joined is responsible for most of the company's income. What I'm describing probably does sound like internal tooling, but in reality, it's a lot of scheduled tasks that both handle processing of data sets as well as pushing these processed data sets to customers. It is literally THE product that the company sells, which is why it has the feeling of being a consultancy. It also has a web application that anybody can access, but that is pretty much the only user interface we export. Most other output is sent over APIs or to SFTP servers. So it's true, we don't necessarily sell software to use. We sell data, but all this tooling is used to send out this data. I don't if it makes any sense. Rest assured, the company would be non-existant without developers.
If you have to do this, you are defeating the purpose of multi-threading.
Should not happen, sounds like a bug in unity/mono
Coding Blocks is very bent .Net
the unity compiler is not standard afaik. so there's no guarantee that this behaviour will be the same as roslyn. using issubclassof and isassignablefrom in general is a bit code smelly. not sure what you're using them for but i think it'd be better to avoid using them.
Hanselminutes
Did you at least trying Googling the issue? First result leads to this https://stackoverflow.com/questions/18845634/internalsvisibleto-does-not-work which itself leads to this https://stackoverflow.com/questions/106880/internalsvisibleto-attribute-isnt-working/107958#107958.
That UI is looking pretty nice considering it is C#.
My assembly is not signed with a strong name. The problem is not that the attribute is not working, because the tests project compiles correctly. It is just Intellisense that is not showing the types in Visual Studio.
You have to create a SeriesCollection object that will hold all of your line series. Then that SeriesCollection will get set as the datasource of your CartesianChart. They have some pretty good examples on the livecharts website. 
I've coded C# for 10 years, writing humble business applications. No CS background (CS didn't exist when I was passing through college). My home projects often involve files: formatting TV shows in S0xE0x format, getting the corresponding title from IMDB, computing SHA hash for comparing files to identify duplicates, and so on. Professionally, mostly back end code, occasionally WPF or MVC but not very much and not very sophisticated. Can you suggest a good project for applying multi-threading, please? 
Thanks, i have created a SeriesCollection (edited post) but how would i set the x values with respect to the y values within the line series? They have some great examples and documentation but i cant find anything that shows how to do this specifically. In most examples the x values are set separately and are not series specific. 
Trying putting it above the namespace. Worked for me with .netcore and resharper.
In a business-related application, I used it for document preview image generation. Worked like a charm.
This. It's an excellent guide with code examples demonstrating the different ways to do multithreading. And it's not like a book, it's more like a few articles in series that you can work through in a relatively short time.
Not really. Locks are used to achieve thread safety, which is the most important thing to get right when doing multithreading.
Hmmm. One thing I do is try to get the IMDB page based on the movie / tv show title. I guess I could preview that, then prompt to find out whether the correct page was found. I could do that without multi-threading, since I won't want the rename process to continue until the correct IMDB page is identified -- but as a exercise, I guess... Thanks for the suggestion.
I found a temporary fix by disabling R#. It seems to be the culprit. Does anyone know how I would go about configuring R# to work with InternalsIvisibleTo()?
I'm using the AssetDatabase methods to get all of the "script" assets, then going through those to check which ones derive from the base type. The idea is to be able to add an attribute to a class that would let me easily add the class in a menu hierarchy. Maybe there's a less code-smelly way to go about that?
Wow, what an excellent program! If you don't mind, where do you live? 
I haven't tried it yet but you can drag mp4 files on the chrome browser and it will play them
Do any of your x and y values tie to each other at all? I'm not sure I'm following what you're trying to plot. Can you show an example graph?
Miami, Florida
They do tie to each other, each value in the x list is used to calculate the respective y value. So the 100th value in the x list is used to calculate the 100th value in the y list. It's essentially just a force/distance graph, but with a lot of variables and high accuracy.
You can use an ObserablePoint object to store an X and Y value. Then you can create a ChartValues&lt;ObservablePoint&gt; that will plot what I'm thinking you want to see. Make sure to include the using statement for LiveCharts.Defualts; using LiveCharts.Defaults; ChartValues&lt;ObservablePoint&gt; List1Points = new ChartValues&lt;ObservablePoint&gt;(); For(int i = x1List, i &lt; x1List.Count, i++) { List1Points.Add(new ObservablePoint { X=x1List[i], Y=y1List[i] }); } Hopefully something like that will work for you. Edit: I forgot to say you can use the Chart Values&lt;ObservablePoint&gt; object as the values for your Line series. 
I think it's the latter, thanks for the help.
No problem!
Started listening to this today, so far so good! Thanks :)
I do WPF and winforms, too, and I dip into web development occasionally. I assume you mean ASP.NET MVC?! When you use the MVC template in Visual Studio, you can use a model to create the view. You'll need to mess with the HTML/CSS if you don't like what MVC generates for you. It's styled with bootstrap. I have only made one small app with the bootstrap classes, but I was able to make minor, obvious changes in the bootstrap tags, to alter the generated UI. Just plunge in and try it. Experiment. You need to get into HTML, though. It's not wildly different from XAML; you pick it up quickly. Unfortunately, you'll have to get into CSS as well. The margins and colors (etc) that you set in XAML are set by CSS with HTML. It may seem like a lot to learn -- but it isn't difficult. 
Thanks, I've played with ASP.NET MVC and it's as close to I've come to not having to touch the UI. My programming experience is rooted in web development so I'm pretty familiar with HTML and CSS. My favorite web project was a full blog/CMS supporting multiple users, different authorization levels/roles, and markup/emojis back before WordPress. I got really fatigued with trying to get things to work properly and consistently between browsers though. That was before bootstrap and jQuery and other modern upgrades to web development so maybe I'll just put some effort into learning to like it again.
Or: filename.ToUpper().EndsWith(".ZIP")
I agree, it need something like &gt; if (ziplist.Any()) 
I don't think that what you are looking for exists. For people who want to build websites without really doing development I usually recommend WordPress or lately Ghost perhaps. But you want to do development without having to learn to do some development... I don't think that's going to work very far. &gt; Or do I just need to suck it up and learn to like it? I think you have my answer. ;-) The only consolation I can give you is that it does seem that JavaScript is very likely to grow strongly in the enterprise space (and challenge the leader Java). So, whatever time you do spend learning will serve you well. Also... I would highly recommend you begin moving away from .NET. You will always have that glove in your bag, but I do think the platform has been waning and I don't see .NET core really reviving it much (too little too late). [I say this as a LONG time .NET developer, since the early preview releases before 1.0]
What about: public class Client { protected string status; ` public Client() { this.status = "non-VIP"; } public string Status =&gt; status; } public class VIPClient : Client { public VIPClient() { this.status = "VIP"; } } `
I hear you as far as web dev goes, and it's good to be well versed in at least a few languages in general. But in my line of work there is a lot of opportunity for .NET. Most of the Enterprise physical security applications (access control, surveillance, building management etc) are Windows based so .NET is going to be a viable platform for some time. And that industry continues to grow as everyone moves on from, or upgrades their legacy systems.
&gt; But in my line of work there is a lot of opportunity for .NET. Sure, of course. Depending on area it can even be the dominant above Java. But, to have longevity in this career you need to look ahead and anticipate changes. I'm not saying that it's a good idea to jump on every fad that comes along but with time and experience you start to see common signs for technologies that have legs. Regarding .NET's dominance on Windows... JavaScript is going to challenge that as well (with the added bonus of potentially being cross platform as well.) Hence Microsoft's sudden shift toward .NET core. (Something they should have done many years ago.) Don't get me wrong. Keep that club in your bag and by all means use it when you can collect a pile of cash. But, like I said, look ahead and learn now the things that will allow you to step in ready to go during their ascendency. Hell the most I ever made per hour was on a COBOL project during the Y2K preparations. I had no intention of ever doing COBOL again, but they backed up a Brinks truck and I just couldn't turn it down.
I disagree a lot for your last statement, .Net is not dying at all, asp.net mvc, Xamaring (for cross platform) and a lot of technology are using .net. I think that .net Core wasn't born to "revive" .net tech, it was born for cross platform development. I even believe that currently is a great time for being a .net developer, the framework and all the languages and platform using the framework are bigger and greater than years ago.
Definitely sage advice and much appreciated! I am a developer by circumstance but not by trade, so I'm actually much better suited for managing and providing advanced technical support on software/hardware in this space. But I have written dozens of tools to help our team excel and to fill gaps in customer needs. I appreciate the role JavaScript has played all these years, but I've always hated it. I can't speak intelligibly about why as it's been years since I've touched it. But it just never felt right. I should learn Java but I feel even less for it. I have breezed over the concept of webassembly and I'm naively hoping that will mean I never have to touch either of them.
&gt; Another things I don't quite get is set; and get; in variables, and why to us e them, when to use them, and should they be used with a public, private class (and when to use private vs public classes). Encapsulation.
&gt; .Net is not dying at all, asp.net mvc, Xamaring (for cross platform) and a lot of technology are using .net. Really. Ask Telerik, NetAdvantage, and JetBrains or other companies that have been partnered with and relying on Microsoft. Their revenues dropped significantly the last few years while everyone in the development community "waited" for things to get finished with .NET core (and 2.0 - the only real "working" example - was JUST released). [Well, JetBrains revenue didn't drop that much because they are a lot bigger than just .NET. But sales in their .NET tools did indeed suffer a bunch.] No one would start a new .NET MVC project because it would just be made obsolete once .NET core was done. You can't do that to the companies trying to support your community but even more importantly you can't do that to your development community. Were you active during the Silverlight years? Same kind of fiasco on a smaller scale. Microsoft has had a habit of rushing their community to the next big thing (making a pile of money along the way) only to abandon that and move them onto the next thing. A lot of people have had enough. The vast majority of developers are fed up with being lead around by a company who clearly has goals that are not necessarily in their best interests (both MS and Oracle). As a result, you are seeing a surge of not only the quantity but the popularity of open platforms and open languages. &gt; I think that .net Core wasn't born to "revive" .net tech It most certainly was. Just before ASP.NET MVC was written, Microsoft was losing 10,000 developers a month to Ruby On Rails (I know because I was there at the time; the execs were not happy). Phil Haack came along, built MVC, and stemmed the bleeding. That worked for a little while but then things didn't go so well with Azure (at first anyway - they are doing a lot better now but still have a long way to go to catch AWS) and then the bleeding started again. The bleeding came again because everyone is clamoring to write once and deploy on as many screens as possible (that's why they bought Xamarin, that's why the started .NET Core). It's also why Anders left his baby C# to start TypeScript... he already saw the writing on the wall. Look, I'm a bit of an Anders fanboy and I do think that C# is the greatest language we have at present (I really like TypeScript too). But Microsoft's delays in wanting look beyond their own product portfolio and beyond their monopolistic tendencies is what caused them to miss the opportunity to corner the market on development. If they had produced a cross-platform .NET environment say 10 or even 8 years ago it would have been game over. Everyone on Mac, Linux, and Windows would be writing in C# (except kernel and driver guys... I'm talking apps). The problem with .NET Core is that it has taken too long and they have been shedding devs to platforms like Node, Python, Go, and others like crazy. Now, it's *possible* that many of them (including me) might be won back... but I doubt it. Open source isn't enough any more when it comes to the platforms that developers want to invest in... open community and direction is just as important and I doubt very seriously MS would give up control of the direction of .NET. &gt; I even believe that currently is a great time for being a .net developer, Sure, you won't see any significant impacts of what I'm talking about for another 3 to 5 years. &gt; the framework and all the languages and platform using the framework are bigger and greater than years ago. The data disagrees with you. But I sympathize with the sentiment. You don't have to take my word for it. I've been doing this for 25 years and I am an expert, but I can still be wrong. It's just on things like this (the big shifts in the industry)... I've never been wrong before.
Though I've never used it, I know there is an InternalsVisibleTo plugin for R#. 