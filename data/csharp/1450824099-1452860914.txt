&gt; Would be it alright for me to msg you if I have any questions? please do
I wish I spent more time on interview algorithms. I hardly ever use them in my job, but moving jobs would have been waaay easier and opened up more choices and faster career growth with added job security. 
That took *an hour?*
Now that you have that you can define a method that takes in any class that fulfills that interface. So you can do something like public void HostParty(IPizza MyPizza) { //blah MyPizza.Order() } Because you know that no matter the class it will have the order method, otherwise you would have to create an overload for every kind of pizza class you wanted to use in HostParty
On a mobile, so excuse the formatting. You would use an interface so that you can have a layer of abstraction in the program. An interface essentially is an API that the class that is implementing the interface has to follow. This allows you, in a class that needs to consume that API, to call the methods and members defined by the interface without caring about the implementation details in the method. Edit: an interface doesn't have any implementations of the methods it defined. It just defines the names and signatures that the implementing class HAS to have. The class that is implementing the interface has to provide those details.
For sure, Func was one of those things that should have come out alongside named delegates.
One note is that C# doesn't support multiple inheritance - you can't base your class off of more than one other class, but you can implement multiple interfaces.
Exactly. Or a list of places where you can order pizza. var places = new List&lt;IPizza&gt;{ new PepperoniPizza(), new HawaiiPizza() } Now that you have a list, you can write very generic code to display them, process orders, etc, and when you want to add anchovy pizza all you have to do is implement the interface and add an instance to the list. You know the rest of the code will work.
It would, one nice advantage to interfaces is you can stack them. But really for the specific example I gave either will work. 
I've used these methods before but I'll make sure to give it a try. What exactly is happening when the combobox is populated is a little unclear to me. With a datagrid, the control has to render rows and cells, and this takes up the bulk of processing time with on-demand loading being a way to circumvent performance issues, but I'm not sure if that is exactly what is happening with the combobox. If entries aren't rendered when the underlying data is "loaded" into the control, then this could do the trick, but if not, it looks like I'm out of luck and may need to find a different control (and that's tough because I really need these to be comboboxes). 
Interfaces are also very useful for building sets of rules or methods that you want your objects to follow, but you only want some objects to follow some rules and others all(etc). For example, you could create: public interface INamedElement { string Name { get; } } public interface IApplicableElement { bool IsEnabled { get; } void Disable(); void Enable(); } public interface ILog { void Write(string message); } Then you could decide you want to create a managed log that can be managed in a consistent way, and be enabled/disabled/stored by key name etc like so: public interface IManagedLog : INamedElement, IApplicableElement, ILog { }
Apart from multiple inheritance everything that can be done with an interface can be done with an abstract class. Interfaces exist because of their simplicity and clear definitions. Their value is more in knowing what they don't do, which is they don't describe any behavior. Unless you need to attach behavior via inheritance you should go with an interface. Even then you'll probably want to use both as you still want to keep the behavior and the interface defined separately. Note that code reuse is not a good reason to use class inheritance. Check out discussions on inheritance vs composition like this: https://www.thoughtworks.com/insights/blog/composition-vs-inheritance-how-choose
&gt; What exactly is happening when the combobox is populated is a little unclear to me. Look at the methods. Basically, when you call [`ComboBox.BeginUpdate();`](https://msdn.microsoft.com/en-us/library/system.windows.forms.combobox.beginupdate%28v=vs.110%29.aspx) it disables presentation events for the control to allow it to be updated en mass then painted only once when [`ComboBox.EndUpdate();`](https://msdn.microsoft.com/en-us/library/system.windows.forms.combobox.endupdate%28v=vs.110%29.aspx) is called, otherwise if you added 1000 items it would repaint the control 1000 times. The other benefit of doing this is that it helps prevent the control from flickering over and over as it's repainted.
/u/Nanopants The alternative to doing this is to use [`ComboBox.Items.AddRange(object[] items);`](https://msdn.microsoft.com/en-us/library/system.windows.forms.combobox.objectcollection.addrange%28v=vs.110%29.aspx) since it handles optimization internally. It's simple to do. Just build an array[] and call the AddRange method. `ComboBox.Items.AddRange(new string[]{"Item1", "Item2", "Item3"});` 
Abstract classes also require that specific class hierarchy in addition to the virtual/methods they have. You may not want to couple your classes to be sensitive to changes in the base classes. Maybe instead of thinking multiple inheritance as "my class needs multiple base classes" it might be better to think of it as "I have multiple class hierarchies that I need to cast to a class outside of either hierarchy". To demonstrate, let's change IPizza to ICanBeOrdered with the same method. Now you can have your Pizza hierarchy (Pepperoni, Hawaiian) and your wing hierarchy (HotWings, BBQWings) and your bread hierarchy (Cheesy, Cinnamon) and be able to have them all implement ICanBeOrdered and be passed into PlaceOrder(ICanBeOrdered item). But let's say you still disagree that an interface is better and you instead create a CanBeOrdered abstract class that is the superclass of all pizzas, wings and breads. And you go along and continue writing your pizza parlor program, and you realize that you also need to write functionality to place items into boxes, and it would be really helpful to write one PlaceInBox(CanPlaceInBox item) method. And you still hate interfaces so what do you do? CanPlaceInBox which is extended by CanBeOrdered which is extended by Pizza? So what do you do when you realize that sodas can be ordered but are not placed in boxes? And let's say your parlor gives out a special dessert only to people who make large orders as a free bonus (the dessert itself cannot be ordered but must be placed in a box)? Your class hierarchy becomes a mess. It's better to keep each item in its own simple, separate, decoupled hierarchies and add interfaces as appropriate (ICanBeOrdered, ICanBeBoxed). Does that make sense? 
I really liked this description. The concrete examples you gave really help make the advantages of an interface obvious.
Great answer, in my computer science class interfaces were "explained" to us in about 5 minutes, which only included how to do it and not why and when, so I ended up never using them. Your answer cleared up alot of my questions, thanks!
You can easily add 100k+ items to a ComboBox with little impact. A thousand should be effortless if done correctly.
Just as a note on this, I remember watching a Robert Martin talk where he mentioned this. That interfaces were C#s way around multiple inheritance. I'll see if I can find it. Found it: https://www.youtube.com/watch?v=TMuno5RZNeE He starts talking about it at about 34 minutes, but the whole thing is good (IMO)
That is a big part of it, yes. Basically you are enforcing a contract, and if that contract is not fulfilled, you (as the programmer), will be informed by the compiler. Additionally, though, imagine you had something like this: void PlaceOrder() { List&lt;IOrderable&gt; itemsInCart = GetItemsFromUser(); foreach (IOrderable item in itemsInCart) { item.Order(); } } List&lt;IOrderable&gt; GetItemsFromUser() { List&lt;IOrderable&gt; userCartItems; userCartItems.Add(new Pizza()); userCartItems.Add(new Wings()); userCartItems.Add(new Soda()); return userCartItems; } (Assume that Pizza, Wings, and Soda all implement IOrderable, which is an interface that enforces an order method) Basically, get a list of items that a user wants to order, and then place them all in one loop, with only one line. Since the interface enforces that each of these items can be ordered, it's very easy to deal with them all at once.
Just wanted to say thank you for asking and all the responses to this. I literally spent all day trial/erroring through interfaces and this thread was exactly what I needed. I look forward to my next opportunity to use them!
I think this is the best explanation in this thread. I'd argue that the given example of IPizza is a very poor implementation of an interface, and many other explanations in this thread suffer from trying to reuse that example. In OP's case, you'd be better creating an abstract Pizza class that implements IOrderable which might have methods such as getPrice and Order. Think about a register system, you have many different items that may trigger different events when ordered. A pizza might be thrown into the oven on order, but a cup just needs to be pulled off of the stack of cups. The register only cares about actions relevant to the ordering process, which is the perfect use case for interfaces.
Thanks for looking into it. It was such a n00b error. Have a look at the updated post. 
Do not use `async void`. Just don't. The only cases where it is allowed is as an event handler - all the other times: **NO**. Just use `async Task` if you have no return value.
That's quite interesting - I've never thought about it like that before. I'm going to be reviewing my code with this in mind - thanks!
After 15 years of programming as a job and hobby I have come to the point where I'm almost never using class inheritance, but plenty of interfaces and [composition](https://en.wikipedia.org/wiki/Composition_over_inheritance) instead. Structures with base classes are too rigid, they hide behavior and state in a bad way, while at the same time often becoming "leaking abstractions" when you have to add or change functionality. It's bit of a shame that a lot of OOP guidance focus on inheritance but not on interfaces, with plenty of examples of building up a taxonomy of classes which really makes no sense when building real, maintainable software.
&gt; Have you looked into Roslyn analysers? Yes! [New Year PVS-Studio 6.00 Release: Scanning Roslyn](http://www.viva64.com/en/b/0363/)
Checkout IEnumerable and IEnumerable&lt;T&gt;. This interface represents a collection of things you can iterate over. Arrays, lists, queues, stacks, etc all implement this interface. While these classes could all share the same inheritance hierarchy, it is cleaner and easier to optimize if they merely share an interface.
Take a look at this: http://imageprocessor.org/ Very easy to use.
We use it to create print-ready files http://highscalability.com/blog/2015/12/28/using-aws-lambda-functions-to-create-print-ready-files.html
To give you some background understanding look up 'Polymorphism'
What he basically meant was: Define the following interfaces: public interface IStoppable { void Stop(); } public interface IDroppable { void Drop(); } public interface IRollable { void Roll(); } Then have a method somewhere that is supposed to be called only on types that implement all these three interfaces: void surviveFire(T obj) where T : IStoppable, IDroppable, IRollable { obj.Stop(); obj.Drop(); obj.Roll(); } This means that you can define classes like: class Human : IStoppable, IDropable, IRollable { public void Stop() { // code that stops the human } public void Drop() { // code that drops the human } public void Roll() { // code that rolls the human } } And be able to call surviveFire with an instance of Human: surviveFire(new Human()); You can still have classes that implement only implement one or two of these three interfaces, but you will not be able to use instances of them when calling the surviveFire method. The compiler will complain.
As a rule of thumb: interfaces describe a behavior or capability (or a set of them), such as `IEdible`, whereas base classes describe type relationships, e.g. Labrador is a kind of Dog is a kind of Mammal.
That was a nice example. I already knew this stuff from experience in a hobby project, but this is way clearer than experience. I'm slightly annoyed by not using IOrderable and IBoxable though :/
I haven't been a professional developer for very long, but I think those kinds of whiteboard tests are ridiculous. The algorithms to solve anagrams and palindromes have existed for years, I'm not going to improve on them anytime soon. My first interview had me psuedocode some sorted data fusion, and I just wrote "sort here" where necessary. They asked me why and I was honest. I said I could've wasted time writing bubble sort from memory or I could Google how to do a proper quick or merge sort during implementation. They respected my honesty and I got the job. 
Congrats on getting an offer so quickly! I think the moral of the story here is when you're looking for a job, do your prep work. This is especially true for people who are currently employed looking for a better job, because it's easy to fall into this mindset that "my current employer values me, so anyone would want me." Understand what you're likely to be asked (google interview questions), and what is expected of you as an interviewee (understand the business of the company you're interviewing for). 
As someone that is not a programmer by trade, but only by hobby, can you please explain this whiteboarding interview technique?
same exact thing happened to me, except i poked holes in the question itself and showed how i would redesign the original parameters to be more scalable/maintainable in the future. they had said nobody ever brought up anything like that before. got an offer 2 days later.
I have been in a professional software developer for about 5 years now. You basically are given a problem and you solve it (using the prescribed technique they give you) in front of a committee (or maybe one person). In my most recent interview, I had to whiteboard FizzBuzz. They explained the problem, told me I could write it in any language (most even let you do pseudo-code), and I just started writing the code on the board. Funny anecdote, I did it wrong, but still got the job. A lot of white-boarding is to see whether or not you will be a culture fit and see if you can solve problems that are harder than the ones they will give you.
Saying "orderable" makes me sound like I'm babbling. But I wouldn't be opposed to making the change if brought up in a real code review. 
This right here is why it's done. We're trying to figure out how you think, how you solve problems and if you'd be a good fit with our team. We don't really care if the solution is 100% correct, but we do expect your solution to be free from trivial errors.
The only difference is that in the one method you can await, in the other not. Also, in the async method, the compiler will make sure that you return a `Task` (or `Task&lt;T&gt;`) and does this implicit for you. That's all. It was done like this (having to declare a method async) because otherwise it could break a lot of code with the introduction of the `await` keyword.
 static void Main(string[] args) { string html = getHtmlAsync("https://www.google.com.au").Result; Console.WriteLine(html); } private static async Task&lt;string&gt; getHtmlAsync(string url) { using (var webClient = new WebClient()) { return await wc.DownloadStringTaskAsync(url); } } Given that static main doesn't allow async on it, is getting .Result or .Wait() the best way to use an async method there? i've done a bootstrap method before as well... static void Main(string[] args) { init(); // or init().Wait(); which blocks } private static async void init() { string html = await getHtmlAsync("https://www.google.com.au"); Console.WriteLine(html); } but of course init will swallow up exceptions thrown by getHtmlAsync. So could wrap that (getHtmlAsync) call in a try/catch?
On a a slight tangent, but I'm pretty sure I haven't defined a non-generic (I.e. `Func&lt;T&gt;` or `Action&lt;T&gt;`) since pre .NET 2.0.
Would you mind giving some links to any special websites, bloggers, or content creators you thought helped you the most? I'm in my first year in the industry but probably within the next year I want to try to land a new job that uses C# and the Microsoft stack. I consider landing my current job extremely lucky but I want to work with technologies and tools I enjoy working with.
I'd rather use my words on how to solve a palindrome/anagram problem than to use a whiteboard. What happens if I say something like this in an interview: "I can explain how I would solve the problem, but I'm not comfortable using a whiteboard for coding" ? Explaining the solution in words is a win-win for everyone; the company can test my communication skills, and I can dodge a shitty whiteboard test.
Sure - I used pluralsight to brush up on C# fundamentals - * https://app.pluralsight.com/library/courses/developer-job-interviews/table-of-contents * https://app.pluralsight.com/library/courses/csharp-fundamentals-csharp5/table-of-contents All Scott Allan pluralsight C# videos are great! As for some of the questions: * http://www.testdome.com/Questions/Csharp/AreAnagrams/3456?testId=21&amp;testDifficulty=Easy * http://www.testdome.com/Questions/Csharp/Palindrome/2978?testId=18&amp;testDifficulty=Easy There are loads of these sorts of questions on Google as well. My advice would be to proctice your coding - look into code kata's and check out /r/dailyprogrammer for good practice! Good luck! 
In an `async Task` method, the compiler will automatically generate the necessary code to build the async state machine and return a `Task`, which is why you don't need to manually return one there. Without the `async` keyword that doesn't happen, so if you declare the method as returning a task, you need to manually return one. This is useful when you're not actually doing any async work in that method, but just want to return the result of another async method for example. The returned Task is necessary for the method to be awaitable, regardless of whether it produces a value. You seem to have a misunderstanding about how `async` works. Marking a method as `async` doesn't mean that its code is automatically executed in parallel on another thread, just that it can contain the `await` mechanism to await other asynchronous tasks. If you want to execute non-async methods on another thread, you can use `Task.Run()`.
Because, even though it claims otherwise, it's just a clickbait ad for their product, "PVS Studio".
Tasks get taken off the main threat and are handled by threadpool. So if you want to replace a void method with some task handled on a different thread you can just use Task. It just marks an operation handled by threadpool that won't give anything back. If you want something back from the task you have to include its type in the signature. so if a method returning a string will become a Task&lt;string&gt;, a method returning a bool will become Task&lt;bool&gt; As for async, it's only useful if you have some I-O (input-output) bound work that doesn't need any computing by your processor. So basically the thread that started the method hits the await and splits the method in two. It tells the compiler, "mark this spot, I'm outta here. Call me when I'm needed again". Once the IO task is done, the thread gets notified and as soon as it gets time, it gets back into the method and carries off from where it left. if you await a task that has no IO work then the await is kinda useless and the thread will just continue from there without actually leaving the method. 
We are aware. We already sent them a warning regarding future submissions. (They are only getting this bit of leniency because not all of their submissions are PVS Studio based.)
I've found the same. To adapt a quote, coding challenges are the worst way to determine a candidate's worth, except for all the others. We do, however, put them in front of a laptop with VS/R#, so it should be an accurate test of day to day ability. It would be great to give the candidate a real-world user story or bug to fix, but those often require too much contextual information and wouldn't be able to be finished within a reasonable time (~1hr.) Ultimately, I'm looking for someone that can code. Asking them to implement a trivial problem in code in reasonable time shouldn't be an issue.
&gt; just use a bool to check if you have subscribed or not This is what I haven't been able to do. How is this done? How do I find out if this object is subscribed or not?
You could try removing the callback you are about to add before adding it. The remove call will silently fail if that callback does not exist.
&gt; If you have a better idea of how to gauge someone's problem solving skills during an interview Your organization is kidding itself if it believes that. That's not what these questions measure. What they measure is: (a) Has the interviewee heard some variation on this problem before (b) Did the interviewee prepare by reviewing and practicing these types of questions (c) Does the interviewee care enough to do a little research, or are they just winging it Behavioral questions are, of course, worse. That part I agree with. 
Give people a description of a reasonably simple task and ask them to solve it and send you back what they came up with. You know. Like a normal developer works. 
So how do *you* measure problem solving skills in an interview?
One thing, that I personally prefer is the same whiteboard test but on a laptop. We all know that we are handicapped without Visual Studio. So, why not let a developer use it? I would love to give the test on a laptop, with the laptop connected to a projector. This way everyone can see my process, and yet I am allowed to use the tool I need to perform my job.
This doesn't tell us: * How you solved the problem * What was your thought process as you were solving it * What steps did you go through while solving it * How well you collaborate with your peers There's more going on here than "Can you solve this problem?"
yep, understood!
Great to see you sticking with it. I'll likely contribute at some point but it's down the list for me. So far a great start and a welcome change from bare tail.
Thanks. There are some many more features to come but I have been so busy with I will give myself a couple weeks off. Any contributions would be welcome. Also I will write a blog series about how Rx.Net made it a pleasure to develop
I had both installed for a couple of weeks and didn't notice any issues. However, I didn't do a lot of dev work - I'm not a professional developer, just a hobbyist. So keep that in mind. My programs are mostly MVC websites, small console apps, and a couple of WPF apps. Everything worked. It didn't break instantly, is what I can tell you :)
Since they have been releasing VS.NET each version has been able to run with others installed (thankfully) I am running Win10 64bit, with 2013 and 2015 without issue
I currently have VS2010, 2013, and 2015 all installed on the same machine with 0 issues. This is on Win7 btw. 
I responded to someone else, but we have had good results giving them a coding test that they can sit down and complete.
Oh my bad. So if not task, who decides this? I was thinking of Task.Run. But I think I see what you mean. I could just create a new thread and run that asynchronously as a Task. I only recently learned about tasks and never really bothered with threads or threadpools beyond what I learned from intro into Tasks. Is there any situation where I should use actual threads/pool over simply calling some form of Task? 
A couple more good sources for "whiteboard" style questions: hackerrank and codility. The latter has fewer questions and is... divisive within the greater software engineering community. There's one more that I can't remember right now and I'd search for if I wasn't on mobile, but it shouldn't be too hard to find, and HR provides more than enough questions to get you started.
At my company, we give candidates a problem to solve at their home before we bring them in for an interview. We give them a day or so to complete it and it gives us a good look at what their code looks like. We feel like it gives us a more real world example of their capabilities because they can essentially use any resource they want. You would be surprised at how many word and pdf documents we get even though we make it clear that we are a Microsoft shop. 
Does anyone tell the truth on those questions?
Just started learning how to program with C# what does Parallel.ForEach() do? Thank you
yep thanks for that I think you pointed me in the right direction as I found a library for OpenGl which I am going to try and delve into now and if I become comfortable with that I may go onto using c++ and going deeper into the subject. Thanks for your comment:)
Personally? You can talk to HR. As an engineer, I want to see some action. I need to know that, if we hire you, you're not going to be the hoser that I have to explain how to index into arrays in JavaScript *multiple times* (yes, that really happened). This is doubly so if the problem is as simple as is given: Func&lt;IEnumerable&lt;char&gt;, IEnumerable&lt;char&gt;, bool&gt; compare = (val1, val2) =&gt; val1.Count() == val2.Count() &amp;&amp; Enumerable.Range(0, val1.Count()).All(i =&gt; val1.ElementAt(i) == val2.ElementAt(i)); bool isAnagram = compare(string1, string1.Reverse()); bool isPalindrome = compare(string1.OrderBy(c =&gt; c), string2.OrderBy(c =&gt; c)); The real problem with things like this is that there's often a "trick". If you don't realize right away that you can sort two char arrays and compare to make an anagram flag, you're going to be all over the place. There are ways to work with that (interviewee: think out loud; interviewer: drop hints), but better to stick to things more focused on programming.
&gt; You would be surprised at how many word and pdf documents we get even though we make it clear that we are a Microsoft shop. I am confused by this. Explain? Wouldn't you get word and pdf docs because you make it clear you are a Microsoft shop? 
Really? You never use a white board while talking with colleagues to work through a troublesome algorithm, flow chart a change in program flow or chart out a class diagram? While I admit that actual code/pseudo code on the whiteboard is rare, I find whiteboards to be invaluable tools when communicating with my team members.
I do whiteboard to collaborate on high-level designs. I never write anything that remotely looks like code on a whiteboard. I haven't since college. If it's code, it's either dealt with via code review or informal pair programming (hovering over a shoulder and discussing things).
You need to learn how to use Direct3D and/or OpenGL directly. This will take some time (you should buy a Direct3D book and an OpenGL book). Graphics is simply only part of a game engine, adding audio, input and windowing support is also something that needs to be done. Personally at your stage I would use something like MonoGame/XNA first. Once your comfortable making real-time games with those engines/frameworks then maybe learn about the separate software API's which you will implement for your engine with before you start working on the engine. This could include: OpenAL, XAudio2, OpenGL 3.3, Direct3D 11.0, Win32 and GLFW (good cross-plat OpenGL library, you'd need to natively interop with it from within C# though). It took me like ~7 months to complete my 2D engine from scratch in C#.
They are until you are on the other side of one. Then it's just an awesome hour of basically being the big dick in the room, and watching the "visionary full stack developer" attempt to draw curly braces. A welcome diversion, so much so that when the HR manager comes and says "do we really need to do these whiteboard interviews?" You say "they give us an important perspective on how the candidate does under pressure."
Just, FYI - google does them.
The problem with giving them VS is that you'll entertain candidates that write with every language under the sun. If all you have is VS, then .NET devs are given an unfair advantage. But I would agree that just giving them something like Notepad++ or Sublime would be good. It takes less time, allows for easy reorganizing of lines in functions, makes it easier to read for the interviewer, save for reference in feedback, etc... Whiteboards don't make any of that easy. 
your question is vague... there are several ways to do this. what options do you have access to? do you have access to a folder location? do you have access to a database?
I run multiple versions on my home computer, and haven't ran into any issues.
can you elaborate or point me to a good reference?
Any interview candidate that doesn't know where to place curly braces should get the boot quickly, regardless of whiteboard or IDE format. (Good) Interviewers aren't looking to be syntax Nazis in that sense. They aren't looking for "under pressure" skills - interviews create artificial pressure. They're looking for problem-solving instincts, and developers that can get shit done. I do agree that the tests should take place in a preferred IDE, but you can definitely predict a developer's talent using a simple whiteboard test.
That is one issue. You claimed to have found 20 bugs, so you should create 20 issues. Instead you try to utilize the Roslyn Github repository to promote your tool. A very low and pathetic move. With practices like this I'm not interested at all to even take a look at the (otherwise interesting sounding) tool. I can't support practices like this.
Hey Roland, It would be great if you could participate in this sub-reddit besides self-promotion. Nearly all of your posts are for the sake of promoting yourself. While it seems like a useful tool, it is not very nice to use this as your cheap marketing platform.
Fair enough. I figured since we are in the csharp subreddit, most people here would be .Net related. 
Pathetic excuses. It would take not even 30 minutes. Especially the text of your issue shows that your intention is self-promotion. That is very disrespectful towards the Roslyn team.
I would expect a company like Google to have tough interviews. A run-of-the-mill corporate IT department interview shouldn't put developers though that.
I accept your point
I'm guessing you're looking for serialization
Of course not. VS would only be offered to candidates who apply for a .NET position. I am sure the same principal can be applied to any IDE as long as the company uses a specific IDE for the target position. 
Have your tool create the bug report text?
Version 0,5? Think you've accidentally a punctuation.
No issues installing both. If you have SSMS installed that uses VS 2010 Shell so your running 2 versions anyway
Serialization is the way to go indeed. Xml serialization: https://msdn.microsoft.com/en-us/library/182eeyhh(v=vs.110).aspx Json serialization: https://msdn.microsoft.com/en-us/library/bb410770(v=vs.110).aspx It is possible to do non text serializations too. For example google proto-buf: https://github.com/mgravell/protobuf-net 
I'm running all versions of 2013 express and 2015 community and 2010 with no issues whatsoever
The safer route is to assume that WPF will throw curve balls at you which will delay your project until beyond the due date. IMO: structure the application so that the core of it is a simple class library, and have WinForms interact with that library. Once you have it working save it off and replace the WinForms project with WPF to see what you can do with it as a bonus. That said, you always want to be pushing your boundaries and comfort zone, so it is a good idea to learn WPF at some point, just maybe not for a project on a deadline.
thanks a lot. this is exactly what i was looking for.
But the M property of SomeOtherClass is not the string _mine_. It is the instance _mine_ of type MyClass, that has the properties _A_, _B,_ and _C_ of types _string_, _int_ and _SomeOtherClass_ respectively. I am not sure your sample xml serialization would be meaningful. Note that MyClass has a property of type SomeOtherClass and SomeOtherClass has a property of type MyClass. Note that I have made two particular instances that reference each other. How do you represent them in your file?
nobody should ever use WinForms these days... what a mess. Once you got your head around WPF you will never look back. Just try it (and use MVVM otherwise it does not make any sense).
Yes, of course. I have added the link to our bug report to the repo issue comment.
Yes. In learning WPF, you will learn three important concepts that will take you into the Universal App future: * XAML * data binding * the Model / View / View Model (MVVM) design pattern 
learn c# like a true bro. 
After a bit of searching, this seems like the best approach even though it does seem a bit wonky. You would think a subscribing object could check to see if it has already subscribed to an event but appears that it can't. 
I have had both installed for six months with zero issues. Win7 x64, vs2013 and vs2015 community. As someone else said I'm just a hobbyist but I do have vc# in 2015, VC++ in 2015, Xna extensions in 2013 and 2015, unity extensions in 2015 (Very nice they are too..) and the dx sdk and various other things. No problems. 
My team's current interview process involves a laptop and a question or two that are given ahead of time. The questions are done in JavaScript, C#, Ruby, Python, or Java. The candidate chooses. We have an interview laptop with a good set of tools and the questions setup. Before hand we put their solution into a git repository with enough boilerplate to get it loaded into their IDE of choice. First thing we do is have them pull down their repository and load it into their IDE. If they don't know how to do those things; we walk them through it and teach them. However they do all the driving, we watch. If they didn't solve the problem we work together through it. If they did solve the problem we have them write unit tests, improve their answer, etc. At all points it is a team effort and convey that we are working with them to solve a problem. During this whole process we have a set of rubrics to score against on different parts. The point of the rubric is to obtain a quantifiable set of their performance that we can use to rank against other employees; ones we have hired and ones we have fired. The rubrics have 5 or so levels of fidelity per topic we are interested in that range from "Didn't get it" to "Heard it once and got it" as well as to "Solved X alone" to "Partially solved X with help" to "Unable to solve X". We are generally looking for things that indicate that the candidate can clearly and actively contribute in a technical discussion. That they can interpret technical directions and articulate when those directions aren't clear or where misunderstandings are. Its great to find people who can program, but the largest part of a developer's day on my team is spent communicating and making decisions. We can't sustain developers who only work solo or can't communicate effectively. This process tell us definitively both. It also give us an idea of what kind of worker they are. After or before, depending on schedules, we still go through and talk to them about their experiences. Who they are, where they are from, etc. We mainly use this a gauge to filter out unhealthy lifestyles, poor work-life choices, etc. We have learned from two different hires that ignoring social warning bells is dangerous. The two candidates we have hired while ignoring those have both been reoccurring work-no-shows. They were both reasonably talented engineers, but getting them to consistently work was a problem. After that, it is level dependent. If we are hiring an entry level developer; this might end the interview. There is no point in trying to discuss technology specifics, advanced patters, or the intricacies of developing high-availability and distributed applications with recent graduates. Those kinds of questions would be reserved for Seniors and Architects. We are generally looking for people at those levels who are just as talented as our current team members. If we think they are below that standard, we offer them a lower position or not at all. Once a candidate is hired, they are a 6 month probation period where they have a list of things they have to do and learn that are specifically related to our project. It is self driven and if they don't complete it they are fired. We do compensate for death/sickness/etc and the work is planned into their schedule. 
Hah. Thus by internet rules my point is now invalid. That's what I get for being quick.
&gt; C# is a multi platform language Uhm no, it isn't. Running a program with WINE does not count. 
&gt;pass a null, exception &gt;pass empty string, it's a palindrome &gt;pass string with first letter capitalized, it's not a palidrome "as an engineer"
Which stuff in particular? I did call out right at the top that the commands will be replaced by `dotnet`, but that the concepts should remain pretty similar. Is much of the entry point logic itself changing do you know?
It's likely vote bots. The video itself is complete trash.
Uh yes it is. Mono and especially .NET Core are making C# more multi-platform than ever. The video is still complete trash though. 
Wiring xml is still a kinda handy thing to know
I see your point :). I'm not against writing code, I'm against using whiteboards to code.
Okay thanks. Let me put a note in there.
Wat?
Fair enough. I wouldn't want to use an IDE, as it is going to be biased to a language and try to enforce syntax. I'm not going to turn down what looks like an all star dev to my .NET team because all his experience is in Java. I suppose a notepad or notepad++ window would work. I could save the answers and typing is often faster than handwriting. How would you prefer to see it take place?
Fun solution, but at least on my interviews they told me to solve the problem with the basics (no lambda, linq, built-in methods etc). That's something that can make it harder (but not always). 
There are a bunch of sites like hackerrank. Here are a few I have bookmarked: * [LeetCode OJ](https://leetcode.com) * [Geeks Quiz](http://geeksquiz.com) * [Code Wars](http://www.codewars.com) * [exercism.io](http://exercism.io) * [Geeks for Geeks](http://www.geeksforgeeks.org) - tutorials / samples instead of quizzes Of those, I prefer LeetCode because the others require that you either read input from the console or a file. With LeetCode, they give you the method syntax and the input is passed as a parameter. Plus, they benchmark your solution versus the other submissions.
yeah, a simple notepad could work. Or jsfiddle/codepen for JS stuff, or just the chrome dev console. I don't have much experience with interviews, so I didn't realize companies use whiteboard to see if someone is familiar in a language. I thought they only use it for problem solving/pseudocode to see how they think. That's why I said my first comment :P
These are supposed to be code samples of a programming problem that we send the candidate. Therefore, we expect source and header files (we work in C++) and hopefully a project file but we are fine with a candidate giving us any build system (make, cake, etc). 
Thinking this through, it looks like you have a process that: 1. gets the first page 2. figures out how many pages there are 3. starts a task to process the data on the first page 4. for each page after the first, get the page and start a task to process the data 5. when all pages are parsed get the data, aggregate and write it to a file I would strongly bet that `ProcessHtmlTable` is awfully fast compared to `LoadHtml`. Perhaps a design that matches the above numbered list better would help. If you refactor so that you were not passing `this` around implicitly (make all that processing code static and pass in the variables necessary) you could write it something like this: static Tuple&lt;int, List&lt;DataDetails&gt;&gt; LoadFirstPage(string url) { var firstPage = new HtmlDocument(); firstPage.LoadHtml(GetWebData(url, 1)); var pageCount = CalculateTotalPageCount(firstPage); return Tuple.Create(pageCount, ProcessHtmlTable(firstPage)); } static List&lt;DataDetails&gt; LoadPage(string url, int pageNum) { var page = new HtmlDocument(); page.LoadHtml(GetWebData(url, pageNum)); return ProcessHtmlTable(page); } ... var firstPageContents = LoadFirstPage(...); List&lt;DataDetails&gt;[] results = new List&lt;DataDetails&gt;[firstPageContents.Item1]; results[0] = firstPageContents.Item2; Parallel.For(2, firstPageContents.Item1, pagenum =&gt; { results[pagenum - 1] = LoadPage(...); }); //process results
To add on top of the already been made comments. You should check out the [Dependency Inversion Principle](http://www.oodesign.com/design-principles.html). It's one of the SOLID principles used at programming. By making your code more abstract (by using interfaces and polymorphism) you are making your code much easier to maintain later on. If you are new to programming, it couldn't hurt to read the design patterns and the SOLID principles. Basicly they're solutions to common programming problems. 
&gt; "SomeOtherClass" then the "SomeOtherClass" has a property of type "MyClass" that is why i think it is weird. also the compiler can not serialize this. but if you change the type of the property in "SomeOtherClass" to anything it will be ok. It is neither pointless, nor is it weird. Adding to that, neither is it uncommon as there is nothing that prevents your classes from referencing each other either way which could lead to circular references, not necessarily A to B and B to A, but also on deeper levels like A to, B to C, and C to A. I have only wanted to make sure you are aware that there are difficulties, though it is not impossible, if such a scenario would have applied to your classes. That is the reason why I have asked whether you believe you may be having such a situation, and it seems I have made you aware of such difficulties now.
K guys seriously, I didnt Vote bot, but yea i admit the video is trash, I'm just trying to make video's on my spare time, so all of my video's have little scripts involved, and I'm recording using my shitty head set. :)
Thanks for sharing, nice blog posts by the way.
Ok, this video was instantly discredited within the first 2 seconds. I shut it off before any of the actual content was spoken. This guy is making a joke right? 
That's pretty spot on. Just to clarify--when I'm declaring webHtml.LoadHtml(GetWebData(this)); I really mean string s = GetWebData(this); ///this is a method in my abstract base class that all subclasses use for webclient. htmlWeb.Load(s); //this is a method from htmlagilitypack that makes quering htmlnodes easy with linq. Where exactly are you expecting the optimization in this whole operation if I do it as you showed? Is it the static method use over an instance method? 
True, although this might be changing with the Perspex project. Also Xamarin has its own Xaml implementation.
We have only a list of bugs. If you open this list in PVS-Studio embedded in Visual Studio, you will be able to jump to the code with warnings and review it.
Have 2010, 2012, 2013 and 2015 versions on one machine. All of them works fine.
Perhaps you might be able to disable lazy loading for the population of your combo box to only load the parts of the data you actually need for population (maybe just a name and an ID field for example), and then if a single record is selected then that one full object can be retrieved separately.
And an easy to circumvent solution.
see my above comment.
Yes, this is a good point. Without obfuscation it's even easier. Anybody with 5 minutes of time and a decompiler can crack this. I was trying to invoke a discussion rather than just comments stating it was easy to crack without any basis. Even with keeping everything server side, there's always going to be a point where the client has to check and enable or disable features and that's where you open yourself up to cracks. However, with obfuscation and assembly signing it would make it more difficult to do. At some point you have to be satisfied with stopping most cracks because there's no silver bullet to stop all. Especially if you don't want to be super annoying to your users.
I recently open-sourced a lightweight library that allows you to do SPA quicker with minimal learning curve. It's based on MVVM pattern over SignalR that eliminates the need to write RESTful APIs - communication is done through automated, declarative binding between HTML view and .NET view model. I have implemented many close to real-world app examples, it could be worth your while - check them out at this website: http://dotnetify.net/index Github: https://github.com/dsuryd/dotNetify CodeProject article explaining the design: http://www.codeproject.com/Tips/1063346/Real-Time-Web-App-Made-Simple-with-MVVM-Pattern-ov
Signing validates the source: "as a consumer I can be nearly 100% sure this software is from a trusted source" you can remove the certificate and just run any app unsigned. 
I use a signed xml file and check it against the assembly as well. They could probably compile it out though. Can share details of needed. 
I might sound repetitive, but i am in a similar situation but have a bit more time. I have to send in my final project until the middle of june, and the project is a mini trade card game which will use clients and servers. I have been using windows forms for a while and i feel pretty comfortable with it. I usually use photoshop side by side with VS when I'm building something and improvise when it comes to creating effects or simple animations. I clearly want to learn WPF but I'm not sure it's the right time right now (as i still have 6 months of studies where i have to do all sort of stuff that does not involve C# at all). I wish i woke up tomorow with nothing to do so i can just focus on my target but that ll come. My question is how urgent it is for me to learn WPF? Will i be able to learn it while working in the .net domain or is it so necessarry that i would need to find a job that involves working with different technologies at first until i get the hang of WPF? In other words, should I do my best at learning WPF BEFORE i graduate, even if i might be pressured by time due to other things needed to be done for classes, or should i just become familiar with it for the moment and start seriously digging into it after i'm done with college. Also, i just came across this subreddit. Is this a good place to share work and ask for ideas/opinions while working on personal projects until i graduate in june?
If all requests are made via a server, the servers would never allow a feature to be checked and verified client side, well in theory but people fuck up all the time :/
Don't do this.
Requiring an extra step regardless if it's your favorite kiddie hacker tool or not, it's a bit harder than just cracking it open and looking around with a decompiler. I didn't mean it was fool proof or even a good idea. All these methods just keep the honest guy out.
I am ios devloper and using macbook pro. I found it very much useful though you can go through this list . http://www.theidlecoder.com/2015/04/top-best-laptops-for-programming-2015.html
The licensing solution seems to be good. The hacker protection isn't part of this project, which is absolutely fine. There are enough tools for this purpose. BTW: A good combination to use is [Portable.Licensing](http://dev.nauck-it.de/projects/portable-licensing) and [Partial.Key.Verification](https://github.com/cuda/Partial-Key-Verification). The main idea here is to use the Portable.Licensing library to create the license file and to use the partial key verification to verify hardware component changes. The only thing required to do is the creation of key components that can be verified individually, which can be done by creating crc32 values for all interesting components (hardware parts). EDIT: Yes, I know, every kind of copy protection can be circumvented, but that's not the point. The point is to increase the difficulty to do so. My take on this is: When someone made such a (sometimes huge) effort to remove the copy protection, then he definitely earns my respect. Other than that: There are many users who are willing to buy a license, when they don't find a workaround within 5 minutes.
Phoning home is fine, better yet is a hosted license server, though that would obviously depend on your market. More to the point though you should always include some way to push licensing configuration out with the application itself, silently, or enable you to manage it centrally some how.
Delegate 
Yes, it's for a game and needs to be fast...at the moment i just write it to a file and it's ok, I've never used serialisation so I was wondering....thanks for the answer.
Google "C# Operator Overloading"
Thanks!
Why not create a custom class akin to a vector, hide the values and use a Add() method?
I don't know how helpful this will be, but as homework for university we had to write classes for n-dimensional matrices and vectors. Here is the vector class if you need it: http://pastebin.com/MpNUWgCD. It includes operator overloading as well.
Sure, my example is from a class that handle parsing of an array of string. It use the factory because the array can contain different tags so it call on the factory to get the special parser it need. Here is a sample of the code (removed some null checks to make the code smaller). We can see that testCaseMetaDataParser.ParseScriptLine and dataSetParser.GetDataSets was methods in this class before that I extracted to new classes. And testCaseStepParserFactory.GetTestCaseStepParser was a static factory before but I changed it to a regular class so I can mock it out. public class TestCaseScriptParser : ITestCaseScriptParser { private readonly IToolbox toolbox; private readonly ITestCaseStepParserFactory testCaseStepParserFactory; private readonly IDataSetParser dataSetParser; private readonly ITestCaseMetaDataParser testCaseMetaDataParser; public TestCaseScriptParser(IToolbox toolbox, ITestCaseStepParserFactory testCaseStepParserFactory, IDataSetParser dataSetParser, ITestCaseMetaDataParser testCaseMetaDataParser) { this.toolbox = toolbox; this.testCaseStepParserFactory = testCaseStepParserFactory; this.dataSetParser = dataSetParser; this.testCaseMetaDataParser = testCaseMetaDataParser; } public TestCase ParseScript(string[] scriptLines) { TestCaseMetaData metaData = testCaseMetaDataParser.ParseScriptLine(scriptLines.First()); List&lt;DataSetTempContainer&gt; dataSetContainers = dataSetParser.GetDataSets(metaData.TestCaseId, scriptLines); List&lt;TestCaseStep&gt; testCaseSteps = GetTestCaseSteps(scriptLines, dataSetContainers); return new TestCase(metaData.TestCaseId, metaData.TestCaseName, testCaseSteps, dataSetContainers.Select(d =&gt; d.DataSetInfo).ToList()); } private List&lt;TestCaseStep&gt; GetTestCaseSteps(string[] scriptLines, List&lt;DataSetTempContainer&gt; dataSetContainers) { var testCaseSteps = new List&lt;TestCaseStep&gt;(); for (int n = 1; n &lt; scriptLines.Length; n++) { if (scriptLines[n] == TestCaseScriptTokens.EndToken) break; TestCaseStepParser parser = testCaseStepParserFactory.GetTestCaseStepParser(scriptLines[n], toolbox); testCaseSteps.Add(parser.ParseScriptLine(n, scriptLines[n], dataSetContainers)); } return testCaseSteps; } } 
Do eet! Do eet nao!
Create another factory that will create SomeClass with the appropriate arguments. You may even need two, one that is SomeClassDefaultFactory.Create() or SomeClassTestFactory.Create() for unit testing. Now it is easy to use, but has separated the object graph creation from the other logic. 
Are you ever going to use an object of type `ITestCaseMetaDataParser` outside of this class? If not, you've swung too far into the "do one thing" area. For example, you wouldn't write a calculator like this: ``` public class Calculator : IAdder, ISubtractor, IMultiplier, IDivider ``` It seems to me that parsing your meta data is an integral part of parsing your test case scripts, which is what your class does.
I touched on this in a comment below, but I'll expand upon it here. The _S_ in _SOLID_ stands for "Single Responsibility", but you can definitely take it too far. A calculator's Single Responsibility is to do math. Your example's Single Responsibility appears to be "parse test case scripts". Likewise, the _I_ in _SOLID_ can be taken too far, as well. From the [Wikipedia entry](https://en.wikipedia.org/wiki/SOLID_\(object-oriented_design\)): &gt; “many client-specific interfaces are better than one general-purpose interface.” This does not mean that every public method on your concrete class should come from a different interface. Nor does it mean that internal, private methods that should never see the light of day should be interfaces, either. Unless you have an explicit reason for allowing the replacing of some piece of functionality, then you shouldn't complicate your code by moving it out into a separate class. It seems you want to apply good testing fundamentals to your code, which is laudable, but don't complicate your code just to include testability of internal components. Tests should exercise _public_ methods of your class; everything else is just an implementation detail. If you expose something as public (and even if it just exists as a constructor parameter, it is public), then someone may think that you are presenting it _to them_ for _them_ to use, when really you just wanted to be able to test some internal component that is just an implementation detail.
2nded, if you want to play with actor, either roll your own (TPL can make a working actor pattern in a pinch) or use Akka. MS has an actor pattern framework but it requires Azure to work. 
I'd like something with an API that can be accessed using idiomatic C#. F# APIs tend to use things like monads, higher-order functions, immutable values, etc. The usefulness of C#/F# interop is kind of oversold. It's an engineering wonder, and it really does work, but you just don't write idiomatic C# and F# APIs the same way.
Holy shit I am *totally* using Orleans on my next project. I'd been reading about it but I didn't process that it was for C#.
You're missing the letters of SOLID for Inversion of Control (aka dependency injection). If you were using a decent DI library like SimpleInjector or DryIoc, this wouldn't be an issue. You're correct that your new factoring of the code still has issues. The user of SomeClass shouldn't need to know the details about how to build a SomeClass. This will almost always cause a violation of the single responsibility principle, since the class that's using SomeClass likely has multiple responsibilities now (when you add in building a SomeClass and all of its dependencies). Proper use of DI removes all of these issues, since a user of SomeClass no longer needs to know how to build a SomeClass. It just requests one in its constructor and lets the container work out how to fulfill the dependency.
Huh, you're right, now it's all NuGet based. I could have sworn you had to install something to get it to run, although - admittedly - I checked out Orleans right after it was announced/released. A lot might have changed in the meantime. Anyway, I guess that's something I'll check out in the next few days :)
Without better understanding the problem you're trying to solve, I can't say I see anything in this code that I'd flag during a review. 4 constructor params, while potentially excessive, seems justifiable in this case. Your functions are small and readable. The metadata &amp; dataset parsers decouple the test case parser from format of the source data. The factory gives open/closed stability for adding new token types. Seems reasonable to me.
&gt; I saw your comment below but would that not break the single responsibility principle in this case? No - your class's purpose is to parse a test case script. The fact that the test case script data is segmented doesn't matter. Unless your calling logic has a reason to parse _just_ the metadata, or _just_ one test case step, then they are only useful when contained as implementation details. In fact, even if your calling logic needed something in the metadata, I would still argue for leaving it as part of your `TestCaseScriptParser`, and having that expose properties that represent data within the parsed script. --As an aside, I often view "verb" class names as being a warning sign. If you changed the class to be an immutable `TestCaseScript` that read the data for a single test case script upon construction, it would likely be easier to use and think about conceptually.
At a glance, I would guess SomeClass could be decomposed. You want to avoid excessive dependencies on each class, to avoid this exact situation. Could the work done by SomeClass be done by a couple of classes in separate steps? 
I've tried a few things I found through Google and so far since the navigationcachemode is set once the page is loaded I can only get one of those options of the two listed to work within a given run time.
I've been building a project in Service Fabric for the last month. I love it. It seems to be the commercial successor to Project Orleans. As of now, it's released as a preview. You can install a cluster of machines on Azure pretty easily. It does not appear to be open source. And the internals are C++. Plans are to release it for local installation as well. It has all the neat stuff. Placement constraints, so services will only be placed on nodes that support them. Health reporting and monitoring. Scaling support, so services will spawn new instances elsewhere. The Actor model they've built on top of it has replication support for class-local storage. Your actors have a companion C# class with DataContract decoration. And they get persisted on the machine, instead of any sort of centralized storage. But, they get replicated to replica's in the cluster. I think it's wonderful. It needs some higher level constructs and stuff. But, it's a great starting base. What i like about it is that it's NOT excluslively C#. It's a generic purpose service framework. Your services can be implemented in any process that can be launched. And the Fabric is responsible for running and watching these services across the node. Along with a naming framework so that they can be discovered at runtime. For instance, you can have one service that runs node.exe. And another bunch of C# actors. And the C# actors can discover the endpoint of the node service. It just happens that they ALSO built an Actor framework on top of it.
&gt; Tests should exercise public methods of your class; everything else is just an implementation detail. This is actually where it gets tricky... when you say 'everything else is just an implementation detail' -- that's a misleading comment. If you're unit testing the implementation, then that statement is flat out incorrect, and since you don't unit test abstract classes (or interfaces) because you cant, I'm just going to have to say that it's flat out incorrect. Where this would be correct is in cases where that method calls an abstract dependency (e.g. injected) -- that is an implementation detail that a unit test may or may not need to know about. So where it gets tricky is when you need to test the private behavior of a public method... &amp;nbsp; If you're testing a public method that has all of it's logic contained within the method, then that is simple. Toss it some input, and verify the output. However if the method that you are testing has conditional logic like "If this, then run method A, else run method B" then you may want to test that those conditions are being hit, particularly if the output will not be indicative of a different condition. For example, if method B has a side effect not shown in the output. &amp;nbsp; The easy remark is that if you follow SRP, then each public method should be testable as a unit, but in reality, that isn't necessarily practical, especially when that method acts as a control method as I described above.
What you're describing is white box testing. Yes, if your public method has branching statements internally, then you should write (at minimum) two tests to exercise both paths. However, making those two paths testable on their own (by introducing new public methods) is a bad idea. In this hypothetical situation, they are implementation details. In theory, someone could come along and replace either of them with a different --and yet totally valid-- implementation. The original method is the only one that still needs to work, and if that internal method had been exposed, suddenly you need to worry about code that mistakenly thought it could rely on it.
The "Inversion of Control" does not mean to jump in the deep end and use a container (which doesn't solve the problems you describe, btw, it just hides them). It means to always inject your current unit's dependencies and not to create them in-line. I.e. to make dependencies explicit and part of the interface, either by the constructor or by the method parameters.
Yes Service Fabric is how to do actors in .NET now. You can also host Service Fabric locally, you don't *need* Azure. But i'd definitely recommend Azure for it.
&gt; Yes Service Fabric is how to do actors in .NET now. It is one way to do actors on .NET now, and a fairly awesome one at that. Still, sometimes you don't need service fabric. Akka.NET is well-tested and stable.
&gt; It just happens that they ALSO built an Actor framework on top of it. So far, it has been quite performant and reliable. I really like being able to increment version numbers in a manifest and deploy new packages without service interruptions. Also, the Service Fabric actor model is quite easy to use with all of the Task&lt;T&gt; methods and the data contract serialization. 
I'm going pure vanilla
IP protection is acheived with lawyers not code.
Just loop over all objects and update them as necessary (do physics etc...), then when drawing loop over all the objects and draw what only what is visible on the screen. Using a List&lt;T&gt; of objects will suffice fine. This can be inefficient if there are many objects, google "spatial partitioning" to find more efficient approaches. You could take a look at how MonoGame's loop works... https://github.com/mono/MonoGame/blob/develop/MonoGame.Framework/Game.cs#L426
Use a CancellationToken. It's clean.
Use an async Task with a CancellationTokenSource. You should recreate them every time anyway, they're not reusable after the token is cancelled.
I agree...how do you have a game loop without the items needed to loop... the game loop IS such things. 
Curiously, interfaces *can* in fact have static methods in the CLI but this is not supported in C#. They would probably not behave like most people would expect either: it would just be a single static method with implementation, directly on the interface (not overridable).
Why not use a background worker with progress reporting and make it cancelable?
Interesting, I tried to use Orleans about 14 months ago. At that point it was non-functional without having a significant portion of at least the Azure-pack running locally. You didn't need the cloud but you needed the infrastructure. Has that changed now?
This MUST have changed, I tried it over a year ago and you needed azure components installed to make the API work which failed for the portable server I wanted to make. If its all now "self-contained" to at least nuget without extra installs then I may take a second look. 
http://gameprogrammingpatterns.com/game-loop.html it's in C++ but it should still give you an idea of how it's handled.
Task.Delay is going to be your cleanest approach. If there is an enormous amount of tasks that you are delaying you might want to just setup some sort of service to bundle up these actions at given intervals that would be running on its own thread.
A smart developer will maintain a reference to the same controller instance(s) and inject them as dependencies to the "thirty click handlers" just the same as any other kind of dependency. The handlers themselves have no responsibility to instantiate controllers, thus they are dependent upon a controller interface and this imaginary scenario of them creating the controller is moot. E: note that a container is a worthy solution, it's just not what is meant by inversion of control in SOLID.
Asking us is not exactly researching it. There are exhaustive articles already written about it that you can find by just typing a few words into google that would be a lot more informative than anyone here is going to be on this subject.
I signed up for LVS.net when they had like a half off deal going, learned a ton there. His explanations can be quite winded but the videos sure are designed for beginners-to-intermediate level.
From the horse's mouth, and you don't even have to pay! http://www.asp.net/mvc 
Take a look at hangfire.io
The problem with this type of stuff is that it is not obvious that ther's an actual bug in any of these. Yes, the code is unclear and wrong. But are there any actual possible and supported code-paths that manifest themselves in actual user-verifiable defect? As recommended in the article, someone needs to trace back each of these calls to see how it's possible to reproduce actual defects and then log those as issues against the appropriate repository. Otherwise code that unnecessarily uses "while" instead of "if" isn't going to matter.
It's worth noting that you can get a free 6 months Pluralsight subscription currently via the Dev Essentials programme: https://www.visualstudio.com/en-us/products/visual-studio-dev-essentials-vs.aspx
Ah, yes, I am using that in a lambda. I will change those to just m! Thanks!
That worked in that I no longer get that error. However it still doesn't like "model". When I do var step = @model.CurrentStep; I get A namespace cannot directly contain members such as fields or methods. When I do var step = @{model.CurrentStep}; I get The name 'model' does not exist in the current context. plus ; expected plus Only assignment, call, increment, decrement, await, and new object expressions can be used as a statement. 
Try putting these tags around it, this is how I do it: &lt;text&gt; var profile_id = @Model.ID; &lt;/text&gt;
Thanks for the comments! I totally agree on the Unit tests, and I should create them before it gets any larger. What do you mean by repositories for EF? If I separate by projects, will I still be able to utilize the Areas/shared layout/user system? I want each service to share the same user auth system and site layout. 
Using EF as an example, repositories for it will abstract away any core interaction between your controller code and the databases. For example, instead of db.Users.GetAll(), you would call _userRepository.GetAll(). You can then make changes to your database interaction code without having to make any changes to your controllers/front-end code. This practice is known as many things, but mostly decoupling. Some people don't agree with having repositories for EF (as they think EF is one big repository) but I find doing it keeps my code clean and uniformed if nothing else. It also makes writing unit tests easier. Similarly, if you were to hash passwords, instead of calling this.HashPassword(myPassword) in your controller (which is tightly coupled and couldn't really be used anywhere else), you'd have a PasswordHashingRepository/PasswordHashingService (injected into your controller) which would have a HashPassword method on. The usage could be like the following: _hashService.HashPassword(myPassword). This would allow you to change the behind the scenes hashing implementation (maybe from WHIRLPOOL TO bcrypt) without the controller even knowing. Yes. Keep anything related to the areas (i.e. controllers, views, configuration) in the areas, but move the models, view models and other bits of code not related to the areas out. This lets you re-use the code in other places and will reduce the amount of duplicate code that you'll inevitably write otherwise. 
The problem is that hardly anyone ever uses them in their job, including the people using them in interviews. They are not a practical way to interview not only for this reason, but also because doing well on them in an interview just means that the applicant has studied them beforehand...it therefore means very little with respect to how well they'll do in the job. I'd rather ask a question regarding a real problem we've faced in the past, with more interest on how the applicant thinks through the problem than whether or not they come up with a viable solution. And I have no problem telling an interviewer that I'd rather them give me this kind of question if they ask me a stock algorithm question.
you might want to start by improving the speed of your website its taking 2 seconds to load on my end. Also I would heed the advice of over complicating your code when it is of so few classes so far. Nothing worse than shoehorning in a bunch of patterns you dont need just because other big projects use them. It will just makes things worse until you really understand where and how to use them.
http://i.imgur.com/cu4e5Y7.png still does it even when cycling through the same page.
Oh, you are talking about the git site. Yea, that's a known issue. I thought you were talking about the live demo.
https://github.com/karan/projects this is good for when you just don't know what project to build next.
In my experience, Rx isn't necessarily easier to debug than an event. What it does make easier (for me at least) is the management of your event. I personally find it much easier to keep track of an IDisposable, and to dispose of it at the proper time.
I see you use this idiom frequently: var userQuery = db.Users.Where(u =&gt; u.Username == username); if (userQuery != null &amp;&amp; userQuery.Any()) The `userQuery != null &amp;&amp; ` can be removed. If `db.Users` isn't null, then `Where()` will always return a non-null value. In fact, you do omit it other places: var foundUser = db.Users.Where(b =&gt; b.Username == model.Username); if (foundUser.Any()) You also have a lot of strings that should be externalized. Page titles, error messages, etc. You should probably at least salt your passwords if you're intent on rolling your own authentication. It doesn't look like there's any client-side validation being done. At least there isn't on the profile page. Your controller actions are responsible for way too much stuff. Look at the Index action on your Profile controller for example. It queries the database, decides that it's an error for the user query to return no results, constructs a ProfileViewModel, knows that users have Blogs and the details of that relationship, and how and what details to take from the Blog and put in the view model. That's a lot of stuff. That Action should probably look something like: // GET: Profile/Profile [AllowAnonymous] public ActionResult Index(string username) { if (string.IsNullOrEmpty(username)) { username = User.Identity.Name; } var user = _userRepo.Get(userName); if (user == null) { ViewBag.Title = "User Does Not Exist - " + Config.Title; ViewBag.Message = "The User does not exist"; return View(new ProfileViewModel{ Error = true }); } return View(user.ToViewModel()); } The repository should return the complete User with blog information already in a usable form. I use DTOs for this and tailor them to a specific use. For the `ToViewModel()` method I use AutoMapper and write an extension method. If you follow a sane pattern with AutoMapper like grouping extension methods for a single DTO together in a class and putting all the related map definitions in a static initializer in that class it's very easy to maintain. Also note that I moved the error check to a guard clause and returned early. That reduces nesting and increases the locality of the error handling. I see lots of things like var blog = db.Blogs.Where(b =&gt; b.UserId == user.UserId); if (blog != null &amp;&amp; blog.Any()) { Blog.Models.Blog foundBlog = blog.First(); model.BlogTitle = foundBlog.Title; model.BlogDescription = foundBlog.Description; } and var userQuery = db.Users.Where(u =&gt; u.Username == username); if (userQuery != null &amp;&amp; userQuery.Any()) { Models.User user = userQuery.First(); Is it expected that there will be multiple blogs with the same UserId or multiple users with the same Username? If not, then don't code like there could be. Use SingleOrDefault and catch the exception if you don't expect multiples (because having multiples when you don't expect them is an exceptional condition): User user; try { user = db.Users.SingleOrDefault(u =&gt; u.Username == username); } catch (InvalidOperationException e) { // Handle it } if (user != null) { ... If you do expect multiples and only care about the first, then make that explicit: var blog = db.Blogs.FirstOrDefault(b =&gt; b.UserId == user.UserId); if (blog != null) { model.BlogTitle = blog.Title; model.BlogDescription = blog.Description; } Those are a few things that jumped out at me.
Thank you for your comments! I didn't realize that about the .Where() clause in EF, I will have to research it some more to get a better understanding. The comments you made about the Controllers Action being too large is good. Another comment in this post also mentioned using repositories which is a great idea. The reason I don't use SingleorDefault is because I still want to detect if it didn't find a result, but allow for the contingency of a user having multiple blogs. Does Default return null? If so, then that would do what I want.
If you are strong with C# and Web API then I would recommend anything regarding working with Azure. Block storage, service bus and service fabric specifically.
You can think of the Where method as working like this. `Users.Where(u =&gt; u.Id == id)` works like: var matchingUsers = new List&lt;User&gt;(); foreach (var user in Users) { if (user.Id == id) matchingUsers.Add(user); } return matchingUsers; Even when there are no users with that id you still get an empty list back. SingleOrDefault will return the default if there is no result, which for complex types is `null`. If there is exactly one matching result you'll get that result. If there is more than one matching result an exception will be raised. `users.SingleOrDefault(u =&gt; u.Id == id)` is equivalent to: User user = null; var matchingUsers = users.Where(u =&gt; u.Id == id); if (matchingUsers.Count &gt; 1) throw new InvalidOperationException("Sequence contains more than one element."); if (matchingUsers.Count &gt; 0) user = matchingUsers.First(); return user; It sounds like you want FirstOrDefault, which will return the default (null) when there are no results but will return the first result if there are any. `users.FirstOrDefault(u =&gt; u.Id == id)` is equivalent to: User user = null; var matchingUsers = users.Where(u =&gt; u.Id == id); if (matchingUsers.Count &gt; 0) user = matchingUsers.First(); return user; 
&gt; var step = @model.CurrentStep; this should work for you. var step = JSON.parse('@JsonConvert.Serialize(model.CurrentStep)');
What /u/ssfcultra said is correct, but I'm interested in why you need to do this. Why not just add to outsideList inside of the loop? If you want outsideLoop to retain its previous contents if GetRandomFollower() is called twice, then just do outsideList.AddRange(insideList) instead of assigning it.
I just wrote a brainfuck interpreter for fun. Brainfuck is a minimalist esoteric programming language with only 8 operator-commands. You can write it for the console (or fancy UI), and it doesn't require advanced concepts. I did it in Swift &amp; XCode, but will port it over to C# for fun.
You might want to visit http://codereview.stackexchange.com/ , but make sure to follow the rules.
That's a great question, and honestly I don't completely know. All I do know is that I enjoy programming. I learned Python and Pygame a while back (to some extent) and really enjoyed solving simple problems...like how to make your dude move and stop when he's supposed to, jumping, etc. I like solving problems and I like computers and using my brain, and I hate my current job, so...I'm open. If I were doing it solely for personal fun, I'd make games, but I'm being realistic and would like to get a new job eventually. I know that's not helpful, but I figured I'd at least be open about it.
Yes
I'm subcontracted, so that's weird to answer. To my direct employer I'm a .NET Developer, to the other I'm a Web Applications Developer. I think on a different form I might have put Software Developer at some point. There are so many titles that describe the same damn job. For job search-related stuff, I always type in .NET That would give you some sample job titles, if that's what you're looking for. .NET Developer is nice and generic though. Also, try looking for a .NET Meetup Group on Meetup.com! Networking is essential.
Cool. .NET Developer sounds like a good job to have. Are you able to work from anywhere or do you have an office? Also, uh, stupid stupid question but can you expand on the whole .NET thing. Bob Tabor mentioned the .NET framework a million times but never really explained what it meant. Is that just all the classes available in C#/visual studio applications, or, I don't know? Thanks
What library do I need for this? I added a using statement for Newtonsoft.Json but the message says "'Newtonsoft.JsonConvert' does not contain a definition for Serialize".
Makes sense. I would like to be able to work remotely when necessary, but I wouldn't have to all the time I guess. I tour in a band here and there and would like to be free to do that whenever, and just work from the road, but obviously that could come later. Thanks again for all your help. I'm motivated now and at least feel like I have some direction. Really appreciate it.
No problem! I was your situation a while back. It sucked. If you ever feel lost again, I'm more than happy to point you in the right direction! :) 
Interesting. I've always seen people say to stay away from iOS. I'll consider it.
Pluralsight has some amazing classes for MVC and the good news is that you can get a free 6 month subscription right now. I think the offer will expire by the end of the year, so you better hurry up and get that subscription. I can't speak from experience about LearnVisualStudio.net, but I've heard some really nice stuff about them too. 
This post as it is, isn't really worthwhile to the /r/csharp readers. It's vagueness means nobody can help you, and I don't think asking people for their time to help you with such vagueness will go anywhere. As such the post has been removed. I suggest you read /r/learnprogramming's guide on asking a good question: https://www.reddit.com/r/learnprogramming/wiki/index#toc_1 Then either make a new post here following those guidelines, and you can try /r/learnprogramming, or if you really want someone to walk you through it, try /r/programmingbuddies.
I didn't have any issues when I first installed VS 2015, but after I did the first update, the razor views on my ASP.NET MVC projects broke down. Reinstalled the VS 2015 and the problem was gone. 
methods can return values. So maybe return the list when you're done with it. Something like this; public partial class Twatter : Form { private List&lt;string&gt; _myFollowers = new List&lt;string&gt;(); // I use it in the constructor // but can be called from any method inside or outside(since method is public) this class. public Twatter() { _myFollowers = GetFollowers(); var randomFollower = GetRandomFollower(myFollowers.ToList()); // do something with randomFollower here... // initialize form code... } public List&lt;string&gt; GetFollowers() { var followers = new List&lt;string&gt;(); foreach(var follower in followers) { var userId = Convert.ToInt64(follower.ToString()); var user = User.GetUserFromId(userId); followers.Add(user.ScreenName); } return followers; } public string GetRandomFollower(List&lt;string&gt; followers) { var random = new Random(); var randomIndex = random.Next(0, followers.Count); return followers[randomIndex]; } } I assume you want to do something like the above. Since you're method is public, and you're asking how to get the list out, i assume you want to be able to find a random person AND populate the list of followers at the same time. Those should probably be separate methods (assuming you want to use the list some where else). Just depends on what you're trying to achieve, but my guess is you don't need those methods to be private. And if you're not needing the _myFollowers list reference anywhere else, you could then combine GetRandomFollower's code and GetFollowers code together. Let me know if you have any questions! 
Thanks! I'll see if my project qualifies for a code review there.
[Same answer /u/AngularBeginner gave you last time](https://www.reddit.com/r/csharp/comments/3ydfwe/trouble_with_a_generic_interface/cycke5w). To call an instance method you need an instance to call it on (an "object reference"). `IDeck` is not an instance, it's a type. Other types can have static methods that don't need an instance, but interfaces cannot.
This is some good advice. I feel like web development jobs are plentiful because everyone thinks mobile is the future. It may be the future...but when is the future coming to present. Desktop apps are still the most powerful and very useful. Some simple projects ideas you might look into, along with other responses here which seem to be very good, may surprise you. Talk to a local business and ask what they wished they could do on the pc. Churches, schools, etc. You'd be dumbfounded by all the paper logs and paper databases people still keep. I've been a programmer all my life, but I technically work as a network engineer type position for my cities social services. When I started they were paper logging every visitor. These logs had to be referenced every day. We handle 2,000+ drop offs a week, that were paper logged. Just imagine the time spent on disputes and research time. 1 simple web application (HTML/CSS Mysql) solved all that. TLDR: Ask businesses what they do, ask what they want, ask what they dream of. 
That's not what he said. `Cards` is an object reference. `IDeck` is not an object reference, it's a type. You can't call an instance method (`Shuffle()`) on a type (`IDeck`). You want to call `Shuffle()` on `this`, but because it's an explicitly implemented interface method, you have to cast `this` to `IDeck` first: ((IDeck)this).Shuffle(Cards);
Future is pretty much here. Cross platform web applications are already hugely important. At my job, outside the IDE and photoshop, we use almost all web based technologies for everything. Our company also sees nearly 40% of users coming from mobile. If anything we are at a 50/50 (or more web sided) with native applications fading away. 
Sweet! Thanks. Can I translate this as: Casting Deck (this) to IDeck and calling shuffle? Because Deck is instantiated, an object reference to it now exists upon which Shuffle may be called?
I remember doing these sorts of things when I first started using reference types. I think it made the most sense because I wasn't quite sure how method signatures worked. Once I understood how reference types worked and then understood method signatures I was on my way. However, before that I am pretty sure that I wrote the same sort of code that is listed above.
If you need to cast an instantiated object, chances are you're doing something on the sinful side. If static type analysis can't figure out that you're working with an object that inherits from IDeck, you're doing something wrong.
No, no assignment. Just a doofus with a compiler. My intent was simply to make Shuffle less accessible to imaginary users. I would like to make it callable for any object that implements IEnumerable, though. That's what I'll play with next.
I'm not sure I understand 'static type analysis'. I thought it was the analysis the compiler does before translating to IL. Is evaluation of casting not a part of this? 
Depends on the behavior you want. Does outside list have other elements that you wish to keep? If so you can use outsideList.AddRange(insideList); in your GetRandomFollower method. Do you want the outsideList to be exactly the same as the insideList while disposing of any previously populated outsideList? Any changes to insideList will be reflected to outsideList as well. Then just assign outsideList to insideList like outsideList = insideList; Is assigning the outside list to the same reference as the inside list not appropriate for your needs but still need outsideList to only have the elements from inside list? For instance your GetRandomFollowers method does more work on insideList after copying, but you need outsideList to be a copy of insideList at a certain point in the method. Then construct a new list with your inside list like outsideList = new List(insideList); There are a lot of ways to accomplish this but you have to determine what you need to actually accomplish. You can also do as suggested elsewhere here and have your method return the inside list and choose how to handle that from the method that calls GetRandomFollower()
WPF all the way
That's some great insight. What kind of industry are you guys in?
Yeah, it was a non-scripted teaching event, so they don't go directly into it. It was also as much a marketing pitch as it is instructional (it seemed like they were trying to nudge people away from Web Forms). But they do cover some important topics. Not just the C# side of things, but how it works. You may find yourself reviewing this video sometime to get the parts you missed. The concepts are just as important as the actual code. :)
I ended up using a normal task. I do not use any async methods so I didn't saw a purpose using them :) Thanks for your suggestion though, sadly there's no async task for enumerating directories.
Doesn't really matter at which language you start learning, as long as it matches your current goals. But in my humble opinion C# is a great choice as it can be used for a lot of things (game development (Unity), Windows applications (either as a console or gui application (please skip WinForms and use a XAML based technology such as WPF or Universal Apps instead)or as a service), cross platform applications (Mono) and web development (ASP.Net (don't use Web Forms anymore but MVC)). /r/learnprogramming and those free to follow university courses you can find on the internet ([at cornell.edu for example](https://www.cs.cornell.edu/courseinfo/ListofCSCourses/)) you can learn pretty much everything. Just keep in mind it can take a long time and takes a lot of patience. I also hope [advent of code](http://adventofcode.com/) stays online as they have some great programming exercises. Especially during the beginning of learning a programming language at your own it can sometimes be difficult to keep using the things you learn in practice. 
Thanks 
You're going to have a lot better luck posting this in /r/learnprogramming. Also, uBlock blocks sourceforge by default, so you might also consider using a different site to host your code. https://gist.github.com/ is a good one. Instead of struggling to make this console application fit into a Winform or WPF application, you might try just following some simple tutorials on the internet on how to build windows, buttons, etc. If you're really amped to get this into a UI, do yourself a favor and have /r/learnprogramming review this code, it could use a lot of clean up and that will make working with it in the future much easier.
Are you using an IDE such as visual studio?
I would watch some instructional videos on Windows Forms. https://www.youtube.com/watch?v=ucRe9Esv1K4 
Java and C# are more similar than they are different and IMO both are easy to learn they just have specific kinks. You almost have feature parity between them so then it just comes down to syntax. I don't expect this to be a popular opinion here, just something I know from having worked extensively in both. ++ on the IntelliJ rec. Eclipse is garbage. 
Bruh... this post is literally so me. I've been browsing Reddit all day for the past 2 days and I REALLY level with you when you said that C# programming is a really pleasurable hobby, I uninstalled Counter Strike:GO and Steam entirely so I can spend more of time coding free of temptation and distraction. This post completely embodied my internal conflict with C# as a beginner trying to make something of myself, this field can sometimes just be a huge grey area for most noobs, I'm glad I read through this and read everyone's responses on this thread, Idk where I would headed if I didn't stumble upon this post. Thank you.
&gt; there is so much horrid, horrid JS code out there as "examples" More than anything, this. I spent 100s on JS books because, with the exception of MDN, the internet is full of lies. At least with books, there is a editing/review process and the people are verifiable experts in the field. Same with PHP: the language lets you make terrible choices, so people make terrible choices and propagate bad (or downright unsecure) code styles. I find c# more complicated, but it's harder to make the bad things happen.
6 MONTHS!! xD thanks dude.
I wouldn't consider VB a scripting language. Its pretty much a general purpose language. Very similar to C# other than syntax changes. VBA, Visual Basics for Applications, I would consider a scripting language. I wouldn't recommend starting there honestly unless you will be using excel (or other MS products).
I was full time developing job websites, moved on to healthcare, and all the while I moonlight building various CRUD and data applications all in web. Current job is pretty old school in its ways, but almost all of our version tracking, scrum boards, email, team management, and shared docs are cloud based. Only visual studio and photoshop are the PC apps we use anymore. 
Yes, I know that. I emphasized the async nature of `Task` in case he wasn't familiar with TPL constructs. Don't be so unnecessarily nitpicky, it makes you come across as that guy everyone hated in your CS classes. You know, the one who always tried to prove how smart he was by calling the professor out when they made a slight, irrelevant mistake or phrased things slightly differently.
The TPL constructs are way easier to use and lead to cleaner code.
Please see my post [here](https://www.reddit.com/r/csharp/comments/3xn6sm/welcome_to_rcsharp_read_this_post_before/).
iOS is a small market with high competition. Web apps run on everything...phones, Mac, Linux, Windows, televisions, rokus, Apple TV, chrome casts etc. It really is the future. I don't see a negative to being a web developer these days. 
I'd take that right out of the GUI and put it into a controller or viewmodel class, and use whichever databinding infrastructure is available to update the UI. If you're not using WPF, it makes this specific type of use-case fairly simple.
When I said "swap it out", I didn't mean "pass in a different implementation". I meant "someone figured out a better algorithm, and replaced the old private method with something new and better.
For me it was extremely hard and I still haven't got the hang of it, but most people who want to learn it seem to have no problem.
Oh, my bad, I should lrn2read. The first two books are great, I've used them as references in the past. The third is probably good or great, considering many of Wiley's books in the past are good. The last is also probably very good, considering Joseph Albahari is the author of LINQPad.
C# isn't hard to learn, as others have said. The tooling is probably one of the best aspects, Visual Studio is a very good IDE. Two things to watch out for as you learn - don't get sucked into the Microsoft world just because it's your first exposure to programming - make sure you also study languages that are more traditionally ran on Linux as well. (I say more traditionally, because almost every major language runs cross-platform). Second, while the coding part of C# is very straightforward, you can get overwhelmed by the library that is .NET and all the various helping hands it provides. Focus on basic programming concepts first, worry about the broader eco-system later. Yes, you will probably write more code doing that, but you'll understand it better, and know when/why you are using a specific part of the library then.
No JavaScript isn't an extremely dirty language. Why do people keep on parroting this nonsense? The problem with JavaScript is that it let's you write stuff however you like and can be extremely powerful if you know what you are doing ... However thisblet's Novices and C# /Java developers (that don't bother learning it properly because they think it "isnt a proper language") write horrific code. Even worse some just try to write c# in js and then wonder why their scoping is fucked. As said in spiderman "With great power comes great responsibility"
&gt; I find c# more complicated, but it's harder to make the bad things happen. You obviously haven't worked with *production* or *enterprise* quality code.
It doesn't reward terrible code, quite the opposite. &gt; You can never truly respect a language that has no respect for its own structure. LOLWHAT? &gt;Its just a lazy Web developer language that needs to stay there. Oh you are one of those "All web developers aren't proper programmers, I am a proper programmer because I write REAL programs" ... Stop being an elistist.
Eclipse was slow last I used it. Slow to start, slow to respond. Big confusing interface. Even a few ms of waiting gets to be horrific when you get working hard on big projects. If they rewrote eclipse in C.... 
IntelliJ feels sexy too. It's one of those experiences where you feel like your software "just works". Hard to describe.
I can completely agree with this post. I recently inherited a WebForms application that I was tasked with improving, in short it would've probably been a simpler solution to just start from scratch again but management wouldn't allow it. So now I'm stuck maintaining something that is awful!
Oh no, where are a my classes!? Waaaah! Come on, JavaScript is only as dirty as the developer is pressed for time, or inexperienced, but prototypical vs classical doesn't necessarily make one language better than another; it's about using the right tool for the right job, and **not** being an elitist about it, which you are. Saying that C# or Java is absolutely better than JavaScript is like saying that spinach is absolutely better than brussels sprouts - because if you have an excess of vitamin A then you sure as hell don't want to eat spinach - point being that context and application matters; and categorically dismissing an ubiquitous programming language, "because, ew yuck", is about as childish and elitist as it gets. 
You run into this problem with any language in any enterprise setting... hell, you see it in infrastructure designs, change management, problem management, etc. I work in application integration as part of a team full of really smart people who mostly work *individually* to *get things done* in a large heterogeneous IT environment. We'd all love to take our time, and do things in a controlled and uniform manner but, fuck, when some director three management levels up in the ivory tower a hundred miles away wants something "DONE, and DONE NOW", well, then you're goal becomes, *make it work, and hope it doesn't fail the security audit next month". We [programmers and developers] all talk about *bad code* but, really, it's a product of our environment and working conditions - we don't want to write bad code but, what's the alternative, IA, QA, App Support? Fuck that. So, sometimes the choice comes down to writing code that, "gets the job done", or not coding at all, and many people would say that we shouldn't code at all if we're not going to do it right but, let's be serious here, if it's not us doing it then it's going to be the person who replaces us doing it. 
There are time for sure where it needed to get done. But there is a lot of times * Where it was bodged due to pure laziness and I quote "I can't be bothered to think". * Where I was working previously the lead developer was an alcoholic and I quote "When I designed it down the pub". * The tech stack was mandated by management even though it was not fit for purpose. * Where a JS developer wrote the whole front end code in pure JS (even though it was a database driven website) because he didn't like Razor. This happens everywhere because quite frankly IT (especially development) is a total fucking mess and will be for some time until people stop making sweeping and unproductive statements on stuff that really doesn't matter in reality.
Really biased answer here: Because it's a Jetbrains product. I used PHPStorm and ReSharper before Intellij. PHPStorm was one of the only ways to work PHP. ReSharper added a ton of very pleasant features to VS that should've been in from the start. Jetbrains just delivers in raising some hidden potential out of languages with their products.
Not at all, C# is one of the easier languages to learn.
Ironically the thing people seem to be missing the most here is the refactoring support in IntelliJ is light years ahead of Eclipse. It's made by the same folks who make the best Visual Studio addin, Resharper. You're likely to spend more of your career refactoring your own and others code than developing new code. Once your programs start to take shape and patterns emerge, you'll have to refactor it to manage it's complexity and dependencies. 
I'd say that because of Visual Studio, c# is amongst the easier to learn. Visual Studio is such a great IDE that c# in it practically writes itself. Although I've heard a few different people actually say that because of how easy it is, it's a bad language/IDE to start with. It can encourage bad habits and laziness.
Follow these steps: 1. Open Visual Studio -&gt; File -&gt; New Project -&gt; Visual C# -&gt; Windows Forms Application 2. In the Solution Explorer Locate the "Form1.cs" file, right click it to show the context menu, chose "View Code" 3. Now you see the code of your Form1 Class (public partial class Form1 : Form) 4. under the constructor ( starts with "public Form 1", ends at the next "}") paste the following code: &amp;nbsp; protected override void OnPaintBackground(PaintEventArgs e) { } protected override void OnPaint(PaintEventArgs e) { var graphics = e.Graphics; graphics.Clear(Color.White); var width = ClientRectangle.Width; var height = ClientRectangle.Height; graphics.FillEllipse(Brushes.Red,new Rectangle(0,0,width,height)); } protected override void OnResize(EventArgs e) { base.OnResize(e); Refresh(); } Run the Program -&gt; Tada there is the circle you were looking for. Now change things and see what happens
The programming language doesn't really matter. The first few months will be easy, the next 10/20/30 years will be hard (but worth it).
To be fair, I fully agree with 'if you can't don't do it properly don't do it at all'. Anyone who has worked with colleagues that can't program their way out of a paper bag but still manage to get something working and thus delaying their inevitable dismissal can confirm that they are a pest that should removed as soon as possible.
This is basically what I would have said. Itellij's IDE is just a more professional environment. Its definitely worth the price especially if you a company to buy it for you. Eclipse will get you started, and at many Universities they do, but its not something you want to be using for long grinds with big teams over months and months. 
Absolutely not if you want to use the normal design patterns and object oriented architectures. Although JavaScript is able to do all that, but you shouldn't if you want to build serious backend applications. Besides the fact that JavaScript is meant for client side scripting and everyone is now using it for the wrong purposes.
Lol wat are you on about?
Are you a dinosaur?
Where did I say that? You specifically said "you shouldn't if you want to build serious backend applications". I'm pretty sure each one of the ones I mentioned is serious. As for "It still just isn't created for that purpose" Do you think the Internet as we know it today was created for this purpose? Or was it created for sharing text files between academics then evolved? 
As long as it takes. Everyone learns at different speeds. Some things may just click (especially if you have programmed before) other things may take days/weeks to fully understand. There's always more to learn. You could become proficient in a few weeks maybe. But you'll learn something new with every project.
Don't you just love creating ```ToolFactoryFactoryFactory``` classes?
Holy shit. What a post. Fantastic.
 Random r = new Random(); This is your problem. The `Random` class is a pseudo-random number generator. The default constructor of the `Random` class is based on the current time. The seed defines which *random* numbers you get. You create an instance every time, but actually you should create **one** instance and use it throughout your application. When you debug, you pause the application temporarily, which makes some time pass, and both times you create a `Random` instance with a different time. But when you start the program directly, the program runs so fast that **both times it will use the same seed** (the same time). So you also get the same passwords.
This is concept only, not for actual use. Thanks for the help. :) 
Grandslam
No just a challenge from a friend
This is a huge help! in public Form1(), there is a InitializeComponent(); Do I replace that with the above code or do I need to leave it?
Have you read the Wikipedia article? Wikipedia's data structures articles are generally quite good at providing the information needed to implement a data structure. Beyond that, do you have any actual questions?
Learning C# really helped me understand pointers in C++.
Six months to learn it. And years and years to master it. It's just another programming language, if you have learned others then the learning curve will be much easier.
This was the best part of your feedback: &gt; Pokèmon exception handling (gotta catch 'em all) Never heard that term used before in regards to exception handling. Love it!
There are lots of devs who prefer using NetBeans or IntelliJ over Eclipse.. They all have their reasons and there are lots of threads about it on the web. Even Google dropped support for the Android Eclipse Plugin in favor of Android Studio, which is based on IntelliJ.
6 months to a year before you know enough to get at least a junior dev position. Took me 6 months, with little to no experience, before I was comfortable enough to apply. A few months later I was working full time. Also be sure to catch up on html, CSS, js, and the like if you want to do web development at all.
I don't know if you mean amazon, Facebook and those other companies have all their servers running massive data farms in JavaScript or just the web interface. But a web developer I highly recommend JavaScript for front end interface while using PHP on your back end server but for a "software or systems" developer you want to start by learning C# and java. I resent calling it a dirty language, its good as what it's designed for but not what people are trying to do with it but if they can pull it off good on them. Just don't expect the performance or memory management of C++.
Explain how he is wrong?
Why don't I get people like you in my teams? :(
I'm glad you enjoy javascript.
Calling it a dirty language I do regret saying. But for someone that wants to learn how to program I just would steer them away from it. Learning C# or java will give you better understanding of structure, syntax and techniques that carry on if the person decides to learn C or C++. Or Python...Python is a elegant language.
I'd highly recommend Python too
Jeff Atwood is a legend. Love all of his stuff. Thanks for this!
Convert from what to what? If you have the gmt time, you can convert to any timezone.
Convert a gmt time to another time daylight savings aware with only the offset int in hand. 
WPF is still very relevant, and Microsoft is actively investing in it. UWP is also a good choice, since UWP apps will run in both desktop and mobile versions of Windows.
&gt;having only the GMT offset int available to me, adhering to DST and all things such as that? I don't think that's possible, since DST is a matter of local jurisdiction and not the GMT offset itself. To apply DST and other adjustments, you need an actual specified timezone ruleset, not just a GMT offset that could be common to multiple timezones with different DST rules. In general, you can do timezone conversions with `DateTimeOffset` and `TimeZoneInfo`.
True, but also good talent is hard to find
[removed]
ADO.net is the answer. ORMs are more trouble than they are worth, except for the simplest of examples--which do not exist in the real world.
DateTime doesn't have any concept of offsets. Or, its concept is very primitive. It has three choices for how it will be interpreted, dictated by its Kind property. * DateTimeKind.UTC is interpreted as UTC time. * DateTimeKind.Local is interpreted as your system's local time zone. * DateTimeKind.Unspecified is a terrible idea. These properties affect what happens when you call methods like ToUniversalTime() and... not much else. Subtract() doesn't consider the Kind property. Compare() doesn't consider the Kind property. CompareTo() doesn't say what it does, but I bet it does what CompareTo() does. Really the only useful thing you can do with a DateTime in terms of time zones is tell if it's UTC, and convert from your local time zone to and from UTC. That's it. If you want your DateTimes in a different time zone, go to your system settings and change them. That's why the DateTimeOffset class exists: it incorporates both a time value and an offset. You can convert a DateTimeOffset to a different one using the ToOffset() method. However, this is still a little wonky, because the offset doesn't encapsulate information like DST. But that's generally OK if you have the offset: no one should give you the wrong offset for their current DST observance. The big hammer is TiemZoneInfo.ConvertTime(), but it's very complex and I doubt you actually need it. If your offsets are right, DateTimeOffset is what you need. I'm pretty sure NodaTime also has some exciting ways to convert times from one time zone to another, but I'm not familiar with it. Note this can all get very complicated. An 'offset' is not the same thing as a 'time zone', except in very specific locations. What I mean to say is going from "31/12/2016 10:00 +06:00" to +05:00 should always yield "31/12/2016 09:00 +05:00", because all you're changing is the UTC offset. But if we instead are saying "31/12/2015 10:00 CST interpreted in Phoenix, AZ", the answer gets very much more exciting than saying "Mountain Time Zone", because "Mountain" can mean either "Mountain Standard" or "Mountain Daylight", and different parts of Arizona may or may not be using either on any particular date or time.
Not really, see his first bullet point.
why not decimal then, y'know just in case someone wants a very specific quantity.
Static members aren't really good for much, in my opinion. You didn't read my warnings as warnings. Long story short, when you get to the point in life where you want to start unit testing, you'll find that every static member is a liability that you end up refactoring to an instance member, sometimes with great effort. Even before then, you'll find that static members are a pain because you don't know who is changing them at any given time unless you exhibit a lot of discipline. It's easier to learn how to pass instance data around sooner rather than later. I've been fielding questions on VB forums for something like 12 years now, it was my first language and while I see it as a trap today, it's still a popular beginner's language. There are a few practices which, when they appear in a code sample, are almost always the cause of the problem. Static members are #3 on that list, and I'd wager they'd be #1 on a C# list if I'd been on a C# forum that long. They are a pit of failure and you would do better to forget about them now and learn about them much later, when you can recognize the very narrow problems they solve outside of providing constant reference type values. (And when you can understand that phrase, you're close to the level of knowledge you need.)
I've used a couple of static member in my Deck class. public static readonly List&lt;suit&gt; Suits = new List&lt;suit&gt;(Enum.GetValues(typeof(suit)).Cast&lt;suit&gt;()); public static readonly List&lt;rank&gt; Ranks = new List&lt;rank&gt;(Enum.GetValues(typeof(rank)).Cast&lt;rank&gt;()); Now I'm wondering if I should have. My reasoning is that they'll be handy elsewhere, and by their nature they're pretty much immutable. They sure made creating the Cards simple :). This is a paste of the full class. I'd appreciate your comments if you have time. http://pastebin.com/LGStEybC Thanks again 
that is great feed back. This is the second time i've seen you take the time to do this. Do you do code reviews in your job?
I could be wrong but doesn't the ConcurrentDictionary handle locking for you? aka you don't need a lock object at all. https://msdn.microsoft.com/en-us/library/dd997369(v=vs.110).aspx edit: ah you have 2 dictionaries carry on. 
&gt; that is great feed back. Thank you. &gt; This is the second time i've seen you take the time to do this. Did this a couple of times already. Usually appreciated, but also already had negative feedback (by an expert beginner, refusing any advice because he knows it better with his 2 months of experience). &gt; Do you do code reviews in your job? Yes and no. Not nearly enough as we should, but we are doing it. But in the project team I currently work in there's not so much to complain about.
ALL CAPS TITLE TO GET SOME ATTENTION! - This library will not work with .NET Core. - This library is hosted on CodePlex (like, seriously? Wtf?). - Uses extremely generic public class names like `Header` and `Array`.
Yeah, well, I inherited it. Ugh. ;)
I've used Memory Mapped Files to do cross process communication between a 64 bit process and a 32 bit process. It was fast and worked well.
&gt; NodaTime I'm looking at Noda now. Wow! Looks much easier to use, expecially with offsets.
Seriously, how many sockpuppets do you have?
Did you try putting either a single tick or quotes around it?
Yeah, this exactly. I wouldn't pick it as anyone's first language, not because it's hard but because it's real loose with its rules. It's not a bad language though, you can do neat things with it very easily; just hold off on it until you've learned C# or something else. Javascript to me is icing on the coding cake. It's nice, but it's mostly for looks; I wouldn't have a whole bowl of it. It however, makes that C# cake look a lot prettier!
Thanks a bunch dude!
It took about three months and a major personal project and I was able to land an apprenticeship as a junior dev. This transitioned to a full time position after three more months, so like others in here are saying: about 6 months. Also, see Launchcode.org
C# is a solid language for beginners, particularly when paired with the latest Visual Studio. Intellisense is such an immensely helpful code completion/prediction/live debugging tool that I cannot imagine coding C# without it
outsideList is already in scope there. Why not simply add to it within GetRandomFollower() instead of using insideList?
Perhaps there is a minimum limit enforced in the library / the reddit API? In that case you'd just have to throw away the unwanted comments.
Hmm didn't think about there being a minimum enforced by Reddit themselves, that may be the case, just find it extremely odd because if I form the link https://www.reddit.com/user/sWeeX2/comments/?sort=new&amp;limit=1&amp;t=all it gives me one comment. But no matter what I do it throws me back 29comments which is the total amount I have and 29 would be a very odd minimum limit :p Might well have to do what you said and just throw away the excess, thanks for your reply :)
I don't actually, I'm relatively new to C# and ASP.Net, would you be able to tell me how to set that up or somewhere to look just to set it up? 
That's actually pretty slick! Thanks! 
Mate we can debate it as much as you like and I agree a great programmer is not dependant on a language but also knows what language best suited their needs. But the average programmer my self included is independent of understanding languages but is heavily focused on very few because of the vast majority of libarays we learn in that ecosystem. 75% of people would choose c# and Java over javascript as a beginners language because of the syntax, tighter rules and techniques. If your developing an application you are not using javascript. Sure you could but it's not designed for it, It's great for interfaces and for scripting on top of platforms. but I would personally recommend Python instead because its such a beautiful language. Or LAU because of its small footprint. Just curious what is your personal experience and what have you developed?
&gt; PS programming is software engineering. Nope they are not. Programming is one part of software engineering ... one very small part. &gt; Scripting isn't software engineering, but there sure as hell are great scripters out there and they are a highly creative bunch. It depends what the requirements are whether scripting is "software" ...
&gt; But the average programmer my self included is independent of understanding languages but is heavily focused on very few because of the vast majority of libarays we learn in that ecosystem. 75% of people would choose c# and Java over javascript as a beginners language because of the syntax, tighter rules and techniques. In your opinion, some would choose server side JS for the opposite reasons that are just as valid. &gt; If your developing an application you are not using javascript. Sure you could but it's not designed for it, It's great for interfaces and for scripting on top of platforms. Loads of complex web applications rely on JavaScript, so what your saying is incorrect. &gt; but I would personally recommend Python instead because its such a beautiful language. Another opinion. I like Python, but what is beauty is in the eye of the beholder and is a subjective quality even in programming languages. &gt; Just curious what is your personal experience and what have you developed? I can't tell you anything meaningful because I have been almost completely under NDA most of my career.
NDA doesn't prevent you from being brief, what languages And platforms most? Are you based on web development?
JavaScript and .NET is my primary focus at the moment.
It is a part of software engineering but it swings both ways. Without any understanding of you scope or limitations of you platform you can't develop your application efficiently. Just as you can't write a program efficiently if you don't fully understand the language and its library's or choose the right language for the right job.
You are overthinking it. They are learning, not trying to write the most efficient program. 
I still wouldn't recommend JavaScript. Python is miles better for beginners, if you want to use a scripting language. But end of the day the user will start with whatever they find more comfortable with.
Assuming too much and knowing too little.
[Download](http://www.telerik.com/download/fiddler) It is a pretty simple application to start using to verify your results. Just install it from the link (you'll have to make an account because it is a Telerik product now). Once installed, start it up, it will start sniffing all of your web traffic. You can limit it by target process which could work for your application otherwise you'll just have to clean up the results manually or pay closer attention to the requests going in and out. When you find the request you want in the left pane, select it and the right tabs will be filled. I typically use the Inspectors with the raw data but do whichever you want. Verify the data matches the URL you provided above with the data you need. The application can also craft packets if you need to see what gets returned but that is a little more in depth than what you probably need right now. 
Make an account? Leave your email blank and you can install it without signing up for anything. Fiddler is great though, I highly recommend it.
TIL thanks
Really glad to see fixtures used to share the HttpClient. I implemented something very similiar for one of our projects, but some commits snuck in where people were instantiating the test server in the constructor. Made me sad. One thing extra we have are some extension methods for Shouldly for our assertions. That allows us to have code like postResponse.ShouldBeSuccessfulStatusCode(); getResponse.ShouldBeStatusCode(HttpStatusCode.Ok); Beyond it reading clearly, the failure message is even better. We'll get a message like "Expected OK, but received InternalServerError (500)" plus I'll dump out the content of the message body to the debug window. Makes tracking down situations where someone might have tweaked a route and broke an integration test much easier to figure out.
Hi there, I've been programming games in the Unity game engine with C# for over 2 years now. Prior to that I was in school for two years getting my Associates in Comp Sci. I just published my first commercial game (I made a couple others that weren't commercial) and well, it's not really working out as I had hoped. I'm thinking about trying to get a job as a C# junior programmer but have no idea where to start. I also don't have any C# programming experience outside of the game engine. Any suggestions or thoughts? Many thanks in advance :)
Think about someone else reading your code. I would look at that cast and think what the fuck is that about and rewrite it. It's about readability not intelisense.
Have you tried TypeOf or the is keyword? 
DO you need to use 'Take'? From the repo: *** Important note: Make sure you use .Take(int) when working with pagable content. For example, don't do this: var all = reddit.RSlashAll; foreach (var post in all) // BAD { // ... } This will cause you to page through everything that has ever been posted on Reddit. Better: var all = reddit.RSlashAll; foreach (var post in all.Take(25)) { // ... }
I use [jstz](http://pellepim.bitbucket.org/jstz/). I include the result in the header whenever I make an AJAX call, and if I detect a valid location code server side, I will convert To/From UTC.
That is PERFECT along with Noda. Thanks!
 foreach (var childObject in Objects.Children.OfType&lt;PointObject&gt;) { // do things for points } foreach (var childObject in Objects.Children.OfType&lt;BonusObject&gt;) { // do things for bonuses } Or, if you can stand the smell of type-sniffing: Dictionary&lt;Type, Action&lt;GameObject&gt;&gt; actions = new Dictionary&lt;Type, Action&lt;GameObject&gt;&gt; { { typeof(PointObject), x =&gt; /* do the thing */ }, { typeof(BonusObject), x =&gt; /* do the other thing */ } } foreach (var x in Objects.Children) { var type = x.GetType(); if (actions.ContainsKey(type)) { actions[type](x); } } Visitor is probably a better solution, though, and less fragile.
There're several approaches: 1. Check the type within the loop, cast to the subtype and use the subtype-specific methods (**least favorable!**). Typically needed when using a third party library with given types and collections of basetypes. 2. Use polymorphism: If all base objects have common behaviour but with specific implementations, then reimplement this in the subclass. See /u/JustABlankAccount answer. 3. Collect your PointObject and BonusObject objects in seperate generic collections (IEnumerable&lt;PointObject&gt; IEnumerable&lt;BonusObject&gt;) and iterate separately over them. After all, you create the objects, so you can sort them properly! Then, if you need a collection to work on specific behaviour use the specific collection. If you need common behaviour, use the base classe collection. You can use some kind of repository to create your objects, like this: public class Repository { private HashSet&lt;GameObject&gt; _gameObjects; private HashSet&lt;PointObject&gt; _pointObjects; private HashSet&lt;BonusObject&gt; _bonusObjects; public Repository() { _gameObjects = new HashSet&lt;GameObject&gt;(); _pointObjects = new HashSet&lt;PointObject&gt;(); _bonusObjects = new HashSet&lt;BonusObject&gt;(); } public void AddGameObject(GameObject gameObject) { _gameObjects.Add(gameObject); } public void RemoveGameObject(GameObject gameObject) { _gameObjects.Remove(gameObject); } public IEnumerable&lt;GameObject&gt; GetAllGameObjects() { return _gameObjects; } public void AddPointObject(PointObject pointObject) { _pointObjects.Add(pointObject); _gameObjects.Add(pointObject); } public void RemovePointObject(PointObject pointObject) { _pointObjects.Remove(pointObject); _gameObjects.Remove(pointObject); } public IEnumerable&lt;GameObject&gt; GetAllPointObjects() { return _pointObjects; } // same for _bonusObjects } Then var repo = new Repository(); // add objects ... foreach (var pointObject in repo.GetAllPointObjects()) { // ... } 
It would be easier to help if you mentioned the specific terminology you don't know. A beginner's tutorial shouldn't assume you understand anything. Perhaps you should start with some generic programming info rather than jumping straight into learning C#. Or just follow along with the videos. You might not understand everything you're doing at first, but if you stick at it everything will start to sink in. You'll start to see patterns and connect the dots. It might help to repeat the first few videos until you're happy that you understand. Maybe get a book to read as well. It's generally much easier to learn if you get a couple of different takes on the same material. 
After learning the basics of C# I go to /r/dailyprogrammer a lot and do their challenges.
yes
Don't watch a tutorial. Read a book.
For future reference, you'd be better off asking in the /r/sqlite or /r/SQL subreddit. However, you can run the following SQL within SQLite to bring back a result set which will tell you all columns that are in the table's primary key. PRAGMA TABLE_INFO(yourtable); For more information, please visit the official SQLite website: https://www.sqlite.org/pragma.html#pragma_table_info 
Maybe we need to go deeper, like how to process information or how to be conscious
If I had to guess, (because I'm a beginner developer too), he is talking about terms like "Parse", "Iterate", "Concatenate", and other terms that you hear almost NOWHERE else other than in programming. Also, beginners need an understanding of how symbols like "!=", "==", "&amp;&amp;", "||", work and how they are used. It took me a while to pick up these things, and quite frankly, a lot of the instructional sites for coding (many of which I sampled) don't express these things to you in terms that are understandable to a person who has never seen the symbols, or heard the terminology. 
It's just as appropriate here if you're asking for c# code to programmatically grab metadata from a table to get column information.
Or just get the community edition...
https://www.jetbrains.com/idea/download/#section=linux if you dont need those features sure but it's not just intellij you're getting with a student license
What kind of error? The string query passed onto QuerySelect(string)?
Good point. I'm not familiar with SQLite, or any database for that matter. Can't wait to get a course on Database this coming semester :p 
Please explain? Or give a reference
You should be error checking within your codebase regardless of the database provider you are using, so you should be able to start now! :-) 
I don't think it's possible to implement a proxy specific to the WebBrowser control. You'll need to add the proxy manually in Internet Explorer's settings as that is the browser that the WebBrowser control uses.
you must never fart on another mans balls. 
If you do want to use a different browser control I would recommend [CefSharp](https://github.com/cefsharp/CefSharp)
Wow. I, respectfully, couldn't disagree more with your comments. 1) While there are legacy enterprise applications out there, most companies who consider these applications to be critical have put forth the effort into modernization. Winforms and ado.net are still out there but it is more of a rarity. 2) MVC is dying. Quickly. While MVC may have been popular 3-5 years ago, Microsoft themselves have admitted in MSDN magazine that SPA is replacing MVC at an alarming rate. 3) Almost every application I've worked on in the last four years has been EF or some effort to get to EF. We could go back and forth about efficiency of EF but most enterprise apps today are being developed with EF and keep sprocs for performance critical components. 4) I can't imagine not using an ORM for, like, a multitude of reasons. I don't even know where to start... Lastly, DBAs are increasingly importantly with the abstraction due to ORMs. You make good points that a developer should be aware of how to use profiling and execution plans but you need to be cognizant of Premature Optimization. 
The one thing that the author is spot on about is data structures and algorithms. It's really important to know not only the what/how but also the when/why. Knowing .NET collections is critical. Where I've worked almost everything is List&lt;Foo&gt;, and 90% of the usages are fooList.Find(f =&gt; f.Id = val), which just screams for Dictionary&lt;int, Foo&gt;. I could go on about improper usages of List, but it would just make me sad. I would add the following bits under the broad heading of data structures: Know about worst case performance characteristics (aka Big-O notation) for commonly used collection methods like First(). Bonus for learning how to calculate worst case perf for any chunk of code. Also, know the difference between reference equality and value-wise equality for objects, along with what a hash code is and the basics of how a hash code is calculated. Learn about why strings are special, and learn how to manipulate them effectively. 
What about [this](http://www.w3.org/TR/geolocation-API/) ? Can I use this?
I don't think ORM is a thing any C# developer *must* know, and the more specific recommendations like this get, the less valuable they become (especially with UI APIs, which seem to change pretty radically with each major framework release). For a junior C# dev: * Know the foundational stuff: data structures and algorithms. A good grounding in basic comp. sci. is pretty handy for finding your way around unfamiliar systems. * Know enough SQL and relational algebra to figure out queries involving more than one table. Don't get too hung up on which RDBMS, or on the procedural scripting language it uses (e.g. Transact-SQL, PL-SQL, etc). Your employer might be using a different DB than the one you used in school, and, as a *junior* *C#* dev, you're not going to be expected to know all the ins and outs of the database. Be familiar with the Db* classes (DbCommand, DbConnection, etc) in System.Data, though. * Know basic to intermediate C#: reference vs value types, static vs non static, class vs interface, class vs object, access levels, and other language stuff. Bonus points if you understand LINQ. * Be able to debug code. Even if all you do is turn on breaking on exceptions being thrown. * Be able to test your own code, even if all you do is run it and see if it breaks. * Have some experience with using source control. Don't get hung up on details, because there's no guarantee that your employer will use the same source control system you did, or use it in the same way, but understand what it means to check in, and check out. Bonus points for understanding merges and branches. * For web stuff, know HTML, CSS, Javascript. Bonus points for knowing your HTTP error codes. * Know how to find information in MSDN and via Google, but be willing to ask questions of your coworkers and seniors, especially about domain-specific stuff. I don't think I'd worry *too* much about UI toolkits, whether on the web or the desktop. Have some experience with one of each, if you can. Odds are probably about even whether or not what you know will match what your employer uses, so the concepts are probably more valuable than the concrete skills at that stage.
I like it!
That is a specification for a javascript API to request the current location from the browser (which may use the device's GPS receiver, or fall back to wifi and geoip databases). This is an option if you're working on a website, but it won't help you to determine a location from an IP address alone.
Cool. thanks :)
It's just really easy to go overboard on what a junior developer position requires, and really easy to focus on the technologies and APIs that are big *right now*. MVC and WPF are good to know, because they're the most recent web and UI toolkits, but lots of stuff will still be in WinForms or whatever: legacy code doesn't go away just because it's no longer cutting-edge, and not all companies are on the cutting edge. ORM is pretty fashionable, but Entity Framework isn't the only ORM framework in .NET (being part of the framework makes it pretty popular, though). NHibernate is one alternative, and some places roll their own in various ways. Since the basic concepts are pretty straightforward (i. e. an Object-Relational Mapping provides types that correspond to relations in the database to abstract and standardize database access--in many systems, this is 1:1, objects-to-tables), I don't think there's anything to really recommend there.
XAML is also used in Win Phone 7/8/8.1, Windows 8/8.1, UWP apps, plus Xamarin. None are huge markets but there's definitely more than WPF when it comes to XAML. Not that you're necessarily wrong about XAML typically being WPF XAML, of course. It's by far the dominant tech.
In my experience I've found that enterprise software written by large companies tend to stick to the more mature technologies. They will generally not spend money to upgrade to the latest and greatest. It's hard to say what technologies will stick around as soon as they are available and I've found large companies tend to wait until the standard is set before making the jump. The industry that the software is for is also a huge factor. Generally speaking, financial institutions tend to not be as concerned about looks and having the latest and greatest either. They will be more concerned over security, stability, and functionality. Companies with smaller applications also tend to be more flexible as the work to implement some of these upgrades/changes would be minimal compared to a larger application. Basically in my experience, larger companies tend to stick to older, more established technologies, while smaller companies tend to use more cutting-edge technologies if you will.
I guess everything's relative, but I see most green field enterprise AND non-enterprise (I'm a consultant so I get a very broad view of the industry) development being done with MVC (or more commonly Web API + some JS SPA framework) + EF. There is a lot of legacy W*Forms + ADO.NET that still needs to be maintained for sure, but new development with those technologies is definitely the exception and would need to be justified pretty strongly anywhere I have experience with. Loads and loads and loads of apps are in production using EF right now. If you're doing a fairly simple CRUD app for even a decently large organization you're just not going to run into any performance issues with EF without trying really hard if you know what you're doing. And if you don't know what you're doing, why don't you know what you're doing? Sorry, but 4 just means you're using a bad architecture. Your business logic should have absolutely no knowledge of whether it is using an ORM or even a DB, or a web service, or flat files, or whatever. In my apps the business logic project doesn't even have a reference to EF or to any project or assembly that references EF. The projects that house implementation details all depend on the core business logic projects, as they should. Not the other way around. I agree with your thoughts about DBA knowledge being useful. Once you have those skills you can easily navigate the EF pitfalls and really take advantage of its many benefits without the irrational fear.
For web devs that is. I make games, and it's a different kettle of fish.
I'm also a consultant, but unlike you I've not had many green field projects fall in my lap. Regardless, I am trying to present my experiences rather than what I would do if I had my druthers. For instance, in my current company business objects are persistence-aware. I hate it, and would never implement PA business objects in my own practice, but that's the pattern my current company uses. Everyone from Jr engineers to Sr architects have said it's a poor practice, makes transaction coordination more difficult, makes encapsulation of data operations more difficult, etc... But the pattern remains because the company's founder won't budge on his views. What I've presented above is a reality of working in software development: there will always be anti-patterns and non-best practices that we have to live with, whether it's Hungarian notation, implicit dependencies that can't be mocked, or persistence-aware business objects. 
I like unit testing a lot, but not every place does it (and more's the pity!) and I think you need to get testing (what to test, how to test) before you grasp the value of unit testing. From unit testing, it's a pretty simple path to get to the value of things like mocks and stubs and then to SOLID, because they all make code easier to test and maintain. But, I've run into a lot of developers, many of them experienced, who didn't grok how or why to test, which makes selling them on unit testing even harder. Especially with the usual pressures to save time/effort by *not* writing unit tests.
Mono is a total pain in the arse it seems when it comes to loading DLL's, I've tried it before with Mono and a 3rd party DLL and it too kept moaning about not finding files. Why are you dynamically loading DLL's over the network though? Sounds like it could be dangerous if someone sabotages the network. Can you not just load the DLL's normally without reflection/manual assembly loading?
Our network is completely hard wired and no one would try to sabotage it. The idea is that we load the client application onto the Pi once and then never have to edit that again, any changes would be the the DLLs that we send across. We compress the DLL and then unzip it on the pi and load them there so that any changes would not need to be manually transferred to the pi. Not finding the files is the weird part, I wish I knew why it couldn't find it. Because I can see the file in the file system, so I know it exists...
Seconded. I'm curious how SPAs will replace MVC, especially for large business scale applications.
For W*Forms, I read that as Win or Web Forms. From the ASP.Net side it's pretty easy to embed MVC architecture into an existing WebForms site. Just need to be careful about pathing, but that's what architecture phases are for, right? As to the WinForms side, I'm not too sure. I know a bunch of the study stuff for the MVC test they talked about using MVC and HTML to build MS store apps, but that doesn't seem like it would be a good catch all to replace all WinForm applications.
We actually tried that, and the problem we encountered was that we would need to use PCL's, which was a major, major change for our project.
Datastructures and algorithms are overrated. Obviously they're not to be neglected but good god, stop emphasizing it so overwhelmingly. D&amp;A are implementation details that will have their misuses highlighted when you profile your application after noticing you have performance issues. To me, the most important aspects are being able to debug and write modular code. If you have these two things you will figure out naturally where the non-performant pieces of code are which in turn will put you on your way to improve them. You need to know some broad lines of data structures and the idea of complexity behind algorithms but it's *not* what makes you a great programmer or what makes a great application.
My honest advice is that a text based rpg is based served as a console-line application anything else is overcomplicating it. I'm actually building a very similar project myself, I looked around and didn't find any out of the box solutions for this kind of game (and I don't know of any in java, python or ruby) so I'm building what I need by myself along the way.
There's a library called Malison on GitHub which emulates a console using bit apps. I've done a simple rogue like with it, it may be of use.
Did you want to use the existing SuperAdventure project, or create something completely new? If you want to use the existing one, and you've done the refactoring lessons 20.0-20.5, you should be able to add a console project to the solution. You would need to add a reference to the Engine project, and handle the events a little differently. The tricky part is how intelligent you want to make the input parser. If you want to display available options, and accept a specified key for each ("N", to go North, "E" to go East, etc.), that is much easier than adding the ability to parse a sentence like "Attack the giant spider with my rusty sword". If you want, I can probably add more lessons to get you started. I was already thinking of adding a WPF UI, if people were interested (FYI, that's my site, in case you have any questions).
Why is the video so shaky?
Cause the laptop is probably on top of a pillow.
Take a look at Monogame (http://www.monogame.net/). 
Deltatime: "The time in seconds it took to complete the last frame (Read Only)." It only applies to frames, so no. You could try something along this: var start = Datetime.Now; DoMe(); var end = Datetime.Now; Timespan delta = end-start; delta.TotalMilliseconds;
I don't know why it isn't formatting my post properly. Give me a moment. Resharper is amazing, I don't think I could use Visual Studio without it. However, in this case, I think resharper would be of limited use because what you need is something that identifies duplicate code and replaces all instances? As far as I know there's no tool to do that. It's easy enough to identify identical code, but a lot of duplicate code is only semantically identical. for example, compare your original nav.Evaluate(strExpression); nodeIter = nav.Select(strExpression); while (nodeIter.MoveNext()) { string kana = nodeIter.Current.GetAttribute("kana", ""); lblKana.Content = kana; } //End while with nav.Evaluate(strExpression); var i = nav.Select(strExpression); while (i.MoveNext()) { lblKana.Content = i.Current.GetAttribute("kana", ""); } Same result, different implementation. I don't know what the code is doing, it might just be random example code that does nothing, in which case ignore the next bit. Do you actually want a while loop here? or a do while loop? I don't know what nav is, so I'm just guessing based on the structure of the code, but it looks to me like you're skipping the first "whatever" is returned by nav.Select. So does: do { lblKana.Content = i.Current.GetAttribute("kana", ""); } while (i.MoveNext()); make more sense (with some check before the do to ensure select returned at least one "whatever"?). or a foreach? Again, no idea what nav is, I assume something xslt related or xpath? Fck it, I've googled it, I'm guessing you're doing [this](https://support.microsoft.com/en-gb/kb/308343)? In which case it seems to imply a do while. But again I'm only guessing. Sorry, hijacked your question a bit.
The concept of frame deltas doesn't really apply to C# in general. You may be able to approximate it with `System.Diagnostics.Stopwatch`, depending on what you're trying to do. Subtracting `DateTime`s works as well, but probably isn't as precise. Use `DateTime.UtcNow` to avoid any weird timezone mishaps if you're just calculating deltas.
On top of a box but the bed was very springy! This B&amp;B in what is not quite the middle of nowhere isn't the most ideal filming location but did the best I could with the equipment I had. Normally I'd use a much better setup in my flat. 
Unless you are switching timezones between frames there should not be a problem with just using .Now, or an I missing something?
DST switchovers will likely be an issue as well, and it is possible that the user changes their timezone for whatever reasons. In theory there could be other adjustments, though they probably are exceedingly rare. `DateTime.Now` just gets the value from `UtcNow` and then does a bunch of magic to adjust it to local time, so unless you really need local time, might as well stick with UTC and save yourself the headache.
There is no need to use external libraries to create a game like this, and doing so would only either complicate or remove the learning (depending on your confidence) that could be achieved by doing it yourself. &amp;nbsp; This is a good exercise to learn by building it entirely yourself. It's not as difficult as it might seem. Yes, you could use Windows Forms or WPF, but I would suggest you start with a CLI (Command Line Interface) application. &amp;nbsp; Start by creating a [Console Application](http://bit.ly/1PF9n3k) (listed under *Windows*, in *New Project*, assuming you're using **VS2015 Community Edition**.) &amp;nbsp; This is a great way to learn [inheritance](http://www.dotnetperls.com/inheritance) too, so I suggest you create some base classes; Inventory, GameItem, GameCharacter. &amp;nbsp; Your player, NPC's (non-playable characters), and MOB's (monster objects), will all be sub-classes that inherit from GameCharacter. Inventory can then be a parent to theirs, as well as things like treasure chests. &amp;nbsp; From here it is up to you whether you start simply with a linear flow of ReadLine/WriteLine, or if you go in to building a world in which you can flow back and forth. &amp;nbsp; A good example on this kind of flow, with keywords, is [Hunt the Wumpus](http://blog.codinghorror.com/the-history-of-wumpus/).
It need not be that hard, a basic verb-noun classic Adventure/Colossal Cave design is very easy to implement compared to a complex Zork parser but it functions much the same, its just the input of commands has a different style. So 'Attack the giant spider with my rusty sword' would be 'Wield Sword' (You now wield a rusty sword) followed by 'Attack Spider' (You strike the spider with your rusty sword). The Attack verb just triggers a look at what the character is currently holding, fists (if nothing), torch, sword, branch, chair, etc, and gives appropriate feedback to the player.
Well, why don't they upgrade to a newer version of mono ?
Woops, misread your sentence, sorry. 
Thanks for the response. I am already familiar with C# in terms of the language, but my current experience is exclusively Windows Forms applications. I have never written a web application before, and hence asp.net is the focus of my learning. I have chosen mono develop mainly because I have transitioned entirely to Linux. I agree that Visual Studio is a superior dev environment, and in fact it's the only thing I miss since leaving Windows. I am considering the possibility of learning asp.net with VS and transitioning back afterwards, thanks for that suggestion.
Thanks for the response. I did research the relative merits of web forms and MVC prior to starting my project. Since I have almost zero knowledge of both, it seemed like a good time to make the best choice for the future. Unfortunately my research was very difficult. Search the web and you will encounter umpteen million conflicting reasons for why one is better than the other and vice-versa. In the end I did encounter an argument which persuaded me to use web forms, although I can't remember now what it was! I am not a professional web developer, so the result is more important to me than the technology. In fact the only reason I am looking into asp.net in the first place is because I dabbled with php and decided that I just didn't have room to learn another language. I am already juggling too many. In my experience, and perhaps it's just because of my very limited intellect, I can only be good at 2 languages at a time. 3 at a push. I am fluent with C#, so now I am trying to use asp.net. There is no other reason, really. My end goal in all of this is to automate some frustratingly monotonous tasks at work via a database driven application. I have already learned MySQL and asp.net is the platform I'll use to interact with the database and provide the UI. I considered a standalone C# win forms application because I am already very familiar with that, but I wanted to reduce, as far as possible, barriers to adoption of my ideas and solutions. Hence I decided that I would need an application that worked with everyone's browser with no dependency on installation of local applications. Cheers.
 neakyPet.SetHunger() = neakyPet.GetHunger() - 10; `SetHunger()` returns `void`. `=` is the assignment operator. You can't assign something to void. Also, that method accepts a parameter. You wanted to write: neakyPet.SetHunger(neakyPet.GetHunger() - 10);
don't know about gecko, but webkit based controls use the system proxy while webbrowser can set up a unique proxy for each process meaning you can have multiple instances running with different ips. don't have code handy so keep looking through stackoverflow as this is where I found the solution when i was looking. one comment had this link - which on a quick scan looks like its correct: http://www.journeyintocode.com/2013/08/c-webbrowser-control-proxy.html 
Thanks for this. Yeah, I forgot to specify I want to build a console application, using Read/WriteLine first, to get more of a handle on control-flow and text.
Hey Scott, thank you for the response. I do want to make a console project. I did your lessons several months' ago so I'll return to them and look at adding a console project. The parser will be very simple too. I don't think I'm the only person who learned from your lessons so if you added more eventually I think quite a few people would benefit from them,
Thanks!
Thanks!
Start the loop in another thread. (and use `Thread.Sleep`)
Yeah that's what I'm trying to do, I'm kind of making a game to learn how to read Japanese, and I'm using XML to store the data,
The reason I have them all separated is because of the way I process stuff outside of these two types. The two scripts I reference in here are Employee.cs and Day.cs. I definitely agree it would look better in a list, but the way that I process stuff inside the unity scripts with the UI makes it easier for me to do it this way
That's truly nasty shit. Sorry, can't say otherwise. I hope I never have to work with your code.
No worries! Still learning. This is what works for me right now and Im sure given time I'll get better.
If you're wanting to write web applications on Linux, I'd suggest using Nancy (http://nancyfx.org/). Nancy is proven to run on Linux and is an amazing tool for building web applications &amp; APIs. If you want to stick with MS technologies, you could always give MVC6 a try as TruculentOcclusion said as that also runs fine on Mono.
Best thing: Stay away from operator overloading. Stay away from implicit casts. Unless you have a very very good reason (like vector addition). They don't make the code *elegant*, they **obfuscate** the code. Casting a `Day` to `true` or `false`? When is a day *true*? When it's sunny? When it falls on the weekend? You need to know detailed implementation information when seeing code like `if (sunday) {}`. And you can't even easily navigate to where the actual magic (the cast) is happening. Something like `sunday.IsAvailable` is **much** more expressive and understandable. In your case it even relates to information about a specific **person**, which is completely out of the scope of the class as it currently seems. So the information whether a person is available or not shouldn't even be on a **day** object.
I mean sure I could make the code more detailed but why avoid operator overloading so much? Its an option for reason isn't it? Sure I could use sunday.IsAvailable, which is what the bool field inside the type is, and its a public value that can be referenced if someone wants to do it that way. On top of that there's comments all over the code that explains why Im doing this as well as how. If someone wanted to look through the codebase and see that they could. For me it just saves a bit of time being able to transition from how I was already doing it to a new type that can be treated similarly.
Assuming that you want to use the project to learn C#, I think that starting from scratch would be the best way to do this as any library you could use would basically be doing most of the work for you. As you said you don't really know where to start with doing this, so feel free to PM me if you want some more detailed guidance.
&gt; why avoid operator overloading so much? Its an option for reason isn't it You should avoid it, because it **obfuscates** the code. It makes it harder to understand when reading it. It is an option because it has **legitimate** uses, for example with a mathematical vector or a matrix it makes sense to overload the + operator. But for this code it makes **no sense** and I would consider it **abuse**. &gt; Sure I could use sunday.IsAvailable, which is what the bool field inside the type is, and its a public value that can be referenced if someone wants to do it that way. The point is being expressive with your code. Reading `if (sunday) {}` is definitely harder to understand than `if (sunday.IsAvailable) {}`. Sure, **you** know what it means **now**. But when looking at the code in 6 months? Or 2 years? Or if another person looks at the code? They won't understand shit. &gt; On top of that there's comments all over the code that explains why Im doing this as well as how. If someone wanted to look through the codebase and see that they could. If you would just do it the **right**^™ way, then these comments would not even be required. You're commenting a **bad design decision**, instead of **fixing** your bad design. &gt; For me it just saves a bit of time being able to transition from how I was already doing it to a new type that can be treated similarly. It saves you time **now**, but you are introducing [technical debt](https://en.wikipedia.org/wiki/Technical_debt) by introducing bad design instead of properly writing your code. And if you have to, for whatever reason, look back at your code in 6 months or 2 years? You won't understand it anymore, you won't know it anymore and have to dig through the code again - even more than normally, since the code is hiding behind **obscure** casts. Even if it will only be you and it's a short project - what is the quality you strife for? What is the quality you want to achieve? With what are you happy?
You should really mention that, while this is technical possible, it is **extremely** bad design to do something like this. Day d = new Day(); d = true; // &lt;-- Seriously?
Don't do it. It obfuscates your code and is downright abhorrent and a crime against nature. Stick to trying to model the real-life relationships as well as you can, don't tamper with language fundamentals unless you know when you need to. Edit: Also, Unity sounds like a poor fit. Why aren't you doing this in WPF, WinForms or a website?
Array, list, etc.. those would all be considerably better.
C# gets you horny teens. Why choose any other language?
&gt; On top of that there's comments all over the code that explains why Im doing this as well as how. Comments are often good, but can be misused. Sometimes comments simply cover up bad code smells like deodorant. It can be a sign that there is probably an easier to understand solution to the problem, that would be self explanatory and wouldn't require comments for it to be understandable. One way to achieve this that is often used, is to refactor the code by extracting the section that you are trying to explain in a separate method and naming that method so that it explains what is happening. Essentially you are replacing your comment with a similarly named method. Don't be afraid to be verbose in your code. Strive to make code that is clear and readable, rather than clever. One of the most basic general coding principles is The Principle of Least Surprise (or Astonishment), which means that if your solution is coded in a way that people might not understand, or which will put them on the wrong track, then you should rethink what you are doing.
C# yellow book is pretty good for me so far.
What about being in a list would make processing them any different? You're being told that the way you're doing it is wrong. You shouldn't be justifying your mistake, you should be asking how to do it correctly.
This is really bad, don't do it. Why are your constructor parameters prefixed with an underscore? I don't know anything about Unity, but is there something in Unity that prevents you from using a constructor? Like instead of `Day mon = true;` why can't you do `Day mon = new Day(true);`? 
Agreed! Link - http://www.robmiles.com/journal/2015/9/3/c-yellow-book-2015-bananas-edition-available
Not sure where why you would think this is a good spot for a switch. Switches are meant for spots where the logic differs between each index in the switch since you logic is exactly the same each time no need to use one. Also do not use an inner struct for something like this and do not use an init method. Just assign the arrays where they are created. Not sure what you are using this code for, but from what I see this is what I would of written. https://dotnetfiddle.net/uShDK3
looks cool. One suggestion. run resharpers code cleanup against the examples... public string StringArgument { get; set; } could get simplified with... public string StringArgument { get; set; }
And that is why I have three of them. Mostly in the search for the "perfect" one that addresses the above questions but I never succeeded. 
it's for a game to practice reading Japanese, I'll link you my github https://github.com/Braber01/KanaPracticeRepo/tree/feature/Implementation/KanaPractice
To give you some words for researching this some more if you want to, the `&lt;T&gt;` is called a generic type parameter, the `where T : RegionObject` is called a generic type parameter constraint, a type that has a generic type parameter (like `List&lt;T&gt;`) is called a generic type, and the whole concept of using generic type parameters is colloquially just called "generics".
What are you trying to do? You can use Stopwatch to time things. You can also use DispatchTimer to schedule things to run (e.g. execute a method every 30 seconds). I will shortly be posting a blog entry about DispatchTimer (for UWP) at blog.grogansoft.com. It should be up in a day or two. 
It depends on type of the app. If you have simple forms with five fields then using default validation attributes is OK. But if you need more complex validation logic you need some framework for that. There are also many validation rules you are not able to enforce on the client side (e.g. uniqueness of e-mail address in the database).
&gt;uniqueness of e-mail address in the database but you'd need to write code to set up where to look in the database anyway - if you're using EntityFramework or anything like that in your database, writing Users.Any(u =&gt; u.Email == email) is barely a hardship
Not quite, I'm just taking the car object with the most recent date. Basically there could be a new car and old car, old car, or no car - so I want the newest car if it exists, otherwise the default
Using the ternary operator on this, while it makes it very concise, makes it extremely hard to read. I'm also not sure if it evaluates lazily or greedily, so you'd do well to change it to a few if statements. OrderBy is a very resource intensive operation. If at all possible, use a dateKey instead of the date. That way, you can filter the results, then grab the item with the MAX(dateKey). if (x.cars.any()) { var maxDateValue = cars.Where(m =&gt; m.model == neededModel).Max(c =&gt; c.dateKey); var car = cars.Where(m =&gt; m.dateKey == maxDateValue) ?? defaultCar; } If I'm missing something important, my apologies. I think the biggest takeaway is to use a dateKey that increases monotonically with date, filter as needed, then select the max date key (there's probably a better way than i listed).
im aware that I can write my own attributes for that, all i'm saying is that 'DotVVM' sounds like a software way to push a library full of crap that is in reality saving me no lines whatsoever, as checking simple things is simple code 
When you iterate over a dictionary you get a `KeyValuePair&lt;TKey, TValue&gt;` where you can access the key and the value. Then you can filter them depending on the value and select the key. Does that help you enough?
 MyDictionary.Where(kvp =&gt; kvp.value).Select(kvp =&gt; kvp.key).ToList().ForEach(Console.WriteLine);
I ended up writing my own remote control app from scratch because I couldn't find one that worked in a browser without plugins over the internet.
I think I'd recommend a foreach loop over dumping the keys to a list and using ForEach(). Avoids creating a list you don't need. foreach (var key in dictionary.Where(x =&gt; x.Value).Select(x =&gt; x.Key)) { Console.WriteLine(x); } The approach with the least skill overhead is probably just a foreach loop over the dictionary: foreach (var x in dictionary) { if (x.Value) { Console.WriteLine(x.Key); } } which may be preferable for a task this simple.
Thank you, that's what I was looking for :) 
A lot of superfluous LINQ and garbage generation in the other answers so far. The best idiomatic way is: foreach (var kvp in dict) { if (kvp.Value) Console.WriteLine(kvp.Key); }
Thank you! I will just break the query up into a few manageable pieces with ifs rather than one inline monster. That's a great tip about the orderby, too. This time it's not as bad since in my real example there's only a few objects inside of these queries at this level, but I'll keep it in mind.
Thank god, just because you can do it in LINQ does not mean you should.
It doesn't quite answer the question, but one trick is that you can avoid chaining .Any() and .FirstOrDefault() by using selects. car = x.Cars.Any() ? x.Cars.OrderByDescending(y =&gt; y.date).FirstOrDefault().NewCars : null could be written as: car = x.Cars.OrderByDescending(y =&gt; y.date).Select(c =&gt; c.NewCars).FirstOrDefault() This takes out the Ternary, and won't throw a null reference exception if Cars has no entries. You can continue the query further in the Select section, repeating this pattern for NewCars ... but unfortunately, while it helps cut down on the ternaries, it won't help much with switching between the tables. If performance is a concern, what I've learned is that it's often preferrable to have a simple query executed on the DB that returns more data than you need, and then filtering it in C#, rather than running a complex query to get only the data that you need. So you could also consider just joining in new cars and old cars on the last Cars entry and doing the rest purely in C#.
I swear... I wish I could post the project I'm working on nicknamed "LINQ Abuse" My god... linq everywhere.
DotVVM is not primarily validation framework, validation is just a little piece of it. DotVVM is MVVM framework trying to integrate .NET backend and knockout frontend. It will save you a ton of code, if you are writing ajax calls. Or it will make your application better if you do not :). And the views are generated from control tree (like in WebForms or WPF), which is quite extensible. I personally miss that in MVC a lot.
Pish-posh. Console.Write(dictionary.Aggregate("", (x, y) =&gt; x + (y.Value ? "\n" + y.Key : ""))); (OP: please don't do this this way.)
Needs more Environment.NewLine and String.Empty.
I've literally never had a query return anything other than what was in the SQL database in 2~ years of C# &lt;&gt; SQL. The only instance I can think where null checks would be needed is to find bad data. Would it not be better to find the bad data and prevent it than add null checks for that type of thing?
Compromise? I think the following is a bit more readable: foreach (var kvp in dict.Where(d =&gt; d.Value)) { Console.WriteLine(kvp.Key); }
Do you have to provide the arguments with an ImpliedPosition before any short/long options? Using your sample on the wiki I get the following for the arguments `-d nonDefault -s myString` Parameter | Value ---------| -------- StringArgument | **nonDefault** BoolArgument | False DefaultedArgument | **nonDefault** IntArgument | 43 Same thing happens if I remove the `-s` (making it a positional argument).
So you ended up using ASP.NET? Did it work?
For each key As DictionaryKey In Dictionary.Keys If Dictionary(key).Value = True Then Debug.WriteLine(key) End If Next Edit: Shit, thought this was the dotnet reddit.
Change it to a wpf app.
You'll want to look into the 'Anchor' property on your WinForm controls. This will allow you to anchor them to certain edges of the window (top, right, bottom and left) so that when you expand they will expand with the window.
Can you open an issue in github and ill take a look tomorrow? Not sure why you are getting nonDefault for both as it should scan for named params first. Ill check it out. 
&gt; OrderBy is a very resource intensive operation Not if you're using indexes like you're supposed to...
&gt; database It's literally in the first sentence of the OP.
If I couldn't change the data structures, I think I would probably write it like this if it were me: private Car SelectCar(IEnumerable&lt;Car&gt; cars) { if (!cars.Any()) { return defaultCar; } var latestCar = cars.OrderByDescending(y =&gt; y.date).FirstOrDefault(); var latestNewCar = latestCar.NewCars.OrderByDescending(y =&gt; y.date).FirstOrDefault(); return latestNewCar != null ? latestNewCar : latestCar.OldCar; } This way it's much clearer what is happening and multiple enumerations are minimized.
Also a bit slower, as it can't inline the `Where` clause. But at least it isn't wasting memory left and right.
Also check out [Bootgrid](http://www.jquery-bootgrid.com/) for an alternative to Bootstrap Table.
The authors of the library said they don't put it in because of the possibility of you modifying the underlying collection. Every other extension method enumerates over, but doesn't change. Some people might argue readability, but I would argue it is wasteful to index a list just to save a line of code...in most cases. Ironically the ForEach() can sometimes be harder to read than a simple foreach loop.
I like this. I rewrote it as something similar but I think I'll switch to your way tomorrow. My coworker loves long mega queries so sometimes I get wrapped up in doing it in one big shot even when there is a cleaner simpler way!
&gt; If you are looking for a more automated way to handle this consider something like below: That would be the LESS automated way.
You can use Container Controls to lay out areas of the form, and then as others have said, anchor and dock components into those areas. The Flow Layout Panel and Table Layout Panel will help a lot with this. 
Are you considering a blog on logging? I noticed the line: _logger.LogInformation("Posting new Habit with name {habitName}", value?.Name); I found these references: "Microsoft.Extensions.Logging": "1.0.0-rc1-final", "Microsoft.Extensions.Logging.Console": "1.0.0-rc1-final", "Microsoft.Extensions.Logging.TraceSource": "1.0.0-rc1-final" and added them to the project.json and tried using it, however, I could not find where the logs were being written to and Google did not help much. If you’ve already written on it could you direct me to it? 
Yeah it works great. So the agent talks over websockets to a asp.net websocket server and a console html page talks over websockets and updates the canvas element. The websocket server brokers the screen updates and mouse movements. We are trying to get webrtc working to bypass the broker. It is part of this product my company sells. http://www.cloudmanagementsuite.com/remote-control It even works on phones, tablets and an xbox one web browser.
Off the top of my head, i think you dont need the brackets and x:type for built in types like Button or TextBox etc. I could be wrong but thats my initial thought. 
but both work for BreadCrumb, which is a custom control
Come to think of it, you may be able to use the C# 6 Elvis Operator. Maybe something like (napkin code): car = x.Cars.OrderByDescending(y =&gt; y.date) .Select(c =&gt; c.NewCars.OrderByDescending(y =&gt; y.date).FirstOrDefault()?.NewCar ?? c.FirstOrDefault()?.OldCar ).FirstOrDefault() ?? defaultCar; Though I probably wouldn't recommend it. It will be hard to understand what's going on later on, and Linq-To-SQL or Linq-To-Entities may create a very scary block of SQL from that sort of code.
I wrote a post back in November here: http://dotnetliberty.com/index.php/2015/11/06/asp-net-5-logging-framework/ This was using beta 8, there's been some updates but it is mostly the same. Let me know if that helps. I may do an update post on the RC1 logging stuff.
&gt; Guys sorry and I forgot to say that my form was made in custom design. It means FormBorderStyle to NONE, set the maximize to the size of my CUSTOM MADE FORM and what I want is the margin like what I have done before in HTML , Like 50% to the left something like that. This is what I am talking about http://imgur.com/tmuoTub 
So it is a hack. It's not a best practice basically.
Good point. Reducing enumerations as much as possible is key. 
PM SENT DUDE :) CHEER
I would recommend reading up on the MVVM (Model-View-ViewModel) pattern. It's the "Best practice" for WPF apps. Each field represents a layer in your application. Quickly summarised: * **Models** are your *persistence* layer, i.e. the data you wish to store in a permanent manner. This is what you've generated from the Database First approach. * **Views** are the gui placeholders that a user interacts with, i.e. the formatting of text boxes, images, etc. The filler content is actively pulled from the ViewModels via *Bindings*. Views are your .xaml files. * **ViewModels** are the logic of a given View (i.e. they pair up, though technically you can have multiple Views for a given ViewModel). ViewModels essentially group the necessary Models (the persistence layer) required to achieve the necessary functionality. I.e if you want to edit a Customer in the View, then the ViewModel will contain Customer Model objects and methods of exposing these to the user. 
Hi, author here. The idea behind the library is allow developers to build "cortana-like" text applications, allowing flexibility in the user input. Here at my company, we use it to build messaging applications (SMS mainly but with some experiments in OTT networks) and we believe that this way of interacting with the user has a great unexplored potential, mainly considering the "boom" of messaging apps. The [Telegram](https://telegram.org/blog/bot-revolution) and [Facebook Messenger](https://www.messenger.com/business) apps has new initiatives in this direction and we think this can be a great oportunity for developers. We would love to receive some feedback about the concepts and the API, and would love even more to receive contributions to improve it :)
Do you have to use Windows Forms? I would suggest using WPF instead (Windows Presentation Foundation)
Other developers do not have access to the system. ( agree I use linux tools to view my logs but that is a non IIS environment ) 
sound expensive but looks like a near accomplishment 
 i += 0.5; `i` must be a floating point number for this (obviously).
Unity kind of hijacks constructors for its own organization and set ups. So you usually put all the construction stuff in a Start() or Awake() method.
It's a logic error, basically your calling something in an array or list that say has three items, your calling #4. Show me the code?
.cs files are not really scripts. They are files, usually containing a class per file.
&gt; i cant write i + 0.5 it will error me What? You'd use i = i + 0.5;
private void pbCanvas_Paint(object sender, PaintEventArgs e) { Graphics canvas = e.Graphics; if (!Settings.GameOver) { for (int i = 0; i &lt; Snake.Count || i &lt; Snake2.Count; i++) { Brush snakeColour; if (i == 0) snakeColour = Brushes.Black; else snakeColour = Brushes.LawnGreen; canvas.FillEllipse(snakeColour, new Rectangle(Snake[i].X * Settings.Width, Snake[i].Y * Settings.Height, Settings.Width, Settings.Height)); canvas.FillEllipse(snakeColour, new Rectangle(Snake2[i].X * Settings.Width2, Snake2[i].Y * Settings.Height2, Settings.Width2, Settings.Height2)); canvas.FillEllipse(Brushes.Red, new Rectangle(food.X * Settings.Width, food.Y * Settings.Height, Settings.Width, Settings.Height)); } } else { string gameOver = "Game over \nYour final score is: " + Settings.Score + "\nPress Enter to try again"; lblGameOver.Text = gameOver; lblGameOver.Visible = true; } } thats the code 
It's probably throwing a NullReferenceException because the Request property is null. Here's what I personally do in order to make the form values mockable. It might seem a little overkill, but when working with huge projects it's easier to do all Request class interaction under one file (or, you can go one better and put it into a set of common tools!). 1. Create an IRequestParser interface that has a GetFormValue(string formValue, Request request) method. Implement this within a RequestParser class. 2. In your controller, create a class member of type IRequestParser and two constructors. One that doesn't require any parameters and one that takes an IRequestParser (see https://gist.github.com/IImplementable/3b19d4aa52bcb731d650). 3. Use this requestParser member for all your interactions with your Farm values. So, in order to retrieve your "Managers" form value, you can do the following: string val = this.requestParser.GetFormValue("Managers", this.Request); 4. When testing, create a mock (I use Moq) of an IRequestParser and inject it into the overloaded constructor that will take it, i.e.: // Create your mock. Mock&lt;IRequestParser&gt; requestMock = new Mock&lt;IRequestParser&gt;(); // Set up the mock to return the value you want. requestMock.Setup(x =&gt; x.GetFormValue(It.IsAny&lt;string&gt;(), It.IsAny&lt;HttpRequestBase&gt;()) .Returns("Foobar"); // Call your test method. var myController = new MyController(requestMock.Object); myController.Foo("bar");
You can do double x = Snake[i].Y; x += 0.5;
Does this abandon the .sln + .csproj system for .json? Is that supported already by Visual Studio and MonoDevelop?
If `Snake` has 3 segments and `Snake2` has 4 segments, `i` will go 0, 1, 2, 3. The exception is thrown when you try to access `Snake[3]` because `Snake` only has 0, 1, 2. You should move the loop to a separate function so you can draw the snakes one at a time. DrawSnake(Snake); DrawSnake(Snake2);
For reference, here's an implementation of your suggestion: http://stackoverflow.com/a/14629365/1269654
&gt; Math.Round(39.995, 2); This would _round_ the value. /u/moss_in_it wants it _truncated_.
 &gt;&gt; Math.Round(39.996, 2) 40 That won't work. /u/MurphysParadox has the right answer.
No, but it seems to be something worth considering :) The nearest thing that we have now is a [pre processor] (https://github.com/takenet/textc-csharp/blob/master/src/Takenet.Textc/PreProcessors/SpellCorrectPreProcessor.cs) that tries fix the grammar before processing. You feed it with a sample file, then it extracts the text words and uses them as a dictionary taking the number of ocurrences in consideration. The implementation is based on [this article](http://norvig.com/spell-correct.html).
Yeah, that's what I was thinking, thanks.
What works perfectly for me is this: // thats a decimal, of course amtPerPayment = amtPerPayment - (amtPerPayment % 0.01M); amtPerPayment = Math.Round(amtPerPayment, 2);
That's the right, idea, yes.
Also valid. I keep forgetting about the magic of modulo of numbers under 1.
Multiply by 10^n , floor it, then divide by 10^n , where n is how many decimals you want preserved, 2 in this case. x = Math.Floor(x * 10^n) / 10^n
You could get a list of directories and then loop through that list to through another get directories. Wrap that in a try catch and any directory that is restricted will fall to your catch. 
I dont want to list all possible subdirectories and catch errors just for performance reasons. GetDirectories is quite slow
I would like to see a debugging walkthrough as well. Any large dev work is a LOT of Console.WriteLines!
That's actually pretty cool. I spent a bit of time and built a little proof of concept because I was curious on how this all works and how to make use of it in C#. [LinqPad File](http://share.linqpad.net/9k47fm.linq) was the result. Even if you don't have linqpad, you can just open the file in a editor to get to the code. It uses Kernel32 to get the reparse point data and parses it down to the known Microsoft tags. I haven't yet figured out how I can read out the reparse buffer for symlinks and mounted references but oh well.
I have a static class that has methods that save and load program data by serializing and deserializing XML files. All data in this desktop application is stored and retrieved like this. Unfortunately, I'm unable to save event handlers in these objects this way, so I was thinking I could mark a method in these classes as something like [InvokeOnDeserialize] and the method that deserializes these objects would also scan the contents of the object for this attribute and invoke the marked method. In this method I would have the object subscribe to any events, or set up circular references, etc.... Stuff that gets "lost" during the serialization/deserialization cycle. I'd like this to work on any type of object that can be serialized by xmlserializer.
Yes, that's kind of what I have now, but I still have the challenge of traversing through the deserialized object's properties looking for any object that implements the interface. For most of these classes there are several properties of IEnumerable&lt;T&gt; (or more specifically ObservableCollection&lt;T&gt;), so I would need to iterate through these collections' items and each item's properties that may include other properties of IEnumerable&lt;T&gt;, and so on and so forth. It's possible to do with reflection and recursion, but it's messy (well PropertyInfo.GetValue's quirks make it messy) and I was hoping there was another more simple way. I was really hoping there was something like this built in for XML deserialization. There is for System.Runtime.Serialization, but not for XmlSerializer as far as I'm aware.
Why can't that method be responsible for doing it? Delegate your responsibilities. Something like this: public interface IThing { void Method(); } public class SubThing : IThing { public void Method() { //do the thing } } public class Thing : IThing { public ICollection&lt;SubThings&gt; SubThings {get;set;} public void Method() { foreach(subThing in SubThings) { subThing.Method(); } } }
That's exactly how I'm doing this currently, and it works and is simple but I was hoping for a more general, maintainable, encapsulated way where I could decide what each object needs in it's own class definition instead of the parent's or grandparent's class. Maybe a better solution doesn't exist.
But then why are you trying to use reflection to grab any method with some attribute, and run it? Isn't that the same thing you're trying to do?
It is 2015. Please, don't debug with Console.WriteLine. Serilog(or alternatives) should be your best friend.
Logging is my first step, but I can't imagine not using a proper debugger for anything non-trivial. I've used command line debuggers before (well, one command line debugger -- gdb), and I don't like them. This is something that GUIs clearly do better. Particularly an IDE. It's just so useful to have numerous windows keeping track of the code (allowing hovering over variables to see their values and explore their properties), the stack, the local variables, being able to execute arbitrary commands (stuff like print the results of calling some method on a variable), etc. I also find it's usually faster to debug with a GUI as opposed to the command line. It's just easier to access data quickly (short of learning a few dozen more hotkeys). Anyway, I wouldn't want to be adding a bunch of unnecessary logging lines and removing them just for debugging. I totally do that sometimes, but attaching a debugger is usually faster. I would mostly use logging for weird situations like production only bugs. Which reminds me of a mindnumbingly annoying bug I had a short while ago in an ASP.NET application. It initialized logging in `Application_Start`, which is run before a debugger can be attached. On local environment, there was no problems. On production, everything mysteriously wasn't working. Turned out logging failed to setup because the log file couldn't be written to (bad default directory permissions). That threw an exception that couldn't really be found by normal means and prevented other important startup code from running. So everything was failing, but couldn't be logged. In retrospective, it seems like it should have been more obvious that permission issues would be the thing, but at the time, it was a real headscratcher.
I've been playing with it. Right now the debugger requires you to compile with mcs from mono. It's a little clunky but I'm sure they will get it worked out.
&gt; One of them is ReparsePoint, which blocks user access. Reparse points don't block user access any more than other directories can. The only completely reliable way to do this is to catch UnauthorizedAccessException when accessing.
Have you tried adding it to your PATH?
Unfortunately, `XmlSerializer` does not support those attributes. 
Yes i've tried it, it work. but i wouldn't change the windows proxy i just want to change my application proxy :/ because i'll need to run others software with my land line proxy 
Yeah, very stupid mistake, sorry.
The second way is better, as it more clearly and concisely communicates intent. You should look at passing a StringComparison to Equals(), or using a StringComparer, instead, though. if (!stringVar.Equals("bob", StringComparison.Ordinal)) { /* stuff */ } if (!StringComparer.Ordinal.Equals(stringVar, "bob")) { /* stuff */ } InvariantCulture or CurrentCulture may make more sense than Ordinal, depending on what you're doing, and there are case insensitive versions for all three for each approach, above. If you need to compare two strings in the context of an arbitrary culture, it looks like you'll need to use String.Compare(), but I don't think that's tremendously likely.
I agree that the second one is normally preferable. The only reason I can think of to do it the first way is if you've got a more complex if statement and it's easier for someone reading your code to understand the flow by doing it that way. Something like this, only less moronic: if(rareOccurrence &amp;&amp; weirdError &amp;&amp; timestamp == onceInABlueMoon) { //The combination of the above triggers a weird bug, so we can't do stuff if that happens } else { DoStuff(); } Edit: to illustrate better why I prefer this solution, consider the alternative: if(!rareOccurrence || !weirdError || timestamp != onceInABlueMoon) { DoStuff(); } This does the exact same thing, but doesn't maintain the semantics. Instead of saying "if all this weird shit happens at the same time, it's a special case", it says "if at least one of these things doesn't happen, it's the general case." Same function, but it reads differently to the developer coming after you.
Unless performance is absolutely critical go for the most readable option. Unless there are specific style guidelines you have to follow, use what you think is the most readable. In simple cases like this I would go for: if (stringVar != "bob") { //Do stuff }
When it comes to to *what is more efficient* there is only one valid answer: **Profile it!** When you don't profile your code, you don't really But considering the triviality of your example, the proper answer is: **It doesn't matter!** These are not optimizations, these are not even micro-optimizations, these are **nano**-optimizations. It's not worth the optimization. Use whatever code you consider more readable.
The simplest way to reuse the found name would be to have the function return it, like this: static string SearchClient(string kl) { using (StreamReader sr = new StreamReader(@"C:\temp\myfile.txt")) { while (sr.Peek() != -1) { if (kl == (sr.ReadLine())) { Console.WriteLine("found person"); string personName = sr.ReadLine(); Console.WriteLine(personName); return personName; } } } return String.Empty; } Now, you shouldn't call this every time you need the person's name - that would be terribly inefficient, unless the reference changes ;) Call it once at the program start (or when you first need it) and store the result in a member variable: public class YourClass { private string foundPersonName; .... public YourClass() { foundPersonName = SearchClient("somereference"); } } Once you've assigned the member at least once, you can reuse it anywhere in the class.
You've got a small bug right before the return statement - the returned value would be the line after the name, and not the person's name ;)
Thanks for that, I changed it!
When you try to access an index of an array that does not exist, that exception will be thrown.
Thanks! that worked. 
~~Also note that you probably shouldn't use == with strings. Use the .Equals() form instead. In some(all?) cases, the == compares the references of the strings, not the contents.~~ ~~If (sr.ReadLine().Equals(kl))...~~ Also, I'd name the kl variable searchString or something like that. kl has no meaning. Edit: yes I was confusing java and c#. Sorry. I think my other point stands. 
Unless your strings aren't typed as _string_ (i.e. they are objects or generics), there is no difference between == and the _Equals_ method. This is an issue in Java however, where there is no operator overloading.
Or for things like this, instead of profiling, you can look at the compiled IL to see if it differs. That will tell you whether or not the compiler optimizes the difference out (and it does). I like LINQpad for this.
That is part of profiling.
It's actually the opposite in C#. As the others have stated, `==` will check the string content, but it _also_ checks for `null` references. If the left side of your check is `null`, using `.Equals` will result in a `NullReferenceException`. As such, it's actually recommended to use `==` for string comparison over `.Equals` (and typically, this applies to most object comparisons even beyond strings)
The first example attempts the cast, and throws an `InvalidCastException` if it fails. The second example attempts the cast, and gives `null` if it fails. You should use the first when you are certain that the cast won't fail.
You have covered all the important bits. There is however a particular scenario: Corgi c = null; Dog dog = c; // example 1: var corgi = (Corgi) dog; // does not throw exception, corgi is assigned null // example 2: var corgi = dog as Corgi; // corgi is also assigned null So, now in the second example, it is not known whether the cast failed or if you just started with _null_. Subtle difference, but who knows what strange bugs it may generate if not considered.
Good on you for throwing yourself out there and accepting criticism. I think I would run and hide after that feedback. Learn from it, get better, and keep rolling. 
Its WPF XAML styles
And you avoid the null reference exception for free !
1. having commented out lines in the code doesn't help, for sure 2. The ReadaLine, although far from optimal (speed wise), looks ok 3. I suspect the problem is the fact that you don't seek to the correct position, when you write the text. Thus, when reading file, you should find out the position to write at. Also, you should take into account that if the line's new length changes, you need to account for that (and write all remaining text). Easiest solution is this: read the whole text as string[], then replace the line you want, and the write it again: var lines = File.ReadAllLines(path); lines[some_idx] = my_awesome_line; File.WriteAllLines(path, lines); Best, John 
Would be prudent to post what error it is that you're getting. Regards, 
Nope, the only setter public properties are Property, Value, and TargetName
I updated my post with the error.
Convert the array \(string[]\) into a List&lt;string&gt; and append the line, then write it all lines back into a file: &gt; var lines = File.ReadAllLines\(path\); &gt; var list = new List&lt;string&gt;\(lines\); &gt; list.Insert\(rowNumber, yourNewLine\); &gt; File.WriteAllLines\(path, list\);
With strings, aren't the references always going to be the same if the contents are the same? My understanding is that .NET will only.keep a single reference go each unique string (string interning).
Even if it differs, generally, if this is not something you can identify via profiling as a performance bottleneck, then it's not worth the time you've spent to check the IL. (It's a different story if you are just doing this for learning purposes. One should never be shy of being curious.) Usually we have limits on time to deliver, in which case the rule is make the code readable and functional and only optimize it if it shows up red in the profiler. The most I do in cases where I've got a method with some code that smells inefficient is add a comment/bug that we should consider profiling this feature and seeing if its worth changing. 
As others have stated, 'as' is generally considered to be a safer cast, because if the cast fails you don't get an exception. You just have to check your result for null. However, you also have 'is' as an option. It will attempt the cast, and return a boolean indicating whether the cast succeeded or not. If (corgi)dog would result in an exception, then (dog is corgi) would return false. It's not always useful, but there are some cases where you just want to check without actually performing the cast, and it's a good thing to know just in case.
I am someone whom actually knows what the fuck they are talking about....likely the only one in this thread....you clown.
`AddText` doesn't make any sense. It uses `line` as a byte offset instead of a line index. `ReadaLine` has to read potentially the entire file for every call. What are you really trying to do? You seem like you'd be better served by a fixed-width record style file, rather than a text file.
Could you clarify what you mean by finding a suitable benchmark? The way I see it is if you can run a plausible scenario and see that there is an impact which would be noticeable to the customer. If the scenario doesn't have a notable impact, then it's faster to do nothing. If it does, then you can rerun that scenario with a profiler to see what is happening. Then if you see that the scenario is slow because of that piece of code, you investigate further (look at IL or whatever other options you have). If you do that before profiling and the problem was with another piece of code, then the time you spent looking at and understanding the IL solves the wrong problem. So while it might feel faster it's actually slowing you down. 
Well, you can set the others like .Value too.
Resharper won't replace the code with the method anywhere it shows up in the code though. A search and replace can do that though. 
Instead of trying to futz around directly with XML just make a class to store your data then serialize it to XML, it will make your life much easier. 
For things like laptop screens and monitors that can be 'intelligently' controlled, there's WmiSetBrightness to do this: https://msdn.microsoft.com/en-us/library/aa394538%28v=VS.85%29.aspx?f=255&amp;MSPPError=-2147217396 This involves making a WMI query using the System.Management namespace.
Well, it's not, because of the XML schema.
the xml schema? If i inherit Setter and set the ContentProperty, it seems to work without issue [ContentProperty("Value")] public class AnotherSetter : Setter { } but obviously thats ill advised
Hey thanks for pointing this out, I think I'm going to give this method a shot. There doesn't seem to be many examples of this out there so maybe when I get this working I'll try to share.
You generally want the most likely result to come first, because branch prediction will start predicting the first. Of course between C# and machine code that might get mangled. The way to know is to test both options and see which is more efficient. The difference will be ~nanoseconds so only bother if this is insane a tight performance critical loop. 
You got me curious, so I disabled JIT-suppression in VS, and opened the dissassembly window to have a look at what it produced. Interestingly, I had to re-run it a few times to get similar output. The JITer seems to vary a bit. When using `if (!stringVar.Equals("bob")){}` I got 002E2DA8 push ebp 002E2DA9 mov ebp,esp 002E2DAB call 796928DC 002E2DB0 mov ecx,eax 002E2DB2 mov edx,dword ptr ds:[31C230Ch] 002E2DB8 cmp dword ptr [ecx],ecx 002E2DBA call 7900B840 002E2DBF test eax,eax 002E2DC1 jne 002E2DCE 002E2DC3 mov ecx,dword ptr ds:[31C2310h] 002E2DC9 call 78FFD4B0 002E2DCE pop ebp 002E2DCF ret For `if (stringVar.Equals("bob") {} else {}`: 002D2DA8 push ebp 002D2DA9 mov ebp,esp 002D2DAB call 796928DC 002D2DB0 mov ecx,eax 002D2DB2 mov edx,dword ptr ds:[344230Ch] 002D2DB8 cmp dword ptr [ecx],ecx 002D2DBA call 7900B840 002D2DBF test eax,eax 002D2DC1 jne 002D2DCE 002D2DC3 mov ecx,dword ptr ds:[3442310h] 002D2DC9 call 78FFD4B0 002D2DCE pop ebp 002D2DCF ret While with `if (stringVar != "bob"){}` I got 002E2DA8 push ebp 002E2DA9 mov ebp,esp 002E2DAB call 796928DC 002E2DB0 mov edx,dword ptr ds:[33F230Ch] 002E2DB6 mov ecx,eax 002E2DB8 call 78F60FF0 002E2DBD test eax,eax 002E2DBF jne 002E2DCC 002E2DC1 mov ecx,dword ptr ds:[33F2310h] 002E2DC7 call 78FFD4B0 002E2DCC pop ebp 002E2DCD ret for `if (stringVar == "bob") {} else {}`: 001E2DA8 push ebp 001E2DA9 mov ebp,esp 001E2DAB call 796928DC 001E2DB0 mov edx,dword ptr ds:[320230Ch] 001E2DB6 mov ecx,eax 001E2DB8 call 78F60FF0 001E2DBD test eax,eax 001E2DBF jne 001E2DCC 001E2DC1 mov ecx,dword ptr ds:[3202310h] 001E2DC7 call 78FFD4B0 001E2DCC pop ebp 001E2DCD ret The lines like `ecx,dword ptr ds:[33F2310h]` are the addresses to where the addresses of the string literals "bob" and "yay" are stored, the function at `796928DC` is `Console.ReadLine`, `78FFD4B0` is `Console.WriteLine`. Notice that the first two both call `7900B840`, while the bottom two both call `78F60FF0`.
I'd consider parsing the input file entirely once into a dictionary instead of reopening it and memoizing it per key. Something like: static Dictionary&lt;string, string&gt; parsedFile = null; static string SearchClient(string kl) { if (parsedFile == null) { parsedFile = new Dictionary&lt;string, string&gt;(); using (StreamReader sr = new StreamReader(@"C:\temp\myfile.txt")) { while (sr.Peek() != -1) { parsedFile.Add(sr.ReadLine(), sr.ReadLine()); } } } if (parsedFile.ContainsKey(kl)) return parsedFile[kl]; return string.Empty; } 
Then I hope there would be a way to seek through it instead of reading it line by line and expecting to read 1gb worth of string data per unique call :p 
where can I learn about serialization?
The main issues I have with this approach: 1. You cannot define fields in an interface, only properties and methods 1. Properties allow for validation to occur when something is accessed. 1. If you have properties exposed, you can change what the property does without renaming it. If they call the field directly, you cannot really change the behavior. Obviously cutting a layer of abstraction makes your code more efficient, but you're giving up DI, IoC, and testability in the process.
&gt; I am someone whom actually knows what the fuck they are talking about No, you're not. You've allowed your dislike of microsoft or fear of change or whatever to cloud your judgement. Go away and think about your life.
Your c# code seems a little disingenuous. You have this. //Private members private float a; private float b; private float c; //Properties public float A { get { return a; } set { a = value; } } public float B { get { return b; } set { b = value; } } public float C { get { return c; } set { c = value; } } More idiomatically: //Properties public float A { get; set; } public float B { get; set; } public float C { get; set; } The fact that you used the long-winded version leads you to some conclusions that I don't think are well supported, such as that fields are better for debugging. I think properties are clearly better, since it's possible to put a breakpoint in them. Properties also have some other advantages you didn't point out. These include * extensibility (adding behavior to getters and setters) * differing visibility of getter and setter * can be used with data binding * can participate in inheritance ( you can't delcare an `abstract` field) One advantage to properties in c# * can't be passed as `ref` parameters (interestingly, they can in VB)
I think I'll stick with properties...
So first off I stated the last two in the article, but the first one I am aware of but it is not the common case that I see them used in, generally what I see happen is people are told "everything is private by default and you use properties to access them", which to me is almost total nonsense, data doesn't need to be private until it needs to be private, which in the article I stated if you needed to do some validation on a write then fine, but otherwise there's not a lot of benefit to using them. I don't really know why people are flaming this so hard, I mean I simply addressed some issues I see with them, and said if you have to use them then use them, I didn't say you can't use them and that they are pointless. 
Okay...I mean if you can point me to the part of the article where I said don't use them ever I would appreciate it.
If you can't tell what's going on at a glance do future you a favor and make it more readable.
And that's fine, I didn't write this to say you can't use them, my main thing was hey, a lot of people write these things senselessly and seemingly for no reason and I am so sick and tired of doing code reviews and seeing completely useless code, if you have a use for them then use them.
There has got to be an easier way to do this.
XML and XML schemas have no notion of a ContentProperty or C# attributes. Looking at the actual Schema, there is something wonky going on with your example code. Value, Property, and Expression are all defined as XML attributes, not XML elements. That means, your declaration SHOULD look like: &lt;Setter Property="Stuff" Value="9"/&gt; XOR &lt;Setter Property="Stuff" Expression="Math.Max(9, Math.Sqrt(AnotherPropertyName))"/&gt; Here is the entire schema entry for Setter. I found it in &lt;Visual Studio install directory&gt;\Xml\Schemas\1033\Dgml.xsd: &lt;xs:element name="Setter" minOccurs="0" maxOccurs="unbounded" vs:snippet="yes"&gt; &lt;xs:annotation&gt; &lt;xs:documentation&gt;A setter can set a UI property of the matching graph objects&lt;/xs:documentation&gt; &lt;/xs:annotation&gt; &lt;xs:complexType&gt; &lt;xs:attribute name="Property" type="PropertyType" use="required" &gt; &lt;xs:annotation&gt; &lt;xs:documentation&gt;The UI property being set&lt;/xs:documentation&gt; &lt;/xs:annotation&gt; &lt;/xs:attribute&gt; &lt;xs:attribute name="Value" use="optional" vs:snippet="yes" &gt; &lt;xs:annotation&gt; &lt;xs:documentation&gt;The value of the property being set. This property is mutually exclusive to the Expression attribute&lt;/xs:documentation&gt; &lt;/xs:annotation&gt; &lt;/xs:attribute&gt; &lt;xs:attribute name="Expression" use="optional" &gt; &lt;xs:annotation&gt; &lt;xs:documentation&gt; The setter Expression attribute is mutually exclusive to the Value attribute and allows a simple expression to be calulated for the property being set. For example the expression 'Math.Max(9,Math.Sqrt(LinesOfCode))' calculates a number based on the LinesOfCode property equal to the square root of that property, and returns no less than 9. This result could then be assigned to the FontSize property to achieve node sizing based on code size. &lt;/xs:documentation&gt; &lt;/xs:annotation&gt; &lt;/xs:attribute&gt; &lt;/xs:complexType&gt; &lt;/xs:element&gt; 
What bias? I think I use fields and properties about equally, but I think you are missing most of the advantages of properties.
yeah- we were able to use lldb using mcs and mono, but dotnet-cli?
that appears to be largely the same thing... I just want a debugger.
If possible I would recommend to encapsulate alot of those logic and just have a method exposed. Something like GetFirstLatestNewCar(). It'll make the whole line easier to read. 
For pure communication I'd use sockets, for pure data a database. For data that needs to be in sync I'd use both.
Sockets sounds like what I need, is TCP/UDP what I'm looking for? ^(a ^resource ^would ^be ^very ^helpful)
True. DB is an overkill, I'll create a socket with TCP client/server. Thank you
Search for something like C# TCP echo sample.
Accessing public members across threads is fine (but you got to make sure you don't cause racing conditions / don't access members **at the same time across threads**). But your error is completely unrelated to that. Do you understand what a `NullReferenceException` means? If the answer is no or a maybe, then you should take many steps back and drop sockets and threads.
&gt; the public versions win code-cleanliness hands down every single time no questions asked, there is no question about that You're using the length of the code to say that properties are less clean. Thus your intentional not-usage of the auto properties is biased.
If I had to guess I'd say it's because the value of the setter doesn't exactly qualify as content in the same way content for a stack panel or a textblock's content does, and Microsoft wanted to make that distinction. 
I'm using the exact same version of visual studio. Don't think the version of visual studio would matter though. Maybe a different version of the .Net framework? Mine was set to 4.5.2. I tried again with 4.6.1 and got the following in debug mode. var stringVar = "bob"; if (stringVar.Equals("bob")) { Console.WriteLine("yes bob"); } else { Console.WriteLine("no bob"); } .method private hidebysig static void Main() cil managed { .entrypoint // Code size 51 (0x33) .maxstack 2 .locals init ([0] string stringVar, [1] bool V_1) IL_0000: nop IL_0001: ldstr "bob" IL_0006: stloc.0 IL_0007: ldloc.0 IL_0008: ldstr "bob" IL_000d: callvirt instance bool [mscorlib]System.String::Equals(string) IL_0012: stloc.1 IL_0013: ldloc.1 IL_0014: brfalse.s IL_0025 IL_0016: nop IL_0017: ldstr "yes bob" IL_001c: call void [mscorlib]System.Console::WriteLine(string) IL_0021: nop IL_0022: nop IL_0023: br.s IL_0032 IL_0025: nop IL_0026: ldstr "no bob" IL_002b: call void [mscorlib]System.Console::WriteLine(string) IL_0030: nop IL_0031: nop IL_0032: ret } // end of method Program::Main var stringVar = "bob"; if (!stringVar.Equals("bob")) { Console.WriteLine("no bob"); } else { Console.WriteLine("yes bob"); } .method private hidebysig static void Main() cil managed { .entrypoint // Code size 54 (0x36) .maxstack 2 .locals init ([0] string stringVar, [1] bool V_1) IL_0000: nop IL_0001: ldstr "bob" IL_0006: stloc.0 IL_0007: ldloc.0 IL_0008: ldstr "bob" IL_000d: callvirt instance bool [mscorlib]System.String::Equals(string) IL_0012: ldc.i4.0 IL_0013: ceq IL_0015: stloc.1 IL_0016: ldloc.1 IL_0017: brfalse.s IL_0028 IL_0019: nop IL_001a: ldstr "no bob" IL_001f: call void [mscorlib]System.Console::WriteLine(string) IL_0024: nop IL_0025: nop IL_0026: br.s IL_0035 IL_0028: nop IL_0029: ldstr "yes bob" IL_002e: call void [mscorlib]System.Console::WriteLine(string) IL_0033: nop IL_0034: nop IL_0035: ret } // end of method Program::Main 
Though direct TCP would yield lower latency than with HTTP(?), which always is good for optimized software. 
As others have stated, null reference is simply when you're trying to use an object that is null. Just looking at your code, you assign the writer field in the Receive method. Which means your class requires the Receive method to be called before the Send method. You have a similar problem with the client field being used in the Receive method before it's setup (in the Listen method). I'd recommend you refactor your class, to be less dependent on calling methods before other methods to function. I, as someone who'd use your library, or even yourself (as is apparent right now) would not know that. Typically anything that needs be setup class wide should be done in the constructor, or in the method using that piece.
All good stuff. I ended up making a .NET Fiddle program that seems to work flawlessly, no mater what you throw at it. https://dotnetfiddle.net/VBaw2h
It looks wonky because XAML isn't the same as XML, but rather extends it. The ContentProperty attribute allows you to specify child elements under the node of the class even if the schema doesn't allow it
Beyond what other people have corrected in terms of your incorrect assumptions and conclusions, regarding "Working With the Hardware Rather Than Against It" section and your assembly code, I think this also mostly incorrect. Did you compile using code optimizations? Were you inspecting the JIT'd assembly code that was running from Visual Studio? I ask because empty properties such as yours actually JIT compile to _direct field access_ anyway (plus the existence of the `NOP` instructions seems suspect to me). In practice, using fields and basic property wrappers result in the _exact same assembly_, assuming the implementation of the CLR you're using supports it (most, if not all, do). Unless you start tagging on modifiers (e.g., `virtual`, `abstract`), (EDIT: or use it from interfaces I believe), or flag it with a `MethodImplOptions.NoInlining` attribute, or fill the property bodies with enough code that it no longer inlines, (so essentially, make the properties no longer functionally equivalent to fields) there is no difference to using fields when it comes to the assembly code. There's some more discussion here along with an answer that has steps to make sure you include all C# compiler and JIT compiler optimizations for when you inspect the compiled/executing code: http://stackoverflow.com/questions/9842917/field-vs-property-optimisation-of-performance
I have often enjoyed and appreciated Scott Hanselman's posts, but the writing for this one was nearly impenetrable.
That makes no sense. You still did it on purpose. 
No, that is not me. That person has much more free time than I have! I acknowledge that this was a quick one-off blog post. Scott doesn't owe me any fine works of literature. But I would still enjoy reading a carefully-written, more in-depth treatment of the dotnet CLI.
No, I didn't. I did it the way that Microsoft clearly intends for you to do it, there's shorter methods for most things if you give everything one letter names, condense everything to one line, use delegates instead of function, etc. but they are not the common case. I chose literally the most unbiased option there is, which is letting Microsoft lay it out for you.
It's useless if you never end up needing it to be there. Also at zero cost is totally not true, if I write a get and set for every field in say a sign up form for a user, that can be on average 10 to 15 fields I have to account for, writing a property for every one of them even as an auto-generated takes a significant amount of time, writing more code always has more cost than not writing it. In my opinion you should write for your use case, get it stable, then extend it; Write the code you need, not the code you think you might need.
Yes you did. The unbiased way would be to type `prop` and hit tab twice.
Funny that you mention a form, given that WPF requires properties for databinding. And if you take significantly longer to type `public string Username {get; set;}` than `public string Username;`, you suck at typing. Also, when your use case is to make an API for others to use, you should use exclusively properties for your public interface, since then your users can replace your .dll without having to recompile everything if you make changes to add validation, for example.
&gt; At the end of the day this all comes down to opinion because it's not a ~~huge~~ performance penalty *at all* or ~~a ton of~~ *takes more* time to write the code FTFY And good job essentially making your whole article pointless. 
&gt; The whole point of this article in the first place wasn't even about C# properties specifically, I was talking about the whole idea of getters and setters in general In this case, your article should be discussing the pros and cons of [_encapsulation in general_.](https://en.wikipedia.org/wiki/Encapsulation_%28computer_programming%29) Instead, you do spend a good deal of time on the aesthetics/cleanliness aspects of the code syntax (which readers here pointed out you used archaic syntax for), you criticized debugging aspects incorrectly and ignored debugging _benefits_ of properties, you criticized reusability based on how much work is involved with renaming a property (which again, was out of ignorance because you chose to use an archaic syntax), and finally you also made criticisms of undue work on the compiler and emitted assembly code that were not accurate. Ultimately, the only real criticism that could remotely be considered valid for "the whole idea of getters and setters in general" was with handling of how properties are accessed. (The whole `v.X = 5;` being ambiguous if it's a field access or property access) And guess what? That is a C# syntax decision. If this was about "getters and setters in general", you could look at Java and see that their equivalent would be `v.setX(5);` and there is no ambiguity about that whatsoever. There's a whole debate as to whether or not it's a "good" or "bad" thing to have C# property access look like fields. I suspect though if you were to survey C# developers out there, they would overwhelmingly favour the syntax chosen over something like Java's `getX(), setX(value)`. There's a good argument to be made that 99% of the time, you don't care if it's a field or a property, and the 1% of the time you _do_ care, Visual Studio reports it (by mousing over, intellisense, and so on).
I second this opinion. Reading just the conclusion: &gt; In conclusion, I am of the opinion that unless you have a very, very good reason to use them, getters and setters are actually completely useless. We have looked at actual metrics and deeply analyzed each one and come to the conclusion based on actual data that these things makes code slower, less debugable, less readable, less robust and cause more work to expand it, they take more time to write, and they actively work against the CPU. I hope that this makes you think about features before you use them, and as I said I am not against modern programming, there are features I really quite enjoy having, however stuff like this where there is actually no hard data to back up the claims that they help you in any meaningful way are totally pointless and actually just end up creating a lot of headache in the end. The blog post, as it stands, is not written in a way to start a positive discussion. It's unfortunately built around incorrect analysis, archaic out-dated syntax, is critically incomplete (overlooking/omitting aspects and syntax of properties that counter the posts arguments), and both the arguments and conclusion built on those arguments are ultimately simply erroneous. Then the blog holds steadfast to those opinions painting other developers in a fairly negative light, and generally exuding a sense of "I'm doing it right, you're doing it wrong." And I'm not saying it's not OK to be wrong about these things. We all learn these aspects at some point, we all share opinions or views at some point that are flawed, and we all change and grow as we continue to improve as developers. But generally speaking, a lot of flak you, /u/Trevor266 are getting from this, is the level of arrogance that exists in this blog post and the attitude and views that you seem to hold towards your fellow developers. If you wish to legitimately start a positive discussion on the subject, or are using it as a tool for self-teaching, or simply to at least have some worthwhile (not overly negative) criticism towards your work/blog, then I suggest your future blog postings and interactions with developers (online and in real life) are done so with much more humbleness and openness to learning and understanding, and to make sure your starting point is one where if you don't have full knowledge on the subject, that you go forth and better research it. EDIT: And where you recognize you don't have sufficient knowledge on the subject, and your research is fruitless, that such discussions or blog posts are based more around asking questions rather than focusing on incorrect conclusions.
While some of the commenters here are being a bit blunt (some worse than others), I think you're going to have to serve yourself a slice of humble pie at some point, Trevor. A 20 year old with 5 years of programming experience still has _a lot_ to learn. I've been a full-time professional programmer for over a decade, with a decade of hobbyist programming before that, and I recognize that _I_ still have a lot to learn. I hope that you're able to develop a more positive view of your fellow developers, to be able to work with them without such disdain, or you may find your professional life more difficult than it need be.
You mentioned Jetbrains stuff (specifically IntelliJ IDEA)- I've used both VS and IDEA extensively and I can say that they are basically fighting eachother every year for 'best IDE' award; and leave everything else I've ever used coughing on their dust. Specifically I'd say the debugging features you're probably missing- breakpoints &amp; conditional breakpoints, the locals and immediate window, thread + stack views, etc... Are what I'd miss the most. Not sure how well integrateable all that is with Unity3D though- I know roughly that it's not the most up to date .NET, right?
Thanks yes -- I use MonoDevelop (an earlier version of Xamarin Studio) for that kind of debugging, it's not bad for the basics.
You need to take into consideration several things, including speed, reliability, scalability, maintainability and how you're going to interface with the database. Sure, Dapper is lightweight and fast, but don't discount other ORMs until you do some research. Choosing an ORM is a big deal. Don't rush it. You need to get your DBA's input as well. I've used Entity Framework (EF) since version 4 and I know a lot about it's pitfalls and performance issues. I personally like EF and it meets my business needs, but that might not be the case for your situation. If you decide to go with EF, use version 6.1.3. There are several approaches you can take. 1. Code-first. You write the classes and these get translated into tables. This takes away control from your DBA and creating migration scripts is a source of major problems. I do not recommend using this approach. 2. Reverse engineer your tables. You first create your tables with your DBA's involvement, get them normalized and indexed and then create your classes based on those tables. Your classes will be written by hand and mimic the tables. You still use features such as Fluent API, but your code does not manage the tables. I recommend this approach as it gives your DBA total control over the database and you merely access it. 3. Using the EDMX file to map to your tables. In this approach, you create tables and use an EDMX file to maintain your entities and complex types. I strongly discourage this approach for several reasons: the EDMX file will become bloated over time and cause source code merge conflicts, entity relationships are fragile and will break at some point in time (guaranteed), the EDMX file can become corrupted and unusable and going forward the EDMX file is deprecated by the EF team in favor of approach 1 and 2 as I mentioned above. EF is totally acceptable for a majority of smaller companies. It performs very well and the speed improvements have been impressive in every new version. Keep in mind that EF 7 is going to be out in the future and it is a total rewrite from the ground up. EF 6 is the recommended version of EF until EF 7 is feature complete, so do not use EF 7 at this time (see Julie Lerman's blogs). If your company is larger and speed is critical, I would recommend a micro ORM. Micro ORMs are very fast and lightweight. Pluralsight has a good course on micro ORMs which explains the differences between the major five micro ORMs. https://app.pluralsight.com/library/courses/dotnet-micro-orms-introduction/table-of-contents Dapper is a nice open source ORM and is fast, but the biggest complaint I had with it is that it uses inline SQL, which may not be maintainable over time. In previous jobs where the database structure was not stable, I experienced changes to tables such as new columns, new foreign key restraints and column name changes, which caused code to fail using inline SQL. Of all the five major micro ORMs, my personal favorite is ORMLite. ORMLite performs almost as well as Dapper (we're talking microseconds in performance difference in most cases), has the ability to use LINQ on entities (unlike Dapper) and is constantly being updated. With ORMLite, I believe it supports code-first, but I only used it to reverse engineer my existing tables. It has a very low-level, code-first feel to it and is very fast. I compared it to EF and found it performed a few hundred database reads whereas EF performed over 100k reads in my tests. I HIGHLY recommend ORMLite if you decide to go with a micro ORM. Caveats: ORMLite is free up to 10 tables and then you have to pay for it. Also, the documentation is going to be a bit more scarce than what you'll find for EF (I recommend doing a small proof of concept project to play with to get your feet wet - it will all make sense once you use it a few times). The guy who maintains ORMLite is a really cool guy based in New York and he'll usually get back to you within a day to answer your questions.
Stop trying to make the whole string show up in a single call to Receive. Have Receive just append whatever came in to a string. Then call a method that checks if you have a complete message yet, and process it if you do. To handle the case where you get a partial message (line noise or whatever), have a timer event for, say, 100ms. Reset the timer in every call to Receive, so it only fires when something was received, but then nothing more. When the timer fires, clear the buffer. Log an error if the buffer wasn't empty.
Intellisense mostly comes down to context-senstive completion. Omnisharp + vim plugins cover most of what's been listed as VS advantage + some of the features mentioned mostly help dealing with technologies that are Windows-specific for the most part (e.g. DB tools and GUI designers). As mentioned, you'd probably mostly miss debugging, profiling and tracing features (great multithreading support, immediate window, intellitrace, performance profiling etc.). While you can do dump analysis without it, VS also offers nice experience while performing that task. That being said, I've found it that my use of debugging tools had declined over the years as I've more leaned to BDD/TDD and started to employ event sourcing in the applications I build. Also, there are philosophical differences in feature adding approaches between VS and vim. With VS you start out with a lot of stuff out of the box - most of which you're probably not going to use (assuming you know it even exists). With vim you start "only" with a text editor (albeit with very powerful text editing features) and add plugins/features/settings as you need them, shaping your own workflow (personally, I prefer this approach). What I'd suggest is not jumping the wagon for the features you might be missing, but just thinking through your development process and determining what part of it you find non-optimal, then proceeding to optimize and checking how other environments address it for any inspiration/ideas. Naturally, if you find that another environment addresses a lot of issues you have out of the box, it's more time effective to switch to it when possible. My 2 cents, opinions derived from using VS on Windows at work and vim on Linux otherwise. 
A very good debugger. 
I haven't implemented it yet, but this sounds like it will probably work. THANKS. I'm not sure I understand the timer bit though, sorry, but I'm going to ask another question before my question about that just because it makes a little more sense in my head. Can I pass the string read by Receive (RxString) to another method, append it to a string within that method, check that new string for being complete, and then pass it back if it is? Now with the timer. I set it to whatever amount of time right when Receive begins. Then I do my receiving and passing of the received data to the other method for appending to a string and verification. Do I fire the timer after sending the buffer contents to the other method, thus triggering a clear of the buffer? Then, check the buffer to make sure it is empty before receive exits? Also: are we talking about the serial port buffer, or my byte array? If the serial port buffer, DiscardInBuffer(), or DiscardOutBuffer()?
looooooooool :D I love the conclusion :D :D :D :D
Just by understanding the meaning of the exception and looking at the code, you should figure out what the problem is. I highly suggest you do some debugging, and look into why communication is 'null'. In Visual Studio, you can enable exceptions (Ctrl-Alt-E), and it will break exactly where the exception gets thrown. That should give you a good start.
There are so many good things built in, not sure where to start. But I guess: awesome auto completion, easy way to see all your files in your projects, easy way to deal with project dependencies, awesome debugger, pretty good GUI designer (I mainly use Winforms). I guess it's the whole IDE experience, I've been using VS for so long, that I literally would feel crippled without it. (note: I haven't used OmniSharp).
Yes, Thread.Sleep (on the main thread) does freeze the UI, as this thread runs the main GUI message loop. You can use async/await or some other background method instead.
You could use MSMQueue to pass messages between the two programs. https://msdn.microsoft.com/en-us/library/ms711472%28v=vs.85%29.aspx?f=255&amp;MSPPError=-2147217396
Filling up the gui thread? Sounds like these controls need to be instantiated on another thread, then passed back to the gui thread when they're all done. What sort of 'lot of stuffs' are we talking about here?
I agree completely. Resharper has spoiled me rotten.
They aren't C# but they are bootstrap sites, wrapbootstrap.com is one that I've used. It takes a bit of time, but you can add the bootstrap CSS/JS to a C# Asp.net MVC site.
The loading should happen on a different thread. Until then, your form should show a "Loading"... splash. When the loading is done, you will hide the splash. Or, you can do something else: 1. Have form that IS the splash 2. This form creates a new thread, which then creates your specific Form. 3. In this (second) Form, you will have a function that loads all its stuff (or, simply do it in its constructor). Then, you can simply Show() it, and hide the first Form (the splash). 
Thanks for the well-researched response. I played with OrmLite last night and so far it looks great. I haven't got time to benchmark its performance against EF, Linq to Entities and other ORMs though. But the word is it is pretty fast. I also looked at Dapper and my main concern also was how it encourages using inline SQL, we are trying to avoid that.
Yeah bootstrap that shit up and my personal opinion stay away from razor. You can use C# to do all your backend stuff but when it comes to rendering you view use a javascript framework like reactjs or angularjs.
why are you using a gif? and what sort of stuffs?
See my post, there's a link there that contains a performance comparison of variety of ORMs. LINQ to DB seems to be extremely quick...
&gt; but when it comes to rendering you view use a javascript framework like reactjs or angularjs. AngularJS does not provide server-side rendering. And adding server side rendering in ASP.NET using ReactJS... is not easy. What I want to say is: Your suggestion is only working when he wants **client side rendering**. That is not always wanted. If he wants server side rendering, then using Razor is perfectly fine.
Razor is crap its syntax is clunky and nasty. What should it matter if its server side rendered or client. Just pass all your data to the view via a json object and render it client side. 
Lookup zeromq. It supports many options such as sockets, named pipes, IPC etc. There is a .net port out there and it's easy to get it working. http://zeromq.org/ Edit: here is the .net port of zeromq https://github.com/zeromq/netmq
I don't think ReactJS works with asp.net, does it? As far as I know it requires NodeJS.
http://reactjs.net/ it sure does. It includes server side rendering and automatic processing of jsx files too integrated with bundles. I believe it's developed by the react team
Yes it's normal. There's a huge overhead for creating each file (allocating data, opening the file for writing, closing it, etc) For comparison you might wanna try copying the result (the ton of images vs one file) via Explorer and check the time. You can try playing with the FileOptions when [creating](https://msdn.microsoft.com/en-us/library/ms143360.aspx) the files, but Windows file caching is already working by default, so I doubt you'll get any improvement.
local hard drive
Then yeah, probably most of the work is just from creating the files. There's enough work going on there to slow things down. I'm not sure if 10x-15x is to be expected, but this could be a legitimate number depending on your hard drive speed, hard drive health, OS, and OS configuration. Not sure if I have a silver bullet for you.
+1 on AV
One of the nice things about Skip and Take is that they don't error out if you don't have enough items -- so that isn't the problem. As someone else pointed out, your final code line is wrong fs.Write(info, line, info.Length); The second parameter is the offset in the *array* to start at (e.g. `info[line]`. If you want to write the full contents of the `info` array you need to change the line to fs.Write(info, 0, info.Length); Now, writing the correct line will take some work unless every line in your file is the same size. Are they equal length, or varying?
That sounds like something that belongs within the deserialization code (since it already does a recursive crawl through every property). If not, you have no other option than to crawl through it yourself (as you're doing now)
Visual Studio is hands-down the best dev environment I've ever used.
Could try using asyncronous methods or pushing it off to other threads so you don't wait for one file to complete before you start creating the next. 
Honestly, I think the usefulness of R# has declined lately. VS2015 introduced things like "Goto implementation" among other niceties. I'd give it a few more years, and VS will include most of Resharper's features.
I just use HttpClient supplied by Microsoft with async/await.
Thank you for your response! When integrating with an API (such as payments with stripe or file storage with AWS' S3), do you write the HTTP code yourself, or do you use helper-libraries in your language and follow code samples from the service provider? The latter is a MUCH faster process, and often times there is very little benefit to doing the former. The client indeed doesn't matter in terms of pure functionality of the application. But the client does matter in terms of user experience. Our customers are more likely to want to integrate with our API if it is easy for them to do so. I personally give an API about 5-10 minutes to sell itself through its onboarding process. If I don't get anywhere decent in that time, I move on to the next one. I'm looking for good examples in the most popular stacks (Java, python, .NET, etc) so I can write a template in that language and automatically generate the bindings. Sort of like the ol' WSDL days (except that REST is a better fallback than SOAP).
Thank you for your response! The AWS SDK is the direction I am leaning towards since I like it for the same reason you mentioned, and I would imagine it's a pretty heavily used SDK (hopefully meaning that the majority people think that it has a very usable interface). Was just hoping someone had experience with an awesome SDK that I wasn't aware of.
Keep in mind that it's quite heavy for just a simple SDK. But for more involved things it's a beauty. Feel free to PM if you have any questions, as I might be able to lend a hand :) 
RestSharp used to be my goto, then I rolled my own because I needed a PCL version, now I use [ReFit](https://github.com/paulcbetts/refit) and I usually prefer to create my own client api libraries instead of using existing libraries to keep things light and simple
Not used the AWS SDK in about 14 months, but found it utterly hateful. Guilty of the antipattern of being developed closed and snapshotted and released as source without tests. Horrible. A good API SDK is - Testable / trivially injectable, Idiomatic, Discoverable and obvious, Safe by default (n+1 etc), Provides hooks for instrumentation and logging, Measures its performance by default, Free of infrastructure concerns or requirements, delivered with tests against a running sandbox.
&gt;I don't think ReactJS works with asp.net, does it? As far as I know it requires NodeJS. You can host javascript inside mvc. For isomorphic JS.
On a mobile, so forgive the brief response. But overall, you are correct, there should be a 1 to 1 mapping between handler types and queues. Often when dealing with this, I create a single service with multiple queues but each of those queues still has its own handler - multithread it instead of multiprocess it, if you will. This gives a single service that deals with whatever I need to queue but still allows for encapsulation of responsibilities within their own classes. My usual approach is for each message type, create a concurrent queue and send it to a new handler with the appropriate strategy (ref gof strategy pattern) which then spawns threads to process messages as well as a handler thread that kills and spawns threads as necessary. This is done on application initialization. For very high throughput (&gt;100messages/second/server) I'll use microservices instead to outsource to a different machine but it's the same idea.
Thank you for your response! You are right, those all sounds like great features of an API SDK. Do you have an example of such SDK? You seem to know a lot about this. Have you written one?
HttpClient + Newtonsoft
AFNetworking for iOS
&gt; ORMLite From the github page: &gt; Latest v4+ on NuGet is a commercial release with free quotas. So it's not free, at least the updated version. [Pricing](https://servicestack.net/ormlite)
Don't use a full blown ORM like EF. Use the time and effort you would need to really responsibly operate one of those beasts to learn SQL and how your DB handles concurrency and then use a micro ORM. Think about how long it took the EF team to get it reasonably working. I don't even want to think about the complexity of an full blown ORM. 
If you wrote the tutorials on that site, there are a few errors. In the memory management one, you allocate 10 bytes for the string, and then copy 10 characters into the string - which will use 11 bytes when it writes the null-terminator. You've remembered about the null-terminator in the arrays tutoral: &gt; int intArray[5]; &gt; You may be thinking to yourself that this array has a size of 5, since we gave it a size of 5 and we stored 5 variables in it, that would make sense. Well, you would actually be wrong, this array is infact of size 6, because an array starts at 0 and goes to the number we gave it, so 0-5 is 6 numbers. That's all fine and dandy, but why did we only add 5 elements then? Well...whatever size you want an array to be, you must always add one to it, why is that you ask? Well, it's because of something called a null terminator. Arrays don't have null terminators. When you declare int intArray[5], you get 5 array elements, numbered 0 to 4. Accessing intArray[5] is accessing memory outside the allocated array, which may stomp over something else. &gt; We also know that when the memory is allocated, a null terminator is stuffed into the final element of the array which specifies that you have hit the final element in the array, but how do we know which element is the first element? Also not true. Null-terminators are only used for strings - which is why you should always allocate char arrays you plan to use for strings as [maxlen+1]. Anyway, how would you differentiate between this supposed null-terminator and storing the number 0? Here's a quick demo: #include &lt;stdio.h&gt; int main() { int intArray[4] = {1, 2, 3, 4}; char test[16] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p'}; char extra[16] = {'z', 0}; printf("Before: %s\n", test); intArray[4] = 0x24242424; extra[0] = 0; printf("After: %s\n", test); printf("%p %p %p\n", intArray, test, extra); } Compile it using -mpreferred-stack-boundary=4 (that's for GCC, but you basically want to set allocation padding to 16 bytes or fewer, otherwise the arrays would need to be longer). The output: Before: abcdefghijklmnopz After: $$$$efghijklmnop 0x7fff9a2d55f0 0x7fff9a2d5600 0x7fff9a2d5610 You can see there was no 0 terminator on the end of *test*, allowing the printf to carry on to the z in *extra*. When I write to *intArray[4]*, which remember was declared as [4], I stomp on the memory allocated to *test* (0x24242424 is '$$$$'). I haven't looked at any of the others, but I'm guessing the whole tutorial set could use some proof-reading.
1, enableTheForm this is logically ShowInTaskbar. So you can simply make it as a get/set property wrapper over that. 2, botProgram The way I see it, this needs to be called in a timer - you need to add a timer to your form (maybe call it once every 10 seconds or so). This will basically check for new email, and if found, add it to a list (see below). 3, Dont' call botProgram in the constructor 4, Implementing botProgram * if the list of "new emails" is not empty - don't do anything (the user is currently writing an email; the form is already visible) -&gt; just return from the function * otherwise, read all new email, and store that into a List&lt;EmailInfo&gt; (it's up to you how you create the EmailInfo class) * if your list is non empty, show the form with the first email (Visible = ShowInTaskar = true) 5, Sending the email * your form needs to have a "Send" button. When the user clicks it, you send the email. * at this point (when user clicked Send), you remove the first item from the List&lt;EmailInfo&gt; (the one you just sent) * you check if there are more items * If YES, get the first item in teh list, and update the form (while the form is still visible). The user will now end up editing the next email. * If NO, hide the form (the form will end up being shown again when the next email arrives). That's it! Best, John
The subject was about server side rendering using ReactJS. Not about hosting the ReactJS files.
Hey. This may be overkill for your requirements, you'll need to evaluate based on the size of your system and the load you expect, but were I in your position I'd look into using [Akka.Net](http://getakka.net/) or something similar. There's plenty of other message queueing frameworks out there - the only reason for me not mentioning them is not having first hand experience with them. Akka.net is built on the concept of passing messages between handlers, and it does so in such a way that it's easy to handle a crazy level of concurrency. The messages passed between actors (your handlers) are immutable, and so the system manages all the multi-threaded stuff for you. It's also easy to scale up your system by adding more handlers for a type of message, or scale it out across a network and have clusters of message processing systems. It also handles the network i/o for your messages if you don't want to implement your own transport. You'll need to determine whether this is totally overboard for your use case, as you don't really go into the details of what your system is for. Learning akka is a bit of a paradigm shift, and the [bootcamp](https://github.com/petabridge/akka-bootcamp) is probably going to be really useful to teach you the framework and core concepts if you're unfamiliar to the actor model. 
Impressive what you achieved! But I feel kind of... dirty... when looking at that code. Especially the bracing style is.. disturbing. :-(
Yes, I've written other stuff mostly with javascript, just new with c# specifically.
Thanks so much for all the help, I still have some questions though: 1. Would I call the timer at the start of botProgram() or in Form1()? 1. For this program I don't really need to worry about multiple eamils it only need to deal with one at a time. But if isn't that much extra work I can add it anyway :P 1. Couldn't I just check if: List&lt;long&gt; uidList = imap.Search(Flag.Unseen) was empty instead of creating a new list? Thanks again!
I actually use the same, except all my braces () {} are exactly 1 tab left of where you have them. 
What do you feel is the benefit of deviating from C# style conventions?
And HTML Agility Pack of you need to parse web pages in the raw. 
They are also running Redis cache and possibly other stuff, but I agree. Dapper is a nice micro ORM
&gt; The latter is a MUCH faster process, and often times there is very little benefit to doing the former. It depends. For most parts I need to know how to make http requests, and I already know that. I usually don't want to learn library and step on potential bugs in another layer of abstraction. I prefer client SDK only if API is somewhat complicated. Examples: - for Facebook I use http client because it's about simple http requests and json. - for Twitter I use library because it has requests signing and I didn't want to write it myself.
Check out RabbitMQ and the .NET extensions of it.
Use WPF instead of Winforms. You want to learn about how the MVVM design pattern works which makes dealing with UIs far more practical. Also take a look at ORMs (Entity Framework is one MS makes that can be made to play nice with SQLite)
I must admit it's always comical to me that people switched away from soap to rest and then want to make it easier to consume the api and auto generate a client. Its basically like asking how do I make my rest api act like soap does out of the box?
[Try this.](http://stackoverflow.com/questions/5134137/build-error-the-process-cannot-access-the-file-because-it-is-being-used-by-ano) 
I thought that was the issue as well, but I tried creating the program folder in different locations, even on my desktop and it is still the same issue.
Run Task Manager and make sure you haven't got any "zombie" instances of devenv.exe or vshost.exe still running in the background. I assume you have already tried a restart of the computer? Doesn't seem to be anything wrong with what you have done here. Where are you saving your project?
I wouldn't say favorite, but I most recently used what I would consider the right tool for the job. .NET WebClient Vs. HttpClient : I wanted to port my implementation to projects &lt; .NET 4.5 Vs. RestSharp: I didn't want to haul another library around, and I don't like the serialization. For that, I use newtonsoft because I want full control. Vs. HttpWebRequest: it's easier. I made a WebConnector wrapper and modular IRetryHandler interface that can be associated with the connector. This allows me to do flat or exponential backoff retries. If everything was on .NET 4.5 I would have used HttpClient [This article] (http://www.diogonunes.com/blog/webclient-vs-httpclient-vs-httpwebrequest/) helped me make my decision quickly.
simple way by just downloading a string, find "name" within the data string, then ripping out text: string webURL = "http://services.runescape.com/m=itemdb_rs/api/catalogue/detail.json?item=4798"; System.Net.HttpWebRequest httpWebRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create(webURL); System.Net.HttpWebResponse httpWebReponse = (System.Net.HttpWebResponse)httpWebRequest.GetResponse(); var reader = new StreamReader(httpWebReponse.GetResponseStream()); string data = reader.ReadToEnd(); int start = data.IndexOf("\"name\":\""); int end = data.IndexOf("\"", start); string name = data.Substring(start, end-start); tweak as needed, obviously usings would be useful (see [also](https://msdn.microsoft.com/en-us/library/hh674188.aspx#Anchor_3))
not C# but it is .Net (F#). This solution will create a type for you that represent the data, then download it, and print it. You also get intellisense. You can save it to the database or put it in a website. open FSharp.Data type runescape = JsonProvider&lt;""" {"item":{"icon":"http://services.runescape.com/","icon_large":"http://services.runescape.com/","id":4798,"type":"Ammo","typeIcon":"http://www.runescape.com/","name":"Adamant brutal","description":"Blunt adamantite arrow...ouch","current":{"trend":"neutral","price":319},"today":{"trend":"neutral","price":0},"members":"true","day30":{"trend":"positive","change":"+2.0%"},"day90":{"trend":"positive","change":"+7.0%"},"day180":{"trend":"positive","change":"+22.0%"}}} """&gt; let data = runescape.Load("http://services.runescape.com/m=itemdb_rs/api/catalogue/detail.json?item=4798") printfn "%A" data data.Item.Description 
So, similar toastr messages but generated at the server side (and are removed as the use browses to the next page/action) then? 
ORMs abstract out database operations. So you don't write your own SQL queries to hit the database. Instead you write some code that describes the model and the ORM decides how to deal with the database to make it happen. Aside from allowing you to access data in an OO fashion, it also makes your application DB agnostic. As far as EF specifically goes, there are two main approaches: * Code First - Ideal for new projects, the ORM builds the database for you. * Database First - Best for using existing databases, the ORM writes the model code for you. There's also 'model first' but that's largely defunct and not really supported. So if you go hunting for an "Entity Framework code-first tutorial" you'll find a lot of good resources.
Are you running the application elsewhere?
 throw new ArgumentException("some message")
This is probably the coolest thing I've seen in any language. I was blown away when i started playing around with FSharp.Data about a year ago.
You're going to have to do it programmatically. It's fairly simple to do. Subscribe to the ListView's *OnResize* event, and paste this code: int colIndex = 0; int scrollBarWidth = 22; int colWidth = Columns.Cast&lt;ColumnHeader&gt;().Select(c =&gt; c.Width).Sum() - Columns[colIndex].Width; Columns[colIndex].Width = Width - colWidth - scrollBarWidth; *colIndex* is the index of the column you want to anchor. *scrollBarWidth* just puts a little bit of space at the end of all the columns so the scrollbar doesn't overlap them. Adjust to your preference.
Thanks!! It seems like it would be something that would be built in but oh well.
Use Dapper.NET. Write to SQL Server or Express. Avoid Sqlite, it is just ultra-painful. Avoid ORMs they are an unneccessary abstraction.
I'm missing the point of this. We all should know how easy it is to display messages to provide user feedback (e.g., "Updated successfully."), but without a visual demo, I have no idea how much, or if, this is better.
The search you probably want to run is something like how to consume a json web service in C#.
How does this differ from TempData? I've used TempData for flash messages in the past. 
There's not much difference. I'm working on a few projects that all need this functionality. They were originally using TempData, but I wanted to drop the System.Web.Mvc dependency. I was perfectly content with using TempData until I needed the exact same code in 3 different places.
I agree and you are completely right. That one in particular was a part of a 6 or 7 hour marathon I did during finals week to try to get the site done before the break started so I rushed a lot of that (some of the stuff I wrote even after proof reading it several times made me cringe), so I noticed little things like that as well, also a lot of people didn't like that I taught references (not a part of C), or that I used functions inside structs (also not part of C, just allowed by VC++) I will be revising them for sure. Thank you for pointing that out.
This is the correct answer. You can't have an object decide to not construct itself as far as I know. new TypeName() should never result in null. If someone is improperly using a class then you should throw an exception.
&gt;You want to restrict input to a specific list of values that are hard coded. That's enum. It self documents and removes the need for error handling. So basically by forcing the input of a valid enum value, you prevent the need to check for errors because the only values that can be given are already accounted for in the enum itself. I get it now! This does make a lot more sense and is a lot cleaner. As far as extracting the enum's string key for use, i've found that I can just use the Enum.GetName method. Is this a good way to go about this? I need the string key for the enum because I'm using it to build a string for a web request.
Yes I've already come across that post. I've tried but unfortunately I have no idea how to include that code into my program. 
If you highlight the DataGridView in the designer view, do you see any event handler entries for EditingControlShowing? You'll need to assign the event you created to the property in order for it to fire at the appropriate time. You can add the handler in the code as well (using a `+= my_datagridview_EditingControlShowing`), but I don't remember precisely where you add this code.
Ah yes that would be easy, except that I didn't use the designer view to create the datagridview so it's not there to click on. Now I know what I'm googling next...
A bit more digging on MSDN, in [this](https://msdn.microsoft.com/en-us/library/system.windows.forms.datagridviewcomboboxeditingcontrol.aspx) example, they register the event in the AddColorColumn() method. That doesn't seem like the best place (to me), but hopefully it's a good starting point for you. The line in question is: `dataGridView1.EditingControlShowing += new DataGridViewEditingControlShowingEventHandler( dataGridView1_EditingControlShowing);`
It sounds like you have another copy of the program running already. You should be able to kill it from the task manager. At worst, a restart ought to fix you up.
I would give anything that this is the issue 
Oh that sounds like a good idea, gonna try it out. Thanks
Thanks for your tips. If I ever solve this problem I'm stuck on now I'll clean up my loops with your suggestions. Yes it is the string str = my_datagridview.Rows[i].Cells["Current Count"].Value.ToString(); that's throwing the exception. I'm definitely not a good programmer but I don't think what I need to do is possible. Not in the way I've written this code anyway. 
Do you have steam running in the background? Steam is very proactive in detecting hackers. So if you are running visual studio, sometimes your compilation will fail with this error, because steam is scanning your executable to see if it is a new hack tool you are developing. And while it has "locked" the file to examine it, your compilation fails because it cannot write to the file. Just exit steam and recompile and all will be fine. (If it was Steam that was causing the error.) Source: As I play TF2 as a break inbetween coding this has happened to me many times. 
You can just use .ToString() on the value to get it as a string. 
Same here. The issue also persists in Vs 2015 and sometimes happens so often it's annoying. Apparently what /u/Fate_Creator posted seems like an easier solution than restarting.
Hi, 1. The timer is called automatically once it's enabled 2. Yup :D 3. I'm not sure about that - I haven't used their API. But it makes sense that it should work One thing - probably when you get the email, you need to mark it as read, because I'm not sure the API does that by default. Best, John 
You can use http://objectlistview.sourceforge.net/ You can mark a column as "FillsFreeSpace = true". It's got a lot of awesome features - I personally love it. There's also an article about it on codeproject that can get you started. It has a bit of learning curve, but it's awesome in the long run! Best, John
This does not solve his problem. An enum is just an int under the hood which can contain any value, so even when you just have 2 enum values you can pass in **any** argument and would need to verify that the enum value is valid. enum SomeEnum { A = 500, B = 200 }; public void SomeMethod(SomeEnum someEnum) {} SomeMethod((SomeEnum) 0); // Works
This only works though if you explicitly cast a number to the enum type. For cases where you want to accept a limited range of 'options' then it's the most appropriate way to do it and makes it clear to the programmer that you're expecting from a fixed set of inputs rather than an arbitrary value as you would with a string. If you want to be paranoid and check anyway, there's [Enum.IsDefined](https://msdn.microsoft.com/en-us/library/system.enum.isdefined.aspx) to check if the value you've been given is in fact valid for a given enum.
&gt; This only works though if you explicitly cast a number to the enum type. That depends on a lot of factors. It could also be that you got it through deserialization. &gt; If you want to be paranoid and check anyway Really? Do you also say "If you want to be paranoid, check your classes for null."? It's best practice to verify the integrity and validity of the data.
omfg - thank you. (this reminds me of the 'skype binds port 80' issue - just annoying until obvious)
DataGridViewColumn has a property called [ValueType](http://tinyurl.com/jqp6l4x). Try setting it to typeof(int) like this: my_datagridview.Columns["Current Count"].ValueType = typeof(int); One thing to note is that this will show a dialog box whenever someone inputs a value that isn't an int. You can replace this dialog box by using the event called DataError. EDIT: By the way. If you do this, Value will be an int so you can simply cast it: (int)my_datagridview.Rows[1].Cells["Current Count"].Value
What line is your NullReferenceException occurring on? Have you considered you might be getting an off-by-one error when referencing a cell? Try checking the cell for null before calling ToString(). string str = ""; if (my_datagridview.Rows[row_index].Cells[cell_index].Value != null) str = my_datagridview.Rows[row_index].Cells[cell_index].Value.ToString(); Also, if you didn't know, you can use string.Join() to produce delimited strings for you. List&lt;string&gt; table = new List&lt;string&gt;(); for (int row_index = 0; row_index &lt;= row_count - 2; row_index++) { List&lt;string&gt; row = new List&lt;string&gt;(); //captures data for each column in each row for (int cell_index = 0; cell_index &lt; cell_count; cell_index++) { //adds data to messagebox in stocklist format &amp; leaves comma off the end of each line string str = my_datagridview.Rows[row_index].Cells[cell_index].Value.ToString(); row.Add(str); } string str = string.Join(“,”, row); table.Add(str); } string output = string.Join(“\r\n”, table); //writes new data from messagebox over stocklist.csv file System.IO.File.WriteAllText("c:\\Stockfile\\stocklist.csv", output); 
I don't have steam running currently, but that is good to know that this will cause issues as well, thank you!
Oh man, I could have used that so many times.. no idea that existed, thank you!
Of course, I was speaking from a consumer's perspective. 
All those answers are pretty shitty. Disable VS host process? Wut? And not have debugging available? I've literally only ever seen ops error when I've left a process running when I try to build it again.
This is the "better" correct answer, IMO. Using a factory to abstract the responsibility of validation at construction time is cleaner than sticking an exception into the constructor, because, like you mentioned, not all invalid data is exceptional in nature. Use a factory, correct where you can, complain where you can't.
Check if my_datagridview.Rows[i].Cells["Current Count"] is null before checking it's value property
This seems like it would be the easiest way, but so far I can put it in without errors but it has no effect on my program. Can you show me how you'd include it in my code?
As OP has stated, this can be caused by some Antivirus engines. We had this issue with VIPRE. However, don't disable your AV entirely. Most decent AV engines will let you add an exception folder, just add that to your projects directory so you're not leaving yourself at risk.
Are you asking what code to write to create a class, or are you asking how to decide which parts of your existing program should be spilt out from the Program class? If it's the former basically any intro C# tutorial starts with that info. If it's the latter, search for object-oriented design tutorials.
I think the point he's trying to convey is that using an enum by itself is not enough. You still need to do internal checks and throw exceptions because failing to do so is not safe. Using a enum is obviously the best way to constrain input to a given set of values, but assuming that the given enum is valid is problematic. I'm not familiar with factory methods, but after looking over some examples, they seem far more suited for instances where you have multiple subclasses, although I am not positive this is the case. 
You've clearly defined what I'm trying to accomplish, but you haven't really provided any direction for how to do it.
Take a look at the Invoke method. All winforms controls have one and will execute the code on the UI thread which is what you want to do. https://msdn.microsoft.com/en-us/library/system.windows.forms.form.invoke(v=vs.110).aspx
I will try that. Its the latter. Thank you!
You are technically correct. It is a micro-ORM. However, as a specialization of the type ORM, it still gets counted as one.
Yeah, basically the correct answer comes down to whether or not 'invalid data' is expected or not. Exceptions shouldn't be used for control flow, but should be used to denote unexpected or unacceptable program state. Here's an example: Imagine in our application two functions; a `void CreateUser(string newUsername)` function and a `bool CheckUsernameValid(string username)`. The application might be expected to have code that looks something like this: string desiredUsername = GetFormEntry("username"); if (!CheckUsernameValid(desiredUsername)) { ShowInvalidUsernameDialog(); } else { CreateUser(desiredUsername); } If the `desiredUsername` is, say, *"t4%$&amp;&gt;&gt;"* (clearly invalid) then we should expect the `CheckUsernameValid` function to return `false` but *not* throw an exception. However, if we pass that username to `CreateUser`, the function should throw an exception because it implies that we tried to pass an invalid (and possibly dangerous) username to the database- and this should never happen. So, in essence, whether or not OP should throw an exception or build a factory pattern depends on the context of his 'bad argument'. 
Yes, also, when I said "correct where you can", I was implying that simple transformations could be done on the data to enforce things like a case-insensitive comparison, if something like that were desired. However, like you also explained, using a factory here can provide a cleaner interface to producing objects that store persistent data, like an object representing a user or a record. Essentially, I'm of the opinion that a stateless factory is the safer and cleaner abstraction when producing data containers.
Thanks everybody! I got it working =D
I've made a few changes. :) https://github.com/AIBrain/gold_mine
&gt; IL In-Line, correct? Just making sure I know my acronyms.
God, websites that overwrite the scrolling behavior are fucking retarded.
&gt; so I am starting to think that this is not best practice. The best practice is to not use a custom serializer, but to use custom classes that only contain the data you actually want to return. Then you map the data from Entity (the EF class) to your DTO (domain transfer object, the class you return from your API).
Scrolling in Firefox is slow and unreliable. Is that part of your framework, or some funky UI library? If it's not part of your framework, drop it in favor of standard controls, it's making you look bad.
I can't agree with that. My Firefox scrolls smoothly and without any slowdown.
https://anglesharp.github.io/ can help with this.
...and all just because he wanted that fancy apple like scroll bar handle. 
Readonly is to let us know the value should not be able to be changed (no direct performance increase that I know) outside of the constructor. The UInt32 is my personal preference. When I see 'long' I have to stop and think, "how many bits?", with 'In64' I know right away. (I think it might be a resharper preference you can set on the fly) The sounds were pulled from http://Freesound.org downloaded them to the project's sounds folder, and then added each as a resource. Better ways to do that? possibly. :) Agh, the debug stuff got committed? Shame on me. :)
I think the bits is fixed for the types in c#? but yea that is more obvious what the size is. Thanks for the help. I'm going to have to add some of the stuff back to my own project.
Immediate Language. See https://msdn.microsoft.com/en-us/library/c5tkafs1(v=vs.80).aspx
Ironically, the jQuery plugin being used to override the scrolling is called "[nicescroll](http://areaaperta.com/nicescroll/demo.html)".
Ironically, the jQuery plugin being used to override the scrolling is called "[nicescroll](http://areaaperta.com/nicescroll/demo.html)".
Which on webkit you can even do with just some CSS without actually hijacking the scrolling.
Dapper.NET by its very definition is an ORM and an abstraction of the mapping you'd manually do if you used plain ADO.NET.
Just guesses since there's no context as mentioned. [0:4] 1. A decimal with up to 4 places? 2. A random number from 0-4? 3. A number up to .4?
It is a hybrid of MIPS and C Sorry for the confusion.
You need a more specialized sub - and C has nothing much to do with C# either... or MIPS. =) Good luck!
In my opinion you have a few nice ways. I think best practice is: Since it seams you can directly access the API use the Newtonsoft Json Converter package to convert the json api endpoint into your C# project. From here you can easily access every attribute of the object like name, Id. You could even create a new model/object from a json string. This way you would be able to access the given data via object declaration. You first map the data from the API with your generated object and load attributes with MyModel.name; 
They've changed things since I last used it. That's too bad. I think it discourages people from using it with a price tag like that.
Depending on your email server's capabilities, it may be possible to just open a client connection and then have it sit idle waiting for a "new email message" event to be fired. This would alleviate the need to constantly poll the server for new messages. For instance, [ImapX 2](https://imapx.codeplex.com/documentation) provides [Idle Support](https://imapx.codeplex.com/wikipage?title=Idle%20support&amp;referringTitle=Documentation), in which case you'll be notified more or less in real time when a new message is received.
Uninstall AVG. Problem solved. AVG itself is a virus.
If you know know how to avoid viruses then Windows Defender works fine. The computer will always be vulnerable to zero-day attacks, just make sure all security updates are installed (including updating browsers/all installed programs etc...).
It's hilarious that C and C++ are ranked that high. I think some C/C++ programmers have a romantic memory of their programming youth back when we didn't have Python, Swift, Go etc.
Exactly. Well... I did vote for what I thought would be good for beginners, but I bet most don't.
im with /u/AngularBeginner there are some simple problems with this code and its better you struggle with how it works and get a bit of help from your peers and have that 'ohh I understand' moment, than yo just get the answer redditted to you. That was you will geniunly understand what went wrong EDIT* peers not piers !
Well my uni doesn't open till the 18th and this is due on the 15th. I'm the only one who chose snakes and ladders.
I mean I get that however im the only one doing snakes and ladders, I'm only in contact with one of my other piers and they aren't doing Game development (we share classes with Game design)
Then, frankly, you simply started way too late with this exercise. Man up and deal with the consequences.
You have a timer. Stop the timer.
&gt; But I just learned it can be done by putting a ? at the end of the type declaration. Not really. This creates a so-called "nullable value type", and, as the name implies, only works for value types which more or less means "simple types", although you can make your own. This is not a general concept of nullability vs. non-nullability, and C# doesn't have one any more than Java. The thing C# has is value types, which can't be null since they are not objects. I'd say the way null is used in Java is more or less the same as in C#/.NET.
After all, I'm glad you didn't quit on C# even though you had such problems in the beginning. :D 
Null values work in C# about the way I remember them working in Java (a decade and change ago, though: haven't touched Java in a while). C# has 'value types' which cannot be assigned null (similar to the way null isn't a valid int value), and a generic struct, System.Nullable&lt;T&gt;, which can be used for variables that need to accept a struct or a null. Conveniently, suffixing a value type with a ? in a variable declaration is syntactic sugar for declaring it as a System.Nullable: // equivalent: int? foo; Nullable&lt;int&gt; foo; This *only* works for value types, which is fine: reference types already accept nulls. Additionally, there are some operators (?? and ?.) that make dealing with nulls easier: int? foo = null; int b = 42; int a = foo ?? b; // a is now 42 // equivalent to int a; if (foo == null) { a = b; } else { a = foo.Value; } string s = foo?.ToString(); // s contains null, and we didn't throw a big NullReferenceException // equivalent to string s = null; if (foo != null) { s = foo.Value.ToString(); } All that said, if you don't need to use null, there's no reason to do so.
There's nothing that prevents you from using null values, except on value-types (int, short, etc), which can be overridden by using the nullable object (Official type is System.Nullable&lt;type&gt;, shorthanded to type?). One thing to note, is what does null actually mean? Generally speaking, it means something is undefined or does not exist. If I asked you "How many apples do you have?", you could respond back 0, 5, or maybe -15, if you happen to owe the leader of an illegal apple ring a few apples. However, how does null fit into that? If you responded back "I have an undefined number of apples" I'd look at you weird, or assume you managed to divide by 0. Similarly, responding back "The number of apples I have doesn't exist" doesn't make sense either! You have to own some number of apples, even if that number is 0. Now let's look at this a different way. Let's say that you don't have a sister. If I ask you how many apples does your sister have, this doesn't make any sense, does it? Your sister doesn't exist, so therefore I can't really ask any questions about her, can I (aside from asking if she exists or not)? Similarly, I can't ask her to do something, as she doesn't exist, or a NullReferenceException. To put this into a coding perspective, imagine "Asking a question" means "referencing a variable". Also, notice that in this example your Sister would be a regular, nullable type - just like any non-struct user defined type. It's by this logic that one can see the value (pun intended) of non-nullable value types. Sure, there are plenty of times you'd want to have an undefined integer, but those are the exception not the rule. *Normal is defined as: Not interfacing with an external component(database, DLL, services, etc)
I haven't heard anyone ever say "avoid nullable value-type declarations in C#," but I have seen stuff made nullable for no obvious reason. This makes the code more confusing. If I make a declaration of a value type nullable (i.e. long?), I always make sure that: * The variable's meaning when null is very clear * The variable's meaning when null is different from its meaning when its value is the default, i.e. 0 * I am not making it nullable "just in case I need it later"
EDIT: I stand corrected.
Who is this survey for? As it stands, your duplicate submissions across a large variety of programming related subreddits violates Reddit's spam submisison rules. Unless this is for a particularly reputable organization and for a particularly good reason, the post is going to stay removed as spam.
Yes, your constructor needs to call whatever the default constructor does, like InitializeComponent()
I'm pretty sure boxing only comes into play when you start casting to object.
I think c# is a good choice if your working with Windows. When programming with Visual Studio and Nuget Package Manager I'm sure you can find some matching libraries to use. Other than that I'm also sure that this task can be accomplished using another language like Java but imho probably not as easy as with C#
I'd forget LINQ if I were you. You basically want a matrix transpose algorithm (transpose is the correct word), which is fairly simple to write. Just take two `for` loops and write it out nice n' easy: List&lt;string&gt; props = new List&lt;string&gt;(); for (int i = 0; i &lt; numVarsInInputType; ++i) { props.Clear(); for (int j = 0; j &lt; inputList.Length; ++j) { props.Add(inputList[j].PropertyAtIndexI); } outputList.Add(new OutputClass(props)); } Where `numVarsInInputType` is the number of fields in `InputClass` (so in your example, 4: SORT_ID, NAME, VALUE1, VALUE2). Now, how you're gonna get that and "`PropertyAtIndexI`" is still up to you. If it's hard coded you could use a switch statement; otherwise maybe reflection is your friend. Edit: Unless I misunderstood, and it's that mechanism you're looking for rather than the transpose algorithm; in which case, sorry for the useless comment :P
Cheers for replying, I think it's the transpose algorithm I'm after and I'm just over complicating it in my own head. Especially since I'm mixing in reflection. I've got the `numVarsInInputType` using this: var inputProps = typeof (TIn).GetProperties(BindingFlags.Public | BindingFlags.Instance); I like the way you used the constructor to populate OuputClass, that's something that didn't occur to me as a way to keep it simple... going to have a fiddle and see where I get to.
Sorry, I used the initializer notation to give an example of the output list. I think you're right though, one property at a time. For what it's worth, this is the last abandoned attempt at this problem, with the bug I mentioned above. public IEnumerable&lt;TOut&gt; Transpose&lt;TIn, TOut&gt;(IEnumerable&lt;TIn&gt; dataset, Dictionary&lt;string, Func&lt;TIn, string&gt;&gt; map) { var outputProps = typeof (TOut).GetProperties(BindingFlags.Public | BindingFlags.Instance); var inputProps = typeof (TIn).GetProperties(BindingFlags.Public | BindingFlags.Instance); var outputDataset = new List&lt;TOut&gt;(); for (var i = 0; i &lt; inputProps.Count(); i++) { var outputItem = (TOut)Activator.CreateInstance(typeof(TOut)); foreach (var item in dataset) { // Get the mapping function for each output property foreach (var outputProp in outputProps) { if (!map.ContainsKey(outputProp.Name)) continue; // Get the property var outputObjectType = outputItem.GetType().GetProperty(outputProp.Name); // Extract the expected value var mappedValue = map[outputProp.Name](item); outputObjectType.SetValue(outputItem, mappedValue); } } outputDataset.Add(outputItem); } return outputDataset; }
`Nullable&lt;T&gt;` Is actually a value type itself. It's a struct that just exposes a `HasValue` property that indicates whether or not there is a value for the object. The fact that you can assign and compare to `null` are purely language features in your language of choice. It's also treated as a special case by the runtime in that instances of `Nullable&lt;T&gt;` with no value are boxed as actual null references, and null references are unboxed into `Nullable&lt;T&gt;` as instances with no value. So if you see code like this: if(myNullable != null &amp;&amp; myNullable.HasValue) Those two conditions are actually checking the same thing. 
Excellent! It did seem like I was putting far too much responsibility into my extension method which was breaking it. This has really helped me, thank you.
Glad to help, good luck on your project.
Huh, go figure. Makes sense to do it that way, but never would have guessed from the syntax.
That helps a lot, thanks. I'm not sure how I ended up using razor instead of aspx for this tutorial, but that seems to be the difference
Are you guys talking about [piers](http://i.telegraph.co.uk/multimedia/archive/02251/clevedon_2251748k.jpg) or [peers](http://www.yurtopic.com/education/teachers/images/peer-writing-help.jpg)?
Usually that's the Option type, which either has the value None or the value Some(x), where x is the value. Personally I don't think there's much difference in OO languages like C#, but in functional languages it's more useful because the compiler can force you to check for None. In OO languages this would be a lot harder to implement.
theres a few problems here. i dont think you want const for name, baseHealth, and baseMana. i think you are looking for readonly. When you make a const, you must assign a value to it because it cannot change. So all instances of the Struct1 type will have the same values, which isnt what you want. you can assign a value to a readonly field only at initialization and inside the constructor. Also, instead of doing Struct1.name (which by the way is a private const, so it isnt accessible anyways) you would want to use the public property from the instance, so s1.Name. Also just some advice, dont use the term "Base" when it doesnt apply. "Base" implies that it accesses something from lower in the inheritance structure, but here it looks like Base is used as "The starting value for this character". Im not exactly sure what youre doing but this might help. internal class Character : IHero { public string Name { get; } public int BaseHealth { get; } public int BaseMana { get; } public Character(string name, int baseHealth, int baseMana) { Name = name; BaseHealth = baseHealth; BaseMana = baseMana; } } public static class CharacterBaseLibrary { private static Character st1 = new Character("somename", 3562, 31); private static Character st2 = new Character("othername", 3422, 43); private static Character st3 = new Character("thirdname", 3222, 32); private static List&lt;IHero&gt; heroList = new List&lt;IHero&gt; { st1, st2, st3 }; }
Thank you, there are some interesting names there for me to check out. I'd never heard of Elm before..... Edit: For some reason I can't get your elm link to work (China blocks some funny things) but for those interested I got this to work: https://en.wikipedia.org/wiki/Elm_%28programming_language%29
Thank you for the reply! I just don't know how SQL would be implemented with this kind of application. I'm just trying to learn both because I know that at least SQL is a language that a lot of employers look for, and C# is a fairly easy language to grasp (from what I've read and heard...).
&gt;List Do you mean Lisp?
well first you have to know exactly what you want your program to do. I played a little Fallout 4 but not that much, I forget exactly what you are referring to about how the console computers work. Like if in this console computer you are adding entries to a database and retrieving entries based on criteria. First you need to setup a SQL Server database and then in C# you can connect to it and manipulate it with the System.Data.SqlClient library. Your c# code will establish a connection to the database and then you can execute SQL commands.
Ok. So it's most likely a function of an out of date tutorial. That clears that up. Thanks
A null value is a good way to know that something hasn't yet been set :) You should probably never set something TO null - It can start as null, but it should be changed at a later stage.
Yes he did.
&gt; To get rid of null, you will need some other mechanism to identify and detect unspecified data/values https://github.com/louthy/language-ext
Thanks!
That means your class is doing way too much. Stick to the single responsibility principle, which says that a type should be responsible for only one piece of functionality. Using types for grouping arbitrary or random bits of non-related functionality is a really bad pattern to get into, because it becomes impossible to determine which type should own some piece of functionality, and because your types will become heavily interdependent and nearly impossible to modify without causing massive breakage.
Whoops. Yes I did. I type List a lot. Thanks for the heads up. 
I don't see functional languages taking over for C#. A major feature of OOP is modeling business data. C# is widely used to develop business applications, so I don't see a functional language taking over there. And C# already has some functional-programming mechanisms (e.g. lambdas). Functional languages have their benefits but modeling business data isn't really one of them.
I may be wrong, but I'm pretty sure that generics in .Net don't do any boxing.
I haven't tried this, but I believe if you change the first function to return new {arg1, arg2); then it should work. It might even need to be: return new string[] {arg1, arg2); 
`return new string[] {arg1, arg2};` There are no such things as anonymous arrays in C#. An object initialization block without a type is an object with an anonymous (compiler-generated) *class*, which still requires the use of the `new` operator.
Yeah, I'd agree. Not in the foreseeable future anyway. Although I thought C# was more of a successor to JAVA..
Inferred arrays can be instantiated as long as all elements are of the same type. return new [] { arg1, arg2 };
&gt; int? x = null; PROBABLY NOT WHAT YOU MEANT I type lines like this all the time. What do you propose that I meant?
`Parallel.ForEach()` is probably the right tool for the job.
This is a custom example, but there are plenty of stock snippets available in visual studio.
Because there's no real case where a null string is inherently different from an empty string, so you should probably be checking for both cases. On the other hand, a nullable datetime can indicate state and value at the same time, e.g. an AcknowledgedTimestamp, null means its not acknowledged, otherwise you have a timestamp. 
Right on, and not only Option types but for more complex usages you can use discriminated unions to deal safely with other possible states. I mean, what is the meaning of it being "null"? Is it that there is no data, uninitialized, that someone forgot to type it, is the real value null, or is it something unknown? Using discriminated unions for that not only allows you to represent that there is no value but also that the value is unknown, or whatever you want, and on top of that when there is data you can also use it to store more detailed info about it, so you can get your code to reflect the problem domain semantics much closer.
What about that looks like java?
This will be a local only program, right? You have two main options: 1) SQL database, a great option if you need to take this concept to the internet. It's fast, easy to look up entries based on fields or entered keywords. 2) XML, which would be my preferred method in this case. Because the terminal system is basically a journal you could use tags to separate entries out by Date, subject matter, etc in plain text and encrypt the actual entry. It would also allow for different types of entries to be used (such as how some FO terminals store audio files or log entries). Managing logins can be a pain, it's a very complex concept, even though there are very simple solutions available. Do your research, find open source solutions that you can dig through, figure out how encryption, Salt, and Hashing work.
`Lazy` is really for multithreading* concerns. Am I missing something? Why don't you just get the spell (and add it to the cache) if you don't find it first? Also, side-note, `.First()` throws an exception if no result is found- are you sure you don't want `.FirstOrDefault()`? *Edit: Or easily making fields initialized on first use
Yes but why the Lazy&lt;T&gt; at all? Either my brain is fried and I'm missing something or you could just do public Spell this[string name] { get { var existingSpell = KnownSpells.FirstOrDefault(s =&gt; s.Name == name) ?? CachedSpellRequests.FirstOrDefault(x =&gt; x.Name == name); if (existingSpell != null) return existingSpell; var s = Spell.GetByName(name); CachedSpellRequests.Add(s); return s; } }
Right, I can do it like this but I find I like the coding style and intention Lazy&lt;T&gt; provides here, and if the cost is minimal I'd like to keep it that way, however I suppose after reading your post perhaps I should drop it all together for the sake of not confusing others even if it is fine. 
The main reason for people using Lazy is to delay the cost of initializing a resource heavy field that might never be used. The thread safety is just a nice to have with it. Read the remarks part on the msdn page for more info https://msdn.microsoft.com/en-us/library/dd642331(v=vs.110).aspx
Most drives now have native command queuing (NCQ) so kicking off multiple tasks would actually result in a speedup. The question is - how deep is the queue? You wouldn't want to create any more tasks than that (otherwise it'd just stall, and the runtime would spend too much effort in managing the tasks themselves) 
Outside of F#, `Option&lt;T&gt;` is pointless. First of all, `Option&lt;T&gt;.None` is just `null`. So for value types it is just `Nullable&lt;T&gt;` without the performance benefit of being a value type. To extract a value from `Option&lt;T&gt;` in C# the most natural pattern is to use `Option&lt;T&gt;.Value`. But that is a normal property so it will throw a `NullReferenceException` if the object is null. And of course the compiler doesn't require you to perform a null check before reading it. Oh, here's a fun fact. `Option&lt;String&gt;.Value` may equal null. So to actually be null-safe, you need to write this: Option&lt;String&gt; x = [...] if (x != null &amp;&amp; x.Value != null) 
For caching just use MemoryCache and skip the lazy aspect. https://msdn.microsoft.com/en-us/library/system.runtime.caching.memorycache%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396
Except that HasValue is on the nullable&lt;t&gt; and not the t so that won't do what you expect.
I got bored so I wrote it for you. class UnifiedType { FieldInfo Field; PropertyInfo Property; public string Name { get; private set; } public UnifiedType(FieldInfo field) { Field = field; Name = field.Name; } public UnifiedType(PropertyInfo property) { Property = property; Name = property.Name; } public object GetValue(object source) { return Field != null ? EnumerableExtensions.GetValue(Field, source) : EnumerableExtensions.GetValue(Property, source); } } public static ILookup&lt;string, object&gt; ConvertToVertical&lt;TType&gt;(this IEnumerable&lt;TType&gt; source) { if (source == null) throw new ArgumentNullException(nameof(source)); var allVariables = typeof(TType).GetProperties().Where(x =&gt; x.CanRead) .Select(v =&gt; new UnifiedType(v)) .Concat( typeof(TType).GetFields().Select(v =&gt; new UnifiedType(v)) ).ToArray(); return source.SelectMany(s =&gt; allVariables.Select(u =&gt; new { Name = u.Name, Element = s, Deref = u })) .ToLookup(k =&gt; k.Name, k =&gt; k.Deref.GetValue(k.Element)); }
Thank you. First guy I thought was wrong. Second guy made me doubt my spelling.
I did read the question. `default(int)` is just 0, so obviously that does something different. I'm just confused about why you think it's usually wrong to assign `null` to a variable declared `int?`.
Unless you are on spinning disks. Then the jumping all over the place on the disk will be slower than sequentially doing this 
My company's product is written in Delphi 5 and I am in the process of moving it in to a DLL so we can call it from C# and slowly start rewriting it piece by piece in C#. I wish I could say that I have solved this problem, though looking at my code I can see that I didn't exactly solve it but rather work around it. The difference between your problem and my situation is that I have control over the Delphi code. One of the things I have tried to do is wrap some of the VCL (Visual Component Library) code. The Delphi TForm (WinForms Form class) has a property called BorderStyle which is of the type TFormBorderStyle. In the VCL it is defined as: TFormBorderStyle = (bsNone, bsSingle, bsSizeable, bsDialog, bsToolWindow, bsSizeToolWin); In my DLL I have given myself the ability to get and set this property by wrapping it in this way: function GetFormBorderStyle(AForm :TForm) :Integer; stdcall; begin Result := Ord(AForm.BorderStyle); end; procedure SetFormBorderStyle(AForm :TForm; ABorderStyle :Integer); stdcall; begin AForm.BorderStyle := TFormBorderStyle(ABorderStyle); end; In the GetFormBorderStyle method, the Ord function in Delphi is converting the Delphi enum to an integer. SetFormBorderStyle takes an integer and casts it back to a TFormBorderStyle. In C# I store the enum as an actual enum and convert it to an int when going back and forth: public enum TFormBorderStyle { bsNone = 0, bsSingle = 1, bsSizeable = 2, bsDialog = 3, bsToolWindow = 4, bsSizeToolWin = 5 } It has been about a year since I wrote this code so I have already forgotten what I went through and was thinking when I wrote this code, but looking at it now I am assuming I ran in to a similar problem you are faced with. What format is the Delphi enum being exported as?! It appears in the end I just cast it as an integer in Delphi. That is not to say there isn't a way to take the original Delphi enum directly and marshal it over but it looks like I never figured it out. I suspect my post won't help you, but I thought I would put this out here just in case it proved useful to you.
I know what you're getting at, but generics themselves don't do boxing or unboxing (the idea doesn't really even make sense). What I was trying to point out was that when a `Nullable&lt;T&gt;` is boxed (meaning you do something like this): int? foo = 10; object bar = foo; This is a boxing operation. However, instances of `Nullable&lt;T&gt;` are treated in a special manner by the runtime in that either the raw value (in this case an integer `10`) is boxed or an actual null reference is the result. Similarly, unboxing into `Nullable&lt;T&gt;` will either yield an instance with the unboxed value or (in the case of a null reference) an instance with no value is the result. Maybe I can make this a bit clearer and point out what's happening. If I were to write the following struct that is similar to `Nullable&lt;T&gt;`: struct MyNullable&lt;T&gt; where T : struct { private T value; private bool hasValue; public MyNullable(T value) { this.value = value; this.hasValue = true; } public T Value { get { if(!hasValue) throw new InvalidOperationException(); return this.value; } } } If I were to add explicit and implicit conversion operators to this type, I would have something that would be more or less identical in implementation to `Nullable&lt;T&gt;`. However, my type obviously wouldn't get the special treatment that `Nullable&lt;T&gt;` gets, so let's compare: Nullable&lt;int&gt; foo1Value = 1; Nullable&lt;int&gt; foo1Null = null; // Note that this is syntactic sugar; this actually translates to new Nullable&lt;int&gt;() MyNullable&lt;int&gt; bar1Value = new MyNullable&lt;int&gt;(1); MyNullable&lt;int&gt; bar1Null = new MyNullable&lt;int&gt;(); Console.WriteLine(foo1Value.HasValue); // True Console.WriteLine(foo1Null.HasValue); // False Console.WriteLine(bar1Value.HasValue); // True Console.WriteLine(bar1Null.HasValue); // False object foo2Value = foo1Value; object foo2Null = foo1Null; object bar2Value = bar1Value; object bar2Null = bar1Null; Console.WriteLine(foo2Value); // "1" Console.WriteLine(foo2Null); // "" (null reference) Console.WriteLine(bar2Value); // "MyNullable&lt;int&gt;" Console.WriteLine(bar2Null); // "MyNullable&lt;int&gt;"
What he posted appears to be a Delphi enum not a set. In the Delphi VCL you see this code for defining an enum for a forms border icon types and a set type that uses them because a form is made up of zero or more of these icons. This shows how sets are defined in Delphi. TBorderIcon = (biSystemMenu, biMinimize, biMaximize, biHelp); TBorderIcons = set of TBorderIcon;
does it have to be an array? if it just needs to be enumerable, you could do the following: private IEnumerable&lt;string&gt; myFunction(string arg1, string arg2){ yield return arg1; yield return arg2; } 
I beg to differ on the fact that OOP is better at modeling business data or business domain. Take for example types and unions of types are ways of representing business domain logic in a functional language. Now to be fair not all languages have union types AFAIK. But specifically F# is designed with union types in mind. May I suggest the following video https://skillsmatter.com/skillscasts/4971-domain-driven-design-with-scott-wlaschin
The System.Xml.Linq namespace provides this functionality. XElement myElem = XElement.Parse(myString);
I appreciate your effort. Here's what I've done. 1. Read the OP's question 2. Read your original answer 3. Skimmed the rest of the thread 4. Thought about it for a while I still can't imagine why OP would not want `int? x = null;`. In fact, I would warn them against using `default(int)`, as they are attempting to indicate no value. `default(int)` definitely has a value.
Hm. Just looked into this. It does seem that with a `Nullable&lt;T&gt;`, one cannot access its `Value` accessor using the null-conditional operator. I'm sure the language developers had a nasty problem they couldn't solve, but this is another example of some irksome, arbitrary decisions in the language. It would seem to be more consistent if one could access a `Nullable&lt;T&gt;`'s Value parameter as with any other type. 
A constant is a not a variable.
You set me on the right track. All I had to do, since there are less than 8 possible answers was to make the finction return a byte, and I am getting 0 for StatusOne, 1 for StatusOne, etc
Thank you, going to look now. Edit: Language oriented programming? Interesting...
Yeah, you're 100% correct. What I was trying to get at, was that for most business cases, there's no difference between null and string.Empty. For example; saved optional form fields, if the user hasn't entered anything, should they saved as null, or empty? What does your ORM do when you create an entity with a string mapping and default value? I think we're saying the same thing, he was asking why'd you want to check both for null and empty string, I was trying to point out that in a lot of business layer/ui stuff, they can either mean the same thing or a default of empty could have been set. But, like you said, if you're doing something else; like your example, you should definitely understand what you're expecting and why.
100% Agreed.
That sounds incredibly cool!
"using Resharper technology" So the requirements going to be like 16 GB of ram?
As long as you don't also have chrome open.
[removed]
It looks very Java styled so I wouldn't doubt it. 
Currently doesn't let you debug, apart from that Unity is supported.
Seems like a tough battle to compete directly with Visual Studio.
I have never found IntelliJ to be "pretty", but compared to eclipse or netbeans it is a supermodel. I think the ugliness is a byproduct of using swing. 
I would assume that you could. 
It's obviously not going to do everything VS does. I'm thinking XAML support, web references, Entity Framework model or database first designers, etc. are all things you will probably have to wait a long time for, if they're ever going to be implemented at all. (although XAML support will probably be a popular request, we'll see) But knowing JetBrains' products, this'll be a decent competitor real fast when it comes to developers who only do web development and use none of those special features VS has to offer. They've already got the edge on one front: it's multiplatform.
That actually sounds amazing. The best news is that it will be linux-compatible.
Will it be a part of Idea or a seperate app?
Any idea how much it will cost?
Yeah but I didn't see ASP.NET listed as one of the project types so it isn't clear. Also would it include Razor support?
&gt; They've already got the edge on one front: it's multiplatform. I really really really want .NET and C# to grow on linux
Interesting, I wonder how this will stack against VS Code? I think it will certainly be nice to have not one but two (!) options cross platform going forward (not counting MonoDevelop since it doesn't seemed to be maintained outside of Xamarin)
One of the things I don't see mentioned there (And I may be blind) is any source control for it? One of the reasons my company and team use Visual Studio is because of TFS and how easily it works for us. Does this have anything in terms of TFS scale of source?
Intellij supports TFS so I assume this will too edit: they posted a video and at 17:30 they confirmed the source control integration
To summarise the previous comment: "No."
I dig R#, but i cannot see how anything can rival the visual studio experience. That being said... The more .net goes x-platform, we're going to need a solid IDE for linux/mac development. We've got visual studio code, and your standard text editors for different platforms, but would be nice to have a more full fledged experience like visual studio. A decent idea, but a very steep hill to climb in my opinion. Although I really hope they don't do the whole, R# is only available through our IDE crap at some point. Does anyone in here develop on a non-windows platform, and if so what IDE/editor do you use?
Umm, if it doesn't need java, then why does it install the JDK?
Visual Studio Code doesn't do even half of what I want when I'm working on a serious webapp using C#. it's a nice competitor to Sublime, but it's not even a shadow of Visual Studio for non-windows web development.
You won't be required to have Java installed in order to use it. Even if it does come bundled with its own JDK, there is no requirement for *you* to install anything.
damnit i want to work for jet brains... 
btw, they've updated the post to include the presentation announcing it
Let me rephrase: Is the JDK and Java only required if you are developing in java? Can I uninstall/delete Java from the computer after installation and still expect the IDE to run?
I could see it happening if it were free - if they're gonna charge then VS Express might still be the best.
If it's installed at all it is a local, hidden bundle. Not like the global runtime with shonky web browser plugins that you get if you install Java from Oracle's website. You worry too much :)
Also R. R would be used to do the analytics, C# for a user interface and grabbing data from a data source and then processing it so it's in a usable format to be analyzed.
C# 3 tiles should be much bigger than C# 6. It makes you think as if those were on an equal scale of update.
That's not really a feature of C#. That's a part of the .NET framework.
Didn't Microsoft announce a web based or cross platform IDE recently?
I thought C# supported generics in C# 2. C# 4 seems way too late.
Visual studio shines in beauty like the light of heaven.
It's likely to be available, even if as a plugin 
&gt; First of all, Option&lt;T&gt;.None is just null. So for value types it is just Nullable&lt;T&gt; without the performance benefit of being a value type. &gt; To extract a value from Option&lt;T&gt; in C# the most natural pattern is to use Option&lt;T&gt;.Value. But that is a normal property so it will throw a NullReferenceException if the object is null. And of course the compiler doesn't require you to perform a null check before reading it. You do need some discipline and patience (it's not really pretty) to use the more "type-safe" ways to use Options (like using pattern matching with `Match`, or using `Select`, `SelectMany`, etc), but if you do then it works fine. Even if you just used `HasValue` and `Value` you need a little discipline to use one before the other, but it gives you the benefit of letting the language tell you when you can do so and when you are free to not do any checks, which you don't if you just use the objects themselves with null (you have no way to know, by just looking at the code, whether you are "supposed" to check for null or not). &gt; Oh, here's a fun fact. Option&lt;String&gt;.Value may equal null. So to actually be null-safe, you need to write this: Yes, the null problems won't go away. But what will go away are problems with null when they are used to indicate missing values and when they get conflated with other uses of null (default value, uninitialized value, etc), causing bugs. And those 4 benefits I wrote up there still work. Right now C# doesn't have a `Nullable&lt;T&gt;` type that works generically for both value types and reference types. It also doesn't have a way to differentiate (for reference types) values with values that can potentially be missing in the type system. If you want those benefits, then there isn't much else you can use.
Fingers crossed for a community edition.
sorry. haven't had internet all day. i thought your problem was not understanding that i was using the second person singular "you" to refer to the person asking the question, not second person plural "you" as in all developers in general. and maybe `int` was a bad example because it's not a value type? in most cases i deal with `default(T) == null` (where T is a class) which means the variable is uninitialized. but overall if the question is why would you not use nullable variables all over the place? well you would if you need to store a value that changes back and forth between null and not-null or where null is a legitimate possible value. but just for initializing variables that are not expected to ever return to null after initialization, you don't want to introduce that kind of complexity. YAGNI. when someone says they are completely new to c# and there seems to be "a lot of things preventing you from using null" specifically in terms of variable declarations, i can only assume they mean they are getting compiler errors trying to init things as "null" like you do in other languages. that will give you compiler errors if it's a reference type, and warnings for using a variable before it's initialized if you're not used to coding in c#. you can fix both of those with `default`, especially if the value is always meant to be newed up later. and you specifically wouldn't want to get a newbie in the habit of using `T?` instead just so they can assign it `null` in the declaration like they're used to, if the variable's nullable-ness isn't necessary. it also seemed weird that noone else mentioned `default` at all in this post.. had me wondering if maybe people here just don't understand what's being asked or why. hope that explains what i meant better! feel free to correct any terminology errors. i'm used to talking to managers more than other coders. ;) \* edit: words
It depends. I hope it shows itself to be much more performant if just to give VS some competition on that front. It might honestly be Resharper, but I notice a lot of hangs and slowdown recently. And I'm not willing to develop without Resharper.
Ok. Throwing question marks into value type declarations just to remove compiler errors *is* probably a mistake. I can agree to that. 
Doubtful. They don't have Microsoft billions. Maybe if MS finally buys them like they should.
Why? Since that means it would be CoreCLR projects they are cross compatible anyway. Unless you mean companies would refuse to pay for VS Pro when this will likely be 75% cheaper. But if a company ever told me they won't spend $1000 or even $10,000 on the proper tools for me to do my job. I wouldn't work for them. My time's value far exceeds any amount of money i could ever spend legitimately on tools. Hell, as a business you'd be an idiot to even let me waste my time with tools that aren't my best. That's like paying a master craftsman to hammer nails when they say give me a nail gun.
 &gt;So the requirements going to be like 16 GB of ram? Who cares? Development rigs should be 64GB or 128GB. At the very minimum they should be 32GB. It's not 2010.
Try telling that to my boss. 
Use a private static ConcurrentDictionary's GetOrAdd method. This will acheive what you're trying to do. Pretty much every application i've built since .NET4's release has had several of these sprinkled through out to eliminate the cost of look ups. Especially ones to read things from the disk.
Semantic string identifiers are the best identifiers.
If you like YouTube learning, I find that Jamie King is somewhat talented at explaining the finer points of C#. He visits types, delegates, lambas, linq, and a host of other more 'advanced' (this is perspective based) features in C#.
I'm going to give him a look, thanks! :D 
Yes. You can see them demoing an ASP.NET MVC app in a video they posted, also showing razor support.
I believe if you write to multiple files with a Parallel.For loop you would see and improvement over a single file
There some c# exercises http://www.programmr.com/zone/csharp Have some other sources but those not in English.
Entity framework with SQL server express, meaning MSSQL instead of MySQL. It's free, well documented, and powerful. Other than that there aren't any that I can recommend.
I strongly advise that you just start writing a project. Try to make an MVC app that is a Reddit clone. Or a Facebook version 1 clone (profiles, messages, pictures). You will learn more doing this than doing a bunch of small exercises. Don't worry about your code being perfect on your first try. Just worry about your code working!
I don't get it... your switch statements look fine to me. Except you need a "default:" in the second one. All switches need a "default:" case... even if the switch is a true and false bool and it has cases for both true and false. It still must have a "default:" - even if it's just: default: break;
Also you can easier check all forms of a word by using "String.ToUpper()" (or "String.ToLower()") when you simply want to ensure the spelling of a word matches another word regardless of case. string test = "TestThis"; if(test.ToUpper() == "TESTTHIS") { Console.WriteLine("case insensitive!"); }
Default cases are not required. Technically you don't even need any cases, you could have a completely empty switch statement. My guess is you got confused due to the "not all code paths return a value" error when you return a value out of a switch statement. In that case, you usually do need another return statement either in the default case or after the switch because the compiler can't guarantee that one of the cases is always a match.
Does it work also for stuff like Yasuo or yAsuo YaSuO etc.. ?
I don't remember - I just remember when I was learning switches I got some sort of error and then I always started any switch I wrote with the default case so I guess I never got the chance to see it without one.
Thanks &lt;3
Sure you can do this with if-Statements. I changed my code here you go: //Create the boolean outside of your Click-Event. Else it will be created everytime you click on the button. private bool _firstAnswerCorrect = false; private void button1_Click(object sender, EventArgs e) { if(!_firstAnswerCorrect) { if(textBox1.Text.ToLower().Equals("yasuo")) //The same as textBox1.Text.ToLower() == "yasuo" { label4.Text = "CORRECT !"; label1.Text = "Which champion is under 18 years?"; _firstAnswerCorrect = true; } else { label4.Text = "WRONG !"; } } else { if(textBox1.Text.ToLower().Equals("annie")) { label4.Text = "GOOD JOB!"; } else { label4.Text = "Try again :D"; } } }
I would go for Postgres or MariaDB if it has to be opensource and Relational database. From the MariaDB site: *One of the most popular database servers. Made by the original developers of MySQL. Guaranteed to stay open source.*
www.hackerrank.com Challenges on a wide range of topics that you can attempt in whatever language you like.
Most of the ORM related issues I've encountered using MySQL in .NET were related to the MySQL driver, rather than NHibernate/Entity Framework which rely on it. I'd advise to use something like [dotConnect for MySQL](https://www.devart.com/dotconnect/mysql/editions.html) if it's affordable. The Professional Edition driver allows you to use Entity Framework, NHibernate or LinqConnect. [Here are a couple of other options](http://www.agile-code.com/blog/microsoft-net-or-mapper-choose-your-own/). [Telerik DataAccess](http://www.telerik.com/data-access) is also free to use for commercial projects. I've only used NHibernate with MSSQL, but I reckon it works a lot better with MySQL. There are other micro ORM commercial options like [ORMLite](https://servicestack.net/) available if that kind of thing tickles your fancy. Npgsql (OSS) for Postgresql has improved a lot too. I'm not aware of a Npgsql equivalent for MySQL though. 
MySQL is owned by Oracle. They have zero incentive to keep developing MySQL since that would compete with their big database.
You can also use string.compare(str1, str1, StringCompairson) == 0 See https://msdn.microsoft.com/en-us/library/e6883c06(v=vs.110).aspx Or just string.ToLower() and then do the switch statement.
&gt; private bool _firstAnswerCorrect = false; I don't understand why we used this ?
tweq made some good points in regards to the use of interfaces. A nice design pattern that makes use of interfaces is the adapter pattern. For example, let's say you have 10 projects. Every project requires the use of a logger. You decide to use NLog/Serilog, now every project has to reference the library. If for some reason the version of the library being used ends up being different for the projects referencing it and it has the same name e.g. NLog.dll, it's undefined which version of NLog.dll will end up in your Debug/Release folder. To some degree the [assemblyBinding option on runtime](https://msdn.microsoft.com/en-us/library/twy1dw1e%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396) can help if the versions are backwards compatible. The alternative is to create an interface e.g. ILogger implementing the methods you plan to use in a common assembly and have the other projects depend on ILogger instead. Then in your entry and/or "infrastructure" project (e.g. web project/console/winforms app) take the dependency on NLog and implement an adapter for ILogger to write to NLog.Logger. NLog as an example is a bit of a bugger due to the LogManager class, because it's very easy to just call LogManager.GetCurrentClassLogger(). You'll need to provide a similar singleton in the common project or make use of an inversion of control container to resolve the dependency. You'd configure the IOC container to create an instance of the NLog adapter and return an ILogger when an ILogger is asked for/resolved. If down the line you want to switch to some other kind of logger sharing a similar interface - just implement the adapter and use it - your other code won't be any wiser what is providing the ILogger interface. Another thing about using an interface instead of a concrete class is that the users of the interface don't need to take a dependency on the constructor dependencies of the concrete implementation. If you had 10 projects that made use of the UserRepository class and the UserRepository constructor required a NpgsqlConnection, then all projects would need to take a dependency on Npgsql to use the UserRepository. Sometimes it's reasonable that a single class has multiple responsibilities (such as API clients); in this scenario it's much better to take a dependency on a subset of the implementation defined by an interface than the concrete class (e.g. `ISmsSender { Task&lt;SendSmsResult&gt; SendSms(Sms sms, CancellationToken cancellationToken); }`). 
You're welcome :) Let me explain in more detail why your code didn't work. So what we have is * label1 * label4 * textBox1 * button1 1. After your first click on *button1* the *textBox1* contains the string "yasou". 2. Since the condition for the first switch-case is met *label4.Text* now contains "CORRECT !" 3. Then your code will hit *break;* and goes out of the **First** switch-case. It **will not end** the *button1_Click* event. 4. Since *label4.Text* contains "CORRECT !" the if-Statement that surrounded the **Second** switch-case is met. 5. *label1.Text* now contains "Which champion is under 18 years?" 6. So now it will enter the **Second** switch-case 7. Since the condition (*annie*) of the switch-case is not met it will exit it and since there is no more code the event is finished. 8. After you typed "annie" in *textBox1* and you click the button the Click event is handled from the beginning. 9. So now it will **again** go into the **First** switch-case. 10. Since the condition here is not met, because *textBox1.Text* contains the value "annie", it will go into *default* 11. Look at your *default*. Now *label4.Text* contains the value "WRONG !". 12. After it hit the *break;* and moves to the if-Statement the condition can never be met because *label4.Text* will always contain "WRONG !" 
It's used so we know that the first question has been answered correctly. So when you move to the second question, the if-Statement for *yasou* will not be called. Instead it will move to the if-Statement where *annie* is the condition. This isn't the best way to handle this, but for this simple case it's fine. Have you checked out some tutorials? Alot of your basic questions are anwsered in those.
"Another thing about using an interface instead of a concrete class is that the users of the interface don't need to take a dependency on the constructor dependencies of the concrete implementation. If you had 10 projects that made use of the UserRepository class and the UserRepository constructor required a NpgsqlConnection, then all projects would need to take a dependency on Npgsql to use the UserRepository." That...is an _excellent_ point, I hadn't considered that at all. Really solid answer, thank you very much! 
OP only mentioned "free to use". But under what context? 
Not really. As long as you are within the hard limits imposed by the Express version (Just 10GB DB size, and limited RAM AFAIK) and you do not need the more advanced features, SQL Server Express is actuallly not a bad choice at all. 
ORMs have a number of problems. Chief among them is the object-relational mismatch and the tendency of (particularly newer) developers to select much, much more data than they actually need to complete a given task. On the Java side, there exist a few tools (e.g. JOOQ) that attempt to solve this, and do a pretty good job. I'm not familiar with any tools for .NET, so I'd agree -- put the queries in stored procs. Do not put any actual business logic in the stored procs. 
Seconded. The MySQL driver support for .NET is questionable at best. SQL Server Express is an excellent choice. You said this decision is long term, so I would consider the cost/benefits of going with something like MySQL versus something like SQL Server, which is extremely powerful and feature-rich for what you pay (nothing.) If this is a serious commercial endeavor, you can always buy a license later if you need it. 10GB should be more than enough to start with.
NHibernate's internal mapping by code is pretty good nowadays, but it's all documented [on this guy's blog](http://notherdev.blogspot.com/2012/02/nhibernates-mapping-by-code-summary.html). That said, the format is a near literal translation of the XML, which gives you the advantage of not having to strain to interpret the project documentation. Also, using the internal code mappings means that you don't have to worry about NH getting out of sync with FluentNH.
Well said
Dapper is pretty cool.
Fair enough - Dapper would be my top suggestion for that. Though you may be able to just use C# directly ala: IEnumerable&lt;RoleStruct&gt; names = db.Database.SqlQuery&lt;RoleStruct&gt;("select username,rolename from aspnet_usersInRoles ur join aspnet_users u on ur.userid = u.userid join aspnet_roles r on r.roleid = ur.roleid"); Which will map matching column names to matching properties in your struct or class
ORM is almost always the **wrong** choice. For data connectivity use Dapper.NET or other relevant projects like PetaPoco, Simple.Data, and so on. Dapper supports mysql, unknown which others do off hand. I would suspect most that are ADO.NET enhancements would all be compatible since they don't really generate sql the way ORMs do that gets into database specific sql. Edit: to all down voters i guarantee i know more about this than you but bring them on. Development contains way more wrong choices than right ones you all are welcome to learn the hard way.
Have a look at how little physical memory most DB servers get for 'little' projects. Take those on EC2 or Azure for instance.
&gt; Because there is no reason on earth why an application class should be the same as a database table. Stopped reading there m8, I hope I will never ever inherit your code, God speed 
If you're using Dapper without some extensions you will write boilerplate anyway, go enjoy that I guess
This is a great answer. I learned a lot of JavaScript by making an imgur clone.
I've used this for legacy MS Access databases because access does not support EF. I've had very little problems with it. Works pretty well.
If the reddit clone thing sounds like something you want to do, then go for it, but I would personally say just, in general, figure out something you want to do and then figure out how to do it. How about a reddit aggregator, i.e. something that downloads all your favorite reddits and displays them for you in a pleasing way? That one might be tough because you'll have to figure out the reddit API too but hey, working with APIs is part of the fun! I had a friend who made a (thing) ranker, basically a little tool where you enter in a bunch of things you like (different flavors of ice cream, albums) and then sorted them. I remember when I was first first learning to program as a call center drone, I wrote a bunch of little apps in VBA that made my job 3% easier by auto-copying frequently used customer comments to the clipboard, sending form emails to various departments requesting stuff, and so on. You probably don't want to go out and do anything *too* ambitious with your first project - in fact one of the neat things about something like the Ranker mentioned above is that you can start simple and slowly make it more and more complicated - but your imagination is kind of your only limit.
Looks like it could be a great place to start thanks.
Good Idea, Yeah i'm a little put of by doing small exercises, but also intimidated by big projects can't win haha. Just need to get to it. 
Well yes it would probably be nicer to use other datatypes, but ConcurrentDictionary might not be correct either. It doesn't expire for example like MemoryCache would and it allocates which you might wish to avoid with a custom structure that allocates ahead of time. It all depends on what you are trying to get out of this cache. That doesn't mean it shouldn't be a separate method like this.
Just use an Azure Database instance and save yourself the headache. Yes you have to pay monthly for usage but you are going to have to do that anyway for any serious hosting. It is going to be fully supported by Microsoft. As others have said if you don't need a massive database and don't expect massive volumes. SQL Server Express is fine. I've run plenty of small web services that are still going on the older versions.
Will this throw a null reference exception if mystring is null?
Has it shell integration? Does it have an command line interface? ...asking because my current tool for that job hast these features, and i am depending on them. 
Do you need to use SAML? Have you tried OpenIDConnect? You could use IdentityServer which is pretty good.
I think people usually use AD FS for this kind of a setup. It can host the login page, validate against AD, and act as the claims provider. System B will just need to be set up to trust AD FS. If you still want to write your own claims provider, I'd take a look at building on top of [Windows Identity Foundation](https://msdn.microsoft.com/en-us/library/hh377151\(v=vs.110\).aspx).
~~No, it would result in true.~~ &amp;nbsp; IsNullOrEmpty / IsNullOrWhiteSpace return true or false; they evaluate the string and come to a decision. **Edit:** It would throw an exception.
It's really easier than you might think. I would just try to keep your first version, of whatever you do, simple. You can always get complicated with it later.
Enhancements that are carefully weighed as to not compete with their big database. 
Just another option for something like an *if* statement... The Equals method takes a *StringComparison* enumeration value for an overload. textBox1.Text.Equals("yasuo", StringComparison.OrdinalIgnoreCase); 
Unreachable code doesn't throw an exception, just a compiler warning. I don't know the inner workings of the compiler very well, but I'm assuming at most optimisation levels it wouldn't bother to compile unreachable code.
&gt; but it is my personal experience anyway. Dude, you're in college. You have like no real world experience and you're making definitive declarations like this? Calm the F down. Based on your other posts you've got some kind of smarts to backup your opinions but, come on, you're a baby as far as development experience goes and you're coming off as exceptionally arrogant. 
The CLR has reified generics, whereas Java uses type erasure to implement generic types. Related is how C# and Java deal with covariance and contravariance in generic type parameters. C# has variance annotations on generic interfaces (i.e. in/out on type parameters) whereas Java uses wildcards. --- For example, using '&lt;:' to denote the subtyping relation, we have the following in C#: // Given that: Child &lt;: Parent Action&lt;in T&gt; // T is contravariant // Then: Action&lt;Parent&gt; &lt;: Action&lt;Child&gt; // An Action&lt;Parent&gt; can be used anywhere an Action&lt;Child&gt; is expected. In Java this is achieved with wildcard parameters. // Given: Action&lt;? super T&gt; // Action accepts T or any superclass of T // Then: // Action&lt;Parent&gt; &lt;: Action&lt;Child&gt; --- Covariance works in a similar fashion: // Given: IEnumerable&lt;out T&gt; // T is covariant // Then: IEnumerable&lt;Child&gt; &lt;: IEnumerable&lt;Parent&gt; // An IEnumerable&lt;Child&gt; can be used anywhere an IEnumerable&lt;Parent&gt; is expected. Java: // Given: IEnumerable&lt;? extends T&gt; // Then: IEnumerable&lt;Child&gt; &lt;: IEnumerable&lt;Parent&gt;
Checked out my sql fabric? That type of enhancement certainly goes against the big central db mantra of oracles flagship db. 
You need to use the constructor rather than ZipFile.Read(). According to the [ZipFile.Read\(\) documentation](http://dotnetzip.herobo.com/DNZHelp/html/840357ce-cfe0-f332-d6eb-9afa04479b7a.htm), it uses [File.OpenRead\(\)](https://msdn.microsoft.com/en-us/library/system.io.file.openread\(v=vs.110\).aspx), which creates a read-only stream. zip.Save probably tries to write back to the same stream which will fail because it is read-only.
Along with what the others have said I only have 1 tip: You should have switched sooner :)
1. Methods are not virtual by default unlike in Java. You need to mark the methods as `virtual` or `abstract` to get that behavior. This is usually a good thing because virtual method calls are expensive, so you should only mark methods you want overridden to be marked as virtual. It is just unexpected when coming from Java where everything is virtual by default. 2. C# generics are preserved at run-time, unlike Java generics. This means that `List&lt;int&gt;`, `List&lt;double&gt;`, and `List` are actually different types at runtime. This is an excellent thing because it allows you to do reasoning about the generic types at run-time. 3. structs are a thing, and they act very differently from classes. They do a lot of nice things, but they act similar to a Java primitives instead of a class despite looking like a class. If you want a method to make a change to a struct, you need to pass by reference using the `ref` keyword. 4. Operator overloading is a thing. This can make a lot of things really nice (`DateTimeOffset - DateTimeOffset` yields a `TimeSpan` for example), but coming from the Java world, this can be confusing because everything in Java uses functions. C# collections also bias pretty heavily toward operators instead of functions. The index operator on List is an excellent example of this because there is no `Get(index)` method. It can get confusing when it comes to equality because types can implement the equality operator. This means that `==` will go a value comparison (e.g. call .Equals) instead of the standard reference equality. You can call `ReferenceEquals` if you explicitly want reference equality, and the type implements the equality operator. The most prominent type that implements the equality operator is `string`. 5. Delegates (e.g. function pointers) and anonymous functions (such as lambdas) are awesome things that exist. Most people initially use them them with LINQ or events. 6. Properties are getters &amp; setters already. You don't even need a backing field most of the time, and you definitely don't need extra methods. Deciding on property vs. method can be hard. The rule of thumb is to use a method if it will take time or has a side-effect. If the variable is private, don't use a property or a getter/setter method. 7. [Extension methods](https://msdn.microsoft.com/en-us/library/bb383977.aspx) are very useful, but can be hard to discover and to import. The .NET framework makes extensive use of them with LINQ. 8. Know about `IDisposable`, the Disposable pattern, and the `using` statement. 9. If at all possible (e.g. new code), use `async/await` for your I/O operations. 10. When re-throwing caught exceptions, use `throw;` instead of `throw e;`. The later will change the stacktrace in the exception to start from the location you re-threw from while the former will act as if the exception had never been caught. 11. There is an interesting bit of terminology you might encounter. "Managed code" refers to garbage collected code like C#, VB.NET, and F#. Unmanaged code refers to manual memory management like C or C++. Calling between the two is annoying and error prone (the word you want to Google is `P/Invoke`), but hopefully you won't have to do it often, if ever.
Yup, that's probably the best way to truly understand the benefits. Best, John
[I wrote this back when the question was asked before](https://www.reddit.com/r/csharp/comments/2gct9b/java_to_c/ckhv1ky), maybe it can help; it's a short list of things that are different between the two
I would not call WinForms ancient. I love WinForms myself - WPF might be awesome and stuff, but until I find a decent XAML editor, please allow me to hate it with passion. Best, John
Uhmm.. JSON is a data object format, not a functional programming language. Not really relevant to what I was saying.
I've saved this comment as a reference. 
The equals operator (==) will compare values, and not just references in C#. This one got me when I switched from C# to Java.
&gt;Know about `IDisposable`, the Disposable pattern, and the `using` statement. Just to clarify, the `using` keyword has ~~two~~ three distinct meanings in C#. 1. The one you see in almost every file, which is equivalent to `import` in Java. 2. The one /u/Cadoc7 is referring to, which ensures `IDisposable` things are disposed automatically. 3. The more rarely seen `using` as an alias. E.g. `using C = System.Console;` then later `C.WriteLine("Hello, world!");` ###Example: These two blocks are pretty much equivalent. #####Bad StreamWriter streamWriter = null; try { streamWriter = new StreamWriter("example.txt"); streamWriter.WriteLine("Hello world!?"); throw new Exception("Uh oh!"); } finally { if (streamWriter != null) { streamWriter.Dispose(); } } #####Good using (var streamWriter = new StreamWriter("example.txt")) { streamWriter.WriteLine("Hello world!"); throw new Exception("Uh oh!"); } *Edit: Added third `using` usage as mentioned by /u/pjmlp*
Awesome! I will definitely check that out!
Yup. If you are coming from the Java 7+ world, `using` is equivalent to `try-with-resources`. There are some quirks in how to use it well in .NET, which is why I mentioned the pattern. You can read more about the pattern on MSDN: https://msdn.microsoft.com/en-us/library/fs2xkftw(v=vs.110).aspx https://msdn.microsoft.com/en-us/library/b1yfkh5e(v=vs.110).aspx
The reference has already been added to your project?
Err, thought that would be automatic, how to I do that? BTW, does using Win 10 changes anything? Everywhere I look in the internet it looks like it is available from the start.
Is it really 'block' and not 'Block' with capital B? I'm not familiar with Unity, so I don't know where the Block class is defined.. Is it defined in Unity or in your own code?
I noticed you used "FirstOrDefault" when trying to query the client information, you shouldn't use that. Use "SingleOrDefault" instead. A better explanation here: http://stackoverflow.com/questions/1745691/linq-when-to-use-singleordefault-vs-firstordefault-with-filtering-criteria
I'm happy to take a stab at a few things... Exception handling: you are catching exceptions but not logging or doing anything with the message or stack trace. If you intend to swallow exceptions, note your reasoning. Returning from a catch block smells, as well. Commenting: use summary commenting on your classes, methods, and properties even if they use good naming conventions. It is very difficult for maintenance and review if someone else has to read the code to figure out what's going on. Interfaces: uneccesary for a 1 to 1 with a class. Do you intend on creating additional login helpers, for instance? Interfaces are good for composition. The project structure is good enough. I would like to see you have a readme.MD file at the project level describing your overall intent. A readme.MD for each large code folder would be advised. It's for you just as much as anyone else. I will likely look at more later cause I find it cathartic. :) 
Never done any Mvc so not familiar with enough of the code to be useful for most of the logic. The main place I looked was at your helper folder though. The 2 helper classes in there with no state being kept can be made into global static helper classes with static methods. The authattribute class can be cleaned be cleaned up getting rid of the private properties and making them read only fields. You should prob not do == false in a class but that is more of a coding style thing. Overall the code is clean it would be nice to see comments on the method signatures so I could more easily analyze your code and see what each method is doing. Also in your login controller your post method sends the same error mesage for 3 completely different failures you should probably return a more explicit error 
What kind of project are you working on (the project type)? A console application? A web application? An ASP.NET 5 web application? A Universal Windows Application? The TcpClient is not available on every platform.
&gt; XAML editor Uh, you mean the one built-in to Visual Studio?
 var searchTerm = request["search[value]"][0]; You've got an unhandled exception here if the request contains no search value. If you can guarantee the array value, then it's ok
One way you could fix this is: class Person { private readonly BusinessProperty&lt;string&gt; _name; private readonly BusinessProperty&lt;int&gt; _age; public Person(){ _name = new BusinessProperty&lt;string&gt;(); _age = new BusinessProperty&lt;int&gt;(); } public BusinessProperty&lt;string&gt; Name { get { return _name; } set { _name.Value = value.Value; } } public BusinessProperty&lt;int&gt; Age { get { return _age; } set { _age.Value = value.Value; } } } Unfortunately, as /u/Xenoprimate said, you can't override the assignment operator in C#. This will still fire the constructor of BusinessProperty, but that instance will be GC'd almost immediately afterwards. Another solution similar to this would be to expose both the business properties and their values separately (say, expose the value as Name, and the property itself as a readonly NameBusinessProperty), then you wouldn't have a constructor call for the assignment, but you would have to use NameBusinessProperty.Undo() instead of Name.Undo().
You missed a third one, creating alias for generic definitions: using IntList = List&lt;int&gt;
At the line p1.Age = 29 your implicit operator transforms 29 into a BusinessProperty&lt;int&gt; instance with the first and, so far, single value of 29. And sets up your Age property of the Person p1 to this new instance. Similarly, at the line p1.Age = 28 you have converted 28 into another instance of BusinessProperty&lt;int&gt; and again it has no history. And it replaces the previously set instance of the Age property to this new instance.
RE #4: People often use linq in their projects which will give you ElementAt() on lists. 
Yes. I'm currently looking at other editors, but so far I don't like 'em. I may have to write one myself :D :D :D Best, John
There is an unity3d subreddit. : /r/unity3D 
Here is a rough sketch of what I mean: class Program { static void Main(string[] args) { var p = new Person { Name = "Mike", Age = 28 }; p.Name = "John"; p.Age = 29; p.Age = 30; p.Undo(); p.Undo(); p.Undo(); p.Undo(); p.Undo(); } } class Person { private Stack&lt;IChange&lt;Person&gt;&gt; _changes = new Stack&lt;IChange&lt;Person&gt;&gt;(); private string _name; public string Name { get { return _name; } set { _changes.Push(new Change&lt;Person, string&gt;(this, p =&gt; p._name, value)); _changes.Peek().Do(this); } } private int _age; public int Age { get { return _age; } set { _changes.Push(new Change&lt;Person, int&gt;(this, p =&gt; p._age, value)); _changes.Peek().Do(this); } } public void Undo() { if (_changes.Any()) { _changes.Pop().Undo(this); } } } interface IChange&lt;TEntity&gt; { void Do(TEntity entity); void Undo(TEntity entity); } class Change&lt;TEntity, TProperty&gt; : IChange&lt;TEntity&gt; { private Expression&lt;Func&lt;TEntity, TProperty&gt;&gt; _selector; private TProperty _oldValue; private TProperty _newValue; public Change(TEntity entity, Expression&lt;Func&lt;TEntity, TProperty&gt;&gt; selector, TProperty value) { _selector = selector; _oldValue = selector.Compile()(entity); _newValue = value; } public void Do(TEntity entity) { ((FieldInfo)((MemberExpression)_selector.Body).Member).SetValue(entity, _newValue); } public void Undo(TEntity entity) { ((FieldInfo)((MemberExpression)_selector.Body).Member).SetValue(entity, _oldValue); } } If a list would be used instead of a stack, you could also redo.
You might find [this MSDN article](https://msdn.microsoft.com/en-us/library/ms836794.aspx) helpful.. &amp;nbsp; Also, make sure you understand the [difference in the way Java and C# handle access modifiers](http://www.javacamp.org/javavscsharp/access.html). At first glance they're identical, but there are a few differences that could make or break a banking application.
After a quick look: No Tests Duplicate code/query in DirectoryController.Get(). Use something like the repository or command pattern to make queries reusable. Don't you have to validate some things in DirectoryController.UpdateClient()? Everyting can be updated even if id doesn't exists? Why is DirectoryController.Get() a post and not a get? You use await/async, but always directly await a result. For example DirectoryCOntroller.Get(), you query for both a respone.data and responseFiltered, why not let those queries run async and set the result when both finished. You created classes like LoginHelper, when you already have a login class. Why not hide the login validation in this class. Because at the moment you have an Anemic Domain Model, which is described by many as an anti-pattern. Overall thoughts: The code is nice and readable. But you are missing unit tests. I would recommend doing some TDD because you will think more about what goes in a method and what is the desired outcome in those situations.
Makes sense. It is an universal windows app. If it is not available, can you point me to the best alternative? 
Of course. Thank you!
Thank you, this was it. Silly me :)
[removed]
Yes, it's in System.dll so it's available (at least in .NET Framework). Of course you need the correct namespace either in a using or when declaring the field or variable. Edit: Ok, so it's a universal windows app, then things are definitely different :p.
&gt; typically discouraged. Initialize your return value up front, set it, return it. The 90s called.. they want their coding practices back.
 I'm listening to software development podcasts while commuting to work. 
thanks! I think this is exaclty what I need. Don't know why goolge did such a bad job for me this time ;) Using the mysql .net connector you can work with the native Identity Framework. Awesome. 