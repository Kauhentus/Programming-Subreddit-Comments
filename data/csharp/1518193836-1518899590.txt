The service generally returns the model to the controller. public Controller(){ var model = service.GetModel(); return View(model); }
Use PostAsync() and add your data to the content of a HttpRequestMessage - also set its metod to POST, if it still posts to your GET endpoint you have your webapi wrongly configured. (maybe lacking [HttpPost] annotation or something in your webconfig (or startup for core))
Can't you just use c++ dll in c# code ? Create one if needed. 
I don't think he is asking about ICommand, he only said he knew what ICommand is. He wants to know how to change the layout of the App and remove/switch some UserControls based on user action. In web terms something like going from "/userList.php" to "/userDetail.php?id=8" 
I can sometimes do that too. It just depends on the topic. 
If you're talking about the warning/info message and it has a Code (e.g., "IDE1006"), would using a `#pragma` directive in the class file work? #pragma warning disable IDE1006 https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/preprocessor-directives/preprocessor-pragma-warning (Naturally, replace "IDE1006" with whatever code(s) your code is resulting in.)
I put together a Visual Studio item template to generate *.cs files for extension properties, so I guess I could just add it there. That's probably the best solution.
I just had my request for this formally declined :(
Well I’m only ever doing either on a topic I care about (whether personally or for work), so it’s like the best of both worlds. 
models are POCO's and thus simply contain properties and zero logic.
The service shouldn't return the view model directly, unless it's a service specifically dedicated to creating view models. Ideally your services return a domain model that your controllers convert that to view models. This way your services can return more data/context than you want exposed to the client.
This is not Model in Model View Controller means. Go read the Wikipedia article on MVC! Related reading: Thin Controller fat Model
Have that book! Which chapter is this covered in? Haven't gotten all the way through yet.
Thank you!
Your second link is similar to what I nornally do when I want a "string enum". However, are you simply trying to do this? public enum MyEnum { Foo, Bar } var e1 = MyEnum.Foo; var e2 = MyEnum.Bar; Console.WriteLine(e1.ToString()); Console.WriteLine(e2.ToString()); ... Console output: Foo Bar ?
I edited the original post with some more information of what I need. 
What's wrong with public static class StringEnum { public const string EnumName1 = "EnumValue1"; public const string EnumName2 = "EnumValue2"; }
I extend namespaces all the time writing extensions. If your project is extending the Selenium namespace then this OpenQA.Selenium.MyLibraryName is perfect. 
Seconded. ASP.Net hides a lot of complexity from the developer by default. Understanding the page life-cycle is essential, even if it comes at the cost of coming to grips with the hidden complexities. Also it would be good to note that if you're coming from a client-based language like JS, you need to be aware that ASP.Net is server-side and acts much differently from JS. Being familiar with the basics of HTML forms is good, though, as ASP.Net is built on that same concept. Knowing how to get/post raw data helps a lot. And then there's the universal advice: nothing is magic and everything happens for a reason. If you can't figure it out, keep going. Experts are never made in a day.
 enum someenum { ONE=1, TWO=2, THREE=3 } static Dictionary&lt;someenum,String&gt; enumStrings; static void Main() { enumStrings=new Dictionary&lt;someenum,String&gt;(); enumStrings.Add(0,"THIS IS AN ERROR!"); //Enums can't be null, so 0 should always represent an uninitialized value. enumStrings.Add(someenum.ONE,"This is message one!"); enumStrings.Add(someenum.TWO,"This is message two!"); enumStrings.Add(someenum.THREE,"This is message three!"); String input; someenum theValue; input = "ONE"; if (Enum.TryParse&lt;someenum&gt;(input, true, out theValue)) Console.WriteLine($"{theValue} = {(int)theValue}"); else Console.WriteLine($"{input} is not a valid value."); Console.WriteLine(enumStrings[theValue]); input = "BOB"; if (Enum.TryParse&lt;someenum&gt;(input, true, out theValue)) Console.WriteLine($"{theValue} = {(int)theValue}"); else Console.WriteLine($"{input} is not a valid value."); Console.WriteLine(enumStrings[theValue]); Console.ReadKey(); return; } You can't have an enum be a string directly (You could cast it's name to a string and use underscores for spaces, but that's a **bit** of a hack... although i've seen it done plenty of times without a lot of confusion/problems.
As far as I know, there isn't a way to have `ErrorEnum.InvalidScope` return a string unless InvalidScope was a field, property or method that returned a string. However, implementing `IEquatable`, overriding `ToString()`, `GetHashCode()` and `Object.Equals()`, and overloading the `==` and `!=` operators, you can define a class that starts to behave like an enum: public sealed class ErrorEnum : IEquatable&lt;ErrorEnum&gt;, IEquatable&lt;string&gt;, IEquatable&lt;int&gt; { public static readonly ErrorEnum InvalidClient = new ErrorEnum(0, nameof(InvalidClient)); //use nameof so it is refactor-proof. public static readonly ErrorEnum InvalidGrant = new ErrorEnum(1, nameof(InvalidGrant)); public static readonly ErrorEnum InvalidCredentials = new ErrorEnum(2, nameof(InvalidCredentials)); public static readonly ErrorEnum InvalidScope = new ErrorEnum(3, nameof(InvalidScope)); public static readonly ErrorEnum UnauthorizedClient = new ErrorEnum(4, nameof(UnauthorizedClient)); public string Name { get; } public int Value { get; } private ErrorEnum(int value, string name) { Name = name; Value = value; } public override int GetHashCode() { return Value ^ Name.GetHashCode(); } public override string ToString() { return Name; } #region IEquatableImplementations public bool Equals(ErrorEnum other) { return (other.Value == Value); //make sure that the values will be unique for ErrorEnum } public override bool Equals(object obj) { if (obj is ErrorEnum) { return Equals((ErrorEnum)obj); } return false; } public bool Equals(string other) { return (other == Name); } public bool Equals(int other) { return (Value == other); } #endregion #region ErrorEnumOperators public static bool operator ==(ErrorEnum e1, ErrorEnum e2) { return e1.Equals(e2); } public static bool operator !=(ErrorEnum e1, ErrorEnum e2) { return !e1.Equals(e2); } #endregion #region StringOperators public static bool operator ==(ErrorEnum e1, string s2) { return e1.Equals(s2); } public static bool operator !=(ErrorEnum e1, string s2) { return !e1.Equals(s2); } public static bool operator ==(string s1, ErrorEnum s2) { return s2.Equals(s1); } public static bool operator !=(string s1, ErrorEnum s2) { return !s2.Equals(s1); } #endregion #region IntegerOperators public static bool operator ==(ErrorEnum e1, int i2) { return e1.Equals(i2); } public static bool operator !=(ErrorEnum e1, int i2) { return !e1.Equals(i2); } public static bool operator ==(int i1, ErrorEnum s2) { return s2.Equals(i1); } public static bool operator !=(int i1, ErrorEnum s2) { return !s2.Equals(i1); } #endregion } Usage: public class Program { public static void Main(string[] args) { var e1 = ErrorEnum.InvalidClient; var e2 = ErrorEnum.InvalidCredentials; if (e1 != e2) { Console.WriteLine("Enums are not the same."); } Console.WriteLine(e1); Console.WriteLine(e2); if (e1 == 0) { Console.WriteLine("e1 equals 0."); } if (e2 == "InvalidCredentials") { Console.WriteLine("e2 equals InvalidCredentials."); } var dict = new Dictionary&lt;ErrorEnum, int&gt;(); dict.Add(e1, e1.Value); if (dict.ContainsKey(e1)) { Console.WriteLine("e1 is already in the dictionary."); } //Console output: //Enums are not the same. //e1 equals 0. //e2 equals InvalidCredentials. //e1 is already in the dictionary. } } Hope this helps. 
Almost perfect - until i forgot to add a if for one data type and got stuck in a loop where i checked for is Object. 
How r u deserializing with no default constructor... ?
I've only just started reading it myself. I'm about 100 pages (out of 1000) into it. Though I've read the 1st, 2nd, and 5th editions prior to picking this up. I feel like he's covered OP's question pretty well in past readings.
I remember having to do that once. I was wrapping some legacy robot controller code in awaitables so that the UI wouldn't hang.
Your object has a private setter for the TimeCreated property so when you deserialize into your Transaction object, the property is not set to the value in your json. You can create your own JsonConverter to enforce the usage of your constructor that takes the timeCreated (pretty sure you can pass in it as a DateTime). Might be possible to get it to use the constructor normally as well, can't remember at this time.
First of all, consider using DateTime.UtcNow or DateTimeOffset. Secondly, I think you can achieve the behavior you want by using two constructors. One that sets TimeCreated and has the name parameter like you listed, and a parameterless private (or protected) constructor that has the [JsonConstructor] attribute on it. Json.net will then use this constructor to deserialize. Don't worry about the fact that you have the private access modifier on the TimeCreated property, Json.net will use reflection to set this value anyway.
For what it's worth, you don't need the public access modifier on a property in order for Json.net to be able to set it's value.
I just found this too. Makes it easier than using a custom json converter if you own the class yourself. https://stackoverflow.com/questions/23017716/json-net-how-to-deserialize-without-using-the-default-constructor
I like the approach your first link uses, but would extend it to use an extension method. public static class EnumExtensions { public static string GetName(this Enum value) { /* stringValueOf method code of your link here */ } } That way you can use it like ErrorEnum.InvalidClient.GetName() while keeping it an actual enum. (The reflection may have a little overhead, but that should be hardly relevant in most scenarios) Alternativley I'd go with the solution to use a Dictionary containing the mapping. Btw: Your example code can be shortened, if you don't do anything explicitly requiring a backing field you can just use public int Value { get; } public string Name { get; } and get rid of the private fields.
Huh, TIL. I've just always done basic Poco for these kind of classes
I wasn't. The serialization was taking place with List&lt;Transaction&gt; and not my Transaction. So every time it created my list, it would pass values to the Transaction constructor that you'd see. After your comment, I added a default constructor to Transaction. private Transaction() { } But I'm still getting the same problem where my string TimeCreated is still null.
Yep, it can set private properties and fields. It cannot set read-only properties so when using auto-properties if you do public Foo { get; } It can't set that value. But it will set public Foo { get; private set; } You can do all sorts of fun things with reflection. Like change the value of static framework values like TimeSpan.Zero
common naming practice where i work is: OurCompanyName.OurProduct.Other.Sub.Namespaces consequently this is the naming format of the selenium packages. so, we have a solution with a bunch of utility libraries in it. one of them extends and wraps NLog, another Autofac. so we have: - Company.Utilities.NLog - Company.Utilities.Autofac this is similar to java package naming conventions where you do your company's website in reverse followed by the package stuff. selenium's is "org.openqa.selenium". you don't work for openqa and your package isn't part of the selenium package, so you wouldn't start with org.openqa.selenium. it'd be something like com.yoursite.mylibraryname.selenium. so, i would recommend MyLibraryName.Selenium. gets rid of the potential confusion that you bring up while still making it clear what the code is for. granted, if the intent was to actually submit the code to be included as part of the official code-base, we'd do OpenQA.Selenium.Other.Sub.Namespaces.
I haven't heard any rules on the topic. I would suggest using `MyCoolCo.OpenQA.Selenium` to make it clear you aren't officially part of the project.
If you cant use the string value of the enum directly, the best way in my opinion is to use the [Description("Some Text")] attribute and use a helper method to retrieve the values. This is extremely simple and very easy to maintain. Performance is not really a concern as you can very trivially cache the results.
It's a bad practice regardless of the size of your project.
type 'prop' and tab .. automatically gives you an auto-implemented property.. fields doesn't make sense to me unless it's a const/readonly
In theory it doesn't matter. When you compile the code into machine code, all of those simple properties become fields. In practice it is a really big deal. Lots of libraries only work with properties and don't even acknowledge that fields exist. This includes most ORMs, XML/JSON serializers, UI toolkits, etc. *** I wrote an ORM. Could I add support for fields? Yes, it would take maybe 15 minutes. Will I? Hell no. It's not even worth those 15 minutes because no one writes code with public properties so no one, myself included, takes the effort to support it.
Even public readonly fields are bad - you'd use getter-only properties for that.
If you make the effort to write even throw-away code properly, it eventually becomes habit and you don't even have to think about it any more.
Just get in the practice of never doing it. But you are right. For a same personal project. It doesn't matter. The way c# compiles... If you ever want to change a field to a property so you can do some logic on the get or set method, you will have to change it to a property. This would be a major version bump / breaking change. Instead of dropping the .dll into a file and never recompiling. You would have recompile. With properties you could just get away with dropping it into a directory. Now, why you would deploy a .dll without recompiling is a different story. But it's mostly for like large scale releases. If your .dll was called by some large file or something and it was distributed across a lot of machines. Think games distributed through ateam, tons of VMs, etc. Also, I think docker handles this in a similar way, through its layers when building and pushing an updated image. You may only download newer layers, and this would make it smaller change. Either you push a single .dll or a the .dll and the other crap that calls your .dll. 
Your public property is your public field. Use privates for anything that's only being used for only that file. Use a public property if you need to access those objects/variables outside of the class. 
Agree with the others. Prepend the namespace with your own, rather than appending.
Try adding [JsonProperty] to your properties.
It's just a `{ get; set; }`, why would you avoid it given the benefit of using it? I mean do you know the benefit, right?
this is a common approach that is useful in some situations, but if you want things that are potentially 'wrong' with this solution in a broader context ... the biggest problem is probably that you can't use the 'enum' as an actual type. you can't make variables, properties, method parameters, etc ... of type 'StringEnum'. you would just have a string and thus lose out on a bunch of compile-time checks in your code. this means more potential bugs. you can get around this by making the class not static and just having the static const for values, but then you're really just doing what the OP did but losing out on the benefits of having the int value. you lose out on functionality that enums give you like decorating one with the Flags attribute, using them to index collections, etc ... you get slightly less performance than a typical enum backed by an int for all operations other than '.ToString()'. you lose out on third-party tooling surrounding enums like resharper generating switch cases for you.
I will try as suggested. Though, the API Endpoint has HttpPost annotation. Thank you. 
It works as expected when tested using Postman on my dev machine. Problem starts when we deployed in UAT environment of client. 
No there is no delegate handler. This is weird thing i had seen and trying my best to get my head around this
Is it best practice to do 100 on the highway when the speed limit is 55? Absolutely not. However, there are times when someone has to do 100 (cops, ambulances, you have to take a shit, etc). Using fields instead of properties follows the same theme. Don't do it unless you have a legit reason to unless you need to shit on your codebase.
As a C#/Selenium QE, I'm curious as to what your libraries are. Also, it's great that people like yourself do this and put it up for people like myself to use.
There is a sharp divide on whether or not one should have public fields. In Unity (the game engine), it is quite common to expose configurable members or a class as public fields - but that choice is consistent across the game engine and the editor integration. The benefit of a property, of course, is that you can validate data on the getter and/or setter with your own logic, and you can limit the ways in which your class' internal state is exposed. Access to a raw field that should be hidden in SOLID code can have drastic and unintended consequences via state mutation.
It seems to be best practice to use properties for even simple properties. There are some 3rd party tools that only work with properties. However, in reality there is almost 0 benefits for a simple property over a field. It's abstraction for the sake of abstraction. As a programmer, having asked other programmers, I've never heard anyone remark that making a field a property would have saved them time. 
A public field allows everything to bypass all protections, all procedures... it has the secret back door key to change its value at will. Another potential issue is a single point of failure, without a locking mechanism or synchronized data processing... this data can run into issues just simply maintaining proper state... ie race conditions.
Right now I'm working on a group of extensions for the By class. I found some elements can be a pain to locate for any number of reasons. So I've added a bunch of ways to locate elements. (ByText, ByPartialText, ByTextAndTag, ByHref, ByAttributeValue, etc.) I also have one that provides a wrapper class for IWebElement that allows you to store its By object. This is simply to make it easier to deal with stale elements (if you store the By object you can just catch the stale element exception and try again). These are pretty small projects. Mostly I'm just trying to pad my resume to try to get out of manual QA. 
Even without worrying about inheritance bullshit, it's still like to have properties in case you want to change an implementation of something in the future. Like maybe you want to make sure a string is always upper case, or trim it before storing it, or maybe you have a price you decide you want to round to the nearest 25 cents. Sure, you could add all the properties later, but it's very little extra work to do now. If the primary limitation on your coding speed is how fast you can type, congrats on being the best programmer in the world
In IL code, sure. But that's just an intermediate step before you get the to real machine code.
Do you know the benefits?
It's not an abstraction, it is indirection. /* I know we like to throw that term around a lot, but there is a difference between abstraction and indirection. `DrawBox(x, y, width, height, rotation, thickness)` is an abstraction for drawing four lines. And drawing those four lines is an abstraction over placing individual pixels on an image. Knowing the difference between the two is going to make you a much better API designer. *: Well potentially indirection, as simple properties are optimized away.
SOLID? SOLID says nothing about whether or not you use properties vs fields. In non-trivial cases, properties are an example of encapsulation. For example, when setting the property also triggers a change notification. And encapsulation is an OOP concept. But OOP != SOLID. 
There are some. The most important imho is to change implementation without breaking other classes. Also, why are people downvoting my post? Did I say something bad?
It saves time down the road when you want to refactor that class. Properties are so much easier to throw around than fields. You also have the full capabilities of polymorphism in case you need to do something fancier. With fields you're stuck. 
We actually have a large project where we deliberately use fields instead of properties. Properties are syntactic sugar around get and set methods. Fields are variables that you get from and set to but emphatically are not methods. We use interface-like contracts (because you can't actually define fields in interface) which our clients implement to interface with our services. We can be certain that these are straight-forward variables -- no side effects, no funky behavior, no mutation of what you think you're setting.
Properties allow for you to have inheriting classes modify the implementation. They allow for you to have complex code in them, or to have properties that are computed from other properties. They allow for inline validation if you want it in the mutator. And they're also the standard and a core fundamental part of the language, and part of the coding standard for not just this language but for pretty much every coding language out there. If you look at other languages like Java or Python or some of what ECMAScript is adding, they all hide their fields privately and provide get/setMyField functions. This is exactly what properties are, just that properties are cleaner ways of doing this. Not hiding your internal variables or your raw data is a thing I've never heard a programmer advocate.
That person is wrong: getter-only properties are mostly syntactic sugar for the thing they are calling bad. Don't get me wrong: getter-only properties are great syntactic sugar and I prefer to use this syntax almost exclusively. But to call the other "bad" is to argue about syntax, not functionality. Some explanation for why I said "almost exclusively". Getter-only properties are a specialized auto property: a public get which is backed by a private readonly that can only be assigned inline or via ctor. If you need to assign anywhere else, these won't work. I rarely find myself in such a position but it can come up.
A field doesn't have to be public. But I agree with most of what you said. I'm just saying that most of the time you feel like a field will do the job, it will do the job until the day that class is never used again. In a very small number of instances, it will need to be moved to a property...you just have to decide whether those cases are worth basically EVERYTHING being a property. I've personally never seen an instance where making something a field has come back to bite me in any significant way, but I use properties in most cases solely because my coding standard tells me to. The coding standard is the authors telling everyone that, "Since some programmers don't know how to use fields correctly, all programmers must use properties." That's fine, and probably saves lots of time/money in the grand scheme of things. I'm just saying it's not as clear cut as everyone makes it out to be.
Yea, that's not even remotely close to what that means. Kudos on a novel attempt though. Though I've heard many ridiculous claims about OCP over the years, this is a new one on me. I guess that's what makes SOLID so long lasting; you really can pretend like it means anything that you want it to.
For #2, that's just laying down landmines. You may think you're not going to need it, but there's no way to know for sure unless you know every library your going to use intimately. Lots of libraries use a surprising amount of reflection and many of those don't support fields. As to #3, the context is a simple property. If it was a complex property, there wouldn't be a question.
Well, you have to add the keyword if it's not virtual, true. But like with any other refactoring enabled by properties, you do this in one place. If you have a member that is used in 30 places in that class, you would have to touch 30 places if you make any change to the member.
In C# making a method virtual isn't a breaking change. The IL code assumes that all methods are virtual. But yes, you are correct. In the real OCP, you make every method virtual by default. That way you can always extend functionality via subclassing if you want. This is the "open for extension" part of OCP and a huge influence on Java. The "closed" part means that once you ship a class, you never change it's behavior, even by adding new methods. (bug fixes are allowed)
Because he asked if there was a reason and you responded with "don't you know the reason?"
Ya, I actually 100% agree and have seen this phenomenon. Thanks for reminding me. However, if property needs complex logic instead of an auto property, then it's going to have a backing member accessible by the class anyways, right?
I guess I can agree to both of those. I feel like my projects may incorporate more 'business logic' than most peoples as I deal with simulations (UAV). For those internal facing classes, I mainly use fields where appropriate as I know that nothing else will touch them.
My project doesn't use an ORM, or a database besides in-memory repositories and files. We do interface with other systems, though. And for those outwardly facing classes/components we have interfaces. For much of the inner business logic I try not to unless it's drastically helping unit testing or if the design calls for a need for the possibility of polymorphic behavior down the line. I do understand what you mean, though.
I feel like there's a fine line between too much of something and not enough. OCP seems to obliterate that line in my eyes for many projects. Your answers are all great though, and I feel that you have experienced most of the detriments first hand.
 The difference is that if you begin with the property and then introduce tha backing field later on, the chances are most of the code will use the property. Then when a new guy comes in and tries to figure out how to implement "x", he will see the property pattern
This is why in my current project I ditch the DTOs as soon as I can and validate the resulting domain entities instead. I have tests written for the DTO to entity map. That covers it pretty well for my case.
I would not use your ORM. I really love public fields sometimes. 
How do you feel about constructors, because it does support those.
I'd like to say I've seen every misapplication of design patterns, but my clients are ever so creatively destructive. The newest one is reimplementating the ASP.NET pipeline inside ASP.NET. 
I prefer Avalonia over Xamarin Forms though. The styling system is better and the Xamarin Forms player simply doesn't work.
DataGrid?
Sure, but I just mean that using public fields makes it trivially easy to break every SOLID principle.
Let's go down the list... ## SRP Doesn't care if you use properties or fields, just so long as you don't use too many of either. ## OCP Ok, one point for you. ## LSP If anything it prevents you from breaking LSP because subclasses can't alter the visibility or behavior of said fields. ## ISP Well if you are actually using ISP in the original "I need to segregate these APIs to reduce recompilations" sense, no it doesn't matter. If you are using it in the modern "Dhur, abstract interfaces are cool" sense... well you can still have all the abstract interfaces you want. You just need explicit implementations to wire them up to the field. ## DI I love the current Wikipedia definition for this one. Some times its dependency injection or the "constructors are a thing, yo" principle. But currently is says we're going with "Dependency Inversion", then it proceeds to not describe dependency inversion but instead reiterate the "Dhur, abstract interfaces are cool" mantra. So no need to repeat myself.
What does the gridview do and how it is different than a data grid?
We use interfaces for most of our classes because it allows for mocking in unit tests.
I've had this one many many times. DTOs with interfaces. Just why?! They've taken the idea of 'separating implementation and interface' and not understood it beyond the very surface level. It's the same sort of people who confuse DI with use of interfaces and the associated libraries.
&gt; Lots of libraries only work with properties That’s pretty exaggerated. The vast majority of libraries don’t do any kind of reflection and so works with anything. A few libraries do, and may then only work with properties. 
There are lots of reasons to avoid public fields and use properties instead. The first is, you can't put a field in an interface, only properties. Interfaces are essential when you start looking at IOC/DI containers. They have uses in unit testing too, but I'm a classisist not a mockist, so less of an issue for me. You can't make fields virtual, so no inheritance (not that inheritance is necessarily great) DI frameworks generally won't work with public fields, only properties (Can't confirm that for all frameworks, but the ones I've used). There are some issues with versioning if you use fields instead of properties. It's a bit in depth and honestly I can't quite remember the details. You can't use things like INotifyPropertyChanged with fields. Needs properties because you can add code to the setter. There might be a tiny performance gain, but with performance optimisations you generally want to focus on specific high traffic areas rather than try and optimise everything. (see next point). Finally, if you're using public fields in a class you're already introducing an allocation overhead. If performance is key here, consider a struct (value type) as it reduces load on the GC. There are some uses, consts are a good use case. Read up on the difference between const and readonly. And private fields are generally fine. The only caveat is the more state you add the harder it becomes to debug and test. There are some practices we borrow from functional programming that make programs much easier to reason about.
I think a big part of the problem is that they don't understand that the public interface of a class is an interface. They see the `interface` keyword and mistakenly believe that's the only kind of interface. But as to making abstract interfaces for DTOs? I have no fucking clue. There's a lot of things that I consider to be suboptimal or downright stupid, but I still understand the motivation for. But not this. 
If the DTO is literally just a DTO (i.e. no business logic which is how a DTO should work (cue contentious responses) you don't really need interfaces. If your DTOs are starting to spread from the communication end points into the actual application then you have a different problem. So a DTO which is simply a collection of properties really doesn't benefit from mocking. If you start adding additional functionality to it, then you have new problems :) Again, it's not a hard and fast rule. Sometimes it makes sense to hydrate a dto which includes additional functionality and can be used as a model in other areas. This tends to go against some useful design principles though, especially when you start looking at microservices rather than ORMS. ORMs are a bit of a special case. Some can add useful things like InotifyPropertyChanged, but even things like the new versions of EF eschew this for POCOs because DTOs should reflect what needs to be transmitted rather than what the application uses. Again, horses for coureses, there are edge cases.
I second this. I have done this in several projects. 
Private setters can be accessed by reflection so it can be set. Reflection doesn't respect access modifiers. I've written some dirty code in the past to access private and internal fields.
I find a good rule of thumb is to make interfaces for objects that you're going to add to an IOC. You can register classes with most IOCs, but you're limiting any override to inheriting from your base class. Interfaces for leaf noes like DTOs is a waste of time. Sometimes I'll make an interface that wouldn't otherwise be necessary if every (or nearly every) other object in the sub-graph has an interface. I feel then that it makes the API easier to explain.
I agree. Just use properties everywhere. It doesn't cost implementation time. It doesn't cost performance. It's a hedge against possible future needs. Most programmers should be working on a higher level of abstraction than worrying about fields vs. properties. If you allow public fields in an API (even internal ones), you're wasting developer time _deciding_ whether to use a field or property. If you always use properties, there's no downside. There's no time wasted during reviews arguing about whether a property or field would be more appropriate. The syntax for a read-only property is minimal. The compiler/JIT/AOT will take care of the rest for you. 
IMO, size doesn't matter in this case. I am **always** suspicious of this, because the price of writing a trivial property is exceedingly small but the benefit is forever.
"You have to take a shit" is apt here 😁😁😁
Public readonly fields by default, properties only if necessary. Encapsulating a field is literally two key presses with ReSharper, so there's no need for premature abstraction.
Thin controller, thin model, fat service container. 
A Gridview in UWP lets you tile items like so. It would also adjust to the screen width and length automatically and move the items around to make it look good. https://i.stack.imgur.com/H5yXD.png
A Gridview in UWP lets you tile items like so. It would also adjust to the screen width and length automatically and move the items around to make it look good. https://i.stack.imgur.com/H5yXD.png
In that case, WrapPanel?
True, will json deserialise do that though? My memory says no but I might remember wrong.
Oh. My. God. Yes.
3.5 will run on windows 7 without any installation 3.5 and 4 supported on 7 and XP \(SP3 for dotnet 4\) you should be able to use dotnet 4 to 4.6 with most windows 7 PCs without a problem after installing it see wixtoolset bootstrapper [http://wixtoolset.org/documentation/manual/v3/bundle/wixstdba/](http://wixtoolset.org/documentation/manual/v3/bundle/wixstdba/) to install the dot net framework before your app
&gt; In that case, you might want to switch to lazy instantiation. If you had already exposed a field of type T, there's no way you could switch this to Lazy&lt;T&gt; without breaking client code. But if you used a getter-only property, you could switch it to using a Lazy&lt;T&gt; backing field without affecting any clients. Upfront: I don't do much C#. Couldn't you just switch from a readonly field to a get-only property at that point *because* you need the encapsulation at that point?
I would now start with this standard-text like "you shouldn't start learning c# with wpf. Use console applications." Which doesn't match your question but who cares? :D About your question: As far as I know, WPF is currently not planned to be supported with .net core, so if you want to start with WPF you will need to go for .net standard. In my 1min of research for your question I saw another, third-party framework named "Avalonia" which is roughly said "WPF with .net core" I think the reason, that WPF/.Net Core aren't that well together because the huge Windows aspect of WPF is not matching with the cross-plattform thing from .net core. 
There might be a better way, but you can create your own custom `TextWriter` which wraps the standard/existing `Out` of the `Console`, with which you can then record each line as it's outputted and still feed it to the standard output: static void Main(string[] args) { var consoleRecorder = ConsoleRecorderDecorator.SetToConsole(); Console.WriteLine("Line 1"); //outputs to console and gets stored in the `consoleRecorder` Console.WriteLine("Line 2"); //outputs to console and gets stored in the `consoleRecorder` Console.WriteLine("Line 3"); //outputs to console and gets stored in the `consoleRecorder` var recordedLines = consoleRecorder.GetAllRecordedLines(); Console.WriteLine("RECORDED LINES: " + recordedLines.Count); foreach (var recordedLine in recordedLines) Console.WriteLine(recordedLine); //NOTE: This ALSO gets stored in the consoleRecorder! } public class ConsoleRecorderDecorator : TextWriter { private readonly TextWriter OriginalConsoleStream; private readonly List&lt;string&gt; AllLines = new List&lt;string&gt;(); public override Encoding Encoding { get { return OriginalConsoleStream.Encoding; } } public ConsoleRecorderDecorator(TextWriter consoleTextWriter) { OriginalConsoleStream = consoleTextWriter; } public List&lt;string&gt; GetAllRecordedLines() { return AllLines.ToList(); } public override void WriteLine(string value) { OriginalConsoleStream.WriteLine(value); AllLines.Add(value); } public static ConsoleRecorderDecorator SetToConsole() { var consoleDecorator = new ConsoleRecorderDecorator(Console.Out); Console.SetOut(consoleDecorator); return consoleDecorator; } }
4.5.2 is the version you should Target for Win7 as that's what the service packs provided by themselves. Installing another net framework version is fine for general consumer but not so fine for enterprise software where you'd have to work with it departments and update policies.
WiX can do that. But please use wixsharp for the love of your build responsible person.
thnx for replay. i wanna say that i already know console apps, and next to learn is uwp in book which i am reading rn, anyways thanks for your answer, ill give it a try
You can accomplish this using the form.controls collection. Instead of using currentVar.Text you can use form.Controls[currentVar].Text.
https://msdn.microsoft.com/en-us/library/system.console.setout(v=vs.110).aspx `Console.SetOut(newTextWriterGoesHere)`
What you are doing is `"food1".Text` which is obviously not going to work. A variable with name `food1` is not the same as a string with value `"food1"`. Variables are compile time names for values they do not exist at runtime. If you want a list of `Textbox` objects then construct an explicit list. `new List&lt;Textbox&gt;{...}` Don't use reflection for this.
Use a ListView and override the template to use a UniformGrid. [Is this what you are looking for?](https://github.com/L-E-son/EqualSizeGridPresenter/blob/master/Mockups/Mockups/NewPresentation.xaml)
That looks like it may be what I'm after, thank you.
Your pc will handle 10, I assure you. 
Take a look at [this article](https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/commanding-overview). I think there are a few things fundamentally wrong with your approach and reading the linked article could help you out in that aspect. If you are using MVVM in your project, in order to get the functionality you want I'd recommend defining the command(s) on the ViewModel and binding to them in the View code. From the looks of it, this may be what you want to do instead. However, if you don't care for all of that or just want a quick solution, you can just take in the command(s) in the constructor of your class. I wouldn't recommend creating a static field for a command. And to answer your other questions: &gt;*I would like to declare a RoutedCommand inside the Helper class, call it myCommand; does it need to be static?* It would make more sense for the command logic to come from elsewhere. You don't want this class doing too many things. That's why I would recommend either passing it in as an argument in the constructor or just doing it a different way. &gt;*How do instances of a class tap into a static command?* Mark it as *static*. Then reference it via MyClassName.MyVariableName &gt;*How do I make sure the items in the menu are activated?* You mean like if the command is activated? Try something simple first, like changing the text of the source menuitem. &gt;*Do I need some CommandBinding instances? If so, does that work at the instance level (not class level).* I don't think you'll need it.
Wow, feel like you didn't read the sentence before it. But, if I'm doing some small personal project for a proof of concept or just messing around with some random library for like 30 minutes. I'm not going to spend any time setting up interfaces, dependency injection, unit tests, mocking, setting up configuration extensions, etc. There's so much stuff that you wouldn't want to waste time doing if you are just testing or playing around with something. 
Or a custom container. I used to know how to write my own panels that did fancy balancing for inconsistently sized controls, but I forgot how.
If things are that bad, I doubt developing applications is pleasant experience. Compiling things, using IDE's are not some lightweight actions.
listFood.Add(food.Text + i.ToString());
If you use guid for id the duplication will not be an issue. Otherwise you must specify how to handle conflicts. I'm not done with sync on my projekt. But what we do is that all tables syncing from client to server uses guid. And all tables that are maintained at server uses int id (performance) So no server tables may be changed in offline mode, only direct in server tables. Ain't tested so cant say if it works, but this is my idea for solution. Don't know server mssql req but we use localdb on client Side.
Subclass Panel , implement resizing behavior at MeasureOverride and ArrangeOverride , use it as ItemsPanel for ListView
Avalonia isn't ready yet. 
I don't see anything wrong with using WPF or WinForms to learn. I originally learned with VB 3, which was basically all GUI and event handlers. (Didn't get classes until VB 4.)
&gt; Couldn't you just refactor from a readonly field to a get-only property because you need the encapsulation at that point? Yes. The applications using your library would need to be recompiled, but not otherwise changed.
The one caveat to that is if the OP has the textboxes nested in a container control (tab, panel, groupbox, etc.), then I think that will fail. You can do a `Controls.Find(*controlName*, true)` to search through child controls. Also, just for fun - and assuming they are all top-level controls - a LINQ'ified version: var prefix = "food"; var listFood = new List&lt;string&gt;(); listFood.AddRange(this.Controls .OfType&lt;TextBox&gt;() .Where(x =&gt; x.Name.StartsWith(prefix)) .Select(t =&gt; t.Text));
&gt; if I did I'd probably use camelCase naming for them PascalCase is that standard naming convention for read-only fields in the .NET Framework. They're rare, but you can find them.
Hey, don't downvote him. If he's actually using public fields and ORMs aren't supporting what he needs, its a conversation library authors such as I need to have. 
Are you actually mocking DTOs and data models? If so, why? Are you unit tests so bad that even with them you don't trust your classes to be used in other tests?
**debugging; want to see how, at runtime, is something accessed? Easy with properties (put a breakpoint in the getter), hard with fields.** Quoted for emphasis. I don't think anyone else remembered that incredibly useful point.
Have you considered trying to use Linux, with something like MonoDevelop as your IDE and GTK# as your desktop app platform? GTK# is for cross platform apps that have a Linux feel, and I've messed around with it some and it's really easy to use. If you plan on sticking with an old PC, Linux might be a good idea and you can still code in C#.
&gt; Interfaces are essential when you start looking at IOC/DI containers. Bullshit. IoC containers don't care if you use an abstract interface or not. You can just as easily use an abstract base class. Or no inheritance at all and instead give a fully configured object to the container.
You could P/Invoke this function: https://docs.microsoft.com/en-us/windows/console/readconsoleoutput That would give you the current console buffer output. Redirected output wont contain the information you’re looking for. 
I believe you can play League of Legends and Dota 2 on Linux, but yeah the learning curve is fairly steep for someone who is really used to Windows and it might take some fiddling and searching to get everything working well. Anyways, just a thought, if you don't have a lot of money but you have time to mess around with stuff Linux is pretty nice.
&gt; interfaces I do agree with you here. &gt; mocking: Usually that leads to bad tests. Poor understanding of what you are trying to test, leads to bad tests. Not mocking. &gt; dependency injection: that's just using constructors. Exquisite meme! Come on, you want to trust someone on your team to properly initialize everything? You want to trust they wrote a thread safe singleton? There's ton of advantages and reasons why you should use a DI container in production level code. &gt; tests Sure, test for the situation. I do think you should cut out pointless code. But this discussion is devolving into show boating. Well in situation 'a', do it this way. But occasionally 'b' so do it this way. If you want to get better at coding, just code. I guess you could say, only perfect practice makes perfect. But in a field that's always changing, your best bet is to just try new things.
Yeah, I think so, that's why I mentioned GTK#. I've read some stuff about .NET Core cross platform but I've never tried it and it seems kind of hacked together.
Definitely overkill to use reflection for this.
league is my main game and unfortunatly it is not available on linux :( i hope that someday ill but new pc 😂 tbh i am not scared of trying out new things which are hard to get working and which arw challenging.. thats why i started programming and playing moba.. 
While Rowan is no longer on the EF team, definitely read his posts and watch videos of his. https://romiller.com 
I think if you just started learning c# you have better things to worry about than specific net versions
Entity Framework for .NET Core is still getting fleshed out, and doesn't currently support lazy loading. That means that if you have a class Parent, and want to access attributes on a child class, you need to use .Include(p =&gt; p.Child) in your LINQ statement.
Try out this [tool](https://marketplace.visualstudio.com/items?itemName=SimonHughes.EntityFrameworkReversePOCOGenerator) You can just put a connection string in the app config of your class library project. Add a Reverse poco .tt file after you install it. Then put the name of the connection string in the .tt file. When you save the .tt file it will generate all your entity first classes for you from your database. You can specify in the .tt file to generate seperate class files etc and view how your database looks in entity framework. This helps you learn how to write code first classes in the future but in my opinion its easier to start with a database. Its a nice tool but just keep in mind that every time you save the .tt file it will regenerate your entity framework classes. So if you want to use code first migrations this tool is only useful for the initial structure of your database so I would generate it in one project and copy the classes into another for code first modifications.
What does this have to do with C#?
You're missing the fact that the enterprise you are likely going to be working for are going to be using the regular .NET Framework (not supported on Linux, unless you want to use Mono) which means you won't be able to use SQL Server projects or work on things such as WCF services. Furthermore, you need Visual Studio (not Rider, not Xamarin Studio) to author SSRS reports and SSIS packages, which, from what you said in your OP, you'll be doing a lot. I'd also imagine the company you're going to be working for will have an IT Department that have invested a significant amount of money into their Windows infrastructure (AD, file servers, anti-virus software, licensing), so you showing up on your first day saying "I want to use Linux" will not go down well. tl;dr: Use the same technologies as the rest of the team uses, unless they're still using Visual Studio 2008, in which case look for a new job.
Also worth checking out .ThenInclude(c =&gt; c.ChildOfChild)
Get yourself a https://www.pluralsight.com subscription and watch some of the courses on unit testing with .NET. 
this is something I've considered. my pluralsight subscription ran out a few months ago. I was kind of trying not to spend any more money right now.
Goto Pluralsight and search for courses by Julie Lerman. She's the EF master!
I still have to use 2008 for certain projects. I hate it so much.
I can access lynda.com through my library's website for free. It's kind of like pluralsight. Maybe your library offers something similar.
I 'll check ty
He's not? That's unfortunate. I really enjoyed his session at BUILD last year.
Entity Framework is fast to program with, but operate very slowly on some operations. Inserting 1000 entities/rows? Well, that's 1000 inserts calls. Same thing for deletes. I [EntityFramework-Plus](https://github.com/zzzprojects/EntityFramework-Plus) for fast mass delete / update. It also contains a very detailed but simple to use audit system for db operations. Use a good ole SqlBulkInsert when inserting multiples rows.
Okay, yeah it sounds like the SSRS and SSIS parts will make using a Linux machine difficult. At my current job we use VS 2017, but as I get into more data heavy work they were okay with me using RStudio for data manipulation and reporting and we haven't really had any issues integrating them (R.NET is pretty great).
Lazy loading is on the 2.1 roadmap and if I'm not mistaken that's supposed to ship with Core 2.1 so ~Q2-Q3. https://blogs.msdn.microsoft.com/dotnet/2018/02/02/entity-framework-core-2-1-roadmap/
`Select` does what you'd expect, it selects a value. What you are trying to do is filter based on a condition, so you should use `Where`. For example: var myKeys = regexPatternDictionary.Where(x =&gt; Regex.Match(input, x.Value)) .FirstOrDefault(x =&gt; x.Key);
You'd normally palm this off to your business layer, i.e. the model. You could then test that the controller responds to responses from the model in the correct way (i.e. returning the correct status code if the username is invalid). 
&gt; var myKeys = regexPatternDictionary.Where(x =&gt; Regex.Match(input, x.Value)) &gt; .FirstOrDefault(x =&gt; x.Key); It's saying **Cannot implicitly convert type ..Match to bool** 
As much as I like to allow people to build on whatever toolset I have learned from experience that unless that project is itself a multi-platform deal and you are running one of those platforms then your main dev OS should be whatever the target system is or whatever the dev team uses in general. You think you will be ok but at some point, sooner than you will like, you will run into an issue that is unique to you and you will be forced to stand in front of your entire team and admit that your personal choice of operating system (a move which alienates you from your team from day 1) is now causing a blockage and the team is going to deliver something late. Now you might think you can deal with this and you wont have those issues and maybe you can. Personally its not worth the extra stress. Top this off with if you will be sharing an office space, unless you have a degree in computer security you might find IT hates you more than your own team. 
Use the documentation for the Regex object. https://msdn.microsoft.com/en-us/library/system.text.regularexpressions.regex(v=vs.110).aspx The correct method is on that page.
Sorry, missed a property accessor. Try it now.
I'd fixed it myself while waiting - thinkg your solution is better: var myKeys = regexPatternDictionary.Where(x =&gt; Regex.Matches(input, x.Value).Cast&lt;Match&gt;().Count()&gt;0) .Select(x =&gt; x.Key).FirstOrDefault(); 
I'd say... don't get into Entity Framework. Hand write your SQL so you know exactly what it's doing, and then use [Dapper](https://github.com/StackExchange/Dapper). 
There is nothing like navigating to a property (view source?) only to find its an interface that serves no purpose and then you have to go searching for the implementation. As a developer its the small things like this that really makes my day.
TIL
&gt;You're missing the fact that the enterprise you are likely going to be working for are going to be using the regular .NET Framework As well as mosy likely having MSDN accounts which include Visual Studio. OP would be throwing money away on wasted VS license and having to have the company pay for a Rider license.
* EF can be a hot mess if you try and mix .Net Core and .Net Framework in a single solution, because of connection strings. * If you need joined tables outside of your EF context, remember to use .Include() - Otherwise the joined entities will not be there when you need them. * For the love of god, keep the auto-generated objects in the data layer. I've seen one of these leave the data layer, then the domain layer, then a controller, aaaaall the way into some frontend javascript. Guess what happens when the next developer updates the database schema and thereby the auto-generated objects? * This might seem dumb, but remember that everything you do to an object that is attached to the database will be saved upon calling .SaveChanges() - It's not just the property you set, it is also the object you created, deleted, replaced and so forth. Be mindful of how you treat your objects.
Can you not do Include(x =&gt; x.Parent.Child)? I think I've done that before. Thanks for the heads up on this one
Don't store the regex patterns as strings, the performance of creating the regex objects is terrible. Store the regex as a collection of Regex objects, with the option RegexOptions.Compiled. If this is web or multithreaded, store that collection statically. 
I'm working on an article about developer efficiency that asks the question "How many files do you need to touch in order to add a CRUD operation?". My thesis is that just as we limit the typical number of lines per function, we should limit the number of files per operation. So if you want to add that extra interface, you should really consider cutting somewhere else. 
You used to be able to, but in Entity Framework Core you cannot. Tripped me up because I had done it the way you suggested in the past, but I'm doing all new stuff in .NET Core so had to find this. After being annoyed by it at first, I now actually kind of like the explicitness of it. https://docs.microsoft.com/en-us/ef/core/querying/related-data
Is Pluralsight paying for people to suddenly be linking to them nonstop in this forum?
It should be on the ViewModel. That's what the UI listens to in order to know to update. Having on the Model would be unorthodox, and no use for the UI but not necessarily harmful
Yep, that's how EF works. Over time the context gets polluted with objects that it is tracking and you need to restart it from time to time using a fresh context. 
IMO, the viewmodel *must* implement INotifyPropertyChanged, because that's how views track changes in the viewmodel. However, this is a generic behavior that isn't strictly *tied* to viewmodels. Depending on what you're doing, it could certainly be useful in models too. Just remember to maintain separation of concerns.
What type of operations are you performing? I may be able to recommend a bulk operation technique that dramatically improves speed. 
Both. The ViewModel has INotifyPropertyChanged to tell you about changes such as the selected item. The Model has INotifyPropertyChanged to tell you about changes to its properties. 
Ideally the model would expose appropriate events or other callback mechanism that the viewmodel would subscribe to.
You mean AddRange method? I already did that... But speed for one iteration is not a problem... 
Beware of this anti-pattern: class Customer public string FirstName {get;set;} public string LastName {get;set;} class CustomerViewModel : INotifyPropertyChanged Customer _value; public string FirstName { get { return _value.FirstName; } set { _value.FirstName = value; raiseEvent(); } } A MVVM view-model is a model of the view itself. It is where you hang your ICommand objects, your data models, and track things like which item is selected. It is NOT a wrapper around a data model. Besides being a complete waste of time, it leads to bugs such as inconsistencies and memory leaks. *** More on the topic: https://www.infoq.com/articles/View-Model-Definition 
I agree with /u/grauenwolf. Almost certainly you are getting hit with change tracking bloat. And if you are making changes like that in a loop you almost certainly want to use bulk operations. But hard to say. You yadda yadda over the important part
Fun fact: if you don't turn off object tracking in EF before adding a lot of records, your program will spend more time managing the collection of tracked objects than it will spend waiting for the database to actually save the data. You'll see this as a gradual increase in the time it takes to call `Add` or `AddRange`. 
&gt; inheritance territory and inherited hierarchies are anathema to good software. Ok, stop right there. As long as you are spouting out that ridiculous dogma there's nothing else you can say that'll I'll even acknowledge. 
That's for making reads faster. There is a separate setting for turning off tracking when doing inserts, but I don't remember what it's called. 
That's one of the reasons why I wrote my own ORM. There is also Dapper, but mine is easier to use and just as fast. https://github.com/docevaad/Chain/wiki/A-Chain-comparison-to-Dapper 
If the view binds to it then it almost certainly needs to implement INotifyPropertyChanged. 
Pluralsight is where I learned UT. They've got a great video on it. 
Maybe people like it. 
The view model should control changes to its underlying model. At no point should the model be able to update independently of the view model. If anything, you update the view model to update the underlying model, not the other way around. Inverting that only introduces unneeded complexity. If your models *need* to be updated without the view model's knowledge, you need to rethink your design, because you're not really using a "model" at that point, you're just putting a facade in front of a controller.
Oh I didn't notice it was you Graenwolf. We usually disagree on most things, but you come out with some good stuff too. I don't really care if you agree, I don't need your approval, you're old school, one of the ones ofsted would have shut down as inadequate. I could explain but you're being an arse and I don't see the point in engaging with you like this. Maybe another time. Dogma is something you do, I'm constantly reiterating the point that there is no magic bullet and many approaches work even if dogmatic intransigents like you can't see past your own outdated views. 
'regexPatternDictionary.FirstOrDefault(kvp =&gt; Regex.IsMatch(input, kvp.Value)).Key'
I used nHibernate, then went to a new job where they used EF exclusively. I *hated* EF. I hated it from the day I learned it to my last day on the job. OMG, it was horrific. * With nHibernate the entire team could be editing it all at the same time, and when we checked back into version control it would be fine and we could just compile and run. With EF for god's sake only one person can be editing it at a time or when the second person checks in it will all stop working and it will be a *disaster* and their code will break *everything* because it relied on the EF that is no longer working so you'll have to revert in version control and that person will have to redo their work. This made it sorta impossible when multiple people were working on the same thing at the same time and all making fairly significant changes. * With nHibernate you could make a view on the database which mapped to a class on the application and it really didn't try to treat it as different from anything else unless you tried to insert. That didn't seem to be possible with EF, if you wanted to use a view for *anything* it was kinda horrific and you couldn't do it directly. * Now and then I just had to resort to feeding EF some raw SQL to get the results I needed, and indeed this turned out to be the easiest way when I needed a view or results from a stored proc. Never once did I have to do that with nHibernate.
 Plenty of tests have shown entity framework as faster in most circumstances than dapper.
Please provide sources. My real world experience with both suggests otherwise.
Sources please. 
A better method might be to populate a collection of objects under your while loop, then create your context and use the AddRange method to add your objects (assuming they're all new objects). The reason is to enable the framework to take advantage of information discovered during the call to add a new entity. This is discussed in the framework docs. I'd you're making changes, one method might be to fork/join your work: make all your additions, then your changes, etc. Also, I wouldn't new up a context on each loop iteration, but plan on partitioning work onto a context (if you have 500 elements, maybe execute 50 units of work per context), and measure where you're getting the best performance. It may also be good to parameterize this for your application, so that you can tune it at runtime. Also don't forget to call dispose, or use a using directive. A using directive is easier to use, but the same can be achieved via try/finally. The code is usually easier to understand with a using directive (which is just syntactic sugar for try/finally).
I do this on a daily basis, and will attest to it being a major pain in the butt if your team is going to be doing any form of schema changes after the initial snapshot. Plan on manually dealing replication ID mismatches Everytime you need to make a change up on master. Also , all other subscribers will need a fresh snapshot after you turn replication back on since the schema has changed. My suggestion, if you can afford Enterprise, which sounds like what you will be requiring. Grab redgates migration solution and call it a day. It will pay for itself in 6 months and make your life much easier.
This sooo much. The company I work for uses Visual Studio 2015. A few weeks ago I went through nd upgraded some out of date dependencies. I tested the application and everything appeared to be working fine, but when I went to publish live, the vuild just kept silently failing. I spent a week trying to figure it out. In the end, one of the Microsoft packages (one of the roslyn ones i think) that was upgraded now required Visual Studio 2017. I wish Microsoft would just take VS the same route as Windows and have a single product that just gets updated over time.
This is wrong, "convert whatever code you just wrote to JavaScript" nothing gets converted into JavaScript, forget JavaScript, no more JavaScript!!!! It's a real C# code running in Mono over WASM. WASM is the new "assembler" - compilation target. The browser is the new OS. Currently blazor uses low level API calls to the OS (excuse me Browser) that are JavaScript to do DOM manipulation. The same way like you can call Win32 C API function from C# -P/Invoke. Once more C# - code is not converted to anything except IL that get's run directly - no JavaScript :))))
This is what I'm doing now. The controller tests have almost nothing to do with business logic (except return bad request, but that's only because it needs to be written one way or another anyway), and are just tests of the controller responses. In general, make your controllers depend on an interface, and dependency inject your interface. Then, use Moq to produce the behaviors you're worried about testing. If you control your server response based on a catch handler, then make sure you're testing that path (by setting up the mock). In general, things that are really common (such as exceptions resulting in particular responses) are not generally worth testing on a per controller basis (when the code is repetitive), and should be promoted to the aspnet pipeline, where they can easily be tested for all the various scenarios. 
There are several line that will let you unit test controllers and mock out the dependencies. This is especially useful for testing routing logic. But almost all business logic not directly related to page navigation should be pulled out of the controller making them very light weight.
Please go to github, star and support the project. They are giving it 6 months time to see if there is enough demand for things like that. https://github.com/aspnet/Blazor
https://dev.to/rickab10/is-entity-framework-core-20-faster https://github.com/StephanyBatista/benchmarkef feel free to run
If you're actually doing .NET Core then it'll be great. In fact I do a lot of Core coding in VS Code on Debian (I like FOSS), no problems for the rest of the team. If you're doing Framework though, this won't work. Depending how niche the software is, you might be able to use mono or similar, but I wouldn't rely on it, personally. Presumably though if you have Rider you'll have a ReSharper licence, so just use VS2017 with ReSharper on Windows 10 and you'll be laughing.
I personally had to rely upon using batch inserts with ef to deal with the performance bottleneck at my last job. It worked out rather well, but I'm sure it still wasn't as fast as dapper or the old fashioned approach. I looked into other alternatives and saw the library you linked. Unfortunately it doesn't have all the features of its commercial brother, entity framework extensions. That was unfortunate because plus doesn't support inserts while extensions does. Now at my current job I'm dealing with a lot of weird situations where EF wouldn't even be appropriate because of dynamic sql and years of sloppy code. It's being addressed so that EF and or another ORM can be used, but unfortunately it's going to take a very long time. If you're going to be working with mostly small datasets, then EF will probably work for you most of the time. However as /u/120D pointed out, you'll have to do start using other things to combat performance problems when the data gets big. You can possibly use EF extensions to help out if your problem is huge inserts, but you'll have to pay for it. If you don't want to pay, I'd advise going for a hybrid approach (I.E. Use EF for simple operations where speed isn't a concern and use something else like dapper or ado for big ones). EF is awesome and it's my favorite way to work with a database, but it's not a silver bullet. So don't get too dependent upon it. 
Out of curiosity, were you using the database first or code first approach for EF? I had similar problems with Database first because of that awful edmx file.
1. You don't need to assume anything. Design your models according to your needs. 2. The pattern I described was by the person who coined the term MVVM. The pattern you are describing is from a particularly badly written magazine article. 3. The pattern you are describing doesn't work. The flaws such as not being able to keep the UI in sync if the model changes is unavoidable. Likewise, the pattern doesn't work if you have deep object graphs.
1. Why? The whole point of WPFs data binding model is that it can listen to events no matter how deep they are in the object graph. 2. That leads to memory leaks if more than one view model is watching the same model.
Nodejs is used to run some tools for testing. Blazor does not depend on nodejs in any way.
So you can't use the public API on a class because it will break an different class? Think about that for a moment. Your design is brittle and error prone when used correctly. That tells us it's a bad design. The actual MVVM pattern, where view models contain views doesn't have that flaw.
...unless the object is immutable, but that's rare.
Um. You'r enot supposed to keep DbContexts around for a long time. Use them, dispose them.
If anyone knows a specific Pluralsight course that goes over Unit Testing a .NET MVC 5 web app (with Entity Framework), I'd love to see it!
Uhh what? No, I'm saying models should be *models*. Allowing the model to *control* at will the state of the view model completely violates the separation that MVVM is supposed to provide. It's not a model at that point, it's a controller. View models should, if necessary, manipulate the model. The inverse should not be true. If it was, how would the view model serve any purpose? Why even bother with a view model at that point?
Jeez that Android book looks a little outdated.
I typically use it as far down as I can reasonably. Normally there is some facade between my entity and the active object instance in memory so that would be the lowest object that gets it. Everything above and at that level gets it by default.
My advice would be to use whatever Windows machine they give you, and work with the same stack as the rest of your team. When you get a free minute here and there, work on getting a Linux stack going on the side. If you can make it work, then great, but if not you won't be set back too far.
Then what value is there in separating the view-model from the model. If all updates to the model must go through the view-model, you're always going to need both. I find myself just combining the view-model and model for that reason.
Agreed. And even as that guy who will be an idiot about premature optimization, I know that unless you're doing something in the getter/setter that would require a getter/setter anyway (i.e. event firing, other logic associated with the get/set) the Jitter will just inline the operation anyway. The only reason this would be a problem is if you are targeting a platform so constrained that these methods would cause bloat (i.e. .NET Micro, but even then it's a stretch.)
That's what always did the most significant difference for me. Just need to wrap change detection manually around the save operation. 
whats the name of the course by any chance? 
Looking at Chain, I don't think it would be terribly difficult to get Field support in there. You'd have to look for both FieldInfo as well as PropertyInfo, and the expression builder would look a bit different for it, but I don't think it would be terrible to do.
If the model is only updated through one view in a modal dialog, you can get by not implementing INotifyPropertyChanged. Though this topology isn't what mvvm is solving either.
Removed: Rule 6, spam.
Honestly, I was exaggerating. If someone bothered to write up.an issue asking for public field support I would do it. The change probably wouldn't even be in Chain. I could tweak the reflection cache in Anchor to treat fields as pseudo-properties.
 You guys did EF horribly then. There are plenty of things to complain about with EF, but your first post was ignorance on using the tool correctly. Both the SQL first and ESPECIALLY the code first approaches are propagated by exact date time and title, and will run sequentially unless you're sharing code outside of the checkin process and both of you check in the same table under different times. Full View support is in 2.1.
why are you calling save changes in the loop? You should be calling it when your operations are complete. I'm assuming the constant opening and closing of connections is causing this.
Lotta advice in here to skip learning EF and go learn some shiny new thing instead. I disagree, especially if you plan to write real world business software. EF is everywhere and you’ll be doing yourself no favors if you ignore it. Ahem. I agree with the other poster that Julie Lehrman’s videos are gold.
Peer-to-peer replication can technically accomplish this but it’s a major headache if anything goes wrong or if you ever want to update the scheme. 
Just create a repo and push the project files
If he's calling SaveChanges in a loop that implies he needs the tracking though
Yup. Make your controllers as thin as possible. They should just be an entry point that maps the incoming request to where it needs to go (which should be outside of the controller).
Yes, good point. 
Actually I'm going to try doing that. I want a UI for the ConnectionStringBuilder classes.
Database must be backed up to a file, and that Is what you upload, along with the code. Hope it helps!
i don't want the clients app to connect to each other i only want them to connect to the server like a git reps
i don't want the client apps to connect to each other i only want them to connect to the server like a git reps and get/set data to/from the server database only so i don't think that i need p2p thanks
Agreed, you can locate your “mdf” file and place it within your App_Data folder of the project. 
thanks, i am looking into it
&gt; i was thinking of handling the ids' myself in the client apps by making it string add a unique name in then a new number but i will look into guid ids as well 
ViewModel for sure especially if using WPF as that’s what triggers UI updates. Now having said that I will also use it in my models so the event can be propagated to the ViewModel for handling. There are several scenarios where the properties inside the ViewModel are just a wrapper around the model properties. Example: public double ViewModelProperty { get { return Model.Property; } } Obviously I left out the setter but that’s where you can fire the property changed event. I personally have a BaseViewModel used for all ViewModels to inherit from and it has the INotiyPropertyChanged plumbing inside it. The other thing I’ll do is tie into the events of my models inside the ViewModel, then I can decide if the change should be propagated by the ViewModel so the View will see it. Not all model properties may need to be fire for the UI. Some may think it’s over kill but I follow strict design patterns. ViewModels are for Views to use, they know nothing of the View. They also contain my ICommand objects. The Models have no clue about ViewModels and contain all my business logic. 
There are two that I’ve done at Pluralsight Automated ASP.NET Testing: End to End ASP.NET MVC Testing from Scratch Both are decent.
I'd hazard a guess that's your problem then. I completed a refactor of an existing project from data first to code first on Friday and I can emphatically assure you that you would have a completely different view of Entity Framework if you'd had the opportunity of doing code first.
In general, these are the axioms that I try to follow (others may disagree): 1. Unit tests do not perform I/O. 2. Unit tests should be fast. 3. Unit testing is all about facts and hypothesis. The first one is a bit of a wash... Basically, hide things like database, file system, and network calls behind an interface. If there is no interface for your dependency, define one, and then use an adapter to that interface. _Don't_ just take the contract of the thing that you're trying to use, make a thing called `IHttpClient`, and say "great, I have an interface!" This is almost never productive, because you end up making a lot of extra work. A better way is to say "I intend to use this HTTP client to achieve X, so let me wrap _that_ into an interface." Also, research your dependencies: sometimes, there're ways to plug in to the dependency to enable test-specific behaviors. The more of this you can do, the better, but recognize that sometimes, it's not possible, and thing abstractions will make you (and the rest of your team) more productive. The second one - that the tests should be fast - is more of a historical thing than anything else. This rule is born out of the notion that you're going to have a CI (continuous integration) server running builds every time someone checks in code. When this happens, you don't want to spend 12 hours on the build: that's not the point. Unit tests are the things that tell you - very quickly - whether or not your project's core components and invariants are to be trusted. Things like concurrency, where you have to do things like locking, should be avoided if they're not part of the contract you're testing. This brings me to the third point. As much as possible, you want to start with a known quantity. When you're testing, the only thing that you want to be changing between two given test runs (assuming your tests are written and working) is the code itself. This necessarily means that the data that you test with should be essentially constant. This isn't a hard-fast rule: sometimes, it doesn't matter what your data is, and you do want to guard against the problem where your code works only on certain data inputs, but if you've designed your tests well, this should be rare anyway. An example of how you might fix data is in a serialization service. Let's say that you have some DateTime handler, and you intend to use it for consistent serialization of dates to and from disk (or whatever persistent store you might choose). One thing you might be interested in is starting with some known date string, and then calling your implementation's parse method (whatever that is). This is in contrast to generating the string at runtime (such as using `DateTime.Now.ToString("o")`). One reason for this is timezones. You don't want your tests to break just because someone in a different time zone ran your test suite. The example may be somewhat difficult to understand, but the point is, try to design your tests so that it's easy to arrive at the same inputs for all test sequences. Prefer static Guids over `new Guid()`. If you need to support globalization of your application (such as supporting English and French formats), ensure that you have a strategy for how you're going to deal with this in your application, and write tests that use multiple cultures to prove whether or not your code actually works. Another good thing to look at is functional programming. One of the big ideas in functional programming is the notion that the only thing you should need to know are the name of the function, the parameters (and their types), and the return type of the function, to derive it's meaning (as a consumer). For instance, given the following function signature: `double SquareRoot(double value)`, you can probably intuit that this function calculates the square root of a number. Another big idea is the notion of pure functions - functions without side effects. This means avoiding mutation of internal state, input/output, and various other things that are not "pure." In general, this is how I write nearly all of my static APIs (side-effect free), because any computation that is dependent on internal state that is shared across my entire application is by definition also going to be hard for me to test. I'm sure that I've oversimplified a lot of this. I'd highly recommend going and having a look at the scientific method, because there are a lot of pillars of testing that resemble that method.
I use the Entity Framework tools add in for VS. It has a feature to pre generate the views. It improved performance quite a bit on some of my complex object graphs. Like previously mentioned, EF is not a silver bullet. I also will use stored procedures and views in the DB and call them from my DAL. I like to utilize the power SQL server to do some of the heavy lifting where it optimizes and caches on the server side. I also use Code First Fluent API instead of data annotations, allows me to better control my mapping of objects. I try and keep my DBContext specific to task at hand where the DBSets have common object graphs. Do not use one context for all your applications DBSets, it can get real heavy fast.
No... AsNoTracking() is 100% for.... not tracking things. It makes a read only instance that EntityFramework won't store, so when you call SaveChanges on an object with AsNoTracking, it won't update. They aren't kept in context. The only other setting for changing tracking in a context is to use context.ChangeTracker.QueryTrackingBehavior, which will disable all tracking on all queries made from that same context session. The code you posted (you did say 'might') would ( in EF6) disable ALL tracking for that entity forever. However, that, and AutoDetectChangesEnabled on ChangeTracker are recommended not to be used, they don't suffer from the same issues that EF6 did in terms of memory. AsNoTracking will usually increase performance, in some cases make it much worse (if you have duplicated nested objects), it's purpose is specifically for - not tracking -
Thanks for the clarification 
You mean piecing together parts from ms docs and parts from StackOverflow isn't how you're meant to do it? :p
Maybe that's so, but: * If Microsoft has created this database layer with two possible ways to go about the problem, only one of which works but the other really doesn't yet the documentation all starts with "you can choose either of these ways of doing it", they have a *major* problem and I don't see why I should ever trust them to get it right. * I'm a database guy first. I think about data structures in database first. They should darned well accommodate all the customers who work this way or was, as in my situation, not a choice. Most organizations I've dealt with have a large existing database you can't just get rid of. A database layer that only works right with code-first would only be useful for a very small percentage of development organizations. * Either way it doesn't deal correctly with situations where you want a many-to-many relationship with a linking table. * I've *written* several object-to-relational systems, *none* of which had the problems EF does, so given that any Microsoft programmer makes more than I did they have no excuse. 
What a *darn* shame.. *** ^^Darn ^^Counter: ^^419320
 If the specific purpose is organizing data, web servers are usually an elegant solution for the task. You could learn ASP.Net core, and their official site has a lot of good learning resources on it. You would have to learn html/css/(ts/js). If you don't want to learn all of those things, you could make desktop apps using WPF/xamarin. Regardless, I would recommend learning .net core, not framework. In terms of programming, there is near no difference (thankfully), but .net core is the future
If you're wanting to update the slave database and have that shipped to the master database then you're going to struggle using any built in features. It might be worth introducing a delayed write to the master database? How often do these syncs to master need to happen?
Only call SaveChanges every 50 rows or so. I found out that it improves the speed 
&gt; Compile it to cil and execute it with .NET Core Frankly there's not a lot of difference between this subreddit and /r/dotnet 
Sure you can do this. But in my opinion, those framework force you in some kind of pattern. You have to work with events, classes, .... even at the beginning. And I don't think, that this is the right way to go.
Code first is an unfortunate misnomer, works just fine with existing databases.
A common way I've seen is to use regular built-in C# events. The model has events, and then the ViewModel will bind to them and call OnPropertyChanged as necessary. The other responses are definitely correct in that the ViewModel should be the one responsible for mutating the model, but this pattern can break down if you implement an undo/redo stack or have other things within the model-only backend that modify the model in other ways. Therefore, to make sure that you have complete coverage of whoever the model changes, having C# events to bind to is probably the safest way to catch all edge cases.
Even then you should still implement the interface. Otherwise you'll have to make sure every binding is set to one time. If you forget, you'll have a small memory leak on your hands https://blog.jetbrains.com/dotnet/2014/09/04/fighting-common-wpf-memory-leaks-with-dotmemory/
Why do you even have db operations in a loop?
They are getting ready for beta really soon. Right now they are writing the release notes
Don't keep the context around longer than it needs to, but don't go mental and create/dispose (you don't need to dispose actually even though it implements IDisposable) millions of the buggers. It causes GC pressure and there's a bit of overhead just setting the thing up. As you've elided the operations (perfectly reasonable) it's hard to tell what it's doing in the loop. My guess would be you're generating a lot of calls to the database which over time will hurt. I'd batch the db operations into the context and then call SaveChanges once (or perhaps a few times if you have literally millions of rows). For debugging, I can recommend DotMemory which isn't free, but you can also use the Perfmon.msc to view things like GC activity, memory useage and so on. This might give you a clue as to where the problem ls. Finally, have a read of [this article on getting the SQL query](https://msdn.microsoft.com/en-us/library/dn469464(v=vs.113).aspx) which will also give you an insight into what the context is doing. I'm 67% sure it's going to be a combination of load on the SQL server and memory pressure on the GC, so check the metrics and look at what SQL you're generating.
What cpu, gpu, ram, hdd/ssd do you have? Or is it a laptop? In that case, which laptop model?
I screwed up the link and can't edit for some reason. [Try this one](https://msdn.microsoft.com/en-us/library/dn469464(v=vs.113).aspx)
&gt;Yep, that's how EF works. You do know you can turn this off right? I had this problem on a high-performance scraper I made, just took disabling entity tracking and EF ran butter smooth.
Lets say I have a lot of files (one iteration per file) that need to be parsed and checked if some information is already in db... What else can I do? 
im using some light code editors with plugins and extentions which makes them feel like IDE.. and some typical IDEs i can not really programm because theyare so laggy, like visual studio, jetbrains ides, etc.. 😂 
usually models are defined in a separate project so they can be shared in all applications, not just front end ones. binding properties to a graphical component is a UI specificity and thus the need for another layer (ViewModels). same with things like UI input validation, error windows popping up, etc. all that kind of stuff is done in the viewmodel. the model is usually simply POCOs (Plain Old C# Class) or DTO (data transfer objects....i.e. serializable) that simply represent and hold data and allow it to be transfered to services and such.
I would advise /u/EyeBool to stick with .NET Framework for the time being. .NET Core is still WIP, with many libraries from .NET Framework not available at all, or even without a clear roadmap when they will be available (WPF/Xamarin on your example). Specially 3rd party libraries. Others like EF, don't yet offer the easiness and development tooling of the .NET Framework variant. While there is plenty of documentation for .NET Framework, for .NET Core it is hit-and-miss, specially given the whole .NET Core 1.x -&gt; 2.0 reboot. 
 Check out Entity Framework.
Nuget System.Data.MySql
There are a bunch of NuGet-packages for MySql: https://www.nuget.org/profiles/MySQL Here is a basic tutorial: https://dev.mysql.com/doc/connector-net/en/connector-net-tutorials-intro.html
Still new to sql, but you can also save stored procedures to the database and call those as well
I would second learning .NET Framework for now, as a lot of things you can program under .NET Framework is pretty similar to .NET Core. However, I believe it is still useful to learn differences between those two, and how they overlap, with eventual introduction of Windows Compatibility Libraries (currently beta) a lot of development, perhaps other than GUI programming, will start migrating over to .NET Core. Another thing is that if you are doing any web developments, ASP.NET Core currently supports both .NET Framework and .NET Core as backend library. Currently Microsoft delayed dropping .NET Framework support for ASP.NET Core, but this will be happening at some point. While Microsoft won't be dropping support of .NET Framework anytime soon, integration of two are happening and it is easy to foresee eventually a lot of focus will be put into .NET Core as compare to .NET Framework.
&gt; At no point should the model be able to update independently of the view model. Sure it can. What if you're modelling something that you necessarily need to react to, like a thermometer or pressure sensor, or a class representing changes in stock values? In those cases, your model will probably expose an event (`TemperatureChanged`, `StockValuesUpdated`, etc.) that you will subscribe to in your viewmodel.
In practice how does this look? You have INotifyPropertyChanged implemented on your models? So when the view is updated the model is too and the ViewModel is bypassed?
**If the rest of the team is using Windows...** No you won't be OK. Your work will inevitably need to be used by other people. So your bash script to do whatever will be foreign to them or some such. And it will add up as you go along. Get the written permission from your superiors foe this or don't do it. It's work, not a democracy. 😁 
Right now your comment is at -13, that seems a bit excessive. For context, chain can auto generate insert SQL and is faster for unchached operations. You can hate on his self promotion, but there might be some merit to his comment. As a disclaimer, I haven't used chain and am not endorsing it, I just hate to see the extreme lashback without any comments.
Linq and entity framework
Tests like these are meaningless without access to the source code, since we can't see what is actually being tested. Can you post the code you tested with? I'm not sure why you are testing the non-generic arrays, because of boxing issues it is rarely a good idea to use them with value types and I have not seen a developer write new code with them in years. Otherwise though, thanks for sharing your results. Even though the take aways are limited, I love seeing benchmarks for things I use everyday. 
Please upload this to a paste service like pastie.org or gist.github.com
Good point about the source, here it is: https://pastebin.com/bSEFVqVj As you can see though, I'm only using generic arrays. There should be no boxing anywhere. I said non-generic because I was trying to make it clear that I'm benching the generic function Array.BinarySearch against a concrete version that only works on int[] in the first test. It seems from the test that generics can cost quite a bit when compared against their concrete counterparts.
if you mean Red Gates SQL Data Compare i can't use it because i have to support windows XP and it require windows 7 or higher with .net framework 4.6
Removed: Rule 4.
Removed: Rule 4. Feel free to repost, but maybe include more information or a better explanation of what you're trying to achieve. For reference, you can implement your own equality checking and can check reference equality via `Object.Equals(object, object)`.
Removed: Rule 4. You'll have to make an attempt, and ask specific questions about issues about that attempt, and include only relevant code.
Removed: Rule 4. Please better describe the inputs/outputs you need, and post only the relevant portions of code of your attempt.
you really think i didn't try to solve this myself? i tried for 3 days. and the relevant code is in there, but in order for it to work you need the rest. re-add this
You need to include what it's doing now, what it needs to do, perhaps better describe what the function is supposed to do. I'm not sure "inward list" or "afterorder" is enough to describe the expected behaviour. Furthermore, it really sounds like you're asking for someone to implement the jälkijärjsetys function for you.
done
You could try to use xamarin forms? They bind to gtk# now
Thanks for the source. I understand what you mean about non generic now. You are setting random values into 1 through N, and then later searching for values of 1 through N. Does that mean you are generally only benchmarking the misses (i.e. there is only a 10,000 / (int32.Max * 2) chance of there being a match for a given value)? The dictionary and hashsets return a payload, which isn't comparable to only returning an index. It might make more sense to compare them to a search that retrieves the values from array after finding an index. Its minor, (and possibly nominal) but indexing and copying int values around isn't free. I'm guessing none of this would be applicable to data types where the key takes longer to compare than an int (e.g. strings)? I'm not being critical...I'm legit curious why you did this test in the first place. Do you regularly need to check for the existence of integers in a collection in performance critical code? I find looking up payloads by key is very typical, but haven't used integers like this before very often. Cool stuff.
Alright then. I guess this community wasnt helpful at all and want to shit on everyones code. My thanks i will report this community then
I think you should read **The Art of Unit Testing** by Roy Osherove and **Working with Legacy Code** by Michael Feathers. The first one is about good unit testing. The second one is about working with legacy code, which Michael Feathers defines as code without tests. His book is on making that code testable. 
-.NET EF Core doesn't support all features from EF 6 -.NET EF Core doesn't support Visual Studio GUI designers -SQL Server and PostgreSQL are probably the only SQL databases with .NET Core drivers -Xamarin doesn't work on all .NET Core platforms, in fact it is part of the ongoing Xamarin.Forms 3.0 work.
Hmmm, I'm storing the random values in the array _searchFor and then use that to do the lookup. So there should never be a "miss". It's true that Dictionary is a fancier container than what you'd need for this. But it seems to have a more optimized implementation than say SortedSet, so if perf is a concern you might still want to opt for Dictionary. (provided this benchmark is realistic)
Thank you. I’ll look into those books
It's discouraged to push binary files to a repo due to have git works internally (github also has a limit). I recommend exporting your data and schema in a portable text based format that the user can import.
Agree with most of your points, although... - I don't care for most of the features missing from EF Core. I don't miss lazy loading because I don't miss multiple trips to the DB. - There is a MySql driver for .NET Core and a corresponding EF Core package. I'm guessing it works about as well as the .NET Framework driver, thus any lack of functionality is probably inline. - Oracle said the Core-compliant version of their managed driver would be ready by end of 2017. Well, it's still not here, but the Oracle drivers have historically been pretty bad. The Unmanaged Drivers have annoying bitness constraints and the Managed drivers tend to be slower and leak memory. Additionally, the EF support has always been haphazard at best. Devart has a Paid driver for Oracle that works in .NET Core, and I'll say that said driver was worth the money at my last shop, and we were not even dealing with Core there.
&gt; Just set the entity state to modified and EF will save it. Just be careful with how you do this. Setting the entity state to modified the wrong way can cause EF to treat the whole object as 'modified', resulting in extra traffic and SQL (As it will be writing out all properties, paramterizing, etc.)
&gt;I want to check for Equality in Person between the instance of Person(AdamSchiffer) and the Array Class in the PersonCollection Indexer. Do you mean `adamSchiffer.Equals(allnamedAdam[adamSchiffer.PersonPositionInPersonCollection)`? If so, I would implement a primitive `Equals(Object)` method in the Person class as such: - Is the Parameter `null`, then `false` - Is the Parameter a Person (The parameter could be everything) else `false` - Do the Person (parameter) and `this` have the same memory address (`Object.ReferenceEquals(Object, Object)`) else `false` - Are all fields equal Some code style recommendations: - `PersonCollections` should be named `PersonCollection` as it is a collection of persons instead of a collection of Person collections - `GetPersonPositionInPersonCollection` should be named `PersonPositonInPersonCollection` as Method will be assumed otherwise. `PersonCollectionIndex` would be even more precise
Thank you. Will look into it.
&gt; Do the Person (parameter) and `this` have the same memory address? You'd want to return `true` immediately if true or continue if false. 
Maybe some developers look at PropertyInfo and think that for field support they have to handle FieldInfo as well. This is not true.Take a look at MemberInfo class. It is the base class for both PropertyInfo and FieldInfo. In most cases simply switching from PropertyInfo to MemberInfo gives you field support for free. 
https://www.pluralsight.com/courses/csharp-unit-testing-enterprise-applications
Sorry about that
Well it is the fastest way to talk to SQL server. :) 
The first attempt to "embrace, extend &amp; extinguish" Java was Visual J++. It was basically the Java language built to run on top of a library on top of Windows (not the JVM). I think it's safe to say that Java was the driving force, initially, for creating the whole .NET ecosystem.
For the same reason that any company rolls their own version of something that already exists. They want to make money with it.
 sun banned them from using it, see sun vs Microsoft lawsuit.
Nice to meet second user of Reddit in entire CZE. 
And they actually did it 
Microsoft still had a very real business (financial) stake in developing .NET: every application that opened the door for served to strengthen Microsoft's operating system. It's true they don't make money from it directly. It's also very true that it was in their financial best interests to do it.
Can't forget about the short lived J# which helped move over existing J++
Microsoft makes a shitload of money off of windows, Windows server, SQL server, iis, azure etc. By making their own language and controlling the ecosystem, they can make it way easier to just use the full Microsoft stack of products to run your c# services and applications.
That and they are in control of the language.
An interesting aside: Microsoft's implementation of the JVM had the first implementation of P/Invoke, since JNI requires writing code in C/C++ to bridge native code with the JVM.
&gt; Why did Microsoft create C#? Being able to control widely used platforms is useful for success. &gt; Wasn't Java good enough in the 1990s? You can create software by punching holes in bits of cardboard, but this, and nothing else created so far is close to optimal. 
Yes, using two constructors is exactly what I did. I created a default one and added [JsonConstructor] to it. Thanks for the advice.
I never said they don’t make any money off of .NET, I only said C#.
Yeah, Dan Shappir seems to be totally unaware of the Sun/Microsoft Java history. It worked out better for Microsoft having complete control over their programming environment. And now that Oracle owns Java, we can all watch it die out as Oracle is not an innovator nor will they invest in it any more than what is needed to make next quarter numbers.
OrmLite doesn't include dapper, it has its own core. 
While I don't really get the constant hype around Dapper here in /r/csharp, this is really nonsense https://github.com/FransBouma/RawDataAccessBencher/blob/master/Results/2017-11-20_NH5.txt#L3755 Please provide me with a piece of code where EF is faster than a micro, like Dapper. Inserts are tricky to benchmark: resizing the file in the DB often plagues these kind of benchmarks. 
I had to use Java in my university course but massively prefered .NET to the JVM, so J# was a godsend.
Very odd results: the EF statement even does an eager load while dapper does a join, which results in a cartesian product. Apples/oranges
How the thing works: In "main" you can call or text your friends just as skype or icq. when you are in the app, you need to put informations in your profile about (age, gender, location, first language, second language, knowledge of). "notifications" is where you receive notifications ! it's a message. "people" is the list of all that are online Lets say have a question about nebuchadnezzar. You go to "people", use the filter and select "knowledge of history" after applying the filter, you find 32 000 matching people out of 500 000 online. you send a notification to them, they will receive the notification and will reply to you, also by notification or by instant message or by calling, from the 32 000 , there will be like 15 that know the subject very well. last step: call them and enjoy your instant answer !
Probably neither. They're good for referencing behaviour of the framework/APIs (MSDN docs), or for particularities in the C# syntax (specification), but otherwise they don't help much with _learning_ assuming you're just coming from your first experience in C# from Lynda. Both the MSDN and the C# specification can be very dry, and are really best for looking up a singular/particular aspect that you have questions or issues about. Probably best grabbing a good book, going through more courses, or leveraging some platform-specific tutorials or learning resources.
But J++ was a better Java than Java! /s (actually it had a faster JVM, but then they did all those things to make it incompatible, so .. lawsuit) 
Hmmm.... https://github.com/ServiceStack/ServiceStack.OrmLite/tree/master/src/ServiceStack.OrmLite/Dapper
I was too busy shouting "NO! IT WASN'T!" at the screen to add this comment before you did
I remember when it first came out and instantly finding it sooo much nicer. I had the same feeling of freedom when transitioning from Java to C# that I did transitioning from C++ to Java.
Your wording is throwing me off, but I'll assume that you are describing that PersonsCollection implements IEnumerable&lt;Person&gt;, since you're asking about IEquatable. In which case, yes, you definitely want to use IEquatable&lt;T&gt; in that scenario, since it gives your person collection all of the syntax equality options users of your code would expect. Most equality operations over collections specify: &gt; This method determines equality by using the default equality comparer, as defined by the object's implementation of the IEquatable&lt;T&gt;.Equals method for T (the type of values in the list) So defining a discrete Equals method can cause some unexpected behavior for a consumer of your code, because its implementation hints that IEquatable&lt;T&gt; is in play, and thus comparison operations like .Sort(), .Contains(), etc. will just work based on how Persons are equated to one another. And of course that will not be true. Your equals method will never be invoked, and the default hash comparer will be used instead. Happily, IEquatable&lt;T&gt; is extremely simple to implement and also lets you overload == and != in one pass. 
Are you saying C# is getting more stale? I really don't see how that can be the case, given the language and platform are evolving very quickly.
No, it’s fairly clear he’s referring to Java given the Oracle reference in the same sentence, but just phrased it badly.
The sentence is just kinda hard to read, they are saying java is still pretty big, but getting stale 
Ambiguous pronoun.
It's not clear to me, but thanks for clearing it up.
QueryWorkingSetEx is a PSAPI method, so use the following: [DllImport("psapi.dll", SetLastError = true)] [return: MarshalAs(UnmanagedType.Bool)] public static extern bool QueryWorkingSetEx([In] IntPtr hProcess, [In, Out] ref IntPtr pv, [In] uint cb);
I program in both of them daily, like both of them, but C# not only is a better language and platform overall but appears to have a much brighter future than Java, though Java9 looks interesting. 
Gotcha, more locator extensions can't even hurt, especially for newer Angular or React sites that the standard locators might not work with so well.
This person doesnt undestand history. They tried with mfc. Read a mfc book before. Net and see they had the same goal "initially. But the author mentioned c# they woul have to tell the story if delphi. 
Good point.
View Text="{Binding SelectedCustomer.Address.City}" Notice how the view has no problem walking down the VM to read from a nested model. View-Model public Customer SelectedCustomer {... Models and ViewModels have the appropriate property notifications. 
Chain can beat it sometimes. Not always though, but enough to allow me to brag.
Sun didn't ban them from using Java, they banned them from releasing an incompatible version of Java. 
"DateTime.Now"
Thank you! I appreciate your answer.
Thank you for the answer!
I'm currently working on a project that requires QueryWorkingSetEx :) P/Invoke is pretty simple once you learn the basics, which you can find here: https://docs.microsoft.com/en-us/dotnet/standard/native-interop We use a 131,072 pages for our own purposes, but I recommend setting this to whatever size you require. Remember that Windows memory pages are 4KB typically, but they can vary (you can query this using `Environment.SystemPageSize`). QueryWorkingSetEx will return ERROR_BAD_LENGTH (0x18) if the buffer size is too small (you will need to configure the method to return 'int' to see this). Good luck!
Java is being updated, the problem is that pretty much everything they've added lately is stuff they've swiped from other languages. The big thing in Java 9 was modules. While Java had "modules" in the past, they were literally just a bunch of code thrown into the same compressed file (a jar, which is just a renamed zip file with special meta-files in it that Java looks for). What other language has "modules" like the ones Java just added? C# of course! We call them references and we even have a system in place to install them from the Internet (Nuget).
Wasn't J# literally there to get people to switch over to using C#? I never used it, but that was the impression I got about it.
Same net effect because those incompatibles included COM interoperability.
Visual Studio sure as well wasn't. So unless you like programming in Notepad and hand jamming XML files, it wasn't free.
Nope. P/Invoke was in Visual Basic long before Java was created.
J++ ran on .NET and didn't use a JVM at all. While it's syntactically Java it doesn't claim to actually be compatible, and only provides a _very_ small subset of the Java standard library. It was just a stopgap to make Java code bases more easily ported to C#. It was only around for a couple of years. 
I will give my 2 cents. I think that you should write console applications first, then use WPF, although you’ll need the full .NET Framework. Then, if you make a system upgrade, you can install Windows 10 and learn UWP.
I think people are reading this as an attack on MS. Honestly though you're right.. and it's not a bad thing. If C# never came along Java (and other languages) would probably be even more backwards without the competition provided by C#. Microsoft gets copied too. Python, Javascript, and soon Rust will all have the "async/await" keywords. Better for everyone. 
From my understanding based on the episode of .NET Rocks where Richard Campbell gives his History of .NET talk, J# was created to move people from J++ to .NET code at Microsoft, as there was some decent sized projects that used J++ already. Now, I could be remembering what I heard wrong but that is what I recall.
Heads up: Just updated my code up there. Had a brainfart and used code for `QueryWorkingSet` instead of `QueryWorkingSetEx`. Derp!
Thx i was confused af but feel better now :D 
Awesome I was confused but makes more sense now. At the risk of annoying you, can you share your definitions of _PSAPI_WORKING_SET_EX_INFORMATION and _PSAPI_WORKING_SET_EX_BLOCK if those are needed in ur code? If you have a github, i'd love to see it. Thx! 
Sure! [StructLayout(LayoutKind.Sequential)] public struct _PSAPI_WORKING_SET_EX_INFORMATION { public IntPtr VirtualAddress; public _PSAPI_WORKING_SET_EX_BLOCK VirtualAttributes; } [StructLayout(LayoutKind.Sequential)] public struct _PSAPI_WORKING_SET_EX_BLOCK { public ulong Flags; public ulong Invalid; } `_PSAPI_WORKING_SET_EX_BLOCK` describes a set of flags, so you'll need to decode them as described [here](https://msdn.microsoft.com/en-us/library/windows/desktop/ms684903.aspx). Be aware that `Invalid` will not be available before Windows 8 / Windows Server 2012. Feel free to PM me if you have any specific questions :)
Not really, no. They've been offering free versions of Visual Studio with only modest feature set reductions since 2005.
&gt; m, hdd/ssd do you have? Or is it a laptop? In that case, which laptop model? I developed Python on a Raspberri Pi :D Doing Gui apps on something like that is a bitch. It an upgrade isn't an option I would stick some kind of light-weight linux on it, they tend to be kinder on ram. 
That is true now, but for the first decade there was no free version of Visual Studio, unless you were an academic. Also 3rd party tooling for C# early on was virtually non-existent. You really did have to buy into a VS professional license to make use of it properly.
I specifically said starting with Visual Basic all the way to Visual Studio Community. I was not aware there was a paid version of the Visual Basic IDE.
Async/await is an absolute godsend, easily my favorite C# feature, I've been using it in JS for my own projects since I don't give a fuck about IE users, I'd love to adpot it for work too, but we have some clients who need IE for some satanic reason, so that's a no-go for now :(
I agree. My enterprise MSDN is $3500 CAD / year. Why? Because I use M$ C#/.NET to write proprietary enterprise software. lol
Java didn't fit their vision of a unified language runtime that all Windows applications could share. Missing features include * structs (needed for Win32) * easy to use p/Invoke (needed for Win32) * COM interopt * events (needed for COM) * properties (needed for COM) * OleDB support (Java did have ODBC) * optional parameters (needed for COM) 
And what year was C# made? Beyond that, VS Express was basically an advertisement for the full version of Visual Studio. 
I was at the launch of C# at the PDC in 2000. The audience were sat there watching Anders demo the features of the language for an hour. At no point was Java ever mentioned. After about 20 minutes everyone in the audience was looking at each other and whispering "it's Java..". Having said that, he demo-ed C# calling VB.Net, and even calling COBOL.Net. He also demo-ed PInvoke, his intern built a project demoing the realtime rendering of 3d game models us DirectX. Basically, they made a better J++.
Assuming you're not supporting a super old version of IE (like you're supporting 10+) you should be able to transpile with Babel or Typescript and that will give you all the nice new features like async/await, the spread operator, etc. etc.
Typescript is an option i'm trying to push for the admin client, because it's mostly written by devs, and given we're a C# house it would probably make them more productive compared to vanilla JS given it was clearly influenced by C#. It's not an option for the client front-ends because our front-end devs will take way too long to get up to speed, most of them are basically glorified designers who know a little jQuery. Moving them from using jQuery deferreds to async/await would be much more simple, without disrupting what they're used to. Other than that we are way too busy to make any changes that will require teaching them all a new language.
[J/Direct](https://en.wikipedia.org/wiki/J/Direct)
Not exactly though. Microsoft built dotNet because Java sucked, at least for their purposes, though as someone who wrote some Java back then, for a lot of other purposes too. They tried for J++ as a solution, but it was messy and when Sun sued it wasn't really worth it to them to fight it. Webforms was actually originally written in Java and switched. 
P/Invoke is part of the .NET CLI which came 5 years after Java (1995 vs 2000). 
Hi mlibertus, Seems like a good scenario, can you help us with the random card number generation and the exact exception that you are getting? Thanks, Siddharth
Visual Basic was created in 1991. It had p/invoke before it had classes.
Thanks for the response! Random newSet = new random() // size of a deck! newSet.Next(1, 52) I then run the for loop to randomly get cards from that deck but the exception I'm getting is an InvalidCastException unable to cast object of type 'System.Random' to type 'System.IConvertable'
Imports + ```__stdcall``` might do the same thing, but it isn't ["P/Invoke"](https://en.wikipedia.org/wiki/Platform_Invocation_Services). Platform Invocation Services enables *managed code* (.NET) to call native code. Visual Basic before .NET is not managed code.
"If *any solution that uses Java* is the answer, then you are asking the wrong question." -- me, anytime the word Java comes up in a meeting.
Idk why people are downvoting you... you're totally right. C# at the heart made it so people used MS products including the OS that C# works best with. Obviously C# was made to make money, so idk what those 30 people downvoting you are about.
Same syntax, same effect. Just a different runtime, of which VB has had at least four.
VB.NET: https://docs.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/declare-statement VB6 example: https://www.experts-exchange.com/questions/21273543/Declare-Sub-Sleep-Lib-kernel32-vb6.html That's not to say what you remember wasn't also an option. 
Wow. Prehistoric Java annotations syntax. 
I admit that I was thinking "cool, VB is getting Java's features".
Wow, I haven't seen an ExpertSexChange link in probably 10 years.
VB5: http://vb.mvps.org/tips/vb5dll/
&gt; **Windows** Forms &gt; Mac While WinForms can be run on Linux/Mac via Mono, it isn't actively developed anymore, just "maintained." Unless a third party comes up with an extension or something (not familiar with VS/Mac extensibility) I can't imagine project templates / designers / other IDE type stuff for WinFormswill be brought to VS for Mac.
Yup. :) 
To be honest, Elasticsearch does an honest job
`Convert.ToUInt32(newSet)` You're trying to convert `newSet` to an unsigned integer, but `newSet` is not a number, it's actually an instance of the type `Random`. Instead you need to use the return value of the method call `newSet.Next(1, 52)`, aka `var randomNumber = newSet.Next(1, 52)` and `cardArray[randomNumber]`.
If you're assigning a new value to an item in the array at cardArray[i], you should do it like: cardArray[i]=newSet; Or if you have to explicitly convert to integer: cardArray[i]=Convert.ToUInt32(newSet);
Interesting :) The thing is, when I benchmarked OrmLite in RawDataAccessbencher some time ago, it was slow, so I profiled it and found a flaw in the projection code. I told Demis about this and how to fix it and he changed it and it's fast ever since. (it's faster than dapper btw, see: https://github.com/FransBouma/RawDataAccessBencher/blob/master/Results/2017-11-20_NH5.txt#L3765 The projection pipeline never used Dapper at all. I therefore find it odd there's Dapper source in OrmLite when the code ran in the queries don't use it... But nevertheless, it's there in the source tree, so no use denying that ;)
Any reason Unity + HTML 5 export doesn't do this ?
&gt; What other language has "modules" like the ones Java just added? C# of course! We call them references and we even have a system in place to install them from the Internet (Nuget). As Jigsaw enables the *modularization* of literally everything concerned to Java; even the JVM. So it enables one to define the dependencies (inlcuding the exact versioning!) to other modules. How is this possible within C# / the .NET ecosystem? Nuget differes in no relevant way from Java related build plugins like maven-central.
I agree. If computer can run virtual machine it is best idea every time because you have got two in one.. 
Your course leader needs to update their requirements for the class.
+1, these guys code Man, I've been mostly working in Java for app development for 8 years at work, and I *still* have an easier time getting things done in C# in my spare time
The JVM kind of got their in the end too, but it took a long time. Java has improved a lot over the years, but its design just started off too complex.
?
"That said, when the Microsoft monopoly ended, so did the chances of .NET achieving domination" Seeing Java's status and where Ms is going this might be very very wrong. .net is getting used more and more and replacing Java in production environments. 
Effectively yes, as a learninge experiance. Just not 100% sure on how id load the .dll and somehow pass it reference to the drawing canvas.
youre describing a plug-in system, wherein the host application defines an interface then loads at runtime all dlls which provide implementations
[This SO answer](https://stackoverflow.com/a/18362459/4276832) seems to have some good info on loading DLLs at runtime and using the types they provide. Look in the comments on the answer to find help on how you'd check to see if any types in the DLL implemented a specific interface.
Change your xpath to only select the child row/cells from your parent table, for example "//table[@id='myTable']/tbody/tr/td".
 &lt;table border="0" cellspacing="0" cellpadding="0" class="ReportTable"&gt; foreach (var row in doc.DocumentNode.SelectNodes("//table[@class='ReportTable']/tbody/tr/td")) table.Rows.Add(row.SelectNodes("td").Select(td =&gt; td.InnerText).ToArray()); return ds; Now I get and error System.NullReferenceException: 'Object reference not set to an instance of an object.' I tried with id='' as well. same error. I wish I knew linq better. 
Try it without the /tbody in the xpath.
Yeah, they must be reading it as an attack on MS, which it isn't. My company spends vast amounts of money on MSDN/VS/Azure/etc all to enable .NET apps...just speaking the truth!
Did that as well. I get the same error as before. System.ArgumentException: 'Input array is longer than the number of columns in this table.' If I put ./td I get a "cant be null" error, not all cells will have data. so if I can figure how to give a default value I might be good. 
That is actually remarkably telling
I am not good with linq at all. I have exported just the headers alone and that code works fine. when I attempt to add the rows, some of the data inside a cell has HTML formatting that use TR/TD tags. I do not want to select them. I know they are being selected using the debugging in VS. The error i really need to get out of is. System.ArgumentException: 'Input array is longer than the number of columns in this table.' 
Removed: Rule 3.
Given that any context here is 20 years old, that might be worth a little explanation.
that's what i need to do, but I don't know how.
Cool project! Too bad the transcriber needs work. Maybe it'd be more valuable for quick 5 second clips? 
Post the HTML source.
Thanks. Definitely, when you use ffmpeg you can control the segment interval. It's worth a try. One of the things to keep in mind is the cost associated with these API calls, so you have to balance segment time and number of API calls. 
 var headers = doc.DocumentNode.SelectNodes("//table[@class='ReportTable']/tr/th"); [...] foreach (var row in doc.DocumentNode.SelectNodes("//table[@class='ReportTable']/tr")) { table.Rows.Add(row.SelectNodes("td").Select(td =&gt; td.InnerText).ToArray()); }
Use the [Managed Extensibility Framework (MEF)](https://docs.microsoft.com/en-us/dotnet/framework/mef/index). It is part of the .NET framework and was designed to load types during runtime that you do not know the concrete implementations of (aka plugins, extensions, addons, whatever you want to call it). The gist of MEF is that you declare an interface in your app's "PluginAPI" assembly that all plugins need to implement. The concrete implementations of the interface use the `ExportAttribute` to *export* it when it is being composed by MEF. Small example: MyApplication.PluginAPI.IPlugin: public interface IPlugin { void DoStuff(); } Then, in your assembly that contains the actual plugin: MyPlugin.Plugin: [Export(typeof(IPlugin))] public class Plugin : IPlugin { public void DoStuff() { Console.WriteLine("Hello world!"); } } Compile and put that assembly in some directory. Then, in your main app, you'll do something like this: var catalog = new AggregateCatalog(); catalog.Catalogs.Add(new DirectoryCatalog(@"C:\path\to\dir\containing\plugins")); var container = new CompositionContainer(catalog); IPlugin plugin = container.GetExportedValue&lt;IPlugin&gt;(); plugin.DoStuff(); Output: Hello world! Hope this helps.
Nope. Microsoft was barred from bundling any Java which did not pass Sun's tests (exactly the same reason they sued Google, only when they sued Google Java was open source). No more, no less. You get Java on Mac because Apple maintains their own java runtime environment, not for any other reason. It's not that Microsoft can't, they just have no reason to do so and Apple does.
As a sidenote, you can hide the MEF implementation by using the `InheritedExportAttribute` so that plugin developers don't need to remember to tag their plugin with a MEF attribute: [InheritedExport(typeof(PluginBase)] public abstract class PluginBase { public abstract void DoStuff(); } Any type that inherits from `PluginBase` will be exported automatically. Make `Plugin` inherit from `PluginBase`, remove the attribute and `IPlugin` implementation, and change `IPlugin` to `PluginBase` in my post I am replying to and everything will work. &amp;nbsp; MEF, by default, will load things in lazily. I avoid it by using `CompositionContainer.GetExportedValue&lt;T&gt;` instead of `CompositionContainer.GetExport&lt;T&gt;`. You might consider using the lazy implementation until the plugin is actually needed. You can also get a collection of plugins by using GetExports or GetExportedValues. Finally, the link in my post that I am replying to shows yet another way to import exported types by using the `Import` attribute. Cheers.
Look at my other replies to your post concerning MEF. You'll create an context interface like `IGameContext` that will be passed into your plugin methods. The interface, along with the class that implements it, will provide the means in which the plugin can interact with your app.
Use AngleSharp instead.
You logic is reversed. MS wanted faster JVM and did not care if it was incompatible. It was not deliberate they just did not care. Just like google nowadays does not care if their search rankings change drops aunt mollie's ant embroidery tea club page to the bazilionth position in search results.
Within the web.config of your application, turn custom errors off so you can see the full error stack on the page. Just make sure to re-enable it after your done. &lt;system.web&gt; &lt;customErrors mode="Off" /&gt; &lt;/system.web&gt; [customErrors Element (ASP.NET Settings Schema)](https://msdn.microsoft.com/en-us/library/h0hfz6fc(v=vs.85).aspx)
Nothing comes off when debugging? Did you try other things, like going for a commandText with a user in plain text and seeing if this works? rn it's hard to guess what it could be. 
Yea, I'm surprised that site still exists.
Yeah I didn't setup readme yet, I never had the time. Since you mentioned FireFox, I essentially copied the Firefox GUI for now so it doesn't look like a virus XD. Later in development I plan to make it so the user can change colors for all objects, header object placement and notification gui's. Other then the GUI customization of the browser, the general purpose of this browser is to create a super secure connection to all websites, even when the website doesn't support https, and to unblock websites for schools, or even whole countries that rely on vpn access to the web. Also since we can make the browser in a class library, we can make it easier for developers to add web UI into their applications, while using a browser engine that they want to use (currently supports CefSharp and GeckoUI 45)
didn't work
1 - You seem to have your Stripe API key publically shared in the Github repo :@S even if this is your test key this doesn't inspire confidence 2 - You use a constant salt, kind of defeating the point of using a salt 3 - You claim 'MOST SECURE BROWSER' on your site but your site doesn't even use HTTPS and you have no checksum/hash for your installer meaning users can't even verify it has not been modified People can use a proxy without using a new (un-tested) browser... I don't see the need in making this as it will certainly not be as secure as well established and battle-hardened browsers. I don't think you can claim it as super secure... 
yeah
Once the error occurs, just click the "Continue" button within the toolbar. You should see an error page within the full stack of the error. We will need that to help you troubleshoot the error.
So, this is windows forms browser that uses GeckoFX web browser control. I am not impressed yet. 
fixed it 
 protected void Register_Click(object sender, EventArgs e) { SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["PersonalConnectionString"].ConnectionString); con.Open(); SqlCommand cmd = new SqlCommand(); cmd.Connection = con; cmd.CommandText = "select * from [Table]where Username='" + username_b1.Text+"'"; cmd.Parameters.AddWithValue("@Username ", username_b1.Text); SqlDataReader rd = cmd.ExecuteReader(); if (rd.HasRows) { Label1.Visible = true; Label1.Text = "Username is already taken"; Label1.ForeColor = System.Drawing.Color.Red; con.Close(); rd.Close(); } else { rd.Close(); Label1.Visible = false; string command = "INSERT INTO [Table](First_name, Surname, Email, Username, Passwords, Question, Answer) " + "VALUES (@First_name, @Surname, @Email, @Username, @Passwords, @Question, @Answer)"; SqlCommand cmd_ = new SqlCommand(command, con); cmd_.Parameters.AddWithValue("@First_name ", firstname_b1.Text); cmd_.Parameters.AddWithValue("@Surname ", surname_b1.Text); cmd_.Parameters.AddWithValue("@Email ", email_b1.Text); cmd_.Parameters.AddWithValue("@Username ", username_b1.Text); string hashpass = FormsAuthentication.HashPasswordForStoringInConfigFile(password_b2.Text, "SHA1"); cmd_.Parameters.AddWithValue("@Passwords ", hashpass); cmd_.Parameters.AddWithValue("@Question ", question_b1.Text); cmd_.Parameters.AddWithValue("@Answer ", answer_b1.Text); cmd_.ExecuteNonQuery(); con.Close(); Response.Redirect("Login1_.aspx"); }
I guess that might be an option, but I was mostly talking about creating 3D visualizations of business related concepts, and not for gaming. I just want a way to replace javascript using three.js code with C# code. I think Unity might be expensive for a company our size.
Windows Forms with custom GUI that uses CefSharp, and GeckoFX browser control, that configures a toggle input SSH proxy connection. With in the future, customization control color's, movable header controls, online user features to sync history, settings, bookmarks and favorites, and with a total of 5 planned browser engines that will be supported with, and a API to easily integrate a browser engine. Tbh this project is just a "Let see what I can do" sort of thing. It is in extremely early development, and I only got a base application going that I will be able to build on.
Awesome! Also, if dont mind some professional criticism.. * Use .Trim() on all your text input fields. * Validate you have data within the input fields before attempting to save. * Make use of the "try catch finally" so the connection to the database closes on error and resources properly disposed of. * Once you learn the language and ASP.net development a little bit better. You may want to learn about using design patterns. i.e Data Layer Model, MVC, MVP, MVVM. Adding structure to your code will help debugging once your application grows.
This piece is of work is for my a level computing. I am not very good at coding but I want to go to university so I need to work hard and learn a new language. I’ve been doing coding in asp.net once a week for a couple of hours for about 2 month and I only have 1 month left before my project is due. I am trying to make a website where people can order computers like any other ordering website. But it’s not going that well. I’ve been getting errors that I’ve never seen before every time I use this program it rly getting annoying. I am gonna increase the number of hours I work on this project since it’s due very soon and I am really behind. I will probably do 8 hours a day for the next 5 days and see how far I get. If I don’t get far I am just going to give up 😂
[SQL Injection](https://www.owasp.org/index.php/SQL_Injection)
Don't feel bad, it takes roughly 6 months of experience till someone gets to feeling comfortable with C# and ASP.net. Remember that Google is your friend when your a programmer. ;)
yeah, ive been using youtube and google so much to try to fix my program xD
Yeah, that's exactly what it looks like; all the model classes with equivalent view model classes. I agree it's messy and I've never liked it but I always felt putting INPC in the model sort of pollutes it. I only use WPF in my spare time not commercially and I rolled my own ORM/code generator to create the models and view models but it's still not ideal. What you say makes a lot of sense and I might try it on my next project.
2008 was the last fast version of the IDE. if I could have 2008 but with NuGet and modern C# support, I'd be happy
This is not an anti-pattern if your Model has to be ignorant of your presentation logic. You can track object graphs with a `ChangedTrackingCollection&lt;T&gt;`. Thomas C. Huber explains it will in his course on Pluralsight.
Also ViewModel validation and UI interaction through defined interfaces.
Ok, Plus Unity has alot of weird license restrictions if you aren't using it for making a video game. 
Once again thank-you, just tried it and it looks to be exactly what im looking for!
TIL.. thanks buddy
How does this work if you have multiple exported types? And what are the advantages over just using reflection?
^ This guy is reddit bully
I actually am using a mock for the service. It seems to me to be more related to SignalR than Owin. This used to work when I didn't have SignalR. 
MFC was an attempt at building System.Windows.Forms in C++. Instead of creating a WNDCLASSEX, setting eleventy billion values in it, then passing it to CreateWindowEx(), you simply created a CWindow. In .Net, this is equivalent to "new Form()". It reduced the 80+ lines of boilerplate Win32 code necessary for that task to usually about 3. MFC tried to hide, but didn't remove, the annoyance of manual memory management, which led to nasty leaks everywhere for easy-mode devs that didn't know what was going on under the hood in Win32-land. The .Net CLR handles this much more nicely for this kind of developer.
So if the service is being mocked, what are you actually testing? The fact that there's still clearly an isolation problem between the tests says that you're probably not setting up your dependencies and mocking right. If anything other than your code and trivially lightweight framework/library code is running, than it's not a unit test. 
Np. Also, if you want to import types from a specific assembly instead of a directory, you can use `AssemblyCatalog` instead of `DirectoryCatalog`. Of course, you can mix and match catalog types when you add them to `AggregateCatalog`.
Stupid question, do you have access to a Visual Studio 2015 professional? Maybe a trial of it will work for making the code map No MSDN subscription?
Thanks for posting this. What does the SPA do? Is it running somewhere so I can see it working? I ask this knowing that it's uncool and makes me look stupid -- but it would be *great* if there was a CodeProject article laying out how to set up to run the project, and showing what it does, etc.
Talked to my IT guy, no dice.
What are you using to highlight your C# code snipppets? I use Highlight.js but looking for other options
You're welcome. :) The SPA is pretty (and deliberately) basic: in order to focus only on the B2C authentication flow. So it's just a web page with a log-in/register/log-out link, a "home" page available to anyone and a "restricted" page only available once authenticated (and fetching data from a secured API). You will need some knowledge to set up an Azure AD B2C before using this project, but once set, the project itself is very easy to run. Feel free to open issues if you see anything preventing you to run the project. 
I think it's just a template. If you look at the Readme it has setup details in it. 
I can't read your code, but I'm assuming you currently have something like this: public string Foo(int i) { if (i == 0) { return "hi"; } else if (i == 1) { return "hello"; } } As you can see, the code has 3 paths: * i == 0, in which case "hi" is returned * i == 1, in which case "hello" is returned * i is neither 0 or 1, in which case you have returned nothing, thus causing the compiler error. Solution: make all paths return a value, as per the error.
I would re-evaluate what you think others would consider an important question. Also, precede every line of the code you posted with 4 spaces.
&gt; Azure AD B2C Well, that magic string led me to a [start](https://docs.microsoft.com/en-us/azure/active-directory-b2c/active-directory-b2c-overview). If I dig into it, I'll have lots of questions, thanks for the offer!
Would this work? https://marketplace.visualstudio.com/items?itemName=FerencVizkeleti.QuickDiagramToolforC
I want to say that's what I'm using as well - highlightjs rainbow theme. I used Hexo template https://github.com/probberechts/cactus-dark. Works well for my purposes.
It's important to me
I thought about that but do I really need to return a value? In that piece of code what I'm trying to do is just set up an instance thst will only be called in separate methods and return a message box 
https://damienbod.com/2013/11/05/using-signalr-with-unity/ I'm using the UnityHubActivator from the example of the above link.
&gt; Azure AD B2C Well, that magic string led me to a [start](https://docs.microsoft.com/en-us/azure/active-directory-b2c/active-directory-b2c-overview). If I dig into it, I'll have lots of questions, thanks for the offer!
You are thinking about this all wrong. `System.ComponentModel.INotifyPropertyChanged` is not a UI concept; rather it is a data modeling concept. It's right there in the full name. 
Cool. Right now my blog is ASP Razor Pages... I dunno if that was a smart decision... I always had issues with Static Site Generators being too complicated or too dumb, so I thought ASP Razor Pages would be an ok fix. Never heard of Hexo
You can checkout the .NET core source: https://github.com/dotnet/corefx
&gt; Your wrapper should also handle complex objects. Besides that you can track complex object collections with a ChangeTrackingCollection&lt;T&gt; with some additional benefits like undo. Thomas C. Huber explains everything very well in his course on Pluralsight and how to create those classes. I have my own change tracking collection that likewise supports undo. And I would rather listen MVVM was invented by Ken Cooper and Ted Peters, who created it "specifically to simplify event-driven programming of user interfaces". 
&gt; If anything other than your code and trivially lightweight framework/library code is running, than it's not a unit test. You're right these are not unit tests. These are component tests. This is testing the Client and Server components which are being delivered to the Device and Backend components. So the device to consuming the client binaries is being mocked, and the Backend Services which consume the Api's are being mocked. They've been pretty helpful so far since unit tests don't really cover the interactions between objects.
https://referencesource.microsoft.com/#System.Core/System/Linq/Enumerable.cs
The error tells you exactly what the problem is. You are not returning anything. 
I havent programmed in Java since school and damn is that sad lol last I heard Java 9 is nearing End of Life and they are trying to do a more faster release schedule, like a new Java # every 6 months or some crap
osu!laser is a project that does this...
I know. I don't know how to fix it without horribly messing my code up
Does Google want to make money with Go? If so, how come they havent even made a half-ass IDE for it?
In case you didn't see it: https://www.reddit.com/r/csharp/comments/7wu8hb/why_did_microsoft_create_c_wasnt_java_good_enough/du4vvz8/
Sweet! (Sorry for the delayed response). Will be playing with this now!
Thanks! I use a few tag helpers, but mainly my "blog" is more of a "resume landing page" that shows a few of my projects. One driving factor for making it ASP Razor Pages was deployment via Azure, but Hexo looks as easy as that.... Might need to migrate it ONCE AGAIN :D (originally it was static html, no generator, made layout changes a pain like navbar and stuff)
I think you can reasonably assume that the vast majority of readers would not find your question important. And you still haven't edited your post so that it is formatted in a way that is reasonable to all of us. The less effort you put into posing a question, the less likely anyone is to help you.
Hrm. I seem to be missing something. var foo = new System.Numerics.Vector&lt;byte&gt;(); This throws an error saying that "vector" doesn't exist. I have System.Numerics, and System.Numerics.Vectors referenced.
Removed: Rule 4. Please make your title descriptive of the problem you're having. Also please format your code to be displayable on reddit (put 4 spaces before each line).
But `IFoo&lt;B&gt;` is not an `IFoo&lt;A&gt;`. Imagine you have `class C : A { }`: Foo foo = new Foo(); //let's assume this "works" IFoo&lt;B&gt; bFoo = (IFoo&lt;B&gt;)foo; foo.A = new C(); B b = bFoo.A; //wait a second, now we've just assigned a `C` into a `B`! You might be able to do something with covariance/contravariance, but probably not with both the getter and setter (`{get; set;}`) on `IFoo` at the same time.
I think &lt;T&gt; must be covariant https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/out-generic-modifier
I know a [subreddit dedicated to C#.](/r/csharp) Very exclusive. Only a $1500 access fee. Just PM the mods for PayPal info. Other than that, what line of work and what platforms (WPF, Unity3D, Azure, ASP.NET, Xamarin, etc.) are you developing for? That might help for suggestions too. In general, there are some pretty good books too for varying levels of experience. Again, what kind of development experience do you have? Do you need first-time learning books, or more veteran level resources?
Is it human-readable text? (With newlines and whitespace) And well-structured? You can brute-force it by skipping *n* lines and then using a regex. Otherwise, you're looking at loading it into a DOM (big memory &amp; time hit) and comparing all the child nodes &amp; attributes ( but the one you don't care about).
I guess I am not too sure of platforms at the moment as I don't really have a project in mind. I am not new to programming but I have no formal CS degree. I have dev'd a few web apps in python and dabbled in a few languages over the years. I guess enough learning to help with transition in my workplace to more of a dev role. 
If you don't want to return anything change the functions return type to void.
&gt; Scott Hanselman's advice to read other people's code Watching others code is super helpful too, as they might use the IDE or design process in a cool manner you can learn from
Btw learning LINQ by looking at the source assumes you know a lot about iterators/enumerators...which won't be helpful unless you are a C++ dev learn/test out this site instead: http://linqsamples.com/
Posting the entire code would be helpful, or a proof of concept or mini demo on a site like this: https://dotnetfiddle.net/
It is all good. The Service Stack team is so damn responsive to issues and support. I highly recommend their framework. 
Is Angular 5 really a thing? I thought the latest was 4.
I would use an XSLT transformation to remove the filtered attribute and compare the result to the other file’s contents. 
cheat.. public static bool isHashEqual(string file1, string file2) { byte[] hash1; using (var md5 = MD5.Create()) { using (var stream = File.OpenRead(file1)) { hash1 = md5.ComputeHash(stream); } using (var stream = File.OpenRead(file2)) { return hash1.Equals(md5.ComputeHash(stream)); } } }
https://github.com/angular/angular/blob/master/docs/RELEASE_SCHEDULE.md
I would also add - WCF doesn't function. This is something that compatibility package will eventually address. However it is somewhat more enterprisy use cases, and .NET Core does support Json.NET which takes care of 99% out in the wild. But this is the issue I'm not fully migrated to .NET Core myself.
:)
What will you do if you just get a .dll with the business logic, models, etc.? Happened twice to me before.
Depends, is your job for .net framework or .net core? If framework then yes, you should use visual studio in windows so that you understand and can work with your fellow team mates. Also projects writen in rider are not always 100% compatible with visual studio and add extra "jetbrains" libraries to the projects depending on what's being used. We forbid jet rider at my company for various issues where our solution file was mauled.
I can't speak to the other comment about rider causing solution / project issues, but I only use VS when required (like building UWP xamarin apps). Rider is very well integrated with ReSharper (the add-on most serious C# developers use inside of visual studio) and, in my opinion, is substantially faster than VS at most common tasks especially with very large 10-20 project solutions. I've been using rider since the very first public EAP, and believe it will be the go-to C# IDE, or will at least be viewed as equal to VS by most. All that being said, I use rider because I prefer the design, layout, and use ReSharper extensively. Go with what you feel better using, almost everything will work the same. If it doesn't, file a suggestion with JetBrains and stare in awe when you actually get a response. 😛 
Yeah, it's mainly ASP.NET so I'll just take your advice and VM Windows for Visual Studio.
Bless your soul it worked
If you mean ASP.NET classic, I can't say much to that support because I've not personally used it. I do use it almost every day for ASP.NET Core development, and have absolutely no issues with it. Great support for Razor pages as well, something which surprised me a bit. 
Just noticing that this post is 2 months old. I'm in the same boat as you. How'd it go? You find some good resources? I would love to hear what worked for you. Or if you still haven't figured it out, keep on it! I'm working on it right there with you still!
Or the .NET source: https://referencesource.microsoft.com
There is no .NET 4.5.6.
Glad I could help.
Good to know. Thank you for the information.
A for loop will execute its inner command a number of times. The i and j variables are simple counters: they show how many times the command has already been executed. I would advise to read up on for loops. [This site](https://www.dotnetperls.com/for) is pretty awesome for succinct explanations.
It's basically just a loop inside of another loop. Maybe if you write it out rather than cramming it in one line, it's easier to understand: &gt;for (int i = 0; i &lt;= 6; i++) &gt; { &gt; for (int j = 1; j &lt;= 7 - i; j++) &gt; { &gt; Console.Write("*"); &gt; } &gt; Console.Write("\n"); &gt; }
Look again! It will print a triangle ;)
 for(var i=0;i&lt;=6;i++) { for(var j=1;j&lt;=7-i;j++) { Console.Write("*"); } Console.Write("\n"); } Notice I added brackets. My first reading assumed the \n was written after the * which is not what's happening. This produces the output: ******* ****** ***** **** *** ** * This code give you exactly the output you've listed, but please confirm that's what you want: for (int i = 7; i &gt;0; i--) { Console.Write(i + " * "); } 7 * 6 * 5 * 4 * 3 * 2 * 1 * 
I can talk you through it if if it isn't clear. 
Are you using Visual Studio? If not, download the Community Edition free, at least. If so, press F11 to start the program in debug mode and Step Into the code. Learn how to use the debugger, it is your best friend! If you step through that code line by line and inspect the variables as you go I am sure you will have no problem figuring out every last piece of that code snippet!
Yeah saw that and was in the middle of my edit thx
I'm big on not hiding my mistakes so I'll leave the error there, acknowledgement of error at the bottom.
Check out the [Reddit Enhancement Suite for Chrome.](https://chrome.google.com/webstore/detail/reddit-enhancement-suite/kbmfpngjjgdllneeigpgjifpgocmfgmb) It adds an enhanced editor that allows you to highlight text and apply formatting. Super useful.
After you figure out how to do it, send in this line of code if it's part of a class assignment: Console.WriteLine($"{string.Join(" * ", Enumerable.Range(1, 7).Reverse())} *"); If it doesn't compile, do: Console.WriteLine("{0} *", string.Join(" * ", Enumerable.Range(1, 7).Reverse())); If anyone asks the instructor how it works, he/she will have a hell of a time explaining all the syntax sugar applied to that one line of code.
&gt; Btw learning LINQ by looking at the source assumes you know a lot about iterators/enumerators...which won't be helpful unless you are a C++ dev That's a bit exaggerated :p. I'd say you don't need to know any C++, since pretty much all of LINQ is written in C#.
*Beep boop* I am a bot that sniffs out spammers, and this smells like spam. At least 100.0% out of the 6 submissions from /u/harperterp appear to be for Udemy affiliate links. Don't let spam take over Reddit! Throw it out! *Bee bop*
 using BoomerangBrowser.Controls.Browser_Tab.IBrowserTab; using BoomerangBrowser.Controls.BrowserTab; delete this
If you are doing asp.net core and you are familiar with the CLI, the experience with Visual Studio Code is pretty good. As others have suggested though, you should use whatever the rest of the team is using to avoid any issues.
&gt; ReSharper (the add-on most serious C# developers use inside of visual studio) AH, been developing for about 10years in C# and have never needed to use ReSharper. IMHO its bloatware that slows down VS so it verges on unusable. it **used** to be required for things like go to implementation, but that shortcut has been there since 2015. I have not found a single thing that ReSharper does that is not available by either VS directly or adding a plugin for. IMHO Serious C# developers tend to stay away from it as they go to the trouble of having snippets of code for insertion, and only use it because their companies force them too. 
I'm a .NET Software Engineer who uses Linux as his host operating system. While I do use VS code for any new .NET Core applications I write, I have a Virtual Machine on Oracle's Virtual Box for running Windows + The full Visual Studio Pro for all of the full .NET Framework stuff. As of right now, .NET Development under Linux is limited to only .NET Core. If you want to do Desktop Applications or work on any legacy code using the full .NET Framework, you have to have Visual Studio. Basically, if you want to use only Linux, you are limit to the [orange column.](https://msdn.microsoft.com/en-us/magazine/mt842506.aspx)
If you don't know the length of the incoming data, you have two options really: 1) Include the length in the packet. Many networking protocols do this - go look at the structure of the UDP header for example. 2) Make up a special sequence of bytes that indicates the end of the message. Of course, with this method both ends of the communication must now analyze the data being sent/received and be sure to escape any instances of that data actually being sent, so it's not misinterpreted as the end of the stream. 3) Use `Task.WhenAny` or `Task.WaitAny` combined with a `Task.Delay` to allow you specify a maximum amount of time for the `await`, and then cancel your `LoadAsync` call if the `Task.Delay` finishes before the `LoadAsync`. 
The links in the title seem correct to me and when I click it I go to the actual post I shared. Can others confirm the link is correct? 
Unfortunately, Draw.io does not support parsing DLL files, that I can see.
How Dump is implemented in Linqpad? It looks like it is an extension method. If that's the case Dump will be called regardless if the full expression is evaluated as a value or null because under the covers is just a call to a static method. The entire expression "y?.Parent?.Parent?.Parent?.X" is null and then Dump is called like Dump(null, "this is ok"). I haven't looked at the generated IL.
The last time I tried running one of my Winforms projects in Mono it didn't render them correctly and some method invocations didn't work. Granted that was several years ago and things may have vastly improved since then. Having said that, if you really want to do full Desktop applications, having an actual windows desktop (even if it is in a VM) is the way to go.
Most people should probably stay far away from the new ref features.
&gt; the problem is that pretty much everything they've added lately is stuff they've swiped from other languages That's not really a *problem*. It's good to learn from the competition. C# has been a place for some good innovation to happen, but it's also lifted its fair share of features from other languages. One problem with C# is that its grammar is becoming *huge*. When I first learned C# it was a very simple language, but I think learning it as a totally new user now would be much more difficult.
I personally don't have experience with OCR libraries, so I don't know if I can recommend one for you there. As for screen capturing, one option might be to use the Windows built-in [Snipping Tool](https://support.microsoft.com/en-ca/help/13776/windows-use-snipping-tool-to-capture-screenshots). Use that to marquee a rectangle on the screen. It will automatically toss the image into the clipboard. You can then monitor/read the clipboard image via [`Clipboard.GetImage()`](https://msdn.microsoft.com/en-us/library/system.windows.forms.clipboard.getimage%28v=vs.110%29.aspx) and feed it into your OCR. So maybe all you need to do is write a program to monitor for clipboard changes, and if the result of `GetImage` has changed, feed it into your OCR and report the results to the user. Save you some work creating a snipping/screenshotting tool.
I’ve never found anything that came close to VS + Resharper. Rider is... decent, but not nearly the same. VS Code is in the same league with Atom, Sublime Text, etc. While respectable as an editor, it’s just not an IDE. If I’m debugging or profiling or reverse engineering something there’s absolutely nothing comparable to the tools available on Windows, either. DotPeek, DotMemory, ILspy, and many others. My recommendation would be to try VS if you’re new to .net. There’s no doubt that you could get by without it, but you should at least give it the opportunity to prove its worth to you before you decide - I think you’ll find that you’re more productive with it. 
a whiteboard, dry erase markers and 5-10 minutes should give him a decent overview...
I certainly agree with you
Look into emgucv. It has a wrapper for tesseract. There are several tutorials on the web that you should be able to easily tweak to work with your problem. You can use the suggestion by /u/FizixMan to monitor the clipboard for a new image every second and when a new image is found, ocr it and replace the clipboard contents with the text.
It uses enumerators and iterators which if you know C++, you use for your `foreach` loops and stuff and its a bit easier to grok if you had that background Or you were an old school .NET 1 or 2 dev and never got to use C# 3 or whatever version introduced LINQ
I haven'y done this in C#, but I have done similar things in the past using Autohotkey and GOCR. something like https://autohotkey.com/boards/viewtopic.php?t=18677 might give you some ideas
Yes! This sounds like a great idea. Thank you!
Yes, perfect. Thank you thank you. EmguCV even has a wiki where they hold your hand through install of their tools: http://www.emgu.com/wiki/index.php/Setting_up_EMGU_C_Sharp
Thanks. I was wondering about doing this with a different tool (Python, AutoIT, etc.), but ultimately decided on C# for various reasons. If it ultimately proves to complicated for me, I might come back to something like this.
Having seen something similar done in production, it is not very reliable. A lot of our automated tests failed inconsistently. 
Use whatever the rest of the team uses. Perhaps in a year with the experience you can customize it but don’t do that from the start.
I hope this release schedule isn't too fast. I feel like I'm going to be perpetually missing out. I remember reading that upgrades up to 2 versions ahead are effortless (e.g. NG2 -&gt; NG4 = ezpz), but 3 versions and above are not guaranteed to be such an easy transition. 
AutoIt has a library (AutoItX) - which maybe very useful for this. 
Using a already setup domain, I would have to change addresses on the domain, plus since we are changing our website to a local server, I don't see a need to modify the temporary website. To my knowledge of stripe, they keep your name, address and other stuff like that on their servers and they don't sore your credit card. I believe they only store credit card numbers when you make a customer object. Even then, currently there isn't a form in the browser where you can currently use stripe. Thanks for telling me this though! I'll check more on if they are storing credit card numbers on transactions, when you are not making a user object. Also thanks for the recommendation of using the toy approach. Like I said in other comments this is extremely early in development with a lot of left over code when experimenting with things. Website isn't really updated, installer needs to be revamped, I need a consistent server software to actually make it working, etc. I've been working on the updating service to make it update more like chrome then TeamSpeak. After I get it working, I'll be working on cleaning up the left over code and improving the security aspect. The point of this post is to get feedback on what I am doing wrong. Since this is my first project.
i and j are just variables. Implicit assignment and explicit assignments.
Woops, looks like I got a little confused when updating it from .net 4.5.2 to .net 4.6.1, I'll see if I can update the post.
In what class? Or the NameSpace?
I think a generic would work well here. https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/generics/generic-interfaces This would allow you to have a common base for things that are common. Then put the unique parts in two separate classes, one for azure and one for amazon.
Yeah, I guess I never thought about it that way. It's mostly that I want my model to be simple POCOs but when I think about it they don't need to be really, that's just a preference I developed at some point and didn't let go of.
FWIW, if you're working on very large solutions, using a VM is a fucking nightmare. I have to use one at work on my Mac now and I can turn on my old Dell laptop, pull from git, clean and build the solution in the time it takes the Mac to build it without cleaning in vmware. Smaller projects is probably fine but when you're doing 30-40 project solutions with hundreds of thousands of lines, VM is shit. VS code though with .net core projects: acceptable. 
I have to totally disagree with you here. What on earth are you envisioning generics being used for? What does put the unique parts mean in your context? OP needs to use dependency injection and an interface. Make IImageRecognitionService and have AmazonRecognitionService and WhateverElseService and put the “unique” parts in there. An abstract class combined with the interface makes a nice pattern for sharing common logic between them. Although again you could inject that shared logic and forgo the abstract. Either way I can’t imagine much shared code between something as diverse as two completely different APIs.
https://quicktype.io/ will help convert from json to c# quickly.
You probably want a set of interfaces. Obviously an interface to capture the shared operation set, but also potentially interfaces for converting data into a format each API understands. It also depends on the return type of each; one may provide information that the other does not and vice versa. public interface IFacialRecognitionWrapper&lt;TRequest, TResult&gt; { TResult ExampleMethod(TRequest requestData); } public class AzureMummy : IFacialRecognitionWrapper&lt;AzRecogRequest, AzRecogResult&gt; { public AzRecogResult ExampleMethod(AzRecogRequest requestData) { //implementation } } public class AwsMummy : IFacialRecognitionWrapper&lt;AwsRecogRequest, AwsRecogResult&gt; { public AwsRecogResult ExampleMethod(AwsRecogRequest requestData) { //implementation } } This becomes much easier if there's a common request format and/or a common response format you could put an interface on; in those cases, you can forego one (or both) of the generic type arguments.
The generic will allow you to easily write one base class. That depending on what type you pass to it that defines what happens. Then you can call the generic function that you wrote. With the generic &lt;t&gt; that you passed in you will have the ability to then call the needed code for whatever API you are accessing. DI will still be used. DI really does not do anything to answer his question by itself.
This ^
I'm attempting to make a program to automate a very annoying part of my job. Resizing floor plan graphics into 10, 20, 30, 40, 50, 60, 70, 80 and 90 percent of their original size while keeping the interior and exterior wall stroke and zone stroke the same as the original image as defined below. **Stroke Definition** Exterior Wall (1 black pixel, 2 tan pixels and 1 black pixel) Interior Wall (1 black pixel, 1 tan pixel and 1 black pixel) Zone Separator (1 black pixel, 1 tan pixel and 1 black pixel) With help I've been able to make a Photoshop Action to basically do this, but it seems like it may be something that can be done in C# and can be given out to coworkers at no cost.
Microsoft has this: https://msdn.microsoft.com/en-us/library/aa302294.aspx
* Separate floor from walls * Shrink floor * Take walls * Cut/separate walls corners from straight bits * Take sample of wall straight bit * Position wall pieces, but don't scale * Fill gaps between wall pieces Can be done with image bitmap comparisons, vectors or manually with code Pretty simple really.
On mobile, a giant subscription box pops up which can't be closed..
https://codereview.stackexchange.com/questions/39980/determining-if-2-images-are-the-same Assuming walls are always grey, the easier option is bitmap comparisons so you just take manual image cut outs of all possible corner pieces, loop through the image and store the positions of all corner pieces, then go to the scaled down floor plan, loop through your stored corner pieces and multiply the position by the scale then redraw the corner piece in its' new position. Then you can use your imagination to think how to fill the gaps between correctly placed walls. The better option is to transform the image into vector graphics or re-draw it as vector graphics but you should just pay for a contractor/freelancer to make this.
Depending of your feature set you could target .net 2.0 and use something like https://github.com/kekekeks/MonoLib to use more modern features.
&gt; add extra "jetbrains" libraries to the projects depending on what's being used. What extra libraries are added? I didn't notice anything like this ...
Also the old ones...
This is actually a difficult enough problem. The issue is resizing the rooms, so that they are the same size. You could normalize the room data into a grid based representation -- omitting the walls. Then you could multiply this normalized room to the size you would want -- then generate a texture while simultaneously adding the walls into place. I would love to take this one on. Unfortunately, I don't work for you.
There's probably an abstraction at a higher level that can do this without much headache, but at a fundamental level, something like this would work. 1. Load the image into memory as a matrix (2d array) of color hex codes. 2. Figure out what is the hex code of color (or range of colors) the wall is 3. Scale everything except the the wall normally (if it is by a factor of 10, each element in the array becomes a 10 by 10 square of elements in the array) 4. If it is a wall color, figure out how you want to determine if the current bit belongs to a horizontal wall, a vertical wall, or both (for instance, any line of grey bits longer than 10 represents more than the width of the wall) 5. If it is a vertical wall, only scale it vertically by your scale factor and not horizontally 5. If is is a horizontal wall, only scale it horizontally by your scale factor and not vertically 6. If it is a part of the corner of the wall, scale it both horizontally and vertically
Could you just shrink the image then add padding around the border? Could beat having to get the whole image redrawn properly.
My first answer is [this](https://i.imgur.com/Fv1v9eK.gifv). I think if you really read through the code you'll agree that is the proper output. My second answer (without cheating) is... p1 is val to Points[0] -&gt; 0 p2 is ref to Points[0] p3 is ref to p1 p4 is val to p3 -&gt; p1 -&gt; 0 p5 is val to Points[0] -&gt; 0 p6 is ref to p5 p1 is changed to 1, altering p3 as well p2 is changed to 2, altering only itself p3 is changed to 3, altering p1 to 3 as well p4 is changed to 4, altering only itself p5 is changed to 5, altering p6 as well Points[0] is changed to 9, altering only the remaining pointer to it p2 This leaves: p1 = 3 p2 = 9 p3 = 3 p4 = 4 p5 = 5 p6 = 5 And my third answer while cheating is [this --- SPOILERS ---](https://i.imgur.com/Mq4VHcJ.png) 
On desktop too. I couldnt't even see the article!
Very cool for people to learn from. I have one question and one suggestion Question: In your authService, any reason you use Promises rather than Observables? You should package your service into a NPM package. I'm sure many would benefit from it and would be able to integrate it easily into their applications! Cheers!
Any chance you have vector representation of the floor plan? Maybe a DWG, SVG, SHP, or something?
I wish my friend. PNG files in and out.
Any tips on doing that?
Thank you, I'll read up on those links when I get home.
Nobody works for me... Life at the bottom is rough at times. That's why I need to keep learning and improving. Thank you for the suggestion.
&gt; The generic will allow you to easily write one class. That depending on what type you pass to it, that will define what happens. I honestly don't think you understand generics. DI is the obvious choice here.
Both can be used, but I find Promise more adequate in this case : I'm waiting for the result of a task (the token) and than I'll go on. I would prefer observable in a subscribing/multi-call scenario. But it's really a personal taste. I'm still pretty new in the JS community, I'll consider to push this on npm. Even if due to its dependencies (it needs a back-end to convert the auth code to auth tokens) it wont be a easy thing to do. Maybe with some documentation it could do the trick. 
Tesseract is really simple to use, but you will need to download the tessdata (eng.traineddata for English) and put it in a local directory: https://github.com/tesseract-ocr/tessdata For your use case, there's no need to store a temporary file. You can manipulate everything in memory. First, you'll need a TIFF file. You can convert this in C# from whatever method you decide to screen capture (others have touched on this already) &gt;using (var bmpStream = new MemoryStream(binData)) &gt;using (var tiffStream = new MemoryStream()) &gt;{ &gt; var bitmap = new Bitmap(bmpStream); &gt; bitmap.Save(tiffStream, System.Drawing.Imaging.ImageFormat.Tiff); &gt; return tiffStream.ToArray(); &gt;} Then, it's literally 3 lines of code to do the actual OCR: &gt;using (var ocr = new TesseractEngine(@"[your path to]\tessdata", "eng", EngineMode.Default)) &gt;using (var pix = Pix.LoadTiffFromMemory(tiffdata)) &gt;{ &gt; var txt = ocr.Process(pix).GetText() &gt;}
Thanks for the input. There would be a lot of user interaction during this, and the OCR would essentially just be a first pass. The user would then check the output from the OCR and make changes to the text if it was incorrect. So, it wouldn't need to be 100% reliable. Additionally, I'm hoping that the fact that it will essentially only be checking monochrome documents will make it easier (I don't need the OCR to correctly read street signs in a picture... just black text on a white background from an image file). Still, this is something to keep in mind. Thanks.
I guess ultimately, you need to figure out how to represent this data logically, so that you can manipulate it. For me there are already some distortion issues happening with your current solution. If you can overlook those issues, then it would be a lot easier. But if you look at your example, in areas in the large image where a room has a very small wall that is only a few pixels wide -- The resized version of this tiny wall remains the same in the smaller version. The highlighted portion in red is the same size in both images: https://i.imgur.com/owCkfWD.png 
MSDN webpage for Windows.Media.Ocr [here](https://docs.microsoft.com/en-us/uwp/api/Windows.Media.Ocr). Sample using the above api [here](https://github.com/Microsoft/Windows-universal-samples/tree/master/Samples/OCR).
I don't think you understand DI. A solution that uses both is the choice I would make. The DI for the testing and the generic for the ability to swap API's without having to recompile.
SVG maybe? scaling would be dynamic
The goal is to keep the walls the same size. Side note, GORB is awesome. I didnt realize you put it on Steam too.
Did? Still do!
Some of our guys who used it had added jetbrains.annotations and a few other items I can't recall. It also added a bunch of syntax sugar to some cs files that VS was quite annoyed with.
Could you possibly post a sample with the original input and your scaled output?
Which version you play? 
I'm saying 303455 because the assignment of 9 to a copy of the struct in the array shouldn't do anything. 
Android
Algorithmically, I would do the following. 0) convert the image to a monochrome data array 1) use a corner detection algorithm to fetch all the algorithms 3) if the floor plan is well aligned with the image axes much like the image posted, for each corner detected, perform a flood fill algorithm from a seed location given by moving a small distance away from the origin corner along each of the 4 diagonals. 4) the flood fill will give you the "room" and some useful properties like which pixel belongs to which room and room centroids etc. 5) keep a list of all rooms, and you can skip flood fills that already have accounted rooms. Keep track of which corners produce which room 6) pick an arbitrary origin point in the original image and calculate the vectors for each corner and room centroid 7) scale these vectors accordingly 8) now to generate the new image, iterate through each room centroid. Sort the room corners by a clockwise or counterclockwise order, and this will give you the walls for each room. 9) for each wall you can draw a line with some desired thickness 10) for each room centroid, perform a flood fill with the color of the original room. This shouldn't be the quickest way to do this but, with some minor modifications should be generic enough 
I will reply with that information in a few hours when I get home.
I was thinking about another way to approach this. Instead of looking at it from a room perspective, you could look at it from a walls perspective. Grab all wall intersection points, and save the locations of each of these nodes. This will serve as the center points of each of your walls. These nodes would also need to retain information on what direction they need to draw lines in. When you resize, adjust every node's position based on the width/height change. Then it is just a matter of drawing in the lines, and colouring in the room colors.
:o Thanks for letting me know and sorry for that. What phone are you using? I can see it on my iPhone (X link) and I agree that could be changed to white and moved to the top right corner. I'll see if I can change it. Thanks
Done
1. Scale the image down in e.g. GIMP 2. Use the magic selector to select all pixels that are the wall color (assuming it's still a unique, solid color) 3. "Pad" the selection with the [grow tool](https://docs.gimp.org/en/gimp-selection-grow.html) by a couple of pixels 4. Re-stroke the walls within the selection boundary It may be easier to do step 1 last, actually, since scaling down introduces interpolation that may mess with the magic selector
Was just curious. I built the iOS one for Jon. :)
Well then I'll buy that version for my wife on her iPad. It's an awesome game.
&gt; jetbrains.annotations So the IDE offered to install some useful packages that are on Nuget (that Resharper offers to install also) &gt; It also added a bunch of syntax sugar to some cs files that VS was quite annoyed with. and it offered to refactor some old C# code to a use syntax from a newer version of C# that your old VS doesn't support, and your response was to ban the IDE instead of trying to understand what those extra things actually are?
Hahah nice one. :)
Woah, someone's defensive. :) Wrong, VS 2017 with latest updates. Installing nuget packages and supporting the binaries on git is sloppy for two guys who downloaded the rider trial edition. And enterprise development often unifies installs. It is sloppy to ask developers to buy their own licenses if we are unified. we use enterprise so we have as many seats as possible. If it was open source projects sure, then whatever. Enterprise development does not work the way you think it does.
Spam.
What is up with c# 7.2 support in Visual Studio Code and .NET Core 2.1? Trying to use string interpolation caused a syntax error and I couldn't compile with GetReadonlyPoint because it complained that it was not invokable. And I am pretty sure I didn't make a typo...
You know you can repost, right? All you have to do is fix the title and format the code. Folks here are generally willing to help.
CheckStandardSubscriptionAttribute returns 401 if the type is not Pro or Standard regardless of whether the subscription is active. IsUserSubscriptionActive does not. Was the user encountering this behavior not Pro or Standard?
That's surprising. I don't know because I used the full Visual Studio with the full framework to create the example. I know R# does not yet fully understand C# 7.2
My sincere recommendation is to not do this. I've seen it done and you will end up remaking C# and ASP.NET inside your program. Users will start asking for certain screen layouts, reports, arbitrary conditions, nested/linked objects, and so on. There's no framework for it because there's no consistent use case, and the only complete framework would be a full programming language and UI designer.
&gt; but it seems like it may be something that can be done in C# and can be given out to coworkers at no cost. It sounds interesting and fun, but when considering the ROI of doing it, don't forget the opportunity cost of supporting it. (and people will be tracking you down on LinkedIn in 10 years asking you to fix a bug in it. Things that become "essential part of the workflow" don't get thrown out and rewritten easily.)
I'll have a link to reddit.com for support! You do in all seriousness highlight a very valid point. Maybe I spin up a little software company on the side and explain to my boss that I saw a need and on my free time without company resources built an application that the company can utilize at a price to save them $$$
It looks like the walls are entirely contiguous. If that's always true, then you can use a flood fill to extract the pixels corresponding to the wall. The rest of the task should be pretty straightforward once you have that.
Your best bet is to convert the input image into a data structure representing the layout. Once you have this data structure, you can write a renderer that can output images at any size and with any border size. The nice thing about this approach is that you can scale down or scale up or write it to a wide range of file formats.
The user in this case was me, and no, everyone is a standard user. The Subscription_End_Date is a datetime2 in SQL Server, and I'm intentionally comparing it against only the date component of the current datetime. I should probably select only the date component of Subscription_End_Date for consistency.
That example is reason enough that using string interpolation for SQL queries is a terrible idea. SQL injection was pretty much a non-issue with .NET since pretty much all the ORM frameworks made parameterizing queries much easier to work with. You had to go out of your way to end up with a dangerous SQL query. Now we have that FormattableString overload and no end to people spruiking it in blog posts about how it's the cool new way to pass parameters in. One step forward, two steps back.
Cross platform and less licensing issues.
[Dilation](https://en.wikipedia.org/wiki/Dilation_(morphology\)) (what you are calling 'padding') on sharp corners will round the corners, something you don't want.
[Dilation](https://en.wikipedia.org/wiki/Dilation_(morphology\)) (what you are calling 'padding') on sharp corners will round the corners, something you don't want.
Which one ? Java or C#
There is nothing to run here. Start reading from basics like real HelloWorld console application.
Is that why I am getting that specific error? It seems like its not recognizing the command at all. But, I am also a noob.
Error is about your csproj file, not your code. Post the contents of that.
I don't think you read my whole post... I tried running this code: using Xunit; public class HelloWorldTest { [Fact] public void Say_hi_() { Assert.Equal("Hello, World!", HelloWorld.Hello()); } } There is a .csproj file also, with the contents: &lt;Project Sdk="Microsoft.NET.Sdk"&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;netcoreapp2.0&lt;/TargetFramework&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;Compile Remove="Example.cs" /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include="Microsoft.NET.Test.Sdk" Version="15.5.0" /&gt; &lt;PackageReference Include="xunit" Version="2.3.1" /&gt; &lt;PackageReference Include="xunit.runner.visualstudio" Version="2.3.1" /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt; It still gives the same error. I think my machine is missing something that allows it to recognize C# statements. Or something. I have no idea.
 &lt;Project Sdk="Microsoft.NET.Sdk"&gt; &lt;PropertyGroup&gt; &lt;TargetFramework&gt;netcoreapp2.0&lt;/TargetFramework&gt; &lt;/PropertyGroup&gt; &lt;ItemGroup&gt; &lt;Compile Remove="Example.cs" /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup&gt; &lt;PackageReference Include="Microsoft.NET.Test.Sdk" Version="15.5.0" /&gt; &lt;PackageReference Include="xunit" Version="2.3.1" /&gt; &lt;PackageReference Include="xunit.runner.visualstudio" Version="2.3.1" /&gt; &lt;/ItemGroup&gt; &lt;/Project&gt;
Yep, that's where I got as well... especially the first part. Fortunately, no real application or library will make me have to work through this kind of problem at work instead of getting some actual things accomplished just because someone got spooked about copying a 20-byte struct down a few stack frames, right? ...right?
Buddy, go to msdn for c# and read lol you're trying to do some whacky things when you don't have a full understanding of what you're trying to accomplish.
Do you just need it done, or you have to do it? Cause I would be willing to take it on as an exercise if you would want.
&gt; Should I be looking at an Interface or Abstract class? Wrong question. All "abstract classes" are interfaces. Or rather, they define a public interface. The `interface` keyword creates just a public interface. With that out of the way, the real questions are: 1. Do I want to share code between the two concrete classes? 2. Do I want to publish this in a library that others will consume? Reasoning: 1: Abstract classes, or rather inheritance in general, was created as an easy way to share code between classes. You can simulate inheritance using composition, but you're just doing by hand what the compiler would otherwise do for you. 2: Adding new methods to an abstract interface is a breaking change. But adding new methods to a public interface (e.g. on an abstract class) is generally considered to be safe. *** My recommendation is to always think about the design restrictions first. If you know that the answer to either question is yes, your decision has been made for you. 
I want it done and to learn. I enjoy programming and even more so when it will be a program that will be used. Perhaps we could work on it together?
Then you have to answer simple question yourself. Is "10" int, float, double or decimal?
Does anyone have a way to subscribe to this guy's posts? I really like them, but I see no way to follow him specifically.
create an overloaded method, pass in a string and a flag indicating the type so you get the correct output depending upon when and what you need it for.
https://blogs.msdn.microsoft.com/seteplia/feed/
.NET Command Line Tools (2.1.4) Product Information: Version: 2.1.4 Commit SHA-1 hash: 5e8add2190 Runtime Environment: OS Name: Windows OS Version: 10.0.16299 OS Platform: Windows RID: win10-x64 Base Path: C:\Program Files\dotnet\sdk\2.1.4\ Microsoft .NET Core Shared Framework Host Version : 2.0.5 Build : 17373eb129b3b05aa18ece963f8795d65ef8ea54
you cant tell me that making a program to say "hello world" is wacky. Its basic shit, and while I don't have any programming experience, I can learn it. Its just that there seems to be something fundamentally wrong with either the files supplied to me, or I didn't install everything I needed. I will dissect the statements/code and seek to understand them, the syntax, and the logic when my coding environment is working as its supposed to. 
As a developer who has been writing mvvm applications for over 3 years to break it down View = XAML ViewModel is where the bindings go ie the public properties that the XAML datacontext is set to MVVM tries to separate the look and feel from the functionality as much as possible so you shouldn't find code in the XAML cs file 
I tend to handball each project creating the following folders Helpers = Converters etc ViewModels = usually each view will have a single ViewModel Views = XAML design with zero code behind in cs files Usually most of my projects will have be window or userconfrol based with a wrapper ViewModel as the datacontext of the outer window and this wrapper view model has other ViewModels as properties via IOC such as Prism and then all my eventing is completed via EventAggregator so my ViewModels don't have to be aware of each other to pass messages between instances 
all of this comes down to re-usability of code. you should try to develop in a way that your code functionality is entirely decoupled (split away) from any UI specificities. this allows you to swap your WinForms UI with a WPF UI with a Console App with a WebApp. the MVVM pattern goes a little further in that it says you should also decouple your view logic from the actual view (VM and V), allowing you to swap out a view with a new one at 'any time'. *Models* = the simple POCO (plain old c sharp object) classes that simply hold data. say a StockPrice.cs, that is used by many other services, for example StockPriceProvider.cs. having this class separate from any view specificities allows you to move it into its own project so it can be shared with NON WPF applications (console application, web app). *ViewModels* = classes specific to the view you have developing in the framework you have using. these classes usually expose parts of the models (data) needed to be visualized, input validation, and also extra hooks for things like buttons and communication with other views. from a winforms viewpoint, its like the code you write in the .cs part, except in MVVM world its entirely seperate form the view part. allowing you to swap in a new view. as example, so you can have a view of a user for users and one with more features for admins. or design an entirely new view, but keep the code that validates, and fires events, and opens modal windows, and such the same. the most important thing that ViewModels do is notify the UI that a value has changed, so it can get the value and re-render. this is done with the interface INotifyPropertyChanged. WPF as a framework hooks into this with its binding mechanism. *Views* = this one is self explanatory. but keeping it separated from everything else allows you to swap in views for different needs and easily update the view of your application. hope that helps a little.
Well shit. I was hoping you had a different version. Go [here](https://github.com/aspnet/JavaScriptServices/issues/495) and add that global json file that they mention. I don't know if it will work but let's hope. It is very possible that this is a bug in the system and not anything you've done.
I didn't. I am using exercism to learn, and they supply some files to be a skeleton and start. 
I will take that suggestion when you start
why don't use bootcamp or parallels?
Msdn has a step by step tutorial someplace to help set up your solution. Make use of it my dude .
Maybe I wasn't as clear as I should be my concern doesn't lie with the concept rather the coding as in the actual code used, for example: BindableBase INotifyPropertyChanged SetProperty ref ObservableObject PropertyChangedEventHandler ICommand DelegateCommand The examples above I've pulled from a selection of MVVM examples I have found. As I say I've came from code behind, simplistic code behind at that, and I've just got my head around MVVM but the coding used in the examples I've found online seem to be on a another level of programming compared to what I am used too. Ideally I'm looking for an MVVM walk that explains the way everything ties together. As in the binding of this button fires this off in the viewmodel which in turn does x to the model and so on and so fourth.
https://stackoverflow.com/questions/33575812/project-file-could-not-be-loaded-data-at-root-level-is-invalid-no-xml-in-the-p
Lol. So I should avoid a website that many people have used and has been around for a while, simply because its confusing to you? Fuck outta here mate, that's nonsense. I get it doesn't make sense to you, but I think ill be the one making the decision if I should avoid it, because it really only matters if its confusing to me or not. 'Appreciate the advice tho.
Do you have any tips on how to design a ViewModel that can be used in both Winforms and WPF elegantly? The views and models are easy -- that's your visual code and your business logic. However, I find that my "middle man" (e.g ViewModel, Presenter, Controller) is usually coupled tightly to the underlying UI system because the UI systems leak abstractions. To clarify, I know how to separate the View and Model from the middle man in all 3 common `Presentation Model` patterns, but I never seem to be able to abstract the middle man enough such that it can be used in WF, WPF or MVC apps without having to make functional changes.
ViewModels are typically in the UI layer of your application. meaning they even reside in the same projects as their respective views. So it's not really something you would share with a WinForms app, as WinForms doesn't allow MVVM patterns out of the box. For example, WinForms doesn't use the the same bindings are WPF, so you cannot bind events to ICommand like you can in WPF. But that being said, the presenters in WinForms world are basically ViewModels in WPF. The main thing to keep in mind is that you want all business models (data classes) and logic (services) in totally separate projects and having no UI logic or dependencies in them.
Honestly, you shouldn't really care if other people are using that website or not. That's simply not a good way to assess the quality of a teaching website. Some teaching methods may work for some people, but not for others and, as far I can see, this website is not working for you since you're confused right at the beginning. Someone even said you should start with the real "HelloWorld" and not with this. You're simply trying to fight something that's clearly not working for you. If you have been using this website for a while, I could understand you wanting to continue using it but, c'mon, you're having trouble trying to output a HelloWorld application.
In anycase the OP will need to write an assembly to consume the API and expose it's methods via an Interface the OP defines, so as to be usable by his app. He can then use DI to inject it into is application OR even just reference it. DI is optional in this case, but you can't get around the fact that an interface needs to be designed to accommodate the API functions and be usable in his app. So the process would be something along the lines of: 1. Perform an analysis of both APIs and come to determination of what methods need to be exposed to the app and how to satisfy their requriements 2. Create an interface that will define the above requirements for any implementation 3. Create the implementation in a new assembly 4. Use DI to inject the new assembly, or simply reference it. DI is a good idea though, but it's not essential. The 'wrapper' assembly could be designed to reference both APIs if needed, and then implementations could be swapped out internally.
I just said that my coding environment doesn't seem to be functioning properly. Slow your roll for like 5 minutes and read the rest of the comments here. I haven't even gotten to a point where I can even try this teaching method. 
Parse and TryParse are built for strings specifically, convert will take in any object, while using Convert will work with any object. The main difference is that Convert returns '0' if it falls or receives a null value.
I was in the same boat many years ago. So rather than learning XAML and MVVM binding at the same time just do a windows form setup with WPF front end and code behind. Once you get comfortable designing your forms in WPF you can start moving stuff to the ViewModel. You can have code-behind and a view model and I found doing it this way really helped me understand binding. Also WPF is tricky, at first I wanted to plop down controls like I did with windows forms but after a course I found using containers properly make a much better UI. I started using DockPanels because it stretches everything out for you so if the form size changes your controls move and resize with it. It depends on the interface but most of my forms have an outer dockpanel and inside docks I have grids and stackpanels depending on content. Once you get the hang of that create a ViewModel, normally the naming convention is the name of the window followed by the suffix "ViewModel". If you have a MainWindow then you would have a MainWindowViewModel class. Next step is binding the window to the viewmodel, you can do it in XAML markup or code behind. I prefer code behind myself just in case you need to pass something to the view model constructor. If doing in code behind the simplest way is: var yourViewModel = new YourViewModel(); this.DataContext = yourViewModel; Once that is done you can bind controls to properties in your viewmodel, just make sure you implement a way to bubble up property changes. I normally make a base view model class that implements the INotifyPropertyChanged interface. I'm sure you can find many examples online. For button presses you will be using command binding. A command is of type ICommand and will call a delegate CommandHandler to execute a method you define. It gets a little complicated but once you define one the rest are easy. Here is an example of one: private ICommand _acknowledgeError; public ICommand AcknowledgeErrorCommand { get { return _acknowledgeError ?? (_acknowledgeError = new CommandHandler(() =&gt; AcknowledgeError(), _canExecute)); } } I suffix my commands with "Command", So on our button you would bind the Command property to this command: Command="{Binding AcknowledgeErrorCommand}" The AcknowledgeError is just a method that is called and _canExecute is a variable I use that let's the binding know if it can be called. Normally I check my security when the form loads and set this variable, you can hardcode to true if there's no security. Hope this helps you get started. The most important thing that I learned is that not everything needs to be in the ViewModel. If something is easier to do in code-behind then just do that, no sense in creating a ton of code just to close a window or something like that.
Kinda like lots of stuff that gets posted here from InfoQ. (They do seem to have some decent summaries so I don't report them)
You can use MVVM with Winforms, ReactiveUI has support for Winforms.
All the keywords you provided comes from PRISM: a library that gives (and not limited to) tools to do easier MVVM binding. You should read about PRISM, or another library like MVVMLight, it will gives you all the knowledge of who is doing what and why. And don't learn from "tutorials" or code sample directly: first open a cookbook on the related topic. It will gives you all the basis needed to understand the tooling used. You can also read the doc/guides: https://msdn.microsoft.com/en-us/library/gg406140.aspx 
I love your response because a programmer would say "all of them" whereas a normal human being would say "10 is clearly an integer, what the heck is a float, what the heck is a double, and clearly is not a decimal because there is no decimal point and no fraction." Put simply, one is the correct answer, whereas the other three are programmer specific concerns caused by inherent design within computers and programming languages. To normal people, they are wrong answers. 
If you want to know the newer technologies, i'd say go for .net core. If you want to have a strong base where most projects have been done already, i'd say go for .net mvc classic. Either way it's fun. But it's not the same thing at all, so maybe try both? 
Ok Thanks . I will start with MVC and then go for core
Even if I were to assume that you defined integer versus non-integer as whether or not the string is a whole number (but what about 10.0?) I’m not sure what would differentiate a float, double, and decimal. 
they are very similar in terms of what you actually create in the end (controllers, apis, SPAs). the main differences to me is the underlying 'engine' for the framework. in such, especially since you are not at a job where they already use or or have a plan to migrate to another, i'd learn asp.net core. 
&gt; I think the issue could be deeper in EF, probably a misunderstanding I have of how it works. I think the ActionFilterAttribute is instantiated only once and used as a singleton, so it's using the same instance of UniversalClipboardEntities for each request; is it possible that that's causing some caching issue? Does the issue persist if you instantiate a new UniversalClipboardEntities in a using statement in the OnActionExecuting method instead of instantiating at construction time?
I thought that. Actually, my original title was going to asking about the lifetime of the database context in the filter. Then I thought, no way, because if the context was long-lived, it would eat up more and more and more memory. Surely that would be a bad way of implementing filters? I may have to test this. I think I'll add an instance-level int to the filter, and add 1 to it on every request, and see if it persists.
.net core mvc
Is this homework? Have you asked the person requesting this (like your teacher) what constitutes it being an int, a float, or a decimal? Have they given any examples? Can it be both an int and a float?
Has anyone used the custom awaiter approach in production code and how did that work out for you? Any pitfalls to be aware of?
I googled [this](https://code.msdn.microsoft.com/How-to-use-SqlDependency-5c0da0b3) for you. It's an example project from MS using SqlDependency and EF.
plot twist: it's a binary number
Where are the algorithms questions? Big O notation is life! hahaha Interesting base for a company that don't feel like writing their own test. But all tests are subjective to what exactly you want to get from/learn the developer applying
I've just done some testing, and can confirm that one filter instance is created for each controller that uses it, so the instance-level fields are long-lived. Not all of my controllers will necessarily have a database context on them, but I'll create one on each request within the filter. I reckon this is now solved. Thanks for the help!
Yeah, it's definitely tricky working out where things go at first and realising that knowing WinForms probably makes things harder. I always recommend this tutorial to people who are starting with MVVM: http://www.markwithall.com/programming/2013/03/01/worlds-simplest-csharp-wpf-mvvm-example.html It's exactly what it says. A very simple implementation of MVVM to help get you started. To address specifically some questions you put elsewhere on the thread: implment INotifyPropertyChanged in your View Model (and perhaps even your Model) and ICommand DelegateCommand in the View Model too.
Too cool, thanks!
I've gone *back* dozens of times watching Scott Allen's Pluralsight videos, to see what his slight-of-hand is. Yesterday: hover over the data context of a LINQ-to-SQL statement to see what the generated SQL will be.
feel free to add your own! i've only spent about 2 hours writing this up from what we currently use... The idea was to make it grow!
Good grief. Async/await is so annoyingly complicated to get right. Every time I mess with it, or even read about it, it seems there's another dozen common pitfalls with it that will make your software kick you in the face. It seems like it's just easier to sling ~~function pointers~~delegates around as parameters to get things done asynchronously.
Try Environment.NewLine maybe? MyString + Environment.NewLine
&gt; See also: Superman III, Office Space OK, now I'm intrigued. I recall Clark writing C# code, but not *decimal* coming up. Not really. *Please explain your reference before I go mad!* :)
It's built on top of SqlDependency, so you do need Service Broker turned on. However, that is supposed to be available on SQL Server Express.
Go with CLR via C#. Think of IL as another programming language. The book explains the rules of that language, but does not spend any more time on how the CLR works than a C# book would.
I totally agree with you. I just prefer the Convert because it's a more standardized way to convert any value to another type (when coherent obviously). Convert.ChangeType(obj, destinationType) is really useful
I highly recommend playing with ILDASM. It comes with .NET and let's you see what the compiler produces.
As much as I'd like to get excited about .NET on WebAssembly, this doesn't feel like "it" to me. It's a really experimental implementation of a small subset of high-level components. I'm worried that there's not a real interest or focus in making the low-level fundamentals of the runtime work, which feels like it would be a better, more productive approach to start with. Then again, I'm more interested in getting my "non-web" things to run in the browser, like games and other apps. IMO, those are the "real" applications for WebAssembly.
Unit test to test a method.... Your supposed to write the unit test first.
Are you..? Not everyone ‘tries’ to do TDD. 
I talk about TDD and red/green/refactor in the talk before this is presented. Because this is about making sure someone can actually do the work that we need them to do.... not knowing TDD isnt really that much of a problem if you can prove you have a good logical mind and can write unit tests, surely?
Did a search took 5 minutes https://stackoverflow.com/questions/605621/how-to-get-object-size-in-memory 
Agree... although most places I’ve worked that claimed they did TDD “didn’t mind if you wrote the tests before or after” which ultimately left them to being forgotten. I’ve recently gotten into BDD and much prefer this, for a couple of reasons (primarily in that its leading us to be able to have more accurate estimates in how we can predict deliverable dates by the percentile (as in, 80% confidence a story will be completed in 3 days, compared to some complexity point scoring system where most people are like ducks and will follow suit with other point estimates)). Not only that, but we’ve had product and testing come closer in sync with the devs, which has meant our confidence in releases has increased. Still it’s another discussion :) in terms of being able to write a test.... I’d be more interested in seeing which units a candidate would chose to cover with a test, rather than writing one for me. 
one of my goto interview questions is 'explain BDD and TDD, then explain to me whether the two are mutually exclusive or not' We've started using selenium / specflow automation tests around our given when then scenarios. And just like unit tests, they 'should' be done before hand
Curious... Are you referring to the step bodies, or GWT criteria being ‘done’ before? :)
We started with doing the GWT in the user stories in JIRA wayyyy beforehand... But our current tester / product owner partnership dont like that. So we make our own to satisfy happy paths. Meaning we have a 'regression suite' I would go into more detail about that. but all of the inevitable questions you will have about that have already been said by me to the guys at work, and irritate me no-end :P
Maybe your directions need some clarity because I interpreted that as "convert this from a foreach loop to ForEach" 
If we wrote them before hand, we let them fail. Because we merge to develop once the entire ticket has met DoD. So the integrity of a production ready branch is never scuppered 
Check out: - http://enterprisecraftsmanship.com/2015/03/02/functional-c-immutability/ - https://github.com/vkhorikov/CSharpFunctionalExtensions - https://github.com/MonacsLib/Monacs - https://github.com/louthy/language-ext 
Thanks!
Sorry for the 4th revision, just a follow up for other people who are as dumb as me....thats what it was. I was testing wrong. Here's the output when I ran it the right way, and what I was expecting: Starting test execution, please wait... [xUnit.net 00:00:01.2996687] Discovering: HelloWorld [xUnit.net 00:00:01.3350172] Discovered: HelloWorld [xUnit.net 00:00:01.3388491] Starting: HelloWorld [xUnit.net 00:00:01.4390246] HelloWorldTest.Say_hi_ [FAIL] [xUnit.net 00:00:01.4397305] System.NotImplementedException : You need to implement this function. [xUnit.net 00:00:01.4403293] Stack Trace: [xUnit.net 00:00:01.4413338] C:\Exercism\csharp\hello-world\HelloWorld.cs(7,0): at HelloWorld.Hello() [xUnit.net 00:00:01.4414874] C:\Exercism\csharp\hello-world\HelloWorldTest.cs(10,0): at HelloWorldTest.Say_hi_() [xUnit.net 00:00:01.4490357] Finished: HelloWorld Failed HelloWorldTest.Say_hi_ Error Message: System.NotImplementedException : You need to implement this function. Stack Trace: at HelloWorld.Hello() in C:\Exercism\csharp\hello-world\HelloWorld.cs:line 7 at HelloWorldTest.Say_hi_() in C:\Exercism\csharp\hello-world\HelloWorldTest.cs:line 10 Total tests: 1. Passed: 0. Failed: 1. Skipped: 0. Test Run Failed. Test execution time: 1.9907 Seconds
FYI: Figured it out. I was issuing the command in the wrong way. This is the output that I was expecting: Starting test execution, please wait... [xUnit.net 00:00:01.2996687] Discovering: HelloWorld [xUnit.net 00:00:01.3350172] Discovered: HelloWorld [xUnit.net 00:00:01.3388491] Starting: HelloWorld [xUnit.net 00:00:01.4390246] HelloWorldTest.Say_hi_ [FAIL] [xUnit.net 00:00:01.4397305] System.NotImplementedException : You need to implement this function. [xUnit.net 00:00:01.4403293] Stack Trace: [xUnit.net 00:00:01.4413338] C:\Exercism\csharp\hello-world\HelloWorld.cs(7,0): at HelloWorld.Hello() [xUnit.net 00:00:01.4414874] C:\Exercism\csharp\hello-world\HelloWorldTest.cs(10,0): at HelloWorldTest.Say_hi_() [xUnit.net 00:00:01.4490357] Finished: HelloWorld Failed HelloWorldTest.Say_hi_ Error Message: System.NotImplementedException : You need to implement this function. Stack Trace: at HelloWorld.Hello() in C:\Exercism\csharp\hello-world\HelloWorld.cs:line 7 at HelloWorldTest.Say_hi_() in C:\Exercism\csharp\hello-world\HelloWorldTest.cs:line 10 Total tests: 1. Passed: 0. Failed: 1. Skipped: 0. Test Run Failed. Test execution time: 1.9907 Seconds In the future, actually read the post, and focus on the issue the person has, not on the fact that you are confused, and think they shouldn't be using it because you are confused and therefore think the method is bad. Now that I figured out what I was doing wrong, I can edit the file and learn the code needed to get what I want. 
Perhaps. I'll take a look. Cheers 
Just to expound, perhaps something like: Here is a list of person objects. In LINQ, select the first person whose name is "Bob". Sort the list of persons. Sort then select a list of persons that are older than 21. etc
Daniel Roth and Steve Sanderson were on .NET Rocks talking about Blazor. While it is still an experiment, there seems to be people dedicated to it on the ASP.NET team and the Mono team. Mono is what they are using to generate the web assembly and ASP.NET is working on more of the front end/tooling work related to this. 
&gt; Write some code that could be described in Big O notation as O(3) I'm confused. The method as written satisfies the constraint.
The method is empty? What I'm looking for there is a triple nested loop. Is it the wording? 
Just a heads up incase anyone reading this tries or attempts to implement this on any SQL server as a service (AWS RDS), that Service Broker doesn't work on those instances.
&gt; The method as written satisfies the constraint. I don't think it's complete until the method body contains a comment that says `// Scalars aren't a thing in BigO` and nothing more.
Thanks for the warning. 
&gt; What I'm looking for there is a triple nested loop. That's not what your question says. Not at all. There's a huge difference between `O(n^3)` and `O(1)`.
Partial solution: have the textbox in the data grid automatically select all contents when it gets the focus: https://blogs.msdn.microsoft.com/argumentnullexceptionblogpost/2013/04/12/a-simple-selectall-behavior-for-textboxes/
I couldn't help but notice [this code sample](https://github.com/liamht/InterviewQuestions/blob/980d0dda8f854037dc112ad9ee518531df662df2/InterviewQuestions/Question%2005%20-%20LINQ.cs#L16-L19), and wonder if that's really doing what you expect. foreach (var entity in entities) { entities[entity.IndexOf(entity)] = entity.Substring(0, 2); } Perhaps you want some unit tests for your interview questions?
The asp.net MVC tutorials are better. ASP.NET Core has a lot of misinformation caused by changes in to the platform during development. 
Nah, I'm with you. Didn't realise my typo. Cheers 
The answers on that page are either "Probably can't be done" or "Probably can't be done, but you can find out the serialized size" ...
There are two errors there. The InvalidOperationException, but also the fact that you are writing all your results to entities[0]... I don't think it's fair to people who are taking the interview to have to guess at what you mean. I'm pretty sure the code below would be a LINQ-using equivalent to the current implementation: if (entities.Any()) // using linq here { throw new InvalidOperationException("Just emulating the current behaviour"); } return new List&lt;int&gt;(); Surely it's best to keep the broken code limited to the "code review" question?
Don’t put the logic of default ingredients in the constructor. 
&gt; Its there on purpose. Good job spotting it. That is the difference between a candidate who does what they are asked to do, and a candidate who takes their time and makes sure everything makes sense. I think you really need to step back and think about what you want to test for, how you plan to actually test for those things, and then how you plan to measure the test outcomes.
The idea behind that bit was that when you skim read it, you still read it as its finishing the index of entity inside the array. I've only ever has 2 people notice the mistake in the interview. Which is alarming honestly. I'll add something to the readme or remove it completely for the sake of it being suitable for other people. 
Perhaps other candidates also noticed but were afraid they wouldn't get the job if they called you out on it. Regardless, I think such gotchas have no place in an interview. In addition to being unnecessarily confusing, it might give them a very negative impression of the company: you get all these questions about SOLID and the Law of Demeter and Code Review and Unit Tests... and then the code for some of the assignments contains errors and doesn't even work for any non-empty input. I know I would get the impression that the company cares primarily about the *appearance* of quality.
Both of these solutions require scrubbing the entire code base. It seems like there would be a simple flag I could set that says, "The deserialized object should actually look like the object that was serialized."
I'd never even thought about it like that. That's a really good perspective on it. I'm going to remove it. Comments like this are why I wanted to open source these questions. Thank you so much. 
Try using this custom setting in your deserialize call new JsonSerializerSettings { ObjectCreationHandling = ObjectCreationHandling.Replace }; 
Use triggers from the database to update a smaller table to check. Is how asp.net httpcache works. For example, you have a table with the last update date in a row, and gets updated by the trigger and checked by EF every 10 secs or whatever. You could also fire a process from the trigger. It depends on what you want to accomplish.
You'll need to use Npgsql's notifications feature: http://www.npgsql.org/doc/wait.html
Does it have triggers? 
It's honestly not that bad as long as your application is async everywhere. Just don't use `async void` methods and remember to sprinkle `.ConfigureAwait(false)` everywhere and you're golden. It's certainly a lot easier than traditional multi-threading approaches. If they'd remove the apartment thread model from Windows so that we could update the UI from any thread it would remove about half the gotchas.
Sorry to be a smart arse but... Yeah actually I do TDD, but only the core business logic (cost V benefit and all that). I also previously had a 2 year contract to just write unit tests on existing projects (and setup continuous integration), ask me how that went :). 
Your questions will filter towards well educated, and poorly experienced developers.
MVC5 is solid ASP .NET Core can be easily grasped by you once you know MVC5 well. Like /u/grauenwolf said, ASP.NET Core has lots of misinformation and breaking changes from 1 to 2
If you can write unit tests and don't know TDD, I would consider that a fundamental failure in your education. But it's not that uncommon and I wouldn't really count it against anyone. If I got that unit test question at an interview I would also consider that a failure in the companies culture, but I wouldn't hold that against them. I would ask them if they tried baseball and how well it worked for them.
Depending on your usage, you may be best suited to taking a step back. Being informed of updates sounds like business logic, not something you'd want to make explicit in your data layer. If you already manage the software that adds to your database, I'd probably recommend implementing a push notification system there, maybe using signalr, maybe something less heavy. If you don't manage the software, you'll have to do something with the database, but keeping that clean architecturally sounds like a challenge. Have fun! 
Agreed. OP may want to look into event driven architecture and using EF in event handlers.
Thanks! In SQL Server, I think it creates triggers that delete themselves after sending the message. I wonder if that's the right way to do it here or if I should just tell people to create normal triggers. 
Question 7 is actually impressive. There is a problem with literally every single line of code excluding the braces.
PostgreSQL? Looks like it has the full set of before, after, and instead of triggers. https://www.postgresql.org/docs/10/static/sql-createtrigger.html
I think the lds is just LDAP protocol vs the non standard proprietary ds protocol.
I think you can minimize your own confusion by doing two things: 1 Start your learning by searching specifically for ASP.NET Core 2.0. That 2.0 part is important. Yes, it’s brand new (just went RTM in August of 2017). But anything written about it will work, and it’s the first version of .Net Core that Microsoft recommends for production use. 2 Understand the history of .Net Core. They started with the old Visual Studio CSPROJ format for project files, because it was convenient. They then tried a JSON format, only to realize there was too much tooling (of their own and in the industry) to make this practical. They finally then moved back to an abbreviated CSPROJ format that doesn’t need you to list all your source files explicitly. This addressed the main objections to the original format, while allowing existing tooling to continue to work with minimal changes. Our team just moved a series of 12 or so WCF services (around 55 methods) to ASP.NET Core 2.0. We started in September 2017, around 1 month after it went RTM. ASP.NET Core is definitely Microsoft’s go-forward direction for server-side web development, and .NET Core 2.0 is the framework getting all their development. Having one unified engine replacing both WebAPI and MVC is awesome, and resolved a lot of my confusion around having separate engines that were so similar. And Microsoft supports it on Mac and Linux. And AWS just announced full support for ASP.NET Core 2.0 in Lambda :-)
I've said it before and will do again, as a .NET developer who hates getting his hands dirty with Angular, this is by far the most exciting thing that is happening in web development right now. If you are a front end developer and have yet to do so, please watch Steve's original demo from last year. If the end product is anything like that demo, we are all in for a much more pleasant front end development experience.
Monad is a way to develop software standing on one leg. Some say that it is great but I prefer sitting or occasional standing on two legs. /s 
I recommend Microsoft's UWP OCR. It worked a lot better than Tesseract for me. 
Sql notifications mean you have to give the user all kinds of crazy access. I tried and never could get it working with our security team's rules...
Something about "make this more object oriented" rubs me the wrong way
I don't know of any way, personally. There may be one, but I'm not sure what you'd need it for. I'm not saying there can be no reason, but at that point you may have to write native code that interfaces with the CLR.
I used ObjectLayoutInspector in my projects and was comparing the results with the layout I was getting from the profiler and the results were pretty accurate. I think you **can have** the same results as !ObjSize provides but most likely the solution will rely on CLR profiler API (https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/profiling/profiling-overview#profiling_api) that lower level than the one used in the ObjectLayoutInspector. 
quick question: can i use asp.net core 1.0 ? because i have god visual studio 2015(2017 lags really hard on my pc) and 2015 supports only core 1.1 max so.. any advice?
!ObjSize does your third trick, does it not? (Adjusted for 64 bit execution if applicable).
The [null-conditional operator](https://msdn.microsoft.com/en-ca/magazine/dn802602.aspx) is quite similar to the [Maybe Monad](https://hackage.haskell.org/package/base-4.10.1.0/docs/Data-Maybe.html), a particular kind of Monad from Haskell. Maybe values are basically values that may either exist, or are null. As an example, `(Just 42)` represents a Maybe value that is just the number 42, while `Nothing` represents the fact that this particular value of type Maybe is "null" or not present. The C# example given in the MSDN article: public static string Truncate(string value, int length) { return value?.Substring(0, Math.Min(value.Length, length)); } Roughly translates to the following in Haskell, using the Maybe monad: truncate :: Maybe String -&gt; Int -&gt; Maybe String truncate value length = value &gt;&gt;= (return . take length) The binding strategy (the &gt;&gt;= operator) for the Maybe monad is to first take a look at whether or not the value is present (i.e. it is not of the form `Nothing`, but rather something like `Just "Hello World!"`). If the value is present, execute the bound function on the actual value. In the above example, we'd take the string `"Hello World!"` out of the value `Just "Hello World!"` and run it through the function `(return . take length)` which takes a prefix of length `length` from the String `value`. We `return` the result of `take length`, which repackages our whole result into another Maybe value. In this example, the value of `truncate (Just "Hello World!") 5` would be `Just "Hello"`. If the value is Nothing, we don't do anything. We immediately return Nothing. Compare this to the behaviour of the C# example in the MSDN article linked above.
If you mean that you want to update the tables when a row is changed in the database look into signalR.
Yeah none of this shows that a candidate can think for themselves or be useful. It just shows you have a fresh out of school new blood, which will require a lot of moulding and training over the next few months. I guess some places prefer that, but I look for experience.
I used to have a list of about 250 questions on a variety of programming topics. (C#, HTML, CSS, Javascript.) I would ask a few from each category at each interview. The one that I quickly learned to ask everyone was: &gt; What's the difference between an interface and an abstract class? Many people didn't know. Many people got them mixed up. One person very confidently told me there's *no* difference, and she stuck with that answer when I essentially asked her if she was sure. (To my great disgust, my boss's boss *hired* her.) We used to have a set of practical exercises which required the user to write a small actual program. (It didn't have to be working code, we would accept pseudocode, but they had to demonstrate that they understood the logic.) They weren't easy to come up with, so we had about 5 of them and usually we'd ask no more than 1. 
Reading my reply back, it reads very sarcastic and that wasn’t the intention :) I’ve been in the same boat and what I really should have said was perhaps in TDD and greenfield (unit) dev it’s possible. I too, have inherited god awful systems with no tests and had to pick my way through what code to test. 
Regardless of how I felt about the *appearance* of quality versus *actual* quality, for me the interview needs to change as I advance as a professional. When I was pretty junior I expected to get a programming test. As a senior person, I kinda expect to get a couple questions to make sure I'm not clueless, but I expect most of the questions to be about my experience and portfolio, so if I feel like I'm getting a programming test I'm basically going to think "these people aren't competent to figure out by interviewing me and checking my references and asking me a small number of technical questions that I'm sharp", and I won't take a job there. 
&gt; Write some code that could be described in Big O notation as O(3) 30 years ago in college computer science they didn't teach Big O notation, and in 30 years of professional work I've never once needed it... so if an employer asks about it, I basically think "these people care more that I can talk the talk than that I can walk the walk", and I won't work for them. (And yes, I turned down interviews with Amazon over that.) 
Enrico Buonanno wrote excellent book about Functional programming in C# - https://www.manning.com/books/functional-programming-in-c-sharp and here is repo for this book - https://github.com/la-yumba/functional-csharp-code
Not to mention the question doesn't lend itself well to what exactly a solution might entail. I could easily rewrite the Service class to return a boolean and suddenly no more switch statements.
You can, but there were a lot of improvements in 2.0 and you would be missing on some features. Net Core 1.1 support ends by July 2019 according to their lifecycle.
[removed]
You didn't realize your "typo" even after someone highlighted the line and told you explicitly it's wrong?
what if companies using those questions actually have no idea and are looking for someone who is able to help them out and teach them
I feel that most of these are kind of off base, testing the wrong things, being of questionable quality and often in ways that aren't directly conducive to testing the interviewee themselves, and that you may be missing some of the required knowledge to write proper tests for people. Honestly several of these would be likely to put me off working for you.
An Official Experiment
I really liked [this](https://ericlippert.com/2013/02/21/monads-part-one/) series by Eric Lippert. Instead of trying to describe what monads are, which never worked for me, it leads you through the reasoning and sorts of problems that resulted in monads.
You may use SqlDependecy to subscripted the event https://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqldependency.aspx Or db model implement INotify imterface
Interfaces *are* abstract classes! There's a difference in C#, but not so much in other languages (e.g. C++ where interfaces are pure abstract classes).
Many of these questions are so specific to C# that candidates who don't have lots of experience with the language, but would be able to pick it up easily, will fail the test. Question 15 is of no use. The answer you are looking for here has no place in modern computation (outside of some extremely niche scenarios that would not be in C#). Swap the values with a temp var and be done with it. More readable and maintainable. Also, you have to declare the parameters as being passed by ref otherwise the changes will only be on the local stack copies. Any mid-level or senior candidate will realize with this one question that you care about whether they know stuff that is useless and don't actually want to know whether they can work with real code. As a senior dev candidate, I would expect questions higher-level than bit twiddling. Perhaps a better approach would be to convert these into open ended questions. Give examples of some of these scenarios and then ask what are the pros and cons to doing it this way. Why would someone ever want to avoid the large nested ifs? Are there ever cases when it is better to use if ladders? Why use lazy loading? Why avoid lazy loading? You will learn more about their competency by listening to their reasons. As a senior dev, they will need to explain their reasoning to other devs on a daily basis and actually convince others their way provides more business value.
All good, I didnt really read it like that. There is a huge anti TDD sentement on reddit for some reason. I do the same thing with existing systems, there is gain but its a hard slog compared to greenfield and TDD.
Conceptually it’s important that people understand that the timing of something scales as O, O2, Ox ect but for most programmers in my experience would just say scales linearly or exponentially, I’m sure in certain fields though they my resort back to using proper terms
You just gave me a good idea, I’m now going to make future tests out of unanswered stack overflow questions that have a bounty on them!
Quite scary someone doesn’t know the difference between those 2 things, that said if they were a grad I wouldn’t be that surprised
Sure, lets do it your way... :)
[removed]
+1, great series and you reminded me to check out his blog again, It had fallen off my radar :)
It would need to be done from the SQL server outwards, via a trigger or using the SQL server Service broker or a bespoke bit of code which attaches to an event framework, like SignalR. Instead of constant polling, there could be a service running on a thread which checks the database periodically and updates an observable object. Really depends on how quickly you need to know of a row being changed.
Great idea! Maybe start with something like "Proof that P != NP". Could even get some nice cash out of the interview
You should add a README.md to your project, that way you can also directly add a description and the screenshot.
As with any language, you only need maybe 5% of the features to write almost any program. You learn the rest as you go. 
okay so im literly f**ked 😂 well im still in hogh school and i cant afford tobuy new pc so i guess i will have to work with lags :( and also one question, is there some extention which lets me use core 2.0 in visual studio 2015? or which ide?text editor can i use instead of visual studio 2017? 
Are you using sql server or azure sql server? Sql server you can use signal r and the sql broker as other have mentioned. If it’s azure it gets tricky. Azure doesn’t offer sql broker so if you can I would update your save service to also dump to a read only cluster like elastic search which would take strain off the cloud service from polling. But this is a lot of work. 
&gt; I didn't know that. I thought "The 'd' is taken so they picked another letter." I'll be able to remember the 'm' going forward, thanks. Fun aside, C# converts the SQL money type to decimal.
Thanks for the help. So, my latest trouble has been getting the tesseract .net wrapper to work. I think it's because of issues with the Visual C++ 2015 runtime (as I have VS 2017 installed). So, after trying a bunch of things the other day, I'm now uninstalling 2017, and installing 2015 (for anyone coming across this later, this link will help you download VS 2015 https://stackoverflow.com/questions/44290672/how-to-download-visual-studio-community-edition-2015-not-2017). Also, thanks for the sample code to convert the screen capture to a tiff!
Nice. Yeah, again, because I think (I hope?) the OCR I'm hoping to do is very easy (not a lot of text, monochrome already, a printed font, not handwriting, etc.), I don't need the latest and greatest in OCR tech. I'll give this a look.
 Just trying to understand the problem. If the constructor puts the object into the correct state, why do you need to serialize and deserialize the class. Is there additional data that gets added? I guess what I'm getting at is why not just create a new instance on the client rather than serializing the object?
I'm inclined to think that a bool defaulting to true is counter-intuitive. I thought that the framework design guidelines would have called for an enum instead of a bool parameter. Given that there is no sync context in .Core, the default is effectively ConfigureAwait(false) which means the 2 runtimes don't have the same default so all code should be littered with ConfigureAwait(false). 
This is all just guessing, but I think it's because they have their own automatic systems for things such as mirroring, replication, multi-availability-zone/failover, etc, so they disable access to anything related to change tracking or any of those features to prevent users from messing with settings that would potentially break what their wrapping services such as RDS need to manage. 
Um, how is that supposed to work?
Here's another option no one has mentioned. You can put a trigger on a table. Then have that trigger fire some code (C# in SQL Server) that send a message to a message queue (MSMQ, RabbitMQ, etc.) I did that on one project and it worked quite well.
This sounds much easier to setup and change than SqlDependency
I never implemented it myself but have been looking at it for my current project. It can be set up so when there is update in SQL it will push update to the clients browser.
Yes they save cards. Stripe is great. Stripe does not belong in a web browser.
What?
I would say that the code is very relevant
If I encounter some new language that's simply enormous, but I can by with only 2% of it, I don't think I would know that until I learn a lot more than 2% of the language. A really huge and complex language can be very overwhelming at first.
I dont think returning 0 in a void method is compiler safe... Also post the code like @IneptAdeptDeveloper said
But at a guess possibly not got the correct version of .NET installed 
Nope you have to override the controls base, Have linked a MSDN article on his SO question 
Yah know, I see these posts on Blazor nearly every day saying basically the same thing... And every time I go and read it because this really feels like a glimpse at a entirely new and rich world of web dev with Web Assembly.
That JSON format is awful and is not designed to be mapped to a static class. You'll need to use a JSON parsing library and unpack the field names and values field by field. I don't think there are many simple tutorials out there for doing that either, since it isn't a typical or desired way to use JSON.
I believe you can set up SQL dependency and then a client will update if you make a change in SQL. https://www.codeproject.com/Articles/874240/SignalR-Database-update-notifications-in-ASP-NET-M At least I think that can be done.
So it looks like you have funky object names ("ST31000524AS|ST310005 24AS|ST1000DM003|1000DM 003|931.510956287384"). Looks like they are wanting to do use a key value pair. See https://stackoverflow.com/questions/29632593/parsing-json-key-value-pairs-with-json-net?lq=1 This might work (I have not tested it) : JsonConvert.DeserializeObject&lt;Dictionary&lt;string, Dictionary&lt;string,string&gt;&gt;&gt;(json);
It's a very bad format for using for deserialization, and for JSON Standards. Where this JSON is from? Is there any documentation about what those keys mean? Anyway, if you are using Newtonsoft, you can try using custom converters.
That's true.
Are you referencing dlls? If so, you have to copy .exe, .dlls and .config files together to make it work. 
using Newtonsoft.Json.Linq; sampleJson = ""; string json = File.ReadAllText(sampleJson); dynamic stuff = JObject.Parse(json); foreach (var position in stuff.partitions) { foreach (JProperty weird in (JToken)position) { MessageBox.Show("&gt;&gt; " + weird.Name); foreach (JProperty val in weird.Value) { MessageBox.Show("&gt;&gt; " + val.Name); MessageBox.Show("&gt;&gt; " + val.Value); } } }
This has done it, thanks so much!
SSRS is the easiest to be honest.
\&gt; at symbol and not /u/&lt;username here&gt; wew
So I agree with u/TheEvilPenguin in that, the best way to learn monads are to discover them. It's best to see how they're helping you with rather than being told "this will help you write code". In the end, when we're talking about monads and programming, monads are just a design pattern that help you. Also, just to reiterated what u/ev0catus has said, Nullable&lt;T&gt; is similar to maybe monad in the sense that it allows a type to be null. It's lacking some features that a Maybe&lt;T&gt; monad would have, but it may be that Nullable&lt;T&gt; is what you're looking for. I find myself reaching for Nullable&lt;T&gt; more and more because I don't need to write out a full blown monad. With that said though, I've recently added a Maybe monad to a C# project that I was working on, so I figured I'd share it since you were looking for a real world example. As a disclaimer (becuase I'm sure someone would point it out), this is not a full monad. In category theory, a monad needs to have two transformations, but this implementation only has one. The other transformation is irrelvant to this example, and since I'm writing code for a real world application, I had no need to write the other part because it would never be used. So, now onto what my problem was and an example of how implementing a maybe monad helped. My real world problem: I have an application that makes a request to an API for currency conversion rates. I send off a request to an API, I get the conversion rate (which is a decimal type), and then I pass that conversion rate value around to a few functions. However, the application I'm working on allows the user to type in *any* three letter country code for a conversion rate. So Joe Blow could say that they want to convert USD to YZZ. Well, YZZ isn't a currency code that's recognized by the API that I'm using, so I wouldn't get anything useful back; yet, once I get a value back, I'm passing it around to a few functions. And besides just this user error, there are other things that could go wrong! There could be an error while connecting to the API or there could be an internal server error with the API that I'm requesting, all on top of the fact that the user could input a garbage value. So what do I do if I get an error instead of the deicmal that I was initially requesting? This is where the maybe monad comes in. I'm expecting a decimal value to be returned when I make a request to this API, but we just indentified some cases where I'm not getting a decimal value back. There are cases here where I could get an error back. So I want to construct a type that accomodates both a decimal value and the possibility for error. The maybe monad would allows me to do just that. It allows me to expand on the possible values of deicmal. Let's briefly talk about types. A type is a collection of values. So what makes up the decimal type that I'm expecting? It's a number anywhere between 79228162514264337593543950335 and -79228162514264337593543950335. That's quiet a range of possible values. But I want to **extend** the range of possible values on the decmial type and say that "this decimal could be any number between -79228162514264337593543950335 and 79228162514264337593543950335, **or** it could be null." The maybe monad allows me extend the decimal type in this way, and say "this is a type that is either a number with a precision of 28-29 significant digits *or* not a value." So why is this useful in this context? Because now in my application, instead of just saying that "I'm expecting a demcial value back from this request", I'm saying that "I'm expecting either a decimal value back *or nothing* back from this request." Now I'm doing some error handling through my types. And this is powerful, because now I can write one function that does my null checking for me, without having to manually write my error checking code for each function that receives the deicmal value that I retreived from the API. So I started by building the monad. I started with an abstract class called Maybe&lt;T&gt;, and I created two other classes that inheirt from it: Just&lt;T&gt; and Nothing&lt;T&gt;. So if something is a Maybe&lt;T&gt;, that means it is either a Just&lt;T&gt; or a Nothing&lt;T&gt;. public abstract class Maybe&lt;T&gt; { public static Func&lt;Maybe&lt;T&gt;, Func&lt;T, Maybe&lt;T&gt;&gt;, Maybe&lt;T&gt;&gt; Bind = (a, func) =&gt; { // Cast the Maybe&lt;T&gt; Value that was passed in as a Just&lt;T&gt; // If it cannot be cast to Just&lt;T&gt;, then validJust will be null. Just&lt;T&gt; validJust = a as Just&lt;T&gt;; // If the cast is null, return Nothing&lt;T&gt;, otherwise pass the value // contained within Just&lt;T&gt; to the function that was passed to Bind. if (validJust == null) return new Nothing&lt;T&gt;(); else return func(validJust.Value); }; public abstract override string ToString(); } public class Nothing&lt;T&gt; : Maybe&lt;T&gt; { // This doesn't have any members because Nothing&lt;T&gt; // a failure in computing something. public override string ToString() { return "Nothing"; } } public class Just&lt;T&gt; : Maybe&lt;T&gt; { // This has one member, anything of type T. public T Value { get; private set; } public Just(T value) { this.Value = value; } public override string ToString() { return "Just ("+ this.Value.ToString() + ")"; } } Nothing&lt;T&gt; is my "null" type and Just&lt;T&gt; represents a value of type T. Nothing&lt;T&gt; doesn't hold any value while Just&lt;T&gt; does hold a value. The base class of Maybe&lt;T&gt; has a function called Bind. Since Just&lt;T&gt; and Nothing&lt;T&gt; are inheirted from Maybe&lt;T&gt;, either Just&lt;T&gt; or Nothing&lt;T&gt; will work with my Bind function. Now both my inherited classes can work with Bind. Now the Bind function is what's saving me headaches here, which is why I wrote this whole thing. Bind is a function that takes a Maybe&lt;T&gt; (so any inherited class of Maybe&lt;T&gt;), another function that takes a value of T and outputs a Maybe&lt;T&gt;, and returns a Maybe&lt;T&gt;. Remember earlier when I said I can write one function that does my null checking for me? This is what Bind is doing for me. It's doing the error checking for me. I pass a Maybe&lt;T&gt; and a function to Bind. If the first argument to bind is Nothing&lt;T&gt;, then Bind just returns Nothing&lt;T&gt;. If it's Just&lt;T&gt;, then it will return the value from applying the function to the value inside of Just&lt;T&gt;. Check out my comments in Bind for more information. So now let's look at the snippet of code where I'm parsing the response from the API: private static Maybe&lt;decimal&gt; parseRate(string rate) { if (decimal.TryParse(rate, out decimal exchangeRate)) return new Just&lt;decimal&gt;(exchangeRate); else return new Nothing&lt;decimal&gt;(); } So this function takes the rate, and parses it. If it was successful, then it returns a Just&lt;decimal&gt; containing the rate. If it failed, then I return Nothing&lt;decimal&gt;. Now that the parsed rate is of Maybe&lt;decimal&gt;, I don't have to check to see if it's null or not because Bind does it for me. Here's an example later on where I can just multiple the result from parsedRate without having to check to see if the value is there or not: I can just pass the parsedExchangeRate to bind along with the function that I want to preform on it. As a quick side note, SourceAmount is a member variable of the class that contains this method. private Maybe&lt;decimal&gt; calculateRate(Maybe&lt;decimal&gt; parsedExchangeRate) { return Maybe&lt;decimal&gt;.Bind(parsedExchangeRate, x =&gt; { return new Just&lt;decimal&gt;(x * this.SourceAmount); }); } Now the output of calculateRate is Just&lt;decimal&gt; if the value that was a value that was passed to calculateRate was Just&lt;decimal&gt;, and the output of calculateRate is Nothing&lt;decimal&gt; if value passed to it was Nothing&lt;decimal&gt;. From this example, you can see that you don't *need* monads to program. They aren't necessary. You could have written this without writing a monad accomdate failure. But look at what it's done for me. I don't want to write the error checking code over and over again because it's tedious. I wrote the error checking code once in Bind, and bind takes care of the checking for me. I can now compose functions using Maybe&lt;decimal&gt; over and over, and not worry about whether or not I'm error checking correctly because I've written once. On top of that, since Maybe&lt;T&gt; is a generic, I can extend *other* types just like I extended the decimal type. The whole point is that I saved myself some time and headaches. I wrote my error checking code once, I'm confident in the sense that I know it works properly, and now I don't have to write it again. It can be re-used with other types, and I can easily compose other functions with these new extended type I've created.
Given that I was interviewing C# programmers for C# jobs, they should damned well have known the C# definitions. In languages where there's no difference, *they don't have two terms for it*.
I think that this JSON was created by somebody who was told that there is "this JSON thing with brackets and other things". It looks bad but it is not as bad as some AI blockchain designed on the napkin.
Not sure why it's not working for you, but just wanted to let you know I'm using Tesseract with VS2017
I didn't know this existed. This is the way to go!
No readme?
Also, use the github releases system instead of MediaFire 
As others have said, code will help. But you should also check the Event Viewer in Windows, as it will often contain more info on the crash. 
Without refactoring the code base imo your only option is to write a custom serializier/deserializer, init the target object and use reflection to only serialize the diff. Init and apply on on otherside. Imo thats just as painful as a refactor.
Yeah, I'm coming to the same conclusion the more I look at this. I'm actually surprised that Newtonsoft hasn't fixed this yet, as it seems like a pretty significant problem, and a pretty simple fix. 
To be fair this is an atypical pattern atleast to me. Serialization models shouldn't really do anything in the constrictor other than default stuff, init collections etc. Imo you should have a recipe factory that returns objects inited to the different recipes and do that by composition. Or something similar, thats my take atleast. 
Banshee
Familiar with Banshee on linux, however I am not seeing anything resembling a c# binding
I recommend you try Stimulsoft :-)
the intended audience is compiler and maybe tool authors, not mere users of the language 
Try running it as admin. Seems to be a rights issue.
try moving your project to a windows folder like c:\projects
That sounds sensible. The project I’m opening is in OneDrive (but as I said, worked perfectly with the same disk image but different VM). Will try that in the morning, as I’ve just switched everything off for the night.
Darn! Can you access 'Visual Studio 2017\ArchitectureExplorer' through the OS? 
Ohhhh my :D haha going to have to try "reading" (; Thanks
Its actually a skinny stick figure, and a less skinny stick figure.
Interesting step-thru of the design process. Nice. 
I don’t know if this is the most performant code, but the simplest strategy I can think of is using a custom comparer. For example, List has a sort function that can take a comparer function that takes in two objects and returns -1 if the first object is smaller, 0 if they are the same, and 1 if it is bigger. Now with your scenarios, you are basically sorting first by some category A then some category B (can be extended to any number of categories). What you would do is write a function that returns an int and takes in two of your objects to sort. In this function, you have an if, else if, else statement. If in terms of category A the first object is smaller, return -1. Else if it is larger, return 1. Else, you write the same if, else if, else statement but for category B. For every category, you nest them in order in the previous category’s else branch and in the last else, you return 0. Now this method requires a lot of nested ifs and is not customizable, but with lambdas, there is a potential way of doing it that’s customizable, but can be quite a pain to setup. First, you need a delegate type that takes in two objects you want to sort and returns an int, just like above. Then you need a sort function that takes in a list of the above delegates and two objects of the type you want to sort, and returns an int. In that function, you foreach loop through each delegate and run the delegate on your two objects. If the return is not zero, return the value of the delegate. That’s it. Then outside the foreach loop you return 0. Now, you need to create functions that compare each field like health or type. Maybe a lambda like (a, b) =&gt; a.Health.CompareTo(b.Health). Add these to a list in the order of importance. Then call yourList.Sort((a, b) =&gt; MySort(list, a, b)). I’m on a phone so I haven’t written almost any code, but there are many ways and simplifications to write this. In short, make a comparer function that compares the most important attribute first, and only if that’s equal, compare the less important ones in order. Then use this with a sort function that supports custom computers. Hopefully this helps or someone else can explain this in a simpler way with code.
Great solution, I like how you wrote up your whole process too.
Parallels has an add in for VS, not sure if that is needed for this issue or not.
DevExpress has pretty good documentation/support, if you can afford it. I can generally accomplish what I need with that. I have written literally hundreds of reports with DevExpress tools, and compared to Crystal Reports, the learning curve was quite low. If DevExpress is not an option, I would go SSRS over Crystal Reports.
Thanks this one is really nice. Will have to try it out myself.
This is the approach I would use.
maybe like this? (orders strings by length then last digit and then count of digits at all) void Main() { List&lt;string&gt; bla = new List&lt;string&gt;{"ab3", "ab1", "ab2", "123", "zz54", "zzz4", "z414", "aaaaaaa4", "wurst5"}; bla.Sort(new PriorityComparer&lt;string&gt;(new Func&lt;string,string,int&gt;[]{ (a,b) =&gt; a.Length.CompareTo(b.Length), (a,b) =&gt; Convert.ToInt32(a[a.Length-1]).CompareTo(Convert.ToInt32(b[b.Length-1])), (a,b) =&gt; a.Count(x =&gt; char.IsDigit(x)).CompareTo(b.Count(x =&gt; char.IsDigit(x))) })); Console.WriteLine($"[{string.Join(", ", bla)}]"); } class PriorityComparer&lt;T&gt; : IComparer&lt;T&gt; { private readonly IEnumerable&lt;Func&lt;T, T, int&gt;&gt; _priorities; public PriorityComparer(IEnumerable&lt;Func&lt;T, T, int&gt;&gt; priorities) { _priorities = priorities; } public int Compare(T t1 ,T t2) { int r = 0; foreach(var p in _priorities) { r = p(t1, t2); if (r != 0) return r; } return r; } } outputs `[ab1, ab2, ab3, 123, zzz4, zz54, z414, wurst5, aaaaaaa4]` (p.s i didn't even read your suggestion to the end but it seems we had the same idea with the foreach-delegate-loop , nice!)
You could use one b-tree index to represent each property. When an entity is updated, you'd have to update the index. 
For those using .NET 4.6 or later, there's now a [built-in method to get a Unix timestamp](https://stackoverflow.com/a/26225744).
Damn, I thought some library just added that as an extension method when it popped up (annoying). Happy that it's now built in.
Thanks mate!
Cool, I had no idea. Awesome.
Thanks! It's a pain in the neck but hopefully helpful to build up the picture in front of someone, instead of just dumping the entire code base.
I really like the attributes!
This isn't really C# related, but you did say other tools, so I'm throwing Power BI's hat into the ring. This thing is a beast and provides some of the most powerful reporting I've ever seen/developed. The amount of power a user gets over their reports adds so much value to anything you deliver. 
I'm pretty happy with CLR in the database, if I'm using SSDT to deploy it. Otherwise it is a pain in the ass.
Although I really liked the walkthrough, I don’t think handling this sort of thing in the application level is a good idea. 
I can't find any such folder...
Doesn't look like it. It's not included in the "home" version. From what I can tell, it simplifies the configuration to run your .NET code on one VM and debug it on another, which is not what I'm trying to do at all. I can't even open the project successfully, let alone debug it on a different VM.
Fixed - see my edit to the OP.
Hmm. What about enemies.OrderBy(e =&gt; e.stats).ThenBy(e =&gt; e.moveSpeed).ThenBy(e =&gt; e.distance) 
Step 1. Refactor constructor by adding (bool addDefaults) parameter. Resharper or Visual Studio would change it automatically for entire solution. Step 2. Add new constructor that does not add any default values. Step 3. Have a beer. 
Do you never find that sql gets to be very hard to maintain though? 
You can use Newtonsoft.Json to convert the json. Use the following classes as models: public partial class Root { [JsonProperty("partitions")] public Dictionary&lt;string, Partition&gt;[] Partitions { get; set; } } public partial class Partition { [JsonProperty("1")] public string FirstElement { get; set; } [JsonProperty("2")] public string SecondElement { get; set; } [JsonProperty("3")] public string ThirdElement { get; set; } }
Hello
Interesting. Would you do it at the web server level?
I usually don't have to worry about this kind of stress on my application, because it's covered by the IT department. They have hardware and software designed specifically for these kind of things. Spending application resources to handle some custom rate limit is a waste IMO. It's OK when someone has a garage project, developing things alone. But when it's go time and you actually need to sit down and think how you will handle throttling and other attack vectors, you will turn to some tried and true solution and not start writing your own code and leave it up to your fragile little application pool in IIS (I know, we have .NET Core, too) to take the hit.
I filled in the form but wanted to add that I think when to use a library is a judgment call made within each team (rather than from a tool). This decision will always have to be in based upon: * The organisation - using a common toolset * The ecosystem - For instance using a templating framework in JS or using JSON.Net. Both are external dependancies but don't 'feel like' it as they are so common. * The complexity - Never roll your own for security/crypt/passwording. * Your production criteria - Some insist on no boilerplate at all. Personally I hate using a library as its another dependancy to manage and fight. But the combination of the above makes some always make sense in the right scenario.
Thanks, all bets are leaning towards Signal R
What are some of the tools out there to help with these sorts of things?
Or your referencing the wrong version of the lib, run this in the package manager window Install-Package log4net -Version 1.2.10 
I don't really see how hardware could help solve this. Or do you mean that your IT department would handle these sorts of this outside of your application/api but inside the webserver? Is there an application that could handle such rules for you? Where would that application store the specific rates and # requests per client, in-process? How would it handle different rates for different clients? How would it handle different rates for different calls inside the api? I find it really hard to imagine this working at some level _other_ level than the application to be honest. Unless it's some kind of really basic rate throttling or unless you are actually talking about DDoS protection; which this blogpost is really **not** about.
Damn that's some ancient shit. I think it is an old school WebForms "Web Site Project" ... in VB.NET no less. https://msdn.microsoft.com/en-us/library/dd547590%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396 
No wonder I've never seen it before :/ Thanks for the info! I had no idea what to even search for.
Nice write-up! For those of you who are interested in this, there's also a NuGet package, [AspNetCoreRateLimit](https://github.com/stefanprodan/AspNetCoreRateLimit), that helps with this sort of thing.
A project-less Web Site. The good news it that you can: * Convert it to a web forms project. * Create a new MVC site and just copy the old files into it. (I've tried this on an old Web Site that we maintain, but haven't put it into prod yet). I don't know if the VB in aspx would be a big problem if you wanted to use C# for the MVC. 
Thanks for this brilliant feedback. I'll test this out and update the article when I get a chance. 
Oh my, those questions are not great, reality is complicated. We re-use our own libraries, so we both implement it and re-use it.
Are you adding a project reference or browsing to the dll? If you are using Visual Studio and .Net Framework, the project reference should work when you build the sln on other machines.
Was my first inclination, but `Dictionary&lt;string, Dictionary&lt;string, string&gt;&gt;` is better.
Race condition. Anything can happen between taking an entry out of concurrent dictionary and putting it back it. AddOrUpdate method is created specifically to tackle this problem, see [official docs](https://msdn.microsoft.com/ru-ru/library/ee378665(v=vs.110).aspx) There is no guarantee that RequestCount would be incremented exactly twice if two threads enter IncrementRequestCount() simultaneously in your original code.
Just saw this on /r/watchpeoplecode and thought this sub might be interested.
Removed: Rule 7.
Alright, then I'll just have to move from transaction to source token. Thanks for re invalidating! Stripe in the future will be used in different applications that I wanted to test out. This was just a way to see if it actually works. 
Yep. now i see it
If you go the MVC route, there's also the possibility of adding a new C# class library to the solution, reference it from the VB project and write your new code there. This option adds some complexity, but also allows you to slowly and incrementally migrate your project to C#.
Wow that's about as enterprise-y as it gets :-) Well if you have such an enormous API / requestcount I guess some benefits outweigh the additional services and configuration needed to make it work. Still, I think something like this is overkill for a lot of situations. And I dislike splitting the logic on the api usage from the api itself. But that could be just me.
You can try to create a single calculation of value were each attribute affects the weight differently, then choose the action with the highest weight... but, this removes absolute order of importance... like... maybe the weight is (HP+1.5Dmg)/(dist/spd) this would pick modify the weight of distance by the unit speed (So faster units are effectively considered 'closer') and target prefer higher dmg units over higherhp units at similiar distances... and you can tweak the weighting algorithm however you want. 
Yeah we an incumbent telco in Europe and we move to SOA to ease compliance amongst other factors. Once you reach into the thousands services it pays back :)
I can imagine! That's a whole other ballgame, it's makes sense splitting authentication from service in that case.
I wouldn't mind watching this from the start. Turned up late and I don't know what they are building If it turns into a VoD let us know 
So what happens to users behind a proxy? They will all show up to your service as one IP. What happens when you deploy the code in multiple servers behind a load balancer? You are basically multiplying the allowed transactions by the number of servers.
Thank you for this. I am currently putting together something like this and will write again once I am closer to completion. I really appreciate all the information
It's great that there is work for a .NET Core GUI toolkit but I worry that it will be yet a 3rd different implementation of XAML that will cause more headaches (WPF XAML and UWP XAML share similarities but aren't the same).
The "good" news is that WPF and UWP will probably never support cross-platform .NET Core so while developers may need to learn a 'third' WPF the toolkit itself isn't directly competing with them.
The issue is those coming from WPF and UWP may get tripped up. However, I believe Microsoft is working on XAML Standard. It would be great if they get that published and Avalonia could implement that.
What about this: foreach (var e in enemies) { e.param1 = e.stats; // First by stats e.param2 = e.distance; // Then by distance e.param3 = 0; // and nothing else } enemies.OrderBy(e =&gt; e.param1).ThenBy(e =&gt; e.param2ThenBy(e =&gt; e.param3)
Could you elaborate on what bothers you the most? It's hard to recommend solutions if the source of your frustration is not clear. What do you feel could be improved upon?
Wow. You mightov saved me massive amounts of time and headaches. Will post tonight after I get it to work. Many thanks. The only thing I can think about is OrderBy creates a new list I believe? And I will be using this a lot, and frequently. But I'll worry about that afterwards. Thanks once again
Electron app? Also I think UWP apps can be designed with web technologies 
About the proxy, that's true, you'd have to make sure that the IP address is forwarded on properly. For multiple servers you could swap out the ConcurrentDictionary with a database or Redis store. 
Styling/events - like just a single item ("parent node") without affecting child nodes, single click toggle in treeview, copy paste in datagrid cells without specifically clicking to go edit and selecting text with keyboard shortcuts. These are some of the recent annoyances. Some are possible through lengthy hacky ways and overrides and codebehind. 
gotta take a look at it.
XAML and WPF I have come to absolutely hate for the exact reasons you specify. I don't know if they changed it for UWP apps, but not being able to copy/paste a TextBlock without having to write code is insane. 
Click on the streamer's user name (csharpfritz) and you can get to all the videos: https://www.twitch.tv/csharpfritz/videos/all. The playlist will let you replay it from the start. One of the reasons it caught my attention is because csharpfritz (Jeffrey Fritz) works for Microsoft and does a lot of Channel 9 and Microsoft Virtual Academy videos.
Checked uwp - it's still the same bad xaml overall - with even less out of the box components and windows 10 only. Taking a look at electron - sounds promising - chrome api, js, html, css.
Array covariance.
He live streams every Tuesday, Thursday, and Saturday morning. He has a lot of great .NET content he's been putting out over the last couple months.
The Slack desktop app and even Visual Studio Code are built on Electron, so it's well proven.
https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/goto
At least the skills transfer between them. You could be learning the web framework of the month.
Programming in general is for disposal programmers, either fossilize in a specific tech, or embrace following the next big thing every couple of years.
i noticed there is a separate Electron.NET - is this some bootleg/homemade wrapper or official .net branch of it?
I don't know if you would call them features, but here goes. That `ICollection&lt;T&gt;` and `IList&lt;T&gt; don't implement `IReadOnlyCollection&lt;T&gt;` and `IReadOnlyList&lt;T&gt;`respectively. This introduces ambiguity when trying to implement extension methods, as well...!`List&lt;T&gt;` implements all four of them. Unfortunately it would be a breaking change to fix it. That `GetHashCode()` is a member of `object` and not on some sort of `IHashable` interface. `IDictionary&lt;TKey, TValue&gt;` would then be constrained to `TKey : IHashable`. But in general I really enjoy to program in C#. 
Really? You want to learn one technology and stick with it forever? Compared to most other industries software development is in its infancy. Adapt, specialize, or consult on legacy codebases. 
None of these are really issues of the language. They are issues of the .NET-Framework and the BCL.
Looks like electron is not it. It's more like running web code as desktop app - but i still need the power of C# to deal with complex binary files (frontend web languages completely fail at manipulating and dealing with binary data/ byte arrays)
Mentioning Dictionary, the lack of being XML serializable without implementing it yourself. As mentioned though not really a C# language issue.
Looks like it's more about adding a browser into a app. But does it allow accessing C# classes, properties, values?
NoSQL had quite the bumpy ride to get to some stability too. And to be fair: data, on its interface well, is just data. There is inherently less volatility in durability compared to the presentation of said data.
I also heard that Avalonia had a more "css"-like feel to their styling, but I haven't tried it. A bonus is that it's cross platform as well, but not really ready forerious projects I think. I agree 100% with you. I'm a front end web dev and XAML is absolutely terrible for styling and so on. Everythign feels so backwards and old that I wanted to blow my brains out. The only thing that's decent is the grid system, but even thereit loses to plain html/css without doubt.
You could take a look at ammy.. Someone posted a link on this subreddit yesterday. Ammy has support for mixins and is terser in syntax than Xaml. There is also XamlCss on GitHub. Might also be worth a try.. The behaviours you are missing could probably be implemented as attached behaviours... doesn't sound _that_ bad to me. But what do I know. I started on php, did some JS, had to move to WinForms, Java/Spring, back to WinForms, some asp/angular/css, some Unity3d-Stuff, back to WinForms, to aspnet core and a WPF client and now back to WinForms again. WinForms sucks hardest. Not least because legacy code is usually bad and missing unit tests. Yeah.. WPF is verbose and clumsy in parts. But at least you can usually decently test MVVM code.
Yes, what you said. I posted a more verbose version of this before I read your comment.
One thing is that early on people wanted null reference types in C# thats recently just being added in C# 8
Use JSON instead!
You can specify multiple platforms which makes it better, but you still have to handle platform features 
Every chance I get :)
Nice, I'm going to have some time in a few weeks. I was going to look for a project to contribute to, I'd forgotten about them.
4th if you include Xamarin XAML.
4th if you include Xamarin XAML.
&gt;3rd different implementation of XAML 4th if you include Xamarin XAML.
If you're doing game development, then I'd highly recommend using an immediate-mode GUI library. I have a wrapper for the very popular "dear imgui" C++ library: https://github.com/mellinoe/ImGui.NET. I've used it to build an editor for an older game engine, here's a video of it in action: https://www.youtube.com/watch?v=KhaVsP66uew. There's also a [gallery thread](https://github.com/ocornut/imgui/issues/973) on GitHub where other people show the kinds of things you can build. Note that this is nothing like CSS or HTML -- those are much closer to XAML. This is an entirely different paradigm, but it's very, very good for game development.
Bad mouthing Lambdas? That's a paddlin'.
Implementing XAML standard is on our roadmap, but Microsoft hasn't published enough info on the exact requirements to implement XAML standard so we're basically playing catch up.
Yeah... Just don't
You certainly know more about the kind of stuff you'd be editing, but that sounds like exactly the kind of stuff that immediate-mode GUI is great at. Of course there would need to be some kind of comprehensible format or schema for the stuff you want to look at.
I think part of that problem is that anytime you start googling about async/await, you inevitably find blog posts or articles by Stephen Cleary. He's a bloody genius, but his tagline "async all the way" is very misleading for people who are just learning. They quickly (incorrectly) believe that async is simply better all around and thus should be the default way to do things. It also doesn't help that anyone poking into .NET Core is now seeing VS templates where large amounts of boilerplate async methods exist, even where they don'talways need to. You can pretty well tell when a person has given adequate and serious thought to the use of async/await for their needs vs someone who simply went around slapping a few wrappers and keywords into their code and started using it. Pluralsight is worth *way* more than it costs, especially for just this one topic. Source: been there, made those mistakes, had to ungefugcht my stupid self and my horrific WPF codebase. 
Linq is a double edge sword. I love it, but when you have to work in a language that doesn’t support it or you need to port code from C# to something else, Linq suddenly looks terrible. Speaking of Linq. I really hate the Sql Linq syntax. That feature needs to die a painful death. 
&gt; I really hate the Sql Linq syntax Oh I feel you man, It drives me crazy that it's go close to being familiar sql, but they changed the order of the entire statement to make it just annoyingly different. 
*non*-null reference types. C# has nullable reference types since version 1.
Could you elaborate? It's not much of an answer, by itself.
The fact is, you are out of your comfort zone. C# with WPF using XAML isn't old and infact is very easy to make very modern looking UI. I'm making a full screen kiosk app for an enterprise that has full 10 finger touch and follows the Android material UI design doc. You just need to learn how. I am a full stack developer as well, fully experienced with HTML 5 and CSS3. XAML is very much in the same way, just different syntax and a different concept. All you need to do is get used to it. Note also: WPF has hardware acceleration with directX if you need that. Writing themes and styles is right up your alley, I promise. Your other native option is WinForms, which is old. But it is entirely possible to build a modern UI. Just takes a lot more effort and is more comfortable for those of us who like backend. Doing something like electron is taking essentially the entire chromium project into your app for just UI, which is nuts. Sure it's possible, but there's a cost. Performance, size, and control. Don't listen easily try these beta UI projects unless youre not serious for long term support. Their project dries up, so does yours. Take the extra time and learn xaml more and understand how styles/themes work. There's also open source control packs out there too. You'll be happy you took the time. Your instincts are right about UWP. Unless you're targeting windows tablets, stay away.
Yep, it's just a browser control, only chrome instead of internet explorer. It's nice for controlled web environments but it brings a lot of files and bloats your project. Also, if you're building a web app in a browser in an app, just make a web app. That makes no sense.
I am not sure I understand what you mean. Why did you vote me down for agreeing with you and giving you a potential solution?
Eve with web frameworks you're good for at least 3-5 years after learning one. Pick Vue, React or Angular and just get to work.
Yes that too
Inconsistency of == operator. For primitive types it compares values. For classes it compares references ... except for string. Why? Why???? I want == to compare values and if I want to compare references then I can use object.ReferenceEquals(). I know it was a historical mistake but damn I wish I could have a switch that would disable reference comparison.
Heh. Remember this one. When I saw it first time I thought "cool". That was it. I have never seen it again anywhere.
They are calling the new feature "nullable reference types" because they are introducing new syntax for them. The old syntax has been repurposed to have different symantic, non-nullable reference types. String? will mean nullable String will mean non-nullable It's confusing because they are introducing new semantics with old syntax (non-nullable) and new syntax for old semantics (nullable). 
Arrow syntax It's not a functional language, stop shoe-horning that crap in, it solves a problem that didn't exist, but now every tutorial that uses it (for no reason) is almost completely unreadable for 50% of users.
I've always resented the mandatory 'break;' statement at the end of a case block. I mean: there's no fall through, so the next case statement will automatically mark the end of the former case statement, but you have to type a 'break;' there even though fall through isn't there. Asked the C# team once about this, they came up with a lame excuse around "It then looks familiar to C developers" least used, I think not a lot of people use contra/co variance of generic types. There will be a couple who'll use it by accident, like passing a List&lt;string&gt; as value for an argument of type List&lt;object&gt;, but in general, I think it's among the least used features I think.
You're sure? Casting e.g. a string[] to an object[] isn't that rare, a lot of people likely do that and expect that to compile without thinking 'cool stuff that covariance'
They're an example of a tradeoff / cost of a rigid type system.
ReadOnlyCollection&lt;T&gt; should be called ReadOnlyList&lt;T&gt;. Minor but irritating.
&gt;`IDictionary&lt;TKey, TValue&gt;` would then be constrained to `TKey : IHashable Nah, you may still want to use non-hashable types as keys with a custom `IEqualityComparer&lt;T&gt;`.
&gt; Also perhaps explicit string conversions. (implicit rather) Can you elaborate on what you meant here?
== is perfectly capable of comparing values for reference types. You just have to tell the compiler how. 
He means adding an explicit or implicit cast operator to string, so you can write: `string hash = (string)(builder.Mutate(..);` or `string hash = builder.Mutate(..);`.
I'd rather do it like `System.HashCode` and use a struct instead of a class to reduce the garbage collector. **Especially** for something like a hash that is potentially computed often. https://github.com/dotnet/corefx/issues/14354
Could save some allocations by writing to a `CryptoStream` instead of allocating a string and buffer with the full contents. That would also make it easy to write primitives with a `BinaryWriter` instead of having to format them as strings first, although that would be a breaking change.
I haven't voted down anyone
I was a bit hesitant to do it because there are many ways to format a byte array as string.
Ok, my bad. Must have been someone that didn't like me talking bad about XAML then. :)
It's true, `Hashsum` probably has an unnecessary overhead in when calculated often. It was designed for cases when you need to verify integrity of DTOs sent between two endpoints, where additional allocation has small performance impact, compared to IO latency.
You can use a dummy stream like `Stream.Null` if you only want to compute a hash.
Then *either* an `IHashable` `TKey` or an overload of the `Dictionary` constructor that takes an `IEqualityComparer&lt;T&gt;`. Just to make hashing explicit, so e.g. `Distinct` doesn't fail on you at runtime, because the idea of what makes objects unique only lives in your mind. 
There is ISAM, mainframe databases, SQL extensions proprietary to each RDMS, object SQL, persistent OO databases, distributed caches, XML table modelling ....
If the code is already 95% hacks and kludges, then one go-to won't magically make it any worse, but it is less likely to cause a bug than restructuring all of the returns in a large, deeply nested function. The reason we don't use go-tos is not because they don't work, but because they are harder to understand later for a first time reader of the method. Thus, I would say that maybe they could still have a place in critical production patches where avoiding creating another bug on accident is imperative. That said, I still wouldn't use them. I wouldn't want the team members to think their general use is OK. They are fuggly and its easier to just pretend they don't exist.
&gt; String? will mean nullable &gt; &gt; String will mean non-nullable There is no way it will get implemented that way. They have never broken something so major in the language before. Doing that would require rewrites of a portion of almost every mid sized project using C#.
&gt; You can pretty well tell when a person has given adequate and serious thought to the use of async/await for their needs vs someone who simply went around slapping a few wrappers and keywords into their code and started using it. It isn't that complicated. If it can block and the system handles concurrent users or requests, then make it async.
The order of the statement is to facilitate intellisense; you can't write select until you know what it's from. I actually wish tsql would support putting select after from/join...Then you could actually use intellisense in Ssms without having to write "select * " then go and change the asterisk after you finish your from and joins
And you don't think that's an issue? Designing a language feature around IDE sugar? That's ass backwards, and it comes at the expense of conforming to existing conventions.
Basically I like the Elegance defining a function with the Arrow in my mind and it's more representative of what a function actually is at base level it's kind of the same reason why I like f#
NoSQL makes me sad. There's so much good in the relational model, and NoSQL doesn't compare.
Active Directory Domain Services (AD DS) is the AD you’re probably most familiar with. Stores user / computer / service / other infrastructure information across the enterprise as a directory service. Active Directory Lightweight Directory Services (AD LDS) is a stripped down version of AD DS that provides directory services to a specific application (as opposed to an operating system). That’s the 50,000 foot overview on the difference, but I would say that 99% of the time you’re probably working with AD DS. If you’re not, you are probably already aware of it. 
Ah true, good point. 
It might be helpful to point out the key things missing.
Why are lambda expressions a 'least used and least liked feature', then?
DISCLAIMER: I am the author of this project! Hello! This is my first ever project that ended up as a package on nuget, so I am quite excited. The reason I started working on this was because I couldn't really find anything simliar for .Net Core that already existed, so I ended up developing it myself. For names I was kinda split between Delve and BudgetOData, but ended up with Delve :d It is still in a bit of an early stage so I am looking for some feedback here. Go easy on me, I am not a professional developer.. yet.
This seems hacky to you, because guess what? It's hacky. The good thing is that you've got plenty of options here that are much better then sending a string over TCP and hope the other side does the right thing with it. WebAPI/MVC This is the easiest way to do things in a fairly strongly typed manner and make specific calls to specific end points. If you don't have any need for high throughput and performance (not that this option is dog slow), then you should be fine here. If it were me, I'd do this and call it a day WCF This kind of stuff is exactly what WCF was built for, and since you've got two .Net services you can continue to use TCP with the NetTcp binding and continue your current level of performance. WCF is strongly typed out the wazoo, so you'll be better served by splitting out the objects and endpoint interfaces out into a contract project that can be easily shared between both ends of the call. All that being said, WCF is a decent amount of leg work and gets in the way more than it feels it should. I only use it were absolutely necessary these days, and this wouldn't be one of those cases. Message Queues/Busses If I really wanted the best level of performance, flexibility, and scalability, this is where I'd go. Message queueing systems like MSMQ (please don't use this), Rabbit MQ, Azure Message queues, and message buses like NService, MassTransit, and BizTalk, all allow for extremely robust messaging architectures with fire and forget, pub/sub, routing, and a whole bunch of other useful features. Most of all, they are largely asynchronous out of the box and allow for durable/persisted queues. This means that you've got some very scalable options, along with not having the temporal coupling that requires two services to be up and running at the same time to service requests. If all this sounds like overkill, then it probably is. For simpler use cases, these systems are still useful, but are definitely more than you need. That being said, if you're looking into building a lot of services and having them communicate with each other in more of an event driven fashion, these solutions work really well. Just wanted to make sure you were aware of your options.
I would start creating an ICD to document your messaging structure. Further, yes, I would use a header with a message name/number in them. Then instead of a switch statement you can reflect against the name or number to deserialize.
Using a Library for SAML support ... [Kentor](https://github.com/Sustainsys/Saml2) Okta is my SAML provider Using Owin external authentication Using Fiddler ... I can see the SAML being passed back to ExternalLogin Running fine locally but not on integration server. Logininfo is returned null from the sample code
Not sure if message queues are necessarily faster unless you have dedicated hardware for mq. There is more overhead to ensure successful delivery. It’s the same reason why tcp is slower than udp. 
Fantastic answer!
i'll just continue then changing the background and making it look like other enemies are there, even though there aren't. Sad really that Visual Studio lacks so much stuff.
I think when you talk about serialized json over http, I think message queues would likely come out faster. Once you start adding persistence, then yea you're going to have some performance hit, but you've also got to think about what it would take to do have that if you rolled your own.
That's exactly how I do this kind of stuff. It's simple and efficient. Instead of json I advise you to use bson, basically it's json using binary instead of text.
I haven't looked too much into it personally, but there is another engine called Xenko that you could try. From my initial glances at it, it looks like you delve deep into the engine since it's open source. Worth checking out.
Sorry I didn't see your Comment until i pressed "sort by new" I've never used XNA and just worked with Visual Studio. I've coded a lot already and i'm not sure, if I have to do with unity all of the game again. (I still have all the game characters (each movement etc.)) And i'm looking at Unity right now. I'm just not sure if it's still coding, or if it's like. I'll make the comparison with Jimdo and Coding your own Website with HTML. I prefer not using Jimdo and rather making my own website and having stuff on it, which I want. And with Unity, it really seems like Blender and learning all the functions, to let something do my code, without me coding anything sounds like taking all the hard work and fun away. I don't even know how to use it. But I've worked with Blender before (a lot) and I hate it's guts. It's probably the worst game creating Application you can have. I like the idea of staying in visual studio and programming the way I still understand what i'm doing. For example: If I want my character to die, when he touches a label, I know exactly, that I need to write " if (enemy1.Bounds.IntersectsWith(bullet1.Bounds) &amp;&amp; allowance== 1)", then I know exactly what it does. But if I need to change some "gravity setting" to 3 or something, then I have no idea what to do. https://youtu.be/4cF7Sl7FazE?t=8s "without writing any code" And I know that some Blender expert could come and say "you just don't know how to use blender". (and idc I hate blender) &gt;.&lt; Do you know any good youtube tutorials, which allow me to code with c# and unity a 2d game Also another problem I have with visual studio is my game being fullscreen. 
Unity is more like your example than you realize. You can write your own collision system if you want, or being a game engine unity can do that and you only need to write the logic of what happens when those two collide.
I've tried using blender a few times....and i hate it too. It's supposed to be one of the best free modellers out there but I've never liked the interface. So, remember I said Unity uses c#? Well, these days it also comes with a free version of Visual studio. That's right, you can use visual studio to do your coding for unity! I do. Not only that, you use visual studio for debugging too. If you like, you can sort of imagine unity as a graphical front end for you to write c# games in visual studio. Unfotunately I'm an aussie in China and youtube is blocked so I can't recommend any good 2d tutorials on there. There are many sources out there however for tutorials. But unity has their own tutorials too and I've often found them to be good. https://unity3d.com/learn/tutorials/topics/2d-game-creation/2d-game-development-walkthrough?playlist=17093 That is the 2d game tutorial, designed for beginners. 
&gt; erriding the paint method, and drawing your sprites like that rather than as individual pictureboxs, then you can control z ordering and transparency. While there is a learning curve you should look at using a game engine which will solve these boring parts of game dev i did try that, but I ended up with a broken Figure and I wasn't capable of resizing it or doing anything. I think i've found the solution though
I've got the feeling that he meant anonymous methods. The ones made using the delegate keyword.
As other have said, Unity require tons of code for any decently complex game. Visual Studio even has a package so that you can code and debug your Unity code in VS. Unity just takes care of the visualization stuff and other common gaming concepts like collisions. Everything else (creature spawning, power ups, health, level loading, any procedural generation, AI logic, etc.) is going to require code and a lot of it. Even some of the visualization stuff requires some simple code. It is annoying learning a new system. Unity itself can also sometimes be annoy and I'm not a fan of how it does everything. That being said, it is built specifically for designing games and it is pretty decent at it. It is better than Blender in that a lot of the game creation still requires plenty coding.
Blender actually includes it's own game engine these days, Blender Game Engine. I found it confusing and hard to use, because it seems so different from anything else I've ever used. 
"capable" is fine but damn that default implementation. I'd rather not have capability than some bug-prone implementation.
Like this? list.Where(x =&gt; x.IsSomething &amp;&amp; x.IsSomethingElse) 
Awesome. I highly recommend Vue.js, it's really a joy to work with.
The open source game development [engine](https://godotengine.com) has c# support since 3.0 🙂
Nice explanation of cosmodb. But curious what is the real time portion here? 
I originally was going for sense of real time data set editing with SPA and &lt;200ms cosmos db responses. I realized after posting it could be confusing so I already changed the title. Can't change in on reddit though :( 
What exactly makes it a joy to work with? We are trying to determine which client side technologies to use in our shop going forward and one wants to use vue, one wants angular and one wants react. Please let me know what you think about vue, I have had a hard time making any decisions because I just don’t know was much about angular and vue.
I think I will give Unity a try. The reason is because I would most likely have to redo everything and it would literally take forever, for just a shitty 2d Game. I honestly just wanted to make a Game where you play a Soviet Soldier and you shoot down enemies. But thinking about it I had to adapt 100ds of times to Visual studio, because as example I didn't manage to make him shoot there, where I point my Cursor. Maybe I am just stupid and made a lot of work for nothing. But even though i've learned a lot about it. (Like the sprits, which I called spirits by accident) And thanks for sending me wikipedia texts of exact definitions. I know what blender is and what Visual Studio is. "Do not write Visual Studio"? what do you mean by this? My main language is Germand and we write Visual Studio, or this is at least the way I write it. 
Thanks for this. I'll give it a good look soon but this is basically three things I love mixed nicely together
Ok, sorry it took so long to get back. This works perfectly. I will worry about performance later on since this solution is just so minimalistic and easy that it's insane compared to what I was planning on doing. I'm afraid I didn't understand your last post though. Technically you are still manually setting stats and distance as priorities? I want it to be dynamic and easy to change. I have 2 ideas for this. One is a GetStat function, here is a simplified version: public float GetStat(string stat) { if (stat == "LowestHealth") { return currentHealth; } else if (stat == "Speed") { return movespeed; } else if (stat == "Distance") { return distance; } } which simply returns the stat I am looking for, then I can have a List of strings that one simply adds, removes or modifies the values to change priorities. The second would be to just create a stats dictionary&lt;string, float&gt; and do the same, stat["Health"] and it simply returns the value by itself. Any thoughts on this or other possibilities or potential problems for any of them? Thanks once again!
As another commenter said on your earlier thread, what exactly is your endgame with this? Depending on what you want to actually use this information for, there may be complications that could render any direct answer to your query relatively useless. Like, somewhat directly, you could try to copy-paste some of the stuff from [SRef.cs](https://github.com/dotnet/corefx/blob/2e1f9fc09800515a41e03431470a3c04133c814b/src/System.Runtime.Caching/src/System/Runtime/Caching/SRef.cs) and make sure to account for the fact that I'm pretty sure that it only updates after Gen2 collections, but that could over-report if you don't want to consider the size of recursively referenced objects (which I think it does count...). If you're just trying to figure out how many objects you can allocate without running out of virtual memory space, then just allocate and store them in a loop and see how many you can get before it crashes. If you're just interested in knowing a number, then copy the code into an application that allocates basically nothing, make 100 arrays of like a million instances each, then do a GC.GetTotalMemory(true), divide by however many objects you allocated (100 million in this example), subtract 8 for the references stored in the arrays, and round to the nearest integer. What exactly are you trying to accomplish? Maybe none of these ideas is right.
To be honest, if I saw a 500 liner it'd be added to the high priority task list for immediate refactoring. I apply the same thought process to all of my code as I was taught when learning ASP.NET controller action methods; - **keep them lean**. - each method should have a single responsibility. - each method should be no longer than 40-50 lines of code. - and each method should be clearly commented. This is all very logical and is what has stuck with me since school, I'm thankful that my tutors were pedantic because it really did pay off. I hire a lot of contractors and freelancers, spaghetti and bloated code would cost me many thousands of $ trying to get them up to speed on a project before they can even be productive. In fact, the above very simple guidelines form part of my induction documentation for new staff and contractors with a "there will be consequences" clause.
I think he may have misread the question in the title.